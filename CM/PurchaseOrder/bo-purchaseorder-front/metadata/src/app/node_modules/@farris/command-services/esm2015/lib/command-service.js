import { Injectable } from '@angular/core';
import { filter, take } from 'rxjs/operators';
import { AppContext, ViewModel } from '@farris/devkit';
/**
 * 命令服务
 * @scope FrameConmponent
 */
class CommandService {
    constructor(viewModel, appContext) {
        this.viewModel = viewModel;
        this.appContext = appContext;
    }
    /**
     * context取值方法
     */
    get context() {
        return this.innerContext;
    }
    /**
     * context设值方法
     */
    set context(context) {
        this.innerContext = context;
    }
    /**
     * 执行命令
     * @param commandName 命令名称
     * @param frameId 框架ID
     */
    execute(commandName, frameId) {
        if (!commandName || commandName === '' || commandName === 'undefined') {
            return;
        }
        let viewModel = this.viewModel;
        if (frameId) {
            const targetContext = this.appContext.frameContextManager.getFrameContextById(frameId);
            viewModel = targetContext.viewModel;
        }
        return viewModel[commandName]();
    }
    /**
     * 等待BeSession创建
     * @returns 最新创建出来的BeSession
     */
    waitForBeSession() {
        const frameContext = this.context.frameContext;
        const befRepository = frameContext.repository;
        const sessionService = befRepository.restService.sessionService;
        return sessionService.getBeSessionId().pipe(filter((beSessionId) => {
            return beSessionId !== null;
        }), take(1));
    }
    /**
     * 提取某个任务的执行结果
     * @param taskName 任务名称
     * @reutrn 返回taskName对应任务的执行结果
     */
    extractResult(taskName) {
        const results = this.context.results;
        return results[taskName];
    }
    /**
     * 暂停当前组件的行切换事件抛出
     */
    suspendFrameContextRowSelectedEvent(frameId) {
        let frameContext = this.viewModel.frameContext;
        if (frameId) {
            frameContext = this.viewModel.frameContext.appContext.frameContextManager.getFrameContextById(frameId);
        }
        if (frameContext) {
            frameContext.bindingData.rowSelectedEventSuspend = true;
        }
    }
    resumeFrameContextRowSelectedEvent(frameId) {
        let frameContext = this.viewModel.frameContext;
        if (frameId) {
            frameContext = this.viewModel.frameContext.appContext.frameContextManager.getFrameContextById(frameId);
        }
        if (frameContext) {
            frameContext.bindingData.rowSelectedEventSuspend = false;
        }
    }
}
CommandService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
CommandService.ctorParameters = () => [
    { type: ViewModel },
    { type: AppContext }
];
export { CommandService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tbWFuZC1zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGZhcnJpcy9jb21tYW5kLXNlcnZpY2VzLyIsInNvdXJjZXMiOlsibGliL2NvbW1hbmQtc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRTNDLE9BQU8sRUFBRSxNQUFNLEVBQUUsSUFBSSxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDOUMsT0FBTyxFQUFFLFVBQVUsRUFBRSxTQUFTLEVBQXdDLE1BQU0sZ0JBQWdCLENBQUM7QUFHN0Y7OztHQUdHO0FBQ0gsTUFDTSxjQUFjO0lBcUJsQixZQUNVLFNBQW9CLEVBQ3BCLFVBQXNCO1FBRHRCLGNBQVMsR0FBVCxTQUFTLENBQVc7UUFDcEIsZUFBVSxHQUFWLFVBQVUsQ0FBWTtJQUM1QixDQUFDO0lBakJMOztPQUVHO0lBQ0gsSUFBVyxPQUFPO1FBQ2hCLE9BQU8sSUFBSSxDQUFDLFlBQVksQ0FBQztJQUMzQixDQUFDO0lBRUQ7O09BRUc7SUFDSCxJQUFXLE9BQU8sQ0FBQyxPQUF1QjtRQUN4QyxJQUFJLENBQUMsWUFBWSxHQUFHLE9BQU8sQ0FBQztJQUM5QixDQUFDO0lBT0Q7Ozs7T0FJRztJQUNJLE9BQU8sQ0FBQyxXQUFtQixFQUFFLE9BQWdCO1FBQ2xELElBQUksQ0FBQyxXQUFXLElBQUksV0FBVyxLQUFLLEVBQUUsSUFBSSxXQUFXLEtBQUssV0FBVyxFQUFFO1lBQ3JFLE9BQU87U0FDUjtRQUNELElBQUksU0FBUyxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUM7UUFDL0IsSUFBSSxPQUFPLEVBQUU7WUFDWCxNQUFNLGFBQWEsR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLG1CQUFtQixDQUFDLG1CQUFtQixDQUFDLE9BQU8sQ0FBQyxDQUFDO1lBQ3ZGLFNBQVMsR0FBRyxhQUFhLENBQUMsU0FBUyxDQUFDO1NBQ3JDO1FBQ0QsT0FBTyxTQUFTLENBQUMsV0FBVyxDQUFDLEVBQUUsQ0FBQztJQUNsQyxDQUFDO0lBRUQ7OztPQUdHO0lBQ0ksZ0JBQWdCO1FBQ3JCLE1BQU0sWUFBWSxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsWUFBWSxDQUFDO1FBQy9DLE1BQU0sYUFBYSxHQUFHLFlBQVksQ0FBQyxVQUFtQyxDQUFDO1FBQ3ZFLE1BQU0sY0FBYyxHQUFHLGFBQWEsQ0FBQyxXQUFXLENBQUMsY0FBYyxDQUFDO1FBQ2hFLE9BQU8sY0FBYyxDQUFDLGNBQWMsRUFBRSxDQUFDLElBQUksQ0FDekMsTUFBTSxDQUFDLENBQUMsV0FBbUIsRUFBRSxFQUFFO1lBQzdCLE9BQU8sV0FBVyxLQUFLLElBQUksQ0FBQztRQUM5QixDQUFDLENBQUMsRUFDRixJQUFJLENBQUMsQ0FBQyxDQUFDLENBQ1IsQ0FBQztJQUNKLENBQUM7SUFFRDs7OztPQUlHO0lBQ0ksYUFBYSxDQUFDLFFBQWdCO1FBQ25DLE1BQU0sT0FBTyxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDO1FBQ3JDLE9BQU8sT0FBTyxDQUFDLFFBQVEsQ0FBQyxDQUFDO0lBQzNCLENBQUM7SUFDRDs7T0FFRztJQUNJLG1DQUFtQyxDQUFDLE9BQWdCO1FBQ3pELElBQUksWUFBWSxHQUFpQixJQUFJLENBQUMsU0FBUyxDQUFDLFlBQVksQ0FBQztRQUM3RCxJQUFJLE9BQU8sRUFBRTtZQUNYLFlBQVksR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLFlBQVksQ0FBQyxVQUFVLENBQUMsbUJBQW1CLENBQUMsbUJBQW1CLENBQUMsT0FBTyxDQUFDLENBQUM7U0FDeEc7UUFDRCxJQUFJLFlBQVksRUFBRTtZQUNoQixZQUFZLENBQUMsV0FBVyxDQUFDLHVCQUF1QixHQUFHLElBQUksQ0FBQztTQUN6RDtJQUVILENBQUM7SUFDTSxrQ0FBa0MsQ0FBQyxPQUFnQjtRQUN4RCxJQUFJLFlBQVksR0FBaUIsSUFBSSxDQUFDLFNBQVMsQ0FBQyxZQUFZLENBQUM7UUFDN0QsSUFBSSxPQUFPLEVBQUU7WUFDWCxZQUFZLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxZQUFZLENBQUMsVUFBVSxDQUFDLG1CQUFtQixDQUFDLG1CQUFtQixDQUFDLE9BQU8sQ0FBQyxDQUFDO1NBQ3hHO1FBQ0QsSUFBSSxZQUFZLEVBQUU7WUFDaEIsWUFBWSxDQUFDLFdBQVcsQ0FBQyx1QkFBdUIsR0FBRyxLQUFLLENBQUM7U0FDMUQ7SUFDSCxDQUFDOzs7WUExRkYsVUFBVTs7OztZQVBVLFNBQVM7WUFBckIsVUFBVTs7QUFvR25CLE9BQU8sRUFBRSxjQUFjLEVBQUUsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IGZpbHRlciwgdGFrZSB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcbmltcG9ydCB7IEFwcENvbnRleHQsIFZpZXdNb2RlbCwgQ29tbWFuZENvbnRleHQsIEVudGl0eSwgRnJhbWVDb250ZXh0IH0gZnJvbSAnQGZhcnJpcy9kZXZraXQnO1xuaW1wb3J0IHsgQmVmUmVwb3NpdG9yeSB9IGZyb20gJ0BmYXJyaXMvYmVmJztcblxuLyoqXG4gKiDlkb3ku6TmnI3liqFcbiAqIEBzY29wZSBGcmFtZUNvbm1wb25lbnRcbiAqL1xuQEluamVjdGFibGUoKVxuY2xhc3MgQ29tbWFuZFNlcnZpY2Uge1xuXG4gIC8qKlxuICAgKiDlhoXpg6hjb3RuZXh0XG4gICAqL1xuICBwcml2YXRlIGlubmVyQ29udGV4dDogQ29tbWFuZENvbnRleHQ7XG5cbiAgLyoqXG4gICAqIGNvbnRleHTlj5blgLzmlrnms5VcbiAgICovXG4gIHB1YmxpYyBnZXQgY29udGV4dCgpOiBDb21tYW5kQ29udGV4dCB7XG4gICAgcmV0dXJuIHRoaXMuaW5uZXJDb250ZXh0O1xuICB9XG5cbiAgLyoqXG4gICAqIGNvbnRleHTorr7lgLzmlrnms5VcbiAgICovXG4gIHB1YmxpYyBzZXQgY29udGV4dChjb250ZXh0OiBDb21tYW5kQ29udGV4dCkge1xuICAgIHRoaXMuaW5uZXJDb250ZXh0ID0gY29udGV4dDtcbiAgfVxuXG4gIGNvbnN0cnVjdG9yKFxuICAgIHByaXZhdGUgdmlld01vZGVsOiBWaWV3TW9kZWwsXG4gICAgcHJpdmF0ZSBhcHBDb250ZXh0OiBBcHBDb250ZXh0XG4gICkgeyB9XG5cbiAgLyoqXG4gICAqIOaJp+ihjOWRveS7pFxuICAgKiBAcGFyYW0gY29tbWFuZE5hbWUg5ZG95Luk5ZCN56ewXG4gICAqIEBwYXJhbSBmcmFtZUlkIOahhuaetklEXG4gICAqL1xuICBwdWJsaWMgZXhlY3V0ZShjb21tYW5kTmFtZTogc3RyaW5nLCBmcmFtZUlkPzogc3RyaW5nKTogT2JzZXJ2YWJsZTxhbnk+IHtcbiAgICBpZiAoIWNvbW1hbmROYW1lIHx8IGNvbW1hbmROYW1lID09PSAnJyB8fCBjb21tYW5kTmFtZSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgbGV0IHZpZXdNb2RlbCA9IHRoaXMudmlld01vZGVsO1xuICAgIGlmIChmcmFtZUlkKSB7XG4gICAgICBjb25zdCB0YXJnZXRDb250ZXh0ID0gdGhpcy5hcHBDb250ZXh0LmZyYW1lQ29udGV4dE1hbmFnZXIuZ2V0RnJhbWVDb250ZXh0QnlJZChmcmFtZUlkKTtcbiAgICAgIHZpZXdNb2RlbCA9IHRhcmdldENvbnRleHQudmlld01vZGVsO1xuICAgIH1cbiAgICByZXR1cm4gdmlld01vZGVsW2NvbW1hbmROYW1lXSgpO1xuICB9XG5cbiAgLyoqXG4gICAqIOetieW+hUJlU2Vzc2lvbuWIm+W7ulxuICAgKiBAcmV0dXJucyDmnIDmlrDliJvlu7rlh7rmnaXnmoRCZVNlc3Npb25cbiAgICovXG4gIHB1YmxpYyB3YWl0Rm9yQmVTZXNzaW9uKCk6IE9ic2VydmFibGU8c3RyaW5nPiB7XG4gICAgY29uc3QgZnJhbWVDb250ZXh0ID0gdGhpcy5jb250ZXh0LmZyYW1lQ29udGV4dDtcbiAgICBjb25zdCBiZWZSZXBvc2l0b3J5ID0gZnJhbWVDb250ZXh0LnJlcG9zaXRvcnkgYXMgQmVmUmVwb3NpdG9yeTxFbnRpdHk+O1xuICAgIGNvbnN0IHNlc3Npb25TZXJ2aWNlID0gYmVmUmVwb3NpdG9yeS5yZXN0U2VydmljZS5zZXNzaW9uU2VydmljZTtcbiAgICByZXR1cm4gc2Vzc2lvblNlcnZpY2UuZ2V0QmVTZXNzaW9uSWQoKS5waXBlKFxuICAgICAgZmlsdGVyKChiZVNlc3Npb25JZDogc3RyaW5nKSA9PiB7XG4gICAgICAgIHJldHVybiBiZVNlc3Npb25JZCAhPT0gbnVsbDtcbiAgICAgIH0pLFxuICAgICAgdGFrZSgxKVxuICAgICk7XG4gIH1cblxuICAvKipcbiAgICog5o+Q5Y+W5p+Q5Liq5Lu75Yqh55qE5omn6KGM57uT5p6cXG4gICAqIEBwYXJhbSB0YXNrTmFtZSDku7vliqHlkI3np7BcbiAgICogQHJldXRybiDov5Tlm550YXNrTmFtZeWvueW6lOS7u+WKoeeahOaJp+ihjOe7k+aenFxuICAgKi9cbiAgcHVibGljIGV4dHJhY3RSZXN1bHQodGFza05hbWU6IHN0cmluZykge1xuICAgIGNvbnN0IHJlc3VsdHMgPSB0aGlzLmNvbnRleHQucmVzdWx0cztcbiAgICByZXR1cm4gcmVzdWx0c1t0YXNrTmFtZV07XG4gIH1cbiAgLyoqXG4gICAqIOaaguWBnOW9k+WJjee7hOS7tueahOihjOWIh+aNouS6i+S7tuaKm+WHulxuICAgKi9cbiAgcHVibGljIHN1c3BlbmRGcmFtZUNvbnRleHRSb3dTZWxlY3RlZEV2ZW50KGZyYW1lSWQ/OiBzdHJpbmcpIHtcbiAgICBsZXQgZnJhbWVDb250ZXh0OiBGcmFtZUNvbnRleHQgPSB0aGlzLnZpZXdNb2RlbC5mcmFtZUNvbnRleHQ7XG4gICAgaWYgKGZyYW1lSWQpIHtcbiAgICAgIGZyYW1lQ29udGV4dCA9IHRoaXMudmlld01vZGVsLmZyYW1lQ29udGV4dC5hcHBDb250ZXh0LmZyYW1lQ29udGV4dE1hbmFnZXIuZ2V0RnJhbWVDb250ZXh0QnlJZChmcmFtZUlkKTtcbiAgICB9XG4gICAgaWYgKGZyYW1lQ29udGV4dCkge1xuICAgICAgZnJhbWVDb250ZXh0LmJpbmRpbmdEYXRhLnJvd1NlbGVjdGVkRXZlbnRTdXNwZW5kID0gdHJ1ZTtcbiAgICB9XG5cbiAgfVxuICBwdWJsaWMgcmVzdW1lRnJhbWVDb250ZXh0Um93U2VsZWN0ZWRFdmVudChmcmFtZUlkPzogc3RyaW5nKSB7XG4gICAgbGV0IGZyYW1lQ29udGV4dDogRnJhbWVDb250ZXh0ID0gdGhpcy52aWV3TW9kZWwuZnJhbWVDb250ZXh0O1xuICAgIGlmIChmcmFtZUlkKSB7XG4gICAgICBmcmFtZUNvbnRleHQgPSB0aGlzLnZpZXdNb2RlbC5mcmFtZUNvbnRleHQuYXBwQ29udGV4dC5mcmFtZUNvbnRleHRNYW5hZ2VyLmdldEZyYW1lQ29udGV4dEJ5SWQoZnJhbWVJZCk7XG4gICAgfVxuICAgIGlmIChmcmFtZUNvbnRleHQpIHtcbiAgICAgIGZyYW1lQ29udGV4dC5iaW5kaW5nRGF0YS5yb3dTZWxlY3RlZEV2ZW50U3VzcGVuZCA9IGZhbHNlO1xuICAgIH1cbiAgfVxufVxuXG5leHBvcnQgeyBDb21tYW5kU2VydmljZSB9O1xuIl19