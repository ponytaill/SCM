import { from, of } from 'rxjs';
import { map, switchMap } from 'rxjs/operators';
import axios from 'axios';
import { HttpUtil } from './http-util';
/**
 * HttpClient
 */
var HttpClient = /** @class */ (function () {
    /**
     * 构造函数
     */
    function HttpClient() {
        this.axiosInstance = axios.create();
    }
    /**
     * 发送GET请求
     */
    HttpClient.prototype.get = function (url, requestConfig) {
        return this.request('GET', url, requestConfig);
    };
    /**
     * 发送POST请求
     */
    HttpClient.prototype.post = function (url, body, requestConfig) {
        requestConfig = HttpUtil.appendBodyToRequestConfig(body, requestConfig);
        return this.request('POST', url, requestConfig);
    };
    /**
     * 发送PUT请求
     */
    HttpClient.prototype.put = function (url, body, requestConfig) {
        requestConfig = HttpUtil.appendBodyToRequestConfig(body, requestConfig);
        return this.request('PUT', url, requestConfig);
    };
    /**
     * 发送PATCH请求
     */
    HttpClient.prototype.patch = function (url, body, requestConfig) {
        requestConfig = HttpUtil.appendBodyToRequestConfig(body, requestConfig);
        return this.request('PATCH', url, requestConfig);
    };
    /**
     * 发送DELETE请求
     */
    HttpClient.prototype.delete = function (url, requestConfig) {
        return this.request('DELETE', url, requestConfig);
    };
    /**
     * 发送请求
     */
    HttpClient.prototype.request = function (method, url, requestConfig) {
        var _this = this;
        var request$ = of(true).pipe(switchMap(function () {
            var axiosRequestConfig = HttpUtil.buildAxiosRequestConfig(method, url, requestConfig);
            return from(_this.axiosInstance.request(axiosRequestConfig));
        }));
        return request$.pipe(map(function (axiosResponse) {
            var httpResponse = HttpUtil.buildHttpResponse(axiosResponse);
            return requestConfig.observe === 'response' ? httpResponse : axiosResponse.data;
        }));
    };
    return HttpClient;
}());
export { HttpClient };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaHR0cC1jbGllbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZmFycmlzL21vYmlsZS1kZXZraXQvIiwic291cmNlcyI6WyJsaWIvaHR0cC9odHRwLWNsaWVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQWMsSUFBSSxFQUFFLEVBQUUsRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUM1QyxPQUFPLEVBQUUsR0FBRyxFQUFFLFNBQVMsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQ2hELE9BQU8sS0FBSyxNQUFNLE9BQU8sQ0FBQztBQUcxQixPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sYUFBYSxDQUFDO0FBRXZDOztHQUVHO0FBQ0g7SUFPRTs7T0FFRztJQUNIO1FBQ0UsSUFBSSxDQUFDLGFBQWEsR0FBRyxLQUFLLENBQUMsTUFBTSxFQUFFLENBQUM7SUFDdEMsQ0FBQztJQUVEOztPQUVHO0lBQ0ksd0JBQUcsR0FBVixVQUFXLEdBQVcsRUFBRSxhQUFnQztRQUN0RCxPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsS0FBSyxFQUFFLEdBQUcsRUFBRSxhQUFhLENBQUMsQ0FBQztJQUNqRCxDQUFDO0lBRUQ7O09BRUc7SUFDSSx5QkFBSSxHQUFYLFVBQVksR0FBVyxFQUFFLElBQVMsRUFBRSxhQUFnQztRQUNsRSxhQUFhLEdBQUcsUUFBUSxDQUFDLHlCQUF5QixDQUFDLElBQUksRUFBRSxhQUFhLENBQUMsQ0FBQztRQUN4RSxPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxFQUFFLEdBQUcsRUFBRSxhQUFhLENBQUMsQ0FBQztJQUNsRCxDQUFDO0lBRUQ7O09BRUc7SUFDSSx3QkFBRyxHQUFWLFVBQVcsR0FBVyxFQUFFLElBQVMsRUFBRSxhQUFnQztRQUNqRSxhQUFhLEdBQUcsUUFBUSxDQUFDLHlCQUF5QixDQUFDLElBQUksRUFBRSxhQUFhLENBQUMsQ0FBQztRQUN4RSxPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsS0FBSyxFQUFFLEdBQUcsRUFBRSxhQUFhLENBQUMsQ0FBQztJQUNqRCxDQUFDO0lBRUQ7O09BRUc7SUFDSSwwQkFBSyxHQUFaLFVBQWEsR0FBVyxFQUFFLElBQVMsRUFBRSxhQUFnQztRQUNuRSxhQUFhLEdBQUcsUUFBUSxDQUFDLHlCQUF5QixDQUFDLElBQUksRUFBRSxhQUFhLENBQUMsQ0FBQztRQUN4RSxPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsT0FBTyxFQUFFLEdBQUcsRUFBRSxhQUFhLENBQUMsQ0FBQztJQUNuRCxDQUFDO0lBRUQ7O09BRUc7SUFDSSwyQkFBTSxHQUFiLFVBQWMsR0FBVyxFQUFFLGFBQWdDO1FBQ3pELE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxRQUFRLEVBQUUsR0FBRyxFQUFFLGFBQWEsQ0FBQyxDQUFDO0lBQ3BELENBQUM7SUFFRDs7T0FFRztJQUNILDRCQUFPLEdBQVAsVUFBUyxNQUFrQixFQUFFLEdBQVcsRUFBRSxhQUFnQztRQUExRSxpQkFhQztRQVpDLElBQU0sUUFBUSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxJQUFJLENBQzVCLFNBQVMsQ0FBQztZQUNSLElBQU0sa0JBQWtCLEdBQUcsUUFBUSxDQUFDLHVCQUF1QixDQUFDLE1BQU0sRUFBRSxHQUFHLEVBQUUsYUFBYSxDQUFDLENBQUM7WUFDeEYsT0FBTyxJQUFJLENBQUMsS0FBSSxDQUFDLGFBQWEsQ0FBQyxPQUFPLENBQUMsa0JBQWtCLENBQUMsQ0FBQyxDQUFDO1FBQzlELENBQUMsQ0FBQyxDQUNILENBQUM7UUFDRixPQUFPLFFBQVEsQ0FBQyxJQUFJLENBQ2xCLEdBQUcsQ0FBQyxVQUFDLGFBQTRCO1lBQy9CLElBQU0sWUFBWSxHQUFHLFFBQVEsQ0FBQyxpQkFBaUIsQ0FBQyxhQUFhLENBQUMsQ0FBQztZQUMvRCxPQUFPLGFBQWEsQ0FBQyxPQUFPLEtBQUssVUFBVSxDQUFDLENBQUMsQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUM7UUFDbEYsQ0FBQyxDQUFDLENBQ0gsQ0FBQztJQUNKLENBQUM7SUFFSCxpQkFBQztBQUFELENBQUMsQUF0RUQsSUFzRUM7QUFFRCxPQUFPLEVBQUUsVUFBVSxFQUFFLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBPYnNlcnZhYmxlLCBmcm9tLCBvZiB9IGZyb20gJ3J4anMnO1xyXG5pbXBvcnQgeyBtYXAsIHN3aXRjaE1hcCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcclxuaW1wb3J0IGF4aW9zIGZyb20gJ2F4aW9zJztcclxuaW1wb3J0IHsgQXhpb3NJbnN0YW5jZSwgQXhpb3NSZXNwb25zZX0gZnJvbSAnYXhpb3MnO1xyXG5pbXBvcnQgeyBIdHRwTWV0aG9kLCBIdHRwUmVxdWVzdENvbmZpZyB9IGZyb20gJy4vdHlwZXMnO1xyXG5pbXBvcnQgeyBIdHRwVXRpbCB9IGZyb20gJy4vaHR0cC11dGlsJztcclxuXHJcbi8qKlxyXG4gKiBIdHRwQ2xpZW50XHJcbiAqL1xyXG5jbGFzcyBIdHRwQ2xpZW50IHtcclxuXHJcbiAgLyoqXHJcbiAgICogYXhpb3Plrp7kvotcclxuICAgKi9cclxuICBwcml2YXRlIGF4aW9zSW5zdGFuY2U6IEF4aW9zSW5zdGFuY2U7XHJcblxyXG4gIC8qKlxyXG4gICAqIOaehOmAoOWHveaVsFxyXG4gICAqL1xyXG4gIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgdGhpcy5heGlvc0luc3RhbmNlID0gYXhpb3MuY3JlYXRlKCk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDlj5HpgIFHRVTor7fmsYJcclxuICAgKi9cclxuICBwdWJsaWMgZ2V0KHVybDogc3RyaW5nLCByZXF1ZXN0Q29uZmlnOiBIdHRwUmVxdWVzdENvbmZpZyk6IE9ic2VydmFibGU8YW55PiB7XHJcbiAgICByZXR1cm4gdGhpcy5yZXF1ZXN0KCdHRVQnLCB1cmwsIHJlcXVlc3RDb25maWcpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog5Y+R6YCBUE9TVOivt+axglxyXG4gICAqL1xyXG4gIHB1YmxpYyBwb3N0KHVybDogc3RyaW5nLCBib2R5OiBhbnksIHJlcXVlc3RDb25maWc6IEh0dHBSZXF1ZXN0Q29uZmlnKSB7XHJcbiAgICByZXF1ZXN0Q29uZmlnID0gSHR0cFV0aWwuYXBwZW5kQm9keVRvUmVxdWVzdENvbmZpZyhib2R5LCByZXF1ZXN0Q29uZmlnKTtcclxuICAgIHJldHVybiB0aGlzLnJlcXVlc3QoJ1BPU1QnLCB1cmwsIHJlcXVlc3RDb25maWcpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog5Y+R6YCBUFVU6K+35rGCXHJcbiAgICovXHJcbiAgcHVibGljIHB1dCh1cmw6IHN0cmluZywgYm9keTogYW55LCByZXF1ZXN0Q29uZmlnOiBIdHRwUmVxdWVzdENvbmZpZykge1xyXG4gICAgcmVxdWVzdENvbmZpZyA9IEh0dHBVdGlsLmFwcGVuZEJvZHlUb1JlcXVlc3RDb25maWcoYm9keSwgcmVxdWVzdENvbmZpZyk7XHJcbiAgICByZXR1cm4gdGhpcy5yZXF1ZXN0KCdQVVQnLCB1cmwsIHJlcXVlc3RDb25maWcpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog5Y+R6YCBUEFUQ0jor7fmsYJcclxuICAgKi9cclxuICBwdWJsaWMgcGF0Y2godXJsOiBzdHJpbmcsIGJvZHk6IGFueSwgcmVxdWVzdENvbmZpZzogSHR0cFJlcXVlc3RDb25maWcpIHtcclxuICAgIHJlcXVlc3RDb25maWcgPSBIdHRwVXRpbC5hcHBlbmRCb2R5VG9SZXF1ZXN0Q29uZmlnKGJvZHksIHJlcXVlc3RDb25maWcpO1xyXG4gICAgcmV0dXJuIHRoaXMucmVxdWVzdCgnUEFUQ0gnLCB1cmwsIHJlcXVlc3RDb25maWcpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog5Y+R6YCBREVMRVRF6K+35rGCXHJcbiAgICovXHJcbiAgcHVibGljIGRlbGV0ZSh1cmw6IHN0cmluZywgcmVxdWVzdENvbmZpZzogSHR0cFJlcXVlc3RDb25maWcpIHtcclxuICAgIHJldHVybiB0aGlzLnJlcXVlc3QoJ0RFTEVURScsIHVybCwgcmVxdWVzdENvbmZpZyk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDlj5HpgIHor7fmsYJcclxuICAgKi9cclxuICByZXF1ZXN0KCBtZXRob2Q6IEh0dHBNZXRob2QsIHVybDogc3RyaW5nLCByZXF1ZXN0Q29uZmlnOiBIdHRwUmVxdWVzdENvbmZpZyk6IE9ic2VydmFibGU8YW55PiB7XHJcbiAgICBjb25zdCByZXF1ZXN0JCA9IG9mKHRydWUpLnBpcGUoXHJcbiAgICAgIHN3aXRjaE1hcCgoKSA9PiB7XHJcbiAgICAgICAgY29uc3QgYXhpb3NSZXF1ZXN0Q29uZmlnID0gSHR0cFV0aWwuYnVpbGRBeGlvc1JlcXVlc3RDb25maWcobWV0aG9kLCB1cmwsIHJlcXVlc3RDb25maWcpO1xyXG4gICAgICAgIHJldHVybiBmcm9tKHRoaXMuYXhpb3NJbnN0YW5jZS5yZXF1ZXN0KGF4aW9zUmVxdWVzdENvbmZpZykpO1xyXG4gICAgICB9KVxyXG4gICAgKTtcclxuICAgIHJldHVybiByZXF1ZXN0JC5waXBlKFxyXG4gICAgICBtYXAoKGF4aW9zUmVzcG9uc2U6IEF4aW9zUmVzcG9uc2UpID0+IHtcclxuICAgICAgICBjb25zdCBodHRwUmVzcG9uc2UgPSBIdHRwVXRpbC5idWlsZEh0dHBSZXNwb25zZShheGlvc1Jlc3BvbnNlKTtcclxuICAgICAgICByZXR1cm4gcmVxdWVzdENvbmZpZy5vYnNlcnZlID09PSAncmVzcG9uc2UnID8gaHR0cFJlc3BvbnNlIDogYXhpb3NSZXNwb25zZS5kYXRhO1xyXG4gICAgICB9KVxyXG4gICAgKTtcclxuICB9XHJcblxyXG59XHJcblxyXG5leHBvcnQgeyBIdHRwQ2xpZW50IH07XHJcbiJdfQ==