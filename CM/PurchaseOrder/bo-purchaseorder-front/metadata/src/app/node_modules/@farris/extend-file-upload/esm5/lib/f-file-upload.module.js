/**
 * @fileoverview added by tsickle
 * Generated from: lib/f-file-upload.module.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';
import { FFileDropDirective, FFileSelectDirective, FFilePreviewListTypeTemplateDirective, FFileUploadDirective, FFilePreviewToolbarTemplateDirective } from './directive/index';
import { FFileUploadComponent, FFileViewImageComponent, FFilePreviewComponent, PreviewCheckboxComponent } from './components/index';
import { UploadServerService } from './model/index';
import { FFileSizePipe, FFileDatePipe } from './pipe/index';
import { FFileUploadAPIServiceToken, FFileUploadDefaultService, FFileUploaderService } from './service/index';
import { NotifyModule } from '@farris/ui-notify';
import { ModalModule } from '@farris/ui-modal';
import { DateHelperModule } from '@farris/ui-common/date';
import { MessagerModule } from '@farris/ui-messager';
import { FAreaResponseModule } from '@farris/ui-area-response';
import { UploadAndPreviewComponent } from './components/upload-and-preview/upload-and-preview.component';
import { UploadProgressComponent } from './components/upload-progress/upload-progress.component';
import { MultiDownloadInfoComponent } from './components/multi-download-info/multi-download-info.component';
import { UploadFileOrderDragDirective } from './components/upload-and-preview/file-order-drag.directive';
import { LocaleModule } from '@farris/ui-locale';
import { UploadReplaceXPipe } from './components/upload-and-preview/replaceX.pipe';
var FFileUploadModule = /** @class */ (function () {
    function FFileUploadModule() {
    }
    /**
     * @param {?=} config
     * @param {?=} uploadSer
     * @return {?}
     */
    FFileUploadModule.forRoot = /**
     * @param {?=} config
     * @param {?=} uploadSer
     * @return {?}
     */
    function (config, uploadSer) {
        return {
            ngModule: FFileUploadModule,
            providers: [
                { provide: FFileUploadAPIServiceToken, useValue: config },
                FFileUploaderService,
                {
                    provide: UploadServerService,
                    useClass: uploadSer || FFileUploadDefaultService
                }
            ]
        };
    };
    FFileUploadModule.decorators = [
        { type: NgModule, args: [{
                    declarations: [FFileDropDirective, FFileSelectDirective, FFileUploadComponent,
                        FFileViewImageComponent, FFilePreviewComponent, FFilePreviewListTypeTemplateDirective, FFileUploadDirective,
                        PreviewCheckboxComponent, FFilePreviewToolbarTemplateDirective, FFileSizePipe, UploadAndPreviewComponent, UploadProgressComponent,
                        FFileDatePipe, MultiDownloadInfoComponent, UploadFileOrderDragDirective,
                        UploadReplaceXPipe
                    ],
                    exports: [FFileDropDirective, FFileSelectDirective, FFileUploadComponent, FFileViewImageComponent,
                        FFilePreviewComponent, FFilePreviewListTypeTemplateDirective, FFileUploadDirective, FFilePreviewToolbarTemplateDirective, FFileSizePipe,
                        UploadAndPreviewComponent, UploadProgressComponent, FFileDatePipe, UploadFileOrderDragDirective],
                    imports: [
                        CommonModule,
                        NotifyModule,
                        MessagerModule,
                        FAreaResponseModule,
                        DateHelperModule.forRoot(),
                        ModalModule.forRoot(),
                        LocaleModule.forRoot()
                    ],
                    providers: [
                        FFileUploaderService,
                        {
                            provide: UploadServerService,
                            useClass: FFileUploadDefaultService
                        }
                    ],
                    entryComponents: [
                        MultiDownloadInfoComponent
                    ]
                },] }
    ];
    return FFileUploadModule;
}());
export { FFileUploadModule };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZi1maWxlLXVwbG9hZC5tb2R1bGUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZmFycmlzL2V4dGVuZC1maWxlLXVwbG9hZC8iLCJzb3VyY2VzIjpbImxpYi9mLWZpbGUtdXBsb2FkLm1vZHVsZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLE9BQU8sRUFBRSxRQUFRLEVBQXVCLE1BQU0sZUFBZSxDQUFDO0FBQzlELE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUMvQyxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsb0JBQW9CLEVBQUUscUNBQXFDLEVBQUUsb0JBQW9CLEVBQUUsb0NBQW9DLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQztBQUNoTCxPQUFPLEVBQUUsb0JBQW9CLEVBQUUsdUJBQXVCLEVBQUUscUJBQXFCLEVBQUUsd0JBQXdCLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQztBQUNwSSxPQUFPLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDcEQsT0FBTyxFQUFFLGFBQWEsRUFBRSxhQUFhLEVBQUUsTUFBTSxjQUFjLENBQUM7QUFDNUQsT0FBTyxFQUEyQiwwQkFBMEIsRUFBRSx5QkFBeUIsRUFBRSxvQkFBb0IsRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQ3ZJLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQztBQUNqRCxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sa0JBQWtCLENBQUM7QUFDL0MsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0sd0JBQXdCLENBQUM7QUFDMUQsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBQ3JELE9BQU8sRUFBRSxtQkFBbUIsRUFBRSxNQUFNLDBCQUEwQixDQUFDO0FBQy9ELE9BQU8sRUFBRSx5QkFBeUIsRUFBRSxNQUFNLDhEQUE4RCxDQUFDO0FBQ3pHLE9BQU8sRUFBRSx1QkFBdUIsRUFBRSxNQUFNLHdEQUF3RCxDQUFDO0FBQ2pHLE9BQU8sRUFBRSwwQkFBMEIsRUFBRSxNQUFNLGdFQUFnRSxDQUFDO0FBQzVHLE9BQU8sRUFBRSw0QkFBNEIsRUFBRSxNQUFNLDJEQUEyRCxDQUFDO0FBQ3pHLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQztBQUNqRCxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSwrQ0FBK0MsQ0FBQztBQUduRjtJQUFBO0lBNENBLENBQUM7Ozs7OztJQWJRLHlCQUFPOzs7OztJQUFkLFVBQWUsTUFBZ0MsRUFBRSxTQUFlO1FBQzlELE9BQU87WUFDTCxRQUFRLEVBQUUsaUJBQWlCO1lBQzNCLFNBQVMsRUFBRTtnQkFDVCxFQUFFLE9BQU8sRUFBRSwwQkFBMEIsRUFBRSxRQUFRLEVBQUUsTUFBTSxFQUFFO2dCQUN6RCxvQkFBb0I7Z0JBQ3BCO29CQUNFLE9BQU8sRUFBRSxtQkFBbUI7b0JBQzVCLFFBQVEsRUFBRSxTQUFTLElBQUkseUJBQXlCO2lCQUNqRDthQUNGO1NBQ0YsQ0FBQztJQUNKLENBQUM7O2dCQTNDRixRQUFRLFNBQUM7b0JBQ1IsWUFBWSxFQUFFLENBQUMsa0JBQWtCLEVBQUUsb0JBQW9CLEVBQUUsb0JBQW9CO3dCQUMzRSx1QkFBdUIsRUFBRSxxQkFBcUIsRUFBRSxxQ0FBcUMsRUFBRSxvQkFBb0I7d0JBQzNHLHdCQUF3QixFQUFFLG9DQUFvQyxFQUFFLGFBQWEsRUFBRSx5QkFBeUIsRUFBRSx1QkFBdUI7d0JBQ2pJLGFBQWEsRUFBQywwQkFBMEIsRUFBRSw0QkFBNEI7d0JBQ3RFLGtCQUFrQjtxQkFDbkI7b0JBQ0QsT0FBTyxFQUFFLENBQUMsa0JBQWtCLEVBQUUsb0JBQW9CLEVBQUUsb0JBQW9CLEVBQUUsdUJBQXVCO3dCQUMvRixxQkFBcUIsRUFBRSxxQ0FBcUMsRUFBRSxvQkFBb0IsRUFBRSxvQ0FBb0MsRUFBRSxhQUFhO3dCQUN2SSx5QkFBeUIsRUFBRSx1QkFBdUIsRUFBRSxhQUFhLEVBQUUsNEJBQTRCLENBQUM7b0JBQ2xHLE9BQU8sRUFBRTt3QkFDUCxZQUFZO3dCQUNaLFlBQVk7d0JBQ1osY0FBYzt3QkFDZCxtQkFBbUI7d0JBQ25CLGdCQUFnQixDQUFDLE9BQU8sRUFBRTt3QkFDMUIsV0FBVyxDQUFDLE9BQU8sRUFBRTt3QkFDckIsWUFBWSxDQUFDLE9BQU8sRUFBRTtxQkFDdkI7b0JBQ0QsU0FBUyxFQUFFO3dCQUNULG9CQUFvQjt3QkFDcEI7NEJBQ0UsT0FBTyxFQUFFLG1CQUFtQjs0QkFDNUIsUUFBUSxFQUFFLHlCQUF5Qjt5QkFDcEM7cUJBQ0Y7b0JBQ0QsZUFBZSxFQUFDO3dCQUNkLDBCQUEwQjtxQkFDM0I7aUJBQ0Y7O0lBZUQsd0JBQUM7Q0FBQSxBQTVDRCxJQTRDQztTQWRZLGlCQUFpQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5nTW9kdWxlLCBNb2R1bGVXaXRoUHJvdmlkZXJzIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IENvbW1vbk1vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbic7XHJcbmltcG9ydCB7IEZGaWxlRHJvcERpcmVjdGl2ZSwgRkZpbGVTZWxlY3REaXJlY3RpdmUsIEZGaWxlUHJldmlld0xpc3RUeXBlVGVtcGxhdGVEaXJlY3RpdmUsIEZGaWxlVXBsb2FkRGlyZWN0aXZlLCBGRmlsZVByZXZpZXdUb29sYmFyVGVtcGxhdGVEaXJlY3RpdmUgfSBmcm9tICcuL2RpcmVjdGl2ZS9pbmRleCc7XHJcbmltcG9ydCB7IEZGaWxlVXBsb2FkQ29tcG9uZW50LCBGRmlsZVZpZXdJbWFnZUNvbXBvbmVudCwgRkZpbGVQcmV2aWV3Q29tcG9uZW50LCBQcmV2aWV3Q2hlY2tib3hDb21wb25lbnQgfSBmcm9tICcuL2NvbXBvbmVudHMvaW5kZXgnO1xyXG5pbXBvcnQgeyBVcGxvYWRTZXJ2ZXJTZXJ2aWNlIH0gZnJvbSAnLi9tb2RlbC9pbmRleCc7XHJcbmltcG9ydCB7IEZGaWxlU2l6ZVBpcGUsIEZGaWxlRGF0ZVBpcGUgfSBmcm9tICcuL3BpcGUvaW5kZXgnO1xyXG5pbXBvcnQgeyBGRmlsZVVwbG9hZFNlcnZlckNvbmZpZywgRkZpbGVVcGxvYWRBUElTZXJ2aWNlVG9rZW4sIEZGaWxlVXBsb2FkRGVmYXVsdFNlcnZpY2UsIEZGaWxlVXBsb2FkZXJTZXJ2aWNlIH0gZnJvbSAnLi9zZXJ2aWNlL2luZGV4JztcclxuaW1wb3J0IHsgTm90aWZ5TW9kdWxlIH0gZnJvbSAnQGZhcnJpcy91aS1ub3RpZnknO1xyXG5pbXBvcnQgeyBNb2RhbE1vZHVsZSB9IGZyb20gJ0BmYXJyaXMvdWktbW9kYWwnO1xyXG5pbXBvcnQgeyBEYXRlSGVscGVyTW9kdWxlIH0gZnJvbSAnQGZhcnJpcy91aS1jb21tb24vZGF0ZSc7XHJcbmltcG9ydCB7IE1lc3NhZ2VyTW9kdWxlIH0gZnJvbSAnQGZhcnJpcy91aS1tZXNzYWdlcic7XHJcbmltcG9ydCB7IEZBcmVhUmVzcG9uc2VNb2R1bGUgfSBmcm9tICdAZmFycmlzL3VpLWFyZWEtcmVzcG9uc2UnO1xyXG5pbXBvcnQgeyBVcGxvYWRBbmRQcmV2aWV3Q29tcG9uZW50IH0gZnJvbSAnLi9jb21wb25lbnRzL3VwbG9hZC1hbmQtcHJldmlldy91cGxvYWQtYW5kLXByZXZpZXcuY29tcG9uZW50JztcclxuaW1wb3J0IHsgVXBsb2FkUHJvZ3Jlc3NDb21wb25lbnQgfSBmcm9tICcuL2NvbXBvbmVudHMvdXBsb2FkLXByb2dyZXNzL3VwbG9hZC1wcm9ncmVzcy5jb21wb25lbnQnO1xyXG5pbXBvcnQgeyBNdWx0aURvd25sb2FkSW5mb0NvbXBvbmVudCB9IGZyb20gJy4vY29tcG9uZW50cy9tdWx0aS1kb3dubG9hZC1pbmZvL211bHRpLWRvd25sb2FkLWluZm8uY29tcG9uZW50JztcclxuaW1wb3J0IHsgVXBsb2FkRmlsZU9yZGVyRHJhZ0RpcmVjdGl2ZSB9IGZyb20gJy4vY29tcG9uZW50cy91cGxvYWQtYW5kLXByZXZpZXcvZmlsZS1vcmRlci1kcmFnLmRpcmVjdGl2ZSc7XHJcbmltcG9ydCB7IExvY2FsZU1vZHVsZSB9IGZyb20gJ0BmYXJyaXMvdWktbG9jYWxlJztcclxuaW1wb3J0IHsgVXBsb2FkUmVwbGFjZVhQaXBlIH0gZnJvbSAnLi9jb21wb25lbnRzL3VwbG9hZC1hbmQtcHJldmlldy9yZXBsYWNlWC5waXBlJztcclxuXHJcblxyXG5ATmdNb2R1bGUoe1xyXG4gIGRlY2xhcmF0aW9uczogW0ZGaWxlRHJvcERpcmVjdGl2ZSwgRkZpbGVTZWxlY3REaXJlY3RpdmUsIEZGaWxlVXBsb2FkQ29tcG9uZW50LCBcclxuICAgIEZGaWxlVmlld0ltYWdlQ29tcG9uZW50LCBGRmlsZVByZXZpZXdDb21wb25lbnQsIEZGaWxlUHJldmlld0xpc3RUeXBlVGVtcGxhdGVEaXJlY3RpdmUsIEZGaWxlVXBsb2FkRGlyZWN0aXZlLCBcclxuICAgIFByZXZpZXdDaGVja2JveENvbXBvbmVudCwgRkZpbGVQcmV2aWV3VG9vbGJhclRlbXBsYXRlRGlyZWN0aXZlLCBGRmlsZVNpemVQaXBlLCBVcGxvYWRBbmRQcmV2aWV3Q29tcG9uZW50LCBVcGxvYWRQcm9ncmVzc0NvbXBvbmVudCwgXHJcbiAgICBGRmlsZURhdGVQaXBlLE11bHRpRG93bmxvYWRJbmZvQ29tcG9uZW50LCBVcGxvYWRGaWxlT3JkZXJEcmFnRGlyZWN0aXZlLFxyXG4gICAgVXBsb2FkUmVwbGFjZVhQaXBlXHJcbiAgXSxcclxuICBleHBvcnRzOiBbRkZpbGVEcm9wRGlyZWN0aXZlLCBGRmlsZVNlbGVjdERpcmVjdGl2ZSwgRkZpbGVVcGxvYWRDb21wb25lbnQsIEZGaWxlVmlld0ltYWdlQ29tcG9uZW50LCBcclxuICAgIEZGaWxlUHJldmlld0NvbXBvbmVudCwgRkZpbGVQcmV2aWV3TGlzdFR5cGVUZW1wbGF0ZURpcmVjdGl2ZSwgRkZpbGVVcGxvYWREaXJlY3RpdmUsIEZGaWxlUHJldmlld1Rvb2xiYXJUZW1wbGF0ZURpcmVjdGl2ZSwgRkZpbGVTaXplUGlwZSxcclxuICAgIFVwbG9hZEFuZFByZXZpZXdDb21wb25lbnQsIFVwbG9hZFByb2dyZXNzQ29tcG9uZW50LCBGRmlsZURhdGVQaXBlLCBVcGxvYWRGaWxlT3JkZXJEcmFnRGlyZWN0aXZlXSxcclxuICBpbXBvcnRzOiBbXHJcbiAgICBDb21tb25Nb2R1bGUsXHJcbiAgICBOb3RpZnlNb2R1bGUsIFxyXG4gICAgTWVzc2FnZXJNb2R1bGUsXHJcbiAgICBGQXJlYVJlc3BvbnNlTW9kdWxlLCBcclxuICAgIERhdGVIZWxwZXJNb2R1bGUuZm9yUm9vdCgpLCBcclxuICAgIE1vZGFsTW9kdWxlLmZvclJvb3QoKSxcclxuICAgIExvY2FsZU1vZHVsZS5mb3JSb290KClcclxuICBdLFxyXG4gIHByb3ZpZGVyczogW1xyXG4gICAgRkZpbGVVcGxvYWRlclNlcnZpY2UsXHJcbiAgICB7XHJcbiAgICAgIHByb3ZpZGU6IFVwbG9hZFNlcnZlclNlcnZpY2UsXHJcbiAgICAgIHVzZUNsYXNzOiBGRmlsZVVwbG9hZERlZmF1bHRTZXJ2aWNlXHJcbiAgICB9XHJcbiAgXSxcclxuICBlbnRyeUNvbXBvbmVudHM6W1xyXG4gICAgTXVsdGlEb3dubG9hZEluZm9Db21wb25lbnRcclxuICBdXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBGRmlsZVVwbG9hZE1vZHVsZSB7XHJcbiAgc3RhdGljIGZvclJvb3QoY29uZmlnPzogRkZpbGVVcGxvYWRTZXJ2ZXJDb25maWcsIHVwbG9hZFNlcj86IGFueSk6IE1vZHVsZVdpdGhQcm92aWRlcnMge1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgbmdNb2R1bGU6IEZGaWxlVXBsb2FkTW9kdWxlLFxyXG4gICAgICBwcm92aWRlcnM6IFtcclxuICAgICAgICB7IHByb3ZpZGU6IEZGaWxlVXBsb2FkQVBJU2VydmljZVRva2VuLCB1c2VWYWx1ZTogY29uZmlnIH0sXHJcbiAgICAgICAgRkZpbGVVcGxvYWRlclNlcnZpY2UsXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgcHJvdmlkZTogVXBsb2FkU2VydmVyU2VydmljZSxcclxuICAgICAgICAgIHVzZUNsYXNzOiB1cGxvYWRTZXIgfHwgRkZpbGVVcGxvYWREZWZhdWx0U2VydmljZVxyXG4gICAgICAgIH1cclxuICAgICAgXVxyXG4gICAgfTtcclxuICB9XHJcbn1cclxuIl19