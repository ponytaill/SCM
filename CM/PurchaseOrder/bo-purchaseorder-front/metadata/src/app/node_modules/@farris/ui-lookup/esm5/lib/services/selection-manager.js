/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var SelectionManager = /** @class */ (function () {
    function SelectionManager(ins) {
        this.ins = ins;
    }
    /**
     * @return {?}
     */
    SelectionManager.prototype.destroy = /**
     * @return {?}
     */
    function () {
    };
    /**
     * @return {?}
     */
    SelectionManager.prototype.getBindingData = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var jsonData = this.ins.bindingData;
        if (this.ins.ngControl &&
            this.ins.ngControl.formDirective &&
            this.ins.ngControl.formDirective.form &&
            this.ins.ngControl.formDirective.form.bindingData) {
            /** @type {?} */
            var bindingData = this.ins.ngControl.formDirective.form.bindingData;
            jsonData = bindingData;
            if (bindingData.getObject) {
                jsonData = bindingData.getObject().toJSON();
            }
        }
        return jsonData;
    };
    /**
     * @return {?}
     */
    SelectionManager.prototype.initDisplayValue = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var jsonData = this.getBindingData();
        if (jsonData && this.ins.mapFields) {
            /** @type {?} */
            var idField = this.ins.idField;
            /** @type {?} */
            var targetField = this.ins.mapFields[idField];
            if (targetField) {
                if (targetField.indexOf(',') > -1) {
                    targetField = targetField.split(',')[0];
                }
                /** @type {?} */
                var val = this.ins.utils.getValue(targetField, jsonData);
                if (val) {
                    this.ins.displayValue = val;
                }
            }
        }
    };
    /**
     * @private
     * @return {?}
     */
    SelectionManager.prototype._clearSelections = /**
     * @private
     * @return {?}
     */
    function () {
        var t = this.getDataCmpInstance().cmpRefInstance;
        if (t) {
            if (this.ins.isTree()) {
                // 树表
                t.clearAll(false);
                if (!t.cdRef.destroyed) {
                    t.cdRef.detectChanges();
                }
            }
            else {
                // 列表
                t.dtBody.selectedRowIndex = -1;
                t.dtBody.selections = undefined;
                if (!t.cd.destroyed) {
                    t.cd.detectChanges();
                }
            }
        }
    };
    /**
     * 帮助窗口打开后，根据 displayValue 选中数据
     */
    /**
     * 帮助窗口打开后，根据 displayValue 选中数据
     * @param {?=} selectedIds
     * @return {?}
     */
    SelectionManager.prototype.selectCurrentValue = /**
     * 帮助窗口打开后，根据 displayValue 选中数据
     * @param {?=} selectedIds
     * @return {?}
     */
    function (selectedIds) {
        var _this = this;
        if (selectedIds === void 0) { selectedIds = []; }
        if (!this.ins.enableToSelect) {
            return;
        }
        var _a = this.getDataCmpInstance(), t = _a.cmpRefInstance, items = _a.items;
        if (!t || !items || !items.length) {
            return;
        }
        this._clearSelections();
        if (!selectedIds || !selectedIds.length) {
            /** @type {?} */
            var selectedRows = this.ins.lookupSelectionSer.getSelections();
            if (selectedRows.length) {
                selectedIds = selectedRows.map((/**
                 * @param {?} n
                 * @return {?}
                 */
                function (n) { return n[_this.ins.idField]; }));
            }
        }
        // const _ids = this.getSelectedIds();
        // selectedIds = selectedIds.concat(_ids);
        // selectedIds = Array.from(new Set(selectedIds));
        if (selectedIds && selectedIds.length) {
            if (this.ins.isTree()) {
                // 树表
                this.selected4Treetable(t, selectedIds);
                if (!t.cdRef.destroyed) {
                    t.cdRef.detectChanges();
                }
            }
            else {
                // 列表
                this.selected4Datatable(t, items, selectedIds);
                if (!t.cd.destroyed) {
                    t.cd.detectChanges();
                }
            }
        }
    };
    /**
     * @private
     * @return {?}
     */
    SelectionManager.prototype.getDataCmpInstance = /**
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var ref = null;
        /** @type {?} */
        var items = null;
        if (this.ins.activeTab === 'datalist') {
            if (this.ins.isTree()) {
                ref = this.ins.lookupCmpMgr.getComponentInstance('treetable');
                items = ((/** @type {?} */ (ref))).serializedValue;
            }
            else {
                items = this.ins.items;
                ref = this.ins.lookupCmpMgr.getComponentInstance();
            }
        }
        else if (this.ins.activeTab === 'favorite') {
            ref = this.ins.lookupCmpMgr.getComponentInstance('fav');
            items = this.ins.favoriteItems;
        }
        return { cmpRefInstance: ref, items: items };
    };
    /**
     * @private
     * @param {?} t
     * @param {?} items
     * @param {?} values
     * @return {?}
     */
    SelectionManager.prototype.selected4Datatable = /**
     * @private
     * @param {?} t
     * @param {?} items
     * @param {?} values
     * @return {?}
     */
    function (t, items, values) {
        var _this = this;
        if (this.ins.singleSelect) {
            items.forEach((/**
             * @param {?} item
             * @param {?} index
             * @return {?}
             */
            function (item, index) {
                if (item[_this.ins.idField] === values[0]) {
                    if (!t.dtBody.isSelected(item)) {
                        t.dtBody.selectedRowIndex = -1;
                        t.dtBody.selectedRow('', index, item);
                    }
                }
            }));
        }
        else {
            // const values = this.getSelectedIds();
            values.forEach((/**
             * @param {?} id
             * @return {?}
             */
            function (id) {
                /** @type {?} */
                var r = items.find((/**
                 * @param {?} n
                 * @return {?}
                 */
                function (n) { return n[_this.ins.idField] == id; }));
                if (r) {
                    t.checkRow(id);
                }
            }));
        }
    };
    /**
     * @private
     * @param {?} t
     * @param {?} valueArr
     * @return {?}
     */
    SelectionManager.prototype.selected4Treetable = /**
     * @private
     * @param {?} t
     * @param {?} valueArr
     * @return {?}
     */
    function (t, valueArr) {
        if (this.ins.singleSelect) {
            t.selectNode(valueArr[0], false, false);
        }
        else {
            // const valueArr = this.getSelectedIds();
            t.checkedNodes(valueArr, false, false, true);
            t.selectNodes(valueArr);
        }
    };
    /**
     * @return {?}
     */
    SelectionManager.prototype.getSelectedIds = /**
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var values = [];
        /** @type {?} */
        var s = this.ins.multipleChoiceSeparator;
        if (!this.ins.singleSelect && this.ins.displayValue && ('' + this.ins.displayValue).indexOf(s) > -1) {
            values = this.ins.displayValue.split(s);
        }
        else {
            if (this.ins.displayValue !== null && this.ins.displayValue !== '' && this.ins.displayValue !== undefined) {
                values = [this.ins.displayValue];
            }
        }
        // 启用显示多选列表
        if (this.ins.showSelected) {
            /** @type {?} */
            var rows = this.ins.lookupSelectionSer.getSelections();
            if (rows && rows.length) {
                values = rows.map((/**
                 * @param {?} n
                 * @return {?}
                 */
                function (n) { return n[_this.ins.idField]; }));
            }
            else {
                values = [];
            }
        }
        return values;
    };
    return SelectionManager;
}());
export { SelectionManager };
if (false) {
    /**
     * @type {?}
     * @private
     */
    SelectionManager.prototype.ins;
}
//# sourceMappingURL=data:application/json;base64,