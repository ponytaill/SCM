/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { of, Subject } from "rxjs";
/**
 * 保存方案API
 * @type {?}
 */
const SCHEME_WEBAPI = '/api/runtime/sys/v1.0/querysolution';
/**
 * 获取方案列表API
 * @type {?}
 */
const SCHEME_WEBAPI_QUERY = `${SCHEME_WEBAPI}/belongId/`;
/**
 * 方案列表管理- 设默认、删除 API
 * @type {?}
 */
const SCHEME_WEBAPI_UPDATE = `${SCHEME_WEBAPI}/batch`;
/**
 * 权限验证
 * @type {?}
 */
const SCHEME_WEBAPI_Auth = '/api/runtime/sys/v1.0/querysolution/componentType/Datagrid';
/** @type {?} */
const LANGUAGE_WEBAPI = '/api/runtime/sys/v1.0/loginInfo?infoType=supportedLanguage';
export class DatagridSchemeService {
    constructor() {
        this.restService = null;
        this.state = {};
        this.schemeList$ = new Subject();
    }
    /**
     * @param {?} d
     * @param {?} gridId
     * @return {?}
     */
    update(d, gridId) {
        if (!this.state[gridId]) {
            this.state[gridId] = {};
        }
        this.state[gridId] = Object.assign(this.state[gridId], d);
    }
    /**
     * @param {?} httpSer
     * @return {?}
     */
    setRestService(httpSer) {
        if (httpSer && httpSer['befRepository']) {
            this.restService = httpSer['befRepository']['restService'];
        }
    }
    /**
     * @private
     * @return {?}
     */
    getWebFormKey() {
        /** @type {?} */
        const webformHash = window.location.hash.split('?')[0];
        return webformHash.substring(webformHash.lastIndexOf('/') + 1);
    }
    /**
     * @param {?} gridId
     * @return {?}
     */
    getSchemeKey(gridId) {
        /** @type {?} */
        const formKey = this.getWebFormKey();
        return `${formKey}_DatagridScheme_${gridId}`;
    }
    /**
     * @param {?} gridID
     * @return {?}
     */
    getSchemeList(gridID) {
        /** @type {?} */
        const uri = SCHEME_WEBAPI_QUERY + this.getSchemeKey(gridID);
        if (this.restService) {
            return this.restService.invoke(uri, 'GET', null, null, false);
        }
    }
    /**
     * @param {?} scheme
     * @param {?} gridID
     * @param {?=} isUpdate
     * @return {?}
     */
    saveScheme(scheme, gridID, isUpdate = false) {
        if (this.restService) {
            /** @type {?} */
            const httpMethod = isUpdate ? 'PUT' : 'POST';
            scheme.belongId = this.getSchemeKey(gridID);
            return this.restService.invoke(SCHEME_WEBAPI, httpMethod, null, { body: scheme }, false);
        }
    }
    /**
     * @param {?} param
     * @param {?} gridID
     * @return {?}
     */
    updateScheme(param, gridID) {
        if (!param) {
            return of(false);
        }
        /** @type {?} */
        const belongId = this.getSchemeKey(gridID);
        param.belongId = belongId;
        if (param.belongId) {
            return this.restService.invoke(SCHEME_WEBAPI_UPDATE, 'PUT', null, { body: param }, false);
        }
    }
    /**
     * @param {?} gridId
     * @param {...?} statePro
     * @return {?}
     */
    getStateValue(gridId, ...statePro) {
        /** @type {?} */
        const dgState = this.state[gridId];
        if (dgState) {
            if (statePro && statePro.length) {
                return statePro.reduce((/**
                 * @param {?} r
                 * @param {?} c
                 * @return {?}
                 */
                (r, c) => {
                    return r[c];
                }), dgState);
            }
            return dgState;
        }
        return null;
    }
    /**
     * @private
     * @param {?} gridId
     * @param {?} propertyName
     * @param {?} value
     * @return {?}
     */
    updateStateValue(gridId, propertyName, value) {
        this.update({ [propertyName]: value }, gridId);
    }
    /**
     * @param {?} gridId
     * @param {?} newSchemeList
     * @return {?}
     */
    setSchemeList(gridId, newSchemeList) {
        this.updateStateValue(gridId, 'list', newSchemeList);
        this.schemeList$.next(newSchemeList);
    }
    /**
     * @param {?} gridId
     * @param {?} schemeName
     * @return {?}
     */
    hasSchemeName(gridId, schemeName) {
        /** @type {?} */
        const schemeList = this.getStateValue(gridId, 'list');
        if (!schemeList || !schemeList.length) {
            return false;
        }
        if (typeof schemeName === 'string') {
            return !!schemeList.find((/**
             * @param {?} n
             * @return {?}
             */
            n => n.name === schemeName.trim()));
        }
        else {
            if (typeof schemeName === 'object') {
                /** @type {?} */
                const replayNames = [];
                schemeList.forEach((/**
                 * @param {?} n
                 * @return {?}
                 */
                n => {
                    /** @type {?} */
                    const currentNames = Object.values(n.name);
                    for (let k in schemeName) {
                        if (currentNames.includes(schemeName[k])) {
                            replayNames.push(k);
                        }
                    }
                }));
                return replayNames;
            }
        }
    }
    /**
     * @return {?}
     */
    checkAuthority() {
        return this.restService.invoke(SCHEME_WEBAPI_Auth, 'GET', null, null, false);
    }
    /**
     * @return {?}
     */
    getLanguages() {
        return this.restService.invoke(LANGUAGE_WEBAPI, 'GET', null, null, false);
    }
}
if (false) {
    /**
     * @type {?}
     * @private
     */
    DatagridSchemeService.prototype.restService;
    /**
     * @type {?}
     * @private
     */
    DatagridSchemeService.prototype.state;
    /** @type {?} */
    DatagridSchemeService.prototype.schemeList$;
}
//# sourceMappingURL=data:application/json;base64,