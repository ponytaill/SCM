/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input, EventEmitter, Output } from '@angular/core';
export class PanelfilterCheckboxComponent {
    constructor() {
        this.checkedAll = false;
        this.boolcheck = false;
        this.searchHandle = new EventEmitter();
        this.submitChange = new EventEmitter();
        this.indeterminate = true;
        this.boolCheckState = 'indeterminate';
        this.checkboxDataSource = new Array();
    }
    /**
     * @return {?}
     */
    get item() {
        return this._item;
    }
    /**
     * @param {?} data
     * @return {?}
     */
    set item(data) {
        this._item = data;
        this.getDataSource();
        //this.checkValue = this._item.value.getOriginalValue();
        if (!this._item.hasOwnProperty('value'))
            this._item.value = { value: [] };
        if (this._item.hasOwnProperty('value')) {
            this.checkValue = this._item.value.value;
        }
        else {
            this._item.value.value = [];
        }
        if (this.boolcheck) {
            if (this.checkValue.length) {
                this.boolchecked = this.checkValue[0];
                if (this.boolchecked)
                    this.boolCheckState = 'checked';
                else
                    this.boolCheckState = 'unchecked';
            }
            else
                this.boolCheckState = 'indeterminate';
        }
        if (this._item.value.value.length == 0)
            this.checkedAll = false;
        else if (this._item.control['enumValues'] && this._item.value.value.length == this._item.control['enumValues'].length)
            this.checkedAll = true;
        this.setSubmitChange();
    }
    /**
     * @return {?}
     */
    ngOnInit() {
    }
    /**
     * @return {?}
     */
    getDataSource() {
        if (this.item && this._item.control) {
            /** @type {?} */
            let checkboxList = (this._item.control);
            this.checkboxDataSource = Array();
            if (checkboxList.enumValues && checkboxList.enumValues.length > 0) {
                checkboxList.enumValues.forEach((/**
                 * @param {?} element
                 * @return {?}
                 */
                element => {
                    this.checkboxDataSource.push(Object.assign({}, element));
                }));
            }
        }
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onSearch(event) {
        /** @type {?} */
        let checkboxValue = [];
        if (event) {
            // let checkboxList = event.split(',');
            /** @type {?} */
            let checkboxList = event;
            if (checkboxList && checkboxList.length) {
                checkboxValue = checkboxList;
            }
            this._item.value.value = checkboxValue;
        }
        else {
            this._item.value.value = '';
        }
        if (checkboxValue.length < this._item.control['enumValues'].length)
            this.checkedAll = false;
        else if (checkboxValue.length == this._item.control['enumValues'].length)
            this.checkedAll = true;
        this.getValueText();
        this.setSubmitChange();
        this.searchHandle.emit();
    }
    /**
     * @return {?}
     */
    getValueText() {
        /** @type {?} */
        const enumValue = (this._item.control).enumValues;
        /** @type {?} */
        const value = (this._item.value).value;
        if (enumValue && enumValue.length && value && value.length) {
            /** @type {?} */
            let texts = [];
            for (let i = 0; i <= value.length; i++) {
                /** @type {?} */
                const enums = enumValue.find((/**
                 * @param {?} val
                 * @return {?}
                 */
                val => {
                    return val['value'] == value[i];
                }));
                if (enums) {
                    texts.push(enums['name']);
                }
            }
            this._item.valueText = texts.join(',');
        }
    }
    /**
     * @return {?}
     */
    setSubmitChange() {
        /** @type {?} */
        const val = this._item.value;
        if (Object.keys(val).length < 0 || Object.keys(val.value).length === 0) {
            this.submitChange.emit(false);
        }
        else {
            this.submitChange.emit(true);
        }
    }
    /**
     * @param {?} event
     * @return {?}
     */
    handleClick(event) {
        this.checkedAll = !this.checkedAll;
        if (this.checkedAll) {
            this.setCheckedAll();
        }
        else {
            this._item.value.value = [];
            this._item.valueText = '';
            this.checkValue = [];
        }
        this.getValueText();
        this.setSubmitChange();
        this.searchHandle.emit();
    }
    /**
     * @return {?}
     */
    setCheckedAll() {
        /** @type {?} */
        const enumValue = (this._item.control).enumValues;
        if (enumValue && enumValue.length) {
            /** @type {?} */
            let checkboxValue = [];
            //checkboxTexts = [];
            for (let i = 0; i < enumValue.length; i++) {
                checkboxValue.push(enumValue[i]['value']);
                //checkboxTexts.push(enumValue[i]['name'])
            }
            this._item.value.value = checkboxValue;
            this.checkValue = this._item.value.value;
            //this._item.valueText = checkboxTexts.join(',');
        }
    }
    /**
     * @return {?}
     */
    handleCheckClick() {
        if (this.boolCheckState == 'indeterminate') {
            this.boolCheckState = 'checked';
            this.boolchecked = true;
            this._item.value.value = [true];
        }
        else if (this.boolCheckState == 'checked') {
            this.boolCheckState = 'unchecked';
            this.boolchecked = false;
            this._item.value.value = [false];
        }
        else if (this.boolCheckState == 'unchecked') {
            this.boolCheckState = 'indeterminate';
            this.boolchecked = null;
            this._item.value.value = [];
        }
        this.setSubmitChange();
        this.searchHandle.emit();
    }
}
PanelfilterCheckboxComponent.decorators = [
    { type: Component, args: [{
                selector: 'panel-filter-checkbox',
                template: "<div class=\"custom-control custom-checkbox custom-control-inline filter-panel-checkbox\" *ngIf=\"!boolcheck\">\r\n    <input type=\"checkbox\" class=\"custom-control-input\"  [checked]=\"checkedAll\">\r\n    <label class=\"custom-control-label\" (click)=\"handleClick($event)\">{{'filterPanel.checkall'| locale}}</label>\r\n</div>\r\n<ng-container *ngIf=\"!boolcheck; else elseTemplate\">\r\n    <farris-checkboxgroup [value]=\"checkValue\" [horizontal]=\"false\"\r\n        [data]=\"checkboxDataSource\" [isStringValue]=\"false\" (changeValue)=\"onSearch($event)\">\r\n    </farris-checkboxgroup>\r\n</ng-container>\r\n<ng-template #elseTemplate>\r\n    <div class=\"custom-control custom-checkbox custom-control-inline filter-bool-checkbox\">\r\n        <input type=\"checkbox\" class=\"custom-control-input\" [checked]=\"boolchecked\" [indeterminate]=\"boolCheckState == 'indeterminate'\">\r\n        <label class=\"custom-control-label\" (click)=\"handleCheckClick()\">{{item.fieldName || item.name}}</label>\r\n    </div>\r\n</ng-template>\r\n\r\n"
            }] }
];
/** @nocollapse */
PanelfilterCheckboxComponent.ctorParameters = () => [];
PanelfilterCheckboxComponent.propDecorators = {
    boolcheck: [{ type: Input }],
    item: [{ type: Input }],
    searchHandle: [{ type: Output, args: ['searchHandle',] }],
    submitChange: [{ type: Output, args: ['submitChange',] }]
};
if (false) {
    /** @type {?} */
    PanelfilterCheckboxComponent.prototype.checkedAll;
    /** @type {?} */
    PanelfilterCheckboxComponent.prototype.boolcheck;
    /** @type {?} */
    PanelfilterCheckboxComponent.prototype._item;
    /** @type {?} */
    PanelfilterCheckboxComponent.prototype.searchHandle;
    /** @type {?} */
    PanelfilterCheckboxComponent.prototype.submitChange;
    /** @type {?} */
    PanelfilterCheckboxComponent.prototype.checkValue;
    /** @type {?} */
    PanelfilterCheckboxComponent.prototype.indeterminate;
    /** @type {?} */
    PanelfilterCheckboxComponent.prototype.boolchecked;
    /** @type {?} */
    PanelfilterCheckboxComponent.prototype.boolCheckState;
    /** @type {?} */
    PanelfilterCheckboxComponent.prototype.checkboxDataSource;
}
//# sourceMappingURL=data:application/json;base64,