/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
/*
 * @Author: 疯狂秀才(Lucas Huang)
 * @Date: 2019-08-14 11:44:30
 * @LastEditors: 疯狂秀才(Lucas Huang)
 * @LastEditTime: 2019-10-14 13:15:49
 * @QQ: 1055818239
 * @Version: v0.0.1
 */
import { Component, ElementRef, ViewChild, Renderer2, NgZone, Injector } from '@angular/core';
import { MessagerService } from '@farris/ui-messager';
import { EventManager } from '@angular/platform-browser';
import { BsModalService } from '@farris/ui-modal';
import { TextareaWordcountDirective } from '@farris/ui-forms';
import { DatagridBaseEditorDirective } from '../datagrid-base-editor.directive';
var DatagridTextareaComponent = /** @class */ (function (_super) {
    tslib_1.__extends(DatagridTextareaComponent, _super);
    function DatagridTextareaComponent(render, el, ngzone, injector) {
        var _this = _super.call(this, render, el, injector) || this;
        _this.ngzone = ngzone;
        _this.injector = injector;
        _this.altEnterHandler = null;
        _this.modalService = _this.injector.get(BsModalService);
        _this.messagerService = _this.injector.get(MessagerService);
        _this.eventManager = _this.injector.get(EventManager);
        return _this;
    }
    /**
     * @return {?}
     */
    DatagridTextareaComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        _super.prototype.ngOnInit.call(this);
        if (!this.dg.nowrap) {
            this.render.setStyle(this.instance.nativeElement, 'height', this.height + "px");
        }
        this.inputElement = this.instance.nativeElement;
        this.ngzone.runOutsideAngular((/**
         * @return {?}
         */
        function () {
            _this.inputClickHandler = _this.render.listen(_this.instance.nativeElement, 'click', (/**
             * @param {?} e
             * @return {?}
             */
            function (e) {
                e.stopPropagation();
                return false;
            }));
        }));
        this.bindEventHandler();
    };
    /**
     * @return {?}
     */
    DatagridTextareaComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        if (this.instance) {
            this.inputClickHandler();
            if (this.altEnterHandler) {
                this.altEnterHandler();
            }
        }
    };
    /**
     * @private
     * @return {?}
     */
    DatagridTextareaComponent.prototype.bindEventHandler = /**
     * @private
     * @return {?}
     */
    function () {
        this.altEnterHandler = this.eventManager.addEventListener(this.inputElement, 'keydown.alt.enter', (/**
         * @param {?} event
         * @return {?}
         */
        function (event) {
            /** @type {?} */
            var target = ((/** @type {?} */ (event.target)));
            /** @type {?} */
            var val = target.value + '\n';
            target.value = val;
            event.preventDefault();
            event.stopPropagation();
            return false;
        }));
    };
    /**
     * @return {?}
     */
    DatagridTextareaComponent.prototype.showDialog = /**
     * @return {?}
     */
    function () {
        var _this = this;
        var _a = this.options, dialogWidth = _a.dialogWidth, dialogHeight = _a.dialogHeight;
        /** @type {?} */
        var opts = {
            width: dialogWidth || 500,
            height: dialogHeight || 400,
            showFontSize: true,
            enableWordCount: this.options.enableWordCount,
            countType: this.options.countType,
            maxLength: this.options.maxLength
        };
        this.messagerService.prompt2(this.column.title, this.formControl.value, opts).subscribe((/**
         * @param {?} v
         * @return {?}
         */
        function (v) {
            if (v) {
                _this.formControl.setValue(v);
            }
            _this.inputElement.focus();
            if (!_this.options.onlyShowInDialog && _this.wordcountref) {
                _this.wordcountref.updateWordsCount();
            }
        }));
    };
    DatagridTextareaComponent.decorators = [
        { type: Component, args: [{
                    selector: 'grid-editor-textarea',
                    template: "\n    <div [formGroup]=\"group\" class=\"f-datagrid-cell-formgroup farris-group-auto\" style=\"position:relative\">\n        <datagrid-tooltip [control]=\"formControl\" [tooltipPosition]=\"'top-left'\" [message]=\"errorMessage\">\n            <textarea #input class=\"form-control\"\n                style=\"height:100%;resize:none;min-height:auto;\"\n                [formControlName]=\"column.field\"\n                [word-count]=\"options?.enableWordCount\"\n                [countType]=\"options?.countType\"\n                #wordcount=\"WordCountRef\"\n                [onlyShowInDialog]=\"options?.onlyShowInDialog\"\n                maxlength=\"{{options?.maxLength}}\"></textarea>\n        </datagrid-tooltip>\n        <span class=\"f-icon modal_maximize\" title=\"\u5F39\u51FA\u7A97\u53E3\u8FDB\u884C\u7F16\u8F91\" *ngIf=\"options?.editType && options?.editType !== 'default'\"\n             style=\"position: absolute;top: 2px;right: 2px; cursor:pointer\" (click)=\"showDialog()\"></span>\n    </div>\n    "
                }] }
    ];
    /** @nocollapse */
    DatagridTextareaComponent.ctorParameters = function () { return [
        { type: Renderer2 },
        { type: ElementRef },
        { type: NgZone },
        { type: Injector }
    ]; };
    DatagridTextareaComponent.propDecorators = {
        instance: [{ type: ViewChild, args: ['input',] }],
        wordcountref: [{ type: ViewChild, args: ['wordcount',] }]
    };
    return DatagridTextareaComponent;
}(DatagridBaseEditorDirective));
export { DatagridTextareaComponent };
if (false) {
    /** @type {?} */
    DatagridTextareaComponent.prototype.instance;
    /** @type {?} */
    DatagridTextareaComponent.prototype.wordcountref;
    /**
     * @type {?}
     * @private
     */
    DatagridTextareaComponent.prototype.inputClickHandler;
    /**
     * @type {?}
     * @private
     */
    DatagridTextareaComponent.prototype.modalService;
    /**
     * @type {?}
     * @private
     */
    DatagridTextareaComponent.prototype.messagerService;
    /**
     * @type {?}
     * @private
     */
    DatagridTextareaComponent.prototype.eventManager;
    /**
     * @type {?}
     * @private
     */
    DatagridTextareaComponent.prototype.altEnterHandler;
    /**
     * @type {?}
     * @private
     */
    DatagridTextareaComponent.prototype.ngzone;
    /** @type {?} */
    DatagridTextareaComponent.prototype.injector;
}
//# sourceMappingURL=data:application/json;base64,