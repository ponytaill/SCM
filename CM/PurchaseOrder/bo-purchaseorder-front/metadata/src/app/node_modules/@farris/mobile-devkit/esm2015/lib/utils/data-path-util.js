import { BindingPropertyType, PropertyUtil } from '../binding-data/index';
/**
 * 路径处理工具类（处理/PathNode1/PathNode2/...格式的路径）
 */
class DataPathUtil {
    /**
     * 转换成BindingData可识别的路径
     */
    static convertToBindingPathArray(path) {
        const bindingPathArray = path.split('/').filter((part) => {
            return part !== '';
        });
        return bindingPathArray;
    }
    /**
     * 转换为Entity可识别的路径
     * 根：[]
     * 主表：['id:xxx', 'name'],
     * 关联：['id:xxx', 'deptInfo', 'id:xxx', 'name']
     * UDT: ['id:xxx', 'updateInfo', ':', 'createdOn']
     * 从表：['id:xxx', 'edus', 'id:xxx', 'name'],
     * 从从表：['id:xxx', 'edus', 'id:xxx', 'grades', 'id:xxx', 'name']
     */
    static convertToEntityPathArray(path, bindingData) {
        const bindingPathArray = this.convertToBindingPathArray(path);
        const entityPathArray = [];
        if (bindingPathArray.length === 0) {
            return entityPathArray;
        }
        // 根节点
        let currentBindingObject = bindingData.list.currentItem;
        entityPathArray.push(this.createPrimaryKeyPath(currentBindingObject.primaryKey, currentBindingObject.primaryKeyValue));
        bindingPathArray.forEach((propName) => {
            const propInfo = PropertyUtil.getPropertyByName(currentBindingObject.properties, propName);
            switch (propInfo.type) {
                case BindingPropertyType.Plain:
                    entityPathArray.push(propName);
                    break;
                case BindingPropertyType.Object:
                    currentBindingObject = currentBindingObject[propName];
                    entityPathArray.push(propName);
                    entityPathArray.push(this.createPrimaryKeyPath(currentBindingObject.primaryKey, currentBindingObject.primaryKeyValue));
                    break;
                case BindingPropertyType.List:
                    const currentBindingList = currentBindingObject[propName];
                    currentBindingObject = currentBindingList.currentItem;
                    entityPathArray.push(propName);
                    entityPathArray.push(this.createPrimaryKeyPath(currentBindingObject.primaryKey, currentBindingObject.primaryKeyValue));
                    break;
                default:
                    break;
            }
        });
        return entityPathArray;
    }
    /**
     * 转换为RestUrl里的路径
     *
     * 返回结果：
     * 主表（/）：/
     * 从表（/jiwtEdus）：/xxx/jiwtEdus
     * 从从表（/jiwtEdus/jiwtGrades）： /xxx/jiwtEdus/xxx/jiwtGrades
     */
    static convertToRestUrl(path, bindingData) {
        const bindingPathArray = this.convertToBindingPathArray(path);
        const restPathArray = [];
        let currentBindingObject = bindingData.list.currentItem;
        restPathArray.push(currentBindingObject.primaryKeyValue);
        bindingPathArray.forEach((propName) => {
            const propInfo = PropertyUtil.getPropertyByName(currentBindingObject.properties, propName);
            if (propInfo.type !== BindingPropertyType.List) {
                throw new Error(`${propInfo.name}不是子表对应的属性`);
            }
            const currentBindingList = currentBindingObject[propName];
            currentBindingObject = currentBindingList.currentItem;
            restPathArray.push(propName);
            restPathArray.push(currentBindingObject.primaryKeyValue);
        });
        // 移除最后一个主键
        restPathArray.pop();
        return '/' + restPathArray.join('/');
    }
    /**
     * 获取叶子节点的Path
     */
    static getLeafPath(path) {
        const pathArray = DataPathUtil.convertToBindingPathArray(path);
        return pathArray.pop();
    }
    /**
     * 获取父路径
     */
    static getParentPath(path) {
        const pathArray = DataPathUtil.convertToBindingPathArray(path);
        pathArray.pop();
        return '/' + pathArray.join('/');
    }
    /**
     * 创建路径中的主键部分
     */
    static createPrimaryKeyPath(primaryKey, primaryKeyValue) {
        return `${primaryKey}:${primaryKeyValue}`;
    }
}
export { DataPathUtil };
//# sourceMappingURL=data:application/json;base64,