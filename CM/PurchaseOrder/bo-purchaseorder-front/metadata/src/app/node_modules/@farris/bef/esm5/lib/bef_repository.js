/**
 * @fileoverview added by tsickle
 * Generated from: lib/bef_repository.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
/*
 * @Author: Witt
 * @Date: 2018-10-11 17:34:26
 * @Last Modified by: aalizzwell
 * @Last Modified time: 2019-09-11 17:23:15
 * @todo
 * 1、修改command-services中的DataService，调用新的API
 * 2、移除DeprecatedBefRepository，启用新API
 * 3、修改Repository抽象类，添加新API
 * 4、对path做处理，修改为数组
 */
import { Injectable, Injector } from '@angular/core';
import { MetadataUtil, AppContext } from '@farris/devkit';
import { NG_VARIABLE } from './decorators';
import { DeprecatedBefRepository } from './deprecated/deprecated_bef_repository';
import { BefEntityManager } from './bef_entity_manager';
import { BefVariableManager } from './bef_variable_manager';
import { BefDataService } from './bef_data_service';
import { BefProxyExtend } from './bef_proxy_extend';
import { BE_SERVER_URI_TOKEN } from './tokens';
/**
 * BEF实体仓储
 * \@description
 * 负责与后端的业务实体框架交互，管理业务实体数据 \
 * apiUri示例如下：api/scm/sd/v1.0/empservice，前后均不带斜杠
 * @abstract
 * @template T
 */
var BefRepository = /** @class */ (function (_super) {
    tslib_1.__extends(BefRepository, _super);
    /**
     * @param injector 依赖注入器
     */
    function BefRepository(injector) {
        var _this = _super.call(this) || this;
        _this.injector = injector;
        if (_this.entityCollection) {
            // 初始化实体管理器
            _this.entityManager = new BefEntityManager(_this.entityCollection);
        }
        // 初始化变量管理器
        _this.appContext = _this.injector.get(AppContext);
        /** @type {?} */
        var ngVariables = MetadataUtil.getPropsMetadatasByName(_this.constructor, NG_VARIABLE);
        _this.variableManager = new BefVariableManager(_this.appContext, ngVariables, _this.injector);
        // 初始化DataService
        _this.dataService = new BefDataService(_this.injector, _this);
        _this.serverUri = injector.get(BE_SERVER_URI_TOKEN);
        return _this;
    }
    Object.defineProperty(BefRepository.prototype, "proxy", {
        get: /**
         * @return {?}
         */
        function () {
            return this.befProxy;
        },
        /**
         * @member {BefProxy} proxy
         * @description 每一个BefRepository都需要一个Bef代理，用来处理http请求
         */
        set: /**
         * \@member {BefProxy} proxy
         * \@description 每一个BefRepository都需要一个Bef代理，用来处理http请求
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this.befProxy = value;
            this.befProxy.setProxyExtend(new BefProxyExtend(this));
        },
        enumerable: true,
        configurable: true
    });
    /**
     * 获取实体列表
     * @param filter 过滤条件
     * @param sort 排序条件
     * @param pageSize 分页大小
     * @param pageIndex 页码
     * @description
     * 过滤条件的示例如下：（一般由筛选条件等组件生成，直接获取并传值即可）
     * ```json
     * [
     *   {
     *     "FilterField": "DomainID.DomainID_name",
     *     "Compare": 0,
     *     "Value": "人力资源部",
     *     "Relation": 1,
     *     "Expresstype": 0,
     *     "Lbracket": "(",
     *     "Rbracket": ")"
     *   }, {
     *     "FilterField": "BillDate",
     *     "Compare": 3,
     *     "Value": "2021-09-03",
     *     "Relation": 1,
     *     "Expresstype": 0
     *   }, {
     *     "FilterField": "BillDate",
     *     "Compare": 5,
     *     "Value": "2021-10-05",
     *     "Relation": 1,
     *     "Expresstype": 0
     *   }
     * ]
     * ```
     * 使用示例：
     * ```typescript
     * // 一般会以字符串的形式获取到过滤和排序条件，所以需要进行解析
     * const query$ = this.repository.getEntities(JSON.parse(filter), JSON.parse(sort), null, null);
     * ```
     */
    /**
     * 获取实体列表
     * \@description
     * 过滤条件的示例如下：（一般由筛选条件等组件生成，直接获取并传值即可）
     * ```json
     * [
     *   {
     *     "FilterField": "DomainID.DomainID_name",
     *     "Compare": 0,
     *     "Value": "人力资源部",
     *     "Relation": 1,
     *     "Expresstype": 0,
     *     "Lbracket": "(",
     *     "Rbracket": ")"
     *   }, {
     *     "FilterField": "BillDate",
     *     "Compare": 3,
     *     "Value": "2021-09-03",
     *     "Relation": 1,
     *     "Expresstype": 0
     *   }, {
     *     "FilterField": "BillDate",
     *     "Compare": 5,
     *     "Value": "2021-10-05",
     *     "Relation": 1,
     *     "Expresstype": 0
     *   }
     * ]
     * ```
     * 使用示例：
     * ```typescript
     * // 一般会以字符串的形式获取到过滤和排序条件，所以需要进行解析
     * const query$ = this.repository.getEntities(JSON.parse(filter), JSON.parse(sort), null, null);
     * ```
     * @param {?} filter 过滤条件
     * @param {?} sort 排序条件
     * @param {?} pageSize 分页大小
     * @param {?} pageIndex 页码
     * @return {?}
     */
    BefRepository.prototype.getEntities = /**
     * 获取实体列表
     * \@description
     * 过滤条件的示例如下：（一般由筛选条件等组件生成，直接获取并传值即可）
     * ```json
     * [
     *   {
     *     "FilterField": "DomainID.DomainID_name",
     *     "Compare": 0,
     *     "Value": "人力资源部",
     *     "Relation": 1,
     *     "Expresstype": 0,
     *     "Lbracket": "(",
     *     "Rbracket": ")"
     *   }, {
     *     "FilterField": "BillDate",
     *     "Compare": 3,
     *     "Value": "2021-09-03",
     *     "Relation": 1,
     *     "Expresstype": 0
     *   }, {
     *     "FilterField": "BillDate",
     *     "Compare": 5,
     *     "Value": "2021-10-05",
     *     "Relation": 1,
     *     "Expresstype": 0
     *   }
     * ]
     * ```
     * 使用示例：
     * ```typescript
     * // 一般会以字符串的形式获取到过滤和排序条件，所以需要进行解析
     * const query$ = this.repository.getEntities(JSON.parse(filter), JSON.parse(sort), null, null);
     * ```
     * @param {?} filter 过滤条件
     * @param {?} sort 排序条件
     * @param {?} pageSize 分页大小
     * @param {?} pageIndex 页码
     * @return {?}
     */
    function (filter, sort, pageSize, pageIndex) {
        return this.dataService.getList(filter, sort, pageSize, pageIndex);
    };
    /**
     * 获取实体列表
     * @param filter 过滤条件
     * @param sorts 排序条件
     * @param pageSize 分页大小
     * @param pageIndex 页码
     * @description
     * 与getEntities方法功能相近，用法相同 \
     * 区别是在发送请求时，本方法会将查询条件放到请求的body中，而getEntities方法会将查询条件扩展到请求的url上
     * @see {@link getEntities}
     */
    /**
     * 获取实体列表
     * \@description
     * 与getEntities方法功能相近，用法相同 \
     * 区别是在发送请求时，本方法会将查询条件放到请求的body中，而getEntities方法会将查询条件扩展到请求的url上
     * @see {\@link getEntities}
     * @param {?=} filter 过滤条件
     * @param {?=} sorts 排序条件
     * @param {?=} pageSize 分页大小
     * @param {?=} pageIndex 页码
     * @return {?}
     */
    BefRepository.prototype.filter = /**
     * 获取实体列表
     * \@description
     * 与getEntities方法功能相近，用法相同 \
     * 区别是在发送请求时，本方法会将查询条件放到请求的body中，而getEntities方法会将查询条件扩展到请求的url上
     * @see {\@link getEntities}
     * @param {?=} filter 过滤条件
     * @param {?=} sorts 排序条件
     * @param {?=} pageSize 分页大小
     * @param {?=} pageIndex 页码
     * @return {?}
     */
    function (filter, sorts, pageSize, pageIndex) {
        if (filter === void 0) { filter = []; }
        if (sorts === void 0) { sorts = []; }
        return this.dataService.filter(filter, sorts, pageSize, pageIndex);
    };
    // #endregion
    /**
     * 分页查询从表/从从表数据
     * @param paths 通用路径
     * @param pageIndex 页码
     * @param pageSize 分页大小
     * @param filter 过滤条件
     * @param sort 排序
     * @todo 目前并未应用排序和过滤条件
     * @description
     * 通用路径格式为：['id:主表主键值', '主表实体属性名', 'id:从表主键值', '从表实体属性名'] \
     * 通用路径的主键值前必须含有冒号，冒号之前的"id"则可以省略（因为通用路径除了指向从表，还可以指向从表关联等等，所以必须通过冒号来区别主键值和属性名） \
     * 通用路径示例：['id:Ted', 'accounts', 'id:10816', 'logs'] 指向accounts从表下的logs从从表 \
     * paths参数遵从通用路径的格式，并且指向一个从表（或者从从表） \
     * 使用示例：
     * ```typescript
     * // 将绑定路径下当前行的路径转换为Entity可识别的通用路径
     * const fullPaths = EntityPathConverter.toEntityPathArray(this.viewModel.bindingPath, this.bindingData);
     * const paths = fullPaths.slice(0, fullPaths.length - 1);
     * const bindingPaths = this.viewModel.bindingPath.split('/').filter(item => item);
     * const bindingData = this.viewModel.bindingData;
     * let nodeCode = bindingPaths[bindingPaths.length - 1];
     * nodeCode = nodeCode.substr(0, nodeCode.length - 1);
     * // 获取上级实体
     * const parentPaths = bindingPaths.slice(0, bindingPaths.length - 1);
     * const parentObject = bindingData.getValue(parentPaths) as BindingObject;
     * if (!parentObject) {
     *   throw new Error('上级实体不存在');
     * }
     * const configPath = `/${nodeCode}_${parentObject[parentObject.primaryKey]}`;
     * // 获取绑定路径对应的分页信息
     * const { pageIndex = 1, pageSize } = this.repository.entityCollection.getPaginationConfigByPath(configPath);
     * const request$ = this.repository.queryChild(paths, pageIndex, pageSize);
     * ```
     */
    // #endregion
    /**
     * 分页查询从表/从从表数据
     * \@todo 目前并未应用排序和过滤条件
     * \@description
     * 通用路径格式为：['id:主表主键值', '主表实体属性名', 'id:从表主键值', '从表实体属性名'] \
     * 通用路径的主键值前必须含有冒号，冒号之前的"id"则可以省略（因为通用路径除了指向从表，还可以指向从表关联等等，所以必须通过冒号来区别主键值和属性名） \
     * 通用路径示例：['id:Ted', 'accounts', 'id:10816', 'logs'] 指向accounts从表下的logs从从表 \
     * paths参数遵从通用路径的格式，并且指向一个从表（或者从从表） \
     * 使用示例：
     * ```typescript
     * // 将绑定路径下当前行的路径转换为Entity可识别的通用路径
     * const fullPaths = EntityPathConverter.toEntityPathArray(this.viewModel.bindingPath, this.bindingData);
     * const paths = fullPaths.slice(0, fullPaths.length - 1);
     * const bindingPaths = this.viewModel.bindingPath.split('/').filter(item => item);
     * const bindingData = this.viewModel.bindingData;
     * let nodeCode = bindingPaths[bindingPaths.length - 1];
     * nodeCode = nodeCode.substr(0, nodeCode.length - 1);
     * // 获取上级实体
     * const parentPaths = bindingPaths.slice(0, bindingPaths.length - 1);
     * const parentObject = bindingData.getValue(parentPaths) as BindingObject;
     * if (!parentObject) {
     *   throw new Error('上级实体不存在');
     * }
     * const configPath = `/${nodeCode}_${parentObject[parentObject.primaryKey]}`;
     * // 获取绑定路径对应的分页信息
     * const { pageIndex = 1, pageSize } = this.repository.entityCollection.getPaginationConfigByPath(configPath);
     * const request$ = this.repository.queryChild(paths, pageIndex, pageSize);
     * ```
     * @param {?} paths 通用路径
     * @param {?} pageIndex 页码
     * @param {?} pageSize 分页大小
     * @param {?=} filter 过滤条件
     * @param {?=} sort 排序
     * @return {?}
     */
    BefRepository.prototype.queryChild = 
    // #endregion
    /**
     * 分页查询从表/从从表数据
     * \@todo 目前并未应用排序和过滤条件
     * \@description
     * 通用路径格式为：['id:主表主键值', '主表实体属性名', 'id:从表主键值', '从表实体属性名'] \
     * 通用路径的主键值前必须含有冒号，冒号之前的"id"则可以省略（因为通用路径除了指向从表，还可以指向从表关联等等，所以必须通过冒号来区别主键值和属性名） \
     * 通用路径示例：['id:Ted', 'accounts', 'id:10816', 'logs'] 指向accounts从表下的logs从从表 \
     * paths参数遵从通用路径的格式，并且指向一个从表（或者从从表） \
     * 使用示例：
     * ```typescript
     * // 将绑定路径下当前行的路径转换为Entity可识别的通用路径
     * const fullPaths = EntityPathConverter.toEntityPathArray(this.viewModel.bindingPath, this.bindingData);
     * const paths = fullPaths.slice(0, fullPaths.length - 1);
     * const bindingPaths = this.viewModel.bindingPath.split('/').filter(item => item);
     * const bindingData = this.viewModel.bindingData;
     * let nodeCode = bindingPaths[bindingPaths.length - 1];
     * nodeCode = nodeCode.substr(0, nodeCode.length - 1);
     * // 获取上级实体
     * const parentPaths = bindingPaths.slice(0, bindingPaths.length - 1);
     * const parentObject = bindingData.getValue(parentPaths) as BindingObject;
     * if (!parentObject) {
     *   throw new Error('上级实体不存在');
     * }
     * const configPath = `/${nodeCode}_${parentObject[parentObject.primaryKey]}`;
     * // 获取绑定路径对应的分页信息
     * const { pageIndex = 1, pageSize } = this.repository.entityCollection.getPaginationConfigByPath(configPath);
     * const request$ = this.repository.queryChild(paths, pageIndex, pageSize);
     * ```
     * @param {?} paths 通用路径
     * @param {?} pageIndex 页码
     * @param {?} pageSize 分页大小
     * @param {?=} filter 过滤条件
     * @param {?=} sort 排序
     * @return {?}
     */
    function (paths, pageIndex, pageSize, filter, sort) {
        return this.dataService.queryChild(paths, pageIndex, pageSize, filter, sort);
    };
    /**
    * 获取主键为id的实体
    * @param id 主表实体主键
    * @description
    * 获取主表上对应主键的实体，调用该方法成功后实体仓库中仅包含这一个实体 \
    * 如果仅仅想要将对应id的实体同步为服务器上的值，请调用 {@link updateEntityById} 方法
    */
    /**
     * 获取主键为id的实体
     * \@description
     * 获取主表上对应主键的实体，调用该方法成功后实体仓库中仅包含这一个实体 \
     * 如果仅仅想要将对应id的实体同步为服务器上的值，请调用 {\@link updateEntityById} 方法
     * @param {?} id 主表实体主键
     * @return {?}
     */
    BefRepository.prototype.getEntityById = /**
     * 获取主键为id的实体
     * \@description
     * 获取主表上对应主键的实体，调用该方法成功后实体仓库中仅包含这一个实体 \
     * 如果仅仅想要将对应id的实体同步为服务器上的值，请调用 {\@link updateEntityById} 方法
     * @param {?} id 主表实体主键
     * @return {?}
     */
    function (id) {
        return this.dataService.getById(id);
    };
    /**
     * 更新实体数据
     * @param id 主表实体主键
     * @description
     * 重新从服务器获取主表上对应主键的实体数据 \
     * 使用示例：
     * ```typescript
     * const rootDataId = this.bindingData.list.currentId;
     * return this.repository.updateEntityById(rootDataId);
     * ```
     */
    /**
     * 更新实体数据
     * \@description
     * 重新从服务器获取主表上对应主键的实体数据 \
     * 使用示例：
     * ```typescript
     * const rootDataId = this.bindingData.list.currentId;
     * return this.repository.updateEntityById(rootDataId);
     * ```
     * @param {?} id 主表实体主键
     * @return {?}
     */
    BefRepository.prototype.updateEntityById = /**
     * 更新实体数据
     * \@description
     * 重新从服务器获取主表上对应主键的实体数据 \
     * 使用示例：
     * ```typescript
     * const rootDataId = this.bindingData.list.currentId;
     * return this.repository.updateEntityById(rootDataId);
     * ```
     * @param {?} id 主表实体主键
     * @return {?}
     */
    function (id) {
        return this.dataService.updateById(id);
    };
    /**
     * 更新实体数据并加锁
     * @param id 主表实体主键
     * @description
     * 使用示例：
     * ```typescript
     * id = this.bindingData.list.currentId;  // 编辑当前行
     * const edit$ = this.repository.editEntityById(id);
     * ```
     */
    /**
     * 更新实体数据并加锁
     * \@description
     * 使用示例：
     * ```typescript
     * id = this.bindingData.list.currentId;  // 编辑当前行
     * const edit$ = this.repository.editEntityById(id);
     * ```
     * @param {?} id 主表实体主键
     * @return {?}
     */
    BefRepository.prototype.editEntityById = /**
     * 更新实体数据并加锁
     * \@description
     * 使用示例：
     * ```typescript
     * id = this.bindingData.list.currentId;  // 编辑当前行
     * const edit$ = this.repository.editEntityById(id);
     * ```
     * @param {?} id 主表实体主键
     * @return {?}
     */
    function (id) {
        return this.dataService.editById(id);
    };
    /**
     * 创建实体
     * @param defaultValue 默认值，JSON对象
     * @description
     * 请求创建一个新的实体，并加载到实体仓库（加载后仓库中只会有这一个实体，适用于卡片） \
     * 使用示例：
     * ```typescript
     * // 在创建新实体后进入编辑状态
     * const create$ = this.repository.createEntity();
     * create$.pipe(
     *   tap(() => {
     *       EditStateUtil.setEditState(this.frameContext, lastModifiedId);
     *   })
     * );
     * ```
     */
    /**
     * 创建实体
     * \@description
     * 请求创建一个新的实体，并加载到实体仓库（加载后仓库中只会有这一个实体，适用于卡片） \
     * 使用示例：
     * ```typescript
     * // 在创建新实体后进入编辑状态
     * const create$ = this.repository.createEntity();
     * create$.pipe(
     *   tap(() => {
     *       EditStateUtil.setEditState(this.frameContext, lastModifiedId);
     *   })
     * );
     * ```
     * @param {?=} defaultValue 默认值，JSON对象
     * @return {?}
     */
    BefRepository.prototype.createEntity = /**
     * 创建实体
     * \@description
     * 请求创建一个新的实体，并加载到实体仓库（加载后仓库中只会有这一个实体，适用于卡片） \
     * 使用示例：
     * ```typescript
     * // 在创建新实体后进入编辑状态
     * const create$ = this.repository.createEntity();
     * create$.pipe(
     *   tap(() => {
     *       EditStateUtil.setEditState(this.frameContext, lastModifiedId);
     *   })
     * );
     * ```
     * @param {?=} defaultValue 默认值，JSON对象
     * @return {?}
     */
    function (defaultValue) {
        return this.dataService.create(defaultValue);
    };
    /**
     * 追加实体
     * @param defaultValue 默认值
     * @description 请求创建一个新的实体，并追加到实体仓库（适用于列表）
     */
    /**
     * 追加实体
     * \@description 请求创建一个新的实体，并追加到实体仓库（适用于列表）
     * @param {?=} defaultValue 默认值
     * @return {?}
     */
    BefRepository.prototype.appendEntity = /**
     * 追加实体
     * \@description 请求创建一个新的实体，并追加到实体仓库（适用于列表）
     * @param {?=} defaultValue 默认值
     * @return {?}
     */
    function (defaultValue) {
        return this.dataService.append(defaultValue);
    };
    /**
     * 创建并插入新实体（向主表插入）
     * @param position 插入位置
     * @param defaultValue 默认值
     * @description
     * 关于插入位置，可选值：1或-1，1代表在当前行后，-1代表在当前行前
     */
    /**
     * 创建并插入新实体（向主表插入）
     * \@description
     * 关于插入位置，可选值：1或-1，1代表在当前行后，-1代表在当前行前
     * @param {?} position 插入位置
     * @param {?=} defaultValue 默认值
     * @return {?}
     */
    BefRepository.prototype.insert = /**
     * 创建并插入新实体（向主表插入）
     * \@description
     * 关于插入位置，可选值：1或-1，1代表在当前行后，-1代表在当前行前
     * @param {?} position 插入位置
     * @param {?=} defaultValue 默认值
     * @return {?}
     */
    function (position, defaultValue) {
        return this.dataService.insert(position, defaultValue);
    };
    /**
     * 创建子实体并插入到指定位置（向从表或从从表插入）
     * @param path 父路径
     * @param position 插入位置
     * @description
     * 关于父路径格式，从表形如："/1/edus"，从从表形如："/1/edus/12/grades" \
     * 父路径是由实体主键值和实体属性名成对拼接而成的字符串（用斜杠分隔），指向要插入的那张表 \
     * 父路径与实体通用路径是相似的，区别主要是格式上的不同，父路径是字符串而不是数组，主键值前面不需要加冒号，父路径必须指向从表而实体通用路径还可以指向实体的普通属性或者关联 \
     * 插入位置参考 {@link insert} \
     * 使用示例：
     * ```typescript
     * // 我们可以通过bindingPath以及bindingData计算拼接出当前行所属从表的父路径
     * const append$ = this.repository.insertByPath(path, position);
     * ```
     */
    /**
     * 创建子实体并插入到指定位置（向从表或从从表插入）
     * \@description
     * 关于父路径格式，从表形如："/1/edus"，从从表形如："/1/edus/12/grades" \
     * 父路径是由实体主键值和实体属性名成对拼接而成的字符串（用斜杠分隔），指向要插入的那张表 \
     * 父路径与实体通用路径是相似的，区别主要是格式上的不同，父路径是字符串而不是数组，主键值前面不需要加冒号，父路径必须指向从表而实体通用路径还可以指向实体的普通属性或者关联 \
     * 插入位置参考 {\@link insert} \
     * 使用示例：
     * ```typescript
     * // 我们可以通过bindingPath以及bindingData计算拼接出当前行所属从表的父路径
     * const append$ = this.repository.insertByPath(path, position);
     * ```
     * @param {?} path 父路径
     * @param {?} position 插入位置
     * @return {?}
     */
    BefRepository.prototype.insertByPath = /**
     * 创建子实体并插入到指定位置（向从表或从从表插入）
     * \@description
     * 关于父路径格式，从表形如："/1/edus"，从从表形如："/1/edus/12/grades" \
     * 父路径是由实体主键值和实体属性名成对拼接而成的字符串（用斜杠分隔），指向要插入的那张表 \
     * 父路径与实体通用路径是相似的，区别主要是格式上的不同，父路径是字符串而不是数组，主键值前面不需要加冒号，父路径必须指向从表而实体通用路径还可以指向实体的普通属性或者关联 \
     * 插入位置参考 {\@link insert} \
     * 使用示例：
     * ```typescript
     * // 我们可以通过bindingPath以及bindingData计算拼接出当前行所属从表的父路径
     * const append$ = this.repository.insertByPath(path, position);
     * ```
     * @param {?} path 父路径
     * @param {?} position 插入位置
     * @return {?}
     */
    function (path, position) {
        return this.dataService.insertByPath(path, position);
    };
    /**
     * 创建子实体并追加到末尾
     * @param fpath 父路径
     * @description
     * 父路径格式参考 {@link insertByPath}
     */
    /**
     * 创建子实体并追加到末尾
     * \@description
     * 父路径格式参考 {\@link insertByPath}
     * @param {?} fpath 父路径
     * @return {?}
     */
    BefRepository.prototype.appendEntityByPath = /**
     * 创建子实体并追加到末尾
     * \@description
     * 父路径格式参考 {\@link insertByPath}
     * @param {?} fpath 父路径
     * @return {?}
     */
    function (fpath) {
        return this.dataService.appendByPath(fpath);
    };
    /**
     * 根据id删除实体
     * @param id 主表实体主键
     * @param ifSave 是否保存，可选，默认为true
     * @description
     * 如果ifSave传递为false，则会添加一个删除变更，等待以后保存
     */
    /**
     * 根据id删除实体
     * \@description
     * 如果ifSave传递为false，则会添加一个删除变更，等待以后保存
     * @param {?} id 主表实体主键
     * @param {?=} ifSave 是否保存，可选，默认为true
     * @return {?}
     */
    BefRepository.prototype.removeEntityById = /**
     * 根据id删除实体
     * \@description
     * 如果ifSave传递为false，则会添加一个删除变更，等待以后保存
     * @param {?} id 主表实体主键
     * @param {?=} ifSave 是否保存，可选，默认为true
     * @return {?}
     */
    function (id, ifSave) {
        return this.dataService.removeById(id, ifSave);
    };
    /**
     * 根据id删除实体并执行保存
     * @param id 主表实体主键
     */
    /**
     * 根据id删除实体并执行保存
     * @param {?} id 主表实体主键
     * @return {?}
     */
    BefRepository.prototype.removeEntityAndSaveById = /**
     * 根据id删除实体并执行保存
     * @param {?} id 主表实体主键
     * @return {?}
     */
    function (id) {
        return this.dataService.removeAndSaveById(id);
    };
    /**
     * 根据id删除父路径下子表中的实体
     * @param fpath 父路径
     * @param id 实体主键
     * @description
     * 父路径格式参考 {@link insertByPath}
     */
    /**
     * 根据id删除父路径下子表中的实体
     * \@description
     * 父路径格式参考 {\@link insertByPath}
     * @param {?} fpath 父路径
     * @param {?} id 实体主键
     * @return {?}
     */
    BefRepository.prototype.removeEntityByPath = /**
     * 根据id删除父路径下子表中的实体
     * \@description
     * 父路径格式参考 {\@link insertByPath}
     * @param {?} fpath 父路径
     * @param {?} id 实体主键
     * @return {?}
     */
    function (fpath, id) {
        return this.dataService.removeByPath(fpath, id);
    };
    /**
     * 根据ids批量删除实体
     * @param ids ids
     * @param ifSave 是否保存(默认为false)
     */
    /**
     * 根据ids批量删除实体
     * @param {?} ids ids
     * @param {?=} ifSave 是否保存(默认为false)
     * @return {?}
     */
    BefRepository.prototype.batchRemove = /**
     * 根据ids批量删除实体
     * @param {?} ids ids
     * @param {?=} ifSave 是否保存(默认为false)
     * @return {?}
     */
    function (ids, ifSave) {
        if (ifSave === void 0) { ifSave = false; }
        return this.dataService.batchRemove(ids, ifSave);
    };
    /**
     * 批量删除子级实体
     * @param fPath 父路径
     * @param ids 子级id集合
     * @description
     * ids中各个id之间以逗号分隔，父路径格式参考 {@link insertByPath} \
     * 使用示例：
     * ```typescript
     * // ids字符串可以从表单变量UIState中获取，列表组件的勾选状态变化后会自动更新表单变量
     * const remove$ = this.repository.batchRemoveByPath(path, ids);
     * ```
     */
    /**
     * 批量删除子级实体
     * \@description
     * ids中各个id之间以逗号分隔，父路径格式参考 {\@link insertByPath} \
     * 使用示例：
     * ```typescript
     * // ids字符串可以从表单变量UIState中获取，列表组件的勾选状态变化后会自动更新表单变量
     * const remove$ = this.repository.batchRemoveByPath(path, ids);
     * ```
     * @param {?} fPath 父路径
     * @param {?} ids 子级id集合
     * @return {?}
     */
    BefRepository.prototype.batchRemoveByPath = /**
     * 批量删除子级实体
     * \@description
     * ids中各个id之间以逗号分隔，父路径格式参考 {\@link insertByPath} \
     * 使用示例：
     * ```typescript
     * // ids字符串可以从表单变量UIState中获取，列表组件的勾选状态变化后会自动更新表单变量
     * const remove$ = this.repository.batchRemoveByPath(path, ids);
     * ```
     * @param {?} fPath 父路径
     * @param {?} ids 子级id集合
     * @return {?}
     */
    function (fPath, ids) {
        return this.dataService.batchRemoveByPath(fPath, ids);
    };
    /**
     * 保存主键为id的实体
     * @param id 主表实体主键
     * @description
     * 调用该方法会应用id对应实体上的变更 \
     * ```typescript
     * const id = this.bindingData.list.currentId as string;
     * const save$ = this.repository.saveEntityById(id);  // 向服务器提交变更并应用
     * ```
     */
    /**
     * 保存主键为id的实体
     * \@description
     * 调用该方法会应用id对应实体上的变更 \
     * ```typescript
     * const id = this.bindingData.list.currentId as string;
     * const save$ = this.repository.saveEntityById(id);  // 向服务器提交变更并应用
     * ```
     * @param {?} id 主表实体主键
     * @return {?}
     */
    BefRepository.prototype.saveEntityById = /**
     * 保存主键为id的实体
     * \@description
     * 调用该方法会应用id对应实体上的变更 \
     * ```typescript
     * const id = this.bindingData.list.currentId as string;
     * const save$ = this.repository.saveEntityById(id);  // 向服务器提交变更并应用
     * ```
     * @param {?} id 主表实体主键
     * @return {?}
     */
    function (id) {
        return this.dataService.applyChangesById(id);
    };
    /**
     * 批量保存
     * @description
     * 应用所有变更，比如调用了 {@link removeEntityById} 且未保存则可以通过此方法保存 \
     * 在列表服务中，我们可以通过调用该方法实现列表数据的批量保存
     */
    /**
     * 批量保存
     * \@description
     * 应用所有变更，比如调用了 {\@link removeEntityById} 且未保存则可以通过此方法保存 \
     * 在列表服务中，我们可以通过调用该方法实现列表数据的批量保存
     * @return {?}
     */
    BefRepository.prototype.saveEntities = /**
     * 批量保存
     * \@description
     * 应用所有变更，比如调用了 {\@link removeEntityById} 且未保存则可以通过此方法保存 \
     * 在列表服务中，我们可以通过调用该方法实现列表数据的批量保存
     * @return {?}
     */
    function () {
        return this.dataService.applyChanges();
    };
    /**
     * 取消实体变更
     * @description 清空所有实体变更，不希望保存变更时调用此方法
     */
    /**
     * 取消实体变更
     * \@description 清空所有实体变更，不希望保存变更时调用此方法
     * @return {?}
     */
    BefRepository.prototype.cancelEntityChanges = /**
     * 取消实体变更
     * \@description 清空所有实体变更，不希望保存变更时调用此方法
     * @return {?}
     */
    function () {
        return this.dataService.cancelChanges();
    };
    /**
     * 批量新增从表/从从表数据
     * @param path 父路径，参考 {@link insertByPath}
     * @param defaultValues 默认实体数据数组
     * @description
     * 后端接口只支持批量新增子表，批量新增主表目前不支持
     */
    /**
     * 批量新增从表/从从表数据
     * \@description
     * 后端接口只支持批量新增子表，批量新增主表目前不支持
     * @param {?} path 父路径，参考 {\@link insertByPath}
     * @param {?} defaultValues 默认实体数据数组
     * @return {?}
     */
    BefRepository.prototype.batchAppendByPath = /**
     * 批量新增从表/从从表数据
     * \@description
     * 后端接口只支持批量新增子表，批量新增主表目前不支持
     * @param {?} path 父路径，参考 {\@link insertByPath}
     * @param {?} defaultValues 默认实体数据数组
     * @return {?}
     */
    function (path, defaultValues) {
        return this.dataService.batchAppendByPath(path, defaultValues);
    };
    /**
     * 批量新增主表数据
     * @param defaultValues 默认实体数据数组
     */
    /**
     * 批量新增主表数据
     * @param {?} defaultValues 默认实体数据数组
     * @return {?}
     */
    BefRepository.prototype.batchAppend = /**
     * 批量新增主表数据
     * @param {?} defaultValues 默认实体数据数组
     * @return {?}
     */
    function (defaultValues) {
        return this.dataService.batchAppend(defaultValues);
    };
    /**
     * 清空Repositoy内的数据和变量
     * @description 清空所有实体、变量，并清空BeSessionId
     */
    /**
     * 清空Repositoy内的数据和变量
     * \@description 清空所有实体、变量，并清空BeSessionId
     * @return {?}
     */
    BefRepository.prototype.reset = /**
     * 清空Repositoy内的数据和变量
     * \@description 清空所有实体、变量，并清空BeSessionId
     * @return {?}
     */
    function () {
        this.entityManager.reset();
        this.variableManager.reset();
        this.restService.sessionService.clearBeSessionId();
    };
    /**
     * 获取Injector（外部请勿使用）
     * @internal
     */
    /**
     * 获取Injector（外部请勿使用）
     * \@internal
     * @return {?}
     */
    BefRepository.prototype.getInjector = /**
     * 获取Injector（外部请勿使用）
     * \@internal
     * @return {?}
     */
    function () {
        return this.injector;
    };
    /**
     * 清空vo变量变更
     */
    /**
     * 清空vo变量变更
     * @param {?} changeDetail
     * @return {?}
     */
    BefRepository.prototype.clearAllVariableChanges = /**
     * 清空vo变量变更
     * @param {?} changeDetail
     * @return {?}
     */
    function (changeDetail) {
        this.variableManager.clearChangeDetail(changeDetail);
    };
    BefRepository.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    BefRepository.ctorParameters = function () { return [
        { type: Injector }
    ]; };
    return BefRepository;
}(DeprecatedBefRepository));
if (false) {
    /**
     * @type {?}
     * @private
     */
    BefRepository.prototype.befProxy;
    /**
     * 实体管理器
     * \@internal
     * @type {?}
     */
    BefRepository.prototype.entityManager;
    /**
     * 变量管理器
     * \@internal
     * @type {?}
     */
    BefRepository.prototype.variableManager;
    /** @type {?} */
    BefRepository.prototype.appContext;
    /**
     * 取数服务
     * \@internal
     * @type {?}
     * @protected
     */
    BefRepository.prototype.dataService;
    /** @type {?} */
    BefRepository.prototype.serverUri;
    /**
     * @type {?}
     * @private
     */
    BefRepository.prototype.injector;
}
export { BefRepository };
//# sourceMappingURL=data:application/json;base64,