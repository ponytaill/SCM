/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable, NgZone } from '@angular/core';
import { CommonUtils, RuntimeStateService } from '@farris/ui-common';
import { FilterRelation, Compare } from '@farris/ui-common/types';
import { cloneDeep } from 'lodash-es';
export class LookupUtils {
    /**
     * @param {?} utils
     * @param {?} rts
     * @param {?} ngZone
     */
    constructor(utils, rts, ngZone) {
        this.utils = utils;
        this.rts = rts;
        this.ngZone = ngZone;
    }
    /**
     * @param {?} lookupIns
     * @return {?}
     */
    setActiveLookupInstance(lookupIns) {
        if (this.rts) {
            this.rts.setLookupInstance(lookupIns);
        }
    }
    /**
     * @return {?}
     */
    destroy() {
        this.rts.destroy();
    }
    /**
     * @return {?}
     */
    pendingStart() {
        if (this.rts) {
            this.rts.updateFormState({
                lookup: {
                    pending: true
                }
            });
            // 禁用页面的所有鼠标事件
            document.body.style['pointer-events'] = 'none';
        }
    }
    /**
     * @return {?}
     */
    pendingEnd() {
        if (this.rts) {
            this.rts.updateFormState({
                lookup: {
                    pending: false
                }
            });
            // 激活鼠标事件
            document.body.style['pointer-events'] = '';
        }
    }
    /**
     * @private
     * @param {?} field
     * @param {?} value
     * @return {?}
     */
    createFilterCondition(field, value) {
        return {
            filterField: field,
            value,
            lbracket: '',
            rbracket: '',
            relation: FilterRelation.Or,
            compare: Compare.Like
        };
    }
    /**
     * @param {?} condition
     * @param {?} fields
     * @param {?} searchData
     * @return {?}
     */
    mergeCondition(condition, fields, searchData) {
        if (!condition) {
            condition = {
                pagination: {
                    pageIndex: 1,
                    pageSize: 20
                },
                filterConditions: [],
                sortConditions: []
            };
        }
        else {
            condition = cloneDeep(condition);
        }
        const { field = '*', value = '' } = Object.assign({}, searchData);
        if (value) {
            if (field === '*') {
                if (fields && fields.length) {
                    /** @type {?} */
                    const searchConditions = fields.map((/**
                     * @param {?} f
                     * @return {?}
                     */
                    (f) => {
                        return this.createFilterCondition(f, value);
                    }));
                    if (searchConditions.length) {
                        searchConditions[0].lbracket = '(';
                        /** @type {?} */
                        const lastSearchConditions = searchConditions[searchConditions.length - 1];
                        lastSearchConditions.rbracket = ')';
                        lastSearchConditions.relation = FilterRelation.Empty;
                    }
                    if (condition.filterConditions && condition.filterConditions.length) {
                        condition.filterConditions[condition.filterConditions.length - 1].relation = FilterRelation.And;
                        condition.filterConditions = condition.filterConditions.concat(searchConditions);
                    }
                    else {
                        condition.filterConditions = searchConditions;
                    }
                }
            }
            else {
                /** @type {?} */
                const searchCondition = this.createFilterCondition(field, value);
                searchCondition.relation = FilterRelation.Empty;
                if (condition.filterConditions && condition.filterConditions.length) {
                    condition.filterConditions[condition.filterConditions.length - 1].relation = FilterRelation.And;
                    condition.filterConditions.push(searchCondition);
                }
                else {
                    condition.filterConditions = [searchCondition];
                }
            }
        }
        return condition;
    }
    /**
     * @private
     * @param {?} n
     * @return {?}
     */
    canSelectable(n) {
        if (n.hasOwnProperty('farris_selectable')) {
            return !!n['farris_selectable'];
        }
        return true;
    }
    /**
     * 将数据转树形结构
     * @param {?} data
     * @param {?} parentId
     * @param {?=} parentIdField
     * @param {?=} idField
     * @return {?}
     */
    makeTreeWithParentID(data, parentId, parentIdField = 'parentId', idField = 'id') {
        /** @type {?} */
        const nodes = new Map();
        /** @type {?} */
        const result = [];
        /** @type {?} */
        const unattached = [];
        data.forEach((/**
         * @param {?} t
         * @return {?}
         */
        t => {
            /** @type {?} */
            const node = {
                data: t,
                children: [],
                selectable: this.canSelectable(t),
                parent: null,
                parents: []
            };
            /** @type {?} */
            const id = t[idField];
            nodes.set(id, node);
            /** @type {?} */
            const PID = this.utils.getValue(parentIdField, t);
            if (PID === parentId) {
                result.push(node);
            }
            else {
                /** @type {?} */
                const parent = nodes.get(PID);
                if (parent) {
                    node.parent = PID;
                    node.parents = [...parent.parents, PID];
                    parent.children.push(node);
                }
                else {
                    unattached.push(node);
                }
            }
        }));
        unattached.forEach((/**
         * @param {?} n
         * @return {?}
         */
        n => {
            /** @type {?} */
            const pid = this.utils.getValue(parentIdField, n.data);
            /** @type {?} */
            const parent = nodes.get(pid);
            if (parent) {
                n.parent = pid;
                n.parents = [...parent.parents, pid];
                parent.children.push(n);
            }
        }));
        return result;
    }
    /**
     * @param {?} data
     * @param {?} treeInfo
     * @return {?}
     */
    makeTree(data, treeInfo) {
        /** @type {?} */
        const treeInfoField = treeInfo.dataField;
        /** @type {?} */
        const layerField = treeInfo.layerField;
        /** @type {?} */
        const pathField = treeInfo.pathField;
        /** @type {?} */
        const nodes = new Map();
        /** @type {?} */
        const result = [];
        /** @type {?} */
        const unattached = [];
        data.forEach((/**
         * @param {?} t
         * @return {?}
         */
        t => {
            /** @type {?} */
            const node = {
                data: t,
                children: [],
                selectable: this.canSelectable(t)
            };
            /** @type {?} */
            const pathCode = t[treeInfoField][pathField];
            nodes.set(pathCode, node);
            if (t[treeInfoField][layerField] === 1) {
                result.push(node);
            }
            else {
                /** @type {?} */
                const parentPathCode = pathCode.substr(0, pathCode.length - 4);
                /** @type {?} */
                const parent = nodes.get(parentPathCode);
                if (parent) {
                    parent.children.push(node);
                }
                else {
                    unattached.push(node);
                }
            }
        }));
        unattached.forEach((/**
         * @param {?} n
         * @return {?}
         */
        n => {
            /** @type {?} */
            const pathCode = n.data[treeInfoField][pathField];
            /** @type {?} */
            const parent = nodes.get(pathCode.substr(0, pathCode.length - 4));
            if (parent) {
                parent.children.push(n);
            }
        }));
        return result;
    }
}
LookupUtils.decorators = [
    { type: Injectable }
];
/** @nocollapse */
LookupUtils.ctorParameters = () => [
    { type: CommonUtils },
    { type: RuntimeStateService },
    { type: NgZone }
];
if (false) {
    /**
     * @type {?}
     * @private
     */
    LookupUtils.prototype.utils;
    /**
     * @type {?}
     * @private
     */
    LookupUtils.prototype.rts;
    /**
     * @type {?}
     * @private
     */
    LookupUtils.prototype.ngZone;
}
//# sourceMappingURL=data:application/json;base64,