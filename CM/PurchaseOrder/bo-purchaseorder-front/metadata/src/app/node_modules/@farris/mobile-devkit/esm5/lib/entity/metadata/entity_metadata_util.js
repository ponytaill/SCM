import { MetadataUtil } from '../../core/index';
import { PRIMITIVE_PROP_META, OBJECT_PROP_META, DYNAMIC_PROP_META, LIST_PROP_META } from './field_decorator';
/**
 * 实体元数据工具类
 */
var EntityMetadataUtil = /** @class */ (function () {
    function EntityMetadataUtil() {
    }
    /**
     * 获取所有属性
     * @todo：封装根据基类获取所有元数据的方法，解决重复代码
     */
    EntityMetadataUtil.getAllNgProperties = function (entityType) {
        var ngPlainProperties = this.getNgFieldProperties(entityType);
        var ngEntityProperties = this.getNgObjectProperties(entityType);
        var ngDynamicProperties = this.getNgDynamicProperties(entityType);
        var ngEntityListProperties = this.getNgObjectProperties(entityType);
        return Object.assign({}, ngPlainProperties, ngEntityProperties, ngDynamicProperties, ngEntityListProperties);
    };
    /**
     * 获取NgField的属性元数据
     */
    EntityMetadataUtil.getNgFieldProperties = function (entityType) {
        return MetadataUtil.getPropsMetadatasByName(entityType, PRIMITIVE_PROP_META);
    };
    /**
     * 获取NgObject属性元数据
     */
    EntityMetadataUtil.getNgObjectProperties = function (entityType) {
        return MetadataUtil.getPropsMetadatasByName(entityType, OBJECT_PROP_META);
    };
    /**
     * 获取NgDynamic属性元数据
     */
    EntityMetadataUtil.getNgDynamicProperties = function (entityType) {
        return MetadataUtil.getPropsMetadatasByName(entityType, DYNAMIC_PROP_META);
    };
    /**
     * 获取NgList属性元数据
     */
    EntityMetadataUtil.getNgListProperties = function (entityType) {
        return MetadataUtil.getPropsMetadatasByName(entityType, LIST_PROP_META);
    };
    /**
     * 获取主键属性元数据
     */
    EntityMetadataUtil.getPrimaryKeyProperty = function (entityType) {
        var primaryKeyProperty;
        var ngPlainProperties = EntityMetadataUtil.getNgFieldProperties(entityType);
        Object.keys(ngPlainProperties).forEach(function (propName) {
            var ngProperty = ngPlainProperties[propName];
            if (ngProperty.primary === true) {
                primaryKeyProperty = ngProperty;
            }
        });
        return primaryKeyProperty;
    };
    return EntityMetadataUtil;
}());
export { EntityMetadataUtil };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZW50aXR5X21ldGFkYXRhX3V0aWwuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZmFycmlzL21vYmlsZS1kZXZraXQvIiwic291cmNlcyI6WyJsaWIvZW50aXR5L21ldGFkYXRhL2VudGl0eV9tZXRhZGF0YV91dGlsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQztBQUdoRCxPQUFPLEVBQ1MsbUJBQW1CLEVBQXlCLGdCQUFnQixFQUMxRSxpQkFBaUIsRUFBdUIsY0FBYyxFQUN2RCxNQUFNLG1CQUFtQixDQUFDO0FBRTNCOztHQUVHO0FBQ0g7SUFBQTtJQTZEQSxDQUFDO0lBM0RDOzs7T0FHRztJQUNJLHFDQUFrQixHQUF6QixVQUEwQixVQUF3QjtRQUNoRCxJQUFNLGlCQUFpQixHQUFHLElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxVQUFVLENBQUMsQ0FBQztRQUNoRSxJQUFNLGtCQUFrQixHQUFHLElBQUksQ0FBQyxxQkFBcUIsQ0FBQyxVQUFVLENBQUMsQ0FBQztRQUNsRSxJQUFNLG1CQUFtQixHQUFHLElBQUksQ0FBQyxzQkFBc0IsQ0FBQyxVQUFVLENBQUMsQ0FBQztRQUNwRSxJQUFNLHNCQUFzQixHQUFHLElBQUksQ0FBQyxxQkFBcUIsQ0FBQyxVQUFVLENBQUMsQ0FBQztRQUV0RSxPQUFPLE1BQU0sQ0FBQyxNQUFNLENBQUMsRUFBRSxFQUNyQixpQkFBaUIsRUFBSSxrQkFBa0IsRUFDdkMsbUJBQW1CLEVBQUUsc0JBQXNCLENBQzVDLENBQUM7SUFDSixDQUFDO0lBRUQ7O09BRUc7SUFDSSx1Q0FBb0IsR0FBM0IsVUFBNEIsVUFBZTtRQUN6QyxPQUFPLFlBQVksQ0FBQyx1QkFBdUIsQ0FBQyxVQUFVLEVBQUUsbUJBQW1CLENBQUMsQ0FBQztJQUMvRSxDQUFDO0lBRUQ7O09BRUc7SUFDSSx3Q0FBcUIsR0FBNUIsVUFBNkIsVUFBZTtRQUMxQyxPQUFPLFlBQVksQ0FBQyx1QkFBdUIsQ0FBQyxVQUFVLEVBQUUsZ0JBQWdCLENBQUMsQ0FBQztJQUM1RSxDQUFDO0lBRUQ7O09BRUc7SUFDSSx5Q0FBc0IsR0FBN0IsVUFBOEIsVUFBZTtRQUMzQyxPQUFPLFlBQVksQ0FBQyx1QkFBdUIsQ0FBQyxVQUFVLEVBQUUsaUJBQWlCLENBQUMsQ0FBQztJQUM3RSxDQUFDO0lBRUQ7O09BRUc7SUFDSSxzQ0FBbUIsR0FBMUIsVUFBMkIsVUFBZTtRQUN4QyxPQUFPLFlBQVksQ0FBQyx1QkFBdUIsQ0FBQyxVQUFVLEVBQUUsY0FBYyxDQUFDLENBQUM7SUFDMUUsQ0FBQztJQUVEOztPQUVHO0lBQ0ksd0NBQXFCLEdBQTVCLFVBQTZCLFVBQXdCO1FBQ25ELElBQUksa0JBQWtCLENBQUM7UUFDdkIsSUFBTSxpQkFBaUIsR0FBRyxrQkFBa0IsQ0FBQyxvQkFBb0IsQ0FBQyxVQUFVLENBQUMsQ0FBQztRQUM5RSxNQUFNLENBQUMsSUFBSSxDQUFDLGlCQUFpQixDQUFDLENBQUMsT0FBTyxDQUFDLFVBQUMsUUFBZ0I7WUFDdEQsSUFBTSxVQUFVLEdBQUcsaUJBQWlCLENBQUMsUUFBUSxDQUEwQixDQUFDO1lBQ3hFLElBQUksVUFBVSxDQUFDLE9BQU8sS0FBSyxJQUFJLEVBQUU7Z0JBQy9CLGtCQUFrQixHQUFHLFVBQVUsQ0FBQzthQUNqQztRQUNILENBQUMsQ0FBQyxDQUFDO1FBRUgsT0FBTyxrQkFBa0IsQ0FBQztJQUM1QixDQUFDO0lBQ0gseUJBQUM7QUFBRCxDQUFDLEFBN0RELElBNkRDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgVHlwZSB9IGZyb20gJy4uLy4uL2NvcmUvaW5kZXgnO1xyXG5pbXBvcnQgeyBNZXRhZGF0YVV0aWwgfSBmcm9tICcuLi8uLi9jb3JlL2luZGV4JztcclxuaW1wb3J0IHsgRW50aXR5IH0gZnJvbSAnLi4vZW50aXR5JztcclxuXHJcbmltcG9ydCB7XHJcbiAgUHJvcE1ldGFkYXRhLCBQUklNSVRJVkVfUFJPUF9NRVRBLCBQcmltaXRpdmVQcm9wTWV0YWRhdGEsIE9CSkVDVF9QUk9QX01FVEEsIE9iamVjdFByb3BNZXRhZGF0YSxcclxuICBEWU5BTUlDX1BST1BfTUVUQSwgRHluYW1pY1Byb3BNZXRhZGF0YSwgTElTVF9QUk9QX01FVEEsICAgIExpc3RQcm9wTWV0YWRhdGFcclxufSBmcm9tICcuL2ZpZWxkX2RlY29yYXRvcic7XHJcblxyXG4vKipcclxuICog5a6e5L2T5YWD5pWw5o2u5bel5YW357G7XHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgRW50aXR5TWV0YWRhdGFVdGlsIHtcclxuXHJcbiAgLyoqXHJcbiAgICog6I635Y+W5omA5pyJ5bGe5oCnXHJcbiAgICogQHRvZG/vvJrlsIHoo4XmoLnmja7ln7rnsbvojrflj5bmiYDmnInlhYPmlbDmja7nmoTmlrnms5XvvIzop6PlhrPph43lpI3ku6PnoIFcclxuICAgKi9cclxuICBzdGF0aWMgZ2V0QWxsTmdQcm9wZXJ0aWVzKGVudGl0eVR5cGU6IFR5cGU8RW50aXR5Pik6IHsgW3Byb3BOYW1lOiBzdHJpbmddOiBQcm9wTWV0YWRhdGEgfSB7XHJcbiAgICBjb25zdCBuZ1BsYWluUHJvcGVydGllcyA9IHRoaXMuZ2V0TmdGaWVsZFByb3BlcnRpZXMoZW50aXR5VHlwZSk7XHJcbiAgICBjb25zdCBuZ0VudGl0eVByb3BlcnRpZXMgPSB0aGlzLmdldE5nT2JqZWN0UHJvcGVydGllcyhlbnRpdHlUeXBlKTtcclxuICAgIGNvbnN0IG5nRHluYW1pY1Byb3BlcnRpZXMgPSB0aGlzLmdldE5nRHluYW1pY1Byb3BlcnRpZXMoZW50aXR5VHlwZSk7XHJcbiAgICBjb25zdCBuZ0VudGl0eUxpc3RQcm9wZXJ0aWVzID0gdGhpcy5nZXROZ09iamVjdFByb3BlcnRpZXMoZW50aXR5VHlwZSk7XHJcblxyXG4gICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oe30sXHJcbiAgICAgIG5nUGxhaW5Qcm9wZXJ0aWVzLCAgIG5nRW50aXR5UHJvcGVydGllcyxcclxuICAgICAgbmdEeW5hbWljUHJvcGVydGllcywgbmdFbnRpdHlMaXN0UHJvcGVydGllc1xyXG4gICAgKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOiOt+WPlk5nRmllbGTnmoTlsZ7mgKflhYPmlbDmja5cclxuICAgKi9cclxuICBzdGF0aWMgZ2V0TmdGaWVsZFByb3BlcnRpZXMoZW50aXR5VHlwZTogYW55KTogeyBbcHJvcE5hbWU6IHN0cmluZ106IFByaW1pdGl2ZVByb3BNZXRhZGF0YSB9IHtcclxuICAgIHJldHVybiBNZXRhZGF0YVV0aWwuZ2V0UHJvcHNNZXRhZGF0YXNCeU5hbWUoZW50aXR5VHlwZSwgUFJJTUlUSVZFX1BST1BfTUVUQSk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDojrflj5ZOZ09iamVjdOWxnuaAp+WFg+aVsOaNrlxyXG4gICAqL1xyXG4gIHN0YXRpYyBnZXROZ09iamVjdFByb3BlcnRpZXMoZW50aXR5VHlwZTogYW55KTogeyBbcHJvcE5hbWU6IHN0cmluZ106IE9iamVjdFByb3BNZXRhZGF0YSB9IHtcclxuICAgIHJldHVybiBNZXRhZGF0YVV0aWwuZ2V0UHJvcHNNZXRhZGF0YXNCeU5hbWUoZW50aXR5VHlwZSwgT0JKRUNUX1BST1BfTUVUQSk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDojrflj5ZOZ0R5bmFtaWPlsZ7mgKflhYPmlbDmja5cclxuICAgKi9cclxuICBzdGF0aWMgZ2V0TmdEeW5hbWljUHJvcGVydGllcyhlbnRpdHlUeXBlOiBhbnkpOiB7IFtwcm9wTmFtZTogc3RyaW5nXTogRHluYW1pY1Byb3BNZXRhZGF0YSB9IHtcclxuICAgIHJldHVybiBNZXRhZGF0YVV0aWwuZ2V0UHJvcHNNZXRhZGF0YXNCeU5hbWUoZW50aXR5VHlwZSwgRFlOQU1JQ19QUk9QX01FVEEpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog6I635Y+WTmdMaXN05bGe5oCn5YWD5pWw5o2uXHJcbiAgICovXHJcbiAgc3RhdGljIGdldE5nTGlzdFByb3BlcnRpZXMoZW50aXR5VHlwZTogYW55KTogeyBbcHJvcE5hbWU6IHN0cmluZ106IExpc3RQcm9wTWV0YWRhdGEgfSB7XHJcbiAgICByZXR1cm4gTWV0YWRhdGFVdGlsLmdldFByb3BzTWV0YWRhdGFzQnlOYW1lKGVudGl0eVR5cGUsIExJU1RfUFJPUF9NRVRBKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOiOt+WPluS4u+mUruWxnuaAp+WFg+aVsOaNrlxyXG4gICAqL1xyXG4gIHN0YXRpYyBnZXRQcmltYXJ5S2V5UHJvcGVydHkoZW50aXR5VHlwZTogVHlwZTxFbnRpdHk+KTogUHJpbWl0aXZlUHJvcE1ldGFkYXRhIHtcclxuICAgIGxldCBwcmltYXJ5S2V5UHJvcGVydHk7XHJcbiAgICBjb25zdCBuZ1BsYWluUHJvcGVydGllcyA9IEVudGl0eU1ldGFkYXRhVXRpbC5nZXROZ0ZpZWxkUHJvcGVydGllcyhlbnRpdHlUeXBlKTtcclxuICAgIE9iamVjdC5rZXlzKG5nUGxhaW5Qcm9wZXJ0aWVzKS5mb3JFYWNoKChwcm9wTmFtZTogc3RyaW5nKSA9PiB7XHJcbiAgICAgIGNvbnN0IG5nUHJvcGVydHkgPSBuZ1BsYWluUHJvcGVydGllc1twcm9wTmFtZV0gYXMgUHJpbWl0aXZlUHJvcE1ldGFkYXRhO1xyXG4gICAgICBpZiAobmdQcm9wZXJ0eS5wcmltYXJ5ID09PSB0cnVlKSB7XHJcbiAgICAgICAgcHJpbWFyeUtleVByb3BlcnR5ID0gbmdQcm9wZXJ0eTtcclxuICAgICAgfVxyXG4gICAgfSk7XHJcblxyXG4gICAgcmV0dXJuIHByaW1hcnlLZXlQcm9wZXJ0eTtcclxuICB9XHJcbn1cclxuIl19