import { map } from 'rxjs/operators';
import { DomSanitizer } from '@angular/platform-browser';
import { BsModalService } from '@farris/ui-modal';
import { from, of, forkJoin } from 'rxjs';
import { FrameworkService } from '@gsp-sys/rtf-common';
import { CommonModule } from '@angular/common';
import { HttpService } from '@ecp-caf/caf-common';
import { MessagerService, MessagerModule } from '@farris/ui-messager';
import { FarrisDialogModule } from '@farris/ui-dialog';
import { Injectable, Injector, ComponentFactoryResolver, Component, ViewChild, Input, Output, EventEmitter, HostBinding, ChangeDetectorRef, Optional, Pipe, NgModule } from '@angular/core';
import { LayoutModule } from '@farris/ui-layout';
import { FarrisSectionModule } from '@farris/ui-section';
import { WfApprovalLogsModule } from '@gsp-wf/wf-approval-logs';
import { ComboListModule } from '@farris/ui-combo-list';
import { ReactiveFormsModule, FormsModule } from '@angular/forms';
import { FDropdownDirectiveTypeModule } from '@farris/ui-dropdown';
import { DatagridModule } from '@farris/ui-datagrid';
import { NotifyModule } from '@farris/ui-notify';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
const en = {
    static: {
        approvalLogs: {
            title: 'Approval Logs',
            approvalOpinion: 'Approval opinion',
            startTime: 'StartTime',
            endTime: 'EndTime',
            todo: 'Todo',
            done: 'Done',
            toAssign: 'To Assign'
        },
        flowchart: {
            title: 'Flow Chart',
            processNotFound: 'process instance id is null',
            flowChart: 'Flow Chart',
            complete: 'Hide Calculated Route',
            simulation: 'Show Calculated Route',
            sequenceColor: 'Description Of Sequence Color',
            completed: 'Completed',
            calculate: 'Calculate Route',
            default: 'Default',
            suspend: 'Calculate Suspend',
            noProcess: 'Process definition not found!',
            list: 'Process List',
            noDataId: 'form id is null',
            noBizDefKey: 'process category id is null'
        }
    }
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
const zh_CHT = {
    static: {
        approvalLogs: {
            title: '審批記錄',
            approvalOpinion: '審批意見',
            startTime: '接收時間',
            endTime: '處理時間',
            todo: '待辦理',
            done: '已辦理',
            toAssign: '未指派'
        },
        flowchart: {
            title: '查看流程',
            processNotFound: '流程實例ID為空',
            dataIdIsNull: '單據內碼為空',
            flowChart: '流程圖',
            complete: '隱藏計算路線',
            simulation: '顯示計算路線',
            sequenceColor: '分支線顏色說明',
            completed: '已運行',
            calculate: '計算路線',
            default: '默認',
            suspend: '計算中斷',
            noProcess: '未找到符合條件的流程定義！',
            list: '流程列表',
            noDataId: '單據內碼為空',
            noBizDefKey: '流程分類ID為空'
        }
    }
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
const zh_CHS = {
    static: {
        approvalLogs: {
            title: '审批记录',
            approvalOpinion: '审批意见',
            startTime: '接收时间',
            endTime: '处理时间',
            todo: '待办理',
            done: '已办理',
            toAssign: '未指派'
        },
        flowchart: {
            title: '查看流程',
            processNotFound: '流程实例ID为空',
            dataIdIsNull: '单据内码为空',
            flowChart: '流程图',
            complete: '隐藏计算路线',
            simulation: '显示计算路线',
            sequenceColor: '分支线颜色说明',
            completed: '已运行',
            calculate: '计算路线',
            default: '默认',
            suspend: '计算中断',
            noProcess: '未找到符合条件的流程定义！',
            list: '流程列表',
            noDataId: '单据内码为空',
            noBizDefKey: '流程分类ID为空'
        }
    }
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
const translate = {
    'zh-CHS': zh_CHS,
    'en': en,
    'zh-CHT': zh_CHT
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class UiFlowchartService {
    /**
     * @param {?} httpSvc
     */
    constructor(httpSvc) {
        this.httpSvc = httpSvc;
    }
    /**
     * @param {?} payload
     * @return {?}
     */
    getForecastProcessListByPayload(payload) {
        /** @type {?} */
        const url = '/api/runtime/wf/v1.0/processInstances/startProcess-simulation';
        return this.httpSvc.post(url, payload).pipe(map((re) => re.procDefs));
    }
    /**
     * @param {?} dataId
     * @return {?}
     */
    getRuntimeProcInstsByDataId(dataId) {
        if (dataId) {
            /** @type {?} */
            const url = `/api/runtime/wf/v1.0/processInstances/runtimeProcInstList?dataId=${dataId}`;
            return this.httpSvc.get(url);
        }
        else {
            return from(new Array());
        }
    }
    /**
     * @param {?} dataId
     * @return {?}
     */
    getHistoricProcInstsByDataId(dataId) {
        if (dataId) {
            /** @type {?} */
            const url = `/api/runtime/wf/v1.0/processInstances/historicProcInstList?dataId=${dataId}`;
            return this.httpSvc.get(url);
        }
        else {
            return from(new Array());
        }
    }
    /**
     * 基于流程实例ID获取流程实例
     * @param {?} procInstId 流程实例id
     * @return {?}
     */
    getProcInstanceById(procInstId) {
        /** @type {?} */
        const url = `/api/runtime/wf/v1.0/processInstances/${procInstId}`;
        return this.httpSvc.get(url);
    }
    /**
     * 基于流程实例ID获取bpmnModel
     * @param {?} procInstId
     * @return {?}
     */
    getBpmnModelbyProcInstId(procInstId) {
        /** @type {?} */
        const url = `/api/runtime/wf/v1.0/processInstances/${procInstId}/bpmnModel`;
        return this.httpSvc.get(url);
    }
    /**
     * 基于流程定义ID获取bpmnModel
     * @param {?} procDefId
     * @return {?}
     */
    getBpmnModelbyProcDefId(procDefId) {
        /** @type {?} */
        const url = `/api/runtime/wf/v1.0/procDefs/${procDefId}/bpmnModel`;
        return this.httpSvc.get(url);
    }
    /**
     * @param {?} superActInstId
     * @param {?} superProcInstId
     * @return {?}
     */
    getSubProcessInstance(superActInstId, superProcInstId) {
        if (superActInstId) {
            /** @type {?} */
            const url = `/api/runtime/wf/v1.0/processInstances/subProcInst?superActInstId=${superActInstId}&superProcInstId=${superProcInstId}`;
            return this.httpSvc.get(url);
        }
    }
    /**
     * 获取所有包含预解析的流程实例信息
     * @param {?} procInstId
     * @return {?}
     */
    getForecastProcessByProcInstId(procInstId) {
        /** @type {?} */
        const url = `/api/runtime/wf/v1.0/processInstances/${procInstId}/forecastProcess`;
        return this.httpSvc.get(url);
    }
    /**
     * 获取流程预测数据
     * @param {?} payload
     * @return {?}
     */
    getForecastProcessByPayload(payload) {
        /** @type {?} */
        const url = '/api/runtime/wf/v1.0/processInstances/forecastProcess';
        return this.httpSvc.post(url, payload);
    }
    /**
     * @param {?} procInstId
     * @return {?}
     */
    getCompleteProcessInfoByProcInstId(procInstId) {
        /** @type {?} */
        const url = `/api/runtime/wf/v1.0/processInstances/${procInstId}/flowChartInfo`;
        return this.httpSvc.get(url);
    }
    /**
     * 基于流程实例Id获取所有活动实例
     * @param {?} procInstId procInstId
     * @return {?}
     */
    getAllActiInstsbyProcInstId(procInstId) {
        /** @type {?} */
        const url = `/api/runtime/wf/v1.0/processInstances/${procInstId}/activityInstanceSlims`;
        return this.httpSvc.get(url);
    }
    /**
     * 基于流程实例ID获取所有的流转实例
     * @param {?} procInstId procInstId
     * @return {?}
     */
    getTransitionInstanceSlimsByProcInstId(procInstId) {
        /** @type {?} */
        const url = `/api/runtime/wf/v1.0/processInstances/${procInstId}/transitionInstanceSlims`;
        return this.httpSvc.get(url);
    }
    /**
     * @param {?} procInstId
     * @return {?}
     */
    getFormInfoByProcInstId(procInstId) {
        /** @type {?} */
        const url = `/api/runtime/wf/v1.0/processInstances/${procInstId}/formInfo`;
        return this.httpSvc.get(url);
    }
    /**
     * @param {?} procInstId
     * @param {?} actInstId
     * @return {?}
     */
    getFormInfoByActInstId(procInstId, actInstId) {
        /** @type {?} */
        let url = `/api/runtime/wf/v1.0/processInstances/${procInstId}/formInfo`;
        if (actInstId) {
            url += `?actInstId=${actInstId}`;
        }
        return this.httpSvc.get(url);
    }
    /**
     * 获取审批日志信息
     * @param {?} procInstId
     * @param {?=} activityDefinitionId
     * @return {?}
     */
    getWorkItemLogs(procInstId, activityDefinitionId) {
        /** @type {?} */
        const logUrl = activityDefinitionId ?
            `/api/runtime/wf/v1.0/processInstances/${procInstId}/logs?activityDefinitionId=${activityDefinitionId}` :
            `/api/runtime/wf/v1.0/processInstances/${procInstId}/logs`;
        return this.httpSvc.get(logUrl);
    }
    /**
     * @param {?} name
     * @return {?}
     */
    getI18nValue(name) {
        if (!name) {
            return '';
        }
        /** @type {?} */
        const defaultLang = localStorage.getItem('languageCode');
        /** @type {?} */
        const langData = defaultLang ? translate[defaultLang] : translate['zh-CHS'];
        /** @type {?} */
        let resultVal = '';
        if (name.indexOf('.') === -1) {
            resultVal = langData[name];
        }
        else {
            resultVal = name.split('.').reduce((obj, key) => {
                if (obj) {
                    return obj[key];
                }
                else {
                    return null;
                }
            }, langData);
        }
        return resultVal;
    }
    /**
     * @param {?} processId
     * @return {?}
     */
    getProcessInstanceById(processId) {
        /** @type {?} */
        const url = `/api/runtime/wf/v1.0/processInstances/${processId}`;
        return this.httpSvc.get(url);
    }
    /**
     * @param {?} dataId
     * @return {?}
     */
    getProcInstIdByDataId(dataId) {
        /** @type {?} */
        const url = `/api/runtime/wf/v1.0/processInstances/procInstId?bizInstId=${dataId}`;
        return this.httpSvc.get(url);
    }
    /**
     * @param {?} procInstId
     * @param {?} actInstId
     * @param {?} bizInstId
     * @return {?}
     */
    retryAifCreation(procInstId, actInstId, bizInstId) {
        return this.httpSvc.post("/api/runtime/wf/v1.0/aifactivityinstance/retry", actInstId);
    }
}
UiFlowchartService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
UiFlowchartService.ctorParameters = () => [
    { type: HttpService }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class WFFlowchartService {
    /**
     * @param {?} msgService
     * @param {?} injector
     * @param {?} resolver
     * @param {?} modalService
     */
    constructor(msgService, injector, resolver, modalService) {
        this.msgService = msgService;
        this.injector = injector;
        this.resolver = resolver;
        this.modalService = modalService;
        this.flowchartService = this.injector.get(UiFlowchartService);
        this.frameworkService = this.injector.get(FrameworkService);
    }
    /**
     * @param {?} payload
     * @return {?}
     */
    viewProcess(payload) {
        if (!payload || !payload.dataId) {
            this.msgService.warning(this.getI18nValue('static.flowchart.noDataId'));
            return;
        }
        if (!payload || !payload.bizDefKey) {
            this.msgService.warning(this.getI18nValue('static.flowchart.noBizDefKey'));
            return;
        }
        /** @type {?} */
        const parameters = new Map();
        parameters.set('dataId', payload.dataId);
        parameters.set('bizDefKey', payload.bizDefKey);
        if (payload.startMode) {
            parameters.set('startMode', payload.startMode);
        }
        if (payload.startUserId) {
            parameters.set('startUserId', payload.startUserId);
        }
        parameters.set('withTitle', true);
        /** @type {?} */
        const options = {
            appType: 'menu',
            funcId: 'WFViewFlowChart',
            appId: '',
            appEntrance: '',
            tabId: payload.dataId,
            isNewTab: true,
            queryStringParams: parameters
        };
        this.frameworkService.openMenu(options);
    }
    /**
     * 查看流程（tab页中打开）
     * @param {?} procInstId 流程实例ID
     * @return {?}
     */
    viewFlowChart(procInstId) {
        if (!procInstId) {
            this.msgService.warning(this.getI18nValue('static.flowchart.processNotFound'));
            return;
        }
        /** @type {?} */
        const parameters = new Map();
        parameters.set('processId', procInstId);
        parameters.set('withTitle', true);
        /** @type {?} */
        const options = {
            appType: 'menu',
            funcId: 'WFViewFlowChart',
            appId: '',
            appEntrance: '',
            tabId: new Date().getTime().toString(),
            isNewTab: true,
            queryStringParams: parameters
        };
        this.frameworkService.openMenu(options);
    }
    /**
     * @param {?} dataId
     * @return {?}
     */
    viewFlowChartByDataId(dataId) {
        if (!dataId) {
            this.msgService.warning(this.getI18nValue('static.flowchart.dataIdIsNull'));
            return;
        }
        /** @type {?} */
        const parameters = new Map();
        parameters.set('dataId', dataId);
        parameters.set('withTitle', true);
        /** @type {?} */
        const options = {
            appType: 'menu',
            funcId: 'WFViewFlowChart',
            appId: '',
            appEntrance: '',
            tabId: new Date().getTime().toString(),
            isNewTab: true,
            queryStringParams: parameters
        };
        this.frameworkService.openMenu(options);
    }
    /**
     * 查看流程（弹框中打开）
     * @param {?} procInstId 流程实例ID
     * @param {?=} mode
     * @return {?}
     */
    viewFlowChartByDialog(procInstId, mode) {
        if (!procInstId) {
            this.msgService.warning(this.getI18nValue('static.flowchart.processNotFound'));
            return;
        }
        /** @type {?} */
        let func;
        if (UIFlowchartComponent.func) {
            func = UIFlowchartComponent.func;
        }
        /** @type {?} */
        const modalConfig = {
            title: this.getI18nValue('static.flowchart.title'),
            width: 1200,
            height: 530,
            showButtons: false,
            beforeClose: (modalRef) => {
                if (UIFlowchartComponent.func) {
                    window.removeEventListener('message', UIFlowchartComponent.func, false);
                }
                if (func) {
                    window.addEventListener('message', func, false);
                    UIFlowchartComponent.func = func;
                }
                return of(true);
            }
        };
        /** @type {?} */
        const compFactory = this.resolver.resolveComponentFactory(UIFlowchartComponent);
        /** @type {?} */
        const inj = Injector.create({
            providers: [
                {
                    provide: UiFlowchartService, useFactory: (httpSvc) => {
                        return new UiFlowchartService(httpSvc);
                    },
                    deps: [
                        HttpService
                    ]
                }
            ], parent: this.injector
        });
        /** @type {?} */
        const compRef = compFactory.create(inj);
        compRef.instance.ProcInstId = procInstId;
        if (mode) {
            compRef.instance.mode = mode;
        }
        compRef.instance.fill();
        this.flowchartService.getProcessInstanceById(procInstId).subscribe(re => {
            modalConfig.title = re.name + '-v' + re.version + '.0';
            /** @type {?} */
            const dialog = this.modalService.show(compRef, modalConfig);
        });
    }
    /**
     * @private
     * @param {?} name
     * @return {?}
     */
    getI18nValue(name) {
        if (!name) {
            return '';
        }
        /** @type {?} */
        var defaultLang = localStorage.getItem('languageCode');
        /** @type {?} */
        var langData = defaultLang ? translate[defaultLang] : translate['zh-CHS'];
        /** @type {?} */
        let resultVal = '';
        if (name.indexOf('.') === -1) {
            resultVal = langData[name];
        }
        else {
            resultVal = name.split('.').reduce((obj, key) => {
                if (obj) {
                    return obj[key];
                }
                else {
                    return null;
                }
            }, langData);
        }
        return resultVal;
    }
}
WFFlowchartService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
WFFlowchartService.ctorParameters = () => [
    { type: MessagerService },
    { type: Injector },
    { type: ComponentFactoryResolver },
    { type: BsModalService }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class UIFlowchartComponent {
    /**
     * @param {?} sanitizer
     * @param {?} service
     * @param {?} changeDetector
     * @param {?} injector
     * @param {?} chartService
     */
    constructor(sanitizer, service, changeDetector, injector, chartService) {
        this.sanitizer = sanitizer;
        this.service = service;
        this.changeDetector = changeDetector;
        this.injector = injector;
        this.chartService = chartService;
        // 消息监听处理方法
        this.cls = 'd-flex flex-fill h-100';
        this.modalHide = new EventEmitter();
        this.fcHtml = window.document.location.origin + '/platform/runtime/wf/web/designer/flowchart.html';
        this.theme = 'viewFlowChart';
        this._mode = 'complete';
        this.modeButton = this.service.getI18nValue('static.flowchart.simulation');
        this.typeList = [{
                value: 'complete', text: this.service.getI18nValue('static.flowchart.complete')
            },
            {
                value: 'simulation', text: this.service.getI18nValue('static.flowchart.simulation')
            }];
        // 监听事件处理
        this.eventHandler = (event) => {
            /** @type {?} */
            const origin = event.origin;
            /** @type {?} */
            const message = event.data;
            if (this.fcHtml.search(origin) > -1) {
                switch (message.action) {
                    case 'load':
                        this.viewFlowChart();
                        break;
                    case 'viewLogs':
                        this.viewLogs(message.data);
                        break;
                    case 'viewParent':
                        this.viewParent(message.data.superProcInstId);
                        break;
                    case 'viewChild':
                        this.viewChild(message.data.superActInstId, message.data.superProcInstId);
                        break;
                    case 'viewForm':
                        this.viewForm(message.data.procInstId, message.data.actInstId, message.data.bizInstId);
                        break;
                    case 'retryAifCreation':
                        this.retryAifCreation(message.data.procInstId, message.data.actInstId, message.data.bizInstId);
                        break;
                    default:
                        break;
                }
            }
        };
        this.message = this.injector.get(MessagerService);
        this.frameworkSvc = this.injector.get(FrameworkService);
        this.srcUrl = this.sanitizer.bypassSecurityTrustResourceUrl(this.fcHtml);
        if (UIFlowchartComponent.func) {
            window.removeEventListener('message', UIFlowchartComponent.func, false);
        }
        this.addMessageListener();
    }
    /**
     * @param {?} v
     * @return {?}
     */
    set mode(v) {
        this._mode = v;
        if (this._mode === 'simulation') {
            this.ifForecast = 'true';
            this.modeButton = this.service.getI18nValue('static.flowchart.complete');
        }
        else if (this._mode === 'complete') {
            this.modeButton = this.service.getI18nValue('static.flowchart.simulation');
        }
    }
    /**
     * @return {?}
     */
    get mode() {
        return this._mode;
    }
    /**
     * @param {?} procInstId
     * @return {?}
     */
    set ProcInstId(procInstId) {
        if (procInstId) {
            this.procInstId = procInstId;
        }
    }
    /**
     * @param {?} dataId
     * @return {?}
     */
    set DataId(dataId) {
        if (dataId) {
            this.dataId = dataId;
        }
    }
    /**
     * @return {?}
     */
    ngOnInit() {
    }
    /**
     * @private
     * @return {?}
     */
    addMessageListener() {
        window.addEventListener('message', this.eventHandler, false);
        UIFlowchartComponent.func = this.eventHandler;
    }
    /**
     * @private
     * @return {?}
     */
    viewFlowChart() {
        if (this.theme === 'viewFlowChart') {
            this.viewFlowChartByProcInstId();
        }
        else {
            this.processForecast();
        }
    }
    /**
     * @private
     * @param {?} superProcInstId
     * @return {?}
     */
    viewParent(superProcInstId) {
        // this.procInstId = superProcInstId;
        // this.viewFlowChartByProcInstId();
    }
    /**
     * @private
     * @param {?} superActInstId
     * @param {?} superProcInstId
     * @return {?}
     */
    viewChild(superActInstId, superProcInstId) {
        this.service.getSubProcessInstance(superActInstId, superProcInstId)
            .subscribe(re => {
            if (this.chartService) {
                this.chartService.viewFlowChartByDialog(re.id, this.mode);
            }
            else {
                throw Error('请升级查看流程公共包实现联查子流程图功能');
            }
        });
    }
    /**
     * @return {?}
     */
    modeSwitch() {
        if (this.mode === 'complete') {
            this.mode = 'simulation';
            this.ifForecast = 'true';
            this.modeButton = this.service.getI18nValue('static.flowchart.complete');
            this.service.getForecastProcessByProcInstId(this.procInstId).subscribe(r => {
                this.actInstList = r.activityInstanceSlims;
                this.transInsList = r.transitionInstanceSlims;
                this.postMessage('modeSwitch', {
                    mode: 'simulation',
                    actiInstList: r.activityInstanceSlims,
                    transInsList: r.transitionInstanceSlims
                });
            });
        }
        else {
            this.mode = 'complete';
            this.ifForecast = 'false';
            this.modeButton = this.service.getI18nValue('static.flowchart.simulation');
            this.service.getCompleteProcessInfoByProcInstId(this.procInstId).subscribe(r => {
                this.actInstList = r.activityInstanceSlims;
                this.transInsList = r.transitionInstanceSlims;
                this.postMessage('modeSwitch', {
                    mode: 'complete',
                    actiInstList: r.activityInstanceSlims,
                    transInsList: r.transitionInstanceSlims
                });
            });
        }
    }
    /**
     * @private
     * @param {?} data
     * @return {?}
     */
    viewLogs(data) {
        this.type = data.type;
        this.actDefId = data.actiDefId;
    }
    /**
     * @private
     * @return {?}
     */
    viewFlowChartByProcInstId() {
        this.content = '';
        if (this.procInstId) {
            if (this.mode === 'complete') {
                forkJoin(this.service.getProcInstanceById(this.procInstId), this.service.getBpmnModelbyProcInstId(this.procInstId), this.service.getCompleteProcessInfoByProcInstId(this.procInstId))
                    .subscribe((data) => {
                    this.processInstance = data[0];
                    this.content = JSON.stringify(data[1]);
                    this.actInstList = data[2].activityInstanceSlims;
                    this.transInsList = data[2].transitionInstanceSlims;
                    this.loadFlowChart();
                });
            }
            else {
                forkJoin(this.service.getProcInstanceById(this.procInstId), this.service.getBpmnModelbyProcInstId(this.procInstId), this.service.getForecastProcessByProcInstId(this.procInstId))
                    .subscribe((data) => {
                    this.processInstance = data[0];
                    this.content = JSON.stringify(data[1]);
                    this.actInstList = data[2].activityInstanceSlims;
                    this.transInsList = data[2].transitionInstanceSlims;
                    this.loadFlowChart();
                });
            }
        }
    }
    /**
     * @private
     * @return {?}
     */
    processForecast() {
        this.content = '';
        this.mode = 'simulation';
        // this.ifForecast = true;
        if (this.processForecastPayload.processDefinitionId && this.processForecastPayload.dataId) {
            forkJoin(this.service.getBpmnModelbyProcDefId(this.processForecastPayload.processDefinitionId), this.service.getForecastProcessByPayload(this.processForecastPayload))
                .subscribe((data) => {
                this.content = JSON.stringify(data[0]);
                this.actInstList = data[1].activityInstanceSlims;
                this.transInsList = data[1].transitionInstanceSlims;
                this.loadFlowChart();
            });
        }
    }
    /**
     * @private
     * @param {?} procInstId
     * @param {?} actInstId
     * @param {?} bizInstId
     * @return {?}
     */
    viewForm(procInstId, actInstId, bizInstId) {
        if (procInstId) {
            this.service.getFormInfoByActInstId(procInstId, actInstId).subscribe((re) => {
                /** @type {?} */
                const formInfo = re;
                if (!formInfo || !formInfo.appId) {
                    if (this.message) {
                        this.message.info('找不到单据，请联系管理员查看原因！');
                    }
                    return;
                }
                /** @type {?} */
                const options = {
                    appType: 'menu',
                    funcId: formInfo.appId,
                    appId: '',
                    appEntrance: '',
                    tabId: bizInstId,
                    isNewTab: true
                };
                // 传工作流上下文参数
                /** @type {?} */
                const parameters = new Map();
                parameters.set('procInstId', procInstId);
                parameters.set('actInstId', actInstId);
                formInfo.parameters.forEach((item) => parameters.set(item.code, item.value));
                options.queryStringParams = parameters;
                if (this.frameworkSvc) {
                    this.frameworkSvc.openMenu(options);
                }
                else {
                    throw Error('框架服务不存在！无法联查！');
                }
            });
        }
    }
    /**
     * @private
     * @param {?} procInstId
     * @param {?} actInstId
     * @param {?} bizInstId
     * @return {?}
     */
    retryAifCreation(procInstId, actInstId, bizInstId) {
        if (procInstId) {
            this.service.retryAifCreation(procInstId, actInstId, bizInstId).subscribe((re) => {
                this.viewFlowChart();
            }, (err) => {
                setTimeout(() => {
                    //todo 确定异常结构, 目前采用兼容取值方式
                    this.message.error(err.error == null ? err.message : (err.error.Message || err.error.message || err.message));
                }, 300);
                throw err;
            });
        }
    }
    /**
     * @return {?}
     */
    loadFlowChart() {
        if (this.content) {
            this.postMessage('load', {
                processInstance: this.processInstance,
                content: this.content,
                actiInstList: this.actInstList,
                transInsList: this.transInsList,
                mode: this.mode
            });
        }
    }
    /**
     * @param {?} action
     * @param {?} data
     * @return {?}
     */
    postMessage(action, data) {
        /** @type {?} */
        const message = { action, data };
        this.iframe.nativeElement.contentWindow.postMessage(message, this.fcHtml);
    }
    /**
     * @return {?}
     */
    fill() {
        this.cls = 'd-flex flex-fill h-100 f-utils-absolute-all';
    }
}
UIFlowchartComponent.func = null; // 消息监听处理方法
UIFlowchartComponent.decorators = [
    { type: Component, args: [{
                selector: 'wf-flowchart',
                template: "<layout [direction]=\"'h'\" [fill]=\"true\">\r\n    <layout-panel region=\"west\" [showBorder]=\"false\" [minWidth]=\"400\" style=\"width: 70%;\">\r\n        <farris-section [mainTitle]=\"'static.flowchart.flowChart' | translate\" [enableMaximize]=\"false\"\r\n            [enableAccordion]=\"false\" [fill]=\"true\" style=\"height: 100%;\" class=\"px-0 pb-0\">\r\n            <ng-template farrisSectionToolbar>   \r\n                <button *ngIf=\"theme==='viewFlowChart'\" class=\"btn btn-secondary mr-2\" (click)=\"modeSwitch()\">{{modeButton}}</button>\r\n                <div class=\"btn-group\" fDropdown>\r\n                    <button class=\"btn btn-secondary dropdown-toggle\" fDropdownToggle type=\"button\">\r\n                        {{'static.flowchart.sequenceColor' | translate}}\r\n                    </button>\r\n                    <div class=\"dropdown-menu\" fDropdownMenu>\r\n                        <table class=\"mx-2\">\r\n                            <tbody>\r\n                                <tr>\r\n                                    <td style=\"width:25px;\"><span\r\n                                            style=\"background:#595959;color:#fff;border-radius:0;display: block;width:15px;height:15px;\"></span>\r\n                                    </td>\r\n                        \r\n                                    <td style=\"width:60px;\">{{'static.flowchart.completed' | translate}}</td>\r\n                                </tr>\r\n                                <tr>\r\n                                    <td style=\"width:25px;\"><span\r\n                                            style=\"background:#f59c24;color:#fff;border-radius:0;display: block;width:15px;height:15px;\"></span>\r\n                                    </td>\r\n                                    <td style=\"width:60px;\">{{'static.flowchart.calculate' | translate}}</td>\r\n                                </tr>\r\n                                <tr>\r\n                                    <td style=\"width:25px;\"><span\r\n                                            style=\"background:#59A1FF;color:#fff;border-radius:0;display: block;width:15px;height:15px;\"></span>\r\n                                    </td>\r\n                                    <td style=\"width:60px;\">{{'static.flowchart.default' | translate}}</td>\r\n                                </tr>\r\n                                <tr>\r\n                                    <td style=\"width:25px;\"><span\r\n                                            style=\"background:#FF4040;color:#fff;border-radius:0;display: block;width:15px;height:15px;\"></span>\r\n                                    </td>\r\n                                    <td style=\"width:60px;\">{{'static.flowchart.suspend' | translate}}</td>\r\n                                </tr>\r\n                            </tbody>\r\n                        </table>\r\n                    </div>\r\n                </div>\r\n\r\n            </ng-template>\r\n            <div *ngIf=\"dataId || procInstId || processForecastPayload\" style=\"height: 100%;\">\r\n                <iframe #iframe class=\"flowChart\" [src]=\"srcUrl\" frameborder=\"0\">\r\n                </iframe>\r\n            </div>\r\n        </farris-section>\r\n    </layout-panel>\r\n    <layout-panel region=\"center\" [showBorder]=\"false\" [minWidth]=\"300\" style=\"overflow: auto; width: 30%;\">\r\n        <farris-section [enableMaximize]=\"false\" [enableAccordion]=\"false\" [showHeader]=\"false\" class=\"px-0\">\r\n            <wf-approval-logs\r\n                [ProcInstId]=\"procInstId\"\r\n                [DataId]=\"dataId\" \r\n                [IfForecast]=\"ifForecast\"\r\n                [ActivityDefinitionId]=\"actDefId\" \r\n                [Type]=\"type\"\r\n                [processForecastPayload] = \"processForecastPayload\"\r\n                [ShowHeader]=\"true\"\r\n                [ShowViewProcess]=\"false\"\r\n            >\r\n            </wf-approval-logs>\r\n        </farris-section>\r\n    </layout-panel>\r\n</layout>\r\n\r\n",
                styles: ["::ng-deep .chartModal .ant-modal{height:100%}::ng-deep .chartModal .ant-modal-content{height:100%}::ng-deep .chartModal .ant-modal-body{height:90%}.flowChart{height:100%;min-height:400px;width:100%}"]
            }] }
];
/** @nocollapse */
UIFlowchartComponent.ctorParameters = () => [
    { type: DomSanitizer },
    { type: UiFlowchartService },
    { type: ChangeDetectorRef },
    { type: Injector },
    { type: WFFlowchartService, decorators: [{ type: Optional }] }
];
UIFlowchartComponent.propDecorators = {
    cls: [{ type: HostBinding, args: ['class',] }],
    iframe: [{ type: ViewChild, args: ['iframe',] }],
    modalHide: [{ type: Output }],
    theme: [{ type: Input }],
    processForecastPayload: [{ type: Input }],
    mode: [{ type: Input }],
    ProcInstId: [{ type: Input }],
    DataId: [{ type: Input }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class TranslatePipe {
    /**
     * @param {?} service
     */
    constructor(service) {
        this.service = service;
    }
    /**
     * @param {?} name
     * @param {?=} defaultVal
     * @return {?}
     */
    transform(name, defaultVal = '') {
        /** @type {?} */
        const r = this.service.getI18nValue(name);
        return r ? r : defaultVal;
    }
}
TranslatePipe.decorators = [
    { type: Pipe, args: [{ name: 'translate' },] }
];
/** @nocollapse */
TranslatePipe.ctorParameters = () => [
    { type: UiFlowchartService }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class UiFlowchartModule {
}
UiFlowchartModule.decorators = [
    { type: NgModule, args: [{
                declarations: [
                    UIFlowchartComponent,
                    TranslatePipe
                ],
                imports: [
                    LayoutModule,
                    CommonModule,
                    FarrisDialogModule,
                    MessagerModule.forRoot({
                        width: 500
                    }),
                    FarrisSectionModule,
                    WfApprovalLogsModule,
                    ComboListModule,
                    ReactiveFormsModule,
                    FormsModule,
                    FDropdownDirectiveTypeModule,
                    DatagridModule,
                    NotifyModule
                ],
                exports: [UIFlowchartComponent],
                providers: [
                    HttpService,
                    UiFlowchartService,
                    WFFlowchartService,
                ],
                entryComponents: [
                    UIFlowchartComponent
                ]
            },] }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class ForecastProcessPayload {
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { UiFlowchartService, UIFlowchartComponent, UiFlowchartModule, WFFlowchartService, TranslatePipe, ForecastProcessPayload };

//# sourceMappingURL=gsp-wf-ui-flowchart.js.map