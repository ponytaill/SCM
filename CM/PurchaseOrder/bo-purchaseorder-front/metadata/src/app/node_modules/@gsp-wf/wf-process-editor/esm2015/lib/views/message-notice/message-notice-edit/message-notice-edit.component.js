/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input, ViewChild, TemplateRef, Output, EventEmitter } from '@angular/core';
import { MessageNotice, activitySendTime, processSendTime } from '../message-notice';
import { MessagerService } from '@farris/ui-messager';
import { ProcessDesignerUIState } from '../../../app/process-designer.uistate';
import { ExpressionService, InjectedType } from "@gsp-svc/expression";
export class MessageNoticeEditComponent {
    /**
     * @param {?} message
     * @param {?} uistate
     * @param {?} expr
     */
    constructor(message, uistate, expr) {
        this.message = message;
        this.uistate = uistate;
        this.expr = expr;
        this.groupIcon2 = '<i class="f-icon f-icon-lookup"></i>';
        this.exprAble = false;
        this.closeEmitter = new EventEmitter();
        this.submitEmitter = new EventEmitter();
        this._location = 'activity';
        this.messageNotice = new MessageNotice();
        this.typeGroup = this.uistate.messageChannels.map((/**
         * @param {?} m
         * @return {?}
         */
        m => ({ value: m.code, name: m.name })));
        this.receiverVariables = [
            { value: 'workItemParticipant', name: '任务办理人' }
        ];
        this.sendTimes = [];
        this.bindingData = {};
    }
    /**
     * @param {?} l
     * @return {?}
     */
    set location(l) {
        this._location = l;
        if (this.location !== 'activity') {
            this.receiverVariables = [{ value: 'procInstCreator', name: '流程发起人' }];
        }
    }
    /**
     * @return {?}
     */
    get location() {
        return this._location;
    }
    /**
     * @param {?} m
     * @return {?}
     */
    set value(m) {
        this.messageNotice = Object.assign({}, m);
        if (this.messageNotice.receiver && this.messageNotice.receiver.length > 0) {
            /** @type {?} */
            let array = this.messageNotice.receiver.split(',');
            if (array.indexOf('workItemParticipant') > -1) {
                this.receiverVari = 'workItemParticipant';
            }
            else if (array.indexOf('procInstCreator') > -1) {
                this.receiverVari = 'procInstCreator';
            }
            if (array.length > 0) {
                array = array.filter((/**
                 * @param {?} a
                 * @return {?}
                 */
                a => (a !== 'workItemParticipant' && a !== 'procInstCreator')));
                this.bindingData.id = '';
                for (const r of array) {
                    this.bindingData.id += r + ',';
                }
                if (this.bindingData.id) {
                    this.bindingData.id = this.bindingData.id.substring(0, this.bindingData.id.length - 1);
                }
            }
        }
        if (this.messageNotice.receiverText && this.messageNotice.receiverText.length > 0) {
            /** @type {?} */
            let array = this.messageNotice.receiverText.split(',');
            if (array.length > 0) {
                array = array.filter((/**
                 * @param {?} a
                 * @return {?}
                 */
                a => (a !== '任务办理人' && a !== '流程发起人')));
                this.bindingData.name = '';
                for (const r of array) {
                    this.bindingData.name += r + ',';
                }
                if (this.bindingData.name) {
                    this.bindingData.name = this.bindingData.name.substring(0, this.bindingData.name.length - 1);
                }
            }
        }
        this.exprAble = this.messageNotice.subject.charAt(0) === '{';
    }
    /**
     * @return {?}
     */
    get value() {
        return this.messageNotice;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        if (this.location === 'activity') {
            this.sendTimes = activitySendTime;
        }
        else {
            this.sendTimes = processSendTime;
        }
    }
    /**
     * @return {?}
     */
    clickOK() {
        this.setReceiver();
        if (this.validator()) {
            this.submitEmitter.emit(this.messageNotice);
        }
    }
    /**
     * @return {?}
     */
    clickCancel() {
        this.closeEmitter.emit();
    }
    /**
     * @param {?} data
     * @return {?}
     */
    sendTimeChange(data) {
        if (data.data.value === activitySendTime[0].value) {
            this.receiverVari = 'workItemParticipant';
            this.clear();
        }
    }
    /**
     * @param {?} data
     * @return {?}
     */
    usersSelect(data) {
        console.log(data);
    }
    /**
     * @param {?} data
     * @return {?}
     */
    changeValue(data) {
        console.log(data);
    }
    /**
     * @return {?}
     */
    clear() {
        this.bindingData = {};
    }
    /**
     * @private
     * @return {?}
     */
    setReceiver() {
        /** @type {?} */
        let receiver = '';
        /** @type {?} */
        let receiverText = '';
        if (this.receiverVari) {
            receiver += this.receiverVari + ',';
            /** @type {?} */
            const array = this.receiverVari.split(',');
            if (array.length > 0) {
                for (const a of array) {
                    /** @type {?} */
                    const t = this.receiverVariables.find((/**
                     * @param {?} v
                     * @return {?}
                     */
                    v => v.value === a)).name;
                    receiverText += t + ',';
                }
            }
        }
        if (this.bindingData.id) {
            receiver += this.bindingData.id + ',';
            receiverText += this.bindingData.name + ',';
        }
        if (receiver) {
            receiver = receiver.substring(0, receiver.length - 1);
        }
        if (receiverText) {
            receiverText = receiverText.substring(0, receiverText.length - 1);
        }
        this.messageNotice.receiver = receiver;
        this.messageNotice.receiverText = receiverText;
    }
    /**
     * @private
     * @return {?}
     */
    validator() {
        if (!this.messageNotice.sendType) {
            this.message.info('发送方式不允许为空！');
            return false;
        }
        if (this.location !== 'messageActivity' && !this.messageNotice.sendTime) {
            this.message.info('发送时机不允许为空！');
            return false;
        }
        if (!this.messageNotice.subject) {
            this.message.info('消息主题不允许为空！');
            return false;
        }
        if (!this.messageNotice.content) {
            this.message.info('消息内容不允许为空！');
            return false;
        }
        if (!this.messageNotice.receiver) {
            this.message.info('接收人不允许为空！');
            return false;
        }
        return true;
    }
    /**
     * @param {?} data
     * @return {?}
     */
    titleExpr(data) {
        this.showTitleHelp(data);
    }
    /**
     * @param {?} data
     * @return {?}
     */
    contentExpr(data) {
        this.showContentHelp(data);
    }
    /**
     * @param {?} data
     * @return {?}
     */
    showContentHelp(data) {
        this.showExpr();
        if (this.messageNotice.content && this.messageNotice.content.length > 0) {
            this.expr.addExpressionText(this.messageNotice.content);
        }
        else {
            this.expr.addExpressionText('');
        }
        this.expr.buildExpression().then((/**
         * @param {?} expressionInfo
         * @return {?}
         */
        (expressionInfo) => {
            this.messageNotice.content = expressionInfo;
        }));
    }
    /**
     * @param {?} data
     * @return {?}
     */
    showTitleHelp(data) {
        if (this.messageNotice.subject && this.messageNotice.subject.charAt(0) !== '{') {
            this.messageNotice.subject = '';
        }
        this.showExpr();
        if (this.messageNotice.subject && this.messageNotice.subject.length > 0) {
            this.expr.addExpressionText(this.messageNotice.subject);
        }
        else {
            this.expr.addExpressionText('');
        }
        this.expr.buildExpression().then((/**
         * @param {?} expressionInfo
         * @return {?}
         */
        (expressionInfo) => {
            this.messageNotice.subject = expressionInfo;
        }));
    }
    /**
     * @return {?}
     */
    showExpr() {
        if (this.uistate.schemas.length > 0) {
            for (const schema of this.uistate.schemas) {
                // this.expr.addCommonObject(co);
                this.expr.addSchema('Schema', schema);
            }
            if (this.uistate.schemas[0].entityTypes && this.uistate.schemas[0].entityTypes.length > 0) {
                /** @type {?} */
                const entityType = this.uistate.schemas[0].entityTypes[0];
                this.expr.addInjectedEntity(entityType.name, 'Schema', entityType.name, InjectedType.EntityType);
            }
        }
        /** @type {?} */
        const context = new Array();
        if (this.uistate.procInstContext.length > 0) {
            for (const variable of this.uistate.procInstContext) {
                context.push(variable);
                // this.expr.addContext(variable);
            }
        }
        if (this.uistate.processVariableContext.length > 0) {
            for (const variable of this.uistate.processVariableContext) {
                if (!context.some((/**
                 * @param {?} c
                 * @return {?}
                 */
                c => c.key === variable.key))) {
                    context.push(variable);
                }
                // this.expr.addContext(variable);
            }
        }
        if (context.length > 0) {
            for (const v of context) {
                this.expr.addContext(v);
            }
        }
    }
    /**
     * @return {?}
     */
    tranExpr() {
        this.messageNotice.subject = '';
    }
}
MessageNoticeEditComponent.decorators = [
    { type: Component, args: [{
                selector: 'lib-message-notice-edit',
                template: "<div class=\"f-page\">\r\n  <div class=\"f-utils-fill-flex-column farris-split-section m-2 h-100\">\r\n    <section class=\"f-utils-fill-flex-column h-100\">\r\n      <div class=\"f-section-header pt-2 mx-2\">\r\n        <div class=\"f-title\">\r\n          <h4 class=\"f-title-text\">\u6D88\u606F\u901A\u77E5\u8BBE\u7F6E</h4>\r\n        </div>\r\n      </div>\r\n      <div class=\"f-utils-fill-flex-column h-100\">\r\n        <perfect-scrollbar [config]=\"{}\">\r\n          <form class=\"h-100\">\r\n            <div class=\"farris-form form-inline farris-form-inline\">\r\n              <div class=\"farris-group-wrap\">\r\n                <div class=\"form-group farris-form-group\">\r\n                  <label class=\"col-form-label\">\r\n                    <span class=\"farris-label-info text-danger\">*</span>\r\n                    <span class=\"farris-label-text\">\u53D1\u9001\u65B9\u5F0F</span>\r\n                  </label>\r\n                  <div class=\"farris-input-wrap ml-1\">\r\n                    <farris-checkboxgroup #checkboxGroup [(ngModel)]=\"messageNotice.sendType\" name=\"sendType\" [horizontal]=\"true\"\r\n                      [data]=\"typeGroup\">\r\n                    </farris-checkboxgroup>\r\n                    <div class=\"farris-feedback valid-feedback\"></div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n              <div *ngIf=\"location!=='messageActivity'\" class=\"farris-group-wrap my-3\">\r\n                <div class=\"form-group farris-form-group\">\r\n                  <label class=\"col-form-label\">\r\n                    <span class=\"farris-label-info text-danger\">*</span>\r\n                    <span class=\"farris-label-text\">\u53D1\u9001\u65F6\u673A</span>\r\n                  </label>\r\n                  <div class=\"farris-input-wrap ml-1\">\r\n                    <farris-combo-list [(ngModel)]=\"messageNotice.sendTime\" [idField]=\"'value'\" [textField]=\"'text'\"\r\n                      [enableClear]=\"false\" [data]=\"sendTimes\" name=\"sendTime\" [editable]=\"false\" (selectChange)=\"sendTimeChange($event)\">\r\n                    </farris-combo-list>\r\n                    <div class=\"farris-feedback valid-feedback\"></div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n              <div class=\"farris-group-wrap my-3\">\r\n                <div class=\"form-group farris-form-group\">\r\n                  <label class=\"col-form-label\">\r\n                    <span class=\"farris-label-info text-danger\">*</span>\r\n                    <span class=\"farris-label-text\">\u6D88\u606F\u4E3B\u9898</span>\r\n                  </label>\r\n                  <div class=\"farris-input-wrap ml-1\" *ngIf=\"!exprAble; else disabled\">\r\n                    <input class=\"form-control\" type=\"text\" value=\"subject\" [(ngModel)]=\"messageNotice.subject\" name=\"subject\" />\r\n                    <div class=\"farris-feedback valid-feedback\"></div>\r\n                  </div>\r\n                  <ng-template #disabled>\r\n                    <input-group [editable]=\"false\" [customCls]=\"'custom-cls'\" [groupText]=\"groupIcon2\"\r\n                                 [(value)]=\"messageNotice.subject\" (clickHandle)=\"titleExpr($event)\">\r\n                    </input-group>\r\n                    <div class=\"farris-feedback valid-feedback\"></div>\r\n                  </ng-template>\r\n                  <label class=\"col-form-label pl-1 mr-3\">\r\n                    <span class=\"farris-label-text\">\u542F\u7528\u8868\u8FBE\u5F0F</span>\r\n                  </label>\r\n                  <div class=\"farris-input-wrap mr-5\">\r\n                    <farris-switch [(ngModel)]=\"exprAble\" name=\"enable\" (click)=\"tranExpr()\"></farris-switch>\r\n                    <div class=\"farris-feedback valid-feedback\"></div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n              <div class=\"farris-group-wrap my-3\">\r\n                <div class=\"form-group farris-form-group\">\r\n                  <label class=\"col-form-label\">\r\n                    <span class=\"farris-label-info text-danger\">*</span>\r\n                    <span class=\"farris-label-text\">\u6D88\u606F\u5185\u5BB9</span>\r\n                  </label>\r\n                  <div class=\"farris-input-wrap ml-1\">\r\n                    <input-group [editable]=\"false\" [customCls]=\"'custom-cls'\" [groupText]=\"groupIcon2\"\r\n                                 [(value)]=\"messageNotice.content\" (clickHandle)=\"contentExpr($event)\">\r\n                    </input-group>\r\n                    <div class=\"farris-feedback valid-feedback\"></div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n              <div class=\"farris-group-wrap\">\r\n                <div class=\"form-group farris-form-group\">\r\n                  <label class=\"col-form-label\">\r\n                    <span class=\"farris-label-info text-danger\">*</span>\r\n                    <span class=\"farris-label-text\">\u63A5\u6536\u4EBA</span>\r\n                  </label>\r\n                  <div class=\"farris-input-wrap ml-1\">\r\n                    <div class=\"pb-2\">\r\n                      <farris-checkboxgroup #receiverVariable [(ngModel)]=\"receiverVari\" name=\"receiverVariable\"\r\n                        [horizontal]=\"true\" [data]=\"receiverVariables\" (changeValue)=\"changeValue($event)\">\r\n                      </farris-checkboxgroup>\r\n                    </div>\r\n                    <div *ngIf=\"messageNotice.sendTime!=='WORKITEM_CREATED'\">\r\n                      <sys-farris-grid-lookup #userHelp [singleSelect]=\"false\" [displayTxt]=\"bindingData.name\" [pagination]=\"true\"\r\n                        [pageSize]=\"20\" [title]=\"'\u7CFB\u7EDF\u7528\u6237'\" [sourceType]=\"'user'\" (afterConfirm)=\"usersSelect($event)\" [typeMode]=\"1\"\r\n                        [bindingData]=\"bindingData\" [filter]=\"{notGetCurrentUser:false, notGetStopUser:true}\" (clear)=\"clear()\" [required]=\"false\">\r\n                      </sys-farris-grid-lookup>\r\n                    </div>\r\n                    <div class=\"farris-feedback valid-feedback\"></div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </form>\r\n        </perfect-scrollbar>\r\n      </div>\r\n    </section>\r\n  </div>\r\n</div>\r\n\r\n<ng-template #footer>\r\n  <button type=\"button\" class=\"btn btn-primary btn-sm mx-2\" (click)=\"clickOK()\">\u786E\u5B9A</button>\r\n  <button type=\"button\" class=\"btn btn-secondary btn-sm mx-2\" (click)=\"clickCancel()\">\u53D6\u6D88</button>\r\n</ng-template>\r\n",
                styles: [""]
            }] }
];
/** @nocollapse */
MessageNoticeEditComponent.ctorParameters = () => [
    { type: MessagerService },
    { type: ProcessDesignerUIState },
    { type: ExpressionService }
];
MessageNoticeEditComponent.propDecorators = {
    footer: [{ type: ViewChild, args: ['footer',] }],
    closeEmitter: [{ type: Output }],
    submitEmitter: [{ type: Output }],
    location: [{ type: Input }],
    value: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    MessageNoticeEditComponent.prototype.groupIcon2;
    /** @type {?} */
    MessageNoticeEditComponent.prototype.exprAble;
    /** @type {?} */
    MessageNoticeEditComponent.prototype.footer;
    /** @type {?} */
    MessageNoticeEditComponent.prototype.closeEmitter;
    /** @type {?} */
    MessageNoticeEditComponent.prototype.submitEmitter;
    /**
     * @type {?}
     * @private
     */
    MessageNoticeEditComponent.prototype._location;
    /** @type {?} */
    MessageNoticeEditComponent.prototype.messageNotice;
    /** @type {?} */
    MessageNoticeEditComponent.prototype.typeGroup;
    /** @type {?} */
    MessageNoticeEditComponent.prototype.receiverVariables;
    /** @type {?} */
    MessageNoticeEditComponent.prototype.sendTimes;
    /** @type {?} */
    MessageNoticeEditComponent.prototype.receiverVari;
    /** @type {?} */
    MessageNoticeEditComponent.prototype.bindingData;
    /**
     * @type {?}
     * @private
     */
    MessageNoticeEditComponent.prototype.message;
    /**
     * @type {?}
     * @private
     */
    MessageNoticeEditComponent.prototype.uistate;
    /**
     * @type {?}
     * @private
     */
    MessageNoticeEditComponent.prototype.expr;
}
//# sourceMappingURL=data:application/json;base64,