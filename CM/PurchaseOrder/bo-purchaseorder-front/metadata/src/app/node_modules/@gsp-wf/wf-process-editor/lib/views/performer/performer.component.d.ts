import { OnInit, EventEmitter, TemplateRef, ComponentFactoryResolver, Injector, ComponentRef } from '@angular/core';
import { TypeConverter } from '@farris/ui-property-panel';
import { PerformerUIState } from './performer.uistate';
import { PerformerViewModel } from './performer.viewmodel';
import { FormBuilder } from '@angular/forms';
import { BsModalService, BsModalRef } from '@farris/ui-modal';
import { PerformerEditComponent } from './views/performer-edit/performer-edit.component';
import { MessagerService } from '@farris/ui-messager';
import { PerformerOptionsComponent } from './views/performer-options/performer-options.component';
import { DialogComponent } from '@farris/ui-dialog';
import { ProcessDesignerUIState } from '../../app/process-designer.uistate';
import { ExpressionService } from '@gsp-svc/expression';
import { PerformerInfo } from './entities/performer-info.entity';
import { DataColumn, DatagridComponent } from '@farris/ui-datagrid';
import { Observable } from 'rxjs';
import { HttpService } from '@ecp-caf/caf-common';
export declare class PerformerComponent implements OnInit {
    viewModel: PerformerViewModel;
    uistate: PerformerUIState;
    private formBuilder;
    private resolver;
    private injector;
    private modalService;
    private message;
    private designerUIState;
    private expr;
    private http;
    cls: string;
    display: boolean;
    modalFooter: TemplateRef<any>;
    editFooter: TemplateRef<any>;
    options: PerformerOptionsComponent;
    optionsDialog: DialogComponent;
    grid: DatagridComponent;
    closeModal: EventEmitter<any>;
    submitModal: EventEmitter<any>;
    value: PerformerInfo;
    editorParams: {};
    editDialog: BsModalRef;
    compRef: ComponentRef<PerformerEditComponent>;
    isClose: boolean;
    modalConfig: {
        title: string;
        width: number;
        height: number;
        showButtons: boolean;
    };
    columns: ({
        field: string;
        width: number;
        title: string;
        formatter: {
            type: string;
            options: {
                valueField: string;
                textField: string;
                data: {
                    text: string;
                    value: string;
                }[];
            };
        };
        showTips?: undefined;
        editor?: undefined;
    } | {
        field: string;
        width: number;
        title: string;
        formatter?: undefined;
        showTips?: undefined;
        editor?: undefined;
    } | {
        field: string;
        width: number;
        title: string;
        showTips: boolean;
        formatter?: undefined;
        editor?: undefined;
    } | {
        field: string;
        width: number;
        title: string;
        showTips: boolean;
        editor: {
            type: string;
            options: {
                groupText: string;
                editable: boolean;
                clickHandle: (e: any) => void;
                clear: (e: any) => void;
            };
        };
        formatter?: undefined;
    })[];
    curPerformer: any;
    editState: string;
    constructor(viewModel: PerformerViewModel, uistate: PerformerUIState, formBuilder: FormBuilder, resolver: ComponentFactoryResolver, injector: Injector, modalService: BsModalService, message: MessagerService, designerUIState: ProcessDesignerUIState, expr: ExpressionService, http: HttpService);
    ngOnInit(): void;
    add(): void;
    edit(): void;
    remove(): void;
    clear(): void;
    clickOK(): void;
    clickCancel(): void;
    editOK(): void;
    private addReportingLineData;
    private addMatrixData;
    editCancel(): void;
    participantOptionsSet(): void;
    private performerDescription;
    private componentDescription;
    private reportingLineDescription;
    private matrixDescription;
    editConditon(e: any): void;
    afterEdit: (rowIndex: number, rowData: any, column?: DataColumn) => Observable<boolean>;
    selectChanged(data: any): void;
    private GetOrganizationType;
    private getMatrixConfig;
}
export declare class PerformerConverter implements TypeConverter {
    constructor();
    convertTo(data: any): string;
}
