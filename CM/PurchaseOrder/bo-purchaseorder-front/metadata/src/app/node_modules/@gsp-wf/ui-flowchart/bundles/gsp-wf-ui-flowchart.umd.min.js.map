{"version":3,"sources":["ng://@gsp-wf/ui-flowchart/lib/services/i18n/en.ts","ng://@gsp-wf/ui-flowchart/lib/services/i18n/index.ts","ng://@gsp-wf/ui-flowchart/lib/services/i18n/zh-chs.ts","ng://@gsp-wf/ui-flowchart/lib/services/i18n/zh-cht.ts","ng://@gsp-wf/ui-flowchart/lib/services/ui-flowchart.service.ts","ng://@gsp-wf/ui-flowchart/lib/wf-flowchart.service.ts","ng://@gsp-wf/ui-flowchart/lib/task-flowchart/task-flowchart.component.ts","ng://@gsp-wf/ui-flowchart/lib/services/translate.pipe.ts","ng://@gsp-wf/ui-flowchart/lib/ui-flowchart.module.ts","ng://@gsp-wf/ui-flowchart/lib/entity/forecast-process-payload.ts"],"names":["translate","zh-CHS","static","approvalLogs","title","approvalOpinion","startTime","endTime","todo","done","toAssign","flowchart","processNotFound","dataIdIsNull","flowChart","complete","simulation","sequenceColor","completed","calculate","default","suspend","noProcess","list","noDataId","noBizDefKey","en","zh-CHT","UiFlowchartService","prototype","getForecastProcessListByPayload","payload","this","httpSvc","post","pipe","map","re","procDefs","getRuntimeProcInstsByDataId","dataId","url","get","from","Array","getHistoricProcInstsByDataId","getProcInstanceById","procInstId","getBpmnModelbyProcInstId","getBpmnModelbyProcDefId","procDefId","getSubProcessInstance","superActInstId","superProcInstId","getForecastProcessByProcInstId","getForecastProcessByPayload","getCompleteProcessInfoByProcInstId","getAllActiInstsbyProcInstId","getTransitionInstanceSlimsByProcInstId","getFormInfoByProcInstId","getFormInfoByActInstId","actInstId","getWorkItemLogs","activityDefinitionId","logUrl","getI18nValue","name","defaultLang","localStorage","getItem","langData","indexOf","split","reduce","obj","key","getProcessInstanceById","processId","getProcInstIdByDataId","retryAifCreation","bizInstId","Injectable","HttpService","WFFlowchartService","viewProcess","bizDefKey","parameters","Map","set","startMode","startUserId","options","appType","funcId","appId","appEntrance","tabId","isNewTab","queryStringParams","frameworkService","openMenu","msgService","warning","viewFlowChart","Date","getTime","toString","viewFlowChartByDataId","viewFlowChartByDialog","mode","_this","func","UIFlowchartComponent","modalConfig","width","height","showButtons","beforeClose","modalRef","window","removeEventListener","addEventListener","of","compFactory","resolver","resolveComponentFactory","inj","Injector","create","providers","provide","useFactory","deps","parent","injector","compRef","instance","ProcInstId","fill","flowchartService","subscribe","version","modalService","show","MessagerService","ComponentFactoryResolver","BsModalService","FrameworkService","Object","defineProperty","_mode","v","ifForecast","modeButton","service","ngOnInit","addMessageListener","eventHandler","theme","viewFlowChartByProcInstId","processForecast","viewParent","viewChild","chartService","Error","id","modeSwitch","r","actInstList","activityInstanceSlims","transInsList","transitionInstanceSlims","postMessage","actiInstList","viewLogs","data","type","actDefId","actiDefId","content","forkJoin","processInstance","JSON","stringify","loadFlowChart","processForecastPayload","processDefinitionId","viewForm","formInfo","forEach","item","code","value","frameworkSvc","message","info","err","setTimeout","error","Message","action","iframe","nativeElement","contentWindow","fcHtml","cls","Component","args","selector","template","DomSanitizer","ChangeDetectorRef","decorators","Optional","HostBinding","ViewChild","Output","Input","sanitizer","changeDetector","modalHide","EventEmitter","document","location","origin","typeList","text","event","search","srcUrl","bypassSecurityTrustResourceUrl","TranslatePipe","transform","defaultVal","Pipe","UiFlowchartModule","NgModule","declarations","imports","LayoutModule","CommonModule","FarrisDialogModule","MessagerModule","forRoot","FarrisSectionModule","WfApprovalLogsModule","ComboListModule","ReactiveFormsModule","FormsModule","FDropdownDirectiveTypeModule","DatagridModule","NotifyModule","exports","entryComponents","ForecastProcessPayload"],"mappings":"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","sourcesContent":["export const en = {\r\n    static: {\r\n        approvalLogs: {\r\n            title: 'Approval Logs',\r\n            approvalOpinion: 'Approval opinion',\r\n            startTime: 'StartTime',\r\n            endTime: 'EndTime',\r\n            todo: 'Todo',\r\n            done: 'Done',\r\n            toAssign: 'To Assign'\r\n        },\r\n        flowchart: {\r\n            title: 'Flow Chart',\r\n            processNotFound: 'process instance id is null',\r\n            flowChart: 'Flow Chart',\r\n            complete: 'Hide Calculated Route',\r\n            simulation: 'Show Calculated Route',\r\n            sequenceColor: 'Description Of Sequence Color',\r\n            completed: 'Completed',\r\n            calculate: 'Calculate Route',\r\n            default: 'Default',\r\n            suspend: 'Calculate Suspend',\r\n            noProcess: 'Process definition not found!',\r\n            list: 'Process List',\r\n            noDataId: 'form id is null',\r\n            noBizDefKey: 'process category id is null'\r\n        }\r\n    }\r\n};\r\n","import { en } from './en';\r\nimport { zh_CHT } from './zh-cht';\r\nimport { zh_CHS } from './zh-chs';\r\n\r\nexport const translate = {\r\n    'zh-CHS': zh_CHS,\r\n    'en': en,\r\n    'zh-CHT': zh_CHT\r\n};\r\n","export const zh_CHS = {\r\n    static: {\r\n        approvalLogs: {\r\n            title: 'å®¡æ¹è®°å½',\r\n            approvalOpinion: 'å®¡æ¹æè§',\r\n            startTime: 'æ¥æ¶æ¶é´',\r\n            endTime: 'å¤çæ¶é´',\r\n            todo: 'å¾åç',\r\n            done: 'å·²åç',\r\n            toAssign: 'æªææ´¾'\r\n        },\r\n        flowchart: {\r\n            title: 'æ¥çæµç¨',\r\n            processNotFound: 'æµç¨å®ä¾IDä¸ºç©º',\r\n            dataIdIsNull: 'åæ®åç ä¸ºç©º',\r\n            flowChart: 'æµç¨å¾',\r\n            complete: 'éèè®¡ç®è·¯çº¿',\r\n            simulation: 'æ¾ç¤ºè®¡ç®è·¯çº¿',\r\n            sequenceColor: 'åæ¯çº¿é¢è²è¯´æ',\r\n            completed: 'å·²è¿è¡',\r\n            calculate: 'è®¡ç®è·¯çº¿',\r\n            default: 'é»è®¤',\r\n            suspend: 'è®¡ç®ä¸­æ­',\r\n            noProcess: 'æªæ¾å°ç¬¦åæ¡ä»¶çæµç¨å®ä¹ï¼',\r\n            list: 'æµç¨åè¡¨',\r\n            noDataId: 'åæ®åç ä¸ºç©º',\r\n            noBizDefKey: 'æµç¨åç±»IDä¸ºç©º'\r\n        }\r\n    }\r\n};\r\n","export const zh_CHT = {\r\n    static: {\r\n        approvalLogs: {\r\n            title: 'å¯©æ¹è¨é',\r\n            approvalOpinion: 'å¯©æ¹æè¦',\r\n            startTime: 'æ¥æ¶æé',\r\n            endTime: 'èçæé',\r\n            todo: 'å¾è¾¦ç',\r\n            done: 'å·²è¾¦ç',\r\n            toAssign: 'æªææ´¾'\r\n        },\r\n        flowchart: {\r\n            title: 'æ¥çæµç¨',\r\n            processNotFound: 'æµç¨å¯¦ä¾IDçºç©º',\r\n            dataIdIsNull: 'å®æå§ç¢¼çºç©º',\r\n            flowChart: 'æµç¨å',\r\n            complete: 'é±èè¨ç®è·¯ç·',\r\n            simulation: 'é¡¯ç¤ºè¨ç®è·¯ç·',\r\n            sequenceColor: 'åæ¯ç·é¡è²èªªæ',\r\n            completed: 'å·²éè¡',\r\n            calculate: 'è¨ç®è·¯ç·',\r\n            default: 'é»èª',\r\n            suspend: 'è¨ç®ä¸­æ·',\r\n            noProcess: 'æªæ¾å°ç¬¦åæ¢ä»¶çæµç¨å®ç¾©ï¼',\r\n            list: 'æµç¨åè¡¨',\r\n            noDataId: 'å®æå§ç¢¼çºç©º',\r\n            noBizDefKey: 'æµç¨åé¡IDçºç©º'\r\n        }\r\n    }\r\n};\r\n","import { Injectable } from '@angular/core';\r\nimport { Observable, from, of } from 'rxjs';\r\nimport { HttpService } from '@ecp-caf/caf-common';\r\nimport { translate } from './i18n/index';\r\nimport { ForecastProcessPayload } from '../entity/forecast-process-payload';\r\nimport { map } from 'rxjs/operators';\r\n\r\n@Injectable()\r\nexport class UiFlowchartService {\r\n\r\n  constructor(private httpSvc: HttpService) { }\r\n\r\n  getForecastProcessListByPayload(payload: ForecastProcessPayload): Observable<any> {\r\n    const url = '/api/runtime/wf/v1.0/processInstances/startProcess-simulation';\r\n    return this.httpSvc.post(url, payload).pipe(\r\n      map((re: any) => re.procDefs)\r\n    );\r\n  }\r\n\r\n  getRuntimeProcInstsByDataId(dataId: string): Observable<any> {\r\n    if (dataId) {\r\n      const url = `/api/runtime/wf/v1.0/processInstances/runtimeProcInstList?dataId=${dataId}`;\r\n      return this.httpSvc.get(url);\r\n    } else {\r\n      return from(new Array());\r\n    }\r\n  }\r\n\r\n  getHistoricProcInstsByDataId(dataId: string): Observable<any> {\r\n    if (dataId) {\r\n      const url = `/api/runtime/wf/v1.0/processInstances/historicProcInstList?dataId=${dataId}`;\r\n      return this.httpSvc.get(url);\r\n    } else {\r\n      return from(new Array());\r\n    }\r\n  }\r\n\r\n  /**\r\n   * åºäºæµç¨å®ä¾IDè·åæµç¨å®ä¾\r\n   * @param procInstId æµç¨å®ä¾id\r\n   */\r\n  getProcInstanceById(procInstId: string): Observable<any> {\r\n    const url = `/api/runtime/wf/v1.0/processInstances/${procInstId}`;\r\n    return this.httpSvc.get(url);\r\n  }\r\n  /**\r\n   * åºäºæµç¨å®ä¾IDè·åbpmnModel\r\n   */\r\n  getBpmnModelbyProcInstId(procInstId: string): Observable<any> {\r\n    const url = `/api/runtime/wf/v1.0/processInstances/${procInstId}/bpmnModel`;\r\n    return this.httpSvc.get(url);\r\n  }\r\n\r\n  /**\r\n   * åºäºæµç¨å®ä¹IDè·åbpmnModel\r\n   */\r\n  getBpmnModelbyProcDefId(procDefId: string): Observable<any> {\r\n    const url = `/api/runtime/wf/v1.0/procDefs/${procDefId}/bpmnModel`;\r\n    return this.httpSvc.get(url);\r\n  }\r\n\r\n  getSubProcessInstance(superActInstId: string, superProcInstId: string): Observable<any> {\r\n    if (superActInstId) {\r\n      const url = `/api/runtime/wf/v1.0/processInstances/subProcInst?superActInstId=${superActInstId}&superProcInstId=${superProcInstId}`;\r\n      return this.httpSvc.get(url);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * è·åææåå«é¢è§£æçæµç¨å®ä¾ä¿¡æ¯\r\n   */\r\n  getForecastProcessByProcInstId(procInstId: string): Observable<any> {\r\n    const url = `/api/runtime/wf/v1.0/processInstances/${procInstId}/forecastProcess`;\r\n    return this.httpSvc.get(url);\r\n  }\r\n\r\n  /**\r\n   * è·åæµç¨é¢æµæ°æ®\r\n   */\r\n  getForecastProcessByPayload(payload: any) {\r\n    const url = '/api/runtime/wf/v1.0/processInstances/forecastProcess';\r\n    return this.httpSvc.post(url, payload);\r\n  }\r\n\r\n  getCompleteProcessInfoByProcInstId(procInstId: string): Observable<any> {\r\n    const url = `/api/runtime/wf/v1.0/processInstances/${procInstId}/flowChartInfo`;\r\n    return this.httpSvc.get(url);\r\n  }\r\n\r\n  /**\r\n   * åºäºæµç¨å®ä¾Idè·åæææ´»å¨å®ä¾\r\n   * @param procInstId procInstId\r\n   */\r\n  getAllActiInstsbyProcInstId(procInstId: string): Observable<any> {\r\n    const url = `/api/runtime/wf/v1.0/processInstances/${procInstId}/activityInstanceSlims`;\r\n    return this.httpSvc.get(url);\r\n  }\r\n\r\n  /**\r\n   * åºäºæµç¨å®ä¾IDè·åææçæµè½¬å®ä¾\r\n   * @param procInstId procInstId\r\n   */\r\n  getTransitionInstanceSlimsByProcInstId(procInstId: string): Observable<any> {\r\n    const url = `/api/runtime/wf/v1.0/processInstances/${procInstId}/transitionInstanceSlims`;\r\n    return this.httpSvc.get(url);\r\n  }\r\n\r\n  getFormInfoByProcInstId(procInstId: string): Observable<any> {\r\n    const url = `/api/runtime/wf/v1.0/processInstances/${procInstId}/formInfo`;\r\n    return this.httpSvc.get(url);\r\n  }\r\n\r\n  getFormInfoByActInstId(procInstId: string, actInstId: string): Observable<any> {\r\n    let url = `/api/runtime/wf/v1.0/processInstances/${procInstId}/formInfo`;\r\n    if (actInstId) {\r\n      url += `?actInstId=${actInstId}`;\r\n    }\r\n    return this.httpSvc.get(url);\r\n  }\r\n\r\n  /**\r\n   * è·åå®¡æ¹æ¥å¿ä¿¡æ¯\r\n   * @param ProcInstId ProcInstId\r\n   * æ°æ¹é çæ¥å£\r\n   */\r\n  getWorkItemLogs(procInstId: string, activityDefinitionId?: string): Observable<any> {\r\n    const logUrl = activityDefinitionId ?\r\n      `/api/runtime/wf/v1.0/processInstances/${procInstId}/logs?activityDefinitionId=${activityDefinitionId}` :\r\n      `/api/runtime/wf/v1.0/processInstances/${procInstId}/logs`;\r\n    return this.httpSvc.get(logUrl);\r\n  }\r\n\r\n  getI18nValue(name: string) {\r\n    if (!name) { return ''; }\r\n    const defaultLang = localStorage.getItem('languageCode');\r\n    const langData = defaultLang ? translate[defaultLang] : translate['zh-CHS'];\r\n    let resultVal = '';\r\n    if (name.indexOf('.') === -1) {\r\n      resultVal = langData[name];\r\n    } else {\r\n      resultVal = name.split('.').reduce((obj, key) => {\r\n        if (obj) {\r\n          return obj[key];\r\n        } else {\r\n          return null;\r\n        }\r\n      }, langData);\r\n    }\r\n    return resultVal;\r\n  }\r\n\r\n  getProcessInstanceById(processId: string): Observable<any> {\r\n    const url = `/api/runtime/wf/v1.0/processInstances/${processId}`;\r\n    return this.httpSvc.get(url);\r\n  }\r\n\r\n  getProcInstIdByDataId(dataId: string): Observable<any> {\r\n    const url = `/api/runtime/wf/v1.0/processInstances/procInstId?bizInstId=${dataId}`;\r\n    return this.httpSvc.get(url);\r\n  }\r\n\r\n  retryAifCreation(procInstId: string, actInstId: string, bizInstId: string) {\r\n    return this.httpSvc.post(\"/api/runtime/wf/v1.0/aifactivityinstance/retry\", actInstId);\r\n  }\r\n}\r\n","import { Injectable, Injector, ComponentFactoryResolver } from '@angular/core';\r\nimport { MessagerService } from '@farris/ui-messager';\r\nimport { ModalOptions, BsModalService } from '@farris/ui-modal';\r\nimport { UIFlowchartComponent } from './task-flowchart/task-flowchart.component';\r\nimport { translate } from './services/i18n/index';\r\nimport { UiFlowchartService } from './services/ui-flowchart.service';\r\nimport { AppOptions, FrameworkService } from '@gsp-sys/rtf-common';\r\nimport { of } from 'rxjs';\r\nimport { HttpService } from '@ecp-caf/caf-common';\r\nimport { ForecastProcessPayload } from './entity/forecast-process-payload';\r\n\r\n\r\n@Injectable()\r\nexport class WFFlowchartService {\r\n\r\n    private flowchartService: UiFlowchartService;\r\n    private frameworkService: FrameworkService;\r\n\r\n    constructor(\r\n        private msgService: MessagerService,\r\n        private injector: Injector,\r\n        private resolver: ComponentFactoryResolver,\r\n        private modalService: BsModalService,\r\n    ) {\r\n        this.flowchartService = this.injector.get(UiFlowchartService);\r\n        this.frameworkService = this.injector.get(FrameworkService);\r\n    }\r\n\r\n    viewProcess(payload: ForecastProcessPayload) {\r\n        if (!payload || !payload.dataId) {\r\n            this.msgService.warning(this.getI18nValue('static.flowchart.noDataId'));\r\n            return;\r\n        }\r\n        if (!payload || !payload.bizDefKey) {\r\n            this.msgService.warning(this.getI18nValue('static.flowchart.noBizDefKey'));\r\n            return;\r\n        }\r\n        const parameters = new Map<string, any>();\r\n        parameters.set('dataId', payload.dataId);\r\n        parameters.set('bizDefKey', payload.bizDefKey);\r\n        if (payload.startMode) {\r\n            parameters.set('startMode', payload.startMode);\r\n        }\r\n        if (payload.startUserId) {\r\n            parameters.set('startUserId', payload.startUserId);\r\n        }\r\n        parameters.set('withTitle', true);\r\n        const options: AppOptions = {\r\n            appType: 'menu',\r\n            funcId: 'WFViewFlowChart',\r\n            appId: '',\r\n            appEntrance: '',\r\n            tabId: payload.dataId,\r\n            isNewTab: true,\r\n            queryStringParams: parameters\r\n        };\r\n        this.frameworkService.openMenu(options);\r\n    }\r\n\r\n    /**\r\n     * æ¥çæµç¨ï¼tabé¡µä¸­æå¼ï¼\r\n     * @param procInstId æµç¨å®ä¾ID\r\n     */\r\n    viewFlowChart(procInstId: string) {\r\n        if (!procInstId) {\r\n            this.msgService.warning(this.getI18nValue('static.flowchart.processNotFound'));\r\n            return;\r\n        }\r\n        const parameters = new Map<string, any>();\r\n        parameters.set('processId', procInstId);\r\n        parameters.set('withTitle', true);\r\n        const options: AppOptions = {\r\n            appType: 'menu',\r\n            funcId: 'WFViewFlowChart',\r\n            appId: '',\r\n            appEntrance: '',\r\n            tabId: new Date().getTime().toString(),\r\n            isNewTab: true,\r\n            queryStringParams: parameters\r\n        };\r\n        this.frameworkService.openMenu(options);\r\n    }\r\n\r\n    viewFlowChartByDataId(dataId: string) {\r\n        if (!dataId) {\r\n            this.msgService.warning(this.getI18nValue('static.flowchart.dataIdIsNull'));\r\n            return;\r\n        }\r\n        const parameters = new Map<string, any>();\r\n        parameters.set('dataId', dataId);\r\n        parameters.set('withTitle', true);\r\n        const options: AppOptions = {\r\n            appType: 'menu',\r\n            funcId: 'WFViewFlowChart',\r\n            appId: '',\r\n            appEntrance: '',\r\n            tabId: new Date().getTime().toString(),\r\n            isNewTab: true,\r\n            queryStringParams: parameters\r\n        };\r\n        this.frameworkService.openMenu(options);\r\n    }\r\n\r\n    /**\r\n     * æ¥çæµç¨ï¼å¼¹æ¡ä¸­æå¼ï¼\r\n     * @param procInstId æµç¨å®ä¾ID\r\n     */\r\n    viewFlowChartByDialog(procInstId: string, mode?: string) {\r\n        if (!procInstId) {\r\n            this.msgService.warning(this.getI18nValue('static.flowchart.processNotFound'));\r\n            return;\r\n        }\r\n        let func;\r\n        if (UIFlowchartComponent.func) {\r\n            func = UIFlowchartComponent.func;\r\n        }\r\n        const modalConfig: ModalOptions = {\r\n            title: this.getI18nValue('static.flowchart.title'),\r\n            width: 1200,\r\n            height: 530,\r\n            showButtons: false,\r\n            beforeClose: (modalRef: any) => {\r\n                if (UIFlowchartComponent.func) {\r\n                    window.removeEventListener('message', UIFlowchartComponent.func, false);\r\n                }\r\n                if (func) {\r\n                    window.addEventListener('message', func, false);\r\n                    UIFlowchartComponent.func = func;\r\n                }\r\n                return of(true);\r\n            }\r\n        };\r\n        const compFactory = this.resolver.resolveComponentFactory(UIFlowchartComponent);\r\n        const inj = Injector.create({\r\n            providers: [\r\n                {\r\n                    provide: UiFlowchartService, useFactory: (httpSvc) => {\r\n                        return new UiFlowchartService(httpSvc);\r\n                    },\r\n                    deps: [\r\n                        HttpService\r\n                    ]\r\n                }], parent: this.injector\r\n        });\r\n        const compRef = compFactory.create(inj);\r\n        compRef.instance.ProcInstId = procInstId;\r\n        if (mode) {\r\n            compRef.instance.mode = mode;\r\n        }\r\n        compRef.instance.fill();\r\n        this.flowchartService.getProcessInstanceById(procInstId).subscribe(re => {\r\n            modalConfig.title = re.name + '-v' + re.version + '.0';\r\n            const dialog = this.modalService.show(compRef, modalConfig);\r\n        })\r\n    }\r\n\r\n    private getI18nValue(name: string) {\r\n        if (!name) { return ''; }\r\n        var defaultLang = localStorage.getItem('languageCode');\r\n        var langData = defaultLang ? translate[defaultLang] : translate['zh-CHS'];\r\n        let resultVal = '';\r\n        if (name.indexOf('.') === -1) {\r\n            resultVal = langData[name];\r\n        } else {\r\n            resultVal = name.split('.').reduce((obj, key) => {\r\n                if (obj) {\r\n                    return obj[key];\r\n                } else {\r\n                    return null;\r\n                }\r\n            }, langData);\r\n        }\r\n        return resultVal;\r\n    }\r\n}\r\n","import {\r\n  Component, OnInit, ViewChild, ElementRef, Input, Output,\r\n  EventEmitter, HostBinding, ChangeDetectorRef, Optional, Injector\r\n} from '@angular/core';\r\nimport { DomSanitizer } from '@angular/platform-browser';\r\nimport { forkJoin } from 'rxjs';\r\nimport { UiFlowchartService } from '../services/ui-flowchart.service';\r\nimport { WFFlowchartService } from '../wf-flowchart.service';\r\nimport { MessagerService } from '@farris/ui-messager';\r\nimport { AppOptions, FrameworkService } from '@gsp-sys/rtf-common';\r\n\r\n@Component({\r\n  selector: 'wf-flowchart',\r\n  templateUrl: './task-flowchart.component.html',\r\n  styleUrls: ['./task-flowchart.component.css']\r\n})\r\n\r\nexport class UIFlowchartComponent implements OnInit {\r\n\r\n  static func: any = null; // æ¶æ¯çå¬å¤çæ¹æ³\r\n  @HostBinding('class') cls = 'd-flex flex-fill h-100';\r\n  @ViewChild('iframe') iframe: ElementRef;\r\n  @Output() modalHide = new EventEmitter<boolean>();\r\n  procInstId: string;//æµç¨å®ä¾id\r\n  dataId: string;//è¡¨åid\r\n  actDefId: string;//èç¹å®ä¹id\r\n  ifForecast: string;//æ¯å¦é¢æµ\r\n  type: any; //type = 'process'æ¥çæµç¨æ¥å¿ï¼type = 'activity'ï¼æ¥çèç¹æ¥å¿\r\n  srcUrl: any;\r\n  content: string; // bpmnModel\r\n  actInstList: any[]; // æ´»å¨å®ä¾List\r\n  transInsList: any[];  // æµè½¬å®ä¾\r\n  processInstance: any;\r\n  fcHtml = window.document.location.origin + '/platform/runtime/wf/web/designer/flowchart.html';\r\n\r\n  @Input()\r\n  theme = 'viewFlowChart';\r\n\r\n  @Input()\r\n  processForecastPayload: any;\r\n\r\n  private _mode = 'complete';\r\n\r\n  @Input()\r\n  set mode(v: string) {\r\n    this._mode = v;\r\n    if (this._mode === 'simulation') {\r\n      this.ifForecast = 'true';\r\n      this.modeButton = this.service.getI18nValue('static.flowchart.complete');\r\n    } else if (this._mode === 'complete') {\r\n      this.modeButton = this.service.getI18nValue('static.flowchart.simulation');\r\n    }\r\n  }\r\n  get mode() {\r\n    return this._mode;\r\n  }\r\n\r\n  modeButton = this.service.getI18nValue('static.flowchart.simulation');\r\n  typeList = [{\r\n    value: 'complete', text: this.service.getI18nValue('static.flowchart.complete')\r\n  },\r\n  {\r\n    value: 'simulation', text: this.service.getI18nValue('static.flowchart.simulation')\r\n  }];\r\n  private message: MessagerService;\r\n  private frameworkSvc: FrameworkService;\r\n\r\n  @Input()\r\n  set ProcInstId(procInstId: string) {\r\n    if (procInstId) {\r\n      this.procInstId = procInstId;\r\n    }\r\n  }\r\n\r\n  @Input()\r\n  set DataId(dataId: string) {\r\n    if (dataId) {\r\n      this.dataId = dataId;\r\n    }\r\n  }\r\n\r\n  constructor(\r\n    private sanitizer: DomSanitizer,\r\n    private service: UiFlowchartService,\r\n    private changeDetector: ChangeDetectorRef,\r\n    private injector: Injector,\r\n    @Optional() private chartService: WFFlowchartService,\r\n  ) {\r\n    this.message = this.injector.get(MessagerService);\r\n    this.frameworkSvc = this.injector.get(FrameworkService);\r\n    this.srcUrl = this.sanitizer.bypassSecurityTrustResourceUrl(this.fcHtml);\r\n    if (UIFlowchartComponent.func) {\r\n      window.removeEventListener('message', UIFlowchartComponent.func, false);\r\n    }\r\n    this.addMessageListener();\r\n\r\n  }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n  private addMessageListener() {\r\n    window.addEventListener('message', this.eventHandler, false);\r\n    UIFlowchartComponent.func = this.eventHandler;\r\n  }\r\n\r\n  // çå¬äºä»¶å¤ç\r\n  eventHandler = (event) => {\r\n    const origin = event.origin;\r\n    const message = event.data;\r\n    if (this.fcHtml.search(origin) > -1) {\r\n      switch (message.action) {\r\n        case 'load':\r\n          this.viewFlowChart();\r\n          break;\r\n        case 'viewLogs':\r\n          this.viewLogs(message.data);\r\n          break;\r\n        case 'viewParent':\r\n          this.viewParent(message.data.superProcInstId);\r\n          break;\r\n        case 'viewChild':\r\n          this.viewChild(message.data.superActInstId, message.data.superProcInstId);\r\n          break;\r\n        case 'viewForm':\r\n          this.viewForm(message.data.procInstId, message.data.actInstId, message.data.bizInstId);\r\n          break;\r\n        case 'retryAifCreation':\r\n          this.retryAifCreation(message.data.procInstId, message.data.actInstId, message.data.bizInstId);\r\n          break;\r\n        default:\r\n          break;\r\n      }\r\n    }\r\n  }\r\n\r\n  private viewFlowChart() {\r\n    if (this.theme === 'viewFlowChart') {\r\n      this.viewFlowChartByProcInstId();\r\n    } else {\r\n      this.processForecast();\r\n    }\r\n  }\r\n\r\n  private viewParent(superProcInstId: string) {\r\n    // this.procInstId = superProcInstId;\r\n    // this.viewFlowChartByProcInstId();\r\n  }\r\n\r\n  private viewChild(superActInstId: string, superProcInstId: string) {\r\n    this.service.getSubProcessInstance(superActInstId, superProcInstId)\r\n      .subscribe(re => {\r\n        if (this.chartService) {\r\n          this.chartService.viewFlowChartByDialog(re.id, this.mode);\r\n        } else {\r\n          throw Error('è¯·åçº§æ¥çæµç¨å¬å±åå®ç°èæ¥å­æµç¨å¾åè½');\r\n        }\r\n      });\r\n  }\r\n\r\n  modeSwitch() {\r\n    if (this.mode === 'complete') {\r\n      this.mode = 'simulation';\r\n      this.ifForecast = 'true';\r\n      this.modeButton = this.service.getI18nValue('static.flowchart.complete');\r\n      this.service.getForecastProcessByProcInstId(this.procInstId).subscribe(r => {\r\n        this.actInstList = r.activityInstanceSlims;\r\n        this.transInsList = r.transitionInstanceSlims;\r\n        this.postMessage('modeSwitch', {\r\n          mode: 'simulation',\r\n          actiInstList: r.activityInstanceSlims,\r\n          transInsList: r.transitionInstanceSlims\r\n        });\r\n      });\r\n    } else {\r\n      this.mode = 'complete';\r\n      this.ifForecast = 'false';\r\n      this.modeButton = this.service.getI18nValue('static.flowchart.simulation');\r\n      this.service.getCompleteProcessInfoByProcInstId(this.procInstId).subscribe(r => {\r\n        this.actInstList = r.activityInstanceSlims;\r\n        this.transInsList = r.transitionInstanceSlims;\r\n        this.postMessage('modeSwitch', {\r\n          mode: 'complete',\r\n          actiInstList: r.activityInstanceSlims,\r\n          transInsList: r.transitionInstanceSlims\r\n        });\r\n      });\r\n    }\r\n  }\r\n\r\n  private viewLogs(data: any) {\r\n    this.type = data.type;\r\n    this.actDefId = data.actiDefId;\r\n  }\r\n\r\n  private viewFlowChartByProcInstId() {\r\n    this.content = '';\r\n    if (this.procInstId) {\r\n      if (this.mode === 'complete') {\r\n        forkJoin(\r\n          this.service.getProcInstanceById(this.procInstId),\r\n          this.service.getBpmnModelbyProcInstId(this.procInstId),\r\n          this.service.getCompleteProcessInfoByProcInstId(this.procInstId))\r\n          .subscribe((data: any[]) => {\r\n            this.processInstance = data[0];\r\n            this.content = JSON.stringify(data[1]);\r\n            this.actInstList = data[2].activityInstanceSlims;\r\n            this.transInsList = data[2].transitionInstanceSlims;\r\n            this.loadFlowChart();\r\n          });\r\n      } else {\r\n        forkJoin(\r\n          this.service.getProcInstanceById(this.procInstId),\r\n          this.service.getBpmnModelbyProcInstId(this.procInstId),\r\n          this.service.getForecastProcessByProcInstId(this.procInstId))\r\n          .subscribe((data: any[]) => {\r\n            this.processInstance = data[0];\r\n            this.content = JSON.stringify(data[1]);\r\n            this.actInstList = data[2].activityInstanceSlims;\r\n            this.transInsList = data[2].transitionInstanceSlims;\r\n            this.loadFlowChart();\r\n          });\r\n      }\r\n    }\r\n  }\r\n\r\n  private processForecast() {\r\n    this.content = '';\r\n    this.mode = 'simulation';\r\n    // this.ifForecast = true;\r\n    if (this.processForecastPayload.processDefinitionId && this.processForecastPayload.dataId) {\r\n      forkJoin(\r\n        this.service.getBpmnModelbyProcDefId(this.processForecastPayload.processDefinitionId),\r\n        this.service.getForecastProcessByPayload(this.processForecastPayload))\r\n        .subscribe((data: any[]) => {\r\n          this.content = JSON.stringify(data[0]);\r\n          this.actInstList = data[1].activityInstanceSlims;\r\n          this.transInsList = data[1].transitionInstanceSlims;\r\n          this.loadFlowChart();\r\n        });\r\n    }\r\n  }\r\n\r\n  private viewForm(procInstId: string, actInstId: string, bizInstId: string) {\r\n    if (procInstId) {\r\n      this.service.getFormInfoByActInstId(procInstId, actInstId).subscribe((re: any) => {\r\n        const formInfo = re;\r\n        if (!formInfo || !formInfo.appId) {\r\n          if (this.message) {\r\n            this.message.info('æ¾ä¸å°åæ®ï¼è¯·èç³»ç®¡çåæ¥çåå ï¼');\r\n          }\r\n          return;\r\n        }\r\n        const options: AppOptions = {\r\n          appType: 'menu',\r\n          funcId: formInfo.appId,\r\n          appId: '',\r\n          appEntrance: '',\r\n          tabId: bizInstId,\r\n          isNewTab: true\r\n        };\r\n        // ä¼ å·¥ä½æµä¸ä¸æåæ°\r\n        const parameters = new Map<string, any>();\r\n        parameters.set('procInstId', procInstId);\r\n        parameters.set('actInstId', actInstId);\r\n        formInfo.parameters.forEach((item: any) =>\r\n          parameters.set(item.code, item.value)\r\n        );\r\n        options.queryStringParams = parameters;\r\n        if (this.frameworkSvc) {\r\n          this.frameworkSvc.openMenu(options);\r\n        } else {\r\n          throw Error('æ¡æ¶æå¡ä¸å­å¨ï¼æ æ³èæ¥ï¼');\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  private retryAifCreation(procInstId: string, actInstId: string, bizInstId: string) {\r\n    if (procInstId) {\r\n      this.service.retryAifCreation(procInstId, actInstId, bizInstId).subscribe(\r\n        (re: any) => {\r\n          this.viewFlowChart();\r\n        },\r\n        (err) => {\r\n          setTimeout(() => {\r\n            //todo ç¡®å®å¼å¸¸ç»æ, ç®åéç¨å¼å®¹åå¼æ¹å¼\r\n            this.message.error(err.error == null ? err.message : (err.error.Message || err.error.message || err.message));\r\n          }, 300);\r\n          throw err;\r\n        }\r\n      );\r\n    }\r\n  }\r\n\r\n  public loadFlowChart() {\r\n    if (this.content) {\r\n      this.postMessage('load', {\r\n        processInstance: this.processInstance,\r\n        content: this.content,\r\n        actiInstList: this.actInstList,\r\n        transInsList: this.transInsList,\r\n        mode: this.mode\r\n      });\r\n    }\r\n  }\r\n\r\n  postMessage(action: string, data: any) {\r\n    const message = { action, data };\r\n    this.iframe.nativeElement.contentWindow.postMessage(message, this.fcHtml);\r\n  }\r\n\r\n  fill() {\r\n    this.cls = 'd-flex flex-fill h-100 f-utils-absolute-all';\r\n  }\r\n\r\n}\r\n","import { Pipe, PipeTransform } from '@angular/core';\r\nimport { UiFlowchartService } from './ui-flowchart.service'\r\n\r\n@Pipe({ name: 'translate' })\r\nexport class TranslatePipe implements PipeTransform {\r\n\r\n    constructor(\r\n        private service: UiFlowchartService\r\n    ) { }\r\n\r\n    transform(name: any, defaultVal = ''): any {\r\n        const r = this.service.getI18nValue(name);\r\n        return r ? r : defaultVal;\r\n    }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { UIFlowchartComponent } from './task-flowchart/task-flowchart.component';\r\nimport { CommonModule } from '@angular/common';\r\nimport { HttpService } from '@ecp-caf/caf-common';\r\nimport { UiFlowchartService } from './services/ui-flowchart.service';\r\nimport { WFFlowchartService } from './wf-flowchart.service';\r\nimport { MessagerModule } from '@farris/ui-messager';\r\nimport { FarrisDialogModule } from '@farris/ui-dialog';\r\nimport { TranslatePipe } from './services/translate.pipe';\r\nimport { LayoutModule } from '@farris/ui-layout';\r\nimport { FarrisSectionModule } from '@farris/ui-section';\r\nimport { WfApprovalLogsModule } from '@gsp-wf/wf-approval-logs';\r\nimport { ComboListModule } from '@farris/ui-combo-list';\r\nimport { ReactiveFormsModule, FormsModule } from '@angular/forms';\r\nimport { FDropdownDirectiveTypeModule } from '@farris/ui-dropdown';\r\nimport { DatagridModule } from '@farris/ui-datagrid';\r\nimport { NotifyModule } from '@farris/ui-notify';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    UIFlowchartComponent,\r\n    TranslatePipe],\r\n  imports: [\r\n    LayoutModule,\r\n    CommonModule,\r\n    FarrisDialogModule,\r\n    MessagerModule.forRoot({\r\n      width: 500\r\n    }),\r\n    FarrisSectionModule,\r\n    WfApprovalLogsModule,\r\n    ComboListModule,\r\n    ReactiveFormsModule,\r\n    FormsModule,\r\n    FDropdownDirectiveTypeModule,\r\n    DatagridModule,\r\n    NotifyModule\r\n  ],\r\n  exports: [UIFlowchartComponent],\r\n  providers: [\r\n    HttpService,\r\n    UiFlowchartService,\r\n    WFFlowchartService,\r\n  ],\r\n  entryComponents: [\r\n    UIFlowchartComponent\r\n  ]\r\n})\r\nexport class UiFlowchartModule { }\r\n","export class ForecastProcessPayload {\r\n\r\n    bizDefKey: string;\r\n\r\n    dataId: string;\r\n\r\n    startMode: string;\r\n\r\n    startUserId: string;\r\n}\r\n"]}