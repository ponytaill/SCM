/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { HttpService } from '@ecp-caf/caf-common';
import { map } from 'rxjs/operators';
import { FrameworkService, AppService } from '@gsp-sys/rtf-common';
import { BifMonitorConstant } from '../entity/BifMonitorConstant';
import { RtBillProcessListResult } from '../entity/RtBillProcessListResult';
import { RtShowEntity } from '../entity/RtShowEntity';
export class ProcessListHelpService {
    /**
     * @param {?} appService
     * @param {?} frameworkService
     * @param {?} httpService
     */
    constructor(appService, frameworkService, httpService) {
        this.appService = appService;
        this.frameworkService = frameworkService;
        this.httpService = httpService;
        this.baseUrl = "/api/runtime/aif/v1.0/rtbillprocess";
    }
    /**
     * @param {?} entity
     * @return {?}
     */
    openBifManagerApp(entity) {
        /** @type {?} */
        const map = new Map();
        map.set("id", entity.id);
        map.set("type", entity.bifMetadataType);
        map.set("srcFuncId", BifMonitorConstant.bifDiagnostorFuncId);
        /** @type {?} */
        const opt = {
            funcId: BifMonitorConstant.bifManagerFuncId,
            appId: BifMonitorConstant.bifMonitorAppId,
            appEntrance: BifMonitorConstant.bifManagerAppEntrance,
            appType: "menu",
            entityParams: {},
            queryStringParams: map,
            tabId: entity.id,
            tabName: entity.name
        };
        this.frameworkService.openMenu(opt);
    }
    /**
     * @param {?} args
     * @return {?}
     */
    getDatagridData(args) {
        /** @type {?} */
        const body = args.ConvertToJson();
        /** @type {?} */
        let data$ = null;
        //有业务种类参数时不分页
        if (args.bizType != null) {
            data$ = this.httpService.post(`${this.baseUrl}/getpatch`, body);
            return data$.pipe(map((/**
             * @param {?} res
             * @return {?}
             */
            (res) => {
                /** @type {?} */
                const listRes = new RtBillProcessListResult();
                listRes.entities = res.map((/**
                 * @param {?} elt
                 * @return {?}
                 */
                elt => {
                    /** @type {?} */
                    const e = new RtShowEntity();
                    e.LoadFromJsonObject(elt);
                    return e;
                }));
                return listRes;
            })));
        }
        else {
            data$ = this.httpService.post(`${this.baseUrl}/getpagedpatch`, body);
            return data$.pipe(map((/**
             * @param {?} res
             * @return {?}
             */
            (res) => {
                /** @type {?} */
                const listRes = new RtBillProcessListResult();
                listRes.LoadFromJsonObject(res);
                return listRes;
            })));
        }
    }
}
ProcessListHelpService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
ProcessListHelpService.ctorParameters = () => [
    { type: AppService },
    { type: FrameworkService },
    { type: HttpService }
];
if (false) {
    /**
     * @type {?}
     * @private
     */
    ProcessListHelpService.prototype.baseUrl;
    /**
     * @type {?}
     * @private
     */
    ProcessListHelpService.prototype.appService;
    /**
     * @type {?}
     * @private
     */
    ProcessListHelpService.prototype.frameworkService;
    /**
     * @type {?}
     * @private
     */
    ProcessListHelpService.prototype.httpService;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvY2Vzcy1saXN0LWhlbHAuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0Bnc3Atd2Yvd2YtcHJvY2Vzcy1lZGl0b3IvIiwic291cmNlcyI6WyJsaWIvYWlmLXByb2Nlc3MtbGlzdC1oZWxwL3NlcnZpY2VzL3Byb2Nlc3MtbGlzdC1oZWxwLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBRWxELE9BQU8sRUFBRSxHQUFHLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUNyQyxPQUFPLEVBQWMsZ0JBQWdCLEVBQUUsVUFBVSxFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFFL0UsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0sOEJBQThCLENBQUM7QUFFbEUsT0FBTyxFQUFFLHVCQUF1QixFQUFFLE1BQU0sbUNBQW1DLENBQUM7QUFDNUUsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLHdCQUF3QixDQUFDO0FBR3RELE1BQU0sT0FBTyxzQkFBc0I7Ozs7OztJQUcvQixZQUNZLFVBQXNCLEVBQ3RCLGdCQUFrQyxFQUNsQyxXQUF3QjtRQUZ4QixlQUFVLEdBQVYsVUFBVSxDQUFZO1FBQ3RCLHFCQUFnQixHQUFoQixnQkFBZ0IsQ0FBa0I7UUFDbEMsZ0JBQVcsR0FBWCxXQUFXLENBQWE7UUFMbkIsWUFBTyxHQUFHLHFDQUFxQyxDQUFDO0lBT2pFLENBQUM7Ozs7O0lBRU0saUJBQWlCLENBQUMsTUFBcUI7O2NBQ3BDLEdBQUcsR0FBRyxJQUFJLEdBQUcsRUFBRTtRQUNyQixHQUFHLENBQUMsR0FBRyxDQUFDLElBQUksRUFBRSxNQUFNLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDekIsR0FBRyxDQUFDLEdBQUcsQ0FBQyxNQUFNLEVBQUUsTUFBTSxDQUFDLGVBQWUsQ0FBQyxDQUFDO1FBQ3hDLEdBQUcsQ0FBQyxHQUFHLENBQUMsV0FBVyxFQUFFLGtCQUFrQixDQUFDLG1CQUFtQixDQUFDLENBQUM7O2NBQ3ZELEdBQUcsR0FBZTtZQUNwQixNQUFNLEVBQUUsa0JBQWtCLENBQUMsZ0JBQWdCO1lBQzNDLEtBQUssRUFBRSxrQkFBa0IsQ0FBQyxlQUFlO1lBQ3pDLFdBQVcsRUFBRSxrQkFBa0IsQ0FBQyxxQkFBcUI7WUFDckQsT0FBTyxFQUFFLE1BQU07WUFDZixZQUFZLEVBQUUsRUFBRTtZQUNoQixpQkFBaUIsRUFBRSxHQUFHO1lBQ3RCLEtBQUssRUFBRSxNQUFNLENBQUMsRUFBRTtZQUNoQixPQUFPLEVBQUUsTUFBTSxDQUFDLElBQUk7U0FDdkI7UUFDRCxJQUFJLENBQUMsZ0JBQWdCLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQ3hDLENBQUM7Ozs7O0lBRU0sZUFBZSxDQUFDLElBQWdDOztjQUM3QyxJQUFJLEdBQUcsSUFBSSxDQUFDLGFBQWEsRUFBRTs7WUFDN0IsS0FBSyxHQUFvQixJQUFJO1FBQ2pDLGFBQWE7UUFDYixJQUFJLElBQUksQ0FBQyxPQUFPLElBQUksSUFBSSxFQUFFO1lBQ3RCLEtBQUssR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxHQUFHLElBQUksQ0FBQyxPQUFPLFdBQVcsRUFBRSxJQUFJLENBQUMsQ0FBQztZQUNoRSxPQUFPLEtBQUssQ0FBQyxJQUFJLENBQ2IsR0FBRzs7OztZQUNDLENBQUMsR0FBUSxFQUFFLEVBQUU7O3NCQUNILE9BQU8sR0FBRyxJQUFJLHVCQUF1QixFQUFFO2dCQUM3QyxPQUFPLENBQUMsUUFBUSxHQUFHLEdBQUcsQ0FBQyxHQUFHOzs7O2dCQUFDLEdBQUcsQ0FBQyxFQUFFOzswQkFDdkIsQ0FBQyxHQUFHLElBQUksWUFBWSxFQUFFO29CQUM1QixDQUFDLENBQUMsa0JBQWtCLENBQUMsR0FBRyxDQUFDLENBQUM7b0JBQzFCLE9BQU8sQ0FBQyxDQUFDO2dCQUNiLENBQUMsRUFBQyxDQUFDO2dCQUNILE9BQU8sT0FBTyxDQUFDO1lBQ25CLENBQUMsRUFDSixDQUNKLENBQUM7U0FDTDthQUFNO1lBQ0gsS0FBSyxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLEdBQUcsSUFBSSxDQUFDLE9BQU8sZ0JBQWdCLEVBQUUsSUFBSSxDQUFDLENBQUM7WUFDckUsT0FBTyxLQUFLLENBQUMsSUFBSSxDQUNiLEdBQUc7Ozs7WUFDQyxDQUFDLEdBQVEsRUFBRSxFQUFFOztzQkFDSCxPQUFPLEdBQUcsSUFBSSx1QkFBdUIsRUFBRTtnQkFDN0MsT0FBTyxDQUFDLGtCQUFrQixDQUFDLEdBQUcsQ0FBQyxDQUFDO2dCQUNoQyxPQUFPLE9BQU8sQ0FBQztZQUNuQixDQUFDLEVBQ0osQ0FDSixDQUFDO1NBQ0w7SUFDTCxDQUFDOzs7WUE1REosVUFBVTs7OztZQVA0QixVQUFVO1lBQTVCLGdCQUFnQjtZQUg1QixXQUFXOzs7Ozs7O0lBWWhCLHlDQUFpRTs7Ozs7SUFHN0QsNENBQThCOzs7OztJQUM5QixrREFBMEM7Ozs7O0lBQzFDLDZDQUFnQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgSHR0cFNlcnZpY2UgfSBmcm9tICdAZWNwLWNhZi9jYWYtY29tbW9uJztcclxuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xyXG5pbXBvcnQgeyBtYXAgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XHJcbmltcG9ydCB7IEFwcE9wdGlvbnMsIEZyYW1ld29ya1NlcnZpY2UsIEFwcFNlcnZpY2UgfSBmcm9tICdAZ3NwLXN5cy9ydGYtY29tbW9uJztcclxuaW1wb3J0IHsgSVJ0U2hvd0VudGl0eSB9IGZyb20gJy4uL2VudGl0eS9JUnRTaG93RW50aXR5JztcclxuaW1wb3J0IHsgQmlmTW9uaXRvckNvbnN0YW50IH0gZnJvbSAnLi4vZW50aXR5L0JpZk1vbml0b3JDb25zdGFudCc7XHJcbmltcG9ydCB7IFByb2Nlc3NGaWx0ZXJDb25kaXRpb25BcmdzIH0gZnJvbSAnLi4vZW50aXR5L1Byb2Nlc3NGaWx0ZXJDb25kaXRpb25BcmdzJztcclxuaW1wb3J0IHsgUnRCaWxsUHJvY2Vzc0xpc3RSZXN1bHQgfSBmcm9tICcuLi9lbnRpdHkvUnRCaWxsUHJvY2Vzc0xpc3RSZXN1bHQnO1xyXG5pbXBvcnQgeyBSdFNob3dFbnRpdHkgfSBmcm9tICcuLi9lbnRpdHkvUnRTaG93RW50aXR5JztcclxuXHJcbkBJbmplY3RhYmxlKClcclxuZXhwb3J0IGNsYXNzIFByb2Nlc3NMaXN0SGVscFNlcnZpY2Uge1xyXG4gICAgcHJpdmF0ZSByZWFkb25seSBiYXNlVXJsID0gXCIvYXBpL3J1bnRpbWUvYWlmL3YxLjAvcnRiaWxscHJvY2Vzc1wiO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKFxyXG4gICAgICAgIHByaXZhdGUgYXBwU2VydmljZTogQXBwU2VydmljZSxcclxuICAgICAgICBwcml2YXRlIGZyYW1ld29ya1NlcnZpY2U6IEZyYW1ld29ya1NlcnZpY2UsXHJcbiAgICAgICAgcHJpdmF0ZSBodHRwU2VydmljZTogSHR0cFNlcnZpY2UsXHJcbiAgICApIHtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgb3BlbkJpZk1hbmFnZXJBcHAoZW50aXR5OiBJUnRTaG93RW50aXR5KSB7XHJcbiAgICAgICAgY29uc3QgbWFwID0gbmV3IE1hcCgpO1xyXG4gICAgICAgIG1hcC5zZXQoXCJpZFwiLCBlbnRpdHkuaWQpO1xyXG4gICAgICAgIG1hcC5zZXQoXCJ0eXBlXCIsIGVudGl0eS5iaWZNZXRhZGF0YVR5cGUpO1xyXG4gICAgICAgIG1hcC5zZXQoXCJzcmNGdW5jSWRcIiwgQmlmTW9uaXRvckNvbnN0YW50LmJpZkRpYWdub3N0b3JGdW5jSWQpO1xyXG4gICAgICAgIGNvbnN0IG9wdDogQXBwT3B0aW9ucyA9IHtcclxuICAgICAgICAgICAgZnVuY0lkOiBCaWZNb25pdG9yQ29uc3RhbnQuYmlmTWFuYWdlckZ1bmNJZCxcclxuICAgICAgICAgICAgYXBwSWQ6IEJpZk1vbml0b3JDb25zdGFudC5iaWZNb25pdG9yQXBwSWQsXHJcbiAgICAgICAgICAgIGFwcEVudHJhbmNlOiBCaWZNb25pdG9yQ29uc3RhbnQuYmlmTWFuYWdlckFwcEVudHJhbmNlLFxyXG4gICAgICAgICAgICBhcHBUeXBlOiBcIm1lbnVcIixcclxuICAgICAgICAgICAgZW50aXR5UGFyYW1zOiB7fSxcclxuICAgICAgICAgICAgcXVlcnlTdHJpbmdQYXJhbXM6IG1hcCxcclxuICAgICAgICAgICAgdGFiSWQ6IGVudGl0eS5pZCxcclxuICAgICAgICAgICAgdGFiTmFtZTogZW50aXR5Lm5hbWVcclxuICAgICAgICB9O1xyXG4gICAgICAgIHRoaXMuZnJhbWV3b3JrU2VydmljZS5vcGVuTWVudShvcHQpO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBnZXREYXRhZ3JpZERhdGEoYXJnczogUHJvY2Vzc0ZpbHRlckNvbmRpdGlvbkFyZ3MpOiBPYnNlcnZhYmxlPFJ0QmlsbFByb2Nlc3NMaXN0UmVzdWx0PiB7XHJcbiAgICAgICAgY29uc3QgYm9keSA9IGFyZ3MuQ29udmVydFRvSnNvbigpO1xyXG4gICAgICAgIGxldCBkYXRhJDogT2JzZXJ2YWJsZTxhbnk+ID0gbnVsbDtcclxuICAgICAgICAvL+acieS4muWKoeenjeexu+WPguaVsOaXtuS4jeWIhumhtVxyXG4gICAgICAgIGlmIChhcmdzLmJpelR5cGUgIT0gbnVsbCkge1xyXG4gICAgICAgICAgICBkYXRhJCA9IHRoaXMuaHR0cFNlcnZpY2UucG9zdChgJHt0aGlzLmJhc2VVcmx9L2dldHBhdGNoYCwgYm9keSk7XHJcbiAgICAgICAgICAgIHJldHVybiBkYXRhJC5waXBlKFxyXG4gICAgICAgICAgICAgICAgbWFwKFxyXG4gICAgICAgICAgICAgICAgICAgIChyZXM6IGFueSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBsaXN0UmVzID0gbmV3IFJ0QmlsbFByb2Nlc3NMaXN0UmVzdWx0KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxpc3RSZXMuZW50aXRpZXMgPSByZXMubWFwKGVsdCA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBlID0gbmV3IFJ0U2hvd0VudGl0eSgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZS5Mb2FkRnJvbUpzb25PYmplY3QoZWx0KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGxpc3RSZXM7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgKVxyXG4gICAgICAgICAgICApO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGRhdGEkID0gdGhpcy5odHRwU2VydmljZS5wb3N0KGAke3RoaXMuYmFzZVVybH0vZ2V0cGFnZWRwYXRjaGAsIGJvZHkpO1xyXG4gICAgICAgICAgICByZXR1cm4gZGF0YSQucGlwZShcclxuICAgICAgICAgICAgICAgIG1hcChcclxuICAgICAgICAgICAgICAgICAgICAocmVzOiBhbnkpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgbGlzdFJlcyA9IG5ldyBSdEJpbGxQcm9jZXNzTGlzdFJlc3VsdCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBsaXN0UmVzLkxvYWRGcm9tSnNvbk9iamVjdChyZXMpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbGlzdFJlcztcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICApXHJcbiAgICAgICAgICAgICk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59Il19