/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Component, ViewChild, TemplateRef, EventEmitter, Inject, LOCALE_ID, Output, Input } from '@angular/core';
import { ProcessListHelpService } from '../../services/process-list-help.service';
import { MessagerService } from '@farris/ui-messager';
import { NotifyService } from '@farris/ui-notify';
import { BsModalService } from '@farris/ui-modal';
import { FrameworkService } from '@gsp-sys/rtf-common';
import { Router, ActivatedRoute } from '@angular/router';
import { LoadingService } from '@farris/ui-loading';
import { of } from 'rxjs';
import { switchMap, catchError } from 'rxjs/operators';
import { BifMetadataType } from '../../entity/BifMetadataType';
import { ProcessFilterConditionArgs } from '../../entity/ProcessFilterConditionArgs';
import { TextValue } from '@edp-bif/common-api';
import { OrderByDirection } from '../../entity/OrderByDirection';
import { DatagridComponent } from '@farris/ui-datagrid';
import { AifLocalePipe } from '../../../aif-ui-common/pipe/aif-ui-common-locale.pipe';
var ProcessListHelpComponent = /** @class */ (function () {
    function ProcessListHelpComponent(procHelpService, messager, notify, modalService, frameworkService, router, activatedRoute, loading, localeId, localePipe) {
        var _this = this;
        this.procHelpService = procHelpService;
        this.messager = messager;
        this.notify = notify;
        this.modalService = modalService;
        this.frameworkService = frameworkService;
        this.router = router;
        this.activatedRoute = activatedRoute;
        this.loading = loading;
        this.localePipe = localePipe;
        this.closeModal = new EventEmitter();
        this.submitModal = new EventEmitter();
        this.editorParams = {};
        this.modalConfig = {
            title: '生单流程选择',
            width: 1250,
            height: 500,
            showButtons: true
        };
        this.procEmitter = new EventEmitter();
        this.ttIdField = "id";
        this.ttData = [];
        this.ttColumns = [];
        this.cascadeCheck = false;
        this.cascadeDown = false;
        this.cascadeUp = false;
        this.defaultPageSize = 30;
        this.pageList = [this.defaultPageSize, 50, 100, 200, 500];
        /**
         * 列排序前事件
         */
        this.beforeSortColumn = (/**
         * @param {?} field
         * @param {?} order
         * @return {?}
         */
        function (field, order) {
            /** @type {?} */
            var cols = field.split(",");
            /** @type {?} */
            var orders = order.split(",");
            //重置排序条件
            _this.queryParam.filterArgs.orderByCode = null;
            _this.queryParam.filterArgs.orderByName = null;
            _this.queryParam.filterArgs.OrderByLastModifiedTime = null;
            //依次添加排序条件
            for (var i = 0; i < cols.length; i++) {
                /** @type {?} */
                var orderBy = null;
                if (orders[i] == "asc") {
                    orderBy = new TextValue();
                    orderBy.hasValue = true;
                    orderBy.value = OrderByDirection.Asc;
                }
                else if (orders[i] == "desc") {
                    orderBy = new TextValue();
                    orderBy.hasValue = true;
                    orderBy.value = OrderByDirection.Desc;
                }
                if (cols[i] == "code") {
                    _this.queryParam.filterArgs.orderByCode = orderBy;
                }
                else if (cols[i] == "name") {
                    _this.queryParam.filterArgs.orderByName = orderBy;
                }
                else if (cols[i] == "lastModifiedTime") {
                    _this.queryParam.filterArgs.OrderByLastModifiedTime = orderBy;
                }
            }
            return _this.loadItems(_this.queryParam.filterArgs);
        });
        this.queryParam = this.createDefaultQueryParam();
    }
    Object.defineProperty(ProcessListHelpComponent.prototype, "value", {
        set: /**
         * @param {?} data
         * @return {?}
         */
        function (data) {
            if (data) {
                this.processCode = data;
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    ProcessListHelpComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.configTtColumns();
        if (this.editorParams && this.editorParams.bizTypeId) {
            this.queryParam.filterArgs.bizType = new TextValue();
            this.queryParam.filterArgs.bizType.value = this.editorParams.bizTypeId;
            this.queryParam.filterArgs.bizType.hasValue = true;
        }
        this.loadItems(this.queryParam.filterArgs).subscribe((/**
         * @return {?}
         */
        function () {
            setTimeout((/**
             * @return {?}
             */
            function () {
                if (_this.ttData && _this.ttData.length > 0) {
                    /** @type {?} */
                    var proc = _this.processCode != null ? _this.ttData.find((/**
                     * @param {?} it
                     * @return {?}
                     */
                    function (it) { return it.code == _this.processCode; })) : _this.ttData[0];
                    proc && _this.tt.selectRow(proc.id);
                }
            }), 300);
        }));
    };
    /**
     * @param {?=} evt
     * @return {?}
     */
    ProcessListHelpComponent.prototype.clickOk = /**
     * @param {?=} evt
     * @return {?}
     */
    function (evt) {
        if (this.tt.selectedRow == null) {
            this.notify.warning(this.localePipe.transform("pleaseSelectOneItemOnly"));
            return;
        }
        this.procEmitter.emit(this.tt.selectedRow.data);
        /** @type {?} */
        var object = { value: this.tt.selectedRow.data.code, parameters: null };
        this.submitModal.emit(object);
        this.modalRef && this.modalRef.close();
    };
    /**
     * @param {?=} evt
     * @return {?}
     */
    ProcessListHelpComponent.prototype.clickCancel = /**
     * @param {?=} evt
     * @return {?}
     */
    function (evt) {
        this.procEmitter.complete();
        this.closeModal.emit();
        this.modalRef && this.modalRef.close();
    };
    /**
     * @param {?} param
     * @return {?}
     */
    ProcessListHelpComponent.prototype.onSearch = /**
     * @param {?} param
     * @return {?}
     */
    function (param) {
        var _this = this;
        this.queryParam = param;
        console.log(this.queryParam);
        this.loadItems(this.queryParam.filterArgs).subscribe((/**
         * @return {?}
         */
        function () {
            _this.tt.clearCheckeds();
            _this.tt.clearSelections();
        }));
    };
    /**
     * @param {?} ctx
     * @return {?}
     */
    ProcessListHelpComponent.prototype.clickNameCell = /**
     * @param {?} ctx
     * @return {?}
     */
    function (ctx) {
        this.procHelpService.openBifManagerApp(ctx.rowData);
    };
    /**
     * 列排序后事件
     */
    /**
     * 列排序后事件
     * @param {?} val
     * @return {?}
     */
    ProcessListHelpComponent.prototype.columnSorted = /**
     * 列排序后事件
     * @param {?} val
     * @return {?}
     */
    function (val) {
        console.log(val);
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    ProcessListHelpComponent.prototype.onPageSizeChanged = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        var _this = this;
        console.log('PageSize Changed:', $event);
        /** @type {?} */
        var checkedIds = this.tt.checkeds.map((/**
         * @param {?} r
         * @return {?}
         */
        function (r) { return r.data.id; }));
        this.queryParam.filterArgs.pageSize = $event.pageSize;
        this.loadItems(this.queryParam.filterArgs).subscribe((/**
         * @return {?}
         */
        function () {
            setTimeout((/**
             * @return {?}
             */
            function () {
                _this.tt.checkRows(checkedIds);
            }), 0);
        }));
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    ProcessListHelpComponent.prototype.onPageChanged = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        var _this = this;
        console.log('PageNumber Changed:', $event);
        /** @type {?} */
        var checkedIds = this.tt.checkeds.map((/**
         * @param {?} r
         * @return {?}
         */
        function (r) { return r.data.id; }));
        this.queryParam.filterArgs.pageIndex = $event.pageIndex - 1;
        this.queryParam.filterArgs.pageSize = $event.pageSize;
        this.loadItems(this.queryParam.filterArgs).subscribe((/**
         * @return {?}
         */
        function () {
            setTimeout((/**
             * @return {?}
             */
            function () {
                _this.tt.checkRows(checkedIds);
            }), 0);
        }));
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    ProcessListHelpComponent.prototype.pageChangeHandler = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        console.log($event);
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    ProcessListHelpComponent.prototype.pageSizeChangeHandler = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        console.log($event);
    };
    /**
     * @private
     * @param {?} args
     * @return {?}
     */
    ProcessListHelpComponent.prototype.loadItems = /**
     * @private
     * @param {?} args
     * @return {?}
     */
    function (args) {
        var _this = this;
        /** @type {?} */
        var loadingComp = this.loading.show({ message: this.localePipe.transform("loading") });
        return this.procHelpService.getDatagridData(args).pipe(switchMap((/**
         * @param {?} listRes
         * @return {?}
         */
        function (listRes) {
            _this.ttData = tslib_1.__spread(listRes.entities);
            //更新分页信息
            _this.tt.setPageIndex(listRes.pageIndex + 1);
            _this.tt.total = listRes.totalCount;
            _this.tt.pageSize = listRes.pageSize;
            // this.page.setCurrentPage(this.paginationId, listRes.pageIndex + 1);
            // this.page.setItemsPerPage(this.paginationId, listRes.pageSize);
            // this.page.setTotalItems(this.paginationId, listRes.totalCount);
            loadingComp.close();
            return of(listRes);
        })), catchError((/**
         * @param {?} err
         * @return {?}
         */
        function (err) {
            loadingComp.close();
            setTimeout((/**
             * @return {?}
             */
            function () {
                //todo 确定异常结构, 目前采用兼容取值方式
                _this.messager.error(err.error == null ? err.message : (err.error.Message || err.error.message || err.message));
            }), 300);
            throw err;
        })));
    };
    /**
     * @private
     * @return {?}
     */
    ProcessListHelpComponent.prototype.configTtColumns = /**
     * @private
     * @return {?}
     */
    function () {
        this.ttColumns = [
            // {
            //   field: "isEnabled", title: this.localePipe.transform("enabledState"), width: 100, sortable: false,
            //   formatter: (value: boolean, rowData, rowIndex) => {
            //     if (value == true) {
            //       return this.localePipe.transform("enabled");
            //     } else if (value == false) {
            //       return this.localePipe.transform("disabled");
            //     } else {
            //       return "-";
            //     }
            //   }
            // },
            { field: "code", title: this.localePipe.transform("code"), width: 120, sortable: true },
            {
                field: "name", title: this.localePipe.transform("name"), width: 250, sortable: true,
                template: this.nameCellTemp,
            },
            { field: "upBillVoName", title: this.localePipe.transform("upBill"), width: 120, sortable: true },
            { field: "downBillVoName", title: this.localePipe.transform("downBill"), width: 120, sortable: true },
        ];
    };
    /**
     * @private
     * @return {?}
     */
    ProcessListHelpComponent.prototype.createDefaultQueryParam = /**
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var queryParam = {
            filterArgs: new ProcessFilterConditionArgs(),
            filterArgsExt: {}
        };
        queryParam.filterArgs.pageSize = this.defaultPageSize;
        queryParam.filterArgs.pageIndex = 0;
        queryParam.filterArgs.OrderByLastModifiedTime = new TextValue();
        queryParam.filterArgs.OrderByLastModifiedTime.value = OrderByDirection.Desc;
        queryParam.filterArgs.OrderByLastModifiedTime.hasValue = true;
        queryParam.filterArgs.billProcessType = new TextValue();
        queryParam.filterArgs.billProcessType.value = BifMetadataType.BifCreationProcess;
        queryParam.filterArgs.billProcessType.hasValue = true;
        queryParam.filterArgs.isEnabled = new TextValue();
        queryParam.filterArgs.isEnabled.value = "true";
        queryParam.filterArgs.isEnabled.hasValue = true;
        return queryParam;
    };
    ProcessListHelpComponent.decorators = [
        { type: Component, args: [{
                    selector: 'app-process-list-help',
                    template: "<div class=\"f-page f-page-is-managelist\" id=\"bif-manager-list\">\r\n  <!-- <app-proc-help-query-solution id=\"query-solution\" #querySolution [(queryParam)]=\"queryParam\"\r\n    (onSearch)=\"onSearch($event)\">\r\n  </app-proc-help-query-solution> -->\r\n\r\n  <div class=\"f-page-main\" id=\"page-main\">\r\n    <div class=\"f-utils-fill-flex-column\">\r\n      <farris-datagrid id=\"tt\" #tt [data]=\"ttData\" [columns]=\"ttColumns\" [idField]=\"ttIdField\" [multiSelect]=\"true\"\r\n        [showCheckbox]=\"false\" [showAllCheckbox]=\"false\" [onlySelectSelf]=\"true\" [keepSelect]=\"true\"\r\n        [selectOnCheck]=\"true\" [checkOnSelect]=\"false\" [showHeader]=\"true\" [fit]=\"true\" [fitColumns]=\"true\"\r\n        [pagination]=\"true\" [showPageList]=\"true\" [pageSize]=\"defaultPageSize\" [pageList]=\"pageList\"\r\n        (pageChanged)=\"onPageChanged($event)\" (pageSizeChanged)=\"onPageSizeChanged($event)\" [remoteSort]=\"true\"\r\n        [multiSort]=\"false\" [beforeSortColumn]=\"beforeSortColumn\" (columnSorted)=\"columnSorted($event)\">\r\n      </farris-datagrid>\r\n    </div>\r\n  </div>\r\n</div>\r\n\r\n<ng-template #nameCellTemp let-ctx>\r\n  <a href=\"javascript: void(0);\" (click)=\"clickNameCell(ctx)\">{{ctx?.rowData?.name}}</a>\r\n</ng-template>\r\n\r\n<ng-template #iconSelectFooter>\r\n  <button type=\"button\" class=\"btn btn-primary btn-sm px-3 mx-2\" (click)=\"clickOk()\">\u786E\u5B9A</button>\r\n  <button type=\"button\" class=\"btn btn-secondary btn-sm px-3 mx-2\" (click)=\"clickCancel()\">\u53D6\u6D88</button>\r\n</ng-template>\r\n",
                    styles: [""]
                }] }
    ];
    /** @nocollapse */
    ProcessListHelpComponent.ctorParameters = function () { return [
        { type: ProcessListHelpService },
        { type: MessagerService },
        { type: NotifyService },
        { type: BsModalService },
        { type: FrameworkService },
        { type: Router },
        { type: ActivatedRoute },
        { type: LoadingService },
        { type: String, decorators: [{ type: Inject, args: [LOCALE_ID,] }] },
        { type: AifLocalePipe }
    ]; };
    ProcessListHelpComponent.propDecorators = {
        closeModal: [{ type: Output }],
        submitModal: [{ type: Output }],
        value: [{ type: Input }],
        editorParams: [{ type: Input }],
        tt: [{ type: ViewChild, args: ["tt",] }],
        nameCellTemp: [{ type: ViewChild, args: ['nameCellTemp',] }],
        modalFooter: [{ type: ViewChild, args: ['iconSelectFooter',] }]
    };
    return ProcessListHelpComponent;
}());
export { ProcessListHelpComponent };
if (false) {
    /** @type {?} */
    ProcessListHelpComponent.prototype.closeModal;
    /** @type {?} */
    ProcessListHelpComponent.prototype.submitModal;
    /** @type {?} */
    ProcessListHelpComponent.prototype.editorParams;
    /**
     * @type {?}
     * @private
     */
    ProcessListHelpComponent.prototype.processCode;
    /** @type {?} */
    ProcessListHelpComponent.prototype.modalConfig;
    /** @type {?} */
    ProcessListHelpComponent.prototype.procEmitter;
    /** @type {?} */
    ProcessListHelpComponent.prototype.queryParam;
    /** @type {?} */
    ProcessListHelpComponent.prototype.tt;
    /** @type {?} */
    ProcessListHelpComponent.prototype.ttIdField;
    /** @type {?} */
    ProcessListHelpComponent.prototype.ttData;
    /** @type {?} */
    ProcessListHelpComponent.prototype.ttColumns;
    /** @type {?} */
    ProcessListHelpComponent.prototype.cascadeCheck;
    /** @type {?} */
    ProcessListHelpComponent.prototype.cascadeDown;
    /** @type {?} */
    ProcessListHelpComponent.prototype.cascadeUp;
    /** @type {?} */
    ProcessListHelpComponent.prototype.nameCellTemp;
    /** @type {?} */
    ProcessListHelpComponent.prototype.modalFooter;
    /** @type {?} */
    ProcessListHelpComponent.prototype.modalRef;
    /** @type {?} */
    ProcessListHelpComponent.prototype.defaultPageSize;
    /** @type {?} */
    ProcessListHelpComponent.prototype.pageList;
    /**
     * 列排序前事件
     * @type {?}
     */
    ProcessListHelpComponent.prototype.beforeSortColumn;
    /**
     * @type {?}
     * @private
     */
    ProcessListHelpComponent.prototype.procHelpService;
    /**
     * @type {?}
     * @private
     */
    ProcessListHelpComponent.prototype.messager;
    /**
     * @type {?}
     * @private
     */
    ProcessListHelpComponent.prototype.notify;
    /**
     * @type {?}
     * @private
     */
    ProcessListHelpComponent.prototype.modalService;
    /**
     * @type {?}
     * @private
     */
    ProcessListHelpComponent.prototype.frameworkService;
    /**
     * @type {?}
     * @private
     */
    ProcessListHelpComponent.prototype.router;
    /**
     * @type {?}
     * @private
     */
    ProcessListHelpComponent.prototype.activatedRoute;
    /**
     * @type {?}
     * @private
     */
    ProcessListHelpComponent.prototype.loading;
    /**
     * @type {?}
     * @private
     */
    ProcessListHelpComponent.prototype.localePipe;
}
//# sourceMappingURL=data:application/json;base64,