/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
export const en = {
    static: {
        assignee: {
            title: 'Select Operator',
            noAssignee: 'Please select at least one approver.',
            successAssign: 'Operate successfully.',
        },
        transfer: {
            title: 'Select transfer person',
            selectHandover: 'Please select transfer persons.',
            successTransfer: 'Transfer successfully.'
        },
        comment: {
            successComment: 'Comment success.'
        },
        columnName: {
            name: 'Name',
            code: 'Code',
            department: 'Department',
        },
        title: 'Approval confirmation',
        inputLabel: 'Approval comments',
        inputHolder: 'Please enter an approval opinion',
        selectActivity: 'Please select approve note',
        addSignee: 'Add signee',
        footOk: 'OK',
        footCancel: 'Cancel',
        selectUser: 'Select User',
        hideComment: 'Hide comment',
    },
    cueWords: {
        successClaim: 'Claim successfully.',
        successUnClaim: 'Cancel to claim successfully.',
        successRetrieve: 'Retrieve successfully.',
        successPass: 'Approved successfully.',
        successBack: 'Dismissed successfully.',
        successRefuse: 'Veto successfully.',
        success: 'Operate successfully.',
        inputOpinion: 'Please input your opinion',
        selectNode: 'Please select target nodes',
        select: 'Please select',
        processor: 'processor',
        attachmentsRequired: 'Please upload the attachment',
        assignUser: 'Assign user'
    },
    task: {
        selectPlaceholder: 'Please select',
        passComment: 'Pass',
        processAlone: 'Please handle it separately',
        urgeText: 'Receiver',
        backNodeText: 'Back node',
        selectProcessor: 'Please select the user',
        notFoundBill: 'This document cannot be processed on the computer. Please try to process it on the mobile terminal',
        nextNodeText: 'Next node',
        assignText: 'Assign to',
        noUser: 'No one',
        title: 'Handle Task',
        noTask: 'There is no task.',
        commentTooLong: 'Comment is too long',
        activityName: 'processor',
        receiver: 'receiver',
        urgeComment: "Please input your comment",
        noUrgeUsers: "There is no user to urge handle",
        noUrgeSubject: "no urge subject",
        noUrgeContent: "no urge content",
        person: " people",
        addSign: "Add sign",
    },
    startProcess: {
        selectProcess: 'Please select process',
        title: 'Select process',
        selectNode: 'Please select next node',
        submitSuccess: 'Start process successfully',
        submitFailed: 'Start process failed',
        cancelSubmitSuccess: 'Cancel submit successfully',
        cancelSubmitFailed: 'Cancel submit failed',
        dataIdIsNull: 'Please select a data',
        dataIdIsEmpty: 'Please select a data',
        bizDefKeyIsNull: 'Biz definition key is null',
        success: 'Success',
        row: '',
        failed: ', failed',
        node: 'node, ',
        noUser: 'no suitable handler was found'
    },
    batchSubmit: {
        row: '',
        success: 'Success',
        error: 'Error',
        failed: 'Failed',
        validationFailed: 'Signature verification failed',
        single: 'Failed tasks please process it singly'
    },
    batchStartProcess: {
        row: '<br/>',
        success: 'Success',
        error: 'Error',
        failed: 'Failed',
        single: 'Failed tasks please process it singly'
    },
    comment: {
        static: {
            title: 'Approval comments',
            add: 'Add',
            delete: 'Delete',
            save: 'Save',
            cancel: 'Cancel',
            content: 'Content',
            order: 'Order',
            inputLabel: 'Comments',
            manage: 'Comments management',
            attachmentUpload: 'Attachment',
            repeatFile: 'Contains repeat files:',
            type: 'Type',
            operate: 'Operate',
            confirm: 'Confirm',
            clickToAdd: 'Click to add',
            public: 'public',
            private: 'private',
            messageSubject: 'message subject',
            messageContent: 'message content'
        },
        attachment: {
            tips: 'click to upload attachments'
        },
        signature: {
            title: 'Signature',
            reset: 'Reset',
            ok: 'OK',
            sign: 'Sign, ',
            upload: 'Upload',
            tips: 'click to sign or upload a picture',
            dialogTitle: 'Signature',
            note1: '',
            note2: 'or',
            note3: '',
            disable: 'disable signature'
        }
    },
    addSign: {
        allowSignToSign: 'Allow',
        multiInstanceType: 'Multi instance type',
        parallel: 'parallel',
        preempt: 'preempt',
        sequential: 'sequential'
    },
    backWardConfig: {
        allowResubmitToThisNode: ',resubmit to this node'
    }
};
//# sourceMappingURL=data:application/json;base64,