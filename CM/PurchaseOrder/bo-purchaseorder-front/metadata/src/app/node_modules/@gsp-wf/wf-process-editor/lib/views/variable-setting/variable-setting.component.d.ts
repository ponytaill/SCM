import { OnInit, EventEmitter, TemplateRef, Injector, ComponentFactoryResolver } from '@angular/core';
import { DatagridComponent } from '@farris/ui-datagrid';
import { MessagerService } from '@farris/ui-messager';
import { TypeConverter } from '@farris/ui-property-panel';
import { BsModalService } from '@farris/ui-modal';
import { ProcessDesignerUIState } from '../../app/process-designer.uistate';
import { VariableSetting } from './variable-setting';
import { ExpressionService } from '@gsp-svc/expression';
import { RowEditParam } from '@farris/ui-datagrid/lib/types';
export declare class VariableSettingComponent implements OnInit {
    private resolver;
    private injector;
    private modalService;
    private message;
    private uistate;
    private expr;
    cls: string;
    closeModal: EventEmitter<any>;
    submitModal: EventEmitter<any>;
    value: Array<VariableSetting>;
    editorParams: any;
    modalFooter: TemplateRef<any>;
    grid: DatagridComponent;
    cell: TemplateRef<any>;
    columns: any[];
    private tags;
    private opportunities;
    modalConfig: {
        title: string;
        width: number;
        height: number;
        showButtons: boolean;
    };
    constructor(resolver: ComponentFactoryResolver, injector: Injector, modalService: BsModalService, message: MessagerService, uistate: ProcessDesignerUIState, expr: ExpressionService);
    ngOnInit(): void;
    add(): void;
    delete(): void;
    clickOK(): void;
    clickCancel(): void;
    validator(): boolean;
    beforeEdit: (param: RowEditParam) => import("rxjs").Observable<boolean>;
    endEdit(data: any): void;
    valueEdit(e: any): void;
    private editExpression;
    private editComponent;
}
export declare class VariableSettingConverter implements TypeConverter {
    constructor();
    convertTo(data: any[]): string;
}
