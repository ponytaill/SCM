/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { ProcessDesignerUIState } from './process-designer.uistate';
import { ResourceKeys } from '../model/resourceKeys';
import { EntryFormEditorComponent, FlowFormConverter } from '../views/entryForm/entry-form-editor.component';
import { ActivityComponentComponent, ActivityComponentConverter } from '../views/activity-component/activity-component.component';
import { ExecuteFormsComponent, ExecuteFormsConverter } from '../views/execute-forms/execute-forms.component';
import { TitleExpressionComponent, TitleExpressionConverter } from '../views/title-expression/title-expression.component';
import { CustomizeActionComponent, CustomizeActionConverter } from '../views/customize-action/customize-action.component';
import { ProcessVariablesComponent, ProcessVariablesConverter } from '../views/process-variables/process-variables.component';
import { TimeLimitControlComponent, TimeLimitControlConverter } from '../views/time-limit-control/time-limit-control.component';
import { MessageNoticeComponent, MessageNoticeConverter } from '../views/message-notice/message-notice.component';
import { ExtendPropertyComponent, ExtendPropertyConverter } from '../views/extend-property/extend-property.component';
export class BpmnProcessViewModel {
    /**
     * @param {?} uiState
     */
    constructor(uiState) {
        this.uiState = uiState;
    }
    /**
     * @param {?} obj
     * @return {?}
     */
    setProcessProperty(obj) {
        // if (obj.propertyData.EntryForm) {
        //     obj.propertyData.EntryForm = this.uiState.flowFormInfo.flowForm;
        // }
        this.uiState.propertyData = obj.propertyData;
        this.uiState.ProcessVariables = this.uiState.propertyData[ResourceKeys.processVariables];
        this.uiState.propertyConfig = this.setProcessConfig(obj.propertyConfig);
    }
    /**
     * @param {?} obj
     * @return {?}
     */
    setProcessConfig(obj) {
        /** @type {?} */
        const propertyConfig = [];
        if (obj) {
            obj.forEach((/**
             * @param {?} element
             * @return {?}
             */
            (element) => {
                this.setProcessEntity(element.properties);
                propertyConfig.push(element);
            }));
        }
        return propertyConfig;
    }
    /**
     * @private
     * @param {?} obj
     * @return {?}
     */
    setProcessEntity(obj) {
        if (obj.length > 0) {
            obj.forEach((/**
             * @param {?} item
             * @return {?}
             */
            (item) => {
                switch (item.propertyID) {
                    case ResourceKeys.EntryForm: // 流程分类
                        item.editor = EntryFormEditorComponent;
                        item.converter = new FlowFormConverter();
                        // item.editorParams = {
                        //     flowForms: [this.uiState.flowFormInfo.flowForm]
                        // };
                        break;
                    case ResourceKeys.wf_Component:
                        item.editor = ActivityComponentComponent;
                        item.converter = new ActivityComponentConverter();
                        item.editorParams = {
                            location: 'process'
                        };
                        break;
                    case ResourceKeys.wf_ExecuteForms_PC:
                        item.editor = ExecuteFormsComponent;
                        item.converter = new ExecuteFormsConverter();
                        item.editorParams = {
                            location: 'process',
                            tab: 'web'
                        };
                        break;
                    case ResourceKeys.wf_ExecuteForms_Mobile:
                        item.editor = ExecuteFormsComponent;
                        item.converter = new ExecuteFormsConverter();
                        item.editorParams = {
                            location: 'process',
                            tab: 'mobile'
                        };
                        break;
                    case ResourceKeys.wf_TitleExpression:
                        item.editor = TitleExpressionComponent;
                        item.converter = new TitleExpressionConverter();
                        break;
                    case ResourceKeys.allowPreAssign:
                        item.iterator = this.uiState.boolIterator;
                        break;
                    case ResourceKeys.startMode:
                        item.iterator = this.uiState.startModeIterator;
                        break;
                    case ResourceKeys.DisplayTerminal:
                        item.iterator = this.uiState.displayTerminal;
                        break;
                    case ResourceKeys.wf_CustomizeAction:
                        item.editor = CustomizeActionComponent;
                        item.converter = new CustomizeActionConverter();
                        break;
                    case ResourceKeys.processVariables:
                        item.editor = ProcessVariablesComponent;
                        item.converter = new ProcessVariablesConverter();
                        break;
                    case ResourceKeys.timeLimitControl:
                        item.editor = TimeLimitControlComponent;
                        item.converter = new TimeLimitControlConverter();
                        item.editorParams = {
                            location: 'process'
                        };
                        break;
                    case ResourceKeys.messageNotice:
                        item.editor = MessageNoticeComponent;
                        item.converter = new MessageNoticeConverter();
                        item.editorParams = {
                            location: 'process'
                        };
                        break;
                    default:
                        item.editor = ExtendPropertyComponent;
                        item.converter = new ExtendPropertyConverter();
                        break;
                }
            }));
        }
    }
}
BpmnProcessViewModel.decorators = [
    { type: Injectable }
];
/** @nocollapse */
BpmnProcessViewModel.ctorParameters = () => [
    { type: ProcessDesignerUIState }
];
if (false) {
    /**
     * @type {?}
     * @private
     */
    BpmnProcessViewModel.prototype.uiState;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnBtbi1wcm9jZXNzLnZpZXdtb2RlbC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0Bnc3Atd2Yvd2YtcHJvY2Vzcy1lZGl0b3IvIiwic291cmNlcyI6WyJsaWIvYXBwL2JwbW4tcHJvY2Vzcy52aWV3bW9kZWwudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyxFQUFFLHNCQUFzQixFQUFFLE1BQU0sNEJBQTRCLENBQUM7QUFFcEUsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLHVCQUF1QixDQUFDO0FBQ3JELE9BQU8sRUFBRSx3QkFBd0IsRUFBRSxpQkFBaUIsRUFBRSxNQUFNLGdEQUFnRCxDQUFDO0FBQzdHLE9BQU8sRUFDTCwwQkFBMEIsRUFDMUIsMEJBQTBCLEVBQzNCLE1BQU0sMERBQTBELENBQUM7QUFDbEUsT0FBTyxFQUFFLHFCQUFxQixFQUFFLHFCQUFxQixFQUFFLE1BQU0sZ0RBQWdELENBQUM7QUFDOUcsT0FBTyxFQUFFLHdCQUF3QixFQUFFLHdCQUF3QixFQUFFLE1BQU0sc0RBQXNELENBQUM7QUFDMUgsT0FBTyxFQUFFLHdCQUF3QixFQUFFLHdCQUF3QixFQUFFLE1BQU0sc0RBQXNELENBQUM7QUFDMUgsT0FBTyxFQUNMLHlCQUF5QixFQUN6Qix5QkFBeUIsRUFDMUIsTUFBTSx3REFBd0QsQ0FBQztBQUNoRSxPQUFPLEVBQ0wseUJBQXlCLEVBQ3pCLHlCQUF5QixFQUMxQixNQUFNLDBEQUEwRCxDQUFDO0FBQ2xFLE9BQU8sRUFBRSxzQkFBc0IsRUFBRSxzQkFBc0IsRUFBRSxNQUFNLGtEQUFrRCxDQUFDO0FBQ2xILE9BQU8sRUFBRSx1QkFBdUIsRUFBRSx1QkFBdUIsRUFBRSxNQUFNLG9EQUFvRCxDQUFDO0FBSXRILE1BQU0sT0FBTyxvQkFBb0I7Ozs7SUFDL0IsWUFBb0IsT0FBK0I7UUFBL0IsWUFBTyxHQUFQLE9BQU8sQ0FBd0I7SUFFbkQsQ0FBQzs7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OztZQXZHRixVQUFVOzs7O1lBdEJGLHNCQUFzQjs7Ozs7OztJQXlCakIsdUNBQXVDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBQcm9jZXNzRGVzaWduZXJVSVN0YXRlIH0gZnJvbSAnLi9wcm9jZXNzLWRlc2lnbmVyLnVpc3RhdGUnO1xyXG5pbXBvcnQgeyBQcm9wZXJ0eUVudGl0eSwgRWxlbWVudFByb3BlcnR5Q29uZmlnIH0gZnJvbSAnQGZhcnJpcy91aS1wcm9wZXJ0eS1wYW5lbCc7XHJcbmltcG9ydCB7IFJlc291cmNlS2V5cyB9IGZyb20gJy4uL21vZGVsL3Jlc291cmNlS2V5cyc7XHJcbmltcG9ydCB7IEVudHJ5Rm9ybUVkaXRvckNvbXBvbmVudCwgRmxvd0Zvcm1Db252ZXJ0ZXIgfSBmcm9tICcuLi92aWV3cy9lbnRyeUZvcm0vZW50cnktZm9ybS1lZGl0b3IuY29tcG9uZW50JztcclxuaW1wb3J0IHtcclxuICBBY3Rpdml0eUNvbXBvbmVudENvbXBvbmVudCxcclxuICBBY3Rpdml0eUNvbXBvbmVudENvbnZlcnRlclxyXG59IGZyb20gJy4uL3ZpZXdzL2FjdGl2aXR5LWNvbXBvbmVudC9hY3Rpdml0eS1jb21wb25lbnQuY29tcG9uZW50JztcclxuaW1wb3J0IHsgRXhlY3V0ZUZvcm1zQ29tcG9uZW50LCBFeGVjdXRlRm9ybXNDb252ZXJ0ZXIgfSBmcm9tICcuLi92aWV3cy9leGVjdXRlLWZvcm1zL2V4ZWN1dGUtZm9ybXMuY29tcG9uZW50JztcclxuaW1wb3J0IHsgVGl0bGVFeHByZXNzaW9uQ29tcG9uZW50LCBUaXRsZUV4cHJlc3Npb25Db252ZXJ0ZXIgfSBmcm9tICcuLi92aWV3cy90aXRsZS1leHByZXNzaW9uL3RpdGxlLWV4cHJlc3Npb24uY29tcG9uZW50JztcclxuaW1wb3J0IHsgQ3VzdG9taXplQWN0aW9uQ29tcG9uZW50LCBDdXN0b21pemVBY3Rpb25Db252ZXJ0ZXIgfSBmcm9tICcuLi92aWV3cy9jdXN0b21pemUtYWN0aW9uL2N1c3RvbWl6ZS1hY3Rpb24uY29tcG9uZW50JztcclxuaW1wb3J0IHtcclxuICBQcm9jZXNzVmFyaWFibGVzQ29tcG9uZW50LFxyXG4gIFByb2Nlc3NWYXJpYWJsZXNDb252ZXJ0ZXJcclxufSBmcm9tICcuLi92aWV3cy9wcm9jZXNzLXZhcmlhYmxlcy9wcm9jZXNzLXZhcmlhYmxlcy5jb21wb25lbnQnO1xyXG5pbXBvcnQge1xyXG4gIFRpbWVMaW1pdENvbnRyb2xDb21wb25lbnQsXHJcbiAgVGltZUxpbWl0Q29udHJvbENvbnZlcnRlclxyXG59IGZyb20gJy4uL3ZpZXdzL3RpbWUtbGltaXQtY29udHJvbC90aW1lLWxpbWl0LWNvbnRyb2wuY29tcG9uZW50JztcclxuaW1wb3J0IHsgTWVzc2FnZU5vdGljZUNvbXBvbmVudCwgTWVzc2FnZU5vdGljZUNvbnZlcnRlciB9IGZyb20gJy4uL3ZpZXdzL21lc3NhZ2Utbm90aWNlL21lc3NhZ2Utbm90aWNlLmNvbXBvbmVudCc7XHJcbmltcG9ydCB7IEV4dGVuZFByb3BlcnR5Q29tcG9uZW50LCBFeHRlbmRQcm9wZXJ0eUNvbnZlcnRlciB9IGZyb20gJy4uL3ZpZXdzL2V4dGVuZC1wcm9wZXJ0eS9leHRlbmQtcHJvcGVydHkuY29tcG9uZW50JztcclxuXHJcbkBJbmplY3RhYmxlKClcclxuXHJcbmV4cG9ydCBjbGFzcyBCcG1uUHJvY2Vzc1ZpZXdNb2RlbCB7XHJcbiAgY29uc3RydWN0b3IocHJpdmF0ZSB1aVN0YXRlOiBQcm9jZXNzRGVzaWduZXJVSVN0YXRlKSB7XHJcblxyXG4gIH1cclxuXHJcbiAgc2V0UHJvY2Vzc1Byb3BlcnR5KG9iajogYW55KSB7XHJcbiAgICAvLyBpZiAob2JqLnByb3BlcnR5RGF0YS5FbnRyeUZvcm0pIHtcclxuICAgIC8vICAgICBvYmoucHJvcGVydHlEYXRhLkVudHJ5Rm9ybSA9IHRoaXMudWlTdGF0ZS5mbG93Rm9ybUluZm8uZmxvd0Zvcm07XHJcbiAgICAvLyB9XHJcbiAgICB0aGlzLnVpU3RhdGUucHJvcGVydHlEYXRhID0gb2JqLnByb3BlcnR5RGF0YTtcclxuICAgIHRoaXMudWlTdGF0ZS5Qcm9jZXNzVmFyaWFibGVzID0gdGhpcy51aVN0YXRlLnByb3BlcnR5RGF0YVtSZXNvdXJjZUtleXMucHJvY2Vzc1ZhcmlhYmxlc107XHJcbiAgICB0aGlzLnVpU3RhdGUucHJvcGVydHlDb25maWcgPSB0aGlzLnNldFByb2Nlc3NDb25maWcob2JqLnByb3BlcnR5Q29uZmlnKTtcclxuICB9XHJcblxyXG4gIHNldFByb2Nlc3NDb25maWcob2JqOiBhbnlbXSk6IEVsZW1lbnRQcm9wZXJ0eUNvbmZpZ1tdIHtcclxuICAgIGNvbnN0IHByb3BlcnR5Q29uZmlnOiBFbGVtZW50UHJvcGVydHlDb25maWdbXSA9IFtdO1xyXG4gICAgaWYgKG9iaikge1xyXG4gICAgICBvYmouZm9yRWFjaCgoZWxlbWVudDogRWxlbWVudFByb3BlcnR5Q29uZmlnKSA9PiB7XHJcbiAgICAgICAgdGhpcy5zZXRQcm9jZXNzRW50aXR5KGVsZW1lbnQucHJvcGVydGllcyk7XHJcbiAgICAgICAgcHJvcGVydHlDb25maWcucHVzaChlbGVtZW50KTtcclxuICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gcHJvcGVydHlDb25maWc7XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIHNldFByb2Nlc3NFbnRpdHkob2JqOiBQcm9wZXJ0eUVudGl0eVtdKSB7XHJcbiAgICBpZiAob2JqLmxlbmd0aCA+IDApIHtcclxuICAgICAgb2JqLmZvckVhY2goKGl0ZW06IFByb3BlcnR5RW50aXR5KSA9PiB7XHJcbiAgICAgICAgc3dpdGNoIChpdGVtLnByb3BlcnR5SUQpIHtcclxuICAgICAgICAgIGNhc2UgUmVzb3VyY2VLZXlzLkVudHJ5Rm9ybTogLy8g5rWB56iL5YiG57G7XHJcbiAgICAgICAgICAgIGl0ZW0uZWRpdG9yID0gRW50cnlGb3JtRWRpdG9yQ29tcG9uZW50O1xyXG4gICAgICAgICAgICBpdGVtLmNvbnZlcnRlciA9IG5ldyBGbG93Rm9ybUNvbnZlcnRlcigpO1xyXG4gICAgICAgICAgICAvLyBpdGVtLmVkaXRvclBhcmFtcyA9IHtcclxuICAgICAgICAgICAgLy8gICAgIGZsb3dGb3JtczogW3RoaXMudWlTdGF0ZS5mbG93Rm9ybUluZm8uZmxvd0Zvcm1dXHJcbiAgICAgICAgICAgIC8vIH07XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgY2FzZSBSZXNvdXJjZUtleXMud2ZfQ29tcG9uZW50OlxyXG4gICAgICAgICAgICBpdGVtLmVkaXRvciA9IEFjdGl2aXR5Q29tcG9uZW50Q29tcG9uZW50O1xyXG4gICAgICAgICAgICBpdGVtLmNvbnZlcnRlciA9IG5ldyBBY3Rpdml0eUNvbXBvbmVudENvbnZlcnRlcigpO1xyXG4gICAgICAgICAgICBpdGVtLmVkaXRvclBhcmFtcyA9IHtcclxuICAgICAgICAgICAgICBsb2NhdGlvbjogJ3Byb2Nlc3MnXHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgY2FzZSBSZXNvdXJjZUtleXMud2ZfRXhlY3V0ZUZvcm1zX1BDOlxyXG4gICAgICAgICAgICBpdGVtLmVkaXRvciA9IEV4ZWN1dGVGb3Jtc0NvbXBvbmVudDtcclxuICAgICAgICAgICAgaXRlbS5jb252ZXJ0ZXIgPSBuZXcgRXhlY3V0ZUZvcm1zQ29udmVydGVyKCk7XHJcbiAgICAgICAgICAgIGl0ZW0uZWRpdG9yUGFyYW1zID0ge1xyXG4gICAgICAgICAgICAgIGxvY2F0aW9uOiAncHJvY2VzcycsXHJcbiAgICAgICAgICAgICAgdGFiOiAnd2ViJ1xyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgIGNhc2UgUmVzb3VyY2VLZXlzLndmX0V4ZWN1dGVGb3Jtc19Nb2JpbGU6XHJcbiAgICAgICAgICAgIGl0ZW0uZWRpdG9yID0gRXhlY3V0ZUZvcm1zQ29tcG9uZW50O1xyXG4gICAgICAgICAgICBpdGVtLmNvbnZlcnRlciA9IG5ldyBFeGVjdXRlRm9ybXNDb252ZXJ0ZXIoKTtcclxuICAgICAgICAgICAgaXRlbS5lZGl0b3JQYXJhbXMgPSB7XHJcbiAgICAgICAgICAgICAgbG9jYXRpb246ICdwcm9jZXNzJyxcclxuICAgICAgICAgICAgICB0YWI6ICdtb2JpbGUnXHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgY2FzZSBSZXNvdXJjZUtleXMud2ZfVGl0bGVFeHByZXNzaW9uOlxyXG4gICAgICAgICAgICBpdGVtLmVkaXRvciA9IFRpdGxlRXhwcmVzc2lvbkNvbXBvbmVudDtcclxuICAgICAgICAgICAgaXRlbS5jb252ZXJ0ZXIgPSBuZXcgVGl0bGVFeHByZXNzaW9uQ29udmVydGVyKCk7XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgY2FzZSBSZXNvdXJjZUtleXMuYWxsb3dQcmVBc3NpZ246XHJcbiAgICAgICAgICAgIGl0ZW0uaXRlcmF0b3IgPSB0aGlzLnVpU3RhdGUuYm9vbEl0ZXJhdG9yO1xyXG4gICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgIGNhc2UgUmVzb3VyY2VLZXlzLnN0YXJ0TW9kZTpcclxuICAgICAgICAgICAgaXRlbS5pdGVyYXRvciA9IHRoaXMudWlTdGF0ZS5zdGFydE1vZGVJdGVyYXRvcjtcclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICBjYXNlIFJlc291cmNlS2V5cy5EaXNwbGF5VGVybWluYWw6XHJcbiAgICAgICAgICAgIGl0ZW0uaXRlcmF0b3IgPSB0aGlzLnVpU3RhdGUuZGlzcGxheVRlcm1pbmFsO1xyXG4gICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgIGNhc2UgUmVzb3VyY2VLZXlzLndmX0N1c3RvbWl6ZUFjdGlvbjpcclxuICAgICAgICAgICAgaXRlbS5lZGl0b3IgPSBDdXN0b21pemVBY3Rpb25Db21wb25lbnQ7XHJcbiAgICAgICAgICAgIGl0ZW0uY29udmVydGVyID0gbmV3IEN1c3RvbWl6ZUFjdGlvbkNvbnZlcnRlcigpO1xyXG4gICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgIGNhc2UgUmVzb3VyY2VLZXlzLnByb2Nlc3NWYXJpYWJsZXM6XHJcbiAgICAgICAgICAgIGl0ZW0uZWRpdG9yID0gUHJvY2Vzc1ZhcmlhYmxlc0NvbXBvbmVudDtcclxuICAgICAgICAgICAgaXRlbS5jb252ZXJ0ZXIgPSBuZXcgUHJvY2Vzc1ZhcmlhYmxlc0NvbnZlcnRlcigpO1xyXG4gICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgIGNhc2UgUmVzb3VyY2VLZXlzLnRpbWVMaW1pdENvbnRyb2w6XHJcbiAgICAgICAgICAgIGl0ZW0uZWRpdG9yID0gVGltZUxpbWl0Q29udHJvbENvbXBvbmVudDtcclxuICAgICAgICAgICAgaXRlbS5jb252ZXJ0ZXIgPSBuZXcgVGltZUxpbWl0Q29udHJvbENvbnZlcnRlcigpO1xyXG4gICAgICAgICAgICBpdGVtLmVkaXRvclBhcmFtcyA9IHtcclxuICAgICAgICAgICAgICBsb2NhdGlvbjogJ3Byb2Nlc3MnXHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgY2FzZSBSZXNvdXJjZUtleXMubWVzc2FnZU5vdGljZTpcclxuICAgICAgICAgICAgaXRlbS5lZGl0b3IgPSBNZXNzYWdlTm90aWNlQ29tcG9uZW50O1xyXG4gICAgICAgICAgICBpdGVtLmNvbnZlcnRlciA9IG5ldyBNZXNzYWdlTm90aWNlQ29udmVydGVyKCk7XHJcbiAgICAgICAgICAgIGl0ZW0uZWRpdG9yUGFyYW1zID0ge1xyXG4gICAgICAgICAgICAgIGxvY2F0aW9uOiAncHJvY2VzcydcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICBpdGVtLmVkaXRvciA9IEV4dGVuZFByb3BlcnR5Q29tcG9uZW50O1xyXG4gICAgICAgICAgICBpdGVtLmNvbnZlcnRlciA9IG5ldyBFeHRlbmRQcm9wZXJ0eUNvbnZlcnRlcigpO1xyXG4gICAgICAgICAgICBicmVhaztcclxuICAgICAgICB9XHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG4gIH1cclxufVxyXG4iXX0=