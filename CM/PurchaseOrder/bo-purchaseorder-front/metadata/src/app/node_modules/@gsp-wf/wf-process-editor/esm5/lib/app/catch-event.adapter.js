/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ProcessDesignerUIState } from './process-designer.uistate';
import { Injectable, Injector } from '@angular/core';
import { ResourceKeys } from '../model/resourceKeys';
import { BackwardRuleComponent, BackwardRuleConverter } from '../views/backward-rule/backward-rule.component';
import { EventDefinitionComponent, EventDefinitionConverter } from '../views/event-definition/event-definition.component';
import { VariableSettingComponent, VariableSettingConverter } from '../views/variable-setting/variable-setting.component';
var CatchEventAdapter = /** @class */ (function () {
    function CatchEventAdapter(uiState, injector) {
        this.uiState = uiState;
        this.injector = injector;
    }
    /**
     * @param {?} obj
     * @return {?}
     */
    CatchEventAdapter.prototype.setProperty = /**
     * @param {?} obj
     * @return {?}
     */
    function (obj) {
        this.uiState.propertyData = obj.propertyData;
        this.uiState.propertyConfig = this.setConfig(obj.propertyConfig);
    };
    /**
     * @private
     * @param {?} obj
     * @return {?}
     */
    CatchEventAdapter.prototype.setConfig = /**
     * @private
     * @param {?} obj
     * @return {?}
     */
    function (obj) {
        var _this = this;
        /** @type {?} */
        var propertyConfig = [];
        if (obj) {
            obj.forEach((/**
             * @param {?} element
             * @return {?}
             */
            function (element) {
                _this.setEntity(element.properties);
                propertyConfig.push(element);
            }));
        }
        return propertyConfig;
    };
    /**
     * @private
     * @param {?} obj
     * @return {?}
     */
    CatchEventAdapter.prototype.setEntity = /**
     * @private
     * @param {?} obj
     * @return {?}
     */
    function (obj) {
        if (obj && obj.length > 0) {
            obj.forEach((/**
             * @param {?} item
             * @return {?}
             */
            function (item) {
                switch (item.propertyID) {
                    case ResourceKeys.BackWardRule:
                        item.editor = BackwardRuleComponent;
                        item.converter = new BackwardRuleConverter();
                        item.editorParams = {
                            nodeType: 'CallActivitySubProcess'
                        };
                        break;
                    case ResourceKeys.eventDefinitions:
                        item.editor = EventDefinitionComponent;
                        item.converter = new EventDefinitionConverter();
                        break;
                    case ResourceKeys.variableSettings: // 变量设置
                        item.editor = VariableSettingComponent;
                        item.converter = new VariableSettingConverter();
                        break;
                    default:
                        break;
                }
            }));
        }
    };
    CatchEventAdapter.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    CatchEventAdapter.ctorParameters = function () { return [
        { type: ProcessDesignerUIState },
        { type: Injector }
    ]; };
    return CatchEventAdapter;
}());
export { CatchEventAdapter };
if (false) {
    /**
     * @type {?}
     * @private
     */
    CatchEventAdapter.prototype.uiState;
    /**
     * @type {?}
     * @private
     */
    CatchEventAdapter.prototype.injector;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2F0Y2gtZXZlbnQuYWRhcHRlci5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0Bnc3Atd2Yvd2YtcHJvY2Vzcy1lZGl0b3IvIiwic291cmNlcyI6WyJsaWIvYXBwL2NhdGNoLWV2ZW50LmFkYXB0ZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxzQkFBc0IsRUFBRSxNQUFNLDRCQUE0QixDQUFDO0FBQ3BFLE9BQU8sRUFBRSxVQUFVLEVBQUUsUUFBUSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRXJELE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQztBQUNyRCxPQUFPLEVBQUUscUJBQXFCLEVBQUUscUJBQXFCLEVBQUUsTUFBTSxnREFBZ0QsQ0FBQztBQUM5RyxPQUFPLEVBQUUsd0JBQXdCLEVBQUUsd0JBQXdCLEVBQUUsTUFBTSxzREFBc0QsQ0FBQztBQUMxSCxPQUFPLEVBQUUsd0JBQXdCLEVBQUUsd0JBQXdCLEVBQUUsTUFBTSxzREFBc0QsQ0FBQztBQUUxSDtJQUdJLDJCQUNZLE9BQStCLEVBQy9CLFFBQWtCO1FBRGxCLFlBQU8sR0FBUCxPQUFPLENBQXdCO1FBQy9CLGFBQVEsR0FBUixRQUFRLENBQVU7SUFDMUIsQ0FBQzs7Ozs7SUFDTCx1Q0FBVzs7OztJQUFYLFVBQVksR0FBUTtRQUNoQixJQUFJLENBQUMsT0FBTyxDQUFDLFlBQVksR0FBRyxHQUFHLENBQUMsWUFBWSxDQUFDO1FBQzdDLElBQUksQ0FBQyxPQUFPLENBQUMsY0FBYyxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLGNBQWMsQ0FBQyxDQUFDO0lBQ3JFLENBQUM7Ozs7OztJQUVPLHFDQUFTOzs7OztJQUFqQixVQUFrQixHQUFVO1FBQTVCLGlCQVNDOztZQVJTLGNBQWMsR0FBNEIsRUFBRTtRQUNsRCxJQUFJLEdBQUcsRUFBRTtZQUNMLEdBQUcsQ0FBQyxPQUFPOzs7O1lBQUMsVUFBQyxPQUE4QjtnQkFDdkMsS0FBSSxDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUMsVUFBVSxDQUFDLENBQUM7Z0JBQ25DLGNBQWMsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7WUFDakMsQ0FBQyxFQUFDLENBQUM7U0FDTjtRQUNELE9BQU8sY0FBYyxDQUFDO0lBQzFCLENBQUM7Ozs7OztJQUNPLHFDQUFTOzs7OztJQUFqQixVQUFrQixHQUFxQjtRQUNuQyxJQUFJLEdBQUcsSUFBSSxHQUFHLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRTtZQUN2QixHQUFHLENBQUMsT0FBTzs7OztZQUFDLFVBQUMsSUFBb0I7Z0JBQzdCLFFBQVEsSUFBSSxDQUFDLFVBQVUsRUFBRTtvQkFDckIsS0FBSyxZQUFZLENBQUMsWUFBWTt3QkFDMUIsSUFBSSxDQUFDLE1BQU0sR0FBRyxxQkFBcUIsQ0FBQzt3QkFDcEMsSUFBSSxDQUFDLFNBQVMsR0FBRyxJQUFJLHFCQUFxQixFQUFFLENBQUM7d0JBQzdDLElBQUksQ0FBQyxZQUFZLEdBQUc7NEJBQ2hCLFFBQVEsRUFBRSx3QkFBd0I7eUJBQ3JDLENBQUM7d0JBQ0YsTUFBTTtvQkFDVixLQUFLLFlBQVksQ0FBQyxnQkFBZ0I7d0JBQzlCLElBQUksQ0FBQyxNQUFNLEdBQUcsd0JBQXdCLENBQUM7d0JBQ3ZDLElBQUksQ0FBQyxTQUFTLEdBQUcsSUFBSSx3QkFBd0IsRUFBRSxDQUFDO3dCQUNoRCxNQUFNO29CQUNWLEtBQUssWUFBWSxDQUFDLGdCQUFnQixFQUFFLE9BQU87d0JBQ3ZDLElBQUksQ0FBQyxNQUFNLEdBQUcsd0JBQXdCLENBQUM7d0JBQ3ZDLElBQUksQ0FBQyxTQUFTLEdBQUcsSUFBSSx3QkFBd0IsRUFBRSxDQUFDO3dCQUNoRCxNQUFNO29CQUNWO3dCQUNJLE1BQU07aUJBQ2I7WUFDTCxDQUFDLEVBQUMsQ0FBQztTQUNOO0lBQ0wsQ0FBQzs7Z0JBOUNKLFVBQVU7Ozs7Z0JBUkYsc0JBQXNCO2dCQUNWLFFBQVE7O0lBc0Q3Qix3QkFBQztDQUFBLEFBL0NELElBK0NDO1NBN0NZLGlCQUFpQjs7Ozs7O0lBRXRCLG9DQUF1Qzs7Ozs7SUFDdkMscUNBQTBCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUHJvY2Vzc0Rlc2lnbmVyVUlTdGF0ZSB9IGZyb20gJy4vcHJvY2Vzcy1kZXNpZ25lci51aXN0YXRlJztcclxuaW1wb3J0IHsgSW5qZWN0YWJsZSwgSW5qZWN0b3IgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgRWxlbWVudFByb3BlcnR5Q29uZmlnLCBQcm9wZXJ0eUVudGl0eSB9IGZyb20gJ0BmYXJyaXMvdWktcHJvcGVydHktcGFuZWwnO1xyXG5pbXBvcnQgeyBSZXNvdXJjZUtleXMgfSBmcm9tICcuLi9tb2RlbC9yZXNvdXJjZUtleXMnO1xyXG5pbXBvcnQgeyBCYWNrd2FyZFJ1bGVDb21wb25lbnQsIEJhY2t3YXJkUnVsZUNvbnZlcnRlciB9IGZyb20gJy4uL3ZpZXdzL2JhY2t3YXJkLXJ1bGUvYmFja3dhcmQtcnVsZS5jb21wb25lbnQnO1xyXG5pbXBvcnQgeyBFdmVudERlZmluaXRpb25Db21wb25lbnQsIEV2ZW50RGVmaW5pdGlvbkNvbnZlcnRlciB9IGZyb20gJy4uL3ZpZXdzL2V2ZW50LWRlZmluaXRpb24vZXZlbnQtZGVmaW5pdGlvbi5jb21wb25lbnQnO1xyXG5pbXBvcnQgeyBWYXJpYWJsZVNldHRpbmdDb21wb25lbnQsIFZhcmlhYmxlU2V0dGluZ0NvbnZlcnRlciB9IGZyb20gJy4uL3ZpZXdzL3ZhcmlhYmxlLXNldHRpbmcvdmFyaWFibGUtc2V0dGluZy5jb21wb25lbnQnO1xyXG5cclxuQEluamVjdGFibGUoKVxyXG5cclxuZXhwb3J0IGNsYXNzIENhdGNoRXZlbnRBZGFwdGVyIHtcclxuICAgIGNvbnN0cnVjdG9yKFxyXG4gICAgICAgIHByaXZhdGUgdWlTdGF0ZTogUHJvY2Vzc0Rlc2lnbmVyVUlTdGF0ZSxcclxuICAgICAgICBwcml2YXRlIGluamVjdG9yOiBJbmplY3RvclxyXG4gICAgKSB7IH1cclxuICAgIHNldFByb3BlcnR5KG9iajogYW55KSB7XHJcbiAgICAgICAgdGhpcy51aVN0YXRlLnByb3BlcnR5RGF0YSA9IG9iai5wcm9wZXJ0eURhdGE7XHJcbiAgICAgICAgdGhpcy51aVN0YXRlLnByb3BlcnR5Q29uZmlnID0gdGhpcy5zZXRDb25maWcob2JqLnByb3BlcnR5Q29uZmlnKTtcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIHNldENvbmZpZyhvYmo6IGFueVtdKTogRWxlbWVudFByb3BlcnR5Q29uZmlnW10ge1xyXG4gICAgICAgIGNvbnN0IHByb3BlcnR5Q29uZmlnOiBFbGVtZW50UHJvcGVydHlDb25maWdbXSA9IFtdO1xyXG4gICAgICAgIGlmIChvYmopIHtcclxuICAgICAgICAgICAgb2JqLmZvckVhY2goKGVsZW1lbnQ6IEVsZW1lbnRQcm9wZXJ0eUNvbmZpZykgPT4ge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zZXRFbnRpdHkoZWxlbWVudC5wcm9wZXJ0aWVzKTtcclxuICAgICAgICAgICAgICAgIHByb3BlcnR5Q29uZmlnLnB1c2goZWxlbWVudCk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gcHJvcGVydHlDb25maWc7XHJcbiAgICB9XHJcbiAgICBwcml2YXRlIHNldEVudGl0eShvYmo6IFByb3BlcnR5RW50aXR5W10pIHtcclxuICAgICAgICBpZiAob2JqICYmIG9iai5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgIG9iai5mb3JFYWNoKChpdGVtOiBQcm9wZXJ0eUVudGl0eSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgc3dpdGNoIChpdGVtLnByb3BlcnR5SUQpIHtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIFJlc291cmNlS2V5cy5CYWNrV2FyZFJ1bGU6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGl0ZW0uZWRpdG9yID0gQmFja3dhcmRSdWxlQ29tcG9uZW50O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpdGVtLmNvbnZlcnRlciA9IG5ldyBCYWNrd2FyZFJ1bGVDb252ZXJ0ZXIoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaXRlbS5lZGl0b3JQYXJhbXMgPSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBub2RlVHlwZTogJ0NhbGxBY3Rpdml0eVN1YlByb2Nlc3MnXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgUmVzb3VyY2VLZXlzLmV2ZW50RGVmaW5pdGlvbnM6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGl0ZW0uZWRpdG9yID0gRXZlbnREZWZpbml0aW9uQ29tcG9uZW50O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpdGVtLmNvbnZlcnRlciA9IG5ldyBFdmVudERlZmluaXRpb25Db252ZXJ0ZXIoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBSZXNvdXJjZUtleXMudmFyaWFibGVTZXR0aW5nczogLy8g5Y+Y6YeP6K6+572uXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGl0ZW0uZWRpdG9yID0gVmFyaWFibGVTZXR0aW5nQ29tcG9uZW50O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpdGVtLmNvbnZlcnRlciA9IG5ldyBWYXJpYWJsZVNldHRpbmdDb252ZXJ0ZXIoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG4iXX0=