/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Pipe } from '@angular/core';
import { translate } from './i18n/index';
var TranslatePipe = /** @class */ (function () {
    function TranslatePipe() {
    }
    /**
     * @param {?} name
     * @param {?=} defaultVal
     * @return {?}
     */
    TranslatePipe.prototype.transform = /**
     * @param {?} name
     * @param {?=} defaultVal
     * @return {?}
     */
    function (name, defaultVal) {
        if (defaultVal === void 0) { defaultVal = ''; }
        /** @type {?} */
        var r = this.getI18nValue(name);
        return r ? r : defaultVal;
    };
    /**
     * @param {?} name
     * @return {?}
     */
    TranslatePipe.prototype.getI18nValue = /**
     * @param {?} name
     * @return {?}
     */
    function (name) {
        if (!name) {
            return '';
        }
        /** @type {?} */
        var defaultLang = localStorage.getItem('languageCode');
        /** @type {?} */
        var langData = defaultLang ? translate[defaultLang] : translate['zh-CHS'];
        /** @type {?} */
        var resultVal = '';
        if (name.indexOf('.') === -1) {
            resultVal = langData[name];
        }
        else {
            resultVal = name.split('.').reduce(function (obj, key) {
                if (obj) {
                    return obj[key];
                }
                else {
                    return null;
                }
            }, langData);
        }
        return resultVal;
    };
    TranslatePipe.decorators = [
        { type: Pipe, args: [{ name: 'translate' },] }
    ];
    /** @nocollapse */
    TranslatePipe.ctorParameters = function () { return []; };
    return TranslatePipe;
}());
export { TranslatePipe };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHJhbnNsYXRlLnBpcGUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZ3NwLXdmL3dmLWFwcHJvdmFsLWxvZ3MvIiwic291cmNlcyI6WyJsaWIvc2VydmljZS90cmFuc2xhdGUucGlwZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLElBQUksRUFBaUIsTUFBTSxlQUFlLENBQUM7QUFDcEQsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLGNBQWMsQ0FBQztBQUV6QztJQUdJO0lBQ0ksQ0FBQzs7Ozs7O0lBRUwsaUNBQVM7Ozs7O0lBQVQsVUFBVSxJQUFTLEVBQUUsVUFBZTtRQUFmLDJCQUFBLEVBQUEsZUFBZTs7WUFDMUIsQ0FBQyxHQUFHLElBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDO1FBQ2pDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLFVBQVUsQ0FBQztJQUM5QixDQUFDOzs7OztJQUVELG9DQUFZOzs7O0lBQVosVUFBYSxJQUFZO1FBQ3JCLElBQUksQ0FBQyxJQUFJLEVBQUU7WUFBRSxPQUFPLEVBQUUsQ0FBQztTQUFFOztZQUNyQixXQUFXLEdBQUcsWUFBWSxDQUFDLE9BQU8sQ0FBQyxjQUFjLENBQUM7O1lBQ2xELFFBQVEsR0FBRyxXQUFXLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FBQzs7WUFDckUsU0FBUyxHQUFHLEVBQUU7UUFDbEIsSUFBSSxJQUFJLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFO1lBQzVCLFNBQVMsR0FBRyxRQUFRLENBQUMsSUFBSSxDQUFDLENBQUM7U0FDNUI7YUFBTTtZQUNMLFNBQVMsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxVQUFDLEdBQUcsRUFBRSxHQUFHO2dCQUMxQyxJQUFJLEdBQUcsRUFBRTtvQkFDUCxPQUFPLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQztpQkFDakI7cUJBQU07b0JBQ0wsT0FBTyxJQUFJLENBQUM7aUJBQ2I7WUFDSCxDQUFDLEVBQUUsUUFBUSxDQUFDLENBQUM7U0FDZDtRQUNELE9BQU8sU0FBUyxDQUFDO0lBQ25CLENBQUM7O2dCQTVCTixJQUFJLFNBQUMsRUFBRSxJQUFJLEVBQUUsV0FBVyxFQUFFOzs7O0lBNkIzQixvQkFBQztDQUFBLEFBN0JELElBNkJDO1NBNUJZLGFBQWEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBQaXBlLCBQaXBlVHJhbnNmb3JtIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IHRyYW5zbGF0ZSB9IGZyb20gJy4vaTE4bi9pbmRleCc7XHJcblxyXG5AUGlwZSh7IG5hbWU6ICd0cmFuc2xhdGUnIH0pXHJcbmV4cG9ydCBjbGFzcyBUcmFuc2xhdGVQaXBlIGltcGxlbWVudHMgUGlwZVRyYW5zZm9ybSB7XHJcblxyXG4gICAgY29uc3RydWN0b3IoXHJcbiAgICApIHsgfVxyXG5cclxuICAgIHRyYW5zZm9ybShuYW1lOiBhbnksIGRlZmF1bHRWYWwgPSAnJyk6IGFueSB7XHJcbiAgICAgICAgY29uc3QgciA9IHRoaXMuZ2V0STE4blZhbHVlKG5hbWUpO1xyXG4gICAgICAgIHJldHVybiByID8gciA6IGRlZmF1bHRWYWw7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0STE4blZhbHVlKG5hbWU6IHN0cmluZykge1xyXG4gICAgICAgIGlmICghbmFtZSkgeyByZXR1cm4gJyc7IH1cclxuICAgICAgICB2YXIgZGVmYXVsdExhbmcgPSBsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgnbGFuZ3VhZ2VDb2RlJyk7XHJcbiAgICAgICAgdmFyIGxhbmdEYXRhID0gZGVmYXVsdExhbmcgPyB0cmFuc2xhdGVbZGVmYXVsdExhbmddIDogdHJhbnNsYXRlWyd6aC1DSFMnXTtcclxuICAgICAgICBsZXQgcmVzdWx0VmFsID0gJyc7XHJcbiAgICAgICAgaWYgKG5hbWUuaW5kZXhPZignLicpID09PSAtMSkge1xyXG4gICAgICAgICAgcmVzdWx0VmFsID0gbGFuZ0RhdGFbbmFtZV07XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIHJlc3VsdFZhbCA9IG5hbWUuc3BsaXQoJy4nKS5yZWR1Y2UoKG9iaiwga2V5KSA9PiB7XHJcbiAgICAgICAgICAgIGlmIChvYmopIHtcclxuICAgICAgICAgICAgICByZXR1cm4gb2JqW2tleV07XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIH0sIGxhbmdEYXRhKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHJlc3VsdFZhbDtcclxuICAgICAgfVxyXG59XHJcbiJdfQ==