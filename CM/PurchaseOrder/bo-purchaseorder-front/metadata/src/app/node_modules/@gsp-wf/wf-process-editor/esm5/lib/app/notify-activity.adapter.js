/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { ProcessDesignerUIState } from './process-designer.uistate';
import { ResourceKeys } from '../model/resourceKeys';
import { MessageNoticeComponent, MessageNoticeConverter } from '../views/message-notice/message-notice.component';
import { PerformerComponent, PerformerConverter } from '../views/performer/performer.component';
import { ExecuteFormsComponent, ExecuteFormsConverter } from '../views/execute-forms/execute-forms.component';
import { ExtendPropertyComponent, ExtendPropertyConverter } from '../views/extend-property/extend-property.component';
var NotifyActivityAdapter = /** @class */ (function () {
    function NotifyActivityAdapter(uiState) {
        this.uiState = uiState;
    }
    /**
     * @param {?} obj
     * @return {?}
     */
    NotifyActivityAdapter.prototype.setProperty = /**
     * @param {?} obj
     * @return {?}
     */
    function (obj) {
        this.uiState.propertyData = obj.propertyData;
        this.uiState.propertyConfig = this.setConfig(obj.propertyConfig);
    };
    /**
     * @private
     * @param {?} obj
     * @return {?}
     */
    NotifyActivityAdapter.prototype.setConfig = /**
     * @private
     * @param {?} obj
     * @return {?}
     */
    function (obj) {
        var _this = this;
        /** @type {?} */
        var propertyConfig = [];
        if (obj) {
            obj.forEach((/**
             * @param {?} element
             * @return {?}
             */
            function (element) {
                _this.setEntity(element.properties);
                propertyConfig.push(element);
            }));
        }
        return propertyConfig;
    };
    /**
     * @private
     * @param {?} obj
     * @return {?}
     */
    NotifyActivityAdapter.prototype.setEntity = /**
     * @private
     * @param {?} obj
     * @return {?}
     */
    function (obj) {
        if (obj && obj.length > 0) {
            obj.forEach((/**
             * @param {?} item
             * @return {?}
             */
            function (item) {
                switch (item.propertyID) {
                    case ResourceKeys.ParticipantSchemes: // 参与者
                        item.editor = PerformerComponent;
                        item.converter = new PerformerConverter();
                        break;
                    case ResourceKeys.wf_ExecuteForms_PC: // 表单定义
                        item.editor = ExecuteFormsComponent;
                        item.converter = new ExecuteFormsConverter();
                        item.editorParams = {
                            location: 'notifyActivity',
                            tab: 'web'
                        };
                        break;
                    case ResourceKeys.wf_ExecuteForms_Mobile: // 表单定义
                        item.editor = ExecuteFormsComponent;
                        item.converter = new ExecuteFormsConverter();
                        item.editorParams = {
                            location: 'notifyActivity',
                            tab: 'mobile'
                        };
                        break;
                    case ResourceKeys.messageNotice: // 消息通知
                        item.editor = MessageNoticeComponent;
                        item.converter = new MessageNoticeConverter();
                        item.editorParams = {
                            location: 'activity'
                        };
                        break;
                    default:
                        item.editor = ExtendPropertyComponent;
                        item.converter = new ExtendPropertyConverter();
                        break;
                }
            }));
        }
    };
    NotifyActivityAdapter.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    NotifyActivityAdapter.ctorParameters = function () { return [
        { type: ProcessDesignerUIState }
    ]; };
    return NotifyActivityAdapter;
}());
export { NotifyActivityAdapter };
if (false) {
    /**
     * @type {?}
     * @private
     */
    NotifyActivityAdapter.prototype.uiState;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibm90aWZ5LWFjdGl2aXR5LmFkYXB0ZXIuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZ3NwLXdmL3dmLXByb2Nlc3MtZWRpdG9yLyIsInNvdXJjZXMiOlsibGliL2FwcC9ub3RpZnktYWN0aXZpdHkuYWRhcHRlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLEVBQUUsc0JBQXNCLEVBQUUsTUFBTSw0QkFBNEIsQ0FBQztBQUVwRSxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sdUJBQXVCLENBQUM7QUFDckQsT0FBTyxFQUFFLHNCQUFzQixFQUFFLHNCQUFzQixFQUFFLE1BQU0sa0RBQWtELENBQUM7QUFDbEgsT0FBTyxFQUFFLGtCQUFrQixFQUFFLGtCQUFrQixFQUFFLE1BQU0sd0NBQXdDLENBQUM7QUFDaEcsT0FBTyxFQUFFLHFCQUFxQixFQUFFLHFCQUFxQixFQUFFLE1BQU0sZ0RBQWdELENBQUM7QUFDOUcsT0FBTyxFQUFFLHVCQUF1QixFQUFFLHVCQUF1QixFQUFFLE1BQU0sb0RBQW9ELENBQUM7QUFFdEg7SUFFSSwrQkFBb0IsT0FBK0I7UUFBL0IsWUFBTyxHQUFQLE9BQU8sQ0FBd0I7SUFFbkQsQ0FBQzs7Ozs7SUFDRCwyQ0FBVzs7OztJQUFYLFVBQVksR0FBUTtRQUNoQixJQUFJLENBQUMsT0FBTyxDQUFDLFlBQVksR0FBRyxHQUFHLENBQUMsWUFBWSxDQUFDO1FBQzdDLElBQUksQ0FBQyxPQUFPLENBQUMsY0FBYyxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLGNBQWMsQ0FBQyxDQUFDO0lBQ3JFLENBQUM7Ozs7OztJQUVPLHlDQUFTOzs7OztJQUFqQixVQUFrQixHQUFVO1FBQTVCLGlCQVNDOztZQVJTLGNBQWMsR0FBNEIsRUFBRTtRQUNsRCxJQUFJLEdBQUcsRUFBRTtZQUNMLEdBQUcsQ0FBQyxPQUFPOzs7O1lBQUMsVUFBQyxPQUE4QjtnQkFDdkMsS0FBSSxDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUMsVUFBVSxDQUFDLENBQUM7Z0JBQ25DLGNBQWMsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7WUFDakMsQ0FBQyxFQUFDLENBQUM7U0FDTjtRQUNELE9BQU8sY0FBYyxDQUFDO0lBQzFCLENBQUM7Ozs7OztJQUNPLHlDQUFTOzs7OztJQUFqQixVQUFrQixHQUFxQjtRQUNuQyxJQUFJLEdBQUcsSUFBSSxHQUFHLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRTtZQUN2QixHQUFHLENBQUMsT0FBTzs7OztZQUFDLFVBQUMsSUFBb0I7Z0JBQzdCLFFBQVEsSUFBSSxDQUFDLFVBQVUsRUFBRTtvQkFDckIsS0FBSyxZQUFZLENBQUMsa0JBQWtCLEVBQUUsTUFBTTt3QkFDeEMsSUFBSSxDQUFDLE1BQU0sR0FBRyxrQkFBa0IsQ0FBQzt3QkFDakMsSUFBSSxDQUFDLFNBQVMsR0FBRyxJQUFJLGtCQUFrQixFQUFFLENBQUM7d0JBQzFDLE1BQU07b0JBQ1YsS0FBSyxZQUFZLENBQUMsa0JBQWtCLEVBQUUsT0FBTzt3QkFDekMsSUFBSSxDQUFDLE1BQU0sR0FBRyxxQkFBcUIsQ0FBQzt3QkFDcEMsSUFBSSxDQUFDLFNBQVMsR0FBRyxJQUFJLHFCQUFxQixFQUFFLENBQUM7d0JBQzdDLElBQUksQ0FBQyxZQUFZLEdBQUc7NEJBQ2hCLFFBQVEsRUFBRSxnQkFBZ0I7NEJBQzFCLEdBQUcsRUFBRSxLQUFLO3lCQUNiLENBQUM7d0JBQ0YsTUFBTTtvQkFDVixLQUFLLFlBQVksQ0FBQyxzQkFBc0IsRUFBRSxPQUFPO3dCQUM3QyxJQUFJLENBQUMsTUFBTSxHQUFHLHFCQUFxQixDQUFDO3dCQUNwQyxJQUFJLENBQUMsU0FBUyxHQUFHLElBQUkscUJBQXFCLEVBQUUsQ0FBQzt3QkFDN0MsSUFBSSxDQUFDLFlBQVksR0FBRzs0QkFDaEIsUUFBUSxFQUFFLGdCQUFnQjs0QkFDMUIsR0FBRyxFQUFFLFFBQVE7eUJBQ2hCLENBQUM7d0JBQ0YsTUFBTTtvQkFDVixLQUFLLFlBQVksQ0FBQyxhQUFhLEVBQUUsT0FBTzt3QkFDcEMsSUFBSSxDQUFDLE1BQU0sR0FBRyxzQkFBc0IsQ0FBQzt3QkFDckMsSUFBSSxDQUFDLFNBQVMsR0FBRyxJQUFJLHNCQUFzQixFQUFFLENBQUM7d0JBQzlDLElBQUksQ0FBQyxZQUFZLEdBQUc7NEJBQ2hCLFFBQVEsRUFBRSxVQUFVO3lCQUN2QixDQUFDO3dCQUNGLE1BQU07b0JBQ1Y7d0JBQ0ksSUFBSSxDQUFDLE1BQU0sR0FBRyx1QkFBdUIsQ0FBQzt3QkFDdEMsSUFBSSxDQUFDLFNBQVMsR0FBRyxJQUFJLHVCQUF1QixFQUFFLENBQUM7d0JBQy9DLE1BQU07aUJBQ2I7WUFDTCxDQUFDLEVBQUMsQ0FBQztTQUNOO0lBQ0wsQ0FBQzs7Z0JBMURKLFVBQVU7Ozs7Z0JBUkYsc0JBQXNCOztJQW1FL0IsNEJBQUM7Q0FBQSxBQTNERCxJQTJEQztTQTFEWSxxQkFBcUI7Ozs7OztJQUNsQix3Q0FBdUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IFByb2Nlc3NEZXNpZ25lclVJU3RhdGUgfSBmcm9tICcuL3Byb2Nlc3MtZGVzaWduZXIudWlzdGF0ZSc7XHJcbmltcG9ydCB7IEVsZW1lbnRQcm9wZXJ0eUNvbmZpZywgUHJvcGVydHlFbnRpdHkgfSBmcm9tICdAZmFycmlzL3VpLXByb3BlcnR5LXBhbmVsJztcclxuaW1wb3J0IHsgUmVzb3VyY2VLZXlzIH0gZnJvbSAnLi4vbW9kZWwvcmVzb3VyY2VLZXlzJztcclxuaW1wb3J0IHsgTWVzc2FnZU5vdGljZUNvbXBvbmVudCwgTWVzc2FnZU5vdGljZUNvbnZlcnRlciB9IGZyb20gJy4uL3ZpZXdzL21lc3NhZ2Utbm90aWNlL21lc3NhZ2Utbm90aWNlLmNvbXBvbmVudCc7XHJcbmltcG9ydCB7IFBlcmZvcm1lckNvbXBvbmVudCwgUGVyZm9ybWVyQ29udmVydGVyIH0gZnJvbSAnLi4vdmlld3MvcGVyZm9ybWVyL3BlcmZvcm1lci5jb21wb25lbnQnO1xyXG5pbXBvcnQgeyBFeGVjdXRlRm9ybXNDb21wb25lbnQsIEV4ZWN1dGVGb3Jtc0NvbnZlcnRlciB9IGZyb20gJy4uL3ZpZXdzL2V4ZWN1dGUtZm9ybXMvZXhlY3V0ZS1mb3Jtcy5jb21wb25lbnQnO1xyXG5pbXBvcnQgeyBFeHRlbmRQcm9wZXJ0eUNvbXBvbmVudCwgRXh0ZW5kUHJvcGVydHlDb252ZXJ0ZXIgfSBmcm9tICcuLi92aWV3cy9leHRlbmQtcHJvcGVydHkvZXh0ZW5kLXByb3BlcnR5LmNvbXBvbmVudCc7XHJcblxyXG5ASW5qZWN0YWJsZSgpXHJcbmV4cG9ydCBjbGFzcyBOb3RpZnlBY3Rpdml0eUFkYXB0ZXIge1xyXG4gICAgY29uc3RydWN0b3IocHJpdmF0ZSB1aVN0YXRlOiBQcm9jZXNzRGVzaWduZXJVSVN0YXRlKSB7XHJcblxyXG4gICAgfVxyXG4gICAgc2V0UHJvcGVydHkob2JqOiBhbnkpIHtcclxuICAgICAgICB0aGlzLnVpU3RhdGUucHJvcGVydHlEYXRhID0gb2JqLnByb3BlcnR5RGF0YTtcclxuICAgICAgICB0aGlzLnVpU3RhdGUucHJvcGVydHlDb25maWcgPSB0aGlzLnNldENvbmZpZyhvYmoucHJvcGVydHlDb25maWcpO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgc2V0Q29uZmlnKG9iajogYW55W10pOiBFbGVtZW50UHJvcGVydHlDb25maWdbXSB7XHJcbiAgICAgICAgY29uc3QgcHJvcGVydHlDb25maWc6IEVsZW1lbnRQcm9wZXJ0eUNvbmZpZ1tdID0gW107XHJcbiAgICAgICAgaWYgKG9iaikge1xyXG4gICAgICAgICAgICBvYmouZm9yRWFjaCgoZWxlbWVudDogRWxlbWVudFByb3BlcnR5Q29uZmlnKSA9PiB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnNldEVudGl0eShlbGVtZW50LnByb3BlcnRpZXMpO1xyXG4gICAgICAgICAgICAgICAgcHJvcGVydHlDb25maWcucHVzaChlbGVtZW50KTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBwcm9wZXJ0eUNvbmZpZztcclxuICAgIH1cclxuICAgIHByaXZhdGUgc2V0RW50aXR5KG9iajogUHJvcGVydHlFbnRpdHlbXSkge1xyXG4gICAgICAgIGlmIChvYmogJiYgb2JqLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgb2JqLmZvckVhY2goKGl0ZW06IFByb3BlcnR5RW50aXR5KSA9PiB7XHJcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKGl0ZW0ucHJvcGVydHlJRCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgUmVzb3VyY2VLZXlzLlBhcnRpY2lwYW50U2NoZW1lczogLy8g5Y+C5LiO6ICFXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGl0ZW0uZWRpdG9yID0gUGVyZm9ybWVyQ29tcG9uZW50O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpdGVtLmNvbnZlcnRlciA9IG5ldyBQZXJmb3JtZXJDb252ZXJ0ZXIoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBSZXNvdXJjZUtleXMud2ZfRXhlY3V0ZUZvcm1zX1BDOiAvLyDooajljZXlrprkuYlcclxuICAgICAgICAgICAgICAgICAgICAgICAgaXRlbS5lZGl0b3IgPSBFeGVjdXRlRm9ybXNDb21wb25lbnQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGl0ZW0uY29udmVydGVyID0gbmV3IEV4ZWN1dGVGb3Jtc0NvbnZlcnRlcigpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpdGVtLmVkaXRvclBhcmFtcyA9IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxvY2F0aW9uOiAnbm90aWZ5QWN0aXZpdHknLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGFiOiAnd2ViJ1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIFJlc291cmNlS2V5cy53Zl9FeGVjdXRlRm9ybXNfTW9iaWxlOiAvLyDooajljZXlrprkuYlcclxuICAgICAgICAgICAgICAgICAgICAgICAgaXRlbS5lZGl0b3IgPSBFeGVjdXRlRm9ybXNDb21wb25lbnQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGl0ZW0uY29udmVydGVyID0gbmV3IEV4ZWN1dGVGb3Jtc0NvbnZlcnRlcigpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpdGVtLmVkaXRvclBhcmFtcyA9IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxvY2F0aW9uOiAnbm90aWZ5QWN0aXZpdHknLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGFiOiAnbW9iaWxlJ1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIFJlc291cmNlS2V5cy5tZXNzYWdlTm90aWNlOiAvLyDmtojmga/pgJrnn6VcclxuICAgICAgICAgICAgICAgICAgICAgICAgaXRlbS5lZGl0b3IgPSBNZXNzYWdlTm90aWNlQ29tcG9uZW50O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpdGVtLmNvbnZlcnRlciA9IG5ldyBNZXNzYWdlTm90aWNlQ29udmVydGVyKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGl0ZW0uZWRpdG9yUGFyYW1zID0ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbG9jYXRpb246ICdhY3Rpdml0eSdcclxuICAgICAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgICAgICAgICAgICAgaXRlbS5lZGl0b3IgPSBFeHRlbmRQcm9wZXJ0eUNvbXBvbmVudDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaXRlbS5jb252ZXJ0ZXIgPSBuZXcgRXh0ZW5kUHJvcGVydHlDb252ZXJ0ZXIoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG4iXX0=