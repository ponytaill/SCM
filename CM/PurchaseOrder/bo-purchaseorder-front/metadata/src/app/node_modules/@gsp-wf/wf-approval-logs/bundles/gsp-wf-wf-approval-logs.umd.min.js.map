{"version":3,"sources":["ng://@gsp-wf/wf-approval-logs/lib/service/i18n/en.ts","ng://@gsp-wf/wf-approval-logs/lib/service/i18n/index.ts","ng://@gsp-wf/wf-approval-logs/lib/service/i18n/zh-chs.ts","ng://@gsp-wf/wf-approval-logs/lib/service/i18n/zh-cht.ts","ng://@gsp-wf/wf-approval-logs/lib/wf-approval-logs.component.ts","ng://@gsp-wf/wf-approval-logs/lib/wf-approval-logs.service.ts","ng://@gsp-wf/wf-approval-logs/lib/service/translate.pipe.ts","ng://@gsp-wf/wf-approval-logs/lib/wf-approval-logs.module.ts"],"names":["translate","zh-CHS","static","approvalLogs","title","approvalOpinion","startTime","endTime","processTime","todo","done","undo","toAssign","toRead","processNotFound","workItemNotFound","attachment","noResolvedUser","terminal","web","mobile","submit","flowchart","en","zh-CHT","WfApprovalLogsComponent","Object","defineProperty","prototype","dataId","this","getTaskLogs","procInstId","actDefId","ifForecast","type","payload","ngOnInit","fill","cls","wfForecastPayload","_this","System","import","then","logContainer","window","document","querySelector","bizInstId","processInstanceId","activityDefinitionId","container","typeId","showHeader","ShowHeader","showViewProcess","ShowViewProcess","isIncludeHistory","gspTaskCenterBizLog","ApprovalLogUtil","getWebLogsHtml","result","Component","args","selector","template","HostBinding","Input","WfApprovalLogsService","showByProcInstId","modalConfig","getI18nValue","width","height","showButtons","compRef","resolver","resolveComponentFactory","create","injector","instance","ProcInstId","dialog","modalService","show","msgService","warning","showByDataId","DataId","name","defaultLang","localStorage","getItem","langData","indexOf","split","reduce","obj","key","Injectable","MessagerService","Injector","ComponentFactoryResolver","BsModalService","addEventListener","event","location","origin","search","data","close","TranslatePipe","transform","defaultVal","r","Pipe","WfApprovalLogsModule","NgModule","declarations","imports","CommonModule","FileListModule","providers","exports","entryComponents"],"mappings":"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","sourcesContent":["export const en = {\r\n    static: {\r\n        approvalLogs: {\r\n            title: 'Approval Logs',\r\n            approvalOpinion: 'Approval opinion',\r\n            startTime: 'StartTime',\r\n            endTime: 'EndTime',\r\n            processTime: 'ProcessTime',\r\n            todo: 'Todo',\r\n            done: 'Done',\r\n            undo: 'Undo',\r\n            toAssign: 'To assign',\r\n            toRead: 'To read',\r\n            processNotFound: 'process instance id is null',\r\n            workItemNotFound: 'work item id is null',\r\n            attachment: 'attachment',\r\n            noResolvedUser: 'No Resolved User',\r\n            terminal: 'From',\r\n            web: 'Web',\r\n            mobile: 'Mobile',\r\n            submit: 'Submit'\r\n        },\r\n        flowchart: {\r\n            title: 'Flow Chart',\r\n            processNotFound: 'process instance id is null'\r\n        }\r\n    }\r\n};\r\n","import { en } from './en';\r\nimport { zh_CHS } from './zh-chs';\r\nimport { zh_CHT } from './zh-cht';\r\n\r\nexport const translate = {\r\n    'zh-CHS': zh_CHS,\r\n    'en': en,\r\n    'zh-CHT': zh_CHT\r\n};\r\n","export const zh_CHS = {\r\n    static: {\r\n        approvalLogs: {\r\n            title: 'å®¡æ¹è®°å½',\r\n            approvalOpinion: 'å®¡æ¹æè§',\r\n            startTime: 'æ¥æ¶æ¶é´',\r\n            endTime: 'å¤çæ¶é´',\r\n            processTime: 'å¤çæ¶é¿',\r\n            todo: 'å¾åç',\r\n            done: 'å·²åç',\r\n            undo: 'æªåé',\r\n            toAssign: 'æªææ´¾',\r\n            toRead: 'å¾é',\r\n            processNotFound: 'æµç¨å®ä¾IDä¸ºç©º',\r\n            workItemNotFound: 'å·¥ä½é¡¹IDä¸ºç©º',\r\n            attachment: 'éä»¶',\r\n            noResolvedUser: 'æªè§£æåºç¨æ·',\r\n            terminal: 'æ¥èª',\r\n            web: 'çµèç«¯',\r\n            mobile: 'ç§»å¨ç«¯',\r\n            submit: 'å·²æäº¤'\r\n        },\r\n        flowchart: {\r\n            title: 'æ¥çæµç¨',\r\n            processNotFound: 'æµç¨å®ä¾IDä¸ºç©º'\r\n        }\r\n    }\r\n};\r\n","export const zh_CHT = {\r\n    static: {\r\n        approvalLogs: {\r\n            title: 'å¯©æ¹è¨é',\r\n            approvalOpinion: 'å¯©æ¹æè¦',\r\n            startTime: 'æ¥æ¶æé',\r\n            endTime: 'èçæé',\r\n            processTime: 'èçæé·',\r\n            todo: 'å¾è¾¦ç',\r\n            done: 'å·²è¾¦ç',\r\n            undo: 'æªåé',\r\n            toAssign: 'æªææ´¾',\r\n            toRead: 'å¾é',\r\n            processNotFound: 'æµç¨å¯¦ä¾IDçºç©º',\r\n            workItemNotFound: 'å·¥ä½é IDçºç©º',\r\n            attachment: 'éä»¶',\r\n            noResolvedUser: 'æªè§£æåºç¨æ¶',\r\n            terminal: 'ä¾èª',\r\n            web: 'é»è¦ç«¯',\r\n            mobile: 'ç§»åç«¯',\r\n            submit: 'å·²æäº¤'\r\n        },\r\n        flowchart: {\r\n            title: 'æ¥çæµç¨',\r\n            processNotFound: 'æµç¨å¯¦ä¾IDçºç©º'\r\n        }\r\n    }\r\n};","import { Component, OnInit, Input, HostBinding } from '@angular/core';\r\n\r\ndeclare var System: any;\r\n\r\n@Component({\r\n  selector: 'wf-approval-logs',\r\n  templateUrl: './wf-approval-logs.component.html',\r\n  styleUrls: ['./wf-approval-logs.component.css'],\r\n})\r\nexport class WfApprovalLogsComponent implements OnInit {\r\n\r\n  dataId: string; // åæ®id\r\n  procInstId: string; // æµç¨å®ä¾id\r\n  ifForecast: boolean = false; // æ¯å¦é¢æµæ¥å¿\r\n  @HostBinding('class') cls = ''; // å¼¹æ¡æ¾ç¤ºæ¶ï¼å¢å æ ·å¼\r\n\r\n  @Input() ShowHeader: boolean = false;//æ¯å¦æ¾ç¤ºæ¥å¿å¤´é¨\r\n  @Input() ShowViewProcess: boolean = false;//æ¯å¦æ¾ç¤ºæ¥çæµç¨æé®\r\n\r\n  logContainer: any;//æ¥å¿å®¹å¨\r\n\r\n  @Input()\r\n  set DataId(dataId: string) {\r\n    if (dataId) {\r\n      this.dataId = dataId;\r\n      this.getTaskLogs();\r\n    }\r\n  }\r\n\r\n  @Input()\r\n  set ProcInstId(procInstId: string) {\r\n    if (procInstId) {\r\n      this.procInstId = procInstId;\r\n      this.getTaskLogs();\r\n    }\r\n  }\r\n\r\n  @Input()\r\n  set ActivityDefinitionId(actDefId: string) {\r\n    if (actDefId) {\r\n      this.getTaskLogs(actDefId);\r\n    }\r\n  }\r\n\r\n  @Input()\r\n  set IfForecast(ifForecast: string) {\r\n    if (ifForecast) {\r\n      this.ifForecast = ifForecast == 'true' ? true : false;\r\n      this.getTaskLogs();\r\n    }\r\n  }\r\n\r\n  @Input()\r\n  set Type(type: string) {\r\n    if (type === 'process') {// type = 'process'æ¥çæµç¨æ¥å¿ï¼type = 'activity'ï¼æ¥çèç¹æ¥å¿\r\n      this.getTaskLogs();\r\n    }\r\n  }\r\n\r\n  @Input()\r\n  set processForecastPayload(payload: any) {\r\n    if (payload) {\r\n      this.ifForecast = true;\r\n      this.getTaskLogs('', payload);\r\n    }\r\n  }\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit() {\r\n    // this.getTaskLogs();\r\n  }\r\n\r\n  fill() {\r\n    this.cls = 'd-flex flex-fill h-100 f-utils-absolute-all p-4';\r\n  }\r\n\r\n  private getTaskLogs(actDefId?: string, wfForecastPayload?: any) {\r\n    if (this.dataId || this.procInstId || wfForecastPayload) {\r\n      System.import('/platform/runtime/wf/webapp/mobiletaskcenter/taskComment.js?v=20211022').then(() => {\r\n        if (this.dataId) {\r\n          this.logContainer = window.document.querySelector('.dataId' + this.dataId);\r\n        } else {\r\n          this.logContainer = window.document.querySelector('.procInstId' + this.procInstId);\r\n        }\r\n        let payload = {\r\n          bizInstId: this.dataId,\r\n          processInstanceId: this.procInstId,\r\n          activityDefinitionId: actDefId,\r\n          container: this.logContainer,\r\n          terminal: 'web',\r\n          typeId: 'wf',\r\n          ifForecast: this.ifForecast,\r\n          showHeader: this.ShowHeader,\r\n          showViewProcess: this.ShowViewProcess,\r\n          isIncludeHistory: false,\r\n          wfForecastPayload: wfForecastPayload\r\n        };\r\n        (window as any).gspTaskCenterBizLog.ApprovalLogUtil.getWebLogsHtml(payload).then((result) => { });\r\n      });\r\n    }\r\n  }\r\n}\r\n","import { Injectable, Injector, ComponentFactoryResolver } from '@angular/core';\r\nimport { MessagerService } from '@farris/ui-messager';\r\nimport { ModalOptions, BsModalService } from '@farris/ui-modal';\r\nimport { translate } from './service/i18n/index';\r\nimport { WfApprovalLogsComponent } from './wf-approval-logs.component';\r\n\r\n@Injectable()\r\nexport class WfApprovalLogsService {\r\n\r\n    dialog: any;//å¼¹æ¡\r\n\r\n    constructor(\r\n        private msgService: MessagerService,\r\n        private injector: Injector,\r\n        private resolver: ComponentFactoryResolver,\r\n        private modalService: BsModalService,\r\n    ) {\r\n        //SPAæ¨¡å¼ä¸ï¼ç¹å»éä»¶ï¼çªå£å³é­\r\n        window.addEventListener(\"message\", (event) => {\r\n            if(window.document.location.origin.search(event.origin) > -1) {\r\n                if (event.data == 'TaskCloseLogDialog' && this.dialog) {\r\n                    this.dialog.close(); \r\n                }\r\n            }\r\n        }, false)\r\n    }\r\n\r\n    showByProcInstId(procInstId: string) {\r\n        if (!procInstId) {\r\n            this.msgService.warning(this.getI18nValue('static.approvalLogs.processNotFound'));\r\n        } else {\r\n            const modalConfig: ModalOptions = {\r\n                title: this.getI18nValue('static.approvalLogs.title'),\r\n                width: 550,\r\n                height: 520,\r\n                showButtons: false,\r\n            };\r\n            const compFactory = this.resolver.resolveComponentFactory(WfApprovalLogsComponent);\r\n            const compRef = compFactory.create(this.injector);\r\n            compRef.instance.ProcInstId = procInstId;\r\n            compRef.instance.ShowHeader = false;\r\n            compRef.instance.ShowViewProcess = false;\r\n            compRef.instance.fill();\r\n            this.dialog = this.modalService.show(compRef, modalConfig);\r\n        }\r\n    }\r\n\r\n    showByDataId(dataId: string) {\r\n        const modalConfig: ModalOptions = {\r\n            title: this.getI18nValue('static.approvalLogs.title'),\r\n            width: 550,\r\n            height: 520,\r\n            showButtons: false,\r\n        };\r\n        const compFactory = this.resolver.resolveComponentFactory(WfApprovalLogsComponent);\r\n        const compRef = compFactory.create(this.injector);\r\n        compRef.instance.DataId = dataId;\r\n        compRef.instance.ShowHeader = false;\r\n        compRef.instance.ShowViewProcess = false;\r\n        compRef.instance.fill();\r\n        this.dialog = this.modalService.show(compRef, modalConfig);\r\n    }\r\n\r\n    private getI18nValue(name: string) {\r\n        if (!name) { return ''; }\r\n        var defaultLang = localStorage.getItem('languageCode');\r\n        var langData = defaultLang ? translate[defaultLang] : translate['zh-CHS'];\r\n        let resultVal = '';\r\n        if (name.indexOf('.') === -1) {\r\n            resultVal = langData[name];\r\n        } else {\r\n            resultVal = name.split('.').reduce((obj, key) => {\r\n                if (obj) {\r\n                    return obj[key];\r\n                } else {\r\n                    return null;\r\n                }\r\n            }, langData);\r\n        }\r\n        return resultVal;\r\n    }\r\n}\r\n","import { Pipe, PipeTransform } from '@angular/core';\r\nimport { translate } from './i18n/index';\r\n\r\n@Pipe({ name: 'translate' })\r\nexport class TranslatePipe implements PipeTransform {\r\n\r\n    constructor(\r\n    ) { }\r\n\r\n    transform(name: any, defaultVal = ''): any {\r\n        const r = this.getI18nValue(name);\r\n        return r ? r : defaultVal;\r\n    }\r\n\r\n    getI18nValue(name: string) {\r\n        if (!name) { return ''; }\r\n        var defaultLang = localStorage.getItem('languageCode');\r\n        var langData = defaultLang ? translate[defaultLang] : translate['zh-CHS'];\r\n        let resultVal = '';\r\n        if (name.indexOf('.') === -1) {\r\n          resultVal = langData[name];\r\n        } else {\r\n          resultVal = name.split('.').reduce((obj, key) => {\r\n            if (obj) {\r\n              return obj[key];\r\n            } else {\r\n              return null;\r\n            }\r\n          }, langData);\r\n        }\r\n        return resultVal;\r\n      }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { WfApprovalLogsComponent } from './wf-approval-logs.component';\r\nimport { TranslatePipe } from './service/translate.pipe';\r\nimport { CommonModule } from '@angular/common';\r\nimport { WfApprovalLogsService } from './wf-approval-logs.service';\r\nimport { FileListModule } from '@gsp-svc/file-viewer';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    WfApprovalLogsComponent,\r\n    TranslatePipe,\r\n  ],\r\n  imports: [\r\n    CommonModule,\r\n    FileListModule\r\n  ],\r\n  providers: [\r\n    WfApprovalLogsService,\r\n  ],\r\n  exports: [\r\n    WfApprovalLogsComponent\r\n  ],\r\n  entryComponents: [\r\n    WfApprovalLogsComponent,\r\n  ]\r\n})\r\nexport class WfApprovalLogsModule { }\r\n"]}