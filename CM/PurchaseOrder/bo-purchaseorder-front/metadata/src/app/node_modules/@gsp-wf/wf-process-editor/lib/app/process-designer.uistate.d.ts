import { KeyMap } from '@farris/ui-property-panel';
import { FlowFormInfo } from '../domain/entities/flowform-info';
import { VarEntity } from '@gsp-svc/expression';
import { GSPCommonModel } from '@gsp-bef/gsp-cm-metadata';
import { HttpService } from '@ecp-caf/caf-common';
export declare class ProcessDesignerUIState {
    private http;
    constructor(http: HttpService);
    flowFormInfo: FlowFormInfo;
    content: string;
    propertyConfig: any[];
    propertyData: any;
    POST_MESSAGE_TARGET: string;
    BE: GSPCommonModel;
    schemas: any[];
    counterSignVariables: any[];
    approvalItems: any[];
    userActList: any[];
    allActList: any[];
    bizActivityId: string;
    isAdministratorConfig: boolean;
    administrator: any;
    organizations: any[];
    assignIterator: KeyMap[];
    completeIterator: KeyMap[];
    completeIterator4Claim: KeyMap[];
    boolIterator: KeyMap[];
    noJump4Sign: KeyMap[];
    procInstContext: VarEntity[];
    urgeContext: VarEntity[];
    /**
     * 流程参数上下文
     */
    formalParameterContext: VarEntity[];
    /**
     * 参与者上下文
     */
    participantContext: VarEntity[];
    /**
     * 活动构件参数上下文
     */
    activityComponentContext: VarEntity[];
    processVariableContext: VarEntity[];
    private processVariables;
    ProcessVariables: any[];
    /**
     * 汇报级次
     */
    dimensions: {
        value: string;
        text: string;
    }[];
    /**
     * 启动方式
     */
    startModeIterator: KeyMap[];
    /**
     * 显示终端
     */
    displayTerminal: KeyMap[];
    /**
     * 消息渠道列表
     */
    messageChannels: any[];
    orgTypeCollection: {
        value: any;
        text: any;
    }[];
    variableContextName(key: string): string;
    ranksName(value: string): string;
    getMessageChannels(): void;
    getAdministratorInfo(): void;
    private getCurrentUser;
    private getAdministrator;
    private getAdministratorConfig;
    private getSysOrgById;
    private getSysOrgWithAllSubsById;
    private getCurUserInfo;
    private setProcessVariableContext;
    /**
     * 获取框架的顶级window
     * 进行跨域封装
     */
    private getTopWindow;
    initUIState(): void;
    /**
     * 获取所有审批节点信息
     * @param data
     */
    getUserActList(data: any[]): void;
    /**
     * 获取所有结束节点信息
     * @param data
     */
    getEndEventList(data: any[]): void;
}
