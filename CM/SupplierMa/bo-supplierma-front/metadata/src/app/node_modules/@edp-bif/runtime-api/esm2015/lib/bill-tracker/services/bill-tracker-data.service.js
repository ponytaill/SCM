/**
 * @fileoverview added by tsickle
 * Generated from: lib/bill-tracker/services/bill-tracker-data.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { HttpService } from '@ecp-caf/caf-common';
import { of } from 'rxjs';
import { switchMap, catchError } from 'rxjs/operators';
import { HttpClient } from '@angular/common/http';
import { BpmnModelJsonHelper } from '@edp-aif/common-api';
import { GetDownBillsInfoArgs } from '../../entity/tracking/GetDownBillsInfoArgs';
import { GetUpBillsInfoArgs } from '../../entity/tracking/GetUpBillsInfoArgs';
import { GetMainEntityDataArgs } from '../args/GetMainEntityDataArgs';
import { CanTrackingResult } from '../args/CanTrackingResult';
import { DownBillInfoResult } from '../args/DownBillInfoResult';
import { UpBillInfoResult } from '../args/UpBillInfoResult';
import { EntityDataResult } from '../args/EntityDataResult';
import { BillDataInfo } from '../../entity/tracking/BillDataInfo';
import { GetBillsInfoArgs } from '../../entity/tracking/GetBillsInfoArgs';
import { JointQueryParameterType } from '@edp-bif/common-api';
import { GetJointQueryParametersArgs } from '../args';
import { JointQueryParameterResult } from '../../entity/tracking/JointQueryParameterResult';
import { JointQueryParametersContent } from '../../entity/tracking/JointQueryParametersContent';
import { ExpressionJointQueryParameterContent } from '../../entity/tracking/ExpressionJointQueryParameterContent';
import { FieldJointQueryParameterContent } from "../../entity/tracking/FieldJointQueryParameterContent";
import { JointQueryParameterMode } from '../../entity/tracking/JointQueryParameterMode';
export class BillTrackerDataService {
    /**
     * @param {?} httpService
     * @param {?} httpClient
     */
    constructor(httpService, httpClient) {
        this.httpService = httpService;
        this.httpClient = httpClient;
        this.baseUrl = "/api/runtime/aif/v1.0/billtracking";
        this.canTrackingUrl = this.baseUrl + "/cantracking";
        this.canTrackingMethod = "POST";
        this.getDownBillsInfoUrl = this.baseUrl + "/getdownbillsinfo";
        this.getDownBillsInfoMethod = "POST";
        this.getUpBillsInfoUrl = this.baseUrl + "/getupbillsinfo";
        this.getUpBillsInfoMethod = "POST";
        this.getEntityDataUrl = this.baseUrl + "/getentitydata";
        this.getEntityDataMethod = "POST";
        this.jointQueryParserUrl = "/api/runtime/aif/v1.0/jointquery";
        this.jointQueryParserMethod = "POST";
    }
    /**
     * @param {?} args
     * @return {?}
     */
    getJointQueryParameters(args) {
        /** @type {?} */
        const body = args.ConvertToJson();
        /** @type {?} */
        const opt = this.httpService.setHeader({ body: body });
        return this.httpService.request(this.jointQueryParserMethod, this.jointQueryParserUrl, opt).pipe(switchMap((/**
         * @param {?} res
         * @return {?}
         */
        (res) => {
            /** @type {?} */
            let obj = res;
            /** @type {?} */
            const results = (/** @type {?} */ (BpmnModelJsonHelper.FromJson(obj.value, JointQueryParameterResult)));
            return of(results);
        })), catchError((/**
         * @param {?} err
         * @return {?}
         */
        (err) => {
            try {
                if (typeof err.error == "string") {
                    err.error = JSON.parse(err.error);
                }
            }
            catch (e) {
            }
            throw err;
        })));
    }
    /**
     * @param {?} args
     * @return {?}
     */
    canTracking(args) {
        /** @type {?} */
        const opt = this.httpService.setHeader({ body: args.ConvertToJson(), responseType: "text" });
        return this.httpService.request(this.canTrackingMethod, this.canTrackingUrl, opt).pipe(switchMap((/**
         * @param {?} res
         * @return {?}
         */
        (res) => {
            /** @type {?} */
            let result = new CanTrackingResult();
            result.LoadFromJson(res);
            return of(result);
        })), catchError((/**
         * @param {?} err
         * @return {?}
         */
        (err) => {
            try {
                if (typeof err.error == "string") {
                    err.error = JSON.parse(err.error);
                }
            }
            catch (e) {
            }
            throw err;
        })));
    }
    /**
     * @param {?} args
     * @return {?}
     */
    getDownBillsInfo(args) {
        /** @type {?} */
        const opt = this.httpService.setHeader({ body: args.ConvertToJson(), responseType: "text" });
        return this.httpService.request(this.getDownBillsInfoMethod, this.getDownBillsInfoUrl, opt).pipe(switchMap((/**
         * @param {?} res
         * @return {?}
         */
        (res) => {
            /** @type {?} */
            let result = BpmnModelJsonHelper.FromJson(res, DownBillInfoResult);
            return of(result);
        })), catchError((/**
         * @param {?} err
         * @return {?}
         */
        (err) => {
            try {
                if (typeof err.error == "string") {
                    err.error = JSON.parse(err.error);
                }
            }
            catch (e) {
            }
            throw err;
        })));
    }
    /**
     * @param {?} args
     * @return {?}
     */
    getUpBillsInfo(args) {
        /** @type {?} */
        const opt = this.httpService.setHeader({ body: args.ConvertToJson(), responseType: "text" });
        return this.httpService.request(this.getUpBillsInfoMethod, this.getUpBillsInfoUrl, opt).pipe(switchMap((/**
         * @param {?} res
         * @return {?}
         */
        (res) => {
            /** @type {?} */
            let result = BpmnModelJsonHelper.FromJson(res, UpBillInfoResult);
            return of(result);
        })), catchError((/**
         * @param {?} err
         * @return {?}
         */
        (err) => {
            try {
                if (typeof err.error == "string") {
                    err.error = JSON.parse(err.error);
                }
            }
            catch (e) {
            }
            throw err;
        })));
    }
    /**
     * @param {?} args
     * @return {?}
     */
    getEntityData(args) {
        /** @type {?} */
        const opt = this.httpService.setHeader({ body: args.ConvertToJson(), responseType: "text" });
        return this.httpService.request(this.getEntityDataMethod, this.getEntityDataUrl, opt).pipe(switchMap((/**
         * @param {?} res
         * @return {?}
         */
        (res) => {
            /** @type {?} */
            const result = new EntityDataResult();
            result.LoadFromJson(res);
            return of(result);
        })), catchError((/**
         * @param {?} err
         * @return {?}
         */
        (err) => {
            try {
                if (typeof err.error == "string") {
                    err.error = JSON.parse(err.error);
                }
            }
            catch (e) {
            }
            throw err;
        })));
    }
    /**
     * @param {?} canTrackingResult
     * @return {?}
     */
    buildEntryBillInfo(canTrackingResult) {
        /** @type {?} */
        const info = new DownBillInfoResult();
        info.schemaId = canTrackingResult.schemaId;
        info.suCode = canTrackingResult.suCode;
        info.voName = canTrackingResult.voName;
        info.billTrackingSettings = canTrackingResult.billTrackingSettings;
        info.bizKind = canTrackingResult.bizKind;
        info.bizType = canTrackingResult.bizType;
        info.jointQueryMode = canTrackingResult.jointQueryMode;
        info.jointQueryParameters = canTrackingResult.jointQueryParameters;
        info.trackingSourceType = canTrackingResult.trackingSourceType;
        /** @type {?} */
        const dataInfo = new BillDataInfo();
        dataInfo.caption = canTrackingResult.caption;
        dataInfo.dataId = canTrackingResult.dataId;
        dataInfo.summary = canTrackingResult.summary;
        dataInfo.trackingMappingAssociations = [];
        dataInfo.billChildInfos = canTrackingResult.billChildInfos;
        dataInfo.curYear = canTrackingResult.curYear;
        info.billDataInfos = [dataInfo];
        info.documentTypeId = canTrackingResult.documentTypeId;
        return info;
    }
    /**
     * @param {?} cell
     * @return {?}
     */
    buildGetBillsInfoArgs(cell) {
        /** @type {?} */
        const args = new GetBillsInfoArgs();
        args.billDataId = cell.billDataInfo.dataId;
        args.documentTypeId = cell.billInfo.documentTypeId;
        args.bizKind = cell.billInfo.bizKind;
        args.bizType = cell.billInfo.bizType;
        args.billChildInfos = cell.billDataInfo.billChildInfos;
        args.curYear = cell.billDataInfo.curYear;
        return args;
    }
    /**
     * @param {?} cell
     * @return {?}
     */
    buildGetUpBillsInfoArgs(cell) {
        /** @type {?} */
        const args = new GetUpBillsInfoArgs();
        args.LoadFromJsonObject(this.buildGetBillsInfoArgs(cell).ConvertToJsonObject());
        return args;
    }
    /**
     * @param {?} cell
     * @return {?}
     */
    buildGetDownBillsInfoArgs(cell) {
        /** @type {?} */
        const args = new GetDownBillsInfoArgs();
        args.LoadFromJsonObject(this.buildGetBillsInfoArgs(cell).ConvertToJsonObject());
        return args;
    }
    /**
     * @param {?} billInfo
     * @param {?} billDataInfo
     * @return {?}
     */
    buildGetMainEntityDataArgs(billInfo, billDataInfo) {
        /** @type {?} */
        const args = new GetMainEntityDataArgs();
        args.dataId = billDataInfo.dataId;
        args.suCode = billInfo.suCode;
        args.schemaId = billInfo.schemaId;
        args.trackingSourceType = billInfo.trackingSourceType;
        args.billChildInfos = billDataInfo.billChildInfos;
        args.curYear = billDataInfo.curYear;
        return args;
    }
    /**
     * @param {?} jointQueryParameters
     * @return {?}
     */
    hasDynamicParams(jointQueryParameters) {
        if (!jointQueryParameters.params) {
            return false;
        }
        // 添加自定义参数
        if (Array.isArray(jointQueryParameters.params)) {
            return jointQueryParameters.params.find((/**
             * @param {?} p
             * @return {?}
             */
            (p) => p.type != JointQueryParameterType.Constant)) != null;
        }
        else {
            return false;
        }
    }
    /**
     * 构造联查参数解析器参数
     * @param {?} jointQueryParameters
     * @param {?} billInfo
     * @param {?} billDataInfo
     * @return {?}
     */
    buildGetJointQueryParametersArgs(jointQueryParameters, billInfo, billDataInfo) {
        /** @type {?} */
        const args = new GetJointQueryParametersArgs();
        args.dataId = billDataInfo.dataId;
        args.suCode = billInfo.suCode;
        args.schemaId = billInfo.schemaId;
        args.trackingSourceType = billInfo.trackingSourceType;
        args.contents = [];
        if (Array.isArray(jointQueryParameters.params)) {
            jointQueryParameters.params.forEach((/**
             * @param {?} it
             * @return {?}
             */
            it => {
                if (it.type == JointQueryParameterType.Constant) {
                    return;
                }
                /** @type {?} */
                const jointQueryParametersContent = new JointQueryParametersContent();
                if (it.type == JointQueryParameterType.Field) {
                    jointQueryParametersContent.jointQueryParameterMode = JointQueryParameterMode.FIELD;
                    /** @type {?} */
                    const content = new FieldJointQueryParameterContent();
                    content.parameterCode = it.code;
                    content.fieldContent = it.value;
                    jointQueryParametersContent.content = content.ConvertToJson();
                }
                else if (it.type == JointQueryParameterType.Expression) {
                    jointQueryParametersContent.jointQueryParameterMode = JointQueryParameterMode.EXPRESSION;
                    /** @type {?} */
                    const content = new ExpressionJointQueryParameterContent();
                    content.parameterCode = it.code;
                    content.expressionContent = it.value;
                    jointQueryParametersContent.content = content.ConvertToJson();
                }
                args.contents.push(jointQueryParametersContent);
            }));
        }
        return args;
    }
}
BillTrackerDataService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
BillTrackerDataService.ctorParameters = () => [
    { type: HttpService },
    { type: HttpClient }
];
if (false) {
    /** @type {?} */
    BillTrackerDataService.prototype.baseUrl;
    /** @type {?} */
    BillTrackerDataService.prototype.canTrackingUrl;
    /** @type {?} */
    BillTrackerDataService.prototype.canTrackingMethod;
    /** @type {?} */
    BillTrackerDataService.prototype.getDownBillsInfoUrl;
    /** @type {?} */
    BillTrackerDataService.prototype.getDownBillsInfoMethod;
    /** @type {?} */
    BillTrackerDataService.prototype.getUpBillsInfoUrl;
    /** @type {?} */
    BillTrackerDataService.prototype.getUpBillsInfoMethod;
    /** @type {?} */
    BillTrackerDataService.prototype.getEntityDataUrl;
    /** @type {?} */
    BillTrackerDataService.prototype.getEntityDataMethod;
    /** @type {?} */
    BillTrackerDataService.prototype.jointQueryParserUrl;
    /** @type {?} */
    BillTrackerDataService.prototype.jointQueryParserMethod;
    /** @type {?} */
    BillTrackerDataService.prototype.httpService;
    /** @type {?} */
    BillTrackerDataService.prototype.httpClient;
}
//# sourceMappingURL=data:application/json;base64,