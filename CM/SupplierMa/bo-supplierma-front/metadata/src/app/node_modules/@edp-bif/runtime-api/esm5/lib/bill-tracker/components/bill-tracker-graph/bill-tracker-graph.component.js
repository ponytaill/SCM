/**
 * @fileoverview added by tsickle
 * Generated from: lib/bill-tracker/components/bill-tracker-graph/bill-tracker-graph.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Component, ViewChild, ElementRef, Output, EventEmitter, Inject, LOCALE_ID, Input, ViewContainerRef, Injector, ComponentFactoryResolver, ChangeDetectorRef } from '@angular/core';
import { Graph } from '../../mxgraph-ext/Graph';
import { mxEvent, mxGraphHandler, mxEventObject, mxGraphSelectionModel, mxConstants, mxImage, mxClient, mxGuide, mxPolyline, mxLayoutManager, mxConnectionHandler, mxEllipse, mxHandle, mxVertexHandler, mxPoint, mxPrintPreview } from "../../../ref/mxgraph";
import { BillTrackerArgs } from '../../config/bill-tracker-args';
import { BillTrackerDataService } from '../../services/bill-tracker-data.service';
import { BillTrackerDirection } from '../../config/bill-tracker-direction';
import { BillTrackerLocalePipe } from '../../pipe/bill-tracker-locale.pipe';
import { MessagerService } from '@farris/ui-messager';
import { LoadingService } from '@farris/ui-loading';
import { BsModalService } from '@farris/ui-modal';
import { BillTrackerConstant } from '../../config/bill-tracker-constant';
import { RevertCompactTreeLayout } from '../../mxgraph-ext/RevertCompactTreeLayout';
import { CompactTreeLayout } from '../../mxgraph-ext/CompactTreeLayout';
import { EntryCellData } from '../../../entity/tracking/cell-data/EntryCellData';
import { UpCellData } from '../../../entity/tracking/cell-data/UpCellData';
import { DownCellData } from '../../../entity/tracking/cell-data/DownCellData';
import { BillTrackingSettings } from '@edp-bif/common-api';
import { NotifyService } from '@farris/ui-notify';
import { BillTrackerDataInfoService } from '../../services/bill-tracker-data-info.service';
import { CellOverlay } from '../../mxgraph-ext/CellOverlay';
import { CellOverlayState } from '../../mxgraph-ext/CellOverlayState';
import { Events } from '../../mxgraph-ext/Events';
import { billTrackerCellCss } from '../../config/bill-tracker-cell-css';
import { addCustomCSS } from '../../utils/addCustomCSS';
import { Outline } from '../../mxgraph-ext/Outline';
// 在head中添加节点样式
addCustomCSS(billTrackerCellCss);
var BillTrackerGraphComponent = /** @class */ (function () {
    function BillTrackerGraphComponent(args, localeId, dataService, notify, messager, loading, modal, vcr, inj, cfr, cdr) {
        this.dataService = dataService;
        this.notify = notify;
        this.messager = messager;
        this.loading = loading;
        this.modal = modal;
        this.vcr = vcr;
        this.inj = inj;
        this.cfr = cfr;
        this.cdr = cdr;
        this.selectEventEmitter = new EventEmitter();
        this.stateChangeEventEmitter = new EventEmitter();
        this.hspace = 80;
        this.vspace = 28;
        this.defaultWidth = 250;
        this.defaultHeight = 138;
        this.nodeWidth = this.defaultWidth;
        this.nodeHeight = this.defaultHeight;
        this.defaultNonEntryImage = (!mxClient.IS_SVG) ? BillTrackerConstant.IMAGE_PATH + '/non-entry-bill.png' : BillTrackerConstant.IMAGE_PATH + '/non-entry-bill.svg';
        this.defaultEntryImage = (!mxClient.IS_SVG) ? BillTrackerConstant.IMAGE_PATH + '/entry-bill.png' : BillTrackerConstant.IMAGE_PATH + '/entry-bill.svg';
        this.defaultOverlayWidth = 26;
        this.defaultOverlayHeight = 26;
        this.overlayWidth = this.defaultOverlayWidth;
        this.overlayHeight = this.defaultOverlayHeight;
        this.defaultUpSearchImage = new mxImage(BillTrackerConstant.IMAGE_PATH + '/tracker-plus.svg', this.overlayWidth, this.overlayHeight);
        this.defaultDownSearchImage = new mxImage(BillTrackerConstant.IMAGE_PATH + '/tracker-plus.svg', this.overlayWidth, this.overlayHeight);
        this.defaultUpFolderImage = new mxImage(BillTrackerConstant.IMAGE_PATH + '/tracker-minus.svg', this.overlayWidth, this.overlayHeight);
        this.defaultDownFolderImage = new mxImage(BillTrackerConstant.IMAGE_PATH + '/tracker-minus.svg', this.overlayWidth, this.overlayHeight);
        this.upSearchImage = this.defaultUpSearchImage;
        this.downSearchImage = this.defaultDownSearchImage;
        this.upFolderImage = this.defaultUpFolderImage;
        this.downFolderImage = this.defaultDownFolderImage;
        this.upSearchOffset = new mxPoint(-50, 0);
        this.downSearchOffset = new mxPoint(50, 0);
        /**
         * 正在加载中的单据节点请求数
         */
        this.numCellsAddingReq = 0;
        this.localePipe = new BillTrackerLocalePipe(localeId);
        this.dataInfoService = new BillTrackerDataInfoService();
        this.billTrackerArgs = args;
        /** @type {?} */
        var graphOptions = this.billTrackerArgs.graphOptions;
        this.graphOptions = graphOptions;
        /** @type {?} */
        var gridOptions = this.billTrackerArgs.gridOptions;
        this.gridOptions = gridOptions;
        this.upSearchImage = graphOptions && graphOptions.upSearchImage ? new mxImage(graphOptions.upSearchImage, this.overlayWidth, this.overlayHeight) : this.upSearchImage;
        this.downSearchImage = graphOptions && graphOptions.downSearchImage ? new mxImage(graphOptions.downSearchImage, this.overlayWidth, this.overlayHeight) : this.downSearchImage;
        this.upFolderImage = graphOptions && graphOptions.upFolderImage ? new mxImage(graphOptions.upFolderImage, this.overlayWidth, this.overlayHeight) : this.upFolderImage;
        this.downFolderImage = graphOptions && graphOptions.downFolderImage ? new mxImage(graphOptions.downFolderImage, this.overlayWidth, this.overlayHeight) : this.downFolderImage;
    }
    /**
     * @return {?}
     */
    BillTrackerGraphComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.graph = this.createGraph();
        this.createLayout(this.graph);
        this.layoutManager = new mxLayoutManager(this.graph);
        this.outline = new Outline(this.graph, this.mxOutlineContainer.nativeElement);
    };
    /**
     * @return {?}
     */
    BillTrackerGraphComponent.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
    };
    /**
     * @param {?=} sizeDidChange
     * @return {?}
     */
    BillTrackerGraphComponent.prototype.refresh = /**
     * @param {?=} sizeDidChange
     * @return {?}
     */
    function (sizeDidChange) {
        if (sizeDidChange === void 0) { sizeDidChange = true; }
        if (sizeDidChange && this.graph != null) {
            this.graph.sizeDidChange();
        }
    };
    /**
     * @return {?}
     */
    BillTrackerGraphComponent.prototype.paint = /**
     * @return {?}
     */
    function () {
        this.paintGraph(this.graph);
    };
    /**
     * @param {?} modalRef
     * @return {?}
     */
    BillTrackerGraphComponent.prototype.setModalRef = /**
     * @param {?} modalRef
     * @return {?}
     */
    function (modalRef) {
        var _this = this;
        this.modalRef = modalRef;
        if (this.modalRef != null) {
            this.modalRef.dialog.instance.closed.subscribe((/**
             * @param {?} evt
             * @return {?}
             */
            function (evt) {
                _this.graph && _this.graph.destroy();
            }));
            // todo: 临时解决弹窗模式下先刷新出入口节点问题
            /** @type {?} */
            var flag_1 = 0;
            this.modalRef.dialog.instance.resized.subscribe((/**
             * @param {?} evt
             * @return {?}
             */
            function (evt) {
                if (flag_1 >= 2) {
                    _this.refresh();
                }
                flag_1++;
            }));
        }
    };
    /**
     * @return {?}
     */
    BillTrackerGraphComponent.prototype.createGraph = /**
     * @return {?}
     */
    function () {
        //启用mxGuide
        mxGraphHandler.prototype.guidesEnabled = true;
        //禁用mxgraph容器内上下文菜单
        mxEvent.disableContextMenu(this.mxContainerER.nativeElement);
        mxGraphHandler.prototype.scrollOnMove = false;
        mxGraphHandler.prototype.scaleGrid = true;
        //修改节点选中后处理器图片及填充色
        mxConstants.HANDLE_FILLCOLOR = '#29b6f2';
        mxHandle.prototype.createShape = (/**
         * @param {?} html
         * @return {?}
         */
        function (html) {
            /** @type {?} */
            var bounds = new mxEllipse(0, 0, mxConstants.HANDLE_SIZE, mxConstants.HANDLE_SIZE);
            return new mxEllipse(bounds, mxConstants.HANDLE_FILLCOLOR, mxConstants.HANDLE_STROKECOLOR);
        });
        mxVertexHandler.prototype.handleImage = (!mxClient.IS_SVG) ? new mxImage(BillTrackerConstant.IMAGE_PATH + '/handle-main.png', mxConstants.HANDLE_SIZE, mxConstants.HANDLE_SIZE) : Graph.createSvgImage(18, 18, '<circle cx="9" cy="9" r="3" stroke="#fff" fill="' + Graph.handleFill + '" stroke-width="1"/>');
        mxConstants.DEFAULT_VALID_COLOR = '#FFFFFF';
        mxConstants.HIGHLIGHT_STROKEWIDTH = 1;
        //修改mxGuide默认配置
        mxConstants.GUIDE_COLOR = '#0088cf';
        mxGuide.prototype.createGuideShape = (/**
         * @param {?} horizontal
         * @return {?}
         */
        function (horizontal) { return new mxPolyline([], mxConstants.GUIDE_COLOR, mxConstants.GUIDE_STROKEWIDTH); });
        //设置节点选中线框宽度
        mxConstants.VERTEX_SELECTION_STROKEWIDTH = 1;
        mxConstants.VERTEX_SELECTION_COLOR = '#3E8DFF';
        mxConstants.VERTEX_SELECTION_DASHED = false;
        //修改线宽
        mxConnectionHandler.prototype.getEdgeWidth = (/**
         * @param {?} valid
         * @return {?}
         */
        function (valid) { return 1; });
        mxConstants.VALID_COLOR = '#00CD66';
        //创建mxGraph
        /** @type {?} */
        var graph = new Graph(this.mxContainerER.nativeElement, undefined, undefined, undefined);
        graph.localePipe = this.localePipe;
        graph.graphOptions = this.graphOptions;
        graph.gridOptions = this.gridOptions;
        //添加自定义监听器
        this.addListener(graph);
        return graph;
    };
    /**
     * @param {?} graph
     * @return {?}
     */
    BillTrackerGraphComponent.prototype.createLayout = /**
     * @param {?} graph
     * @return {?}
     */
    function (graph) {
        /** @type {?} */
        var upLayout = new RevertCompactTreeLayout(graph, true);
        upLayout.levelDistance = this.hspace;
        upLayout.edgeRouting = false;
        upLayout.resetEdges = false;
        this.upLayout = upLayout;
        /** @type {?} */
        var downLayout = new CompactTreeLayout(graph, true);
        downLayout.levelDistance = this.hspace;
        downLayout.edgeRouting = false;
        downLayout.resetEdges = true;
        this.downLayout = downLayout;
    };
    /**
     * @param {?} graph
     * @return {?}
     */
    BillTrackerGraphComponent.prototype.addListener = /**
     * @param {?} graph
     * @return {?}
     */
    function (graph) {
        var _this = this;
        /** @type {?} */
        var autoAdjustHandler = (/**
         * @return {?}
         */
        function () {
            window.setTimeout((/**
             * @return {?}
             */
            function () {
                if (_this.graph != null) {
                    _this.refresh();
                }
            }), 0);
        });
        mxEvent.addListener(window, 'resize', autoAdjustHandler);
        /** @type {?} */
        var wheelResizeHandler = (/**
         * @param {?} evt
         * @param {?} up
         * @return {?}
         */
        function (evt, up) {
            // window下Ctrl按下，Mac下Command按下
            if (mxEvent.isControlDown(evt) || (mxClient.IS_MAC && evt.metaKey)) {
                if (up) {
                    _this.zoomIn();
                }
                else {
                    _this.zoomOut();
                }
                mxEvent.consume(evt);
                return false;
            }
        });
        mxEvent.addMouseWheelListener(wheelResizeHandler, this.mxContainerER.nativeElement);
        graph.getSelectionModel().addListener(mxEvent.CHANGE, (/**
         * @param {?} sender
         * @param {?} evt
         * @return {?}
         */
        function (sender, evt) {
            if (!(sender instanceof mxGraphSelectionModel)) {
                return;
            }
            /** @type {?} */
            var selectionModel = sender;
            //若未选中节点或者选中节点数不为1
            if (selectionModel.cells == null || selectionModel.cells.length != 1) {
                _this.selectEventEmitter.emit(null);
                return;
            }
            /** @type {?} */
            var selectedCell = selectionModel.cells[0];
            //选中的是边
            if (selectedCell.edge || !selectedCell.vertex) {
                return;
            }
            _this.selectEventEmitter.emit(selectedCell);
        }));
        graph.addListener(Events.CLICK_FIRST_SUMMARY, (/**
         * @param {?} serder
         * @param {?} evt
         * @return {?}
         */
        function (serder, evt) {
            /** @type {?} */
            var cell = evt.getProperty("cell");
            _this.stateChangeEventEmitter.emit({
                type: Events.CLICK_FIRST_SUMMARY,
                data: cell
            });
        }));
    };
    /**
     * @param {?} graph
     * @return {?}
     */
    BillTrackerGraphComponent.prototype.paintGraph = /**
     * @param {?} graph
     * @return {?}
     */
    function (graph) {
        graph.getModel().beginUpdate();
        this.entry = this.paintEntry(graph);
        this.afterPaintGraph(this.graph, this.entry);
        graph.getModel().endUpdate();
    };
    /**
     * @param {?} graph
     * @param {?} entry
     * @return {?}
     */
    BillTrackerGraphComponent.prototype.afterPaintGraph = /**
     * @param {?} graph
     * @param {?} entry
     * @return {?}
     */
    function (graph, entry) {
        if (entry == null) {
            return;
        }
        // 默认选中入口节点
        this.billTrackerArgs.gridOptions.showEntryData && graph.setSelectionCell(this.entry);
        // 默认展示一层？
        /** @type {?} */
        var canTrackingResult = this.billTrackerArgs.canTrackingResult;
        if (this.billTrackerArgs.graphOptions.showDownBills == true) {
            canTrackingResult.canDownTracking && this.entry.downCellOverlay && this.entry.downCellOverlay.fireEvent(new mxEventObject(mxEvent.CLICK, "resetView", true));
        }
        if (this.billTrackerArgs.graphOptions.showUpBills == true) {
            canTrackingResult.canUpTracking && this.entry.upCellOverlay && this.entry.upCellOverlay.fireEvent(new mxEventObject(mxEvent.CLICK, "resetView", true));
        }
    };
    /**
     * @param {?} graph
     * @return {?}
     */
    BillTrackerGraphComponent.prototype.paintEntry = /**
     * @param {?} graph
     * @return {?}
     */
    function (graph) {
        /** @type {?} */
        var entry = null;
        if (this.billTrackerArgs == null || this.billTrackerArgs.canTrackingResult == null) {
            return entry;
        }
        /** @type {?} */
        var canTrackingResult = this.billTrackerArgs.canTrackingResult;
        /** @type {?} */
        var info = this.dataService.buildEntryBillInfo(canTrackingResult);
        /** @type {?} */
        var dataInfo = info.billDataInfos[0];
        /** @type {?} */
        var bts = new BillTrackingSettings();
        bts.LoadFromJson(canTrackingResult.billTrackingSettings);
        /** @type {?} */
        var parent = graph.getDefaultParent();
        graph.getModel().beginUpdate();
        try {
            /** @type {?} */
            var x0 = 0;
            /** @type {?} */
            var y0 = 0;
            /** @type {?} */
            var bts_1 = new BillTrackingSettings();
            if (info && info.billTrackingSettings) {
                bts_1.LoadFromJson(info.billTrackingSettings);
            }
            /** @type {?} */
            var customStyle = "";
            entry = graph.insertBillCell(parent, null, dataInfo, info, true, x0, y0, this.nodeWidth, this.nodeHeight, "billNode;billNodeEntry;" + customStyle);
            /** @type {?} */
            var geometry = graph.getModel().getGeometry(entry);
            /** @type {?} */
            var size = graph.getPreferredSizeForCell(entry);
            this.entryCellData = new EntryCellData();
            this.setCellData(this.entryCellData, entry);
            this.entryCellData.canTrackingResult = canTrackingResult;
            entry.data = this.entryCellData;
            // 添加上查下查按钮
            if (canTrackingResult.canDownTracking) {
                /** @type {?} */
                var overlay = this.addDownOverlay(graph, entry);
                entry.downCellOverlay = overlay;
            }
            if (canTrackingResult.canUpTracking) {
                /** @type {?} */
                var overlay = this.addUpOverlay(graph, entry);
                entry.upCellOverlay = overlay;
            }
            this.upParent = parent.clone();
            this.downParent = parent.clone();
            graph.addCells([this.upParent, this.downParent], parent);
        }
        finally {
            graph.getModel().endUpdate();
        }
        return entry;
    };
    /**
     * @param {?} graph
     * @param {?} cell
     * @return {?}
     */
    BillTrackerGraphComponent.prototype.addUpOverlay = /**
     * @param {?} graph
     * @param {?} cell
     * @return {?}
     */
    function (graph, cell) {
        var _this = this;
        /** @type {?} */
        var upSearch = new CellOverlay(this.upSearchImage, this.localePipe.transform("upSearch"), mxConstants.ALIGN_LEFT, mxConstants.ALIGN_MIDDLE, this.upSearchOffset, "hand");
        upSearch.state = CellOverlayState.Search;
        /** @type {?} */
        var upSearchHandler = (/**
         * @param {?} sender
         * @param {?} evt
         * @return {?}
         */
        function (sender, evt) {
            /** @type {?} */
            var resetView = evt.getProperty("resetView");
            graph.getModel().beginUpdate();
            _this.addUpAssoCell(graph, cell, resetView);
            upSearch.removeListener(upSearchHandler);
            upSearch.tooltip = _this.localePipe.transform("folder");
            upSearch.image = _this.upFolderImage;
            upSearch.state = CellOverlayState.Fold;
            upSearch.addListener(mxEvent.CLICK, upFolderHandler);
            graph.removeCellOverlay(cell, upSearch);
            graph.addCellOverlay(cell, upSearch);
            graph.getModel().endUpdate();
        });
        /** @type {?} */
        var upFolderHandler = (/**
         * @param {?} sender
         * @param {?} evt
         * @return {?}
         */
        function (sender, evt) {
            graph.getModel().beginUpdate();
            _this.removeAssoCell(graph, cell, BillTrackerDirection.Up);
            upSearch.removeListener(upFolderHandler);
            upSearch.tooltip = _this.localePipe.transform("upSearch");
            upSearch.image = _this.upSearchImage;
            upSearch.state = CellOverlayState.Search;
            upSearch.addListener(mxEvent.CLICK, upSearchHandler);
            graph.removeCellOverlay(cell, upSearch);
            graph.addCellOverlay(cell, upSearch);
            graph.model.endUpdate();
        });
        upSearch.addListener(mxEvent.CLICK, upSearchHandler);
        graph.removeCellOverlay(cell, upSearch);
        graph.addCellOverlay(cell, upSearch);
        return upSearch;
    };
    /**
     * @param {?} graph
     * @param {?} cell
     * @return {?}
     */
    BillTrackerGraphComponent.prototype.addDownOverlay = /**
     * @param {?} graph
     * @param {?} cell
     * @return {?}
     */
    function (graph, cell) {
        var _this = this;
        /** @type {?} */
        var downSearch = new CellOverlay(this.downSearchImage, this.localePipe.transform("downSearch"), mxConstants.ALIGN_RIGHT, mxConstants.ALIGN_MIDDLE, this.downSearchOffset, "hand");
        downSearch.state = CellOverlayState.Search;
        /** @type {?} */
        var downSearchHandler = (/**
         * @param {?} sender
         * @param {?} evt
         * @return {?}
         */
        function (sender, evt) {
            /** @type {?} */
            var resetView = evt.getProperty("resetView");
            graph.getModel().beginUpdate();
            _this.addDownAssoCell(graph, cell, resetView);
            downSearch.image = _this.downFolderImage;
            downSearch.tooltip = _this.localePipe.transform("folder");
            downSearch.state = CellOverlayState.Fold;
            downSearch.removeListener(downSearchHandler);
            downSearch.addListener(mxEvent.CLICK, downFolderHandler);
            graph.removeCellOverlay(cell, downSearch);
            graph.addCellOverlay(cell, downSearch);
            // graph.refresh(cell);
            graph.getModel().endUpdate();
        });
        /** @type {?} */
        var downFolderHandler = (/**
         * @param {?} sender
         * @param {?} evt
         * @return {?}
         */
        function (sender, evt) {
            graph.getModel().beginUpdate();
            _this.removeAssoCell(graph, cell, BillTrackerDirection.Down);
            downSearch.image = _this.downSearchImage;
            downSearch.tooltip = _this.localePipe.transform("downSearch");
            downSearch.state = CellOverlayState.Search;
            downSearch.removeListener(downFolderHandler);
            downSearch.addListener(mxEvent.CLICK, downSearchHandler);
            graph.removeCellOverlay(cell, downSearch);
            graph.addCellOverlay(cell, downSearch);
            // graph.refresh(cell);
            graph.getModel().endUpdate();
        });
        downSearch.addListener(mxEvent.CLICK, downSearchHandler);
        graph.removeCellOverlay(cell, downSearch);
        graph.addCellOverlay(cell, downSearch);
        return downSearch;
    };
    /**
     * @param {?} graph
     * @param {?} cell
     * @param {?=} resetView
     * @return {?}
     */
    BillTrackerGraphComponent.prototype.addUpAssoCell = /**
     * @param {?} graph
     * @param {?} cell
     * @param {?=} resetView
     * @return {?}
     */
    function (graph, cell, resetView) {
        var _this = this;
        if (resetView === void 0) { resetView = false; }
        graph.getModel().beginUpdate();
        /** @type {?} */
        var args = this.dataService.buildGetUpBillsInfoArgs(cell);
        this.loading.show({ message: this.localePipe.transform("loading") });
        this.numCellsAddingReq++;
        this.dataService.getUpBillsInfo(args).subscribe((/**
         * @param {?} infos
         * @return {?}
         */
        function (infos) {
            var e_1, _a, e_2, _b, e_3, _c, e_4, _d;
            /** @type {?} */
            var parent = graph.getDefaultParent();
            /** @type {?} */
            var newCells = [];
            // graph.getModel().beginUpdate();
            try {
                try {
                    for (var infos_1 = tslib_1.__values(infos), infos_1_1 = infos_1.next(); !infos_1_1.done; infos_1_1 = infos_1.next()) {
                        var info = infos_1_1.value;
                        try {
                            for (var _e = tslib_1.__values(info.billDataInfos), _f = _e.next(); !_f.done; _f = _e.next()) {
                                var dataInfo = _f.value;
                                /** @type {?} */
                                var billCell = null;
                                /** @type {?} */
                                var bts = new BillTrackingSettings();
                                if (info && info.billTrackingSettings) {
                                    bts.LoadFromJson(info.billTrackingSettings);
                                }
                                /** @type {?} */
                                var customStyle = "";
                                billCell = graph.insertBillCell(_this.upParent, null, dataInfo, info, false, cell.geometry.x - _this.hspace, cell.geometry.y, _this.nodeWidth, _this.nodeHeight, "billNode;" + customStyle);
                                newCells.push(billCell);
                            }
                        }
                        catch (e_2_1) { e_2 = { error: e_2_1 }; }
                        finally {
                            try {
                                if (_f && !_f.done && (_b = _e.return)) _b.call(_e);
                            }
                            finally { if (e_2) throw e_2.error; }
                        }
                    }
                }
                catch (e_1_1) { e_1 = { error: e_1_1 }; }
                finally {
                    try {
                        if (infos_1_1 && !infos_1_1.done && (_a = infos_1.return)) _a.call(infos_1);
                    }
                    finally { if (e_1) throw e_1.error; }
                }
                _this.calCellsPosition(graph, cell, newCells, BillTrackerDirection.Up);
                try {
                    for (var newCells_1 = tslib_1.__values(newCells), newCells_1_1 = newCells_1.next(); !newCells_1_1.done; newCells_1_1 = newCells_1.next()) {
                        var nc = newCells_1_1.value;
                        if (nc.billDataInfo.canContinueTracking) {
                            /** @type {?} */
                            var ol = _this.addUpOverlay(graph, nc);
                            nc.upCellOverlay = ol;
                        }
                        graph.insertEdge(parent, null, '', nc, cell, "billAssociation;");
                    }
                }
                catch (e_3_1) { e_3 = { error: e_3_1 }; }
                finally {
                    try {
                        if (newCells_1_1 && !newCells_1_1.done && (_c = newCells_1.return)) _c.call(newCells_1);
                    }
                    finally { if (e_3) throw e_3.error; }
                }
                /** @type {?} */
                var oldGeo = _this.entry.getGeometry().clone();
                _this.upLayout.execute(_this.upParent, _this.entry);
                /** @type {?} */
                var newGeo = _this.entry.getGeometry().clone();
                /** @type {?} */
                var dx = oldGeo.x - newGeo.x;
                /** @type {?} */
                var dy = oldGeo.y - newGeo.y;
                _this.restoreEntryPosition(graph, _this.entry, dx, dy);
                /** @type {?} */
                var cellData = (/** @type {?} */ (cell.data));
                cellData.ups.length = 0;
                try {
                    for (var newCells_2 = tslib_1.__values(newCells), newCells_2_1 = newCells_2.next(); !newCells_2_1.done; newCells_2_1 = newCells_2.next()) {
                        var nc = newCells_2_1.value;
                        /** @type {?} */
                        var cd = new UpCellData();
                        _this.setCellData(cd, nc);
                        nc.data = cd;
                        cd.down = cellData;
                        cellData.ups.push(cd);
                    }
                }
                catch (e_4_1) { e_4 = { error: e_4_1 }; }
                finally {
                    try {
                        if (newCells_2_1 && !newCells_2_1.done && (_d = newCells_2.return)) _d.call(newCells_2);
                    }
                    finally { if (e_4) throw e_4.error; }
                }
            }
            finally {
                graph.getModel().endUpdate();
            }
            // 重绘画布大小
            resetView && graph.fireEvent(new mxEventObject(Events.RESET_GRAPH_VIEW));
            _this.numCellsAddingReq--;
            // 自定义单据节点插入并移位后事件
            _this.graph.fireEvent(new mxEventObject(Events.BILL_CELLS_ADDED_AND_MOVED, 'cells', newCells, 'parent', _this.upParent));
            _this.loading.close();
        }), (/**
         * @param {?} err
         * @return {?}
         */
        function (err) {
            _this.numCellsAddingReq--;
            _this.loading.close();
            _this.messager.error(err.error == null ? err.message : (err.error.Message || err.error.message || err.message));
            throw err;
        }));
    };
    /**
     * @param {?} graph
     * @param {?} cell
     * @param {?=} resetView
     * @return {?}
     */
    BillTrackerGraphComponent.prototype.addDownAssoCell = /**
     * @param {?} graph
     * @param {?} cell
     * @param {?=} resetView
     * @return {?}
     */
    function (graph, cell, resetView) {
        var _this = this;
        if (resetView === void 0) { resetView = false; }
        graph.getModel().beginUpdate();
        /** @type {?} */
        var args = this.dataService.buildGetDownBillsInfoArgs(cell);
        this.loading.show({ message: this.localePipe.transform("loading") });
        this.numCellsAddingReq++;
        this.dataService.getDownBillsInfo(args).subscribe((/**
         * @param {?} infos
         * @return {?}
         */
        function (infos) {
            var e_5, _a, e_6, _b, e_7, _c, e_8, _d;
            /** @type {?} */
            var model = graph.getModel();
            /** @type {?} */
            var parent = graph.getDefaultParent();
            /** @type {?} */
            var newCells = [];
            // graph.getModel().beginUpdate();
            try {
                try {
                    for (var infos_2 = tslib_1.__values(infos), infos_2_1 = infos_2.next(); !infos_2_1.done; infos_2_1 = infos_2.next()) {
                        var info = infos_2_1.value;
                        try {
                            for (var _e = tslib_1.__values(info.billDataInfos), _f = _e.next(); !_f.done; _f = _e.next()) {
                                var dataInfo = _f.value;
                                /** @type {?} */
                                var billCell = null;
                                /** @type {?} */
                                var bts = new BillTrackingSettings();
                                if (info && info.billTrackingSettings) {
                                    bts.LoadFromJson(info.billTrackingSettings);
                                }
                                /** @type {?} */
                                var customStyle = "";
                                billCell = graph.insertBillCell(_this.downParent, null, dataInfo, info, false, cell.geometry.x + _this.hspace, cell.geometry.y, _this.nodeWidth, _this.nodeHeight, "billNode;" + customStyle);
                                newCells.push(billCell);
                            }
                        }
                        catch (e_6_1) { e_6 = { error: e_6_1 }; }
                        finally {
                            try {
                                if (_f && !_f.done && (_b = _e.return)) _b.call(_e);
                            }
                            finally { if (e_6) throw e_6.error; }
                        }
                    }
                }
                catch (e_5_1) { e_5 = { error: e_5_1 }; }
                finally {
                    try {
                        if (infos_2_1 && !infos_2_1.done && (_a = infos_2.return)) _a.call(infos_2);
                    }
                    finally { if (e_5) throw e_5.error; }
                }
                _this.calCellsPosition(graph, cell, newCells, BillTrackerDirection.Down);
                try {
                    for (var newCells_3 = tslib_1.__values(newCells), newCells_3_1 = newCells_3.next(); !newCells_3_1.done; newCells_3_1 = newCells_3.next()) {
                        var nc = newCells_3_1.value;
                        if (nc.billDataInfo.canContinueTracking) {
                            /** @type {?} */
                            var ol = _this.addDownOverlay(graph, nc);
                            nc.downCellOverlay = ol;
                        }
                        graph.insertEdge(parent, null, '', cell, nc, "billAssociation;");
                    }
                }
                catch (e_7_1) { e_7 = { error: e_7_1 }; }
                finally {
                    try {
                        if (newCells_3_1 && !newCells_3_1.done && (_c = newCells_3.return)) _c.call(newCells_3);
                    }
                    finally { if (e_7) throw e_7.error; }
                }
                /** @type {?} */
                var oldGeo = _this.entry.getGeometry().clone();
                _this.downLayout.execute(_this.downParent, _this.entry);
                /** @type {?} */
                var newGeo = _this.entry.getGeometry().clone();
                /** @type {?} */
                var dx = oldGeo.x - newGeo.x;
                /** @type {?} */
                var dy = oldGeo.y - newGeo.y;
                _this.restoreEntryPosition(graph, _this.entry, dx, dy);
                /** @type {?} */
                var cellData = (/** @type {?} */ (cell.data));
                cellData.downs.length = 0;
                try {
                    for (var newCells_4 = tslib_1.__values(newCells), newCells_4_1 = newCells_4.next(); !newCells_4_1.done; newCells_4_1 = newCells_4.next()) {
                        var nc = newCells_4_1.value;
                        /** @type {?} */
                        var cd = new DownCellData();
                        _this.setCellData(cd, nc);
                        nc.data = cd;
                        cd.up = cellData;
                        cellData.downs.push(cd);
                    }
                }
                catch (e_8_1) { e_8 = { error: e_8_1 }; }
                finally {
                    try {
                        if (newCells_4_1 && !newCells_4_1.done && (_d = newCells_4.return)) _d.call(newCells_4);
                    }
                    finally { if (e_8) throw e_8.error; }
                }
            }
            finally {
                graph.getModel().endUpdate();
            }
            // 重绘画布大小
            resetView && graph.fireEvent(new mxEventObject(Events.RESET_GRAPH_VIEW));
            _this.numCellsAddingReq--;
            // 自定义单据节点插入并移位后事件
            _this.graph.fireEvent(new mxEventObject(Events.BILL_CELLS_ADDED_AND_MOVED, 'cells', newCells, 'parent', _this.downParent));
            _this.loading.close();
        }), (/**
         * @param {?} err
         * @return {?}
         */
        function (err) {
            _this.numCellsAddingReq--;
            _this.loading.close();
            _this.messager.error(err.error == null ? err.message : (err.error.Message || err.error.message || err.message));
            throw err;
        }));
    };
    /**
     * @param {?} graph
     * @param {?} cell
     * @param {?} dir
     * @return {?}
     */
    BillTrackerGraphComponent.prototype.removeAssoCell = /**
     * @param {?} graph
     * @param {?} cell
     * @param {?} dir
     * @return {?}
     */
    function (graph, cell, dir) {
        /** @type {?} */
        var model = graph.getModel();
        /** @type {?} */
        var parent = graph.getDefaultParent();
        graph.getModel().beginUpdate();
        try {
            /** @type {?} */
            var assoCells = [];
            if (dir == BillTrackerDirection.Down) {
                /** @type {?} */
                var edges = model.getOutgoingEdges(cell);
                /** @type {?} */
                var i = 0;
                while (edges && edges.length > 0 && i < edges.length) {
                    if (edges[i].target && edges[i].target != this.entry) {
                        assoCells.push((/** @type {?} */ (edges[i].target)));
                        edges.push.apply(edges, tslib_1.__spread(model.getOutgoingEdges(edges[i].target)));
                    }
                    i++;
                }
            }
            else if (dir == BillTrackerDirection.Up) {
                /** @type {?} */
                var edges = model.getIncomingEdges(cell);
                /** @type {?} */
                var i = 0;
                while (edges && edges.length > 0 && i < edges.length) {
                    if (edges[i].source && edges[i].source != this.entry) {
                        assoCells.push((/** @type {?} */ (edges[i].source)));
                        edges.push.apply(edges, tslib_1.__spread(model.getIncomingEdges(edges[i].source)));
                    }
                    i++;
                }
            }
            if (dir == BillTrackerDirection.Down) {
                ((/** @type {?} */ (cell.data))).downs.length = 0;
            }
            else if (dir == BillTrackerDirection.Up) {
                ((/** @type {?} */ (cell.data))).ups.length = 0;
            }
            graph.removeCells(assoCells);
            /** @type {?} */
            var oldGeo = this.entry.getGeometry().clone();
            this.upLayout.execute(this.upParent, this.entry);
            /** @type {?} */
            var newGeo = this.entry.getGeometry().clone();
            /** @type {?} */
            var dx = oldGeo.x - newGeo.x;
            /** @type {?} */
            var dy = oldGeo.y - newGeo.y;
            this.restoreEntryPosition(graph, this.entry, dx, dy);
            /** @type {?} */
            var oldGeo2 = this.entry.getGeometry().clone();
            this.downLayout.execute(this.downParent, this.entry);
            /** @type {?} */
            var newGeo2 = this.entry.getGeometry().clone();
            /** @type {?} */
            var dx2 = oldGeo2.x - newGeo2.x;
            /** @type {?} */
            var dy2 = oldGeo2.y - newGeo2.y;
            this.restoreEntryPosition(graph, this.entry, dx2, dy2);
        }
        finally {
            graph.getModel().endUpdate();
        }
    };
    /**
     * @param {?} graph
     * @param {?} entry
     * @param {?} dx
     * @param {?} dy
     * @return {?}
     */
    BillTrackerGraphComponent.prototype.restoreEntryPosition = /**
     * @param {?} graph
     * @param {?} entry
     * @param {?} dx
     * @param {?} dy
     * @return {?}
     */
    function (graph, entry, dx, dy) {
        graph.getModel().beginUpdate();
        try {
            /** @type {?} */
            var vertices = null;
            vertices = tslib_1.__spread([entry], graph.getChildCells(this.upParent, true, false), graph.getChildCells(this.downParent, true, false));
            graph.moveCells(vertices, dx, dy);
        }
        finally {
            graph.getModel().endUpdate();
        }
    };
    /**
     * @param {?} graph
     * @param {?} cell
     * @param {?} newCells
     * @param {?} dir
     * @return {?}
     */
    BillTrackerGraphComponent.prototype.calCellsPosition = /**
     * @param {?} graph
     * @param {?} cell
     * @param {?} newCells
     * @param {?} dir
     * @return {?}
     */
    function (graph, cell, newCells, dir) {
        if (dir == BillTrackerDirection.Down) {
            this.resetDownCellsPosition(graph, cell, newCells);
        }
        else if (dir == BillTrackerDirection.Up) {
            this.resetUpCellsPosition(graph, cell, newCells);
        }
    };
    /**
     * @param {?} graph
     * @param {?} cell
     * @param {?} newCells
     * @return {?}
     */
    BillTrackerGraphComponent.prototype.resetDownCellsPosition = /**
     * @param {?} graph
     * @param {?} cell
     * @param {?} newCells
     * @return {?}
     */
    function (graph, cell, newCells) {
        graph.getModel().beginUpdate();
        try {
            /** @type {?} */
            var targets = graph.getOutgoingEdges(cell).map((/**
             * @param {?} edge
             * @return {?}
             */
            function (edge) { return edge.target; }));
            /** @type {?} */
            var deals = targets;
            //按纵坐标从大到小排序
            /** @type {?} */
            var temp = deals.sort((/**
             * @param {?} c1
             * @param {?} c2
             * @return {?}
             */
            function (c1, c2) { return c1.geometry && c2.geometry ? c2.geometry.y - c1.geometry.y : Number.MIN_VALUE; }));
            //最小纵坐标
            /** @type {?} */
            var minY = temp.length > 0 ? temp[temp.length - 1].geometry.y : cell.geometry.y;
            //最大纵坐标
            /** @type {?} */
            var maxY = temp.length > 0 ? temp[0].geometry.y : cell.geometry.y;
            //依次修改新插入节点的纵坐标
            for (var i = 0; i < newCells.length; i++) {
                maxY = deals.length > 0 ? maxY + this.vspace : maxY;
                graph.translateCell(newCells[i], 0, maxY - newCells[i].geometry.y);
                deals.push(newCells[i]);
            }
            /** @type {?} */
            var midY = (maxY + minY) / 2;
            /** @type {?} */
            var diffY_1 = cell.geometry.y - midY;
            //依次修改所有点纵坐标
            deals.forEach((/**
             * @param {?} c
             * @return {?}
             */
            function (c) {
                graph.translateCell(c, 0, diffY_1);
            }));
            minY += diffY_1;
            maxY += diffY_1;
            midY += diffY_1;
            // 将<=midY的节点全部上移至minY-diffY,>=midY下移至maxY + diffY
            for (var key in graph.model.cells) {
                if (graph.model.cells[key] == graph.model.root || graph.model.cells[key].geometry == null || graph.model.cells[key].edge == true) {
                    continue;
                }
                if (graph.model.cells[key] == cell || newCells.indexOf((/** @type {?} */ (graph.model.cells[key]))) != -1) {
                    continue;
                }
                if (graph.model.cells[key] == this.entry) {
                    continue;
                }
                if (graph.model.cells[key].geometry.x < this.entry.geometry.x) {
                    continue;
                }
                /** @type {?} */
                var c = graph.model.cells[key];
                /** @type {?} */
                var geo = c.geometry;
                graph.translateCell(c, 0, geo.y <= cell.geometry.y ? minY - (cell.geometry.y - geo.y) - geo.y : maxY + (geo.y - cell.geometry.y) - geo.y);
            }
        }
        finally {
            graph.getModel().endUpdate();
        }
    };
    /**
     * @param {?} graph
     * @param {?} cell
     * @param {?} newCells
     * @return {?}
     */
    BillTrackerGraphComponent.prototype.resetUpCellsPosition = /**
     * @param {?} graph
     * @param {?} cell
     * @param {?} newCells
     * @return {?}
     */
    function (graph, cell, newCells) {
        graph.getModel().beginUpdate();
        try {
            /** @type {?} */
            var sources = graph.getIncomingEdges(cell).map((/**
             * @param {?} edge
             * @return {?}
             */
            function (edge) { return edge.source; }));
            /** @type {?} */
            var deals = sources;
            //按纵坐标从大到小排序
            /** @type {?} */
            var temp = deals.sort((/**
             * @param {?} c1
             * @param {?} c2
             * @return {?}
             */
            function (c1, c2) { return c1.geometry && c2.geometry ? c2.geometry.y - c1.geometry.y : Number.MIN_VALUE; }));
            //最小纵坐标
            /** @type {?} */
            var minY = temp.length > 0 ? temp[temp.length - 1].geometry.y : cell.geometry.y;
            //最大纵坐标
            /** @type {?} */
            var maxY = temp.length > 0 ? temp[0].geometry.y : cell.geometry.y;
            //依次修改新插入节点的纵坐标
            for (var i = 0; i < newCells.length; i++) {
                maxY = deals.length > 0 ? maxY + this.vspace : maxY;
                graph.translateCell(newCells[i], 0, maxY - newCells[i].geometry.y);
                deals.push(newCells[i]);
            }
            /** @type {?} */
            var midY = (maxY + minY) / 2;
            /** @type {?} */
            var diffY_2 = cell.geometry.y - midY;
            //依次修改所有点纵坐标
            deals.forEach((/**
             * @param {?} c
             * @return {?}
             */
            function (c) {
                graph.translateCell(c, 0, diffY_2);
            }));
            minY += diffY_2;
            maxY += diffY_2;
            midY += diffY_2;
            // 将<=midY的节点全部上移至minY-diffY,>=midY下移至maxY + diffY
            for (var key in graph.model.cells) {
                if (graph.model.cells[key] == graph.model.root || graph.model.cells[key].geometry == null || graph.model.cells[key].edge == true) {
                    continue;
                }
                if (graph.model.cells[key] == cell || newCells.indexOf((/** @type {?} */ (graph.model.cells[key]))) != -1) {
                    continue;
                }
                if (graph.model.cells[key] == this.entry) {
                    continue;
                }
                if (graph.model.cells[key].geometry.x > this.entry.geometry.x) {
                    continue;
                }
                /** @type {?} */
                var c = graph.model.cells[key];
                /** @type {?} */
                var geo = c.geometry;
                graph.translateCell(c, 0, geo.y <= cell.geometry.y ? minY - (cell.geometry.y - geo.y) - geo.y : maxY + (geo.y - cell.geometry.y) - geo.y);
            }
        }
        finally {
            graph.getModel().endUpdate();
        }
    };
    /**
     * @param {?} cellData
     * @param {?} cell
     * @return {?}
     */
    BillTrackerGraphComponent.prototype.setCellData = /**
     * @param {?} cellData
     * @param {?} cell
     * @return {?}
     */
    function (cellData, cell) {
        cellData.billInfo = cell.billInfo;
        cellData.billDataInfo = cell.billDataInfo;
        cellData.visible = true;
        cellData.diagramInfo.x = cell.geometry.x;
        cellData.diagramInfo.y = cell.geometry.y;
        cellData.diagramInfo.width = cell.geometry.width;
        cellData.diagramInfo.height = cell.geometry.height;
        cellData.diagramInfo.extProps = {
            style: cell.style
        };
    };
    /**
     * @return {?}
     */
    BillTrackerGraphComponent.prototype.zoomOut = /**
     * @return {?}
     */
    function () {
        this.graph.zoomOut();
    };
    /**
     * @return {?}
     */
    BillTrackerGraphComponent.prototype.zoomIn = /**
     * @return {?}
     */
    function () {
        this.graph.zoomIn();
    };
    /**
     * @return {?}
     */
    BillTrackerGraphComponent.prototype.zoomActual = /**
     * @return {?}
     */
    function () {
        this.graph.zoomActual();
    };
    /**
     * @return {?}
     */
    BillTrackerGraphComponent.prototype.getZoomScale = /**
     * @return {?}
     */
    function () {
        return Math.round(this.graph.view.scale * 100);
    };
    /**
     * @return {?}
     */
    BillTrackerGraphComponent.prototype.print = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var preview = new mxPrintPreview(this.graph, 1);
        preview.printOverlays = true;
        preview.printControls = true;
        preview.printBackgroundImage = true;
        preview.open(billTrackerCellCss);
    };
    /**
     * @param {?} direction
     * @param {?=} all
     * @return {?}
     */
    BillTrackerGraphComponent.prototype.expand = /**
     * @param {?} direction
     * @param {?=} all
     * @return {?}
     */
    function (direction, all) {
        if (all === void 0) { all = false; }
        if (all) {
            this.expandAll(direction);
            return;
        }
        if (direction == BillTrackerDirection.Up) {
            /** @type {?} */
            var cells = [this.entry];
            this.upParent.children && cells.push.apply(cells, tslib_1.__spread(this.upParent.children));
            cells.forEach((/**
             * @param {?} cell
             * @return {?}
             */
            function (cell) {
                if (cell.upCellOverlay && cell.upCellOverlay.state == CellOverlayState.Search) {
                    cell.upCellOverlay.fireEvent(new mxEventObject(mxEvent.CLICK));
                }
            }));
        }
        else if (direction == BillTrackerDirection.Down) {
            /** @type {?} */
            var cells = [this.entry];
            this.downParent.children && cells.push.apply(cells, tslib_1.__spread(this.downParent.children));
            cells.forEach((/**
             * @param {?} cell
             * @return {?}
             */
            function (cell) {
                if (cell.downCellOverlay && cell.downCellOverlay.state == CellOverlayState.Search) {
                    cell.downCellOverlay.fireEvent(new mxEventObject(mxEvent.CLICK));
                }
            }));
        }
    };
    /**
     * @param {?} direction
     * @return {?}
     */
    BillTrackerGraphComponent.prototype.expandAll = /**
     * @param {?} direction
     * @return {?}
     */
    function (direction) {
        var _this = this;
        if (direction != BillTrackerDirection.Up && direction != BillTrackerDirection.Down) {
            return;
        }
        // 单据节点添加并移位后事件监听器
        /** @type {?} */
        var afterBillCellsAddedAndMoved = null;
        if (direction == BillTrackerDirection.Up) {
            afterBillCellsAddedAndMoved = (/**
             * @return {?}
             */
            function () {
                /** @type {?} */
                var cells = [_this.entry];
                _this.upParent.children && cells.push.apply(cells, tslib_1.__spread(_this.upParent.children));
                /** @type {?} */
                var canTrackUpCells = cells.filter((/**
                 * @param {?} cell
                 * @return {?}
                 */
                function (cell) {
                    return cell.upCellOverlay && cell.upCellOverlay.state == CellOverlayState.Search;
                }));
                // 没有可上查节点且没有正在执行的上查请求时删除监听器
                if (canTrackUpCells == null || canTrackUpCells.length == 0) {
                    if (_this.numCellsAddingReq === 0) {
                        // console.log("移除监听器");
                        _this.graph.removeListener(afterBillCellsAddedAndMoved);
                        // console.timeEnd("ExpandAll");
                    }
                }
                else {
                    canTrackUpCells.forEach((/**
                     * @param {?} cell
                     * @return {?}
                     */
                    function (cell) {
                        if (cell.upCellOverlay && cell.upCellOverlay.state == CellOverlayState.Search) {
                            cell.upCellOverlay.fireEvent(new mxEventObject(mxEvent.CLICK));
                        }
                    }));
                }
            });
        }
        else if (direction == BillTrackerDirection.Down) {
            afterBillCellsAddedAndMoved = (/**
             * @return {?}
             */
            function () {
                /** @type {?} */
                var cells = [_this.entry];
                _this.downParent.children && cells.push.apply(cells, tslib_1.__spread(_this.downParent.children));
                /** @type {?} */
                var canTrackDownCells = cells.filter((/**
                 * @param {?} cell
                 * @return {?}
                 */
                function (cell) {
                    return cell.downCellOverlay && cell.downCellOverlay.state == CellOverlayState.Search;
                }));
                // 没有可下查节点且没有正在执行的下查请求时删除监听器
                if (canTrackDownCells == null || canTrackDownCells.length == 0) {
                    if (_this.numCellsAddingReq === 0) {
                        // console.log("移除监听器");
                        _this.graph.removeListener(afterBillCellsAddedAndMoved);
                        // console.timeEnd("ExpandAll");
                    }
                }
                else {
                    canTrackDownCells.forEach((/**
                     * @param {?} cell
                     * @return {?}
                     */
                    function (cell) {
                        if (cell.downCellOverlay && cell.downCellOverlay.state == CellOverlayState.Search) {
                            cell.downCellOverlay.fireEvent(new mxEventObject(mxEvent.CLICK));
                        }
                    }));
                }
            });
        }
        // console.time("ExpandAll");
        // 添加监听器
        // console.log("添加监听器");
        this.graph.addListener("billCellsAddedAndMoved", afterBillCellsAddedAndMoved);
        // 直接触发一次展开事件
        afterBillCellsAddedAndMoved();
    };
    BillTrackerGraphComponent.decorators = [
        { type: Component, args: [{
                    selector: 'lib-bill-tracker-graph',
                    template: "<div #mxContainer id=\"mx-container\" class=\"mx-container-ng\">\r\n\r\n</div>\r\n\r\n<div #mxOutlineContainer id=\"mx-outline-container\" class=\"mx-outline-container\" [style.top]=\"modalRef?'50px':null\">\r\n\r\n</div>",
                    styles: [".mx-container-ng{position:absolute;top:0;left:0;bottom:0;right:0;cursor:default;overflow:auto;padding-right:16px;padding-bottom:16px;margin:4px}.mx-outline-container{z-index:1;position:absolute;overflow:hidden;top:20px;right:20px;width:160px;height:120px;background:#fff;border:1px solid #d3d3d3}"]
                }] }
    ];
    /** @nocollapse */
    BillTrackerGraphComponent.ctorParameters = function () { return [
        { type: BillTrackerArgs },
        { type: String, decorators: [{ type: Inject, args: [LOCALE_ID,] }] },
        { type: BillTrackerDataService },
        { type: NotifyService },
        { type: MessagerService },
        { type: LoadingService },
        { type: BsModalService },
        { type: ViewContainerRef },
        { type: Injector },
        { type: ComponentFactoryResolver },
        { type: ChangeDetectorRef }
    ]; };
    BillTrackerGraphComponent.propDecorators = {
        mxContainerER: [{ type: ViewChild, args: ["mxContainer",] }],
        mxOutlineContainer: [{ type: ViewChild, args: ["mxOutlineContainer",] }],
        selectEventEmitter: [{ type: Output, args: ["select",] }],
        stateChangeEventEmitter: [{ type: Output, args: ["stateChange",] }],
        billTrackerArgs: [{ type: Input, args: ["billTrackerArgs",] }]
    };
    return BillTrackerGraphComponent;
}());
export { BillTrackerGraphComponent };
if (false) {
    /** @type {?} */
    BillTrackerGraphComponent.prototype.localePipe;
    /** @type {?} */
    BillTrackerGraphComponent.prototype.mxContainerER;
    /** @type {?} */
    BillTrackerGraphComponent.prototype.mxOutlineContainer;
    /** @type {?} */
    BillTrackerGraphComponent.prototype.selectEventEmitter;
    /** @type {?} */
    BillTrackerGraphComponent.prototype.stateChangeEventEmitter;
    /** @type {?} */
    BillTrackerGraphComponent.prototype.billTrackerArgs;
    /** @type {?} */
    BillTrackerGraphComponent.prototype.graphOptions;
    /** @type {?} */
    BillTrackerGraphComponent.prototype.gridOptions;
    /** @type {?} */
    BillTrackerGraphComponent.prototype.modalRef;
    /** @type {?} */
    BillTrackerGraphComponent.prototype.graph;
    /** @type {?} */
    BillTrackerGraphComponent.prototype.hspace;
    /** @type {?} */
    BillTrackerGraphComponent.prototype.vspace;
    /** @type {?} */
    BillTrackerGraphComponent.prototype.upLayout;
    /** @type {?} */
    BillTrackerGraphComponent.prototype.downLayout;
    /** @type {?} */
    BillTrackerGraphComponent.prototype.outline;
    /** @type {?} */
    BillTrackerGraphComponent.prototype.entryCellData;
    /** @type {?} */
    BillTrackerGraphComponent.prototype.layoutManager;
    /** @type {?} */
    BillTrackerGraphComponent.prototype.entry;
    /** @type {?} */
    BillTrackerGraphComponent.prototype.upParent;
    /** @type {?} */
    BillTrackerGraphComponent.prototype.downParent;
    /** @type {?} */
    BillTrackerGraphComponent.prototype.defaultWidth;
    /** @type {?} */
    BillTrackerGraphComponent.prototype.defaultHeight;
    /** @type {?} */
    BillTrackerGraphComponent.prototype.nodeWidth;
    /** @type {?} */
    BillTrackerGraphComponent.prototype.nodeHeight;
    /** @type {?} */
    BillTrackerGraphComponent.prototype.defaultNonEntryImage;
    /** @type {?} */
    BillTrackerGraphComponent.prototype.defaultEntryImage;
    /** @type {?} */
    BillTrackerGraphComponent.prototype.defaultOverlayWidth;
    /** @type {?} */
    BillTrackerGraphComponent.prototype.defaultOverlayHeight;
    /** @type {?} */
    BillTrackerGraphComponent.prototype.overlayWidth;
    /** @type {?} */
    BillTrackerGraphComponent.prototype.overlayHeight;
    /** @type {?} */
    BillTrackerGraphComponent.prototype.defaultUpSearchImage;
    /** @type {?} */
    BillTrackerGraphComponent.prototype.defaultDownSearchImage;
    /** @type {?} */
    BillTrackerGraphComponent.prototype.defaultUpFolderImage;
    /** @type {?} */
    BillTrackerGraphComponent.prototype.defaultDownFolderImage;
    /** @type {?} */
    BillTrackerGraphComponent.prototype.upSearchImage;
    /** @type {?} */
    BillTrackerGraphComponent.prototype.downSearchImage;
    /** @type {?} */
    BillTrackerGraphComponent.prototype.upFolderImage;
    /** @type {?} */
    BillTrackerGraphComponent.prototype.downFolderImage;
    /** @type {?} */
    BillTrackerGraphComponent.prototype.upSearchOffset;
    /** @type {?} */
    BillTrackerGraphComponent.prototype.downSearchOffset;
    /** @type {?} */
    BillTrackerGraphComponent.prototype.dataInfoService;
    /**
     * 正在加载中的单据节点请求数
     * @type {?}
     */
    BillTrackerGraphComponent.prototype.numCellsAddingReq;
    /** @type {?} */
    BillTrackerGraphComponent.prototype.dataService;
    /** @type {?} */
    BillTrackerGraphComponent.prototype.notify;
    /** @type {?} */
    BillTrackerGraphComponent.prototype.messager;
    /** @type {?} */
    BillTrackerGraphComponent.prototype.loading;
    /** @type {?} */
    BillTrackerGraphComponent.prototype.modal;
    /** @type {?} */
    BillTrackerGraphComponent.prototype.vcr;
    /** @type {?} */
    BillTrackerGraphComponent.prototype.inj;
    /** @type {?} */
    BillTrackerGraphComponent.prototype.cfr;
    /** @type {?} */
    BillTrackerGraphComponent.prototype.cdr;
}
//# sourceMappingURL=data:application/json;base64,