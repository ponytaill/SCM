/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { ProcessDesignerUIState } from './process-designer.uistate';
import { ResourceKeys } from '../model/resourceKeys';
import { BackwardRuleComponent, BackwardRuleConverter } from '../views/backward-rule/backward-rule.component';
import { VariableSettingComponent, VariableSettingConverter } from '../views/variable-setting/variable-setting.component';
import { CallActivitySubProcess2Component, CallActivitySubProcess2Converter } from '../views/call-activity-sub-process2/call-activity-sub-process2.component';
export class SubProcessViewModel {
    /**
     * @param {?} uiState
     */
    constructor(uiState) {
        this.uiState = uiState;
    }
    /**
     * @param {?} obj
     * @return {?}
     */
    setProperty(obj) {
        this.uiState.propertyData = obj.propertyData;
        this.uiState.propertyConfig = this.setConfig(obj.propertyConfig);
    }
    /**
     * @private
     * @param {?} obj
     * @return {?}
     */
    setConfig(obj) {
        /** @type {?} */
        const propertyConfig = [];
        if (obj) {
            obj.forEach((/**
             * @param {?} element
             * @return {?}
             */
            (element) => {
                this.setEntity(element.properties);
                propertyConfig.push(element);
            }));
        }
        return propertyConfig;
    }
    /**
     * @private
     * @param {?} obj
     * @return {?}
     */
    setEntity(obj) {
        if (obj && obj.length > 0) {
            obj.forEach((/**
             * @param {?} item
             * @return {?}
             */
            (item) => {
                switch (item.propertyID) {
                    case ResourceKeys.callActivitySubProcess: // 参与者
                        // item.editor = CallActivitySubProcessComponent;
                        // item.converter = new CallActivitySubProcessConverter();
                        item.editor = CallActivitySubProcess2Component;
                        item.converter = new CallActivitySubProcess2Converter();
                        item.editorParams = {
                            bizTypeId: this.uiState.flowFormInfo.flowForm.businessObjectId,
                        };
                        break;
                    case ResourceKeys.BackWardRule:
                        item.editor = BackwardRuleComponent;
                        item.converter = new BackwardRuleConverter();
                        item.editorParams = {
                            nodeType: 'CallActivitySubProcess'
                        };
                        break;
                    case ResourceKeys.variableSettings: // 变量设置
                        item.editor = VariableSettingComponent;
                        item.converter = new VariableSettingConverter();
                        break;
                    default:
                        break;
                }
            }));
        }
    }
}
SubProcessViewModel.decorators = [
    { type: Injectable }
];
/** @nocollapse */
SubProcessViewModel.ctorParameters = () => [
    { type: ProcessDesignerUIState }
];
if (false) {
    /**
     * @type {?}
     * @private
     */
    SubProcessViewModel.prototype.uiState;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3ViLXByb2Nlc3Mudmlld21vZGVsLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGdzcC13Zi93Zi1wcm9jZXNzLWVkaXRvci8iLCJzb3VyY2VzIjpbImxpYi9hcHAvc3ViLXByb2Nlc3Mudmlld21vZGVsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sRUFBRSxzQkFBc0IsRUFBRSxNQUFNLDRCQUE0QixDQUFDO0FBRXBFLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQztBQUVyRCxPQUFPLEVBQUUscUJBQXFCLEVBQUUscUJBQXFCLEVBQUUsTUFBTSxnREFBZ0QsQ0FBQztBQUM5RyxPQUFPLEVBQUUsd0JBQXdCLEVBQUUsd0JBQXdCLEVBQUUsTUFBTSxzREFBc0QsQ0FBQztBQUMxSCxPQUFPLEVBQUUsZ0NBQWdDLEVBQUUsZ0NBQWdDLEVBQUUsTUFBTSwwRUFBMEUsQ0FBQztBQUk5SixNQUFNLE9BQU8sbUJBQW1COzs7O0lBQzVCLFlBQW9CLE9BQStCO1FBQS9CLFlBQU8sR0FBUCxPQUFPLENBQXdCO0lBRW5ELENBQUM7Ozs7O0lBQ0QsV0FBVyxDQUFDLEdBQVE7UUFDaEIsSUFBSSxDQUFDLE9BQU8sQ0FBQyxZQUFZLEdBQUcsR0FBRyxDQUFDLFlBQVksQ0FBQztRQUM3QyxJQUFJLENBQUMsT0FBTyxDQUFDLGNBQWMsR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxjQUFjLENBQUMsQ0FBQztJQUNyRSxDQUFDOzs7Ozs7SUFFTyxTQUFTLENBQUMsR0FBVTs7Y0FDbEIsY0FBYyxHQUE0QixFQUFFO1FBQ2xELElBQUksR0FBRyxFQUFFO1lBQ0wsR0FBRyxDQUFDLE9BQU87Ozs7WUFBQyxDQUFDLE9BQThCLEVBQUUsRUFBRTtnQkFDM0MsSUFBSSxDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUMsVUFBVSxDQUFDLENBQUM7Z0JBQ25DLGNBQWMsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7WUFDakMsQ0FBQyxFQUFDLENBQUM7U0FDTjtRQUNELE9BQU8sY0FBYyxDQUFDO0lBQzFCLENBQUM7Ozs7OztJQUNPLFNBQVMsQ0FBQyxHQUFxQjtRQUNuQyxJQUFJLEdBQUcsSUFBSSxHQUFHLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRTtZQUN2QixHQUFHLENBQUMsT0FBTzs7OztZQUFDLENBQUMsSUFBb0IsRUFBRSxFQUFFO2dCQUNqQyxRQUFRLElBQUksQ0FBQyxVQUFVLEVBQUU7b0JBQ3JCLEtBQUssWUFBWSxDQUFDLHNCQUFzQixFQUFFLE1BQU07d0JBQzVDLGlEQUFpRDt3QkFDakQsMERBQTBEO3dCQUMxRCxJQUFJLENBQUMsTUFBTSxHQUFHLGdDQUFnQyxDQUFDO3dCQUMvQyxJQUFJLENBQUMsU0FBUyxHQUFHLElBQUksZ0NBQWdDLEVBQUUsQ0FBQzt3QkFDeEQsSUFBSSxDQUFDLFlBQVksR0FBRzs0QkFDaEIsU0FBUyxFQUFFLElBQUksQ0FBQyxPQUFPLENBQUMsWUFBWSxDQUFDLFFBQVEsQ0FBQyxnQkFBZ0I7eUJBQ2pFLENBQUM7d0JBQ0YsTUFBTTtvQkFDVixLQUFLLFlBQVksQ0FBQyxZQUFZO3dCQUMxQixJQUFJLENBQUMsTUFBTSxHQUFHLHFCQUFxQixDQUFDO3dCQUNwQyxJQUFJLENBQUMsU0FBUyxHQUFHLElBQUkscUJBQXFCLEVBQUUsQ0FBQzt3QkFDN0MsSUFBSSxDQUFDLFlBQVksR0FBRzs0QkFDaEIsUUFBUSxFQUFFLHdCQUF3Qjt5QkFDckMsQ0FBQzt3QkFDRixNQUFNO29CQUNWLEtBQUssWUFBWSxDQUFDLGdCQUFnQixFQUFFLE9BQU87d0JBQ3ZDLElBQUksQ0FBQyxNQUFNLEdBQUcsd0JBQXdCLENBQUM7d0JBQ3ZDLElBQUksQ0FBQyxTQUFTLEdBQUcsSUFBSSx3QkFBd0IsRUFBRSxDQUFDO3dCQUNoRCxNQUFNO29CQUNWO3dCQUNJLE1BQU07aUJBQ2I7WUFDTCxDQUFDLEVBQUMsQ0FBQztTQUNOO0lBQ0wsQ0FBQzs7O1lBbERKLFVBQVU7Ozs7WUFSRixzQkFBc0I7Ozs7Ozs7SUFXZixzQ0FBdUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IFByb2Nlc3NEZXNpZ25lclVJU3RhdGUgfSBmcm9tICcuL3Byb2Nlc3MtZGVzaWduZXIudWlzdGF0ZSc7XHJcbmltcG9ydCB7IEVsZW1lbnRQcm9wZXJ0eUNvbmZpZywgUHJvcGVydHlFbnRpdHkgfSBmcm9tICdAZmFycmlzL3VpLXByb3BlcnR5LXBhbmVsJztcclxuaW1wb3J0IHsgUmVzb3VyY2VLZXlzIH0gZnJvbSAnLi4vbW9kZWwvcmVzb3VyY2VLZXlzJztcclxuaW1wb3J0IHsgQ2FsbEFjdGl2aXR5U3ViUHJvY2Vzc0NvbXBvbmVudCwgQ2FsbEFjdGl2aXR5U3ViUHJvY2Vzc0NvbnZlcnRlciB9IGZyb20gJy4uL3ZpZXdzL2NhbGwtYWN0aXZpdHktc3ViLXByb2Nlc3MvY2FsbC1hY3Rpdml0eS1zdWItcHJvY2Vzcy5jb21wb25lbnQnO1xyXG5pbXBvcnQgeyBCYWNrd2FyZFJ1bGVDb21wb25lbnQsIEJhY2t3YXJkUnVsZUNvbnZlcnRlciB9IGZyb20gJy4uL3ZpZXdzL2JhY2t3YXJkLXJ1bGUvYmFja3dhcmQtcnVsZS5jb21wb25lbnQnO1xyXG5pbXBvcnQgeyBWYXJpYWJsZVNldHRpbmdDb21wb25lbnQsIFZhcmlhYmxlU2V0dGluZ0NvbnZlcnRlciB9IGZyb20gJy4uL3ZpZXdzL3ZhcmlhYmxlLXNldHRpbmcvdmFyaWFibGUtc2V0dGluZy5jb21wb25lbnQnO1xyXG5pbXBvcnQgeyBDYWxsQWN0aXZpdHlTdWJQcm9jZXNzMkNvbXBvbmVudCwgQ2FsbEFjdGl2aXR5U3ViUHJvY2VzczJDb252ZXJ0ZXIgfSBmcm9tICcuLi92aWV3cy9jYWxsLWFjdGl2aXR5LXN1Yi1wcm9jZXNzMi9jYWxsLWFjdGl2aXR5LXN1Yi1wcm9jZXNzMi5jb21wb25lbnQnO1xyXG5cclxuQEluamVjdGFibGUoKVxyXG5cclxuZXhwb3J0IGNsYXNzIFN1YlByb2Nlc3NWaWV3TW9kZWwge1xyXG4gICAgY29uc3RydWN0b3IocHJpdmF0ZSB1aVN0YXRlOiBQcm9jZXNzRGVzaWduZXJVSVN0YXRlKSB7XHJcblxyXG4gICAgfVxyXG4gICAgc2V0UHJvcGVydHkob2JqOiBhbnkpIHtcclxuICAgICAgICB0aGlzLnVpU3RhdGUucHJvcGVydHlEYXRhID0gb2JqLnByb3BlcnR5RGF0YTtcclxuICAgICAgICB0aGlzLnVpU3RhdGUucHJvcGVydHlDb25maWcgPSB0aGlzLnNldENvbmZpZyhvYmoucHJvcGVydHlDb25maWcpO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgc2V0Q29uZmlnKG9iajogYW55W10pOiBFbGVtZW50UHJvcGVydHlDb25maWdbXSB7XHJcbiAgICAgICAgY29uc3QgcHJvcGVydHlDb25maWc6IEVsZW1lbnRQcm9wZXJ0eUNvbmZpZ1tdID0gW107XHJcbiAgICAgICAgaWYgKG9iaikge1xyXG4gICAgICAgICAgICBvYmouZm9yRWFjaCgoZWxlbWVudDogRWxlbWVudFByb3BlcnR5Q29uZmlnKSA9PiB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnNldEVudGl0eShlbGVtZW50LnByb3BlcnRpZXMpO1xyXG4gICAgICAgICAgICAgICAgcHJvcGVydHlDb25maWcucHVzaChlbGVtZW50KTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBwcm9wZXJ0eUNvbmZpZztcclxuICAgIH1cclxuICAgIHByaXZhdGUgc2V0RW50aXR5KG9iajogUHJvcGVydHlFbnRpdHlbXSkge1xyXG4gICAgICAgIGlmIChvYmogJiYgb2JqLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgb2JqLmZvckVhY2goKGl0ZW06IFByb3BlcnR5RW50aXR5KSA9PiB7XHJcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKGl0ZW0ucHJvcGVydHlJRCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgUmVzb3VyY2VLZXlzLmNhbGxBY3Rpdml0eVN1YlByb2Nlc3M6IC8vIOWPguS4juiAhVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBpdGVtLmVkaXRvciA9IENhbGxBY3Rpdml0eVN1YlByb2Nlc3NDb21wb25lbnQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGl0ZW0uY29udmVydGVyID0gbmV3IENhbGxBY3Rpdml0eVN1YlByb2Nlc3NDb252ZXJ0ZXIoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaXRlbS5lZGl0b3IgPSBDYWxsQWN0aXZpdHlTdWJQcm9jZXNzMkNvbXBvbmVudDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaXRlbS5jb252ZXJ0ZXIgPSBuZXcgQ2FsbEFjdGl2aXR5U3ViUHJvY2VzczJDb252ZXJ0ZXIoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaXRlbS5lZGl0b3JQYXJhbXMgPSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBiaXpUeXBlSWQ6IHRoaXMudWlTdGF0ZS5mbG93Rm9ybUluZm8uZmxvd0Zvcm0uYnVzaW5lc3NPYmplY3RJZCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBSZXNvdXJjZUtleXMuQmFja1dhcmRSdWxlOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpdGVtLmVkaXRvciA9IEJhY2t3YXJkUnVsZUNvbXBvbmVudDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaXRlbS5jb252ZXJ0ZXIgPSBuZXcgQmFja3dhcmRSdWxlQ29udmVydGVyKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGl0ZW0uZWRpdG9yUGFyYW1zID0ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbm9kZVR5cGU6ICdDYWxsQWN0aXZpdHlTdWJQcm9jZXNzJ1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIFJlc291cmNlS2V5cy52YXJpYWJsZVNldHRpbmdzOiAvLyDlj5jph4/orr7nva5cclxuICAgICAgICAgICAgICAgICAgICAgICAgaXRlbS5lZGl0b3IgPSBWYXJpYWJsZVNldHRpbmdDb21wb25lbnQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGl0ZW0uY29udmVydGVyID0gbmV3IFZhcmlhYmxlU2V0dGluZ0NvbnZlcnRlcigpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcbiJdfQ==