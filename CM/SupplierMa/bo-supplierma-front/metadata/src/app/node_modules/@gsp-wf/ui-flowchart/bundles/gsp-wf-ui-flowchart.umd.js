(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('rxjs/operators'), require('@angular/platform-browser'), require('@farris/ui-modal'), require('rxjs'), require('@gsp-sys/rtf-common'), require('@angular/common'), require('@ecp-caf/caf-common'), require('@farris/ui-messager'), require('@farris/ui-dialog'), require('@angular/core'), require('@farris/ui-layout'), require('@farris/ui-section'), require('@gsp-wf/wf-approval-logs'), require('@farris/ui-combo-list'), require('@angular/forms'), require('@farris/ui-dropdown'), require('@farris/ui-datagrid'), require('@farris/ui-notify')) :
    typeof define === 'function' && define.amd ? define('@gsp-wf/ui-flowchart', ['exports', 'rxjs/operators', '@angular/platform-browser', '@farris/ui-modal', 'rxjs', '@gsp-sys/rtf-common', '@angular/common', '@ecp-caf/caf-common', '@farris/ui-messager', '@farris/ui-dialog', '@angular/core', '@farris/ui-layout', '@farris/ui-section', '@gsp-wf/wf-approval-logs', '@farris/ui-combo-list', '@angular/forms', '@farris/ui-dropdown', '@farris/ui-datagrid', '@farris/ui-notify'], factory) :
    (factory((global['gsp-wf'] = global['gsp-wf'] || {}, global['gsp-wf']['ui-flowchart'] = {}),global.rxjs.operators,global.ng.platformBrowser,global.uiModal,global.rxjs,global.rtfCommon,global.ng.common,global.cafCommon,global.uiMessager,global.uiDialog,global.ng.core,global.uiLayout,global.uiSection,global.wfApprovalLogs,global.uiComboList,global.ng.forms,global.uiDropdown,global.uiDatagrid,global.uiNotify));
}(this, (function (exports,operators,platformBrowser,uiModal,rxjs,rtfCommon,common,cafCommon,uiMessager,uiDialog,core,uiLayout,uiSection,wfApprovalLogs,uiComboList,forms,uiDropdown,uiDatagrid,uiNotify) { 'use strict';

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var en = {
        static: {
            approvalLogs: {
                title: 'Approval Logs',
                approvalOpinion: 'Approval opinion',
                startTime: 'StartTime',
                endTime: 'EndTime',
                todo: 'Todo',
                done: 'Done',
                toAssign: 'To Assign'
            },
            flowchart: {
                title: 'Flow Chart',
                processNotFound: 'process instance id is null',
                flowChart: 'Flow Chart',
                complete: 'Hide Calculated Route',
                simulation: 'Show Calculated Route',
                sequenceColor: 'Description Of Sequence Color',
                completed: 'Completed',
                calculate: 'Calculate Route',
                default: 'Default',
                suspend: 'Calculate Suspend',
                noProcess: 'Process definition not found!',
                list: 'Process List',
                noDataId: 'form id is null',
                noBizDefKey: 'process category id is null'
            }
        }
    };

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var zh_CHT = {
        static: {
            approvalLogs: {
                title: '審批記錄',
                approvalOpinion: '審批意見',
                startTime: '接收時間',
                endTime: '處理時間',
                todo: '待辦理',
                done: '已辦理',
                toAssign: '未指派'
            },
            flowchart: {
                title: '查看流程',
                processNotFound: '流程實例ID為空',
                dataIdIsNull: '單據內碼為空',
                flowChart: '流程圖',
                complete: '隱藏計算路線',
                simulation: '顯示計算路線',
                sequenceColor: '分支線顏色說明',
                completed: '已運行',
                calculate: '計算路線',
                default: '默認',
                suspend: '計算中斷',
                noProcess: '未找到符合條件的流程定義！',
                list: '流程列表',
                noDataId: '單據內碼為空',
                noBizDefKey: '流程分類ID為空'
            }
        }
    };

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var zh_CHS = {
        static: {
            approvalLogs: {
                title: '审批记录',
                approvalOpinion: '审批意见',
                startTime: '接收时间',
                endTime: '处理时间',
                todo: '待办理',
                done: '已办理',
                toAssign: '未指派'
            },
            flowchart: {
                title: '查看流程',
                processNotFound: '流程实例ID为空',
                dataIdIsNull: '单据内码为空',
                flowChart: '流程图',
                complete: '隐藏计算路线',
                simulation: '显示计算路线',
                sequenceColor: '分支线颜色说明',
                completed: '已运行',
                calculate: '计算路线',
                default: '默认',
                suspend: '计算中断',
                noProcess: '未找到符合条件的流程定义！',
                list: '流程列表',
                noDataId: '单据内码为空',
                noBizDefKey: '流程分类ID为空'
            }
        }
    };

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var translate = {
        'zh-CHS': zh_CHS,
        'en': en,
        'zh-CHT': zh_CHT
    };

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var UiFlowchartService = /** @class */ (function () {
        function UiFlowchartService(httpSvc) {
            this.httpSvc = httpSvc;
        }
        /**
         * @param {?} payload
         * @return {?}
         */
        UiFlowchartService.prototype.getForecastProcessListByPayload = /**
         * @param {?} payload
         * @return {?}
         */
            function (payload) {
                /** @type {?} */
                var url = '/api/runtime/wf/v1.0/processInstances/startProcess-simulation';
                return this.httpSvc.post(url, payload).pipe(operators.map(function (re) { return re.procDefs; }));
            };
        /**
         * @param {?} dataId
         * @return {?}
         */
        UiFlowchartService.prototype.getRuntimeProcInstsByDataId = /**
         * @param {?} dataId
         * @return {?}
         */
            function (dataId) {
                if (dataId) {
                    /** @type {?} */
                    var url = "/api/runtime/wf/v1.0/processInstances/runtimeProcInstList?dataId=" + dataId;
                    return this.httpSvc.get(url);
                }
                else {
                    return rxjs.from(new Array());
                }
            };
        /**
         * @param {?} dataId
         * @return {?}
         */
        UiFlowchartService.prototype.getHistoricProcInstsByDataId = /**
         * @param {?} dataId
         * @return {?}
         */
            function (dataId) {
                if (dataId) {
                    /** @type {?} */
                    var url = "/api/runtime/wf/v1.0/processInstances/historicProcInstList?dataId=" + dataId;
                    return this.httpSvc.get(url);
                }
                else {
                    return rxjs.from(new Array());
                }
            };
        /**
         * 基于流程实例ID获取流程实例
         * @param procInstId 流程实例id
         */
        /**
         * 基于流程实例ID获取流程实例
         * @param {?} procInstId 流程实例id
         * @return {?}
         */
        UiFlowchartService.prototype.getProcInstanceById = /**
         * 基于流程实例ID获取流程实例
         * @param {?} procInstId 流程实例id
         * @return {?}
         */
            function (procInstId) {
                /** @type {?} */
                var url = "/api/runtime/wf/v1.0/processInstances/" + procInstId;
                return this.httpSvc.get(url);
            };
        /**
         * 基于流程实例ID获取bpmnModel
         */
        /**
         * 基于流程实例ID获取bpmnModel
         * @param {?} procInstId
         * @return {?}
         */
        UiFlowchartService.prototype.getBpmnModelbyProcInstId = /**
         * 基于流程实例ID获取bpmnModel
         * @param {?} procInstId
         * @return {?}
         */
            function (procInstId) {
                /** @type {?} */
                var url = "/api/runtime/wf/v1.0/processInstances/" + procInstId + "/bpmnModel";
                return this.httpSvc.get(url);
            };
        /**
         * 基于流程定义ID获取bpmnModel
         */
        /**
         * 基于流程定义ID获取bpmnModel
         * @param {?} procDefId
         * @return {?}
         */
        UiFlowchartService.prototype.getBpmnModelbyProcDefId = /**
         * 基于流程定义ID获取bpmnModel
         * @param {?} procDefId
         * @return {?}
         */
            function (procDefId) {
                /** @type {?} */
                var url = "/api/runtime/wf/v1.0/procDefs/" + procDefId + "/bpmnModel";
                return this.httpSvc.get(url);
            };
        /**
         * @param {?} superActInstId
         * @param {?} superProcInstId
         * @return {?}
         */
        UiFlowchartService.prototype.getSubProcessInstance = /**
         * @param {?} superActInstId
         * @param {?} superProcInstId
         * @return {?}
         */
            function (superActInstId, superProcInstId) {
                if (superActInstId) {
                    /** @type {?} */
                    var url = "/api/runtime/wf/v1.0/processInstances/subProcInst?superActInstId=" + superActInstId + "&superProcInstId=" + superProcInstId;
                    return this.httpSvc.get(url);
                }
            };
        /**
         * 获取所有包含预解析的流程实例信息
         */
        /**
         * 获取所有包含预解析的流程实例信息
         * @param {?} procInstId
         * @return {?}
         */
        UiFlowchartService.prototype.getForecastProcessByProcInstId = /**
         * 获取所有包含预解析的流程实例信息
         * @param {?} procInstId
         * @return {?}
         */
            function (procInstId) {
                /** @type {?} */
                var url = "/api/runtime/wf/v1.0/processInstances/" + procInstId + "/forecastProcess";
                return this.httpSvc.get(url);
            };
        /**
         * 获取流程预测数据
         */
        /**
         * 获取流程预测数据
         * @param {?} payload
         * @return {?}
         */
        UiFlowchartService.prototype.getForecastProcessByPayload = /**
         * 获取流程预测数据
         * @param {?} payload
         * @return {?}
         */
            function (payload) {
                /** @type {?} */
                var url = '/api/runtime/wf/v1.0/processInstances/forecastProcess';
                return this.httpSvc.post(url, payload);
            };
        /**
         * @param {?} procInstId
         * @return {?}
         */
        UiFlowchartService.prototype.getCompleteProcessInfoByProcInstId = /**
         * @param {?} procInstId
         * @return {?}
         */
            function (procInstId) {
                /** @type {?} */
                var url = "/api/runtime/wf/v1.0/processInstances/" + procInstId + "/flowChartInfo";
                return this.httpSvc.get(url);
            };
        /**
         * 基于流程实例Id获取所有活动实例
         * @param procInstId procInstId
         */
        /**
         * 基于流程实例Id获取所有活动实例
         * @param {?} procInstId procInstId
         * @return {?}
         */
        UiFlowchartService.prototype.getAllActiInstsbyProcInstId = /**
         * 基于流程实例Id获取所有活动实例
         * @param {?} procInstId procInstId
         * @return {?}
         */
            function (procInstId) {
                /** @type {?} */
                var url = "/api/runtime/wf/v1.0/processInstances/" + procInstId + "/activityInstanceSlims";
                return this.httpSvc.get(url);
            };
        /**
         * 基于流程实例ID获取所有的流转实例
         * @param procInstId procInstId
         */
        /**
         * 基于流程实例ID获取所有的流转实例
         * @param {?} procInstId procInstId
         * @return {?}
         */
        UiFlowchartService.prototype.getTransitionInstanceSlimsByProcInstId = /**
         * 基于流程实例ID获取所有的流转实例
         * @param {?} procInstId procInstId
         * @return {?}
         */
            function (procInstId) {
                /** @type {?} */
                var url = "/api/runtime/wf/v1.0/processInstances/" + procInstId + "/transitionInstanceSlims";
                return this.httpSvc.get(url);
            };
        /**
         * @param {?} procInstId
         * @return {?}
         */
        UiFlowchartService.prototype.getFormInfoByProcInstId = /**
         * @param {?} procInstId
         * @return {?}
         */
            function (procInstId) {
                /** @type {?} */
                var url = "/api/runtime/wf/v1.0/processInstances/" + procInstId + "/formInfo";
                return this.httpSvc.get(url);
            };
        /**
         * @param {?} procInstId
         * @param {?} actInstId
         * @return {?}
         */
        UiFlowchartService.prototype.getFormInfoByActInstId = /**
         * @param {?} procInstId
         * @param {?} actInstId
         * @return {?}
         */
            function (procInstId, actInstId) {
                /** @type {?} */
                var url = "/api/runtime/wf/v1.0/processInstances/" + procInstId + "/formInfo";
                if (actInstId) {
                    url += "?actInstId=" + actInstId;
                }
                return this.httpSvc.get(url);
            };
        /**
         * 获取审批日志信息
         * @param ProcInstId ProcInstId
         * 新改造的接口
         */
        /**
         * 获取审批日志信息
         * @param {?} procInstId
         * @param {?=} activityDefinitionId
         * @return {?}
         */
        UiFlowchartService.prototype.getWorkItemLogs = /**
         * 获取审批日志信息
         * @param {?} procInstId
         * @param {?=} activityDefinitionId
         * @return {?}
         */
            function (procInstId, activityDefinitionId) {
                /** @type {?} */
                var logUrl = activityDefinitionId ?
                    "/api/runtime/wf/v1.0/processInstances/" + procInstId + "/logs?activityDefinitionId=" + activityDefinitionId :
                    "/api/runtime/wf/v1.0/processInstances/" + procInstId + "/logs";
                return this.httpSvc.get(logUrl);
            };
        /**
         * @param {?} name
         * @return {?}
         */
        UiFlowchartService.prototype.getI18nValue = /**
         * @param {?} name
         * @return {?}
         */
            function (name) {
                if (!name) {
                    return '';
                }
                /** @type {?} */
                var defaultLang = localStorage.getItem('languageCode');
                /** @type {?} */
                var langData = defaultLang ? translate[defaultLang] : translate['zh-CHS'];
                /** @type {?} */
                var resultVal = '';
                if (name.indexOf('.') === -1) {
                    resultVal = langData[name];
                }
                else {
                    resultVal = name.split('.').reduce(function (obj, key) {
                        if (obj) {
                            return obj[key];
                        }
                        else {
                            return null;
                        }
                    }, langData);
                }
                return resultVal;
            };
        /**
         * @param {?} processId
         * @return {?}
         */
        UiFlowchartService.prototype.getProcessInstanceById = /**
         * @param {?} processId
         * @return {?}
         */
            function (processId) {
                /** @type {?} */
                var url = "/api/runtime/wf/v1.0/processInstances/" + processId;
                return this.httpSvc.get(url);
            };
        /**
         * @param {?} dataId
         * @return {?}
         */
        UiFlowchartService.prototype.getProcInstIdByDataId = /**
         * @param {?} dataId
         * @return {?}
         */
            function (dataId) {
                /** @type {?} */
                var url = "/api/runtime/wf/v1.0/processInstances/procInstId?bizInstId=" + dataId;
                return this.httpSvc.get(url);
            };
        /**
         * @param {?} procInstId
         * @param {?} actInstId
         * @param {?} bizInstId
         * @return {?}
         */
        UiFlowchartService.prototype.retryAifCreation = /**
         * @param {?} procInstId
         * @param {?} actInstId
         * @param {?} bizInstId
         * @return {?}
         */
            function (procInstId, actInstId, bizInstId) {
                return this.httpSvc.post("/api/runtime/wf/v1.0/aifactivityinstance/retry", actInstId);
            };
        UiFlowchartService.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        UiFlowchartService.ctorParameters = function () {
            return [
                { type: cafCommon.HttpService }
            ];
        };
        return UiFlowchartService;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var WFFlowchartService = /** @class */ (function () {
        function WFFlowchartService(msgService, injector, resolver, modalService) {
            this.msgService = msgService;
            this.injector = injector;
            this.resolver = resolver;
            this.modalService = modalService;
            this.flowchartService = this.injector.get(UiFlowchartService);
            this.frameworkService = this.injector.get(rtfCommon.FrameworkService);
        }
        /**
         * @param {?} payload
         * @return {?}
         */
        WFFlowchartService.prototype.viewProcess = /**
         * @param {?} payload
         * @return {?}
         */
            function (payload) {
                if (!payload || !payload.dataId) {
                    this.msgService.warning(this.getI18nValue('static.flowchart.noDataId'));
                    return;
                }
                if (!payload || !payload.bizDefKey) {
                    this.msgService.warning(this.getI18nValue('static.flowchart.noBizDefKey'));
                    return;
                }
                /** @type {?} */
                var parameters = new Map();
                parameters.set('dataId', payload.dataId);
                parameters.set('bizDefKey', payload.bizDefKey);
                if (payload.startMode) {
                    parameters.set('startMode', payload.startMode);
                }
                if (payload.startUserId) {
                    parameters.set('startUserId', payload.startUserId);
                }
                parameters.set('withTitle', true);
                /** @type {?} */
                var options = {
                    appType: 'menu',
                    funcId: 'WFViewFlowChart',
                    appId: '',
                    appEntrance: '',
                    tabId: payload.dataId,
                    isNewTab: true,
                    queryStringParams: parameters
                };
                this.frameworkService.openMenu(options);
            };
        /**
         * 查看流程（tab页中打开）
         * @param procInstId 流程实例ID
         */
        /**
         * 查看流程（tab页中打开）
         * @param {?} procInstId 流程实例ID
         * @return {?}
         */
        WFFlowchartService.prototype.viewFlowChart = /**
         * 查看流程（tab页中打开）
         * @param {?} procInstId 流程实例ID
         * @return {?}
         */
            function (procInstId) {
                if (!procInstId) {
                    this.msgService.warning(this.getI18nValue('static.flowchart.processNotFound'));
                    return;
                }
                /** @type {?} */
                var parameters = new Map();
                parameters.set('processId', procInstId);
                parameters.set('withTitle', true);
                /** @type {?} */
                var options = {
                    appType: 'menu',
                    funcId: 'WFViewFlowChart',
                    appId: '',
                    appEntrance: '',
                    tabId: new Date().getTime().toString(),
                    isNewTab: true,
                    queryStringParams: parameters
                };
                this.frameworkService.openMenu(options);
            };
        /**
         * @param {?} dataId
         * @return {?}
         */
        WFFlowchartService.prototype.viewFlowChartByDataId = /**
         * @param {?} dataId
         * @return {?}
         */
            function (dataId) {
                if (!dataId) {
                    this.msgService.warning(this.getI18nValue('static.flowchart.dataIdIsNull'));
                    return;
                }
                /** @type {?} */
                var parameters = new Map();
                parameters.set('dataId', dataId);
                parameters.set('withTitle', true);
                /** @type {?} */
                var options = {
                    appType: 'menu',
                    funcId: 'WFViewFlowChart',
                    appId: '',
                    appEntrance: '',
                    tabId: new Date().getTime().toString(),
                    isNewTab: true,
                    queryStringParams: parameters
                };
                this.frameworkService.openMenu(options);
            };
        /**
         * 查看流程（弹框中打开）
         * @param procInstId 流程实例ID
         */
        /**
         * 查看流程（弹框中打开）
         * @param {?} procInstId 流程实例ID
         * @param {?=} mode
         * @return {?}
         */
        WFFlowchartService.prototype.viewFlowChartByDialog = /**
         * 查看流程（弹框中打开）
         * @param {?} procInstId 流程实例ID
         * @param {?=} mode
         * @return {?}
         */
            function (procInstId, mode) {
                var _this = this;
                if (!procInstId) {
                    this.msgService.warning(this.getI18nValue('static.flowchart.processNotFound'));
                    return;
                }
                /** @type {?} */
                var func;
                if (UIFlowchartComponent.func) {
                    func = UIFlowchartComponent.func;
                }
                /** @type {?} */
                var modalConfig = {
                    title: this.getI18nValue('static.flowchart.title'),
                    width: 1200,
                    height: 530,
                    showButtons: false,
                    beforeClose: function (modalRef) {
                        if (UIFlowchartComponent.func) {
                            window.removeEventListener('message', UIFlowchartComponent.func, false);
                        }
                        if (func) {
                            window.addEventListener('message', func, false);
                            UIFlowchartComponent.func = func;
                        }
                        return rxjs.of(true);
                    }
                };
                /** @type {?} */
                var compFactory = this.resolver.resolveComponentFactory(UIFlowchartComponent);
                /** @type {?} */
                var inj = core.Injector.create({
                    providers: [
                        {
                            provide: UiFlowchartService, useFactory: function (httpSvc) {
                                return new UiFlowchartService(httpSvc);
                            },
                            deps: [
                                cafCommon.HttpService
                            ]
                        }
                    ], parent: this.injector
                });
                /** @type {?} */
                var compRef = compFactory.create(inj);
                compRef.instance.ProcInstId = procInstId;
                if (mode) {
                    compRef.instance.mode = mode;
                }
                compRef.instance.fill();
                this.flowchartService.getProcessInstanceById(procInstId).subscribe(function (re) {
                    modalConfig.title = re.name + '-v' + re.version + '.0';
                    /** @type {?} */
                    var dialog = _this.modalService.show(compRef, modalConfig);
                });
            };
        /**
         * @private
         * @param {?} name
         * @return {?}
         */
        WFFlowchartService.prototype.getI18nValue = /**
         * @private
         * @param {?} name
         * @return {?}
         */
            function (name) {
                if (!name) {
                    return '';
                }
                /** @type {?} */
                var defaultLang = localStorage.getItem('languageCode');
                /** @type {?} */
                var langData = defaultLang ? translate[defaultLang] : translate['zh-CHS'];
                /** @type {?} */
                var resultVal = '';
                if (name.indexOf('.') === -1) {
                    resultVal = langData[name];
                }
                else {
                    resultVal = name.split('.').reduce(function (obj, key) {
                        if (obj) {
                            return obj[key];
                        }
                        else {
                            return null;
                        }
                    }, langData);
                }
                return resultVal;
            };
        WFFlowchartService.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        WFFlowchartService.ctorParameters = function () {
            return [
                { type: uiMessager.MessagerService },
                { type: core.Injector },
                { type: core.ComponentFactoryResolver },
                { type: uiModal.BsModalService }
            ];
        };
        return WFFlowchartService;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var UIFlowchartComponent = /** @class */ (function () {
        function UIFlowchartComponent(sanitizer, service, changeDetector, injector, chartService) {
            var _this = this;
            this.sanitizer = sanitizer;
            this.service = service;
            this.changeDetector = changeDetector;
            this.injector = injector;
            this.chartService = chartService;
            // 消息监听处理方法
            this.cls = 'd-flex flex-fill h-100';
            this.modalHide = new core.EventEmitter();
            this.fcHtml = window.document.location.origin + '/platform/runtime/wf/web/designer/flowchart.html';
            this.theme = 'viewFlowChart';
            this._mode = 'complete';
            this.modeButton = this.service.getI18nValue('static.flowchart.simulation');
            this.typeList = [{
                    value: 'complete', text: this.service.getI18nValue('static.flowchart.complete')
                },
                {
                    value: 'simulation', text: this.service.getI18nValue('static.flowchart.simulation')
                }];
            // 监听事件处理
            this.eventHandler = function (event) {
                /** @type {?} */
                var origin = event.origin;
                /** @type {?} */
                var message = event.data;
                if (_this.fcHtml.search(origin) > -1) {
                    switch (message.action) {
                        case 'load':
                            _this.viewFlowChart();
                            break;
                        case 'viewLogs':
                            _this.viewLogs(message.data);
                            break;
                        case 'viewParent':
                            _this.viewParent(message.data.superProcInstId);
                            break;
                        case 'viewChild':
                            _this.viewChild(message.data.superActInstId, message.data.superProcInstId);
                            break;
                        case 'viewForm':
                            _this.viewForm(message.data.procInstId, message.data.actInstId, message.data.bizInstId);
                            break;
                        case 'retryAifCreation':
                            _this.retryAifCreation(message.data.procInstId, message.data.actInstId, message.data.bizInstId);
                            break;
                        default:
                            break;
                    }
                }
            };
            this.message = this.injector.get(uiMessager.MessagerService);
            this.frameworkSvc = this.injector.get(rtfCommon.FrameworkService);
            this.srcUrl = this.sanitizer.bypassSecurityTrustResourceUrl(this.fcHtml);
            if (UIFlowchartComponent.func) {
                window.removeEventListener('message', UIFlowchartComponent.func, false);
            }
            this.addMessageListener();
        }
        Object.defineProperty(UIFlowchartComponent.prototype, "mode", {
            get: /**
             * @return {?}
             */ function () {
                return this._mode;
            },
            set: /**
             * @param {?} v
             * @return {?}
             */ function (v) {
                this._mode = v;
                if (this._mode === 'simulation') {
                    this.ifForecast = 'true';
                    this.modeButton = this.service.getI18nValue('static.flowchart.complete');
                }
                else if (this._mode === 'complete') {
                    this.modeButton = this.service.getI18nValue('static.flowchart.simulation');
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(UIFlowchartComponent.prototype, "ProcInstId", {
            set: /**
             * @param {?} procInstId
             * @return {?}
             */ function (procInstId) {
                if (procInstId) {
                    this.procInstId = procInstId;
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(UIFlowchartComponent.prototype, "DataId", {
            set: /**
             * @param {?} dataId
             * @return {?}
             */ function (dataId) {
                if (dataId) {
                    this.dataId = dataId;
                }
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @return {?}
         */
        UIFlowchartComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
            };
        /**
         * @private
         * @return {?}
         */
        UIFlowchartComponent.prototype.addMessageListener = /**
         * @private
         * @return {?}
         */
            function () {
                window.addEventListener('message', this.eventHandler, false);
                UIFlowchartComponent.func = this.eventHandler;
            };
        /**
         * @private
         * @return {?}
         */
        UIFlowchartComponent.prototype.viewFlowChart = /**
         * @private
         * @return {?}
         */
            function () {
                if (this.theme === 'viewFlowChart') {
                    this.viewFlowChartByProcInstId();
                }
                else {
                    this.processForecast();
                }
            };
        /**
         * @private
         * @param {?} superProcInstId
         * @return {?}
         */
        UIFlowchartComponent.prototype.viewParent = /**
         * @private
         * @param {?} superProcInstId
         * @return {?}
         */
            function (superProcInstId) {
                // this.procInstId = superProcInstId;
                // this.viewFlowChartByProcInstId();
            };
        /**
         * @private
         * @param {?} superActInstId
         * @param {?} superProcInstId
         * @return {?}
         */
        UIFlowchartComponent.prototype.viewChild = /**
         * @private
         * @param {?} superActInstId
         * @param {?} superProcInstId
         * @return {?}
         */
            function (superActInstId, superProcInstId) {
                var _this = this;
                this.service.getSubProcessInstance(superActInstId, superProcInstId)
                    .subscribe(function (re) {
                    if (_this.chartService) {
                        _this.chartService.viewFlowChartByDialog(re.id, _this.mode);
                    }
                    else {
                        throw Error('请升级查看流程公共包实现联查子流程图功能');
                    }
                });
            };
        /**
         * @return {?}
         */
        UIFlowchartComponent.prototype.modeSwitch = /**
         * @return {?}
         */
            function () {
                var _this = this;
                if (this.mode === 'complete') {
                    this.mode = 'simulation';
                    this.ifForecast = 'true';
                    this.modeButton = this.service.getI18nValue('static.flowchart.complete');
                    this.service.getForecastProcessByProcInstId(this.procInstId).subscribe(function (r) {
                        _this.actInstList = r.activityInstanceSlims;
                        _this.transInsList = r.transitionInstanceSlims;
                        _this.postMessage('modeSwitch', {
                            mode: 'simulation',
                            actiInstList: r.activityInstanceSlims,
                            transInsList: r.transitionInstanceSlims
                        });
                    });
                }
                else {
                    this.mode = 'complete';
                    this.ifForecast = 'false';
                    this.modeButton = this.service.getI18nValue('static.flowchart.simulation');
                    this.service.getCompleteProcessInfoByProcInstId(this.procInstId).subscribe(function (r) {
                        _this.actInstList = r.activityInstanceSlims;
                        _this.transInsList = r.transitionInstanceSlims;
                        _this.postMessage('modeSwitch', {
                            mode: 'complete',
                            actiInstList: r.activityInstanceSlims,
                            transInsList: r.transitionInstanceSlims
                        });
                    });
                }
            };
        /**
         * @private
         * @param {?} data
         * @return {?}
         */
        UIFlowchartComponent.prototype.viewLogs = /**
         * @private
         * @param {?} data
         * @return {?}
         */
            function (data) {
                this.type = data.type;
                this.actDefId = data.actiDefId;
            };
        /**
         * @private
         * @return {?}
         */
        UIFlowchartComponent.prototype.viewFlowChartByProcInstId = /**
         * @private
         * @return {?}
         */
            function () {
                var _this = this;
                this.content = '';
                if (this.procInstId) {
                    if (this.mode === 'complete') {
                        rxjs.forkJoin(this.service.getProcInstanceById(this.procInstId), this.service.getBpmnModelbyProcInstId(this.procInstId), this.service.getCompleteProcessInfoByProcInstId(this.procInstId))
                            .subscribe(function (data) {
                            _this.processInstance = data[0];
                            _this.content = JSON.stringify(data[1]);
                            _this.actInstList = data[2].activityInstanceSlims;
                            _this.transInsList = data[2].transitionInstanceSlims;
                            _this.loadFlowChart();
                        });
                    }
                    else {
                        rxjs.forkJoin(this.service.getProcInstanceById(this.procInstId), this.service.getBpmnModelbyProcInstId(this.procInstId), this.service.getForecastProcessByProcInstId(this.procInstId))
                            .subscribe(function (data) {
                            _this.processInstance = data[0];
                            _this.content = JSON.stringify(data[1]);
                            _this.actInstList = data[2].activityInstanceSlims;
                            _this.transInsList = data[2].transitionInstanceSlims;
                            _this.loadFlowChart();
                        });
                    }
                }
            };
        /**
         * @private
         * @return {?}
         */
        UIFlowchartComponent.prototype.processForecast = /**
         * @private
         * @return {?}
         */
            function () {
                var _this = this;
                this.content = '';
                this.mode = 'simulation';
                // this.ifForecast = true;
                if (this.processForecastPayload.processDefinitionId && this.processForecastPayload.dataId) {
                    rxjs.forkJoin(this.service.getBpmnModelbyProcDefId(this.processForecastPayload.processDefinitionId), this.service.getForecastProcessByPayload(this.processForecastPayload))
                        .subscribe(function (data) {
                        _this.content = JSON.stringify(data[0]);
                        _this.actInstList = data[1].activityInstanceSlims;
                        _this.transInsList = data[1].transitionInstanceSlims;
                        _this.loadFlowChart();
                    });
                }
            };
        /**
         * @private
         * @param {?} procInstId
         * @param {?} actInstId
         * @param {?} bizInstId
         * @return {?}
         */
        UIFlowchartComponent.prototype.viewForm = /**
         * @private
         * @param {?} procInstId
         * @param {?} actInstId
         * @param {?} bizInstId
         * @return {?}
         */
            function (procInstId, actInstId, bizInstId) {
                var _this = this;
                if (procInstId) {
                    this.service.getFormInfoByActInstId(procInstId, actInstId).subscribe(function (re) {
                        /** @type {?} */
                        var formInfo = re;
                        if (!formInfo || !formInfo.appId) {
                            if (_this.message) {
                                _this.message.info('找不到单据，请联系管理员查看原因！');
                            }
                            return;
                        }
                        /** @type {?} */
                        var options = {
                            appType: 'menu',
                            funcId: formInfo.appId,
                            appId: '',
                            appEntrance: '',
                            tabId: bizInstId,
                            isNewTab: true
                        };
                        // 传工作流上下文参数
                        /** @type {?} */
                        var parameters = new Map();
                        parameters.set('procInstId', procInstId);
                        parameters.set('actInstId', actInstId);
                        formInfo.parameters.forEach(function (item) {
                            return parameters.set(item.code, item.value);
                        });
                        options.queryStringParams = parameters;
                        if (_this.frameworkSvc) {
                            _this.frameworkSvc.openMenu(options);
                        }
                        else {
                            throw Error('框架服务不存在！无法联查！');
                        }
                    });
                }
            };
        /**
         * @private
         * @param {?} procInstId
         * @param {?} actInstId
         * @param {?} bizInstId
         * @return {?}
         */
        UIFlowchartComponent.prototype.retryAifCreation = /**
         * @private
         * @param {?} procInstId
         * @param {?} actInstId
         * @param {?} bizInstId
         * @return {?}
         */
            function (procInstId, actInstId, bizInstId) {
                var _this = this;
                if (procInstId) {
                    this.service.retryAifCreation(procInstId, actInstId, bizInstId).subscribe(function (re) {
                        _this.viewFlowChart();
                    }, function (err) {
                        setTimeout(function () {
                            //todo 确定异常结构, 目前采用兼容取值方式
                            _this.message.error(err.error == null ? err.message : (err.error.Message || err.error.message || err.message));
                        }, 300);
                        throw err;
                    });
                }
            };
        /**
         * @return {?}
         */
        UIFlowchartComponent.prototype.loadFlowChart = /**
         * @return {?}
         */
            function () {
                if (this.content) {
                    this.postMessage('load', {
                        processInstance: this.processInstance,
                        content: this.content,
                        actiInstList: this.actInstList,
                        transInsList: this.transInsList,
                        mode: this.mode
                    });
                }
            };
        /**
         * @param {?} action
         * @param {?} data
         * @return {?}
         */
        UIFlowchartComponent.prototype.postMessage = /**
         * @param {?} action
         * @param {?} data
         * @return {?}
         */
            function (action, data) {
                /** @type {?} */
                var message = { action: action, data: data };
                this.iframe.nativeElement.contentWindow.postMessage(message, this.fcHtml);
            };
        /**
         * @return {?}
         */
        UIFlowchartComponent.prototype.fill = /**
         * @return {?}
         */
            function () {
                this.cls = 'd-flex flex-fill h-100 f-utils-absolute-all';
            };
        UIFlowchartComponent.func = null; // 消息监听处理方法
        UIFlowchartComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'wf-flowchart',
                        template: "<layout [direction]=\"'h'\" [fill]=\"true\">\r\n    <layout-panel region=\"west\" [showBorder]=\"false\" [minWidth]=\"400\" style=\"width: 70%;\">\r\n        <farris-section [mainTitle]=\"'static.flowchart.flowChart' | translate\" [enableMaximize]=\"false\"\r\n            [enableAccordion]=\"false\" [fill]=\"true\" style=\"height: 100%;\" class=\"px-0 pb-0\">\r\n            <ng-template farrisSectionToolbar>   \r\n                <button *ngIf=\"theme==='viewFlowChart'\" class=\"btn btn-secondary mr-2\" (click)=\"modeSwitch()\">{{modeButton}}</button>\r\n                <div class=\"btn-group\" fDropdown>\r\n                    <button class=\"btn btn-secondary dropdown-toggle\" fDropdownToggle type=\"button\">\r\n                        {{'static.flowchart.sequenceColor' | translate}}\r\n                    </button>\r\n                    <div class=\"dropdown-menu\" fDropdownMenu>\r\n                        <table class=\"mx-2\">\r\n                            <tbody>\r\n                                <tr>\r\n                                    <td style=\"width:25px;\"><span\r\n                                            style=\"background:#595959;color:#fff;border-radius:0;display: block;width:15px;height:15px;\"></span>\r\n                                    </td>\r\n                        \r\n                                    <td style=\"width:60px;\">{{'static.flowchart.completed' | translate}}</td>\r\n                                </tr>\r\n                                <tr>\r\n                                    <td style=\"width:25px;\"><span\r\n                                            style=\"background:#f59c24;color:#fff;border-radius:0;display: block;width:15px;height:15px;\"></span>\r\n                                    </td>\r\n                                    <td style=\"width:60px;\">{{'static.flowchart.calculate' | translate}}</td>\r\n                                </tr>\r\n                                <tr>\r\n                                    <td style=\"width:25px;\"><span\r\n                                            style=\"background:#59A1FF;color:#fff;border-radius:0;display: block;width:15px;height:15px;\"></span>\r\n                                    </td>\r\n                                    <td style=\"width:60px;\">{{'static.flowchart.default' | translate}}</td>\r\n                                </tr>\r\n                                <tr>\r\n                                    <td style=\"width:25px;\"><span\r\n                                            style=\"background:#FF4040;color:#fff;border-radius:0;display: block;width:15px;height:15px;\"></span>\r\n                                    </td>\r\n                                    <td style=\"width:60px;\">{{'static.flowchart.suspend' | translate}}</td>\r\n                                </tr>\r\n                            </tbody>\r\n                        </table>\r\n                    </div>\r\n                </div>\r\n\r\n            </ng-template>\r\n            <div *ngIf=\"dataId || procInstId || processForecastPayload\" style=\"height: 100%;\">\r\n                <iframe #iframe class=\"flowChart\" [src]=\"srcUrl\" frameborder=\"0\">\r\n                </iframe>\r\n            </div>\r\n        </farris-section>\r\n    </layout-panel>\r\n    <layout-panel region=\"center\" [showBorder]=\"false\" [minWidth]=\"300\" style=\"overflow: auto; width: 30%;\">\r\n        <farris-section [enableMaximize]=\"false\" [enableAccordion]=\"false\" [showHeader]=\"false\" class=\"px-0\">\r\n            <wf-approval-logs\r\n                [ProcInstId]=\"procInstId\"\r\n                [DataId]=\"dataId\" \r\n                [IfForecast]=\"ifForecast\"\r\n                [ActivityDefinitionId]=\"actDefId\" \r\n                [Type]=\"type\"\r\n                [processForecastPayload] = \"processForecastPayload\"\r\n                [ShowHeader]=\"true\"\r\n                [ShowViewProcess]=\"false\"\r\n            >\r\n            </wf-approval-logs>\r\n        </farris-section>\r\n    </layout-panel>\r\n</layout>\r\n\r\n",
                        styles: ["::ng-deep .chartModal .ant-modal{height:100%}::ng-deep .chartModal .ant-modal-content{height:100%}::ng-deep .chartModal .ant-modal-body{height:90%}.flowChart{height:100%;min-height:400px;width:100%}"]
                    }] }
        ];
        /** @nocollapse */
        UIFlowchartComponent.ctorParameters = function () {
            return [
                { type: platformBrowser.DomSanitizer },
                { type: UiFlowchartService },
                { type: core.ChangeDetectorRef },
                { type: core.Injector },
                { type: WFFlowchartService, decorators: [{ type: core.Optional }] }
            ];
        };
        UIFlowchartComponent.propDecorators = {
            cls: [{ type: core.HostBinding, args: ['class',] }],
            iframe: [{ type: core.ViewChild, args: ['iframe',] }],
            modalHide: [{ type: core.Output }],
            theme: [{ type: core.Input }],
            processForecastPayload: [{ type: core.Input }],
            mode: [{ type: core.Input }],
            ProcInstId: [{ type: core.Input }],
            DataId: [{ type: core.Input }]
        };
        return UIFlowchartComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var TranslatePipe = /** @class */ (function () {
        function TranslatePipe(service) {
            this.service = service;
        }
        /**
         * @param {?} name
         * @param {?=} defaultVal
         * @return {?}
         */
        TranslatePipe.prototype.transform = /**
         * @param {?} name
         * @param {?=} defaultVal
         * @return {?}
         */
            function (name, defaultVal) {
                if (defaultVal === void 0) {
                    defaultVal = '';
                }
                /** @type {?} */
                var r = this.service.getI18nValue(name);
                return r ? r : defaultVal;
            };
        TranslatePipe.decorators = [
            { type: core.Pipe, args: [{ name: 'translate' },] }
        ];
        /** @nocollapse */
        TranslatePipe.ctorParameters = function () {
            return [
                { type: UiFlowchartService }
            ];
        };
        return TranslatePipe;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var UiFlowchartModule = /** @class */ (function () {
        function UiFlowchartModule() {
        }
        UiFlowchartModule.decorators = [
            { type: core.NgModule, args: [{
                        declarations: [
                            UIFlowchartComponent,
                            TranslatePipe
                        ],
                        imports: [
                            uiLayout.LayoutModule,
                            common.CommonModule,
                            uiDialog.FarrisDialogModule,
                            uiMessager.MessagerModule.forRoot({
                                width: 500
                            }),
                            uiSection.FarrisSectionModule,
                            wfApprovalLogs.WfApprovalLogsModule,
                            uiComboList.ComboListModule,
                            forms.ReactiveFormsModule,
                            forms.FormsModule,
                            uiDropdown.FDropdownDirectiveTypeModule,
                            uiDatagrid.DatagridModule,
                            uiNotify.NotifyModule
                        ],
                        exports: [UIFlowchartComponent],
                        providers: [
                            cafCommon.HttpService,
                            UiFlowchartService,
                            WFFlowchartService,
                        ],
                        entryComponents: [
                            UIFlowchartComponent
                        ]
                    },] }
        ];
        return UiFlowchartModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var ForecastProcessPayload = /** @class */ (function () {
        function ForecastProcessPayload() {
        }
        return ForecastProcessPayload;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    exports.UiFlowchartService = UiFlowchartService;
    exports.UIFlowchartComponent = UIFlowchartComponent;
    exports.UiFlowchartModule = UiFlowchartModule;
    exports.WFFlowchartService = WFFlowchartService;
    exports.TranslatePipe = TranslatePipe;
    exports.ForecastProcessPayload = ForecastProcessPayload;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=gsp-wf-ui-flowchart.umd.js.map