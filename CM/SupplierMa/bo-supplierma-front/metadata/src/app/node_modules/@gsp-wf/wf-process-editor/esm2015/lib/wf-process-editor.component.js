/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input, ViewChild, ElementRef, Injector, ComponentFactoryResolver, HostBinding, Output, EventEmitter } from '@angular/core';
import { ProcessTime } from './model/process-time';
import { DomSanitizer } from '@angular/platform-browser';
import { ProcessDesignerUIState } from './app/process-designer.uistate';
import { ResourceKeys } from './model/resourceKeys';
import { ProcessDesignerViewModel } from './app/process-designer.viewmodel';
import { ExecuteFormModel, TerminalType } from './views/execute-forms/entities/execute-form.entity';
import { BsModalService } from '@farris/ui-modal';
import { ProcessDesignerDataService } from './domain/process-designer.dataservice';
import { LoadingService } from '@farris/ui-loading';
import { NotifyService } from '@farris/ui-notify';
import { MessagerService } from '@farris/ui-messager';
import { WFFlowElementsViewModel } from './app/wf-flowElements.viewModel';
import { PropertyPanelComponent } from '@farris/ui-property-panel';
import { SignRuleComponent } from './views/sign-rule/sign-rule.component';
import { ProcessInfo } from './model/process-info';
import { RTProcessInfo } from './model/rt-process-info';
import { of } from 'rxjs';
import { AuditEvent } from './domain/entities/audit-processDef-info';
import { NoteComponent } from './views/note/note.component';
import { ProcessDeUtil } from './domain/process-de-util';
export class WfProcessEditorComponent {
    /**
     * @param {?} sanitizer
     * @param {?} uiState
     * @param {?} viewModel
     * @param {?} service
     * @param {?} loadService
     * @param {?} notify
     * @param {?} message
     * @param {?} activity
     * @param {?} injector
     * @param {?} modalService
     * @param {?} resolver
     */
    constructor(sanitizer, uiState, viewModel, service, loadService, notify, message, activity, injector, modalService, resolver) {
        this.sanitizer = sanitizer;
        this.uiState = uiState;
        this.viewModel = viewModel;
        this.service = service;
        this.loadService = loadService;
        this.notify = notify;
        this.message = message;
        this.activity = activity;
        this.injector = injector;
        this.modalService = modalService;
        this.resolver = resolver;
        this.flag = true;
        this.cls = 'farris-main-area flex-column';
        this.action = 'edit';
        this.mode = 'general';
        this.close = new EventEmitter();
        /**
         * 监听事件处理
         */
        this.eventHandler = (/**
         * @param {?} event
         * @return {?}
         */
        (event) => {
            /** @type {?} */
            const postData = (/** @type {?} */ (event.data));
            if (this.uiState.POST_MESSAGE_TARGET.search(event.origin) > -1) {
                switch (postData.action) {
                    case ResourceKeys.wf_initProperty:
                        if (this.flag) {
                            this.flag = false;
                            this.closeLoading();
                        }
                        this.viewModel.initProcessProperty(postData.data);
                        break;
                    case ResourceKeys.wf_save:
                        this.uiState.content = postData.data;
                        this.showLoading();
                        this.save();
                        break;
                    case ResourceKeys.wf_deploy:
                        this.uiState.content = postData.data;
                        this.showLoading();
                        this.viewModel.deployProcess(this.uiState.content).subscribe((/**
                         * @param {?} data
                         * @return {?}
                         */
                        (data) => {
                            this.closeLoading();
                            this.viewModel.saveProcess(this.uiState.content, this.processInfo, 0).subscribe((/**
                             * @param {?} r
                             * @return {?}
                             */
                            (r) => { }));
                            this.notify.success((/** @type {?} */ ({
                                title: '系统提示', msg: '发布成功', timeout: 3000
                            })));
                            /** @type {?} */
                            const process = JSON.parse(this.uiState.content);
                            this.viewModel.auditProcessDef(AuditEvent.WF_ProcessDef_Deploy, true, process.DefaultProcess.Key);
                        }), (/**
                         * @param {?} error
                         * @return {?}
                         */
                        (error) => {
                            this.closeLoading();
                            this.notify.error((/** @type {?} */ ({
                                title: '系统提示', msg: '发布失败，请检查流程是否正确！', timeout: 3000
                            })));
                            /** @type {?} */
                            const process = JSON.parse(this.uiState.content);
                            this.viewModel.auditProcessDef(AuditEvent.WF_ProcessDef_Deploy, false, process.DefaultProcess.Key);
                        }));
                        break;
                    case ResourceKeys.wf_saveAs:
                        /** @type {?} */
                        const prcoess = postData.data;
                        this.viewModel.saveAsProcess(prcoess, this.processInfo);
                        break;
                    case ResourceKeys.wf_sync:
                        /** @type {?} */
                        const content = postData.data;
                        this.viewModel.syncDtProcess(content, this.rtProcessInfo);
                        break;
                    case ResourceKeys.wf_note:
                        this.note(postData.data);
                        break;
                    case ResourceKeys.wf_closeDesigner:
                        this.close.emit();
                        break;
                    case ResourceKeys.getActivities: // 获取活动节点信息
                        this.uiState.getUserActList(postData.data);
                        break;
                    case ResourceKeys.getEndEvents: // 获取所有结束节点信息
                        this.uiState.getEndEventList(postData.data);
                        break;
                    case 'loaded':
                        this.openProcContent();
                        break;
                    case ResourceKeys.wf_showTip:
                        this.showTip(postData.data);
                        break;
                    default:
                        this.viewModel.setProperty(postData.data);
                        break;
                }
            }
        });
        // 如果存在消息监听，先删掉
        if (WfProcessEditorComponent.func) {
            window.removeEventListener('message', WfProcessEditorComponent.func, false);
        }
        this.addMessageListener();
        this.uiState.getAdministratorInfo();
    }
    /**
     * @param {?} t
     * @return {?}
     */
    set time(t) {
        this._time = t;
    }
    /**
     * @return {?}
     */
    get time() {
        return this._time;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.getSrc();
        this.uiState.initUIState();
        this.showLoading();
        this.updateProperty();
        // 获取消息列表
        this.uiState.getMessageChannels();
    }
    /**
     * @private
     * @return {?}
     */
    getSrc() {
        /** @type {?} */
        let processCategoryId;
        if (this._time === ProcessTime.rt) {
            processCategoryId = this.rtProcessInfo.flowFormId;
        }
        else {
            processCategoryId = this.processInfo.flowFormId;
        }
        this.viewModel.getProcessCategory(processCategoryId).subscribe((/**
         * @param {?} procCategory
         * @return {?}
         */
        (procCategory) => {
            this.src = '/platform/runtime/wf/web/designer/index.html';
            if (this._time === ProcessTime.rt) {
                this.src = this.src + '?time=rt';
            }
            else {
                this.src = this.src + `?time=dt`;
                if (procCategory) {
                    this.src = this.src + `&bizCategoryId=${procCategory.businessObjectId}`;
                }
            }
            if (this.action === 'view') {
                this.src = this.src + '&action=view';
            }
            else {
                this.src = this.src + '&action=edit';
            }
            if (this.mode === 'general') {
                this.src = this.src + '&mode=general';
            }
            else {
                this.src = this.src + '&mode=simplify';
            }
            this.src = this.sanitizer.bypassSecurityTrustResourceUrl(this.src);
        }));
    }
    /**
     * 添加事件监听
     * @private
     * @return {?}
     */
    addMessageListener() {
        window.addEventListener('message', this.eventHandler, false);
        WfProcessEditorComponent.func = this.eventHandler;
    }
    /**
     * @private
     * @return {?}
     */
    updateProperty() {
        this.propertyPanel.propertyChanged.subscribe((/**
         * @param {?} data
         * @return {?}
         */
        (data) => {
            this.updateChangeProperty(data);
        }));
        this.propertyPanel.submitModal.subscribe((/**
         * @param {?} data
         * @return {?}
         */
        (data) => {
            this.updateChangeProperty(data.changeObject);
        }));
        return false; // 防止冒泡
    }
    /**
     * 更新属性
     * @private
     * @param {?} data
     * @return {?}
     */
    updateChangeProperty(data) {
        data.Id = this.uiState.propertyData.Id;
        switch (data.propertyID) {
            case ResourceKeys.EntryForm:
                this.bindEntryFormInfo(data);
                break;
            case ResourceKeys.ApprovalItems:
                this.sendMessage(ResourceKeys.updateProperty, JSON.stringify(data));
                this.activity.buildCounterSignVariables(data.propertyValue);
                break;
            case ResourceKeys.CompleteStrategy:
                this.beforeCompleteStrategyChange(data).subscribe((/**
                 * @param {?} b
                 * @return {?}
                 */
                b => {
                    if (b) {
                        this.sendMessage(ResourceKeys.updateProperty, JSON.stringify(data));
                        this.completeStrategyChanged(data.propertyValue);
                    }
                    else { // 刷新属性框
                        this.sendMessage(ResourceKeys.refresh, JSON.stringify(data));
                    }
                }));
                break;
            case ResourceKeys.SignRule:
                this.sendMessage(ResourceKeys.updateProperty, JSON.stringify(data));
                break;
            default:
                this.sendMessage(ResourceKeys.updateProperty, JSON.stringify(data));
                break;
        }
    }
    /**
     * 绑定流程分类的参数列表，流程构件，表单赋值
     * @private
     * @param {?} data
     * @return {?}
     */
    bindEntryFormInfo(data) {
        /** @type {?} */
        const flowformId = data.propertyValue.id;
        if (flowformId) {
            this.viewModel.getFlowFormInfoById(flowformId).subscribe((/**
             * @param {?} info
             * @return {?}
             */
            (info) => {
                data.flowForm = info.flowForm;
                data.formalParameters = info.formalParameters;
                data.processBizComponnets = info.bizComponents;
                data.executeForms = [];
                info.excuteForms.forEach((/**
                 * @param {?} form
                 * @return {?}
                 */
                form => {
                    if (form.isDefault) {
                        /** @type {?} */
                        const executeForms = this.ConvertExecuteForm(form);
                        data.executeForms = data.executeForms.concat(executeForms); // 流程绑定默认单据
                    }
                }));
                data.customizeActions = info.customizeActions.filter((/**
                 * @param {?} a
                 * @return {?}
                 */
                a => a.isAll === true)).map((/**
                 * @param {?} a
                 * @return {?}
                 */
                a => ({
                    id: a.id, code: a.code, name: a.name, terminalType: a.terminal,
                    actualParameters: a.actualParameters.map((/**
                     * @param {?} p
                     * @return {?}
                     */
                    p => ({
                        Name: p.code, Value: p.value, ValueText: p.name, Tag: 'expression'
                    })))
                })));
                this.sendMessage(ResourceKeys.loadBizActivity, info.bizActivities || []);
                this.sendMessage(ResourceKeys.updateProperty, JSON.stringify(data));
            }));
        }
    }
    /**
     * @private
     * @param {?} record
     * @return {?}
     */
    note(record) {
        /** @type {?} */
        const compFactory = this.resolver.resolveComponentFactory(NoteComponent);
        /** @type {?} */
        const compRef = compFactory.create(this.injector);
        compRef.instance.record = record;
        /** @type {?} */
        const modalConfig = {
            title: '流程变更记录',
            width: 800,
            height: 520,
            showButtons: true,
            buttons: compRef.instance.footer
        };
        /** @type {?} */
        const dialog = this.modalService.show(compRef, modalConfig);
        compRef.instance.cancel.subscribe((/**
         * @param {?} $event
         * @return {?}
         */
        $event => dialog.close()));
        compRef.instance.submit.subscribe((/**
         * @param {?} data
         * @return {?}
         */
        (data) => {
            this.sendMessage(ResourceKeys.wf_note, data);
            dialog.close();
        }));
    }
    /**
     * @private
     * @return {?}
     */
    openProcContent() {
        if (this.time === ProcessTime.dt) {
            if (this.processInfo) {
                if (this.processInfo.processKey === ResourceKeys.new && this.processInfo.flowFormId) {
                    this.openNewProcess(this.processInfo.flowFormId);
                }
                else {
                    // TODO：首先获取流程分类信息，确保流程分类和流程构件获取到（会稍微影响设计器打开速度）
                    this.viewModel.getFlowFormInfoById(this.processInfo.flowFormId).subscribe((/**
                     * @param {?} info
                     * @return {?}
                     */
                    (info) => {
                        this.sendMessage(ResourceKeys.loadBizActivity, info.bizActivities || []);
                        this.getProcContent(this.processInfo.processKey).subscribe((/**
                         * @param {?} re
                         * @return {?}
                         */
                        re => {
                            this.uiState.content = this.checkModelContent(JSON.stringify(re));
                            this.sendMessage(ResourceKeys.open, {
                                content: this.uiState.content
                            });
                        }));
                    }));
                }
            }
            else {
                throw new Error('不存在设计时流程信息！请先赋值！');
            }
        }
        else if (this.time === ProcessTime.rt) {
            if (this.rtProcessInfo) {
                this.viewModel.getFlowFormInfoById(this.rtProcessInfo.flowFormId).subscribe((/**
                 * @param {?} info
                 * @return {?}
                 */
                (info) => {
                    this.sendMessage(ResourceKeys.loadBizActivity, info.bizActivities || []);
                    this.getProcContent(this.rtProcessInfo.rtProcDefId).subscribe((/**
                     * @param {?} re
                     * @return {?}
                     */
                    re => {
                        this.uiState.content = this.checkModelContent(JSON.stringify(re));
                        this.sendMessage(ResourceKeys.open, {
                            content: this.uiState.content
                        });
                    }));
                }));
            }
            else {
                throw new Error('不存在运行时流程信息！请先赋值！');
            }
        }
    }
    /**
     * 新增流程，基于流程分类获取参数列表，构件和表单
     * @private
     * @param {?} ffId 流程分类ID
     * @return {?}
     */
    openNewProcess(ffId) {
        this.viewModel.getFlowFormInfoById(ffId)
            .subscribe((/**
         * @param {?} info
         * @return {?}
         */
        (info) => {
            /** @type {?} */
            const processBizComponnets = info.bizComponents;
            /** @type {?} */
            const customizeActions = info.customizeActions.filter((/**
             * @param {?} a
             * @return {?}
             */
            a => a.isAll === true)).map((/**
             * @param {?} a
             * @return {?}
             */
            a => ({
                id: a.id, code: a.code, name: a.name, terminalType: a.terminal,
                actualParameters: a.actualParameters.map((/**
                 * @param {?} p
                 * @return {?}
                 */
                p => ({
                    Name: p.code, Value: p.value, ValueText: p.name, Tag: 'expression'
                })))
            })));
            /** @type {?} */
            let executeForms = [];
            info.excuteForms.forEach((/**
             * @param {?} form
             * @return {?}
             */
            form => {
                if (form.isDefault) {
                    /** @type {?} */
                    const forms = this.ConvertExecuteForm(form);
                    executeForms = executeForms.concat(forms); // 流程绑定默认单据
                }
            }));
            // 如果不存在表单定义，需要去表单格式列表取一下
            if (executeForms.length === 0
                || executeForms.findIndex((/**
                 * @param {?} e
                 * @return {?}
                 */
                e => e.TerminalType === TerminalType.PC)) === -1
                || executeForms.findIndex((/**
                 * @param {?} e
                 * @return {?}
                 */
                e => e.TerminalType === TerminalType.MOBILE)) === -1) {
                this.viewModel.getFormFormatsByBizCategory().subscribe((/**
                 * @param {?} formFormats
                 * @return {?}
                 */
                (formFormats) => {
                    if (formFormats && formFormats.length > 0) {
                        if (executeForms.findIndex((/**
                         * @param {?} e
                         * @return {?}
                         */
                        e => e.TerminalType === TerminalType.PC)) === -1) {
                            /** @type {?} */
                            const formFormat = formFormats.filter((/**
                             * @param {?} f
                             * @return {?}
                             */
                            f => f.terminal === 'PC' && f.status === 0))[0];
                            if (formFormat) {
                                executeForms.push(this.formFormat2ExecuteForm(formFormat));
                            }
                        }
                        if (executeForms.findIndex((/**
                         * @param {?} e
                         * @return {?}
                         */
                        e => e.TerminalType === TerminalType.MOBILE)) === -1) {
                            /** @type {?} */
                            const formFormat = formFormats.filter((/**
                             * @param {?} f
                             * @return {?}
                             */
                            f => f.terminal === 'Mobile' && f.status === 0))[0];
                            if (formFormat) {
                                executeForms.push(this.formFormat2ExecuteForm(formFormat));
                            }
                        }
                    }
                    this.sendMessage(ResourceKeys.loadBizActivity, info.bizActivities || []);
                    this.sendMessage(ResourceKeys.new, {
                        name: this.processInfo.processName,
                        bizObjId: this.processInfo.bizObjId,
                        ffId,
                        ffName: this.processInfo.flowFormName,
                        startMode: this.processInfo.startMode,
                        formalParameters: info.formalParameters,
                        processBizComponnets,
                        executeForms,
                        customizeActions,
                        processDescription: info.flowForm.processDescription
                    });
                }));
            }
            else {
                this.sendMessage(ResourceKeys.loadBizActivity, info.bizActivities || []);
                this.sendMessage(ResourceKeys.new, {
                    name: this.processInfo.processName,
                    bizObjId: this.processInfo.bizObjId,
                    ffId,
                    ffName: this.processInfo.flowFormName,
                    startMode: this.processInfo.startMode,
                    formalParameters: info.formalParameters,
                    processBizComponnets,
                    executeForms,
                    customizeActions,
                    processDescription: info.flowForm.processDescription
                });
            }
        }));
    }
    // 向子页面发送消息
    /**
     * @private
     * @param {?} action
     * @param {?} data
     * @return {?}
     */
    sendMessage(action, data) {
        /** @type {?} */
        const iframeWindow = this.iframe.nativeElement.contentWindow;
        /** @type {?} */
        const message = this.wrapMessage(action, data);
        iframeWindow.postMessage(message, this.uiState.POST_MESSAGE_TARGET);
    }
    // 包装消息内容
    /**
     * @private
     * @param {?} action
     * @param {?} data
     * @return {?}
     */
    wrapMessage(action, data) {
        return {
            action,
            data
        };
    }
    /**
     * @private
     * @param {?} data
     * @return {?}
     */
    showTip(data) {
        if (data.type === 'message') {
            switch (data.level) {
                case 'warning':
                    this.message.warning(data.message);
                    break;
                case 'error':
                    this.message.error(data.message);
                    break;
                default:
                    this.message.info(data.message);
                    break;
            }
        }
        else if (data.type === 'notify') {
            switch (data.level) {
                case 'warning':
                    this.notify.warning(data.message);
                    break;
                case 'error':
                    this.notify.error(data.message);
                    break;
                default:
                    this.notify.info(data.message);
                    break;
            }
        }
    }
    /**
     * 获取流程上下文
     * @param {?} id 流程定义ID（设计时使用流程定义Key，运行时使用流程定义ID）
     * @return {?}
     */
    getProcContent(id) {
        if (id) {
            if (this.time === ProcessTime.dt) {
                return this.service.getProcContentbyKey(id);
            }
            else if (this.time === ProcessTime.rt) {
                return this.service.getRTProcContentbyId(id);
            }
            else {
                throw new Error('设计器运行时机错误！');
            }
        }
    }
    /**
     * @private
     * @return {?}
     */
    save() {
        /** @type {?} */
        const process = JSON.parse(this.uiState.content);
        // this.uiState.content = this.checkModelContent(this.uiState.content);
        this.saveHttp().subscribe((/**
         * @param {?} data
         * @return {?}
         */
        (data) => {
            this.closeLoading();
            this.notify.success((/** @type {?} */ ({
                title: '系统提示', msg: '保存成功', timeout: 3000
            })));
            if (this.time === ProcessTime.dt) {
                this.viewModel.auditProcessDef(AuditEvent.WF_ProcessDef_SaveDT, true, process.DefaultProcess.Key);
            }
            else if (this.time === ProcessTime.rt) {
                this.viewModel.auditProcessDef(AuditEvent.WF_ProcessDef_SaveRT, true, process.DefaultProcess.Key);
            }
        }), (/**
         * @param {?} error
         * @return {?}
         */
        (error) => {
            this.closeLoading();
            this.notify.error((/** @type {?} */ ({
                title: '系统提示', msg: '保存失败，请检查流程是否正确！', timeout: 3000
            })));
            if (this.time === ProcessTime.dt) {
                this.viewModel.auditProcessDef(AuditEvent.WF_ProcessDef_SaveDT, false, process.DefaultProcess.Key);
            }
            else if (this.time === ProcessTime.rt) {
                this.viewModel.auditProcessDef(AuditEvent.WF_ProcessDef_SaveRT, false, process.DefaultProcess.Key);
            }
        }));
    }
    /**
     * 保存流程定义（设计时+运行时）
     * @private
     * @return {?}
     */
    saveHttp() {
        if (this.uiState.content) {
            if (this.time === ProcessTime.dt) {
                return this.viewModel.saveProcess(this.uiState.content, this.processInfo, 1);
            }
            else if (this.time === ProcessTime.rt) {
                return this.viewModel.saveRTProcess(this.uiState.content, this.rtProcessInfo.rtProcDefId);
            }
            else {
                throw new Error('设计器运行时机错误！');
            }
        }
    }
    /**
     * @return {?}
     */
    showLoading() {
        this.loadService.show({ container: 'body', message: '', type: 1 });
    }
    /**
     * @return {?}
     */
    closeLoading() {
        this.loadService.close();
    }
    /**
     * @private
     * @param {?} form
     * @return {?}
     */
    ConvertExecuteForm(form) {
        /** @type {?} */
        const executeForms = new Array();
        if (form.terminal === 'web,app') {
            /** @type {?} */
            const webForm = new ExecuteFormModel();
            webForm.ComponentId = form.appId;
            webForm.formFormatId = form.formFormatId;
            webForm.FormType = form.formType;
            webForm.Name = form.name;
            webForm.TerminalType = TerminalType.PC;
            if (form.actualParameters && form.actualParameters.length > 0) {
                webForm.ActualParameters = form.actualParameters.map((/**
                 * @param {?} p
                 * @return {?}
                 */
                p => ({
                    Name: p.code,
                    Value: p.value
                })));
            }
            executeForms.push(webForm);
            /** @type {?} */
            const appForm = new ExecuteFormModel();
            appForm.ComponentId = form.appId;
            appForm.formFormatId = form.formFormatId;
            appForm.FormType = form.formType;
            appForm.Name = form.name;
            appForm.TerminalType = TerminalType.MOBILE;
            if (form.actualParameters && form.actualParameters.length > 0) {
                appForm.ActualParameters = form.actualParameters.map((/**
                 * @param {?} p
                 * @return {?}
                 */
                p => ({
                    Name: p.code,
                    Value: p.value
                })));
            }
            executeForms.push(appForm);
        }
        else {
            /** @type {?} */
            const executeForm = new ExecuteFormModel();
            executeForm.ComponentId = form.appId;
            executeForm.formFormatId = form.formFormatId;
            executeForm.FormType = form.formType;
            executeForm.Name = form.name;
            switch (form.terminal) {
                case 'web':
                    executeForm.TerminalType = TerminalType.PC;
                    break;
                case 'app':
                    executeForm.TerminalType = TerminalType.MOBILE;
                    break;
            }
            if (form.actualParameters && form.actualParameters.length > 0) {
                executeForm.ActualParameters = form.actualParameters.map((/**
                 * @param {?} p
                 * @return {?}
                 */
                p => ({
                    Name: p.code,
                    Value: p.value
                })));
            }
            executeForms.push(executeForm);
        }
        return executeForms;
    }
    /**
     * @private
     * @param {?} formformat
     * @return {?}
     */
    formFormat2ExecuteForm(formformat) {
        /** @type {?} */
        const form = new ExecuteFormModel();
        form.Id = ProcessDeUtil.GenerateElementId();
        form.ComponentId = null;
        form.formFormatId = formformat.id;
        form.FormType = '0';
        form.Name = formformat.name;
        switch (formformat.terminal) {
            case 'PC':
                form.TerminalType = TerminalType.PC;
                break;
            case 'Mobile':
                form.TerminalType = TerminalType.MOBILE;
                break;
        }
        if (formformat.urlParameters && formformat.urlParameters.length > 0) {
            form.ActualParameters = formformat.urlParameters.map((/**
             * @param {?} p
             * @return {?}
             */
            p => ({
                Name: p.code,
                Value: p.value
            })));
        }
        return form;
    }
    /**
     * @private
     * @param {?} strategy
     * @return {?}
     */
    completeStrategyChanged(strategy) {
        if (strategy !== this.uiState.completeIterator[0].key) {
            // 参与者存在自动审批的情况下，不允许修改完成策略为会签规则
            // if (this.uiState.propertyData.ParticipantSchemes
            //   && this.uiState.propertyData.ParticipantSchemes.options
            //   && this.uiState.propertyData.ParticipantSchemes.options.automaticPerformers
            //   && this.uiState.propertyData.ParticipantSchemes.options.automaticPerformers.length > 0) {
            //   return;
            // } else {
            // 会签规则不存在，即由抢占模式，变为会签时
            if (!this.uiState.propertyData.SignRule) {
                // 会签是自动弹出会签规则编辑
                /** @type {?} */
                const compFactory = this.resolver.resolveComponentFactory(SignRuleComponent);
                /** @type {?} */
                const compRef = compFactory.create(this.injector);
                compRef.instance.value = [];
                // compRef.instance.counterSignVariables = this.uiState.counterSignVariables || [];
                // compRef.instance.approvalItems = this.uiState.approvalItems || [];
                /** @type {?} */
                const modalConfig = Object.assign(compRef.instance.modalConfig, { buttons: compRef.instance.modalFooter });
                /** @type {?} */
                const dialog = this.modalService.show(compRef, modalConfig);
                compRef.instance.closeModal.subscribe((/**
                 * @param {?} $event
                 * @return {?}
                 */
                $event => dialog.close()));
                compRef.instance.submitModal.subscribe((/**
                 * @param {?} data
                 * @return {?}
                 */
                (data) => {
                    this.updateChangeProperty({
                        categoryId: 'performerProperty',
                        propertyID: ResourceKeys.SignRule,
                        propertyValue: data.value
                    });
                    dialog.close();
                }));
            }
            // 会签规则下，驳回规则约束
            if (((/** @type {?} */ (this.uiState.propertyData.BackWardRule))).SelectTargetAble === true) {
                setTimeout((/**
                 * @return {?}
                 */
                () => {
                    this.message.warning('会签策略下,“驳回规则”不允许“动态选择驳回级次”，请修改！');
                }), 500);
            }
            // }
        }
    }
    /**
     * 完成策略调整校验
     * @private
     * @param {?} data
     * @return {?}
     */
    beforeCompleteStrategyChange(data) {
        if (this.time === ProcessTime.rt) {
            return this.viewModel.beforeCompleteStrategyChange(data, this.rtProcessInfo);
        }
        else {
            return of(true);
        }
    }
    /**
     * 保存，发布，另存，同步操作时
     * 校验模型的流程分类ID与列表存储是否一致，不一致时，以列表为准
     * @private
     * @param {?} content
     * @return {?}
     */
    checkModelContent(content) {
        /** @type {?} */
        const process = JSON.parse(content);
        /** @type {?} */
        const modelBizDefKey = process.DefaultProcess.extensionElements.find((/**
         * @param {?} e
         * @return {?}
         */
        e => e.ClrTypeID === 'wf.ProcessHeader')).BizDefKey;
        if (this.time === ProcessTime.dt) {
            if (modelBizDefKey === this.processInfo.flowFormId) {
                return content;
            }
            else {
                process.DefaultProcess.extensionElements.find((/**
                 * @param {?} e
                 * @return {?}
                 */
                e => e.ClrTypeID === 'wf.ProcessHeader')).BizDefKey = this.processInfo.flowFormId;
                process.DefaultProcess.extensionElements.find((/**
                 * @param {?} e
                 * @return {?}
                 */
                e => e.ClrTypeID === 'wf.ProcessHeader')).BizDefName = this.uiState.flowFormInfo.flowForm.name;
                return JSON.stringify(process);
            }
        }
        else if (this.time === ProcessTime.rt) {
            if (modelBizDefKey === this.rtProcessInfo.flowFormId) {
                return content;
            }
            else {
                process.DefaultProcess.extensionElements.find((/**
                 * @param {?} e
                 * @return {?}
                 */
                e => e.ClrTypeID === 'wf.ProcessHeader')).BizDefKey = this.rtProcessInfo.flowFormId;
                process.DefaultProcess.extensionElements.find((/**
                 * @param {?} e
                 * @return {?}
                 */
                e => e.ClrTypeID === 'wf.ProcessHeader')).BizDefName = this.uiState.flowFormInfo.flowForm.name;
                return JSON.stringify(process);
            }
        }
    }
}
/**
 * 消息监听处理方法
 */
WfProcessEditorComponent.func = null;
WfProcessEditorComponent.decorators = [
    { type: Component, args: [{
                selector: 'wf-process-editor',
                template: `
  <div class="f-utils-flex-column h-100 m-2">
    <div class="flex-auto d-flex flex-fill flex-row" style="position:relative; overflow: hidden">
      <div class="flex-grow-1">
        <div *ngIf="src" class="h-100">
          <iframe #iframe class="bpmn-designer" [src]="src" frameborder="0">
          </iframe>
        </div>
      </div>
      <div>
        <app-property-panel #propertyPanel [(propertyConfig)]="uiState.propertyConfig" [(propertyData)]="uiState.propertyData"
          width="235" showCloseBtn="false"></app-property-panel>
      </div>
    </div>
  </div>`,
                styles: [`
    .bpmn-designer {
      height: 100%;
      min-height: 400px;
      width: 100%;
    }`]
            }] }
];
/** @nocollapse */
WfProcessEditorComponent.ctorParameters = () => [
    { type: DomSanitizer },
    { type: ProcessDesignerUIState },
    { type: ProcessDesignerViewModel },
    { type: ProcessDesignerDataService },
    { type: LoadingService },
    { type: NotifyService },
    { type: MessagerService },
    { type: WFFlowElementsViewModel },
    { type: Injector },
    { type: BsModalService },
    { type: ComponentFactoryResolver }
];
WfProcessEditorComponent.propDecorators = {
    cls: [{ type: HostBinding, args: ['class',] }],
    time: [{ type: Input }],
    processInfo: [{ type: Input }],
    rtProcessInfo: [{ type: Input }],
    action: [{ type: Input }],
    mode: [{ type: Input }],
    close: [{ type: Output }],
    propertyPanel: [{ type: ViewChild, args: ['propertyPanel',] }],
    iframe: [{ type: ViewChild, args: ['iframe',] }]
};
if (false) {
    /**
     * 消息监听处理方法
     * @type {?}
     * @private
     */
    WfProcessEditorComponent.func;
    /** @type {?} */
    WfProcessEditorComponent.prototype.src;
    /**
     * @type {?}
     * @private
     */
    WfProcessEditorComponent.prototype.flag;
    /** @type {?} */
    WfProcessEditorComponent.prototype.cls;
    /**
     * @type {?}
     * @private
     */
    WfProcessEditorComponent.prototype._time;
    /** @type {?} */
    WfProcessEditorComponent.prototype.processInfo;
    /** @type {?} */
    WfProcessEditorComponent.prototype.rtProcessInfo;
    /** @type {?} */
    WfProcessEditorComponent.prototype.action;
    /** @type {?} */
    WfProcessEditorComponent.prototype.mode;
    /** @type {?} */
    WfProcessEditorComponent.prototype.close;
    /** @type {?} */
    WfProcessEditorComponent.prototype.propertyPanel;
    /** @type {?} */
    WfProcessEditorComponent.prototype.iframe;
    /**
     * 监听事件处理
     * @type {?}
     */
    WfProcessEditorComponent.prototype.eventHandler;
    /**
     * @type {?}
     * @private
     */
    WfProcessEditorComponent.prototype.sanitizer;
    /** @type {?} */
    WfProcessEditorComponent.prototype.uiState;
    /**
     * @type {?}
     * @private
     */
    WfProcessEditorComponent.prototype.viewModel;
    /**
     * @type {?}
     * @private
     */
    WfProcessEditorComponent.prototype.service;
    /**
     * @type {?}
     * @private
     */
    WfProcessEditorComponent.prototype.loadService;
    /**
     * @type {?}
     * @private
     */
    WfProcessEditorComponent.prototype.notify;
    /**
     * @type {?}
     * @private
     */
    WfProcessEditorComponent.prototype.message;
    /**
     * @type {?}
     * @private
     */
    WfProcessEditorComponent.prototype.activity;
    /**
     * @type {?}
     * @private
     */
    WfProcessEditorComponent.prototype.injector;
    /**
     * @type {?}
     * @private
     */
    WfProcessEditorComponent.prototype.modalService;
    /**
     * @type {?}
     * @private
     */
    WfProcessEditorComponent.prototype.resolver;
}
//# sourceMappingURL=data:application/json;base64,