/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Component, HostBinding, ViewChild, TemplateRef, Injector } from '@angular/core';
import { DatagridComponent } from '@farris/ui-datagrid';
import { Subject } from 'rxjs/Subject';
import { MessagerService } from '@farris/ui-messager';
var EnumListComponent = /** @class */ (function () {
    function EnumListComponent(messageService, injector) {
        this.messageService = messageService;
        this.injector = injector;
        this.cls = 'farris-main-area flex-column';
        this.columns = [
            { field: 'key', width: 100, title: '键' },
            { field: 'value', width: 100, title: '值' }
        ];
        this.confirm = new Subject();
        this.closeModalEmitter = new Subject();
        /**
         * 显示值
         */
        this.data = new Array();
        this.selectedIds = new Array();
    }
    /**
     * @return {?}
     */
    EnumListComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
    };
    /**
     * 加载显示数据
     */
    /**
     * 加载显示数据
     * @param {?} enumValues
     * @return {?}
     */
    EnumListComponent.prototype.load = /**
     * 加载显示数据
     * @param {?} enumValues
     * @return {?}
     */
    function (enumValues) {
        this.data = tslib_1.__spread(enumValues);
    };
    /**
     * 确认
     */
    /**
     * 确认
     * @return {?}
     */
    EnumListComponent.prototype.onConfirm = /**
     * 确认
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.selectedIds.length === 0) {
            this.messageService.warning('尚未选中枚举值');
        }
        /** @type {?} */
        var enumValues = this.data.filter((/**
         * @param {?} d
         * @return {?}
         */
        function (d) { return _this.selectedIds.findIndex((/**
         * @param {?} id
         * @return {?}
         */
        function (id) { return id === d.key; })) > -1; }));
        this.confirm.next(enumValues);
        this.closeModalEmitter.next();
    };
    /**
     * 取消
     */
    /**
     * 取消
     * @return {?}
     */
    EnumListComponent.prototype.cancel = /**
     * 取消
     * @return {?}
     */
    function () {
        this.closeModalEmitter.next();
    };
    EnumListComponent.decorators = [
        { type: Component, args: [{
                    selector: 'app-enum-list',
                    template: "<ng-template #buttons>\r\n  <button class=\"btn btn-primary\" (click)=\"onConfirm()\">\u786E\u5B9A</button>\r\n  <button class=\"btn btn-secondary\" (click)=\"cancel()\">\u53D6\u6D88</button>\r\n</ng-template>\r\n\r\n<div class=\"f-page\">\r\n  <div class=\"f-page-main f-utils-fill-flex-column h-100\">\r\n    <div class=\"f-utils-fill-flex-column farris-overflow-y-auto h-100\">\r\n      <farris-datagrid [data]=\"data\" [columns]=\"columns\" #dg=\"datagrid\" [fit]=\"true\"\r\n                       [idField]=\"'key'\" [fitColumns]=\"true\" [showLineNumber]=\"true\" [(checkValues)]=\"selectedIds\"\r\n                       [showAllCheckbox]=\"true\" [showCheckbox]=\"true\" [multiSelect]=\"false\" [checkOnSelect]=\"true\" [selectOnCheck]=\"true\"\r\n                       [lineNumberTitle]=\"'\u5E8F\u53F7'\" [lineNumberWidth]=\"50\" [striped]=\"true\" [virtualized]=\"true\" [pagination]=\"false\">\r\n      </farris-datagrid>\r\n    </div>\r\n  </div>\r\n</div>\r\n\r\n",
                    styles: [""]
                }] }
    ];
    /** @nocollapse */
    EnumListComponent.ctorParameters = function () { return [
        { type: MessagerService },
        { type: Injector }
    ]; };
    EnumListComponent.propDecorators = {
        cls: [{ type: HostBinding, args: ['class',] }],
        dg: [{ type: ViewChild, args: ['dg',] }],
        btnRef: [{ type: ViewChild, args: ['buttons',] }]
    };
    return EnumListComponent;
}());
export { EnumListComponent };
if (false) {
    /** @type {?} */
    EnumListComponent.prototype.cls;
    /** @type {?} */
    EnumListComponent.prototype.columns;
    /** @type {?} */
    EnumListComponent.prototype.dg;
    /** @type {?} */
    EnumListComponent.prototype.btnRef;
    /** @type {?} */
    EnumListComponent.prototype.confirm;
    /** @type {?} */
    EnumListComponent.prototype.closeModalEmitter;
    /**
     * 显示值
     * @type {?}
     */
    EnumListComponent.prototype.data;
    /** @type {?} */
    EnumListComponent.prototype.selectedIds;
    /**
     * @type {?}
     * @private
     */
    EnumListComponent.prototype.messageService;
    /**
     * @type {?}
     * @private
     */
    EnumListComponent.prototype.injector;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZW51bS1saXN0LmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0Bnc3Atd2Yvd2YtcHJvY2Vzcy1lZGl0b3IvIiwic291cmNlcyI6WyJsaWIvdmlld3MvcGVyZm9ybWVyL3ZpZXdzL21hdHJpeC1wZXJmb3JtZXIvZW51bS1saXN0L2VudW0tbGlzdC5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFVLFdBQVcsRUFBRSxTQUFTLEVBQUUsV0FBVyxFQUFFLFFBQVEsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUNqRyxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUN4RCxPQUFPLEVBQUUsT0FBTyxFQUFFLE1BQU0sY0FBYyxDQUFDO0FBQ3ZDLE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUV0RDtJQTBCRSwyQkFDVSxjQUErQixFQUMvQixRQUFrQjtRQURsQixtQkFBYyxHQUFkLGNBQWMsQ0FBaUI7UUFDL0IsYUFBUSxHQUFSLFFBQVEsQ0FBVTtRQXBCNUIsUUFBRyxHQUFHLDhCQUE4QixDQUFDO1FBRXJDLFlBQU8sR0FBRztZQUNSLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsR0FBRyxFQUFFLEtBQUssRUFBRSxHQUFHLEVBQUU7WUFDeEMsRUFBRSxLQUFLLEVBQUUsT0FBTyxFQUFFLEtBQUssRUFBRSxHQUFHLEVBQUUsS0FBSyxFQUFFLEdBQUcsRUFBQztTQUFDLENBQUM7UUFJN0MsWUFBTyxHQUFHLElBQUksT0FBTyxFQUFPLENBQUM7UUFDN0Isc0JBQWlCLEdBQUcsSUFBSSxPQUFPLEVBQU8sQ0FBQzs7OztRQUt2QyxTQUFJLEdBQUcsSUFBSSxLQUFLLEVBQUUsQ0FBQztRQUVuQixnQkFBVyxHQUFHLElBQUksS0FBSyxFQUFFLENBQUM7SUFLdEIsQ0FBQzs7OztJQUVMLG9DQUFROzs7SUFBUjtJQUVBLENBQUM7SUFFRDs7T0FFRzs7Ozs7O0lBQ0gsZ0NBQUk7Ozs7O0lBQUosVUFBSyxVQUFVO1FBQ2IsSUFBSSxDQUFDLElBQUksb0JBQU8sVUFBVSxDQUFDLENBQUM7SUFDOUIsQ0FBQztJQUVEOztPQUVHOzs7OztJQUNILHFDQUFTOzs7O0lBQVQ7UUFBQSxpQkFPQztRQU5DLElBQUksSUFBSSxDQUFDLFdBQVcsQ0FBQyxNQUFNLEtBQUssQ0FBQyxFQUFHO1lBQ2xDLElBQUksQ0FBQyxjQUFjLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxDQUFDO1NBQ3hDOztZQUNLLFVBQVUsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU07Ozs7UUFBQyxVQUFBLENBQUMsSUFBSSxPQUFBLEtBQUksQ0FBQyxXQUFXLENBQUMsU0FBUzs7OztRQUFDLFVBQUEsRUFBRSxJQUFJLE9BQUEsRUFBRSxLQUFLLENBQUMsQ0FBQyxHQUFHLEVBQVosQ0FBWSxFQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQW5ELENBQW1ELEVBQUM7UUFDN0YsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUM7UUFDOUIsSUFBSSxDQUFDLGlCQUFpQixDQUFDLElBQUksRUFBRSxDQUFDO0lBQ2hDLENBQUM7SUFFRDs7T0FFRzs7Ozs7SUFDSCxrQ0FBTTs7OztJQUFOO1FBQ0UsSUFBSSxDQUFDLGlCQUFpQixDQUFDLElBQUksRUFBRSxDQUFDO0lBQ2hDLENBQUM7O2dCQTNERixTQUFTLFNBQUM7b0JBQ1QsUUFBUSxFQUFFLGVBQWU7b0JBQ3pCLCs5QkFBeUM7O2lCQUUxQzs7OztnQkFOUSxlQUFlO2dCQUh5QyxRQUFROzs7c0JBWXRFLFdBQVcsU0FBQyxPQUFPO3FCQU1uQixTQUFTLFNBQUMsSUFBSTt5QkFDZCxTQUFTLFNBQUMsU0FBUzs7SUErQ3RCLHdCQUFDO0NBQUEsQUE3REQsSUE2REM7U0F4RFksaUJBQWlCOzs7SUFFNUIsZ0NBQ3FDOztJQUVyQyxvQ0FFNkM7O0lBQzdDLCtCQUF1Qzs7SUFDdkMsbUNBQStDOztJQUUvQyxvQ0FBNkI7O0lBQzdCLDhDQUF1Qzs7Ozs7SUFLdkMsaUNBQW1COztJQUVuQix3Q0FBMEI7Ozs7O0lBR3hCLDJDQUF1Qzs7Ozs7SUFDdkMscUNBQTBCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50LCBPbkluaXQsIEhvc3RCaW5kaW5nLCBWaWV3Q2hpbGQsIFRlbXBsYXRlUmVmLCBJbmplY3RvciB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBEYXRhZ3JpZENvbXBvbmVudCB9IGZyb20gJ0BmYXJyaXMvdWktZGF0YWdyaWQnO1xyXG5pbXBvcnQgeyBTdWJqZWN0IH0gZnJvbSAncnhqcy9TdWJqZWN0JztcclxuaW1wb3J0IHsgTWVzc2FnZXJTZXJ2aWNlIH0gZnJvbSAnQGZhcnJpcy91aS1tZXNzYWdlcic7XHJcblxyXG5AQ29tcG9uZW50KHtcclxuICBzZWxlY3RvcjogJ2FwcC1lbnVtLWxpc3QnLFxyXG4gIHRlbXBsYXRlVXJsOiAnLi9lbnVtLWxpc3QuY29tcG9uZW50Lmh0bWwnLFxyXG4gIHN0eWxlVXJsczogWycuL2VudW0tbGlzdC5jb21wb25lbnQuc2NzcyddXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBFbnVtTGlzdENvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCB7XHJcblxyXG4gIEBIb3N0QmluZGluZygnY2xhc3MnKVxyXG4gIGNscyA9ICdmYXJyaXMtbWFpbi1hcmVhIGZsZXgtY29sdW1uJztcclxuXHJcbiAgY29sdW1ucyA9IFtcclxuICAgIHsgZmllbGQ6ICdrZXknLCB3aWR0aDogMTAwLCB0aXRsZTogJ+mUricgfSxcclxuICAgIHsgZmllbGQ6ICd2YWx1ZScsIHdpZHRoOiAxMDAsIHRpdGxlOiAn5YC8J31dO1xyXG4gIEBWaWV3Q2hpbGQoJ2RnJykgZGc6IERhdGFncmlkQ29tcG9uZW50O1xyXG4gIEBWaWV3Q2hpbGQoJ2J1dHRvbnMnKSBidG5SZWY6IFRlbXBsYXRlUmVmPGFueT47XHJcblxyXG4gIGNvbmZpcm0gPSBuZXcgU3ViamVjdDxhbnk+KCk7XHJcbiAgY2xvc2VNb2RhbEVtaXR0ZXIgPSBuZXcgU3ViamVjdDxhbnk+KCk7XHJcblxyXG4gIC8qKlxyXG4gICAqIOaYvuekuuWAvFxyXG4gICAqL1xyXG4gIGRhdGEgPSBuZXcgQXJyYXkoKTtcclxuXHJcbiAgc2VsZWN0ZWRJZHMgPSBuZXcgQXJyYXkoKTtcclxuXHJcbiAgY29uc3RydWN0b3IoXHJcbiAgICBwcml2YXRlIG1lc3NhZ2VTZXJ2aWNlOiBNZXNzYWdlclNlcnZpY2UsXHJcbiAgICBwcml2YXRlIGluamVjdG9yOiBJbmplY3RvclxyXG4gICkgeyB9XHJcblxyXG4gIG5nT25Jbml0KCkge1xyXG5cclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOWKoOi9veaYvuekuuaVsOaNrlxyXG4gICAqL1xyXG4gIGxvYWQoZW51bVZhbHVlcykge1xyXG4gICAgdGhpcy5kYXRhID0gWy4uLmVudW1WYWx1ZXNdO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog56Gu6K6kXHJcbiAgICovXHJcbiAgb25Db25maXJtKCk6IHZvaWQge1xyXG4gICAgaWYgKHRoaXMuc2VsZWN0ZWRJZHMubGVuZ3RoID09PSAwICkge1xyXG4gICAgICB0aGlzLm1lc3NhZ2VTZXJ2aWNlLndhcm5pbmcoJ+WwmuacqumAieS4reaemuS4vuWAvCcpO1xyXG4gICAgfVxyXG4gICAgY29uc3QgZW51bVZhbHVlcyA9IHRoaXMuZGF0YS5maWx0ZXIoZCA9PiB0aGlzLnNlbGVjdGVkSWRzLmZpbmRJbmRleChpZCA9PiBpZCA9PT0gZC5rZXkpID4gLTEpO1xyXG4gICAgdGhpcy5jb25maXJtLm5leHQoZW51bVZhbHVlcyk7XHJcbiAgICB0aGlzLmNsb3NlTW9kYWxFbWl0dGVyLm5leHQoKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOWPlua2iFxyXG4gICAqL1xyXG4gIGNhbmNlbCgpOiB2b2lkIHtcclxuICAgIHRoaXMuY2xvc2VNb2RhbEVtaXR0ZXIubmV4dCgpO1xyXG4gIH1cclxuXHJcbn1cclxuIl19