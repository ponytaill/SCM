/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, HostBinding, EventEmitter, Output, Input, ViewChild, TemplateRef, Injector, ComponentFactoryResolver } from '@angular/core';
import { ProcessVariable } from './process-variable.entity';
import { EditorTypes } from '@farris/ui-datagrid-editors';
import { DatagridComponent } from '@farris/ui-datagrid';
import { MessagerService } from '@farris/ui-messager';
import { BsModalService } from '@farris/ui-modal';
import { ConstantEditComponent } from '../variable-setting/views/constant-edit/constant-edit.component';
import { ProcessDesignerUIState } from '../../app/process-designer.uistate';
import { ExprEditMode, ExpressionService, InjectedType } from '@gsp-svc/expression';
import { ComponentEditComponent } from '../variable-setting/views/component-edit/component-edit.component';
import { of } from 'rxjs';
export class ProcessVariablesComponent {
    /**
     * @param {?} message
     * @param {?} resolver
     * @param {?} injector
     * @param {?} modalService
     * @param {?} uistate
     * @param {?} expr
     */
    constructor(message, resolver, injector, modalService, uistate, expr) {
        this.message = message;
        this.resolver = resolver;
        this.injector = injector;
        this.modalService = modalService;
        this.uistate = uistate;
        this.expr = expr;
        this.cls = 'farris-main-area flex-column';
        this.variableSetting = false;
        this.closeModal = new EventEmitter();
        this.submitModal = new EventEmitter();
        this.variableSetEmitter = new EventEmitter();
        this.value = new Array();
        this.editorParams = {};
        this.basicTypes = [
            { value: 'String', text: '字符' },
            { value: 'Integer', text: '整形' },
            { value: 'Decimal', text: '小数' },
            { value: 'Boolean', text: '布尔' },
        ];
        this.tags = [
            { value: 'constant', text: '常量' },
            { value: 'expression', text: '表达式' },
            { value: 'component', text: '构件' }
        ];
        this.columns = [
            {
                field: 'name', width: 80, title: '变量编号', sortable: true,
                editor: { type: EditorTypes.TEXTBOX, options: {} },
                validators: [
                    { type: 'required', messager: '必填' }
                ]
            },
            {
                field: 'documentation', width: 80, title: '变量名称', sortable: true,
                editor: { type: EditorTypes.TEXTBOX, options: {} },
                validators: [
                    { type: 'required', messager: '必填' }
                ]
            },
            {
                field: 'basicType', width: 60, title: '变量类型', sortable: true,
                formatter: {
                    type: 'enum',
                    options: { valueField: 'value', textField: 'text', data: this.basicTypes }
                },
                editor: {
                    type: EditorTypes.COMBOLIST,
                    options: { valueField: 'value', textField: 'text', data: this.basicTypes, idField: 'value', panelHeight: 'auto', showClear: false }
                },
                validators: [
                    { type: 'required', messager: '必填' }
                ]
            }, {
                field: 'description', width: 100, title: '描述', showTips: true,
                editor: { type: EditorTypes.TEXTBOX, options: {} },
            }, {
                field: 'tag', width: 60, title: '初始值类型', sortable: true,
                formatter: {
                    type: 'enum',
                    options: { valueField: 'value', textField: 'text', data: this.tags }
                },
                editor: {
                    type: EditorTypes.COMBOLIST,
                    options: {
                        valueField: 'value', textField: 'text', data: this.tags, idField: 'value', panelHeight: 'auto',
                        selectChange: (/**
                         * @param {?} e
                         * @return {?}
                         */
                        (e) => {
                            this.value = this.value.map((/**
                             * @param {?} v
                             * @return {?}
                             */
                            v => {
                                if (v.id === e.rowId) {
                                    v.value = null;
                                    v.valueText = null;
                                    if (v.component) {
                                        v.component = null;
                                    }
                                    return v;
                                }
                                else {
                                    return v;
                                }
                            }));
                        }),
                        clear: (/**
                         * @param {?} e
                         * @return {?}
                         */
                        (e) => {
                            this.value = this.value.map((/**
                             * @param {?} v
                             * @return {?}
                             */
                            v => {
                                if (v.id === e.rowId) {
                                    v.value = null;
                                    v.valueText = null;
                                    if (v.component) {
                                        v.component = null;
                                    }
                                    return v;
                                }
                                else {
                                    return v;
                                }
                            }));
                        })
                    }
                }
            }, {
                field: 'valueText', width: 120, title: '初始值', showTips: true,
                editor: { type: EditorTypes.TEXTBOX, options: {} }
            }
        ];
        this.modalConfig = {
            title: '流程变量',
            width: 1070,
            height: 510,
            showButtons: true
        };
        this.beforeEdit = (/**
         * @param {?} param
         * @return {?}
         */
        (param) => {
            /** @type {?} */
            const rowData = (/** @type {?} */ (param.rowData));
            /** @type {?} */
            const column = param.column;
            if (column.field === 'valueText') {
                if (!((/** @type {?} */ (rowData))).tag) {
                    return of(false);
                }
                if (((/** @type {?} */ (rowData))).tag === this.tags[0].value) {
                    param.column.editor = { type: EditorTypes.TEXTBOX, options: {} };
                }
                else {
                    param.column.editor = {
                        type: 'input-group',
                        options: {
                            groupText: '<i class="f-icon f-icon-lookup"></i>',
                            editable: false,
                            showClear: false,
                            clickHandle: (/**
                             * @param {?} e
                             * @return {?}
                             */
                            (e) => {
                                e.formControl.setValue(e.instance.value ? e.instance.value : '');
                                this.valueEdit(e);
                            }),
                            clear: (/**
                             * @param {?} e
                             * @return {?}
                             */
                            (e) => {
                                console.log('clear', e);
                            })
                        }
                    };
                }
            }
            return of(true);
        });
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        if (this.variableSetting) {
            this.columns = this.columns.filter((/**
             * @param {?} c
             * @return {?}
             */
            c => c.field !== 'tag'
                && c.field !== 'valueText' && c.field !== 'description'));
        }
    }
    /**
     * @return {?}
     */
    add() {
        /** @type {?} */
        const variable = new ProcessVariable();
        this.value = this.value.concat([variable]);
    }
    /**
     * @return {?}
     */
    delete() {
        this.grid.endCellEdit();
        /** @type {?} */
        const selected = this.grid.selectedRow;
        if (!selected) {
            this.message.info('尚未选中流程变量！');
            return;
        }
        this.value = this.value.filter((/**
         * @param {?} v
         * @return {?}
         */
        v => v.id !== selected.data.id));
    }
    /**
     * @return {?}
     */
    clickOK() {
        if (this.variableSetting) {
            /** @type {?} */
            const selecteds = this.grid.checkeds;
            if (selecteds.length > 0) {
                this.variableSetEmitter.emit(selecteds);
            }
            else {
                this.message.info('尚未选中流程变量！');
            }
        }
        else {
            this.grid.endCellEdit();
            if (this.validator()) {
                /** @type {?} */
                const object = { value: this.value, parameters: null };
                this.submitModal.emit(object);
            }
        }
    }
    /**
     * @return {?}
     */
    clickCancel() {
        this.closeModal.emit();
    }
    /**
     * @param {?} data
     * @return {?}
     */
    endEdit(data) {
        if (data.column.field === 'valueText' && data.rowData.tag === this.tags[0].value) {
            data.rowData.value = data.rowData.valueText;
        }
    }
    /**
     * @param {?} e
     * @return {?}
     */
    valueEdit(e) {
        /** @type {?} */
        const rowdata = e.rowData;
        switch (rowdata.tag) {
            case this.tags[0].value:
                this.editConstant(e);
                break;
            case this.tags[1].value:
                this.editExpression(e);
                break;
            case this.tags[2].value:
                this.editComponent(e);
                break;
        }
    }
    /**
     * @private
     * @param {?} e
     * @return {?}
     */
    editConstant(e) {
        /** @type {?} */
        const data = e.rowData;
        /** @type {?} */
        let dialog;
        /** @type {?} */
        const compFactory = this.resolver.resolveComponentFactory(ConstantEditComponent);
        /** @type {?} */
        const compRef = compFactory.create(this.injector);
        compRef.instance.value = data.value;
        compRef.instance.submitEmitter.subscribe((/**
         * @param {?} re
         * @return {?}
         */
        (re) => {
            e.formControl.setValue(re);
            e.instance.cd.detectChanges();
            data.value = re;
            dialog.close();
        }));
        compRef.instance.closeEmitter.subscribe((/**
         * @param {?} re
         * @return {?}
         */
        re => {
            dialog.close();
        }));
        /** @type {?} */
        const modalConfig = {
            title: '常量',
            width: 340,
            height: 280,
            showButtons: true,
            buttons: compRef.instance.footer
        };
        dialog = this.modalService.show(compRef, modalConfig);
    }
    /**
     * @private
     * @param {?} e
     * @return {?}
     */
    editExpression(e) {
        /** @type {?} */
        const data = e.rowData;
        if (this.uistate.schemas.length > 0) {
            for (const schema of this.uistate.schemas) {
                this.expr.addSchema('Schema', schema);
            }
            if (this.uistate.schemas[0].entityTypes && this.uistate.schemas[0].entityTypes.length > 0) {
                /** @type {?} */
                const entityType = this.uistate.schemas[0].entityTypes[0];
                this.expr.addInjectedEntity(entityType.name, 'Schema', entityType.name, InjectedType.EntityType);
            }
        }
        /** @type {?} */
        const context = new Array();
        if (this.uistate.procInstContext.length > 0) {
            for (const variable of this.uistate.procInstContext) {
                context.push(variable);
            }
        }
        if (this.uistate.formalParameterContext.length > 0) {
            for (const variable of this.uistate.formalParameterContext) {
                if (!context.some((/**
                 * @param {?} c
                 * @return {?}
                 */
                c => c.key === variable.key))) {
                    context.push(variable);
                }
            }
        }
        if (this.uistate.participantContext.length > 0) {
            for (const variable of this.uistate.participantContext) {
                if (!context.some((/**
                 * @param {?} c
                 * @return {?}
                 */
                c => c.key === variable.key))) {
                    context.push(variable);
                }
            }
        }
        if (this.uistate.processVariableContext.length > 0) {
            for (const variable of this.uistate.processVariableContext) {
                if (!context.some((/**
                 * @param {?} c
                 * @return {?}
                 */
                c => c.key === variable.key))) {
                    context.push(variable);
                }
            }
        }
        if (context.length > 0) {
            for (const v of context) {
                this.expr.addContext(v);
            }
        }
        this.expr.setEditPattern(ExprEditMode.Advanced); // 表达式展现模式：默认高级版
        this.expr.addExpressionText(data.value);
        this.expr.buildExpression().then((/**
         * @param {?} re
         * @return {?}
         */
        (re) => {
            e.formControl.setValue(re);
            e.instance.cd.detectChanges();
            data.value = re;
        }));
    }
    /**
     * @private
     * @param {?} e
     * @return {?}
     */
    editComponent(e) {
        /** @type {?} */
        const data = e.rowData;
        /** @type {?} */
        let dialog;
        /** @type {?} */
        const compFactory = this.resolver.resolveComponentFactory(ComponentEditComponent);
        /** @type {?} */
        const compRef = compFactory.create(this.injector);
        compRef.instance.component = data.component;
        compRef.instance.submitEmitter.subscribe((/**
         * @param {?} re
         * @return {?}
         */
        (re) => {
            e.formControl.setValue(re.Name + '-' + re.MethodCode);
            e.instance.cd.detectChanges();
            data.value = re.Id;
            data.component = re;
            dialog.close();
        }));
        compRef.instance.closeEmitter.subscribe((/**
         * @param {?} re
         * @return {?}
         */
        re => {
            dialog.close();
        }));
        /** @type {?} */
        const modalConfig = {
            title: '构件',
            width: 800,
            height: 515,
            showButtons: true,
            buttons: compRef.instance.footer
        };
        dialog = this.modalService.show(compRef, modalConfig);
    }
    /**
     * @private
     * @return {?}
     */
    validator() {
        for (const item of this.value) {
            if (!item.name) {
                this.message.warning('变量编号不允许为空！');
                return false;
            }
            if (!item.documentation) {
                this.message.warning('变量名称不允许为空！');
                return false;
            }
            if (!this.IsMatchVariableNameRules(item.name)) {
                this.message.warning('变量编号只能包含字母、数字和下划线，且不能以数字开头！');
                return false;
            }
        }
        if (this.value.length > 1) {
            for (let i = 0; i < this.value.length; i++) {
                /** @type {?} */
                const code1 = this.value[i].name;
                for (let j = i + 1; j < this.value.length; j++) {
                    /** @type {?} */
                    const code2 = this.value[j].name;
                    if (code1 === code2) {
                        this.message.warning(`流程变量编号不允许重复！`);
                        return false;
                    }
                }
            }
        }
        return true;
    }
    /**
     * @private
     * @param {?} str
     * @return {?}
     */
    IsMatchVariableNameRules(str) {
        /** @type {?} */
        const Regx = /^[a-zA-Z_][a-zA-Z_0-9]{0,}/;
        if (Regx.test(str)) {
            return true;
        }
        else {
            return false;
        }
    }
}
ProcessVariablesComponent.decorators = [
    { type: Component, args: [{
                selector: 'lib-process-variables',
                template: "<div class=\"f-page\">\r\n  <div *ngIf=\"!variableSetting\" class=\"f-page-header\">\r\n    <nav class=\"f-page-header-base\">\r\n      <div class=\"f-title\">\r\n        <span class=\"f-title-icon f-text-orna-bill\">\r\n          <i class=\"f-icon f-icon-page-title-administer\"></i>\r\n        </span>\r\n        <h4 class=\"f-title-text\">\u5217\u8868</h4>\r\n      </div>\r\n      <div class=\"btn-toolbar btn-group-lg\">\r\n        <button class=\"btn btn-primary mr-2\" (click)=\"add()\">\u65B0\u589E</button>\r\n        <button class=\"btn btn-secondary\" (click)=\"delete()\">\u5220\u9664</button>\r\n      </div>\r\n    </nav>\r\n  </div>\r\n  <div class=\"f-page-main f-utils-fill-flex-column h-100\">\r\n    <div class=\"f-utils-fill-flex-column farris-overflow-y-auto h-100\">\r\n      <farris-datagrid #grid [data]=\"value\" [columns]=\"columns\" [idField]=\"'id'\" [fit]=\"true\" [fitColumns]=\"true\"\r\n        [editable]=\"!variableSetting\" [editMode]=\"'cell'\" [pagination]=\"false\" (endEdit)=\"endEdit($event)\" [beforeEdit]=\"beforeEdit\"\r\n        [showCheckbox]=\"variableSetting\" [multiSelect]=\"variableSetting\" [checkOnSelect]=\"true\" [selectOnCheck]=\"true\" [showAllCheckbox]=\"variableSetting\"\r\n        [showLineNumber]=\"true\" [lineNumberTitle]=\"'\u5E8F\u53F7'\" [lineNumberWidth]=\"50\" [striped]=\"true\">\r\n      </farris-datagrid>\r\n    </div>\r\n  </div>\r\n</div>\r\n\r\n<ng-template #iconSelectFooter>\r\n  <button type=\"button\" class=\"btn btn-primary btn-sm px-3 mx-2\" (click)=\"clickOK()\">\u786E\u5B9A</button>\r\n  <button type=\"button\" class=\"btn btn-secondary btn-sm px-3 mx-2\" (click)=\"clickCancel()\">\u53D6\u6D88</button>\r\n</ng-template>\r\n",
                styles: [""]
            }] }
];
/** @nocollapse */
ProcessVariablesComponent.ctorParameters = () => [
    { type: MessagerService },
    { type: ComponentFactoryResolver },
    { type: Injector },
    { type: BsModalService },
    { type: ProcessDesignerUIState },
    { type: ExpressionService }
];
ProcessVariablesComponent.propDecorators = {
    cls: [{ type: HostBinding, args: ['class',] }],
    variableSetting: [{ type: Input }],
    closeModal: [{ type: Output }],
    submitModal: [{ type: Output }],
    variableSetEmitter: [{ type: Output }],
    value: [{ type: Input }],
    editorParams: [{ type: Input }],
    modalFooter: [{ type: ViewChild, args: ['iconSelectFooter',] }],
    grid: [{ type: ViewChild, args: ['grid',] }]
};
if (false) {
    /** @type {?} */
    ProcessVariablesComponent.prototype.cls;
    /** @type {?} */
    ProcessVariablesComponent.prototype.variableSetting;
    /** @type {?} */
    ProcessVariablesComponent.prototype.closeModal;
    /** @type {?} */
    ProcessVariablesComponent.prototype.submitModal;
    /** @type {?} */
    ProcessVariablesComponent.prototype.variableSetEmitter;
    /** @type {?} */
    ProcessVariablesComponent.prototype.value;
    /** @type {?} */
    ProcessVariablesComponent.prototype.editorParams;
    /** @type {?} */
    ProcessVariablesComponent.prototype.modalFooter;
    /** @type {?} */
    ProcessVariablesComponent.prototype.grid;
    /**
     * @type {?}
     * @private
     */
    ProcessVariablesComponent.prototype.basicTypes;
    /**
     * @type {?}
     * @private
     */
    ProcessVariablesComponent.prototype.tags;
    /** @type {?} */
    ProcessVariablesComponent.prototype.columns;
    /** @type {?} */
    ProcessVariablesComponent.prototype.modalConfig;
    /** @type {?} */
    ProcessVariablesComponent.prototype.beforeEdit;
    /**
     * @type {?}
     * @private
     */
    ProcessVariablesComponent.prototype.message;
    /**
     * @type {?}
     * @private
     */
    ProcessVariablesComponent.prototype.resolver;
    /**
     * @type {?}
     * @private
     */
    ProcessVariablesComponent.prototype.injector;
    /**
     * @type {?}
     * @private
     */
    ProcessVariablesComponent.prototype.modalService;
    /**
     * @type {?}
     * @private
     */
    ProcessVariablesComponent.prototype.uistate;
    /**
     * @type {?}
     * @private
     */
    ProcessVariablesComponent.prototype.expr;
}
export class ProcessVariablesConverter {
    constructor() { }
    /**
     * @param {?} data
     * @return {?}
     */
    convertTo(data) {
        if (data && data.length > 0) {
            return '（已设置）';
        }
        else {
            return '（未设置）';
        }
    }
}
//# sourceMappingURL=data:application/json;base64,