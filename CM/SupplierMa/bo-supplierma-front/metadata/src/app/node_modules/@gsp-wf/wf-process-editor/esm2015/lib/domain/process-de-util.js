/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
export class ProcessDeUtil {
    constructor() { }
    /**
     * @return {?}
     */
    static GenerateElementId() {
        ++(this.generatedId);
        return '_' + this.Decimal2String(this.generatedId);
    }
    /**
     * @private
     * @param {?} a
     * @return {?}
     */
    static Decimal2String(a) {
        /** @type {?} */
        let c;
        /** @type {?} */
        let b = '';
        do {
            c = a % this.exponent, b = this.keys[c] + b, a = (a - c) / this.exponent;
        } while (a > 0);
        return b;
    }
    /**
     * 创建内码
     * @return {?}
     */
    static createNM() {
        /**
         * @return {?}
         */
        function S4() {
            return (((1 + Math.random()) * 0x10000) | 0).toString(16).substring(1);
        }
        return (S4() + S4() + '-' + S4() + '-' + S4() + '-' + S4() + '-' + S4() + S4() + S4());
        // return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, (c) => {
        //     const r = Math.random() * 16 | 0, v = c === 'x' ? r : (r & 0x3 | 0x8);
        //     return v.toString(16);
        // });
    }
    /**
     * @return {?}
     */
    getProcessDesignerRouter() {
        /** @type {?} */
        const url = 'processList';
        return url;
    }
    // 获取流程分类webapi
    /**
     * @return {?}
     */
    getFlowFormWebApi() {
        return '/api/runtime/wf/v1.0/flowForm';
    }
    // 获取参数列表webapi
    /**
     * @return {?}
     */
    getFormalParametersWebApi() {
        return '/api/runtime/wf/v1.0/formalParameter';
    }
    // 获取运行时元数据webapi
    /**
     * @return {?}
     */
    getMetaDataRUWebApi() {
        return '/api/runtime/lcm/v1.0/rt-metadatas/';
    }
    // 获取流程构件webapi
    /**
     * @return {?}
     */
    getBizComponentsWebApi() {
        return '/api/runtime/wf/v1.0/bizComponent';
    }
    // 基于流程分类获取表单定义
    /**
     * @return {?}
     */
    getExcuteFormsWebApi() {
        return '/api/runtime/wf/v1.0/excuteForm';
    }
    // 获取设计时流程定义WebAPi
    /**
     * @return {?}
     */
    getProcessDefinitionWebApi() {
        return '/api/runtime/wf/v1.0/dtProcDefs';
    }
    // 判断是否允许删除流程定义的api
    /**
     * @return {?}
     */
    getCheckExistActiveProcDefApi() {
        return '/api/runtime/wf/v1.0/procDefs/checkExistActiveProcDef';
    }
    /**
     * 获取业务活动webApi
     * @param {?} ffId
     * @return {?}
     */
    getBizActivityWebApi(ffId) {
        return `/api/runtime/wf/v1.0/bizActivity?flowFormKey=${ffId}`;
    }
    /**
     * @return {?}
     */
    getProcDefKeyWebApi() {
        return '/api/runtime/wf/v1.0/procDefs/processDefinitionKeys';
    }
    // /**
    //  * 业务活动构件webApi
    //  */
    // getBizActCptWebApi() {
    //     return '/api/runtime/wf/v1.0/BizActivities/GetComponents';
    // }
    /**
     * 发布流程api
     * @return {?}
     */
    deployWebApi() {
        return '/api/runtime/wf/v1.0/procDefs/deploy';
    }
    /**
     * 保存流程api
     * @return {?}
     */
    saveWebApi() {
        return '/api/runtime/wf/v1.0/DTProcessDefinitions/SaveBpmnModel';
    }
    /**
     * 获取审批动作webapi
     * @return {?}
     */
    getApprovalActionWebApi() {
        return '/api/runtime/wf/v1.0/approvalAction';
    }
    /**
     * 获取运行时流程定义WebAPi
     * @return {?}
     */
    getRTProcessDefinitionWebApi() {
        return '/api/runtime/wf/v1.0/procDefs';
    }
    /**
     * @param {?} data
     * @param {?} code
     * @return {?}
     */
    getValue(data, code) {
        if (!code) {
            return '';
        }
        /** @type {?} */
        let resultVal = '';
        if (code.indexOf('.') === -1) {
            resultVal = data[code];
        }
        else {
            resultVal = code.split('.').reduce((/**
             * @param {?} obj
             * @param {?} key
             * @return {?}
             */
            (obj, key) => {
                if (obj) {
                    return obj[key];
                }
                else {
                    return null;
                }
            }), data);
        }
        return resultVal;
    }
    /**
     * 转换
     * @param {?} jsonObj Object
     * @return {?}
     */
    toUpperCase(jsonObj) {
        if (typeof (jsonObj) === 'object') {
            for (const key of Object.keys(jsonObj)) {
                jsonObj[key.substring(0, 1).toUpperCase() + key.substring(1)] = jsonObj[key];
                delete (jsonObj[key]);
            }
        }
        return jsonObj;
    }
    /**
     * @param {?} jsonObj
     * @return {?}
     */
    toLowCase(jsonObj) {
        if (typeof (jsonObj) === 'object') {
            for (const key of Object.keys(jsonObj)) {
                if ((key.substring(0, 1).toLowerCase() + key.substring(1)) !== key) {
                    jsonObj[key.substring(0, 1).toLowerCase() + key.substring(1)] = jsonObj[key];
                    delete (jsonObj[key]);
                }
            }
        }
        return jsonObj;
    }
}
ProcessDeUtil.generatedId = parseInt(Date.now().toString());
ProcessDeUtil.keys = '0123456789ABCDEFGHJKLMNPQRSTUVWXYZ';
ProcessDeUtil.exponent = 34;
ProcessDeUtil.decorators = [
    { type: Injectable }
];
/** @nocollapse */
ProcessDeUtil.ctorParameters = () => [];
if (false) {
    /**
     * @type {?}
     * @private
     */
    ProcessDeUtil.generatedId;
    /**
     * @type {?}
     * @private
     */
    ProcessDeUtil.keys;
    /**
     * @type {?}
     * @private
     */
    ProcessDeUtil.exponent;
    /** @type {?} */
    ProcessDeUtil.prototype.funcId;
}
//# sourceMappingURL=data:application/json;base64,