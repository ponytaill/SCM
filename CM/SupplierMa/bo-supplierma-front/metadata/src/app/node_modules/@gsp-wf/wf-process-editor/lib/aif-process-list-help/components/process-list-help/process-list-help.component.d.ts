import { OnInit, TemplateRef, EventEmitter } from '@angular/core';
import { ProcessListHelpService } from '../../services/process-list-help.service';
import { MessagerService } from '@farris/ui-messager';
import { NotifyService } from '@farris/ui-notify';
import { BsModalService, BsModalRef } from '@farris/ui-modal';
import { FrameworkService } from '@gsp-sys/rtf-common';
import { Router, ActivatedRoute } from '@angular/router';
import { LoadingService } from '@farris/ui-loading';
import { Observable } from 'rxjs';
import { IRtProcQueryParam } from '../../entity/IProcQueryParam';
import { DatagridComponent } from '@farris/ui-datagrid';
import { AifLocalePipe } from '../../../aif-ui-common/pipe/aif-ui-common-locale.pipe';
export declare class ProcessListHelpComponent implements OnInit {
    private procHelpService;
    private messager;
    private notify;
    private modalService;
    private frameworkService;
    private router;
    private activatedRoute;
    private loading;
    private localePipe;
    closeModal: EventEmitter<any>;
    submitModal: EventEmitter<any>;
    value: any;
    editorParams: {
        bizTypeId?: string;
    };
    private processCode;
    modalConfig: {
        title: string;
        width: number;
        height: number;
        showButtons: boolean;
    };
    procEmitter: EventEmitter<any>;
    queryParam: IRtProcQueryParam;
    tt: DatagridComponent;
    ttIdField: string;
    ttData: any[];
    ttColumns: any[];
    cascadeCheck: boolean;
    cascadeDown: boolean;
    cascadeUp: boolean;
    nameCellTemp: TemplateRef<any>;
    modalFooter: TemplateRef<any>;
    modalRef: BsModalRef;
    readonly defaultPageSize: number;
    pageList: number[];
    constructor(procHelpService: ProcessListHelpService, messager: MessagerService, notify: NotifyService, modalService: BsModalService, frameworkService: FrameworkService, router: Router, activatedRoute: ActivatedRoute, loading: LoadingService, localeId: string, localePipe: AifLocalePipe);
    ngOnInit(): void;
    clickOk(evt?: any): void;
    clickCancel(evt?: any): void;
    onSearch(param: any): void;
    clickNameCell(ctx: any): void;
    /**
   * 列排序前事件
   */
    beforeSortColumn: (field: string, order: string) => Observable<any>;
    /**
     * 列排序后事件
     */
    columnSorted(val: any): void;
    onPageSizeChanged($event: {
        pageIndex: number;
        pageSize: number;
    }): void;
    onPageChanged($event: {
        pageIndex: number;
        pageSize: number;
    }): void;
    pageChangeHandler($event: any): void;
    pageSizeChangeHandler($event: any): void;
    private loadItems;
    private configTtColumns;
    private createDefaultQueryParam;
}
