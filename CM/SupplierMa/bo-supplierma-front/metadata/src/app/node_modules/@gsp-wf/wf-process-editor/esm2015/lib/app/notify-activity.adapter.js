/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { ProcessDesignerUIState } from './process-designer.uistate';
import { ResourceKeys } from '../model/resourceKeys';
import { MessageNoticeComponent, MessageNoticeConverter } from '../views/message-notice/message-notice.component';
import { PerformerComponent, PerformerConverter } from '../views/performer/performer.component';
import { ExecuteFormsComponent, ExecuteFormsConverter } from '../views/execute-forms/execute-forms.component';
import { ExtendPropertyComponent, ExtendPropertyConverter } from '../views/extend-property/extend-property.component';
export class NotifyActivityAdapter {
    /**
     * @param {?} uiState
     */
    constructor(uiState) {
        this.uiState = uiState;
    }
    /**
     * @param {?} obj
     * @return {?}
     */
    setProperty(obj) {
        this.uiState.propertyData = obj.propertyData;
        this.uiState.propertyConfig = this.setConfig(obj.propertyConfig);
    }
    /**
     * @private
     * @param {?} obj
     * @return {?}
     */
    setConfig(obj) {
        /** @type {?} */
        const propertyConfig = [];
        if (obj) {
            obj.forEach((/**
             * @param {?} element
             * @return {?}
             */
            (element) => {
                this.setEntity(element.properties);
                propertyConfig.push(element);
            }));
        }
        return propertyConfig;
    }
    /**
     * @private
     * @param {?} obj
     * @return {?}
     */
    setEntity(obj) {
        if (obj && obj.length > 0) {
            obj.forEach((/**
             * @param {?} item
             * @return {?}
             */
            (item) => {
                switch (item.propertyID) {
                    case ResourceKeys.ParticipantSchemes: // 参与者
                        item.editor = PerformerComponent;
                        item.converter = new PerformerConverter();
                        break;
                    case ResourceKeys.wf_ExecuteForms_PC: // 表单定义
                        item.editor = ExecuteFormsComponent;
                        item.converter = new ExecuteFormsConverter();
                        item.editorParams = {
                            location: 'notifyActivity',
                            tab: 'web'
                        };
                        break;
                    case ResourceKeys.wf_ExecuteForms_Mobile: // 表单定义
                        item.editor = ExecuteFormsComponent;
                        item.converter = new ExecuteFormsConverter();
                        item.editorParams = {
                            location: 'notifyActivity',
                            tab: 'mobile'
                        };
                        break;
                    case ResourceKeys.messageNotice: // 消息通知
                        item.editor = MessageNoticeComponent;
                        item.converter = new MessageNoticeConverter();
                        item.editorParams = {
                            location: 'activity'
                        };
                        break;
                    default:
                        item.editor = ExtendPropertyComponent;
                        item.converter = new ExtendPropertyConverter();
                        break;
                }
            }));
        }
    }
}
NotifyActivityAdapter.decorators = [
    { type: Injectable }
];
/** @nocollapse */
NotifyActivityAdapter.ctorParameters = () => [
    { type: ProcessDesignerUIState }
];
if (false) {
    /**
     * @type {?}
     * @private
     */
    NotifyActivityAdapter.prototype.uiState;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibm90aWZ5LWFjdGl2aXR5LmFkYXB0ZXIuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZ3NwLXdmL3dmLXByb2Nlc3MtZWRpdG9yLyIsInNvdXJjZXMiOlsibGliL2FwcC9ub3RpZnktYWN0aXZpdHkuYWRhcHRlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLEVBQUUsc0JBQXNCLEVBQUUsTUFBTSw0QkFBNEIsQ0FBQztBQUVwRSxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sdUJBQXVCLENBQUM7QUFDckQsT0FBTyxFQUFFLHNCQUFzQixFQUFFLHNCQUFzQixFQUFFLE1BQU0sa0RBQWtELENBQUM7QUFDbEgsT0FBTyxFQUFFLGtCQUFrQixFQUFFLGtCQUFrQixFQUFFLE1BQU0sd0NBQXdDLENBQUM7QUFDaEcsT0FBTyxFQUFFLHFCQUFxQixFQUFFLHFCQUFxQixFQUFFLE1BQU0sZ0RBQWdELENBQUM7QUFDOUcsT0FBTyxFQUFFLHVCQUF1QixFQUFFLHVCQUF1QixFQUFFLE1BQU0sb0RBQW9ELENBQUM7QUFHdEgsTUFBTSxPQUFPLHFCQUFxQjs7OztJQUM5QixZQUFvQixPQUErQjtRQUEvQixZQUFPLEdBQVAsT0FBTyxDQUF3QjtJQUVuRCxDQUFDOzs7OztJQUNELFdBQVcsQ0FBQyxHQUFRO1FBQ2hCLElBQUksQ0FBQyxPQUFPLENBQUMsWUFBWSxHQUFHLEdBQUcsQ0FBQyxZQUFZLENBQUM7UUFDN0MsSUFBSSxDQUFDLE9BQU8sQ0FBQyxjQUFjLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsY0FBYyxDQUFDLENBQUM7SUFDckUsQ0FBQzs7Ozs7O0lBRU8sU0FBUyxDQUFDLEdBQVU7O2NBQ2xCLGNBQWMsR0FBNEIsRUFBRTtRQUNsRCxJQUFJLEdBQUcsRUFBRTtZQUNMLEdBQUcsQ0FBQyxPQUFPOzs7O1lBQUMsQ0FBQyxPQUE4QixFQUFFLEVBQUU7Z0JBQzNDLElBQUksQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDLFVBQVUsQ0FBQyxDQUFDO2dCQUNuQyxjQUFjLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1lBQ2pDLENBQUMsRUFBQyxDQUFDO1NBQ047UUFDRCxPQUFPLGNBQWMsQ0FBQztJQUMxQixDQUFDOzs7Ozs7SUFDTyxTQUFTLENBQUMsR0FBcUI7UUFDbkMsSUFBSSxHQUFHLElBQUksR0FBRyxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUU7WUFDdkIsR0FBRyxDQUFDLE9BQU87Ozs7WUFBQyxDQUFDLElBQW9CLEVBQUUsRUFBRTtnQkFDakMsUUFBUSxJQUFJLENBQUMsVUFBVSxFQUFFO29CQUNyQixLQUFLLFlBQVksQ0FBQyxrQkFBa0IsRUFBRSxNQUFNO3dCQUN4QyxJQUFJLENBQUMsTUFBTSxHQUFHLGtCQUFrQixDQUFDO3dCQUNqQyxJQUFJLENBQUMsU0FBUyxHQUFHLElBQUksa0JBQWtCLEVBQUUsQ0FBQzt3QkFDMUMsTUFBTTtvQkFDVixLQUFLLFlBQVksQ0FBQyxrQkFBa0IsRUFBRSxPQUFPO3dCQUN6QyxJQUFJLENBQUMsTUFBTSxHQUFHLHFCQUFxQixDQUFDO3dCQUNwQyxJQUFJLENBQUMsU0FBUyxHQUFHLElBQUkscUJBQXFCLEVBQUUsQ0FBQzt3QkFDN0MsSUFBSSxDQUFDLFlBQVksR0FBRzs0QkFDaEIsUUFBUSxFQUFFLGdCQUFnQjs0QkFDMUIsR0FBRyxFQUFFLEtBQUs7eUJBQ2IsQ0FBQzt3QkFDRixNQUFNO29CQUNWLEtBQUssWUFBWSxDQUFDLHNCQUFzQixFQUFFLE9BQU87d0JBQzdDLElBQUksQ0FBQyxNQUFNLEdBQUcscUJBQXFCLENBQUM7d0JBQ3BDLElBQUksQ0FBQyxTQUFTLEdBQUcsSUFBSSxxQkFBcUIsRUFBRSxDQUFDO3dCQUM3QyxJQUFJLENBQUMsWUFBWSxHQUFHOzRCQUNoQixRQUFRLEVBQUUsZ0JBQWdCOzRCQUMxQixHQUFHLEVBQUUsUUFBUTt5QkFDaEIsQ0FBQzt3QkFDRixNQUFNO29CQUNWLEtBQUssWUFBWSxDQUFDLGFBQWEsRUFBRSxPQUFPO3dCQUNwQyxJQUFJLENBQUMsTUFBTSxHQUFHLHNCQUFzQixDQUFDO3dCQUNyQyxJQUFJLENBQUMsU0FBUyxHQUFHLElBQUksc0JBQXNCLEVBQUUsQ0FBQzt3QkFDOUMsSUFBSSxDQUFDLFlBQVksR0FBRzs0QkFDaEIsUUFBUSxFQUFFLFVBQVU7eUJBQ3ZCLENBQUM7d0JBQ0YsTUFBTTtvQkFDVjt3QkFDSSxJQUFJLENBQUMsTUFBTSxHQUFHLHVCQUF1QixDQUFDO3dCQUN0QyxJQUFJLENBQUMsU0FBUyxHQUFHLElBQUksdUJBQXVCLEVBQUUsQ0FBQzt3QkFDL0MsTUFBTTtpQkFDYjtZQUNMLENBQUMsRUFBQyxDQUFDO1NBQ047SUFDTCxDQUFDOzs7WUExREosVUFBVTs7OztZQVJGLHNCQUFzQjs7Ozs7OztJQVVmLHdDQUF1QyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgUHJvY2Vzc0Rlc2lnbmVyVUlTdGF0ZSB9IGZyb20gJy4vcHJvY2Vzcy1kZXNpZ25lci51aXN0YXRlJztcclxuaW1wb3J0IHsgRWxlbWVudFByb3BlcnR5Q29uZmlnLCBQcm9wZXJ0eUVudGl0eSB9IGZyb20gJ0BmYXJyaXMvdWktcHJvcGVydHktcGFuZWwnO1xyXG5pbXBvcnQgeyBSZXNvdXJjZUtleXMgfSBmcm9tICcuLi9tb2RlbC9yZXNvdXJjZUtleXMnO1xyXG5pbXBvcnQgeyBNZXNzYWdlTm90aWNlQ29tcG9uZW50LCBNZXNzYWdlTm90aWNlQ29udmVydGVyIH0gZnJvbSAnLi4vdmlld3MvbWVzc2FnZS1ub3RpY2UvbWVzc2FnZS1ub3RpY2UuY29tcG9uZW50JztcclxuaW1wb3J0IHsgUGVyZm9ybWVyQ29tcG9uZW50LCBQZXJmb3JtZXJDb252ZXJ0ZXIgfSBmcm9tICcuLi92aWV3cy9wZXJmb3JtZXIvcGVyZm9ybWVyLmNvbXBvbmVudCc7XHJcbmltcG9ydCB7IEV4ZWN1dGVGb3Jtc0NvbXBvbmVudCwgRXhlY3V0ZUZvcm1zQ29udmVydGVyIH0gZnJvbSAnLi4vdmlld3MvZXhlY3V0ZS1mb3Jtcy9leGVjdXRlLWZvcm1zLmNvbXBvbmVudCc7XHJcbmltcG9ydCB7IEV4dGVuZFByb3BlcnR5Q29tcG9uZW50LCBFeHRlbmRQcm9wZXJ0eUNvbnZlcnRlciB9IGZyb20gJy4uL3ZpZXdzL2V4dGVuZC1wcm9wZXJ0eS9leHRlbmQtcHJvcGVydHkuY29tcG9uZW50JztcclxuXHJcbkBJbmplY3RhYmxlKClcclxuZXhwb3J0IGNsYXNzIE5vdGlmeUFjdGl2aXR5QWRhcHRlciB7XHJcbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIHVpU3RhdGU6IFByb2Nlc3NEZXNpZ25lclVJU3RhdGUpIHtcclxuXHJcbiAgICB9XHJcbiAgICBzZXRQcm9wZXJ0eShvYmo6IGFueSkge1xyXG4gICAgICAgIHRoaXMudWlTdGF0ZS5wcm9wZXJ0eURhdGEgPSBvYmoucHJvcGVydHlEYXRhO1xyXG4gICAgICAgIHRoaXMudWlTdGF0ZS5wcm9wZXJ0eUNvbmZpZyA9IHRoaXMuc2V0Q29uZmlnKG9iai5wcm9wZXJ0eUNvbmZpZyk7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBzZXRDb25maWcob2JqOiBhbnlbXSk6IEVsZW1lbnRQcm9wZXJ0eUNvbmZpZ1tdIHtcclxuICAgICAgICBjb25zdCBwcm9wZXJ0eUNvbmZpZzogRWxlbWVudFByb3BlcnR5Q29uZmlnW10gPSBbXTtcclxuICAgICAgICBpZiAob2JqKSB7XHJcbiAgICAgICAgICAgIG9iai5mb3JFYWNoKChlbGVtZW50OiBFbGVtZW50UHJvcGVydHlDb25maWcpID0+IHtcclxuICAgICAgICAgICAgICAgIHRoaXMuc2V0RW50aXR5KGVsZW1lbnQucHJvcGVydGllcyk7XHJcbiAgICAgICAgICAgICAgICBwcm9wZXJ0eUNvbmZpZy5wdXNoKGVsZW1lbnQpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHByb3BlcnR5Q29uZmlnO1xyXG4gICAgfVxyXG4gICAgcHJpdmF0ZSBzZXRFbnRpdHkob2JqOiBQcm9wZXJ0eUVudGl0eVtdKSB7XHJcbiAgICAgICAgaWYgKG9iaiAmJiBvYmoubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICBvYmouZm9yRWFjaCgoaXRlbTogUHJvcGVydHlFbnRpdHkpID0+IHtcclxuICAgICAgICAgICAgICAgIHN3aXRjaCAoaXRlbS5wcm9wZXJ0eUlEKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBSZXNvdXJjZUtleXMuUGFydGljaXBhbnRTY2hlbWVzOiAvLyDlj4LkuI7ogIVcclxuICAgICAgICAgICAgICAgICAgICAgICAgaXRlbS5lZGl0b3IgPSBQZXJmb3JtZXJDb21wb25lbnQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGl0ZW0uY29udmVydGVyID0gbmV3IFBlcmZvcm1lckNvbnZlcnRlcigpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIFJlc291cmNlS2V5cy53Zl9FeGVjdXRlRm9ybXNfUEM6IC8vIOihqOWNleWumuS5iVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpdGVtLmVkaXRvciA9IEV4ZWN1dGVGb3Jtc0NvbXBvbmVudDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaXRlbS5jb252ZXJ0ZXIgPSBuZXcgRXhlY3V0ZUZvcm1zQ29udmVydGVyKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGl0ZW0uZWRpdG9yUGFyYW1zID0ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbG9jYXRpb246ICdub3RpZnlBY3Rpdml0eScsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0YWI6ICd3ZWInXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgUmVzb3VyY2VLZXlzLndmX0V4ZWN1dGVGb3Jtc19Nb2JpbGU6IC8vIOihqOWNleWumuS5iVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpdGVtLmVkaXRvciA9IEV4ZWN1dGVGb3Jtc0NvbXBvbmVudDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaXRlbS5jb252ZXJ0ZXIgPSBuZXcgRXhlY3V0ZUZvcm1zQ29udmVydGVyKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGl0ZW0uZWRpdG9yUGFyYW1zID0ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbG9jYXRpb246ICdub3RpZnlBY3Rpdml0eScsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0YWI6ICdtb2JpbGUnXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgUmVzb3VyY2VLZXlzLm1lc3NhZ2VOb3RpY2U6IC8vIOa2iOaBr+mAmuefpVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpdGVtLmVkaXRvciA9IE1lc3NhZ2VOb3RpY2VDb21wb25lbnQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGl0ZW0uY29udmVydGVyID0gbmV3IE1lc3NhZ2VOb3RpY2VDb252ZXJ0ZXIoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaXRlbS5lZGl0b3JQYXJhbXMgPSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsb2NhdGlvbjogJ2FjdGl2aXR5J1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpdGVtLmVkaXRvciA9IEV4dGVuZFByb3BlcnR5Q29tcG9uZW50O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpdGVtLmNvbnZlcnRlciA9IG5ldyBFeHRlbmRQcm9wZXJ0eUNvbnZlcnRlcigpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcbiJdfQ==