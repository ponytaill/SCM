import { OnInit, TemplateRef, EventEmitter } from '@angular/core';
import { TypeConverter } from '@farris/ui-property-panel';
import { DatagridComponent } from '@farris/ui-datagrid';
import { ApprovalPivotConfig } from './approval-pivot-config';
import { ProcessDesignerUIState } from '../../app/process-designer.uistate';
import { ExpressionService } from '@gsp-svc/expression';
import { MessagerService } from '@farris/ui-messager';
export declare class ApprovalPivotComponent implements OnInit {
    private designerUIState;
    private expr;
    private message;
    cls: string;
    closeModal: EventEmitter<any>;
    submitModal: EventEmitter<any>;
    modalFooter: TemplateRef<any>;
    grid: DatagridComponent;
    value: any;
    config: ApprovalPivotConfig;
    typeList: {
        value: string;
        text: string;
    }[];
    columns: ({
        field: string;
        width: number;
        title: string;
        formatter: {
            type: string;
            options: {
                valueField: string;
                textField: string;
                data: {
                    value: string;
                    text: string;
                }[];
            };
        };
        editor: {
            type: string;
            options: {
                valueField: string;
                textField: string;
                data: {
                    value: string;
                    text: string;
                }[];
                idField: string;
                panelHeight: string;
                enableClear: boolean;
                groupText?: undefined;
                editable?: undefined;
                clickHandle?: undefined;
                clear?: undefined;
            };
        };
        validators: {
            type: string;
            messager: string;
        }[];
        showTips?: undefined;
    } | {
        field: string;
        width: number;
        title: string;
        showTips: boolean;
        editor: {
            type: string;
            options: {
                groupText: string;
                editable: boolean;
                clickHandle: (e: any) => void;
                clear: (e: any) => void;
                valueField?: undefined;
                textField?: undefined;
                data?: undefined;
                idField?: undefined;
                panelHeight?: undefined;
                enableClear?: undefined;
            };
        };
        formatter?: undefined;
        validators?: undefined;
    } | {
        field: string;
        width: number;
        title: string;
        editor: {
            type: string;
            options: {
                valueField?: undefined;
                textField?: undefined;
                data?: undefined;
                idField?: undefined;
                panelHeight?: undefined;
                enableClear?: undefined;
                groupText?: undefined;
                editable?: undefined;
                clickHandle?: undefined;
                clear?: undefined;
            };
        };
        formatter?: undefined;
        validators?: undefined;
        showTips?: undefined;
    } | {
        field: string;
        width: number;
        title: string;
        showTips: boolean;
        editor: {
            type: string;
            options: {
                valueField?: undefined;
                textField?: undefined;
                data?: undefined;
                idField?: undefined;
                panelHeight?: undefined;
                enableClear?: undefined;
                groupText?: undefined;
                editable?: undefined;
                clickHandle?: undefined;
                clear?: undefined;
            };
        };
        formatter?: undefined;
        validators?: undefined;
    })[];
    modalConfig: {
        title: string;
        width: number;
        height: number;
        showButtons: boolean;
    };
    constructor(designerUIState: ProcessDesignerUIState, expr: ExpressionService, message: MessagerService);
    ngOnInit(): void;
    add(): void;
    delete(): void;
    clickOK(): void;
    clickCancel(): void;
    private validator;
    editConditon(e: any): void;
}
export declare class ApprovalPivotConverter implements TypeConverter {
    constructor();
    convertTo(data: any): string;
}
