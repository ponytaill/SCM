/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, ViewChild, TemplateRef, Input, Injector } from '@angular/core';
import { TaskService } from '../../service/task.service';
import { StartProcessPayload, FlowNodeInfo } from '../../entity/start-process-payload';
import { LoadingService } from '@farris/ui-loading';
import { Subject } from 'rxjs';
import { NotifyService } from '@farris/ui-notify';
import { I18nService } from '../../service/i18n/i18n.service';
import { ComboListComponent } from '@farris/ui-combo-list';
import { MessageType } from '../../entity/postMessage';
import { MessagerService } from '@farris/ui-messager';
import { WfTaskHandlerService } from '../../wf-task-handler.service';
import { ConfigCode } from '../../entity/task-center-config';
import { WfContext } from '../../entity/wfContext';
import { TaskEntity } from '../../entity/task-entity';
import { TaskAction } from '../../entity/task-action';
import { SelectedProcessItem, StartProcessCache } from '../../entity/process-cache';
export class ProcessSelectorComponent {
    // task center-ui中start-process-menu使用了此选择器，构造方法改动时，需重新编译
    /**
     * @param {?} taskService
     * @param {?} loadingService
     * @param {?} notify
     * @param {?} i18nService
     * @param {?} messager
     * @param {?} injector
     * @param {?} handlerService
     */
    constructor(taskService, loadingService, notify, i18nService, messager, injector, handlerService) {
        this.taskService = taskService;
        this.loadingService = loadingService;
        this.notify = notify;
        this.i18nService = i18nService;
        this.messager = messager;
        this.injector = injector;
        this.handlerService = handlerService;
        this.destProcesses = []; //候选流程
        //候选流程
        this.destNodes = []; //候选下一环节
        //保存模拟流程后返回的内容，选择节点时使用
        this.assignInfos = [{
                selectedAssignees: [],
                assigneeInfo: null,
                assignees: [],
                activityName: '',
                dependency: '',
                anonymous: false,
                anonymousText: null,
                resolved: false,
            }]; //节点返回的指派信息（多个）
        //选择的下一环节ID，后续环节id的拼接
        this.payload = new StartProcessPayload; //保存表单上传来的payload
        //保存表单上传来的payload
        this.subject = new Subject(); //返回bool
        //返回bool
        this.subjectWithResponse = new Subject(); //返回流程上下文
        //返回流程上下文
        this.subjectCancel = new Subject(); //点击取消后的subject
        //点击取消后的subject
        this.submitDisable = false; //提交按钮是否禁用
        this.showButtons = false;
        this.curLanguage = localStorage.getItem('languageCode') || 'zh-CHS'; //系统当前语言
        //选择流程的placeholder
        this.wfContext = new WfContext(); //工作流上下文
        //确认取消按钮
        this.openFromIframe = false; //是否从iframe打开，应用IDP提交审批集成
    }
    /**
     * @return {?}
     */
    ngOnInit() {
    }
    //是否从iframe打开，应用IDP提交审批集成
    /**
     * @param {?} dataId
     * @return {?}
     */
    set dataId(dataId) {
        if (!dataId) {
            throw new Error("dataId为空");
        }
        this._dataId = dataId;
    }
    /**
     * @param {?} bizDefKey
     * @return {?}
     */
    set bizDefKey(bizDefKey) {
        if (!bizDefKey) {
            throw new Error("流程分类id为空");
        }
        this.showButtons = true;
        this._bizDefKey = bizDefKey;
        /** @type {?} */
        var payload = new StartProcessPayload();
        payload.dataId = this._dataId;
        payload.bizDefKey = this._bizDefKey;
        this.setParam(payload);
    }
    /**
     * @param {?} param
     * @return {?}
     */
    setParam(param) {
        /** @type {?} */
        let subject = new Subject();
        if (!param) {
            return;
        }
        this.payload.id = param.id;
        this.payload.processDefinitionId = param.processDefinitionId;
        this.payload.processDefinitionKey = param.processDefinitionKey;
        this.payload.bizDefKey = param.bizDefKey;
        this.payload.dataModelId = param.dataModelId;
        this.payload.dataId = param.dataId;
        this.payload.name = param.name;
        this.payload.startUserId = param.startUserId;
        this.payload.nextFlowNodes = [];
        this.wfContext.processCategoryId = param.bizDefKey;
        this.startProcessSimulate(this.payload, subject);
        return subject.asObservable();
    }
    /**
     * @param {?} payload
     * @param {?} subject
     * @return {?}
     */
    startProcessSimulate(payload, subject) {
        /** @type {?} */
        const load = this.loadingService.show();
        this.taskService.startProcessSimulate(payload).subscribe((response) => {
            load.close();
            subject.next(true);
            this.response = response;
            this.destProcesses = response.procDefs.map(process => ({ id: process.procDefId, name: process.procDefName + `(v${process.version}.0)` })); //增加流程的版本信息
            if (this.destProcesses.length === 1) { //只有一个候选流程时
                this.selectedProcessId = this.destProcesses[0].id;
                this.setNextNode(response);
                this.processPlaceholder = this.destProcesses[0].name;
            }
            else { //多个流程时，取上一次选择的
                //多个流程时，取上一次选择的
                /** @type {?} */
                const selectedProcessId = this.getSelectedProcessCache(this.payload.bizDefKey);
                if (selectedProcessId && this.destProcesses.findIndex(p => p.id === selectedProcessId.processDefinitionId) > -1) {
                    this.getDestNodes(selectedProcessId.processDefinitionId);
                    this.processPlaceholder = selectedProcessId.processDefinitionName;
                }
                else {
                    this.processPlaceholder = this.i18nService.getValue('task.selectPlaceholder');
                }
            }
        }, error => {
            load.close();
            subject.error(error);
            this.taskService.error(error);
        });
    }
    /**
     * 选择某个流程后
     * @param {?} data
     * @return {?}
     */
    selectProcessChange(data) {
        this.nodeCombo.onClear();
        this.getDestNodes(data.data.id);
    }
    /**
     * 根据选择的流程定义id获取下一环节信息
     * @private
     * @param {?} selectedProcessId
     * @return {?}
     */
    getDestNodes(selectedProcessId) {
        this.selectedProcessId = selectedProcessId;
        this.destNodes = [];
        this.nodePlaceholder = '';
        this.clearAssignInfos();
        /** @type {?} */
        var payload = new StartProcessPayload();
        payload.processDefinitionId = this.selectedProcessId;
        payload.dataId = this.payload.dataId;
        /** @type {?} */
        const load = this.loadingService.show();
        this.taskService.startProcessSimulate(payload).subscribe((response) => {
            load.close();
            this.response = response;
            this.setNextNode(response);
        }, error => {
            load.close();
            this.taskService.error(error);
        });
    }
    /**
     * 选择节点后事件
     * @param {?} data
     * @return {?}
     */
    selectNodeChange(data) {
        this.clearAssignInfos();
        this.selectedNodeId = data.data.id;
        /** @type {?} */
        const nodeNames = data.data.name.split('，');
        if (this.response.simulationPaths[data.index].nodeInfoList.every(node => node.resolved === true)) { //已预解析参与者
            this.setAssignInfo(this.response.simulationPaths[data.index]);
        }
        else { //未预解析参与者
            //未预解析参与者
            /** @type {?} */
            let payload = new StartProcessPayload();
            payload.processDefinitionId = this.selectedProcessId;
            payload.dataId = this.payload.dataId;
            payload.nextFlowNodes = [];
            this.selectedNodeId.split('，').forEach((nodeId, index) => {
                /** @type {?} */
                let nextFlowNode = new FlowNodeInfo();
                nextFlowNode.activityDefinitionId = nodeId;
                nextFlowNode.activityDefinitionName = nodeNames[index];
                payload.nextFlowNodes.push(nextFlowNode);
            });
            /** @type {?} */
            const load = this.loadingService.show();
            this.taskService.startProcessSimulate(payload).subscribe((response) => {
                load.close();
                this.setAssignInfo(response.simulationPaths[0]); //选择的下一环节应该在同一条路径上，故取simulationPaths[0]
            }, error => {
                load.close();
                this.taskService.error(error);
            });
        }
    }
    /**
     * 实现真正的提交
     * @return {?}
     */
    startProcessSubmit() {
        if (!this.selectedProcessId) {
            this.openFromIframe ? this.messager.warning(this.i18nService.getValue('startProcess.selectProcess')) :
                this.notify.warning(this.i18nService.getValue('startProcess.selectProcess'));
            return;
        }
        if (!this.selectedNodeId) {
            this.openFromIframe ? this.messager.warning(this.i18nService.getValue('startProcess.selectNode')) :
                this.notify.warning(this.i18nService.getValue('startProcess.selectNode'));
            return;
        }
        if (this.assignInfos.filter(info => (info.assigneeInfo || info.selectedAssignees.length) && !info.assignees.length).length) { //空参与者策略时，不提示选人
            this.openFromIframe ? this.messager.warning(this.i18nService.getValue('task.selectProcessor')) :
                this.notify.warning(this.i18nService.getValue('task.selectProcessor'));
            return;
        }
        /** @type {?} */
        const nodes = this.selectedNodeId.split('，');
        for (let i = 0; i < nodes.length; i++) {
            /** @type {?} */
            let nextFlowNode = {
                activityDefinitionId: nodes[i],
                activityDefinitionName: this.assignInfos[i].activityName,
                dependency: this.assignInfos[i].dependency,
                selectedAssignees: this.assignInfos[i].assigneeInfo ? this.assignInfos[i].assignees : [],
                assigneeInfo: null,
                resolved: false,
                anonymous: false,
                anonymousText: ''
            }
            //节点找不到人，且异常提示，前端控制住，不允许走提交请求（构件事务问题）。并行场景下暂不处理
            ;
            //节点找不到人，且异常提示，前端控制住，不允许走提交请求（构件事务问题）。并行场景下暂不处理
            if (this.response && this.response.simulationPaths.length && !this.response.simulationPaths[0].id.startsWith('ParallelGateway')) {
                if (nodes.length == 1 && nodes[i].startsWith('UserActivity') && this.assignInfos[i].resolved && !this.assignInfos[i].assigneeInfo && !this.assignInfos[i].selectedAssignees.length) {
                    /** @type {?} */
                    const str = this.assignInfos[i].activityName + this.i18nService.getValue('startProcess.node') + this.i18nService.getValue('startProcess.noUser');
                    this.openFromIframe ? this.messager.warning(str) : this.notify.warning(str);
                    return;
                }
            }
            this.payload.nextFlowNodes.push(nextFlowNode);
        }
        this.payload.processDefinitionId = this.selectedProcessId;
        this.submitDisable = true;
        /** @type {?} */
        const load = this.loadingService.show();
        this.taskService.startProcess(this.payload).subscribe((response) => {
            load.close();
            this.submitDisable = false;
            this.subject.next(true);
            this.subjectWithResponse.next(response);
            /** @type {?} */
            let messageAfterSubmit = this.i18nService.getValue('startProcess.submitSuccess');
            if (this.openFromIframe) {
                ((/** @type {?} */ (window.parent))).gspWfService.eventHandler({ data: { type: MessageType.SubmitSuccess, message: messageAfterSubmit } });
            }
            else {
                this.handlerService.handleSubmitMessage(ConfigCode.Info_After_Submit, this.payload.bizDefKey);
            }
            if (!this.openFromIframe && response.needInteraction) { //提交审批后需要指派场景
                this.notify.info(this.i18nService.getValue('cueWords.select')
                    + response.nextFlowNodes[0].activityDefinitionName
                    + this.i18nService.getValue('cueWords.processor'));
                /** @type {?} */
                let task = new TaskEntity();
                /** @type {?} */
                let action = new TaskAction();
                task.sourceId = response.nextFlowNodes[0].assigneeInfo.workItemId;
                action.code = 'AssignUser';
                action.name = this.i18nService.getValue('cueWords.assignUser');
                this.handlerService.execute(task, action).subscribe(re => { });
            }
            this.setSelectedProcessCache();
        }, (error) => {
            load.close();
            this.payload.nextFlowNodes = [];
            this.submitDisable = false;
            this.subject.next(false); //已经有人用了这个subject，提交失败的话返回false by fangpengfei@20210324
            this.taskService.error(error);
        });
    }
    /**
     * 选择流程清空
     * @return {?}
     */
    selectProcessClear() {
        this.selectedProcessId = '';
        this.destNodes = [];
        this.nodePlaceholder = '';
        this.selectedNodeId = '';
        this.clearAssignInfos();
        this.response = null;
    }
    /**
     * 选择节点清空
     * @return {?}
     */
    selectNodeClear() {
        this.selectedNodeId = '';
        this.clearAssignInfos();
    }
    /**
     * 用户帮助选人
     * @param {?} data
     * @param {?} index
     * @return {?}
     */
    afterConfirm(data, index) {
        this.assignInfos[index].assignees = data;
    }
    /**
     * 弹框点击取消
     * @return {?}
     */
    cancel() {
        if (this.openFromIframe) {
            ((/** @type {?} */ (window.parent))).gspWfService.eventHandler({ data: { type: MessageType.Cancel, message: '' } });
        }
        else {
            this.subjectCancel.next(false);
        }
    }
    /**
     * 获取提交审批后返回值（bool型，兼容历史）
     * @return {?}
     */
    getSubject() {
        return this.subject.asObservable();
    }
    /**
     * 获取提交审批后返回值（实体型，带流程上下文）
     * @return {?}
     */
    getSubjectWithResponse() {
        return this.subjectWithResponse.asObservable();
    }
    /**
     * 点击取消后的subject，关闭窗口使用
     * @return {?}
     */
    getSubjectCancel() {
        return this.subjectCancel.asObservable();
    }
    /**
     * 设置下一环节
     * @private
     * @param {?} response
     * @return {?}
     */
    setNextNode(response) {
        this.destNodes = response.simulationPaths && response.simulationPaths.map(path => ({
            id: path.nodeInfoList.map(node => node.activityDefinitionId).join('，'),
            name: path.nodeInfoList.map(node => node.activityDefinitionName).join('，')
        }));
        //处理默认分支，无默认分支返回-1
        /** @type {?} */
        const defaultIndex = response.simulationPaths.findIndex(a => a.default);
        if (defaultIndex > -1) {
            this.selectedNodeId = this.destNodes[defaultIndex].id;
            this.nodePlaceholder = this.destNodes[defaultIndex].name.indexOf('，') > -1 ? response.simulationPaths[defaultIndex].name : this.destNodes[defaultIndex].name;
            this.setAssignInfo(response.simulationPaths[defaultIndex]);
        }
        else {
            this.nodePlaceholder = this.i18nService.getValue('task.selectPlaceholder');
        }
    }
    /**
     * 设置当前指派信息帮助参数
     * @private
     * @param {?} simulationPaths
     * @return {?}
     */
    setAssignInfo(simulationPaths) {
        this.assignInfos = [];
        this.selectedNodeId.split('，').forEach(nodeId => {
            /** @type {?} */
            const node = simulationPaths.nodeInfoList.find(node => node.activityDefinitionId === nodeId);
            if (node) {
                this.assignInfos.push({
                    selectedAssignees: node.selectedAssignees,
                    assigneeInfo: node.assigneeInfo,
                    assignees: node.selectedAssignees.map(user => { return { id: user.id, name: user.name }; }),
                    activityName: node.activityDefinitionName,
                    dependency: node.dependency,
                    anonymous: node.anonymous,
                    anonymousText: node.anonymousText,
                    resolved: node.resolved
                });
            }
            else {
                this.assignInfos.push({
                    selectedAssignees: [],
                    assigneeInfo: null,
                    assignees: [],
                    activityName: '',
                    dependency: '',
                    anonymous: false,
                    anonymousText: '',
                    resolved: false,
                });
            }
        });
    }
    /**
     * 清空当前指派信息帮助参数
     * @private
     * @return {?}
     */
    clearAssignInfos() {
        this.assignInfos = [{
                selectedAssignees: [],
                assigneeInfo: null,
                assignees: [],
                activityName: '',
                dependency: '',
                anonymous: false,
                anonymousText: '',
                resolved: false,
            }];
    }
    /**
     * 获取浏览器缓存，上次流程选择的结果
     * @private
     * @param {?} processCategoryId
     * @return {?}
     */
    getSelectedProcessCache(processCategoryId) {
        /** @type {?} */
        let browserCache = (/** @type {?} */ (JSON.parse(localStorage.getItem("gspWfStartProcess"))));
        if (browserCache && browserCache.selectedProcessList) {
            return browserCache.selectedProcessList.find(a => a.processCategory == processCategoryId);
        }
        return undefined;
    }
    /**
     * 浏览器缓存记下流程选择的结果
     * @private
     * @return {?}
     */
    setSelectedProcessCache() {
        /** @type {?} */
        const processCategoryId = this.payload.bizDefKey;
        /** @type {?} */
        const processDefinitionId = this.payload.processDefinitionId;
        /** @type {?} */
        let process = this.destProcesses.find(a => a.id == processDefinitionId);
        /** @type {?} */
        const processDefinitionName = process && process.name;
        /** @type {?} */
        let browserCache = (/** @type {?} */ (JSON.parse(localStorage.getItem("gspWfStartProcess"))));
        if (browserCache && browserCache.selectedProcessList) {
            /** @type {?} */
            let selectedProcessList = browserCache.selectedProcessList;
            if (selectedProcessList.findIndex(a => a.processCategory == processCategoryId) > -1) {
                selectedProcessList.map(item => {
                    if (item.processCategory == processCategoryId) {
                        item.processDefinitionId = processDefinitionId;
                        item.processDefinitionName = processDefinitionName;
                        item.logTime = new Date();
                    }
                });
                browserCache.selectedProcessList = selectedProcessList;
                localStorage.setItem("gspWfStartProcess", JSON.stringify(browserCache));
            }
            else {
                /** @type {?} */
                let item = new SelectedProcessItem(processCategoryId, processDefinitionId, processDefinitionName);
                selectedProcessList.push(item);
                browserCache.selectedProcessList = selectedProcessList;
                localStorage.setItem("gspWfStartProcess", JSON.stringify(browserCache));
            }
        }
        else {
            /** @type {?} */
            let browserCache = new StartProcessCache();
            /** @type {?} */
            let selectedProcessList = [];
            /** @type {?} */
            let item = new SelectedProcessItem(processCategoryId, processDefinitionId, processDefinitionName);
            selectedProcessList.push(item);
            browserCache.selectedProcessList = selectedProcessList;
            localStorage.setItem("gspWfStartProcess", JSON.stringify(browserCache));
        }
    }
}
ProcessSelectorComponent.decorators = [
    { type: Component, args: [{
                selector: 'lib-process-selector',
                template: "<div style=\"padding: 10px 20px; overflow: hidden; background-color: white;\">\r\n  <!-- \u9009\u62E9\u6D41\u7A0B\u5B9A\u4E49\uFF0C\u4E0B\u62C9 -->\r\n  <div class=\"wf-task-handler-help-div wf-task-handler-help-div-submit\">\r\n    <div class=\"wf-task-handler-help-text\">\r\n      {{ \"startProcess.title\" | translate }}\r\n    </div>\r\n    <div class=\"d-flex\" style=\"flex: 1;\">\r\n      <farris-combo-list style=\"flex: 1;\"\r\n        [data]=\"destProcesses\"\r\n        [editable]=\"false\"\r\n        [textField]=\"'name'\"\r\n        [valueField]=\"'id'\"\r\n        [idField]=\"'id'\"\r\n        [readonly]=\"destProcesses.length > 1 ? false : true\"\r\n        (selectChange)=\"selectProcessChange($event)\"\r\n        (clear)=\"selectProcessClear()\"\r\n        [placeholder]=\"processPlaceholder\"\r\n        [forcePlaceholder]=\"true\"\r\n      >\r\n      </farris-combo-list>\r\n    </div>\r\n  </div>\r\n\r\n  <!-- \u4E0B\u4E00\u8282\u70B9\uFF0C\u4E0B\u62C9 -->\r\n  <div class=\"wf-task-handler-help-div wf-task-handler-help-div-submit\">\r\n    <div class=\"wf-task-handler-help-text\">{{ \"task.nextNodeText\" | translate }}</div>\r\n    <div class=\"d-flex\" style=\"flex: 1;\">\r\n      <farris-combo-list style=\"flex: 1;\"\r\n        #nodeCombo\r\n        [data]=\"destNodes\"\r\n        [editable]=\"false\"\r\n        [textField]=\"'name'\"\r\n        [valueField]=\"'id'\"\r\n        [idField]=\"'id'\"\r\n        [readonly]=\"destNodes.length > 1 ? false : true\"\r\n        (selectChange)=\"selectNodeChange($event)\"\r\n        (clear)=\"selectNodeClear()\"\r\n        [placeholder]=\"nodePlaceholder\"\r\n        [forcePlaceholder]=\"true\"\r\n      >\r\n      </farris-combo-list>\r\n    </div>\r\n  </div>\r\n\r\n  <!-- \u529E\u7406\u4EBA\u5458 -->\r\n  <lib-assignee-info *ngFor=\"let assignInfo of assignInfos; let i = index\"\r\n    [assigneeInfo]=\"assignInfo.assigneeInfo\"\r\n    [setAnonymous]=\"assignInfo.anonymous\"\r\n    [setAnonymousText]=\"assignInfo.anonymousText\"\r\n    [selectedAssignees]=\"assignInfo.selectedAssignees\"\r\n    [activityName]=\"assignInfos.length > 1 ? assignInfo.activityName : ''\"\r\n    [ifShowBlank]=\"assignInfos.length > 1 ? false : true\"\r\n    [openFromIframe]=\"openFromIframe\"\r\n    [wfContext]=\"wfContext\"\r\n    (afterConfirm)=\"afterConfirm($event, i)\"\r\n  ></lib-assignee-info>\r\n</div>\r\n\r\n\r\n<!-- \u5F39\u6846\u663E\u793A\u65F6\uFF0C\u663E\u793A\u6309\u94AE -->\r\n<div *ngIf=\"showButtons\" class=\"modal-footer\" style=\"float: right; width: 100%;\">\r\n  <div *ngIf=\"showButtons; then buttons\"></div>\r\n</div>\r\n\r\n<!-- \u6309\u94AE -->\r\n<ng-template #buttons>\r\n  <button type=\"button\" class=\"btn btn-secondary\" (click)=\"cancel()\">\r\n    {{ \"static.footCancel\" | translate }}\r\n  </button>\r\n  <button type=\"button\" class=\"btn btn-primary\" [disabled]=\"submitDisable\" directive-throttle (throttleClick)=\"startProcessSubmit()\">\r\n    {{ \"static.footOk\" | translate }}\r\n  </button>\r\n</ng-template>\r\n",
                styles: [".wf-task-handler-help-div{font-size:13px;color:#2d2f33;margin-bottom:20px}.wf-task-handler-help-div-submit{margin-bottom:20px}.wf-task-handler-help-text{padding-bottom:8px;white-space:nowrap;overflow:hidden;text-overflow:ellipsis}"]
            }] }
];
/** @nocollapse */
ProcessSelectorComponent.ctorParameters = () => [
    { type: TaskService },
    { type: LoadingService },
    { type: NotifyService },
    { type: I18nService },
    { type: MessagerService },
    { type: Injector },
    { type: WfTaskHandlerService }
];
ProcessSelectorComponent.propDecorators = {
    nodeCombo: [{ type: ViewChild, args: ['nodeCombo',] }],
    buttons: [{ type: ViewChild, args: ['buttons',] }],
    openFromIframe: [{ type: Input }],
    dataId: [{ type: Input }],
    bizDefKey: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    ProcessSelectorComponent.prototype.destProcesses;
    /** @type {?} */
    ProcessSelectorComponent.prototype.destNodes;
    /** @type {?} */
    ProcessSelectorComponent.prototype.response;
    /** @type {?} */
    ProcessSelectorComponent.prototype.assignInfos;
    /** @type {?} */
    ProcessSelectorComponent.prototype.selectedProcessId;
    /** @type {?} */
    ProcessSelectorComponent.prototype.selectedNodeId;
    /** @type {?} */
    ProcessSelectorComponent.prototype.payload;
    /** @type {?} */
    ProcessSelectorComponent.prototype.subject;
    /** @type {?} */
    ProcessSelectorComponent.prototype.subjectWithResponse;
    /** @type {?} */
    ProcessSelectorComponent.prototype.subjectCancel;
    /** @type {?} */
    ProcessSelectorComponent.prototype.submitDisable;
    /** @type {?} */
    ProcessSelectorComponent.prototype._dataId;
    /** @type {?} */
    ProcessSelectorComponent.prototype._bizDefKey;
    /** @type {?} */
    ProcessSelectorComponent.prototype.showButtons;
    /** @type {?} */
    ProcessSelectorComponent.prototype.curLanguage;
    /** @type {?} */
    ProcessSelectorComponent.prototype.nodePlaceholder;
    /** @type {?} */
    ProcessSelectorComponent.prototype.processPlaceholder;
    /** @type {?} */
    ProcessSelectorComponent.prototype.wfContext;
    /** @type {?} */
    ProcessSelectorComponent.prototype.nodeCombo;
    /** @type {?} */
    ProcessSelectorComponent.prototype.buttons;
    /** @type {?} */
    ProcessSelectorComponent.prototype.openFromIframe;
    /**
     * @type {?}
     * @private
     */
    ProcessSelectorComponent.prototype.taskService;
    /**
     * @type {?}
     * @private
     */
    ProcessSelectorComponent.prototype.loadingService;
    /**
     * @type {?}
     * @private
     */
    ProcessSelectorComponent.prototype.notify;
    /**
     * @type {?}
     * @private
     */
    ProcessSelectorComponent.prototype.i18nService;
    /**
     * @type {?}
     * @private
     */
    ProcessSelectorComponent.prototype.messager;
    /**
     * @type {?}
     * @private
     */
    ProcessSelectorComponent.prototype.injector;
    /**
     * @type {?}
     * @private
     */
    ProcessSelectorComponent.prototype.handlerService;
}
//# sourceMappingURL=data:application/json;base64,