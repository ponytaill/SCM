/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { HttpService } from '@ecp-caf/caf-common';
import { ProcessDeUtil } from './process-de-util';
var ProcessDesignerDataService = /** @class */ (function () {
    function ProcessDesignerDataService(http, util) {
        this.http = http;
        this.util = util;
    }
    // 基于流程分类ID获取流程分类信息
    // 基于流程分类ID获取流程分类信息
    /**
     * @param {?} id
     * @return {?}
     */
    ProcessDesignerDataService.prototype.GetFlowFormbyId = 
    // 基于流程分类ID获取流程分类信息
    /**
     * @param {?} id
     * @return {?}
     */
    function (id) {
        if (id) {
            /** @type {?} */
            var url = this.util.getFlowFormWebApi();
            url += "/" + id;
            return this.http.get(url);
        }
    };
    // 基于流程分类获取参数列表
    // 基于流程分类获取参数列表
    /**
     * @param {?} id
     * @return {?}
     */
    ProcessDesignerDataService.prototype.getParametersbyFlowFormKey = 
    // 基于流程分类获取参数列表
    /**
     * @param {?} id
     * @return {?}
     */
    function (id) {
        if (id) {
            /** @type {?} */
            var url = this.util.getFormalParametersWebApi();
            url += "?flowFormKey=" + id;
            return this.http.get(url);
        }
    };
    // 基于流程分类获取流程构件
    // 基于流程分类获取流程构件
    /**
     * @param {?} id
     * @return {?}
     */
    ProcessDesignerDataService.prototype.getComponentsbyFlowformkey = 
    // 基于流程分类获取流程构件
    /**
     * @param {?} id
     * @return {?}
     */
    function (id) {
        if (id) {
            /** @type {?} */
            var url = this.util.getBizComponentsWebApi();
            url += "/query?param=" + encodeURIComponent("{\"flowFormKey\":\"" + id + "\"}");
            return this.http.get(url);
        }
    };
    // 基于流程分类获取表单定义
    // 基于流程分类获取表单定义
    /**
     * @param {?} id
     * @return {?}
     */
    ProcessDesignerDataService.prototype.getExecuteFormbyFlowFormKey = 
    // 基于流程分类获取表单定义
    /**
     * @param {?} id
     * @return {?}
     */
    function (id) {
        if (id) {
            /** @type {?} */
            var url = this.util.getExcuteFormsWebApi();
            url += "?flowFormKey=" + id;
            return this.http.get(url);
        }
    };
    /**
     * 基于流程分类Id获取业务活动
     * @param ffId 流程分类id
     */
    /**
     * 基于流程分类Id获取业务活动
     * @param {?} ffId 流程分类id
     * @return {?}
     */
    ProcessDesignerDataService.prototype.getBizActivities = /**
     * 基于流程分类Id获取业务活动
     * @param {?} ffId 流程分类id
     * @return {?}
     */
    function (ffId) {
        if (ffId) {
            /** @type {?} */
            var url = this.util.getBizActivityWebApi(ffId);
            return this.http.get(url);
            // .pipe(
            //     map((re: any) => re),
            //     mergeMap((activities: any[]) => {
            //         if (activities && activities.length > 0) {
            //             return forkJoin(activities.map(activity => {
            //                 return forkJoin(this.getBizActivityComponents(ffId, activity.id),
            //                     this.getBizActivityActions(activity.id))
            //                     .pipe(
            //                         map((re: any[]) => {
            //                             activity.components = re[0];
            //                             activity.actions = re[1];
            //                             return activity;
            //                         }));
            //             }));
            //         } else {
            //             return of([]);
            //         }
            //     })
            // );
        }
    };
    /**
     * 基于流程分类ID获取自定义动作
     * @param formId 流程分类ID
     */
    /**
     * 基于流程分类ID获取自定义动作
     * @param {?} formId 流程分类ID
     * @return {?}
     */
    ProcessDesignerDataService.prototype.getCustomizeActions = /**
     * 基于流程分类ID获取自定义动作
     * @param {?} formId 流程分类ID
     * @return {?}
     */
    function (formId) {
        if (formId) {
            /** @type {?} */
            var url = "/api/runtime/wf/v1.0/customizeAction?flowFormKey=" + formId;
            return this.http.get(url);
        }
    };
    /**
     * 基于业务活动id获取业务活动构件
     * @param id 业务活动id
     */
    /**
     * 基于业务活动id获取业务活动构件
     * @private
     * @param {?} flowFormId
     * @param {?} id 业务活动id
     * @return {?}
     */
    ProcessDesignerDataService.prototype.getBizActivityComponents = /**
     * 基于业务活动id获取业务活动构件
     * @private
     * @param {?} flowFormId
     * @param {?} id 业务活动id
     * @return {?}
     */
    function (flowFormId, id) {
        if (id) {
            /** @type {?} */
            var url = this.util.getBizComponentsWebApi();
            url += "/query?param=" + encodeURIComponent("{\"flowFormKey\":\"" + flowFormId + "\",\"owner\":\"" + id + "\",\"ownerType\":\"Activity\"}");
            return this.http.get(url);
        }
    };
    /**
     * @private
     * @param {?} id
     * @return {?}
     */
    ProcessDesignerDataService.prototype.getBizActivityActions = /**
     * @private
     * @param {?} id
     * @return {?}
     */
    function (id) {
        if (id) {
            /** @type {?} */
            var url = this.util.getApprovalActionWebApi();
            url += "?bizActivityId=" + id;
            return this.http.get(url);
        }
    };
    // 基于ID获取BE
    // 基于ID获取BE
    /**
     * @param {?} id
     * @return {?}
     */
    ProcessDesignerDataService.prototype.getBusinessEntitybyId = 
    // 基于ID获取BE
    /**
     * @param {?} id
     * @return {?}
     */
    function (id) {
        if (id) {
            // let url = this.util.getMetaDataRUWebApi();
            // url += id;
            // const url = `/api/runtime/lcm/v1.0/bef/handledBeMeta?beId=${id}`;
            /** @type {?} */
            var url = "/api/runtime/lcm/v1.0/bef/expression?beId=" + id;
            return this.http.get(url);
        }
    };
    /**
     * 基于流程定义Key获取上下文
     * @param key 流程定义key
     */
    /**
     * 基于流程定义Key获取上下文
     * @param {?} key 流程定义key
     * @return {?}
     */
    ProcessDesignerDataService.prototype.getProcContentbyKey = /**
     * 基于流程定义Key获取上下文
     * @param {?} key 流程定义key
     * @return {?}
     */
    function (key) {
        if (key) {
            /** @type {?} */
            var url = this.util.getProcessDefinitionWebApi();
            url += "/bpmnModel?procDefKey=" + key;
            return this.http.get(url);
        }
    };
    /**
     * 基于流程定义Key获取上下文
     * @param key 流程定义Id
     */
    /**
     * 基于流程定义Key获取上下文
     * @param {?} id
     * @return {?}
     */
    ProcessDesignerDataService.prototype.getRTProcContentbyId = /**
     * 基于流程定义Key获取上下文
     * @param {?} id
     * @return {?}
     */
    function (id) {
        if (id) {
            /** @type {?} */
            var url = this.util.getRTProcessDefinitionWebApi();
            url += "/" + id + "/bpmnModel";
            return this.http.get(url);
        }
    };
    /**
     * 保存流程
     * @param content
     */
    /**
     * 保存流程
     * @param {?} content
     * @param {?} processInfo
     * @param {?} state
     * @return {?}
     */
    ProcessDesignerDataService.prototype.saveProcess = /**
     * 保存流程
     * @param {?} content
     * @param {?} processInfo
     * @param {?} state
     * @return {?}
     */
    function (content, processInfo, state) {
        if (content) {
            /** @type {?} */
            var postData = {
                organization: processInfo.procOrg ? processInfo.procOrg.orgId : '',
                organizationName: processInfo.procOrg ? processInfo.procOrg.orgName : '',
                accessLevel: processInfo.accessLevel,
                procContent: content,
                state: state
            };
            /** @type {?} */
            var url = this.util.getProcessDefinitionWebApi();
            return this.http.post(url, JSON.stringify(postData));
        }
    };
    /**
     * @param {?} info
     * @return {?}
     */
    ProcessDesignerDataService.prototype.auditProcessDef = /**
     * @param {?} info
     * @return {?}
     */
    function (info) {
        /** @type {?} */
        var url = '/api/runtime/wf/v1.0/dtProcDefs/auditProcessDef';
        this.http.post(url, info).subscribe((/**
         * @param {?} re
         * @return {?}
         */
        function (re) { }));
    };
    /**
     * 发布流程
     * @param content
     */
    /**
     * 发布流程
     * @param {?} content
     * @return {?}
     */
    ProcessDesignerDataService.prototype.deployProcess = /**
     * 发布流程
     * @param {?} content
     * @return {?}
     */
    function (content) {
        if (content) {
            /** @type {?} */
            var postData = {
                procDefContent: content
            };
            /** @type {?} */
            var url = this.util.deployWebApi();
            return this.http.post(url, JSON.stringify(postData));
        }
    };
    /**
     * @param {?} content
     * @param {?} procDefId
     * @return {?}
     */
    ProcessDesignerDataService.prototype.saveRTProcess = /**
     * @param {?} content
     * @param {?} procDefId
     * @return {?}
     */
    function (content, procDefId) {
        if (content) {
            /** @type {?} */
            var postData = {
                procDefContent: content
            };
            /** @type {?} */
            var url = this.util.getRTProcessDefinitionWebApi();
            url += "/" + procDefId + "/adjust";
            return this.http.post(url, JSON.stringify(postData));
        }
    };
    /**
     * @param {?} content
     * @param {?} rtProcessInfo
     * @return {?}
     */
    ProcessDesignerDataService.prototype.syncDtProcess = /**
     * @param {?} content
     * @param {?} rtProcessInfo
     * @return {?}
     */
    function (content, rtProcessInfo) {
        if (content) {
            /** @type {?} */
            var postData = {
                organization: rtProcessInfo.procOrg ? rtProcessInfo.procOrg.orgId : '',
                organizationName: rtProcessInfo.procOrg ? rtProcessInfo.procOrg.orgName : '',
                accessLevel: rtProcessInfo.accessLevel || 'public',
                procContent: content,
                state: 0
            };
            /** @type {?} */
            var url = '/api/runtime/wf/v1.0/dtProcDefs';
            return this.http.post(url, JSON.stringify(postData));
        }
    };
    ProcessDesignerDataService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    ProcessDesignerDataService.ctorParameters = function () { return [
        { type: HttpService },
        { type: ProcessDeUtil }
    ]; };
    return ProcessDesignerDataService;
}());
export { ProcessDesignerDataService };
if (false) {
    /**
     * @type {?}
     * @private
     */
    ProcessDesignerDataService.prototype.http;
    /**
     * @type {?}
     * @private
     */
    ProcessDesignerDataService.prototype.util;
}
//# sourceMappingURL=data:application/json;base64,