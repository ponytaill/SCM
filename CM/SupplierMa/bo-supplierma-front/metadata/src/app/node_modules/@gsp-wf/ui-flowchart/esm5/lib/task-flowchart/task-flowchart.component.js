/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, ViewChild, ElementRef, Input, Output, EventEmitter, HostBinding, ChangeDetectorRef, Optional, Injector } from '@angular/core';
import { DomSanitizer } from '@angular/platform-browser';
import { forkJoin } from 'rxjs';
import { UiFlowchartService } from '../services/ui-flowchart.service';
import { WFFlowchartService } from '../wf-flowchart.service';
import { MessagerService } from '@farris/ui-messager';
import { FrameworkService } from '@gsp-sys/rtf-common';
var UIFlowchartComponent = /** @class */ (function () {
    function UIFlowchartComponent(sanitizer, service, changeDetector, injector, chartService) {
        var _this = this;
        this.sanitizer = sanitizer;
        this.service = service;
        this.changeDetector = changeDetector;
        this.injector = injector;
        this.chartService = chartService;
        // 消息监听处理方法
        this.cls = 'd-flex flex-fill h-100';
        this.modalHide = new EventEmitter();
        this.fcHtml = window.document.location.origin + '/platform/runtime/wf/web/designer/flowchart.html';
        this.theme = 'viewFlowChart';
        this._mode = 'complete';
        this.modeButton = this.service.getI18nValue('static.flowchart.simulation');
        this.typeList = [{
                value: 'complete', text: this.service.getI18nValue('static.flowchart.complete')
            },
            {
                value: 'simulation', text: this.service.getI18nValue('static.flowchart.simulation')
            }];
        // 监听事件处理
        this.eventHandler = function (event) {
            /** @type {?} */
            var origin = event.origin;
            /** @type {?} */
            var message = event.data;
            if (_this.fcHtml.search(origin) > -1) {
                switch (message.action) {
                    case 'load':
                        _this.viewFlowChart();
                        break;
                    case 'viewLogs':
                        _this.viewLogs(message.data);
                        break;
                    case 'viewParent':
                        _this.viewParent(message.data.superProcInstId);
                        break;
                    case 'viewChild':
                        _this.viewChild(message.data.superActInstId, message.data.superProcInstId);
                        break;
                    case 'viewForm':
                        _this.viewForm(message.data.procInstId, message.data.actInstId, message.data.bizInstId);
                        break;
                    case 'retryAifCreation':
                        _this.retryAifCreation(message.data.procInstId, message.data.actInstId, message.data.bizInstId);
                        break;
                    default:
                        break;
                }
            }
        };
        this.message = this.injector.get(MessagerService);
        this.frameworkSvc = this.injector.get(FrameworkService);
        this.srcUrl = this.sanitizer.bypassSecurityTrustResourceUrl(this.fcHtml);
        if (UIFlowchartComponent.func) {
            window.removeEventListener('message', UIFlowchartComponent.func, false);
        }
        this.addMessageListener();
    }
    Object.defineProperty(UIFlowchartComponent.prototype, "mode", {
        get: /**
         * @return {?}
         */
        function () {
            return this._mode;
        },
        set: /**
         * @param {?} v
         * @return {?}
         */
        function (v) {
            this._mode = v;
            if (this._mode === 'simulation') {
                this.ifForecast = 'true';
                this.modeButton = this.service.getI18nValue('static.flowchart.complete');
            }
            else if (this._mode === 'complete') {
                this.modeButton = this.service.getI18nValue('static.flowchart.simulation');
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(UIFlowchartComponent.prototype, "ProcInstId", {
        set: /**
         * @param {?} procInstId
         * @return {?}
         */
        function (procInstId) {
            if (procInstId) {
                this.procInstId = procInstId;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(UIFlowchartComponent.prototype, "DataId", {
        set: /**
         * @param {?} dataId
         * @return {?}
         */
        function (dataId) {
            if (dataId) {
                this.dataId = dataId;
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    UIFlowchartComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
    };
    /**
     * @private
     * @return {?}
     */
    UIFlowchartComponent.prototype.addMessageListener = /**
     * @private
     * @return {?}
     */
    function () {
        window.addEventListener('message', this.eventHandler, false);
        UIFlowchartComponent.func = this.eventHandler;
    };
    /**
     * @private
     * @return {?}
     */
    UIFlowchartComponent.prototype.viewFlowChart = /**
     * @private
     * @return {?}
     */
    function () {
        if (this.theme === 'viewFlowChart') {
            this.viewFlowChartByProcInstId();
        }
        else {
            this.processForecast();
        }
    };
    /**
     * @private
     * @param {?} superProcInstId
     * @return {?}
     */
    UIFlowchartComponent.prototype.viewParent = /**
     * @private
     * @param {?} superProcInstId
     * @return {?}
     */
    function (superProcInstId) {
        // this.procInstId = superProcInstId;
        // this.viewFlowChartByProcInstId();
    };
    /**
     * @private
     * @param {?} superActInstId
     * @param {?} superProcInstId
     * @return {?}
     */
    UIFlowchartComponent.prototype.viewChild = /**
     * @private
     * @param {?} superActInstId
     * @param {?} superProcInstId
     * @return {?}
     */
    function (superActInstId, superProcInstId) {
        var _this = this;
        this.service.getSubProcessInstance(superActInstId, superProcInstId)
            .subscribe(function (re) {
            if (_this.chartService) {
                _this.chartService.viewFlowChartByDialog(re.id, _this.mode);
            }
            else {
                throw Error('请升级查看流程公共包实现联查子流程图功能');
            }
        });
    };
    /**
     * @return {?}
     */
    UIFlowchartComponent.prototype.modeSwitch = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.mode === 'complete') {
            this.mode = 'simulation';
            this.ifForecast = 'true';
            this.modeButton = this.service.getI18nValue('static.flowchart.complete');
            this.service.getForecastProcessByProcInstId(this.procInstId).subscribe(function (r) {
                _this.actInstList = r.activityInstanceSlims;
                _this.transInsList = r.transitionInstanceSlims;
                _this.postMessage('modeSwitch', {
                    mode: 'simulation',
                    actiInstList: r.activityInstanceSlims,
                    transInsList: r.transitionInstanceSlims
                });
            });
        }
        else {
            this.mode = 'complete';
            this.ifForecast = 'false';
            this.modeButton = this.service.getI18nValue('static.flowchart.simulation');
            this.service.getCompleteProcessInfoByProcInstId(this.procInstId).subscribe(function (r) {
                _this.actInstList = r.activityInstanceSlims;
                _this.transInsList = r.transitionInstanceSlims;
                _this.postMessage('modeSwitch', {
                    mode: 'complete',
                    actiInstList: r.activityInstanceSlims,
                    transInsList: r.transitionInstanceSlims
                });
            });
        }
    };
    /**
     * @private
     * @param {?} data
     * @return {?}
     */
    UIFlowchartComponent.prototype.viewLogs = /**
     * @private
     * @param {?} data
     * @return {?}
     */
    function (data) {
        this.type = data.type;
        this.actDefId = data.actiDefId;
    };
    /**
     * @private
     * @return {?}
     */
    UIFlowchartComponent.prototype.viewFlowChartByProcInstId = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        this.content = '';
        if (this.procInstId) {
            if (this.mode === 'complete') {
                forkJoin(this.service.getProcInstanceById(this.procInstId), this.service.getBpmnModelbyProcInstId(this.procInstId), this.service.getCompleteProcessInfoByProcInstId(this.procInstId))
                    .subscribe(function (data) {
                    _this.processInstance = data[0];
                    _this.content = JSON.stringify(data[1]);
                    _this.actInstList = data[2].activityInstanceSlims;
                    _this.transInsList = data[2].transitionInstanceSlims;
                    _this.loadFlowChart();
                });
            }
            else {
                forkJoin(this.service.getProcInstanceById(this.procInstId), this.service.getBpmnModelbyProcInstId(this.procInstId), this.service.getForecastProcessByProcInstId(this.procInstId))
                    .subscribe(function (data) {
                    _this.processInstance = data[0];
                    _this.content = JSON.stringify(data[1]);
                    _this.actInstList = data[2].activityInstanceSlims;
                    _this.transInsList = data[2].transitionInstanceSlims;
                    _this.loadFlowChart();
                });
            }
        }
    };
    /**
     * @private
     * @return {?}
     */
    UIFlowchartComponent.prototype.processForecast = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        this.content = '';
        this.mode = 'simulation';
        // this.ifForecast = true;
        if (this.processForecastPayload.processDefinitionId && this.processForecastPayload.dataId) {
            forkJoin(this.service.getBpmnModelbyProcDefId(this.processForecastPayload.processDefinitionId), this.service.getForecastProcessByPayload(this.processForecastPayload))
                .subscribe(function (data) {
                _this.content = JSON.stringify(data[0]);
                _this.actInstList = data[1].activityInstanceSlims;
                _this.transInsList = data[1].transitionInstanceSlims;
                _this.loadFlowChart();
            });
        }
    };
    /**
     * @private
     * @param {?} procInstId
     * @param {?} actInstId
     * @param {?} bizInstId
     * @return {?}
     */
    UIFlowchartComponent.prototype.viewForm = /**
     * @private
     * @param {?} procInstId
     * @param {?} actInstId
     * @param {?} bizInstId
     * @return {?}
     */
    function (procInstId, actInstId, bizInstId) {
        var _this = this;
        if (procInstId) {
            this.service.getFormInfoByActInstId(procInstId, actInstId).subscribe(function (re) {
                /** @type {?} */
                var formInfo = re;
                if (!formInfo || !formInfo.appId) {
                    if (_this.message) {
                        _this.message.info('找不到单据，请联系管理员查看原因！');
                    }
                    return;
                }
                /** @type {?} */
                var options = {
                    appType: 'menu',
                    funcId: formInfo.appId,
                    appId: '',
                    appEntrance: '',
                    tabId: bizInstId,
                    isNewTab: true
                };
                // 传工作流上下文参数
                /** @type {?} */
                var parameters = new Map();
                parameters.set('procInstId', procInstId);
                parameters.set('actInstId', actInstId);
                formInfo.parameters.forEach(function (item) {
                    return parameters.set(item.code, item.value);
                });
                options.queryStringParams = parameters;
                if (_this.frameworkSvc) {
                    _this.frameworkSvc.openMenu(options);
                }
                else {
                    throw Error('框架服务不存在！无法联查！');
                }
            });
        }
    };
    /**
     * @private
     * @param {?} procInstId
     * @param {?} actInstId
     * @param {?} bizInstId
     * @return {?}
     */
    UIFlowchartComponent.prototype.retryAifCreation = /**
     * @private
     * @param {?} procInstId
     * @param {?} actInstId
     * @param {?} bizInstId
     * @return {?}
     */
    function (procInstId, actInstId, bizInstId) {
        var _this = this;
        if (procInstId) {
            this.service.retryAifCreation(procInstId, actInstId, bizInstId).subscribe(function (re) {
                _this.viewFlowChart();
            }, function (err) {
                setTimeout(function () {
                    //todo 确定异常结构, 目前采用兼容取值方式
                    _this.message.error(err.error == null ? err.message : (err.error.Message || err.error.message || err.message));
                }, 300);
                throw err;
            });
        }
    };
    /**
     * @return {?}
     */
    UIFlowchartComponent.prototype.loadFlowChart = /**
     * @return {?}
     */
    function () {
        if (this.content) {
            this.postMessage('load', {
                processInstance: this.processInstance,
                content: this.content,
                actiInstList: this.actInstList,
                transInsList: this.transInsList,
                mode: this.mode
            });
        }
    };
    /**
     * @param {?} action
     * @param {?} data
     * @return {?}
     */
    UIFlowchartComponent.prototype.postMessage = /**
     * @param {?} action
     * @param {?} data
     * @return {?}
     */
    function (action, data) {
        /** @type {?} */
        var message = { action: action, data: data };
        this.iframe.nativeElement.contentWindow.postMessage(message, this.fcHtml);
    };
    /**
     * @return {?}
     */
    UIFlowchartComponent.prototype.fill = /**
     * @return {?}
     */
    function () {
        this.cls = 'd-flex flex-fill h-100 f-utils-absolute-all';
    };
    UIFlowchartComponent.func = null; // 消息监听处理方法
    UIFlowchartComponent.decorators = [
        { type: Component, args: [{
                    selector: 'wf-flowchart',
                    template: "<layout [direction]=\"'h'\" [fill]=\"true\">\r\n    <layout-panel region=\"west\" [showBorder]=\"false\" [minWidth]=\"400\" style=\"width: 70%;\">\r\n        <farris-section [mainTitle]=\"'static.flowchart.flowChart' | translate\" [enableMaximize]=\"false\"\r\n            [enableAccordion]=\"false\" [fill]=\"true\" style=\"height: 100%;\" class=\"px-0 pb-0\">\r\n            <ng-template farrisSectionToolbar>   \r\n                <button *ngIf=\"theme==='viewFlowChart'\" class=\"btn btn-secondary mr-2\" (click)=\"modeSwitch()\">{{modeButton}}</button>\r\n                <div class=\"btn-group\" fDropdown>\r\n                    <button class=\"btn btn-secondary dropdown-toggle\" fDropdownToggle type=\"button\">\r\n                        {{'static.flowchart.sequenceColor' | translate}}\r\n                    </button>\r\n                    <div class=\"dropdown-menu\" fDropdownMenu>\r\n                        <table class=\"mx-2\">\r\n                            <tbody>\r\n                                <tr>\r\n                                    <td style=\"width:25px;\"><span\r\n                                            style=\"background:#595959;color:#fff;border-radius:0;display: block;width:15px;height:15px;\"></span>\r\n                                    </td>\r\n                        \r\n                                    <td style=\"width:60px;\">{{'static.flowchart.completed' | translate}}</td>\r\n                                </tr>\r\n                                <tr>\r\n                                    <td style=\"width:25px;\"><span\r\n                                            style=\"background:#f59c24;color:#fff;border-radius:0;display: block;width:15px;height:15px;\"></span>\r\n                                    </td>\r\n                                    <td style=\"width:60px;\">{{'static.flowchart.calculate' | translate}}</td>\r\n                                </tr>\r\n                                <tr>\r\n                                    <td style=\"width:25px;\"><span\r\n                                            style=\"background:#59A1FF;color:#fff;border-radius:0;display: block;width:15px;height:15px;\"></span>\r\n                                    </td>\r\n                                    <td style=\"width:60px;\">{{'static.flowchart.default' | translate}}</td>\r\n                                </tr>\r\n                                <tr>\r\n                                    <td style=\"width:25px;\"><span\r\n                                            style=\"background:#FF4040;color:#fff;border-radius:0;display: block;width:15px;height:15px;\"></span>\r\n                                    </td>\r\n                                    <td style=\"width:60px;\">{{'static.flowchart.suspend' | translate}}</td>\r\n                                </tr>\r\n                            </tbody>\r\n                        </table>\r\n                    </div>\r\n                </div>\r\n\r\n            </ng-template>\r\n            <div *ngIf=\"dataId || procInstId || processForecastPayload\" style=\"height: 100%;\">\r\n                <iframe #iframe class=\"flowChart\" [src]=\"srcUrl\" frameborder=\"0\">\r\n                </iframe>\r\n            </div>\r\n        </farris-section>\r\n    </layout-panel>\r\n    <layout-panel region=\"center\" [showBorder]=\"false\" [minWidth]=\"300\" style=\"overflow: auto; width: 30%;\">\r\n        <farris-section [enableMaximize]=\"false\" [enableAccordion]=\"false\" [showHeader]=\"false\" class=\"px-0\">\r\n            <wf-approval-logs\r\n                [ProcInstId]=\"procInstId\"\r\n                [DataId]=\"dataId\" \r\n                [IfForecast]=\"ifForecast\"\r\n                [ActivityDefinitionId]=\"actDefId\" \r\n                [Type]=\"type\"\r\n                [processForecastPayload] = \"processForecastPayload\"\r\n                [ShowHeader]=\"true\"\r\n                [ShowViewProcess]=\"false\"\r\n            >\r\n            </wf-approval-logs>\r\n        </farris-section>\r\n    </layout-panel>\r\n</layout>\r\n\r\n",
                    styles: ["::ng-deep .chartModal .ant-modal{height:100%}::ng-deep .chartModal .ant-modal-content{height:100%}::ng-deep .chartModal .ant-modal-body{height:90%}.flowChart{height:100%;min-height:400px;width:100%}"]
                }] }
    ];
    /** @nocollapse */
    UIFlowchartComponent.ctorParameters = function () { return [
        { type: DomSanitizer },
        { type: UiFlowchartService },
        { type: ChangeDetectorRef },
        { type: Injector },
        { type: WFFlowchartService, decorators: [{ type: Optional }] }
    ]; };
    UIFlowchartComponent.propDecorators = {
        cls: [{ type: HostBinding, args: ['class',] }],
        iframe: [{ type: ViewChild, args: ['iframe',] }],
        modalHide: [{ type: Output }],
        theme: [{ type: Input }],
        processForecastPayload: [{ type: Input }],
        mode: [{ type: Input }],
        ProcInstId: [{ type: Input }],
        DataId: [{ type: Input }]
    };
    return UIFlowchartComponent;
}());
export { UIFlowchartComponent };
if (false) {
    /** @type {?} */
    UIFlowchartComponent.func;
    /** @type {?} */
    UIFlowchartComponent.prototype.cls;
    /** @type {?} */
    UIFlowchartComponent.prototype.iframe;
    /** @type {?} */
    UIFlowchartComponent.prototype.modalHide;
    /** @type {?} */
    UIFlowchartComponent.prototype.procInstId;
    /** @type {?} */
    UIFlowchartComponent.prototype.dataId;
    /** @type {?} */
    UIFlowchartComponent.prototype.actDefId;
    /** @type {?} */
    UIFlowchartComponent.prototype.ifForecast;
    /** @type {?} */
    UIFlowchartComponent.prototype.type;
    /** @type {?} */
    UIFlowchartComponent.prototype.srcUrl;
    /** @type {?} */
    UIFlowchartComponent.prototype.content;
    /** @type {?} */
    UIFlowchartComponent.prototype.actInstList;
    /** @type {?} */
    UIFlowchartComponent.prototype.transInsList;
    /** @type {?} */
    UIFlowchartComponent.prototype.processInstance;
    /** @type {?} */
    UIFlowchartComponent.prototype.fcHtml;
    /** @type {?} */
    UIFlowchartComponent.prototype.theme;
    /** @type {?} */
    UIFlowchartComponent.prototype.processForecastPayload;
    /**
     * @type {?}
     * @private
     */
    UIFlowchartComponent.prototype._mode;
    /** @type {?} */
    UIFlowchartComponent.prototype.modeButton;
    /** @type {?} */
    UIFlowchartComponent.prototype.typeList;
    /**
     * @type {?}
     * @private
     */
    UIFlowchartComponent.prototype.message;
    /**
     * @type {?}
     * @private
     */
    UIFlowchartComponent.prototype.frameworkSvc;
    /** @type {?} */
    UIFlowchartComponent.prototype.eventHandler;
    /**
     * @type {?}
     * @private
     */
    UIFlowchartComponent.prototype.sanitizer;
    /**
     * @type {?}
     * @private
     */
    UIFlowchartComponent.prototype.service;
    /**
     * @type {?}
     * @private
     */
    UIFlowchartComponent.prototype.changeDetector;
    /**
     * @type {?}
     * @private
     */
    UIFlowchartComponent.prototype.injector;
    /**
     * @type {?}
     * @private
     */
    UIFlowchartComponent.prototype.chartService;
}
//# sourceMappingURL=data:application/json;base64,