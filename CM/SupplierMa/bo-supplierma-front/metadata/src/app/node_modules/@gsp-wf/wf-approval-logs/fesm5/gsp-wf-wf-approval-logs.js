import { MessagerService } from '@farris/ui-messager';
import { BsModalService } from '@farris/ui-modal';
import { Component, Input, HostBinding, Injectable, Injector, ComponentFactoryResolver, Pipe, NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';
import { FileListModule } from '@gsp-svc/file-viewer';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var en = {
    static: {
        approvalLogs: {
            title: 'Approval Logs',
            approvalOpinion: 'Approval opinion',
            startTime: 'StartTime',
            endTime: 'EndTime',
            processTime: 'ProcessTime',
            todo: 'Todo',
            done: 'Done',
            undo: 'Undo',
            toAssign: 'To assign',
            toRead: 'To read',
            processNotFound: 'process instance id is null',
            workItemNotFound: 'work item id is null',
            attachment: 'attachment',
            noResolvedUser: 'No Resolved User',
            terminal: 'From',
            web: 'Web',
            mobile: 'Mobile',
            submit: 'Submit'
        },
        flowchart: {
            title: 'Flow Chart',
            processNotFound: 'process instance id is null'
        }
    }
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var zh_CHS = {
    static: {
        approvalLogs: {
            title: '审批记录',
            approvalOpinion: '审批意见',
            startTime: '接收时间',
            endTime: '处理时间',
            processTime: '处理时长',
            todo: '待办理',
            done: '已办理',
            undo: '未分配',
            toAssign: '未指派',
            toRead: '待阅',
            processNotFound: '流程实例ID为空',
            workItemNotFound: '工作项ID为空',
            attachment: '附件',
            noResolvedUser: '未解析出用户',
            terminal: '来自',
            web: '电脑端',
            mobile: '移动端',
            submit: '已提交'
        },
        flowchart: {
            title: '查看流程',
            processNotFound: '流程实例ID为空'
        }
    }
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var zh_CHT = {
    static: {
        approvalLogs: {
            title: '審批記錄',
            approvalOpinion: '審批意見',
            startTime: '接收時間',
            endTime: '處理時間',
            processTime: '處理時長',
            todo: '待辦理',
            done: '已辦理',
            undo: '未分配',
            toAssign: '未指派',
            toRead: '待阅',
            processNotFound: '流程實例ID為空',
            workItemNotFound: '工作項ID為空',
            attachment: '附件',
            noResolvedUser: '未解析出用戶',
            terminal: '來自',
            web: '電腦端',
            mobile: '移動端',
            submit: '已提交'
        },
        flowchart: {
            title: '查看流程',
            processNotFound: '流程實例ID為空'
        }
    }
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var translate = {
    'zh-CHS': zh_CHS,
    'en': en,
    'zh-CHT': zh_CHT
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var WfApprovalLogsComponent = /** @class */ (function () {
    function WfApprovalLogsComponent() {
        // 流程实例id
        this.ifForecast = false; // 是否预测日志
        // 是否预测日志
        this.cls = ''; // 弹框显示时，增加样式
        // 弹框显示时，增加样式
        this.ShowHeader = false; //是否显示日志头部
        //是否显示日志头部
        this.ShowViewProcess = false; //是否显示查看流程按钮
    }
    Object.defineProperty(WfApprovalLogsComponent.prototype, "DataId", {
        set: 
        //日志容器
        /**
         * @param {?} dataId
         * @return {?}
         */
        function (dataId) {
            if (dataId) {
                this.dataId = dataId;
                this.getTaskLogs();
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(WfApprovalLogsComponent.prototype, "ProcInstId", {
        set: /**
         * @param {?} procInstId
         * @return {?}
         */
        function (procInstId) {
            if (procInstId) {
                this.procInstId = procInstId;
                this.getTaskLogs();
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(WfApprovalLogsComponent.prototype, "ActivityDefinitionId", {
        set: /**
         * @param {?} actDefId
         * @return {?}
         */
        function (actDefId) {
            if (actDefId) {
                this.getTaskLogs(actDefId);
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(WfApprovalLogsComponent.prototype, "IfForecast", {
        set: /**
         * @param {?} ifForecast
         * @return {?}
         */
        function (ifForecast) {
            if (ifForecast) {
                this.ifForecast = ifForecast == 'true' ? true : false;
                this.getTaskLogs();
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(WfApprovalLogsComponent.prototype, "Type", {
        set: /**
         * @param {?} type
         * @return {?}
         */
        function (type) {
            if (type === 'process') { // type = 'process'查看流程日志；type = 'activity'，查看节点日志
                this.getTaskLogs();
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(WfApprovalLogsComponent.prototype, "processForecastPayload", {
        set: /**
         * @param {?} payload
         * @return {?}
         */
        function (payload) {
            if (payload) {
                this.ifForecast = true;
                this.getTaskLogs('', payload);
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    WfApprovalLogsComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        // this.getTaskLogs();
    };
    /**
     * @return {?}
     */
    WfApprovalLogsComponent.prototype.fill = /**
     * @return {?}
     */
    function () {
        this.cls = 'd-flex flex-fill h-100 f-utils-absolute-all p-4';
    };
    /**
     * @private
     * @param {?=} actDefId
     * @param {?=} wfForecastPayload
     * @return {?}
     */
    WfApprovalLogsComponent.prototype.getTaskLogs = /**
     * @private
     * @param {?=} actDefId
     * @param {?=} wfForecastPayload
     * @return {?}
     */
    function (actDefId, wfForecastPayload) {
        var _this = this;
        if (this.dataId || this.procInstId || wfForecastPayload) {
            System.import('/platform/runtime/wf/webapp/mobiletaskcenter/taskComment.js?v=20211022').then(function () {
                if (_this.dataId) {
                    _this.logContainer = window.document.querySelector('.dataId' + _this.dataId);
                }
                else {
                    _this.logContainer = window.document.querySelector('.procInstId' + _this.procInstId);
                }
                /** @type {?} */
                var payload = {
                    bizInstId: _this.dataId,
                    processInstanceId: _this.procInstId,
                    activityDefinitionId: actDefId,
                    container: _this.logContainer,
                    terminal: 'web',
                    typeId: 'wf',
                    ifForecast: _this.ifForecast,
                    showHeader: _this.ShowHeader,
                    showViewProcess: _this.ShowViewProcess,
                    isIncludeHistory: false,
                    wfForecastPayload: wfForecastPayload
                };
                ((/** @type {?} */ (window))).gspTaskCenterBizLog.ApprovalLogUtil.getWebLogsHtml(payload).then(function (result) { });
            });
        }
    };
    WfApprovalLogsComponent.decorators = [
        { type: Component, args: [{
                    selector: 'wf-approval-logs',
                    template: "<div\r\n  [class]=\"dataId ? 'dataId' + dataId : 'procInstId' + procInstId\"\r\n  style=\"width: 100%; height: 100%; overflow: auto\"\r\n></div>\r\n",
                    styles: [".approval-log-background{width:100%;background:#f9f9f9;padding:16px 14px;border-radius:4px}.log-activity-name{font-size:14px}.receive-time{font-size:12px;-webkit-columns:#565656;-moz-columns:#565656;columns:#565656;padding-left:40px;white-space:nowrap;color:#a1a1a1}.log-creator-name{font-size:14px;color:#4297fa;text-align:left}.log-action-name-do{font-size:12px;color:#fff;margin-left:40px;margin-right:16px;border-radius:10px;padding:2px 8px;background:#59a1ff;white-space:nowrap;float:right}.log-action-name-todo{font-size:12px;color:#fff;margin-left:40px;margin-right:16px;border-radius:10px;padding:2px 8px;background:#f59c24;white-space:nowrap;float:right}.log-action-name-undo{font-size:12px;color:#fff;margin-left:40px;margin-right:16px;border-radius:10px;padding:2px 8px;background:#5ac1c3;white-space:nowrap;float:right}.work-item-state-done{font-size:13px;border-radius:2px;padding:0 10px;background:#f6faff;margin-left:20px;color:#5f637a;border:1px solid #e6e6e6}.timeline-item{position:relative;padding:0 0 14px 10px;margin:0;font-size:14px;list-style:none}.timeline-item-tail{position:absolute;top:.75em;left:7px;height:100%;border-left:2px dashed #e8e8e8}.timeline-item-head-blue{position:absolute;width:16px;height:16px;background-color:#388fff;border:4px solid #bdd9ff;border-radius:100px;left:0;top:10px}.timeline-item-head-green{position:absolute;width:16px;height:16px;background-color:#5ac1c3;border:4px solid #7fffd4;border-radius:100px;left:0;top:10px}.timeline-item-head-yellow{position:absolute;width:16px;height:16px;background-color:#f59c24;border:4px solid #fbd7a7;border-radius:100px;left:0;top:10px}.timeline-item-content{position:relative;top:-6px;margin:0 0 0 18px}.user-avatar{height:30px;width:30px;border-radius:50%}li{list-style:none}.wf-docFile{flex-shrink:1;flex-grow:1;flex-basis:0;display:flex;flex-direction:row;align-items:flex-start;border-top:1px solid #f8f9fa;border-left:1px solid #f8f9fa}.wf-docFileIcon{width:20px;height:20px;line-height:20px;text-align:center;overflow:hidden;white-space:nowrap;padding:2px}.wf-docFileInfo{flex-shrink:1;flex-grow:1;flex-basis:0;padding:2px 6px 0 0;margin-left:0}.wf-docFileSize{font-size:11px;color:#888}.wf-doc-delete{margin:auto;font-size:18px;color:#f8f9fa}.attachment-delete:hover{color:#4297fa}.approval-log-message{font-size:14px;padding:10px 0 10px 40px}.approval-log-signature{padding-left:40px;display:flex;justify-content:flex-end}.approval-log-user-name{display:flex;align-items:center;justify-content:space-between;padding-top:14px}.log-attachment-array{padding-top:10px;padding-left:40px}.log-attachment-file-name{font-size:12px;color:#4297fa;float:left;cursor:pointer;margin-left:5px}"]
                }] }
    ];
    /** @nocollapse */
    WfApprovalLogsComponent.ctorParameters = function () { return []; };
    WfApprovalLogsComponent.propDecorators = {
        cls: [{ type: HostBinding, args: ['class',] }],
        ShowHeader: [{ type: Input }],
        ShowViewProcess: [{ type: Input }],
        DataId: [{ type: Input }],
        ProcInstId: [{ type: Input }],
        ActivityDefinitionId: [{ type: Input }],
        IfForecast: [{ type: Input }],
        Type: [{ type: Input }],
        processForecastPayload: [{ type: Input }]
    };
    return WfApprovalLogsComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var WfApprovalLogsService = /** @class */ (function () {
    function WfApprovalLogsService(msgService, injector, resolver, modalService) {
        var _this = this;
        this.msgService = msgService;
        this.injector = injector;
        this.resolver = resolver;
        this.modalService = modalService;
        //SPA模式下，点击附件，窗口关闭
        window.addEventListener("message", function (event) {
            if (window.document.location.origin.search(event.origin) > -1) {
                if (event.data == 'TaskCloseLogDialog' && _this.dialog) {
                    _this.dialog.close();
                }
            }
        }, false);
    }
    /**
     * @param {?} procInstId
     * @return {?}
     */
    WfApprovalLogsService.prototype.showByProcInstId = /**
     * @param {?} procInstId
     * @return {?}
     */
    function (procInstId) {
        if (!procInstId) {
            this.msgService.warning(this.getI18nValue('static.approvalLogs.processNotFound'));
        }
        else {
            /** @type {?} */
            var modalConfig = {
                title: this.getI18nValue('static.approvalLogs.title'),
                width: 550,
                height: 520,
                showButtons: false,
            };
            /** @type {?} */
            var compFactory = this.resolver.resolveComponentFactory(WfApprovalLogsComponent);
            /** @type {?} */
            var compRef = compFactory.create(this.injector);
            compRef.instance.ProcInstId = procInstId;
            compRef.instance.ShowHeader = false;
            compRef.instance.ShowViewProcess = false;
            compRef.instance.fill();
            this.dialog = this.modalService.show(compRef, modalConfig);
        }
    };
    /**
     * @param {?} dataId
     * @return {?}
     */
    WfApprovalLogsService.prototype.showByDataId = /**
     * @param {?} dataId
     * @return {?}
     */
    function (dataId) {
        /** @type {?} */
        var modalConfig = {
            title: this.getI18nValue('static.approvalLogs.title'),
            width: 550,
            height: 520,
            showButtons: false,
        };
        /** @type {?} */
        var compFactory = this.resolver.resolveComponentFactory(WfApprovalLogsComponent);
        /** @type {?} */
        var compRef = compFactory.create(this.injector);
        compRef.instance.DataId = dataId;
        compRef.instance.ShowHeader = false;
        compRef.instance.ShowViewProcess = false;
        compRef.instance.fill();
        this.dialog = this.modalService.show(compRef, modalConfig);
    };
    /**
     * @private
     * @param {?} name
     * @return {?}
     */
    WfApprovalLogsService.prototype.getI18nValue = /**
     * @private
     * @param {?} name
     * @return {?}
     */
    function (name) {
        if (!name) {
            return '';
        }
        /** @type {?} */
        var defaultLang = localStorage.getItem('languageCode');
        /** @type {?} */
        var langData = defaultLang ? translate[defaultLang] : translate['zh-CHS'];
        /** @type {?} */
        var resultVal = '';
        if (name.indexOf('.') === -1) {
            resultVal = langData[name];
        }
        else {
            resultVal = name.split('.').reduce(function (obj, key) {
                if (obj) {
                    return obj[key];
                }
                else {
                    return null;
                }
            }, langData);
        }
        return resultVal;
    };
    WfApprovalLogsService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    WfApprovalLogsService.ctorParameters = function () { return [
        { type: MessagerService },
        { type: Injector },
        { type: ComponentFactoryResolver },
        { type: BsModalService }
    ]; };
    return WfApprovalLogsService;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var TranslatePipe = /** @class */ (function () {
    function TranslatePipe() {
    }
    /**
     * @param {?} name
     * @param {?=} defaultVal
     * @return {?}
     */
    TranslatePipe.prototype.transform = /**
     * @param {?} name
     * @param {?=} defaultVal
     * @return {?}
     */
    function (name, defaultVal) {
        if (defaultVal === void 0) { defaultVal = ''; }
        /** @type {?} */
        var r = this.getI18nValue(name);
        return r ? r : defaultVal;
    };
    /**
     * @param {?} name
     * @return {?}
     */
    TranslatePipe.prototype.getI18nValue = /**
     * @param {?} name
     * @return {?}
     */
    function (name) {
        if (!name) {
            return '';
        }
        /** @type {?} */
        var defaultLang = localStorage.getItem('languageCode');
        /** @type {?} */
        var langData = defaultLang ? translate[defaultLang] : translate['zh-CHS'];
        /** @type {?} */
        var resultVal = '';
        if (name.indexOf('.') === -1) {
            resultVal = langData[name];
        }
        else {
            resultVal = name.split('.').reduce(function (obj, key) {
                if (obj) {
                    return obj[key];
                }
                else {
                    return null;
                }
            }, langData);
        }
        return resultVal;
    };
    TranslatePipe.decorators = [
        { type: Pipe, args: [{ name: 'translate' },] }
    ];
    /** @nocollapse */
    TranslatePipe.ctorParameters = function () { return []; };
    return TranslatePipe;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var WfApprovalLogsModule = /** @class */ (function () {
    function WfApprovalLogsModule() {
    }
    WfApprovalLogsModule.decorators = [
        { type: NgModule, args: [{
                    declarations: [
                        WfApprovalLogsComponent,
                        TranslatePipe,
                    ],
                    imports: [
                        CommonModule,
                        FileListModule
                    ],
                    providers: [
                        WfApprovalLogsService,
                    ],
                    exports: [
                        WfApprovalLogsComponent
                    ],
                    entryComponents: [
                        WfApprovalLogsComponent,
                    ]
                },] }
    ];
    return WfApprovalLogsModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { WfApprovalLogsService, WfApprovalLogsComponent, WfApprovalLogsModule, TranslatePipe as ɵa };

//# sourceMappingURL=gsp-wf-wf-approval-logs.js.map