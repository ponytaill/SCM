/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Component, HostBinding, EventEmitter, Output, Input, ViewChild, TemplateRef, Injector, ComponentFactoryResolver } from '@angular/core';
import { ProcessVariable } from './process-variable.entity';
import { EditorTypes } from '@farris/ui-datagrid-editors';
import { DatagridComponent } from '@farris/ui-datagrid';
import { MessagerService } from '@farris/ui-messager';
import { BsModalService } from '@farris/ui-modal';
import { ConstantEditComponent } from '../variable-setting/views/constant-edit/constant-edit.component';
import { ProcessDesignerUIState } from '../../app/process-designer.uistate';
import { ExprEditMode, ExpressionService, InjectedType } from '@gsp-svc/expression';
import { ComponentEditComponent } from '../variable-setting/views/component-edit/component-edit.component';
import { of } from 'rxjs';
var ProcessVariablesComponent = /** @class */ (function () {
    function ProcessVariablesComponent(message, resolver, injector, modalService, uistate, expr) {
        var _this = this;
        this.message = message;
        this.resolver = resolver;
        this.injector = injector;
        this.modalService = modalService;
        this.uistate = uistate;
        this.expr = expr;
        this.cls = 'farris-main-area flex-column';
        this.variableSetting = false;
        this.closeModal = new EventEmitter();
        this.submitModal = new EventEmitter();
        this.variableSetEmitter = new EventEmitter();
        this.value = new Array();
        this.editorParams = {};
        this.basicTypes = [
            { value: 'String', text: '字符' },
            { value: 'Integer', text: '整形' },
            { value: 'Decimal', text: '小数' },
            { value: 'Boolean', text: '布尔' },
        ];
        this.tags = [
            { value: 'constant', text: '常量' },
            { value: 'expression', text: '表达式' },
            { value: 'component', text: '构件' }
        ];
        this.columns = [
            {
                field: 'name', width: 80, title: '变量编号', sortable: true,
                editor: { type: EditorTypes.TEXTBOX, options: {} },
                validators: [
                    { type: 'required', messager: '必填' }
                ]
            },
            {
                field: 'documentation', width: 80, title: '变量名称', sortable: true,
                editor: { type: EditorTypes.TEXTBOX, options: {} },
                validators: [
                    { type: 'required', messager: '必填' }
                ]
            },
            {
                field: 'basicType', width: 60, title: '变量类型', sortable: true,
                formatter: {
                    type: 'enum',
                    options: { valueField: 'value', textField: 'text', data: this.basicTypes }
                },
                editor: {
                    type: EditorTypes.COMBOLIST,
                    options: { valueField: 'value', textField: 'text', data: this.basicTypes, idField: 'value', panelHeight: 'auto', showClear: false }
                },
                validators: [
                    { type: 'required', messager: '必填' }
                ]
            }, {
                field: 'description', width: 100, title: '描述', showTips: true,
                editor: { type: EditorTypes.TEXTBOX, options: {} },
            }, {
                field: 'tag', width: 60, title: '初始值类型', sortable: true,
                formatter: {
                    type: 'enum',
                    options: { valueField: 'value', textField: 'text', data: this.tags }
                },
                editor: {
                    type: EditorTypes.COMBOLIST,
                    options: {
                        valueField: 'value', textField: 'text', data: this.tags, idField: 'value', panelHeight: 'auto',
                        selectChange: (/**
                         * @param {?} e
                         * @return {?}
                         */
                        function (e) {
                            _this.value = _this.value.map((/**
                             * @param {?} v
                             * @return {?}
                             */
                            function (v) {
                                if (v.id === e.rowId) {
                                    v.value = null;
                                    v.valueText = null;
                                    if (v.component) {
                                        v.component = null;
                                    }
                                    return v;
                                }
                                else {
                                    return v;
                                }
                            }));
                        }),
                        clear: (/**
                         * @param {?} e
                         * @return {?}
                         */
                        function (e) {
                            _this.value = _this.value.map((/**
                             * @param {?} v
                             * @return {?}
                             */
                            function (v) {
                                if (v.id === e.rowId) {
                                    v.value = null;
                                    v.valueText = null;
                                    if (v.component) {
                                        v.component = null;
                                    }
                                    return v;
                                }
                                else {
                                    return v;
                                }
                            }));
                        })
                    }
                }
            }, {
                field: 'valueText', width: 120, title: '初始值', showTips: true,
                editor: { type: EditorTypes.TEXTBOX, options: {} }
            }
        ];
        this.modalConfig = {
            title: '流程变量',
            width: 1070,
            height: 510,
            showButtons: true
        };
        this.beforeEdit = (/**
         * @param {?} param
         * @return {?}
         */
        function (param) {
            /** @type {?} */
            var rowData = (/** @type {?} */ (param.rowData));
            /** @type {?} */
            var column = param.column;
            if (column.field === 'valueText') {
                if (!((/** @type {?} */ (rowData))).tag) {
                    return of(false);
                }
                if (((/** @type {?} */ (rowData))).tag === _this.tags[0].value) {
                    param.column.editor = { type: EditorTypes.TEXTBOX, options: {} };
                }
                else {
                    param.column.editor = {
                        type: 'input-group',
                        options: {
                            groupText: '<i class="f-icon f-icon-lookup"></i>',
                            editable: false,
                            showClear: false,
                            clickHandle: (/**
                             * @param {?} e
                             * @return {?}
                             */
                            function (e) {
                                e.formControl.setValue(e.instance.value ? e.instance.value : '');
                                _this.valueEdit(e);
                            }),
                            clear: (/**
                             * @param {?} e
                             * @return {?}
                             */
                            function (e) {
                                console.log('clear', e);
                            })
                        }
                    };
                }
            }
            return of(true);
        });
    }
    /**
     * @return {?}
     */
    ProcessVariablesComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        if (this.variableSetting) {
            this.columns = this.columns.filter((/**
             * @param {?} c
             * @return {?}
             */
            function (c) { return c.field !== 'tag'
                && c.field !== 'valueText' && c.field !== 'description'; }));
        }
    };
    /**
     * @return {?}
     */
    ProcessVariablesComponent.prototype.add = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var variable = new ProcessVariable();
        this.value = this.value.concat([variable]);
    };
    /**
     * @return {?}
     */
    ProcessVariablesComponent.prototype.delete = /**
     * @return {?}
     */
    function () {
        this.grid.endCellEdit();
        /** @type {?} */
        var selected = this.grid.selectedRow;
        if (!selected) {
            this.message.info('尚未选中流程变量！');
            return;
        }
        this.value = this.value.filter((/**
         * @param {?} v
         * @return {?}
         */
        function (v) { return v.id !== selected.data.id; }));
    };
    /**
     * @return {?}
     */
    ProcessVariablesComponent.prototype.clickOK = /**
     * @return {?}
     */
    function () {
        if (this.variableSetting) {
            /** @type {?} */
            var selecteds = this.grid.checkeds;
            if (selecteds.length > 0) {
                this.variableSetEmitter.emit(selecteds);
            }
            else {
                this.message.info('尚未选中流程变量！');
            }
        }
        else {
            this.grid.endCellEdit();
            if (this.validator()) {
                /** @type {?} */
                var object = { value: this.value, parameters: null };
                this.submitModal.emit(object);
            }
        }
    };
    /**
     * @return {?}
     */
    ProcessVariablesComponent.prototype.clickCancel = /**
     * @return {?}
     */
    function () {
        this.closeModal.emit();
    };
    /**
     * @param {?} data
     * @return {?}
     */
    ProcessVariablesComponent.prototype.endEdit = /**
     * @param {?} data
     * @return {?}
     */
    function (data) {
        if (data.column.field === 'valueText' && data.rowData.tag === this.tags[0].value) {
            data.rowData.value = data.rowData.valueText;
        }
    };
    /**
     * @param {?} e
     * @return {?}
     */
    ProcessVariablesComponent.prototype.valueEdit = /**
     * @param {?} e
     * @return {?}
     */
    function (e) {
        /** @type {?} */
        var rowdata = e.rowData;
        switch (rowdata.tag) {
            case this.tags[0].value:
                this.editConstant(e);
                break;
            case this.tags[1].value:
                this.editExpression(e);
                break;
            case this.tags[2].value:
                this.editComponent(e);
                break;
        }
    };
    /**
     * @private
     * @param {?} e
     * @return {?}
     */
    ProcessVariablesComponent.prototype.editConstant = /**
     * @private
     * @param {?} e
     * @return {?}
     */
    function (e) {
        /** @type {?} */
        var data = e.rowData;
        /** @type {?} */
        var dialog;
        /** @type {?} */
        var compFactory = this.resolver.resolveComponentFactory(ConstantEditComponent);
        /** @type {?} */
        var compRef = compFactory.create(this.injector);
        compRef.instance.value = data.value;
        compRef.instance.submitEmitter.subscribe((/**
         * @param {?} re
         * @return {?}
         */
        function (re) {
            e.formControl.setValue(re);
            e.instance.cd.detectChanges();
            data.value = re;
            dialog.close();
        }));
        compRef.instance.closeEmitter.subscribe((/**
         * @param {?} re
         * @return {?}
         */
        function (re) {
            dialog.close();
        }));
        /** @type {?} */
        var modalConfig = {
            title: '常量',
            width: 340,
            height: 280,
            showButtons: true,
            buttons: compRef.instance.footer
        };
        dialog = this.modalService.show(compRef, modalConfig);
    };
    /**
     * @private
     * @param {?} e
     * @return {?}
     */
    ProcessVariablesComponent.prototype.editExpression = /**
     * @private
     * @param {?} e
     * @return {?}
     */
    function (e) {
        var e_1, _a, e_2, _b, e_3, _c, e_4, _d, e_5, _e, e_6, _f;
        /** @type {?} */
        var data = e.rowData;
        if (this.uistate.schemas.length > 0) {
            try {
                for (var _g = tslib_1.__values(this.uistate.schemas), _h = _g.next(); !_h.done; _h = _g.next()) {
                    var schema = _h.value;
                    this.expr.addSchema('Schema', schema);
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_h && !_h.done && (_a = _g.return)) _a.call(_g);
                }
                finally { if (e_1) throw e_1.error; }
            }
            if (this.uistate.schemas[0].entityTypes && this.uistate.schemas[0].entityTypes.length > 0) {
                /** @type {?} */
                var entityType = this.uistate.schemas[0].entityTypes[0];
                this.expr.addInjectedEntity(entityType.name, 'Schema', entityType.name, InjectedType.EntityType);
            }
        }
        /** @type {?} */
        var context = new Array();
        if (this.uistate.procInstContext.length > 0) {
            try {
                for (var _j = tslib_1.__values(this.uistate.procInstContext), _k = _j.next(); !_k.done; _k = _j.next()) {
                    var variable = _k.value;
                    context.push(variable);
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (_k && !_k.done && (_b = _j.return)) _b.call(_j);
                }
                finally { if (e_2) throw e_2.error; }
            }
        }
        if (this.uistate.formalParameterContext.length > 0) {
            var _loop_1 = function (variable) {
                if (!context.some((/**
                 * @param {?} c
                 * @return {?}
                 */
                function (c) { return c.key === variable.key; }))) {
                    context.push(variable);
                }
            };
            try {
                for (var _l = tslib_1.__values(this.uistate.formalParameterContext), _m = _l.next(); !_m.done; _m = _l.next()) {
                    var variable = _m.value;
                    _loop_1(variable);
                }
            }
            catch (e_3_1) { e_3 = { error: e_3_1 }; }
            finally {
                try {
                    if (_m && !_m.done && (_c = _l.return)) _c.call(_l);
                }
                finally { if (e_3) throw e_3.error; }
            }
        }
        if (this.uistate.participantContext.length > 0) {
            var _loop_2 = function (variable) {
                if (!context.some((/**
                 * @param {?} c
                 * @return {?}
                 */
                function (c) { return c.key === variable.key; }))) {
                    context.push(variable);
                }
            };
            try {
                for (var _o = tslib_1.__values(this.uistate.participantContext), _p = _o.next(); !_p.done; _p = _o.next()) {
                    var variable = _p.value;
                    _loop_2(variable);
                }
            }
            catch (e_4_1) { e_4 = { error: e_4_1 }; }
            finally {
                try {
                    if (_p && !_p.done && (_d = _o.return)) _d.call(_o);
                }
                finally { if (e_4) throw e_4.error; }
            }
        }
        if (this.uistate.processVariableContext.length > 0) {
            var _loop_3 = function (variable) {
                if (!context.some((/**
                 * @param {?} c
                 * @return {?}
                 */
                function (c) { return c.key === variable.key; }))) {
                    context.push(variable);
                }
            };
            try {
                for (var _q = tslib_1.__values(this.uistate.processVariableContext), _r = _q.next(); !_r.done; _r = _q.next()) {
                    var variable = _r.value;
                    _loop_3(variable);
                }
            }
            catch (e_5_1) { e_5 = { error: e_5_1 }; }
            finally {
                try {
                    if (_r && !_r.done && (_e = _q.return)) _e.call(_q);
                }
                finally { if (e_5) throw e_5.error; }
            }
        }
        if (context.length > 0) {
            try {
                for (var context_1 = tslib_1.__values(context), context_1_1 = context_1.next(); !context_1_1.done; context_1_1 = context_1.next()) {
                    var v = context_1_1.value;
                    this.expr.addContext(v);
                }
            }
            catch (e_6_1) { e_6 = { error: e_6_1 }; }
            finally {
                try {
                    if (context_1_1 && !context_1_1.done && (_f = context_1.return)) _f.call(context_1);
                }
                finally { if (e_6) throw e_6.error; }
            }
        }
        this.expr.setEditPattern(ExprEditMode.Advanced); // 表达式展现模式：默认高级版
        this.expr.addExpressionText(data.value);
        this.expr.buildExpression().then((/**
         * @param {?} re
         * @return {?}
         */
        function (re) {
            e.formControl.setValue(re);
            e.instance.cd.detectChanges();
            data.value = re;
        }));
    };
    /**
     * @private
     * @param {?} e
     * @return {?}
     */
    ProcessVariablesComponent.prototype.editComponent = /**
     * @private
     * @param {?} e
     * @return {?}
     */
    function (e) {
        /** @type {?} */
        var data = e.rowData;
        /** @type {?} */
        var dialog;
        /** @type {?} */
        var compFactory = this.resolver.resolveComponentFactory(ComponentEditComponent);
        /** @type {?} */
        var compRef = compFactory.create(this.injector);
        compRef.instance.component = data.component;
        compRef.instance.submitEmitter.subscribe((/**
         * @param {?} re
         * @return {?}
         */
        function (re) {
            e.formControl.setValue(re.Name + '-' + re.MethodCode);
            e.instance.cd.detectChanges();
            data.value = re.Id;
            data.component = re;
            dialog.close();
        }));
        compRef.instance.closeEmitter.subscribe((/**
         * @param {?} re
         * @return {?}
         */
        function (re) {
            dialog.close();
        }));
        /** @type {?} */
        var modalConfig = {
            title: '构件',
            width: 800,
            height: 515,
            showButtons: true,
            buttons: compRef.instance.footer
        };
        dialog = this.modalService.show(compRef, modalConfig);
    };
    /**
     * @private
     * @return {?}
     */
    ProcessVariablesComponent.prototype.validator = /**
     * @private
     * @return {?}
     */
    function () {
        var e_7, _a;
        try {
            for (var _b = tslib_1.__values(this.value), _c = _b.next(); !_c.done; _c = _b.next()) {
                var item = _c.value;
                if (!item.name) {
                    this.message.warning('变量编号不允许为空！');
                    return false;
                }
                if (!item.documentation) {
                    this.message.warning('变量名称不允许为空！');
                    return false;
                }
                if (!this.IsMatchVariableNameRules(item.name)) {
                    this.message.warning('变量编号只能包含字母、数字和下划线，且不能以数字开头！');
                    return false;
                }
            }
        }
        catch (e_7_1) { e_7 = { error: e_7_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_7) throw e_7.error; }
        }
        if (this.value.length > 1) {
            for (var i = 0; i < this.value.length; i++) {
                /** @type {?} */
                var code1 = this.value[i].name;
                for (var j = i + 1; j < this.value.length; j++) {
                    /** @type {?} */
                    var code2 = this.value[j].name;
                    if (code1 === code2) {
                        this.message.warning("\u6D41\u7A0B\u53D8\u91CF\u7F16\u53F7\u4E0D\u5141\u8BB8\u91CD\u590D\uFF01");
                        return false;
                    }
                }
            }
        }
        return true;
    };
    /**
     * @private
     * @param {?} str
     * @return {?}
     */
    ProcessVariablesComponent.prototype.IsMatchVariableNameRules = /**
     * @private
     * @param {?} str
     * @return {?}
     */
    function (str) {
        /** @type {?} */
        var Regx = /^[a-zA-Z_][a-zA-Z_0-9]{0,}/;
        if (Regx.test(str)) {
            return true;
        }
        else {
            return false;
        }
    };
    ProcessVariablesComponent.decorators = [
        { type: Component, args: [{
                    selector: 'lib-process-variables',
                    template: "<div class=\"f-page\">\r\n  <div *ngIf=\"!variableSetting\" class=\"f-page-header\">\r\n    <nav class=\"f-page-header-base\">\r\n      <div class=\"f-title\">\r\n        <span class=\"f-title-icon f-text-orna-bill\">\r\n          <i class=\"f-icon f-icon-page-title-administer\"></i>\r\n        </span>\r\n        <h4 class=\"f-title-text\">\u5217\u8868</h4>\r\n      </div>\r\n      <div class=\"btn-toolbar btn-group-lg\">\r\n        <button class=\"btn btn-primary mr-2\" (click)=\"add()\">\u65B0\u589E</button>\r\n        <button class=\"btn btn-secondary\" (click)=\"delete()\">\u5220\u9664</button>\r\n      </div>\r\n    </nav>\r\n  </div>\r\n  <div class=\"f-page-main f-utils-fill-flex-column h-100\">\r\n    <div class=\"f-utils-fill-flex-column farris-overflow-y-auto h-100\">\r\n      <farris-datagrid #grid [data]=\"value\" [columns]=\"columns\" [idField]=\"'id'\" [fit]=\"true\" [fitColumns]=\"true\"\r\n        [editable]=\"!variableSetting\" [editMode]=\"'cell'\" [pagination]=\"false\" (endEdit)=\"endEdit($event)\" [beforeEdit]=\"beforeEdit\"\r\n        [showCheckbox]=\"variableSetting\" [multiSelect]=\"variableSetting\" [checkOnSelect]=\"true\" [selectOnCheck]=\"true\" [showAllCheckbox]=\"variableSetting\"\r\n        [showLineNumber]=\"true\" [lineNumberTitle]=\"'\u5E8F\u53F7'\" [lineNumberWidth]=\"50\" [striped]=\"true\">\r\n      </farris-datagrid>\r\n    </div>\r\n  </div>\r\n</div>\r\n\r\n<ng-template #iconSelectFooter>\r\n  <button type=\"button\" class=\"btn btn-primary btn-sm px-3 mx-2\" (click)=\"clickOK()\">\u786E\u5B9A</button>\r\n  <button type=\"button\" class=\"btn btn-secondary btn-sm px-3 mx-2\" (click)=\"clickCancel()\">\u53D6\u6D88</button>\r\n</ng-template>\r\n",
                    styles: [""]
                }] }
    ];
    /** @nocollapse */
    ProcessVariablesComponent.ctorParameters = function () { return [
        { type: MessagerService },
        { type: ComponentFactoryResolver },
        { type: Injector },
        { type: BsModalService },
        { type: ProcessDesignerUIState },
        { type: ExpressionService }
    ]; };
    ProcessVariablesComponent.propDecorators = {
        cls: [{ type: HostBinding, args: ['class',] }],
        variableSetting: [{ type: Input }],
        closeModal: [{ type: Output }],
        submitModal: [{ type: Output }],
        variableSetEmitter: [{ type: Output }],
        value: [{ type: Input }],
        editorParams: [{ type: Input }],
        modalFooter: [{ type: ViewChild, args: ['iconSelectFooter',] }],
        grid: [{ type: ViewChild, args: ['grid',] }]
    };
    return ProcessVariablesComponent;
}());
export { ProcessVariablesComponent };
if (false) {
    /** @type {?} */
    ProcessVariablesComponent.prototype.cls;
    /** @type {?} */
    ProcessVariablesComponent.prototype.variableSetting;
    /** @type {?} */
    ProcessVariablesComponent.prototype.closeModal;
    /** @type {?} */
    ProcessVariablesComponent.prototype.submitModal;
    /** @type {?} */
    ProcessVariablesComponent.prototype.variableSetEmitter;
    /** @type {?} */
    ProcessVariablesComponent.prototype.value;
    /** @type {?} */
    ProcessVariablesComponent.prototype.editorParams;
    /** @type {?} */
    ProcessVariablesComponent.prototype.modalFooter;
    /** @type {?} */
    ProcessVariablesComponent.prototype.grid;
    /**
     * @type {?}
     * @private
     */
    ProcessVariablesComponent.prototype.basicTypes;
    /**
     * @type {?}
     * @private
     */
    ProcessVariablesComponent.prototype.tags;
    /** @type {?} */
    ProcessVariablesComponent.prototype.columns;
    /** @type {?} */
    ProcessVariablesComponent.prototype.modalConfig;
    /** @type {?} */
    ProcessVariablesComponent.prototype.beforeEdit;
    /**
     * @type {?}
     * @private
     */
    ProcessVariablesComponent.prototype.message;
    /**
     * @type {?}
     * @private
     */
    ProcessVariablesComponent.prototype.resolver;
    /**
     * @type {?}
     * @private
     */
    ProcessVariablesComponent.prototype.injector;
    /**
     * @type {?}
     * @private
     */
    ProcessVariablesComponent.prototype.modalService;
    /**
     * @type {?}
     * @private
     */
    ProcessVariablesComponent.prototype.uistate;
    /**
     * @type {?}
     * @private
     */
    ProcessVariablesComponent.prototype.expr;
}
var ProcessVariablesConverter = /** @class */ (function () {
    function ProcessVariablesConverter() {
    }
    /**
     * @param {?} data
     * @return {?}
     */
    ProcessVariablesConverter.prototype.convertTo = /**
     * @param {?} data
     * @return {?}
     */
    function (data) {
        if (data && data.length > 0) {
            return '（已设置）';
        }
        else {
            return '（未设置）';
        }
    };
    return ProcessVariablesConverter;
}());
export { ProcessVariablesConverter };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvY2Vzcy12YXJpYWJsZXMuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGdzcC13Zi93Zi1wcm9jZXNzLWVkaXRvci8iLCJzb3VyY2VzIjpbImxpYi92aWV3cy9wcm9jZXNzLXZhcmlhYmxlcy9wcm9jZXNzLXZhcmlhYmxlcy5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFVLFdBQVcsRUFBRSxZQUFZLEVBQUUsTUFBTSxFQUFFLEtBQUssRUFBRSxTQUFTLEVBQUUsV0FBVyxFQUFFLFFBQVEsRUFBRSx3QkFBd0IsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUV4SixPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sMkJBQTJCLENBQUM7QUFDNUQsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLDZCQUE2QixDQUFDO0FBQzFELE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBQ3hELE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUN0RCxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sa0JBQWtCLENBQUM7QUFDbEQsT0FBTyxFQUFFLHFCQUFxQixFQUFFLE1BQU0saUVBQWlFLENBQUM7QUFDeEcsT0FBTyxFQUFFLHNCQUFzQixFQUFFLE1BQU0sb0NBQW9DLENBQUM7QUFDNUUsT0FBTyxFQUFFLFlBQVksRUFBRSxpQkFBaUIsRUFBRSxZQUFZLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUNwRixPQUFPLEVBQUUsc0JBQXNCLEVBQUUsTUFBTSxtRUFBbUUsQ0FBQztBQUUzRyxPQUFPLEVBQUUsRUFBRSxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBRTFCO0lBcUhFLG1DQUNVLE9BQXdCLEVBQ3hCLFFBQWtDLEVBQ2xDLFFBQWtCLEVBQ2xCLFlBQTRCLEVBQzVCLE9BQStCLEVBQy9CLElBQXVCO1FBTmpDLGlCQU9LO1FBTkssWUFBTyxHQUFQLE9BQU8sQ0FB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LElBQUksSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUU7WUFDM0IsT0FBTyxPQUFPLENBQUM7U0FDaEI7YUFBTTtZQUNMLE9BQU8sT0FBTyxDQUFDO1NBQ2hCO0lBQ0gsQ0FBQztJQUNILGdDQUFDO0FBQUQsQ0FBQyxBQVZELElBVUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQsIE9uSW5pdCwgSG9zdEJpbmRpbmcsIEV2ZW50RW1pdHRlciwgT3V0cHV0LCBJbnB1dCwgVmlld0NoaWxkLCBUZW1wbGF0ZVJlZiwgSW5qZWN0b3IsIENvbXBvbmVudEZhY3RvcnlSZXNvbHZlciB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBUeXBlQ29udmVydGVyIH0gZnJvbSAnQGZhcnJpcy91aS1wcm9wZXJ0eS1wYW5lbCc7XHJcbmltcG9ydCB7IFByb2Nlc3NWYXJpYWJsZSB9IGZyb20gJy4vcHJvY2Vzcy12YXJpYWJsZS5lbnRpdHknO1xyXG5pbXBvcnQgeyBFZGl0b3JUeXBlcyB9IGZyb20gJ0BmYXJyaXMvdWktZGF0YWdyaWQtZWRpdG9ycyc7XHJcbmltcG9ydCB7IERhdGFncmlkQ29tcG9uZW50IH0gZnJvbSAnQGZhcnJpcy91aS1kYXRhZ3JpZCc7XHJcbmltcG9ydCB7IE1lc3NhZ2VyU2VydmljZSB9IGZyb20gJ0BmYXJyaXMvdWktbWVzc2FnZXInO1xyXG5pbXBvcnQgeyBCc01vZGFsU2VydmljZSB9IGZyb20gJ0BmYXJyaXMvdWktbW9kYWwnO1xyXG5pbXBvcnQgeyBDb25zdGFudEVkaXRDb21wb25lbnQgfSBmcm9tICcuLi92YXJpYWJsZS1zZXR0aW5nL3ZpZXdzL2NvbnN0YW50LWVkaXQvY29uc3RhbnQtZWRpdC5jb21wb25lbnQnO1xyXG5pbXBvcnQgeyBQcm9jZXNzRGVzaWduZXJVSVN0YXRlIH0gZnJvbSAnLi4vLi4vYXBwL3Byb2Nlc3MtZGVzaWduZXIudWlzdGF0ZSc7XHJcbmltcG9ydCB7IEV4cHJFZGl0TW9kZSwgRXhwcmVzc2lvblNlcnZpY2UsIEluamVjdGVkVHlwZSB9IGZyb20gJ0Bnc3Atc3ZjL2V4cHJlc3Npb24nO1xyXG5pbXBvcnQgeyBDb21wb25lbnRFZGl0Q29tcG9uZW50IH0gZnJvbSAnLi4vdmFyaWFibGUtc2V0dGluZy92aWV3cy9jb21wb25lbnQtZWRpdC9jb21wb25lbnQtZWRpdC5jb21wb25lbnQnO1xyXG5pbXBvcnQgeyBSb3dFZGl0UGFyYW0sIERhdGFDb2x1bW4gfSBmcm9tICdAZmFycmlzL3VpLWRhdGFncmlkL2xpYi90eXBlcyc7XHJcbmltcG9ydCB7IG9mIH0gZnJvbSAncnhqcyc7XHJcblxyXG5AQ29tcG9uZW50KHtcclxuICBzZWxlY3RvcjogJ2xpYi1wcm9jZXNzLXZhcmlhYmxlcycsXHJcbiAgdGVtcGxhdGVVcmw6ICcuL3Byb2Nlc3MtdmFyaWFibGVzLmNvbXBvbmVudC5odG1sJyxcclxuICBzdHlsZVVybHM6IFsnLi9wcm9jZXNzLXZhcmlhYmxlcy5jb21wb25lbnQuc2NzcyddXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBQcm9jZXNzVmFyaWFibGVzQ29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0IHtcclxuICBASG9zdEJpbmRpbmcoJ2NsYXNzJylcclxuICBjbHMgPSAnZmFycmlzLW1haW4tYXJlYSBmbGV4LWNvbHVtbic7XHJcblxyXG4gIEBJbnB1dCgpIHZhcmlhYmxlU2V0dGluZyA9IGZhbHNlO1xyXG4gIEBPdXRwdXQoKSBjbG9zZU1vZGFsID0gbmV3IEV2ZW50RW1pdHRlcjxhbnk+KCk7XHJcbiAgQE91dHB1dCgpIHN1Ym1pdE1vZGFsID0gbmV3IEV2ZW50RW1pdHRlcjxhbnk+KCk7XHJcbiAgQE91dHB1dCgpIHZhcmlhYmxlU2V0RW1pdHRlciA9IG5ldyBFdmVudEVtaXR0ZXI8YW55PigpO1xyXG5cclxuICBASW5wdXQoKSB2YWx1ZTogQXJyYXk8UHJvY2Vzc1ZhcmlhYmxlPiA9IG5ldyBBcnJheSgpO1xyXG4gIEBJbnB1dCgpIGVkaXRvclBhcmFtczogYW55ID0ge307XHJcbiAgQFZpZXdDaGlsZCgnaWNvblNlbGVjdEZvb3RlcicpIG1vZGFsRm9vdGVyOiBUZW1wbGF0ZVJlZjxhbnk+O1xyXG4gIEBWaWV3Q2hpbGQoJ2dyaWQnKSBncmlkOiBEYXRhZ3JpZENvbXBvbmVudDtcclxuXHJcbiAgcHJpdmF0ZSBiYXNpY1R5cGVzID0gW1xyXG4gICAgeyB2YWx1ZTogJ1N0cmluZycsIHRleHQ6ICflrZfnrKYnIH0sXHJcbiAgICB7IHZhbHVlOiAnSW50ZWdlcicsIHRleHQ6ICfmlbTlvaInIH0sXHJcbiAgICB7IHZhbHVlOiAnRGVjaW1hbCcsIHRleHQ6ICflsI/mlbAnIH0sXHJcbiAgICB7IHZhbHVlOiAnQm9vbGVhbicsIHRleHQ6ICfluIPlsJQnIH0sXHJcbiAgICAvLyB7IHZhbHVlOiAnRGF0ZVRpbWUnLCB0ZXh0OiAn5pel5pyfJyB9XHJcbiAgXTtcclxuXHJcbiAgcHJpdmF0ZSB0YWdzID0gW1xyXG4gICAgeyB2YWx1ZTogJ2NvbnN0YW50JywgdGV4dDogJ+W4uOmHjycgfSxcclxuICAgIHsgdmFsdWU6ICdleHByZXNzaW9uJywgdGV4dDogJ+ihqOi+vuW8jycgfSxcclxuICAgIHsgdmFsdWU6ICdjb21wb25lbnQnLCB0ZXh0OiAn5p6E5Lu2JyB9XHJcbiAgXTtcclxuXHJcbiAgY29sdW1ucyA9IFtcclxuICAgIHtcclxuICAgICAgZmllbGQ6ICduYW1lJywgd2lkdGg6IDgwLCB0aXRsZTogJ+WPmOmHj+e8luWPtycsIHNvcnRhYmxlOiB0cnVlLFxyXG4gICAgICBlZGl0b3I6IHsgdHlwZTogRWRpdG9yVHlwZXMuVEVYVEJPWCwgb3B0aW9uczoge30gfSxcclxuICAgICAgdmFsaWRhdG9yczogW1xyXG4gICAgICAgIHsgdHlwZTogJ3JlcXVpcmVkJywgbWVzc2FnZXI6ICflv4XloasnIH1cclxuICAgICAgXVxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgZmllbGQ6ICdkb2N1bWVudGF0aW9uJywgd2lkdGg6IDgwLCB0aXRsZTogJ+WPmOmHj+WQjeensCcsIHNvcnRhYmxlOiB0cnVlLFxyXG4gICAgICBlZGl0b3I6IHsgdHlwZTogRWRpdG9yVHlwZXMuVEVYVEJPWCwgb3B0aW9uczoge30gfSxcclxuICAgICAgdmFsaWRhdG9yczogW1xyXG4gICAgICAgIHsgdHlwZTogJ3JlcXVpcmVkJywgbWVzc2FnZXI6ICflv4XloasnIH1cclxuICAgICAgXVxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgZmllbGQ6ICdiYXNpY1R5cGUnLCB3aWR0aDogNjAsIHRpdGxlOiAn5Y+Y6YeP57G75Z6LJywgc29ydGFibGU6IHRydWUsXHJcbiAgICAgIGZvcm1hdHRlcjoge1xyXG4gICAgICAgIHR5cGU6ICdlbnVtJyxcclxuICAgICAgICBvcHRpb25zOiB7IHZhbHVlRmllbGQ6ICd2YWx1ZScsIHRleHRGaWVsZDogJ3RleHQnLCBkYXRhOiB0aGlzLmJhc2ljVHlwZXMgfVxyXG4gICAgICB9LFxyXG4gICAgICBlZGl0b3I6IHtcclxuICAgICAgICB0eXBlOiBFZGl0b3JUeXBlcy5DT01CT0xJU1QsXHJcbiAgICAgICAgb3B0aW9uczogeyB2YWx1ZUZpZWxkOiAndmFsdWUnLCB0ZXh0RmllbGQ6ICd0ZXh0JywgZGF0YTogdGhpcy5iYXNpY1R5cGVzLCBpZEZpZWxkOiAndmFsdWUnLCBwYW5lbEhlaWdodDogJ2F1dG8nLCBzaG93Q2xlYXI6IGZhbHNlIH1cclxuICAgICAgfSxcclxuICAgICAgdmFsaWRhdG9yczogW1xyXG4gICAgICAgIHsgdHlwZTogJ3JlcXVpcmVkJywgbWVzc2FnZXI6ICflv4XloasnIH1cclxuICAgICAgXVxyXG4gICAgfSwge1xyXG4gICAgICBmaWVsZDogJ2Rlc2NyaXB0aW9uJywgd2lkdGg6IDEwMCwgdGl0bGU6ICfmj4/ov7AnLCBzaG93VGlwczogdHJ1ZSxcclxuICAgICAgZWRpdG9yOiB7IHR5cGU6IEVkaXRvclR5cGVzLlRFWFRCT1gsIG9wdGlvbnM6IHt9IH0sXHJcbiAgICB9LCB7XHJcbiAgICAgIGZpZWxkOiAndGFnJywgd2lkdGg6IDYwLCB0aXRsZTogJ+WIneWni+WAvOexu+WeiycsIHNvcnRhYmxlOiB0cnVlLFxyXG4gICAgICBmb3JtYXR0ZXI6IHtcclxuICAgICAgICB0eXBlOiAnZW51bScsXHJcbiAgICAgICAgb3B0aW9uczogeyB2YWx1ZUZpZWxkOiAndmFsdWUnLCB0ZXh0RmllbGQ6ICd0ZXh0JywgZGF0YTogdGhpcy50YWdzIH1cclxuICAgICAgfSxcclxuICAgICAgZWRpdG9yOiB7XHJcbiAgICAgICAgdHlwZTogRWRpdG9yVHlwZXMuQ09NQk9MSVNULFxyXG4gICAgICAgIG9wdGlvbnM6IHtcclxuICAgICAgICAgIHZhbHVlRmllbGQ6ICd2YWx1ZScsIHRleHRGaWVsZDogJ3RleHQnLCBkYXRhOiB0aGlzLnRhZ3MsIGlkRmllbGQ6ICd2YWx1ZScsIHBhbmVsSGVpZ2h0OiAnYXV0bycsXHJcbiAgICAgICAgICBzZWxlY3RDaGFuZ2U6IChlKSA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMudmFsdWUgPSB0aGlzLnZhbHVlLm1hcCh2ID0+IHtcclxuICAgICAgICAgICAgICBpZiAodi5pZCA9PT0gZS5yb3dJZCkge1xyXG4gICAgICAgICAgICAgICAgdi52YWx1ZSA9IG51bGw7XHJcbiAgICAgICAgICAgICAgICB2LnZhbHVlVGV4dCA9IG51bGw7XHJcbiAgICAgICAgICAgICAgICBpZiAodi5jb21wb25lbnQpIHtcclxuICAgICAgICAgICAgICAgICAgdi5jb21wb25lbnQgPSBudWxsO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHY7XHJcbiAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB2O1xyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICB9LFxyXG4gICAgICAgICAgY2xlYXI6IChlKSA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMudmFsdWUgPSB0aGlzLnZhbHVlLm1hcCh2ID0+IHtcclxuICAgICAgICAgICAgICBpZiAodi5pZCA9PT0gZS5yb3dJZCkge1xyXG4gICAgICAgICAgICAgICAgdi52YWx1ZSA9IG51bGw7XHJcbiAgICAgICAgICAgICAgICB2LnZhbHVlVGV4dCA9IG51bGw7XHJcbiAgICAgICAgICAgICAgICBpZiAodi5jb21wb25lbnQpIHtcclxuICAgICAgICAgICAgICAgICAgdi5jb21wb25lbnQgPSBudWxsO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHY7XHJcbiAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB2O1xyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9LCB7XHJcbiAgICAgIGZpZWxkOiAndmFsdWVUZXh0Jywgd2lkdGg6IDEyMCwgdGl0bGU6ICfliJ3lp4vlgLwnLCBzaG93VGlwczogdHJ1ZSxcclxuICAgICAgZWRpdG9yOiB7IHR5cGU6IEVkaXRvclR5cGVzLlRFWFRCT1gsIG9wdGlvbnM6IHt9IH1cclxuICAgIH1cclxuICBdO1xyXG5cclxuICBtb2RhbENvbmZpZyA9IHtcclxuICAgIHRpdGxlOiAn5rWB56iL5Y+Y6YePJyxcclxuICAgIHdpZHRoOiAxMDcwLFxyXG4gICAgaGVpZ2h0OiA1MTAsXHJcbiAgICBzaG93QnV0dG9uczogdHJ1ZVxyXG4gIH07XHJcblxyXG4gIGNvbnN0cnVjdG9yKFxyXG4gICAgcHJpdmF0ZSBtZXNzYWdlOiBNZXNzYWdlclNlcnZpY2UsXHJcbiAgICBwcml2YXRlIHJlc29sdmVyOiBDb21wb25lbnRGYWN0b3J5UmVzb2x2ZXIsXHJcbiAgICBwcml2YXRlIGluamVjdG9yOiBJbmplY3RvcixcclxuICAgIHByaXZhdGUgbW9kYWxTZXJ2aWNlOiBCc01vZGFsU2VydmljZSxcclxuICAgIHByaXZhdGUgdWlzdGF0ZTogUHJvY2Vzc0Rlc2lnbmVyVUlTdGF0ZSxcclxuICAgIHByaXZhdGUgZXhwcjogRXhwcmVzc2lvblNlcnZpY2VcclxuICApIHsgfVxyXG5cclxuICBuZ09uSW5pdCgpIHtcclxuICAgIGlmICh0aGlzLnZhcmlhYmxlU2V0dGluZykge1xyXG4gICAgICB0aGlzLmNvbHVtbnMgPSB0aGlzLmNvbHVtbnMuZmlsdGVyKGMgPT4gYy5maWVsZCAhPT0gJ3RhZydcclxuICAgICAgICAmJiBjLmZpZWxkICE9PSAndmFsdWVUZXh0JyAmJiBjLmZpZWxkICE9PSAnZGVzY3JpcHRpb24nXHJcbiAgICAgICk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBhZGQoKSB7XHJcbiAgICBjb25zdCB2YXJpYWJsZSA9IG5ldyBQcm9jZXNzVmFyaWFibGUoKTtcclxuICAgIHRoaXMudmFsdWUgPSB0aGlzLnZhbHVlLmNvbmNhdChbdmFyaWFibGVdKTtcclxuICB9XHJcblxyXG4gIGRlbGV0ZSgpIHtcclxuICAgIHRoaXMuZ3JpZC5lbmRDZWxsRWRpdCgpO1xyXG4gICAgY29uc3Qgc2VsZWN0ZWQgPSB0aGlzLmdyaWQuc2VsZWN0ZWRSb3c7XHJcbiAgICBpZiAoIXNlbGVjdGVkKSB7XHJcbiAgICAgIHRoaXMubWVzc2FnZS5pbmZvKCflsJrmnKrpgInkuK3mtYHnqIvlj5jph4/vvIEnKTtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG4gICAgdGhpcy52YWx1ZSA9IHRoaXMudmFsdWUuZmlsdGVyKHYgPT4gdi5pZCAhPT0gc2VsZWN0ZWQuZGF0YS5pZCk7XHJcbiAgfVxyXG5cclxuICBjbGlja09LKCkge1xyXG4gICAgaWYgKHRoaXMudmFyaWFibGVTZXR0aW5nKSB7XHJcbiAgICAgIGNvbnN0IHNlbGVjdGVkcyA9IHRoaXMuZ3JpZC5jaGVja2VkcztcclxuICAgICAgaWYgKHNlbGVjdGVkcy5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgdGhpcy52YXJpYWJsZVNldEVtaXR0ZXIuZW1pdChzZWxlY3RlZHMpO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIHRoaXMubWVzc2FnZS5pbmZvKCflsJrmnKrpgInkuK3mtYHnqIvlj5jph4/vvIEnKTtcclxuICAgICAgfVxyXG4gICAgfSBlbHNlIHtcclxuICAgICAgdGhpcy5ncmlkLmVuZENlbGxFZGl0KCk7XHJcbiAgICAgIGlmICh0aGlzLnZhbGlkYXRvcigpKSB7XHJcbiAgICAgICAgY29uc3Qgb2JqZWN0ID0geyB2YWx1ZTogdGhpcy52YWx1ZSwgcGFyYW1ldGVyczogbnVsbCB9O1xyXG4gICAgICAgIHRoaXMuc3VibWl0TW9kYWwuZW1pdChvYmplY3QpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBjbGlja0NhbmNlbCgpIHtcclxuICAgIHRoaXMuY2xvc2VNb2RhbC5lbWl0KCk7XHJcbiAgfVxyXG4gIGJlZm9yZUVkaXQgPSAocGFyYW06IFJvd0VkaXRQYXJhbSkgPT4ge1xyXG4gICAgY29uc3Qgcm93RGF0YSA9IHBhcmFtLnJvd0RhdGEgYXMgYW55O1xyXG4gICAgY29uc3QgY29sdW1uID0gcGFyYW0uY29sdW1uO1xyXG4gICAgaWYgKGNvbHVtbi5maWVsZCA9PT0gJ3ZhbHVlVGV4dCcpIHtcclxuICAgICAgaWYgKCEocm93RGF0YSBhcyBQcm9jZXNzVmFyaWFibGUpLnRhZykge1xyXG4gICAgICAgIHJldHVybiBvZihmYWxzZSk7XHJcbiAgICAgIH1cclxuICAgICAgaWYgKChyb3dEYXRhIGFzIFByb2Nlc3NWYXJpYWJsZSkudGFnID09PSB0aGlzLnRhZ3NbMF0udmFsdWUpIHtcclxuICAgICAgICBwYXJhbS5jb2x1bW4uZWRpdG9yID0geyB0eXBlOiBFZGl0b3JUeXBlcy5URVhUQk9YLCBvcHRpb25zOiB7fSB9O1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIHBhcmFtLmNvbHVtbi5lZGl0b3IgPSB7XHJcbiAgICAgICAgICB0eXBlOiAnaW5wdXQtZ3JvdXAnLFxyXG4gICAgICAgICAgb3B0aW9uczoge1xyXG4gICAgICAgICAgICBncm91cFRleHQ6ICc8aSBjbGFzcz1cImYtaWNvbiBmLWljb24tbG9va3VwXCI+PC9pPicsXHJcbiAgICAgICAgICAgIGVkaXRhYmxlOiBmYWxzZSxcclxuICAgICAgICAgICAgc2hvd0NsZWFyOiBmYWxzZSxcclxuICAgICAgICAgICAgY2xpY2tIYW5kbGU6IChlKSA9PiB7XHJcbiAgICAgICAgICAgICAgZS5mb3JtQ29udHJvbC5zZXRWYWx1ZShlLmluc3RhbmNlLnZhbHVlID8gZS5pbnN0YW5jZS52YWx1ZSA6ICcnKTtcclxuICAgICAgICAgICAgICB0aGlzLnZhbHVlRWRpdChlKTtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgY2xlYXI6IChlKSA9PiB7XHJcbiAgICAgICAgICAgICAgY29uc29sZS5sb2coJ2NsZWFyJywgZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gb2YodHJ1ZSk7XHJcbiAgfVxyXG5cclxuICBlbmRFZGl0KGRhdGE6IGFueSkge1xyXG4gICAgaWYgKGRhdGEuY29sdW1uLmZpZWxkID09PSAndmFsdWVUZXh0JyAmJiBkYXRhLnJvd0RhdGEudGFnID09PSB0aGlzLnRhZ3NbMF0udmFsdWUpIHtcclxuICAgICAgZGF0YS5yb3dEYXRhLnZhbHVlID0gZGF0YS5yb3dEYXRhLnZhbHVlVGV4dDtcclxuICAgIH1cclxuICB9XHJcbiAgdmFsdWVFZGl0KGU6IGFueSkge1xyXG4gICAgY29uc3Qgcm93ZGF0YTogUHJvY2Vzc1ZhcmlhYmxlID0gZS5yb3dEYXRhO1xyXG4gICAgc3dpdGNoIChyb3dkYXRhLnRhZykge1xyXG4gICAgICBjYXNlIHRoaXMudGFnc1swXS52YWx1ZTpcclxuICAgICAgICB0aGlzLmVkaXRDb25zdGFudChlKTtcclxuICAgICAgICBicmVhaztcclxuICAgICAgY2FzZSB0aGlzLnRhZ3NbMV0udmFsdWU6XHJcbiAgICAgICAgdGhpcy5lZGl0RXhwcmVzc2lvbihlKTtcclxuICAgICAgICBicmVhaztcclxuICAgICAgY2FzZSB0aGlzLnRhZ3NbMl0udmFsdWU6XHJcbiAgICAgICAgdGhpcy5lZGl0Q29tcG9uZW50KGUpO1xyXG4gICAgICAgIGJyZWFrO1xyXG4gICAgfVxyXG4gIH1cclxuICBwcml2YXRlIGVkaXRDb25zdGFudChlOiBhbnkpIHtcclxuICAgIGNvbnN0IGRhdGE6IFByb2Nlc3NWYXJpYWJsZSA9IGUucm93RGF0YTtcclxuICAgIGxldCBkaWFsb2c6IGFueTtcclxuICAgIGNvbnN0IGNvbXBGYWN0b3J5ID0gdGhpcy5yZXNvbHZlci5yZXNvbHZlQ29tcG9uZW50RmFjdG9yeShDb25zdGFudEVkaXRDb21wb25lbnQpO1xyXG4gICAgY29uc3QgY29tcFJlZiA9IGNvbXBGYWN0b3J5LmNyZWF0ZSh0aGlzLmluamVjdG9yKTtcclxuICAgIGNvbXBSZWYuaW5zdGFuY2UudmFsdWUgPSBkYXRhLnZhbHVlO1xyXG4gICAgY29tcFJlZi5pbnN0YW5jZS5zdWJtaXRFbWl0dGVyLnN1YnNjcmliZSgocmU6IHN0cmluZykgPT4ge1xyXG4gICAgICBlLmZvcm1Db250cm9sLnNldFZhbHVlKHJlKTtcclxuICAgICAgZS5pbnN0YW5jZS5jZC5kZXRlY3RDaGFuZ2VzKCk7XHJcbiAgICAgIGRhdGEudmFsdWUgPSByZTtcclxuICAgICAgZGlhbG9nLmNsb3NlKCk7XHJcbiAgICB9KTtcclxuICAgIGNvbXBSZWYuaW5zdGFuY2UuY2xvc2VFbWl0dGVyLnN1YnNjcmliZShyZSA9PiB7XHJcbiAgICAgIGRpYWxvZy5jbG9zZSgpO1xyXG4gICAgfSk7XHJcbiAgICBjb25zdCBtb2RhbENvbmZpZyA9IHtcclxuICAgICAgdGl0bGU6ICfluLjph48nLFxyXG4gICAgICB3aWR0aDogMzQwLFxyXG4gICAgICBoZWlnaHQ6IDI4MCxcclxuICAgICAgc2hvd0J1dHRvbnM6IHRydWUsXHJcbiAgICAgIGJ1dHRvbnM6IGNvbXBSZWYuaW5zdGFuY2UuZm9vdGVyXHJcbiAgICB9O1xyXG4gICAgZGlhbG9nID0gdGhpcy5tb2RhbFNlcnZpY2Uuc2hvdyhjb21wUmVmLCBtb2RhbENvbmZpZyk7XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIGVkaXRFeHByZXNzaW9uKGU6IGFueSkge1xyXG4gICAgY29uc3QgZGF0YTogUHJvY2Vzc1ZhcmlhYmxlID0gZS5yb3dEYXRhO1xyXG4gICAgaWYgKHRoaXMudWlzdGF0ZS5zY2hlbWFzLmxlbmd0aCA+IDApIHtcclxuICAgICAgZm9yIChjb25zdCBzY2hlbWEgb2YgdGhpcy51aXN0YXRlLnNjaGVtYXMpIHtcclxuICAgICAgICB0aGlzLmV4cHIuYWRkU2NoZW1hKCdTY2hlbWEnLCBzY2hlbWEpO1xyXG4gICAgICB9XHJcbiAgICAgIGlmICh0aGlzLnVpc3RhdGUuc2NoZW1hc1swXS5lbnRpdHlUeXBlcyAmJiB0aGlzLnVpc3RhdGUuc2NoZW1hc1swXS5lbnRpdHlUeXBlcy5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgY29uc3QgZW50aXR5VHlwZSA9IHRoaXMudWlzdGF0ZS5zY2hlbWFzWzBdLmVudGl0eVR5cGVzWzBdO1xyXG4gICAgICAgIHRoaXMuZXhwci5hZGRJbmplY3RlZEVudGl0eShlbnRpdHlUeXBlLm5hbWUsICdTY2hlbWEnLFxyXG4gICAgICAgICAgZW50aXR5VHlwZS5uYW1lLCBJbmplY3RlZFR5cGUuRW50aXR5VHlwZSk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIGNvbnN0IGNvbnRleHQgPSBuZXcgQXJyYXkoKTtcclxuICAgIGlmICh0aGlzLnVpc3RhdGUucHJvY0luc3RDb250ZXh0Lmxlbmd0aCA+IDApIHtcclxuICAgICAgZm9yIChjb25zdCB2YXJpYWJsZSBvZiB0aGlzLnVpc3RhdGUucHJvY0luc3RDb250ZXh0KSB7XHJcbiAgICAgICAgY29udGV4dC5wdXNoKHZhcmlhYmxlKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgaWYgKHRoaXMudWlzdGF0ZS5mb3JtYWxQYXJhbWV0ZXJDb250ZXh0Lmxlbmd0aCA+IDApIHtcclxuICAgICAgZm9yIChjb25zdCB2YXJpYWJsZSBvZiB0aGlzLnVpc3RhdGUuZm9ybWFsUGFyYW1ldGVyQ29udGV4dCkge1xyXG4gICAgICAgIGlmICghY29udGV4dC5zb21lKGMgPT4gYy5rZXkgPT09IHZhcmlhYmxlLmtleSkpIHtcclxuICAgICAgICAgIGNvbnRleHQucHVzaCh2YXJpYWJsZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICBpZiAodGhpcy51aXN0YXRlLnBhcnRpY2lwYW50Q29udGV4dC5sZW5ndGggPiAwKSB7XHJcbiAgICAgIGZvciAoY29uc3QgdmFyaWFibGUgb2YgdGhpcy51aXN0YXRlLnBhcnRpY2lwYW50Q29udGV4dCkge1xyXG4gICAgICAgIGlmICghY29udGV4dC5zb21lKGMgPT4gYy5rZXkgPT09IHZhcmlhYmxlLmtleSkpIHtcclxuICAgICAgICAgIGNvbnRleHQucHVzaCh2YXJpYWJsZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICBpZiAodGhpcy51aXN0YXRlLnByb2Nlc3NWYXJpYWJsZUNvbnRleHQubGVuZ3RoID4gMCkge1xyXG4gICAgICBmb3IgKGNvbnN0IHZhcmlhYmxlIG9mIHRoaXMudWlzdGF0ZS5wcm9jZXNzVmFyaWFibGVDb250ZXh0KSB7XHJcbiAgICAgICAgaWYgKCFjb250ZXh0LnNvbWUoYyA9PiBjLmtleSA9PT0gdmFyaWFibGUua2V5KSkge1xyXG4gICAgICAgICAgY29udGV4dC5wdXNoKHZhcmlhYmxlKTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIGlmIChjb250ZXh0Lmxlbmd0aCA+IDApIHtcclxuICAgICAgZm9yIChjb25zdCB2IG9mIGNvbnRleHQpIHtcclxuICAgICAgICB0aGlzLmV4cHIuYWRkQ29udGV4dCh2KTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgdGhpcy5leHByLnNldEVkaXRQYXR0ZXJuKEV4cHJFZGl0TW9kZS5BZHZhbmNlZCk7IC8vIOihqOi+vuW8j+WxleeOsOaooeW8j++8mum7mOiupOmrmOe6p+eJiFxyXG4gICAgdGhpcy5leHByLmFkZEV4cHJlc3Npb25UZXh0KGRhdGEudmFsdWUpO1xyXG4gICAgdGhpcy5leHByLmJ1aWxkRXhwcmVzc2lvbigpLnRoZW4oKHJlOiBzdHJpbmcpID0+IHtcclxuICAgICAgZS5mb3JtQ29udHJvbC5zZXRWYWx1ZShyZSk7XHJcbiAgICAgIGUuaW5zdGFuY2UuY2QuZGV0ZWN0Q2hhbmdlcygpO1xyXG4gICAgICBkYXRhLnZhbHVlID0gcmU7XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIHByaXZhdGUgZWRpdENvbXBvbmVudChlOiBhbnkpIHtcclxuICAgIGNvbnN0IGRhdGE6IFByb2Nlc3NWYXJpYWJsZSA9IGUucm93RGF0YTtcclxuICAgIGxldCBkaWFsb2c6IGFueTtcclxuICAgIGNvbnN0IGNvbXBGYWN0b3J5ID0gdGhpcy5yZXNvbHZlci5yZXNvbHZlQ29tcG9uZW50RmFjdG9yeShDb21wb25lbnRFZGl0Q29tcG9uZW50KTtcclxuICAgIGNvbnN0IGNvbXBSZWYgPSBjb21wRmFjdG9yeS5jcmVhdGUodGhpcy5pbmplY3Rvcik7XHJcbiAgICBjb21wUmVmLmluc3RhbmNlLmNvbXBvbmVudCA9IGRhdGEuY29tcG9uZW50O1xyXG4gICAgY29tcFJlZi5pbnN0YW5jZS5zdWJtaXRFbWl0dGVyLnN1YnNjcmliZSgocmU6IGFueSkgPT4ge1xyXG4gICAgICBlLmZvcm1Db250cm9sLnNldFZhbHVlKHJlLk5hbWUgKyAnLScgKyByZS5NZXRob2RDb2RlKTtcclxuICAgICAgZS5pbnN0YW5jZS5jZC5kZXRlY3RDaGFuZ2VzKCk7XHJcbiAgICAgIGRhdGEudmFsdWUgPSByZS5JZDtcclxuICAgICAgZGF0YS5jb21wb25lbnQgPSByZTtcclxuICAgICAgZGlhbG9nLmNsb3NlKCk7XHJcbiAgICB9KTtcclxuICAgIGNvbXBSZWYuaW5zdGFuY2UuY2xvc2VFbWl0dGVyLnN1YnNjcmliZShyZSA9PiB7XHJcbiAgICAgIGRpYWxvZy5jbG9zZSgpO1xyXG4gICAgfSk7XHJcbiAgICBjb25zdCBtb2RhbENvbmZpZyA9IHtcclxuICAgICAgdGl0bGU6ICfmnoTku7YnLFxyXG4gICAgICB3aWR0aDogODAwLFxyXG4gICAgICBoZWlnaHQ6IDUxNSxcclxuICAgICAgc2hvd0J1dHRvbnM6IHRydWUsXHJcbiAgICAgIGJ1dHRvbnM6IGNvbXBSZWYuaW5zdGFuY2UuZm9vdGVyXHJcbiAgICB9O1xyXG4gICAgZGlhbG9nID0gdGhpcy5tb2RhbFNlcnZpY2Uuc2hvdyhjb21wUmVmLCBtb2RhbENvbmZpZyk7XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIHZhbGlkYXRvcigpIHtcclxuICAgIGZvciAoY29uc3QgaXRlbSBvZiB0aGlzLnZhbHVlKSB7XHJcbiAgICAgIGlmICghaXRlbS5uYW1lKSB7XHJcbiAgICAgICAgdGhpcy5tZXNzYWdlLndhcm5pbmcoJ+WPmOmHj+e8luWPt+S4jeWFgeiuuOS4uuepuu+8gScpO1xyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgfVxyXG4gICAgICBpZiAoIWl0ZW0uZG9jdW1lbnRhdGlvbikge1xyXG4gICAgICAgIHRoaXMubWVzc2FnZS53YXJuaW5nKCflj5jph4/lkI3np7DkuI3lhYHorrjkuLrnqbrvvIEnKTtcclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgIH1cclxuICAgICAgaWYgKCF0aGlzLklzTWF0Y2hWYXJpYWJsZU5hbWVSdWxlcyhpdGVtLm5hbWUpKSB7XHJcbiAgICAgICAgdGhpcy5tZXNzYWdlLndhcm5pbmcoJ+WPmOmHj+e8luWPt+WPquiDveWMheWQq+Wtl+avjeOAgeaVsOWtl+WSjOS4i+WIkue6v++8jOS4lOS4jeiDveS7peaVsOWtl+W8gOWktO+8gScpO1xyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgaWYgKHRoaXMudmFsdWUubGVuZ3RoID4gMSkge1xyXG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMudmFsdWUubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICBjb25zdCBjb2RlMSA9IHRoaXMudmFsdWVbaV0ubmFtZTtcclxuICAgICAgICBmb3IgKGxldCBqID0gaSArIDE7IGogPCB0aGlzLnZhbHVlLmxlbmd0aDsgaisrKSB7XHJcbiAgICAgICAgICBjb25zdCBjb2RlMiA9IHRoaXMudmFsdWVbal0ubmFtZTtcclxuXHJcbiAgICAgICAgICBpZiAoY29kZTEgPT09IGNvZGUyKSB7XHJcbiAgICAgICAgICAgIHRoaXMubWVzc2FnZS53YXJuaW5nKGDmtYHnqIvlj5jph4/nvJblj7fkuI3lhYHorrjph43lpI3vvIFgKTtcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIHRydWU7XHJcbiAgfVxyXG4gIHByaXZhdGUgSXNNYXRjaFZhcmlhYmxlTmFtZVJ1bGVzKHN0cjogc3RyaW5nKSB7XHJcbiAgICBjb25zdCBSZWd4ID0gL15bYS16QS1aX11bYS16QS1aXzAtOV17MCx9LztcclxuICAgIGlmIChSZWd4LnRlc3Qoc3RyKSkge1xyXG4gICAgICByZXR1cm4gdHJ1ZTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH1cclxuICB9XHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBQcm9jZXNzVmFyaWFibGVzQ29udmVydGVyIGltcGxlbWVudHMgVHlwZUNvbnZlcnRlciB7XHJcbiAgY29uc3RydWN0b3IoKSB7IH1cclxuXHJcbiAgY29udmVydFRvKGRhdGE6IGFueVtdKTogc3RyaW5nIHtcclxuICAgIGlmIChkYXRhICYmIGRhdGEubGVuZ3RoID4gMCkge1xyXG4gICAgICByZXR1cm4gJ++8iOW3suiuvue9ru+8iSc7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICByZXR1cm4gJ++8iOacquiuvue9ru+8iSc7XHJcbiAgICB9XHJcbiAgfVxyXG59XHJcbiJdfQ==