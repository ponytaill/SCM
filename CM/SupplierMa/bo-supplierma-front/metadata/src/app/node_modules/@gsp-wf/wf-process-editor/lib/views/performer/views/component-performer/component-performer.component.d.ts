import { OnInit, ComponentFactoryResolver, Injector, ElementRef, AfterViewInit, NgZone } from '@angular/core';
import { FormBuilder } from '@angular/forms';
import { ProcessDesignerUIState } from '../../../../app/process-designer.uistate';
import { ExpressionService } from '@gsp-svc/expression';
import { SessionService } from '@ecp-caf/caf-common';
import { BsModalService } from '@farris/ui-modal';
import { CommonComponentUiRTService } from '@gsp-cmp/ccmp-ui';
import { DataColumn, DatagridComponent } from '@farris/ui-datagrid';
import { RowEditParam } from '@farris/ui-datagrid/lib/types';
import { LookupGridComponent } from '@farris/ui-lookup';
import { ComponentPerformerService } from './component-performer.service';
import { ComponentPerformer, ActualParameter } from './component-performer.entity';
import { ProcessDeUtil } from '../../../../domain/process-de-util';
export declare class ComponentPerformerComponent implements OnInit, AfterViewInit {
    private formBuilder;
    private designerState;
    private expr;
    private resolver;
    private injector;
    private sessionSrc;
    private modalService;
    private componentService;
    private ngZone;
    private service;
    private util;
    cls: string;
    private componentPerformer;
    grid: DatagridComponent;
    lookup: LookupGridComponent;
    inputGroup: ElementRef;
    showClearButton: boolean;
    component: ComponentPerformer;
    curParameter: ActualParameter;
    columns: ({
        field: string;
        width: number;
        title: string;
        showTips?: undefined;
        editor?: undefined;
    } | {
        field: string;
        width: number;
        title: string;
        showTips: boolean;
        editor?: undefined;
    } | {
        field: string;
        width: number;
        title: string;
        editor: {
            type: string;
            options: {
                groupText: string;
                editable: boolean;
                clickHandle: (e: any) => void;
                clear: (e: any) => void;
            };
        };
        showTips?: undefined;
    })[];
    helpInfo: {
        helpId: string;
        su: string;
        columns: any[];
        displayType: string;
        items: any[];
        pageInfo: {
            pageIndex: number;
            pageList: number[];
            pageSize: number;
        };
        search: {
            category: string;
        };
        title: string;
        total: number;
        fieldInfo: {
            idField: string;
            textField: string;
            valueField: string;
        };
    };
    cell: any;
    constructor(formBuilder: FormBuilder, designerState: ProcessDesignerUIState, expr: ExpressionService, resolver: ComponentFactoryResolver, injector: Injector, sessionSrc: SessionService, modalService: BsModalService, componentService: CommonComponentUiRTService, ngZone: NgZone, service: ComponentPerformerService, util: ProcessDeUtil);
    ngOnInit(): void;
    ngAfterViewInit(): void;
    onMouseEnter(event: any): void;
    onMouseLeave(event: any): void;
    private toggleClearIcon;
    selectChanged(event: any): void;
    beforeEdit: (param: RowEditParam) => import("rxjs").Observable<boolean>;
    afterEdit: (rowIndex: number, rowData: any, column?: DataColumn) => import("rxjs").Observable<boolean>;
    endEdit(e: any): void;
    clear(): void;
    selectComponent(): void;
    private openComponentSelectorNew;
    showExprHelp(e: any): void;
    getPerformers(): ComponentPerformer;
    private getHelpInfo;
    dictPicked: (rowData: any) => import("rxjs").Observable<boolean>;
    pagerChanged(data: any): void;
    search(data: any): void;
}
