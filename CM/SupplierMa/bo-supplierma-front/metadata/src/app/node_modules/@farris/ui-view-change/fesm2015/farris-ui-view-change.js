import { BehaviorSubject } from 'rxjs';
import { CommonModule } from '@angular/common';
import { Injectable, NgModule, Directive, Input, ElementRef, Renderer2, Component, Output, EventEmitter, ViewChild, ViewEncapsulation, defineInjectable } from '@angular/core';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class ViewChangeService {
    constructor() {
        /**
         * 默认视图切换分组名称
         */
        this.defaultId = 'default';
        //当前显示视图
        this.currentViewType = {};
        /**
         * contents
         */
        this.viewContainers = {};
        this.changeCurrentViewId = new BehaviorSubject(null);
    }
    /**
     * @param {?} itemId
     * @param {?=} viewContainerId
     * @return {?}
     */
    addViewItem(itemId, viewContainerId = this.defaultId) {
        if (this.viewContainers[viewContainerId]) {
            if (this.hasElement(itemId, viewContainerId)) {
                return;
            }
            else {
                this.viewContainers[viewContainerId].items.push(itemId);
            }
        }
        else {
            this.viewContainers[viewContainerId] = (/** @type {?} */ ({
                items: []
            }));
            this.viewContainers[viewContainerId].items.push(itemId);
        }
    }
    /**
     * @param {?} itemId
     * @param {?=} viewContainerId
     * @return {?}
     */
    removeViewItem(itemId, viewContainerId = this.defaultId) {
        delete this.viewContainers[viewContainerId];
        if (this.viewContainers && this.viewContainers[viewContainerId]) {
            /** @type {?} */
            const items = this.viewContainers[viewContainerId].items.filter((/**
             * @param {?} el
             * @return {?}
             */
            el => {
                return el !== itemId;
            }));
            if (!items.length) {
                delete this.viewContainers[viewContainerId];
                return;
            }
            this.viewContainers[viewContainerId].items = items;
        }
    }
    /**
     * 存储currentpageid
     * @param {?} type
     * @param {?=} viewContainerId
     * @return {?}
     */
    updateCurrentViewId(type, viewContainerId = this.defaultId) {
        this.currentViewType[viewContainerId] = type;
        /** @type {?} */
        let changeView = {};
        changeView[viewContainerId] = type;
        this.changeCurrentViewId.next(changeView);
    }
    /**
     * @return {?}
     */
    getChangeCurrentViewId() {
        return this.changeCurrentViewId;
    }
    /**
     * @private
     * @param {?} itemId
     * @param {?} groupId
     * @return {?}
     */
    hasElement(itemId, groupId) {
        return this.viewContainers[groupId].items.some((/**
         * @param {?} item
         * @return {?}
         */
        (item) => item === itemId));
    }
}
ViewChangeService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */
ViewChangeService.ctorParameters = () => [];
/** @nocollapse */ ViewChangeService.ngInjectableDef = defineInjectable({ factory: function ViewChangeService_Factory() { return new ViewChangeService(); }, token: ViewChangeService, providedIn: "root" });

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class ViewChangeComponent {
    /**
     * @param {?} _renderer
     * @param {?} viewChangeService
     */
    constructor(_renderer, viewChangeService) {
        this._renderer = _renderer;
        this.viewChangeService = viewChangeService;
        this.viewType = 'tile';
        this.viewGroupId = 'default';
        this.toolTypeChange = new EventEmitter();
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        if (this.toolbarData && this.toolbarData.length) {
            if (this.defaultType) {
                /** @type {?} */
                let item = this.toolbarData.find((/**
                 * @param {?} bar
                 * @return {?}
                 */
                (bar) => {
                    return bar['type'] === this.defaultType;
                }));
                this.activeTypeItem = item;
                this.toolTypeChange.emit(this.activeTypeItem);
            }
            else {
                this.activeTypeItem = this.toolbarData[0];
                this.toolTypeChange.emit(this.activeTypeItem);
            }
        }
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        if (!this.viewChangeService) {
            this.viewChangeService = new ViewChangeService();
        }
        this.viewChangeService.updateCurrentViewId(this.activeTypeItem['type'], this.viewGroupId);
    }
    /**
     * @param {?} item
     * @return {?}
     */
    listItemClick(item) {
        if (item.disable || this.activeTypeItem['type'] === item['type']) {
            return;
        }
        this.activeTypeItem = item;
        if (!this.viewChangeService) {
            this.viewChangeService = new ViewChangeService();
        }
        this.viewChangeService.updateCurrentViewId(this.activeTypeItem['type'], this.viewGroupId);
        this.toolTypeChange.emit(item);
        if (this.typelist) {
            this._renderer.setStyle(this.typelist.nativeElement, 'display', 'none');
        }
    }
    /**
     * @return {?}
     */
    dropdownMouseEnter() {
        this._renderer.setStyle(this.typelist.nativeElement, 'display', 'block');
    }
    /**
     * @return {?}
     */
    dropdownMouseLeave() {
        this._renderer.setStyle(this.typelist.nativeElement, 'display', 'none');
    }
}
ViewChangeComponent.decorators = [
    { type: Component, args: [{
                selector: 'farris-view-change',
                template: "<div class=\"f-view-change\">\r\n    <div class=\"f-view-change-tile\" *ngIf=\"viewType === 'tile'; else dropdown\">\r\n        <div class=\"f-view-change-tile-btn\" *ngFor=\"let item of toolbarData\" [ngClass]=\"{'tile-btn-active': item.type === activeTypeItem.type,'tile-btn-disable': item.disable}\" (click)=\"listItemClick(item)\" [title]=\"item.title\">\r\n            <span class=\"tile-btn-icon {{item.iconName}}\"></span>\r\n        </div>\r\n    </div>\r\n    <ng-template #dropdown>\r\n        <div class=\"f-view-change-dropdown\" \r\n        (mouseenter)=\"dropdownMouseEnter()\"\r\n        (mouseleave)=\"dropdownMouseLeave()\"> \r\n            <div class=\"f-view-change-toggle\" *ngIf=\"this.toolbarData.length\">\r\n                <span class=\"toggle-btn-icon {{activeTypeItem.iconName}}\"></span>\r\n            </div>\r\n            <div class=\"f-view-change-typelist\" #typelist>\r\n                <div class=\"f-view-change-typelist-content\">\r\n                    <div class=\"f-view-change-typelist-arrow\"></div>\r\n                    <ul class=\"f-view-change-typelist-list\">\r\n                        <li class=\"typelist-item\" *ngFor=\"let item of toolbarData\" [ngClass]=\"{'typelist-item-active': item.type === activeTypeItem.type,'typelist-item-disable': item.disable}\" (click)=\"listItemClick(item)\">\r\n                                <span class=\"typelist-item-icon {{item.iconName}}\"></span>\r\n                                <span class=\"typelist-item-title\">{{item.title}}</span>\r\n                            </li>\r\n                    </ul>\r\n                </div>\r\n            </div>\r\n            <!-- <ul class=\"f-view-change-typelist\" #typelist>\r\n                <li class=\"f-view-change-typelist-arrow\"></li>\r\n                <li class=\"typelist-item\" *ngFor=\"let item of toolbarData\" [ngClass]=\"{'typelist-item-active': item.type === activeTypeItem.type,'typelist-item-disable': item.disable}\" (click)=\"listItemClick(item)\">\r\n                    <span class=\"typelist-item-icon {{item.iconName}}\"></span>\r\n                    <span class=\"typelist-item-title\">{{item.title}}</span>\r\n                </li>\r\n            </ul> -->\r\n        </div>\r\n    </ng-template>\r\n</div>",
                encapsulation: ViewEncapsulation.None
                // providers:[ ViewChangeService ]
                ,
                styles: [".f-viewchange-view-none{display:none!important}"]
            }] }
];
/** @nocollapse */
ViewChangeComponent.ctorParameters = () => [
    { type: Renderer2 },
    { type: ViewChangeService }
];
ViewChangeComponent.propDecorators = {
    toolbarData: [{ type: Input }],
    viewType: [{ type: Input }],
    defaultType: [{ type: Input }],
    viewGroupId: [{ type: Input }],
    toolTypeChange: [{ type: Output }],
    typelist: [{ type: ViewChild, args: ['typelist',] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
//视图区域
class FarrisViewItemDirective {
    /**
     * @param {?} elementRef
     * @param {?} viewChangeService
     * @param {?} render
     */
    constructor(elementRef, viewChangeService, render) {
        this.elementRef = elementRef;
        this.viewChangeService = viewChangeService;
        this.render = render;
        this.fViewGroupId = 'default';
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.viewChangeService.addViewItem(this.viewItemType, this.fViewGroupId);
        this.viewChangeService.getChangeCurrentViewId().subscribe((/**
         * @param {?} currentViewType
         * @return {?}
         */
        (currentViewType) => {
            if (!currentViewType)
                return;
            if (!currentViewType[this.fViewGroupId]) {
                return;
            }
            else if (currentViewType[this.fViewGroupId] == this.viewItemType) {
                // this.render.setStyle(this.elementRef.nativeElement,'display','');
                this.render.removeClass(this.elementRef.nativeElement, 'f-viewchange-view-none');
            }
            else {
                // this.render.setStyle(this.elementRef.nativeElement,'display','none',0);
                this.render.addClass(this.elementRef.nativeElement, 'f-viewchange-view-none');
            }
        }));
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.viewChangeService.removeViewItem(this.viewItemType, this.fViewGroupId);
    }
}
FarrisViewItemDirective.decorators = [
    { type: Directive, args: [{
                selector: '[fViewItem]'
            },] }
];
/** @nocollapse */
FarrisViewItemDirective.ctorParameters = () => [
    { type: ElementRef },
    { type: ViewChangeService },
    { type: Renderer2 }
];
FarrisViewItemDirective.propDecorators = {
    viewItemType: [{ type: Input, args: ['fViewItem',] }],
    fViewGroupId: [{ type: Input, args: ['fViewGroupId',] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class ViewChangeModule {
}
ViewChangeModule.decorators = [
    { type: NgModule, args: [{
                declarations: [ViewChangeComponent, FarrisViewItemDirective],
                imports: [
                    CommonModule
                ],
                exports: [ViewChangeComponent, FarrisViewItemDirective]
            },] }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { ViewChangeService, ViewChangeComponent, ViewChangeModule, FarrisViewItemDirective };

//# sourceMappingURL=farris-ui-view-change.js.map