/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { FilterOperator, FilterConditionValue } from './../operations/operators';
import { Component, ViewChild, ElementRef, ChangeDetectorRef, Injector } from '@angular/core';
import { FilterRowEditorComponent } from './filter-row-editor.component';
import { DatagridFilterRowService } from '../datagrid-filter-row.service';
// <input [checked]="chekced" id="{{ id }}" type="checkbox" #chk >
var FilterCheckboxComponent = /** @class */ (function (_super) {
    tslib_1.__extends(FilterCheckboxComponent, _super);
    function FilterCheckboxComponent(dfrs, cd, inject) {
        var _this = _super.call(this) || this;
        _this.dfrs = dfrs;
        _this.cd = cd;
        _this.inject = inject;
        _this.i = 0;
        _this.checked = false;
        return _this;
        // this.dfrs.filterRowConditions$.subscribe(ccs => {
        //     this.fr.conditionChange.emit(ccs);
        // });
    }
    /**
     * @return {?}
     */
    FilterCheckboxComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        _super.prototype.ngOnInit.call(this);
        this.chk.nativeElement.indeterminate = true;
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    FilterCheckboxComponent.prototype.checkedChange = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        this.dfrs.closeFilterPanel();
        if (this.i > 0) {
            this.checked = !this.checked;
        }
        this.i += 1;
        if (this.i > 2) {
            this.i = 0;
            this.chk.nativeElement.indeterminate = true;
        }
        else {
            this.chk.nativeElement.indeterminate = false;
        }
        if (this.i === 0) {
            this.dfrs.updateColumnConditions(this.column.field, FilterConditionValue.All);
            this.checked = false;
        }
        else {
            /** @type {?} */
            var condition = {
                operator1: FilterOperator.Equal,
                value1: this.checked
            };
            this.dfrs.updateColumnConditions(this.column.field, condition);
        }
        this.cd.detectChanges();
        $event.stopPropagation();
    };
    /**
     * @return {?}
     */
    FilterCheckboxComponent.prototype.clearValue = /**
     * @return {?}
     */
    function () {
        this.checked = false;
        this.chk.nativeElement.indeterminate = true;
        this.cd.detectChanges();
    };
    /**
     * @param {?} filterCondition
     * @return {?}
     */
    FilterCheckboxComponent.prototype.initFilter = /**
     * @param {?} filterCondition
     * @return {?}
     */
    function (filterCondition) {
        if (filterCondition && Object.keys(filterCondition).length) {
            this.checked = filterCondition.value1;
            this.chk.nativeElement.indeterminate = false;
            this.i = this.checked ? 2 : 1;
        }
        else {
            this.checked = false;
            this.chk.nativeElement.indeterminate = true;
            this.i = 0;
        }
        this.dfrs._updateColumnConditions(this.column.field, filterCondition);
        this.cd.detectChanges();
    };
    FilterCheckboxComponent.decorators = [
        { type: Component, args: [{
                    selector: 'filter-checkbox',
                    template: "\n    <div class=\"custom-control custom-checkbox f-checkradio-single\">\n        <input [name]=\"column.field\" [checked]=\"checked\" type=\"checkbox\" #chk class=\"custom-control-input\">\n        <label class=\"custom-control-label\" (click)=\"checkedChange($event)\"></label>\n    </div>\n    "
                }] }
    ];
    /** @nocollapse */
    FilterCheckboxComponent.ctorParameters = function () { return [
        { type: DatagridFilterRowService },
        { type: ChangeDetectorRef },
        { type: Injector }
    ]; };
    FilterCheckboxComponent.propDecorators = {
        chk: [{ type: ViewChild, args: ['chk',] }]
    };
    return FilterCheckboxComponent;
}(FilterRowEditorComponent));
export { FilterCheckboxComponent };
if (false) {
    /** @type {?} */
    FilterCheckboxComponent.prototype.i;
    /** @type {?} */
    FilterCheckboxComponent.prototype.checked;
    /** @type {?} */
    FilterCheckboxComponent.prototype.chk;
    /** @type {?} */
    FilterCheckboxComponent.prototype.dfrs;
    /**
     * @type {?}
     * @private
     */
    FilterCheckboxComponent.prototype.cd;
    /**
     * @type {?}
     * @private
     */
    FilterCheckboxComponent.prototype.inject;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmlsdGVyLXJvdy1jaGVja2JveC5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZmFycmlzL3VpLWRhdGFncmlkLWZpbHRlci8iLCJzb3VyY2VzIjpbImxpYi9maWx0ZXItZWRpdG9ycy9maWx0ZXItcm93LWNoZWNrYm94LmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLE9BQU8sRUFBbUIsY0FBYyxFQUFFLG9CQUFvQixFQUFFLE1BQU0sMkJBQTJCLENBQUM7QUFDbEcsT0FBTyxFQUFFLFNBQVMsRUFBVSxTQUFTLEVBQUUsVUFBVSxFQUFTLGlCQUFpQixFQUFFLFFBQVEsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUM3RyxPQUFPLEVBQUUsd0JBQXdCLEVBQUUsTUFBTSwrQkFBK0IsQ0FBQztBQUN6RSxPQUFPLEVBQUUsd0JBQXdCLEVBQUUsTUFBTSxnQ0FBZ0MsQ0FBQzs7QUFPMUU7SUFVNkMsbURBQXdCO0lBSWpFLGlDQUNXLElBQThCLEVBQzdCLEVBQXFCLEVBQVUsTUFBZ0I7UUFGM0QsWUFHSSxpQkFBTyxTQUtWO1FBUFUsVUFBSSxHQUFKLElBQUksQ0FBMEI7UUFDN0IsUUFBRSxHQUFGLEVBQUUsQ0FBbUI7UUFBVSxZQUFNLEdBQU4sTUFBTSxDQUFVO1FBTDNELE9BQUMsR0FBRyxDQUFDLENBQUM7UUFDTixhQUFPLEdBQUcsS0FBSyxDQUFDOztRQU9aLG9EQUFvRDtRQUNwRCx5Q0FBeUM7UUFDekMsTUFBTTtJQUNWLENBQUM7Ozs7SUFFRCwwQ0FBUTs7O0lBQVI7UUFDSSxpQkFBTSxRQUFRLFdBQUUsQ0FBQztRQUNqQixJQUFJLENBQUMsR0FBRyxDQUFDLGFBQWEsQ0FBQyxhQUFhLEdBQUcsSUFBSSxDQUFDO0lBQ2hELENBQUM7Ozs7O0lBRUQsK0NBQWE7Ozs7SUFBYixVQUFjLE1BQWtCO1FBQzVCLElBQUksQ0FBQyxJQUFJLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQztRQUM3QixJQUFJLElBQUksQ0FBQyxDQUFD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dGlvbiwgRmlsdGVyT3BlcmF0b3IsIEZpbHRlckNvbmRpdGlvblZhbHVlIH0gZnJvbSAnLi8uLi9vcGVyYXRpb25zL29wZXJhdG9ycyc7XHJcbmltcG9ydCB7IENvbXBvbmVudCwgT25Jbml0LCBWaWV3Q2hpbGQsIEVsZW1lbnRSZWYsIElucHV0LCBDaGFuZ2VEZXRlY3RvclJlZiwgSW5qZWN0b3IgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgRmlsdGVyUm93RWRpdG9yQ29tcG9uZW50IH0gZnJvbSAnLi9maWx0ZXItcm93LWVkaXRvci5jb21wb25lbnQnO1xyXG5pbXBvcnQgeyBEYXRhZ3JpZEZpbHRlclJvd1NlcnZpY2UgfSBmcm9tICcuLi9kYXRhZ3JpZC1maWx0ZXItcm93LnNlcnZpY2UnO1xyXG5pbXBvcnQgeyBGaWx0ZXJSb3dDb21wb25lbnQgfSBmcm9tICcuLi9kYXRhZ3JpZC1maWx0ZXItcm93LmNvbXBvbmVudCc7XHJcblxyXG5cclxuXHJcbi8vIDxpbnB1dCBbY2hlY2tlZF09XCJjaGVrY2VkXCIgaWQ9XCJ7eyBpZCB9fVwiIHR5cGU9XCJjaGVja2JveFwiICNjaGsgPlxyXG5cclxuQENvbXBvbmVudCh7XHJcbiAgICBzZWxlY3RvcjogJ2ZpbHRlci1jaGVja2JveCcsXHJcbiAgICB0ZW1wbGF0ZTogYFxyXG4gICAgPGRpdiBjbGFzcz1cImN1c3RvbS1jb250cm9sIGN1c3RvbS1jaGVja2JveCBmLWNoZWNrcmFkaW8tc2luZ2xlXCI+XHJcbiAgICAgICAgPGlucHV0IFtuYW1lXT1cImNvbHVtbi5maWVsZFwiIFtjaGVja2VkXT1cImNoZWNrZWRcIiB0eXBlPVwiY2hlY2tib3hcIiAjY2hrIGNsYXNzPVwiY3VzdG9tLWNvbnRyb2wtaW5wdXRcIj5cclxuICAgICAgICA8bGFiZWwgY2xhc3M9XCJjdXN0b20tY29udHJvbC1sYWJlbFwiIChjbGljayk9XCJjaGVja2VkQ2hhbmdlKCRldmVudClcIj48L2xhYmVsPlxyXG4gICAgPC9kaXY+XHJcbiAgICBgXHJcblxyXG59KVxyXG5leHBvcnQgY2xhc3MgRmlsdGVyQ2hlY2tib3hDb21wb25lbnQgZXh0ZW5kcyBGaWx0ZXJSb3dFZGl0b3JDb21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQge1xyXG4gICAgaSA9IDA7XHJcbiAgICBjaGVja2VkID0gZmFsc2U7XHJcbiAgICBAVmlld0NoaWxkKCdjaGsnKSBjaGs6IEVsZW1lbnRSZWY7XHJcbiAgICBjb25zdHJ1Y3RvcihcclxuICAgICAgICBwdWJsaWMgZGZyczogRGF0YWdyaWRGaWx0ZXJSb3dTZXJ2aWNlLFxyXG4gICAgICAgIHByaXZhdGUgY2Q6IENoYW5nZURldGVjdG9yUmVmLCBwcml2YXRlIGluamVjdDogSW5qZWN0b3IpIHtcclxuICAgICAgICBzdXBlcigpO1xyXG5cclxuICAgICAgICAvLyB0aGlzLmRmcnMuZmlsdGVyUm93Q29uZGl0aW9ucyQuc3Vic2NyaWJlKGNjcyA9PiB7XHJcbiAgICAgICAgLy8gICAgIHRoaXMuZnIuY29uZGl0aW9uQ2hhbmdlLmVtaXQoY2NzKTtcclxuICAgICAgICAvLyB9KTtcclxuICAgIH1cclxuXHJcbiAgICBuZ09uSW5pdCgpIHtcclxuICAgICAgICBzdXBlci5uZ09uSW5pdCgpO1xyXG4gICAgICAgIHRoaXMuY2hrLm5hdGl2ZUVsZW1lbnQuaW5kZXRlcm1pbmF0ZSA9IHRydWU7XHJcbiAgICB9XHJcblxyXG4gICAgY2hlY2tlZENoYW5nZSgkZXZlbnQ6IE1vdXNlRXZlbnQpIHtcclxuICAgICAgICB0aGlzLmRmcnMuY2xvc2VGaWx0ZXJQYW5lbCgpO1xyXG4gICAgICAgIGlmICh0aGlzLmkgPiAwKSB7XHJcbiAgICAgICAgICAgIHRoaXMuY2hlY2tlZCA9ICF0aGlzLmNoZWNrZWQ7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuaSArPSAxO1xyXG4gICAgICAgIGlmICh0aGlzLmkgPiAyKSB7XHJcbiAgICAgICAgICAgIHRoaXMuaSA9IDA7XHJcbiAgICAgICAgICAgIHRoaXMuY2hrLm5hdGl2ZUVsZW1lbnQuaW5kZXRlcm1pbmF0ZSA9IHRydWU7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy5jaGsubmF0aXZlRWxlbWVudC5pbmRldGVybWluYXRlID0gZmFsc2U7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAodGhpcy5pID09PSAwKSB7XHJcbiAgICAgICAgICAgIHRoaXMuZGZycy51cGRhdGVDb2x1bW5Db25kaXRpb25zKHRoaXMuY29sdW1uLmZpZWxkLCBGaWx0ZXJDb25kaXRpb25WYWx1ZS5BbGwgKTtcclxuICAgICAgICAgICAgdGhpcy5jaGVja2VkID0gZmFsc2U7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgY29uc3QgY29uZGl0aW9uOiBGaWx0ZXJDb25kaXRpb24gPSB7XHJcbiAgICAgICAgICAgICAgICBvcGVyYXRvcjE6IEZpbHRlck9wZXJhdG9yLkVxdWFsLFxyXG4gICAgICAgICAgICAgICAgdmFsdWUxOiB0aGlzLmNoZWNrZWRcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgdGhpcy5kZnJzLnVwZGF0ZUNvbHVtbkNvbmRpdGlvbnModGhpcy5jb2x1bW4uZmllbGQsIGNvbmRpdGlvbiApO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLmNkLmRldGVjdENoYW5nZXMoKTtcclxuICAgICAgICAkZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XHJcbiAgICB9XHJcblxyXG4gICAgY2xlYXJWYWx1ZSgpIHtcclxuICAgICAgICB0aGlzLmNoZWNrZWQgPSBmYWxzZTtcclxuICAgICAgICB0aGlzLmNoay5uYXRpdmVFbGVtZW50LmluZGV0ZXJtaW5hdGUgPSB0cnVlO1xyXG4gICAgICAgIHRoaXMuY2QuZGV0ZWN0Q2hhbmdlcygpO1xyXG4gICAgfVxyXG5cclxuICAgIGluaXRGaWx0ZXIoZmlsdGVyQ29uZGl0aW9uOiBhbnkpIHtcclxuICAgICAgICBpZiAoZmlsdGVyQ29uZGl0aW9uICYmIE9iamVjdC5rZXlzKGZpbHRlckNvbmRpdGlvbikubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgIHRoaXMuY2hlY2tlZCA9IGZpbHRlckNvbmRpdGlvbi52YWx1ZTE7XHJcbiAgICAgICAgICAgIHRoaXMuY2hrLm5hdGl2ZUVsZW1lbnQuaW5kZXRlcm1pbmF0ZSA9IGZhbHNlO1xyXG4gICAgICAgICAgICB0aGlzLmkgPSB0aGlzLmNoZWNrZWQgPyAyIDogMTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLmNoZWNrZWQgPSBmYWxzZTtcclxuICAgICAgICAgICAgdGhpcy5jaGsubmF0aXZlRWxlbWVudC5pbmRldGVybWluYXRlID0gdHJ1ZTtcclxuICAgICAgICAgICAgdGhpcy5pID0gMDtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5kZnJzLl91cGRhdGVDb2x1bW5Db25kaXRpb25zKHRoaXMuY29sdW1uLmZpZWxkLCBmaWx0ZXJDb25kaXRpb24pO1xyXG4gICAgICAgIHRoaXMuY2QuZGV0ZWN0Q2hhbmdlcygpO1xyXG4gICAgfVxyXG59XHJcbiJdfQ==