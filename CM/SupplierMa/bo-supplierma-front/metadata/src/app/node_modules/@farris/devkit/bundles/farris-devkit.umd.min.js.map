{"version":3,"sources":["node_modules/tslib/tslib.es6.js","ng://@farris/devkit/lib/metadata/decorator/decorator.ts","ng://@farris/devkit/lib/metadata/decorator/metadata_util.ts","ng://@farris/devkit/lib/changeset/types.ts","ng://@farris/devkit/lib/changeset/change_set.ts","ng://@farris/devkit/lib/entity/metadata/field_decorator.ts","ng://@farris/devkit/lib/entity/metadata/entity_decorator.ts","ng://@farris/devkit/lib/entity/metadata/field_metadata_util.ts","ng://@farris/devkit/lib/entity/metadata/entity_metadata_util.ts","ng://@farris/devkit/lib/entity/types.ts","ng://@farris/devkit/lib/entity/entity_factory.ts","ng://@farris/devkit/lib/entity/entity_type_creator.ts","ng://@farris/devkit/lib/entity/entity_creator.ts","ng://@farris/devkit/lib/entity/validator/validation_types.ts","ng://@farris/devkit/lib/entity/validator/validation_error.ts","ng://@farris/devkit/lib/entity/validator/validation_executor.ts","ng://@farris/devkit/lib/entity/validator/validation_utils.ts","ng://@farris/devkit/lib/utils/date_util.ts","ng://@farris/devkit/lib/i18n/translate_service.ts","ng://@farris/devkit/lib/entity/validator/validator.ts","ng://@farris/devkit/lib/entity/entity_list.ts","ng://@farris/devkit/lib/core/types.ts","ng://@farris/devkit/lib/i18n/user_settings_service.ts","ng://@farris/devkit/lib/i18n/zoned_time.ts","ng://@farris/devkit/lib/misc/router-param.service.ts","ng://@farris/devkit/lib/binding-data/changes.ts","ng://@farris/devkit/lib/binding-data/binding_property.ts","ng://@farris/devkit/lib/binding-data/base_binding_object.ts","ng://@farris/devkit/lib/binding-data/property_util.ts","ng://@farris/devkit/lib/binding-data/binding_object.ts","ng://@farris/devkit/lib/binding-data/binding_list_type_factory.ts","ng://@farris/devkit/lib/binding-data/binding_list_factory.ts","ng://@farris/devkit/lib/binding-data/binding_object_type_factory.ts","ng://@farris/devkit/lib/binding-data/binding_object_factory.ts","ng://@farris/devkit/lib/form/decorators.ts","ng://@farris/devkit/lib/utils/data-path/binding_path_converter.ts","ng://@farris/devkit/lib/utils/data-path/binding_path_comparer.ts","ng://@farris/devkit/lib/utils/data-path/binding_path_traverser.ts","ng://@farris/devkit/lib/utils/data-path/entity_path_converter.ts","ng://@farris/devkit/lib/utils/data-path/entity_path_comparer.ts","ng://@farris/devkit/lib/core/data-path/data_path_node.ts","ng://@farris/devkit/lib/utils/data-path/form_path_converter.ts","ng://@farris/devkit/lib/core/data-path/data_path.ts","ng://@farris/devkit/lib/core/data-path/data_path_creator.ts","ng://@farris/devkit/lib/core/data-type-info/data_prop_info.ts","ng://@farris/devkit/lib/core/data-type-info/data_type_info.ts","ng://@farris/devkit/lib/core/tokens.ts","ng://@farris/devkit/lib/core/core.ts","ng://@farris/devkit/lib/core/escape.ts","ng://@farris/devkit/lib/resolver/types.ts","ng://@farris/devkit/lib/resolver/resolver_registry.ts","ng://@farris/devkit/lib/repository/decorators.ts","ng://@farris/devkit/lib/repository/entity_collection.ts","ng://@farris/devkit/lib/repository/entity_manager.ts","ng://@farris/devkit/lib/repository/pagination_manager.ts","ng://@farris/devkit/lib/repository/data_change_history.ts","ng://@farris/devkit/lib/repository/sort_condition_manager.ts","ng://@farris/devkit/lib/repository/filter_condition_manager.ts","ng://@farris/devkit/lib/misc/uid.ts","ng://@farris/devkit/lib/repository/repository.ts","ng://@farris/devkit/lib/repository/default_repository.ts","ng://@farris/devkit/lib/resolver/entity_dependency_resolver.ts","ng://@farris/devkit/lib/resolver/state_dependency_resolver.ts","ng://@farris/devkit/lib/resolver/comment_dependency_resolver.ts","ng://@farris/devkit/lib/resolver/resolve_service.ts","ng://@farris/devkit/lib/utils/expression_util.ts","ng://@farris/devkit/lib/utils/data_type_info_util.ts","ng://@farris/devkit/lib/form/form.ts","ng://@farris/devkit/lib/binding-data/entity_util.ts","ng://@farris/devkit/lib/binding-data/binding_data.ts","ng://@farris/devkit/lib/binding-data/binding_list.ts","ng://@farris/devkit/lib/binding-data/binding_data_factory.ts","ng://@farris/devkit/lib/binding-data/decorators.ts","ng://@farris/devkit/lib/misc/data-path-util.ts","ng://@farris/devkit/lib/misc/guid.ts","ng://@farris/devkit/lib/misc/run_mode_service.ts","ng://@farris/devkit/lib/entity/entity.ts","ng://@farris/devkit/lib/entity/dynamic_entity.ts","ng://@farris/devkit/lib/schema/schema.ts","ng://@farris/devkit/lib/entity/entity_data_service.ts","ng://@farris/devkit/lib/entity/entity_prototype.ts","ng://@farris/devkit/lib/entity/entity_type_factory.ts","ng://@farris/devkit/lib/rest/rest_service.ts","ng://@farris/devkit/lib/command/decorators.ts","ng://@farris/devkit/lib/misc/is-observable.ts","ng://@farris/devkit/lib/command/flow/task_node.ts","ng://@farris/devkit/lib/variable/variable_parser.ts","ng://@farris/devkit/lib/variable/parse_util.ts","ng://@farris/devkit/lib/variable/data_variable_parser.ts","ng://@farris/devkit/lib/variable/ui_state_variable_parser.ts","ng://@farris/devkit/lib/variable/state_machine_variable_parser.ts","ng://@farris/devkit/lib/variable/command_variable_parser.ts","ng://@farris/devkit/lib/variable/variable_parse_service.ts","ng://@farris/devkit/lib/variable/frame_id_variable_parser.ts","ng://@farris/devkit/lib/variable/form_state_variable_parser.ts","ng://@farris/devkit/lib/variable/event_param_variable_parser.ts","ng://@farris/devkit/lib/variable/index.ts","ng://@farris/devkit/lib/command/flow/task_link.ts","ng://@farris/devkit/lib/command/flow/task_flow.ts","ng://@farris/devkit/lib/command/command_context.ts","ng://@farris/devkit/lib/i18n/translate_token.ts","ng://@farris/devkit/lib/command/command_handler.ts","ng://@farris/devkit/lib/command/command_handler_registry.ts","ng://@farris/devkit/lib/command/command_handler_extender.ts","ng://@farris/devkit/lib/command/command_handler_extender_registry.ts","ng://@farris/devkit/lib/ui-state/decorators.ts","ng://@farris/devkit/lib/ui-state/uistate_metadata_util.ts","ng://@farris/devkit/lib/ui-state/ui_state.ts","ng://@farris/devkit/lib/ui-state/tokens.ts","ng://@farris/devkit/lib/state-machine/types.ts","ng://@farris/devkit/lib/state-machine/context.ts","ng://@farris/devkit/lib/state-machine/state_machine_event.ts","ng://@farris/devkit/lib/state-machine/state_machine.ts","ng://@farris/devkit/lib/state-machine/decorators.ts","ng://@farris/devkit/lib/view-model/decorators.ts","ng://@farris/devkit/lib/view-model/view_model.ts","ng://@farris/devkit/lib/context/context.ts","ng://@farris/devkit/lib/app/binding_data_manager.ts","ng://@farris/devkit/lib/app/repository_mananger.ts","ng://@farris/devkit/lib/app/frame_component_refresher.ts","ng://@farris/devkit/lib/app/change_detection_controller.ts","ng://@farris/devkit/lib/app/app_context_manager.ts","ng://@farris/devkit/lib/app/component_manager.ts","ng://@farris/devkit/lib/app/tokens.ts","ng://@farris/devkit/lib/schema/dom.service.ts","ng://@farris/devkit/lib/schema/form-metadata.ts","ng://@farris/devkit/lib/schema/schema.service.ts","ng://@farris/devkit/lib/app/app_metadata_collector.ts","ng://@farris/devkit/lib/app/view_model_manager.ts","ng://@farris/devkit/lib/app/render_context_metadata_manager.ts","ng://@farris/devkit/lib/frame/tokens.ts","ng://@farris/devkit/lib/app/app_context.ts","ng://@farris/devkit/lib/app/frame_contex_manager.ts","ng://@farris/devkit/lib/event-bus-new/event-bus-proxy.ts","ng://@farris/devkit/lib/event-mechanism/declaration/event-type.ts","ng://@farris/devkit/lib/event-mechanism/declaration/declaration_decorator.ts","ng://@farris/devkit/lib/event-mechanism/declaration/declaration.ts","ng://@farris/devkit/lib/event-mechanism/subscription/subscription_decorator.ts","ng://@farris/devkit/lib/event-bus-new/event-pipe-type.ts","ng://@farris/devkit/lib/event-mechanism/subscription/subscription.ts","ng://@farris/devkit/lib/event-bus-new/event-pipe.ts","ng://@farris/devkit/lib/event-bus-new/event-bus.ts","ng://@farris/devkit/lib/exception/tokens.ts","ng://@farris/devkit/lib/expression/types.ts","ng://@farris/devkit/lib/i18n/tokens.ts","ng://@farris/devkit/lib/manifest/tokens.ts","ng://@farris/devkit/lib/expression/expression_registry.ts","ng://@farris/devkit/lib/listener/tokens.ts","ng://@farris/devkit/lib/listener/change_listener.ts","ng://@farris/devkit/lib/expression/expression_executor.ts","ng://@farris/devkit/lib/expression/expression_result.ts","ng://@farris/devkit/lib/expression/expression_manager.ts","ng://@farris/devkit/lib/expression/expression_result_factory.ts","ng://@farris/devkit/lib/listener/ui_state_change_listener.ts","ng://@farris/devkit/lib/expression/tokens.ts","ng://@farris/devkit/lib/listener/repository_change_listener.ts","ng://@farris/devkit/lib/listener/listener_registry.ts","ng://@farris/devkit/lib/listener/binding_data_change_listener.ts","ng://@farris/devkit/lib/listener/listeners.ts","ng://@farris/devkit/lib/expression/expression_event_emitter.ts","ng://@farris/devkit/lib/effector/tokens.ts","ng://@farris/devkit/lib/effector/repository_effector.ts","ng://@farris/devkit/lib/effector/uistate_effector.ts","ng://@farris/devkit/lib/effector/readonly_effector.ts","ng://@farris/devkit/lib/effector/dependency_effector.ts","ng://@farris/devkit/lib/effector/effector_registry.ts","ng://@farris/devkit/lib/effector/relative_effector.ts","ng://@farris/devkit/lib/effector/validate_effector.ts","ng://@farris/devkit/lib/effector/required_effector.ts","ng://@farris/devkit/lib/effector/visible_effector.ts","ng://@farris/devkit/lib/effector/effector_factory.ts","ng://@farris/devkit/lib/event-handler/event_handler.ts","ng://@farris/devkit/lib/event-handler/entity_value_changed_event_handler.ts","ng://@farris/devkit/lib/effector/effector_manager.ts","ng://@farris/devkit/lib/event-handler/state_value_changed_event_handler.ts","ng://@farris/devkit/lib/event-handler/repository_add_entity_event_handler.ts","ng://@farris/devkit/lib/event-handler/repository_remove_entity_event_handler.ts","ng://@farris/devkit/lib/event-handler/repository_load_event_handler.ts","ng://@farris/devkit/lib/event-handler/entity_update_event_handler.ts","ng://@farris/devkit/lib/event-handler/binding_data_append_object_event_handler.ts","ng://@farris/devkit/lib/event-handler/binding_data_value_change_event_handler.ts","ng://@farris/devkit/lib/event-handler/binding_data_remove_object_event_handler.ts","ng://@farris/devkit/lib/event-handler/binding_data_load_event_handler.ts","ng://@farris/devkit/lib/event-handler/binding_data_selection_changed_event_handler.ts","ng://@farris/devkit/lib/event-handler/event_handler_registry.ts","ng://@farris/devkit/lib/expression/expression_engine_impl.ts","ng://@farris/devkit/lib/frame/component_ref_manager.ts","ng://@farris/devkit/lib/frame/frame_context.ts","ng://@farris/devkit/lib/frame/frame_component.ts","ng://@farris/devkit/lib/frame/frame_event.ts","ng://@farris/devkit/lib/frame/frame_event_bus.ts","ng://@farris/devkit/lib/command/command_handler_factory.ts","ng://@farris/devkit/lib/command/command_bus.ts","ng://@farris/devkit/lib/command/providers.ts","ng://@farris/devkit/lib/command/dynamic_command_handler.ts","ng://@farris/devkit/lib/validation/tokens.ts","ng://@farris/devkit/lib/providers.ts","ng://@farris/devkit/lib/devkit_module.ts","ng://@farris/devkit/lib/listener/deprecated_binding_data_change_listener.ts","ng://@farris/devkit/lib/cache/types.ts","ng://@farris/devkit/lib/cache/core/cache_object.ts","ng://@farris/devkit/lib/cache/core/cache_container.ts","ng://@farris/devkit/lib/cache/provider/memory_cache_provider.ts","ng://@farris/devkit/lib/cache/provider/default_cache_provider.ts","ng://@farris/devkit/lib/core/encode_url.ts","ng://@farris/devkit/lib/cache/core/decorator.ts"],"names":["extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__extends","__","this","constructor","prototype","create","__assign","assign","t","s","i","n","arguments","length","call","apply","__generator","thisArg","body","f","y","g","_","label","sent","trys","ops","next","verb","throw","return","Symbol","iterator","v","step","op","TypeError","done","value","pop","push","e","__values","o","m","__read","r","ar","error","__spread","concat","ANNOTATIONS","PARAMETERS","PROP_METADATA","makeDecorator","name","props","parentClass","chainFn","typeFn","metaCtor","makeMetadataCtor","DecoratorFactory","args","_i","annotationInstance","bind","typeDecorator","cls","defineProperty","ngMetadataName","annotationCls","values","propName","makePropDecorator","PropDecoratorFactory","decoratorInstance","target","meta","unshift","MetadataUtil","getClassMetadatas","getClassMetadataByName","metadataName","getClassMetadataByNameWithTranslate","translateService","keysToTranslate","allClassMetadatas","metadata","find","classMetadata","translateMetadataByName","getPropsMetadatas","getPropsMetadatasByName","getPropsMetadatasByNameWithTranslate","metadatas","allPropMetadatas","keys","forEach","propMetadata","translateMetadatasByName","_this","metadataPropKey","propertyVariable","startsWith","endsWith","translateKey","replace","trim","transform","console","info","getPropMetadatasByName","getPropMetadataByName","ModifyType","Modification","modifyType","path","preValue","position","type","isEqual","other","JSON","stringify","ChangeSet","modifications","append","modification","ValueChange","appendValueChangeModification","Add","Insert","Clone","appendAddModification","Remove","appendRemoveModification","Load","existedModification","findModifyItemsPath","existedAddModification","findNewAddItemsPath","primaryKey","primaryKeyValue","addModification","filter","addDataItem","fullRemovePath","valueModification","valueChangePath","from","removeDescendantRemoveModifications","clear","index","parentRemoveModification","parentPathWithId","createRemovePathWithId","descendantPathWithId","isDescendantPath","parentPath","descendantPath","parentPathItem","parentPathItemIndex","isPlainObject","toString","getPrototypeOf","proto","NG_FIELD","NgField","makeNgFieldDecorator","options","primary","foreign","Boolean","dataField","String","NG_LIST","NgList","makeNgListDecorator","NG_OBJECT","NgObject","makeNgObjectDecorator","NG_Dynamic","NgDynamic","makeNgDynamicDecorator","NG_ENTITY","FieldMetadataUtil","getNgFields","getNgField","getDataField","getNgObjects","getNgDynamic","getNgList","getPrimaryFieldMetadata","ngFieldObj","prop","propMeta","property","undefined","getPrimaryKey","entityType","primaryNgField","getValidationMetadata","fieldMetadatas","key","validRules","map","rule","getValidationMetadataWithPath","object","parentPaths","getPaths","propertyPath","property_1","join","EntityMetadataUtil","getAllNgProperties","ngPlainProperties","getNgFieldProperties","ngEntityProperties","getNgObjectProperties","ngDynamicProperties","getNgDynamicProperties","ngEntityListProperties","getNgEntityMatadata","getNgListProperties","getPrimaryKeyProperty","primaryKeyProperty","ngProperty","PARENT_PATH","PARENT_CLASS","EntityFactory","T","data","EntityTypeCreator","entity","getType","createType","_super","tslib_1.__extends","Entity","EntityType","entityPrototype","extendProperties","ngFields","ngObjects","ngLists","ngDynamic","extendPlainProperty","extendListProperty","extendObjectProperty","extendDynamicProperty","ngField","get","getPropValue","set","newPropValue","oldPropValue","isPropValueChanged","setPropValue","changeSetValue","preparePropValue","emitValueChange","ngListMetadata","propertyName","entityList","fieldMetadata_1","createPath","val","EntityList","entities","loadEntities","onListChanged","subscribe","setChanges","ngObjectMetadata","fieldMetadata","childEntity","buildEntity","modifyInfo","ngDynamicMetadata","dynamicEntity","originalData","buildDynamic","buffer","has","parent","instance","onValueChanged","changes","DynamicFactory","Map","createEntity","entityData","typeName","createEntities","entityListData","validationMessage","ValidationTypes","isValidType","indexOf","getMessage","CURRENT_LANGUAGE","setCurrentLanguage","language","CUSTOM_VALIDATION","REQUIRED","EQUALS","NOT_EQUALS","IS_NUMBER","IS_INT","IS_FLOAT","IS_STRING","IS_BOOLEAN","IS_DATE","IS_DATE_STRING","IS_BOOLEAN_STRING","IS_NUMBER_STRING","IS_EMAIL","IS_JSON","IS_LOWERCASE","IS_UPPERCASE","RANGE","MIN","MINVALUE","MAX","MAXVALUE","LENGTH","MAX_LENGTH","MIN_LENGTH","MIN_DATE","MAX_DATE","EXCLUDE","MATCHES","FIELD_CONTAINER","fieldContainer","required","equals","notEquals","isNumber","isInt","isFloat","isBoolean","isDate","isEmail","min","minValue","minDate","max","maxValue","maxDate","isBooleanString","isDateString","isLowercase","isUppercase","range","maxLength","minLength","isNumberString","exclude","matches","ValidationError","isArray","ValidationExecutor","replaceMessageSpecialTokens","message","messageString","Function","constraints","constraint","RegExp","targetName","execute","newValue","validationErrors","externalRules","currentRowId","frameContext","form","getValidationRules","validateMetadatas","remainedExternalRules","parentPathArray","objectCursor","cursorParentPath","parentPath_1","reverse","rules","pathArray","split","fieldName_1","fieldParentPath","targetId_1","targetId","validateRule","fullPath","fieldName","validateRules","path_1","bindingPaths","getForm","formControl","getFormControl","id","formGroupName","defaultI18nValue","reduce","curr","_a","isMultLanguageField","multiLangFields","getMultiLanguageFields","includes","field","frameContext_1","fieldContainerName","Number","isInteger","validationDisplayName","validationError","generateValidationError","defaultValidations","objectValidations","listValidations","ngFields_1","enableMultiLangInput","stripEmptyErrors","errors","children","errorMap","validValue","validator","validateValueByMetadata","Promise","promise","then","isValid","createValidationError","awaitingPromises","parentIndex","INDEX_LABEL","listFields","validationError_1","items","actualIndex","primaryValue","objectFields","extType","getFrameContext","eventFrameContext","paths","bindingPath","appContext","frameContextManager","getFrameContexts","context","viewModel","ngFormControls","test","ValidationUtils","createDetailedErrorMessage","messages","propConstraintFailed","ruleName","formattedProperty","convertErrorsToNormalObject","errObj","err","childErrors","itemErr","childErr","_b","DateUtil","formatISO","dateOrDateString","isEmptyDateOrDateString","emptyISODateTimeString","dateObj","parse","format","defaultISOFormat","dateFormat","defaultDisplayFormat","parseISO","date","isEmptyDate","isEmptyDateString","dateString","dateOrDateString1","dateOrDateString2","dateObj1","dateObj2","compare","compareAsc","emptyDateTimeString","defaultDateFormat","defaultTimeFormat","TranslateService","setTranslate","translate","getCurrentLanguage","defaultLanguage","dispose","Validator","validate","executor","all","sortValidationErrors","buildErrors","sortable","sort","a","verify","ignoreAsyncValidateRules","validType","constraintsToValidate","param","Date","eval","patch","currentRows","parentEntityListPaths","getEntityListPath","childrenList","slice","getMainEntityPrimaryValue","currentRow","result","msg","Set","newMsg","customValidation","comparison","isEmptyValue","currentLanguage","Infinity","allowInfinity","isNaN","allowNaN","isFinite","validatorJs","isString","getTime","toDate","isLength","hasInvalidLangs","dateRange","isYearRange","isMonthOrDayRange","parseInt","getRangeValue","isDayTimeRange","splitor","isDateRange","isYearMonthRange","num","match","BigNumber","isGreaterThanOrEqualTo","isLessThanOrEqualTo","isNumeric","contains","seed","notContains","isJSON","someChars","arrChar","counter","pattern","ValidatorJS.default","rawData","changeSet","tslib_1.__values","initEntity","changeItem","appendNew","isCloned","newEntity","insert","appendEntity","appendEntities","remove","primaryId","total","count","indexToRemove","findIndex","entityToRemove","splice","primaryProperty","updateIndex","item","modinfo","listChanged","change","sum","getPropertyName","toJson","toJSON","toArray","isNewEntity","subChanges","newLength","__type__","Subject","asObservable","DataChangeType","HttpMethod","RunMode","BigNumberType","BackEndMessage","Level","Message","bizMessages","DEVKIT_RUN_MODE","InjectionToken","UserSettingsService","setUserSettings","userSettings","timeZone","timeZoneOffset","getTimeZone","getTimeZoneOffset","ZonedTime","zonedTimeToSpecialTimeZoneOffsetTimeString","offset","offsetMinutes","moment","utc","add","timeZoneOffsetTimeToUtcTimeString","utcOffset","toISOString","ChangeType","ViewChangeType","BindingPropertyType","RouterParamService","getParams","url","getAllParams","setParams","params","allParams","setAllParams","clearParams","Error","allParamsJson","window","sessionStorage","getItem","setItem","clearAllParams","Injectable","BaseBindingObject","getValue","setShowValidationMsg","flag","isShowValidationMsg","innerValues","setValue","propertyValue","emitEventToView","emitEventToEntity","invokeOnValueChange","oldPropertyValue","entityChanged","of","viewChange","buildViewChangesContext","viewChanges","buildChangesContext","langCode","properties","List","list","Dynamic","ignoreMultiLangInput","multiLangValueObj","useFullMultiLangProperty","localStorage","ValueChanged","unsubscribe","controlMap","PropertyUtil","getProperties","ngFieldProperties","ngFieldProperty","Plain","isPrimaryKey","isForeignKey","ngObjectProperties","ngObjectProperty","ngListProperties","ngListProperty","ngDynamicProperty","getDynamicProperties","dynamicData","getPropertyByName","BindingObject","BindingListTypeFactory","bindingProperties","bindingListType","BindingList","BindingListType","bindingListTypePrototype","bindingListPrototype","bindingProperty","currentItem","provider","BindingListFactory","bindingList","BindingObjectTypeFactory","bindingObjectType","BindingObjectType","typePrototype","extendDynamicObjectProperty","childListProperties","bindingObjects","load","childObjectProperties","bindingObject","BindingObjectFactory","createDynamicBindingObject","childList","childObject","attachDynamicObjectProperty","dynamicObject","NG_VALIDATE_FORM","NG_CHILD_FORM","NgChildForm","obj","NG_CHILD_FORM_ARRAY","NgChildFormArray","NG_FORM_CONTROL","NgFormControl","BindingPathConverter","toBindingPathArray","part","toBindingPathString","bindingPathArray","BindingPathComparer","srcPath","dstPath","srcPathArray","dstPathArray","every","srcPathItem","srcPathIndex","isParent","childPath","childPathArray","isAncestor","ancestorPath","descendantPathArray","ancestorPathArray","ancestorPathItem","ancestorPathIndex","BindingPathTraverser","getLeafPathString","getParentPathString","EntityPathConverter","toEntityPathArray","bindingPathString","bindingData","entityPathArray","currentBindingObject","createPrimaryKeyPath","currentBindingList","DataPathNodeType","EntityPathComparer","FormPathConverter","formPahtString","DataPathNode","prev","DataPath","newNode","head","tailNode","getTail","lastNode","currentNode","clone","newDataPath","curDataNode","DataPropGroup","DataPathCreator$$1","DataPathCreator","fullPathArrayOrString","entityManager","dataPath","fullPathArray","currentNodeInfo","nodeValue","shift","nodeType","DataId","entityTypeInfo","DataTypeInfo","nextNodeValue","getNextPathNodeInfo","parentNodeInfo","parentNodeValue","parentNodeType","parentEntityTypeInfo","nextPathNodeInfo","PropName","nextPropInfo","getPropInfoByName","group","typeInfo","shortPathArrayOrString","shortPathArray","currentEntityTypeInfo","propInfo","DataPropInfo","getBindingPathByTableName","tableName","fullEntityPath","getFullEntityPath","dataTypeInfo","entityInfo","nodeCode","originalCode","propInfoMap","idx","dataTypeInfo_1","getPropInfos","isVOField","getPropNames","propNames","getPropInfosByGroup","getPropNamesByGroup","getPropInfoByPath","arrPath","getTypeInfoByPath","getPrimaryKeyPropInfo","getPropMappingByName","mapping","getPropMappingByPath","checkPropGroup","propGroup","collectPropInfos","foreignKey","addPropInfo","collectEntityInfos","metadataInfo","originalDataField","FORM_PATH_TOKEN","BACK_END_MESSAGE_HANDLER_TOKEN","MESSAGE_SERVICE_TOKEN","NOTIFY_SERVICE_TOKEN","Core","warn","optionalParams","logable","log","escape","RESOLVER_TOKEN","ENTITY_TEMPLATE","STATE_TEMPLATE","GROUP_FUNCTIONS","Injector","decorators","Optional","Inject","ResolverRegistry","injector","resolvers","NG_REPOSITORY","EntityCollection","innerEntitySet","size","innerEntityMap","notifyCollectionChanged","reset","notify","complete","isReset","entityCreate","listenEntityChangeEvent","addEntity","verifyEntityToAdd","insertEntity","updateEntity","Update","addEntities","entitiesToAdd","addData","AddData","getEntityById","identity","getEntityByPath","rootEntityId","parentNode","currentPath","getEntitiesByPath","getEntities","predicate","getAllEntities","removeEntityById","verifyEntityToRemove","delete","removeEntitiesByIds","removeEntities","entitiesToRemove","removeData","RemoveData","resetEntities","entityId","collectionChanged","paginationInfo","pageSize","original","PaginationInfoChange","pageIndex","updatePaginationInfoByPath","pageInfo","totalCount","setPaginationConfigByPath","getPaginationConfigByPath","defaultValue","config","current","Math","abs","EntityManager","createEntitiesByPath","fPath","childEntityList","subPaths","fid","entityCollection","propEntityType","EntityUtil","getPropInfo","getEntityNodeByPath","entityCollectionOrList","createByLongPathFromRoot","entityNode","pathNode","getPropValueByPath","setPropValueByPath","propValue","insertEntityBeforeByPath","fpath","insertEntitiesBeforeByPath","insertEntityAfterByPath","insertEntitiesAfterByPath","appendEntityByPath","initialData","insertEntityByPath","appendEntitiesByPath","removeEntityByPath","removeEntitiesByPath","ids","clearAllEntityChanges","clearEntityChangesById","clearEntityChangesByIds","checkAllEntityChanges","some","checkEntityChangesById","clearEntityChangesByArray","idArray","PaginationManager","expandMainEntityConfig","entityName","paginationConfig","entityConfig","removeLasts","newKey","substring","deleteMainEntityConfig","defaultPageSize","getChilds","objectType","listProperties","itemTypeName","child","childs","DataChangeHistory","addChange","dataChange","changeType","addChanges","history","clearByIds","dataId","ids_1","ids_1_1","isChanged","onAddData","onDeleteData","SortConditionManager","getConditionsByBindingPath","directionConverter","conditions","sorts","condition","sortType","SortType","SortField","addCondition","direction","isBindingPathExist","bindingPathSortConditions","conditionIndex","removeCondition","setConditions","fields","directions","filedsArray","directionsArray","FilterConditionManager","getFilters","filters","mergeCondition","merge","findConditionIndex","addConditions","removes","props_1","props_1_1","UID","redix","timestamp","now","valueOf","previous","Repository","innerName","guid","paginationManager","destroy$","ngOnDestroy","updateEntityType","readMetadata","repositoryMetadata","apiUri","apiUrl","setPaginationConfig","pagination","buildEntities","listData","dataChangeHistory","sortConditionManager","filterConditionManager","DefaultRepository","getList","getById","queryChild","updateById","updateEntityById","appendByPath","insertByPath","removeById","ifSave","batchRemove","removeByIds","removeByPath","updateChangesById","updateChangesByPath","updateAllChanges","applyChanges","applyChangesById","cancelChanges","batchRemoveByPath","batchAppendByPath","defaultValues","batchAppend","EntityDependencyResolver","resolve","expr","groupFunctionDependencies","ExpressionUtil","getGroupFunctionDependency","repository","entityDependencies","getEntityDependency","dep","merged","getValidEntityPropertyExpression","entityPropertyExpression","propPaths","deps","regex","entityPropertyExpressions","convertToNodeCode","substr","CONTEXT_FUNCTIONS","StateDependencyResolver","contextFunctions","argumentsRegex_1","groupFunction","argumentMatchResult","argument","CommentDependencyResolver","dependencies","defineMatchArray","defineString","defineObject","ResolveService","expression","resolverRegistry","commentDependencyResolver","resolver","commentDependencies","dependency","groupFunctionRegex","groupFunctions","entityExpression","nodeCodes","entityExpressions","nextNodeCode","nextNodeCodePropInfo","dataPropInfo","getChildrenEntityPaths","results","childrens","getCurrentRowByPaths","findById","getAvailableChildrenPathsFromEntityPaths","getBindingPath","getEntityPath","DataTypeInfoUtil","getChildrenNodeCodes","Form","FormGroup","ngValidateForm","enableValidate","insMap","ngChildForms","metaDatas","controls","disposeValidation","updateErrors","errorObj","isGrid","setControlValue","isFormValid","setIsShowmap","domPropertyName","isShowPropMap","raisedByValidateEffector","getObject","getGridItemControl","getCardControlErrors","cardControls","getFormControlErrors","getGridControlErrors","controlIdMap","prefix","isGridComponent","frameComponent","getDomPropertyNameByEntityProp","currentId","isSubForm","innerList","ngFormControl","getngFormControlByBinding","fixedValidType","messageTemplate","invalidMessage","updateFormErrors","forceShow","clearBackendError","setErrors","markAsTouched","errorType","binding","getErrorMessage","domProperty","validateRuleType","controlName","init","buildForm","collectMetadatas","createChildForms","createControls","resetCardValidMsg","x","resetFormControls","updateFieldValidateRule","isRequired","clearValidators","markAsUntouched","markAsPristine","requiredRuleIndex","displayFieldName","validators","ruleObj","validateFn","getValidatorByRuleObj","setValidators","addFieldValidateRule","expressionId","ruleType","control","controlPaths","currentLangValue","isInValid","bigNumber","isGreaterThan","isLessThan","collectionFormControlMetadats","formControls","subForms","preloadMetadata","formControlId","validationRule","FormControl","updateOn","setUpBindingDataPipeline","valueConverter","formGroup","formType","addControls","column","converter","editor","fieldPath","bindingFieldPath","initValue","getValueFromBindingData","pipe","takeUntil","changePath","isUdt","SelectionChanged","UpdateErrors","changePathWithDot","fullEntityProp","pathPrefix","newControlValue","convertFrom","domPropName","valueChanges","oldBindingValue","oldValue","compareDate","newBindingValue","convertTo","clearBackEndMessages","runMode","highSpeed","isDateConverter","srcDate","dstDate","getFullYear","getMonth","getDate","getHours","getMinutes","getSeconds","getEntityValueChangingListeners","listeners","valueChanging","getEntityValueChangedListeners","valueChanged","validatoinRules","ngFormControl_1","displayFieldName_1","validationrulesToAdd","setTranslateService","messageKeys","errors_1","errors_2","loadEntity","loadEntityList","isEffectiveField","setUpEntityPipeline","primaryKeyPath","dynamic","value_1","target_1","parentId","findId","pathData","controlProp","entityValidate","callback","validateFromUtilSync","formErrors","mergedErrors","validateError","setUpEntityListPipeline","paths_1","parentId_1","paths_2","parentPath_2","parentId_2","paths_3","parentPath_3","parentId_3","loadRepository","entityCollectionChange","createBindingObjects","toLowerCase","effectiveFields","createBindingObject","removeDataByIds","watchReposiroty","pagingInfo","targetPropName","propType","primaryNgFiledProp","isObjectProp","isDynamicProp","appendInitialData","parentID","BindingData","firePagingChangeEvent","setPagingInfo","skip","take","parentObject","updatePagingInfo","setValueChangeInvokerFactory","valueChangeInvokerFactory","getValudChangeInvokerFactory","initByRepository","initByBindingList","setDataTypeInfo","useInitValue","getInitValueByPaths","clearValue","getPath","_paginationInfo","sPaginationInfo","setPaginationInfo","emptyCurrentItem","self","objects","firstId","setCurrentId","lastId","Append","currentIndex","nextCurrentId","getCurrentIdBeforeDeleting","getIndexById","clearOnly","nextIndex","getIdByIndex","emitEvent","emitGlobalEvent","force","GlobalSelectionChanged","swapById","id1","id2","item1","element","item2","toList","Swap","sortBy","orders","arrFields","arrDirections","isMultiLangProp","order","item1Value","item2Value","localeCompare","BindingDataFactory","createFromRepository","BindingPropertyUtil","EntityLoadUtil","createFromEntityManager","createFromExistingBindingData","existingBindingData","NG_BINDING_DATA","DataPathUtil","convertToBindingPathArray","convertToEntityPathArray","convertToRestUrl","restPathArray","getLeafPath","getParentPath","Guid","isGuid","createEmpty","raw","isEmpty","EMPTY","RunModeService","setRunMode","mode","getRunMode","newData","validErrors","primaryFieldMetadata","tap","validateAll","validateContext","validateFromUtil","cb","pathObj","handleParent","loadFields","loadChild","loadLists","loadObjects","loadDynamicObjects","buildChanges","enableTimeZone","ngDynamics","initialize","initializeNormalField","initializeList","initializeObject","initializeDynamic","createEntityFromJsonData","ngList","objectData","ngDynamicObjects","loadDynamicData","originDataField","originalDataFieldType","isEmptyMultiLangPropValue","isValidating","onUpdate","compatible","DynamicEntity","initializeDynamicField","dynamicEntity_1","createDynamicEntityFromJsonData","parentModification","SchemaEntityField$Type","SchemaEntityFieldType$Type","SchemaEntityFieldTypeName","ENTITY_DATA_SERVICE_TOKEN","getFieldValue","schemaField","multiLanguage","setFieldValue","getComplexFieldValue","innerEntities","setComplexFieldValue","ComplexField","complexFieldInstance","objectPropertyValue","changeInfo","isInitializing","schemaEntity","setEntities","isFieldValueChanged","emitFieldValueChange","Schema","SchemaEntity","SchemaEntityType","SchemaEntityField","SchemaEntityFieldType","SchemaEntityFieldEditor","EntityTypeFactory","schema","schemaType","createClass","attachEntityInstanceData","createEntityInstanceDataInitializer","ConcreteEntity","entityInstance","entityTypeConstructor","innerData","types","__prop__metadata__","entityTypePrototype","definePresetProperty","defineFieldsToPrototype","defineEntitiesToPrototype","prototypeObject","innerPrimaryProperty","parentEntityType","schemaEntityField","$type","SimpleField","defineSimpleFieldToPrototype","defineComplexFieldToPrototype","code","complexFieldType","entitMetadata","fieldData","complexFieldValue","subEntityName","includedEntityTypes","originalEntityDataArray","originalEntityData","concreteEntityInstance","RestfulService","uri","request","put","optionsWithBody","addBody","post","method","httpParams","buildParams","methodName","httpClient","HttpParams","HttpClient","NG_COMMAND_HANDLER","NG_COMMAND_HANDLER_EXTENDER","TaskNode","func","observable","Observable","VARIABLE_PARSERS","ParseUtil","getAppContext","getRootFrameContext","root","getFrameContextById","frameId","DataVariableParser","extractPaths","replaceValue","searchValue","dataVariables","DATA_PATTERN","dataVariable","pathMatches","parts","UIStateVariableParser","getUIState","uiStateVariables","UI_STATE_PATTERN","uiStateVariable","stateName","state","uiState","formatDate","year","month","day","StateMachineVariableParser","stateMachineVariables","STATE_MACHINE_PATTERN","sessionVariable","getPathObj","stateMachine","getTargetStateMachine","targetFrameContext","splitPath","CommandVariableParser","CommandContext","paramKey","command","VariableParseService","eventParam","parseExpression","itemIndex","evaluate","parsedExpression","parsers","parser","VARIABLE_MATCHER","FrameIdVariableParser","variables","extractVariables","exp","getVariableValue","relativeFrameId","getFullFrameId","namespace","FORM_STATES_EXP","FORM_STATE_EXP","FormStateVariableParser","variableExpression","exprs","variable","formStates","EVENT_PARAMS_EXP","EVENT_PARAM_EXP","EventParamVariableParser","VARIABLE_PROVIDERS","provide","multi","useClass","TaskLink","canLink","to","TaskFlow","addNode","node","nodes","addNodes","insertNode","findNodeIndex","createNode","appendNode","addLink","link","createLink","links","addLinks","getNext","nextLink","taskFlow","latestResult","clearResults","TranslateToken","CommandHandler","variableParseService","parseService","schedule","lastTaskResult$","setTimeout","isDisposed","commandToExecute","paramsTransform","transParamTypes","paramDescriptions","initContext","context$","BehaviorSubject","currentTask","concatMap","throwIfEmpty","takeLast","waitForDestroy","displayError","commandContext","destorySignal","pArray","ele","$1","$2","addTask","insertTask","afterTask","replaceTask","invoke","serviceInstance","setContextToServiceInstance","parsedArgs","serviceContext","parType","numResult","boolResult","strValue","COMMAND_HANDLERS_TOKEN","CommandHandlerRegistry","commandName","commandHandler","handlerMap","regist","handlerMetadata","handler","handlers","CommandHandlerExtender","COMMAND_HANDLER_EXTENDERS_TOKEN","CommandHandlerExtenderRegistry","extendersMap","extender","extenderMetadata","extenders","NG_COMPONENT_STATE","NgParam","UIStateMetadataUtil","getUIFields","UIState","_init","uiFields","initializeUIField","uiStates","uiFieldMetadata","uiField","isExistProperty","paramTypeTransform","ngParams","ngParam","dataType","originalDataType","setPropertyValue","PARAM_TYPE_TRANSFORM_TOKEN","State","StateMachineContext","initialState","stateMachineEvent","transitTo","nextState","states","render","targetType","parseSourceValue","ListenUIStateChange","getData","ListenEntityChange","StateMachineEvent","UI_STATE_PATTERN_1","DATA_PATTERN_1","getFrameField","frameField","frameContextMap","uiFieldList","dataFrameContextMap","dataFieldList","isAccordingValue","arr","StateMachine","effectHandlers","transit","perform","statemachine","preconditons","stateMachineMetadata","collectionMetadata","buildStateMachine","renderStates","actions","propsMetadatas","buildNgState","renderStateName","buildNgRenderState","actionName","buildNgAction","ngState","ngRenderState","renders","ngAction","precondition","stateRender","stateChange","isStateInited","NgState","NgRenderState","NgAction","action","NG_COMMAND","NgCommand","ViewModel","expressionManager","expressionResult","entityValueChangingListeners","entityValueChangedListeners","verifycationChanged","setMetadata","bindingTo","viewModelCode","buildCommands","plainPath","change_1","changed","commands","valueChangeSuccess_1","initListeners","ngCommands","keybindingMap","ngCommand","keyBinding","targetContext","commandBus","dispatch","extractPath","bindingBasePath","valueChangingListeners_1","valueChangedListeners_1","bindToParent","verifyInformations","wfConf","source","Context","getParam","setParam","BindingDataManager","getBindingDataMap","bindingDataMap","getBindingDataByName","regBindingData","unRegisteBindingData","ifBindingDataExits","RepositoryManager","regRepository","repositoryMap","unRegisteRepository","getRepositoryMap","getRepositories","getRepositoryByName","ifRepositoryExits","FrameComponentRefresher","refreshComponents","frameComponentMap","component","onFormLoad","regFrameComponent","unregFrameContext","ChangeDetectionController","reattach","frameContexts","detectChanges","detach","AppContextManager","registerAppContext","appContextSet","unregisterAppContext","getAppContexts","ComponentManager","componentRefs","getComponentsByFrameId","FORM_ID","DomService","getElementByBinding","contents","bindingFieldId","contents_1","contents_1_1","childControls","FormContent","FormContentForDB","content","Id","Code","Name","Contents","FormMetadaDataDom","FormModule","FormOptions","SchemaService","getFieldsByIds","fieldIds","specifiedFieldsMap","entityPath","bindTo","getEntityFields","fieldsMap_1","flattenFields","fieldId","fieldsMap","fields_1","fields_1_1","splitIndex","entities_1","entities_1_1","ContextMetadataBuilder","buildAppContextMetadata","formMetadataContent","module","identify","buildStataMachineMetadata","buildUiStateMetadata","buildViewContextMetadata","controllers","buildCommand","commandHandlers","buildCommandHandlers","commandHandlerExtends","buildFormMetadata","buildFormControlMetadata","commandMetadataArray","previousValue","commandMetadata","previousCommand","enableValidation","formFields","formFieldIds","formField","formFieldsMap","domService","domElements","matchedElement","title","renderState","renderStateMetadata","renderFunction","buildRenderFunction","actionMetadata","renderFunctionString","previousFunctionString","conditionTarget","conditionSource","functionString","lBracket","rBracket","relation","toLocaleLowerCase","commandReference","controllerId","cmpId","controller","methods","handlerName","previousMethodValue","methodParam","DynamicCommandHandler","ViewModelManager","getViewModelMap","viewModelMap","getViewModelByName","register","exsit","ContextMetadataManager","getContextMetadataMap","contextMetadataMap","getContextMetadataByName","contextMetadata","FRAME_ID","NAMESPACE","FRAME_COMPONENT_INIT_HANDLER_TOKEN","AppContext","getFrameContextMap","disposed","isFormDestoryed","router","unregisterFromManager","frameComponentRefresher","repositoryManager","viewModelManager","bindingDataManager","messagePipe","initializeByMetadata","contextMetadataBuilder","registerToManager","appContextManager","regFrameContext","repositoryName","regContextMetadata","componentId","contextMetadataManager","getFormAppContext","destory","applicationId","appId","token","registerCommandHandler","refresh","getContextById","getAllFrameContexts","handleSelectChange","srcFrameContext","buildRenderViewContext","viewModels","formModule","viewmodels","viewComponents","components","schemas","matchedComponent","matchedViewModel","parentViewModel","parentComponent","buildRenderViewContextRecursively","contextMetadataId","subViewModels","subViewModel","getComponentProviders","useValue","FrameContext","SkipSelf","useIsoluteEventBus","formId","ApplicationId","Token","FrameContextManager","changeDetectionController","componentManager","opened","Router","existedFrameContext","frameContextSet","getFrameContextsByNamespace","getFrameContextFromAllAppContexts","EventBusProxy","eventName","eventBus","hostType","eventTokenValueProvider","EventTypeEnum","NG_DECLARATION","Declaration","bindDeclaration","initWithDeclarations","ngDeclarations","ngPublicEventProps","getNgPublicEvent","ngExportEvent","emitter","tokenValue","eventArgs","eventType","eventSender","currentContext","eventId","ROUTE","getParentContext","parentAppContext","NG_SUBSCRIPTION","ParamMap","EventPipeType","Subscription","bindSubscription","initWithSubscriptions","ngEvents","ngEventHandlerProps","getNgEvents","eventPipes","ngImportEvent","receiver","paramMapCollection","eventPipe","on","subscriptionHandler","eventHandler","currentFrameContext","paramMap2UiState","destContext","setUiStateProperty","targetFrameContextId","EventPipe","subscriptionMap","sender","eventData","eventSubject","subscriptionInMap","subscription","lastEventId","isInSampeScope","subscribeOnce","caller","onceSubscriptionMap","unSubscribe","subscriber","unSubscribeForOnce","_c","matchEmitterToken","examByTargetToken","parentEventPipeList","location_1","disposeByCaller","eventPipeType","Parsing","senderAppContext","receiverAppContext","isoluteEventBus","Compile","EventBus","getProxy","ownerType","ownerName","proxyMap","emitterType","eventPipeList","eventMap","Type","eventPipeList_1","eventPipeList_1_1","getEventPipe","off","subscriptions","once","requestFor","requestName","requestValue","success","fail","findExistEventPipe","response","status","responseOn","responseSubject","requestObj","eventPipeList_2","eventPipeList_2_1","EventCache","setToken","tokens","getToken","Expression","ExpressionBindingType","ExpressionType","EventType","EventSource","MessageType","EffectPath","EXCEPTION_HANDLER","UserSettingsToken","MESSAGE","zh-CHS","require","dataPicking","en","zh-CHT","DEPENDENCY_SPLITER","FORM_MANIFEST_SERVICE_TOKEN","FORM_EXPRESSION_MANIFEST_SERVICE_TOKEN","ExpressionRegistry","formExpressionManifestService","switchMap","describe","expressions","expressionObject","ns","bindingType","messageType","Required","Validate","DataPicking","getExpressionMessage","_expressions","cleanSpecialCharacters","catchError","getExpressionById","expressionType","replacer","replaceAll","originalValue","search","LISTENER_TOKEN","ChangeListener","subject","findEntityPaths","ExpressionExecutor","compile","expressionContext","buildContext","factory","expression_1","ExpressionEngineExpression","ExpressionEngine","ExpressionContext","ExpressionResult","ExpressionManager","rowData","expressionRegistry","customContext","Readonly","Visible","onDataPicking","configs","warning","notifyService","hideTitle","resolveService","groupDependencies","entityContext","buildEntityContext","stateContext","buildStateContext","contexts","entityOriginalNodeCode","bignumber_js","CurrentLanguage","expressionExecutor","executeAsync","isGroupdMainEntity","isEntityDependency","getEntity","collection","childrenEntityPaths","row","parentRow","getPropertyValue","entity_1","fullPaths_1","__items__","rootFrameContext","getVirtualRootFrameContext","uiState_1","getOwnPropertyNames","messageService","ExpressionResultFactory","registeEvent","expressionObjects","ASSIGNER_TOKEN","EVENT_HANDLER_TOKEN","UIStateChangeListener","buildEventPath","registerEvent","RepositoryChangeListener","convertEventType","Field","event","ListenerRegistry","BindingDataChangeListener","Listeners","registry","listener","onEvent","ExpressionEventEmitter","attach","events","observers","EFFECTOR_TOKEN","RepositoryEffector","effect","rowId","UIStateEffector","ReadonlyEffector","DependencyEffector","EffectorRegistry","effectors","RelativeEffector","ValidateEffector","domInfo","getDomInfoByEntityPath","buildFormErrors","currentErrors","frameContexts_1","frameContexts_1_1","keys_1","keys_1_1","bindings","dgColumnNames","dgColumnInfo","array","getVerifyInformations","buildVerifyInformations","targetField","removeValidateVerifyInformations","RequiredEffector","pathValue","updateColumnValidators","datagridColumns","isValidValue","datagrid","updateColumn","columns","columnsChanged","getDataPropInfo","VisibleEffector","datagridComponent","getTablePaths","getDatagridComponent","fieldPaths","getPropertyPaths","showColumn","hideColumn","matchedFrameContexts","componentsMap","tablePaths","EffectorFactory","getEffector","nsEffectors","effectorRegistry","effector","Compute","Dependency","Relative","EventHandler","handleEvent","effectTo","effectorFactory","effectPaths","effectOptions","isValidateOrRequiredExpression","getEntityPathFromEvent","buildEntityPath","cleanEventPath","getEventId","tableCode","propertyIndex","idIndex","expressionBindingType","object_1","v1","v2","userAssignCurrentRow","row_1","entityCode","buildEffectPath","expressionPaths","currentPaths","propertyInfo","getPathInfo","propertyNames","getTablePathsFromEventPaths","getPropertyPathsFromEventPaths","analysis","expressionPathInfo","eventPaths","eventPathInfo","expressionTablePaths","expressionPropertyNames","eventTablePaths","eventPropertyNames","distance","eventFromChildren","eventFromParent","isSameTable","buildCurrentRows","fullPaths","convertBooleanTypeExpressionResult","isBooleanTypeExpression","isReadonlyExpression","isVisibleExpression","isValidateExpression","isRequiredExpression","isDependencyExpression","EntityValueChangedEventHandler","getCurrentRowByEvent","EffectorManager","StateValueChangedEventHandler","changePaths","eventPath","effectRows","output","prevPaths","currentCurrentRows","flag_1","nextPrevPaths_1","nextBindingPaths","RepositoryAddEntityEventHandler","RepositoryRemoveEntityEventHandler","RepositoryLoadEventHandler","EntityUpdateEventHandler","depPathInfo","eventEntityPath","childrenPaths","BindingDataAppendObjectEventHandler","groupExpressions","dependPathInfo","eventTablePaths_1","relativeExpressions","propertyPaths_1","prevPaths_1","BindingDataValueChangeEventHandler","eventEntityPaths","list_1","list_1_1","BindingDataRemoveObjectEventHandler","propertyPaths","BindingDataLoadEventHandler","depPath","BindingDataSelectionChangedEventHandler","EventHandlerRegistry","ExpressionEngineImpl","attachEvent","expressionEventEmitter","getEventHandler","resolveDependency","eventHandlerRegistry","bindingDataValueChangeEventHandler","entityValueChangedEventHandler","stateValueChangedEventHandler","repositoryAddEntityEventHandler","bindingDataAppendEntityEventHandler","repositoryRemoveEntityEventHandler","bindingDataRemoveObjectEventHandler","entityUpdateEventHandler","repositoryLoadEventHandler","bindingDataLoadEventHandler","bindingDataSelectionChangedHandler","ComponentRefManager","isDestoried","isRootFrameContext","viewModelNames","exceptionHandler","expressionEngineImpl","getComponentById","componentRefManager","getComponentsById","bindInjector","componentInjector","initializeBindingData","initializeStateMachine","initializeUiState","initializeForm","initializeCommandBus","initializeViewModel","registerExceptionHandler","initExpression","formAppContext","location","href","applicationContext","isExceptionHandlerExist","setContext","__frame_context__","handle","registerAppContextDestroyEvent","getFrameId","initializeRepository","handlerRegistry","extendsRegistry","commandHandlerFactory","CommandHandlerFactory","CommandBus","regViewModel","isRunAtHighSpeedMode","repositoryBindingData","routerParams","className","parentContext","childViewModels","viewModelName","name_1","nameToken","charAt","toLocaleUpperCase","formFrameContext","getViewModel","renderAppContext","attachViewComponent","viewComponent","actionPath","$event","actionBindingPath","bindingViewModel","alert","InjectFlags","defaultViewModel","FrameComponent","cd","ngOnInit","initialized","getChangeDetectorRef","initPublicEvent","initSubscription","restComponent","onFrameComponentInit","frameComponentInitHandlers","onComponentInit","ChangeDetectorRef","isCdValid","getSubscription","declaration","getDeclaration","trigger","executingCommandCount$","executingCommandCount","innerTrigger","FrameEvent","FrameEventBus","frameIds","rawHandler","extenderRegistry","extend","commandResult$","executeCommand","lastTaskResult","removeCommandFromExecutingQueue","is401Error","handlerFactory","addCommandToExecutingQueue","executingCommands","postOrNot","executingCommand","COMMAND_PROVIDERS","dynamicInvoke","serviceTocken","dynamicInvoke2","methodObject","serviceUri","serviceName","service","stageParam","result$","serviceSpecifer","System","import","serviceModule","originalContextInjector_1","resolvedReflectiveProviders","loadProvidersFromModule","reflectiveInjector","ReflectiveInjector","fromResolvedProviders","serviceMethodResult","isObservable","scheduleStages","stages","initialStage","preStage","currentStage","forkStage","providerArray","isInjectableService","providerName","hasInjectableDecorator","isFunction","injectableDecorators","decorator","__annotations__","decoratorFactory","VALIDATION_HANDLER","FARRIS_DEVKIT_APP_PROVIDERS","FARRIS_DEVKIT_MODULE_PROVIDERS","FARRIS_DEVKIT_ROOT_FRAME_PROVIDERS","FARRIS_DEVKIT_EXPRESSION_ROOT_FRAME_PROVIDERS","FARRIS_DEVKIT_EXPRESSION_LISTENER_PROVIDERS","FARRIS_DEVKIT_EXPRESSION_EFFECTOR_PROVIDERS","FARRIS_DEVKIT_FRAME_PROVIDERS","DevkitModule","NgModule","providers","CacheReturnType","DeprecatedBindingDataChangeListener","CacheKeyCompare","key1","key2","CacheObject","isExpired","ttl","createAt","CacheContainer","cacheObject","isCacheObjectExpired","MemoryCacheProvider","store","cacheKeyCompare","DefaultCacheProvider","makeParamDecorator","ParamDecoratorFactory","ParamDecorator","annotation","unusedKey","parameters","NgEntity","NgRepository","encodeUrl","encodeURI","NgCommandHandler","NgCommandHandlerExtender","NgBindingData","NgValidateForm","NgDeclaration","NgSubscription","getNgSubscriptionDecoratorFactory","Cacheable","propertyKey","descriptor","getOwnPropertyDescriptor","cacheKey","argsString"],"mappings":"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","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nexport function __classPrivateFieldGet(receiver, privateMap) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to get private field on non-instance\");\r\n    }\r\n    return privateMap.get(receiver);\r\n}\r\n\r\nexport function __classPrivateFieldSet(receiver, privateMap, value) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to set private field on non-instance\");\r\n    }\r\n    privateMap.set(receiver, value);\r\n    return value;\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nimport { Type } from '@angular/core';\r\n\r\n/**\r\n * An interface implemented by all Angular formType decorators, which allows them to be used as ES7\r\n * decorators as well as\r\n * Angular DSL syntax.\r\n *\r\n * ES7 syntax:\r\n *\r\n * ```\r\n * @ng.Component({...})\r\n * class MyClass {...}\r\n * ```\r\n *\r\n */\r\nexport interface TypeDecorator {\r\n    /**\r\n     * Invoke as ES7 decorator.\r\n     */\r\n    <T extends Type<any>>(type: T): T;\r\n\r\n    // Make TypeDecorator assignable to built-in ParameterDecorator formType.\r\n    // ParameterDecorator is declared in lib.d.ts as a `declare formType`\r\n    // so we cannot declare this interface as a subtype.\r\n    // see https://github.com/angular/angular/issues/3379#issuecomment-126169417\r\n    (target: Object, propertyKey?: string | symbol, parameterIndex?: number): void;\r\n}\r\n\r\nexport const ANNOTATIONS = '__annotations__';\r\nexport const PARAMETERS = '__parameters__';\r\nexport const PROP_METADATA = '__prop__metadata__';\r\n\r\n/**\r\n * @suppress {globalThis}\r\n */\r\nexport function makeDecorator(\r\n    name: string, props?: (...args: any[]) => any, parentClass?: any,\r\n    chainFn?: (fn: Function) => void,\r\n    typeFn?: (type: Type<any>, ...args: any[]) => void): {\r\n        new(...args: any[]): any;\r\n        (...args: any[]): any;\r\n        (...args: any[]): (cls: any) => any;\r\n    } {\r\n    const metaCtor = makeMetadataCtor(props);\r\n\r\n    function DecoratorFactory(...args: any[]): (cls: any) => any {\r\n        if (this instanceof DecoratorFactory) {\r\n            metaCtor.call(this, ...args);\r\n            return this;\r\n        }\r\n\r\n        const annotationInstance = new (<any>DecoratorFactory)(...args);\r\n        const typeDecorator: TypeDecorator = <TypeDecorator>function createTypeDecorator(cls: Type<any>) {\r\n            typeFn && typeFn(cls, ...args);\r\n            // Use of Object.defineProperty is important since it creates non-enumerable property which\r\n            // prevents the property is copied during subclassing.\r\n            const annotations = cls.hasOwnProperty(ANNOTATIONS) ?\r\n                (cls as any)[ANNOTATIONS] :\r\n                Object.defineProperty(cls, ANNOTATIONS, { value: [] })[ANNOTATIONS];\r\n            annotations.push(annotationInstance);\r\n            return cls;\r\n        };\r\n        if (chainFn) { chainFn(typeDecorator); }\r\n        return typeDecorator;\r\n    }\r\n\r\n    if (parentClass) {\r\n        DecoratorFactory.prototype = Object.create(parentClass.prototype);\r\n    }\r\n\r\n    DecoratorFactory.prototype.ngMetadataName = name;\r\n    (<any>DecoratorFactory).annotationCls = DecoratorFactory;\r\n    return DecoratorFactory as any;\r\n}\r\n\r\nfunction makeMetadataCtor(props?: (...args: any[]) => any): any {\r\n    return function ctor(...args: any[]) {\r\n        if (props) {\r\n            const values = props(...args);\r\n            // tslint:disable-next-line:forin\r\n            for (const propName in values) {\r\n                this[propName] = values[propName];\r\n            }\r\n        }\r\n    };\r\n}\r\n\r\nexport function makeParamDecorator(\r\n    name: string, props?: (...args: any[]) => any, parentClass?: any): any {\r\n    const metaCtor = makeMetadataCtor(props);\r\n    function ParamDecoratorFactory(...args: any[]): any {\r\n        if (this instanceof ParamDecoratorFactory) {\r\n            metaCtor.apply(this, args);\r\n            return this;\r\n        }\r\n        const annotationInstance = new (<any>ParamDecoratorFactory)(...args);\r\n\r\n        (<any>ParamDecorator).annotation = annotationInstance;\r\n        return ParamDecorator;\r\n\r\n        function ParamDecorator(cls: any, unusedKey: any, index: number): any {\r\n            // Use of Object.defineProperty is important since it creates non-enumerable property which\r\n            // prevents the property is copied during subclassing.\r\n            const parameters = cls.hasOwnProperty(PARAMETERS) ?\r\n                (cls as any)[PARAMETERS] :\r\n                Object.defineProperty(cls, PARAMETERS, { value: [] })[PARAMETERS];\r\n\r\n            // there might be gaps if some in between parameters do not have annotations.\r\n            // we pad with nulls.\r\n            while (parameters.length <= index) {\r\n                parameters.push(null);\r\n            }\r\n\r\n            (parameters[index] = parameters[index] || []).push(annotationInstance);\r\n            return cls;\r\n        }\r\n    }\r\n    if (parentClass) {\r\n        ParamDecoratorFactory.prototype = Object.create(parentClass.prototype);\r\n    }\r\n    ParamDecoratorFactory.prototype.ngMetadataName = name;\r\n    (<any>ParamDecoratorFactory).annotationCls = ParamDecoratorFactory;\r\n    return ParamDecoratorFactory;\r\n}\r\n\r\nexport function makePropDecorator(\r\n    name: string, props?: (...args: any[]) => any, parentClass?: any): any {\r\n    const metaCtor = makeMetadataCtor(props);\r\n\r\n    function PropDecoratorFactory(...args: any[]): any {\r\n        if (this instanceof PropDecoratorFactory) {\r\n            metaCtor.apply(this, args);\r\n            return this;\r\n        }\r\n\r\n        const decoratorInstance = new (<any>PropDecoratorFactory)(...args);\r\n\r\n        // tslint:disable-next-line:no-shadowed-variable\r\n        return function PropDecorator(target: any, name: string) {\r\n            const constructor = target.constructor;\r\n            // Use of Object.defineProperty is important since it creates non-enumerable property which\r\n            // prevents the property is copied during subclassing.\r\n            const meta = constructor.hasOwnProperty(PROP_METADATA) ?\r\n                (constructor as any)[PROP_METADATA] :\r\n                Object.defineProperty(constructor, PROP_METADATA, { value: {} })[PROP_METADATA];\r\n            meta[name] = meta.hasOwnProperty(name) && meta[name] || [];\r\n            meta[name].unshift(decoratorInstance);\r\n        };\r\n    }\r\n\r\n    if (parentClass) {\r\n        PropDecoratorFactory.prototype = Object.create(parentClass.prototype);\r\n    }\r\n\r\n    PropDecoratorFactory.prototype.ngMetadataName = name;\r\n    (<any>PropDecoratorFactory).annotationCls = PropDecoratorFactory;\r\n    return PropDecoratorFactory;\r\n}\r\n","import { ANNOTATIONS, PROP_METADATA } from './decorator';\r\nimport { Translate } from '../../i18n';\r\n//import { Cacheable, DefaultCacheProvider } from '../../cache';\r\n\r\n/**\r\n * 元数据解析\r\n * 约束：\r\n * 1、类型装饰器：在某个类型上，某种类型的装饰器，只使用一次，不重复添加；\r\n * 2、属性装饰器：在某个属性上，某种类型的装饰器，只使用一次，不重复添加\r\n */\r\nclass MetadataUtil {\r\n\r\n  // ----------------------------------------\r\n  // 类型元数据\r\n  // ----------------------------------------\r\n\r\n  /**\r\n   * 获取类元数据\r\n   * 返回结果形如：\r\n   * [\r\n   *   Injectable\r\n   *   NgViewModel\r\n   *   NgViewModel\r\n   * ]\r\n   */\r\n  static getClassMetadatas(constructor: any): any[] {\r\n    const metadatas = constructor[ANNOTATIONS];\r\n    return metadatas;\r\n  }\r\n\r\n  /**\r\n   * 获取某个class上的某种装饰器\r\n   * 返回结果：NgViewModel\r\n   */\r\n  static getClassMetadataByName(constructor: any, metadataName: string): any {\r\n    const metadata = this.getClassMetadataByNameWithTranslate(constructor, metadataName, null, null);\r\n    return metadata;\r\n  }\r\n\r\n  static getClassMetadataByNameWithTranslate(\r\n    constructor: any, metadataName: string,\r\n    translateService?: Translate, keysToTranslate?: string[]): any {\r\n    const allClassMetadatas = this.getClassMetadatas(constructor);\r\n    if (!allClassMetadatas) {\r\n      return null;\r\n    }\r\n    const metadata = allClassMetadatas.find((classMetadata: any) => {\r\n      return classMetadata.ngMetadataName === metadataName;\r\n    });\r\n    this.translateMetadataByName(metadata, translateService, keysToTranslate);\r\n    return metadata;\r\n  }\r\n\r\n  // ----------------------------------------\r\n  // 属性元数据\r\n  // ----------------------------------------\r\n\r\n  /**\r\n   * 获取所有属性的所有元数据\r\n   * 返回格式：\r\n   * {\r\n   *   propName1: [ NgDefaultValue, NgMaxLength, NgMinLength],\r\n   *   propName2: [ NgDefaultValue, NgMaxLength, NgMinLength]\r\n   * }\r\n   */\r\n   // @Cacheable({ key: ((context: any, args: any[]) => args[0]), provider: new DefaultCacheProvider() })\r\n  static getPropsMetadatas(constructor: any): any {\r\n    const allPropMetadatas = constructor[PROP_METADATA];\r\n    return allPropMetadatas;\r\n  }\r\n\r\n  /**\r\n   * 获取所有属性的某一类型的元数据\r\n   * 如果同一属性\r\n   * 返回结果：\r\n   * {\r\n   *    propName1: NgDefaultValue,\r\n   *    propName2: NgDefaultValue\r\n   * }\r\n   */\r\n  // @Cache({ provider: new MemoryCacheProvider(new MetadataKeyCompare()), key: ((context: any, args: any[]) => { return { constructor: args[0], metadataName: args[1] } }) })\r\n  static getPropsMetadatasByName(constructor: any, metadataName: string): { [propName: string]: any } {\r\n    const metadatas = this.getPropsMetadatasByNameWithTranslate(constructor, metadataName);\r\n    return metadatas;\r\n  }\r\n  static getPropsMetadatasByNameWithTranslate(\r\n    constructor: any, metadataName: string,\r\n    translateService?: Translate, keysToTranslate?: string[]): { [propName: string]: any } {\r\n    const metadatas = {};\r\n    // 读取构造函数中存储的类属性注解。\r\n    const allPropMetadatas = this.getPropsMetadatas(constructor);\r\n    if (!allPropMetadatas) {\r\n      return metadatas;\r\n    }\r\n    // 遍历所有属性提取注解信息。\r\n    Object.keys(allPropMetadatas).forEach((propName: string) => {\r\n      // 提取当前属性注解对象\r\n      const propMetadatas: any[] = allPropMetadatas[propName];\r\n      // 提取指定类型的注解项\r\n      const metadata = propMetadatas.find((propMetadata: any) => {\r\n        return propMetadata.ngMetadataName === metadataName;\r\n      });\r\n      if (metadata) {\r\n        metadatas[propName] = metadata;\r\n      }\r\n    });\r\n    // 翻译指定属性的值\r\n    this.translateMetadatasByName(metadatas, translateService, keysToTranslate);\r\n    return metadatas;\r\n  }\r\n\r\n  static translateMetadatasByName(metadatas: any, translateService?: Translate, keysToTranslate?: string[])\r\n    : { [propName: string]: any } {\r\n    Object.keys(metadatas).forEach((propName: string) => {\r\n      // 提取指定类型的注解项\r\n      this.translateMetadataByName(metadatas[propName], translateService, keysToTranslate);\r\n    });\r\n    return metadatas;\r\n  }\r\n\r\n  static translateMetadataByName(metadata: any, translateService?: Translate, keysToTranslate?: string[]): any {\r\n    if (metadata && translateService && keysToTranslate) {\r\n      keysToTranslate.forEach((metadataPropKey) => {\r\n        const propertyVariable: string = metadata[metadataPropKey];\r\n        try {\r\n        if (propertyVariable && propertyVariable.startsWith('{{') && propertyVariable.endsWith('}}')) {\r\n          const translateKey = propertyVariable.replace('{{', '').replace('}}', '').trim();\r\n          metadata[metadataPropKey] = translateService.transform(translateKey, null);\r\n        }\r\n        } catch (e) {\r\n          console.info(e);\r\n        }\r\n      });\r\n    }\r\n    return metadata;\r\n  }\r\n\r\n  /**\r\n   * 获取某个属性的所有元数据\r\n   * 返回格式：[ NgDefaultValue, NgMaxLength, NgMinLength]\r\n   */\r\n  static getPropMetadatasByName(constructor: any, propName: string): any[] {\r\n    // 暂不实现\r\n    return null;\r\n  }\r\n\r\n  /**\r\n   * 获取某个属性的某种元数据\r\n   * 返回格式：NgDefaultValue\r\n   */\r\n  static getPropMetadataByName(constructor: any, propName: string, metadataName: string): any {\r\n    // 暂不实现\r\n    return null;\r\n  }\r\n\r\n\r\n  // ----------------------------------------\r\n  // 参数元数据\r\n  // ----------------------------------------\r\n\r\n}\r\n\r\nexport { MetadataUtil };\r\n","/**\r\n * 变更记录\r\n */\r\nexport class Modification {\r\n\r\n  /**\r\n   * 实体变更路径。如：[1, 'name']\r\n   * 说明： 1 为实体主键ID， name 为属性名称\r\n   */\r\n  path?: string[];\r\n\r\n  /**\r\n   * 原值\r\n   */\r\n  preValue?: any;\r\n\r\n  /**\r\n   * 变更后的新值\r\n   *\r\n   * value 值类型会根据 type(变更类型)的不同而不同，当type 为以下类型时：\r\n   * - Add: value的值为json 对象\r\n   * - ValueChange: value的值为string\\number\\boolean等简单数据\r\n   * - Remove: value的值为键值对{[key:string]: value} key为主键字段\r\n   *\r\n   */\r\n  value: any;\r\n\r\n  /**\r\n   * 变更类型\r\n   */\r\n  type: ModifyType;\r\n\r\n  /**\r\n   * 数据是否通过验证\r\n   */\r\n  isValid?: boolean;\r\n\r\n  /**\r\n   * 数据验证结果\r\n   */\r\n  errors?: { [type: string]: string };\r\n\r\n  /**\r\n   * 插入位置\r\n   */\r\n  position?: 1 | -1;\r\n\r\n  /**\r\n   * 变更集的值\r\n   */\r\n  changeSetValue?: any;\r\n  /**\r\n   * 重置数据\r\n   */\r\n  isReset?: boolean;\r\n  entityCreate?: boolean;\r\n  dynamic?: boolean;\r\n  /**\r\n   * 构造函数\r\n   * @param value 新值\r\n   * @param modifyType 变更类型\r\n   * @param path 变更路径\r\n   * @param preValue 旧值\r\n   */\r\n  constructor(value: any, modifyType: ModifyType, path?: string[], preValue?: any, position?: 1 | -1) {\r\n    this.type = modifyType;\r\n    this.value = value;\r\n    this.preValue = preValue;\r\n    this.path = path;\r\n    this.position = position;\r\n  }\r\n}\r\n\r\n/**\r\n * 变更类型\r\n */\r\nexport enum ModifyType {\r\n\r\n  /**\r\n   * 添加\r\n   */\r\n  Add = 'ADD',\r\n  /**\r\n   * 添加数据\r\n   */\r\n  AddData = 'AddData',\r\n  /**\r\n   * 克隆数据\r\n   */\r\n  Clone = 'CLONE',\r\n  /**\r\n   * 删除\r\n   */\r\n  Remove = 'REMOVE',\r\n  RemoveData = 'RemoveData',\r\n\r\n  /**\r\n   * 修改\r\n   */\r\n  ValueChange = 'VALUE_CHANGE',\r\n\r\n  /**\r\n   * 加载\r\n   */\r\n  Load = 'LOAD',\r\n\r\n  /**\r\n   * 未改变\r\n   */\r\n  UnChanged = 'UNCHANGED',\r\n\r\n  /**\r\n   * 分页信息变更\r\n   */\r\n  PaginationInfoChange = 'PAGINATION_INFO_CHANGE',\r\n\r\n  /**\r\n   * 插入\r\n   */\r\n  Insert = 'Insert',\r\n  /**\r\n   * 更新实体\r\n   */\r\n  Update = 'UPDATE'\r\n}\r\n","/*\r\n * @Author: Lucus, Witt\r\n * @Date: 2018-10-30 15:53:59\r\n * @Last Modified by: Witt\r\n * @Last Modified time: 2018-11-08 17:25:08\r\n */\r\n\r\nimport { Modification, ModifyType } from './types';\r\n\r\nfunction isEqual(value: any, other: any) {\r\n  return JSON.stringify(value) === JSON.stringify(other);\r\n}\r\n\r\n/**\r\n * 实体数据变更集\r\n */\r\nclass ChangeSet {\r\n\r\n  /**\r\n   * 变更集合\r\n   */\r\n  protected modifications: Modification[] = [];\r\n\r\n  /**\r\n   *  获取所有的变更记录\r\n   */\r\n  public get changes(): Modification[] {\r\n    return this.modifications;\r\n  }\r\n\r\n  /**\r\n   * 将变更集添加到集合中\r\n   * ### 使用示例\r\n   * ```\r\n   * const changeSet = new ChangeSet();\r\n   * const modify = new Modification('newValue', ModifyType.ValueChange, [1, 'title'], 'oldValue');\r\n   * changeSet.append(modify)\r\n   * ```\r\n   * @param changeItem 变更数据\r\n   */\r\n  public append(modification: Modification) {\r\n    switch (modification.type) {\r\n      case ModifyType.ValueChange:\r\n        this.appendValueChangeModification(modification);\r\n        break;\r\n      case ModifyType.Add:\r\n      case ModifyType.Insert:\r\n      case ModifyType.Clone:\r\n        this.appendAddModification(modification);\r\n        break;\r\n      case ModifyType.Remove:\r\n        this.appendRemoveModification(modification);\r\n        break;\r\n      case ModifyType.Load:\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 添加值变化变更\r\n   */\r\n  private appendValueChangeModification(modification: Modification) {\r\n    const value = modification.value;\r\n\r\n    const existedModification = this.findModifyItemsPath(modification.path);\r\n    if (existedModification) {\r\n\r\n      // 如果存在相同路径的ValueChange类型的变更集，则更新值；\r\n      existedModification.value = value;\r\n    } else {\r\n      const existedAddModification = this.findNewAddItemsPath(modification.path);\r\n      if (existedAddModification) {\r\n\r\n        // @todo：\r\n        // 1、此处逻辑有问题，value是个字符串，不能直接assign；\r\n        // 2、之所以没有出现问题，是因为都是服务器端新增，新增后，客户端清空了所有变更。\r\n        // 如果存在涵盖该ValueChange变更的Add变更，则更新Add变更对应的数据；\r\n        existedAddModification.value = Object.assign({}, existedAddModification.value, value);\r\n      } else {\r\n\r\n        // 其他情况，新增一条ValueChange变更。\r\n        this.modifications.push(modification);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 添加新增变更\r\n   */\r\n  private appendAddModification(modification: Modification) {\r\n    const value = modification.value;\r\n\r\n    const existedModification = this.findNewAddItemsPath(modification.path);\r\n    if (existedModification) {\r\n\r\n      // 1、如果已经存在相同路径的Add变更，则合并Value。\r\n      existedModification.value = existedModification.value.concat(value);\r\n    } else {\r\n\r\n      // 2、如果没有，则新增一条Add变更。\r\n      this.modifications.push(modification);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 添加删除变更\r\n   */\r\n  private appendRemoveModification(modification: Modification) {\r\n\r\n    const path = modification.path;\r\n    const primaryKey = Object.keys(modification.value)[0];\r\n    const primaryKeyValue = modification.value[primaryKey];\r\n\r\n    // 1、存在相同path的新增变更，移除新增变更，不需要添加删除变更；\r\n    // @todo：待重构（1、只考虑了主从情况，2、临时用多重循环实现）\r\n    this.modifications.forEach((addModification: Modification) => {\r\n\r\n      // 只处理新增变更\r\n      if (addModification.type !== ModifyType.Add && addModification.type !== ModifyType.Insert && addModification.type !== ModifyType.Clone) {\r\n        return;\r\n      }\r\n\r\n      // @todo 只考虑主从结构，再深的层次暂不考虑\r\n      if (isEqual(addModification.path, path) === false) {\r\n        return;\r\n      }\r\n\r\n      // 遍历新增新增变更的value（value是个数组），移除相匹配的新增删除\r\n      addModification.value = addModification.value.filter((addDataItem: any) => {\r\n        return addDataItem[primaryKey] !== primaryKeyValue;\r\n      });\r\n    });\r\n\r\n    // 2、移除对应的修改变更\r\n    const fullRemovePath = path.concat(`${primaryKey}:${primaryKeyValue}`);\r\n    this.modifications = this.modifications.filter((valueModification: Modification) => {\r\n      if (valueModification.type !== ModifyType.ValueChange) {\r\n        return true;\r\n      }\r\n      const valueChangePath = Array.from(valueModification.path);\r\n      valueChangePath.pop();\r\n\r\n      // 路径相同进行移除\r\n      const isToRemove = isEqual(valueChangePath, fullRemovePath);\r\n      return !isToRemove;\r\n    });\r\n\r\n    // 先删除下级删除变更，再插入\r\n    // 主要针对从从表删除之后，又删除子表时，根实体上还存在从从表删除变更的场景\r\n    this.removeDescendantRemoveModifications(modification);\r\n    this.modifications.push(modification);\r\n  }\r\n\r\n  /**\r\n   * 清空变更集合\r\n   */\r\n  public clear() {\r\n    this.modifications = [];\r\n  }\r\n\r\n\r\n  /**\r\n   * 根据path获取Add类型的变更记录\r\n   * @param path 变更路径\r\n   */\r\n  private findNewAddItemsPath(path: any[]) {\r\n    return this.modifications.find((value, index) => {\r\n      return isEqual(path, value.path) && (value.type === ModifyType.Add || value.type === ModifyType.Insert || value.type === ModifyType.Clone);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * 根据path获取ValueChange类型的变更记录\r\n   * @param path 变更路径\r\n   */\r\n  private findModifyItemsPath(path: any[]) {\r\n    return this.modifications.find((value, index) => {\r\n      return isEqual(path, value.path) && value.type === ModifyType.ValueChange;\r\n    });\r\n  }\r\n\r\n  /**\r\n   * 删除后代（包括自己）所有的删除变更\r\n   * @todo：临时做一个最小化修改\r\n   */\r\n  private removeDescendantRemoveModifications(parentRemoveModification: Modification): void {\r\n\r\n    const parentPathWithId = this.createRemovePathWithId(parentRemoveModification);\r\n\r\n    // 删除后代修改变更\r\n    this.modifications = this.modifications.filter((modification: Modification) => {\r\n      if (modification.type !== ModifyType.Remove) {\r\n        return true;\r\n      }\r\n      const descendantPathWithId = this.createRemovePathWithId(modification);\r\n      const isDescendant = this.isDescendantPath(parentPathWithId, descendantPathWithId);\r\n      return !isDescendant;\r\n    });\r\n  }\r\n\r\n  /**\r\n   * 获取删除路径的完整格式\r\n   * @summary\r\n   * 1、目前删除变更的路径标记到父集合；\r\n   * 2、为了方便比较，将被删除的数据id加入到路径中\r\n   */\r\n  private createRemovePathWithId(modification: Modification) {\r\n    const path = modification.path;\r\n    const primaryKey = Object.keys(modification.value)[0];\r\n    const primaryKeyValue = modification.value[primaryKey];\r\n    const pathWithId = path.concat([`${primaryKey}:${primaryKeyValue}`]);\r\n    return pathWithId;\r\n  }\r\n\r\n  /**\r\n   * 判断是否是后代节点路径\r\n   * @param parentPath 父节点路径\r\n   * @param descendantPath 后代节点\r\n   */\r\n  private isDescendantPath(parentPath: string[], descendantPath: string[]) {\r\n    if (parentPath.length > descendantPath.length) {\r\n      return false;\r\n    }\r\n\r\n    let isDescendantPath = true;\r\n    parentPath.forEach((parentPathItem: string, parentPathItemIndex: number) => {\r\n      if (parentPathItem !== descendantPath[parentPathItemIndex]) {\r\n        isDescendantPath = false;\r\n        return;\r\n      }\r\n    });\r\n\r\n    return isDescendantPath;\r\n  }\r\n\r\n}\r\n\r\nexport { ChangeSet };\r\n\r\n","import { makePropDecorator } from '../../metadata/index';\r\nimport { ClassType } from '../types';\r\nimport { ValidateRule } from '../validator/index';\r\n\r\nfunction isPlainObject(value): boolean {\r\n  if (!(typeof value === 'object' && value !== null) || Object.prototype.toString.call({}) !== '[object Object]') {\r\n    return false;\r\n  }\r\n  if (Object.getPrototypeOf(value) === null) {\r\n    return true;\r\n  }\r\n  let proto = value;\r\n  while (Object.getPrototypeOf(proto) !== null) {\r\n    proto = Object.getPrototypeOf(proto);\r\n  }\r\n  return Object.getPrototypeOf(value) === proto;\r\n}\r\n\r\nexport interface NgProperty {\r\n\r\n  /**\r\n   * 数据字段名\r\n   * @summary\r\n   * 服务器端返回的数据中，该属性对应的key。\r\n   */\r\n  dataField?: string;\r\n\r\n  /**\r\n   * 原始字段名称（请勿使用，待删除）\r\n   */\r\n  originalDataField?: string;\r\n\r\n  /**\r\n   * 原始字段类型（请勿使用，待删除）\r\n   */\r\n  originalDataFieldType?: string;\r\n\r\n  /**\r\n   * 属性类型\r\n   */\r\n  type?: any;\r\n\r\n  /**\r\n   * 原始字段\r\n   * @description 对应到scheme的path属性\r\n   */\r\n  path?: string;\r\n\r\n}\r\n\r\n\r\n/**\r\n * --------------------------------------------------------------------------------\r\n * NgField\r\n * --------------------------------------------------------------------------------\r\n */\r\n\r\n/** 实体属性注解器名称 */\r\nexport const NG_FIELD = 'NgField';\r\n\r\n/** 实体属性元数据选项 */\r\nexport interface NgFieldProperty extends NgProperty {\r\n\r\n  /** 属性名称 */\r\n  property?: string;\r\n\r\n  /** 字段名称 */\r\n  dataField?: string;\r\n\r\n  /** 原始字段名称 */\r\n  originalDataField?: string;\r\n\r\n  /** 原始字段类型 */\r\n  originalDataFieldType?: string;\r\n\r\n  /** 是否为主键 */\r\n  primary?: boolean;\r\n\r\n  /** 是否为外键 */\r\n  foreign?: boolean;\r\n\r\n  /** 默认值 */\r\n  defaultValue?: any;\r\n\r\n  /** 验证规则 */\r\n  validRules?: ValidateRule[];\r\n\r\n  /** 初始值，用于字段清空后 */\r\n  initValue?: any;\r\n\r\n  /** 启用多语录入 */\r\n  enableMultiLangInput?: boolean;\r\n  /**\r\n   * 启用时区\r\n   */\r\n  enableTimeZone?: boolean;\r\n  /**\r\n   * 原始字段\r\n   * @description 对应到scheme的path属性\r\n   */\r\n  path?: string;\r\n}\r\n\r\n/** 实体属性注解器 */\r\nexport interface NgFieldPropertyDecorator {\r\n  /**\r\n   * @constructor\r\n   * @param obj 参数obj的值类型可以为 NgFieldProperty、string、ClassType\r\n   *\r\n   * 当为string 时，则设其映射字段；\r\n   *\r\n   * 当为ClassType时，则设置集合中的记录类型\r\n   */\r\n  (obj: NgFieldProperty | string | ClassType): any;\r\n  (obj?: NgFieldProperty | string | boolean): any;\r\n  new(obj?: NgFieldProperty | string | boolean): any;\r\n}\r\n\r\nfunction makeNgFieldDecorator(options?: NgFieldProperty | string | boolean): any {\r\n  let metadata: NgFieldProperty = {\r\n    primary: false,\r\n    foreign: false\r\n  };\r\n\r\n  if (options) {\r\n    const paramType = typeof options;\r\n    switch (paramType) {\r\n      case 'boolean':\r\n        metadata.primary = Boolean(options);\r\n        break;\r\n      case 'string':\r\n        metadata.dataField = String(options);\r\n        break;\r\n      case 'object':\r\n        metadata = Object.assign(metadata, options);\r\n        break;\r\n    }\r\n  }\r\n  return metadata;\r\n}\r\n\r\n/**\r\n * 实体属性注解\r\n *\r\n * ### 使用示例\r\n * ```\r\n * export class UserEntity extends Entity {\r\n *      @NgField({\r\n *          primary: true,\r\n *          dataField: 'id',\r\n *          ...\r\n *      })\r\n *      userid: string;\r\n *      userName: string;\r\n * }\r\n * ```\r\n */\r\nexport const NgField: NgFieldPropertyDecorator = makePropDecorator(NG_FIELD, makeNgFieldDecorator);\r\n\r\n\r\n/**\r\n * --------------------------------------------------------------------------------\r\n * NgField\r\n * --------------------------------------------------------------------------------\r\n */\r\n\r\n/** NgList 注解器名称 */\r\nexport const NG_LIST = 'NgList';\r\n\r\n/**\r\n * 集合类型元数据选项\r\n */\r\nexport interface NgListProperty extends NgProperty {\r\n  /** 表名 */\r\n  tableName?: string;\r\n  /** 字段名称 */\r\n  dataField?: string;\r\n  /** 原始字段名称 */\r\n  originalDataField?: string;\r\n  /** 实体类型 */\r\n  type?: any;\r\n  /**\r\n   * 原始字段\r\n   * @description 对应到scheme的path属性\r\n   */\r\n  path?: string;\r\n}\r\n\r\n/** 集合类型注解器 */\r\nexport interface NgListPropertyDecorator {\r\n  /**\r\n   * @constructor\r\n   * @param obj 参数obj的值类型可以为 NgListProperty、string、ClassType\r\n   *\r\n   * 当为string 时，则设其映射字段；\r\n   *\r\n   * 当为ClassType时，则设置集合中的记录类型\r\n   */\r\n  (obj: NgListProperty | string | ClassType): any;\r\n  new(obj: NgListProperty | string | ClassType): any;\r\n}\r\n\r\nfunction makeNgListDecorator(options: NgListProperty | string | ClassType): any {\r\n  if (isPlainObject(options)) {\r\n    return options;\r\n  }\r\n\r\n  const type = typeof options;\r\n  if (type === 'string') {\r\n    return {\r\n      dataField: options\r\n    };\r\n  }\r\n\r\n  if (type === 'function') {\r\n    return {\r\n      type: options\r\n    };\r\n  }\r\n}\r\n\r\n/**\r\n * 实体属性注解\r\n * ### 使用示例\r\n * ```\r\n * export class UserEntity extends Entity {\r\n *      @NgField({\r\n *          primary: true,\r\n *          dataField: 'id',\r\n *          ...\r\n *      })\r\n *      userid: string;\r\n *      userName: string;\r\n *      @NgList({\r\n *          dataField: 'roles',\r\n *          formType: Role\r\n *      })\r\n *      Roles: EntityList<Role>\r\n * }\r\n * ```\r\n */\r\nexport const NgList: NgListPropertyDecorator = makePropDecorator(NG_LIST, makeNgListDecorator);\r\n\r\n\r\n/**\r\n * --------------------------------------------------------------------------------\r\n * NgObject\r\n * --------------------------------------------------------------------------------\r\n */\r\n\r\n/** NgObject 实体属性注解器名称 */\r\nexport const NG_OBJECT = 'NgObject';\r\n\r\n/**\r\n * 引用类型元数据选项\r\n */\r\nexport interface NgObjectProperty extends NgProperty {\r\n  /** 映射字段 */\r\n  dataField?: string;\r\n  /** 原始字段名称 */\r\n  originalDataField?: string;\r\n  /** 表名 */\r\n  tableName?: string;\r\n  /** 引用实体类型 */\r\n  type?: ClassType;\r\n  /** 树分级类型 path|parent */\r\n  hierarchyType?: string;\r\n  /**\r\n   * 原始字段\r\n   * @description 对应到scheme的path属性\r\n   */\r\n  path?: string;\r\n}\r\n\r\n/** 引用类型注解器 */\r\nexport interface NgObjectPropertyDecorator {\r\n  /**\r\n   * @constructor\r\n   * @param obj 参数obj的值类型可以为 NgObjectProperty、string、ClassType\r\n   *\r\n   * 当为string 时，则设其映射字段；\r\n   *\r\n   * 当为ClassType时，则设置集合中的记录类型\r\n   */\r\n  (obj: NgObjectProperty | string | ClassType): any;\r\n  new(obj: NgObjectProperty | string | ClassType): any;\r\n}\r\n\r\nfunction makeNgObjectDecorator(options: NgObjectProperty | string | ClassType): any {\r\n  if (isPlainObject(options)) {\r\n    return options;\r\n  }\r\n\r\n  const type = typeof options;\r\n  if (type === 'string') {\r\n    return {\r\n      dataField: options\r\n    };\r\n  }\r\n\r\n  if (type === 'function') {\r\n    return {\r\n      type: options\r\n    };\r\n  }\r\n}\r\n\r\n/**\r\n * 实体属性注解\r\n * ### 使用示例\r\n *\r\n * ```\r\n *  export class UserEntity entends Entity {\r\n *      @NgField(true)  // 设置为主键\r\n *      id: string;\r\n *      @NgField('name')  // 设置数据映射字段为 name\r\n *      userName: string;\r\n *\r\n *      depid: string;\r\n *\r\n *      @NgObject(Department)  // 设置引用类型为 Department 实体类\r\n *      epartment: Department;\r\n *  }\r\n * ```\r\n */\r\nexport const NgObject: NgObjectPropertyDecorator = makePropDecorator(NG_OBJECT, makeNgObjectDecorator);\r\n\r\n\r\n/**\r\n * --------------------------------------------------------------------------------\r\n * NgDynamicProperty\r\n * --------------------------------------------------------------------------------\r\n */\r\n\r\n/** NgObject 实体属性注解器名称 */\r\nexport const NG_Dynamic = 'NgDynamic';\r\n\r\n/**\r\n * 引用类型元数据选项\r\n */\r\nexport interface NgDynamicProperty extends NgProperty {\r\n  /** 映射字段 */\r\n  dataField?: string;\r\n  /** 原始字段名称 */\r\n  originalDataField?: string;\r\n  /** 表名 */\r\n  tableName?: string;\r\n  /** 引用实体类型 */\r\n  type?: ClassType;\r\n  /**\r\n   * 原始字段\r\n   * @description 对应到scheme的path属性\r\n   */\r\n  path?: string;\r\n}\r\n\r\n/** 引用类型注解器 */\r\nexport interface NgDynamicPropertyDecorator {\r\n  /**\r\n   * @constructor\r\n   * @param obj 参数obj的值类型可以为 NgDynamicProperty、string、ClassType\r\n   *\r\n   * 当为string 时，则设其映射字段；\r\n   *\r\n   * 当为ClassType时，则设置集合中的记录类型\r\n   */\r\n  (obj: NgDynamicProperty | string | ClassType): any;\r\n  new(obj: NgDynamicProperty | string | ClassType): any;\r\n}\r\n\r\nfunction makeNgDynamicDecorator(options: NgDynamicProperty | string | ClassType): any {\r\n  if (isPlainObject(options)) {\r\n    return options;\r\n  }\r\n\r\n  const type = typeof options;\r\n  if (type === 'string') {\r\n    return {\r\n      dataField: options\r\n    };\r\n  }\r\n\r\n  if (type === 'function') {\r\n    return {\r\n      type: options\r\n    };\r\n  }\r\n}\r\n\r\n/**\r\n * 实体属性注解\r\n * ### 使用示例\r\n *\r\n * ```\r\n *  export class UserEntity entends Entity {\r\n *      @NgField(true)  // 设置为主键\r\n *      id: string;\r\n *      @NgField('name')  // 设置数据映射字段为 name\r\n *      userName: string;\r\n *\r\n *      depid: string;\r\n *\r\n *      @NgDynamic(Department)  // 设置引用类型为 Department 实体类\r\n *      epartment: Department;\r\n *  }\r\n * ```\r\n */\r\nexport const NgDynamic: NgDynamicPropertyDecorator = makePropDecorator(NG_Dynamic, makeNgDynamicDecorator);\r\n","import { makeDecorator } from \"../../metadata/index\";\r\n\r\nexport const NG_ENTITY = 'NgEntity';\r\n\r\n/**\r\n * 实体描述\r\n */\r\nexport interface NgEntity{\r\n  /**\r\n   * 原始编号,对应schema中的code\r\n   */\r\n  originalCode: string;\r\n  /**\r\n   * 后端转换完之后的编号,对应schema中的label\r\n   */\r\n  nodeCode: string;\r\n}\r\n/**\r\n * 实体装饰器\r\n */\r\nexport interface NgEntityDecorator {\r\n  (obj?: NgEntity): any;\r\n  new(obj?: NgEntity): any;\r\n}\r\n/**\r\n * 实体装饰器\r\n * @param options options\r\n */\r\nexport function NgEntity(options: NgEntity){\r\n  const decoratorFactory = makeDecorator(NG_ENTITY, (obj: NgEntity) => obj);\r\n  return decoratorFactory(options);\r\n}","import { MetadataUtil } from '../../metadata/index';\r\nimport {\r\n  NG_FIELD, NG_OBJECT, NG_Dynamic, NG_LIST, NgFieldProperty, NgObjectProperty, NgListProperty\r\n} from './field_decorator';\r\nimport { ValidateRule } from '../validator/types';\r\n// import { Cacheable, DefaultCacheProvider } from '../../cache';\r\n\r\n/**\r\n * 属性注解器通用方法\r\n */\r\nexport class FieldMetadataUtil {\r\n  /**\r\n   * 获取实体所有的简单属性元数据\r\n   * @param target 实体类型\r\n   * @returns 形如：{[propName: string]: NgObjectProperty}\r\n   */\r\n  //@Cacheable({ key: ((context: any, args: any[]) => args[0]), provider: new DefaultCacheProvider() })\r\n  static getNgFields(target: any): { [propName: string]: NgFieldProperty } {\r\n    return MetadataUtil.getPropsMetadatasByName(target, NG_FIELD);\r\n  }\r\n\r\n  /**\r\n   * 获取某个简单属性的元数据\r\n   */\r\n  static getNgField(target: any, propName: string): NgFieldProperty {\r\n    const ngFields = this.getNgFields(target);\r\n    const ngField = ngFields[propName] as NgFieldProperty;\r\n    return ngField;\r\n  }\r\n\r\n  /**\r\n   * 获取实体属性在原始数据中的属性名\r\n   */\r\n  static getDataField(target: any, propName: string) {\r\n    const ngField = this.getNgField(target, propName);\r\n    return ngField.dataField || propName;\r\n  }\r\n\r\n  /**\r\n   * 获取标注为NgObject的属性的元数据\r\n   * @param target 实体类型\r\n   * @returns 形如：{[propName: string]: NgObjectProperty}\r\n   */\r\n  //@Cacheable({ key: ((context: any, args: any[]) => args[0]), provider: new DefaultCacheProvider() })\r\n  static getNgObjects(target: any): { [propName: string]: NgObjectProperty } {\r\n    return MetadataUtil.getPropsMetadatasByName(target, NG_OBJECT);\r\n  }\r\n\r\n  static getNgDynamic(target: any): { [propName: string]: NgObjectProperty } {\r\n    return MetadataUtil.getPropsMetadatasByName(target, NG_Dynamic);\r\n  }\r\n\r\n  /**\r\n   * 获取标注为NgList的属性的元数据\r\n   * @param target 实体类型\r\n   * @returns 形如：{[propName: string]: NgListProperty}\r\n   */\r\n  //@Cacheable({ key: ((context: any, args: any[]) => args[0]), provider: new DefaultCacheProvider() })\r\n  static getNgList(target: any): { [propName: string]: NgListProperty } {\r\n    return MetadataUtil.getPropsMetadatasByName(target, NG_LIST);\r\n  }\r\n\r\n  /**\r\n   * 获取实体标注为主键的属性元数据\r\n   * @param target 实体类型\r\n   */\r\n  //@Cacheable({ key: ((context: any, args: any[]) => args[0]), provider: new DefaultCacheProvider() })\r\n  static getPrimaryFieldMetadata(target: any): NgFieldProperty | undefined {\r\n    const ngFieldObj = FieldMetadataUtil.getNgFields(target);\r\n    const primaryKey = Object.keys(ngFieldObj).find((prop: string) => {\r\n      return ngFieldObj[prop].primary;\r\n    });\r\n\r\n    if (primaryKey) {\r\n      const propMeta = ngFieldObj[primaryKey];\r\n      propMeta.property = primaryKey;\r\n      if (!propMeta.dataField) {\r\n        propMeta.dataField = primaryKey;\r\n      }\r\n\r\n      return propMeta;\r\n    }\r\n    return undefined;\r\n  }\r\n\r\n  /**\r\n   * 获取主键名称，没有主键时返回空字符串\r\n   */\r\n  //@Cacheable({ key: ((context: any, args: any[]) => args[0]), provider: new DefaultCacheProvider() })\r\n  static getPrimaryKey(entityType: any) {\r\n    const primaryNgField = this.getPrimaryFieldMetadata(entityType);\r\n    if (!primaryNgField) {\r\n      return '';\r\n    }\r\n    return primaryNgField.property;\r\n  }\r\n\r\n  // static udtMap = {};\r\n\r\n  /**\r\n   * 获取NgField 的验证规则元数据\r\n   * @param target 实体类Type\r\n   */\r\n  //@Cacheable({ key: ((context: any, args: any[]) => args[0]), provider: new DefaultCacheProvider() })\r\n  static getValidationMetadata(target: any): { [key: string]: ValidateRule[] } {\r\n    const fieldMetadatas = FieldMetadataUtil.getNgFields(target);\r\n    // this.udtMap = Object.assign(this.udtMap || {}, FieldMetadataUtil.getNgObjects(target) || {});\r\n    // let udtParentName = '';\r\n    // Object.keys(this.udtMap).forEach(key => {\r\n    //   // 当前实体是udt类型时\r\n    //   if (this.udtMap[key].type.name === target.name) {\r\n    //     // 找出当前udt实体的父级信息\r\n    //     udtParentName = key;\r\n    //   }\r\n    // });\r\n    const metadatas: { [key: string]: ValidateRule[] } = {};\r\n    // let primaryId = '';\r\n    // let udtPrimaryId = '';\r\n    // 不进行验证的属性名\r\n    // const excludeIDs = [];\r\n    // 排除udt的主键\r\n    // Object.keys(fieldMetadatas).forEach(key => {\r\n    //   if (fieldMetadatas[key].primary || fieldMetadatas[key].foreign) {\r\n    //     primaryId = fieldMetadatas[key].dataField;\r\n    //     udtPrimaryId = fieldMetadatas[key].dataField + '_ID';\r\n    //     excludeIDs.push(fieldMetadatas[key].dataField);\r\n    //   }\r\n    // });\r\n    Object.keys(fieldMetadatas).forEach(key => {\r\n      if (fieldMetadatas[key].primary || fieldMetadatas[key].foreign) {\r\n        return;\r\n      }\r\n      const validRules = fieldMetadatas[key].validRules;\r\n      // if (excludeIDs.indexOf(key) > -1) {\r\n      //   return;\r\n      // }\r\n      if (validRules && validRules.length) {\r\n        validRules.map(rule => {\r\n          rule.property = key;\r\n          rule['targetName'] = target.name;\r\n        });\r\n        metadatas[key] = validRules;\r\n      }\r\n    });\r\n    return metadatas;\r\n  }\r\n  //@Cacheable({ key: ((context: any, args: any[]) => args[0]), provider: new DefaultCacheProvider() })\r\n  static getValidationMetadataWithPath(object: any): { [key: string]: ValidateRule[] } {\r\n    const target = object.constructor;\r\n    const fieldMetadatas = FieldMetadataUtil.getNgFields(target);\r\n    const parentPaths = object.getPaths().path || [];\r\n    const metadatas: { [key: string]: ValidateRule[] } = {};\r\n\r\n    Object.keys(fieldMetadatas).forEach(key => {\r\n      if (fieldMetadatas[key].primary || fieldMetadatas[key].foreign) {\r\n        return;\r\n      }\r\n      const validRules = fieldMetadatas[key].validRules;\r\n\r\n      if (validRules && validRules.length) {\r\n        const propertyPath = parentPaths.concat([]);\r\n        propertyPath.push(key);\r\n        const property = propertyPath.join('.');\r\n        validRules.map(rule => {\r\n          rule.property = key;\r\n          rule['targetName'] = target.name;\r\n          rule['path'] = property;\r\n        });\r\n        metadatas[key] = validRules;\r\n      }\r\n    });\r\n    return metadatas;\r\n  }\r\n}\r\n","import { Type } from '@angular/core';\r\nimport { MetadataUtil } from '../../metadata/index';\r\nimport { Entity } from '../entity';\r\nimport { NgEntity, NG_ENTITY } from './entity_decorator';\r\n// import { NgProperty } from './ng_property';\r\n// import { NG_FIELD,   NgFieldProperty   } from './ng_field';\r\n// import { NG_OBJECT,  NgObjectProperty  } from './ng_object';\r\n// import { NG_Dynamic, NgDynamicProperty } from './ng_dynamic';\r\n// import { NG_LIST,    NgListProperty    } from './ng_list';\r\nimport {\r\n  NgProperty, NG_FIELD, NgFieldProperty, NG_OBJECT, NgObjectProperty,\r\n  NG_Dynamic, NgDynamicProperty, NG_LIST,    NgListProperty\r\n} from './field_decorator';\r\n\r\n/**\r\n * 实体元数据工具类\r\n */\r\nexport class EntityMetadataUtil {\r\n\r\n  /**\r\n   * 获取所有属性\r\n   * @todo：封装根据基类获取所有元数据的方法，解决重复代码\r\n   */\r\n  static getAllNgProperties(entityType: Type<Entity>): { [propName: string]: NgProperty } {\r\n    const ngPlainProperties = this.getNgFieldProperties(entityType);\r\n    const ngEntityProperties = this.getNgObjectProperties(entityType);\r\n    const ngDynamicProperties = this.getNgDynamicProperties(entityType);\r\n    const ngEntityListProperties = this.getNgObjectProperties(entityType);\r\n\r\n    return Object.assign({},\r\n      ngPlainProperties,   ngEntityProperties,\r\n      ngDynamicProperties, ngEntityListProperties\r\n    );\r\n  }\r\n  /**\r\n   * 获取实体元数据描述\r\n   */\r\n  static getNgEntityMatadata(entityType: any): NgEntity{\r\n    return MetadataUtil.getClassMetadataByNameWithTranslate(entityType,NG_ENTITY);\r\n  }\r\n  /**\r\n   * 获取NgField的属性元数据\r\n   */\r\n  static getNgFieldProperties(entityType: any): { [propName: string]: NgFieldProperty } {\r\n    return MetadataUtil.getPropsMetadatasByName(entityType, NG_FIELD);\r\n  }\r\n\r\n  /**\r\n   * 获取NgObject属性元数据\r\n   */\r\n  static getNgObjectProperties(entityType: any): { [propName: string]: NgObjectProperty } {\r\n    return MetadataUtil.getPropsMetadatasByName(entityType, NG_OBJECT);\r\n  }\r\n\r\n  /**\r\n   * 获取NgDynamic属性元数据\r\n   */\r\n  static getNgDynamicProperties(entityType: any): { [propName: string]: NgDynamicProperty } {\r\n    return MetadataUtil.getPropsMetadatasByName(entityType, NG_Dynamic);\r\n  }\r\n\r\n  /**\r\n   * 获取NgList属性元数据\r\n   */\r\n  static getNgListProperties(entityType: any): { [propName: string]: NgListProperty } {\r\n    return MetadataUtil.getPropsMetadatasByName(entityType, NG_LIST);\r\n  }\r\n\r\n  /**\r\n   * 获取主键属性元数据\r\n   */\r\n  static getPrimaryKeyProperty(entityType: Type<Entity>): NgFieldProperty {\r\n    let primaryKeyProperty;\r\n    const ngPlainProperties = EntityMetadataUtil.getNgFieldProperties(entityType);\r\n    Object.keys(ngPlainProperties).forEach((propName: string) => {\r\n      const ngProperty = ngPlainProperties[propName] as NgFieldProperty;\r\n      if (ngProperty.primary === true) {\r\n        primaryKeyProperty = ngProperty;\r\n      }\r\n    });\r\n\r\n    return primaryKeyProperty;\r\n  }\r\n}\r\n","export const PARENT_PATH = '__PARENT_PATH__';\r\nexport const PARENT_CLASS = '__PARENT__';\r\n\r\nexport type ClassType<T = any> = new (...args: any[]) => T;\r\n\r\nexport interface Dynamic {\r\n  loadDynamicData(dynamicData: any): void;\r\n}\r\n","import { Entity } from './entity';\r\nimport { EntityTypeCreator } from './entity_type_creator';\r\n\r\nexport function EntityFactory<T extends Entity>(T: new (...args: any[]) => any, data: any): T {\r\n  // const entity = new T(data);\r\n  const entity: any = EntityTypeCreator.create(T, data);\r\n  return entity;\r\n}\r\nexport function DynamicFactory<T extends Entity>(T: new (...args: any[]) => any, data: any): T {\r\n  const entity = new T(data);\r\n  return entity;\r\n}\r\n","import { ModifyType } from \"../changeset\";\r\nimport { Entity } from \"./entity\";\r\nimport { DynamicFactory, EntityFactory } from \"./entity_factory\";\r\nimport { EntityList } from \"./entity_list\";\r\nimport { FieldMetadataUtil, NgDynamicProperty, NgFieldProperty, NgListProperty, NgObjectProperty } from \"./metadata\";\r\nimport { ClassType, PARENT_CLASS, PARENT_PATH } from \"./types\";\r\n\r\nexport class EntityTypeCreator {\r\n  private static buffer = new Map<any, any>();\r\n  public static create(constructor: Function, data: any): Entity {\r\n    const entityType = this.getType(constructor);\r\n    const entity = new entityType(data);\r\n    entity.constructor = constructor;\r\n    return entity;\r\n  }\r\n  // @Cache({ key: ((context: any, args: any[]) => { return args[0] }), provider: new MemoryCacheProvider() })\r\n  public static createType(constructor: Function): ClassType<Entity> {\r\n    const entityType = class EntityType extends Entity {\r\n      constructor(data: any) {\r\n        super(data);\r\n      }\r\n    };\r\n    const entityPrototype = entityType.prototype;\r\n    this.extendProperties(constructor, entityPrototype);\r\n    return entityType;\r\n  }\r\n  private static extendProperties(constructor: Function, entityPrototype: Entity) {\r\n    const ngFields = FieldMetadataUtil.getNgFields(constructor);\r\n    const ngObjects = FieldMetadataUtil.getNgObjects(constructor);\r\n    const ngLists = FieldMetadataUtil.getNgList(constructor);\r\n    const ngDynamic = FieldMetadataUtil.getNgDynamic(constructor);\r\n    this.extendPlainProperty(entityPrototype, ngFields);\r\n    this.extendListProperty(entityPrototype, ngLists);\r\n    this.extendObjectProperty(entityPrototype, ngObjects);\r\n    this.extendDynamicProperty(entityPrototype, ngDynamic);\r\n  }\r\n\r\n  private static extendPlainProperty(entityPrototype: Entity, ngFields: { [key: string]: NgFieldProperty }): void {\r\n    Object.keys(ngFields).forEach(function (propName) {\r\n      const ngField = ngFields[propName] as NgFieldProperty;\r\n      // const dataField = ngField.dataField || propName;\r\n      Object.defineProperty(entityPrototype, propName, {\r\n        get: function () {\r\n          const value = this.getPropValue(propName, ngField);\r\n          return value;\r\n        },\r\n        set: function (newPropValue) {\r\n          // 值相同时不触发变更。\r\n          const oldPropValue = this.getPropValue(propName, ngField);\r\n          if (this.isPropValueChanged(propName, ngField, newPropValue, oldPropValue) === false) {\r\n            return;\r\n          }\r\n          this.setPropValue(propName, ngField, newPropValue);\r\n          const changeSetValue = this.preparePropValue(propName, ngField, newPropValue);\r\n          this.emitValueChange(propName, ngField, newPropValue, oldPropValue, changeSetValue);\r\n        }\r\n      });\r\n    });\r\n  }\r\n  private static extendListProperty(entityPrototype: Entity, ngListMetadata: { [key: string]: NgListProperty }): void {\r\n    Object.keys(ngListMetadata).forEach(function (propertyName) {\r\n      const key = `__${propertyName}__`;\r\n      Object.defineProperty(entityPrototype, propertyName, {\r\n        get: function () {\r\n          let entityList = this[key];\r\n          if (!entityList) {\r\n            const fieldMetadata = ngListMetadata[propertyName] as NgListProperty;\r\n            const path = this.createPath(propertyName);\r\n            const dataField = fieldMetadata.dataField || propertyName;\r\n            const val = this.data[dataField];\r\n            entityList = new EntityList<typeof fieldMetadata.type>();\r\n            entityList[PARENT_CLASS] = this;\r\n            entityList[PARENT_PATH] = path;\r\n            if (val) {\r\n              const entities = val.map(v => EntityFactory<typeof fieldMetadata.type>(fieldMetadata.type, v));\r\n              entityList.loadEntities(entities);\r\n            }\r\n            entityList.onListChanged.subscribe(value => {\r\n              if (value) {\r\n                if (entityList[PARENT_PATH][0] !== value.path[0]) {\r\n                  value.path = entityList[PARENT_PATH].concat(value.path);\r\n                }\r\n                this.setChanges(value);\r\n              }\r\n            });\r\n            this[key] = entityList;\r\n          }\r\n          return entityList;\r\n        },\r\n        set: function (value) {\r\n          this[key] = value;\r\n        }\r\n      });\r\n    });\r\n  }\r\n  private static extendObjectProperty(entityPrototype: Entity, ngObjectMetadata: { [key: string]: NgObjectProperty }) {\r\n    Object.keys(ngObjectMetadata).forEach(function (propertyName) {\r\n      const fieldMetadata = ngObjectMetadata[propertyName] as NgObjectProperty;\r\n      const key = `__${propertyName}__`;\r\n      // 如果没有值用一个空对象代替\r\n      Object.defineProperty(entityPrototype, propertyName, {\r\n        get: function () {\r\n          let childEntity = this[key];\r\n          const path = this.createPath(propertyName);\r\n          if (!childEntity) {\r\n            const dataField = fieldMetadata.dataField || propertyName;\r\n            // val不存在时，用空对象代替\r\n            const val = this.data[dataField] || {};\r\n            childEntity = EntityTypeCreator.buildEntity(path, val, this, fieldMetadata);\r\n            this[key] = childEntity;\r\n          }\r\n          return childEntity;\r\n        },\r\n        set: function (value: any) {\r\n          const path = this.createPath(propertyName);\r\n          const modifyInfo = {\r\n            path: path,\r\n            value: value.data,\r\n            preValue: this[propertyName].data,\r\n            type: ModifyType.ValueChange\r\n          };\r\n          const childEntity = EntityTypeCreator.buildEntity(path, value, this, fieldMetadata);\r\n          this[key] = childEntity;\r\n          this.setChanges(modifyInfo);\r\n        }\r\n      });\r\n    });\r\n  }\r\n  private static extendDynamicProperty(entityPrototype: Entity, ngDynamicMetadata: { [key: string]: NgDynamicProperty }) {\r\n    Object.keys(ngDynamicMetadata).forEach(function (propertyName) {\r\n      const fieldMetadata = ngDynamicMetadata[propertyName] as NgDynamicProperty;\r\n      const key = `__${propertyName}__`;\r\n      \r\n      Object.defineProperty(entityPrototype, propertyName, {\r\n        get: function () {\r\n          let dynamicEntity = this[key];\r\n          const path = this.createPath(propertyName);\r\n          if (!dynamicEntity) {\r\n            const dataField = fieldMetadata.dataField || propertyName;\r\n            const originalData = this.data[dataField] || {};\r\n            dynamicEntity = EntityTypeCreator.buildDynamic(path, originalData, this, fieldMetadata);\r\n            this[key] = dynamicEntity;\r\n          }\r\n          return dynamicEntity;\r\n        },\r\n        set: function (value) {\r\n          const path = this.createPath(propertyName);\r\n          const modifyInfo = {\r\n            path: path,\r\n            value: value.data,\r\n            preValue: this[propertyName].data,\r\n            type: ModifyType.ValueChange\r\n          };\r\n          let dynamicEntity = EntityTypeCreator.buildDynamic(path, value, this, fieldMetadata);\r\n          this[key] = dynamicEntity;\r\n          this.setChanges(modifyInfo);\r\n        }\r\n      });\r\n    });\r\n  }\r\n  private static getType(constructor: Function) {\r\n    if (this.buffer.has(constructor)) {\r\n      return this.buffer.get(constructor);\r\n    }\r\n    const entityType = this.createType(constructor);\r\n    this.buffer.set(constructor, entityType);\r\n    return entityType;\r\n  }\r\n  private static buildEntity(parentPath: string[], value: any, parent: any, fieldMetadata: NgObjectProperty | NgDynamicProperty) {\r\n    let instance;\r\n    if (value instanceof fieldMetadata.type) {\r\n      instance = value;\r\n    } else {\r\n      instance = EntityFactory(fieldMetadata.type, value);\r\n    }\r\n    instance[PARENT_CLASS] = parent;\r\n    instance[PARENT_PATH] = parentPath;\r\n    instance.onValueChanged.subscribe(changes => {\r\n      if (changes) {\r\n        changes.path = (parent[PARENT_PATH] || []).concat(changes.path);\r\n        parent.setChanges(changes);\r\n      }\r\n    });\r\n    return instance;\r\n  }\r\n  private static buildDynamic(parentPath: string[], value: any, parent: any, fieldMetadata: NgObjectProperty | NgDynamicProperty) {\r\n    let instance;\r\n    if (value instanceof fieldMetadata.type) {\r\n      instance = value;\r\n    } else {\r\n      instance = DynamicFactory(fieldMetadata.type, value);\r\n    }\r\n    instance[PARENT_CLASS] = parent;\r\n    instance[PARENT_PATH] = parentPath;\r\n    instance.onValueChanged.subscribe(changes => {\r\n      if (changes) {\r\n        changes.path = (parent[PARENT_PATH] || []).concat(changes.path);\r\n        parent.setChanges(changes);\r\n      }\r\n    });\r\n    return instance;\r\n  }\r\n}","import { Type } from '@angular/core';\r\nimport { Entity } from './entity';\r\nimport { EntityTypeCreator } from './entity_type_creator';\r\n\r\n/**\r\n * 创建实体\r\n * @param entityType 实体类型\r\n * @param entityData 实体数据\r\n */\r\nexport function createEntity<T extends Entity>(entityType: Type<any>, entityData: any): T {\r\n  if (entityType && entityType.prototype && entityType.prototype.typeName === 'ConcreteEntityPrototype') {\r\n    return new entityType(entityData);\r\n  }\r\n  const entity: any = EntityTypeCreator.create(entityType, entityData);//new entityType(entityData);\r\n  entity.constructor = entityType;\r\n  return entity;\r\n}\r\n\r\n/**\r\n * 批量创建实体\r\n * @param entityType     实体类型\r\n * @param entityListData 实体数据数组\r\n */\r\nexport function createEntities<T extends Entity>(entityType: Type<any>, entityListData: any): T[] {\r\n  const entities: T[] = [];\r\n  entityListData.forEach((entityData: any) => {\r\n    const entity = createEntity<T>(entityType, entityData);\r\n    entities.push(entity);\r\n  });\r\n  return entities;\r\n}\r\n\r\n/**\r\n * 已弃用：请使用createEntity方法代替。\r\n */\r\nexport function EntityFactory<T extends Entity>(T: new (...args: any[]) => any, data: any): T {\r\n  const entity = new T(data);\r\n  return entity;\r\n}\r\n\r\n\r\n\r\n","const validationMessage = {};\r\n\r\n/**\r\n * 验证类型定义\r\n */\r\nexport class ValidationTypes {\r\n  static CURRENT_LANGUAGE = 'zh-CNS';\r\n\r\n  /**\r\n   * 条件验证表达式\r\n   */\r\n  static CUSTOM_VALIDATION = `customValidation`;\r\n\r\n  /**\r\n   * 必填\r\n   */\r\n  static REQUIRED = 'required';\r\n\r\n  /**\r\n   * 比较值是否相同\r\n   */\r\n  static EQUALS = 'equals';\r\n\r\n  /**\r\n   * 比较值是否不相同\r\n   */\r\n  static NOT_EQUALS = 'notEquals';\r\n\r\n  /**\r\n   * 数字\r\n   */\r\n  static IS_NUMBER = 'isNumber';\r\n\r\n  /**\r\n   * 整数\r\n   */\r\n  static IS_INT = 'isInt';\r\n\r\n  /**\r\n   * 浮点数\r\n   */\r\n  static IS_FLOAT = 'isFloat';\r\n\r\n  /**\r\n   * 字符串\r\n   */\r\n  static IS_STRING = 'isString';\r\n\r\n  /**\r\n   * 布尔值\r\n   */\r\n  static IS_BOOLEAN = 'isBoolean';\r\n\r\n  /**\r\n   * 日期\r\n   */\r\n  static IS_DATE = 'isDate';\r\n\r\n  /**\r\n   * 日期字符串\r\n   */\r\n  static IS_DATE_STRING = 'isDateString';\r\n\r\n  /**\r\n   * 布尔值字符串\r\n   */\r\n  static IS_BOOLEAN_STRING = 'isBooleanString';\r\n\r\n  /**\r\n   * 数字字符串\r\n   */\r\n  static IS_NUMBER_STRING = 'isNumberString';\r\n\r\n  /**\r\n   * 邮箱地址\r\n   */\r\n  static IS_EMAIL = 'isEmail';\r\n\r\n  /**\r\n   * JSON\r\n   */\r\n  static IS_JSON = 'isJSON';\r\n\r\n  /**\r\n   * 字符串小写\r\n   */\r\n  static IS_LOWERCASE = 'isLowercase';\r\n\r\n  /**\r\n   * 字符串大写\r\n   */\r\n  static IS_UPPERCASE = 'isUppercase';\r\n\r\n  /**\r\n   * 数字范围\r\n   */\r\n  static RANGE = 'range';\r\n\r\n  /**\r\n   * 最小值\r\n   */\r\n  static MIN = 'min';\r\n\r\n  /**\r\n   * 最小值\r\n   */\r\n  static MINVALUE = 'minValue';\r\n\r\n  /**\r\n   * 最大值\r\n   */\r\n  static MAX = 'max';\r\n\r\n  /**\r\n   * 最大值\r\n   */\r\n  static MAXVALUE = 'maxValue';\r\n\r\n  /**\r\n   * 长度\r\n   */\r\n  static LENGTH = 'length';\r\n\r\n  /**\r\n   * 字符串最大长度\r\n   */\r\n  static MAX_LENGTH = 'maxLength';\r\n\r\n  /**\r\n   * 字符串最小长度\r\n   */\r\n  static MIN_LENGTH = 'minLength';\r\n\r\n  /**\r\n   * 最小日期\r\n   */\r\n  static MIN_DATE = 'minDate';\r\n\r\n  /**\r\n   * 最大日期\r\n   */\r\n  static MAX_DATE = 'maxDate';\r\n\r\n  /**\r\n   * 排除非法字符\r\n   */\r\n  static EXCLUDE = 'exclude';\r\n\r\n  /**\r\n   * 正则表达式\r\n   */\r\n  static MATCHES = 'matches';\r\n\r\n  static FIELD_CONTAINER = 'fieldContainer';\r\n  /**\r\n   * 判断验证类型是否合法\r\n   * @param type 验证类型\r\n   */\r\n  static isValidType(type: string): boolean {\r\n    return (\r\n      type !== `isValidType` &&\r\n      type !== 'getMessage' &&\r\n      Object.keys(this)\r\n        .map(key => (this as any)[key])\r\n        .indexOf(type) !== -1\r\n    );\r\n  }\r\n  /**\r\n   * 获取指定验证类型的提示信息\r\n   * @param type 验证类型\r\n   * @returns 返回验证信息\r\n   */\r\n  static getMessage(type: string): string {\r\n    const messages = validationMessage[this.CURRENT_LANGUAGE] || validationMessage['zh-CHS'];\r\n    return messages[type] || '';\r\n  }\r\n\r\n  static setCurrentLanguage(language: string) {\r\n    this.CURRENT_LANGUAGE = language;\r\n  }\r\n}\r\n\r\nvalidationMessage['zh-CHS'] = {\r\n  fieldContainer: `$target 第 $value 行`,\r\n  required: `请输入'$property'`,\r\n  equals: `'$property'的值与$constraint1不相等`,\r\n  notEquals: `'$property'的值不能与'$constraint1'相同`,\r\n  isNumber: `'$property'的值不是数字`,\r\n  isInt: `'$property'的值不是整数`,\r\n  isFloat: `'$property'的值不是浮点型数字`,\r\n  isBoolean: `'$property'的值不是布尔值`,\r\n  isDate: `'$property'的值不是有效日期`,\r\n  isEmail: `邮箱地址不正确`,\r\n  min: `'$property'的值不应小于$constraint1`,\r\n  minValue: `'$property'的值不应小于$constraint1`,\r\n  minDate: `'$property'的日期不应早于$constraint1`,\r\n  max: `'$property'的值不应大于$constraint1`,\r\n  maxValue: `'$property'的值不应大于$constraint1`,\r\n  maxDate: `'$property'不应晚于$constraint1`,\r\n  isBooleanString: `'$property'的值不是有效布尔值`,\r\n  isDateString: `'$property'的值不是有效的日期`,\r\n  isLowercase: `'$property'的值应全部为小写字符串`,\r\n  isUppercase: `'$property'的值应全部为大写字符串`,\r\n  length: `'$property'的长度应介于$constraint1~$constraint2之间`,\r\n  range: `'$property'的值应介于$constraint1~$constraint2之间`,\r\n  maxLength: `'$property'的长度不得大于$constraint1`,\r\n  minLength: `'$property'的长度不得小于$constraint1`,\r\n  isNumberString: `'$property'的值不是数字`,\r\n  exclude: `'$property'的值不能包含：$constraint1`,\r\n  matches: `'$property'校验不通过`\r\n};\r\nvalidationMessage['en'] = {\r\n  fieldContainer: `$target row $value`,\r\n  required: `Please input '$property'`,\r\n  equals: `'$property' should equals '$constraint1'`,\r\n  notEquals: `'$property' should not equals '$constraint1'`,\r\n  isNumber: `'$property' should be number`,\r\n  isInt: `'$property' should be integer`,\r\n  isFloat: `'$property' should be float`,\r\n  isBoolean: `'$property' should be boolean`,\r\n  isDate: `'$property' should be date`,\r\n  isEmail: `'$property' should be e-mail address`,\r\n  min: `'$property' should not less than $constraint1`,\r\n  minValue: `'$property' should not less than $constraint1`,\r\n  minDate: `'$property' should not early than $constraint1`,\r\n  max: `'$property' should not bigger than $constraint1`,\r\n  maxValue: `'$property' should not bigger than $constraint1`,\r\n  maxDate: `'$property' should not late than $constraint1`,\r\n  isBooleanString: `'$property' should be boolean string`,\r\n  isDateString: `'$property' should be date string`,\r\n  isLowercase: `'$property' should be lowercase charactor`,\r\n  isUppercase: `'$property' should be uppercase charactor`,\r\n  length: `'$property' length should between $constraint1~$constraint2之间`,\r\n  range: `'$property' value should between $constraint1~$constraint2之间`,\r\n  maxLength: `'$property' should not longer than $constraint1`,\r\n  minLength: `'$property' should not shorter than $constraint1`,\r\n  isNumberString: `'$property' should be number string`,\r\n  exclude: `'$property' should not include $constraint1`,\r\n  matches: `'$property' calibration failed`\r\n};\r\nvalidationMessage['zh-CHT'] = {\r\n  fieldContainer: `$target 第 $value 行`,\r\n  required: `請輸入'$property'`,\r\n  equals: `'$property'的值與$constraint1不相等`,\r\n  notEquals: `'$property'的值不能與'$constraint1'相同`,\r\n  isNumber: `'$property'的值不是數字`,\r\n  isInt: `'$property'的值不是整數`,\r\n  isFloat: `'$property'的值不是浮點型數字`,\r\n  isBoolean: `'$property'的值不是佈爾值`,\r\n  isDate: `'$property'的值不是有效日期`,\r\n  isEmail: `郵箱地址不正確`,\r\n  min: `'$property'的值不應小於$constraint1`,\r\n  minValue: `'$property'的值不應小於$constraint1`,\r\n  minDate: `'$property'的日期不應早於$constraint1`,\r\n  max: `'$property'的值不應大於$constraint1`,\r\n  maxValue: `'$property'的值不應大於$constraint1`,\r\n  maxDate: `'$property'不應晚於$constraint1`,\r\n  isBooleanString: `'$property'的值不是有效佈爾值`,\r\n  isDateString: `'$property'的值不是有效的日期`,\r\n  isLowercase: `'$property'的值應全部爲小冩字符串`,\r\n  isUppercase: `'$property'的值應全部爲大冩字符串`,\r\n  length: `'$property'的長度應介於$constraint1~$constraint2之間`,\r\n  range: `'$property'的值應介於$constraint1~$constraint2之間`,\r\n  maxLength: `'$property'的長度不得大於$constraint1`,\r\n  minLength: `'$property'的長度不得小於$constraint1`,\r\n  isNumberString: `'$property'的值不是數字`,\r\n  exclude: `'$property'的值不能包含：$constraint1`,\r\n  matches: `'$property'校驗不通過`\r\n};\r\n","import { FrameContext } from \"../../frame/index\";\r\n\r\n/**\r\n * 验证错误信息\r\n */\r\nexport class ValidationError {\r\n  /**\r\n   * 所属实体对象\r\n   */\r\n  target?: any;\r\n\r\n  /**\r\n   * 验证实体属性名称\r\n   */\r\n  property: string;\r\n\r\n  /**\r\n   * 属性名称\r\n   */\r\n  propertyName?: string;\r\n  /**\r\n   * 验证实体属性值\r\n   */\r\n  value?: any;\r\n\r\n  /**\r\n   * 验证失败的规则\r\n   * @summary {[formType-规则名称]: string - 验证信息 }\r\n   */\r\n  constraints: { [type: string]: string; };\r\n\r\n  /**\r\n   * 子对象验证错误信息集合\r\n   */\r\n  children: ValidationError[];\r\n\r\n  /**\r\n   * 待验证的对象是否为数组集合\r\n   */\r\n  isArray = false;\r\n\r\n  /**\r\n   * 待验证的对象所属集合中的索引\r\n   */\r\n  index = undefined;\r\n\r\n  /**\r\n   * 验证字段名\r\n   */\r\n  field: string;\r\n  /**\r\n   * 校验规则\r\n   */\r\n  rule: any;\r\n  /**\r\n   * 字段绑定路径\r\n   */\r\n  binding?: string;\r\n  frameContext?: FrameContext;\r\n  /**\r\n   * 错误对应字段的完整绑定路径\r\n   */\r\n  fullPath?: string;\r\n}\r\n","// tslint:disable: max-line-length\r\nimport { Validator } from './validator';\r\nimport { ValidateRule } from './types';\r\nimport { ValidationError } from './validation_error';\r\nimport { Entity } from '../entity';\r\nimport { ValidationTypes } from './validation_types';\r\nimport { EntityList } from '../entity_list';\r\nimport { FieldMetadataUtil, NgFieldProperty } from '../metadata/index';\r\nimport { DateUtil } from '../../utils/date_util';\r\nimport { FrameContext } from '../../frame/index';\r\n\r\n/**\r\n * 执行数据验证\r\n */\r\nexport class ValidationExecutor<T extends Entity> {\r\n\r\n  constructor(private validator: Validator<T>) { }\r\n\r\n  /** 异步验证请求集合 */\r\n  awaitingPromises: Promise<any>[] = [];\r\n  /**\r\n   * 将信息中的关键字替换为具体实体对象中的信息\r\n   * @param message 验证信息\r\n   * @param metadata 验证规则\r\n   * @param value 待验证的值\r\n   */\r\n  public static replaceMessageSpecialTokens(message: any, metadata: ValidateRule, value: any) {\r\n    let messageString: string;\r\n    if (message instanceof Function) {\r\n      messageString = (message as (args: ValidateRule) => string)(metadata);\r\n    } else if (typeof message === 'string') {\r\n      messageString = message as string;\r\n    }\r\n\r\n    if (messageString && metadata.constraints instanceof Array) {\r\n      metadata.constraints.forEach((constraint, index) => {\r\n        messageString = messageString.replace(new RegExp(`\\\\$constraint${index + 1}`, 'g'), constraint);\r\n      });\r\n    }\r\n\r\n    if (messageString && value !== undefined && value !== null) {\r\n      messageString = messageString.replace(/\\$value/g, value);\r\n    }\r\n\r\n    if (messageString) {\r\n      messageString = messageString.replace(/\\$property/g, metadata.property);\r\n    }\r\n\r\n    if (messageString) {\r\n      messageString = messageString.replace(/\\$target/g, metadata.targetName);\r\n    }\r\n\r\n    return messageString;\r\n  }\r\n\r\n  /**\r\n   * 验证实例对象\r\n   * @param object 验证实例对象\r\n   * @param newValue 实体将要更新的值\r\n   * @param validationErrors 验证信息集合\r\n   * @param propertyName 实例对象属性\r\n   * @param index 所属集合实例中索引\r\n   */\r\n  execute(object: T, newValue, validationErrors: ValidationError[], propertyName?: string, index?: any, externalRules?: Map<string, ValidateRule[]>, currentRowId?: string, frameContext?: FrameContext) {\r\n    // if (!currentRowId) {\r\n    //   currentRowId = object.primaryValue;\r\n    // }\r\n    if (!externalRules && frameContext) {\r\n      externalRules = frameContext.form.getValidationRules();\r\n    }\r\n    // 提取实体上定义的验证描述\r\n    // 格式{key:[rule1,rule2]}\r\n    let validateMetadatas = FieldMetadataUtil.getValidationMetadataWithPath(object);\r\n    const remainedExternalRules = new Map<string, ValidateRule[]>();\r\n\r\n    // 合并额外验证规则\r\n    if (externalRules) {\r\n      // const parentPathArray: string[] = object['__PARENT_PATH__'] ? [...object['__PARENT_PATH__']] : [''];\r\n      // if (parentPathArray.length > 1) {\r\n      //   parentPathArray[0] = '';\r\n      // }\r\n      const parentPathArray = [];\r\n      let objectCursor = object;\r\n      while (objectCursor && objectCursor !== objectCursor['__PARENT__']) {\r\n        const cursorParentPath = objectCursor['__PARENT_PATH__'] ? objectCursor['__PARENT_PATH__'][1] : '';\r\n        // if (parentPathArray[parentPathArray.length - 1] !== cursorParentPath) {\r\n        parentPathArray.push(cursorParentPath);\r\n        // }\r\n        objectCursor = objectCursor['__PARENT__'];\r\n        if (objectCursor instanceof EntityList) {\r\n          objectCursor = objectCursor['__PARENT__'];\r\n        }\r\n      }\r\n      const parentPath = parentPathArray.reverse().join('/');\r\n\r\n      externalRules.forEach((rules, path) => {\r\n        if (path) {\r\n          // 提取额外验证规则字段路径\r\n          const pathArray = path.split('/');\r\n          // 提取字段名称\r\n          const fieldName = pathArray.pop();\r\n          // 提取字段父路径\r\n          const fieldParentPath = pathArray.join('/');\r\n          // 匹配外部验证规则和实体验证规则父路径\r\n          if (parentPath === fieldParentPath) {\r\n            validateMetadatas[fieldName] = [...(validateMetadatas[fieldName] || [])];\r\n            // 合并外部校验规则到实体校验规则，并同步外部验证规则显示信息至实体验证规则，如：中英文字段描述、字段所在位置。\r\n            if (rules.length) {\r\n              let targetId = '';\r\n              rules.forEach(rule => {\r\n                if (rule.targetId && rule.targetId.length > targetId.length) {\r\n                  targetId = rule.targetId;\r\n                }\r\n                validateMetadatas[fieldName].push(rule);\r\n              });\r\n              validateMetadatas[fieldName].forEach((validateRule: ValidateRule) => {\r\n                validateRule.targetId = targetId;\r\n                validateRule.targetName = rules[0].targetName;\r\n                validateRule.property = rules[0].property;\r\n                if (rules[0].frameContext) {\r\n                  validateRule.frameContext = rules[0].frameContext;\r\n                }\r\n                validateRule.fullPath = rules[0].fullPath;\r\n                validateRule['initialized'] = true;\r\n              });\r\n            }\r\n          } else {\r\n            remainedExternalRules.set(path, rules);\r\n          }\r\n        }\r\n      });\r\n    }\r\n    // 处理校验规则中的属性名称\r\n    // 场景为前端未开启校验或form校验规则中对应绑定路径中对应控件未开启校验，导致上一步骤中组件名、字段名未能同步为对应中文\r\n    if (validateMetadatas && Object.keys(validateMetadatas).length > 0) {\r\n      Object.keys(validateMetadatas).forEach((fieldName: string) => {\r\n        const validateRules = validateMetadatas[fieldName];\r\n        if (validateRules && validateRules.length > 0) {\r\n          const firstValidateRule = validateRules[0];\r\n          const path = firstValidateRule['path'];\r\n          if (path) {\r\n            validateRules.forEach((validateRule: ValidateRule) => {\r\n              // 将initialized判断外移减少代码执行次数\r\n              if (validateRule['initialized'] !== true) {\r\n                const bindingPaths = path.split('.');\r\n                const form = this.getForm(bindingPaths, frameContext);\r\n                const formControl = this.getFormControl(bindingPaths, frameContext);\r\n                if (formControl) {\r\n                  validateRule.targetId = formControl.id;\r\n                  validateRule.targetName = form && form.formGroupName;\r\n                  validateRule.property = formControl.name || formControl.defaultI18nValue || '';\r\n                }\r\n              }\r\n            });\r\n          }\r\n        }\r\n      });\r\n    }\r\n    // 过滤出当前验证属性的验证规则\r\n    if (propertyName) {\r\n      validateMetadatas = Object.keys(validateMetadatas)\r\n        .filter(key => key === propertyName)\r\n        .reduce((val, curr) => Object.assign({}, val, { [curr]: validateMetadatas[curr] }), {});\r\n    }\r\n    // validateMetadatas = {rule:当前属性的所有校验规则}\r\n    Object.keys(validateMetadatas).filter((key: string) =>\r\n      object && (\r\n        object.hasOwnProperty(key) ||\r\n        (\r\n          object.constructor.prototype &&\r\n          object.constructor.prototype.typeName &&\r\n          object.constructor.prototype.hasOwnProperty(key)\r\n        ) ||\r\n        object['__proto__'].hasOwnProperty(key)\r\n      )\r\n    ).forEach(key => {\r\n      // todo: 没用兼容value是undefined的情况\r\n      let value = newValue;\r\n      if (newValue === undefined) {\r\n        value = (object as any)[key];\r\n      }\r\n      let isMultLanguageField = false;\r\n      const multiLangFields = this.getMultiLanguageFields(object);\r\n      if (multiLangFields && multiLangFields.length > 0) {\r\n        if (multiLangFields.includes(key)) {\r\n          isMultLanguageField = true;\r\n        }\r\n      }\r\n      // const value = newValue || \r\n      const validateRules: ValidateRule[] = validateMetadatas[key];\r\n      if (validateRules.length) {\r\n        const { property: fieldName, targetId: field, frameContext, fullPath } = validateRules[0];\r\n        // const fieldContainerName = Number.isInteger(index) ?\r\n        // `${validateRules[0].targetName} 第${index + 1}行` : validateRules[0].targetName;\r\n        const fieldContainerName = Number.isInteger(index) ?\r\n          ValidationExecutor.replaceMessageSpecialTokens(\r\n            ValidationTypes.getMessage(ValidationTypes.FIELD_CONTAINER),\r\n            validateRules[0], index + 1\r\n          ) : validateRules[0].targetName;\r\n        const validationDisplayName = fieldContainerName ? `${fieldContainerName} - ${fieldName}` : `${fieldName}`;\r\n        // const property = validateRules['path'] || key;\r\n        const validationError = this.generateValidationError(object, value, key, validationDisplayName, index, field, frameContext, fullPath);\r\n        if (index !== undefined) {\r\n          validationError['index'] = index;\r\n        }\r\n        validationErrors.push(validationError);\r\n        this.defaultValidations(object, value, validateRules, validationError, isMultLanguageField, currentRowId);\r\n      }\r\n    });\r\n\r\n    this.objectValidations(object, validationErrors, propertyName, index, remainedExternalRules, currentRowId, frameContext);\r\n\r\n    this.listValidations(object, validationErrors, propertyName, index, remainedExternalRules, frameContext);\r\n    // this.sortValidationErrors(validationErrors);\r\n\r\n    // todo 存在某些ngObject类型的数据，界面上没有，实体中有，实体设置了必填，导致验证不通过无法保存的问题\r\n    // if (!propertyName) {\r\n    //     this.objectValidations(object, validationErrors);\r\n    // }\r\n  }\r\n\r\n\r\n\r\n  private getMultiLanguageFields(entity: any) {\r\n    if (entity && entity.constructor) {\r\n      const ngFields = FieldMetadataUtil.getNgFields(entity.constructor);\r\n      return Object.keys(ngFields).filter((fieldName: string) => ngFields[fieldName].enableMultiLangInput);\r\n    }\r\n    return null;\r\n  }\r\n  /**\r\n   * 清除通过验证信息\r\n   * @param errors 验证失败信息\r\n   */\r\n  stripEmptyErrors(errors: ValidationError[]) {\r\n    return errors.filter(error => {\r\n      if (error.children) {\r\n        error.children = this.stripEmptyErrors(error.children);\r\n      }\r\n\r\n      if (Object.keys(error.constraints).length === 0) {\r\n        if (error.children.length === 0) {\r\n          return false;\r\n        } else {\r\n          delete error.constraints;\r\n        }\r\n      }\r\n\r\n      return true;\r\n    });\r\n  }\r\n\r\n  /**\r\n   * 生成未通过验证的对象\r\n   * @param object 要验证的实体实例对象\r\n   * @param value 要验证的值\r\n   * @param propertyName 待验证的实体属性名称\r\n   * @param index 验证数据索引\r\n   * @param field 待验证字段\r\n   */\r\n  private generateValidationError(object: any, value: any, property: string, propertyName?: string, index?: number, field?: string, frameContext?: FrameContext, fullPath?: string) {\r\n    const validationError = new ValidationError();\r\n\r\n    validationError.target = object;\r\n    validationError.value = value;\r\n\r\n    validationError.property = property;\r\n    validationError.propertyName = propertyName;\r\n    validationError.field = field;\r\n    validationError.index = index;\r\n    validationError.children = [];\r\n    validationError.constraints = {};\r\n    if (frameContext) {\r\n      validationError.frameContext = frameContext;\r\n    }\r\n    validationError.fullPath = fullPath;\r\n    return validationError;\r\n  }\r\n\r\n  /**\r\n   * 验证实体中的属性\r\n   * @param object 要验证的实体实例对象\r\n   * @param value 要验证的值\r\n   * @param validateRules 验证规则\r\n   * @param errorMap 难证信息。{[key]: message}\r\n   *\r\n   * key: 验证规则名称\r\n   * message: 验证信息\r\n   */\r\n  private defaultValidations(object: T, value: any, validateRules: ValidateRule[], validationError: ValidationError, isMultLanguageField?: boolean, currentRowId?: string) {\r\n    const errorMap = validationError.constraints;\r\n    return validateRules\r\n      .filter(validateRule => {\r\n        // 验证实体属性是否符合规则\r\n        const validValue = this.validator.validateValueByMetadata(object, value, validateRule, isMultLanguageField, currentRowId);\r\n        if (validValue instanceof Promise) {\r\n          const promise = validValue.then(isValid => {\r\n            if (!isValid) {\r\n              const { type, messageString: message } = this.createValidationError(object, value, validateRule);\r\n              errorMap[type] = message;\r\n              validationError.rule = validateRule;\r\n            }\r\n          });\r\n          this.awaitingPromises.push(promise);\r\n        }\r\n        return !validValue;\r\n      })\r\n      .forEach(validateRule => {\r\n        // 不符合规则，生成错误信息\r\n        const { type: key, messageString: message } = this.createValidationError(object, value, validateRule);\r\n        errorMap[key] = message;\r\n        validationError.rule = validateRule;\r\n      });\r\n  }\r\n\r\n  /**\r\n   * 验证列表中的每条记录\r\n   * @param object 要验证的实体实例对象\r\n   * @param errors 验证失败的信息集合\r\n   * @param property 属性名称\r\n   * @param parentIndex 当前集合的父对象所属集合列表中的索引。\r\n   */\r\n  private listValidations(\r\n    object: any,\r\n    errors: ValidationError[],\r\n    property?: string,\r\n    parentIndex?: any,\r\n    externalRules?: Map<string, ValidateRule[]>,\r\n    frameContext?: FrameContext\r\n  ) {\r\n    const INDEX_LABEL = \"__ACTUAL_INDEX__\";\r\n    const listFields = FieldMetadataUtil.getNgList(object.constructor);\r\n    if (!listFields) {\r\n      return;\r\n    }\r\n    let keys = Object.keys(listFields);\r\n    if (property) {\r\n      keys = keys.filter(key => key === property);\r\n    }\r\n    keys.forEach(propertyName => {\r\n      const metadata = listFields[propertyName];\r\n      const clzType = metadata.type;\r\n      const value = object[propertyName] as EntityList<T>;\r\n      if (value) {\r\n        const parentPaths = object.getPaths().path || [];\r\n        parentPaths.push(propertyName);\r\n        const validationError = this.generateValidationError(object, value.items, parentPaths.join('.'), propertyName, parentIndex);\r\n        validationError.isArray = true;\r\n        errors.push(validationError);\r\n        value.items.forEach((entity, index) => {\r\n          let actualIndex = entity[INDEX_LABEL] ? entity[INDEX_LABEL] : index;\r\n          this.execute(entity, undefined, validationError.children, undefined, actualIndex, externalRules, entity.primaryValue, frameContext);\r\n        });\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * 验证实体中的引用对象\r\n   * @param object 要验证的实体对象\r\n   * @param errors 错误信息集合\r\n   */\r\n  private objectValidations(object: T, errors: ValidationError[], property?: string, parentIndex?: any, externalRules?: Map<string, ValidateRule[]>, currentRowId?: string, frameContext?: FrameContext) {\r\n    const objectFields = FieldMetadataUtil.getNgObjects(object.constructor);\r\n    if (!objectFields || Object.keys(objectFields).length < 1) {\r\n      return;\r\n    }\r\n\r\n    let keys = Object.keys(objectFields);\r\n    if (property) {\r\n      keys = keys.filter(key => key === property);\r\n    }\r\n    keys.forEach(propertyName => {\r\n      const metadata = objectFields[propertyName];\r\n      const objectType = metadata.type;\r\n      const value = object[propertyName];\r\n      if (value) {\r\n        this.execute(value, undefined, errors, undefined, parentIndex, externalRules, currentRowId, frameContext);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * 创建验证规则信息\r\n   * @param object 要验证的实体对象\r\n   * @param value 验证的值\r\n   * @param metadata 验证规则\r\n   */\r\n  private createValidationError(object: T, value: any, metadata: ValidateRule) {\r\n    const targetName = object.constructor ? (object.constructor as any).name : undefined;\r\n    const type = metadata.type;\r\n    let message = metadata.message;\r\n\r\n    if (!message) {\r\n      message = ValidationTypes.getMessage(type);\r\n    }\r\n\r\n    if (ValidationTypes.isValidType(type) && (type === ValidationTypes.MAXVALUE || type === ValidationTypes.MINVALUE)) {\r\n      if (this.isDateString(value) && metadata.constraints && metadata.constraints.length) {\r\n        // 获取日期类型的提示信息\r\n        const extType = type === ValidationTypes.MINVALUE ? ValidationTypes.MIN_DATE : ValidationTypes.MAX_DATE;\r\n        message = ValidationTypes.getMessage(extType);\r\n        /*if (metadata.constraints[0]) {\r\n          metadata.constraints[0] = DateUtil.format(metadata.constraints[0], 'yyyy-MM-dd HH:mm:ss');\r\n        }*/\r\n      }\r\n    }\r\n\r\n    const messageString = ValidationExecutor.replaceMessageSpecialTokens(message, metadata, value);\r\n    return { type, messageString, metadata };\r\n  }\r\n  private getFrameContext(bindingPaths: string[], eventFrameContext?: FrameContext) {\r\n    if (!bindingPaths || bindingPaths.length < 1 || !eventFrameContext) {\r\n      return null;\r\n    }\r\n    const paths = bindingPaths.concat([]);\r\n    paths.pop();\r\n    const bindingPath = paths.join('/');\r\n    const frameContext = eventFrameContext.appContext.frameContextManager.getFrameContexts().find((context: FrameContext) => context && context.viewModel && context.viewModel.bindingPath && context.viewModel.bindingPath.split('/').filter(p => p).join('/') === bindingPath);\r\n    return frameContext || null;\r\n  }\r\n  private getForm(bindingPaths: string[], eventFrameContext?: FrameContext) {\r\n    if (!bindingPaths || bindingPaths.length < 1 || !eventFrameContext) {\r\n      return null;\r\n    }\r\n    const frameContext = this.getFrameContext(bindingPaths, eventFrameContext);\r\n    return frameContext && frameContext.form || null;\r\n  }\r\n  private getFormControl(bindingPaths: string[], eventFrameContext?: FrameContext) {\r\n    if (!bindingPaths || bindingPaths.length < 1 || !eventFrameContext) {\r\n      return null;\r\n    }\r\n    const paths = bindingPaths.concat([]);\r\n    const propertyName = paths.pop();\r\n    const frameContext = this.getFrameContext(bindingPaths, eventFrameContext);\r\n    const formControl = frameContext && frameContext.form && frameContext.form.ngFormControls && frameContext.form.ngFormControls[propertyName] || null;\r\n    return formControl;\r\n  }\r\n  isDateString(value: any): boolean {\r\n    const regex = /\\d{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])(T|\\s?)?(([0-2]\\d:[0-5]\\d)?(:[0-5]\\d(?:\\.\\d+)))?(?:Z|\\+[0-2]\\d(?:\\:[0-5]\\d)?)?/g;\r\n    return regex.test(value);\r\n  }\r\n}\r\n","import { ValidationError } from './validation_error';\r\nimport { ValidationResult } from './types';\r\n/**\r\n * 数据验证帮助类，提供一些公共的操作方法函数\r\n */\r\nexport class ValidationUtils {\r\n\r\n  /**\r\n   * 将错误信息集合转变为可读性高的文本数组\r\n   * @param errors 验证失败错误集合\r\n   * @param messages 返回的错误信息文本集合\r\n   * @param parentPath 验证属性上级路径\r\n   */\r\n  static createDetailedErrorMessage(\r\n    errors: ValidationError[],\r\n    messages: string[] = [],\r\n    parentPath: string = ''\r\n  ): string[] {\r\n    errors.forEach(error => {\r\n      const targetName = error.target ? error.target.constructor.name : '';\r\n      const property = error.propertyName;\r\n\r\n      const propConstraintFailed = (propertyName: string): string =>\r\n        `   - 属性 ${parentPath}${propertyName} 验证失败的规则:  \\n` +\r\n        `${Object.keys(error.constraints)\r\n          .map(ruleName => {\r\n            return `        #${ruleName}: ${error.constraints[ruleName]}\\n`;\r\n          })\r\n          .join('')}`;\r\n\r\n      if (!parentPath) {\r\n        messages.push(`类型为 ${targetName} 的实例对象数据验证失败，详细信息：\\n`);\r\n\r\n        if (error.constraints) {\r\n          messages.push(propConstraintFailed(property));\r\n        }\r\n\r\n        if (error.children.length) {\r\n          ValidationUtils.createDetailedErrorMessage(error.children, messages, property);\r\n        }\r\n      } else {\r\n        const formattedProperty = Number.isInteger(+error.index)\r\n          ? `[${error.index}].${property}`\r\n          : `${parentPath ? `.` : ``}${property}`;\r\n        if (error.constraints) {\r\n          messages.push(propConstraintFailed(formattedProperty));\r\n        }\r\n        if (error.children.length) {\r\n          ValidationUtils.createDetailedErrorMessage(error.children, messages, `${parentPath}${formattedProperty}`);\r\n        }\r\n      }\r\n    });\r\n\r\n    return messages;\r\n  }\r\n\r\n  /**\r\n   * 错误信息集合转换为简单对象格式\r\n   * @param errors 错误信息集合\r\n   * @param errObj 返回简单对象。如:\r\n   * ```\r\n   * { name: { required: '必填', max: '最大值99' },\r\n   *   list: {\r\n   *      0: { name:{required: '必填'},\r\n   *           age: { min: '最小值 20' }\r\n   *         },\r\n   *      2: { ... }\r\n   *   }\r\n   * }\r\n   *\r\n   * ```\r\n   */\r\n  static convertErrorsToNormalObject(errors: ValidationError[], errObj: {}): {} {\r\n    errors.forEach(err => {\r\n      const property = err.propertyName;\r\n\r\n      const buildArray = (childErrors: ValidationError[]) => {\r\n        const itemErr = {};\r\n        childErrors.forEach((childErr: ValidationError) => {\r\n          if (childErr.children.length) {\r\n            itemErr[childErr.index] = ValidationUtils.convertErrorsToNormalObject(childErr.children, childErr);\r\n          } else {\r\n            if (itemErr[childErr.index]) {\r\n              itemErr[childErr.index] = Object.assign({}, itemErr[childErr.index], {\r\n                [childErr.propertyName]: childErr.constraints\r\n              });\r\n            } else {\r\n              itemErr[childErr.index] = { [childErr.propertyName]: childErr.constraints };\r\n            }\r\n          }\r\n        });\r\n\r\n        return itemErr;\r\n      };\r\n\r\n      if (!err.isArray) {\r\n        if (!err.children.length) {\r\n          errObj[property] = err.constraints;\r\n        } else {\r\n          errObj[property] = ValidationUtils.convertErrorsToNormalObject(err.children, errObj);\r\n        }\r\n      } else {\r\n        errObj[property] = buildArray(err.children);\r\n      }\r\n    });\r\n\r\n    return errObj;\r\n  }\r\n}\r\n","import { format, isDate, parseISO, isEqual, compareAsc } from 'date-fns';\r\n\r\n/**\r\n * 日期处理类\r\n */\r\nclass DateUtil {\r\n\r\n  /**\r\n   * 空日期字符串（N版）\r\n   * @todo：兼容服务器端，不应该在devkit体现这种兼容，待移除\r\n   */\r\n  // static emptyDateTimeString = '0001-01-01T00:00:00';\r\n  static emptyDateTimeString = null;\r\n\r\n  /**\r\n   * 默认空日期字符串（ISO标准格式）\r\n   */\r\n  // static emptyISODateTimeString = '0001-01-01T00:00:00+00:00';\r\n  static emptyISODateTimeString = null;\r\n\r\n  /**\r\n   * 默认日期听格式\r\n   */\r\n  static defaultISOFormat = `yyyy-MM-dd'T'HH:mm:ssxxx`;\r\n\r\n  static defaultDisplayFormat = 'yyyy-MM-dd HH:mm:ss';\r\n\r\n  static defaultDateFormat = 'yyyy-MM-dd';\r\n\r\n  static defaultTimeFormat = 'HH:mm:ss';\r\n\r\n  /**\r\n   * 将日期（或日期字符串）转换为完整的的ISO格式的字符串\r\n   */\r\n  static formatISO(dateOrDateString: string|Date): string {\r\n    if (this.isEmptyDateOrDateString(dateOrDateString) === true) {\r\n      return this.emptyISODateTimeString;\r\n    }\r\n    const dateObj = this.parse(dateOrDateString);\r\n    return format(dateObj, this.defaultISOFormat);\r\n  }\r\n\r\n  /**\r\n   * 将日期（或日期字符串）转换为指定格式的字符串\r\n   * @param dateOrDateString 日期对象或符合ISO8601规范的日期字符串\r\n   * @param dateFormat 日期格式字符串\r\n   */\r\n  static format(dateOrDateString: string|Date, dateFormat?: string): string {\r\n    if (this.isEmptyDateOrDateString(dateOrDateString) === true) {\r\n      return this.emptyISODateTimeString;\r\n    }\r\n    const dateObj = this.parse(dateOrDateString);\r\n    dateFormat = dateFormat ? dateFormat : this.defaultDisplayFormat;\r\n    return format(dateObj, dateFormat);\r\n  }\r\n\r\n  /**\r\n   * 创建日期\r\n   * @param dateOrDateString 日期对象或符合ISO8601规范的日期字符串\r\n   */\r\n  static parse(dateOrDateString: string | Date): Date {\r\n    if (this.isEmptyDateOrDateString(dateOrDateString) === true) {\r\n      return null;\r\n    }\r\n\r\n    if (this.isDate(dateOrDateString) === true) {\r\n      return dateOrDateString as Date;\r\n    }\r\n\r\n    return parseISO(dateOrDateString as string);\r\n  }\r\n\r\n  /**\r\n   * 是否是日期对象\r\n   */\r\n  static isDate(date: any): boolean {\r\n    return isDate(date);\r\n  }\r\n\r\n  /**\r\n   * 是否是空日期或者空日期字符串\r\n   * @param dateOrDateString 日期或日期字符串\r\n   */\r\n  static isEmptyDateOrDateString(dateOrDateString: string | Date) {\r\n    if (this.isDate(dateOrDateString) === true) {\r\n      return this.isEmptyDate(dateOrDateString as Date);\r\n    }\r\n    return this.isEmptyDateString(dateOrDateString as string);\r\n  }\r\n\r\n  /**\r\n   * 是否为空日期字符串\r\n   * @param date 日期对象\r\n   */\r\n  static isEmptyDate(date: Date) {\r\n    if (!date) {\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * 是否是空日期字符串\r\n   * @param dateString 日期字符串\r\n   */\r\n  static isEmptyDateString(dateString: string) {\r\n    if (!dateString || dateString.startsWith('0001-01-01') === true) {\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * 两个日期是否相等\r\n   * @param dateOrDateString1 日期对象或字符串\r\n   * @param dateOrDateString1 日期对象或字符串\r\n   * @return 相等返回true，否则返回false\r\n   */\r\n  static isEqual(dateOrDateString1: string|Date, dateOrDateString2: string|Date): boolean {\r\n    const dateObj1 = this.parse(dateOrDateString1);\r\n    const dateObj2 = this.parse(dateOrDateString2);\r\n    if (dateObj1 === dateObj2) {\r\n      return true;\r\n    }\r\n    return isEqual(dateObj1, dateObj2);\r\n  }\r\n\r\n  /**\r\n   * 两个日期是否相等\r\n   * @param dateOrDateString1 日期对象或字符串\r\n   * @param dateOrDateString1 日期对象或字符串\r\n   * @return 返回-1、0、1\r\n   */\r\n  static compare(dateOrDateString1: string|Date, dateOrDateString2: string|Date) {\r\n    const dateObj1 = this.parse(dateOrDateString1);\r\n    const dateObj2 = this.parse(dateOrDateString2);\r\n    if (this.isEqual(dateObj1, dateObj2) === true) {\r\n      return 0;\r\n    }\r\n\r\n    // 处理解析后为null的场景，null比所有有效日期小\r\n    if (!dateObj1 && this.isDate(dateObj2) === true) {\r\n      return -1;\r\n    }\r\n    if (!dateObj2 && this.isDate(dateObj1) === true) {\r\n      return 1;\r\n    }\r\n\r\n    return compareAsc(dateObj1, dateObj2);\r\n  }\r\n}\r\n\r\nexport { DateUtil };\r\n\r\n","import { Translate } from './translate';\r\n\r\nexport class TranslateService {\r\n  private static defaultLanguage = 'zh-CHS';\r\n  public static translate: Translate = null;\r\n  /**\r\n   * 设置多语服务\r\n   * @param translate translate\r\n   */\r\n  public static setTranslate(translate: Translate) {\r\n    if (translate) {\r\n      this.translate = translate;\r\n    }\r\n  }\r\n  /**\r\n   * 获取当前语言\r\n   */\r\n  public static getCurrentLanguage() {\r\n    return this.translate && this.translate.getCurrentLanguage() || this.defaultLanguage;\r\n  }\r\n  public static dispose() {\r\n    this.translate = null;\r\n  }\r\n}\r\n","import * as ValidatorJS from 'validator';\r\nimport { ValidateRule, IsNumberOptions, ValidationResult } from './types';\r\nimport { ValidationTypes } from './validation_types';\r\nimport { ValidationError } from './validation_error';\r\nimport { Entity } from '../entity';\r\nimport { ValidationExecutor } from './validation_executor';\r\nimport { ValidationUtils } from './validation_utils';\r\nimport { DateUtil } from '../../utils/date_util';\r\nimport { TranslateService } from '../../i18n/translate_service';\r\nimport { BigNumber } from 'bignumber.js';\r\nimport { RuleType } from '../../form/index';\r\nimport { FrameContext } from '../../frame/index';\r\n\r\n/**\r\n * 校验实体实例对象数据\r\n */\r\nexport class Validator<T extends Entity> {\r\n  constructor() { }\r\n\r\n  private validatorJs = ValidatorJS.default;\r\n  /**\r\n   * 验证实例对象中数据是否合法\r\n   * @param object 待校验的实例对象\r\n   * @param propertyName 待校验实例对象属性名称，为空则验证实例对象中所有带有验证规则的属性\r\n   */\r\n  // tslint:disable-next-line: max-line-length\r\n  validate(object: T, propertyName?: string, value?, externalRules?: Map<string, ValidateRule[]>, index?: number, frameContext?: FrameContext): Promise<ValidationResult> {\r\n    const validationErrors: ValidationError[] = [];\r\n    const executor = new ValidationExecutor(this);\r\n    executor.execute(object, value, validationErrors, propertyName, index, externalRules, null, frameContext);\r\n    return Promise.all(executor.awaitingPromises).then(() => {\r\n      const errors = executor.stripEmptyErrors(validationErrors);\r\n      this.sortValidationErrors(errors);\r\n      return this.buildErrors(errors);\r\n    });\r\n  }\r\n  /**\r\n   * 校验信息排序（为了兼容树形表）\r\n   * @param validationErrors 验证信息数组\r\n   */\r\n  private sortValidationErrors(validationErrors: ValidationError[]) {\r\n    // 如果存在无序号的信息则不排序\r\n    let sortable: boolean = true;\r\n    validationErrors.forEach(info => {\r\n      if (info.children && info.children.length > 1) {\r\n        this.sortValidationErrors(info.children);\r\n      }\r\n      if (typeof info.index !== \"number\") {\r\n        sortable = false;\r\n      }\r\n    });\r\n    if (sortable) {\r\n      validationErrors.sort((a, b) => a.index - b.index);\r\n    }\r\n  }\r\n  /**\r\n   * 执行校验\r\n   * @param object \r\n   * @param propertyName \r\n   * @param value \r\n   * @param externalRules \r\n   * @param index \r\n   * @param frameContext \r\n   * @param ignoreAsyncValidateRules\r\n   * @returns \r\n   */\r\n  public verify(object: T, propertyName?: string, value?, externalRules?: Map<string, ValidateRule[]>, index?: number, frameContext?: FrameContext, ignoreAsyncValidateRules: boolean = false): Promise<ValidationResult> | { isValid: boolean, errors: any, message: string } {\r\n    const validationErrors: ValidationError[] = [];\r\n    const executor = new ValidationExecutor(this);\r\n    executor.execute(object, value, validationErrors, propertyName, index, externalRules, null, frameContext);\r\n    if (executor.awaitingPromises && executor.awaitingPromises.length > 0 && ignoreAsyncValidateRules === false) {\r\n      return Promise.all(executor.awaitingPromises).then(() => {\r\n        const errors = executor.stripEmptyErrors(validationErrors);\r\n        const result = this.buildErrors(errors);\r\n        return result;\r\n      });\r\n    } else {\r\n      const errors = executor.stripEmptyErrors(validationErrors);\r\n      return this.buildErrors(errors);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 验证实体属性元数据中设置的校验规则是否合法\r\n   * @param object 实例对象\r\n   * @param value 待校验的值\r\n   * @param validateRule 验证规则\r\n   */\r\n  validateValueByMetadata(object: any, value: any, validateRule: ValidateRule, isMultLanguageField?: boolean, currentRowId?: string): boolean | any {\r\n    const validType = validateRule.type;\r\n    let constraintsToValidate = [];\r\n    if (validateRule.constraints) {\r\n      constraintsToValidate = validateRule.constraints.map(param => {\r\n        if (typeof param === 'function') {\r\n          return param(object, value);\r\n        }\r\n        return param;\r\n      });\r\n    } else {\r\n      validateRule.constraints = [];\r\n    }\r\n\r\n    if (ValidationTypes.isValidType(validType)) {\r\n      if (validType === ValidationTypes.MAXVALUE) {\r\n        const rule = constraintsToValidate[0];\r\n        if (this.isDateString(value) || this.isDate(value) || this.isDateString(rule) || this.isDate(rule)) {\r\n          // 如果日期值不存在，则不判断大小\r\n          if (!value) {\r\n            return true;\r\n          }\r\n          if (value.indexOf('~') !== -1) {\r\n            // 不对日期区间进行校验\r\n            return true;\r\n          }\r\n          return this[ValidationTypes.MAX_DATE](DateUtil.parse(value), isMultLanguageField, new Date(constraintsToValidate[0]));\r\n        } else {\r\n          return this[ValidationTypes.MAXVALUE](value, isMultLanguageField, constraintsToValidate[0]);\r\n        }\r\n      } else if (validType === ValidationTypes.MINVALUE) {\r\n        // 如果是null或undefined，直接返回true\r\n        if (constraintsToValidate[0] === null || constraintsToValidate[0] === undefined) {\r\n          return true;\r\n        }\r\n        if (this.isDateString(value) || this.isDate(value)) {\r\n          if (constraintsToValidate[0] === 0) {\r\n            return true;\r\n          }\r\n          return this[ValidationTypes.MIN_DATE](DateUtil.parse(value), isMultLanguageField, DateUtil.parse(constraintsToValidate[0]));\r\n        } else if (this.isNumber(value)) {\r\n          return this[ValidationTypes.MIN](value, isMultLanguageField, constraintsToValidate[0]);\r\n        }\r\n      } else {\r\n        return this[validType](value, isMultLanguageField, ...constraintsToValidate);\r\n      }\r\n    } else {\r\n      if (typeof validateRule.eval === 'function') {\r\n        const bindingPath = validateRule.bindingPath;\r\n        const bindingPaths = bindingPath.split('/').filter(p => p);\r\n        let fieldName = validateRule.field;\r\n        if (bindingPaths.length !== 0) {\r\n          const prefix = bindingPaths.join('/');\r\n          fieldName = `${prefix}/${fieldName.split('.').filter(p => p).join('/')}`;\r\n        }\r\n        const options: any = { patch: { [fieldName]: value } };\r\n        options.currentRows = [];\r\n        const parentEntityListPaths: string[] = object && typeof object['getEntityListPath'] === 'function' && object.getEntityListPath();\r\n        if (parentEntityListPaths.length === 4) {\r\n          const childrenList = parentEntityListPaths.slice(1, 3).reverse();\r\n          options.currentRows.push({ bindingPath: childrenList[1], primaryValue: childrenList[0].split(':')[1] });\r\n        }\r\n        if (currentRowId) {\r\n          if (validateRule.bindingPath.split('/').filter(p => p).length !== 0) {\r\n            const primaryValue = object && typeof object['getMainEntityPrimaryValue'] === 'function' && object.getMainEntityPrimaryValue();\r\n            options.currentRows.push({ bindingPath: '/', primaryValue: primaryValue });\r\n          }\r\n          options.currentRow = { bindingPath: validateRule.bindingPath, primaryValue: currentRowId };\r\n        } else {\r\n          const primaryValue = object && typeof object['getMainEntityPrimaryValue'] === 'function' && object.getMainEntityPrimaryValue();\r\n          options.currentRows.push({ bindingPath: '/', primaryValue: primaryValue });\r\n        }\r\n\r\n        const result = validateRule.eval(options);\r\n        if (validateRule.type === RuleType.Require) {\r\n          const isValid = this.required(value, isMultLanguageField);\r\n          if (result) {\r\n            return isValid;\r\n          } else {\r\n            return true;\r\n          }\r\n        } else {\r\n          return result;\r\n        }\r\n      }\r\n    }\r\n\r\n    return true;\r\n  }\r\n  private buildErrors(errors: ValidationError[]) {\r\n    const msg = new Set(ValidationUtils.createDetailedErrorMessage(errors));\r\n    const newMsg = [];\r\n    msg.forEach(v => {\r\n      newMsg.push(v);\r\n    });\r\n    return {\r\n      isValid: errors.length === 0,\r\n      errors,\r\n      message: newMsg.join('')\r\n    };\r\n  }\r\n  /** 自定义验证 */\r\n  customValidation(value, comparison: boolean): boolean {\r\n    return comparison;\r\n  }\r\n  private isEmptyValue(value: any) {\r\n    const result = value === '' || value === null || value === undefined\r\n      || value === '0001-01-01' || value === '0001-01-01 00:00:00' || value === '0001-01-01T00:00:00';\r\n    return result;\r\n  }\r\n  /** 必填项 */\r\n  required(value: any, isMultLanguageField?: boolean): boolean {\r\n    if (isMultLanguageField) {\r\n      const currentLanguage = TranslateService.getCurrentLanguage();\r\n      if (Object.keys(value).length < 1) {\r\n        return false;\r\n      }\r\n      // 如果能够获取到当前语言，那么当前语言对应的输入不能为空\r\n      if (currentLanguage) {\r\n        return !!value[currentLanguage];\r\n      }\r\n      // 如果当前语言为空，那么必填要求至少有一个输入\r\n      // const allEmpty = Object.values(value).every((v: any) => !v || v.length < 1); // .filter((v: any) => !v || v.length < 1);\r\n      // if (allEmpty) {\r\n      //   return false;\r\n      // }\r\n      return true;\r\n    }\r\n    if (typeof value === 'object' && value !== null) {\r\n      if (!Object.keys(value).length) {\r\n        return false;\r\n      }\r\n      value = Object.values(value)[0];\r\n    }\r\n    // tslint:disable: max-line-length\r\n    return value !== '' && value !== null && value !== undefined\r\n      && value !== '0001-01-01' && value !== '0001-01-01 00:00:00' && value !== '0001-01-01T00:00:00';\r\n  }\r\n\r\n  /** 判断两个值是否相等 */\r\n  equals(value: any, comparison: any): boolean {\r\n    return value === comparison;\r\n  }\r\n\r\n  /**\r\n   * 检查 value 是否不等于参照值\r\n   * @param value 要检查的值\r\n   * @param comparison 对比参照值\r\n   */\r\n  notEquals(value: any, comparison: any): boolean {\r\n    return value !== comparison;\r\n  }\r\n\r\n  /**\r\n   * 判断value 是否为数字\r\n   * @param value 要检查的值\r\n   * @param options 验证选项\r\n   */\r\n  isNumber(value: any, options: IsNumberOptions = {}): boolean {\r\n    if (value === Infinity || value === -Infinity) {\r\n      return options.allowInfinity;\r\n    }\r\n\r\n    if (Number.isNaN(value)) {\r\n      return options.allowNaN;\r\n    }\r\n\r\n    return Number.isFinite(value);\r\n  }\r\n\r\n  /** 判断value是否为整数 */\r\n  isInt(value: number) {\r\n    return Number.isInteger(value);\r\n  }\r\n\r\n  /** 是否为浮点类型 */\r\n  isFloat(value: any): boolean {\r\n    if (this.isNumber(value) || this.isNumberString(value)) {\r\n      return this.validatorJs.isFloat(value);\r\n    }\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * 检查给定的value 是否布尔值\r\n   */\r\n  isBoolean(value: any): boolean {\r\n    return value instanceof Boolean || typeof value === 'boolean';\r\n  }\r\n\r\n  /**\r\n   * 检查给定的value 是否为字符串\r\n   */\r\n  isString(value: any): boolean {\r\n    return value instanceof String || typeof value === 'string';\r\n  }\r\n\r\n  /**\r\n   * 检查给定的value 是否为日期\r\n   */\r\n  isDate(value: any): boolean {\r\n    return value instanceof Date && !isNaN(value.getTime());\r\n  }\r\n\r\n  /**\r\n   * 检查给定的value 是否为日期字符串\r\n   */\r\n  isDateString(value: any): boolean {\r\n    const regex = /\\d{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])(T|\\s?)?(([0-2]\\d:[0-5]\\d)?(:[0-5]\\d(?:\\.\\d+)))?(?:Z|\\+[0-2]\\d(?:\\:[0-5]\\d)?)?/g;\r\n    return this.isString(value) && regex.test(value) && this.validatorJs.toDate(value);\r\n  }\r\n\r\n  /** 判断value 的长度是否在允许的最小值 和最大值之间 */\r\n  length(value: any, min: number, max?: number, isMultLanguageField?: boolean): boolean {\r\n    return typeof value === 'string' && this.validatorJs.isLength(value, min, max);\r\n  }\r\n\r\n  /**\r\n   * 检查给定的value的长度是否符合设定的最小值\r\n   * @param value 待检查的字符串\r\n   * @param min 最小长度\r\n   */\r\n  minLength(value: any, isMultLanguageField: boolean, min: number): boolean {\r\n    if (isMultLanguageField) {\r\n      // const currentLanguage = TranslateService.getCurrentLanguage();\r\n      if (typeof value === 'object') {\r\n        const hasInvalidLangs = Object.values(value).filter((v: any) => v && v.length < min);\r\n        if (hasInvalidLangs && hasInvalidLangs.length > 0) {\r\n          return false;\r\n        }\r\n      }\r\n      // if (currentLanguage) {\r\n      //   return value[currentLanguage] ? value[currentLanguage].length > min : true;\r\n      // }\r\n      // 如果无法获取当前语言，则只要有一种语言的输入长度大于最小长度即可。\r\n      // const hasValidLangs = Object.values(value).filter((v: any) => v && v.length > min);\r\n      // if (hasValidLangs.length > 0) {\r\n      //   return true;\r\n      // }\r\n      // return false;\r\n      return true;\r\n    }\r\n    if (value && typeof value !== 'string') {\r\n      value = value.toString();\r\n    }\r\n    return !value || (typeof value === 'string' && this.length(value, min));\r\n  }\r\n\r\n  /**\r\n   * 检查给定的value的长度是否符合设定的最大值\r\n   * @param value 待检查的字符串\r\n   * @param max 最大长度\r\n   */\r\n  maxLength(value: any, isMultLanguageField: boolean, max: number): boolean {\r\n    if (isMultLanguageField) {\r\n      // const currentLanguage = TranslateService.getCurrentLanguage();\r\n      // if (currentLanguage) {\r\n      //   return value[currentLanguage] ? value[currentLanguage].length < max : true;\r\n      // }\r\n      if (typeof value === 'object') {\r\n        const hasInvalidLangs = Object.values(value).filter((v: any) => v && v.length > max);\r\n        if (hasInvalidLangs.length > 0) {\r\n          return false;\r\n        }\r\n      }\r\n      return true;\r\n    }\r\n    if (typeof value === 'object') {\r\n      for (const key in value) {\r\n        if (value.hasOwnProperty(key)) {\r\n          const element = value[key];\r\n          if (typeof element === 'string' && !this.length(value[key], 0, max)) {\r\n            return false;\r\n          }\r\n        }\r\n      }\r\n      return true;\r\n    }\r\n    if (value && typeof value !== 'string') {\r\n      value = value.toString();\r\n    }\r\n    return !value || (typeof value === 'string' && this.length(value, 0, max));\r\n  }\r\n\r\n  /** 检查value的值是否在 最大值与最小值之间 */\r\n  range(value: number, isMultLanguageField: boolean, min: number, max: number): boolean {\r\n    return typeof value === 'number' && this.isNumber(min) && this.isNumber(max) && value >= min && value <= max;\r\n  }\r\n  /**\r\n   * 日期类型的值是否在某个区间\r\n   * @param value value\r\n   * @param min 最小值\r\n   * @param max 最大值\r\n   */\r\n  dateRange(value: any, isMultLanguageField: boolean, rule: string, type: string) {\r\n    // 2010~2020|04~05|03 11:00:00~05 12:00:00\r\n    if (!value) {\r\n      return true;\r\n    }\r\n    if (type === 'maxValue' || type === 'maxDate') {\r\n      if (this.isYearRange(value) || this.isMonthOrDayRange(value)) {\r\n        return this.maxValue(parseInt(this.getRangeValue(value, 1)), isMultLanguageField, parseInt(rule.split(' ')[0]));\r\n      } else if (this.isDayTimeRange(value)) {\r\n        return true;\r\n      }\r\n    } else if (type === 'minValue' || type === 'minDate') {\r\n      if (this.isYearRange(value) || this.isMonthOrDayRange(value)) {\r\n        return this.maxValue(parseInt(this.getRangeValue(value, 0)), isMultLanguageField, parseInt(rule.split(' ')[0]));\r\n      } else if (this.isDayTimeRange(value)) {\r\n        return true;\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n  private getRangeValue(value: string, position: 0 | 1, splitor = '~') {\r\n    return value.split(splitor)[position];\r\n  }\r\n  private isDateRange(value: any) {\r\n    if (typeof value !== 'string') {\r\n      value = value.toString();\r\n    }\r\n    return /(\\d{4}|\\d{2})/.test(value);\r\n  }\r\n  /**\r\n   * 是否年度区间\r\n   * @param value value\r\n   */\r\n  private isYearRange(value: any) {\r\n    if (typeof value !== 'string') {\r\n      value = value.toString();\r\n    }\r\n    return /^\\d{4}~\\d{4}$/.test(value);\r\n  }\r\n  /**\r\n   * 是否为年月区间\r\n   * @param value value\r\n   */\r\n  private isYearMonthRange(value: any) {\r\n    if (typeof value !== 'string') {\r\n      value = value.toString();\r\n    }\r\n    return /^\\d{4}-\\d{2}~\\d{4}-\\d{2}$/.test(value);\r\n  }\r\n  /**\r\n   * 是否为月或天的区间\r\n   * @param value value\r\n   */\r\n  private isMonthOrDayRange(value: any) {\r\n    if (typeof value !== 'string') {\r\n      value = value.toString();\r\n    }\r\n    return /^[0|1|2|3]\\d{1}~[0|1|2|3]\\d{1}$/.test(value);\r\n  }\r\n  /**\r\n   * 是否为天+时间的区间\r\n   * @param value value\r\n   */\r\n  private isDayTimeRange(value: any) {\r\n    if (typeof value !== 'string') {\r\n      value = value.toString();\r\n    }\r\n    return /^[0|1|2|3]\\d{1} \\d{2}:\\d{2}:\\d{2}~[0|1|2|3]\\d{1} \\d{2}:\\d{2}:\\d{2}$/.test(value);\r\n  }\r\n\r\n  /**\r\n   * Checks if the first number is greater than second.\r\n   */\r\n  min(num: number, isMultLanguageField: boolean, min: number): boolean {\r\n    return typeof num === 'number' && typeof min === 'number' && num >= min;\r\n  }\r\n\r\n  /**\r\n   * 最小值验证\r\n   */\r\n  minValue(num: number | string, isMultLanguageField: boolean, min: number): boolean {\r\n    // 如果值不存在，则不进行最小值的判断\r\n    if (num === null || num === undefined) {\r\n      return true;\r\n    }\r\n    // 按照大数处理\r\n    if (typeof num === 'string' && num.match(/^(-?\\d+)(\\.\\d+)?$/g)) {\r\n      const value = new BigNumber(num);\r\n      const maxValue = new BigNumber(min);\r\n      return value.isGreaterThanOrEqualTo(maxValue);\r\n    }\r\n    return typeof num === 'number' && typeof min === 'number' && num >= min;\r\n  }\r\n\r\n  /**\r\n   * Checks if the first number is less than second.\r\n   */\r\n  max(num: number, isMultLanguageField: boolean, max: number): boolean {\r\n    // 如果值不存在，则不进行最小值的判断\r\n    if (num === null || num === undefined) {\r\n      return true;\r\n    }\r\n    return typeof num === 'number' && typeof max === 'number' && num <= max;\r\n  }\r\n\r\n  /**\r\n   * 最大值验证\r\n   */\r\n  maxValue(num: number | string, isMultLanguageField: boolean, max: number): boolean {\r\n    // 如果值不存在，则不进行最小值的判断\r\n    if (num === null || num === undefined) {\r\n      return true;\r\n    }\r\n    // 按照大数处理\r\n    if (typeof num === 'string' && num.match(/^(-?\\d+)(\\.\\d+)?$/g)) {\r\n      const value = new BigNumber(num);\r\n      const maxValue = new BigNumber(max);\r\n      return value.isLessThanOrEqualTo(maxValue);\r\n    }\r\n    return typeof num === 'number' && typeof max === 'number' && num <= max;\r\n  }\r\n\r\n  /**\r\n   * Checks if the value is a date that's after the specified date.\r\n   */\r\n  minDate(date: Date, isMultLanguageField: boolean, minDate: Date): boolean {\r\n    if (!date) {\r\n      return true;\r\n    }\r\n    return date && date.getTime() >= minDate.getTime();\r\n  }\r\n\r\n  /**\r\n   * Checks if the value is a date that's before the specified date.\r\n   */\r\n  maxDate(date: Date, isMultLanguageField: boolean, maxDate: Date): boolean {\r\n    // 如果值不存在，则不进行最小值的判断\r\n    if (date === null || date === undefined) {\r\n      return true;\r\n    }\r\n    return date && date.getTime() <= maxDate.getTime();\r\n  }\r\n\r\n  /**\r\n   * Checks if a string is a boolean.\r\n   * If given value is not a string, then it returns false.\r\n   */\r\n  isBooleanString(value: string): boolean {\r\n    return typeof value === 'string' && this.validatorJs.isBoolean(value);\r\n  }\r\n\r\n  /**\r\n   * Checks if the string is numeric.\r\n   * If given value is not a string, then it returns false.\r\n   */\r\n  isNumberString(value: string): boolean {\r\n    return typeof value === 'string' && this.validatorJs.isNumeric(value);\r\n  }\r\n\r\n  /**\r\n   * Checks if the string contains the seed.\r\n   * If given value is not a string, then it returns false.\r\n   */\r\n  contains(value: string, isMultLanguageField: boolean, seed: string): boolean {\r\n    return typeof value === 'string' && this.validatorJs.contains(value, seed);\r\n  }\r\n\r\n  /**\r\n   * Checks if the string does not contain the seed.\r\n   * If given value is not a string, then it returns false.\r\n   */\r\n  notContains(value: string, isMultLanguageField: boolean, seed: string): boolean {\r\n    return typeof value === 'string' && !this.validatorJs.contains(value, seed);\r\n  }\r\n\r\n  /**\r\n   * Checks if the string is an email.\r\n   * If given value is not a string, then it returns false.\r\n   */\r\n  isEmail(value: string): boolean {\r\n    return typeof value === 'string' && this.validatorJs.isEmail(value);\r\n  }\r\n\r\n  /**\r\n   * Checks if the string is valid JSON (note: uses JSON.parse).\r\n   * If given value is not a string, then it returns false.\r\n   */\r\n  isJSON(value: string): boolean {\r\n    return typeof value === 'string' && this.validatorJs.isJSON(value);\r\n  }\r\n\r\n  /**\r\n   * Checks if the string is lowercase.\r\n   * If given value is not a string, then it returns false.\r\n   */\r\n  isLowercase(value: string): boolean {\r\n    return typeof value === 'string' && this.validatorJs.isLowercase(value);\r\n  }\r\n\r\n  /**\r\n   * Checks if the string is uppercase.\r\n   * If given value is not a string, then it returns false.\r\n   */\r\n  isUppercase(value: string): boolean {\r\n    return typeof value === 'string' && this.validatorJs.isUppercase(value);\r\n  }\r\n\r\n  /**\r\n   * 验证字符串是否包含非法字符\r\n   * @param value 验证的字符串\r\n   * @param someChars 非法字符。如：#￥%@$\r\n   */\r\n  exclude(value: string, isMultLanguageField: boolean, someChars: string): boolean {\r\n    const arrChar = someChars.split('');\r\n    let counter = 0;\r\n    arrChar.forEach(val => {\r\n      if (this.contains(value, isMultLanguageField, val)) {\r\n        counter++;\r\n      }\r\n    });\r\n\r\n    return counter === 0;\r\n  }\r\n\r\n  /**\r\n   * 自定义正则验证\r\n   * @param value 待验证的字符串\r\n   * @param pattern 正则表达式\r\n   */\r\n  matches(value: string, isMultLanguageField: boolean, pattern: any): boolean {\r\n    value = (value === null || value === undefined) ? '' : value.toString();\r\n    if (value === '') {\r\n      return true;\r\n    }\r\n    return this.validatorJs.matches(value, pattern);\r\n  }\r\n}\r\n","import { Subject, Observable, from } from 'rxjs';\r\nimport { ChangeSet } from '../changeset/change_set';\r\nimport { Modification, ModifyType } from '../changeset/types';\r\nimport { Entity } from './entity';\r\nimport { EntityFactory } from './entity_creator';\r\nimport { PARENT_CLASS, PARENT_PATH, ClassType } from './types';\r\nimport { Validator } from './validator/validator';\r\nimport { ValidationResult } from './validator/types';\r\n\r\nexport interface IList<T> {\r\n  [index: number]: T;\r\n}\r\n/**\r\n * 实体集合列表\r\n */\r\nexport class EntityList<T extends Entity> implements IList<T>, Iterable<T> {\r\n  public __type__ = 'EntityList';\r\n\r\n  // #region 私有属性\r\n  private originalData: any[] = [];\r\n  /**\r\n   * 已废弃：请勿使用\r\n   */\r\n  private rawData: T[];\r\n\r\n  /**\r\n   * 已废弃：请勿使用\r\n   */\r\n  private listChanged = new Subject<Modification>();\r\n\r\n  /**\r\n   * 已废弃：请勿使用\r\n   */\r\n  private changeSet = new ChangeSet();\r\n\r\n  /**\r\n   * 已废弃：请勿使用\r\n   */\r\n  private validator = new Validator<T>();\r\n\r\n  // #endregion\r\n\r\n\r\n  // #region 公有属性\r\n\r\n  /**\r\n   * 集合改变时触发(新增、行记录修改、删除)\r\n   * @event\r\n   */\r\n  public onListChanged = this.listChanged.asObservable();\r\n\r\n  /**\r\n   * 获取项集合\r\n   */\r\n  public get items(): T[] {\r\n    return this.rawData;\r\n  }\r\n\r\n  /**\r\n   * 列表变更集\r\n   */\r\n  public get changes() {\r\n    return this.changeSet.changes;\r\n  }\r\n\r\n  /**\r\n   * 获取指定索引处的值\r\n   */\r\n  [index: number]: T;\r\n\r\n  /**\r\n   * 迭代器\r\n   */\r\n  *[Symbol.iterator](): Iterator<T> {\r\n    yield* this.items;\r\n  }\r\n\r\n  // #endregion\r\n\r\n\r\n  /**\r\n   * @param data JSON数据集合\r\n   * @param type 集合中的实体类型\r\n   */\r\n  constructor(data?: any[], type?: ClassType) {\r\n    this.clear();\r\n    if (data) {\r\n      // this.loadEntities(data);\r\n      data.forEach(item => {\r\n        this.initEntity(EntityFactory(type, item));\r\n      });\r\n    }\r\n  }\r\n\r\n\r\n  // #region 公有方法\r\n\r\n  /** 加载实体列表 */\r\n  public loadEntities(entities: T[]) {\r\n    this.clear();\r\n\r\n    entities.forEach(entity => {\r\n      this.initEntity(entity);\r\n    });\r\n\r\n    // 发送Load变更\r\n    const changeItem = {\r\n      path: [],\r\n      value: entities,\r\n      preValue: undefined,\r\n      type: ModifyType.Load,\r\n      target: this\r\n    };\r\n    this.setChanges(changeItem);\r\n  }\r\n  /**\r\n   * 清空\r\n   */\r\n  public clear() {\r\n    this.rawData = [];\r\n    this.originalData = [];\r\n  }\r\n\r\n  /**\r\n   * 添加实体对象到集合中，并返回新加的对象\r\n   * @param entity 实体对象\r\n   * @param isCloned 克隆\r\n   */\r\n  public appendNew(entity: T, isCloned: boolean = false): T {\r\n    const newEntity = this.initEntity(entity, true);\r\n    // 新增变更\r\n    const changeItem = {\r\n      path: [],\r\n      value: [newEntity],\r\n      preValue: undefined,\r\n      type: ModifyType.Add\r\n    };\r\n    if (isCloned === true) {\r\n      changeItem.type = ModifyType.Clone;\r\n    }\r\n    this.setChanges(changeItem);\r\n    return newEntity;\r\n  }\r\n  /**\r\n   * 在指定位置插入实体\r\n   * @param entity 实体\r\n   * @param position 插入位置\r\n   */\r\n  public insert(entity: T, position?: 1 | -1): T {\r\n    const newEntity = this.initEntity(entity, true);\r\n\r\n    // 新增变更\r\n    const changeItem = {\r\n      path: [],\r\n      value: [newEntity],\r\n      preValue: undefined,\r\n      type: ModifyType.Insert,\r\n      position: position,\r\n    };\r\n\r\n    this.setChanges(changeItem);\r\n    return newEntity;\r\n  }\r\n  /**\r\n   * 追加实体\r\n   */\r\n  public appendEntity(entity: T): void {\r\n    const newEntity = this.initEntity(entity, true);\r\n    // 新增变更\r\n    const changeItem = {\r\n      path: [],\r\n      value: [newEntity],\r\n      preValue: undefined,\r\n      type: ModifyType.Add\r\n    };\r\n\r\n    this.setChanges(changeItem);\r\n  }\r\n\r\n  /**\r\n   * 批量追加实体\r\n   */\r\n  public appendEntities(entities: T[]): void {\r\n    const newEntites = entities.map((entity: T) => {\r\n      return this.initEntity(entity, true);\r\n    });\r\n    const changeItem = {\r\n      path: [],\r\n      value: newEntites,\r\n      preValue: undefined,\r\n      type: ModifyType.Add\r\n    };\r\n    this.setChanges(changeItem);\r\n  }\r\n\r\n  /**\r\n   * 删除指定主键ID 的实体对象，返回布尔，true 删除成功，false 删除失败\r\n   * @param primaryId 主键ID\r\n   */\r\n  public remove(primaryId: string): boolean {\r\n    const total = this.count();\r\n    const indexToRemove = this.rawData.findIndex((entity: Entity) => {\r\n      return entity.primaryValue === primaryId;\r\n    });\r\n    if (indexToRemove === -1) {\r\n      return false;\r\n    }\r\n    const entityToRemove = this.rawData[indexToRemove];\r\n    this.rawData.splice(indexToRemove, 1);\r\n\r\n    // 删除变更\r\n    const changeItem = {\r\n      path: [],\r\n      value: { [entityToRemove.primaryProperty.dataField]: primaryId },\r\n      preValue: undefined,\r\n      type: ModifyType.Remove\r\n    };\r\n\r\n    this.updateIndex(total);\r\n    this.setChanges(changeItem);\r\n\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * 从集合中获取指定ID值的实体对象\r\n   * @param id 主键值\r\n   */\r\n  public get(id: string) {\r\n    return this.items.find(item => {\r\n      return item.primaryValue === id;\r\n    });\r\n  }\r\n\r\n  /**\r\n   * 将变更记录添加到集合变更集中\r\n   * @param value 变更记录\r\n   */\r\n  public setChanges(modinfo: Modification) {\r\n\r\n    // 向app层发送的变更\r\n    this.listChanged.next(modinfo);\r\n\r\n    // 构造向changeSet中添加的chagne\r\n    const change = Object.assign({}, modinfo);\r\n    if ((modinfo.type === ModifyType.Add || modinfo.type === ModifyType.Insert || modinfo.type === ModifyType.Clone) && modinfo.value[0] instanceof Entity) {\r\n      change.value = [modinfo.value[0].data];\r\n    }\r\n    this.changeSet.append(change);\r\n  }\r\n\r\n  /** 集合总记录数 */\r\n  public count() {\r\n    return this.items.length;\r\n  }\r\n\r\n  /**\r\n   * 获取实体对象的索引值\r\n   */\r\n  public indexOf(entity: T): number {\r\n    return this.items.indexOf(entity);\r\n  }\r\n\r\n  /**\r\n   * 计算集合中某个属性的总和\r\n   * @param propertyName 属性名称\r\n   */\r\n  public sum(propertyName: string): number {\r\n    if (this.count() === 0) {\r\n      return 0;\r\n    }\r\n    return this.items.reduce((val, curr: T) => {\r\n      return val + curr[propertyName];\r\n    }, 0);\r\n  }\r\n\r\n  /**\r\n   * 集合数据验证\r\n   */\r\n  public validate(): Observable<ValidationResult> {\r\n    const propertyName = this.getPropertyName();\r\n    return from(this.validator.validate(this[PARENT_CLASS], propertyName));\r\n  }\r\n\r\n  /**\r\n   * 已废弃：请使用toJSON方法代替\r\n   * @deprecated\r\n   */\r\n  public toJson() {\r\n    return this.rawData;\r\n  }\r\n\r\n  /**\r\n   * 转换为JSON格式\r\n   */\r\n  public toJSON(): any[] {\r\n    const result = [];\r\n    this.items.forEach((entity: Entity) => {\r\n      result.push(entity.toJSON());\r\n    });\r\n    return result;\r\n  }\r\n\r\n  public toArray(): T[] {\r\n    return this.items;\r\n  }\r\n\r\n  // #endregion\r\n\r\n\r\n  // #region 私有方法\r\n\r\n  /**\r\n   * 实体初始化\r\n   * @param entity 实体\r\n   */\r\n  private initEntity(entity: T, isNewEntity: boolean = false): T {\r\n    entity[PARENT_CLASS] = this;\r\n    entity[PARENT_PATH] = this[PARENT_PATH];\r\n    entity.onValueChanged.subscribe((v: Modification) => {\r\n      const path = v.path;\r\n      const value = v.value;\r\n      const preValue = v.preValue;\r\n      const operator = v.type;\r\n      const subChanges = { path, value, preValue, type: operator };\r\n      if (v.changeSetValue !== undefined) {\r\n        subChanges['changeSetValue'] = v.changeSetValue;\r\n      }\r\n      this.setChanges(subChanges);\r\n    });\r\n    // TODO: 添加数据验证逻辑代码\r\n    const newLength = this.rawData.push(entity);\r\n    this[newLength - 1] = entity;\r\n    if (!isNewEntity) {\r\n      this.originalData.push(entity.toJSON());\r\n    }\r\n    return entity;\r\n  }\r\n\r\n  /**\r\n   * 更新索引\r\n   * @param total 总记录数\r\n   */\r\n  private updateIndex(total: number) {\r\n    for (let i = 0; i < total; i++) {\r\n      delete this[i];\r\n    }\r\n    this.rawData.forEach((entity, index) => {\r\n      this[index] = entity;\r\n    });\r\n  }\r\n\r\n  /**\r\n   * 获取属性名称\r\n   */\r\n  private getPropertyName() {\r\n    const path = this[PARENT_PATH];\r\n    if (path && path.length) {\r\n      const name = path[path.length - 1];\r\n      return name;\r\n    }\r\n    return undefined;\r\n  }\r\n\r\n  // #endregion\r\n\r\n}\r\n","import { InjectionToken } from '@angular/core';\r\nimport { AppContext } from '../app/index';\r\n\r\n// export type ClassType = new (...args: any[]) => any;\r\nexport const BigNumberType = 'BigNumber';\r\nexport interface Pagination {\r\n  pageSize: number;\r\n  pageIndex: number;\r\n  total: number;\r\n}\r\nexport interface ResultData {\r\n  data?: any[];\r\n  pagination?: Pagination;\r\n}\r\n\r\nexport enum DataChangeType { Add, Delete }\r\n\r\nexport interface DataChange {\r\n  /**\r\n   * 变更路径，主要针对带从表的情况\r\n   */\r\n  fpath?: string;\r\n  dataId: string;\r\n  changeType: DataChangeType;\r\n  [prop: string]: any;\r\n}\r\nexport enum HttpMethod {\r\n  GET = 'GET',\r\n  POST = 'POST',\r\n  PUT = 'PUT',\r\n  DELETE = 'DELETE'\r\n}\r\n\r\n/**\r\n * 后端消息\r\n */\r\n// tslint:disable-next-line: no-namespace\r\nexport namespace BackEndMessage {\r\n  /**\r\n   * 消息级别\r\n   */\r\n  export enum Level {\r\n    Error = 'Error',\r\n    Info = 'Info',\r\n    Warning = 'Warning'\r\n  }\r\n  /**\r\n   * 后端消息对象\r\n   */\r\n  export interface IMessage {\r\n    context: IMessageContext;\r\n    bizMessages: IBizMessage[];\r\n  }\r\n  /**\r\n   * 消息位置\r\n   */\r\n  export interface ILocation {\r\n    /**\r\n     * 表名\r\n     */\r\n    nodeCode: string;\r\n    /**\r\n     * 对应的行\r\n     */\r\n    rows?: string[];\r\n    /**\r\n     * 对应的列\r\n     */\r\n    columns?: string[];\r\n  }\r\n  /**\r\n   * 消息结构\r\n   */\r\n  export interface IBizMessage {\r\n    /**\r\n     * 消息位置\r\n     */\r\n    location?: ILocation;\r\n    /**\r\n     * 消息内容\r\n     */\r\n    message: string;\r\n    /**\r\n     * 消息级别\r\n     */\r\n    level: Level;\r\n  }\r\n  /**\r\n   * 消息上下文\r\n   */\r\n  export interface IMessageContext {\r\n    ns: string;\r\n    appContext: AppContext;\r\n  }\r\n  /**\r\n   * 消息\r\n   * @description 接口执行成功，但有info/warning级别的消息\r\n   */\r\n  export class Message implements IMessage {\r\n    public context: IMessageContext;\r\n    public bizMessages: IBizMessage[];\r\n    constructor(bizMessages: IBizMessage[], context: IMessageContext) {\r\n      this.bizMessages = bizMessages;\r\n      this.context = context;\r\n    }\r\n  }\r\n  /**\r\n   * 消息处理程序\r\n   */\r\n  export interface IBackEndMessageHandler {\r\n    handle(message: IMessage, context?: any);\r\n  }\r\n}\r\n\r\nexport interface IMessageService {\r\n  /**\r\n   * 提示\r\n   * @param message \r\n   */\r\n  info(message: string);\r\n  /**\r\n   * 错误\r\n   * @param message \r\n   */\r\n  error(message: string);\r\n  /**\r\n   * 警告\r\n   * @param message \r\n   */\r\n  warning(message: string);\r\n}\r\n\r\nexport interface INotifyService {\r\n  /**\r\n   * 提示\r\n   * @param message \r\n   * @param options \r\n   */\r\n  info(message: string, options?: { [prop: string]: any });\r\n  /**\r\n   * \r\n   * @param content 成功提示\r\n   * @param options \r\n   */\r\n  success(content: string, options?: { [prop: string]: any });\r\n  /**\r\n   * 警告提示\r\n   * @param content \r\n   */\r\n  warning(content: string);\r\n  /**\r\n   * 错误提示\r\n   * @param content \r\n   * @param options \r\n   */\r\n  error(content: string, options?: { [prop: string]: any });\r\n}\r\n\r\nexport enum RunMode {\r\n  compatible = 'compatible',\r\n  highSpeed = 'highSpeed'\r\n}\r\n/**\r\n * 控制器运行模式，compatible | highSpeed\r\n */\r\nexport const DEVKIT_RUN_MODE = new InjectionToken<RunMode>('@farris/devkit_run_mode');\r\nexport interface IDisposable {\r\n  dispose(options?: any);\r\n}","import { UserSettings } from \"./types\";\r\nexport class UserSettingsService {\r\n  private static userSettings: UserSettings = null;\r\n  private static timeZone: string = undefined;\r\n  private static timeZoneOffset: number = undefined;\r\n  public static setUserSettings(userSettings: UserSettings) {\r\n    this.userSettings = userSettings;\r\n    this.timeZone = undefined;\r\n    this.timeZoneOffset = undefined;\r\n  }\r\n  /**\r\n   * 获取用户配置的时区\r\n   */\r\n  public static getTimeZone() {\r\n    if (this.timeZone !== undefined) {\r\n      return this.timeZone;\r\n    }\r\n    const timeZone = this.userSettings && this.userSettings.timeZone || null;\r\n    this.timeZone = timeZone;\r\n    return timeZone;\r\n  }\r\n  public static getTimeZoneOffset() {\r\n    if (this.timeZoneOffset !== undefined) {\r\n      return this.timeZoneOffset;\r\n    }\r\n    const timeZoneOffset = this.userSettings && this.userSettings.timeZoneOffset || null;\r\n    this.timeZoneOffset = timeZoneOffset;\r\n    return timeZoneOffset;\r\n  }\r\n}","import moment from 'moment';\r\n//import { timezones } from './time_zones';\r\n//import { Timezone } from './types';\r\nexport class ZonedTime {\r\n  /**\r\n   * 将指定时区的时间转换为UTC时区时间（带时区）\r\n   * @param date 时间\r\n   * @param timeZone 时区\r\n   */\r\n  // public static zonedTimeToUtc(date: Date | string | number, timeZone: string): string {\r\n  //   timeZone = this.getStandardTimezoneName(timeZone);\r\n  //   return moment.tz(date, timeZone).utc().format();\r\n  // }\r\n  /**\r\n   * 将带时区的时间转换为指定时区的时间字符串\r\n   * @param date 时间\r\n   * @param timeZone 时区\r\n   * @param format 时间格式\r\n   */\r\n  // public static zonedTimeToSpecialZoneTimeString(date: Date | string | number, timeZone: string, format: string = 'YYYY-MM-DD HH:mm:ss.SSS'): string {\r\n  //   timeZone = this.getStandardTimezoneName(timeZone);\r\n  //   return moment(date).tz(timeZone).format(format);\r\n  // }\r\n  /**\r\n   * 获取标准时区名称\r\n   * @param tz 时区\r\n   */\r\n  // public static getStandardTimezoneName(tz: string) {\r\n  //   let momentZone = moment.tz.zone(tz);\r\n  //   let standardTimezone = tz;\r\n  //   if (!momentZone) {\r\n  //     const timezone = timezones.find((item: Timezone) => item.value === tz || item.utc.includes(tz));\r\n  //     standardTimezone = timezone && timezone.utc[0] || null;\r\n  //   }\r\n  //   return standardTimezone;\r\n  // }\r\n\r\n  public static zonedTimeToSpecialTimeZoneOffsetTimeString(date: Date | string | number, offset: number = 0, format: string = 'YYYY-MM-DD HH:mm:ss.SSS') {\r\n    const utcTime = moment(date).utc();\r\n    const offsetMinutes = offset * 60;\r\n    const result = utcTime.add(offsetMinutes, 'm');\r\n    return result.format(format);\r\n  }\r\n  public static timeZoneOffsetTimeToUtcTimeString(date: Date | string | number, offset: number, format: string = 'YYYY-MM-DD HH:mm:ss.SSS') {\r\n    return moment(date).utcOffset(offset, true).toISOString();\r\n  }\r\n}","import { Injectable } from '@angular/core';\r\n\r\n/**\r\n * 路由参数服务\r\n */\r\n@Injectable()\r\nclass RouterParamService {\r\n\r\n  /**\r\n   * 获取参数\r\n   */\r\n  public getParams(url: string): any {\r\n    const allParams = this.getAllParams();\r\n    return allParams[url] || {};\r\n  }\r\n\r\n  /**\r\n   * 设置参数\r\n   */\r\n  public setParams(url: string, params: any) {\r\n    const allParams = this.getAllParams();\r\n    allParams[url] = params;\r\n    this.setAllParams(allParams);\r\n  }\r\n\r\n  /**\r\n   * 清空参数\r\n   */\r\n  public clearParams() {\r\n    throw new Error('Not Implemented');\r\n  }\r\n\r\n  /**\r\n   * 获取全部参数\r\n   */\r\n  public getAllParams(): any {\r\n    const allParamsJson = window.sessionStorage.getItem('ROUTER_PARAMS') || '{}';\r\n    const allParams = JSON.parse(allParamsJson);\r\n    return allParams;\r\n  }\r\n\r\n  /**\r\n   * 设置所有的参数\r\n   */\r\n  public setAllParams(allParams: any): void {\r\n    allParams = allParams || {};\r\n    const allParamsJson = JSON.stringify(allParams);\r\n    window.sessionStorage.setItem('ROUTER_PARAMS', allParamsJson);\r\n  }\r\n\r\n  /**\r\n   * 清空所有参数\r\n   */\r\n  public clearAllParams() {\r\n    window.sessionStorage.setItem('ROUTER_PARAMS', '{}');\r\n  }\r\n}\r\n\r\nexport { RouterParamService };\r\n","/**\r\n * 变更相关定义\r\n * @author Witt<jiwt@inspur.com>\r\n */\r\n\r\n/**\r\n * 绑定数据变更\r\n */\r\nexport interface Change {\r\n\r\n  /**\r\n   * 变更类型\r\n   */\r\n  type: ChangeType;\r\n\r\n  /**\r\n   * 变更路径\r\n   */\r\n  path: string[];\r\n\r\n  /**\r\n   * 变更后的值\r\n   */\r\n  value?: any;\r\n\r\n  /**\r\n   * 变更前的值\r\n   */\r\n  preValue?: any;\r\n\r\n  /**\r\n   * 错误信息\r\n   */\r\n  errors?: any;\r\n\r\n  /**\r\n   * 验证后回调，会将验证结果传入\r\n   */\r\n  cb?: Function;\r\n\r\n  /**\r\n   * 是否提交过，为true时开启输入时验证\r\n   */\r\n  isSubmitted?: boolean;\r\n\r\n  /**\r\n   * 在grid中使用，如果存在id，则将errors在form中以\r\n   * {\r\n   *  [id]: errors\r\n   * }\r\n   * 的形式保存一份\r\n   */\r\n  id?: string;\r\n\r\n  isUdt?: boolean;\r\n\r\n  isGrid?: boolean;\r\n  /**\r\n   * 新增\r\n   */\r\n  create?: boolean;\r\n  /**\r\n   * 复制\r\n   */\r\n  isCloned?: boolean;\r\n  [prop: string]: any;\r\n}\r\n\r\n/**\r\n * 绑定数据变更类型\r\n */\r\nexport enum ChangeType {\r\n  Update = 'Update',\r\n  Load = 'Load',\r\n  Append = 'Append',\r\n  Remove = 'Remove',\r\n  Swap = 'Swap',\r\n  SelectionChanged = 'SelectionChanged',\r\n  ValueChanged = 'ValueChanged',\r\n  UpdateErrors = 'UpdateErrors',\r\n  GlobalSelectionChanged = 'GlobalSelectionChanged',\r\n  /**\r\n   * 分页信息变化\r\n   */\r\n  PaginationInfoChange = 'PaginationInfoChange',\r\n}\r\n\r\n/**\r\n * 视图变更\r\n */\r\nexport interface ViewChange {\r\n  type: ViewChangeType;\r\n  path: string[];\r\n  value: any;\r\n  preValue?: any;\r\n  context?: any;\r\n  [prop: string]: any;\r\n}\r\n\r\n/**\r\n * 视图变更类型\r\n */\r\nexport enum ViewChangeType {\r\n  ValueChanged\r\n}\r\n\r\n/**\r\n * Form值变化事件\r\n */\r\nexport interface FormValueChange {\r\n  path: string[]; // 字段路径\r\n  value: any; // 新值\r\n  preValue?: any; // 旧值\r\n  command: string; // 监听命令\r\n  entityChanged: boolean; // 实体是否已改变\r\n}\r\n\r\n/**\r\n * 实体值变化事件\r\n */\r\nexport interface EntityValueChange {\r\n  paths: string[]; // 字段路径\r\n  value: any; // 新值\r\n  preValue?: any; // 旧值\r\n  changed: boolean; // 实体是否已改变\r\n  [prop: string]: any;\r\n}","/**\r\n * 绑定属性相关定义\r\n * @author Witt<jiwt@inspur.com>\r\n */\r\n\r\n/**\r\n * 属性类型\r\n */\r\nexport enum BindingPropertyType {\r\n\r\n  /**\r\n   * 简单类型\r\n   */\r\n  Plain = 'Plain',\r\n\r\n  /**\r\n   * 对象类型\r\n   */\r\n  Object = 'Object',\r\n\r\n  /**\r\n   * 列表类型\r\n   */\r\n  List = 'List',\r\n\r\n  /**\r\n   * 动态类型\r\n   */\r\n  Dynamic = 'Dynamic'\r\n}\r\n\r\n\r\n/**\r\n * 绑定属性\r\n */\r\nexport interface BindingProperty {\r\n\r\n  /**\r\n   * 属性名称\r\n   */\r\n  name: string;\r\n\r\n  /**\r\n   * 属性类型\r\n   */\r\n  type: BindingPropertyType;\r\n\r\n  /**\r\n   * 对应实体类型，当属性类型为Object、List类型时，设置该属性。\r\n   */\r\n  entityType?: any;\r\n\r\n  /**\r\n   * 是否为主键\r\n   */\r\n  isPrimaryKey?: boolean;\r\n\r\n  /**\r\n   * 启用多语录入\r\n   */\r\n  enableMultiLangInput?: boolean;\r\n}\r\n","import { Subject, of } from 'rxjs';\r\nimport { Map } from 'immutable';\r\nimport { Change, ChangeType, ViewChange, ViewChangeType } from './changes';\r\nimport { BindingProperty, BindingPropertyType } from './binding_property';\r\nimport { BindingList } from './binding_list';\r\nimport { InvokeOnValueChange } from './types';\r\n\r\n/**\r\n * 绑定对象基类\r\n */\r\nabstract class BaseBindingObject {\r\n  public __type__ = 'BindingObject';\r\n  // protected data: any = undefined;\r\n  /**\r\n   * immutable值对象\r\n   */\r\n  protected innerValues: Map<string, any>;\r\n  /**\r\n   * 当前语言\r\n   */\r\n  protected currentLanguage: string;\r\n  /**\r\n   * 父对象或父列表\r\n   */\r\n  public parent: BindingList | BaseBindingObject;\r\n\r\n  /**\r\n   * 实体引起的变更\r\n   */\r\n  public changes: Subject<Change>;\r\n\r\n  /**\r\n   * 界面层引起的变更流\r\n   */\r\n  public viewChanges: Subject<ViewChange>;\r\n\r\n  /**\r\n   *  属性集合\r\n   */\r\n  public properties: BindingProperty[];\r\n\r\n  /**\r\n   * 主键名\r\n   */\r\n  public primaryKey: string;\r\n\r\n  /**\r\n   * 主键值\r\n   */\r\n  public get primaryKeyValue() {\r\n    return this.primaryKey ? this.getValue(this.primaryKey) : '';\r\n  }\r\n\r\n  /**\r\n   * 标识是否提交过\r\n   */\r\n  public isShowValidationMsg = false;\r\n  /**\r\n   * 销毁流\r\n   */\r\n  public unsubscribe: Subject<any> = new Subject();\r\n  /**\r\n   * 以{ [propertyName]: FormControl }的形式存放每条数据的control\r\n   */\r\n  public controlMap: any = {};\r\n  constructor() {\r\n    this.innerValues = Map<string, any>();\r\n    this.changes = new Subject<Change>();\r\n    this.viewChanges = new Subject<ViewChange>();\r\n  }\r\n  /**\r\n   * 设置是否提交过\r\n   */\r\n  public setShowValidationMsg(flag: boolean) {\r\n    this.isShowValidationMsg = flag;\r\n  }\r\n  // public abstract load(data: any);\r\n  /**\r\n   * 根据属性名获取属性值\r\n   * @param   propertyName 属性名\r\n   * @returns 属性值\r\n   */\r\n  public getValue(propertyName: string): any {\r\n    return this.innerValues.get(propertyName);\r\n  }\r\n\r\n  /**\r\n   * 设置属性值\r\n   * @param propertyName        属性名\r\n   * @param propertyValue       属性值\r\n   * @param emitEventToView     是否通知View层去更新界面，默认为false\r\n   * @param emitEventToEntity   是否通知Entity层去更新值，默认为false\r\n   * @param errors              错误消息\r\n   * @param invokeOnValueChange 值变化事件执行句柄\r\n   */\r\n  public setValue(propertyName: string, propertyValue: any, emitEventToView: boolean = false, emitEventToEntity: boolean = false, errors?: any, invokeOnValueChange?: InvokeOnValueChange, context?: any): void {\r\n    // 屏蔽掉无效的赋值，防止后续赋值对比时跳过，导致实体无法赋值\r\n    // if (this.primaryKey && !this.primaryKeyValue && this.primaryKey !== propertyName) {\r\n    //   return;\r\n    // }\r\n    const oldPropertyValue = this.getValue(propertyName);\r\n    // 由于特定原因（@邵珠强），无法屏蔽oldPropertyValue === propertyValue\r\n    // if (oldPropertyValue === propertyValue) {\r\n    //   return;\r\n    // }\r\n    if (!invokeOnValueChange || oldPropertyValue === propertyValue) {\r\n      // 设定缺省\r\n      invokeOnValueChange = function (preValue, value, entityChanged: boolean, primaryValue?: any) {\r\n        return of(true);\r\n      };\r\n    }\r\n\r\n    if (emitEventToEntity === true) {\r\n      // BUG 322301，删除@2019.08.10; 如果无对应实体，则中止值传递; 这种情况发生在带从表的单据新增，从表响应Load变化的情况；\r\n      // if(!this.innerValues.has(propertyName)) {\r\n      //   return;\r\n      // }\r\n      // 执行实体值变化前事件\r\n      invokeOnValueChange(oldPropertyValue, propertyValue, false, this.primaryKeyValue).subscribe((result) => {\r\n        if (result) {\r\n          // 如果成功，执行变化，并通知实体变化\r\n          this.innerValues = this.innerValues.set(propertyName, propertyValue);\r\n          // this.data[propertyName] = propertyValue;\r\n          const viewChange = this.buildViewChangesContext(propertyName, propertyValue, oldPropertyValue, errors, context);\r\n          this.viewChanges.next(viewChange);\r\n          // 如果需要通知视图，通知视图相应修改\r\n          if (emitEventToView === true) {\r\n            const change = this.buildChangesContext(propertyName, propertyValue, context, errors);\r\n            this.changes.next(change);\r\n          }\r\n          // 执行实体值变化后事件\r\n          invokeOnValueChange(oldPropertyValue, propertyValue, true, this.primaryKeyValue).subscribe();\r\n        } else {\r\n          // 如果失败，不再通知实体变化\r\n          // 并执行界面回滚操作\r\n          const change = this.buildChangesContext(propertyName, oldPropertyValue, context, errors);\r\n          this.changes.next(change);\r\n        }\r\n      });\r\n    } else {\r\n      // `emitEventToEntity === false`, 则认定实体值已经发生变化，通知视图变化，并触发实体值变化后事件\r\n      this.innerValues = this.innerValues.set(propertyName, propertyValue);\r\n      // this.data[propertyName] = propertyValue;\r\n      if (emitEventToView === true) {\r\n        const change = this.buildChangesContext(propertyName, propertyValue, context, errors);\r\n        this.changes.next(change);\r\n      }\r\n      // 执行实体值变化后事件\r\n      invokeOnValueChange(oldPropertyValue, propertyValue, true, this.primaryKeyValue).subscribe();\r\n    }\r\n  }\r\n  /**\r\n   * 将BindingObject实例转换成JSON对象\r\n   */\r\n  public toJSON(options?: any): any {\r\n    const langCode = this.getCurrentLanguage();//window.localStorage.getItem('languageCode') || 'zh-CHS';\r\n    const result = {};\r\n    this.properties.forEach((property: BindingProperty) => {\r\n      const propName = property.name;\r\n      if (property.type === BindingPropertyType.List) {\r\n        const list: BindingList = this[propName];\r\n        result[propName] = list.toJSON(options);\r\n      } else if (property.type === BindingPropertyType.Object) {\r\n        const object: BaseBindingObject = this[propName];\r\n        result[propName] = object.toJSON(options);\r\n      } else if (property.type === BindingPropertyType.Dynamic) {\r\n        const object: BaseBindingObject = this[propName];\r\n        result[propName] = object.toJSON(options);\r\n      } else {\r\n        // 1、对于多语录入字段；\r\n        // 2、传入ignoreMultiLangInput标志，则取当前语言的值给控件。\r\n        if (property.enableMultiLangInput === true) {\r\n          // 忽略多语字段，只返回当前语言\r\n          if (options && options.ignoreMultiLangInput === true) {\r\n            const multiLangValueObj = this.getValue(propName);\r\n            if (multiLangValueObj) {\r\n              result[propName] = multiLangValueObj[langCode];\r\n            } else {\r\n              result[propName] = multiLangValueObj;\r\n            }\r\n          } else if (options && options.useFullMultiLangProperty) {\r\n            // 给审批提供的扩展 @2021-10-13\r\n            const multiLangValueObj = this.getValue(propName);\r\n            if (multiLangValueObj) {\r\n              result[`${propName}_MULTILANGUAGE`] = multiLangValueObj;\r\n              // 除返回多语字段外，将当前语言也返回\r\n              result[propName] = multiLangValueObj[langCode];\r\n            }\r\n          } else {\r\n            const multiLangValueObj = this.getValue(propName);\r\n            if (!multiLangValueObj) {\r\n              result[propName] = { [langCode]: multiLangValueObj };\r\n            } else {\r\n              result[propName] = multiLangValueObj;\r\n            }\r\n          }\r\n        } else {\r\n          result[propName] = this.getValue(propName);\r\n        }\r\n      }\r\n    });\r\n\r\n    return result;\r\n  }\r\n  /**\r\n   * 获取当前语言\r\n   * @returns \r\n   */\r\n  protected getCurrentLanguage() {\r\n    this.currentLanguage = this.currentLanguage || window.localStorage.getItem('languageCode') || 'zh-CHS';\r\n    return this.currentLanguage;\r\n  }\r\n  /**\r\n   * 构造bindignData变更上下文\r\n   * @param propertyName \r\n   * @param propertyValue \r\n   * @param context \r\n   * @param errors \r\n   * @param type \r\n   * @returns \r\n   */\r\n  private buildChangesContext(propertyName: string, propertyValue: any, context?: any, errors?: any, type: ChangeType = ChangeType.ValueChanged): Change {\r\n    return {\r\n      type: type,\r\n      path: [propertyName],\r\n      value: propertyValue,\r\n      id: this.primaryKeyValue,\r\n      errors: errors,\r\n      context\r\n    };\r\n  }\r\n  /**\r\n   * 构造viewChanges上下文\r\n   * @param propertyName \r\n   * @param value \r\n   * @param preValue \r\n   * @param errors \r\n   * @param context \r\n   * @param type \r\n   * @returns \r\n   */\r\n  private buildViewChangesContext(propertyName: string, value: any, preValue: any, errors?: any, context?: any, type: ViewChangeType = ViewChangeType.ValueChanged): ViewChange {\r\n    return {\r\n      type: type,\r\n      path: [propertyName],\r\n      value: value,\r\n      preValue: preValue,\r\n      errors: errors,\r\n      context\r\n    };\r\n  }\r\n}\r\nexport { BaseBindingObject }","import { Type } from '@angular/core';\r\nimport { Entity, FieldMetadataUtil } from '../entity/index';\r\nimport { BindingProperty, BindingPropertyType } from './binding_property';\r\n\r\n/**\r\n * 属性工具类\r\n */\r\nclass PropertyUtil {\r\n\r\n  /**\r\n   * 获取实体上的属性集合，并将他们转换成BindingProperty集合\r\n   * @param  entityType 实体类型\r\n   * @returns 绑定属性集合\r\n   */\r\n  static getProperties(entityType: Type<Entity>): BindingProperty[] {\r\n    const properties = [];\r\n\r\n    // Plain\r\n    const ngFieldProperties = FieldMetadataUtil.getNgFields(entityType);\r\n    Object.keys(ngFieldProperties).forEach((propertyName: string) => {\r\n      const ngFieldProperty = ngFieldProperties[propertyName];\r\n      properties.push({\r\n        name: propertyName,\r\n        type: BindingPropertyType.Plain,\r\n        isPrimaryKey: ngFieldProperty.primary,\r\n        isForeignKey: ngFieldProperty.foreign,\r\n        enableMultiLangInput: ngFieldProperty.enableMultiLangInput\r\n      });\r\n    });\r\n\r\n    // Object\r\n    const ngObjectProperties = FieldMetadataUtil.getNgObjects(entityType);\r\n    Object.keys(ngObjectProperties).forEach((propertyName: string) => {\r\n      const ngObjectProperty = ngObjectProperties[propertyName];\r\n      properties.push({\r\n        name: propertyName,\r\n        type: BindingPropertyType.Object,\r\n        entityType: ngObjectProperty.type\r\n      });\r\n    });\r\n\r\n    // List\r\n    const ngListProperties = FieldMetadataUtil.getNgList(entityType);\r\n    Object.keys(ngListProperties).forEach((propertyName: string) => {\r\n      const ngListProperty = ngListProperties[propertyName];\r\n      properties.push({\r\n        name: propertyName,\r\n        type: BindingPropertyType.List,\r\n        entityType: ngListProperty.type\r\n      });\r\n    });\r\n\r\n    // Dynamics\r\n    const ngDynamicProperties = FieldMetadataUtil.getNgDynamic(entityType);\r\n    Object.keys(ngDynamicProperties).forEach((propertyName: string) => {\r\n      const ngDynamicProperty = ngDynamicProperties[propertyName];\r\n      properties.push({\r\n        name: propertyName,\r\n        type: BindingPropertyType.Dynamic,\r\n        entityType: ngDynamicProperty.type\r\n      });\r\n    });\r\n\r\n    return properties;\r\n  }\r\n\r\n  static getDynamicProperties(dynamicData: any): BindingProperty[] {\r\n    const properties = [];\r\n    Object.keys(dynamicData).forEach((propertyName: string) => {\r\n      if (dynamicData.hasOwnProperty(propertyName)) {\r\n        if (dynamicData[propertyName] instanceof Object) {\r\n          properties.push({\r\n            name: propertyName,\r\n            type: BindingPropertyType.Dynamic,\r\n            entityType: null\r\n          });\r\n        } else {\r\n          properties.push({\r\n            name: propertyName,\r\n            type: BindingPropertyType.Plain,\r\n            isPrimaryKey: false,\r\n            isForeignKey: false\r\n          });\r\n        }\r\n      }\r\n    });\r\n    return properties;\r\n  }\r\n  /**\r\n   * 根据属性名获取属性\r\n   */\r\n  static getPropertyByName(properties: BindingProperty[], propertyName: string): BindingProperty {\r\n    const targetProperty = properties.find((property: BindingProperty) => {\r\n      return property.name === propertyName;\r\n    });\r\n    return targetProperty;\r\n  }\r\n\r\n  /**\r\n   * 获取实体主键名\r\n   * @param properties 属性集合\r\n   * @returns 主键名\r\n   */\r\n  static getPrimaryKey(properties: BindingProperty[]): string {\r\n\r\n    // 实体必须有主键，如果没有主键在构造实体的时候就已经报错，这里不需要再进行检查\r\n    const primaryProperty = properties.find((property: BindingProperty) => {\r\n      return property.isPrimaryKey === true;\r\n    });\r\n    return primaryProperty ? primaryProperty.name : '';\r\n  }\r\n\r\n}\r\n\r\nexport { PropertyUtil };\r\n","/**\r\n * BindingObject相关定义\r\n * @author Witt<jiwt@inspur.com>\r\n */\r\nimport { BindingProperty } from './binding_property';\r\nimport { PropertyUtil } from './property_util';\r\nimport { BaseBindingObject } from './base_binding_object';\r\n/**\r\n * BindingObject是Entity在绑定层的一个影射，它将Entity内的数据转换为不可变对象，并用于界面绑定。\r\n */\r\nclass BindingObject extends BaseBindingObject {\r\n\r\n  /**\r\n   * 构造函数\r\n   * @param properties 属性集合\r\n   */\r\n  constructor(properties: BindingProperty[]) {\r\n    super();\r\n    this.properties = properties;\r\n    this.primaryKey = PropertyUtil.getPrimaryKey(properties);\r\n  }\r\n  /**\r\n   * 重新加载数据\r\n   * @param data \r\n   */\r\n  /*public load(data: any) {\r\n    throw new Error('Method not implemented.');\r\n  }*/\r\n}\r\n\r\nexport { BindingObject };\r\n","import { Type } from \"@angular/core\";\r\nimport { ClassType } from \"../entity\";\r\nimport { BindingList } from \"./binding_list\";\r\nimport { BindingProperty } from \"./binding_property\";\r\n/**\r\n * BindingListTypeFactory\r\n */\r\nexport class BindingListTypeFactory {\r\n  private static provider: Map<BindingProperty[], Type<BindingList>> = new Map<BindingProperty[], Type<BindingList>>();\r\n  public static create(bindingProperties: BindingProperty[]) {\r\n    const bindingListType = this.getType(bindingProperties);\r\n    const bindingList = new bindingListType(bindingProperties);\r\n    return bindingList;\r\n  }\r\n  /**\r\n   * 创建BindingList模板类\r\n   * @param bindingProperties \r\n   * @returns \r\n   */\r\n  private static createType(bindingProperties: BindingProperty[]): ClassType<BindingList> {\r\n    const bindingListType = class BindingListType extends BindingList {\r\n      constructor(properties: BindingProperty[]) {\r\n        super(properties);\r\n      }\r\n    }\r\n    const bindingListTypePrototype = bindingListType.prototype;\r\n    this.extendProperties(bindingListTypePrototype, bindingProperties);\r\n    return bindingListType;\r\n  }\r\n  /**\r\n   * 扩展BindingList模板类属性\r\n   * @param bindingListPrototype bindingList原型\r\n   * @param bindingProperties 属性数组\r\n   */\r\n  private static extendProperties(bindingListPrototype: BindingList, bindingProperties: BindingProperty[]) {\r\n    bindingProperties.forEach((bindingProperty: BindingProperty) => {\r\n      const propertyName = bindingProperty.name;\r\n      Object.defineProperty(bindingListPrototype, propertyName, {\r\n        get: function () {\r\n          return this.currentItem[propertyName];\r\n        }\r\n      });\r\n    });\r\n  }\r\n  /**\r\n   * 获取缓存的bindingList模板类\r\n   * @param bindingProperties bindingList属性\r\n   * @returns \r\n   */\r\n  private static getType(bindingProperties: BindingProperty[]): Type<BindingList> {\r\n    if (this.provider.has(bindingProperties)) {\r\n      return this.provider.get(bindingProperties);\r\n    }\r\n    const bindingListType = this.createType(bindingProperties);\r\n    this.provider.set(bindingProperties, bindingListType);\r\n    return bindingListType;\r\n  }\r\n}","/**\r\n * 绑定列表工厂相关定义\r\n * @author Witt<jiwt@inspur.com>\r\n */\r\n\r\nimport { BindingList } from './binding_list';\r\nimport { BindingListTypeFactory } from './binding_list_type_factory';\r\nimport { BindingProperty } from './binding_property';\r\n\r\n/**\r\n * BindingList工厂用于创建一个空的BindingList对象，并将当前行的属性影射到BindingList对象上。\r\n *\r\n * **示例代码**\r\n * ```ts\r\n * const deptProperties: BindingProperty[] = PropertyUtil.getProperties(DeptEntity);\r\n * const deptList = BindingListFactory.create(deptProperties);\r\n * ```\r\n */\r\nclass BindingListFactory {\r\n\r\n  /**\r\n   * 创建BindingList实例，并扩展其属性\r\n   * @param bindingProperties 绑定属性集合\r\n   */\r\n  static create(bindingProperties: BindingProperty[]): BindingList {\r\n    // const bindingList = new BindingList(bindingProperties);\r\n    // this.extendProperties(bindingList, bindingProperties);\r\n    const bindingList = BindingListTypeFactory.create(bindingProperties);\r\n    return bindingList;\r\n  }\r\n\r\n  /**\r\n   * 扩展BindingList属性，将当前行上的属性映射到列表上\r\n   * @param bindingList       要扩展的绑定列表\r\n   * @param bindingProperties 绑定属性集合\r\n   */\r\n  static extendProperties(bindingList: BindingList, bindingProperties: BindingProperty[]) {\r\n    bindingProperties.forEach((bindingProperty: BindingProperty) => {\r\n      const propertyName = bindingProperty.name;\r\n      Object.defineProperty(bindingList, propertyName, {\r\n        get: () => {\r\n          return bindingList.currentItem[propertyName];\r\n        }\r\n      });\r\n    });\r\n  }\r\n}\r\n\r\nexport { BindingListFactory };\r\n\r\n","import { Type } from '@angular/core';\r\n//import { Map as ImmutableMap } from 'immutable';\r\nimport { Change } from './changes';\r\nimport { BindingProperty, BindingPropertyType } from './binding_property';\r\nimport { BindingList } from './binding_list';\r\nimport { PropertyUtil } from './property_util';\r\nimport { BaseBindingObject } from './base_binding_object';\r\nimport { BindingListFactory } from './binding_list_factory';\r\nimport { ClassType } from '../entity';\r\nimport { BindingObject } from './binding_object';\r\nimport { TranslateService } from '../i18n/translate_service';\r\n// import { BindingObjectFactory } from './binding_object_factory';\r\n\r\n/**\r\n * BindingObjectTypeFactory\r\n */\r\nexport class BindingObjectTypeFactory {\r\n  private static provider: Map<BindingProperty[], Type<BindingObject>> = new Map<BindingProperty[], Type<BindingObject>>();\r\n  /**\r\n   * 创建BindingObject\r\n   * @param properties \r\n   * @param data \r\n   * @returns \r\n   */\r\n  public static create(properties: BindingProperty[]/*, data?: any*/) {\r\n    const bindingObjectType = this.getType(properties);\r\n    return new bindingObjectType();\r\n  }\r\n  /**\r\n   * 创建原型类型\r\n   * @param properties \r\n   * @returns \r\n   */\r\n  private static createType(properties: BindingProperty[]): ClassType<BindingObject> {\r\n    // 继承原绑定对象所有属性\r\n    const bindingObjectType = class BindingObjectType extends BaseBindingObject {\r\n      constructor() {\r\n        super();\r\n        // this.innerValues = ImmutableMap(Object.assign({}, data));\r\n\r\n      }\r\n      //#endregion load\r\n\r\n      /*\r\n      public load(data: any) {\r\n        // data包含多语字段\r\n        this.innerValues = ImmutableMap(Object.assign({}, data));\r\n        this.properties.forEach((property: BindingProperty) => {\r\n          if (property.type === BindingPropertyType.List) {\r\n            this.loadLists(property);\r\n          } else if (property.type === BindingPropertyType.Object) {\r\n            this.loadObjects(property);\r\n          } else if (property.type === BindingPropertyType.Dynamic) {\r\n            this.loadDynamicObjects(property);\r\n          } else {\r\n            this.loadFields(property);\r\n          }\r\n        });\r\n      }\r\n      private loadFields(property: BindingProperty) {\r\n        const propertyName = property.name;\r\n        const dataField = property.dataField || propertyName;\r\n        let value;\r\n        if (property.enableMultiLangInput) {\r\n          value = this.getValue(dataField, false);\r\n        } else {\r\n          value = this.getValue(propertyName);\r\n        }\r\n        this[propertyName] = value;\r\n      }\r\n      private loadLists(property: BindingProperty) {\r\n        const propertyName = property.name;\r\n        const key = `_${propertyName}_`;\r\n        const bindingList: BindingList = this[key];\r\n        if (bindingList) {\r\n          const childListProperties = PropertyUtil.getProperties(property.entityType);\r\n          const data: any[] = this.getValue(propertyName);\r\n          if (data) {\r\n            const bindingObjects = data.map(item => {\r\n              const bindingObject = BindingObjectTypeFactory.create(childListProperties);\r\n              return bindingObject;\r\n            });\r\n            bindingList.load(bindingObjects);\r\n          }\r\n        }\r\n      }\r\n      private loadObjects(property: BindingProperty) {\r\n        const propertyName = property.name;\r\n        const key = `_${propertyName}_`;\r\n        const value = this.getValue(propertyName) || {};\r\n        const childObjectProperties = PropertyUtil.getProperties(property.entityType);\r\n        const bindingObject = BindingObjectTypeFactory.create(childObjectProperties);\r\n        this[key] = bindingObject;\r\n\r\n      }\r\n      private loadDynamicObjects(property: BindingProperty) {\r\n        const propertyName = property.name;\r\n        const value = this.getValue(propertyName) || {};\r\n        const dynamicObject = BindingObjectFactory.createDynamicBindingObject(value);\r\n        Object.defineProperty(this, propertyName, {\r\n          value: dynamicObject\r\n        });\r\n      }*/\r\n      //#endregion\r\n    };\r\n    // 获取主键\r\n    const primaryKey = PropertyUtil.getPrimaryKey(properties);\r\n    // 设置主键\r\n    bindingObjectType.prototype.primaryKey = primaryKey;\r\n    bindingObjectType.prototype.properties = properties;\r\n    // 将属性扩展到原型对象上\r\n    this.extendProperties(bindingObjectType.prototype, properties);\r\n    return bindingObjectType;\r\n  }\r\n  /**\r\n   * 扩展原型属性\r\n   * @param typePrototype \r\n   * @param properties \r\n   */\r\n  private static extendProperties(typePrototype: BaseBindingObject, properties: BindingProperty[]) {\r\n    // 扩展BindingObject属性\r\n    properties.forEach((property: BindingProperty) => {\r\n      if (property.type === BindingPropertyType.List) {\r\n        this.extendListProperty(typePrototype, property);\r\n      } else if (property.type === BindingPropertyType.Object) {\r\n        this.extendObjectProperty(typePrototype, property);\r\n      } else if (property.type === BindingPropertyType.Dynamic) {\r\n        this.extendDynamicObjectProperty(typePrototype, property);\r\n      } else {\r\n        this.extendPlainProperty(typePrototype, property);\r\n      }\r\n    });\r\n  }\r\n  /**\r\n   * 扩展原型列表属性\r\n   * @param typePrototype \r\n   * @param property \r\n   */\r\n  private static extendListProperty(typePrototype: BaseBindingObject, property: BindingProperty) {\r\n    const propertyName = property.name;\r\n    const childListProperties = PropertyUtil.getProperties(property.entityType);\r\n    const key = `_${propertyName}_`;\r\n    // 将子的BindingList实例赋值给当前属性\r\n    Object.defineProperty(typePrototype, propertyName, {\r\n      get: function () {\r\n        let bindingList = this[key];\r\n        if (!bindingList) {\r\n          bindingList = BindingListFactory.create(childListProperties);\r\n          this[key] = bindingList;\r\n          // 加载数据\r\n          const data: any[] = this.getValue(propertyName);\r\n          if (data) {\r\n            const bindingObjects = data.map(item => {\r\n              const bindingObject = BindingObjectTypeFactory.create(childListProperties);\r\n              return bindingObject;\r\n            });\r\n            bindingList.load(bindingObjects);\r\n          }\r\n          // 指定子List的parent、监听子List的changes事件\r\n          bindingList.parent = this;\r\n          bindingList.changes.subscribe((change: Change) => {\r\n            change.path.unshift(propertyName);\r\n            this.changes.next(change);\r\n          });\r\n        }\r\n        return bindingList;\r\n      },\r\n      set: function (bindingList: BindingList) {\r\n        this[key] = bindingList;\r\n      }\r\n    });\r\n  }\r\n  /**\r\n   * 扩展原型对象属性\r\n   * @param typePrototype \r\n   * @param property \r\n   */\r\n  private static extendObjectProperty(typePrototype: BaseBindingObject, property: BindingProperty): void {\r\n    const propertyName = property.name;\r\n    const childObjectProperties = PropertyUtil.getProperties(property.entityType);\r\n    const key = `_${propertyName}_`;\r\n    Object.defineProperty(typePrototype, propertyName, {\r\n      get: function () {\r\n        let bindingObject = this[key];\r\n        if (!bindingObject) {\r\n          const value = this.getValue(propertyName) || {};\r\n          bindingObject = BindingObjectTypeFactory.create(childObjectProperties);\r\n          this[key] = bindingObject;\r\n          // 指定子Object的parent、监听子Object的changes事件\r\n          bindingObject.parent = this;\r\n          bindingObject.changes.subscribe((change: Change) => {\r\n            change.path.unshift(propertyName);\r\n            this.changes.next(change);\r\n          });\r\n        }\r\n        return bindingObject;\r\n      },\r\n      set: function (value: BaseBindingObject) {\r\n        this[key] = value;\r\n      }\r\n    });\r\n  }\r\n  /**\r\n   * 扩展原型动态属性\r\n   * @param typePrototype \r\n   * @param property \r\n   */\r\n  private static extendDynamicObjectProperty(typePrototype: BaseBindingObject, property: BindingProperty): void {\r\n    const propertyName = property.name;\r\n    // Object.defineProperty(typePrototype, propertyName, {\r\n    //   value: null\r\n    // });\r\n    typePrototype[propertyName] = null;\r\n  }\r\n  /**\r\n   * 扩展原型简单属性\r\n   * @param typePrototype \r\n   * @param property \r\n   */\r\n  private static extendPlainProperty(typePrototype: BaseBindingObject, property: BindingProperty): void {\r\n    const propertyName = property.name;\r\n    Object.defineProperty(typePrototype, propertyName, {\r\n      get: function () {\r\n        if (property.enableMultiLangInput === true) {\r\n          let value = this.getValue(propertyName, false);\r\n          if (!value) {\r\n            value = this.getValue(propertyName, false);\r\n            const langCode = TranslateService.getCurrentLanguage();\r\n            return { [langCode]: value };\r\n          }\r\n          return value;\r\n        } else {\r\n          const value = this.getValue(propertyName);\r\n          return value;\r\n        }\r\n      },\r\n      set: function (value: any) {\r\n        const oldValue = this.getValue(propertyName);\r\n        if (value === oldValue) {\r\n          return;\r\n        }\r\n        this.setValue(propertyName, value, true, true);\r\n      }\r\n    });\r\n  }\r\n  /**\r\n   * 获取缓存的bindingList模板类\r\n   * @param properties bindingList属性\r\n   * @returns \r\n   */\r\n  private static getType(properties: BindingProperty[]): Type<BindingObject> {\r\n    if (this.provider.has(properties)) {\r\n      return this.provider.get(properties);\r\n    }\r\n    const bindingObjectType = this.createType(properties);\r\n    this.provider.set(properties, bindingObjectType);\r\n    return bindingObjectType;\r\n  }\r\n}","/**\r\n * 绑定对象工厂相关定义\r\n * @author Witt<jiwt@inspur.com>\r\n */\r\n\r\nimport { Change } from './changes';\r\nimport { PropertyUtil } from './property_util';\r\nimport { BindingProperty, BindingPropertyType } from './binding_property';\r\nimport { BindingObject } from './binding_object';\r\nimport { BindingListFactory } from './binding_list_factory';\r\nimport { BindingObjectTypeFactory } from './binding_object_type_factory';\r\n\r\n/**\r\n * BindingObject工厂用于创建一个空的BindingObject对象，并对其属性进行扩展。\r\n *\r\n * **扩展属性处理**\r\n *\r\n * 对于要扩展的属性（BindingProperty）有三种处理：\r\n * - 普通属性：初始化为一个undefined，并包装get、set方法，通过set方法监听变更；\r\n * - 对象属性：初始化为一个空的BindingObject对象，并监听子对象的变更；\r\n * - 列表属性：初始化为一个空的BindingList对象，并监听子列表的变更；\r\n *\r\n * **示例代码**\r\n *\r\n * ```ts\r\n *  const empProperties = PropertyUtil.getProperties(EmpEntity);\r\n * const empBindingObject = BindingObjectFactory.create(properties);\r\n * ```\r\n */\r\nclass BindingObjectFactory {\r\n\r\n  /**\r\n   * 创建BindingObject实例\r\n   * @param properties 要扩展的属性集合\r\n   * @returns 带扩展属性的空BindingObject对象\r\n   */\r\n  static create(properties: BindingProperty[]/*, data?: any*/): BindingObject {\r\n    const bindingObjectType = BindingObjectTypeFactory.create(properties/*, data*/);\r\n    return bindingObjectType;\r\n    // const object = new BindingObject(properties);\r\n    // this.extendProperties(object, properties);\r\n    // return object;\r\n  }\r\n\r\n  static createDynamicBindingObject(data: any): BindingObject {\r\n    const properties = PropertyUtil.getDynamicProperties(data);\r\n    const object = BindingObjectTypeFactory.create(properties/*, data*/);//new BindingObject(properties);\r\n    this.extendProperties(object, properties);\r\n    return object;\r\n  }\r\n\r\n  /**\r\n   * 扩展属性绑定对象的属性\r\n   * @param object     要扩展的绑定对象\r\n   * @param properties 绑定属性集合\r\n   */\r\n  static extendProperties(object: BindingObject, properties: BindingProperty[]): void {\r\n    // 扩展BindingObject属性\r\n    properties.forEach((property: BindingProperty) => {\r\n      if (property.type === BindingPropertyType.List) {\r\n        this.extendListProperty(object, property);\r\n      } else if (property.type === BindingPropertyType.Object) {\r\n        this.extendObjectProperty(object, property);\r\n      } else if (property.type === BindingPropertyType.Dynamic) {\r\n        this.extendDynamicObjectProperty(object, property);\r\n      } else {\r\n        this.extendPlainProperty(object, property);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * 扩展列表类型的绑定属性\r\n   * @param object     要扩展的绑定对象\r\n   * @param properties 列表类型的绑定属性集合\r\n   */\r\n  static extendListProperty(object: BindingObject, property: BindingProperty): void {\r\n    const propertyName = property.name;\r\n    const childListProperties = PropertyUtil.getProperties(property.entityType);\r\n    const childList = BindingListFactory.create(childListProperties);\r\n\r\n    // 指定子List的parent、监听子List的changes事件\r\n    childList.parent = object;\r\n    childList.changes.subscribe((change: Change) => {\r\n      change.path.unshift(propertyName);\r\n      object.changes.next(change);\r\n    });\r\n\r\n    // 将子的BindingList实例赋值给当前属性\r\n    Object.defineProperty(object, propertyName, {\r\n      value: childList\r\n    });\r\n  }\r\n\r\n  /**\r\n   * 扩展对象类型的绑定属性\r\n   * @param object     要扩展的绑定对象\r\n   * @param properties 对象类型的绑定属性集合\r\n   */\r\n  static extendObjectProperty(object: BindingObject, property: BindingProperty): void {\r\n    const propertyName = property.name;\r\n    const childObjectProperties = PropertyUtil.getProperties(property.entityType);\r\n    const childObject = this.create(childObjectProperties);\r\n\r\n    // 指定子Object的parent、监听子Object的changes事件\r\n    childObject.parent = object;\r\n    childObject.changes.subscribe((change: Change) => {\r\n      change.path.unshift(propertyName);\r\n      object.changes.next(change);\r\n    });\r\n\r\n    Object.defineProperty(object, propertyName, {\r\n      value: childObject\r\n    });\r\n  }\r\n\r\n  static extendDynamicObjectProperty(object: BindingObject, property: BindingProperty): void {\r\n    const propertyName = property.name;\r\n    object[propertyName] = null;\r\n  }\r\n\r\n  static attachDynamicObjectProperty(object: BindingObject, propertyName: string, dynamicObject: BindingObject) {\r\n    dynamicObject.parent = object;\r\n    dynamicObject.changes.subscribe((change: Change) => {\r\n      change.path.unshift(propertyName);\r\n      object.changes.next(change);\r\n    });\r\n    Object.defineProperty(object, propertyName, {\r\n      value: dynamicObject\r\n    });\r\n  }\r\n\r\n  /**\r\n   * 扩展简单类型的绑定属性\r\n   * @param object     要扩展的绑定对象\r\n   * @param properties 简单类型的绑定属性集合\r\n   */\r\n  static extendPlainProperty(object: BindingObject, property: BindingProperty): void {\r\n    const propertyName = property.name;\r\n    Object.defineProperty(object, propertyName, {\r\n      get: () => {\r\n        return object.getValue(propertyName);\r\n      },\r\n      set: (value: any) => {\r\n        const oldValue = object.getValue(propertyName);\r\n        if (value === oldValue) {\r\n          return;\r\n        }\r\n        object.setValue(propertyName, value, true, true);\r\n      }\r\n    });\r\n  }\r\n\r\n}\r\n\r\nexport { BindingObjectFactory };\r\n","import { Type } from '@angular/core';\r\nimport { makePropDecorator, makeDecorator } from '../metadata/index';\r\nimport { ValidatorFn, AsyncValidatorFn } from '@angular/forms';\r\nimport { Form } from './form';\r\nimport { ControlValueConverter } from './control_value_converter';\r\nimport { ValidateRule } from '../entity';\r\n\r\n/**\r\n * ----------------------------------------\r\n * NgValidateForm\r\n * ----------------------------------------\r\n */\r\n\r\n/**\r\n * 子表单装饰器名称\r\n */\r\nexport const NG_VALIDATE_FORM = 'NgValidateForm';\r\n\r\n/**\r\n * 表单描述\r\n */\r\nexport interface NgValidateForm {\r\n\r\n  /**\r\n   * Form名称，用于显示验证信息\r\n   */\r\n  formGroupName: string;\r\n  /**\r\n   * 是否启用验证\r\n   */\r\n  enableValidate: boolean;\r\n}\r\n\r\n/**\r\n * 表单装饰器\r\n */\r\nexport interface NgValidateFormDecorator {\r\n  (obj?: NgValidateForm): any;\r\n  new(obj?: NgValidateForm): any;\r\n}\r\n\r\n/**\r\n * 表单装饰器工厂\r\n */\r\nexport function NgValidateForm(options: NgValidateForm) {\r\n  const decoratorFactory = makeDecorator(NG_VALIDATE_FORM, (obj: NgValidateForm) => obj);\r\n  return decoratorFactory(options);\r\n}\r\n\r\n/**\r\n * ----------------------------------------\r\n * NgChildForm\r\n * ----------------------------------------\r\n */\r\n\r\n/**\r\n * 子表单装饰器名称\r\n */\r\nexport const NG_CHILD_FORM = 'NgChildForm';\r\n\r\n/**\r\n * 子表单描述\r\n */\r\nexport interface NgChildForm {\r\n\r\n  /**\r\n   * 子表单类型\r\n   */\r\n  formType: Type<Form>;\r\n}\r\n\r\n/**\r\n * 子表单装饰器\r\n */\r\nexport interface NgChildFormDecorator {\r\n  (obj?: NgChildForm): any;\r\n  new(obj?: NgChildForm): any;\r\n}\r\n\r\n/**\r\n * 子表单装饰器工厂\r\n */\r\nexport const NgChildForm: NgChildFormDecorator =\r\n  makePropDecorator(NG_CHILD_FORM, (obj: NgChildForm) => obj);\r\n\r\n\r\n/**\r\n * ----------------------------------------\r\n * NgChildFormArray\r\n * ----------------------------------------\r\n */\r\n\r\n/**\r\n * 子表单数组装饰器名称\r\n * @type {string}\r\n */\r\nexport const NG_CHILD_FORM_ARRAY = 'NgChildFormArray';\r\n\r\n/**\r\n * 子表单数组描述\r\n */\r\nexport interface NgChildFormArray {\r\n\r\n  /**\r\n   * 子表单数组内子表单的类型\r\n   */\r\n  formType: Type<Form>;\r\n\r\n  /**\r\n   * 多行记录\r\n   */\r\n  multi?: boolean;\r\n}\r\n\r\n/**\r\n * 子表单数组装饰器\r\n */\r\nexport interface NgFormArrayDecorator {\r\n  (obj?: NgChildFormArray): any;\r\n  new(obj?: NgChildFormArray): any;\r\n}\r\n\r\n/**\r\n * 子表单数组装饰器工厂\r\n */\r\nexport const NgChildFormArray: NgFormArrayDecorator =\r\n  makePropDecorator(NG_CHILD_FORM_ARRAY, (obj: NgChildFormArray) => obj);\r\n\r\n\r\n/**\r\n * ----------------------------------------\r\n * NgFormControl\r\n * ----------------------------------------\r\n */\r\n\r\n/**\r\n * 表单控件装饰器名称\r\n * @type {string}\r\n */\r\nexport const NG_FORM_CONTROL = 'NgFormControl';\r\n\r\n/**\r\n * 表单控件描述\r\n */\r\nexport interface NgFormControl {\r\n  /**\r\n   * 控件标识\r\n   */\r\n  id?: string;\r\n  /**\r\n   * 控件名称\r\n   */\r\n  name?: string;\r\n\r\n  /**\r\n   * 默认控件名称(多语环境翻译无值时使用)\r\n   */\r\n  defaultI18nValue?: string;\r\n\r\n  /**\r\n   * 绑定字段路径\r\n   */\r\n  binding?: string;\r\n\r\n  /**\r\n   * 值转换器\r\n   */\r\n  valueConverter?: ControlValueConverter;\r\n\r\n  /**\r\n   * 是否禁用\r\n   */\r\n  disabled?: boolean;\r\n\r\n  /**\r\n   * 控件值更新时机\r\n   */\r\n  updateOn?: 'change' | 'blur' | 'submit';\r\n\r\n  /**\r\n   * 同步验证器\r\n   */\r\n  validators?: ValidatorFn | ValidatorFn[] | null;\r\n\r\n  /**\r\n   * 异步验证器\r\n   */\r\n  asyncValidatorFn?: AsyncValidatorFn | AsyncValidatorFn | null;\r\n\r\n  /**\r\n   * 验证规则\r\n   */\r\n  validRules?: ValidateRule | ValidateRule[] | null;\r\n\r\n  /**\r\n   * 值改变前监听器\r\n   */\r\n  valueChanging?: string;\r\n  /**\r\n   * 值改变后监听器\r\n   */\r\n  valueChanged?: string;\r\n  /**\r\n   * 大数\r\n   */\r\n  bigNumber?: boolean;\r\n  [prop: string]: any;\r\n}\r\n\r\n/**\r\n * 表单控件装饰器\r\n */\r\nexport interface NgFormControlDecorator {\r\n  (obj?: NgFormControl): any;\r\n  new(obj?: NgFormControl): any;\r\n}\r\n\r\n/**\r\n * 表单控件装饰器工厂\r\n */\r\nexport const NgFormControl: NgFormControlDecorator =\r\n  makePropDecorator(NG_FORM_CONTROL, (obj: NgFormControl) => obj);\r\n","/**\r\n * 数据路径处理\r\n */\r\nclass BindingPathConverter {\r\n\r\n  /**\r\n   * (BindingPathString | BindingPathArray) => BindingPathArray\r\n   * @param bindingPath BindingPath的字符串或者数组格式\r\n   * @return BindingPath数组\r\n   */\r\n  public static toBindingPathArray(bindingPath: string | string[]): string[] {\r\n    let bindingPathArray: string[];\r\n    if (typeof bindingPath === 'string') {\r\n      bindingPathArray = bindingPath.split('/').filter((part: string) => {\r\n        return part !== '';\r\n      });\r\n      return bindingPathArray;\r\n    } else {\r\n      bindingPathArray = bindingPath.concat([]);\r\n    }\r\n\r\n    return bindingPathArray;\r\n  }\r\n\r\n  /**\r\n   * BindingPathArray => BindingPathString\r\n   */\r\n  public static toBindingPathString(bindingPathArray: string[]): string {\r\n    return '/' + bindingPathArray.join('/');\r\n  }\r\n}\r\n\r\nexport { BindingPathConverter };\r\n","import { BindingPathConverter } from './binding_path_converter';\r\n\r\n/**\r\n * BindingPath比较器\r\n */\r\nclass BindingPathComparer {\r\n\r\n  /**\r\n   * 是否相等\r\n   */\r\n  public static isEqual(srcPath: string | string[], dstPath: string | string[]) {\r\n    const srcPathArray = BindingPathConverter.toBindingPathArray(srcPath);\r\n    const dstPathArray = BindingPathConverter.toBindingPathArray(dstPath);\r\n\r\n    const isEqual = srcPathArray.every((srcPathItem: string, srcPathIndex: number) => {\r\n      return srcPathItem === dstPathArray[srcPathIndex];\r\n    });\r\n\r\n    return isEqual;\r\n  }\r\n\r\n  /**\r\n   * 是否是父路径\r\n   */\r\n  public static isParent(childPath: string | string[], parentPath: string | string[]): boolean {\r\n\r\n    const childPathArray  = BindingPathConverter.toBindingPathArray(childPath);\r\n    const parentPathArray = BindingPathConverter.toBindingPathArray(parentPath);\r\n\r\n    // 长度差1个\r\n    if (childPathArray.length !== parentPathArray.length + 1) {\r\n      return;\r\n    }\r\n\r\n    return this.isAncestor(childPath, parentPath);\r\n  }\r\n\r\n  /**\r\n   * 是否是祖先路径\r\n   */\r\n  public static isAncestor(descendantPath: string | string[], ancestorPath: string | string[]): boolean {\r\n    const descendantPathArray = BindingPathConverter.toBindingPathArray(descendantPath);\r\n    const ancestorPathArray   = BindingPathConverter.toBindingPathArray(ancestorPath);\r\n\r\n    if (descendantPath.length <= ancestorPathArray.length) {\r\n      return false;\r\n    }\r\n\r\n    const isAncestor = ancestorPathArray.every((ancestorPathItem: string, ancestorPathIndex: number) => {\r\n      return ancestorPathItem === descendantPathArray[ancestorPathIndex];\r\n    });\r\n\r\n    return isAncestor;\r\n  }\r\n\r\n}\r\n\r\nexport { BindingPathComparer };\r\n","import { BindingPathConverter } from './binding_path_converter';\r\n\r\n/**\r\n * BindingPath遍历器\r\n */\r\nclass BindingPathTraverser {\r\n\r\n  /**\r\n   * 获取叶子节点的Path\r\n   */\r\n  public static getLeafPathString(bindingPath: string | string[]): string {\r\n    const bindingPathArray = BindingPathConverter.toBindingPathArray(bindingPath);\r\n    return bindingPathArray.pop();\r\n  }\r\n\r\n  /**\r\n   * 获取父路径\r\n   */\r\n  public static getParentPathString(bindingPath: string | string[]): string {\r\n    const bindingPathArray = BindingPathConverter.toBindingPathArray(bindingPath);\r\n    bindingPathArray.pop();\r\n    return '/' + bindingPathArray.join('/');\r\n  }\r\n}\r\n\r\nexport { BindingPathTraverser };\r\n","import {\r\n  BindingData, BindingPropertyType, PropertyUtil\r\n} from '../../binding-data/index';\r\nimport { BindingPathConverter } from './binding_path_converter';\r\n\r\n/**\r\n * EntityPath转换器\r\n */\r\nclass EntityPathConverter {\r\n\r\n  /**\r\n   * 转换为Entity可识别的路径\r\n   * 根：[]\r\n   * 主表：['id:xxx', 'name'],\r\n   * 关联：['id:xxx', 'deptInfo', 'id:xxx', 'name']\r\n   * UDT: ['id:xxx', 'updateInfo', ':', 'createdOn']\r\n   * 从表：['id:xxx', 'edus', 'id:xxx', 'name'],\r\n   * 从从表：['id:xxx', 'edus', 'id:xxx', 'grades', 'id:xxx', 'name']\r\n   */\r\n  public static toEntityPathArray(bindingPathString: string, bindingData: BindingData): string[] {\r\n    const bindingPathArray: string[] = BindingPathConverter.toBindingPathArray(bindingPathString);\r\n    const entityPathArray: string[] = [];\r\n\r\n    if (bindingPathArray.length === 0) {\r\n      return entityPathArray;\r\n    }\r\n\r\n    // 根节点\r\n    let currentBindingObject = bindingData.list.currentItem;\r\n    entityPathArray.push(\r\n      this.createPrimaryKeyPath(currentBindingObject.primaryKey, currentBindingObject.primaryKeyValue)\r\n    );\r\n\r\n    bindingPathArray.forEach((propName: string) => {\r\n      const propInfo = PropertyUtil.getPropertyByName(currentBindingObject.properties, propName);\r\n      switch (propInfo.type) {\r\n        case BindingPropertyType.Plain:\r\n          entityPathArray.push(propName);\r\n          break;\r\n        case BindingPropertyType.Object:\r\n          currentBindingObject = currentBindingObject[propName];\r\n          entityPathArray.push(propName);\r\n          entityPathArray.push(\r\n            this.createPrimaryKeyPath(currentBindingObject.primaryKey, currentBindingObject.primaryKeyValue)\r\n          );\r\n          break;\r\n        case BindingPropertyType.List:\r\n          const currentBindingList = currentBindingObject[propName];\r\n          currentBindingObject = currentBindingList.currentItem;\r\n          entityPathArray.push(propName);\r\n          entityPathArray.push(\r\n            this.createPrimaryKeyPath(currentBindingObject.primaryKey, currentBindingObject.primaryKeyValue)\r\n          );\r\n          break;\r\n        default:\r\n            break;\r\n      }\r\n    });\r\n\r\n    return entityPathArray;\r\n  }\r\n\r\n  /**\r\n   * 创建路径中的主键部分\r\n   */\r\n  public static createPrimaryKeyPath(primaryKey: string, primaryKeyValue: string) {\r\n    return `${primaryKey}:${primaryKeyValue}`;\r\n  }\r\n\r\n}\r\n\r\nexport { EntityPathConverter };\r\n","\r\n/**\r\n * 实体路径比较器\r\n */\r\nclass EntityPathComparer {\r\n}\r\n\r\nexport { EntityPathComparer };\r\n","/*\r\n * @Author: Witt\r\n * @Date: 2018-12-27 09:25:38\r\n * @Last Modified by: Witt\r\n * @Last Modified time: 2018-12-27 09:39:10\r\n */\r\n\r\n\r\n/**\r\n * 路径类型\r\n */\r\nenum DataPathNodeType {\r\n\r\n  /**\r\n   * 标记该节点是一个实体主键值，用来在列表上定位一个实体\r\n   */\r\n  DataId   = 'DataId',\r\n\r\n  /**\r\n   * 标记该节点是一个属性名，用来在对象上定位一个属性\r\n   */\r\n  PropName = 'PropName',\r\n}\r\n\r\n\r\n/**\r\n * 路径节点\r\n */\r\nclass DataPathNode {\r\n\r\n  /**\r\n   * 上一节点\r\n   */\r\n  prev: DataPathNode;\r\n\r\n  /**\r\n   * 下一节点\r\n   */\r\n  next: DataPathNode;\r\n\r\n  /**\r\n   * 节点类型\r\n   */\r\n  type: DataPathNodeType;\r\n\r\n  /**\r\n   * 路径数据\r\n   * 对于List类型：  value是主键值，用于指明具体是哪一行；\r\n   * 对于Object类型：value是属性名，用于指明具体哪一属性。\r\n   */\r\n  value: any;\r\n\r\n  /**\r\n   * 构造函数\r\n   */\r\n  constructor(type: DataPathNodeType, data: any) {\r\n    this.type = type;\r\n    this.value = data;\r\n\r\n    this.prev = null;\r\n    this.next = null;\r\n  }\r\n}\r\n\r\n\r\nexport { DataPathNodeType, DataPathNode };\r\n","\r\n/**\r\n * 表单路径转换类\r\n */\r\nclass FormPathConverter {\r\n\r\n  /**\r\n   * ControlPathString => BingingPathArray\r\n   * @params controlPath FormControl对应的数据绑定路径（BindingData的bindingPaht + FormControl的binding）\r\n   * @return BindingPath数组\r\n   */\r\n  public static toBindingPathArray(formPahtString: string): string[] {\r\n    const bindingPathArray = formPahtString.split('.').filter((part: string) => {\r\n      return part !== '';\r\n    });\r\n    return bindingPathArray;\r\n  }\r\n}\r\n\r\nexport { FormPathConverter };\r\n","/*\r\n * @Author: Witt\r\n * @Date: 2018-12-27 09:26:41\r\n * @Last Modified by: Witt\r\n * @Last Modified time: 2019-01-15 22:00:45\r\n */\r\n\r\nimport { DataPathNode, DataPathNodeType } from './data_path_node';\r\n/**\r\n * 变更路径（简单双向列表）\r\n */\r\nclass DataPath {\r\n\r\n  /**\r\n   * 头节点\r\n   */\r\n  public head: DataPathNode;\r\n\r\n  /**\r\n   * 长度\r\n   */\r\n  public length: number;\r\n\r\n  /**\r\n   * 构造函数\r\n   */\r\n  constructor() {\r\n    this.head = new DataPathNode(null, null);\r\n    this.length = 0;\r\n  }\r\n\r\n  /**\r\n   * 添加一个节点到头部\r\n   */\r\n  public unshift(type: DataPathNodeType, data: any) {\r\n    const newNode = new DataPathNode(type, data);\r\n    newNode.next = this.head.next;\r\n    newNode.prev = this.head;\r\n\r\n    this.head.next = newNode;\r\n    if (newNode.next) {\r\n      newNode.next.prev = newNode;\r\n    }\r\n\r\n    this.length++;\r\n  }\r\n\r\n  /**\r\n   * 在链表最后追加一个节点\r\n   */\r\n  public push(type: DataPathNodeType, data: any) {\r\n    const tailNode = this.getTail();\r\n    const newNode = new DataPathNode(type, data);\r\n    tailNode.next = newNode;\r\n    this.length++;\r\n  }\r\n\r\n  /**\r\n   * 获取链表尾部节点\r\n   */\r\n  public getTail(): DataPathNode {\r\n    let lastNode = this.head;\r\n    while (lastNode.next) {\r\n      lastNode = lastNode.next;\r\n    }\r\n    return lastNode;\r\n  }\r\n\r\n  /**\r\n   * 转换为数组格式\r\n   */\r\n  public toArray() {\r\n    const pathArray = [];\r\n    let currentNode = this.head.next;\r\n    while (currentNode) {\r\n      pathArray.push(`${currentNode.type}:${currentNode.value}`) ;\r\n      currentNode = currentNode.next;\r\n    }\r\n    return pathArray;\r\n  }\r\n\r\n  /**\r\n   * 转换为字符串格式\r\n   */\r\n  public toString() {\r\n    const pathArray = this.toArray();\r\n    const pathString = pathArray.join(', ');\r\n    return `[${pathString}]`;\r\n  }\r\n\r\n  /**\r\n   * 拷贝\r\n   */\r\n  public clone(): DataPath {\r\n    const newDataPath = new DataPath();\r\n    let curDataNode = this.head.next;\r\n    while (curDataNode) {\r\n      newDataPath.push(curDataNode.type, curDataNode.value);\r\n      curDataNode = curDataNode.next;\r\n    }\r\n    return newDataPath;\r\n  }\r\n}\r\n\r\nexport { DataPath };\r\n","\r\nimport { DataTypeInfo, DataPropGroup  } from '../../core/index';\r\nimport { Entity  } from '../../entity/index';\r\nimport { Repository, EntityManager } from '../../repository/index';\r\nimport { BindingData } from '../../binding-data/index';\r\nimport { DataPathNode, DataPathNodeType } from './data_path_node';\r\nimport { DataPath } from './data_path';\r\n\r\n/**\r\n * 数据Path工厂类\r\n */\r\nclass DataPathCreator {\r\n\r\n  /**\r\n   * 将长路径数组或字符串转换为\r\n   * @param fullPathArrayOrString 路径数组或字符串\r\n   * @param repository 实体仓库\r\n   * @summary\r\n   * 1、长路径格式说明参考：data-path.md\r\n   */\r\n  public static createByLongPathFromRoot(fullPathArrayOrString: string[] | string, entityManager: EntityManager<Entity>): DataPath {\r\n    const dataPath = new DataPath();\r\n    const fullPathArray = fullPathArrayOrString as string[];\r\n    if (!fullPathArray || fullPathArray.length === 0) {\r\n      return dataPath;\r\n    }\r\n\r\n    let currentNodeInfo = {\r\n      nodeValue: fullPathArray.shift(),\r\n      nodeType: DataPathNodeType.DataId,\r\n      entityTypeInfo: new DataTypeInfo(entityManager.entityType)\r\n    };\r\n    while (currentNodeInfo) {\r\n      dataPath.push(currentNodeInfo.nodeType, currentNodeInfo.nodeValue);\r\n\r\n      // 处理下一个节点\r\n      const nextNodeValue = fullPathArray.shift();\r\n      if (!nextNodeValue || !currentNodeInfo.entityTypeInfo) {\r\n        break;\r\n      }\r\n      currentNodeInfo = this.getNextPathNodeInfo(currentNodeInfo, nextNodeValue);\r\n    }\r\n\r\n    return dataPath;\r\n  }\r\n\r\n  /**\r\n   * 获取下一个路径节点的信息\r\n   * @param parentNodeInfo 当前路径节点信息\r\n   * @param nextNodeValue 下一个路径节点的值\r\n   * @summary\r\n   * 1、这个递归写的很绕，说明数据结构设计不合理；\r\n   * 2、多个因素混用了一个结构；\r\n   */\r\n  private static getNextPathNodeInfo(parentNodeInfo: any, nextNodeValue: string): any {\r\n\r\n    const parentNodeValue = parentNodeInfo.nodeValue;\r\n    const parentNodeType = parentNodeInfo.nodeType;\r\n    const parentEntityTypeInfo = parentNodeInfo.entityTypeInfo;\r\n\r\n    if (!nextNodeValue || !parentEntityTypeInfo) {\r\n      return null;\r\n    }\r\n\r\n    const nextPathNodeInfo = {\r\n      nodeValue: nextNodeValue,\r\n      nodeType: null,\r\n      entityTypeInfo: null\r\n    };\r\n\r\n\r\n    // DataNodeType=List：下一节点肯定是Object，并且EntityTypeInfo不变\r\n    if (parentNodeType === DataPathNodeType.DataId) {\r\n      nextPathNodeInfo.nodeType = DataPathNodeType.PropName;\r\n      nextPathNodeInfo.entityTypeInfo = parentEntityTypeInfo;\r\n    } else {\r\n\r\n      // DataNodeType=Object：必然对应一个属性信息\r\n      const nextPropInfo = parentEntityTypeInfo.getPropInfoByName(parentNodeValue);\r\n      if (nextPropInfo.group === DataPropGroup.List) {\r\n\r\n        // EntityPropGroup=EntityList：下一个节点是List类型。\r\n        nextPathNodeInfo.nodeType = DataPathNodeType.DataId;\r\n        nextPathNodeInfo.entityTypeInfo = nextPropInfo.typeInfo;\r\n      } else {\r\n\r\n        // EntityPropGroup=Entity：       下级entityTypeInfo为\r\n        // EntityPropGroup=Dynamic|Plain：null\r\n        nextPathNodeInfo.nodeType = DataPathNodeType.PropName;\r\n        nextPathNodeInfo.entityTypeInfo = nextPropInfo.group === DataPropGroup.Object ? nextPropInfo.typeInfo : null;\r\n      }\r\n    }\r\n\r\n    return nextPathNodeInfo;\r\n  }\r\n\r\n  /**\r\n   * @param fullPathArrayOrString 路径数组或字符串\r\n   * @param repository 实体仓库\r\n   * @summary\r\n   * 1、长路径格式说明参考：data-path.md\r\n   * 2、shortPathArrayOrString暂时只支持字符串数组\r\n   */\r\n  public static createByShortPathFromRoot(\r\n    shortPathArrayOrString: string[] | string, entityManager: EntityManager<Entity>, bindingData: BindingData\r\n  ): DataPath {\r\n\r\n    const dataPath = new DataPath();\r\n    const shortPathArray: string[] = shortPathArrayOrString as string[];\r\n\r\n    // 根节点\r\n    let currentBindingObject = bindingData.list.currentItem;\r\n    let currentEntityTypeInfo = new DataTypeInfo(entityManager.entityType);\r\n    dataPath.push(DataPathNodeType.DataId, currentBindingObject.primaryKeyValue);\r\n\r\n    // 遍历下级节点\r\n    shortPathArray.forEach((propName: string) => {\r\n      const propInfo = currentEntityTypeInfo.getPropInfoByName(propName);\r\n      switch (propInfo.group) {\r\n        case DataPropGroup.Plain:\r\n          dataPath.push(DataPathNodeType.PropName, propName);\r\n          break;\r\n        case DataPropGroup.Object:\r\n          currentBindingObject = currentBindingObject[propName];\r\n          currentEntityTypeInfo = propInfo.typeInfo;\r\n          dataPath.push(DataPathNodeType.PropName, propName);\r\n\r\n          break;\r\n        case DataPropGroup.List:\r\n          const currentBindingList = currentBindingObject[propName];\r\n          currentBindingObject = currentBindingList.currentItem;\r\n          currentEntityTypeInfo = propInfo.typeInfo;\r\n\r\n          dataPath.push(DataPathNodeType.PropName, propName);\r\n          dataPath.push(DataPathNodeType.DataId, currentBindingObject.primaryKeyValue);\r\n          break;\r\n        default:\r\n            break;\r\n      }\r\n    });\r\n\r\n    return dataPath;\r\n  }\r\n\r\n}\r\n\r\nexport { DataPathCreator };\r\n","/*\r\n * @Author: Witt\r\n * @Date: 2019-08-14 14:11:51\r\n * @Last Modified by: Witt\r\n * @Last Modified time: 2019-08-14 16:11:51\r\n */\r\n\r\nimport { DataTypeInfo } from './data_type_info';\r\n\r\n\r\n/**\r\n * 实体属性分组\r\n */\r\nenum DataPropGroup {\r\n\r\n  /**\r\n   * 简单类型\r\n   */\r\n  Plain = 'Plain',\r\n\r\n  /**\r\n   * 实体类型\r\n   */\r\n  Object = 'Object',\r\n\r\n  /**\r\n   * 动态实体类型\r\n   */\r\n  Dynamic = 'Dynamic',\r\n\r\n  /**\r\n   * 列表类型\r\n   */\r\n  List = 'List'\r\n\r\n}\r\n\r\n\r\n/**\r\n * 实体属性信息\r\n */\r\nclass DataPropInfo {\r\n\r\n  /**\r\n   * 属性类型\r\n   */\r\n  public group: DataPropGroup;\r\n\r\n  /**\r\n   * 属性名称\r\n   */\r\n  public name: string;\r\n\r\n  /**\r\n   * 影射名称\r\n   */\r\n  public mapping: string;\r\n\r\n  /**\r\n   * 属性类型描述\r\n   */\r\n  public typeInfo: DataTypeInfo;\r\n\r\n  /**\r\n   * 元数据信息\r\n   * @todo\r\n   * 1、EntityPropInfo不应该认识元数据描述，不能强识别元数据上的属性；\r\n   * 2、将来元数据可能有多套，每一套有自己的解析 元数据解析框架还没有做，所以临时处理，不对暴露\r\n   */\r\n  public metadataInfo?: any;\r\n  /**\r\n   * 是否vo字段\r\n   */\r\n  public isVOField?: boolean;\r\n}\r\n\r\nexport { DataPropGroup, DataPropInfo };\r\n","/*\r\n * @Author: Witt\r\n * @Date: 2018-12-07 09:05:09\r\n * @Last Modified by: Witt\r\n * @Last Modified time: 2018-12-27 20:35:02\r\n */\r\n\r\nimport { Type } from '@angular/core';\r\nimport {\r\n  NgProperty, NgFieldProperty, NgObjectProperty, NgDynamicProperty, NgListProperty,\r\n  EntityMetadataUtil,\r\n  NgEntity\r\n} from '../../entity/metadata/index';\r\nimport { DataPropGroup, DataPropInfo } from './data_prop_info';\r\n\r\n/**\r\n * 实体类型信息\r\n * @todo：\r\n * 1、构造时不应该识别Entity模块的东西，应该是更抽象的；\r\n * 2、构造函数应该接收一个Builder接口，由Entity或者其他实现层来实现这个接口。\r\n */\r\nclass DataTypeInfo {\r\n  public entityInfo: NgEntity;\r\n\r\n  /**\r\n   * 数据类型\r\n   */\r\n  public type: Type<any>;\r\n\r\n  /**\r\n   * 属性集合\r\n   */\r\n  public propInfoMap: Map<string, DataPropInfo>;\r\n\r\n  /**\r\n   * 主键\r\n   */\r\n  public primaryKey: string;\r\n\r\n  /**\r\n   * 外键\r\n   */\r\n  public foreignKey: string;\r\n\r\n  /**\r\n   * 是否为值对象\r\n   */\r\n  public get isValueObject() {\r\n    return !this.primaryKey;\r\n  }\r\n\r\n  /**\r\n   * 构造函数\r\n   * @todo：不应该识别\r\n   */\r\n  constructor(type: any) {\r\n    this.type = type;\r\n    this.primaryKey = '';\r\n    this.foreignKey = '';\r\n    this.propInfoMap = new Map<string, DataPropInfo>();\r\n    this.collectEntityInfos();\r\n    this.collectPropInfos();\r\n  }\r\n  public getBindingPathByTableName(tableName: string): string {\r\n    const fullEntityPath = this.getFullEntityPath(this, tableName);\r\n    if (!fullEntityPath) {\r\n      return null;\r\n    }\r\n    fullEntityPath.splice(0, 1);\r\n    return '/' + fullEntityPath.join('/');\r\n  }\r\n  private getFullEntityPath(dataTypeInfo: DataTypeInfo, tableName: string, paths: string[] = []) {\r\n    if (dataTypeInfo.entityInfo && (dataTypeInfo.entityInfo.nodeCode === tableName || dataTypeInfo.entityInfo.originalCode === tableName)) {\r\n      paths.push(dataTypeInfo.entityInfo.nodeCode);\r\n      return paths;\r\n    }\r\n    const props = Array.from(dataTypeInfo.propInfoMap.values()).filter(p => p.typeInfo);\r\n    if (props.length < 1) {\r\n      paths = [];\r\n      return paths;\r\n    }\r\n    if (dataTypeInfo.entityInfo) {\r\n      paths.push(dataTypeInfo.entityInfo.nodeCode);\r\n    }\r\n\r\n    for (let idx = 0; idx < props.length; idx++) {\r\n      const dataTypeInfo = props[idx].typeInfo;\r\n      const path = this.getFullEntityPath(dataTypeInfo, tableName);\r\n      if (!path || path.length < 1) {\r\n        continue;\r\n      } else {\r\n        paths = paths.concat(path);\r\n        return paths;\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n  /**\r\n   * 获取全部属性信息\r\n   */\r\n  public getPropInfos(): DataPropInfo[] {\r\n    return Array.from(this.propInfoMap.values()).filter((propInfo) => !propInfo.isVOField);\r\n  }\r\n\r\n  /**\r\n   * 获取全部属性的名称\r\n   */\r\n  public getPropNames(): string[] {\r\n    const propNames = [];\r\n    const propInfos = this.getPropInfos();\r\n    propInfos.forEach((propInfo) => {\r\n      propNames.push(propInfo.name);\r\n    });\r\n    return propNames;\r\n  }\r\n\r\n  /**\r\n   * 根据group获取属性信息数组\r\n   */\r\n  public getPropInfosByGroup(group: DataPropGroup): DataPropInfo[] {\r\n    const allPropInfos = Array.from(this.propInfoMap.values());\r\n    const propInfos = allPropInfos.filter((propInfo: DataPropInfo) => {\r\n      return propInfo.group === group && !propInfo.isVOField;\r\n    });\r\n    return propInfos;\r\n  }\r\n\r\n  /**\r\n   * 根据group获取属性名称数组\r\n   * @param group 属性分组\r\n   */\r\n  public getPropNamesByGroup(group: DataPropGroup): string[] {\r\n    const propNames = [];\r\n    const propInfos = this.getPropInfosByGroup(group);\r\n    propInfos.forEach((propInfo) => {\r\n      propNames.push(propInfo.name);\r\n    });\r\n    return propNames;\r\n  }\r\n\r\n  /**\r\n   * 根据propName获取属性信息\r\n   */\r\n  public getPropInfoByName(propName: string): DataPropInfo {\r\n    if (this.propInfoMap.has(propName)) {\r\n      return this.propInfoMap.get(propName);\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /**\r\n   * 根据path获取属性信息\r\n   */\r\n  public getPropInfoByPath(path: string[]): DataPropInfo {\r\n\r\n    // 先复制，防止shift方法产生污染\r\n    const arrPath = path.concat([]);\r\n    if (arrPath.length === 0) {\r\n      throw Error(`属性路径不能为空`);\r\n    }\r\n\r\n    // 循环查找\r\n    let typeInfo = this;\r\n    let propInfo = null;\r\n    while (typeInfo && arrPath.length > 0) {\r\n\r\n      const propName = arrPath.shift();\r\n      propInfo = typeInfo.getPropInfoByName(propName);\r\n      if (!propInfo) {\r\n        throw Error(`路径${path}中存在不正确的节点${propName}，请检查`);\r\n      }\r\n      typeInfo = propInfo.typeInfo;\r\n\r\n      // 如果是动态列，并且路径数组里还有属性，统一设置为null(动态列不再描述属性信息)\r\n      if (propInfo.group === DataPropGroup.Dynamic && arrPath.length > 0) {\r\n        propInfo = null;\r\n        typeInfo = null;\r\n      }\r\n    }\r\n\r\n    return propInfo;\r\n  }\r\n\r\n  /**\r\n   * 根据path获取对应属性的TypeInfo\r\n   */\r\n  public getTypeInfoByPath(path: string[]): DataTypeInfo {\r\n\r\n    // 空数组时返回\r\n    if (path.length === 0) {\r\n      return this;\r\n    }\r\n\r\n    // 获取对应属性信息\r\n    const propInfo = this.getPropInfoByPath(path);\r\n    if (!propInfo.typeInfo) {\r\n      throw Error(`路径${path}无法定位到一个EntityTypeInfo，请检查`);\r\n    }\r\n\r\n    return propInfo.typeInfo;\r\n  }\r\n\r\n  /**\r\n   * 获取主键的属性信息\r\n   */\r\n  public getPrimaryKeyPropInfo(): DataPropInfo {\r\n    return this.getPropInfoByName(this.primaryKey);\r\n  }\r\n\r\n  /**\r\n   * 根据name获取影射名\r\n   */\r\n  public getPropMappingByName(name: string): string {\r\n    const propInfo = this.getPropInfoByName(name);\r\n    if (!propInfo) {\r\n      return '';\r\n    }\r\n    return propInfo.mapping;\r\n  }\r\n\r\n  /**\r\n   * 根据path获取映射名\r\n   */\r\n  public getPropMappingByPath(path: string[]): string {\r\n    const propInfo = this.getPropInfoByPath(path);\r\n    if (!propInfo) {\r\n      return '';\r\n    }\r\n    return propInfo.mapping;\r\n  }\r\n\r\n  /**\r\n   * 检查属性是否属于特定的分组\r\n   */\r\n  public checkPropGroup(propName: string, propGroup: DataPropGroup): boolean {\r\n    const propInfo = this.getPropInfoByName(propName);\r\n    if (propInfo && propInfo.group === propGroup) {\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n\r\n  /**\r\n   * --------------------------------------------------------------------------------\r\n   * 属性元数据 => 属性描述信息\r\n   * --------------------------------------------------------------------------------\r\n   */\r\n\r\n  /**\r\n   * 搜集所有属性信息\r\n   * @todo：消除重复代码，ts不支持interface类型检测，暂时通过遍历实现。\r\n   */\r\n  private collectPropInfos() {\r\n\r\n    // 简单属性\r\n    const ngPlainProperties = EntityMetadataUtil.getNgFieldProperties(this.type);\r\n    Object.keys(ngPlainProperties).forEach((propName: string) => {\r\n      const ngProperty = ngPlainProperties[propName] as NgFieldProperty;\r\n      if (ngProperty.primary === true) {\r\n        this.primaryKey = propName;\r\n      }\r\n      if (ngProperty.foreign === true) {\r\n        this.foreignKey = propName;\r\n      }\r\n      this.addPropInfo(DataPropGroup.Plain, propName, ngProperty.dataField, null, ngProperty);\r\n    });\r\n\r\n    // 实体属性\r\n    const ngEntityProperties = EntityMetadataUtil.getNgObjectProperties(this.type);\r\n    Object.keys(ngEntityProperties).forEach((propName: string) => {\r\n      const ngProperty = ngEntityProperties[propName] as NgObjectProperty;\r\n      this.addPropInfo(DataPropGroup.Object, propName, ngProperty.dataField, ngProperty.type, ngProperty);\r\n    });\r\n\r\n    // 动态实体属性\r\n    const ngDynamicProperties = EntityMetadataUtil.getNgDynamicProperties(this.type);\r\n    Object.keys(ngDynamicProperties).forEach((propName: string) => {\r\n      const ngProperty = ngDynamicProperties[propName] as NgDynamicProperty;\r\n      this.addPropInfo(DataPropGroup.Dynamic, propName, ngProperty.dataField, null, ngProperty);\r\n    });\r\n\r\n    // 实体列表属性\r\n    const ngEntityListProperties = EntityMetadataUtil.getNgListProperties(this.type);\r\n    Object.keys(ngEntityListProperties).forEach((propName: string) => {\r\n      const ngProperty = ngEntityListProperties[propName] as NgListProperty;\r\n      this.addPropInfo(DataPropGroup.List, propName, ngProperty.dataField, ngProperty.type, ngProperty);\r\n    });\r\n  }\r\n  private collectEntityInfos() {\r\n    const entityInfo = EntityMetadataUtil.getNgEntityMatadata(this.type);\r\n    this.entityInfo = entityInfo;\r\n\r\n  }\r\n  /**\r\n   * 添加属性信息\r\n   */\r\n  private addPropInfo(group: DataPropGroup, name: string, mapping: string, type: Type<any>, metadataInfo: NgProperty) {\r\n\r\n    // 没有设置影射时，用属性名充当影射\r\n    mapping = mapping ? mapping : name;\r\n    let typeInfo = null;\r\n    if (type) {\r\n      typeInfo = new DataTypeInfo(type);\r\n    }\r\n    const propInfo = { group, name, mapping, typeInfo, metadataInfo };\r\n    this.propInfoMap.set(name, propInfo);\r\n    // 将vo字段也加入便于表达式查找\r\n    const originalDataField = metadataInfo && metadataInfo.originalDataField;\r\n    if (originalDataField && !this.propInfoMap.has(originalDataField)) {\r\n      this.propInfoMap.set(originalDataField, { ...propInfo, isVOField: true });\r\n    } else if (metadataInfo && metadataInfo.type) {\r\n      const entityInfo = EntityMetadataUtil.getNgEntityMatadata(metadataInfo.type);\r\n      if (entityInfo && entityInfo.originalCode) {\r\n        this.propInfoMap.set(entityInfo.originalCode, { ...propInfo, isVOField: true });\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nexport { DataTypeInfo };\r\n","import { InjectionToken } from '@angular/core';\r\nimport { IMessageService, INotifyService } from './types';\r\n/**\r\n * 表单模块路径\r\n */\r\nexport const FORM_PATH_TOKEN = new InjectionToken<string>('@farris/devkit form path token');\r\n/**\r\n * 后端消息处理器\r\n */\r\nexport const BACK_END_MESSAGE_HANDLER_TOKEN = new InjectionToken<string>('@farris/devkit_back_end_message_handler');\r\nexport const MESSAGE_SERVICE_TOKEN = new InjectionToken<IMessageService>('@farris/message_service_token');\r\nexport const NOTIFY_SERVICE_TOKEN = new InjectionToken<INotifyService>('@farris/notify_service_token');","export class Core {\r\n  public static warn(message?: any, ...optionalParams: any[]) {\r\n    this.logable() && console && console.warn(message, ...optionalParams);\r\n  }\r\n  public static error(message?: any, ...optionalParams: any[]) {\r\n    this.logable() && console && console.error(message, ...optionalParams);\r\n  }\r\n  public static log(message?: any, ...optionalParams: any[]) {\r\n    this.logable() && console && console.log(message, ...optionalParams);\r\n  }\r\n  private static logable(): boolean {\r\n    return window && window.localStorage && window.localStorage.getItem('__DEVKIT_LOGABLE__') === 'true' || false;\r\n  }\r\n}","export function escape(value: string) {\r\n  if (!value || typeof value !== 'string') {\r\n    return value;\r\n  }\r\n  return value\r\n    .replace(/[\\\\]/g, '\\\\\\\\')\r\n    .replace(/[\\\"]/g, '\\\\\\\"')\r\n    .replace(/[\\/]/g, '\\\\/')\r\n    .replace(/[\\b]/g, '\\\\b')\r\n    .replace(/[\\f]/g, '\\\\f')\r\n    .replace(/[\\n]/g, '\\\\n')\r\n    .replace(/[\\r]/g, '\\\\r')\r\n    .replace(/[\\t]/g, '\\\\t');\r\n}","import { InjectionToken } from \"@angular/core\";\r\n\r\nexport interface IResolver {\r\n  resolve(expr: string): string[];\r\n}\r\nexport const RESOLVER_TOKEN = new InjectionToken('@farris_resolver_token');\r\nexport const ENTITY_TEMPLATE = 'ENTITY~';\r\nexport const STATE_TEMPLATE = 'STATE~';\r\nexport const GROUP_FUNCTIONS = ['SumByProp', 'CountByProp', 'AvgByProp', 'MaxByProp', 'MinByProp', 'IsExistRecord', 'ListContains', 'ListGreaterThan', 'ListLessThan', 'ListStartWith', 'ListEndWith'];","import { Inject, Injectable, Injector, Optional } from '@angular/core';\r\nimport { IResolver, RESOLVER_TOKEN } from './types';\r\n\r\n@Injectable()\r\nexport class ResolverRegistry{\r\n  constructor(private injector: Injector, @Optional() @Inject(RESOLVER_TOKEN) public resolvers: Array<IResolver>){}\r\n}","import { Type } from '@angular/core';\r\nimport { makeDecorator } from '../metadata/index';\r\n\r\nexport const NG_REPOSITORY = 'NgRepository';\r\n\r\n/**\r\n * NgRepository\r\n */\r\nexport interface NgRepository {\r\n\r\n  /**\r\n     * API地址\r\n     */\r\n    apiUrl: string;\r\n\r\n    /**\r\n     * 实体类型\r\n     */\r\n    entityType: Type<any>;\r\n}\r\n\r\n/**\r\n * NgRepositoryDecorator\r\n */\r\nexport interface NgRepositoryDecorator {\r\n    (obj?: NgRepository): any;\r\n    new(obj?: NgRepository): any;\r\n}\r\n\r\n/**\r\n * NgRepository\r\n */\r\nexport function NgRepository(options: NgRepository) {\r\n  const decoratorFactory = makeDecorator(NG_REPOSITORY, (obj: NgRepository) => obj);\r\n  return decoratorFactory(options);\r\n}\r\n","/*\r\n * @Author: Witt\r\n * @Date: 2018-10-01 19:36:51\r\n * @Last Modified by: aalizzwell\r\n * @Last Modified time: 2019-09-03 19:46:42\r\n */\r\nimport { Type } from '@angular/core';\r\nimport { Modification, ModifyType } from '../changeset/index';\r\nimport { Subject } from 'rxjs';\r\nimport { Entity, FieldMetadataUtil, EntityList } from '../entity/index';\r\n// tslint:disable: no-bitwise\r\n/**\r\n * 实体集合\r\n * @todo：应该用EntityList代替。\r\n */\r\nclass EntityCollection<T extends Entity> {\r\n\r\n  /**\r\n   * 内部实体Set\r\n   */\r\n  private innerEntitySet: Set<T>;\r\n\r\n  /**\r\n   * 内部实体Map\r\n   */\r\n  private innerEntityMap: Map<string, T>;\r\n  public changes: Subject<Modification>;\r\n\r\n  /**\r\n   * Entity集合变更流\r\n   */\r\n  public collectionChanged: Subject<Modification>;\r\n\r\n  /**\r\n   * 实体类型\r\n   */\r\n  public readonly entityType: Type<T>;\r\n\r\n  /**\r\n   * 实体主键\r\n   */\r\n  public readonly primaryKey: string;\r\n\r\n  /**\r\n   * 实体当前分页信息\r\n   */\r\n  public paginationInfo: any;\r\n\r\n\r\n  /**\r\n   * 构造函数\r\n   */\r\n  constructor(entityType: any) {\r\n    this.innerEntitySet = new Set<T>();\r\n    this.innerEntityMap = new Map<string, T>();\r\n    this.collectionChanged = new Subject<Modification>();\r\n    this.changes = new Subject<Modification>();\r\n    this.entityType = entityType;\r\n    this.primaryKey = FieldMetadataUtil.getPrimaryKey(this.entityType) || entityType.prototype.primaryKey;\r\n  }\r\n\r\n  /**\r\n   * 实体数量\r\n   */\r\n  public count(): number {\r\n    return this.innerEntitySet.size;\r\n  }\r\n\r\n  public get entityTypeName() {\r\n    return this.entityType.name;\r\n  }\r\n  /**\r\n   * 是否包含指定主键值的实体\r\n   * @param id 主键值\r\n   */\r\n  public has(id: string): boolean {\r\n    return this.innerEntityMap.has(id);\r\n  }\r\n\r\n  /**\r\n   * 清空全部实体\r\n   */\r\n  public clear() {\r\n    this.innerEntityMap.clear();\r\n    this.innerEntitySet.clear();\r\n    this.notifyCollectionChanged(new Modification([], ModifyType.Load));\r\n  }\r\n  /**\r\n   * 清空全部实体\r\n   * @param isReset 是否为重置实体操作\r\n   */\r\n  public reset(notify: boolean = true) {\r\n    this.innerEntityMap.forEach(entity => {\r\n      entity.unsubscribe.next();\r\n      entity.unsubscribe.complete();\r\n    });\r\n    this.innerEntitySet.forEach(entity => {\r\n      entity.unsubscribe.next();\r\n      entity.unsubscribe.complete();\r\n    });\r\n    this.innerEntityMap.clear();\r\n    this.innerEntitySet.clear();\r\n    if (notify === true) {\r\n      const modification = new Modification([], ModifyType.Load);\r\n      modification.isReset = true;\r\n      this.notifyCollectionChanged(modification);\r\n    }\r\n  }\r\n  /**\r\n   * 转换为实体数组\r\n   */\r\n  public toArray(): Entity[] {\r\n    return Array.from(this.innerEntitySet);\r\n  }\r\n\r\n  /**\r\n   * 转换为JSON数组\r\n   */\r\n  public toJSON(): any[] {\r\n    const result = [];\r\n    const entities = this.toArray();\r\n    entities.forEach((entity: Entity) => {\r\n      result.push(entity.toJSON());\r\n    });\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * 批量加载实体\r\n   */\r\n  public loadEntities(entities: any[], entityCreate: boolean = false) {\r\n    this.innerEntityMap.clear();\r\n    this.innerEntitySet.clear();\r\n\r\n    entities.forEach(entity => {\r\n      this.innerEntitySet.add(entity);\r\n      this.innerEntityMap.set(entity[this.primaryKey], entity);\r\n      this.listenEntityChangeEvent(entity);\r\n    });\r\n    const modification = new Modification(entities, ModifyType.Load);\r\n    modification.entityCreate = entityCreate;\r\n    this.notifyCollectionChanged(modification);\r\n\r\n  }\r\n\r\n  /**\r\n   * 追加实体\r\n   * @param entity 要追加的实体\r\n   * @param isCloned 实体是否是克隆的\r\n   */\r\n  public addEntity(entity: any, isCloned: boolean = false) {\r\n    this.verifyEntityToAdd(entity);\r\n    this.innerEntitySet.add(entity);\r\n    this.innerEntityMap.set(entity[this.primaryKey], entity);\r\n    this.listenEntityChangeEvent(entity);\r\n    const modifyType = isCloned ? ModifyType.Clone : ModifyType.Add;\r\n    this.notifyCollectionChanged(new Modification([entity], modifyType));\r\n  }\r\n  /**\r\n   * 在当前行前或后插入数据\r\n   * @param entity 实体\r\n   * @param position 位置\r\n   */\r\n  public insertEntity(entity: any, position: 1 | -1) {\r\n    this.verifyEntityToAdd(entity);\r\n    this.innerEntitySet.add(entity);\r\n    this.innerEntityMap.set(entity[this.primaryKey], entity);\r\n    this.listenEntityChangeEvent(entity);\r\n    this.notifyCollectionChanged(new Modification(entity, ModifyType.Insert, null, null, position));\r\n  }\r\n  /**\r\n   * 更新实体\r\n   * @param entity entity\r\n   * @param data 实体数据\r\n   */\r\n  public updateEntity(entity: any, data: any) {\r\n    entity.load(data);\r\n    this.notifyCollectionChanged(new Modification(data, ModifyType.Update, null, null));\r\n  }\r\n  /**\r\n   * 批量追加实体\r\n   * @param entities 要加载的实体数组\r\n   */\r\n  public addEntities(entities: any[]) {\r\n    if (!entities) {\r\n      return;\r\n    }\r\n    const entitiesToAdd: any[] = [];\r\n    entities.forEach(entity => {\r\n      this.verifyEntityToAdd(entity);\r\n      entitiesToAdd.push(entity);\r\n    });\r\n    entitiesToAdd.forEach(entity => {\r\n      this.innerEntitySet.add(entity);\r\n      this.innerEntityMap.set(entity[this.primaryKey], entity);\r\n      this.listenEntityChangeEvent(entity);\r\n    });\r\n    this.notifyCollectionChanged(new Modification(entitiesToAdd, ModifyType.Add));\r\n  }\r\n  /**\r\n   * 添加实体（不切换当前行）\r\n   * @param entities 实体\r\n   */\r\n  public addData(entities: any[]) {\r\n    if (!entities) {\r\n      return;\r\n    }\r\n    const entitiesToAdd: any[] = [];\r\n    entities.forEach(entity => {\r\n      this.verifyEntityToAdd(entity);\r\n      entitiesToAdd.push(entity);\r\n    });\r\n    entitiesToAdd.forEach(entity => {\r\n      this.innerEntitySet.add(entity);\r\n      this.innerEntityMap.set(entity[this.primaryKey], entity);\r\n      this.listenEntityChangeEvent(entity);\r\n    });\r\n    this.notifyCollectionChanged(new Modification(entitiesToAdd, ModifyType.AddData));\r\n  }\r\n\r\n\r\n  /**\r\n   * 根据主键值获取实体\r\n   */\r\n  getEntityById(identity: string): any {\r\n    if (this.innerEntityMap.has(identity) === false) {\r\n      return null;\r\n    }\r\n    const entity = this.innerEntityMap.get(identity);\r\n    return entity;\r\n  }\r\n\r\n  /**\r\n   * 根据路径获取实体\r\n   */\r\n  getEntityByPath(pathArray: string[]): any {\r\n    const rootEntityId = pathArray[0].split(':')[1];\r\n    let parentNode: any = this.getEntityById(rootEntityId);\r\n    for (let i = 1; i < pathArray.length && parentNode; i = i + 1) {\r\n      const currentPath = pathArray[i];\r\n      if ((parentNode instanceof Entity) || (\r\n        parentNode.typeName === 'ConcreteEntityPrototype')\r\n      ) {\r\n        // @todo：强识了别冒号\r\n        if (currentPath.indexOf(':') === -1) {\r\n          parentNode = parentNode[pathArray[i]];\r\n        }\r\n      } else {\r\n        parentNode = parentNode.get(pathArray[i].split(':')[1]);\r\n      }\r\n    }\r\n    return parentNode;\r\n  }\r\n  /**\r\n   * id:1/a/id:2/c\r\n   * @param pathArray 路径数组\r\n   */\r\n  public getEntitiesByPath(pathArray: string[]) {\r\n    const rootEntityId = pathArray[0].split(':')[1];\r\n    let entity: any = this.getEntityById(rootEntityId);\r\n    for (let i = 1; i < pathArray.length && entity; i += 2) {\r\n      const path = pathArray[i];\r\n      entity = entity[path];\r\n      if (!(entity instanceof EntityList)) {\r\n        throw new Error('路径格式错误');\r\n      }\r\n      if ((i + 1) < pathArray.length) {\r\n        const id = pathArray[i + 1].split(':')[1];\r\n        entity = entity.get(id);\r\n      }\r\n    }\r\n    return entity;\r\n  }\r\n  /**\r\n   * 返回符合指定条件的实体集合\r\n   * @param predicate 条件谓词\r\n   */\r\n  getEntities(predicate: (value: any, index: number, array: any[]) => any): any[] {\r\n    const entities: any[] = Array.from(this.innerEntitySet);\r\n    const matchedEntities = entities.filter(predicate);\r\n    return matchedEntities;\r\n  }\r\n\r\n  /**\r\n   * 获取全部实体\r\n   */\r\n  getAllEntities(): any[] {\r\n    return Array.from(this.innerEntitySet);\r\n  }\r\n\r\n  /**\r\n   * 根据主键值删除对应实体\r\n   * @param identity 主键值\r\n   */\r\n  removeEntityById(identity: string): any {\r\n    this.verifyEntityToRemove(identity);\r\n    const entityToRemove = this.innerEntityMap.get(identity);\r\n    this.innerEntityMap.delete(identity);\r\n    this.innerEntitySet.delete(entityToRemove);\r\n    this.notifyCollectionChanged(new Modification([entityToRemove], ModifyType.Remove));\r\n    return entityToRemove;\r\n  }\r\n\r\n  removeEntitiesByIds(id: string) {\r\n  }\r\n\r\n  /**\r\n   * 删除符合条件的实体集合\r\n   */\r\n  public removeEntities(predicate: (value: any, index: number, array: any[]) => any): any[] {\r\n    const entitiesToRemove = Array.from(this.innerEntitySet).filter(predicate);\r\n    entitiesToRemove.forEach(entityToRemove => {\r\n      this.innerEntityMap.delete(entityToRemove[this.primaryKey]);\r\n      this.innerEntitySet.delete(entityToRemove);\r\n    });\r\n    this.notifyCollectionChanged(new Modification(entitiesToRemove, ModifyType.Remove));\r\n    return entitiesToRemove;\r\n  }\r\n  /**\r\n   * 移除数据（不切换当前行）\r\n   * @param predicate 过滤函数\r\n   */\r\n  public removeData(predicate: (value: any, index: number, array: any[]) => any): any[] {\r\n    const entitiesToRemove = Array.from(this.innerEntitySet).filter(predicate);\r\n    entitiesToRemove.forEach(entityToRemove => {\r\n      this.innerEntityMap.delete(entityToRemove[this.primaryKey]);\r\n      this.innerEntitySet.delete(entityToRemove);\r\n    });\r\n    this.notifyCollectionChanged(new Modification(entitiesToRemove, ModifyType.RemoveData));\r\n    return entitiesToRemove;\r\n  }\r\n  /**\r\n   * 重置子表数据\r\n   * @param paths 路径\r\n   * 路径格式 ['id:provinceId','id:cityMDMs','zoneMDMs']\r\n   * @description path参数格式\r\n   * ```json\r\n   * [\r\n   * \"id:b5ed23ca-88d9-4377-98ec-92f35c1325f1\",\r\n   * \"cityMDMs\",\r\n   * \"id:373706af-622f-4aea-a006-dddbffd7bda3\",\r\n   * \"zoneMDMs\"\r\n   * ]\r\n   * ```\r\n   * @param entities 实体数组\r\n   */\r\n  public resetEntities(paths: string[], entities: any[]) {\r\n    if (paths[0].indexOf(':') === -1) {\r\n      throw new Error('路径格式错误');\r\n    }\r\n    // 获取主实体\r\n    const id = paths[0].split(':')[1];\r\n    let entity: any = this.innerEntityMap.get(id);\r\n    let entityList = entity[paths[1]] as EntityList<any>;\r\n    if (!entity) {\r\n      throw new Error(`找不到主键为${id}的实体`);\r\n    }\r\n    for (let index = 2; index < paths.length; index += 2) {\r\n      const pathInfo = paths[index].split(':');\r\n      const entityId = pathInfo[1];\r\n      // 获取到当前层级的实体\r\n      entity = entityList.get(entityId);\r\n      if (!entity) {\r\n        throw new Error(`找不到主键为${id}的实体`);\r\n      }\r\n      // 获取当前层级实体下的列表属性\r\n      entityList = entity[paths[index + 1]];\r\n    }\r\n    entityList.clear();\r\n    entityList.loadEntities(entities);\r\n  }\r\n\r\n  /**\r\n   * 验证实体是否能够添加\r\n   */\r\n  private verifyEntityToAdd(entity: any): boolean {\r\n    if (this.has(entity[this.primaryKey])) {\r\n      throw new Error(`The repository already had an item with the save identity of '${entity[this.primaryKey]}'`);\r\n    }\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * 验证实体是否能移除\r\n   */\r\n  private verifyEntityToRemove(identity: string): boolean {\r\n    if (!this.has(identity)) {\r\n      throw new Error(`The entity with identity of '${identity} dose not exsit.'`);\r\n    }\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * 实体集合变更流\r\n   */\r\n  private notifyCollectionChanged(modification: Modification) {\r\n    this.collectionChanged.next(modification);\r\n  }\r\n  private listenEntityChangeEvent(entity: Entity) {\r\n    if (entity) {\r\n      entity.onValueChanged.subscribe((change: Modification) => this.changes.next(change));\r\n    }\r\n  }\r\n\r\n  //#region 分页\r\n\r\n  /**\r\n   * 设置分页大小\r\n   */\r\n  set pageSize(pageSize: number) {\r\n    if (typeof (pageSize) !== 'number' || pageSize < 0) {\r\n      throw new Error('Invalid parameter:pageSize');\r\n    }\r\n\r\n    const original = this.paginationInfo;\r\n    // const entityPaginationInfo = Object.assign({}, original[this.entityTypeName], { pageSize });\r\n    // this.paginationInfo = Object.assign({}, original, { [this.entityTypeName]: entityPaginationInfo });\r\n    // this.notifyCollectionChanged(new Modification(this.paginationInfo[this.entityTypeName], ModifyType.PaginationInfoChange));\r\n    this.paginationInfo = Object.assign({}, original, { pageSize });\r\n    this.notifyCollectionChanged(new Modification(this.paginationInfo, ModifyType.PaginationInfoChange));\r\n  }\r\n  /**\r\n   * 获取分页大小\r\n   * @description 如果用户未指定分页大小则默认为0，即获取所有数据\r\n   */\r\n  get pageSize(): number {\r\n    if (!!this.paginationInfo) {\r\n      return this.paginationInfo.pageSize || 0;\r\n    }\r\n    return 0;\r\n  }\r\n  /**\r\n   * 设置数据总条数\r\n   */\r\n  set totalCount(total: number) {\r\n    if (typeof (total) !== 'number' || total < 0) {\r\n      throw new Error('Invalid parameter:total');\r\n    }\r\n\r\n    const original = this.paginationInfo;\r\n    // const entityPaginationInfo = Object.assign({}, original[this.entityTypeName], { total });\r\n    // this.paginationInfo = Object.assign({}, original, { [this.entityTypeName]: entityPaginationInfo });\r\n    this.paginationInfo = Object.assign({}, original, { total });\r\n    this.notifyCollectionChanged(new Modification(this.paginationInfo, ModifyType.PaginationInfoChange));\r\n  }\r\n  /**\r\n   * 获取数据总条数\r\n   */\r\n  get totalCount(): number {\r\n    if (!!this.paginationInfo) {\r\n      return this.paginationInfo.total || 0;\r\n    }\r\n    return 0;\r\n  }\r\n  /**\r\n   * 设置当前页码\r\n   */\r\n  set pageIndex(pageIndex: number) {\r\n    if (typeof (pageIndex) !== 'number' || pageIndex < 0) {\r\n      throw new Error('Invalid parameter:pageIndex');\r\n    }\r\n\r\n    const original = this.paginationInfo;\r\n    // const entityPaginationInfo = Object.assign({}, original[this.entityTypeName], { pageIndex });\r\n    // this.paginationInfo = Object.assign({}, original, { [this.entityTypeName]: entityPaginationInfo });\r\n    this.paginationInfo = Object.assign({}, original, { pageIndex });\r\n    this.notifyCollectionChanged(new Modification(this.paginationInfo, ModifyType.PaginationInfoChange));\r\n  }\r\n  /**\r\n   * 获取当前页码\r\n   */\r\n  get pageIndex(): number {\r\n    if (!!this.paginationInfo) {\r\n      return this.paginationInfo.pageIndex || 1;\r\n    }\r\n    return 1;\r\n  }\r\n  /**\r\n   * 更新分页信息\r\n   * @param path 绑定路径\r\n   * @param pageInfo 分页信息\r\n   */\r\n  public updatePaginationInfoByPath(path: string, pageInfo: { pageIndex: any, pageSize: any, totalCount: any, [prop: string]: any }) {\r\n    const original = this.paginationInfo;\r\n    const { pageIndex, pageSize } = pageInfo;\r\n    const total = pageInfo && (pageInfo.totalCount || pageInfo.total) || 0;\r\n    const paginationInfo = Object.assign({}, original, { pageIndex, pageSize, total });\r\n    this.setPaginationConfigByPath(path, paginationInfo);\r\n  }\r\n  /**\r\n   * 根据路径获取分页大小\r\n   * @param path 路径\r\n   */\r\n  public getPaginationConfigByPath(path: string, defaultValue?: any) {\r\n    if (!path || path === '/') {\r\n      return this.paginationInfo;\r\n    }\r\n    if (typeof path !== 'string') {\r\n      throw new Error('路径必须为字符串！');\r\n    }\r\n    const paths = path.split('/').filter(item => !!item && item.trim().length > 0).map(item => item.trim());\r\n    let config = this.paginationInfo;\r\n    paths.forEach(item => {\r\n      if (config && config.hasOwnProperty(item)) {\r\n        config = config[item];\r\n      } else {\r\n        config = null;\r\n      }\r\n    });\r\n    return !!config ? config : typeof defaultValue !== 'undefined' ? defaultValue : undefined;\r\n  }\r\n  /**\r\n   * 设置分页信息\r\n   * @param path 路径\r\n   * @param value 值，其中总条数key为total\r\n   */\r\n  public setPaginationConfigByPath(path: string | Array<any>, value: any) {\r\n    const original = JSON.stringify(this.paginationInfo);\r\n    if (!path || path === '/') {\r\n      this.paginationInfo = value;\r\n    } else {\r\n      if (!Array.isArray(path)) {\r\n        path = path.toString().match(/[^/[\\]]+/g) || [];\r\n      }\r\n      path.slice(0, -1).reduce((prev, current, index) =>\r\n        Object(prev[current]) === prev[current]\r\n          ? prev[current]\r\n          : prev[current] = Math.abs(path[index + 1]) >> 0 === +path[index + 1]\r\n            ? []\r\n            : {},\r\n        this.paginationInfo)[path[path.length - 1]] = value;\r\n    }\r\n\r\n    if (JSON.stringify(this.paginationInfo) !== original) {\r\n      this.notifyCollectionChanged(new Modification(this.paginationInfo, ModifyType.PaginationInfoChange));\r\n    }\r\n    return this.paginationInfo;\r\n  }\r\n  //#endregion\r\n}\r\n\r\nexport { EntityCollection };\r\n","/*\r\n * @Author: Witt\r\n * @Date: 2019-03-07 17:24:38\r\n * @Last Modified by:   Witt\r\n * @Last Modified time: 2019-03-11 19:50:38\r\n */\r\n\r\nimport { Type } from '@angular/core';\r\nimport { Entity, EntityList, createEntity, createEntities } from '../entity/index';\r\nimport { EntityCollection } from './entity_collection';\r\nimport { DataPath, DataPathCreator, DataPathNodeType, DataTypeInfo } from '../core/index';\r\nimport { EntityUtil } from '../binding-data/entity_util';\r\n\r\n\r\n/**\r\n * 实体管理类\r\n */\r\nclass EntityManager<T extends Entity> {\r\n\r\n  /**\r\n   * 实体类型\r\n   */\r\n  public entityType: Type<Entity>;\r\n\r\n  /**\r\n   * 实体集合\r\n   */\r\n  public entityCollection: EntityCollection<Entity>;\r\n\r\n  /**\r\n   * 构造函数\r\n   */\r\n  constructor(entityCollection: EntityCollection<T>) {\r\n    this.entityCollection = entityCollection;\r\n    this.entityType = entityCollection.entityType;\r\n  }\r\n\r\n\r\n  // #region 创建实体相关方法\r\n\r\n  /**\r\n   * 创建实体\r\n   */\r\n  public createEntity(entityData: any): T {\r\n    const entity = createEntity<T>(this.entityType, entityData);\r\n    return entity;\r\n  }\r\n\r\n  /**\r\n   * 批量创建实体\r\n   */\r\n  public createEntities(entityListData: any[], entityType: any): T[] {\r\n    const entities: T[] = createEntities<T>(this.entityType, entityListData);\r\n    return entities;\r\n  }\r\n  /**\r\n   * 批量创建下级实体\r\n   * @param fPath fpath\r\n   * @param entityListData 实体数据\r\n   */\r\n  public createEntitiesByPath(fPath: string, entityListData: any[]) {\r\n    const subPaths = fPath.split('/');\r\n    if (subPaths.length < 3) {\r\n      throw Error(`根据path删除实体数据出错了。传入的path[${fPath}]格式不对`);\r\n    }\r\n    if (entityListData.length < 1) {\r\n      return [];\r\n    }\r\n    let childEntityList: EntityList<any>;\r\n    let propInfo: { propType: string, propEntityType: any };\r\n    let propName: string;\r\n    for (let i = 2; i < subPaths.length; i = i + 2) {\r\n      const fid = subPaths[i - 1];\r\n      propName = subPaths[i];\r\n      const parentEntity = childEntityList ? childEntityList.get(fid) : this.entityCollection.getEntityById(fid);\r\n      childEntityList = parentEntity[propName];\r\n      const entityType = propInfo ? propInfo.propEntityType : this.entityType;\r\n      propInfo = EntityUtil.getPropInfo(entityType, propName);\r\n      if (!childEntityList) {\r\n        throw Error(`fpath参数错误，无法找到${propName}对应的子表。fpath为：${fPath}`);\r\n      }\r\n    }\r\n    const entities = entityListData.map(entityData => {\r\n      return createEntity<Entity>(propInfo.propEntityType, entityData);\r\n    });\r\n    return entities;\r\n  }\r\n  // #endregion\r\n\r\n\r\n  // #region 获取实体、实体数组相关方法\r\n\r\n  /**\r\n   * 获取path对应的实体\r\n   */\r\n  public getEntityByPath(path: string[]): Entity {\r\n    const entity = this.getEntityNodeByPath(path) as Entity;\r\n    return entity;\r\n  }\r\n\r\n  /**\r\n   * 获取path对应的实体\r\n   */\r\n  public getEntitiesByPath(path: string[]): Entity[] {\r\n    const entityCollectionOrList = this.getEntityNodeByPath(path) as EntityCollection<Entity> | EntityList<Entity>;\r\n    let entities: Entity[];\r\n    if (entityCollectionOrList instanceof EntityCollection === true) {\r\n      entities = (entityCollectionOrList as EntityCollection<Entity>).toArray();\r\n    } else {\r\n      entities = (entityCollectionOrList as EntityList<Entity>).toArray();\r\n    }\r\n    return entities;\r\n  }\r\n\r\n  /**\r\n   * 获取实体节点\r\n   * @param path 节点路径\r\n   */\r\n  public getEntityNodeByPath(path: string[]): EntityCollection<Entity> | EntityList<Entity> | Entity {\r\n    const dataPath = DataPathCreator.createByLongPathFromRoot(path, this);\r\n    let entityNode: any = this.entityCollection;\r\n    let pathNode = dataPath.head.next;\r\n    while (pathNode) {\r\n      if (pathNode.type === DataPathNodeType.DataId) {\r\n        if (entityNode instanceof EntityCollection === true) {\r\n          entityNode = (entityNode as EntityCollection<Entity>).getEntityById(pathNode.value);\r\n        } else {\r\n          entityNode = (entityNode as EntityList<Entity>).get(pathNode.value);\r\n        }\r\n      } else {\r\n        entityNode = entityNode[pathNode.value];\r\n      }\r\n      if (!entityNode) {\r\n        throw new Error(`找不到${pathNode.value}对应的数据节点`);\r\n      }\r\n      pathNode = pathNode.next;\r\n    }\r\n    return entityNode;\r\n  }\r\n  // #endregion\r\n\r\n\r\n  // #region 获取、设置属性值\r\n\r\n  /**\r\n   * 获取path对应的实体属性值\r\n   */\r\n  public getPropValueByPath(path: string[]): any {\r\n    const propName = path.pop();\r\n    const entity = this.getEntityByPath(path);\r\n    return entity[propName];\r\n  }\r\n\r\n  /**\r\n   * 设置path对应实体的属性值\r\n   */\r\n  public setPropValueByPath(path: string[], propValue: any): void {\r\n    const propName = path.pop();\r\n    const entity = this.getEntityByPath(path);\r\n    entity[propName] = propValue;\r\n  }\r\n\r\n  // #endregion\r\n\r\n\r\n  // #region 插入实体\r\n\r\n  /**\r\n   * 在path对应实体前插入实体\r\n   */\r\n  public insertEntityBeforeByPath(fpath: string[]) {\r\n    throw new Error('Not Implemented');\r\n  }\r\n\r\n  /**\r\n   * 在path对应实体前批量插入实体\r\n   */\r\n  public insertEntitiesBeforeByPath() {\r\n    throw new Error('Not Implemented');\r\n  }\r\n\r\n  /**\r\n   * 在path对应实体前插入实体\r\n   */\r\n  public insertEntityAfterByPath() {\r\n    throw new Error('Not Implemented');\r\n  }\r\n\r\n  /**\r\n   * 在path对应实体前批量插入实体\r\n   */\r\n  public insertEntitiesAfterByPath() {\r\n    throw new Error('Not Implemented');\r\n  }\r\n\r\n  // #endregion\r\n\r\n\r\n  // #region 追加实体\r\n\r\n  /**\r\n   * 在path对应的实体集合中追加1个实体\r\n   */\r\n  // public appendEntityByPath(fpath: string[], entity: Entity): void {\r\n  //   const entityCollectionOrList = this.getEntityNodeByPath(fpath);\r\n  //   if (entityCollectionOrList instanceof EntityCollection === true) {\r\n  //     const entityCollection = entityCollectionOrList as EntityCollection<Entity>;\r\n  //     entityCollection.addEntity(entity);\r\n  //   } else {\r\n  //     const entityList = (entityCollectionOrList as EntityList<Entity>);\r\n  //     entityList.appendEntity(entity);\r\n  //   }\r\n  // }\r\n\r\n  /**\r\n   * 根据path获取实体集合\r\n   * @param fpath 路径 /id/childsNode/id/xxx\r\n   * @param entityData 实体数据\r\n   * @param initialData[可选] 默认值\r\n   */\r\n  public appendEntityByPath(fpath: string, entityData: any, initialData?: any, isCloned: boolean = false): Entity {\r\n    const subPaths = fpath.split('/');\r\n    if (subPaths.length < 3) {\r\n      throw Error(`根据path删除实体数据出错了。传入的path[${fpath}]格式不对`);\r\n    }\r\n\r\n    let childEntityList: EntityList<any>;\r\n    let propInfo: { propType: string, propEntityType: any };\r\n    let propName: string;\r\n    for (let i = 2; i < subPaths.length; i = i + 2) {\r\n      const fid = subPaths[i - 1];\r\n      propName = subPaths[i];\r\n\r\n      // todo: EntityCollection重构之后这里无需差异处理\r\n      const parentEntity = childEntityList ? childEntityList.get(fid) : this.entityCollection.getEntityById(fid);\r\n      childEntityList = parentEntity[propName];\r\n      const entityType = propInfo ? propInfo.propEntityType : this.entityType;\r\n      propInfo = EntityUtil.getPropInfo(entityType, propName);\r\n      if (!childEntityList) {\r\n        throw Error(`fpath参数错误，无法找到${propName}对应的子表。fpath为：${fpath}`);\r\n      }\r\n    }\r\n\r\n    // const propInfo = EntityUtil.getPropInfo(this.entityType, propName);\r\n    const childEntity = createEntity<Entity>(propInfo.propEntityType, entityData);\r\n    // 在实体的实例上增加默认值属性，以便在createBindingObject时存放默认值\r\n    // if (initialData) {\r\n    //   EntityUtil.appendInitialData(childEntity, initialData);\r\n    // }\r\n    childEntityList.appendNew(childEntity, isCloned);\r\n\r\n    return childEntity;\r\n  }\r\n  /**\r\n   * 在指定位置插入实体\r\n   * @param fpath 父路径\r\n   * @param entityData 实体数据\r\n   * @param initialData 初始数据\r\n   * @param position 插入位置\r\n   */\r\n  public insertEntityByPath(fpath: string, entityData: any, initialData?: any, position?: 1 | -1) {\r\n    const subPaths = fpath.split('/');\r\n    if (subPaths.length < 3) {\r\n      throw Error(`根据path删除实体数据出错了。传入的path[${fpath}]格式不对`);\r\n    }\r\n\r\n    let childEntityList: EntityList<any>;\r\n    let propInfo: { propType: string, propEntityType: any };\r\n    let propName: string;\r\n    for (let i = 2; i < subPaths.length; i = i + 2) {\r\n      const fid = subPaths[i - 1];\r\n      propName = subPaths[i];\r\n\r\n      // todo: EntityCollection重构之后这里无需差异处理\r\n      const parentEntity = childEntityList ? childEntityList.get(fid) : this.entityCollection.getEntityById(fid);\r\n      childEntityList = parentEntity[propName];\r\n      const entityType = propInfo ? propInfo.propEntityType : this.entityType;\r\n      propInfo = EntityUtil.getPropInfo(entityType, propName);\r\n      if (!childEntityList) {\r\n        throw Error(`fpath参数错误，无法找到${propName}对应的子表。fpath为：${fpath}`);\r\n      }\r\n    }\r\n\r\n    // const propInfo = EntityUtil.getPropInfo(this.entityType, propName);\r\n    const childEntity = createEntity<Entity>(propInfo.propEntityType, entityData);\r\n    // 在实体的实例上增加默认值属性，以便在createBindingObject时存放默认值\r\n    // if (initialData) {\r\n    //   EntityUtil.appendInitialData(childEntity, initialData);\r\n    // }\r\n    childEntityList.insert(childEntity, position);\r\n    return childEntity;\r\n  }\r\n  /**\r\n   * 在path对应的实体集合中追加多个实体\r\n   */\r\n  public appendEntitiesByPath(fpath: string[], entities: Entity[]) {\r\n    const entityCollectionOrList = this.getEntityNodeByPath(fpath);\r\n    if (entityCollectionOrList instanceof EntityCollection === true) {\r\n      const entityCollection = entityCollectionOrList as EntityCollection<Entity>;\r\n      entityCollection.addEntities(entities);\r\n    } else {\r\n      const entityList = (entityCollectionOrList as EntityList<Entity>);\r\n      entityList.appendEntities(entities);\r\n    }\r\n  }\r\n\r\n  // #endregion\r\n\r\n\r\n  // #region 删除实体\r\n\r\n  /**\r\n   * 从fapth对应的实体集合中删除id对应的实体\r\n   */\r\n  // public removeEntityByPath(fpath: string[], id: string): void {\r\n  //   const entityCollectionOrList = this.getEntityNodeByPath(fpath);\r\n  //   if (entityCollectionOrList instanceof EntityCollection === true) {\r\n  //     const entityCollection = entityCollectionOrList as EntityCollection<Entity>;\r\n  //     entityCollection.removeEntityById(id);\r\n  //   } else {\r\n  //     const entityList = (entityCollectionOrList as EntityList<Entity>);\r\n  //     entityList.remove(id);\r\n  //   }\r\n  // }\r\n\r\n  /**\r\n   * 根据path获取实体集合\r\n   * @param fpath path\r\n   */\r\n  public removeEntityByPath(fpath: string, id: string) {\r\n    const subPaths = fpath.split('/');\r\n    if (subPaths.length < 3) {\r\n      throw Error(`根据path删除实体数据出错了。传入的path[${fpath}]格式不对`);\r\n    }\r\n    let childEntityList: EntityList<any>;\r\n    for (let i = 2; i < subPaths.length; i = i + 2) {\r\n      const fid = subPaths[i - 1];\r\n      const propName = subPaths[i];\r\n      const parentEntity = childEntityList ? childEntityList.get(fid) : this.entityCollection.getEntityById(fid);\r\n      childEntityList = parentEntity[propName];\r\n      if (!childEntityList) {\r\n        throw Error(`fpath参数错误，无法找到${propName}对应的子表。fpath为：${fpath}`);\r\n      }\r\n    }\r\n\r\n    childEntityList.remove(id);\r\n  }\r\n\r\n  /**\r\n   * 从fapth对应的实体集合中删除ids对应的实体\r\n   */\r\n  public removeEntitiesByPath(fpath: string[], ids: string[]): void {\r\n    // const entityCollectionOrList = this.getEntityNodeByPath(fpath);\r\n    // if (entityCollectionOrList instanceof EntityCollection === true) {\r\n    //   const entityCollection = entityCollectionOrList as EntityCollection<Entity>;\r\n    //   entityCollection.removeEntitiesByIds(ids);\r\n    // } else {\r\n    //   const entityList = (entityCollectionOrList as EntityList<Entity>);\r\n    //   entityList.remove(ids);\r\n    // }\r\n    throw new Error('Not Implemented');\r\n  }\r\n  // #endregion\r\n\r\n\r\n  // #region 清空变更集相关方法\r\n\r\n  /**\r\n   * 清空所有实体的变更集\r\n   */\r\n  public clearAllEntityChanges() {\r\n    const entities = this.entityCollection.toArray();\r\n    entities.forEach((entity: Entity) => {\r\n      entity.changes.splice(0, entity.changes.length);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * 清空id指定的实体变更集\r\n   */\r\n  public clearEntityChangesById(id: string): void {\r\n    const entity = this.entityCollection.getEntityById(id);\r\n    if (!entity) {\r\n      return;\r\n    }\r\n    entity.changes.splice(0, entity.changes.length);\r\n  }\r\n\r\n  /**\r\n   * 清空ids数组中指定的实体的变更集\r\n   */\r\n  public clearEntityChangesByIds(ids: string[]): void {\r\n    if (!ids || ids.length < 0) {\r\n      return;\r\n    }\r\n\r\n    ids.forEach((id: string) => {\r\n      this.clearEntityChangesById(id);\r\n    });\r\n  }\r\n\r\n  // #endregion\r\n\r\n\r\n  // #region 变更集检查相关方法\r\n\r\n  /**\r\n   * 检查所有的实体，是否有未提交的变更\r\n   */\r\n  public checkAllEntityChanges(): boolean {\r\n\r\n    const entities = this.entityCollection.toArray();\r\n    const hasChanges = entities.some((entity: Entity) => {\r\n      if (entity.changes.length > 0) {\r\n        return true;\r\n      } else {\r\n        return false;\r\n      }\r\n    });\r\n    return hasChanges;\r\n  }\r\n\r\n  /**\r\n   * 检查id对应的实体，是否有未提交的变更\r\n   */\r\n  public checkEntityChangesById(id: string): boolean {\r\n    const entity = this.entityCollection.getEntityById(id);\r\n    if (!entity) {\r\n      return false;\r\n    }\r\n    return entity.changes.length > 0;\r\n  }\r\n\r\n  // #endregion\r\n\r\n\r\n  // #region 不规范方法，待废弃\r\n\r\n  /**\r\n   * 待废弃\r\n   * @deprecated\r\n   */\r\n  public clearEntityChangesByArray(idArray: string[]): void {\r\n    this.clearEntityChangesByIds(idArray);\r\n  }\r\n\r\n  // #endregion\r\n\r\n}\r\n\r\nexport { EntityManager };\r\n","import { Type, Injectable } from '@angular/core';\r\nimport { Entity, FieldMetadataUtil } from '../entity/index';\r\n// tslint:disable: no-bitwise\r\n@Injectable()\r\nexport class PaginationManager<T extends Entity> {\r\n\r\n  constructor(private entityType: any, private paginationConfig: any) {\r\n    if (this.paginationConfig === null || this.paginationConfig === undefined) {\r\n      this.paginationConfig = this.getNgListProperties();\r\n    }\r\n    // 兼容老表单，将之前的主表分页信息展开到分页配置根中\r\n    this.expandMainEntityConfig();\r\n    this.deleteMainEntityConfig();\r\n    this.removeLasts();\r\n  }\r\n  /**\r\n   * 主表分页信息展开到分页配置根中\r\n   */\r\n  private expandMainEntityConfig() {\r\n    const entityName = this.entityType.typeName || this.entityType.name;\r\n    if (this.paginationConfig.hasOwnProperty(entityName)) {\r\n      const entityConfig = this.paginationConfig[entityName];\r\n      this.paginationConfig = Object.assign(this.paginationConfig, entityConfig);\r\n    } else {\r\n      this.paginationConfig = Object.assign(this.paginationConfig, { pageSize: this.paginationConfig['pageSize'] || 0 });\r\n    }\r\n  }\r\n  /**\r\n   * 删除子表分页配置key后面的s\r\n   */\r\n  private removeLasts() {\r\n    const entityName = this.entityType.typeName || this.entityType.name;\r\n    Object.keys(this.paginationConfig).forEach(key => {\r\n      if (key !== entityName && key.endsWith('s')) {\r\n        const newKey = key.substring(0, key.length - 1);\r\n        this.paginationConfig[newKey] = this.paginationConfig[key];\r\n        delete this.paginationConfig[key];\r\n      }\r\n    });\r\n  }\r\n  /**\r\n   * 删除主表实体配置信息\r\n   */\r\n  private deleteMainEntityConfig() {\r\n    const entityName = this.entityType.typeName || this.entityType.name;\r\n    delete this.paginationConfig[entityName];\r\n  }\r\n  /**\r\n   * 获取分页信息\r\n   */\r\n  public get pagination() {\r\n    return this.paginationConfig;\r\n  }\r\n  /**\r\n   * 获取分页信息\r\n   * @param path 路径\r\n   * @param defaultValue 默认值\r\n   */\r\n  public getPaginationConfigByPath(path: string, defaultValue?: any) {\r\n    if (!path || path === '/') {\r\n      return this.paginationConfig;\r\n    }\r\n    if (typeof path !== 'string') {\r\n      throw new Error('路径必须为字符串！');\r\n    }\r\n    path = path.substring(1);\r\n    const paths = path.split('/').filter(item => !!item && item.trim().length > 0);\r\n    let config = this.paginationConfig;\r\n    paths.forEach(item => {\r\n      if (config && config.hasOwnProperty(item)) {\r\n        config = config[item];\r\n      } else {\r\n        config = null;\r\n      }\r\n    });\r\n    return !!config ? config : typeof defaultValue !== 'undefined' ? defaultValue : undefined;\r\n  }\r\n  /**\r\n   * 设置分页信息\r\n   * @param path 路径\r\n   * @param value 值\r\n   */\r\n  public setPaginationConfigByPath(path: string | Array<any>, value: any) {\r\n    if (!Array.isArray(path)) {\r\n      path = path.toString().match(/[^/[\\]]+/g) || [];\r\n    }\r\n    path.slice(0, -1).reduce((prev, current, index) =>\r\n      Object(prev[current]) === prev[current]\r\n        ? prev[current]\r\n        : prev[current] = Math.abs(path[index + 1]) >> 0 === +path[index + 1]\r\n          ? []\r\n          : {},\r\n      this.paginationConfig)[path[path.length - 1]] = value;\r\n    return this.paginationConfig;\r\n  }\r\n\r\n  /**\r\n   * 递归获取当前实体的所有NgList属性\r\n   * @param defaultPageSize defaultPageSize\r\n   */\r\n  private getNgListProperties(defaultPageSize: number = 0) {\r\n\r\n    const getChilds = (objectType: Type<Entity>) => {\r\n      const listProperties = FieldMetadataUtil.getNgList(objectType);\r\n      let result = {};\r\n      if (Object.keys(listProperties).length < 1) {\r\n        return result;\r\n      }\r\n\r\n      Object.keys(listProperties).forEach(prop => {\r\n        let itemTypeName = listProperties[prop].dataField;\r\n        // 去掉尾部的s\r\n        if (itemTypeName.endsWith('s')) {\r\n          itemTypeName = itemTypeName.substring(0, itemTypeName.length - 1);\r\n        }\r\n        result[itemTypeName] = {\r\n          pageSize: defaultPageSize\r\n        };\r\n        const child = getChilds(listProperties[prop].type);\r\n        if (child !== null && Object.keys(child).length > 0) {\r\n          result = Object.assign({}, result, child);\r\n        }\r\n      });\r\n      return result;\r\n    };\r\n    const childs = getChilds(this.entityType);\r\n    const root = Object.assign({}, { pageSize: defaultPageSize }, childs);\r\n    return root;\r\n  }\r\n\r\n}\r\n","import { DataChange, DataChangeType } from '../core';\r\n\r\nclass DataChangeHistory {\r\n    private history: Array<DataChange>;\r\n    constructor() {\r\n        this.history = [];\r\n    }\r\n    public addChange(dataChange: DataChange) {\r\n        const changeType = DataChangeType[dataChange.changeType];\r\n        this[`on${changeType}Data`](dataChange);\r\n    }\r\n    public addChanges(dataChange: DataChange[]) {\r\n        dataChange.forEach(change => this.addChange(change));\r\n    }\r\n    public clear() {\r\n        this.history.splice(0, this.history.length);\r\n    }\r\n    public clearByIds(ids: string[]) {\r\n        this.history = this.history.filter(item => {\r\n            if (item.fpath && item.fpath !== '/' && item.fpath.includes('/')) {\r\n                for (const id of ids) {\r\n                    const include = item.fpath.split('/').includes(id);\r\n                    return !include;\r\n                }\r\n            } else {\r\n                return !ids.includes(item.dataId);\r\n            }\r\n        });\r\n    }\r\n    public isChanged() {\r\n        return this.history.length > 0;\r\n    }\r\n    private onAddData(dataChange: DataChange) {\r\n        this.history.push(dataChange);\r\n    }\r\n    private onDeleteData(dataChange: DataChange) {\r\n        const index = this.history.findIndex(item => item.dataId === dataChange.dataId && item.changeType === DataChangeType.Add);\r\n        if (index >= 0) {\r\n            this.history.splice(index, 1);\r\n        } else {\r\n            this.history.push(dataChange);\r\n        }\r\n    }\r\n}\r\nexport { DataChangeHistory };\r\n","/**\r\n * 排序条件管理\r\n */\r\nexport class SortConditionManager {\r\n  /**\r\n   * 排序条件集合\r\n   * @description\r\n   * 排序条件数据结构描述：\r\n   * ```typescript\r\n   * key: bindingPath\r\n   * value: Array<{field:\"name|etc\",direction:\"asc|desc\"}>\r\n   * ```\r\n   */\r\n  private sorts: Map<string, Array<any>>;\r\n  constructor() {\r\n    this.sorts = new Map<string, Array<any>>();\r\n  }\r\n  /**\r\n   * 根据bingdingPath获取排序规则\r\n   * @param bindingPath bindingPath\r\n   * @param directionConverter converter\r\n   */\r\n  public getConditionsByBindingPath(bindingPath: string, directionConverter?: (direction: 'asc' | 'desc') => any) {\r\n    let conditions = this.sorts.get(bindingPath) || [];\r\n    if (conditions.length < 1) {\r\n      return conditions;\r\n    }\r\n    if (typeof directionConverter === 'function') {\r\n      conditions = conditions.map(condition => {\r\n        const sortType = directionConverter(condition.SortType);\r\n        return { SortField: condition.SortField, SortType: sortType };\r\n      });\r\n    }\r\n    return conditions;\r\n  }\r\n  /**\r\n   * 增加排序条件\r\n   * @param bindingPath 绑定路径\r\n   * @param field 排序字段\r\n   * @param direction 排序方向 asc|desc\r\n   */\r\n  public addCondition(bindingPath: string, field: string, direction: string) {\r\n    // 取消排序\r\n    if (!field || !direction) {\r\n      this.sorts.delete(bindingPath);\r\n      return;\r\n    }\r\n    const isBindingPathExist = this.sorts.has(bindingPath);\r\n    const condition = { SortField: field, SortType: direction };\r\n    if (!isBindingPathExist) {\r\n      this.sorts.set(bindingPath, [condition]);\r\n    } else {\r\n      const bindingPathSortConditions = this.sorts.get(bindingPath) || [];\r\n      // new condition will override the previous condition\r\n      const conditionIndex = bindingPathSortConditions.findIndex(item => item.SortField === field);\r\n      if (conditionIndex !== -1) {\r\n        bindingPathSortConditions[conditionIndex] = condition;\r\n      } else {\r\n        bindingPathSortConditions.push(condition);\r\n      }\r\n    }\r\n  }\r\n  public removeCondition(bindingPath: string, field: string) {\r\n    throw new Error('not implement!');\r\n  }\r\n  /**\r\n   * 批量增加排序条件\r\n   * @param bindingPath bindingPath\r\n   * @param fields fields , seprated by comma\r\n   * @param directions directions , seprated by comma\r\n   * @description set conditions and overwrite all conditions which has the same bindingPath\r\n   */\r\n  public setConditions(bindingPath: string, fields: string, directions: string) {\r\n    // 取消排序\r\n    if (!fields || !directions) {\r\n      this.sorts.delete(bindingPath);\r\n      return;\r\n    }\r\n    const filedsArray = fields.split(',').filter(item => item);\r\n    const directionsArray = directions.split(',').filter(item => item);\r\n    if (filedsArray.length !== directionsArray.length) {\r\n      throw new Error('arguments error,fields and direction are not match.');\r\n    }\r\n    const conditions = [];\r\n    filedsArray.forEach((field: string, index: number) => {\r\n      const condition = { SortField: field, SortType: directionsArray[index] };\r\n      conditions.push(condition);\r\n    });\r\n    this.sorts.set(bindingPath, conditions);\r\n  }\r\n  /**\r\n   * 清空所有排序条件\r\n   */\r\n  public clear() {\r\n    this.sorts.clear();\r\n  }\r\n\r\n}\r\n","/**\r\n * 过滤条件管理器\r\n */\r\nexport class FilterConditionManager {\r\n    private filters: Map<string, Array<any>> = new Map<string, Array<any>>();\r\n    /**\r\n     * 获取过滤条件\r\n     * @param bindingPath 绑定路径\r\n     */\r\n    public getFilters(bindingPath: string) {\r\n        return this.filters.get(bindingPath) || [];\r\n    }\r\n    /**\r\n     * 自定义合并\r\n     * @param bindingPath 绑定路径\r\n     * @param merge 合并函数\r\n     */\r\n    public mergeCondition(bindingPath: string, merge: (conditions: any) => any) {\r\n        const conditions = this.filters.get(bindingPath) || [];\r\n        const result = merge(conditions);\r\n        this.filters.set(bindingPath, result);\r\n    }\r\n    /**\r\n     * 增加过滤条件\r\n     * @param bindingPath 绑定路径\r\n     * @param condition 过滤条件\r\n     */\r\n    public addCondition(bindingPath: string, condition: any) {\r\n        // 通过bindingPath获取对应的过滤条件\r\n        const conditions = this.filters.get(bindingPath);\r\n        const index = this.findConditionIndex(bindingPath, condition);\r\n        if (index !== -1) {\r\n            conditions[index] = condition;\r\n        } else {\r\n            conditions.push(condition);\r\n        }\r\n    }\r\n    /**\r\n     * 批量增加过滤条件\r\n     * @param bindingPath 绑定路径\r\n     * @param conditions 过滤条件数组\r\n     */\r\n    public addConditions(bindingPath: string, conditions: Array<any>) {\r\n        if (!conditions || !Array.isArray(conditions) || conditions.length < 1) {\r\n            return;\r\n        }\r\n        conditions.forEach(condition => {\r\n            this.addCondition(bindingPath, condition);\r\n        });\r\n    }\r\n    /**\r\n     * 删除过滤条件\r\n     * @param bindingPath 绑定路径\r\n     * @param predicate 条件表达式\r\n     */\r\n    public removeCondition(bindingPath: string, predicate: (value: any, index: number, array: any[]) => boolean) {\r\n        const conditions: Array<{ [propName: string]: any }> = this.filters.get(bindingPath);\r\n        if (!conditions || conditions.length < 1) {\r\n            return;\r\n        }\r\n        const removes = conditions.filter(predicate);\r\n        if (removes) {\r\n            removes.forEach(condition => {\r\n                const index = this.findConditionIndex(bindingPath, condition);\r\n                if (index >= 0) {\r\n                    conditions.splice(index, 1);\r\n                }\r\n            });\r\n        }\r\n    }\r\n    /**\r\n     * 清空过滤条件\r\n     */\r\n    public clear() {\r\n        this.filters.clear();\r\n    }\r\n    /**\r\n     * 设置过滤条件数组\r\n     * @param bindingPath 绑定路径\r\n     * @param conditions 过滤条件数组\r\n     */\r\n    public setConditions(bindingPath: string, conditions: Array<any>) {\r\n        this.filters.set(bindingPath, conditions);\r\n    }\r\n\r\n    /**\r\n     * 查找过滤条件索引\r\n     * @param bindingPath 绑定路径\r\n     * @param condition 过滤条件\r\n     */\r\n    private findConditionIndex(bindingPath: string, condition: any) {\r\n        if (!condition || typeof (condition) !== 'object' || Object.keys(condition).length < 1) {\r\n            return -1;\r\n        }\r\n        const conditions: Array<any> = this.filters.get(bindingPath);\r\n        if (!conditions || conditions.length < 1) {\r\n            return -1;\r\n        }\r\n        return conditions.findIndex((value, index) => {\r\n            let isEqual = true;\r\n            const props = Object.keys(condition);\r\n            for (const prop of props) {\r\n                if (!(value && value.hasOwnProperty(prop) && value[prop] === condition[prop])) {\r\n                    isEqual = false;\r\n                    break;\r\n                }\r\n            }\r\n            return isEqual;\r\n        });\r\n    }\r\n}\r\n","// tslint:disable: no-bitwise\r\n// get uniqueId\r\nexport class UID {\r\n    private static previous = 0;\r\n    public static create(redix?: number) {\r\n        const timestamp = Date.now().valueOf();\r\n        let uuid = 0;\r\n        if (timestamp > UID.previous) {\r\n            UID.previous = timestamp;\r\n            uuid = timestamp;\r\n        } else {\r\n            UID.previous = UID.previous + 100;\r\n            uuid = UID.previous;\r\n        }\r\n        return uuid.toString(redix);\r\n    }\r\n}\r\n","/*\r\n * @Author: Witt\r\n * @Date: 2018-10-12 15:37:11\r\n * @Last Modified by: aalizzwell\r\n * @Last Modified time: 2019-09-03 19:10:44\r\n * @todo 待优化问题\r\n * 1、apiUrl是否应该在基类中，子类中的api如何传递给基类；\r\n */\r\n\r\nimport { Type, Injectable, OnDestroy } from '@angular/core';\r\nimport { Observable, Subject } from 'rxjs';\r\n\r\nimport { DataTypeInfo, IDisposable } from '../core/index';\r\nimport { Modification } from '../changeset/index';\r\nimport { MetadataUtil } from '../metadata/index';\r\nimport { Entity, createEntity, createEntities, FieldMetadataUtil } from '../entity/index';\r\nimport { NgRepository } from './decorators';\r\nimport { EntityCollection } from './entity_collection';\r\nimport { PaginationManager } from './pagination_manager';\r\nimport { DataChangeHistory } from './data_change_history';\r\nimport { SortConditionManager } from './sort_condition_manager';\r\nimport { FilterConditionManager } from './filter_condition_manager';\r\nimport { UID } from '../misc/uid';\r\n\r\n/**\r\n * 本地仓库\r\n * @description\r\n * # Repository\r\n * \r\n * Repository负责与后台接口交互并将接口返回的数据转换为Entity集合进行保存。因此Repository有两个重要的职责：后端交互、数据存储。\r\n * Repository中存储的数据是Entity类型，可以通过API对数据进行修改或删除。由于Repository和BindingData相互监听，对数据仓库的操作最终会通过BindingData更新到界面上。\r\n * \r\n * ## 实体操作\r\n * 实体操作仅对Repository本地已经存在的数据进行操作，不会发送请求。\r\n * \r\n * - 通过主键获取实体\r\n * \r\n *   ```javascript\r\n *    this.repository.entityCollection.getEntityById(\"id\");\r\n *   ```\r\n * \r\n * - 删除实体数据\r\n * \r\n *   ```javascript\r\n *   this.repository.entityCollection.removeEntityById(\"id\")\r\n *   ```\r\n * \r\n * - 清空所有实体\r\n * \r\n *   ```javascript\r\n *   this.repository.entityCollection.clear();\r\n *   ```\r\n * \r\n * - 将实体数据转换为json格式\r\n * \r\n *   ```javascript\r\n *   this.repository.entityCollection.toJSON();\r\n *   ```\r\n * \r\n * - 添加实体\r\n * \r\n *   ```javascript\r\n *   this.repository.entityCollection.addEntity(entity:T);\r\n *   ```\r\n * - 添加子表实体\r\n * \r\n *   ```javascript\r\n *   const befRepository = this.repository as BefRepository<any>;\r\n *   const entityManager = befRepository.entityManager;\r\n *   entityManager.appendEntityByPath(\"/主实体Id/子表名s\",{子表JSON数据});\r\n *   ```\r\n * - 批量添加实体\r\n * \r\n *   ```javascript\r\n *   this.repository.entityCollection.addEntities(entities:T[])\r\n *   ```\r\n *   \r\n * - 批量添加子表实体\r\n * \r\n *   ```javascript\r\n *   const befRepository = this.repository as BefRepository<any>;\r\n *   const entityManager = befRepository.entityManager;\r\n *   const childrenEntities = entityManager.createEntitiesByPath([\"主实体Id\",\"子表名s\"], entityListData: any[])\r\n *   entityManager.appendEntitiesByPath([\"主实体Id\",\"子表名s\"],childrenEntities);\r\n *   ```\r\n * \r\n * - 批量加载实体\r\n * \r\n *   ```javascript\r\n *   this.repository.entityCollection.loadEntities(entities:T[]);\r\n *   ```\r\n * \r\n *   > 加载实体会将本地仓库数据置为加载的实体。\r\n * \r\n * - 创建实体\r\n * \r\n *   ```javascript\r\n *   this.repository.buildEntity(JSON数据);\r\n *   ```\r\n * \r\n * - 批量创建实体\r\n * \r\n *   ```javascript\r\n *   this.repository.buildEntities(JSON数据);\r\n *   ```\r\n * \r\n * - 获取子表数据\r\n * \r\n *   ```javascript\r\n *   const befRepository = this.repository as BefRepository<any>;\r\n *   const entityManager = befRepository.entityManager;\r\n *   entityManager.getEntityByPath([\"主实体Id\",\"子表名\",\"子表id\"]);\r\n *   ```\r\n * \r\n *   !> **注意** entityManager属性仅存在于BefRepository类，因此在使用EntityManager时应先将Repository转换为BefRepository\r\n * \r\n * - 获取所有子表数据\r\n * \r\n *   ```javascript\r\n *   const befRepository = this.repository as BefRepository<any>;\r\n *   const entityManager = befRepository.entityManager;\r\n *   entityManager.getEntitiesByPath([\"主实体Id\",\"子表名\"]);\r\n *   ```\r\n * \r\n *   > EntityManager不仅可以获取子表数据，同样可以获取主表数据。\r\n *   >\r\n *   > ```javascript\r\n *   > entityManager.getEntitiesByPath([\"主实体Id\"]);\r\n *   > ```\r\n *   \r\n * - 获取实体属性值\r\n * \r\n *   ```javascript\r\n *   const entity = this.repository.entityCollection.getEntityById(\"id\");\r\n *   cosnt name = entity['name'];\r\n *   // 或者\r\n *   const entity: any = this.repository.entityCollection.getEntityById(\"id\");\r\n *   cosnt name = entity.name;\r\n *   ```\r\n * \r\n * ## 后端交互\r\n * \r\n * ​\t通过接口操作后端数据，会直接对数据产生影响。\r\n * \r\n * - 更新实体数据\r\n * \r\n *   ```javascript\r\n *   this.repository.updateById('id');\r\n *   ```\r\n * \r\n * - 删除实体\r\n * \r\n *   ```javascript\r\n *   this.repository.removeById(\"id\");\r\n *   ```\r\n * \r\n * - 批量删除实体\r\n * \r\n *   ```javascript\r\n *   this.repository.removeByIds(ids:string[])\r\n *   ```\r\n * \r\n * - 删除下级表数据\r\n * \r\n *   ```javascript\r\n *   this.repository.removeByPath(['主表Id','子表名','子表Id'])\r\n *   ```\r\n * \r\n * - 新增主实体\r\n * \r\n *   ```javascript\r\n *   this.repository.append();\r\n *   ```\r\n * \r\n * - 新增子实体\r\n * \r\n *   ```javascript\r\n *   this.repository.appendByPath(['主表id','子表名']);\r\n *   ```\r\n * \r\n * - 加载实体数据\r\n * \r\n *   ```javascript\r\n *   this.repository.getById('id');\r\n *   ```\r\n * \r\n * - 获取主表数据\r\n * \r\n *   ```javascript\r\n *   this.repository.getEntities(filter: any[], sorts: any[], pageSize: number | null, pageIndex: number | null)\r\n *   \r\n *   ```\r\n * \r\n *   > pageSize、pageIndex可以不传。\r\n * \r\n * - 获取主表数据（POST方法）\r\n * \r\n *   ```javascript\r\n *   this.repository.filter(filter: any[], sorts: any[], pageSize: number | null, pageIndex: number | null)\r\n *   ```\r\n * \r\n * - 提交指定实体变更到后端\r\n * \r\n *   ```javascript\r\n *   this.repository.updateChangesById(\"id\");\r\n *   ```\r\n * \r\n * - 提交所有变更\r\n * \r\n *   ```javascript\r\n *   this.repository.updateAllChanges();\r\n *   ```\r\n * \r\n * - 应用变更（保存）\r\n * \r\n *   ```javascript\r\n *   this.repository.applyChanges();\r\n *   ```\r\n * \r\n * - 取消变更\r\n * \r\n *   ```javascript\r\n *   this.repository.cancelChanges();\r\n *   ```\r\n * \r\n * - 清除Repository所有变更\r\n * \r\n *   ```javascript\r\n *   const befRepository = this.repository as BefRepository<any>;\r\n *   befRepository.entityManager.clearAllEntityChanges();\r\n *   ```\r\n *   \r\n * - 批量新增子表数据\r\n *   ```javascript\r\n *   this.repository.batchAppendByPath(path: string, defaultValues: Array<any>);\r\n *   ```\r\n *   \r\n *   > path `string`：/主表id/从表前端nodeCode，如果/1/orders\r\n *   >\r\n *   > defaultValues `Array<any>`：新增从表时的默认值，数组，元素为对象，key为字段名，value为默认值。\r\n *   \r\n * - 批量删除子表数据\r\n *   \r\n *   ```javascript\r\n *   this.repository.batchRemoveByPath(path: string, ids: string);\r\n *   ```\r\n *   \r\n *   > path `string`： /主表id/从表前端nodeCode，如果/1/orders\r\n *   >\r\n *   > ids `string` ：要删除的子表数据id，格式为`id1,id2,id3`\r\n */\r\n@Injectable()\r\nexport abstract class Repository<T extends Entity> implements IDisposable, OnDestroy {\r\n\r\n  // #region 私有属性\r\n\r\n  /**\r\n   * 名称\r\n   */\r\n  private innerName: string;\r\n\r\n  // #endregion\r\n\r\n  // #region 公有属性（共有属性不应该直接暴露，待包装）\r\n\r\n  /**\r\n   * API地址\r\n   */\r\n  public apiUri: string;\r\n\r\n  /**\r\n   * 实体类型\r\n   */\r\n  public entityType: any;\r\n\r\n\r\n  /**\r\n   * 实体类型信息\r\n   * @todo：实体层应该事先一个EntityTypeInfo，并继承DataTypeInfo。\r\n   */\r\n  public entityTypeInfo: DataTypeInfo;\r\n\r\n  /**\r\n   * 实体集合\r\n   */\r\n  public entityCollection: EntityCollection<T>;\r\n\r\n  /**\r\n   * 用户分页配置信息\r\n   */\r\n  public paginationInfo: any = null;\r\n\r\n  /**\r\n   * 数据变更历史（仅针对主表增加、各种表删除）\r\n   */\r\n  public dataChangeHistory: DataChangeHistory;\r\n\r\n  /**\r\n   * 排序条件管理器\r\n   */\r\n  public sortConditionManager: SortConditionManager;\r\n  /**\r\n   * 过滤条件管理器\r\n   */\r\n  public filterConditionManager: FilterConditionManager;\r\n  // #endregion\r\n\r\n  // #region get/set方法\r\n\r\n  /**\r\n   * 实体主键\r\n   */\r\n  public get primaryKey(): string {\r\n    return this.entityCollection.primaryKey;\r\n  }\r\n  public get changes(): Subject<Modification> {\r\n    return this.entityCollection.changes;\r\n  }\r\n  /**\r\n   * 实体变更集合\r\n   */\r\n  public get entityCollectionChange(): Subject<Modification> {\r\n    return this.entityCollection.collectionChanged;\r\n  }\r\n\r\n  /**\r\n   * 获取名称\r\n   */\r\n  public get name(): string {\r\n\r\n    // 1、老表单没有name属性\r\n    // 2、不能使用construcotr.name，压缩脚本会把name改掉，或者压缩成相同的名称（目前发现已知）\r\n    if (!this.innerName) {\r\n      const guid = UID.create();\r\n      this.innerName = `Repository_${guid}`;\r\n    }\r\n\r\n    return this.innerName;\r\n  }\r\n  /**\r\n   * 设置名称\r\n   */\r\n  public set name(value: string) {\r\n    this.innerName = value;\r\n  }\r\n\r\n  public paginationManager: PaginationManager<T>;\r\n  public destroy$: Subject<any>;\r\n  // #endregion\r\n\r\n  /**\r\n   * 构造函数\r\n   */\r\n  constructor() {\r\n    this.readMetadata();\r\n    if (this.entityType) {\r\n      this.entityTypeInfo = new DataTypeInfo(this.entityType);\r\n      this.entityCollection = new EntityCollection<T>(this.entityType);\r\n    }\r\n    this.dataChangeHistory = new DataChangeHistory();\r\n    this.sortConditionManager = new SortConditionManager();\r\n    this.filterConditionManager = new FilterConditionManager();\r\n    this.destroy$ = new Subject<any>();\r\n  }\r\n  dispose(options?: any) {\r\n\r\n    this.paginationManager = null;\r\n    if (this.destroy$) {\r\n      this.destroy$.next();\r\n      this.destroy$.complete();\r\n      this.destroy$ = null;\r\n    }\r\n    if (this.entityCollection) {\r\n      this.entityCollection.reset(false);\r\n      this.entityCollection = null;\r\n    }\r\n\r\n  }\r\n  ngOnDestroy(): void {\r\n    this.dispose();\r\n  }\r\n\r\n  public updateEntityType(entityType: any) {\r\n    this.entityType = entityType;\r\n    this.entityTypeInfo = new DataTypeInfo(this.entityType);\r\n    this.entityCollection = new EntityCollection<T>(this.entityType);\r\n  }\r\n\r\n\r\n  /**\r\n   * 读取元数据\r\n   */\r\n  private readMetadata() {\r\n    const repositoryMetadata: NgRepository = MetadataUtil.getClassMetadataByName(this.constructor, 'NgRepository');\r\n    if (repositoryMetadata) {\r\n      // API地址\r\n      this.apiUri = repositoryMetadata.apiUrl;\r\n\r\n      // 实体类型\r\n      this.entityType = repositoryMetadata.entityType;\r\n    }\r\n\r\n    // // API地址\r\n    // this.apiUri = repositoryMetadata.apiUrl;\r\n\r\n    // // 实体类型\r\n    // this.entityType = repositoryMetadata.entityType;\r\n  }\r\n\r\n  /**\r\n   * 初始化分页配置\r\n   * @param config 用户分页配置\r\n   */\r\n  setPaginationConfig(config: any) {\r\n    this.paginationManager = new PaginationManager(this.entityType, config);\r\n    const { pageSize = 0 } = this.paginationManager.getPaginationConfigByPath('/') || {};\r\n    // tslint:disable-next-line: max-line-length\r\n    this.entityCollection.paginationInfo = Object.assign({ pageSize }, this.paginationManager.pagination, this.entityCollection.paginationInfo);\r\n    // 无需再单独设置一次pageSize，减少一次变更\r\n    // this.entityCollection.pageSize = pageSize;\r\n  }\r\n  /**\r\n   * 重置状态\r\n   */\r\n  public reset(): void {\r\n    this.entityCollection.reset();\r\n  }\r\n\r\n  /**\r\n   * 创建实体\r\n   */\r\n  public buildEntity(data: any): T {\r\n    const entity = createEntity<T>(this.entityType, data);\r\n    return entity;\r\n  }\r\n\r\n  /**\r\n   * 批量创建实体\r\n   */\r\n  public buildEntities(listData: any[]): T[] {\r\n    const entities: T[] = createEntities<T>(this.entityType, listData);\r\n    return entities;\r\n  }\r\n\r\n  /**\r\n   * 获取实体列表\r\n   * @param filters    过滤条件\r\n   * @param sorts      排序条件\r\n   * @param pagination 分页信息\r\n   */\r\n  abstract getEntities(filter: any[], sorts: any[], pageSize: number | null, pageIndex: number | null): Observable<T[]>;\r\n  /**\r\n   * 获取实体列表\r\n   * @param filter 过滤条件\r\n   * @param sorts 排序条件\r\n   * @param pageSize 分页大小\r\n   * @param pageIndex 当前分页\r\n   */\r\n  abstract filter(filter?: any[], sorts?: any[], pageSize?: number | null, pageIndex?: number | null): Observable<T[]>;\r\n  /**\r\n   * 获取实体列表\r\n   */\r\n  abstract getList(): Observable<T[]>;\r\n  /**\r\n   * 根据id获取实体\r\n   * @param id 实体标识\r\n   */\r\n  abstract getById(id: string): Observable<T>;\r\n  /**\r\n   * 根据id获取实体\r\n   * @param id 主实体id\r\n   */\r\n  abstract getEntityById(id: string): Observable<T>;\r\n  /**\r\n   * 分页查询从表/从从表数据\r\n   * @param path 绑定路径\r\n   * @param ids 绑定路径对应的主键\r\n   * @param filter 过滤条件\r\n   * @param sort 排序\r\n   */\r\n  abstract queryChild(paths: string[], pageIndex: number, pageSize: number, filter?: string, sort?: string): Observable<T[]>;\r\n  /**\r\n   * 根据id更新实体\r\n   * @param id 实体id\r\n   */\r\n  abstract updateById(id: string): Observable<T>;\r\n  /**\r\n   * 更新实体数据(子表分页)\r\n   * @param id 实体主键\r\n   */\r\n  abstract updateEntityById(id: string): Observable<T>;\r\n  /**\r\n   * 创建新实体，将该实体加载到列表\r\n   */\r\n  abstract create(): Observable<any>;\r\n\r\n  // /**\r\n  //  * 创建后代实体，将该实体加载到后代列表（暂无该场景）\r\n  //  * @param path 路径\r\n  //  */\r\n  // abstract createByPath(path: string);\r\n\r\n  /**\r\n   * 创建新实体，并追加到实体列表\r\n   */\r\n  abstract append(): Observable<any>;\r\n\r\n  /**\r\n   * 创建新的子实体，并追加到实体列表\r\n   * @param path 实体路径\r\n   */\r\n  abstract appendByPath(path: string): Observable<any>;\r\n  /**\r\n   * 再指定位置插入数据\r\n   */\r\n  abstract insert(position: 1 | -1, defaultValue?: any): Observable<any>;\r\n  /**\r\n   * 在指定实体路径插入实体\r\n   * @param path 实体路径\r\n   */\r\n  abstract insertByPath(path: string, position: 1 | -1): Observable<any>;\r\n  /**\r\n   * 根据id删除对应实体\r\n   * @param id 内码\r\n   */\r\n  abstract removeById(id: string, ifSave?: boolean): Observable<any>;\r\n\r\n  /**\r\n   * 根据ids批量删除实体\r\n   * @param id ids\r\n   * @param ifSave 是否保存\r\n   * @deprecated 已废弃，该接口使用querystring传参，存在超长问题。请使用batchRemove接口替代。\r\n   */\r\n  abstract removeByIds(ids: string[], ifSave?: boolean): Observable<any>;\r\n  /**\r\n   * 根据ids批量删除实体\r\n   * @param ids ids\r\n   * @param ifSave 是否保存\r\n   */\r\n  abstract batchRemove(ids: string[], ifSave?: boolean): Observable<any>;\r\n  /**\r\n   * 根据id删除path对应的后代实体\r\n   */\r\n  abstract removeByPath(path: string, id: string);\r\n\r\n  /**\r\n   * 提交id对应的根实体变更\r\n   */\r\n  abstract updateChangesById(id: string): Observable<boolean>;\r\n\r\n  /**\r\n   * 提交path对应的实体变更\r\n   */\r\n  abstract updateChangesByPath(path: string, id: string): Observable<boolean>;\r\n\r\n  /**\r\n   * 更新所有变更\r\n   */\r\n  abstract updateAllChanges(): Observable<boolean>;\r\n\r\n  /**\r\n   * 应用服务器端变更\r\n   */\r\n  abstract applyChanges(): Observable<boolean>;\r\n\r\n  /**\r\n   * 保存id对应数据的变更\r\n   */\r\n  abstract applyChangesById(id: string): Observable<boolean>;\r\n\r\n  /**\r\n   * 取消变更集\r\n   */\r\n  abstract cancelChanges(options?: any): Observable<boolean>;\r\n  /**\r\n   * 批量删除子表\r\n   */\r\n  abstract batchRemoveByPath(path: string, ids: string): Observable<boolean>;\r\n  /**\r\n   * 批量新增从表/从从表数据\r\n   * @param path 实体绑定路径，like 1/childs or 1/childs/11/childchilds\r\n   * @param defaultValues 默认实体数据数组\r\n   * @description 后端接口只支持批量新增子表，批量新增主表目前不支持\r\n   */\r\n  abstract batchAppendByPath(path: string, defaultValues: Array<any>): Observable<any>;\r\n  /**\r\n   * 批量新增主表数据\r\n   * @param defaultValues 默认实体数据数组\r\n   */\r\n  abstract batchAppend(defaultValues: Array<any>): Observable<any>;\r\n\r\n}\r\n","/*\r\n * @Author: Witt\r\n * @Date: 2019-02-28 15:46:07\r\n * @Last Modified by: aalizzwell\r\n * @Last Modified time: 2019-09-03 19:10:53\r\n */\r\n\r\n\r\nimport { Injectable, Injector } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { Entity } from '../entity/index';\r\nimport { Repository } from './repository';\r\nimport { EntityManager } from './entity_manager';\r\n\r\n/**\r\n * 空Repository实现\r\n */\r\n@Injectable()\r\nclass DefaultRepository<T extends Entity> extends Repository<T> {\r\n  /**\r\n   * 实体管理器\r\n   * @internal\r\n   */\r\n  public entityManager: EntityManager<T>;\r\n\r\n  constructor(private injector: Injector) {\r\n    super();\r\n\r\n    // 初始化实体管理器\r\n    this.entityManager = new EntityManager(this.entityCollection);\r\n  }\r\n\r\n  /**\r\n   * 获取实体列表\r\n   */\r\n  public getEntities(filter: any[], sorts: any[], pageSize: number, pageIndex: number): Observable<T[]> {\r\n    throw new Error('Not Implemented');\r\n  }\r\n  public filter(filter: any[], sorts: any[], pageSize: number, pageIndex: number): Observable<T[]> {\r\n    throw new Error('Not Implemented');\r\n  }\r\n\r\n  /**\r\n   * 获取实体列表\r\n   */\r\n  public getList(): Observable<T[]> {\r\n    throw new Error('Not Implemented');\r\n  }\r\n  /**\r\n   * 根据id获取实体\r\n   * @param id 主实体id\r\n   */\r\n  public getById(id: string): Observable<T> {\r\n    throw new Error('Not Implemented');\r\n  }\r\n  /**\r\n   * 根据id获取子表分页的实体\r\n   * @param id 主实体id\r\n   */\r\n  public getEntityById(id: string): Observable<T> {\r\n    throw new Error('Not Implemented');\r\n  }\r\n  /**\r\n   * 分页查询从表/从从表数据\r\n   * @param path 绑定路径\r\n   * @param ids 绑定路径对应的主键\r\n   * @param filter 过滤条件\r\n   * @param sort 排序\r\n   */\r\n  public queryChild(paths: string[], pageIndex: number, pageSize: number, filter?: string, sort?: string): Observable<T[]> {\r\n    throw new Error('Not Implemented');\r\n  }\r\n  /**\r\n   * 根据id更新实体\r\n   */\r\n  public updateById(id: string): Observable<T> {\r\n    throw new Error('Not Implemented');\r\n  }\r\n  /**\r\n   * 更新实体数据(子表分页)\r\n   * @param id 实体主键\r\n   */\r\n  public updateEntityById(id: string): Observable<T> {\r\n    throw new Error('Not Implemented');\r\n  }\r\n  /**\r\n   * 创建实体\r\n   */\r\n  public create(): Observable<any> {\r\n    throw new Error('Not Implemented');\r\n  }\r\n\r\n  /**\r\n   * 创建新实体，并追加到实体列表\r\n   */\r\n  public append(): Observable<any> {\r\n    throw new Error('Not Implemented');\r\n  }\r\n\r\n  /**\r\n   * 创建新的子实体，并追加到实体列表\r\n   */\r\n  public appendByPath(path: string): Observable<any> {\r\n    throw new Error('Not Implemented');\r\n  }\r\n  /**\r\n   * 再指定位置插入数据\r\n   * @param position 插入位置\r\n   * @param defaultValue 默认值\r\n   */\r\n  public insert(position: 1 | -1, defaultValue?: any): Observable<any> {\r\n    throw new Error('Not Implemented');\r\n  }\r\n  /**\r\n   * 在指定实体路径插入实体\r\n   * @param path 实体路径\r\n   * @param position 插入位置\r\n   */\r\n  public insertByPath(path: string, position: 1 | -1): Observable<any> {\r\n    throw new Error('Not Implemented');\r\n  }\r\n  /**\r\n   * 根据id删除对应实体\r\n   */\r\n  public removeById(id: string, ifSave?: boolean): Observable<any> {\r\n    throw new Error('Not Implemented');\r\n  }\r\n  /**\r\n   * 根据ids批量删除实体\r\n   * @param ids ids\r\n   * @param ifSave 是否保存\r\n   */\r\n  public batchRemove(ids: string[], ifSave?: boolean): Observable<any> {\r\n    throw new Error('Not Implemented');\r\n  }\r\n  /**\r\n   * 根据ids批量删除实体\r\n   */\r\n  public removeByIds(id: string[], ifSave?: boolean): Observable<any> {\r\n    throw new Error('Not Implemented');\r\n  }\r\n\r\n  /**\r\n   * 根据id删除path对应的后代实体\r\n   */\r\n  public removeByPath(path: string, id: string) {\r\n    throw new Error('Not Implemented');\r\n  }\r\n\r\n  /**\r\n   * 提交id对应的根实体变更\r\n   */\r\n  public updateChangesById(id: string): Observable<boolean> {\r\n    throw new Error('Not Implemented');\r\n  }\r\n\r\n  /**\r\n   * 提交path对应的实体变更\r\n   */\r\n  public updateChangesByPath(path: string, id: string): Observable<boolean> {\r\n    throw new Error('Not Implemented');\r\n  }\r\n\r\n  /**\r\n   * 更新所有变更\r\n   */\r\n  public updateAllChanges(): Observable<boolean> {\r\n    throw new Error('Not Implemented');\r\n  }\r\n\r\n  /**\r\n   * 应用服务器端变更\r\n   */\r\n  public applyChanges(): Observable<boolean> {\r\n    throw new Error('Not Implemented');\r\n  }\r\n\r\n  /**\r\n   * 保存id对应数据的变更\r\n   */\r\n  public applyChangesById(id: string): Observable<boolean> {\r\n    throw new Error('Not Implemented');\r\n  }\r\n\r\n  /**\r\n   * 取消变更集\r\n   */\r\n  public cancelChanges(options?: any): Observable<boolean> {\r\n    throw new Error('Not Implemented');\r\n  }\r\n  /**\r\n   * 批量删除子表\r\n   */\r\n  public batchRemoveByPath(path: string, ids: string): Observable<boolean> {\r\n    throw new Error('Not Implemented');\r\n  }\r\n  /**\r\n   * 批量新增从表/从从表数据\r\n   * @param path 实体绑定路径，like 1/childs or 1/childs/11/childchilds\r\n   * @param defaultValues 默认实体数据数组\r\n   */\r\n  public batchAppendByPath(path: string, defaultValues: Array<any>): Observable<any> {\r\n    throw new Error('Not Implemented');\r\n  }\r\n  /**\r\n   * 批量新增主表数据\r\n   * @param path 实体绑定路径，like 1/childs or 1/childs/11/childchilds\r\n   * @param defaultValues 默认实体数据数组\r\n   */\r\n  public batchAppend(defaultValues: Array<any>): Observable<any> {\r\n    throw new Error('Not Implemented');\r\n  }\r\n}\r\n\r\nexport { DefaultRepository };\r\n","import { Injectable } from '@angular/core';\r\nimport { DataTypeInfo } from '../core/index';\r\nimport { Repository } from '../repository/index';\r\nimport { ExpressionUtil } from '../utils/expression_util';\r\nimport { ENTITY_TEMPLATE, GROUP_FUNCTIONS, IResolver } from './types';\r\n\r\n@Injectable()\r\nexport class EntityDependencyResolver implements IResolver {\r\n  private entityTypeInfo: DataTypeInfo;\r\n  constructor(private repository: Repository<any>) {\r\n    this.entityTypeInfo = this.repository && this.repository.entityTypeInfo || null;\r\n  }\r\n  /**\r\n   * 解析用户表达式中的实体依赖\r\n   * @param expr 用户配置的完整表达式\r\n   * @returns \r\n   */\r\n  public resolve(expr: string): string[] {\r\n    const groupFunctionDependencies = ExpressionUtil.getGroupFunctionDependency(expr, this.repository.entityTypeInfo);\r\n    const entityDependencies = this.getEntityDependency(expr);\r\n    // 去除错误的到子表的依赖\r\n    if (groupFunctionDependencies && groupFunctionDependencies.length > 0 && entityDependencies && entityDependencies.length > 0) {\r\n      groupFunctionDependencies.forEach((dep: string) => {\r\n        const index = entityDependencies.findIndex(item => dep.startsWith(item));\r\n        if (index !== -1) {\r\n          entityDependencies.splice(index, 1);\r\n        }\r\n      });\r\n    }\r\n    // 去重\r\n    const merged = [...groupFunctionDependencies, ...entityDependencies];\r\n    const deps = [...new Set(merged)];\r\n    return deps;\r\n  }\r\n  /**\r\n   * 获取合法的实体属性表达式\r\n   * @param entityPropertyExpression 实体属性表达式\r\n   * @returns \r\n   */\r\n  private getValidEntityPropertyExpression(entityPropertyExpression: string): string[] {\r\n    const propPaths = entityPropertyExpression.split('.');\r\n    let propInfo = null;\r\n    try {\r\n      propInfo = this.entityTypeInfo.getPropInfoByPath(propPaths);\r\n    } catch (e) { }\r\n    if (!propInfo) {\r\n      if (propPaths.length > 1) {\r\n        propPaths.pop();\r\n        return this.getValidEntityPropertyExpression(propPaths.join('.'));\r\n      } else {\r\n        return null;\r\n      }\r\n    } else {\r\n      return entityPropertyExpression.split('.');\r\n    }\r\n  }\r\n  /**\r\n   * 获取所有实体依赖\r\n   * @param expr 表达式字符串\r\n   * @returns \r\n   */\r\n  private getEntityDependency(expr: string): string[] {\r\n    const deps = [];\r\n    if (this.entityTypeInfo) {\r\n      // 使用正则匹配出所有实体\r\n      const regex = new RegExp(`[\\\\'\\\\\"]?\\\\s*(${this.entityTypeInfo.entityInfo.nodeCode}|${this.entityTypeInfo.entityInfo.originalCode})[\\\\.\\\\[\\\\]a-zA-Z0-9_]+\\\\s*[\\\\'\\\\\"]?`, 'g');\r\n      const entityPropertyExpressions: RegExpMatchArray = expr.match(regex);\r\n      if (Array.isArray(entityPropertyExpressions) && entityPropertyExpressions.length > 0) {\r\n        // 解析出所有实体相关的字符串，以主实体名字开头，包含主实体属性或子表\r\n        entityPropertyExpressions.forEach((item: string) => {\r\n          if (item.indexOf('.') === -1) {\r\n            return;\r\n          }\r\n          // 去空格\r\n          item = item.trim().replace(/\\\"/g, '');\r\n          const paths = ExpressionUtil.convertToNodeCode(item, this.repository.entityTypeInfo);\r\n          item = paths.join('.');\r\n          // 截去主实体及点\r\n          item = item.substr(item.indexOf('.') + 1);\r\n          const dep = this.getValidEntityPropertyExpression(item);\r\n          if (dep && Array.isArray(dep) && dep.length > 0) {\r\n            // 此处必须加上主实体的名字来区分依赖的是实体还是其他类型的数据\r\n            dep.splice(0, 0, ENTITY_TEMPLATE);\r\n            deps.push(dep.join('/'));\r\n          }\r\n        });\r\n      }\r\n    } else {\r\n    }\r\n    return deps;\r\n  }\r\n\r\n}","import { IResolver } from \"./types\";\r\nconst CONTEXT_FUNCTIONS = ['GetContextParameter', 'GetSessionValue'];\r\nexport class StateDependencyResolver implements IResolver {\r\n  public resolve(expr: string): string[] {\r\n    const deps = [];\r\n    const regex = new RegExp(`DefaultFunction\\\\.(${CONTEXT_FUNCTIONS.join('|')})\\\\s*\\\\([^\\\\r\\\\n\\\\)]*\\\\)`, 'g');\r\n    const contextFunctions: RegExpMatchArray = expr.match(regex);\r\n    if (contextFunctions && contextFunctions.length > 0) {\r\n      // todo: 使用正则匹配时可能会因为参数中有逗号导致问题，后续使用ast解析\r\n      const argumentsRegex = /\\(([^\\r\\n\\)]*)\\)/;\r\n      contextFunctions.forEach((groupFunction: string) => {\r\n        const argumentMatchResult = groupFunction.match(argumentsRegex);\r\n        if (argumentMatchResult.length === 2) {\r\n          const argument = argumentMatchResult[1].trim().replace(/\\\"/g,'');\r\n          const dep = ['STATE~'];\r\n          dep.push(argument);\r\n          deps.push(dep.join('/'));\r\n        }\r\n      });\r\n    }\r\n    return deps;\r\n  }\r\n}","import { Injectable } from \"@angular/core\";\r\nimport { IResolver } from \"./types\";\r\n/**\r\n * 用户自定义参数解析器\r\n */\r\n@Injectable()\r\nexport class CommentDependencyResolver implements IResolver {\r\n  public resolve(expr: string): string[] {\r\n    const dependencies = [];\r\n    if (!expr || expr.length < 1) {\r\n      return dependencies;\r\n    }\r\n    const defineRegex = /\\/\\*\\*\\s*__define__\\((.*)\\)\\s*\\*\\//;\r\n    const defineMatchArray: RegExpMatchArray = expr.match(defineRegex);\r\n    if (defineMatchArray && defineMatchArray.length === 2) {\r\n      const defineString: string = defineMatchArray[1].trim();\r\n      let defineObject = null;\r\n      try {\r\n        defineObject = JSON.parse(defineString);\r\n      } catch (e) { console.warn(`自定义依赖解析失败：${defineString}`); }\r\n      if (defineObject && defineObject.hasOwnProperty('deps') && Array.isArray(defineObject['deps'])) {\r\n        dependencies.push(...defineObject['deps']);\r\n      }\r\n    }\r\n    return dependencies;\r\n  }\r\n}","import { Injectable, Injector } from \"@angular/core\";\r\nimport { CommentDependencyResolver } from \"./comment_dependency_resolver\";\r\nimport { ResolverRegistry } from \"./resolver_registry\";\r\nimport { IResolver } from \"./types\";\r\n\r\n@Injectable()\r\nexport class ResolveService {\r\n  constructor(private injector: Injector, private resolverRegistry: ResolverRegistry) { }\r\n  public resolve(expression: string) {\r\n    const deps: string[] = [];\r\n    if (!this.resolverRegistry || !this.resolverRegistry.resolvers || this.resolverRegistry.resolvers.length < 1) {\r\n      return;\r\n    }\r\n    // 优先使用用户自定义的依赖\r\n    const commentDependencyResolver = this.resolverRegistry.resolvers.find((resolver: IResolver) => resolver instanceof CommentDependencyResolver);\r\n    if (commentDependencyResolver) {\r\n      const commentDependencies = commentDependencyResolver.resolve(expression);\r\n      if (commentDependencies && Array.isArray(commentDependencies) && commentDependencies.length > 0) {\r\n        deps.push(...commentDependencies);\r\n      }\r\n    }\r\n    // 如果用户已经自定义了依赖，则不再计算\r\n    if (deps && deps.length > 0) {\r\n      return deps;\r\n    }\r\n    this.resolverRegistry.resolvers.forEach((resolver: IResolver) => {\r\n      // 再解析一次也可以，返回的依然是空数组\r\n      if (resolver instanceof CommentDependencyResolver) {\r\n        return;\r\n      }\r\n      const dependency = resolver.resolve(expression);\r\n      if (dependency && dependency.length > 0) {\r\n        deps.push(...dependency);\r\n      }\r\n    });\r\n    // 去重\r\n    return [...new Set(deps)];\r\n  }\r\n}","import { BindingData, BindingList } from \"../binding-data/index\";\r\nimport { DataPropGroup, DataPropInfo, DataTypeInfo } from \"../core/index\";\r\nimport { ENTITY_TEMPLATE, GROUP_FUNCTIONS } from \"../resolver/index\";\r\n\r\nexport class ExpressionUtil {\r\n  public static getGroupFunctionDependency(expr: string, entityTypeInfo: DataTypeInfo): string[] {\r\n    const deps = [];\r\n    // 获取聚合函数依赖项\r\n    const groupFunctionRegex = new RegExp(`DefaultFunction\\\\.(${GROUP_FUNCTIONS.join('|')})\\\\s*\\\\([^\\\\r\\\\n\\\\)]*\\\\)`, \"g\");\r\n    const groupFunctions: RegExpMatchArray = expr.match(groupFunctionRegex);\r\n    if (groupFunctions && groupFunctions.length > 0) {\r\n      // todo: 使用正则匹配时可能会因为参数中有逗号导致问题，后续使用ast解析\r\n      const argumentsRegex = /\\(([^\\r\\n\\)]*)\\)/;\r\n      groupFunctions.forEach((groupFunction: string) => {\r\n        const argumentMatchResult = groupFunction.match(argumentsRegex);\r\n        if (argumentMatchResult.length === 2) {\r\n          const argument = argumentMatchResult[1];\r\n          const args = argument.split(',').map(p => p.replace(/\\\"/g, ''));\r\n          if (args && args.length === 2) {\r\n            let item: any = args.join('.');\r\n            item = this.convertToNodeCode(item, entityTypeInfo).join('.');\r\n            item = item.substr(item.indexOf('.') + 1);\r\n            const dep = item.split('.');\r\n            dep.splice(0, 0, ENTITY_TEMPLATE);\r\n            deps.push(dep.join('/'));\r\n          } else {\r\n            throw new Error(`无法解析参数： ${JSON.stringify(argument)}`);\r\n          }\r\n        }\r\n      });\r\n    }\r\n    return deps;\r\n  }\r\n  /**\r\n   * 将voCode转换为前端nodeCode\r\n   * @param entityExpression like Entity.Child.p1\r\n   * @returns \r\n   */\r\n  public static convertToNodeCode(entityExpression: string, entityTypeInfo: DataTypeInfo): string[] {\r\n    // UserEntity.storys.p1\r\n    const nodeCodes = [];\r\n    if (entityTypeInfo && entityExpression.includes('.')) {\r\n      const entityExpressions = entityExpression.split('.') || [];\r\n      let dataTypeInfo = entityTypeInfo;\r\n      for (let index = 0; index < entityExpressions.length; index++) {\r\n        const prop = entityExpressions[index];\r\n        if (dataTypeInfo && dataTypeInfo.entityInfo && dataTypeInfo.entityInfo.nodeCode === prop || dataTypeInfo.entityInfo.originalCode === prop) {\r\n          // 第一个是主表code，不能转nodeCode\r\n          if (index === 0) {\r\n            nodeCodes.push(dataTypeInfo.entityInfo.originalCode);\r\n          } else {\r\n            nodeCodes.push(dataTypeInfo.entityInfo.nodeCode);\r\n          }\r\n\r\n          // 下一级可能为子表、对象或属性\r\n          const nextNodeCode = entityExpressions[index + 1];\r\n          if (!nextNodeCode) {\r\n            break;\r\n          }\r\n          const nextNodeCodePropInfo = dataTypeInfo.getPropInfoByName(nextNodeCode);\r\n          if (!nextNodeCodePropInfo) {\r\n            break;\r\n          }\r\n          // 下一级为子表或对象\r\n          if (nextNodeCodePropInfo.typeInfo) {\r\n            dataTypeInfo = nextNodeCodePropInfo.typeInfo;\r\n          }\r\n        } else if (dataTypeInfo && dataTypeInfo.getPropInfoByName(prop)) {\r\n          const dataPropInfo = dataTypeInfo.getPropInfoByName(prop);\r\n          nodeCodes.push(dataPropInfo.name);\r\n        } else {\r\n          //throw new Error(`错误的属性参数 ${entityExpression}`);\r\n          break;\r\n        }\r\n      }\r\n    }\r\n    return nodeCodes;\r\n  }\r\n  /**\r\n   * 找到元数据中所有实体路径\r\n   * @param dataTypeInfo \r\n   * @param results \r\n   * @param paths \r\n   */\r\n  public static getChildrenEntityPaths(dataTypeInfo: DataTypeInfo, results: any[], paths: string[] = []) {\r\n    const list: DataPropInfo[] = dataTypeInfo.getPropInfosByGroup(DataPropGroup.List);\r\n    if (list && list.length > 0) {\r\n      list.forEach((dataPropInfo: DataPropInfo) => {\r\n        if (paths.length === 0) {\r\n          results.push([dataPropInfo.name]);\r\n        }\r\n        const childrens: DataPropInfo[] = dataPropInfo.typeInfo.getPropInfosByGroup(DataPropGroup.List);\r\n        if (childrens && childrens.length > 0) {\r\n          paths.push(dataPropInfo.name);\r\n          childrens.forEach((dataPropInfo: DataPropInfo) => {\r\n            this.getChildrenEntityPaths(dataPropInfo.typeInfo, results, paths);\r\n          });\r\n        } else {\r\n          if (paths.length !== 0) {\r\n            paths.push(dataPropInfo.name);\r\n            results.push([...paths]);\r\n          }\r\n          paths.length = 0;\r\n        }\r\n      });\r\n    } else {\r\n      if (paths.length > 0) {\r\n        paths.push(dataTypeInfo.entityInfo.nodeCode);\r\n        results.push([...paths]);\r\n      }\r\n      paths.length = 0;\r\n    }\r\n  }\r\n  /**\r\n   * 获取指定绑定路径的当前行数据\r\n   * @param paths 绑定路径\r\n   * @param bindingData \r\n   * @returns \r\n   */\r\n  public static getCurrentRowByPaths(paths: string[], bindingData: BindingData): null | { [prop: string]: any } {\r\n    let result = null;\r\n    const bindingList: BindingList = bindingData.getValue(paths) as BindingList;\r\n    if (bindingList && bindingList.length > 0) {\r\n      let primaryValue = bindingList.currentItem.primaryKeyValue || null;\r\n      // 使用事件中的主键\r\n      // 主表或下级表新增，此时事件行就是当前行，无需处理\r\n      if (primaryValue) {\r\n        const bindingObject = bindingList.findById(primaryValue);\r\n        if (bindingObject) {\r\n          result = bindingObject.toJSON();\r\n        }\r\n      }\r\n    }\r\n    return result;\r\n  }\r\n  /**\r\n   * 从实体路径中获取级数最大的从表或从从表\r\n   * @param paths \r\n   * @returns \r\n   */\r\n  public static getAvailableChildrenPathsFromEntityPaths(paths: string[], entityTypeInfo: DataTypeInfo): string[] {\r\n    let nodeCodes = [];\r\n    paths = [...paths];\r\n    while (paths.length > 0) {\r\n      const dataPropInfo = entityTypeInfo.getPropInfoByPath(paths);\r\n      if (dataPropInfo && dataPropInfo.group === 'List') {\r\n        nodeCodes = paths;\r\n        break;\r\n      }\r\n      paths.pop();\r\n    }\r\n    return nodeCodes;\r\n  }\r\n  /**\r\n   * 从路径中获取绑定路径\r\n   * @param paths 路径\r\n   * @param entityTypeInfo entityTypeInfo\r\n   * @returns \r\n   */\r\n  public static getBindingPath(paths: string[], entityTypeInfo: DataTypeInfo) {\r\n    paths = this.getEntityPath(paths);\r\n    const entityPaths = this.getAvailableChildrenPathsFromEntityPaths(paths, entityTypeInfo);\r\n    return entityPaths;\r\n  }\r\n  public static getEntityPath(path: string[]): string[] {\r\n    const paths = path.filter((value: string, index: number) => {\r\n      if (index % 2 === 0 && value.includes(':')) {\r\n        return false;\r\n      } else {\r\n        return true;\r\n      }\r\n    });\r\n    return paths;\r\n  }\r\n}","import { DataPropGroup, DataPropInfo, DataTypeInfo } from \"../core\";\r\n\r\nexport class DataTypeInfoUtil {\r\n  /**\r\n   * 递归获取实体的所有下级实体编号\r\n   * @param dataTypeInfo \r\n   * @param results \r\n  */\r\n  public static getChildrenNodeCodes(dataTypeInfo: DataTypeInfo, results: any[] = []) {\r\n    const list: DataPropInfo[] = dataTypeInfo.getPropInfosByGroup(DataPropGroup.List);\r\n    if (list && list.length > 0) {\r\n      list.forEach((dataPropInfo: DataPropInfo) => {\r\n        results.push(dataPropInfo.name);\r\n        const childrens: DataPropInfo[] = dataPropInfo.typeInfo.getPropInfosByGroup(DataPropGroup.List);\r\n        if (childrens && childrens.length > 0) {\r\n          childrens.forEach((dataPropInfo: DataPropInfo) => {\r\n            results.push(dataPropInfo.name);\r\n            this.getChildrenNodeCodes(dataPropInfo.typeInfo, results);\r\n          });\r\n        }\r\n      });\r\n    }\r\n  }\r\n}\r\n","// tslint:disable: max-line-length\r\nimport { ElementRef, Injectable, Injector, OnDestroy } from '@angular/core';\r\nimport { AbstractControl } from '@angular/forms';\r\nimport { filter, takeUntil } from 'rxjs/operators';\r\nimport { FormControl, FormGroup, ValidatorFn } from '@angular/forms';\r\nimport { BigNumber } from 'bignumber.js';\r\nimport { MetadataUtil, PROP_METADATA } from '../metadata/index';\r\nimport { FrameContext } from '../frame/index';\r\nimport { BindingData, Change, ChangeType, BindingObject } from '../binding-data/index';\r\nimport { ValidateRule, Validation } from '../entity/validator/types';\r\nimport {\r\n  NG_FORM_CONTROL, NgFormControl,\r\n  NG_CHILD_FORM, NgChildForm,\r\n  NgValidateForm, NG_VALIDATE_FORM\r\n} from './decorators';\r\nimport { ControlValueConverter } from './control_value_converter';\r\nimport { DateUtil } from '../utils/index';\r\nimport { Translate } from '../i18n/translate';\r\nimport { ValidationTypes } from '../entity/validator/validation_types';\r\nimport { ValidationExecutor } from '../entity/validator/validation_executor';\r\nimport * as ValidatorJS from 'validator';\r\nimport { ValidationError } from '../entity';\r\nimport { DataPropInfo, DataTypeInfo, RunMode } from '../core';\r\nimport { TranslateService } from '../i18n/translate_service';\r\nimport { RuleType } from './types';\r\nimport { IDisposable } from '../core';\r\nimport { Subject } from 'rxjs';\r\nimport { parseISO } from 'date-fns';\r\n/**\r\n * 表单定义\r\n */\r\n@Injectable()\r\nclass Form extends FormGroup implements IDisposable, OnDestroy {\r\n\r\n  /**\r\n   * 存放所有实例的映射\r\n   */\r\n  static insMap: {\r\n    [formName: string]: Form\r\n  } = {};\r\n\r\n  /**\r\n   * 名称\r\n   */\r\n  public get formGroupName() {\r\n    return this.ngValidateForm ? this.ngValidateForm.formGroupName : '';\r\n  }\r\n\r\n  /**\r\n   * 是否启用表单验证\r\n   */\r\n  public get enableValidate() {\r\n    return this.ngValidateForm ? this.ngValidateForm.enableValidate : false;\r\n  }\r\n\r\n  public get translateService(): Translate {\r\n    return this.translate;\r\n  }\r\n  /**\r\n   * 排除的校验规则类型\r\n   */\r\n  // private excludeRuleTypes: { [propertyName: string]: string[] };\r\n\r\n  /**\r\n   * 上下文\r\n   */\r\n  protected frameContext: FrameContext;\r\n\r\n  /**\r\n   * 构造函数\r\n   */\r\n  constructor() {\r\n    super({}, null, null);\r\n    this.controlIdMap = {};\r\n    this.cardControls = {};\r\n    this.isShowPropMap = {};\r\n    this.destroy$ = new Subject<any>();\r\n    // this.excludeRuleTypes = {};\r\n  }\r\n  ngOnDestroy(): void {\r\n    this.dispose();\r\n  }\r\n  dispose(options?: any) {\r\n    if (this.destroy$) {\r\n      this.destroy$.next();\r\n      this.destroy$.complete();\r\n      this.destroy$ = null;\r\n    }\r\n    Form.insMap[this.constructor.name] = null;\r\n    this.frameContext = null;\r\n    this.bindingData = null;\r\n    this.ngChildForms = null;\r\n    this.metaDatas = null;\r\n    this.ngFormControls = {};\r\n    this.controls = {};\r\n    this.disposeValidation();\r\n  }\r\n\r\n  /**\r\n   * 绑定数据\r\n   */\r\n  protected bindingData: BindingData;\r\n  /**\r\n   * 绑定路径\r\n   */\r\n  protected bindingPath: string;\r\n  /**\r\n   * Form描述\r\n   */\r\n  private ngValidateForm: NgValidateForm;\r\n  /**\r\n   * 结构描述：FormControl\r\n   */\r\n  public ngFormControls: { [propName: string]: NgFormControl };\r\n  /**\r\n   * 元数据\r\n   */\r\n  public metaDatas: { [propName: string]: any };\r\n  /**\r\n   * 结构描述：FormGroup\r\n   */\r\n  private ngChildForms: { [propName: string]: NgChildForm };\r\n  /**\r\n   * 存放某条数据下的属性错误信息\r\n   */\r\n  private controlIdMap: {\r\n    [id: string]: {\r\n      [propName: string]: object\r\n    }\r\n  };\r\n  /**\r\n   * 用于存储属性错误\r\n   */\r\n  private cardControls: object;\r\n  private raisedByValidateEffector = false;\r\n  public isShowValidationMsg = false;\r\n\r\n  // 属性在页面上展示状态的map,key是html中使用的属性名\r\n  public isShowPropMap: {\r\n    [domPropertyName: string]: boolean\r\n  };\r\n\r\n  private translate: Translate;\r\n\r\n  private validatorJs = ValidatorJS.default;\r\n  private destroy$: Subject<any>;\r\n  /**\r\n   * 将formControl的错误信息更新到cardControl上\r\n   */\r\n  static updateErrors(propertyName, errorObj, id, value?, isGrid?) {\r\n    Object.keys(Form.insMap).forEach(key => {\r\n      const form = Form.insMap[key];\r\n      if (!form) {\r\n        return;\r\n      }\r\n      if (id) {\r\n        form.setControlValue(propertyName, value);\r\n      }\r\n      if (form.enableValidate) {\r\n        form.isFormValid(propertyName, errorObj, id, isGrid);\r\n      }\r\n    });\r\n  }\r\n  /**\r\n   * 设置dom属性为显示状态\r\n   * @param domPropertyName dom属性\r\n   */\r\n  public setIsShowmap(domPropertyName: string) {\r\n    this.isShowPropMap[domPropertyName] = true;\r\n  }\r\n\r\n  public setShowValidationMsg(flag: boolean) {\r\n    this.raisedByValidateEffector = false;\r\n    this.isShowValidationMsg = flag;\r\n  }\r\n\r\n  public setControlValue(key: string, value: any) {\r\n    const bindingObject: BindingObject = this.bindingData && this.bindingData.getObject() || null;\r\n    if (bindingObject && bindingObject.controlMap) {\r\n      bindingObject.controlMap[key] = this.getGridItemControl(key, value);\r\n    }\r\n  }\r\n  /**\r\n   * 根据dom属性名称获取错误信息\r\n   * @param domPropertyName dom属性名称\r\n   */\r\n  public getCardControlErrors(domPropertyName?: string): object {\r\n    this.setIsShowmap(domPropertyName);\r\n    return this.cardControls[domPropertyName] && this.cardControls[domPropertyName].errors;\r\n  }\r\n  /**\r\n   * 获取字段校验错误\r\n   * @param domPropertyName \r\n   * @returns \r\n   */\r\n  public getFormControlErrors(domPropertyName?: string) {\r\n    return this.cardControls[domPropertyName] && this.cardControls[domPropertyName].errors;\r\n  }\r\n  public getGridControlErrors(domPropertyName: string, id: string): object {\r\n    this.setIsShowmap(domPropertyName);\r\n    return this.controlIdMap[id] && this.controlIdMap[id][domPropertyName] && this.controlIdMap[id][domPropertyName]['errors'];\r\n  }\r\n\r\n  public isFormValid(propertyName?: string, errorObj?: object, id?: string, isGrid?: boolean): boolean {\r\n    let prefix = '';\r\n    // 如果校验信息是由表达式触发的，不处理\r\n    if (this.raisedByValidateEffector) {\r\n      return;\r\n    }\r\n    const isGridComponent = this.frameContext.frameComponent.isGridComponent;\r\n    if (isGridComponent !== undefined) {\r\n      isGrid = isGridComponent;\r\n    }\r\n    //拼接子表frontNodeCode\r\n    const bindingPaths = this.bindingPath.split('/').filter(p => p);\r\n    if (bindingPaths.length > 0) {\r\n      prefix = bindingPaths.join('.').concat('.');\r\n    }\r\n    // 界面上绑定的字段名\r\n    const domPropertyName = this.getDomPropertyNameByEntityProp(propertyName, prefix);\r\n    // 传了属性名，但却拿不到dom名称，说明当前组件中没有该字段对应的控件\r\n    if (propertyName && !domPropertyName) {\r\n      return true;\r\n    }\r\n    // 若界面上不存在当前属性（动态列），不进行验证\r\n    if (domPropertyName && !this.isShowPropMap[domPropertyName]) {\r\n      return true;\r\n    }\r\n    let isValid = true;\r\n    const bindingObject = this.bindingData.getObject();\r\n    const currentId = bindingObject.primaryKeyValue;\r\n    const isSubForm = this.bindingPath !== '/';\r\n    const bindingList = this.bindingData.getList();\r\n\r\n    // 子表单无数据时，保存时会有一条空数据阻碍验证，所以此处跳过只有一行的情况\r\n    if (isSubForm && bindingList.innerList.size === 0) {\r\n      return true;\r\n    }\r\n    // 无数据时不做校验\r\n    if (!currentId) {\r\n      return true;\r\n    }\r\n    // dataGrid修改时，根据id，创建formControl，并设置错误对象\r\n    if (id && domPropertyName) {\r\n      // if (this.controlIdMap[id] && Object.keys(this.controlIdMap[id]).length === 0) {\r\n      //   this.controlIdMap[id] = {};\r\n      // }\r\n      this.controlIdMap[id] = this.controlIdMap[id] || {};\r\n      this.controlIdMap[id][domPropertyName] = {\r\n        errors: errorObj\r\n      };\r\n    }\r\n\r\n    // 将grid的FormControl同步到界面展示用的controlIDMap中\r\n    // const currentBindingObject = bindingList.currentItem as BindingObject;\r\n    const currentBindingObject: BindingObject = bindingObject;\r\n\r\n    if (id && id !== currentId) {\r\n      return;\r\n    }\r\n\r\n    // 验证全部字段时，清空已有的错误信息\r\n    if (!propertyName && !id) {\r\n      currentBindingObject.controlMap = {};\r\n      this.controlIdMap = {};\r\n      this.cardControls = {};\r\n    }\r\n    Object.keys(this.controls).forEach((key) => {\r\n      if (this.isShowPropMap[key] !== true) {\r\n        return;\r\n      }\r\n      // 同步实体错误信息\r\n      if (key === domPropertyName) {\r\n        // 实体验证的信息直接赋值\r\n        if (errorObj && Object.keys(errorObj).length > 0) {\r\n          // 卡片的错误\r\n          if (!isGrid) {\r\n            // 实体层同步过来的错误，目前结构{ruleType:{name:'',value:'',originalErrors:[ValidationError]}}，其中name为校验失败的错误信息\r\n            // 遍历错误，将validator返回的错误信息国际化\r\n            Object.keys(errorObj).map((validType: any) => {\r\n              const validationError: ValidationError = errorObj[validType] && errorObj[validType]['error'] || null;\r\n              if (validationError) {\r\n                const validateRule: ValidateRule = validationError.rule;\r\n                const ngFormControl = this.getngFormControlByBinding(validateRule.field);\r\n                if (ngFormControl) {\r\n                  validateRule.property = ngFormControl.name || ngFormControl.defaultI18nValue;\r\n                  validateRule.targetId = ngFormControl.id;\r\n                  validateRule.targetName = this.formGroupName;\r\n                  // 修正校验必填表达式类型和多语资源中key不一致的问题\r\n                  const fixedValidType = validType === 'require' ? 'required' : validType;\r\n                  const messageTemplate = ValidationTypes.getMessage(fixedValidType);\r\n                  if (messageTemplate) {\r\n                    const invalidMessage = ValidationExecutor.replaceMessageSpecialTokens(messageTemplate, validateRule, ngFormControl.name);\r\n                    errorObj[validType]['name'] = invalidMessage;\r\n                  }\r\n                }\r\n                // todo: ngFormControl暂时不设置\r\n                // errorObj['name'] = this.getErrorByRuleType(validType, validateRule, null);\r\n              }\r\n            });\r\n            this.cardControls[key] = {\r\n              errors: errorObj\r\n            };\r\n          }\r\n        } else {\r\n          this.cardControls[key] = {};\r\n        }\r\n      }\r\n      if (this.controls[key] && this.controls[key].errors && Object.keys(this.controls[key].errors).length > 0) {\r\n        // 将错误同步到界面展示的位置\r\n        // 认为控件错误只包含错误类型，通过错误类型获取具体的错误信息\r\n        this.cardControls[key] = {\r\n          errors: {\r\n            ...this.cardControls[key] && this.cardControls[key].errors,\r\n            ...this.controls[key].errors\r\n          }\r\n        };\r\n        isValid = false;\r\n      }\r\n    });\r\n    // 处理只开启前端校验，未在BE上启用必填校验的情况\r\n    if (this.cardControls) {\r\n      Object.keys(this.cardControls).forEach(key => {\r\n        if (this.cardControls[key] && this.cardControls[key].errors) {\r\n          Object.keys(this.cardControls[key].errors).forEach(validType => {\r\n            if (typeof this.cardControls[key].errors[validType] !== 'object') {\r\n              // 获取对应的校验信息\r\n              const validateRules: ValidateRule | ValidateRule[] = this.ngFormControls[key].validRules || [];\r\n              const rules: ValidateRule[] = [].concat(validateRules);\r\n              const validateRule: ValidateRule = rules.find(item => item.type === validType);\r\n              if (validateRule) {\r\n                validateRule.targetName = this.formGroupName;\r\n                const messageTemplate = ValidationTypes.getMessage(validType);\r\n                const invalidMessage = ValidationExecutor.replaceMessageSpecialTokens(messageTemplate, validateRule, '');\r\n                this.cardControls[key].errors[key] = { value: this.controls[key] && this.controls[key].value || '', name: invalidMessage };\r\n              }\r\n            }\r\n          })\r\n        }\r\n      });\r\n    }\r\n    Object.keys(this.cardControls).forEach((key) => {\r\n      if (this.cardControls[key] && this.cardControls[key].errors && Object.keys(this.cardControls[key].errors).length > 0) {\r\n        isValid = false;\r\n      }\r\n    });\r\n    return isValid;\r\n  }\r\n  /**\r\n   * 更新表单错误信息\r\n   * @param errors 错误消息\r\n   */\r\n  public updateFormErrors(errors: { [domPropertyName: string]: { errors: { [ruleType: string]: { name: string, [prop: string]: any } } } }, forceShow: boolean = false, from: string = '') {\r\n    if (from && from === 'backend') {\r\n      this.clearBackendError();\r\n    }\r\n    // 原来是否已经显示错误，如果已经显示了则增加，否则替换\r\n    if (this.isShowValidationMsg === true || forceShow === true) {\r\n      this.isShowValidationMsg = true;\r\n      Object.keys(errors).forEach((key: string) => {\r\n        if (errors[key].errors && Object.keys(errors[key].errors).length > 0) {\r\n          // 如果控件本身没有错误，则直接使用外部传递过来的错误，否则合并错误\r\n          this.cardControls[key] = {\r\n            errors: {\r\n              ...this.cardControls[key] && this.cardControls[key].errors,\r\n              ...errors[key].errors\r\n            }\r\n          };\r\n        } else {\r\n          // 移除内存中的错误信息\r\n          this.cardControls[key] = {\r\n            errors: {}\r\n          };\r\n          // 重置控件错误信息\r\n          this.controls[key].setErrors(null);\r\n          this.controls[key].markAsTouched();\r\n        }\r\n      });\r\n    }\r\n  }\r\n  /**\r\n   * 清空后端消息\r\n   */\r\n  public clearBackendError() {\r\n    Object.keys(this.cardControls).forEach(key => {\r\n      const errors = this.cardControls[key] && this.cardControls[key].errors || null;\r\n      if (errors) {\r\n        Object.keys(errors).forEach(errorType => {\r\n          if (errorType && errorType.startsWith('backend-message-')) {\r\n            delete errors[errorType];\r\n          }\r\n        });\r\n        if (errors && Object.keys(errors).length === 0) {\r\n          delete this.cardControls[key].errors;\r\n        }\r\n      } else {\r\n        this.cardControls[key] = {};\r\n      }\r\n    });\r\n  }\r\n  /**\r\n   * 根据实体属性获取ngFormControl\r\n   * @param binding 控件绑定的实体属性名\r\n   */\r\n  private getngFormControlByBinding(binding: string) {\r\n    return Object.values(this.ngFormControls).find((ngFormControl: NgFormControl) => ngFormControl.binding && ngFormControl.binding === binding);\r\n  }\r\n  private disposeValidation() {\r\n    const properties = this.constructor[PROP_METADATA];\r\n    if (properties && Object.keys(properties).length > 0) {\r\n      Object.keys(properties).forEach((key: string) => {\r\n        const props = this.constructor[PROP_METADATA][key] as any[];\r\n        if (props && props.length > 0) {\r\n          props.forEach((item) => {\r\n            if (item.validRules && Array.isArray(item.validRules) && item.validRules.length > 0) {\r\n              item.validRules = item.validRules.filter(item => !(item.eval && typeof (item.eval) === 'function'));\r\n            }\r\n          });\r\n        }\r\n      });\r\n    }\r\n  }\r\n  /**\r\n   * 根据dom属性和校验类型获取错误信息\r\n   * @param domProperty dom属性\r\n   * @param validateRuleType 校验类型\r\n   */\r\n  private getErrorMessage(domProperty: string, validateRuleType: string) {\r\n    const formControl = this.ngFormControls[domProperty];\r\n    if (formControl) {\r\n      const validRules = formControl.validRules;\r\n      const rules = [];\r\n      if (!Array.isArray(validRules)) {\r\n        rules.push(validRules);\r\n      } else {\r\n        rules.push(...validRules);\r\n      }\r\n      const rule = rules.find(item => item.type === validateRuleType);\r\n      if (rule) {\r\n        const controlName = formControl.name;\r\n        const messageTemplate = ValidationTypes.getMessage(validateRuleType);\r\n        const message = ValidationExecutor.replaceMessageSpecialTokens(messageTemplate, rule, controlName);\r\n        return message;\r\n      }\r\n      return null;\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /**\r\n   * 初始化Form\r\n   * @param context 上下文\r\n   */\r\n  public init(bindingData: BindingData, bindingPath: string, frameContext?: FrameContext) {\r\n    this.frameContext = frameContext;\r\n    this.bindingData = bindingData;\r\n    this.bindingPath = bindingPath;\r\n    this.buildForm();\r\n    // @todo: 这种方式做key，如果脚本被压缩，存在风险\r\n    Form.insMap[this.constructor.name] = this;\r\n  }\r\n  /**\r\n   * 构造表单\r\n   */\r\n  public buildForm() {\r\n    this.collectMetadatas();\r\n    // this.createChildFormArrays();\r\n    this.createChildForms();\r\n    this.createControls();\r\n  }\r\n\r\n  /**\r\n   * 重置表单验证信息\r\n   */\r\n  public resetCardValidMsg(): void {\r\n    this.cardControls = {};\r\n    // 剔除 列表中新增后取消,删除的项对应的control信息\r\n    Object.keys(this.controlIdMap).forEach(id => {\r\n      if (!this.bindingData.getList().innerList.map(x => x.id).includes(id)) {\r\n        delete this.controlIdMap[id];\r\n      }\r\n    });\r\n    this.resetFormControls();\r\n    this.setShowValidationMsg(false);\r\n  }\r\n  /**\r\n   * 更新字段校验规则\r\n   * @param propertyName 属性名\r\n   * @param isRequired 是否必填\r\n   */\r\n  public updateFieldValidateRule(propertyName: string, isRequired: boolean) {\r\n    if (!propertyName) {\r\n      return;\r\n    }\r\n    const formControl: AbstractControl = this.controls[propertyName];\r\n\r\n    // 清空全部校验条件\r\n    if (formControl) {\r\n      formControl.clearValidators();\r\n      formControl.markAsUntouched();\r\n      formControl.markAsPristine();\r\n      formControl.setErrors([]);\r\n    }\r\n    // 动态必填场景时生成器不再在formControl上生成必填规则\r\n    // 因此validRules可能为空\r\n    const ngFormControl = this.ngFormControls[propertyName];\r\n    let validateRules: ValidateRule | ValidateRule[] = ngFormControl && ngFormControl.validRules || [];\r\n    if (!Array.isArray(validateRules)) {\r\n      validateRules = [validateRules];\r\n    }\r\n    const requiredRuleIndex = validateRules.findIndex((validateRule: ValidateRule) => validateRule.type === ValidationTypes.REQUIRED);\r\n    if (isRequired) {\r\n      // 必填但控件没有必填规则，添加必填规则\r\n      if (requiredRuleIndex == -1) {\r\n\r\n        const validateRule: ValidateRule = { type: ValidationTypes.REQUIRED, constraints: [true] };\r\n        // 扩展属性，以生成正确的错误提示\r\n        const displayFieldName = ngFormControl && (ngFormControl.name || ngFormControl.defaultI18nValue) || '';\r\n        validateRule.targetId = ngFormControl && ngFormControl.id || null;\r\n        validateRule.targetName = this.formGroupName;\r\n        validateRule.property = displayFieldName;\r\n        validateRule.field = ngFormControl && ngFormControl.binding;\r\n        validateRules.push(validateRule);\r\n      }\r\n    } else {\r\n      // 非必填场景，如果有必填规则，移除\r\n      if (requiredRuleIndex !== -1) {\r\n        validateRules.splice(requiredRuleIndex, 1);\r\n      }\r\n    }\r\n    // 整理校验规则\r\n    const validators: ValidatorFn[] = [];\r\n    Array.prototype.forEach.call(validateRules, ((ruleObj: ValidateRule) => {\r\n      const validateFn = this.getValidatorByRuleObj(ruleObj, this.ngFormControls[propertyName]);\r\n      if (validateFn) {\r\n        validators.push(validateFn);\r\n      }\r\n    }));\r\n    this.ngFormControls[propertyName].validRules = validateRules;\r\n    this.controls[propertyName].setValidators(validators);\r\n  }\r\n  public addFieldValidateRule(propertyName: string, message: string, expressionId: string, ruleType: RuleType) {\r\n    const formControl: AbstractControl = this.controls[propertyName];\r\n    if (formControl) {\r\n      // 清空全部校验条件\r\n      formControl.setErrors(null);\r\n    }\r\n    const ngFormControl = this.ngFormControls[propertyName];\r\n    let validateRules = this.ngFormControls[propertyName].validRules;\r\n    if (!validateRules) {\r\n      validateRules = [];\r\n    }\r\n    if (!Array.isArray(validateRules)) {\r\n      validateRules = [validateRules];\r\n    }\r\n    const index = validateRules.findIndex((rule: ValidateRule) => rule && rule.expressionId === expressionId);\r\n    if (index !== -1) {\r\n      validateRules.splice(index, 1);\r\n    }\r\n    const bindingPath = this.frameContext.viewModel.bindingPath;\r\n    const bindingPaths = bindingPath.split('/').filter(p => p);\r\n    let fieldName = propertyName;\r\n    if (bindingPaths.length !== 0) {\r\n      const prefix = bindingPaths.join('/');\r\n      const binding = ngFormControl.binding || '';\r\n      const property = binding.split('.').join('/');\r\n      fieldName = `${prefix}/${property}`;\r\n    }\r\n    const context = this.frameContext;\r\n    const validateRule: ValidateRule = {\r\n      type: ruleType,\r\n      message: message,\r\n      expressionId: expressionId,\r\n      constraints: [],\r\n      bindingPath: bindingPaths.join('/'),\r\n      eval: function (options?: any) {\r\n        return context.viewModel.expression.validate(expressionId, options);\r\n      }\r\n    };\r\n    validateRules.push(validateRule);\r\n    this.ngFormControls[propertyName].validRules = validateRules;\r\n    // if (this.ngFormControls[propertyName] && validateRules.length > 0) {\r\n    //   const validators: ValidatorFn[] = [];\r\n    //   Array.prototype.forEach.call(validateRules, ((ruleObj: ValidateRule) => {\r\n    //     const validateFn = this.getValidatorByRuleObj(ruleObj, this.ngFormControls[propertyName]);\r\n    //     if (validateFn) {\r\n    //       validators.push(validateFn);\r\n    //     }\r\n    //   }));\r\n    //   this.controls[propertyName].setValidators(validators);\r\n    // }\r\n  }\r\n  /**\r\n   * 根据规则对象生成validator\r\n   * @param ruleObj: ValidateRule\r\n   */\r\n  private getValidatorByRuleObj(ruleObj: ValidateRule, ngFormControl: NgFormControl): ValidatorFn {\r\n    const { type, constraints = [], message = null } = ruleObj;\r\n    const displayText = ngFormControl.name || ngFormControl.defaultI18nValue || '';\r\n    const ruleHandlerObj = {\r\n      required: (control: AbstractControl): { [key: string]: any } | null => {\r\n        const value = control.value;\r\n        let isValid = value !== '' && value !== null && value !== undefined && value !== '0001-01-01' && value !== '0001-01-01 00:00:00' && value !== '0001-01-01T00:00:00';\r\n        const parentPaths = this.bindingPath.split('/').filter(p => p);\r\n        const controlPaths = ngFormControl.binding.split('.');\r\n        const paths = parentPaths.concat(controlPaths);\r\n        const propInfo = this.getPropInfoByPath(paths);\r\n        const isMultiLangInput = propInfo && propInfo.metadataInfo.enableMultiLangInput;\r\n        if (isMultiLangInput) {\r\n          const currentLanguage = TranslateService.getCurrentLanguage();\r\n          const currentLangValue = value && value[currentLanguage];\r\n          isValid = currentLangValue !== '' && currentLangValue !== null && currentLangValue !== undefined && currentLangValue !== '0001-01-01' && currentLangValue !== '0001-01-01 00:00:00' && currentLangValue !== '0001-01-01T00:00:00';\r\n        }\r\n        const messageTemplate = ValidationTypes.getMessage(ValidationTypes.REQUIRED);\r\n        const invalidMessage = ValidationExecutor.replaceMessageSpecialTokens(messageTemplate, ruleObj, control.value);\r\n        if (isValid && control.errors && control.errors.required) {\r\n          // 修复帮助映射早于控件赋值导致汇总错误消息时帮助必填错误未被清空的问题\r\n          delete control.errors.required;\r\n          this.isFormValid(paths.join('.'));\r\n        }\r\n        return isValid ? null : { required: { value: control.value, name: invalidMessage } };\r\n      },\r\n      maxLength: (control: AbstractControl): { [key: string]: any } | null => {\r\n        const isInValid = control.value && control.value.toString().length > constraints[0];\r\n        const messageTemplate = ValidationTypes.getMessage(ValidationTypes.MAX_LENGTH);\r\n        const invalidMessage = ValidationExecutor.replaceMessageSpecialTokens(messageTemplate, ruleObj, control.value);\r\n        return isInValid ? { maxLength: { value: control.value, name: invalidMessage } } : null;\r\n      },\r\n      minLength: (control: AbstractControl): { [key: string]: any } | null => {\r\n        const isInValid = control.value && control.value.toString().length < constraints[0];\r\n        const messageTemplate = ValidationTypes.getMessage(ValidationTypes.MAX_LENGTH);\r\n        const invalidMessage = ValidationExecutor.replaceMessageSpecialTokens(messageTemplate, ruleObj, control.value);\r\n        return isInValid ? { minLength: { value: control.value, name: invalidMessage } } : null;\r\n      },\r\n      minValue: (control: AbstractControl): { [key: string]: any } | null => {\r\n        let isInValid = false;\r\n        let invalidMessage = '';\r\n        // 这里只做最小值判断，如果用户未输入则不应该做判断\r\n        if (control.value === null || control.value === undefined) {\r\n          return null;\r\n        }\r\n        if (typeof control.value === 'number' && typeof constraints[0] === 'number') {\r\n          isInValid = control.value < constraints[0];\r\n          const messageTemplate = ValidationTypes.getMessage(ValidationTypes.MINVALUE);\r\n          invalidMessage = ValidationExecutor.replaceMessageSpecialTokens(messageTemplate, ruleObj, control.value);\r\n          // invalidMessage = `${ngFormControl.name}的值不应小于${constraints[0]}`;\r\n        } else if (ngFormControl && ngFormControl.bigNumber === true) {\r\n          // 大数\r\n          const minValue = new BigNumber(constraints[0]);\r\n          const value = new BigNumber(control.value);\r\n          isInValid = minValue.isGreaterThan(value);\r\n          const messageTemplate = ValidationTypes.getMessage(ValidationTypes.MINVALUE);\r\n          invalidMessage = ValidationExecutor.replaceMessageSpecialTokens(messageTemplate, ruleObj, control.value);\r\n        } else {\r\n          const messageTemplate = ValidationTypes.getMessage(ValidationTypes.MIN_DATE);\r\n          // 假定为日期\r\n          // 不管控件的值为什么，只要条件不存咋或是null或0或undefined或\"\"，则不对比大小，无意义\r\n          if (!constraints || constraints.length < 1 || !constraints[0]) {\r\n            return null;\r\n          }\r\n          if (control.value instanceof Date) {\r\n            isInValid = control.value < parseISO(constraints[0]);\r\n          } else {\r\n            isInValid = parseISO(control.value) < parseISO(constraints[0]);\r\n          }\r\n          invalidMessage = ValidationExecutor.replaceMessageSpecialTokens(messageTemplate, ruleObj, control.value);\r\n        }\r\n        return isInValid ? { minValue: { value: control.value, name: invalidMessage } } : null;\r\n      },\r\n      maxValue: (control: AbstractControl): { [key: string]: any } | null => {\r\n        let isInValid = false;\r\n        let invalidMessage = '';\r\n        if (control.value === null || control.value === undefined) {\r\n          return null;\r\n        }\r\n        if (typeof control.value === 'number' && typeof constraints[0] === 'number') {\r\n          isInValid = control.value > constraints[0];\r\n          const messageTemplate = ValidationTypes.getMessage(ValidationTypes.MAXVALUE);\r\n          invalidMessage = ValidationExecutor.replaceMessageSpecialTokens(messageTemplate, ruleObj, control.value);\r\n          // invalidMessage = `${ngFormControl.name}的值不应大于${constraints[0]}`;\r\n        } else if (ngFormControl && ngFormControl.bigNumber === true) {\r\n          // 大数\r\n          const maxValue = new BigNumber(constraints[0]);\r\n          const value = new BigNumber(control.value);\r\n          isInValid = maxValue.isLessThan(value);\r\n          const messageTemplate = ValidationTypes.getMessage(ValidationTypes.MAXVALUE);\r\n          invalidMessage = ValidationExecutor.replaceMessageSpecialTokens(messageTemplate, ruleObj, control.value);\r\n        } else {\r\n          // 假定为日期\r\n          const messageTemplate = ValidationTypes.getMessage(ValidationTypes.MAX_DATE);\r\n          if (control.value instanceof Date) {\r\n            isInValid = control.value > new Date(constraints[0]);\r\n            // invalidMessage = `${ngFormControl.name}的值不应晚于${constraints[0]}`;\r\n          } else {\r\n            isInValid = new Date(control.value) > new Date(constraints[0]);\r\n            // invalidMessage = `${ngFormControl.name}的值不应早于${constraints[0]}`;\r\n          }\r\n          invalidMessage = ValidationExecutor.replaceMessageSpecialTokens(messageTemplate, ruleObj, control.value);\r\n        }\r\n        return isInValid ? { maxValue: { value: control.value, name: invalidMessage } } : null;\r\n      },\r\n      exclude: (control: AbstractControl): { [key: string]: any } | null => {\r\n        const isValid = typeof control.value === 'string' && !this.validatorJs.contains(control.value, constraints[0]);\r\n        const messageTemplate = ValidationTypes.getMessage(ValidationTypes.EXCLUDE);\r\n        const invalidMessage = ValidationExecutor.replaceMessageSpecialTokens(messageTemplate, ruleObj, control.value);\r\n        return isValid ? null : { exclude: { value: control.value, name: invalidMessage } };\r\n      },\r\n      matches: (control: AbstractControl): { [key: string]: any } | null => {\r\n        const value = (control.value === null || control.value === undefined) ? '' : control.value.toString();\r\n        const isValid = value === '' ? true : this.validatorJs.matches(value, constraints[0]);\r\n        let invalidMessage = message;\r\n        if (!invalidMessage) {\r\n          const messageTemplate = ValidationTypes.getMessage(ValidationTypes.MATCHES);\r\n          invalidMessage = ValidationExecutor.replaceMessageSpecialTokens(messageTemplate, ruleObj, control.value);\r\n        }\r\n\r\n        return isValid ? null : { matches: { value: control.value, name: invalidMessage } }\r\n      }\r\n    };\r\n    return ruleHandlerObj[type];\r\n  }\r\n\r\n  /**\r\n   * 搜集属性装饰器\r\n   */\r\n  private collectMetadatas() {\r\n    this.ngValidateForm = this.frameContext.metadata.form ? MetadataUtil.translateMetadataByName(this.frameContext.metadata.form, this.translateService, ['formGroupName']) :\r\n      MetadataUtil.getClassMetadataByNameWithTranslate(this.constructor, NG_VALIDATE_FORM,\r\n        this.translateService, ['formGroupName']);\r\n    this.ngFormControls = this.collectionFormControlMetadats(this.frameContext.metadata.formControls);\r\n    this.ngChildForms = this.frameContext.metadata.subForms || MetadataUtil.getPropsMetadatasByName(this.constructor, NG_CHILD_FORM);\r\n  }\r\n\r\n  private collectionFormControlMetadats(preloadMetadata: { [propName: string]: NgFormControl } = null): { [propName: string]: NgFormControl } {\r\n    const metadatas = preloadMetadata ? MetadataUtil.translateMetadataByName(preloadMetadata, this.translateService, ['name']) :\r\n      MetadataUtil.getPropsMetadatasByNameWithTranslate(this.constructor, NG_FORM_CONTROL, this.translateService, ['name']);\r\n    // 向验证规则中附加表单信息，用于显示验证提示。\r\n    if (metadatas) {\r\n      Object.keys(metadatas).forEach((propName: string) => {\r\n        const ngFormControl = metadatas[propName];\r\n        const displayFieldName = ngFormControl.name || ngFormControl.defaultI18nValue || '';\r\n        const formControlId = ngFormControl.id;\r\n        if (Array.isArray(ngFormControl.validRules)) {\r\n          ngFormControl.validRules.forEach((validationRule: ValidateRule) => {\r\n            validationRule.targetId = formControlId;\r\n            validationRule.targetName = this.formGroupName;\r\n            validationRule.property = displayFieldName;\r\n            validationRule.field = ngFormControl.binding;\r\n\r\n          });\r\n        }\r\n      });\r\n    }\r\n    return metadatas;\r\n  }\r\n\r\n  // 获取grid中每条数据的formControl\r\n  getGridItemControl(propName: string, value: any) {\r\n    const createControlFromRules = propertyName => {\r\n      const validators = [];\r\n      // 设置form中定义的验证规则\r\n      if (this.ngFormControls[propertyName] && Array.isArray(this.ngFormControls[propertyName].validRules)) {\r\n        Array.prototype.forEach.call(this.ngFormControls[propertyName].validRules, ((ruleObj) => {\r\n          const validateFn = this.getValidatorByRuleObj(ruleObj, this.ngFormControls[propertyName]);\r\n          if (validateFn) {\r\n            validators.push(validateFn);\r\n          }\r\n        }));\r\n      }\r\n      return new FormControl(value, { validators: validators, updateOn: 'blur' });\r\n    };\r\n    return createControlFromRules(propName);\r\n  }\r\n\r\n  // 根据实体属性名获取界面绑定的属性名\r\n  getDomPropertyNameByEntityProp(propertyName: string, prefix: string = ''): string {\r\n    let domPropertyName = '';\r\n    Object.keys(this.ngFormControls).forEach(key => {\r\n      const binding = `${prefix}${this.ngFormControls[key].binding}`;\r\n      if (binding === propertyName) {\r\n        domPropertyName = key;\r\n      }\r\n    });\r\n    return domPropertyName;\r\n  }\r\n\r\n  /**\r\n   * 创建FormControl\r\n   */\r\n  createControls() {\r\n    Object.keys(this.ngFormControls).forEach((propName: string) => {\r\n      const ngFormControl = this.ngFormControls[propName];\r\n      const validators: ValidatorFn[] = [];\r\n\r\n      // 设置form中定义的验证规则\r\n      if (Array.isArray(this.ngFormControls[propName].validRules)) {\r\n        Array.prototype.forEach.call(this.ngFormControls[propName].validRules, (ruleObj => {\r\n          const validateFn = this.getValidatorByRuleObj(ruleObj, this.ngFormControls[propName]);\r\n          if (validateFn) {\r\n            validators.push(validateFn);\r\n          }\r\n        }));\r\n      }\r\n\r\n      const updateOn = ngFormControl.updateOn ? ngFormControl.updateOn : 'blur';\r\n      const control = new FormControl(null, { validators: validators, updateOn: updateOn });\r\n      if (ngFormControl.binding) {\r\n        this.setUpBindingDataPipeline(control, ngFormControl.binding, ngFormControl.valueConverter);\r\n      }\r\n      this.controls[propName] = control;\r\n      this[propName] = control;\r\n    });\r\n  }\r\n\r\n  /**\r\n   * 创建FormGroup\r\n   */\r\n  createChildForms() {\r\n    Object.keys(this.ngChildForms).forEach((propName: string) => {\r\n      const ngFormGroup = this.ngChildForms[propName];\r\n\r\n      // 构造子Form\r\n      const formGroup = new ngFormGroup.formType();\r\n      formGroup.init(this.bindingData, this.bindingPath, this.frameContext);\r\n\r\n      this.controls[propName] = formGroup;\r\n      this[propName] = formGroup;\r\n    });\r\n  }\r\n  /*\r\n  * 新增FormControls\r\n   */\r\n  addControls(column: any, converter?: ControlValueConverter) {\r\n\r\n    const updateOn = column && column.editor && column.editor.updateOn ? column.editor.updateOn : 'blur';\r\n    const formControl = new FormControl('', { updateOn: updateOn });\r\n    const fieldPath = column.dataField;\r\n\r\n    // 日期格式  需要格式化\r\n    // this.setUpBindingDataPipeline(formControl, fieldPath, converter);\r\n    if (column.editor && column.editor.binding) {\r\n      this.setUpBindingDataPipeline(formControl, fieldPath, converter);\r\n      this.controls[column.editor.binding.path] = formControl;\r\n      this[column.editor.binding.path] = formControl;\r\n    }\r\n  }\r\n\r\n\r\n  /**\r\n   * 搭建control和table之间的通道\r\n   * @param control 控件\r\n   * @param bindingFieldPath 绑定的字段名\r\n   */\r\n  private setUpBindingDataPipeline(control: FormControl, bindingFieldPath, converter?: ControlValueConverter) {\r\n\r\n    if (!this.bindingData) {\r\n      throw Error('当前组件上下文中找不到BindingData，请检查！');\r\n    }\r\n\r\n    // 如果converter存在，则写入上下文，Converter中可能会需要从injector中获取当前语言信息\r\n    // __FRAME_CONTEXT__ 未使用\r\n    /*if (converter) {\r\n      converter['__FRAME_CONTEXT__'] = this.frameContext;\r\n    }*/\r\n\r\n    // 将bindignPath与bindingFieldPath合并\r\n    if (this.bindingPath.length > 1) {\r\n      bindingFieldPath = this.bindingPath.substr(1).replace(/\\//g, '.') + '.' + bindingFieldPath;\r\n    }\r\n    const bindingPaths: string[] = bindingFieldPath.split('.');\r\n    const propertyName = bindingPaths[bindingPaths.length - 1];\r\n    // 设置初始值\r\n    const initValue = this.getValueFromBindingData(bindingPaths, converter);\r\n    control.setValue(initValue);\r\n\r\n    // 设置初始值\r\n\r\n    // BindingData => control\r\n    this.bindingData.changes.pipe(takeUntil(this.destroy$)).pipe(filter((change: Change) => {\r\n      const bindingObject = this.bindingData.getObject();\r\n      const changePath = change.path.join('.');\r\n      if (change.isUdt) {\r\n        return changePath === bindingFieldPath;\r\n      }\r\n      if (change.type === ChangeType.ValueChanged) {\r\n        // path完全匹配\r\n        return changePath === bindingFieldPath;\r\n      } else if (change.type === ChangeType.Load || change.type === ChangeType.SelectionChanged || change.type === ChangeType.Remove || change.type === ChangeType.Update) {\r\n        // 对于ObjectChanged、SelectionChanged，匹配到父级\r\n        const changePathWithDot = changePath === '' ? changePath : changePath + '.';\r\n        // 主表新增或切换时，重置错误信息\r\n        if (change && change.type === ChangeType.Load) {\r\n          this.resetCardValidMsg();\r\n        }\r\n        return bindingFieldPath.indexOf(changePathWithDot) === 0;\r\n      } else if (change.type === ChangeType.UpdateErrors) {\r\n        if (changePath === bindingFieldPath) {\r\n          this.cardControls[propertyName] = this.cardControls[propertyName] || {};\r\n          if (bindingFieldPath && this.controls[propertyName]) {\r\n            if (bindingObject.primaryKeyValue === change.id) {\r\n              this.cardControls[propertyName].errors = change.errors;\r\n            } else {\r\n              // 只更新当前行的错误提示信息，不是当前行的不处理，放到最终的实体校验里面\r\n              // this.cardControls[propertyName].errors = null;\r\n              // this.isFormValid(bindingFieldPath);\r\n            }\r\n          }\r\n          // 没有错误时\r\n          if (!change.path || !bindingFieldPath || !change.errors) {\r\n            this.cardControls[propertyName].errors = null;\r\n            this.isFormValid(bindingFieldPath);\r\n          }\r\n          return false;\r\n        }\r\n      } else {\r\n        return false;\r\n      }\r\n    })).subscribe((change: Change) => {\r\n      let fullEntityProp = propertyName;\r\n      // udt字段展示时需要将父级属性名和自身属性名用'_'连接\r\n      let pathPrefix = '';\r\n      if (change.isUdt) {\r\n        if (change.isGrid) {\r\n          // grid 将从表主字段去除\r\n          change.path.shift();\r\n        }\r\n        if (change.path.length) {\r\n          pathPrefix = change.path.join('.');\r\n        }\r\n        fullEntityProp = pathPrefix;\r\n      }\r\n\r\n      const value = this.bindingData.getValue(bindingPaths, false);\r\n      const newControlValue = converter ? converter.convertFrom(value) : value;\r\n      // 设置FormControl\r\n      const domPropName = this.getDomPropertyNameByEntityProp(fullEntityProp);\r\n      this.cardControls[domPropName] = this.cardControls[domPropName] || {};\r\n      if (change.errors) {\r\n        this.cardControls[domPropName].errors = change.errors;\r\n      }\r\n      // dataGrid保存时，根据id，创建formControl，并设置错误对象\r\n      if (change.id) {\r\n        if (this.controlIdMap[change.id] && Object.keys(this.controlIdMap[change.id]).length === 0) {\r\n          this.controlIdMap[change.id] = {};\r\n        }\r\n        this.controlIdMap[change.id] = this.controlIdMap[change.id] || {};\r\n        if (change.errors) {\r\n          this.controlIdMap[change.id][domPropName] = {\r\n            errors: change.errors\r\n          };\r\n        }\r\n      }\r\n      // 如果和控件上的值一样，则不再更新控件的值\r\n      if (JSON.stringify(control.value) === JSON.stringify(newControlValue)) {\r\n        return;\r\n      }\r\n\r\n      // 正则判断是否为日期\r\n      control.setValue(newControlValue);\r\n\r\n    });\r\n\r\n    // control => BindingData\r\n    control.valueChanges.pipe(takeUntil(this.destroy$)).subscribe((value: any) => {\r\n      const oldBindingValue = this.bindingData.getValue(bindingPaths);\r\n      // 如果是日期，比较年月日是否相等，相等则不重新赋值\r\n      if (value && value.constructor && value.constructor.name === 'Date') {\r\n        const isValidDate = !isNaN(value);\r\n        if (!isValidDate) {\r\n          return;\r\n        }\r\n        if (oldBindingValue && converter) {\r\n          const oldValue = converter.convertFrom(oldBindingValue);\r\n\r\n          if (this.compareDate(value, oldValue) === true) {\r\n            return;\r\n          }\r\n        }\r\n      }\r\n\r\n      // 如果是日期，比较年月日是否相等，相等则不重新赋值\r\n      if (this.isDate(converter) === true) {\r\n        if (DateUtil.isEqual(value, oldBindingValue) === true) {\r\n          return;\r\n        }\r\n      }\r\n\r\n      // 如果和BindingData上的值和控件最新的值一样，则不再更新BindingData\r\n      const newBindingValue = converter ? converter.convertTo(value) : value;\r\n      if (JSON.stringify(oldBindingValue) === JSON.stringify(newBindingValue)) {\r\n        return;\r\n      }\r\n      // if (!this.isFormValid(propertyName, null, null, false)) {\r\n      //   const errors = this.cardControls[propertyName] && this.cardControls[propertyName].errors || {};\r\n      //   this.bindingData.setValue(bindingPaths, newBindingValue, false, true, errors);\r\n      // } else {\r\n      this.clearBackEndMessages(propertyName);\r\n      const emitEventToView = this.frameContext.appContext.runMode === RunMode.highSpeed;\r\n      this.bindingData.setValue(bindingPaths, newBindingValue, emitEventToView, true, null, { frameContext: this.frameContext });\r\n      //}\r\n    });\r\n  }\r\n\r\n  /**\r\n   * 判断是否是日期字段\r\n   * 1、目前没有办法判断一个字段是否是日期，只能根据Converter来判断；\r\n   * 2、Devkit不能依赖KendoBinding，不能直接判断DateConverter；\r\n   * 3、不能使用constructor.name,压缩后name变了；\r\n   * 4、暂时根据format属性来判断，一旦其他Converter有format，则判断失效，暂时没有这种情况\r\n   * @todo\r\n   * 为日期字段添加注解，根据注解来判断\r\n   */\r\n  private isDate(converter: ControlValueConverter): boolean {\r\n    let isDateConverter = false;\r\n\r\n    // if (converter && converter.constructor && converter.constructor.name === 'DateConverter') {\r\n    //   isDateConverter = true;\r\n    // }\r\n    if (converter && converter.hasOwnProperty('format') === true) {\r\n      isDateConverter = true;\r\n    }\r\n    return isDateConverter;\r\n  }\r\n\r\n  /**\r\n   * 比较日期（只比较年月日）\r\n   */\r\n  compareDate(srcDate: Date, dstDate: Date) {\r\n    if (!srcDate || !dstDate) {\r\n      return srcDate === dstDate;\r\n    }\r\n    const isEqual =\r\n      srcDate.getFullYear() === dstDate.getFullYear()\r\n      && srcDate.getMonth() === dstDate.getMonth()\r\n      && srcDate.getDate() === dstDate.getDate()\r\n      && srcDate.getHours() === dstDate.getHours()\r\n      && srcDate.getMinutes() === dstDate.getMinutes()\r\n      && srcDate.getSeconds() === dstDate.getSeconds();\r\n    return isEqual;\r\n  }\r\n\r\n  private getPropInfoByPath(path: Array<string>): DataPropInfo {\r\n    const entityType = this.frameContext && this.frameContext.repository.entityType || null;\r\n    if (entityType) {\r\n      const dataTypeInfo = new DataTypeInfo(entityType);\r\n      const propInfo: DataPropInfo = dataTypeInfo.getPropInfoByPath(path);\r\n      return propInfo;\r\n      // const isMultiLangInput = propInfo.metadataInfo.enableMultiLangInput;\r\n    }\r\n    return null;\r\n  }\r\n  /**\r\n   * 从BindingData中获取指定路径的值\r\n   */\r\n  private getValueFromBindingData(bindingPaths: string[], converter?: ControlValueConverter) {\r\n    const value = this.bindingData.getValue(bindingPaths);\r\n    const converteredValue = converter ? converter.convertFrom(value) : value;\r\n    return converteredValue;\r\n  }\r\n\r\n  public getEntityValueChangingListeners(): { [property: string]: string } {\r\n    const listeners = {};\r\n    Object.keys(this.ngFormControls).forEach((propName) => {\r\n      const ngFormControl = this.ngFormControls[propName];\r\n      if (ngFormControl.valueChanging) {\r\n        listeners[ngFormControl.binding] = ngFormControl.valueChanging;\r\n      }\r\n    });\r\n    return listeners;\r\n  }\r\n\r\n  public getEntityValueChangedListeners(): { [property: string]: string } {\r\n    const listeners = {};\r\n    Object.keys(this.ngFormControls).forEach((propName) => {\r\n      const ngFormControl = this.ngFormControls[propName];\r\n      if (ngFormControl.valueChanged) {\r\n        listeners[ngFormControl.binding] = ngFormControl.valueChanged;\r\n      }\r\n    });\r\n    return listeners;\r\n  }\r\n  /**\r\n   * 获取所有的前端验证规则\r\n   * @description\r\n   * 返回的校验规则为Map<string,ValidateRule>,其中key为全路径，从bindingPath开始到实体属性，以/分隔\r\n   */\r\n  public getValidationRules(): Map<string, ValidateRule[]> {\r\n    const validatoinRules = new Map<string, ValidateRule[]>();\r\n    let parentPath = this.bindingPath;\r\n    if (parentPath.length && parentPath === '/') {\r\n      parentPath = '';\r\n    }\r\n    Object.keys(this.ngFormControls).forEach((propName: string) => {\r\n      // const fieldName = `${parentPath}/${propName}`;\r\n\r\n      if (this.isShowPropMap[propName] === true || Object.keys(this.isShowPropMap).length === 0) {\r\n        const ngFormControl = this.ngFormControls[propName];\r\n        const displayFieldName = ngFormControl.name || ngFormControl.defaultI18nValue || '';\r\n        const bindingPathArray = ngFormControl.binding ? ngFormControl.binding.split('.') : [propName];\r\n        const fieldNameArray = [parentPath, ...bindingPathArray];\r\n        const fieldName = fieldNameArray.join('/');\r\n        if (Array.isArray(ngFormControl.validRules) && ngFormControl.validRules.length > 0) {\r\n          let validationrulesToAdd = [...ngFormControl.validRules];\r\n          // if (this.excludeRuleTypes && this.excludeRuleTypes[propName] && this.excludeRuleTypes[propName].length > 0) {\r\n          //   validationrulesToAdd = ngFormControl.validRules.filter((item) => !this.excludeRuleTypes[propName].includes(item.type));\r\n          // }\r\n          validationrulesToAdd.forEach((validationRule: ValidateRule) => {\r\n            validationRule.targetId = ngFormControl.id;\r\n            validationRule.targetName = this.formGroupName;\r\n            validationRule.property = displayFieldName;\r\n            validationRule.field = ngFormControl.binding;\r\n            validationRule.fullPath = fieldName;\r\n            if (this.frameContext) {\r\n              validationRule.frameContext = this.frameContext;\r\n            }\r\n          });\r\n          validatoinRules.set(fieldName, validationrulesToAdd);\r\n        } else {\r\n          validatoinRules.set(fieldName, [{\r\n            type: 'setDisplayInfo',\r\n            targetId: ngFormControl.id,\r\n            targetName: this.formGroupName,\r\n            property: displayFieldName,\r\n            fullPath: fieldName,\r\n            frameContext: this.frameContext\r\n          }]);\r\n        }\r\n      }\r\n    });\r\n    return validatoinRules;\r\n  }\r\n\r\n  public setTranslateService(translateService: Translate) {\r\n    if (!translateService) {\r\n      return;\r\n    }\r\n    this.translate = translateService;\r\n    ValidationTypes.setCurrentLanguage(translateService.getCurrentLanguage());\r\n  }\r\n  /**\r\n   * 重置控件状态\r\n   */\r\n  private resetFormControls() {\r\n    if (Object.keys(this.controls).length > 0) {\r\n      Object.keys(this.controls).forEach((prop) => {\r\n        const formControl: AbstractControl = this.controls[prop];\r\n        formControl.markAsUntouched();\r\n        formControl.markAsPristine();\r\n      });\r\n    }\r\n\r\n  }\r\n  private clearBackEndMessages(domPropertyName: string) {\r\n    if (domPropertyName) {\r\n      if (this.cardControls[domPropertyName] && this.cardControls[domPropertyName]['errors'] && !!Object.keys(this.cardControls[domPropertyName]['errors']).find(item => item.startsWith('message-'))) {\r\n        const messageKeys = Object.keys(this.cardControls[domPropertyName]['errors']).filter(item => item.startsWith('message-'));\r\n        const errors = { ...this.cardControls[domPropertyName]['errors'] };\r\n        messageKeys.forEach(key => delete errors[key]);\r\n        this.cardControls[domPropertyName] = { errors: errors };\r\n      }\r\n    } else {\r\n      Object.keys(this.cardControls).forEach(propertyName => {\r\n        if (this.cardControls[propertyName] && this.cardControls[propertyName]['errors'] && !!Object.keys(this.cardControls[propertyName]['errors']).find(item => item.startsWith('message-'))) {\r\n          const messageKeys = Object.keys(this.cardControls[propertyName]['errors']).filter(item => item.startsWith('message-'));\r\n          const errors = { ...this.cardControls[propertyName]['errors'] };\r\n          messageKeys.forEach(key => delete errors[key]);\r\n          this.cardControls[propertyName] = { errors: errors };\r\n        }\r\n      });\r\n    }\r\n  }\r\n}\r\n\r\nexport { Form };\r\n","import { Repository } from '../repository/index';\r\nimport { Entity, EntityList, PARENT_CLASS, FieldMetadataUtil } from '../entity/index';\r\nimport { Modification, ModifyType } from '../changeset/index';\r\nimport { ViewChange, Change, ChangeType } from './changes';\r\nimport { BindingList } from './binding_list';\r\nimport { BindingObject } from './binding_object';\r\nimport { BindingProperty, BindingPropertyType } from './binding_property';\r\nimport { BindingObjectFactory } from './binding_object_factory';\r\nimport { Form } from '../form/index';\r\nimport { Pagination } from '../core';\r\nimport { BindingData } from './binding_data';\r\nimport { takeUntil } from 'rxjs/operators';\r\n\r\n/**\r\n * 实体操作工具类\r\n */\r\nclass EntityUtil {\r\n\r\n  /**\r\n   * 将entity的数据加载到bindingObject中，并保持两者同步。\r\n   * @param entity        实体对象\r\n   * @param bindingObject 绑定对象\r\n   */\r\n  static loadEntity(entity: Entity, bindingObject: BindingObject) {\r\n    // 遍历bindingObject的properties进行赋值\r\n    bindingObject.properties.forEach((property: BindingProperty) => {\r\n      const propertyName = property.name;\r\n      if (property.type === BindingPropertyType.List) {\r\n        this.loadEntityList(entity[propertyName] || entity[PARENT_CLASS], bindingObject[propertyName]);\r\n      } else if (property.type === BindingPropertyType.Object) {\r\n        if (entity && entity[propertyName] && this.isEffectiveField(entity, propertyName)) {\r\n          this.loadEntity(entity[propertyName], bindingObject[propertyName]);\r\n        }\r\n      } else if (property.type === BindingPropertyType.Dynamic) {\r\n        if (entity && entity[propertyName]) {\r\n          const dynamicObject = BindingObjectFactory.createDynamicBindingObject(entity[propertyName].data);\r\n          BindingObjectFactory.attachDynamicObjectProperty(bindingObject, propertyName, dynamicObject);\r\n          this.loadEntity(entity[propertyName], bindingObject[propertyName]);\r\n        }\r\n      } else {\r\n        if (this.isEffectiveField(entity, propertyName)) {\r\n          const value = entity[propertyName];\r\n          bindingObject.setValue(propertyName, value, false, false);\r\n        }\r\n      }\r\n    });\r\n\r\n    this.setUpEntityPipeline(entity, bindingObject);\r\n  }\r\n\r\n  /**\r\n   * 建立entity和bindingObject之间的关联\r\n   * @param entity        实体对象\r\n   * @param bindingObject 绑定对象\r\n   */\r\n  static setUpEntityPipeline(entity: Entity, bindingObject: BindingObject) {\r\n    if (!entity || !bindingObject) {\r\n      return;\r\n    }\r\n    // 监听entity变更\r\n    entity.onValueChanged.pipe(takeUntil(entity.unsubscribe)).subscribe((modification: Modification) => {\r\n      if (modification.type !== ModifyType.ValueChange || modification.path.length === 0) {\r\n        return;\r\n      }\r\n      const propertyName = modification.path[modification.path.length - 1];\r\n      const primaryKeyPath = modification.path[modification.path.length - 2];\r\n\r\n      // 验证主键是否匹配\r\n      // 存在主键并且主键不是id时才检查（值对象、关联对象不检查）\r\n      if (bindingObject.primaryKey && bindingObject.primaryKey === 'id') {\r\n        const primaryKey = bindingObject.primaryKey;\r\n        const primaryKeyValue = bindingObject.getValue(primaryKey);\r\n        if (primaryKeyPath !== `${primaryKey}:${primaryKeyValue}`) {\r\n          return;\r\n        }\r\n      }\r\n      // TODO:修复动态列不触发变更的问题，临时方案，应该有单独的dynamicBindingObject类\r\n      if (modification.dynamic) {\r\n        if (bindingObject['__original__']) {\r\n          return;\r\n        }\r\n        const value = modification.value;\r\n        const target = bindingObject[propertyName];\r\n        if (!target) {\r\n          return;\r\n        }\r\n        Object.keys(value).forEach((key: string) => {\r\n          if (target.getValue(key) === value[key]) {\r\n            return;\r\n          }\r\n          target.setValue(key, value[key], true, false);\r\n        });\r\n      } else {\r\n        // 值没有发生变化，不再设置\r\n        // TODO: 通过bindingObject修改entity属性值时，entity总会触发一个变更回来，如果不截获这个重复的变更，会导致重复或死循环\r\n        if (bindingObject.getValue(propertyName) === modification.value) {\r\n          return;\r\n        }\r\n        bindingObject.setValue(propertyName, modification.value, true, false, modification.errors);\r\n      }\r\n\r\n    });\r\n    // 监听bindingObject变更\r\n    bindingObject.viewChanges.pipe(takeUntil(bindingObject.unsubscribe)).subscribe((viewChange: ViewChange) => {\r\n      const value = viewChange.value;\r\n      const propertyName = viewChange.path[0];\r\n\r\n      let pathPrefix = '';\r\n      const pathData = entity.getPaths();\r\n      const paths = pathData.path;\r\n      let id = bindingObject['id'];\r\n      bindingObject['__original__'] = true;\r\n      // if (pathData.isUdt) {\r\n      // grid中udt没有id，从父级中取出id，以便存放验证信息\r\n      const getParentId = (target: any) => {\r\n        let parentId = '';\r\n        const findId = (item: any) => {\r\n          if (item && item && item['id']) {\r\n            parentId = item['id'];\r\n            return;\r\n          } else if (item['parent']) {\r\n            findId(item['parent']);\r\n          }\r\n        };\r\n        findId(target);\r\n        return parentId;\r\n      };\r\n      id = getParentId(bindingObject);\r\n      // if (pathData.isGrid) {\r\n      //   // grid 将从表主字段去除\r\n      //   paths.pop();\r\n      // }\r\n      if (paths.length) {\r\n        pathPrefix = paths.join('.') + '.';\r\n      }\r\n      // }\r\n      const controlProp = pathPrefix + propertyName;\r\n      // 调用实体验证，并将错误信息合并到formControl上\r\n      const entityValidate = (callback?: (error: any) => void) => {\r\n        const enableValidate = Object.values(Form.insMap).find(item => item && item.enableValidate);\r\n        if (!enableValidate) {\r\n          if (typeof callback === 'function') {\r\n            callback(null);\r\n          }\r\n          return;\r\n        }\r\n        entity.validateFromUtilSync(propertyName, value, result => {\r\n          const errorObj = {};\r\n          if (result.errors && result.errors.length > 0) {\r\n            result.errors.forEach((error: any) => {\r\n              if (error.constraints) {\r\n                Object.keys(error.constraints).forEach(key => {\r\n                  errorObj[key] = {\r\n                    value: value,\r\n                    name: error.constraints[key],\r\n                    error: error\r\n                  };\r\n                });\r\n              }\r\n            });\r\n          }\r\n          // 先设置实体验证信息，再设置form验证信息，然后在form.isFormValid内部整合实体验证form验证信息\r\n          Form.updateErrors(controlProp, errorObj, id, value, pathData.isGrid);\r\n          const formErrors = viewChange['errors'] || {};\r\n          const mergedErrors = Object.assign({}, formErrors, errorObj);\r\n          let validateError = null;\r\n          if (Object.keys(mergedErrors).length > 0) {\r\n            validateError = { [propertyName]: mergedErrors };\r\n          }\r\n          if (typeof (callback) === 'function') {\r\n            callback(validateError);\r\n          }\r\n        }, viewChange.context);\r\n      };\r\n\r\n      // 不是主键值字段时，要先检查主键是否存在，并且主键是否相等（防止后代变更冒泡上来）\r\n      // 非主键属性变更时，要先检查主键是否匹配（如果主键也修改了，要求先修改主键再修改其他值）\r\n      if (bindingObject.primaryKey) {\r\n        const primaryKey = bindingObject.primaryKey;\r\n        if (propertyName !== primaryKey) {\r\n          if (!entity[primaryKey] || entity[primaryKey] !== bindingObject[primaryKey]) {\r\n            entityValidate();\r\n            return;\r\n          }\r\n        } else if (entity[propertyName] !== value) {\r\n          // todo: 因异步校验未结束实体主键没有被赋值，导致实体其他属性无法赋值，待后续前端校验重构时去掉\r\n          entity[propertyName] = value;\r\n          entityValidate();\r\n          return;\r\n        }\r\n      }\r\n\r\n      // 如果BindingObject上的属性值和Entity上对应属性值一样，则不再设置\r\n      if (entity[propertyName] === value) {\r\n        entityValidate();\r\n        return;\r\n      }\r\n\r\n      // 调用表单验证,通过后调用实体验证\r\n      // bingdingObject变化后，先调用实体上的验证，通过后再设置实体的变动\r\n      entityValidate((errors: any) => {\r\n        entity.errors = errors;\r\n        entity[propertyName] = value;\r\n      });\r\n    });\r\n  }\r\n\r\n  /**\r\n   * 将entityList中的Entity对象转换为BindingObject对象，加载到bindingList中，并保持entityList和bindingList同步。\r\n   * @param entityList  实体列表\r\n   * @param bindingList 绑定列表\r\n   */\r\n  static loadEntityList(entityList: EntityList<any>, bindingList: BindingList) {\r\n    this.loadEntities(entityList.items, bindingList);\r\n    this.setUpEntityListPipeline(entityList, bindingList);\r\n  }\r\n\r\n  /**\r\n   * 建立entityList和bindingList之间的关联\r\n   * @param entityList  实体列表\r\n   * @param bindingList 绑定列表\r\n   */\r\n  static setUpEntityListPipeline(entityList: EntityList<any>, bindingList: BindingList) {\r\n    entityList.onListChanged.subscribe((modification: Modification) => {\r\n      const target = modification['target'];\r\n      if (target && target !== entityList) {\r\n        return;\r\n      }\r\n      switch (modification.type) {\r\n        // 添加实体\r\n        case ModifyType.Add:\r\n        case ModifyType.Clone:\r\n          {\r\n            const entitiesToAdd = <Entity[]>modification.value;\r\n            if (entitiesToAdd.length === 0) {\r\n              return;\r\n            }\r\n            // 检查父id是否一致，冒泡导致的变更不处理\r\n            const paths = modification.path;\r\n            const parentPath = paths[paths.length - 2];\r\n            const parentId = bindingList.parent.primaryKeyValue;\r\n            if (parentPath.indexOf(parentId) === -1) {\r\n              return;\r\n            }\r\n\r\n            this.appendEntities(<Entity[]>modification.value, bindingList, modification.type === ModifyType.Clone);\r\n          }\r\n          break;\r\n        case ModifyType.Insert:\r\n          {\r\n            // 检查父id是否一致，冒泡导致的变更不处理\r\n            const paths = modification.path;\r\n            const parentPath = paths[paths.length - 2];\r\n            const parentId = bindingList.parent.primaryKeyValue;\r\n            const position = modification.position;\r\n            if (parentPath.indexOf(parentId) === -1) {\r\n              return;\r\n            }\r\n            this.insertEntity(modification.value[0], bindingList, position);\r\n          }\r\n          break;\r\n        // 删除实体\r\n        case ModifyType.Remove:\r\n          {\r\n            // 检查父id是否一致，冒泡导致的变更不处理\r\n            const paths = modification.path;\r\n            const parentPath = paths[paths.length - 2];\r\n            const parentId = bindingList.parent.primaryKeyValue;\r\n            if (parentPath.indexOf(parentId) === -1) {\r\n              return;\r\n            }\r\n            // 删除实体（value格式待商榷，目前value的格式为 { primaryKey: primaryValue}）\r\n            const id = modification.value[bindingList.primaryKey];\r\n            bindingList.removeByIds([id]);\r\n            // this.removeEntities(<Entity[]>modification.value, bindingList);\r\n          }\r\n          break;\r\n\r\n        // 加载实体\r\n        case ModifyType.Load:\r\n          // 检查父id是否一致，冒泡导致的变更不处理\r\n          const paths = modification.path;\r\n          const parentPath = paths[paths.length - 2];\r\n          const parentId = bindingList.parent.primaryKeyValue;\r\n          if (parentPath.indexOf(parentId) === -1) {\r\n            return;\r\n          }\r\n          const entities = modification.value;\r\n          this.loadEntities(entities, bindingList);\r\n          break;\r\n        default:\r\n          break;\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * 监听repository变化，保持repository和bindingList同步。\r\n   * @param repository  实体仓库\r\n   * @param bindingList 绑定列表\r\n   */\r\n  static loadRepository(repository: Repository<any>, bindingList: BindingList) {\r\n    // 初次加载\r\n    const entities = Array.from(repository.entityCollection.toArray());\r\n    this.loadEntities(entities, bindingList);\r\n\r\n    // 监听变化\r\n    repository.entityCollectionChange.pipe(takeUntil(repository.destroy$)).subscribe((modification: Modification) => {\r\n      switch (modification.type) {\r\n        case ModifyType.Load:\r\n          bindingList.clear(true);\r\n          this.loadEntities(<Entity[]>modification.value, bindingList, modification.entityCreate);\r\n          break;\r\n        case ModifyType.Add:\r\n        case ModifyType.Clone:\r\n          this.appendEntities(<Entity[]>modification.value, bindingList, modification.type === ModifyType.Clone);\r\n          break;\r\n        case ModifyType.AddData:\r\n          this.addData(<Entity[]>modification.value, bindingList);\r\n          break;\r\n        case ModifyType.Insert:\r\n          this.insertEntity(modification.value, bindingList, modification.position);\r\n          break;\r\n        case ModifyType.Remove:\r\n          this.removeEntities(<Entity[]>modification.value, bindingList);\r\n          break;\r\n        case ModifyType.RemoveData:\r\n          this.removeData(<Entity[]>modification.value, bindingList);\r\n          break;\r\n        case ModifyType.PaginationInfoChange:\r\n          // 分页信息无需同步到bindingList，放到bindingData即可。保留此处只是为了兼容产品部可能使用bindingList上分页信息的场景\r\n          bindingList.paginationInfo = <Pagination>modification.value;\r\n          break;\r\n        default:\r\n          break;\r\n      }\r\n    });\r\n\r\n    // 监听BindingList数据变化\r\n    bindingList.changes.pipe(takeUntil(bindingList.destroy$)).subscribe((change: Change) => {\r\n      if (change.type === ChangeType.PaginationInfoChange) {\r\n        const entityCollection = repository.entityCollection;\r\n        // const entityTypeName = entityCollection.entityTypeName;\r\n        // const original = entityCollection.paginationInfo[entityTypeName];\r\n        // const entityPaginationInfo = Object.assign({}, original, change.value);\r\n        entityCollection.paginationInfo = Object.assign({}, entityCollection.paginationInfo, change.value);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * 将entities中的Entity对象转换为BindingObject对象，并加载到bindingList中\r\n   * @param entities    实体数组\r\n   * @param bindingList 绑定列表\r\n   */\r\n  static loadEntities(entities: Entity[], bindingList: BindingList, entityCreate: boolean = false) {\r\n    const bindingObjects = this.createBindingObjects(entities, bindingList);\r\n    bindingList.load(bindingObjects, entityCreate);\r\n  }\r\n\r\n  /**\r\n   * 将entities中的Entity对象转换为BIndingObject对象，并追加到bindingList中\r\n   * @param entities    实体数组\r\n   * @param bindingList 绑定列表\r\n   */\r\n  static appendEntities(entities: Entity[], bindingList: BindingList, isCloned: boolean = false) {\r\n    const bindingObjects = this.createBindingObjects(entities, bindingList);\r\n    bindingList.append(bindingObjects, isCloned);\r\n  }\r\n  /**\r\n   * 是否是有效的字段\r\n   * @param entity 实体\r\n   * @param propertyName 字段\r\n   * @returns \r\n   */\r\n  static isEffectiveField(entity: Entity, propertyName: string) {\r\n    if (!entity || !propertyName) {\r\n      return false;\r\n    }\r\n    propertyName = propertyName.toLowerCase();\r\n    if (entity['__farris_effective_fields__']) {\r\n      return entity['__farris_effective_fields__'].includes(propertyName);\r\n    }\r\n    if (entity['farris_effective_fields'] && typeof entity['farris_effective_fields'] === 'string') {\r\n      const effectiveFields = entity['farris_effective_fields'].split(',').filter(p => p).map(item => item.toLowerCase());\r\n      entity['__farris_effective_fields__'] = effectiveFields;\r\n      return effectiveFields.includes(propertyName);\r\n    }\r\n    return true;\r\n  }\r\n  /**\r\n   * 增加实体数据（不切换当前行）\r\n   * @param entities \r\n   * @param bindingList \r\n   */\r\n  static addData(entities: Entity[], bindingList: BindingList) {\r\n    const bindingObjects = this.createBindingObjects(entities, bindingList);\r\n    bindingList.addData(bindingObjects);\r\n  }\r\n  static insertEntity(entity: Entity, bindingList: BindingList, position: -1 | 1) {\r\n    const bindingObject = this.createBindingObject(entity, bindingList);\r\n    bindingList.insert(bindingObject, position);\r\n  }\r\n  /**\r\n   * 从bindingList移除entities对应的BindingObject对象\r\n   * @param entities    实体数组\r\n   * @param bindingList 绑定列表\r\n   */\r\n  static removeEntities(entities: Entity[], bindingList: BindingList) {\r\n    if (entities === null || entities.length === 0) {\r\n      return;\r\n    }\r\n\r\n    // 归集要删除的id数组\r\n    const primaryKey = bindingList.primaryKey;\r\n    const ids = [];\r\n    entities.forEach((entity: Entity) => {\r\n      ids.push(entity[primaryKey]);\r\n    });\r\n    bindingList.removeByIds(ids);\r\n  }\r\n  static removeData(entities: Entity[], bindingList: BindingList) {\r\n    if (entities === null || entities.length === 0) {\r\n      return;\r\n    }\r\n    // 归集要删除的id数组\r\n    const primaryKey = bindingList.primaryKey;\r\n    const ids = [];\r\n    entities.forEach((entity: Entity) => {\r\n      ids.push(entity[primaryKey]);\r\n    });\r\n    bindingList.removeDataByIds(ids);\r\n  }\r\n  /**\r\n   * 将entities中的Entity对象转换为BindingObject对象\r\n   * @param entities    实体数组\r\n   * @param bindingList 绑定列表\r\n   */\r\n  static createBindingObjects(entities: Entity[], bindingList: BindingList) {\r\n    if (entities === null || entities.length === 0) {\r\n      return [];\r\n    }\r\n    const bindingObjects = [];\r\n    entities.forEach((entity: Entity) => {\r\n      const bindingObject = BindingObjectFactory.create(bindingList.properties);\r\n      bindingObject['_ENTITY_'] = entity;\r\n      this.loadEntity(entity, bindingObject);\r\n\r\n      // // 为bindingObject设置默认值initialData属性\r\n      // if (entity['initialData']) {\r\n      //   bindingObject['initialData'] = entity['initialData'];\r\n      // }\r\n      bindingObjects.push(bindingObject);\r\n    });\r\n    return bindingObjects;\r\n  }\r\n  static createBindingObject(entity: Entity, bindingList: BindingList) {\r\n    const bindingObject = BindingObjectFactory.create(bindingList.properties);\r\n    this.loadEntity(entity, bindingObject);\r\n    return bindingObject;\r\n  }\r\n  public static watchReposiroty(repository: Repository<any>, bindingData: BindingData) {\r\n    // reposiroty => bindingData\r\n    repository.entityCollectionChange.subscribe((modification: Modification) => {\r\n      switch (modification.type) {\r\n        case ModifyType.PaginationInfoChange:\r\n          bindingData.pagingInfo = modification.value;\r\n          break;\r\n        default:\r\n          break;\r\n      }\r\n    });\r\n  }\r\n  /**\r\n   * 查找属性的类型\r\n   * @param entityType 实体类型\r\n   * @param targetPropName 属性名称\r\n   * @return 属性信息，包含属性类型（NgField、NgObject、NgList）和属性对应的实体类型（当NgField类型时为null）\r\n   */\r\n  static getPropInfo(entityType: any, targetPropName: string): { propType: string, propEntityType: any } {\r\n\r\n    let propType: string;\r\n    let propEntityType: any;\r\n\r\n    // NgField\r\n    const ngFieldProperties = FieldMetadataUtil.getNgFields(entityType);\r\n    Object.keys(ngFieldProperties).forEach((propName: string) => {\r\n      if (propName === targetPropName) {\r\n        propType = 'NgField';\r\n        propEntityType = null;\r\n      }\r\n    });\r\n\r\n    // NgObject\r\n    const ngObjectProperties = FieldMetadataUtil.getNgObjects(entityType);\r\n    Object.keys(ngObjectProperties).forEach((propName: string) => {\r\n      if (propName === targetPropName) {\r\n        propType = 'NgObject';\r\n        propEntityType = ngObjectProperties[propName].type;\r\n      }\r\n    });\r\n\r\n    // NgList\r\n    const ngListProperties = FieldMetadataUtil.getNgList(entityType);\r\n    Object.keys(ngListProperties).forEach((propName: string) => {\r\n      if (propName === targetPropName) {\r\n        propType = 'NgList';\r\n        propEntityType = ngListProperties[propName].type;\r\n      }\r\n    });\r\n\r\n    const ngDynamicProperties = FieldMetadataUtil.getNgDynamic(entityType);\r\n    Object.keys(ngDynamicProperties).forEach((propName: string) => {\r\n      if (propName === targetPropName) {\r\n        propType = 'NgDynamic';\r\n        propEntityType = ngDynamicProperties[propName].type;\r\n      }\r\n    });\r\n\r\n    return { propType, propEntityType };\r\n  }\r\n\r\n  /**\r\n   * 获取实体的主键名\r\n   * @param entityType 实体类型\r\n   */\r\n  static getPrimaryKey(entityType: any) {\r\n    const primaryNgFiledProp = FieldMetadataUtil.getPrimaryFieldMetadata(entityType);\r\n    if (primaryNgFiledProp) {\r\n      return primaryNgFiledProp.dataField;\r\n    } else {\r\n      return '';\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 是否为对象属性\r\n   */\r\n  static isObjectProp(entityType: any, targetPropName: string,) {\r\n    let isObjectProp = false;\r\n    const ngObjectProperties = FieldMetadataUtil.getNgObjects(entityType);\r\n    Object.keys(ngObjectProperties).forEach((propName: string) => {\r\n      if (propName === targetPropName) {\r\n        isObjectProp = true;\r\n      }\r\n    });\r\n    return isObjectProp;\r\n  }\r\n\r\n  /**\r\n   * 检查是否是动态列属性\r\n   */\r\n  static isDynamicProp(entityType: any, targetPropName: string) {\r\n    let isDynamicProp = false;\r\n    const ngDynamicProperties = FieldMetadataUtil.getNgDynamic(entityType);\r\n    Object.keys(ngDynamicProperties).forEach((propName: string) => {\r\n      if (propName === targetPropName) {\r\n        isDynamicProp = true;\r\n      }\r\n    });\r\n    return isDynamicProp;\r\n  }\r\n\r\n  /**\r\n   * 为实体增加initialData属性\r\n   * @param entity 实体实例\r\n   * @param initialData 默认值对象\r\n   */\r\n  static appendInitialData(entity, initialData) {\r\n    const data = Object.assign({}, initialData);\r\n    delete data.id;\r\n    delete data.parentID;\r\n    entity['initialData'] = data;\r\n  }\r\n}\r\n\r\nexport { EntityUtil };\r\n","// tslint:disable: max-line-length member-ordering\r\n/**\r\n * 绑定数据相关定义\r\n * @author Witt<jiwt@inspur.com>\r\n * @todo\r\n * 1、全局的BindingData和局部的BindingData应该拆成两个类，两个类之间是装饰关系；；\r\n * 2、为了保持兼容，减少改动量，暂时放在一起，待进一步重构。\r\n */\r\n\r\nimport { Injectable, OnDestroy } from '@angular/core';\r\nimport { Subject } from 'rxjs';\r\nimport { DataTypeInfo } from '../core/data-type-info';\r\nimport { Repository } from '../repository/index';\r\nimport { Change, ChangeType } from './changes';\r\nimport { BindingProperty } from './binding_property';\r\nimport { BindingList } from './binding_list';\r\nimport { BindingListFactory } from './binding_list_factory';\r\nimport { PropertyUtil } from './property_util';\r\nimport { EntityUtil } from './entity_util';\r\nimport { BindingObject } from './binding_object';\r\nimport { InvokeOnValueChange } from './types';\r\nimport { IDisposable } from '../core';\r\n\r\n/**\r\n * 绑定数据\r\n * @description\r\n * # BindingData\r\n * \r\n * BindingData用于直接和界面绑定，它持有一个不可变的数据集合（BindingList），数据集合中是一个个不可变的数据对象（BindingObject）。\r\n * \r\n * ## 更新界面数据\r\n * \r\n * ### 接口定义\r\n * \r\n * ```javascript\r\n * //根据paths设置属性值\r\n * //@param paths 属性路径数组\r\n * //@param value 属性值\r\n * //@param emitEventToView 如果设置为true，则发送事件通知订阅它的组件、指令去更新界面，默认为false。\r\n * //@param emitEventToEntity 如果设置为true，则同步去更新Entity上对应的字段，默认为true。\r\n * public setValue(paths: string[], value: any, emitEventToView: boolean = false, emitEventToEntity: boolean = true)\r\n * ```\r\n * \r\n * ### 示例\r\n * \r\n * - 更新主表数据\r\n * \r\n *   ```javascript\r\n *   bindingData.setValue(['name'],'ESG');\r\n *   ```\r\n * \r\n * - 更新子表数据\r\n * \r\n *   ```javascript\r\n *   bindingData.setValue(['soItems','price'],20);\r\n *   ```\r\n * \r\n * - 更新业务字段数据\r\n * \r\n *   ```javascript\r\n *   bindingData.setValue(['udt','udt_field'],'value');\r\n *   ```\r\n * \r\n * - 仅更新界面数据（不提交变更集）\r\n * \r\n *   ```javascript\r\n *   bindingData.setValue(['name'],'ESG',true,false);\r\n *   ```\r\n * \r\n *   > 注意：\r\n *   >\r\n *   > 仅更新界面数据时bindingData必须是对应组件上下文的bindingData。\r\n *   >\r\n *   > 更新数据的命令挂载到不同的组件，产生的效果也不相同。如果命令挂到了卡片视图模型，那么可以直接在构件中注入`FrameContext`或`BindingData`并更新数据就可以。但如果命令挂到了非卡片视图 * 模型，则应该先获取到卡片上下文的bindingData。\r\n *   >\r\n *   > - 命令挂在卡片视图模型:\r\n *   >\r\n *   >   ```javascript\r\n *   >   const frameContext = this.frameContext.bindingData;\r\n *   >   frameContext.bindingData.setValue(['name'],'ESG');\r\n *   >   ```\r\n *   >\r\n *   > - 命令挂在非卡片视图模型：\r\n *   >\r\n *   >   ```javascript\r\n *   >   const cardFrameContext = this.frameContext.appContext.frameContextManager.getFrameContextById('card-frameId');\r\n *   >   cardFrameContext.bindingData.setValue(['name'],'ESG');\r\n *   >   ```\r\n * \r\n * ## 获取界面数据\r\n * \r\n * ### 接口定义\r\n * \r\n *   ```javascript\r\n *   //获取paths对应的属性值\r\n *   //@param  paths 属性路径数组\r\n *   //@returns 属性值\r\n *   public getValue(paths: string[], useInitValue = false)\r\n *   ```\r\n * \r\n * ### 示例\r\n * \r\n * - 获取主表数据\r\n * \r\n *   ```javascript\r\n *   bindingData.getValue(['name']) //'ESG'\r\n *   ```\r\n * \r\n * - 获取从表中字段属性\r\n * \r\n *   ```javascript\r\n *   bindingData.getValue(['soItems','price']); // 20\r\n *   ```\r\n * \r\n * - 获取业务字段数据\r\n * \r\n *   ```javascript\r\n *   bindingData.getValue(['udt','udt_field']); // 'value'\r\n *   ```\r\n * \r\n * ## 获取指定BindingObject\r\n * \r\n * ### 接口定义\r\n * \r\n * ```javascript\r\n * //通过主键获取对应的bindingObject\r\n * bindingData.list.findById(id: string): BindingObject;\r\n * ```\r\n * \r\n * ### 示例\r\n * - 获取某个主实体\r\n *   ```javascript\r\n *   bindingData.list.findById(\"id\");\r\n *   ```\r\n * - 获取某个实体下子表的所有数据\r\n *   ```javascript\r\n *   // 获取主实体\r\n *   const bindingObject = bindingData.list.findById(\"id\") as BindingObject;\r\n *   // 获取该实体下的某个子表数据\r\n *   const bindingList = bindingObject.getValue(\"soItems\") as BindingList;\r\n *   ```\r\n * \r\n * - 获取子表某一行数据\r\n * \r\n *   ```javascript\r\n *   //获取主实体\r\n *   const bindingObject = bindingData.list.findById(\"id\") as BindingObject;\r\n *   //获取该实体下的某个子表数据\r\n *   const bindingList = bindingObject.getValue(\"soItems\") as BindingList;\r\n *   //子表行数据\r\n *   const childrenBindingObject = bindingList.findById('子表数据id');\r\n *   const name = childrenBindingObject.getValue(\"name\"); // 或者childrenBindingObject['name']\r\n *   ```\r\n * \r\n * ## 常见问题\r\n * \r\n * ### 赋值或取值时为何不用指定主键？\r\n * \r\n *    示例中取值或赋值时并没有指定主键值，这是由于BindingData赋值或取值时都是对当前行就行操作的，所以不需要指定主键。所以在计算&行切换场景下会导致取值或赋值错误，如本来想给第一行的某个字 * 段赋值，结果由于行切换导致把值赋给了其他行。\r\n * \r\n *    如果遇到赋值错误的情况可以通过BindingObject赋值或取值。\r\n * \r\n * ### 通过bindingData赋值了，界面也刷新了，但保存不上\r\n * \r\n *    这种情况多发生在有后端请求的情况下，比如通过bindingData赋值后紧接着有一个后端请求。由于bindingData赋值是异步的（目前是），这就可能导致赋值还没有结束（还没有产生变更）请求就发送 * 了，从而请求中没有对应的变更，请求回来后会默认清空本地变更，从而导致界面上显示数据已经修改，但数据库中数据并未修改。\r\n * \r\n *    解决该类问题可以通过实体赋值的方式，给实体赋值是同步的，赋值完成后变更就会产生，这样再发送请求时就可以把变更带到后端。\r\n */\r\n@Injectable()\r\nclass BindingData implements IDisposable, OnDestroy{\r\n  /**\r\n   * 数据类型描述\r\n   */\r\n  private dataTypeInfo: DataTypeInfo;\r\n\r\n  /**\r\n   * 绑定该路径\r\n   */\r\n  public bindingPath: string;\r\n\r\n  /**\r\n   * 可绑定的属性描述\r\n   */\r\n  public properties: BindingProperty[];\r\n\r\n  /**\r\n   * 行切换事件暂停抛出\r\n   */\r\n  public rowSelectedEventSuspend: boolean;\r\n  /**\r\n   * 数据列表\r\n   */\r\n  public list: BindingList;\r\n  private paginationInfo = null;\r\n\r\n  public set pagingInfo(pagingInfo: any) {\r\n    this.paginationInfo = pagingInfo;\r\n    this.firePagingChangeEvent();\r\n  }\r\n\r\n  public get pagingInfo() {\r\n    return this.paginationInfo;\r\n  }\r\n  dispose(options?: any) {\r\n    this.list.dispose();\r\n  }\r\n  ngOnDestroy(): void {\r\n    this.dispose();\r\n  }\r\n  /**\r\n   * 设置分页信息\r\n   * @param skip 跳过\r\n   * @param take 获取\r\n   * @param bindingPath 路径\r\n   */\r\n  public setPagingInfo(skip: number, take: number, bindingPath: string) {\r\n    if (bindingPath.length < 1 || bindingPath === '/') {\r\n      this.paginationInfo = Object.assign(this.paginationInfo, { pageSize: take, pageIndex: skip / take + 1 });\r\n    } else {\r\n      let pagingInfo = this.paginationInfo || {};\r\n      const bindingPaths = bindingPath.substr(1).split('/').filter(item => !!item && item.length > 0); // .map(item => item.substring(0, item.length - 1));\r\n      let nodeCode = bindingPaths[bindingPaths.length - 1];\r\n      // 去s\r\n      nodeCode = nodeCode.substr(0, nodeCode.length - 1);\r\n      // 找到父级\r\n      // 获取当前实体上级的主键\r\n      const paths = bindingPaths.slice(0, bindingPaths.length - 1);\r\n      const parentObject = this.getValue(paths) as BindingObject;\r\n      if (parentObject && parentObject[parentObject.primaryKey]) {\r\n        // const key = `${nodeCode}_${parentObject[parentObject.primaryKey]}`;\r\n        const key = `${nodeCode}`;\r\n        pagingInfo = pagingInfo[key] || {};\r\n        pagingInfo.pageIndex = ((skip / take) || 0) + 1;\r\n        pagingInfo.pageSize = take || 0;\r\n      }\r\n    }\r\n    this.firePagingChangeEvent();\r\n  }\r\n  public updatePagingInfo(pageInfo: { pageIndex?: number, pageSize?: number, total?: number }, bindingPath: string) {\r\n    if (bindingPath.length < 1 || bindingPath === '/') {\r\n      this.paginationInfo = Object.assign(this.paginationInfo, pageInfo);\r\n    } else {\r\n      let pagingInfo = this.paginationInfo || {};\r\n      const bindingPaths = bindingPath.substr(1).split('/').filter(item => !!item && item.length > 0); // .map(item => item.substring(0, item.length - 1));\r\n      let nodeCode = bindingPaths[bindingPaths.length - 1];\r\n      // 去s\r\n      nodeCode = nodeCode.substr(0, nodeCode.length - 1);\r\n      pagingInfo[nodeCode] = Object.assign(pagingInfo[nodeCode], pageInfo);\r\n    }\r\n    this.firePagingChangeEvent();\r\n  }\r\n  private firePagingChangeEvent() {\r\n    this.list.changes.next({\r\n      type: ChangeType.PaginationInfoChange,\r\n      path: this.bindingPath && this.bindingPath.split('/').filter(p => p) || [],\r\n      value: this.paginationInfo\r\n    });\r\n  }\r\n  /**\r\n   * 变更集\r\n   */\r\n  public get changes(): Subject<Change> {\r\n    return this.list.changes;\r\n  }\r\n\r\n  /**\r\n   * 值变化执行器工厂，根据路径产生执行器\r\n   */\r\n  private valueChangeInvokerFactory: (paths: string[]) => InvokeOnValueChange;\r\n\r\n  /**\r\n   * 设置值变化执行器工厂\r\n   * @param value 值变化执行器工厂\r\n   */\r\n  public setValueChangeInvokerFactory(value: (paths: string[]) => InvokeOnValueChange) {\r\n    this.valueChangeInvokerFactory = value;\r\n  }\r\n  public getValudChangeInvokerFactory() {\r\n    return this.valueChangeInvokerFactory;\r\n  }\r\n\r\n  /**\r\n   * 初始化（已废弃）\r\n   */\r\n  public init(repository: Repository<any>, bindingPath: string) {\r\n    this.initByRepository(repository, bindingPath);\r\n  }\r\n\r\n  /**\r\n   * 根据Repository对BindingData进行初始化\r\n   */\r\n  public initByRepository(repository: Repository<any>, bindingPath: string) {\r\n    this.bindingPath = bindingPath;\r\n\r\n    this.properties = PropertyUtil.getProperties(repository.entityType);\r\n    this.list = BindingListFactory.create(this.properties);\r\n    // 从repository初始化bindingData\r\n    this.pagingInfo = repository.entityCollection.paginationInfo;\r\n    // @todo\r\n    // BindingData不应该知道Repository，加载数据、建立关联关系的过程应该转移到外边\r\n    EntityUtil.loadRepository(repository, this.list);\r\n    this.dataTypeInfo = repository.entityTypeInfo;\r\n\r\n    this.extendProperties(this.properties);\r\n  }\r\n\r\n  /**\r\n   * 初始化\r\n   */\r\n  public initByBindingList(bindingList: BindingList, bindingPath: string) {\r\n    this.list = bindingList;\r\n    this.bindingPath = bindingPath;\r\n    this.extendProperties(this.list.properties);\r\n  }\r\n  public setDataTypeInfo(dataTypeInfo: DataTypeInfo) {\r\n    this.dataTypeInfo = dataTypeInfo;\r\n  }\r\n  /**\r\n   * 获取界面数据\r\n   * @param paths 属性路径数组\r\n   * @param useInitValue 是否使用默认值，默认为`false`\r\n   * @returns 属性值\r\n   */\r\n  public getValue(paths: string[], useInitValue = false) {\r\n    let target: any = this.list;\r\n    paths.forEach((path: string) => {\r\n      if (target) {\r\n        target = target[path];\r\n      }\r\n    });\r\n    if (useInitValue === true && paths && paths.length > 0) {\r\n      const initValue = this.getInitValueByPaths(paths);\r\n      if (target === undefined && target !== initValue) {\r\n        target = initValue;\r\n      }\r\n    }\r\n    return target;\r\n  }\r\n\r\n  /**\r\n   * 该方法可以更新绑定层数据，从而达到更新界面数据的目的，进而更新本地仓库实体数据，产生变更，下次请求时会将变更带到后端并更新后端数据。\r\n   * @param paths 属性路径数组\r\n   * @param value 属性值\r\n   * @param emitEventToView 如果设置为true，则发送事件通知订阅它的组件、指令去更新界面，默认为false。\r\n   * @param emitEventToEntity 如果设置为true，则同步去更新Entity上对应的字段，默认为true。\r\n   * @description\r\n   * ## 示例\r\n   * \r\n   * ### 更新界面数据\r\n   * 使用该方法时只传递path和value参数，其余参数使用默认值。该用法会更新界面数据，同时更新实体数据，实体数据更新时会产生变更，这样在下次请求时会将该变更带到后端，\r\n   * 进而更新后端数据。\r\n   * ```typescript\r\n   * this.frameContext.bindingData.setValue(paths,value);\r\n   * ```\r\n   * \r\n   * ### 仅更新界面数据\r\n   * 有些场景下我们希望只更新界面的数据，不希望对后端数据产生影响，此时除传递paths和value参数外，还需要将emitEventToView设为true，emitEventToEntity设为false，\r\n   * 此时必须使用对应BindingData的setValue方法：\r\n   * ```typescript\r\n   * const tableFrameContext = this.frameContext.appContext.frameContextManager.getFrameContextById('data-grid-component');\r\n   * tableFrameContext.bindingData.setValue(paths,value,true,false);\r\n   * ```\r\n   * ## 注意事项\r\n   * setValue为异步方法，如果调用该方法后随即发送后端请求，此时实体变更尚未产生，但请求已经发送，变更无法带到后端，导致变更丢失，出现界面上显示数据已经修改，\r\n   * 但后端并未修改的问题。\r\n   * 因此，如果赋值后随即发送请求应该使用实体赋值的方法。\r\n   */\r\n  public setValue(paths: string[], value: any, emitEventToView: boolean = false, emitEventToEntity: boolean = true, errors: any = {}, context?: any) {\r\n\r\n    if (!paths || paths.length === 0) {\r\n      throw Error('路径不能为空');\r\n    }\r\n    const parentPaths = paths.slice(0, paths.length - 1);\r\n    const propName = paths[paths.length - 1];\r\n\r\n    let parent = this.getValue(parentPaths);\r\n    if (!parent) {\r\n      throw Error('找不到要设置的对象');\r\n    }\r\n    if (parent instanceof BindingData) {\r\n      parent = parent.list.currentItem;\r\n    } else if (parent instanceof BindingList) {\r\n      parent = parent.currentItem;\r\n    }\r\n    if (!!this.valueChangeInvokerFactory) {\r\n      parent.setValue(propName, value, emitEventToView, emitEventToEntity, errors, this.valueChangeInvokerFactory(paths), context);\r\n    } else {\r\n      parent.setValue(propName, value, emitEventToView, emitEventToEntity, errors, null, context);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 根据paths清空属性值\r\n   */\r\n  public clearValue(paths: string[], emitEventToView: boolean = false, emitEventToEntity: boolean = true, context?: any) {\r\n    let initValue: any;\r\n    const propInfo = this.dataTypeInfo.getPropInfoByPath(paths);\r\n    if (propInfo && propInfo.metadataInfo && propInfo.metadataInfo.initValue !== undefined) {\r\n      initValue = propInfo.metadataInfo.initValue;\r\n    } else {\r\n\r\n      // 原来的帮助映射中，强行纠正了数值的情况，保持一致\r\n      const oldValue = this.getValue(paths);\r\n      if (typeof oldValue === 'number') {\r\n        initValue = 0;\r\n      } else {\r\n        initValue = '';\r\n      }\r\n    }\r\n    this.setValue(paths, initValue, emitEventToView, emitEventToEntity, null, context);\r\n  }\r\n\r\n  /**\r\n   * 获取当前列表\r\n   */\r\n  public getList() {\r\n    if (!this.bindingPath || this.bindingPath === '/') {\r\n      return this.list;\r\n    }\r\n\r\n    const bindingPath = this.bindingPath.substr(1);\r\n    const bindingPathArray = bindingPath.split('/').filter((part: string) => {\r\n      return part !== '';\r\n    });\r\n    return this.getValue(bindingPathArray);\r\n  }\r\n\r\n  /**\r\n   * 获取当前对象\r\n   */\r\n  public getObject() {\r\n    const bindingList = this.getList();\r\n    return bindingList.currentItem;\r\n  }\r\n  /**\r\n   * 绑定路径（仅路径部分，不包括属性）\r\n   * @param bindingPath 绑定路径\r\n   */\r\n  public getPath(bindingPath?: string[]) {\r\n    const bindingPaths = bindingPath.filter(p => p);\r\n    const path = [`${this.list.primaryKey}:${this.list.currentId}`];\r\n\r\n    bindingPaths.forEach((item: string) => {\r\n      path.push(item);\r\n      const list = this[item] as BindingList;\r\n      if (list) {\r\n        path.push(`${list.primaryKey}:${list.currentId}`);\r\n      }\r\n    });\r\n    return path;\r\n  }\r\n  /**\r\n   * 清空绑定数据\r\n   */\r\n  public reset() {\r\n    this.list.clear(true);\r\n  }\r\n  /**\r\n   * 通过绑定路径获取属性初始值\r\n   * @param paths 绑定路径\r\n   */\r\n  private getInitValueByPaths(paths: Array<string>) {\r\n    let initValue: any;\r\n    const propInfo = this.dataTypeInfo && this.dataTypeInfo.getPropInfoByPath(paths) || null;\r\n    if (propInfo && propInfo.metadataInfo && propInfo.metadataInfo.initValue !== undefined) {\r\n      initValue = propInfo.metadataInfo.initValue;\r\n    }\r\n    return initValue;\r\n  }\r\n  /**\r\n   * 扩展BindingData属性，映射BindingData所持有的绑定列表当前行的属性，减少绑定层级。\r\n   * @param properties 关联实体的属性集合\r\n   */\r\n  private extendProperties(properties: BindingProperty[]) {\r\n    properties.forEach((property: BindingProperty) => {\r\n      const propName = property.name;\r\n      Object.defineProperty(this, propName, {\r\n        get: () => {\r\n          return this.list.currentItem[propName];\r\n        },\r\n        set: (value: any) => {\r\n          this.list.currentItem[propName] = value;\r\n        }\r\n      });\r\n    });\r\n  }\r\n}\r\n\r\nexport { BindingData };\r\n","/**\r\n * 绑定列表相关定义\r\n * @author Witt<jiwt@inspur.com>\r\n */\r\n\r\n// tslint:disable: max-line-length\r\n\r\nimport { List } from 'immutable';\r\nimport { Subject } from 'rxjs';\r\n\r\nimport { Change, ChangeType } from './changes';\r\nimport { BindingObject } from './binding_object';\r\nimport { BindingProperty } from './binding_property';\r\nimport { BindingObjectFactory } from './binding_object_factory';\r\nimport { PropertyUtil } from './property_util';\r\nimport { BindingData } from './binding_data';\r\nimport { TranslateService } from '../i18n/translate_service';\r\nimport { IDisposable } from '../core';\r\n\r\n/**\r\n * BindingList是一个BindingObject集合\r\n */\r\nclass BindingList implements IDisposable {\r\n  public __type__ = 'BindingList';\r\n  /**\r\n   * immutable的BindingObject列表\r\n   */\r\n  private innerList: List<BindingObject>;\r\n\r\n  private emptyCurrentItem: BindingObject;\r\n\r\n  /**\r\n   * 关联实体的属性集合\r\n   */\r\n  public properties: BindingProperty[];\r\n\r\n  /**\r\n   * 主键名\r\n   */\r\n  public primaryKey: string;\r\n\r\n  /**\r\n   * 父对象\r\n   */\r\n  public parent: BindingObject;\r\n\r\n  /**\r\n   * 变更流\r\n   */\r\n  public changes: Subject<Change>;\r\n\r\n  /**\r\n   * 当前行对应的绑定对象的内码\r\n   */\r\n  public currentId: string;\r\n  /**\r\n   * destory signal\r\n   */\r\n  public destroy$: Subject<any>;\r\n\r\n  //#region 分页相关\r\n\r\n  /**\r\n   * 分页信息\r\n   */\r\n  public _paginationInfo: any = null;\r\n\r\n  set paginationInfo(sPaginationInfo: any) {\r\n    this._paginationInfo = sPaginationInfo;\r\n    if (this._paginationInfo === sPaginationInfo) {\r\n      return;\r\n    }\r\n    this.changes.next({\r\n      type: ChangeType.PaginationInfoChange,\r\n      path: [],\r\n      value: this._paginationInfo\r\n    });\r\n  }\r\n\r\n  get paginationInfo(): any {\r\n    return this._paginationInfo;\r\n  }\r\n  /**\r\n   * 获取页码\r\n   */\r\n  get pageIndex() {\r\n    if (!!this.paginationInfo && this.paginationInfo.hasOwnProperty(\"pageIndex\")) {\r\n      return this.paginationInfo.pageIndex;\r\n    }\r\n    return 1;\r\n  }\r\n  /**\r\n   * 获取分页大小\r\n   */\r\n  get pageSize() {\r\n    if (!!this.paginationInfo && this.paginationInfo.hasOwnProperty(\"pageSize\")) {\r\n      return this.paginationInfo.pageSize;\r\n    }\r\n    return 0;\r\n  }\r\n\r\n  /**\r\n   * 获取数据总项数\r\n   */\r\n  get total() {\r\n    if (!!this.paginationInfo) {\r\n      return this.paginationInfo.total || this.paginationInfo.totalCount;\r\n    }\r\n    return 0;\r\n  }\r\n  /**\r\n   * 获取跳过的数据条数\r\n   */\r\n  get skip() {\r\n    const pageIndex = this.pageIndex;\r\n    const pageSize = this.pageSize;\r\n    return (pageIndex - 1) * pageSize;\r\n  }\r\n\r\n  /**\r\n   * 前台设置分页信息\r\n   * @param skip skip\r\n   * @param take take\r\n   */\r\n  public setPaginationInfo(skip: number, take: number) {\r\n    this.paginationInfo = Object.assign({}, this.paginationInfo, {\r\n      pageSize: take,\r\n      pageIndex: skip / take + 1\r\n    });\r\n    /*this.changes.next({\r\n      type: ChangeType.PaginationInfoChange,\r\n      path: [],\r\n      value: this.paginationInfo\r\n    });*/\r\n  }\r\n  //#endregion\r\n\r\n\r\n\r\n  /**\r\n   * 当前行对应的绑定对象\r\n   * 如果currentId为null，则创建一个空结构，防止绑定报错；\r\n   */\r\n  public get currentItem(): BindingObject {\r\n    const currentItem = this.findById(this.currentId);\r\n    if (!currentItem) {\r\n      if (!this.emptyCurrentItem) {\r\n        this.emptyCurrentItem = BindingObjectFactory.create(this.properties);\r\n      }\r\n      return this.emptyCurrentItem;\r\n    }\r\n    return currentItem;\r\n  }\r\n\r\n  /**\r\n   * 绑定对象的数量\r\n   */\r\n  public get length(): number {\r\n    return this.innerList.count();\r\n  }\r\n\r\n  /**\r\n   * 构造函数\r\n   */\r\n  constructor(properties: BindingProperty[]) {\r\n    this.properties = properties;\r\n    this.primaryKey = PropertyUtil.getPrimaryKey(properties);\r\n\r\n    this.changes = new Subject<Change>();\r\n    this.innerList = List<BindingObject>();\r\n    this.currentId = null;\r\n    this.destroy$ = new Subject();\r\n  }\r\n  /**\r\n   * 销毁\r\n   * @param options \r\n   */\r\n  dispose(options?: any) {\r\n    this.clear(true);\r\n    if (this.destroy$) {\r\n      this.destroy$.next();\r\n      this.destroy$.complete();\r\n      this.destroy$ = null;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 添加[Symbol.iterator]，使之能通过for of遍历\r\n   */\r\n  [Symbol.iterator]() {\r\n    const self = this;\r\n    let index = -1;\r\n    const size = this.innerList.size;\r\n\r\n    return {\r\n      next: function () {\r\n        index++;\r\n        if (index < size) {\r\n          return { done: false, value: self.innerList.get(index) };\r\n        }\r\n        return { done: true, value: undefined };\r\n      }\r\n    };\r\n  }\r\n\r\n  /**\r\n   * 批量加载绑定对象，加载之前先清空绑定列表，并重置当前行，加载之后将第一行设置为默认当前行。\r\n   * @param objects 要加载绑定对象数组\r\n   */\r\n  public load(objects: BindingObject[], entityCreate: boolean = false): void {\r\n    // 重置列表\r\n    this.innerList = this.innerList.clear();\r\n    if (objects.length !== 0) {\r\n      // 加载数据\r\n      objects.forEach((object: BindingObject) => {\r\n        this.add(object);\r\n      });\r\n\r\n      // 设置默认当前行\r\n      const currentItem = this.findById(this.currentId);\r\n      if (!currentItem) {\r\n        const firstId = objects[0][this.primaryKey];\r\n        this.setCurrentId(firstId, false, false);\r\n      }\r\n    } else {\r\n      this.currentId = null;\r\n    }\r\n    const change: Change = {\r\n      type: ChangeType.Load,\r\n      path: [],\r\n      value: objects\r\n    };\r\n    change.create = entityCreate;\r\n    // 触发事件\r\n    this.changes.next(change);\r\n  }\r\n\r\n  /**\r\n   * 批量追加绑定对象，追加之后将最后一个追加的绑定对象设置为当前行。\r\n   * @param objects 要加载绑定对象数组\r\n   */\r\n  public append(objects: BindingObject[], isCloned: boolean = false): void {\r\n    if (objects.length === 0) {\r\n      return;\r\n    }\r\n    // 加载BindingObject\r\n    objects.forEach((object: BindingObject) => {\r\n      this.add(object);\r\n    });\r\n    // 当前行为新追加的最后1行\r\n    const lastId = objects[objects.length - 1][this.primaryKey];\r\n    this.setCurrentId(lastId, true, true);\r\n    // 触发事件\r\n    const change: Change = {\r\n      type: ChangeType.Append,\r\n      path: [],\r\n      value: objects\r\n    };\r\n    if (isCloned) {\r\n      change.isCloned = true;\r\n    }\r\n    this.changes.next(change);\r\n  }\r\n  /**\r\n   * 增加数据\r\n   * @param objects 实体\r\n   * @description 增加实体数据，但不切换当前行\r\n   */\r\n  public addData(objects: BindingObject[]): void {\r\n    if (objects.length === 0) {\r\n      return;\r\n    }\r\n    // 加载BindingObject\r\n    objects.forEach((object: BindingObject) => {\r\n      this.add(object);\r\n    });\r\n    // 触发事件\r\n    this.changes.next({\r\n      type: ChangeType.Append,\r\n      path: [],\r\n      value: objects\r\n    });\r\n  }\r\n  public insert(object: BindingObject, position?: 1 | -1) {\r\n    const currentIndex = this.innerList.findIndex((obj: BindingObject) => obj.primaryKeyValue === this.currentId);\r\n    // 加载BindingObject\r\n    if (position === 1) {\r\n      this.innerList = this.innerList.insert(currentIndex + 1, object);\r\n    } else if (position === -1) {\r\n      this.innerList = this.innerList.insert(currentIndex, object);\r\n    } else {\r\n      this.innerList = this.innerList.push(object);\r\n    }\r\n    object.parent = this;\r\n    // 监听object变更，并继续向上抛，由于list有当前行的概念，不需要在path中追加路径\r\n    object.changes.subscribe((change: Change) => {\r\n      this.changes.next(change);\r\n    });\r\n\r\n    this.setCurrentId(object.primaryKeyValue, true, true);\r\n\r\n    // 触发事件\r\n    this.changes.next({\r\n      type: ChangeType.Append,\r\n      path: [],\r\n      value: object\r\n    });\r\n  }\r\n  /**\r\n   * 添加绑定对象，并建立绑定对象和绑定列表之间的关联。\r\n   * @param object 绑定对象\r\n   */\r\n  public add(object: BindingObject) {\r\n    this.innerList = this.innerList.push(object);\r\n    object.parent = this;\r\n\r\n    // 监听object变更，并继续向上抛，由于list有当前行的概念，不需要在path中追加路径\r\n    object.changes.subscribe((change: Change) => {\r\n      this.changes.next(change);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * 删除主键值数组对应的绑定对象。\r\n   * @param ids 主键值数组\r\n   */\r\n  public removeByIds(ids: Array<string>): void {\r\n    if (!ids || ids.length === 0) {\r\n      return;\r\n    }\r\n\r\n    let nextCurrentId = this.currentId;\r\n    ids.forEach((id: string) => {\r\n\r\n      // 如果当前行被删除，计算下一当前行\r\n      if (id === nextCurrentId) {\r\n        nextCurrentId = this.getCurrentIdBeforeDeleting();\r\n      }\r\n\r\n      // 删除对象，找不到时跳过\r\n      const index = this.getIndexById(id);\r\n      if (index === -1) {\r\n        return;\r\n      }\r\n      this.innerList = this.innerList.delete(index);\r\n    });\r\n\r\n    // 重新设置当前行\r\n    if (this.innerList.count() === 0) {\r\n      this.currentId = null;\r\n    } else {\r\n      this.setCurrentId(nextCurrentId, false, false);\r\n    }\r\n\r\n    // 出发行删除事件\r\n    this.changes.next({\r\n      type: ChangeType.Remove,\r\n      path: [],\r\n      value: ids\r\n    });\r\n  }\r\n  /**\r\n   * 删除数据（不切换当前行）\r\n   * @param ids ids\r\n   */\r\n  public removeDataByIds(ids: Array<string>): void {\r\n    if (!ids || ids.length === 0) {\r\n      return;\r\n    }\r\n\r\n    ids.forEach((id: string) => {\r\n      // 删除对象，找不到时跳过\r\n      const index = this.getIndexById(id);\r\n      if (index === -1) {\r\n        return;\r\n      }\r\n      this.innerList = this.innerList.delete(index);\r\n    });\r\n\r\n    // 出发行删除事件\r\n    this.changes.next({\r\n      type: ChangeType.Remove,\r\n      path: [],\r\n      value: ids\r\n    });\r\n  }\r\n  /**\r\n   * 清空\r\n   */\r\n  public clear(clearOnly: boolean = false) {\r\n    this.innerList.forEach((item: BindingObject) => {\r\n      item['_ENTITY_'] = null;\r\n      item.unsubscribe.next();\r\n      item.unsubscribe.complete();\r\n      item.changes.complete();\r\n      item.viewChanges.complete();\r\n    });\r\n    this.innerList = this.innerList.clear();\r\n    if (!clearOnly) {\r\n      this.currentId = null;\r\n      this.changes.next({\r\n        type: ChangeType.Remove,\r\n        path: [],\r\n        value: []\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 如果当前行被删除，删除之前重新计算当前行的位置，并返回下一当前行的主键值。\r\n   * - 如果被删除的行是最后1行，则上移1行；\r\n   * - 其他情况，下移1行。\r\n   */\r\n  public getCurrentIdBeforeDeleting(): string {\r\n    let nextIndex = -1;\r\n    const currentIndex = this.getIndexById(this.currentId);\r\n    if (currentIndex === this.length - 1) {\r\n      nextIndex = currentIndex - 1;\r\n    } else {\r\n      nextIndex = currentIndex + 1;\r\n    }\r\n    return this.getIdByIndex(nextIndex);\r\n  }\r\n\r\n  /**\r\n   * 根据主键值获取对应绑定对象\r\n   * @param   id 要查找的主键值\r\n   * @returns 找到时返回对应BindingObject， 找不到时返回null\r\n   */\r\n  public findById(id: string): BindingObject | null {\r\n    let target: BindingObject;\r\n    target = this.innerList.find((item) => {\r\n      return item.getValue(this.primaryKey) === id;\r\n    });\r\n    return target === undefined ? null : target;\r\n  }\r\n\r\n  /**\r\n   * 将主键值为id的绑定对象设置为当前行\r\n   * @param  id        要设置的主键值\r\n   * @param  emitEvent 是否发送当前行变更事件\r\n   * @param  force 强制切换\r\n   */\r\n  public setCurrentId(id: string, emitEvent: boolean = true, emitGlobalEvent: boolean = true, force: boolean = false): void {\r\n    if (this.currentId === id && !force) {\r\n      return;\r\n    }\r\n\r\n    // 不存在时设置为null\r\n    // const currentObj = this.findById(id);\r\n    // if (!currentObj) {\r\n    //   this.currentId = null;\r\n    // } else {\r\n    //   this.currentId = id;\r\n    // }\r\n\r\n    // @todo：找不到时按理应该设置为null，目前是直接返回，框架部分功能依赖该特性。\r\n    const currentObj = this.findById(id);\r\n    if (!currentObj && !force) {\r\n      return;\r\n    }\r\n    this.currentId = id;\r\n\r\n    // 发出行切换事件\r\n    if (emitEvent === true) {\r\n      this.changes.next({\r\n        type: ChangeType.SelectionChanged,\r\n        path: [],\r\n        value: this.currentItem,\r\n        force\r\n      });\r\n    }\r\n\r\n    // 是否发送全局的行切换事件\r\n    if (emitGlobalEvent === true) {\r\n      this.changes.next({\r\n        type: ChangeType.GlobalSelectionChanged,\r\n        path: [],\r\n        value: this.currentItem,\r\n        force\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 根据主键值为id的绑定对象的索引\r\n   * @param id 主键值\r\n   * @returns 找到时返回对应的index，找不到时返回-1\r\n   */\r\n  public getIndexById(id: string): number {\r\n    return this.innerList.findIndex((obj: BindingObject) => {\r\n      return obj[this.primaryKey] === id;\r\n    });\r\n  }\r\n\r\n  /**\r\n   * 根据索引位置获取对应绑定对象的主键值\r\n   * @reutrn 找到时返回对应主键值，找不到返回null\r\n   */\r\n  public getIdByIndex(index: number): string {\r\n\r\n    if (index < 0 || index > this.length) {\r\n      return null;\r\n    }\r\n\r\n    if (this.innerList.has(index) === false) {\r\n      return null;\r\n    }\r\n    const obj = this.innerList.get(index);\r\n    return obj[this.primaryKey];\r\n  }\r\n\r\n  /**\r\n   * 转换为BindingObject数组\r\n   */\r\n  public toArray(): BindingObject[] {\r\n    return this.innerList.toArray();\r\n  }\r\n  /**\r\n   * 交互数据位置\r\n   * @param id1 id1\r\n   * @param id2 id2\r\n   */\r\n  public swapById(id1: any, id2: any) {\r\n    const item1 = this.innerList.find(element => element.primaryKeyValue === id1);\r\n    const item2 = this.innerList.find(element => element.primaryKeyValue === id2);\r\n    this.innerList = this.innerList.map((bindingObject: BindingObject, index: number) => {\r\n      if (bindingObject.primaryKeyValue === id1) {\r\n        return item2;\r\n      } else if (bindingObject.primaryKeyValue === id2) {\r\n        return item1;\r\n      } else return bindingObject;\r\n    }).toList();\r\n    this.changes.next({\r\n      type: ChangeType.Swap,\r\n      path: []\r\n    });\r\n  }\r\n  /**\r\n   * 转换为JSON对象\r\n   * @returns 普通对象数组\r\n   */\r\n  public toJSON(options?: any): any[] {\r\n    const result = [];\r\n    this.innerList.forEach((obj: BindingObject) => {\r\n      result.push(obj.toJSON(options));\r\n    });\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * 获取分页信息\r\n   * @param path 路径\r\n   * @param defaultValue 默认值\r\n   */\r\n  public getPaginationConfigByPath(path: string, defaultValue?: any) {\r\n    if (!path || path === '/') {\r\n      return this.paginationInfo;\r\n    }\r\n    if (typeof path !== 'string') {\r\n      throw new Error('路径必须为字符串！');\r\n    }\r\n    path = path.substring(1);\r\n    const paths = path.split('/').filter(item => !!item && item.trim().length > 0).map(item => item.trim());\r\n    let config = this.paginationInfo;\r\n    paths.forEach(item => {\r\n      if (config && config.hasOwnProperty(item)) {\r\n        config = config[item];\r\n      } else {\r\n        config = null;\r\n      }\r\n    });\r\n    return !!config ? config : typeof defaultValue !== 'undefined' ? defaultValue : undefined;\r\n  }\r\n  /**\r\n   * 对bindingList就行排序\r\n   * @param string 排序字段\r\n   * @param directions 排序规则字段\r\n   * @param options 参数\r\n   */\r\n  public sortBy(fields: string | Array<string>, directions: string | Array<string>, options?: { [prop: string]: any }) {\r\n    if (!fields || fields.length < 1 || !directions || directions.length < 1) {\r\n      throw new Error('sortBy:argument error');\r\n    }\r\n    // 默认升序\r\n    const arrFields: Array<string> = typeof fields === 'string' ? fields.split(',') : fields || [];\r\n    const arrDirections: Array<string> = typeof directions === 'string' ? directions.split(',') : directions || [];\r\n    // 排序字段和排序方式应一致\r\n    if (arrFields.length !== arrDirections.length || arrFields.length < 1) {\r\n      throw new Error('sortBy:fields and directions not match');\r\n    }\r\n    // nage,age,total\r\n    const comparator = (props: Array<string>, orders: Array<string>) => (item1: BindingObject, item2: BindingObject) => {\r\n      return props.reduce((result, prop) => {\r\n        if (result === 0) {\r\n          const bindingProperty = this.properties.find(item => item.name === prop);\r\n          let isMultiLangProp = false;\r\n          if (bindingProperty) {\r\n            isMultiLangProp = bindingProperty.enableMultiLangInput;\r\n          }\r\n          const currentLanguage = TranslateService.getCurrentLanguage();\r\n          const order = ['asc'].includes(orders[props.indexOf(prop)]) ? 1 : -1;\r\n          let item1Value = this.getValue(item1, prop, isMultiLangProp, currentLanguage);\r\n          let item2Value = this.getValue(item2, prop, isMultiLangProp, currentLanguage);\r\n\r\n          if (item1Value === null || item1Value === undefined) { item1Value = ''; }\r\n          if (item2Value === null || item2Value === undefined) { item2Value = ''; }\r\n\r\n          if (typeof item1Value === 'string' && typeof item2Value === 'string') {\r\n            const localeCompareResult = item1Value.localeCompare(item2Value);\r\n            result = localeCompareResult * order;\r\n          } else {\r\n            if (item1Value > item2Value) { result = order * 1; }\r\n            if (item1Value < item2Value) { result = order * -1; }\r\n          }\r\n        }\r\n        return result;\r\n      }, 0);\r\n    };\r\n    this.innerList = this.innerList.sort(comparator(arrFields, arrDirections)).toList();\r\n  }\r\n  private getValue(target: any, propName: string, isMultiLangProp: boolean = false, currentLanguage: string = 'zh-CHS') {\r\n    if (target instanceof BindingList) {\r\n      target = target.currentItem;\r\n    } else if (target instanceof BindingData) {\r\n      target = target.list.currentItem;\r\n    }\r\n    let result = null;\r\n    if (propName.indexOf('.') === -1) {\r\n      result = target[propName];\r\n    } else {\r\n      const props = propName.split('.');\r\n      for (const prop of props) {\r\n        target = result = this.getValue(target, prop, isMultiLangProp, currentLanguage);\r\n      }\r\n    }\r\n    if (isMultiLangProp && result && result.hasOwnProperty(currentLanguage)) {\r\n      return result[currentLanguage];\r\n    } else {\r\n      return result;\r\n    }\r\n  }\r\n}\r\n\r\nexport { BindingList };\r\n","import { Entity } from '../entity/index';\r\nimport { Repository, EntityManager } from '../repository/index';\r\nimport { PropertyUtil as BindingPropertyUtil } from './property_util';\r\nimport { EntityUtil as EntityLoadUtil } from './entity_util';\r\nimport { BindingListFactory } from './binding_list_factory';\r\nimport { BindingData } from './binding_data';\r\n\r\n\r\nclass BindingDataFactory {\r\n\r\n  /**\r\n   * 根据Repository创建一个BindingData\r\n   */\r\n  public static createFromRepository(repository: Repository<Entity>, bindingPath: string): BindingData {\r\n    const bindingData = new BindingData();\r\n    const bindingProperties = BindingPropertyUtil.getProperties(repository.entityType);\r\n    const bindingList = BindingListFactory.create(bindingProperties);\r\n    bindingData.initByBindingList(bindingList, bindingPath);\r\n    bindingData.setDataTypeInfo(repository.entityTypeInfo);\r\n    EntityLoadUtil.loadRepository(repository, bindingList);\r\n\r\n    // 从repository初始化bindingData\r\n    bindingData.pagingInfo = repository.entityCollection.paginationInfo;\r\n    return bindingData;\r\n  }\r\n\r\n  /**\r\n   * 根据EntityManager创建BindingData，并建立双向关联（请勿使用）\r\n   * @internal\r\n   * @summary\r\n   * 1、该方法暂时仅供内部单元测试使用；\r\n   * 2、该方法暂时只创建BindingData，不建立双向关联\r\n   */\r\n  public static createFromEntityManager(entityManager: EntityManager<Entity>, bindingPath: string): BindingData {\r\n    const bindingData = new BindingData();\r\n    const bindingProperties = BindingPropertyUtil.getProperties(entityManager.entityType);\r\n    const bindingList = BindingListFactory.create(bindingProperties);\r\n    bindingData.initByBindingList(bindingList, bindingPath);\r\n\r\n    // 初始化数据\r\n    const entities: Entity[] = entityManager.getEntitiesByPath([]);\r\n    EntityLoadUtil.loadEntities(entities, bindingList);\r\n\r\n    return bindingData;\r\n  }\r\n\r\n  /**\r\n   * 根据已经存在的BindingData创建一个新的BindingData\r\n   */\r\n  public static createFromExistingBindingData(existingBindingData: BindingData, bindingPath: string) {\r\n    const bindingData = new BindingData();\r\n    bindingData.initByBindingList(existingBindingData.list, bindingPath);\r\n    return bindingData;\r\n  }\r\n}\r\n\r\nexport { BindingDataFactory };\r\n","/**\r\n * 绑定装饰器相关定义\r\n * @author Witt<jiwt@inspur.com>\r\n */\r\n\r\nimport { Type } from '@angular/core';\r\nimport { TypeDecorator, makeDecorator } from '../metadata/index';\r\nimport { Repository } from '../repository/index';\r\nimport { Entity } from '../entity/index';\r\n\r\n/**\r\n * NgBindingData装饰器名称\r\n * @formType {string}\r\n */\r\nexport const NG_BINDING_DATA = 'NgBindingData';\r\n\r\n/**\r\n * NgBindingData\r\n */\r\nexport interface NgBindingData {\r\n\r\n  // /**\r\n  //  * 关联entity类型\r\n  //  */\r\n  // entity: Type<Entity>;\r\n\r\n  /**\r\n   * 关联repository类型\r\n   */\r\n  repository: Type<Repository<any>>;\r\n}\r\n\r\n/**\r\n * NgBindingContextDecorator\r\n */\r\nexport interface NgBindingDataDecorator {\r\n\r\n  (obj?: NgBindingData): TypeDecorator;\r\n\r\n  new(obj?: NgBindingData): NgBindingData;\r\n\r\n}\r\n\r\n/**\r\n * NgBindingContext\r\n */\r\n\r\n// export const NgBindingData: NgBindingDataDecorator =\r\n//   makeDecorator(NG_BINDING_DATA, (obj: NgBindingData) => obj);\r\nexport function NgBindingData(options: NgBindingData) {\r\n  const decoratorFactory = makeDecorator(NG_BINDING_DATA, (obj: NgBindingData) => obj);\r\n  return decoratorFactory(options);\r\n}\r\n","import { BindingData, BindingPropertyType, PropertyUtil } from '../binding-data/index';\r\n/**\r\n * 路径处理工具类（处理/PathNode1/PathNode2/...格式的路径）\r\n */\r\nclass DataPathUtil {\r\n\r\n  /**\r\n   * 转换成BindingData可识别的路径\r\n   */\r\n  public static convertToBindingPathArray(path: string): string[] {\r\n    const bindingPathArray = path.split('/').filter((part: string) => {\r\n      return part !== '';\r\n    });\r\n    return bindingPathArray;\r\n  }\r\n\r\n  /**\r\n   * 转换为Entity可识别的路径\r\n   * 根：[]\r\n   * 主表：['id:xxx', 'name'],\r\n   * 关联：['id:xxx', 'deptInfo', 'id:xxx', 'name']\r\n   * UDT: ['id:xxx', 'updateInfo', ':', 'createdOn']\r\n   * 从表：['id:xxx', 'edus', 'id:xxx', 'name'],\r\n   * 从从表：['id:xxx', 'edus', 'id:xxx', 'grades', 'id:xxx', 'name']\r\n   */\r\n  public static convertToEntityPathArray(path: string, bindingData: BindingData): string[] {\r\n    const bindingPathArray: string[] = this.convertToBindingPathArray(path);\r\n    const entityPathArray: string[] = [];\r\n\r\n    if (bindingPathArray.length === 0) {\r\n      return entityPathArray;\r\n    }\r\n\r\n    // 根节点\r\n    let currentBindingObject = bindingData.list.currentItem;\r\n    entityPathArray.push(\r\n      this.createPrimaryKeyPath(currentBindingObject.primaryKey, currentBindingObject.primaryKeyValue)\r\n    );\r\n\r\n    bindingPathArray.forEach((propName: string) => {\r\n      const propInfo = PropertyUtil.getPropertyByName(currentBindingObject.properties, propName);\r\n      switch (propInfo.type) {\r\n        case BindingPropertyType.Plain:\r\n          entityPathArray.push(propName);\r\n          break;\r\n        case BindingPropertyType.Object:\r\n          currentBindingObject = currentBindingObject[propName];\r\n          entityPathArray.push(propName);\r\n          entityPathArray.push(\r\n            this.createPrimaryKeyPath(currentBindingObject.primaryKey, currentBindingObject.primaryKeyValue)\r\n          );\r\n          break;\r\n        case BindingPropertyType.List:\r\n          const currentBindingList = currentBindingObject[propName];\r\n          currentBindingObject = currentBindingList.currentItem;\r\n          entityPathArray.push(propName);\r\n          entityPathArray.push(\r\n            this.createPrimaryKeyPath(currentBindingObject.primaryKey, currentBindingObject.primaryKeyValue)\r\n          );\r\n          break;\r\n        default:\r\n            break;\r\n      }\r\n    });\r\n\r\n    return entityPathArray;\r\n  }\r\n\r\n  /**\r\n   * 转换为RestUrl里的路径\r\n   *\r\n   * 返回结果：\r\n   * 主表（/）：/\r\n   * 从表（/jiwtEdus）：/xxx/jiwtEdus\r\n   * 从从表（/jiwtEdus/jiwtGrades）： /xxx/jiwtEdus/xxx/jiwtGrades\r\n   */\r\n  public static convertToRestUrl(path: string, bindingData: BindingData): string {\r\n    const bindingPathArray: string[] = this.convertToBindingPathArray(path);\r\n    const restPathArray: string[] = [];\r\n\r\n    let currentBindingObject = bindingData.list.currentItem;\r\n    restPathArray.push(currentBindingObject.primaryKeyValue);\r\n\r\n    bindingPathArray.forEach((propName: string) => {\r\n      const propInfo = PropertyUtil.getPropertyByName(currentBindingObject.properties, propName);\r\n      if (propInfo.type !== BindingPropertyType.List) {\r\n        throw new Error(`${propInfo.name}不是子表对应的属性`);\r\n      }\r\n      const currentBindingList = currentBindingObject[propName];\r\n      currentBindingObject = currentBindingList.currentItem;\r\n      restPathArray.push(propName);\r\n      restPathArray.push(currentBindingObject.primaryKeyValue);\r\n    });\r\n\r\n    // 移除最后一个主键\r\n    restPathArray.pop();\r\n    return '/' + restPathArray.join('/');\r\n  }\r\n\r\n  /**\r\n   * 获取叶子节点的Path\r\n   */\r\n  public static getLeafPath(path: string): string {\r\n    const pathArray = DataPathUtil.convertToBindingPathArray(path);\r\n    return pathArray.pop();\r\n  }\r\n\r\n  /**\r\n   * 获取父路径\r\n   */\r\n  public static getParentPath(path: string): string {\r\n    const pathArray = DataPathUtil.convertToBindingPathArray(path);\r\n    pathArray.pop();\r\n    return '/' + pathArray.join('/');\r\n  }\r\n\r\n  /**\r\n   * 创建路径中的主键部分\r\n   */\r\n  private static createPrimaryKeyPath(primaryKey: string, primaryKeyValue: string) {\r\n    return `${primaryKey}:${primaryKeyValue}`;\r\n  }\r\n}\r\n\r\nexport { DataPathUtil };\r\n","// tslint:disable: max-line-length\r\nimport { UID } from './uid';\r\n\r\n/**\r\n * GUID创建服务\r\n * @scope 静态类没有提供Provider\r\n */\r\nexport class Guid {\r\n\r\n    private constructor(guid: string) {\r\n        if (!guid) { throw new TypeError('Invalid argument; `value` has no value.'); }\r\n\r\n        this.value = Guid.EMPTY;\r\n\r\n        if (guid) {\r\n            this.value = guid;\r\n        }\r\n    }\r\n\r\n    public static validator = new RegExp('^[a-z0-9]+$', 'i');\r\n\r\n    public static EMPTY = '';\r\n\r\n    private value: string;\r\n\r\n    public static isGuid(guid: any) {\r\n        const value: string = guid.toString();\r\n        return guid && (guid instanceof Guid || Guid.validator.test(value));\r\n    }\r\n\r\n    public static create(): Guid {\r\n        return new Guid(UID.create());\r\n    }\r\n\r\n    public static createEmpty(): Guid {\r\n        return new Guid('');\r\n    }\r\n\r\n    public static parse(guid: string): Guid {\r\n        return new Guid(guid);\r\n    }\r\n\r\n    public static raw(): string {\r\n        return UID.create();\r\n    }\r\n\r\n    public equals(other: Guid): boolean {\r\n        // Comparing string `value` against provided `guid` will auto-call\r\n        // toString on `guid` for comparison\r\n        return Guid.isGuid(other) && this.value === other.toString();\r\n    }\r\n\r\n    public isEmpty(): boolean {\r\n        return this.value === Guid.EMPTY;\r\n    }\r\n\r\n    public toString(): string {\r\n        return this.value;\r\n    }\r\n\r\n    public toJSON(): any {\r\n        return {\r\n            value: this.value,\r\n        };\r\n    }\r\n}\r\n","import { RunMode } from \"../core\";\r\n\r\nexport class RunModeService {\r\n  private static mode: RunMode = null;\r\n  public static setRunMode(mode: RunMode) {\r\n    RunModeService.mode = mode;\r\n  }\r\n  public static getRunMode() {\r\n    return RunModeService.mode;\r\n  }\r\n}","import { Observable, Subject, from } from 'rxjs';\r\nimport { tap } from 'rxjs/operators';\r\nimport { NgFieldProperty, NgListProperty, NgObjectProperty, NgDynamicProperty, FieldMetadataUtil } from './metadata/index';\r\nimport { Modification, ModifyType, ChangeSet } from '../changeset/index';\r\nimport { PARENT_PATH, PARENT_CLASS, Dynamic } from './types';\r\nimport { EntityList } from './entity_list';\r\nimport { EntityFactory } from './entity_factory';\r\nimport { Validator, ValidationResult, ValidateRule } from './validator/index';\r\nimport { ValidationUtils } from './validator/validation_utils';\r\nimport { BigNumberType, RunMode } from '../core/types';\r\nimport { UserSettingsService } from '../i18n/user_settings_service';\r\nimport { ZonedTime } from '../i18n/zoned_time';\r\nimport { FrameContext } from '../frame/index';\r\nimport { RunModeService } from '../misc';\r\n/**\r\n * @author Lucas Huang\r\n * 实体抽象基类，所有实体必须扩展自Entity\r\n *\r\n * ### 使用示例\r\n * ```\r\n * export class UserEntity extends Entity {\r\n *    userId: string;\r\n *    userName: string;\r\n *\r\n *    constructor(data: any){\r\n *        super(data);\r\n *    }\r\n * }\r\n * ```\r\n */\r\nexport abstract class Entity {\r\n  // #region 私有、保护属性\r\n\r\n  /**\r\n   * 验证错误集合\r\n   */\r\n  private validErrors = {};\r\n  private primaryFieldMetadata: NgFieldProperty = null;\r\n  private originalData = undefined;\r\n  /**\r\n   * 验证器\r\n   */\r\n  private validator: Validator<any>;\r\n\r\n  /**\r\n   * 增量变更集合\r\n   */\r\n  protected changeSet = new ChangeSet();\r\n\r\n  /**\r\n   * 是否正在验证\r\n   */\r\n  protected isValidating = false;\r\n\r\n  /**\r\n   * 新数据\r\n   */\r\n  protected newData = undefined;\r\n  /**\r\n   * 销毁流\r\n   */\r\n  public unsubscribe:Subject<any> = new Subject();\r\n  // #endregion\r\n\r\n\r\n  // #region 公有属性\r\n\r\n  /**\r\n   * 变更流\r\n   */\r\n  public valueChanged = new Subject<Modification>();\r\n\r\n  /**\r\n   * 属性值改变时触发\r\n   *\r\n   * ### 使用示例\r\n   * ```\r\n   *  const entity = new UserEntity(data);\r\n   *  entity.onValueChanged.subscribe((data: Modification) => {\r\n   *      console.log(data);\r\n   *  })\r\n   *\r\n   * ```\r\n   *\r\n   * @event\r\n   */\r\n  public onValueChanged = this.valueChanged.asObservable();\r\n  public onUpdate = new Subject<Modification>();\r\n  /**\r\n   * 返回JSON格式的数据\r\n   */\r\n  public get data(): any {\r\n    return this.newData;\r\n  }\r\n  public set data(value: any){\r\n    this.newData = value;\r\n  }\r\n  /**\r\n   * 验证错误集合\r\n   */\r\n  public get errors() {\r\n    return this.validErrors;\r\n  }\r\n\r\n  public set errors(errors: any) {\r\n    this.validErrors = errors;\r\n  }\r\n\r\n  /**\r\n   * 实体变更集\r\n   */\r\n  public get changes(): Modification[] {\r\n    return this.changeSet.changes;\r\n  }\r\n  /**\r\n   * 实体主键元数据\r\n   */\r\n\r\n  public get primaryProperty(): NgFieldProperty {\r\n    if (!this.primaryFieldMetadata) {\r\n      this.primaryFieldMetadata = FieldMetadataUtil.getPrimaryFieldMetadata(this.constructor);\r\n    }\r\n    return this.primaryFieldMetadata;\r\n  }\r\n\r\n  /**\r\n   * 主键\r\n   * @todo\r\n   * 1、没有主键时返回''不合理，应该返回undefined\r\n   */\r\n  public get primaryKey(): string {\r\n    if (this.primaryProperty) {\r\n      return this.primaryProperty.property;\r\n    } else {\r\n      return '';\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 实体主键值\r\n   * 1、没有主键时返回''不合理，应该返回undefined\r\n   */\r\n  public get primaryValue(): string {\r\n    if (this.primaryKey) {\r\n      // return this[this.primaryProperty.property].toString();\r\n      const primaryValue = this[this.primaryProperty.property];\r\n      return primaryValue ? primaryValue : '';\r\n    } else {\r\n      return '';\r\n    }\r\n  }\r\n\r\n  // #endregion\r\n\r\n\r\n  /**\r\n   * @param data JSON数据\r\n   */\r\n  constructor(data: any) {\r\n    this.validator = new Validator();\r\n    this.newData = Object.assign({}, data);\r\n    this.originalData = Object.assign({}, data);\r\n    this.onValueChanged = this.valueChanged;\r\n    // this.onValueChanged = this.valueChanged.pipe(\r\n    //     scan((x: Modification, curr: Modification) => {\r\n    //         if (x) {\r\n    //             if (isEqual(x.path, curr.path) && x.type === curr.type) {\r\n    //                 return Object.assign(x, curr);\r\n    //             }\r\n    //             return curr;\r\n    //         }\r\n    //         return curr;\r\n    //     })\r\n    // );\r\n    if (RunModeService.getRunMode() === RunMode.compatible) {\r\n      this.initialize();\r\n    }\r\n    // this.validate();\r\n  }\r\n\r\n\r\n  // #region 公有方法\r\n\r\n  /**\r\n   * 将变更记录保存至变更集中\r\n   * @param value 变更记录\r\n   */\r\n  public setChanges(value: Modification): void {\r\n    const propertyName = value.path[value.path.length - 1];\r\n\r\n    // @todo：事件会从下级向上冒泡，change可能是下级的，不能和当前Entity的newData合并。\r\n    // this.newData = Object.assign(this.newData, { [propertyName]: value.value });\r\n\r\n    this.valueChanged.next(value);\r\n    if (!(this.validErrors && Object.keys(this.validErrors).includes(propertyName))) {\r\n      if (value && value.changeSetValue !== undefined) {\r\n        value = JSON.parse(JSON.stringify(value));\r\n        value.value = value.changeSetValue;\r\n      }\r\n      this.changeSet.append(value);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 校验实体各属性的值\r\n   * @param propertyName 属性名称，如果为空，则验证实体中所有设置了验证规则的属性\r\n   * @returns Observable<ValidationResult>\r\n   * ### 示例\r\n   * ```\r\n   *  const entity = new UserEntity(data);\r\n   *  entity.validate().subscribe(result =>{\r\n   *      if(result.isValid){\r\n   *          ...\r\n   *      } else {\r\n   *          console.log(result.message);\r\n   *      }\r\n   *  })\r\n   *\r\n   * ```\r\n   */\r\n\r\n  // tslint:disable-next-line: max-line-length\r\n  public validate(propertyName?: string, value?, externalRules?: Map<string, ValidateRule[]>, index?: number, frameContext?: FrameContext): Observable<ValidationResult> {\r\n    return from(this.validator.validate(this, propertyName, value, externalRules, index, frameContext)).pipe(\r\n      tap(result => {\r\n        if (!result.isValid) {\r\n          this.validErrors = ValidationUtils.convertErrorsToNormalObject(result.errors, {});\r\n        } else {\r\n          this.validErrors = {};\r\n        }\r\n      })\r\n    );\r\n  }\r\n\r\n  public validateAll(validateContext?: Map<string, ValidateRule[]>) {\r\n\r\n  }\r\n\r\n  // 用于在entity_util中调用，如果有错误，会将验证结果传入回调cb\r\n  public validateFromUtil(propertyName: string, value, cb, context?: any) {\r\n    this.validErrors = {};\r\n    from(this.validator.validate(this, propertyName, value, null, undefined, context && context.frameContext || null)).subscribe(result => {\r\n      if (!result.isValid) {\r\n        this.validErrors = ValidationUtils.convertErrorsToNormalObject(result.errors, {});\r\n      }\r\n      // 不应重新赋值，这里仅是实体校验通过\r\n      /*else {\r\n        // 如果BindingObject上的属性值和Entity上对应属性值一样，则不再设置\r\n        if (this[propertyName] === value) {\r\n          return;\r\n        }\r\n        this[propertyName] = value;\r\n      }*/\r\n      cb(result);\r\n    });\r\n  }\r\n  /**\r\n   * 同步校验\r\n   * @param propertyName \r\n   * @param value \r\n   * @param cb \r\n   */\r\n  public validateFromUtilSync(propertyName: string, value: any, cb: any, context?: any) {\r\n    this.validErrors = {};\r\n    const result: any = this.validator.verify(this, propertyName, value, null, undefined, context && context.frameContext || null, true);\r\n    if (result && !result.isValid) {\r\n      this.validErrors = ValidationUtils.convertErrorsToNormalObject(result.errors, {});\r\n    }\r\n    cb(result);\r\n  }\r\n  public getPaths() {\r\n    const pathObj = {\r\n      path: [],\r\n      isUdt: false,\r\n      isGrid: false\r\n    };\r\n    const handleParent = item => {\r\n      const parentPaths = item[PARENT_PATH];\r\n      if (parentPaths) {\r\n        const prop = parentPaths[parentPaths.length - 1];\r\n        // 父级所在实体包含的ngObject，存在当前实体字段，则判断为UDt字段\r\n        if (Object.keys(FieldMetadataUtil.getNgObjects(item[PARENT_CLASS].constructor)).indexOf(prop) > -1) {\r\n          pathObj.isUdt = true;\r\n        }\r\n        // 存在类型为ngList，则判断为grid\r\n        if (item instanceof EntityList === true) {\r\n          pathObj.isGrid = true;\r\n        } else {\r\n          pathObj.path.push(prop);\r\n        }\r\n\r\n      }\r\n      if (item[PARENT_CLASS]) {\r\n        handleParent(item[PARENT_CLASS]);\r\n      }\r\n    };\r\n    handleParent(this);\r\n    pathObj.path = pathObj.path.reverse();\r\n    return pathObj;\r\n  }\r\n  public getEntityListPath() {\r\n    let paths = [];\r\n    const handleParent = (item: Entity) => {\r\n      const parentPaths = item[PARENT_PATH];\r\n      if (parentPaths) {\r\n        if (item instanceof EntityList === true) {\r\n          const path = parentPaths.concat([]).reverse();\r\n          Array.prototype.push.apply(paths, path);\r\n        }\r\n      }\r\n      if (item[PARENT_CLASS]) {\r\n        handleParent(item[PARENT_CLASS]);\r\n      }\r\n    };\r\n    handleParent(this);\r\n    return paths.reverse();\r\n  }\r\n  public getMainEntityPrimaryValue() {\r\n    let item = this;\r\n    while (item[PARENT_CLASS]) {\r\n      item = item[PARENT_CLASS];\r\n    }\r\n    return item.primaryValue;\r\n  }\r\n  /**\r\n   * 加载数据\r\n   * @param data 新数据\r\n   */\r\n  public load(data: any, options: any = {}) {\r\n    if (!data) {\r\n      data = {};\r\n    }\r\n    this.loadFields(data);\r\n    if (!options || (options && options.loadChild !== false)) {\r\n      this.loadLists(data);\r\n    }\r\n    this.loadObjects(data);\r\n    this.loadDynamicObjects(data);\r\n    this.newData = Object.assign({}, data);\r\n    this.originalData = Object.assign({}, data);\r\n  }\r\n  /**\r\n   * 转换为JSON\r\n   * @param buildChanges 是否构造变更集\r\n   * @param includeMultiLanguageField 是否包含多语字段\r\n   */\r\n  public toJSON(buildChanges?: boolean) {\r\n    const result = {};\r\n\r\n    // 简单属性\r\n    const ngFields = FieldMetadataUtil.getNgFields(this.constructor);\r\n    Object.keys(ngFields).forEach((propName: string) => {\r\n      const ngField = ngFields[propName];\r\n      const dataField = ngField.dataField || propName;\r\n      if (buildChanges === true && ngField.enableTimeZone === true) {\r\n        result[dataField] = this.data[propName];\r\n      } else {\r\n        result[dataField] = this[propName];\r\n      }\r\n    });\r\n\r\n    // 对象属性\r\n    const ngObjects = FieldMetadataUtil.getNgObjects(this.constructor);\r\n    Object.keys(ngObjects).forEach((propName: string) => {\r\n      const ngObject = ngObjects[propName];\r\n      const dataField = ngObject.dataField || propName;\r\n      result[dataField] = this[propName] ? this[propName].toJSON(buildChanges) : {};\r\n    });\r\n\r\n    // 动态属性\r\n    const ngDynamics = FieldMetadataUtil.getNgDynamic(this.constructor);\r\n    Object.keys(ngDynamics).forEach((propName: string) => {\r\n      const ngDynamic = ngDynamics[propName];\r\n      const dataField = ngDynamic.dataField || propName;\r\n      result[dataField] = this[propName] ? this[propName].toJSON(buildChanges) : {};\r\n    });\r\n\r\n    // 列表属性\r\n    const ngLists = FieldMetadataUtil.getNgList(this.constructor);\r\n    Object.keys(ngLists).forEach((propName: string) => {\r\n      const ngList = ngLists[propName];\r\n      const dataField = ngList.dataField || propName;\r\n      result[dataField] = this[propName] ? this[propName].toJSON(buildChanges) : {};\r\n    });\r\n\r\n    return result;\r\n  }\r\n\r\n  // #endregion\r\n\r\n\r\n  //#region 实体初始化相关private方法\r\n\r\n  /**\r\n   * 初始化实体\r\n   */\r\n  private initialize() {\r\n    const constructor = this.constructor;\r\n\r\n    const ngFields = FieldMetadataUtil.getNgFields(constructor);\r\n    const ngObjects = FieldMetadataUtil.getNgObjects(constructor);\r\n    const ngLists = FieldMetadataUtil.getNgList(constructor);\r\n    const ngDynamic = FieldMetadataUtil.getNgDynamic(constructor);\r\n\r\n    this.initializeNormalField(ngFields);\r\n    this.initializeList(ngLists);\r\n    this.initializeObject(ngObjects);\r\n    this.initializeDynamic(ngDynamic);\r\n  }\r\n\r\n  /**\r\n   * 创建path\r\n   * @param propertyName 属性名称\r\n   */\r\n  protected createPath(propertyName: string): string[] {\r\n    const primaryFieldMetadata = this.primaryProperty;\r\n    if (primaryFieldMetadata) {\r\n      const primaryDataField = primaryFieldMetadata.dataField;\r\n      return [primaryDataField + ':' + this.primaryValue, propertyName];\r\n    } else {\r\n      return [':', propertyName];\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 属性字段初始化\r\n   * @param ngFields 属性字段元数据\r\n   */\r\n  private initializeNormalField(ngFields: { [key: string]: NgFieldProperty }): void {\r\n    Object.keys(ngFields).forEach(propName => {\r\n      const ngField = ngFields[propName] as NgFieldProperty;\r\n      const dataField = ngField.dataField || propName;\r\n\r\n      if (delete this[propName]) {\r\n        Object.defineProperty(this, propName, {\r\n          get: function () {\r\n            const value = this.getPropValue(propName, ngField);\r\n            return value;\r\n          },\r\n          set: function (newPropValue) {\r\n            // 值相同时不触发变更。\r\n            const oldPropValue = this.getPropValue(propName, ngField);\r\n            if (this.isPropValueChanged(propName, ngField, newPropValue, oldPropValue) === false) {\r\n              return;\r\n            }\r\n            this.setPropValue(propName, ngField, newPropValue);\r\n            const changeSetValue = this.preparePropValue(propName, ngField, newPropValue);\r\n            this.emitValueChange(propName, ngField, newPropValue, oldPropValue, changeSetValue);\r\n          }\r\n        });\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * 初始化列表类型的元数据\r\n   * @param ngListMetadata 列表类型元数据\r\n   */\r\n  private initializeList(ngListMetadata: { [key: string]: NgListProperty }): void {\r\n    Object.keys(ngListMetadata).forEach(propertyName => {\r\n      const fieldMetadata = ngListMetadata[propertyName] as NgListProperty;\r\n      const path = this.createPath(propertyName);\r\n      const dataField = fieldMetadata.dataField || propertyName;\r\n      const val = this.data[dataField];\r\n\r\n      const entityList = new EntityList<typeof fieldMetadata.type>();\r\n      entityList[PARENT_CLASS] = this;\r\n      entityList[PARENT_PATH] = path;\r\n\r\n      if (val) {\r\n        const entities = val.map(v => EntityFactory<typeof fieldMetadata.type>(fieldMetadata.type, v));\r\n        entityList.loadEntities(entities);\r\n      }\r\n\r\n      entityList.onListChanged.subscribe(value => {\r\n        if (value) {\r\n          if (entityList[PARENT_PATH][0] !== value.path[0]) {\r\n            value.path = entityList[PARENT_PATH].concat(value.path);\r\n          }\r\n          this.setChanges(value);\r\n        }\r\n      });\r\n      this[propertyName] = entityList;\r\n    });\r\n  }\r\n  /**\r\n   * 初始化子对象\r\n   * @param ngObjectMetadata 子对象元数据\r\n   */\r\n  private initializeObject(ngObjectMetadata: { [key: string]: NgObjectProperty }) {\r\n    Object.keys(ngObjectMetadata).forEach(propertyName => {\r\n      const fieldMetadata = ngObjectMetadata[propertyName] as NgObjectProperty;\r\n      const path = this.createPath(propertyName);\r\n      const dataField = fieldMetadata.dataField || propertyName;\r\n\r\n      // val不存在时，用空对象代替\r\n      const val = this.data[dataField] || {};\r\n\r\n      const createEntityFromJsonData = (value: any) => {\r\n        let instance;\r\n        if (value instanceof fieldMetadata.type) {\r\n          instance = value;\r\n        } else {\r\n          instance = EntityFactory(fieldMetadata.type, value);\r\n        }\r\n        instance[PARENT_CLASS] = this;\r\n        instance[PARENT_PATH] = path;\r\n\r\n        instance.onValueChanged.subscribe(changes => {\r\n          if (changes) {\r\n            changes.path = (this[PARENT_PATH] || []).concat(changes.path);\r\n            this.setChanges(changes);\r\n          }\r\n        });\r\n\r\n        return instance;\r\n      };\r\n\r\n      // 如果没有值用一个空对象代替\r\n      let childEntity = createEntityFromJsonData(val);\r\n      if (delete this[propertyName]) {\r\n        Object.defineProperty(this, propertyName, {\r\n          get: () => {\r\n            return childEntity;\r\n          },\r\n          set: function (value: any) {\r\n            const modifyInfo = {\r\n              path: childEntity[PARENT_PATH],\r\n              value: value.data,\r\n              preValue: this[propertyName].data,\r\n              type: ModifyType.ValueChange\r\n            };\r\n            childEntity = createEntityFromJsonData(value);\r\n            this.setChanges(modifyInfo);\r\n          }\r\n        });\r\n      }\r\n    });\r\n  }\r\n\r\n  private initializeDynamic(ngDynamicMetadata: { [key: string]: NgDynamicProperty }) {\r\n    Object.keys(ngDynamicMetadata).forEach(propertyName => {\r\n      const fieldMetadata = ngDynamicMetadata[propertyName] as NgDynamicProperty;\r\n      const path = this.createPath(propertyName);\r\n      const dataField = fieldMetadata.dataField || propertyName;\r\n\r\n      const originalData = this.data[dataField] || {};\r\n\r\n      const createEntityFromJsonData = (value: any) => {\r\n        let instance;\r\n        if (value instanceof fieldMetadata.type) {\r\n          instance = value;\r\n        } else {\r\n          instance = EntityFactory(fieldMetadata.type, value);\r\n        }\r\n        instance[PARENT_CLASS] = this;\r\n        instance[PARENT_PATH] = path;\r\n\r\n        instance.onValueChanged.subscribe(changes => {\r\n          if (changes) {\r\n            changes.path = (this[PARENT_PATH] || []).concat(changes.path);\r\n            this.setChanges(changes);\r\n          }\r\n        });\r\n\r\n        return instance;\r\n      };\r\n\r\n      let dynamicEntity = createEntityFromJsonData(originalData);\r\n      if (delete this[propertyName]) {\r\n        Object.defineProperty(this, propertyName, {\r\n          get: function () {\r\n            return dynamicEntity;\r\n          },\r\n          set: function (value) {\r\n            const modifyInfo = {\r\n              path: dynamicEntity[PARENT_PATH],\r\n              value: value.data,\r\n              preValue: this[propertyName].data,\r\n              type: ModifyType.ValueChange\r\n            };\r\n            dynamicEntity = createEntityFromJsonData(value);\r\n            this.setChanges(modifyInfo);\r\n          }\r\n        });\r\n      }\r\n    });\r\n  }\r\n\r\n  //#endregion\r\n\r\n\r\n  // #region 加载实体数据相关private、projected方法\r\n\r\n  /**\r\n   * 加载简单字段值\r\n   * @todo 临时用修改的方式模拟\r\n   */\r\n  protected loadFields(data: any) {\r\n    const ngFields = FieldMetadataUtil.getNgFields(this.constructor);\r\n    Object.keys(ngFields).forEach((propName: string) => {\r\n      const ngField = ngFields[propName];\r\n      const dataField = ngField.dataField || propName;\r\n      // if (ngField.primary === false) {\r\n      //   this[propName] = data[dataField];\r\n      // }\r\n      let propValue = data[dataField];\r\n      if (ngField.enableTimeZone === true) {\r\n        const timeZoneOffset = UserSettingsService.getTimeZoneOffset();\r\n        if (timeZoneOffset !== null && propValue) {\r\n          propValue = ZonedTime.zonedTimeToSpecialTimeZoneOffsetTimeString(propValue, timeZoneOffset);\r\n        }\r\n      }\r\n      this[propName] = propValue;\r\n    });\r\n  }\r\n\r\n  /**\r\n   * 加载子列表数据\r\n   * @param data 数据\r\n   */\r\n  protected loadLists(data: any) {\r\n    const ngLists = FieldMetadataUtil.getNgList(this.constructor);\r\n    Object.keys(ngLists).forEach((propName: string) => {\r\n      const ngList = ngLists[propName];\r\n      const dataField = ngList.dataField || propName;\r\n      const entityType = ngList.type;\r\n\r\n      // 创建实体\r\n      const listData = data[dataField];\r\n      if (listData) {\r\n        const entities = listData.map((entityData: any) => {\r\n          return EntityFactory<typeof entityType>(entityType, entityData);\r\n        });\r\n        this[propName].loadEntities(entities);\r\n      } else {\r\n        this[propName].loadEntities([]);\r\n      }\r\n    });\r\n  }\r\n\r\n  private loadObjects(data: any) {\r\n    const ngObjects = FieldMetadataUtil.getNgObjects(this.constructor);\r\n    Object.keys(ngObjects).forEach((propName: string) => {\r\n      const ngObject = ngObjects[propName];\r\n      const dataField = ngObject.dataField || propName;\r\n      const objectData = data[dataField];\r\n      const entity = this[propName] as Entity;\r\n      if (!entity || !objectData) {\r\n        return;\r\n      }\r\n      entity.load(objectData);\r\n    });\r\n  }\r\n\r\n  protected loadDynamicObjects(data: any) {\r\n    const ngDynamicObjects = FieldMetadataUtil.getNgDynamic(this.constructor);\r\n    Object.keys(ngDynamicObjects).forEach((propName: string) => {\r\n      const ngDynamicObject = ngDynamicObjects[propName];\r\n      const dataField = ngDynamicObject.dataField || propName;\r\n\r\n      const dynamicData = data[dataField] || {};\r\n      const dynamicEntity = this[propName] as Dynamic;\r\n      if (!dynamicEntity) {\r\n        return;\r\n      }\r\n      dynamicEntity.loadDynamicData(dynamicData);\r\n    });\r\n  }\r\n\r\n  // #endregion\r\n\r\n  // #region 私有工具方法\r\n\r\n\r\n  /**\r\n   * 发送值变更\r\n   */\r\n  private emitValueChange(propName: string, propMetadata: NgFieldProperty, newPropValue: any, oldPropValue: any, changeSetValue: any = undefined): void {\r\n    const change = {\r\n      path: this.createPath(propName),\r\n      value: newPropValue,\r\n      changeSetValue,\r\n      preValue: oldPropValue,\r\n      type: ModifyType.ValueChange\r\n    };\r\n\r\n    if (this[PARENT_PATH]) {\r\n      change.path = this[PARENT_PATH].concat(change.path);\r\n    }\r\n    this.setChanges(change);\r\n  }\r\n  /**\r\n   * 准备提交给后端的属性值\r\n   * @param propName 属性\r\n   * @param propMetadata 属性描述\r\n   * @param propValue 属性值\r\n   */\r\n  private preparePropValue(propName: string, propMetadata: NgFieldProperty, propValue: any) {\r\n    let value = undefined;\r\n    // 只要启用时区，传给后端的时间就必须带时区，因此当获取用户时区失败的时候，获取浏览器当前时区\r\n    if (propMetadata.enableTimeZone === true) {\r\n      const timeZoneOffset = UserSettingsService.getTimeZoneOffset();\r\n      if (timeZoneOffset !== null && propValue) {\r\n        value = ZonedTime.timeZoneOffsetTimeToUtcTimeString(propValue, timeZoneOffset);\r\n      }\r\n    }\r\n    return value;\r\n  }\r\n  /**\r\n   * 获取属性值\r\n   */\r\n  private getPropValue(propName: string, propMetadata: NgFieldProperty) {\r\n    const dataField = propMetadata.dataField || propName;\r\n    let value = this.data[dataField];\r\n\r\n    // 对多语录入字段，query不返回问题进行兼容\r\n    if (propMetadata.enableMultiLangInput === true && !value) {\r\n      const langCode = window.localStorage.getItem('languageCode') || 'zh-CHS';\r\n      const originDataField = dataField.replace('_MULTILANGUAGE', '');\r\n      return {\r\n        [langCode]: this.data[originDataField]\r\n      };\r\n    }\r\n    // 启用时区\r\n    if (propMetadata.enableTimeZone === true) {\r\n      const timeZoneOffset = UserSettingsService.getTimeZoneOffset();\r\n      if (timeZoneOffset !== null && value) {\r\n        return ZonedTime.zonedTimeToSpecialTimeZoneOffsetTimeString(value, timeZoneOffset);\r\n      }\r\n    }\r\n    if (propMetadata.originalDataFieldType === BigNumberType) {\r\n      value = value && value.toString() || null;\r\n    }\r\n    return value;\r\n  }\r\n\r\n  /**\r\n   * 设置属性值\r\n   */\r\n  private setPropValue(propName: string, propMetadata: NgFieldProperty, propValue: any) {\r\n    const dataField = propMetadata.dataField || propName;\r\n    if (propMetadata.originalDataFieldType === BigNumberType) {\r\n      this.data[dataField] = propValue === null ? null : propValue && propValue.toString() || '';\r\n    } else {\r\n      if (propMetadata.enableTimeZone === true) {\r\n        const timeZoneOffset = UserSettingsService.getTimeZoneOffset();\r\n        if (timeZoneOffset !== null && propValue) {\r\n          propValue = ZonedTime.timeZoneOffsetTimeToUtcTimeString(propValue, timeZoneOffset);\r\n        }\r\n      }\r\n      this.data[dataField] = propValue;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 检查属性值是否发生变化\r\n   */\r\n  private isPropValueChanged(propName: string, propMetadata: NgFieldProperty, newPropValue: any, oldPropValue: any) {\r\n    if (propMetadata.enableMultiLangInput === true) {\r\n      if (this.isEmptyMultiLangPropValue(newPropValue) === true && this.isEmptyMultiLangPropValue(oldPropValue) === true) {\r\n        return false;\r\n      }\r\n      return JSON.stringify(newPropValue) !== JSON.stringify(oldPropValue);\r\n    } else if (propMetadata.originalDataFieldType === BigNumberType) {\r\n      if (typeof newPropValue !== 'string' && newPropValue !== null && newPropValue !== undefined) {\r\n        newPropValue = newPropValue.toString();\r\n      }\r\n      return newPropValue !== oldPropValue;\r\n    } else {\r\n      return newPropValue !== oldPropValue;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 多语录入字段的值是否为空\r\n   */\r\n  private isEmptyMultiLangPropValue(value: any) {\r\n    if (!value) {\r\n      return true;\r\n    }\r\n\r\n    const keys = Object.keys(value);\r\n    if (keys.length === 0) {\r\n      return true;\r\n    }\r\n\r\n    // 值全部为空，视为空\r\n    const vals = Object.values(value);\r\n    const allEmptyVal = vals.every((val) => {\r\n      return !val;\r\n    });\r\n    if (allEmptyVal === true) {\r\n      return true;\r\n    }\r\n\r\n    return false;\r\n  }\r\n  // #endregion\r\n}\r\n","import { ModifyType, Modification } from '../changeset/types';\r\nimport { PARENT_PATH, Dynamic, PARENT_CLASS } from './types';\r\nimport { Entity } from './entity';\r\nimport { takeUntil } from 'rxjs/operators';\r\n\r\n/**\r\n * 支持动态字段集合的动态实体\r\n */\r\nexport class DynamicEntity extends Entity implements Dynamic {\r\n\r\n  /**\r\n   * 是否是嵌套的动态实体\r\n   */\r\n  public get IsNested(): boolean {\r\n    return this[PARENT_CLASS] instanceof DynamicEntity;\r\n  }\r\n\r\n  /**\r\n   * @param data JSON数据\r\n   */\r\n  constructor(data: any) {\r\n    super(data);\r\n    this.loadDynamicData(data);\r\n  }\r\n\r\n  public loadDynamicData(dynamicData: any) {\r\n    this.initializeDynamicField(dynamicData);\r\n    // super.loadFields(dynamicData);\r\n  }\r\n\r\n  /**\r\n   * 初始化动态数据\r\n   * @param dynamicData 动态数据\r\n   */\r\n  private initializeDynamicField(dynamicData: any): void {\r\n    // 遍历动态数据的key，创建动态实体属性。\r\n    Object.keys(dynamicData).forEach(propertyName => {\r\n      const dataField = propertyName;\r\n      if (delete this[propertyName]) {\r\n        if (dynamicData[propertyName] instanceof Object) {\r\n          const path = this.createPath(propertyName);\r\n          let dynamicEntity = this.createDynamicEntityFromJsonData(dynamicData[propertyName], path);\r\n          // this.constructor['__prop__metadata__'] = this.constructor['__prop__metadata__'] || {};\r\n          // NgObject({\r\n          //     /** 字段名称 */\r\n          //     dataField: propertyName,\r\n          //     /** 原始字段名称 */\r\n          //     originalDataField: propertyName,\r\n          //     /** 是否为外键 */\r\n          //     type: DynamicEntity\r\n          // })(this, propertyName);\r\n          Object.defineProperty(this, propertyName, {\r\n            get: function () {\r\n              return dynamicEntity;\r\n            },\r\n            set: function (value) {\r\n              const modifyInfo = {\r\n                path: dynamicEntity[PARENT_PATH],\r\n                value: value.data,\r\n                preValue: this[propertyName].data,\r\n                type: ModifyType.ValueChange\r\n              };\r\n              dynamicEntity = this.createDynamicEntityFromJsonData(value, path);\r\n              this.setChanges(modifyInfo);\r\n            }\r\n          });\r\n        } else {\r\n          // this.constructor['__prop__metadata__'] = this.constructor['__prop__metadata__'] || {};\r\n          // NgField({\r\n          //     /** 字段名称 */\r\n          //     dataField: propertyName,\r\n          //     /** 原始字段名称 */\r\n          //     originalDataField: propertyName,\r\n          //     /** 是否为主键 */\r\n          //     primary: false,\r\n          //     /** 是否为外键 */\r\n          //     foreign: false\r\n          // })(this, propertyName);\r\n          Object.defineProperty(this, propertyName, {\r\n            // 定义返回数据方法。\r\n            get: function () {\r\n              // 从初始数据返回字段值。\r\n              return this.data[dataField];\r\n            },\r\n            set: function (value) {\r\n              // 值相同时不触发变更。\r\n              const oldValue = this.data[dataField];\r\n              if (oldValue === value) {\r\n                return;\r\n              }\r\n              // 更新元数据数据。\r\n              this.data[dataField] = value;\r\n              // 变更集\r\n              const changes = {\r\n                type: ModifyType.ValueChange,\r\n                path: this.createPath(propertyName),\r\n                value: value,\r\n                preValue: oldValue\r\n              };\r\n\r\n              if (this[PARENT_PATH]) {\r\n                changes.path = this[PARENT_PATH].concat(changes.path);\r\n              }\r\n              this.setChanges(changes);\r\n            }\r\n          });\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  private createDynamicEntityFromJsonData(value: any, parentPath: string[]) {\r\n    let instance: DynamicEntity;\r\n    if (value instanceof DynamicEntity) {\r\n      instance = value;\r\n    } else {\r\n      instance = new DynamicEntity(value);\r\n      instance.constructor = DynamicEntity;\r\n    }\r\n    instance[PARENT_CLASS] = this;\r\n    instance[PARENT_PATH] = parentPath;\r\n    instance.onValueChanged.pipe(takeUntil(this.unsubscribe)).subscribe(changes => {\r\n      if (changes) {\r\n        changes.path = (this[PARENT_PATH] || []).concat(changes.path);\r\n        this.setChanges(changes);\r\n      }\r\n    });\r\n\r\n    return instance;\r\n  }\r\n\r\n  /**\r\n   * 将变更记录保存至变更集中\r\n   * @param value 变更记录\r\n   * @todo\r\n   * 1、preValue的处理有问题，下级传递上来的变更这样可以，根DyanmicaEntity上的，data已经发生变化，prevalue和value是一样了；\r\n   * 2、当value是下级冒泡上来的，需要根据value去更新当前层级的data，该逻辑不应该放在setChagnes，待修改。\r\n   */\r\n  setChanges(value: Modification): void {\r\n    const propertyName = value.path[value.path.length - 1];\r\n    const preValue = Object.assign({}, this.data);\r\n    this.newData = Object.assign(this.newData, { [propertyName]: value.value });\r\n    let parentPath = value.path;\r\n    if (value.path.length > 2) {\r\n      parentPath = value.path.slice(0, value.path.length - 2);\r\n    }\r\n\r\n    // 统一不使用构造函数（保持和其他位置对Modification的构造一致）\r\n    // const parentModification = new Modification(this.data, value.type, parentPath, preValue);\r\n    const parentModification: Modification = {\r\n      path: parentPath,\r\n      value: this.data,\r\n      preValue: preValue,\r\n      type: value.type,\r\n      dynamic: true\r\n    };\r\n\r\n    this.valueChanged.next(parentModification);\r\n    this.changeSet.append(value);\r\n  }\r\n\r\n  /**\r\n   * toJSON\r\n   */\r\n  public toJSON() {\r\n    return this.data;\r\n  }\r\n}\r\n","import { EnumData, FormVariable } from './dom-entity';\r\n\r\nexport interface SchemaType {\r\n    name: string;\r\n    fields?: SchemaEntityField[];\r\n    entities?: SchemaEntity[];\r\n    primary?: string;\r\n}\r\n\r\n/**\r\n * schema\r\n */\r\nexport class Schema {\r\n    public dataSource?: string;\r\n    public sourceUri: string;\r\n    public id: string;\r\n    public code: string;\r\n    public name: string;\r\n    public entities: SchemaEntity[];\r\n    public variables: SchemaEntityField[];\r\n    public eapiId: string;\r\n    public extendProperties: { enableStdTimeFormat: boolean };\r\n}\r\n\r\n/**\r\n * 实体\r\n */\r\nexport class SchemaEntity {\r\n    public id: string;\r\n    public code: string;\r\n    public name: string;\r\n    public label: string;\r\n    public type: SchemaEntityType;\r\n}\r\n\r\n/**\r\n * 实体类型对象\r\n */\r\nexport class SchemaEntityType implements SchemaType {\r\n    public name: string;\r\n    public primary: string;\r\n    public fields: SchemaEntityField[];\r\n    public entities?: SchemaEntity[];\r\n    public displayName?: string;\r\n}\r\n\r\n/**\r\n * 字段\r\n */\r\nexport class SchemaEntityField {\r\n    public $type: SchemaEntityField$Type;\r\n    public id: string;\r\n    public originalId: string;\r\n    public code: string;\r\n    public label: string;\r\n    public bindingField: string;\r\n    public name: string;\r\n    public defaultValue: any;\r\n    public require: boolean;\r\n    public readonly: boolean;\r\n    public type: SchemaEntityFieldType;\r\n    public editor?: SchemaEntityFieldEditor;\r\n    public path?: string;\r\n    public bindingPath?: string;\r\n    public multiLanguage?: boolean;\r\n\r\n    // 表达式\r\n    public expression?: any;\r\n}\r\n\r\n/**\r\n * 字段类型对象\r\n */\r\nexport class SchemaEntityFieldType implements SchemaType {\r\n    public $type: SchemaEntityFieldType$Type;\r\n    public name: SchemaEntityFieldTypeName | any;\r\n    public length?: number;\r\n    public precision?: number;\r\n    public valueType?: SchemaEntityFieldType;\r\n    public enumValues?: EnumData[];\r\n    public fields?: SchemaEntityField[];\r\n    public displayName?: string;\r\n    public primary?: string;\r\n    public entities?: SchemaEntity[];\r\n    // 用于区分日期/日期事件和整型/浮点型数据\r\n    public elementType?: any;\r\n\r\n\r\n    // 扩展属性:  运行时定制用\r\n    public extendProperty?: any;\r\n}\r\n\r\n/**\r\n * 字段编辑器对象\r\n */\r\nexport class SchemaEntityFieldEditor {\r\n    public $type: any;\r\n    [propName: string]: any;\r\n}\r\n\r\n\r\n/**\r\n * 字段类型枚举\r\n */\r\nexport enum SchemaEntityField$Type {\r\n    /**\r\n     * 简单类型字段\r\n     */\r\n    SimpleField = 'SimpleField',\r\n    /**\r\n     * 关联/UDT类型字段\r\n     */\r\n    ComplexField = 'ComplexField'\r\n}\r\n\r\n/**\r\n * 字段类型对象中的类型枚举\r\n */\r\nexport enum SchemaEntityFieldType$Type {\r\n\r\n    /**\r\n     * 字符串\r\n     */\r\n    StringType = 'StringType',\r\n    /**\r\n     * 备注\r\n     */\r\n    TextType = 'TextType',\r\n    /**\r\n     * 数字（整数、浮点数）\r\n     */\r\n    NumericType = 'NumericType',\r\n    /**\r\n     * 布尔\r\n     */\r\n    BooleanType = 'BooleanType',\r\n    /**\r\n     * 日期\r\n     */\r\n    DateType = 'DateType',\r\n\r\n    /**\r\n     * 日期时间\r\n     */\r\n    DateTimeType = 'DateTimeType',\r\n\r\n    /**\r\n     * 枚举\r\n     */\r\n    EnumType = 'EnumType',\r\n    /**\r\n     * 实体类\r\n     */\r\n    EntityType = 'EntityType',\r\n\r\n    /**\r\n     * 分级码\r\n     */\r\n    HierarchyType = 'HierarchyType',\r\n\r\n    /**\r\n     * 对象\r\n     */\r\n    ObjectType = 'ObjectType',\r\n\r\n    /**\r\n     * 数字（大数据）\r\n     */\r\n    BigNumericType = 'BigNumericType'\r\n}\r\n\r\n\r\n/**\r\n * 字段类型中的名称\r\n */\r\nexport enum SchemaEntityFieldTypeName {\r\n    /**\r\n     * 简单类型字段\r\n     */\r\n    String = 'String',\r\n    /**\r\n     * 日期时间\r\n     */\r\n    DateTime = 'DateTime',\r\n    /**\r\n     * 日期\r\n     */\r\n    Date = 'Date',\r\n    /**\r\n     * 枚举\r\n     */\r\n    Enum = 'Enum',\r\n    /**\r\n     * 布尔\r\n     */\r\n    Boolean = 'Boolean',\r\n\r\n    /**\r\n     * 数字\r\n     */\r\n    Number = 'Number',\r\n\r\n    /**\r\n     * 备注\r\n     */\r\n    Text = 'Text',\r\n\r\n    /**\r\n     * 大数字\r\n     */\r\n    BigNumber = 'BigNumber'\r\n}\r\n","import { InjectionToken } from '@angular/core';\r\n\r\n/**\r\n * 实体取数服务\r\n */\r\ninterface EntityDataService {\r\n\r\n  /**\r\n   * 新增子实体\r\n   * @param path 子实体路径\r\n   */\r\n  addChild(childPath: string);\r\n\r\n  /**\r\n   * 删除子实体\r\n   * @param path 子实体路径\r\n   * @param id 待删除子实体id\r\n   */\r\n  removeChild(childPath: string, id: string);\r\n\r\n}\r\n\r\nconst ENTITY_DATA_SERVICE_TOKEN = new InjectionToken<EntityDataService>('@farris/devkit ENTITY_DATA_SERVICE');\r\n\r\nexport { EntityDataService, ENTITY_DATA_SERVICE_TOKEN };\r\n","import { from, Observable } from 'rxjs';\r\nimport { tap } from 'rxjs/operators';\r\nimport { Modification, ModifyType } from '../changeset';\r\nimport { UserSettingsService } from '../i18n/user_settings_service';\r\nimport { ZonedTime } from '../i18n/zoned_time';\r\nimport { SchemaEntity, SchemaEntityField } from '../schema/schema';\r\nimport { Entity } from './entity';\r\nimport { EntityList } from './entity_list';\r\nimport { FieldMetadataUtil } from './metadata/field_metadata_util';\r\nimport { PARENT_CLASS, PARENT_PATH } from './types';\r\nimport { ValidateRule, ValidationResult } from './validator/types';\r\nimport { ValidationUtils } from './validator/validation_utils';\r\n\r\nexport const entityPrototype = {\r\n  /**\r\n   * 获取属性值\r\n   */\r\n  getFieldValue: function(schemaField: SchemaEntityField) {\r\n    const fieldName = schemaField.label;\r\n    const value = this.data[fieldName];\r\n    // 对多语录入字段，query不返回问题进行兼容\r\n    if (schemaField.multiLanguage === true && !value) {\r\n      const langCode = window.localStorage.getItem('languageCode') || 'zh-CHS';\r\n      const originDataField = fieldName.replace('_MULTILANGUAGE', '');\r\n      return {\r\n        [langCode]: this.data[originDataField]\r\n      };\r\n    }\r\n    return value;\r\n  },\r\n  /**\r\n   * 设置属性值\r\n   */\r\n  setFieldValue: function(schemaField: SchemaEntityField, propertyValue: any) {\r\n    const fieldName = schemaField.label;\r\n    this.data[fieldName] = propertyValue;\r\n  },\r\n  /**\r\n   * 获取复杂类型对象的值\r\n   * @param schemaField Schema字段描述\r\n   * @returns 复杂类型对象的值\r\n   */\r\n  getComplexFieldValue: function(schemaField: SchemaEntityField) {\r\n    const fieldName = schemaField.label;\r\n    const objectPropertyValue = this.innerEntities[fieldName];\r\n    return objectPropertyValue;\r\n  },\r\n  /**\r\n   * 向实体复杂类型字段赋值\r\n   * @param schemaField Schema字段描述\r\n   * @param ComplexField 复杂类型字段的类型定义\r\n   * @param propertyValue 属性值\r\n   */\r\n  setComplexFieldValue: function(schemaField: SchemaEntityField, ComplexField: any, propertyValue: any) {\r\n    // 提取字段名\r\n    const fieldName = schemaField.label;\r\n    let complexFieldInstance = null;\r\n    if (propertyValue instanceof ComplexField) {\r\n      complexFieldInstance = propertyValue;\r\n    } else {\r\n      complexFieldInstance = new ComplexField(propertyValue);\r\n      complexFieldInstance.constructor = ComplexField;\r\n    }\r\n    // 提取复杂类型对象的值\r\n    const objectPropertyValue = this.innerEntities[fieldName];\r\n    const propertyPath = (objectPropertyValue && objectPropertyValue[PARENT_PATH]) || complexFieldInstance[PARENT_PATH];\r\n    // 构造变更信息\r\n    const changeInfo = {\r\n      // 提取变更对象相对于根实体的路径\r\n      path: propertyPath,\r\n      // 记录对象最新值\r\n      value: propertyValue,\r\n      // 记录对象历史值\r\n      preValue: (this[fieldName] && this[fieldName].data) || null,\r\n      // 标记这是一个值变化变更\r\n      type: ModifyType.ValueChange\r\n    };\r\n    // 创建新的对象\r\n    this.innerEntities[fieldName] = complexFieldInstance;\r\n    // this.innerEntities[fieldName] = new ComplexField(propertyValue);\r\n    // 记录本次数据变更\r\n    if (!this.isInitializing) {\r\n      this.setChanges(changeInfo);\r\n    }\r\n  },\r\n  /**\r\n   * 获取指定的子实体列表\r\n   * @param schemaEntity 实体描述\r\n   * @returns 子实体列表\r\n   */\r\n  getEntities: function(schemaEntity: SchemaEntity) {\r\n    const dataField = schemaEntity.label;\r\n    const listPropertyValue = this.innerEntities[dataField];\r\n    return listPropertyValue;\r\n  },\r\n  /**\r\n   * 更新指定子实体的值\r\n   * @param schemaEntity 实体描述\r\n   * @param propertyValue 实体列表\r\n   */\r\n  setEntities: function(schemaEntity: SchemaEntity, propertyValue: any) {\r\n    const dataField = schemaEntity.label;\r\n    this.innerEntities[dataField] = propertyValue;\r\n  },\r\n  /**\r\n   * 检查属性值是否发生变化\r\n   */\r\n  isFieldValueChanged: function(schemaField: SchemaEntityField, newPropValue: any, oldPropValue: any) {\r\n    if (schemaField.multiLanguage === true) {\r\n      if (this.isEmptyMultiLangPropValue(newPropValue) === true && this.isEmptyMultiLangPropValue(oldPropValue) === true) {\r\n        return false;\r\n      }\r\n      return JSON.stringify(newPropValue) !== JSON.stringify(oldPropValue);\r\n    } else {\r\n      return newPropValue !== oldPropValue;\r\n    }\r\n  },\r\n  /**\r\n   * 多语录入字段的值是否为空\r\n   */\r\n  isEmptyMultiLangPropValue(value: any) {\r\n    if (!value) {\r\n      return true;\r\n    }\r\n\r\n    const keys = Object.keys(value);\r\n    if (keys.length === 0) {\r\n      return true;\r\n    }\r\n\r\n    // 值全部为空，视为空\r\n    const vals = Object.values(value);\r\n    const allEmptyVal = vals.every((val) => {\r\n      return !val;\r\n    });\r\n    if (allEmptyVal === true) {\r\n      return true;\r\n    }\r\n\r\n    return false;\r\n  },\r\n  /**\r\n   * 发送值变更\r\n   */\r\n  emitFieldValueChange: function(schemaField: SchemaEntityField, newPropValue: any, oldPropValue: any): void {\r\n    if (!this.isInitializing) {\r\n      const fieldName = schemaField.label;\r\n      const changeInfo = {\r\n        path: this.createPath(fieldName),\r\n        value: newPropValue,\r\n        preValue: oldPropValue,\r\n        type: ModifyType.ValueChange\r\n      };\r\n\r\n      if (this[PARENT_PATH]) {\r\n        changeInfo.path = this[PARENT_PATH].concat(changeInfo.path);\r\n      }\r\n      this.setChanges(changeInfo);\r\n    }\r\n  },\r\n  /**\r\n   * 将变更记录保存至变更集中\r\n   * @param value 变更记录\r\n   */\r\n  setChanges: function(value: Modification): void {\r\n    const propertyName = value.path[value.path.length - 1];\r\n\r\n    // @todo：事件会从下级向上冒泡，change可能是下级的，不能和当前Entity的newData合并。\r\n    // this.newData = Object.assign(this.newData, { [propertyName]: value.value });\r\n\r\n    this.valueChanged.next(value);\r\n    if (!(this.validErrors && Object.keys(this.validErrors).includes(propertyName))) {\r\n      this.changeSet.append(value);\r\n    }\r\n  },\r\n  /**\r\n   * 创建path\r\n   * @param propertyName 属性名称\r\n   */\r\n  createPath: function(propertyName: string): string[] {\r\n    if (this.primaryKey) {\r\n      return [this.primaryKey + ':' + this.primaryValue, propertyName];\r\n    } else {\r\n      return [':', propertyName];\r\n    }\r\n  },\r\n  getPaths() {\r\n    const pathObj = {\r\n      path: [],\r\n      isUdt: false,\r\n      isGrid: false\r\n    };\r\n    const handleParent = item => {\r\n      const parentPaths = item[PARENT_PATH];\r\n      if (parentPaths) {\r\n        const prop = parentPaths[parentPaths.length - 1];\r\n        // 父级所在实体包含的ngObject，存在当前实体字段，则判断为UDt字段\r\n        if (Object.keys(FieldMetadataUtil.getNgObjects(item[PARENT_CLASS].constructor)).indexOf(prop) > -1) {\r\n          pathObj.isUdt = true;\r\n        }\r\n        // 存在类型为ngList，则判断为grid\r\n        if (item instanceof EntityList === true) {\r\n          pathObj.isGrid = true;\r\n        } else {\r\n          pathObj.path.push(prop);\r\n        }\r\n\r\n      }\r\n      if (item[PARENT_CLASS]) {\r\n        handleParent(item[PARENT_CLASS]);\r\n      }\r\n    };\r\n    handleParent(this);\r\n    pathObj.path = pathObj.path.reverse();\r\n    return pathObj;\r\n  },\r\n  validate(propertyName?: string, value?, externalRules?: Map<string, ValidateRule[]>, index?: number): Observable<ValidationResult> {\r\n    return from(this.validator.validate(this, propertyName, value, externalRules, index)).pipe(\r\n      tap((result: any) => {\r\n        if (!result.isValid) {\r\n          this.validErrors = ValidationUtils.convertErrorsToNormalObject(result.errors, {});\r\n        } else {\r\n          this.validErrors = {};\r\n        }\r\n      })\r\n    );\r\n  },\r\n  validateAll(validateContext?: Map<string, ValidateRule[]>) {\r\n\r\n  },\r\n  /**\r\n   * 用于在entity_util中调用，如果有错误，会将验证结果传入回调cb\r\n   */\r\n  validateFromUtil(propertyName: string, value: any, cb: any) {\r\n    this.validErrors = {};\r\n    from(this.validator.validate(this, propertyName, value)).subscribe((result: any) => {\r\n      if (!result.isValid) {\r\n        this.validErrors = ValidationUtils.convertErrorsToNormalObject(result.errors, {});\r\n      }\r\n      // 不应重新赋值，这里仅是实体校验通过\r\n      /*else {\r\n        // 如果BindingObject上的属性值和Entity上对应属性值一样，则不再设置\r\n        if (this[propertyName] === value) {\r\n          return;\r\n        }\r\n        this[propertyName] = value;\r\n      }*/\r\n      cb(result);\r\n    });\r\n  },\r\n  /**\r\n   * 将实体数据转换为JSON格式\r\n   */\r\n  toJSON(buildChanges?: boolean) {\r\n    // 声明转换初始值\r\n    const result = {};\r\n    // 提取简单类型字段的值\r\n    const ngFields = FieldMetadataUtil.getNgFields(this.constructor);\r\n    Object.keys(ngFields).forEach((propName: string) => {\r\n      const ngField = ngFields[propName];\r\n      const dataField = ngField.dataField || propName;\r\n      if (buildChanges === true && ngField.enableTimeZone === true) {\r\n        result[dataField] = this.data[propName];\r\n      } else {\r\n        result[dataField] = this[propName];\r\n      }\r\n    });\r\n    // 提取对象类型字段的值\r\n    const ngObjects = FieldMetadataUtil.getNgObjects(this.constructor);\r\n    Object.keys(ngObjects).forEach((propName: string) => {\r\n      const ngObject = ngObjects[propName];\r\n      const dataField = ngObject.dataField || propName;\r\n      result[dataField] = this[propName] ? this[propName].toJSON(buildChanges) : {};\r\n    });\r\n    // 提取动态属性字段的值\r\n    const ngDynamics = FieldMetadataUtil.getNgDynamic(this.constructor);\r\n    Object.keys(ngDynamics).forEach((propName: string) => {\r\n      const ngDynamic = ngDynamics[propName];\r\n      const dataField = ngDynamic.dataField || propName;\r\n      result[dataField] = this[propName] ? this[propName].toJSON(buildChanges) : {};\r\n    });\r\n    // 提取列表字段的属性\r\n    const ngLists = FieldMetadataUtil.getNgList(this.constructor);\r\n    Object.keys(ngLists).forEach((propName: string) => {\r\n      const ngList = ngLists[propName];\r\n      const dataField = ngList.dataField || propName;\r\n      result[dataField] = this[propName] ? this[propName].toJSON(buildChanges) : {};\r\n    });\r\n\r\n    return result;\r\n  }\r\n};\r\n","import { Subject } from 'rxjs';\r\nimport { ChangeSet, Modification } from '../changeset';\r\nimport { Schema, SchemaEntity, SchemaEntityField, SchemaEntityField$Type, SchemaType } from '../schema/schema';\r\nimport { Entity } from './entity';\r\nimport { EntityList } from './entity_list';\r\nimport { entityPrototype } from './entity_prototype';\r\nimport { NG_FIELD, NG_LIST, NG_OBJECT } from './metadata';\r\nimport { PARENT_CLASS, PARENT_PATH } from './types';\r\nimport { Validator } from './validator';\r\nimport { ValidationUtils } from './validator/validation_utils';\r\n\r\nexport interface AbstractEntityType {\r\n  typeName: string;\r\n  types: any;\r\n  __prop__metadata__: any;\r\n}\r\n\r\n/**\r\n * 实体类型工厂\r\n * 用来根据实体Schema描述信息创建实体类型\r\n */\r\nexport class EntityTypeFactory {\r\n\r\n  constructor() { }\r\n  /**\r\n   * 由实体Schema结构创建实体类型\r\n   * @param schema 实体Schema结构\r\n   * @returns 实体类型\r\n   */\r\n  public create(schema: Schema) {\r\n    // 提取Schema定义中的第一个是实体描述\r\n    const schemaType = schema.entities[0].type;\r\n    // 创建实体类型\r\n    const entityType = this.createClass(schemaType);\r\n    return entityType;\r\n  }\r\n  /**\r\n   * 由实体Schema类型描述创建实体类\r\n   * @param schemaType Schema实体类型描述\r\n   * @returns 实体类型\r\n   */\r\n  private createClass(schemaType: SchemaType) {\r\n    const attachEntityInstanceData = this.createEntityInstanceDataInitializer(schemaType);\r\n    // 创建指定实体类型的初始化函数，用来在实体类型构造函数中为实体实例赋值\r\n    const initialize = (entityInstance: any, entityData: any, entityTypeConstructor: any) => {\r\n      entityInstance.isInitializing = true;\r\n      attachEntityInstanceData(entityInstance, entityData, entityTypeConstructor);\r\n      entityInstance.isInitializing = false;\r\n    };\r\n    // 声明实体类构造函数\r\n    const ConcreteEntity = function (data: any) {\r\n      // 创建实体变更集\r\n      this.changeSet = new ChangeSet();\r\n      // 初始化实体验证状态\r\n      this.isValidating = false;\r\n      // 设置unsubscribe 取消订阅事件\r\n      this.unsubscribe = new Subject();\r\n      // 初始化实体验证信息\r\n      this.validErrors = {};\r\n      // 初始化验证器\r\n      this.validator = new Validator();\r\n      // 初始化实体数据副本\r\n      this.innerData = Object.assign({}, data);\r\n      // 初始化子实体对象集合\r\n      this.innerEntities = {};\r\n      // 初始化实体值变化事件\r\n      this.valueChanged = new Subject<Modification>();\r\n      this.onValueChanged = this.valueChanged;\r\n      this.validateFromUtilSync = function (propertyName, value, cb, context) {\r\n        this.validErrors = {};\r\n        const result = this.validator.verify(this, propertyName, value, null, undefined, context && context.frameContext || null, true);\r\n        if (result && !result.isValid) {\r\n          this.validErrors = ValidationUtils.convertErrorsToNormalObject(result.errors, {});\r\n        }\r\n        cb(result);\r\n      };\r\n      // 调用初始化方法，初始化实体数据\r\n      initialize(this, data, ConcreteEntity);\r\n      this.load = (newData: any) => {\r\n        attachEntityInstanceData(this, newData, ConcreteEntity);\r\n      };\r\n    };\r\n    // 在实体类构造函数中记录视图类型名称\r\n    ConcreteEntity.typeName = `${schemaType.name}Entity`;\r\n    // 在实体类构造函数中记录其下直接引用的子类型\r\n    ConcreteEntity.types = {};\r\n    ConcreteEntity.__prop__metadata__ = {};\r\n\r\n    // 构造实体类的原型对象\r\n    const entityTypePrototype = Object.assign({ typeName: 'ConcreteEntityPrototype' }, entityPrototype);\r\n    // 向实体类原型对象中定义预制属性\r\n    this.definePresetProperty(entityTypePrototype, schemaType);\r\n    // 向实体类原型对象中定义字段属性get/set方法\r\n    this.defineFieldsToPrototype(entityTypePrototype, schemaType.fields, schemaType.primary, ConcreteEntity);\r\n    // 向实体类原型对象中定义访问子实体的get/set方法\r\n    this.defineEntitiesToPrototype(entityTypePrototype, schemaType.entities, ConcreteEntity);\r\n    // 将实体类的原型对象指向新构造的原型对象。\r\n    ConcreteEntity.prototype = entityTypePrototype;\r\n\r\n\r\n\r\n    return ConcreteEntity;\r\n  }\r\n  /**\r\n   * 向实体类原型对象中定义预制属性\r\n   * @param prototypeObject 实体类原型对象\r\n   * @param schemaType Schema类型描述\r\n   */\r\n  private definePresetProperty(prototypeObject: any, schemaType: SchemaType) {\r\n    /**\r\n     * 实体数据\r\n     */\r\n    Object.defineProperty(prototypeObject, 'data', {\r\n      get: function () {\r\n        if (!this.innerData) {\r\n          this.innerData = {};\r\n        }\r\n        return this.innerData;\r\n      },\r\n      set: function (value) {\r\n        this.innerData = value;\r\n      }\r\n    });\r\n    /**\r\n     * 实体验证信息\r\n     */\r\n    Object.defineProperty(prototypeObject, 'errors', {\r\n      get: function () {\r\n        return this.validErrors;\r\n      },\r\n      set: function (errors: any) {\r\n        this.validErrors = errors;\r\n      }\r\n    });\r\n    /**\r\n     * 实体变更集\r\n     */\r\n    Object.defineProperty(prototypeObject, 'changes', {\r\n      get: function () {\r\n        return this.changeSet.changes;\r\n      }\r\n    });\r\n    /**\r\n     * 实体主键\r\n     */\r\n    Object.defineProperty(prototypeObject, 'primaryProperty', {\r\n      // tslint:disable-next-line: only-arrow-functions\r\n      get: function () {\r\n        // return schemaType.primary;\r\n        return prototypeObject.innerPrimaryProperty || { dataField: schemaType.primary };\r\n      }\r\n    });\r\n    /**\r\n     * 实体主键\r\n     */\r\n    Object.defineProperty(prototypeObject, 'primaryKey', {\r\n      // tslint:disable-next-line: only-arrow-functions\r\n      get: function () {\r\n        return schemaType.primary || '';\r\n      }\r\n    });\r\n    /**\r\n     * 实体主键的值\r\n     */\r\n    Object.defineProperty(prototypeObject, 'primaryValue', {\r\n      get: function () {\r\n        if (this.primaryKey) {\r\n          // return this[this.primaryProperty.property].toString();\r\n          const primaryValue = this[this.primaryKey];\r\n          return primaryValue ? primaryValue : '';\r\n        } else {\r\n          return '';\r\n        }\r\n      }\r\n    });\r\n  }\r\n  /**\r\n   * 向实体类定义字段属性\r\n   * @param prototypeObject 实体类原型对象\r\n   * @param fields 字段描述集合\r\n   * @param parentEntityType 父类型\r\n   */\r\n  private defineFieldsToPrototype(\r\n    prototypeObject: any,\r\n    fields: SchemaEntityField[],\r\n    primary: string,\r\n    parentEntityType: AbstractEntityType\r\n  ): void {\r\n    if (fields && fields.length) {\r\n      // 遍历Schema中描述的字段，在实体原型对象上定义字段访问函数\r\n      fields.forEach(schemaEntityField => {\r\n        switch (schemaEntityField.$type) {\r\n          // 定义简单类型字段\r\n          case SchemaEntityField$Type.SimpleField:\r\n            this.defineSimpleFieldToPrototype(prototypeObject, schemaEntityField, primary, parentEntityType);\r\n            break;\r\n          // 定义复杂类型字段\r\n          case SchemaEntityField$Type.ComplexField:\r\n            this.defineComplexFieldToPrototype(prototypeObject, schemaEntityField, parentEntityType);\r\n            break;\r\n        }\r\n      });\r\n    }\r\n  }\r\n  /**\r\n   * 向实体类定义简单类型字段\r\n   * @param prototypeObject 实体类原型对象\r\n   * @param schemaField 字段描述\r\n   */\r\n  private defineSimpleFieldToPrototype(\r\n    prototypeObject: any,\r\n    schemaField: SchemaEntityField,\r\n    primary: string,\r\n    parentEntityType: AbstractEntityType\r\n  ) {\r\n    const propertyName = schemaField.label;\r\n    Object.defineProperty(prototypeObject, propertyName, {\r\n      get: function () {\r\n        return this.getFieldValue(schemaField);\r\n      },\r\n      set: function (newPropValue) {\r\n        // 值相同时不触发变更。\r\n        const oldPropValue = this.getFieldValue(schemaField);\r\n        if (this.isFieldValueChanged(schemaField, newPropValue, oldPropValue) === false) {\r\n          return;\r\n        }\r\n        this.setFieldValue(schemaField, newPropValue);\r\n        this.emitFieldValueChange(schemaField, newPropValue, oldPropValue);\r\n      }\r\n    });\r\n    const fieldMetadata = {\r\n      /** 字段名称 */\r\n      dataField: schemaField.label,\r\n      /** 原始字段名称 */\r\n      originalDataField: schemaField.code,\r\n      /** 原始字段类型 */\r\n      originalDataFieldType: schemaField.type.name,\r\n      /**\r\n       * 原始字段\r\n       * @description 对应到scheme的path属性\r\n       */\r\n      path: schemaField.path,\r\n      primary: schemaField.label === primary,\r\n      ngMetadataName: NG_FIELD\r\n    };\r\n    if (fieldMetadata.primary) {\r\n      prototypeObject.innerPrimaryProperty = fieldMetadata;\r\n    }\r\n    if (!parentEntityType.__prop__metadata__[propertyName]) {\r\n      parentEntityType.__prop__metadata__[propertyName] = [];\r\n    }\r\n    parentEntityType.__prop__metadata__[propertyName].push(fieldMetadata);\r\n  }\r\n  /**\r\n   * 向实体类定义复杂类型字段\r\n   * @param prototypeObject 实体类原型对象\r\n   * @param schemaField 字段描述\r\n   * @param parentEntityType 父类型\r\n   */\r\n  private defineComplexFieldToPrototype(prototypeObject: any, schemaField: SchemaEntityField, parentEntityType: AbstractEntityType) {\r\n    const complexFieldType = this.createClass(schemaField.type);\r\n    parentEntityType.types[schemaField.type.name] = complexFieldType;\r\n    const propertyName = schemaField.label;\r\n    Object.defineProperty(prototypeObject, propertyName, {\r\n      get: function () {\r\n        const fieldValue = this.getComplexFieldValue(schemaField);\r\n        return fieldValue;\r\n      },\r\n      set: function (value: any) {\r\n        this.setComplexFieldValue(schemaField, complexFieldType, value);\r\n      }\r\n    });\r\n    const fieldMetadata = {\r\n      /** 映射字段 */\r\n      dataField: schemaField.label,\r\n      /** 原始字段名称 */\r\n      originalDataField: schemaField.code,\r\n      /** 引用实体类型 */\r\n      type: complexFieldType,\r\n      /**\r\n       * 原始字段\r\n       * @description 对应到scheme的path属性\r\n       */\r\n      path: schemaField.path,\r\n      ngMetadataName: NG_OBJECT\r\n    };\r\n    if (!parentEntityType.__prop__metadata__[propertyName]) {\r\n      parentEntityType.__prop__metadata__[propertyName] = [];\r\n    }\r\n    parentEntityType.__prop__metadata__[propertyName].push(fieldMetadata);\r\n  }\r\n  /**\r\n   * 向实体类定义子实体\r\n   * @param prototypeObject 实体类原型对象\r\n   * @param entities 实体描述集合\r\n   * @param parentEntityType 父类型\r\n   */\r\n  private defineEntitiesToPrototype(prototypeObject: any, entities: SchemaEntity[], parentEntityType: AbstractEntityType) {\r\n    if (entities && entities.length) {\r\n      // 遍历Schema中描述的子实体，在实体对象上定义子实体列表\r\n      entities.forEach(schemaEntity => {\r\n        const complexFieldType = this.createClass(schemaEntity.type);\r\n        parentEntityType.types[schemaEntity.type.name] = complexFieldType;\r\n        // 提取子实体在实体对象上的属性名\r\n        const propertyName = schemaEntity.label;\r\n        Object.defineProperty(prototypeObject, propertyName, {\r\n          get: function () {\r\n            const fieldValue = this.getEntities(schemaEntity);\r\n            return fieldValue;\r\n          },\r\n          set: function (value: any) {\r\n            this.setEntities(schemaEntity, value);\r\n          }\r\n        });\r\n        const entitMetadata = {\r\n          /** 字段名称 */\r\n          dataField: schemaEntity.label,\r\n          /** 原始字段名称 */\r\n          originalDataField: '',\r\n          /** 实体类型 */\r\n          type: complexFieldType,\r\n          ngMetadataName: NG_LIST\r\n        };\r\n        if (!parentEntityType.__prop__metadata__[propertyName]) {\r\n          parentEntityType.__prop__metadata__[propertyName] = [];\r\n        }\r\n        parentEntityType.__prop__metadata__[propertyName].push(entitMetadata);\r\n      });\r\n    }\r\n  }\r\n  /**\r\n   * 创建初始化实体对象方法\r\n   * @param schemaType 实体类型描述\r\n   * @returns 初始化实体对象方法\r\n   */\r\n  private createEntityInstanceDataInitializer(schemaType: SchemaType) {\r\n    /**\r\n     * 实体初始化函数，用来初始化实体的复杂类型数据和子实体数据\r\n     * @param entityInstance 实体类型实例\r\n     * @param data 实体原始数据\r\n     * @param entityTypeConstructor 实体类型构造函数\r\n     */\r\n    const initializer = (entityInstance: any, entityData: any, entityTypeConstructor: any) => {\r\n      // 初始化复杂类型字段\r\n      schemaType.fields\r\n        // 过滤复杂类型字段\r\n        .filter(field => field.$type === SchemaEntityField$Type.ComplexField)\r\n        // 遍历复杂类型字段创建对应实体类型数据\r\n        .forEach(field => {\r\n          // 提取字段名\r\n          const fieldName = field.label;\r\n          // 提取实体类型下的所有子实体类型\r\n          const includedEntityTypes = entityTypeConstructor.types;\r\n          // 获取复杂类型字段对应的实体类型\r\n          const ComplexField = includedEntityTypes[field.type.name];\r\n          // 提取复杂类型字段原始数据\r\n          const fieldData = entityData ? entityData[fieldName] : null;\r\n          // 创建复杂类型字段对象路径\r\n          const path = entityInstance.createPath(fieldName);\r\n          let complexFieldValue = entityInstance[fieldName];\r\n          if (complexFieldValue instanceof ComplexField) {\r\n            complexFieldValue.load(fieldData);\r\n          } else {\r\n            // 创建复杂类型字段实体实例\r\n            complexFieldValue = new ComplexField(fieldData);\r\n            complexFieldValue.constructor = ComplexField;\r\n            complexFieldValue[PARENT_CLASS] = entityTypeConstructor;\r\n            complexFieldValue[PARENT_PATH] = path;\r\n            complexFieldValue.onValueChanged.subscribe(changes => {\r\n              if (changes) {\r\n                changes.path = (entityInstance[PARENT_PATH] || []).concat(changes.path);\r\n                entityInstance.setChanges(changes);\r\n              }\r\n            });\r\n            entityInstance[fieldName] = complexFieldValue;\r\n          }\r\n        });\r\n      // 初始化子实体\r\n      if (schemaType.entities) {\r\n        // 遍历子实体创建对应实体类型的数据\r\n        schemaType.entities.forEach(schemaEntity => {\r\n          // 提取子实体名\r\n          const subEntityName = schemaEntity.label;\r\n          // 提取实体类型下的所有子实体类型\r\n          const includedEntityTypes = entityTypeConstructor.types;\r\n          // 创建子实体对象路径\r\n          const path = entityInstance.createPath(subEntityName);\r\n          // 创建子实体对象集合\r\n          let entityList = entityInstance[subEntityName];\r\n          if (!(entityList instanceof EntityList)) {\r\n            entityList = new EntityList<Entity>();\r\n            // 向子实体列表注册子实体变化事件\r\n            entityList.onListChanged.subscribe(value => {\r\n              if (value) {\r\n                if (entityList[PARENT_PATH][0] !== value.path[0]) {\r\n                  value.path = entityList[PARENT_PATH].concat(value.path);\r\n                }\r\n                entityInstance.setChanges(value);\r\n              }\r\n            });\r\n            // 向实体类型实例上直接存储子实体对象列表\r\n            entityInstance[subEntityName] = entityList;\r\n          }\r\n          entityList[PARENT_CLASS] = entityTypeConstructor;\r\n          entityList[PARENT_PATH] = path;\r\n          // 提取子实体类型名称\r\n          const schemaEntityTypeName = schemaEntity.type.name;\r\n          // 获取子实体类型\r\n          const ConcreteEntity = includedEntityTypes[schemaEntityTypeName];\r\n          const originalEntityDataArray = entityData ? entityData[subEntityName] : null;\r\n          // 构造子实体集合\r\n          if (originalEntityDataArray) {\r\n            // 遍历子实体原始数据，构造实体对象集合\r\n            const entities = originalEntityDataArray.map((originalEntityData: any) => {\r\n              const concreteEntityInstance = new ConcreteEntity(originalEntityData);\r\n              concreteEntityInstance.constructor = ConcreteEntity;\r\n              return concreteEntityInstance;\r\n            });\r\n            // 向子实体列表中添加子实体对象\r\n            entityList.loadEntities(entities);\r\n          }\r\n        });\r\n      }\r\n    };\r\n    return initializer;\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpParams } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\n\r\nexport type RestfulMethod = 'GET' | 'PUT' | 'POST' | 'DELETE';\r\n\r\n@Injectable()\r\nexport class RestfulService {\r\n\r\n  /**\r\n   * 构造函数\r\n   * @param httpClient http客户端\r\n   */\r\n  constructor(private httpClient: HttpClient) { }\r\n\r\n  /**\r\n   * 发送GET请求\r\n   * @param uri 请求地址\r\n   * @param params 请求参数\r\n   */\r\n  get(uri: string, params?: object, options?: any): Observable<any[]> {\r\n    return this.request(uri, 'GET', params, options);\r\n  }\r\n\r\n  /**\r\n   * 发送POST请求\r\n   * @param uri 请求地址\r\n   * @param params 请求参数\r\n   */\r\n  put(uri: string, body: any, params?: object, options?: any): Observable<any> {\r\n    const optionsWithBody = this.addBody(options, body);\r\n    return this.request(uri, 'PUT', params, optionsWithBody);\r\n  }\r\n\r\n  /**\r\n   * 发送PUT请求\r\n   * @param uri 请求地址\r\n   * @param params 请求参数\r\n   */\r\n  post(uri: string, body: any, params?: object, options?: any): Observable<any> {\r\n    const optionsWithBody = this.addBody(options, body);\r\n    return this.request(uri, 'POST', params, optionsWithBody);\r\n  }\r\n\r\n  /**\r\n   * 发送DELETE请求\r\n   * @param uri 请求地址\r\n   * @param params 请求参数\r\n   */\r\n  delete(uri: string, params?: object, options?: any): Observable<any> {\r\n    return this.request(uri, 'DELETE', params, options);\r\n  }\r\n\r\n  /**\r\n   * 发送请求\r\n   * @param uri 请求地址\r\n   * @param params 请求参数\r\n   */\r\n  private request(uri: string, method: RestfulMethod, params: object, options: any = {}): Observable<any> {\r\n    options = options || {};\r\n    if (params) {\r\n      const httpParams = this.buildParams(params);\r\n      options.params = httpParams;\r\n    }\r\n    const methodName = method as string;\r\n    const result = this.httpClient.request(methodName, uri, options);\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * 构造Http请求参数\r\n   * @param params 请求参数\r\n   */\r\n  private buildParams(params: object): HttpParams {\r\n    let httpParams = new HttpParams();\r\n    for (const key in params) {\r\n      if (params.hasOwnProperty(key)) {\r\n        const value = params[key].toString();\r\n        httpParams = httpParams.append(key, value);\r\n      }\r\n    }\r\n    return httpParams;\r\n  }\r\n\r\n  private addBody(options: any, body: any) {\r\n    options = options || {};\r\n    const mergedOptions = Object.assign(options, { body: body});\r\n    return mergedOptions;\r\n  }\r\n}\r\n","import { TypeDecorator, makeDecorator, makePropDecorator } from '../metadata/index';\r\n\r\n/**\r\n * ----------------------------------------\r\n * NgCommandHandler\r\n * ----------------------------------------\r\n */\r\n\r\n/**\r\n * 命令处理装饰器名称\r\n */\r\nexport const NG_COMMAND_HANDLER = 'NgCommandHandler';\r\n\r\n/**\r\n * 命令处理描述\r\n */\r\nexport interface NgCommandHandler {\r\n\r\n  /**\r\n   * 要处理的名称\r\n   */\r\n  commandName: string;\r\n}\r\n\r\n/**\r\n * 命令处理装饰器接口\r\n */\r\nexport interface NgCommandHandlerDecorator {\r\n  (handler?: NgCommandHandler): TypeDecorator;\r\n  new(handler?: NgCommandHandler): NgCommandHandler;\r\n}\r\n\r\n/**\r\n * 命令处理装饰器工厂\r\n */\r\n\r\n// export const NgCommandHandler: NgCommandHandlerDecorator =\r\n//   makeDecorator(NG_COMMAND_HANDLER, (handler: NgCommandHandler) => handler);\r\nexport function NgCommandHandler(options: NgCommandHandler) {\r\n  const decoratorFactory = makeDecorator(NG_COMMAND_HANDLER, (handler: NgCommandHandler) => handler);\r\n  return decoratorFactory(options);\r\n  }\r\n\r\n/**\r\n * ----------------------------------------\r\n * NgCommandHandlerExtender\r\n * ----------------------------------------\r\n */\r\n\r\n/**\r\n * 命令处理扩展装饰器名称\r\n */\r\nexport const NG_COMMAND_HANDLER_EXTENDER = 'NgCommandHandlerExtender';\r\n\r\n/**\r\n * 命令处理扩展描述\r\n */\r\nexport interface NgCommandExtender {\r\n  commandName: string;\r\n}\r\n\r\n/**\r\n * 命令处理扩展装饰器接口\r\n */\r\nexport interface NgCommandHandlerExtenderDecorator {\r\n  (extender?: NgCommandExtender): TypeDecorator;\r\n  new(extender?: NgCommandExtender): NgCommandExtender;\r\n}\r\n\r\n/**\r\n * 命令处理扩展装饰器工厂\r\n */\r\nexport function NgCommandHandlerExtender(options: NgCommandExtender) {\r\n  const decoratorFactory = makeDecorator(NG_COMMAND_HANDLER_EXTENDER, (extender: NgCommandExtender) => extender);\r\n  return decoratorFactory(options);\r\n}\r\n","/*\r\n * @Author: aalizzwell \r\n * @Date: 2019-10-25 13:30:52 \r\n * @Last Modified by:   aalizzwell \r\n * @Last Modified time: 2019-10-25 13:30:52 \r\n */\r\nimport { Observable } from 'rxjs';\r\n\r\nconst isObservable = (value) => {\r\n    if (!value) {\r\n        return false;\r\n    }\r\n    if (value[Symbol.observable] && value === value[Symbol.observable]()) {\r\n        return true;\r\n    }\r\n    if (value['@@observable'] && value === value['@@observable']()) {\r\n        return true;\r\n    }\r\n    if (value instanceof Observable) {\r\n        return true;\r\n    }\r\n    return false;\r\n}\r\nexport { isObservable }\r\n","import { Observable, of } from 'rxjs';\r\nimport { CommandContext } from '../command_context';\r\nimport { isObservable } from '../../misc/is-observable';\r\n\r\n/**\r\n * 任务函数\r\n */\r\ntype TaskFunc = (context: CommandContext) => any;\r\n\r\n\r\n/**\r\n * 任务节点\r\n */\r\nclass TaskNode {\r\n\r\n  /**\r\n   * 任务名称\r\n   */\r\n  name: string;\r\n\r\n  /**\r\n   * 任务函数\r\n   */\r\n  func: TaskFunc;\r\n\r\n  /**\r\n   * 构造函数\r\n   */\r\n  constructor(name: string, func: TaskFunc) {\r\n    this.name = name;\r\n    this.func = func;\r\n  }\r\n\r\n  /**\r\n   * 执行任务函数\r\n   */\r\n  execute(context: CommandContext): Observable<any> {\r\n    const result = this.func(context);\r\n    const result$ = isObservable(result) ? result : of(result);\r\n    return result$;\r\n  }\r\n}\r\n\r\nexport { TaskFunc, TaskNode };\r\n","/**\r\n * session变量解析\r\n * @author Witt <jiwt@inspur.com>\r\n */\r\n\r\nimport { Injectable, InjectionToken } from '@angular/core';\r\n\r\n/**\r\n * 变量解析接口\r\n */\r\ninterface VariableParser {\r\n  /**\r\n   * 解析变量\r\n   * @param expression 表达式\r\n   * @param context 上下文\r\n   */\r\n  parse(expression: string, context: any, eventParam?: any): any;\r\n}\r\n\r\nconst VARIABLE_PARSERS = new InjectionToken<VariableParser>('variable parsers');\r\n\r\nexport { VariableParser, VARIABLE_PARSERS };\r\n","/*\r\n * StateMachine变量解析\r\n * @Author: Witt\r\n * @Date: 2018-12-04 17:09:42\r\n * @Last Modified by: Witt\r\n * @Last Modified time: 2019-10-30 11:07:10\r\n */\r\n\r\n// import { AppContext } from '../app/index';\r\n// import { FrameContext } from '../frame/index';\r\n// import { CommandContext } from '../command/index';\r\n\r\n/**\r\n * 解析辅助工具类\r\n */\r\nclass ParseUtil {\r\n\r\n  /**\r\n   * 获取应用上下文\r\n   */\r\n  static getAppContext(context: any): any {\r\n    if (context.typeName === 'CommandContext') {\r\n      return context.frameContext.appContext;\r\n    } else if (context.appContext) {\r\n      return context.appContext;\r\n    } else if (context.typeName === 'AppContext') {\r\n      return context;\r\n    } else {\r\n      throw new Error('上下文中找不到AppContext，请检查！');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 获取当前Frame的Context\r\n   */\r\n  static getFrameContext(context: any) {\r\n    if (context.typeName === 'CommandContext') {\r\n      return context.frameContext;\r\n    } else if (context.typeName === 'FrameContext') {\r\n      return context;\r\n    } else {\r\n      throw new Error('上下文中找不到FrameContext，请检查！');\r\n    }\r\n\r\n  }\r\n\r\n  /**\r\n   * 获取根Frame的Context\r\n   */\r\n  static getRootFrameContext(context: any): any {\r\n    const frameContext = this.getFrameContext(context);\r\n    return frameContext.root;\r\n  }\r\n\r\n  /**\r\n   * 根据frameId获取FrameContext\r\n   */\r\n  static getFrameContextById(context: any, frameId: string): any {\r\n    const appContext = this.getAppContext(context);\r\n    return appContext.frameContextManager.getFrameContextById(frameId);\r\n  }\r\n}\r\n\r\nexport { ParseUtil };\r\n","/**\r\n * 数据源变量解析\r\n * @author Witt <jiwt@inspur.com>\r\n */\r\nimport { Injectable } from '@angular/core';\r\nimport { AppContext } from '../app/index';\r\nimport { VariableParser } from './variable_parser';\r\nimport { ParseUtil } from './parse_util';\r\nimport { escape } from '../core/escape';\r\n/**\r\n * 数据变量解析\r\n */\r\n@Injectable()\r\nclass DataVariableParser implements VariableParser {\r\n\r\n  /**\r\n   * 解析变量\r\n   * @param expression 表达式\r\n   * @param context 上下文\r\n   */\r\n  parse(expression: string, context: any): any {\r\n    const appContext = ParseUtil.getAppContext(context);\r\n    const paths: string[] = this.extractPaths(expression);\r\n\r\n    if (paths.length === 1) {\r\n      const value = this.getValue(paths[0], appContext);\r\n      // 1、单个的表达式：直接求值\r\n      if (expression === `{DATA~${paths[0]}}`) {\r\n        return value;\r\n      } else if (expression === `{:DATA~${paths[0]}}`) {\r\n        // 该内容是JSON的一部分，需要转义特殊字符\r\n        return escape(value);\r\n      }\r\n    }\r\n\r\n    // 2、其他情况：字符串替换\r\n    paths.forEach((path: string) => {\r\n      const replaceValue = this.getValue(path, appContext);\r\n      const searchValue = `{DATA~${path}}`;\r\n      expression = expression.replace(searchValue, replaceValue);\r\n\r\n      const target = `{:DATA~${path}}`;\r\n      if (expression.includes(target)) {\r\n        const value = escape(replaceValue);\r\n        expression = expression.replace(target, value);\r\n      }\r\n    });\r\n\r\n    return expression;\r\n  }\r\n\r\n  /**\r\n   * 提取路径\r\n   */\r\n  private extractPaths(expression: string) {\r\n    const paths: string[] = [];\r\n\r\n    // 查找所有的uiState变量字符串\r\n    const DATA_PATTERN_G = /\\{:?DATA~(\\S+?)\\}/g;\r\n    const dataVariables = expression.match(DATA_PATTERN_G);\r\n    if (dataVariables === null) {\r\n      return [];\r\n    }\r\n\r\n    // 提取后边的路径\r\n    const DATA_PATTERN = /\\{:?DATA~(\\S+?)\\}/;\r\n    dataVariables.forEach(dataVariable => {\r\n      const pathMatches = dataVariable.match(DATA_PATTERN);\r\n      if (pathMatches != null && pathMatches.length === 2) {\r\n        paths.push(pathMatches[1]);\r\n      }\r\n    });\r\n    return paths;\r\n  }\r\n\r\n  /**\r\n   * 获取值\r\n   * @param path 路径：/\r\n   */\r\n  private getValue(path: string, appContext: AppContext): any {\r\n    const parts = path.split('/').filter((part: string) => {\r\n      return part !== '';\r\n    });\r\n\r\n    const frameContext = appContext.getFrameContext(parts[0]);\r\n    if (!frameContext) {\r\n      throw new Error(`${path}不正确，请检查！`);\r\n    }\r\n\r\n    const bindingData = frameContext.bindingData;\r\n    if (!bindingData) {\r\n      throw new Error(`${path}不正确，请检查！`);\r\n    }\r\n    return bindingData.getValue(parts.slice(1));\r\n  }\r\n\r\n\r\n}\r\n\r\nexport { DataVariableParser };\r\n","/**\r\n * session变量解析\r\n * @author Witt <jiwt@inspur.com>\r\n */\r\n\r\nimport { Injectable } from '@angular/core';\r\nimport { VariableParser } from './variable_parser';\r\nimport { AppContext } from '../app/index';\r\nimport { ParseUtil } from './parse_util';\r\nimport { escape } from '../core/escape';\r\n/**\r\n * 数据变量解析\r\n */\r\n@Injectable()\r\nclass UIStateVariableParser implements VariableParser {\r\n\r\n  /**\r\n   * 解析变量\r\n   * @param expression 形如：/frameId/stateName\r\n   * @param context 上下文\r\n   */\r\n  public parse(expression: string, context: any): any {\r\n\r\n    const appContext = ParseUtil.getAppContext(context);\r\n    const paths = this.extractPaths(expression);\r\n\r\n    if (paths.length === 1) {\r\n      const value = this.getUIState(paths[0], appContext);\r\n      // 1、单个的表达式：直接求值\r\n      if (expression === `{UISTATE~${paths[0]}}`) {\r\n        return value;\r\n      } else if (expression === `{:UISTATE~${paths[0]}}`) {\r\n        return escape(value);\r\n      }\r\n    }\r\n\r\n    // 2、其他情况：字符串替换\r\n    paths.forEach(path => {\r\n      const searchValue = `{UISTATE~${path}}`;\r\n      const replaceValue = this.getUIState(path, appContext);\r\n      expression = expression.replace(searchValue, replaceValue);\r\n\r\n      const target = `{:UISTATE~${path}}`;\r\n      if (expression.includes(target)) {\r\n        const value = escape(replaceValue);\r\n        expression = expression.replace(target, value);\r\n      }\r\n    });\r\n\r\n    return expression;\r\n  }\r\n\r\n  /**\r\n   * 提取路径\r\n   * 变量格式：{}\r\n   */\r\n  private extractPaths(expression: string): string[] {\r\n    const paths: string[] = [];\r\n\r\n    // 查找所有的uiState变量字符串\r\n    const UI_STATE_PATTERN_G = /\\{:?UISTATE~(\\S+?)\\}/g;\r\n    const uiStateVariables = expression.match(UI_STATE_PATTERN_G);\r\n    if (uiStateVariables === null) {\r\n      return [];\r\n    }\r\n\r\n    // 提取后边的路径\r\n    const UI_STATE_PATTERN = /\\{:?UISTATE~(\\S+?)\\}/;\r\n    uiStateVariables.forEach((uiStateVariable: string) => {\r\n      const pathMatches = uiStateVariable.match(UI_STATE_PATTERN);\r\n      if (pathMatches != null && pathMatches.length === 2) {\r\n        paths.push(pathMatches[1]);\r\n      }\r\n    });\r\n\r\n    return paths;\r\n  }\r\n\r\n  /**\r\n   * 获取UIState\r\n   */\r\n  private getUIState(path: string, appContext: AppContext) {\r\n    const parts = path.split('/').filter((part: string) => {\r\n      return part !== '';\r\n    });\r\n    const [frameId, stateName] = parts;\r\n    const frameContext = appContext.getFrameContext(frameId);\r\n    let state = frameContext && frameContext.uiState[stateName];\r\n    if (state && state.constructor.toString().startsWith('function Date()')) {\r\n      return this.formatDate(state);\r\n    }\r\n    for (let i = 2; i < parts.length; i++) {\r\n      state = state[parts[i]];\r\n      // 复杂对象一层层查找下去，如果某一层不存在，结果可以是undefined，但是要直接返回undefined避免报错。\r\n      if (!state) {\r\n        return state;\r\n      }\r\n    }\r\n    return state;\r\n  }\r\n\r\n  /**\r\n   * @todo：待删除\r\n   */\r\n  private formatDate(value: Date): string {\r\n    if (!value) {\r\n      return '';\r\n    }\r\n\r\n    // 年\r\n    const year = value.getFullYear();\r\n\r\n    // 月\r\n    let month = (value.getMonth() + 1).toString();\r\n    month = month.length === 1 ? ('0' + month) : month;\r\n\r\n    // 日\r\n    let day = value.getDate().toString();\r\n    day = day.length === 1 ? ('0' + day) : day;\r\n    return `${year}-${month}-${day}`;\r\n  }\r\n}\r\n\r\nexport { UIStateVariableParser };\r\n","/*\r\n * StateMachine变量解析\r\n * @Author: Witt\r\n * @Date: 2018-12-04 17:09:42\r\n * @Last Modified by: Witt\r\n * @Last Modified time: 2019-10-30 11:07:10\r\n */\r\nimport { Injectable } from '@angular/core';\r\nimport { FrameContext } from '../frame/index';\r\nimport { StateMachine } from '../state-machine/index';\r\nimport { VariableParser } from './variable_parser';\r\nimport { ParseUtil } from './parse_util';\r\n\r\n/**\r\n * 状态机变量解析\r\n * @summary\r\n *\r\n * 解析策略：\r\n * 1、不带frameId，从顶层StateMachine中解析\r\n * {STATEMACHINE~/states/key}\r\n * {STATEMACHINE~/renderStates/key}\r\n *\r\n * 2、带frameId，从frameId对应的FrameContext的StateMachine中解析\r\n * {STATEMACHINE~/frameId/states/key}\r\n * {STATEMACHINE~/frameId/renderStates/key}\r\n *\r\n * 存在的问题：\r\n * 1、不带frameId从顶层StateMachine解析仅为了兼容，将来改为从当前FrameContext的StateMachine中解析；\r\n * 2、组合表单中顶层StateMachine是主表单的rootFrameContext的StateMachine，显然不合理（既成事实）；\r\n * 3、farmeId如果是states或renderStates，导致解析失败，几率很小，但又风险。\r\n */\r\n@Injectable()\r\nclass StateMachineVariableParser implements VariableParser {\r\n\r\n  /**\r\n   * 构造函数\r\n   */\r\n  public constructor() {\r\n  }\r\n\r\n  /**\r\n   * 解析变量\r\n   * @param expression 变量：格式形如：/frameId/componentId/stateName\r\n   * @param context 上下文\r\n   */\r\n  public parse(expression: string, context: any): any {\r\n    const paths = this.extractPaths(expression);\r\n\r\n    // 1、单个的表达式：直接求值\r\n    if (paths.length === 1 && expression === `{STATEMACHINE~${paths[0]}}`) {\r\n      return this.getValue(paths[0], context);\r\n    }\r\n\r\n    // 2、其他情况：字符串替换\r\n    paths.forEach( path => {\r\n      const searchValue = `{STATEMACHINE~${path}}`;\r\n      const replaceValue = this.getValue(path, context);\r\n      expression = expression.replace(searchValue, replaceValue);\r\n    });\r\n\r\n    return  expression;\r\n  }\r\n\r\n  /**\r\n   * 提取Session变量名\r\n   * 变量格式：{}\r\n   */\r\n  private extractPaths(expression: string): string[] {\r\n    const paths: string[]  = [];\r\n\r\n    // 查找所有的StateMachine变量字符串\r\n    const STATE_MACHINE_PATTERN_G = /\\{STATEMACHINE~(\\S+?)\\}/g;\r\n    const stateMachineVariables = expression.match(STATE_MACHINE_PATTERN_G);\r\n    if (stateMachineVariables === null) {\r\n      return [];\r\n    }\r\n\r\n    // 提取后边的路径\r\n    const STATE_MACHINE_PATTERN = /\\{STATEMACHINE~(\\S+?)\\}/;\r\n    stateMachineVariables.forEach( sessionVariable =>  {\r\n      const pathMatches = sessionVariable.match(STATE_MACHINE_PATTERN);\r\n      if (pathMatches != null && pathMatches.length === 2) {\r\n        paths.push(pathMatches[1]);\r\n      }\r\n    });\r\n\r\n    return paths;\r\n  }\r\n\r\n  /**\r\n   * 获取对应的值\r\n   */\r\n  private getValue(path: string, context: any): any {\r\n\r\n    const pathObj = this.getPathObj(path);\r\n    const stateMachine = this.getTargetStateMachine(pathObj.frameId, context);\r\n\r\n    if (pathObj.type === 'currentState') {\r\n      return stateMachine.context.state;\r\n    } else if (pathObj.type === 'renderStates') {\r\n      return stateMachine[pathObj.name] as boolean;\r\n    } else {\r\n      throw new Error(`不支类型为${pathObj.type}的状态机变量`);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 解析path，并获取对应的StateMachine实例\r\n   */\r\n  private getTargetStateMachine(frameId: string, context): StateMachine {\r\n    let targetFrameContext: FrameContext;\r\n    if (frameId) {\r\n      targetFrameContext = ParseUtil.getFrameContextById(context, frameId);\r\n    } else {\r\n      targetFrameContext = ParseUtil.getRootFrameContext(context);\r\n    }\r\n\r\n    if (!targetFrameContext || !targetFrameContext.stateMachine) {\r\n      throw new Error('找不到对应的状态机实例，请检查！');\r\n    }\r\n    return targetFrameContext.stateMachine;\r\n  }\r\n\r\n  /**\r\n   * 将Path解析为格式化的Path对象\r\n   */\r\n  private getPathObj(path: string): any {\r\n    let parsedPathObj: any;\r\n    const parts = this.splitPath(path);\r\n\r\n    if (parts[0] === 'currentState' || parts[0] === 'renderStates') {\r\n      parsedPathObj = {\r\n        frameId: '',\r\n        type: parts[0],\r\n        name: parts[1]\r\n      };\r\n    } else {\r\n      parsedPathObj = {\r\n        frameId: parts[0],\r\n        type: parts[1],\r\n        name: parts[2]\r\n      };\r\n    }\r\n\r\n    return parsedPathObj;\r\n  }\r\n\r\n  /**\r\n   * 分隔Path\r\n   */\r\n  private splitPath(path: string): string[] {\r\n    const parts = path.split('/').filter((part: string) => {\r\n      return part !== '';\r\n    });\r\n    return parts;\r\n  }\r\n\r\n}\r\n\r\nexport { StateMachineVariableParser };\r\n","/**\r\n * session变量解析\r\n * @author Witt <jiwt@inspur.com>\r\n */\r\n\r\nimport { Injectable } from '@angular/core';\r\nimport { CommandContext } from '../command/index';\r\nimport { VariableParser } from './variable_parser';\r\n\r\n/**\r\n * 命令变量解析\r\n * {COMMAND~/params/key}\r\n * {COMMAND~/results/taskName}\r\n */\r\n@Injectable()\r\nclass CommandVariableParser implements VariableParser {\r\n\r\n  /**\r\n   * 构造函数\r\n   */\r\n  public constructor() {\r\n  }\r\n\r\n  /**\r\n   * 解析变量\r\n   * @param expression 变量：格式形如：/frameId/componentId/stateName\r\n   * @param context 上下文\r\n   */\r\n  public parse(expression: string, context: any): any {\r\n    const paths = this.extractPaths(expression);\r\n\r\n    // 1、单个的表达式：直接求值\r\n    if (paths.length === 1 && expression === `{COMMAND~${paths[0]}}`) {\r\n      return this.getValue(paths[0], context);\r\n    }\r\n\r\n    // 2、其他情况：字符串替换\r\n    paths.forEach(path => {\r\n      const searchValue = `{COMMAND~${path}}`;\r\n      const replaceValue = this.getValue(path, context);\r\n      expression = expression.replace(searchValue, replaceValue);\r\n    });\r\n\r\n    return expression;\r\n  }\r\n\r\n  /**\r\n   * 提取Session变量名\r\n   * 变量格式：{}\r\n   */\r\n  private extractPaths(expression: string): string[] {\r\n    const paths: string[] = [];\r\n\r\n    // 查找所有的uiState变量字符串\r\n    const UI_STATE_PATTERN_G = /\\{COMMAND~(\\S+?)\\}/g;\r\n    const uiStateVariables = expression.match(UI_STATE_PATTERN_G);\r\n    if (uiStateVariables === null) {\r\n      return [];\r\n    }\r\n\r\n    // 提取后边的路径\r\n    const UI_STATE_PATTERN = /\\{COMMAND~(\\S+?)\\}/;\r\n    uiStateVariables.forEach(sessionVariable => {\r\n      const pathMatches = sessionVariable.match(UI_STATE_PATTERN);\r\n      if (pathMatches != null && pathMatches.length === 2) {\r\n        paths.push(pathMatches[1]);\r\n      }\r\n    });\r\n\r\n    return paths;\r\n  }\r\n\r\n  /**\r\n   * 获取UIState\r\n   */\r\n  private getValue(path: string, context: any) {\r\n    if (context instanceof CommandContext === false) {\r\n      throw new Error('当前上下文不支持COMMAND变量，请检查！');\r\n    }\r\n    const parts = path.split('/').filter((part: string) => {\r\n      return part !== '';\r\n    });\r\n    const type = parts.shift();\r\n    if (type === 'params') {\r\n      const paramKey = parts.shift();\r\n      return context.command.params[paramKey];\r\n    } else if (type === 'results') {\r\n      return parts.reduce((results: any, paramKey: string) => {\r\n        return results && results[paramKey];\r\n      }, context.results);\r\n    }\r\n  }\r\n}\r\n\r\nexport { CommandVariableParser };\r\n","/**\r\n * 变量解析服务\r\n * @author Witt<jiwt@inspur.com>\r\n */\r\n\r\nimport { Inject, Injectable } from '@angular/core';\r\nimport { VariableParser, VARIABLE_PARSERS } from './variable_parser';\r\n\r\n\r\n/**\r\n * 变量解析服务\r\n * 职责：\r\n * 1、解析字符串中的变量，并替换成相应的值；\r\n * 2、对表达式进行求值。\r\n *\r\n * @todo 对表达式求值的部分和表达式功能重叠，是否转移到表达式中？\r\n */\r\n@Injectable()\r\nclass VariableParseService {\r\n\r\n  /**\r\n   * 解析器集合\r\n   */\r\n  private parsers: VariableParser[];\r\n\r\n  /**\r\n   * 构造变量解析服务\r\n   * @param parsers 解析器集合\r\n   */\r\n  constructor(@Inject(VARIABLE_PARSERS) parsers: VariableParser[]) {\r\n    this.parsers = parsers;\r\n  }\r\n\r\n  /**\r\n   * 解析表达式\r\n   * @param expression 表达式\r\n   * @param context 上下文\r\n   */\r\n  public parse(target: any, context?: any, eventParam?: any): any {\r\n    if (typeof target === 'string' && target.length > 0) {\r\n\r\n      // 字符串，直接解析\r\n      return this.parseExpression(target, context, eventParam);\r\n\r\n    } else if (Array.isArray(target)) {\r\n\r\n      // 遍历数组\r\n      target.forEach((item, itemIndex) => {\r\n        if (typeof item === 'string') {\r\n          target[itemIndex] = this.parseExpression(item, context, eventParam);\r\n        } else {\r\n          target[itemIndex] = this.parse(item, context, eventParam);\r\n        }\r\n      });\r\n\r\n    } else if (typeof target === 'object' && target !== null) {\r\n\r\n      // 遍历对象可枚举属性\r\n      const keys = Object.keys(target);\r\n      keys.forEach(key => {\r\n        if (typeof target[key] === 'string') {\r\n          target[key] = this.parseExpression(target[key], context, eventParam);\r\n        } else {\r\n          target[key] = this.parse(target[key], context, eventParam);\r\n        }\r\n      });\r\n    }\r\n\r\n    return target;\r\n  }\r\n\r\n  /**\r\n   * 表达式求值\r\n   */\r\n  public evaluate(expression: string, context?: any, eventParam?: any): any {\r\n    const parsedExpression = this.parse(expression, context, eventParam);\r\n    return (new Function('return ' + parsedExpression))();\r\n  }\r\n\r\n  /**\r\n   * 解析表达式\r\n   * @param expression 表达式\r\n   * @param context 上下文\r\n   */\r\n  private parseExpression(expression: string, context: any, eventParam: any): string {\r\n\r\n    // 空串直接返回\r\n    if (expression === '') {\r\n      return '';\r\n    }\r\n\r\n    this.parsers.forEach(parser => {\r\n      if (typeof expression === 'string') {\r\n        expression = parser.parse(expression, context, eventParam);\r\n      }\r\n    });\r\n    return expression;\r\n  }\r\n}\r\n\r\nexport { VariableParseService };\r\n","/**\r\n * session变量解析\r\n * @author Witt <jiwt@inspur.com>\r\n */\r\n\r\nimport { Injectable } from '@angular/core';\r\nimport { VariableParser } from './variable_parser';\r\nimport { AppContext } from '../app/index';\r\nimport { ParseUtil } from './parse_util';\r\nimport { FrameContext } from '../frame';\r\nconst VARIABLE_MATCHER = /#{\\S+?}/g;\r\n/**\r\n * 数据变量解析\r\n */\r\n@Injectable()\r\nclass FrameIdVariableParser implements VariableParser {\r\n  public context: any;\r\n  /**\r\n   * 解析变量\r\n   * @param expression 形如：/#{root-component}/stateName\r\n   * @param context 上下文\r\n   */\r\n  public parse(expression: string, context: any): any {\r\n    this.context = context;\r\n    const variables = this.extractVariables(expression);\r\n\r\n    if (!variables || variables.length < 1) {\r\n      return expression;\r\n    }\r\n    variables.forEach((exp: string) => {\r\n      const frameId = this.getVariableValue(exp);\r\n      expression = expression.replace(VARIABLE_MATCHER, frameId);\r\n    });\r\n    return expression;\r\n  }\r\n  /**\r\n   * 计算表达式的值\r\n   * @param expression like #{root-component}\r\n   */\r\n  private getVariableValue(expression: string) {\r\n    const relativeFrameId = expression.substring(2, expression.length - 1);\r\n    return this.getFullFrameId(relativeFrameId);\r\n  }\r\n  private extractVariables(expression: string) {\r\n    if (!expression) {\r\n      return [];\r\n    }\r\n    return expression.match(VARIABLE_MATCHER);\r\n  }\r\n\r\n  /**\r\n   * 获取补全的frameId\r\n   * @param frameId frameId\r\n   */\r\n  private getFullFrameId(frameId: string) {\r\n    const frameContext: FrameContext = ParseUtil.getFrameContext(this.context);\r\n    const namespace = frameContext.namespace || '';\r\n    const prefix = namespace ? `${namespace}_` : '';\r\n    return `${prefix}${frameId}`;\r\n  }\r\n}\r\n\r\nexport { FrameIdVariableParser };\r\n","import { FrameContext } from '../frame';\r\nimport { ParseUtil } from './parse_util';\r\nimport { VariableParser } from './variable_parser';\r\nconst FORM_STATES_EXP = /\\{FORMSTATE~\\/(\\S+?)\\}/g;\r\nconst FORM_STATE_EXP = /\\{FORMSTATE~\\/(\\S+?)\\}/;\r\n\r\nexport class FormStateVariableParser implements VariableParser {\r\n  public context: any;\r\n  /**\r\n   * 解析表达式变量\r\n   */\r\n  public parse(expression: string, context: any): any {\r\n    this.context = context;\r\n    const variables = this.extractVariables(expression);\r\n    if (!variables || variables.length < 1) {\r\n      return expression;\r\n    }\r\n    variables.forEach(variableExpression => {\r\n      const exprs = variableExpression.match(FORM_STATE_EXP);\r\n      if (exprs && exprs.length === 2) {\r\n        const variable = exprs[1];\r\n        const value = this.getVariableValue(variable);\r\n        expression = expression.replace(FORM_STATE_EXP, value);\r\n      }\r\n    });\r\n    return expression;\r\n  }\r\n  /**\r\n   * 获取变量的值\r\n   * @param variable 变量\r\n   */\r\n  private getVariableValue(variable: string) {\r\n    const frameContext: FrameContext = ParseUtil.getFrameContext(this.context);\r\n    const appContext = frameContext.appContext;\r\n    const formVariable = appContext.params.get(variable);\r\n    return formVariable;\r\n  }\r\n  /**\r\n   * 获取到表达式中所有FormState变量数组\r\n   * @param expression 表达式\r\n   */\r\n  private extractVariables(expression: string): string[] | null {\r\n    if (!expression) {\r\n      return null;\r\n    }\r\n    const formStates = expression.match(FORM_STATES_EXP);\r\n    if (!formStates || formStates.length < 1) {\r\n      return null;\r\n    }\r\n    return formStates;\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { VariableParser } from './variable_parser';\r\nconst EVENT_PARAMS_EXP = /\\{EVENTPARAM~\\/(\\S+?)\\}/g;\r\nconst EVENT_PARAM_EXP = /\\{EVENTPARAM~\\/(\\S+?)\\}/;\r\n\r\n/**\r\n * 命令参数解析器\r\n */\r\n@Injectable()\r\nexport class EventParamVariableParser implements VariableParser {\r\n  public context: any;\r\n\r\n  public parse(expression: string, context: any, eventParam?: any) {\r\n    this.context = context;\r\n    const variables = this.extractVariables(expression);\r\n    if (!variables || variables.length < 1) {\r\n      return expression;\r\n    }\r\n    variables.forEach(variableExpression => {\r\n      const exprs = variableExpression.match(EVENT_PARAM_EXP);\r\n      if (exprs && exprs.length === 2) {\r\n        const variable = exprs[1];\r\n        const value = this.getVariableValue(variable, eventParam);\r\n        expression = expression.replace(EVENT_PARAM_EXP, value);\r\n      }\r\n    });\r\n    return expression;\r\n  }\r\n  /**\r\n   * 匹配表达式中的符合正则表达式的项\r\n   * @param expression 表达式\r\n   * @returns \r\n   */\r\n  private extractVariables(expression: string) {\r\n    if (!expression) {\r\n      return null;\r\n    }\r\n    const variables = expression.match(EVENT_PARAMS_EXP);\r\n    if (!variables || variables.length < 1) {\r\n      return null;\r\n    }\r\n    return variables;\r\n  }\r\n  /**\r\n   * 获取变量的值\r\n   * @param variable 变量\r\n   */\r\n  private getVariableValue(variable: string, eventParam: any) {\r\n    if (!eventParam || !variable) {\r\n      return null;\r\n    }\r\n    const variables = variable.split('/').filter(p => p);\r\n    const result = variables.reduce((target: any, key: string) => {\r\n      if (target) {\r\n        return target[key];\r\n      } else {\r\n        return null;\r\n      }\r\n    }, eventParam);\r\n    return result;\r\n  }\r\n}","import { Provider } from '@angular/core';\r\n\r\nimport { VariableParser, VARIABLE_PARSERS } from './variable_parser';\r\nimport { DataVariableParser } from './data_variable_parser';\r\nimport { UIStateVariableParser } from './ui_state_variable_parser';\r\nimport { StateMachineVariableParser } from './state_machine_variable_parser';\r\nimport { CommandVariableParser } from './command_variable_parser';\r\nimport { VariableParseService } from './variable_parse_service';\r\nimport { FrameIdVariableParser } from './frame_id_variable_parser';\r\nimport { FormStateVariableParser } from './form_state_variable_parser';\r\nimport { EventParamVariableParser } from './event_param_variable_parser';\r\n\r\n// Providers\r\nconst VARIABLE_PROVIDERS: Provider[] = [\r\n  { provide: VARIABLE_PARSERS, multi: true, useClass: FrameIdVariableParser },\r\n  { provide: VARIABLE_PARSERS, multi: true, useClass: FormStateVariableParser },\r\n  { provide: VARIABLE_PARSERS, multi: true, useClass: EventParamVariableParser },\r\n  { provide: VARIABLE_PARSERS, multi: true, useClass: DataVariableParser },\r\n  { provide: VARIABLE_PARSERS, multi: true, useClass: UIStateVariableParser },\r\n  { provide: VARIABLE_PARSERS, multi: true, useClass: StateMachineVariableParser },\r\n  { provide: VARIABLE_PARSERS, multi: true, useClass: CommandVariableParser },\r\n  VariableParseService\r\n];\r\n\r\nexport {\r\n  VariableParser, VARIABLE_PARSERS,\r\n  FrameIdVariableParser,\r\n  DataVariableParser, UIStateVariableParser,\r\n  CommandVariableParser, StateMachineVariableParser,\r\n  VariableParseService, EventParamVariableParser, VARIABLE_PROVIDERS\r\n};\r\n","import { Injectable } from '@angular/core';\r\nimport { VariableParseService } from '../../variable/index';\r\nimport { CommandContext } from '../command_context';\r\n\r\n/**\r\n * 任务函数\r\n * @params result 上一步执行结果\r\n * @params context 执行上下文\r\n */\r\ntype LinkFunc = (context: CommandContext) => boolean;\r\n\r\n/**\r\n * 任务链接\r\n */\r\nclass TaskLink {\r\n\r\n  /**\r\n   * 源任务\r\n   */\r\n  from: string;\r\n\r\n  /**\r\n   * 目标任务\r\n   */\r\n  to: string;\r\n\r\n  /**\r\n   * 执行条件\r\n   * 1、表达式；\r\n   * 2、布尔值；\r\n   * 3、函数\r\n   */\r\n  condition: string | boolean| LinkFunc;\r\n\r\n  /**\r\n   * 构造函数\r\n   */\r\n  constructor(from: string, to: string, condition: string | boolean| LinkFunc) {\r\n    this.from = from;\r\n    this.to   = to;\r\n    this.condition = condition;\r\n  }\r\n\r\n  /**\r\n   * 是否能够\r\n   */\r\n  public canLink(context: CommandContext): boolean {\r\n    const type = typeof this.condition;\r\n    let canLink;\r\n    switch (type) {\r\n      case 'boolean':\r\n        canLink = this.condition as boolean;\r\n        break;\r\n      case 'function':\r\n        canLink = (<LinkFunc>this.condition)(context);\r\n        break;\r\n      case 'string':\r\n        const parseService = context.frameContext.injector.get<VariableParseService>(VariableParseService);\r\n        canLink = parseService.evaluate(this.condition as string, context);\r\n        break;\r\n      default:\r\n        canLink = false;\r\n        break;\r\n    }\r\n    return canLink;\r\n  }\r\n}\r\n\r\nexport { LinkFunc, TaskLink };\r\n","/*\r\n * @Author: Witt\r\n * @Date: 2018-10-17 14:13:40\r\n * @Last Modified by: Witt\r\n * @Last Modified time: 2018-10-17 16:08:34\r\n */\r\n\r\nimport { TaskFunc, TaskNode } from './task_node';\r\nimport { LinkFunc, TaskLink } from './task_link';\r\nimport { CommandContext } from '../command_context';\r\n\r\n/**\r\n * 任务执行流程\r\n */\r\nclass TaskFlow {\r\n\r\n  /**\r\n   * 节点集合\r\n   */\r\n  private nodes: TaskNode[] = [];\r\n\r\n  /**\r\n   * 边集合\r\n   */\r\n  private links: TaskLink[] = [];\r\n\r\n\r\n  // #region 节点操作\r\n\r\n  /**\r\n   * 添加节点\r\n   */\r\n  public addNode(name: string, func: TaskFunc): void {\r\n    const node = new TaskNode(name, func);\r\n    this.nodes.push(node);\r\n  }\r\n\r\n\r\n  /**\r\n   * 批量添加链接\r\n   */\r\n  public addNodes(nodes: TaskNode[]) {\r\n    this.nodes = this.nodes.concat(nodes);\r\n  }\r\n\r\n  /**\r\n   * 在目标节点之前插入一个节点\r\n   * @param target 目标节点名称\r\n   * @param name 名称\r\n   * @param func 函数\r\n   */\r\n  public insertNode(target: string, name: string, func: TaskFunc): void {\r\n    const index = this.findNodeIndex(target);\r\n    const node = this.createNode(name, func);\r\n    this.nodes.splice(index, 0, node);\r\n  }\r\n\r\n  /**\r\n   * 在目标节点之前插入一个节点\r\n   */\r\n  public appendNode(target: string, name: string, func: TaskFunc) {\r\n    const index = this.findNodeIndex(target) + 1;\r\n    const node = this.createNode(name, func);\r\n    this.nodes.splice(index, 0, node);\r\n  }\r\n\r\n  /**\r\n   * 获取节点索引\r\n   * @param name 名称\r\n   */\r\n  private findNodeIndex(name: string): number {\r\n    return this.nodes.findIndex((node: TaskNode) => {\r\n      return node.name === name;\r\n    });\r\n  }\r\n\r\n  /**\r\n   * 创建任务节点\r\n   * @param name 名称\r\n   * @param func 函数\r\n   */\r\n  private createNode(name: string, func: TaskFunc): TaskNode {\r\n    const node = new TaskNode(name, func);\r\n    return node;\r\n  }\r\n\r\n  // #endregion\r\n\r\n\r\n  // #region 链接操作\r\n\r\n  /**\r\n   * 添加链接\r\n   * @param name 名称\r\n   * @param func 函数\r\n   */\r\n  public addLink(from: string, to: string, condition: string | boolean) {\r\n    const link = this.createLink(from, to, condition);\r\n    this.links.push(link);\r\n  }\r\n\r\n  /**\r\n   * 批量添加链接\r\n   */\r\n  public addLinks(links: TaskLink[]) {\r\n    this.links = this.links.concat(links);\r\n  }\r\n\r\n  /**\r\n   * 创建链接\r\n   */\r\n  private createLink(from: string, to: string, condition: string | boolean) {\r\n    const link = new TaskLink(from, to, condition);\r\n    return link;\r\n  }\r\n\r\n  // #endregion\r\n\r\n\r\n  // #region 流程控制\r\n  /**\r\n   * 获取下一个节点\r\n   * @param from    源节点名称\r\n   * @param context 上下文\r\n   */\r\n  getNext(from?: string, context?: CommandContext): TaskNode {\r\n    if (!from) {\r\n      return this.nodes.shift();\r\n    }\r\n\r\n    // 符合满足条件的边\r\n    const nextLink = this.links.find((link: TaskLink) => {\r\n      return link.from === from && link.canLink(context);\r\n    });\r\n    if (!nextLink) {\r\n      return;\r\n    }\r\n\r\n    return this.nodes.find((node: TaskNode) => {\r\n      return node.name === nextLink.to;\r\n    });\r\n  }\r\n\r\n  // #endregion\r\n\r\n  // #region 其他方法\r\n\r\n  /**\r\n   * 克隆任务流\r\n   */\r\n  clone() {\r\n    const taskFlow = new TaskFlow();\r\n    taskFlow.addNodes(this.nodes);\r\n    taskFlow.addLinks(this.links);\r\n    return taskFlow;\r\n  }\r\n\r\n  // #endregion\r\n}\r\n\r\nexport { TaskFlow };\r\n","import { IDisposable } from '../core';\r\nimport { FrameContext } from '../frame/index';\r\nimport { Command } from './command';\r\n\r\n/**\r\n * Command上下文\r\n */\r\nclass CommandContext implements IDisposable{\r\n\r\n  public typeName = 'CommandContext';\r\n\r\n  /**\r\n   * 命令实例\r\n   */\r\n  command: Command;\r\n\r\n  /**\r\n   * 组件上下文\r\n   */\r\n  frameContext: FrameContext;\r\n\r\n  /**\r\n   * 执行结果\r\n   * 记录每一个task执行的结果\r\n   */\r\n  results: { [taskName: string]: any } = {};\r\n\r\n  /**\r\n   * 最新的执行结果\r\n   */\r\n  latestResult: any;\r\n\r\n  /**\r\n   * 事件参数\r\n   */\r\n  eventParam: any;\r\n\r\n  /**\r\n   * 构造函数\r\n   * @param command 命令\r\n   * @param frameContext 框架上下文\r\n   */\r\n  constructor(command: Command, frameContext: FrameContext) {\r\n    this.command = command;\r\n    this.frameContext = frameContext;\r\n  }\r\n  public dispose() {\r\n    this.eventParam = null;\r\n    this.command = null;\r\n    this.results = null;\r\n    this.latestResult = null;\r\n    this.frameContext = null;\r\n  }\r\n  public clearResults(){\r\n    this.results = null;\r\n  }\r\n}\r\n\r\nexport { CommandContext };\r\n","import { InjectionToken } from '@angular/core';\r\nimport { Translate } from './translate';\r\n\r\nexport const TranslateToken = new InjectionToken<Translate>('@farris/devkit TranslateToken');\r\n","import { InjectionToken, Optional, Injector, OnDestroy } from '@angular/core';\r\nimport { Observable, Subject, BehaviorSubject, EMPTY } from 'rxjs';\r\nimport { concatMap, map, takeLast, take, takeUntil, throwIfEmpty } from 'rxjs/operators';\r\n\r\nimport { FrameContext } from '../frame/index';\r\nimport { VariableParseService } from '../variable/index';\r\n\r\nimport { Command, CommandParams, ParamDescriptions } from './command';\r\nimport { CommandContext } from './command_context';\r\nimport { TaskFunc, TaskFlow } from './flow/index';\r\nimport { TranslateToken } from '../i18n/translate_token';\r\nimport { Translate } from '../i18n/translate';\r\nimport { IDisposable } from '../core';\r\n\r\n/**\r\n * 命令处理抽象类，所有具体的命令处理类必须继承它，并实现schedule方法。\r\n */\r\nabstract class CommandHandler implements IDisposable, OnDestroy {\r\n\r\n  /**\r\n   * 任务流程图\r\n   */\r\n  private taskFlow: TaskFlow;\r\n\r\n  /**\r\n   * 上下文\r\n   */\r\n  protected frameContext: FrameContext;\r\n\r\n  /**\r\n   * 变量解析服务\r\n   */\r\n  protected parseService: VariableParseService;\r\n\r\n  public commandName: string;\r\n  private destroy$: Subject<any> = new Subject<any>();\r\n  /**\r\n   * 构造函数\r\n   */\r\n  constructor() {\r\n  }\r\n  dispose(options?: any) {\r\n    if (this.destroy$) {\r\n      this.destroy$.next();\r\n      this.destroy$.complete();\r\n    }\r\n    this.frameContext = null;\r\n  }\r\n  ngOnDestroy(): void {\r\n    this.dispose();\r\n  }\r\n\r\n  /**\r\n   * 构造执行流程\r\n   */\r\n  abstract schedule();\r\n\r\n  /**\r\n   * 初始化\r\n   */\r\n  public init(frameContext: FrameContext, variableParseService: VariableParseService) {\r\n    this.frameContext = frameContext;\r\n    this.parseService = variableParseService;\r\n    this.taskFlow = new TaskFlow();\r\n    this.schedule();\r\n\r\n  }\r\n\r\n  /**\r\n   * 执行任务\r\n   * @param command 要执行的命令\r\n   * @return 最后一个任务的执行结果\r\n   * @todo：按功能拆分小函数\r\n   */\r\n  public execute(command: Command): Observable<any> {\r\n    const lastTaskResult$ = new Subject();\r\n    const taskFlow = this.taskFlow.clone();\r\n\r\n    // setTimeout暂时不能去掉的原因：\r\n    // 1、树表单加载数据，依赖TreeTableBinding里设置的全局变量，需要延后执行加载时机；\r\n    // 2、关闭前命令需要延迟执行。\r\n    setTimeout(() => {\r\n      if (!this.frameContext || this.frameContext.isDisposed) {\r\n        return EMPTY;\r\n      }\r\n      // 1、解析参数\r\n      // 避免解析变量时修改了原始的command\r\n      const { eventParam = null } = {\r\n        ...command\r\n      };\r\n      delete command.eventParam;\r\n      const commandToExecute = JSON.parse(JSON.stringify(command));\r\n      commandToExecute.params = this.paramsTransform(commandToExecute.params);\r\n      commandToExecute.params = this.parseService.parse(commandToExecute.params, this.frameContext, eventParam);\r\n      command.eventParam = eventParam;\r\n      commandToExecute.eventParam = eventParam;\r\n      this.transParamTypes(commandToExecute.params, commandToExecute.paramDescriptions);\r\n\r\n      // 2、串联任务流\r\n      const initContext = new CommandContext(commandToExecute, this.frameContext);\r\n      initContext.eventParam = command.eventParam || null;\r\n      const context$ = new BehaviorSubject<CommandContext>(initContext);\r\n      let currentTask = taskFlow.getNext('', initContext);\r\n      const highOrder$ = context$.pipe(\r\n        concatMap((context: CommandContext) => {\r\n          const result$ = currentTask.execute(context);\r\n          return result$.pipe(\r\n            take(1),\r\n            map((result: any) => {\r\n\r\n              // 写入执行结果\r\n              context.results[currentTask.name] = result;\r\n              context.latestResult = result;\r\n              currentTask = taskFlow.getNext(currentTask.name, context);\r\n\r\n              // 操作控制流\r\n              if (currentTask) {\r\n                context$.next(context);\r\n              } else {\r\n                context$.complete();\r\n              }\r\n\r\n              // 将结果流转换为context流\r\n              return context;\r\n            }),\r\n            throwIfEmpty(() => {\r\n              context$.complete();\r\n            })\r\n          );\r\n        })\r\n      );\r\n\r\n      // 3、执行合并后的任务流\r\n      highOrder$.pipe(\r\n        takeLast(1)\r\n      ).subscribe({\r\n        next: (context: CommandContext) => {\r\n          this.waitForDestroy(context);\r\n          lastTaskResult$.next(context.latestResult);\r\n        },\r\n        error: (error: any) => {\r\n          this.waitForDestroy(initContext);\r\n            this.displayError(error);\r\n          lastTaskResult$.error(error || '');\r\n        },\r\n        complete: () => {\r\n          this.waitForDestroy(initContext);\r\n          lastTaskResult$.complete();\r\n        },\r\n      });\r\n\r\n    }, 0);\r\n\r\n    return lastTaskResult$;\r\n  }\r\n  /**\r\n   * 等待销毁\r\n   * @param commandContext \r\n   */\r\n  private waitForDestroy(commandContext: CommandContext) {\r\n    if (!commandContext) {\r\n      return;\r\n    }\r\n    commandContext.clearResults();\r\n    if (this.frameContext && this.frameContext.appContext && this.frameContext.appContext.destorySignal) {\r\n      this.frameContext.appContext.destorySignal.pipe(takeUntil(this.destroy$)).subscribe(() => {\r\n        if (commandContext) {\r\n          commandContext.dispose();\r\n          commandContext = null;\r\n        }\r\n      });\r\n    }\r\n  }\r\n  /**\r\n   * 显示错误信息\r\n   */\r\n  private displayError(error: any) {\r\n    if (!error) {\r\n      return;\r\n    }\r\n    if (!console || !console.error) {\r\n      return;\r\n    }\r\n    console.error(error);\r\n  }\r\n  /**\r\n   * 参数国际化转换方法\r\n   */\r\n  private paramsTransform(params: object) {\r\n    const exp = /\\{\\{(\\w+)\\}\\}/g;\r\n    if (!params) {\r\n      return null;\r\n    }\r\n    const translateService = this.frameContext && this.frameContext.injector && this.frameContext.injector.get<Translate>(TranslateToken, null) || null;\r\n    const pArray = Object.keys(params);\r\n    const result = {};\r\n    if (pArray.length === 0) {\r\n      return params;\r\n    }\r\n    pArray.forEach((p) => {\r\n      let ele = params[p];\r\n      if (ele && exp.test(ele) && translateService) {\r\n        ele = ele.replace(exp, ($1, $2) => {\r\n          return translateService.transform($2, null);\r\n        });\r\n      }\r\n      result[p] = ele;\r\n\r\n    });\r\n\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * 添加任务，只有子类可以添加任务，外部不能访问\r\n   * @param name  任务名称\r\n   * @param func 任务函数\r\n   */\r\n  protected addTask(name: string, func: TaskFunc) {\r\n    this.taskFlow.addNode(name, func);\r\n  }\r\n\r\n  /**\r\n   * 添加任务，只有子类可以添加任务，外部不能访问\r\n   * @param name  任务名称\r\n   * @param func 任务函数\r\n   */\r\n  protected addLink(from: string, to: string, condition: string | boolean) {\r\n    this.taskFlow.addLink(from, to, condition);\r\n  }\r\n\r\n  /**\r\n   * 插入任务\r\n   * @param  name 要扩展的任务名称\r\n   * @param  func 扩展函数\r\n   */\r\n  public insertTask(target: string, name: string, func: TaskFunc) {\r\n    throw new Error('Not Implemented');\r\n  }\r\n\r\n  /**\r\n   * 插入任务\r\n   * @param  name 要扩展的任务名称\r\n   * @param  func 扩展函数\r\n   */\r\n  public afterTask(target: string, name: string, func: TaskFunc) {\r\n    throw new Error('Not Implemented');\r\n  }\r\n\r\n  /**\r\n   * 替换任务\r\n   * @param  name 要替换的任务名称\r\n   * @param  func 替换函数\r\n   */\r\n  public replaceTask(name: string, func: TaskFunc) {\r\n    throw new Error('Not Implement');\r\n  }\r\n\r\n  /**\r\n   * 调用方法\r\n   */\r\n  public invoke(serviceInstance: any, method: string, args: any[], context: CommandContext) {\r\n    this.setContextToServiceInstance(serviceInstance, context);\r\n    const parsedArgs = this.parseService.parse(args, context, context.eventParam);\r\n    return serviceInstance[method](...parsedArgs);\r\n  }\r\n\r\n  /**\r\n   * 为服务设置命令上下文\r\n   * @todo\r\n   * 通过这种方式存在很大问题：\r\n   * 1、会覆盖掉已有的context，给开发人员造成困扰和调试成本；\r\n   * 2、服务中依赖了一个没有声明的对象，不符合面向对象的原则。\r\n   * 建议解决方案：\r\n   * 1、将context修改为某个特殊属性名；\r\n   * 2、先检测服务上有没有一个CommandContext类型的context属性，有的话再赋值，\r\n   *    这就要求需要使用context的服务需要是实现一个IContext接口。\r\n   */\r\n  protected setContextToServiceInstance(serviceInstance: any, context: CommandContext) {\r\n\r\n    // 如果服务上已经存在context属性，并且该属性不是CommandContext类型，则不能覆盖\r\n    const serviceContext = serviceInstance.context;\r\n    if (serviceContext && (serviceContext instanceof CommandContext === false)) {\r\n      return;\r\n    }\r\n\r\n    serviceInstance.context = context;\r\n  }\r\n\r\n  /**\r\n   * 根据参数描述信息转换参数类型\r\n   */\r\n  private transParamTypes(params: CommandParams, paramDescriptions: ParamDescriptions) {\r\n    if (!paramDescriptions) {\r\n      return;\r\n    }\r\n    const keys = Object.keys(params);\r\n    keys.forEach(key => {\r\n      if (!paramDescriptions[key] || !paramDescriptions[key].type) {\r\n        return;\r\n      }\r\n\r\n      const parType = paramDescriptions[key].type;\r\n      const value = params[key];\r\n      if (value === undefined || value === null || typeof value === parType) {\r\n        return; // 值不存在或类型匹配，无需处理\r\n      }\r\n\r\n      switch (parType) {\r\n        case 'string':\r\n          // 其实转换前的参数都是string，这里不会走到\r\n          params[key] = value + '';\r\n          break;\r\n        case 'int':\r\n        case 'double':\r\n        case 'number':\r\n          // 前端数值类型只有number，这里兼容命令构件上设置为int和double的情况\r\n          const numResult = Number(value);\r\n          if (isNaN(numResult)) {\r\n            throw Error(`类型转换失败，参数${key}值为${value}，无法转换为${parType}类型。`);\r\n          }\r\n          params[key] = numResult;\r\n          break;\r\n        case 'boolean':\r\n          let boolResult: boolean;\r\n          const strValue = (value + '').toLowerCase();\r\n          if (strValue === 'true') {\r\n            boolResult = true;\r\n          } else if (strValue === 'false') {\r\n            boolResult = false;\r\n          } else {\r\n            throw Error(`类型转换失败，参数${key}值为${value}，无法转换为${parType}类型。`);\r\n          }\r\n          params[key] = boolResult;\r\n          break;\r\n        case 'datetime':\r\n          // todo：日期时间暂不处理\r\n          break;\r\n        case 'object':\r\n          // 表达式解析出来的参数，无需处理，按原类型返回\r\n          // todo: 输入参数是个json串，转成object\r\n          break;\r\n        default:\r\n          break;\r\n      }\r\n    });\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * 命令处理器注入Token\r\n */\r\nconst COMMAND_HANDLERS_TOKEN = new InjectionToken<CommandHandler>('@Farris Command Handlers');\r\n\r\nexport { CommandHandler, COMMAND_HANDLERS_TOKEN };\r\n","/**\r\n * 命令处理注册器相关定义\r\n * @author Witt<jiwt@inspur.com>\r\n */\r\n\r\nimport { Injectable, Optional, Inject } from '@angular/core';\r\nimport { MetadataUtil } from '../metadata/index';\r\nimport { NG_COMMAND_HANDLER, NgCommandHandler } from './decorators';\r\nimport { COMMAND_HANDLERS_TOKEN, CommandHandler } from './command_handler';\r\n\r\n\r\n/**\r\n * 命令处理注册器\r\n */\r\n@Injectable()\r\nclass CommandHandlerRegistry {\r\n\r\n  /**\r\n   * CommandHandler Map\r\n   */\r\n  private handlerMap: Map<string, CommandHandler>;\r\n\r\n  /**\r\n   * 构造函数\r\n   * @param handlers 命令处理实例数组\r\n   */\r\n  constructor(@Optional() @Inject(COMMAND_HANDLERS_TOKEN)handlers: CommandHandler[]) {\r\n    const self = this;\r\n    this.handlerMap = new Map<string, CommandHandler>();\r\n    if (handlers) {\r\n      handlers.forEach((handler: CommandHandler) => {\r\n        self.regist(handler);\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 添加命令处理\r\n   * @param  commandName    命令名称\r\n   * @param  commandHandler 命令处理实例\r\n   */\r\n  public set(commandName: string, commandHandler: CommandHandler) {\r\n    if (this.handlerMap.has(commandName)) {\r\n      throw new Error(commandName + '对应的CommandHandler已经存在');\r\n    }\r\n    this.handlerMap.set(commandName, commandHandler);\r\n  }\r\n\r\n  /**\r\n   * 获取命令处理\r\n   * @param   commandName 命令名称\r\n   * @returns 命令处理实例\r\n   */\r\n  public get(commandName: string): CommandHandler {\r\n    if (this.handlerMap.has(commandName) === false) {\r\n      throw new Error('找不到' + commandName + '对应的CommandHandler');\r\n    }\r\n    return this.handlerMap.get(commandName);\r\n  }\r\n\r\n  /**\r\n   * 注册命令处理\r\n   * @param handlers 命令处理实例\r\n   */\r\n  public regist(commandHandler: CommandHandler) {\r\n    let commandName = commandHandler.commandName;\r\n    if (!commandName) {\r\n      // 根据metadata获取对应的Command名称\r\n      const handlerMetadata: NgCommandHandler =\r\n        MetadataUtil.getClassMetadataByName(commandHandler.constructor, NG_COMMAND_HANDLER);\r\n      if (!handlerMetadata) {\r\n        throw new Error('CommandHandler必须指定要处理的命令名称');\r\n      }\r\n      commandName = handlerMetadata.commandName;\r\n    }\r\n    this.set(commandName, commandHandler);\r\n  }\r\n  /**\r\n   * 清空所有命令处理器\r\n   */\r\n  public dispose() {\r\n    if (this.handlerMap) {\r\n      this.handlerMap.forEach(handler => {\r\n        handler.dispose();\r\n      });\r\n    }\r\n    this.handlerMap.clear();\r\n  }\r\n\r\n}\r\n\r\nexport { CommandHandlerRegistry };\r\n","/**\r\n * 命令处理扩展相关\r\n * @author Witt<jiwt@inspur.com>\r\n */\r\n\r\nimport { Injectable, InjectionToken } from '@angular/core';\r\nimport { CommandHandler } from './command_handler';\r\n\r\n/**\r\n * 命令处理扩展抽象类\r\n *\r\n * CommandHandler由一个个Task串联而成，这些Task不是一成不变，\r\n * 通过CommandHandlerExtender可以在不同的时机对它扩展，\r\n * 通过它我们可以在任务之后新增一个任务或者替换掉原来的一个任务。\r\n *\r\n * ### 定义并注册扩展\r\n *\r\n * **定义一个扩展**\r\n *\r\n * 按如下步骤可以实现一个扩展：\r\n * - 继承CommandHandlerExtender抽象基类；\r\n * - 实现extend方法，在其内部对任务进行扩展、替换；\r\n * - 添加NgCommandHandlerExtender指定要扩展的命令。\r\n *\r\n * ```ts\r\n * @Injectable()\r\n * @NgCommandHandlerExtender({\r\n *    commandName: 'formLoad'\r\n *  })\r\n * class FormLoadExtender extends CommandHandlerExtender {\r\n *\r\n *   extend(handler: CommandHandler): CommandHandler {\r\n *\r\n *     // 扩展一个任务\r\n *     handler.extendTask('loadData', (originalResult) => {\r\n *       console.log('do sth. to the original result');\r\n *     });\r\n *\r\n *     // 替换一个任务\r\n *     handler.extendTask('transitState', () => {\r\n *       console.log('transit to other state');\r\n *     });\r\n *\r\n *     return handler;\r\n *   }\r\n * }\r\n * ```\r\n * 在extend方法内部：\r\n * - 通过extendTask方法扩展任务，一个任务可以被多次扩展，多个扩展依次附加到原来的任务之上；\r\n * - 通过replaceTask方法替换任务，一个任务可以被多次替换，以最后一个替换为准。\r\n *\r\n * **注册扩展**\r\n *\r\n * 我们将包含FormLoadHandlerExtender的数组传递给CommandModule.setup方法，\r\n * 由它来统一进行注册。\r\n * ```ts\r\n * @NgModule({\r\n *   imports: [\r\n *     CommandModule.setup([FormLoadHandler], [FormLoadHandlerExtender])\r\n *   ]\r\n * })\r\n * class SimpleModule {}\r\n * ```\r\n */\r\n@Injectable()\r\nabstract class CommandHandlerExtender {\r\n\r\n  /**\r\n   * 扩展方法\r\n   * @param handler 要扩展的命令处理器\r\n   */\r\n  abstract extend(handler: CommandHandler): CommandHandler;\r\n\r\n}\r\n\r\n\r\n/**\r\n * 命令处理器扩展注入Token\r\n */\r\nconst COMMAND_HANDLER_EXTENDERS_TOKEN = new InjectionToken<CommandHandlerExtender>('@farris/devkit CommandHandler Extenders');\r\n\r\nexport { CommandHandlerExtender, COMMAND_HANDLER_EXTENDERS_TOKEN };\r\n","/**\r\n * 命令处理扩展注册器相关定义\r\n * @author Witt<jiwt@inspur.com>\r\n */\r\n\r\nimport { Injectable, Optional, Inject } from '@angular/core';\r\nimport { MetadataUtil } from '../metadata/index';\r\nimport { NG_COMMAND_HANDLER_EXTENDER, NgCommandExtender } from './decorators';\r\nimport { COMMAND_HANDLER_EXTENDERS_TOKEN, CommandHandlerExtender } from './command_handler_extender';\r\nimport { IDisposable } from '../core';\r\n\r\n/**\r\n * 命令处理扩展注册器\r\n */\r\n@Injectable()\r\nclass CommandHandlerExtenderRegistry implements IDisposable{\r\n\r\n  /**\r\n   * CommandHandlerExtender实例Map\r\n   * - key：命令名称\r\n   * - value：命令扩展实例\r\n   */\r\n  private extendersMap: Map<string, CommandHandlerExtender[]>;\r\n\r\n  /**\r\n   * 构造函数\r\n   * @param extenders 命令扩展实例数组\r\n   */\r\n  constructor(@Optional() @Inject(COMMAND_HANDLER_EXTENDERS_TOKEN)extenders: CommandHandlerExtender[]) {\r\n    const self = this;\r\n    this.extendersMap = new Map<string, CommandHandlerExtender[]>();\r\n    if (extenders) {\r\n      extenders.forEach((extender: CommandHandlerExtender) => {\r\n        self.regist(extender);\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 获取命令扩展实例数组\r\n   * @param   commandName 命令名称\r\n   * @returns 命令处理扩展实例数组\r\n   */\r\n  get(commandName: string): CommandHandlerExtender[] {\r\n    if (this.extendersMap.has(commandName) === false) {\r\n      return [];\r\n    }\r\n    return this.extendersMap.get(commandName);\r\n  }\r\n\r\n  /**\r\n   * 添加命令扩展\r\n   * @param commandName Command名称\r\n   * @param extender    CommandHandlerExtender实例\r\n   * @return void\r\n   */\r\n  set(commandName: string, extender: CommandHandlerExtender) {\r\n    if (this.extendersMap.has(commandName)) {\r\n\r\n      // 如果commandName对应的扩展已经存在，则在扩展数组中追加\r\n      this.extendersMap.get(commandName).push(extender);\r\n    } else {\r\n\r\n      // 如果不存在，则创建新的扩展数组，并追加\r\n      this.extendersMap.set(commandName, [extender]);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 注册命令扩展\r\n   * @param extender CommandHandlerExtender实例\r\n   */\r\n  regist(extender: CommandHandlerExtender) {\r\n\r\n    // 通过元数据获取要扩展的Comamnd名称\r\n    const extenderMetadata: NgCommandExtender =\r\n      MetadataUtil.getClassMetadataByName(extender.constructor, NG_COMMAND_HANDLER_EXTENDER);\r\n    if (!extenderMetadata) {\r\n      throw new Error('CommandHandlerExtender必须指定要扩展的命令名称');\r\n    }\r\n    const commandName = extenderMetadata.commandName;\r\n\r\n    // 添加到Map中\r\n    this.set(commandName, extender);\r\n  }\r\n  public dispose(){\r\n    this.extendersMap.clear();\r\n  }\r\n\r\n}\r\n\r\nexport { CommandHandlerExtenderRegistry };\r\n","import { makePropDecorator } from '../metadata/index';\r\n\r\n/**\r\n * NgComponentState元数据名称\r\n */\r\nexport const NG_COMPONENT_STATE = 'NgParam';\r\n\r\n/**\r\n * NgComponentState\r\n */\r\nexport interface NgParam {\r\n\r\n  /**\r\n   * 组件的ID\r\n   */\r\n  componentId?: string;\r\n\r\n  /**\r\n   * 状态名称\r\n   */\r\n  stateName?: string;\r\n  /**\r\n   * 原始数据类型\r\n   */\r\n  originalDataType?: string;\r\n  /**\r\n   * 变量类型（locale|remote）\r\n   */\r\n  category?: string;\r\n\r\n}\r\n\r\n/**\r\n * NgUIStateDecorator\r\n */\r\nexport interface NgParamDecorator {\r\n  (obj?: NgParam): any;\r\n  new(obj?: NgParam): any;\r\n}\r\n\r\n/**\r\n * NgUIState\r\n */\r\nexport const NgParam: NgParamDecorator =\r\n  makePropDecorator(NG_COMPONENT_STATE, (obj?: NgParam) => obj);\r\n\r\n\r\n","import { MetadataUtil } from '../metadata/index';\r\nimport { NG_COMPONENT_STATE, NgParam } from './decorators';\r\n\r\nexport class UIStateMetadataUtil {\r\n\r\n  /**\r\n   * 获取NgUIState的属性元数据\r\n   * @param \r\n   * @returns 属性元数据对象\r\n   * @example\r\n   * 返回格式：\r\n   * {\r\n   *    '属性名称': <NgUIStateProperty>{ ...}\r\n   * }\r\n   */\r\n  static getUIFields(target: Function): {[propName: string]: NgParam} {\r\n      return MetadataUtil.getPropsMetadatasByName(target, NG_COMPONENT_STATE);\r\n  }\r\n}","/*\r\n * @Author: Witt\r\n * @Date: 2018-11-17 13:38:23\r\n * @Last Modified by: Witt\r\n * @Last Modified time: 2018-11-17 13:38:50\r\n * @todo：临时删除原有功能，待重构\r\n */\r\n\r\nimport { Injectable } from '@angular/core';\r\nimport { Subject } from 'rxjs';\r\nimport { UIStateMetadataUtil } from './uistate_metadata_util';\r\nimport { NgParam } from './decorators';\r\n\r\nexport interface UIStateObservableParam {\r\n  field: string;\r\n  value: any;\r\n}\r\n/**\r\n * UI状态\r\n */\r\n@Injectable()\r\nexport class UIState {\r\n  /**\r\n   * @deprecated innerData为状态机内部变量，外部请不要使用\r\n   */\r\n  innerData: {};\r\n\r\n  // 监听变化\r\n  public changes: Subject<UIStateObservableParam>;\r\n  public paramTypeTransform = false;\r\n  constructor() {\r\n    this.changes = new Subject<UIStateObservableParam>();\r\n    this.innerData = Object.assign({});\r\n    this._init();\r\n  }\r\n\r\n  _init() {\r\n    const uiFields = UIStateMetadataUtil.getUIFields(this.constructor);\r\n    this.initializeUIField(uiFields);\r\n  }\r\n\r\n  initialize(context: any) {\r\n    const uiFields = context.metadata.uiStates || UIStateMetadataUtil.getUIFields(this.constructor);\r\n    this.initializeUIField(uiFields);\r\n  }\r\n\r\n  private initializeUIField(uiFieldMetadata: { [key: string]: NgParam }): void {\r\n    Object.keys(uiFieldMetadata).forEach(propertyName => {\r\n      const fieldMetadata = uiFieldMetadata[propertyName] as NgParam;\r\n      const uiField = fieldMetadata.stateName || propertyName;\r\n\r\n      if (delete this[propertyName]) {\r\n        this.defineProperty(propertyName, uiField);\r\n      }\r\n    });\r\n  }\r\n\r\n  public isExistProperty(propertyName: any) {\r\n    if (this.innerData.hasOwnProperty(propertyName) || this.hasOwnProperty(propertyName)) {\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  private defineProperty(propertyName: any, field: any = null) {\r\n    Object.defineProperty(this, propertyName, {\r\n      get: function () {\r\n        return field !== null ? this.innerData[field] : this.innerData[propertyName];\r\n      },\r\n      set: function (value) {\r\n        // 值相同时不触发变更\r\n        const oldValue = field !== null ? this.innerData[field] : this.innerData[propertyName];\r\n        if (this.paramTypeTransform === true) {\r\n          const ngParams = UIStateMetadataUtil.getUIFields(this.constructor);\r\n          const ngParam = ngParams && ngParams[propertyName] || null;\r\n          const dataType = ngParam && ngParam.originalDataType || null;\r\n          if (dataType) {\r\n            value = this.transform(value, dataType);\r\n          }\r\n        }\r\n        if (oldValue === value) {\r\n          return;\r\n        }\r\n        if (field !== null) {\r\n          this.innerData[field] = value;\r\n        } else {\r\n          this.innerData[propertyName] = value;\r\n        }\r\n        this.changes.next({\r\n          field: propertyName,\r\n          value: value\r\n        });\r\n      }\r\n    });\r\n  }\r\n\r\n  public setPropertyValue(propertyName: any, value: any) {\r\n    if (propertyName === '' || propertyName === undefined) {\r\n      return;\r\n    }\r\n    if (!this.isExistProperty(propertyName)) {\r\n      this.defineProperty(propertyName);\r\n    }\r\n    this[propertyName] = value;\r\n  }\r\n  private transform(target: any, dataType: string) {\r\n    if (!dataType) {\r\n      return target;\r\n    }\r\n    dataType = dataType.toLowerCase();\r\n    if (dataType === 'string') {\r\n      if (target === null || target === undefined) {\r\n        return target;\r\n      }\r\n      return target.toString();\r\n    } else if (dataType === 'number') {\r\n      if (target === undefined) {\r\n        return undefined;\r\n      }\r\n      const result = Number(target);\r\n      if (isNaN(result)) {\r\n        throw new Error(`${target}无法转换为数字！`);\r\n      }\r\n      return result;\r\n    } else if (dataType === 'boolean') {\r\n      if (typeof target === 'boolean') {\r\n        return target;\r\n      } else {\r\n        if (target === null || target === undefined) {\r\n          return false;\r\n        }\r\n        target = target.toString().toLowerCase();\r\n        if (target === 'false') {\r\n          return false;\r\n        } else if (target === 'true') {\r\n          return true;\r\n        } else {\r\n          throw new Error(`${target}无法转换为布尔类型！`);\r\n        }\r\n      }\r\n    } else if (dataType === 'date' || dataType === 'datetime') {\r\n      // 日期、日期时间在前端依然按照字符串处理\r\n      return target;\r\n    } else if (dataType === 'object') {\r\n      if (typeof target === 'object') {\r\n        return target;\r\n      } else {\r\n        try {\r\n          return JSON.parse(target);\r\n        } catch {\r\n          throw new Error(`${target}无法转换为对象！`);\r\n        }\r\n      }\r\n    } else {\r\n      return target;\r\n    }\r\n  }\r\n}\r\n","import { InjectionToken } from \"@angular/core\";\r\n/**\r\n * 变量类型转换\r\n */\r\nexport const PARAM_TYPE_TRANSFORM_TOKEN = new InjectionToken<boolean>('@farris/devkit_param_type_transform');","import { ViewModel } from '../view-model/index';\r\nimport { StateMachineContext } from './context';\r\n\r\n/**\r\n * --------------------------------------------------------------------------------\r\n * State相关\r\n * --------------------------------------------------------------------------------\r\n */\r\n\r\n/**\r\n * 基本状态：表单的基本状态，通过State的运算确定RenderState的值，进而控制页面控件的状态。\r\n */\r\nexport class State {\r\n\r\n  /**\r\n   * 构造函数\r\n   * @param name 状态名称\r\n   */\r\n  constructor(public name: string) {\r\n  }\r\n}\r\n\r\n/**\r\n * 基本状态字典, 形如\r\n * {\r\n *  stateName1: stateInstance1,\r\n *  stateName2: stateInstance2,\r\n *  ...\r\n * }\r\n */\r\nexport interface StateDictionary {\r\n    [index: string]: State;\r\n}\r\n\r\n\r\n/**\r\n * --------------------------------------------------------------------------------\r\n * RenderState相关\r\n * --------------------------------------------------------------------------------\r\n */\r\n\r\n/**\r\n * 渲染状态，该状态用于和界面UI绑定\r\n */\r\nexport type RenderState = boolean;\r\n\r\n/**\r\n * 初始渲染状态\r\n */\r\nexport const initialUIState: RenderState = false;\r\n\r\n/**\r\n * 渲染状态字典，形如：\r\n * {\r\n *  renderStateName1: true,\r\n *  renderStateName1: false,\r\n *  ...\r\n * }\r\n */\r\nexport interface RenderStateDictionary {\r\n  [index: string]: RenderState;\r\n}\r\n\r\n\r\n/**\r\n * 渲染方法\r\n * 该方法接收一个StateMachineContext类型的上下文，\r\n * 通过对上下文中指定的当前状态的计算，确定对应渲染状态的值，该方法返回一个RenderState类型的值（即布尔类型）\r\n */\r\nexport type Render = (context: StateMachineContext) => RenderState;\r\n\r\n/**\r\n * 渲染方法字典\r\n * {\r\n *  renderStateName1: render1,\r\n *  renderStateName1: render2,\r\n *  ...\r\n * }\r\n */\r\nexport interface RenderDictionary {\r\n  [index: string]: Render;\r\n}\r\n\r\n\r\n/**\r\n * --------------------------------------------------------------------------------\r\n * Action相关\r\n * --------------------------------------------------------------------------------\r\n */\r\n\r\n/**\r\n * 状态机动作\r\n */\r\nexport type Action = () => any;\r\n\r\n/**\r\n * 状态机行为约束条件\r\n */\r\n// export interface Precondition {\r\n// }\r\n\r\n\r\n/**\r\n * --------------------------------------------------------------------------------\r\n * Effect相关\r\n * --------------------------------------------------------------------------------\r\n */\r\n\r\n/**\r\n * 行为效果，表示状态机发起某行为后引起的界面变化效果\r\n */\r\nexport interface EffectHandlerOption {\r\n\r\n  /**\r\n   * 效果类型\r\n   */\r\n  type: string;\r\n\r\n  /**\r\n   * 效果实现\r\n   */\r\n  effect: any;\r\n}\r\n\r\n/**\r\n * 状态机界面效果\r\n */\r\nexport interface Effect {\r\n\r\n  /**\r\n   * 行为约束条件集合\r\n   */\r\n  preconditions?: any[];\r\n\r\n  /**\r\n   * 发生某行为后引起的界面变化效果\r\n   */\r\n  handlers?: EffectHandlerOption[];\r\n}\r\n\r\n/**\r\n * 状态机效果字典\r\n */\r\nexport interface EffectDictianry {\r\n    [index: string]: Effect;\r\n}\r\n\r\n\r\n","import { StateMachine } from './state_machine';\r\nimport { State } from './types';\r\nimport { Context } from '../context/context';\r\nimport { VariableParseService } from '../variable/index';\r\nimport { FrameContext } from '../frame/index';\r\nimport { StateMachineEvent } from './state_machine_event';\r\n\r\n/**\r\n * 状态机上下文\r\n */\r\nexport class StateMachineContext {\r\n\r\n  /**\r\n   * 当前状态名称\r\n   */\r\n  state: string;\r\n\r\n  parent: Context;\r\n\r\n  parser: VariableParseService;\r\n\r\n  frameContext: FrameContext;\r\n\r\n  stateMachineEvent: StateMachineEvent;\r\n  /**\r\n   * 构造函数\r\n   * @param stateMachine 状态机\r\n   * @param initialState 初始状态\r\n   */\r\n  constructor(public stateMachine: StateMachine) {\r\n    // this.state = initialState.name;\r\n  }\r\n\r\n  initialize(variableParseService: VariableParseService, initialState: State) {\r\n    this.frameContext = this.stateMachine && this.stateMachine.frameContext || null;\r\n    this.state = this.state || (initialState ? initialState.name : '');\r\n    this.parser = variableParseService;\r\n    this.stateMachineEvent = this.stateMachine.stateMachineEvent;\r\n  }\r\n\r\n  /**\r\n   * 状态迁移\r\n   * @param stateName 下一状态的名称\r\n   */\r\n  transitTo(stateName: string) {\r\n    const nextState = this.stateMachine.states[stateName];\r\n    if (nextState) {\r\n      this.state = nextState.name;\r\n      this.stateMachine.render();\r\n    }\r\n  }\r\n\r\n  parse(expression: string, targetType: 'source' | 'target'): any {\r\n    if (expression === null || expression === undefined) {\r\n      return expression;\r\n    }\r\n    const context = this.stateMachineEvent.getFrameContext(expression) || this.stateMachine.frameContext;\r\n    switch (targetType) {\r\n      case 'source':\r\n        return this.parseSourceValue(expression, context);\r\n      case 'target':\r\n        return this.parser.parse(expression, context);\r\n    }\r\n  }\r\n\r\n  private parseSourceValue(expression: string, context: any): any {\r\n    if (expression === null || expression === undefined) {\r\n      return expression;\r\n    }\r\n    let result = expression.trim();\r\n    result = this.parser.parse(result, context);\r\n    if (result === 'state') {\r\n      result = this.state;\r\n    }\r\n    return result;\r\n  }\r\n\r\n  // 兼容旧版本\r\n  get(expression: string): any {\r\n    return this.getUIState(expression);\r\n  }\r\n  // 解析uistate变量表达式并返回表达式的值\r\n  getUIState(expression: string): any {\r\n    if (!expression) {\r\n      return;\r\n    }\r\n    const frameContext = this.stateMachineEvent.getFrameContext(expression);\r\n    if (!frameContext) {\r\n      return;\r\n    }\r\n    this.stateMachineEvent.ListenUIStateChange(frameContext, expression);\r\n    if (this.parser) {\r\n      const value = this.parser.parse(expression, frameContext);\r\n      if (value === null) {\r\n        return null;\r\n      }\r\n      if (typeof value === 'object' && Object.keys(value).length === 0) {\r\n        return null;\r\n      }\r\n      return value;\r\n    } else {\r\n      throw new Error('未初始化变量解析器。');\r\n    }\r\n  }\r\n\r\n  // 解析data变量表达式并返回表达式的值\r\n  getData(expression: string): any {\r\n    if (!expression) {\r\n      return;\r\n    }\r\n    const frameContext = this.stateMachineEvent.getFrameContext(expression);\r\n    if (!frameContext) {\r\n      return;\r\n    }\r\n    this.stateMachineEvent.ListenEntityChange(frameContext, expression);\r\n    if (this.parser) {\r\n      const value = this.parser.parse(expression, frameContext);\r\n      if (value === null) {\r\n        return null;\r\n      }\r\n      if (typeof value === 'object' && Object.keys(value).length === 0) {\r\n        return null;\r\n      }\r\n      return value;\r\n    } else {\r\n      throw new Error('未初始化变量解析器。');\r\n    }\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { StateMachine } from './state_machine';\r\nimport { FrameContext } from '../frame/index';\r\nimport { Change } from '../binding-data/changes';\r\nimport { AppContext } from '../app';\r\n\r\n/**\r\n * 状态机事件，监听uistate的变化和entity的变化\r\n */\r\n@Injectable()\r\nexport class StateMachineEvent {\r\n\r\n  frameContext: FrameContext;\r\n\r\n  get appContext(): AppContext {\r\n    return this.stateMachine.appContext as AppContext;\r\n  }\r\n\r\n  uiFieldList: Array<string> = [];\r\n\r\n  frameContextMap: Map<FrameContext, Array<string>>;\r\n\r\n  dataFieldList: Array<string> = [];\r\n\r\n  dataFrameContextMap: Map<FrameContext, Array<string>>;\r\n\r\n  constructor(public stateMachine: StateMachine) {\r\n    this.frameContextMap = new Map<FrameContext, any>();\r\n    this.dataFrameContextMap = new Map<FrameContext, any>();\r\n  }\r\n\r\n  initialize(frameContext: FrameContext) {\r\n    this.frameContext = frameContext;\r\n  }\r\n\r\n  /**\r\n   * 暂时把这个方法放了这个地方，等季老师共用方法调整后，直接引用他的方法，该方法可删除\r\n   */\r\n  private extractPaths(expression: string): string {\r\n    let path = '';\r\n    const UI_STATE_PATTERN_G = /\\{UISTATE~(\\S+?)\\}$/g;\r\n    const DATA_PATTERN_G = /\\{DATA~(\\S+?)\\}$/g;\r\n    if (typeof expression === 'string') {\r\n      const uiStateVariables = expression.match(UI_STATE_PATTERN_G);\r\n      const dataVariables = expression.match(DATA_PATTERN_G);\r\n      if (uiStateVariables !== null) {\r\n        const UI_STATE_PATTERN = /\\{UISTATE~(\\S+?)\\}$/;\r\n        uiStateVariables.forEach((uiStateVariable: string) => {\r\n          const pathMatches = uiStateVariable.match(UI_STATE_PATTERN);\r\n          if (pathMatches != null && pathMatches.length === 2) {\r\n            path = pathMatches[1];\r\n          }\r\n        });\r\n      }\r\n      if (dataVariables !== null) {\r\n        const DATA_PATTERN = /\\{DATA~(\\S+?)\\}$/;\r\n        dataVariables.forEach((dataVariable: string) => {\r\n          const pathMatches = dataVariable.match(DATA_PATTERN);\r\n          if (pathMatches != null && pathMatches.length === 2) {\r\n            path = pathMatches[1];\r\n          }\r\n        });\r\n      }\r\n    }\r\n    return path;\r\n  }\r\n\r\n  // 根据表达式返回当前组件的frameContext\r\n  getFrameContext(expression: any): FrameContext {\r\n    let frameId = this.extractPaths(expression).split('/')[1] || '';\r\n    if (frameId.startsWith('#{') && frameId.endsWith('}') && this.frameContext) {\r\n      const relativeFrameId = frameId.substring(2, frameId.length - 1);\r\n      frameId = this.frameContext.namespace ? `${this.frameContext.namespace}_${relativeFrameId}` : relativeFrameId;\r\n    }\r\n    return this.appContext.getFrameContext(frameId);\r\n  }\r\n\r\n  // 根据表达式返回当前组件的字段(可能是实体字段也可能是uistate的字段)\r\n  getFrameField(expression: any) {\r\n    return this.extractPaths(expression).split('/')[2];\r\n  }\r\n\r\n  // 监听表单变量的变化\r\n  ListenUIStateChange(frameContext: FrameContext, expression: any) {\r\n    const frameField = this.getFrameField(expression);\r\n    if (!this.frameContextMap.has(frameContext)) {\r\n      this.frameContextMap.set(frameContext, this.uiFieldList);\r\n      frameContext.uiState.changes.subscribe((data) => {\r\n        if (data.field && this.frameContextMap.get(frameContext).indexOf(data.field) > -1) {\r\n          this.stateMachine.render();\r\n        }\r\n      });\r\n    }\r\n    if (this.frameContextMap.get(frameContext).indexOf(frameField) === -1) {\r\n      this.uiFieldList.push(frameField);\r\n    }\r\n  }\r\n\r\n\r\n  // 监听实体数据的变化\r\n  ListenEntityChange(frameContext: FrameContext, expression: any) {\r\n    if (!this.dataFrameContextMap.has(frameContext)) {\r\n      this.dataFrameContextMap.set(frameContext, this.dataFieldList);\r\n      frameContext.bindingData.changes.subscribe((change: Change) => {\r\n        // 切换当前行用到的是\r\n        if (change.type === 'Load' || change.type === 'SelectionChanged') {\r\n          this.stateMachine.render();\r\n        }\r\n        if (change.path.join() && this.isAccordingValue(this.dataFrameContextMap.get(frameContext), change.path.join('/'))) {\r\n          this.stateMachine.render();\r\n        }\r\n      });\r\n    }\r\n    if (this.dataFrameContextMap.get(frameContext).indexOf(expression) === -1) {\r\n      this.dataFieldList.push(expression);\r\n    }\r\n  }\r\n  // 监听是否是解析的数据发生变化\r\n  isAccordingValue(arr: any, path: string) {\r\n    return arr.find(item => {\r\n      return item.indexOf(path) > -1;\r\n    }) === undefined ? false : true;\r\n  }\r\n}","import { BehaviorSubject } from 'rxjs';\r\nimport { MetadataUtil } from '../metadata/index';\r\nimport { StateMachineContext } from './context';\r\nimport { NgState, NgAction, NgRenderState } from './decorators';\r\nimport {\r\n  State, initialUIState, Effect, Render,\r\n  StateDictionary, RenderStateDictionary, RenderDictionary\r\n} from './types';\r\nimport { FrameContext } from '../frame/index';\r\nimport { StateMachineEvent } from './state_machine_event';\r\nimport { VariableParseService } from '../variable/variable_parse_service';\r\nimport { OnDestroy } from '@angular/core';\r\nimport { IDisposable } from '../core';\r\n\r\n/**\r\n * 状态机初始化配置对象\r\n */\r\nexport interface StateMachineOption {\r\n\r\n  /**\r\n   * 界面渲染描述\r\n   */\r\n  renders?: { [index: string]: Render };\r\n\r\n  /**\r\n   * 状态集合\r\n   */\r\n  states?: string[];\r\n\r\n  /**\r\n   * 状态机界面控制效果\r\n   */\r\n  effects?: { [index: string]: Effect };\r\n}\r\n\r\n/**\r\n * 预置界面效果处理\r\n */\r\nexport const effectHandlers = {\r\n\r\n  /**\r\n   * 预置状态迁移处理\r\n   */\r\n  transit: {\r\n\r\n    /**\r\n     * 执行状态迁移\r\n     * @param stateMachine  状态机对象\r\n     * @param stateName     下一状态的名称\r\n     * @param preconditions 迁移条件\r\n     */\r\n    // tslint:disable-next-line: only-arrow-functions\r\n    perform: function (statemachine: StateMachine, stateName: string, preconditons: any[] = []) {\r\n      const nextState: State = statemachine.states[stateName];\r\n      statemachine.context.transitTo(nextState.name);\r\n      statemachine.render();\r\n    }\r\n  }\r\n};\r\n\r\n/**\r\n * 状态机\r\n *\r\n * ### 基本概念\r\n * 状态机中有三个重要的概念：\r\n * - 页面状态（State）：页面的整体状态，比如查看状态、编辑状态；\r\n * - 控件状态（RenderState）：控制具体控件的状态；\r\n * - 迁移动作（Action）：当动作发生时，将页面切换到指定的页面状态。\r\n *\r\n * ### 定义状态机\r\n *\r\n * **基本步骤**\r\n *\r\n * - 继承StateMachine基类，并添加NgStatemachine注解；\r\n * - 定义页面状态、控件状态、迁移动作。\r\n *\r\n * **状态机中的注解**\r\n *\r\n * - NgStatemachine：将类标记为状态机，并进行扩展；\r\n * - NgState：将属性标记为页面状态，通过initialState可以标记此状态是否为初始状态；\r\n * - NgRenderState：将属性标记为控件状态，通过render方法指定控件状态的切换规则，\r\n *   一般情况下是通过对页面状态进行逻辑运算来确定。\r\n * - NgAction：将属性标记为迁移动作，通过transitTo指定动作执行时要迁移到哪个页面状态。\r\n *\r\n * ```ts\r\n * @Injectable()\r\n * @NgStatemachine()\r\n * class SimpleStateMachine extends StateMachine {\r\n *\r\n *   // 查看状态，设置为初始状态\r\n *   @NgState({ initialState: true })\r\n *   viewState: State;\r\n *\r\n *   // 编辑状态\r\n *   @NgState()\r\n *   editState: State;\r\n *\r\n *   // 编辑按钮是否允许点击\r\n *   @NgRenderState({\r\n *     render: (context) => context.state === 'viewState'\r\n *   })\r\n *   canEdit: RenderState;\r\n *\r\n *   // 保存按钮是否允许点击\r\n *   @NgRenderState({\r\n *     render: (context) => context.state === 'editState'\r\n *   })\r\n *   canSave: RenderState;\r\n *\r\n *   // 输入控件是否允许输入\r\n *   @NgRenderState({\r\n *     render: (context) => context.state === 'editState'\r\n *   })\r\n *   canInput: RenderState;\r\n *\r\n *   // 迁移到编辑状态\r\n *   @NgAction({ transitTo: 'editState' })\r\n *   edit: Action;\r\n *\r\n *   // 迁移到查看状态\r\n *   @NgAction({ transitTo: 'viewState' })\r\n *   view: Action;\r\n * }\r\n * ```\r\n * 在上边的代码中做了如下定义：\r\n * - 两个页面状态：查看状态、编辑状态，\r\n * - 三个控件状态：分别用来控制编辑按钮、保存按钮、输入控件的状态，\r\n * - 两个迁移动作：view动作用来将页面切换到查看状态，edit动作用来将页面切换到编辑状态。\r\n *\r\n *\r\n * ### 在模板中使用状态机\r\n *\r\n * 模板中我们主要使用的是控件状态，多个控件可以共享一个控件状态。\r\n *\r\n * ```html\r\n * <button type=\"button\" [disabled]=\"!viewModel.stateMachine.canEdit\">编辑</button>\r\n * <button type=\"button\" [disabled]=\"!viewModel.stateMachine.canSave\">保存</button>\r\n * <input id=\"code\" [disabled]=\"!viewModel.stateMachine.canInput\" />\r\n * <input id=\"name\" [disabled]=\"!viewModel.stateMachine.canInput\" />\r\n * ```\r\n *\r\n * ### 执行状态迁移\r\n * 通过执行状态机上的动作来将页面切换到页面状态，进而改变控件状态。\r\n * 假设我们有这么一个场景，当用户点击保存按钮的时候，我们先执行保存，保存完成后将状态迁移到查看状态。\r\n * 我们可以定义一个CommandHandler，添加两个对应的任务，具体代码如下：\r\n * ```ts\r\n * @Injectable()\r\n * @NgCommandHandler({\r\n *   commandName: 'save'\r\n * })\r\n * class SaveHandler extends CommandHandler {\r\n *\r\n *   schedule() {\r\n *     this.addTask('save', () => {\r\n *       // 实现保存\r\n *     });\r\n *\r\n *     // 状态迁移\r\n *     this.addTask('transitState', ) => {\r\n *       this.stateMachine['view']();\r\n *     });\r\n *   }\r\n * }\r\n * ```\r\n */\r\nexport class StateMachine implements OnDestroy, IDisposable {\r\n  private isStateInited = false;\r\n  /**\r\n   * 初始状态\r\n   */\r\n  public initialState: State;\r\n\r\n  /**\r\n   * 状态字典\r\n   */\r\n  public states: StateDictionary;\r\n\r\n  /**\r\n   * 渲染状态字典\r\n   */\r\n  public renderStates: RenderStateDictionary;\r\n\r\n  /**\r\n   * 渲染器字典\r\n   */\r\n  public renders: RenderDictionary;\r\n\r\n  /**\r\n   * 状态机上下文\r\n   */\r\n  public context: StateMachineContext;\r\n\r\n  /**\r\n   * 状态变更\r\n   */\r\n  public stateChange: BehaviorSubject<string>;\r\n\r\n  public appContext: any;\r\n\r\n  public frameContext: FrameContext;\r\n\r\n  /**\r\n   * 状态机事件监听\r\n   */\r\n  public stateMachineEvent: StateMachineEvent;\r\n  /**\r\n   * 状态机元数据\r\n   */\r\n  public metadatas: { states: { [stateName: string]: NgState }, renderStates: { [renderStateName: string]: NgRenderState }, actions: { [actionName: string]: NgAction } };\r\n  private isDisposed = false;\r\n  /**\r\n   * 构造函数\r\n   */\r\n  constructor() {\r\n    const propsMetadatas = MetadataUtil.getPropsMetadatas(this.constructor);\r\n\r\n    // 遍历所有属性装饰器，并调用相应的build方法\r\n    if (propsMetadatas) {\r\n      Object.keys(propsMetadatas).forEach((propName: string) => {\r\n        const propMetadatas = propsMetadatas[propName];\r\n        propMetadatas.forEach(propMetadata => {\r\n          this['build' + propMetadata.ngMetadataName](propName, propMetadata);\r\n        });\r\n      });\r\n    }\r\n\r\n    // if (!this.initialState) {\r\n    //   throw new Error('请在NgState注解中指定状态机的初始状态。');\r\n    // }\r\n\r\n    this.stateChange = new BehaviorSubject<any>(false);\r\n    this.context = new StateMachineContext(this);\r\n    this.stateMachineEvent = new StateMachineEvent(this);\r\n  }\r\n  public dispose(options?: any) {\r\n    this.isDisposed = true;\r\n    this.frameContext = null;\r\n    this.appContext = null;\r\n    this.context = null;\r\n    this.stateMachineEvent = null;\r\n    this.metadatas = null;\r\n  }\r\n  public ngOnDestroy(): void {\r\n    this.dispose();\r\n  }\r\n\r\n  // 状态机变更，为了在绑定数据之后执行状态机的操作，把render方法延后执行。\r\n  initialize(frameContext: FrameContext, variableParseService: VariableParseService) {\r\n    this.appContext = frameContext.appContext;\r\n    this.frameContext = frameContext;\r\n    const stateMachineMetadata = this.appContext.metadata.stateMachine || this.collectionMetadata();\r\n    this.metadatas = stateMachineMetadata;\r\n    this.buildStateMachine(stateMachineMetadata);\r\n    // if (!this.initialState) {\r\n    //   throw new Error('请在NgState注解中指定状态机的初始状态。');\r\n    // }\r\n    this.context.initialize(variableParseService, this.initialState);\r\n    this.stateMachineEvent.initialize(this.frameContext);\r\n    this.render();\r\n  }\r\n\r\n  private collectionMetadata(): {\r\n    states: { [stateName: string]: NgState },\r\n    renderStates: { [renderStateName: string]: NgRenderState },\r\n    actions: { [actionName: string]: NgAction }\r\n  } {\r\n    const stateMachineMetadata = {\r\n      states: {},\r\n      renderStates: {},\r\n      actions: {}\r\n    };\r\n    const propsMetadatas = MetadataUtil.getPropsMetadatas(this.constructor);\r\n    if (propsMetadatas) {\r\n      Object.keys(propsMetadatas).forEach((propName: string) => {\r\n        const propMetadatas = propsMetadatas[propName];\r\n        propMetadatas.forEach(propMetadata => {\r\n          switch (propMetadata.ngMetadataName) {\r\n            case 'NgState':\r\n              stateMachineMetadata.states[propName] = propMetadata;\r\n              break;\r\n            case 'NgRenderState':\r\n              stateMachineMetadata.renderStates[propName] = propMetadata;\r\n              break;\r\n            case 'NgAction':\r\n              stateMachineMetadata.actions[propName] = propMetadata;\r\n              break;\r\n          }\r\n        });\r\n      });\r\n    }\r\n    return stateMachineMetadata;\r\n  }\r\n\r\n  private buildStateMachine(metadata: {\r\n    states: { [stateName: string]: NgState },\r\n    renderStates: { [renderStateName: string]: NgRenderState },\r\n    actions: { [actionName: string]: NgAction }\r\n  }) {\r\n    Object.keys(metadata.states).forEach((stateName: string) => {\r\n      this.buildNgState(stateName, metadata.states[stateName]);\r\n    });\r\n\r\n    Object.keys(metadata.renderStates).forEach((renderStateName: string) => {\r\n      this.buildNgRenderState(renderStateName, metadata.renderStates[renderStateName]);\r\n    });\r\n\r\n    Object.keys(metadata.actions).forEach((actionName: string) => {\r\n      this.buildNgAction(actionName, metadata.actions[actionName]);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * 构造状态\r\n   * @param stateName 状态名称\r\n   * @param ngState   状态对象\r\n   */\r\n  private buildNgState(stateName: string, ngState: NgState) {\r\n    this.states = this.states || {};\r\n    this[stateName] = new State(stateName);\r\n    this.states[stateName] = this[stateName];\r\n    if (ngState.initialState) {\r\n      this.initialState = this[stateName];\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 构造界面状态\r\n   * @param renderStateName 渲染状态名称\r\n   * @param ngRenderState   渲染状态元数据\r\n   */\r\n  private buildNgRenderState(renderStateName: string, ngRenderState: NgRenderState) {\r\n    this.renderStates = this.renderStates || {};\r\n    this[renderStateName] = initialUIState;\r\n    this.renderStates[renderStateName] = this[renderStateName];\r\n\r\n    // 将renderState上指定的render加入到renders中\r\n    this.renders = this.renders || {};\r\n    this.renders[renderStateName] = ngRenderState.render;\r\n  }\r\n\r\n  /**\r\n   * 构造动作\r\n   * @param actionName 动作名称\r\n   * @param ngAction   动作元数据\r\n   */\r\n  private buildNgAction(actionName: string, ngAction: NgAction) {\r\n    this[actionName] = () => {\r\n      effectHandlers.transit.perform(this, ngAction.transitTo, ngAction.precondition);\r\n    };\r\n  }\r\n\r\n  /**\r\n   * 重新计算所有渲染状态的值\r\n   * 当 state切换的时候，调用遍历所有的render方法，更改renderState\r\n   */\r\n  render() {\r\n    if (this.isDisposed) {\r\n      return;\r\n    }\r\n    for (const renderStateName in this.renderStates) {\r\n      if (this.renderStates.hasOwnProperty(renderStateName) === false) {\r\n        continue;\r\n      }\r\n      const stateRender = this.renders[renderStateName];\r\n      if (!stateRender) {\r\n        continue;\r\n      }\r\n      // 调用render方法，更新renderState\r\n      this.renderStates[renderStateName] = stateRender(this.context);\r\n      this[renderStateName] = this.renderStates[renderStateName];\r\n    }\r\n    this.stateChange.next(this.context.state);\r\n  }\r\n}\r\n","import { TypeDecorator, makeDecorator, makePropDecorator } from '../metadata/index';\r\nimport { Render } from './types';\r\n\r\n\r\n/**\r\n * --------------------------------------------------------------------------------\r\n * NgStateDecorator\r\n * --------------------------------------------------------------------------------\r\n */\r\n\r\n/**\r\n * NgState\r\n */\r\nexport interface NgState {\r\n\r\n  /**\r\n   * 初始状态\r\n   */\r\n  initialState?: boolean;\r\n  /**\r\n   * 状态名称\r\n   */\r\n  name?: string;\r\n}\r\n\r\n/**\r\n * NgStateDecorator\r\n */\r\nexport interface NgStateDecorator {\r\n  (obj?: NgState): any;\r\n  new(obj?: NgState): any;\r\n}\r\n\r\n/**\r\n * NgState\r\n */\r\nexport const NgState: NgStateDecorator =\r\n  makePropDecorator('NgState', (obj?: NgState) => obj);\r\n\r\n\r\n/**\r\n * --------------------------------------------------------------------------------\r\n * NgRenderStateDecorator\r\n * --------------------------------------------------------------------------------\r\n */\r\n\r\n/**\r\n * NgRenderState\r\n */\r\nexport interface NgRenderState {\r\n  render: Render;\r\n}\r\n\r\n/**\r\n * NgRenderStateDecorator\r\n */\r\nexport interface NgRenderStateDecorator {\r\n  (obj?: NgRenderState): any;\r\n  new(obj?: NgRenderState): any;\r\n}\r\n\r\n/**\r\n * NgRenderState\r\n */\r\nexport const NgRenderState: NgRenderStateDecorator =\r\n  makePropDecorator('NgRenderState', (obj: NgRenderState) => obj);\r\n\r\n\r\n/**\r\n * --------------------------------------------------------------------------------\r\n * NgActionDecorator\r\n * --------------------------------------------------------------------------------\r\n */\r\n\r\n/**\r\n * NgAction\r\n */\r\nexport interface NgAction {\r\n  precondition?: any[];\r\n  transitTo: string;\r\n}\r\n\r\n/**\r\n* NgActionDecorator\r\n*/\r\nexport interface NgActionDecorator {\r\n  (obj?: NgAction): any;\r\n  new(obj?: NgAction): any;\r\n}\r\n\r\n/**\r\n * NgRenderStateDecorator\r\n */\r\nexport const NgAction: NgActionDecorator =\r\n  makePropDecorator('NgAction', (action: NgAction) => action);","import { makePropDecorator } from '../metadata/index';\r\nimport { CommandParams, ParamDescriptions,  } from '../command/index';\r\n\r\n/**\r\n * ----------------------------------------\r\n * NgCommand\r\n * ----------------------------------------\r\n */\r\n\r\n/**\r\n * 快捷键\r\n */\r\nexport interface Keybinding {\r\n\treadonly ctrlKey: boolean;\r\n\treadonly shiftKey: boolean;\r\n\treadonly altKey: boolean;\r\n\treadonly metaKey?: boolean;\r\n\treadonly key: String;\r\n}\r\n\r\n/**\r\n * 命令装饰器名称\r\n * @type {string}\r\n */\r\nexport const NG_COMMAND = 'NgCommand';\r\n\r\n/**\r\n * 命令描述\r\n */\r\nexport interface NgCommand {\r\n\r\n  /**\r\n   * 命令名称\r\n   */\r\n  name: string;\r\n\r\n  /**\r\n   * 命令参数\r\n   */\r\n  params?: CommandParams;\r\n\r\n  /**\r\n   * 框架id\r\n   * 通过frameId确定命令执行的上下文，不指定则默认为当前Frame。\r\n   */\r\n  frameId?: string;\r\n\r\n  /**\r\n   * 参数描述，目前描述类型，后续可兼容精度等其他信息。\r\n   */\r\n  paramDescriptions?: ParamDescriptions;\r\n\r\n  /**\r\n   * 快捷键绑定\r\n   */\r\n  keyBinding?: Keybinding\r\n}\r\n\r\n\r\n/**\r\n * 命令装饰接口\r\n */\r\nexport interface NgCommandDecorator {\r\n  (ngCommand?: NgCommand): any;\r\n  new(ngCommand?: NgCommand): any;\r\n}\r\n\r\n/**\r\n * 命令装饰器工厂\r\n * @type {any}\r\n */\r\nexport const NgCommand: NgCommandDecorator =\r\n  makePropDecorator(NG_COMMAND, (obj: NgCommand) => obj);\r\n","import { Injectable, Injector, OnDestroy } from '@angular/core';\r\nimport { MetadataUtil } from '../metadata/index';\r\nimport { Command } from '../command/index';\r\nimport { NG_COMMAND, NgCommand, Keybinding } from './decorators';\r\nimport { BindingData, EntityValueChange } from '../binding-data/index';\r\nimport { UIState } from '../ui-state/index';\r\nimport { Form } from '../form/index';\r\nimport { StateMachine } from '../state-machine/index';\r\nimport { FrameContext } from '../frame/index';\r\nimport { Observable, of, Subject, from, EMPTY } from 'rxjs';\r\nimport { map, concatMap, tap, every, debounceTime, switchMap, takeLast } from 'rxjs/operators';\r\nimport { ExpressionManager, ExpressionResult } from '../expression/index';\r\nimport { IContextMetadata } from '../app/app_metadata';\r\nimport { InvokeOnValueChange } from '../binding-data/types';\r\nimport { IDisposable } from '../core/index';\r\n\r\n/**\r\n * ViewModel是界面层访问应用层的入口。\r\n *\r\n * ### 定义ViewModel\r\n *\r\n * 定义ViewModel需要以下几个步骤：\r\n *\r\n * 1、定义的ViewModel需要继承ViewModel基类\r\n * 2、使用NgViewModel关联相关对象，比如：绑定数据（SinmpleDemoBindingData）、表单（SimpleDemoForm）、\r\n *    状态机（SimpleDemoStateMachine）等，但所有这些关联都是可选的，用不到或者自己单独实现时，不指定即可。\r\n * 3、同时我们需要传递一个injector给基类的构造函数，在ViewModel实例化时，会从injector获取NgViewModel声明的各个类型的实例。\r\n *\r\n * 下面我们来定义一个简单的ViewModel，代码如下：\r\n * ```ts\r\n * import { Injector, Injectable } from '@angular/core';\r\n * import { NgViewModel, ViewModel } from '@farris/devkit';\r\n *\r\n * @Injectable()\r\n * @NgViewModel({\r\n *   children: [],\r\n *   binding: SimpleDemoBindingData,\r\n *   form: SimpleDemoForm,\r\n *   stateMachine: SimpleDemoStateMachine,\r\n * })\r\n * class SimpleDemoViewModel extends ViewModel {\r\n *    constructor(injector: Injector) {\r\n *      super(injector);\r\n *    }\r\n *    @NgCommand({\r\n *      name: 'formLoad',\r\n *      params: {\r\n *        dataId: '1'\r\n *      }\r\n *    })\r\n *    public formLoad() {}\r\n * }\r\n * export { SimpleDemoViewModel };\r\n * ```\r\n *\r\n * 通过组件的构造函数，我们将ViewModel注入进组件\r\n * ```ts\r\n * @Component({\r\n *   selector: 'app-simple-demo',\r\n *   templateUrl: './simple-demo.component.html'\r\n * })\r\n * class SimpleDemoComponent implements OnInit {\r\n *\r\n *   public viewModel: SimpleDemoViewModel;\r\n *\r\n *   constructor(viewModel: SimpleDemoViewModel) {\r\n *     this.viewModel = viewModel;\r\n *   }\r\n * }\r\n * ```\r\n *\r\n * ### 组件模板中使用ViewModel\r\n *\r\n * 我们可以在模板中绑定NgViewModel中指定的 BindingData、Form、StateMachine的实例。\r\n * ```html\r\n * * <!--绑定数据-->\r\n * <p>{{viewModel.bindingData.name}}</p>\r\n *\r\n * <!--绑定表单-->\r\n * <form [formGroup]=\"viewModel.form\">\r\n *   <input type=\"text\" formControlName=\"name\">\r\n * </form>\r\n *\r\n * <!--绑定状态机-->\r\n * <button type=\"button\" [disabled]=\"!viewModel.stateMachine.canAdd\">新增 </button>\r\n * * ```\r\n *\r\n * 我们在模板中绑定绑定viewModel的一个方法作为事件处理，这个方法可以是普通的方法，也可以是用NgCommand注解修饰过的。\r\n * ```html\r\n * <button type=\"button\" (click)=\"viewModel.add()\">新增 </button>\r\n * ```\r\n *\r\n * ### 组合的ViewModle\r\n *\r\n * 当界面比较复杂时，我们对界面按一定的粒度进行拆分，拆分出来的各个组成部分分别对应一个ViewModel，这样就形成了一个ViewModel树。\r\n * 我们在父的ViewModel的NgViewModel注解中通过在children属性中声明它的子ViewModel，将它们关联起来。\r\n * 假设我们有一个左列表右卡片的界面，我们可以为左列表、右卡片分别定义一个ViewModel，然后在页面的ViewModel中，将它们组合起来，\r\n * 代码如下：\r\n * ```ts\r\n * @Injectable()\r\n *  @NgViewModel({\r\n *  children: [LeftListViewModel, RightCardViewModel],\r\n *    binding: NestedDemoBindingData,\r\n * })\r\n * class NestedDemoViewModel extends ViewModel {\r\n *   constructor(injector: Injector) {\r\n *     super(injector);\r\n *   }\r\n * }\r\n * export { NestedDemoViewModel };\r\n * ```\r\n */\r\n@Injectable()\r\nclass ViewModel implements IDisposable, OnDestroy {\r\n\r\n  public name: string;\r\n\r\n  public frameContext: FrameContext;\r\n\r\n  /**\r\n   * 绑定数据\r\n   */\r\n  public bindingData: BindingData;\r\n\r\n  /**\r\n   * 绑定路径\r\n   * 形如：/(根实体)，/edus（从表），/edus/grades（从从表）\r\n   */\r\n  public bindingPath: string;\r\n\r\n  /**\r\n   * 界面状态\r\n   */\r\n  public uiState: UIState;\r\n\r\n  /**\r\n   * 表单定义\r\n   */\r\n  public form: Form;\r\n\r\n  /**\r\n   * 状态机\r\n   */\r\n  public stateMachine: StateMachine;\r\n\r\n  /**\r\n   * 界面验证信息\r\n   */\r\n  public verifyInformations: any[] = [];\r\n\r\n  public verifycationChanged = new Subject<any[]>();\r\n  /**\r\n   * 表达式服务\r\n   */\r\n  public get expression(): ExpressionManager {\r\n    return this.frameContext.expressionManager;\r\n  }\r\n  /**\r\n   * 表达式结果\r\n   */\r\n  public get expressionResult(): ExpressionResult {\r\n    return this.frameContext.expressionResult;\r\n  }\r\n  /**\r\n   * 快捷键映射\r\n   */\r\n  public keybindingMap: Map<string, Keybinding>;\r\n\r\n  /**\r\n   * 值变化前监听器\r\n   */\r\n  private entityValueChangingListeners: Map<string, string>;\r\n\r\n  /**\r\n   * 值变化后监听器\r\n   */\r\n  private entityValueChangedListeners: Map<string, string>;\r\n  /**\r\n   * 元数据\r\n   */\r\n  public metadatas: { [propName: string]: NgCommand };\r\n\r\n  /**\r\n   * kendogrid option\r\n   */\r\n\r\n  // constructor(metadata?: IContextMetadata) {\r\n  //   if (!this.bindingPath && metadata && metadata.bindingTo) {\r\n  //     this.bindingPath = metadata.bindingTo;\r\n  //   }\r\n  // }\r\n  constructor() { }\r\n  ngOnDestroy(): void {\r\n    this.dispose();\r\n  }\r\n\r\n  dispose(options?: any) {\r\n    // this.frameContext = null;\r\n    // this.bindingData = null;\r\n    // this.stateMachine = null;\r\n    this.form = null;\r\n    // this.uiState = null;\r\n\r\n    if (this.entityValueChangingListeners) {\r\n      this.entityValueChangingListeners.clear();\r\n    }\r\n    if (this.entityValueChangedListeners) {\r\n      this.entityValueChangedListeners.clear();\r\n    }\r\n    if (this.verifycationChanged) {\r\n      this.verifycationChanged.complete();\r\n      this.verifycationChanged = null;\r\n    }\r\n    }\r\n\r\n  public setMetadata(metadata: IContextMetadata) {\r\n    if (!this.bindingPath && metadata && metadata.bindingTo) {\r\n      this.bindingPath = metadata.bindingTo;\r\n    }\r\n  }\r\n  /**\r\n   * 初始化\r\n   */\r\n  public init(context: FrameContext) {\r\n    if (!this.name) {\r\n      this.name = context.metadata.viewModelCode || this.constructor.name;\r\n    }\r\n    this.frameContext = context;\r\n    this.bindingData = context.bindingData;\r\n    this.uiState = context.uiState;\r\n    this.form = context.form;\r\n    this.stateMachine = context.stateMachine;\r\n    this.buildCommands(context);\r\n    this.entityValueChangingListeners = new Map<string, string>();\r\n    this.entityValueChangedListeners = new Map<string, string>();\r\n    // 为bindingData赋值值变化监听器\r\n    if (this.bindingData) {\r\n      this.bindingData.setValueChangeInvokerFactory((paths: string[]): InvokeOnValueChange => {\r\n        return (preValue, value, entityChanged: boolean, primaryValue?: any): Observable<boolean> => {\r\n          const plainPath = '/' + paths.join('/');\r\n          let command: string;\r\n          if (entityChanged === false) {\r\n            command = this.entityValueChangingListeners[plainPath];\r\n          } else {\r\n            command = this.entityValueChangedListeners[plainPath];\r\n          }\r\n\r\n          if (!!command) {\r\n            const change: EntityValueChange = {\r\n              paths: paths,\r\n              preValue: preValue,\r\n              value: value,\r\n              id: primaryValue,\r\n              changed: entityChanged\r\n            };\r\n            const commands = command.split(';').filter(p => p);\r\n            let valueChangeSuccess = true;\r\n            return from(commands).pipe(\r\n              concatMap(item => {\r\n                if (!valueChangeSuccess) {\r\n                  return EMPTY;\r\n                }\r\n                return this[item](change).pipe(\r\n                  tap((result: any) => {\r\n                    valueChangeSuccess = result;\r\n                  })\r\n                );\r\n              }),\r\n              every((result: any) => result)\r\n            );\r\n            // return this[command](change).pipe(map(result => {\r\n            //   return result === false ? false : true;\r\n            // }));\r\n          } else {\r\n            return of(true);\r\n          }\r\n        };\r\n\r\n      });\r\n    }\r\n\r\n    this.initListeners();\r\n  }\r\n\r\n  /**\r\n   * 绑定命令\r\n   */\r\n  public buildCommands(context: FrameContext) {\r\n    const ngCommands: {\r\n      [commandName: string]: NgCommand\r\n    } = context.metadata.commands || MetadataUtil.getPropsMetadatasByName(this.constructor, NG_COMMAND);\r\n    this.metadatas = ngCommands;\r\n    this.keybindingMap = new Map<string, Keybinding>();\r\n    Object.keys(ngCommands).forEach((propertyName: string) => {\r\n      const ngCommand: NgCommand = ngCommands[propertyName];\r\n      // 注册快捷键\r\n      if (ngCommand.keyBinding) {\r\n        this.keybindingMap.set(propertyName, ngCommand.keyBinding);\r\n      }\r\n      Object.defineProperty(this, propertyName, {\r\n        value: (data: any) => {\r\n          if (context.isDisposed) {\r\n            return EMPTY;\r\n          }\r\n          // 获取命令处理上下文\r\n          let targetContext = context;\r\n          if (ngCommand.frameId) {\r\n            targetContext = context.appContext.getFrameContext(ngCommand.frameId);\r\n          }\r\n          const command: Command = {\r\n            name: ngCommand.name,\r\n            params: ngCommand.params,\r\n            paramDescriptions: ngCommand.paramDescriptions,\r\n            eventParam: data || null\r\n          };\r\n          return targetContext.commandBus.dispatch(command);\r\n        }\r\n      });\r\n    });\r\n  }\r\n\r\n  /**\r\n   * 从Form获取监听器\r\n   */\r\n  private initListeners() {\r\n    const extractPath = (bindingBasePath: string, bindingPath: string): string => {\r\n      return '/' + bindingBasePath.split('/').concat(bindingPath.split('.')).filter((item) => item.length > 0).join('/');\r\n    };\r\n\r\n    if (this.form) {\r\n      const valueChangingListeners = this.form.getEntityValueChangingListeners();\r\n      Object.keys(valueChangingListeners).forEach((bindingPath) => {\r\n        const plainPath = extractPath(this.bindingPath, bindingPath);\r\n        this.entityValueChangingListeners[plainPath] = valueChangingListeners[bindingPath];\r\n      });\r\n\r\n      const valueChangedListeners = this.form.getEntityValueChangedListeners();\r\n      Object.keys(valueChangedListeners).forEach((bindingPath) => {\r\n        const plainPath = extractPath(this.bindingPath, bindingPath);\r\n        this.entityValueChangedListeners[plainPath] = valueChangedListeners[bindingPath];\r\n      });\r\n    }\r\n  }\r\n\r\n  public bindToParent(parent: ViewModel) {\r\n    if (parent) {\r\n      if (parent.verifycationChanged) {\r\n        parent.verifycationChanged.subscribe(verifyInformations => {\r\n          if (this.verifycationChanged) {\r\n            this.verifycationChanged.next(verifyInformations);\r\n          }\r\n        });\r\n      }\r\n    }\r\n  }\r\n  /**\r\n   * 合并审批及表单表达式并计算结果\r\n   * @param expression 表达式\r\n   * @returns \r\n   */\r\n  public transform(expression: string | boolean | Array<any>): any {\r\n    if (Array.isArray(expression)) {\r\n      const wfConf = expression.find(item => item && item.source === 'wf');\r\n      if (wfConf && wfConf.value) {\r\n        return this.transform(wfConf.value);\r\n      } else {\r\n        return this.transform(expression[0]);\r\n      }\r\n    } else {\r\n      if (typeof expression === 'boolean') {\r\n        return expression;\r\n      } else if (typeof expression === 'string') {\r\n        return new Function('ctx', `return ${expression}`).apply(this.frameContext, [this]);\r\n      } else {\r\n        // 表达式result\r\n        return expression;\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nexport { ViewModel };\r\n","import { Injectable } from '@angular/core';\r\n\r\n@Injectable()\r\nclass Context {\r\n\r\n  /**\r\n   * 上下文变量\r\n   */\r\n  params: Map<string, any> = new Map<string, any>();\r\n\r\n  /**\r\n   * 获取变量\r\n   */\r\n  getParam(key: string): any {\r\n    return this.params.get(key);\r\n  }\r\n\r\n  /**\r\n   * 设置变量\r\n   */\r\n  setParam(key: string, value: any) {\r\n    this.params.set(key, value);\r\n  }\r\n}\r\n\r\nexport { Context };\r\n","/*\r\n * @Author: Witt\r\n * @Date: 2018-12-29 10:46:01\r\n * @Last Modified by: Witt\r\n * @Last Modified time: 2018-12-30 17:56:02\r\n */\r\n\r\nimport { BindingData } from '../binding-data';\r\nimport { IDisposable } from '../core';\r\n\r\n/**\r\n * BindingData管理类\r\n */\r\nclass BindingDataManager implements IDisposable {\r\n\r\n  /**\r\n   * BindingDataMap\r\n   */\r\n  private bindingDataMap: Map<string, BindingData>;\r\n\r\n  /**\r\n   * 构造函数\r\n   */\r\n  constructor() {\r\n    this.bindingDataMap = new Map<string, BindingData>();\r\n  }\r\n\r\n  /**\r\n   * 获取BindingDataMap\r\n   */\r\n  public getBindingDataMap(): Map<string, BindingData> {\r\n    return this.bindingDataMap;\r\n  }\r\n\r\n  /**\r\n   * 根据name获取BindingData\r\n   * @return 找不到时返回undefined\r\n   */\r\n  public getBindingDataByName(name: string): BindingData {\r\n    return this.bindingDataMap.get(name);\r\n  }\r\n\r\n  /**\r\n   * 初始化全局的BindingData\r\n   * @description 仅在高速模式时注册bindingData\r\n   */\r\n  public regBindingData(name: string, bindingData: BindingData): void {\r\n    this.bindingDataMap.set(name, bindingData);\r\n  }\r\n  public unRegisteBindingData(name: string) {\r\n    this.bindingDataMap.delete(name);\r\n  }\r\n  /**\r\n   * 是否Repository已经存在\r\n   */\r\n  public ifBindingDataExits(name: string) {\r\n    const bindingData = this.getBindingDataByName(name);\r\n    return bindingData ? true : false;\r\n  }\r\n  public dispose() {\r\n    this.bindingDataMap.clear();\r\n  }\r\n\r\n}\r\n\r\nexport { BindingDataManager };\r\n","/*\r\n * @Author: Witt\r\n * @Date: 2018-12-29 10:46:01\r\n * @Last Modified by: Witt\r\n * @Last Modified time: 2018-12-30 18:06:11\r\n */\r\n\r\nimport { Injectable, Inject, Optional } from '@angular/core';\r\nimport { Repository } from '../repository/index';\r\nimport { Entity } from '../entity/index';\r\nimport { IDisposable } from '../core';\r\n\r\n/**\r\n * Repository管理类\r\n */\r\n@Injectable()\r\nclass RepositoryManager implements IDisposable {\r\n  /**\r\n   * repositoryMap\r\n   */\r\n  private repositoryMap: Map<string, Repository<Entity>>;\r\n\r\n  /**\r\n   * 构造函数\r\n   */\r\n  constructor() {\r\n    this.repositoryMap = new Map<string, Repository<Entity>>();\r\n  }\r\n\r\n  /**\r\n   * 注册Repository\r\n   */\r\n  public regRepository(name: string, repository: Repository<Entity>): void {\r\n    this.repositoryMap.set(name, repository);\r\n  }\r\n\r\n  public unRegisteRepository(name: string) {\r\n    this.repositoryMap.delete(name);\r\n  }\r\n  /**\r\n   * 获取RepositoryMap\r\n   * @internal\r\n   */\r\n  public getRepositoryMap(): Map<string, Repository<Entity>> {\r\n    return this.repositoryMap;\r\n  }\r\n\r\n  /**\r\n   * 获取Repository数组\r\n   */\r\n  public getRepositories(): Repository<Entity>[] {\r\n    return Array.from(this.repositoryMap.values());\r\n  }\r\n\r\n  /**\r\n   * 根据name获取Repository\r\n   */\r\n  public getRepositoryByName(name: string): Repository<Entity> {\r\n    return this.repositoryMap.get(name);\r\n  }\r\n\r\n  /**\r\n   * 是否Repository已经存在\r\n   */\r\n  public ifRepositoryExits(name: string) {\r\n    const repository = this.getRepositoryByName(name);\r\n    return repository ? true : false;\r\n  }\r\n  public dispose() {\r\n    // this.repositoryMap.forEach((repo: Repository<any>) => {\r\n    //   if (repo) {\r\n    //     repo.entityCollection.reset(false);\r\n    //   }\r\n    // });\r\n    this.repositoryMap.clear();\r\n  }\r\n\r\n}\r\n\r\nexport { RepositoryManager };\r\n","import { IDisposable } from '../core';\r\nimport { FrameContext } from '../frame';\r\n\r\n/**\r\n * FrameComponent刷新器\r\n */\r\nclass FrameComponentRefresher implements IDisposable {\r\n  private frameComponentMap: Map<string, any>;\r\n\r\n  /**\r\n   * 构造函数\r\n   */\r\n  constructor() {\r\n    this.frameComponentMap = new Map<string, any>();\r\n  }\r\n\r\n  /**\r\n   * 刷新组件\r\n   */\r\n  public refreshComponents() {\r\n    this.frameComponentMap.forEach((component: any, frameId: string) => {\r\n      if (typeof component['onFormLoad'] === 'function') {\r\n        component.onFormLoad();\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * 注册组件\r\n   * @param frameId   FrameId\r\n   * @param component Frame组件实例\r\n   */\r\n  public regFrameComponent(frameId: string, component: any) {\r\n    this.frameComponentMap.set(frameId, component);\r\n  }\r\n  /**\r\n   * 注销组件注册\r\n   */\r\n  public unregFrameContext(frameContext: FrameContext): void {\r\n    const frameId = frameContext.frameId;\r\n    this.frameComponentMap.delete(frameId);\r\n  }\r\n  public dispose() {\r\n    this.frameComponentMap.clear();\r\n  }\r\n}\r\n\r\nexport { FrameComponentRefresher };\r\n","import { FrameContext } from '../frame/index';\r\nimport { FrameContextManager } from './frame_contex_manager';\r\n\r\n/**\r\n * 变更检测控制器\r\n */\r\nclass ChangeDetectionController {\r\n\r\n  /**\r\n   * 所有的FrameContext数组\r\n   */\r\n  private get frameContexts(): FrameContext[] {\r\n    return this.frameContextManager.getFrameContexts();\r\n  }\r\n\r\n  /**\r\n   * 构造函数\r\n   */\r\n  constructor(private frameContextManager: FrameContextManager) {\r\n  }\r\n\r\n  /**\r\n   * 将所有的FrameComponent重新加入到变更检测树\r\n   * @todo\r\n   * 1、该方法仅供数据源变更产生大量变更时优化性能使用；\r\n   * 2、加setTimeout来保证数据变更流完成之后，再执行变更检测，目前父对象是通过subscribe监听子对象变化，导致产生异步；\r\n   * 3、应该从根本上解决该问题，而不是setTimeout。\r\n   */\r\n  public reattach(): void {\r\n    setTimeout(() => {\r\n      this.frameContexts.forEach((frameContext: FrameContext) => {\r\n        frameContext.frameComponent.reattach();\r\n        frameContext.frameComponent.detectChanges();\r\n      });\r\n    });\r\n  }\r\n\r\n  /**\r\n   * 将所有的FrameComponent脱离变更检测树\r\n   */\r\n  public detach(): void {\r\n    this.frameContexts.forEach((frameContext: FrameContext) => {\r\n      frameContext.frameComponent.detach();\r\n    });\r\n  }\r\n}\r\n\r\nexport { ChangeDetectionController };\r\n","import { AppContext } from './app_context';\r\n\r\n/**\r\n * The manager for all appContexts.\r\n * @summary\r\n * 1, The generator create unique frameId dynamically for each frameContext in the combination forms.\r\n * 2, Combined form and Host form visit each other by these unique frameIds.\r\n * 3, Now we make these forms has own appContext, they can't visit each other in old way.\r\n * 4, For compatible purpose, we collect all appContexts together and search frameContext in these appContexts by unque frameId.\r\n */\r\nclass AppContextManager {\r\n\r\n  /**\r\n   * AppContext Set\r\n   */\r\n  private appContextSet: Set<AppContext>;\r\n\r\n  /**\r\n   * constructor\r\n   */\r\n  constructor() {\r\n    this.appContextSet = new Set<AppContext>();\r\n  }\r\n\r\n  /**\r\n   * Register AppContext\r\n   */\r\n  public registerAppContext(appContext: AppContext): void {\r\n    this.appContextSet.add(appContext);\r\n  }\r\n\r\n  /**\r\n   * Unregister AppContext\r\n   */\r\n  public unregisterAppContext(appContext: AppContext): void {\r\n    this.appContextSet.delete(appContext);\r\n  }\r\n\r\n  /**\r\n   * Get an array of all AppContexts.\r\n   */\r\n  public getAppContexts(): AppContext[] {\r\n    return Array.from(this.appContextSet);\r\n  }\r\n\r\n}\r\n\r\nexport { AppContextManager };\r\n","import { AppContext } from './app_context';\r\n\r\nexport class ComponentManager {\r\n  constructor(private appContext: AppContext) { }\r\n  public get(paths: string[]) {\r\n    if (!Array.isArray(paths) || paths.length < 1) {\r\n      throw new Error('Argument error !');\r\n    }\r\n    if (!this.appContext || !this.appContext.componentRefs || this.appContext.componentRefs.size < 1) {\r\n      return null;\r\n    }\r\n    const componentRefs = this.appContext.componentRefs;\r\n    let component: any = componentRefs;\r\n    paths.forEach(path => {\r\n      component = component && component.get(path) || null;\r\n    });\r\n    return component;\r\n  }\r\n  /**\r\n   * 获取指定frame下所有的组件\r\n   * @param frameId \r\n   * @returns \r\n   */\r\n  public getComponentsByFrameId(frameId: string): Map<string, any> | undefined {\r\n    if (!this.appContext || !this.appContext.componentRefs || this.appContext.componentRefs.size < 1) {\r\n      return null;\r\n    }\r\n    const componentRefs = this.appContext.componentRefs;\r\n    return componentRefs.get(frameId);\r\n  }\r\n}\r\n","import { InjectionToken } from '@angular/core';\r\n/**\r\n * 表单Id\r\n */\r\nexport const FORM_ID = new InjectionToken<string>('@farris/devkit FORM_ID');\r\n","export class DomService {\r\n\r\n  constructor() { }\r\n\r\n  public getElementByBinding(contents: any[], bindingFieldId: string): any[] {\r\n    const controls = [];\r\n    for (const element of contents) {\r\n      // 优先变量数据集合类组件\r\n      if (element.fields) { // 列表\r\n        const childControls = this.getElementByBinding(element.fields, bindingFieldId);\r\n        controls.push(...childControls);\r\n      }\r\n      // 其次遍历容器类组件\r\n      else if (element.contents) { // 容器组件\r\n        const childControls = this.getElementByBinding(element.contents, bindingFieldId);\r\n        controls.push(...childControls);\r\n      }\r\n      // 再次遍历集合类字段节点\r\n      else if (element.editor) {\r\n        const childControls = this.getElementByBinding([element.editor], bindingFieldId);\r\n        controls.push(...childControls);\r\n      }\r\n      // 最后遍历输入类组件\r\n      else if (element.binding && element.binding.field === bindingFieldId) {\r\n        controls.push(element);\r\n      }\r\n    }\r\n    return controls;\r\n  }\r\n}\r\n","import { FormDeclaration } from './dom-entity';\r\nimport { Schema } from './schema';\r\n\r\nexport class FormContent {\r\n    Id: string;\r\n    Code: string;\r\n    Name: string;\r\n    Contents: {\r\n        module: FormModule,\r\n        options?: FormOptions\r\n    };\r\n}\r\n\r\nexport class FormContentForDB {\r\n    Id: string;\r\n    Code: string;\r\n    Name: string;\r\n    Contents: string;\r\n\r\n    constructor(content: FormContent) {\r\n        this.Id = content.Id;\r\n        this.Code = content.Code;\r\n        this.Name = content.Name;\r\n        this.Contents = JSON.stringify(content.Contents);\r\n    }\r\n}\r\n\r\nexport class FormMetadaDataDom {\r\n    module: FormModule;\r\n}\r\n\r\nexport class FormModule {\r\n    id: string;\r\n    code: string;\r\n    name: string;\r\n    caption: string;\r\n    type: string;\r\n    creator: string;\r\n    creationDate: Date;\r\n    updateVersion: string;\r\n    showTitle: boolean;\r\n    boostrap: string;\r\n    schemas: Array<Schema>;\r\n    states: Array<any>;\r\n    contents: Array<any>;\r\n    stateMachines: Array<any>;\r\n    viewmodels: Array<IFormViewModel>;\r\n    components: Array<any>;\r\n    webcmds: Array<any>;\r\n    serviceRefs: Array<any>;\r\n    ctrlLangs: any;\r\n\r\n    // 是否移动审批表单\r\n    isMobileApprove: boolean;\r\n\r\n    // 是否组合表单\r\n    isComposedFrm: boolean;\r\n\r\n    // 表单所在的工程名\r\n    projectName: string;\r\n\r\n    // 外部模块声明\r\n    extraImports: Array<{ name: string, path: string }>;\r\n\r\n    // 外部组件\r\n    externalComponents: Array<any>;\r\n    // 当前组件声明：事件、变量、命令\r\n    declarations: FormDeclaration;\r\n    // 订阅\r\n    subscriptions: Array<any>;\r\n}\r\n\r\n// export class FormDeclaration {\r\n//     events: Array<any>;\r\n//     commands: Array<any>;\r\n//     states: Array<any>;\r\n// }\r\n\r\nexport class FormOptions {\r\n    enableTextArea: boolean;\r\n    enableDragAndDropToModifyLayout: boolean;\r\n}\r\n\r\nexport interface IFormViewModel {\r\n    id: string;\r\n    code: string;\r\n    name: string;\r\n    fields: IFormViewModelField[];\r\n    commands: any[];\r\n    serviceRefs: any[];\r\n    states: IFormViewModelUiState[];\r\n    bindTo: string;\r\n    parent: string;\r\n    pagination: any;\r\n    enableValidation: boolean;\r\n}\r\n\r\nexport interface IFormViewModelField {\r\n    type: string;\r\n    id: string;\r\n    fieldName: string;\r\n    bindingPath: string;\r\n    groupId: string;\r\n    groupName: string;\r\n    updateOn: 'change' | 'blur' | 'submit';\r\n}\r\n\r\n\r\nexport interface IStateMachine {\r\n    initialState: string;\r\n    renderState: { [renderStateName: string]: IRenderState };\r\n    state: IState[];\r\n    action: { [actionName: string]: IAction };\r\n}\r\n\r\nexport interface IRenderState {\r\n    name: string;\r\n    condition: IRenderStateCondition[];\r\n    description: string;\r\n}\r\n\r\nexport interface IRenderStateCondition {\r\n    compare: string;\r\n    lBracket: string;\r\n    rBracket: string;\r\n    relation: string;\r\n    source: string;\r\n    target: string;\r\n}\r\n\r\nexport interface IState {\r\n    state: string;\r\n    name: string;\r\n    description: string;\r\n}\r\n\r\nexport interface IAction {\r\n    name: string;\r\n    transitTo: string;\r\n    precondition: any[];\r\n    description: string;\r\n}\r\n\r\nexport interface IFormViewModelCommand {\r\n    id: string;\r\n    code: string;\r\n    name: string;\r\n    params: IFormViewModelCommandParam[];\r\n    handlerName: string;\r\n    cmpId: string;\r\n    shortcut: any;\r\n    extensions: any[]\r\n}\r\n\r\nexport interface IFormViewModelCommandParam {\r\n    name: string;\r\n    showName: string;\r\n    value: string;\r\n    description: string;\r\n}\r\n\r\nexport interface IFormViewModelUiState {\r\n    id: string;\r\n    category: string;\r\n    code: string;\r\n    name: string;\r\n    type: string;\r\n}\r\n\r\n","\r\nimport { IFormViewModel } from './form-metadata';\r\nimport { Schema, SchemaEntity, SchemaEntityField } from './schema';\r\n\r\nexport class SchemaService {\r\n\r\n    constructor() { }\r\n\r\n    /**\r\n     * 根据字段标识数组获取指定字段集合\r\n     * @param fieldIds 字段标识数组\r\n     * @param schema 实体结构\r\n     * @param viewModel 视图模型\r\n     * @returns 已Map形式存储的指定字段字典\r\n     */\r\n    public getFieldsByIds(fieldIds: string[], schema: Schema, viewModel: IFormViewModel)\r\n        : Map<string, SchemaEntityField> {\r\n        const specifiedFieldsMap = new Map<string, SchemaEntityField>();\r\n        const entities = schema.entities;\r\n        if (entities && entities.length && viewModel) {\r\n            const entityPath = viewModel.bindTo;\r\n            const fields = this.getEntityFields(entities, entityPath);\r\n            const fieldsMap = this.flattenFields(fields);\r\n            fieldIds.forEach(fieldId => {\r\n                if (fieldsMap.has(fieldId)) {\r\n                    specifiedFieldsMap.set(fieldId, fieldsMap.get(fieldId));\r\n                }\r\n            });\r\n        }\r\n        return specifiedFieldsMap;\r\n    }\r\n\r\n    /**\r\n     * 将字段列表打平为字典结构\r\n     * @param fields 字段属性\r\n     * @param fieldsMap 缺省参数，用来存储字段的Map对象\r\n     * @returns 以Map形式存储的字段字段\r\n     */\r\n    private flattenFields(\r\n        fields: SchemaEntityField[],\r\n        fieldsMap: Map<string, SchemaEntityField> = new Map<string, SchemaEntityField>()\r\n    ): Map<string, SchemaEntityField> {\r\n        for (const field of fields) {\r\n            fieldsMap.set(field.id, field);\r\n            if (field.type && field.type.fields && field.type.fields.length > 0) {\r\n                this.flattenFields(field.type.fields, fieldsMap);\r\n            }\r\n        }\r\n        return fieldsMap;\r\n    }\r\n\r\n    /**\r\n     * 获取表字段列表\r\n     * @param entities 实体对象集合\r\n     * @param entityPath 指定实体路径，根实体路径为'/'\r\n     */\r\n    private getEntityFields(entities: SchemaEntity[], entityPath: string): SchemaEntityField[] {\r\n        if (entities && entities.length) {\r\n            const splitIndex = entityPath.indexOf('/');\r\n            if (splitIndex > -1) {\r\n                entityPath = entityPath.slice(splitIndex + 1, entityPath.length);\r\n            }\r\n            // 遍历所有实体，查找匹配指定路径的实体\r\n            for (const entity of entities) {\r\n                if (entityPath === '' || entityPath === entity.code || entityPath === entity.label) {\r\n                    return entity.type.fields;\r\n                } else {\r\n                    const fields = this.getEntityFields(entity.type.entities, entityPath);\r\n                    if (fields && fields.length) {\r\n                        return fields;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return [];\r\n    }\r\n}\r\n","\r\nimport { CommandController, CommandHandler, CommandHandlerExtender, ControllerMethod, DynamicCommandHandler } from '../command';\r\nimport { ValidateRule } from '../entity';\r\nimport { NgFormControl, NgValidateForm } from '../form';\r\nimport { DomService, Schema, SchemaEntityField } from '../schema';\r\nimport {\r\n  IFormViewModel, IFormViewModelCommand, IFormViewModelCommandParam, IFormViewModelField,\r\n  IFormViewModelUiState, IRenderState, IStateMachine\r\n} from '../schema/form-metadata';\r\nimport { SchemaService } from '../schema/schema.service';\r\nimport { NgParam } from '../ui-state';\r\nimport { NgCommand } from '../view-model';\r\nimport { IContextMetadata, IContextStateMachineMetadata } from './app_metadata';\r\n\r\nexport class ContextMetadataBuilder {\r\n\r\n  constructor() {\r\n\r\n  }\r\n\r\n  /**\r\n   * 构造应用程序上下文元数据\r\n   * @param formMetadataContent 表单元数据\r\n   * @param stateMachineMetadata 状态机元数\r\n   * @returns 应用程序上下文元数据\r\n   */\r\n  public buildAppContextMetadata(formMetadataContent: any, stateMachineMetadata: IStateMachine): IContextMetadata {\r\n    const module = formMetadataContent.module;\r\n    const uiStates = module.states;\r\n    const appContextMetadata = {\r\n      identify: module.code,\r\n      namespace: '',\r\n      stateMachine: this.buildStataMachineMetadata(stateMachineMetadata),\r\n      uiStates: this.buildUiStateMetadata(uiStates)\r\n    };\r\n    return appContextMetadata;\r\n  }\r\n\r\n\r\n  /**\r\n   * 构造视图上下文元数据\r\n   * @param componentId 组件标识\r\n   * @param viewModel 视图模型元数据\r\n   * @param declarations 外部接口定义\r\n   * @param subscriptions 事件订阅定义\r\n   * @returns 视图上下文元数据\r\n   */\r\n  public buildViewContextMetadata(\r\n    component: any,\r\n    viewModel: IFormViewModel,\r\n    schema: Schema,\r\n    controllers: { [id: string]: CommandController }\r\n  ): IContextMetadata {\r\n    const contextMetadata = {\r\n      identify: component.id,\r\n      namespace: '',\r\n      commands: this.buildCommand(viewModel.commands),\r\n      commandHandlers: this.buildCommandHandlers(viewModel.commands, controllers),\r\n      commandHandlerExtends: [],\r\n      form: this.buildFormMetadata(viewModel),\r\n      formControls: this.buildFormControlMetadata(viewModel.fields, viewModel, schema, component),\r\n      subForms: null,\r\n      uiStates: this.buildUiStateMetadata(viewModel.states),\r\n      bindingTo: viewModel.bindTo,\r\n      viewModelCode: viewModel.code\r\n    };\r\n    return contextMetadata;\r\n  }\r\n\r\n  private buildCommand(commandMetadataArray: IFormViewModelCommand[]): { [commandName: string]: NgCommand } {\r\n    const commands = {};\r\n    commandMetadataArray.reduce<{ [commandName: string]: NgCommand }>((previousValue, commandMetadata: IFormViewModelCommand) => {\r\n      const ngCommand: NgCommand = {\r\n        name: commandMetadata.code,\r\n        params: {},\r\n        paramDescriptions: {}\r\n      };\r\n      commandMetadata.params.reduce<NgCommand>((previousCommand, param) => {\r\n        previousCommand.params[param.name] = param.value;\r\n        previousCommand.paramDescriptions[param.name] = { type: 'string' };\r\n        return previousCommand;\r\n      }, ngCommand);\r\n      previousValue[commandMetadata.code] = ngCommand;\r\n      return previousValue;\r\n    }, commands);\r\n    return commands;\r\n  }\r\n\r\n  private buildFormMetadata(viewModel: IFormViewModel): NgValidateForm {\r\n    return {\r\n      formGroupName: viewModel.name,\r\n      enableValidate: viewModel.enableValidation\r\n    };\r\n  }\r\n\r\n  private buildFormControlMetadata(formFields: IFormViewModelField[], viewModel: IFormViewModel, schema: Schema, component: any)\r\n    : { [controlName: string]: NgFormControl } {\r\n    const formControls: { [controlName: string]: NgFormControl } = {};\r\n    const formFieldIds = formFields.map(formField => formField.id);\r\n    const schemaService = new SchemaService();\r\n    const formFieldsMap = schemaService.getFieldsByIds(formFieldIds, schema, viewModel);\r\n    const domService = new DomService();\r\n\r\n    formFields.reduce<{ [controlName: string]: NgFormControl }>((previousValue, field) => {\r\n      const schemaEntityField: SchemaEntityField = formFieldsMap.has(field.id) ? formFieldsMap.get(field.id) : null;\r\n      const binding = schemaEntityField ? schemaEntityField.bindingPath : '';\r\n      const domElements = domService.getElementByBinding(component.contents, field.id);\r\n      const validRules: ValidateRule[] = [];\r\n      const matchedElement = domElements[0];\r\n      if (matchedElement) {\r\n        const keys = 'maxValue,minValue,required,require';\r\n        Object.keys(matchedElement).forEach(key => {\r\n          if (keys.includes(key)) {\r\n            if (key === 'maxValue' && (matchedElement[key] !== null && matchedElement[key] !== undefined)) {\r\n              // 把最大值属性转换成validRule\r\n              validRules.push({ type: 'maxValue', constraints: [matchedElement[key]] });\r\n            } else if (key === 'minValue' && (matchedElement[key] !== null && matchedElement[key] !== undefined)) {\r\n              // 把最小值属性转换成validRule\r\n              validRules.push({ type: 'minValue', constraints: [matchedElement[key]] });\r\n            } else if (key === 'required' || key === 'require') {\r\n              // 把必填属性转换成validRule\r\n              // 必填表达式可以为状态机\r\n              if (matchedElement[key] === 'true' || matchedElement[key] === true) {\r\n                validRules.push({ type: 'required', constraints: [true] });\r\n              }\r\n            }\r\n          }\r\n        });\r\n      }\r\n      previousValue[field.fieldName] = {\r\n        /** 控件标识 */\r\n        id: `${field.fieldName}_${field.id.substr(0, 13).replace('-', '_')}`,\r\n        /** 控件名称 todo: 需要支持多语言 */\r\n        name: matchedElement ? matchedElement.title : field.fieldName,\r\n        /** 绑定字段路径 */\r\n        binding,\r\n        /** 控件值更新时机 */\r\n        updateOn: field.updateOn,\r\n        /** 控件默认名称 */\r\n        defaultI18nValue: matchedElement ? matchedElement.title : field.fieldName,\r\n        /** 验证规则 */\r\n        validRules\r\n      };\r\n      return previousValue;\r\n    }, formControls);\r\n    return formControls;\r\n  }\r\n  /**\r\n   * 由状态机元数据创建状态机上下文描述\r\n   * @param stateMachineMetadata 状态机元数据\r\n   * @returns 状态机上下文描述\r\n   */\r\n  private buildStataMachineMetadata(stateMachineMetadata: IStateMachine): IContextStateMachineMetadata {\r\n    // 声明状态机上下文元数据\r\n    const stateMachine: IContextStateMachineMetadata = {\r\n      states: {},\r\n      renderStates: {},\r\n      actions: {}\r\n    };\r\n\r\n    if (!stateMachineMetadata) {\r\n      return stateMachine;\r\n    }\r\n\r\n    // 由状态机元数据构造NgState\r\n    stateMachineMetadata.state.reduce<IContextStateMachineMetadata>((previousValue, state) => {\r\n      previousValue.states[state.state] = {\r\n        initialState: state.state === stateMachineMetadata.initialState\r\n      };\r\n      return previousValue;\r\n    }, stateMachine);\r\n    // 由状态机元数据构造NgRenderState\r\n    Object.keys(stateMachineMetadata.renderState)\r\n      .reduce<IContextStateMachineMetadata>((previousValue, renderStateName) => {\r\n        const renderStateMetadata = stateMachineMetadata.renderState[renderStateName];\r\n        const renderFunction = this.buildRenderFunction(renderStateMetadata);\r\n        previousValue.renderStates[renderStateName] = {\r\n          render: renderFunction\r\n        };\r\n        // previousValue.renderStates[renderStateName] = {\r\n        //   render: (context: StateMachineContext) => {\r\n        //     return context.parser.parse(renderStateMetadata.condition, this);\r\n        //   }\r\n        // };\r\n        return previousValue;\r\n      }, stateMachine);\r\n    // 由状态机元数据构造NgAction\r\n    Object.keys(stateMachineMetadata.action)\r\n      .reduce<IContextStateMachineMetadata>((previousValue, actionName) => {\r\n        const actionMetadata = stateMachineMetadata.action[actionName];\r\n        previousValue.actions[actionName] = {\r\n          precondition: actionMetadata.precondition,\r\n          transitTo: actionMetadata.transitTo\r\n        };\r\n        return previousValue;\r\n      }, stateMachine);\r\n    // 返回状态机元数据\r\n    return stateMachine;\r\n  }\r\n\r\n  private buildUiStateMetadata(states: IFormViewModelUiState[]): { [stateName: string]: NgParam } {\r\n    const uiStates: { [stateName: string]: NgParam } = {};\r\n    states.reduce<{ [stateName: string]: NgParam }>((previousValue, uiState) => {\r\n      previousValue[uiState.code] = {\r\n        stateName: uiState.code\r\n      };\r\n      return previousValue;\r\n    }, uiStates);\r\n    return uiStates;\r\n  }\r\n\r\n  private buildRenderFunction(renderStateMetadata: IRenderState): any {\r\n    if (renderStateMetadata && renderStateMetadata.condition.length) {\r\n      const renderFunctionString = renderStateMetadata.condition.reduce<string>((previousFunctionString, condition) => {\r\n        let conditionTarget = condition.target;\r\n        if (!conditionTarget.startsWith('\\'')) {\r\n          conditionTarget = `'${conditionTarget}`;\r\n        }\r\n        if (!conditionTarget.endsWith('\\'')) {\r\n          conditionTarget = `${conditionTarget}'`;\r\n        }\r\n        let conditionSource = condition.source;\r\n        if (conditionSource.indexOf('\\'') < 0) {\r\n          conditionSource = `'${conditionSource}'`;\r\n        }\r\n        if (conditionSource.indexOf('getUIState') > -1) {\r\n          conditionSource = conditionSource.replace('getUIState', 'context.getUIState');\r\n        }\r\n        if (conditionSource.indexOf('getData') > -1) {\r\n          conditionSource = conditionSource.replace('getData', 'context.getData');\r\n        }\r\n        // tslint:disable-next-line: max-line-length\r\n        let functionString = `${condition.lBracket || ''}context.parse(${conditionSource},'source')${condition.compare}context.parse(${condition.target},'target')${condition.rBracket || ''}`;\r\n        if (condition.relation) {\r\n          switch (condition.relation.trim().toLocaleLowerCase()) {\r\n            case 'or':\r\n              functionString += '||';\r\n              break;\r\n            case 'and':\r\n              functionString += '&&';\r\n              break;\r\n          }\r\n        }\r\n        return previousFunctionString + functionString;\r\n      }, '');\r\n      if (renderFunctionString) {\r\n        return new Function('context', `return ${renderFunctionString};`);\r\n      }\r\n    }\r\n    return new Function('context', 'return true;');\r\n  }\r\n\r\n  private buildCommandHandlers(commandMetadataArray: IFormViewModelCommand[], controllers: { [id: string]: CommandController })\r\n    : CommandHandler[] {\r\n    const commandHandlers: CommandHandler[] = [];\r\n    commandMetadataArray.reduce<CommandHandler[]>((previousValue: CommandHandler[], commandReference: IFormViewModelCommand) => {\r\n      const commandName = commandReference.code;\r\n      const controllerId = commandReference.cmpId;\r\n      const controller = controllers[controllerId];\r\n      const method = Object.assign({}, controller.methods[commandReference.handlerName]);\r\n      method.params = method.params && method.params.map(param => Object.assign({}, param));\r\n      if (method.params && method.params.length) {\r\n        commandReference.params.reduce<ControllerMethod>((previousMethodValue: ControllerMethod, param: IFormViewModelCommandParam) => {\r\n          const methodParam = previousMethodValue.params.find(value => value.name === param.name);\r\n          if (methodParam) {\r\n            methodParam.expression = param.value;\r\n          }\r\n          return previousMethodValue;\r\n        }, method);\r\n      }\r\n      const commandHandler = new DynamicCommandHandler(commandName, method);\r\n      previousValue.push(commandHandler);\r\n      return previousValue;\r\n    }, commandHandlers);\r\n    return commandHandlers;\r\n  }\r\n}\r\n","import { IDisposable } from '../core';\r\nimport { ViewModel } from '../view-model';\r\n\r\n/**\r\n * ViewModel管理类\r\n */\r\nclass ViewModelManager implements IDisposable {\r\n  /**\r\n   * ViewModelMap\r\n   */\r\n  private viewModelMap: Map<string, ViewModel>;\r\n\r\n  /**\r\n   * 构造函数\r\n   */\r\n  constructor() {\r\n    this.viewModelMap = new Map<string, ViewModel>();\r\n  }\r\n\r\n  /**\r\n   * 获取ViewModelMap\r\n   */\r\n  public getViewModelMap(): Map<string, ViewModel> {\r\n    return this.viewModelMap;\r\n  }\r\n\r\n  /**\r\n   * 根据name获取ViewModel\r\n   * @return 找不到时返回undefined\r\n   */\r\n  public getViewModelByName(name: string): ViewModel {\r\n    return this.viewModelMap.get(name);\r\n  }\r\n\r\n  /**\r\n   * 初始化全局的viewModel\r\n   */\r\n  public register(name: string, viewModel: ViewModel): void {\r\n    this.viewModelMap.set(name, viewModel);\r\n  }\r\n\r\n  /**\r\n   * 是否Repository已经存在\r\n   */\r\n  public exsit(name: string) {\r\n    const viewModel = this.getViewModelByName(name);\r\n    return viewModel ? true : false;\r\n  }\r\n  public dispose() {\r\n    this.viewModelMap.clear();\r\n  }\r\n\r\n}\r\n\r\nexport { ViewModelManager };\r\n","import { IContextMetadata } from './app_metadata';\r\n\r\n/**\r\n * ContextMetadata管理类\r\n */\r\nclass ContextMetadataManager {\r\n\r\n  /**\r\n   * ContextMetadataMap\r\n   */\r\n  private contextMetadataMap: Map<string, IContextMetadata>;\r\n\r\n  /**\r\n   * 构造函数\r\n   */\r\n  constructor() {\r\n    this.contextMetadataMap = new Map<string, IContextMetadata>();\r\n  }\r\n\r\n  /**\r\n   * 获取ContextMetadataMap\r\n   */\r\n  public getContextMetadataMap(): Map<string, IContextMetadata> {\r\n    return this.contextMetadataMap;\r\n  }\r\n\r\n  /**\r\n   * 根据name获取ContextMetadata\r\n   * @return 找不到时返回undefined\r\n   */\r\n  public getContextMetadataByName(name: string): IContextMetadata {\r\n    return this.contextMetadataMap.get(name);\r\n  }\r\n\r\n  /**\r\n   * 初始化全局的ContextMetadata\r\n   */\r\n  public register(name: string, contextMetadata: IContextMetadata): void {\r\n    this.contextMetadataMap.set(name, contextMetadata);\r\n  }\r\n\r\n  /**\r\n   * ContextMetadata是否已经存在\r\n   */\r\n  public exsit(name: string) {\r\n    const contextMetadata = this.getContextMetadataByName(name);\r\n    return contextMetadata ? true : false;\r\n  }\r\n\r\n}\r\n\r\nexport { ContextMetadataManager };\r\n","import { InjectionToken } from '@angular/core';\r\nimport { FrameContext } from './frame_context';\r\nexport const FRAME_ID = new InjectionToken<string>('@farris/devkit FRAME_ID');\r\n/**\r\n * 表单命名空间\r\n */\r\nexport const NAMESPACE = new InjectionToken<string>('@farris/devkit NAMESPACE');\r\n\r\n/**\r\n * 组件初始化\r\n */\r\nexport interface onFrameComponentInit {\r\n  onComponentInit(frameContext: FrameContext): void;\r\n}\r\n/**\r\n * 组件初始化时的处理器\r\n */\r\nexport const FRAME_COMPONENT_INIT_HANDLER_TOKEN = new InjectionToken<onFrameComponentInit[]>('@farris/frame_component_init_handler_token');\r\n","/**\r\n * 应用上下文\r\n * @author Witt<jiwt@inspur.com>\r\n * @todo\r\n * 1、parnet和AppContextManager是否必要？按理说就是应该隔离上下文，表单之间通过事件通讯进行交互；\r\n */\r\nimport { Injectable, Injector, Optional, SkipSelf, InjectFlags, OnDestroy } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { Context } from '../context/index';\r\nimport { BindingData, BindingDataFactory, BindingList, Change } from '../binding-data';\r\nimport { FrameContextManager } from './frame_contex_manager';\r\nimport { FrameComponentRefresher } from './frame_component_refresher';\r\nimport { RepositoryManager } from './repository_mananger';\r\nimport { BindingDataManager } from './binding_data_manager';\r\nimport { ChangeDetectionController } from './change_detection_controller';\r\nimport { AppContextManager } from './app_context_manager';\r\nimport { Subject } from 'rxjs';\r\nimport { ComponentManager } from './component_manager';\r\nimport { UID } from '../misc/uid';\r\nimport { FORM_ID } from './tokens';\r\nimport { ContextMetadataBuilder } from './app_metadata_collector';\r\nimport { FormModule, IFormViewModel, IStateMachine } from '../schema/form-metadata';\r\nimport { CommandController } from '../command';\r\nimport { StateMachine } from '../state-machine';\r\nimport { IContextMetadata } from './app_metadata';\r\nimport {\r\n  CommandVariableParser, DataVariableParser, FrameIdVariableParser,\r\n  StateMachineVariableParser, UIStateVariableParser, VariableParseService\r\n} from '../variable';\r\nimport { ViewModelManager } from './view_model_manager';\r\nimport { Repository } from '../repository';\r\nimport { Entity } from '../entity';\r\nimport { UIState } from '../ui-state';\r\nimport { Schema } from '../schema';\r\nimport { ContextMetadataManager } from './render_context_metadata_manager';\r\nimport { Form } from '../form';\r\nimport { ViewModel } from '../view-model';\r\nimport { FrameContext } from '../frame/frame_context';\r\nimport { NAMESPACE, FRAME_ID } from '../frame/tokens';\r\nimport { EventBus } from '../event-bus-new';\r\nimport { DEVKIT_RUN_MODE, RunMode } from '../core';\r\nimport { RunModeService } from '../misc/run_mode_service';\r\nimport { IDisposable } from '../core';\r\n\r\n@Injectable()\r\nclass AppContext extends Context implements OnDestroy, IDisposable {\r\n  public typeName = 'AppContext';\r\n  /**\r\n   * 注入器\r\n   */\r\n  public injector: Injector;\r\n  /**\r\n   * 根应用上下文\r\n   */\r\n  public root: AppContext;\r\n  /**\r\n   * 上级应用上下文\r\n   */\r\n  public parent: AppContext;\r\n  /**\r\n   * 应用上下文管理器\r\n   */\r\n  public appContextManager: AppContextManager;\r\n  /**\r\n   * FrameContext管理器\r\n   */\r\n  public frameContextManager: FrameContextManager;\r\n  /**\r\n   * FrameComponent刷新器\r\n   */\r\n  public frameComponentRefresher: FrameComponentRefresher;\r\n  /**\r\n   * Repository管理器\r\n   */\r\n  public repositoryManager: RepositoryManager;\r\n  /**\r\n   * 绑定数据管理器\r\n   */\r\n  public bindingDataManager: BindingDataManager;\r\n  /**\r\n   * 视图模型管理器\r\n   */\r\n  public viewModelManager: ViewModelManager;\r\n\r\n  public contextMetadataManager: ContextMetadataManager;\r\n  /**\r\n   * 变更检测控制器\r\n   */\r\n  public changeDetectionController: ChangeDetectionController;\r\n  /**\r\n   * 是否已经销毁\r\n   */\r\n  public isFormDestoryed = false;\r\n  /**\r\n   * 应用程序标识\r\n   */\r\n  public applicationId: string = null;\r\n\r\n  private token: string = null;\r\n  /**\r\n   * 是否使用独立的eventBus\r\n   * @memberof AppContext\r\n   */\r\n  public useIsoluteEventBus = false;\r\n\r\n  /**\r\n   * 独立的eventBus实例\r\n   *\r\n   * @type {EventBus}\r\n   * @memberof AppContext\r\n   */\r\n  public isoluteEventBus: EventBus;\r\n  /**\r\n   * 已废弃：请使用FrameContextManager的getFrameContextMap方法代替。\r\n   * @deprecated\r\n   * @summary\r\n   * 已经有运行时直接用中括号访问该属性的场景，虽然是private，但要进行兼容。\r\n   */\r\n  private get frameContexts(): Map<string, any> {\r\n    return this.frameContextManager.getFrameContextMap();\r\n  }\r\n  /**\r\n   * 消息管道\r\n   */\r\n  public messagePipe: Subject<any>;\r\n  /**\r\n   * 表单Id\r\n   */\r\n  public formId: string;\r\n  /**\r\n   * 组件实例数组\r\n   */\r\n  public componentRefs: Map<string, Map<string, any>>;\r\n  /**\r\n   * 视图组件管理器\r\n   */\r\n  public componentManager: ComponentManager;\r\n  /**\r\n   * 记录confirm弹窗是否打开\r\n   */\r\n  public opened: boolean;\r\n  /**\r\n   * 排序条件管理器\r\n   */\r\n  // public sortConditionManager: SortConditionManager;\r\n  /**\r\n   * 过滤条件管理器\r\n   */\r\n  // public filterConditionManager: FilterConditionManager;\r\n\r\n  protected contextMetadataBuilder: ContextMetadataBuilder;\r\n  /**\r\n   * 应用上下文元数据描述\r\n   */\r\n  public metadata: IContextMetadata = {};\r\n  /**\r\n   * 应用程序上下文全局状态\r\n   */\r\n  public uiState: UIState;\r\n  /**\r\n   * 实体仓库\r\n   */\r\n  public repository: Repository<Entity>;\r\n\r\n  /**\r\n   * 状态机\r\n   */\r\n  public stateMachine: StateMachine;\r\n\r\n  public variableParseService: VariableParseService;\r\n\r\n  public namespace: string;\r\n\r\n  public router: Router;\r\n\r\n  public formMetadataContent: any;\r\n  /**\r\n   * 控制器运行模式，支持compatible | highSpeed\r\n   */\r\n  public runMode: RunMode;\r\n\r\n  public get formModule(): FormModule {\r\n    return this.formMetadataContent ? this.formMetadataContent.module : null;\r\n  }\r\n\r\n  public controllers: { [id: string]: CommandController };\r\n\r\n  /**\r\n   * 应用上下文销毁信号\r\n   */\r\n  public destorySignal: Subject<any>;\r\n  public disposed: boolean = false;\r\n  /**\r\n   * 构造函数\r\n   */\r\n  constructor(\r\n    @Optional() injector: Injector,\r\n    @Optional() appContextManager: AppContextManager,\r\n    @Optional() @SkipSelf() parent: AppContext\r\n  ) {\r\n    super();\r\n    this.destorySignal = new Subject<any>();\r\n    this.injector = injector;\r\n    this.appContextManager = appContextManager;\r\n    this.formId = this.injector && this.injector.get(FORM_ID, null) || null;\r\n    // 默认运行模式为兼容模式\r\n    this.runMode = this.injector && this.injector.get<RunMode>(DEVKIT_RUN_MODE, RunMode.compatible) || RunMode.compatible;\r\n    RunModeService.setRunMode(this.runMode);\r\n    this.params.set('formId', this.formId);\r\n    this.params.set('appId', this.ApplicationId);\r\n    this.params.set('token', this.Token);\r\n    // 确定父子关系\r\n    if (!parent) {\r\n      this.parent = null;\r\n      this.root = this;\r\n    } else {\r\n      this.parent = parent;\r\n      this.root = parent.root;\r\n    }\r\n\r\n    this.registerToManager();\r\n\r\n    this.frameContextManager = new FrameContextManager(this);\r\n    this.frameComponentRefresher = new FrameComponentRefresher();\r\n    this.repositoryManager = new RepositoryManager();\r\n    this.bindingDataManager = new BindingDataManager();\r\n    this.changeDetectionController = new ChangeDetectionController(this.frameContextManager);\r\n    this.messagePipe = new Subject<any>();\r\n    this.componentRefs = new Map<string, Map<string, any>>();\r\n    this.componentManager = new ComponentManager(this);\r\n    this.contextMetadataManager = new ContextMetadataManager();\r\n\r\n    this.opened = false;\r\n    // this.sortConditionManager = new SortConditionManager();\r\n    // this.filterConditionManager = new FilterConditionManager();\r\n    this.router = this.injector && this.injector.get(Router);\r\n    this.viewModelManager = new ViewModelManager();\r\n    this.contextMetadataBuilder = new ContextMetadataBuilder();\r\n    this.variableParseService = new VariableParseService([\r\n      new FrameIdVariableParser(),\r\n      new DataVariableParser(),\r\n      new UIStateVariableParser(),\r\n      new StateMachineVariableParser(),\r\n      new CommandVariableParser()\r\n    ]);\r\n  }\r\n  dispose(options?: any) {\r\n    if (this.disposed) {\r\n      return;\r\n    }\r\n    this.isFormDestoryed = true;\r\n    this.disposed = true;\r\n    this.router = null;\r\n    this.unregisterFromManager();\r\n    this.componentRefs.clear();\r\n    if (this.stateMachine) {\r\n      this.stateMachine.dispose();\r\n      this.stateMachine = null;\r\n    }\r\n\r\n    this.frameComponentRefresher.dispose();\r\n    this.frameContextManager.dispose();\r\n    this.repositoryManager.dispose();\r\n    this.viewModelManager.dispose();\r\n    this.bindingDataManager.dispose();\r\n    if (this.messagePipe) {\r\n      this.messagePipe.complete();\r\n      this.messagePipe = null;\r\n    }\r\n    this.injector = null;\r\n    if (this.destorySignal) {\r\n      this.destorySignal.next();\r\n      this.destorySignal.complete();\r\n    }\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.dispose();\r\n  }\r\n\r\n  /**\r\n   * 由表单元数据、状态机元数据、前端构件元数据初始化解析型应用上下文\r\n   * @param formMetadataContent 表单元数据\r\n   * @param stateMachineMetadata 状态机元数据\r\n   * @param controllers 前端构件元数据\r\n   */\r\n  public initializeByMetadata(\r\n    formMetadataContent: any,\r\n    stateMachineMetadata: IStateMachine,\r\n    controllers: { [id: string]: CommandController }\r\n  ) {\r\n    this.metadata = this.contextMetadataBuilder.buildAppContextMetadata(formMetadataContent, stateMachineMetadata);\r\n    if (!this.stateMachine) {\r\n      // 避免由于组合表单，获取到父级状态机实例的问题\r\n      // this.stateMachine = this.injector.get(StateMachine, new StateMachine());\r\n      this.stateMachine = new StateMachine();\r\n    }\r\n    this.formMetadataContent = formMetadataContent;\r\n    this.controllers = controllers;\r\n  }\r\n\r\n  /**\r\n   * Register current AppContext instance to AppContextManager\r\n   */\r\n  public registerToManager() {\r\n    if (!this.appContextManager) {\r\n      return;\r\n    }\r\n    this.appContextManager.registerAppContext(this);\r\n  }\r\n\r\n  /**\r\n   * Unregister current AppContext instance from AppContextManager\r\n   */\r\n  public unregisterFromManager() {\r\n    if (!this.appContextManager) {\r\n      return;\r\n    }\r\n    this.appContextManager.unregisterAppContext(this);\r\n  }\r\n\r\n  /**\r\n   * 注册FrameContext\r\n   */\r\n  public regFrameContext(frameContext: any): void {\r\n    const repository = frameContext.repository;\r\n    const repositoryName = repository.name;\r\n\r\n    // Repository\r\n    if (this.repositoryManager.ifRepositoryExits(repositoryName) === false) {\r\n      this.repositoryManager.regRepository(repositoryName, repository);\r\n    }\r\n\r\n    // BindingData\r\n    if (this.bindingDataManager.ifBindingDataExits(repositoryName) === false) {\r\n      let bindingData = null;\r\n      // 仅高速模式下使用bindingDataManager\r\n      if (this.runMode === RunMode.highSpeed) {\r\n        bindingData = BindingDataFactory.createFromRepository(repository, '/');\r\n        this.bindingDataManager.regBindingData(repositoryName, bindingData);\r\n      }\r\n    }\r\n\r\n    // 考虑路由再次进入的时候，AppContext没有被注销，但Component被再次构造的场景\r\n    this.frameContextManager.regFrameContext(frameContext);\r\n  }\r\n\r\n  public regContextMetadata(componentId: string, contextMetadata: IContextMetadata) {\r\n    if (!this.contextMetadataManager.exsit(componentId)) {\r\n      this.contextMetadataManager.register(componentId, contextMetadata);\r\n    }\r\n  }\r\n  /**\r\n   * 获取整个表单的AppContext\r\n   */\r\n  public getFormAppContext() {\r\n    return this;\r\n  }\r\n  /**\r\n   * 销毁表单\r\n   * @todo: 临时解决表单关闭后对象没有销毁亦获取不到销毁时机的问题,应依赖angular本身的销毁机制\r\n   */\r\n  public destory() {\r\n    this.dispose();\r\n  }\r\n  public get isDestoryed() {\r\n    return this.isFormDestoryed;\r\n  }\r\n  /**\r\n   * 应用id\r\n   */\r\n  public get ApplicationId() {\r\n    if (!!this.applicationId) {\r\n      return this.applicationId;\r\n    }\r\n    this.applicationId = UID.create();\r\n    return this.applicationId;\r\n  }\r\n  public set ApplicationId(appId: string) {\r\n    this.applicationId = appId;\r\n  }\r\n  public get Token() {\r\n    if (!!this.token) {\r\n      return this.token;\r\n    }\r\n    this.token = UID.create();\r\n    return this.token;\r\n  }\r\n  public set Token(token: string) {\r\n    this.token = token;\r\n  }\r\n  // #region 弃用的老方法\r\n\r\n  /**\r\n   * 已废弃：请使用FrameComponentRefresher的refreshComponent方法代替。\r\n   * @deprecated\r\n   */\r\n  public registerCommandHandler(frameId: string, component: any) {\r\n    this.frameComponentRefresher.regFrameComponent(frameId, component);\r\n  }\r\n  /**\r\n   * 已废弃：请使用FrameComponentRefresher的refreshComponent方法代替。\r\n   * @deprecated\r\n   */\r\n  public refresh() {\r\n    this.frameComponentRefresher.refreshComponents();\r\n  }\r\n\r\n  /**\r\n   * 已废弃：请使用FrameContextManager的getFrameContextById方法代替。\r\n   * @deprecated\r\n   */\r\n  public getFrameContext(frameId: string): any {\r\n    return this.frameContextManager.getFrameContextById(frameId);\r\n  }\r\n\r\n  public getContextById(identify: string): any {\r\n    const context = this.frameContextManager.getFrameContextById(identify);\r\n    return context;\r\n  }\r\n\r\n  /**\r\n   * 已废弃：请使用FrameContextManager的getFrameContextMap方法代替。\r\n   * @deprecated\r\n   */\r\n  public getAllFrameContexts() {\r\n    return this.frameContextManager.getFrameContextMap();\r\n  }\r\n\r\n  /**\r\n   * 处理行变更\r\n   */\r\n  public handleSelectChange(change: Change, srcFrameContext: any) {\r\n    const force = change.force || false;\r\n    this.frameContexts.forEach((targetFrameContext) => {\r\n      // 相同的FrameCotnext或者Repository不一致的情况下，不同步\r\n      if (targetFrameContext === srcFrameContext\r\n        || targetFrameContext.repository !== srcFrameContext.repository) {\r\n        return;\r\n      }\r\n\r\n      const bindingData = targetFrameContext.bindingData;\r\n      const bindingList: BindingList = bindingData.getValue(change.path);\r\n      const currentId = change.value['id'];\r\n      if (bindingList && bindingList.currentId !== currentId || force) {\r\n\r\n        // 设置当前行，但不对外广播\r\n        bindingList.setCurrentId(currentId, true, false, force);\r\n      }\r\n    });\r\n  }\r\n\r\n  // #endregion\r\n\r\n  public buildRenderViewContext(componentId: string) {\r\n\r\n    // 提取视图模型集合\r\n    const viewModels = this.formModule.viewmodels;\r\n    // 提取组件描述集合\r\n    const viewComponents = this.formModule.components;\r\n    // 提取schema节点\r\n    const schema = this.formModule.schemas[0];\r\n    // 查找匹配指定标识的组件节点\r\n    const matchedComponent = viewComponents.find(component => component.id === componentId);\r\n    // 匹配指定组件的视图模型节点\r\n    const matchedViewModel = viewModels.find(viewModel => matchedComponent.viewModel === viewModel.id);\r\n    // 查找匹配视图模型的父节点\r\n    const parentViewModel = viewModels.find(viewModel => viewModel.id === matchedViewModel.parent);\r\n    let parentComponentId = '';\r\n    // 如果匹配上上级视图模型，提上级视图标识\r\n    if (parentViewModel) {\r\n      const parentComponent = viewComponents.find(component => component.viewModel === parentViewModel.id);\r\n      if (parentComponent) {\r\n        parentComponentId = parentComponent.id;\r\n      }\r\n    }\r\n    // 如果存在上级组件，提取器上下文对象。\r\n    // const parentViewContext = parentComponentId ? this.getContextById(parentComponentId) : null;\r\n    // this.buildRenderViewContextRecursively(matchedViewModel, parentViewContext, schema);\r\n    this.buildRenderViewContextRecursively(matchedViewModel, schema);\r\n  }\r\n\r\n  private buildRenderViewContextRecursively(viewModel: IFormViewModel, schema: Schema) {\r\n    const controllers = this.controllers;\r\n    const viewComponents = this.formModule.components;\r\n    const matchedComponent = viewComponents.find(component => component.viewModel === viewModel.id);\r\n    const contextMetadata = this.contextMetadataBuilder.buildViewContextMetadata(matchedComponent, viewModel, schema, controllers);\r\n    // const commandHandlers: CommandHandler[] = this.buildCommandHandlers(viewModel.commands, controllers);\r\n    // const commandHandlerExtends: CommandHandlerExtender[] = [];\r\n    // const viewContext = new ViewComponentContext();\r\n    //   contextMetadata,\r\n    //   this,\r\n    //   parent,\r\n    //   this.injector\r\n    // );\r\n    // this.regFrameContext(viewContext);\r\n    // viewContext.init();\r\n\r\n    const contextMetadataId = (this.namespace ? (this.namespace + '_') : '') + matchedComponent.id;\r\n    contextMetadata.namespace = this.namespace || '';\r\n    this.regContextMetadata(contextMetadataId, contextMetadata);\r\n\r\n    const viewModels = this.formModule.viewmodels;\r\n    const subViewModels = viewModels.filter(subViewModel => subViewModel.parent === viewModel.id);\r\n    if (subViewModels && subViewModels.length) {\r\n      subViewModels.forEach(subViewModel => {\r\n        this.buildRenderViewContextRecursively(subViewModel, schema);\r\n      });\r\n    }\r\n  }\r\n\r\n  public getComponentProviders(componentId: string): any[] {\r\n    const contextMetadata = this.contextMetadataManager.getContextMetadataByName(componentId);\r\n    const bindingData = new BindingData();\r\n    const form = new Form();\r\n    const namespace = contextMetadata.namespace;\r\n    const repository = this.repository || this.injector.get(Repository, null);\r\n    const stateMachine = this.stateMachine;\r\n    const uiState = new UIState();\r\n    const viewModel = new ViewModel();\r\n    viewModel.setMetadata(contextMetadata);\r\n    return [\r\n      { provide: FRAME_ID, useValue: componentId },\r\n      { provide: NAMESPACE, useValue: namespace },\r\n      { provide: FrameContext, useClass: FrameContext },\r\n      { provide: AppContext, useValue: this },\r\n      { provide: BindingData, useValue: bindingData },\r\n      { provide: Form, useValue: form },\r\n      { provide: Repository, useValue: repository },\r\n      { provide: StateMachine, useValue: stateMachine },\r\n      { provide: UIState, useValue: uiState },\r\n      { provide: ViewModel, useValue: viewModel },\r\n      {\r\n        provide: VariableParseService, useValue: new VariableParseService([\r\n          new FrameIdVariableParser(),\r\n          new DataVariableParser(),\r\n          new UIStateVariableParser(),\r\n          new StateMachineVariableParser(),\r\n          new CommandVariableParser()\r\n        ])\r\n      }\r\n    ];\r\n  }\r\n}\r\n\r\nexport { AppContext };\r\n","/*\r\n * @Author: Witt\r\n * @Date: 2018-12-30 17:11:37\r\n * @Last Modified by: Witt\r\n * @Last Modified time: 2018-12-30 17:19:01\r\n */\r\n// tslint:disable: max-line-length\r\nimport { Injectable } from '@angular/core';\r\nimport { IDisposable, RunMode } from '../core';\r\nimport { FrameContext } from '../frame/index';\r\nimport { AppContext } from './app_context';\r\n\r\n/**\r\n * FrameContext管理类\r\n */\r\n@Injectable()\r\nclass FrameContextManager implements IDisposable {\r\n\r\n  /**\r\n   * FrameContext字典(兼容老表单)\r\n   */\r\n  private frameContextMap: Map<string, FrameContext>;\r\n\r\n  /**\r\n   * FrameContext集合\r\n   */\r\n  private frameContextSet: Set<FrameContext>;\r\n\r\n  /**\r\n   * AppContext\r\n   */\r\n  private appContext: AppContext;\r\n\r\n  /**\r\n   * 构造函数\r\n   */\r\n  constructor(appContext: AppContext) {\r\n    this.frameContextMap = new Map<string, FrameContext>();\r\n    this.frameContextSet = new Set<FrameContext>();\r\n    this.appContext = appContext;\r\n  }\r\n\r\n  /**\r\n   * 注册FrameContext\r\n   */\r\n  public regFrameContext(frameContext: FrameContext): void {\r\n    const frameId = frameContext.frameId;\r\n\r\n    // 如果存在，先删除\r\n    if (this.frameContextMap.has(frameId) === true) {\r\n      const existedFrameContext = this.frameContextMap.get(frameId);\r\n      this.frameContextMap.delete(frameId);\r\n      this.frameContextSet.delete(existedFrameContext);\r\n    }\r\n    frameContext.index = this.frameContextSet.size;\r\n    this.frameContextMap.set(frameId, frameContext);\r\n    this.frameContextSet.add(frameContext);\r\n  }\r\n\r\n  /**\r\n   * 注销组件注册\r\n   */\r\n  public unregFrameContext(frameContext: FrameContext): void {\r\n    const frameId = frameContext.frameId;\r\n    this.frameContextMap.delete(frameId);\r\n    this.frameContextSet.delete(frameContext);\r\n    // 仅在高速模式下才会在bindingDataManager中注册绑定数据实例\r\n    if (this.appContext.runMode === RunMode.highSpeed) {\r\n      const namespace = frameContext.namespace;\r\n      const repositoryName = frameContext.repository && frameContext.repository.name;\r\n      // 获取ns相同的framecontext，如果已经没有组件上下文了需要销毁bindingData\r\n      const frameContexts = this.getFrameContextsByNamespace(namespace);\r\n      if (!frameContexts || frameContexts.length < 1) {\r\n        this.appContext.bindingDataManager.unRegisteBindingData(repositoryName);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 获取FrameContextMap\r\n   */\r\n  public getFrameContextMap() {\r\n    return this.frameContextMap;\r\n  }\r\n\r\n  /**\r\n   * 获取全部FrameContext\r\n   */\r\n  public getFrameContexts(): FrameContext[] {\r\n    return Array.from(this.frameContextSet);\r\n  }\r\n  /**\r\n   * 获取组合表单某个表单的所有frameContext\r\n   * @param namespace 命名空间\r\n   */\r\n  public getFrameContextsByNamespace(namespace: string) {\r\n    return Array.from(this.frameContextSet).filter((frameContext: FrameContext) => frameContext && frameContext.namespace === namespace);\r\n  }\r\n  /**\r\n   * 根据id获取FrameContext\r\n   */\r\n  public getFrameContextById(frameId: string): FrameContext {\r\n    const targetFrameContext = this.frameContextMap.get(frameId);\r\n    if (targetFrameContext) {\r\n      return targetFrameContext;\r\n    }\r\n    return this.getFrameContextFromAllAppContexts(frameId);\r\n  }\r\n\r\n  /**\r\n   * Get the root FrameContext instance\r\n   * @return Return the FrameContext instance whose parent is null, and undefined otherwise.\r\n   */\r\n  public getRootFrameContext(): FrameContext {\r\n    const frameContexts = this.getFrameContexts();\r\n    const rootFrameContext = frameContexts.find((frameContext: FrameContext) => {\r\n      return frameContext.parent === null;\r\n    });\r\n    return rootFrameContext;\r\n  }\r\n  public dispose() {\r\n    this.frameContextMap.clear();\r\n    this.frameContextSet.clear();\r\n  }\r\n  /**\r\n   * 遍历所有的AppContext查找指定的\r\n   * @summary\r\n   * 1、老表单中所有的frameId均不重复；\r\n   * 2、现在隔离了AppContxt，在当前AppContext找不到的时候，查找所有AppContext；\r\n   * 3、隔离后，标准的访问方式是通过事件通信，此处仅仅是临时兼容。\r\n   */\r\n  private getFrameContextFromAllAppContexts(frameId: string): FrameContext {\r\n    if (!this.appContext.appContextManager) {\r\n      return;\r\n    }\r\n    let targetFrameContext: FrameContext;\r\n    const appContexts = this.appContext.appContextManager.getAppContexts();\r\n    appContexts.some((appContext: AppContext) => {\r\n      const frameContextMap = appContext.frameContextManager.getFrameContextMap();\r\n      if (frameContextMap.has(frameId) === true) {\r\n        targetFrameContext = frameContextMap.get(frameId);\r\n        return true;\r\n      } else {\r\n        return false;\r\n      }\r\n    });\r\n    return targetFrameContext;\r\n  }\r\n}\r\n\r\nexport { FrameContextManager };\r\n","import { IEmitable } from './types';\r\nimport { Type } from '@angular/core';\r\n\r\nexport class EventBusProxy {\r\n\r\n  constructor(private eventBus: IEmitable, private hostType: Type<any>, private eventTokenValueProvider: () => any) {\r\n  }\r\n\r\n  post(eventName: string, data: any) {\r\n    this.eventBus.post(this.hostType, this.eventTokenValueProvider(), eventName, data);\r\n  }\r\n\r\n  // on(eventName: string, data: any, handler: Function) {\r\n  //   this.eventBus.on(null, this.eventTokenValueProvider(), eventName, (data) => handler(data), this);\r\n  // }\r\n}\r\n\r\n","export enum EventTypeEnum {\r\n    COMPONENT,\r\n    ROUTE\r\n}\r\n","import { makePropDecorator } from '../../metadata/index';\r\nimport { EventTypeEnum } from './event-type';\r\n\r\nexport const NG_DECLARATION = 'NgDeclaration';\r\n\r\n/**\r\n * NgDeclaration\r\n * 公开事件描述\r\n */\r\nexport interface NgDeclaration {\r\n    /**\r\n     * 待订阅事件Token, 唯一ID\r\n     */\r\n    token: string;\r\n\r\n    /**\r\n     * 事件名称\r\n     */\r\n    name: string;\r\n\r\n    /**\r\n     * 事件参数\r\n     */\r\n    params: any;\r\n\r\n    /**\r\n     * 事件类型\r\n     */\r\n    type ?: EventTypeEnum;\r\n}\r\n\r\n// /**\r\n//  * 参数\r\n//  */\r\n// export interface Params {\r\n//     [key: string]: any;\r\n// }\r\n\r\n/**\r\n * NgDeclarationDecorator\r\n * 公开事件装饰器接口\r\n */\r\nexport interface NgDeclarationDecorator {\r\n    (obj?: NgDeclaration): any;\r\n    new(obj?: NgDeclaration): any;\r\n}\r\n\r\n/**\r\n * NgDeclaration\r\n * 公开事件属性装饰器工厂\r\n */\r\nexport function NgDeclaration(options: NgDeclaration) {\r\n    const decoratorFactory = makePropDecorator(NG_DECLARATION, (obj: NgDeclaration) => obj);\r\n    return decoratorFactory(options);\r\n}\r\n","import { Injectable, Injector } from '@angular/core';\r\nimport { MetadataUtil } from '../../metadata/index';\r\nimport { FrameContext, FrameComponent } from '../../frame';\r\nimport { NG_DECLARATION, NgDeclaration } from './declaration_decorator';\r\nimport { VariableParseService } from '../../variable/index';\r\nimport { EventTypeEnum } from './event-type';\r\n\r\n@Injectable()\r\nclass Declaration {\r\n\r\n  constructor() {\r\n\r\n  }\r\n\r\n  /**\r\n   * 初始化\r\n   */\r\n  public init(frameComponent: FrameComponent) {\r\n    if (!frameComponent) {\r\n      return;\r\n    }\r\n\r\n    this.bindDeclaration(frameComponent, null);\r\n  }\r\n\r\n  /**\r\n   *  依据定义列表进行初始化\r\n   * @param frameComponent 表单component实例\r\n   * @param ngDeclarations 事件定义列表信息\r\n   */\r\n  public initWithDeclarations(frameComponent: FrameComponent, ngDeclarations: {\r\n    [propName: string]: any;\r\n  }): void {\r\n    if (!frameComponent) {\r\n      return;\r\n    }\r\n\r\n    this.bindDeclaration(frameComponent, null);\r\n  }\r\n\r\n  /**\r\n   * 基于事件元数据构建事件\r\n   * @param context 框架上下文\r\n   */\r\n  private bindDeclaration(frameComponent: FrameComponent, ngDeclarations: {\r\n    [propName: string]: any;\r\n  }) {\r\n    const context = frameComponent.context;\r\n    if (!context) {\r\n      return;\r\n    }\r\n\r\n    const ngPublicEventProps = ngDeclarations ? ngDeclarations : this.getNgPublicEvent();\r\n    if (!ngPublicEventProps) {\r\n      return;\r\n    }\r\n\r\n    Object.keys(ngPublicEventProps).forEach((propertyName: string) => {\r\n      const ngExportEvent: NgDeclaration = ngPublicEventProps[propertyName];\r\n      Object.defineProperty(this, propertyName, {\r\n        value: () => {\r\n\r\n          // 获取命令处理上下文\r\n          const targetContext: FrameContext = context;\r\n\r\n          // todo: 给ngExportEvent添加frameId（保证框架之间的事件隔离）\r\n          // if (ngExportEvent.frameId) {\r\n          //   targetContext = context.appContext.getFrameContext(ngExportEvent.frameId);\r\n          // }\r\n\r\n          const emitter = ngExportEvent.token;\r\n          const tokenValue = ngExportEvent.token;\r\n          const eventName = ngExportEvent.name;\r\n          let eventArgs = JSON.parse(JSON.stringify(ngExportEvent.params));\r\n          const eventType = ngExportEvent.type;\r\n\r\n          if (!targetContext.eventBus) {\r\n            return;\r\n          }\r\n          const injector = targetContext.injector;\r\n          const variableParseService = injector.get<VariableParseService>(VariableParseService);\r\n\r\n          // 执行参数解析\r\n          setTimeout(() => {\r\n            eventArgs = variableParseService.parse(eventArgs, targetContext);\r\n            const eventSender = targetContext.frameComponent;\r\n            let currentContext = targetContext;\r\n            const eventId = new Date().valueOf();\r\n            if (eventType && eventType === EventTypeEnum.ROUTE) {\r\n              // 事件依次向上冒泡\r\n              while (currentContext) {\r\n                currentContext.eventBus.post(emitter, tokenValue, eventName, eventArgs, eventSender, eventType, eventId);\r\n                // currentContext = currentContext.parent;\r\n                currentContext = this.getParentContext(currentContext);\r\n              }\r\n            } else {\r\n              currentContext.eventBus.post(emitter, tokenValue, eventName, eventArgs, eventSender);\r\n            }\r\n          }, 0);\r\n        }\r\n      });\r\n    });\r\n\r\n  }\r\n\r\n  /**\r\n   * 获取事件定义列表\r\n   * @returns  事件定义\r\n   */\r\n  public getNgPublicEvent() {\r\n    return MetadataUtil.getPropsMetadatasByName(this.constructor, NG_DECLARATION);\r\n  }\r\n\r\n  /**\r\n   * 获取父Context\r\n   * @param context 当前上下文\r\n   */\r\n  private getParentContext(context: FrameContext): FrameContext {\r\n\r\n    // 首先查找直接上级FrameContext\r\n    if (context.parent) {\r\n      return context.parent;\r\n    }\r\n\r\n    // 到了AppContext边界，返回上级AppContext的根FrameContext\r\n    const parentAppContext = context.appContext.parent;\r\n    if (parentAppContext) {\r\n      return parentAppContext.frameContextManager.getRootFrameContext();\r\n    }\r\n\r\n    return null;\r\n  }\r\n}\r\n\r\nexport { Declaration };\r\n","import { makePropDecorator } from '../../metadata/index';\r\n\r\nexport const NG_SUBSCRIPTION = 'NgSubscription';\r\n\r\n/**\r\n * NgSubscription\r\n * 事件订阅描述\r\n */\r\nexport interface NgSubscription {\r\n    /**\r\n     * 待订阅事件Token, 唯一ID\r\n     */\r\n    token: string;\r\n\r\n    /**\r\n     * 待订阅事件名称\r\n     */\r\n    name: string;\r\n\r\n    /**\r\n     * 参数映射\r\n     */\r\n    paramMapCollection?: ParamMap[];\r\n}\r\n\r\nexport class ParamMap {\r\n    from: string;\r\n    frameId: string;\r\n    to: string;\r\n}\r\n\r\n/**\r\n * NgSubscriptionDecorator\r\n * 事件订阅装饰器接口\r\n */\r\nexport interface NgSubscriptionDecorator {\r\n    (obj?: NgSubscription): any;\r\n    new(obj?: NgSubscription): any;\r\n}\r\n\r\n/**\r\n * NgSubscription\r\n * 事件订阅属性装饰器工厂\r\n */\r\nexport function NgSubscription(options: NgSubscription) {\r\n    const decoratorFactory = makePropDecorator(NG_SUBSCRIPTION, (obj: NgSubscription) => obj);\r\n    return decoratorFactory(options);\r\n}\r\n\r\nexport function getNgSubscriptionDecoratorFactory() {\r\n    const decoratorFactory = makePropDecorator(NG_SUBSCRIPTION, (obj: NgSubscription) => obj);\r\n    return decoratorFactory;\r\n}\r\n","export enum EventPipeType {\r\n    Compile,\r\n    Parsing\r\n}","import { Injectable, Injector } from '@angular/core';\r\nimport { MetadataUtil } from '../../metadata/index';\r\nimport { FrameContext, FrameComponent } from '../../frame/index';\r\nimport { UIState } from '../../ui-state/index';\r\nimport { NG_SUBSCRIPTION, NgSubscription, ParamMap } from './subscription_decorator';\r\nimport { IDisposable } from '../../core/index';\r\n\r\n@Injectable()\r\nclass Subscription {\r\n\r\n  /**\r\n   * 初始化\r\n   */\r\n  public init(frameComponent: FrameComponent): IDisposable[] {\r\n    if (!frameComponent) {\r\n      return;\r\n    }\r\n\r\n    return this.bindSubscription(frameComponent, null);\r\n  }\r\n\r\n\r\n  /**\r\n   *  根据订阅列表进行初始化\r\n   * @param frameComponent \r\n   * @param ngEvents 订阅列表\r\n   * @returns eventPipes\r\n   */\r\n  public initWithSubscriptions(frameComponent: FrameComponent, ngEvents: {\r\n    [propName: string]: any;\r\n  }): IDisposable[] {\r\n    if (!frameComponent) {\r\n      return;\r\n    }\r\n\r\n    return this.bindSubscription(frameComponent, ngEvents);\r\n  }\r\n\r\n  private bindSubscription(frameComponent: FrameComponent, ngEvents: {\r\n    [propName: string]: any;\r\n  }) {\r\n    const context = frameComponent.context;\r\n    if (!context) {\r\n      return;\r\n    }\r\n\r\n    const ngEventHandlerProps = ngEvents ? ngEvents : this.getNgEvents(frameComponent);\r\n    if (!ngEventHandlerProps) {\r\n      return;\r\n    }\r\n\r\n    const eventPipes: IDisposable[] = [];\r\n    Object.keys(ngEventHandlerProps).forEach((propertyName: string) => {\r\n      const ngImportEvent: NgSubscription = ngEventHandlerProps[propertyName];\r\n\r\n      // 获取待订阅方法详情，尝试执行订阅\r\n      const targetContext = context;\r\n\r\n      const receiver = frameComponent;\r\n      const emitter = ngImportEvent.token;\r\n      const tokenValue = ngImportEvent.token;\r\n      const eventName = ngImportEvent.name;\r\n\r\n      const paramMapCollection = ngImportEvent.paramMapCollection;\r\n      const eventPipe = targetContext.eventBus.on(emitter, tokenValue, eventName, receiver,\r\n        (eventArgs) => {\r\n          this.subscriptionHandler(eventArgs, paramMapCollection, targetContext);\r\n\r\n          const eventHandler: Function = frameComponent[eventName];\r\n          if (!eventHandler) {\r\n            return;\r\n          }\r\n\r\n          try {\r\n            eventHandler(receiver, eventArgs);\r\n          } catch {\r\n            throw new Error('Error invoking method ' + eventName);\r\n          }\r\n        }\r\n      );\r\n\r\n      eventPipes.push(eventPipe);\r\n    });\r\n\r\n    return eventPipes;\r\n  }\r\n\r\n  /**\r\n   * 获取组件订阅列表\r\n   * @param frameComponent 表单component\r\n   * @returns 组件订阅列表信息\r\n   */\r\n  public getNgEvents(frameComponent: FrameComponent) {\r\n    return MetadataUtil.getPropsMetadatasByName(frameComponent.constructor, NG_SUBSCRIPTION);\r\n  }\r\n\r\n  private subscriptionHandler(param: any, paramMapCollection: ParamMap[], currentFrameContext: FrameContext) {\r\n\r\n    if (!param || !paramMapCollection || paramMapCollection.length <= 0 || !currentFrameContext) {\r\n      return;\r\n    }\r\n\r\n    this.paramMap2UiState(param, paramMapCollection, currentFrameContext);\r\n  }\r\n\r\n  /**\r\n   * 设置paramMap后，将param映射到UISTATE上\r\n   */\r\n  private paramMap2UiState(param: any, paramMapCollection: ParamMap[], currentFrameContext: FrameContext) {\r\n    for (let i = 0; i < paramMapCollection.length; i++) {\r\n      const from = paramMapCollection[i].from;\r\n      const frameId = paramMapCollection[i].frameId;\r\n      const to = paramMapCollection[i].to;\r\n\r\n      if (!from || !frameId || !to) {\r\n        continue;\r\n      }\r\n      const destContext: FrameContext = this.getFrameContext(frameId, currentFrameContext);\r\n      if (destContext == null) {\r\n        continue;\r\n      }\r\n      this.setUiStateProperty(to, param[from], destContext.uiState);\r\n      // this.setUiStateProperty(to, param[from], currentFrameContext.uiState);\r\n    }\r\n  }\r\n\r\n  private getFrameContext(targetFrameContextId: string, currentContext: FrameContext): FrameContext {\r\n    let destContext: FrameContext = null;\r\n    try {\r\n      destContext = currentContext.appContext.getFrameContext(targetFrameContextId);\r\n    } catch {\r\n      throw new Error('Error in Getting FrameContext');\r\n    }\r\n    return destContext;\r\n  }\r\n\r\n  private setUiStateProperty(propertyName: string, propertyValue: string, uiState: UIState) {\r\n    try {\r\n      uiState.setPropertyValue(propertyName, propertyValue);\r\n    } catch {\r\n      throw new Error(\"Error in Setting Property Value of the current UISTATE\" + uiState);\r\n    }\r\n  }\r\n\r\n}\r\n\r\nexport { Subscription };\r\n","import { Subject, Subscription } from 'rxjs';\r\nimport { IDisposable } from '../core/index';\r\nimport { EventTypeEnum } from '../event-mechanism';\r\nimport { EventPipeType } from './event-pipe-type';\r\n\r\nexport class EventPipe implements IDisposable {\r\n  private lastEventId = -1;\r\n  /**\r\n   * 事件对象\r\n   */\r\n  private eventSubject: Subject<any>;\r\n\r\n  /**\r\n   * 订阅对象Map\r\n   * key=订阅所在的FrameComponent\r\n   * value：订阅evetnSubject产生的Subscription对象（rxjs的）\r\n   */\r\n  private subscriptionMap: Map<object, Subscription>;\r\n\r\n  /**\r\n   * \r\n   */\r\n  private onceSubscriptionMap: Map<object, Subscription>;\r\n\r\n  /**\r\n   * EventPipe类型，编译类型表单检查是否在同一上下文中，解析类型表单不判断\r\n   */\r\n  public eventPipeType = EventPipeType.Compile; \r\n  public get subscriptions(): Map<object, Subscription> {\r\n    return this.subscriptionMap;\r\n  }\r\n  constructor(\r\n    public name: string,\r\n    public tokenValue: string,\r\n    public emitter: string,\r\n    private parentEventPipeList: Array<EventPipe>\r\n  ) {\r\n    this.eventSubject = new Subject<any>();\r\n    this.subscriptionMap = new Map<object, Subscription>();\r\n    this.onceSubscriptionMap = new Map<object, Subscription>();\r\n    if (this.parentEventPipeList) {\r\n      this.parentEventPipeList.push(this);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 发送事件\r\n   */\r\n  post(args: any, sender?: any, eventType?: any, eventId?: number) {\r\n    const eventData = {\r\n      args: args,\r\n      sender: sender,\r\n      eventType,\r\n      eventId\r\n    };\r\n    this.eventSubject.next(eventData);\r\n  }\r\n\r\n  /**\r\n   * 订阅事件\r\n   */\r\n  subscribe(eventHandler: (value: any) => void, receiver: object): IDisposable {\r\n\r\n    // 对于弹窗，caller是弹窗中的组件，每次caller不同，但还是会重复注册。\r\n    // 重复订阅检测\r\n    const subscriptionInMap = this.subscriptionMap.get(receiver);\r\n    if (subscriptionInMap != null) {\r\n      subscriptionInMap.unsubscribe();\r\n      this.subscriptionMap.delete(receiver);\r\n    }\r\n\r\n    const subscription = this.eventSubject.subscribe((eventData: any) => {\r\n      const args = eventData.args;\r\n      const sender = eventData.sender;\r\n      const eventType = eventData.eventType || null;\r\n      const eventId = eventData.eventId || 0;\r\n      if (this.lastEventId >= eventId) {\r\n        return;\r\n      }\r\n      this.lastEventId = eventId;\r\n      // 判断sender和receiver的关系，如果在同一个AppContext或者在在一棵树上，则处理\r\n      // 该判断主要解决SPA模式下，一个页面被打开多次的场景。\r\n      if (!(eventType === EventTypeEnum.ROUTE)) {\r\n        if (this.isInSampeScope(sender, receiver) === false) {\r\n          return;\r\n        }\r\n      }\r\n      eventHandler.call(receiver, args);\r\n    });\r\n\r\n    this.subscriptionMap.set(\r\n      receiver,\r\n      subscription\r\n    );\r\n    return this;\r\n  }\r\n\r\n  subscribeOnce(eventHandler: (value: any) => void, caller: object): IDisposable {\r\n    const subscription = this.eventSubject.subscribe((value) => eventHandler.call(caller, value));\r\n    this.onceSubscriptionMap.set(\r\n      caller,\r\n      subscription\r\n    );\r\n    return this;\r\n  }\r\n\r\n  unSubscribe(subscriber: object) {\r\n    let subscription = this.subscriptionMap.get(subscriber);\r\n    if (subscription) {\r\n      subscription.unsubscribe();\r\n      subscription = null;\r\n      this.subscriptionMap.delete(subscriber);\r\n    } else {\r\n      subscription = this.onceSubscriptionMap.get(subscriber);\r\n      if (subscription) {\r\n        subscription.unsubscribe();\r\n        subscription = null;\r\n        this.onceSubscriptionMap.delete(subscriber);\r\n      }\r\n    }\r\n  }\r\n\r\n  // 注销使用once方法注册的订阅。\r\n  unSubscribeForOnce() {\r\n    for (const subscriber of Array.from(this.onceSubscriptionMap.keys())) {\r\n      this.unSubscribe(subscriber);\r\n    }\r\n  }\r\n\r\n  matchEmitterToken(emitter: string, tokenValue: string): boolean {\r\n    if (this.emitter && emitter && this.emitter !== emitter) {\r\n      return false;\r\n    }\r\n    if (this.tokenValue && tokenValue && this.tokenValue !== tokenValue) {\r\n      return false;\r\n    }\r\n    return true;\r\n  }\r\n\r\n  examByTargetToken(target: string, tokenValue: string): boolean {\r\n    if (this.emitter !== target) {\r\n      return false;\r\n    }\r\n    if (this.tokenValue !== tokenValue) {\r\n      return false;\r\n    }\r\n    return true;\r\n  }\r\n\r\n  dispose(subscriber: object): void {\r\n    this.unSubscribe(subscriber);\r\n    if (this.subscriptionMap.size === 0 && this.parentEventPipeList) {\r\n      const location = this.parentEventPipeList.findIndex(item => item === this);\r\n      if (location !== -1) {\r\n        this.parentEventPipeList.splice(location, 1);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 根据caller进行注销\r\n   */\r\n  disposeByCaller(caller: any) {\r\n    const subscriptionInMap = this.subscriptionMap.get(caller);\r\n    if (subscriptionInMap != null) {\r\n      subscriptionInMap.unsubscribe();\r\n      this.subscriptionMap.delete(caller);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 检查是否在同一个上下文中\r\n   * @todo\r\n   * 1、强识别了sender和receiver的结构来判断，不合理；\r\n   * 2、应该声明一个接口来约束结构。\r\n   */\r\n  private isInSampeScope(sender: any, receiver: any): boolean {\r\n    // 用来区分编译类型的表单，还是解析类型的表单\r\n    if (this.eventPipeType === EventPipeType.Parsing) {\r\n      return true;\r\n    }\r\n\r\n    // 兼容老代码，sender不存在时，不进行检测\r\n    if (!sender) {\r\n      return true;\r\n    }\r\n\r\n    // 异常处理场景\r\n    if (sender === receiver) {\r\n      return true;\r\n    }\r\n\r\n    // 判断是否是FrameContext\r\n    if (!sender.context || !sender.context.appContext ||\r\n      !receiver.context || !receiver.context.appContext) {\r\n      return false;\r\n    }\r\n\r\n    const senderAppContext = sender.context.appContext;\r\n    const receiverAppContext = receiver.context.appContext;\r\n\r\n    // 情况1：现状\r\n    // 对于老表单，在模块上注入了一个AppContext；\r\n    // 组合表单中主表单的root-component（被组合的表单的root-componetn上没有注入）上注入了AppContext\r\n    // SPA模式下，如法通过Root AppContext区分，是不是同一个菜单内的事件；\r\n    // 只能判断根组件上的AppContext来判断\r\n    // 判断根AppContext是否一致\r\n    if (senderAppContext === receiverAppContext) {\r\n      return true;\r\n    }\r\n\r\n    // 情况2：注入改造后\r\n    // 如果以后注入关系改造了，模块上的AppContext移除掉\r\n    // 组合表单中每个root-component都拥有一个AppContext;\r\n    // 组合表单中主表单的root-component的AppContext为Root AppContext\r\n    // if (senderAppContext.root === receiverAppContext.root) {\r\n    //   return true;\r\n    // }\r\n\r\n    // 情况3：注入改造后老表单兼容\r\n    // 如果以后注入关系改造了，但产品部没有重新编译;\r\n    // 和情况2类似，不同的是模块上还遗留了一个AppContext；\r\n    // 此时Root Appcontext还是模块上的，如何来判断？\r\n    // 1、考虑通过sender的injector一直网上找，找到模块之前的那个组件injector，从其中拿AppContext来判断；\r\n    // 2、找一个全部重新编译的时机再改造。\r\n\r\n    if ((senderAppContext.useIsoluteEventBus && senderAppContext.isoluteEventBus) ||\r\n      (receiverAppContext.useIsoluteEventBus && receiverAppContext.isoluteEventBus)) {\r\n      // 如果存在独立加载js  那么\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n}\r\n","import { Injectable, Type } from '@angular/core';\r\nimport { EventBusProxy } from './event-bus-proxy';\r\nimport { IEmitable } from './types';\r\nimport { EventPipe } from './event-pipe';\r\nimport { IDisposable } from '../core/index';\r\n\r\n@Injectable()\r\nexport class EventBus implements IEmitable {\r\n  private proxyMap: Map<string, EventBusProxy>;\r\n  private eventMap: Map<string, Array<EventPipe>>;\r\n\r\n  constructor() {\r\n    this.proxyMap = new Map<string, EventBusProxy>();\r\n    this.eventMap = new Map<string, Array<EventPipe>>();\r\n  }\r\n\r\n  getProxy(ownerType: any, eventTokenValueProvider: () => any): EventBusProxy {\r\n    const ownerName = ownerType.constructor.typeName || ownerType.constructor.name;\r\n    if (!this.proxyMap.has(ownerName)) {\r\n      this.proxyMap.set(ownerName, new EventBusProxy(this, ownerType, eventTokenValueProvider));\r\n    }\r\n    return this.proxyMap.get(ownerName);\r\n  }\r\n\r\n  /**\r\n   * 发送事件，通知订阅者接收消息。\r\n   */\r\n  // tslint:disable-next-line: max-line-length\r\n  post(emitterType: any | string, tokenValue: string, eventName: string, eventArgs: any, sender?: any, eventType?: any, eventId?: number): void {\r\n    const eventPipeList = this.eventMap.get(eventName);\r\n    if (!eventPipeList) {\r\n      return;\r\n    }\r\n\r\n    if (!emitterType) {\r\n      console.error('post方法的参数emitterType不能为空。');\r\n      return;\r\n    }\r\n    let emitter: string;\r\n    if (emitterType instanceof Type) {\r\n      emitter = emitterType.typeName || emitterType.name;\r\n    } else {\r\n      emitter = emitterType;\r\n    }\r\n    if (typeof eventId === 'undefined') {\r\n      eventId = new Date().valueOf();\r\n    }\r\n    for (const eventPipe of eventPipeList) {\r\n      if (eventPipe.matchEmitterToken(emitter, tokenValue)) {\r\n        eventPipe.post(eventArgs, sender, eventType, eventId);\r\n        eventPipe.unSubscribeForOnce();\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 订阅事件\r\n   */\r\n  on(target: string, tokenValue: string, eventName: string, caller: Object, handler: (value: any) => void): IDisposable {\r\n    return this.getEventPipe(eventName, target, tokenValue).subscribe(handler, caller);\r\n  }\r\n\r\n  /**\r\n   * 注销监听\r\n   * @param target \r\n   * @param tokenValue \r\n   * @param eventName \r\n   * @param caller \r\n   */\r\n  public off(target: string, tokenValue: string, eventName: string, caller: Object) {\r\n    const eventPipeList = this.eventMap.get(eventName);\r\n    if (eventPipeList) {\r\n      const index = eventPipeList.findIndex((eventPipe: EventPipe) => {\r\n        if (eventPipe.subscriptions.get(caller)) {\r\n          return eventPipe.name === eventName && eventPipe.tokenValue === tokenValue && eventPipe.emitter === target;\r\n        }\r\n        return false;\r\n      });\r\n      if (index !== -1) {\r\n        eventPipeList.splice(index, 1);\r\n      }\r\n    }\r\n  }\r\n  /**\r\n   * 订阅一次。接收到一次消息之后自动取消订阅\r\n   */\r\n  once(target: string, tokenValue: string, eventName: string, caller: Object, handler: (value: any) => void): IDisposable {\r\n    return this.getEventPipe(eventName, target, tokenValue).subscribeOnce(handler, caller);\r\n  }\r\n\r\n  /**\r\n   * 发送一个请求事件，获取监听者的响应并处理\r\n   */\r\n  requestFor(target: string, tokenValue: string, requestName: string, requestValue: any, success: (any) => any, fail?: (string) => any) {\r\n    const eventPipe = this.findExistEventPipe(requestName, 'RequestSubject', tokenValue);\r\n    if (eventPipe) {\r\n      this.once(target, tokenValue, requestName, this, (response) => {\r\n        if (response.status === 'success') {\r\n          success(response.data);\r\n        } else {\r\n          if (fail) {\r\n            fail('No target responser listening');\r\n          }\r\n        }\r\n      });\r\n      eventPipe.post({ target: target, token: tokenValue, data: requestValue });\r\n    } else {\r\n      if (fail) {\r\n        fail('No target responser listening.');\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 监听一个请求事件，给出响应\r\n   */\r\n  responseOn(responseSubject: string, requestName: string, callback: (any) => any) {\r\n    this.on('RequestSubject', null, requestName, this, (requestObj) => {\r\n      const response = { status: 'fail', data: null };\r\n      if (responseSubject === requestObj.target) {\r\n        response.data = callback(requestObj.data);\r\n        response.status = 'success';\r\n      }\r\n      this.post(requestObj.target, requestObj.token, requestName, response);\r\n    });\r\n  }\r\n\r\n  private getEventPipe(eventName: string, target: string, tokenValue: string) {\r\n    let eventPipeList = this.eventMap.get(eventName);\r\n    if (!eventPipeList) {\r\n      eventPipeList = new Array<EventPipe>();\r\n      this.eventMap.set(eventName, eventPipeList);\r\n    }\r\n\r\n    // 1、一个事件不允许多个订阅\r\n    // let eventPipe = eventPipeList.find(item => item.examByTargetToken(target, tokenValue));\r\n    // if (!eventPipe) {\r\n    //   eventPipe = new EventPipe(eventName, tokenValue, target, eventPipeList);\r\n    // }\r\n\r\n    // 2、一个事件允许多个订阅\r\n    const eventPipe = new EventPipe(eventName, tokenValue, target, eventPipeList);\r\n\r\n    return eventPipe;\r\n  }\r\n\r\n  private findExistEventPipe(eventName: string, target: string, tokenValue: string): EventPipe {\r\n    const eventPipeList = this.eventMap.get(eventName);\r\n    if (!eventPipeList) {\r\n      return null;\r\n    }\r\n    // return eventPipeList.find(item => item.examByTargetToken(target, tokenValue));\r\n    for (const eventPipe of eventPipeList) {\r\n      if (eventPipe.matchEmitterToken(target, tokenValue)) {\r\n        return eventPipe;\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n}\r\n\r\nexport class EventCache {\r\n  private static tokens = new Map();\r\n\r\n  public static setToken(key: string, value: any) {\r\n    EventCache.tokens.set(key, value);\r\n  }\r\n\r\n  public static getToken(key: string) {\r\n    return EventCache.tokens.get(key);\r\n  }\r\n}\r\n\r\nclass RequestSubject { }\r\nclass DataClass { }\r\n","/*\r\n * @Author: aalizzwell \r\n * @Date: 2019-05-30 11:08:18 \r\n * @Last Modified by: aalizzwell\r\n * @Last Modified time: 2019-06-01 17:10:04\r\n */\r\n\r\nimport { InjectionToken } from '@angular/core';\r\nimport { IExceptionHandler } from './types';\r\nexport const EXCEPTION_HANDLER = new InjectionToken<IExceptionHandler>('@farris/devkit ExceptionHandler');","import { Observable } from 'rxjs';\r\n\r\n// tslint:disable-next-line: no-namespace\r\nexport namespace Expression {\r\n  /**\r\n   * 表达式对象\r\n   */\r\n  export interface ExpressionObject {\r\n    /**\r\n     * 表达式唯一标识\r\n     */\r\n    id?: string;\r\n    /**\r\n     * 表达式绑定的路径\r\n     */\r\n    path: string;\r\n    /**\r\n     * 表达式绑定类型State|Entity\r\n     */\r\n    bindingType: ExpressionBindingType;\r\n    /**\r\n     * 表达式类型\r\n     */\r\n    type: ExpressionType;\r\n    /**\r\n     * 表达式\r\n     */\r\n    expression: string;\r\n    /**\r\n     * 表达式依赖\r\n     */\r\n    deps: Array<string>;\r\n    /**\r\n     * 表达式namespace\r\n     */\r\n    ns: string;\r\n    /**\r\n     * 表达式计算结果\r\n     */\r\n    result?: any;\r\n    /**\r\n     * 结果作用路径\r\n     */\r\n    effectPaths?: string[],\r\n    /**\r\n     * 提示信息\r\n     */\r\n    message?: string;\r\n    /**\r\n     * 提示消息类型\r\n     */\r\n    messageType?: 'error' | 'info' | 'warning';\r\n    /**\r\n     * \r\n     */\r\n    factory?: any;\r\n  }\r\n\r\n  /**\r\n   * 自定义上下文 \r\n   */\r\n  export interface ICustomContext {\r\n    currentRows?: Array<ICurrentRow>,\r\n    contexts?: { [prop: string]: any },\r\n    patch?: { [prop: string]: any }\r\n  }\r\n\r\n  /**\r\n   * 当前行描述\r\n   */\r\n  export interface ICurrentRow {\r\n    bindingPath: string;\r\n    primaryValue: string;\r\n  }\r\n\r\n  /**\r\n   * 表达式赋值器\r\n   * @deprecated deprecated，never use\r\n   */\r\n  export interface Assigner {\r\n    assign(expressionObject: ExpressionObject);\r\n  }\r\n  /**\r\n   * 表达式执行器\r\n   */\r\n  export interface IExecutor {\r\n    compile(expressionObject: Expression.ExpressionObject, context?: { [prop: string]: any }): any;\r\n  }\r\n  /**\r\n   * 表达式绑定字段类型（表达式绑定到实体、UIState?）\r\n   */\r\n  export enum ExpressionBindingType {\r\n    State = 'State',\r\n    Field = 'Field'\r\n  }\r\n  /**\r\n   * 表达式类型\r\n   */\r\n  export enum ExpressionType {\r\n    /**\r\n     * 必填表达式\r\n     */\r\n    Required = 'require',\r\n    /**\r\n     * 只读表达式\r\n     */\r\n    Readonly = 'readonly',\r\n    /**\r\n     * 计算表达式\r\n     */\r\n    Compute = 'compute',\r\n    /**\r\n     * 依赖表达式\r\n     */\r\n    Dependency = 'dependency',\r\n    /**\r\n     * 是否可见\r\n     */\r\n    Visible = 'visible',\r\n    /**\r\n     * 关联表达式\r\n     */\r\n    Relative = 'relative',\r\n    /**\r\n     * 校验表达式\r\n     */\r\n    Validate = 'validate',\r\n    /**\r\n     * 帮助前\r\n     */\r\n    DataPicking = 'dataPicking'\r\n  }\r\n  /**\r\n   * 事件类型\r\n   */\r\n  export enum EventType {\r\n    ValueChanged = 'VALUE_CHANGED',\r\n    SelectionChanged = 'SELECTION_CHANGED',\r\n    Load = 'Load',\r\n    Append = 'Append',\r\n    Remove = 'Remove',\r\n    Update = 'Update',\r\n  }\r\n  export enum EventSource {\r\n    Field = 'Field',\r\n    State = 'State',\r\n    BindingData = 'BindingData',\r\n    Repository = 'Repository'\r\n  }\r\n  /**\r\n   * 事件参数\r\n   */\r\n  export interface EventArgs {\r\n    /**\r\n     * namespace\r\n     */\r\n    ns: string;\r\n    /**\r\n     * 变更路径\r\n     */\r\n    path: Array<string>;\r\n    /**\r\n     * 变更类型\r\n     */\r\n    type?: EventType;\r\n    /**\r\n     * 变更来源\r\n     */\r\n    source: EventSource;\r\n    /**\r\n     * 变更后的值\r\n     */\r\n    value?: any;\r\n    /**\r\n     * 上下文\r\n     */\r\n    context?: any;\r\n    /**\r\n     * frameId\r\n     */\r\n    frameId?: string;\r\n    /**\r\n     * 事件数据上下文\r\n     */\r\n    entity?: any;\r\n    id?: any;\r\n  }\r\n  /**\r\n   * 监听器\r\n   */\r\n  export interface Listener {\r\n    onEvent: Observable<EventArgs>;\r\n  }\r\n  /**\r\n   * 作用器\r\n   */\r\n  export interface Effector {\r\n    /**\r\n     * namespace\r\n     */\r\n    ns: string;\r\n    /**\r\n     * 作用\r\n     * @param expressionObject \r\n     */\r\n    effect(path: string, value: any, options: EffectOptions);\r\n  }\r\n  export interface EffectOptions {\r\n    /**\r\n     * 指定行\r\n     */\r\n    path?: string[];\r\n    /**\r\n     * frameId\r\n     */\r\n    frameId?: string;\r\n    /**\r\n     * 消息\r\n     */\r\n    message?: string;\r\n    /**\r\n     * 消息提示类型\r\n     */\r\n    messageType?: MessageType | 'error' | 'info' | 'warning';\r\n    /**\r\n     * 表达式id\r\n     */\r\n    expressionId?: string;\r\n  }\r\n  export enum MessageType {\r\n    error = 'error',\r\n    info = 'info',\r\n    warning = 'warning'\r\n  }\r\n  /**\r\n   * 事件处理器\r\n   */\r\n  export interface IEventHandler {\r\n    handleEvent(event: EventArgs, expressionObjects: Expression.ExpressionObject[]);\r\n    filter(event: Expression.EventArgs);\r\n    perform(expressionObject: Expression.ExpressionObject, context: any);\r\n    effect(event: Expression.EventArgs, expressionObject: Expression.ExpressionObject): void;\r\n  }\r\n  export enum EffectPath {\r\n    currentRow = 0\r\n  }\r\n  /**\r\n   * 表达式校验结果\r\n   */\r\n  export interface IValidateResult {\r\n    expressionId: string;\r\n    path: string[];\r\n    result: any;\r\n  }\r\n  /**\r\n   * 表达式计算上下文构造器选项\r\n   */\r\n  export interface IBuilderOptions {\r\n\r\n  }\r\n  export const MESSAGE = {\r\n    'zh-CHS': {\r\n      require: `请输入'$property'`,\r\n      validate: `'$property'校验不通过`,\r\n      dataPicking: '帮助前表达式校验不通过'\r\n    },\r\n    en: {\r\n      require: `Please input '$property'`,\r\n      validate: `'$property' calibration failed`,\r\n      dataPicking: 'Failed to verify the expression before help'\r\n    },\r\n    'zh-CHT': {\r\n      require: `請輸入'$property'`,\r\n      validate: `'$property'校驗不通過`,\r\n      dataPicking: '幫助前表達式校驗不通過'\r\n    }\r\n  };\r\n  export const DEPENDENCY_SPLITER = '/';\r\n}","import { InjectionToken } from \"@angular/core\";\r\nimport { UserSettings } from \"./types\";\r\n\r\nexport const UserSettingsToken = new InjectionToken<UserSettings>('@farris/devkit UserSettingsToken');","import { InjectionToken } from \"@angular/core\";\r\nimport { IFormExpressionManifestService, IFormManifestService } from \"./types\";\r\n\r\nexport const FORM_MANIFEST_SERVICE_TOKEN = new InjectionToken<IFormManifestService>('@farris/form_manifest_service');\r\nexport const FORM_EXPRESSION_MANIFEST_SERVICE_TOKEN = new InjectionToken<IFormExpressionManifestService>('@farris/form_expression_manifest_service');\r\n","import { Inject, Injectable, Injector, Optional } from \"@angular/core\";\r\nimport { Observable, of } from \"rxjs\";\r\nimport { catchError, switchMap } from \"rxjs/operators\";\r\nimport { Expression } from './types';\r\nimport { FORM_EXPRESSION_MANIFEST_SERVICE_TOKEN, IFormExpressionManifestService } from \"../manifest/index\";\r\nimport { Translate, TranslateToken } from \"../i18n/index\";\r\nimport { Repository } from \"../repository/index\";\r\n\r\n@Injectable()\r\nexport class ExpressionRegistry {\r\n  private _expressions: Expression.ExpressionObject[] = null;\r\n  constructor(\r\n    private injector: Injector,\r\n    @Inject(FORM_EXPRESSION_MANIFEST_SERVICE_TOKEN) private formExpressionManifestService: IFormExpressionManifestService,\r\n    @Optional() @Inject(TranslateToken) private translate: Translate\r\n  ) {\r\n  }\r\n  /**\r\n   * 加载表达式文件\r\n   */\r\n  public load(): Observable<Expression.ExpressionObject[]> {\r\n    return this.formExpressionManifestService.load().pipe(\r\n      switchMap((describe: Array<any>) => {\r\n        const expressions: Array<Expression.ExpressionObject> = [];\r\n        const exprs = Array.from(describe);\r\n        exprs.forEach((expr: any) => {\r\n          expr.expressions.forEach((expression: any) => {\r\n            const expressionObject: Expression.ExpressionObject = {\r\n              id: expression.id,\r\n              ns: expr.ns,\r\n              path: expr.path,\r\n              bindingType: expr.type,\r\n              type: expression.type,\r\n              expression: expression.value || expression.expr || '',\r\n              message: expression.message || null,\r\n              messageType: expression.messageType || null,\r\n              deps: []\r\n            };\r\n            if ((expression.type === Expression.ExpressionType.Required || expression.type === Expression.ExpressionType.Validate || expression.type === Expression.ExpressionType.DataPicking)) {\r\n              if (!expression.message) {\r\n                expressionObject.message = this.getExpressionMessage(expression.type);\r\n              }\r\n              if (!expression.messageType) {\r\n                expressionObject.messageType = 'error';\r\n              }\r\n            }\r\n            if (expressionObject.message) {\r\n              this.transform(expressionObject);\r\n            }\r\n            expressions.push(expressionObject);\r\n          });\r\n        });\r\n        this._expressions = expressions;\r\n        this.cleanSpecialCharacters();\r\n        return of(expressions);\r\n      }),\r\n      catchError((e) => {\r\n        return of([]);\r\n      })\r\n    );\r\n  }\r\n  /**\r\n   * 获取所有表达式\r\n   */\r\n  public get expressions(): Observable<Expression.ExpressionObject[]> {\r\n    if (this._expressions) {\r\n      return of(this._expressions);\r\n    }\r\n    return this.load();\r\n  }\r\n  /**\r\n   * 根据表达式id获取对应的表达式对象\r\n   * @param id 表达式id\r\n   * @returns \r\n   */\r\n  public getExpressionById(id: string): Expression.ExpressionObject {\r\n    if (!this._expressions || this._expressions.length < 1) {\r\n      return null;\r\n    }\r\n    return this._expressions.find((expressionObject: Expression.ExpressionObject) => expressionObject.id === id);\r\n  }\r\n  private getExpressionMessage(expressionType: Expression.ExpressionType, defaultValue?: string) {\r\n    if (!(expressionType === Expression.ExpressionType.Validate || expressionType === Expression.ExpressionType.Required || expressionType === Expression.ExpressionType.DataPicking)) {\r\n      return null;\r\n    }\r\n    if (!this.translate) {\r\n      return defaultValue;\r\n    }\r\n    const currentLanguage = this.translate.getCurrentLanguage() || 'zh-CHS';\r\n    return Expression.MESSAGE[currentLanguage][expressionType];\r\n  }\r\n  private transform(expressionObject: Expression.ExpressionObject) {\r\n    if (!this.translate) {\r\n      return;\r\n    }\r\n    if (expressionObject.message && expressionObject.message.startsWith('{{') && expressionObject.message.endsWith('}}')) {\r\n      expressionObject.message = this.translate.transform(expressionObject.message.substr(2, expressionObject.message.length - 4), null) || this.getExpressionMessage(expressionObject.type);\r\n    }\r\n  }\r\n  private cleanSpecialCharacters() {\r\n    if (!this._expressions || this._expressions.length < 1 || !Array.isArray(this._expressions)) {\r\n      return;\r\n    }\r\n    const repository: Repository<any> = this.injector.get(Repository, null);\r\n    if (!repository) {\r\n      return;\r\n    }\r\n    const entityTypeInfo = repository.entityTypeInfo;\r\n    const regex = new RegExp(`[\\\\'\\\\\"]?\\\\s*(${entityTypeInfo.entityInfo.nodeCode}|${entityTypeInfo.entityInfo.originalCode})[\\\\.\\\\[\\\\]a-zA-Z0-9_]+\\\\s*[\\\\'\\\\\"]?`, 'g');\r\n    this._expressions.forEach((expressionObject: Expression.ExpressionObject) => {\r\n      const expr = expressionObject.expression;\r\n      const entityPropertyExpressions: RegExpMatchArray = expr.match(regex);\r\n      if (Array.isArray(entityPropertyExpressions) && entityPropertyExpressions.length > 0) {\r\n        // 解析出所有实体相关的字符串，以主实体名字开头，包含主实体属性或子表\r\n        entityPropertyExpressions.forEach((item: string) => {\r\n          if (item.indexOf('.') === -1) {\r\n            return;\r\n          }\r\n          // 去数组\r\n          if (/\\[\\d\\]/g.test(item)) {\r\n            const replacer = item.replace(/\\[\\d\\]/g, '');\r\n            expressionObject.expression = this.replaceAll(expressionObject.expression, item, replacer);\r\n          }\r\n          // 去星号\r\n          if (/\\*/g.test(item)) {\r\n            const replacer = item.replace(/\\*/g, '');\r\n            expressionObject.expression = this.replaceAll(expressionObject.expression, item, replacer);\r\n          }\r\n        });\r\n      }\r\n    });\r\n  }\r\n  private replaceAll(originalValue: string, search: string, replacer: string) {\r\n    return originalValue.split(search).join(replacer);\r\n  }\r\n}","import { InjectionToken } from '@angular/core';\r\nimport { Expression } from '../expression/index';\r\n\r\ntype Listener = Expression.Listener;\r\n\r\nexport const LISTENER_TOKEN = new InjectionToken<Listener>('@Farris listener');","import { Observable, Subject } from \"rxjs\";\r\nimport { Change } from \"../binding-data/index\";\r\nimport { Modification } from \"../changeset/index\";\r\nimport { DataPropGroup, DataPropInfo, DataTypeInfo } from \"../core\";\r\nimport { Expression } from '../expression/index';\r\nimport { UIStateObservableParam } from \"../ui-state/index\";\r\n\r\ntype EventArgs = Expression.EventArgs;\r\ntype Listener = Expression.Listener;\r\n\r\n/**\r\n * 变更监听器\r\n */\r\nexport abstract class ChangeListener implements Listener {\r\n  protected subject: Subject<EventArgs> = new Subject<EventArgs>();\r\n  public get onEvent(): Observable<EventArgs> {\r\n    return this.subject;\r\n  }\r\n  abstract buildEventPath(change: Change | Modification |UIStateObservableParam): string[];\r\n  /**\r\n   * 找到元数据中所有实体路径\r\n   * @param dataTypeInfo \r\n   * @param results \r\n   * @param paths \r\n   */\r\n  public findEntityPaths(dataTypeInfo: DataTypeInfo, results: any[], paths: string[] = []) {\r\n    const list: DataPropInfo[] = dataTypeInfo.getPropInfosByGroup(DataPropGroup.List);\r\n    if (list && list.length > 0) {\r\n      list.forEach((dataPropInfo: DataPropInfo) => {\r\n        paths.push(dataPropInfo.name);\r\n        const childrens: DataPropInfo[] = dataPropInfo.typeInfo.getPropInfosByGroup(DataPropGroup.List);\r\n        if (childrens && childrens.length > 0) {\r\n          childrens.forEach((dataPropInfo: DataPropInfo) => {\r\n            this.findEntityPaths(dataPropInfo.typeInfo, results, paths);\r\n          });\r\n        } else {\r\n          results.push(paths);\r\n        }\r\n      });\r\n    } else if (paths && paths.length > 0) {\r\n      results.push(paths);\r\n    }\r\n  }\r\n}","import { Injectable } from \"@angular/core\";\r\nimport { Expression as ExpressionEngineExpression, ExpressionContext, ExpressionEngine } from \"@farris/expression-engine\";\r\nimport { Expression } from '../expression/index';\r\n@Injectable()\r\nexport class ExpressionExecutor implements Expression.IExecutor {\r\n  /**\r\n   * 编译执行\r\n   * @param expression \r\n   * @param context \r\n   * @returns \r\n   */\r\n  public compile(expressionObject: Expression.ExpressionObject, context?: { [prop: string]: any }): any {\r\n    if (Object.prototype.toString.call(context) !== '[object Object]') {\r\n      throw new Error('上下文必须为对象！');\r\n    }\r\n    const expressionContext = this.buildContext(context);\r\n    if (!expressionObject.factory) {\r\n      const expression = new ExpressionEngineExpression(expressionObject.expression, expressionContext);\r\n      expressionObject.factory = expression.compile();\r\n    }\r\n    const expression: ExpressionEngineExpression = expressionObject.factory;\r\n    return expression.eval(expressionContext);\r\n  }\r\n  /**\r\n   * 解析\r\n   * @param expression \r\n   * @param context \r\n   * @returns \r\n   */\r\n  public eval(expression: string, context?: { [prop: string]: any }) {\r\n    if (Object.prototype.toString.call(context) !== '[object Object]') {\r\n      throw new Error('上下文必须为对象！');\r\n    }\r\n    const expressionContext = this.buildContext(context);\r\n    const expressionEngine = new ExpressionEngine(expressionContext);\r\n    return expressionEngine.eval(expression);\r\n  }\r\n  /**\r\n   * 构造表达式上下文\r\n   * @param context \r\n   * @returns \r\n   */\r\n  private buildContext(context: { [prop: string]: any }): ExpressionContext {\r\n    const expressionContext = new ExpressionContext();\r\n    if (context && Object.keys(context).length > 0) {\r\n      Object.keys(context).forEach((key: string) => {\r\n        expressionContext.set(key, context[key]);\r\n      });\r\n    }\r\n    return expressionContext;\r\n  }\r\n}","import { Injectable, Injector } from \"@angular/core\";\r\n\r\n/**\r\n * 表达式计算结果\r\n */\r\n@Injectable()\r\nexport class ExpressionResult {\r\n  constructor(private injector: Injector) {\r\n  }\r\n  /**\r\n   * 更新表达式的值\r\n   * @param expressionId 表达式id\r\n   * @param result \r\n   */\r\n  public set(expressionId: string, result: any) {\r\n    this[expressionId] = result;\r\n  }\r\n}","import { Inject, Injectable, Injector } from \"@angular/core\";\r\nimport { BigNumber } from 'bignumber.js';\r\nimport { BindingData, BindingList, BindingObject } from \"../binding-data/index\";\r\nimport { EMPTY, Observable, of } from \"rxjs\";\r\nimport { AppContext } from \"../app/index\";\r\nimport { FrameContext } from \"../frame/index\";\r\nimport { Repository } from \"../repository/index\";\r\nimport { ENTITY_TEMPLATE, ResolveService } from \"../resolver/index\";\r\nimport { ExpressionUtil } from \"../utils/expression_util\";\r\nimport { ExpressionExecutor } from \"./expression_executor\";\r\nimport { ExpressionRegistry } from \"./expression_registry\";\r\nimport { Expression } from './types';\r\nimport { ViewModel } from \"../view-model/index\";\r\nimport { ExpressionResult } from \"./expression_result\";\r\nimport { IMessageService, INotifyService, MESSAGE_SERVICE_TOKEN, NOTIFY_SERVICE_TOKEN } from \"../core/index\";\r\nimport { Entity, EntityList } from \"../entity\";\r\nimport { Translate, TranslateToken } from \"../i18n\";\r\n\r\n@Injectable()\r\nexport class ExpressionManager {\r\n  private frameContext: FrameContext = null;\r\n  constructor(private injector: Injector, private resolveService: ResolveService, private expressionExecutor: ExpressionExecutor, private expressionRegistry: ExpressionRegistry, private expressionResult: ExpressionResult, @Inject(MESSAGE_SERVICE_TOKEN) private messageService: IMessageService, @Inject(NOTIFY_SERVICE_TOKEN) private notifyService: INotifyService) {\r\n    this.frameContext = this.injector.get<FrameContext>(FrameContext, null);\r\n  }\r\n  /**\r\n   * 根据表达式id进行计算\r\n   * @param expressionId 表达式id\r\n   * @param viewModel viewModel\r\n   * @param rowData rowData\r\n   * @returns \r\n   */\r\n  public eval(expressionId: string, viewModel?: ViewModel, rowData?: any) {\r\n    const expressionObject = this.expressionRegistry.getExpressionById(expressionId);\r\n    if (expressionObject) {\r\n      const customContext: Expression.ICustomContext = {};\r\n      const bindingPath = viewModel && viewModel.bindingPath || null;\r\n      if (bindingPath && rowData) {\r\n        const bindingPaths = bindingPath.split('/').filter(p => p);\r\n        const bindingList = this.frameContext.bindingData.getValue(bindingPaths) as BindingList;\r\n        let primaryKey = 'id';\r\n        if (bindingList) {\r\n          primaryKey = bindingList.primaryKey;\r\n        }\r\n        const primaryValue = rowData[primaryKey] || bindingList.currentId;\r\n        if (primaryValue) {\r\n          customContext.currentRows = [{ bindingPath: bindingPaths.join('/'), primaryValue }];\r\n        }\r\n      }\r\n      let result = this.execute(expressionObject.expression, customContext);\r\n      if (expressionObject.type === Expression.ExpressionType.Readonly || expressionObject.type === Expression.ExpressionType.Required || expressionObject.type === Expression.ExpressionType.Visible) {\r\n        result = result === true ? true : false;\r\n      }\r\n      this.expressionResult.set(expressionId, result);\r\n      return result;\r\n    } else {\r\n      // console.warn('ExpressionManager 执行失败，未获取到表达式!');\r\n    }\r\n    return undefined;\r\n  }\r\n  public validate(expressionId: string, options: any) {\r\n    const expressionObject = this.expressionRegistry.getExpressionById(expressionId);\r\n    if (expressionObject) {\r\n      const patch = options && options.patch || null;\r\n      const customContext: Expression.ICustomContext = {};\r\n      if (patch) {\r\n        customContext.patch = patch;\r\n      }\r\n      const currentRow = options.currentRow || null;\r\n      const currentRows = options.currentRows || [];\r\n      if (currentRow) {\r\n        customContext.currentRows = customContext.currentRows || [];\r\n        customContext.currentRows.push(currentRow);\r\n      }\r\n      if (currentRows && currentRows.length > 0) {\r\n        customContext.currentRows = customContext.currentRows || [];\r\n        Array.prototype.push.apply(customContext.currentRows, currentRows)\r\n      }\r\n      const result = this.execute(expressionObject.expression, customContext);\r\n      this.expressionResult.set(expressionId, result);\r\n      return result;\r\n    } else {\r\n    }\r\n    return undefined;\r\n  }\r\n  /**\r\n   * 帮助前封装\r\n   * @param event \r\n   */\r\n  public onDataPicking(configs: { expressionId: string }) {\r\n    const expressionId = configs && configs.expressionId || null;\r\n    if (!expressionId) {\r\n      return of(true);\r\n    }\r\n    const result = this.eval(expressionId);\r\n    if (!result) {\r\n      const expressionObject = this.expressionRegistry.getExpressionById(expressionId);\r\n      if (!expressionObject) {\r\n        return of(true);\r\n      }\r\n      const messageType = expressionObject.messageType || Expression.MessageType.warning;\r\n      const message = expressionObject.message;\r\n      if (message) {\r\n        this.notifyService[messageType](message, { hideTitle: true });\r\n      }\r\n      return EMPTY;\r\n    }\r\n    return of(result);\r\n  }\r\n  /**\r\n   * 执行表达式计算\r\n   * @param expression 表达式\r\n   * @param customContext 自定义上下文\r\n   * @returns \r\n   */\r\n  private execute(expression: string, customContext?: Expression.ICustomContext): any {\r\n    const deps = this.resolveService.resolve(expression);\r\n    const groupDependencies = ExpressionUtil.getGroupFunctionDependency(expression, this.frameContext.repository.entityTypeInfo);\r\n    const entityContext = this.buildEntityContext(deps, groupDependencies, customContext);\r\n    const stateContext = this.buildStateContext();\r\n    const data = customContext && customContext.contexts || null;\r\n    const translate = this.injector.get<Translate>(TranslateToken, null);\r\n    const context = {\r\n      [this.entityOriginalNodeCode]: entityContext,\r\n      ...stateContext,\r\n      BigNumber,\r\n      frameContext: this.frameContext,\r\n      bindingData: this.frameContext.bindingData,\r\n      repository: this.frameContext.repository,\r\n      CurrentLanguage: translate.getCurrentLanguage() || 'zh-CHS',\r\n      ...data\r\n    }\r\n    if (!entityContext) {\r\n      return undefined;\r\n    }\r\n    return this.expressionExecutor.eval(expression, context);\r\n  }\r\n  /**\r\n   * 执行表达式（返回可观察对象）\r\n   * @param expression 表达式\r\n   * @param customContext 自定义上下文\r\n   * @returns \r\n   */\r\n  private executeAsync(expression: string, customContext?: Expression.ICustomContext): Observable<any> {\r\n    const result = this.execute(expression, customContext);\r\n    return of(result);\r\n  }\r\n  /**\r\n   * 构造实体上下文\r\n   * @param deps \r\n   * @param groupDependencies \r\n   * @param context \r\n   * @returns \r\n   */\r\n  private buildEntityContext(deps: string[], groupDependencies: string[], context?: Expression.ICustomContext) {\r\n\r\n    const currentRows = context && context.currentRows || null;\r\n    const index = deps.findIndex((dep: string) => {\r\n      const isEntityDependency = this.isEntityDependency(dep);\r\n      // 如果依赖的是state，无需处理，现在需要确定的是返回多少实体的问题，和state没有关系\r\n      // 表达式依赖了实体\r\n      if (isEntityDependency) {\r\n        const isGroupDependency = groupDependencies.findIndex(item => item === dep) !== -1;\r\n        // 是聚合依赖\r\n        if (isGroupDependency) {\r\n          const dependencyLength = dep.split('/').filter(p => p).length - 1;\r\n          if (dependencyLength === 1) {\r\n            // 聚合了主表字段，所有主表数据都需要参与运算，此时已经确定计算的实体上下文了。\r\n            return true;\r\n          } else {\r\n            // 聚合了子表字段，只需要传递当前实体\r\n            return false;\r\n          }\r\n        } else {\r\n          // 当前依赖不是聚合，只需要传递当前实体\r\n          return false;\r\n        }\r\n      }\r\n      return false;\r\n    })\r\n    const isGroupdMainEntity = index !== -1;\r\n\r\n    const options = {};\r\n    if (currentRows && currentRows.length > 0) {\r\n      currentRows.forEach((currentRow: Expression.ICurrentRow) => {\r\n        options[currentRow.bindingPath || '/'] = currentRow.primaryValue;\r\n      });\r\n    }\r\n    const entity = this.getEntity(options);\r\n    const patch = context && context.patch || null;\r\n    if (!entity) {\r\n      return null;\r\n    }\r\n    if (patch && Object.keys(patch).length > 0) {\r\n      Object.keys(patch).forEach((key: string) => {\r\n        const paths = key.split('/').filter(p => p);\r\n        const value = patch[key];\r\n        this.setValue(entity, paths, value);\r\n      });\r\n    }\r\n    if (isGroupdMainEntity) {\r\n      const collection = this.frameContext.repository.entityCollection.toJSON();\r\n      entity['__type__'] = 'List';\r\n      entity['__items__'] = collection;\r\n    }\r\n    return entity;\r\n  }\r\n  private setValue(target: any, paths: string[], value: any) {\r\n    if (paths.length === 1) {\r\n      target[paths[0]] = value;\r\n    } else {\r\n      const propertyName = paths.pop();\r\n      const result = paths.reduce((object: any, path: string) => {\r\n        return object && object[path];\r\n      }, target);\r\n      result[propertyName] = value;\r\n    }\r\n  }\r\n  /**\r\n   * 是否为实体依赖\r\n   * @param dep \r\n   * @returns \r\n   */\r\n  private isEntityDependency(dep: string) {\r\n    return dep.startsWith(ENTITY_TEMPLATE);\r\n  }\r\n  /**\r\n   * 获取实体\r\n   * @param options \r\n   * @returns \r\n   */\r\n  public getEntity(options: { [bindingPath: string]: string }) {\r\n    const entityTypeInfo = this.frameContext.repository.entityTypeInfo;\r\n    const bindingData = this.frameContext.bindingData;\r\n    const childrenEntityPaths = [];\r\n\r\n    let entity = null;\r\n    if (options['/']) {\r\n      // 修正主表\r\n      entity = this.frameContext.bindingData.list.findById(options['/']);\r\n      if (entity) {\r\n        entity = entity.toJSON();\r\n      }\r\n    } else {\r\n      entity = this.frameContext.bindingData.list.currentItem.toJSON();\r\n    }\r\n    if (!entity) {\r\n      return null;\r\n    }\r\n    ExpressionUtil.getChildrenEntityPaths(entityTypeInfo, childrenEntityPaths);\r\n    entity['__type__'] = 'Entity';\r\n    if (!childrenEntityPaths || childrenEntityPaths.length < 1) {\r\n      return entity;\r\n    }\r\n    // 找到所有子表\r\n    childrenEntityPaths.forEach((paths: string[]) => {\r\n      let row = null;\r\n      if (options && options[paths.join('/')]) {\r\n        const parentPaths = paths.slice(0, 1);\r\n        if (paths.length == 2 && options[parentPaths.join('/')]) {\r\n          const parentRow = options[parentPaths.join('/')];\r\n          // 从从表\r\n          // 需要切换上级表\r\n          row = this.getPropertyValue(entity, parentPaths.concat([parentRow, paths[1], options[paths.join('/')]]));\r\n        } else {\r\n          // 不应该使用bindingData，这样就默认使用了当前行\r\n          const bindingList: BindingList = bindingData.getValue(paths) as BindingList;\r\n          const currentRowId = options[paths.join('/')];\r\n          let currentRow: BindingObject = null;\r\n          if (currentRowId !== bindingList.currentId) {\r\n            currentRow = bindingList.findById(currentRowId);\r\n          } else {\r\n            currentRow = bindingList.currentItem;\r\n          }\r\n          if (currentRow && currentRow.primaryKeyValue) {\r\n            row = currentRow.toJSON();\r\n          }\r\n        }\r\n      } else {\r\n        // 如果上级表已经切换了当前行，那么下级表也应该切换\r\n        const parentTableCurrentRowChanged = options && !!Object.keys(options).find(path => {\r\n          const fullPath = path.split('/').join('/');\r\n          return paths.join('/').startsWith(fullPath);\r\n        }) || false;\r\n        if (parentTableCurrentRowChanged) {\r\n          const primaryValue = options && options['/'] || bindingData.list.currentId;\r\n          const entity = this.frameContext.repository.entityCollection.getEntityById(primaryValue);\r\n          const fullPaths = [];\r\n          const data = paths.reduce((object, path) => {\r\n            fullPaths.push(path);\r\n            const item = object && object[path] as EntityList<Entity>;\r\n            if (item) {\r\n              const currentRowId = options && options[fullPaths.join('/')] || item.items[0] && item.items[0].primaryValue || null;\r\n              if (currentRowId) {\r\n                const currentRow = item.get(currentRowId);\r\n                return currentRow || null;\r\n              }\r\n            }\r\n            return null;\r\n          }, entity) as Entity;\r\n          if (data) {\r\n            row = data.toJSON();\r\n          } else {\r\n            row = {};\r\n          }\r\n        } else {\r\n          row = ExpressionUtil.getCurrentRowByPaths(paths, bindingData);\r\n        }\r\n      }\r\n      const propertyName = paths.pop();\r\n      let parent = paths.reduce((object: any, path: string) => {\r\n        return object && object[path] || null;\r\n      }, entity);\r\n      const list = parent[propertyName];\r\n      const node: any = { __items__: [], ...row && row || {}, __type__: 'List' };\r\n      node.length = () => node.__items__.length;\r\n      if (list && Array.isArray(list)) {\r\n        node.__items__ = [].concat(list);\r\n      }\r\n      parent[propertyName] = node;\r\n    });\r\n    return entity;\r\n  }\r\n  private getPropertyValue(entity: any, paths: string[]) {\r\n    return paths.reduce((object: any, path: string) => {\r\n      if (object['__type__'] === 'List') {\r\n        return object['__items__'].find(item => item.id === path);\r\n      } else if (Array.isArray(object)) {\r\n        return object.find(item => item.id === path);\r\n      } else {\r\n        return object && object[path];\r\n      }\r\n    }, entity);\r\n  }\r\n  /**\r\n   * 获取主实体原始字段名\r\n   */\r\n  protected get entityOriginalNodeCode(): string {\r\n    const repository = this.injector.get(Repository);\r\n    return repository && repository.entityTypeInfo && repository.entityTypeInfo.entityInfo && repository.entityTypeInfo.entityInfo.originalCode || null;\r\n  }\r\n  /**\r\n   * 构造变量上下文\r\n   * @param event \r\n   * @returns \r\n   */\r\n  public buildStateContext() {\r\n    const result = {};\r\n    if (this.frameContext) {\r\n      const rootFrameContext = this.frameContext.getVirtualRootFrameContext();\r\n      if (rootFrameContext) {\r\n        const uiState = rootFrameContext.viewModel.uiState;\r\n        const propertyNames = Object.getOwnPropertyNames(uiState) || [];\r\n        propertyNames.forEach((prop: string) => {\r\n          if (prop.match(/^[a-zA-Z0-9_\\$]+$/g) !== null) {\r\n            result[prop] = uiState[prop];\r\n          }\r\n        });\r\n      }\r\n    }\r\n    return result;\r\n  }\r\n}","import { Injectable, Injector } from \"@angular/core\";\r\nimport { ExpressionManager } from \"./expression_manager\";;\r\nimport { ExpressionRegistry } from \"./expression_registry\";\r\nimport { ExpressionResult } from \"./expression_result\"\r\nimport { Expression } from \"./types\";\r\n\r\n@Injectable()\r\nexport class ExpressionResultFactory {\r\n  constructor(private injector: Injector, private expressionRegistry: ExpressionRegistry, private expressionManager: ExpressionManager, private expressionResult: ExpressionResult) {\r\n    this.registeEvent();\r\n  }\r\n  private registeEvent() {\r\n    this.expressionRegistry.expressions.subscribe((expressionObjects: Expression.ExpressionObject[]) => {\r\n      // 加载完表达式之后做一次计算\r\n      expressionObjects.forEach((expressionObject: Expression.ExpressionObject) => {\r\n        if (expressionObject.deps && expressionObject.deps.length > 0) {\r\n          return;\r\n        }\r\n        const result = this.expressionManager.eval(expressionObject.id);\r\n        this.expressionResult[expressionObject.id] = result;\r\n      });\r\n    });\r\n  }\r\n}","import { Injectable, Injector, Inject } from '@angular/core';\r\n// import { FRAME_ID, NAMESPACE } from '../frame/index';\r\nimport { UIState, UIStateObservableParam } from '../ui-state/index';\r\nimport { ChangeListener } from './change_listener';\r\nimport { Expression } from '../expression/index';\r\nimport { BindingData } from '../binding-data/index';\r\nimport { FRAME_ID, NAMESPACE } from '../frame/tokens';\r\ntype EventArgs = Expression.EventArgs;\r\n/**\r\n * 监听UIState变更\r\n */\r\n@Injectable()\r\nclass UIStateChangeListener extends ChangeListener {\r\n  constructor(private injector: Injector, private uiState: UIState, @Inject(NAMESPACE) private namespace, @Inject(FRAME_ID) private frameId: string, private bindingData: BindingData) {\r\n    super();\r\n    this.registerEvent();\r\n  }\r\n  public buildEventPath(change: UIStateObservableParam): string[] {\r\n    return null;\r\n  }\r\n  private registerEvent() {\r\n    if (this.uiState && this.uiState.changes) {\r\n      this.uiState.changes.subscribe((change: UIStateObservableParam) => {\r\n        const modification: EventArgs = {\r\n          ns: this.namespace,\r\n          path: [change.field],\r\n          type: Expression.EventType.ValueChanged,\r\n          value: change.value,\r\n          source: Expression.EventSource.State,\r\n          frameId: this.frameId\r\n        };\r\n        // console.log(\"UIStateChangeListener\", modification);\r\n        this.subject.next(modification);\r\n      });\r\n    }\r\n  }\r\n}\r\nexport { UIStateChangeListener };\r\n","import { InjectionToken } from '@angular/core';\r\nimport { Expression } from './types';\r\n\r\nexport const ASSIGNER_TOKEN = new InjectionToken<Expression.Assigner>('@Farris expression assigner');\r\nexport const EVENT_HANDLER_TOKEN = new InjectionToken<Expression.IEventHandler>('@Farris_event_handler');","import { Inject, Injectable, Injector } from '@angular/core';\r\nimport { Modification, ModifyType } from '../changeset/index';\r\nimport { Entity } from '../entity';\r\nimport { Repository } from '../repository/index';\r\nimport { ChangeListener } from './change_listener';\r\nimport { Expression } from '../expression/index';\r\nimport { BindingData } from '../binding-data/index';\r\nimport { NAMESPACE } from '../frame/tokens';\r\n\r\ntype EventArgs = Expression.EventArgs;\r\nconst EventType = Expression.EventType;\r\n\r\n@Injectable()\r\nclass RepositoryChangeListener extends ChangeListener {\r\n  private bindingData: BindingData;\r\n  constructor(private injector: Injector, private repository: Repository<Entity>, @Inject(NAMESPACE) private namespace) {\r\n    super();\r\n    this.bindingData = this.injector.get<BindingData>(BindingData, null);\r\n    this.registerEvent();\r\n  }\r\n\r\n  private registerEvent() {\r\n    if (this.repository && this.repository.changes) {\r\n      this.repository.changes.subscribe((change: Modification) => {\r\n        let eventType = this.convertEventType(change);\r\n        if (!eventType) {\r\n          return;\r\n        }\r\n        const path = this.buildEventPath(change);\r\n        const modification: EventArgs = {\r\n          ns: this.namespace,\r\n          type: eventType,\r\n          path: path,\r\n          value: change.value,\r\n          source: Expression.EventSource.Field,\r\n        };\r\n        // console.log(\"RepositoryChangeListener\", modification);\r\n        this.subject.next(modification);\r\n      });\r\n    }\r\n    // repository只监听值变化事件\r\n    if (this.repository && this.repository.entityCollectionChange) {\r\n      this.repository.entityCollectionChange.subscribe((change: Modification) => {\r\n        let eventType = this.convertEventType(change);\r\n        if (!eventType) {\r\n          return;\r\n        }\r\n        const path = this.buildEventPath(change);\r\n        const modification: EventArgs = {\r\n          ns: this.namespace,\r\n          type: eventType,\r\n          path: path,\r\n          value: change.value,\r\n          source: Expression.EventSource.Repository,\r\n        };\r\n        this.subject.next(modification);\r\n      });\r\n    }\r\n  }\r\n  /**\r\n   * 构建事件路径参数\r\n   * @param event event\r\n   * @description 构建完之后的路径类似[id,prop] or [id,从表名s,从表当前行id,从表属性] or [id,udt,udt_prop]\r\n   * @returns \r\n   */\r\n  public buildEventPath(event: Modification): string[] {\r\n    const paths = event.path;\r\n    let result = [];\r\n    if (!paths || paths.length < 1) {\r\n      // 主表新增时path为空\r\n      return result;\r\n    }\r\n    // 过滤掉udt的冒号，关联字段的id\r\n    result = paths.filter((path: string, index: number) => {\r\n      if (index % 2 === 0 && path.includes(':')) {\r\n        if (path === ':') {\r\n          return false;\r\n        }\r\n        const primaryKey = path.split(':')[0];\r\n        if (primaryKey !== this.repository.primaryKey) {\r\n          return false;\r\n        }\r\n      }\r\n      return true;\r\n    });\r\n    // 移除路径中的id字符串\r\n    // result = paths.map((path: string, index: number) => {\r\n    //   if (path.includes(':') && index % 2 === 0) {\r\n    //     return path.split(':')[1];\r\n    //   }\r\n    //   return path;\r\n    // });\r\n    // 此时result中不应该有冒号\r\n    return result;\r\n  }\r\n  private convertEventType(change: Modification): Expression.EventType {\r\n    let eventType = null;\r\n    if (change.type === ModifyType.Add || change.type === ModifyType.AddData || change.type === ModifyType.Insert) {\r\n      // eventType = Expression.EventType.Append;\r\n      // 不处理新增\r\n    } else if (change.type === ModifyType.Remove || change.type === ModifyType.RemoveData) {\r\n      // eventType = Expression.EventType.Remove;\r\n    } else if (change.type === ModifyType.Load) {\r\n      // eventType = Expression.EventType.Load;\r\n    } else if (change.type === ModifyType.ValueChange) {\r\n      //eventType = Expression.EventType.ValueChanged;\r\n      // 不处理值变化\r\n    } else if (change.type === ModifyType.Update) {\r\n      eventType = Expression.EventType.Update\r\n    }\r\n    return eventType;\r\n  }\r\n}\r\n\r\nexport { RepositoryChangeListener }","import { Inject, Injectable, Injector, Optional } from '@angular/core';\r\nimport { LISTENER_TOKEN } from './tokens';\r\nimport { Expression } from '../expression/index';\r\ntype Listener = Expression.Listener;\r\n@Injectable()\r\nclass ListenerRegistry {\r\n  constructor(@Optional() @Inject(LISTENER_TOKEN) public listeners: Array<Listener>, @Optional() private injector: Injector) {\r\n  }\r\n}\r\nexport { ListenerRegistry };\r\n","import { Inject, Injectable, Injector } from '@angular/core';\r\nimport { BindingData, BindingList, Change, ChangeType } from '../binding-data/index';\r\nimport { ChangeListener } from './change_listener';\r\nimport { Expression } from '../expression/index';\r\nimport { NAMESPACE } from '../frame/index';\r\nimport { Repository } from '../repository/index';\r\n\r\ntype EventArgs = Expression.EventArgs;\r\nconst EventType = Expression.EventType;\r\n/**\r\n * 监听bindingList变更\r\n * @description 主要用于监听行切换等事件\r\n */\r\n@Injectable()\r\nclass BindingDataChangeListener extends ChangeListener {\r\n  private repository: Repository<any> = null;\r\n  constructor(private injector: Injector, private bindingData: BindingData, @Inject(NAMESPACE) private namespace) {\r\n    super();\r\n    this.repository = this.injector.get(Repository, null);\r\n    this.registerEvent();\r\n  }\r\n\r\n  /**\r\n   * 注册值变化事件\r\n   */\r\n  private registerEvent() {\r\n    if (this.bindingData && this.bindingData.changes && typeof this.bindingData.changes.subscribe === 'function') {\r\n      this.bindingData.changes.subscribe((change: Change) => {\r\n        if ((change.type === ChangeType.Append && change.isCloned !== true) || change.type === ChangeType.ValueChanged || change.type === ChangeType.Remove || change.type === ChangeType.Load || change.type === ChangeType.SelectionChanged) {\r\n          let eventType = null;\r\n          if (change.type === ChangeType.Append) {\r\n            eventType = EventType.Append;\r\n          } else if (change.type === ChangeType.ValueChanged) {\r\n            eventType = EventType.ValueChanged;\r\n          } else if (change.type === ChangeType.Remove) {\r\n            eventType = EventType.Remove;\r\n          } else if (change.type === ChangeType.Load) {\r\n            // 主表新增\r\n            if (change.create === true) {\r\n              eventType = EventType.Append;\r\n            } else {\r\n              eventType = EventType.Load;\r\n            }\r\n          } else if (change.type === ChangeType.SelectionChanged) {\r\n            eventType = EventType.SelectionChanged\r\n          }\r\n          const path = this.buildEventPath(change);\r\n          const modification: EventArgs = {\r\n            ns: this.namespace,\r\n            path: path,\r\n            type: eventType,\r\n            source: Expression.EventSource.BindingData,\r\n            value: change.value,\r\n            id: change.id\r\n          };\r\n          // console.log(\"BindingDataChangeListener\", modification);\r\n          this.subject.next(modification);\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  public buildEventPath(change: Change): string[] {\r\n    const path = change.path;\r\n    const paths = [];\r\n    // if (!path || path.length < 1) {\r\n    //   return paths;\r\n    // }\r\n    const primaryValue = this.bindingData.list.currentItem.primaryKeyValue;\r\n    if (primaryValue) {\r\n      if (!(change.type === ChangeType.Load && change.path.length === 0)) {\r\n        paths.push(`${this.bindingData.list.primaryKey}:${primaryValue}`);\r\n      }\r\n    }\r\n    const currentPath = [];\r\n    for (let index = 0; index < path.length; index++) {\r\n      const propertyName = path[index];\r\n      currentPath.push(propertyName);\r\n      const item = this.bindingData.getValue(currentPath);\r\n      paths.push(propertyName);\r\n      if (item instanceof BindingList) {\r\n        if (currentPath.length < path.length) {\r\n          const bindingList = item as BindingList;\r\n          let currentId = bindingList.currentItem.primaryKeyValue;\r\n          if (index === path.length - 2 && change.id) {\r\n            currentId = change.id;\r\n          }\r\n          paths.push(`${this.bindingData.list.primaryKey}:${currentId}`);\r\n        }\r\n      }\r\n    }\r\n    return paths;\r\n  }\r\n}\r\nexport { BindingDataChangeListener };\r\n","import { Inject, Injectable, Injector, Optional } from '@angular/core';\r\nimport { Observable, Subject } from 'rxjs';\r\nimport { ListenerRegistry } from './listener_registry';\r\nimport { Expression } from '../expression/index';\r\n\r\ntype EventArgs = Expression.EventArgs;\r\ntype Listener = Expression.Listener;\r\n\r\n/**\r\n * 监听器\r\n * @description 监听bindingList、UIState变更\r\n */\r\n@Injectable()\r\nclass Listeners {\r\n  private subject: Subject<EventArgs> = new Subject<EventArgs>();\r\n  public get onEvent(): Observable<EventArgs> {\r\n    return this.subject;\r\n  }\r\n  constructor(@Optional() private registry: ListenerRegistry) {\r\n    this.regist();\r\n  }\r\n  private regist() {\r\n    const listeners = this.registry && this.registry.listeners || [];\r\n    if (listeners && listeners.length > 0) {\r\n      listeners.forEach((listener: Listener) => {\r\n        listener.onEvent.subscribe((modification: EventArgs) => {\r\n          this.subject.next(modification);\r\n        });\r\n      });\r\n    }\r\n  }\r\n}\r\nexport { Listeners };\r\n","import { Injectable } from \"@angular/core\";\r\nimport { BehaviorSubject, Observable } from \"rxjs\";\r\nimport { Listeners } from \"../listener/index\";\r\nimport { Expression } from \"./types\";\r\n/**\r\n * 事件监听器主要有以下几种类型的事件：\r\n * 1、值变化\r\n * 2、行切换\r\n *    行切换使用场景为需要为数据计算依赖当前行时\r\n * 3、数据加载\r\n */\r\n@Injectable()\r\nexport class ExpressionEventEmitter {\r\n  private onEvent: BehaviorSubject<Array<Expression.EventArgs>>;\r\n  private events: Array<Expression.EventArgs>;\r\n  constructor(private listeners: Listeners) {\r\n    this.events = new Array<Expression.EventArgs>();\r\n    this.listeners.onEvent.subscribe((eventArgs: Expression.EventArgs) => {\r\n      if (this.onEvent && this.onEvent.observers.length > 0) {\r\n        let events = [];\r\n        if (this.events.length > 0) {\r\n          events = [...this.events];\r\n        }\r\n        events.push(eventArgs);\r\n        this.onEvent.next(events);\r\n        this.events = [];\r\n      } else {\r\n        this.events.push(eventArgs);\r\n      }\r\n    });\r\n  }\r\n  public attach(): Observable<Array<Expression.EventArgs>> {\r\n    if (!this.onEvent) {\r\n      this.onEvent = new BehaviorSubject<Array<Expression.EventArgs>>(this.events);\r\n    }\r\n    return this.onEvent.asObservable();\r\n  }\r\n}","import { InjectionToken } from '@angular/core';\r\nimport { Expression } from '../expression/index';\r\n\r\nexport const EFFECTOR_TOKEN = new InjectionToken<Expression.Effector>('@farris/effector_token');\r\n\r\n","import { Inject, Injectable, Injector } from '@angular/core';\r\nimport { BindingData } from '../binding-data/index';\r\nimport { Entity, EntityList } from '../entity/index';\r\nimport { Expression } from '../expression/index';\r\nimport { NAMESPACE } from '../frame/tokens';\r\nimport { Repository } from '../repository/index';\r\n/**\r\n * 实体副作用器\r\n * @description 将表达式计算结果赋值给实体属性\r\n */\r\n@Injectable()\r\nexport class RepositoryEffector implements Expression.Effector {\r\n  public ns: string;\r\n  constructor(private injector: Injector, private repository: Repository<Entity>, @Inject(NAMESPACE) private namespace, private bindingData: BindingData) {\r\n    this.ns = namespace;\r\n  }\r\n\r\n  public effect(path: string, value: any, options: Expression.EffectOptions) {\r\n    if (!options || !options.path) {\r\n      throw new Error('repository effector 需要指定行信息。');\r\n    }\r\n    const propertyPath = options.path;\r\n    const rowId = propertyPath[0] || this.bindingData.list.currentItem.primaryKeyValue;\r\n    let entity = this.repository.entityCollection.getEntityById(rowId);\r\n    if (rowId && !entity) {\r\n      return;\r\n    }\r\n    // propertyPath like : [1, child1s, 1.1, child2s, 1.1.1,propName] or [1,udt,propName] or [1,prop]\r\n    const propName = propertyPath.pop();\r\n    let object: any = entity;\r\n    for (let index = 1; index < propertyPath.length; index++) {\r\n      const propertyName = propertyPath[index];\r\n      if (object instanceof EntityList) {\r\n        object = object.get(propertyName);\r\n      } else {\r\n        object = object[propertyName];\r\n      }\r\n    }\r\n    if (object) {\r\n      if (object[propName] !== value) {\r\n        object[propName] = value;\r\n      }\r\n    } else {\r\n      // console.error(`找不到实体对应的路径：${propertyPath.push(propName)}`);\r\n    }\r\n  }\r\n}","import { Inject, Injectable, Injector } from '@angular/core';\r\nimport { Expression } from '../expression/index';\r\nimport { NAMESPACE } from '../frame/tokens';\r\nimport { UIState } from '../ui-state/index';\r\n\r\n@Injectable()\r\nexport class UIStateEffector implements Expression.Effector {\r\n  public ns: string;\r\n  constructor(private injector: Injector, private uiState: UIState, @Inject(NAMESPACE) private namespace) {\r\n    this.ns = namespace;\r\n  }\r\n  public effect(path: string, value: any, options: Expression.EffectOptions) {\r\n    this.uiState.setPropertyValue(path, value);\r\n  }\r\n}","import { Inject, Injectable, Injector } from '@angular/core';\r\nimport { Expression } from '../expression/index';\r\nimport { FrameContext, NAMESPACE } from '../frame/index';\r\n\r\n/**\r\n * 只读副作用器\r\n */\r\n@Injectable()\r\nexport class ReadonlyEffector implements Expression.Effector {\r\n  public ns: string;\r\n  constructor(private injector: Injector, @Inject(NAMESPACE) private namespace, private frameContext: FrameContext) {\r\n    this.ns = namespace;\r\n  }\r\n  public effect(path: string, value: any, options: Expression.EffectOptions) {\r\n    // suprise ?\r\n  }\r\n}","import { Inject, Injectable, Injector } from '@angular/core';\r\nimport { BindingData } from '../binding-data/index';\r\nimport { Entity, EntityList } from '../entity/index';\r\nimport { Expression } from '../expression/index';\r\nimport { NAMESPACE } from '../frame/tokens';\r\nimport { Repository } from '../repository/index';\r\n\r\n/**\r\n * 依赖副作用器\r\n * @description 当表达式计算结果为true时，清空字段值\r\n * 当value==true且属性当前值不是null时，设置属性值为null\r\n */\r\n@Injectable()\r\nexport class DependencyEffector implements Expression.Effector {\r\n  public ns: string;\r\n  constructor(private injector: Injector, private repository: Repository<Entity>, @Inject(NAMESPACE) private namespace, private bindingData: BindingData) {\r\n    this.ns = namespace;\r\n  }\r\n  public effect(path: string, value: boolean, options: Expression.EffectOptions) {\r\n    if (!options || !options.path) {\r\n      throw new Error('DependencyEffector 需要指定行信息。');\r\n    }\r\n    if (typeof value !== 'boolean') {\r\n      console.warn(`DependencyEffector 依赖表达式计算结果应该为true/false，当前值为：${value}`);\r\n    }\r\n    const propertyPath = options.path;\r\n    const rowId = propertyPath[0] || this.bindingData.list.currentItem.primaryKeyValue;\r\n    let entity = this.repository.entityCollection.getEntityById(rowId);\r\n    if (rowId && !entity) {\r\n      throw new Error(`找不到id：${rowId}对应的实体！`);\r\n    }\r\n    // propertyPath like : [1, child1s, 1.1, child2s, 1.1.1,propName] or [1,udt,propName] or [1,prop]\r\n    const propName = propertyPath.pop();\r\n    let object: any = entity;\r\n    for (let index = 1; index < propertyPath.length; index++) {\r\n      const propertyName = propertyPath[index];\r\n      if (object instanceof EntityList) {\r\n        object = object.get(propertyName);\r\n      } else {\r\n        object = object[propertyName];\r\n      }\r\n    }\r\n    if (object) {\r\n      if (object[propName] !== null && value === true) {\r\n        object[propName] = null;\r\n      }\r\n    } else {\r\n      throw new Error(`[DependencyEffector] 找不到实体对应的路径：${propertyPath.push(propName)}`);\r\n    }\r\n  }\r\n\r\n}","import { Inject, Injectable, Injector, Optional } from '@angular/core';\r\nimport { Expression } from '../expression/index';\r\nimport { EFFECTOR_TOKEN } from './tokens';\r\n\r\n@Injectable()\r\nexport class EffectorRegistry {\r\n  constructor(private injector: Injector, @Optional() @Inject(EFFECTOR_TOKEN) public effectors: Array<Expression.Effector>) { }\r\n}\r\n","import { Inject, Injectable, Injector } from '@angular/core';\r\nimport { Expression } from '../expression/index';\r\nimport { NAMESPACE } from '../frame/index';\r\nimport { MESSAGE_SERVICE_TOKEN, NOTIFY_SERVICE_TOKEN, IMessageService, INotifyService } from '../core/index';\r\n\r\n@Injectable()\r\nexport class RelativeEffector implements Expression.Effector {\r\n  public ns: string;\r\n  constructor(private injector: Injector, @Inject(MESSAGE_SERVICE_TOKEN) private messageService: IMessageService, @Inject(NOTIFY_SERVICE_TOKEN) private notifyService: INotifyService, @Inject(NAMESPACE) private namespace) {\r\n    this.ns = namespace;\r\n  }\r\n\r\n  public effect(path: string, value: any, options: Expression.EffectOptions) {\r\n    if (value === true && options.message && this.notifyService) {\r\n      const messageType = options.messageType || 'info';\r\n      this.notifyService[messageType](options.message, { hideTitle: true });\r\n    }\r\n  }\r\n}","import { Inject, Injectable, Injector } from '@angular/core';\r\nimport { Expression } from '../expression/index';\r\nimport { FrameContext } from '../frame/frame_context';\r\nimport { MESSAGE_SERVICE_TOKEN, NOTIFY_SERVICE_TOKEN, IMessageService, INotifyService } from '../core/index';\r\nimport { NgFormControl } from '../form/decorators';\r\nimport { RuleType } from '../form/index';\r\nimport { NAMESPACE } from '../frame/tokens';\r\n\r\n@Injectable()\r\nexport class ValidateEffector implements Expression.Effector {\r\n  public ns: string;\r\n  constructor(\r\n    private injector: Injector,\r\n    @Inject(MESSAGE_SERVICE_TOKEN) private messageService: IMessageService,\r\n    @Inject(NOTIFY_SERVICE_TOKEN) private notifyService: INotifyService,\r\n    @Inject(NAMESPACE) private namespace,\r\n    private frameContext: FrameContext\r\n  ) {\r\n    this.ns = namespace;\r\n  }\r\n  public effect(path: string, value: any, options: Expression.EffectOptions) {\r\n    // 校验不通过时返回false\r\n    const domInfo: any = this.getDomInfoByEntityPath(path);\r\n    if (!domInfo) {\r\n      return;\r\n    }\r\n    const frameContext = domInfo.frameContext;\r\n    const rootFrameContext = frameContext && frameContext.getVirtualRootFrameContext();\r\n    // const rootViewModel = rootFrameContext.viewModel;\r\n    const expressionId = options.expressionId;\r\n    const domPropertyName = domInfo.domPropertyName;\r\n    if (expressionId) {\r\n      // 增加校验规则\r\n      frameContext.form.addFieldValidateRule(domPropertyName, options.message, expressionId, RuleType.Validate);\r\n    }\r\n    if (value === false && options.message) {\r\n      // 更新form错误信息\r\n      // 不是grid，则认为是卡片\r\n      if (!domInfo.isGridComponent) {\r\n        const message = options.message.replace(/\\$property/g, domInfo.propertyName)\r\n        const formErrors = this.buildFormErrors(domPropertyName, message);\r\n        // // 只增加校验规则，不立即显示校验信息，否则页面加载后在非编辑态就会显示校验信息\r\n        frameContext.form.updateFormErrors(formErrors);\r\n      } else {\r\n        // if (expressionId) {\r\n        //   // 增加校验规则\r\n        //   frameContext.form.addFieldValidateRule(domPropertyName, options.message, expressionId, RuleType.Validate);\r\n        // }\r\n      }\r\n      // 不进行汇总展示\r\n      // const verifyInformations = this.buildVerifyInformations(domInfo.id, frameContext, domInfo.domPropertyName, options.message);\r\n      // 增加到汇总消息\r\n      // rootViewModel.verifycationChanged.next(verifyInformations);\r\n      // 更新汇总错误信息\r\n    } else if (value === true) {\r\n      // 移除错误消息\r\n      // const verifyInformations = this.removeValidateVerifyInformations(domInfo.id, this.frameContext);\r\n      // rootViewModel.verifycationChanged.next(verifyInformations);\r\n      const currentErrors = frameContext.form.getFormControlErrors(domPropertyName) || null;\r\n      if (currentErrors) {\r\n        if (currentErrors.hasOwnProperty('validate')) {\r\n          // require合法，移除require校验提示\r\n          delete currentErrors.validate;\r\n        }\r\n        frameContext.form.updateFormErrors({ [domPropertyName]: { errors: currentErrors } });\r\n      } else {\r\n        const formErrors = this.buildFormErrors(domPropertyName, null);\r\n        frameContext.form.updateFormErrors(formErrors);\r\n      }\r\n    }\r\n  }\r\n  /**\r\n   * 通过实体路径获取对应的dom信息\r\n   * @param entityPath \r\n   * @returns \r\n   */\r\n  private getDomInfoByEntityPath(entityPath: string): { domPropertyName: string, frameContext: FrameContext, id: string, isGridComponent: boolean } {\r\n    let result = null;\r\n    if (!entityPath) {\r\n      return result;\r\n    }\r\n    entityPath = entityPath.split('/').filter(p => p).join('.');\r\n    const frameContexts = this.frameContext && this.frameContext.appContext.frameContextManager.getFrameContextsByNamespace(this.namespace) || null;\r\n    if (frameContexts && frameContexts.length > 0) {\r\n      for (const frameContext of frameContexts) {\r\n        if (result) {\r\n          break;\r\n        }\r\n        if (frameContext && frameContext.form && frameContext.form.ngFormControls && Object.keys(frameContext.form.ngFormControls).length > 0) {\r\n          const keys = Object.keys(frameContext.form.ngFormControls);\r\n          for (const propertyName of keys) {\r\n            const ngFormControl: NgFormControl = frameContext.form.ngFormControls[propertyName];\r\n            let bindingPath = frameContext.viewModel.bindingPath || '/';\r\n            const bindingPaths = bindingPath.split('/').filter(p => p);\r\n            let bindings = ngFormControl.binding.split('.');\r\n            bindings = bindingPaths.concat(bindings);\r\n            if (entityPath === bindings.join('.')) {\r\n              // 判断对应的组件是什么类型\r\n              const dgColumnNames = frameContext.viewModel['dataGridColumnsName'] || null;\r\n              const dgColumnInfo: Array<Array<any>> = frameContext.viewModel[dgColumnNames] || null;\r\n              if (dgColumnInfo && Array.isArray(dgColumnInfo) && dgColumnInfo.length > 0) {\r\n                const isEditableGrid = dgColumnInfo.find((array: Array<any>) => {\r\n                  const readonlyGroup = array.every((column: any) => !(column.hasOwnProperty('editor') && column.editor));\r\n                  if (!readonlyGroup) {\r\n                    return true;\r\n                  } else {\r\n                    return false;\r\n                  }\r\n                });\r\n                if (!isEditableGrid) {\r\n                  continue;\r\n                }\r\n              }\r\n              let isGridComponent = false;\r\n              if (dgColumnNames) {\r\n                isGridComponent = true;\r\n              }\r\n              result = {\r\n                domPropertyName: propertyName,\r\n                propertyName: ngFormControl.name || ngFormControl.defaultI18nValue,\r\n                frameContext,\r\n                id: ngFormControl.id,\r\n                isGridComponent\r\n              };\r\n              break;\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n    return result;\r\n  }\r\n  private getVerifyInformations(frameContext: FrameContext) {\r\n    const rootFrameContext = frameContext && frameContext.getVirtualRootFrameContext();\r\n    const rootViewModel = rootFrameContext.viewModel;\r\n    const verifyInformations = rootViewModel.verifyInformations;\r\n    return verifyInformations;\r\n  }\r\n  private buildFormErrors(domPropertyName: string, message: string) {\r\n    if (message) {\r\n      message = message.replace(/\\$property/g, 'domPropertyName');\r\n      return {\r\n        [domPropertyName]: {\r\n          errors: {\r\n            'validate': {\r\n              name: message\r\n            }\r\n          }\r\n        }\r\n      };\r\n    } else {\r\n      return {\r\n        [domPropertyName]: {\r\n          errors: {}\r\n        }\r\n      };\r\n    }\r\n  }\r\n  private buildVerifyInformations(id: string, frameContext: FrameContext, domPropertyName: string, message: string) {\r\n    const verifyInformations = this.getVerifyInformations(frameContext);\r\n    const index = verifyInformations.findIndex((item: any) => {\r\n      return item.id === id\r\n    });\r\n    if (index !== -1) {\r\n      verifyInformations.splice(index, 1);\r\n    }\r\n    verifyInformations.push({\r\n      id: id,\r\n      namespace: frameContext.namespace,\r\n      targetField: domPropertyName,\r\n      index: verifyInformations.length + 1,\r\n      title: frameContext.form.formGroupName,\r\n      msg: message,\r\n      type: 'error'\r\n    });\r\n    return verifyInformations;\r\n  }\r\n  private removeValidateVerifyInformations(id: string, frameContext: FrameContext) {\r\n    const verifyInformations = this.getVerifyInformations(frameContext);\r\n    const index = verifyInformations.findIndex((item: any) => {\r\n      return item.id === id\r\n    });\r\n    if (index !== -1) {\r\n      verifyInformations.splice(index, 1);\r\n    }\r\n    return verifyInformations;\r\n  }\r\n}","import { Inject, Injectable, Injector } from '@angular/core';\r\nimport { Entity } from '../entity/index';\r\nimport { Expression } from '../expression/index';\r\nimport { NgFormControl, RuleType } from '../form/index';\r\nimport { FrameContext, NAMESPACE } from \"../frame/index\";\r\nimport { Translate, TranslateToken } from '../i18n';\r\nimport { Repository } from '../repository/index';\r\n\r\n/**\r\n * 必填副作用器\r\n * @description 当结算结果为true时设置必填校验，否则删除必填校验\r\n */\r\n@Injectable()\r\nexport class RequiredEffector implements Expression.Effector {\r\n  public ns: string;\r\n  constructor(private injector: Injector, private repository: Repository<Entity>, @Inject(NAMESPACE) private namespace, private frameContext: FrameContext) {\r\n    this.ns = namespace;\r\n  }\r\n  public effect(path: string, value: any, options: Expression.EffectOptions) {\r\n    // 校验不通过时返回false\r\n    const domInfo: any = this.getDomInfoByEntityPath(path);\r\n    if (!domInfo) {\r\n      return;\r\n    }\r\n    const frameContext: FrameContext = domInfo.frameContext;\r\n    const rootFrameContext = frameContext && frameContext.getVirtualRootFrameContext();\r\n    const rootViewModel = rootFrameContext.viewModel;\r\n    const domPropertyName = domInfo.domPropertyName;\r\n    const pathValue = this.frameContext.bindingData.getValue(path.split('/').filter(p => p));\r\n    const expressionId = options.expressionId;\r\n    if (expressionId) {\r\n      // 增加校验规则\r\n      frameContext.form.addFieldValidateRule(domPropertyName, options.message, expressionId, RuleType.Require);\r\n    }\r\n    if (value === true) {\r\n      if (options.message) {\r\n        // 更新form错误信息\r\n        // 不是grid，则认为是卡片\r\n        if (!domInfo.isGridComponent) {\r\n          const message = options.message.replace(/\\$property/g, domInfo.propertyName);\r\n          const formErrors = this.buildFormErrors(domPropertyName, message);\r\n          const isValidValue = this.isValidValue(path, pathValue);\r\n          if (!isValidValue) {\r\n            frameContext.form.updateFormErrors(formErrors);\r\n          }\r\n        } else {\r\n          this.updateColumnValidators(frameContext, domInfo.binding, domInfo.datagridColumns, true);\r\n        }\r\n      }\r\n    } else {\r\n      // 返回非true值时认为非必填\r\n      if (domInfo.isGridComponent) {\r\n        this.updateColumnValidators(frameContext, domInfo.binding, domInfo.datagridColumns, false);\r\n      } else {\r\n        const currentErrors = frameContext.form.getFormControlErrors(domPropertyName) || null;\r\n        if (currentErrors) {\r\n          if (currentErrors.hasOwnProperty('require')) {\r\n            // require合法，移除require校验提示\r\n            delete currentErrors.require;\r\n          }\r\n          frameContext.form.updateFormErrors({ [domPropertyName]: { errors: currentErrors } });\r\n        } else {\r\n          const formErrors = this.buildFormErrors(domPropertyName, null);\r\n          frameContext.form.updateFormErrors(formErrors);\r\n        }\r\n\r\n      }\r\n    }\r\n  }\r\n  private updateColumnValidators(frameContext: FrameContext, field: string, datagridColumns: any[][], isRequired: boolean) {\r\n    const frameId = frameContext.frameId;\r\n    const componentRefs = frameContext.appContext.componentManager.get([frameId]) as Map<string, any>;\r\n    if (componentRefs && componentRefs.size > 0) {\r\n      const datagrid = Array.from(componentRefs.values())[0];\r\n      if (datagrid && typeof datagrid.updateColumn === 'function') {\r\n        const columns = datagridColumns.find((array: any[]) => {\r\n          return array.find(item => item.field === field);\r\n        });\r\n        const column = columns && columns.find(item => item.field === field) || null;\r\n        if (column) {\r\n          const validators: any[] = column.validators || [];\r\n          const index = validators.findIndex(item => item.type === 'required');\r\n          if (isRequired) {\r\n            if (index === -1) {\r\n              validators.push({ \"type\": \"required\", \"message\": \"该字段不能为空！\" });\r\n            }\r\n          } else {\r\n            if (index !== -1) {\r\n              validators.splice(index, 1);\r\n            }\r\n          }\r\n          datagrid.updateColumn(field, { validators: [...validators] });\r\n          datagrid.columnsChanged(false);\r\n        }\r\n      }\r\n    }\r\n  }\r\n  private getDomInfoByEntityPath(entityPath: string): { domPropertyName: string, frameContext: FrameContext, id: string, isGridComponent: boolean, binding: string, datagridColumns: any[][] } {\r\n    let result = null;\r\n    if (!entityPath) {\r\n      return result;\r\n    }\r\n    entityPath = entityPath.split('/').filter(p => p).join('.');\r\n    const frameContexts = this.frameContext && this.frameContext.appContext.frameContextManager.getFrameContextsByNamespace(this.namespace) || null;\r\n    if (frameContexts && frameContexts.length > 0) {\r\n      for (const frameContext of frameContexts) {\r\n        if (result) {\r\n          break;\r\n        }\r\n        if (frameContext && frameContext.form && frameContext.form.ngFormControls && Object.keys(frameContext.form.ngFormControls).length > 0) {\r\n          const keys = Object.keys(frameContext.form.ngFormControls);\r\n          for (const propertyName of keys) {\r\n            const ngFormControl: NgFormControl = frameContext.form.ngFormControls[propertyName];\r\n            let bindingPath = frameContext.viewModel.bindingPath || '/';\r\n            const bindingPaths = bindingPath.split('/').filter(p => p);\r\n            let bindings = ngFormControl.binding.split('.');\r\n            bindings = bindingPaths.concat(bindings);\r\n            if (entityPath === bindings.join('.')) {\r\n              // 判断对应的组件是什么类型\r\n              const dgColumnNames = frameContext.viewModel['dataGridColumnsName'] || null;\r\n              const dgColumnInfo: Array<Array<any>> = frameContext.viewModel[dgColumnNames] || null;\r\n              if (dgColumnInfo && Array.isArray(dgColumnInfo) && dgColumnInfo.length > 0) {\r\n                const isEditableGrid = dgColumnInfo.find((array: Array<any>) => {\r\n                  const readonlyGroup = array.every((column: any) => !(column.hasOwnProperty('editor') && column.editor));\r\n                  if (!readonlyGroup) {\r\n                    return true;\r\n                  } else {\r\n                    return false;\r\n                  }\r\n                });\r\n                if (!isEditableGrid) {\r\n                  continue;\r\n                }\r\n              }\r\n              let isGridComponent = false;\r\n              if (dgColumnNames) {\r\n                isGridComponent = true;\r\n              }\r\n              result = {\r\n                domPropertyName: propertyName,\r\n                propertyName: ngFormControl.name || ngFormControl.defaultI18nValue,\r\n                frameContext,\r\n                id: ngFormControl.id,\r\n                isGridComponent,\r\n                binding: ngFormControl.binding,\r\n                datagridColumns: dgColumnInfo\r\n              };\r\n              break;\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n    return result;\r\n  }\r\n  private getDataPropInfo(path: string) {\r\n    if (!path) {\r\n      return null;\r\n    }\r\n    const paths = path.split('/').filter(p => p);\r\n    return this.frameContext.repository.entityTypeInfo.getPropInfoByPath(paths);\r\n  }\r\n  private isValidValue(path: string, value: any) {\r\n    const dataTypeInfo = this.getDataPropInfo(path);\r\n    if (dataTypeInfo && dataTypeInfo.metadataInfo && dataTypeInfo.metadataInfo.enableMultiLangInput === true) {\r\n      // 多语字段\r\n      const translate = this.injector.get<Translate>(TranslateToken, null);\r\n      const currentLanguage = translate && translate.getCurrentLanguage() || 'zh-CHS';\r\n      if (Object.keys(value).length < 1) {\r\n        return false;\r\n      }\r\n      return !!value[currentLanguage];\r\n    } else if (value === null || value === '' || value === undefined) {\r\n      return false;\r\n    }\r\n    return true;\r\n  }\r\n  private buildFormErrors(domPropertyName: string, message: string) {\r\n    if (message) {\r\n      return {\r\n        [domPropertyName]: {\r\n          errors: {\r\n            'require': {\r\n              name: message\r\n            }\r\n          }\r\n        }\r\n      };\r\n    } else {\r\n      return {\r\n        [domPropertyName]: {\r\n          errors: {}\r\n        }\r\n      };\r\n    }\r\n  }\r\n}","import { Inject, Injectable, Injector } from '@angular/core';\r\nimport { Expression } from '../expression/index';\r\nimport { FrameContext, NAMESPACE } from '../frame/index';\r\nimport { Repository } from '../repository/index';\r\nimport { ExpressionUtil } from '../utils/expression_util';\r\n\r\n@Injectable()\r\nexport class VisibleEffector implements Expression.Effector {\r\n  public ns: string;\r\n  constructor(\r\n    private injector: Injector,\r\n    @Inject(NAMESPACE) private namespace,\r\n    private frameContext: FrameContext,\r\n    private repository: Repository<any>) {\r\n    this.ns = namespace;\r\n  }\r\n  public effect(path: string, value: any, options: Expression.EffectOptions) {\r\n    // 由匿名函数接管，ignore\r\n    const paths = path.split('/').filter(p => p);\r\n    const bindingPaths = this.getTablePaths(paths);\r\n    const bindingPath = bindingPaths.join('/');\r\n    // 主表显隐无需处理\r\n    if (bindingPaths && bindingPaths.length > 0) {\r\n      const isGridComponent = this.isGridComponent(bindingPath);\r\n      if (isGridComponent) {\r\n        const datagridComponent = this.getDatagridComponent(bindingPath);\r\n        if (datagridComponent) {\r\n          // 更新列信息\r\n          // datagridComponent.columnsChanged();\r\n          const fieldPaths = this.getPropertyPaths(paths);\r\n          if (fieldPaths) {\r\n            const field = fieldPaths.join('.');\r\n            if (value) {\r\n              datagridComponent.showColumn(field);\r\n            } else {\r\n              datagridComponent.hideColumn(field);\r\n            }\r\n          }\r\n        }\r\n      }\r\n    } else {\r\n      const datagridComponent = this.getDatagridComponent(bindingPath);\r\n      if (datagridComponent) {\r\n        datagridComponent.columnsChanged(false);\r\n      }\r\n    }\r\n  }\r\n  private getTablePaths(paths: string[]): string[] {\r\n    const entityPaths = ExpressionUtil.getAvailableChildrenPathsFromEntityPaths(paths, this.repository.entityTypeInfo);\r\n    return entityPaths;\r\n  }\r\n  private getDatagridComponent(bindingPath: string) {\r\n    const frameContexts: FrameContext[] = this.frameContext.appContext.frameContextManager.getFrameContextsByNamespace(this.namespace) || [];\r\n    const matchedFrameContexts = frameContexts.filter((frameContext: FrameContext) => frameContext.viewModel && frameContext.viewModel.bindingPath.split('/').filter(p => p).toString() === bindingPath.split('/').filter(p => p).toString());\r\n    let result = null;\r\n    if (matchedFrameContexts) {\r\n      matchedFrameContexts.every((frameContext: FrameContext) => {\r\n        const frameId = frameContext.frameId;\r\n        const componentsMap = this.frameContext.appContext.componentManager.getComponentsByFrameId(frameId);\r\n        if (!componentsMap) {\r\n          return true;\r\n        }\r\n        const datagridComponent = Array.from(componentsMap.values()).find((component: any) => component && component['__component_type__'] === 'DatagridComponent');\r\n        if (datagridComponent) {\r\n          result = datagridComponent;\r\n          return false;\r\n        } else {\r\n          return true;\r\n        }\r\n      });\r\n    }\r\n    return result;\r\n  }\r\n  private getPropertyPaths(paths: string[]) {\r\n    const tablePaths = ExpressionUtil.getAvailableChildrenPathsFromEntityPaths(paths, this.repository.entityTypeInfo);\r\n    return paths.slice(tablePaths.length);\r\n  }\r\n  private isGridComponent(bindingPath: string) {\r\n    const frameContexts: FrameContext[] = this.frameContext.appContext.frameContextManager.getFrameContextsByNamespace(this.namespace) || [];\r\n    const frameContext = frameContexts.find((frameContext: FrameContext) => frameContext.viewModel && frameContext.viewModel.bindingPath.split('/').filter(p => p).toString() === bindingPath.split('/').filter(p => p).toString());\r\n    if (frameContext) {\r\n      return !!frameContext.viewModel['dataGridColumnsName'];\r\n    } else {\r\n      return false;\r\n    }\r\n  }\r\n}","import { Expression } from '../expression/index';\r\nimport { Injectable, Injector } from '@angular/core';\r\nimport { EffectorRegistry } from './effector_registry';\r\nimport { RepositoryEffector } from './repository_effector';\r\nimport { UIStateEffector } from './uistate_effector';\r\nimport { ReadonlyEffector } from './readonly_effector';\r\nimport { DependencyEffector } from './dependency_effector';\r\nimport { RelativeEffector } from './relative_effector';\r\nimport { ValidateEffector } from './validate_effector';\r\nimport { RequiredEffector } from './required_effector';\r\nimport { VisibleEffector } from './visible_effector';\r\n// import { Core } from '../core/index';\r\n\r\n@Injectable()\r\nexport class EffectorFactory {\r\n  constructor(private injector: Injector, private effectorRegistry: EffectorRegistry) { }\r\n  public getEffector(expressionObject: Expression.ExpressionObject) {\r\n    const path = expressionObject.path;\r\n    const ns = expressionObject.ns;\r\n    const bindingType = expressionObject.bindingType;\r\n    const type = expressionObject.type;\r\n    const nsEffectors = this.effectorRegistry.effectors.filter((effector: Expression.Effector) => effector.ns == ns);\r\n    // 计算表达式\r\n    if (type === Expression.ExpressionType.Compute) {\r\n      if (bindingType === Expression.ExpressionBindingType.Field) {\r\n        return nsEffectors.find((effector: Expression.Effector) => effector instanceof RepositoryEffector);\r\n      } else if (bindingType === Expression.ExpressionBindingType.State) {\r\n        return nsEffectors.find((effector: Expression.Effector) => effector instanceof UIStateEffector);\r\n      } else {\r\n        throw new Error(`不支持的绑定字段类型：${bindingType}`);\r\n      }\r\n    } else if (type === Expression.ExpressionType.Readonly) {\r\n      // 只读表达式\r\n      return nsEffectors.find((effector: Expression.Effector) => effector instanceof ReadonlyEffector);\r\n    } else if (type === Expression.ExpressionType.Dependency) {\r\n      // 依赖表达式\r\n      return nsEffectors.find((effector: Expression.Effector) => effector instanceof DependencyEffector);\r\n    } else if (type === Expression.ExpressionType.Relative) {\r\n      // 关联表达式\r\n      return nsEffectors.find((effector: Expression.Effector) => effector instanceof RelativeEffector);\r\n    } else if (type === Expression.ExpressionType.Validate) {\r\n      // 校验表达式\r\n      return nsEffectors.find((effector: Expression.Effector) => effector instanceof ValidateEffector);\r\n    } else if (type === Expression.ExpressionType.Required) {\r\n      // 必填表达式\r\n      return nsEffectors.find((effector: Expression.Effector) => effector instanceof RequiredEffector);\r\n    } else if (type === Expression.ExpressionType.Visible) {\r\n      // 显隐表达式\r\n      return nsEffectors.find((effector: Expression.Effector) => effector instanceof VisibleEffector);\r\n    } else {\r\n      // Core.warn(`EffectorFactory 没有找到对应的副作用器 ${type}`);\r\n      return null;\r\n    }\r\n  }\r\n}\r\n","import { Injectable, Injector } from '@angular/core';\r\nimport { AppContext } from '../app/index';\r\nimport { BindingData, BindingList, BindingObject } from '../binding-data/index';\r\nimport { DataPropInfo } from '../core/index';\r\nimport { EffectorFactory } from '../effector/index';\r\nimport { BigNumber } from 'bignumber.js';\r\nimport { Expression, ExpressionExecutor, ExpressionRegistry, ExpressionResult } from '../expression/index';\r\nimport { Repository } from '../repository/index';\r\nimport { Entity, EntityList } from '../entity/index';\r\nimport { FrameContext } from '../frame';\r\nimport { ExpressionUtil } from '../utils/expression_util';\r\nimport { Translate } from '../i18n/translate';\r\nimport { TranslateToken } from '../i18n/translate_token';\r\n\r\n@Injectable()\r\nexport abstract class EventHandler implements Expression.IEventHandler {\r\n  protected frameContext: FrameContext;\r\n  constructor(protected injector: Injector, protected repository: Repository<any>, protected bindingData: BindingData, protected expressionRegistry: ExpressionRegistry, protected effectorFactory: EffectorFactory, protected expressionExecutor: ExpressionExecutor, protected expressionResult: ExpressionResult) {\r\n    this.frameContext = this.injector.get<FrameContext>(FrameContext);\r\n  }\r\n  public expressionObjects: Expression.ExpressionObject[];\r\n\r\n  public handleEvent(event: Expression.EventArgs, expressionObjects: Expression.ExpressionObject[]) {\r\n    event = Object.assign({}, event);\r\n    this.expressionObjects = expressionObjects;\r\n    this.dispatch(event);\r\n  }\r\n\r\n  //#region 抽象函数\r\n  /**\r\n   * 获取相关表达式\r\n   * @param event event\r\n   */\r\n  public abstract filter(event: Expression.EventArgs);\r\n  /**\r\n   * 发布事件\r\n   * @param expressionObject 表达式对象\r\n   * @param event 事件\r\n   */\r\n  public abstract dispatch(event: Expression.EventArgs): void;\r\n  //#endregion\r\n\r\n  //#region 属性\r\n\r\n  /**\r\n   * 主表主键值\r\n   */\r\n  protected get primaryValue() {\r\n    return this.bindingData.list.currentItem.primaryKeyValue;\r\n  }\r\n  /**\r\n   * 获取主实体原始字段名\r\n   */\r\n  protected get entityOriginalNodeCode(): string {\r\n    return this.repository && this.repository.entityTypeInfo && this.repository.entityTypeInfo.entityInfo && this.repository.entityTypeInfo.entityInfo.originalCode || null;\r\n  }\r\n\r\n  //#endregion\r\n\r\n  //#region 表达式核心\r\n  /**\r\n   * 执行表达式计算\r\n   * @param expression 表达式\r\n   * @param context 上下文\r\n   * @returns any\r\n   */\r\n  public perform(expressionObject: Expression.ExpressionObject, context: any) {\r\n    return this.expressionExecutor.compile(expressionObject, context);\r\n  }\r\n  /**\r\n   * 副作用\r\n   * @param event event\r\n   * @param expressionObject expressionObject\r\n   */\r\n  public effect(event: Expression.EventArgs, expressionObject: Expression.ExpressionObject): void {\r\n    const effectTo = expressionObject.bindingType;\r\n    const effector = this.effectorFactory.getEffector(expressionObject);\r\n    if (!effector) {\r\n      // console.warn(`EventHandler 没有对应的副作用器。${expressionObject.type}`);\r\n      return;\r\n    }\r\n    if (effectTo === Expression.ExpressionBindingType.Field) {\r\n      const effectPaths = expressionObject.effectPaths || [];\r\n      if (effectPaths.length > 0) {\r\n        effectPaths.forEach((path: string) => {\r\n          const effectPath = path.split('/');\r\n          const effectOptions = { path: effectPath, message: expressionObject.message, expressionId: expressionObject.id };\r\n          effector.effect(expressionObject.path, expressionObject.result, effectOptions);\r\n        });\r\n      } else if (expressionObject.type === Expression.ExpressionType.Required || expressionObject.type === Expression.ExpressionType.Validate || expressionObject.type === Expression.ExpressionType.Readonly || expressionObject.type === Expression.ExpressionType.Visible) {\r\n        const effectOptions = { message: expressionObject.message, expressionId: expressionObject.id };\r\n        effector.effect(expressionObject.path, expressionObject.result, effectOptions);\r\n      }\r\n    } else {\r\n      throw new Error('not supported！');\r\n    }\r\n  }\r\n\r\n  //#endregion\r\n\r\n  //#region util\r\n\r\n  protected isValidateOrRequiredExpression(expressionObject: Expression.ExpressionObject) {\r\n    return expressionObject && (expressionObject.type === Expression.ExpressionType.Validate || expressionObject.type === Expression.ExpressionType.Required);\r\n  }\r\n  /**\r\n   * 以事件参数为依据构建实体路径\r\n   * @param event event\r\n   * @returns \r\n   */\r\n  protected getEntityPathFromEvent(event: Expression.EventArgs): string[] {\r\n    event = JSON.parse(JSON.stringify(event));\r\n    if (!event || !event.path || event.path.length < 1) {\r\n      return [];\r\n    }\r\n    const paths = event.path;\r\n    return this.getEntityPath(paths);\r\n  }\r\n  /**\r\n   * 获取事件路径中的实体路径\r\n   * @param path path\r\n   * @returns \r\n   */\r\n  protected getEntityPath(path: string[]): string[] {\r\n    const paths = path.filter((value: string, index: number) => {\r\n      if (index % 2 === 0 && value.includes(':')) {\r\n        return false;\r\n      } else {\r\n        return true;\r\n      }\r\n    });\r\n    return paths;\r\n  }\r\n  /**\r\n   * 构造实体路径\r\n   * @param path path\r\n   * @description 删除路径中的id字段\r\n   * @returns \r\n   */\r\n  protected buildEntityPath(path: string[]): string[] {\r\n    const paths = path.filter((value: string, index: number) => {\r\n      if (index % 2 === 0 && value.includes(':')) {\r\n        return false;\r\n      } else {\r\n        return true;\r\n      }\r\n    });\r\n    return paths;\r\n  }\r\n  /**\r\n   * 清理事件路径中的id主键标识\r\n   * @param path path\r\n   * @returns \r\n   */\r\n  protected cleanEventPath(path: string[]) {\r\n    path = path.filter(p => {\r\n      if (p && p !== ':') {\r\n        return true;\r\n      } else {\r\n        return false;\r\n      }\r\n    });\r\n    return path.map((item: string) => {\r\n      if (item.includes(':')) {\r\n        return item.split(':')[1];\r\n      } else {\r\n        return item;\r\n      }\r\n    });\r\n  }\r\n  /**\r\n   * 获取子表事件行\r\n   * @param paths \r\n   * @param event \r\n   * @returns \r\n   */\r\n  protected getCurrentRowByPaths(paths: string[]): null | { [prop: string]: any } {\r\n    let result = null;\r\n    const bindingList: BindingList = this.bindingData.getValue(paths) as BindingList;\r\n    if (bindingList && bindingList.length > 0) {\r\n      let primaryValue = bindingList.currentItem.primaryKeyValue || null;\r\n      if (primaryValue) {\r\n        const bindingObject = bindingList.findById(primaryValue);\r\n        if (bindingObject) {\r\n          result = bindingObject.toJSON();\r\n        }\r\n      }\r\n    }\r\n    return result;\r\n  }\r\n  /**\r\n   * 获取事件路径中指定子表的事件行\r\n   * @param path \r\n   * @param tableCode \r\n   * @returns \r\n   */\r\n  protected getEventId(path: string[], tableCode: string) {\r\n    if (!path || path.length < 1) {\r\n      throw new Error('invalid path!');\r\n    }\r\n    const propertyIndex = path.findIndex(p => p === tableCode);\r\n    if (propertyIndex === -1) {\r\n      return null;\r\n    }\r\n    const idIndex = propertyIndex + 1;\r\n    if (idIndex > path.length - 1) {\r\n      throw new Error('invalid propertyName or path');\r\n    }\r\n    const id = path[idIndex];\r\n    if (id.indexOf(':') === -1) {\r\n      throw new Error('compute error.');\r\n    }\r\n    return id.split(':')[1];\r\n  }\r\n  //#endregion\r\n\r\n\r\n  //#region  构造上下文\r\n\r\n  /**\r\n   * 构造变量上下文\r\n   * @param event \r\n   * @returns \r\n   */\r\n  public buildStateContext(event: Expression.EventArgs) {\r\n    const ns = event.ns;\r\n    const appContext = this.injector.get<AppContext>(AppContext, null);\r\n    const frameContexts = appContext.frameContextManager.getFrameContextsByNamespace(ns);\r\n    const result = {};\r\n    if (frameContexts && frameContexts.length > 0) {\r\n      const anonymousFrameContext = frameContexts[0];\r\n      const rootFrameContext = anonymousFrameContext.getVirtualRootFrameContext();\r\n      if (rootFrameContext) {\r\n        const uiState = rootFrameContext.viewModel.uiState;\r\n        const propertyNames = Object.getOwnPropertyNames(uiState) || [];\r\n        propertyNames.forEach((prop: string) => {\r\n          if (prop.match(/^[a-zA-Z0-9_\\$]+$/g) !== null) {\r\n            result[prop] = uiState[prop];\r\n          }\r\n        });\r\n      }\r\n    }\r\n    return result;\r\n  }\r\n  /**\r\n   * 获取事件实体\r\n   * @param event \r\n   * @returns \r\n   */\r\n  public buildEntityContext(event: Expression.EventArgs, expressionObject: Expression.ExpressionObject, currentRows?: Array<Expression.ICurrentRow>) {\r\n    const expressionBindingType = expressionObject.bindingType;\r\n    if (expressionBindingType === Expression.ExpressionBindingType.Field) {\r\n      const entityTypeInfo = this.repository.entityTypeInfo;\r\n      const childrenEntityPaths = [];\r\n      ExpressionUtil.getChildrenEntityPaths(entityTypeInfo, childrenEntityPaths);\r\n      // 获取当前行\r\n      const row = currentRows && currentRows.find(row => row.bindingPath === '' || row.bindingPath === '/') || null;\r\n      const primaryValue = row && row.primaryValue || this.bindingData.list.currentId;\r\n      let entity = this.bindingData.list.findById(primaryValue);\r\n      if (!entity) {\r\n        return null;\r\n      }\r\n      const object = entity.toJSON();\r\n      object['__type__'] = 'Entity';\r\n      if (!childrenEntityPaths || childrenEntityPaths.length < 1) {\r\n        return object;\r\n      }\r\n      childrenEntityPaths.sort((v1, v2) => v1.length - v2.length);\r\n      // 找到所有子表\r\n      childrenEntityPaths.forEach((paths: string[]) => {\r\n        const bindingList = this.bindingData.getValue(paths) as BindingList;\r\n        let currentRowId = bindingList.currentId;\r\n        const propertyName = paths[paths.length - 1];\r\n        // parent 为entity或entitylist或null\r\n        const parent = paths.slice(0, paths.length - 1).reduce((object: any, path: string) => {\r\n          return object && object[path] || null;\r\n        }, object);\r\n        if (!parent) {\r\n          return;\r\n        }\r\n        const data = parent;\r\n        let node: any = null;\r\n        if (!currentRowId) {\r\n          // 当前表没有数据\r\n          node = { __items__: [], __type__: 'List' };\r\n          node.length = () => node.__items__.length;\r\n        } else {\r\n          // 纠正当前行\r\n          if (currentRows && currentRows.length > 0) {\r\n            // 是否指定了当前行\r\n            const userAssignCurrentRow = currentRows.find(row => {\r\n              const bindingPaths = row.bindingPath.split('/').filter(p => p);\r\n              return bindingPaths.join('/') === paths.join('/');\r\n            });\r\n            if (userAssignCurrentRow) {\r\n              currentRowId = userAssignCurrentRow.primaryValue;\r\n            }\r\n          }\r\n          // 子表当前行\r\n          const row = bindingList.findById(currentRowId);\r\n          // 找到子表当前行的上级\r\n          const list = parent[propertyName];\r\n          node = { __items__: [], ...row && row.toJSON() || {}, __type__: 'List' };\r\n          node.length = () => node.__items__.length;\r\n\r\n          if (list && Array.isArray(list)) {\r\n            node.__items__ = [].concat(list);\r\n          }\r\n        }\r\n        data[propertyName] = node;\r\n      });\r\n      return object;\r\n    } else if (expressionBindingType === Expression.ExpressionBindingType.State) {\r\n      // todo: 支持状态表达式\r\n    } else {\r\n      return null;\r\n    }\r\n  }\r\n  /**\r\n   * 构造表达式计算上下文\r\n   * @param expressionObject 表达式\r\n   * @param event 事件\r\n   * @param entityContext 实体上下文\r\n   * @param currentRows 当前行\r\n   * @returns \r\n   */\r\n  public buildContext(expressionObject: Expression.ExpressionObject, event: Expression.EventArgs, entityContext?: any, currentRows?: Array<Expression.ICurrentRow>): any {\r\n    let context = [];\r\n    if (entityContext) {\r\n      context.push(entityContext);\r\n    } else {\r\n      const entity = this.buildEntityContext(event, expressionObject, currentRows);\r\n      context.push(entity);\r\n    }\r\n    const stateContext = this.buildStateContext(event);\r\n    const entityCode = this.entityOriginalNodeCode;\r\n    let entity = null;\r\n    if (context.length === 1) {\r\n      entity = context.pop();\r\n    } else {\r\n      entity = context[0];\r\n      if (!entity['__type__']) {\r\n        entity['__type__'] = 'Entity';\r\n      }\r\n      entity['__items__'] = context;\r\n    }\r\n    const translate = this.injector.get<Translate>(TranslateToken, null);\r\n    return {\r\n      [entityCode]: entity,\r\n      ...stateContext,\r\n      BigNumber,\r\n      frameContext: this.frameContext,\r\n      bindingData: this.bindingData,\r\n      repository: this.repository,\r\n      CurrentLanguage: translate.getCurrentLanguage() || 'zh-CHS'\r\n    };\r\n  }\r\n  //#endregion\r\n  /**\r\n   * 构造副作用路径\r\n   * @param event \r\n   * @param expressionObject \r\n   * @returns \r\n   */\r\n  protected buildEffectPath(event: Expression.EventArgs, expressionObject: Expression.ExpressionObject): string[] {\r\n    const expressionPaths = expressionObject.path.split('/').filter(p => p);\r\n    const primaryValue = event.path[0] && event.path[0].split(':')[1];\r\n    if (!primaryValue) {\r\n      throw new Error('Invalid event path!');\r\n    }\r\n    if (expressionPaths.length === 1) {\r\n      // 主表简单字段\r\n      return [primaryValue, expressionPaths.pop()];\r\n    } else {\r\n      const result = [primaryValue];\r\n      for (let index = 0; index < expressionPaths.length; index++) {\r\n        const propertyName = expressionPaths[index];\r\n        result.push(propertyName);\r\n        const currentPaths = expressionPaths.slice(0, index + 1);\r\n        const propertyInfo: DataPropInfo = this.repository.entityTypeInfo.getPropInfoByPath(currentPaths);\r\n        if (propertyInfo.group === 'List') {\r\n          let id = this.getEventId(event.path, propertyInfo.name) || null;\r\n          // 事件和表达式不是同一个表\r\n          if (!id) {\r\n            const bindingList = this.bindingData.getValue(currentPaths) as BindingList;\r\n            if (bindingList) {\r\n              id = bindingList.currentId;\r\n            }\r\n          }\r\n          result.push(id);\r\n        }\r\n      }\r\n      return result;\r\n    }\r\n  }\r\n\r\n  //#region 辅助方法\r\n  protected getPathInfo(path: string): { path: string, propertyName: string, paths: string[], propertyNames: string[] } {\r\n    const paths = path.split('/').filter(p => p);\r\n    // 获取最大实体层级，其余为属性（简单属性、udt、关联、关联嵌套关联）\r\n    const entityPath = ExpressionUtil.getAvailableChildrenPathsFromEntityPaths(paths, this.repository.entityTypeInfo);\r\n    const propertyName = paths.slice(entityPath.length).join('/');\r\n    return { path: entityPath.join('/'), propertyName, paths: entityPath, propertyNames: propertyName.split('/').filter(p => p) };\r\n  }\r\n  /**\r\n   * get table paths from event paths\r\n   * @param paths event paths\r\n   * @returns \r\n   */\r\n  protected getTablePathsFromEventPaths(paths: string[]) {\r\n    paths = this.getEntityPath(paths);\r\n    const entityPaths = ExpressionUtil.getAvailableChildrenPathsFromEntityPaths(paths, this.repository.entityTypeInfo);\r\n    return entityPaths;\r\n  }\r\n  /**\r\n   * get property paths from event paths\r\n   * @param paths event paths\r\n   * @returns \r\n   */\r\n  protected getPropertyPathsFromEventPaths(paths: string[]) {\r\n    paths = this.getEntityPath(paths);\r\n    const tablePaths = ExpressionUtil.getAvailableChildrenPathsFromEntityPaths(paths, this.repository.entityTypeInfo);\r\n    return paths.slice(tablePaths.length);\r\n  }\r\n  /**\r\n   * 分析事件和表达式的关系\r\n   */\r\n  protected analysis(event: Expression.EventArgs, expressionObject: Expression.ExpressionObject) {\r\n    const expressionPathInfo = this.getPathInfo(expressionObject.path);\r\n    const eventPaths = this.getEntityPath(event.path.slice(0));\r\n    const eventPathInfo = this.getPathInfo(eventPaths.join('/'));\r\n    if (!expressionPathInfo || !eventPathInfo) {\r\n      console.warn(`表达式路径或事件路径错误，获取路径信息失败。`);\r\n      return null;\r\n    }\r\n    const expressionTablePaths = expressionPathInfo.path.split('/').filter(p => p);\r\n    const expressionPropertyNames = expressionPathInfo.propertyName.split('/').filter(p => p);\r\n    const eventTablePaths = eventPathInfo.path.split('/').filter(p => p);\r\n    const eventPropertyNames = eventPathInfo.propertyName.split('/').filter(p => p);\r\n    const result = {\r\n      distance: undefined,\r\n      eventFromChildren: undefined,\r\n      eventFromParent: undefined,\r\n      expressionTablePaths,\r\n      expressionPropertyNames,\r\n      eventTablePaths,\r\n      eventPropertyNames,\r\n      isSameTable: false\r\n    };\r\n    result.distance = Math.abs(expressionTablePaths.length - eventTablePaths.length);\r\n    if (result.distance === 1) {\r\n      result.eventFromChildren = eventTablePaths.length > expressionTablePaths.length && eventTablePaths.join('/').startsWith(expressionTablePaths.join('/'));\r\n      result.eventFromParent = eventTablePaths.length < expressionTablePaths.length && expressionTablePaths.join('/').startsWith(eventTablePaths.join('/'));\r\n    }\r\n    result.isSameTable = expressionTablePaths.join('/') === eventTablePaths.join('/');\r\n    return result;\r\n  }\r\n\r\n  protected buildCurrentRows(tablePaths: string[], fullPaths: string[]) {\r\n    const currentRows = new Array<Expression.ICurrentRow>();\r\n    if (!tablePaths || tablePaths.length < 1) {\r\n      currentRows.push({\r\n        bindingPath: '/',\r\n        primaryValue: fullPaths[0]\r\n      });\r\n    } else {\r\n      const paths = [];\r\n      tablePaths.forEach((path: string, index: number) => {\r\n        if (index === 0) {\r\n          currentRows.push({\r\n            bindingPath: '/',\r\n            primaryValue: fullPaths[0]\r\n          });\r\n        }\r\n        paths.push(path);\r\n        const primaryValue = fullPaths[index * 2 + 2];\r\n        currentRows.push({\r\n          bindingPath: paths.join('/'),\r\n          primaryValue: primaryValue\r\n        });\r\n      });\r\n    }\r\n    return currentRows;\r\n  }\r\n  protected convertBooleanTypeExpressionResult(expressionObject: Expression.ExpressionObject, result: any) {\r\n    if (this.isBooleanTypeExpression(expressionObject)) {\r\n      return result === true ? true : false;\r\n    } else {\r\n      return result;\r\n    }\r\n  }\r\n  protected isBooleanTypeExpression(expressionObject: Expression.ExpressionObject): boolean {\r\n    return this.isReadonlyExpression(expressionObject) || this.isVisibleExpression(expressionObject) || this.isValidateExpression(expressionObject) || this.isRequiredExpression(expressionObject) || this.isDependencyExpression(expressionObject);\r\n  }\r\n  private isReadonlyExpression(expressionObject: Expression.ExpressionObject): boolean {\r\n    return expressionObject && expressionObject.type === Expression.ExpressionType.Readonly || false;\r\n  }\r\n  private isVisibleExpression(expressionObject: Expression.ExpressionObject): boolean {\r\n    return expressionObject && expressionObject.type === Expression.ExpressionType.Visible;\r\n  }\r\n  private isValidateExpression(expressionObject: Expression.ExpressionObject): boolean {\r\n    return expressionObject && expressionObject.type === Expression.ExpressionType.Validate;\r\n  }\r\n  private isRequiredExpression(expressionObject: Expression.ExpressionObject): boolean {\r\n    return expressionObject && expressionObject.type === Expression.ExpressionType.Required;\r\n  }\r\n  private isDependencyExpression(expressionObject: Expression.ExpressionObject): boolean {\r\n    return expressionObject && expressionObject.type === Expression.ExpressionType.Dependency;\r\n  }\r\n  //#endregion\r\n}","import { Injectable } from '@angular/core';\r\nimport { DataPropInfo } from '../core';\r\nimport { Entity, EntityList } from '../entity/index';\r\nimport { Expression } from '../expression/index';\r\nimport { ENTITY_TEMPLATE } from '../resolver/index';\r\nimport { EventHandler } from './event_handler';\r\n/**\r\n * 实体值变化处理器\r\n */\r\n@Injectable()\r\nexport class EntityValueChangedEventHandler extends EventHandler {\r\n  /**\r\n   * 获取相关表达式\r\n   * @param event event\r\n   */\r\n  public filter(event: Expression.EventArgs): Expression.ExpressionObject[] {\r\n    return null;\r\n  }\r\n  /**\r\n   * 发布事件\r\n   * @param event event\r\n   */\r\n  public dispatch(event: Expression.EventArgs) {\r\n  }\r\n  /**\r\n   * 获取子表事件行\r\n   * @param paths \r\n   * @param event \r\n   * @returns \r\n   */\r\n  public getCurrentRowByEvent(paths: string[], event: Expression.EventArgs): null | { [prop: string]: any } {\r\n    return this.getCurrentRowByPaths(paths);\r\n  }\r\n}","import { Expression } from \"../expression/index\";\r\n\r\nexport class EffectorManager {\r\n  /**\r\n   * 批量副作用\r\n   * @param effector effector\r\n   * @param expressionObject 表达式\r\n   * @param paths 作用路径\r\n   * @returns \r\n   */\r\n  public static effect(effector: Expression.Effector, expressionObject: Expression.ExpressionObject, paths: any[][]) {\r\n    if (!paths || paths.length < 1) {\r\n      return;\r\n    }\r\n    paths.forEach((path: any[]) => {\r\n      const effectOptions: Expression.EffectOptions = { path, message: expressionObject.message, expressionId: expressionObject.id };\r\n      effector.effect(expressionObject.path, expressionObject.result, effectOptions);\r\n    });\r\n  }\r\n}","import { Injectable } from \"@angular/core\";\r\nimport { EffectorManager } from \"../effector/effector_manager\";\r\nimport { Entity, EntityList } from \"../entity/index\";\r\nimport { Expression } from \"../expression/index\";\r\nimport { STATE_TEMPLATE } from \"../resolver/index\";\r\nimport { EventHandler } from \"./event_handler\";\r\n\r\n@Injectable()\r\nexport class StateValueChangedEventHandler extends EventHandler {\r\n\r\n  /**\r\n   * 获取相关表达式\r\n   * @param event event\r\n   */\r\n  public filter(event: Expression.EventArgs) {\r\n    if (this.expressionObjects && this.expressionObjects.length > 0) {\r\n      return this.expressionObjects.filter((expressionObject: Expression.ExpressionObject) => {\r\n        const deps = expressionObject.deps;\r\n        if (!deps || deps.length < 1 || event.ns !== expressionObject.ns) {\r\n          return false;\r\n        }\r\n        const changePaths = this.cleanEventPath(event.path);\r\n        changePaths.splice(0, 0, STATE_TEMPLATE);\r\n        const eventPath = changePaths.join('/');\r\n        if (deps.includes(eventPath)) {\r\n          return true;\r\n        } else {\r\n          return false;\r\n        }\r\n      });\r\n    }\r\n    return null;\r\n  }\r\n  /**\r\n   * 发布事件\r\n   * @param event event\r\n   */\r\n  public dispatch(event: Expression.EventArgs) {\r\n    const expressions = this.filter(event);\r\n    if (expressions && expressions.length > 0) {\r\n      expressions.forEach((expressionObject: Expression.ExpressionObject) => {\r\n        // const entityContext = this.buildEntityContext(event, expressionObject);\r\n        const context = this.buildContext(expressionObject, event);\r\n        const result = this.perform(expressionObject, context);\r\n        if (result === undefined && !this.isValidateOrRequiredExpression(expressionObject)) {\r\n          return;\r\n        }\r\n        expressionObject.result = this.convertBooleanTypeExpressionResult(expressionObject, result);;\r\n        if (expressionObject.id) {\r\n          this.expressionResult.set(expressionObject.id, expressionObject.result);\r\n        }\r\n        this.effect(event, expressionObject);\r\n      });\r\n    }\r\n  }\r\n  /**\r\n   * 副作用\r\n   * @param event event\r\n   * @param expressionObject expressionObject\r\n   */\r\n  public effect(event: Expression.EventArgs, expressionObject: Expression.ExpressionObject): void {\r\n    const effector = this.effectorFactory.getEffector(expressionObject);\r\n    const bindingType = expressionObject.bindingType;\r\n    if (!effector) {\r\n      return;\r\n    }\r\n    if (bindingType === Expression.ExpressionBindingType.State) {\r\n      // 如果表达式作用于uistate\r\n      effector.effect(expressionObject.path, expressionObject.result, { message: expressionObject.message });\r\n    } else if (bindingType === Expression.ExpressionBindingType.Field) {\r\n      // 表达式作用于实体属性\r\n      const expressionPathInfo = this.getPathInfo(expressionObject.path);\r\n      const bindingPaths = expressionPathInfo.paths;\r\n      const entities = this.repository.entityCollection.getAllEntities();\r\n      if (!entities || entities.length < 1 || expressionObject.type === Expression.ExpressionType.Visible) {\r\n        effector.effect(expressionObject.path, expressionObject.result, { message: expressionObject.message });\r\n      } else {\r\n        this.effectRows(entities, bindingPaths, expressionPathInfo.propertyNames, (currentRows: Expression.ICurrentRow[], paths: string[]) => {\r\n          this.output(event, expressionObject, currentRows, effector, [paths])\r\n        });\r\n      }\r\n    }\r\n  }\r\n  public output(event: Expression.EventArgs, expressionObject: Expression.ExpressionObject, currentRows: Expression.ICurrentRow[], effector: Expression.Effector, paths: any[][]) {\r\n    const context = this.buildContext(expressionObject, event, null, currentRows);\r\n    const value = this.perform(expressionObject, context);\r\n    if (value === undefined) {\r\n      return;\r\n    }\r\n    expressionObject.result = value;\r\n    if (expressionObject.id) {\r\n      this.expressionResult.set(expressionObject.id, expressionObject.result);\r\n    }\r\n    EffectorManager.effect(effector, expressionObject, paths);\r\n  }\r\n  private effectRows(entities: Entity[], bindingPaths: string[], propertyNames: string[], callback: (currentRows: Expression.ICurrentRow[], paths: string[]) => void, currentRows: Expression.ICurrentRow[] = [], prevPaths: string[] = [], paths: string[] = []) {\r\n    if (!bindingPaths || bindingPaths.length < 1) {\r\n      entities.forEach((entity: Entity) => {\r\n        if (!entity || !entity.primaryValue) {\r\n          return;\r\n        }\r\n        const currentPaths = paths.concat([entity.primaryValue]).concat(propertyNames);\r\n        const currentCurrentRows = currentRows.concat([{ bindingPath: prevPaths.join('/') || '/', primaryValue: entity.primaryValue }]);\r\n        callback(currentCurrentRows, currentPaths);\r\n      });\r\n      currentRows.length = 0;\r\n      paths.length = 0;\r\n    } else {\r\n      let flag = false;\r\n      let nextPrevPaths = prevPaths;\r\n      entities.forEach((entity: Entity) => {\r\n        const prop = bindingPaths[0];\r\n        const entityList = entity[prop] as EntityList<Entity>;\r\n        if (!entityList || entityList.count() < 1) {\r\n          // 下级表没有数据\r\n          return;\r\n        }\r\n        currentRows.push({ bindingPath: prevPaths.join('/') || '/', primaryValue: entity.primaryValue });\r\n        paths.push(entity.primaryValue);\r\n        paths.push(prop);\r\n        if (flag === false) {\r\n          flag = true;\r\n          nextPrevPaths.push(prop);\r\n        }\r\n        const nextBindingPaths = bindingPaths.slice(1);\r\n        this.effectRows(entityList.items, nextBindingPaths, propertyNames, callback, currentRows, nextPrevPaths, paths);\r\n      });\r\n    }\r\n  }\r\n  /**\r\n   * 获取子表事件行\r\n   * @param paths \r\n   * @param event \r\n   * @returns \r\n   */\r\n  public getCurrentRowByEvent(paths: string[], event: Expression.EventArgs): { [prop: string]: any; } {\r\n    return this.getCurrentRowByPaths(paths);\r\n  }\r\n}","import { Injectable } from \"@angular/core\";\r\nimport { Entity } from \"../entity/index\";\r\nimport { Expression } from \"../expression\";\r\nimport { ENTITY_TEMPLATE } from \"../resolver/index\";\r\nimport { EventHandler } from \"./event_handler\";\r\n\r\n@Injectable()\r\nexport class RepositoryAddEntityEventHandler extends EventHandler {\r\n  /**\r\n   * 获取相关表达式\r\n   * @param event event\r\n   * @description 不支持主表直接依赖子表属性的情况，只能聚合子表的字段\r\n   */\r\n  public filter(event: Expression.EventArgs) {\r\n    return null;\r\n  }\r\n  /**\r\n   * 发布事件\r\n   * @param event event\r\n   */\r\n  public dispatch(event: Expression.EventArgs) {\r\n    const expressions = this.filter(event);\r\n    if (expressions && expressions.length > 0) {\r\n      expressions.forEach((expressionObject: Expression.ExpressionObject) => {\r\n        const entityContext = this.buildEntityContext(event,expressionObject);\r\n        const context = this.buildContext(expressionObject, event, entityContext);\r\n        const result = this.perform(expressionObject, context);\r\n        if (result === undefined&& !this.isValidateOrRequiredExpression(expressionObject)) {\r\n          return;\r\n        }\r\n        expressionObject.result = result;\r\n        if (expressionObject.id) {\r\n          this.expressionResult.set(expressionObject.id, expressionObject.result);\r\n        }\r\n        this.effect(event, expressionObject);\r\n      });\r\n    }\r\n  }\r\n  /**\r\n   * 获取子表事件行\r\n   * @param paths \r\n   * @param event \r\n   * @returns \r\n   */\r\n  public getCurrentRowByEvent(paths: string[], event: Expression.EventArgs): null | { [prop: string]: any } {\r\n    return this.getCurrentRowByPaths(paths);\r\n  }\r\n}","import { Injectable } from \"@angular/core\";\r\nimport { BindingList } from \"../binding-data/index\";\r\nimport { Expression } from \"../expression\";\r\nimport { ENTITY_TEMPLATE } from \"../resolver/index\";\r\nimport { ExpressionUtil } from \"../utils/expression_util\";\r\nimport { EventHandler } from \"./event_handler\";\r\n\r\n@Injectable()\r\nexport class RepositoryRemoveEntityEventHandler extends EventHandler {\r\n  /**\r\n   * 获取相关表达式\r\n   * @param event event\r\n   */\r\n  public filter(event: Expression.EventArgs) {\r\n    return null;\r\n  }\r\n  /**\r\n   * 发布事件\r\n   * @param event event\r\n   */\r\n  public dispatch(event: Expression.EventArgs) {\r\n  }\r\n}","import { EventHandler } from \"./event_handler\";\r\nimport { Expression } from \"../expression/index\";\r\nimport { Injectable } from \"@angular/core\";\r\n@Injectable()\r\nexport class RepositoryLoadEventHandler extends EventHandler {\r\n  public filter(event: Expression.EventArgs) {\r\n    return null;\r\n  }\r\n  /**\r\n   * 发布事件\r\n   * @param event event\r\n   */\r\n  public dispatch(event: Expression.EventArgs) {\r\n    const expressions = this.filter(event);\r\n    if (expressions && expressions.length > 0) {\r\n      expressions.forEach((expressionObject: Expression.ExpressionObject) => {\r\n        const entityContext = this.buildEntityContext(event,expressionObject);\r\n        const context = this.buildContext(expressionObject, event, entityContext);\r\n        const result = this.perform(expressionObject, context);\r\n        if (result === undefined&& !this.isValidateOrRequiredExpression(expressionObject)) {\r\n          return;\r\n        }\r\n        expressionObject.result = result;\r\n        if (expressionObject.id) {\r\n          this.expressionResult.set(expressionObject.id, expressionObject.result);\r\n        } else {\r\n        }\r\n        this.effect(event, expressionObject);\r\n      });\r\n    }\r\n  }\r\n  /**\r\n   * 获取子表事件行\r\n   * @param paths \r\n   * @param event \r\n   * @returns \r\n   */\r\n  public getCurrentRowByEvent(paths: string[], event: Expression.EventArgs): null | { [prop: string]: any } {\r\n    return this.getCurrentRowByPaths(paths);\r\n  }\r\n}","import { Injectable } from \"@angular/core\";\r\nimport { BindingList } from \"../binding-data/index\";\r\nimport { Expression } from \"../expression/index\";\r\nimport { ENTITY_TEMPLATE } from \"../resolver/index\";\r\nimport { ExpressionUtil } from \"../utils/expression_util\";\r\nimport { EventHandler } from \"./event_handler\";\r\n\r\n@Injectable()\r\nexport class EntityUpdateEventHandler extends EventHandler {\r\n  public filter(event: Expression.EventArgs) {\r\n    return this.expressionObjects.filter((expressionObject: Expression.ExpressionObject) => {\r\n      // 重新加载实体时不计算计算表达式，只处理只读、必填等\r\n      if (expressionObject.ns !== event.ns || !expressionObject.deps || expressionObject.deps.length === 0 || expressionObject.type === Expression.ExpressionType.Compute || expressionObject.type === Expression.ExpressionType.Dependency || expressionObject.type === Expression.ExpressionType.DataPicking) {\r\n        return false;\r\n      }\r\n      const result = this.analysis(event, expressionObject);\r\n      if (!result) {\r\n        return false;\r\n      }\r\n      // 必须是主表表达式\r\n      if (result.expressionTablePaths.length !== 0) {\r\n        return false;\r\n      }\r\n      const index = expressionObject.deps.findIndex((dep: string) => {\r\n        if (!dep.startsWith(ENTITY_TEMPLATE)) {\r\n          return false;\r\n        }\r\n        const deps = dep.split(Expression.DEPENDENCY_SPLITER).filter(p => p).slice(1);\r\n        const depPathInfo = this.getPathInfo(deps.join('/'));\r\n        if (!depPathInfo) {\r\n          return false;\r\n        }\r\n        if (depPathInfo.paths.length !== 0) {\r\n          return false;\r\n        }\r\n        return true;\r\n      });\r\n      return index === -1 ? false : true;\r\n    });\r\n  }\r\n  /**\r\n   * 发布事件\r\n   * @param event event\r\n   */\r\n  public dispatch(event: Expression.EventArgs) {\r\n    const expressions = this.filter(event);\r\n    if (expressions && expressions.length > 0) {\r\n      expressions.forEach((expressionObject: Expression.ExpressionObject) => {\r\n        const entityContext = this.buildEntityContext(event, expressionObject);\r\n        const context = this.buildContext(expressionObject, event, entityContext);\r\n        const result = this.perform(expressionObject, context);\r\n        if (result === undefined && !this.isValidateOrRequiredExpression(expressionObject)) {\r\n          return;\r\n        }\r\n        expressionObject.result = this.convertBooleanTypeExpressionResult(expressionObject, result);;\r\n        if (expressionObject.id) {\r\n          this.expressionResult.set(expressionObject.id, expressionObject.result);\r\n        } else {\r\n        }\r\n        this.effect(event, expressionObject);\r\n      });\r\n    }\r\n  }\r\n  public getCurrentRowByEvent(paths: string[], event: Expression.EventArgs) {\r\n    let result = null;\r\n    const bindingList: BindingList = this.bindingData.getValue(paths) as BindingList;\r\n    const eventEntityPath = this.getEntityPath(event.path);\r\n    if (bindingList && bindingList.length > 0) {\r\n      let primaryValue = bindingList.currentItem.primaryKeyValue || null;\r\n      // 使用事件中的主键\r\n      const childrenPaths = ExpressionUtil.getAvailableChildrenPathsFromEntityPaths(eventEntityPath, this.repository.entityTypeInfo);\r\n      if (childrenPaths && childrenPaths.toString() === paths.toString()) {\r\n        // 发生值变化的数据位于要获取当前行的子表中，此时事件行应该是发生值变化的数据id，而不是当前行id\r\n        primaryValue = event.id || null;\r\n        if (!primaryValue) {\r\n          primaryValue = this.getEventId(event.path, paths[paths.length - 1]);\r\n        }\r\n      }\r\n      if (primaryValue) {\r\n        const bindingObject = bindingList.findById(primaryValue);\r\n        if (bindingObject) {\r\n          result = bindingObject.toJSON();\r\n        }\r\n      }\r\n    }\r\n    return result;\r\n  }\r\n}","import { Injectable } from \"@angular/core\";\r\nimport { BindingList, BindingObject } from \"../binding-data/index\";\r\nimport { EffectorManager } from \"../effector/effector_manager\";\r\nimport { Expression } from \"../expression/index\";\r\nimport { ENTITY_TEMPLATE, STATE_TEMPLATE } from \"../resolver/index\";\r\nimport { EventHandler } from \"./event_handler\";\r\n\r\n@Injectable()\r\nexport class BindingDataAppendObjectEventHandler extends EventHandler {\r\n  /**\r\n   * 过滤出需要计算的表达式\r\n   * @param event event\r\n   * @returns \r\n   */\r\n  public filter(event: Expression.EventArgs): Expression.ExpressionObject[] {\r\n\r\n    if (this.expressionObjects && this.expressionObjects.length > 0) {\r\n      // const fullEventPath = event.path || [];\r\n      // event.path like [\"id:7dd77e50-ebed-4639-b483-d12004603640\", \"formEEUR1E1s\"] or undefined or []\r\n      // eventTablePaths like [] or [\"子表s\"]\r\n\r\n      // 找到聚合相关表达式(依赖新增表的表达式),聚合的前提是表达式path位于事件路径的上方\r\n      // 给实体属性或vo变量设置了聚合相关的表达式，此时表达式依赖中路径到子表属性\r\n      const groupExpressions = this.expressionObjects.filter((expressionObject: Expression.ExpressionObject) => {\r\n        if (expressionObject.ns !== event.ns || !expressionObject.deps || expressionObject.deps.length < 1) {\r\n          return false;\r\n        }\r\n        const eventTablePaths = this.buildEntityPath(event.path);\r\n        const info = this.analysis(event, expressionObject);\r\n        if (!info) {\r\n          return false;\r\n        }\r\n        // const eventEntityPath = this.buildEntityPath(event.path);\r\n        // 主表新增\r\n        if (eventTablePaths.length === 0) {\r\n          if (expressionObject.bindingType === Expression.ExpressionBindingType.Field) {\r\n            // 认为主表新增时不需要处理聚合函数\r\n            return false;\r\n          }\r\n        }\r\n        // 从表或从从表新增\r\n        eventTablePaths.splice(0, 0, ENTITY_TEMPLATE);\r\n        // eventEntityPath like ['ENTITY~','formEEUR1E1s'] // 从表新增\r\n        // deps like ['ENTITY~/formEEUR1E1s/udt/udt_field','ENTITY~/formEEUR1E1s/ref/ref_udt/ref_udt_field']\r\n        // 仅处理上级表达式\r\n        if (info.eventTablePaths.length - 1 !== info.expressionTablePaths.length) {\r\n          return false;\r\n        }\r\n        // 不支持跨表\r\n        if (!info.eventTablePaths.join(Expression.DEPENDENCY_SPLITER).startsWith(info.expressionTablePaths.join(Expression.DEPENDENCY_SPLITER))) {\r\n          return false;\r\n        }\r\n        const index = expressionObject.deps.findIndex((dep: string) => {\r\n          // 依赖\r\n          if (!dep.startsWith(eventTablePaths.join(Expression.DEPENDENCY_SPLITER))) {\r\n            return false;\r\n          }\r\n          const deps = dep.split(Expression.DEPENDENCY_SPLITER).filter(p => p).slice(1);\r\n          const dependPathInfo = this.getPathInfo(deps.join(Expression.DEPENDENCY_SPLITER));\r\n          if (dependPathInfo && dependPathInfo.paths.join(Expression.DEPENDENCY_SPLITER) === info.eventTablePaths.join(Expression.DEPENDENCY_SPLITER)) {\r\n            return true;\r\n          }\r\n          return false;\r\n        });\r\n        return index === -1 ? false : true;\r\n      });\r\n      const eventTablePaths = this.buildEntityPath(event.path);\r\n      // 事件表中表达式（事件表本身的表达式）\r\n      const relativeExpressions = this.expressionObjects.filter((expressionObject: Expression.ExpressionObject) => {\r\n        // expressionObject.bindingType !== Expression.ExpressionBindingType.Field 暂不支持State表达式\r\n        if (expressionObject.ns !== event.ns) {\r\n          return false;\r\n        }\r\n        const expressionPathInfo = this.getPathInfo(expressionObject.path);\r\n        // 过滤掉非当前表的表达式\r\n        if (expressionPathInfo.paths.join(Expression.DEPENDENCY_SPLITER) !== eventTablePaths.join(Expression.DEPENDENCY_SPLITER)) {\r\n          return false;\r\n        }\r\n        // 没有依赖的表达式\r\n        if (!expressionObject.deps || expressionObject.deps.length < 1) {\r\n          return true;\r\n        }\r\n        // 仅依赖State\r\n        const onlyDependOnState = expressionObject.deps.every((dep: string) => dep.startsWith(STATE_TEMPLATE));\r\n        // 仅依赖当前表或上级表\r\n        // const onlyDependOnCurrentTable = expressionObject.deps.every((dep: string) => {\r\n        //   if (!dep.startsWith(ENTITY_TEMPLATE)) {\r\n        //     return false;\r\n        //   }\r\n        //   const deps = dep.split(Expression.DEPENDENCY_SPLITER).slice(1);\r\n        //   const dependPathInfo = this.getPathInfo(deps.join(Expression.DEPENDENCY_SPLITER));\r\n        //   return dependPathInfo.paths.join(Expression.DEPENDENCY_SPLITER) === eventTablePaths.join(Expression.DEPENDENCY_SPLITER) || eventTablePaths.join(Expression.DEPENDENCY_SPLITER).startsWith(dependPathInfo.paths.join(Expression.DEPENDENCY_SPLITER)) && dependPathInfo.paths.length + 1 == eventTablePaths.length;\r\n        // });\r\n        // if (onlyDependOnState || onlyDependOnCurrentTable) {\r\n        //   return true;\r\n        // }\r\n        if (onlyDependOnState) {\r\n          return true;\r\n        }\r\n        const result = this.analysis(event, expressionObject);\r\n        if (result && result.distance === 0 && result.isSameTable) {\r\n          return true;\r\n        }\r\n        // 事件表表达式，但依赖下级表的未计算\r\n        return false;\r\n      });\r\n      return groupExpressions.concat(relativeExpressions);\r\n    }\r\n    return null;\r\n  }\r\n  /**\r\n   * 发布事件\r\n   * @param event event\r\n   */\r\n  public dispatch(event: Expression.EventArgs) {\r\n    const expressions = this.filter(event);\r\n    if (expressions && expressions.length > 0) {\r\n      expressions.forEach((expressionObject: Expression.ExpressionObject) => {\r\n        const entityContext = this.buildEntityContext(event, expressionObject);\r\n        const context = this.buildContext(expressionObject, event, entityContext);\r\n        const result = this.perform(expressionObject, context);\r\n        if (result === undefined && !this.isValidateOrRequiredExpression(expressionObject)) {\r\n          return;\r\n        }\r\n        expressionObject.result = this.convertBooleanTypeExpressionResult(expressionObject, result);\r\n        if (expressionObject.id) {\r\n          this.expressionResult.set(expressionObject.id, expressionObject.result);\r\n        } else {\r\n          // console.warn(`EventHandler 表达式未设置唯一标识，无法更新表达式值。`);\r\n        }\r\n        this.effect(event, expressionObject);\r\n      });\r\n    }\r\n  }\r\n  /**\r\n   * 获取子表事件行\r\n   * @param paths \r\n   * @param event \r\n   * @returns \r\n   */\r\n  public getCurrentRowByEvent(paths: string[], event: Expression.EventArgs): null | { [prop: string]: any } {\r\n    return this.getCurrentRowByPaths(paths);\r\n  }\r\n  /**\r\n   * 新增副作用器\r\n   * @param event event\r\n   * @param expressionObject 表达式\r\n   * @returns \r\n   */\r\n  public effect(event: Expression.EventArgs, expressionObject: Expression.ExpressionObject): void {\r\n    const effectTo = expressionObject.bindingType;\r\n    const eventPath = this.cleanEventPath(event.path);\r\n    const effector = this.effectorFactory.getEffector(expressionObject);\r\n    if (!effector) {\r\n      return;\r\n    }\r\n    const info = this.analysis(event, expressionObject);\r\n    if (!info) {\r\n      return;\r\n    }\r\n    const expressionPaths = expressionObject.path.split('/').filter(p => p);\r\n    if (effectTo === Expression.ExpressionBindingType.Field) {\r\n      const paths: any[][] = [];\r\n      const propertyPaths = expressionPaths.slice(info.expressionTablePaths.length);\r\n      // 新增场景仅需要计算事件表及事件表上面的表\r\n      if (info.distance === 0) {\r\n        if (!info.isSameTable) {\r\n          return;\r\n        }\r\n        // 表达式和事件在同一个表\r\n        const prevPaths = eventPath.slice(0);\r\n        if (eventPath.length === 1) {\r\n          // 主表新增，此时事件路径中有主键，直接拼接属性就是完整路径\r\n          if (event.value && Array.isArray(event.value)) {\r\n            event.value.forEach((bindingObject: BindingObject) => {\r\n              paths.push([bindingObject.primaryKeyValue].concat(propertyPaths));\r\n            });\r\n          } else {\r\n            const path = prevPaths.concat(propertyPaths);\r\n            paths.push(path);\r\n          }\r\n        } else {\r\n          // 从表或从从表新增，此时事件路径中缺少最后一个层级的主键\r\n          if (event.value && Array.isArray(event.value)) {\r\n            event.value.forEach((bindingObject: BindingObject) => {\r\n              paths.push(prevPaths.concat([bindingObject.primaryKeyValue]).concat(propertyPaths));\r\n            });\r\n          } else {\r\n            const bindingList = this.bindingData.getValue(info.eventTablePaths) as BindingList;\r\n            if (bindingList && bindingList.currentId) {\r\n              paths.push(prevPaths.concat(bindingList.currentId).concat(propertyPaths));\r\n            }\r\n          }\r\n        }\r\n      } else {\r\n        // 表达式和事件不在同一个表，即下级表新增或批量新增了一批数据\r\n        if (info.eventFromParent === true) {\r\n          // 在过滤时这种情况的应该就排除掉了\r\n          return;\r\n        } else if (info.eventFromChildren === true) {\r\n          const prevPaths = eventPath.slice(0, eventPath.length - 1);\r\n          const path = prevPaths.concat(propertyPaths);\r\n          paths.push(path);\r\n        } else {\r\n          return;\r\n        }\r\n      }\r\n      paths.forEach((path: any[]) => {\r\n        const currentRows = this.buildCurrentRows(info.expressionTablePaths, path);\r\n        this.output(event, expressionObject, currentRows, effector, [path]);\r\n      });\r\n    } else if (effectTo === Expression.ExpressionBindingType.State) {\r\n      console.error('not supported！');\r\n    }\r\n  }\r\n  public output(event: Expression.EventArgs, expressionObject: Expression.ExpressionObject, currentRows: Expression.ICurrentRow[], effector: Expression.Effector, paths: any[][]) {\r\n    const context = this.buildContext(expressionObject, event, null, currentRows);\r\n    const value = this.perform(expressionObject, context);\r\n    if (value === undefined) {\r\n      return;\r\n    }\r\n    expressionObject.result = value;\r\n    if (expressionObject.id) {\r\n      this.expressionResult.set(expressionObject.id, expressionObject.result);\r\n    }\r\n    EffectorManager.effect(effector, expressionObject, paths);\r\n  }\r\n}","import { Injectable } from '@angular/core';\r\nimport { EffectorManager } from '../effector/effector_manager';\r\nimport { BindingList } from '../binding-data';\r\nimport { DataPropInfo } from '../core/index';\r\nimport { Entity, EntityList } from '../entity/index';\r\nimport { Expression } from '../expression/index';\r\nimport { ENTITY_TEMPLATE } from '../resolver/index';\r\nimport { ExpressionUtil } from '../utils/expression_util';\r\nimport { EventHandler } from './event_handler';\r\n\r\n@Injectable()\r\nexport class BindingDataValueChangeEventHandler extends EventHandler {\r\n  public filter(event: Expression.EventArgs) {\r\n    if (this.expressionObjects && this.expressionObjects.length > 0) {\r\n      return this.expressionObjects.filter((expressionObject: Expression.ExpressionObject) => {\r\n        const deps = expressionObject.deps;\r\n        if (!deps || deps.length < 1 || event.ns !== expressionObject.ns) {\r\n          return false;\r\n        }\r\n        const eventEntityPaths = this.getEntityPath(event.path);\r\n        eventEntityPaths.splice(0, 0, ENTITY_TEMPLATE);\r\n        return deps.includes(eventEntityPaths.join('/'));\r\n      });\r\n    }\r\n    return null;\r\n  }\r\n  /**\r\n   * 发布事件\r\n   * @param event event\r\n   */\r\n  public dispatch(event: Expression.EventArgs) {\r\n    const expressions = this.filter(event);\r\n    if (expressions && expressions.length > 0) {\r\n      expressions.forEach((expressionObject: Expression.ExpressionObject) => {\r\n        this.effect(event, expressionObject);\r\n      });\r\n    }\r\n  }\r\n  /**\r\n   * 输出副作用\r\n   * @param event event\r\n   * @param expressionObject 表达式\r\n   * @returns \r\n   */\r\n  public effect(event: Expression.EventArgs, expressionObject: Expression.ExpressionObject): void {\r\n    // 首先计算当前表达式和事件会影响那些路径\r\n    const effector = this.effectorFactory.getEffector(expressionObject);\r\n    if (!effector) {\r\n      return;\r\n    }\r\n    const result = this.analysis(event, expressionObject);\r\n    if (!result) {\r\n      return;\r\n    }\r\n    const eventPaths = this.cleanEventPath(event.path);\r\n    const paths: any[][] = [];\r\n    if (result.distance === 0) {\r\n      // 值变化之后影响到了一个表内字段或影响到了同级表字段\r\n      if (result.isSameTable === false) {\r\n        // 同级表跳过\r\n        //console.warn(`[BindingDataValueChangeEventHandler]不支持多对多关系。`);\r\n        return;\r\n      }\r\n      const prevPaths = eventPaths.slice(0, eventPaths.length - result.eventPropertyNames.length);\r\n      const path = prevPaths.concat(result.expressionPropertyNames);\r\n      const currentRows = this.buildCurrentRows(result.eventTablePaths, path);\r\n      paths.push(path);\r\n      this.output(event, expressionObject, currentRows, effector, paths);\r\n    } else {\r\n      if (result.eventFromChildren === true) {\r\n        if (result.distance > 1) {\r\n          return;\r\n        }\r\n        // 下级表值变化影响到了上级表的表达式\r\n        const prevPaths = eventPaths.slice(0, eventPaths.length - result.eventPropertyNames.length - 2);\r\n        const path = prevPaths.concat(result.expressionPropertyNames);\r\n        paths.push(path);\r\n        const currentRows = this.buildCurrentRows(result.eventTablePaths, eventPaths);\r\n        this.output(event, expressionObject, currentRows, effector, paths);\r\n      } else if (result.eventFromParent === true) {\r\n        if (result.distance > 1) {\r\n          //console.warn(`[BindingDataValueChangeEventHandler]不支持多对多关系。`);\r\n          return;\r\n        }\r\n        // 上级表值变化影响到了下级表的表达式\r\n        const prevPaths = eventPaths.slice(0, eventPaths.length - result.eventPropertyNames.length);\r\n        // 添加下级表nodecode到路径中\r\n        prevPaths.push(result.expressionTablePaths.slice(0).pop());\r\n        // 遍历子表\r\n        const bindingPaths = result.expressionTablePaths;\r\n        const primaryKeyValue = eventPaths[0];\r\n        if (!primaryKeyValue) {\r\n          return;\r\n        }\r\n        let object = this.frameContext.repository.entityCollection.getEntityById(primaryKeyValue);\r\n        // prevPaths like [1,c,1.1,cc]\r\n        for (let index = 1; index < prevPaths.length; index++) {\r\n          const propertyName = prevPaths[index];\r\n          if (object instanceof EntityList) {\r\n            object = object.get(propertyName);\r\n          } else {\r\n            object = object[propertyName];\r\n          }\r\n        }\r\n        const list = object;\r\n        if (list && list instanceof EntityList) {\r\n          if (list.count() === 0) {\r\n            if (expressionObject.type === Expression.ExpressionType.Visible || expressionObject.type === Expression.ExpressionType.Required) {\r\n              const context = this.buildContext(expressionObject, event);\r\n              const value = this.perform(expressionObject, context);\r\n              if (value === undefined && !this.isValidateOrRequiredExpression(expressionObject)) {\r\n                return;\r\n              }\r\n              expressionObject.result = this.convertBooleanTypeExpressionResult(expressionObject, value);\r\n              if (expressionObject.id) {\r\n                this.expressionResult.set(expressionObject.id, expressionObject.result);\r\n              }\r\n              super.effect(event, expressionObject);\r\n            }\r\n          } else {\r\n            for (let entity of list) {\r\n              if (entity && entity.primaryValue) {\r\n                const path = prevPaths.concat([entity.primaryValue]).concat(result.expressionPropertyNames);\r\n                const currentRows = this.buildCurrentRows(result.expressionTablePaths, path);\r\n                this.output(event, expressionObject, currentRows, effector, [path]);\r\n              }\r\n            }\r\n          }\r\n        }\r\n      } else {\r\n        // 跨表\r\n      }\r\n    }\r\n  }\r\n  public output(event: Expression.EventArgs, expressionObject: Expression.ExpressionObject, currentRows: Expression.ICurrentRow[], effector: Expression.Effector, paths: any[][]) {\r\n    const context = this.buildContext(expressionObject, event, null, currentRows);\r\n    const value = this.perform(expressionObject, context);\r\n    if (value === undefined && !this.isValidateOrRequiredExpression(expressionObject)) {\r\n      return;\r\n    }\r\n    expressionObject.result = this.convertBooleanTypeExpressionResult(expressionObject, value);;\r\n    if (expressionObject.id) {\r\n      this.expressionResult.set(expressionObject.id, expressionObject.result);\r\n    }\r\n    EffectorManager.effect(effector, expressionObject, paths);\r\n  }\r\n  /**\r\n   * 获取子表事件行\r\n   * @param paths \r\n   * @param event \r\n   * @returns \r\n   */\r\n  public getCurrentRowByEvent(paths: string[], event: Expression.EventArgs): null | { [prop: string]: any } {\r\n    event = JSON.parse(JSON.stringify(event));\r\n    let result = null;\r\n    const bindingList: BindingList = this.bindingData.getValue(paths) as BindingList;\r\n    const eventEntityPath = this.getEntityPath(event.path);\r\n    if (bindingList && bindingList.length > 0) {\r\n      let primaryValue = bindingList.currentItem.primaryKeyValue || null;\r\n      // 使用事件中的主键\r\n      const childrenPaths = ExpressionUtil.getAvailableChildrenPathsFromEntityPaths(eventEntityPath, this.repository.entityTypeInfo);\r\n      if (childrenPaths && childrenPaths.toString() === paths.toString()) {\r\n        // 发生值变化的数据位于要获取当前行的子表中，此时事件行应该是发生值变化的数据id，而不是当前行id\r\n        primaryValue = event.id || null;\r\n        if (!primaryValue) {\r\n          primaryValue = this.getEventId(event.path, paths[paths.length - 1]);\r\n        }\r\n      }\r\n      if (primaryValue) {\r\n        const bindingObject = bindingList.findById(primaryValue);\r\n        if (bindingObject) {\r\n          result = bindingObject.toJSON();\r\n        }\r\n      }\r\n    }\r\n    return result;\r\n  }\r\n}","import { Injectable } from \"@angular/core\";\r\nimport { EffectorManager } from \"../effector/effector_manager\";\r\nimport { Expression } from \"../expression\";\r\nimport { ENTITY_TEMPLATE } from \"../resolver/index\";\r\nimport { EventHandler } from \"./event_handler\";\r\n\r\n/**\r\n * 删除数据时需要计算的表达式\r\n * 1、依赖被删除数据表的上级表达式（不考虑同表内的聚合依赖）\r\n */\r\n@Injectable()\r\nexport class BindingDataRemoveObjectEventHandler extends EventHandler {\r\n  /**\r\n   * 过滤出需要计算的表达式\r\n   * @param event event\r\n   * @returns \r\n   */\r\n  public filter(event: Expression.EventArgs) {\r\n    if (this.expressionObjects && this.expressionObjects.length > 0) {\r\n      // 找到聚合相关表达式\r\n      const expressions = this.expressionObjects.filter((expressionObject: Expression.ExpressionObject) => {\r\n        if (expressionObject.ns !== event.ns || !expressionObject.deps || expressionObject.deps.length < 1) {\r\n          return false;\r\n        }\r\n        const info = this.analysis(event, expressionObject);\r\n        if (!info) {\r\n          return false;\r\n        }\r\n        // event.path like [id:xxxx] or [id:xxxx,子表s]\r\n        const eventTablePaths = this.buildEntityPath(event.path);\r\n        // 主表删除\r\n        if (eventTablePaths.length === 0) {\r\n          if (expressionObject.bindingType === Expression.ExpressionBindingType.Field) {\r\n            return false;\r\n          }\r\n        }\r\n        // 从表或从从表删除\r\n        eventTablePaths.splice(0, 0, ENTITY_TEMPLATE);\r\n        // eventEntityPath like ['ENTITY~','formEEUR1E1s'] // 从表新增\r\n        // deps like ['ENTITY~/formEEUR1E1s/udt/udt_field','ENTITY~/formEEUR1E1s/ref/ref_udt/ref_udt_field']\r\n        // 仅处理上级表达式\r\n        if (info.eventTablePaths.length - 1 !== info.expressionTablePaths.length) {\r\n          return false;\r\n        }\r\n        // 不支持跨表\r\n        if (!info.eventTablePaths.join(Expression.DEPENDENCY_SPLITER).startsWith(info.expressionTablePaths.join(Expression.DEPENDENCY_SPLITER))) {\r\n          return false;\r\n        }\r\n        const index = expressionObject.deps.findIndex((dep: string) => {\r\n          // 依赖\r\n          if (!dep.startsWith(eventTablePaths.join(Expression.DEPENDENCY_SPLITER))) {\r\n            return false;\r\n          }\r\n          const deps = dep.split(Expression.DEPENDENCY_SPLITER).filter(p => p).slice(1);\r\n          const dependPathInfo = this.getPathInfo(deps.join(Expression.DEPENDENCY_SPLITER));\r\n          if (dependPathInfo && dependPathInfo.paths.join(Expression.DEPENDENCY_SPLITER) === info.eventTablePaths.join(Expression.DEPENDENCY_SPLITER)) {\r\n            return true;\r\n          }\r\n          return false;\r\n        });\r\n        return index === -1 ? false : true;\r\n      });\r\n      return expressions;\r\n    }\r\n  }\r\n  /**\r\n   * 发布事件\r\n   * @param event event\r\n   */\r\n  public dispatch(event: Expression.EventArgs) {\r\n    const expressions = this.filter(event);\r\n    if (expressions && expressions.length > 0) {\r\n      expressions.forEach((expressionObject: Expression.ExpressionObject) => {\r\n        const entityContext = this.buildEntityContext(event, expressionObject);\r\n        const context = this.buildContext(expressionObject, event, entityContext);\r\n        const result = this.perform(expressionObject, context);\r\n        if (result === undefined && !this.isValidateOrRequiredExpression(expressionObject)) {\r\n          return;\r\n        }\r\n        expressionObject.result = this.convertBooleanTypeExpressionResult(expressionObject, result);;\r\n        if (expressionObject.id) {\r\n          this.expressionResult.set(expressionObject.id, expressionObject.result);\r\n        }\r\n        this.effect(event, expressionObject);\r\n      });\r\n    }\r\n  }\r\n  /**\r\n   * 删除副作用器\r\n   * @param event event\r\n   * @param expressionObject 表达式\r\n   * @returns \r\n   */\r\n  public effect(event: Expression.EventArgs, expressionObject: Expression.ExpressionObject): void {\r\n    const effectTo = expressionObject.bindingType;\r\n    const eventPath = this.cleanEventPath(event.path);\r\n    const effector = this.effectorFactory.getEffector(expressionObject);\r\n    if (!effector) {\r\n      return;\r\n    }\r\n    const info = this.analysis(event, expressionObject);\r\n    if (!info) {\r\n      return;\r\n    }\r\n    const expressionPaths = expressionObject.path.split('/').filter(p => p);\r\n    if (effectTo === Expression.ExpressionBindingType.Field) {\r\n      const paths: any[][] = [];\r\n      const propertyPaths = expressionPaths.slice(info.expressionTablePaths.length);\r\n      // 删除场景仅需要计算事件表上面的表\r\n      if (info.distance !== 0) {\r\n        // 表达式和事件不在同一个表，即下级表删除了一批数据\r\n        if (info.eventFromParent === true) {\r\n          // 在过滤时这种情况的应该就排除掉了\r\n          return;\r\n        } else if (info.eventFromChildren === true) {\r\n          const prevPaths = eventPath.slice(0, eventPath.length - 1);\r\n          const path = prevPaths.concat(propertyPaths);\r\n          paths.push(path);\r\n        } else {\r\n          return;\r\n        }\r\n      }\r\n      EffectorManager.effect(effector, expressionObject, paths);\r\n    } else if (effectTo === Expression.ExpressionBindingType.State) {\r\n      console.error('not supported！');\r\n    }\r\n  }\r\n  /**\r\n   * 获取子表事件行\r\n   * @param paths \r\n   * @param event \r\n   * @returns \r\n   */\r\n  public getCurrentRowByEvent(paths: string[], event: Expression.EventArgs): null | { [prop: string]: any } {\r\n    return this.getCurrentRowByPaths(paths);\r\n  }\r\n}","import { Injectable } from \"@angular/core\";\r\nimport { Expression } from \"../expression/index\";\r\nimport { ENTITY_TEMPLATE } from \"../resolver\";\r\nimport { EventHandler } from \"./event_handler\";\r\n\r\n@Injectable()\r\nexport class BindingDataLoadEventHandler extends EventHandler {\r\n  public filter(event: Expression.EventArgs) {\r\n    // 过滤第一次空load\r\n    if ((!event.path || event.path.length === 0) && event.value && Array.isArray(event.value) && event.value.length === 0) {\r\n      return null;\r\n    }\r\n    // 数据加载完成后需要计算当前绑定路径下的只读、显隐、必填、校验表达式\r\n    if (this.expressionObjects && this.expressionObjects.length > 0) {\r\n      const expressions = this.expressionObjects.filter((expressionObject: Expression.ExpressionObject) => {\r\n        if (expressionObject.ns !== event.ns || (expressionObject.type !== Expression.ExpressionType.Readonly && expressionObject.type !== Expression.ExpressionType.Visible && expressionObject.type !== Expression.ExpressionType.Required && expressionObject.type !== Expression.ExpressionType.Validate)) {\r\n          return false;\r\n        }\r\n        const result = this.analysis(event, expressionObject);\r\n        if (!result) {\r\n          return false;\r\n        }\r\n        // 影响一个表达式是否要计算的因子有两个：表达式作用的字段、表达式的依赖\r\n        // 以下判断的前提时数据加载场景！！\r\n        // 1、表达式作用的字段\r\n        //    如果加载的数据对应的表就是表达式字段所在的表，应该计算\r\n        // 2、表达式依赖\r\n        //    如果表达式依赖的字段加载了，应该计算\r\n        //    如果表达式没有任何依赖，应该计算\r\n        if (result.isSameTable) {\r\n          return true;\r\n        }\r\n        // 如果没有依赖则应该计算，保证只读、必填、显隐、校验表达式结果正确\r\n        if (!expressionObject.deps || expressionObject.deps.length === 0) {\r\n          return true;\r\n        }\r\n\r\n        // 过滤出所有实体依赖\r\n        const deps = expressionObject.deps.filter((dep: string) => dep.startsWith(ENTITY_TEMPLATE));\r\n        // 未依赖实体，只依赖了uistate，那么绑定数据加载时不需要计算\r\n        if (!deps || deps.length < 1) {\r\n          return false;\r\n        }\r\n        // 表达式依赖了字段，需要确认依赖的字段所在的表是否是事件表\r\n        // 1、计算事件表路径\r\n        const eventPath = event.path.filter(p => p).join('/');\r\n        // 2、获取依赖字段的表路径\r\n        const index = deps.findIndex((dep: string) => {\r\n          // 去掉ENTITY~前缀\r\n          const depPath = dep.split('/').slice(1).join('/');\r\n          // 获取依赖字段所在的表路径\r\n          const { path } = this.getPathInfo(depPath);\r\n          return path === eventPath;\r\n        });\r\n        return index !== -1;\r\n      });\r\n      return expressions;\r\n    } else {\r\n      return null;\r\n    }\r\n  }\r\n  /**\r\n   * 发布事件\r\n   * @param event event\r\n   */\r\n  public dispatch(event: Expression.EventArgs) {\r\n    const expressions = this.filter(event);\r\n    if (expressions && expressions.length > 0) {\r\n      expressions.forEach((expressionObject: Expression.ExpressionObject) => {\r\n        const entityContext = this.buildEntityContext(event, expressionObject);\r\n        const context = this.buildContext(expressionObject, event, entityContext);\r\n        const result = this.perform(expressionObject, context);\r\n        if (result === undefined && !this.isValidateOrRequiredExpression(expressionObject)) {\r\n          return;\r\n        }\r\n        expressionObject.result = this.convertBooleanTypeExpressionResult(expressionObject, result);\r\n        if (expressionObject.id) {\r\n          this.expressionResult.set(expressionObject.id, expressionObject.result);\r\n        }\r\n        this.effect(event, expressionObject);\r\n      });\r\n    }\r\n  }\r\n  /**\r\n   * 获取子表事件行\r\n   * @param paths \r\n   * @param event \r\n   * @returns \r\n   */\r\n  public getCurrentRowByEvent(paths: string[], event: Expression.EventArgs): null | { [prop: string]: any } {\r\n    return this.getCurrentRowByPaths(paths);\r\n  }\r\n}","import { Injectable } from \"@angular/core\";\r\nimport { Expression } from \"../expression/index\";\r\nimport { ENTITY_TEMPLATE } from \"../resolver/index\";\r\nimport { EventHandler } from \"./event_handler\";\r\n@Injectable()\r\nexport class BindingDataSelectionChangedEventHandler extends EventHandler {\r\n  /**\r\n   * 过滤出需要计算的表达式\r\n   * @param event event\r\n   * @returns \r\n   */\r\n  public filter(event: Expression.EventArgs) {\r\n    if (this.expressionObjects && this.expressionObjects.length > 0) {\r\n      return this.expressionObjects.filter((expressionObject: Expression.ExpressionObject) => {\r\n        const deps = expressionObject.deps;\r\n        // 没有依赖的表达式不需要关注\r\n        if (!deps || deps.length < 1) {\r\n          return false;\r\n        }\r\n        // 不依赖实体的表达式不需要关注\r\n        let index = deps.findIndex(dep => dep.startsWith(ENTITY_TEMPLATE));\r\n        if (index === -1) {\r\n          return false;\r\n        }\r\n        const result = this.analysis(event, expressionObject);\r\n        if (!result) {\r\n          return false;\r\n        }\r\n        // 只关注从表行切换\r\n        if (result.eventTablePaths.length !== 1) {\r\n          return false;\r\n        }\r\n        // 只关注从从表表达式\r\n        if (result.expressionTablePaths.length !== 2) {\r\n          return false;\r\n        }\r\n        // 只关注事件直接下级的表达式，跨表的不需要关注\r\n        if (!result.expressionTablePaths.join('/').startsWith(result.eventTablePaths.join('/'))) {\r\n          return false;\r\n        }\r\n        // 从从表表达式需要依赖上级表\r\n        index = deps.findIndex(dep => dep.startsWith(`${ENTITY_TEMPLATE}/${result.eventTablePaths[0]}`));\r\n        if (index === -1) {\r\n          return false;\r\n        }\r\n        return true;\r\n      });\r\n    }\r\n    return null;\r\n  }\r\n  public dispatch(event: Expression.EventArgs): void {\r\n    const expressions = this.filter(event);\r\n    if (expressions && expressions.length > 0) {\r\n      expressions.forEach((expressionObject: Expression.ExpressionObject) => {\r\n        const entityContext = this.buildEntityContext(event, expressionObject);\r\n        const context = this.buildContext(expressionObject, event, entityContext);\r\n        const result = this.perform(expressionObject, context);\r\n        if (result === undefined && !this.isValidateOrRequiredExpression(expressionObject)) {\r\n          return;\r\n        }\r\n        expressionObject.result = this.convertBooleanTypeExpressionResult(expressionObject, result);;\r\n        if (expressionObject.id) {\r\n          this.expressionResult.set(expressionObject.id, expressionObject.result);\r\n        }\r\n        this.effect(event, expressionObject);\r\n      });\r\n    }\r\n  }\r\n}","import { Inject, Injectable, Optional } from \"@angular/core\";\r\nimport { Expression } from \"../expression/index\";\r\nimport { EVENT_HANDLER_TOKEN } from \"../expression/tokens\";\r\nimport { RepositoryAddEntityEventHandler } from \"./repository_add_entity_event_handler\";\r\nimport { RepositoryRemoveEntityEventHandler } from \"./repository_remove_entity_event_handler\";\r\nimport { EntityValueChangedEventHandler } from \"./entity_value_changed_event_handler\";\r\nimport { StateValueChangedEventHandler } from \"./state_value_changed_event_handler\";\r\nimport { EntityUpdateEventHandler } from \"./entity_update_event_handler\";\r\nimport { RepositoryLoadEventHandler } from \"./repository_load_event_handler\";\r\nimport { BindingDataAppendObjectEventHandler } from \"./binding_data_append_object_event_handler\";\r\nimport { BindingDataValueChangeEventHandler } from \"./binding_data_value_change_event_handler\";\r\nimport { BindingDataRemoveObjectEventHandler } from \"./binding_data_remove_object_event_handler\";\r\nimport { BindingDataLoadEventHandler } from \"./binding_data_load_event_handler\";\r\nimport { BindingDataSelectionChangedEventHandler } from \"./binding_data_selection_changed_event_handler\";\r\n\r\n@Injectable()\r\nexport class EventHandlerRegistry {\r\n  constructor(@Optional() @Inject(EVENT_HANDLER_TOKEN) public handlers: Expression.IEventHandler[]) { }\r\n  /**\r\n   * 实体值变化处理器\r\n   */\r\n  public get entityValueChangedEventHandler() {\r\n    return this.handlers && this.handlers.find((handler: Expression.IEventHandler) => handler instanceof EntityValueChangedEventHandler);\r\n  }\r\n  /**\r\n   * 状态值变化处理器\r\n   */\r\n  public get stateValueChangedEventHandler() {\r\n    return this.handlers && this.handlers.find((handler: Expression.IEventHandler) => handler instanceof StateValueChangedEventHandler);\r\n  }\r\n  public get repositoryAddEntityEventHandler() {\r\n    return this.handlers && this.handlers.find((handler: Expression.IEventHandler) => handler instanceof RepositoryAddEntityEventHandler);\r\n  }\r\n  public get repositoryRemoveEntityEventHandler() {\r\n    return this.handlers && this.handlers.find((handler: Expression.IEventHandler) => handler instanceof RepositoryRemoveEntityEventHandler);\r\n  }\r\n  public get entityUpdateEventHandler() {\r\n    return this.handlers && this.handlers.find((handler: Expression.IEventHandler) => handler instanceof EntityUpdateEventHandler);\r\n  }\r\n  public get repositoryLoadEventHandler() {\r\n    return this.handlers && this.handlers.find((handler: Expression.IEventHandler) => handler instanceof RepositoryLoadEventHandler);\r\n  }\r\n  public get bindingDataAppendEntityEventHandler() {\r\n    return this.handlers && this.handlers.find((handler: Expression.IEventHandler) => handler instanceof BindingDataAppendObjectEventHandler);\r\n  }\r\n  public get bindingDataValueChangeEventHandler() {\r\n    return this.handlers && this.handlers.find((handler: Expression.IEventHandler) => handler instanceof BindingDataValueChangeEventHandler);\r\n  }\r\n  public get bindingDataRemoveObjectEventHandler() {\r\n    return this.handlers && this.handlers.find((handler: Expression.IEventHandler) => handler instanceof BindingDataRemoveObjectEventHandler);\r\n  }\r\n  public get bindingDataLoadEventHandler() {\r\n    return this.handlers && this.handlers.find((handler: Expression.IEventHandler) => handler instanceof BindingDataLoadEventHandler);\r\n  }\r\n  public get bindingDataSelectionChangedHandler() {\r\n    return this.handlers && this.handlers.find((handler: Expression.IEventHandler) => handler instanceof BindingDataSelectionChangedEventHandler);\r\n  }\r\n}","import { Injectable, Injector } from \"@angular/core\";\r\nimport { ExpressionRegistry } from \"./expression_registry\";\r\nimport { ExpressionEventEmitter } from \"./expression_event_emitter\";\r\nimport { Expression } from './types';\r\nimport { ResolverRegistry, ResolveService } from \"../resolver/index\";\r\nimport { EventHandlerRegistry } from \"../event-handler/index\";\r\nimport { Core } from \"../core/index\";\r\n\r\n@Injectable()\r\nexport class ExpressionEngineImpl {\r\n  private expressionObjects: Array<Expression.ExpressionObject> = new Array<Expression.ExpressionObject>();\r\n  constructor(\r\n    private injector: Injector,\r\n    private expressionRegistry: ExpressionRegistry,\r\n    private expressionEventEmitter: ExpressionEventEmitter,\r\n    private resolverRegistry: ResolverRegistry,\r\n    private eventHandlerRegistry: EventHandlerRegistry,\r\n    private resolveService: ResolveService\r\n  ) {\r\n    this.expressionRegistry.expressions.subscribe((exprs: Expression.ExpressionObject[]) => {\r\n      if (exprs && exprs.length > 0) {\r\n        this.expressionObjects = exprs;\r\n        // 解析表达式依赖\r\n        this.resolveDependency();\r\n      }\r\n      this.attachEvent();\r\n    });\r\n  }\r\n\r\n  private attachEvent() {\r\n    this.expressionEventEmitter.attach().subscribe((events: Expression.EventArgs[]) => {\r\n      if (!events || events.length < 1 || !this.expressionObjects || this.expressionObjects.length < 1) {\r\n        return;\r\n      }\r\n      events.forEach((event: Expression.EventArgs) => {\r\n        const handler = this.getEventHandler(event);\r\n        if (handler) {\r\n          handler.handleEvent(event, this.expressionObjects);\r\n        } else {\r\n          Core.warn(`没有对应的事件处理器,event=${event.type}`);\r\n        }\r\n      });\r\n    });\r\n  }\r\n  /**\r\n   * 解析表达式依赖\r\n   * @returns \r\n   */\r\n  private resolveDependency() {\r\n    if (!this.resolverRegistry || !this.resolverRegistry.resolvers || this.resolverRegistry.resolvers.length < 1 || !this.expressionObjects || this.expressionObjects.length < 1 || !Array.isArray(this.expressionObjects)) {\r\n      return;\r\n    }\r\n    this.expressionObjects.forEach((expressionObject: Expression.ExpressionObject) => {\r\n      const expression = expressionObject.expression;\r\n      const dependencies = this.resolveService.resolve(expression);\r\n      expressionObject.deps = dependencies;\r\n    });\r\n  }\r\n  /**\r\n   * 获取表达式事件处理器\r\n   * @param event event\r\n   * @returns \r\n   */\r\n  private getEventHandler(event: Expression.EventArgs): Expression.IEventHandler {\r\n    if (event.type === Expression.EventType.ValueChanged) {\r\n      // 实体值变化\r\n      if (event.source === Expression.EventSource.BindingData) {\r\n        return this.eventHandlerRegistry.bindingDataValueChangeEventHandler;\r\n      } else if (event.source === Expression.EventSource.Field) {\r\n        return this.eventHandlerRegistry.entityValueChangedEventHandler;\r\n      } else if (event.source === Expression.EventSource.State) {\r\n        return this.eventHandlerRegistry.stateValueChangedEventHandler;\r\n      }\r\n    } else if (event.type === Expression.EventType.Append) {\r\n      if (event.source === Expression.EventSource.Repository || event.source === Expression.EventSource.Field) {\r\n        return this.eventHandlerRegistry.repositoryAddEntityEventHandler;\r\n      } else if (event.source === Expression.EventSource.BindingData) {\r\n        return this.eventHandlerRegistry.bindingDataAppendEntityEventHandler;\r\n      }\r\n    } else if (event.type === Expression.EventType.Remove) {\r\n      if (event.source === Expression.EventSource.Repository || event.source === Expression.EventSource.Field) {\r\n        return this.eventHandlerRegistry.repositoryRemoveEntityEventHandler;\r\n      } else if (event.source === Expression.EventSource.BindingData) {\r\n        return this.eventHandlerRegistry.bindingDataRemoveObjectEventHandler;\r\n      }\r\n    } else if (event.type === Expression.EventType.Update) {\r\n      if (event.source === Expression.EventSource.Repository) {\r\n        return this.eventHandlerRegistry.entityUpdateEventHandler;\r\n      }\r\n    } else if (event.type === Expression.EventType.Load) {\r\n      if (event.source === Expression.EventSource.Repository || event.source === Expression.EventSource.Field) {\r\n        return this.eventHandlerRegistry.repositoryLoadEventHandler;\r\n      } else if (event.source === Expression.EventSource.BindingData) {\r\n        return this.eventHandlerRegistry.bindingDataLoadEventHandler;\r\n      }\r\n    } else if (event.type === Expression.EventType.SelectionChanged) {\r\n      if (event.source === Expression.EventSource.BindingData) {\r\n        return this.eventHandlerRegistry.bindingDataSelectionChangedHandler;\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n  \r\n}","import { ComponentRef } from \"@angular/core\";\r\n/**\r\n * 组件实例管理\r\n */\r\nexport class ComponentRefManager {\r\n  private components: Map<string, any[]> = new Map<string, any[]>();\r\n  /**\r\n   * 增加组件实例\r\n   * @param id \r\n   * @param component \r\n   */\r\n  public add(id: string, component: any) {\r\n    const components = this.components.get(id);\r\n    if (components) {\r\n      components.push(component);\r\n    } else {\r\n      this.components.set(id, [component]);\r\n    }\r\n  }\r\n  /**\r\n   * 删除组件实例\r\n   * @param id \r\n   */\r\n  public remove(id: string) {\r\n    const components = this.components.get(id);\r\n    if (components && components.length > 0) {\r\n      components.length = 0;\r\n      this.components.delete(id);\r\n    }\r\n  }\r\n  /**\r\n   * 通过id获取组件实例\r\n   * @param id \r\n   * @returns \r\n   */\r\n  public get(id: string) {\r\n    if (id) {\r\n      const components = this.components.get(id);\r\n      if (components && components.length > 0) {\r\n        return components;\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n  /**\r\n   * 清空\r\n   */\r\n  public clear() {\r\n    this.components.clear();\r\n  }\r\n}","import { Injector, Injectable, Optional, SkipSelf, InjectFlags, OnDestroy } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { Entity } from '../entity/index';\r\nimport { Repository } from '../repository/index';\r\nimport { BindingData } from '../binding-data/index';\r\nimport { UIState, PARAM_TYPE_TRANSFORM_TOKEN } from '../ui-state/index';\r\nimport { Form } from '../form/index';\r\nimport { StateMachine } from '../state-machine/index';\r\nimport { ViewModel } from '../view-model/index';\r\nimport { CommandBus, CommandHandlerExtenderRegistry, CommandHandlerFactory, CommandHandlerRegistry } from '../command/index';\r\nimport { Context } from '../context/index';\r\nimport { AppContext } from '../app/index';\r\nimport { RouterParamService } from '../misc/index';\r\nimport { FRAME_ID, NAMESPACE } from './tokens';\r\nimport { Change, ChangeType } from '../binding-data/index';\r\nimport { EventBus } from '../event-bus-new/index';\r\nimport { FrameComponent } from './frame_component';\r\nimport { IExceptionHandler } from '../exception/types';\r\nimport { EXCEPTION_HANDLER } from '../exception/tokens';\r\nimport { EntityUtil } from '../binding-data/entity_util';\r\nimport { TranslateToken } from '../i18n/translate_token';\r\nimport { VariableParseService } from '../variable/variable_parse_service';\r\nimport { IContextMetadata } from '../app/app_metadata';\r\nimport { TranslateService } from '../i18n/translate_service';\r\nimport { Translate } from '../i18n';\r\nimport { UserSettings } from '../i18n/types';\r\nimport { UserSettingsToken } from '../i18n/tokens';\r\nimport { UserSettingsService } from '../i18n/user_settings_service';\r\nimport { ExpressionEngineImpl } from '../expression/expression_engine_impl';\r\nimport { ExpressionManager } from '../expression/expression_manager';\r\nimport { ExpressionResult } from '../expression/expression_result';\r\nimport { ExpressionResultFactory } from '../expression/expression_result_factory';\r\nimport {\r\n  CommandVariableParser, DataVariableParser, FrameIdVariableParser,\r\n  StateMachineVariableParser, UIStateVariableParser\r\n} from '../variable';\r\nimport { RunMode } from '../core';\r\nimport { Subject } from 'rxjs';\r\nimport { IDisposable } from '../core/index';\r\nimport { ComponentRefManager } from './component_ref_manager';\r\n\r\n\r\n/**\r\n * 组件上下文\r\n * @description \r\n * # 上下文\r\n * ## Overview\r\n * \r\n * 每个组件（FrameComponent）都有自己的上下文（FrameContext）,通过上下文可以获取控制器的所有属性，如常用的`frameId`、`BindingData`、`Repository`、`ViewModel`、`StateMachine`、 * `UIState`等。上下文在内存中呈树形结构，依附于FrameComponent。结构如下：\r\n * \r\n * ![image-20210806204755378](https://open.inspuronline.com/iGIX/assets/cloudplus/igix_2110/farris/devkit/guide/images/image-20210806204755378.png)\r\n * \r\n * 从上图我们可以看出每个上下文都有自己的`ViewModel`、`UIState`，那么如何确定一个命令在执行时用的是哪个上下文呢？其实无论命令在哪个地方被调用，上下文都是命令所在的组件的上下文。即，如果 * 命令挂载到了`detail-form-component`的视图模型，但命令最终被`root-component`上的按钮调用了，其上下文仍然是`detail-from-component`组件的上下文。之所以出现这种现象和Angular的依赖注 * 入密不可分，由于Angular在查找`provider`的时候总是从自己的组件开始向上找，如果在组件内部找到了则不再继续查找，如果找不到则会继续向上，如果查找到最上级依然找不到就会报`No provider  * for xx`错误。\r\n * \r\n * 既然如此，如果我们在`detail-form-component`中想要获取`root-component`中定义的变量（UIState）该如何做呢？答案是切换上下文，可以通过以下方式实现：\r\n * \r\n * ```typescript\r\n * // 方法1\r\n * const rootFrameContext = this.frameContext.root;\r\n * // 方法2\r\n * const rootFrameContext = this.frameContext.appContext.frameContextManager.getFrameContextById('root-component');\r\n * ```\r\n * \r\n * 通常在编写`Web构件`时先引入FrameContext，如：\r\n * \r\n * ```javascript\r\n * import {FrameContext,BindingData,Repository} from '@farris/devkit';\r\n * \r\n * constructor(private frameContext:FrameContext){}\r\n * \r\n * public method(){\r\n *     const bindingData: BindingData = this.frameContext.bindingData;\r\n *     const repository: Repository = this.frameContext.repository;\r\n * }\r\n * ```\r\n * \r\n * > `FrameContext`称为`ViewModelContext`更合适，可以理解为`MVVM`架构中`VM`的上下文。\r\n * \r\n * 控制器中亦存在`ViewModel`的概念。和`MVVM`架构中的的VM一致，所以也可以从`VM`访问常用的属性。如：\r\n * \r\n * ```typescript\r\n * import {BindingData,Repository,ViewModel} from '@farris/devkit';\r\n * \r\n * constructor(private viewModel:ViewModel){}\r\n * \r\n * public method(){\r\n *     const bindingData: BindingData = this.viewModel.bindingData;\r\n *     const repository: Repository = this.viewModel.repository;\r\n * }\r\n * ```\r\n * \r\n * \r\n * \r\n * ## 常用操作\r\n * \r\n * ### 获取当前上下文所属的组件\r\n * \r\n * ```typescript\r\n * this.frameContext.frameComponent;\r\n * ```\r\n * \r\n * ### 获取当前上下文的根上下文\r\n * \r\n * ```typescript\r\n * this.frameContext.root;\r\n * ```\r\n * \r\n * ### 获取当前上下文的appContext\r\n * \r\n * ```typescript\r\n * this.frameContext.appContext;\r\n * ```\r\n * \r\n * ### 获取指定frameId的上下文\r\n * \r\n * ```typescript\r\n * this.frameContext.appContext.frameContextManager.getFrameContextById('data-grid-component');\r\n * ```\r\n * \r\n * ### 获取表单所有上下文\r\n * \r\n * ```typescript\r\n * this.frameContext.appContext.frameContextManager.getFrameContexts();\r\n * ```\r\n * \r\n * \r\n * \r\n * ## 常用属性\r\n * \r\n * ### BindingData \r\n * \r\n * [参考]([浪潮企业云开放平台 (inspuronline.com)](https://open.inspuronline.com/iGIX/#/document/mddoc/igix-2103%2Ffarris%2Fdevkit%2Fguide%2F绑定数据.md))\r\n * \r\n * ### Repository\r\n * \r\n * [参考]([浪潮企业云开放平台 (inspuronline.com)](https://open.inspuronline.com/iGIX/#/document/mddoc/igix-2103%2Ffarris%2Fdevkit%2Fguide%2F仓库.md))\r\n * \r\n * ### ViewModel\r\n * \r\n * 控制器中ViewMode同MVVM架构中的VM，和FrameContext类似，可以通过ViewModel拿到FrameContext，同样的也可以通过FrameContext拿到ViewModel。\r\n * \r\n * ### namespace\r\n * \r\n * 命名空间，主要在组合表单场景用到，每一个表单都有自己的命名空间，被组合进来的表单其命名空间是相同的，如A表单组合了B表单，则B表单具有相同的命名空间，命名空间主要用于表单隔离。\r\n * \r\n * ### root\r\n * \r\n * 获取整个表单的根上下文\r\n * \r\n * ### uiState\r\n * \r\n * 获取当前组件的变量\r\n * \r\n * ### frameId\r\n * \r\n * 上下文标识。\r\n */\r\n@Injectable()\r\nexport class FrameContext extends Context implements IDisposable, OnDestroy {\r\n\r\n  public typeName = 'FrameContext';\r\n\r\n  protected isDestoried = false;\r\n  public isDisposed = false;\r\n  /**\r\n   * id\r\n   */\r\n  public frameId: string;\r\n\r\n  /**\r\n   * 注入器\r\n   */\r\n  // public injector: Injector;\r\n\r\n  /**\r\n   * 应用上下文\r\n   */\r\n  public appContext: AppContext;\r\n\r\n  /**\r\n   * 根组件上下文\r\n   */\r\n  public root: FrameContext;\r\n\r\n  /**\r\n   * 父ViewModel\r\n   */\r\n  public parent: FrameContext;\r\n\r\n  /**\r\n   * 后代节点\r\n   */\r\n  public children: Map<string, FrameContext>;\r\n\r\n  /**\r\n   * 实体仓库\r\n   */\r\n  public repository: Repository<Entity>;\r\n\r\n  /**\r\n   * 命令总线\r\n   */\r\n  public commandBus: CommandBus;\r\n\r\n  /**\r\n   * 事件总线\r\n   */\r\n  public eventBus: EventBus;\r\n\r\n  /**\r\n   * 视图模型\r\n   */\r\n  public viewModel: ViewModel;\r\n\r\n  /**\r\n   * 数据绑定\r\n   */\r\n  public bindingData: BindingData;\r\n\r\n  /**\r\n   * UI状态\r\n   */\r\n  public uiState: UIState;\r\n\r\n  /**\r\n   * 状态机\r\n   */\r\n  public stateMachine: StateMachine;\r\n\r\n  /**\r\n   * 表单\r\n   */\r\n  public form: Form;\r\n\r\n  /**\r\n   * 所属组件\r\n   */\r\n  public frameComponent: FrameComponent;\r\n\r\n  /**\r\n   * 异常处理\r\n   */\r\n  public exceptionHandler: IExceptionHandler;\r\n\r\n  /**\r\n   * 表单命名空间\r\n   */\r\n  public namespace: string;\r\n\r\n  public variableParseService: VariableParseService;\r\n\r\n  public metadata: IContextMetadata = {\r\n    identify: '',\r\n    namespace: '',\r\n    commands: null,\r\n    form: null,\r\n    formControls: null,\r\n    subForms: null,\r\n    stateMachine: null,\r\n    uiStates: null,\r\n    bindingTo: ''\r\n  };\r\n\r\n  /**\r\n   * 暂停事件抛出\r\n   */\r\n  public suspend: boolean;\r\n  public expressionEngineImpl: ExpressionEngineImpl;\r\n  public expressionManager: ExpressionManager;\r\n  public expressionResult: ExpressionResult;\r\n  /**\r\n   * 索引(从0开始)\r\n   */\r\n  public index: number;\r\n  /**\r\n   * 多语\r\n   */\r\n  public translate: Translate;\r\n  /**\r\n   * 上下文销毁流\r\n   */\r\n  public destorySignal: Subject<any>;\r\n  /**\r\n   * 组件引用管理\r\n   */\r\n  public componentRefManager: ComponentRefManager = new ComponentRefManager();\r\n  /**\r\n   * 构造函数\r\n   * @param injector 注入器\r\n   */\r\n  constructor(public injector: Injector, @Optional() @SkipSelf() parent: FrameContext) {\r\n    super();\r\n    // 在解析模式下，通过依赖注入获取不到AppContext时，返回null，在子类中进行赋值。\r\n    this.appContext = injector.get(AppContext);\r\n    this.destorySignal = new Subject<any>();\r\n    // 确定父子关系\r\n    // 必须对appContext进行判断，原因如下：\r\n    // 1、否则会导致动态路由表单中，被路由的表单的RootFrameContext变成主表单的RootFrameContext；\r\n    // 2、进而导致从RootFrameContext上拿VO变量拿不到。\r\n    if (!parent || parent.appContext !== this.appContext) { // 取消 appContext 的判断\r\n      this.parent = null;\r\n      this.root = this;\r\n    } else {\r\n      this.parent = parent;\r\n      this.root = parent.root;\r\n    }\r\n    this.frameId = injector.get<string>(FRAME_ID);\r\n    if (this.appContext.contextMetadataManager.exsit(this.frameId)) {\r\n      this.metadata = this.appContext.contextMetadataManager.getContextMetadataByName(this.frameId);\r\n    }\r\n    this.namespace = injector.get(NAMESPACE, null);\r\n    this.bindingData = this.injector.get<BindingData>(BindingData, new BindingData());\r\n    if (!this.appContext.useIsoluteEventBus || (this.appContext.useIsoluteEventBus && !this.appContext.isoluteEventBus)) {\r\n      this.eventBus = this.injector.get(EventBus, null, InjectFlags.Optional);\r\n    } else {\r\n      this.eventBus = this.appContext.isoluteEventBus;\r\n    }\r\n    this.form = this.injector.get<Form>(Form, new Form());\r\n    this.repository = this.injector.get(Repository, this.appContext.repository);\r\n    this.uiState = this.injector.get<UIState>(UIState, new UIState());\r\n    const defaultViewModel = new ViewModel();\r\n    defaultViewModel.setMetadata(this.metadata);\r\n    this.viewModel = this.injector.get<ViewModel>(ViewModel, defaultViewModel);\r\n    this.variableParseService = injector.get<VariableParseService>(VariableParseService, new VariableParseService([\r\n      new FrameIdVariableParser(),\r\n      new DataVariableParser(),\r\n      new UIStateVariableParser(),\r\n      new StateMachineVariableParser(),\r\n      new CommandVariableParser()\r\n    ]));\r\n    // 注入exceptionHandler\r\n    this.exceptionHandler = injector.get<IExceptionHandler>(EXCEPTION_HANDLER, null, InjectFlags.Optional);\r\n    // 初始化多语服务\r\n    const translate = injector.get<Translate>(TranslateToken, null);\r\n    this.translate = translate;\r\n    TranslateService.setTranslate(translate);\r\n    // 初始化用户配置\r\n    const userSettings = injector.get<UserSettings>(UserSettingsToken, null);\r\n    UserSettingsService.setUserSettings(userSettings);\r\n    this.initializeRepository();\r\n    this.appContext.regFrameContext(this);\r\n    this.registerAppContextDestroyEvent();\r\n  }\r\n  dispose(options?: any): void {\r\n    if (this.isDisposed) {\r\n      return;\r\n    }\r\n    this.isDestoried = true;\r\n    this.isDisposed = true;\r\n    if (this.destorySignal) {\r\n      this.destorySignal.next();\r\n      this.destorySignal.complete();\r\n    }\r\n    if (this.appContext) {\r\n      this.appContext.frameContextManager.unregFrameContext(this);\r\n      this.appContext.frameComponentRefresher.unregFrameContext(this);\r\n    }\r\n    if (this.appContext && this.isRootFrameContext() === true) {\r\n      const viewModelNames = this['viewModelNames'];\r\n      if (viewModelNames && Array.isArray(viewModelNames)) {\r\n        viewModelNames.forEach(name => {\r\n          this[name] = null;\r\n        });\r\n      }\r\n      this.appContext.unregisterFromManager();\r\n    }\r\n    if (this.bindingData) {\r\n      this.bindingData.dispose();\r\n      // this.bindingData = null;\r\n    }\r\n    if (this.viewModel) {\r\n      this.viewModel.dispose();\r\n    }\r\n    if (this.form) {\r\n      this.form.dispose();\r\n      this.form = null;\r\n    }\r\n    if (this.commandBus) {\r\n      this.commandBus.dispose();\r\n      this.commandBus = null;\r\n    }\r\n    TranslateService.dispose();\r\n    // this.root = null;\r\n    // this.parent = null;\r\n    // this.uiState = null;\r\n    this.frameComponent = null;\r\n    this.repository = null;\r\n    // this.stateMachine = null;\r\n    // this.appContext = null;\r\n    this.exceptionHandler = null;\r\n    this.expressionManager = null;\r\n    this.expressionEngineImpl = null;\r\n    this.variableParseService = null;\r\n    this.eventBus = null;\r\n    this.translate = null;\r\n    this.injector = null;\r\n    this.expressionResult = null;\r\n    UserSettingsService.setUserSettings(null);\r\n  }\r\n  ngOnDestroy(): void {\r\n    this.dispose();\r\n  }\r\n  /**\r\n   * 通过组件标识获取对应的组件实例\r\n   * @param id 组件标识\r\n   * @returns \r\n   */\r\n  public getComponentById<T>(id: string): T {\r\n    const components = this.componentRefManager.get(id);\r\n    if (components && components.length > 0) {\r\n      const component = components[0] as T;\r\n      return component;\r\n    }\r\n    return null;\r\n  }\r\n  /**\r\n   * 获取指定标识的所有组件\r\n   * @param id 组件标识\r\n   */\r\n  public getComponentsById<T>(id: string): T[] {\r\n    return this.componentRefManager.get(id) as T[];\r\n  }\r\n  bindInjector(componentInjector: Injector) {\r\n    this.injector = componentInjector;\r\n  }\r\n\r\n  // #region 初始化\r\n\r\n  /**\r\n   * 初始化\r\n   * @todo:\r\n   * 1、CommandHandler中的服务可能会注入Context，所以CommandHandler创建时必须已经存在ComponentContext\r\n   * 2、ViewModel的buildCommands中会使用CommandBus，为了保证顺序，将ViewModel的创建也放在init中。\r\n   */\r\n  public init(frameComponent: FrameComponent) {\r\n    this.frameComponent = frameComponent;\r\n    this.initializeBindingData();\r\n    this.initializeStateMachine();\r\n    this.initializeUiState();\r\n    this.initializeForm();\r\n    this.initializeCommandBus();\r\n    this.initializeViewModel();\r\n    this.registerExceptionHandler();\r\n    this.initExpression();\r\n    this.appContext.frameComponentRefresher.regFrameComponent(this.frameId, this.frameComponent);\r\n  }\r\n  public initExpression() {\r\n    this.expressionEngineImpl = this.injector.get<ExpressionEngineImpl>(ExpressionEngineImpl, null);\r\n    this.expressionManager = this.injector.get<ExpressionManager>(ExpressionManager, null);\r\n    const expressionResultFactory = this.injector.get<ExpressionResultFactory>(ExpressionResultFactory, null);\r\n    this.expressionResult = this.injector.get<ExpressionResult>(ExpressionResult, null);\r\n  }\r\n  /**\r\n   * 订阅异常消息\r\n   */\r\n  protected registerExceptionHandler() {\r\n    // tslint:disable: no-string-literal\r\n    const formAppContext = this.getFormAppContext();\r\n    const applicationId = formAppContext.ApplicationId;\r\n    window[window.location.href] = applicationId;\r\n    if (this.exceptionHandler !== null) {\r\n      const applicationContext = window[applicationId] = window[applicationId] || {};\r\n      if (this.eventBus !== null && this.isRootFrameContext()) {\r\n        applicationContext.isExceptionHandlerExist = true;\r\n        this.exceptionHandler.setContext(this.appContext);\r\n        this.eventBus.on('Exception', '', 'onException', formAppContext, (error) => {\r\n          if (this.isDestoried === true) {\r\n            return;\r\n          }\r\n          if (error && error.error) {\r\n            try {\r\n              error.error.__frame_context__ = this;\r\n            } catch { }\r\n          }\r\n          this.exceptionHandler.handle(error);\r\n        });\r\n      }\r\n      this.destorySignal.subscribe(() => {\r\n        this.eventBus.off('Exception', '', 'onException', formAppContext);\r\n      });\r\n    }\r\n  }\r\n  protected registerAppContextDestroyEvent() {\r\n    if (this.appContext && this.appContext.destorySignal) {\r\n      this.appContext.destorySignal.subscribe(() => {\r\n        if (this.stateMachine) {\r\n          this.stateMachine.dispose();\r\n          this.stateMachine = null;\r\n        }\r\n        if (this.repository) {\r\n          this.repository.dispose();\r\n        }\r\n      });\r\n    }\r\n  }\r\n  /**\r\n   * 获取表单appcontext，即最上层appcontext\r\n   */\r\n  public getFormAppContext() {\r\n    return this.appContext;\r\n  }\r\n  /**\r\n   * 获取frameId\r\n   * @description 获取完整的FrameId，在非普通表单中该值等于frameId，在组合表单中该值为namespace_frameId\r\n   */\r\n  public getFrameId(relativeFrameId: string) {\r\n    if (!relativeFrameId) {\r\n      return this.frameId;\r\n    }\r\n    if (this.namespace && this.namespace.length > 0) {\r\n      return `${this.namespace}_${relativeFrameId}`;\r\n    } else {\r\n      return relativeFrameId;\r\n    }\r\n  }\r\n  /**\r\n   * 初始化Repository\r\n   */\r\n  private initializeRepository() {\r\n\r\n    this.repository.setPaginationConfig(this.repository.paginationInfo);\r\n  }\r\n\r\n  private initializeForm() {\r\n    // 设置Form语言服务\r\n    // this.form.setTranslateService(translateService);\r\n    // 初始化Form，提取FormControl定义，添加FormControl\r\n    // this.form.init(this.bindingData, this.metadata.bindingTo, this);\r\n    // Form\r\n    this.form = this.injector.get<Form>(Form, null);\r\n    if (this.form) {\r\n      // 设置Form语言服务\r\n      this.form.setTranslateService(this.injector.get(TranslateToken, null));\r\n      // 初始化Form，提取FormControl定义，添加FormControl\r\n      const bindingPath = this.viewModel.bindingPath || this.metadata.bindingTo;\r\n      this.form.init(this.bindingData, bindingPath, this);\r\n    }\r\n  }\r\n\r\n  private initializeStateMachine() {\r\n    // StateMachine 状态机需要在绑定数据之后加载\r\n    this.stateMachine = this.injector.get<StateMachine>(StateMachine, null);\r\n    if (this.stateMachine) {\r\n      this.stateMachine.initialize(this, this.variableParseService);\r\n    }\r\n  }\r\n\r\n  private initializeCommandBus() {\r\n    const handlerRegistry = this.injector.get<CommandHandlerRegistry>(CommandHandlerRegistry,\r\n      new CommandHandlerRegistry(this.metadata.commandHandlers));\r\n    const extendsRegistry = this.injector.get<CommandHandlerExtenderRegistry>(CommandHandlerExtenderRegistry,\r\n      new CommandHandlerExtenderRegistry(this.metadata.commandHandlerExtends));\r\n    const commandHandlerFactory = new CommandHandlerFactory(handlerRegistry, extendsRegistry, this, this.variableParseService);\r\n    this.commandBus = new CommandBus(commandHandlerFactory);\r\n  }\r\n\r\n  /**\r\n   * 初始化ViewModel\r\n   * @todo\r\n   * 1、需要按照一定的顺序进行初始化，否则依赖无法正确处理；\r\n   * 2、暂时使用init解决Context和其他部分的循环依赖问题，待优化；\r\n   */\r\n  private initializeViewModel() {\r\n    if (!this.metadata.bindingTo) {\r\n      this.metadata.bindingTo = this.viewModel.bindingPath;\r\n    }\r\n    this.viewModel.init(this);\r\n    this.regViewModel(this.viewModel);\r\n  }\r\n\r\n\r\n  /**\r\n   * 初始化BindingData\r\n   * @summary\r\n   * 老表单：repositoryName为空，复制当前Repository里的数据；\r\n   * 新表单：repositoryName有值，引用全局BindingData里的数据；\r\n   */\r\n  private initializeBindingData() {\r\n    const repositoryName = this.repository.name;\r\n    const isRunAtHighSpeedMode = this.appContext.runMode === RunMode.highSpeed;\r\n    if (repositoryName && isRunAtHighSpeedMode) {\r\n      const repositoryBindingData = this.appContext.bindingDataManager.getBindingDataByName(repositoryName);\r\n      this.bindingData.initByBindingList(repositoryBindingData.list, this.viewModel.bindingPath);\r\n      this.bindingData.pagingInfo = repositoryBindingData.pagingInfo;\r\n      this.bindingData.setDataTypeInfo(this.repository.entityTypeInfo);\r\n      EntityUtil.watchReposiroty(this.repository, this.bindingData);\r\n    } else {\r\n      this.bindingData.initByRepository(this.repository, this.viewModel.bindingPath);\r\n      EntityUtil.watchReposiroty(this.repository, this.bindingData);\r\n      this.bindingData.changes.subscribe((change: Change) => {\r\n        if (change.type === ChangeType.GlobalSelectionChanged) {\r\n          this.appContext.handleSelectChange(change, this);\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n\r\n  /**\r\n   * 初始化UIState\r\n   * 合并路由参数到UIState中\r\n   */\r\n  private initializeUiState() {\r\n    const isInFramework = window.location.href.indexOf('platform') > -1;\r\n    const paramTypeTransform = this.injector.get<boolean>(PARAM_TYPE_TRANSFORM_TOKEN, false);\r\n    // 获取UIState\r\n    this.uiState = this.injector.get<UIState>(UIState, null);\r\n    if (!this.uiState) {\r\n      return;\r\n    }\r\n    this.uiState.paramTypeTransform = paramTypeTransform;\r\n    this.uiState.initialize(this);\r\n    // 获取路由参数\r\n    const url = (this.appContext && this.appContext.router && this.appContext.router.url) || '';\r\n    const routerParamService = new RouterParamService();\r\n    const routerParams = routerParamService.getParams(url);\r\n\r\n    // 在UIState为路由参数创建属性\r\n    Object.keys(routerParams).forEach((propName: string) => {\r\n      Object.defineProperty(this.uiState, propName, {\r\n        get: () => {\r\n          return routerParams[propName];\r\n        }\r\n      });\r\n    });\r\n  }\r\n\r\n  /**\r\n   * 注册子ViewModel\r\n   * @todo\r\n   * 1、propName写死了\r\n   */\r\n  protected regViewModel(viewModel: ViewModel): void {\r\n    if (this.appContext && this.appContext.viewModelManager.exsit(viewModel.name) === false) {\r\n      this.appContext.viewModelManager.register(viewModel.name, viewModel);\r\n    }\r\n    const className = viewModel.constructor.name;\r\n    const parentContext = this.parent;\r\n    let parentViewModel = null;\r\n    if (parentContext && parentContext.viewModel) {\r\n      parentViewModel = parentContext.viewModel;\r\n    }\r\n    if (!parentViewModel) {\r\n      return;\r\n    }\r\n    // 优先使用生成器生成的name\r\n    const childViewModels = parentViewModel['childViewModels'];\r\n    let viewModelName = null;\r\n    if (childViewModels) {\r\n      const name = viewModel.constructor.name;\r\n      viewModelName = childViewModels[viewModel.name] || childViewModels[name];\r\n    } else if (className.length === 1) {\r\n      const classNameTokens = viewModel.name.split('-').map((nameToken, index) => {\r\n        if (index > 0 && nameToken.length) {\r\n          const pasicalName = nameToken.charAt(0).toLocaleUpperCase() + nameToken.substr(1, nameToken.length - 1);\r\n          return pasicalName;\r\n        } else if (index === 0 && nameToken.length) {\r\n          const camelName = nameToken.charAt(0).toLocaleLowerCase() + nameToken.substr(1, nameToken.length - 1);\r\n          return camelName;\r\n        }\r\n        return nameToken;\r\n      });\r\n      viewModelName = classNameTokens.join('');\r\n    }\r\n    // 兼容产品部老表单的写法，如果需要vm name统一，应按照此规则\r\n    if (!viewModelName) {\r\n      viewModelName = className[0].toLowerCase() + className.substring(1, className.length);\r\n    }\r\n    parentViewModel['viewModelNames'] = parentViewModel['viewModelNames'] || [];\r\n    parentViewModel[viewModelName] = viewModel;\r\n    parentViewModel['viewModelNames'].push(viewModelName);\r\n    viewModel.bindToParent(parentViewModel);\r\n  }\r\n\r\n  // #endregion\r\n\r\n  /**\r\n   * 检查是否为根FrameContext\r\n   * @summary\r\n   * 检查该FrameContext是不是所在AppContext中的根FrameContext\r\n   */\r\n  public isRootFrameContext() {\r\n    return this.parent === null || (this.appContext.runMode === RunMode.highSpeed && this.getVirtualRootFrameContext().frameComponent['isDialogRootComponent'] === true);\r\n  }\r\n  /**\r\n   * 通过namespace获取当前表单的root-framecontext(非整个表单)\r\n   * @description\r\n   * 如果为组合表单，其当前表单的root-framecontext为单个表单的framecontext，而非整个表单的framecontext\r\n   */\r\n  public getVirtualRootFrameContext() {\r\n    let formFrameContext: FrameContext = this;\r\n    let parent = this.parent;\r\n    while (parent) {\r\n      // 兼容没有重新编译的表单，如果判断parent.namespace存在会导致获取不到root-framecontext\r\n      if (parent.namespace === this.namespace) {\r\n        formFrameContext = parent;\r\n        parent = parent.parent;\r\n      } else {\r\n        break;\r\n      }\r\n    }\r\n    return formFrameContext;\r\n  }\r\n\r\n\r\n  public getContextById(identify: string): any {\r\n    return this.appContext.getContextById(identify);\r\n  }\r\n\r\n  public getViewModel(viewModelName: string): ViewModel {\r\n    const renderAppContext = this.appContext;\r\n    if (renderAppContext) {\r\n      return renderAppContext.viewModelManager.getViewModelByName(viewModelName);\r\n    }\r\n    return null;\r\n  }\r\n\r\n  public attachViewComponent(viewComponent: FrameComponent) {\r\n    this.frameComponent = viewComponent;\r\n    this.appContext.frameComponentRefresher.regFrameComponent(this.frameId, this.frameComponent);\r\n  }\r\n\r\n  public invoke(actionPath: string, $event: any) {\r\n    const actionBindingPath = actionPath.split('.');\r\n    const actionName = actionBindingPath[actionBindingPath.length - 1];\r\n    const bindingViewModel = actionBindingPath.length === 1 ? this.viewModel :\r\n      this.getViewModel(actionBindingPath[actionBindingPath.length - 2]);\r\n    if (!bindingViewModel) {\r\n      alert(`未匹配到'${actionPath}'命令的视图模型，请检查事件是否配置正确。`);\r\n    }\r\n    return bindingViewModel[actionName]($event);\r\n  }\r\n}\r\n","/*\r\n * @Author: Witt\r\n * @Date: 2019-03-12 14:59:22\r\n * @Last Modified by: aalizzwell\r\n * @Last Modified time: 2019-06-15 17:26:07\r\n */\r\n\r\nimport { Injector, Injectable, InjectFlags, Optional, ChangeDetectorRef, OnDestroy, ElementRef, Renderer, Renderer2, RendererFactory2, ComponentRef, OnInit } from '@angular/core';\r\nimport { FrameContext } from './frame_context';\r\nimport { ViewModel } from '../view-model/index';\r\nimport { Subscription, Declaration } from '../event-mechanism/index';\r\nimport { EventPipe } from '../event-bus-new/index';\r\nimport { IDisposable } from '../core/index';\r\nimport { FRAME_COMPONENT_INIT_HANDLER_TOKEN, onFrameComponentInit } from './tokens';\r\nimport { Subject } from 'rxjs';\r\n\r\n@Injectable()\r\nabstract class FrameComponent implements OnInit, OnDestroy, IDisposable {\r\n\r\n  /**\r\n   * 变更检测器\r\n   */\r\n  private cd: ChangeDetectorRef;\r\n\r\n  /**\r\n   * 框架ID\r\n   */\r\n  public id: string;\r\n\r\n  /**\r\n   * 框架上下文\r\n   */\r\n  public context: FrameContext;\r\n\r\n  /**\r\n   * 视图模型\r\n   */\r\n  public viewModel: ViewModel;\r\n\r\n  /**\r\n   * 订阅事件\r\n   */\r\n  public subscription: Subscription;\r\n\r\n  /**\r\n   * 公开事件\r\n   */\r\n  public declaration: Declaration;\r\n\r\n  /**\r\n   * 该组件订阅的EventPipes\r\n   */\r\n  private eventPipes: IDisposable[];\r\n\r\n  private initialized = false;\r\n  /**\r\n   * 组件销毁流\r\n   */\r\n  public destorySignal: Subject<any>;\r\n  /**\r\n   * 框架构造函数\r\n   * @param injector 注入器\r\n   */\r\n  constructor(protected injector: Injector) {\r\n    this.context = this.injector.get<FrameContext>(FrameContext, null);\r\n    if (this.context) {\r\n      this.initialize();\r\n    }\r\n    this.destorySignal = new Subject<any>();\r\n    // this.context.init(this);\r\n    // this.viewModel = this.context.viewModel;\r\n    // this.cd = this.getChangeDetectorRef();\r\n\r\n    // // 必须先执行context的初始化，然后再初始化Subscription\r\n    // this.initPublicEvent();\r\n\r\n    // this.initSubscription();\r\n\r\n    // this.restComponent();\r\n  }\r\n  /**\r\n   * 是否为表格组件\r\n   * @description 返回true/false时可以信任，但如果返回的是undefined则不应信任\r\n   * @warning 该属性依赖了生成代码，如果非标准的生成型工程也会导致判断失败。\r\n   */\r\n  public get isGridComponent() {\r\n    if (this.context && this.context.viewModel) {\r\n      const dataGridColumnsName = this.context.viewModel['dataGridColumnsName'] || null;\r\n      return dataGridColumnsName ? true : false;\r\n    }\r\n    return undefined;\r\n  }\r\n  dispose(options?: any) {\r\n    if (this.eventPipes) {\r\n      this.eventPipes.forEach((eventPipe: IDisposable) => {\r\n        (eventPipe as EventPipe).disposeByCaller(this);\r\n      });\r\n    }\r\n    this.cd = null;\r\n    // this.viewModel = null;\r\n    this.context.dispose();\r\n    if (this.destorySignal) {\r\n      this.destorySignal.next();\r\n      this.destorySignal.complete();\r\n    }\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.initialize();\r\n  }\r\n\r\n  private initialize() {\r\n    if (!this.initialized) {\r\n      this.context.init(this);\r\n      this.viewModel = this.context.viewModel;\r\n      this.cd = this.getChangeDetectorRef();\r\n\r\n      // 必须先执行context的初始化，然后再初始化Subscription\r\n      this.initPublicEvent();\r\n\r\n      this.initSubscription();\r\n\r\n      this.restComponent();\r\n\r\n      this.onFrameComponentInit();\r\n      this.initialized = true;\r\n    }\r\n  }\r\n  /**\r\n   * 执行组件初始化\r\n   */\r\n  private onFrameComponentInit() {\r\n    const frameComponentInitHandlers = this.injector.get<onFrameComponentInit[]>(FRAME_COMPONENT_INIT_HANDLER_TOKEN, null);\r\n    if (frameComponentInitHandlers && Array.isArray(frameComponentInitHandlers) && frameComponentInitHandlers.length > 0) {\r\n      frameComponentInitHandlers.forEach((handler: onFrameComponentInit) => {\r\n        handler.onComponentInit(this.context);\r\n      });\r\n    }\r\n  }\r\n  /**\r\n   * 获取变更检测器实例\r\n   * @todo：应该通过注入获取，但注入会引起表单编译。\r\n   */\r\n  private getChangeDetectorRef() {\r\n\r\n    // const cd = this.get<ChangeDetectorRef>(ChangeDetectorRef, null, InjectFlags.Optional);\r\n    const cd = this.injector.get(ChangeDetectorRef, null);\r\n    return cd;\r\n  }\r\n\r\n  /**\r\n   * 将当前组件脱离变更检测树\r\n   */\r\n  public detach() {\r\n    if (this.isCdValid() === false) {\r\n      return;\r\n    }\r\n    this.cd.detach();\r\n  }\r\n\r\n  /**\r\n   * 将当前组件重新加入变更检测树\r\n   */\r\n  public reattach() {\r\n    if (this.isCdValid() === false) {\r\n      return;\r\n    }\r\n    this.cd.reattach();\r\n  }\r\n\r\n  /**\r\n   * 对当前组件进行一次变更检查\r\n   */\r\n  public detectChanges() {\r\n    if (this.isCdValid() === false) {\r\n      return;\r\n    }\r\n    this.cd.detectChanges();\r\n  }\r\n\r\n  /**\r\n   * 检测ChangeDetection是否有效\r\n   * @todo: Can't be depend on the destroyed property, destroyed.\r\n   */\r\n  private isCdValid() {\r\n    return this.cd && this.cd['destroyed'] === false || false;\r\n  }\r\n\r\n  /**\r\n   * 重置组件状态\r\n   * @todo：AppContext是全局的，\r\n   */\r\n  public restComponent() {\r\n\r\n    if (this.context !== this.context.root) {\r\n      return;\r\n    }\r\n\r\n    // 1、如果AppContext不是root并且父AppContext也不是root不清理;\r\n    // 2、表单Module里注入了FARRIS_DEVKIT_APP_PROVIDERS里面有一个冗余的AppContext注入\r\n    //    导致所有AppContext的根是该冗余的AppContext，所以要检测parent.parent。\r\n    // 只清理根组件的session\r\n    if (this.context.appContext.parent !== null && this.context.appContext.parent.parent !== null) {\r\n      return;\r\n    }\r\n\r\n    // Repository被注册到全局了，模块依赖注入中的对象，没有重置时机，临时在根组件中进行注销。\r\n    // @todo：应该清理全部repository，目前缺少全局管理所有Repository的地方。\r\n    this.context.repository.reset();\r\n    // 重置组件绑定数据\r\n    this.context.bindingData.reset();\r\n  }\r\n\r\n  public ngOnDestroy() {\r\n    this.dispose();\r\n  }\r\n\r\n  /**\r\n   * 初始化事件订阅\r\n   */\r\n  private initSubscription() {\r\n    this.subscription = this.getSubscription();\r\n    if (!this.subscription) {\r\n      return;\r\n    }\r\n\r\n    this.eventPipes = this.subscription.init(this);\r\n  }\r\n\r\n\r\n  /**\r\n   * 获取component对应的订阅\r\n   * @returns \r\n   */\r\n  public getSubscription() {\r\n    return this.injector.get<Subscription>(Subscription, null);\r\n  }\r\n\r\n  private initPublicEvent() {\r\n\r\n    this.declaration = this.getDeclaration();\r\n    if (!this.declaration) {\r\n      return;\r\n    }\r\n\r\n    this.declaration.init(this);\r\n  }\r\n\r\n  /**\r\n   * 获取当前component对应的declaration\r\n   * @returns \r\n   */\r\n  public getDeclaration() {\r\n    return this.injector.get<Declaration>(Declaration, null);\r\n  }\r\n\r\n  /**\r\n   * 事件触发器，触发事件发布\r\n   * @param eventName 待发布事件\r\n   */\r\n  public trigger(eventName: string) {\r\n    const subscription = this.context.commandBus.executingCommandCount$.subscribe((executingCommandCount: number) => {\r\n      if (executingCommandCount !== 0) {\r\n        return;\r\n      }\r\n      this.innerTrigger(eventName);\r\n\r\n      // @todo\r\n      // subscription存在未undefine的情况，待进一步排查。\r\n      if (subscription) {\r\n        subscription.unsubscribe();\r\n      } else {\r\n        setTimeout(() => {\r\n          if (subscription) {\r\n            subscription.unsubscribe();\r\n          }\r\n        }, 0);\r\n      }\r\n\r\n    });\r\n  }\r\n\r\n  /**\r\n   * 内部触发变更检测\r\n   */\r\n  private innerTrigger(eventName: string) {\r\n\r\n    // 根据事件名，查找对应的事件处理器\r\n    const eventHandler: any = this.declaration && this.declaration[eventName];\r\n    if (!eventHandler) {\r\n      return;\r\n    }\r\n    // 执行事件\r\n    eventHandler();\r\n  }\r\n\r\n}\r\n\r\nexport { FrameComponent };\r\n","\r\n/**\r\n * 上下文事件\r\n */\r\nclass FrameEvent {\r\n\r\n  /**\r\n   * 事件类型\r\n   */\r\n  type: string;\r\n\r\n  /**\r\n   * 参数\r\n   */\r\n  data?: any;\r\n\r\n  /**\r\n   * 框架id数组\r\n   */\r\n  frameIds?: string[];\r\n}\r\n\r\nexport { FrameEvent };\r\n","import { Injectable } from '@angular/core';\r\nimport { Subject } from 'rxjs';\r\nimport { filter } from 'rxjs/operators';\r\nimport { FrameEvent } from './frame_event';\r\n\r\n\r\n/**\r\n * 框架事件总线\r\n */\r\n@Injectable()\r\nclass FrameEventBus {\r\n\r\n  /**\r\n   * @todo 暂不实现对订阅的注销\r\n   */\r\n  private subscriptions: any;\r\n\r\n  /**\r\n   * 事件流\r\n   */\r\n  public events: Subject<FrameEvent> = new Subject<FrameEvent>();\r\n\r\n\r\n  /**\r\n   * 注册事件处理\r\n   */\r\n  on(eventType: string, eventHandler: any, frameId: string) {\r\n    this.events.pipe(filter((event: FrameEvent) => {\r\n      if (event.type !== eventType) {\r\n        return false;\r\n      }\r\n      return !event.frameIds || event.frameIds.indexOf(frameId) > -1;\r\n    })).subscribe(eventHandler);\r\n  }\r\n\r\n  /**\r\n   * 取消事件处理\r\n   */\r\n  off(eventType: string, frameId: string): void {\r\n    throw new Error('暂不实现');\r\n  }\r\n\r\n  /**\r\n   * 触发事件\r\n   */\r\n  trigger(eventType: string, eventData?: any, frameIds?: string[]) {\r\n    const event: FrameEvent = {\r\n      type: eventType,\r\n      data: eventData,\r\n      frameIds: frameIds\r\n    };\r\n    this.events.next(event);\r\n  }\r\n}\r\n\r\nexport { FrameEventBus };\r\n","/**\r\n * 命令处理器工厂相关定义\r\n * @author Witt<jiwt@inspur.com>\r\n */\r\n\r\nimport { Injectable } from '@angular/core';\r\nimport { FrameContext } from '../frame/index';\r\nimport { CommandHandler } from './command_handler';\r\nimport { CommandHandlerRegistry } from './command_handler_registry';\r\nimport { CommandHandlerExtender } from './command_handler_extender';\r\nimport { CommandHandlerExtenderRegistry } from './command_handler_extender_registry';\r\nimport { VariableParseService } from '../variable/variable_parse_service';\r\n\r\n/**\r\n * 命令处理器工厂\r\n */\r\n@Injectable()\r\nclass CommandHandlerFactory {\r\n\r\n  /**\r\n   * 构造函数\r\n   * @param handlerRegistry  命令处理注册器\r\n   * @param extenderRegistry 命令处理扩展注册器\r\n   */\r\n  constructor(\r\n    private handlerRegistry: CommandHandlerRegistry,\r\n    private extenderRegistry: CommandHandlerExtenderRegistry,\r\n    private frameContext: FrameContext,\r\n    private variableParseService: VariableParseService\r\n  ) {\r\n  }\r\n\r\n  /**\r\n   * 创建命令处理器\r\n   * @param   commandName 命令名称\r\n   * @returns 对应的命令处理器实例\r\n   */\r\n  public create(commandName: string): CommandHandler {\r\n    const rawHandler = this.handlerRegistry.get(commandName);\r\n    rawHandler.init(this.frameContext, this.variableParseService);\r\n    const extenders = this.extenderRegistry.get(commandName);\r\n\r\n    // 遍历extenders，依次对handler进行扩展\r\n    return extenders.reduce((handler: CommandHandler, extender: CommandHandlerExtender) => {\r\n      return extender.extend(handler);\r\n    }, rawHandler);\r\n  }\r\n  public dispose() {\r\n    this.handlerRegistry.dispose();\r\n    this.extenderRegistry.dispose();\r\n    this.frameContext = null;\r\n    this.variableParseService = null;\r\n  }\r\n}\r\n\r\nexport { CommandHandlerFactory };\r\n","/**\r\n * CommandBus相关定义\r\n * @author Witt<jiwt@inspur.com>\r\n */\r\n\r\nimport { HttpErrorResponse } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { IDisposable } from '../core';\r\nimport { Observable, BehaviorSubject, Subject } from 'rxjs';\r\nimport { tap } from 'rxjs/operators';\r\nimport { Command } from './command';\r\nimport { CommandHandlerFactory } from './command_handler_factory';\r\n\r\n/**\r\n * CommandBus用于派发Command，它接受一个Command实例，查找对应的CommandHandler，并执行。\r\n */\r\n@Injectable()\r\nclass CommandBus implements IDisposable{\r\n\r\n  /**\r\n   * handler工厂\r\n   */\r\n  private handlerFactory: CommandHandlerFactory;\r\n\r\n  /**\r\n   * 正在执行的命令数量流（请勿使用，后果自负）\r\n   */\r\n  public executingCommandCount$: BehaviorSubject<number>;\r\n\r\n  /**\r\n   * 正在执行的命令数量\r\n   */\r\n  private executingCommands: Command[];\r\n\r\n  /**\r\n   * 构造函数\r\n   */\r\n  public constructor(handlerFactory: CommandHandlerFactory) {\r\n    this.handlerFactory = handlerFactory;\r\n    this.executingCommands = [];\r\n    this.executingCommandCount$ = new BehaviorSubject<number>(this.executingCommands.length);\r\n  }\r\n\r\n  /**\r\n   * 派发命令\r\n   * @param command 要派发的命令\r\n   */\r\n  public dispatch(command: Command): Observable<any> {\r\n    const commandResult$ = new Subject();\r\n    this.executeCommand(command).subscribe({\r\n      next: (lastTaskResult: any) => {\r\n        commandResult$.next(lastTaskResult);\r\n        commandResult$.complete();\r\n      },\r\n      complete: () => {\r\n        commandResult$.complete();\r\n        this.removeCommandFromExecutingQueue(command);\r\n      },\r\n      error: (error: any) => {\r\n        commandResult$.error(error);\r\n        this.removeCommandFromExecutingQueue(command, !this.is401Error(error));\r\n      }\r\n    });\r\n    return commandResult$;\r\n  }\r\n\r\n  /**\r\n   * dispose\r\n   */\r\n  public dispose(){\r\n    this.handlerFactory.dispose();\r\n  }\r\n  /**\r\n   * 执行命令并返回最后一个任务的执行结果流\r\n   */\r\n  private executeCommand(command: Command): Observable<any> {\r\n    this.addCommandToExecutingQueue(command);\r\n    const commandName = command.name;\r\n    const handler = this.handlerFactory.create(commandName);\r\n    const lastTaskResult$ = handler.execute(command);\r\n    return lastTaskResult$;\r\n  }\r\n\r\n\r\n  /**\r\n   * 添加到执行队列\r\n   */\r\n  private addCommandToExecutingQueue(command: Command) {\r\n    this.executingCommands.push(command);\r\n    this.executingCommandCount$.next(this.executingCommands.length);\r\n  }\r\n\r\n  /**\r\n   * 从执行队列中移除\r\n   */\r\n  private removeCommandFromExecutingQueue(command: Command, postOrNot: boolean = true) {\r\n    this.executingCommands = this.executingCommands.filter((executingCommand: Command) => {\r\n      return executingCommand !== command;\r\n    });\r\n    if (postOrNot === true) {\r\n      this.executingCommandCount$.next(this.executingCommands.length);\r\n    }\r\n  }\r\n\r\n  private is401Error(error: HttpErrorResponse) {\r\n    // 如果error为空，不认为是401错误\r\n    return error && error.status === 401;\r\n  }\r\n\r\n}\r\n\r\nexport { CommandBus };\r\n","import { CommandHandlerRegistry } from './command_handler_registry';\r\nimport { CommandHandlerExtenderRegistry } from './command_handler_extender_registry';\r\nimport { CommandHandlerFactory } from './command_handler_factory';\r\nimport { CommandBus } from './command_bus';\r\n\r\n\r\nexport const COMMAND_PROVIDERS = [\r\n  CommandHandlerRegistry,\r\n  CommandHandlerExtenderRegistry,\r\n  CommandHandlerFactory,\r\n  CommandBus,\r\n];\r\n","import { ReflectiveInjector } from '@angular/core';\r\nimport { isObservable, of, Subject } from 'rxjs';\r\nimport { CommandContext } from './command_context';\r\nimport { CommandHandler } from './command_handler';\r\nimport {\r\n  ControllerMethod, DeterminingStage, ExecutingStage,\r\n  ForkStage, MethodStage, StageParam\r\n} from './dynamic_command_handler_metadata';\r\n\r\n/**\r\n * @Injectable()\r\n * @NgCommandHandler({\r\n *     commandName: 'add1'\r\n * })\r\n * export class add1Handler extends CommandHandler {\r\n *     constructor(\r\n *         public _ListDataService1: ListDataService1,\r\n *         public _StateMachineService1: StateMachineService1\r\n *     ) {\r\n *         super();\r\n *     }\r\n *\r\n *     schedule() {\r\n *         this.addTask('append', (context: CommandContext) => {\r\n *             const args = [];\r\n *             return this.invoke(this._ListDataService1, 'append', args, context);\r\n *         });\r\n *\r\n *         this.addTask('transit', (context: CommandContext) => {\r\n *             const args = [\r\n *                 'Create'\r\n *                     ];\r\n *             return this.invoke(this._StateMachineService1, 'transit', args, context);\r\n *         });\r\n *\r\n *         this.addLink('append', 'transit', `1==1`);\r\n *     }\r\n * }\r\n */\r\n\r\n// const controllerMap = {\r\n//   imports: {\r\n//     ValidationService: '/platform/common/web/@farris/command-services.js',\r\n//     FocusInvalidService: '/platform/common/web/@farris/command-services.js',\r\n//     ChangeItemService: '/platform/common/web/@farris/command-services.js',\r\n//     UIStateService: '/platform/common/web/@farris/command-services.js',\r\n//     StateMachineService: '/platform/common/web/@farris/command-services.js',\r\n//     BindingDataService: '/platform/common/web/@farris/command-services.js',\r\n//     CommandService: '/platform/common/web/@farris/command-services.js',\r\n//     EntityTraversingService: '/platform/common/web/@farris/command-services.js',\r\n//     EntityManipulationService: '/platform/common/web/@farris/command-services.js',\r\n//     EntityAggregationService: '/platform/common/web/@farris/command-services.js',\r\n//     EntityListService: '/platform/common/web/@farris/command-services.js',\r\n//     EntityService: '/platform/common/web/@farris/command-services.js',\r\n//     ListDataService: '/platform/common/web/@farris/command-services.js',\r\n//     TreeDataService: '/platform/common/web/@farris/command-services.js',\r\n//     SubTreeDataService: '/platform/common/web/@farris/command-services.js',\r\n//     CardDataService: '/platform/common/web/@farris/command-services.js',\r\n//     SubListDataService: '/platform/common/web/@farris/command-services.js',\r\n//     RemoveDataService: '/platform/common/web/@farris/command-services.js',\r\n//     SaveDataService: '/platform/common/web/@farris/command-services.js',\r\n//     EditDataService: '/platform/common/web/@farris/command-services.js',\r\n//     FilterConditionDataService: '/platform/common/web/@farris/command-services.js',\r\n//     RemoteSummaryService: '/platform/common/web/@farris/command-services.js',\r\n//     BeActionService: '/platform/common/web/@farris/command-services.js',\r\n//     ApproveService: '/platform/common/web/@farris/command-services.js',\r\n//     PrintService: '/platform/common/web/@farris/command-services.js',\r\n//     AttachmentDataService: '/platform/common/web/@farris/command-services.js',\r\n//     AttachmentService: '/platform/common/web/@farris/command-services.js',\r\n//     FileService: '/platform/common/web/@farris/command-services.js',\r\n//     NavigationMiddlewareService: '/platform/common/web/@farris/command-services.js',\r\n//     GridMiddlewareService: '/platform/common/web/@farris/command-services.js',\r\n//     SidebarService: '/platform/common/web/@farris/command-services.js',\r\n//     FarrisFormService: '/platform/common/web/@farris/command-services.js',\r\n//     DialogService: '/platform/common/web/@farris/command-services.js',\r\n//     NavigationEventService: '/platform/common/web/@farris/command-services.js',\r\n//     NavigationService: '/platform/common/web/@farris/command-services.js',\r\n//     RouterService: '/platform/common/web/@farris/command-services.js',\r\n//     AuthorityService: '/platform/common/web/@farris/command-services.js',\r\n//     EndEditService: '/platform/common/web/@farris/command-services.js',\r\n//     BatchEditDialogService: '/platform/common/web/@farris/command-services.js',\r\n//     BatchEditService: '/platform/common/web/@farris/command-services.js',\r\n//     DiscussionGroupService: '/platform/common/web/@farris/command-services.js',\r\n//     LocalizationService: '/platform/common/web/@farris/command-services.js',\r\n//     DataGridService: '/platform/common/web/@farris/command-services.js',\r\n//     FormAttentionService: '/platform/common/web/@farris/command-services.js',\r\n//   }\r\n// };\r\n\r\ndeclare const System: any;\r\n\r\nexport class DynamicCommandHandler extends CommandHandler {\r\n\r\n  constructor(public commandName: string, private method: ControllerMethod) {\r\n    super();\r\n  }\r\n\r\n  public dynamicInvoke(serviceTocken: string, method: string, args: StageParam[], context: CommandContext) {\r\n    const serviceInstance = context.frameContext.injector.get(serviceTocken, null);\r\n    if (serviceInstance) {\r\n      this.setContextToServiceInstance(serviceInstance, context);\r\n      const parsedStageParams = this.parseService.parse(args, context) as StageParam[];\r\n      const parsedArgs = parsedStageParams.map(param => param.expression);\r\n      // tslint:disable-next-line: ban-types\r\n      const serviceMethod = serviceInstance[method] as Function;\r\n      return serviceMethod.apply(serviceInstance, parsedArgs);\r\n    }\r\n  }\r\n\r\n  public dynamicInvoke2(methodObject: ExecutingStage, context: CommandContext) {\r\n    const { source: serviceUri, service: serviceName, method } = methodObject;\r\n    const args = methodObject.params.map(stageParam => {\r\n      return Object.assign({}, stageParam);\r\n    });\r\n    const result$ = new Subject();\r\n    // const serviceSpecifer = controllerMap.imports[serviceUri] || serviceUri;\r\n    const serviceSpecifer = serviceUri && serviceUri.toLowerCase();\r\n    if (serviceSpecifer) {\r\n      System.import(serviceSpecifer)\r\n        .then((serviceModule: any) => {\r\n          const serviceConstructor = serviceModule[serviceName];\r\n          if (serviceConstructor) {\r\n            const originalContextInjector = context.frameContext.injector;\r\n            let serviceInstance;\r\n            // const resolvedReflectiveProviders = ReflectiveInjector.resolve([{ provide: serviceName, useClass: serviceConstructor }]);\r\n            if (context.frameContext.injector.get(serviceName, null)) {\r\n              serviceInstance = context.frameContext.injector.get(serviceName);\r\n            } else {\r\n              const resolvedReflectiveProviders = this.loadProvidersFromModule(serviceModule);\r\n              const reflectiveInjector = ReflectiveInjector.fromResolvedProviders(resolvedReflectiveProviders, context.frameContext.injector);\r\n              context.frameContext.injector = reflectiveInjector;\r\n              serviceInstance = reflectiveInjector.get(serviceName, null);\r\n            }\r\n\r\n            if (serviceInstance) {\r\n              this.setContextToServiceInstance(serviceInstance, context);\r\n              const parsedStageParams = this.parseService.parse(args, context) as StageParam[];\r\n              const parsedArgs = parsedStageParams.map(param => param.expression);\r\n              // tslint:disable-next-line: ban-types\r\n              const serviceMethod = serviceInstance[method] as Function;\r\n              const serviceMethodResult = serviceMethod.apply(serviceInstance, parsedArgs);\r\n              const result$$ = isObservable(serviceMethodResult) ? serviceMethodResult : of(serviceMethodResult);\r\n              result$$.subscribe({\r\n                next: (result: any) => {\r\n                  result$.next(result);\r\n                },\r\n                error: (error: any) => {\r\n                  result$.error(error);\r\n                },\r\n                complete: () => {\r\n                  result$.complete();\r\n                  context.frameContext.injector = originalContextInjector;\r\n                },\r\n              });\r\n              // return serviceMethod.apply(serviceInstance, parsedArgs);\r\n            }\r\n          }\r\n        });\r\n    }\r\n    return result$;\r\n  }\r\n\r\n  schedule() {\r\n    this.scheduleStages(this.method.stages, null);\r\n    // this.method.stages.reduce((preStage: MethodStage, currentStage: MethodStage) => {\r\n    //   if (currentStage.type === '0') {\r\n    //     this.addTask(currentStage.name, (context: CommandContext) => {\r\n    //       return this.dynamicInvoke2(currentStage as ExecutingStage, context);\r\n    //     });\r\n    //     if (preStage) {\r\n    //       this.addLink(preStage.name, currentStage.name, `1===1`);\r\n    //     }\r\n    //   } else if (currentStage.type === '2') {\r\n\r\n    //   } else {\r\n    //     throw new Error(`unknow method stage type, the ${currentStage.name}'s type is ${currentStage.type}`);\r\n    //   }\r\n    //   return currentStage;\r\n    // }, null);\r\n  }\r\n\r\n  scheduleStages(stages: MethodStage[], initialStage: MethodStage) {\r\n    stages.reduce((preStage: MethodStage, currentStage: MethodStage) => {\r\n      if (currentStage.type === 'executing') {\r\n        this.addTask(currentStage.name, (context: CommandContext) => {\r\n          return this.dynamicInvoke2(currentStage as ExecutingStage, context);\r\n        });\r\n      } else if (currentStage.type === 'fork') {\r\n        const forkStages = (currentStage as ForkStage).stages;\r\n        forkStages.forEach(forkStage => {\r\n          this.scheduleStages(forkStage.stages, forkStage);\r\n        });\r\n        this.scheduleStages((currentStage as DeterminingStage).stages, currentStage);\r\n      } else if (currentStage.type === 'determing') {\r\n        this.addTask(currentStage.name, (context: CommandContext) => {\r\n          return of(true);\r\n        });\r\n      } else {\r\n        throw new Error(`unknow method stage type, the ${currentStage.name}'s type is ${currentStage.type}`);\r\n      }\r\n      if (preStage) {\r\n        const condition = preStage.type === 'determing' ? (preStage as DeterminingStage).condition : `1===1`;\r\n        this.addLink(preStage.name, currentStage.name, condition);\r\n      }\r\n      return currentStage;\r\n    }, initialStage);\r\n  }\r\n\r\n  private loadProvidersFromModule(serviceModule: { [propertyName: string]: any }) {\r\n    const providerArray = [];\r\n    for (const propertyName in serviceModule) {\r\n      if (Object.prototype.hasOwnProperty.call(serviceModule, propertyName)) {\r\n        const propertyValue = serviceModule[propertyName];\r\n        if (this.isInjectableService(propertyValue)) {\r\n          // const providerName = propertyValue.name === 'e' ? propertyName : propertyValue.name;\r\n          const providerName = propertyName;\r\n          providerArray.push({ provide: providerName, useClass: propertyValue });\r\n          providerArray.push(propertyValue);\r\n        }\r\n      }\r\n    }\r\n    const resolvedReflectiveProviders = ReflectiveInjector.resolve(providerArray);\r\n    return resolvedReflectiveProviders;\r\n  }\r\n\r\n  private isInjectableService(propertyValue: any) {\r\n    let hasInjectableDecorator = false;\r\n    const isFunction = propertyValue instanceof Function;\r\n    if (isFunction && propertyValue.hasOwnProperty('decorators')) {\r\n      const decorators = propertyValue.decorators as any[];\r\n      const injectableDecorators = decorators.filter(decorator => {\r\n        if (decorator.type && decorator.type.prototype && decorator.type.prototype.ngMetadataName === 'Injectable') {\r\n          return decorator;\r\n        }\r\n      });\r\n      hasInjectableDecorator = injectableDecorators && injectableDecorators.length > 0;\r\n    } else if (isFunction && propertyValue.hasOwnProperty('__annotations__')) {\r\n      const decorators = propertyValue.__annotations__ as any[];\r\n      const injectableDecorators = decorators.filter(decoratorFactory => {\r\n        if (decoratorFactory && decoratorFactory.ngMetadataName && decoratorFactory.ngMetadataName === 'Injectable') {\r\n          return decoratorFactory;\r\n        }\r\n      });\r\n      hasInjectableDecorator = injectableDecorators && injectableDecorators.length > 0;\r\n    }\r\n    return hasInjectableDecorator;\r\n  }\r\n}\r\n","/*\r\n * @Author: aalizzwell \r\n * @Date: 2019-05-30 11:08:18 \r\n * @Last Modified by: aalizzwell\r\n * @Last Modified time: 2019-06-01 17:10:04\r\n */\r\n\r\nimport { InjectionToken } from '@angular/core';\r\nimport { IValidationHandler } from './types';\r\nexport const VALIDATION_HANDLER = new InjectionToken<IValidationHandler>('@farris/common-service ValidationHandler');","import { Provider } from '@angular/core';\r\nimport { VARIABLE_PROVIDERS } from './variable/index';\r\nimport { AppContext, AppContextManager } from './app/index';\r\n\r\nimport { RestfulService } from './rest/index';\r\nimport { RouterParamService } from './misc/index';\r\n\r\nimport { COMMAND_PROVIDERS } from './command/index';\r\nimport { FrameContext, FrameEventBus } from './frame/index';\r\nimport { Subscription } from './event-mechanism/index';\r\nimport { EventBus } from './event-bus-new/index';\r\nimport { RepositoryChangeListener, UIStateChangeListener, ListenerRegistry, Listeners, LISTENER_TOKEN, BindingDataChangeListener } from './listener/index';\r\nimport { ExpressionEngineImpl, ExpressionEventEmitter, ExpressionRegistry, ExpressionExecutor, ExpressionManager, ExpressionResult, EVENT_HANDLER_TOKEN, ExpressionResultFactory } from './expression/index';\r\nimport { RepositoryEffector, UIStateEffector, ReadonlyEffector, EffectorFactory, EffectorRegistry, EFFECTOR_TOKEN, DependencyEffector, RelativeEffector, ValidateEffector, RequiredEffector, VisibleEffector } from './effector/index';\r\nimport { EntityDependencyResolver, StateDependencyResolver, ResolverRegistry, CommentDependencyResolver, RESOLVER_TOKEN, ResolveService } from './resolver/index';\r\nimport { RepositoryAddEntityEventHandler, RepositoryRemoveEntityEventHandler, EntityValueChangedEventHandler, StateValueChangedEventHandler, RepositoryLoadEventHandler, EntityUpdateEventHandler, BindingDataAppendObjectEventHandler, BindingDataValueChangeEventHandler, BindingDataRemoveObjectEventHandler, BindingDataLoadEventHandler, EventHandlerRegistry, BindingDataSelectionChangedEventHandler } from './event-handler/index';\r\n\r\n// --------------------------------------------------------------------------------\r\n// Legacy\r\n// --------------------------------------------------------------------------------\r\n\r\n/**\r\n * Providers for compatibility.\r\n */\r\nexport const FARRIS_DEVKIT_APP_PROVIDERS = [\r\n  EventBus,\r\n  Subscription,\r\n  RestfulService,\r\n  VARIABLE_PROVIDERS,\r\n\r\n  AppContext,\r\n  RouterParamService,\r\n  FrameEventBus,\r\n  AppContextManager\r\n];\r\n\r\n// --------------------------------------------------------------------------------\r\n// Current\r\n// --------------------------------------------------------------------------------\r\n\r\n/**\r\n * Providers for DevkitModule.\r\n */\r\nexport const FARRIS_DEVKIT_MODULE_PROVIDERS = [\r\n  EventBus,\r\n  Subscription,\r\n  RestfulService,\r\n  RouterParamService,\r\n  VARIABLE_PROVIDERS,\r\n  AppContextManager,\r\n];\r\n\r\n/**\r\n * Providers for root frame components.\r\n */\r\nexport const FARRIS_DEVKIT_ROOT_FRAME_PROVIDERS: Provider[] = [\r\n  AppContext,\r\n];\r\n/**\r\n * 表达式provider\r\n * @description 放置到root-component，整个表单只需要注入一次\r\n */\r\nexport const FARRIS_DEVKIT_EXPRESSION_ROOT_FRAME_PROVIDERS: Provider[] = [\r\n  ListenerRegistry,\r\n  Listeners,\r\n  EffectorRegistry,\r\n  EffectorFactory,\r\n  ExpressionRegistry,\r\n  ExpressionEventEmitter,\r\n  ExpressionExecutor,\r\n  ExpressionManager,\r\n  ExpressionResult,\r\n  ExpressionResultFactory,\r\n  { provide: RESOLVER_TOKEN, useClass: EntityDependencyResolver, multi: true },\r\n  { provide: RESOLVER_TOKEN, useClass: StateDependencyResolver, multi: true },\r\n  { provide: RESOLVER_TOKEN, useClass: CommentDependencyResolver, multi: true },\r\n  ResolverRegistry,\r\n  { provide: EVENT_HANDLER_TOKEN, useClass: RepositoryAddEntityEventHandler, multi: true },\r\n  { provide: EVENT_HANDLER_TOKEN, useClass: RepositoryRemoveEntityEventHandler, multi: true },\r\n  { provide: EVENT_HANDLER_TOKEN, useClass: EntityValueChangedEventHandler, multi: true },\r\n  { provide: EVENT_HANDLER_TOKEN, useClass: StateValueChangedEventHandler, multi: true },\r\n  { provide: EVENT_HANDLER_TOKEN, useClass: RepositoryLoadEventHandler, multi: true },\r\n  { provide: EVENT_HANDLER_TOKEN, useClass: EntityUpdateEventHandler, multi: true },\r\n  { provide: EVENT_HANDLER_TOKEN, useClass: BindingDataAppendObjectEventHandler, multi: true },\r\n  { provide: EVENT_HANDLER_TOKEN, useClass: BindingDataValueChangeEventHandler, multi: true },\r\n  { provide: EVENT_HANDLER_TOKEN, useClass: BindingDataRemoveObjectEventHandler, multi: true },\r\n  { provide: EVENT_HANDLER_TOKEN, useClass: BindingDataLoadEventHandler, multi: true },\r\n  { provide: EVENT_HANDLER_TOKEN, useClass: BindingDataSelectionChangedEventHandler, multi: true},\r\n  EventHandlerRegistry,\r\n  ExpressionEngineImpl,\r\n  ResolveService\r\n];\r\n/**\r\n * 表达式监听器provider\r\n * @description 放置到每个表单的root上，组合表单root也需要放置\r\n */\r\nexport const FARRIS_DEVKIT_EXPRESSION_LISTENER_PROVIDERS: Provider[] = [\r\n  { provide: LISTENER_TOKEN, useClass: UIStateChangeListener, multi: true },\r\n  { provide: LISTENER_TOKEN, useClass: RepositoryChangeListener, multi: true },\r\n  { provide: LISTENER_TOKEN, useClass: BindingDataChangeListener, multi: true }\r\n];\r\n\r\nexport const FARRIS_DEVKIT_EXPRESSION_EFFECTOR_PROVIDERS: Provider[] = [\r\n  { provide: EFFECTOR_TOKEN, useClass: RepositoryEffector, multi: true },\r\n  { provide: EFFECTOR_TOKEN, useClass: UIStateEffector, multi: true },\r\n  { provide: EFFECTOR_TOKEN, useClass: ReadonlyEffector, multi: true },\r\n  { provide: EFFECTOR_TOKEN, useClass: DependencyEffector, multi: true },\r\n  { provide: EFFECTOR_TOKEN, useClass: RelativeEffector, multi: true },\r\n  { provide: EFFECTOR_TOKEN, useClass: ValidateEffector, multi: true },\r\n  { provide: EFFECTOR_TOKEN, useClass: RequiredEffector, multi: true },\r\n  { provide: EFFECTOR_TOKEN, useClass: VisibleEffector, multi: true }\r\n];\r\n\r\n/**\r\n * Providers for frame components.\r\n */\r\nexport const FARRIS_DEVKIT_FRAME_PROVIDERS = [\r\n  COMMAND_PROVIDERS,\r\n  FrameContext\r\n];\r\n","import { NgModule } from '@angular/core';\r\nimport { FARRIS_DEVKIT_MODULE_PROVIDERS } from './providers';\r\n/**\r\n * DevkitModule\r\n */\r\n@NgModule({\r\n  providers: FARRIS_DEVKIT_MODULE_PROVIDERS\r\n})\r\nclass DevkitModule {\r\n}\r\n\r\nexport { DevkitModule };\r\n","import { Inject, Injectable, Injector } from '@angular/core';\r\nimport { BindingData, Change } from '../binding-data/index';\r\nimport { ChangeListener } from './change_listener';\r\nimport { NAMESPACE } from '../frame/index';\r\n\r\n/**\r\n * 监听bindingList变更\r\n * @description 主要用于监听行切换等事件\r\n * @deprecated 已废弃\r\n */\r\n@Injectable()\r\nclass DeprecatedBindingDataChangeListener extends ChangeListener {\r\n  constructor(private injector: Injector, private bindingData: BindingData, @Inject(NAMESPACE) private namespace) {\r\n    super();\r\n  }\r\n\r\n  public buildEventPath(change: Change): string[] {\r\n    return null;\r\n  }\r\n}\r\nexport { DeprecatedBindingDataChangeListener };\r\n","export type Type = (...args) => any;\r\nexport type TTL = number | Date;\r\nexport type Key = string | number | ICacheKey | ICacheKeyBuilder;\r\nexport interface ICacheKeyBuilder<T = any[], U = any> {\r\n  (context: U, args: T): any;\r\n}\r\nexport enum CacheReturnType {\r\n  Static = 1,\r\n  Promise\r\n}\r\nexport interface ICacheKey { }\r\nexport interface ICacheKeyCompare {\r\n  compare(key1: ICacheKey, key2: ICacheKey): boolean;\r\n}\r\nexport class CacheKeyCompare implements ICacheKeyCompare {\r\n  compare(key1: string | number, key2: string | number) {\r\n    return key1 === key2;\r\n  }\r\n}\r\nexport interface ICacheOptions<T> {\r\n  key?: Key;\r\n  // returnType?: CacheReturnType;\r\n  ttl?: TTL;\r\n  cacheKeyCompare?: ICacheKeyCompare;\r\n  provider: ICacheProvider<T>\r\n}\r\nexport interface ICacheObject<TValue> {\r\n  key: Key,\r\n  content: TValue,\r\n  ttl: TTL,\r\n  createAt: Date,\r\n  isExpired(): boolean;\r\n}\r\nexport interface ICacheProvider<TValue> {\r\n  has(key: Key): boolean;\r\n  length(): number;\r\n  set(value: ICacheObject<TValue>);\r\n  get(key: Key): ICacheObject<TValue>;\r\n  delete(key: Key);\r\n  clear();\r\n  keys(): IterableIterator<Key>;\r\n  values(): IterableIterator<ICacheObject<TValue>>;\r\n}\r\n","import { ICacheObject, Key, TTL } from \"../types\";\r\n\r\nexport class CacheObject<T> implements ICacheObject<T>{\r\n  public createAt: Date;\r\n  constructor(public key: Key, public content: T, public ttl: TTL) {\r\n    this.createAt = new Date();\r\n  }\r\n  public isExpired(): boolean {\r\n    if (typeof this.ttl === 'number') {\r\n      return Date.now().valueOf() > this.createAt.valueOf() + this.ttl;\r\n    } else {\r\n      return Date.now() > this.ttl.valueOf();\r\n    }\r\n  }\r\n}","import { ICacheObject, ICacheProvider, Key, TTL } from \"../types\";\r\nimport { CacheObject } from \"./cache_object\";\r\n\r\nexport class CacheContainer<T>{\r\n  constructor(protected provider: ICacheProvider<T>) {\r\n    this.provider = provider;\r\n  }\r\n  public get(key: Key): T {\r\n    const cacheObject: ICacheObject<T> = this.provider.get(key);\r\n    if (!cacheObject) {\r\n      return undefined;\r\n    }\r\n    const isExpired = this.isCacheObjectExpired(cacheObject);\r\n    return isExpired ? undefined : cacheObject.content;\r\n  }\r\n  public set(key: Key, value: T, ttl?: TTL) {\r\n    const cacheObject: ICacheObject<T> = new CacheObject(key, value, ttl || 0);\r\n    this.provider.set(cacheObject);\r\n  }\r\n  private isCacheObjectExpired(cacheObject: ICacheObject<T>) {\r\n    if (typeof cacheObject.ttl === 'number') {\r\n      return Date.now().valueOf() > cacheObject.createAt.valueOf() + cacheObject.ttl;\r\n    } else {\r\n      return Date.now() > cacheObject.ttl.valueOf();\r\n    }\r\n  }\r\n}","import { CacheKeyCompare, ICacheKeyCompare, ICacheObject, ICacheProvider, Key } from \"../types\";\r\n\r\nexport class MemoryCacheProvider<T> implements ICacheProvider<T> {\r\n  protected store: Array<ICacheObject<T>>;\r\n  protected cacheKeyCompare: ICacheKeyCompare;\r\n\r\n  constructor(cacheKeyCompare?: ICacheKeyCompare) {\r\n    this.store = new Array<ICacheObject<T>>();\r\n    this.cacheKeyCompare = cacheKeyCompare || new CacheKeyCompare();\r\n  }\r\n  public has(key: Key): boolean {\r\n    if (this.store.length < 1) {\r\n      return false;\r\n    }\r\n    const index = this.store.findIndex((item: ICacheObject<T>) => item && this.cacheKeyCompare.compare(key, item.key));\r\n    return index !== -1;\r\n  }\r\n  public length(): number {\r\n    return this.store.length;\r\n  }\r\n  public set(value: ICacheObject<T>) {\r\n    this.store.push(value);\r\n  }\r\n  public get(key: Key): ICacheObject<T> {\r\n    if (this.store.length < 1) {\r\n      return undefined;\r\n    }\r\n    return this.store.find((item: ICacheObject<T>) => this.cacheKeyCompare.compare(key, item.key));\r\n  }\r\n  public delete(key: Key) {\r\n    if (this.store.length < 1) {\r\n      return;\r\n    }\r\n    const index = this.store.findIndex((item: ICacheObject<T>) => item && this.cacheKeyCompare.compare(key, item.key));\r\n    this.store.splice(index, 1);\r\n  }\r\n  public clear() {\r\n    this.store.length = 0;\r\n  }\r\n  public keys(): IterableIterator<Key> {\r\n    return this.store.keys();\r\n  }\r\n  public values(): IterableIterator<ICacheObject<T>> {\r\n    return this.store.values();\r\n  }\r\n}","import { ICacheObject, ICacheProvider, Key } from \"../types\";\r\n\r\n/**\r\n * 默认缓存\r\n * @description\r\n * 默认缓存使用Map作为缓存容器，存储速度快。但不支持自定义的key对比，对于简单类型的key使用值对比，对于引用类型的key，对比的是引用的地址。\r\n */\r\nexport class DefaultCacheProvider<T> implements ICacheProvider<T>{\r\n  private buffer: Map<any, ICacheObject<T>>;\r\n\r\n  constructor() {\r\n    this.buffer = new Map<any, ICacheObject<T>>();\r\n  }\r\n  public has(key: Key): boolean {\r\n    return this.buffer.has(key);\r\n  }\r\n  public length(): number {\r\n    return this.buffer.size;\r\n  }\r\n  public set(value: ICacheObject<T>) {\r\n    this.buffer.set(value.key, value);\r\n  }\r\n  public get(key: Key): ICacheObject<T> {\r\n    return this.buffer.get(key);\r\n  }\r\n  public delete(key: Key) {\r\n    this.buffer.delete(key);\r\n  }\r\n  public clear() {\r\n    this.buffer.clear();\r\n  }\r\n  public keys(): IterableIterator<Key> {\r\n    return this.buffer.keys();\r\n  }\r\n  public values(): IterableIterator<ICacheObject<T>> {\r\n    return this.buffer.values();\r\n  }\r\n}","\r\n/**\r\n  * Encode a URL to a percent-encoded form, excluding already-encoded sequences.\r\n  *\r\n  * This function will take an already-encoded URL and encode all the non-URL\r\n  * code points. This function will not encode the \"%\" character unless it is\r\n  * not part of a valid sequence (`%20` will be left as-is, but `%foo` will\r\n  * be encoded as `%25foo`).\r\n  *\r\n  * This encode is meant to be \"safe\" and does not throw errors. It will try as\r\n  * hard as it can to properly encode the given URL, including replacing any raw,\r\n  * unpaired surrogate pairs with the Unicode replacement character prior to\r\n  * encoding.\r\n  *\r\n  * @param {string} url\r\n  * @return {string}\r\n  * @public\r\n  */\r\n\r\n export function encodeUrl(url) {\r\n  const ENCODE_CHARS_REGEXP = /(?:[^\\x21\\x25\\x26-\\x3B\\x3D\\x3F-\\x5B\\x5D\\x5F\\x61-\\x7A\\x7E]|%(?:[^0-9A-Fa-f]|[0-9A-Fa-f][^0-9A-Fa-f]|$))+/g;\r\n  const UNMATCHED_SURROGATE_PAIR_REGEXP = /(^|[^\\uD800-\\uDBFF])[\\uDC00-\\uDFFF]|[\\uD800-\\uDBFF]([^\\uDC00-\\uDFFF]|$)/g;\r\n  const UNMATCHED_SURROGATE_PAIR_REPLACE = '$1\\uFFFD$2';\r\n  return String(url)\r\n    .replace(UNMATCHED_SURROGATE_PAIR_REGEXP, UNMATCHED_SURROGATE_PAIR_REPLACE)\r\n    .replace(ENCODE_CHARS_REGEXP, encodeURI)\r\n    .replace(/#/g,'%23').replace(/&/g,'%26')\r\n}","import { ICacheObject, ICacheOptions } from \"../types\";\r\nimport { CacheObject } from \"./cache_object\";\r\n/**\r\n * 缓存方法返回值\r\n * @param options ICacheOptions 缓存选项\r\n * @returns MethodDecorator\r\n */\r\nexport function Cacheable<T>(options?: ICacheOptions<T>): MethodDecorator {\r\n  return function (target: any, propertyKey: string | symbol, descriptor: PropertyDescriptor) {\r\n    if (descriptor === undefined) {\r\n      descriptor = Object.getOwnPropertyDescriptor(target, propertyKey);\r\n    }\r\n    const className = target.name || target && target.constructor && target.constructor.name;\r\n    const method = descriptor.value;\r\n    descriptor.value = function (...args: any[]) {\r\n      const ttl = options && options.ttl || 0;\r\n      const provider = options && options.provider;\r\n      if (!provider) {\r\n        throw new Error('cache provider is not defined.');\r\n      }\r\n      let key = options && options.key || undefined;\r\n      if (key && key instanceof Function) {\r\n        key = key(this, args);\r\n      }\r\n      let cacheKey = key;\r\n      if (!cacheKey) {\r\n        const argsString: string = JSON.stringify(args);\r\n        cacheKey = `${className}#${String(propertyKey)}#${argsString}`;\r\n      }\r\n      const cacheObject = provider.get(cacheKey);\r\n      if (!cacheObject || (ttl && cacheObject.isExpired() === true)) {\r\n        const result = method.apply(this, args);\r\n        const object: ICacheObject<T> = new CacheObject(cacheKey, result, ttl);\r\n        provider.set(object);\r\n        return result;\r\n      }\r\n\r\n      return cacheObject && cacheObject.content;\r\n    }\r\n    return descriptor;\r\n  }\r\n}"]}