/**
 * @fileoverview added by tsickle
 * Generated from: lib/controlcomponent/radio/radio.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input, Injector, EventEmitter, Output, HostBinding } from '@angular/core';
import { QueryCondition } from '../../entity/querycondition';
import { SolutionService } from '../../service/solution.service';
export class RadioComponent {
    /**
     * @param {?} injector
     */
    constructor(injector) {
        this.injector = injector;
        /**
         * 某个字段发生值变化事件时，需要同步清空的字段，可能不是当前字段
         */
        this.changeFields = [];
        this.conditionChange = new EventEmitter();
        this.cls = true;
        this.solutionService = this.injector.get(SolutionService);
    }
    /**
     * @param {?} nr
     * @return {?}
     */
    set item(nr) {
        this._item = nr;
    }
    /**
     * @return {?}
     */
    get item() {
        return this._item;
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        if (changes['changeFields'] && changes['changeFields'].currentValue && !changes['changeFields'].firstChange) {
            /** @type {?} */
            const isChange = changes['changeFields'].currentValue.some((/**
             * @param {?} field
             * @return {?}
             */
            field => field == this.item.fieldCode));
            if (isChange) {
                this.radioValue = ((/** @type {?} */ (this.item.value))).getOriginalValue();
            }
        }
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.radioControl = (/** @type {?} */ (this.item.control));
        this.radioValue = ((/** @type {?} */ (this.item.value))).getOriginalValue();
        this.testId = this.solutionService.getGuid();
        this.showLabel = this.radioControl.showLabel;
    }
    /**
     * @param {?} event
     * @return {?}
     */
    valueChanged(event) {
        this._item.value.setOriginalValue(event);
        this.conditionChange.emit();
    }
    /**
     * @param {?} field
     * @return {?}
     */
    getConditionItemTitle(field) {
        return this.solutionService.getConditionItemTitle(field);
    }
}
RadioComponent.decorators = [
    { type: Component, args: [{
                selector: 'app-solution-radio',
                template: "<div class=\"farris-group-wrap\" id=\"{{item.id}}\">\r\n    <div class=\"form-group farris-form-group  common-group qradio-group\"  [ngClass]=\"{'q-state-readonly':item.readonly}\">\r\n        <label class=\"col-form-label\" *ngIf=\"item\" title=\"{{getConditionItemTitle(item)}}\">\r\n            <span class=\"farris-label-info text-danger\" *ngIf=\"item.control.isRequired()\">*</span>\r\n            <span class=\"farris-label-text\" *ngIf=\"showLabel\">{{item.fieldName}}</span>\r\n        </label>\r\n        <farris-radiogroup\r\n            class=\"f-solution-radio-group\"\r\n            [(ngModel)]=\"radioValue\"\r\n            [data]=\"radioControl.enumValues\"\r\n            [horizontal]=\"radioControl.horizontal\"\r\n            [disabled]=\"item.readonly\"\r\n            (changeValue)=\"valueChanged($event)\"\r\n            id=\"{{testId}}\"\r\n        ></farris-radiogroup>\r\n    </div>\r\n</div>"
            }] }
];
/** @nocollapse */
RadioComponent.ctorParameters = () => [
    { type: Injector }
];
RadioComponent.propDecorators = {
    item: [{ type: Input }],
    changeFields: [{ type: Input }],
    conditionChange: [{ type: Output, args: ['conditionChange',] }],
    cls: [{ type: HostBinding, args: ['class.f-solution-radio-group-wrapper',] }]
};
if (false) {
    /** @type {?} */
    RadioComponent.prototype._item;
    /** @type {?} */
    RadioComponent.prototype.solutionService;
    /** @type {?} */
    RadioComponent.prototype.radioControl;
    /** @type {?} */
    RadioComponent.prototype.radioValue;
    /** @type {?} */
    RadioComponent.prototype.testId;
    /** @type {?} */
    RadioComponent.prototype.showLabel;
    /**
     * 某个字段发生值变化事件时，需要同步清空的字段，可能不是当前字段
     * @type {?}
     */
    RadioComponent.prototype.changeFields;
    /** @type {?} */
    RadioComponent.prototype.conditionChange;
    /** @type {?} */
    RadioComponent.prototype.cls;
    /**
     * @type {?}
     * @private
     */
    RadioComponent.prototype.injector;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmFkaW8uY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGZhcnJpcy9jb21wb25lbnQtcXVlcnljb25kaXRpb24vIiwic291cmNlcyI6WyJsaWIvY29udHJvbGNvbXBvbmVudC9yYWRpby9yYWRpby5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBcUIsUUFBUSxFQUFFLFlBQVksRUFBRSxNQUFNLEVBQUUsV0FBVyxFQUFpQixNQUFNLGVBQWUsQ0FBQztBQUNoSSxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sNkJBQTZCLENBQUM7QUFDN0QsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLGdDQUFnQyxDQUFDO0FBU2pFLE1BQU0sT0FBTyxjQUFjOzs7O0lBMEJ2QixZQUFvQixRQUFrQjtRQUFsQixhQUFRLEdBQVIsUUFBUSxDQUFVOzs7O1FBTjdCLGlCQUFZLEdBQWtCLEVBQUUsQ0FBQztRQUVmLG9CQUFlLEdBQUcsSUFBSSxZQUFZLEVBQUUsQ0FBQztRQUVYLFFBQUcsR0FBRyxJQUFJLENBQUM7UUFHN0QsSUFBSSxDQUFDLGVBQWUsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxlQUFlLENBQUMsQ0FBQztJQUM3RCxDQUFDOzs7OztJQW5CRCxJQUNJLElBQUksQ0FBQyxFQUFrQjtRQUN2QixJQUFJLENBQUMsS0FBSyxHQUFHLEVBQUUsQ0FBQztJQUNwQixDQUFDOzs7O0lBQ0QsSUFBSSxJQUFJO1FBQ0osT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDO0lBQ3RCLENBQUM7Ozs7O0lBZUQsV0FBVyxDQUFDLE9BQXNCO1FBQzlCLElBQUcsT0FBTyxDQUFDLGNBQWMsQ0FBQyxJQUFJLE9BQU8sQ0FBQyxjQUFjLENBQUMsQ0FBQyxZQUFZLElBQUksQ0FBQyxPQUFPLENBQUMsY0FBYyxDQUFDLENBQUMsV0FBVyxFQUFFOztrQkFDbEcsUUFBUSxHQUFHLE9BQU8sQ0FBQyxjQUFjLENBQUMsQ0FBQyxZQUFZLENBQUMsSUFBSTs7OztZQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsS0FBSyxJQUFJLElBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFDO1lBQ2pHLElBQUcsUUFBUSxFQUFDO2dCQUNSLElBQUksQ0FBQyxVQUFVLEdBQUcsQ0FBQyxtQkFBQSxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssRUFBYyxDQUFDLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQzthQUN4RTtTQUNKO0lBQ0wsQ0FBQzs7OztJQUVELFFBQVE7UUFDTCxJQUFJLENBQUMsWUFBWSxHQUFHLG1CQUFBLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFnQixDQUFDO1FBQ3RELElBQUksQ0FBQyxVQUFVLEdBQUcsQ0FBQyxtQkFBQSxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssRUFBYyxDQUFDLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQztRQUNyRSxJQUFJLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQyxlQUFlLENBQUMsT0FBTyxFQUFFLENBQUM7UUFDN0MsSUFBSSxDQUFDLFNBQVMsR0FBRyxJQUFJLENBQUMsWUFBWSxDQUFDLFNBQVMsQ0FBQztJQUNoRCxDQUFDOzs7OztJQUVELFlBQVksQ0FBQyxLQUFVO1FBQ25CLElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLGdCQUFnQixDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQ3pDLElBQUksQ0FBQyxlQUFlLENBQUMsSUFBSSxFQUFFLENBQUM7SUFDaEMsQ0FBQzs7Ozs7SUFFRCxxQkFBcUIsQ0FBQyxLQUFvQjtRQUN0QyxPQUFPLElBQUksQ0FBQyxlQUFlLENBQUMscUJBQXFCLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDN0QsQ0FBQzs7O1lBMURKLFNBQVMsU0FBQztnQkFDUCxRQUFRLEVBQUUsb0JBQW9CO2dCQUM5QixpNkJBQXFDO2FBQ3hDOzs7O1lBVDZDLFFBQVE7OzttQkFvQmpELEtBQUs7MkJBV0wsS0FBSzs4QkFFTCxNQUFNLFNBQUMsaUJBQWlCO2tCQUV4QixXQUFXLFNBQUMsc0NBQXNDOzs7O0lBdEJuRCwrQkFBc0I7O0lBQ3RCLHlDQUFpQzs7SUFDakMsc0NBQTJCOztJQUMzQixvQ0FBZ0I7O0lBQ2hCLGdDQUFlOztJQUNmLG1DQUFtQjs7Ozs7SUFhbkIsc0NBQTBDOztJQUUxQyx5Q0FBZ0U7O0lBRWhFLDZCQUFnRTs7Ozs7SUFFcEQsa0NBQTBCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50LCBJbnB1dCwgT25Jbml0LCBPbkNoYW5nZXMsIEluamVjdG9yLCBFdmVudEVtaXR0ZXIsIE91dHB1dCwgSG9zdEJpbmRpbmcsIFNpbXBsZUNoYW5nZXMgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgUXVlcnlDb25kaXRpb24gfSBmcm9tICcuLi8uLi9lbnRpdHkvcXVlcnljb25kaXRpb24nO1xyXG5pbXBvcnQgeyBTb2x1dGlvblNlcnZpY2UgfSBmcm9tICcuLi8uLi9zZXJ2aWNlL3NvbHV0aW9uLnNlcnZpY2UnO1xyXG5pbXBvcnQgeyBSYWRpb0NvbnRyb2wgfSBmcm9tICcuLi8uLi9lbnRpdHkvY29udHJvbHR5cGUvcmFkaW8vcmFkaW8tY29udHJvbCc7XHJcbmltcG9ydCB7IFJhZGlvVmFsdWUgfSBmcm9tICcuLi8uLi9lbnRpdHkvY29uZGl0aW9udmFsdWUvcmFkaW8tdmFsdWUnO1xyXG5cclxuQENvbXBvbmVudCh7XHJcbiAgICBzZWxlY3RvcjogJ2FwcC1zb2x1dGlvbi1yYWRpbycsXHJcbiAgICB0ZW1wbGF0ZVVybDogJy4vcmFkaW8uY29tcG9uZW50Lmh0bWwnLFxyXG59KVxyXG5cclxuZXhwb3J0IGNsYXNzIFJhZGlvQ29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0LCBPbkNoYW5nZXMge1xyXG5cclxuICAgIF9pdGVtOiBRdWVyeUNvbmRpdGlvbjtcclxuICAgIHNvbHV0aW9uU2VydmljZTogU29sdXRpb25TZXJ2aWNlO1xyXG4gICAgcmFkaW9Db250cm9sOiBSYWRpb0NvbnRyb2w7XHJcbiAgICByYWRpb1ZhbHVlOiBhbnk7XHJcbiAgICB0ZXN0SWQ6IHN0cmluZztcclxuICAgIHNob3dMYWJlbDogYm9vbGVhbjtcclxuXHJcbiAgICBASW5wdXQoKVxyXG4gICAgc2V0IGl0ZW0obnI6IFF1ZXJ5Q29uZGl0aW9uKXtcclxuICAgICAgICB0aGlzLl9pdGVtID0gbnI7XHJcbiAgICB9XHJcbiAgICBnZXQgaXRlbSgpe1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9pdGVtO1xyXG4gICAgfVxyXG4gICAgXHJcbiAgICAvKipcclxuICAgICAqIOafkOS4quWtl+auteWPkeeUn+WAvOWPmOWMluS6i+S7tuaXtu+8jOmcgOimgeWQjOatpea4heepuueahOWtl+aute+8jOWPr+iDveS4jeaYr+W9k+WJjeWtl+autVxyXG4gICAgICovXHJcbiAgICBASW5wdXQoKSBjaGFuZ2VGaWVsZHM6IEFycmF5PHN0cmluZz4gPSBbXTtcclxuXHJcbiAgICBAT3V0cHV0KCdjb25kaXRpb25DaGFuZ2UnKSBjb25kaXRpb25DaGFuZ2UgPSBuZXcgRXZlbnRFbWl0dGVyKCk7XHJcblxyXG4gICAgQEhvc3RCaW5kaW5nKCdjbGFzcy5mLXNvbHV0aW9uLXJhZGlvLWdyb3VwLXdyYXBwZXInKSBjbHMgPSB0cnVlO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgaW5qZWN0b3I6IEluamVjdG9yKSB7XHJcbiAgICAgICB0aGlzLnNvbHV0aW9uU2VydmljZSA9IHRoaXMuaW5qZWN0b3IuZ2V0KFNvbHV0aW9uU2VydmljZSk7XHJcbiAgICB9XHJcblxyXG4gICAgbmdPbkNoYW5nZXMoY2hhbmdlczogU2ltcGxlQ2hhbmdlcyk6IHZvaWQge1xyXG4gICAgICAgIGlmKGNoYW5nZXNbJ2NoYW5nZUZpZWxkcyddICYmIGNoYW5nZXNbJ2NoYW5nZUZpZWxkcyddLmN1cnJlbnRWYWx1ZSAmJiAhY2hhbmdlc1snY2hhbmdlRmllbGRzJ10uZmlyc3RDaGFuZ2UpIHtcclxuICAgICAgICAgICAgY29uc3QgaXNDaGFuZ2UgPSBjaGFuZ2VzWydjaGFuZ2VGaWVsZHMnXS5jdXJyZW50VmFsdWUuc29tZShmaWVsZCA9PiBmaWVsZCA9PSB0aGlzLml0ZW0uZmllbGRDb2RlKTtcclxuICAgICAgICAgICAgaWYoaXNDaGFuZ2Upe1xyXG4gICAgICAgICAgICAgICAgdGhpcy5yYWRpb1ZhbHVlID0gKHRoaXMuaXRlbS52YWx1ZSBhcyBSYWRpb1ZhbHVlKS5nZXRPcmlnaW5hbFZhbHVlKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgbmdPbkluaXQoKTogdm9pZCB7XHJcbiAgICAgICB0aGlzLnJhZGlvQ29udHJvbCA9IHRoaXMuaXRlbS5jb250cm9sIGFzIFJhZGlvQ29udHJvbDtcclxuICAgICAgIHRoaXMucmFkaW9WYWx1ZSA9ICh0aGlzLml0ZW0udmFsdWUgYXMgUmFkaW9WYWx1ZSkuZ2V0T3JpZ2luYWxWYWx1ZSgpO1xyXG4gICAgICAgdGhpcy50ZXN0SWQgPSB0aGlzLnNvbHV0aW9uU2VydmljZS5nZXRHdWlkKCk7XHJcbiAgICAgICB0aGlzLnNob3dMYWJlbCA9IHRoaXMucmFkaW9Db250cm9sLnNob3dMYWJlbDtcclxuICAgIH1cclxuXHJcbiAgICB2YWx1ZUNoYW5nZWQoZXZlbnQ6IGFueSl7XHJcbiAgICAgICAgdGhpcy5faXRlbS52YWx1ZS5zZXRPcmlnaW5hbFZhbHVlKGV2ZW50KTtcclxuICAgICAgICB0aGlzLmNvbmRpdGlvbkNoYW5nZS5lbWl0KCk7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0Q29uZGl0aW9uSXRlbVRpdGxlKGZpZWxkOlF1ZXJ5Q29uZGl0aW9uKXtcclxuICAgICAgICByZXR1cm4gdGhpcy5zb2x1dGlvblNlcnZpY2UuZ2V0Q29uZGl0aW9uSXRlbVRpdGxlKGZpZWxkKTtcclxuICAgIH1cclxufSJdfQ==