/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*
 * @Author: 疯狂秀才(Lucas Huang)
 * @Date: 2019-08-05 10:26:50
 * @LastEditors: 疯狂秀才(Lucas Huang)
 * @LastEditTime: 2020-11-16 11:43:34
 * @QQ: 1055818239
 * @Version: v0.0.1
 */
import { Component, Input, Output, EventEmitter, forwardRef, ViewChild, ElementRef, Injector, Renderer2, HostBinding, ChangeDetectorRef } from '@angular/core';
import { NgControl, NG_VALUE_ACCESSOR } from '@angular/forms';
import { BigNumber } from 'bignumber.js';
import { LocaleService } from '@farris/ui-locale';
import { CommonUtils } from '@farris/ui-common';
/**
 * @record
 */
export function NumberFormatter() { }
if (false) {
    /**
     * 前置符号
     * @type {?|undefined}
     */
    NumberFormatter.prototype.prefix;
    /**
     * 后缀
     * @type {?|undefined}
     */
    NumberFormatter.prototype.suffix;
    /**
     * 小数点
     * @type {?|undefined}
     */
    NumberFormatter.prototype.decimalSeparator;
    /**
     * 千分位符号
     * @type {?|undefined}
     */
    NumberFormatter.prototype.groupSeparator;
    /**
     * 千分位分组
     * @type {?|undefined}
     */
    NumberFormatter.prototype.groupSize;
}
var NumberSpinnerComponent = /** @class */ (function () {
    function NumberSpinnerComponent(el, render, injector) {
        this.el = el;
        this.render = render;
        this.injector = injector;
        this.hostClass = true;
        this.disabled = false;
        this.readonly = false;
        this.editable = true;
        // 空白提示文本
        this.placeholder = '';
        // up or down 步长
        this.step = 1;
        /**
         * 启用大数支持
         */
        this.bigNumber = false;
        // 是否显示加减按钮
        this.showButton = true;
        // 是否使用千分值
        this.useThousands = true;
        // 文本方向
        this.textAlign = 'left';
        // 自动补全小数
        this.autoDecimal = true;
        // 允许为空
        this.canNull = false;
        // 精度
        this.precision = 0;
        // 前缀
        this.prefix = '';
        // 后缀
        this.suffix = '';
        /**
         * 小数点符号
         */
        this.decimalSeparator = '.';
        /**
         * 千分位符号
         */
        this.groupSeparator = ',';
        /**
         * 使用千分位时，每组显示的字符数
         */
        this.groupSize = 3;
        this._value = '';
        /**
         * 显示0值
         */
        this.showZero = true;
        this.valueChange = new EventEmitter();
        this.blur = new EventEmitter();
        this.focus = new EventEmitter();
        this.isFocus = false;
        this.popValue = '';
        this.isActiveTip = false;
        this.formatOptions = {};
        this._realValue = null;
        this.showtipTimer = null;
        this._updateOn = 'change';
        this.localeService = null;
        this.onTouchedCallback = (/**
         * @return {?}
         */
        function () { });
        this.onChangeCallback = (/**
         * @return {?}
         */
        function () { });
        this.cdRef = this.injector.get(ChangeDetectorRef, null);
        this.localeService = this.injector.get(LocaleService, null);
        this.commonUtils = this.injector.get(CommonUtils, new CommonUtils());
    }
    Object.defineProperty(NumberSpinnerComponent.prototype, "value", {
        get: /**
         * @return {?}
         */
        function () {
            return this._value;
        },
        set: /**
         * @param {?} val
         * @return {?}
         */
        function (val) {
            this._value = val;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    NumberSpinnerComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.formatOptions = this.buildFormatOptions();
        this._ngControl = this.injector.get(NgControl, null);
        if (this.localeService) {
            /** @type {?} */
            var defaultPlaceHolder = this.localeService.getValue('numberSpinner.placeholder') || '请输入数字';
            if (!this.placeholder) {
                this.placeholder = defaultPlaceHolder;
            }
        }
    };
    /**
     * @return {?}
     */
    NumberSpinnerComponent.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        if (this._ngControl && this._ngControl.control) {
            this._updateOn = this._ngControl.control.updateOn;
        }
        this.listenInputPasteEvent();
    };
    /**
     * @param {?} changes
     * @return {?}
     */
    NumberSpinnerComponent.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        if (changes.value && !changes.value.isFirstChange()) {
            this._realValue = this.getRealValue(changes.value.currentValue);
            this.value = this.format(this._realValue);
        }
        if (changes.showZero && !changes.showZero.isFirstChange()) {
            this.value = this.format(this._realValue);
        }
        if (changes.precision && !changes.precision.isFirstChange()) {
            this.onOptionsChanged();
        }
        if (changes.useThousands && !changes.useThousands.isFirstChange()) {
            this.onOptionsChanged();
        }
        if (changes.prefix && !changes.prefix.isFirstChange()) {
            this.onOptionsChanged();
        }
        if (changes.suffix && !changes.suffix.isFirstChange()) {
            this.onOptionsChanged();
        }
    };
    /**
     * @private
     * @return {?}
     */
    NumberSpinnerComponent.prototype.onOptionsChanged = /**
     * @private
     * @return {?}
     */
    function () {
        this.formatOptions = this.buildFormatOptions();
        this.value = this.format(this._realValue);
    };
    /**
     * @return {?}
     */
    NumberSpinnerComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () { };
    // 支持粘贴带格式的数据
    // 支持粘贴带格式的数据
    /**
     * @return {?}
     */
    NumberSpinnerComponent.prototype.listenInputPasteEvent = 
    // 支持粘贴带格式的数据
    /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.input.nativeElement.addEventListener('paste', (/**
         * @param {?} event
         * @return {?}
         */
        function (event) {
            event.preventDefault();
            /** @type {?} */
            var clipboardData = event.clipboardData || window['clipboardData'];
            /** @type {?} */
            var pasteValue = clipboardData.getData('text');
            /** @type {?} */
            var val = _this.cleanNumString(pasteValue);
            if (_this.isEmpty(val)) {
                return;
            }
            /** @type {?} */
            var target = event.target;
            /** @type {?} */
            var start = ((/** @type {?} */ (target))).selectionStart;
            /** @type {?} */
            var end = ((/** @type {?} */ (target))).selectionEnd;
            if (_this.isEmpty(val)) {
                target.value = '';
            }
            else {
                target.value = target.value.slice(0, start) + val + target.value.slice(end);
            }
            if (_this._updateOn === 'change') {
                _this._realValue = _this.getRealValue(target.value);
                _this.value = _this._realValue;
                _this._modelChanged(_this._realValue);
            }
        }));
    };
    /**
     * @param {?} $event
     * @param {?=} type
     * @return {?}
     */
    NumberSpinnerComponent.prototype.onBlur = /**
     * @param {?} $event
     * @param {?=} type
     * @return {?}
     */
    function ($event, type) {
        if (type === void 0) { type = ''; }
        if (this.readonly || this.disabled) {
            return;
        }
        if (this._updateOn === 'blur') {
            /** @type {?} */
            var val = this.cleanNumString($event.value);
            this._realValue = this.getRealValue(val);
        }
        this.value = this.format(this._realValue);
        this.input.nativeElement.value = this.value;
        this.isFocus = false;
        this.onModelChange(this._realValue, 'blur');
        this.blur.emit({ event: $event, formatted: this.value, value: this._realValue, instance: this });
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    NumberSpinnerComponent.prototype.onClick = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        $event.stopPropagation();
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    NumberSpinnerComponent.prototype.onFocus = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        if (this.readonly || this.disabled) {
            this.isFocus = false;
            return;
        }
        this.value = this.isEmpty(this._realValue) ? '' : ((!this.showZero && this._realValue == '0') ? '' : this._realValue);
        this.isFocus = true;
        this.focus.emit({ event: $event, formatted: this.value, value: this._realValue, instance: this });
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    NumberSpinnerComponent.prototype.onMouseEnter = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        if (this.value) {
            this.popValue = this.value;
            this.isActiveTip = this.isShowPopover();
        }
    };
    /**
     * @param {?} e
     * @return {?}
     */
    NumberSpinnerComponent.prototype.onKeyDown = /**
     * @param {?} e
     * @return {?}
     */
    function (e) {
        if (e.key === 'ArrowDown') {
            e.preventDefault();
            this.down(e);
            e.stopPropagation();
        }
        if (e.key === 'ArrowUp') {
            e.preventDefault();
            this.up(e);
            e.stopPropagation();
        }
    };
    /**
     * @private
     * @param {?} realVal
     * @return {?}
     */
    NumberSpinnerComponent.prototype._modelChanged = /**
     * @private
     * @param {?} realVal
     * @return {?}
     */
    function (realVal) {
        this._realValue = realVal;
        this.onChangeCallback(realVal);
        this.onTouchedCallback();
        this.valueChange.emit(realVal);
    };
    /**
     * @param {?} realVal
     * @param {?=} updateOn
     * @return {?}
     */
    NumberSpinnerComponent.prototype.onModelChange = /**
     * @param {?} realVal
     * @param {?=} updateOn
     * @return {?}
     */
    function (realVal, updateOn) {
        if (updateOn === void 0) { updateOn = 'change'; }
        // this._realValue = this.getRealValue(val);
        /** @type {?} */
        var _realValue = realVal;
        if (updateOn === 'change') {
            /** @type {?} */
            var num = this.cleanNumString('' + realVal);
            _realValue = this.getRealValue(num);
        }
        this.isActiveTip = false;
        this.popValue = this.format(_realValue);
        if (this._updateOn === updateOn) {
            this._modelChanged(_realValue);
        }
    };
    /**
     * @param {?} e
     * @param {?=} type
     * @return {?}
     */
    NumberSpinnerComponent.prototype.up = /**
     * @param {?} e
     * @param {?=} type
     * @return {?}
     */
    function (e, type) {
        if (type === void 0) { type = null; }
        this.compute('up');
        e.stopPropagation();
    };
    /**
     * @param {?} e
     * @param {?=} type
     * @return {?}
     */
    NumberSpinnerComponent.prototype.down = /**
     * @param {?} e
     * @param {?=} type
     * @return {?}
     */
    function (e, type) {
        if (type === void 0) { type = null; }
        this.compute('down');
        e.stopPropagation();
    };
    /**
     * @param {?=} tye
     * @return {?}
     */
    NumberSpinnerComponent.prototype.compute = /**
     * @param {?=} tye
     * @return {?}
     */
    function (tye) {
        if (tye === void 0) { tye = 'up'; }
        if (this.isDisableOfBtn(tye)) {
            /** @type {?} */
            var _resultValue = void 0;
            /** @type {?} */
            var realBigNum = new BigNumber(this._realValue || 0);
            if (tye === 'up') {
                _resultValue = realBigNum.plus(Number(this.step));
            }
            else {
                _resultValue = realBigNum.minus(Number(this.step));
            }
            /** @type {?} */
            var s = _resultValue.toFixed();
            if (!this.isFocus) {
                this.value = this.format(s);
            }
            else {
                this.value = s;
            }
            this.input.nativeElement.value = this.value;
            this._modelChanged(this.getRealValue(_resultValue));
        }
    };
    /**
     * @param {?} type
     * @param {?=} value
     * @return {?}
     */
    NumberSpinnerComponent.prototype.isDisableOfBtn = /**
     * @param {?} type
     * @param {?=} value
     * @return {?}
     */
    function (type, value) {
        if (value === undefined) {
            value = this._realValue;
        }
        value = new BigNumber(value);
        if (type === 'up' && !(new BigNumber(this.max)).isNaN() && value.gte(this.max)) {
            return false;
        }
        if (type === 'down' && !(new BigNumber(this.min)).isNaN() && value.lte(this.min)) {
            return false;
        }
        return true;
    };
    /**
     * @return {?}
     */
    NumberSpinnerComponent.prototype.isShowPopover = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var width = this.input.nativeElement.clientWidth;
        var _a = window.getComputedStyle(this.input.nativeElement), paddingLeft = _a.paddingLeft, paddingRight = _a.paddingRight;
        /** @type {?} */
        var _width = width - (Number(paddingLeft.replace('px', '')) || 0) - (Number(paddingRight.replace('px', '')) || 0);
        /** @type {?} */
        var txtWidth = this.commonUtils.getTextWidth(this.value, window.getComputedStyle(this.input.nativeElement).font);
        if (_width && _width < txtWidth) {
            return true;
        }
        return false;
    };
    /**
     * @return {?}
     */
    NumberSpinnerComponent.prototype._getPrecision = /**
     * @return {?}
     */
    function () {
        return Number(this.precision || 0);
    };
    /**
     * @param {?} n
     * @return {?}
     */
    NumberSpinnerComponent.prototype.toFixed = /**
     * @param {?} n
     * @return {?}
     */
    function (n) {
        /** @type {?} */
        var _n = n;
        if (!BigNumber.isBigNumber(n)) {
            _n = new BigNumber(n);
        }
        if (this.precision !== null && this.precision !== undefined) {
            return n.toFixed(this._getPrecision());
        }
        return n.toFixed();
    };
    /**
     * @param {?} _n
     * @return {?}
     */
    NumberSpinnerComponent.prototype._getRealValue = /**
     * @param {?} _n
     * @return {?}
     */
    function (_n) {
        /** @type {?} */
        var n = this.toFixed(_n);
        return this.bigNumber ? n : Number(n);
    };
    /**
     * @param {?} val
     * @return {?}
     */
    NumberSpinnerComponent.prototype.getRealValue = /**
     * @param {?} val
     * @return {?}
     */
    function (val) {
        if (this.parser) {
            if (!isNaN(Number(val))) {
                return val;
            }
            else {
                return this.parser(val);
            }
        }
        /** @type {?} */
        var _n = this.validInterval(new BigNumber(val));
        if (_n.isNaN()) {
            if (this.canNull) {
                return null;
            }
            else {
                /** @type {?} */
                var minBigNum = new BigNumber('' + this.min);
                /** @type {?} */
                var maxBigNum = new BigNumber('' + this.max);
                if (!minBigNum.isNaN()) {
                    _n = minBigNum;
                }
                else if (!maxBigNum.isNaN()) {
                    _n = maxBigNum;
                }
                else {
                    return 0;
                }
            }
            // if (this.canNull || minBigNum.isNaN()) {
            //     return null;
            // } else {
            //     _n = minBigNum;
            // }
        }
        return this._getRealValue(_n);
    };
    /**
     * @private
     * @return {?}
     */
    NumberSpinnerComponent.prototype.buildFormatOptions = /**
     * @private
     * @return {?}
     */
    function () {
        return {
            prefix: this.prefix,
            suffix: this.suffix,
            decimalSeparator: this.decimalSeparator,
            groupSeparator: this.useThousands ? this.groupSeparator : '',
            groupSize: this.groupSize
        };
    };
    /**
     * @param {?} val
     * @return {?}
     */
    NumberSpinnerComponent.prototype.isEmpty = /**
     * @param {?} val
     * @return {?}
     */
    function (val) {
        return isNaN(val) || val === null || val === undefined || val === '';
    };
    /**
     * @param {?} bn
     * @return {?}
     */
    NumberSpinnerComponent.prototype.validInterval = /**
     * @param {?} bn
     * @return {?}
     */
    function (bn) {
        /** @type {?} */
        var _bnVal = bn;
        if (!this.isEmpty(this.max)) {
            /** @type {?} */
            var _maxBigNum = new BigNumber('' + this.max);
            if (bn.gt(_maxBigNum)) {
                _bnVal = _maxBigNum;
                /** @type {?} */
                var _realValue = this._getRealValue(_maxBigNum);
                this._modelChanged(_realValue);
            }
        }
        if (!this.isEmpty(this.min)) {
            /** @type {?} */
            var _minBigNum = new BigNumber('' + this.min);
            if (bn.lt(_minBigNum)) {
                _bnVal = _minBigNum;
                /** @type {?} */
                var _realValue = this._getRealValue(_minBigNum);
                this._modelChanged(_realValue);
            }
        }
        return _bnVal;
    };
    /**
     * @param {?} val
     * @return {?}
     */
    NumberSpinnerComponent.prototype.format = /**
     * @param {?} val
     * @return {?}
     */
    function (val) {
        val = this.cleanNumString(val);
        /** @type {?} */
        var bigVal = new BigNumber(val);
        /** @type {?} */
        var _bgNum = this.validInterval(bigVal);
        if (_bgNum.valueOf() == '0' && !this.showZero) {
            return '';
        }
        if (this.canNull && bigVal.isNaN()) {
            return '';
        }
        else {
            if (_bgNum.isNaN()) {
                return '';
            }
        }
        if (this.formatter) {
            return this.formatter(_bgNum.toNumber());
        }
        else {
            if (!Object.keys(this.formatOptions).length) {
                this.formatOptions = this.buildFormatOptions();
            }
            return this._toFormat(_bgNum, this.formatOptions);
        }
    };
    /**
     * @param {?} _bgNum
     * @param {?} fmt
     * @return {?}
     */
    NumberSpinnerComponent.prototype._toFormat = /**
     * @param {?} _bgNum
     * @param {?} fmt
     * @return {?}
     */
    function (_bgNum, fmt) {
        if (this.precision !== null && this.precision !== undefined) {
            return _bgNum.toFormat(this._getPrecision(), fmt);
        }
        else {
            return _bgNum.toFormat(fmt);
        }
    };
    /**
     * @param {?} val
     * @return {?}
     */
    NumberSpinnerComponent.prototype.cleanNumString = /**
     * @param {?} val
     * @return {?}
     */
    function (val) {
        val = (val === null || val === undefined || val === '') ? '' : String(val);
        val = val.replace(new RegExp(this.prefix, 'g'), '')
            .replace(new RegExp(this.suffix, 'g'), '').replace(/\,/g, '');
        if (this.groupSeparator && this.groupSeparator !== ',') {
            val = val.replace(new RegExp("\\" + this.groupSeparator, 'g'), '');
        }
        if (this.decimalSeparator && this.decimalSeparator !== '.') {
            val = val.replace(new RegExp("\\" + this.decimalSeparator, 'g'), '.');
        }
        return val;
    };
    /**
     * @param {?} val
     * @return {?}
     */
    NumberSpinnerComponent.prototype.updateValue = /**
     * @param {?} val
     * @return {?}
     */
    function (val) {
        val = this.cleanNumString(val);
        this._realValue = this.getRealValue(val);
        this.value = this.format(this._realValue);
        this.el.nativeElement.value = this.value;
    };
    /**
     * @private
     * @return {?}
     */
    NumberSpinnerComponent.prototype.updateControlValue = /**
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var _val = this.cleanNumString(this.value);
        if (this.parser) {
            _val = this.parser(this.value);
        }
        if (this.isEmpty(this._realValue) && this.isEmpty(_val)) {
            return;
        }
        /** @type {?} */
        var rv = new BigNumber(this._realValue);
        /** @type {?} */
        var cv = new BigNumber(_val);
        if (rv.isNaN() && cv.isNaN()) {
            return;
        }
        // if (!rv.eq(cv)) {
        // }
        if (this._ngControl) {
            /** @type {?} */
            var formgroup = this._ngControl['formDirective'];
            if (formgroup) {
                /** @type {?} */
                var ctrl = formgroup.control.get(this._ngControl.name);
                if (!ctrl && formgroup.control.controls) {
                    ctrl = formgroup.control.controls[this._ngControl.name];
                }
                if (ctrl) {
                    if (ctrl.value !== this._realValue) {
                        ctrl.setValue(this._realValue);
                    }
                }
            }
        }
    };
    /**
     * @param {?} val
     * @return {?}
     */
    NumberSpinnerComponent.prototype.writeValue = /**
     * @param {?} val
     * @return {?}
     */
    function (val) {
        this._realValue = val;
        this.value = this.format(this._realValue);
        this.updateControlValue();
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    NumberSpinnerComponent.prototype.registerOnChange = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this.onChangeCallback = fn;
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    NumberSpinnerComponent.prototype.registerOnTouched = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this.onTouchedCallback = fn;
    };
    /**
     * @param {?} isDisabled
     * @return {?}
     */
    NumberSpinnerComponent.prototype.setDisabledState = /**
     * @param {?} isDisabled
     * @return {?}
     */
    function (isDisabled) {
        this.disabled = isDisabled;
    };
    NumberSpinnerComponent.decorators = [
        { type: Component, args: [{
                    selector: 'farris-number-spinner',
                    template: "\n        <div class=\"input-group  f-state-hover flex-row\"\n            [ngClass]=\"{'f-state-disabled': disabled,'f-state-readonly': readonly,'f-state-focus': isFocus }\"\n            (mouseenter)=\"onMouseEnter($event)\"\n            #popover=\"bs-popover\"\n            farrisPopover\n            [popover]=\"popValue\" [triggers]=\"'hover'\" [popActive]=\"isActiveTip\"\n            [showAction]=\"'show2'\"  [container]=\"'body'\">\n            <input #input\n                type=\"text\"\n                number-only\n                [precision]=\"precision\"\n                autocomplete=\"off\"\n                class=\"form-control f-utils-fill\"\n                [ngModel]=\"value\"\n                [placeholder]=\"disabled||readonly || !editable?'':placeholder\"\n                [readonly]=\"readonly || !editable\"\n                [disabled]=\"disabled\"\n                [style.padding-right]=\"'4px'\"\n                [style.text-align]=\"textAlign\"\n                (ngModelChange)=\"onModelChange($event)\"\n                (blur)=\"onBlur(input)\"\n                (focus)=\"onFocus($event)\"\n                (keydown)=\"onKeyDown($event)\"\n                (click)=\"onClick($event)\"\n            />\n            <div class=\"input-group-append btn-group btn-group-number\" *ngIf=\"!disabled && !readonly && showButton\">\n                <button\n                    class=\"btn btn-secondary btn-number-flag\"\n                    [style.cursor]=\"isDisableOfBtn('up') ? 'pointer' : 'not-allowed'\"\n                    (click)=\"up($event)\" [disabled]=\"!isDisableOfBtn('up')\"\n                >\n                    <span class=\"icon k-i-arrow-chevron-up number-arrow-chevron\"></span>\n                </button>\n                <button\n                    class=\"btn btn-secondary btn-number-flag\"\n                    [style.cursor]=\"isDisableOfBtn('down') ? 'pointer' : 'not-allowed'\"\n                    (click)=\"down($event)\" [disabled]=\"!isDisableOfBtn('down')\"\n                >\n                    <span class=\"icon k-i-arrow-chevron-down number-arrow-chevron\"></span>\n                </button>\n            </div>\n        </div>\n    ",
                    providers: [
                        {
                            provide: NG_VALUE_ACCESSOR,
                            useExisting: forwardRef((/**
                             * @return {?}
                             */
                            function () { return NumberSpinnerComponent; })),
                            multi: true
                        }
                    ],
                    styles: [".input-group .btn-group-number{height:1.50003rem;-webkit-box-orient:vertical;-webkit-box-direction:normal;flex-direction:column;background-color:#fff}.input-group .btn-group-number .btn-number-flag{height:50%;display:-webkit-box;display:flex;box-shadow:none;padding:0 5px;margin-left:1px;border-left:1px solid #d9d9d9;overflow:hidden;-webkit-transition:.1s linear;transition:.1s linear}.input-group .btn-group-number .btn-number-flag .number-arrow-chevron{-webkit-box-flex:1;flex:1;line-height:1}.input-group .btn-group-number .btn-number-flag:hover{height:60%!important}.input-group .btn-group-number .btn-number-flag:nth-child(2){border-top:1px solid #d9d9d9}input::-webkit-inner-spin-button,input::-webkit-outer-spin-button{-webkit-appearance:none!important;margin:0}.number-range{position:relative}.number-range .input-container{display:-webkit-box;display:flex;padding:0}.number-range .input-container .sub-input-group{-webkit-box-flex:1;flex:1;position:relative;display:-webkit-box;display:flex;-webkit-transition:.3s ease-out;transition:.3s ease-out}.number-range .input-container .sub-input-group .sub-input{width:100%;border:none;outline:0;background-color:rgba(0,0,0,0);min-width:2px;padding:.125rem 4px .125rem .5rem}.number-range .input-container .spliter{width:15px;text-align:center}"]
                }] }
    ];
    /** @nocollapse */
    NumberSpinnerComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: Renderer2 },
        { type: Injector }
    ]; };
    NumberSpinnerComponent.propDecorators = {
        hostClass: [{ type: HostBinding, args: ['class.f-cmp-number-spinner',] }],
        disabled: [{ type: Input }],
        readonly: [{ type: Input }],
        editable: [{ type: Input }],
        formatter: [{ type: Input }],
        parser: [{ type: Input }],
        placeholder: [{ type: Input }],
        step: [{ type: Input }],
        max: [{ type: Input }],
        min: [{ type: Input }],
        bigNumber: [{ type: Input }],
        showButton: [{ type: Input }],
        useThousands: [{ type: Input }],
        textAlign: [{ type: Input }],
        autoDecimal: [{ type: Input }],
        canNull: [{ type: Input }],
        precision: [{ type: Input }],
        prefix: [{ type: Input }],
        suffix: [{ type: Input }],
        decimalSeparator: [{ type: Input }],
        groupSeparator: [{ type: Input }],
        groupSize: [{ type: Input }],
        value: [{ type: Input }],
        showZero: [{ type: Input }],
        valueChange: [{ type: Output }],
        blur: [{ type: Output }],
        focus: [{ type: Output }],
        input: [{ type: ViewChild, args: ['input',] }]
    };
    return NumberSpinnerComponent;
}());
export { NumberSpinnerComponent };
if (false) {
    /** @type {?} */
    NumberSpinnerComponent.prototype.hostClass;
    /** @type {?} */
    NumberSpinnerComponent.prototype.disabled;
    /** @type {?} */
    NumberSpinnerComponent.prototype.readonly;
    /** @type {?} */
    NumberSpinnerComponent.prototype.editable;
    /** @type {?} */
    NumberSpinnerComponent.prototype.formatter;
    /** @type {?} */
    NumberSpinnerComponent.prototype.parser;
    /** @type {?} */
    NumberSpinnerComponent.prototype.placeholder;
    /** @type {?} */
    NumberSpinnerComponent.prototype.step;
    /** @type {?} */
    NumberSpinnerComponent.prototype.max;
    /** @type {?} */
    NumberSpinnerComponent.prototype.min;
    /**
     * 启用大数支持
     * @type {?}
     */
    NumberSpinnerComponent.prototype.bigNumber;
    /** @type {?} */
    NumberSpinnerComponent.prototype.showButton;
    /** @type {?} */
    NumberSpinnerComponent.prototype.useThousands;
    /** @type {?} */
    NumberSpinnerComponent.prototype.textAlign;
    /** @type {?} */
    NumberSpinnerComponent.prototype.autoDecimal;
    /** @type {?} */
    NumberSpinnerComponent.prototype.canNull;
    /** @type {?} */
    NumberSpinnerComponent.prototype.precision;
    /** @type {?} */
    NumberSpinnerComponent.prototype.prefix;
    /** @type {?} */
    NumberSpinnerComponent.prototype.suffix;
    /**
     * 小数点符号
     * @type {?}
     */
    NumberSpinnerComponent.prototype.decimalSeparator;
    /**
     * 千分位符号
     * @type {?}
     */
    NumberSpinnerComponent.prototype.groupSeparator;
    /**
     * 使用千分位时，每组显示的字符数
     * @type {?}
     */
    NumberSpinnerComponent.prototype.groupSize;
    /**
     * @type {?}
     * @private
     */
    NumberSpinnerComponent.prototype._value;
    /**
     * 显示0值
     * @type {?}
     */
    NumberSpinnerComponent.prototype.showZero;
    /** @type {?} */
    NumberSpinnerComponent.prototype.valueChange;
    /** @type {?} */
    NumberSpinnerComponent.prototype.blur;
    /** @type {?} */
    NumberSpinnerComponent.prototype.focus;
    /** @type {?} */
    NumberSpinnerComponent.prototype.input;
    /** @type {?} */
    NumberSpinnerComponent.prototype.isFocus;
    /** @type {?} */
    NumberSpinnerComponent.prototype.popValue;
    /** @type {?} */
    NumberSpinnerComponent.prototype.isActiveTip;
    /** @type {?} */
    NumberSpinnerComponent.prototype.formatOptions;
    /**
     * @type {?}
     * @private
     */
    NumberSpinnerComponent.prototype._realValue;
    /** @type {?} */
    NumberSpinnerComponent.prototype.cdRef;
    /** @type {?} */
    NumberSpinnerComponent.prototype.commonUtils;
    /**
     * @type {?}
     * @private
     */
    NumberSpinnerComponent.prototype._ngControl;
    /**
     * @type {?}
     * @private
     */
    NumberSpinnerComponent.prototype.showtipTimer;
    /** @type {?} */
    NumberSpinnerComponent.prototype._updateOn;
    /** @type {?} */
    NumberSpinnerComponent.prototype.localeService;
    /** @type {?} */
    NumberSpinnerComponent.prototype.onTouchedCallback;
    /** @type {?} */
    NumberSpinnerComponent.prototype.onChangeCallback;
    /** @type {?} */
    NumberSpinnerComponent.prototype.el;
    /** @type {?} */
    NumberSpinnerComponent.prototype.render;
    /** @type {?} */
    NumberSpinnerComponent.prototype.injector;
}
//# sourceMappingURL=data:application/json;base64,