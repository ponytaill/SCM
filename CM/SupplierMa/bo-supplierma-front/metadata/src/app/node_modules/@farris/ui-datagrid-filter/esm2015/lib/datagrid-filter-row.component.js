/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { DatagridFilterRowService } from './datagrid-filter-row.service';
import { Component, Input, ElementRef, Renderer2, NgZone, Output, EventEmitter, Injector, ViewEncapsulation, ViewChildren, QueryList, ChangeDetectorRef } from '@angular/core';
import { FormGroup, FormBuilder } from '@angular/forms';
import { DatagridComponent } from '@farris/ui-datagrid';
import { debounceTime } from 'rxjs/operators';
import { FilterCellEditorDirective } from './datagrid-filter-cell-editor.directive';
export class FilterRowComponent {
    /**
     * @param {?} fb
     * @param {?} el
     * @param {?} ngzone
     * @param {?} cd
     * @param {?} dfrs
     * @param {?} render
     * @param {?} inject
     */
    constructor(fb, el, ngzone, cd, dfrs, render, inject) {
        this.fb = fb;
        this.el = el;
        this.ngzone = ngzone;
        this.cd = cd;
        this.dfrs = dfrs;
        this.render = render;
        this.inject = inject;
        this.delay = 300;
        this.conditionChange = new EventEmitter();
        this.form = new FormGroup({});
        this.filterRowConditionsScribe = this.dfrs.filterRowConditions$.pipe(debounceTime(this.delay)).subscribe((/**
         * @param {?} ccs
         * @return {?}
         */
        ccs => {
            this.conditionChange.emit(ccs);
        }));
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.form = this.createControl();
        this.ngzone.runOutsideAngular((/**
         * @return {?}
         */
        () => {
            this.render.listen('document', 'click', (/**
             * @return {?}
             */
            () => {
                this.dfrs.closeFilterPanel();
            }));
        }));
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        // console.log(this.el);
        /** @type {?} */
        const nativeEl = this.el.nativeElement;
        this.tr = nativeEl.parentElement;
        nativeEl.querySelectorAll('td').forEach((/**
         * @param {?} n
         * @return {?}
         */
        n => {
            this.tr.append(n);
        }));
        nativeEl.style.display = 'none';
        this.dfrs.gridInstance = this.gridInstance;
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        if (this.filterRowConditionsScribe) {
            this.filterRowConditionsScribe.unsubscribe();
            this.filterRowConditionsScribe = null;
        }
        if (this.tr) {
            /** @type {?} */
            const tds = this.tr.querySelectorAll('td');
            if (tds && tds.length) {
                tds.forEach((/**
                 * @param {?} a
                 * @return {?}
                 */
                a => {
                    this.tr.removeChild(a);
                }));
            }
        }
    }
    /**
     * @return {?}
     */
    createControl() {
        /** @type {?} */
        const group = this.fb.group({});
        this.columns.forEach((/**
         * @param {?} col
         * @return {?}
         */
        col => {
            if (col.colspan) {
                return;
            }
            /** @type {?} */
            const control = this.fb.control('');
            group.addControl(col.field, control);
        }));
        return group;
    }
    /**
     * @param {?=} emitEvent
     * @return {?}
     */
    clearFilterValue(emitEvent = true) {
        // this.form.reset();
        this.editors.forEach((/**
         * @param {?} c
         * @return {?}
         */
        c => {
            c.clearValue();
        }));
        this.dfrs.clear(emitEvent);
    }
    /**
     * @param {?} field
     * @param {?=} opts
     * @return {?}
     */
    removeField(field, opts) {
        this.dfrs.removeFilterField(field, opts);
    }
}
FilterRowComponent.decorators = [
    { type: Component, args: [{
                selector: '[filter-row]',
                template: "\r\n\r\n<td *ngFor=\"let col of columns\" class=\"f-datagrid-header-cell f-datagrid-filter-td\" \r\n    style=\"text-align: center;\" [attr.id]=\"'filter-row_' + col.field \">\r\n    <ng-container filter-cell-editor [delay]=\"delay\" [gridInstance]=\"gridInstance\" [column]=\"col\" [group]=\"form\"></ng-container>\r\n</td>\r\n\r\n",
                providers: [
                    DatagridFilterRowService
                ],
                encapsulation: ViewEncapsulation.None,
                styles: [".filter-condition .list-group-item{padding:10px;background:#f8f8f8}.filter-condition .datalist{min-height:100px;max-height:200px;overflow:auto}.filter-condition .datalist::-webkit-scrollbar{width:15px;height:15px}.filter-condition .datalist::-webkit-scrollbar-thumb{background-color:#c2c2c2;border-radius:10px;background-clip:content-box}.filter-condition .datalist::-webkit-scrollbar-thumb:hover{background-color:#7d7d7d;border-radius:10px;background-clip:content-box}.filter-condition .datalist::-webkit-scrollbar-thumb:vertical,.filter-condition .datalist::-webkit-scrollbar-thumb:vertical:hover{border:3px solid transparent;border-left-width:4px}.filter-condition .datalist::-webkit-scrollbar-thumb:horizontal,.filter-condition .datalist::-webkit-scrollbar-thumb:horizontal:hover{border:3px solid transparent;border-top:4px solid transparent}.filter-condition .datalist::-webkit-scrollbar-track{background-color:#fafafa}.filter-condition .datalist::-webkit-scrollbar-track:vertical{border-left:1px solid #e8e8e8}.filter-condition .datalist::-webkit-scrollbar-track:horizontal{border-top:1px solid #e8e8e8}.filter-condition .datalist::-webkit-scrollbar-corner{background-color:#fafafa}.filter-condition farris-datalist .card{border:0}.filter-condition .card .list-group-item{padding-left:0;padding-right:0}.filter-condition .list-group-item.border-b1{border-bottom:1px solid #dde2eb!important;margin-bottom:0}.f-datagrid-filter-panel{background:#f8f8f8;position:absolute;z-index:999;box-shadow:0 1px 4px 1px rgba(186,191,199,.4);top:140px;left:1257px;width:200px;border-radius:3px;border:1px solid #babfc7}.f-datagrid-filter-panel .panel-header{height:36px;min-height:36px;border-bottom:1px solid #2196f3;text-align:center;line-height:36px;color:#2196f3}.f-datagrid-filter-td .filter-editor-disabled{color:rgba(24,29,31,.5);background-color:#f1f2f4;border-color:rgba(186,191,199,.3)}.f-datagrid-filter-td .filter-editor-disabled:hover{background-color:#f1f2f4}.f-datagrid-filter-td:hover{background-color:transparent}"]
            }] }
];
/** @nocollapse */
FilterRowComponent.ctorParameters = () => [
    { type: FormBuilder },
    { type: ElementRef },
    { type: NgZone },
    { type: ChangeDetectorRef },
    { type: DatagridFilterRowService },
    { type: Renderer2 },
    { type: Injector }
];
FilterRowComponent.propDecorators = {
    columns: [{ type: Input }],
    gridInstance: [{ type: Input }],
    delay: [{ type: Input }],
    conditionChange: [{ type: Output }],
    editors: [{ type: ViewChildren, args: [FilterCellEditorDirective,] }]
};
if (false) {
    /** @type {?} */
    FilterRowComponent.prototype.columns;
    /**
     * datagrid Instance
     * @type {?}
     */
    FilterRowComponent.prototype.gridInstance;
    /** @type {?} */
    FilterRowComponent.prototype.delay;
    /** @type {?} */
    FilterRowComponent.prototype.conditionChange;
    /** @type {?} */
    FilterRowComponent.prototype.editors;
    /** @type {?} */
    FilterRowComponent.prototype.filterRowConditionsScribe;
    /** @type {?} */
    FilterRowComponent.prototype.form;
    /** @type {?} */
    FilterRowComponent.prototype.tr;
    /**
     * @type {?}
     * @private
     */
    FilterRowComponent.prototype.fb;
    /**
     * @type {?}
     * @private
     */
    FilterRowComponent.prototype.el;
    /**
     * @type {?}
     * @private
     */
    FilterRowComponent.prototype.ngzone;
    /**
     * @type {?}
     * @private
     */
    FilterRowComponent.prototype.cd;
    /** @type {?} */
    FilterRowComponent.prototype.dfrs;
    /**
     * @type {?}
     * @private
     */
    FilterRowComponent.prototype.render;
    /**
     * @type {?}
     * @private
     */
    FilterRowComponent.prototype.inject;
}
//# sourceMappingURL=data:application/json;base64,