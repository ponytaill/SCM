/**
 * @fileoverview added by tsickle
 * Generated from: lib/entity/conditionvalue/inputgroupvalue.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ControlType } from '../controltype';
import { cloneDeep } from 'lodash-es';
export class InputGroupValue {
    /**
     * @return {?}
     */
    getControlType() {
        return ControlType.InputGroup;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    setOriginalValue(value) {
        throw new Error("Method not implemented.");
    }
    /**
     * @return {?}
     */
    getOriginalValue() {
        /** @type {?} */
        const args = this.textField.split('.');
        /** @type {?} */
        const textArr = this.value.map((/**
         * @param {?} item
         * @return {?}
         */
        item => this.getPropValue(item, cloneDeep(args))));
        return textArr && textArr.length ? textArr.join(',') : '';
    }
    /**
     * @return {?}
     */
    clearValue() {
        this.value = [];
        this.textValue = undefined;
        this.textField = undefined;
        this.isInputText = undefined;
    }
    /**
     * @return {?}
     */
    isEmpty() {
        return !this.textValue;
    }
    /**
     * @param {?=} data
     */
    constructor(data = { value: [], textValue: undefined, textField: undefined, isInputText: undefined }) {
        this.value = data.value;
        // this.textValue = data.textValue ? data.textValue.trim() : '';
        this.textValue = data.textValue ? data.textValue : '';
        this.textField = data.textField;
        this.isInputText = data.isInputText;
    }
    /**
     * @param {?} targetField
     * @return {?}
     */
    getTextValue(targetField) {
        /** @type {?} */
        const args = targetField.split('.');
        /** @type {?} */
        const textArr = this.value.map((/**
         * @param {?} item
         * @return {?}
         */
        item => this.getPropValue(item, cloneDeep(args))));
        return textArr && textArr.length ? textArr.join(',') : '';
    }
    /**
     * @param {?} item
     * @param {?} args
     * @return {?}
     */
    getPropValue(item, args) {
        if (args.length > 1) {
            /** @type {?} */
            const arg = args.shift();
            return item[arg] ? this.getPropValue(item[arg], args) : '';
        }
        return item[args[0]];
    }
}
if (false) {
    /** @type {?} */
    InputGroupValue.prototype.value;
    /** @type {?} */
    InputGroupValue.prototype.textValue;
    /** @type {?} */
    InputGroupValue.prototype.textField;
    /** @type {?} */
    InputGroupValue.prototype.isInputText;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5wdXRncm91cHZhbHVlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGZhcnJpcy9jb21wb25lbnQtcXVlcnljb25kaXRpb24vIiwic291cmNlcyI6WyJsaWIvZW50aXR5L2NvbmRpdGlvbnZhbHVlL2lucHV0Z3JvdXB2YWx1ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUNBLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUM3QyxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sV0FBVyxDQUFDO0FBRXRDLE1BQU0sT0FBTyxlQUFlOzs7O0lBRXhCLGNBQWM7UUFDVixPQUFPLFdBQVcsQ0FBQyxVQUFVLENBQUM7SUFDbEMsQ0FBQzs7Ozs7SUFFRCxnQkFBZ0IsQ0FBQyxLQUFVO1FBQ3ZCLE1BQU0sSUFBSSxLQUFLLENBQUMseUJBQXlCLENBQUMsQ0FBQztJQUMvQyxDQUFDOzs7O0lBRUQsZ0JBQWdCOztjQUNOLElBQUksR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUM7O2NBQ2hDLE9BQU8sR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUc7Ozs7UUFBQyxJQUFJLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxFQUFFLFNBQVMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFDO1FBQ2hGLE9BQU8sT0FBTyxJQUFJLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUEsQ0FBQyxDQUFDLEVBQUUsQ0FBQztJQUM3RCxDQUFDOzs7O0lBRUQsVUFBVTtRQUNOLElBQUksQ0FBQyxLQUFLLEdBQUcsRUFBRSxDQUFDO1FBQ2hCLElBQUksQ0FBQyxTQUFTLEdBQUcsU0FBUyxDQUFDO1FBQzNCLElBQUksQ0FBQyxTQUFTLEdBQUcsU0FBUyxDQUFDO1FBQzNCLElBQUksQ0FBQyxXQUFXLEdBQUcsU0FBUyxDQUFDO0lBQ2pDLENBQUM7Ozs7SUFFRCxPQUFPO1FBQ0gsT0FBTyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUM7SUFDM0IsQ0FBQzs7OztJQVdELFlBQVksT0FLUixFQUFDLEtBQUssRUFBRSxFQUFFLEVBQUUsU0FBUyxFQUFFLFNBQVMsRUFBRSxTQUFTLEVBQUUsU0FBUyxFQUFFLFdBQVcsRUFBRSxTQUFTLEVBQUM7UUFDL0UsSUFBSSxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDO1FBQ3hCLGdFQUFnRTtRQUNoRSxJQUFJLENBQUMsU0FBUyxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQztRQUN0RCxJQUFJLENBQUMsU0FBUyxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUM7UUFDaEMsSUFBSSxDQUFDLFdBQVcsR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDO0lBQ3hDLENBQUM7Ozs7O0lBRUQsWUFBWSxDQUFDLFdBQW1COztjQUN0QixJQUFJLEdBQUcsV0FBVyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUM7O2NBQzdCLE9BQU8sR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUc7Ozs7UUFBQyxJQUFJLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxFQUFFLFNBQVMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFDO1FBQ2hGLE9BQU8sT0FBTyxJQUFJLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUEsQ0FBQyxDQUFDLEVBQUUsQ0FBQztJQUM3RCxDQUFDOzs7Ozs7SUFFRCxZQUFZLENBQUMsSUFBUyxFQUFFLElBQW1CO1FBQ3ZDLElBQUcsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUM7O2tCQUNULEdBQUcsR0FBRyxJQUFJLENBQUMsS0FBSyxFQUFFO1lBQ3hCLE9BQU8sSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDO1NBQzlEO1FBQ0QsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDekIsQ0FBQztDQUNKOzs7SUFsQ0csZ0NBQWE7O0lBRWIsb0NBQWtCOztJQUVsQixvQ0FBa0I7O0lBRWxCLHNDQUFxQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IElWYWx1ZSB9IGZyb20gJy4vaXZhbHVlJztcclxuaW1wb3J0IHsgQ29udHJvbFR5cGUgfSBmcm9tICcuLi9jb250cm9sdHlwZSc7XHJcbmltcG9ydCB7IGNsb25lRGVlcCB9IGZyb20gJ2xvZGFzaC1lcyc7XHJcblxyXG5leHBvcnQgY2xhc3MgSW5wdXRHcm91cFZhbHVlIGltcGxlbWVudHMgSVZhbHVlIHtcclxuXHJcbiAgICBnZXRDb250cm9sVHlwZSgpOiBDb250cm9sVHlwZSB7XHJcbiAgICAgICAgcmV0dXJuIENvbnRyb2xUeXBlLklucHV0R3JvdXA7XHJcbiAgICB9XHJcblxyXG4gICAgc2V0T3JpZ2luYWxWYWx1ZSh2YWx1ZTogYW55KSB7XHJcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiTWV0aG9kIG5vdCBpbXBsZW1lbnRlZC5cIik7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0T3JpZ2luYWxWYWx1ZSgpOiBzdHJpbmcge1xyXG4gICAgICAgIGNvbnN0IGFyZ3MgPSB0aGlzLnRleHRGaWVsZC5zcGxpdCgnLicpO1xyXG4gICAgICAgIGNvbnN0IHRleHRBcnIgPSB0aGlzLnZhbHVlLm1hcChpdGVtID0+IHRoaXMuZ2V0UHJvcFZhbHVlKGl0ZW0sIGNsb25lRGVlcChhcmdzKSkpO1xyXG4gICAgICAgIHJldHVybiB0ZXh0QXJyICYmIHRleHRBcnIubGVuZ3RoID8gdGV4dEFyci5qb2luKCcsJyk6ICcnO1xyXG4gICAgfVxyXG5cclxuICAgIGNsZWFyVmFsdWUoKTogdm9pZCB7XHJcbiAgICAgICAgdGhpcy52YWx1ZSA9IFtdO1xyXG4gICAgICAgIHRoaXMudGV4dFZhbHVlID0gdW5kZWZpbmVkO1xyXG4gICAgICAgIHRoaXMudGV4dEZpZWxkID0gdW5kZWZpbmVkO1xyXG4gICAgICAgIHRoaXMuaXNJbnB1dFRleHQgPSB1bmRlZmluZWQ7XHJcbiAgICB9XHJcblxyXG4gICAgaXNFbXB0eSgpOiBib29sZWFuIHtcclxuICAgICAgICByZXR1cm4gIXRoaXMudGV4dFZhbHVlO1xyXG4gICAgfVxyXG5cclxuICAgIC8v6YCa6L+H5by556qX6L+U5Zue55qE6Iul5bmy5Liq5YC85a+56LGh5p6E5oiQ55qE5pWw57uEXHJcbiAgICB2YWx1ZTogYW55W107XHJcbiAgICAvL+aOp+S7tuWGheaYvuekuueahOWAvFxyXG4gICAgdGV4dFZhbHVlOiBzdHJpbmc7XHJcbiAgICAvL+W8ueeql+aooeW8j+S4i++8jOWPluWIl+ihqOS4reWTquS4quWtl+auteeahOWAvOaYoOWwhOWIsOW9k+WJjeWtl+autVxyXG4gICAgdGV4dEZpZWxkOiBzdHJpbmc7XHJcbiAgICAvL+aYr+WQpuaYr+aJi+WKqOi+k+WFpeeahOWAvFxyXG4gICAgaXNJbnB1dFRleHQ6IGJvb2xlYW47XHJcblxyXG4gICAgY29uc3RydWN0b3IoZGF0YToge1xyXG4gICAgICAgIHZhbHVlOiBhbnksXHJcbiAgICAgICAgdGV4dFZhbHVlOiBzdHJpbmcsXHJcbiAgICAgICAgdGV4dEZpZWxkOiBzdHJpbmcsXHJcbiAgICAgICAgaXNJbnB1dFRleHQ6IGJvb2xlYW5cclxuICAgIH0gPSB7dmFsdWU6IFtdLCB0ZXh0VmFsdWU6IHVuZGVmaW5lZCwgdGV4dEZpZWxkOiB1bmRlZmluZWQsIGlzSW5wdXRUZXh0OiB1bmRlZmluZWR9KXtcclxuICAgICAgICB0aGlzLnZhbHVlID0gZGF0YS52YWx1ZTtcclxuICAgICAgICAvLyB0aGlzLnRleHRWYWx1ZSA9IGRhdGEudGV4dFZhbHVlID8gZGF0YS50ZXh0VmFsdWUudHJpbSgpIDogJyc7XHJcbiAgICAgICAgdGhpcy50ZXh0VmFsdWUgPSBkYXRhLnRleHRWYWx1ZSA/IGRhdGEudGV4dFZhbHVlIDogJyc7XHJcbiAgICAgICAgdGhpcy50ZXh0RmllbGQgPSBkYXRhLnRleHRGaWVsZDtcclxuICAgICAgICB0aGlzLmlzSW5wdXRUZXh0ID0gZGF0YS5pc0lucHV0VGV4dDtcclxuICAgIH1cclxuXHJcbiAgICBnZXRUZXh0VmFsdWUodGFyZ2V0RmllbGQ6IHN0cmluZyk6IHN0cmluZyB7XHJcbiAgICAgICAgY29uc3QgYXJncyA9IHRhcmdldEZpZWxkLnNwbGl0KCcuJyk7XHJcbiAgICAgICAgY29uc3QgdGV4dEFyciA9IHRoaXMudmFsdWUubWFwKGl0ZW0gPT4gdGhpcy5nZXRQcm9wVmFsdWUoaXRlbSwgY2xvbmVEZWVwKGFyZ3MpKSk7XHJcbiAgICAgICAgcmV0dXJuIHRleHRBcnIgJiYgdGV4dEFyci5sZW5ndGggPyB0ZXh0QXJyLmpvaW4oJywnKTogJyc7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0UHJvcFZhbHVlKGl0ZW06IGFueSwgYXJnczogQXJyYXk8c3RyaW5nPik6IGFueXtcclxuICAgICAgICBpZihhcmdzLmxlbmd0aCA+IDEpe1xyXG4gICAgICAgICAgICBjb25zdCBhcmcgPSBhcmdzLnNoaWZ0KCk7XHJcbiAgICAgICAgICAgIHJldHVybiBpdGVtW2FyZ10gPyB0aGlzLmdldFByb3BWYWx1ZShpdGVtW2FyZ10sIGFyZ3MpIDogJyc7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBpdGVtW2FyZ3NbMF1dO1xyXG4gICAgfVxyXG59Il19