import { Injectable, Optional } from '@angular/core';
import { of, empty, EMPTY } from 'rxjs';
import { tap, switchMap, concatMap } from 'rxjs/operators';
import { FrameContext, FieldMetadataUtil } from '@farris/devkit';
import { BefRepositoryUtil } from '@farris/bef';
import { FormLoadingService } from '../form-loading/form-loading.service';
import { FormNotifyService } from '../form-notify.service';
import { LanguageService } from '../languag.service';
import { FormMessageService } from '../form-message.service';
import { FormErrorService } from '../error/form-error.service';
import { BaseDataService } from './base-data.service';
import { TreeUtilFactory } from './tree-table/util/tree-util-factory';
import { TreeRepositoryFactory } from './tree-table/repository/tree-repository-factory';
// tslint:disable: no-string-literal
/**
 * 树数据服务
 */
class TreeDataService extends BaseDataService {
    /**
     * 构造函数
     */
    constructor(frameContext, messageService, loadingService, notifyService, errorService, languageService) {
        super(frameContext);
        this.messageService = messageService;
        this.loadingService = loadingService;
        this.notifyService = notifyService;
        this.errorService = errorService;
        this.languageService = languageService;
        if (!languageService) {
            this.languageService = LanguageService.getInstance();
        }
    }
    /**
     * 分级信息字段名
     */
    get hierarchyInfoKey() {
        return this.virtualRootFrameContext.getParam('hierarchyInfoKey');
    }
    get virtualRootFrameContext() {
        return this.frameContext.getVirtualRootFrameContext();
    }
    /**
     * 加载数据
     */
    load(filters, sorts) {
        const filtersArray = this.parseConditions(filters);
        const sortsArray = this.parseConditions(sorts);
        const correctSelectedNode = this.repository.entityCollection.count() === 0;
        const loadingTimerId = this.loadingService.showLoadingWithDelay(500);
        const query$ = this.repository.getEntities(filtersArray, sortsArray, null, null);
        return query$.pipe(tap(() => {
            // 纠正选中节点
            if (correctSelectedNode === true) {
                const hierarchyType = this.getHierarchyType();
                const treeNodeUtil = TreeUtilFactory.getInstance(hierarchyType);
                if (treeNodeUtil !== null) {
                    treeNodeUtil.selectFirstRootNode(this.bindingData, this.hierarchyInfoKey);
                }
            }
            this.loadingService.hideDelayLoading(loadingTimerId);
        }, (error) => {
            this.loadingService.hideDelayLoading(loadingTimerId);
            this.errorService.exception(this.languageService.loadFailed, error);
        }));
    }
    /**
     * 分层加载数据
     */
    loadByLevel(filters, sorts, frozenCurrentRow) {
        this.setLoadByLevelState(filters, sorts);
        const filtersArray = this.parseConditions(filters);
        const sortsArray = this.parseConditions(sorts);
        // const parentId = this.bindingData.list.currentId;
        const parentId = this.getIdToExpand();
        const correctSelectedNode = this.repository.entityCollection.count() === 0;
        if (frozenCurrentRow === undefined) {
            frozenCurrentRow = false;
        }
        if (typeof frozenCurrentRow !== 'boolean') {
            frozenCurrentRow = frozenCurrentRow === 'true' ? true : false;
        }
        const hierarchyType = this.getHierarchyType();
        const repository = TreeRepositoryFactory.getInstance(hierarchyType);
        if (repository === null) {
            return empty();
        }
        const loadingTimerId = this.loadingService.showLoadingWithDelay(500);
        // 构造分页信息
        const pagination = this.buildPaginationInfo(parentId);
        const reload = this.frameContext.params.get('_RELOAD_CHILDREN_') || false;
        const query$ = repository.loadByParentId(this.repository, this.hierarchyInfoKey, parentId, filtersArray, sortsArray, frozenCurrentRow, pagination, this.frameContext, reload);
        return query$.pipe(tap((entities) => {
            this.frameContext.params.delete('_RELOAD_CHILDREN_');
            // 纠正选中节点
            if (correctSelectedNode === true) {
                const treeNodeUtil = TreeUtilFactory.getInstance(hierarchyType);
                if (treeNodeUtil !== null) {
                    treeNodeUtil.selectFirstRootNode(this.bindingData, this.hierarchyInfoKey);
                }
            }
            const currentRowId = this.bindingData.list.currentItem.primaryKeyValue;
            if (frozenCurrentRow) {
                // 如果上一次选中行为本次加载数据中的一条，则应该重新选中该行
                const containsCurrentRow = entities.find(item => item.primaryValue === currentRowId);
                if (containsCurrentRow) {
                    this.setCurrentId(currentRowId);
                }
                // 原来的当前行不在已经加载的数据中，如展开到第三级，将第三级的某行设为当前行，全部收起，展开第一级
                if (!this.repository.entityCollection.getEntityById(currentRowId)) {
                    const firstChildId = entities && Array.isArray(entities) && entities.length > 0 && entities[0].primaryValue || null;
                    if (firstChildId) {
                        this.setCurrentId(firstChildId);
                    }
                }
            }
            this.loadingService.hideDelayLoading(loadingTimerId);
        }, error => {
            this.loadingService.hideDelayLoading(loadingTimerId);
            this.errorService.exception(this.languageService.loadFailed, error);
        }));
    }
    /**
     * 加载完整树
     * @param virtualPropertyName 虚拟字段
     * @param fullTreeType 是否是完整树加载 0：完整树 1：部分树
     * @param loadType 是否分级加载 0：全部加载 1：分级加载
     * @param filter 过滤条件
     * @param frozenCurrentRow 冻结当前行
     */
    loadFullTree(virtualPropertyName, fullTreeType, loadType, filters, frozenCurrentRow) {
        if (typeof fullTreeType !== 'string') {
            throw new Error('ArgumentError: fullTreeType 不能为空且必须为字符串。');
        }
        if (typeof loadType !== 'string') {
            throw new Error('ArgumentError: loadType 不能为空且必须为字符串。');
        }
        if (frozenCurrentRow === undefined) {
            frozenCurrentRow = false;
        }
        if (typeof frozenCurrentRow !== 'boolean') {
            frozenCurrentRow = frozenCurrentRow === 'true' ? true : false;
        }
        const virtualRootFrameContext = this.virtualRootFrameContext;
        // 还原上次设置的结果集
        virtualRootFrameContext.params.delete('_DEVKIT_expandRowIds');
        virtualRootFrameContext.params.delete('_DEVKIT_selectedRowId');
        virtualRootFrameContext.uiState.setPropertyValue('__DEVKIT__selectedRow', null);
        const filtersArray = this.parseConditions(filters);
        const parentId = this.getIdToExpand();
        const correctSelectedNode = this.repository.entityCollection.count() === 0;
        const hierarchyType = this.getHierarchyType();
        const repository = TreeRepositoryFactory.getInstance(hierarchyType);
        if (repository === null) {
            return EMPTY;
        }
        const loadingTimerId = this.loadingService.showLoadingWithDelay(500);
        const context = {
            frameContext: this.frameContext,
            frozenCurrentRow
        };
        // tslint:disable-next-line: max-line-length
        const query$ = repository.loadFullTree(this.repository, this.hierarchyInfoKey, parentId, virtualPropertyName, fullTreeType, loadType, filtersArray, context);
        return query$.pipe(tap((entities) => {
            const selectedRowId = virtualRootFrameContext.params.get('_DEVKIT_selectedRowId');
            // 纠正选中节点
            if (correctSelectedNode === true || !selectedRowId) {
                const treeNodeUtil = TreeUtilFactory.getInstance(hierarchyType);
                if (treeNodeUtil !== null) {
                    treeNodeUtil.selectFirstRootNode(this.bindingData, this.hierarchyInfoKey);
                }
            }
            const currentRowId = this.bindingData.list.currentItem.primaryKeyValue;
            if (frozenCurrentRow) {
                // 如果上一次选中行为本次加载数据中的一条，则应该重新选中该行
                const containsCurrentRow = entities.find(item => item.primaryValue === currentRowId);
                if (containsCurrentRow) {
                    this.setCurrentId(currentRowId);
                }
                // 原来的当前行不在已经加载的数据中，如展开到第三级，将第三级的某行设为当前行，全部收起，展开第一级
                if (!this.repository.entityCollection.getEntityById(currentRowId) && entities && entities.length > 0) {
                    const firstChildId = entities && Array.isArray(entities) && entities.length > 0 && entities[0].primaryValue || null;
                    if (firstChildId) {
                        this.setCurrentId(firstChildId);
                    }
                }
            }
            this.loadingService.hideDelayLoading(loadingTimerId);
        }, error => {
            this.loadingService.hideDelayLoading(loadingTimerId);
            this.errorService.exception(this.languageService.loadFailed, error);
        }));
    }
    /**
     * 获取最新展开的节点
     */
    getIdToExpand() {
        const expandNodes = this.virtualRootFrameContext.getParam('TREE_LATEST_EXPANDED_ID') || [];
        const idToExpand = expandNodes.pop();
        this.virtualRootFrameContext.setParam('TREE_LATEST_EXPANDED_ID', expandNodes);
        return idToExpand;
    }
    /**
     * 设置最新展开的节点
     */
    setIdToExpand(idToExpand) {
        const expandNodes = this.virtualRootFrameContext.getParam('TREE_LATEST_EXPANDED_ID') || [];
        expandNodes.push(idToExpand);
        this.virtualRootFrameContext.setParam('TREE_LATEST_EXPANDED_ID', expandNodes);
    }
    /**
     * 解析过滤条件
     */
    parseConditions(conditions) {
        const conditionsString = (!conditions || conditions === '') ? '[]' : conditions;
        return JSON.parse(conditionsString);
    }
    /**
     * 新增同级
     */
    addSibling(id) {
        // 设计时id的获取改为从命令参数上获取，但设计时没有参数必填检查，
        // 如果打开表单保存了（即更新了最新的命令构件），但没有配置该参数，可能会传递过来一个空值，
        // 为了兼容此情况，使用当前行id作为id的值
        id = id ? id : this.bindingData.list.currentId;
        // 参数检查
        if (!id || id === 'undefined') {
            id = '';
        }
        // 记录最近一次修改的数据id
        const lastModifiedId = this.bindingData.list.currentId;
        // 获取分级方式
        const hierarchyType = this.getHierarchyType();
        // 执行取数
        const loadingTimerId = this.loadingService.showLoadingWithDelay(500);
        const repository = TreeRepositoryFactory.getInstance(hierarchyType);
        if (!repository) {
            // 错误的分级码
            throw new Error(this.languageService['errorHierarchyKey']);
        }
        const result$ = repository.addSibling(this.repository, id);
        return result$.pipe(tap(() => {
            this.virtualRootFrameContext.setParam('IS_ADD', true);
            this.virtualRootFrameContext.setParam('LAST_MODIFIED_ID', lastModifiedId);
            this.loadingService.hideDelayLoading(loadingTimerId);
        }, error => {
            this.loadingService.hideDelayLoading(loadingTimerId);
            this.errorService.exception(this.languageService.addSiblingFailed, error);
        }));
    }
    /**
     * 新增下级
     */
    addChild(id) {
        // 原因同addSibling的修改
        id = id ? id : this.bindingData.list.currentId;
        // 参数检查
        if (!id) {
            // 请选择父节点
            this.notifyService.warning(this.languageService['plsSelectParentNode'], { hideTitle: true });
            return empty();
        }
        // 记录最近一次修改的数据id
        const lastModifiedId = this.bindingData.list.currentId;
        // 获取分级方式
        const hierarchyType = this.getHierarchyType();
        // 执行取数
        const loadingTimerId = this.loadingService.showLoadingWithDelay(500);
        // 新增的时候，要展开父节点
        this.setIdToExpand(id);
        const reloadChild$ = this.reloadByLevel();
        const repository = TreeRepositoryFactory.getInstance(hierarchyType);
        if (!repository) {
            throw new Error(this.languageService['errorHierarchyKey']);
        }
        const addChild$ = repository.addChild(this.repository, id);
        const result$ = reloadChild$.pipe(switchMap(() => {
            return addChild$;
        }), tap(() => {
            this.virtualRootFrameContext.setParam('IS_ADD', true);
            this.virtualRootFrameContext.setParam('LAST_MODIFIED_ID', lastModifiedId);
            this.loadingService.hideDelayLoading(loadingTimerId);
        }, error => {
            this.loadingService.hideDelayLoading(loadingTimerId);
            this.errorService.exception(this.languageService.addChildFailed, error);
        }));
        return result$;
    }
    /**
     * 批量保存
     */
    save() {
        if (this.messagePipe) {
            this.messagePipe.next({ messageType: 'save' });
        }
        const loadingTimerId = this.loadingService.showLoadingWithDelay(500);
        const save$ = this.repository.applyChanges();
        const result$ = save$.pipe(tap(() => {
            this.loadingService.hideDelayLoading(loadingTimerId);
            this.notifyService.success(this.languageService.saveSuccess, { hideTitle: true });
        }, error => {
            this.loadingService.hideDelayLoading(loadingTimerId);
            this.errorService.exception(this.languageService.multiSaveFailed, error);
        }));
        return result$;
    }
    /**
     * 删除
     */
    remove(id, successMsg) {
        // 原因同addSibling
        id = id ? id : this.bindingData.list.currentId;
        // 参数检查
        if (!id) {
            this.notifyService.warning(this.languageService['plsSelectDeleteData'], { hideTitle: true });
            return empty();
        }
        // 存在子节点不允许删除
        const treeNodesData = this.repository.entityCollection.toJSON();
        const hierarchyType = this.getHierarchyType();
        const treeNodeUtil = TreeUtilFactory.getInstance(hierarchyType);
        if (treeNodeUtil === null) {
            return empty();
        }
        if (treeNodeUtil.hasChildNodes(treeNodesData, this.hierarchyInfoKey, id) === true) {
            this.notifyService.warning(this.languageService['deleteChildFirst'], { hideTitle: true });
            return empty();
        }
        // 确认删除
        const action$ = this.messageService.question(this.languageService.confirmDeletion);
        return action$.pipe(concatMap(result => {
            if (!result) {
                return empty();
            }
            // 获取删除后要设置的节点id
            const nextNodeId = treeNodeUtil.getNextNodeId(treeNodesData, this.hierarchyInfoKey, id);
            // 执行删除
            const loadingTimerId = this.loadingService.showLoadingWithDelay(500);
            const remove$ = this.frameContext.repository.removeById(id);
            return remove$.pipe(tap(() => {
                // 设置选中节点
                treeNodeUtil.selectedNode(this.bindingData, this.hierarchyInfoKey, nextNodeId);
                this.loadingService.hideDelayLoading(loadingTimerId);
                if (successMsg && successMsg.trim()) {
                    this.notifyService.success(successMsg, { hideTitle: true });
                }
                else {
                    this.notifyService.success(this.languageService.deleteSuccess, { hideTitle: true });
                }
                // this.notifyService.success(this.languageService.deleteSuccess, { hideTitle: true });
            }, error => {
                this.loadingService.hideDelayLoading(loadingTimerId);
                this.errorService.exception(this.languageService.deleteFailed, error);
            }));
        }));
    }
    /**
     * 取消时检测未保存记录
     */
    cancel() {
        // 没有变更时直接取消
        // const cardDataService = this.frameContext.injector.get<CardDataService>(CardDataService);
        const befRepository = this.repository;
        const hasUnsavedData = BefRepositoryUtil.isExistUnsaveData(befRepository);
        if (!hasUnsavedData) {
            return this._cancel();
        }
        const confirmResult$ = this.messageService.question(this.languageService['cancelWithoutSave']).pipe(switchMap((ifCancel) => {
            if (ifCancel === false) {
                return EMPTY;
            }
            return this._cancel();
        }));
        return confirmResult$;
    }
    /**
     * 构造分页信息
     * @param parentId parentId
     * @returns
     */
    buildPaginationInfo(parentId) {
        const pagination = { pageIndex: 0, pageSize: 0 };
        const enableNodePagination = this.frameContext.params.get('enableNodePagination');
        if (!parentId) {
            // 一级分页
            const pageSize = this.repository.entityCollection.pageSize || 0;
            const pageIndex = this.repository.entityCollection.pageIndex || 0;
            // 启用了一级分页
            if (pageSize !== 0) {
                pagination.pageSize = pageSize;
                pagination.pageIndex = pageIndex;
            }
        }
        else {
            // 如果未启用节点分页或当前为顶级节点加载，则不处理节点分页
            if (enableNodePagination) {
                const nodePageSize = this.frameContext.params.get('nodePageSize') || 0;
                let nodePageIndex = this.frameContext.params.get(`_NODE_${parentId}_PAGE_INDEX_`);
                if (!nodePageIndex) {
                    this.frameContext.params.set(`_NODE_${parentId}_PAGE_INDEX_`, 1);
                    nodePageIndex = 1;
                }
                pagination.pageIndex = nodePageIndex;
                pagination.pageSize = nodePageSize;
            }
        }
        return pagination;
    }
    /**
     * 取消变更
     */
    _cancel() {
        const loadingTimerId = this.loadingService.showLoadingWithDelay(500);
        const cancel$ = this.repository.cancelChanges();
        return cancel$.pipe(switchMap(() => {
            const isAdd = this.virtualRootFrameContext.getParam('IS_ADD');
            const lastModifiedId = this.virtualRootFrameContext.getParam('LAST_MODIFIED_ID');
            const currentId = this.bindingData.list.currentId;
            if (isAdd === true) {
                this.repository.entityCollection.removeEntityById(currentId);
                // 重置编辑状态
                this.virtualRootFrameContext.setParam('IS_ADD', false);
                if (lastModifiedId) {
                    setTimeout(() => {
                        this.bindingData.list.setCurrentId(lastModifiedId, true, true);
                    }, 0);
                }
                return of(null);
            }
            else {
                return this.repository.updateById(currentId);
            }
        }), tap(() => {
            this.loadingService.hideDelayLoading(loadingTimerId);
        }, (error) => {
            this.loadingService.hideDelayLoading(loadingTimerId);
            this.errorService.exception(this.languageService.cancelFailed, error);
        }));
    }
    /**
     * 检查是否存在下级节点（内部方法，请勿使用）
     */
    hasChildNodes(id, treeNodesData) {
        const treeNodeUtil = this.getTreeNodeUtil();
        if (treeNodeUtil.hasChildNodes(treeNodesData, this.hierarchyInfoKey, id) === true) {
            return true;
        }
        return false;
    }
    /**
     * 计算删除后的当前节点id（内部方法，请勿使用）
     */
    getNextNodeIdAfterRemoving(idToRemove, treeNodesData) {
        const treeNodeUtil = this.getTreeNodeUtil();
        const nextNodeId = treeNodeUtil.getNextNodeId(treeNodesData, this.hierarchyInfoKey, idToRemove);
        return nextNodeId;
    }
    /**
     * 设置删除后的当前节点节点（内部方法，请勿使用）
     */
    setNextNodeAfterRemoving(nextNodeId) {
        const treeNodeUtil = this.getTreeNodeUtil();
        treeNodeUtil.selectedNode(this.bindingData, this.hierarchyInfoKey, nextNodeId);
    }
    /**
     * 设置树的当前行(给完整树使用)
     * @param id id
     */
    setCurrentId(id) {
        id = id || this.frameContext.getVirtualRootFrameContext().uiState['__DEVKIT__selectedRow'] || this.bindingData.list.currentItem.primaryKeyValue;
        this.frameContext.bindingData.list.setCurrentId(id, true, true, true);
    }
    /**
     * 选中树的第一个节点
     */
    selectFirstRow() {
        const hierarchyType = this.getHierarchyType();
        const treeNodeUtil = TreeUtilFactory.getInstance(hierarchyType);
        if (treeNodeUtil !== null) {
            treeNodeUtil.selectFirstRootNode(this.bindingData, this.hierarchyInfoKey);
        }
    }
    /**
     * 获取树节点工具类实例
     */
    getTreeNodeUtil() {
        const hierarchyType = this.getHierarchyType();
        const treeNodeUtil = TreeUtilFactory.getInstance(hierarchyType);
        if (treeNodeUtil === null) {
            throw new Error(`不支持${hierarchyType}类型的分级`);
        }
        return treeNodeUtil;
    }
    /**
     * 记录加载状态
     * @todo：待删除
     */
    setLoadByLevelState(filters, sorts) {
        // @todo：临时处理
        this.virtualRootFrameContext.setParam('isLoadTreeByLevel', true);
        this.virtualRootFrameContext.setParam('loadTreeByLevelFilter', filters);
        this.virtualRootFrameContext.setParam('loadTreeByLevelSort', sorts);
    }
    /**
     * 展开当前节点
     * @todo：待删除
     */
    reloadByLevel() {
        const isLoadByLevel = this.virtualRootFrameContext.getParam('isLoadTreeByLevel');
        if (isLoadByLevel === true) {
            const filters = this.virtualRootFrameContext.getParam('loadTreeByLevelFilter');
            const sorts = this.virtualRootFrameContext.getParam('loadTreeByLevelSort');
            return this.loadByLevel(filters, sorts);
        }
        return of([]);
    }
    getHierarchyType() {
        const ngObjects = FieldMetadataUtil.getNgObjects(this.repository.entityType);
        const hierarchyInfoNgObjectInfo = ngObjects[this.hierarchyInfoKey];
        let hierarchyType = 'path'; // 分级码默认为path，兼容原表单
        if (hierarchyInfoNgObjectInfo.hasOwnProperty('hierarchyType') && hierarchyInfoNgObjectInfo['hierarchyType'] != null) {
            hierarchyType = hierarchyInfoNgObjectInfo['hierarchyType'];
        }
        if (hierarchyType == null || hierarchyType.length < 1) {
            // '分级码配置信息错误'
            throw new Error(this.languageService['incorrectHierarchyConfig']);
        }
        return hierarchyType;
    }
    /**
     * 获取根组件消息管道
     */
    get messagePipe() {
        if (this.frameContext) {
            const appContext = this.frameContext.getFormAppContext() || null;
            if (appContext) {
                return appContext.messagePipe || null;
            }
        }
        return null;
    }
}
TreeDataService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
TreeDataService.ctorParameters = () => [
    { type: FrameContext },
    { type: FormMessageService },
    { type: FormLoadingService },
    { type: FormNotifyService },
    { type: FormErrorService },
    { type: LanguageService, decorators: [{ type: Optional }] }
];
export { TreeDataService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHJlZS1kYXRhLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZmFycmlzL2NvbW1hbmQtc2VydmljZXMvIiwic291cmNlcyI6WyJsaWIvZGF0YS1zZXJ2aWNlcy90cmVlLWRhdGEuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLFFBQVEsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUNyRCxPQUFPLEVBQWMsRUFBRSxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFDcEQsT0FBTyxFQUFFLEdBQUcsRUFBRSxTQUFTLEVBQUUsU0FBUyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFFM0QsT0FBTyxFQUFVLFlBQVksRUFBRSxpQkFBaUIsRUFBbUIsTUFBTSxnQkFBZ0IsQ0FBQztBQUMxRixPQUFPLEVBQWlCLGlCQUFpQixFQUFFLE1BQU0sYUFBYSxDQUFDO0FBRS9ELE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxNQUFNLHNDQUFzQyxDQUFDO0FBQzFFLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLHdCQUF3QixDQUFDO0FBQzNELE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQztBQUNyRCxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSx5QkFBeUIsQ0FBQztBQUM3RCxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSw2QkFBNkIsQ0FBQztBQUUvRCxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFFdEQsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLHFDQUFxQyxDQUFDO0FBQ3RFLE9BQU8sRUFBRSxxQkFBcUIsRUFBRSxNQUFNLGlEQUFpRCxDQUFDO0FBQ3hGLG9DQUFvQztBQUVwQzs7R0FFRztBQUNILE1BQ00sZUFBZ0IsU0FBUSxlQUFlO0lBWTNDOztPQUVHO0lBQ0gsWUFDRSxZQUEwQixFQUNsQixjQUFrQyxFQUNsQyxjQUFrQyxFQUNs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RTtRQUNELElBQUksYUFBYSxJQUFJLElBQUksSUFBSSxhQUFhLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRTtZQUNyRCxjQUFjO1lBQ2QsTUFBTSxJQUFJLEtBQUssQ0FBQyxJQUFJLENBQUMsZUFBZSxDQUFDLDBCQUEwQixDQUFDLENBQUMsQ0FBQztTQUNuRTtRQUNELE9BQU8sYUFBYSxDQUFDO0lBQ3ZCLENBQUM7SUFDRDs7T0FFRztJQUNILElBQVksV0FBVztRQUNyQixJQUFJLElBQUksQ0FBQyxZQUFZLEVBQUU7WUFDckIsTUFBTSxVQUFVLEdBQUcsSUFBSSxDQUFDLFlBQVksQ0FBQyxpQkFBaUIsRUFBRSxJQUFJLElBQUksQ0FBQztZQUNqRSxJQUFJLFVBQVUsRUFBRTtnQkFDZCxPQUFPLFVBQVUsQ0FBQyxXQUFXLElBQUksSUFBSSxDQUFDO2FBQ3ZDO1NBQ0Y7UUFDRCxPQUFPLElBQUksQ0FBQztJQUNkLENBQUM7OztZQW5tQkYsVUFBVTs7OztZQWxCTSxZQUFZO1lBTXBCLGtCQUFrQjtZQUhsQixrQkFBa0I7WUFDbEIsaUJBQWlCO1lBR2pCLGdCQUFnQjtZQUZoQixlQUFlLHVCQW1DbkIsUUFBUTs7QUEra0JiLE9BQU8sRUFBRSxlQUFlLEVBQUUsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUsIE9wdGlvbmFsIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBPYnNlcnZhYmxlLCBvZiwgZW1wdHksIEVNUFRZIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyB0YXAsIHN3aXRjaE1hcCwgY29uY2F0TWFwIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuXG5pbXBvcnQgeyBFbnRpdHksIEZyYW1lQ29udGV4dCwgRmllbGRNZXRhZGF0YVV0aWwsIE5nRmllbGRQcm9wZXJ0eSB9IGZyb20gJ0BmYXJyaXMvZGV2a2l0JztcbmltcG9ydCB7IEJlZlJlcG9zaXRvcnksIEJlZlJlcG9zaXRvcnlVdGlsIH0gZnJvbSAnQGZhcnJpcy9iZWYnO1xuXG5pbXBvcnQgeyBGb3JtTG9hZGluZ1NlcnZpY2UgfSBmcm9tICcuLi9mb3JtLWxvYWRpbmcvZm9ybS1sb2FkaW5nLnNlcnZpY2UnO1xuaW1wb3J0IHsgRm9ybU5vdGlmeVNlcnZpY2UgfSBmcm9tICcuLi9mb3JtLW5vdGlmeS5zZXJ2aWNlJztcbmltcG9ydCB7IExhbmd1YWdlU2VydmljZSB9IGZyb20gJy4uL2xhbmd1YWcuc2VydmljZSc7XG5pbXBvcnQgeyBGb3JtTWVzc2FnZVNlcnZpY2UgfSBmcm9tICcuLi9mb3JtLW1lc3NhZ2Uuc2VydmljZSc7XG5pbXBvcnQgeyBGb3JtRXJyb3JTZXJ2aWNlIH0gZnJvbSAnLi4vZXJyb3IvZm9ybS1lcnJvci5zZXJ2aWNlJztcblxuaW1wb3J0IHsgQmFzZURhdGFTZXJ2aWNlIH0gZnJvbSAnLi9iYXNlLWRhdGEuc2VydmljZSc7XG5pbXBvcnQgeyBFZGl0U3RhdGVVdGlsIH0gZnJvbSAnLi91dGlscy9pbmRleCc7XG5pbXBvcnQgeyBUcmVlVXRpbEZhY3RvcnkgfSBmcm9tICcuL3RyZWUtdGFibGUvdXRpbC90cmVlLXV0aWwtZmFjdG9yeSc7XG5pbXBvcnQgeyBUcmVlUmVwb3NpdG9yeUZhY3RvcnkgfSBmcm9tICcuL3RyZWUtdGFibGUvcmVwb3NpdG9yeS90cmVlLXJlcG9zaXRvcnktZmFjdG9yeSc7XG4vLyB0c2xpbnQ6ZGlzYWJsZTogbm8tc3RyaW5nLWxpdGVyYWxcblxuLyoqXG4gKiDmoJHmlbDmja7mnI3liqFcbiAqL1xuQEluamVjdGFibGUoKVxuY2xhc3MgVHJlZURhdGFTZXJ2aWNlIGV4dGVuZHMgQmFzZURhdGFTZXJ2aWNlIHtcblxuICAvKipcbiAgICog5YiG57qn5L+h5oGv5a2X5q615ZCNXG4gICAqL1xuICBwcml2YXRlIGdldCBoaWVyYXJjaHlJbmZvS2V5KCk6IHN0cmluZyB7XG4gICAgcmV0dXJuIHRoaXMudmlydHVhbFJvb3RGcmFtZUNvbnRleHQuZ2V0UGFyYW0oJ2hpZXJhcmNoeUluZm9LZXknKTtcbiAgfVxuICBwcml2YXRlIGdldCB2aXJ0dWFsUm9vdEZyYW1lQ29udGV4dCgpIHtcbiAgICByZXR1cm4gdGhpcy5mcmFtZUNvbnRleHQuZ2V0VmlydHVhbFJvb3RGcmFtZUNvbnRleHQoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiDmnoTpgKDlh73mlbBcbiAgICovXG4gIGNvbnN0cnVjdG9yKFxuICAgIGZyYW1lQ29udGV4dDogRnJhbWVDb250ZXh0LFxuICAgIHByaXZhdGUgbWVzc2FnZVNlcnZpY2U6IEZvcm1NZXNzYWdlU2VydmljZSxcbiAgICBwcml2YXRlIGxvYWRpbmdTZXJ2aWNlOiBGb3JtTG9hZGluZ1NlcnZpY2UsXG4gICAgcHJpdmF0ZSBub3RpZnlTZXJ2aWNlOiBGb3JtTm90aWZ5U2VydmljZSxcbiAgICBwcml2YXRlIGVycm9yU2VydmljZTogRm9ybUVycm9yU2VydmljZSxcbiAgICBAT3B0aW9uYWwoKSBwcml2YXRlIGxhbmd1YWdlU2VydmljZTogTGFuZ3VhZ2VTZXJ2aWNlXG4gICkge1xuICAgIHN1cGVyKGZyYW1lQ29udGV4dCk7XG4gICAgaWYgKCFsYW5ndWFnZVNlcnZpY2UpIHtcbiAgICAgIHRoaXMubGFuZ3VhZ2VTZXJ2aWNlID0gTGFuZ3VhZ2VTZXJ2aWNlLmdldEluc3RhbmNlKCk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIOWKoOi9veaVsOaNrlxuICAgKi9cbiAgcHVibGljIGxvYWQoZmlsdGVycz86IHN0cmluZywgc29ydHM/OiBzdHJpbmcpOiBPYnNlcnZhYmxlPEVudGl0eVtdPiB7XG4gICAgY29uc3QgZmlsdGVyc0FycmF5ID0gdGhpcy5wYXJzZUNvbmRpdGlvbnMoZmlsdGVycyk7XG4gICAgY29uc3Qgc29ydHNBcnJheSA9IHRoaXMucGFyc2VDb25kaXRpb25zKHNvcnRzKTtcbiAgICBjb25zdCBjb3JyZWN0U2VsZWN0ZWROb2RlID0gdGhpcy5yZXBvc2l0b3J5LmVudGl0eUNvbGxlY3Rpb24uY291bnQoKSA9PT0gMDtcblxuICAgIGNvbnN0IGxvYWRpbmdUaW1lcklkID0gdGhpcy5sb2FkaW5nU2VydmljZS5zaG93TG9hZGluZ1dpdGhEZWxheSg1MDApO1xuICAgIGNvbnN0IHF1ZXJ5JCA9IHRoaXMucmVwb3NpdG9yeS5nZXRFbnRpdGllcyhmaWx0ZXJzQXJyYXksIHNvcnRzQXJyYXksIG51bGwsIG51bGwpO1xuICAgIHJldHVybiBxdWVyeSQucGlwZShcbiAgICAgIHRhcChcbiAgICAgICAgKCkgPT4ge1xuXG4gICAgICAgICAgLy8g57qg5q2j6YCJ5Lit6IqC54K5XG4gICAgICAgICAgaWYgKGNvcnJlY3RTZWxlY3RlZE5vZGUgPT09IHRydWUpIHtcbiAgICAgICAgICAgIGNvbnN0IGhpZXJhcmNoeVR5cGUgPSB0aGlzLmdldEhpZXJhcmNoeVR5cGUoKTtcbiAgICAgICAgICAgIGNvbnN0IHRyZWVOb2RlVXRpbCA9IFRyZWVVdGlsRmFjdG9yeS5nZXRJbnN0YW5jZShoaWVyYXJjaHlUeXBlKTtcbiAgICAgICAgICAgIGlmICh0cmVlTm9kZVV0aWwgIT09IG51bGwpIHtcbiAgICAgICAgICAgICAgdHJlZU5vZGVVdGlsLnNlbGVjdEZpcnN0Um9vdE5vZGUodGhpcy5iaW5kaW5nRGF0YSwgdGhpcy5oaWVyYXJjaHlJbmZvS2V5KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICB0aGlzLmxvYWRpbmdTZXJ2aWNlLmhpZGVEZWxheUxvYWRpbmcobG9hZGluZ1RpbWVySWQpO1xuICAgICAgICB9LFxuICAgICAgICAoZXJyb3I6IGFueSkgPT4ge1xuICAgICAgICAgIHRoaXMubG9hZGluZ1NlcnZpY2UuaGlkZURlbGF5TG9hZGluZyhsb2FkaW5nVGltZXJJZCk7XG4gICAgICAgICAgdGhpcy5lcnJvclNlcnZpY2UuZXhjZXB0aW9uKHRoaXMubGFuZ3VhZ2VTZXJ2aWNlLmxvYWRGYWlsZWQsIGVycm9yKTtcbiAgICAgICAgfVxuICAgICAgKVxuICAgICk7XG4gIH1cblxuICAvKipcbiAgICog5YiG5bGC5Yqg6L295pWw5o2uXG4gICAqL1xuICBwdWJsaWMgbG9hZEJ5TGV2ZWwoZmlsdGVycz86IHN0cmluZywgc29ydHM/OiBzdHJpbmcsIGZyb3plbkN1cnJlbnRSb3c/OiBib29sZWFuIHwgc3RyaW5nKTogT2JzZXJ2YWJsZTxFbnRpdHlbXT4ge1xuICAgIHRoaXMuc2V0TG9hZEJ5TGV2ZWxTdGF0ZShmaWx0ZXJzLCBzb3J0cyk7XG4gICAgY29uc3QgZmlsdGVyc0FycmF5ID0gdGhpcy5wYXJzZUNvbmRpdGlvbnMoZmlsdGVycyk7XG4gICAgY29uc3Qgc29ydHNBcnJheSA9IHRoaXMucGFyc2VDb25kaXRpb25zKHNvcnRzKTtcbiAgICAvLyBjb25zdCBwYXJlbnRJZCA9IHRoaXMuYmluZGluZ0RhdGEubGlzdC5jdXJyZW50SWQ7XG4gICAgY29uc3QgcGFyZW50SWQgPSB0aGlzLmdldElkVG9FeHBhbmQoKTtcbiAgICBjb25zdCBjb3JyZWN0U2VsZWN0ZWROb2RlID0gdGhpcy5yZXBvc2l0b3J5LmVudGl0eUNvbGxlY3Rpb24uY291bnQoKSA9PT0gMDtcbiAgICBpZiAoZnJvemVuQ3VycmVudFJvdyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICBmcm96ZW5DdXJyZW50Um93ID0gZmFsc2U7XG4gICAgfVxuICAgIGlmICh0eXBlb2YgZnJvemVuQ3VycmVudFJvdyAhPT0gJ2Jvb2xlYW4nKSB7XG4gICAgICBmcm96ZW5DdXJyZW50Um93ID0gZnJvemVuQ3VycmVudFJvdyA9PT0gJ3RydWUnID8gdHJ1ZSA6IGZhbHNlO1xuICAgIH1cbiAgICBjb25zdCBoaWVyYXJjaHlUeXBlID0gdGhpcy5nZXRIaWVyYXJjaHlUeXBlKCk7XG4gICAgY29uc3QgcmVwb3NpdG9yeSA9IFRyZWVSZXBvc2l0b3J5RmFjdG9yeS5nZXRJbnN0YW5jZShoaWVyYXJjaHlUeXBlKTtcblxuICAgIGlmIChyZXBvc2l0b3J5ID09PSBudWxsKSB7XG4gICAgICByZXR1cm4gZW1wdHkoKTtcbiAgICB9XG4gICAgY29uc3QgbG9hZGluZ1RpbWVySWQgPSB0aGlzLmxvYWRpbmdTZXJ2aWNlLnNob3dMb2FkaW5nV2l0aERlbGF5KDUwMCk7XG4gICAgLy8g5p6E6YCg5YiG6aG15L+h5oGvXG4gICAgY29uc3QgcGFnaW5hdGlvbiA9IHRoaXMuYnVpbGRQYWdpbmF0aW9uSW5mbyhwYXJlbnRJZCk7XG4gICAgY29uc3QgcmVsb2FkID0gdGhpcy5mcmFtZUNvbnRleHQucGFyYW1zLmdldCgnX1JFTE9BRF9DSElMRFJFTl8nKSB8fCBmYWxzZTtcbiAgICBjb25zdCBxdWVyeSQgPSByZXBvc2l0b3J5LmxvYWRCeVBhcmVudElkKHRoaXMucmVwb3NpdG9yeSwgdGhpcy5oaWVyYXJjaHlJbmZvS2V5LCBwYXJlbnRJZCwgZmlsdGVyc0FycmF5LCBzb3J0c0FycmF5LCBmcm96ZW5DdXJyZW50Um93LCBwYWdpbmF0aW9uLCB0aGlzLmZyYW1lQ29udGV4dCwgcmVsb2FkKTtcbiAgICByZXR1cm4gcXVlcnkkLnBpcGUoXG4gICAgICB0YXAoXG4gICAgICAgIChlbnRpdGllczogRW50aXR5W10pID0+IHtcbiAgICAgICAgICB0aGlzLmZyYW1lQ29udGV4dC5wYXJhbXMuZGVsZXRlKCdfUkVMT0FEX0NISUxEUkVOXycpO1xuICAgICAgICAgIC8vIOe6oOato+mAieS4reiKgueCuVxuICAgICAgICAgIGlmIChjb3JyZWN0U2VsZWN0ZWROb2RlID09PSB0cnVlKSB7XG4gICAgICAgICAgICBjb25zdCB0cmVlTm9kZVV0aWwgPSBUcmVlVXRpbEZhY3RvcnkuZ2V0SW5zdGFuY2UoaGllcmFyY2h5VHlwZSk7XG4gICAgICAgICAgICBpZiAodHJlZU5vZGVVdGlsICE9PSBudWxsKSB7XG4gICAgICAgICAgICAgIHRyZWVOb2RlVXRpbC5zZWxlY3RGaXJzdFJvb3ROb2RlKHRoaXMuYmluZGluZ0RhdGEsIHRoaXMuaGllcmFyY2h5SW5mb0tleSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGNvbnN0IGN1cnJlbnRSb3dJZCA9IHRoaXMuYmluZGluZ0RhdGEubGlzdC5jdXJyZW50SXRlbS5wcmltYXJ5S2V5VmFsdWU7XG4gICAgICAgICAgaWYgKGZyb3plbkN1cnJlbnRSb3cpIHtcbiAgICAgICAgICAgIC8vIOWmguaenOS4iuS4gOasoemAieS4reihjOS4uuacrOasoeWKoOi9veaVsOaNruS4reeahOS4gOadoe+8jOWImeW6lOivpemHjeaWsOmAieS4reivpeihjFxuICAgICAgICAgICAgY29uc3QgY29udGFpbnNDdXJyZW50Um93ID0gZW50aXRpZXMuZmluZChpdGVtID0+IGl0ZW0ucHJpbWFyeVZhbHVlID09PSBjdXJyZW50Um93SWQpO1xuICAgICAgICAgICAgaWYgKGNvbnRhaW5zQ3VycmVudFJvdykge1xuICAgICAgICAgICAgICB0aGlzLnNldEN1cnJlbnRJZChjdXJyZW50Um93SWQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8g5Y6f5p2l55qE5b2T5YmN6KGM5LiN5Zyo5bey57uP5Yqg6L2955qE5pWw5o2u5Lit77yM5aaC5bGV5byA5Yiw56ys5LiJ57qn77yM5bCG56ys5LiJ57qn55qE5p+Q6KGM6K6+5Li65b2T5YmN6KGM77yM5YWo6YOo5pS26LW377yM5bGV5byA56ys5LiA57qnXG4gICAgICAgICAgICBpZiAoIXRoaXMucmVwb3NpdG9yeS5lbnRpdHlDb2xsZWN0aW9uLmdldEVudGl0eUJ5SWQoY3VycmVudFJvd0lkKSkge1xuICAgICAgICAgICAgICBjb25zdCBmaXJzdENoaWxkSWQgPSBlbnRpdGllcyAmJiBBcnJheS5pc0FycmF5KGVudGl0aWVzKSAmJiBlbnRpdGllcy5sZW5ndGggPiAwICYmIGVudGl0aWVzWzBdLnByaW1hcnlWYWx1ZSB8fCBudWxsO1xuICAgICAgICAgICAgICBpZiAoZmlyc3RDaGlsZElkKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zZXRDdXJyZW50SWQoZmlyc3RDaGlsZElkKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICB0aGlzLmxvYWRpbmdTZXJ2aWNlLmhpZGVEZWxheUxvYWRpbmcobG9hZGluZ1RpbWVySWQpO1xuICAgICAgICB9LFxuICAgICAgICBlcnJvciA9PiB7XG4gICAgICAgICAgdGhpcy5sb2FkaW5nU2VydmljZS5oaWRlRGVsYXlMb2FkaW5nKGxvYWRpbmdUaW1lcklkKTtcbiAgICAgICAgICB0aGlzLmVycm9yU2VydmljZS5leGNlcHRpb24odGhpcy5sYW5ndWFnZVNlcnZpY2UubG9hZEZhaWxlZCwgZXJyb3IpO1xuICAgICAgICB9XG4gICAgICApXG4gICAgKTtcbiAgfVxuICAvKipcbiAgICog5Yqg6L295a6M5pW05qCRXG4gICAqIEBwYXJhbSB2aXJ0dWFsUHJvcGVydHlOYW1lIOiZmuaLn+Wtl+autVxuICAgKiBAcGFyYW0gZnVsbFRyZWVUeXBlIOaYr+WQpuaYr+WujOaVtOagkeWKoOi9vSAw77ya5a6M5pW05qCRIDHvvJrpg6jliIbmoJFcbiAgICogQHBhcmFtIGxvYWRUeXBlIOaYr+WQpuWIhue6p+WKoOi9vSAw77ya5YWo6YOo5Yqg6L29IDHvvJrliIbnuqfliqDovb1cbiAgICogQHBhcmFtIGZpbHRlciDov4fmu6TmnaHku7ZcbiAgICogQHBhcmFtIGZyb3plbkN1cnJlbnRSb3cg5Ya757uT5b2T5YmN6KGMXG4gICAqL1xuICBwdWJsaWMgbG9hZEZ1bGxUcmVlKHZpcnR1YWxQcm9wZXJ0eU5hbWU6IHN0cmluZywgZnVsbFRyZWVUeXBlOiBzdHJpbmcsIGxvYWRUeXBlOiBzdHJpbmcsIGZpbHRlcnM6IHN0cmluZywgZnJvemVuQ3VycmVudFJvdz86IGJvb2xlYW4gfCBzdHJpbmcpOiBPYnNlcnZhYmxlPEVudGl0eVtdPiB7XG4gICAgaWYgKHR5cGVvZiBmdWxsVHJlZVR5cGUgIT09ICdzdHJpbmcnKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0FyZ3VtZW50RXJyb3I6IGZ1bGxUcmVlVHlwZSDkuI3og73kuLrnqbrkuJTlv4XpobvkuLrlrZfnrKbkuLLjgIInKTtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBsb2FkVHlwZSAhPT0gJ3N0cmluZycpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignQXJndW1lbnRFcnJvcjogbG9hZFR5cGUg5LiN6IO95Li656m65LiU5b+F6aG75Li65a2X56ym5Liy44CCJyk7XG4gICAgfVxuICAgIGlmIChmcm96ZW5DdXJyZW50Um93ID09PSB1bmRlZmluZWQpIHtcbiAgICAgIGZyb3plbkN1cnJlbnRSb3cgPSBmYWxzZTtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBmcm96ZW5DdXJyZW50Um93ICE9PSAnYm9vbGVhbicpIHtcbiAgICAgIGZyb3plbkN1cnJlbnRSb3cgPSBmcm96ZW5DdXJyZW50Um93ID09PSAndHJ1ZScgPyB0cnVlIDogZmFsc2U7XG4gICAgfVxuICAgIGNvbnN0IHZpcnR1YWxSb290RnJhbWVDb250ZXh0ID0gdGhpcy52aXJ0dWFsUm9vdEZyYW1lQ29udGV4dDtcbiAgICAvLyDov5jljp/kuIrmrKHorr7nva7nmoTnu5Pmnpzpm4ZcbiAgICB2aXJ0dWFsUm9vdEZyYW1lQ29udGV4dC5wYXJhbXMuZGVsZXRlKCdfREVWS0lUX2V4cGFuZFJvd0lkcycpO1xuICAgIHZpcnR1YWxSb290RnJhbWVDb250ZXh0LnBhcmFtcy5kZWxldGUoJ19ERVZLSVRfc2VsZWN0ZWRSb3dJZCcpO1xuICAgIHZpcnR1YWxSb290RnJhbWVDb250ZXh0LnVpU3RhdGUuc2V0UHJvcGVydHlWYWx1ZSgnX19ERVZLSVRfX3NlbGVjdGVkUm93JywgbnVsbCk7XG4gICAgY29uc3QgZmlsdGVyc0FycmF5ID0gdGhpcy5wYXJzZUNvbmRpdGlvbnMoZmlsdGVycyk7XG4gICAgY29uc3QgcGFyZW50SWQgPSB0aGlzLmdldElkVG9FeHBhbmQoKTtcbiAgICBjb25zdCBjb3JyZWN0U2VsZWN0ZWROb2RlID0gdGhpcy5yZXBvc2l0b3J5LmVudGl0eUNvbGxlY3Rpb24uY291bnQoKSA9PT0gMDtcbiAgICBjb25zdCBoaWVyYXJjaHlUeXBlID0gdGhpcy5nZXRIaWVyYXJjaHlUeXBlKCk7XG4gICAgY29uc3QgcmVwb3NpdG9yeSA9IFRyZWVSZXBvc2l0b3J5RmFjdG9yeS5nZXRJbnN0YW5jZShoaWVyYXJjaHlUeXBlKTtcblxuICAgIGlmIChyZXBvc2l0b3J5ID09PSBudWxsKSB7XG4gICAgICByZXR1cm4gRU1QVFk7XG4gICAgfVxuICAgIGNvbnN0IGxvYWRpbmdUaW1lcklkID0gdGhpcy5sb2FkaW5nU2VydmljZS5zaG93TG9hZGluZ1dpdGhEZWxheSg1MDApO1xuICAgIGNvbnN0IGNvbnRleHQgPSB7XG4gICAgICBmcmFtZUNvbnRleHQ6IHRoaXMuZnJhbWVDb250ZXh0LFxuICAgICAgZnJvemVuQ3VycmVudFJvd1xuICAgIH07XG4gICAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOiBtYXgtbGluZS1sZW5ndGhcbiAgICBjb25zdCBxdWVyeSQgPSByZXBvc2l0b3J5LmxvYWRGdWxsVHJlZSh0aGlzLnJlcG9zaXRvcnksIHRoaXMuaGllcmFyY2h5SW5mb0tleSwgcGFyZW50SWQsIHZpcnR1YWxQcm9wZXJ0eU5hbWUsIGZ1bGxUcmVlVHlwZSwgbG9hZFR5cGUsIGZpbHRlcnNBcnJheSwgY29udGV4dCk7XG4gICAgcmV0dXJuIHF1ZXJ5JC5waXBlKFxuICAgICAgdGFwKFxuICAgICAgICAoZW50aXRpZXM6IEVudGl0eVtdKSA9PiB7XG4gICAgICAgICAgY29uc3Qgc2VsZWN0ZWRSb3dJZCA9IHZpcnR1YWxSb290RnJhbWVDb250ZXh0LnBhcmFtcy5nZXQoJ19ERVZLSVRfc2VsZWN0ZWRSb3dJZCcpO1xuICAgICAgICAgIC8vIOe6oOato+mAieS4reiKgueCuVxuICAgICAgICAgIGlmIChjb3JyZWN0U2VsZWN0ZWROb2RlID09PSB0cnVlIHx8ICFzZWxlY3RlZFJvd0lkKSB7XG4gICAgICAgICAgICBjb25zdCB0cmVlTm9kZVV0aWwgPSBUcmVlVXRpbEZhY3RvcnkuZ2V0SW5zdGFuY2UoaGllcmFyY2h5VHlwZSk7XG4gICAgICAgICAgICBpZiAodHJlZU5vZGVVdGlsICE9PSBudWxsKSB7XG4gICAgICAgICAgICAgIHRyZWVOb2RlVXRpbC5zZWxlY3RGaXJzdFJvb3ROb2RlKHRoaXMuYmluZGluZ0RhdGEsIHRoaXMuaGllcmFyY2h5SW5mb0tleSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGNvbnN0IGN1cnJlbnRSb3dJZCA9IHRoaXMuYmluZGluZ0RhdGEubGlzdC5jdXJyZW50SXRlbS5wcmltYXJ5S2V5VmFsdWU7XG4gICAgICAgICAgaWYgKGZyb3plbkN1cnJlbnRSb3cpIHtcbiAgICAgICAgICAgIC8vIOWmguaenOS4iuS4gOasoemAieS4reihjOS4uuacrOasoeWKoOi9veaVsOaNruS4reeahOS4gOadoe+8jOWImeW6lOivpemHjeaWsOmAieS4reivpeihjFxuICAgICAgICAgICAgY29uc3QgY29udGFpbnNDdXJyZW50Um93ID0gZW50aXRpZXMuZmluZChpdGVtID0+IGl0ZW0ucHJpbWFyeVZhbHVlID09PSBjdXJyZW50Um93SWQpO1xuICAgICAgICAgICAgaWYgKGNvbnRhaW5zQ3VycmVudFJvdykge1xuICAgICAgICAgICAgICB0aGlzLnNldEN1cnJlbnRJZChjdXJyZW50Um93SWQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8g5Y6f5p2l55qE5b2T5YmN6KGM5LiN5Zyo5bey57uP5Yqg6L2955qE5pWw5o2u5Lit77yM5aaC5bGV5byA5Yiw56ys5LiJ57qn77yM5bCG56ys5LiJ57qn55qE5p+Q6KGM6K6+5Li65b2T5YmN6KGM77yM5YWo6YOo5pS26LW377yM5bGV5byA56ys5LiA57qnXG4gICAgICAgICAgICBpZiAoIXRoaXMucmVwb3NpdG9yeS5lbnRpdHlDb2xsZWN0aW9uLmdldEVudGl0eUJ5SWQoY3VycmVudFJvd0lkKSAmJiBlbnRpdGllcyAmJiBlbnRpdGllcy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgIGNvbnN0IGZpcnN0Q2hpbGRJZCA9IGVudGl0aWVzICYmIEFycmF5LmlzQXJyYXkoZW50aXRpZXMpICYmIGVudGl0aWVzLmxlbmd0aCA+IDAgJiYgZW50aXRpZXNbMF0ucHJpbWFyeVZhbHVlIHx8IG51bGw7XG4gICAgICAgICAgICAgIGlmIChmaXJzdENoaWxkSWQpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnNldEN1cnJlbnRJZChmaXJzdENoaWxkSWQpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIHRoaXMubG9hZGluZ1NlcnZpY2UuaGlkZURlbGF5TG9hZGluZyhsb2FkaW5nVGltZXJJZCk7XG4gICAgICAgIH0sXG4gICAgICAgIGVycm9yID0+IHtcbiAgICAgICAgICB0aGlzLmxvYWRpbmdTZXJ2aWNlLmhpZGVEZWxheUxvYWRpbmcobG9hZGluZ1RpbWVySWQpO1xuICAgICAgICAgIHRoaXMuZXJyb3JTZXJ2aWNlLmV4Y2VwdGlvbih0aGlzLmxhbmd1YWdlU2VydmljZS5sb2FkRmFpbGVkLCBlcnJvcik7XG4gICAgICAgIH1cbiAgICAgIClcbiAgICApO1xuICB9XG4gIC8qKlxuICAgKiDojrflj5bmnIDmlrDlsZXlvIDnmoToioLngrlcbiAgICovXG4gIHB1YmxpYyBnZXRJZFRvRXhwYW5kKCkge1xuICAgIGNvbnN0IGV4cGFuZE5vZGVzID0gdGhpcy52aXJ0dWFsUm9vdEZyYW1lQ29udGV4dC5nZXRQYXJhbSgnVFJFRV9MQVRFU1RfRVhQQU5ERURfSUQnKSB8fCBbXTtcbiAgICBjb25zdCBpZFRvRXhwYW5kID0gZXhwYW5kTm9kZXMucG9wKCk7XG4gICAgdGhpcy52aXJ0dWFsUm9vdEZyYW1lQ29udGV4dC5zZXRQYXJhbSgnVFJFRV9MQVRFU1RfRVhQQU5ERURfSUQnLCBleHBhbmROb2Rlcyk7XG4gICAgcmV0dXJuIGlkVG9FeHBhbmQ7XG4gIH1cblxuICAvKipcbiAgICog6K6+572u5pyA5paw5bGV5byA55qE6IqC54K5XG4gICAqL1xuICBwdWJsaWMgc2V0SWRUb0V4cGFuZChpZFRvRXhwYW5kOiBzdHJpbmcpOiB2b2lkIHtcbiAgICBjb25zdCBleHBhbmROb2RlcyA9IHRoaXMudmlydHVhbFJvb3RGcmFtZUNvbnRleHQuZ2V0UGFyYW0oJ1RSRUVfTEFURVNUX0VYUEFOREVEX0lEJykgfHwgW107XG4gICAgZXhwYW5kTm9kZXMucHVzaChpZFRvRXhwYW5kKTtcbiAgICB0aGlzLnZpcnR1YWxSb290RnJhbWVDb250ZXh0LnNldFBhcmFtKCdUUkVFX0xBVEVTVF9FWFBBTkRFRF9JRCcsIGV4cGFuZE5vZGVzKTtcbiAgfVxuXG4gIC8qKlxuICAgKiDop6PmnpDov4fmu6TmnaHku7ZcbiAgICovXG4gIHB1YmxpYyBwYXJzZUNvbmRpdGlvbnMoY29uZGl0aW9ucz86IHN0cmluZyk6IGFueVtdIHtcbiAgICBjb25zdCBjb25kaXRpb25zU3RyaW5nID0gKCFjb25kaXRpb25zIHx8IGNvbmRpdGlvbnMgPT09ICcnKSA/ICdbXScgOiBjb25kaXRpb25zO1xuICAgIHJldHVybiBKU09OLnBhcnNlKGNvbmRpdGlvbnNTdHJpbmcpO1xuICB9XG5cbiAgLyoqXG4gICAqIOaWsOWinuWQjOe6p1xuICAgKi9cbiAgcHVibGljIGFkZFNpYmxpbmcoaWQ6IHN0cmluZyk6IE9ic2VydmFibGU8YW55PiB7XG5cbiAgICAvLyDorr7orqHml7ZpZOeahOiOt+WPluaUueS4uuS7juWRveS7pOWPguaVsOS4iuiOt+WPlu+8jOS9huiuvuiuoeaXtuayoeacieWPguaVsOW/heWhq+ajgOafpe+8jFxuICAgIC8vIOWmguaenOaJk+W8gOihqOWNleS/neWtmOS6hu+8iOWNs+abtOaWsOS6huacgOaWsOeahOWRveS7pOaehOS7tu+8ie+8jOS9huayoeaciemFjee9ruivpeWPguaVsO+8jOWPr+iDveS8muS8oOmAkui/h+adpeS4gOS4quepuuWAvO+8jFxuICAgIC8vIOS4uuS6huWFvOWuueatpOaDheWGte+8jOS9v+eUqOW9k+WJjeihjGlk5L2c5Li6aWTnmoTlgLxcbiAgICBpZCA9IGlkID8gaWQgOiB0aGlzLmJpbmRpbmdEYXRhLmxpc3QuY3VycmVudElkO1xuXG4gICAgLy8g5Y+C5pWw5qOA5p+lXG4gICAgaWYgKCFpZCB8fCBpZCA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIGlkID0gJyc7XG4gICAgfVxuXG4gICAgLy8g6K6w5b2V5pyA6L+R5LiA5qyh5L+u5pS555qE5pWw5o2uaWRcbiAgICBjb25zdCBsYXN0TW9kaWZpZWRJZCA9IHRoaXMuYmluZGluZ0RhdGEubGlzdC5jdXJyZW50SWQ7XG4gICAgLy8g6I635Y+W5YiG57qn5pa55byPXG4gICAgY29uc3QgaGllcmFyY2h5VHlwZTogc3RyaW5nID0gdGhpcy5nZXRIaWVyYXJjaHlUeXBlKCk7XG4gICAgLy8g5omn6KGM5Y+W5pWwXG4gICAgY29uc3QgbG9hZGluZ1RpbWVySWQgPSB0aGlzLmxvYWRpbmdTZXJ2aWNlLnNob3dMb2FkaW5nV2l0aERlbGF5KDUwMCk7XG4gICAgY29uc3QgcmVwb3NpdG9yeSA9IFRyZWVSZXBvc2l0b3J5RmFjdG9yeS5nZXRJbnN0YW5jZShoaWVyYXJjaHlUeXBlKTtcbiAgICBpZiAoIXJlcG9zaXRvcnkpIHtcbiAgICAgIC8vIOmUmeivr+eahOWIhue6p+eggVxuICAgICAgdGhyb3cgbmV3IEVycm9yKHRoaXMubGFuZ3VhZ2VTZXJ2aWNlWydlcnJvckhpZXJhcmNoeUtleSddKTtcbiAgICB9XG4gICAgY29uc3QgcmVzdWx0JCA9IHJlcG9zaXRvcnkuYWRkU2libGluZyh0aGlzLnJlcG9zaXRvcnksIGlkKTtcbiAgICByZXR1cm4gcmVzdWx0JC5waXBlKFxuICAgICAgdGFwKFxuICAgICAgICAoKSA9PiB7XG4gICAgICAgICAgdGhpcy52aXJ0dWFsUm9vdEZyYW1lQ29udGV4dC5zZXRQYXJhbSgnSVNfQUREJywgdHJ1ZSk7XG4gICAgICAgICAgdGhpcy52aXJ0dWFsUm9vdEZyYW1lQ29udGV4dC5zZXRQYXJhbSgnTEFTVF9NT0RJRklFRF9JRCcsIGxhc3RNb2RpZmllZElkKTtcbiAgICAgICAgICB0aGlzLmxvYWRpbmdTZXJ2aWNlLmhpZGVEZWxheUxvYWRpbmcobG9hZGluZ1RpbWVySWQpO1xuICAgICAgICB9LFxuICAgICAgICBlcnJvciA9PiB7XG4gICAgICAgICAgdGhpcy5sb2FkaW5nU2VydmljZS5oaWRlRGVsYXlMb2FkaW5nKGxvYWRpbmdUaW1lcklkKTtcbiAgICAgICAgICB0aGlzLmVycm9yU2VydmljZS5leGNlcHRpb24odGhpcy5sYW5ndWFnZVNlcnZpY2UuYWRkU2libGluZ0ZhaWxlZCwgZXJyb3IpO1xuICAgICAgICB9XG4gICAgICApXG4gICAgKTtcbiAgfVxuXG4gIC8qKlxuICAgKiDmlrDlop7kuIvnuqdcbiAgICovXG4gIHB1YmxpYyBhZGRDaGlsZChpZDogc3RyaW5nKTogT2JzZXJ2YWJsZTxhbnk+IHtcblxuICAgIC8vIOWOn+WboOWQjGFkZFNpYmxpbmfnmoTkv67mlLlcbiAgICBpZCA9IGlkID8gaWQgOiB0aGlzLmJpbmRpbmdEYXRhLmxpc3QuY3VycmVudElkO1xuXG4gICAgLy8g5Y+C5pWw5qOA5p+lXG4gICAgaWYgKCFpZCkge1xuICAgICAgLy8g6K+36YCJ5oup54i26IqC54K5XG4gICAgICB0aGlzLm5vdGlmeVNlcnZpY2Uud2FybmluZyh0aGlzLmxhbmd1YWdlU2VydmljZVsncGxzU2VsZWN0UGFyZW50Tm9kZSddLCB7IGhpZGVUaXRsZTogdHJ1ZSB9KTtcbiAgICAgIHJldHVybiBlbXB0eSgpO1xuICAgIH1cblxuICAgIC8vIOiusOW9leacgOi/keS4gOasoeS/ruaUueeahOaVsOaNrmlkXG4gICAgY29uc3QgbGFzdE1vZGlmaWVkSWQgPSB0aGlzLmJpbmRpbmdEYXRhLmxpc3QuY3VycmVudElkO1xuICAgIC8vIOiOt+WPluWIhue6p+aWueW8j1xuICAgIGNvbnN0IGhpZXJhcmNoeVR5cGUgPSB0aGlzLmdldEhpZXJhcmNoeVR5cGUoKTtcbiAgICAvLyDmiafooYzlj5bmlbBcbiAgICBjb25zdCBsb2FkaW5nVGltZXJJZCA9IHRoaXMubG9hZGluZ1NlcnZpY2Uuc2hvd0xvYWRpbmdXaXRoRGVsYXkoNTAwKTtcblxuICAgIC8vIOaWsOWinueahOaXtuWAme+8jOimgeWxleW8gOeItuiKgueCuVxuICAgIHRoaXMuc2V0SWRUb0V4cGFuZChpZCk7XG4gICAgY29uc3QgcmVsb2FkQ2hpbGQkID0gdGhpcy5yZWxvYWRCeUxldmVsKCk7XG5cbiAgICBjb25zdCByZXBvc2l0b3J5ID0gVHJlZVJlcG9zaXRvcnlGYWN0b3J5LmdldEluc3RhbmNlKGhpZXJhcmNoeVR5cGUpO1xuICAgIGlmICghcmVwb3NpdG9yeSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKHRoaXMubGFuZ3VhZ2VTZXJ2aWNlWydlcnJvckhpZXJhcmNoeUtleSddKTtcbiAgICB9XG4gICAgY29uc3QgYWRkQ2hpbGQkID0gcmVwb3NpdG9yeS5hZGRDaGlsZCh0aGlzLnJlcG9zaXRvcnksIGlkKTtcbiAgICBjb25zdCByZXN1bHQkID0gcmVsb2FkQ2hpbGQkLnBpcGUoXG4gICAgICBzd2l0Y2hNYXAoKCkgPT4ge1xuICAgICAgICByZXR1cm4gYWRkQ2hpbGQkO1xuICAgICAgfSksXG4gICAgICB0YXAoXG4gICAgICAgICgpID0+IHtcbiAgICAgICAgICB0aGlzLnZpcnR1YWxSb290RnJhbWVDb250ZXh0LnNldFBhcmFtKCdJU19BREQnLCB0cnVlKTtcbiAgICAgICAgICB0aGlzLnZpcnR1YWxSb290RnJhbWVDb250ZXh0LnNldFBhcmFtKCdMQVNUX01PRElGSUVEX0lEJywgbGFzdE1vZGlmaWVkSWQpO1xuICAgICAgICAgIHRoaXMubG9hZGluZ1NlcnZpY2UuaGlkZURlbGF5TG9hZGluZyhsb2FkaW5nVGltZXJJZCk7XG4gICAgICAgIH0sXG4gICAgICAgIGVycm9yID0+IHtcbiAgICAgICAgICB0aGlzLmxvYWRpbmdTZXJ2aWNlLmhpZGVEZWxheUxvYWRpbmcobG9hZGluZ1RpbWVySWQpO1xuICAgICAgICAgIHRoaXMuZXJyb3JTZXJ2aWNlLmV4Y2VwdGlvbih0aGlzLmxhbmd1YWdlU2VydmljZS5hZGRDaGlsZEZhaWxlZCwgZXJyb3IpO1xuICAgICAgICB9XG4gICAgICApXG4gICAgKTtcbiAgICByZXR1cm4gcmVzdWx0JDtcbiAgfVxuICAvKipcbiAgICog5om56YeP5L+d5a2YXG4gICAqL1xuICBwdWJsaWMgc2F2ZSgpOiBPYnNlcnZhYmxlPGJvb2xlYW4+IHtcbiAgICBpZiAodGhpcy5tZXNzYWdlUGlwZSkge1xuICAgICAgdGhpcy5tZXNzYWdlUGlwZS5uZXh0KHsgbWVzc2FnZVR5cGU6ICdzYXZlJyB9KTtcbiAgICB9XG4gICAgY29uc3QgbG9hZGluZ1RpbWVySWQgPSB0aGlzLmxvYWRpbmdTZXJ2aWNlLnNob3dMb2FkaW5nV2l0aERlbGF5KDUwMCk7XG4gICAgY29uc3Qgc2F2ZSQgPSB0aGlzLnJlcG9zaXRvcnkuYXBwbHlDaGFuZ2VzKCk7XG4gICAgY29uc3QgcmVzdWx0JCA9IHNhdmUkLnBpcGUoXG4gICAgICB0YXAoXG4gICAgICAgICgpID0+IHtcbiAgICAgICAgICB0aGlzLmxvYWRpbmdTZXJ2aWNlLmhpZGVEZWxheUxvYWRpbmcobG9hZGluZ1RpbWVySWQpO1xuICAgICAgICAgIHRoaXMubm90aWZ5U2VydmljZS5zdWNjZXNzKHRoaXMubGFuZ3VhZ2VTZXJ2aWNlLnNhdmVTdWNjZXNzLCB7IGhpZGVUaXRsZTogdHJ1ZSB9KTtcbiAgICAgICAgfSxcbiAgICAgICAgZXJyb3IgPT4ge1xuICAgICAgICAgIHRoaXMubG9hZGluZ1NlcnZpY2UuaGlkZURlbGF5TG9hZGluZyhsb2FkaW5nVGltZXJJZCk7XG4gICAgICAgICAgdGhpcy5lcnJvclNlcnZpY2UuZXhjZXB0aW9uKHRoaXMubGFuZ3VhZ2VTZXJ2aWNlLm11bHRpU2F2ZUZhaWxlZCwgZXJyb3IpO1xuICAgICAgICB9XG4gICAgICApXG4gICAgKTtcbiAgICByZXR1cm4gcmVzdWx0JDtcbiAgfVxuICAvKipcbiAgICog5Yig6ZmkXG4gICAqL1xuICBwdWJsaWMgcmVtb3ZlKGlkOiBzdHJpbmcsIHN1Y2Nlc3NNc2c/OiBzdHJpbmcpOiBPYnNlcnZhYmxlPGJvb2xlYW4+IHtcblxuICAgIC8vIOWOn+WboOWQjGFkZFNpYmxpbmdcbiAgICBpZCA9IGlkID8gaWQgOiB0aGlzLmJpbmRpbmdEYXRhLmxpc3QuY3VycmVudElkO1xuXG4gICAgLy8g5Y+C5pWw5qOA5p+lXG4gICAgaWYgKCFpZCkge1xuICAgICAgdGhpcy5ub3RpZnlTZXJ2aWNlLndhcm5pbmcodGhpcy5sYW5ndWFnZVNlcnZpY2VbJ3Bsc1NlbGVjdERlbGV0ZURhdGEnXSwgeyBoaWRlVGl0bGU6IHRydWUgfSk7XG4gICAgICByZXR1cm4gZW1wdHkoKTtcbiAgICB9XG5cbiAgICAvLyDlrZjlnKjlrZDoioLngrnkuI3lhYHorrjliKDpmaRcbiAgICBjb25zdCB0cmVlTm9kZXNEYXRhID0gdGhpcy5yZXBvc2l0b3J5LmVudGl0eUNvbGxlY3Rpb24udG9KU09OKCk7XG4gICAgY29uc3QgaGllcmFyY2h5VHlwZSA9IHRoaXMuZ2V0SGllcmFyY2h5VHlwZSgpO1xuICAgIGNvbnN0IHRyZWVOb2RlVXRpbCA9IFRyZWVVdGlsRmFjdG9yeS5nZXRJbnN0YW5jZShoaWVyYXJjaHlUeXBlKTtcbiAgICBpZiAodHJlZU5vZGVVdGlsID09PSBudWxsKSB7XG4gICAgICByZXR1cm4gZW1wdHkoKTtcbiAgICB9XG4gICAgaWYgKHRyZWVOb2RlVXRpbC5oYXNDaGlsZE5vZGVzKHRyZWVOb2Rlc0RhdGEsIHRoaXMuaGllcmFyY2h5SW5mb0tleSwgaWQpID09PSB0cnVlKSB7XG4gICAgICB0aGlzLm5vdGlmeVNlcnZpY2Uud2FybmluZyh0aGlzLmxhbmd1YWdlU2VydmljZVsnZGVsZXRlQ2hpbGRGaXJzdCddLCB7IGhpZGVUaXRsZTogdHJ1ZSB9KTtcbiAgICAgIHJldHVybiBlbXB0eSgpO1xuICAgIH1cblxuICAgIC8vIOehruiupOWIoOmZpFxuICAgIGNvbnN0IGFjdGlvbiQgPSB0aGlzLm1lc3NhZ2VTZXJ2aWNlLnF1ZXN0aW9uKHRoaXMubGFuZ3VhZ2VTZXJ2aWNlLmNvbmZpcm1EZWxldGlvbik7XG4gICAgcmV0dXJuIGFjdGlvbiQucGlwZShcbiAgICAgIGNvbmNhdE1hcChyZXN1bHQgPT4ge1xuICAgICAgICBpZiAoIXJlc3VsdCkge1xuICAgICAgICAgIHJldHVybiBlbXB0eSgpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8g6I635Y+W5Yig6Zmk5ZCO6KaB6K6+572u55qE6IqC54K5aWRcbiAgICAgICAgY29uc3QgbmV4dE5vZGVJZCA9IHRyZWVOb2RlVXRpbC5nZXROZXh0Tm9kZUlkKHRyZWVOb2Rlc0RhdGEsIHRoaXMuaGllcmFyY2h5SW5mb0tleSwgaWQpO1xuXG4gICAgICAgIC8vIOaJp+ihjOWIoOmZpFxuICAgICAgICBjb25zdCBsb2FkaW5nVGltZXJJZCA9IHRoaXMubG9hZGluZ1NlcnZpY2Uuc2hvd0xvYWRpbmdXaXRoRGVsYXkoNTAwKTtcbiAgICAgICAgY29uc3QgcmVtb3ZlJCA9IHRoaXMuZnJhbWVDb250ZXh0LnJlcG9zaXRvcnkucmVtb3ZlQnlJZChpZCk7XG4gICAgICAgIHJldHVybiByZW1vdmUkLnBpcGUoXG4gICAgICAgICAgdGFwKCgpID0+IHtcblxuICAgICAgICAgICAgLy8g6K6+572u6YCJ5Lit6IqC54K5XG4gICAgICAgICAgICB0cmVlTm9kZVV0aWwuc2VsZWN0ZWROb2RlKHRoaXMuYmluZGluZ0RhdGEsIHRoaXMuaGllcmFyY2h5SW5mb0tleSwgbmV4dE5vZGVJZCk7XG5cbiAgICAgICAgICAgIHRoaXMubG9hZGluZ1NlcnZpY2UuaGlkZURlbGF5TG9hZGluZyhsb2FkaW5nVGltZXJJZCk7XG4gICAgICAgICAgICBpZiAoc3VjY2Vzc01zZyAmJiBzdWNjZXNzTXNnLnRyaW0oKSkge1xuICAgICAgICAgICAgICB0aGlzLm5vdGlmeVNlcnZpY2Uuc3VjY2VzcyhzdWNjZXNzTXNnLCB7IGhpZGVUaXRsZTogdHJ1ZSB9KTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHRoaXMubm90aWZ5U2VydmljZS5zdWNjZXNzKHRoaXMubGFuZ3VhZ2VTZXJ2aWNlLmRlbGV0ZVN1Y2Nlc3MsIHsgaGlkZVRpdGxlOiB0cnVlIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gdGhpcy5ub3RpZnlTZXJ2aWNlLnN1Y2Nlc3ModGhpcy5sYW5ndWFnZVNlcnZpY2UuZGVsZXRlU3VjY2VzcywgeyBoaWRlVGl0bGU6IHRydWUgfSk7XG4gICAgICAgICAgfSxcbiAgICAgICAgICAgIGVycm9yID0+IHtcbiAgICAgICAgICAgICAgdGhpcy5sb2FkaW5nU2VydmljZS5oaWRlRGVsYXlMb2FkaW5nKGxvYWRpbmdUaW1lcklkKTtcbiAgICAgICAgICAgICAgdGhpcy5lcnJvclNlcnZpY2UuZXhjZXB0aW9uKHRoaXMubGFuZ3VhZ2VTZXJ2aWNlLmRlbGV0ZUZhaWxlZCwgZXJyb3IpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIClcbiAgICAgICAgKTtcbiAgICAgIH0pXG4gICAgKTtcbiAgfVxuXG4gIC8qKlxuICAgKiDlj5bmtojml7bmo4DmtYvmnKrkv53lrZjorrDlvZVcbiAgICovXG4gIHB1YmxpYyBjYW5jZWwoKTogT2JzZXJ2YWJsZTxhbnk+IHtcblxuICAgIC8vIOayoeacieWPmOabtOaXtuebtOaOpeWPlua2iFxuICAgIC8vIGNvbnN0IGNhcmREYXRhU2VydmljZSA9IHRoaXMuZnJhbWVDb250ZXh0LmluamVjdG9yLmdldDxDYXJkRGF0YVNlcnZpY2U+KENhcmREYXRhU2VydmljZSk7XG4gICAgY29uc3QgYmVmUmVwb3NpdG9yeSA9IHRoaXMucmVwb3NpdG9yeSBhcyBCZWZSZXBvc2l0b3J5PGFueT47XG4gICAgY29uc3QgaGFzVW5zYXZlZERhdGEgPSBCZWZSZXBvc2l0b3J5VXRpbC5pc0V4aXN0VW5zYXZlRGF0YShiZWZSZXBvc2l0b3J5KTtcbiAgICBpZiAoIWhhc1Vuc2F2ZWREYXRhKSB7XG4gICAgICByZXR1cm4gdGhpcy5fY2FuY2VsKCk7XG4gICAgfVxuXG4gICAgY29uc3QgY29uZmlybVJlc3VsdCQgPSB0aGlzLm1lc3NhZ2VTZXJ2aWNlLnF1ZXN0aW9uKHRoaXMubGFuZ3VhZ2VTZXJ2aWNlWydjYW5jZWxXaXRob3V0U2F2ZSddKS5waXBlKFxuICAgICAgc3dpdGNoTWFwKChpZkNhbmNlbDogYm9vbGVhbikgPT4ge1xuICAgICAgICBpZiAoaWZDYW5jZWwgPT09IGZhbHNlKSB7XG4gICAgICAgICAgcmV0dXJuIEVNUFRZO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLl9jYW5jZWwoKTtcbiAgICAgIH0pXG4gICAgKTtcbiAgICByZXR1cm4gY29uZmlybVJlc3VsdCQ7XG4gIH1cbiAgLyoqXG4gICAqIOaehOmAoOWIhumhteS/oeaBr1xuICAgKiBAcGFyYW0gcGFyZW50SWQgcGFyZW50SWRcbiAgICogQHJldHVybnMgXG4gICAqL1xuICBwcml2YXRlIGJ1aWxkUGFnaW5hdGlvbkluZm8ocGFyZW50SWQ6IGFueSkge1xuICAgIGNvbnN0IHBhZ2luYXRpb246IGFueSA9IHsgcGFnZUluZGV4OiAwLCBwYWdlU2l6ZTogMCB9O1xuICAgIGNvbnN0IGVuYWJsZU5vZGVQYWdpbmF0aW9uID0gdGhpcy5mcmFtZUNvbnRleHQucGFyYW1zLmdldCgnZW5hYmxlTm9kZVBhZ2luYXRpb24nKTtcbiAgICBpZiAoIXBhcmVudElkKSB7XG4gICAgICAvLyDkuIDnuqfliIbpobVcbiAgICAgIGNvbnN0IHBhZ2VTaXplID0gdGhpcy5yZXBvc2l0b3J5LmVudGl0eUNvbGxlY3Rpb24ucGFnZVNpemUgfHwgMDtcbiAgICAgIGNvbnN0IHBhZ2VJbmRleCA9IHRoaXMucmVwb3NpdG9yeS5lbnRpdHlDb2xsZWN0aW9uLnBhZ2VJbmRleCB8fCAwO1xuICAgICAgLy8g5ZCv55So5LqG5LiA57qn5YiG6aG1XG4gICAgICBpZiAocGFnZVNpemUgIT09IDApIHtcbiAgICAgICAgcGFnaW5hdGlvbi5wYWdlU2l6ZSA9IHBhZ2VTaXplO1xuICAgICAgICBwYWdpbmF0aW9uLnBhZ2VJbmRleCA9IHBhZ2VJbmRleDtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgLy8g5aaC5p6c5pyq5ZCv55So6IqC54K55YiG6aG15oiW5b2T5YmN5Li66aG257qn6IqC54K55Yqg6L2977yM5YiZ5LiN5aSE55CG6IqC54K55YiG6aG1XG4gICAgICBpZiAoZW5hYmxlTm9kZVBhZ2luYXRpb24pIHtcbiAgICAgICAgY29uc3Qgbm9kZVBhZ2VTaXplID0gdGhpcy5mcmFtZUNvbnRleHQucGFyYW1zLmdldCgnbm9kZVBhZ2VTaXplJykgfHwgMDtcbiAgICAgICAgbGV0IG5vZGVQYWdlSW5kZXggPSB0aGlzLmZyYW1lQ29udGV4dC5wYXJhbXMuZ2V0KGBfTk9ERV8ke3BhcmVudElkfV9QQUdFX0lOREVYX2ApO1xuICAgICAgICBpZiAoIW5vZGVQYWdlSW5kZXgpIHtcbiAgICAgICAgICB0aGlzLmZyYW1lQ29udGV4dC5wYXJhbXMuc2V0KGBfTk9ERV8ke3BhcmVudElkfV9QQUdFX0lOREVYX2AsIDEpO1xuICAgICAgICAgIG5vZGVQYWdlSW5kZXggPSAxO1xuICAgICAgICB9XG4gICAgICAgIHBhZ2luYXRpb24ucGFnZUluZGV4ID0gbm9kZVBhZ2VJbmRleDtcbiAgICAgICAgcGFnaW5hdGlvbi5wYWdlU2l6ZSA9IG5vZGVQYWdlU2l6ZTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHBhZ2luYXRpb247XG4gIH1cblxuICAvKipcbiAgICog5Y+W5raI5Y+Y5pu0XG4gICAqL1xuICBwcml2YXRlIF9jYW5jZWwoKTogT2JzZXJ2YWJsZTxhbnk+IHtcbiAgICBjb25zdCBsb2FkaW5nVGltZXJJZCA9IHRoaXMubG9hZGluZ1NlcnZpY2Uuc2hvd0xvYWRpbmdXaXRoRGVsYXkoNTAwKTtcbiAgICBjb25zdCBjYW5jZWwkID0gdGhpcy5yZXBvc2l0b3J5LmNhbmNlbENoYW5nZXMoKTtcbiAgICByZXR1cm4gY2FuY2VsJC5waXBlKFxuICAgICAgc3dpdGNoTWFwKCgpID0+IHtcbiAgICAgICAgY29uc3QgaXNBZGQgPSB0aGlzLnZpcnR1YWxSb290RnJhbWVDb250ZXh0LmdldFBhcmFtKCdJU19BREQnKTtcbiAgICAgICAgY29uc3QgbGFzdE1vZGlmaWVkSWQgPSB0aGlzLnZpcnR1YWxSb290RnJhbWVDb250ZXh0LmdldFBhcmFtKCdMQVNUX01PRElGSUVEX0lEJyk7XG4gICAgICAgIGNvbnN0IGN1cnJlbnRJZCA9IHRoaXMuYmluZGluZ0RhdGEubGlzdC5jdXJyZW50SWQ7XG5cbiAgICAgICAgaWYgKGlzQWRkID09PSB0cnVlKSB7XG4gICAgICAgICAgdGhpcy5yZXBvc2l0b3J5LmVudGl0eUNvbGxlY3Rpb24ucmVtb3ZlRW50aXR5QnlJZChjdXJyZW50SWQpO1xuXG4gICAgICAgICAgLy8g6YeN572u57yW6L6R54q25oCBXG4gICAgICAgICAgdGhpcy52aXJ0dWFsUm9vdEZyYW1lQ29udGV4dC5zZXRQYXJhbSgnSVNfQUREJywgZmFsc2UpO1xuICAgICAgICAgIGlmIChsYXN0TW9kaWZpZWRJZCkge1xuICAgICAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgICAgIHRoaXMuYmluZGluZ0RhdGEubGlzdC5zZXRDdXJyZW50SWQobGFzdE1vZGlmaWVkSWQsIHRydWUsIHRydWUpO1xuICAgICAgICAgICAgfSwgMCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiBvZihudWxsKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXR1cm4gdGhpcy5yZXBvc2l0b3J5LnVwZGF0ZUJ5SWQoY3VycmVudElkKTtcbiAgICAgICAgfVxuICAgICAgfSksXG4gICAgICB0YXAoXG4gICAgICAgICgpID0+IHtcbiAgICAgICAgICB0aGlzLmxvYWRpbmdTZXJ2aWNlLmhpZGVEZWxheUxvYWRpbmcobG9hZGluZ1RpbWVySWQpO1xuICAgICAgICB9LFxuICAgICAgICAoZXJyb3I6IGFueSkgPT4ge1xuICAgICAgICAgIHRoaXMubG9hZGluZ1NlcnZpY2UuaGlkZURlbGF5TG9hZGluZyhsb2FkaW5nVGltZXJJZCk7XG4gICAgICAgICAgdGhpcy5lcnJvclNlcnZpY2UuZXhjZXB0aW9uKHRoaXMubGFuZ3VhZ2VTZXJ2aWNlLmNhbmNlbEZhaWxlZCwgZXJyb3IpO1xuICAgICAgICB9XG4gICAgICApXG4gICAgKTtcbiAgfVxuXG4gIC8qKlxuICAgKiDmo4Dmn6XmmK/lkKblrZjlnKjkuIvnuqfoioLngrnvvIjlhoXpg6jmlrnms5XvvIzor7fli7/kvb/nlKjvvIlcbiAgICovXG4gIHB1YmxpYyBoYXNDaGlsZE5vZGVzKGlkOiBzdHJpbmcsIHRyZWVOb2Rlc0RhdGE6IGFueVtdKTogYm9vbGVhbiB7XG4gICAgY29uc3QgdHJlZU5vZGVVdGlsID0gdGhpcy5nZXRUcmVlTm9kZVV0aWwoKTtcbiAgICBpZiAodHJlZU5vZGVVdGlsLmhhc0NoaWxkTm9kZXModHJlZU5vZGVzRGF0YSwgdGhpcy5oaWVyYXJjaHlJbmZvS2V5LCBpZCkgPT09IHRydWUpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICAvKipcbiAgICog6K6h566X5Yig6Zmk5ZCO55qE5b2T5YmN6IqC54K5aWTvvIjlhoXpg6jmlrnms5XvvIzor7fli7/kvb/nlKjvvIlcbiAgICovXG4gIHB1YmxpYyBnZXROZXh0Tm9kZUlkQWZ0ZXJSZW1vdmluZyhpZFRvUmVtb3ZlOiBzdHJpbmcsIHRyZWVOb2Rlc0RhdGE6IGFueVtdKTogc3RyaW5nIHtcbiAgICBjb25zdCB0cmVlTm9kZVV0aWwgPSB0aGlzLmdldFRyZWVOb2RlVXRpbCgpO1xuICAgIGNvbnN0IG5leHROb2RlSWQgPSB0cmVlTm9kZVV0aWwuZ2V0TmV4dE5vZGVJZCh0cmVlTm9kZXNEYXRhLCB0aGlzLmhpZXJhcmNoeUluZm9LZXksIGlkVG9SZW1vdmUpO1xuICAgIHJldHVybiBuZXh0Tm9kZUlkO1xuICB9XG5cbiAgLyoqXG4gICAqIOiuvue9ruWIoOmZpOWQjueahOW9k+WJjeiKgueCueiKgueCue+8iOWGhemDqOaWueazle+8jOivt+WLv+S9v+eUqO+8iVxuICAgKi9cbiAgcHVibGljIHNldE5leHROb2RlQWZ0ZXJSZW1vdmluZyhuZXh0Tm9kZUlkOiBzdHJpbmcpOiB2b2lkIHtcbiAgICBjb25zdCB0cmVlTm9kZVV0aWwgPSB0aGlzLmdldFRyZWVOb2RlVXRpbCgpO1xuICAgIHRyZWVOb2RlVXRpbC5zZWxlY3RlZE5vZGUodGhpcy5iaW5kaW5nRGF0YSwgdGhpcy5oaWVyYXJjaHlJbmZvS2V5LCBuZXh0Tm9kZUlkKTtcbiAgfVxuICAvKipcbiAgICog6K6+572u5qCR55qE5b2T5YmN6KGMKOe7meWujOaVtOagkeS9v+eUqClcbiAgICogQHBhcmFtIGlkIGlkXG4gICAqL1xuICBwdWJsaWMgc2V0Q3VycmVudElkKGlkOiBzdHJpbmcpIHtcbiAgICBpZCA9IGlkIHx8IHRoaXMuZnJhbWVDb250ZXh0LmdldFZpcnR1YWxSb290RnJhbWVDb250ZXh0KCkudWlTdGF0ZVsnX19ERVZLSVRfX3NlbGVjdGVkUm93J10gfHwgdGhpcy5iaW5kaW5nRGF0YS5saXN0LmN1cnJlbnRJdGVtLnByaW1hcnlLZXlWYWx1ZTtcbiAgICB0aGlzLmZyYW1lQ29udGV4dC5iaW5kaW5nRGF0YS5saXN0LnNldEN1cnJlbnRJZChpZCwgdHJ1ZSwgdHJ1ZSwgdHJ1ZSk7XG4gIH1cbiAgLyoqXG4gICAqIOmAieS4reagkeeahOesrOS4gOS4quiKgueCuVxuICAgKi9cbiAgcHVibGljIHNlbGVjdEZpcnN0Um93KCkge1xuICAgIGNvbnN0IGhpZXJhcmNoeVR5cGUgPSB0aGlzLmdldEhpZXJhcmNoeVR5cGUoKTtcbiAgICBjb25zdCB0cmVlTm9kZVV0aWwgPSBUcmVlVXRpbEZhY3RvcnkuZ2V0SW5zdGFuY2UoaGllcmFyY2h5VHlwZSk7XG4gICAgaWYgKHRyZWVOb2RlVXRpbCAhPT0gbnVsbCkge1xuICAgICAgdHJlZU5vZGVVdGlsLnNlbGVjdEZpcnN0Um9vdE5vZGUodGhpcy5iaW5kaW5nRGF0YSwgdGhpcy5oaWVyYXJjaHlJbmZvS2V5KTtcbiAgICB9XG4gIH1cbiAgLyoqXG4gICAqIOiOt+WPluagkeiKgueCueW3peWFt+exu+WunuS+i1xuICAgKi9cbiAgcHJpdmF0ZSBnZXRUcmVlTm9kZVV0aWwoKTogYW55IHtcbiAgICBjb25zdCBoaWVyYXJjaHlUeXBlID0gdGhpcy5nZXRIaWVyYXJjaHlUeXBlKCk7XG4gICAgY29uc3QgdHJlZU5vZGVVdGlsID0gVHJlZVV0aWxGYWN0b3J5LmdldEluc3RhbmNlKGhpZXJhcmNoeVR5cGUpO1xuICAgIGlmICh0cmVlTm9kZVV0aWwgPT09IG51bGwpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihg5LiN5pSv5oyBJHtoaWVyYXJjaHlUeXBlfeexu+Wei+eahOWIhue6p2ApO1xuICAgIH1cbiAgICByZXR1cm4gdHJlZU5vZGVVdGlsO1xuICB9XG5cblxuXG4gIC8qKlxuICAgKiDorrDlvZXliqDovb3nirbmgIFcbiAgICogQHRvZG/vvJrlvoXliKDpmaRcbiAgICovXG4gIHByaXZhdGUgc2V0TG9hZEJ5TGV2ZWxTdGF0ZShmaWx0ZXJzOiBzdHJpbmcsIHNvcnRzOiBzdHJpbmcpIHtcblxuICAgIC8vIEB0b2Rv77ya5Li05pe25aSE55CGXG4gICAgdGhpcy52aXJ0dWFsUm9vdEZyYW1lQ29udGV4dC5zZXRQYXJhbSgnaXNMb2FkVHJlZUJ5TGV2ZWwnLCB0cnVlKTtcbiAgICB0aGlzLnZpcnR1YWxSb290RnJhbWVDb250ZXh0LnNldFBhcmFtKCdsb2FkVHJlZUJ5TGV2ZWxGaWx0ZXInLCBmaWx0ZXJzKTtcbiAgICB0aGlzLnZpcnR1YWxSb290RnJhbWVDb250ZXh0LnNldFBhcmFtKCdsb2FkVHJlZUJ5TGV2ZWxTb3J0Jywgc29ydHMpO1xuICB9XG5cbiAgLyoqXG4gICAqIOWxleW8gOW9k+WJjeiKgueCuVxuICAgKiBAdG9kb++8muW+heWIoOmZpFxuICAgKi9cbiAgcHJpdmF0ZSByZWxvYWRCeUxldmVsKCk6IE9ic2VydmFibGU8RW50aXR5W10+IHtcbiAgICBjb25zdCBpc0xvYWRCeUxldmVsID0gdGhpcy52aXJ0dWFsUm9vdEZyYW1lQ29udGV4dC5nZXRQYXJhbSgnaXNMb2FkVHJlZUJ5TGV2ZWwnKTtcbiAgICBpZiAoaXNMb2FkQnlMZXZlbCA9PT0gdHJ1ZSkge1xuICAgICAgY29uc3QgZmlsdGVycyA9IHRoaXMudmlydHVhbFJvb3RGcmFtZUNvbnRleHQuZ2V0UGFyYW0oJ2xvYWRUcmVlQnlMZXZlbEZpbHRlcicpO1xuICAgICAgY29uc3Qgc29ydHMgPSB0aGlzLnZpcnR1YWxSb290RnJhbWVDb250ZXh0LmdldFBhcmFtKCdsb2FkVHJlZUJ5TGV2ZWxTb3J0Jyk7XG4gICAgICByZXR1cm4gdGhpcy5sb2FkQnlMZXZlbChmaWx0ZXJzLCBzb3J0cyk7XG4gICAgfVxuICAgIHJldHVybiBvZihbXSk7XG4gIH1cblxuICBwcml2YXRlIGdldEhpZXJhcmNoeVR5cGUoKSB7XG4gICAgY29uc3QgbmdPYmplY3RzID0gRmllbGRNZXRhZGF0YVV0aWwuZ2V0TmdPYmplY3RzKHRoaXMucmVwb3NpdG9yeS5lbnRpdHlUeXBlKTtcbiAgICBjb25zdCBoaWVyYXJjaHlJbmZvTmdPYmplY3RJbmZvID0gbmdPYmplY3RzW3RoaXMuaGllcmFyY2h5SW5mb0tleV07XG4gICAgbGV0IGhpZXJhcmNoeVR5cGUgPSAncGF0aCc7IC8vIOWIhue6p+eggem7mOiupOS4unBhdGjvvIzlhbzlrrnljp/ooajljZVcbiAgICBpZiAoaGllcmFyY2h5SW5mb05nT2JqZWN0SW5mby5oYXNPd25Qcm9wZXJ0eSgnaGllcmFyY2h5VHlwZScpICYmIGhpZXJhcmNoeUluZm9OZ09iamVjdEluZm9bJ2hpZXJhcmNoeVR5cGUnXSAhPSBudWxsKSB7XG4gICAgICBoaWVyYXJjaHlUeXBlID0gaGllcmFyY2h5SW5mb05nT2JqZWN0SW5mb1snaGllcmFyY2h5VHlwZSddIGFzIHN0cmluZztcbiAgICB9XG4gICAgaWYgKGhpZXJhcmNoeVR5cGUgPT0gbnVsbCB8fCBoaWVyYXJjaHlUeXBlLmxlbmd0aCA8IDEpIHtcbiAgICAgIC8vICfliIbnuqfnoIHphY3nva7kv6Hmga/plJnor68nXG4gICAgICB0aHJvdyBuZXcgRXJyb3IodGhpcy5sYW5ndWFnZVNlcnZpY2VbJ2luY29ycmVjdEhpZXJhcmNoeUNvbmZpZyddKTtcbiAgICB9XG4gICAgcmV0dXJuIGhpZXJhcmNoeVR5cGU7XG4gIH1cbiAgLyoqXG4gICAqIOiOt+WPluaguee7hOS7tua2iOaBr+euoemBk1xuICAgKi9cbiAgcHJpdmF0ZSBnZXQgbWVzc2FnZVBpcGUoKSB7XG4gICAgaWYgKHRoaXMuZnJhbWVDb250ZXh0KSB7XG4gICAgICBjb25zdCBhcHBDb250ZXh0ID0gdGhpcy5mcmFtZUNvbnRleHQuZ2V0Rm9ybUFwcENvbnRleHQoKSB8fCBudWxsO1xuICAgICAgaWYgKGFwcENvbnRleHQpIHtcbiAgICAgICAgcmV0dXJuIGFwcENvbnRleHQubWVzc2FnZVBpcGUgfHwgbnVsbDtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbn1cbmV4cG9ydCB7IFRyZWVEYXRhU2VydmljZSB9O1xuIl19