/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ControlType } from '../controltype';
import { EventEmitter } from '@angular/core';
import { DateTimeHelperService } from '@farris/ui-common/date';
export class MonthRangeValue {
    /**
     * @param {?=} value
     */
    constructor(value = { startTime: '', endTime: '' }) {
        this.clear$ = new EventEmitter();
        this.startTime = value.startTime;
        this.endTime = value.endTime;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    setOriginalValue(value) {
        if (value.formatted) {
            this.startTime = value.formatted.split(value.delimiter)[0];
            this.endTime = value.formatted.split(value.delimiter)[1];
        }
        else {
            this.clearValue();
        }
    }
    /**
     * @return {?}
     */
    getOriginalValue() {
        return `${this.startTime}~${this.endTime}`;
    }
    /**
     * @return {?}
     */
    getControlType() {
        return ControlType.DateRange;
    }
    /**
     * @return {?}
     */
    clearValue() {
        this.startTime = undefined;
        this.endTime = undefined;
        this.clear$.emit();
    }
    /**
     * @return {?}
     */
    isEmpty() {
        return !this.startTime || !this.endTime;
    }
    /**
     * @param {?=} ctrl
     * @return {?}
     */
    getValueText(ctrl) {
        if (!this.startTime.length || !this.endTime.length) {
            return '';
        }
        else {
            if (ctrl && ctrl.format) {
                /** @type {?} */
                const dateHlp = new DateTimeHelperService();
                return dateHlp.formatTo(this.startTime, ctrl.format) + '~' + dateHlp.formatTo(this.endTime, ctrl.format);
            }
            return (this.startTime + '~' + this.endTime);
        }
    }
}
if (false) {
    /** @type {?} */
    MonthRangeValue.prototype.startTime;
    /** @type {?} */
    MonthRangeValue.prototype.endTime;
    /** @type {?} */
    MonthRangeValue.prototype.clear$;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9udGhyYW5nZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BmYXJyaXMvdWktZmlsdGVyLyIsInNvdXJjZXMiOlsibGliL2VudGl0eS9jb25kaXRpb252YWx1ZS9tb250aHJhbmdlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFDQSxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDN0MsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUM3QyxPQUFPLEVBQUUscUJBQXFCLEVBQUUsTUFBTSx3QkFBd0IsQ0FBQztBQUUvRCxNQUFNLE9BQU8sZUFBZTs7OztJQUt4QixZQUFZLFFBQWdELEVBQUUsU0FBUyxFQUFFLEVBQUUsRUFBRSxPQUFPLEVBQUUsRUFBRSxFQUFFO1FBRDFGLFdBQU0sR0FBRyxJQUFJLFlBQVksRUFBRSxDQUFDO1FBRXhCLElBQUksQ0FBQyxTQUFTLEdBQUcsS0FBSyxDQUFDLFNBQVMsQ0FBQztRQUNqQyxJQUFJLENBQUMsT0FBTyxHQUFHLEtBQUssQ0FBQyxPQUFPLENBQUM7SUFDakMsQ0FBQzs7Ozs7SUFFRCxnQkFBZ0IsQ0FBQyxLQUErQztRQUM1RCxJQUFJLEtBQUssQ0FBQyxTQUFTLEVBQUU7WUFDakIsSUFBSSxDQUFDLFNBQVMsR0FBRyxLQUFLLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDM0QsSUFBSSxDQUFDLE9BQU8sR0FBRyxLQUFLLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7U0FDNUQ7YUFBTTtZQUNILElBQUksQ0FBQyxVQUFVLEVBQUUsQ0FBQztTQUNyQjtJQUNMLENBQUM7Ozs7SUFDRCxnQkFBZ0I7UUFDWixPQUFPLEdBQUcsSUFBSSxDQUFDLFNBQVMsSUFBSSxJQUFJLENBQUMsT0FBTyxFQUFFLENBQUM7SUFDL0MsQ0FBQzs7OztJQUNELGNBQWM7UUFDVixPQUFPLFdBQVcsQ0FBQyxTQUFTLENBQUM7SUFDakMsQ0FBQzs7OztJQUNELFVBQVU7UUFDTixJQUFJLENBQUMsU0FBUyxHQUFHLFNBQVMsQ0FBQztRQUMzQixJQUFJLENBQUMsT0FBTyxHQUFHLFNBQVMsQ0FBQztRQUN6QixJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksRUFBRSxDQUFDO0lBQ3ZCLENBQUM7Ozs7SUFFRCxPQUFPO1FBQ0gsT0FBTyxDQUFDLElBQUksQ0FBQyxTQUFTLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDO0lBQzVDLENBQUM7Ozs7O0lBQ0QsWUFBWSxDQUFDLElBQVU7UUFDbkIsSUFBSSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsTUFBTSxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNLEVBQUU7WUFDaEQsT0FBTyxFQUFFLENBQUM7U0FDYjthQUFNO1lBRUgsSUFBSSxJQUFJLElBQUksSUFBSSxDQUFDLE1BQU0sRUFBRTs7c0JBQ2YsT0FBTyxHQUFHLElBQUkscUJBQXFCLEVBQUU7Z0JBQzNDLE9BQU8sT0FBTyxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRSxHQUFHLEdBQUUsT0FBTyxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQzthQUMxRztZQUVELE9BQU8sQ0FBQyxJQUFJLENBQUMsU0FBUyxHQUFHLEdBQUcsR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7U0FDaEQ7SUFDTCxDQUFDO0NBQ0o7OztJQTVDRyxvQ0FBa0I7O0lBQ2xCLGtDQUFnQjs7SUFDaEIsaUNBQTRCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSVZhbHVlIH0gZnJvbSAnLi9pdmFsdWUnO1xyXG5pbXBvcnQgeyBDb250cm9sVHlwZSB9IGZyb20gJy4uL2NvbnRyb2x0eXBlJztcclxuaW1wb3J0IHsgRXZlbnRFbWl0dGVyIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IERhdGVUaW1lSGVscGVyU2VydmljZSB9IGZyb20gJ0BmYXJyaXMvdWktY29tbW9uL2RhdGUnO1xyXG5cclxuZXhwb3J0IGNsYXNzIE1vbnRoUmFuZ2VWYWx1ZSBpbXBsZW1lbnRzIElWYWx1ZSB7XHJcblxyXG4gICAgc3RhcnRUaW1lOiBzdHJpbmc7XHJcbiAgICBlbmRUaW1lOiBzdHJpbmc7XHJcbiAgICBjbGVhciQgPSBuZXcgRXZlbnRFbWl0dGVyKCk7XHJcbiAgICBjb25zdHJ1Y3Rvcih2YWx1ZTogeyBzdGFydFRpbWU6IHN0cmluZywgZW5kVGltZTogc3RyaW5nIH0gPSB7IHN0YXJ0VGltZTogJycsIGVuZFRpbWU6ICcnIH0pIHtcclxuICAgICAgICB0aGlzLnN0YXJ0VGltZSA9IHZhbHVlLnN0YXJ0VGltZTtcclxuICAgICAgICB0aGlzLmVuZFRpbWUgPSB2YWx1ZS5lbmRUaW1lO1xyXG4gICAgfVxyXG5cclxuICAgIHNldE9yaWdpbmFsVmFsdWUodmFsdWU6IHsgZm9ybWF0dGVkOiBzdHJpbmcsIGRlbGltaXRlcjogc3RyaW5nIH0pOiB2b2lkIHtcclxuICAgICAgICBpZiAodmFsdWUuZm9ybWF0dGVkKSB7XHJcbiAgICAgICAgICAgIHRoaXMuc3RhcnRUaW1lID0gdmFsdWUuZm9ybWF0dGVkLnNwbGl0KHZhbHVlLmRlbGltaXRlcilbMF07XHJcbiAgICAgICAgICAgIHRoaXMuZW5kVGltZSA9IHZhbHVlLmZvcm1hdHRlZC5zcGxpdCh2YWx1ZS5kZWxpbWl0ZXIpWzFdO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMuY2xlYXJWYWx1ZSgpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGdldE9yaWdpbmFsVmFsdWUoKSB7XHJcbiAgICAgICAgcmV0dXJuIGAke3RoaXMuc3RhcnRUaW1lfX4ke3RoaXMuZW5kVGltZX1gO1xyXG4gICAgfVxyXG4gICAgZ2V0Q29udHJvbFR5cGUoKTogQ29udHJvbFR5cGUge1xyXG4gICAgICAgIHJldHVybiBDb250cm9sVHlwZS5EYXRlUmFuZ2U7XHJcbiAgICB9XHJcbiAgICBjbGVhclZhbHVlKCk6IHZvaWQge1xyXG4gICAgICAgIHRoaXMuc3RhcnRUaW1lID0gdW5kZWZpbmVkO1xyXG4gICAgICAgIHRoaXMuZW5kVGltZSA9IHVuZGVmaW5lZDtcclxuICAgICAgICB0aGlzLmNsZWFyJC5lbWl0KCk7XHJcbiAgICB9XHJcblxyXG4gICAgaXNFbXB0eSgpOiBib29sZWFuIHtcclxuICAgICAgICByZXR1cm4gIXRoaXMuc3RhcnRUaW1lIHx8ICF0aGlzLmVuZFRpbWU7XHJcbiAgICB9XHJcbiAgICBnZXRWYWx1ZVRleHQoY3RybD86IGFueSk6IHN0cmluZyB7XHJcbiAgICAgICAgaWYgKCF0aGlzLnN0YXJ0VGltZS5sZW5ndGggfHwgIXRoaXMuZW5kVGltZS5sZW5ndGgpIHtcclxuICAgICAgICAgICAgcmV0dXJuICcnO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcblxyXG4gICAgICAgICAgICBpZiAoY3RybCAmJiBjdHJsLmZvcm1hdCkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgZGF0ZUhscCA9IG5ldyBEYXRlVGltZUhlbHBlclNlcnZpY2UoKTtcclxuICAgICAgICAgICAgICAgIHJldHVybiBkYXRlSGxwLmZvcm1hdFRvKHRoaXMuc3RhcnRUaW1lLCBjdHJsLmZvcm1hdCkgKyd+JysgZGF0ZUhscC5mb3JtYXRUbyh0aGlzLmVuZFRpbWUsIGN0cmwuZm9ybWF0KTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgcmV0dXJuICh0aGlzLnN0YXJ0VGltZSArICd+JyArIHRoaXMuZW5kVGltZSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcbiJdfQ==