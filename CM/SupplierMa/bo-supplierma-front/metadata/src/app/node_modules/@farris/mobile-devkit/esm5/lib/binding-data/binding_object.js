/**
 * BindingObject相关定义
 * @author Witt<jiwt@inspur.com>
 */
import { Subject, of } from 'rxjs';
import { ChangeType, ViewChangeType } from './changes';
import { BindingPropertyType } from './binding_property';
import { PropertyUtil } from './property_util';
/**
 * BindingObject是Entity在绑定层的一个影射，它将Entity内的数据转换为不可变对象，并用于界面绑定。
 */
var BindingObject = /** @class */ (function () {
    /**
     * 构造函数
     * @param properties 属性集合
     */
    function BindingObject(properties) {
        /**
         * 标识是否提交过
         */
        this.isShowValidationMsg = false;
        /**
         * 以{ [propertyName]: FormControl }的形式存放每条数据的control
         */
        this.controlMap = {};
        this.properties = properties;
        this.primaryKey = PropertyUtil.getPrimaryKey(properties);
        this.innerValues = new Map();
        this.changes = new Subject();
        this.viewChanges = new Subject();
    }
    Object.defineProperty(BindingObject.prototype, "primaryKeyValue", {
        /**
         * 主键值
         */
        get: function () {
            return this.primaryKey ? this.getValue(this.primaryKey) : '';
        },
        enumerable: true,
        configurable: true
    });
    /**
     * 设置是否提交过
     */
    BindingObject.prototype.setShowValidationMsg = function (flag) {
        this.isShowValidationMsg = flag;
    };
    /**
     * 根据属性名获取属性值
     * @param   propertyName 属性名
     * @returns 属性值
     */
    BindingObject.prototype.getValue = function (propertyName) {
        return this.innerValues.get(propertyName);
    };
    /**
     * 设置属性值
     * @param propertyName        属性名
     * @param propertyValue       属性值
     * @param emitEventToView     是否通知View层去更新界面，默认为false
     * @param emitEventToEntity   是否通知Entity层去更新值，默认为false
     * @param errors              错误消息
     * @param invokeOnValueChange 值变化事件执行句柄
     */
    BindingObject.prototype.setValue = function (propertyName, propertyValue, emitEventToView, emitEventToEntity, errors, invokeOnValueChange) {
        var _this = this;
        if (emitEventToView === void 0) { emitEventToView = false; }
        if (emitEventToEntity === void 0) { emitEventToEntity = false; }
        var oldPropertyValue = this.getValue(propertyName);
        // 由于特定原因（@邵珠强），无法屏蔽oldPropertyValue === propertyValue
        if (oldPropertyValue === propertyValue) {
            return;
        }
        if (!invokeOnValueChange || oldPropertyValue === propertyValue) {
            // 设定缺省
            invokeOnValueChange = function (preValue, value, entityChanged) {
                return of(true);
            };
        }
        if (emitEventToEntity === true) {
            // BUG 322301，删除@2019.08.10; 如果无对应实体，则中止值传递; 这种情况发生在带从表的单据新增，从表响应Load变化的情况；
            // if(!this.innerValues.has(propertyName)) {
            //   return;
            // }
            // 执行实体值变化前事件
            invokeOnValueChange(oldPropertyValue, propertyValue, false).subscribe(function (result) {
                if (result) {
                    // 如果成功，执行变化，并通知实体变化
                    _this.innerValues = _this.innerValues.set(propertyName, propertyValue);
                    var viewChange = {
                        type: ViewChangeType.ValueChanged,
                        path: [propertyName],
                        value: propertyValue,
                        errors: errors
                    };
                    _this.viewChanges.next(viewChange);
                    // 如果需要通知视图，通知视图相应修改
                    if (emitEventToView === true) {
                        _this.changes.next({
                            type: ChangeType.ValueChanged,
                            path: [propertyName],
                            value: propertyValue,
                            id: _this.primaryKeyValue,
                            errors: errors
                        });
                    }
                    // 执行实体值变化后事件
                    invokeOnValueChange(oldPropertyValue, propertyValue, true).subscribe();
                }
                else {
                    // 如果失败，不再通知实体变化
                    // 并执行界面回滚操作
                    _this.changes.next({
                        type: ChangeType.ValueChanged,
                        path: [propertyName],
                        value: oldPropertyValue,
                        id: _this.primaryKeyValue,
                        errors: errors
                    });
                }
            });
        }
        else {
            // `emitEventToEntity === false`, 则认定实体值已经发生变化，通知视图变化，并触发实体值变化后事件
            this.innerValues = this.innerValues.set(propertyName, propertyValue);
            if (emitEventToView === true) {
                this.changes.next({
                    type: ChangeType.ValueChanged,
                    path: [propertyName],
                    value: propertyValue,
                    id: this.primaryKeyValue,
                    errors: errors
                });
            }
            // 执行实体值变化后事件
            invokeOnValueChange(oldPropertyValue, propertyValue, true).subscribe();
        }
    };
    /**
     * 将BindingObject实例转换成JSON对象
     */
    BindingObject.prototype.toJSON = function (options) {
        var _this = this;
        var langCode = window.localStorage.getItem('languageCode') || 'zh-CHS';
        var result = {};
        this.properties.forEach(function (property) {
            var propName = property.name;
            if (property.type === BindingPropertyType.List) {
                var list = _this[propName];
                result[propName] = list.toJSON(options);
            }
            else if (property.type === BindingPropertyType.Object) {
                var object = _this[propName];
                result[propName] = object.toJSON(options);
            }
            else if (property.type === BindingPropertyType.Dynamic) {
                var object = _this[propName];
                result[propName] = object.toJSON(options);
            }
            else {
                // 1、对于多语录入字段；
                // 2、传入ignoreMultiLangInput标志，则取当前语言的值给控件。
                if (options && options.ignoreMultiLangInput === true && property.enableMultiLangInput === true) {
                    var multiLangValueObj = _this.getValue(propName);
                    if (multiLangValueObj) {
                        result[propName] = multiLangValueObj[langCode];
                    }
                    else {
                        result[propName] = multiLangValueObj;
                    }
                }
                else {
                    result[propName] = _this.getValue(propName);
                }
            }
        });
        return result;
    };
    return BindingObject;
}());
export { BindingObject };
//# sourceMappingURL=data:application/json;base64,