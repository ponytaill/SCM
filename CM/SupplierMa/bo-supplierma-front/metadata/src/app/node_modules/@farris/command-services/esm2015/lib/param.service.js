import { Injectable } from '@angular/core';
import { QuerystringService } from './querystring';
import { RuntimeFrameworkService } from './rtf-service';
import { of, Subject } from 'rxjs';
import { switchMap } from 'rxjs/operators';
// tslint:disable: no-string-literal
/**
 * 参数服务
 * @scope FormModule
 */
export class ParamService {
    constructor(querystringService, runtimeFrameworkService) {
        this.querystringService = querystringService;
        this.runtimeFrameworkService = runtimeFrameworkService;
    }
    /**
     * 适配获取所有参数
     */
    get params() {
        // 先从hash中获取参数
        const hash = window.location.hash;
        const params = this.querystringService.parse(hash);
        /*
        const appMode = params.appMode;
        // appMode没有定义，认为是老表单,appMode = mdi 或 spa
        if (typeof appMode === 'undefined' || appMode === null) {
            return of(params);
        }
        // appMode存在，但为空，也认为是老表单
        if (appMode.length < 1) {
            return of(params);
        }
        // 新表单，使用iframe模式
        if (appMode.toLowerCase() === 'mdi') {
            return of(params);
        }
        */
        // 获取tabId，最新版本一定有tabId，如果取不到tabId则认为是老表单，直接从url获取参数
        const tabId = params.tabId;
        if (!tabId) {
            // throw new Error('TabId can`t be empty!');
            return of(params);
        }
        const subject = new Subject();
        // 管道参数e可能为object、Map类型
        this.runtimeFrameworkService.addEventListener(tabId, (e) => {
            let map = {};
            if (e instanceof Map || (e && typeof (e['get']) === 'function' && typeof e['entries'] === 'function')) {
                map = this.parseMapParams(e);
            }
            let args = {};
            if (e instanceof Map || (e && typeof (e['get']) === 'function' && typeof e['entries'] === 'function')) {
                args = new Map(e);
            }
            else {
                args = Object.assign({}, e);
            }
            setTimeout(() => {
                subject.next(Object.assign({}, args, map, params));
            }, 0);
        }, params);
        return subject.asObservable();
    }
    /**
     * 解析map类型的参数
     * @param params params
     */
    parseMapParams(params) {
        const map = {};
        map['WEB_FORM_ROUTE_PARAMS'] = decodeURIComponent(params.get('WEB_FORM_ROUTE_PARAMS'));
        params.forEach((value, key) => {
            if (key !== 'WEB_FORM_ROUTE_PARAMS') {
                map[key] = value;
            }
        });
        return map;
    }
    /**
     * 获取param参数
     * @param param key
     */
    get(param) {
        return this.params.pipe(switchMap(options => {
            if (!!options && options.hasOwnProperty(param)) {
                return of(options.param);
            }
            else {
                return of(undefined);
            }
        }));
    }
    /**
     * 参数转为对象
     */
    parse() {
        return this.params.pipe(switchMap(options => {
            return of(options);
        }));
    }
}
ParamService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
ParamService.ctorParameters = () => [
    { type: QuerystringService },
    { type: RuntimeFrameworkService }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGFyYW0uc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BmYXJyaXMvY29tbWFuZC1zZXJ2aWNlcy8iLCJzb3VyY2VzIjpbImxpYi9wYXJhbS5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ25ELE9BQU8sRUFBRSx1QkFBdUIsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUN4RCxPQUFPLEVBQUUsRUFBRSxFQUErQixPQUFPLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFDaEUsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQzNDLG9DQUFvQztBQUNwQzs7O0dBR0c7QUFFSCxNQUFNLE9BQU8sWUFBWTtJQUN2QixZQUNVLGtCQUFzQyxFQUN0Qyx1QkFBZ0Q7UUFEaEQsdUJBQWtCLEdBQWxCLGtCQUFrQixDQUFvQjtRQUN0Qyw0QkFBdUIsR0FBdkIsdUJBQXVCLENBQXlCO0lBQ3RELENBQUM7SUFDTDs7T0FFRztJQUNILElBQVcsTUFBTTtRQUNmLGNBQWM7UUFDZCxNQUFNLElBQUksR0FBRyxNQUFNLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQztRQUNsQyxNQUFNLE1BQU0sR0FBRyxJQUFJLENBQUMsa0JBQWtCLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ25EOzs7Ozs7Ozs7Ozs7OztVQWNFO1FBQ0Ysb0RBQW9EO1FBQ3BELE1BQU0sS0FBSyxHQUFHLE1BQU0sQ0FBQyxLQUFLLENBQUM7UUFDM0IsSUFBSSxDQUFDLEtBQUssRUFBRTtZQUNWLDRDQUE0QztZQUM1QyxPQUFPLEVBQUUsQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUNuQjtRQUNELE1BQU0sT0FBTyxHQUFHLElBQUksT0FBTyxFQUFPLENBQUM7UUFDbkMsdUJBQXVCO1FBQ3ZCLElBQUksQ0FBQyx1QkFBdUIsQ0FBQyxnQkFBZ0IsQ0FBQyxLQUFLLEVBQUUsQ0FBQyxDQUFNLEVBQUUsRUFBRTtZQUM5RCxJQUFJLEdBQUcsR0FBRyxFQUFFLENBQUM7WUFDYixJQUFJLENBQUMsWUFBWSxHQUFHLElBQUksQ0FBQyxDQUFDLElBQUksT0FBTyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxLQUFLLFVBQVUsSUFBSSxPQUFPLENBQUMsQ0FBQyxTQUFTLENBQUMsS0FBSyxVQUFVLENBQUMsRUFBRTtnQkFDckcsR0FBRyxHQUFHLElBQUksQ0FBQyxjQUFjLENBQUMsQ0FBQyxDQUFDLENBQUM7YUFDOUI7WUFDRCxJQUFJLElBQUksR0FBRyxFQUFFLENBQUM7WUFDZCxJQUFJLENBQUMsWUFBWSxHQUFHLElBQUksQ0FBQyxDQUFDLElBQUksT0FBTyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxLQUFLLFVBQVUsSUFBSSxPQUFPLENBQUMsQ0FBQyxTQUFTLENBQUMsS0FBSyxVQUFVLENBQUMsRUFBRTtnQkFDckcsSUFBSSxHQUFHLElBQUksR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO2FBQ25CO2lCQUFNO2dCQUNMLElBQUksR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQzthQUM3QjtZQUNELFVBQVUsQ0FBQyxHQUFHLEVBQUU7Z0JBQ2QsT0FBTyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLEVBQUUsRUFBRSxJQUFJLEVBQUUsR0FBRyxFQUFFLE1BQU0sQ0FBQyxDQUFDLENBQUM7WUFDckQsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO1FBQ1IsQ0FBQyxFQUFFLE1BQU0sQ0FBQyxDQUFDO1FBQ1gsT0FBTyxPQUFPLENBQUMsWUFBWSxFQUFFLENBQUM7SUFDaEMsQ0FBQztJQUNEOzs7T0FHRztJQUNLLGNBQWMsQ0FBQyxNQUFxQjtRQUMxQyxNQUFNLEdBQUcsR0FBRyxFQUFFLENBQUM7UUFDZixHQUFHLENBQUMsdUJBQXVCLENBQUMsR0FBRyxrQkFBa0IsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLHVCQUF1QixDQUFDLENBQUMsQ0FBQztRQUN2RixNQUFNLENBQUMsT0FBTyxDQUFDLENBQUMsS0FBSyxFQUFFLEdBQUcsRUFBRSxFQUFFO1lBQzVCLElBQUksR0FBRyxLQUFLLHVCQUF1QixFQUFFO2dCQUNuQyxHQUFHLENBQUMsR0FBRyxDQUFDLEdBQUcsS0FBSyxDQUFDO2FBQ2xCO1FBQ0gsQ0FBQyxDQUFDLENBQUM7UUFDSCxPQUFPLEdBQUcsQ0FBQztJQUNiLENBQUM7SUFDRDs7O09BR0c7SUFDSSxHQUFHLENBQUMsS0FBYTtRQUN0QixPQUFPLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUNyQixTQUFTLENBQUMsT0FBTyxDQUFDLEVBQUU7WUFDbEIsSUFBSSxDQUFDLENBQUMsT0FBTyxJQUFJLE9BQU8sQ0FBQyxjQUFjLENBQUMsS0FBSyxDQUFDLEVBQUU7Z0JBQzlDLE9BQU8sRUFBRSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQzthQUMxQjtpQkFBTTtnQkFDTCxPQUFPLEVBQUUsQ0FBQyxTQUFTLENBQUMsQ0FBQzthQUN0QjtRQUNILENBQUMsQ0FBQyxDQUNILENBQUM7SUFDSixDQUFDO0lBQ0Q7O09BRUc7SUFDSSxLQUFLO1FBQ1YsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FDckIsU0FBUyxDQUFDLE9BQU8sQ0FBQyxFQUFFO1lBQ2xCLE9BQU8sRUFBRSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQ3JCLENBQUMsQ0FBQyxDQUNILENBQUM7SUFDSixDQUFDOzs7WUEzRkYsVUFBVTs7OztZQVRGLGtCQUFrQjtZQUNsQix1QkFBdUIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBRdWVyeXN0cmluZ1NlcnZpY2UgfSBmcm9tICcuL3F1ZXJ5c3RyaW5nJztcbmltcG9ydCB7IFJ1bnRpbWVGcmFtZXdvcmtTZXJ2aWNlIH0gZnJvbSAnLi9ydGYtc2VydmljZSc7XG5pbXBvcnQgeyBvZiwgT2JzZXJ2YWJsZSwgQmVoYXZpb3JTdWJqZWN0LCBTdWJqZWN0IH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBzd2l0Y2hNYXAgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG4vLyB0c2xpbnQ6ZGlzYWJsZTogbm8tc3RyaW5nLWxpdGVyYWxcbi8qKlxuICog5Y+C5pWw5pyN5YqhXG4gKiBAc2NvcGUgRm9ybU1vZHVsZVxuICovXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgUGFyYW1TZXJ2aWNlIHtcbiAgY29uc3RydWN0b3IoXG4gICAgcHJpdmF0ZSBxdWVyeXN0cmluZ1NlcnZpY2U6IFF1ZXJ5c3RyaW5nU2VydmljZSxcbiAgICBwcml2YXRlIHJ1bnRpbWVGcmFtZXdvcmtTZXJ2aWNlOiBSdW50aW1lRnJhbWV3b3JrU2VydmljZVxuICApIHsgfVxuICAvKipcbiAgICog6YCC6YWN6I635Y+W5omA5pyJ5Y+C5pWwXG4gICAqL1xuICBwdWJsaWMgZ2V0IHBhcmFtcygpOiBPYnNlcnZhYmxlPHsgW3Byb3BOYW1lOiBzdHJpbmddOiBhbnkgfT4ge1xuICAgIC8vIOWFiOS7jmhhc2jkuK3ojrflj5blj4LmlbBcbiAgICBjb25zdCBoYXNoID0gd2luZG93LmxvY2F0aW9uLmhhc2g7XG4gICAgY29uc3QgcGFyYW1zID0gdGhpcy5xdWVyeXN0cmluZ1NlcnZpY2UucGFyc2UoaGFzaCk7XG4gICAgLypcbiAgICBjb25zdCBhcHBNb2RlID0gcGFyYW1zLmFwcE1vZGU7XG4gICAgLy8gYXBwTW9kZeayoeacieWumuS5ie+8jOiupOS4uuaYr+iAgeihqOWNlSxhcHBNb2RlID0gbWRpIOaIliBzcGFcbiAgICBpZiAodHlwZW9mIGFwcE1vZGUgPT09ICd1bmRlZmluZWQnIHx8IGFwcE1vZGUgPT09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIG9mKHBhcmFtcyk7XG4gICAgfVxuICAgIC8vIGFwcE1vZGXlrZjlnKjvvIzkvYbkuLrnqbrvvIzkuZ/orqTkuLrmmK/ogIHooajljZVcbiAgICBpZiAoYXBwTW9kZS5sZW5ndGggPCAxKSB7XG4gICAgICAgIHJldHVybiBvZihwYXJhbXMpO1xuICAgIH1cbiAgICAvLyDmlrDooajljZXvvIzkvb/nlKhpZnJhbWXmqKHlvI9cbiAgICBpZiAoYXBwTW9kZS50b0xvd2VyQ2FzZSgpID09PSAnbWRpJykge1xuICAgICAgICByZXR1cm4gb2YocGFyYW1zKTtcbiAgICB9XG4gICAgKi9cbiAgICAvLyDojrflj5Z0YWJJZO+8jOacgOaWsOeJiOacrOS4gOWumuaciXRhYklk77yM5aaC5p6c5Y+W5LiN5YiwdGFiSWTliJnorqTkuLrmmK/ogIHooajljZXvvIznm7TmjqXku451cmzojrflj5blj4LmlbBcbiAgICBjb25zdCB0YWJJZCA9IHBhcmFtcy50YWJJZDtcbiAgICBpZiAoIXRhYklkKSB7XG4gICAgICAvLyB0aHJvdyBuZXcgRXJyb3IoJ1RhYklkIGNhbmB0IGJlIGVtcHR5IScpO1xuICAgICAgcmV0dXJuIG9mKHBhcmFtcyk7XG4gICAgfVxuICAgIGNvbnN0IHN1YmplY3QgPSBuZXcgU3ViamVjdDxhbnk+KCk7XG4gICAgLy8g566h6YGT5Y+C5pWwZeWPr+iDveS4um9iamVjdOOAgU1hcOexu+Wei1xuICAgIHRoaXMucnVudGltZUZyYW1ld29ya1NlcnZpY2UuYWRkRXZlbnRMaXN0ZW5lcih0YWJJZCwgKGU6IGFueSkgPT4ge1xuICAgICAgbGV0IG1hcCA9IHt9O1xuICAgICAgaWYgKGUgaW5zdGFuY2VvZiBNYXAgfHwgKGUgJiYgdHlwZW9mIChlWydnZXQnXSkgPT09ICdmdW5jdGlvbicgJiYgdHlwZW9mIGVbJ2VudHJpZXMnXSA9PT0gJ2Z1bmN0aW9uJykpIHtcbiAgICAgICAgbWFwID0gdGhpcy5wYXJzZU1hcFBhcmFtcyhlKTtcbiAgICAgIH1cbiAgICAgIGxldCBhcmdzID0ge307XG4gICAgICBpZiAoZSBpbnN0YW5jZW9mIE1hcCB8fCAoZSAmJiB0eXBlb2YgKGVbJ2dldCddKSA9PT0gJ2Z1bmN0aW9uJyAmJiB0eXBlb2YgZVsnZW50cmllcyddID09PSAnZnVuY3Rpb24nKSkge1xuICAgICAgICBhcmdzID0gbmV3IE1hcChlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGFyZ3MgPSBPYmplY3QuYXNzaWduKHt9LCBlKTtcbiAgICAgIH1cbiAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICBzdWJqZWN0Lm5leHQoT2JqZWN0LmFzc2lnbih7fSwgYXJncywgbWFwLCBwYXJhbXMpKTtcbiAgICAgIH0sIDApO1xuICAgIH0sIHBhcmFtcyk7XG4gICAgcmV0dXJuIHN1YmplY3QuYXNPYnNlcnZhYmxlKCk7XG4gIH1cbiAgLyoqXG4gICAqIOino+aekG1hcOexu+Wei+eahOWPguaVsFxuICAgKiBAcGFyYW0gcGFyYW1zIHBhcmFtc1xuICAgKi9cbiAgcHJpdmF0ZSBwYXJzZU1hcFBhcmFtcyhwYXJhbXM6IE1hcDxhbnksIGFueT4pIHtcbiAgICBjb25zdCBtYXAgPSB7fTtcbiAgICBtYXBbJ1dFQl9GT1JNX1JPVVRFX1BBUkFNUyddID0gZGVjb2RlVVJJQ29tcG9uZW50KHBhcmFtcy5nZXQoJ1dFQl9GT1JNX1JPVVRFX1BBUkFNUycpKTtcbiAgICBwYXJhbXMuZm9yRWFjaCgodmFsdWUsIGtleSkgPT4ge1xuICAgICAgaWYgKGtleSAhPT0gJ1dFQl9GT1JNX1JPVVRFX1BBUkFNUycpIHtcbiAgICAgICAgbWFwW2tleV0gPSB2YWx1ZTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gbWFwO1xuICB9XG4gIC8qKlxuICAgKiDojrflj5ZwYXJhbeWPguaVsFxuICAgKiBAcGFyYW0gcGFyYW0ga2V5XG4gICAqL1xuICBwdWJsaWMgZ2V0KHBhcmFtOiBzdHJpbmcpOiBPYnNlcnZhYmxlPGFueT4ge1xuICAgIHJldHVybiB0aGlzLnBhcmFtcy5waXBlKFxuICAgICAgc3dpdGNoTWFwKG9wdGlvbnMgPT4ge1xuICAgICAgICBpZiAoISFvcHRpb25zICYmIG9wdGlvbnMuaGFzT3duUHJvcGVydHkocGFyYW0pKSB7XG4gICAgICAgICAgcmV0dXJuIG9mKG9wdGlvbnMucGFyYW0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldHVybiBvZih1bmRlZmluZWQpO1xuICAgICAgICB9XG4gICAgICB9KVxuICAgICk7XG4gIH1cbiAgLyoqXG4gICAqIOWPguaVsOi9rOS4uuWvueixoVxuICAgKi9cbiAgcHVibGljIHBhcnNlKCk6IE9ic2VydmFibGU8YW55PiB7XG4gICAgcmV0dXJuIHRoaXMucGFyYW1zLnBpcGUoXG4gICAgICBzd2l0Y2hNYXAob3B0aW9ucyA9PiB7XG4gICAgICAgIHJldHVybiBvZihvcHRpb25zKTtcbiAgICAgIH0pXG4gICAgKTtcbiAgfVxufVxuIl19