/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { LocaleService } from '@farris/ui-locale';
import { Component, ElementRef, Input, Output, Renderer2, ViewChild, EventEmitter, HostBinding } from '@angular/core';
import { MessagerService } from '@farris/ui-messager';
export class EnumEditorComponent {
    /**
     * @param {?} el
     * @param {?} render
     * @param {?} messagerService
     * @param {?} localeSer
     */
    constructor(el, render, messagerService, localeSer) {
        this.el = el;
        this.render = render;
        this.messagerService = messagerService;
        this.localeSer = localeSer;
        /**
         * enum data
         */
        this.data = [];
        this.columns = [];
        this.textField = 'name';
        this.valueField = 'value';
        this.dataChange = new EventEmitter();
        this.cls = 'd-flex flex-column flex-fill';
        this.overflow = 'hidden';
        this.height = '100%';
        this.showSortBtns = true;
        this.currentEnumData = null;
        this.newEnumData = {
            [this.textField]: '',
            [this.valueField]: ''
        };
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        // console.log(changes);
    }
    /**
     * @return {?}
     */
    ngOnInit() {
    }
    /**
     * @param {?} index
     * @return {?}
     */
    insertCondition(index) {
        /** @type {?} */
        const newEnumData = Object.assign({}, this.newEnumData);
        if (index === 0) {
            this.data.unshift(newEnumData);
        }
        else {
            this.data.splice(index, 0, newEnumData);
        }
        this.changeConditionList();
    }
    /**
     * @param {?} index
     * @return {?}
     */
    remove(index) {
        this.data.splice(index, 1);
        this.changeConditionList();
        if (this.currentEnumData) {
            if (index === this.currentEnumData.index) {
                this.currentEnumData = null;
            }
        }
    }
    /**
     * @return {?}
     */
    onAddFilter() {
        this.data = [...this.data, Object.assign({}, this.newEnumData)];
        this.changeConditionList();
    }
    /**
     * @return {?}
     */
    onClear() {
        this.messagerService.question(this.localeSer.getValue('enumEditor.message'), (/**
         * @return {?}
         */
        () => {
            this.data = [];
            this.changeConditionList();
        }));
    }
    /**
     * @return {?}
     */
    onMoveTop() {
        if (this.currentEnumData) {
            this.data.unshift(this.currentEnumData.data);
            this.data.splice(this.currentEnumData.index + 1, 1);
            this.currentEnumData.index = 0;
            this.changeConditionList();
        }
    }
    /**
     * @return {?}
     */
    onMovePrev() {
        if (this.currentEnumData) {
            /** @type {?} */
            const index = this.currentEnumData.index;
            /** @type {?} */
            const tempArr = this.data.splice(index, 1);
            this.data.splice(index - 1, 0, ...tempArr);
            this.currentEnumData.index = index - 1;
            this.changeConditionList();
        }
    }
    /**
     * @return {?}
     */
    onMoveNext() {
        if (this.currentEnumData) {
            /** @type {?} */
            const index = this.currentEnumData.index;
            /** @type {?} */
            const tempArr = this.data.splice(index, 1);
            this.data.splice(index + 1, 0, ...tempArr);
            this.currentEnumData.index = index + 1;
            this.changeConditionList();
        }
    }
    /**
     * @return {?}
     */
    onMoveBottom() {
        if (this.currentEnumData) {
            this.data.push(this.currentEnumData.data);
            this.data.splice(this.currentEnumData.index, 1);
            this.currentEnumData.index = this.data.length - 1;
            this.changeConditionList();
        }
    }
    /**
     * @private
     * @return {?}
     */
    changeConditionList() {
        this.dataChange.next(this.data);
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    selected($event) {
        // console.log($event);
        this.currentEnumData = $event;
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    isSelected($event) {
        if (this.currentEnumData) {
            return this.currentEnumData.index === $event;
        }
        return false;
    }
}
EnumEditorComponent.decorators = [
    { type: Component, args: [{
                selector: 'farris-enum-editor',
                template: "<div class=\"table-header \">\r\n    <table class=\"table table-bordered\" style=\"margin-bottom: 0\">\r\n        <colgroup>\r\n            <col style=\"width: 42px\">\r\n            <col style=\"width: 40%\">\r\n            <col>\r\n        </colgroup>\r\n        <thead>\r\n            <tr>\r\n                <th></th>\r\n                <th><b>{{'enumEditor.value'| locale}}</b></th>\r\n                <th><b>{{'enumEditor.name'| locale}}</b></th>\r\n            </tr>\r\n        </thead>\r\n    </table>\r\n</div>\r\n<div class=\"table-body flex-fill\" style=\"overflow: hidden\" #tablebodybox>\r\n    <perfect-scrollbar [config]=\"{}\">\r\n        <table class=\"table table-bordered\">\r\n            <colgroup>\r\n                <col style=\"width: 42px\">\r\n                <col style=\"width: 40%\">\r\n                <col>\r\n            </colgroup>\r\n            <tbody>\r\n                <tr *ngFor=\"let item of data; let index=index;\" (click)=\"selected({'index':index, 'data': item})\" [class.selected]=\"isSelected(index)\" >\r\n                    <td>\r\n                        <button type=\"button\" class=\"btn btn-link\" (click)=\"remove(index)\">\r\n                            <span class=\"f-icon f-icon-close\" style=\"color: red\"></span>\r\n                        </button>\r\n                    </td>\r\n                    <td>\r\n                        <input type=\"text\" style=\"width:100%\" autocomplete=\"off\" placeholder=\"\" class=\"k-textbox\" [(ngModel)]=\"item[valueField]\">\r\n                    </td>\r\n                    <td>\r\n                        <input type=\"text\" style=\"width:100%\" placeholder=\"\" autocomplete=\"off\" class=\"k-textbox\" [(ngModel)]=\"item[textField]\">\r\n                    </td>\r\n                </tr>\r\n            </tbody>\r\n        </table>\r\n    </perfect-scrollbar>\r\n</div>\r\n<div style=\"flex-shrink: 0;\">\r\n<enum-editor-footer\r\n[showSortBtns]=\"showSortBtns\"\r\n(addFilter)=\"onAddFilter()\"\r\n(clearFilter)=\"onClear()\"\r\n(moveTop)=\"onMoveTop()\"\r\n(movePrev)=\"onMovePrev()\"\r\n(moveNext)=\"onMoveNext()\"\r\n(moveBottom)=\"onMoveBottom()\"></enum-editor-footer>\r\n</div>"
            }] }
];
/** @nocollapse */
EnumEditorComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: Renderer2 },
    { type: MessagerService },
    { type: LocaleService }
];
EnumEditorComponent.propDecorators = {
    data: [{ type: Input }],
    columns: [{ type: Input }],
    textField: [{ type: Input }],
    valueField: [{ type: Input }],
    dataChange: [{ type: Output }],
    tablebodybox: [{ type: ViewChild, args: ['tablebodybox',] }],
    cls: [{ type: HostBinding, args: ['class',] }],
    overflow: [{ type: HostBinding, args: ['style.overflow',] }],
    height: [{ type: HostBinding, args: ['style.height',] }],
    showSortBtns: [{ type: Input }]
};
if (false) {
    /**
     * enum data
     * @type {?}
     */
    EnumEditorComponent.prototype.data;
    /** @type {?} */
    EnumEditorComponent.prototype.columns;
    /** @type {?} */
    EnumEditorComponent.prototype.textField;
    /** @type {?} */
    EnumEditorComponent.prototype.valueField;
    /** @type {?} */
    EnumEditorComponent.prototype.dataChange;
    /** @type {?} */
    EnumEditorComponent.prototype.tablebodybox;
    /** @type {?} */
    EnumEditorComponent.prototype.cls;
    /** @type {?} */
    EnumEditorComponent.prototype.overflow;
    /** @type {?} */
    EnumEditorComponent.prototype.height;
    /** @type {?} */
    EnumEditorComponent.prototype.showSortBtns;
    /** @type {?} */
    EnumEditorComponent.prototype.currentEnumData;
    /**
     * @type {?}
     * @private
     */
    EnumEditorComponent.prototype.newEnumData;
    /**
     * @type {?}
     * @private
     */
    EnumEditorComponent.prototype.el;
    /**
     * @type {?}
     * @private
     */
    EnumEditorComponent.prototype.render;
    /**
     * @type {?}
     * @private
     */
    EnumEditorComponent.prototype.messagerService;
    /**
     * @type {?}
     * @private
     */
    EnumEditorComponent.prototype.localeSer;
}
//# sourceMappingURL=data:application/json;base64,