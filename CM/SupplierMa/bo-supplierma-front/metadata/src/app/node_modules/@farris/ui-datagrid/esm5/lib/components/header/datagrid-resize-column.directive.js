/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, Input, NgZone, ElementRef, Renderer2, Optional, HostListener } from '@angular/core';
import { DatagridHeaderComponent } from './datagrid-header.component';
import { fromEvent } from 'rxjs';
import { takeUntil } from 'rxjs/operators';
/*
 * @Author: 疯狂秀才(Lucas Huang)
 * @Date: 2019-08-10 09:04:53
 * @LastEditors: 疯狂秀才(Lucas Huang)
 * @LastEditTime: 2019-11-20 17:09:09
 * @QQ: 1055818239
 * @Version: v0.0.12
 */
var DatagridResizeColumnDirective = /** @class */ (function () {
    function DatagridResizeColumnDirective(dh, ngzone, el, render) {
        this.dh = dh;
        this.ngzone = ngzone;
        this.el = el;
        this.render = render;
        this.dg = this.dh.dg;
    }
    /**
     * @return {?}
     */
    DatagridResizeColumnDirective.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.isEnable()) {
            this.render.addClass(this.el.nativeElement, 'f-datagrid-header-cell-resize');
            this.resizer = document.createElement('span');
            this.resizer.className = 'column-resize-bar';
            this.el.nativeElement.appendChild(this.resizer);
            this.ngzone.runOutsideAngular((/**
             * @return {?}
             */
            function () {
                // this.resizerMouseDownListener = this.onMouseDown.bind(this);
                // this.resizer.addEventListener('mousedown', this.resizerMouseDownListener);
                /** @type {?} */
                var mouseUp$ = fromEvent(_this.resizer, 'mouseup');
                _this.resizerMouseDownListener = fromEvent(_this.resizer, 'mousedown').pipe(
                // debounceTime(260),
                takeUntil(mouseUp$)).subscribe((/**
                 * @param {?} e
                 * @return {?}
                 */
                function (e) {
                    return _this.onMouseDown(e);
                }));
            }));
            // const mouse$ = fromEvent(this.resizer, 'click');
            // const buff$ = mouse$.pipe(
            //     debounceTime(250)
            // );
            // const click$ = mouse$.pipe(
            //     buffer(buff$),
            //     map(list => {
            //         return {event: list[0], count: list.length};
            //     }),
            //     filter(x => x.count === 2),
            //     map(x => x.event),
            //     takeUntil(mouseUp$)
            // );
            // click$.subscribe((e) => {
            //     this.onDblClickHandler(e);
            //     // this.onMouseUp(e);
            // });
        }
    };
    /**
     * @return {?}
     */
    DatagridResizeColumnDirective.prototype.onDblClickHandler = /**
     * @return {?}
     */
    function () {
        if (this.col.field && this.col.field !== this.dg.ControlPanelFeild) {
            /** @type {?} */
            var thRef = this.el;
            this.dg.sizeToContent(this.col, thRef);
        }
        return false;
    };
    /**
     * @private
     * @return {?}
     */
    DatagridResizeColumnDirective.prototype.isEnable = /**
     * @private
     * @return {?}
     */
    function () {
        if (this.dg.resizeColumn) {
            if (this.col.field === this.dg.ControlPanelFeild) {
                this.col.resizable = false;
            }
            if (this.col.resizable === undefined) {
                this.col.resizable = true;
            }
            return this.col.resizable;
        }
        return false;
    };
    /**
     * @return {?}
     */
    DatagridResizeColumnDirective.prototype.bindDocumentEvents = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.ngzone.runOutsideAngular((/**
         * @return {?}
         */
        function () {
            _this.documentMouseMoveListener = _this.onMouseMove.bind(_this);
            document.addEventListener('mousemove', _this.documentMouseMoveListener);
            _this.documentMouseUpListener = _this.onMouseUp.bind(_this);
            document.addEventListener('mouseup', _this.documentMouseUpListener);
        }));
    };
    /**
     * @return {?}
     */
    DatagridResizeColumnDirective.prototype.unbindDocumentEvents = /**
     * @return {?}
     */
    function () {
        if (this.documentMouseMoveListener) {
            document.removeEventListener('mousemove', this.documentMouseMoveListener);
            this.documentMouseMoveListener = null;
        }
        if (this.documentMouseUpListener) {
            document.removeEventListener('mouseup', this.documentMouseUpListener);
            this.documentMouseUpListener = null;
        }
    };
    /**
     * @param {?} event
     * @return {?}
     */
    DatagridResizeColumnDirective.prototype.onMouseDown = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        event.stopPropagation();
        this.dg.onColumnResizeBegin(event);
        this.render.addClass(this.el.nativeElement, 'column-resizeing');
        this.bindDocumentEvents();
    };
    /**
     * @param {?} event
     * @return {?}
     */
    DatagridResizeColumnDirective.prototype.onMouseMove = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this.dg.onColumnResize(event);
    };
    /**
     * @param {?} event
     * @return {?}
     */
    DatagridResizeColumnDirective.prototype.onMouseUp = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this.dg.onColumnResizeEnd(event, this.col);
        this.render.removeClass(this.el.nativeElement, 'column-resizeing');
        this.unbindDocumentEvents();
    };
    /**
     * @return {?}
     */
    DatagridResizeColumnDirective.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        if (this.resizerMouseDownListener) {
            // this.resizer.removeEventListener('mousedown', this.resizerMouseDownListener);
            this.resizerMouseDownListener.unsubscribe();
        }
        this.unbindDocumentEvents();
        if (this.dblclickListener) {
            this.dblclickListener();
        }
        this.resizer = null;
    };
    DatagridResizeColumnDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[resize-column]',
                },] }
    ];
    /** @nocollapse */
    DatagridResizeColumnDirective.ctorParameters = function () { return [
        { type: DatagridHeaderComponent, decorators: [{ type: Optional }] },
        { type: NgZone },
        { type: ElementRef },
        { type: Renderer2 }
    ]; };
    DatagridResizeColumnDirective.propDecorators = {
        col: [{ type: Input, args: ['resize-column',] }],
        onDblClickHandler: [{ type: HostListener, args: ['dblclick',] }]
    };
    return DatagridResizeColumnDirective;
}());
export { DatagridResizeColumnDirective };
if (false) {
    /** @type {?} */
    DatagridResizeColumnDirective.prototype.col;
    /** @type {?} */
    DatagridResizeColumnDirective.prototype.resizer;
    /** @type {?} */
    DatagridResizeColumnDirective.prototype.resizerMouseDownListener;
    /** @type {?} */
    DatagridResizeColumnDirective.prototype.documentMouseMoveListener;
    /** @type {?} */
    DatagridResizeColumnDirective.prototype.documentMouseUpListener;
    /** @type {?} */
    DatagridResizeColumnDirective.prototype.dblclickListener;
    /**
     * @type {?}
     * @private
     */
    DatagridResizeColumnDirective.prototype.dg;
    /** @type {?} */
    DatagridResizeColumnDirective.prototype.dh;
    /** @type {?} */
    DatagridResizeColumnDirective.prototype.ngzone;
    /** @type {?} */
    DatagridResizeColumnDirective.prototype.el;
    /** @type {?} */
    DatagridResizeColumnDirective.prototype.render;
}
//# sourceMappingURL=data:application/json;base64,