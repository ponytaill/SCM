import { HttpClient } from "@angular/common/http";
import { Inject, Injectable, Injector } from "@angular/core";
import { of } from "rxjs";
import { share, switchMap } from "rxjs/operators";
import { FORM_PATH_TOKEN, FrameContext, FORM_MANIFEST_SERVICE_TOKEN } from "@farris/devkit";
var FormExpressionManifestService = /** @class */ (function () {
    function FormExpressionManifestService(injector, frameContext, httpClient, modulePath, formManifestService) {
        this.injector = injector;
        this.frameContext = frameContext;
        this.httpClient = httpClient;
        this.modulePath = modulePath;
        this.formManifestService = formManifestService;
    }
    FormExpressionManifestService.prototype.load = function () {
        var _this = this;
        if (this.modulePath.endsWith('\/')) {
            this.modulePath = this.modulePath.substring(0, this.modulePath.length - 1);
        }
        return this.formManifestService.load().pipe(switchMap(function (formManifest) {
            var expressions = formManifest.expressions;
            var expressionManifest = expressions.find(function (expressionManifest) { return expressionManifest.ns === _this.frameContext.namespace; });
            if (expressionManifest) {
                var expressionPath = _this.modulePath + "/expressions/" + expressionManifest.path + "?version=" + new Date().valueOf().toString();
                var key = _this.modulePath + "/expressions/" + expressionManifest.path;
                var request$ = FormExpressionManifestService.mainfests.get(key);
                if (request$) {
                    return request$;
                }
                else {
                    var req$ = _this.httpClient.get(expressionPath, { responseType: 'json' }).pipe(share());
                    FormExpressionManifestService.mainfests.set(key, req$);
                    return req$;
                }
            }
            else {
                return of({});
            }
        }));
    };
    FormExpressionManifestService.mainfests = new Map();
    FormExpressionManifestService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    FormExpressionManifestService.ctorParameters = function () { return [
        { type: Injector },
        { type: FrameContext },
        { type: HttpClient },
        { type: undefined, decorators: [{ type: Inject, args: [FORM_PATH_TOKEN,] }] },
        { type: undefined, decorators: [{ type: Inject, args: [FORM_MANIFEST_SERVICE_TOKEN,] }] }
    ]; };
    return FormExpressionManifestService;
}());
export { FormExpressionManifestService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZm9ybV9leHByZXNzaW9uX21hbmlmZXN0X3NlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZmFycmlzL2NvbW1hbmQtc2VydmljZXMvIiwic291cmNlcyI6WyJsaWIvbWFuaWZlc3QvZm9ybV9leHByZXNzaW9uX21hbmlmZXN0X3NlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLHNCQUFzQixDQUFDO0FBQ2xELE9BQU8sRUFBRSxNQUFNLEVBQUUsVUFBVSxFQUFFLFFBQVEsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUM3RCxPQUFPLEVBQWMsRUFBRSxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBQ3RDLE9BQU8sRUFBRSxLQUFLLEVBQUUsU0FBUyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDbEQsT0FBTyxFQUFFLGVBQWUsRUFBRSxZQUFZLEVBQXlFLDJCQUEyQixFQUF3QixNQUFNLGdCQUFnQixDQUFDO0FBRXpMO0lBR0UsdUNBQ1UsUUFBa0IsRUFDbEIsWUFBMEIsRUFDMUIsVUFBc0IsRUFDRyxVQUFVLEVBQ0UsbUJBQXlDO1FBSjlFLGFBQVEsR0FBUixRQUFRLENBQVU7UUFDbEIsaUJBQVksR0FBWixZQUFZLENBQWM7UUFDMUIsZUFBVSxHQUFWLFVBQVUsQ0FBWTtRQUNHLGVBQVUsR0FBVixVQUFVLENBQUE7UUFDRSx3QkFBbUIsR0FBbkIsbUJBQW1CLENBQXNCO0lBQUksQ0FBQztJQUV0Riw0Q0FBSSxHQUFYO1FBQUEsaUJBeUJDO1FBeEJDLElBQUksSUFBSSxDQUFDLFVBQVUsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLEVBQUU7WUFDbEMsSUFBSSxDQUFDLFVBQVUsR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLFNBQVMsQ0FBQyxDQUFDLEVBQUUsSUFBSSxDQUFDLFVBQVUsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLENBQUM7U0FDNUU7UUFFRCxPQUFPLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxJQUFJLENBQ3pDLFNBQVMsQ0FBQyxVQUFDLFlBQTBCO1lBQ25DLElBQU0sV0FBVyxHQUFHLFlBQVksQ0FBQyxXQUFXLENBQUM7WUFDN0MsSUFBTSxrQkFBa0IsR0FBRyxXQUFXLENBQUMsSUFBSSxDQUFDLFVBQUMsa0JBQTJDLElBQUssT0FBQSxrQkFBa0IsQ0FBQyxFQUFFLEtBQUssS0FBSSxDQUFDLFlBQVksQ0FBQyxTQUFTLEVBQXJELENBQXFELENBQUMsQ0FBQztZQUNwSixJQUFJLGtCQUFrQixFQUFFO2dCQUN0QixJQUFNLGNBQWMsR0FBTSxLQUFJLENBQUMsVUFBVSxxQkFBZ0Isa0JBQWtCLENBQUMsSUFBSSxpQkFBWSxJQUFJLElBQUksRUFBRSxDQUFDLE9BQU8sRUFBRSxDQUFDLFFBQVEsRUFBSSxDQUFDO2dCQUM5SCxJQUFNLEdBQUcsR0FBTSxLQUFJLENBQUMsVUFBVSxxQkFBZ0Isa0JBQWtCLENBQUMsSUFBTSxDQUFDO2dCQUN4RSxJQUFNLFFBQVEsR0FBRyw2QkFBNkIsQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDO2dCQUNsRSxJQUFJLFFBQVEsRUFBRTtvQkFDWixPQUFPLFFBQVEsQ0FBQztpQkFDakI7cUJBQU07b0JBQ0wsSUFBTSxJQUFJLEdBQUcsS0FBSSxDQUFDLFVBQVUsQ0FBQyxHQUFHLENBQUMsY0FBYyxFQUFFLEVBQUUsWUFBWSxFQUFFLE1BQU0sRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssRUFBRSxDQUFDLENBQUM7b0JBQ3pGLDZCQUE2QixDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsR0FBRyxFQUFFLElBQUksQ0FBQyxDQUFDO29CQUN2RCxPQUFPLElBQUksQ0FBQztpQkFDYjthQUNGO2lCQUFNO2dCQUNMLE9BQU8sRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDO2FBQ2Y7UUFDSCxDQUFDLENBQUMsQ0FDSCxDQUFDO0lBQ0osQ0FBQztJQWpDYyx1Q0FBUyxHQUFHLElBQUksR0FBRyxFQUEyQixDQUFDOztnQkFGL0QsVUFBVTs7OztnQkFMa0IsUUFBUTtnQkFHWCxZQUFZO2dCQUo3QixVQUFVO2dEQWFkLE1BQU0sU0FBQyxlQUFlO2dEQUN0QixNQUFNLFNBQUMsMkJBQTJCOztJQTRCdkMsb0NBQUM7Q0FBQSxBQXBDRCxJQW9DQztTQW5DWSw2QkFBNkIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBIdHRwQ2xpZW50IH0gZnJvbSBcIkBhbmd1bGFyL2NvbW1vbi9odHRwXCI7XG5pbXBvcnQgeyBJbmplY3QsIEluamVjdGFibGUsIEluamVjdG9yIH0gZnJvbSBcIkBhbmd1bGFyL2NvcmVcIjtcbmltcG9ydCB7IE9ic2VydmFibGUsIG9mIH0gZnJvbSBcInJ4anNcIjtcbmltcG9ydCB7IHNoYXJlLCBzd2l0Y2hNYXAgfSBmcm9tIFwicnhqcy9vcGVyYXRvcnNcIjtcbmltcG9ydCB7IEZPUk1fUEFUSF9UT0tFTiwgRnJhbWVDb250ZXh0LCBGb3JtRXhwcmVzc2lvbnNNYW5pZmVzdCwgRm9ybU1hbmlmZXN0LCBJRm9ybUV4cHJlc3Npb25NYW5pZmVzdFNlcnZpY2UsIEZPUk1fTUFOSUZFU1RfU0VSVklDRV9UT0tFTiwgSUZvcm1NYW5pZmVzdFNlcnZpY2UgfSBmcm9tIFwiQGZhcnJpcy9kZXZraXRcIjtcblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIEZvcm1FeHByZXNzaW9uTWFuaWZlc3RTZXJ2aWNlIGltcGxlbWVudHMgSUZvcm1FeHByZXNzaW9uTWFuaWZlc3RTZXJ2aWNlIHtcbiAgcHJpdmF0ZSBzdGF0aWMgbWFpbmZlc3RzID0gbmV3IE1hcDxzdHJpbmcsIE9ic2VydmFibGU8YW55Pj4oKTtcbiAgY29uc3RydWN0b3IoXG4gICAgcHJpdmF0ZSBpbmplY3RvcjogSW5qZWN0b3IsXG4gICAgcHJpdmF0ZSBmcmFtZUNvbnRleHQ6IEZyYW1lQ29udGV4dCxcbiAgICBwcml2YXRlIGh0dHBDbGllbnQ6IEh0dHBDbGllbnQsXG4gICAgQEluamVjdChGT1JNX1BBVEhfVE9LRU4pIHByaXZhdGUgbW9kdWxlUGF0aCxcbiAgICBASW5qZWN0KEZPUk1fTUFOSUZFU1RfU0VSVklDRV9UT0tFTikgcHJpdmF0ZSBmb3JtTWFuaWZlc3RTZXJ2aWNlOiBJRm9ybU1hbmlmZXN0U2VydmljZSkgeyB9XG5cbiAgcHVibGljIGxvYWQoKTogT2JzZXJ2YWJsZTxhbnk+IHtcbiAgICBpZiAodGhpcy5tb2R1bGVQYXRoLmVuZHNXaXRoKCdcXC8nKSkge1xuICAgICAgdGhpcy5tb2R1bGVQYXRoID0gdGhpcy5tb2R1bGVQYXRoLnN1YnN0cmluZygwLCB0aGlzLm1vZHVsZVBhdGgubGVuZ3RoIC0gMSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuZm9ybU1hbmlmZXN0U2VydmljZS5sb2FkKCkucGlwZShcbiAgICAgIHN3aXRjaE1hcCgoZm9ybU1hbmlmZXN0OiBGb3JtTWFuaWZlc3QpID0+IHtcbiAgICAgICAgY29uc3QgZXhwcmVzc2lvbnMgPSBmb3JtTWFuaWZlc3QuZXhwcmVzc2lvbnM7XG4gICAgICAgIGNvbnN0IGV4cHJlc3Npb25NYW5pZmVzdCA9IGV4cHJlc3Npb25zLmZpbmQoKGV4cHJlc3Npb25NYW5pZmVzdDogRm9ybUV4cHJlc3Npb25zTWFuaWZlc3QpID0+IGV4cHJlc3Npb25NYW5pZmVzdC5ucyA9PT0gdGhpcy5mcmFtZUNvbnRleHQubmFtZXNwYWNlKTtcbiAgICAgICAgaWYgKGV4cHJlc3Npb25NYW5pZmVzdCkge1xuICAgICAgICAgIGNvbnN0IGV4cHJlc3Npb25QYXRoID0gYCR7dGhpcy5tb2R1bGVQYXRofS9leHByZXNzaW9ucy8ke2V4cHJlc3Npb25NYW5pZmVzdC5wYXRofT92ZXJzaW9uPSR7bmV3IERhdGUoKS52YWx1ZU9mKCkudG9TdHJpbmcoKX1gO1xuICAgICAgICAgIGNvbnN0IGtleSA9IGAke3RoaXMubW9kdWxlUGF0aH0vZXhwcmVzc2lvbnMvJHtleHByZXNzaW9uTWFuaWZlc3QucGF0aH1gO1xuICAgICAgICAgIGNvbnN0IHJlcXVlc3QkID0gRm9ybUV4cHJlc3Npb25NYW5pZmVzdFNlcnZpY2UubWFpbmZlc3RzLmdldChrZXkpO1xuICAgICAgICAgIGlmIChyZXF1ZXN0JCkge1xuICAgICAgICAgICAgcmV0dXJuIHJlcXVlc3QkO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjb25zdCByZXEkID0gdGhpcy5odHRwQ2xpZW50LmdldChleHByZXNzaW9uUGF0aCwgeyByZXNwb25zZVR5cGU6ICdqc29uJyB9KS5waXBlKHNoYXJlKCkpO1xuICAgICAgICAgICAgRm9ybUV4cHJlc3Npb25NYW5pZmVzdFNlcnZpY2UubWFpbmZlc3RzLnNldChrZXksIHJlcSQpO1xuICAgICAgICAgICAgcmV0dXJuIHJlcSQ7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldHVybiBvZih7fSk7XG4gICAgICAgIH1cbiAgICAgIH0pXG4gICAgKTtcbiAgfVxufSJdfQ==