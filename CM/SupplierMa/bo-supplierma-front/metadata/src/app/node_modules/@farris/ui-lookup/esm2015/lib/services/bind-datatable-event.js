/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { of } from 'rxjs';
import { catchError, tap } from 'rxjs/operators';
import { FavoriteAction, FAVORITE_FIELD_NAME } from '../lookup-displaytype';
export class DataTableEventManager {
    /**
     * @param {?} ins
     */
    constructor(ins) {
        this.ins = ins;
        this.lookupSelectionSer = this.ins.lookupSelectionSer;
    }
    /**
     * @param {?=} $event
     * @return {?}
     */
    onSearch($event = { field: '*', value: '' }) {
        if ($event && $event.field !== '*' && !$event.value) {
            this.ins.messagerService.warning(this.ins.mustWriteSomething);
            return;
        }
        /** @type {?} */
        const p = {
            pageInfo: { pageIndex: 1, pageSize: this.ins.gridOptions.pageSize },
            search: $event
        };
        if (this.ins.uri) {
            if (!this.ins.searching) {
                this.ins.searching = true;
                this.ins.httpMgr.getData(p, 'list').pipe(catchError((/**
                 * @param {?} err
                 * @return {?}
                 */
                err => {
                    this.ins.searching = false;
                    return of({ "_ERROR_": err });
                })), tap((/**
                 * @return {?}
                 */
                () => {
                    this.ins.searching = false;
                }))).subscribe((/**
                 * @param {?} data
                 * @return {?}
                 */
                data => {
                    this.ins.searching = false;
                    this.ins.closeLoading();
                    if (!data['_ERROR_']) {
                        this._loadData(data);
                    }
                    else {
                        throw new Error(data['_ERROR_']);
                    }
                }));
            }
        }
        else {
            this.ins.search.emit(p);
        }
    }
    /**
     * @private
     * @param {?} data
     * @return {?}
     */
    _loadData(data) {
        /** @type {?} */
        const self = this.ins;
        self.closeLoading();
        self.favHelper.updateFavoritesStatus(data.items);
        self.loadDataTableData(data);
        // 选中数据
        this.ins.selectionMgr.selectCurrentValue();
    }
    /**
     * @return {?}
     */
    bindDataTableEvent() {
        /** @type {?} */
        const self = this.ins;
        /** @type {?} */
        const dt = (/** @type {?} */ (self.componentRef.instance));
        dt.selectedRow.subscribe((/**
         * @param {?} e
         * @return {?}
         */
        (e) => {
            if (this.ins.singleSelect) {
                this.lookupSelectionSer.clearSelections();
            }
            this.ins.checkedChange.emit({ data: [e.data], isCheck: true });
            this.lookupSelectionSer.updateSelections([e.data]);
            dt.cd.detectChanges();
        }));
        dt.unSelectRow.subscribe((/**
         * @param {?} e
         * @return {?}
         */
        e => {
            this.lookupSelectionSer.unSelect(e.data[self.idField]);
            this.ins.checkedChange.emit({ data: [e.data], isCheck: false });
        }));
        dt.checkAll.subscribe((/**
         * @param {?} e
         * @return {?}
         */
        (e) => {
            this.lookupSelectionSer.updateSelections(dt.data, e);
            this.ins.checkedChange.emit({ data: dt.data, isCheck: e });
        }));
        dt.pageChanged.subscribe((/**
         * @param {?} e
         * @return {?}
         */
        (e) => {
            if (self.uri) {
                self.httpMgr.getData(e, 'list').subscribe((/**
                 * @param {?} data
                 * @return {?}
                 */
                (data) => {
                    this._loadData(data);
                }));
            }
            else {
                self.pagerChanged.emit(self.httpMgr.buildQueryParams(e, 'list'));
            }
        }));
        dt.pageSizeChanged.subscribe((/**
         * @param {?} e
         * @return {?}
         */
        e => {
            if (self.uri) {
                self.httpMgr.getData(e, 'list').subscribe((/**
                 * @param {?} data
                 * @return {?}
                 */
                data => {
                    this._loadData(data);
                }), (/**
                 * @param {?} err
                 * @return {?}
                 */
                err => {
                    self.closeLoading();
                }));
            }
            else {
                self.pagerChanged.emit(self.httpMgr.buildQueryParams(e, 'list'));
            }
        }));
        dt.search.subscribe((/**
         * @param {?} e
         * @return {?}
         */
        (e) => {
            self._searchState = e;
            this.onSearch(e);
        }));
        // 双击事件
        dt.rowDblClick.subscribe((/**
         * @param {?} rowData
         * @return {?}
         */
        (rowData) => {
            if (self.gridOptions.singleSelect) {
                // this.lookupSelectionSer.updateSelections([rowData]);
                self.selectItem(rowData);
            }
        }));
        // 收藏事件
        dt.cellClick.subscribe((/**
         * @param {?} e
         * @return {?}
         */
        (e) => {
            if (e.col.field === FAVORITE_FIELD_NAME) {
                e.event.stopPropagation();
                /** @type {?} */
                const classList = e.event.target['classList'];
                if (classList.contains('f-lookup-favorite')) {
                    self.items.forEach((/**
                     * @param {?} item
                     * @return {?}
                     */
                    item => {
                        /** @type {?} */
                        const id = self.utils.getValue(self.idField, item);
                        if (id === self.utils.getValue(self.idField, e.row)) {
                            item[FAVORITE_FIELD_NAME] = !item[FAVORITE_FIELD_NAME];
                        }
                    }));
                    dt.loadData({
                        pageSize: self.gridOptions.pageSize,
                        pageIndex: self.gridOptions.pageIndex,
                        total: self.gridOptions.total,
                        data: self.gridOptions.items
                    });
                    // 更新收藏数据
                    /** @type {?} */
                    const faction = e.row[FAVORITE_FIELD_NAME] ? FavoriteAction.add : FavoriteAction.delete;
                    if (faction === FavoriteAction.add) {
                        this.ins.favoriteItems = [...this.ins.favoriteItems, e.row];
                    }
                    else {
                        this.ins.favoriteItems = this.ins.favoriteItems.filter((/**
                         * @param {?} n
                         * @return {?}
                         */
                        n => {
                            return self.utils.getValue(self.idField, n) !== self.utils.getValue(self.idField, e.row);
                        }));
                    }
                    this.lookupSelectionSer.updateFavoriteData(e.row, faction);
                }
            }
        }));
        dt.columnSorted.subscribe((/**
         * @param {?} sort
         * @return {?}
         */
        (sort) => {
            if (!this.ins.remoteSort) {
                return;
            }
            const { sortName, sortOrder } = Object.assign({}, sort);
            /** @type {?} */
            const col = this.ins.columns.find((/**
             * @param {?} n
             * @return {?}
             */
            n => n.field === sortName));
            /** @type {?} */
            const _sortName = col ? col.fieldPath ? col.fieldPath : col.field : sortName;
            /** @type {?} */
            const param = {
                sortName: _sortName,
                sortOrder,
                search: self._searchState,
                pageInfo: {
                    pageSize: self.pageSize,
                    pageIndex: 1
                }
            };
            self.httpMgr.getData(param, 'search').subscribe((/**
             * @param {?} d
             * @return {?}
             */
            d => {
                self.loadDataTableData(d);
                self.closeLoading();
            }));
        }));
        dt.clearSearchValue.subscribe((/**
         * @return {?}
         */
        () => {
            self._searchState = null;
            this.onSearch();
        }));
    }
}
if (false) {
    /**
     * @type {?}
     * @private
     */
    DataTableEventManager.prototype.lookupSelectionSer;
    /**
     * @type {?}
     * @private
     */
    DataTableEventManager.prototype.ins;
}
//# sourceMappingURL=data:application/json;base64,