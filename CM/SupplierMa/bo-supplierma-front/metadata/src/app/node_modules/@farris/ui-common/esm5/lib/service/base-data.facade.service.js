/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { BehaviorSubject } from 'rxjs';
import { map } from 'rxjs/operators';
/**
 * @template T
 */
var /**
 * @template T
 */
BaseDataFacadeService = /** @class */ (function () {
    function BaseDataFacadeService(_initState) {
        this._initState = _initState;
        this._state = this._initState;
        this.store = new BehaviorSubject(this._state);
        this.state$ = this.store.asObservable();
        this.data$ = this.state$.pipe(map((/**
         * @param {?} state
         * @return {?}
         */
        function (state) { return state.data; })));
    }
    /**
     * @private
     * @param {?} data
     * @return {?}
     */
    BaseDataFacadeService.prototype.initData = /**
     * @private
     * @param {?} data
     * @return {?}
     */
    function (data) {
        var _this = this;
        return data.map((/**
         * @param {?} d
         * @return {?}
         */
        function (d) {
            /** @type {?} */
            var _id = d[_this._state.idField];
            /** @type {?} */
            var disable = (/**
             * @return {?}
             */
            function () {
                return _this.disableExpress ? _this.disableExpress(d) : false;
            });
            return {
                id: _id,
                data: d,
                disabled: disable(),
            };
        }));
    };
    /**
     * @protected
     * @param {?} state
     * @return {?}
     */
    BaseDataFacadeService.prototype.updateState = /**
     * @protected
     * @param {?} state
     * @return {?}
     */
    function (state) {
        /** @type {?} */
        var newState = tslib_1.__assign({}, this._state, state);
        this.store.next(this._state = newState);
    };
    /**
     * @param {?} state
     * @return {?}
     */
    BaseDataFacadeService.prototype.initState = /**
     * @param {?} state
     * @return {?}
     */
    function (state) {
        this.updateState(state);
    };
    /**
     * @param {?} id
     * @return {?}
     */
    BaseDataFacadeService.prototype.isSelect = /**
     * @param {?} id
     * @return {?}
     */
    function (id) {
        var _this = this;
        if (this._state.selections && this._state.selections.length) {
            return this._state.selections.find((/**
             * @param {?} item
             * @return {?}
             */
            function (item) { return !!item ? item[_this._state.idField] == id : false; })) !== undefined;
        }
        return false;
    };
    /**
     * @param {?} data
     * @param {?=} selectValues
     * @param {?=} separator
     * @return {?}
     */
    BaseDataFacadeService.prototype.loadData = /**
     * @param {?} data
     * @param {?=} selectValues
     * @param {?=} separator
     * @return {?}
     */
    function (data, selectValues, separator) {
        if (selectValues === void 0) { selectValues = ''; }
        if (separator === void 0) { separator = ','; }
        if (data) {
            /** @type {?} */
            var _data = this.initData(data);
            this.updateState(tslib_1.__assign({}, this._state, { data: _data }));
            if (selectValues) {
                this.setSelections(selectValues, separator);
            }
            else {
                this._state.selections = [];
            }
        }
        else {
            this.updateState({ data: [], selections: [] });
        }
    };
    /**
     * @return {?}
     */
    BaseDataFacadeService.prototype.getSelections = /**
     * @return {?}
     */
    function () {
        return this._state.selections;
    };
    /**
     * @param {?} selectValues
     * @param {?=} separator
     * @return {?}
     */
    BaseDataFacadeService.prototype.setSelections = /**
     * @param {?} selectValues
     * @param {?=} separator
     * @return {?}
     */
    function (selectValues, separator) {
        var _this = this;
        if (separator === void 0) { separator = ','; }
        if (selectValues) {
            /** @type {?} */
            var selectedItems = [];
            if (this._state.multiSelect) {
                selectedItems = selectValues.split(separator).map((/**
                 * @param {?} val
                 * @return {?}
                 */
                function (val) {
                    return _this._state.data.find((/**
                     * @param {?} d
                     * @return {?}
                     */
                    function (d) { return d.data[_this._state.valueField] + '' == val; }));
                })).map((/**
                 * @param {?} n
                 * @return {?}
                 */
                function (n) {
                    return n ? n.data : '';
                })).filter((/**
                 * @param {?} n
                 * @return {?}
                 */
                function (n) { return n; }));
            }
            else {
                selectedItems = [this._state.data.find((/**
                     * @param {?} d
                     * @return {?}
                     */
                    function (d) { return d.data[_this._state.valueField] + '' == selectValues; }))];
            }
            this.updateState({ selections: selectedItems });
        }
    };
    /**
     * @return {?}
     */
    BaseDataFacadeService.prototype.selectAll = /**
     * @return {?}
     */
    function () {
        this.updateState({ selections: this._state.data.map((/**
             * @param {?} n
             * @return {?}
             */
            function (n) { return n.data; })) });
    };
    /**
     * @return {?}
     */
    BaseDataFacadeService.prototype.unSelectAll = /**
     * @return {?}
     */
    function () {
        this.clearSelections();
    };
    /**
     * @param {?} data
     * @param {?=} index
     * @return {?}
     */
    BaseDataFacadeService.prototype.selectItem = /**
     * @param {?} data
     * @param {?=} index
     * @return {?}
     */
    function (data, index) {
        /** @type {?} */
        var idfield = this._state.idField;
        /** @type {?} */
        var selections = this.getSelections();
        /** @type {?} */
        var id = data[idfield];
        if (!this._state.multiSelect) {
            if (!this.isSelect(id)) {
                selections = [data];
            }
        }
        else {
            if (!this.isSelect(id)) {
                selections.push(data);
            }
        }
        /** @type {?} */
        var items = this.cloneArray(selections);
        this.updateState({ selections: items });
    };
    /**
     * @param {?} data
     * @return {?}
     */
    BaseDataFacadeService.prototype.unSelectItem = /**
     * @param {?} data
     * @return {?}
     */
    function (data) {
        /** @type {?} */
        var idfield = this._state.idField;
        /** @type {?} */
        var selections = this.getSelections();
        /** @type {?} */
        var id = data[idfield];
        if (!this._state.multiSelect) {
            selections = [];
        }
        else {
            selections = selections.filter((/**
             * @param {?} n
             * @return {?}
             */
            function (n) { return n[idfield] != id; }));
        }
        /** @type {?} */
        var items = this.cloneArray(selections);
        this.updateState({ selections: items });
    };
    /**
     * @return {?}
     */
    BaseDataFacadeService.prototype.clearSelections = /**
     * @return {?}
     */
    function () {
        this.updateState({ selections: [] });
    };
    /**
     * @private
     * @param {?} arr
     * @return {?}
     */
    BaseDataFacadeService.prototype.cloneArray = /**
     * @private
     * @param {?} arr
     * @return {?}
     */
    function (arr) {
        if (arr && arr.length) {
            return arr.map((/**
             * @param {?} n
             * @return {?}
             */
            function (n) { return n; }));
        }
        return arr;
    };
    return BaseDataFacadeService;
}());
/**
 * @template T
 */
export { BaseDataFacadeService };
if (false) {
    /**
     * @type {?}
     * @protected
     */
    BaseDataFacadeService.prototype._state;
    /** @type {?} */
    BaseDataFacadeService.prototype.disableExpress;
    /** @type {?} */
    BaseDataFacadeService.prototype.store;
    /** @type {?} */
    BaseDataFacadeService.prototype.state$;
    /** @type {?} */
    BaseDataFacadeService.prototype.data$;
    /**
     * @type {?}
     * @private
     */
    BaseDataFacadeService.prototype._initState;
}
//# sourceMappingURL=data:application/json;base64,