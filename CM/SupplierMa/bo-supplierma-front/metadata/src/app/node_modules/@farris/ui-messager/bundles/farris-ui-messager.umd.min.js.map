{"version":3,"sources":["ng://@farris/ui-messager/lib/farris-default-focus.directive.ts","ng://@farris/ui-messager/lib/messager.config.ts","ng://@farris/ui-messager/lib/messager.component.ts","ng://@farris/ui-messager/lib/messager.service.ts","ng://@farris/ui-messager/lib/messager.module.ts"],"names":["FarrisDefaultFocusDirective","prototype","ngOnInit","ngAfterViewInit","_this","this","button","defaultFocus","ngZone","runOutsideAngular","setTimeout","el","nativeElement","focus","Directive","args","selector","ElementRef","NgZone","Input","MessagerDefaultConfig","title","MESSAGER_DEFAULT_CONFIG","InjectionToken","MessagerComponent","Object","defineProperty","_message","str","undefined","type","utils","unescapeHtml","localeService","getValue","window","innerHeight","enableWordCount","promptText","onTextChange","exception","realWidth","excepMsgEl","getBoundingClientRect","width","toFixed","render","setStyle","allexcepEl","needShowExpand","offsetHeight","onFontSizeChange","val","textAreaEl","getWordsTotal","countType","value","length","maxLength","$event","wordsTotal","wrodsTotalTips","replace","expandMsg","t","stopPropagation","removeStyle","showLines","expand","onCopyClick","copyButton","onClick","event","cmpRef","showMiniNotify","msg","timeout","miniNotifyEl","innerText","Component","template","Injector","HostBinding","ViewChild","injector","showFontSize","cls","okText","cancelText","showOkButton","showCancelButton","readonly","fontSize","inputType","placeholder","buttons","get","CommonUtils","LocaleService","Renderer2","MessagerService","escapeHtml","show","msgtype","message","opts","submsg","document","activeElement","blur","defaultOpts","safeHtml","titleText","height","showButtons","showMaxButton","resizable","initialState","okHandle","close","class","showHeader","assign","defaultMessagerConfig","extendOpts","modalHeight","errorTitle","fitContent","_modal","bsModalService","confirmSubject","Subject","modals","modalContainerComponent","dialog","instance","isShown","moveTo","btnOk","content","btnOkEl","btns","location","querySelectorAll","item","msgMgr","ref","id","getModalsCount","push","getModalById","getModalCmp","closed","subscribe","level","removeMessager","unsubscribe","currentId","question","okCallback","cancelCallback","questionDlg","yesText","noText","cancelHandle","question2","messager","prompt","promptSubject","dlg","mc","next","prompt2","_opts","showCloseButton","saveSize","closeWhenever","dialogOpts","opened","textareaEle","closest","style","padding","resize","readOnly","beforeClose","modalRef","isMax","data","config","saveTextAreaSizeInfo","of","getKeyString","localStorage","key","setItem","JSON","stringify","confirm","confirmDlg","asObservable","info","callback","infoDlg","success","successDlg","error","errorDlg","warning","warningDlg","showHtmlMsg","msgDlg","msgbox","find","getCurrentModalContainer","filter","n","Injectable","BsModalService","version","MessagerModule","forRoot","ngModule","providers","provide","useValue","NgModule","imports","CommonModule","FormsModule","FarrisCommonModule","LocaleModule","ModalModule","declarations","entryComponents"],"mappings":"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","sourcesContent":["import { Directive, Input, ElementRef, OnInit, AfterViewInit, NgZone } from '@angular/core';\r\nimport { DialogButton } from '@farris/ui-modal';\r\n\r\n@Directive({\r\n    selector: '[farris-default-focus]'\r\n})\r\nexport class FarrisDefaultFocusDirective implements OnInit, AfterViewInit {\r\n    @Input('farris-default-focus') button: DialogButton;\r\n\r\n    constructor(private el: ElementRef, private ngZone: NgZone) { }\r\n\r\n    ngOnInit() {\r\n    }\r\n\r\n    ngAfterViewInit() {\r\n        if (this.button.defaultFocus) {\r\n            this.ngZone.runOutsideAngular(() => {\r\n                setTimeout(() => {\r\n                    this.el.nativeElement.focus();\r\n                });\r\n            });\r\n        }\r\n    }\r\n}\r\n","import { InjectionToken } from '@angular/core';\r\n\r\nexport interface MessagerConfig {\r\n    width?: number;\r\n    height?: number;\r\n    title?: string;\r\n    showHeader?: boolean;\r\n}\r\n\r\nexport const MessagerDefaultConfig = {\r\n    // width: 340,\r\n    // height: 220,\r\n    title: 'ç³»ç»æç¤º'\r\n};\r\n\r\nexport const MESSAGER_DEFAULT_CONFIG = new InjectionToken<MessagerConfig>('Messager default options.');\r\n","import { LocaleService } from '@farris/ui-locale';\r\nimport { CommonUtils } from '@farris/ui-common';\r\n/*\r\n * @Author: Lucas.Huangï¼ç¯çç§æï¼\r\n * @Date: 2018-10-13 11:11:50\r\n * @Last Modified by:   Lucas.Huangï¼ç¯çç§æï¼\r\n * @Last Modified time: 2018-10-13 11:11:50\r\n */\r\nimport { ElementRef, Component, OnInit, Input, Injector, HostBinding, ViewChild, AfterViewInit, Renderer2 } from '@angular/core';\r\nimport { DialogButton } from '@farris/ui-modal';\r\n\r\n@Component({\r\n    selector: 'farris-messager',\r\n    templateUrl: './messager.component.html'\r\n})\r\nexport class MessagerComponent implements OnInit, AfterViewInit {\r\n    @Input() type: string;\r\n    @Input() showFontSize = false;\r\n\r\n    private _message = '';\r\n    get message() {\r\n        return this._message;\r\n    }\r\n\r\n    @Input() set message(str) {\r\n        this._message = (str === undefined || str === null) ? '' : '' + str;\r\n        if (this.type === 'prompt' && this.utils) {\r\n            this._message = this.utils.unescapeHtml(this._message);\r\n        }\r\n    }\r\n\r\n    @Input() msg = '';\r\n    utils: CommonUtils;\r\n    localeService: LocaleService;\r\n    render: Renderer2;\r\n    constructor(private injector: Injector) {\r\n        this.utils = this.injector.get(CommonUtils);\r\n        this.localeService = this.injector.get(LocaleService);\r\n        this.render = this.injector.get(Renderer2);\r\n    }\r\n\r\n    @HostBinding('class') cls = 'farris-messager';\r\n\r\n    @Input() okText = '';\r\n    @Input() cancelText = '';\r\n    @Input() showOkButton = true;\r\n    @Input() showCancelButton = true;\r\n\r\n    @Input() readonly = false;\r\n\r\n    @Input() okHandle: () => {};\r\n    @Input() cancelHandle: () => {};\r\n\r\n\r\n    @Input() enableWordCount = false;\r\n    @Input() countType = 'length';\r\n    @Input() maxLength: number;\r\n\r\n    @Input() exception = null;\r\n    @Input() showLines = 4;\r\n\r\n    @ViewChild('promptText') promptText: ElementRef;\r\n    @ViewChild('fontSizeEl') fontSizeEl: ElementRef;\r\n    @ViewChild('wordCount') wordCountEl: ElementRef;\r\n    @ViewChild('excepMsg') excepMsgEl: ElementRef;\r\n    @ViewChild('allexcep') allexcepEl: ElementRef;\r\n    @ViewChild('miniNotify') miniNotifyEl: ElementRef;\r\n    @ViewChild('btnOkEl') btnOkEl: ElementRef;\r\n\r\n    @Input() fontSize = '18';\r\n\r\n    @Input() inputType = 'textarea';\r\n    @Input() placeholder = '';\r\n\r\n    @Input() buttons: DialogButton[] = [];\r\n\r\n    get fontsizeName() {\r\n        return this.localeService.getValue('messager.prompt.fontSize.name');\r\n    }\r\n    get fontSmall() {\r\n        return this.localeService.getValue('messager.prompt.fontSize.small');\r\n    }\r\n    get fontMiddle() {\r\n        return this.localeService.getValue('messager.prompt.fontSize.middle');\r\n    }\r\n    get fontBig() {\r\n        return this.localeService.getValue('messager.prompt.fontSize.big');\r\n    }\r\n    get fontLarge() {\r\n        return this.localeService.getValue('messager.prompt.fontSize.large');\r\n    }\r\n    get fontHuge() {\r\n        return this.localeService.getValue('messager.prompt.fontSize.huge');\r\n    }\r\n\r\n    get expandText() {\r\n        return this.localeService.getValue('messager.exception.expand');\r\n    }\r\n\r\n    get collapseText() {\r\n        return this.localeService.getValue('messager.exception.collapse');\r\n    }\r\n\r\n    get happend() {\r\n        return this.localeService.getValue('messager.exception.happend');\r\n    }\r\n\r\n    get detail() {\r\n        return this.localeService.getValue('messager.exception.detail');\r\n    }\r\n\r\n    get exceptionMsgMaxHeight () {\r\n        return window.innerHeight -10 -10 - 100 -100 -16;\r\n    }\r\n\r\n\r\n    expand = false;\r\n    needShowExpand = false;\r\n\r\n    wordsTotal = '';\r\n    wrodsTotalTips = '';\r\n\r\n    ngOnInit() {\r\n        setTimeout(() => {\r\n            if (this.enableWordCount && this.promptText) {\r\n                this.onTextChange(null);\r\n            }\r\n        });\r\n\r\n        this.type = this.type === 'exception' ? 'error' : this.type;\r\n    }\r\n\r\n    get icon() {\r\n        return 'f-icon-' + (this.type === 'exception' ? 'error' : this.type);\r\n    }\r\n\r\n    ngAfterViewInit(): void {\r\n        setTimeout(() => {\r\n            if (this.exception && this.exception['message']) {\r\n                const realWidth = this.excepMsgEl.nativeElement.getBoundingClientRect().width.toFixed(2) + 'px';\r\n                this.render.setStyle(this.allexcepEl.nativeElement, 'width', realWidth);\r\n                this.needShowExpand = this.allexcepEl.nativeElement.offsetHeight > this.excepMsgEl.nativeElement.offsetHeight;\r\n            } else {\r\n                this.needShowExpand = false;\r\n            }\r\n        }, 10);\r\n    }\r\n\r\n    onFontSizeChange(val, textAreaEl) {\r\n        // this.promptText.nativeElement\r\n        // textAreaEl.nativeElement.style['font-size'] = val;\r\n    }\r\n\r\n    private getWordsTotal() {\r\n        const c = this.countType === 'length' ? this.promptText.nativeElement.value.length\r\n                                            : this.maxLength - this.promptText.nativeElement.value.length;\r\n        return c;\r\n    }\r\n\r\n    onTextChange($event) {\r\n        this.wordsTotal = this.getWordsTotal();\r\n        this.wrodsTotalTips = this.localeService.getValue('messager.prompt.tips.' + this.countType).replace('{0}', this.wordsTotal);\r\n    }\r\n\r\n    expandMsg(t: boolean, $event: MouseEvent) {\r\n        $event.stopPropagation();\r\n        if (t) {\r\n            this.render.setStyle(this.excepMsgEl.nativeElement, 'overflow', 'auto');\r\n            this.render.removeStyle(this.excepMsgEl.nativeElement, '-webkit-line-clamp');\r\n        } else {\r\n            this.render.setStyle(this.excepMsgEl.nativeElement, 'overflow', 'hidden');\r\n            this.render.setStyle(this.excepMsgEl.nativeElement, '-webkit-line-clamp', this.showLines);\r\n        }\r\n\r\n        this.expand = t;\r\n    }\r\n\r\n\r\n    onCopyClick($event) {\r\n        $event.stopPropagation();\r\n        if (this.exception && this.exception.copyButton) {\r\n            this.exception.copyButton.onClick({ event: $event, cmpRef: this });\r\n        }\r\n    }\r\n\r\n    showMiniNotify(msg, timeout = 700) {\r\n        if (this.miniNotifyEl) {\r\n            this.miniNotifyEl.nativeElement.innerText = msg;\r\n            this.render.setStyle(this.miniNotifyEl.nativeElement, 'display', '');\r\n            this.render.setStyle(this.miniNotifyEl.nativeElement, 'opacity', 0.8);\r\n\r\n            setTimeout(() => {\r\n                this.render.setStyle(this.miniNotifyEl.nativeElement, 'opacity', 0);\r\n                this.render.setStyle(this.miniNotifyEl.nativeElement, 'display', 'none');\r\n            }, timeout);\r\n        }\r\n    }\r\n}\r\n","\r\n/*\r\n * @Author: ç¯çç§æ(Lucas Huang)\r\n * @LastEditors: ç¯çç§æ(Lucas Huang)\r\n * @Company: Inspur\r\n * @Version: v0.0.15\r\n * @Date: 2019-04-02 11:48:08\r\n * @LastEditTime: 2019-10-26 16:38:34\r\n */\r\n\r\nimport { Injectable, Injector, NgZone } from '@angular/core';\r\nimport { Subject, Observable, of } from 'rxjs';\r\nimport { BsModalService, BsModalRef, DialogButton } from '@farris/ui-modal';\r\nimport { MessagerConfig, MessagerDefaultConfig, MESSAGER_DEFAULT_CONFIG } from './messager.config';\r\nimport { MessagerComponent } from './messager.component';\r\nimport { LocaleService } from '@farris/ui-locale';\r\nimport { unescapeIdentifier } from '@angular/compiler';\r\n\r\n\r\n@Injectable()\r\nexport class MessagerService {\r\n    version = '0.0.15';\r\n    currentId = -1;\r\n    modals: { id: number; ref: BsModalRef }[] = [];\r\n    private defaultMessagerConfig: MessagerConfig = null;\r\n\r\n    private confirmSubject;\r\n    private ngZone: NgZone;\r\n\r\n    private localeService: LocaleService;\r\n\r\n    constructor(private bsModalService: BsModalService, private injector: Injector) {\r\n        const config = this.injector.get(MESSAGER_DEFAULT_CONFIG) || MessagerDefaultConfig;\r\n        this.defaultMessagerConfig = Object.assign({}, MessagerDefaultConfig, config);\r\n        this.ngZone = this.injector.get(NgZone);\r\n        this.localeService = this.injector.get(LocaleService);\r\n    }\r\n    get okText() {\r\n        return this.localeService.getValue('messager.ok');\r\n    }\r\n    get cancelText() {\r\n        return this.localeService.getValue('messager.cancel');\r\n    }\r\n    get yesText() {\r\n        return this.localeService.getValue('messager.yes');\r\n    }\r\n    get noText() {\r\n        return this.localeService.getValue('messager.no');\r\n    }\r\n    get titleText() {\r\n        return this.localeService.getValue('messager.title');\r\n    }\r\n    get errorTitle() {\r\n        return this.localeService.getValue('messager.errorTitle');\r\n    }\r\n\r\n    escapeHtml(str) {\r\n        if (str === null || str === undefined) {\r\n            return '';\r\n        }\r\n        return str\r\n            .replace(/&/g, '&amp;')\r\n            .replace(/</g, '&lt;')\r\n            .replace(/>/g, '&gt;')\r\n            .replace(/\\\"/g, '&quot;')\r\n            .replace(/\\'/g, '&#39;')\r\n            .replace(/\\//g, '&#x2F;');\r\n    }\r\n\r\n    /**\r\n     * æ¾ç¤ºä¿¡æ¯æç¤ºæ¡\r\n     * @param msgtype æ¶æ¯ç±»å«\r\n     * @param message æç¤ºæ¶æ¯ä¸\r\n     * @param opts åæ° æä¾å±æ§ fitContent:trueæ¯æèªå¨éåºå®½åº¦\r\n     * @param submsg æç¤ºæ¶æ¯äºçº§\r\n     */\r\n    show(msgtype: string, message: string, opts?: {}, submsg = '') {\r\n        if (document.activeElement) {\r\n            (document.activeElement as any).blur();\r\n        }\r\n        const modalHeight = 180;\r\n        let defaultOpts = {\r\n            safeHtml: true,\r\n            title: this.titleText,\r\n            width: 390,\r\n            height: modalHeight,\r\n            showButtons: false,\r\n            showMaxButton: false,\r\n            resizable: false,\r\n            initialState: {\r\n                okText: this.okText,\r\n                okHandle: () => {\r\n                    this.close();\r\n                }\r\n            },\r\n            class: 'modal-message ' + (msgtype ? 'modal-message-type-' + msgtype : ''),\r\n            showHeader: false,\r\n        };\r\n        defaultOpts = Object.assign({}, this.defaultMessagerConfig, defaultOpts);\r\n        let extendOpts = {};\r\n\r\n        switch (msgtype) {\r\n            case 'prompt':\r\n                // å¼¹åºå¯¹è¯ç±»å\r\n                extendOpts = { showHeader: true, modalHeight: 260 };\r\n                break;\r\n            case 'error':\r\n                // éè¯¯\r\n                extendOpts = { title: this.errorTitle, width: 446, showHeader: true, showMaxButton: true, fitContent: true };\r\n                break;\r\n            case 'exception':\r\n                extendOpts = { safeHtml: false, title: this.errorTitle, width: 446, showHeader: true, fitContent: true };\r\n                break;\r\n            default:\r\n                // é»è®¤å¶ä»\r\n                extendOpts = { width: submsg ? 446 : 390, fitContent: true };\r\n        }\r\n        Object.assign(defaultOpts, extendOpts);\r\n        if (opts) {\r\n            Object.assign(defaultOpts, opts);\r\n        }\r\n\r\n        if (message && defaultOpts.safeHtml) {\r\n            message = this.escapeHtml(message);\r\n        }\r\n\r\n        Object.assign(defaultOpts.initialState, {\r\n            type: msgtype,\r\n            message,\r\n            msg: submsg,\r\n            exception: opts && opts['exception'] ? opts['exception'] : null,\r\n            showLines: opts && opts['showLines'] ? opts['showLines'] : 3,\r\n            readonly: opts && opts['readonly'] ? opts['readonly'] : false\r\n        });\r\n\r\n        if (defaultOpts['buttons'] && defaultOpts['buttons'].length) {\r\n            if (!defaultOpts.initialState['buttons'] || !defaultOpts.initialState['buttons'].length) {\r\n                defaultOpts.initialState['buttons'] = defaultOpts['buttons'];\r\n            }\r\n        }\r\n        const _modal = this.bsModalService.show(MessagerComponent, defaultOpts);\r\n        // _modal.content.buttons = defaultOpts['buttons'] || [];\r\n        this.confirmSubject = new Subject<boolean>();\r\n        if (this.modals.length > 0) {\r\n            const modalContainerComponent = _modal.dialog;\r\n            modalContainerComponent.instance.isShown = true;\r\n            modalContainerComponent.instance.moveTo(\r\n                15 * this.modals.length,\r\n                15 * this.modals.length\r\n            );\r\n        }\r\n\r\n        this.ngZone.runOutsideAngular(() => {\r\n            // ç¬¬1ä¸ªæé®è·åç¦ç¹\r\n            setTimeout(() => {\r\n                const btnOk = _modal.content.btnOkEl ? _modal.content.btnOkEl.nativeElement : null;\r\n                if (btnOk) {\r\n                    btnOk['focus']();\r\n                } else {\r\n                    const btns = _modal.dialog.location.nativeElement.querySelectorAll('.modal-footer button');\r\n                    if (btns.length) {\r\n                        btns.item(0)['focus']();\r\n                    }\r\n                }\r\n            });\r\n        });\r\n\r\n        this.msgMgr(_modal);\r\n        return _modal;\r\n    }\r\n\r\n    private msgMgr(ref: BsModalRef) {\r\n        const id = this.bsModalService.getModalsCount() + 1000;\r\n        if (this.modals.length === 0) {\r\n            this.modals.push({ id, ref });\r\n        } else {\r\n            if (!this.getModalById(id)) {\r\n                this.modals.push({ id, ref });\r\n            } else {\r\n                this.getModalById(id).ref = ref;\r\n            }\r\n        }\r\n\r\n        const cmp = this.getModalCmp();\r\n\r\n        cmp.closed.subscribe((level: number) => {\r\n            this.removeMessager(id);\r\n            this.confirmSubject.unsubscribe();\r\n        });\r\n\r\n        this.currentId = id;\r\n    }\r\n\r\n\r\n    question(message: string, okCallback: () => void, cancelCallback?: () => void, msg?: string, fitContent = true) {\r\n        const questionDlg = this.show('question', message, {\r\n            initialState: {\r\n                okText: this.yesText,\r\n                okHandle: () => {\r\n                    questionDlg.close();\r\n                    if (okCallback) {\r\n                        okCallback();\r\n                    }\r\n                },\r\n                cancelText: this.noText,\r\n                cancelHandle: () => {\r\n                    questionDlg.close();\r\n                    if (cancelCallback) {\r\n                        cancelCallback();\r\n                    }\r\n                }\r\n            },\r\n            fitContent\r\n        }, msg);\r\n        return questionDlg;\r\n    }\r\n\r\n    question2(messager: string, btns: DialogButton[], msg?: string, fitContent = true) {\r\n        return this.show('question', messager, {\r\n            initialState: {\r\n                buttons: btns\r\n            },\r\n            fitContent\r\n        }, msg);\r\n    }\r\n    /**\r\n     * 2020å¹´3æ7æ¥å ä¸ºtextareaé«åº¦å¨ä¸åæµè§å¨ä¸ä¸ä¸æ ·ï¼åºå®é«åº¦å¯è½ä¼åºç°æ»å¨æ¡\r\n     * @param title æ é¢\r\n     * @param msg ä¿¡æ¯\r\n     * @param fitContent èªéåºåå®¹\r\n     */\r\n    prompt(title: string, msg?: string, fitContent = true) {\r\n        const promptSubject = new Subject();\r\n        const dlg = this.show('prompt', msg, {\r\n            title,\r\n            initialState: {\r\n                okText: this.okText,\r\n                okHandle: () => {\r\n                    const mc = dlg.content as MessagerComponent;\r\n                    dlg.close();\r\n                    promptSubject.next(mc.promptText.nativeElement.value);\r\n                },\r\n                cancelText: this.cancelText,\r\n                cancelHandle: () => {\r\n                    dlg.close();\r\n                    promptSubject.next(false);\r\n                }\r\n            },\r\n            fitContent,\r\n            closed: () => {\r\n                promptSubject.unsubscribe();\r\n            }\r\n        }, msg);\r\n\r\n        return promptSubject;\r\n    }\r\n\r\n    prompt2(title: string, msg?: string, opts?: any) {\r\n        const promptSubject = new Subject();\r\n\r\n        const _opts = {\r\n            showOkButton: true,\r\n            showCloseButton: true,\r\n            showFontSize: false,\r\n            fontSize: 18,\r\n            readonly: false,\r\n            saveSize: false,\r\n            closeWhenever: true\r\n        };\r\n        if (!opts) {\r\n            opts = _opts;\r\n        } else {\r\n            opts = Object.assign(_opts, opts);\r\n        }\r\n\r\n        const _dialogOpts = {\r\n            title,\r\n            initialState: {\r\n                showOkButton: opts.showOkButton === undefined ? true : opts.showOkButton,\r\n                showCancelButton: opts.showCancelButton === undefined ? true : opts.showCancelButton,\r\n                okText: this.okText,\r\n                okHandle: () => {\r\n                    const mc = dlg.content as MessagerComponent;\r\n                    const val = mc.promptText.nativeElement.value;\r\n                    if (opts.closeWhenever) {\r\n                        dlg.close();\r\n                        promptSubject.next(val);\r\n                    } else {\r\n                        promptSubject.next({val, dlg });\r\n                    }\r\n                },\r\n                cancelText: this.cancelText,\r\n                cancelHandle: () => {\r\n                    dlg.close();\r\n                    promptSubject.next(false);\r\n                },\r\n                showFontSize: opts.showFontSize,\r\n                fontSize: opts.fontSize || 18,\r\n                enableWordCount: !!opts.enableWordCount,\r\n                countType: opts.countType || 'length',\r\n                maxLength: opts.maxLength,\r\n                inputType: opts.inputType || 'textarea',\r\n                placeholder: opts.placeholder || ''\r\n            },\r\n            fitContent: false,\r\n            showMaxButton: true,\r\n            resizable: true,\r\n            class: '',\r\n            closed: () => {\r\n                promptSubject.unsubscribe();\r\n            },\r\n            opened: () => {\r\n                if (opts.inputType !== 'textarea') {\r\n                    return;\r\n                } else {\r\n                    setTimeout(() => {\r\n                        const textareaEle = dlg.content.promptText.nativeElement;\r\n                        textareaEle.closest('section').style.padding = '15px';\r\n                        textareaEle.style.resize = 'none';\r\n                        textareaEle.style.height = '100%';\r\n\r\n                        if (opts.readonly) {\r\n                            textareaEle.readOnly = true;\r\n                        }\r\n                    });\r\n                }\r\n            },\r\n            beforeClose: (modalRef: any) => {\r\n                if (opts.saveSize && !dlg.dialog.instance.isMax) {\r\n                    const data = { fontSize: dlg.content.fontSize, width: modalRef.config.width, height: modalRef.config.height };\r\n                    this.saveTextAreaSizeInfo(data);\r\n                }\r\n                return of(true);\r\n            }\r\n        };\r\n        let dialogOpts = _dialogOpts;\r\n        if (opts) {\r\n            dialogOpts = Object.assign(dialogOpts, opts);\r\n        }\r\n\r\n        const dlg = this.show('prompt', msg, dialogOpts, msg);\r\n\r\n        if (opts.inputType &&  dlg.content.promptText) {\r\n            dlg.content.promptText.nativeElement.focus();\r\n        }\r\n\r\n        return promptSubject;\r\n    }\r\n\r\n    getKeyString() {\r\n        // ä¸å°ç»ç«¯å±ç¨ä¸ä¸ªéç½®\r\n        // ä¿çæåä¸æ¬¡çè®¾ç½®ï¼\r\n        // ä¿å­çªå£å¤§å°ï¼å­ä½å¤§å°\r\n        return 'IGIX-FARRIS-UI-TEXTAREA-ZOOM-SETTINGS';\r\n    }\r\n\r\n    private saveTextAreaSizeInfo(data) {\r\n        if (window.localStorage) {\r\n            const key = this.getKeyString();\r\n            localStorage.setItem(key, JSON.stringify(data));\r\n        }\r\n    }\r\n\r\n    confirm(message: string, msg?: string, fitContent = true): Observable<any> {\r\n        const confirmSubject = new Subject();\r\n        const confirmDlg = this.show('question', message, {\r\n            initialState: {\r\n                okText: this.okText,\r\n                okHandle: () => {\r\n                    confirmDlg.close();\r\n                    confirmSubject.next(true);\r\n                },\r\n                cancelText: this.cancelText,\r\n                cancelHandle: () => {\r\n                    confirmDlg.close();\r\n                    confirmSubject.next(false);\r\n                }\r\n            },\r\n            fitContent,\r\n            closed: () => {\r\n                confirmSubject.unsubscribe();\r\n            }\r\n        }, msg);\r\n\r\n        return confirmSubject.asObservable();\r\n    }\r\n\r\n    info(message: string, callback?: () => void, msg?: string, fitContent = true) {\r\n        const infoDlg = this.show('info', message, {\r\n            initialState: {\r\n                okText: this.okText,\r\n                okHandle: () => {\r\n                    infoDlg.close();\r\n                    if (callback) {\r\n                        callback();\r\n                    }\r\n                }\r\n            },\r\n            fitContent\r\n        }, msg);\r\n        return infoDlg;\r\n    }\r\n\r\n\r\n    /** æä½æåæç¤ºï¼\r\n     * message: æç¤ºä¿¡æ¯\r\n     * msg: 2çº§ä¿¡æ¯\r\n     * fitCountent: é»è®¤ä¸ºtrue\r\n     * callback: ç¡®å®äºä»¶åè°\r\n     */\r\n    success(message: string, msg?: string, fitContent = true, callback: () => void = null) {\r\n        const successDlg = this.show('success', message, {\r\n            initialState: {\r\n                okText: this.okText,\r\n                okHandle: () => {\r\n                    successDlg.close();\r\n                    if (callback) {\r\n                        callback();\r\n                    }\r\n                }\r\n            },\r\n            fitContent\r\n        }, msg);\r\n\r\n        return successDlg;\r\n    }\r\n    /** æç¤ºéè¯¯ä¿¡æ¯ï¼\r\n     * message: æç¤ºä¿¡æ¯\r\n     * msg: 2çº§ä¿¡æ¯\r\n     * fitCountent: é»è®¤ä¸ºtrue\r\n     * callback: ç¡®å®äºä»¶åè°\r\n     */\r\n    error(message: string, msg?: string, fitContent = true, callback: () => void = null, safeHtml = true) {\r\n        const errorDlg = this.show('error', message, {\r\n            safeHtml,\r\n            initialState: {\r\n                okText: this.okText,\r\n                okHandle: () => {\r\n                    errorDlg.close();\r\n                    if (callback) {\r\n                        callback();\r\n                    }\r\n                }\r\n            },\r\n            fitContent\r\n        }, msg);\r\n\r\n        return errorDlg;\r\n    }\r\n\r\n    warning(message: string, msg?: string, fitContent = true, callback: () => void = null) {\r\n        const warningDlg = this.show('warning', message, {\r\n            initialState: {\r\n                okText: this.okText,\r\n                okHandle: () => {\r\n                    warningDlg.close();\r\n                    if (callback) {\r\n                        callback();\r\n                    }\r\n                }\r\n            },\r\n            fitContent\r\n        }, msg);\r\n        return warningDlg;\r\n    }\r\n\r\n    showHtmlMsg(type: 'warning'| 'info'|'error'|'success', title: string, message?: string, callback:() => void = null) {\r\n        const msgDlg = this.show(type, title, {\r\n            safeHtml: false,\r\n            initialState: {\r\n                okText: this.okText,\r\n                okHandle: () => {\r\n                    msgDlg.close();\r\n                    if (callback) {\r\n                        callback();\r\n                    }\r\n                }\r\n            },\r\n            fitContent: true\r\n        }, message);\r\n        return msgDlg;\r\n    }\r\n\r\n\r\n    private close() {\r\n        if (this.modals.length) {\r\n            const msgbox = this.getModalById(this.currentId);\r\n            if (msgbox) {\r\n                msgbox.ref.close();\r\n            }\r\n        }\r\n    }\r\n\r\n    private getModalById(id: number) {\r\n        return this.modals.find(item => item.id === id);\r\n    }\r\n\r\n    private getModalCmp() {\r\n        return this.bsModalService.getCurrentModalContainer().instance;\r\n    }\r\n\r\n    private removeMessager(id) {\r\n        this.modals = this.modals.filter(n => n.id !== id);\r\n        if (!this.modals.length) {\r\n            this.currentId = -1;\r\n        } else {\r\n            this.currentId = this.modals[this.modals.length - 1].id;\r\n        }\r\n    }\r\n}\r\n","import { NgModule, ModuleWithProviders } from '@angular/core';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { FarrisCommonModule } from '@farris/ui-common';\r\n// import { FarrisFormsModule } from '@farris/ui-forms';\r\nimport { ModalModule } from '@farris/ui-modal';\r\nimport { LocaleModule } from '@farris/ui-locale';\r\n\r\nimport { MessagerComponent } from './messager.component';\r\nimport { MessagerService } from './messager.service';\r\nimport { MessagerConfig, MESSAGER_DEFAULT_CONFIG, MessagerDefaultConfig } from './messager.config';\r\nimport { FarrisDefaultFocusDirective } from './farris-default-focus.directive';\r\n\r\n\r\n@NgModule({\r\n    imports: [\r\n        CommonModule,\r\n        FormsModule,\r\n        FarrisCommonModule.forRoot(),\r\n        // FarrisFormsModule,\r\n        LocaleModule,\r\n        ModalModule.forRoot()\r\n    ],\r\n    declarations: [\r\n        FarrisDefaultFocusDirective,\r\n        MessagerComponent\r\n    ],\r\n    entryComponents: [\r\n        MessagerComponent\r\n    ]\r\n})\r\nexport class MessagerModule {\r\n    static forRoot(config?: MessagerConfig): ModuleWithProviders {\r\n        return {\r\n            ngModule: MessagerModule,\r\n            providers: [\r\n                {provide: MESSAGER_DEFAULT_CONFIG, useValue: config || MessagerDefaultConfig },\r\n                MessagerService\r\n            ]\r\n        };\r\n    }\r\n}\r\n"]}