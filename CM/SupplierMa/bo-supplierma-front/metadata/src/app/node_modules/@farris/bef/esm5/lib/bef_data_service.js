/**
 * @fileoverview added by tsickle
 * Generated from: lib/bef_data_service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { HttpClient } from '@angular/common/http';
import { of, zip } from 'rxjs';
import { tap, map, switchMap } from 'rxjs/operators';
import { EventBus, AppContext, DataChangeType, DataTypeInfoUtil, ViewModel, ExpressionUtil } from '@farris/devkit';
import { FrameworkSessionService } from './framework_session_service';
import { BefRestService } from './bef_rest_service';
import { BE_SERVER_URI_TOKEN } from './tokens';
import { BefProxyUtil } from './bef_proxy_util';
import { EntityUtil } from './entity_util';
import { BefDataPathUtil } from './bef_data_path_util';
/**
 * Bef数据访问服务
 * \@todo：
 * 1、临时将BefRepository相关代码转移到该类中；
 * 2、进一步明确职责，调整结构
 * @template T
 */
// tslint:disable: no-string-literal
var /**
 * Bef数据访问服务
 * \@todo：
 * 1、临时将BefRepository相关代码转移到该类中；
 * 2、进一步明确职责，调整结构
 * @template T
 */
// tslint:disable: no-string-literal
BefDataService = /** @class */ (function () {
    /**
     * 构造函数
     */
    function BefDataService(injector, repository) {
        this.injector = injector;
        this.repository = repository;
        /** @type {?} */
        var frmSessionService = injector.get(FrameworkSessionService);
        /** @type {?} */
        var httpClient = injector.get(HttpClient);
        /** @type {?} */
        var serverUri = injector.get(BE_SERVER_URI_TOKEN);
        // 创建BefRestService实例
        /** @type {?} */
        var restBaseUri = serverUri + "/" + this.repository.apiUri;
        /** @type {?} */
        var eventBus = injector.get(EventBus);
        this.restService = new BefRestService(httpClient, restBaseUri, frmSessionService, this.repository, eventBus);
        this.appContext = injector.get(AppContext);
    }
    Object.defineProperty(BefDataService.prototype, "restProxy", {
        /**
         * BefRest代理
         */
        get: /**
         * BefRest代理
         * @return {?}
         */
        function () {
            return this.repository.restService.proxy;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * 获取实体集合
     */
    /**
     * 获取实体集合
     * @param {?} filter
     * @param {?} sort
     * @param {?} pageSize
     * @param {?} pageIndex
     * @return {?}
     */
    BefDataService.prototype.getList = /**
     * 获取实体集合
     * @param {?} filter
     * @param {?} sort
     * @param {?} pageSize
     * @param {?} pageIndex
     * @return {?}
     */
    function (filter, sort, pageSize, pageIndex) {
        var _this = this;
        if (pageSize !== 0) {
            pageSize = pageSize || this.repository.entityCollection.pageSize;
            pageIndex = pageIndex || this.repository.entityCollection.pageIndex;
        }
        /** @type {?} */
        var entityFilter = this.buildEntityFilter(filter, sort, pageSize, pageIndex);
        /** @type {?} */
        var requestInfo = this.restService.buildRequestInfo();
        /** @type {?} */
        var filter$ = this.restProxy.extendQuery(entityFilter, requestInfo);
        return filter$.pipe(map((/**
         * @param {?} responseInfo
         * @return {?}
         */
        function (responseInfo) {
            /** @type {?} */
            var queryResult = (/** @type {?} */ (responseInfo.returnValue));
            /** @type {?} */
            var listData = queryResult.result;
            /** @type {?} */
            var entities = [];
            listData.forEach((/**
             * @param {?} data
             * @return {?}
             */
            function (data) {
                /** @type {?} */
                var entity = _this.repository.buildEntity(data);
                EntityUtil.appendInitialData(entity, data);
                entities.push(entity);
            }));
            // BindingList r95，分页变更集取消，导致设置分页信息后不会触发变更事件，所以将加载数据放到后面
            /** @type {?} */
            var serverPaginationInfo = (/** @type {?} */ (queryResult.pagination));
            if (!!serverPaginationInfo && Object.keys(serverPaginationInfo).length > 0) {
                var pageSize_1 = serverPaginationInfo.pageSize, pageIndex_1 = serverPaginationInfo.pageIndex, totalCount = serverPaginationInfo.totalCount;
                // 处理主表分页信息
                _this.repository.entityCollection.updatePaginationInfoByPath('/', { pageIndex: pageIndex_1, pageSize: pageSize_1, totalCount: totalCount });
            }
            else {
                _this.repository.entityCollection.updatePaginationInfoByPath('/', { pageIndex: 1, pageSize: 0, totalCount: entities.length });
            }
            _this.repository.entityCollection.loadEntities(entities);
            return entities;
        })));
    };
    /**
     * 过滤数据
     * @param filter 过滤条件
     * @param sort 排序条件
     * @param pageSize 分页大小
     * @param pageIndex 当前分页
     */
    /**
     * 过滤数据
     * @param {?} filter 过滤条件
     * @param {?} sort 排序条件
     * @param {?} pageSize 分页大小
     * @param {?} pageIndex 当前分页
     * @return {?}
     */
    BefDataService.prototype.filter = /**
     * 过滤数据
     * @param {?} filter 过滤条件
     * @param {?} sort 排序条件
     * @param {?} pageSize 分页大小
     * @param {?} pageIndex 当前分页
     * @return {?}
     */
    function (filter, sort, pageSize, pageIndex) {
        var _this = this;
        if (pageSize !== 0) {
            pageSize = pageSize || this.repository.entityCollection.pageSize;
            pageIndex = pageIndex || this.repository.entityCollection.pageIndex;
        }
        /** @type {?} */
        var entityFilter = this.buildEntityFilter(filter, sort, pageSize, pageIndex);
        /** @type {?} */
        var requestInfo = this.restService.buildRequestInfo();
        /** @type {?} */
        var filter$ = this.restProxy.filter(entityFilter, requestInfo);
        return filter$.pipe(map((/**
         * @param {?} responseInfo
         * @return {?}
         */
        function (responseInfo) {
            /** @type {?} */
            var queryResult = (/** @type {?} */ (responseInfo.returnValue));
            /** @type {?} */
            var listData = queryResult.result;
            /** @type {?} */
            var entities = [];
            listData.forEach((/**
             * @param {?} data
             * @return {?}
             */
            function (data) {
                /** @type {?} */
                var entity = _this.repository.buildEntity(data);
                EntityUtil.appendInitialData(entity, data);
                entities.push(entity);
            }));
            // BindingList r95，分页变更集取消，导致设置分页信息后不会触发变更事件，所以将加载数据放到后面
            /** @type {?} */
            var serverPaginationInfo = (/** @type {?} */ (queryResult.pagination));
            if (!!serverPaginationInfo && Object.keys(serverPaginationInfo).length > 0) {
                var pageSize_2 = serverPaginationInfo.pageSize, pageIndex_2 = serverPaginationInfo.pageIndex, totalCount = serverPaginationInfo.totalCount;
                // 处理主表分页信息
                _this.repository.entityCollection.updatePaginationInfoByPath('/', { pageIndex: pageIndex_2, pageSize: pageSize_2, totalCount: totalCount });
            }
            else {
                _this.repository.entityCollection.updatePaginationInfoByPath('/', { pageIndex: 1, pageSize: 0, totalCount: entities.length });
            }
            _this.repository.entityCollection.loadEntities(entities);
            return entities;
        })));
    };
    /**
     * 构造EntityFilter
     */
    /**
     * 构造EntityFilter
     * @private
     * @param {?} filter
     * @param {?} sort
     * @param {?} pageSize
     * @param {?} pageIndex
     * @return {?}
     */
    BefDataService.prototype.buildEntityFilter = /**
     * 构造EntityFilter
     * @private
     * @param {?} filter
     * @param {?} sort
     * @param {?} pageSize
     * @param {?} pageIndex
     * @return {?}
     */
    function (filter, sort, pageSize, pageIndex) {
        // @todo：临时兼容老代码，降低改动带来的风险
        if (!filter && !sort && !pageSize && !pageIndex) {
            return null;
        }
        // 纠正最后一个过滤条件的Relation
        if (filter && filter.length > 0) {
            filter[filter.length - 1].Relation = 0;
        }
        /** @type {?} */
        var entityFilter = {
            FilterConditions: filter,
            SortConditions: sort,
            IsUsePagination: pageSize === 0 ? false : true,
            Pagination: {
                PageIndex: pageIndex,
                PageSize: pageSize,
                PageCount: 0,
                TotalCount: 0
            }
        };
        return entityFilter;
    };
    /**
     * 获取单个实体
     * @param id id
     * @param enableChildrenPagination en
     */
    /**
     * 获取单个实体
     * @param {?} id id
     * @return {?}
     */
    BefDataService.prototype.getById = /**
     * 获取单个实体
     * @param {?} id id
     * @return {?}
     */
    function (id) {
        var _this = this;
        /** @type {?} */
        var requestInfo = this.restService.buildRequestInfo();
        /** @type {?} */
        var retrieveParam = this.buildRetrieveParam();
        if (retrieveParam) {
            return this.getEntityById(id);
        }
        /** @type {?} */
        var retrieve$ = this.restService.extendRetrieve(id, requestInfo, retrieveParam);
        /** @type {?} */
        var result$ = retrieve$.pipe(map((/**
         * @param {?} responseInfo
         * @return {?}
         */
        function (responseInfo) {
            /** @type {?} */
            var entityData = responseInfo.returnValue;
            /** @type {?} */
            var entity = _this.repository.buildEntity(entityData);
            _this.repository.entityCollection.loadEntities([entity]);
            return entity;
        })));
        return result$;
    };
    /**
     * @param {?} id
     * @return {?}
     */
    BefDataService.prototype.getEntityById = /**
     * @param {?} id
     * @return {?}
     */
    function (id) {
        var _this = this;
        // 获取所有分页信息
        /** @type {?} */
        var requestInfo = this.restService.buildRequestInfo();
        // 构造分页信息
        /** @type {?} */
        var retrieveParam = this.buildRetrieveParam();
        /** @type {?} */
        var retrieve$ = this.restService.serviceRetrieve(id, retrieveParam, requestInfo);
        /** @type {?} */
        var result$ = retrieve$.pipe(map((/**
         * @param {?} responseInfo
         * @return {?}
         */
        function (responseInfo) {
            /** @type {?} */
            var returnValue = responseInfo.returnValue || {};
            /** @type {?} */
            var entityData = returnValue.result;
            /** @type {?} */
            var serverPaginationInfo = returnValue.pagination;
            _this.updatePagination(serverPaginationInfo);
            /** @type {?} */
            var entity = _this.repository.buildEntity(entityData);
            _this.repository.entityCollection.loadEntities([entity]);
            return entity;
        })));
        return result$;
    };
    /**
     * ['id:xxx', 'chil1s', 'id:xxx', 'grand1s']
     * 分页查询从表/从从表数据
     * 绑定路径格式为['主表主键:主表主键值','child1s','id:从表主键值']
     * @param paths 通用路径
     * @param pageIndex 页码
     * @param pageSize 分页大小
     * @param filter 过滤条件
     * @param sort 排序
     */
    /**
     * ['id:xxx', 'chil1s', 'id:xxx', 'grand1s']
     * 分页查询从表/从从表数据
     * 绑定路径格式为['主表主键:主表主键值','child1s','id:从表主键值']
     * @param {?} paths 通用路径
     * @param {?} pageIndex 页码
     * @param {?} pageSize 分页大小
     * @param {?=} filter 过滤条件
     * @param {?=} sort 排序
     * @return {?}
     */
    BefDataService.prototype.queryChild = /**
     * ['id:xxx', 'chil1s', 'id:xxx', 'grand1s']
     * 分页查询从表/从从表数据
     * 绑定路径格式为['主表主键:主表主键值','child1s','id:从表主键值']
     * @param {?} paths 通用路径
     * @param {?} pageIndex 页码
     * @param {?} pageSize 分页大小
     * @param {?=} filter 过滤条件
     * @param {?=} sort 排序
     * @return {?}
     */
    function (paths, pageIndex, pageSize, filter, sort) {
        var _this = this;
        /** @type {?} */
        var requestInfo = this.restService.buildRequestInfo();
        /** @type {?} */
        var nodeCodes = BefDataPathUtil.convertPathsToNodeCodes(paths);
        /** @type {?} */
        var entityCodes = nodeCodes.map((/**
         * @param {?} node
         * @return {?}
         */
        function (node) { return node.substring(0, node.length - 1); }));
        /** @type {?} */
        var entityName = entityCodes[entityCodes.length - 1];
        // 查询对象可能为从表或从从表
        /** @type {?} */
        var pagination = this.repository.entityCollection.getPaginationConfigByPath("/" + entityName);
        var _a = (pagination || {}).pageSize, ps = _a === void 0 ? 0 : _a;
        /** @type {?} */
        var viewModel = this.injector.get(ViewModel, null);
        /** @type {?} */
        var forceQueryChild = false;
        if (viewModel) {
            forceQueryChild = viewModel.frameContext.appContext.params.get('forceQueryChild') || false;
        }
        if (ps == 0 && !forceQueryChild) {
            return of(null);
        }
        /** @type {?} */
        var ids = BefDataPathUtil.convertPathsToIds(paths);
        /** @type {?} */
        var parentId = ids[ids.length - 1];
        /** @type {?} */
        var params = {
            nodeCodes: entityCodes,
            ids: ids,
            pagination: {
                pageIndex: pageIndex,
                pageSize: pageSize
            },
            requestInfo: requestInfo
        };
        /** @type {?} */
        var request$ = this.restService.queryChild(params);
        return request$.pipe(map((/**
         * @param {?} response
         * @return {?}
         */
        function (response) {
            /** @type {?} */
            var returnValue = response.returnValue;
            if (!returnValue) {
                return null;
            }
            var _a = returnValue.result, result = _a === void 0 ? [] : _a, _b = returnValue.pagination, pagination = _b === void 0 ? {} : _b;
            /** @type {?} */
            var commonPaths = paths.map((/**
             * @param {?} path
             * @param {?} index
             * @return {?}
             */
            function (path, index) {
                if (path.includes(':') && index % 2 === 0) {
                    return path.split(':')[1];
                }
                return path;
            }));
            /** @type {?} */
            var entities = _this.repository.entityManager.createEntitiesByPath("/" + commonPaths.join('/'), result);
            _this.repository.entityCollection.resetEntities(paths, entities);
            // 更新分页信息
            _this.repository.entityCollection.setPaginationConfigByPath("/" + entityName + "_" + parentId, pagination);
        })));
    };
    /**
     * 构造子表分页信息
     */
    /**
     * 构造子表分页信息
     * @private
     * @return {?}
     */
    BefDataService.prototype.buildChildrenPagination = /**
     * 构造子表分页信息
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var paginationInfo = this.repository.entityCollection.getPaginationConfigByPath('/');
        /** @type {?} */
        var childPaginationInfo = {};
        /** @type {?} */
        var childrenEntityCodes = [];
        DataTypeInfoUtil.getChildrenNodeCodes(this.repository.entityTypeInfo, childrenEntityCodes);
        // 实体无子表
        if (!childrenEntityCodes || childrenEntityCodes.length < 1) {
            return null;
        }
        Object.keys(paginationInfo).forEach((/**
         * @param {?} key
         * @return {?}
         */
        function (key) {
            /** @type {?} */
            var value = paginationInfo[key];
            if (typeof value === 'object') {
                /** @type {?} */
                var entityCode = key && key.includes('_') && key.split('_')[0] || null;
                if (!(entityCode && childrenEntityCodes.includes(entityCode + "s"))) {
                    childPaginationInfo[key] = value;
                }
            }
        }));
        return childPaginationInfo;
    };
    /**
     * 更新分页配置信息
     * @param paginationInfo 服务器分页信息
     */
    /**
     * 更新分页配置信息
     * @private
     * @param {?} paginationInfo 服务器分页信息
     * @return {?}
     */
    BefDataService.prototype.updatePagination = /**
     * 更新分页配置信息
     * @private
     * @param {?} paginationInfo 服务器分页信息
     * @return {?}
     */
    function (paginationInfo) {
        var _this = this;
        if (!paginationInfo) {
            return;
        }
        /** @type {?} */
        var childrenEntityCodes = [];
        DataTypeInfoUtil.getChildrenNodeCodes(this.repository.entityTypeInfo, childrenEntityCodes);
        childrenEntityCodes = childrenEntityCodes.map((/**
         * @param {?} item
         * @return {?}
         */
        function (item) { return item.substr(0, item.length - 1); }));
        if (!paginationInfo || Object.keys(paginationInfo).length < 1) {
            if (childrenEntityCodes && childrenEntityCodes.length > 0) {
                childrenEntityCodes.forEach((/**
                 * @param {?} nodeCode
                 * @return {?}
                 */
                function (nodeCode) {
                    /** @type {?} */
                    var original = _this.repository.entityCollection.getPaginationConfigByPath("/" + nodeCode);
                    if (original) {
                        original.pageIndex = 1;
                        original.total = 0;
                        _this.repository.entityCollection.setPaginationConfigByPath("/" + nodeCode, original);
                    }
                }));
            }
            return;
        }
        Object.keys(paginationInfo).forEach((/**
         * @param {?} key
         * @return {?}
         */
        function (key) {
            // const entityName = childrenEntityCodes.find(item => key.startsWith(`${item}_`));
            _this.repository.entityCollection.setPaginationConfigByPath("/" + key, paginationInfo[key]);
        }));
        // childrenEntityCodes.forEach((nodeCode: string) => {
        //   // 确认后端返回的分页信息中是否包含当前实体的分页信息，如果不包含则将index置为1、总条数置为0
        //   // 获取该实体对应到分页信息中key
        //   const key = Object.keys(paginationInfo).find((key: string) => key.startsWith(`${nodeCode}_`));
        //   // 分页中包含当前实体的分页信息
        //   if (key) {
        //     // paginationInfo[key].total = paginationInfo[key].totalCount;
        //     this.repository.entityCollection.setPaginationConfigByPath(`/${key}`, paginationInfo[key]);
        //   } else {
        //     // TODO: 需确认是否必须设置空分页信息
        //     // const original = this.repository.entityCollection.getPaginationConfigByPath(`/${nodeCode}`);
        //     // if (original) {
        //     //   original.pageIndex = 1;
        //     //   original.total = 0;
        //     //   this.repository.entityCollection.setPaginationConfigByPath(`/${nodeCode}`, original);
        //     // }
        //   }
        // });
    };
    /**
     * 构造retrieve分页信息
     * @description 该请求不需要携带parentIds参数，只有切换从从表时才需要使用添加parentIds参数
     */
    /**
     * 构造retrieve分页信息
     * \@description 该请求不需要携带parentIds参数，只有切换从从表时才需要使用添加parentIds参数
     * @private
     * @return {?}
     */
    BefDataService.prototype.buildRetrieveParam = /**
     * 构造retrieve分页信息
     * \@description 该请求不需要携带parentIds参数，只有切换从从表时才需要使用添加parentIds参数
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var childPaginationInfo = this.buildChildrenPagination();
        if (!childPaginationInfo || Object.keys(childPaginationInfo).length < 1) {
            return null;
        }
        /** @type {?} */
        var retrieveParam = { filters: {}, parentIds: {} };
        /** @type {?} */
        var childrenEntityCodes = [];
        ExpressionUtil.getChildrenEntityPaths(this.repository.entityTypeInfo, childrenEntityCodes);
        Object.keys(childPaginationInfo).forEach((/**
         * @param {?} typeName
         * @return {?}
         */
        function (typeName) {
            /** @type {?} */
            var entity = childPaginationInfo[typeName];
            /** @type {?} */
            var pageIndex = entity.pageIndex || 1;
            retrieveParam.filters[typeName] = { pagination: { pageSize: entity.pageSize || 0, pageIndex: pageIndex } };
            // if (this.isChildrenTable(typeName)) {
            //   retrieveParam.parentIds[typeName] = this.getId(typeName, pageIndex);
            // }
        }));
        return retrieveParam;
    };
    /*
    private getId(nodeCode: string, pageIndex: number): string {
      const viewModel = this.injector.get<ViewModel>(ViewModel, null);
      const { pageIndex: originalPageIndex = 1 } = this.repository.entityCollection.getPaginationConfigByPath(`/${nodeCode}`) || {};
      if (pageIndex !== originalPageIndex) {
        return null;
      }
      if (viewModel) {
        const bindingList = viewModel.bindingData.getValue([`${nodeCode}s`]) as BindingList;
        if (bindingList && bindingList.currentId) {
          return bindingList.currentId;
        }
      }
      return null;
    }
    private isChildrenTable(nodeCode: string) {
      let childrenEntityCodes: any[] = [];
      nodeCode += 's';
      ExpressionUtil.getChildrenEntityPaths(this.repository.entityTypeInfo, childrenEntityCodes);
      if (childrenEntityCodes && childrenEntityCodes.length > 0) {
        const index = childrenEntityCodes.findIndex((paths: string[]) => paths.length === 1 && paths[0] === nodeCode);
        return index !== -1;
      }
      return false;
    }*/
    /**
     * 更新并对实体加锁
     * @param id 实体id
     */
    /*
      private getId(nodeCode: string, pageIndex: number): string {
        const viewModel = this.injector.get<ViewModel>(ViewModel, null);
        const { pageIndex: originalPageIndex = 1 } = this.repository.entityCollection.getPaginationConfigByPath(`/${nodeCode}`) || {};
        if (pageIndex !== originalPageIndex) {
          return null;
        }
        if (viewModel) {
          const bindingList = viewModel.bindingData.getValue([`${nodeCode}s`]) as BindingList;
          if (bindingList && bindingList.currentId) {
            return bindingList.currentId;
          }
        }
        return null;
      }
      private isChildrenTable(nodeCode: string) {
        let childrenEntityCodes: any[] = [];
        nodeCode += 's';
        ExpressionUtil.getChildrenEntityPaths(this.repository.entityTypeInfo, childrenEntityCodes);
        if (childrenEntityCodes && childrenEntityCodes.length > 0) {
          const index = childrenEntityCodes.findIndex((paths: string[]) => paths.length === 1 && paths[0] === nodeCode);
          return index !== -1;
        }
        return false;
      }*/
    /**
     * 更新并对实体加锁
     * @param {?} id 实体id
     * @return {?}
     */
    BefDataService.prototype.editById = /*
      private getId(nodeCode: string, pageIndex: number): string {
        const viewModel = this.injector.get<ViewModel>(ViewModel, null);
        const { pageIndex: originalPageIndex = 1 } = this.repository.entityCollection.getPaginationConfigByPath(`/${nodeCode}`) || {};
        if (pageIndex !== originalPageIndex) {
          return null;
        }
        if (viewModel) {
          const bindingList = viewModel.bindingData.getValue([`${nodeCode}s`]) as BindingList;
          if (bindingList && bindingList.currentId) {
            return bindingList.currentId;
          }
        }
        return null;
      }
      private isChildrenTable(nodeCode: string) {
        let childrenEntityCodes: any[] = [];
        nodeCode += 's';
        ExpressionUtil.getChildrenEntityPaths(this.repository.entityTypeInfo, childrenEntityCodes);
        if (childrenEntityCodes && childrenEntityCodes.length > 0) {
          const index = childrenEntityCodes.findIndex((paths: string[]) => paths.length === 1 && paths[0] === nodeCode);
          return index !== -1;
        }
        return false;
      }*/
    /**
     * 更新并对实体加锁
     * @param {?} id 实体id
     * @return {?}
     */
    function (id) {
        var _this = this;
        /** @type {?} */
        var entity = this.repository.entityCollection.getEntityById(id);
        if (!entity) {
            return of(null);
        }
        /** @type {?} */
        var requestInfo = BefProxyUtil.buildRequestInfo(this.repository);
        /** @type {?} */
        var retrieve$ = this.restProxy.edit(id, requestInfo);
        /** @type {?} */
        var result$ = retrieve$.pipe(map((/**
         * @param {?} responseInfo
         * @return {?}
         */
        function (responseInfo) {
            /** @type {?} */
            var entityData = responseInfo.returnValue.data;
            /** @type {?} */
            var entityToUpdate = _this.repository.entityCollection.getEntityById(id);
            if (entityToUpdate && entityData) {
                _this.reloadEntityData(entityToUpdate, entityData);
            }
            return entityToUpdate;
        })));
        return result$;
    };
    /**
     * 根据id更新实体
     * @param id 实体id
     */
    /**
     * 根据id更新实体
     * @param {?} id 实体id
     * @return {?}
     */
    BefDataService.prototype.updateById = /**
     * 根据id更新实体
     * @param {?} id 实体id
     * @return {?}
     */
    function (id) {
        var _this = this;
        // 如果要更新的实体不存在，返回一个null流；
        // @todo：返回empty()还是null流，为了不影响现有行为，临时返回null流。
        /** @type {?} */
        var entity = this.repository.entityCollection.getEntityById(id);
        if (!entity) {
            return of(null);
        }
        /** @type {?} */
        var requestInfo = this.restService.buildRequestInfo();
        /** @type {?} */
        var retrieveParam = this.buildRetrieveParam();
        if (retrieveParam) {
            return this.updateEntityById(id);
        }
        /** @type {?} */
        var retrieve$ = this.restService.extendRetrieve(id, requestInfo, retrieveParam);
        /** @type {?} */
        var result$ = retrieve$.pipe(map((/**
         * @param {?} responseInfo
         * @return {?}
         */
        function (responseInfo) {
            /** @type {?} */
            var entityData = responseInfo.returnValue;
            /** @type {?} */
            var entityToUpdate = _this.repository.entityCollection.getEntityById(id);
            _this.reloadEntityData(entityToUpdate, entityData);
            return entityToUpdate;
        })));
        return result$;
    };
    /**
     * 根据id更新实体
     * @param id 实体id
     */
    /**
     * 根据id更新实体
     * @param {?} id 实体id
     * @return {?}
     */
    BefDataService.prototype.updateEntityById = /**
     * 根据id更新实体
     * @param {?} id 实体id
     * @return {?}
     */
    function (id) {
        var _this = this;
        // 获取所有分页信息
        /** @type {?} */
        var requestInfo = this.restService.buildRequestInfo();
        // 构造分页信息
        /** @type {?} */
        var retrieveParam = this.buildRetrieveParam();
        /** @type {?} */
        var retrieve$ = this.restService.serviceRetrieve(id, retrieveParam, requestInfo);
        /** @type {?} */
        var result$ = retrieve$.pipe(map((/**
         * @param {?} responseInfo
         * @return {?}
         */
        function (responseInfo) {
            /** @type {?} */
            var returnValue = responseInfo.returnValue || {};
            /** @type {?} */
            var entityData = returnValue.result;
            /** @type {?} */
            var serverPaginationInfo = returnValue.pagination;
            _this.updatePagination(serverPaginationInfo);
            /** @type {?} */
            var entityToUpdate = _this.repository.entityCollection.getEntityById(id);
            _this.reloadEntityData(entityToUpdate, entityData);
            return entityToUpdate;
        })));
        return result$;
    };
    /**
     * 重新加载实体数据
     * @param id 要重载的实体id
     * @param entityData 要重载的数据
     * @todo：
     * 1、根本上应该在重新load数据的时候，只发送根节点的一次Load变更；
     * 2、考虑到稳定性和改动量，暂时采取此过渡方案，重构Entity时彻底解决。
     */
    /**
     * 重新加载实体数据
     * \@todo：
     * 1、根本上应该在重新load数据的时候，只发送根节点的一次Load变更；
     * 2、考虑到稳定性和改动量，暂时采取此过渡方案，重构Entity时彻底解决。
     * @private
     * @param {?} entity
     * @param {?} entityData 要重载的数据
     * @return {?}
     */
    BefDataService.prototype.reloadEntityData = /**
     * 重新加载实体数据
     * \@todo：
     * 1、根本上应该在重新load数据的时候，只发送根节点的一次Load变更；
     * 2、考虑到稳定性和改动量，暂时采取此过渡方案，重构Entity时彻底解决。
     * @private
     * @param {?} entity
     * @param {?} entityData 要重载的数据
     * @return {?}
     */
    function (entity, entityData) {
        if (!entity) {
            return;
        }
        // 关闭变更检测
        this.appContext.changeDetectionController.detach();
        // retrieve之后已经是最新数据，移除变更
        // entity.load(entityData);
        this.repository.entityCollection.updateEntity(entity, entityData);
        // 重新加载数据不应该产生变更
        entity.changes.splice(0, entity.changes.length);
        // 重新打开变更检测
        this.appContext.changeDetectionController.reattach();
    };
    /**
     * 创建新实体，并加载
     */
    /**
     * 创建新实体，并加载
     * @param {?=} defaultValue
     * @return {?}
     */
    BefDataService.prototype.create = /**
     * 创建新实体，并加载
     * @param {?=} defaultValue
     * @return {?}
     */
    function (defaultValue) {
        var _this = this;
        /** @type {?} */
        var requestInfo = this.restService.buildRequestInfo();
        /** @type {?} */
        var result$ = this.restService.create(defaultValue, requestInfo);
        return result$.pipe(map((/**
         * @param {?} responseInfo
         * @return {?}
         */
        function (responseInfo) {
            /** @type {?} */
            var newData = responseInfo.returnValue;
            /** @type {?} */
            var newEntity = _this.repository.buildEntity(newData);
            EntityUtil.appendInitialData(newEntity, newData);
            _this.repository.entityCollection.loadEntities([newEntity], true);
            // this.repository.dataChangeHistory.addChange({ dataId: newEntity.primaryValue, changeType: DataChangeType.Add });
            return newEntity;
        })));
    };
    /**
     * 追加实体
     */
    /**
     * 追加实体
     * @param {?=} defaultValue
     * @return {?}
     */
    BefDataService.prototype.append = /**
     * 追加实体
     * @param {?=} defaultValue
     * @return {?}
     */
    function (defaultValue) {
        var _this = this;
        /** @type {?} */
        var requestInfo = this.restService.buildRequestInfo();
        /** @type {?} */
        var append$ = this.restService.create(defaultValue, requestInfo);
        return append$.pipe(map((/**
         * @param {?} responseInfo
         * @return {?}
         */
        function (responseInfo) {
            /** @type {?} */
            var newData = responseInfo.returnValue;
            /** @type {?} */
            var newEntity = _this.repository.buildEntity(newData);
            _this.repository.entityCollection.addEntity(newEntity);
            // this.repository.dataChangeHistory.addChange({ dataId: newEntity.primaryValue, changeType: DataChangeType.Add });
            return newEntity;
        })));
    };
    /**
     * 插入数据
     * @param position 数据插入位置
     * @param defaultValue 默认值
     */
    /**
     * 插入数据
     * @param {?} position 数据插入位置
     * @param {?=} defaultValue 默认值
     * @return {?}
     */
    BefDataService.prototype.insert = /**
     * 插入数据
     * @param {?} position 数据插入位置
     * @param {?=} defaultValue 默认值
     * @return {?}
     */
    function (position, defaultValue) {
        var _this = this;
        /** @type {?} */
        var requestInfo = this.buildRequestInfo();
        /** @type {?} */
        var insert$ = this.restProxy.create(defaultValue, requestInfo);
        return insert$.pipe(map((/**
         * @param {?} responseInfo
         * @return {?}
         */
        function (responseInfo) {
            /** @type {?} */
            var newData = responseInfo.returnValue;
            /** @type {?} */
            var newEntity = _this.repository.buildEntity(newData);
            _this.repository.entityCollection.insertEntity(newEntity, position);
            return newEntity;
        })));
    };
    /**
     * 创建子实体，并追加
     * @param fpath 父路径，格式形如：/1/edus（从表）或/1/edus/2/grades（从从表）
     */
    /**
     * 创建子实体，并追加
     * @param {?} fpath 父路径，格式形如：/1/edus（从表）或/1/edus/2/grades（从从表）
     * @return {?}
     */
    BefDataService.prototype.appendByPath = /**
     * 创建子实体，并追加
     * @param {?} fpath 父路径，格式形如：/1/edus（从表）或/1/edus/2/grades（从从表）
     * @return {?}
     */
    function (fpath) {
        var _this = this;
        /** @type {?} */
        var requestInfo = this.restService.buildRequestInfo();
        /** @type {?} */
        var append$ = this.restService.createByPath(fpath, requestInfo);
        return append$.pipe(map((/**
         * @param {?} responseInfo
         * @return {?}
         */
        function (responseInfo) {
            /** @type {?} */
            var newData = responseInfo.returnValue;
            /** @type {?} */
            var newEntity = _this.repository.entityManager.appendEntityByPath(fpath, newData, newData);
            return newEntity;
        })));
    };
    /**
     * 创建子实体并插入到指定位置
     * @param fpath 父路径
     * @param position 数据插入位置
     */
    /**
     * 创建子实体并插入到指定位置
     * @param {?} fpath 父路径
     * @param {?} position 数据插入位置
     * @return {?}
     */
    BefDataService.prototype.insertByPath = /**
     * 创建子实体并插入到指定位置
     * @param {?} fpath 父路径
     * @param {?} position 数据插入位置
     * @return {?}
     */
    function (fpath, position) {
        var _this = this;
        /** @type {?} */
        var requestInfo = this.buildRequestInfo();
        /** @type {?} */
        var insert$ = this.restProxy.createByPath(fpath, requestInfo);
        return insert$.pipe(map((/**
         * @param {?} responseInfo
         * @return {?}
         */
        function (responseInfo) {
            /** @type {?} */
            var newData = responseInfo.returnValue;
            /** @type {?} */
            var newEntity = _this.repository.entityManager.insertEntityByPath(fpath, newData, newData, position);
            return newEntity;
        })));
    };
    /**
     * 根据id删除实体
     * @param id 内码
     */
    /**
     * 根据id删除实体
     * @param {?} id 内码
     * @param {?=} ifSave
     * @return {?}
     */
    BefDataService.prototype.removeById = /**
     * 根据id删除实体
     * @param {?} id 内码
     * @param {?=} ifSave
     * @return {?}
     */
    function (id, ifSave) {
        var _this = this;
        ifSave = (ifSave === undefined) ? true : ifSave;
        /** @type {?} */
        var requestInfo = BefProxyUtil.buildRequestInfo(this.repository);
        /** @type {?} */
        var delete$;
        if (ifSave) {
            delete$ = this.restProxy.deleteAndSave(id, requestInfo);
            return delete$.pipe(switchMap((/**
             * @return {?}
             */
            function () {
                _this.repository.entityCollection.removeEntityById(id);
                return of(true);
            })));
        }
        else {
            delete$ = this.restService.extendDelete(id, requestInfo);
            return delete$.pipe(switchMap((/**
             * @return {?}
             */
            function () {
                _this.repository.entityCollection.removeEntityById(id);
                _this.repository.dataChangeHistory.addChange({ dataId: id, changeType: DataChangeType.Delete });
                return of(true);
            })));
        }
    };
    /**
     * 删除并保存
     * @param id 要删除的实体id
     */
    /**
     * 删除并保存
     * @param {?} id 要删除的实体id
     * @return {?}
     */
    BefDataService.prototype.removeAndSaveById = /**
     * 删除并保存
     * @param {?} id 要删除的实体id
     * @return {?}
     */
    function (id) {
        var _this = this;
        /** @type {?} */
        var requestInfo = BefProxyUtil.buildRequestInfo(this.repository);
        /** @type {?} */
        var delete$ = this.restProxy.deleteAndSave(id, requestInfo);
        /** @type {?} */
        var result$ = delete$.pipe(switchMap((/**
         * @return {?}
         */
        function () {
            _this.repository.entityCollection.removeEntityById(id);
            // this.repository.dataChangeHistory.addChange({ dataId: id, changeType: DataChangeType.Delete });
            return of(true);
        })));
        return result$;
    };
    /**
     * 批量删除
     * @param id 内码
     * @param ifSave 是否保存
     */
    /**
     * 批量删除
     * @param {?} ids
     * @param {?=} ifSave 是否保存
     * @return {?}
     */
    BefDataService.prototype.removeByIds = /**
     * 批量删除
     * @param {?} ids
     * @param {?=} ifSave 是否保存
     * @return {?}
     */
    function (ids, ifSave) {
        var _this = this;
        ifSave = (ifSave === undefined) ? true : ifSave;
        // 服务器端删除
        /** @type {?} */
        var requestInfo = this.restService.buildRequestInfo();
        /** @type {?} */
        var delete$ = this.restService.extendBatchDelete(ids, requestInfo);
        // 从本地实体集合中移除
        return delete$.pipe(switchMap((/**
         * @return {?}
         */
        function () {
            if (ifSave) {
                // 执行保存
                return _this.applyChangesByIdArray(ids).pipe(tap((/**
                 * @param {?} result
                 * @return {?}
                 */
                function (result) {
                    if (result) {
                        // 从实体集合中删除
                        _this.repository.entityCollection.removeEntities((/**
                         * @param {?} value
                         * @return {?}
                         */
                        function (value) {
                            return _this.checkEntityValueExists(value, ids);
                        }));
                    }
                })));
            }
            else {
                // 从实体集合中删除
                _this.repository.entityCollection.removeEntities((/**
                 * @param {?} value
                 * @return {?}
                 */
                function (value) {
                    return _this.checkEntityValueExists(value, ids);
                }));
                if (ids && ids.length > 0) {
                    /** @type {?} */
                    var changes_1 = [];
                    ids.forEach((/**
                     * @param {?} id
                     * @return {?}
                     */
                    function (id) {
                        changes_1.push({ dataId: id, changeType: DataChangeType.Delete });
                    }));
                    _this.repository.dataChangeHistory.addChanges(changes_1);
                }
                return of(true);
            }
        })));
    };
    /**
     * 根据ids批量删除实体
     * @param ids ids
     * @param ifSave 是否保存
     */
    /**
     * 根据ids批量删除实体
     * @param {?} ids ids
     * @param {?} ifSave 是否保存
     * @return {?}
     */
    BefDataService.prototype.batchRemove = /**
     * 根据ids批量删除实体
     * @param {?} ids ids
     * @param {?} ifSave 是否保存
     * @return {?}
     */
    function (ids, ifSave) {
        var _this = this;
        /** @type {?} */
        var requestInfo = this.restService.buildRequestInfo();
        /** @type {?} */
        var delete$ = this.restService.extendBatchDeletion(ids, requestInfo);
        // 从本地实体集合中移除
        return delete$.pipe(switchMap((/**
         * @return {?}
         */
        function () {
            if (ifSave) {
                // 执行保存
                return _this.applyChangesByIdArray(ids).pipe(tap((/**
                 * @param {?} result
                 * @return {?}
                 */
                function (result) {
                    if (result) {
                        // 从实体集合中删除
                        _this.removeEntities(ids);
                    }
                })));
            }
            else {
                // 从实体集合中删除
                _this.removeEntities(ids);
                _this.addBatchRemoveHistory(ids);
                return of(true);
            }
        })));
    };
    /**
     * 添加批量删除记录到变更记录中
     * @param ids ids
     */
    /**
     * 添加批量删除记录到变更记录中
     * @private
     * @param {?} ids ids
     * @return {?}
     */
    BefDataService.prototype.addBatchRemoveHistory = /**
     * 添加批量删除记录到变更记录中
     * @private
     * @param {?} ids ids
     * @return {?}
     */
    function (ids) {
        if (ids && ids.length > 0) {
            /** @type {?} */
            var changes_2 = [];
            ids.forEach((/**
             * @param {?} id
             * @return {?}
             */
            function (id) {
                changes_2.push({ dataId: id, changeType: DataChangeType.Delete });
            }));
            this.repository.dataChangeHistory.addChanges(changes_2);
        }
    };
    /**
     * 从实体仓库中批量移除指定id的数据
     * @param ids
     */
    /**
     * 从实体仓库中批量移除指定id的数据
     * @private
     * @param {?} ids
     * @return {?}
     */
    BefDataService.prototype.removeEntities = /**
     * 从实体仓库中批量移除指定id的数据
     * @private
     * @param {?} ids
     * @return {?}
     */
    function (ids) {
        var _this = this;
        this.repository.entityCollection.removeEntities((/**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            return _this.checkEntityValueExists(value, ids);
        }));
    };
    /**
     * 检测实体的主键值是否存在于数组中，如果存在返回true
     * @param array 待遍历数组
     */
    /**
     * 检测实体的主键值是否存在于数组中，如果存在返回true
     * @private
     * @param {?} entity
     * @param {?} primaryValueArray
     * @return {?}
     */
    BefDataService.prototype.checkEntityValueExists = /**
     * 检测实体的主键值是否存在于数组中，如果存在返回true
     * @private
     * @param {?} entity
     * @param {?} primaryValueArray
     * @return {?}
     */
    function (entity, primaryValueArray) {
        /** @type {?} */
        var isExistInTargetArray = false;
        for (var i = 0; i < primaryValueArray.length; i++) {
            if (entity.primaryValue === primaryValueArray[i]) {
                isExistInTargetArray = true;
                break;
            }
        }
        return isExistInTargetArray;
    };
    /**
     * 删除子级
     * @param path 路径
     * @param id   内码
     */
    /**
     * 删除子级
     * @param {?} fpath
     * @param {?} id   内码
     * @return {?}
     */
    BefDataService.prototype.removeByPath = /**
     * 删除子级
     * @param {?} fpath
     * @param {?} id   内码
     * @return {?}
     */
    function (fpath, id) {
        var _this = this;
        // 服务器端删除
        /** @type {?} */
        var requestInfo = this.restService.buildRequestInfo();
        /** @type {?} */
        var delete$ = this.restService.extendDeletByPath(fpath, id, requestInfo);
        // 从本地实体集合中移除
        return delete$.pipe(map((/**
         * @return {?}
         */
        function () {
            _this.repository.entityManager.removeEntityByPath(fpath, id);
            _this.repository.dataChangeHistory.addChange({ fpath: fpath, dataId: id, changeType: DataChangeType.Delete });
            return true;
        })));
    };
    /**
     * 批量删除子级
     * @param fPath 路径
     * @param ids  子级id集合
     */
    /**
     * 批量删除子级
     * @param {?} fPath 路径
     * @param {?} ids  子级id集合
     * @return {?}
     */
    BefDataService.prototype.batchRemoveByPath = /**
     * 批量删除子级
     * @param {?} fPath 路径
     * @param {?} ids  子级id集合
     * @return {?}
     */
    function (fPath, ids) {
        var _this = this;
        // 服务器端删除
        /** @type {?} */
        var requestInfo = this.restService.buildRequestInfo();
        /** @type {?} */
        var delete$ = this.restService.batchDeleteByPath(fPath, ids, requestInfo);
        // 从本地实体集合中移除
        return delete$.pipe(map((/**
         * @return {?}
         */
        function () {
            /** @type {?} */
            var idArray = ids.split(',');
            if (idArray.length > 0) {
                idArray.forEach((/**
                 * @param {?} id
                 * @return {?}
                 */
                function (id) {
                    _this.repository.entityManager.removeEntityByPath(fPath, id);
                    _this.repository.dataChangeHistory.addChange({ fPath: fPath, dataId: id, changeType: DataChangeType.Delete });
                }));
            }
            return true;
        })));
    };
    /**
     * 将id对应的实体的变更提交的服务器端
     */
    /**
     * 将id对应的实体的变更提交的服务器端
     * @param {?} id
     * @return {?}
     */
    BefDataService.prototype.updateChangesById = /**
     * 将id对应的实体的变更提交的服务器端
     * @param {?} id
     * @return {?}
     */
    function (id) {
        var _this = this;
        /** @type {?} */
        var entity = this.repository.entityCollection.getEntityById(id);
        // 变更集不存在
        if (!entity.changes) {
            return of(true);
        }
        // 变更集为空
        if (entity.changes.length === 0) {
            return of(true);
        }
        /** @type {?} */
        var changeDetail = this.repository.entityManager.buildEntityChangeDetailById(id);
        /** @type {?} */
        var requestInfo = this.restService.buildRequestInfo();
        /** @type {?} */
        var update$ = this.restService.update(changeDetail, requestInfo);
        /** @type {?} */
        var result$ = update$.pipe(tap((/**
         * @return {?}
         */
        function () {
            _this.repository.entityManager.clearEntityChangesById(id);
        })), map((/**
         * @return {?}
         */
        function () {
            return true;
        })));
        return result$;
    };
    /**
     * 提交path对应实体的变更
     */
    /**
     * 提交path对应实体的变更
     * @param {?} path
     * @param {?} id
     * @return {?}
     */
    BefDataService.prototype.updateChangesByPath = /**
     * 提交path对应实体的变更
     * @param {?} path
     * @param {?} id
     * @return {?}
     */
    function (path, id) {
        throw new Error('Not Implement');
    };
    /**
     * 提交所有变更
     */
    /**
     * 提交所有变更
     * @return {?}
     */
    BefDataService.prototype.updateAllChanges = /**
     * 提交所有变更
     * @return {?}
     */
    function () {
        var _this = this;
        // 遍历实体，提交变更
        /** @type {?} */
        var updateResults = [];
        /** @type {?} */
        var entities = this.repository.entityCollection.toArray();
        if (entities.length === 0) {
            return of(true);
        }
        entities.forEach((/**
         * @param {?} entity
         * @return {?}
         */
        function (entity) {
            /** @type {?} */
            var updateResult$ = _this.updateChangesById(entity.primaryValue);
            updateResults.push(updateResult$);
        }));
        // 串联流
        /** @type {?} */
        var result$ = zip.apply(void 0, tslib_1.__spread(updateResults)).pipe(map((/**
         * @return {?}
         */
        function () {
            return true;
        })));
        return result$;
    };
    /**
     * 应用变更
     */
    /**
     * 应用变更
     * @return {?}
     */
    BefDataService.prototype.applyChanges = /**
     * 应用变更
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var requestInfo = this.restService.buildRequestInfo();
        /** @type {?} */
        var save$ = this.restService.save(requestInfo);
        /** @type {?} */
        var result$ = save$.pipe(tap((/**
         * @return {?}
         */
        function () {
            _this.repository.entityManager.clearAllEntityChanges();
            _this.repository.clearAllVariableChanges(requestInfo.variableChange);
            _this.repository.dataChangeHistory.clear();
        })), map((/**
         * @return {?}
         */
        function () {
            return true;
        })));
        return result$;
    };
    /**
     * 应用idArray对应数据的变更
     */
    /**
     * 应用idArray对应数据的变更
     * @param {?} idArray
     * @return {?}
     */
    BefDataService.prototype.applyChangesByIdArray = /**
     * 应用idArray对应数据的变更
     * @param {?} idArray
     * @return {?}
     */
    function (idArray) {
        var _this = this;
        /** @type {?} */
        var requestInfo = this.restService.buildRequestInfo();
        /** @type {?} */
        var save$ = this.restService.save(requestInfo);
        /** @type {?} */
        var result$ = save$.pipe(tap((/**
         * @return {?}
         */
        function () {
            _this.repository.entityManager.clearEntityChangesByArray(idArray);
            _this.repository.dataChangeHistory.clearByIds(idArray);
        })), map((/**
         * @return {?}
         */
        function () {
            return true;
        })));
        return result$;
    };
    /**
     * 应用id对应数据的变更
     */
    /**
     * 应用id对应数据的变更
     * @param {?} id
     * @return {?}
     */
    BefDataService.prototype.applyChangesById = /**
     * 应用id对应数据的变更
     * @param {?} id
     * @return {?}
     */
    function (id) {
        var _this = this;
        /** @type {?} */
        var requestInfo = this.restService.buildRequestInfo();
        /** @type {?} */
        var save$ = this.restService.save(requestInfo);
        /** @type {?} */
        var result$ = save$.pipe(tap((/**
         * @return {?}
         */
        function () {
            _this.repository.entityManager.clearEntityChangesById(id);
            _this.repository.dataChangeHistory.clearByIds([id]);
        })), map((/**
         * @return {?}
         */
        function () {
            return true;
        })));
        return result$;
    };
    /**
     * 取消变更
     */
    /**
     * 取消变更
     * @param {?=} options
     * @return {?}
     */
    BefDataService.prototype.cancelChanges = /**
     * 取消变更
     * @param {?=} options
     * @return {?}
     */
    function (options) {
        var _this = this;
        /** @type {?} */
        var cancel$ = this.restService.cancel(options);
        /** @type {?} */
        var result$ = cancel$.pipe(tap((/**
         * @return {?}
         */
        function () {
            _this.repository.entityManager.clearAllEntityChanges();
            _this.repository.dataChangeHistory.clear();
        })), map((/**
         * @return {?}
         */
        function () {
            return true;
        })));
        return result$;
    };
    /**
     * 批量新增从表/从从表数据
     * @param path 实体绑定路径，like 1/childs or 1/childs/11/childchilds
     * @param defaultValues 默认实体数据数组
     */
    /**
     * 批量新增从表/从从表数据
     * @param {?} path 实体绑定路径，like 1/childs or 1/childs/11/childchilds
     * @param {?} defaultValues 默认实体数据数组
     * @return {?}
     */
    BefDataService.prototype.batchAppendByPath = /**
     * 批量新增从表/从从表数据
     * @param {?} path 实体绑定路径，like 1/childs or 1/childs/11/childchilds
     * @param {?} defaultValues 默认实体数据数组
     * @return {?}
     */
    function (path, defaultValues) {
        var _this = this;
        /** @type {?} */
        var requestInfo = this.buildRequestInfo();
        /** @type {?} */
        var append$ = this.restProxy.batchAppendByPath(path, defaultValues, requestInfo);
        return append$.pipe(map((/**
         * @param {?} responseInfo
         * @return {?}
         */
        function (responseInfo) {
            /** @type {?} */
            var list = responseInfo.returnValue;
            /** @type {?} */
            var entities = _this.repository.entityManager.createEntitiesByPath(path, list);
            /** @type {?} */
            var paths = path.split('/').filter((/**
             * @param {?} p
             * @return {?}
             */
            function (p) { return p; }));
            _this.repository.entityManager.appendEntitiesByPath(paths, entities);
            return entities;
        })));
    };
    /**
     * 批量新增主表数据
     * @param defaultValues 默认实体数据数组
     */
    /**
     * 批量新增主表数据
     * @param {?} defaultValues 默认实体数据数组
     * @return {?}
     */
    BefDataService.prototype.batchAppend = /**
     * 批量新增主表数据
     * @param {?} defaultValues 默认实体数据数组
     * @return {?}
     */
    function (defaultValues) {
        var _this = this;
        /** @type {?} */
        var requestInfo = this.buildRequestInfo();
        /** @type {?} */
        var append$ = this.restProxy.batchAppend(defaultValues, requestInfo);
        return append$.pipe(map((/**
         * @param {?} responseInfo
         * @return {?}
         */
        function (responseInfo) {
            /** @type {?} */
            var list = responseInfo.returnValue;
            /** @type {?} */
            var entities = _this.repository.buildEntities(list);
            _this.repository.entityCollection.addEntities(entities);
            return entities;
        })));
    };
    /**
     * 构造变更集
     */
    /**
     * 构造变更集
     * @return {?}
     */
    BefDataService.prototype.buildRequestInfo = /**
     * 构造变更集
     * @return {?}
     */
    function () {
        /** @type {?} */
        var requestInfo = {
            dataChange: this.repository.entityManager.buildAllEntityChangeDetails(),
            variableChange: this.repository.variableManager.buildChangeDetail()
        };
        return requestInfo;
    };
    return BefDataService;
}());
if (false) {
    /**
     * 全局上下文
     * @type {?}
     * @private
     */
    BefDataService.prototype.appContext;
    /**
     * 实体仓库
     * @type {?}
     * @private
     */
    BefDataService.prototype.repository;
    /**
     * RestService实例(请使用restProxy代替)
     * @deprecated
     * @type {?}
     */
    BefDataService.prototype.restService;
    /**
     * @type {?}
     * @private
     */
    BefDataService.prototype.injector;
}
export { BefDataService };
//# sourceMappingURL=data:application/json;base64,