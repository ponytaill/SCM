/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*
 * @Author: 疯狂秀才(lucas huang)
 * @Date: 2018-11-13 14:55:34
 * @LastEditors: 疯狂秀才(Lucas Huang)
 * @LastEditTime: 2019-11-30 10:18:12
 * @Company: Inspur
 * @Version: v0.0.1
 */
import { Component, ElementRef, Renderer2, ViewChild, Input, EventEmitter, Output } from '@angular/core';
import { MessagerService } from '@farris/ui-messager';
import { LeftBracket, RighttBracket, Relation, CompareOperators, Compare, FilterRelation, ExpressValueType } from '@farris/ui-common/types';
import { FilterService } from './../services/filter.service';
export class FilterGridComponent {
    /**
     * @param {?} el
     * @param {?} render
     * @param {?} filterService
     * @param {?} messagerService
     */
    constructor(el, render, filterService, messagerService) {
        this.el = el;
        this.render = render;
        this.filterService = filterService;
        this.messagerService = messagerService;
        this.LeftBracketData = LeftBracket;
        this.RighttBracketData = RighttBracket;
        this.relationData = Relation;
        this.operators = CompareOperators;
        this.columnSizeData = [60, 50, 120, 100, 60, 120, 50, 50];
        this.groupIcon = '<i class="f-icon f-icon-lookup"></i>';
        this.conditions = [];
        this.columns = [];
        this.enableExpress = false;
        this.enableFrontExpress = false;
        this.showExpress = new EventEmitter();
        this.currentCondition = null;
        this.newCondition = {
            filterField: '',
            value: '',
            lbracket: '',
            rbracket: '',
            relation: FilterRelation.Empty,
            compare: Compare.Equal,
            expresstype: ExpressValueType.Value
        };
        this.localeService = null;
        this.localeService = this.messagerService['localeService'];
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        if (!this.fieldEditor) {
            this.fieldEditor = { type: 'select', options: {} };
        }
        this.initRelationData();
        if (!this.conditions || !this.conditions.length) {
            /** @type {?} */
            const firstCon = Object.assign({}, this.newCondition);
            this.conditions = [firstCon];
            this.changeConditionList();
        }
    }
    /**
     * @private
     * @return {?}
     */
    initRelationData() {
        if (this.localeService) {
            /** @type {?} */
            const andStr = this.localeService.getValue('filterEditor.relationValue.and');
            /** @type {?} */
            const orStr = this.localeService.getValue('filterEditor.relationValue.or');
            this.relationData = [
                { label: '', value: 0 },
                { label: andStr, value: 1 },
                { label: orStr, value: 2 }
            ];
        }
    }
    /**
     * @param {?} index
     * @return {?}
     */
    insertCondition(index) {
        /** @type {?} */
        const _newCondition = Object.assign({}, this.newCondition);
        if (index === 0) {
            this.conditions.unshift(_newCondition);
        }
        else {
            this.conditions.splice(index, 0, _newCondition);
        }
        this.changeConditionList();
    }
    /**
     * @param {?} index
     * @return {?}
     */
    removeCondition(index) {
        this.conditions.splice(index, 1);
        this.changeConditionList();
        if (this.currentCondition) {
            if (index === this.currentCondition.index) {
                this.currentCondition = null;
            }
        }
    }
    /**
     * @return {?}
     */
    onAddFilter() {
        this.conditions = [...this.conditions, Object.assign({}, this.newCondition)];
        this.changeConditionList();
    }
    /**
     * @return {?}
     */
    onClear() {
        this.messagerService.question('确认要清空当前所有条件吗？', (/**
         * @return {?}
         */
        () => {
            this.conditions = [];
            this.changeConditionList();
        }));
    }
    /**
     * @return {?}
     */
    onMoveTop() {
        if (this.currentCondition) {
            this.conditions.unshift(this.currentCondition.condition);
            this.conditions.splice(this.currentCondition.index + 1, 1);
            this.currentCondition.index = 0;
            this.changeConditionList();
        }
    }
    /**
     * @return {?}
     */
    onMovePrev() {
        if (this.currentCondition) {
            /** @type {?} */
            const index = this.currentCondition.index;
            /** @type {?} */
            const tempArr = this.conditions.splice(index, 1);
            this.conditions.splice(index - 1, 0, ...tempArr);
            this.currentCondition.index = index - 1;
            this.changeConditionList();
        }
    }
    /**
     * @return {?}
     */
    onMoveNext() {
        if (this.currentCondition) {
            /** @type {?} */
            const index = this.currentCondition.index;
            /** @type {?} */
            const tempArr = this.conditions.splice(index, 1);
            this.conditions.splice(index + 1, 0, ...tempArr);
            this.currentCondition.index = index + 1;
            this.changeConditionList();
        }
    }
    /**
     * @return {?}
     */
    onMoveBottom() {
        if (this.currentCondition) {
            this.conditions.push(this.currentCondition.condition);
            this.conditions.splice(this.currentCondition.index, 1);
            this.currentCondition.index = this.conditions.length - 1;
            this.changeConditionList();
        }
    }
    /**
     * @private
     * @return {?}
     */
    changeConditionList() {
        this.filterService.conditionsChanged.next(this.conditions);
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    selected($event) {
        // console.log($event);
        this.currentCondition = $event;
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    isSelected($event) {
        if (this.currentCondition) {
            return this.currentCondition.index === $event;
        }
        return false;
    }
    /**
     * @param {?} $event
     * @param {?} condition
     * @param {?} value
     * @return {?}
     */
    showExpressDialog($event, condition, value) {
        /** @type {?} */
        const type = condition.expresstype === 1 ? 'express' : 'frontExpress';
        this.showExpress.emit({ event: $event, condition, value, type });
    }
    /**
     * @param {?} $event
     * @param {?} condition
     * @return {?}
     */
    onComboSelectChange($event, condition) {
        if ($event) {
            const { data } = $event;
            if (data) {
                condition.filterField = data['value'];
            }
        }
    }
}
FilterGridComponent.decorators = [
    { type: Component, args: [{
                selector: 'filter-grid',
                template: "<div class=\"table-header \">\r\n    <table class=\"table table-bordered\" style=\"margin-bottom: 0\">\r\n        <colgroup>\r\n            <col *ngFor=\"let s of columnSizeData\" [style.width]=\" s + 'px'\">\r\n        </colgroup>\r\n        <thead>\r\n            <tr>\r\n                <th></th>\r\n                <th><b>{{ 'filterEditor.leftBrackets' | locale }}</b></th>\r\n                <th><b>{{ 'filterEditor.field' | locale }}</b></th>\r\n                <th><b>{{ 'filterEditor.operator' | locale }}</b></th>\r\n                <th><b>{{ 'filterEditor.valueType' | locale }}</b></th>\r\n                <th><b>{{ 'filterEditor.value' | locale }}</b></th>\r\n                <th><b>{{ 'filterEditor.rightBrackets' | locale }}</b></th>\r\n                <th><b>{{ 'filterEditor.relation' | locale }}</b></th>\r\n            </tr>\r\n        </thead>\r\n    </table>\r\n</div>\r\n<div class=\"table-body flex-fill\" style=\"overflow: hidden\" #tablebodybox>\r\n    <perfect-scrollbar [config]=\"{}\">\r\n        <table class=\"table table-bordered\" style=\"margin-bottom: 0;\">\r\n            <colgroup>\r\n                <col *ngFor=\"let s of columnSizeData\" [style.width]=\" s + 'px'\">\r\n            </colgroup>\r\n            <tbody>\r\n                <tr *ngFor=\"let condition of conditions; let index=index;\" (click)=\"selected({'index':index, 'condition': condition})\" [class.selected]=\"isSelected(index)\" >\r\n                    <td>\r\n                        <button type=\"button\" (click)=\"insertCondition(index)\" class=\"k-button k-button-icon k-flat\"><span class=\"k-icon k-i-plus\"></span></button>\r\n                        <button type=\"button\" (click)=\"removeCondition(index)\" class=\"k-button k-button-icon k-flat\"><span class=\"k-icon k-i-minus\"></span></button>\r\n                    </td>\r\n                    <td>\r\n                        <select class=\"form-control filter-select\" [(ngModel)]=\"condition.lbracket\" name=\"lbracket\">\r\n                            <option *ngFor=\"let item of LeftBracketData\" [value]=\"item\">{{ item }}</option>\r\n                        </select>\r\n                    </td>\r\n                    <td>\r\n                        <select *ngIf=\"fieldEditor.type === 'select'\" class=\"form-control filter-select\" [(ngModel)]=\"condition.filterField\" name=\"filterField\">\r\n                            <option *ngFor=\"let col of columns\" [value]=\"col.value\">{{ col.label }}</option>\r\n                        </select>\r\n\r\n                        <farris-combo-lookup *ngIf=\"fieldEditor.type === 'combo-tree'\" name=\"filterField\"\r\n                            [idField]=\"fieldEditor?.options?.idField ||'value'\"\r\n                            [textField]=\"fieldEditor?.options?.textField ||'label'\"\r\n                            [displayType]=\"'LOOKUPTREELIST'\" [useValue]=\"true\"\r\n                            [useTreeView]=\"true\"\r\n                            [columns]=\"fieldEditor?.options?.columns || []\"\r\n                            [data]=\"columns\"\r\n                            [(ngModel)]=\"condition.filterField\"\r\n                            [remoteSearch]=\"false\"\r\n                            [autoWidth]=\"fieldEditor?.options?.autoWidth\"\r\n                            [panelWidth]=\"fieldEditor?.options?.panelWidth || 200\">\r\n                        </farris-combo-lookup>\r\n\r\n\r\n                    </td>\r\n                    <td>\r\n                        <select class=\"form-control filter-select\" name=\"compare\" [(ngModel)]=\"condition.compare\">\r\n                            <option *ngFor=\"let item of operators\" [value]=\"item.value\">{{item.label}}</option>\r\n                        </select>\r\n                    </td>\r\n                    <td>\r\n                        <select class=\"form-control filter-select\" name=\"expresstype\" [(ngModel)]=\"condition.expresstype\">\r\n                            <option [value]=\"0\">{{'filterEditor.expressType.value' | locale }}</option>\r\n                            <option [value]=\"1\" *ngIf=\"enableExpress\" >{{'filterEditor.expressType.express' | locale }}</option>\r\n                            <option [value]=\"'frontExpress'\" *ngIf=\"enableFrontExpress\" >{{'filterEditor.expressType.frontExpress' | locale }}</option>\r\n                        </select>\r\n                    </td>\r\n                    <td>\r\n                        <input-group name=\"value\" [(ngModel)]=\"condition.value\" [groupText]=\"condition.expresstype == 1||condition.expresstype==='frontExpress'?groupIcon: ''\"\r\n                        (clickHandle)=\"showExpressDialog($event, condition, condition.value)\"></input-group>\r\n                    </td>\r\n                    <td>\r\n                        <select class=\"form-control filter-select\"  [(ngModel)]=\"condition.rbracket\" name=\"rbracket\">\r\n                            <option *ngFor=\"let item of RighttBracketData\" [value]=\"item\">{{ item }}</option>\r\n                        </select>\r\n                    </td>\r\n                    <td>\r\n                        <select class=\"form-control filter-select\" [(ngModel)]=\"condition.relation\" name=\"relation\">\r\n                            <option *ngFor=\"let item of relationData\" [value]=\"item.value\">{{ item.label }}</option>\r\n                        </select>\r\n                    </td>\r\n                </tr>\r\n            </tbody>\r\n        </table>\r\n    </perfect-scrollbar>\r\n</div>\r\n<div style=\"flex-shrink: 0;\">\r\n<filter-footer\r\n(addFilter)=\"onAddFilter()\"\r\n(clearFilter)=\"onClear()\"\r\n(moveTop)=\"onMoveTop()\"\r\n(movePrev)=\"onMovePrev()\"\r\n(moveNext)=\"onMoveNext()\"\r\n(moveBottom)=\"onMoveBottom()\"></filter-footer>\r\n</div>\r\n",
                styles: [`
        .filter-select { width:100%; padding-left: 0; padding-right: 0; }
        .selected { background: #c2e4ff; }
        `]
            }] }
];
/** @nocollapse */
FilterGridComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: Renderer2 },
    { type: FilterService },
    { type: MessagerService }
];
FilterGridComponent.propDecorators = {
    conditions: [{ type: Input }],
    columns: [{ type: Input }],
    enableExpress: [{ type: Input }],
    enableFrontExpress: [{ type: Input }],
    height: [{ type: Input }],
    fieldEditor: [{ type: Input }],
    showExpress: [{ type: Output }],
    tablebodybox: [{ type: ViewChild, args: ['tablebodybox',] }]
};
if (false) {
    /** @type {?} */
    FilterGridComponent.prototype.LeftBracketData;
    /** @type {?} */
    FilterGridComponent.prototype.RighttBracketData;
    /** @type {?} */
    FilterGridComponent.prototype.relationData;
    /** @type {?} */
    FilterGridComponent.prototype.operators;
    /** @type {?} */
    FilterGridComponent.prototype.columnSizeData;
    /** @type {?} */
    FilterGridComponent.prototype.groupIcon;
    /** @type {?} */
    FilterGridComponent.prototype.conditions;
    /** @type {?} */
    FilterGridComponent.prototype.columns;
    /** @type {?} */
    FilterGridComponent.prototype.enableExpress;
    /** @type {?} */
    FilterGridComponent.prototype.enableFrontExpress;
    /** @type {?} */
    FilterGridComponent.prototype.height;
    /** @type {?} */
    FilterGridComponent.prototype.fieldEditor;
    /** @type {?} */
    FilterGridComponent.prototype.showExpress;
    /** @type {?} */
    FilterGridComponent.prototype.tablebodybox;
    /** @type {?} */
    FilterGridComponent.prototype.currentCondition;
    /**
     * @type {?}
     * @private
     */
    FilterGridComponent.prototype.newCondition;
    /** @type {?} */
    FilterGridComponent.prototype.localeService;
    /**
     * @type {?}
     * @private
     */
    FilterGridComponent.prototype.el;
    /**
     * @type {?}
     * @private
     */
    FilterGridComponent.prototype.render;
    /**
     * @type {?}
     * @private
     */
    FilterGridComponent.prototype.filterService;
    /**
     * @type {?}
     * @private
     */
    FilterGridComponent.prototype.messagerService;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmlsdGVyLWdyaWQuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGZhcnJpcy91aS1maWx0ZXItZWRpdG9yLyIsInNvdXJjZXMiOlsibGliL2NvbXBvbmVudHMvZmlsdGVyLWdyaWQuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7OztBQVVBLE9BQU8sRUFBRSxTQUFTLEVBQVUsVUFBVSxFQUFFLFNBQVMsRUFBZSxTQUFTLEVBQUUsS0FBSyxFQUNsRCxZQUFZLEVBQUUsTUFBTSxFQUFhLE1BQU0sZUFBZSxDQUFDO0FBQ3JGLE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUN0RCxPQUFPLEVBQUUsV0FBVyxFQUFFLGFBQWEsRUFBRSxRQUFRLEVBQUUsZ0JBQWdCLEVBQ3ZELE9BQU8sRUFBRSxjQUFjLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSx5QkFBeUIsQ0FBQztBQUNuRixPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sOEJBQThCLENBQUM7QUFhN0QsTUFBTSxPQUFPLG1CQUFtQjs7Ozs7OztJQW1DNUIsWUFDWSxFQUFjLEVBQVUsTUFBaUIsRUFBVSxhQUE0QixFQUMvRSxlQUFnQztRQURoQyxPQUFFLEdBQUYsRUFBRSxDQUFZO1FBQVUsV0FBTSxHQUFOLE1BQU0sQ0FBVztRQUFVLGtCQUFhLEdBQWIsYUFBYSxDQUFlO1FBQy9FLG9CQUFlLEdBQWYsZUFBZSxDQUFpQjtRQXBDNUMsb0JBQWUsR0FBRyxXQUFXLENBQUM7UUFDOUIsc0JBQWlCLEdBQUcsYUFBYSxDQUFDO1FBQ2xDLGlCQUFZLEdBQUcsUUFBUSxDQUFDO1FBQ3hCLGNBQVMsR0FBRyxnQkFBZ0IsQ0FBQztRQUU3QixtQkFBYyxHQUFHLENBQUMsRUFBRSxFQUFFLEVBQUUsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEVBQUUsRUFBRSxHQUFHLEVBQUUsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDO1FBQ3JELGNBQVMsR0FBRyxzQ0FB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U0FBUyxTQUFDLGNBQWM7Ozs7SUFqQnpCLDhDQUE4Qjs7SUFDOUIsZ0RBQWtDOztJQUNsQywyQ0FBd0I7O0lBQ3hCLHdDQUE2Qjs7SUFFN0IsNkNBQXFEOztJQUNyRCx3Q0FBbUQ7O0lBRW5ELHlDQUE0Qzs7SUFDNUMsc0NBQXdEOztJQUN4RCw0Q0FBK0I7O0lBQy9CLGlEQUFvQzs7SUFDcEMscUNBQXdCOztJQUN4QiwwQ0FBcUI7O0lBRXJCLDBDQUEyQzs7SUFFM0MsMkNBQW9EOztJQUVwRCwrQ0FBdUU7Ozs7O0lBRXZFLDJDQVFFOztJQUdGLDRDQUFvQzs7Ozs7SUFHaEMsaUNBQXNCOzs7OztJQUFFLHFDQUF5Qjs7Ozs7SUFBRSw0Q0FBb0M7Ozs7O0lBQ3ZGLDhDQUF3QyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IExvY2FsZVNlcnZpY2UgfSBmcm9tICdAZmFycmlzL3VpLWxvY2FsZSc7XHJcbi8qXHJcbiAqIEBBdXRob3I6IOeWr+eLguengOaJjShsdWNhcyBodWFuZylcclxuICogQERhdGU6IDIwMTgtMTEtMTMgMTQ6NTU6MzRcclxuICogQExhc3RFZGl0b3JzOiDnlq/ni4Lnp4DmiY0oTHVjYXMgSHVhbmcpXHJcbiAqIEBMYXN0RWRpdFRpbWU6IDIwMTktMTEtMzAgMTA6MTg6MTJcclxuICogQENvbXBhbnk6IEluc3B1clxyXG4gKiBAVmVyc2lvbjogdjAuMC4xXHJcbiAqL1xyXG5cclxuaW1wb3J0IHsgQ29tcG9uZW50LCBPbkluaXQsIEVsZW1lbnRSZWYsIFJlbmRlcmVyMiwgSG9zdEJpbmRpbmcsIFZpZXdDaGlsZCwgSW5wdXQsXHJcbiAgICBPbkNoYW5nZXMsIFNpbXBsZUNoYW5nZXMsIEV2ZW50RW1pdHRlciwgT3V0cHV0LCBPcHRpb25hbCAgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgTWVzc2FnZXJTZXJ2aWNlIH0gZnJvbSAnQGZhcnJpcy91aS1tZXNzYWdlcic7XHJcbmltcG9ydCB7IExlZnRCcmFja2V0LCBSaWdodHRCcmFja2V0LCBSZWxhdGlvbiwgQ29tcGFyZU9wZXJhdG9ycywgRmlsdGVyQ29uZGl0aW9uLFxyXG4gICAgICAgIENvbXBhcmUsIEZpbHRlclJlbGF0aW9uLCBFeHByZXNzVmFsdWVUeXBlIH0gZnJvbSAnQGZhcnJpcy91aS1jb21tb24vdHlwZXMnO1xyXG5pbXBvcnQgeyBGaWx0ZXJTZXJ2aWNlIH0gZnJvbSAnLi8uLi9zZXJ2aWNlcy9maWx0ZXIuc2VydmljZSc7XHJcblxyXG5AQ29tcG9uZW50KHtcclxuICAgIHNlbGVjdG9yOiAnZmlsdGVyLWdyaWQnLFxyXG4gICAgdGVtcGxhdGVVcmw6ICcuL2ZpbHRlci1ncmlkLmNvbXBvbmVudC5odG1sJyxcclxuICAgIHN0eWxlczogW1xyXG4gICAgICAgIGBcclxuICAgICAgICAuZmlsdGVyLXNlbGVjdCB7IHdpZHRoOjEwMCU7IHBhZGRpbmctbGVmdDogMDsgcGFkZGluZy1yaWdodDogMDsgfVxyXG4gICAgICAgIC5zZWxlY3RlZCB7IGJhY2tncm91bmQ6ICNjMmU0ZmY7IH1cclxuICAgICAgICBgXHJcbiAgICBdXHJcbn0pXHJcblxyXG5leHBvcnQgY2xhc3MgRmlsdGVyR3JpZENvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCwgT25DaGFuZ2VzIHtcclxuICAgIExlZnRCcmFja2V0RGF0YSA9IExlZnRCcmFja2V0O1xyXG4gICAgUmlnaHR0QnJhY2tldERhdGEgPSBSaWdodHRCcmFja2V0O1xyXG4gICAgcmVsYXRpb25EYXRhID0gUmVsYXRpb247XHJcbiAgICBvcGVyYXRvcnMgPSBDb21wYXJlT3BlcmF0b3JzO1xyXG5cclxuICAgIGNvbHVtblNpemVEYXRhID0gWzYwLCA1MCwgMTIwLCAxMDAsIDYwLCAxMjAsIDUwLCA1MF07XHJcbiAgICBncm91cEljb24gPSAnPGkgY2xhc3M9XCJmLWljb24gZi1pY29uLWxvb2t1cFwiPjwvaT4nO1xyXG5cclxuICAgIEBJbnB1dCgpIGNvbmRpdGlvbnM6IEZpbHRlckNvbmRpdGlvbltdID0gW107XHJcbiAgICBASW5wdXQoKSBjb2x1bW5zOiB7bGFiZWw6IHN0cmluZywgdmFsdWU6IHN0cmluZ31bXSA9IFtdO1xyXG4gICAgQElucHV0KCkgZW5hYmxlRXhwcmVzcyA9IGZhbHNlO1xyXG4gICAgQElucHV0KCkgZW5hYmxlRnJvbnRFeHByZXNzID0gZmFsc2U7XHJcbiAgICBASW5wdXQoKSBoZWlnaHQ6IG51bWJlcjtcclxuICAgIEBJbnB1dCgpIGZpZWxkRWRpdG9yO1xyXG5cclxuICAgIEBPdXRwdXQoKSBzaG93RXhwcmVzcyA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcclxuXHJcbiAgICBAVmlld0NoaWxkKCd0YWJsZWJvZHlib3gnKSB0YWJsZWJvZHlib3g6IEVsZW1lbnRSZWY7XHJcblxyXG4gICAgY3VycmVudENvbmRpdGlvbjogeyBpbmRleDogbnVtYmVyLCBjb25kaXRpb246IEZpbHRlckNvbmRpdGlvbiB9ID0gbnVsbDtcclxuXHJcbiAgICBwcml2YXRlIG5ld0NvbmRpdGlvbjogRmlsdGVyQ29uZGl0aW9uID0ge1xyXG4gICAgICAgIGZpbHRlckZpZWxkOiAnJyxcclxuICAgICAgICB2YWx1ZTogJycsXHJcbiAgICAgICAgbGJyYWNrZXQ6ICcnLFxyXG4gICAgICAgIHJicmFja2V0OiAnJyxcclxuICAgICAgICByZWxhdGlvbjogRmlsdGVyUmVsYXRpb24uRW1wdHksXHJcbiAgICAgICAgY29tcGFyZTogQ29tcGFyZS5FcXVhbCxcclxuICAgICAgICBleHByZXNzdHlwZTogRXhwcmVzc1ZhbHVlVHlwZS5WYWx1ZVxyXG4gICAgfTtcclxuXHJcblxyXG4gICAgbG9jYWxlU2VydmljZTogTG9jYWxlU2VydmljZSA9IG51bGw7XHJcblxyXG4gICAgY29uc3RydWN0b3IoXHJcbiAgICAgICAgcHJpdmF0ZSBlbDogRWxlbWVudFJlZiwgcHJpdmF0ZSByZW5kZXI6IFJlbmRlcmVyMiwgcHJpdmF0ZSBmaWx0ZXJTZXJ2aWNlOiBGaWx0ZXJTZXJ2aWNlLFxyXG4gICAgICAgIHByaXZhdGUgbWVzc2FnZXJTZXJ2aWNlOiBNZXNzYWdlclNlcnZpY2UpIHtcclxuICAgICAgICAgICAgdGhpcy5sb2NhbGVTZXJ2aWNlID0gdGhpcy5tZXNzYWdlclNlcnZpY2VbJ2xvY2FsZVNlcnZpY2UnXTtcclxuICAgICAgICB9XHJcblxyXG4gICAgbmdPbkNoYW5nZXMoY2hhbmdlczogU2ltcGxlQ2hhbmdlcykge1xyXG5cclxuICAgIH1cclxuXHJcbiAgICBuZ09uSW5pdCgpIHtcclxuXHJcbiAgICAgICAgaWYgKCF0aGlzLmZpZWxkRWRpdG9yKSB7XHJcbiAgICAgICAgICAgIHRoaXMuZmllbGRFZGl0b3IgPSB7IHR5cGU6ICdzZWxlY3QnLCBvcHRpb25zOiB7fX07XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLmluaXRSZWxhdGlvbkRhdGEoKTtcclxuICAgICAgICBpZiAoIXRoaXMuY29uZGl0aW9ucyB8fCAhdGhpcy5jb25kaXRpb25zLmxlbmd0aCkge1xyXG4gICAgICAgICAgICBjb25zdCBmaXJzdENvbiA9IE9iamVjdC5hc3NpZ24oe30sIHRoaXMubmV3Q29uZGl0aW9uKTtcclxuICAgICAgICAgICAgdGhpcy5jb25kaXRpb25zID0gW2ZpcnN0Q29uXTtcclxuICAgICAgICAgICAgdGhpcy5jaGFuZ2VDb25kaXRpb25MaXN0KCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgaW5pdFJlbGF0aW9uRGF0YSgpIHtcclxuICAgICAgICBpZiAodGhpcy5sb2NhbGVTZXJ2aWNlKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGFuZFN0ciA9IHRoaXMubG9jYWxlU2VydmljZS5nZXRWYWx1ZSgnZmlsdGVyRWRpdG9yLnJlbGF0aW9uVmFsdWUuYW5kJyk7XHJcbiAgICAgICAgICAgIGNvbnN0IG9yU3RyID0gdGhpcy5sb2NhbGVTZXJ2aWNlLmdldFZhbHVlKCdmaWx0ZXJFZGl0b3IucmVsYXRpb25WYWx1ZS5vcicpO1xyXG4gICAgICAgICAgICB0aGlzLnJlbGF0aW9uRGF0YSA9IFtcclxuICAgICAgICAgICAgICAgIHsgbGFiZWw6ICcnLCB2YWx1ZTogMH0sXHJcbiAgICAgICAgICAgICAgICB7IGxhYmVsOiBhbmRTdHIsIHZhbHVlOiAxfSxcclxuICAgICAgICAgICAgICAgIHsgbGFiZWw6IG9yU3RyLCB2YWx1ZTogMn1cclxuICAgICAgICAgICAgXTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgaW5zZXJ0Q29uZGl0aW9uKGluZGV4OiBudW1iZXIpIHtcclxuICAgICAgICBjb25zdCBfbmV3Q29uZGl0aW9uID0gT2JqZWN0LmFzc2lnbih7fSwgdGhpcy5uZXdDb25kaXRpb24pO1xyXG4gICAgICAgIGlmIChpbmRleCAgPT09IDApIHtcclxuICAgICAgICAgICAgdGhpcy5jb25kaXRpb25zLnVuc2hpZnQoX25ld0NvbmRpdGlvbik7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy5jb25kaXRpb25zLnNwbGljZShpbmRleCwgMCwgX25ld0NvbmRpdGlvbik7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLmNoYW5nZUNvbmRpdGlvbkxpc3QoKTtcclxuICAgIH1cclxuXHJcbiAgICByZW1vdmVDb25kaXRpb24oaW5kZXg6IG51bWJlcikge1xyXG4gICAgICAgIHRoaXMuY29uZGl0aW9ucy5zcGxpY2UoaW5kZXgsIDEpO1xyXG4gICAgICAgIHRoaXMuY2hhbmdlQ29uZGl0aW9uTGlzdCgpO1xyXG5cclxuICAgICAgICBpZiAodGhpcy5jdXJyZW50Q29uZGl0aW9uKSB7XHJcbiAgICAgICAgICAgIGlmIChpbmRleCA9PT0gdGhpcy5jdXJyZW50Q29uZGl0aW9uLmluZGV4KSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmN1cnJlbnRDb25kaXRpb24gPSBudWxsO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIG9uQWRkRmlsdGVyKCkge1xyXG4gICAgICAgIHRoaXMuY29uZGl0aW9ucyA9IFsuLi50aGlzLmNvbmRpdGlvbnMsIE9iamVjdC5hc3NpZ24oe30sIHRoaXMubmV3Q29uZGl0aW9uKV07XHJcbiAgICAgICAgdGhpcy5jaGFuZ2VDb25kaXRpb25MaXN0KCk7XHJcbiAgICB9XHJcblxyXG4gICAgb25DbGVhcigpIHtcclxuICAgICAgICB0aGlzLm1lc3NhZ2VyU2VydmljZS5xdWVzdGlvbign56Gu6K6k6KaB5riF56m65b2T5YmN5omA5pyJ5p2h5Lu25ZCX77yfJywgKCkgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLmNvbmRpdGlvbnMgPSBbXTtcclxuICAgICAgICAgICAgdGhpcy5jaGFuZ2VDb25kaXRpb25MaXN0KCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgb25Nb3ZlVG9wKCkge1xyXG4gICAgICAgIGlmICh0aGlzLmN1cnJlbnRDb25kaXRpb24pIHtcclxuICAgICAgICAgICAgdGhpcy5jb25kaXRpb25zLnVuc2hpZnQodGhpcy5jdXJyZW50Q29uZGl0aW9uLmNvbmRpdGlvbik7XHJcbiAgICAgICAgICAgIHRoaXMuY29uZGl0aW9ucy5zcGxpY2UodGhpcy5jdXJyZW50Q29uZGl0aW9uLmluZGV4ICsgMSwgMSk7XHJcblxyXG4gICAgICAgICAgICB0aGlzLmN1cnJlbnRDb25kaXRpb24uaW5kZXggPSAwO1xyXG4gICAgICAgICAgICB0aGlzLmNoYW5nZUNvbmRpdGlvbkxpc3QoKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgb25Nb3ZlUHJldigpIHtcclxuICAgICAgICBpZiAodGhpcy5jdXJyZW50Q29uZGl0aW9uKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGluZGV4ID0gdGhpcy5jdXJyZW50Q29uZGl0aW9uLmluZGV4O1xyXG4gICAgICAgICAgICBjb25zdCB0ZW1wQXJyID0gdGhpcy5jb25kaXRpb25zLnNwbGljZShpbmRleCwgMSk7XHJcbiAgICAgICAgICAgIHRoaXMuY29uZGl0aW9ucy5zcGxpY2UoaW5kZXggLSAxLCAwLCAuLi50ZW1wQXJyKTtcclxuXHJcbiAgICAgICAgICAgIHRoaXMuY3VycmVudENvbmRpdGlvbi5pbmRleCA9IGluZGV4IC0gMTtcclxuICAgICAgICAgICAgdGhpcy5jaGFuZ2VDb25kaXRpb25MaXN0KCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgb25Nb3ZlTmV4dCgpIHtcclxuICAgICAgICBpZiAodGhpcy5jdXJyZW50Q29uZGl0aW9uKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGluZGV4ID0gdGhpcy5jdXJyZW50Q29uZGl0aW9uLmluZGV4O1xyXG4gICAgICAgICAgICBjb25zdCB0ZW1wQXJyID0gdGhpcy5jb25kaXRpb25zLnNwbGljZShpbmRleCwgMSk7XHJcbiAgICAgICAgICAgIHRoaXMuY29uZGl0aW9ucy5zcGxpY2UoaW5kZXggKyAxLCAwLCAuLi50ZW1wQXJyKTtcclxuXHJcbiAgICAgICAgICAgIHRoaXMuY3VycmVudENvbmRpdGlvbi5pbmRleCA9IGluZGV4ICsgMTtcclxuICAgICAgICAgICAgdGhpcy5jaGFuZ2VDb25kaXRpb25MaXN0KCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgb25Nb3ZlQm90dG9tKCkge1xyXG4gICAgICAgIGlmICh0aGlzLmN1cnJlbnRDb25kaXRpb24pIHtcclxuICAgICAgICAgICAgdGhpcy5jb25kaXRpb25zLnB1c2godGhpcy5jdXJyZW50Q29uZGl0aW9uLmNvbmRpdGlvbik7XHJcbiAgICAgICAgICAgIHRoaXMuY29uZGl0aW9ucy5zcGxpY2UodGhpcy5jdXJyZW50Q29uZGl0aW9uLmluZGV4LCAxKTtcclxuICAgICAgICAgICAgdGhpcy5jdXJyZW50Q29uZGl0aW9uLmluZGV4ID0gdGhpcy5jb25kaXRpb25zLmxlbmd0aCAtIDE7XHJcbiAgICAgICAgICAgIHRoaXMuY2hhbmdlQ29uZGl0aW9uTGlzdCgpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIGNoYW5nZUNvbmRpdGlvbkxpc3QoKSB7XHJcbiAgICAgICAgdGhpcy5maWx0ZXJTZXJ2aWNlLmNvbmRpdGlvbnNDaGFuZ2VkLm5leHQodGhpcy5jb25kaXRpb25zKTtcclxuICAgIH1cclxuXHJcbiAgICBzZWxlY3RlZCgkZXZlbnQpIHtcclxuICAgICAgICAvLyBjb25zb2xlLmxvZygkZXZlbnQpO1xyXG4gICAgICAgIHRoaXMuY3VycmVudENvbmRpdGlvbiA9ICRldmVudDtcclxuICAgIH1cclxuXHJcbiAgICBpc1NlbGVjdGVkKCRldmVudDogbnVtYmVyKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuY3VycmVudENvbmRpdGlvbikge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5jdXJyZW50Q29uZGl0aW9uLmluZGV4ID09PSAkZXZlbnQ7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH1cclxuXHJcbiAgICBzaG93RXhwcmVzc0RpYWxvZygkZXZlbnQsIGNvbmRpdGlvbiwgdmFsdWUpIHtcclxuICAgICAgICBjb25zdCB0eXBlID0gY29uZGl0aW9uLmV4cHJlc3N0eXBlID09PSAxID8gJ2V4cHJlc3MnIDogJ2Zyb250RXhwcmVzcyc7XHJcbiAgICAgICAgdGhpcy5zaG93RXhwcmVzcy5lbWl0KHsgZXZlbnQ6ICRldmVudCwgY29uZGl0aW9uLCB2YWx1ZSwgdHlwZSB9KTtcclxuICAgIH1cclxuXHJcbiAgICBvbkNvbWJvU2VsZWN0Q2hhbmdlKCRldmVudCwgIGNvbmRpdGlvbikge1xyXG4gICAgICAgIGlmICgkZXZlbnQpIHtcclxuICAgICAgICAgICAgY29uc3QgeyBkYXRhIH0gPSAkZXZlbnQ7XHJcbiAgICAgICAgICAgIGlmIChkYXRhKSB7XHJcbiAgICAgICAgICAgICAgICBjb25kaXRpb24uZmlsdGVyRmllbGQgPSBkYXRhWyd2YWx1ZSddO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcbiJdfQ==