import { Injectable } from '@angular/core';
import { MetadataUtil } from '../../metadata/index';
import { NG_SUBSCRIPTION } from './subscription_decorator';
class Subscription {
    /**
     * 初始化
     */
    init(frameComponent) {
        if (!frameComponent) {
            return;
        }
        return this.bindSubscription(frameComponent, null);
    }
    /**
     *  根据订阅列表进行初始化
     * @param frameComponent
     * @param ngEvents 订阅列表
     * @returns eventPipes
     */
    initWithSubscriptions(frameComponent, ngEvents) {
        if (!frameComponent) {
            return;
        }
        return this.bindSubscription(frameComponent, ngEvents);
    }
    bindSubscription(frameComponent, ngEvents) {
        const context = frameComponent.context;
        if (!context) {
            return;
        }
        const ngEventHandlerProps = ngEvents ? ngEvents : this.getNgEvents(frameComponent);
        if (!ngEventHandlerProps) {
            return;
        }
        const eventPipes = [];
        Object.keys(ngEventHandlerProps).forEach((propertyName) => {
            const ngImportEvent = ngEventHandlerProps[propertyName];
            // 获取待订阅方法详情，尝试执行订阅
            const targetContext = context;
            const receiver = frameComponent;
            const emitter = ngImportEvent.token;
            const tokenValue = ngImportEvent.token;
            const eventName = ngImportEvent.name;
            const paramMapCollection = ngImportEvent.paramMapCollection;
            const eventPipe = targetContext.eventBus.on(emitter, tokenValue, eventName, receiver, (eventArgs) => {
                this.subscriptionHandler(eventArgs, paramMapCollection, targetContext);
                const eventHandler = frameComponent[eventName];
                if (!eventHandler) {
                    return;
                }
                try {
                    eventHandler(receiver, eventArgs);
                }
                catch (_a) {
                    throw new Error('Error invoking method ' + eventName);
                }
            });
            eventPipes.push(eventPipe);
        });
        return eventPipes;
    }
    /**
     * 获取组件订阅列表
     * @param frameComponent 表单component
     * @returns 组件订阅列表信息
     */
    getNgEvents(frameComponent) {
        return MetadataUtil.getPropsMetadatasByName(frameComponent.constructor, NG_SUBSCRIPTION);
    }
    subscriptionHandler(param, paramMapCollection, currentFrameContext) {
        if (!param || !paramMapCollection || paramMapCollection.length <= 0 || !currentFrameContext) {
            return;
        }
        this.paramMap2UiState(param, paramMapCollection, currentFrameContext);
    }
    /**
     * 设置paramMap后，将param映射到UISTATE上
     */
    paramMap2UiState(param, paramMapCollection, currentFrameContext) {
        for (let i = 0; i < paramMapCollection.length; i++) {
            const from = paramMapCollection[i].from;
            const frameId = paramMapCollection[i].frameId;
            const to = paramMapCollection[i].to;
            if (!from || !frameId || !to) {
                continue;
            }
            const destContext = this.getFrameContext(frameId, currentFrameContext);
            if (destContext == null) {
                continue;
            }
            this.setUiStateProperty(to, param[from], destContext.uiState);
            // this.setUiStateProperty(to, param[from], currentFrameContext.uiState);
        }
    }
    getFrameContext(targetFrameContextId, currentContext) {
        let destContext = null;
        try {
            destContext = currentContext.appContext.getFrameContext(targetFrameContextId);
        }
        catch (_a) {
            throw new Error('Error in Getting FrameContext');
        }
        return destContext;
    }
    setUiStateProperty(propertyName, propertyValue, uiState) {
        try {
            uiState.setPropertyValue(propertyName, propertyValue);
        }
        catch (_a) {
            throw new Error("Error in Setting Property Value of the current UISTATE" + uiState);
        }
    }
}
Subscription.decorators = [
    { type: Injectable }
];
export { Subscription };
//# sourceMappingURL=data:application/json;base64,