/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
/*
 * @Author: 疯狂秀才(Lucas Huang)
 * @Date: 2019-08-06 07:43:53
 * @LastEditors: 疯狂秀才(Lucas Huang)
 * @LastEditTime: 2019-11-20 07:39:45
 * @QQ: 1055818239
 * @Version: v0.0.1
 */
import { Injectable, EventEmitter } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { BehaviorSubject, of, Subject } from 'rxjs';
import { map, distinctUntilChanged, filter, switchMap } from 'rxjs/operators';
import { CalculationType } from '../types';
import { initDataGridState, ROW_INDEX_FIELD, IS_GROUP_ROW_FIELD, GROUP_ROW_FIELD, IS_GROUP_FOOTER_ROW_FIELD, GROUP_VISIBLE_FIELD, GROUP_LEVEL_FIELD } from './state';
import { cloneDeep, groupBy, isPlainObject, flatten } from 'lodash-es';
import { Utils } from '../utils/utils';
import { DatagridColumnsHelper } from './datagrid-columns.helper';
import { BigNumber } from 'bignumber.js';
var DatagridFacadeService = /** @class */ (function () {
    function DatagridFacadeService(http) {
        this.http = http;
        this.localId = 'zh-CHS';
        // public virtualizedService: VirtualizedLoaderService;
        this.store = new BehaviorSubject(null);
        this.virtualRowSubject = new BehaviorSubject(null);
        this.gridSizeSubject = new Subject();
        this.errorSubject = new Subject();
        this.selectRowSubject = new Subject();
        this.unSelectRowSubject = new Subject();
        this.columnResizeSubject = new Subject();
        this.clearSelectionSubject = new Subject();
        this.checkRowSubject = new Subject();
        this.unCheckRowSubject = new Subject();
        this.clearCheckedsSubject = new Subject();
        this.clearAllSubject = new Subject();
        this.checkAllSubject = new Subject();
        this.unCheckAllSubject = new Subject();
        this.selectAllSubject = new Subject();
        this.selectCellSubject = new Subject();
        this.error$ = this.errorSubject.asObservable();
        this.selectRow$ = this.selectRowSubject.asObservable();
        this.unSelectRow$ = this.unSelectRowSubject.asObservable();
        this.columnResize$ = this.columnResizeSubject.asObservable();
        this.clearSelections$ = this.clearSelectionSubject.asObservable();
        this.checkRow$ = this.checkRowSubject.asObservable();
        this.unCheckRow$ = this.unCheckRowSubject.asObservable();
        this.clearCheckeds$ = this.clearCheckedsSubject.asObservable();
        this.clearAll$ = this.clearAllSubject.asObservable();
        this.checkAll$ = this.checkAllSubject.asObservable();
        this.unCheckAll$ = this.unCheckAllSubject.asObservable();
        this.selectAll$ = this.selectAllSubject.asObservable();
        this.currentCell$ = this.selectCellSubject.asObservable();
        this.editCell$ = new EventEmitter();
        this.clientSort$ = new EventEmitter();
        this.rowAppend$ = new EventEmitter();
        this.rowUpdate$ = new EventEmitter();
        this.rowDelete$ = new EventEmitter();
        this.updateCheckboxState$ = new EventEmitter();
        this.state$ = this.store.asObservable().pipe(filter((/**
         * @param {?} state
         * @return {?}
         */
        function (state) { return state; })));
        this.columnGroup$ = this.gridSizeSubject.asObservable().pipe(filter((/**
         * @param {?} state
         * @return {?}
         */
        function (state) { return state; })), map((/**
         * @param {?} state
         * @return {?}
         */
        function (state) { return state.columnsGroup; })), switchMap((/**
         * @param {?} colgroup
         * @return {?}
         */
        function (colgroup) {
            return of(colgroup);
        })), distinctUntilChanged());
        this.gridSize$ = this.gridSizeSubject.asObservable().pipe(filter((/**
         * @param {?} state
         * @return {?}
         */
        function (state) { return state; })), map((/**
         * @param {?} state
         * @return {?}
         */
        function (state) {
            var _a = tslib_1.__assign({}, state), headerHeight = _a.headerHeight, pagerHeight = _a.pagerHeight, width = _a.width, columnsGroup = _a.columnsGroup, height = _a.height, rowHeight = _a.rowHeight;
            return { headerHeight: headerHeight, pagerHeight: pagerHeight, width: width, columnsGroup: columnsGroup, height: height, rowHeight: rowHeight };
        })), distinctUntilChanged());
        this.data$ = this.virtualRowSubject.pipe(filter((/**
         * @param {?} vs
         * @return {?}
         */
        function (vs) { return vs; })), switchMap((/**
         * @param {?} vs
         * @return {?}
         */
        function (vs) {
            return of({
                index: vs.startIndex || 0,
                rows: vs.virtualRows || [],
                top: vs.topHideHeight,
                bottom: vs.bottomHideHeight,
                scrolling: vs.isScrollChange
            });
        })), distinctUntilChanged());
        this.difference = (/**
         * @param {?} first
         * @param {?} second
         * @return {?}
         */
        function (first, second) { return first.filter((/**
         * @param {?} item
         * @return {?}
         */
        function (item) { return !second.includes(item); })); });
        this.differenceBy = (/**
         * @param {?} a
         * @param {?} b
         * @param {?} fn
         * @return {?}
         */
        function (a, b, fn) {
            /** @type {?} */
            var s = new Set(b.map(fn));
            return a.map(fn).filter((/**
             * @param {?} el
             * @return {?}
             */
            function (el) { return !s.has(el); }));
        });
        this._state = cloneDeep(initDataGridState);
    }
    /**
     * @param {?} scrolltop
     * @param {?=} isScrollChange
     * @return {?}
     */
    DatagridFacadeService.prototype.updateVirthualRows = /**
     * @param {?} scrolltop
     * @param {?=} isScrollChange
     * @return {?}
     */
    function (scrolltop, isScrollChange) {
        if (isScrollChange === void 0) { isScrollChange = false; }
        /** @type {?} */
        var virtual = this.getVirthualRows(scrolltop);
        virtual.isScrollChange = isScrollChange;
        this.updateState({ virtual: virtual }, false);
        this.virtualRowSubject.next(virtual);
    };
    /**
     * @param {?} scrolltop
     * @return {?}
     */
    DatagridFacadeService.prototype.getVirthualRows = /**
     * @param {?} scrolltop
     * @return {?}
     */
    function (scrolltop) {
        if (scrolltop === undefined) {
            scrolltop = 0;
        }
        /** @type {?} */
        var data = this._state.data || [];
        /** @type {?} */
        var virtual = { rowIndex: 0, virtualRows: data, topHideHeight: 0, bottomHideHeight: 0 };
        if (data.length === 0 || (this._state.autoHeight && !this._state.groupRows)) {
            virtual.virtualRows = data;
            return virtual;
        }
        if (this._state.flatColumns && this._state.flatColumns.length) {
            // data = this._state.data;
            // if (!this._state.groupRows) {
            //     if (this._state.virtual && this._state.virtualized) {
            //         this.virtualizedService.state = this._state;
            //         const rows = this.virtualizedService.getRows(scrolltop);
            //         virtual = { ...this._state.virtual, ...rows };
            //     } else {
            //         virtual.virtualRows = data;
            //     }
            // } else {
            //     // 行分组数据处理
            //     const groupRows = this.groupRows2(cloneDeep(data));
            //     virtual.virtualRows = groupRows;
            // }
            if (this._state.groupRows) {
                // 行分组数据处理
                /** @type {?} */
                var groupRows = this.groupRows2(cloneDeep(data));
                virtual.virtualRows = groupRows;
            }
        }
        if (this._state.mergeCell && this._state.enableClientSortForMergeCell) {
            virtual.virtualRows = this.sort(virtual.virtualRows);
        }
        return virtual;
    };
    // getDeltaTopHeight(scrolTop, firstIndex) {
    //     const {rowsLength: viewRowsCount, top, bottom} = this.virtualizedService.getRowsCount(scrolTop, this._state.pageSize, firstIndex);
    //     const gridContainerRowsCount = this.virtualizedService.displayRowsCount();
    //     let deltaTopHeight = 0;
    //     if (viewRowsCount < gridContainerRowsCount) {
    //         deltaTopHeight = (gridContainerRowsCount - viewRowsCount) * this._state.rowHeight - this._state.headerHeight;
    //     }
    //     return deltaTopHeight;
    // }
    // getDeltaTopHeight(scrolTop, firstIndex) {
    //     const {rowsLength: viewRowsCount, top, bottom} = this.virtualizedService.getRowsCount(scrolTop, this._state.pageSize, firstIndex);
    //     const gridContainerRowsCount = this.virtualizedService.displayRowsCount();
    //     let deltaTopHeight = 0;
    //     if (viewRowsCount < gridContainerRowsCount) {
    //         deltaTopHeight = (gridContainerRowsCount - viewRowsCount) * this._state.rowHeight - this._state.headerHeight;
    //     }
    //     return deltaTopHeight;
    // }
    /**
     * @param {?=} original
     * @return {?}
     */
    DatagridFacadeService.prototype.getData = 
    // getDeltaTopHeight(scrolTop, firstIndex) {
    //     const {rowsLength: viewRowsCount, top, bottom} = this.virtualizedService.getRowsCount(scrolTop, this._state.pageSize, firstIndex);
    //     const gridContainerRowsCount = this.virtualizedService.displayRowsCount();
    //     let deltaTopHeight = 0;
    //     if (viewRowsCount < gridContainerRowsCount) {
    //         deltaTopHeight = (gridContainerRowsCount - viewRowsCount) * this._state.rowHeight - this._state.headerHeight;
    //     }
    //     return deltaTopHeight;
    // }
    /**
     * @param {?=} original
     * @return {?}
     */
    function (original) {
        if (original === void 0) { original = false; }
        if (original) {
            return this._state.originalData || [];
        }
        return this._state.data || [];
    };
    /**
     * @return {?}
     */
    DatagridFacadeService.prototype.getState = /**
     * @return {?}
     */
    function () {
        return this._state;
    };
    /**
     * @return {?}
     */
    DatagridFacadeService.prototype.getVirtualState = /**
     * @return {?}
     */
    function () {
        return this._state.virtual;
    };
    /**
     * @return {?}
     */
    DatagridFacadeService.prototype.getPageInfo = /**
     * @return {?}
     */
    function () {
        var _a = tslib_1.__assign({}, this._state), pageIndex = _a.pageIndex, pageSize = _a.pageSize;
        return { pageIndex: pageIndex, pageSize: pageSize };
    };
    /**
     * @param {?} state
     * @return {?}
     */
    DatagridFacadeService.prototype.initState = /**
     * @param {?} state
     * @return {?}
     */
    function (state) {
        this.updateState(state, false);
        this._state.originalData = cloneDeep(this._state.data);
        this.initColumns();
        this.gridSizeSubject.next(this._state);
        this.updateVirthualRows(0);
    };
    /** 加载数据
     * @param data: 数据列表
     * @param updateOriginalData 是否更新原始数据, 默认为 true
     */
    /**
     * 加载数据
     * @param {?} data
     * @param {?=} updateOriginalData 是否更新原始数据, 默认为 true
     * @param {?=} sortable
     * @return {?}
     */
    DatagridFacadeService.prototype.loadData = /**
     * 加载数据
     * @param {?} data
     * @param {?=} updateOriginalData 是否更新原始数据, 默认为 true
     * @param {?=} sortable
     * @return {?}
     */
    function (data, updateOriginalData, sortable) {
        if (updateOriginalData === void 0) { updateOriginalData = true; }
        if (sortable === void 0) { sortable = false; }
        data = data || [];
        this.updateState({ data: data }, false);
        if (updateOriginalData) {
            this._state.originalData = cloneDeep(this._state.data);
        }
        if (sortable && this._state.sortName) {
            /** @type {?} */
            var sortedData = this.sort(this._state.data);
            this.updateState({ data: sortedData }, false);
        }
        else {
            // this.updateState({ data: this._state.originalData }, false);
        }
        this.updateVirthualRows(this._state.virtual.scrollTop || 0);
    };
    /** 复原指定行的数据 */
    /**
     * 复原指定行的数据
     * @param {?} rowId
     * @return {?}
     */
    DatagridFacadeService.prototype.resetRow = /**
     * 复原指定行的数据
     * @param {?} rowId
     * @return {?}
     */
    function (rowId) {
        var _this = this;
        /** @type {?} */
        var origData = this._state.originalData;
        if (origData) {
            /** @type {?} */
            var origRowData = origData.find((/**
             * @param {?} r
             * @return {?}
             */
            function (r) { return _this.primaryId(r) === rowId; }));
            this.getCurrentRow().data = cloneDeep(origRowData);
            this.updateRow(rowId, origRowData);
        }
    };
    // loadDataForVirtual(data: any) {
    //     this.updateState({ data }, false);
    //     // this.virtualizedService.state = this._state;
    //     const virtual = { ...this._state.virtual, ...this.virtualizedService.reload() };
    //     this.virtualRowSubject.next(virtual);
    //     this.updateState({virtual});
    // }
    // loadDataForVirtual(data: any) {
    //     this.updateState({ data }, false);
    //     // this.virtualizedService.state = this._state;
    //     const virtual = { ...this._state.virtual, ...this.virtualizedService.reload() };
    //     this.virtualRowSubject.next(virtual);
    //     this.updateState({virtual});
    // }
    /**
     * @param {?} url
     * @return {?}
     */
    DatagridFacadeService.prototype.fetchData = 
    // loadDataForVirtual(data: any) {
    //     this.updateState({ data }, false);
    //     // this.virtualizedService.state = this._state;
    //     const virtual = { ...this._state.virtual, ...this.virtualizedService.reload() };
    //     this.virtualRowSubject.next(virtual);
    //     this.updateState({virtual});
    // }
    /**
     * @param {?} url
     * @return {?}
     */
    function (url) {
        return this.http.get(url).pipe(map((/**
         * @param {?} r
         * @return {?}
         */
        function (r) { return (/** @type {?} */ (r)); })));
    };
    /**
     * @param {?} total
     * @return {?}
     */
    DatagridFacadeService.prototype.setTotal = /**
     * @param {?} total
     * @return {?}
     */
    function (total) {
        this.updateState({ total: total }, false);
    };
    /**
     * @param {?} property
     * @param {?} value
     * @return {?}
     */
    DatagridFacadeService.prototype.updateProperty = /**
     * @param {?} property
     * @param {?} value
     * @return {?}
     */
    function (property, value) {
        var _a;
        this.updateState((_a = {}, _a[property] = value, _a), false);
    };
    /**
     * @param {?} pageIndex
     * @param {?} pageSize
     * @param {?} total
     * @return {?}
     */
    DatagridFacadeService.prototype.setPagination = /**
     * @param {?} pageIndex
     * @param {?} pageSize
     * @param {?} total
     * @return {?}
     */
    function (pageIndex, pageSize, total) {
        this.updateState({ pageIndex: pageIndex, pageSize: pageSize, total: total }, false);
    };
    /**
     * @param {?} scrollTop
     * @return {?}
     */
    DatagridFacadeService.prototype.setScrollTop = /**
     * @param {?} scrollTop
     * @return {?}
     */
    function (scrollTop) {
        /** @type {?} */
        var virtual = tslib_1.__assign({}, this._state.virtual, { scrollTop: scrollTop });
        this.updateState({ virtual: virtual }, false);
    };
    /**
     * @return {?}
     */
    DatagridFacadeService.prototype.isMultiSelect = /**
     * @return {?}
     */
    function () {
        return this._state.multiSelect;
    };
    /**
     * @private
     * @param {?} id
     * @return {?}
     */
    DatagridFacadeService.prototype._isRowSelected = /**
     * @private
     * @param {?} id
     * @return {?}
     */
    function (id) {
        if (!id || !this._state.currentRow) {
            return false;
        }
        else {
            return this._state.currentRow.id.toString() === id.toString();
        }
    };
    /**
     * @param {?} id
     * @param {?=} selections
     * @return {?}
     */
    DatagridFacadeService.prototype.isRowSelected = /**
     * @param {?} id
     * @param {?=} selections
     * @return {?}
     */
    function (id, selections) {
        if (selections === void 0) { selections = null; }
        /** @type {?} */
        var flag = this._isRowSelected(id);
        if (!this.isMultiSelect() || this._state.onlySelectSelf) {
            return flag;
        }
        else {
            if (!selections) {
                selections = this._state.selections;
            }
            if (this._canCancelSelectWhenMulti()) {
                return flag;
            }
            if (!selections || selections.length === 0) {
                return false;
            }
            else {
                return selections.findIndex((/**
                 * @param {?} sr
                 * @return {?}
                 */
                function (sr) { return sr.id == id; })) > -1;
            }
        }
    };
    /**
     * @param {?} id
     * @param {?=} checkeds
     * @return {?}
     */
    DatagridFacadeService.prototype.isRowChecked = /**
     * @param {?} id
     * @param {?=} checkeds
     * @return {?}
     */
    function (id, checkeds) {
        if (checkeds === void 0) { checkeds = null; }
        if (!checkeds) {
            checkeds = this.getCheckeds();
        }
        if (!id || !checkeds.length) {
            return false;
        }
        return checkeds.findIndex((/**
         * @param {?} sr
         * @return {?}
         */
        function (sr) { return sr.id.toString() === id.toString(); })) > -1;
    };
    /**
     * @return {?}
     */
    DatagridFacadeService.prototype.isCheckAll = /**
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var allRows = this.getAllRowsForLive().map((/**
         * @param {?} r
         * @return {?}
         */
        function (r) { return _this.primaryId(r); }));
        /** @type {?} */
        var checkIds = this._state.checkedRows.map((/**
         * @param {?} r
         * @return {?}
         */
        function (r) { return r.id; }));
        if (this.difference(allRows, checkIds).length) {
            return false; // this._state.checkedRows.length === allRows.length;
        }
        else {
            return true;
        }
    };
    /**
     * @return {?}
     */
    DatagridFacadeService.prototype.getCurrentPageCheckeds = /**
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var allRows = this.getAllRowsForLive().map((/**
         * @param {?} r
         * @return {?}
         */
        function (r) { return _this.primaryId(r); }));
        return this._state.checkedRows.filter((/**
         * @param {?} n
         * @return {?}
         */
        function (n) { return allRows.indexOf(n.id) > -1; }));
    };
    /**
     * @return {?}
     */
    DatagridFacadeService.prototype.getCurrentRow = /**
     * @return {?}
     */
    function () {
        return this._state.currentRow || undefined;
    };
    /**
     * @return {?}
     */
    DatagridFacadeService.prototype.getSelections = /**
     * @return {?}
     */
    function () {
        var _this = this;
        // 如果数据源变了，需要重新计算
        /** @type {?} */
        var data = this._state.data;
        if (this._state.selections && this._state.selections.length) {
            if (!data || !data.length) {
                this._state.selections = [];
            }
            else {
                /** @type {?} */
                var temp_1 = data.map((/**
                 * @param {?} n
                 * @return {?}
                 */
                function (n) { return _this.primaryId(n); }));
                this._state.selections = this._state.selections.filter((/**
                 * @param {?} n
                 * @return {?}
                 */
                function (n) {
                    return temp_1.includes(n.id);
                }));
            }
        }
        return this._state.selections || [];
    };
    /**
     * @private
     * @return {?}
     */
    DatagridFacadeService.prototype.getCheckedRowsFromSource = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        return (this._state.checkedRows || []).map((/**
         * @param {?} n
         * @return {?}
         */
        function (n) {
            /** @type {?} */
            var d = _this.findRow(n.id);
            if (d && d.data) {
                n.data = d.data;
            }
            return n;
        }));
    };
    /**
     * @param {?=} fromDataSource
     * @return {?}
     */
    DatagridFacadeService.prototype.getCheckeds = /**
     * @param {?=} fromDataSource
     * @return {?}
     */
    function (fromDataSource) {
        if (fromDataSource === void 0) { fromDataSource = false; }
        if (fromDataSource) {
            this._state.checkedRows = this.getCheckedRowsFromSource();
        }
        return this._state.checkedRows || [];
    };
    /**
     * @param {?} rowid
     * @param {?} rowData
     * @return {?}
     */
    DatagridFacadeService.prototype.updateCheckedData = /**
     * @param {?} rowid
     * @param {?} rowData
     * @return {?}
     */
    function (rowid, rowData) {
        var _this = this;
        /** @type {?} */
        var checkeds = this.getCheckeds();
        if (checkeds.length) {
            /** @type {?} */
            var item_1 = checkeds.find((/**
             * @param {?} n
             * @return {?}
             */
            function (n) { return _this.primaryId(n) == rowid; }));
            if (item_1) {
                Object.keys(rowData).forEach((/**
                 * @param {?} k
                 * @return {?}
                 */
                function (k) {
                    Utils.setValue(k, rowData[k], item_1.data);
                }));
            }
        }
    };
    /**
     * @param {?} ids
     * @param {?=} checked
     * @return {?}
     */
    DatagridFacadeService.prototype.setCheckedRows = /**
     * @param {?} ids
     * @param {?=} checked
     * @return {?}
     */
    function (ids, checked) {
        var _this = this;
        if (checked === void 0) { checked = true; }
        if (ids && ids.length) {
            /** @type {?} */
            var checkeds_1 = this._state.checkedRows || [];
            ids.forEach((/**
             * @param {?} id
             * @return {?}
             */
            function (id) {
                /** @type {?} */
                var row = _this.findRow(id);
                if (checked && row) {
                    if (!_this.isRowChecked(id, checkeds_1)) {
                        /** @type {?} */
                        var srow = { id: _this.primaryId(row.data), data: row.data, index: row.index };
                        checkeds_1.push(srow);
                    }
                }
                else {
                    if (!_this._state.enableMorePageSelect || !checked) {
                        checkeds_1 = checkeds_1.filter((/**
                         * @param {?} sr
                         * @return {?}
                         */
                        function (sr) { return sr.id !== id; }));
                    }
                }
            }));
            this._state.checkedRows = checkeds_1;
        }
        else {
            this._clearCheckeds();
        }
    };
    /**
     * @param {?} id
     * @param {?=} checked
     * @return {?}
     */
    DatagridFacadeService.prototype.checkRecord = /**
     * @param {?} id
     * @param {?=} checked
     * @return {?}
     */
    function (id, checked) {
        if (checked === void 0) { checked = true; }
        if (id) {
            /** @type {?} */
            var row = this.findRow(id);
            if (row) {
                var _a = tslib_1.__assign({}, row), rowIndex = _a.index, rowData = _a.data;
                if (checked) {
                    this.checkRow(rowIndex, rowData);
                }
                else {
                    this.unCheckRow(rowIndex, rowData);
                }
            }
            else {
                this.errorSubject.next("\u672A\u627E\u5230ID\u4E3A" + id + "\u7684\u6570\u636E\u3002");
            }
        }
        else {
            this.errorSubject.next("\u53C2\u6570id \u4E0D\u80FD\u4E3A\u7A7A\u3002");
        }
    };
    /**
     * @param {?} rowIndex
     * @param {?} rowData
     * @param {?=} grid
     * @return {?}
     */
    DatagridFacadeService.prototype.checkRow = /**
     * @param {?} rowIndex
     * @param {?} rowData
     * @param {?=} grid
     * @return {?}
     */
    function (rowIndex, rowData, grid) {
        var _this = this;
        if (grid === void 0) { grid = null; }
        if (!this._state.multiSelect) {
            this._clearCheckeds();
        }
        /** @type {?} */
        var id = this.primaryId(rowData);
        /** @type {?} */
        var checkeds = this._state.checkedRows || [];
        /** @type {?} */
        var srow = { id: id, data: rowData, index: rowIndex };
        if (id && !this.isRowChecked(id, checkeds)) {
            checkeds.push(srow);
            this._state.checkedRows = checkeds;
            if (this._state.selectOnCheck) {
                if (grid && grid.instance && grid.instance.beforeSelect) {
                    grid.instance.beforeSelect({ rowIndex: rowIndex, rowData: rowData, gridInstance: grid.instance }).subscribe((/**
                     * @param {?} e
                     * @return {?}
                     */
                    function (e) {
                        if (e) {
                            _this.selectRow(rowIndex, rowData);
                        }
                    }));
                }
                else {
                    this.selectRow(rowIndex, rowData);
                }
            }
            this.checkRowSubject.next(srow);
        }
        this.updateCheckboxState$.emit(tslib_1.__assign({}, srow, { checked: true }));
    };
    /**
     * @param {?} rowIndex
     * @param {?} rowData
     * @param {?=} grid
     * @return {?}
     */
    DatagridFacadeService.prototype.unCheckRow = /**
     * @param {?} rowIndex
     * @param {?} rowData
     * @param {?=} grid
     * @return {?}
     */
    function (rowIndex, rowData, grid) {
        var _this = this;
        if (grid === void 0) { grid = null; }
        /** @type {?} */
        var id = this.primaryId(rowData);
        /** @type {?} */
        var checkeds = this._state.checkedRows || [];
        /** @type {?} */
        var srow = { id: id, data: rowData, index: rowIndex };
        if (this.isRowChecked(id, checkeds)) {
            checkeds = checkeds.filter((/**
             * @param {?} sr
             * @return {?}
             */
            function (sr) { return '' + sr.id !== '' + id; }));
            this._state.checkedRows = checkeds;
            if (this._state.selectOnCheck) {
                if (grid && grid.instance && grid.instance.beforeUnselect) {
                    grid.instance.beforeUnselect({ rowIndex: rowIndex, rowData: rowData, gridInstance: grid.instance }).subscribe((/**
                     * @param {?} e
                     * @return {?}
                     */
                    function (e) {
                        if (e) {
                            _this.unSelectRow(rowIndex, rowData);
                        }
                    }));
                }
                else {
                    this.unSelectRow(rowIndex, rowData);
                }
            }
            this.unCheckRowSubject.next(srow);
        }
        this.updateCheckboxState$.emit(tslib_1.__assign({}, srow, { checked: false }));
    };
    /**
     * @param {?} data
     * @return {?}
     */
    DatagridFacadeService.prototype.setCurrentPageData = /**
     * @param {?} data
     * @return {?}
     */
    function (data) {
        this._state.currentPageData = data;
    };
    /**
     * @return {?}
     */
    DatagridFacadeService.prototype.getCurrentPageData = /**
     * @return {?}
     */
    function () {
        return this._state.currentPageData || [];
    };
    /** 获取所有可以操作的行 */
    /**
     * 获取所有可以操作的行
     * @private
     * @return {?}
     */
    DatagridFacadeService.prototype.getAllRowsForLive = /**
     * 获取所有可以操作的行
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var allData = this._state.data || [];
        if (this._state.pagination && !this._state.pagerOnServer) {
            // 获取当前页数据
            allData = this.getCurrentPageData();
        }
        // 排除掉禁用的行
        if (this._state.disableRow) {
            allData = allData.filter((/**
             * @param {?} n
             * @param {?} i
             * @return {?}
             */
            function (n, i) { return !_this._state.disableRow(n, i); }));
        }
        return allData;
    };
    /**
     * @return {?}
     */
    DatagridFacadeService.prototype.checkAll = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this._state.checkedRows = this._state.checkedRows || [];
        /** @type {?} */
        var allData = this.getAllRowsForLive();
        /** @type {?} */
        var allCheckeds = allData.map((/**
         * @param {?} r
         * @param {?} i
         * @return {?}
         */
        function (r, i) {
            return {
                id: _this.primaryId(r),
                index: i,
                data: r
            };
        }));
        if (!this._state.checkedRows.length) {
            this._state.checkedRows = allCheckeds;
        }
        else {
            /** @type {?} */
            var _checkeds_1 = [];
            allCheckeds.forEach((/**
             * @param {?} element
             * @return {?}
             */
            function (element) {
                if (!_this._state.checkedRows.find((/**
                 * @param {?} n
                 * @return {?}
                 */
                function (n) { return n.id == element.id; }))) {
                    _checkeds_1.push(element);
                }
            }));
            this._state.checkedRows = this._state.checkedRows.concat(_checkeds_1);
        }
        if (this._state.selectOnCheck && !this._state.onlySelectSelf) {
            this._state.selections = [];
            this._state.selections = allData.map((/**
             * @param {?} r
             * @param {?} i
             * @return {?}
             */
            function (r, i) {
                return {
                    id: _this.primaryId(r),
                    index: i,
                    data: r
                };
            }));
        }
        this.checkAllSubject.next(this._state.checkedRows);
    };
    /**
     * @return {?}
     */
    DatagridFacadeService.prototype.selectAll = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this._state.selections = [];
        /** @type {?} */
        var allData = this.getAllRowsForLive();
        this._state.selections = allData.map((/**
         * @param {?} r
         * @param {?} i
         * @return {?}
         */
        function (r, i) {
            return {
                id: _this.primaryId(r),
                index: i,
                data: r
            };
        }));
        if (this._state.checkOnSelect) {
            this._state.checkedRows = [];
            this._state.checkedRows = allData.map((/**
             * @param {?} r
             * @param {?} i
             * @return {?}
             */
            function (r, i) {
                return {
                    id: _this.primaryId(r),
                    index: i,
                    data: r
                };
            }));
        }
        this.selectAllSubject.next(this._state.selections);
    };
    /**
     * @param {?} id
     * @return {?}
     */
    DatagridFacadeService.prototype.findRow = /**
     * @param {?} id
     * @return {?}
     */
    function (id) {
        var _this = this;
        if (this._state.data && this._state.data.length) {
            /** @type {?} */
            var index_1 = -1;
            /** @type {?} */
            var data = this._state.data.find((/**
             * @param {?} n
             * @param {?} i
             * @return {?}
             */
            function (n, i) {
                /** @type {?} */
                var r = _this.primaryId(n) == id;
                if (r) {
                    index_1 = i;
                }
                return r;
            }));
            if (index_1 === -1) {
                return null;
            }
            return { index: index_1, data: data };
        }
        return null;
    };
    /**
     * @param {?} id
     * @return {?}
     */
    DatagridFacadeService.prototype.findRowIndex = /**
     * @param {?} id
     * @return {?}
     */
    function (id) {
        var _this = this;
        if (this._state.data && this._state.data.length) {
            return this._state.data.findIndex((/**
             * @param {?} n
             * @return {?}
             */
            function (n) { return _this.primaryId(n) === id; }));
        }
        return -1;
    };
    /**
     * 设置选中行，不触发grid 选中事件，取消选中事件
     */
    /**
     * 设置选中行，不触发grid 选中事件，取消选中事件
     * @param {?} id
     * @param {?=} select
     * @return {?}
     */
    DatagridFacadeService.prototype.setSelectRow = /**
     * 设置选中行，不触发grid 选中事件，取消选中事件
     * @param {?} id
     * @param {?=} select
     * @return {?}
     */
    function (id, select) {
        if (select === void 0) { select = true; }
        /** @type {?} */
        var row = this.findRow(id);
        var _a = tslib_1.__assign({}, row), rowIndex = _a.index, rowData = _a.data;
        /** @type {?} */
        var srow = { id: id, data: rowData, index: rowIndex };
        if (this.isMultiSelect()) {
            if (select) {
                this.selectRowForMulti(srow, false);
            }
            else {
                this.unSelectRowForMulti(srow, false);
            }
        }
        /** @type {?} */
        var _sr = select ? srow : null;
        this.updateState({ currentRow: _sr }, false);
    };
    /**
     * @param {?} id
     * @param {?=} select
     * @return {?}
     */
    DatagridFacadeService.prototype.selectRecord = /**
     * @param {?} id
     * @param {?=} select
     * @return {?}
     */
    function (id, select) {
        if (select === void 0) { select = true; }
        if (id) {
            /** @type {?} */
            var row = this.findRow(id);
            if (row) {
                var _a = tslib_1.__assign({}, row), rowIndex = _a.index, rowData = _a.data;
                if (select) {
                    this.selectRow(rowIndex, rowData);
                }
                else {
                    this.unSelectRow(rowIndex, rowData);
                }
            }
            else {
                this.errorSubject.next("\u672A\u627E\u5230ID\u4E3A" + id + "\u7684\u6570\u636E\u3002");
            }
        }
        else {
            this.errorSubject.next("\u53C2\u6570id \u4E0D\u80FD\u4E3A\u7A7A\u3002");
        }
    };
    /**
     * @param {?} rowIndex
     * @param {?} rowData
     * @param {?=} gridOpts
     * @return {?}
     */
    DatagridFacadeService.prototype.selectRow = /**
     * @param {?} rowIndex
     * @param {?} rowData
     * @param {?=} gridOpts
     * @return {?}
     */
    function (rowIndex, rowData, gridOpts) {
        var _this = this;
        if (gridOpts === void 0) { gridOpts = null; }
        /** @type {?} */
        var isMultiSelect = this.isMultiSelect();
        /** @type {?} */
        var id = this.primaryId(rowData);
        /** @type {?} */
        var srow = { id: id, data: rowData, index: rowIndex };
        if (!this.isRowSelected(id) || !this._state.currentRow) {
            if (!isMultiSelect) {
                this.updateState({ currentRow: srow }, false);
                this.selectRowSubject.next(this._state.currentRow);
                if (this._state.showCheckbox && this._state.checkOnSelect) {
                    this._state.checkedRows = [srow];
                    if (gridOpts && gridOpts.instance && gridOpts.instance.beforeCheck) {
                        gridOpts.instance.beforeCheck({ rowIndex: rowIndex, rowData: rowData, gridInstance: gridOpts.instance }).subscribe((/**
                         * @return {?}
                         */
                        function () {
                            _this.checkRowSubject.next(srow);
                        }));
                    }
                    else {
                        this.checkRowSubject.next(srow);
                    }
                }
            }
            else {
                this.selectRowForMulti(srow, true, gridOpts);
            }
        }
    };
    /**
     * @private
     * @param {?} srow
     * @param {?=} emit
     * @param {?=} gridOpts
     * @return {?}
     */
    DatagridFacadeService.prototype.selectRowForMulti = /**
     * @private
     * @param {?} srow
     * @param {?=} emit
     * @param {?=} gridOpts
     * @return {?}
     */
    function (srow, emit, gridOpts) {
        if (emit === void 0) { emit = true; }
        if (gridOpts === void 0) { gridOpts = null; }
        if (this._state.onlySelectSelf) {
            this._clearSelections();
            this.updateState({ currentRow: srow, selections: [srow] }, false);
        }
        else {
            this._state.selections = this._state.selections || [];
            this._state.selections = this._state.selections.filter((/**
             * @param {?} sr
             * @return {?}
             */
            function (sr) { return sr.id !== srow.id; }));
            this._state.selections.push(srow);
        }
        if (emit) {
            this.selectRowSubject.next(srow);
        }
        if (this._state.checkOnSelect) {
            this.checkRow(srow.index, srow.data, gridOpts);
        }
    };
    /**
     * @private
     * @param {?} srow
     * @param {?=} emit
     * @param {?=} gridOpts
     * @return {?}
     */
    DatagridFacadeService.prototype.unSelectRowForMulti = /**
     * @private
     * @param {?} srow
     * @param {?=} emit
     * @param {?=} gridOpts
     * @return {?}
     */
    function (srow, emit, gridOpts) {
        if (emit === void 0) { emit = true; }
        if (gridOpts === void 0) { gridOpts = null; }
        this._state.selections = this._state.selections.filter((/**
         * @param {?} sr
         * @return {?}
         */
        function (sr) { return sr.id !== srow.id; }));
        if (this._canCancelSelectWhenMulti() || (this._state.currentRow && this._state.currentRow.id === srow.id)) {
            this.updateState({ currentRow: null });
        }
        if (this._state.checkOnSelect) {
            this.unCheckRow(srow.index, srow.data, gridOpts);
        }
        if (emit) {
            this.unSelectRowSubject.next(srow);
        }
    };
    /**
     * @param {?} rowIndex
     * @param {?} rowData
     * @param {?=} gridOpts
     * @return {?}
     */
    DatagridFacadeService.prototype.unSelectRow = /**
     * @param {?} rowIndex
     * @param {?} rowData
     * @param {?=} gridOpts
     * @return {?}
     */
    function (rowIndex, rowData, gridOpts) {
        if (gridOpts === void 0) { gridOpts = null; }
        /** @type {?} */
        var id = this.primaryId(rowData);
        /** @type {?} */
        var isMultiSelect = this.isMultiSelect();
        /** @type {?} */
        var srow = { id: id, index: rowIndex, data: rowData };
        if (!isMultiSelect) {
            if (this._state.currentRow) {
                this.updateState({ currentRow: null });
                this.unSelectRowSubject.next(srow);
                if (this._state.showCheckbox) {
                    this.unCheckRow(srow.index, srow.data, gridOpts);
                }
            }
        }
        else {
            this.unSelectRowForMulti(srow, true, gridOpts);
        }
    };
    /**
     * @private
     * @return {?}
     */
    DatagridFacadeService.prototype._canCancelSelectWhenMulti = /**
     * @private
     * @return {?}
     */
    function () {
        return !this._state.keepSelect && this._state.onlySelectSelf;
    };
    /**
     * @private
     * @param {?=} excludeIds
     * @return {?}
     */
    DatagridFacadeService.prototype._clearSelections = /**
     * @private
     * @param {?=} excludeIds
     * @return {?}
     */
    function (excludeIds) {
        this._state.currentRow = null;
        if (!excludeIds || !excludeIds.length) {
            this._state.selections = [];
        }
        else {
            this._state.selections = this._state.selections.filter((/**
             * @param {?} n
             * @return {?}
             */
            function (n) {
                return excludeIds.findIndex((/**
                 * @param {?} i
                 * @return {?}
                 */
                function (i) { return i == n.id; })) > -1;
            }));
        }
    };
    /**
     * @private
     * @param {?=} rows
     * @return {?}
     */
    DatagridFacadeService.prototype._clearCheckeds = /**
     * @private
     * @param {?=} rows
     * @return {?}
     */
    function (rows) {
        var _this = this;
        if (rows === void 0) { rows = []; }
        if (!rows.length) {
            this._state.checkedRows = [];
        }
        else {
            this._state.checkedRows = this._state.checkedRows.filter((/**
             * @param {?} n
             * @return {?}
             */
            function (n) { return rows.findIndex((/**
             * @param {?} r
             * @return {?}
             */
            function (r) { return _this.primaryId(r) === n.id; })) == -1; }));
        }
    };
    /**
     * @param {?=} excludeIds
     * @return {?}
     */
    DatagridFacadeService.prototype.clearSelections = /**
     * @param {?=} excludeIds
     * @return {?}
     */
    function (excludeIds) {
        /** @type {?} */
        var rows = this._state.selections;
        excludeIds = excludeIds || [];
        this._clearSelections(excludeIds);
        /** @type {?} */
        var unCheckRows = rows.filter((/**
         * @param {?} n
         * @return {?}
         */
        function (n) { return excludeIds.findIndex((/**
         * @param {?} i
         * @return {?}
         */
        function (i) { return i == n.id; })) == -1; }));
        if (this._state.checkOnSelect || (!this._state.multiSelect && this._state.showCheckbox)) {
            // this._state.checkedRows = [];
            // this.clearCheckedsSubject.next(rows);
            this._state.checkedRows = this._state.checkedRows.filter((/**
             * @param {?} n
             * @return {?}
             */
            function (n) {
                return !rows.find((/**
                 * @param {?} t1
                 * @return {?}
                 */
                function (t1) { return t1.id == n.id && excludeIds.findIndex((/**
                 * @param {?} i
                 * @return {?}
                 */
                function (i) { return i == n.id; })) == -1; }));
            }));
            this.clearCheckedsSubject.next(unCheckRows);
        }
        this.clearSelectionSubject.next(unCheckRows);
    };
    /**
     * @param {?=} clearAll
     * @return {?}
     */
    DatagridFacadeService.prototype.clearCheckeds = /**
     * @param {?=} clearAll
     * @return {?}
     */
    function (clearAll) {
        if (clearAll === void 0) { clearAll = true; }
        /** @type {?} */
        var rows = this.getAllRowsForLive();
        /** @type {?} */
        var _rows = clearAll ? [] : rows;
        this._clearCheckeds(_rows);
        if (this._state.selectOnCheck) {
            this._clearSelections();
        }
        this.clearCheckedsSubject.next(rows);
    };
    /**
     * @return {?}
     */
    DatagridFacadeService.prototype.clearAll = /**
     * @return {?}
     */
    function () {
        this._clearCheckeds();
        this._clearSelections();
        this.clearAllSubject.next();
    };
    /**
     * @param {?} flag
     * @return {?}
     */
    DatagridFacadeService.prototype.setMultiSelect = /**
     * @param {?} flag
     * @return {?}
     */
    function (flag) {
        this._state.multiSelect = flag;
    };
    /**
     * @param {?} flag
     * @return {?}
     */
    DatagridFacadeService.prototype.setCheckOnSelect = /**
     * @param {?} flag
     * @return {?}
     */
    function (flag) {
        this._state.checkOnSelect = flag;
    };
    /**
     * @param {?} flag
     * @return {?}
     */
    DatagridFacadeService.prototype.setSelectOnCheck = /**
     * @param {?} flag
     * @return {?}
     */
    function (flag) {
        this._state.selectOnCheck = flag;
    };
    /**
     * @param {?} dr
     * @param {?} field
     * @param {?=} cellElement
     * @param {?=} cellRef
     * @return {?}
     */
    DatagridFacadeService.prototype.setCurrentCell = /**
     * @param {?} dr
     * @param {?} field
     * @param {?=} cellElement
     * @param {?=} cellRef
     * @return {?}
     */
    function (dr, field, cellElement, cellRef) {
        var _a = tslib_1.__assign({}, dr), rowIndex = _a.rowIndex, rowData = _a.rowData;
        /** @type {?} */
        var currentCell = tslib_1.__assign({}, this._state.currentCell, { rowIndex: rowIndex, rowData: rowData, field: field, rowId: this.primaryId(rowData), cellElement: cellElement });
        if (field !== this._state.ControlPanelFeild) {
            if (cellRef) {
                currentCell.cellRef = cellRef;
            }
            if (field) {
                currentCell.column = this.getColumn(field);
            }
            /** @type {?} */
            var isLastRow = rowIndex === this.getData().length - 1;
            currentCell['lastRow'] = isLastRow;
        }
        else {
            currentCell = null;
        }
        this._state.currentCell = null;
        this.updateState({ currentCell: currentCell }, false);
        this.selectRow(rowIndex, rowData);
        if (this._state.currentRow) {
            this._state.currentRow.dr = dr;
        }
        this.selectCellSubject.next(currentCell);
    };
    /**
     * @return {?}
     */
    DatagridFacadeService.prototype.cancelSelectCell = /**
     * @return {?}
     */
    function () {
        if (this._state.currentCell) {
            this._state.currentCell = null;
            this.updateState({ currentCell: null }, false);
            this.selectCellSubject.next(null);
        }
    };
    /**
     * @param {?} rowData
     * @return {?}
     */
    DatagridFacadeService.prototype.primaryId = /**
     * @param {?} rowData
     * @return {?}
     */
    function (rowData) {
        return rowData[this._state.idField];
    };
    /**
     * @return {?}
     */
    DatagridFacadeService.prototype.getCurrentCell = /**
     * @return {?}
     */
    function () {
        return this._state.currentCell;
    };
    /**
     * @return {?}
     */
    DatagridFacadeService.prototype.editCell = /**
     * @return {?}
     */
    function () {
        if (this._state.currentCell) {
            if (!this._state.currentCell.isEditing) {
                /** @type {?} */
                var cei = tslib_1.__assign({}, this._state.currentCell, { isEditing: true });
                this.updateState({ currentCell: cei }, false);
                this.selectCellSubject.next(cei);
                // this.editCell$.next(cei);
            }
        }
    };
    /**
     * @return {?}
     */
    DatagridFacadeService.prototype.endEditCell = /**
     * @return {?}
     */
    function () {
        if (this._state.currentCell && this._state.currentCell.isEditing) {
            /** @type {?} */
            var cei = tslib_1.__assign({}, this._state.currentCell, { isEditing: false });
            this.updateState({ currentCell: cei }, false);
            this.selectCellSubject.next(cei);
            // this.editCell$.next(cei);
        }
    };
    /**
     * @param {?} rowData
     * @return {?}
     */
    DatagridFacadeService.prototype.appendRow = /**
     * @param {?} rowData
     * @return {?}
     */
    function (rowData) {
        if (rowData && this.primaryId(rowData)) {
            /** @type {?} */
            var pid = this.primaryId(rowData);
            if (this.findRowIndex(pid) === -1) {
                this._state.data.push(rowData);
                /** @type {?} */
                var newData = tslib_1.__spread(this._state.data);
                this.updateState({ data: newData }, false);
                this._state.originalData = cloneDeep(this._state.data);
                this.refresh();
                this.rowAppend$.emit(rowData);
            }
            else {
                throw new Error("\u4E3B\u952EID \u5DF2\u5B58\u5728\uFF01ID: " + pid);
            }
        }
        else {
            throw new Error("\u4E3B\u952E\u6807\u8BC6\u5B57\u6BB5\u4E0D\u80FD\u4E3A\u7A7A\u3002");
        }
    };
    /**
     * @param {?} rowid
     * @param {?} rowData
     * @return {?}
     */
    DatagridFacadeService.prototype.updateRow = /**
     * @param {?} rowid
     * @param {?} rowData
     * @return {?}
     */
    function (rowid, rowData) {
        /** @type {?} */
        var row = this.findRow(rowid);
        if (row && row.data) {
            if (rowData) {
                /** @type {?} */
                var keys = Object.keys(rowData);
                keys.forEach((/**
                 * @param {?} field
                 * @return {?}
                 */
                function (field) {
                    Utils.setValue(field, rowData[field], row.data);
                }));
                // 更新已勾选的数据
                this.updateCheckedData(rowid, rowData);
                this.rowUpdate$.emit(row);
            }
        }
    };
    /**
     * @param {?} rowid
     * @return {?}
     */
    DatagridFacadeService.prototype.deleteRow = /**
     * @param {?} rowid
     * @return {?}
     */
    function (rowid) {
        /** @type {?} */
        var row = this.findRow(rowid);
        if (row) {
            /** @type {?} */
            var newData = this.removeRow(this._state.data, rowid);
            this.updateState({ data: newData }, false);
            this._state.originalData = cloneDeep(this._state.data);
            this.refresh();
            this.rowDelete$.emit(rowid);
            return row;
        }
    };
    /**
     * 从数组中删除指定的ID
     * @param data 数组
     * @param rowId 要删除的ID
     */
    /**
     * 从数组中删除指定的ID
     * @param {?} data 数组
     * @param {?} rowId 要删除的ID
     * @return {?}
     */
    DatagridFacadeService.prototype.removeRow = /**
     * 从数组中删除指定的ID
     * @param {?} data 数组
     * @param {?} rowId 要删除的ID
     * @return {?}
     */
    function (data, rowId) {
        var _this = this;
        /** @type {?} */
        var newData = data.filter((/**
         * @param {?} n
         * @return {?}
         */
        function (n) {
            /** @type {?} */
            var id = _this.primaryId(n);
            return rowId !== id;
        }));
        return newData;
    };
    /**
     * @param {?} cellInfo
     * @return {?}
     */
    DatagridFacadeService.prototype.isCellSelected = /**
     * @param {?} cellInfo
     * @return {?}
     */
    function (cellInfo) {
        /** @type {?} */
        var cc = this.getCurrentCell();
        if (!cc) {
            return false;
        }
        else {
            if (this._state.currentRow.index === cc.rowIndex) {
                return cc.field === cellInfo.field;
            }
            return false;
        }
    };
    /**
     * @protected
     * @param {?} state
     * @param {?=} emit
     * @return {?}
     */
    DatagridFacadeService.prototype.updateState = /**
     * @protected
     * @param {?} state
     * @param {?=} emit
     * @return {?}
     */
    function (state, emit) {
        if (emit === void 0) { emit = true; }
        /** @type {?} */
        var newState = tslib_1.__assign({}, this._state, state);
        this._state = newState;
        if (emit) {
            this.store.next(this._state);
        }
    };
    /**
     * @param {?=} newSize
     * @return {?}
     */
    DatagridFacadeService.prototype.resize = /**
     * @param {?=} newSize
     * @return {?}
     */
    function (newSize) {
        if (newSize) {
            this.updateState(newSize, false);
        }
        this.resetColumnsSize();
        if (!this._state.groupRows) {
            this.updateVirthualRows(this._state.virtual.scrollTop);
        }
    };
    /**
     * @param {?} fit
     * @return {?}
     */
    DatagridFacadeService.prototype.fitColumns = /**
     * @param {?} fit
     * @return {?}
     */
    function (fit) {
        this.updateState({ fitColumns: fit }, false);
        // const r = this.useUserSetColumnSize();
        // this.setFitColumnsWidth(this._state.columnsGroup, true, r);
        // this.gridSizeSubject.next(this._state);
        this.resetColumnsSize();
    };
    /**
     * @private
     * @return {?}
     */
    DatagridFacadeService.prototype.useUserSetColumnSize = /**
     * @private
     * @return {?}
     */
    function () {
        if (this._state.autoFitColumns) {
            /** @type {?} */
            var gridWidth = this._state.width;
            /** @type {?} */
            var userSetColumnWidth = this._state.columnsGroup.originalTotalWidth;
            return userSetColumnWidth > gridWidth;
        }
        return false;
    };
    /**
     * @private
     * @return {?}
     */
    DatagridFacadeService.prototype.resetColumnsSize = /**
     * @private
     * @return {?}
     */
    function () {
        if (this._state.fitColumns) {
            // 20200421
            /** @type {?} */
            var r = this.useUserSetColumnSize();
            this.setFitColumnsWidth(this._state.columnsGroup, r, r);
        }
        this.gridSizeSubject.next(this._state);
    };
    /**
     * 更新列设置
     * @param columns 新的列集合
     * @param restitute 是否还原初始宽度 默认为 false
     */
    /**
     * 更新列设置
     * @param {?} columns 新的列集合
     * @param {?=} restitute 是否还原初始宽度 默认为 false
     * @param {?=} emit
     * @return {?}
     */
    DatagridFacadeService.prototype.updateColumns = /**
     * 更新列设置
     * @param {?} columns 新的列集合
     * @param {?=} restitute 是否还原初始宽度 默认为 false
     * @param {?=} emit
     * @return {?}
     */
    function (columns, restitute, emit) {
        if (restitute === void 0) { restitute = false; }
        if (emit === void 0) { emit = false; }
        this._state.columns = columns;
        this.initColumns(emit, restitute);
        this.resizeColumns(restitute);
    };
    /**
     * @param {?} columns
     * @return {?}
     */
    DatagridFacadeService.prototype.getGroupColumns = /**
     * @param {?} columns
     * @return {?}
     */
    function (columns) {
        var _this = this;
        /** @type {?} */
        var arr = [];
        /** @type {?} */
        var allCols = this.getAllFlatColumns();
        columns.forEach((/**
         * @param {?} c
         * @return {?}
         */
        function (c) {
            if (!c.colspan || c.colspan == 1) {
                if (!arr.find((/**
                 * @param {?} n
                 * @return {?}
                 */
                function (n) { return n.field === c.field; }))) {
                    arr.push(c);
                }
            }
            else {
                arr = arr.concat(_this.getGroupColumns(allCols.filter((/**
                 * @param {?} n
                 * @return {?}
                 */
                function (n) { return n.parentId == c.id; }))));
            }
        }));
        return arr;
    };
    /**
     * @param {?=} emit
     * @param {?=} restColumnWidth
     * @return {?}
     */
    DatagridFacadeService.prototype.initColumns = /**
     * @param {?=} emit
     * @param {?=} restColumnWidth
     * @return {?}
     */
    function (emit, restColumnWidth) {
        if (emit === void 0) { emit = false; }
        if (restColumnWidth === void 0) { restColumnWidth = false; }
        /** @type {?} */
        var columns = this._state.flatColumns;
        /** @type {?} */
        var colgroup = {
            leftFixed: [],
            rightFixed: [],
            normalColumns: [],
            columns: []
        };
        if (columns && columns.length) {
            /** @type {?} */
            var leftFixedCols = this.getFixedCols('left');
            /** @type {?} */
            var rightFixedCols = this.getFixedCols('right');
            /** @type {?} */
            var normalCols = this.getFixedCols();
            columns.forEach((/**
             * @param {?} c
             * @return {?}
             */
            function (c) {
                if (!c.originalWidth) {
                    c.originalWidth = c.width;
                }
            }));
            colgroup = {
                leftFixed: leftFixedCols,
                rightFixed: rightFixedCols,
                normalColumns: normalCols,
                columns: leftFixedCols.concat(normalCols).concat(rightFixedCols)
            };
            this.initColumnsWidth(colgroup, restColumnWidth);
            if (this._state.fitColumns) {
                this.setFitColumnsWidth(colgroup, true);
            }
            this.updateState({ columnsGroup: colgroup }, emit);
        }
        else {
            colgroup.leftFixedWidth = 0;
            colgroup.rightFixedWidth = 0;
            colgroup.normalWidth = 0;
            colgroup.totalWidth = 0;
            this.updateState({ columnsGroup: colgroup }, emit);
        }
    };
    /**
     * @param {?} field
     * @param {?=} fixed
     * @return {?}
     */
    DatagridFacadeService.prototype.getColumnIndex = /**
     * @param {?} field
     * @param {?=} fixed
     * @return {?}
     */
    function (field, fixed) {
        if (fixed === void 0) { fixed = ''; }
        /** @type {?} */
        var colgroup = this._state.columnsGroup;
        if (!fixed || this._state.fast) {
            return colgroup.normalColumns.findIndex((/**
             * @param {?} n
             * @return {?}
             */
            function (n) { return n.field === field; }));
        }
        else {
            if (fixed === 'left') {
                return colgroup.leftFixed.findIndex((/**
                 * @param {?} n
                 * @return {?}
                 */
                function (n) { return n.field === field; }));
            }
            else if (fixed === 'right') {
                return colgroup.rightFixed.findIndex((/**
                 * @param {?} n
                 * @return {?}
                 */
                function (n) { return n.field === field; }));
            }
        }
    };
    /**
     * @return {?}
     */
    DatagridFacadeService.prototype.columnResizeEnd = /**
     * @return {?}
     */
    function () {
        // const colgroup = this._state.columnsGroup;
        // this.initColumnsWidth(colgroup, false);
        // this.updateState({ columnsGroup:  {...colgroup} }, false);
        // this.gridSizeSubject.next(this._state);
        this.resizeColumns();
    };
    /**
     * @param {?=} restitute
     * @return {?}
     */
    DatagridFacadeService.prototype.resizeColumns = /**
     * @param {?=} restitute
     * @return {?}
     */
    function (restitute) {
        if (restitute === void 0) { restitute = false; }
        /** @type {?} */
        var colgroup = this._state.columnsGroup;
        this.initColumnsWidth(colgroup, restitute);
        if (this._state.fitColumns) {
            /** @type {?} */
            var r = this.useUserSetColumnSize();
            if (r) {
                this.setFitColumnsWidth(colgroup, restitute, r);
            }
            else {
                this.setFitColumnsWidth(colgroup, restitute);
            }
        }
        this.updateState({ columnsGroup: tslib_1.__assign({}, colgroup) }, false);
        this.gridSizeSubject.next(this._state);
    };
    /**
     * @return {?}
     */
    DatagridFacadeService.prototype.getAllFlatColumns = /**
     * @return {?}
     */
    function () {
        return flatten(this._state.columns);
    };
    /**
     * @param {?} fieldName
     * @return {?}
     */
    DatagridFacadeService.prototype.getColumn = /**
     * @param {?} fieldName
     * @return {?}
     */
    function (fieldName) {
        return this.getAllFlatColumns().find((/**
         * @param {?} n
         * @return {?}
         */
        function (n) { return n.field === fieldName; }));
    };
    /**
     * @param {?} colgroup
     * @param {?=} restitute
     * @param {?=} useUserSetColumnSize
     * @return {?}
     */
    DatagridFacadeService.prototype.setFitColumnsWidth = /**
     * @param {?} colgroup
     * @param {?=} restitute
     * @param {?=} useUserSetColumnSize
     * @return {?}
     */
    function (colgroup, restitute, useUserSetColumnSize) {
        if (restitute === void 0) { restitute = false; }
        if (useUserSetColumnSize === void 0) { useUserSetColumnSize = false; }
        if (!colgroup) {
            return;
        }
        colgroup.normalWidth = this._state.width - colgroup.leftFixedWidth - colgroup.rightFixedWidth;
        if (!colgroup.normalWidth || colgroup.normalWidth < 0) {
            return;
        }
        if (useUserSetColumnSize) {
            colgroup.totalWidth = colgroup.originalTotalWidth;
            if (restitute) {
                colgroup.normalColumns.forEach((/**
                 * @param {?} col
                 * @return {?}
                 */
                function (col) {
                    col.width = col.originalWidth;
                }));
            }
            // 更新 normalColumns width
            colgroup.normalWidth = colgroup.normalColumns.reduce((/**
             * @param {?} totalWidth
             * @param {?} col
             * @return {?}
             */
            function (totalWidth, col) {
                if (!restitute && col.width) {
                    return totalWidth += col.width;
                }
                else {
                    return totalWidth += col.originalWidth;
                }
            }), 0);
            colgroup.totalWidth = colgroup.leftFixedWidth + colgroup.rightFixedWidth + colgroup.normalWidth;
        }
        else {
            /** @type {?} */
            var minWidth_1 = colgroup.normalColumns.reduce((/**
             * @param {?} totalWidth
             * @param {?} col
             * @return {?}
             */
            function (totalWidth, col) {
                if (!restitute) {
                    return totalWidth += col.width;
                }
                else {
                    return totalWidth += col.originalWidth;
                }
            }), 0);
            colgroup.normalWidth = colgroup.normalWidth - 2;
            colgroup.normalColumns.forEach((/**
             * @param {?} col
             * @return {?}
             */
            function (col) {
                if (!restitute) {
                    // col.width = Math.floor( col.width / minWidth * colgroup.normalWidth );
                    col.width = Number((col.width / minWidth_1 * colgroup.normalWidth).toFixed(2));
                }
                else {
                    // col.width = Math.floor( col.originalWidth / minWidth * colgroup.normalWidth );
                    col.width = Number((col.originalWidth / minWidth_1 * colgroup.normalWidth).toFixed(2));
                }
            }));
            colgroup.totalWidth = colgroup.leftFixedWidth + colgroup.rightFixedWidth + colgroup.normalWidth;
        }
    };
    /**
     * @private
     * @param {?=} direction
     * @return {?}
     */
    DatagridFacadeService.prototype.getFixedCols = /**
     * @private
     * @param {?=} direction
     * @return {?}
     */
    function (direction) {
        if (direction === void 0) { direction = ''; }
        /** @type {?} */
        var cols = [];
        if (!direction) {
            cols = this._state.flatColumns.filter((/**
             * @param {?} col
             * @return {?}
             */
            function (col) { return !col.fixed; }));
        }
        else {
            cols = this._state.flatColumns.filter((/**
             * @param {?} col
             * @return {?}
             */
            function (col) { return col.fixed === direction; }));
        }
        // 多表头，重新计算列的顺序
        if (this._state.columns.length > 1 && cols.length) {
            /** @type {?} */
            var fields = DatagridColumnsHelper.getFields(this._state.columns);
            /** @type {?} */
            var newcols_1 = [];
            fields.forEach((/**
             * @param {?} f
             * @return {?}
             */
            function (f) {
                /** @type {?} */
                var c = cols.find((/**
                 * @param {?} col
                 * @return {?}
                 */
                function (col) { return (col.field || '') === f; }));
                if (c) {
                    newcols_1.push(c);
                }
            }));
            return newcols_1;
        }
        return cols;
    };
    // restitute: 还原初始宽度，默认 false
    // restitute: 还原初始宽度，默认 false
    /**
     * @private
     * @param {?} colgroup
     * @param {?=} restitute
     * @return {?}
     */
    DatagridFacadeService.prototype.initColumnsWidth = 
    // restitute: 还原初始宽度，默认 false
    /**
     * @private
     * @param {?} colgroup
     * @param {?=} restitute
     * @return {?}
     */
    function (colgroup, restitute) {
        if (restitute === void 0) { restitute = false; }
        /** @type {?} */
        var offset = 0;
        offset = this._state.showLineNumber ? offset + this._state.lineNumberWidth : offset;
        offset = this._state.showCheckbox ? offset + this._state.checkboxColumnWidth : offset;
        /** @type {?} */
        var getColsWidth = (/**
         * @param {?} cols
         * @param {?} val
         * @param {?} reset
         * @return {?}
         */
        function (cols, val, reset) {
            return cols.reduce((/**
             * @param {?} r
             * @param {?} c
             * @return {?}
             */
            function (r, c) {
                c.left = r;
                if (!reset) {
                    return r + c.width;
                }
                else {
                    return r + c.originalWidth;
                }
            }), val);
        });
        colgroup.leftFixedWidth = offset;
        if (colgroup.leftFixed && colgroup.leftFixed.length) {
            colgroup.leftFixedWidth = getColsWidth(colgroup.leftFixed, offset, restitute);
        }
        colgroup.rightFixedWidth = 0;
        if (colgroup.rightFixed && colgroup.rightFixed.length) {
            colgroup.rightFixedWidth = getColsWidth(colgroup.rightFixed, 0, restitute);
        }
        colgroup.normalWidth = 0;
        if (this._state.columns && this._state.columns.length) {
            colgroup.normalWidth = getColsWidth(colgroup.normalColumns, 0, restitute);
            colgroup.originalTotalWidth = getColsWidth(colgroup.normalColumns, 0, true);
        }
        colgroup.totalWidth = colgroup.leftFixedWidth + colgroup.rightFixedWidth + colgroup.normalWidth;
    };
    /**
     * @param {?=} isShow
     * @return {?}
     */
    DatagridFacadeService.prototype.showCheckbox = /**
     * @param {?=} isShow
     * @return {?}
     */
    function (isShow) {
        if (isShow === void 0) { isShow = true; }
        /** @type {?} */
        var colgroup = this._state.columnsGroup;
        this.updateState({ showCheckbox: isShow }, false);
        if (isShow) {
            colgroup.leftFixedWidth = colgroup.leftFixedWidth + this._state.checkboxColumnWidth;
        }
        else {
            colgroup.leftFixedWidth = colgroup.leftFixedWidth - this._state.checkboxColumnWidth;
        }
        this.columnResizeSubject.next(colgroup);
    };
    /**
     * @return {?}
     */
    DatagridFacadeService.prototype.hideCheckbox = /**
     * @return {?}
     */
    function () {
        this.showCheckbox(false);
    };
    /**
     * @param {?=} isShow
     * @return {?}
     */
    DatagridFacadeService.prototype.showLineNumber = /**
     * @param {?=} isShow
     * @return {?}
     */
    function (isShow) {
        if (isShow === void 0) { isShow = true; }
        /** @type {?} */
        var colgroup = this._state.columnsGroup;
        this.updateState({ showLineNumber: isShow }, false);
        if (isShow) {
            colgroup.leftFixedWidth = colgroup.leftFixedWidth + this._state.lineNumberWidth;
        }
        else {
            colgroup.leftFixedWidth = colgroup.leftFixedWidth - this._state.lineNumberWidth;
        }
        this.columnResizeSubject.next(colgroup);
    };
    /**
     * @return {?}
     */
    DatagridFacadeService.prototype.hideLineNumber = /**
     * @return {?}
     */
    function () {
        this.showLineNumber(false);
    };
    /**
     * @param {?} sortName
     * @param {?} sortOrder
     * @return {?}
     */
    DatagridFacadeService.prototype.setSortInfo = /**
     * @param {?} sortName
     * @param {?} sortOrder
     * @return {?}
     */
    function (sortName, sortOrder) {
        sortName = sortName || '';
        sortOrder = sortOrder || '';
        /** @type {?} */
        var fields = sortName.split(',');
        /** @type {?} */
        var orders = sortOrder.split(',');
        // if (!this._state.multiSort) {
        /** @type {?} */
        var colgroup = this._state.columnsGroup;
        /** @type {?} */
        var updateFieldOrder = (/**
         * @param {?} cols
         * @return {?}
         */
        function (cols) {
            if (!cols || !cols.length) {
                return;
            }
            cols.forEach((/**
             * @param {?} col
             * @return {?}
             */
            function (col) {
                col.order = undefined;
                /** @type {?} */
                var i = fields.findIndex((/**
                 * @param {?} f
                 * @return {?}
                 */
                function (f) { return f === col.field; }));
                if (i > -1) {
                    col.order = orders[i];
                }
            }));
        });
        updateFieldOrder(colgroup.normalColumns);
        updateFieldOrder(colgroup.leftFixed);
        updateFieldOrder(colgroup.rightFixed);
        // }
        this.updateState({ sortName: sortName, sortOrder: sortOrder }, false);
    };
    /**
     * @param {?} arr
     * @param {?} props
     * @param {?} orders
     * @return {?}
     */
    DatagridFacadeService.prototype.orderBy = /**
     * @param {?} arr
     * @param {?} props
     * @param {?} orders
     * @return {?}
     */
    function (arr, props, orders) {
        var _this = this;
        /** @type {?} */
        var colObj = props.reduce((/**
         * @param {?} c
         * @param {?} n
         * @return {?}
         */
        function (c, n) {
            c[n] = _this.getColumn(n);
            return c;
        }), {});
        return tslib_1.__spread(arr).sort((/**
         * @param {?} a
         * @param {?} b
         * @return {?}
         */
        function (a, b) {
            return props.reduce((/**
             * @param {?} acc
             * @param {?} prop
             * @param {?} i
             * @return {?}
             */
            function (acc, prop, i) {
                if (acc === 0) {
                    /** @type {?} */
                    var valA = Utils.getValue(prop, a);
                    /** @type {?} */
                    var valB = Utils.getValue(prop, b);
                    if (colObj[prop] && colObj[prop]['isMultilingualField']) {
                        valA = Utils.getMultilingualValue(valA, _this.localId);
                        valB = Utils.getMultilingualValue(valB, _this.localId);
                    }
                    if (valA === undefined || valA === null) {
                        valA = '';
                    }
                    if (valB === undefined || valB === null) {
                        valB = '';
                    }
                    var _a = tslib_1.__read(orders && orders[i] === 'desc' ? [valB, valA] : [valA, valB], 2), p1 = _a[0], p2 = _a[1];
                    if (typeof p1 === 'string') {
                        acc = p1.localeCompare(p2);
                    }
                    else {
                        acc = p1 > p2 ? 1 : p1 < p2 ? -1 : 0;
                    }
                }
                return acc;
            }), 0);
        }));
    };
    /**
     * @param {?} data
     * @return {?}
     */
    DatagridFacadeService.prototype.sort = /**
     * @param {?} data
     * @return {?}
     */
    function (data) {
        /** @type {?} */
        var orders = this._state.sortOrder.split(',');
        /** @type {?} */
        var fields = this._state.sortName.split(',');
        if (this._state.mergeCell && this._state.mergeFields && this._state.mergeFields.length) {
            /** @type {?} */
            var newOrders_1 = [];
            /** @type {?} */
            var newFields_1 = tslib_1.__spread(this._state.mergeFields);
            fields.forEach((/**
             * @param {?} f
             * @param {?} i
             * @return {?}
             */
            function (f, i) {
                /** @type {?} */
                var k = newFields_1.indexOf(f);
                if (k == -1) {
                    newFields_1.push(f);
                    k = newFields_1.length - 1;
                }
                newOrders_1[k] = orders[i];
            }));
            return this.orderBy(data, newFields_1, newOrders_1);
        }
        return this.orderBy(data, fields, orders);
    };
    /**
     * @param {?=} data
     * @return {?}
     */
    DatagridFacadeService.prototype.clientSort = /**
     * @param {?=} data
     * @return {?}
     */
    function (data) {
        if (this._state.sortName) {
            if (data) {
                this.updateState({ data: data }, false);
            }
            /** @type {?} */
            var sortedData = this.sort(this._state.data);
            this.loadData(sortedData, false);
        }
        else {
            this.clearSort();
        }
        this.clientSort$.emit({ sortName: this._state.sortName, sortOrder: this._state.sortOrder });
    };
    /**
     * @return {?}
     */
    DatagridFacadeService.prototype.clearSort = /**
     * @return {?}
     */
    function () {
        this.loadData(this._state.originalData, false);
    };
    /**
     * @param {?} filterData
     * @return {?}
     */
    DatagridFacadeService.prototype.loadFilterData = /**
     * @param {?} filterData
     * @return {?}
     */
    function (filterData) {
        this.loadData(filterData, false);
    };
    //#region 变更集
    //#region 变更集
    /**
     * @private
     * @param {?} rowid
     * @return {?}
     */
    DatagridFacadeService.prototype.hasRowChanges = 
    //#region 变更集
    /**
     * @private
     * @param {?} rowid
     * @return {?}
     */
    function (rowid) {
        /** @type {?} */
        var _changes = this._state.changes;
        if (!_changes) {
            return false;
        }
        return _changes[rowid];
    };
    /**
     * @param {?} changes
     * @return {?}
     */
    DatagridFacadeService.prototype.appendChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        if (!changes) {
            return;
        }
        /** @type {?} */
        var id = changes[this._state.idField];
        if (!id) {
            return;
        }
        /** @type {?} */
        var _id = '' + id;
        if (!this.hasRowChanges(_id)) {
            this._state.changes = this._state.changes || {};
            this._state.changes[_id] = changes;
        }
        else {
            this._state.changes[_id] = Object.assign(this._state.changes[_id], changes);
        }
    };
    /**
     * @return {?}
     */
    DatagridFacadeService.prototype.acceptChanges = /**
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var changes = this._state.changes;
        if (changes) {
            /** @type {?} */
            var keys = Object.keys(changes);
            keys.forEach((/**
             * @param {?} id
             * @return {?}
             */
            function (id) {
                _this.updateRow(id, changes[id]);
            }));
            this._state.originalData = cloneDeep(this._state.data);
        }
    };
    /**
     * @param {?=} rowid
     * @return {?}
     */
    DatagridFacadeService.prototype.rejectChanges = /**
     * @param {?=} rowid
     * @return {?}
     */
    function (rowid) {
        var _this = this;
        if (rowid === void 0) { rowid = null; }
        /** @type {?} */
        var changes = this._state.changes;
        if (changes) {
            if (!rowid) {
                this._state.data = cloneDeep(this._state.originalData);
                this._state.changes = null;
            }
            else {
                /** @type {?} */
                var rowChanges = this._state.changes['' + rowid];
                if (rowChanges) {
                    /** @type {?} */
                    var orgiRow_1 = this._state.originalData.find((/**
                     * @param {?} r
                     * @return {?}
                     */
                    function (r) { return _this.primaryId(r) === rowid; }));
                    this._state.data.forEach((/**
                     * @param {?} r
                     * @return {?}
                     */
                    function (r) {
                        if (_this.primaryId(r) === rowid) {
                            r = cloneDeep(orgiRow_1);
                        }
                    }));
                }
            }
            this.refresh();
        }
    };
    /**
     * @return {?}
     */
    DatagridFacadeService.prototype.getChanges = /**
     * @return {?}
     */
    function () {
        return this._state.changes;
    };
    /**
     * @return {?}
     */
    DatagridFacadeService.prototype.refresh = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var data = cloneDeep(this._state.data);
        this.loadData(data);
    };
    //#endregion
    /**
     * 构造合计行
     * @param data 数据集合
     */
    //#endregion
    /**
     * 构造合计行
     * @param {?} data 数据集合
     * @return {?}
     */
    DatagridFacadeService.prototype.getFooterData = 
    //#endregion
    /**
     * 构造合计行
     * @param {?} data 数据集合
     * @return {?}
     */
    function (data) {
        var _this = this;
        if (!data || !data.length) {
            return [];
        }
        // const columns = this._state.flatColumns;
        /** @type {?} */
        var columns = flatten(this._state.columns).filter((/**
         * @param {?} col
         * @return {?}
         */
        function (col) { return !col.colspan; }));
        /** @type {?} */
        var footerRow = {};
        columns.forEach((/**
         * @param {?} col
         * @return {?}
         */
        function (col) {
            if (col.footer && col.footer.options) {
                /** @type {?} */
                var options = col.footer.options;
                /** @type {?} */
                var text = options.text;
                /** @type {?} */
                var typ = (/** @type {?} */ (options.calculationType));
                if (typ !== undefined && typ != -1) {
                    /** @type {?} */
                    var val = _this.calculation(data, typ, col);
                    footerRow[col.field] = val;
                }
                else {
                    footerRow[col.field] = text || '';
                }
            }
            else {
                footerRow[col.field] = '';
            }
        }));
        return [footerRow];
    };
    /**
     * @private
     * @param {?} items
     * @param {?} fields
     * @return {?}
     */
    DatagridFacadeService.prototype.arrToGroup = /**
     * @private
     * @param {?} items
     * @param {?} fields
     * @return {?}
     */
    function (items, fields) {
        if (fields.length) {
            /** @type {?} */
            var first_1 = fields.shift();
            /** @type {?} */
            var g1 = groupBy(items, (/**
             * @param {?} n
             * @return {?}
             */
            function (n) { return Utils.getValue(first_1, n); }));
            this.toGroup(g1, fields);
            return g1;
        }
    };
    /**
     * @private
     * @param {?} g1
     * @param {?} fieldArr
     * @return {?}
     */
    DatagridFacadeService.prototype.toGroup = /**
     * @private
     * @param {?} g1
     * @param {?} fieldArr
     * @return {?}
     */
    function (g1, fieldArr) {
        var _this = this;
        if (fieldArr.length) {
            Object.keys(g1).forEach((/**
             * @param {?} k
             * @return {?}
             */
            function (k) {
                /** @type {?} */
                var items = g1[k];
                /** @type {?} */
                var _nextFields = fieldArr.map((/**
                 * @param {?} n
                 * @return {?}
                 */
                function (n) { return n; }));
                /** @type {?} */
                var _f = _nextFields.shift();
                g1[k] = groupBy(items, (/**
                 * @param {?} n
                 * @return {?}
                 */
                function (n) { return Utils.getValue(_f, n); }));
                if (_nextFields.length) {
                    _this.toGroup(g1[k], _nextFields);
                }
            }));
        }
    };
    /**
     * @private
     * @param {?} groupRows
     * @param {?} initLevel
     * @param {?} parent
     * @return {?}
     */
    DatagridFacadeService.prototype.groupRows2Flat = /**
     * @private
     * @param {?} groupRows
     * @param {?} initLevel
     * @param {?} parent
     * @return {?}
     */
    function (groupRows, initLevel, parent) {
        var _this = this;
        /** @type {?} */
        var results = [];
        if (initLevel === undefined) {
            initLevel = 0;
        }
        /** @type {?} */
        var idfield = this._state.idField;
        /** @type {?} */
        var columns = this._state.flatColumns;
        /** @type {?} */
        var data = this._state.data;
        /** @type {?} */
        var groupFieldArr = this._state.groupField.split(',');
        /** @type {?} */
        var pid = parent ? parent[idfield] : null;
        /** @type {?} */
        var colspan = this._state.columnsGroup.normalColumns.length;
        /** @type {?} */
        var expandGroupRows = this._state.expandGroupRows;
        Object.keys(groupRows).forEach((/**
         * @param {?} k
         * @param {?} m
         * @return {?}
         */
        function (k, m) {
            var _a, _b;
            /** @type {?} */
            var groupItem = (_a = {}, _a[idfield] = Utils.uuid(), _a[IS_GROUP_ROW_FIELD] = true, _a[GROUP_LEVEL_FIELD] = initLevel, _a.data = {}, _a.value = k, _a[GROUP_VISIBLE_FIELD] = true, _a.expanded = expandGroupRows, _a.field = groupFieldArr[initLevel], _a.colspan = colspan, _a.total = 0, _a.rows = [], _a[GROUP_ROW_FIELD] = pid, _a);
            // TFS: 356955
            if (parent) {
                groupItem.rows = parent.rows.filter((/**
                 * @param {?} n
                 * @return {?}
                 */
                function (n) { return !n[IS_GROUP_ROW_FIELD] &&
                    !n[IS_GROUP_FOOTER_ROW_FIELD] && Utils.getValue(groupFieldArr[initLevel], n) === k; }));
            }
            else {
                groupItem.rows = data.filter((/**
                 * @param {?} n
                 * @return {?}
                 */
                function (n) { return '' + Utils.getValue(groupFieldArr[initLevel], n) === k; }));
            }
            if (parent) {
                parent.rows.push(groupItem);
            }
            groupItem.total = groupItem.rows.filter((/**
             * @param {?} n
             * @return {?}
             */
            function (n) { return !n[IS_GROUP_ROW_FIELD] && !n[IS_GROUP_FOOTER_ROW_FIELD]; })).length;
            results.push(groupItem);
            /** @type {?} */
            var items = groupRows[k];
            if (isPlainObject(items)) {
                /** @type {?} */
                var level = initLevel + 1;
                results = results.concat(_this.groupRows2Flat(items, level, groupItem));
            }
            else {
                groupItem.total = items.length;
                items.map((/**
                 * @param {?} n
                 * @return {?}
                 */
                function (n) {
                    n[GROUP_ROW_FIELD] = groupItem[idfield];
                    n[GROUP_VISIBLE_FIELD] = expandGroupRows;
                    n[GROUP_LEVEL_FIELD] = groupItem[GROUP_LEVEL_FIELD] + 1;
                    return n;
                }));
                groupItem.rows = items;
                results = results.concat(items);
            }
            if (_this._state.groupFooter) {
                /** @type {?} */
                var footerItem = (_b = {},
                    _b[IS_GROUP_FOOTER_ROW_FIELD] = true,
                    _b[GROUP_ROW_FIELD] = groupItem[idfield],
                    _b[GROUP_VISIBLE_FIELD] = expandGroupRows,
                    _b[GROUP_LEVEL_FIELD] = initLevel,
                    _b.data = {},
                    _b);
                groupItem.rows.push(footerItem);
                results.push(footerItem);
            }
        }));
        return results;
    };
    /** 更新分组合计行数据 */
    /**
     * 更新分组合计行数据
     * @private
     * @param {?} groupFooterRow
     * @param {?} columns
     * @param {?} groupRows
     * @return {?}
     */
    DatagridFacadeService.prototype.updateGroupFooterData = /**
     * 更新分组合计行数据
     * @private
     * @param {?} groupFooterRow
     * @param {?} columns
     * @param {?} groupRows
     * @return {?}
     */
    function (groupFooterRow, columns, groupRows) {
        var _this = this;
        columns.forEach((/**
         * @param {?} col
         * @return {?}
         */
        function (col) {
            if (col.groupFooter && col.groupFooter.options) {
                /** @type {?} */
                var options = col.groupFooter.options;
                /** @type {?} */
                var text = options.text;
                /** @type {?} */
                var typ = (/** @type {?} */ (options.calculationType));
                if (typ !== undefined && typ != -1) {
                    /** @type {?} */
                    var val = _this.calculation(groupRows, typ, col);
                    groupFooterRow.data[col.field] = val;
                }
                else {
                    groupFooterRow.data[col.field] = text || '';
                }
            }
            else {
                groupFooterRow.data[col.field] = '';
            }
        }));
    };
    /** 多字段分组
     * groupField 以逗号分隔，从左到右依次进行分组
     */
    /**
     * 多字段分组
     * groupField 以逗号分隔，从左到右依次进行分组
     * @private
     * @param {?} data
     * @return {?}
     */
    DatagridFacadeService.prototype.groupRows2 = /**
     * 多字段分组
     * groupField 以逗号分隔，从左到右依次进行分组
     * @private
     * @param {?} data
     * @return {?}
     */
    function (data) {
        var _this = this;
        if (data && data.length) {
            /** @type {?} */
            var columns_1 = this._state.flatColumns;
            /** @type {?} */
            var groupField = this._state.groupField || '';
            if (!groupField) {
                return data;
            }
            /** @type {?} */
            var groupData = this.arrToGroup(data, groupField.split(','));
            /** @type {?} */
            var result_1 = this.groupRows2Flat(groupData, 0, null);
            /** @type {?} */
            var k_1 = 0;
            /** @type {?} */
            var prow_1 = (/**
             * @param {?} pid
             * @return {?}
             */
            function (pid) { return result_1.find((/**
             * @param {?} n
             * @return {?}
             */
            function (n) { return n[_this._state.idField] === pid; })); });
            result_1.map((/**
             * @param {?} n
             * @param {?} i
             * @return {?}
             */
            function (n, i) {
                if (!n[IS_GROUP_ROW_FIELD] && !n[IS_GROUP_FOOTER_ROW_FIELD]) {
                    n[ROW_INDEX_FIELD] = k_1;
                    k_1++;
                }
                // 更新合计行数据
                if (n[IS_GROUP_FOOTER_ROW_FIELD]) {
                    /** @type {?} */
                    var rows = prow_1(n[GROUP_ROW_FIELD]).rows.filter((/**
                     * @param {?} r
                     * @return {?}
                     */
                    function (r) { return !r[IS_GROUP_ROW_FIELD] && !r[IS_GROUP_FOOTER_ROW_FIELD]; }));
                    _this.updateGroupFooterData(n, columns_1, rows);
                }
                return n;
            }));
            return result_1;
        }
        return [];
    };
    /**
     * @param {?} groupFooter
     * @return {?}
     */
    DatagridFacadeService.prototype.showGroupFooter = /**
     * @param {?} groupFooter
     * @return {?}
     */
    function (groupFooter) {
        this.updateState({ groupFooter: groupFooter }, false);
        this.updateVirthualRows(0);
    };
    /**
     * @param {?} groupRowId
     * @return {?}
     */
    DatagridFacadeService.prototype.updateGroupFooter = /**
     * @param {?} groupRowId
     * @return {?}
     */
    function (groupRowId) {
        var _this = this;
        /** @type {?} */
        var groupRow = this._state.virtual.virtualRows.find((/**
         * @param {?} n
         * @return {?}
         */
        function (n) {
            return n['id'] === groupRowId;
        }));
        if (groupRow) {
            /** @type {?} */
            var groupRows = groupRow.rows;
            /** @type {?} */
            var groupFooterRows = groupRows.filter((/**
             * @param {?} n
             * @return {?}
             */
            function (n) { return n['__group_footer__']; }));
            /** @type {?} */
            var columns_2 = this._state.flatColumns;
            /** @type {?} */
            var rows_1 = groupRows.filter((/**
             * @param {?} n
             * @return {?}
             */
            function (n) { return !n['__group_footer__']; }));
            groupFooterRows.forEach((/**
             * @param {?} n
             * @return {?}
             */
            function (n) {
                _this.updateGroupFooterData(n, columns_2, rows_1);
            }));
        }
    };
    /**
     * @private
     * @param {?} data
     * @param {?} typ
     * @param {?} col
     * @return {?}
     */
    DatagridFacadeService.prototype.calculation = /**
     * @private
     * @param {?} data
     * @param {?} typ
     * @param {?} col
     * @return {?}
     */
    function (data, typ, col) {
        /** @type {?} */
        var val = '';
        // TFS: 357000
        // http://10.24.1.11:8080/tfs/GSP/GSPCloud/web/_queries?id=357000&triage=true&fullScreen=false&_a=edit
        if (!data || !data.length) {
            return '';
        }
        /** @type {?} */
        var field = col.field;
        /** @type {?} */
        var arr = data.map((/**
         * @param {?} o
         * @return {?}
         */
        function (o) { return Utils.getValue(field, o) || 0; }));
        switch (typ) {
            case CalculationType.sum:
                // val = sumBy(data, (o) => Utils.getValue(field, o));
                val = BigNumber.sum.apply(null, arr).toFixed();
                break;
            case CalculationType.max:
                // const maxObj = maxBy(data, (o) => Utils.getValue(field, o));
                // val = Utils.getValue(field, maxObj);
                val = BigNumber.max.apply(null, arr).toFixed();
                break;
            case CalculationType.min:
                // const minObj = minBy(data, (o) => Utils.getValue(field, o));
                // val = Utils.getValue(field, minObj);
                val = BigNumber.min.apply(null, arr).toFixed();
                break;
            case CalculationType.average:
                // val = meanBy(data, (o) => Utils.getValue(field, o));
                val = BigNumber.sum.apply(null, arr).div(arr.length).toFixed();
                break;
            case CalculationType.count:
                val = data.length;
                break;
        }
        return val;
    };
    //#region 组件初始属性
    //#region 组件初始属性
    /**
     * @param {?} opts
     * @return {?}
     */
    DatagridFacadeService.prototype.setinitialOptions = 
    //#region 组件初始属性
    /**
     * @param {?} opts
     * @return {?}
     */
    function (opts) {
        this._state.initialOptions = {};
        // 分组
        this._state.initialOptions['groupField'] = opts.groupField;
        // 排序
        this._state.initialOptions['sort'] = {
            sortName: opts.sortName,
            sortOrder: opts.sortOrder
        };
        // 列显示隐藏、对齐方式
        if (opts.columns && opts.columns[0]) {
            this._state.initialOptions['columnFields'] = ((/** @type {?} */ (opts.columns[0]))).map((/**
             * @param {?} n
             * @return {?}
             */
            function (n) {
                return {
                    width: n.width || 100,
                    field: n.field,
                    halign: n.halign,
                    align: n.align,
                    visible: n.visible,
                    footer: cloneDeep(n.footer || {}),
                    groupFooter: cloneDeep(n.groupFooter || {})
                };
            }));
        }
    };
    DatagridFacadeService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    DatagridFacadeService.ctorParameters = function () { return [
        { type: HttpClient }
    ]; };
    return DatagridFacadeService;
}());
export { DatagridFacadeService };
if (false) {
    /** @type {?} */
    DatagridFacadeService.prototype.localId;
    /**
     * @type {?}
     * @protected
     */
    DatagridFacadeService.prototype._state;
    /** @type {?} */
    DatagridFacadeService.prototype.store;
    /** @type {?} */
    DatagridFacadeService.prototype.virtualRowSubject;
    /** @type {?} */
    DatagridFacadeService.prototype.gridSizeSubject;
    /** @type {?} */
    DatagridFacadeService.prototype.errorSubject;
    /**
     * @type {?}
     * @private
     */
    DatagridFacadeService.prototype.selectRowSubject;
    /**
     * @type {?}
     * @private
     */
    DatagridFacadeService.prototype.unSelectRowSubject;
    /**
     * @type {?}
     * @private
     */
    DatagridFacadeService.prototype.columnResizeSubject;
    /**
     * @type {?}
     * @private
     */
    DatagridFacadeService.prototype.clearSelectionSubject;
    /**
     * @type {?}
     * @private
     */
    DatagridFacadeService.prototype.checkRowSubject;
    /**
     * @type {?}
     * @private
     */
    DatagridFacadeService.prototype.unCheckRowSubject;
    /**
     * @type {?}
     * @private
     */
    DatagridFacadeService.prototype.clearCheckedsSubject;
    /**
     * @type {?}
     * @private
     */
    DatagridFacadeService.prototype.clearAllSubject;
    /**
     * @type {?}
     * @private
     */
    DatagridFacadeService.prototype.checkAllSubject;
    /**
     * @type {?}
     * @private
     */
    DatagridFacadeService.prototype.unCheckAllSubject;
    /**
     * @type {?}
     * @private
     */
    DatagridFacadeService.prototype.selectAllSubject;
    /**
     * @type {?}
     * @private
     */
    DatagridFacadeService.prototype.selectCellSubject;
    /** @type {?} */
    DatagridFacadeService.prototype.error$;
    /** @type {?} */
    DatagridFacadeService.prototype.selectRow$;
    /** @type {?} */
    DatagridFacadeService.prototype.unSelectRow$;
    /** @type {?} */
    DatagridFacadeService.prototype.columnResize$;
    /** @type {?} */
    DatagridFacadeService.prototype.clearSelections$;
    /** @type {?} */
    DatagridFacadeService.prototype.checkRow$;
    /** @type {?} */
    DatagridFacadeService.prototype.unCheckRow$;
    /** @type {?} */
    DatagridFacadeService.prototype.clearCheckeds$;
    /** @type {?} */
    DatagridFacadeService.prototype.clearAll$;
    /** @type {?} */
    DatagridFacadeService.prototype.checkAll$;
    /** @type {?} */
    DatagridFacadeService.prototype.unCheckAll$;
    /** @type {?} */
    DatagridFacadeService.prototype.selectAll$;
    /** @type {?} */
    DatagridFacadeService.prototype.currentCell$;
    /** @type {?} */
    DatagridFacadeService.prototype.editCell$;
    /** @type {?} */
    DatagridFacadeService.prototype.clientSort$;
    /** @type {?} */
    DatagridFacadeService.prototype.rowAppend$;
    /** @type {?} */
    DatagridFacadeService.prototype.rowUpdate$;
    /** @type {?} */
    DatagridFacadeService.prototype.rowDelete$;
    /** @type {?} */
    DatagridFacadeService.prototype.updateCheckboxState$;
    /** @type {?} */
    DatagridFacadeService.prototype.state$;
    /** @type {?} */
    DatagridFacadeService.prototype.columnGroup$;
    /** @type {?} */
    DatagridFacadeService.prototype.gridSize$;
    /** @type {?} */
    DatagridFacadeService.prototype.data$;
    /** @type {?} */
    DatagridFacadeService.prototype.difference;
    /** @type {?} */
    DatagridFacadeService.prototype.differenceBy;
    /**
     * @type {?}
     * @private
     */
    DatagridFacadeService.prototype.http;
}
//# sourceMappingURL=data:application/json;base64,