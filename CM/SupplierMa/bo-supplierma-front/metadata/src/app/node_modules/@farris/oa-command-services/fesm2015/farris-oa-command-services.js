import { MessagerService } from '@farris/ui-messager';
import { Injectable, NgModule, Injector, defineInjectable } from '@angular/core';
import { BehaviorSubject } from 'rxjs';

/**
 * @fileoverview added by tsickle
 * Generated from: lib/print-web-page/entity.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @enum {string} */
const templateType = {
    card: "card",
};

/**
 * @fileoverview added by tsickle
 * Generated from: lib/print-web-page/print-web-page.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class PrintWebPageService {
    /**
     * @param {?} msgSer
     */
    constructor(msgSer) {
        this.msgSer = msgSer;
        window.onbeforeprint = (/**
         * @return {?}
         */
        () => {
            if (this.currentTemplate == templateType.card) {
                /** @type {?} */
                const rootLayout = document.getElementById('root-layout');
                /** @type {?} */
                const mainContainer = document.getElementById('main-container');
                if (rootLayout && mainContainer) {
                    rootLayout.style.display = 'block';
                    rootLayout.style.position = 'relative';
                    mainContainer.style.display = 'block';
                    rootLayout.parentElement.style.position = 'relative';
                    document.title = '';
                }
                else {
                    this.msgSer.error('未找到模板中关键节点，请检查命令传参中模板类型是否正确。');
                }
            }
        });
        window.onafterprint = (/**
         * @return {?}
         */
        () => {
            if (this.currentTemplate == templateType.card) {
                /** @type {?} */
                const rootLayout = document.getElementById('root-layout');
                /** @type {?} */
                const mainContainer = document.getElementById('main-container');
                if (rootLayout && mainContainer) {
                    mainContainer.setAttribute('style', '');
                    rootLayout.setAttribute('style', '');
                    rootLayout.parentElement.setAttribute('style', '');
                }
            }
        });
    }
    /**
     * @param {?=} tempType
     * @return {?}
     */
    printWebPage(tempType = templateType.card) {
        this.currentTemplate = tempType;
        if (!window.navigator.userAgent.includes('AppleWebKit/')) {
            this.msgSer.prompt('提示', '为保证打印效果，推荐使用谷歌浏览器进行打印。是否继续打印？').subscribe((/**
             * @param {?} confirmed
             * @return {?}
             */
            (confirmed) => {
                if (confirmed) {
                    window.print();
                }
            }));
        }
        else {
            window.print();
        }
    }
}
PrintWebPageService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
PrintWebPageService.ctorParameters = () => [
    { type: MessagerService }
];

/**
 * @fileoverview added by tsickle
 * Generated from: lib/task-center-bridge/entity.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @enum {string} */
const WFActionType = {
    Resubmit: "Resubmit",
};

/**
 * @fileoverview added by tsickle
 * Generated from: lib/task-center-bridge/task-center-bridge.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class TaskCenterBridgeService {
    constructor() { }
    /**
     * @param {?} customerCmds
     * @return {?}
     */
    initTaskCenterBridge(customerCmds) {
        /** @type {?} */
        const bridgeWin = window.parent;
        /** @type {?} */
        let frameContext;
        try {
            frameContext = this['context'].frameContext;
        }
        catch (error) {
            throw new Error('can not find frameContex');
        }
        /** @type {?} */
        let slienceSaveTask;
        try {
            slienceSaveTask = this['context'].frameContext.viewModel.slienceSave1;
        }
        catch (error) {
            // 不存在静音保存命令
        }
        if (bridgeWin) {
            bridgeWin['taskCenterBeforeLoad'] = (/**
             * @param {?} actionObj
             * @return {?}
             */
            (actionObj) => {
                return new Promise((/**
                 * @param {?} resolve
                 * @param {?} reject
                 * @return {?}
                 */
                (resolve, reject) => {
                    const { action } = actionObj;
                    if (frameContext.uiState['UIStateInProcess'] == 'Approving' && frameContext.uiState['formConfigId']) {
                        slienceSaveTask.call(this).subscribe((/**
                         * @return {?}
                         */
                        () => {
                            resolve({
                                result: true
                            });
                        }), (/**
                         * @return {?}
                         */
                        () => {
                            window.document.body.click();
                            resolve({
                                result: false
                            });
                        }));
                    }
                    else if (action.code == WFActionType.Resubmit && slienceSaveTask) {
                        slienceSaveTask.call(this).subscribe((/**
                         * @return {?}
                         */
                        () => {
                            resolve({
                                result: true
                            });
                        }));
                    }
                    else {
                        resolve({
                            result: true
                        });
                    }
                }));
            });
        }
    }
}
TaskCenterBridgeService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */
TaskCenterBridgeService.ctorParameters = () => [];
/** @nocollapse */ TaskCenterBridgeService.ngInjectableDef = defineInjectable({ factory: function TaskCenterBridgeService_Factory() { return new TaskCenterBridgeService(); }, token: TaskCenterBridgeService, providedIn: "root" });

/**
 * @fileoverview added by tsickle
 * Generated from: lib/transit-approval/transit-approval.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class TransitApprovalStatus {
    /**
     * @param {?} injetor
     */
    constructor(injetor) {
        this.injetor = injetor;
        // 因为注位置的问题，这样子拿不到
        // this.stateMachineSer = this.injetor.get(StateMachineService);
    }
    /**
     * @return {?}
     */
    switchStatus() {
        /** @type {?} */
        const result = new BehaviorSubject('Cancel');
        //  判断流程传参  formConfigId
        /** @type {?} */
        let frameContext;
        try {
            frameContext = this['context'].frameContext;
        }
        catch (error) {
            throw new Error('can not find frameContex');
        }
        if (frameContext.uiState['UIStateInProcess'] == 'Approving' && frameContext.uiState['formConfigId']) {
            result.next('Edit');
        }
        return result;
    }
}
TransitApprovalStatus.decorators = [
    { type: Injectable }
];
/** @nocollapse */
TransitApprovalStatus.ctorParameters = () => [
    { type: Injector }
];

/**
 * @fileoverview added by tsickle
 * Generated from: lib/oa-command-services-module.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class OACommandServicesModule {
    constructor() { }
}
OACommandServicesModule.decorators = [
    { type: NgModule, args: [{
                providers: [
                    TaskCenterBridgeService,
                    PrintWebPageService,
                    TransitApprovalStatus,
                ],
                imports: [],
                exports: [],
                entryComponents: []
            },] }
];
/** @nocollapse */
OACommandServicesModule.ctorParameters = () => [];

/**
 * @fileoverview added by tsickle
 * Generated from: public-api.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * Generated from: farris-oa-command-services.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { OACommandServicesModule, PrintWebPageService, TaskCenterBridgeService, TransitApprovalStatus };

//# sourceMappingURL=farris-oa-command-services.js.map