import { Injectable, ElementRef } from '@angular/core';
import { Repository, FrameContext } from '@farris/devkit';
import { FrameContextService } from './frame-context.service';
import { FormControlService } from './form-control.service';
const FIXED_COLUMN_START_INDEX = 5000;
const GRID_COLUMN_START_INDEX = 10000;
/**
 * 表单验证服务
 * @scope FrameComponent
 */
class FocusInvalidService {
    /**
     * 构造函数
     */
    constructor(repository, frameContext, frameContextService, formControlService) {
        this.repository = repository;
        this.frameContext = frameContext;
        this.frameContextService = frameContextService;
        this.formControlService = formControlService;
    }
    /**
     * 向第一个验证不通过的字段设置焦点
     */
    focusInvalidInput(verifyInformations, rootElement) {
        // 无验证不通过信息时，直接返回。
        if (!verifyInformations || !verifyInformations.length) {
            return;
        }
        let targetField = null;
        const firstVerifyInformation = this.selectFirstVerifyInformation(verifyInformations, rootElement);
        if (firstVerifyInformation) {
            targetField = firstVerifyInformation.targetField;
            if (targetField) {
                const canFocus = this.focusElement(targetField, rootElement);
                if (canFocus) {
                    verifyInformations['focused'] = true;
                }
            }
        }
    }
    /**
     * 设置DataGrid单元格焦点
     */
    focusGridCell(verifyInformations, focusableDataGrid) {
        if (!verifyInformations || !verifyInformations.length || verifyInformations['focused'] == true || focusableDataGrid.disabled === true) {
            return;
        }
        let targetField = null;
        let targetId = null;
        const firstVerifyInformation = this.selectFirstVerifyInformation(verifyInformations);
        if (firstVerifyInformation) {
            targetField = firstVerifyInformation.targetField;
            targetId = firstVerifyInformation.id;
            verifyInformations['focused'] = true;
            focusableDataGrid.editCell(targetId, targetField);
        }
    }
    updateVerifyInformationsIndex(verifyInformations, rootElement) {
        verifyInformations = verifyInformations.filter((verifyInformation) => {
            const frameContexts = this.getFrameContextsByPropertyPath(verifyInformation.fullPath, '/');
            const frameContext = frameContexts && frameContexts.filter(frameContext => frameContext && frameContext.frameId === this.frameContext.frameId);
            return frameContext ? true : false;
        });
        return verifyInformations.map((verifyInformation) => {
            let tabIndex = -1;
            if (verifyInformation) {
                if (rootElement && verifyInformation.targetField) {
                    const input = this.getInputElementById(verifyInformation.targetField, rootElement);
                    tabIndex = input && input.getAttribute('tabindex') || -1;
                    tabIndex = Number(tabIndex);
                }
                // const frameContexts = this.getFrameContextsByPropertyPath(verifyInformation.fullPath, '/');
                const frameContext = this.frameContext; //frameContexts && frameContexts[0] || null;
                const frameIndex = frameContext.index + 1;
                verifyInformation.tabIndex = tabIndex;
                verifyInformation.domIndex = -1;
                verifyInformation.frameIndex = -1;
                verifyInformation.position = tabIndex;
                if (frameContext) {
                    const domIndex = verifyInformation.fullPath && this.getFieldIndex(frameContext, verifyInformation.fullPath) || 0;
                    if (domIndex > 0) {
                        const rowIndex = verifyInformation.index || 0;
                        verifyInformation.domIndex = domIndex;
                        verifyInformation.frameIndex = frameContext.index;
                        verifyInformation.position = tabIndex > 0 ? tabIndex : (frameIndex * 1000 + rowIndex * 1000 + domIndex);
                    }
                }
            }
            return verifyInformation;
        });
    }
    isGridComponent(frameContext) {
        if (frameContext) {
            const dataGridColumnsName = frameContext.viewModel['dataGridColumnsName'] || null;
            return dataGridColumnsName ? true : false;
        }
        return undefined;
    }
    getColumnIndex(frameContext, binding) {
        binding = binding.split('/').filter(p => p).join('/');
        const bindingPaths = frameContext.viewModel.bindingPath.split('/').filter(p => p);
        const dataGridColumnsName = frameContext.viewModel['dataGridColumnsName'] || null;
        const frameIndex = frameContext.index + 1;
        if (!dataGridColumnsName) {
            return undefined;
        }
        let columns = frameContext.viewModel[dataGridColumnsName];
        if (!columns || columns.length < 1) {
            return undefined;
        }
        // 打平columns
        columns = columns.reduce((results, item) => {
            if (Array.isArray(item)) {
                return results.concat(item);
            }
            return results.concat([item]);
        }, []);
        let position = -1;
        for (let index = 0; index < columns.length; index++) {
            const column = columns[index];
            const fields = column && column.field && column.field.split('.').filter(p => p) || null;
            if (!fields) {
                continue;
            }
            if (bindingPaths.concat(fields).join('/') === binding) {
                const fixed = column.fixed;
                if (fixed) {
                    const fixedColumns = columns.filter(item => item.fixed === fixed);
                    const fixedColumnIndex = this.getIndexFromColumns(fixedColumns, binding);
                    if (fixed === 'left') {
                        position = frameIndex * FIXED_COLUMN_START_INDEX + fixedColumnIndex;
                    }
                    else {
                        position = frameIndex * GRID_COLUMN_START_INDEX + 1000 + fixedColumnIndex;
                    }
                }
                else {
                    position = frameIndex * GRID_COLUMN_START_INDEX + index;
                }
                break;
            }
        }
        return position;
    }
    getIndexFromColumns(columns, binding) {
        const bindingPaths = this.frameContext.viewModel.bindingPath.split('/').filter(p => p);
        return columns.findIndex(column => {
            const fields = column && column.field && column.field.split('.').filter(p => p) || null;
            if (!fields) {
                return false;
            }
            if (bindingPaths.concat(fields).join('/') === binding) {
                return true;
            }
            return false;
        });
    }
    selectFirstVerifyInformation(verifyInformations, rootElement) {
        verifyInformations = this.updateVerifyInformationsIndex(verifyInformations, rootElement);
        verifyInformations.sort((v1, v2) => Number(v1.position) - Number(v2.position));
        return verifyInformations && verifyInformations.length > 0 && verifyInformations[0] || null;
    }
    getInputElementById(targetField, rootElement) {
        let element = rootElement.nativeElement.ownerDocument.getElementById(targetField) || null;
        if (element && element.tagName !== 'INPUT') {
            const inputs = element.getElementsByTagName('input');
            if (inputs.length) {
                element = inputs[0];
            }
        }
        return element;
    }
    getFrameContextsByPropertyPath(propertyPath, separtor = '/') {
        if (!propertyPath) {
            return [];
        }
        const frameContexts = this.frameContext && this.frameContext.appContext.frameContextManager.getFrameContexts() || [];
        return frameContexts.filter((frameContext) => {
            const formControls = frameContext && frameContext.form && frameContext.form.ngFormControls || {};
            const bindingPath = frameContext && frameContext.viewModel && frameContext.viewModel.bindingPath || '';
            if (formControls && Object.keys(formControls).length > 0) {
                const key = Object.keys(formControls).find((key) => {
                    const formControl = formControls[key];
                    if (!formControl || !formControl.binding) {
                        return false;
                    }
                    const bindings = formControl.binding.split('.').filter(p => p);
                    const bindingPaths = bindingPath.split('/').filter(p => p);
                    const fullPath = bindingPaths.concat(bindings);
                    return propertyPath.split(separtor).filter(p => p).join('/') === fullPath.join('/');
                });
                return key ? true : false;
            }
            return false;
        });
    }
    getFormControlIndexByBindingPath(frameContext, binding) {
        const ngFormControls = this.getFormControlsByFrameContext(frameContext);
        if (!ngFormControls) {
            return null;
        }
        const bindings = binding.split('/').filter(p => p);
        return Object.values(ngFormControls).findIndex((ngFormControl) => {
            if (!ngFormControl) {
                return false;
            }
            const bindingPath = frameContext.viewModel.bindingPath;
            const bindingPaths = bindingPath.split('/').filter(p => p);
            const formControlBindingPaths = ngFormControl.binding.split('.').filter(p => p);
            const fullPath = bindingPaths.concat(formControlBindingPaths);
            return fullPath.join('/') === bindings.join('/');
        });
    }
    getFieldIndex(frameContext, binding) {
        const isGridComponent = this.isGridComponent(frameContext);
        if (isGridComponent) {
            return this.getColumnIndex(frameContext, binding);
        }
        else {
            return this.getFormControlIndexByBindingPath(frameContext, binding);
        }
    }
    getFormControlsByFrameContext(frameContext) {
        return frameContext && frameContext.form && frameContext.form.ngFormControls || null;
    }
    focusElement(elementId, rootElement) {
        let focused = false;
        let elementToFocus = rootElement.nativeElement.ownerDocument.getElementById(elementId);
        // 未获取到指定字段时，返回，不再设置焦点。
        if (elementToFocus) {
            // 如果有多个id重复的元素，则不定位
            const elements = rootElement.nativeElement.ownerDocument.querySelectorAll(`#${elementId}`);
            if (elements && elements.length > 1) {
                return focused;
            }
            // 如果绑定目标字段的控件不是Input元素，则查找其下级节点。
            if (elementToFocus.tagName !== 'INPUT') {
                const subElements = elementToFocus.getElementsByTagName('input');
                if (subElements.length) {
                    elementToFocus = subElements[0];
                }
            }
            elementToFocus.focus();
            focused = true;
        }
        return focused;
    }
    /**
     * 设置焦点
     * @param verifyInformation 错误信息
     * @param frameContext 上下文
     * @returns
     */
    focus(verifyInformation, frameContext) {
        if (!verifyInformation) {
            return;
        }
        const isGridValidation = verifyInformation.index !== null;
        if (isGridValidation) {
            const grid = this.getGridRef(frameContext);
            if (grid) {
                setTimeout(() => {
                    grid.editCell(verifyInformation.id, verifyInformation.targetField);
                }, 0);
            }
        }
        else {
            const frameElement = this.getComponentRef(frameContext);
            const elementId = verifyInformation.targetField;
            this.focusById(elementId, frameElement);
        }
    }
    /**
     * 通过控件id设置焦点
     * @param elementId
     * @param elementRef
     */
    focusById(elementId, elementRef) {
        const document = elementRef && elementRef.nativeElement.ownerDocument || window.document;
        if (document) {
            const element = document.getElementById(elementId);
            if (element.tagName !== 'INPUT') {
                const subElements = element.getElementsByTagName('input');
                if (subElements.length) {
                    const input = subElements[0];
                    if (input && typeof input.focus === 'function') {
                        input.focus();
                    }
                }
            }
            else {
                element.focus();
            }
        }
    }
    /**
     * 获取组件实例
     * @param frameContext
     * @returns
     */
    getComponentRef(frameContext) {
        return this.frameContext && this.frameContext.injector.get(ElementRef, null) || null;
    }
    /**
     * 获取grid实例
     * @param frameContext frameContext
     * @returns
     */
    getGridRef(frameContext) {
        const namespace = frameContext.namespace;
        const bindingPath = frameContext.viewModel.bindingPath;
        const frameContexts = this.frameContext.appContext.frameContextManager.getFrameContextsByNamespace(namespace) || [];
        const matchedFrameContexts = frameContexts.filter((frameContext) => frameContext.viewModel && frameContext.viewModel.bindingPath.split('/').filter(p => p).toString() === bindingPath.split('/').filter(p => p).toString());
        let result = null;
        if (matchedFrameContexts) {
            matchedFrameContexts.every((frameContext) => {
                const frameId = frameContext.frameId;
                const componentsMap = this.frameContext.appContext.componentManager.getComponentsByFrameId(frameId);
                if (!componentsMap) {
                    return true;
                }
                const datagridComponent = Array.from(componentsMap.values()).find((component) => component && component['__component_type__'] === 'DatagridComponent');
                if (datagridComponent) {
                    result = datagridComponent;
                    return false;
                }
                else {
                    return true;
                }
            });
        }
        return result;
    }
}
FocusInvalidService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
FocusInvalidService.ctorParameters = () => [
    { type: Repository },
    { type: FrameContext },
    { type: FrameContextService },
    { type: FormControlService }
];
export { FocusInvalidService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZm9jdXMtaW52YWxpZC5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGZhcnJpcy9jb21tYW5kLXNlcnZpY2VzLyIsInNvdXJjZXMiOlsibGliL2ZvY3VzLWludmFsaWQuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUN2RCxPQUFPLEVBQUUsVUFBVSxFQUFFLFlBQVksRUFBaUIsTUFBTSxnQkFBZ0IsQ0FBQztBQUN6RSxPQUFPLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSx5QkFBeUIsQ0FBQztBQUM5RCxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSx3QkFBd0IsQ0FBQztBQUU1RCxNQUFNLHdCQUF3QixHQUFHLElBQUksQ0FBQztBQUN0QyxNQUFNLHVCQUF1QixHQUFHLEtBQUssQ0FBQztBQU10Qzs7O0dBR0c7QUFDSCxNQUNNLG1CQUFtQjtJQUN2Qjs7T0FFRztJQUNILFlBQ1UsVUFBMkIsRUFDM0IsWUFBMEIsRUFDMUIsbUJBQXdDLEVBQ3hDLGtCQUFzQztRQUh0QyxlQUFVLEdBQVYsVUFBVSxDQUFpQjtRQUMzQixpQkFBWSxHQUFaLFlBQVksQ0FBYztRQUMxQix3QkFBbUIsR0FBbkIsbUJBQW1CLENBQXFCO1FBQ3hDLHVCQUFrQixHQUFsQixrQkFBa0IsQ0FBb0I7SUFFaEQsQ0FBQztJQUVEOztPQUVHO0lBQ0ksaUJBQWlCLENBQUMsa0JBQXlCLEVBQUUsV0FBNEI7UUFDOUUsa0JBQWtCO1FBQ2xCLElBQUksQ0FBQyxrQkFBa0IsSUFBSSxDQUFDLGtCQUFrQixDQUFDLE1BQU0sRUFBRTtZQUNyRCxPQUFPO1NBQ1I7UUFDRCxJQUFJLFdBQVcsR0FBRyxJQUFJLENBQUM7UUFDdkIsTUFBTSxzQkFBc0IsR0FBRyxJQUFJLENBQUMsNEJBQTRCLENBQUMsa0JBQWtCLEVBQUUsV0FBVyxDQUFDLENBQUM7UUFDbEcsSUFBSSxzQkFBc0IsRUFBRTtZ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Q0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLFNBQWMsRUFBRSxFQUFFLENBQUMsU0FBUyxJQUFJLFNBQVMsQ0FBQyxvQkFBb0IsQ0FBQyxLQUFLLG1CQUFtQixDQUFDLENBQUM7Z0JBQzVKLElBQUksaUJBQWlCLEVBQUU7b0JBQ3JCLE1BQU0sR0FBRyxpQkFBaUIsQ0FBQztvQkFDM0IsT0FBTyxLQUFLLENBQUM7aUJBQ2Q7cUJBQU07b0JBQ0wsT0FBTyxJQUFJLENBQUM7aUJBQ2I7WUFDSCxDQUFDLENBQUMsQ0FBQztTQUNKO1FBQ0QsT0FBTyxNQUFNLENBQUM7SUFDaEIsQ0FBQzs7O1lBalVGLFVBQVU7Ozs7WUFmRixVQUFVO1lBQUUsWUFBWTtZQUN4QixtQkFBbUI7WUFDbkIsa0JBQWtCOztBQWlWM0IsT0FBTyxFQUE2QixtQkFBbUIsRUFBRSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSwgRWxlbWVudFJlZiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgUmVwb3NpdG9yeSwgRnJhbWVDb250ZXh0LCBOZ0Zvcm1Db250cm9sIH0gZnJvbSAnQGZhcnJpcy9kZXZraXQnO1xuaW1wb3J0IHsgRnJhbWVDb250ZXh0U2VydmljZSB9IGZyb20gJy4vZnJhbWUtY29udGV4dC5zZXJ2aWNlJztcbmltcG9ydCB7IEZvcm1Db250cm9sU2VydmljZSB9IGZyb20gJy4vZm9ybS1jb250cm9sLnNlcnZpY2UnO1xuXG5jb25zdCBGSVhFRF9DT0xVTU5fU1RBUlRfSU5ERVggPSA1MDAwO1xuY29uc3QgR1JJRF9DT0xVTU5fU1RBUlRfSU5ERVggPSAxMDAwMDtcbmludGVyZmFjZSBGb2N1c2FibGVJbnZhbGlkYXRpb25HcmlkIHtcbiAgZWRpdENlbGwocm93SWQ6IGFueSwgZmllbGQ6IHN0cmluZyk6IHZvaWQ7XG4gIGRpc2FibGVkOiBib29sZWFuO1xufVxuXG4vKipcbiAqIOihqOWNlemqjOivgeacjeWKoVxuICogQHNjb3BlIEZyYW1lQ29tcG9uZW50XG4gKi9cbkBJbmplY3RhYmxlKClcbmNsYXNzIEZvY3VzSW52YWxpZFNlcnZpY2Uge1xuICAvKipcbiAgICog5p6E6YCg5Ye95pWwXG4gICAqL1xuICBjb25zdHJ1Y3RvcihcbiAgICBwcml2YXRlIHJlcG9zaXRvcnk6IFJlcG9zaXRvcnk8YW55PixcbiAgICBwcml2YXRlIGZyYW1lQ29udGV4dDogRnJhbWVDb250ZXh0LFxuICAgIHByaXZhdGUgZnJhbWVDb250ZXh0U2VydmljZTogRnJhbWVDb250ZXh0U2VydmljZSxcbiAgICBwcml2YXRlIGZvcm1Db250cm9sU2VydmljZTogRm9ybUNvbnRyb2xTZXJ2aWNlXG4gICkge1xuICB9XG5cbiAgLyoqXG4gICAqIOWQkeesrOS4gOS4qumqjOivgeS4jemAmui/h+eahOWtl+auteiuvue9rueEpueCuVxuICAgKi9cbiAgcHVibGljIGZvY3VzSW52YWxpZElucHV0KHZlcmlmeUluZm9ybWF0aW9uczogYW55W10sIHJvb3RFbGVtZW50OiBFbGVtZW50UmVmPGFueT4pIHtcbiAgICAvLyDml6Dpqozor4HkuI3pgJrov4fkv6Hmga/ml7bvvIznm7TmjqXov5Tlm57jgIJcbiAgICBpZiAoIXZlcmlmeUluZm9ybWF0aW9ucyB8fCAhdmVyaWZ5SW5mb3JtYXRpb25zLmxlbmd0aCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBsZXQgdGFyZ2V0RmllbGQgPSBudWxsO1xuICAgIGNvbnN0IGZpcnN0VmVyaWZ5SW5mb3JtYXRpb24gPSB0aGlzLnNlbGVjdEZpcnN0VmVyaWZ5SW5mb3JtYXRpb24odmVyaWZ5SW5mb3JtYXRpb25zLCByb290RWxlbWVudCk7XG4gICAgaWYgKGZpcnN0VmVyaWZ5SW5mb3JtYXRpb24pIHtcbiAgICAgIHRhcmdldEZpZWxkID0gZmlyc3RWZXJpZnlJbmZvcm1hdGlvbi50YXJnZXRGaWVsZDtcbiAgICAgIGlmICh0YXJnZXRGaWVsZCkge1xuICAgICAgICBjb25zdCBjYW5Gb2N1cyA9IHRoaXMuZm9jdXNFbGVtZW50KHRhcmdldEZpZWxkLCByb290RWxlbWVudCk7XG4gICAgICAgIGlmIChjYW5Gb2N1cykge1xuICAgICAgICAgIHZlcmlmeUluZm9ybWF0aW9uc1snZm9jdXNlZCddID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiDorr7nva5EYXRhR3JpZOWNleWFg+agvOeEpueCuVxuICAgKi9cbiAgcHVibGljIGZvY3VzR3JpZENlbGwodmVyaWZ5SW5mb3JtYXRpb25zOiBhbnlbXSwgZm9jdXNhYmxlRGF0YUdyaWQ6IEZvY3VzYWJsZUludmFsaWRhdGlvbkdyaWQpIHtcbiAgICBpZiAoIXZlcmlmeUluZm9ybWF0aW9ucyB8fCAhdmVyaWZ5SW5mb3JtYXRpb25zLmxlbmd0aCB8fCB2ZXJpZnlJbmZvcm1hdGlvbnNbJ2ZvY3VzZWQnXSA9PSB0cnVlIHx8IGZvY3VzYWJsZURhdGFHcmlkLmRpc2FibGVkID09PSB0cnVlKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGxldCB0YXJnZXRGaWVsZCA9IG51bGw7XG4gICAgbGV0IHRhcmdldElkID0gbnVsbDtcbiAgICBjb25zdCBmaXJzdFZlcmlmeUluZm9ybWF0aW9uID0gdGhpcy5zZWxlY3RGaXJzdFZlcmlmeUluZm9ybWF0aW9uKHZlcmlmeUluZm9ybWF0aW9ucyk7XG4gICAgaWYgKGZpcnN0VmVyaWZ5SW5mb3JtYXRpb24pIHtcbiAgICAgIHRhcmdldEZpZWxkID0gZmlyc3RWZXJpZnlJbmZvcm1hdGlvbi50YXJnZXRGaWVsZDtcbiAgICAgIHRhcmdldElkID0gZmlyc3RWZXJpZnlJbmZvcm1hdGlvbi5pZDtcbiAgICAgIHZlcmlmeUluZm9ybWF0aW9uc1snZm9jdXNlZCddID0gdHJ1ZTtcbiAgICAgIGZvY3VzYWJsZURhdGFHcmlkLmVkaXRDZWxsKHRhcmdldElkLCB0YXJnZXRGaWVsZCk7XG4gICAgfVxuICB9XG4gIHByaXZhdGUgdXBkYXRlVmVyaWZ5SW5mb3JtYXRpb25zSW5kZXgodmVyaWZ5SW5mb3JtYXRpb25zOiBhbnlbXSwgcm9vdEVsZW1lbnQ/OiBFbGVtZW50UmVmPGFueT4pIHtcbiAgICB2ZXJpZnlJbmZvcm1hdGlvbnMgPSB2ZXJpZnlJbmZvcm1hdGlvbnMuZmlsdGVyKCh2ZXJpZnlJbmZvcm1hdGlvbjogYW55KSA9PiB7XG4gICAgICBjb25zdCBmcmFtZUNvbnRleHRzID0gdGhpcy5nZXRGcmFtZUNvbnRleHRzQnlQcm9wZXJ0eVBhdGgodmVyaWZ5SW5mb3JtYXRpb24uZnVsbFBhdGgsICcvJyk7XG4gICAgICBjb25zdCBmcmFtZUNvbnRleHQgPSBmcmFtZUNvbnRleHRzICYmIGZyYW1lQ29udGV4dHMuZmlsdGVyKGZyYW1lQ29udGV4dCA9PiBmcmFtZUNvbnRleHQgJiYgZnJhbWVDb250ZXh0LmZyYW1lSWQgPT09IHRoaXMuZnJhbWVDb250ZXh0LmZyYW1lSWQpO1xuICAgICAgcmV0dXJuIGZyYW1lQ29udGV4dCA/IHRydWUgOiBmYWxzZTtcbiAgICB9KTtcbiAgICByZXR1cm4gdmVyaWZ5SW5mb3JtYXRpb25zLm1hcCgodmVyaWZ5SW5mb3JtYXRpb246IGFueSkgPT4ge1xuICAgICAgbGV0IHRhYkluZGV4ID0gLTE7XG4gICAgICBpZiAodmVyaWZ5SW5mb3JtYXRpb24pIHtcbiAgICAgICAgaWYgKHJvb3RFbGVtZW50ICYmIHZlcmlmeUluZm9ybWF0aW9uLnRhcmdldEZpZWxkKSB7XG4gICAgICAgICAgY29uc3QgaW5wdXQgPSB0aGlzLmdldElucHV0RWxlbWVudEJ5SWQodmVyaWZ5SW5mb3JtYXRpb24udGFyZ2V0RmllbGQsIHJvb3RFbGVtZW50KTtcbiAgICAgICAgICB0YWJJbmRleCA9IGlucHV0ICYmIGlucHV0LmdldEF0dHJpYnV0ZSgndGFiaW5kZXgnKSB8fCAtMTtcbiAgICAgICAgICB0YWJJbmRleCA9IE51bWJlcih0YWJJbmRleCk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gY29uc3QgZnJhbWVDb250ZXh0cyA9IHRoaXMuZ2V0RnJhbWVDb250ZXh0c0J5UHJvcGVydHlQYXRoKHZlcmlmeUluZm9ybWF0aW9uLmZ1bGxQYXRoLCAnLycpO1xuICAgICAgICBjb25zdCBmcmFtZUNvbnRleHQgPSB0aGlzLmZyYW1lQ29udGV4dDsvL2ZyYW1lQ29udGV4dHMgJiYgZnJhbWVDb250ZXh0c1swXSB8fCBudWxsO1xuICAgICAgICBjb25zdCBmcmFtZUluZGV4ID0gZnJhbWVDb250ZXh0LmluZGV4ICsgMTtcbiAgICAgICAgdmVyaWZ5SW5mb3JtYXRpb24udGFiSW5kZXggPSB0YWJJbmRleDtcbiAgICAgICAgdmVyaWZ5SW5mb3JtYXRpb24uZG9tSW5kZXggPSAtMTtcbiAgICAgICAgdmVyaWZ5SW5mb3JtYXRpb24uZnJhbWVJbmRleCA9IC0xO1xuICAgICAgICB2ZXJpZnlJbmZvcm1hdGlvbi5wb3NpdGlvbiA9IHRhYkluZGV4O1xuICAgICAgICBpZiAoZnJhbWVDb250ZXh0KSB7XG4gICAgICAgICAgY29uc3QgZG9tSW5kZXggPSB2ZXJpZnlJbmZvcm1hdGlvbi5mdWxsUGF0aCAmJiB0aGlzLmdldEZpZWxkSW5kZXgoZnJhbWVDb250ZXh0LCB2ZXJpZnlJbmZvcm1hdGlvbi5mdWxsUGF0aCkgfHwgMDtcbiAgICAgICAgICBpZiAoZG9tSW5kZXggPiAwKSB7XG4gICAgICAgICAgICBjb25zdCByb3dJbmRleCA9IHZlcmlmeUluZm9ybWF0aW9uLmluZGV4IHx8IDA7XG4gICAgICAgICAgICB2ZXJpZnlJbmZvcm1hdGlvbi5kb21JbmRleCA9IGRvbUluZGV4O1xuICAgICAgICAgICAgdmVyaWZ5SW5mb3JtYXRpb24uZnJhbWVJbmRleCA9IGZyYW1lQ29udGV4dC5pbmRleDtcbiAgICAgICAgICAgIHZlcmlmeUluZm9ybWF0aW9uLnBvc2l0aW9uID0gdGFiSW5kZXggPiAwID8gdGFiSW5kZXggOiAoZnJhbWVJbmRleCAqIDEwMDAgKyByb3dJbmRleCAqIDEwMDAgKyBkb21JbmRleCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gdmVyaWZ5SW5mb3JtYXRpb247XG4gICAgfSk7XG4gIH1cbiAgcHJpdmF0ZSBpc0dyaWRDb21wb25lbnQoZnJhbWVDb250ZXh0OiBGcmFtZUNvbnRleHQpIHtcbiAgICBpZiAoZnJhbWVDb250ZXh0KSB7XG4gICAgICBjb25zdCBkYXRhR3JpZENvbHVtbnNOYW1lID0gZnJhbWVDb250ZXh0LnZpZXdNb2RlbFsnZGF0YUdyaWRDb2x1bW5zTmFtZSddIHx8IG51bGw7XG4gICAgICByZXR1cm4gZGF0YUdyaWRDb2x1bW5zTmFtZSA/IHRydWUgOiBmYWxzZTtcbiAgICB9XG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgfVxuICBwcml2YXRlIGdldENvbHVtbkluZGV4KGZyYW1lQ29udGV4dDogRnJhbWVDb250ZXh0LCBiaW5kaW5nOiBzdHJpbmcpIHtcbiAgICBiaW5kaW5nID0gYmluZGluZy5zcGxpdCgnLycpLmZpbHRlcihwID0+IHApLmpvaW4oJy8nKTtcbiAgICBjb25zdCBiaW5kaW5nUGF0aHMgPSBmcmFtZUNvbnRleHQudmlld01vZGVsLmJpbmRpbmdQYXRoLnNwbGl0KCcvJykuZmlsdGVyKHAgPT4gcCk7XG4gICAgY29uc3QgZGF0YUdyaWRDb2x1bW5zTmFtZSA9IGZyYW1lQ29udGV4dC52aWV3TW9kZWxbJ2RhdGFHcmlkQ29sdW1uc05hbWUnXSB8fCBudWxsO1xuICAgIGNvbnN0IGZyYW1lSW5kZXggPSBmcmFtZUNvbnRleHQuaW5kZXggKyAxO1xuICAgIGlmICghZGF0YUdyaWRDb2x1bW5zTmFtZSkge1xuICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9XG4gICAgbGV0IGNvbHVtbnM6IGFueVtdID0gZnJhbWVDb250ZXh0LnZpZXdNb2RlbFtkYXRhR3JpZENvbHVtbnNOYW1lXTtcbiAgICBpZiAoIWNvbHVtbnMgfHwgY29sdW1ucy5sZW5ndGggPCAxKSB7XG4gICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH1cbiAgICAvLyDmiZPlubNjb2x1bW5zXG4gICAgY29sdW1ucyA9IGNvbHVtbnMucmVkdWNlKChyZXN1bHRzOiBhbnlbXSwgaXRlbSkgPT4ge1xuICAgICAgaWYgKEFycmF5LmlzQXJyYXkoaXRlbSkpIHtcbiAgICAgICAgcmV0dXJuIHJlc3VsdHMuY29uY2F0KGl0ZW0pO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdHMuY29uY2F0KFtpdGVtXSk7XG4gICAgfSwgW10pO1xuICAgIGxldCBwb3NpdGlvbiA9IC0xO1xuICAgIGZvciAobGV0IGluZGV4ID0gMDsgaW5kZXggPCBjb2x1bW5zLmxlbmd0aDsgaW5kZXgrKykge1xuICAgICAgY29uc3QgY29sdW1uOiBhbnkgfCBhbnlbXSA9IGNvbHVtbnNbaW5kZXhdO1xuICAgICAgY29uc3QgZmllbGRzID0gY29sdW1uICYmIGNvbHVtbi5maWVsZCAmJiBjb2x1bW4uZmllbGQuc3BsaXQoJy4nKS5maWx0ZXIocCA9PiBwKSB8fCBudWxsO1xuICAgICAgaWYgKCFmaWVsZHMpIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG4gICAgICBpZiAoYmluZGluZ1BhdGhzLmNvbmNhdChmaWVsZHMpLmpvaW4oJy8nKSA9PT0gYmluZGluZykge1xuICAgICAgICBjb25zdCBmaXhlZCA9IGNvbHVtbi5maXhlZDtcbiAgICAgICAgaWYgKGZpeGVkKSB7XG4gICAgICAgICAgY29uc3QgZml4ZWRDb2x1bW5zID0gY29sdW1ucy5maWx0ZXIoaXRlbSA9PiBpdGVtLmZpeGVkID09PSBmaXhlZCk7XG4gICAgICAgICAgY29uc3QgZml4ZWRDb2x1bW5JbmRleCA9IHRoaXMuZ2V0SW5kZXhGcm9tQ29sdW1ucyhmaXhlZENvbHVtbnMsIGJpbmRpbmcpO1xuICAgICAgICAgIGlmIChmaXhlZCA9PT0gJ2xlZnQnKSB7XG4gICAgICAgICAgICBwb3NpdGlvbiA9IGZyYW1lSW5kZXggKiBGSVhFRF9DT0xVTU5fU1RBUlRfSU5ERVggKyBmaXhlZENvbHVtbkluZGV4O1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBwb3NpdGlvbiA9IGZyYW1lSW5kZXggKiBHUklEX0NPTFVNTl9TVEFSVF9JTkRFWCArIDEwMDAgKyBmaXhlZENvbHVtbkluZGV4O1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBwb3NpdGlvbiA9IGZyYW1lSW5kZXggKiBHUklEX0NPTFVNTl9TVEFSVF9JTkRFWCArIGluZGV4O1xuICAgICAgICB9XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcG9zaXRpb247XG4gIH1cbiAgcHJpdmF0ZSBnZXRJbmRleEZyb21Db2x1bW5zKGNvbHVtbnM6IGFueVtdLCBiaW5kaW5nOiBzdHJpbmcpIHtcbiAgICBjb25zdCBiaW5kaW5nUGF0aHMgPSB0aGlzLmZyYW1lQ29udGV4dC52aWV3TW9kZWwuYmluZGluZ1BhdGguc3BsaXQoJy8nKS5maWx0ZXIocCA9PiBwKTtcbiAgICByZXR1cm4gY29sdW1ucy5maW5kSW5kZXgoY29sdW1uID0+IHtcbiAgICAgIGNvbnN0IGZpZWxkcyA9IGNvbHVtbiAmJiBjb2x1bW4uZmllbGQgJiYgY29sdW1uLmZpZWxkLnNwbGl0KCcuJykuZmlsdGVyKHAgPT4gcCkgfHwgbnVsbDtcbiAgICAgIGlmICghZmllbGRzKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIGlmIChiaW5kaW5nUGF0aHMuY29uY2F0KGZpZWxkcykuam9pbignLycpID09PSBiaW5kaW5nKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH0pO1xuICB9XG4gIHByaXZhdGUgc2VsZWN0Rmlyc3RWZXJpZnlJbmZvcm1hdGlvbih2ZXJpZnlJbmZvcm1hdGlvbnM6IGFueVtdLCByb290RWxlbWVudD86IEVsZW1lbnRSZWY8YW55Pikge1xuICAgIHZlcmlmeUluZm9ybWF0aW9ucyA9IHRoaXMudXBkYXRlVmVyaWZ5SW5mb3JtYXRpb25zSW5kZXgodmVyaWZ5SW5mb3JtYXRpb25zLCByb290RWxlbWVudCk7XG4gICAgdmVyaWZ5SW5mb3JtYXRpb25zLnNvcnQoKHYxOiBhbnksIHYyOiBhbnkpID0+IE51bWJlcih2MS5wb3NpdGlvbikgLSBOdW1iZXIodjIucG9zaXRpb24pKTtcbiAgICByZXR1cm4gdmVyaWZ5SW5mb3JtYXRpb25zICYmIHZlcmlmeUluZm9ybWF0aW9ucy5sZW5ndGggPiAwICYmIHZlcmlmeUluZm9ybWF0aW9uc1swXSB8fCBudWxsO1xuICB9XG4gIHByaXZhdGUgZ2V0SW5wdXRFbGVtZW50QnlJZCh0YXJnZXRGaWVsZDogc3RyaW5nLCByb290RWxlbWVudDogRWxlbWVudFJlZjxhbnk+KSB7XG4gICAgbGV0IGVsZW1lbnQgPSByb290RWxlbWVudC5uYXRpdmVFbGVtZW50Lm93bmVyRG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQodGFyZ2V0RmllbGQpIHx8IG51bGw7XG4gICAgaWYgKGVsZW1lbnQgJiYgZWxlbWVudC50YWdOYW1lICE9PSAnSU5QVVQnKSB7XG4gICAgICBjb25zdCBpbnB1dHMgPSBlbGVtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKCdpbnB1dCcpO1xuICAgICAgaWYgKGlucHV0cy5sZW5ndGgpIHtcbiAgICAgICAgZWxlbWVudCA9IGlucHV0c1swXTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGVsZW1lbnQ7XG4gIH1cbiAgcHVibGljIGdldEZyYW1lQ29udGV4dHNCeVByb3BlcnR5UGF0aChwcm9wZXJ0eVBhdGg6IHN0cmluZywgc2VwYXJ0b3I6IHN0cmluZyA9ICcvJyk6IEZyYW1lQ29udGV4dFtdIHtcbiAgICBpZiAoIXByb3BlcnR5UGF0aCkge1xuICAgICAgcmV0dXJuIFtdO1xuICAgIH1cbiAgICBjb25zdCBmcmFtZUNvbnRleHRzID0gdGhpcy5mcmFtZUNvbnRleHQgJiYgdGhpcy5mcmFtZUNvbnRleHQuYXBwQ29udGV4dC5mcmFtZUNvbnRleHRNYW5hZ2VyLmdldEZyYW1lQ29udGV4dHMoKSB8fCBbXTtcbiAgICByZXR1cm4gZnJhbWVDb250ZXh0cy5maWx0ZXIoKGZyYW1lQ29udGV4dDogRnJhbWVDb250ZXh0KSA9PiB7XG4gICAgICBjb25zdCBmb3JtQ29udHJvbHMgPSBmcmFtZUNvbnRleHQgJiYgZnJhbWVDb250ZXh0LmZvcm0gJiYgZnJhbWVDb250ZXh0LmZvcm0ubmdGb3JtQ29udHJvbHMgfHwge307XG4gICAgICBjb25zdCBiaW5kaW5nUGF0aCA9IGZyYW1lQ29udGV4dCAmJiBmcmFtZUNvbnRleHQudmlld01vZGVsICYmIGZyYW1lQ29udGV4dC52aWV3TW9kZWwuYmluZGluZ1BhdGggfHwgJyc7XG4gICAgICBpZiAoZm9ybUNvbnRyb2xzICYmIE9iamVjdC5rZXlzKGZvcm1Db250cm9scykubGVuZ3RoID4gMCkge1xuICAgICAgICBjb25zdCBrZXkgPSBPYmplY3Qua2V5cyhmb3JtQ29udHJvbHMpLmZpbmQoKGtleTogc3RyaW5nKSA9PiB7XG4gICAgICAgICAgY29uc3QgZm9ybUNvbnRyb2wgPSBmb3JtQ29udHJvbHNba2V5XTtcbiAgICAgICAgICBpZiAoIWZvcm1Db250cm9sIHx8ICFmb3JtQ29udHJvbC5iaW5kaW5nKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgfVxuICAgICAgICAgIGNvbnN0IGJpbmRpbmdzID0gZm9ybUNvbnRyb2wuYmluZGluZy5zcGxpdCgnLicpLmZpbHRlcihwID0+IHApO1xuICAgICAgICAgIGNvbnN0IGJpbmRpbmdQYXRocyA9IGJpbmRpbmdQYXRoLnNwbGl0KCcvJykuZmlsdGVyKHAgPT4gcCk7XG4gICAgICAgICAgY29uc3QgZnVsbFBhdGggPSBiaW5kaW5nUGF0aHMuY29uY2F0KGJpbmRpbmdzKTtcbiAgICAgICAgICByZXR1cm4gcHJvcGVydHlQYXRoLnNwbGl0KHNlcGFydG9yKS5maWx0ZXIocCA9PiBwKS5qb2luKCcvJykgPT09IGZ1bGxQYXRoLmpvaW4oJy8nKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBrZXkgPyB0cnVlIDogZmFsc2U7XG4gICAgICB9XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfSk7XG4gIH1cbiAgcHVibGljIGdldEZvcm1Db250cm9sSW5kZXhCeUJpbmRpbmdQYXRoKGZyYW1lQ29udGV4dDogRnJhbWVDb250ZXh0LCBiaW5kaW5nOiBzdHJpbmcpOiBudW1iZXIge1xuICAgIGNvbnN0IG5nRm9ybUNvbnRyb2xzID0gdGhpcy5nZXRGb3JtQ29udHJvbHNCeUZyYW1lQ29udGV4dChmcmFtZUNvbnRleHQpO1xuICAgIGlmICghbmdGb3JtQ29udHJvbHMpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICBjb25zdCBiaW5kaW5ncyA9IGJpbmRpbmcuc3BsaXQoJy8nKS5maWx0ZXIocCA9PiBwKTtcbiAgICByZXR1cm4gT2JqZWN0LnZhbHVlcyhuZ0Zvcm1Db250cm9scykuZmluZEluZGV4KChuZ0Zvcm1Db250cm9sOiBOZ0Zvcm1Db250cm9sKSA9PiB7XG4gICAgICBpZiAoIW5nRm9ybUNvbnRyb2wpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgY29uc3QgYmluZGluZ1BhdGggPSBmcmFtZUNvbnRleHQudmlld01vZGVsLmJpbmRpbmdQYXRoO1xuICAgICAgY29uc3QgYmluZGluZ1BhdGhzID0gYmluZGluZ1BhdGguc3BsaXQoJy8nKS5maWx0ZXIocCA9PiBwKTtcbiAgICAgIGNvbnN0IGZvcm1Db250cm9sQmluZGluZ1BhdGhzID0gbmdGb3JtQ29udHJvbC5iaW5kaW5nLnNwbGl0KCcuJykuZmlsdGVyKHAgPT4gcCk7XG4gICAgICBjb25zdCBmdWxsUGF0aCA9IGJpbmRpbmdQYXRocy5jb25jYXQoZm9ybUNvbnRyb2xCaW5kaW5nUGF0aHMpO1xuICAgICAgcmV0dXJuIGZ1bGxQYXRoLmpvaW4oJy8nKSA9PT0gYmluZGluZ3Muam9pbignLycpO1xuICAgIH0pO1xuICB9XG4gIHB1YmxpYyBnZXRGaWVsZEluZGV4KGZyYW1lQ29udGV4dDogRnJhbWVDb250ZXh0LCBiaW5kaW5nOiBzdHJpbmcpIHtcbiAgICBjb25zdCBpc0dyaWRDb21wb25lbnQgPSB0aGlzLmlzR3JpZENvbXBvbmVudChmcmFtZUNvbnRleHQpO1xuICAgIGlmIChpc0dyaWRDb21wb25lbnQpIHtcbiAgICAgIHJldHVybiB0aGlzLmdldENvbHVtbkluZGV4KGZyYW1lQ29udGV4dCwgYmluZGluZyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiB0aGlzLmdldEZvcm1Db250cm9sSW5kZXhCeUJpbmRpbmdQYXRoKGZyYW1lQ29udGV4dCwgYmluZGluZyk7XG4gICAgfVxuICB9XG4gIHB1YmxpYyBnZXRGb3JtQ29udHJvbHNCeUZyYW1lQ29udGV4dChmcmFtZUNvbnRleHQ6IEZyYW1lQ29udGV4dCk6IHsgW3Byb3BlcnR5TmFtZTogc3RyaW5nXTogTmdGb3JtQ29udHJvbCB9IHwgbnVsbCB7XG4gICAgcmV0dXJuIGZyYW1lQ29udGV4dCAmJiBmcmFtZUNvbnRleHQuZm9ybSAmJiBmcmFtZUNvbnRleHQuZm9ybS5uZ0Zvcm1Db250cm9scyB8fCBudWxsO1xuICB9XG4gIHB1YmxpYyBmb2N1c0VsZW1lbnQoZWxlbWVudElkOiBzdHJpbmcsIHJvb3RFbGVtZW50OiBFbGVtZW50UmVmPGFueT4pOiBib29sZWFuIHtcbiAgICBsZXQgZm9jdXNlZCA9IGZhbHNlO1xuICAgIGxldCBlbGVtZW50VG9Gb2N1cyA9IHJvb3RFbGVtZW50Lm5hdGl2ZUVsZW1lbnQub3duZXJEb2N1bWVudC5nZXRFbGVtZW50QnlJZChlbGVtZW50SWQpO1xuICAgIC8vIOacquiOt+WPluWIsOaMh+WumuWtl+auteaXtu+8jOi/lOWbnu+8jOS4jeWGjeiuvue9rueEpueCueOAglxuICAgIGlmIChlbGVtZW50VG9Gb2N1cykge1xuICAgICAgLy8g5aaC5p6c5pyJ5aSa5LiqaWTph43lpI3nmoTlhYPntKDvvIzliJnkuI3lrprkvY1cbiAgICAgIGNvbnN0IGVsZW1lbnRzID0gcm9vdEVsZW1lbnQubmF0aXZlRWxlbWVudC5vd25lckRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoYCMke2VsZW1lbnRJZH1gKTtcbiAgICAgIGlmIChlbGVtZW50cyAmJiBlbGVtZW50cy5sZW5ndGggPiAxKSB7XG4gICAgICAgIHJldHVybiBmb2N1c2VkO1xuICAgICAgfVxuICAgICAgLy8g5aaC5p6c57uR5a6a55uu5qCH5a2X5q6155qE5o6n5Lu25LiN5pivSW5wdXTlhYPntKDvvIzliJnmn6Xmib7lhbbkuIvnuqfoioLngrnjgIJcbiAgICAgIGlmIChlbGVtZW50VG9Gb2N1cy50YWdOYW1lICE9PSAnSU5QVVQnKSB7XG4gICAgICAgIGNvbnN0IHN1YkVsZW1lbnRzID0gZWxlbWVudFRvRm9jdXMuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ2lucHV0Jyk7XG4gICAgICAgIGlmIChzdWJFbGVtZW50cy5sZW5ndGgpIHtcbiAgICAgICAgICBlbGVtZW50VG9Gb2N1cyA9IHN1YkVsZW1lbnRzWzBdO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBlbGVtZW50VG9Gb2N1cy5mb2N1cygpO1xuICAgICAgZm9jdXNlZCA9IHRydWU7XG4gICAgfVxuICAgIHJldHVybiBmb2N1c2VkO1xuICB9XG4gIC8qKlxuICAgKiDorr7nva7nhKbngrlcbiAgICogQHBhcmFtIHZlcmlmeUluZm9ybWF0aW9uIOmUmeivr+S/oeaBr1xuICAgKiBAcGFyYW0gZnJhbWVDb250ZXh0IOS4iuS4i+aWh1xuICAgKiBAcmV0dXJucyBcbiAgICovXG4gIHB1YmxpYyBmb2N1cyh2ZXJpZnlJbmZvcm1hdGlvbjogYW55LCBmcmFtZUNvbnRleHQ6IEZyYW1lQ29udGV4dCkge1xuICAgIGlmICghdmVyaWZ5SW5mb3JtYXRpb24pIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY29uc3QgaXNHcmlkVmFsaWRhdGlvbiA9IHZlcmlmeUluZm9ybWF0aW9uLmluZGV4ICE9PSBudWxsO1xuICAgIGlmIChpc0dyaWRWYWxpZGF0aW9uKSB7XG4gICAgICBjb25zdCBncmlkID0gdGhpcy5nZXRHcmlkUmVmKGZyYW1lQ29udGV4dCk7XG4gICAgICBpZiAoZ3JpZCkge1xuICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICBncmlkLmVkaXRDZWxsKHZlcmlmeUluZm9ybWF0aW9uLmlkLCB2ZXJpZnlJbmZvcm1hdGlvbi50YXJnZXRGaWVsZCk7XG4gICAgICAgIH0sIDApO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBjb25zdCBmcmFtZUVsZW1lbnQgPSB0aGlzLmdldENvbXBvbmVudFJlZihmcmFtZUNvbnRleHQpO1xuICAgICAgY29uc3QgZWxlbWVudElkID0gdmVyaWZ5SW5mb3JtYXRpb24udGFyZ2V0RmllbGQ7XG4gICAgICB0aGlzLmZvY3VzQnlJZChlbGVtZW50SWQsIGZyYW1lRWxlbWVudCk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIOmAmui/h+aOp+S7tmlk6K6+572u54Sm54K5XG4gICAqIEBwYXJhbSBlbGVtZW50SWQgXG4gICAqIEBwYXJhbSBlbGVtZW50UmVmIFxuICAgKi9cbiAgcHJpdmF0ZSBmb2N1c0J5SWQoZWxlbWVudElkOiBzdHJpbmcsIGVsZW1lbnRSZWY/OiBFbGVtZW50UmVmKSB7XG4gICAgY29uc3QgZG9jdW1lbnQ6IGFueSA9IGVsZW1lbnRSZWYgJiYgZWxlbWVudFJlZi5uYXRpdmVFbGVtZW50Lm93bmVyRG9jdW1lbnQgfHwgd2luZG93LmRvY3VtZW50O1xuICAgIGlmIChkb2N1bWVudCkge1xuICAgICAgY29uc3QgZWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGVsZW1lbnRJZCk7XG4gICAgICBpZiAoZWxlbWVudC50YWdOYW1lICE9PSAnSU5QVVQnKSB7XG4gICAgICAgIGNvbnN0IHN1YkVsZW1lbnRzID0gZWxlbWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZSgnaW5wdXQnKTtcbiAgICAgICAgaWYgKHN1YkVsZW1lbnRzLmxlbmd0aCkge1xuICAgICAgICAgIGNvbnN0IGlucHV0ID0gc3ViRWxlbWVudHNbMF07XG4gICAgICAgICAgaWYgKGlucHV0ICYmIHR5cGVvZiBpbnB1dC5mb2N1cyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgaW5wdXQuZm9jdXMoKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGVsZW1lbnQuZm9jdXMoKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgLyoqXG4gICAqIOiOt+WPlue7hOS7tuWunuS+i1xuICAgKiBAcGFyYW0gZnJhbWVDb250ZXh0IFxuICAgKiBAcmV0dXJucyBcbiAgICovXG4gIHByaXZhdGUgZ2V0Q29tcG9uZW50UmVmKGZyYW1lQ29udGV4dDogRnJhbWVDb250ZXh0KSB7XG4gICAgcmV0dXJuIHRoaXMuZnJhbWVDb250ZXh0ICYmIHRoaXMuZnJhbWVDb250ZXh0LmluamVjdG9yLmdldDxFbGVtZW50UmVmPihFbGVtZW50UmVmLCBudWxsKSB8fCBudWxsO1xuICB9XG4gIC8qKlxuICAgKiDojrflj5Zncmlk5a6e5L6LXG4gICAqIEBwYXJhbSBmcmFtZUNvbnRleHQgZnJhbWVDb250ZXh0XG4gICAqIEByZXR1cm5zIFxuICAgKi9cbiAgcHJpdmF0ZSBnZXRHcmlkUmVmKGZyYW1lQ29udGV4dDogRnJhbWVDb250ZXh0KTogRm9jdXNhYmxlSW52YWxpZGF0aW9uR3JpZCB7XG4gICAgY29uc3QgbmFtZXNwYWNlID0gZnJhbWVDb250ZXh0Lm5hbWVzcGFjZTtcbiAgICBjb25zdCBiaW5kaW5nUGF0aCA9IGZyYW1lQ29udGV4dC52aWV3TW9kZWwuYmluZGluZ1BhdGg7XG4gICAgY29uc3QgZnJhbWVDb250ZXh0czogRnJhbWVDb250ZXh0W10gPSB0aGlzLmZyYW1lQ29udGV4dC5hcHBDb250ZXh0LmZyYW1lQ29udGV4dE1hbmFnZXIuZ2V0RnJhbWVDb250ZXh0c0J5TmFtZXNwYWNlKG5hbWVzcGFjZSkgfHwgW107XG4gICAgY29uc3QgbWF0Y2hlZEZyYW1lQ29udGV4dHMgPSBmcmFtZUNvbnRleHRzLmZpbHRlcigoZnJhbWVDb250ZXh0OiBGcmFtZUNvbnRleHQpID0+IGZyYW1lQ29udGV4dC52aWV3TW9kZWwgJiYgZnJhbWVDb250ZXh0LnZpZXdNb2RlbC5iaW5kaW5nUGF0aC5zcGxpdCgnLycpLmZpbHRlcihwID0+IHApLnRvU3RyaW5nKCkgPT09IGJpbmRpbmdQYXRoLnNwbGl0KCcvJykuZmlsdGVyKHAgPT4gcCkudG9TdHJpbmcoKSk7XG4gICAgbGV0IHJlc3VsdCA9IG51bGw7XG4gICAgaWYgKG1hdGNoZWRGcmFtZUNvbnRleHRzKSB7XG4gICAgICBtYXRjaGVkRnJhbWVDb250ZXh0cy5ldmVyeSgoZnJhbWVDb250ZXh0OiBGcmFtZUNvbnRleHQpID0+IHtcbiAgICAgICAgY29uc3QgZnJhbWVJZCA9IGZyYW1lQ29udGV4dC5mcmFtZUlkO1xuICAgICAgICBjb25zdCBjb21wb25lbnRzTWFwID0gdGhpcy5mcmFtZUNvbnRleHQuYXBwQ29udGV4dC5jb21wb25lbnRNYW5hZ2VyLmdldENvbXBvbmVudHNCeUZyYW1lSWQoZnJhbWVJZCk7XG4gICAgICAgIGlmICghY29tcG9uZW50c01hcCkge1xuICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGRhdGFncmlkQ29tcG9uZW50ID0gQXJyYXkuZnJvbShjb21wb25lbnRzTWFwLnZhbHVlcygpKS5maW5kKChjb21wb25lbnQ6IGFueSkgPT4gY29tcG9uZW50ICYmIGNvbXBvbmVudFsnX19jb21wb25lbnRfdHlwZV9fJ10gPT09ICdEYXRhZ3JpZENvbXBvbmVudCcpO1xuICAgICAgICBpZiAoZGF0YWdyaWRDb21wb25lbnQpIHtcbiAgICAgICAgICByZXN1bHQgPSBkYXRhZ3JpZENvbXBvbmVudDtcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG59XG5cbmV4cG9ydCB7IEZvY3VzYWJsZUludmFsaWRhdGlvbkdyaWQsIEZvY3VzSW52YWxpZFNlcnZpY2UgfTtcbiJdfQ==