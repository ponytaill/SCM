/**
 * @fileoverview added by tsickle
 * Generated from: lib/directives/clear-fields.directive.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, Input, Optional, Self, Injector } from '@angular/core';
import { NgControl } from '@angular/forms';
import { QueryConditionComponent } from '../querycondition.component';
export class ClearFieldsDirective {
    /**
     * @param {?} ngCtrl
     * @param {?} qcc
     * @param {?} inject
     */
    constructor(ngCtrl, qcc, inject) {
        this.ngCtrl = ngCtrl;
        this.qcc = qcc;
        this.inject = inject;
        this.clearFields = '';
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        if (this.clearFields && this.ngCtrl) {
            this.ngCtrl.valueChanges.subscribe((/**
             * @param {?} v
             * @return {?}
             */
            (v) => {
                this.qcc.fieldCodeOfClearFields = [];
                this.clearFields.split(',').forEach((/**
                 * @param {?} n
                 * @return {?}
                 */
                n => {
                    /** @type {?} */
                    const visibleConditions = this.qcc.selectedFieldConditions.filter((/**
                     * @param {?} condition
                     * @return {?}
                     */
                    condition => { return !!condition.visible; }));
                    /** @type {?} */
                    const conditionItem = visibleConditions.find((/**
                     * @param {?} c
                     * @return {?}
                     */
                    c => c.fieldCode === n));
                    if (conditionItem) {
                        this.qcc.fieldCodeOfClearFields.push(n);
                        conditionItem.value.clearValue();
                    }
                }));
            }));
        }
    }
}
ClearFieldsDirective.decorators = [
    { type: Directive, args: [{
                selector: '[clear-fields]'
            },] }
];
/** @nocollapse */
ClearFieldsDirective.ctorParameters = () => [
    { type: NgControl, decorators: [{ type: Optional }, { type: Self }] },
    { type: QueryConditionComponent },
    { type: Injector }
];
ClearFieldsDirective.propDecorators = {
    clearFields: [{ type: Input, args: ['clear-fields',] }]
};
if (false) {
    /** @type {?} */
    ClearFieldsDirective.prototype.clearFields;
    /**
     * @type {?}
     * @private
     */
    ClearFieldsDirective.prototype.ngCtrl;
    /**
     * @type {?}
     * @private
     */
    ClearFieldsDirective.prototype.qcc;
    /**
     * @type {?}
     * @private
     */
    ClearFieldsDirective.prototype.inject;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2xlYXItZmllbGRzLmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BmYXJyaXMvY29tcG9uZW50LXF1ZXJ5Y29uZGl0aW9uLyIsInNvdXJjZXMiOlsibGliL2RpcmVjdGl2ZXMvY2xlYXItZmllbGRzLmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUFVLFFBQVEsRUFBRSxJQUFJLEVBQUUsUUFBUSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ25GLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUMzQyxPQUFPLEVBQUUsdUJBQXVCLEVBQUUsTUFBTSw2QkFBNkIsQ0FBQztBQUt0RSxNQUFNLE9BQU8sb0JBQW9COzs7Ozs7SUFHN0IsWUFBd0MsTUFBaUIsRUFBVSxHQUE0QixFQUFVLE1BQWdCO1FBQWpGLFdBQU0sR0FBTixNQUFNLENBQVc7UUFBVSxRQUFHLEdBQUgsR0FBRyxDQUF5QjtRQUFVLFdBQU0sR0FBTixNQUFNLENBQVU7UUFGbEcsZ0JBQVcsR0FBRyxFQUFFLENBQUM7SUFFb0YsQ0FBQzs7OztJQUU3SCxRQUFRO1FBQ0osSUFBRyxJQUFJLENBQUMsV0FBVyxJQUFJLElBQUksQ0FBQyxNQUFNLEVBQUU7WUFDaEMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxZQUFZLENBQUMsU0FBUzs7OztZQUFFLENBQUMsQ0FBQyxFQUFFLEVBQUU7Z0JBQ3RDLElBQUksQ0FBQyxHQUFHLENBQUMsc0JBQXNCLEdBQUcsRUFBRSxDQUFDO2dCQUNyQyxJQUFJLENBQUMsV0FBVyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxPQUFPOzs7O2dCQUFDLENBQUMsQ0FBQyxFQUFFOzswQkFDOUIsaUJBQWlCLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNOzs7O29CQUFDLFNBQVMsQ0FBQyxFQUFFLEdBQUUsT0FBTyxDQUFDLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQSxDQUFBLENBQUMsRUFBQzs7MEJBQ3RHLGFBQWEsR0FBRyxpQkFBaUIsQ0FBQyxJQUFJOzs7O29CQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLFNBQVMsS0FBSyxDQUFDLEVBQUM7b0JBQ3BFLElBQUksYUFBYSxFQUFFO3dCQUNmLElBQUksQ0FBQyxHQUFHLENBQUMsc0JBQXNCLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO3dCQUN4QyxhQUFhLENBQUMsS0FBSyxDQUFDLFVBQVUsRUFBRSxDQUFDO3FCQUNwQztnQkFDTCxDQUFDLEVBQUMsQ0FBQztZQUNQLENBQUMsRUFBQyxDQUFDO1NBQ047SUFDTCxDQUFDOzs7WUF0QkosU0FBUyxTQUFDO2dCQUNQLFFBQVEsRUFBRSxnQkFBZ0I7YUFDN0I7Ozs7WUFMUSxTQUFTLHVCQVNELFFBQVEsWUFBSSxJQUFJO1lBUnhCLHVCQUF1QjtZQUZtQixRQUFROzs7MEJBUXRELEtBQUssU0FBQyxjQUFjOzs7O0lBQXJCLDJDQUF3Qzs7Ozs7SUFFNUIsc0NBQTZDOzs7OztJQUFFLG1DQUFvQzs7Ozs7SUFBRSxzQ0FBd0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEaXJlY3RpdmUsIElucHV0LCBPbkluaXQsIE9wdGlvbmFsLCBTZWxmLCBJbmplY3RvciB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBOZ0NvbnRyb2wgfSBmcm9tICdAYW5ndWxhci9mb3Jtcyc7XHJcbmltcG9ydCB7IFF1ZXJ5Q29uZGl0aW9uQ29tcG9uZW50IH0gZnJvbSAnLi4vcXVlcnljb25kaXRpb24uY29tcG9uZW50JztcclxuXHJcbkBEaXJlY3RpdmUoe1xyXG4gICAgc2VsZWN0b3I6ICdbY2xlYXItZmllbGRzXSdcclxufSlcclxuZXhwb3J0IGNsYXNzIENsZWFyRmllbGRzRGlyZWN0aXZlIGltcGxlbWVudHMgT25Jbml0IHsgXHJcbiAgICBASW5wdXQoJ2NsZWFyLWZpZWxkcycpIGNsZWFyRmllbGRzID0gJyc7XHJcbiAgIFxyXG4gICAgY29uc3RydWN0b3IoQE9wdGlvbmFsKCkgQFNlbGYoKSBwcml2YXRlIG5nQ3RybDogTmdDb250cm9sLCBwcml2YXRlIHFjYzogUXVlcnlDb25kaXRpb25Db21wb25lbnQsIHByaXZhdGUgaW5qZWN0OiBJbmplY3Rvcikge30gXHJcblxyXG4gICAgbmdPbkluaXQoKSB7XHJcbiAgICAgICAgaWYodGhpcy5jbGVhckZpZWxkcyAmJiB0aGlzLm5nQ3RybCkge1xyXG4gICAgICAgICAgICB0aGlzLm5nQ3RybC52YWx1ZUNoYW5nZXMuc3Vic2NyaWJlKCAodikgPT4ge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5xY2MuZmllbGRDb2RlT2ZDbGVhckZpZWxkcyA9IFtdO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5jbGVhckZpZWxkcy5zcGxpdCgnLCcpLmZvckVhY2gobiA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgdmlzaWJsZUNvbmRpdGlvbnMgPSB0aGlzLnFjYy5zZWxlY3RlZEZpZWxkQ29uZGl0aW9ucy5maWx0ZXIoY29uZGl0aW9uID0+IHtyZXR1cm4gISFjb25kaXRpb24udmlzaWJsZX0pOyAgXHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgY29uZGl0aW9uSXRlbSA9IHZpc2libGVDb25kaXRpb25zLmZpbmQoYyA9PiBjLmZpZWxkQ29kZSA9PT0gbik7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGNvbmRpdGlvbkl0ZW0pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5xY2MuZmllbGRDb2RlT2ZDbGVhckZpZWxkcy5wdXNoKG4pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25kaXRpb25JdGVtLnZhbHVlLmNsZWFyVmFsdWUoKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59Il19