import { Injectable } from '@angular/core';
import { QuerystringService } from './querystring';
import { RuntimeFrameworkService } from './rtf-service';
import { of, Subject } from 'rxjs';
import { switchMap } from 'rxjs/operators';
// tslint:disable: no-string-literal
/**
 * 参数服务
 * @scope FormModule
 */
var ParamService = /** @class */ (function () {
    function ParamService(querystringService, runtimeFrameworkService) {
        this.querystringService = querystringService;
        this.runtimeFrameworkService = runtimeFrameworkService;
    }
    Object.defineProperty(ParamService.prototype, "params", {
        /**
         * 适配获取所有参数
         */
        get: function () {
            var _this = this;
            // 先从hash中获取参数
            var hash = window.location.hash;
            var params = this.querystringService.parse(hash);
            /*
            const appMode = params.appMode;
            // appMode没有定义，认为是老表单,appMode = mdi 或 spa
            if (typeof appMode === 'undefined' || appMode === null) {
                return of(params);
            }
            // appMode存在，但为空，也认为是老表单
            if (appMode.length < 1) {
                return of(params);
            }
            // 新表单，使用iframe模式
            if (appMode.toLowerCase() === 'mdi') {
                return of(params);
            }
            */
            // 获取tabId，最新版本一定有tabId，如果取不到tabId则认为是老表单，直接从url获取参数
            var tabId = params.tabId;
            if (!tabId) {
                // throw new Error('TabId can`t be empty!');
                return of(params);
            }
            var subject = new Subject();
            // 管道参数e可能为object、Map类型
            this.runtimeFrameworkService.addEventListener(tabId, function (e) {
                var map = {};
                if (e instanceof Map || (e && typeof (e['get']) === 'function' && typeof e['entries'] === 'function')) {
                    map = _this.parseMapParams(e);
                }
                var args = {};
                if (e instanceof Map || (e && typeof (e['get']) === 'function' && typeof e['entries'] === 'function')) {
                    args = new Map(e);
                }
                else {
                    args = Object.assign({}, e);
                }
                setTimeout(function () {
                    subject.next(Object.assign({}, args, map, params));
                }, 0);
            }, params);
            return subject.asObservable();
        },
        enumerable: true,
        configurable: true
    });
    /**
     * 解析map类型的参数
     * @param params params
     */
    ParamService.prototype.parseMapParams = function (params) {
        var map = {};
        map['WEB_FORM_ROUTE_PARAMS'] = decodeURIComponent(params.get('WEB_FORM_ROUTE_PARAMS'));
        params.forEach(function (value, key) {
            if (key !== 'WEB_FORM_ROUTE_PARAMS') {
                map[key] = value;
            }
        });
        return map;
    };
    /**
     * 获取param参数
     * @param param key
     */
    ParamService.prototype.get = function (param) {
        return this.params.pipe(switchMap(function (options) {
            if (!!options && options.hasOwnProperty(param)) {
                return of(options.param);
            }
            else {
                return of(undefined);
            }
        }));
    };
    /**
     * 参数转为对象
     */
    ParamService.prototype.parse = function () {
        return this.params.pipe(switchMap(function (options) {
            return of(options);
        }));
    };
    ParamService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    ParamService.ctorParameters = function () { return [
        { type: QuerystringService },
        { type: RuntimeFrameworkService }
    ]; };
    return ParamService;
}());
export { ParamService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGFyYW0uc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BmYXJyaXMvY29tbWFuZC1zZXJ2aWNlcy8iLCJzb3VyY2VzIjpbImxpYi9wYXJhbS5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ25ELE9BQU8sRUFBRSx1QkFBdUIsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUN4RCxPQUFPLEVBQUUsRUFBRSxFQUErQixPQUFPLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFDaEUsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQzNDLG9DQUFvQztBQUNwQzs7O0dBR0c7QUFDSDtJQUVFLHNCQUNVLGtCQUFzQyxFQUN0Qyx1QkFBZ0Q7UUFEaEQsdUJBQWtCLEdBQWxCLGtCQUFrQixDQUFvQjtRQUN0Qyw0QkFBdUIsR0FBdkIsdUJBQXVCLENBQXlCO0lBQ3RELENBQUM7SUFJTCxzQkFBVyxnQ0FBTTtRQUhqQjs7V0FFRzthQUNIO1lBQUEsaUJBMkNDO1lBMUNDLGNBQWM7WUFDZCxJQUFNLElBQUksR0FBRyxNQUFNLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQztZQUNsQyxJQUFNLE1BQU0sR0FBRyxJQUFJLENBQUMsa0JBQWtCLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDO1lBQ25EOzs7Ozs7Ozs7Ozs7OztjQWNFO1lBQ0Ysb0RBQW9EO1lBQ3BELElBQU0sS0FBSyxHQUFHLE1BQU0sQ0FBQyxLQUFLLENBQUM7WUFDM0IsSUFBSSxDQUFDLEtBQUssRUFBRTtnQkFDViw0Q0FBNEM7Z0JBQzVDLE9BQU8sRUFBRSxDQUFDLE1BQU0sQ0FBQyxDQUFDO2FBQ25CO1lBQ0QsSUFBTSxPQUFPLEdBQUcsSUFBSSxPQUFPLEVBQU8sQ0FBQztZQUNuQyx1QkFBdUI7WUFDdkIsSUFBSSxDQUFDLHVCQUF1QixDQUFDLGdCQUFnQixDQUFDLEtBQUssRUFBRSxVQUFDLENBQU07Z0JBQzFELElBQUksR0FBRyxHQUFHLEVBQUUsQ0FBQztnQkFDYixJQUFJLENBQUMsWUFBWSxHQUFHLElBQUksQ0FBQyxDQUFDLElBQUksT0FBTyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxLQUFLLFVBQVUsSUFBSSxPQUFPLENBQUMsQ0FBQyxTQUFTLENBQUMsS0FBSyxVQUFVLENBQUMsRUFBRTtvQkFDckcsR0FBRyxHQUFHLEtBQUksQ0FBQyxjQUFjLENBQUMsQ0FBQyxDQUFDLENBQUM7aUJBQzlCO2dCQUNELElBQUksSUFBSSxHQUFHLEVBQUUsQ0FBQztnQkFDZCxJQUFJLENBQUMsWUFBWSxHQUFHLElBQUksQ0FBQyxDQUFDLElBQUksT0FBTyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxLQUFLLFVBQVUsSUFBSSxPQUFPLENBQUMsQ0FBQyxTQUFTLENBQUMsS0FBSyxVQUFVLENBQUMsRUFBRTtvQkFDckcsSUFBSSxHQUFHLElBQUksR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO2lCQUNuQjtxQkFBTTtvQkFDTCxJQUFJLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUM7aUJBQzdCO2dCQUNELFVBQVUsQ0FBQztvQkFDVCxPQUFPLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsRUFBRSxFQUFFLElBQUksRUFBRSxHQUFHLEVBQUUsTUFBTSxDQUFDLENBQUMsQ0FBQztnQkFDckQsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO1lBQ1IsQ0FBQyxFQUFFLE1BQU0sQ0FBQyxDQUFDO1lBQ1gsT0FBTyxPQUFPLENBQUMsWUFBWSxFQUFFLENBQUM7UUFDaEMsQ0FBQzs7O09BQUE7SUFDRDs7O09BR0c7SUFDSyxxQ0FBYyxHQUF0QixVQUF1QixNQUFxQjtRQUMxQyxJQUFNLEdBQUcsR0FBRyxFQUFFLENBQUM7UUFDZixHQUFHLENBQUMsdUJBQXVCLENBQUMsR0FBRyxrQkFBa0IsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLHVCQUF1QixDQUFDLENBQUMsQ0FBQztRQUN2RixNQUFNLENBQUMsT0FBTyxDQUFDLFVBQUMsS0FBSyxFQUFFLEdBQUc7WUFDeEIsSUFBSSxHQUFHLEtBQUssdUJBQXVCLEVBQUU7Z0JBQ25DLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxLQUFLLENBQUM7YUFDbEI7UUFDSCxDQUFDLENBQUMsQ0FBQztRQUNILE9BQU8sR0FBRyxDQUFDO0lBQ2IsQ0FBQztJQUNEOzs7T0FHRztJQUNJLDBCQUFHLEdBQVYsVUFBVyxLQUFhO1FBQ3RCLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQ3JCLFNBQVMsQ0FBQyxVQUFBLE9BQU87WUFDZixJQUFJLENBQUMsQ0FBQyxPQUFPLElBQUksT0FBTyxDQUFDLGNBQWMsQ0FBQyxLQUFLLENBQUMsRUFBRTtnQkFDOUMsT0FBTyxFQUFFLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDO2FBQzFCO2lCQUFNO2dCQUNMLE9BQU8sRUFBRSxDQUFDLFNBQVMsQ0FBQyxDQUFDO2FBQ3RCO1FBQ0gsQ0FBQyxDQUFDLENBQ0gsQ0FBQztJQUNKLENBQUM7SUFDRDs7T0FFRztJQUNJLDRCQUFLLEdBQVo7UUFDRSxPQUFPLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUNyQixTQUFTLENBQUMsVUFBQSxPQUFPO1lBQ2YsT0FBTyxFQUFFLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDckIsQ0FBQyxDQUFDLENBQ0gsQ0FBQztJQUNKLENBQUM7O2dCQTNGRixVQUFVOzs7O2dCQVRGLGtCQUFrQjtnQkFDbEIsdUJBQXVCOztJQW9HaEMsbUJBQUM7Q0FBQSxBQTVGRCxJQTRGQztTQTNGWSxZQUFZIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgUXVlcnlzdHJpbmdTZXJ2aWNlIH0gZnJvbSAnLi9xdWVyeXN0cmluZyc7XG5pbXBvcnQgeyBSdW50aW1lRnJhbWV3b3JrU2VydmljZSB9IGZyb20gJy4vcnRmLXNlcnZpY2UnO1xuaW1wb3J0IHsgb2YsIE9ic2VydmFibGUsIEJlaGF2aW9yU3ViamVjdCwgU3ViamVjdCB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgc3dpdGNoTWFwIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuLy8gdHNsaW50OmRpc2FibGU6IG5vLXN0cmluZy1saXRlcmFsXG4vKipcbiAqIOWPguaVsOacjeWKoVxuICogQHNjb3BlIEZvcm1Nb2R1bGVcbiAqL1xuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIFBhcmFtU2VydmljZSB7XG4gIGNvbnN0cnVjdG9yKFxuICAgIHByaXZhdGUgcXVlcnlzdHJpbmdTZXJ2aWNlOiBRdWVyeXN0cmluZ1NlcnZpY2UsXG4gICAgcHJpdmF0ZSBydW50aW1lRnJhbWV3b3JrU2VydmljZTogUnVudGltZUZyYW1ld29ya1NlcnZpY2VcbiAgKSB7IH1cbiAgLyoqXG4gICAqIOmAgumFjeiOt+WPluaJgOacieWPguaVsFxuICAgKi9cbiAgcHVibGljIGdldCBwYXJhbXMoKTogT2JzZXJ2YWJsZTx7IFtwcm9wTmFtZTogc3RyaW5nXTogYW55IH0+IHtcbiAgICAvLyDlhYjku45oYXNo5Lit6I635Y+W5Y+C5pWwXG4gICAgY29uc3QgaGFzaCA9IHdpbmRvdy5sb2NhdGlvbi5oYXNoO1xuICAgIGNvbnN0IHBhcmFtcyA9IHRoaXMucXVlcnlzdHJpbmdTZXJ2aWNlLnBhcnNlKGhhc2gpO1xuICAgIC8qXG4gICAgY29uc3QgYXBwTW9kZSA9IHBhcmFtcy5hcHBNb2RlO1xuICAgIC8vIGFwcE1vZGXmsqHmnInlrprkuYnvvIzorqTkuLrmmK/ogIHooajljZUsYXBwTW9kZSA9IG1kaSDmiJYgc3BhXG4gICAgaWYgKHR5cGVvZiBhcHBNb2RlID09PSAndW5kZWZpbmVkJyB8fCBhcHBNb2RlID09PSBudWxsKSB7XG4gICAgICAgIHJldHVybiBvZihwYXJhbXMpO1xuICAgIH1cbiAgICAvLyBhcHBNb2Rl5a2Y5Zyo77yM5L2G5Li656m677yM5Lmf6K6k5Li65piv6ICB6KGo5Y2VXG4gICAgaWYgKGFwcE1vZGUubGVuZ3RoIDwgMSkge1xuICAgICAgICByZXR1cm4gb2YocGFyYW1zKTtcbiAgICB9XG4gICAgLy8g5paw6KGo5Y2V77yM5L2/55SoaWZyYW1l5qih5byPXG4gICAgaWYgKGFwcE1vZGUudG9Mb3dlckNhc2UoKSA9PT0gJ21kaScpIHtcbiAgICAgICAgcmV0dXJuIG9mKHBhcmFtcyk7XG4gICAgfVxuICAgICovXG4gICAgLy8g6I635Y+WdGFiSWTvvIzmnIDmlrDniYjmnKzkuIDlrprmnIl0YWJJZO+8jOWmguaenOWPluS4jeWIsHRhYklk5YiZ6K6k5Li65piv6ICB6KGo5Y2V77yM55u05o6l5LuOdXJs6I635Y+W5Y+C5pWwXG4gICAgY29uc3QgdGFiSWQgPSBwYXJhbXMudGFiSWQ7XG4gICAgaWYgKCF0YWJJZCkge1xuICAgICAgLy8gdGhyb3cgbmV3IEVycm9yKCdUYWJJZCBjYW5gdCBiZSBlbXB0eSEnKTtcbiAgICAgIHJldHVybiBvZihwYXJhbXMpO1xuICAgIH1cbiAgICBjb25zdCBzdWJqZWN0ID0gbmV3IFN1YmplY3Q8YW55PigpO1xuICAgIC8vIOeuoemBk+WPguaVsGXlj6/og73kuLpvYmplY3TjgIFNYXDnsbvlnotcbiAgICB0aGlzLnJ1bnRpbWVGcmFtZXdvcmtTZXJ2aWNlLmFkZEV2ZW50TGlzdGVuZXIodGFiSWQsIChlOiBhbnkpID0+IHtcbiAgICAgIGxldCBtYXAgPSB7fTtcbiAgICAgIGlmIChlIGluc3RhbmNlb2YgTWFwIHx8IChlICYmIHR5cGVvZiAoZVsnZ2V0J10pID09PSAnZnVuY3Rpb24nICYmIHR5cGVvZiBlWydlbnRyaWVzJ10gPT09ICdmdW5jdGlvbicpKSB7XG4gICAgICAgIG1hcCA9IHRoaXMucGFyc2VNYXBQYXJhbXMoZSk7XG4gICAgICB9XG4gICAgICBsZXQgYXJncyA9IHt9O1xuICAgICAgaWYgKGUgaW5zdGFuY2VvZiBNYXAgfHwgKGUgJiYgdHlwZW9mIChlWydnZXQnXSkgPT09ICdmdW5jdGlvbicgJiYgdHlwZW9mIGVbJ2VudHJpZXMnXSA9PT0gJ2Z1bmN0aW9uJykpIHtcbiAgICAgICAgYXJncyA9IG5ldyBNYXAoZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBhcmdzID0gT2JqZWN0LmFzc2lnbih7fSwgZSk7XG4gICAgICB9XG4gICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgc3ViamVjdC5uZXh0KE9iamVjdC5hc3NpZ24oe30sIGFyZ3MsIG1hcCwgcGFyYW1zKSk7XG4gICAgICB9LCAwKTtcbiAgICB9LCBwYXJhbXMpO1xuICAgIHJldHVybiBzdWJqZWN0LmFzT2JzZXJ2YWJsZSgpO1xuICB9XG4gIC8qKlxuICAgKiDop6PmnpBtYXDnsbvlnovnmoTlj4LmlbBcbiAgICogQHBhcmFtIHBhcmFtcyBwYXJhbXNcbiAgICovXG4gIHByaXZhdGUgcGFyc2VNYXBQYXJhbXMocGFyYW1zOiBNYXA8YW55LCBhbnk+KSB7XG4gICAgY29uc3QgbWFwID0ge307XG4gICAgbWFwWydXRUJfRk9STV9ST1VURV9QQVJBTVMnXSA9IGRlY29kZVVSSUNvbXBvbmVudChwYXJhbXMuZ2V0KCdXRUJfRk9STV9ST1VURV9QQVJBTVMnKSk7XG4gICAgcGFyYW1zLmZvckVhY2goKHZhbHVlLCBrZXkpID0+IHtcbiAgICAgIGlmIChrZXkgIT09ICdXRUJfRk9STV9ST1VURV9QQVJBTVMnKSB7XG4gICAgICAgIG1hcFtrZXldID0gdmFsdWU7XG4gICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIG1hcDtcbiAgfVxuICAvKipcbiAgICog6I635Y+WcGFyYW3lj4LmlbBcbiAgICogQHBhcmFtIHBhcmFtIGtleVxuICAgKi9cbiAgcHVibGljIGdldChwYXJhbTogc3RyaW5nKTogT2JzZXJ2YWJsZTxhbnk+IHtcbiAgICByZXR1cm4gdGhpcy5wYXJhbXMucGlwZShcbiAgICAgIHN3aXRjaE1hcChvcHRpb25zID0+IHtcbiAgICAgICAgaWYgKCEhb3B0aW9ucyAmJiBvcHRpb25zLmhhc093blByb3BlcnR5KHBhcmFtKSkge1xuICAgICAgICAgIHJldHVybiBvZihvcHRpb25zLnBhcmFtKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXR1cm4gb2YodW5kZWZpbmVkKTtcbiAgICAgICAgfVxuICAgICAgfSlcbiAgICApO1xuICB9XG4gIC8qKlxuICAgKiDlj4LmlbDovazkuLrlr7nosaFcbiAgICovXG4gIHB1YmxpYyBwYXJzZSgpOiBPYnNlcnZhYmxlPGFueT4ge1xuICAgIHJldHVybiB0aGlzLnBhcmFtcy5waXBlKFxuICAgICAgc3dpdGNoTWFwKG9wdGlvbnMgPT4ge1xuICAgICAgICByZXR1cm4gb2Yob3B0aW9ucyk7XG4gICAgICB9KVxuICAgICk7XG4gIH1cbn1cbiJdfQ==