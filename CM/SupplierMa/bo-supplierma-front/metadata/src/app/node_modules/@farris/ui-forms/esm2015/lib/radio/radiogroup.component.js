/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input, forwardRef, EventEmitter, Optional, Injector } from '@angular/core';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import { IdService, CommonUtils } from '@farris/ui-common';
import { Output } from '@angular/core';
export class FarrisRadioGroupComponent {
    /**
     * @param {?} idSer
     * @param {?} inject
     */
    constructor(idSer, inject) {
        this.idSer = idSer;
        this.inject = inject;
        /* radio 数组 */
        this.data = [];
        this.textField = 'name';
        this.valueField = 'value';
        /* 点击事件 */
        this.changeValue = new EventEmitter();
        this.controlChange = (/**
         * @return {?}
         */
        () => { });
        this.controlTouch = (/**
         * @return {?}
         */
        () => { });
        if (this.inject) {
            this.commonUtils = this.inject.get(CommonUtils);
        }
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.name = this.idSer.generate().replace(/-/g, '_');
    }
    /**
     * @param {?} item
     * @return {?}
     */
    clickHandler(item) {
        /** @type {?} */
        let val = this._getValue(item);
        if (this.value == val)
            return;
        // 更改control的值
        this.value = val;
        this.controlChange(this.value);
        this.controlTouch(this.value);
        this.changeValue.emit(this.value);
    }
    /**
     * @param {?} item
     * @return {?}
     */
    _getText(item) {
        if (item) {
            if (this.commonUtils && this.commonUtils.getValue) {
                return this.commonUtils.getValue(this.textField, item);
            }
            else {
                return item[this.textField];
            }
        }
        else {
            return '';
        }
    }
    /**
     * @param {?} item
     * @return {?}
     */
    _getValue(item) {
        if (item) {
            if (this.commonUtils && this.commonUtils.getValue) {
                return this.commonUtils.getValue(this.valueField, item);
            }
            else {
                return item[this.valueField];
            }
        }
        else {
            return '';
        }
    }
    /**
     * @param {?} value
     * @return {?}
     */
    writeValue(value) {
        this.value = value;
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnChange(fn) {
        this.controlChange = fn;
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnTouched(fn) {
        this.controlTouch = fn;
    }
}
FarrisRadioGroupComponent.decorators = [
    { type: Component, args: [{
                selector: 'farris-radiogroup',
                template: "<div class=\"farris-input-wrap\" [class.farris-checkradio-hor]=\"horizontal\">\r\n    <div class=\"custom-control custom-radio\" *ngFor=\"let item of data; let i=index\">\r\n        <input #input class=\"custom-control-input\" [name]=\"name\" id=\"{{'radio_'+name+i}}\" type=\"radio\"\r\n        [value]=\"_getValue(item)\" (click)=\"clickHandler(item)\" [checked]=\"_getValue(item) == value\" \r\n        [disabled]=\"disabled\" tabindex=\"{{tabIndex}}\">\r\n        <label class=\"custom-control-label\" for=\"{{'radio_'+name+i}}\">{{_getText(item)}}</label>\r\n    </div>\r\n</div>\r\n\r\n\r\n",
                providers: [{
                        provide: NG_VALUE_ACCESSOR,
                        useExisting: forwardRef((/**
                         * @return {?}
                         */
                        () => FarrisRadioGroupComponent)),
                        multi: true,
                    }],
                exportAs: 'FarrisRadioGroupComponent'
            }] }
];
/** @nocollapse */
FarrisRadioGroupComponent.ctorParameters = () => [
    { type: IdService },
    { type: Injector, decorators: [{ type: Optional }] }
];
FarrisRadioGroupComponent.propDecorators = {
    tabIndex: [{ type: Input, args: ['tab-index',] }],
    data: [{ type: Input }],
    type: [{ type: Input }],
    name: [{ type: Input }],
    horizontal: [{ type: Input }],
    disabled: [{ type: Input }],
    value: [{ type: Input }],
    textField: [{ type: Input }],
    valueField: [{ type: Input }],
    changeValue: [{ type: Output }]
};
if (false) {
    /** @type {?} */
    FarrisRadioGroupComponent.prototype.tabIndex;
    /** @type {?} */
    FarrisRadioGroupComponent.prototype.data;
    /** @type {?} */
    FarrisRadioGroupComponent.prototype.type;
    /** @type {?} */
    FarrisRadioGroupComponent.prototype.name;
    /** @type {?} */
    FarrisRadioGroupComponent.prototype.horizontal;
    /** @type {?} */
    FarrisRadioGroupComponent.prototype.disabled;
    /** @type {?} */
    FarrisRadioGroupComponent.prototype.value;
    /** @type {?} */
    FarrisRadioGroupComponent.prototype.textField;
    /** @type {?} */
    FarrisRadioGroupComponent.prototype.valueField;
    /** @type {?} */
    FarrisRadioGroupComponent.prototype.changeValue;
    /**
     * @type {?}
     * @private
     */
    FarrisRadioGroupComponent.prototype.commonUtils;
    /**
     * @type {?}
     * @private
     */
    FarrisRadioGroupComponent.prototype.controlChange;
    /**
     * @type {?}
     * @private
     */
    FarrisRadioGroupComponent.prototype.controlTouch;
    /**
     * @type {?}
     * @private
     */
    FarrisRadioGroupComponent.prototype.idSer;
    /**
     * @type {?}
     * @private
     */
    FarrisRadioGroupComponent.prototype.inject;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmFkaW9ncm91cC5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZmFycmlzL3VpLWZvcm1zLyIsInNvdXJjZXMiOlsibGliL3JhZGlvL3JhZGlvZ3JvdXAuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBRSxVQUFVLEVBQVUsWUFBWSxFQUFFLFFBQVEsRUFBRSxRQUFRLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDdkcsT0FBTyxFQUFFLGlCQUFpQixFQUFtRCxNQUFNLGdCQUFnQixDQUFDO0FBQ3BHLE9BQU8sRUFBRSxTQUFTLEVBQUUsV0FBVyxFQUFFLE1BQU0sbUJBQW1CLENBQUM7QUFFM0QsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLGVBQWUsQ0FBQztBQVd2QyxNQUFNLE9BQU8seUJBQXlCOzs7OztJQXdCbEMsWUFBb0IsS0FBZ0IsRUFBc0IsTUFBZ0I7UUFBdEQsVUFBSyxHQUFMLEtBQUssQ0FBVztRQUFzQixXQUFNLEdBQU4sTUFBTSxDQUFVOztRQXJCakUsU0FBSSxHQUFZLEVBQUUsQ0FBQztRQWdCbkIsY0FBUyxHQUFHLE1BQU0sQ0FBQztRQUNuQixlQUFVLEdBQUcsT0FBTyxDQUFDOztRQUVwQixnQkFBVyxHQUFHLElBQUksWUFBWSxFQUFPLENBQUM7UUE0RHhDLGtCQUFhOzs7UUFBeUIsR0FBRyxFQUFFLEdBQUcsQ0FBQyxFQUFDO1FBQ2hELGlCQUFZOzs7UUFBeUIsR0FBRyxFQUFFLEdBQUcsQ0FBQyxFQUFDO1FBMURuRCxJQUFJLElBQUksQ0FBQyxNQUFNLEVBQUU7WUFDYixJQUFJLENBQUMsV0FBVyxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLFdBQVcsQ0FBQyxDQUFDO1NBQ25EO0lBQ0wsQ0FBQzs7OztJQUdELFFBQVE7UUFDSixJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsUUFBUSxFQUFFLENBQUMs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bnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50LCBJbnB1dCwgZm9yd2FyZFJlZiwgT25Jbml0LCBFdmVudEVtaXR0ZXIsIE9wdGlvbmFsLCBJbmplY3RvciB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBOR19WQUxVRV9BQ0NFU1NPUiwgQ29udHJvbFZhbHVlQWNjZXNzb3IsIFJhZGlvQ29udHJvbFZhbHVlQWNjZXNzb3IgfSBmcm9tICdAYW5ndWxhci9mb3Jtcyc7XHJcbmltcG9ydCB7IElkU2VydmljZSwgQ29tbW9uVXRpbHMgfSBmcm9tICdAZmFycmlzL3VpLWNvbW1vbic7XHJcbmltcG9ydCB7IFJhZGlvIH0gZnJvbSAnLi9yYWRpbyc7XHJcbmltcG9ydCB7IE91dHB1dCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5AQ29tcG9uZW50KHtcclxuICAgIHNlbGVjdG9yOiAnZmFycmlzLXJhZGlvZ3JvdXAnLFxyXG4gICAgdGVtcGxhdGVVcmw6ICcuL3JhZGlvZ3JvdXAuY29tcG9uZW50Lmh0bWwnLFxyXG4gICAgcHJvdmlkZXJzOiBbe1xyXG4gICAgICAgIHByb3ZpZGU6IE5HX1ZBTFVFX0FDQ0VTU09SLFxyXG4gICAgICAgIHVzZUV4aXN0aW5nOiBmb3J3YXJkUmVmKCgpID0+IEZhcnJpc1JhZGlvR3JvdXBDb21wb25lbnQpLFxyXG4gICAgICAgIG11bHRpOiB0cnVlLFxyXG4gICAgfV0sXHJcbiAgICBleHBvcnRBczogJ0ZhcnJpc1JhZGlvR3JvdXBDb21wb25lbnQnXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBGYXJyaXNSYWRpb0dyb3VwQ29tcG9uZW50IGltcGxlbWVudHMgQ29udHJvbFZhbHVlQWNjZXNzb3IsIE9uSW5pdCB7XHJcbiAgICBASW5wdXQoJ3RhYi1pbmRleCcpIHRhYkluZGV4OiBudW1iZXI7XHJcbiAgICAvKiByYWRpbyDmlbDnu4QgKi9cclxuICAgIEBJbnB1dCgpIGRhdGE6IFJhZGlvW10gPSBbXTtcclxuXHJcbiAgICAvKiByYWRpbyDnsbvlnosgICDljp/nlJ/miJbogIXmjInpkq7nsbvlnosqL1xyXG4gICAgQElucHV0KCkgdHlwZTogc3RyaW5nO1xyXG5cclxuICAgIC8qIG5hbWXmoIfor4YgKi9cclxuICAgIEBJbnB1dCgpIG5hbWU6IHN0cmluZztcclxuXHJcbiAgICAvKiDmsLTlubPmjpLliJcgKi9cclxuICAgIEBJbnB1dCgpIGhvcml6b250YWw6IGJvb2xlYW47XHJcblxyXG4gICAgLyog56aB55SoICovXHJcbiAgICBASW5wdXQoKSBkaXNhYmxlZDogYm9vbGVhbjtcclxuXHJcbiAgICAvKiByYWRpbyDlgLwgKi9cclxuICAgIEBJbnB1dCgpIHZhbHVlOiBhbnk7XHJcbiAgICBASW5wdXQoKSB0ZXh0RmllbGQgPSAnbmFtZSc7XHJcbiAgICBASW5wdXQoKSB2YWx1ZUZpZWxkID0gJ3ZhbHVlJztcclxuICAgIC8qIOeCueWHu+S6i+S7tiAqL1xyXG4gICAgQE91dHB1dCgpIGNoYW5nZVZhbHVlID0gbmV3IEV2ZW50RW1pdHRlcjxhbnk+KCk7XHJcbiAgICBwcml2YXRlIGNvbW1vblV0aWxzOiBDb21tb25VdGlscztcclxuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgaWRTZXI6IElkU2VydmljZSwgQE9wdGlvbmFsKCkgcHJpdmF0ZSBpbmplY3Q6IEluamVjdG9yKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuaW5qZWN0KSB7XHJcbiAgICAgICAgICAgIHRoaXMuY29tbW9uVXRpbHMgPSB0aGlzLmluamVjdC5nZXQoQ29tbW9uVXRpbHMpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcblxyXG4gICAgbmdPbkluaXQoKSB7XHJcbiAgICAgICAgdGhpcy5uYW1lID0gdGhpcy5pZFNlci5nZW5lcmF0ZSgpLnJlcGxhY2UoLy0vZywgJ18nKTtcclxuICAgIH1cclxuXHJcbiAgICBjbGlja0hhbmRsZXIoaXRlbTogYW55KSB7XHJcbiAgICAgICAgbGV0IHZhbCA9IHRoaXMuX2dldFZhbHVlKGl0ZW0pO1xyXG4gICAgICAgIGlmKHRoaXMudmFsdWUgPT0gdmFsKSByZXR1cm47XHJcbiAgICAgICAgLy8g5pu05pS5Y29udHJvbOeahOWAvFxyXG4gICAgICAgIHRoaXMudmFsdWUgPSB2YWw7XHJcbiAgICAgICAgdGhpcy5jb250cm9sQ2hhbmdlKHRoaXMudmFsdWUpO1xyXG4gICAgICAgIHRoaXMuY29udHJvbFRvdWNoKHRoaXMudmFsdWUpO1xyXG4gICAgICAgIHRoaXMuY2hhbmdlVmFsdWUuZW1pdCh0aGlzLnZhbHVlKTtcclxuICAgIH1cclxuXHJcbiAgICBfZ2V0VGV4dChpdGVtKSB7XHJcbiAgICAgICAgaWYgKGl0ZW0pIHtcclxuICAgICAgICAgICAgaWYgKHRoaXMuY29tbW9uVXRpbHMgJiYgdGhpcy5jb21tb25VdGlscy5nZXRWYWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuY29tbW9uVXRpbHMuZ2V0VmFsdWUodGhpcy50ZXh0RmllbGQsIGl0ZW0pO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGl0ZW1bdGhpcy50ZXh0RmllbGRdO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgcmV0dXJuICcnO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBfZ2V0VmFsdWUoaXRlbSkge1xyXG4gICAgICAgIGlmIChpdGVtKSB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLmNvbW1vblV0aWxzICYmIHRoaXMuY29tbW9uVXRpbHMuZ2V0VmFsdWUpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmNvbW1vblV0aWxzLmdldFZhbHVlKHRoaXMudmFsdWVGaWVsZCwgaXRlbSk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gaXRlbVt0aGlzLnZhbHVlRmllbGRdO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgcmV0dXJuICcnO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcblxyXG4gICAgd3JpdGVWYWx1ZSh2YWx1ZTogYW55KTogdm9pZCB7XHJcbiAgICAgICAgdGhpcy52YWx1ZSA9IHZhbHVlO1xyXG4gICAgfVxyXG5cclxuICAgIHJlZ2lzdGVyT25DaGFuZ2UoZm46ICgpID0+IHZvaWQpOiB2b2lkIHtcclxuICAgICAgICB0aGlzLmNvbnRyb2xDaGFuZ2UgPSBmbjtcclxuICAgIH1cclxuXHJcbiAgICByZWdpc3Rlck9uVG91Y2hlZChmbjogKCkgPT4gdm9pZCk6IHZvaWQge1xyXG4gICAgICAgIHRoaXMuY29udHJvbFRvdWNoID0gZm47XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBjb250cm9sQ2hhbmdlOiAodmFsdWU6IGFueSkgPT4gdm9pZCA9ICgpID0+IHsgfTtcclxuICAgIHByaXZhdGUgY29udHJvbFRvdWNoOiAodmFsdWU6IGFueSkgPT4gdm9pZCA9ICgpID0+IHsgfTtcclxuXHJcbn1cclxuIl19