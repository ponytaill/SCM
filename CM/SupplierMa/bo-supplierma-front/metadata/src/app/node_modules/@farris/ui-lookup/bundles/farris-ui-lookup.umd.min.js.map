{"version":3,"sources":["node_modules/tslib/tslib.es6.js","ng://@farris/ui-lookup/lib/lookup-displaytype.ts","ng://@farris/ui-lookup/lib/lookup.component.ts","ng://@farris/ui-lookup/lib/lookup-grid-options.ts","ng://@farris/ui-lookup/lib/http/ILookupHttpService.ts","ng://@farris/ui-lookup/lib/lookup-defaut-mapping.ts","ng://@farris/ui-lookup/lib/utils.ts","ng://@farris/ui-lookup/lib/lookup-presonalConfig.service.ts","ng://@farris/ui-lookup/lib/services/util.service.ts","ng://@farris/ui-lookup/lib/services/treenode.helper.ts","ng://@farris/ui-lookup/lib/services/favorite-helper.ts","ng://@farris/ui-lookup/lib/services/selection-manager.ts","ng://@farris/ui-lookup/lib/services/bind-datatable-event.ts","ng://@farris/ui-lookup/lib/services/on-text-change.ts","ng://@farris/ui-lookup/lib/services/bind-treetable-event.ts","ng://@farris/ui-lookup/lib/services/multi-selection.manager.ts","ng://@farris/ui-lookup/lib/services/http-manager.ts","ng://@farris/ui-lookup/lib/lookup-left.component.ts","ng://@farris/ui-lookup/lib/services/lookup-component.manager.ts","ng://@farris/ui-lookup/lib/services/dialog-mangager.ts","ng://@farris/ui-lookup/lib/services/lookup-selection.service.ts","ng://@farris/ui-lookup/lib/lookup-grid.component.ts","ng://@farris/ui-lookup/lib/lookup-tabs.component.ts","ng://@farris/ui-lookup/lib/lookup-tip.directive.ts","ng://@farris/ui-lookup/lib/quick-select/quick-select-panel.component.ts","ng://@farris/ui-lookup/lib/quick-select/lookup-quick-select.directive.ts","ng://@farris/ui-lookup/lib/lookup.module.ts"],"names":["extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__assign","assign","t","s","i","n","arguments","length","prototype","call","apply","this","__read","o","m","Symbol","iterator","r","e","ar","next","done","push","value","error","__spread","concat","FAVORITE_FIELD_NAME","List","TreeList","NavList","NavTreeList","QuickSelectDefaultOptions","enable","showMore","showItemsCount","footerHeight","LOOKUPINPUT_VALUE_ACCESSOR","provide","NG_VALUE_ACCESSOR","useExisting","forwardRef","LookupComponent","multi","defineProperty","content","dialog","dialogCreated","_isShow","val","changeDetector","detectChanges","ngControl","valid","ngOnInit","initEvents","injector","get","NgControl","ngOnDestroy","lookupUnsubscribe","ngAfterViewChecked","_this","closed","subscribe","isShow","dictPicking","of","showDialog","dictPicked","closeDialog","beforeOpen","beforeClose","dialogHeight","defaultDialogSize","height","dialogWidth","width","disabled","readonly","ngZone","runOutsideAngular","setTimeout","show","close","dictPickedSubscription","unsubscribe","dictPickingSubscription","dialogCreatedSubscription","onResizing","pos","resizing","emit","size","onResized","resized","onMaxDialog","dialogMaxed","writeValue","obj","displayText","displayValue","originalText","registerOnChange","fn","onModelChange","registerOnTouched","onModelTouched","setDisabledState","isDisabled","Component","args","selector","template","providers","Injector","ElementRef","ChangeDetectorRef","HostBinding","Input","Output","ViewChild","el","hostCls","title","buttonAlign","showButtons","showCloseButton","showMaxButton","resizable","draggable","editable","dialogOpened","EventEmitter","dialogClosed","Subject","NgZone","DisplayInfo","lookupGridDefaults","singleSelect","showFilterBar","pagination","pageIndex","pageSize","pageList","displayInfoDefault","favorites","okText","cancelText","allColumns","ServerSideToken","InjectionToken","LookupDefaultMapping","Injectable","CommonUtils","utils","lookupFieldMap","helpData","mapFields","dataObj","keys","forEach","f","map","h","getValue","join","split","ff","field","trim","setValue","LookupUtils","setActiveLookupInstance","lookupIns","rts","setLookupInstance","destroy","pendingStart","updateFormState","lookup","pending","document","body","style","pendingEnd","createFilterCondition","filterField","lbracket","rbracket","relation","FilterRelation","Or","compare","Compare","Like","mergeCondition","condition","fields","searchData","cloneDeep","filterConditions","sortConditions","_a","_b","_c","searchConditions","lastSearchConditions","Empty","And","searchCondition","canSelectable","makeTreeWithParentID","data","parentId","parentIdField","idField","nodes","Map","result","unattached","node","children","selectable","parent","parents","id","set","PID","parent_1","pid","makeTree","treeInfo","treeInfoField","dataField","layerField","pathField","pathCode","parentPathCode","substr","parent_2","RuntimeStateService","PersonalConfigService","_key","buildKey","controlID","_newKey","str","pathArr","prefix","location","hash","pathname","idService","encrypt","initPersonalConf","getPersonalData","key","personalConfigKey","conf","localStorage","getItem","personalConf","JSON","parse","_updatePersonalConfig","removeItem","savePersonalConfig","getQuickSelected","localeId","qs","quickSelected","items","getDialogSize","updatePersonalConfig","cfg","setItem","stringify","getActiveTabIndex","tabName","tabIndex","updateQueckSelected","selectedRow","quickItems","selectedIndex_1","element","index","item","filter","v","unshift","_qs","newData","per","flag","favorite","isArray","zh-CHS","selected","IdService","selectItemObser$","displayType","UtilService","instance","TreeNodeHelper","getTreeInfo","treeNode","treeInfoDataField_1","toLowerCase","find","writeConsole","getTreeNodeLayer","updateTreeNodeExpanded","treeNodes","expandLevel","flatAllNodes","treeData2Flat","tn","expanded","shoudExpand","isSelectNodeParent","leaf","level","parentIds","arr","parentID","_parents","rowNode","nodeLayer","navSelectedIds","allParentIds","includes","getLeafNode","flatTreeNodes","reduce","c","FavoriteHelper","getFavoriteColumns","gridOptions","columns","rtn","formatter","FavoriteIcon","initPersonalInfo","personalConfigService","nativeElement","controlId","pcstr","getPersonalConfigKey","textField","listenPersonalConfigHandler","_this_1","name","k","initFavoriteComponentEvent","cmpRef","LookupGridDisplayType","fdt_1","remoteSort","lookupSelectionSer","clearSelections","updateSelections","unSelectRow","unSelect","checkAll","cellClick","col","event","stopPropagation","target","contains","row","dt","componentRef","loadData","total","favoriteItems","updateFavoriteData","FavoriteAction","rowDblClick","rowData","selectItem","ftt","nodeSelected","nodeUnChecked","multiSelMgr","remove","nodeChecked","_this_2","every","hasFinish","dblClick","okButton","click","checkeds","checkedChange","isCheck","unCheckAll","clear","getFavoritData","favData","localService","getFavoritIds","_loadFavoriteData","fdt","favoritesComponentRef","loadFavoriteDatatable","cd","markForCheck","closeLoading","loadFavoritesData","res","favoriteDataFrom","TreeTableComponent","bindFavTreetable","loadFavoriteForTreeTable","undefined","favoriteColumns","selectionMgr","selectCurrentValue","allColumnsTitle","favids","findIndex","onlySelectLeaf","checkOnSelect","selectOnCheck","showCheckbox","enableCascade","ttEventMgr","cascadeValueChanged","cascadeStatus","cascadeCheck","cascadeDown","cascadeUp","checkNodeIsLeaf","initFavoriteTreeData","layerType","lookupUtils","parentField","expandAll","updateFavoritesStatus","useFavorite","favIds","_this_3","each","_data","_updateFavorites","action","localeID","newVal","favoriteItems$","httpMgr","submitFavoriteData","ftt_1","showLoading","getData","favoriteIds","resData","_items","favoriteColumnFormatter","isTree","rn","findRowNode","SelectionManager","getBindingData","jsonData","ins","bindingData","formDirective","form","getObject","toJSON","initDisplayValue","targetField","indexOf","_clearSelections","getDataCmpInstance","cmpRefInstance","clearAll","cdRef","destroyed","dtBody","selectedRowIndex","selections","selectedIds","enableToSelect","selectedRows","getSelections","selected4Treetable","selected4Datatable","ref","activeTab","lookupCmpMgr","getComponentInstance","serializedValue","values","isSelected","checkRow","valueArr","selectNode","checkedNodes","selectNodes","getSelectedIds","multipleChoiceSeparator","showSelected","rows","DataTableEventManager","onSearch","$event","pageInfo","search","uri","searching","pipe","catchError","err","_ERROR_","tap","Error","_loadData","messagerService","warning","mustWriteSomething","self","favHelper","loadDataTableData","bindDataTableEvent","pageChanged","pagerChanged","buildQueryParams","pageSizeChanged","_searchState","faction","columnSorted","sort","sortName","sortOrder","param","fieldPath","clearSearchValue","checkSearchResult","searchOnServer","cancelSelect","setModelValue","runDictPickedEvent","onTextChanged","isTextChange","nosearch","originalEvent","getFormState","switchMap","pr","customData","type","SHOWDIALOG","MESSAGE","message","notifyService","bind","rowdata","leafNode","treeNodeHelper","isOnlySelectLeaf","setTreeInfo","Message","inputBlurHandler","inputGroup","textbox","render2","listen","enterHandle","keydownHandle","code","selectionStart","shortcutKey","open","preventDefault","TreeTableEventManager","searchTreeData","tt","checkNodes_1","expandFirstNode_1","_nodes","resize","IS_SEARCH_RESULT","getChildren","parentPath","parentLayer","category","searchValue","enableFullTree","loadTreeDataType","searchField","helpId","http","bindTreetableEvent","_searchTreeData","searchparam","remoteSearch","isLoadAllTreeData","loadDataType","dblClickExpand","searchFields","virtualized","allData","showCheckAll","enableFindText","unSelectNode","pathcode","unselectByPathcode","loadAllData","clientSort","sortName_1","_sortName","checkNodeCanBeSelect","expand","isGetAllChidlNodes","propagateSelectionDown","isChecked","selectItems","expandTreeNode","parentIdOrPath","appendChildren","addtional","psRef","directiveRef","update","instanceTyp","MultiSelectionManager","onSelectedTableCellClick","rid","unCheckedNode","_tt","unCheckRow","_dt","initSelectedColumns","selectedColumns","favcol","select","save","loadSelections","DefaultUserConfig","LookupHttpManager","disablePagination","params","searchParam","isDoublleList","navigationFilter","idValue","relationFilter","sfield","searchType","selectedInfo","beUri","allSearchFields","isUsePagination","_uri","context","_searchResult","params1","parentsIds","getSelecedItems","selIds","getPersonalConfig","defaultConf","_conf","req","isTabChanged","ucs","textValue","lookupRequest","usePersionalConf","_originalPersonalConfig","reSize","a","_sids","msg","addFavoriteSuccess","delFavoriteSuccess","configData","configkey1","configkey2","configkey3","textvalue","savingFaoriteData","success","LookupLeftComponent","createComponent","dtFac","isTreeList","cfr","resolveComponentFactory","DataTableComponent","navOptions","lookupCmp","leftPanelWidth","cmpContainer","maxSize","fill","enablePager","selectLeftDataTableRow","selectFirstInNav","initDataTable","loadTableData","dataTableReLoad","initTreeTable","nodeUnSelect","fixedHeader","selectFirstNode","loadTreeData","onNodeExpanded","console","log","ComponentFactoryResolver","read","ViewContainerRef","unselected","LookupComponentManager","multiSelectDT","leftRef","leftComponentRef","createComponentWithServerData","valueField","createContent","createFavoriteComponent","resizeComponent","favoritesOptions","createFavoritesContent","reloadTreeDataForExpand","layerNum","setTreeNodeExpandBy","layer","expandLayer","useContextMenuForTree","treeTableOptions","maxLevel","enableContextMenu","language","levelMenus","handle","menu","isLoadAllTreeData_1","updateSerializedValue","firstNodeData","_level","contextMenus","expandall","collapseall","collapseAll","expandByLayer","contextMenuItems","beforeShowContextMenu","state","searched","opts","getComponentType","centerContainer","contentContainer","fit","fitColumns","autoFitColumns","ttOpts","favoritesContainer","dialogMgr","getHeight","createLeftComponent","ops","leftContainer","navLookupDialogMinWidth","resizeCmp","leftPanel","debounceTime","getNavigationFilter","loadDataWhenOpen","navRow","navigationOptions","relations","result_1","groupField","rf","fieldName","helpField","fieldValue","LookupDialogManager","lookupInit","_loadDataWhenOpen","_navSelectedId","_selectFirstInNav","enableGetAllChildNodes","keyDownHandler","focus","userInitialConfig","reset","_treeInfo_","onDialogCreated","dlg","dialogOpenedSubscription","dialogClosedSubscription","registerDialogEvent","isRecordSize","dlgSize","checkDictPickingResult","canOpenDialog","isReady","contentHeight","containerMargin","bottom","top","getMainGridSize","left","right","resetDialogContentHeight","hHeight","header","fHeight","footer","opened","dialogContentHeight","querySelector","customDisplayType","initData","subscriptions","lookupinitializationSubject","registerShortcutKey","leftPanelResize$","dlgContainerDom","eventManager","addEventListener","moveUp","moveDown","searchFocus","confirm","nextPager","prevPager","collapse","onKeydownEvent","ctrlKey","isNextPager","paginationKeyDownHandler","datatableRef","newPageNum","Math","ceil","onPageChange","LookupSelectionService","initFavoriteItems","selecteditems","state$","checked","ids2_1","BehaviorSubject","selected$","quickItems$","_super","LOOKUPGRID_VALUE_ACCESSOR","LookupGridComponent","__extends","__","constructor","create","tslib_1.__extends","_displayType","toUpperCase","align","fixed","_gridOptions","resizableColumns","hover","useTip","_userSettings","debugSer","cacheUserConfig","_title","displayInfo","_columns","deepClone","getColumns","clone","from","checkGridOptions","mustChoosAdatarow","quickSelect","farrisInstances","lookupSearchInputEvent","overLayService","destory","ngOnChanges","changes","isFirstChange","ngAfterViewInit","useExtendInfo","updateExtendInfo","viewType","registerMouseEventForTagView","tagboxHeight","tagbox","tbh","maxTagboxHeight","setStyle","add","createInstance","MessagerService","loadingService","LoadingService","NotifyService","utilService","LocaleService","dtEventMgr","_size","beforeSelectData","ctxMenuLanguages","defaultTreeTableOptions","modalContent","loading","container","delay","getSearchColumns","resdata","cols","sf","label","initOptions","obser","setLookupTitleText","navigation","customNavFormatter","rowStyler","cellStyler","_nav_treeinfo_loadtype","customFormatter","showGetAllChildrenCheckbox","observer","selectedItems","toggleExpand","hasError","vals","restData","rebindEvent","loadTreeTableData","loadFavData","treeData","scrollToY","updateDataTable","loadSuccess","_treeInfo","_osl","tt_1","isLoadAll","keepSelect","isAllTreeData","onChanges","clearMappings","valueChanged","textChanged","onClear","extendInfo","mappingFn","defaultMapping","clearValue","okHandler","bsdResult","_beforeSelectDataCallBack","getParentPathCode","maxLayer","x","max","_rows","patchCode","_rows2","canSelect","selectedRows$","allitems","ids","Set","updateControlValue","setDisplayText","updateBindData","selectedData","activeElement","blur","helpFields","bindingData_1","formField","getExtendInfoFields","isHelpData","extInfoFields","tipFieldArr","tf","mapKey","onUpdateExtendInfo","extInfoFormatter","tipString","getExtendInfoText","extendInfoFields_1","itemData","tipString_1","tfv","getDisplayText","df","displayFields","txtArr","displayTextSeparator","displayFormatter","tree","datatable","focusToInput","zone","cancelHandler","onTabChange","_firstChange","y","scrollY","enableClear","onTagboxMouseEnter","onTagboxMouseLeave","toggleClearIcon","clearIcon","display","showTagboxClearButton","onRemoveSelectItem","txt","textArray","displayTextList","removedIndex","splice","updateOtherFieldDataWhenTagremoved","tagRemoved","textFieldIndex","bindingData_2","bindingPath","pathArr_1","fieldPaths","valArr","onAllChildNodesClick","ShortcutsService","encapsulation","ViewEncapsulation","None","exportAs","Renderer2","shortcuts","groupIcon","placeholder","navTreeTableOptions","dataTableOptions","textAlign","enableTitle","containerStyle","marginLeft","marginRight","marginTop","marginBottom","tabChangeSubscription","currentSelectedItems","EventManager","FarrisComponentInstanceService","OverLayHiddenService","DebugService","useDebugMode","LookupTabsComponent","initInkBarPos","currentValue","navClickHandle","tabChange","which","enableFav","enableSelected","dataListNavRef","offsetWidth","favoriteNavRef","selectedNavRef","inkBarRef","animations","trigger","transition","opacity","animate","selectedTotal","render","LookupTipDirective","tipText","enableTip","inputRef","iconMouseEnter","creatPanel","iconMouseLeave","isInTipPanel","removePanel","clickHandle","getQuickSelectedByLocaleId","localeid","tipPanel","setPosition","ul","renderer","createElement","li","innerHTML","setProperty","appendChild","addClass","leaveEvent","enterEvent","clickEvent","nodeName","removeChild","getBoundingClientRect","Number","keyArr","shift","Directive","InputGroupComponent","LookupQuickSelectPanelComponent","onClick","cdr","onMoreClick","moreClcik","formatData","rowObj","onItemClick","itemClick","evnet","setActiveItem","activeIndex","HostListener","LookupQuickSelectDirective","options","inputClick","panelElement","lookupRef","createDataPanel","valueChange","hide","removePanelElement","reqAnimFrame","classList","getPanelSize","zIndex","cmpFact","changeDetectorRef","registerMouseEvent","calculationPanelHeight","getInputSizeInfo","window","innerHeight","panelHeight","transformOrigin","parseInt","slice","loadingRef","registerKeyboardEvent","idx","prevIdx","nextIdx","ngzone","NgModule","imports","CommonModule","FormsModule","FarrisCommonModule","forRoot","FarrisDialogModule","MessagerModule","NotifyModule","LoadingModule","InputGroupModule","LayoutModule","DataTableModule","TreeTableModule","FarrisContextMenuModule","LocaleModule","exports","declarations","entryComponents","LookupModule"],"mappings":"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","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","import { TemplateRef } from \"@angular/core\";\r\n\r\n/** æ¶èåå­æ®µåç§° */\r\nexport const FAVORITE_FIELD_NAME = '__favorite__';\r\nexport const INPUT_GROUP_ICON = '<i class=\"f-icon f-icon-lookup\"></i>';\r\n\r\n// è·åç»ä»¶å®ä¾çç±»å\r\nexport type ComponentInstanceType = 'datatable'| 'treetable' | 'fav' | 'selected' | 'leftTree' | 'leftDataTable';\r\n\r\nexport enum LookupGridDisplayType {\r\n    List = 'LIST',\r\n    TreeList = 'TREELIST',\r\n    NavList = 'NAVLIST',\r\n    NavTreeList = 'NAVTREELIST'\r\n}\r\n\r\n/** æ¶èç¸å³å¾æ  */\r\nexport enum FavoriteIcon {\r\n    /** å·²æ¶è */\r\n    yes = '<span class=\"f-icon f-icon-star f-lookup-favorite\" style=\"line-height: 29px;\"></span>',\r\n    /** æªæ¶è */\r\n    no = '<span class=\"f-icon f-icon-star-outline f-lookup-favorite\" style=\"line-height: 29px;\"></span>',\r\n    /** ç§»é¤æ¶è */\r\n    delete = '<span class=\"f-icon f-icon-apply-format f-lookup-unfavorite\" style=\"line-height: 29px;\"></span>',\r\n    /** ç§»é¤å·²éè®°å½ */\r\n    remove = '<span class=\"f-icon f-icon-apply-format f-lookup-unfavorite\" style=\"line-height: 29px;\"></span>'\r\n}\r\n\r\n/** æ¶èç¸å³å¨ä½ */\r\nexport enum FavoriteAction {\r\n    /** æ·»å æ¶è */\r\n    add = 'append item to favorite.',\r\n    /** ç§»é¤æ¶è */\r\n    delete = 'remove favorite.'\r\n}\r\n\r\nexport interface ExtInfoFormatterParam {\r\n    [key: string]: any;\r\n    bindingData?: any;\r\n    instance?: any;\r\n}\r\n\r\nexport type ExtInfoFormatterFn = (param: ExtInfoFormatterParam) => string;\r\nexport type ExtInfoFormatter = string | ExtInfoFormatterFn;\r\n\r\nexport interface CustomDataFormatter {\r\n    [fieldName: string]: any ;\r\n    rowStyler?: any;\r\n    cellStyler?: any;\r\n}\r\n\r\nexport interface QuickSelectOption {\r\n    /** æ¯å¦å¯ç¨ */\r\n    enable?: boolean;\r\n    /** æ¾ç¤ºtop è®°å½æ°ï¼é»è®¤ 10 */\r\n    showItemsCount?: number;\r\n    /** æ¾ç¤ºææ¬å­æ®µ */\r\n    textField?: string;\r\n    /** èªå®ä¹æ ¼å¼å */\r\n    formatter?: (data: any) => string;\r\n    \r\n    footerHeight?: number;\r\n    /** æ¾ç¤ºæç´¢æ´æ° æé® */\r\n    showMore?: boolean;\r\n}\r\n\r\nexport const QuickSelectDefaultOptions: QuickSelectOption = {\r\n    enable: false,\r\n    showMore: true,\r\n    showItemsCount: 10,\r\n    footerHeight: 0\r\n}","/*\r\n * @Author: ç¯çç§æ(Lucas Huang)\r\n * @Date: 2019-08-15 15:24:24\r\n * @LastEditors: ç¯çç§æ(Lucas Huang)\r\n * @LastEditTime: 2019-11-30 14:01:34\r\n * @QQ: 1055818239\r\n * @Version: v0.0.1\r\n */\r\nimport { Subscription, Observable, of, Subject } from 'rxjs';\r\nimport {\r\n    Component, Input, Output, EventEmitter, TemplateRef,\r\n    ViewChild, Injector, forwardRef, OnInit, ElementRef, ChangeDetectorRef,\r\n    AfterViewChecked, HostBinding, NgZone, OnDestroy\r\n} from '@angular/core';\r\nimport {\r\n    NG_VALUE_ACCESSOR,\r\n    ControlValueAccessor,\r\n    NgControl\r\n} from '@angular/forms';\r\n\r\nimport { DialogComponent } from '@farris/ui-dialog';\r\nimport { IResizeEvent } from '@farris/ui-draggable';\r\n\r\nimport { PickingResult, PickedResult } from './lookup-grid-options';\r\n\r\nexport const LOOKUPINPUT_VALUE_ACCESSOR: any = {\r\n    provide: NG_VALUE_ACCESSOR,\r\n    useExisting: forwardRef(() => LookupComponent),\r\n    multi: true\r\n};\r\n\r\n@Component({\r\n    selector: 'farris-lookup',\r\n    template: `\r\n        <div\r\n            class=\"lookupbox input-group\"\r\n            [ngClass]=\"{\r\n                'f-state-disabled': disabled,\r\n                'f-state-readonly': readonly,\r\n                'f-state-editable': !editable\r\n            }\"\r\n        >\r\n            <input\r\n                class=\"form-control\"\r\n                [value]=\"displayText\"\r\n                [disabled]=\"disabled\"\r\n                [readonly]=\"!editable || readonly\"\r\n            />\r\n            <div class=\"input-group-append\">\r\n                <span class=\"f-select input-group-text\" (click)=\"showDialog()\">\r\n                    <i class=\"f-icon f-icon-lookup\"></i>\r\n                </span>\r\n            </div>\r\n        </div>\r\n        <farris-dialog\r\n            #dialog\r\n            *ngIf=\"isShow\"\r\n            [title]=\"title\"\r\n            [beforeOpen]=\"beforeOpen\"\r\n            [beforeClose]=\"beforeClose\"\r\n            [width]=\"dialogWidth\"\r\n            [height]=\"dialogHeight\"\r\n            [showButtons]=\"showButtons\"\r\n            [showMaxButton]=\"showMaxButton\"\r\n            [buttons]=\"buttonsRef || defaultButtonRef\"\r\n            [buttonAlign]=\"buttonAlign\"\r\n            (maxed)=\"onMaxDialog($event)\"\r\n            (resized)=\"onResized($event)\"\r\n            (resizing)=\"onResizing($event)\"\r\n        >\r\n            <ng-content></ng-content>\r\n\r\n            <ng-template #defaultButtonRef>\r\n                <div style=\"width: 100%;\">\r\n                    <button\r\n                        class=\"btn btn-secondary btn-lg\"\r\n                        (click)=\"closeDialog()\"\r\n                    >\r\n                        Cancel\r\n                    </button>\r\n                    <button class=\"btn btn-primary btn-lg\">Ok</button>\r\n                </div>\r\n            </ng-template>\r\n        </farris-dialog>\r\n    `,\r\n    styles: [\r\n        `\r\n            .input-group {\r\n                flex-wrap: nowrap;\r\n            }\r\n            :host-context(.ng-invalid) .form-control {\r\n                border-color: #ff0303;\r\n            }\r\n        `\r\n    ],\r\n    providers: [LOOKUPINPUT_VALUE_ACCESSOR]\r\n})\r\nexport class LookupComponent\r\n    implements OnInit, ControlValueAccessor, AfterViewChecked, OnDestroy {\r\n    @HostBinding('class') hostCls = 'f-cmp-inputgroup';\r\n\r\n    /** çªå£å®½åº¦ */\r\n    @Input() dialogWidth: number;\r\n    /** çªå£é«åº¦ */\r\n    @Input() dialogHeight: number;\r\n    /** çªå£æ é¢ãé»è®¤å¼ï¼æ­¤å¤æ¾ç¤ºå¸®å©æ é¢ */\r\n    @Input() title = '';\r\n    /** æé®å¯¹é½æ¹å¼ */\r\n    @Input() buttonAlign = 'right';\r\n    /** æé®æ¨¡æ¿ */\r\n    @Input() buttonsRef: TemplateRef<any>;\r\n    /** æ¯å¦æ¾ç¤ºæé® */\r\n    @Input() showButtons = true;\r\n    /** æ¾ç¤ºå³é­æé® */\r\n    @Input() showCloseButton = true;\r\n    /** æ¾ç¤ºæå¤§åæé® */\r\n    @Input() showMaxButton = true;\r\n    /** åè®¸ææ½å°ºå¯¸ */\r\n    @Input() resizable = true;\r\n    /** åè®¸æå¨çªå£ */\r\n    @Input() draggable = true;\r\n    /** ç¦ç¨ */\r\n    @Input() disabled = false;\r\n    /** åè®¸ç¼è¾ææ¬æ¡ */\r\n    @Input() editable = true;\r\n    /** åªè¯» */\r\n    @Input() readonly = false;\r\n    /** å­æ®µæ å°, { å¸®å©æ°æ®å­æ®µï¼è¡¨åå­æ®µ } */\r\n    @Input() mapFields: { [sourceField: string]: string };\r\n    /** å¼å­æ®µ */\r\n    @Input() valueField: string;\r\n    /** ææ¬å­æ®µ */\r\n    @Input() textField: string;\r\n    @Input() displayText = '';\r\n\r\n    /** è¿è¡æ¶ä¸ä¸æèªå®ä¹å¯¹è±¡ */\r\n    @Input() context: any;\r\n\r\n    /** çªå£æå¼åäºä»¶ */\r\n    @Input() beforeOpen: () => Observable<boolean>;\r\n    /** çªå£å³é­åäºä»¶ */\r\n    @Input() beforeClose: () => Observable<boolean>;\r\n    /** å¸®å©åäºä»¶ */\r\n    @Input() dictPicking: (emptyObj?: {}) => Observable<PickingResult>;\r\n    dictPickingSubscription: Subscription;\r\n    /** å¸®å©åäºä»¶ */\r\n    @Input() dictPicked: (rowData: any) => Observable<PickedResult>;\r\n    dictPickedSubscription: Subscription;\r\n\r\n    /** çªå£æå¼å */\r\n    @Output() dialogOpened = new EventEmitter();\r\n    /** çªå£å³é­å */\r\n    @Output() dialogClosed = new EventEmitter();\r\n    /** çªå£æå¤§å */\r\n    @Output() dialogMaxed = new EventEmitter();\r\n    /** ææ½æ¹åçªå£å°ºå¯¸è¿è¡æ¶ */\r\n    @Output() resizing = new EventEmitter();\r\n    /** ææ½æ¹åçªå£å°ºå¯¸ç»æ */\r\n    @Output() resized = new EventEmitter();\r\n    /** å¸®å©çªå£é»è®¤å°ºå¯¸ */\r\n    private defaultDialogSize = { width: 550, height: 570 };\r\n\r\n    dialogCreated = new Subject<DialogComponent>();\r\n    dialogCreatedSubscription: Subscription;\r\n    dialog: DialogComponent;\r\n    @ViewChild('dialog') set content(content: DialogComponent) {\r\n        this.dialog = content;\r\n        if (content) {\r\n            this.dialogCreated.next(this.dialog);\r\n        }\r\n    }\r\n\r\n    private _isShow = false;\r\n    get isShow() {\r\n        return this._isShow;\r\n    }\r\n    set isShow(val) {\r\n        this._isShow = val;\r\n        if (!this.changeDetector['destroyed']) {\r\n            this.changeDetector.detectChanges();\r\n        }\r\n    }\r\n\r\n    ngControl: any;\r\n\r\n    displayValue = '';\r\n    originalText = '';\r\n\r\n    get invalid() {\r\n        return this.ngControl.valid;\r\n    }\r\n\r\n    private ngZone: NgZone;\r\n\r\n    onModelChange = (obj: any) => { };\r\n    onModelTouched = (val: any) => { };\r\n    constructor(\r\n        public injector: Injector,\r\n        public el: ElementRef,\r\n        public changeDetector?: ChangeDetectorRef\r\n    ) {\r\n        this.ngZone = this.injector.get(NgZone);\r\n        // if (!this.personalConfigService) {\r\n        //     const idServ = this.injector.get(IdService);\r\n        //     this.personalConfigService = new PersonalConfigService(idServ);\r\n        // }\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        this.initEvents();\r\n        this.ngControl = this.injector.get(NgControl, null);\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        this.lookupUnsubscribe();\r\n    }\r\n\r\n    ngAfterViewChecked() {\r\n        if (this.dialog) {\r\n            this.dialog.closed.subscribe(() => {\r\n                this.isShow = false;\r\n                this.dialog = null;\r\n            });\r\n        }\r\n    }\r\n\r\n    initEvents() {\r\n        if (!this.dictPicking) {\r\n            this.dictPicking = () => of({ showDialog: true });\r\n        }\r\n        if (!this.dictPicked) {\r\n            this.dictPicked = () => of({ closeDialog: true });\r\n        }\r\n        if (!this.beforeOpen) {\r\n            this.beforeOpen = () => of(true);\r\n        }\r\n        if (!this.beforeClose) {\r\n            this.beforeClose = () => of(true);\r\n        }\r\n\r\n        if (!this.dialogHeight) {\r\n            this.dialogHeight = this.defaultDialogSize.height;\r\n        }\r\n\r\n        if (!this.dialogWidth) {\r\n            this.dialogWidth = this.defaultDialogSize.width;\r\n        }\r\n    }\r\n\r\n    showDialog(): any {\r\n        if (this.disabled || this.readonly) {\r\n            return false;\r\n        }\r\n        this.dictPicking().subscribe((val: PickingResult) => {\r\n            if (val.showDialog === false) {\r\n                return;\r\n            }\r\n\r\n            this.isShow = true;\r\n            // this.changeDetector.detectChanges();\r\n            this.ngZone.runOutsideAngular(() => {\r\n                setTimeout(() => this.dialog.show());\r\n            });\r\n        });\r\n\r\n        return false;\r\n    }\r\n\r\n    closeDialog() {\r\n        this.isShow = false;\r\n        if (this.dialog) {\r\n            this.dialog.close();\r\n        }\r\n    }\r\n\r\n\r\n    private lookupUnsubscribe() {\r\n        if (this.dictPickedSubscription) {\r\n            this.dictPickedSubscription.unsubscribe();\r\n        }\r\n        if (this.dictPickingSubscription) {\r\n            this.dictPickingSubscription.unsubscribe();\r\n        }\r\n        if (this.dialogCreatedSubscription) {\r\n            this.dialogCreatedSubscription.unsubscribe();\r\n        }\r\n    }\r\n\r\n    onResizing(pos: IResizeEvent) {\r\n        this.resizing.emit(pos.size);\r\n    }\r\n    onResized(pos: IResizeEvent) {\r\n        this.resized.emit(pos.size);\r\n    }\r\n    onMaxDialog(pos: IResizeEvent) {\r\n        this.dialogMaxed.emit(pos.size);\r\n    }\r\n\r\n    writeValue(obj: any): void {\r\n        if (obj) {\r\n            this.displayText = obj;\r\n            this.displayValue = obj;\r\n            this.originalText = this.displayText;\r\n        } else {\r\n            this.displayText = '';\r\n            this.displayValue = '';\r\n            this.originalText = '';\r\n        }\r\n    }\r\n    registerOnChange(fn: any): void {\r\n        this.onModelChange = fn;\r\n    }\r\n    registerOnTouched(fn: any): void {\r\n        this.onModelTouched = fn;\r\n    }\r\n    setDisabledState?(isDisabled: boolean): void {\r\n        this.disabled = isDisabled;\r\n    }\r\n}\r\n","/*\r\n * @Author: ç¯çç§æ(Lucas Huang)\r\n * @Date: 2019-07-10 11:44:49\r\n * @LastEditors: ç¯çç§æ(Lucas Huang)\r\n * @LastEditTime: 2019-09-25 18:10:54\r\n * @QQ: 1055818239\r\n * @Version: v0.0.1\r\n */\r\nimport { DataColumn } from '@farris/ui-common/column';\r\n\r\nexport type ONLY_SELECT_LEAF = 'default' | 'yes' | 'no';\r\nexport type LOAD_DATA_TYPE = 'all' | 'fav' | 'list' | 'nav' | 'search' | 'children'\r\n                            | 'textchange' | 'sort' | 'navsearch' | 'selected' | 'allChildren';\r\n\r\nexport interface TreeInfo {\r\n    /** æ°æ®å è½½æ¹å¼ï¼ all, async */\r\n    loadDataType?: 'all' | 'async';\r\n    /** åå±æ¹å¼ï¼ pathcode, parentId */\r\n    layerType?: string;\r\n    /** æ°æ®ä¸­å¸¦æåçº§ä¿¡æ¯çå­æ®µ */\r\n    dataField?: string;\r\n    /** ç¶IDå­æ®µ */\r\n    parentField?: string;\r\n    /** åçº§ç å­æ®µ */\r\n    pathField?: string;\r\n    /** çº§æ°å­æ®µ */\r\n    layerField?: string;\r\n    /** æ¯å¦æç»å­æ®µ */\r\n    isDetailField?: string;\r\n    /**\r\n     * åªåè®¸éæ©å¶å­èç¹\r\n     * - default: åºç¨æå¡å¨ç«¯è®¾ç½®ï¼å¦æå¡å¨æªè®¾ç½®ï¼åè½å  `no`\r\n     * - `yes`: æå¡å¨ç«¯è®¾ç½®å¤±æãä»åè®¸éæ©å¶å­èç¹ã\r\n     * - `no`:  æå¡å¨ç«¯è®¾ç½®å¤±æãææèç¹åå¯éæ©ã\r\n     */\r\n    onlySelectLeaf?: boolean | ONLY_SELECT_LEAF;\r\n    /** æ ç»ææ°æ®æ¯å¦å·²åå§åå®æ */\r\n    treeDataIsInit?: boolean;\r\n}\r\n\r\nexport interface LookupGridResult {\r\n    /** åä¿¡æ¯ */\r\n    columns?: DataColumn[];\r\n    /** æ°æ®åè¡¨ */\r\n    items?: any[];\r\n    /** æ¥è¯¢å­æ®µ */\r\n    searchFields?: { label: string, value: string }[];\r\n    /** åé¡µä¿¡æ¯ */\r\n    pageInfo?: { pageIndex: number, pageSize: number, pageList?: number[], enablePager: boolean };\r\n    /** æ»è®°å½æ° */\r\n    total?: number;\r\n    /** åºå¼ */\r\n    mapFields?: { desgine: string, runtime: string }[];\r\n    /** æ åçº§ä¿¡æ¯ */\r\n    treeInfo?: TreeInfo;\r\n    displayType?: string;\r\n    displayInfo?: DisplayInfo;\r\n    title?: string;\r\n    navigation?: NavigationOptions;\r\n    valueField?: string;\r\n    textField?: string;\r\n    idField?: string;\r\n    /** å·²éæ©æ°æ®åè¡¨ */\r\n    selectedItems?: any;\r\n    /** æ¶èæ°æ® */\r\n    favoriteItems?: any[];\r\n}\r\n\r\n/** ä¸ªæ§åæ°æ® */\r\nexport interface PersonalConfig {\r\n    tabIndex?: string;\r\n    favorite?: {\r\n        [lang: string]: any[];\r\n    };\r\n    quickSelected?: {\r\n        [lang: string]: any[];\r\n    };\r\n    size?: any;\r\n    selections?: any;\r\n    [key: string]: any;\r\n}\r\n\r\nexport interface NavigationOptions extends LookupGridResult {\r\n    [key: string]: any;\r\n    displayType: 'List' | 'TreeList';\r\n    width: number;\r\n    idField?: string;\r\n    relations?: { groupField: string, helpField: string }[];\r\n    hover?: boolean;\r\n}\r\n\r\nexport interface LookupGridOptions extends LookupGridResult {\r\n    singleSelect?: boolean;\r\n    idField?: string;\r\n    uri?: string; // å¯ä»¥ä¸ºåæ°æ®IDãwebapi å°å\r\n    showFilterBar?: boolean;\r\n    pagination?: boolean;\r\n    pageIndex?: number;\r\n    pageSize?: number;\r\n    pageList?: number[];\r\n    total?: number;\r\n    width?: number;\r\n    height?: number;\r\n    hover?: boolean;\r\n}\r\n\r\nexport class DisplayInfo {\r\n    title?: string;\r\n    favorites?: string;\r\n    okText?: string;\r\n    cancelText?: string;\r\n    allColumns?: string;\r\n}\r\n\r\nexport const lookupGridDefaults: LookupGridOptions = {\r\n    singleSelect: true,\r\n    showFilterBar: true,\r\n    pagination: true,\r\n    pageIndex: 1,\r\n    pageSize: 10,\r\n    pageList: [10, 20, 30, 50, 100]\r\n};\r\n\r\nexport const displayInfoDefault = {\r\n    title: 'æ­¤å¤æ¾ç¤ºæ é¢',\r\n    favorites: 'æ¶èå¤¹',\r\n    okText: 'ç¡®å®',\r\n    cancelText: 'åæ¶',\r\n    allColumns: 'ææå'\r\n};\r\n\r\n/** å¸®å©åäºä»¶è¿åç±»å */\r\nexport interface PickingResult {\r\n    /** true: ç»§ç»­æå¼å¸®å©ï¼false: ä¸æå¼å¸®å©çªå£ */\r\n    showDialog: boolean;\r\n    /** æºå¸¦çä¸äºèªå®ä¹æ°æ®ï¼ç±ä¸å¡å¨æå¡å¨ç«¯å¸®å©åäºä»¶ä¸­å¤ç */\r\n    data?: any;\r\n    message?: any;\r\n}\r\n\r\nexport interface PickedResult {\r\n    closeDialog: boolean;\r\n    message?: any;\r\n}\r\n","/*\r\n * @Author: ç¯çç§æ(Lucas Huang)\r\n * @Date: 2019-05-23 10:27:07\r\n * @LastEditors: ç¯çç§æ(Lucas Huang)\r\n * @LastEditTime: 2019-08-15 14:11:43\r\n * @QQ: 1055818239\r\n * @Version: v0.0.1\r\n */\r\nimport { InjectionToken } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { LOOKUP_HTTP_PARAMS } from './RemoteParams';\r\nimport { LookupGridResult } from '../lookup-grid-options';\r\n\r\nexport interface ILookupHttpService {\r\n    context?: any;\r\n    /**\r\n     * æ ¹æ®æå®çå¸®å©åæ°æ®IDåç¸å³åæ°è·åæ°æ®\r\n     * @param uri å¸®å©åæ°æ®ID or Rest API\r\n     * @param data æå¡å¨ç«¯æ¥æ¶åæ° key/value\r\n     */\r\n    getData(uri: string, params?: LOOKUP_HTTP_PARAMS): Observable<LookupGridResult>;\r\n}\r\nexport const ServerSideToken = new InjectionToken<ILookupHttpService>('Lookup Grid HTTP service');\r\n","import { Injectable } from '@angular/core';\r\nimport { trim } from 'lodash-es';\r\nimport { CommonUtils } from '@farris/ui-common';\r\n\r\n@Injectable()\r\nexport class LookupDefaultMapping {\r\n\r\n    constructor(private utils: CommonUtils) {}\r\n\r\n    lookupFieldMap = (helpData, mapFields, dataObj) => {\r\n        if (mapFields) {\r\n            const helpFields = Object.keys(mapFields);\r\n            helpFields.forEach( (f: any) => {\r\n                let val = '';\r\n                if (helpData) {\r\n                    if (helpData instanceof Array) {\r\n                        val = helpData.map( (h: any) => {\r\n                            return this.utils.getValue(f, h);\r\n                        }).join(',');\r\n                    } else {\r\n                        val = this.utils.getValue(f, helpData);\r\n                    }\r\n\r\n                }\r\n\r\n                mapFields[f].split(',').forEach( (ff: any) => {\r\n                    const field = trim(ff);\r\n                    this.utils.setValue(dataObj, field, val);\r\n                });\r\n            });\r\n        }\r\n    }\r\n\r\n\r\n}\r\n","import { Injectable, NgZone } from '@angular/core';\r\nimport { CommonUtils, RuntimeStateService } from '@farris/ui-common';\r\nimport { FilterRelation, FilterCondition, Compare, EntityFilter } from '@farris/ui-common/types';\r\nimport { cloneDeep } from 'lodash-es';\r\nimport { TreeInfo } from './lookup-grid-options';\r\n\r\n@Injectable()\r\nexport class LookupUtils {\r\n\r\n    constructor(private utils: CommonUtils, private rts: RuntimeStateService, private ngZone: NgZone) { }\r\n\r\n    setActiveLookupInstance(lookupIns: any) {\r\n        if (this.rts) {\r\n            this.rts.setLookupInstance(lookupIns);\r\n        }\r\n    }\r\n\r\n\r\n    destroy() {\r\n        this.rts.destroy();\r\n    }\r\n\r\n    pendingStart() {\r\n        if (this.rts) {\r\n            this.rts.updateFormState({\r\n                lookup: {\r\n                    pending: true\r\n                }\r\n            });\r\n\r\n            // ç¦ç¨é¡µé¢çææé¼ æ äºä»¶\r\n            document.body.style['pointer-events'] = 'none';\r\n        }\r\n    }\r\n\r\n    pendingEnd() {\r\n        if (this.rts) {\r\n            this.rts.updateFormState({\r\n                lookup: {\r\n                    pending: false\r\n                }\r\n            });\r\n\r\n            // æ¿æ´»é¼ æ äºä»¶\r\n            document.body.style['pointer-events'] = '';\r\n        }\r\n    }\r\n\r\n\r\n    private createFilterCondition(field: string, value: string) {\r\n        return {\r\n            filterField: field,\r\n            value,\r\n            lbracket: '',\r\n            rbracket: '',\r\n            relation: FilterRelation.Or,\r\n            compare: Compare.Like\r\n        };\r\n    }\r\n\r\n    mergeCondition(condition: EntityFilter, fields: string[], searchData: { field: string, value: string }) {\r\n        if (!condition) {\r\n            condition = {\r\n                pagination: {\r\n                    pageIndex: 1,\r\n                    pageSize: 20\r\n                },\r\n                filterConditions: [],\r\n                sortConditions: []\r\n            };\r\n        } else {\r\n            condition = cloneDeep(condition);\r\n        }\r\n\r\n        const { field = '*', value = '' } = { ...searchData };\r\n\r\n        if (value) {\r\n            if (field === '*') {\r\n                if (fields && fields.length) {\r\n                    const searchConditions: FilterCondition[] = fields.map((f: string) => {\r\n                        return this.createFilterCondition(f, value);\r\n                    });\r\n\r\n                    if (searchConditions.length) {\r\n                        searchConditions[0].lbracket = '(';\r\n                        const lastSearchConditions = searchConditions[searchConditions.length - 1];\r\n                        lastSearchConditions.rbracket = ')';\r\n                        lastSearchConditions.relation = FilterRelation.Empty;\r\n                    }\r\n\r\n                    if (condition.filterConditions && condition.filterConditions.length) {\r\n                        condition.filterConditions[condition.filterConditions.length - 1].relation = FilterRelation.And;\r\n                        condition.filterConditions = condition.filterConditions.concat(searchConditions);\r\n                    } else {\r\n                        condition.filterConditions = searchConditions;\r\n                    }\r\n                }\r\n            } else {\r\n                const searchCondition = this.createFilterCondition(field, value);\r\n                searchCondition.relation = FilterRelation.Empty;\r\n                if (condition.filterConditions && condition.filterConditions.length) {\r\n                    condition.filterConditions[condition.filterConditions.length - 1].relation = FilterRelation.And;\r\n                    condition.filterConditions.push(searchCondition);\r\n                } else {\r\n                    condition.filterConditions = [searchCondition];\r\n                }\r\n            }\r\n        }\r\n\r\n        return condition;\r\n    }\r\n\r\n    private canSelectable(n: any) {\r\n        if (n.hasOwnProperty('farris_selectable')) {\r\n            return !!n['farris_selectable'];\r\n        }\r\n        return true;\r\n    }\r\n\r\n    /** å°æ°æ®è½¬æ å½¢ç»æ */\r\n    makeTreeWithParentID(data: any[], parentId, parentIdField = 'parentId', idField = 'id') {\r\n        const nodes = new Map<string, any>();\r\n        const result = [];\r\n        const unattached = [];\r\n        data.forEach(t => {\r\n            const node = {\r\n                data: t,\r\n                children: [],\r\n                selectable: this.canSelectable(t),\r\n                parent: null,\r\n                parents: []\r\n            };\r\n            const id = t[idField];\r\n            nodes.set(id, node);\r\n            const PID = this.utils.getValue(parentIdField, t);\r\n            if (PID === parentId) {\r\n                result.push(node);\r\n            } else {\r\n                const parent = nodes.get(PID);\r\n                if (parent) {\r\n                    node.parent = PID;\r\n                    node.parents = [...parent.parents, PID];\r\n                    parent.children.push(node);\r\n                } else {\r\n                    unattached.push(node);\r\n                }\r\n            }\r\n        });\r\n\r\n        unattached.forEach(n => {\r\n            const pid = this.utils.getValue(parentIdField, n.data);\r\n            const parent = nodes.get(pid);\r\n            if (parent) {\r\n                n.parent = pid;\r\n                n.parents = [...parent.parents, pid];\r\n                parent.children.push(n);\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    makeTree(data, treeInfo: TreeInfo) {\r\n        const treeInfoField = treeInfo.dataField;\r\n        const layerField = treeInfo.layerField;\r\n        const pathField = treeInfo.pathField;\r\n\r\n        const nodes = new Map<string, any>();\r\n        const result = [];\r\n        const unattached = [];\r\n        data.forEach(t => {\r\n            const node = {\r\n                data: t,\r\n                children: [],\r\n                selectable: this.canSelectable(t)\r\n            };\r\n            const pathCode = t[treeInfoField][pathField];\r\n            nodes.set(pathCode, node);\r\n\r\n            if (t[treeInfoField][layerField] === 1) {\r\n                result.push(node);\r\n            } else {\r\n                const parentPathCode = pathCode.substr(0, pathCode.length - 4);\r\n                const parent = nodes.get(parentPathCode);\r\n                if (parent) {\r\n                    parent.children.push(node);\r\n                } else {\r\n                    unattached.push(node);\r\n                }\r\n            }\r\n        });\r\n\r\n\r\n        unattached.forEach(n => {\r\n            const pathCode = n.data[treeInfoField][pathField];\r\n            const parent = nodes.get(pathCode.substr(0, pathCode.length - 4));\r\n            if (parent) {\r\n                parent.children.push(n);\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { IdService } from '@farris/ui-common';\r\nimport { Subject } from 'rxjs';\r\nimport { PersonalConfig } from './lookup-grid-options';\r\n\r\n\r\n@Injectable()\r\nexport class PersonalConfigService {\r\n    // ä¸ªæ§åéç½®\r\n    personalConf: PersonalConfig;\r\n\r\n    selectItemObser$ = new Subject();\r\n\r\n    displayType = 'LIST';\r\n\r\n    singleSelect = true;\r\n    idField: string;\r\n    textField: string;\r\n    mapFields: any;\r\n\r\n    // ä¸ªæ§åéç½®KEY\r\n    private _key = '';\r\n    _newKey = '';\r\n    get personalConfigKey() {\r\n        return this._key;\r\n    }\r\n    set personalConfigKey(val) {\r\n        if (val) {\r\n            this._key = this.buildKey(val);\r\n            if (this.controlID) {\r\n                this._newKey = this.buildKey(this.controlID + '_' + val);\r\n            } else {\r\n                this._newKey = this._key;\r\n            }\r\n        } else {\r\n            this._newKey = this.buildKey(this.controlID);\r\n        }\r\n    }\r\n\r\n    // ç»ä»¶ID\r\n    controlID = '';\r\n\r\n    constructor(private idService: IdService) {}\r\n\r\n    private buildKey(str) {\r\n        let prefix = '';\r\n        if (location.hash) {\r\n            const pathArr = location.hash.split('?');\r\n            prefix = pathArr ? pathArr[0] : '';\r\n        } else {\r\n            const pathArr  = location.pathname.split('/');\r\n            prefix = pathArr ? pathArr[pathArr.length - 1] : '';\r\n        }\r\n        return this.idService.encrypt(prefix + str);\r\n    }\r\n\r\n    initPersonalConf(obj) {\r\n        Object.assign(this, obj);\r\n    }\r\n\r\n    getPersonalData(key?: string): PersonalConfig {\r\n        if (key) {\r\n            this._key = key;\r\n        }\r\n\r\n        if (this.personalConfigKey) {\r\n            const conf = localStorage.getItem(this.personalConfigKey);\r\n\r\n            if (conf && conf !== 'undefined' && conf !== 'null') {\r\n                this.personalConf = conf ? JSON.parse(conf) : {};\r\n                this._updatePersonalConfig(this.personalConf);\r\n\r\n                if (this.controlID) {\r\n                    if (this._key !== this._newKey) {\r\n                        localStorage.removeItem(this._key);\r\n                    }\r\n                    this.savePersonalConfig(this.personalConf);\r\n                }\r\n\r\n                return this.personalConf;\r\n            } else {\r\n                return null;\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    getQuickSelected(localeId?: string): any {\r\n        const d = this.getPersonalData();\r\n        const qs =  d ? d.quickSelected : null;\r\n\r\n        if (localeId) {\r\n            if (qs) {\r\n                const items = qs[localeId];\r\n                if (items && items.length) {\r\n                    return items;\r\n                }\r\n            }\r\n            return null;\r\n        }\r\n        return qs;\r\n    }\r\n\r\n    getDialogSize() {\r\n        const d = this.getPersonalData();\r\n        return d ? d.size : null;\r\n    }\r\n\r\n    updatePersonalConfig(cfg: Partial<PersonalConfig>) {\r\n        const data = Object.assign(this.personalConf || {}, cfg);\r\n        this.savePersonalConfig(data);\r\n    }\r\n\r\n    savePersonalConfig(data: PersonalConfig) {\r\n        if (this._newKey) {\r\n            localStorage.setItem(this._newKey, JSON.stringify(data));\r\n            this.personalConf = data;\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    getActiveTabIndex(tabName?: string) {\r\n        const d = this.getPersonalData();\r\n        if (!tabName) {\r\n            return d && d.tabIndex ? d.tabIndex  : 'datalist';\r\n        }\r\n        return tabName;\r\n    }\r\n\r\n    updateQueckSelected(selectedRow: any, localeId: string) {\r\n        const quickItems = this.getQuickSelected(localeId);\r\n\r\n        if (quickItems && quickItems.length) {\r\n            const selectedIndex = [];\r\n            quickItems.forEach((element, index) => {\r\n                if (this.singleSelect) {\r\n                    if (element && selectedRow && element[this.idField] === selectedRow[this.idField]) {\r\n                        selectedIndex.push(index);\r\n                    }\r\n                } else {\r\n                    if (selectedRow) {\r\n                        selectedRow.forEach(item => {\r\n                            if (element && element[this.idField] === item[this.idField]) {\r\n                                selectedIndex.push(index);\r\n                            }\r\n                        });\r\n                    }\r\n                }\r\n            });\r\n\r\n            selectedIndex.forEach(index => {\r\n                quickItems[index] = null;\r\n            });\r\n\r\n            this.personalConf.quickSelected[localeId] =\r\n                this.personalConf.quickSelected[localeId].filter(v => v !== null);\r\n            if (this.singleSelect) {\r\n                this.personalConf.quickSelected[localeId].unshift(selectedRow);\r\n            } else {\r\n                if (selectedRow) {\r\n                    selectedRow.forEach(element => {\r\n                        this.personalConf.quickSelected[localeId].unshift(element);\r\n                    });\r\n                }\r\n            }\r\n            this.personalConf.quickSelected[localeId].length =\r\n                this.personalConf.quickSelected[localeId].length > 5 ?\r\n                    5 : this.personalConf.quickSelected[localeId].length;\r\n        } else {\r\n            const _qs = this.personalConf.quickSelected || {};\r\n            let newData;\r\n            if (this.singleSelect) {\r\n                newData = Object.assign(_qs, { [localeId]: [selectedRow] });\r\n            } else {\r\n                selectedRow.length = selectedRow.length > 5 ? 5 : selectedRow.length;\r\n                newData = Object.assign(_qs, { [localeId]: selectedRow });\r\n            }\r\n            this.personalConf.quickSelected = newData;\r\n        }\r\n\r\n        this.savePersonalConfig(this.personalConf);\r\n    }\r\n\r\n    /**\r\n     *  æ´æ°æ°æ®ç»æï¼ç°æä¸ªæ§åæ°æ®åè½¬ä¸º ä¸­æç¯å¢ä¸æ°æ®ï¼\r\n     */\r\n    _updatePersonalConfig(per: PersonalConfig) {\r\n        if (per) {\r\n            let flag = false;\r\n            // æ´æ°æ¶èæ°æ®\r\n            if (per.favorite && Array.isArray(per.favorite)) {\r\n                per.favorite = { 'zh-CHS': [...per.favorite] };\r\n                delete per.favorite;\r\n\r\n                flag = true;\r\n            }\r\n            // æ´æ°å¿«æ·å½å¥æ°æ®\r\n            if (per.selected) {\r\n                if (Array.isArray(per.selected)) {\r\n                    per.quickSelected = { 'zh-CHS': [...per.selected] };\r\n                }\r\n                delete per.selected;\r\n                flag = true;\r\n            }\r\n\r\n            if (flag) {\r\n                this.savePersonalConfig(per);\r\n            }\r\n        }\r\n    }\r\n}\r\n","import { LookupGridComponent } from '../lookup-grid.component';\r\nimport { LookupGridDisplayType } from '../lookup-displaytype';\r\nimport { TreeTableComponent, TreeNode } from '@farris/ui-treetable';\r\n\r\nexport class UtilService {\r\n\r\n    constructor(public instance: LookupGridComponent) { }\r\n\r\n\r\n}\r\n","import { TreeNode } from '@farris/ui-treetable';\r\nimport { LookupGridComponent } from '../lookup-grid.component';\r\nimport { TreeInfo } from '../lookup-grid-options';\r\n\r\nexport class TreeNodeHelper {\r\n    treeInfo: TreeInfo;\r\n    flatAllNodes = [];\r\n    constructor(private instance: LookupGridComponent) { }\r\n\r\n    getTreeInfo(treeNode: TreeNode) {\r\n        if (treeNode.data[this.treeInfo.dataField]) {\r\n            return treeNode.data[this.treeInfo.dataField];\r\n        }\r\n\r\n        const data = treeNode.data;\r\n        if (data && this.treeInfo.dataField) {\r\n\r\n            const treeInfoDataField = this.treeInfo.dataField.toLowerCase();\r\n            const dataField = Object.keys(treeNode.data).find(n => {\r\n                return n.toLowerCase() === treeInfoDataField;\r\n            });\r\n            if (dataField) {\r\n                return data[dataField];\r\n            } else {\r\n                this.instance.writeConsole(`æªæ¾å°æ å½¢ä¿¡æ¯æ°æ®å­æ®µã${this.treeInfo.dataField}ã`, 'error');\r\n            }\r\n        } else {\r\n            this.instance.writeConsole(`æªæ¾å°æ å½¢ä¿¡æ¯æ°æ®å­æ®µã${this.treeInfo.dataField}ã`, 'error');\r\n        }\r\n    }\r\n\r\n    getTreeNodeLayer(treeNode: TreeNode) {\r\n        return this.getTreeInfo(treeNode)[this.treeInfo.layerField];\r\n    }\r\n    /** æ´æ°èç¹çå±å¼ç¶æã æ ¹æ®ç»ä»¶ä¸­ expandLevel çå¼å³å®\r\n     * -1ï¼ä¸å±å¼ï¼0ï¼å¨é¨å±å¼ï¼>0 å±å¼å°æå®çº§æ°\r\n     */\r\n    updateTreeNodeExpanded(treeNodes: TreeNode[], treeInfo: TreeInfo = null) {\r\n        if (treeInfo) {\r\n            this.treeInfo = treeInfo;\r\n        } else {\r\n            this.treeInfo = this.instance.treeInfo;\r\n        }\r\n        const expandLevel = this.instance.expandLevel;\r\n        if (expandLevel === -1) {\r\n            return;\r\n        }\r\n        if (!this.flatAllNodes.length) {\r\n            this.flatAllNodes = this.treeData2Flat(null, treeNodes, 0, []);\r\n        }\r\n\r\n        treeNodes.forEach((tn: TreeNode) => {\r\n            tn.expanded = this.shoudExpand(expandLevel, this.getTreeNodeLayer(tn));\r\n            if (this.isSelectNodeParent(tn)) {\r\n                tn.expanded = true;\r\n            }\r\n            if (tn.children && tn.children.length) {\r\n                this.updateTreeNodeExpanded(tn.children, treeInfo);\r\n            } else {\r\n                tn.leaf = true;\r\n            }\r\n        });\r\n    }\r\n\r\n    private treeData2Flat(parent, nodes, level, parentIds) {\r\n        const idField = this.instance.idField;\r\n        let arr = [];\r\n        if (nodes && nodes.length) {\r\n\r\n            nodes.forEach((node, index) => {\r\n                // node.parent = parent;\r\n\r\n                let parents = [];\r\n                if (parent) {\r\n                    const parentID = parent.data[idField];\r\n                    const _parents = parentIds || [];\r\n                    parents = parents.concat(_parents.map(n => n));\r\n                    parents.push(parentID);\r\n                }\r\n                const rowNode = {\r\n                    id: node.data[idField],\r\n                    node,\r\n                    level,\r\n                    parents,\r\n                };\r\n                arr.push(rowNode);\r\n                arr = arr.concat(this.treeData2Flat(node, node.children, level + 1, parents));\r\n            });\r\n        }\r\n        return arr;\r\n    }\r\n\r\n    private shoudExpand(expandLevel: number, nodeLayer: number) {\r\n        if (expandLevel === -1) {\r\n            // -1 ä¸ºä¸å±å¼\r\n            return false;\r\n        } else if (expandLevel === 0) {\r\n            // 0 ä¸ºå¨é¨å±å¼\r\n            return true;\r\n        } else {\r\n            // æ²¡æå¯ç¨åå±å è½½ï¼éè¿å±å¼å±çº§ç¡®å®æ¯å¦å±å¼è¯¥èç¹\r\n            return nodeLayer <= expandLevel;\r\n        }\r\n    }\r\n\r\n    private isSelectNodeParent(treeNode) {\r\n        if (this.instance.navSelectedIds) {\r\n            const allParentIds: string[] = this.flatAllNodes.find(f => f.id === this.instance.navSelectedIds).parents;\r\n            if (allParentIds && allParentIds.length) {\r\n                return allParentIds.includes(treeNode.id);\r\n            }\r\n            return false;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    getLeafNode(treeNode: TreeNode) {\r\n        if (treeNode && (!treeNode.children || !treeNode.children.length)) {\r\n            return treeNode;\r\n        } else {\r\n            if (treeNode.children.length === 1) {\r\n                return this.getLeafNode(treeNode.children[0]);\r\n            } else {\r\n                return treeNode.children;\r\n            }\r\n        }\r\n    }\r\n\r\n    flatTreeNodes(items, result = []) {\r\n        items = items || [];\r\n        return  items.reduce((c, n) => {\r\n            c.push(n);\r\n            if (n.children && n.children.length) {\r\n                this.flatTreeNodes(n.children, c);\r\n            }\r\n            return c;\r\n        }, result);\r\n    }\r\n}\r\n","import { ComponentRef } from '@angular/core';\r\nimport { DataTableComponent } from '@farris/ui-datatable';\r\nimport { TreeNode, TreeTableComponent } from '@farris/ui-treetable';\r\nimport { UserFavoriteData } from '../http/RemoteParams';\r\nimport { FavoriteAction, FavoriteIcon, FAVORITE_FIELD_NAME, LookupGridDisplayType } from '../lookup-displaytype';\r\nimport { LookupGridResult } from '../lookup-grid-options';\r\nimport { LookupGridComponent } from '../lookup-grid.component';\r\nimport { LookupSelectionService } from './lookup-selection.service';\r\n\r\nexport class FavoriteHelper {\r\n\r\n    private lookupSelectionSer: LookupSelectionService;\r\n\r\n    constructor(private instance: LookupGridComponent) {\r\n        this.lookupSelectionSer = this.instance.lookupSelectionSer;\r\n    }\r\n\r\n    getFavoriteColumns(): any[] {\r\n        const columns = this.instance.gridOptions.columns.map(item => {\r\n            const rtn = Object.assign({}, item);\r\n            if (item.field === FAVORITE_FIELD_NAME) {\r\n                rtn.formatter = () => FavoriteIcon.delete;\r\n            }\r\n            return rtn;\r\n        });\r\n        return columns;\r\n    }\r\n\r\n    favoriteColumnFormatter = (v: any, data: any  ) => {\r\n        const f =  v ? FavoriteIcon.yes : FavoriteIcon.no;\r\n        if (this.instance.isTree()) {\r\n            const id = data[this.instance.idField];\r\n            if (id) {\r\n                const tt = this.instance.componentRef.instance as TreeTableComponent;\r\n                const rn = tt.findRowNode(id);\r\n                if (rn) {\r\n                    if (rn.node.selectable) {\r\n                        return f;\r\n                    } else {\r\n                        return '';\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return f;\r\n    }\r\n\r\n    initPersonalInfo() {\r\n        if (this.instance.personalConfigService) {\r\n            const controlID = this.instance.el.nativeElement.id || this.instance.controlId;\r\n            if (!controlID) {\r\n                this.instance.writeConsole('LookupGrid - æªè®¾ç½®ç»ä»¶id, æ¶èåè½å°ä¸è½æ­£å¸¸ï¼è¯·è®¾ç½®ç»ä»¶id.');\r\n            }\r\n            const pcstr = this.getPersonalConfigKey(controlID);\r\n            this.instance.personalConfigService.controlID = controlID;\r\n            this.instance.personalConfigService.personalConfigKey = pcstr;\r\n\r\n            const conf = {\r\n                displayType: this.instance.displayType,\r\n                singleSelect: this.instance.singleSelect,\r\n                idField: this.instance.idField,\r\n                textField: this.instance.textField,\r\n                mapFields: Object.assign({}, this.instance.mapFields || {})\r\n            };\r\n\r\n            this.instance.personalConfigService.initPersonalConf(conf);\r\n\r\n            // ä¸ªæ§åéç½®çè®¢éäºä»¶å¤ç\r\n            this.listenPersonalConfigHandler();\r\n        }\r\n    }\r\n\r\n    private getPersonalConfigKey(controlID) {\r\n        // return this.instance.ngControl && this.instance.ngControl.name ? this.instance.ngControl.name : this.instance.mapFields\r\n        //     ? this.instance.mapFields[this.instance.textField]\r\n        //     : '';\r\n\r\n        if (this.instance.ngControl) {\r\n            if (this.instance.ngControl.name) {\r\n                return this.instance.ngControl.name;\r\n            } else {\r\n                if (this.instance.mapFields && this.instance.mapFields.length) {\r\n                    return Object.keys(this.instance.mapFields).map(k => {\r\n                        return this.instance.mapFields[k];\r\n                    }).join('_');\r\n                } else {\r\n                    return this.instance.textField;\r\n                }\r\n            }\r\n        } else {\r\n            return '';\r\n        }\r\n\r\n    }\r\n\r\n    /**\r\n     * çå¬æ¶èTABé¡µä¸­ç¸å³äºä»¶ï¼\r\n     * æ°æ®éä¸­ï¼åæ¶éä¸­ï¼ç§»é¤æ¶èï¼åå»äºä»¶\r\n     */\r\n    initFavoriteComponentEvent(cmpRef: ComponentRef<any>) {\r\n        switch (this.instance.displayType) {\r\n            case LookupGridDisplayType.NavList:\r\n            case LookupGridDisplayType.NavTreeList:\r\n            case LookupGridDisplayType.List: {\r\n                const fdt = cmpRef.instance as DataTableComponent;\r\n                fdt.remoteSort = false;\r\n                fdt.selectedRow.subscribe(e => {\r\n                    if (this.instance.singleSelect) {\r\n                        this.lookupSelectionSer.clearSelections();\r\n                    }\r\n                    this.lookupSelectionSer.updateSelections(e.data);\r\n                });\r\n                fdt.unSelectRow.subscribe(e => {\r\n                    this.lookupSelectionSer.unSelect(e.data[this.instance.idField]);\r\n                });\r\n\r\n                if (!fdt.singleSelect) {\r\n                    fdt.checkAll.subscribe(e => {\r\n                        this.lookupSelectionSer.updateSelections(fdt.data, e);\r\n                    });\r\n                }\r\n\r\n                fdt.cellClick.subscribe((e: any) => {\r\n                    if (e.col.field === FAVORITE_FIELD_NAME) {\r\n                        e.event.stopPropagation();\r\n                        // tslint:disable-next-line: no-string-literal\r\n                        const classList = e.event.target['classList'];\r\n                        if (classList.contains('f-lookup-unfavorite')) {\r\n                            if (this.instance.items) {\r\n                                this.instance.items.forEach(item => {\r\n                                    if (item[this.instance.idField] === e.row[this.instance.idField]) {\r\n                                        item[FAVORITE_FIELD_NAME] = false;\r\n                                    }\r\n                                });\r\n\r\n                                const dt = this.instance.componentRef.instance as DataTableComponent;\r\n                                if (dt) {\r\n                                    dt.loadData({\r\n                                        pageSize: this.instance.gridOptions.pageSize,\r\n                                        pageIndex: this.instance.gridOptions.pageIndex,\r\n                                        total: this.instance.gridOptions.total,\r\n                                        data: this.instance.gridOptions.items\r\n                                    });\r\n                                }\r\n                            }\r\n\r\n                            this.instance.favoriteItems =\r\n                                this.instance.favoriteItems.filter(n => n[this.instance.idField] !== e.row[this.instance.idField]);\r\n\r\n                            this.lookupSelectionSer.updateFavoriteData(e.row, FavoriteAction.delete);\r\n                        }\r\n                    }\r\n                });\r\n\r\n                // åå»äºä»¶\r\n                fdt.rowDblClick.subscribe((rowData: any) => {\r\n                    if (this.instance.gridOptions.singleSelect) {\r\n                        this.instance.selectItem(rowData);\r\n                    }\r\n                });\r\n                break;\r\n            }\r\n            case LookupGridDisplayType.TreeList: {\r\n                if (cmpRef) {\r\n                    const ftt = cmpRef.instance as TreeTableComponent;\r\n                    ftt.remoteSort = false;\r\n                    ftt.nodeSelected.subscribe(e => {\r\n                        if (this.instance.singleSelect) {\r\n                            this.lookupSelectionSer.clearSelections();\r\n                        }\r\n                        this.lookupSelectionSer.updateSelections(e.node.data);\r\n                    });\r\n                    ftt.nodeUnChecked.subscribe(e => {\r\n                        if (e.nodes && e.nodes.length) {\r\n                            this.instance.multiSelMgr.remove(e.nodes.map(n => n.id));\r\n                        } else if (e && e.node && e.node.data && e.node.data.id) {\r\n                            // const tt = this.instance.componentRef.instance as TreeTableComponent;\r\n                            // tt.unSelectNode(e.node.data.id);\r\n                            this.lookupSelectionSer.unSelect(e.node.data.id);\r\n                        }\r\n                    });\r\n\r\n                    ftt.nodeChecked.subscribe( e => {\r\n                        if (!this.instance.singleSelect) {\r\n                            if (e.nodes && e.nodes.length) {\r\n                                this.instance.multiSelMgr.updateSelections(e.nodes.map(n => n.data));\r\n                            } else {\r\n                                if (Array.isArray(e.node)) {\r\n                                    this.instance.multiSelMgr.updateSelections(e.node.map(n => n.data));\r\n                                } else {\r\n                                    this.instance.multiSelMgr.updateSelections([e.node.data]);\r\n                                }\r\n                            }\r\n                        }\r\n                    });\r\n\r\n                    ftt.cellClick.subscribe(row => {\r\n                        if (row.col.field === FAVORITE_FIELD_NAME) {\r\n                            row.event.stopPropagation();\r\n                            const classList = row.event.target['classList'];\r\n                            if (classList.contains('f-lookup-unfavorite')) {\r\n                                const _this = this.instance;\r\n                                (function every(items) {\r\n                                    if (!items) {\r\n                                        return;\r\n                                    }\r\n                                    let hasFinish = false;\r\n                                    items.forEach(item => {\r\n                                        if (hasFinish) {\r\n                                            return;\r\n                                        }\r\n                                        if (item.data[_this.idField] === row.node[_this.idField]) {\r\n                                            item.data[FAVORITE_FIELD_NAME] = false;\r\n                                            hasFinish = true;\r\n                                        } else if (item.children && item.children.length > 0) {\r\n                                            every(item.children);\r\n                                        }\r\n                                    });\r\n                                })(this.instance.items);\r\n                                const tt = this.instance.componentRef.instance as TreeTableComponent;\r\n                                tt.loadData(this.instance.items);\r\n\r\n                                this.lookupSelectionSer.updateFavoriteData(row.node.data, FavoriteAction.delete);\r\n                            }\r\n                        }\r\n                    });\r\n                    ftt.dblClick.subscribe((treeNode: TreeNode) => {\r\n                        if (this.instance.gridOptions.singleSelect && treeNode.selectable) {\r\n                            if (this.instance.okButton) {\r\n                                this.instance.okButton.nativeElement.click();\r\n                            }\r\n                        }\r\n                    });\r\n\r\n                    ftt.checkAll.subscribe( e => {\r\n                        const data = e.instance.checkeds.map(n => n.data);\r\n                        this.instance.multiSelMgr.updateSelections(data);\r\n                        this.instance.checkedChange.emit({ data, isCheck: true  });\r\n                    });\r\n                    ftt.unCheckAll.subscribe(() => {\r\n                        this.instance.multiSelMgr.clear();\r\n                        this.instance.checkedChange.emit({ data: [], isCheck: false  });\r\n                    });\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    private getFavoritData() {\r\n        if (this.instance.personalConf) {\r\n            const favData = this.instance.personalConf.favorite;\r\n            const _data = (favData && favData[this.instance.localService.localeId]) ? favData[this.instance.localService.localeId] : [];\r\n            return _data;\r\n        }\r\n        return [];\r\n    }\r\n\r\n    getFavoritIds() {\r\n        return this.getFavoritData();\r\n    }\r\n\r\n    _loadFavoriteData(data = null) {\r\n        const fdt = this.instance.favoritesComponentRef.instance as DataTableComponent;\r\n        this.loadFavoriteDatatable(fdt, data);\r\n        fdt.cd.markForCheck();\r\n        this.instance.closeLoading();\r\n    }\r\n\r\n    // å è½½æ¶ègridæ°æ®\r\n    loadFavoritesData(res = null) {\r\n        const favIds = this.getFavoritIds();\r\n        switch (this.instance.displayType) {\r\n            case LookupGridDisplayType.NavList:\r\n            case LookupGridDisplayType.NavTreeList:\r\n            case LookupGridDisplayType.List: {\r\n                const fdt = this.instance.favoritesComponentRef.instance as DataTableComponent;\r\n                if (this.instance.favoriteDataFrom === 'locale') {\r\n                    if (res) {\r\n                        this._loadFavoriteData(res.items);\r\n                    } else {\r\n                        // this.instance.httpMgr.getFavoriteData(favIds).subscribe(resData => {\r\n                        //     if (resData) {\r\n                        //         this._loadFavoriteData(resData.items);\r\n                        //     }\r\n                        //     this.instance.closeLoading();\r\n                        // });\r\n                    }\r\n                } else {\r\n                    const favData = this.getFavoritData();\r\n                    this.loadFavoriteDatatable(fdt, res ? res.items : favData);\r\n                }\r\n                break;\r\n            }\r\n            case LookupGridDisplayType.TreeList: {\r\n                if (this.instance.favoritesComponentRef && this.instance.favoritesComponentRef.instance instanceof TreeTableComponent) {\r\n                    const ftt = this.instance.favoritesComponentRef.instance as TreeTableComponent;\r\n                    this.bindFavTreetable(ftt);\r\n\r\n                    if (this.instance.favoriteDataFrom === 'locale') {\r\n                        if (res) {\r\n                            this.loadFavoriteForTreeTable(res.items || [], ftt);\r\n                        } else {\r\n                            // this.instance.httpMgr.getFavoriteData(favIds).subscribe(resData => {\r\n                            //     if (resData) {\r\n                            //         const items = resData.items;\r\n                            //         this.loadFavoriteForTreeTable(items, ftt);\r\n                            //     }\r\n                            //     this.instance.closeLoading();\r\n                            // });\r\n                        }\r\n                    } else {\r\n                        if (res) {\r\n                            this.loadFavoriteForTreeTable(res.items, ftt);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private loadFavoriteDatatable(fdt: DataTableComponent, data?: any) {\r\n        if (data !== undefined) {\r\n            this.instance.favoriteItems = data;\r\n        }\r\n\r\n        if (fdt.columns && !fdt.columns.length) {\r\n            fdt.columns = this.instance.favoriteColumns;\r\n        }\r\n\r\n        fdt.loadData({\r\n            total: 0,\r\n            pageSize: 20,\r\n            pageIndex: 1,\r\n            data: this.instance.favoriteItems\r\n        });\r\n\r\n\r\n        this.instance.selectionMgr.selectCurrentValue();\r\n        fdt.cd.detectChanges();\r\n    }\r\n\r\n\r\n    private bindFavTreetable(ftt: TreeTableComponent) {\r\n        ftt.allColumnsTitle = this.instance.allColumnsTitle;\r\n        ftt.idField = this.instance.idField;\r\n\r\n        const columns = this.instance.gridOptions.columns.map(item => {\r\n            const rtn: any = { ...item };\r\n            if (item.field === FAVORITE_FIELD_NAME) {\r\n                rtn.formatter = (v: any, data: any): any => {\r\n                    const favids = this.getFavoritIds();\r\n                    if (favids && favids.length) {\r\n                        const index = favids.findIndex(el => el === data[this.instance.idField]);\r\n                        if (index >= 0) {\r\n                            return FavoriteIcon.delete;\r\n                        }\r\n                    }\r\n                    return '';\r\n                };\r\n            }\r\n            return rtn;\r\n        });\r\n        this.instance.favoriteColumns = columns;\r\n        ftt.columns = columns;\r\n\r\n\r\n        if (this.instance.gridOptions.treeInfo) {\r\n            ftt.onlySelectLeaf = this.instance.gridOptions.treeInfo.onlySelectLeaf;\r\n        }\r\n\r\n        if (!ftt.singleSelect) {\r\n            ftt.checkOnSelect = true;\r\n            ftt.selectOnCheck = true;\r\n            ftt.showCheckbox = true;\r\n\r\n            // å¯ç¨å¤éåï¼åæ¶å¯ç¨çº§èéæ©\r\n            // å¯ç¨å¤éåï¼åæ¶å¯ç¨çº§èéæ©\r\n            if (this.instance.enableCascade) {\r\n                this.instance.ttEventMgr.cascadeValueChanged(this.instance.cascadeStatus);\r\n            } else {\r\n                ftt.cascadeCheck = false;\r\n                ftt.cascadeDown = false;\r\n                ftt.cascadeUp = false;\r\n            }\r\n        }\r\n    }\r\n\r\n    private checkNodeIsLeaf(nodes: any ) {\r\n        if (nodes && nodes.length) {\r\n            return nodes.map((node: TreeNode) => {\r\n                if (node.hasOwnProperty(\"addtional\")) {\r\n                    node.selectable = !node[\"addtional\"];\r\n                }\r\n    \r\n                if (node.children && node.children.length) {\r\n                    this.checkNodeIsLeaf(node.children);\r\n                } else {\r\n                    node.leaf = true;\r\n                }\r\n    \r\n                return node;\r\n            });\r\n        }\r\n        return nodes;\r\n    }\r\n\r\n    initFavoriteTreeData(items) {\r\n        const treeInfo = this.instance.gridOptions.treeInfo;\r\n\r\n        if (treeInfo && !treeInfo['treeDataIsInit']) {\r\n            if (treeInfo.layerType.toLowerCase() === 'pathcode') {\r\n                items = this.instance.lookupUtils.makeTree(items, treeInfo);\r\n            } else {\r\n                items = this.instance.lookupUtils.makeTreeWithParentID(\r\n                    items,\r\n                    '',\r\n                    `${treeInfo.dataField}.${treeInfo.parentField}`,\r\n                    this.instance.idField\r\n                );\r\n            }\r\n        }\r\n\r\n        // return this.instance.checkNodeCanBeSelect(items, true);\r\n        return this.checkNodeIsLeaf(items);\r\n    }\r\n\r\n    loadFavoriteForTreeTable(items, ftt: any) {\r\n        items = this.initFavoriteTreeData(items);\r\n        this.instance.favoriteItems = items;\r\n        ftt.loadData(items);\r\n        ftt.expandAll();\r\n        this.instance.selectionMgr.selectCurrentValue();\r\n\r\n        return items;\r\n    }\r\n\r\n    // æ´æ°åè¡¨ä¸­çæ¶èæ°æ®æ è¯\r\n    updateFavoritesStatus(data: any[]) {\r\n\r\n        if (!data || !this.instance.useFavorite) {\r\n            return;\r\n        }\r\n\r\n        const favIds = this.getFavoritIds();\r\n\r\n        if (favIds && favIds.length) {\r\n            // å¤çæ°æ®åè¡¨ä¸­çæ¶èæ°æ®æ è¯\r\n            if (this.instance.displayType !== LookupGridDisplayType.TreeList) {\r\n                data.map(item => {\r\n                    if (favIds && favIds.length && favIds.find(v => v === item[this.instance.idField])) {\r\n                        item[FAVORITE_FIELD_NAME] = true;\r\n                    }\r\n                });\r\n            } else {\r\n                const _this = this.instance;\r\n                (function each(_data) {\r\n                    _data.forEach(item => {\r\n                        if (favIds && favIds.length && favIds.find(v => v === item.data[_this.idField])) {\r\n                            item.data[FAVORITE_FIELD_NAME] = true;\r\n                        }\r\n                        if (item.children && item.children.length > 0) {\r\n                            each(item.children);\r\n                        }\r\n                    });\r\n                })(data);\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    private _updateFavorites(value: any, action) {\r\n        const localeID = this.instance.localService.localeId;\r\n        this.instance.personalConf.favorite = this.instance.personalConf.favorite || {};\r\n        const items = value.filter(n => !n['_addtional_']);\r\n        const newVal = items.map(n => n[this.instance.idField]).filter(n => n !== null && n !== undefined);\r\n        // const favIds = this.instance.personalConf.favorite[localeID] || [];\r\n        this.instance.personalConf.favorite[localeID] = newVal;\r\n        return newVal;\r\n    }\r\n\r\n    // æ¶èæ°æ®ç®¡ç\r\n    private listenPersonalConfigHandler() {\r\n        this.lookupSelectionSer.favoriteItems$.subscribe(n => {\r\n            if (!this.instance.favoritesComponentRef) {\r\n                return;\r\n            }\r\n\r\n            const { items, action } = n;\r\n            const favids = this._updateFavorites(items, action);\r\n\r\n            this.instance.httpMgr.submitFavoriteData(action);\r\n\r\n            if (this.instance.displayType === LookupGridDisplayType.List || this.instance.displayType.includes('NAV')) {\r\n                const dt = this.instance.favoritesComponentRef.instance as DataTableComponent;\r\n                this.loadFavoriteDatatable(dt, items);\r\n            } else if (this.instance.displayType === LookupGridDisplayType.TreeList) {\r\n                const ftt = this.instance.favoritesComponentRef.instance as TreeTableComponent;\r\n                // const favids = items.map(d => d.id);\r\n                this.instance.showLoading();\r\n                this.instance.httpMgr.getData({ favoriteIds: favids }, 'fav').subscribe(resData => {\r\n                    if (resData) {\r\n                        const _items = resData.items;\r\n                        this.loadFavoriteForTreeTable(_items, ftt);\r\n                    } else {\r\n                        this.instance.favoriteItems = [];\r\n                        ftt.loadData([]);\r\n                    }\r\n                    this.instance.closeLoading();\r\n                });\r\n            }\r\n        });\r\n    }\r\n\r\n}\r\n","import { TreeTableComponent } from '@farris/ui-treetable';\r\nimport { LookupGridComponent } from '../lookup-grid.component';\r\n\r\n\r\nexport class SelectionManager {\r\n    constructor(private ins: LookupGridComponent) {\r\n\r\n    }\r\n\r\n    destroy() {\r\n    }\r\n\r\n    getBindingData() {\r\n        let jsonData = this.ins.bindingData;\r\n        if (\r\n            this.ins.ngControl &&\r\n            this.ins.ngControl.formDirective &&\r\n            this.ins.ngControl.formDirective.form &&\r\n            this.ins.ngControl.formDirective.form.bindingData\r\n        ) {\r\n            const bindingData = this.ins.ngControl.formDirective.form.bindingData;\r\n            jsonData = bindingData;\r\n\r\n            if (bindingData.getObject) {\r\n                jsonData = bindingData.getObject().toJSON();\r\n            }\r\n        }\r\n        return jsonData;\r\n    }\r\n\r\n    initDisplayValue() {\r\n        const jsonData = this.getBindingData();\r\n        if (jsonData && this.ins.mapFields) {\r\n            const idField = this.ins.idField;\r\n            let targetField = this.ins.mapFields[idField];\r\n\r\n            if (targetField) {\r\n                if (targetField.indexOf(',') > -1 ) {\r\n                    targetField = targetField.split(',')[0];\r\n                }\r\n\r\n                const val = this.ins.utils.getValue(targetField, jsonData);\r\n                if (val) {\r\n                    this.ins.displayValue = val;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private _clearSelections() {\r\n        const { cmpRefInstance: t } = this.getDataCmpInstance();\r\n        if (t) {\r\n            if (this.ins.isTree()) {\r\n                // æ è¡¨\r\n                t.clearAll(false);\r\n                if (!t.cdRef.destroyed) {\r\n                    t.cdRef.detectChanges();\r\n                }\r\n            } else {\r\n                // åè¡¨\r\n                t.dtBody.selectedRowIndex = -1;\r\n                t.dtBody.selections = undefined;\r\n                if (!t.cd.destroyed) {\r\n                    t.cd.detectChanges();\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * å¸®å©çªå£æå¼åï¼æ ¹æ® displayValue éä¸­æ°æ®\r\n     */\r\n    selectCurrentValue(selectedIds = []) {\r\n\r\n        if (!this.ins.enableToSelect) {\r\n            return;\r\n        }\r\n\r\n\r\n        const { cmpRefInstance: t, items } = this.getDataCmpInstance();\r\n        if (!t || !items || !items.length) {\r\n            return;\r\n        }\r\n\r\n        this._clearSelections();\r\n\r\n        if (!selectedIds || !selectedIds.length) {\r\n            const selectedRows = this.ins.lookupSelectionSer.getSelections();\r\n            if (selectedRows.length) {\r\n                selectedIds = selectedRows.map(n => n[this.ins.idField]);\r\n            }\r\n        }\r\n\r\n        // const _ids = this.getSelectedIds();\r\n        // selectedIds = selectedIds.concat(_ids);\r\n        // selectedIds = Array.from(new Set(selectedIds));\r\n\r\n        if (selectedIds && selectedIds.length) {\r\n            if (this.ins.isTree()) {\r\n                // æ è¡¨\r\n                this.selected4Treetable(t, selectedIds);\r\n                if (!t.cdRef.destroyed) {\r\n                    t.cdRef.detectChanges();\r\n                }\r\n            } else {\r\n                // åè¡¨\r\n                this.selected4Datatable(t, items, selectedIds);\r\n                if (!t.cd.destroyed) {\r\n                    t.cd.detectChanges();\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private getDataCmpInstance() {\r\n        let ref = null;\r\n        let items = null;\r\n        if (this.ins.activeTab === 'datalist') {\r\n            if (this.ins.isTree()) {\r\n                ref = this.ins.lookupCmpMgr.getComponentInstance('treetable');\r\n                items = (ref as TreeTableComponent).serializedValue;\r\n            } else {\r\n                items = this.ins.items;\r\n                ref = this.ins.lookupCmpMgr.getComponentInstance();\r\n            }\r\n        } else if (this.ins.activeTab === 'favorite') {\r\n            ref = this.ins.lookupCmpMgr.getComponentInstance('fav');\r\n            items = this.ins.favoriteItems;\r\n        }\r\n        return { cmpRefInstance: ref, items };\r\n    }\r\n\r\n    private selected4Datatable(t: any, items: any, values: any) {\r\n        if (this.ins.singleSelect) {\r\n            items.forEach((item, index) => {\r\n                if (item[this.ins.idField] === values[0]) {\r\n                    if (!t.dtBody.isSelected(item)) {\r\n                        t.dtBody.selectedRowIndex = -1;\r\n                        t.dtBody.selectedRow('', index, item);\r\n                    }\r\n                }\r\n            });\r\n        } else {\r\n            // const values = this.getSelectedIds();\r\n            values.forEach(id => {\r\n                const r = items.find(n => n[this.ins.idField] == id);\r\n                if (r) {\r\n                    t.checkRow(id);\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    private selected4Treetable(t: any, valueArr: any) {\r\n        if (this.ins.singleSelect) {\r\n            t.selectNode(valueArr[0], false, false);\r\n        } else {\r\n            // const valueArr = this.getSelectedIds();\r\n            t.checkedNodes(valueArr, false, false, true);\r\n            t.selectNodes(valueArr);\r\n        }\r\n    }\r\n\r\n    getSelectedIds() {\r\n        let values = [];\r\n        const s = this.ins.multipleChoiceSeparator; // å¤éåéç¬¦\r\n        if (!this.ins.singleSelect && this.ins.displayValue && ('' + this.ins.displayValue).indexOf(s) > -1) {\r\n            values = this.ins.displayValue.split(s);\r\n        } else {\r\n            if (this.ins.displayValue !== null && this.ins.displayValue !== '' && this.ins.displayValue !== undefined) {\r\n                values = [this.ins.displayValue];\r\n            }\r\n        }\r\n\r\n        // å¯ç¨æ¾ç¤ºå¤éåè¡¨\r\n        if (this.ins.showSelected) {\r\n            const rows = this.ins.lookupSelectionSer.getSelections();\r\n            if (rows && rows.length) {\r\n                values = rows.map(n => n[this.ins.idField]);\r\n            } else {\r\n                values = [];\r\n            }\r\n        }\r\n\r\n        return values;\r\n    }\r\n}\r\n\r\n\r\n\r\n","import { DataTableComponent } from '@farris/ui-datatable';\r\nimport { of } from 'rxjs';\r\nimport { catchError, take, tap } from 'rxjs/operators';\r\nimport { FavoriteAction, FAVORITE_FIELD_NAME } from '../lookup-displaytype';\r\nimport { LookupGridResult } from '../lookup-grid-options';\r\nimport { LookupGridComponent } from '../lookup-grid.component';\r\nimport { LookupSelectionService } from './lookup-selection.service';\r\n\r\nexport class DataTableEventManager {\r\n\r\n    private lookupSelectionSer: LookupSelectionService;\r\n\r\n    constructor(private ins: LookupGridComponent) {\r\n        this.lookupSelectionSer = this.ins.lookupSelectionSer;\r\n    }\r\n\r\n    onSearch($event: { field: string; value: string } = { field: '*', value: '' }) {\r\n        if ($event && $event.field !== '*' && !$event.value) {\r\n            this.ins.messagerService.warning(this.ins.mustWriteSomething);\r\n            return;\r\n        }\r\n\r\n        const p = {\r\n            pageInfo: { pageIndex: 1, pageSize: this.ins.gridOptions.pageSize },\r\n            search: $event\r\n        };\r\n        if (this.ins.uri) {\r\n            if (!this.ins.searching) {\r\n                this.ins.searching = true;\r\n                this.ins.httpMgr.getData(p, 'list').pipe(\r\n                    catchError(err => {\r\n                        this.ins.searching = false;\r\n                        return of({ \"_ERROR_\": err });\r\n                    }),\r\n                    tap(() => {\r\n                        this.ins.searching = false;\r\n                    })\r\n                ).subscribe(\r\n                    data => {\r\n                        this.ins.searching = false;\r\n                        this.ins.closeLoading();\r\n                        if (!data['_ERROR_']) {\r\n                            this._loadData(data);\r\n                        } else {\r\n                            throw new Error(data['_ERROR_']);\r\n                        }\r\n                    }\r\n                );\r\n            }\r\n        } else {\r\n            this.ins.search.emit(p);\r\n        }\r\n    }\r\n\r\n    private _loadData(data: LookupGridResult) {\r\n        const self = this.ins;\r\n        self.closeLoading();\r\n        self.favHelper.updateFavoritesStatus(data.items);\r\n        self.loadDataTableData(data);\r\n        // éä¸­æ°æ®\r\n        this.ins.selectionMgr.selectCurrentValue();\r\n    }\r\n\r\n    bindDataTableEvent() {\r\n        const self = this.ins;\r\n        const dt = self.componentRef.instance as DataTableComponent;\r\n\r\n        dt.selectedRow.subscribe((e: any) => {\r\n            if (this.ins.singleSelect) {\r\n                this.lookupSelectionSer.clearSelections();\r\n            }\r\n            this.ins.checkedChange.emit({ data: [e.data], isCheck: true });\r\n            this.lookupSelectionSer.updateSelections([e.data]);\r\n            dt.cd.detectChanges();\r\n        });\r\n\r\n        dt.unSelectRow.subscribe(e => {\r\n            this.lookupSelectionSer.unSelect(e.data[self.idField]);\r\n            this.ins.checkedChange.emit({ data: [e.data], isCheck: false });\r\n        });\r\n\r\n        dt.checkAll.subscribe((e: boolean) => {\r\n            this.lookupSelectionSer.updateSelections(dt.data, e);\r\n            this.ins.checkedChange.emit({ data: dt.data, isCheck: e });\r\n        });\r\n\r\n        dt.pageChanged.subscribe((e: any) => {\r\n            if (self.uri) {\r\n                self.httpMgr.getData(e, 'list').subscribe((data: LookupGridResult) => {\r\n                    this._loadData(data);\r\n                });\r\n            } else {\r\n                self.pagerChanged.emit(self.httpMgr.buildQueryParams(e, 'list'));\r\n            }\r\n        });\r\n\r\n        dt.pageSizeChanged.subscribe(e => {\r\n            if (self.uri) {\r\n                self.httpMgr.getData(e, 'list').subscribe(\r\n                    data => {\r\n                        this._loadData(data);\r\n                    },\r\n                    err => {\r\n                        self.closeLoading();\r\n                    }\r\n                );\r\n            } else {\r\n                self.pagerChanged.emit(self.httpMgr.buildQueryParams(e, 'list'));\r\n            }\r\n        });\r\n\r\n        dt.search.subscribe((e: any) => {\r\n            self._searchState = e;\r\n            this.onSearch(e);\r\n        });\r\n        // åå»äºä»¶\r\n        dt.rowDblClick.subscribe((rowData: any) => {\r\n            if (self.gridOptions.singleSelect) {\r\n                // this.lookupSelectionSer.updateSelections([rowData]);\r\n                self.selectItem(rowData);\r\n            }\r\n        });\r\n\r\n        // æ¶èäºä»¶\r\n        dt.cellClick.subscribe((e: any) => {\r\n            if (e.col.field === FAVORITE_FIELD_NAME) {\r\n                e.event.stopPropagation();\r\n                const classList = e.event.target['classList'];\r\n                if (classList.contains('f-lookup-favorite')) {\r\n                    self.items.forEach(item => {\r\n                        const id = self.utils.getValue(self.idField, item);\r\n                        if (id === self.utils.getValue(self.idField, e.row)) {\r\n                            item[FAVORITE_FIELD_NAME] = !item[FAVORITE_FIELD_NAME];\r\n                        }\r\n                    });\r\n                    dt.loadData({\r\n                        pageSize: self.gridOptions.pageSize,\r\n                        pageIndex: self.gridOptions.pageIndex,\r\n                        total: self.gridOptions.total,\r\n                        data: self.gridOptions.items\r\n                    });\r\n\r\n                    // æ´æ°æ¶èæ°æ®\r\n                    const faction = e.row[FAVORITE_FIELD_NAME] ? FavoriteAction.add : FavoriteAction.delete;\r\n\r\n                    if (faction ===  FavoriteAction.add) {\r\n                        this.ins.favoriteItems = [...this.ins.favoriteItems, e.row];\r\n                    } else {\r\n                        this.ins.favoriteItems = this.ins.favoriteItems.filter(n => {\r\n                            return self.utils.getValue(self.idField, n) !== self.utils.getValue(self.idField, e.row);\r\n                        });\r\n                    }\r\n\r\n                    this.lookupSelectionSer.updateFavoriteData(e.row, faction);\r\n                }\r\n            }\r\n        });\r\n\r\n        dt.columnSorted.subscribe((sort: { sortName: string; sortOrder: any }) => {\r\n\r\n            if (!this.ins.remoteSort) {\r\n                return;\r\n            }\r\n\r\n            const { sortName, sortOrder } = { ...sort };\r\n\r\n            const col = this.ins.columns.find(n => n.field === sortName);\r\n\r\n            const _sortName = col ? col.fieldPath ? col.fieldPath : col.field : sortName;\r\n\r\n            const param = {\r\n                sortName: _sortName,\r\n                sortOrder,\r\n                search: self._searchState,\r\n                pageInfo: {\r\n                    pageSize: self.pageSize,\r\n                    pageIndex: 1\r\n                }\r\n            };\r\n\r\n            self.httpMgr.getData(param, 'search').subscribe(d => {\r\n                self.loadDataTableData(d);\r\n                self.closeLoading();\r\n            });\r\n        });\r\n\r\n        dt.clearSearchValue.subscribe(() => {\r\n            self._searchState = null;\r\n            this.onSearch();\r\n        });\r\n    }\r\n}\r\n\r\n","import { EMPTY, of } from 'rxjs';\r\nimport { switchMap } from 'rxjs/operators';\r\nimport { LookupGridResult, PickingResult } from '../lookup-grid-options';\r\n\r\n\r\n\r\n /** æ£æ¥å¸®å©è¾å¥æ¡å¼åååè¿åçæ¥è¯¢ç»æ */\r\nfunction checkSearchResult(data = null) {\r\n    if (this.searchOnServer) {\r\n        // this._searchResult = data;\r\n        // this.showDialog();\r\n        this.isShow = true;\r\n    } else {\r\n        if (data === false) {\r\n            this.cancelSelect();\r\n        } else {\r\n            this.setModelValue(this.displayText);\r\n            this.runDictPickedEvent(null);\r\n        }\r\n    }\r\n}\r\n\r\nexport function onTextChanged() {\r\n\r\n    const self = this;\r\n\r\n    const isPending = () => {\r\n        return this.lookupUtils.rts.getFormState('lookup.pending');\r\n    };\r\n\r\n    const searchData = (e) => {\r\n\r\n        if (this.isShow) {\r\n            return;\r\n        }\r\n\r\n        if (this.isTextChange && this.displayText && (!this.nosearch || e.originalEvent) && !isPending()) {\r\n            this.lookupUtils.pendingStart();\r\n\r\n            this.dictPickingSubscription = this.dictPicking({\r\n                instance: this\r\n            }).pipe(\r\n                switchMap((pr: PickingResult) => {\r\n                    let o = true;\r\n                    if (pr === undefined || pr === null) {\r\n                        o = true;\r\n                    }\r\n\r\n                    if (typeof pr === 'boolean') {\r\n                        o = pr;\r\n                    }\r\n\r\n                    if (typeof pr === 'object') {\r\n                        if (pr.showDialog === undefined) {\r\n                            o = true;\r\n                        } else {\r\n                            o = pr.showDialog;\r\n                        }\r\n\r\n                        if (pr.data) {\r\n                            /** ä¿å­å¸®å©åä¼ éçæ°æ® */\r\n                            this.customData = pr.data;\r\n                        }\r\n                    }\r\n\r\n                    if (o) {\r\n                        return this.httpMgr.getData(\r\n                            {\r\n                                search: {\r\n                                    field: '*',\r\n                                    value: this.displayText,\r\n                                    type: 'equal'\r\n                                }\r\n                            },\r\n                            'search'\r\n                        );\r\n                    } else {\r\n                        return of({ SHOWDIALOG: o, MESSAGE:  pr.message || '' });\r\n                    }\r\n                })\r\n            ).subscribe(\r\n                (data: any) => {\r\n                    this.closeLoading();\r\n                    this.lookupUtils.pendingEnd();\r\n                    if (data.hasOwnProperty('SHOWDIALOG')) {\r\n                        if (data.SHOWDIALOG && data.MESSAGE) {\r\n                            this.notifyService.warning(data.MESSAGE);\r\n                        }\r\n\r\n                        return;\r\n                    }\r\n\r\n                    if (data.items && data.items.length === 1 && (!data.items[0].children || !data.items[0].children.length)) {\r\n                        let rowdata = data.items[0];\r\n                        if (this.isTree()) {\r\n                            const leafNode = this.treeNodeHelper.getLeafNode(rowdata);\r\n\r\n                            let isOnlySelectLeaf = false;\r\n\r\n                            if (!this.treeInfo) {\r\n                                this.setTreeInfo(data);\r\n                            }\r\n\r\n                            if (typeof this.treeInfo.onlySelectLeaf === 'boolean' ) {\r\n                                isOnlySelectLeaf = this.treeInfo.onlySelectLeaf;\r\n                            } else if (typeof this.treeInfo.onlySelectLeaf === 'string') {\r\n                                if (this.treeInfo.onlySelectLeaf === 'yes') {\r\n                                    isOnlySelectLeaf = true;\r\n                                } else if (this.treeInfo.onlySelectLeaf === 'no') {\r\n                                    isOnlySelectLeaf = false;\r\n                                } else {\r\n                                    if (this.treeInfo.onlySelectLeaf === 'default') {\r\n                                        isOnlySelectLeaf = data.treeInfo.onlySelectLeaf;\r\n                                    }\r\n                                }\r\n                            }\r\n\r\n                            if (isOnlySelectLeaf && !leafNode.leaf) {\r\n                                // this.displayText = '';\r\n                                checkSearchResult.bind(self, data)();\r\n                                return;\r\n                            }\r\n                            \r\n\r\n                            if (Array.isArray(leafNode)) {\r\n                                checkSearchResult.bind(self, data)();\r\n                                return;\r\n                            } else {\r\n                                rowdata = leafNode.data;\r\n                            }\r\n                        }\r\n                        if (!this.singleSelect) {\r\n                            rowdata = [ rowdata ];\r\n                        }\r\n                        this.selectItem(rowdata);\r\n\r\n                        this.dialogClosed.emit();\r\n                    } else {\r\n                        checkSearchResult.bind(self, data)();\r\n                    }\r\n                }, (err: any) => {\r\n                    this.closeLoading();\r\n                    this.lookupUtils.pendingEnd();\r\n                    this.messagerService.error(err ? err.Message : err);\r\n                }\r\n            );\r\n        }\r\n    };\r\n\r\n    let inputBlurHandler = null;\r\n\r\n    if (this.inputGroup && this.inputGroup.textbox && !this.nosearch) {\r\n        this.lookupUtils.setActiveLookupInstance(this);\r\n        inputBlurHandler = this.render2.listen(this.inputGroup.textbox.nativeElement, 'blur', searchData );\r\n    }\r\n\r\n    if (this.inputGroup) {\r\n        this.inputGroup.enterHandle.subscribe( searchData);\r\n\r\n        this.inputGroup.keydownHandle.subscribe((e: any) => {\r\n            let canOpen = false;\r\n            if (e.code === 'ArrowRight') {\r\n                if (this.editable) {\r\n                    canOpen = !e.target.value || e.target.selectionStart === e.target.value.length;\r\n                } else {\r\n                    canOpen = true;\r\n                }\r\n            } else {\r\n                canOpen = e.code === this.shortcutKey.open;\r\n            }\r\n            if (canOpen) {\r\n                e.stopPropagation();\r\n                e.preventDefault();\r\n                this.showDialog();\r\n            }\r\n        });\r\n    }\r\n\r\n    return inputBlurHandler;\r\n\r\n}\r\n","import { TreeTableComponent, TreeNode } from '@farris/ui-treetable';\r\nimport { FavoriteAction, FAVORITE_FIELD_NAME } from '../lookup-displaytype';\r\nimport { LookupGridResult } from '../lookup-grid-options';\r\nimport { cloneDeep } from 'lodash-es';\r\nimport { Observable, of, Subject } from 'rxjs';\r\nimport { LookupGridComponent } from '../lookup-grid.component';\r\nimport { take, tap, catchError } from 'rxjs/operators';\r\nimport { LookupSelectionService } from './lookup-selection.service';\r\n\r\n\r\nexport class TreeTableEventManager {\r\n    private lookupSelectionSer: LookupSelectionService;\r\n\r\n    /**\r\n     * æ è¯å½åæ°æ®æ¯å¦æ¥è¯¢ç»æ\r\n     */\r\n    private IS_SEARCH_RESULT = false;\r\n\r\n\r\n    constructor(private ins: LookupGridComponent) {\r\n        this.lookupSelectionSer = this.ins.lookupSelectionSer;\r\n    }\r\n\r\n    searchTreeData(search: { field: string; value: string }) {\r\n        const tt = this.ins.componentRef.instance as TreeTableComponent;\r\n        // å¤æ­uri ååºsearch.emit();\r\n        if (this.ins.searching) {\r\n            return;\r\n        } else {\r\n            this.ins.searching = true;\r\n        }\r\n\r\n        this.ins.showLoading();\r\n        return this.ins.httpMgr.getData({ search, sortName: tt.sortName, sortOrder: tt.sortOrder }, 'search').pipe(\r\n            tap(() => {\r\n                this.ins.searching = false;\r\n            }),\r\n            catchError((err) => {\r\n                this.ins.searching = false;\r\n                return of(err);\r\n            })\r\n        ).subscribe(resData => {\r\n            this.ins.closeLoading();\r\n            if (resData) {\r\n                // this.ins.items = resData.items;\r\n                tt.clearAll();\r\n\r\n                const treeInfo = this.ins.gridOptions.treeInfo;\r\n                if (!treeInfo['treeDataIsInit']) {\r\n                    if (treeInfo.layerType.toLowerCase() === 'pathcode') {\r\n                        this.ins.items = this.ins.lookupUtils.makeTree(this.ins.items, treeInfo);\r\n                    } else {\r\n                        this.ins.items = this.ins.lookupUtils.makeTreeWithParentID(\r\n                            this.ins.items,\r\n                            '',\r\n                            `${treeInfo.dataField}.${treeInfo.parentField}`,\r\n                            this.ins.idField\r\n                        );\r\n                    }\r\n                }\r\n\r\n\r\n                const checkNodes = (nodes): TreeNode[] => {\r\n                    if (nodes && nodes.length) {\r\n                        return nodes.map((node: TreeNode) => {\r\n                            if (node.hasOwnProperty('addtional')) {\r\n                                node.selectable = !node['addtional'];\r\n                            }\r\n\r\n                            if (node.children && node.children.length) {\r\n                                checkNodes(node.children);\r\n                            }\r\n                            return node;\r\n                        });\r\n                    }\r\n                    return nodes;\r\n                };\r\n\r\n                const expandFirstNode = (nodes): TreeNode[] => {\r\n                    if (nodes && nodes.length) {\r\n                        return nodes.map((node: TreeNode) => {\r\n                            if (node.children && node.children.length) {\r\n                                node.expanded = true;\r\n                                expandFirstNode(node.children);\r\n                            }\r\n                            return node;\r\n                        });\r\n                    }\r\n                    return nodes;\r\n                };\r\n\r\n                const _nodes = checkNodes(resData.items);\r\n                if (_nodes && _nodes.length && _nodes[0].children && _nodes[0].children.length) {\r\n                    _nodes[0].expanded = true;\r\n                    _nodes[0].children = expandFirstNode(_nodes[0].children);\r\n                }\r\n                this.ins.items = _nodes;\r\n\r\n\r\n                // å è½½æ¶èæ°æ®\r\n                if (this.ins.useFavorite) {\r\n                    // æ´æ°æ°æ®çæ¶èç¶æ\r\n                    this.ins.favHelper.updateFavoritesStatus(this.ins.items);\r\n                }\r\n\r\n                tt.loadData(this.ins.items);\r\n                // // å±å¼æ¥è¯¢ç»æã\r\n                // if (search.value && this.ins.items.length) {\r\n                //     tt.toggleExpand(this.ins.items[0], true);\r\n                // }\r\n                tt.resize();\r\n\r\n                this.IS_SEARCH_RESULT = true;\r\n\r\n                this.ins.selectionMgr.selectCurrentValue();\r\n            }\r\n\r\n            this.ins.search.emit(search);\r\n        });\r\n    }\r\n\r\n    private getChildren(\r\n        parentPath,\r\n        parentLayer,\r\n        searchData: { searchField: string; searchValue: string }\r\n    ): Observable<any> {\r\n        const uri = this.ins.gridOptions.uri;\r\n        const search = { parentLayer, category: 'children', ...searchData };\r\n        if (this.ins.treeInfo.layerType === 'parentId') {\r\n            search['parentId'] = parentPath;\r\n        } else {\r\n            search['parentPath'] = parentPath;\r\n        }\r\n\r\n        const param = {\r\n            searchValue: JSON.stringify(search),\r\n            customData: this.ins.customData,\r\n            enableFullTree: this.ins.enableFullTree,\r\n            loadTreeDataType: this.ins.loadTreeDataType\r\n        };\r\n\r\n        if (this.IS_SEARCH_RESULT) {\r\n            param.enableFullTree = false;\r\n            param.loadTreeDataType = 'layerload';\r\n\r\n            if (this.ins.treeInfo.layerType === 'parentId') {\r\n                // æ å½¢å¸®å©æ¥è¯¢åï¼å±å¼èç¹æ¶å°ç¸å³æ¥è¯¢åæ°ä¼ éå°åç«¯ 2022-09-13\r\n                search.searchValue = '';\r\n                search.searchField = '*';\r\n            }\r\n            param.searchValue = JSON.stringify(search);\r\n        }\r\n\r\n        if (this.ins.helpId) {\r\n            param['helpId'] = this.ins.helpId;\r\n        }\r\n\r\n        const tt = this.ins.componentRef.instance as TreeTableComponent;\r\n        if (tt && tt.sortName) {\r\n            Object.assign(param, {\r\n                sortName: tt.sortName,\r\n                sortOrder: tt.sortOrder\r\n            });\r\n        }\r\n\r\n        return this.ins.http.getData(uri, param);\r\n    }\r\n\r\n\r\n    bindTreetableEvent() {\r\n        const tt = this.ins.componentRef.instance as TreeTableComponent;\r\n        const _searchTreeData = (searchparam: any) => {\r\n            if (this.ins.remoteSearch) {\r\n                this.ins._searchState = searchparam;\r\n                this.searchTreeData(searchparam);\r\n            } else {\r\n                // TODO: å¨é¨å è½½ï¼åç«¯æç´¢ éè¦å®å\r\n                // if (this.ins.loadTreeDataType === 'loadall' && tt.searchHandle) {\r\n                //     tt.searchHandle.search(searchparam.field, searchparam.value, 'client');\r\n                // }\r\n                this.ins.search.emit(searchparam);\r\n            }\r\n        };\r\n\r\n        const isLoadAllTreeData = () => {\r\n            if (this.ins.loadTreeDataType === 'default') {\r\n                return tt.loadDataType === 'all';\r\n            } else {\r\n                return this.ins.loadTreeDataType === 'loadall';\r\n            }\r\n        };\r\n\r\n        const isAsyncLoadTreeData = () => {\r\n            if (this.ins.loadTreeDataType === 'default') {\r\n                return tt.loadDataType === 'async';\r\n            } else {\r\n                return this.ins.loadTreeDataType === 'layerload';\r\n            }\r\n        };\r\n\r\n\r\n        tt.dblClickExpand = !this.ins.singleSelect; // ç¦ç¨åå»å±å¼èç¹\r\n\r\n        tt.allColumnsTitle = this.ins.allColumnsTitle; // this.displayInfo.allColumns;\r\n        tt.idField = this.ins.idField;\r\n        tt.columns = this.ins.columns;\r\n        tt.searchFields = this.ins.gridOptions.searchFields;\r\n        if (this.ins.treeInfo) {\r\n            tt.loadDataType = this.ins.treeInfo.loadDataType;\r\n            tt.virtualized = true;\r\n            if (!this.ins.isTextChange) {\r\n                this.ins.allData = cloneDeep(this.ins.items);\r\n            } else {\r\n                this.ins.allData = [];\r\n            }\r\n        }\r\n\r\n        if (this.ins.gridOptions.treeInfo) {\r\n            tt.onlySelectLeaf = this.ins.gridOptions.treeInfo.onlySelectLeaf;\r\n            tt.loadDataType = this.ins.gridOptions.treeInfo.loadDataType;\r\n        }\r\n\r\n        if (!tt.singleSelect) {\r\n            tt.checkOnSelect = true;\r\n            tt.selectOnCheck = true;\r\n            tt.showCheckbox = true;\r\n            tt.showCheckAll =  this.ins.showCheckAll;\r\n            // å¯ç¨å¤éåï¼åæ¶å¯ç¨çº§èéæ©\r\n            if (this.ins.enableCascade) {\r\n                this.cascadeValueChanged(this.ins.cascadeStatus);\r\n            } else {\r\n                tt.cascadeCheck = false;\r\n                tt.cascadeDown = false;\r\n                tt.cascadeUp = false;\r\n            }\r\n        }\r\n\r\n        tt.enableFindText = this.ins.enableFindText;\r\n        // tt.findField = this.textField;\r\n        tt.nodeSelected.subscribe((e: any) => {\r\n            // if (this.ins.favoritesComponentRef && this.ins.singleSelect) {\r\n            //     const ftt = this.ins.favoritesComponentRef.instance as TreeTableComponent;\r\n            //     ftt.clearSelections();\r\n            // }\r\n            if (this.ins.singleSelect) {\r\n                this.lookupSelectionSer.clearSelections();\r\n            }\r\n            this.lookupSelectionSer.updateSelections([e.node.data]);\r\n            this.ins.checkedChange.emit({ data: [e.node.data] , isCheck: true  });\r\n        });\r\n\r\n        tt.nodeChecked.subscribe( e => {\r\n            if (!this.ins.singleSelect) {\r\n                let data = null;\r\n                if (e.nodes && e.nodes.length) {\r\n                    data = e.nodes.map(n => n.data);\r\n                    // this.ins.multiSelMgr.updateSelections(e.nodes.map(n => n.data));\r\n                } else {\r\n                    if (Array.isArray(e.node)) {\r\n                        data = e.node.map(n => n.data);\r\n                        // this.ins.multiSelMgr.updateSelections(e.node.map(n => n.data));\r\n                    } else {\r\n                        data = [e.node.data];\r\n                        // this.ins.multiSelMgr.updateSelections([e.node.data]);\r\n                    }\r\n                }\r\n                this.ins.multiSelMgr.updateSelections(data);\r\n                this.ins.checkedChange.emit({ data, isCheck: true  });\r\n            }\r\n        });\r\n\r\n        tt.nodeUnChecked.subscribe((e: any) => {\r\n            if (e && e.node) {\r\n                if (!this.ins.singleSelect) {\r\n                    this.ins.multiSelMgr.remove(e.node.id);\r\n\r\n                    // åå±å è½½ï¼å¤éï¼åå«ä¸çº§æ¶ï¼åæ¶å¾é éè¦å°å½åèç¹çææå­çº§æ°æ®ä¹è¦åæ¶éæ©ï¼å³ä»å·²éè®°å½ä¸­ç§»é¤\r\n                    if (tt.loadDataType !== 'all' && this.ins.treeInfo.layerType === 'pathcode' &&\r\n                        (this.ins.cascadeStatus === 'enable' || this.ins.cascadeStatus === 'down')) {\r\n                        if (e.node.children && e.node.children.length) {\r\n                            const nodes = e.node.children.map(n => n.data);\r\n                            this.ins.lookupSelectionSer.updateSelections(nodes, false);\r\n                        } else {\r\n                            const pathcode = e.node.data[this.ins.treeInfo.dataField][this.ins.treeInfo.pathField];\r\n                            this.ins.lookupSelectionSer.unselectByPathcode(pathcode);\r\n                        }\r\n                    }\r\n\r\n                    if (e.nodes && e.nodes.length) {\r\n                        this.ins.multiSelMgr.remove(e.nodes.map(n => n.id));\r\n                        this.ins.checkedChange.emit({ data: e.nodes.map(n => n.data), isCheck: false });\r\n                    } else {\r\n                        this.ins.checkedChange.emit({ data: [e.node.data], isCheck: false });\r\n                    }\r\n                } else {\r\n                    const ftt = this.ins.favoritesComponentRef && (this.ins.favoritesComponentRef.instance as TreeTableComponent);\r\n                    if (ftt && ftt.findRowNode(e.node.id)) {\r\n                        ftt.unSelectNode(e.node.id);\r\n                    }\r\n\r\n                    this.ins.checkedChange.emit({ data: [e.node.data], isCheck: false });\r\n                }\r\n            }\r\n        });\r\n\r\n        tt.checkAll.subscribe( e => {\r\n            const data = e.instance.checkeds.map(n => n.data);\r\n            this.ins.multiSelMgr.updateSelections(data);\r\n            this.ins.checkedChange.emit({ data, isCheck: true  });\r\n        });\r\n        tt.unCheckAll.subscribe(() => {\r\n            this.ins.multiSelMgr.clear();\r\n            this.ins.checkedChange.emit({ data: [], isCheck: false  });\r\n        });\r\n\r\n        tt.search.subscribe(searchparam => {\r\n            if (searchparam.field !== '*' && !searchparam.value) {\r\n                this.ins.messagerService.warning(this.ins.mustWriteSomething);\r\n            } else {\r\n                searchparam.value = searchparam.value.trim();\r\n                _searchTreeData(searchparam);\r\n            }\r\n        });\r\n\r\n        tt.cellClick.subscribe((e: any) => {\r\n            if (e.col.field === FAVORITE_FIELD_NAME) {\r\n                e.event.stopPropagation();\r\n                // tslint:disable-next-line: no-string-literal\r\n                const classList = e.event.target['classList'];\r\n                if (classList.contains('f-lookup-favorite')) {\r\n                    // classList.toggle('f-icon-star');\r\n                    // classList.toggle('f-icon-star-outline');\r\n                    const _this = this.ins;\r\n\r\n                    (function each(arr) {\r\n                        if (arr) {\r\n                            arr.forEach(item => {\r\n                                const id = _this.utils.getValue(_this.idField, item.data);\r\n                                if (id === e.node.id) {\r\n                                    item.data[FAVORITE_FIELD_NAME] = !item.data[FAVORITE_FIELD_NAME];\r\n                                    return true;\r\n                                } else if (item.children && item.children.length > 0) {\r\n                                    return each(item.children);\r\n                                } else {\r\n                                    return false;\r\n                                }\r\n                            });\r\n                        }\r\n                    })(this.ins.items);\r\n                    tt.loadData(this.ins.items);\r\n\r\n                    // æ´æ°æ¶èæ°æ®\r\n                    this.lookupSelectionSer.updateFavoriteData( e.node.data,\r\n                        e.node.data[FAVORITE_FIELD_NAME] ? FavoriteAction.add : FavoriteAction.delete);\r\n                }\r\n            }\r\n        });\r\n\r\n        tt.dblClick.subscribe((treeNode: TreeNode) => {\r\n            if (this.ins.gridOptions.singleSelect && treeNode.selectable) {\r\n                if (this.ins.okButton) {\r\n                    // this.lookupSelectionSer.select(treeNode.data);\r\n                    // this.ins.okButton.nativeElement.click();\r\n                    this.ins.selectItem(treeNode.data);\r\n                }\r\n            }\r\n        });\r\n        const loadAllData = isLoadAllTreeData();\r\n        tt.columnSorted.subscribe((sort: { sortName: string; sortOrder: any; }) => {\r\n            if (isLoadAllTreeData()) {\r\n                tt.clientSort();\r\n            } else {\r\n                const { sortName, sortOrder } = { ...sort };\r\n\r\n                const col = this.ins.columns.find(n => n.field === sortName);\r\n                const _sortName = col ? col.fieldPath ? col.fieldPath : col.field : sortName;\r\n\r\n                const param = Object.assign({ sortName: _sortName, sortOrder }, { search: this.ins._searchState });\r\n                this.ins.httpMgr.getData(param, 'search').subscribe(d => {\r\n                    this.ins.items = d.items;\r\n                    this.ins.closeLoading();\r\n                    tt.clearAll();\r\n                    const items = this.ins.checkNodeCanBeSelect(d.items, false);\r\n                    tt.loadData(items);\r\n                    tt.resize();\r\n                });\r\n            }\r\n        });\r\n\r\n        tt.clearSearchValue.subscribe(() => {\r\n            this.ins._searchState = null;\r\n            this.IS_SEARCH_RESULT = false;\r\n            let _items = [];\r\n            if (this.ins.allData && this.ins.allData.length) {\r\n                _items = this.ins.checkNodeCanBeSelect(this.ins.allData, loadAllData);\r\n            }\r\n            if (!_items || !_items.length) {\r\n                _searchTreeData({ field: '*', value: '' });\r\n            } else {\r\n                this.ins.items = _items;\r\n                this.ins.favHelper.updateFavoritesStatus(this.ins.items);\r\n                tt.loadData(_items);\r\n                this.ins.selectionMgr.selectCurrentValue();\r\n            }\r\n        });\r\n\r\n        tt.expand.subscribe((tn: TreeNode) => {\r\n            if (tn.leaf ||  tn['showLoading']) {\r\n                return;\r\n            }\r\n            if (!tn.children || !tn.children.length) {\r\n                const treeInfo = this.ins.gridOptions.treeInfo;\r\n                if (isAsyncLoadTreeData() || this.IS_SEARCH_RESULT ) {\r\n                    let parentPath = '';\r\n                    let parentLayer = -1;\r\n                    const { field = '*', value = '' } = {\r\n                        ...tt.searchData\r\n                    };\r\n\r\n                    tn['showLoading'] = true;\r\n                    tt.detectChanges();\r\n                    if (treeInfo.layerType === 'parentId') {\r\n                        // ç¶IDå è½½æ¹å¼\r\n                        parentPath = tn['id'];\r\n                    } else {\r\n                        const treeInfoField = treeInfo.dataField;\r\n                        if (treeInfoField) {\r\n                            parentPath = tn.data[treeInfoField][treeInfo.pathField];\r\n                            parentLayer = tn.data[treeInfoField][treeInfo.layerField];\r\n                        } else {\r\n                            this.ins.writeConsole('æªæ¾å°åçº§ä¿¡æ¯ã');\r\n                        }\r\n                    }\r\n\r\n                    if (!this.ins.uri) {\r\n                        this.ins.expandTreeNode.emit({\r\n                            instance: tt, node: tn,\r\n                            parentIdOrPath: parentPath, parentLayer, search: { value, field }\r\n                        });\r\n\r\n                        return;\r\n                    }\r\n\r\n                    this.ins.showLoading();\r\n\r\n                    this.getChildren(parentPath, parentLayer, {\r\n                        searchField: field === '*' ? '*' : field,\r\n                        searchValue: value\r\n                    }).subscribe(data => {\r\n                        this.ins.closeLoading();\r\n                        if (tt) {\r\n                            if (tn && data.items && data.items.length) {\r\n                                if (this.ins.useFavorite) {\r\n                                    // æ´æ°å­èç¹æ¶èç¶æ\r\n                                    this.ins.favHelper.updateFavoritesStatus(data.items);\r\n                                }\r\n\r\n                                const nodes = this.ins.checkNodeCanBeSelect(data.items, false);\r\n\r\n                                tt.appendChildren(nodes, tn);\r\n\r\n                                if (tt.loadDataType !== 'all' && !this.ins.singleSelect && this.ins.isGetAllChidlNodes &&\r\n                                    (this.ins.cascadeStatus === 'enable' || this.ins.cascadeStatus === 'down') ) {\r\n                                    const rn = tt.findRowNode(tn.id);\r\n                                    tt.propagateSelectionDown(rn, rn.isChecked);\r\n\r\n                                    // æ´æ°éä¸­è®°å½ç¼å­\r\n                                    const _items = data.items.filter(n => !n.addtional);\r\n                                    if (_items && _items.length) {\r\n                                        this.ins.lookupSelectionSer.updateSelections(_items.map(n => n.data), rn.isChecked);\r\n                                    }\r\n                                }\r\n                            }\r\n                            tn['showLoading'] = false;\r\n                            tt.detectChanges();\r\n                            tt.psRef.directiveRef.update();\r\n                            this.ins.selectionMgr.selectCurrentValue();\r\n                        }\r\n                    });\r\n                }\r\n            } else {\r\n                if (!this.ins.singleSelect && this.ins.enableCascade &&\r\n                        (this.ins.cascadeStatus === 'enable' || this.ins.cascadeStatus === 'down') && this.ins.isGetAllChidlNodes ) {\r\n                    const rn = tt.findRowNode(tn.id);\r\n                    tt.propagateSelectionDown(rn, rn.isChecked);\r\n                    const selectItems = tn.children.filter(n => n.selectable).map(n => n.data);\r\n                    this.ins.lookupSelectionSer.updateSelections(selectItems, rn.isChecked);\r\n                }\r\n                // this.ins.selectionMgr.selectCurrentValue();\r\n            }\r\n        });\r\n\r\n        if (loadAllData && this.ins.items) {\r\n            this.ins.treeNodeHelper.updateTreeNodeExpanded(this.ins.items);\r\n        }\r\n        return loadAllData;\r\n    }\r\n\r\n    cascadeValueChanged($event) {\r\n        const val = $event;\r\n        // const tt = this.ins.componentRef.instance as TreeTableComponent;\r\n        const instanceTyp = this.ins.activeTab === 'datalist' ? 'treetable' : 'fav';\r\n        const tt = this.ins.lookupCmpMgr.getComponentInstance(instanceTyp) as TreeTableComponent;\r\n\r\n        if (!tt) {\r\n            return;\r\n        }\r\n\r\n        switch (val) {\r\n            case 'enable':\r\n                tt.cascadeCheck = true;\r\n                tt.cascadeDown = true;\r\n                tt.cascadeUp = true;\r\n                break;\r\n            case 'disable':\r\n                tt.cascadeCheck = false;\r\n                tt.cascadeDown = false;\r\n                tt.cascadeUp = false;\r\n                break;\r\n            case 'up':\r\n                tt.cascadeCheck = true;\r\n                tt.cascadeUp = true;\r\n                tt.cascadeDown = false;\r\n                break;\r\n            case 'down':\r\n                tt.cascadeCheck = true;\r\n                tt.cascadeDown = true;\r\n                tt.cascadeUp = false;\r\n                break;\r\n            default:\r\n                tt.cascadeCheck = true;\r\n                tt.cascadeDown = true;\r\n                tt.cascadeUp = true;\r\n                break;\r\n        }\r\n\r\n        this.ins.cascadeStatus = val || 'enable';\r\n    }\r\n\r\n}\r\n","import { TreeTableComponent } from '@farris/ui-treetable';\r\nimport { FavoriteIcon, FAVORITE_FIELD_NAME } from '../lookup-displaytype';\r\nimport { LookupGridComponent } from '../lookup-grid.component';\r\nimport { cloneDeep } from 'lodash-es';\r\nimport { DataTableComponent } from '@farris/ui-datatable';\r\n\r\nexport class MultiSelectionManager {\r\n    constructor(private ins: LookupGridComponent) {}\r\n\r\n    onSelectedTableCellClick(e: any) {\r\n        if (e.col.field === FAVORITE_FIELD_NAME) {\r\n            e.event.stopPropagation();\r\n            const classList = e.event.target['classList'];\r\n            if (classList.contains('f-lookup-unfavorite')) {\r\n                const rid =  e.row[this.ins.idField];\r\n                this.ins.lookupSelectionSer.unSelect(rid);\r\n                // åæ¶éä¸­ ä¸»åè¡¨ æ¶èåè¡¨ ä¸­çæ°æ®\r\n                if (this.ins.isTree()) {\r\n                    const tt = this.ins.lookupCmpMgr.getComponentInstance('treetable') as TreeTableComponent;\r\n                    tt.unCheckedNode(rid);\r\n                    tt.unSelectNode(rid);\r\n\r\n                    if (this.ins.useFavorite) {\r\n                        const _tt = this.ins.lookupCmpMgr.getComponentInstance('fav') as TreeTableComponent;\r\n                        if (_tt.data && _tt.data.length && _tt.findRowNode(rid)) {\r\n                            _tt.unCheckedNode(rid);\r\n                            _tt.unSelectNode(rid);\r\n                        }\r\n                    }\r\n\r\n                } else {\r\n                    const dt = this.ins.lookupCmpMgr.getComponentInstance() as DataTableComponent;\r\n                    dt.unCheckRow(rid);\r\n                    if (this.ins.useFavorite) {\r\n                        const _dt = this.ins.lookupCmpMgr.getComponentInstance('fav') as DataTableComponent;\r\n                        if (_dt.data && _dt.data.length) {\r\n                            _dt.unCheckRow(rid);\r\n                        }\r\n                    }\r\n                }\r\n\r\n\r\n            }\r\n        }\r\n    }\r\n\r\n    // åå§åå·²éæ°æ®åä¿¡æ¯\r\n    initSelectedColumns() {\r\n        let selectedColumns = [];\r\n        if (this.ins.showSelected && !this.ins.singleSelect) {\r\n            selectedColumns = cloneDeep(this.ins.gridOptions.columns);\r\n            const favcol = selectedColumns.find(n => n.field === FAVORITE_FIELD_NAME);\r\n            if (favcol) {\r\n                favcol.formatter = () => {\r\n                    return FavoriteIcon.remove;\r\n                };\r\n            } else {\r\n                selectedColumns = selectedColumns.concat([\r\n                    { field: FAVORITE_FIELD_NAME, width: 80, formatter: () => {\r\n                            return FavoriteIcon.remove;\r\n                        }\r\n                    }\r\n                ]);\r\n            }\r\n        }\r\n\r\n        return selectedColumns;\r\n    }\r\n\r\n    updateSelections(data) {\r\n        if (Array.isArray(data)) {\r\n            this.ins.lookupSelectionSer.updateSelections(data, true);\r\n        } else {\r\n            this.ins.lookupSelectionSer.select(data);\r\n        }\r\n    }\r\n\r\n    remove(id: any) {\r\n        if (id) {\r\n            this.ins.lookupSelectionSer.unSelect(id);\r\n        }\r\n    }\r\n\r\n\r\n    clear() {\r\n        this.ins.lookupSelectionSer.clearSelections();\r\n    }\r\n\r\n    save(rows: any) {\r\n        if (this.ins.showSelected) {\r\n            this.ins.personalConf.selections = rows;\r\n            this.ins.personalConfigService.savePersonalConfig(this.ins.personalConf);\r\n        }\r\n    }\r\n\r\n    loadData() {\r\n        let items = this.ins.personalConf ? (this.ins.personalConf.selections || []) : [];\r\n        if (!items.length) {\r\n            items = this.ins.lookupSelectionSer.getSelections();\r\n        }\r\n        this.ins.lookupSelectionSer.loadSelections(items);\r\n    }\r\n}\r\n","import { RemoteParams, SearchParam, UserFavoriteData } from '../http/RemoteParams';\r\nimport { LOAD_DATA_TYPE } from '../lookup-grid-options';\r\nimport { LookupGridComponent } from '../lookup-grid.component';\r\nimport { cloneDeep } from 'lodash-es';\r\nimport { FavoriteAction, LookupGridDisplayType } from '../lookup-displaytype';\r\nimport { Observable, of, forkJoin } from 'rxjs';\r\nimport { map, switchMap, tap, debounceTime } from 'rxjs/operators';\r\n\r\n// å¸®å©é»è®¤ä¸ªæ§åæ°æ®\r\nconst DefaultUserConfig = {\r\n    tabIndex: 'datalist',\r\n    favorite: null,\r\n    size: null\r\n};\r\nexport class LookupHttpManager {\r\n    // æ¯æ¬¡å¸®å©æå¼åï¼æ´æ°æ­¤å¼ï¼åä¸ºä¸ªæ§åæ°æ®çåå§å¼ï¼\r\n    // å³é­çªå£æ¶ï¼ä¸æ­¤è¿è¡å¯¹æ¯ãå¦æä¸æ ·ï¼åä¸ä¿å­ï¼\r\n    private _originalPersonalConfig = DefaultUserConfig;\r\n\r\n    constructor(private ins: LookupGridComponent) { }\r\n\r\n    private disablePagination() {\r\n        return {\r\n            pageIndex: 1,\r\n            pageSize: 500\r\n        };\r\n    }\r\n\r\n    /** æé æ¥è¯¢åæ° */\r\n    buildQueryParams(event?: any, type: LOAD_DATA_TYPE = 'all') {\r\n        const params: RemoteParams = {};\r\n\r\n        if (this.ins.condition) {\r\n            params.condition = cloneDeep(this.ins.condition);\r\n        }\r\n\r\n        const searchParam: SearchParam = { category: type };\r\n\r\n        if (type !== 'fav') {\r\n            if (this.ins.isDoublleList() && this.ins.navigationFilter && type !== 'all') {\r\n                if (this.ins.navigationFilter.idValue && type !== 'textchange') {\r\n                    params.relationFilter = [...this.ins.navigationFilter.idValue];\r\n                }\r\n            }\r\n        }\r\n        if (event) {\r\n\r\n            if (type === 'fav' || type === 'selected') {\r\n                event.pageInfo = this.disablePagination();\r\n            }\r\n\r\n\r\n            if (event.pageInfo) {\r\n                params.pageIndex = event.pageInfo.pageIndex;\r\n                params.pageSize = event.pageInfo.pageSize;\r\n            }\r\n\r\n            if (event.search) {\r\n                let sfield = event.search.field;\r\n                if (sfield && sfield === '*') {\r\n                    sfield = '*';\r\n                }\r\n\r\n                if (event.search.value) {\r\n                    event.search.value = event.search.value.trim();\r\n                }\r\n\r\n                searchParam.searchField = sfield;\r\n                searchParam.searchValue = event.search.value;\r\n                searchParam.searchType =  event.search.type || 'like';\r\n\r\n                if (event.search.value === '' &&  searchParam.category === 'search') {\r\n                    searchParam.category = 'all';\r\n                }\r\n            }\r\n\r\n            if (event.sortName) {\r\n                searchParam.sortName = event.sortName;\r\n            }\r\n            if (event.sortOrder) {\r\n                searchParam.sortOrder = event.sortOrder;\r\n            }\r\n        }\r\n\r\n        if (type === 'fav' && event.favoriteIds) {\r\n            searchParam.favoriteIds = event.favoriteIds;\r\n        }\r\n\r\n        if (this.ins.isTree() || this.ins.displayType === LookupGridDisplayType.NavTreeList) {\r\n            params.enableFullTree = this.ins.enableFullTree;\r\n        }\r\n\r\n        // æ¥è¯¢æ¶ä¸æé å®æ´æ \r\n        if (type === 'textchange') {\r\n            params.enableFullTree = false;\r\n        }\r\n\r\n        if (type === 'selected') {\r\n            searchParam.category = 'fav';\r\n            params.enableFullTree = false;\r\n            searchParam.favoriteIds = event.favoriteIds;\r\n        }\r\n\r\n        params.searchValue = JSON.stringify(searchParam);\r\n        params.loadTreeDataType = this.ins.loadTreeDataType;\r\n\r\n        params.customData = this.ins.customData;\r\n\r\n        if (this.ins.helpId) {\r\n            params.helpId = this.ins.helpId;\r\n        }\r\n\r\n        if (event.selectedInfo) {\r\n            params.selectedInfo = event.selectedInfo;\r\n        }\r\n\r\n\r\n        return params;\r\n    }\r\n\r\n\r\n    getData(event?: any, type: LOAD_DATA_TYPE = 'all'): Observable<any> {\r\n        const uri = this.ins.gridOptions.uri;\r\n\r\n        if (this.ins.isDoublleList() &&  this.ins.navigationFilter && this.ins.navigationFilter.idValue && type !== 'fav') {\r\n            type = 'list';\r\n        }\r\n\r\n        const params = this.buildQueryParams(event, type);\r\n\r\n        if (uri || this.ins.beUri) {\r\n            if (this.ins.beUri && this.ins.columns && this.ins.columns.length) {\r\n                const allSearchFields = this.ins.columns.map(col => col.searchField).filter(f => f);\r\n                if (!params.condition) {\r\n                    params.condition = {};\r\n                }\r\n\r\n                if (!this.ins.isTree() && this.ins.pagination) {\r\n                    const { pageSize = this.ins.pageSize || 20, pageIndex } = { ...params };\r\n                    params.condition.pagination = { pageSize, pageIndex };\r\n                } else {\r\n                    params.condition.pagination = { isUsePagination: false };\r\n                }\r\n                const searchParam = JSON.parse(params.searchValue);\r\n                if (searchParam.searchValue) {\r\n                    params.condition = this.ins.lookupUtils.mergeCondition(params.condition, allSearchFields, {\r\n                        field: searchParam.searchField,\r\n                        value: searchParam.searchValue\r\n                    });\r\n                }\r\n            }\r\n\r\n            const _uri = this.ins.beUri || uri;\r\n\r\n            if (this.ins.http) {\r\n                this.ins.http.context = this.ins.context;\r\n            }\r\n            if (this.ins._searchResult) {\r\n                return of(this.ins._searchResult);\r\n            }\r\n\r\n            if (type !== 'allChildren') {\r\n                return this.ins.http.getData(_uri, params);\r\n            } else {\r\n                const params1 = {\r\n                    searchValue: JSON.stringify({ category: type }),\r\n                    parentsIds: event.parentsIds,\r\n                    customData: params.customData,\r\n                    helpId: params.helpId\r\n                };\r\n                return this.ins.http.getData(_uri, params1);\r\n            }\r\n        } else {\r\n            return of(false);\r\n        }\r\n    }\r\n\r\n    // getFavoriteData(params) {\r\n    //     return this.getData(params, 'fav');\r\n    // }\r\n\r\n    getSelecedItems(selIds: any[]) {\r\n        return this.getData({ favoriteIds: selIds }, 'selected');\r\n    }\r\n\r\n    getPersonalConfig() {\r\n        const defaultConf = cloneDeep(DefaultUserConfig);\r\n        const key = this.ins.personalConfigService._newKey;\r\n        let _conf = this.ins.personalConfigService.getPersonalData(key);\r\n\r\n        if (!_conf || !Object.keys(_conf).length) {\r\n            _conf = defaultConf;\r\n        }\r\n        const req = of(_conf);\r\n\r\n        if (this.ins.favoriteDataFrom === 'locale' || this.ins.isTabChanged) {\r\n            return req;\r\n        }\r\n\r\n        if (this.ins.http && this.ins.http['getUserSettings']) {\r\n            return this.ins.http['getUserSettings'](key).pipe(\r\n                map((ucs: any) => {\r\n                    if (ucs) {\r\n                        return ucs.textValue ? JSON.parse(ucs.textValue) : defaultConf;\r\n                    }\r\n                    return defaultConf;\r\n                })\r\n            );\r\n        } else {\r\n            return req;\r\n        }\r\n    }\r\n\r\n    lookupRequest(event?: any, type: LOAD_DATA_TYPE = 'all') {\r\n        if (!this.ins.usePersionalConf) {\r\n            return this.getData(event, type);\r\n        }\r\n\r\n        const req = this.getPersonalConfig();\r\n\r\n        return req.pipe(\r\n            tap((c: any) => {\r\n                this.ins.personalConf = c;\r\n                this.ins.personalConfigService.savePersonalConfig(c);\r\n                if (!this.ins.isTabChanged) {\r\n                    this._originalPersonalConfig = cloneDeep(c);\r\n                }\r\n            }),\r\n            switchMap((c: any) => {\r\n                const { tabIndex, favorite, size } = c;\r\n\r\n                if (!this.ins.isTabChanged) {\r\n                    this.ins.activeTab = tabIndex || 'datalist';\r\n                }\r\n\r\n                if (size) {\r\n                    this.ins.dialogWidth = size.width;\r\n                    this.ins.dialogHeight = size.height;\r\n                    this.ins.dialog.reSize({ width: size.width, height: size.height });\r\n                }\r\n\r\n                if (this.ins.activeTab === 'datalist') {\r\n                    return this.getData(event, type);\r\n                } else if (this.ins.activeTab === 'favorite') {\r\n                    const favIds = favorite ? favorite[this.ins.localService.localeId] : [];\r\n                    if ((!favIds || !favIds.length) && !this.ins.isTabChanged) {\r\n                        return this.getData(event, 'all').pipe(\r\n                            map(r => {\r\n                                if (r && !r.items) {\r\n                                    r.items = [];\r\n                                }\r\n\r\n                                r.activeTab = 'datalist';\r\n                                return r;\r\n                            })\r\n                        );\r\n                    }\r\n\r\n                    // const _fids = favIds.filter(n => n);\r\n                    event.favoriteIds = favIds;\r\n                    return this.getData(event, 'fav').pipe(\r\n                        switchMap(r => {\r\n                            if (r && !r.items) {\r\n                                r.items = [];\r\n                            }\r\n\r\n                            if (!r.items.length) {\r\n                                return this.getData(event, 'all').pipe(\r\n                                    map(a => {\r\n                                        if (a && !a.items) {\r\n                                            a.items = [];\r\n                                        }\r\n        \r\n                                        a.activeTab = 'datalist';\r\n                                        return a;\r\n                                    })\r\n                                );\r\n                            } else {\r\n                                return of(r);\r\n                            }\r\n                        })\r\n                    );\r\n                } else if (this.ins.activeTab === 'selected') {\r\n                    const selIds = this.ins.displayValue ? this.ins.displayValue.split(',') : [];\r\n                    const _sids = selIds.filter(n => n);\r\n                    return this.getSelecedItems(_sids);\r\n                }\r\n            })\r\n        );\r\n    }\r\n\r\n    // ä¿å­ä¸ªæ§åæ°æ®\r\n    submitFavoriteData(action: any | FavoriteAction) {\r\n        // å¦ææ°æ®ä¸é»è®¤çæ°æ®ä¸è³åä¸ä¿å­ã\r\n        if (JSON.stringify(this.ins.personalConf) === JSON.stringify(this._originalPersonalConfig)) {\r\n            return;\r\n        }\r\n\r\n        let msg = '';\r\n        if (action === FavoriteAction.add) {\r\n            msg = this.ins.addFavoriteSuccess;\r\n        } else if (action === FavoriteAction.delete) {\r\n            msg = this.ins.delFavoriteSuccess;\r\n        }\r\n\r\n        this.ins.personalConfigService.savePersonalConfig(this.ins.personalConf || {});\r\n\r\n        if (this.ins.favoriteDataFrom !== 'locale') {\r\n            this._originalPersonalConfig = cloneDeep(this.ins.personalConf);\r\n\r\n            const configData: UserFavoriteData = {\r\n                configkey1: this.ins.personalConfigService.personalConfigKey,\r\n                configkey2: '',\r\n                configkey3: '',\r\n                textvalue: JSON.stringify(this.ins.personalConf)\r\n            };\r\n\r\n            if (this.ins.http && this.ins.http['saveUserSettings']) {\r\n                this.ins.savingFaoriteData = true;\r\n                this.ins.showLoading();\r\n                return this.ins.http['saveUserSettings'](configData).subscribe((r) => {\r\n                    this.ins.savingFaoriteData = false;\r\n                    this.ins.closeLoading();\r\n                    if (msg) {\r\n                        this.ins.notifyService.success(msg);\r\n                    }\r\n                });\r\n            } else {\r\n                if (msg) {\r\n                    this.ins.notifyService.success(msg);\r\n                }\r\n            }\r\n        } else {\r\n            if (msg) {\r\n                this.ins.notifyService.success(msg);\r\n            }\r\n        }\r\n    }\r\n\r\n}\r\n","/*\r\n* @Author: ç¯çç§æ(Lucas Huang)\r\n* @Date: 2018-12-14 14:40:48\r\n * @LastEditors: ç¯çç§æ(Lucas Huang)\r\n * @LastEditTime: 2019-09-25 18:10:29\r\n* @Company: Inspur\r\n* @Version: v0.0.1\r\n*/\r\n\r\nimport { Component, OnInit, ViewChild, ViewContainerRef, EventEmitter, Output,\r\n    ComponentFactoryResolver, ComponentRef, ChangeDetectorRef, Injector, ReflectiveInjector\r\n} from '@angular/core';\r\nimport { Observable, of } from 'rxjs';\r\n\r\nimport { DataTableComponent } from '@farris/ui-datatable';\r\nimport { TreeTableComponent } from '@farris/ui-treetable';\r\n\r\nimport { LookupGridOptions, LookupGridResult } from './lookup-grid-options';\r\nimport { LookupGridComponent } from './lookup-grid.component';\r\n\r\n@Component({\r\n    selector: 'lookup-left',\r\n    templateUrl: './lookup-left.component.html'\r\n})\r\n\r\nexport class LookupLeftComponent implements OnInit {\r\n\r\n    cmpRef: ComponentRef<any>;\r\n    navOptions: LookupGridOptions;\r\n    lookupCmp: LookupGridComponent;\r\n\r\n\r\n    @ViewChild('container', {read: ViewContainerRef}) cmpContainer: ViewContainerRef;\r\n    @Output() selected = new EventEmitter<{ data: any}>();\r\n    @Output() unselected = new EventEmitter();\r\n    @Output() search = new EventEmitter<{ field: string, value: string }>();\r\n    @Output() pageChanged = new EventEmitter<{ pageInfo: {pageIndex: number, pageSize: number}, search: {field: string, value: string} }>();\r\n\r\n    private _searchState = null;\r\n    private allData = null;\r\n\r\n    constructor(private cfr: ComponentFactoryResolver, private cd: ChangeDetectorRef) { }\r\n\r\n    ngOnInit() {\r\n    }\r\n\r\n    createComponent(): Observable<any> {\r\n        let dtFac = null;\r\n        if (!this.isTreeList()) {\r\n            dtFac = this.cfr.resolveComponentFactory(DataTableComponent);\r\n        } else {\r\n            dtFac = this.cfr.resolveComponentFactory(TreeTableComponent);\r\n        }\r\n        this.navOptions['keepSelect'] = false;\r\n        // å·¦ä¾§æ¥è¯¢è¿æ»¤æ¡ï¼éèæï¼\r\n        this.navOptions['showFilterBar'] = true;\r\n        // if (this.navOptions.width) {\r\n        //     this.navOptions.width = this.navOptions.width - 2;\r\n        // }\r\n\r\n        this.navOptions.width = this.lookupCmp.leftPanelWidth - 2;\r\n\r\n        // const injector: Injector = ReflectiveInjector.resolveAndCreate([\r\n        //     { provide: DataTableService, useFactory: () => { new DataTableService()}}\r\n        // ]);\r\n\r\n        this.cmpRef = this.cmpContainer.createComponent(dtFac);\r\n\r\n        if (!this.isTreeList()) {\r\n            this.navOptions['fill'] = true;\r\n            this.cmpRef.instance.maxSize = 5;\r\n            this.cmpRef.instance.fill = true;\r\n        } else {\r\n            this.navOptions['fit'] = true;\r\n        }\r\n        // this.cmpRef.instance.fit = true;\r\n\r\n        if (this.navOptions.pageInfo) {\r\n            if (this.navOptions.pageInfo.pageList) {\r\n                this.navOptions.pageList = this.navOptions.pageInfo.pageList;\r\n            }\r\n            this.navOptions.pagination = this.navOptions.pageInfo.enablePager;\r\n            this.navOptions.pageIndex = this.navOptions.pageInfo.pageIndex;\r\n            this.navOptions.pageSize = this.navOptions.pageInfo.pageSize;\r\n        } else {\r\n            this.navOptions.pagination = false;\r\n        }\r\n\r\n        Object.assign(this.cmpRef.instance, this.navOptions);\r\n\r\n        this.loadData();\r\n        return of(this.cmpRef);\r\n    }\r\n\r\n    update() {\r\n        this.cd.detectChanges();\r\n    }\r\n\r\n    resize(size?: {width: number, height: number}) {\r\n        if (size) {\r\n            size.width = size.width - 2;\r\n            // if (this.cmpRef.instance instanceof TreeTableComponent) {\r\n            //     size.height += 46;\r\n            // }\r\n            this.cmpRef.instance.resize(size);\r\n        }\r\n    }\r\n\r\n    isTreeList() {\r\n        return this.navOptions.displayType.toLowerCase() === 'treelist';\r\n    }\r\n\r\n    private selectLeftDataTableRow(items: any, dt: DataTableComponent) {\r\n        if (items && items.length) {\r\n            let item = null;\r\n            if (this.lookupCmp.navSelectedIds) {\r\n                item = items.find(n => n[dt.idField] == this.lookupCmp.navSelectedIds);\r\n            } else {\r\n                if (this.lookupCmp.selectFirstInNav) {\r\n                    item = items[0];\r\n                }\r\n            }\r\n\r\n            if (item) {\r\n                dt.dtBody.selectedRowIndex = -1;\r\n                dt.dtBody.selectedRow('', 0, item);\r\n            }\r\n        }\r\n    }\r\n\r\n    private closeLoading() {\r\n        this.lookupCmp.closeLoading();\r\n    }\r\n\r\n    private initDataTable(dt: DataTableComponent) {\r\n        dt.loadData({\r\n            pageSize: this.navOptions.pageSize,\r\n            pageIndex: this.navOptions.pageIndex,\r\n            total: this.navOptions.total,\r\n            data: this.navOptions.items,\r\n        });\r\n\r\n        dt.resize({ width: 320, height: this.navOptions.height});\r\n        // è¡éä¸­\r\n        dt.selectedRow.subscribe(d => {\r\n            this.selected.emit({ data: d.data });\r\n        });\r\n\r\n        dt.unSelectRow.subscribe(d => {\r\n            this.selected.emit(null);\r\n        });\r\n\r\n        const p = { pageInfo: { pageIndex: 1, pageSize: this.navOptions.pageSize }, search: '' };\r\n\r\n\r\n        const loadTableData = {\r\n            next: (data: LookupGridResult) => {\r\n                this.closeLoading();\r\n                dataTableReLoad(data);\r\n            },\r\n            error: (err) => {\r\n                this.closeLoading();\r\n            }\r\n        };\r\n\r\n        // æ¥è¯¢\r\n        dt.search.subscribe( searchData => {\r\n            this._searchState = searchData;\r\n            this.search.emit(searchData);\r\n            p.search = searchData;\r\n            p.pageInfo.pageSize = dt.pageSize;\r\n            this.lookupCmp.navigationFilter = null;\r\n            this.lookupCmp.httpMgr.getData(p, 'navsearch').subscribe(loadTableData);\r\n        });\r\n\r\n        const dataTableReLoad = (data) => {\r\n            dt.loadData({\r\n                pageSize: data.pageInfo.pageSize,\r\n                pageIndex: data.pageInfo.pageIndex,\r\n                total: data.total,\r\n                data: data.items,\r\n            });\r\n\r\n            this.selectLeftDataTableRow(data.items, dt);\r\n            dt.cd.markForCheck();\r\n        };\r\n\r\n        // åé¡µ\r\n        dt.pageChanged.subscribe(d => {\r\n            this.pageChanged.emit(d);\r\n            this.lookupCmp.navigationFilter = null;\r\n            this.lookupCmp.httpMgr.getData(d, 'navsearch').subscribe(loadTableData);\r\n        });\r\n\r\n        dt.pageSizeChanged.subscribe((e) => {\r\n            this.lookupCmp.navigationFilter = null;\r\n            this.lookupCmp.httpMgr.getData(e, 'navsearch').subscribe(loadTableData);\r\n        });\r\n\r\n        dt.columnSorted.subscribe( (sort: {sortName: string, sortOrder: any}) => {\r\n            const { sortName, sortOrder } = {...sort};\r\n            this.lookupCmp.navigationFilter = null;\r\n            const param = Object.assign({ sortName, sortOrder }, this._searchState);\r\n            this.lookupCmp.httpMgr.getData(param, 'navsearch').subscribe(loadTableData);\r\n        });\r\n\r\n        dt.clearSearchValue.subscribe( () => {\r\n            this._searchState = null;\r\n        });\r\n\r\n        this.selectLeftDataTableRow(this.navOptions.items, dt);\r\n    }\r\n\r\n    private initTreeTable(tt: TreeTableComponent) {\r\n        tt.virtualized = true;\r\n        tt.nodeSelected.subscribe(d => {\r\n            this.selected.emit({data: d.node.data});\r\n        });\r\n\r\n        tt.nodeUnSelect.subscribe(d => {\r\n            this.selected.emit(null);\r\n        });\r\n\r\n        tt.fixedHeader = true;\r\n\r\n        // tt.fit = true;\r\n        this.lookupCmp.treeNodeHelper.updateTreeNodeExpanded(this.navOptions.items, this.navOptions.treeInfo);\r\n\r\n        tt.loadDataType = this.navOptions.treeInfo.loadDataType;\r\n        // æ£æ¥å®æ´æ è¿æ»¤æ¡ä»¶ By Lucas 20200302\r\n        this.navOptions.items = this.lookupCmp.checkNodeCanBeSelect(this.navOptions.items, this.navOptions.treeInfo.loadDataType === 'all');\r\n        tt.loadData(this.navOptions.items);\r\n\r\n        if (this.lookupCmp.navSelectedIds) {\r\n            tt.selectNode(this.lookupCmp.navSelectedIds);\r\n        } else if (this.lookupCmp.selectFirstInNav) {\r\n            tt.selectFirstNode();\r\n        }\r\n\r\n        this.allData = this.navOptions.items;\r\n\r\n        const loadTreeData = {\r\n            next: (resData: any) => {\r\n                this.closeLoading();\r\n                tt.clearAll();\r\n                const items = this.lookupCmp.checkNodeCanBeSelect(resData.items, this.navOptions.treeInfo.loadDataType === 'all');\r\n                tt.loadData(items);\r\n                tt.resize();\r\n            },\r\n            error: (err) => {\r\n                this.closeLoading();\r\n            }\r\n        };\r\n\r\n\r\n        tt.search.subscribe(search => {\r\n            this._searchState = search;\r\n            this.lookupCmp.navigationFilter = null;\r\n            this.lookupCmp.httpMgr.getData({ search }, 'navsearch').subscribe(loadTreeData);\r\n        });\r\n\r\n        tt.columnSorted.subscribe( (sort: {sortName: string, sortOrder: any}) => {\r\n            this.lookupCmp.navigationFilter = null;\r\n            if (tt.loadDataType === 'all') {\r\n                tt.clientSort();\r\n            } else {\r\n                const { sortName, sortOrder } = {...sort};\r\n\r\n                const param = Object.assign({ sortName, sortOrder }, this._searchState);\r\n                this.lookupCmp.httpMgr.getData(param, 'nav').subscribe(loadTreeData);\r\n            }\r\n        });\r\n\r\n        tt.clearSearchValue.subscribe( () => {\r\n            this._searchState = null;\r\n            tt.loadData(this.allData);\r\n        });\r\n\r\n\r\n        tt.expand.subscribe((tn: any) => {\r\n            this.onNodeExpanded(tn, tt);\r\n        });\r\n    }\r\n\r\n\r\n    private onNodeExpanded(tn: any, tt) {\r\n        if (tn.leaf) {\r\n            return;\r\n        }\r\n        if (!tn.children || !tn.children.length) {\r\n            const treeInfo = this.navOptions.treeInfo;\r\n            if (this.navOptions.treeInfo.loadDataType === 'async') {\r\n                let parentPath = '';\r\n                let parentLayer = -1;\r\n                const { field = '*', value = '' } = {\r\n                    ...tt.searchData\r\n                };\r\n\r\n                tn['showLoading'] = true;\r\n                tt.detectChanges();\r\n                if (treeInfo.layerType === 'parentId') {\r\n                    // ç¶IDå è½½æ¹å¼\r\n                    parentPath = tn['id'];\r\n                } else {\r\n                    const treeInfoField = treeInfo.dataField;\r\n                    if (treeInfoField) {\r\n                        parentPath = tn.data[treeInfoField][treeInfo.pathField];\r\n                        parentLayer = tn.data[treeInfoField][treeInfo.layerField];\r\n                    } else {\r\n                        console.log('æªæ¾å°åçº§ä¿¡æ¯ã');\r\n                    }\r\n                }\r\n\r\n                if (!this.lookupCmp.uri) {\r\n                    this.lookupCmp.expandTreeNode.emit({\r\n                        instance: tt, node: tn,\r\n                        parentIdOrPath: parentPath, parentLayer, search: { value, field }\r\n                    });\r\n\r\n                    return;\r\n                }\r\n                this.getChildren(\r\n                    parentPath, parentLayer, {searchField: field === '*' ? '*' : field, searchValue: value}, tt\r\n                ).subscribe(data => {\r\n                    if (tt) {\r\n                        if (tn && data.items && data.items.length) {\r\n                            tt.appendChildren(data.items, tn);\r\n                        }\r\n                        tn['showLoading'] = false;\r\n                        tt.detectChanges();\r\n                    }\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    private getChildren( parentPath, parentLayer, searchData: { searchField: string; searchValue: string }, tt ): Observable<any> {\r\n        const uri = this.lookupCmp.gridOptions.uri;\r\n        const search = { parentLayer, category: 'nav', ...searchData };\r\n        if (this.navOptions.treeInfo.layerType === 'parentId') {\r\n            search['parentId'] = parentPath;\r\n        } else {\r\n            search['parentPath'] = parentPath;\r\n        }\r\n\r\n        const param = {\r\n            searchValue: JSON.stringify(search),\r\n            customData: this.lookupCmp.customData,\r\n            enableFullTree: false,\r\n            loadTreeDataType: 'layerload'\r\n        };\r\n\r\n        if (this.lookupCmp.helpId) {\r\n            param['helpId'] = this.lookupCmp.helpId;\r\n        }\r\n\r\n        if (tt && tt.sortName) {\r\n            Object.assign(param, {\r\n                sortName: tt.sortName,\r\n                sortOrder: tt.sortOrder\r\n            });\r\n        }\r\n\r\n        return this.lookupCmp.http.getData(uri , param);\r\n    }\r\n\r\n\r\n    loadData() {\r\n        this.cmpRef.instance.allColumnsTitle = this.lookupCmp.allColumnsTitle;\r\n        if (!this.isTreeList()) {\r\n            const dt = this.cmpRef.instance as DataTableComponent;\r\n            this.initDataTable(dt);\r\n        } else {\r\n            const tt = this.cmpRef.instance as TreeTableComponent;\r\n            this.initTreeTable(tt);\r\n        }\r\n    }\r\n}\r\n","import { ComponentRef } from '@angular/core';\r\nimport { DataTableComponent } from '@farris/ui-datatable';\r\nimport { TreeNode, TreeTableComponent } from '@farris/ui-treetable';\r\nimport { of } from 'rxjs';\r\nimport { debounceTime, switchMap } from 'rxjs/operators';\r\nimport { ComponentInstanceType } from '../lookup-displaytype';\r\nimport { LookupGridComponent } from '../lookup-grid.component';\r\nimport { LookupLeftComponent } from '../lookup-left.component';\r\n\r\n\r\nexport class LookupComponentManager {\r\n    constructor(private ins: LookupGridComponent) {}\r\n\r\n    getComponentInstance(type: ComponentInstanceType = 'datatable') {\r\n        if (!this.ins.componentRef || !this.ins.componentRef.instance) {\r\n            return null;\r\n        }\r\n\r\n        if (type === 'selected') {\r\n            return this.ins.multiSelectDT;\r\n        }\r\n\r\n        let ins = this.ins.componentRef.instance;\r\n\r\n        if (type === 'leftDataTable' || type === 'leftTree') {\r\n            const leftRef = this.ins.leftComponentRef;\r\n            if (!leftRef || !leftRef.instance || !leftRef.instance.cmpRef || !leftRef.instance.cmpRef.instance) {\r\n                return null;\r\n            }\r\n            ins = this.ins.leftComponentRef.instance.cmpRef.instance;\r\n        }\r\n\r\n        if (type === 'fav') {\r\n            ins = this.ins.favoritesComponentRef.instance;\r\n        }\r\n\r\n        switch (type) {\r\n            case 'leftDataTable':\r\n            case 'fav':\r\n            case 'datatable':\r\n                return ins as DataTableComponent;\r\n            case 'leftTree':\r\n            case 'treetable':\r\n                return ins as TreeTableComponent;\r\n            default:\r\n                if (this.ins.isTree()) {\r\n                    return ins as TreeTableComponent;\r\n                }\r\n                return ins as DataTableComponent;\r\n        }\r\n    }\r\n\r\n    createComponentWithServerData(data: any) {\r\n        if (this.ins.componentRef) {\r\n            return;\r\n        }\r\n        this.ins.idField = data.idField || this.ins.idField;\r\n        this.ins.textField = data.textField || this.ins.textField;\r\n        this.ins.valueField = data.valueField || this.ins.valueField;\r\n\r\n        this.ins.displayType = (data && data.displayType) || this.ins.displayType || 'LIST';\r\n        this.ins.componentRef = this.createContent(this.ins.gridOptions);\r\n        this.createFavoriteComponent();\r\n\r\n        this.resizeComponent();\r\n    }\r\n\r\n\r\n    createFavoriteComponent() {\r\n        if (this.ins.useFavorite && !this.ins.favoritesComponentRef) {\r\n            this.ins.favoriteColumns = this.ins.favHelper.getFavoriteColumns();\r\n            const favoritesOptions = Object.assign({}, this.ins.gridOptions, {\r\n                showFilterBar: false,\r\n                pagination: false,\r\n                columns: this.ins.favoriteColumns || []\r\n            });\r\n            this.ins.favoritesComponentRef = this.createFavoritesContent(favoritesOptions);\r\n\r\n            this.resizeComponent('fav');\r\n        }\r\n    }\r\n\r\n\r\n    private reloadTreeDataForExpand(expandLevel) {\r\n        const uri = this.ins.gridOptions.uri;\r\n        const tt = this.ins.componentRef.instance as TreeTableComponent;\r\n        const { field = '*', value = '' } = {\r\n            ...tt.searchData\r\n        };\r\n        const search = { category: 'all', searchValue: value, searchField: field, layerNum: expandLevel };\r\n\r\n\r\n        const param = {\r\n            searchValue: JSON.stringify(search),\r\n            customData: this.ins.customData,\r\n            enableFullTree: this.ins.enableFullTree,\r\n            loadTreeDataType: this.ins.loadTreeDataType\r\n        };\r\n\r\n\r\n        if (this.ins.helpId) {\r\n            param['helpId'] = this.ins.helpId;\r\n        }\r\n\r\n        if (tt && tt.sortName) {\r\n            Object.assign(param, {\r\n                sortName: tt.sortName,\r\n                sortOrder: tt.sortOrder\r\n            });\r\n        }\r\n        this.ins.showLoading();\r\n        return this.ins.http.getData(uri, param).subscribe((data: any) => {\r\n            this.ins.closeLoading();\r\n            const nodes = this.ins.checkNodeCanBeSelect(data.items, expandLevel === -1);\r\n            this.ins.items = nodes;\r\n            tt.loadData(nodes);\r\n        });\r\n    }\r\n\r\n    private setTreeNodeExpandBy(nodes: TreeNode[], level) {\r\n        if (!nodes || !nodes.length) {\r\n            return;\r\n        }\r\n        nodes.forEach((n: TreeNode) => {\r\n            const layer = n.data[this.ins.treeInfo.dataField].layer;\r\n\r\n            const expandLayer = layer + level - 1;\r\n\r\n            n.expanded = layer <= expandLayer ? true : n.expanded;\r\n            if (n.children && n.children.length && layer + 1 <= expandLayer) {\r\n                this.setTreeNodeExpandBy(n.children, level);\r\n            }\r\n        });\r\n    }\r\n\r\n    // å¯ç¨æ å¸®å©å³é®èååè½\r\n    private useContextMenuForTree(cmpRef: ComponentRef<any>) {\r\n        const { maxLevel, enableContextMenu, language } = this.ins.treeTableOptions;\r\n        if (enableContextMenu && maxLevel) {\r\n            const levelMenus = [];\r\n            for (let i = 1; i <= maxLevel; i++) {\r\n                const title = language['expand' + i];\r\n                levelMenus.push({ id: 30 + 1, code: i, title, handle: (t) => {\r\n                    // åéè¯·æ±è·åæ°æ®\r\n                    const level = t.menu.code;\r\n                    if (isLoadAllTreeData() ) {\r\n                        this.setTreeNodeExpandBy(this.ins.items, level);\r\n                        cmpRef.instance.updateSerializedValue();\r\n                    } else {\r\n                        const { dataField, layerField } = this.ins.treeInfo;\r\n                        const firstNodeData = (this.ins.items || [])[0];\r\n                        if (firstNodeData && firstNodeData.data) {\r\n                            const minLayer = this.ins.utils.getValue(`${dataField}.${layerField}`, firstNodeData.data);\r\n                            let _level = minLayer + level - 1;\r\n                            this.reloadTreeDataForExpand(_level);\r\n                        }\r\n                    }\r\n                } });\r\n            }\r\n\r\n            const isLoadAllTreeData = () => {\r\n                if (this.ins.loadTreeDataType === 'default') {\r\n                    return cmpRef.instance.loadDataType === 'all';\r\n                } else {\r\n                    return this.ins.loadTreeDataType === 'loadall';\r\n                }\r\n            };\r\n\r\n            const contextMenus = [\r\n                {\r\n                    id: 1, code: 'expandall', title: language.expandall, handle: (t) => {\r\n                        if (cmpRef && isLoadAllTreeData()) {\r\n                            cmpRef.instance.expandAll();\r\n                        } else {\r\n                            // åéè¯·æ±è·åæ°æ®\r\n                            this.reloadTreeDataForExpand(-1);\r\n                        }\r\n                    }\r\n                },\r\n                { id: 2, code: 'collapseall', title: language.collapseall, handle: (t) => {\r\n                    if (cmpRef) {\r\n                        cmpRef.instance.collapseAll();\r\n                    }\r\n                } },\r\n                '-',\r\n                {\r\n                    id: 3, title: language.expandByLayer,\r\n                    children: levelMenus\r\n                }\r\n            ];\r\n            this.ins.treeTableOptions.contextMenuItems = contextMenus;\r\n\r\n            cmpRef.instance.beforeShowContextMenu = () => {\r\n                return of({show: !cmpRef.instance.state.searched});\r\n            };\r\n        }\r\n    }\r\n\r\n\r\n    createContent(opts: any): ComponentRef<any> {\r\n\r\n        if (this.ins.componentRef) {\r\n            return;\r\n        }\r\n\r\n        const type = this.ins.getComponentType();\r\n\r\n        const dtFac = this.ins.cfr.resolveComponentFactory(type);\r\n        let cmpRef: ComponentRef<any> = null;\r\n        if (this.ins.isDoublleList()) {\r\n            cmpRef = this.ins.centerContainer.createComponent(dtFac);\r\n        } else {\r\n            cmpRef = this.ins.contentContainer.createComponent(dtFac);\r\n        }\r\n\r\n        if (this.ins.isTree()) {\r\n            opts.fit = true;\r\n            opts.pagination = false;\r\n            if (this.ins.useFavorite) {\r\n                opts.fitColumns = false;\r\n                opts.autoFitColumns = true;\r\n            }\r\n\r\n            this.useContextMenuForTree(cmpRef);\r\n        } else {\r\n            opts.fill = true;\r\n        }\r\n\r\n        const ttOpts = this.ins.treeTableOptions || {};\r\n        Object.assign(cmpRef.instance, opts, { allColumnsTitle: this.ins.allColumnsTitle, ...ttOpts });\r\n\r\n        this.ins.componentRef = cmpRef;\r\n        this.resizeComponent();\r\n        return cmpRef;\r\n    }\r\n\r\n    // åå»ºæ¶èCMP\r\n    createFavoritesContent(opts: any): ComponentRef<any> {\r\n\r\n        const type = this.ins.getComponentType();\r\n\r\n        const dtFac = this.ins.cfr.resolveComponentFactory(type);\r\n        let cmpRef = null;\r\n        cmpRef = this.ins.favoritesContainer.createComponent(dtFac);\r\n\r\n        if (this.ins.isTree()) {\r\n            opts.fit = true;\r\n            opts.pagination = false;\r\n        } else {\r\n            opts.fill = true;\r\n        }\r\n\r\n        Object.assign(cmpRef.instance, opts, {\r\n            width: this.ins.dialog.size.width - 20,\r\n            height: this.ins.dialogMgr.getHeight()\r\n        });\r\n\r\n\r\n        // è®¢éæ¶èå¤¹åè¡¨ä¸­ç»ä»¶çç¸å³äºä»¶\r\n        this.ins.favHelper.initFavoriteComponentEvent(cmpRef);\r\n\r\n        return cmpRef;\r\n    }\r\n\r\n    resizeComponent(type: ComponentInstanceType = 'datatable') {\r\n        const size = {\r\n            width: this.ins.dialog.size.width - 20,\r\n            height: this.ins.dialogMgr.getHeight()\r\n        };\r\n\r\n        if (this.ins.isDoublleList() && (type === 'datatable' || type === 'treetable')) {\r\n            size.width = this.ins.dialog.size.width - this.ins.leftPanelWidth - 27;\r\n        }\r\n\r\n        this.getComponentInstance(type).resize(size);\r\n    }\r\n\r\n    /** åå»ºå·¦ä¾§ç»ä»¶ */\r\n    createLeftComponent(ops: any) {\r\n        let dtFac = null;\r\n        if (this.ins.isDoublleList()) {\r\n            dtFac = this.ins.cfr.resolveComponentFactory(LookupLeftComponent);\r\n        }\r\n        this.ins.leftComponentRef = this.ins.leftContainer.createComponent(dtFac);\r\n        ops.height = this.ins.dialogMgr.getHeight();\r\n\r\n        if (this.ins.dialogWidth < this.ins.navLookupDialogMinWidth) {\r\n            this.ins.dialogWidth = this.ins.navLookupDialogMinWidth;\r\n            this.ins.dialog.reSize({ width: this.ins.dialogWidth });\r\n            this.ins.resizeCmp({ width: this.ins.dialog.size.width });\r\n        }\r\n\r\n        if (ops.width !== this.ins.leftPanel.width) {\r\n            // é»è®¤ 1 : 2\r\n            this.ins.leftPanel.resize({\r\n                width: this.ins.leftPanel.width,\r\n                height: ops.height\r\n            });\r\n            this.ins.resizeCmp({ width: this.ins.dialog.size.width });\r\n        }\r\n\r\n        // this.resizeComponent();\r\n\r\n        this.ins.leftComponentRef.instance.lookupCmp = this.ins;\r\n        this.ins.leftComponentRef.instance.navOptions = ops;\r\n\r\n\r\n        this.ins.leftComponentRef.instance.selected\r\n            .pipe(\r\n                debounceTime(100),\r\n                switchMap((d: any) => {\r\n                    if (d && d.data) {\r\n                        this.ins.navigationFilter = {\r\n                            selected: d.data,\r\n                            idValue: this.getNavigationFilter(d.data),\r\n                            searchField: '',\r\n                            searchValue: ''\r\n                        };\r\n                    } else {\r\n                        this.ins.navigationFilter = undefined;\r\n                    }\r\n                    // å è½½å³ä¾§æ°æ®\r\n                    const p = {\r\n                        pageInfo: {\r\n                            pageIndex: this.ins.gridOptions.pageIndex,\r\n                            pageSize: this.ins.gridOptions.pageSize\r\n                        }\r\n                    };\r\n                    Object.assign(p, { search: this.ins._searchState });\r\n                    return this.ins.httpMgr.getData(p, 'list');\r\n                })\r\n            )\r\n            .subscribe(res => {\r\n                this.ins.closeLoading();\r\n                this.ins.loadDataWhenOpen = true;\r\n\r\n                if (this.ins.useFavorite && !this.ins.isTree()) {\r\n                    this.ins.favHelper.updateFavoritesStatus(res.items);\r\n                }\r\n\r\n                this.ins.loadDataTableData(res);\r\n                setTimeout(() => {\r\n                    // éä¸­æ°æ®\r\n                    this.ins.selectionMgr.selectCurrentValue();\r\n                    this.ins.changeDetector.detectChanges();\r\n                });\r\n            });\r\n\r\n        return this.ins.leftComponentRef.instance.createComponent();\r\n    }\r\n\r\n    // è·åå³èæ°æ®, å³ä¾§æ°æ®ä¸­ å³èåå­æ®µçå¼\r\n    private getNavigationFilter(navRow: any) {\r\n        if (this.ins.navigationOptions.relations && this.ins.navigationOptions.relations.length) {\r\n            const result = [];\r\n            this.ins.navigationOptions.relations.forEach(r => {\r\n                const k = r.groupField;\r\n                const dField = r.helpField;\r\n                const rf = { fieldName: dField, fieldValue: '' };\r\n                rf.fieldValue = k.split('.').reduce((o, c) => {\r\n                    return o[c];\r\n                }, navRow);\r\n\r\n                result.push(rf);\r\n            });\r\n            return result;\r\n        }\r\n\r\n        return '';\r\n    }\r\n}\r\n","import { Subscription } from 'rxjs';\r\nimport { PickingResult } from '../lookup-grid-options';\r\nimport { LookupGridComponent } from '../lookup-grid.component';\r\n\r\nexport class LookupDialogManager {\r\n\r\n    private lookupInit: Subscription = null;\r\n    private _loadDataWhenOpen = true;\r\n    private _navSelectedId = '';\r\n    private _selectFirstInNav = false;\r\n\r\n    private keyDownHandler = null;\r\n\r\n    constructor(private ins: LookupGridComponent) { }\r\n    // å¸®å©çªå£å³é­ååä¸äºæ¸çå·¥ä½\r\n    dialogClosed() {\r\n        if (this.ins.displayText !== this.ins.originalText && !this.ins.nosearch) {\r\n            this.ins.displayText = this.ins.originalText;\r\n            this.ins.setModelValue(this.ins.displayText);\r\n        }\r\n\r\n        if (this.ins.componentRef) {\r\n            this.ins.componentRef.destroy();\r\n            this.ins.componentRef = null;\r\n        }\r\n\r\n        if (this.ins.favoritesComponentRef) {\r\n            this.ins.favoritesComponentRef.destroy();\r\n            this.ins.favoritesComponentRef = null;\r\n        }\r\n\r\n        if (this.ins.contentContainer) {\r\n            this.ins.contentContainer.clear();\r\n        }\r\n\r\n        if (this.ins.centerContainer) {\r\n            this.ins.centerContainer.clear();\r\n        }\r\n\r\n        if (this.ins.leftComponentRef) {\r\n            this.ins.leftComponentRef.destroy();\r\n            this.ins.leftComponentRef = null;\r\n        }\r\n\r\n        if (this.ins.leftContainer) {\r\n            this.ins.leftContainer.clear();\r\n        }\r\n\r\n\r\n        this.ins.isShow = false;\r\n        this.ins.isTextChange = false;\r\n        if (this.ins.dialog) {\r\n            this.ins.content = null;\r\n        }\r\n\r\n        this.ins.navigationFilter = null;\r\n\r\n        this.ins.lookupUtils.pendingEnd();\r\n\r\n        if (this.ins.helpId) {\r\n            this.ins.displayType = '';\r\n        }\r\n\r\n        if (this.lookupInit) {\r\n            this.lookupInit.unsubscribe();\r\n            this.lookupInit = null;\r\n        }\r\n\r\n        // this.ins.items = [];\r\n        this.ins.favoriteItems = [];\r\n        this.ins.isTabChanged = false;\r\n\r\n        if (this.ins.uri) {\r\n            this.ins.items = [];\r\n        }\r\n        this.ins._searchState = null;\r\n\r\n\r\n        this.ins.pageIndex = 1;\r\n\r\n        this.ins.loadDataWhenOpen = this._loadDataWhenOpen;\r\n        this.ins.navSelectedIds = this._navSelectedId;\r\n        this.ins.selectFirstInNav = this._selectFirstInNav;\r\n\r\n        this.ins.isGetAllChidlNodes = false;\r\n\r\n        this.ins.enableGetAllChildNodes = true;\r\n\r\n        // ä¿å­ä¸ªæ§åæ°æ®\r\n        if (this.ins.usePersionalConf && this.ins.favoriteDataFrom !== 'locale') {\r\n            this.ins.httpMgr.submitFavoriteData('dialog closed event.');\r\n        }\r\n\r\n        if (this.keyDownHandler) {\r\n            this.keyDownHandler();\r\n            this.keyDownHandler = null;\r\n        }\r\n        if (this.ins.inputGroup) {\r\n            this.ins.inputGroup.focus();\r\n        }\r\n\r\n        this.ins.userInitialConfig.reset();\r\n\r\n        this.ins.treeInfo = this.ins._treeInfo_;\r\n\r\n        this.ins.lookupUtils.destroy();\r\n        this.ins.dialogClosed.emit();\r\n    }\r\n\r\n    onDialogCreated() {\r\n        this._loadDataWhenOpen = this.ins.loadDataWhenOpen;\r\n        this._navSelectedId = this.ins.navSelectedIds;\r\n        this._selectFirstInNav = this.ins.selectFirstInNav;\r\n\r\n        this.ins.dialogCreatedSubscription = this.ins.dialogCreated.subscribe(dlg => {\r\n            if (dlg) {\r\n                if (this.ins.dialogOpenedSubscription) {\r\n                    this.ins.dialogOpenedSubscription.unsubscribe();\r\n                }\r\n                if (this.ins.dialogClosedSubscription) {\r\n                    this.ins.dialogClosedSubscription.unsubscribe();\r\n                }\r\n                this.registerDialogEvent();\r\n                if (this.ins.isRecordSize) {\r\n                    const dlgSize = this.ins.personalConfigService.getDialogSize();\r\n                    if (dlgSize) {\r\n                        const { width, height } = dlgSize;\r\n                        this.ins.dialogWidth = width ? width : this.ins.dialogWidth;\r\n                        this.ins.dialogHeight = height ? height : this.ins.dialogHeight;\r\n\r\n                        // 20200908 æ´æ°ç°çªå£çå°ºå¯¸ by Lucas\r\n                        dlg.width = this.ins.dialogWidth;\r\n                        dlg.height = this.ins.dialogHeight;\r\n                    }\r\n                }\r\n                dlg.show();\r\n            }\r\n        });\r\n    }\r\n\r\n    checkDictPickingResult(pr: PickingResult | any) {\r\n        let o = true;\r\n        if (pr === undefined || pr === null || pr === '') {\r\n            o = true;\r\n        }\r\n\r\n        if (typeof pr === 'boolean') {\r\n            o = pr;\r\n        }\r\n\r\n        let customData, selectedIds, message;\r\n\r\n        if (typeof pr === 'object') {\r\n            if (pr.showDialog === undefined) {\r\n                o = true;\r\n            } else {\r\n                o = pr.showDialog;\r\n            }\r\n\r\n            if (pr.hasOwnProperty('data')) {\r\n                /** ä¿å­å¸®å©åä¼ éçæ°æ® */\r\n                customData = pr.data;\r\n            }\r\n            selectedIds = pr.selectedIds || null;\r\n\r\n            if (pr.message) {\r\n                message = pr.message;\r\n            }\r\n        }\r\n\r\n        return { show: o, customData, selectedIds, message };\r\n    }\r\n\r\n    canOpenDialog(pr: PickingResult | any) {\r\n        const {show, customData, selectedIds, message} = this.checkDictPickingResult(pr);\r\n        this.ins.customData = customData;\r\n        this.ins.selectedIds = selectedIds || null;\r\n        if (message) {\r\n            this.ins.notifyService.warning(message);\r\n        }\r\n\r\n        this.ins.isReady = false;\r\n        this.ins.isShow = show;\r\n    }\r\n\r\n    getHeight() {\r\n        return this.ins.dialog.size.contentHeight -\r\n                this.ins.containerMargin.bottom -\r\n                this.ins.containerMargin.top -\r\n                (this.ins.useFavorite ? 40 : 0);\r\n    }\r\n\r\n\r\n    private getMainGridSize() {\r\n        if (this.ins.isDoublleList()) {\r\n            return {\r\n                width: this.ins.dialog.size.width - this.ins.leftPanel.width - 27,\r\n                height: this.getHeight()\r\n            };\r\n        }\r\n\r\n        return {\r\n            width: this.ins.dialog.size.width - this.ins.containerMargin.left - this.ins.containerMargin.right,\r\n            height: this.getHeight()\r\n        };\r\n    }\r\n\r\n    resetDialogContentHeight() {\r\n        const { header: hHeight, footer: fHeight } = this.ins.dialog.size;\r\n        return this.ins.dialogHeight - hHeight - fHeight -  this.ins.containerMargin.bottom - this.ins.containerMargin.top;\r\n    }\r\n\r\n    /** æ³¨åå¼¹åºçªå£çäºä»¶ */\r\n    private registerDialogEvent() {\r\n        this.ins.dialogOpenedSubscription = this.ins.dialog.opened.subscribe(() => {\r\n            \r\n            this.ins.dialogContentHeight = this.resetDialogContentHeight();\r\n\r\n            this.ins.gridOptions = Object.assign(this.ins.gridOptions, this.getMainGridSize());\r\n            this.ins.dialog.el.nativeElement.querySelector('.ps-content').style.height = '100%';\r\n\r\n            if (this.ins.displayType && this.ins.customDisplayType) {\r\n                this.ins.componentRef = this.ins.lookupCmpMgr.createContent(this.ins.gridOptions);\r\n                this.ins.lookupCmpMgr.createFavoriteComponent();\r\n            }\r\n\r\n            this.ins.initData();\r\n\r\n            // ä¿®æ¹å¸®å©çªå£çç¶æ\r\n            this.ins.lookupUtils.pendingEnd();\r\n            this.ins.dialogOpened.emit();\r\n        });\r\n\r\n        this.ins.subscriptions.push(this.ins.dialogOpenedSubscription);\r\n\r\n        this.lookupInit = this.ins.lookupinitializationSubject.subscribe(() => {\r\n            this.ins.loadDataWhenOpen = true;\r\n            // æ³¨åå¿«æ·é®\r\n            this.registerShortcutKey();\r\n            // çå¬å·¦ä¾§å°ºå¯¸ååäºä»¶\r\n            if (this.ins.leftPanel) {\r\n                const leftPanelResize$ = this.ins.leftPanel.resizing.subscribe((s: any) => {\r\n                    this.ins.componentRef.instance.resize({\r\n                        width: this.ins.dialog.size.width - s.size.width - 27,\r\n                        height: this.getHeight()\r\n                    });\r\n                    this.ins.leftComponentRef.instance.resize(s.size);\r\n                });\r\n\r\n                this.ins.subscriptions.push(leftPanelResize$);\r\n            }\r\n        });\r\n\r\n        this.ins.dialogClosedSubscription = this.ins.dialog.closed.subscribe(() => {\r\n            // è¾å¥æ¡åååï¼å¼¹åºçªå£æªéæ©æ°æ®å³é­çªå£æ¶ï¼è¿ååå§å¼\r\n            this.ins.dialogMgr.dialogClosed();\r\n        });\r\n\r\n        this.ins.subscriptions.push(this.ins.dialogClosedSubscription);\r\n    }\r\n\r\n    private registerShortcutKey() {\r\n        // åè½¦ï¼ä¸ç¡®å®æé®å¤çé»è¾ä¸è³ã\r\n        const dlgContainerDom = this.ins.dialog.el.nativeElement.querySelector('.farris-modal');\r\n\r\n        if (dlgContainerDom && this.ins.shortcutKey && !this.keyDownHandler) {\r\n            this.keyDownHandler = this.ins.eventManager.addEventListener(dlgContainerDom, 'keydown', (e: KeyboardEvent) => {\r\n                e.stopPropagation();\r\n                const { moveUp, moveDown, searchFocus, confirm, nextPager, prevPager, expand, collapse } = this.ins.shortcutKey;\r\n                const arrowKey = [moveUp, moveDown, expand, collapse];\r\n                if (arrowKey.includes(e.code)) {\r\n                    this.ins.componentRef.instance.onKeydownEvent(e);\r\n                } else if (e.key === confirm) {\r\n                    if (e.target['nodeName'] === 'INPUT' && !e.ctrlKey) {\r\n                        return;\r\n                    }\r\n                    this.ins.okButton.nativeElement.click();\r\n                } else if (e.code === searchFocus) { // å¸®å©çªå£æ¥è¯¢è¾å¥æ¡ç¦ç¹\r\n                    e.preventDefault();\r\n                    this.ins.componentRef.instance.inputGroup.focus();\r\n                } else if (!this.ins.isTree() && (e.code === nextPager || e.code === prevPager )) {  // åé¡µ\r\n                    const isNextPager = e.code === nextPager;\r\n                    this.paginationKeyDownHandler(isNextPager);\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    private paginationKeyDownHandler(next = true) {\r\n        const datatableRef = this.ins.componentRef.instance;\r\n        const {pageIndex, pageSize, total} = datatableRef;\r\n        const pagerCount = Math.ceil(total / pageSize);\r\n\r\n        let newPageNum = pageIndex;\r\n        if (next) {\r\n            newPageNum = newPageNum + 1;\r\n        } else {\r\n            newPageNum = newPageNum - 1;\r\n        }\r\n\r\n        if (newPageNum > pagerCount || newPageNum < 1) {\r\n            newPageNum = pageIndex;\r\n        }\r\n\r\n        this.ins.componentRef.instance.onPageChange({ pageSize, pageIndex: newPageNum });\r\n    }\r\n\r\n}\r\n\r\n","import { Observable, of, BehaviorSubject } from 'rxjs';\r\nimport { switchMap } from 'rxjs/operators';\r\nimport { FavoriteAction } from '../lookup-displaytype';\r\nimport { LookupGridComponent } from '../lookup-grid.component';\r\n\r\nexport interface SelectionState {\r\n    selecteditems: any[];\r\n    favoriteItems: any[];\r\n    quickItems: any[];\r\n}\r\n\r\nexport class LookupSelectionService {\r\n\r\n    private state: SelectionState = {\r\n        selecteditems: [],\r\n        favoriteItems: [],\r\n        quickItems: []\r\n    };\r\n\r\n    state$: BehaviorSubject<SelectionState> = new BehaviorSubject(this.state);\r\n\r\n    selected$: Observable<any[]> = this.state$.pipe(\r\n        switchMap(n => of(n.selecteditems))\r\n    );\r\n\r\n    favoriteItems$: BehaviorSubject<any> = new BehaviorSubject({items: this.state.favoriteItems, action: null });\r\n\r\n    quickItems$: Observable<any[]> = this.state$.pipe(\r\n        switchMap(n => of(n.quickItems))\r\n    );\r\n\r\n    private get idField() {\r\n        return this.ins.idField;\r\n    }\r\n\r\n    constructor(private ins: LookupGridComponent) {\r\n    }\r\n\r\n    initFavoriteItems(items: any[]) {\r\n        this.state.favoriteItems = items || [];\r\n    }\r\n\r\n\r\n    //#region æ¶èæ°æ®\r\n\r\n    updateFavoriteData(data: any, action: FavoriteAction) {\r\n\r\n        if (this.ins.savingFaoriteData) {\r\n            return;\r\n        }\r\n\r\n        if (action === FavoriteAction.add) {\r\n            this.state.favoriteItems = this.state.favoriteItems.concat([data]);\r\n        } else {\r\n            this.state.favoriteItems = this.state.favoriteItems.filter(n => n[this.idField] !== data[this.idField]);\r\n        }\r\n\r\n        this.favoriteItems$.next({ items: this.state.favoriteItems, action });\r\n    }\r\n\r\n    //#endregion\r\n\r\n    //#region å¤éæ°æ®\r\n\r\n    loadSelections( data: []) {\r\n        this.state.selecteditems = [...data];\r\n        this.state$.next(this.state);\r\n    }\r\n\r\n    getSelections() {\r\n        return [...this.state.selecteditems];\r\n    }\r\n\r\n    select(item: any) {\r\n        if (item) {\r\n            this.state.selecteditems = [...this.state.selecteditems, item];\r\n            this.state$.next(this.state);\r\n        }\r\n    }\r\n\r\n    unselectByPathcode(pathcode: string) {\r\n        const { dataField, pathField } = this.ins.treeInfo;\r\n        this.state.selecteditems = this.state.selecteditems.filter(n => {\r\n            return n[dataField][pathField] && n[dataField][pathField].indexOf(pathcode) !== 0;\r\n        });\r\n    }\r\n\r\n    updateSelections(data: any, checked = true) {\r\n\r\n        if (!Array.isArray(data)) {\r\n            data = [data];\r\n        }\r\n\r\n        const items = [ ...data ];\r\n        const idField = this.idField;\r\n        if (checked) {\r\n            if (this.state.selecteditems && !this.state.selecteditems.length) {\r\n                this.state.selecteditems = items;\r\n            } else {\r\n                const ids = items.map(n => n[idField]);\r\n                ids.forEach((n, i) => {\r\n                    if (!this.state.selecteditems.find(r => r[idField] == n)) {\r\n                        this.state.selecteditems.push(items[i]);\r\n                    }\r\n                });\r\n            }\r\n        } else {\r\n            if (data) {\r\n                const ids2 = data.map(n => n[idField]);\r\n                this.state.selecteditems = this.state.selecteditems.filter(n => {\r\n                    return ids2.indexOf(n[idField]) === -1;\r\n                });\r\n            }\r\n        }\r\n\r\n        this.state$.next(this.state);\r\n    }\r\n\r\n    unSelect(id: any) {\r\n        if (id) {\r\n            if (Array.isArray(id)) {\r\n                this.state.selecteditems = this.state.selecteditems.filter(n => {\r\n                    return id.indexOf(n[this.idField]) === -1;\r\n                });\r\n            } else {\r\n                this.state.selecteditems = this.state.selecteditems.filter(n => n[this.idField] != id);\r\n            }\r\n\r\n            this.state$.next(this.state);\r\n        }\r\n    }\r\n\r\n    clearSelections() {\r\n        this.state.selecteditems = [];\r\n        this.state$.next(this.state);\r\n    }\r\n\r\n    //#endregion\r\n\r\n}\r\n","/*\r\n * @Author: ç¯çç§æ(lucas huang)\r\n * @Date: 2018-11-23 11:23:12\r\n * @LastEditors: ç¯çç§æ(Lucas Huang)\r\n * @LastEditTime: 2020-10-20 20:18:26\r\n * @Company: Inspur\r\n * @Version: v0.3.x\r\n */\r\n\r\nimport {\r\n    Component,\r\n    Input,\r\n    ViewChild,\r\n    OnChanges,\r\n    SimpleChanges,\r\n    EventEmitter,\r\n    OnInit,\r\n    Injector,\r\n    ComponentFactoryResolver,\r\n    Output,\r\n    ChangeDetectorRef,\r\n    ViewEncapsulation,\r\n    AfterViewInit,\r\n    ViewContainerRef,\r\n    forwardRef,\r\n    ComponentRef,\r\n    Type,\r\n    ElementRef,\r\n    NgZone,\r\n    Renderer2,\r\n    OnDestroy,\r\n    HostListener,\r\n} from \"@angular/core\";\r\n\r\nimport { NG_VALUE_ACCESSOR } from \"@angular/forms\";\r\nimport { Observable, Subscription, of, Subject, BehaviorSubject } from \"rxjs\";\r\n\r\nimport { LocaleService } from \"@farris/ui-locale\";\r\nimport { IResizeEvent } from \"@farris/ui-draggable\";\r\nimport { MessagerService } from \"@farris/ui-messager\";\r\nimport { LoadingService, LoadingComponent } from \"@farris/ui-loading\";\r\nimport { DataTableComponent } from \"@farris/ui-datatable\";\r\nimport { TreeTableComponent, TreeNode } from \"@farris/ui-treetable\";\r\nimport { LayoutPanelComponent } from \"@farris/ui-layout\";\r\nimport { CommonUtils, DebugService, FarrisComponentInstanceService, OverLayHiddenService } from \"@farris/ui-common\";\r\nimport { EntityFilter } from \"@farris/ui-common/types\";\r\nimport { ShortcutsService } from \"@farris/ui-shortcuts\";\r\nimport { InputGroupComponent } from \"@farris/ui-input-group\";\r\nimport { NotifyService } from \"@farris/ui-notify\";\r\n\r\nimport {\r\n    FAVORITE_FIELD_NAME,\r\n    INPUT_GROUP_ICON,\r\n    LookupGridDisplayType,\r\n    ExtInfoFormatter,\r\n    CustomDataFormatter,\r\n    QuickSelectOption,\r\n    QuickSelectDefaultOptions,\r\n} from \"./lookup-displaytype\";\r\nimport { LookupComponent } from \"./lookup.component\";\r\nimport {\r\n    LookupGridOptions,\r\n    lookupGridDefaults,\r\n    LookupGridResult,\r\n    NavigationOptions,\r\n    DisplayInfo,\r\n    displayInfoDefault,\r\n    PickingResult,\r\n    TreeInfo,\r\n    LOAD_DATA_TYPE,\r\n    ONLY_SELECT_LEAF,\r\n    PersonalConfig,\r\n} from \"./lookup-grid-options\";\r\nimport { ILookupHttpService, ServerSideToken } from \"./http/ILookupHttpService\";\r\nimport { NavigationFilter } from \"./http/RemoteParams\";\r\nimport { LookupLeftComponent } from \"./lookup-left.component\";\r\nimport { LookupDefaultMapping } from \"./lookup-defaut-mapping\";\r\nimport { LookupUtils } from \"./utils\";\r\nimport { PersonalConfigService } from \"./lookup-presonalConfig.service\";\r\nimport {\r\n    UtilService,\r\n    TreeNodeHelper,\r\n    FavoriteHelper,\r\n    SelectionManager,\r\n    DataTableEventManager,\r\n    TreeTableEventManager,\r\n    MultiSelectionManager,\r\n    LookupHttpManager,\r\n    LookupComponentManager,\r\n    LookupDialogManager,\r\n    onTextChanged,\r\n    LookupSelectionService,\r\n} from \"./services\";\r\nimport { catchError, map, switchMap } from \"rxjs/operators\";\r\n\r\nimport { EventManager } from \"@angular/platform-browser\";\r\nimport { cloneDeep } from \"lodash-es\";\r\n\r\n\r\nexport const LOOKUPGRID_VALUE_ACCESSOR: any = {\r\n    provide: NG_VALUE_ACCESSOR,\r\n    useExisting: forwardRef(() => LookupGridComponent),\r\n    multi: true,\r\n};\r\n\r\n@Component({\r\n    selector: \"farris-lookup-grid\",\r\n    templateUrl: \"./lookup-grid.component.html\",\r\n    styleUrls: [\"./lookup-grid.component.scss\"],\r\n    providers: [\r\n        LOOKUPGRID_VALUE_ACCESSOR,\r\n        ShortcutsService,\r\n        LookupDefaultMapping,\r\n        LookupUtils,\r\n        PersonalConfigService,\r\n    ],\r\n    encapsulation: ViewEncapsulation.None,\r\n    exportAs: \"lookup\",\r\n})\r\nexport class LookupGridComponent\r\n    extends LookupComponent\r\n    implements OnInit, AfterViewInit, OnChanges, OnDestroy\r\n{\r\n    groupIcon = INPUT_GROUP_ICON;\r\n    _displayType = \"\";\r\n\r\n    /** ä½¿ç¨è¡¨åè®¾è®¡å¨ä¸­çæ¾ç¤ºç±»åãå¦åä½¿ç¨åæ°æ®è®¾ç½®çæ¾ç¤ºç±»åã é»è®¤ï¼false */\r\n    @Input() customDisplayType = false;\r\n    @Input() viewType: \"text\" | \"tag\" = \"text\";\r\n    @Input()\r\n    get displayType() {\r\n        return this._displayType;\r\n    }\r\n    set displayType(val: string) {\r\n        if (val) {\r\n            const types = Object.values(LookupGridDisplayType);\r\n            const i = types.findIndex((n) => n === val.toUpperCase());\r\n            if (i > -1) {\r\n                const keys = Object.keys(LookupGridDisplayType);\r\n                this._displayType = LookupGridDisplayType[keys[i]];\r\n            }\r\n        } else {\r\n            this._displayType = val;\r\n        }\r\n    }\r\n    /** å¯ç¨æ¸ç©ºæé® */\r\n    @Input() enableClear = true;\r\n    /** æå¡å¨ç«¯æåº */\r\n    @Input() remoteSort = true;\r\n\r\n    @Input() condition: EntityFilter;\r\n\r\n    /** æ è¡¨æ¾ç¤ºå¨éå¤éæ¡ã é»è®¤ä¸æ¾ç¤º */\r\n    @Input() showCheckAll = false;\r\n\r\n    /** æ¯å¦å¯ç¨å¤é */\r\n    @Input() singleSelect = true;\r\n    /** å¤éåéç¬¦ */\r\n    @Input() multipleChoiceSeparator = \",\";\r\n    /** ä¸»é®å­æ®µ */\r\n    @Input() idField?: string;\r\n    /** å¯ä»¥ä¸ºåæ°æ®IDãwebapiURL */\r\n    @Input() uri?: string;\r\n    /**\r\n     * BE REST RUI\r\n     * - æ­¤å¤è®¾ç½®å uri å¤±æ\r\n     */\r\n    @Input() beUri = \"\";\r\n    /**\r\n     * æ¾ç¤ºè¿æ»¤å·¥å·æ¡\r\n     */\r\n    @Input() showFilterBar = true;\r\n    /** æ¯å¦å¯ç¨åé¡µ */\r\n    @Input() pagination = true;\r\n    /** å½åé¡µç´¢å¼ï¼ä» 0å¼å§ */\r\n    @Input() pageIndex = 1;\r\n    /** æ¯é¡µè®°å½æ° */\r\n    @Input() pageSize = 20;\r\n    /** å¯ç¨åé¡µè®°å½æ°åè¡¨ */\r\n    @Input() pageList = [10, 20, 30, 50, 100];\r\n    /** æ»è®°å½æ° */\r\n    @Input() total = 0;\r\n    /** å¯æå¨å */\r\n    // @Input() resizableColumns = true;\r\n    /** æ¾ç¤ºåä¿¡æ¯, é»è®¤ä¸º [] */\r\n    @Input() columns: any[] = [];\r\n\r\n    /** å¸®å©æ¥è¯¢æ¯å¦ä¸ºè¿ç«¯æ¥è¯¢ */\r\n    @Input() remoteSearch = true;\r\n\r\n    /** ææ¬åååï¼è¿è¡æå¡å¨ç«¯æ¥è¯¢ */\r\n    @Input() searchOnServer = true;\r\n    /** ä¸è¿è¡æå¡å¨æ¥è¯¢ï¼æå¥ç®å¥ */\r\n    @Input() nosearch = false;\r\n\r\n    /**\r\n     * å¯ç¨ä»»æè¾å¥åï¼å¼éè¿è¾å¥æ¶è§¦å\r\n     */\r\n    @Output() clearMappings = new EventEmitter();\r\n\r\n    /**\r\n     * åè®¸è¾å¥çå­ç¬¦æå¤§é¿åº¦ã\r\n     * ä»»æè¾å¥æ¶ï¼æ­¤å±æ§ææ\r\n     */\r\n    @Input() maxLength;\r\n\r\n    @Input() mappingFn: (rowData, mapFields, bindingData?: any) => void;\r\n    /** æ°æ®åè¡¨ */\r\n    @Input() items: any;\r\n    // æ¶èåè¡¨\r\n    @Input() favoriteItems: any[] = [];\r\n    /** èªå®ä¹æ°æ® */\r\n    @Input() customData: any;\r\n\r\n    /** ç»å®å¼æå¨çå¯¹è±¡ */\r\n    @Input() bindingData: {};\r\n\r\n    @Input() treeInfo: TreeInfo;\r\n    /** æ¯å¦å¯ç¨çº§èéæ©æ§å¶éé¡¹ */\r\n    @Input() enableCascade = false;\r\n    /** çº§èæ§å¶é»è®¤å¼ï¼ enable, up, down, disable */\r\n    @Input() cascadeStatus: \"enable\" | \"up\" | \"down\" | \"disable\" = \"enable\";\r\n\r\n    @Input() placeholder = \"\";\r\n\r\n    /** æ¾ç¤ºå·²éè®°å½åè¡¨ã é»è®¤ä¸º false ä¸æ¾ç¤º */\r\n    @Input() showSelected = false;\r\n\r\n    /** åºç¨æ¶èå¤¹ */\r\n    @Input() useFavorite = false;\r\n    /** æ¶èæ°æ®æ¥èªäºï¼ locale: æ¬å°å­å¨ï¼ remote: æå¡å¨ç«¯å­å¨ */\r\n    @Input() favoriteDataFrom: \"locale\" | \"remote\" = \"remote\";\r\n    /** ä½¿ç¨æç¤º,å¿«æ·éæ© */\r\n    @Input() useTip = false;\r\n    /** è®°å½çªå£å¤§å° */\r\n    @Input() isRecordSize = false;\r\n\r\n    /** å¿«ééæ© */\r\n    @Input() userId: string;\r\n\r\n    /** æ¯å¦å¯ç¨éä¸­valueå¼å¯¹åºçè¡æ°æ®ï¼é»è®¤ true */\r\n    @Input() enableToSelect = true;\r\n\r\n    @Input() enableFindText = false;\r\n    /** -1: ä¸å±å¼ï¼ 0: å¨é¨å±å¼ï¼>0: å±å¼å°æå®çº§æ° */\r\n    @Input() expandLevel = -1;\r\n\r\n    @Input() navTreeTableOptions: any = {};\r\n    @Input() treeTableOptions: any = {};\r\n    @Input() dataTableOptions: any = {};\r\n\r\n    defaultTreeTableOptions = {\r\n        maxLevel: 9,\r\n        enableContextMenu: false,\r\n        contextMenuItems: [],\r\n    };\r\n\r\n    /** æ å½¢å¸®å©æ°æ®å è½½æ¹å¼ï¼ default: åç½®åæ°ï¼ loadall: å è½½ææ layerloadï¼åå±å è½½ */\r\n    @Input() loadTreeDataType: \"default\" | \"loadall\" | \"layerload\" = \"default\";\r\n\r\n    /** çªå£æå¼åç«å³å è½½æ°æ®ï¼é»è®¤ä¸º true */\r\n    @Input() loadDataWhenOpen = true;\r\n\r\n    /**\r\n     * å¯¼èªåè¡¨ï¼æ åè¡¨å¨å¸®å©æå¼åéä¸­çæ°æ®;\r\n     * è®¾ç½®åï¼`selectFirstInNav` å¤±æï¼\r\n     */\r\n    @Input() navSelectedIds = \"\";\r\n\r\n    /**\r\n     * å¯¼èªå¸®å©ï¼éä¸­ç¬¬1æ¡æ°æ®ï¼é»è®¤ä¸º false;\r\n     * æ³¨æï¼å½`navSelectedIds`ä¸ä¸ºç©ºæ¶ï¼æ­¤å±æ§å¤±æã\r\n     */\r\n    @Input() selectFirstInNav = false;\r\n\r\n    /** å¯ç¨æé å®æ´æ è¿æ»¤ */\r\n    @Input() enableFullTree = true;\r\n\r\n    /** æ¾ç¤ºææ¬èªå®ä¹å½æ° */\r\n    @Input() displayFormatter: (\r\n        value: string,\r\n        data: any,\r\n        instance: any\r\n    ) => string = undefined;\r\n    /** æ¾ç¤ºææ¬å­æ®µéåï¼ä»¥ è±æ éå·éå¼ */\r\n    @Input() displayFields = \"\";\r\n    @Input() displayTextSeparator = \"_\";\r\n\r\n    /**\r\n     * å¸®å©åæ°æ®IDï¼ä¸ä¸ºç©ºæ¶è°ç¨æå®çURI\r\n     * /api/runtime/bcc/v1.0/help/data/{helpId}\r\n     */\r\n    @Input() helpId = \"\";\r\n    /** ææ¬å¯¹é½æ¹å¼ï¼ left | center | right; é»è®¤ left */\r\n    @Input() textAlign = \"left\";\r\n\r\n    /** é¼ æ æ»è¿è¾å¥æ¡æ¶æ¾ç¤ºè¾å¥æ¡åçææ¬ä¿¡æ¯ */\r\n    @Input() enableTitle = true;\r\n    @Input() useExtendInfo = false;\r\n    @Input() extInfoFields = \"\";\r\n    @Input() extInfoFormatter: ExtInfoFormatter;\r\n    @Input() extendInfo = \"\";\r\n    /** IDE è®¾è®¡å¨èªå®ä¹æ ¼å¼å 2103 */\r\n    @Input() customFormatter: CustomDataFormatter = null;\r\n    @Input() customNavFormatter: CustomDataFormatter = null;\r\n\r\n    /** èªå®ä¹ç¡®å®äºä»¶ */\r\n    @Input() okHandler = null;\r\n    /** èªå®ä¹åæ¶äºä»¶ */\r\n    @Input() cancelHandler = null;\r\n\r\n    @Input() tagboxHeight = \"auto\";\r\n    @Input() maxTagboxHeight;\r\n\r\n    /** å¯ç¨è·åææå­çº§æ°æ®çåè½ */\r\n    @Input() enableGetAllChildNodes = true;\r\n\r\n    @Input() shortcutKey = {\r\n        /** æå¼å¸®å©çªå£ */\r\n        open: \"ArrowRight\",\r\n        /** ç¡®è®¤éæ©æ°æ® */\r\n        confirm: \"Enter\",\r\n        /** æç´¢æ¡ç¦ç¹ */\r\n        searchFocus: \"F3\",\r\n        /** éä¸­ä¸ä¸æ¡ */\r\n        moveUp: \"ArrowUp\",\r\n        /** éä¸­ä¸ä¸æ¡ */\r\n        moveDown: \"ArrowDown\",\r\n        /** å±å¼èç¹ */\r\n        expand: \"ArrowRight\",\r\n        /** æå èç¹ */\r\n        collapse: \"ArrowLeft\",\r\n        /** ä¸ä¸é¡µ */\r\n        nextPager: \"PageDown\",\r\n        /** ä¸ä¸é¡µ */\r\n        prevPager: \"PageUp\",\r\n    };\r\n    /** å¿«æ·éæ©ç¸å³éç½®é¡¹ï¼é»è®¤ä¸º null, å³ä¸å¯ç¨æ­¤åè½ */\r\n    @Input() quickSelect: QuickSelectOption = null;\r\n\r\n    /** æ°æ®éæ©åï¼å¼æ å°åè§¦å\r\n     * è¿å Observable\r\n     *      canSelect: <boolean>  æ¯å¦åè®¸éæ©\r\n     *      message: <string> ä¸åè®¸éæ©æ¶çæç¤ºä¿¡æ¯\r\n     */\r\n    @Input() beforeSelectData: (p: {\r\n        instance: any;\r\n        data: any;\r\n    }) => Observable<{ canSelect: boolean; message: string } | boolean>;\r\n\r\n    @Output() selectedData = new EventEmitter();\r\n    @Output() clear = new EventEmitter();\r\n    @Output() search = new EventEmitter();\r\n    // å¸®å©ææ¬æ¡ä¸­å¼ååäºä»¶\r\n    @Output() valueChanged = new EventEmitter();\r\n    @Output() loadSuccess = new EventEmitter();\r\n\r\n    @Output() pagerChanged = new EventEmitter();\r\n\r\n    @Output() expandTreeNode = new EventEmitter();\r\n    @Output() textChanged = new EventEmitter();\r\n\r\n    @Output() checkedChange = new EventEmitter<{\r\n        data: any;\r\n        isCheck: boolean;\r\n    }>();\r\n\r\n    @Output() tagRemoved = new EventEmitter();\r\n\r\n    /** åå®¹ä¸­çç½è¾¹è· */\r\n    containerMargin = { top: 0, bottom: 5, left: 10, right: 10 };\r\n\r\n    containerStyle = {\r\n        marginLeft: this.containerMargin.left + \"px\",\r\n        marginRight: this.containerMargin.right + \"px\",\r\n        marginTop: this.containerMargin.top + \"px\",\r\n        marginBottom: this.containerMargin.bottom + \"px\",\r\n    };\r\n\r\n    _gridOptions: LookupGridOptions = lookupGridDefaults;\r\n\r\n    get gridOptions() {\r\n        if (\r\n            this.useFavorite &&\r\n            this.columns &&\r\n            this.columns.length > 0 &&\r\n            !this.columns.find((item) => item.field === FAVORITE_FIELD_NAME)\r\n        ) {\r\n            this.columns.push({\r\n                field: FAVORITE_FIELD_NAME,\r\n                title: \"\",\r\n                width: 40,\r\n                align: \"center\",\r\n                fixed: 'right',\r\n                // fixedWidth: true,\r\n                formatter: this.favHelper.favoriteColumnFormatter,\r\n            });\r\n        }\r\n        this._gridOptions = Object.assign(this._gridOptions, {\r\n            singleSelect: this.singleSelect,\r\n            idField: this.idField,\r\n            uri: this.uri,\r\n            showFilterBar: this.showFilterBar,\r\n            pagination: this.pagination,\r\n            pageIndex: this.pageIndex,\r\n            pageSize: this.pageSize,\r\n            pageList: this.pageList,\r\n            total: this.total,\r\n            items: this.items,\r\n            columns: this.columns,\r\n            resizableColumns: true,\r\n            fixedHeader: true,\r\n            hover: true,\r\n            treeInfo: this.treeInfo,\r\n        });\r\n\r\n        return this._gridOptions;\r\n    }\r\n    @Input() set gridOptions(opts) {\r\n        this._gridOptions = Object.assign({}, this._gridOptions, opts);\r\n        this.selectedColumns = this.multiSelMgr.initSelectedColumns();\r\n    }\r\n\r\n    @ViewChild(\"contentContainer\", { read: ViewContainerRef })\r\n    contentContainer: ViewContainerRef;\r\n    @ViewChild(\"favoritesContainer\", { read: ViewContainerRef })\r\n    favoritesContainer: ViewContainerRef;\r\n    @ViewChild(\"leftContainer\", { read: ViewContainerRef })\r\n    leftContainer: ViewContainerRef;\r\n    @ViewChild(\"centerContainer\", { read: ViewContainerRef })\r\n    centerContainer: ViewContainerRef;\r\n    @ViewChild(\"multiSelectDT\") multiSelectDT: DataTableComponent;\r\n    @ViewChild(\"inputgroup\") inputGroup: InputGroupComponent;\r\n    @ViewChild(\"leftPanel\") leftPanel: LayoutPanelComponent;\r\n    @ViewChild(\"tagbox\") tagbox: ElementRef;\r\n\r\n    @ViewChild(\"okbtn\") okButton: ElementRef;\r\n\r\n    componentRef: ComponentRef<any>;\r\n    leftComponentRef: ComponentRef<LookupLeftComponent>;\r\n    favoritesComponentRef: ComponentRef<any>;\r\n\r\n    public http: ILookupHttpService;\r\n    public messagerService: MessagerService;\r\n    public loadingService: LoadingService;\r\n    loading: LoadingComponent;\r\n    // dataFieldMaps: any;\r\n    navigationOptions: NavigationOptions;\r\n\r\n    // å¯¼èªå¸®å©å·¦åå®½åº¦\r\n    leftPanelWidth = 320;\r\n    // å¯¼èªå¸®å©çªå£æå°å®½åº¦\r\n    navLookupDialogMinWidth = 960;\r\n\r\n    navigationFilter: NavigationFilter = null;\r\n\r\n    subscriptions: Subscription[] = [];\r\n    dialogOpenedSubscription: Subscription;\r\n    dialogClosedSubscription: Subscription;\r\n\r\n    isTextChange = false;\r\n    isTabChanged = false;\r\n\r\n    displayInfo: DisplayInfo = Object.assign({}, displayInfoDefault);\r\n\r\n    tabChangeSubscription = null;\r\n    // æå­è¡ç¹å»æ°æ®  ç¨äºæ¶è\r\n    personalConf: PersonalConfig = {};\r\n    favoriteColumns: any[] = [];\r\n    /** ä¸´æ¶æ¥è¯¢åæ° */\r\n    _searchState = null;\r\n    allData: any = [];\r\n    get selections() {\r\n        const selectItems = this.lookupSelectionSer.getSelections();\r\n        if (this.singleSelect) {\r\n            return selectItems[0];\r\n        } else {\r\n            return selectItems;\r\n        }\r\n    }\r\n    get usePersionalConf() {\r\n        return this.useFavorite || this.useTip || this.isRecordSize;\r\n    }\r\n\r\n    get displayTextList() {\r\n        if (this.displayText) {\r\n            return this.displayText.split(this.multipleChoiceSeparator);\r\n        }\r\n        return [];\r\n    }\r\n\r\n    public personalConfigService: PersonalConfigService;\r\n    public utilService: UtilService;\r\n    public treeNodeHelper: TreeNodeHelper;\r\n    public localService: LocaleService;\r\n    public notifyService: NotifyService;\r\n    allColumnsTitle = \"ææå\";\r\n    mustWriteSomething = \"è¯·è¾å¥å³é®å­åæ¥è¯¢ã\";\r\n    mustChoosAdatarow = \"è¯·éæ©ä¸æ¡è®°å½ï¼\";\r\n    addFavoriteSuccess = \"æ¶èæåã\";\r\n    delFavoriteSuccess = \"ç§»é¤æ¶èæåã\";\r\n\r\n    searching = false;\r\n    /** ä¸´æ¶å­å¨æ¥è¯¢ç»æé */\r\n    _searchResult = null;\r\n\r\n    lookupinitializationSubject = new Subject();\r\n\r\n    /** å¤éæ¶ï¼éä¸­çæ°æ® */\r\n    currentSelectedItems: Observable<any> = of([]);\r\n    /** å·²éæ°æ®åä¿¡æ¯ */\r\n    selectedColumns = [];\r\n    activeTab: string | \"datalist\" | \"favorite\" | \"selected\" = \"datalist\";\r\n\r\n    favHelper: FavoriteHelper = null;\r\n    ttEventMgr: TreeTableEventManager = null;\r\n    multiSelMgr: MultiSelectionManager = null;\r\n    httpMgr: LookupHttpManager = null;\r\n    lookupCmpMgr: LookupComponentManager = null;\r\n    dialogMgr: LookupDialogManager = null;\r\n    selectionMgr: SelectionManager = null;\r\n    dtEventMgr: DataTableEventManager = null;\r\n\r\n    lookupSelectionSer: LookupSelectionService = null;\r\n\r\n    controlId = \"\";\r\n    savingFaoriteData = false;\r\n    isReady = false;\r\n    showTagboxClearButton = false;\r\n    hasError = false;\r\n\r\n    isGetAllChidlNodes = false;\r\n    eventManager: EventManager;\r\n    /** éä¸­è®°å½IDï¼èªå®ä¹å¸®å©åæ°æ¶ä½¿ç¨ */\r\n    selectedIds = [];\r\n    private lookupSearchInputEvent = null;\r\n    private farrisInstances: FarrisComponentInstanceService = null;\r\n    /** ç¨æ·åå§è®¾ç½® */\r\n    private _userSettings: any = {};\r\n\r\n    get userInitialConfig() {\r\n        return this._userSettings;\r\n    }\r\n\r\n    _treeInfo_ = null;\r\n\r\n    /** dialog åå®¹åºåé«åº¦ã å¼¹çªæ»é«åº¦ - å¤´é¨é«åº¦ - èé¨é«åº¦ - ï¼å¯ç¨æ¶è TABå¤´é«åº¦ï¼ */\r\n    dialogContentHeight = 0;\r\n\r\n    overLayService: OverLayHiddenService;\r\n    private debugSer: DebugService = null;\r\n    constructor(\r\n        public injector: Injector,\r\n        public cfr: ComponentFactoryResolver,\r\n        public el: ElementRef,\r\n        public utils: CommonUtils,\r\n        private defaultMapping: LookupDefaultMapping,\r\n        public changeDetector: ChangeDetectorRef,\r\n        public shortcuts: ShortcutsService,\r\n        public lookupUtils: LookupUtils,\r\n        private zone: NgZone,\r\n        private render2: Renderer2\r\n    ) {\r\n        super(injector, el, changeDetector);\r\n        this.createInstance();\r\n        this.currentSelectedItems = this.lookupSelectionSer.selected$;\r\n        this.eventManager = this.injector.get(EventManager);\r\n        this.farrisInstances = this.injector.get(\r\n            FarrisComponentInstanceService,\r\n            null\r\n        );\r\n\r\n        this.overLayService = new OverLayHiddenService();\r\n\r\n        this.debugSer = this.injector.get(DebugService, null);\r\n        if (this.debugSer) {\r\n            this.debugSer.useDebugMode();\r\n        }\r\n    }\r\n\r\n    writeConsole(msg, type: 'info'|'log'|'warn'|'error' = 'warn') {\r\n        if (this.debugSer) {\r\n            this.debugSer[type](msg);\r\n        }\r\n    }\r\n\r\n    private cacheUserConfig() {\r\n        this._userSettings._title = this.title;\r\n        this.displayInfo.title = this.title;\r\n        this._userSettings._columns = this.deepClone(this.columns || []);\r\n        this._userSettings.getColumns = () => {\r\n            return this._userSettings._columns;\r\n        };\r\n\r\n        this._userSettings.reset = () => {\r\n            this.title = this._userSettings._title;\r\n            this.displayInfo.title = this.title;\r\n            this.columns = this._userSettings.getColumns();\r\n        };\r\n    }\r\n\r\n    private deepClone(obj) {\r\n        if (obj === null) {\r\n            return null;\r\n        }\r\n        const clone = Object.assign({}, obj);\r\n        Object.keys(clone).forEach(\r\n            (key) =>\r\n                (clone[key] =\r\n                    typeof obj[key] === \"object\"\r\n                        ? this.deepClone(obj[key])\r\n                        : obj[key])\r\n        );\r\n        if (Array.isArray(obj)) {\r\n            clone.length = obj.length;\r\n            return Array.from(clone);\r\n        }\r\n        return clone;\r\n    }\r\n\r\n    ngOnInit() {\r\n        super.ngOnInit();\r\n        this.cacheUserConfig();\r\n        if (!this.loadTreeDataType) {\r\n            this.loadTreeDataType = \"default\";\r\n        }\r\n\r\n        this.checkGridOptions();\r\n        this.displayInfo.title = this.title;\r\n        /** ä¼ éä¸ä¸æ */\r\n        if (this.http) {\r\n            this.http.context = this.context;\r\n        }\r\n\r\n        this.allColumnsTitle = this.localService.getValue(\"lookup.allColumns\");\r\n        this.mustWriteSomething = this.localService.getValue(\r\n            \"lookup.mustWriteSomething\"\r\n        );\r\n        this.mustChoosAdatarow = this.localService.getValue(\r\n            \"lookup.mustChoosAdatarow\"\r\n        );\r\n        this.addFavoriteSuccess =\r\n            this.localService.getValue(\"lookup.favoriteInfo.addFav\") ||\r\n            this.addFavoriteSuccess;\r\n        this.delFavoriteSuccess =\r\n            this.localService.getValue(\"lookup.favoriteInfo.cancelFav\") ||\r\n            this.delFavoriteSuccess;\r\n\r\n        this.dialogMgr.onDialogCreated();\r\n\r\n        this._treeInfo_ = this.treeInfo ? cloneDeep(this.treeInfo) : null;\r\n\r\n        if (this.quickSelect) {\r\n            this.quickSelect = Object.assign(QuickSelectDefaultOptions, this.quickSelect || {});\r\n            \r\n        }\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        super.ngOnDestroy();\r\n        this.subscriptions.forEach((n) => {\r\n            if (n) {\r\n                n.unsubscribe();\r\n                n = null;\r\n            }\r\n        });\r\n\r\n        if (this.selectionMgr) {\r\n            this.selectionMgr.destroy();\r\n        }\r\n\r\n        this.subscriptions = [];\r\n\r\n        if (this.farrisInstances) {\r\n            this.farrisInstances.destroy(this.el.nativeElement);\r\n        }\r\n\r\n        if (this.lookupSearchInputEvent) {\r\n            this.lookupSearchInputEvent();\r\n        }\r\n        this.lookupUtils.destroy();\r\n\r\n        this.overLayService.destory(this.el.nativeElement);\r\n        this.overLayService = null;\r\n    }\r\n\r\n    ngOnChanges(changes: SimpleChanges) {\r\n        if (changes.columns && !changes.columns.isFirstChange()) {\r\n            this.cacheUserConfig();\r\n        }\r\n    }\r\n\r\n    ngAfterViewInit() {\r\n        this.lookupSearchInputEvent = onTextChanged.bind(this)();\r\n\r\n        // åå§åä¸ªæ§åéç½®\r\n        if (this.usePersionalConf) {\r\n            this.favHelper.initPersonalInfo();\r\n        }\r\n\r\n        if (this.useExtendInfo) {\r\n            const jsonData = this.selectionMgr.getBindingData();\r\n            this.updateExtendInfo(jsonData, false);\r\n        }\r\n\r\n        if (this.viewType === \"text\") {\r\n            // this.shortcuts.add({\r\n            //     key: 'F2',\r\n            //     target: this.inputGroup.textbox.nativeElement,\r\n            //     command: () => {\r\n            //         this.showDialog();\r\n            //     }\r\n            // });\r\n            this.render2.listen(\r\n                this.inputGroup.textbox.nativeElement,\r\n                \"keydown.F2\",\r\n                this.showDialog.bind(this)\r\n            );\r\n        } else {\r\n            this.registerMouseEventForTagView();\r\n\r\n            if (this.tagboxHeight) {\r\n                const el =\r\n                    this.tagbox.nativeElement.querySelector(\".multi-more\");\r\n                let tbh = this.tagboxHeight;\r\n                if (tbh !== \"auto\") {\r\n                    tbh += \"px\";\r\n\r\n                    if (this.maxTagboxHeight) {\r\n                        this.render2.setStyle(\r\n                            el,\r\n                            \"maxHeight\",\r\n                            `${this.maxTagboxHeight}px`\r\n                        );\r\n                    }\r\n                }\r\n\r\n                this.render2.setStyle(el, \"height\", tbh);\r\n            }\r\n        }\r\n\r\n        if (this.el && this.farrisInstances) {\r\n            this.farrisInstances.add(this.el.nativeElement, this);\r\n        }\r\n    }\r\n\r\n    private createInstance() {\r\n        this.http = this.injector.get(ServerSideToken, null);\r\n        this.messagerService = this.injector.get(MessagerService);\r\n        this.loadingService = this.injector.get(LoadingService);\r\n        this.notifyService = this.injector.get(NotifyService, null);\r\n\r\n        this.personalConfigService = this.injector.get(\r\n            PersonalConfigService,\r\n            null\r\n        );\r\n\r\n        this.lookupSelectionSer = new LookupSelectionService(this);\r\n\r\n        this.utilService = new UtilService(this);\r\n        this.localService = this.injector.get(LocaleService);\r\n        this.treeNodeHelper = new TreeNodeHelper(this);\r\n\r\n        this.favHelper = new FavoriteHelper(this);\r\n        this.ttEventMgr = new TreeTableEventManager(this);\r\n        this.multiSelMgr = new MultiSelectionManager(this);\r\n        this.httpMgr = new LookupHttpManager(this);\r\n        this.lookupCmpMgr = new LookupComponentManager(this);\r\n        this.dialogMgr = new LookupDialogManager(this);\r\n        this.selectionMgr = new SelectionManager(this);\r\n        this.dtEventMgr = new DataTableEventManager(this);\r\n    }\r\n\r\n    showDialog(): any {\r\n        if (this.disabled || this.readonly) {\r\n            return false;\r\n        }\r\n\r\n        this.selectionMgr.initDisplayValue();\r\n        this.dictPickingSubscription = this.dictPicking({\r\n            instance: this,\r\n        }).subscribe((pr: PickingResult) => {\r\n            this.dialogMgr.canOpenDialog(pr);\r\n        });\r\n\r\n        return false;\r\n    }\r\n\r\n    /** å¤æ­æ¯å¦ä¸ºååè¡¨å¸®å© */\r\n    isDoublleList() {\r\n        return (\r\n            this.displayType === LookupGridDisplayType.NavList ||\r\n            this.displayType === LookupGridDisplayType.NavTreeList\r\n        );\r\n    }\r\n    /** å¤æ­æ¯å¦æ¾ç¤ºä¸ºæ å¸®å© */\r\n    isTree() {\r\n        return (\r\n            this.displayType.toUpperCase() === LookupGridDisplayType.TreeList\r\n        );\r\n    }\r\n\r\n    onResized(e: any) {\r\n        this.resizeCmp(e.size);\r\n        this.resized.emit(e.size);\r\n    }\r\n\r\n    onResizing(pos: IResizeEvent) {\r\n        this.resizing.emit(pos.size);\r\n        this.resizeCmp(pos.size);\r\n        if (this.isDoublleList() && this.leftComponentRef) {\r\n            this.leftComponentRef.instance.resize({\r\n                width: this.leftPanel.width,\r\n                height: this.dialogMgr.getHeight(),\r\n            });\r\n        }\r\n    }\r\n\r\n    onMaxDialog(pos: IResizeEvent) {\r\n        this.resizeCmp(pos.size);\r\n        if (this.leftPanel) {\r\n            this.leftComponentRef.instance.resize({\r\n                width: this.leftPanel.width,\r\n                height: this.dialogMgr.getHeight(),\r\n            });\r\n        }\r\n        this.dialogHeight = pos.size.height;\r\n        this.dialogContentHeight = this.dialogMgr.resetDialogContentHeight();\r\n        this.dialogMaxed.emit(pos.size);\r\n    }\r\n\r\n    resizeCmp(size?: any) {\r\n        if (!this.componentRef || !this.componentRef.instance) {\r\n            return;\r\n        }\r\n\r\n        if (!size) {\r\n            size = this.dialog.size;\r\n        }\r\n        const _size = {\r\n            width:\r\n                size.width -\r\n                this.containerMargin.left -\r\n                this.containerMargin.right,\r\n            height: this.dialogMgr.getHeight(),\r\n        };\r\n\r\n        if (this.useFavorite && this.favoritesComponentRef) {\r\n            this.favoritesComponentRef.instance.resize(_size);\r\n        }\r\n        if (this.isRecordSize) {\r\n            this.personalConf.size = this.dialog.size;\r\n            this.personalConfigService.updatePersonalConfig({\r\n                size: this.dialog.size,\r\n            });\r\n        }\r\n        if (this.isDoublleList()) {\r\n            _size.width = size.width - this.leftPanel.width - 27;\r\n        }\r\n\r\n        this.componentRef.instance.resize(_size);\r\n    }\r\n\r\n    private checkGridOptions() {\r\n        if (!this.gridOptions.idField) {\r\n            this.writeConsole(\"æªè®¾ç½®ä¸»é®å­æ®µ idField\");\r\n        }\r\n\r\n        if (!this.beforeSelectData) {\r\n            this.beforeSelectData = () => {\r\n                return of(true);\r\n            };\r\n        }\r\n\r\n        const ctxMenuLanguages =\r\n            this.localService.getValue(\"lookup.contextMenu\");\r\n\r\n        this.treeTableOptions = Object.assign(\r\n            { language: ctxMenuLanguages },\r\n            this.defaultTreeTableOptions,\r\n            this.treeTableOptions || {}\r\n        );\r\n        // this.dataTableOptions = Object.assign({}, this.defaultTreeTableOptions, this.dataTableOptions);\r\n        // this.navTreeTableOptions = Object.assign({}, this.defaultTreeTableOptions, this.navTreeTableOptions);\r\n    }\r\n\r\n    getComponentType(): Type<any> {\r\n        if (!this.displayType) {\r\n            this.displayType = \"LIST\";\r\n        }\r\n        switch (this.displayType) {\r\n            case LookupGridDisplayType.List:\r\n            case LookupGridDisplayType.NavList:\r\n            case LookupGridDisplayType.NavTreeList:\r\n                return DataTableComponent;\r\n            case LookupGridDisplayType.TreeList:\r\n                return TreeTableComponent;\r\n        }\r\n    }\r\n\r\n    showLoading(msg = \"\") {\r\n        if (this.dialog && this.dialog.modalContent && !this.loading) {\r\n            const opts = {\r\n                container: this.dialog.modalContent,\r\n                delay: 200,\r\n            };\r\n\r\n            if (msg) {\r\n                opts[\"message\"] = msg;\r\n            }\r\n\r\n            this.loading = this.loadingService.show(opts);\r\n        } else {\r\n            this.loading = this.loadingService.show();\r\n        }\r\n    }\r\n\r\n    closeLoading() {\r\n        if (this.loading) {\r\n            this.loading.close();\r\n            this.loading = null;\r\n        }\r\n\r\n        this.loadingService.clearAll();\r\n    }\r\n\r\n    getSearchColumns(resdata: any) {\r\n        const cols = resdata.columns || this.columns;\r\n        if (resdata.searchFields) {\r\n            return resdata.searchFields.map((sf) => {\r\n                const c = cols.find(\r\n                    (col) => col.field.toLowerCase() === sf.value.toLowerCase()\r\n                );\r\n                if (c) {\r\n                    sf.label = c.title;\r\n                }\r\n                return sf;\r\n            });\r\n        } else if (cols) {\r\n            return cols\r\n                .filter((c) => c.searchField)\r\n                .map((col) => {\r\n                    return {\r\n                        label: col.title,\r\n                        value: col.field,\r\n                    };\r\n                });\r\n        }\r\n        return [];\r\n    }\r\n\r\n    private initOptions(resData: LookupGridResult) {\r\n        let obser = of(true);\r\n        this.gridOptions.searchFields = this.getSearchColumns(resData);\r\n        if (resData) {\r\n            // å¦æç»ä»¶ä¸­æªè®¾ç½®æ¾ç¤ºåï¼åä½¿ç¨æå¡å¨ç«¯è¿åçè®¾ç½®ï¼ å¦åå°ä½¿ç¨ç»ä»¶ä¸­éç½®çå±ç¤ºå\r\n            if (\r\n                (!this.columns || !this.columns.length) &&\r\n                resData.columns &&\r\n                resData.columns.length\r\n            ) {\r\n                this.columns = resData.columns;\r\n            }\r\n\r\n            this.setLookupTitleText(resData);\r\n\r\n            if (\r\n                this.isDoublleList() &&\r\n                this.dialogWidth < this.navLookupDialogMinWidth &&\r\n                !this.isRecordSize\r\n            ) {\r\n                this.dialogWidth = this.navLookupDialogMinWidth;\r\n                this.dialog.reSize({ width: this.dialogWidth });\r\n            }\r\n\r\n            if (!this.customDisplayType) {\r\n                this.displayType =\r\n                    resData.displayType || this.displayType || \"LIST\";\r\n                this.changeDetector.detectChanges();\r\n                this.lookupCmpMgr.createComponentWithServerData(resData);\r\n            }\r\n\r\n            if (\r\n                this.isDoublleList() &&\r\n                resData.navigation &&\r\n                !this.leftComponentRef\r\n            ) {\r\n                this.navigationOptions = resData.navigation;\r\n                this.navigationOptions.hover = true;\r\n                this.navigationOptions.searchFields = this.getSearchColumns(\r\n                    this.navigationOptions\r\n                );\r\n                // update columns formatter\r\n                if (this.customNavFormatter) {\r\n                    this.navigationOptions.columns.forEach((col) => {\r\n                        if (this.customNavFormatter[col.field]) {\r\n                            col.formatter = this.customNavFormatter[col.field];\r\n                        }\r\n                    });\r\n\r\n                    this.navigationOptions[\"rowStyler\"] =\r\n                        this.customNavFormatter.rowStyler;\r\n                    this.navigationOptions[\"cellStyler\"] =\r\n                        this.customNavFormatter.cellStyler;\r\n                }\r\n                // 20210926 æ å¯¼èªå¸®å©ä¸­ å·¦ä¾§æ æ¯æåå±å è½½\r\n                if (this.displayType === LookupGridDisplayType.NavTreeList) {\r\n                    let _nav_treeinfo_loadtype =\r\n                        this.navigationOptions.treeInfo.loadDataType;\r\n                    if (this.loadTreeDataType !== \"default\") {\r\n                        _nav_treeinfo_loadtype =\r\n                            this.loadTreeDataType === \"loadall\"\r\n                                ? \"all\"\r\n                                : \"async\";\r\n                    }\r\n                    this.navigationOptions.treeInfo.loadDataType =\r\n                        _nav_treeinfo_loadtype;\r\n                }\r\n\r\n                obser = this.lookupCmpMgr.createLeftComponent(this.navigationOptions);\r\n            }\r\n        } else {\r\n            this.lookupCmpMgr.createContent(this.gridOptions);\r\n            this.lookupCmpMgr.createFavoriteComponent();\r\n        }\r\n\r\n        if (this.isTextChange) {\r\n            this.componentRef.instance.searchData.value = this.displayText;\r\n        }\r\n\r\n        // update columns formatter\r\n        if (this.customFormatter) {\r\n            this.columns.forEach((col) => {\r\n                if (this.customFormatter[col.field]) {\r\n                    col.formatter = this.customFormatter[col.field];\r\n                }\r\n            });\r\n\r\n            if (this.customFormatter.rowStyler) {\r\n                this.componentRef.instance.rowStyler =\r\n                    this.customFormatter.rowStyler;\r\n            }\r\n\r\n            if (this.customFormatter.cellStyler) {\r\n                this.componentRef.instance.cellStyler =\r\n                    this.customFormatter.cellStyler;\r\n            }\r\n        }\r\n\r\n        this.changeDetector.detectChanges();\r\n        return obser;\r\n    }\r\n\r\n    /**\r\n     * è®¾ç½®å¸®å©çªå£æ é¢\r\n     */\r\n    private setLookupTitleText(resData: LookupGridResult) {\r\n        if (resData.displayInfo) {\r\n            this.displayInfo = resData.displayInfo;\r\n        }\r\n\r\n        // å¦æèªå®ä¹æ é¢ï¼å°ä»¥æ­¤æ é¢ä¸ºåãå¦åå è½½æå¡å¨ç«¯è¿åçæ°æ®\r\n        if (this.title && this.title !== \"æ­¤å¤æ¾ç¤ºå¸®å©æ é¢\") {\r\n            this.displayInfo.title = this.title;\r\n        }\r\n\r\n        if (this.displayInfo && resData.title) {\r\n            if (!this.displayInfo.title) {\r\n                this.displayInfo.title = resData.title;\r\n            }\r\n        }\r\n    }\r\n\r\n    private showGetAllChildrenCheckbox() {\r\n        if (this.isTree() && this.treeInfo) {\r\n            this.enableGetAllChildNodes =\r\n                this.treeInfo.loadDataType !== \"all\" && this.treeInfo.layerType === \"pathcode\";\r\n        } else {\r\n            this.enableGetAllChildNodes = false;\r\n        }\r\n    }\r\n\r\n    initData() {\r\n        const observer = {\r\n            next: (data: LookupGridResult) => {\r\n                // æå¡å¨ç«¯åçéè¯¯ï¼è¿åNULL æ¶ï¼ç´æ¥å³é­çªå£\r\n                if (data === null) {\r\n                    this.isShow = false;\r\n                    if (this.dialog) {\r\n                        this.dialog.close();\r\n                    }\r\n                    return;\r\n                }\r\n                this.initOptions(data).subscribe(() => {\r\n                    this.selectedColumns =\r\n                        this.multiSelMgr.initSelectedColumns();\r\n                    this.favoriteColumns = this.favHelper.getFavoriteColumns();\r\n\r\n                    if (this.usePersionalConf) {\r\n                        if (!this.personalConfigService.getPersonalData()) {\r\n                            this.personalConfigService.savePersonalConfig(\r\n                                this.personalConf\r\n                            );\r\n                        }\r\n                    }\r\n                    if (!this.isTabChanged) {\r\n                        this.lookupSelectionSer.loadSelections(\r\n                            data.selectedItems || []\r\n                        );\r\n                    }\r\n\r\n                    if (this.isDoublleList()) {\r\n                        // å¯¼èªå¸®å©æ¶ï¼è®¾ç½®å·¦ä¾§éä¸­æ°æ®æ¶ï¼ä¸å è½½ä¸»æ°æ®åè¡¨ã\r\n                        if (this.navSelectedIds || this.selectFirstInNav) {\r\n                            this.loadDataWhenOpen = false;\r\n                        }\r\n                    }\r\n\r\n                    if (data['activeTab'] && !this.isTabChanged) {\r\n                        this.activeTab = 'datalist';\r\n                    }\r\n\r\n                    this.loadData(data);\r\n\r\n                    if (this.isTree()) {\r\n                        if (this.activeTab === \"datalist\") {\r\n                            const tt = this.componentRef.instance as TreeTableComponent;\r\n                            if (tt.searchData.value && this.items && this.items.length) {\r\n                                if (this.items[0].children && this.items[0].children.length) {\r\n                                    tt.toggleExpand(this.items[0], true, false);\r\n                                }\r\n                            }\r\n                        }\r\n\r\n                        this.showGetAllChildrenCheckbox();\r\n                    }\r\n                    this.isTextChange = false;\r\n                    this._searchResult = null; // æ¸ç©ºä¸´æ¶æ¥è¯¢ ç»æ\r\n                    this.closeLoading();\r\n                    // this.isReady$.next(true);\r\n                    this.isReady = true;\r\n                    this.changeDetector.detectChanges();\r\n                    this.lookupinitializationSubject.next();\r\n                });\r\n            },\r\n            error: (err: any) => {\r\n                // this.isReady$.next(true);\r\n                this.closeLoading();\r\n                this._searchResult = null; // æ¸ç©ºä¸´æ¶æ¥è¯¢ ç»æ\r\n                this.isTextChange = false;\r\n\r\n                this.hasError = true;\r\n                this.changeDetector.detectChanges();\r\n                if (typeof err === \"string\") {\r\n                    this.messagerService.error(err);\r\n                } else {\r\n                    if (err) {\r\n                        if (err.Message) {\r\n                            this.messagerService.error(err.Message);\r\n                        } else {\r\n                            if (err.error) {\r\n                                this.messagerService.error(err.error.Message);\r\n                            } else {\r\n                                this.messagerService.error(\r\n                                    \"åºç¨æå¡å¨éè¯¯,è¯·èç³»ç³»ç»ç®¡çåï¼\"\r\n                                );\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            },\r\n        };\r\n\r\n        let p: any = {\r\n            pageInfo: {\r\n                pageSize: this.pageSize || 20,\r\n                pageIndex: 1,\r\n            },\r\n        };\r\n        let t: LOAD_DATA_TYPE = \"all\";\r\n        if (this.isTextChange) {\r\n            this._searchState = { \r\n                field: \"*\",\r\n                value: this.displayText\r\n            }\r\n            p = {\r\n                search: this._searchState\r\n            };\r\n            \r\n            t = 'search';\r\n        }\r\n\r\n        if (!this.isTabChanged && this.enableToSelect) {\r\n            const vals = this.selectionMgr.getSelectedIds();\r\n            if (vals && vals.length) {\r\n                p[\"selectedInfo\"] = {\r\n                    selected: true,\r\n                    selectedIds: vals,\r\n                };\r\n            } else {\r\n                if (this[\"selectedIds\"]) {\r\n                    p[\"selectedInfo\"] = {\r\n                        selected: true,\r\n                        selectedIds: this[\"selectedIds\"],\r\n                    };\r\n                }\r\n            }\r\n        }\r\n\r\n        this.showLoading();\r\n        this.hasError = false;\r\n        this.httpMgr.lookupRequest(p, t).pipe(\r\n            map((restData: LookupGridResult) => {\r\n                if (restData) {\r\n                    restData.selectedItems = restData[\"selectedData\"] || [];\r\n                } else {\r\n                    if (restData && typeof restData === \"object\") {\r\n                        restData.selectedItems = [];\r\n                    }\r\n                }\r\n                return restData === null ? false : restData;\r\n            })\r\n        ).subscribe(observer);\r\n    }\r\n\r\n    loadData(resData?: LookupGridResult, rebindEvent = true) {\r\n        if (this.activeTab === \"datalist\") {\r\n            if (this.useFavorite && !this.isTree()) {\r\n                this.favHelper.updateFavoritesStatus(resData.items);\r\n            }\r\n\r\n            switch (this.displayType) {\r\n                case LookupGridDisplayType.NavList:\r\n                case LookupGridDisplayType.NavTreeList:\r\n                case LookupGridDisplayType.List:\r\n                    this.loadDataTableData(resData);\r\n                    if (rebindEvent) {\r\n                        this.dtEventMgr.bindDataTableEvent();\r\n                    }\r\n                    break;\r\n                case LookupGridDisplayType.TreeList:\r\n                    this.loadTreeTableData(resData, rebindEvent);\r\n                    break;\r\n            }\r\n        } else if (this.activeTab === \"favorite\") {\r\n            this.loadFavData(resData);\r\n        }\r\n\r\n        // éä¸­æ°æ®\r\n        this.selectionMgr.selectCurrentValue();\r\n    }\r\n\r\n    private loadFavData(result: LookupGridResult) {\r\n        // å è½½æ¶èæ°æ®\r\n        if (this.useFavorite) {\r\n            if (this.isTree()) {\r\n                this.setTreeInfo(result);\r\n                const treeNodes = this.favHelper.initFavoriteTreeData(\r\n                    result.items\r\n                );\r\n                const treeData = this.treeNodeHelper\r\n                    .flatTreeNodes(treeNodes)\r\n                    .map((n) => {\r\n                        n.data[\"_addtional_\"] = n[\"addtional\"];\r\n                        return n.data;\r\n                    });\r\n                this.lookupSelectionSer.initFavoriteItems(treeData);\r\n\r\n                setTimeout(() => {\r\n                    this.favoritesComponentRef.instance.scrollToY(1);\r\n                });\r\n            } else {\r\n                this.lookupSelectionSer.initFavoriteItems(result.items);\r\n            }\r\n\r\n            this.favHelper.loadFavoritesData(result);\r\n        }\r\n    }\r\n\r\n    loadDataTableData(resData?: LookupGridResult) {\r\n        if (resData) {\r\n            if (this.gridOptions) {\r\n                if (resData && resData.columns && resData.columns.length) {\r\n                    if (\r\n                        !this.gridOptions.columns ||\r\n                        !this.gridOptions.columns.length\r\n                    ) {\r\n                        this.columns = resData.columns;\r\n                    }\r\n                }\r\n\r\n                this.items = resData.items;\r\n                this.total = resData.total || resData.items.length;\r\n                if ( resData.searchFields ) {\r\n                    this.gridOptions.searchFields = this.getSearchColumns(resData);\r\n                }\r\n                if (resData.pageInfo) {\r\n                    if (\r\n                        resData.pageInfo.pageList &&\r\n                        (!this.pageList || !this.pageList.length)\r\n                    ) {\r\n                        this.pageList = resData.pageInfo.pageList;\r\n                    }\r\n                    this.pagination = resData.pageInfo.enablePager;\r\n                    this.pageIndex = resData.pageInfo.pageIndex;\r\n                    this.pageSize = resData.pageInfo.pageSize;\r\n                } else {\r\n                    this.pagination = false;\r\n                }\r\n            } else {\r\n                this.gridOptions = resData as LookupGridOptions;\r\n            }\r\n        }\r\n\r\n        this.updateDataTable(this.gridOptions);\r\n    }\r\n\r\n    private updateDataTable(opts: any) {\r\n        if (opts) {\r\n            const dt = this.componentRef.instance as DataTableComponent;\r\n\r\n            if (!dt.columns || dt.columns.length === 0) {\r\n                dt.columns = this.gridOptions.columns;\r\n            }\r\n\r\n            dt.allColumnsTitle = this.allColumnsTitle;\r\n            dt.searchFields = opts.searchFields;\r\n            dt.pagination = opts.pagination;\r\n            dt.pageList = this.pageList;\r\n            dt.remoteSort = this.remoteSort;\r\n\r\n            if (this.loadDataWhenOpen) {\r\n                dt.loadData({\r\n                    pageSize: opts.pageSize,\r\n                    pageIndex: this.gridOptions.pageIndex,\r\n                    total: this.gridOptions.total,\r\n                    data: this.gridOptions.items,\r\n                });\r\n                dt.cd.markForCheck();\r\n            }\r\n            this.loadSuccess.emit();\r\n        }\r\n    }\r\n\r\n    private setTreeInfo(resData) {\r\n        if (!resData) {\r\n            return;\r\n        }\r\n\r\n        let _treeInfo = null;\r\n        if (resData.treeInfo) {\r\n            const onlySelectLeaf = resData.treeInfo.onlySelectLeaf;\r\n            let _osl: ONLY_SELECT_LEAF = \"no\";\r\n            if (onlySelectLeaf !== undefined) {\r\n                _osl = onlySelectLeaf ? \"yes\" : \"no\";\r\n            }\r\n            _treeInfo = { ...resData.treeInfo, onlySelectLeaf: _osl };\r\n        }\r\n\r\n        if (this.gridOptions.treeInfo) {\r\n            const treeInfo = this.gridOptions.treeInfo;\r\n            if (treeInfo) {\r\n                if (\r\n                    treeInfo.onlySelectLeaf === undefined ||\r\n                    treeInfo.onlySelectLeaf === null\r\n                ) {\r\n                    treeInfo.onlySelectLeaf = \"no\";\r\n                }\r\n\r\n                if (typeof treeInfo.onlySelectLeaf === \"boolean\") {\r\n                    treeInfo.onlySelectLeaf = treeInfo.onlySelectLeaf ? \"yes\" : \"no\";\r\n                }\r\n\r\n                // 20210902\r\n                if (this.loadTreeDataType === \"default\") {\r\n                    treeInfo.loadDataType = _treeInfo.loadDataType;\r\n                } else {\r\n                    treeInfo.loadDataType =\r\n                        this.loadTreeDataType === \"loadall\" ? \"all\" : \"async\";\r\n                }\r\n\r\n                if (treeInfo.onlySelectLeaf !== \"default\") {\r\n                    _treeInfo = Object.assign(_treeInfo, treeInfo);\r\n                }\r\n            }\r\n        }\r\n\r\n        this.treeInfo = _treeInfo;\r\n    }\r\n\r\n    private loadTreeTableData(resData?: LookupGridResult, rebindEvent = true) {\r\n        const items = resData ? resData.items : this.gridOptions.items;\r\n        this.items = items;\r\n\r\n        if (resData) {\r\n            this.setTreeInfo(resData);\r\n\r\n            const treeInfo = this.gridOptions.treeInfo;\r\n            if (!treeInfo[\"treeDataIsInit\"]) {\r\n                if (treeInfo.layerType.toLowerCase() === \"pathcode\") {\r\n                    this.items = this.lookupUtils.makeTree(\r\n                        this.items,\r\n                        treeInfo\r\n                    );\r\n                } else {\r\n                    this.items = this.lookupUtils.makeTreeWithParentID(\r\n                        this.items,\r\n                        \"\",\r\n                        `${treeInfo.dataField}.${treeInfo.parentField}`,\r\n                        this.idField\r\n                    );\r\n                }\r\n            }\r\n        }\r\n\r\n        if (this.componentRef.instance instanceof TreeTableComponent) {\r\n            const tt = this.componentRef.instance as TreeTableComponent;\r\n            if (this.treeInfo) {\r\n                tt.loadDataType = this.treeInfo.loadDataType;\r\n            }\r\n\r\n            if (!this.columns || !this.columns.length) {\r\n                tt.columns = resData.columns || [];\r\n                this.gridOptions.columns = tt.columns;\r\n            }\r\n\r\n            const isLoadAllTreeData = () => {\r\n                if (this.loadTreeDataType === \"default\") {\r\n                    return tt.loadDataType === \"all\";\r\n                } else {\r\n                    return this.loadTreeDataType === \"loadall\";\r\n                }\r\n            };\r\n\r\n            if (rebindEvent) {\r\n                this.ttEventMgr.bindTreetableEvent();\r\n            }\r\n            const isLoadAll = isLoadAllTreeData();\r\n\r\n            /** å®æ´æ èç¹æ£æ¥ By Lucas 20200302 */\r\n            \r\n            this.items = this.checkNodeCanBeSelect(this.items, isLoadAll);\r\n            tt.keepSelect = true;\r\n\r\n            if (this.useFavorite) {\r\n                this.favHelper.updateFavoritesStatus(this.items);\r\n            }\r\n\r\n            if (this.loadDataWhenOpen) {\r\n                tt.loadData(this.items);\r\n            }\r\n            tt.resize();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * å¨æå®æ´æ ä¸­ï¼æé¨åèç¹å ä¸ºæ¡ä»¶è¢«è¿æ»¤ï¼ä¸ºæ¾ç¤ºå®æ´æ ï¼\r\n     * è¿äºèç¹å¨è¿è¡æ¶æ¯ä¸åè®¸è¢«éä¸­ç, è¿åæ°çèç¹æ°ç»\r\n     * By Lucas 20200302\r\n     */\r\n    checkNodeCanBeSelect(nodes, isAllTreeData = false): TreeNode[] {\r\n        if (nodes && nodes.length) {\r\n            return nodes.map((node: TreeNode) => {\r\n                if (node.hasOwnProperty(\"addtional\")) {\r\n                    node.selectable = !node[\"addtional\"];\r\n                }\r\n\r\n                if (node.children && node.children.length) {\r\n                    this.checkNodeCanBeSelect(node.children, isAllTreeData);\r\n                } else {\r\n                    if (isAllTreeData && (!this._searchState || !this._searchState.value)) {\r\n                        node.leaf = true;\r\n                    }\r\n                }\r\n\r\n                return node;\r\n            });\r\n        }\r\n        return nodes;\r\n    }\r\n\r\n    onChanges(val) {\r\n        if (!val) {\r\n            this.onClear();\r\n        } else {\r\n            this.displayText = val;\r\n            this.isTextChange = this.originalText !== this.displayText;\r\n            if (this.nosearch) {\r\n                this.setModelValue(val);\r\n                this.clearMappings.emit({ instance: this, value: val, });\r\n            }\r\n\r\n            this.onModelTouched(val);\r\n            this.valueChanged.emit(val);\r\n            this.textChanged.emit(val);\r\n        }\r\n    }\r\n\r\n    onClear(emit = true) {\r\n        this.isTextChange = false;\r\n        this.displayText = \"\";\r\n        this.displayValue = \"\";\r\n        this.originalText = \"\";\r\n        this.extendInfo = \"\";\r\n        this.setModelValue(\"\");\r\n        if (this.mappingFn) {\r\n            this.mappingFn(null, this.mapFields);\r\n        } else {\r\n            if (this.mapFields) {\r\n                const bindingData = this.selectionMgr.getBindingData();\r\n                if (bindingData) {\r\n                    this.defaultMapping.lookupFieldMap(\r\n                        null,\r\n                        this.mapFields,\r\n                        bindingData\r\n                    );\r\n                }\r\n            }\r\n        }\r\n        this.multiSelMgr.clear();\r\n        if (emit) {\r\n            this.clear.emit();\r\n        }\r\n    }\r\n\r\n    clearValue(emit = true) {\r\n        this.onClear(emit);\r\n    }\r\n\r\n    selectItem(rowData?: any) {\r\n        let selectedRow = null;\r\n        if (rowData) {\r\n            selectedRow = rowData;\r\n        } else {\r\n            selectedRow = this.selections;\r\n\r\n            if (!selectedRow) {\r\n                selectedRow = null;\r\n            } else {\r\n                if (Array.isArray(selectedRow) && !selectedRow.length) {\r\n                    selectedRow = null;\r\n                }\r\n            }\r\n        }\r\n\r\n        // å¦æå®ä¹èªå®ä¹å¤çç¡®å®äºä»¶ï¼åç±èªå®ä¹äºä»¶å¤çåé¢çé»è¾\r\n        if (this.okHandler) {\r\n            this.okHandler({ data: selectedRow, instance: this });\r\n        } else {\r\n            if (this.beforeSelectData) {\r\n                const bsdResult = this.beforeSelectData({\r\n                    instance: this,\r\n                    data: selectedRow,\r\n                });\r\n                if (bsdResult && bsdResult.subscribe) {\r\n                    bsdResult.subscribe((e: any) => {\r\n                        this._beforeSelectDataCallBack(e, selectedRow);\r\n                    });\r\n                } else {\r\n                    this.writeConsole('å¸®å©æ°æ®éä¸­åäºä»¶æªè¿åå¼æè¿åç±»åéObservable, è¯·æ£æ¥', 'error');\r\n                }\r\n            } else {\r\n                this._beforeSelectDataCallBack(true, selectedRow);\r\n            }\r\n        }\r\n    }\r\n\r\n    private getParentPathCode(rows) {\r\n        const maxBy = (arr, fn) =>\r\n            Math.max(\r\n                ...arr.map(typeof fn === \"function\" ? fn : (val) => val[fn])\r\n            );\r\n\r\n        const { dataField, pathField, layerField } = this.treeInfo;\r\n        const maxLayer = maxBy(rows, (x) => x[dataField][layerField]);\r\n\r\n        for (let i = 1; i <= maxLayer; i++) {\r\n            const _rows = rows.filter((n) => n[dataField][layerField] === i);\r\n            if (_rows && _rows.length && _rows.length < rows.length) {\r\n                _rows.forEach((r) => {\r\n                    const patchCode = r[dataField][pathField];\r\n                    const _rows2 = rows.filter(\r\n                        (n) =>\r\n                            n[dataField][pathField] !== patchCode &&\r\n                            n[dataField][pathField].indexOf(patchCode) === 0\r\n                    );\r\n                    if (_rows2 && _rows2.length) {\r\n                        rows = rows.filter(\r\n                            (n) => n[dataField][pathField] !== patchCode\r\n                        );\r\n                    }\r\n                });\r\n            }\r\n        }\r\n\r\n        return rows;\r\n    }\r\n\r\n    private _beforeSelectDataCallBack(e, selectedRow) {\r\n        let canSelect = e;\r\n        let message = \"\";\r\n        if (typeof e === \"boolean\") {\r\n            canSelect = e;\r\n        } else {\r\n            if (typeof e === \"object\") {\r\n                canSelect = e.canSelect;\r\n                message = e.message;\r\n            } else {\r\n                canSelect = false;\r\n            }\r\n        }\r\n\r\n        if (!selectedRow) {\r\n            message = this.mustChoosAdatarow;\r\n            canSelect = false;\r\n        }\r\n\r\n        if (canSelect) {\r\n            let selectedRows$ = of(selectedRow);\r\n            // å¤é æ å¸®å© å¼æ­¥å è½½ åçº§ç  å¼å¯åæ­¥éæ© æåå«ä¸çº§\r\n            if (!this.singleSelect && this.enableCascade && this.isTree() ) {\r\n                if (this.treeInfo.loadDataType !== \"all\" && this.treeInfo.layerType === \"pathcode\" && this.isGetAllChidlNodes) {\r\n                    let parentsIds = this.getParentPathCode(selectedRow);\r\n                    if (parentsIds && parentsIds.length) {\r\n                        parentsIds = parentsIds.map(\r\n                            (n) =>\r\n                                n[this.treeInfo.dataField][this.treeInfo.pathField]\r\n                        );\r\n                        this.showLoading();\r\n                        selectedRows$ = this.httpMgr\r\n                            .getData({ parentsIds }, \"allChildren\")\r\n                            .pipe(\r\n                                map((r: LookupGridResult) => {\r\n                                    const items = r.items\r\n                                        ? r.items.map((d) => d.data)\r\n                                        : [];\r\n                                    const allitems = [...selectedRow, ...items];\r\n                                    let ids = allitems.map((n) => n[this.idField]);\r\n                                    ids = Array.from(new Set(ids));\r\n                                    return ids.map((n) =>\r\n                                        allitems.find((a) => a[this.idField] === n)\r\n                                    );\r\n                                })\r\n                            );\r\n                    }\r\n                }\r\n            }\r\n\r\n            selectedRows$.subscribe((rows) => {\r\n                this.closeLoading();\r\n                this.updateControlValue(rows);\r\n                if (!this.useTip || !rows) {\r\n                    return;\r\n                }\r\n                if (this.useTip) {\r\n                    this.personalConfigService.updateQueckSelected(\r\n                        rows,\r\n                        this.localService.localeId\r\n                    );\r\n                }\r\n            });\r\n        } else {\r\n            if (message) {\r\n                if (this.notifyService) {\r\n                    this.notifyService.warning(message);\r\n                } else {\r\n                    this.messagerService.warning(message, \"\", true, () => {\r\n                        this.dialog.el.nativeElement.click();\r\n                    });\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private updateControlValue(selectedRow) {\r\n        if (selectedRow) {\r\n            this.setDisplayText(selectedRow);\r\n            if (this.mappingFn) {\r\n                this.mappingFn(selectedRow, this.mapFields, this.bindingData);\r\n            } else {\r\n                if (this.mapFields && this.bindingData) {\r\n                    this.defaultMapping.lookupFieldMap(\r\n                        selectedRow,\r\n                        this.mapFields,\r\n                        this.bindingData\r\n                    );\r\n                }\r\n            }\r\n            this.setModelValue(this.displayText);\r\n            if (this[\"inDatagrid\"] && selectedRow) {\r\n                const selectItems = Array.isArray(selectedRow)\r\n                    ? selectedRow\r\n                    : [selectedRow];\r\n                this.updateBindData(selectItems);\r\n            }\r\n            this.selectedData.emit(selectedRow);\r\n            this.runDictPickedEvent(selectedRow);\r\n            this.isTextChange = false;\r\n        } else {\r\n            if (document.activeElement) {\r\n                (document.activeElement as HTMLButtonElement).blur();\r\n            }\r\n            this.messagerService.warning(this.mustChoosAdatarow);\r\n        }\r\n    }\r\n\r\n    private updateBindData(selectedRow) {\r\n        if (!this.mapFields) {\r\n            return;\r\n        }\r\n\r\n        const helpFields = Object.keys(this.mapFields);\r\n        if (\r\n            this.ngControl &&\r\n            this.ngControl.formDirective &&\r\n            this.ngControl.formDirective.form &&\r\n            this.ngControl.formDirective.form.bindingData\r\n        ) {\r\n            const bindingData = this.ngControl.formDirective.form.bindingData;\r\n\r\n            if (bindingData) {\r\n                helpFields.forEach((helpField: any) => {\r\n                    this.mapFields[helpField]\r\n                        .split(\",\")\r\n                        .forEach((formField: any) => {\r\n                            const val = selectedRow\r\n                                .map((r) => {\r\n                                    return this.utils.getValue(helpField, r);\r\n                                })\r\n                                .join(this.multipleChoiceSeparator);\r\n                            this.utils.setValue(bindingData, formField, val);\r\n                        });\r\n                });\r\n            }\r\n\r\n            // if (bindingData.setValue) {\r\n            //     const bindingPath = this.ngControl.formDirective.form.bindingPath;\r\n            //     let pathArr: string[] = [];\r\n            //     if (bindingPath) {\r\n            //         pathArr = bindingPath.split('/').filter(n => n !== '');\r\n            //     }\r\n\r\n            //     helpFields.forEach((helpField: any) => {\r\n            //         this.mapFields[helpField].split(',').forEach((formField: any) => {\r\n            //             const fieldPaths = pathArr.concat(formField.split('.'));\r\n            //             const val = selectedRow.map(r => {\r\n            //                 return this.utils.getValue(formField, r);\r\n            //             }).join(this.multipleChoiceSeparator);\r\n            //             bindingData.setValue(pathArr.concat(fieldPaths), val, true, true);\r\n            //         });\r\n            //     });\r\n            // }\r\n        } else {\r\n            // if (this.bindingData) {\r\n            //     helpFields.forEach((helpField: any) => {\r\n            //         this.mapFields[helpField].split(',').forEach((formField: any) => {\r\n            //             const val = selectedRow.map(r => {\r\n            //                 return this.utils.getValue(formField, r);\r\n            //             }).join(this.multipleChoiceSeparator);\r\n            //             this.utils.setValue(this.bindingData, formField, val);\r\n            //         });\r\n            //     });\r\n            // }\r\n        }\r\n    }\r\n\r\n    private getExtendInfoFields(isHelpData = true) {\r\n        if (!this.extInfoFields) {\r\n            this.writeConsole(`æªè®¾ç½®æ©å±å­æ®µã`);\r\n            return [];\r\n        }\r\n        const tipFieldArr = this.extInfoFields.split(\",\");\r\n\r\n        if (isHelpData) {\r\n            let extendInfoFields = [];\r\n            extendInfoFields = tipFieldArr.map((tf) => {\r\n                const mapKey = Object.keys(this.mapFields).find((k) => {\r\n                    return this.mapFields[k] === tf;\r\n                });\r\n\r\n                if (mapKey) {\r\n                    return mapKey;\r\n                } else {\r\n                    this.writeConsole(`å¨å¸®å©æ å°å­æ®µä¸­æªæ¾å°${tf}`);\r\n                    return \"\";\r\n                }\r\n            });\r\n            return extendInfoFields;\r\n        }\r\n\r\n        return tipFieldArr;\r\n    }\r\n\r\n    onUpdateExtendInfo() {\r\n        const jsonData = this.selectionMgr.getBindingData();\r\n        this.updateExtendInfo(jsonData, false);\r\n    }\r\n\r\n    // éä¸­å¸®å©æ°æ®åï¼æ´æ°æ©å±ä¿¡æ¯\r\n    private updateExtendInfo(data: any, isHelpData = true) {\r\n        if (data) {\r\n            if (this.extInfoFormatter) {\r\n                if (Array.isArray(data)) {\r\n                    const tipString = data.map((n) => {\r\n                        return this.getExtendInfoText(n);\r\n                    });\r\n                    this.extendInfo = tipString.join(\"ï¼\");\r\n                } else {\r\n                    this.extendInfo = this.getExtendInfoText(data);\r\n                }\r\n            } else {\r\n                const extendInfoFields = this.getExtendInfoFields(isHelpData);\r\n                if (extendInfoFields && extendInfoFields.length) {\r\n                    if (Array.isArray(data)) {\r\n                        const tipString = data.map((n) => {\r\n                            return this.getExtendInfoText(n, extendInfoFields);\r\n                        });\r\n                        this.extendInfo = tipString.join(\"ï¼\");\r\n                    } else {\r\n                        this.extendInfo = this.getExtendInfoText(\r\n                            data,\r\n                            extendInfoFields\r\n                        );\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private getExtendInfoText(itemData, fields = null) {\r\n        if (typeof this.extInfoFormatter === \"function\") {\r\n            return this.extInfoFormatter({\r\n                bindingData: itemData,\r\n                instance: this,\r\n            });\r\n        } else {\r\n            const tipString = [];\r\n            const tipValues = fields.map((t) => {\r\n                const tfv = this.utils.getValue(t, itemData);\r\n                tipString.push(tfv);\r\n                return { [t]: tfv };\r\n            });\r\n            return tipString.join(\" \");\r\n        }\r\n    }\r\n\r\n    private getDisplayText(rows: any) {\r\n        const df = this.displayFields\r\n            ? this.displayFields.split(\",\")\r\n            : [this.textField];\r\n        const txtArr = rows.map((r) => {\r\n            const t = [];\r\n            df.forEach((n) => {\r\n                t.push(this.utils.getValue(n, r));\r\n            });\r\n            return t.join(this.displayTextSeparator);\r\n        });\r\n\r\n        if (this.gridOptions.singleSelect) {\r\n            return txtArr.join(\"\");\r\n        } else {\r\n            if (this.displayFields) {\r\n                return txtArr.map((t) => \"[\" + t + \"]\").join(\",\");\r\n            } else {\r\n                return txtArr.join(\",\");\r\n            }\r\n        }\r\n    }\r\n\r\n    private setDisplayText(selectedRow: any) {\r\n        this.originalText = this.displayText;\r\n\r\n        if (this.gridOptions.singleSelect) {\r\n            if (this.displayFormatter) {\r\n                this.displayText = this.utils.getValue(\r\n                    this.textField,\r\n                    selectedRow\r\n                );\r\n                if (!this.isTree()) {\r\n                    this.displayText = this.displayFormatter(\r\n                        this.displayText,\r\n                        [selectedRow],\r\n                        {\r\n                            lookup: this,\r\n                            datatable: this.componentRef\r\n                                .instance as DataTableComponent,\r\n                        }\r\n                    );\r\n                } else {\r\n                    const tt = this.componentRef.instance as TreeTableComponent;\r\n                    this.displayText = this.displayFormatter(\r\n                        this.displayText,\r\n                        [selectedRow],\r\n                        { lookup: this, tree: tt }\r\n                    );\r\n                }\r\n            } else {\r\n                this.displayText = this.getDisplayText([selectedRow]);\r\n            }\r\n            this.displayValue = selectedRow[this.valueField];\r\n        } else {\r\n            if (selectedRow.length) {\r\n                if (this.displayFormatter) {\r\n                    this.displayText = selectedRow\r\n                        .map((r) => {\r\n                            return this.utils.getValue(this.textField, r);\r\n                        })\r\n                        .join(this.multipleChoiceSeparator);\r\n                    if (!this.isTree()) {\r\n                        this.displayText = this.displayFormatter(\r\n                            this.displayText,\r\n                            selectedRow,\r\n                            {\r\n                                lookup: this,\r\n                                datatable: this.componentRef\r\n                                    .instance as DataTableComponent,\r\n                            }\r\n                        );\r\n                    } else {\r\n                        const tt = this.componentRef\r\n                            .instance as TreeTableComponent;\r\n                        this.displayText = this.displayFormatter(\r\n                            this.displayText,\r\n                            selectedRow,\r\n                            { lookup: this, tree: tt }\r\n                        );\r\n                    }\r\n                } else {\r\n                    this.displayText = this.getDisplayText(selectedRow);\r\n                }\r\n\r\n                this.displayValue = selectedRow\r\n                    .map((r) => {\r\n                        return this.utils.getValue(this.valueField, r);\r\n                    })\r\n                    .join(this.multipleChoiceSeparator);\r\n            }\r\n        }\r\n        this.originalText = this.displayText;\r\n    }\r\n\r\n    runDictPickedEvent(rowData: any) {\r\n        if (this.dictPicked) {\r\n            if (this.okButton) {\r\n                this.okButton.nativeElement.disabled = true;\r\n            }\r\n            this.dictPickedSubscription = this.dictPicked(rowData).subscribe(\r\n                (v: any) => {\r\n                    if (this.okButton) {\r\n                        this.okButton.nativeElement.disabled = false;\r\n                    }\r\n                    if (typeof v === \"boolean\") {\r\n                        if (v) {\r\n                            this.closeDialog(rowData);\r\n                        }\r\n                    } else if (\r\n                        typeof v === \"object\" &&\r\n                        v.closeDialog !== undefined &&\r\n                        !v.closeDialog\r\n                    ) {\r\n                        if (v.message) {\r\n                            this.messagerService.warning(v.message);\r\n                        } else {\r\n                            this.closeDialog(rowData);\r\n                        }\r\n                    } else {\r\n                        this.closeDialog(rowData);\r\n                    }\r\n                }\r\n            );\r\n        } else {\r\n            this.closeDialog(rowData);\r\n        }\r\n    }\r\n\r\n    private focusToInput(): void {\r\n        this.zone.runOutsideAngular(() => {\r\n            setTimeout(() => {\r\n                if (this.inputGroup && this.inputGroup.textbox) {\r\n                    this.inputGroup.textbox.nativeElement.focus();\r\n                }\r\n            });\r\n        });\r\n    }\r\n\r\n    closeDialog(rowData = null) {\r\n        this.isShow = false;\r\n        if (this.dialog) {\r\n            this.dialog.close();\r\n        }\r\n\r\n        if (rowData) {\r\n            this.multiSelMgr.save(rowData);\r\n        }\r\n\r\n        this.focusToInput();\r\n    }\r\n\r\n    cancelSelect() {\r\n        this.closeDialog();\r\n        this.isTextChange = false;\r\n        if (!this.nosearch) {\r\n            this.displayText = this.originalText;\r\n            this.setModelValue(this.displayText);\r\n        }\r\n\r\n        if (this.cancelHandler) {\r\n            this.cancelHandler(this);\r\n        }\r\n    }\r\n\r\n    setModelValue(v) {\r\n        if (this.onModelChange) {\r\n            this.onModelChange(v);\r\n            this.valueChanged.emit(v);\r\n        }\r\n    }\r\n\r\n    // æ°æ®åè¡¨ï¼æ¶èï¼ å·²éæ°æ® tab é¡µåæ¢\r\n    onTabChange(e: any) {\r\n        this.activeTab = e.tabIndex;\r\n        this.personalConf.tabIndex = this.activeTab;\r\n        const _firstChange = this.isTabChanged;\r\n        this.isTabChanged = true;\r\n        this.personalConfigService.updatePersonalConfig({\r\n            tabIndex: e.tabIndex,\r\n        });\r\n\r\n        if (this.activeTab === \"datalist\") {\r\n            if (this.isDoublleList() && !this.leftComponentRef) {\r\n                if (this.navigationOptions) {\r\n                    this.lookupCmpMgr.createLeftComponent(\r\n                        this.navigationOptions\r\n                    );\r\n                } else {\r\n                    this.initData();\r\n                    return;\r\n                }\r\n            }\r\n\r\n            if ((!this.items || !this.items.length) && (!this._searchState || !this._searchState.value) ) {\r\n                this.initData();\r\n            } else {\r\n                if (!_firstChange) {\r\n                    if (this.isTree()) {\r\n                        this.loadTreeTableData();\r\n                    } else {\r\n                        this.loadDataTableData();\r\n                        this.dtEventMgr.bindDataTableEvent();\r\n                    }\r\n                }\r\n                // this.selectionMgr.selectCurrentValue();\r\n            }\r\n            this.showGetAllChildrenCheckbox();\r\n        } else {\r\n            if (this.activeTab === \"favorite\") {\r\n                if (this.isTree()) {\r\n                    this.initData();\r\n                } else {\r\n                    if (\r\n                        !this.favoriteItems ||\r\n                        !this.favoriteItems.length ||\r\n                        this.favoriteItems.length !== this.favHelper.getFavoritIds().length\r\n                    ) {\r\n                        this.initData();\r\n                    } else if (!_firstChange) {\r\n                        this.favHelper._loadFavoriteData(this.favoriteItems);\r\n                        // this.selectionMgr.selectCurrentValue();\r\n                    }\r\n                    //  else {\r\n                    //     this.selectionMgr.selectCurrentValue();\r\n                    // }\r\n                }\r\n            }\r\n        }\r\n\r\n        this.changeDetector.detectChanges();\r\n        setTimeout(() => {\r\n            this.resizeCmp();\r\n            if (this.isTree()) {\r\n                const y = this.componentRef.instance.state.scrollY;\r\n                this.componentRef.instance.scrollToY(y, 0);\r\n\r\n                if (this.enableCascade) {\r\n                    this.ttEventMgr.cascadeValueChanged(this.cascadeStatus);\r\n                }\r\n            }\r\n            this.selectionMgr.selectCurrentValue();\r\n        });\r\n    }\r\n\r\n    //#region  Tag View ----------------------------------------------------------------------\r\n    private registerMouseEventForTagView() {\r\n        if (this.enableClear) {\r\n            this.tagbox.nativeElement.addEventListener(\r\n                \"mouseenter\",\r\n                this.onTagboxMouseEnter.bind(this)\r\n            );\r\n            this.tagbox.nativeElement.addEventListener(\r\n                \"mouseleave\",\r\n                this.onTagboxMouseLeave.bind(this)\r\n            );\r\n        }\r\n    }\r\n\r\n    private toggleClearIcon(event: any, isShow = false) {\r\n        const str = isShow ? \"\" : \"none\";\r\n        const clearIcon = event.target.querySelector(\".input-group-clear\");\r\n        if (clearIcon) {\r\n            clearIcon.style.display = str;\r\n        }\r\n    }\r\n\r\n    private onTagboxMouseEnter(event) {\r\n        if (this.displayText && this.enableClear) {\r\n            if (!this.readonly && !this.disabled) {\r\n                this.showTagboxClearButton = true;\r\n            }\r\n        }\r\n        if (this.showTagboxClearButton) {\r\n            this.toggleClearIcon(event, true);\r\n        }\r\n    }\r\n\r\n    private onTagboxMouseLeave(event) {\r\n        this.toggleClearIcon(event);\r\n    }\r\n\r\n    onRemoveSelectItem($event, txt) {\r\n        $event.stopPropagation();\r\n        const textArray = Array.from(this.displayTextList);\r\n        const removedIndex = this.displayTextList.indexOf(txt);\r\n        textArray.splice(removedIndex, 1);\r\n        this.displayText = textArray.join(this.multipleChoiceSeparator);\r\n        this.originalText = this.displayText;\r\n        this.setModelValue(this.displayText);\r\n\r\n\r\n        if (this.displayValue) {\r\n            const vals = this.displayValue.split(this.multipleChoiceSeparator);\r\n            vals.splice(removedIndex, 1);\r\n            this.displayValue = vals.join(this.multipleChoiceSeparator);\r\n        }\r\n\r\n        if (this.mapFields) {\r\n            this.updateOtherFieldDataWhenTagremoved(removedIndex);\r\n        }\r\n\r\n        this.tagRemoved.emit({ removedIndex, instance: this });\r\n    }\r\n\r\n    private updateOtherFieldDataWhenTagremoved(removedIndex) {\r\n        const helpFields = Object.keys(this.mapFields);\r\n        const textFieldIndex = helpFields.indexOf(this.textField);\r\n\r\n        if (\r\n            this.ngControl &&\r\n            this.ngControl.formDirective &&\r\n            this.ngControl.formDirective.form &&\r\n            this.ngControl.formDirective.form.bindingData\r\n        ) {\r\n            const bindingData = this.ngControl.formDirective.form.bindingData;\r\n            if (bindingData.setValue) {\r\n                const bindingPath =\r\n                    this.ngControl.formDirective.form.bindingPath;\r\n                let pathArr: string[] = [];\r\n                if (bindingPath) {\r\n                    pathArr = bindingPath.split(\"/\").filter((n) => n !== \"\");\r\n                }\r\n\r\n                helpFields.forEach((helpField: any) => {\r\n                    this.mapFields[helpField]\r\n                        .split(\",\")\r\n                        .forEach((formField: any) => {\r\n                            const fieldPaths = pathArr.concat(\r\n                                formField.split(\".\")\r\n                            );\r\n                            const val = bindingData.getValue(fieldPaths);\r\n                            const valArr = val.split(\r\n                                this.multipleChoiceSeparator\r\n                            );\r\n                            valArr.splice(removedIndex, 1);\r\n                            const newVal = valArr.join(\r\n                                this.multipleChoiceSeparator\r\n                            );\r\n                            bindingData.setValue(\r\n                                pathArr.concat(fieldPaths),\r\n                                newVal,\r\n                                true,\r\n                                true\r\n                            );\r\n                        });\r\n                });\r\n            }\r\n        } else {\r\n            if (this.bindingData) {\r\n                if (textFieldIndex > -1) {\r\n                    helpFields.splice(textFieldIndex, 1);\r\n                }\r\n                helpFields.forEach((helpField: any) => {\r\n                    this.mapFields[helpField]\r\n                        .split(\",\")\r\n                        .forEach((formField: any) => {\r\n                            const val = this.utils.getValue(\r\n                                formField,\r\n                                this.bindingData\r\n                            );\r\n                            const valArr = val.split(\r\n                                this.multipleChoiceSeparator\r\n                            );\r\n                            valArr.splice(removedIndex, 1);\r\n                            const newVal = valArr.join(\r\n                                this.multipleChoiceSeparator\r\n                            );\r\n                            this.utils.setValue(\r\n                                this.bindingData,\r\n                                formField,\r\n                                newVal\r\n                            );\r\n                        });\r\n                });\r\n            }\r\n        }\r\n    }\r\n    //#endregion\r\n\r\n    onAllChildNodesClick($event: any) {\r\n        this.isGetAllChidlNodes = !this.isGetAllChidlNodes;\r\n    }\r\n}\r\n","import {\r\n    Component, OnInit, ElementRef, AfterViewInit, OnChanges,\r\n    Output, EventEmitter, ViewChild, Injector, Renderer2, Input, SimpleChanges\r\n} from '@angular/core';\r\nimport { trigger, state, style, transition, animate } from '@angular/animations';\r\nimport { PersonalConfigService } from './lookup-presonalConfig.service';\r\n\r\n@Component({\r\n    selector: 'lookup-tabs',\r\n    templateUrl: './lookup-tabs.component.html',\r\n    styleUrls: ['./lookup-tabs.component.scss'],\r\n    animations: [\r\n        trigger('flyInOut', [\r\n            transition(':enter', [style({ opacity: 0 }), animate('.3s', style({ opacity: 1 }))]),\r\n            transition(':leave', [animate('.3s', style({ opacity: 0 }))])\r\n        ])\r\n    ]\r\n})\r\nexport class LookupTabsComponent implements OnInit, OnChanges, AfterViewInit {\r\n\r\n    @Input() enableFav = false;\r\n    @Input() enableSelected = false;\r\n    @Input() selectedTotal = 0;\r\n    @Input() activeTab = 'datalist';\r\n\r\n    @Output() tabChange = new EventEmitter<any>();\r\n\r\n    @ViewChild('inkBar') inkBarRef: ElementRef;\r\n    @ViewChild('dataListNav') dataListNavRef: ElementRef;\r\n    @ViewChild('favoriteNav') favoriteNavRef: ElementRef;\r\n    @ViewChild('selectedNav') selectedNavRef: ElementRef;\r\n\r\n    public personalConfigService: PersonalConfigService;\r\n\r\n    private render: Renderer2 = null;\r\n    private el: ElementRef = null;\r\n    constructor(public injector: Injector) {\r\n        this.personalConfigService = this.injector.get(PersonalConfigService, null);\r\n        this.render = this.injector.get(Renderer2);\r\n        this.el = this.injector.get(ElementRef);\r\n    }\r\n\r\n    ngOnChanges(changes: SimpleChanges) {\r\n        if (changes.activeTab && !changes.activeTab.isFirstChange()) {\r\n            this.initInkBarPos(changes.activeTab.currentValue);\r\n        }\r\n    }\r\n\r\n    ngAfterViewInit() {\r\n        setTimeout(() => {\r\n            this.initInkBarPos(this.activeTab);\r\n        }, 300);\r\n    }\r\n\r\n    navClickHandle(e: Event, v: string) {\r\n        e.stopPropagation();\r\n        this.activeTab = v;\r\n        // this.personalConfigService.personalConfObser$.next({tabIndex: v});\r\n        this.tabChange.emit({ event: e, tabIndex: v });\r\n        this.initInkBarPos(v);\r\n    }\r\n\r\n    initInkBarPos(which: string) {\r\n        if (!this.enableFav && !this.enableSelected) {\r\n            return;\r\n        }\r\n\r\n        let width = this.dataListNavRef.nativeElement.offsetWidth;\r\n        let left = 0;\r\n        if (which !== 'datalist') {\r\n            left = this.dataListNavRef.nativeElement.offsetWidth;\r\n        }\r\n        if (which === 'favorite') {\r\n            width = this.favoriteNavRef.nativeElement.offsetWidth;\r\n        } else if (which === 'selected') {\r\n            if (this.favoriteNavRef) {\r\n                left += this.favoriteNavRef.nativeElement.offsetWidth;\r\n            }\r\n\r\n            if (this.selectedNavRef) {\r\n                width = this.selectedNavRef.nativeElement.offsetWidth;\r\n            } else {\r\n                this.activeTab = 'datalist';\r\n            }\r\n        }\r\n\r\n        this.inkBarRef.nativeElement.style = `width: ${width}px; transform: translate3d(${left}px, 0px, 0px);`;\r\n    }\r\n    ngOnInit(): void {\r\n        // this.showWhich = this.personalConfigService.getActiveTabIndex();\r\n    }\r\n\r\n}\r\n","import { Directive, OnInit, AfterViewInit, Renderer2, Injector, Input} from '@angular/core';\r\nimport { InputGroupComponent } from '@farris/ui-input-group';\r\nimport { PersonalConfigService } from './lookup-presonalConfig.service';\r\nimport { delay } from 'rxjs/operators';\r\nimport { LocaleService } from '@farris/ui-locale';\r\n@Directive({\r\n    selector: '[lookup-tip]'\r\n})\r\nexport class LookupTipDirective implements OnInit, AfterViewInit {\r\n    @Input('lookup-tip') enableTip = false;\r\n    private tipPanel: Element;\r\n    private leaveEvent: any;\r\n    private enterEvent: any;\r\n    private clickEvent: any;\r\n    private isInTipPanel = false;\r\n    private selected: any[];\r\n    private personalConfigService: PersonalConfigService;\r\n    public localService: LocaleService;\r\n    private tipText = 'æ¨è¦æ¾çæ¯ä¸æ¯è¿äºï¼';\r\n    constructor(\r\n        private inputRef: InputGroupComponent,\r\n        private renderer: Renderer2,\r\n        public injector: Injector\r\n    ) {\r\n        this.personalConfigService = this.injector.get(PersonalConfigService, null);\r\n        this.localService = this.injector.get(LocaleService);\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        this.tipText = this.localService.getValue('lookup.tipText');\r\n        this.enableTip = false; // å æ°æ®æéé®é¢ï¼æ­¤åè½æå±è½ tfs: 403924\r\n        if (this.enableTip) {\r\n            this.inputRef.iconMouseEnter.subscribe(e => {\r\n                this.creatPanel();\r\n            });\r\n            this.inputRef.iconMouseLeave.pipe(delay(200)).subscribe(e => {\r\n                if (!this.isInTipPanel) {\r\n                    this.removePanel();\r\n                }\r\n            });\r\n            this.inputRef.clickHandle.subscribe(e => {\r\n                this.removePanel();\r\n            });\r\n        }\r\n    }\r\n\r\n    ngAfterViewInit(): void { }\r\n\r\n    // è·åå¿«æ·è¾å¥æ°æ®\r\n    private getQuickSelectedByLocaleId() {\r\n        const localeid = this.localService.localeId;\r\n        const personalConf = this.personalConfigService.getPersonalData();\r\n        if (personalConf && personalConf.quickSelected) {\r\n            const items = personalConf.quickSelected[localeid];\r\n            if (items && items.length) {\r\n                return items;\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    creatPanel() {\r\n        this.selected = this.getQuickSelectedByLocaleId();\r\n        if (this.tipPanel || !this.selected || (this.selected && this.selected.length === 0)) {\r\n            return;\r\n        }\r\n        const pos = this.setPosition();\r\n        const ul = this.renderer.createElement('ul');\r\n        const path = this.personalConfigService.textField.split('.');\r\n        this.selected.forEach((item, index) => {\r\n            const li = this.renderer.createElement('li');\r\n            li.innerHTML = this.find(item, this.personalConfigService.textField);\r\n            this.renderer.setProperty(li, 'id', index);\r\n            this.renderer.appendChild(ul, li);\r\n        });\r\n        const header = this.renderer.createElement('div');\r\n        this.renderer.addClass(header, 'lookup-tip-header');\r\n        header.innerHTML = this.tipText;\r\n        this.tipPanel = this.renderer.createElement('div');\r\n        this.renderer.appendChild(this.tipPanel, header);\r\n        this.renderer.appendChild(this.tipPanel, ul);\r\n        this.renderer.addClass(this.tipPanel, 'lookup-tip');\r\n        this.renderer.setStyle(this.tipPanel, 'top', pos.top);\r\n        this.renderer.setStyle(this.tipPanel, 'left', pos.left);\r\n        this.renderer.setStyle(this.tipPanel, 'width', pos.width);\r\n        this.renderer.appendChild(document.body, this.tipPanel);\r\n        this.leaveEvent = this.renderer.listen(this.tipPanel, 'mouseleave', () => {\r\n            this.removePanel();\r\n        });\r\n        this.enterEvent = this.renderer.listen(this.tipPanel, 'mouseenter', () => {\r\n            this.isInTipPanel = true;\r\n        });\r\n        this.clickEvent = this.renderer.listen(this.tipPanel, 'click', (e) => {\r\n            if (e.target.nodeName === 'LI') {\r\n                this.selectItem(e.target.id);\r\n            }\r\n        });\r\n    }\r\n\r\n    removePanel() {\r\n        if (document.body.contains(this.tipPanel)) {\r\n            this.renderer.removeChild(document.body, this.tipPanel);\r\n            this.tipPanel = null;\r\n            this.isInTipPanel = false;\r\n            this.leaveEvent();\r\n            this.enterEvent();\r\n            this.clickEvent();\r\n        }\r\n    }\r\n\r\n    setPosition() {\r\n        const { left, top, width, height } = this.inputRef.inputGroup.nativeElement.getBoundingClientRect();\r\n        return {\r\n            left: left + 'px',\r\n            top: top + height + 'px',\r\n            width: width + 'px'\r\n        };\r\n    }\r\n\r\n    selectItem(val) {\r\n        const item = this.selected.find((el, index) => Number(val) === index);\r\n        this.removePanel();\r\n        if (this.personalConfigService.singleSelect) {\r\n            this.personalConfigService.selectItemObser$.next(item);\r\n        } else {\r\n            this.personalConfigService.selectItemObser$.next([item]);\r\n        }\r\n    }\r\n\r\n    find(obj, keys) {\r\n        const keyArr = keys.split('.');\r\n        const key = keyArr[0];\r\n        const target = obj[key];\r\n        if (target instanceof Object) {\r\n            keyArr.shift();\r\n            return this.find(target, keyArr.join('.'));\r\n        } else {\r\n            return target;\r\n        }\r\n    }\r\n}\r\n","import { ChangeDetectorRef, Component, EventEmitter, HostBinding, HostListener, Injector, Input, OnInit, Output } from '@angular/core';\r\n\r\n@Component({\r\n    selector: 'lookup-quick-select-panel',\r\n    templateUrl: './quick-select-panel.component.html'\r\n})\r\n\r\nexport class LookupQuickSelectPanelComponent implements OnInit {\r\n\r\n    @Input() showMore = true;\r\n    @Input() data: Array<any> = [];\r\n    @Input() textField: string = '';\r\n    @Input() formatter: (rowObj: any) => string;\r\n\r\n    @Output() moreClcik = new EventEmitter();\r\n    @Output() itemClick = new EventEmitter();\r\n\r\n    activeIndex = -1;\r\n\r\n    constructor(private injector: Injector, private cdr: ChangeDetectorRef) { }\r\n\r\n    @HostListener('mousedown', ['$event'])\r\n    onClick($event: MouseEvent) {\r\n        $event.stopPropagation();\r\n    }\r\n\r\n    ngOnInit() { }\r\n\r\n    loadData(items: any) {\r\n        this.data = items;\r\n        if (!this.cdr['destroyed']) {\r\n            this.cdr.detectChanges();\r\n        }\r\n    }\r\n\r\n    onMoreClick($event: MouseEvent) {\r\n        $event.stopPropagation();\r\n        this.moreClcik.emit($event);\r\n    }\r\n\r\n    formatData(rowObj: any) {\r\n        return this.formatter(rowObj);\r\n    }\r\n\r\n    onItemClick($event, item) {\r\n        this.itemClick.emit({data: item, evnet: $event});\r\n    }\r\n\r\n    setActiveItem(index: number) {\r\n        this.activeIndex = index;\r\n        if (!this.cdr['destroyed']) {\r\n            this.cdr.detectChanges();\r\n        }\r\n    }\r\n}","import { AfterViewInit, ComponentFactoryResolver, ComponentRef, Directive, ElementRef, HostListener, Injector, Input, NgZone, OnDestroy, OnInit, Renderer2 } from '@angular/core';\r\nimport { reqAnimFrame } from '@farris/ui-common';\r\nimport { InputGroupComponent } from '@farris/ui-input-group';\r\nimport { Observable } from 'rxjs';\r\nimport { debounceTime, filter, map } from 'rxjs/operators';\r\n\r\nimport { LookupGridDisplayType, QuickSelectOption } from '../lookup-displaytype';\r\nimport { DisplayInfo, LOAD_DATA_TYPE, LookupGridResult, PickingResult } from '../lookup-grid-options';\r\nimport { LookupGridComponent } from '../lookup-grid.component';\r\nimport { LookupQuickSelectPanelComponent } from './quick-select-panel.component';\r\n\r\n@Directive({ selector: '[quick-select]'})\r\nexport class LookupQuickSelectDirective implements OnInit, AfterViewInit, OnDestroy {\r\n    @Input('quick-select') options: QuickSelectOption;\r\n\r\n    private panelElement: HTMLElement;\r\n    private cmpRef: ComponentRef<LookupQuickSelectPanelComponent>;\r\n    constructor(private injector: Injector, private ngzone: NgZone, private render: Renderer2,  private inputRef: InputGroupComponent, private lookupRef: LookupGridComponent,\r\n        private cfr: ComponentFactoryResolver) {\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        \r\n    }\r\n\r\n    ngAfterViewInit(): void {\r\n        if (this.options && this.options.enable) {\r\n            this.inputRef.inputClick.subscribe((e: MouseEvent) => {\r\n                e.stopPropagation();\r\n                if (!this.panelElement) {\r\n                    // æ§è¡å¸®å©å\r\n                    this.lookupRef.dictPicking({\r\n                        instance: this,\r\n                    }).subscribe((pr: PickingResult) => {\r\n                        if (this.lookupRef.displayType === LookupGridDisplayType.TreeList || !this.lookupRef.singleSelect) {\r\n                            return;\r\n                        }\r\n                        const { show, customData, message } = this.lookupRef.dialogMgr.checkDictPickingResult(pr);\r\n                        this.lookupRef.customData = customData;\r\n                        if (show) {\r\n                            this.createDataPanel();\r\n                        } else {\r\n                            if (message) {\r\n                                this.lookupRef.notifyService.warning(message);\r\n                            }\r\n                        }\r\n                    })\r\n                }\r\n            });\r\n\r\n            this.inputRef.valueChange.pipe(\r\n                debounceTime(200)\r\n            ).subscribe((val: string) => {\r\n                this.lookupRef.dictPicking({instance: this}).subscribe((pr: PickingResult) => {\r\n                    if (this.lookupRef.displayType === LookupGridDisplayType.TreeList || !this.lookupRef.singleSelect) {\r\n                        return;\r\n                    }\r\n                    const { show, customData, message } = this.lookupRef.dialogMgr.checkDictPickingResult(pr);\r\n                    this.lookupRef.customData = customData;\r\n                    if (!this.panelElement) {\r\n                        this.createDataPanel();\r\n                    } else {\r\n                        this.loadData();\r\n                    }\r\n                })\r\n            });\r\n\r\n            this.inputRef.keydownHandle.pipe(\r\n                filter((event: KeyboardEvent) => {\r\n                    return event.key === 'Escape' || event.key === 'Tab' || event.key === 'ArrowRight' || event.key === 'F2';\r\n                })\r\n            ).subscribe(() => {\r\n                this.hide();\r\n            });\r\n        }\r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n        this.lookupRef.overLayService.destory(this.lookupRef.el.nativeElement);\r\n    }\r\n\r\n    private removePanelElement() {\r\n        document.body.removeChild(this.panelElement);\r\n        this.panelElement = null;\r\n    }\r\n\r\n\r\n    hide(e?: any) {\r\n        reqAnimFrame(() => {\r\n            if (this.panelElement) {\r\n                if (e && ( e.type === 'mousewheel' || e.type === 'wheel')) {\r\n                    this.removePanelElement();\r\n                } else {\r\n                    this.panelElement.classList.remove('f-area-show');\r\n                    setTimeout(() => {\r\n                        this.removePanelElement();\r\n                    },120);\r\n                }\r\n                \r\n                this.lookupRef.overLayService.destory(this.lookupRef.el.nativeElement);\r\n            }\r\n        });\r\n    }\r\n\r\n\r\n    private createDataPanel() {\r\n        this.panelElement = document.createElement('div');\r\n        this.panelElement.classList.add('overlay-pane', 'f-lookup_quick-panel', 'f-area-hide');\r\n\r\n        document.body.appendChild(this.panelElement);\r\n        const { width, left, top, height } = this.getPanelSize();\r\n        this.panelElement.style.width = `${width}px`;\r\n        this.panelElement.style.height = `${height}px`;\r\n        this.panelElement.style.top = `${top}px`;\r\n        this.panelElement.style.left = `${left}px`;\r\n        this.panelElement.style.zIndex = '10001';\r\n        \r\n        // åå»ºæ°æ®å±ç¤ºç»ä»¶\r\n        const cmpFact = this.cfr.resolveComponentFactory(LookupQuickSelectPanelComponent);\r\n        this.cmpRef = cmpFact.create(this.injector);\r\n        \r\n        this.cmpRef.instance.showMore = this.options.showMore;\r\n        this.cmpRef.instance.textField = this.lookupRef.textField;\r\n        this.cmpRef.instance.formatter = this.options.formatter;\r\n\r\n        // cmpRef.location.nativeElement.classList.add('farris-main-area');\r\n        this.panelElement.appendChild(this.cmpRef.location.nativeElement);\r\n\r\n        this.cmpRef.changeDetectorRef.detectChanges();\r\n\r\n        // more clicked æå¼å¸®å©çªå£\r\n        this.cmpRef.instance.moreClcik.subscribe((e) => {\r\n            this.hide(e);\r\n            this.lookupRef.showDialog();\r\n        });\r\n\r\n        this.cmpRef.instance.itemClick.subscribe((e: any) => {\r\n            const { data } = e;\r\n            this.lookupRef.selectItem(data);\r\n            this.hide();\r\n        });\r\n\r\n\r\n        // æ³¨åé¼ æ æ»è½®ï¼ç¹å»äºä»¶ï¼ç¨äºéèPanel\r\n        this.lookupRef.overLayService.registerMouseEvent(this.lookupRef.el.nativeElement, (e: MouseEvent) => {\r\n            if (!this.panelElement || e.target['closest']('.f-lookup_quick-panel')) {\r\n                return;\r\n            }\r\n\r\n            if (this.cmpRef) {\r\n                this.cmpRef.destroy();\r\n                this.cmpRef = null;\r\n            }\r\n\r\n            this.hide(e);\r\n\r\n            if(this.lookupRef.inputGroup.textbox.nativeElement === e.target) {\r\n                return false;\r\n            }\r\n        });\r\n\r\n        this.panelElement.classList.add('f-area-show');\r\n\r\n        this.loadData();\r\n    }\r\n\r\n\r\n\r\n    private calculationPanelHeight() {\r\n        return this.options.showItemsCount * 30 + (this.options.showMore ? 50: 0) + this.options.footerHeight + 5;\r\n    }\r\n\r\n    private getInputSizeInfo() {\r\n        const el: any = this.lookupRef.viewType === 'text' ? this.inputRef.inputGroup : this.lookupRef.tagbox;\r\n        return el.nativeElement.getBoundingClientRect();\r\n    }\r\n\r\n    private getPanelSize() {\r\n        let { width, height, top, left } = this.getInputSizeInfo();\r\n        const bottom = window.innerHeight - height - top;\r\n        let panelHeight = this.calculationPanelHeight();\r\n\r\n        const h = top > bottom ? top : bottom;\r\n        if (bottom > panelHeight) {\r\n            top = top + height;\r\n            // é¢æ¿ç±ä¸åä¸å±å¼\r\n            this.panelElement.style.transformOrigin = '100% top';\r\n        } else {\r\n            if (top > bottom) {\r\n                if (h < panelHeight) {\r\n                    panelHeight = h - 10;\r\n                    top = 10;\r\n                } else {\r\n                    top = top - parseInt('' + panelHeight, 10) - 5;\r\n                }\r\n\r\n                // é¢æ¿ç±ä¸åä¸å±å¼\r\n                this.panelElement.style.transformOrigin = '100% bottom';\r\n\r\n            } else {\r\n                if (h < panelHeight) {\r\n                    panelHeight = h - 10;\r\n                }\r\n                top = top + height;\r\n            }\r\n        }\r\n\r\n        return { width, top, height: panelHeight, left };\r\n    }\r\n\r\n    private getData(): Observable<Array<any>> {\r\n        let p: any = {\r\n            pageInfo: {\r\n                pageSize: this.options.showItemsCount,\r\n                pageIndex: 1,\r\n            },\r\n        };\r\n        let t: LOAD_DATA_TYPE = \"all\";\r\n        if (this.lookupRef.isTextChange) {\r\n            this.lookupRef._searchState = { \r\n                field: this.lookupRef.textField, //\"*\",\r\n                value: this.lookupRef.displayText\r\n            }\r\n            p = {\r\n                search: this.lookupRef._searchState\r\n            };\r\n            \r\n            t = 'search';\r\n        }\r\n        return this.lookupRef.httpMgr.lookupRequest(p, t).pipe(\r\n            map((restData: LookupGridResult) => {\r\n                if (restData) {\r\n                    return restData.items || [];\r\n                }\r\n\r\n                if (this.lookupRef.displayText && this.lookupRef.isTextChange) {\r\n                    return this.lookupRef.items.filter(n => {\r\n                        return n[this.lookupRef.textField].indexOf(this.lookupRef.displayText) > -1;\r\n                    }).slice(0, this.options.showItemsCount)\r\n\r\n                }\r\n                return this.lookupRef.items.slice(0, this.options.showItemsCount);\r\n            })\r\n        );\r\n    }\r\n\r\n    private loadData() {\r\n        const loadingRef = this.lookupRef.loadingService.show({container: this.panelElement});\r\n        this.getData().subscribe((data: any) => {\r\n            this.cmpRef.instance.loadData(data);\r\n            loadingRef.close();\r\n        });\r\n    }\r\n\r\n\r\n    @HostListener('keydown', ['$event'])\r\n    registerKeyboardEvent($event: KeyboardEvent) {\r\n\r\n        if (!this.lookupRef.singleSelect)  {\r\n            return;\r\n        }\r\n\r\n        let rows= [];\r\n        if (this.cmpRef) {\r\n            rows = this.cmpRef.instance.data;\r\n        }\r\n\r\n        if (!rows || !rows.length) {\r\n            return;\r\n        }\r\n\r\n        if ($event.code === 'ArrowUp' || $event.code === 'ArrowDown') {\r\n            $event.preventDefault();\r\n            $event.stopPropagation();\r\n        }\r\n\r\n        const idx = this.cmpRef.instance.activeIndex;\r\n        let activeIndex = idx;\r\n\r\n        const selectItem = (index) => {\r\n            activeIndex = index;\r\n            this.cmpRef.instance.setActiveItem(index);\r\n        };\r\n\r\n        if ($event.code === 'ArrowUp') {  // up\r\n            if (idx > -1) {\r\n                let prevIdx = idx - 1;\r\n                if (prevIdx < 0) {\r\n                    prevIdx = rows.length - 1;\r\n                }\r\n                selectItem(prevIdx);\r\n            } else {\r\n                selectItem(rows.length - 1);\r\n            }\r\n        }\r\n        if ($event.code === 'ArrowDown') { // down\r\n            let nextIdx = idx + 1;\r\n            if (nextIdx >= rows.length) {\r\n                nextIdx = 0;\r\n            }\r\n\r\n            selectItem(nextIdx);\r\n        }\r\n\r\n        if($event.key === 'Enter') {\r\n            if (rows && rows.length) {\r\n                const data = rows[idx];\r\n                this.lookupRef.selectItem(data);\r\n                this.hide();\r\n            }\r\n        }\r\n    }\r\n}","/*\r\n * @Author: ç¯çç§æ(Lucas Huang)\r\n * @Date: 2018-12-04 10:43:42\r\n * @LastEditors: ç¯çç§æ(Lucas Huang)\r\n * @LastEditTime: 2019-09-26 13:33:30\r\n * @Company: Inspur\r\n * @Version: v0.0.1\r\n */\r\nimport { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule } from '@angular/forms';\r\n\r\nimport { FarrisCommonModule } from '@farris/ui-common';\r\nimport { InputGroupModule } from '@farris/ui-input-group';\r\nimport { LayoutModule } from '@farris/ui-layout';\r\nimport { LocaleModule} from '@farris/ui-locale';\r\nimport { FarrisDialogModule } from '@farris/ui-dialog';\r\nimport { MessagerModule } from '@farris/ui-messager';\r\nimport { DataTableModule, DataTableComponent } from '@farris/ui-datatable';\r\nimport { TreeTableModule, TreeTableComponent } from '@farris/ui-treetable';\r\nimport { LoadingModule } from '@farris/ui-loading';\r\n\r\nimport { LookupGridComponent } from './lookup-grid.component';\r\nimport { LookupComponent } from './lookup.component';\r\nimport { LookupLeftComponent } from './lookup-left.component';\r\nimport { LookupTabsComponent } from './lookup-tabs.component';\r\nimport { LookupTipDirective } from './lookup-tip.directive';\r\nimport { NotifyModule } from '@farris/ui-notify';\r\nimport { FarrisContextMenuModule } from '@farris/ui-context-menu';\r\nimport { LookupQuickSelectPanelComponent } from './quick-select/quick-select-panel.component';\r\nimport { LookupQuickSelectDirective } from './quick-select/lookup-quick-select.directive';\r\n@NgModule({\r\n    imports: [\r\n        CommonModule,\r\n        FormsModule,\r\n        FarrisCommonModule.forRoot(),\r\n        FarrisDialogModule.forRoot(),\r\n        MessagerModule.forRoot(),\r\n        NotifyModule.forRoot(),\r\n        LoadingModule.forRoot({delay: 1000}),\r\n        InputGroupModule,\r\n        LayoutModule,\r\n        DataTableModule,\r\n        TreeTableModule,\r\n        FarrisContextMenuModule,\r\n        LocaleModule.forRoot()\r\n    ],\r\n    exports: [\r\n        LookupGridComponent, LookupComponent\r\n    ],\r\n    declarations: [\r\n        LookupGridComponent,\r\n        LookupComponent,\r\n        LookupLeftComponent,\r\n        LookupTabsComponent,\r\n        LookupTipDirective,\r\n        LookupQuickSelectPanelComponent,\r\n        LookupQuickSelectDirective\r\n    ],\r\n    providers: [],\r\n    entryComponents: [DataTableComponent, TreeTableComponent, LookupLeftComponent, LookupTabsComponent, LookupQuickSelectPanelComponent]\r\n})\r\nexport class LookupModule {}\r\n"]}