/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { forwardRef, Inject, Directive, Input, Output, EventEmitter, ElementRef, ContentChild, NgZone, Renderer2, } from "@angular/core";
import { NgbDropdownConfig } from "./dropdown-config";
import { positionElements, } from "../util/positioning";
import { OverLayHiddenService } from "@farris/ui-common";
/**
 *
 */
var NgbDropdownMenu = /** @class */ (function () {
    function NgbDropdownMenu(dropdown, _elementRef, _renderer) {
        this.dropdown = dropdown;
        this._elementRef = _elementRef;
        this._renderer = _renderer;
        this.placement = "bottom";
        this.isOpen = false;
    }
    /*
     * 因为下拉面板可能存在遮挡的问题,计算宽度
     */
    /*
         * 因为下拉面板可能存在遮挡的问题,计算宽度
         */
    /**
     * @return {?}
     */
    NgbDropdownMenu.prototype.resetMenuElWidthOpen = /*
         * 因为下拉面板可能存在遮挡的问题,计算宽度
         */
    /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var parentNode = this._elementRef.nativeElement.parentNode.parentNode;
        /** @type {?} */
        var parentNodeW = parentNode
            ? parentNode.getBoundingClientRect().width
            : 0;
        /** @type {?} */
        var menuW = this._elementRef.nativeElement.getBoundingClientRect().width;
        return Math.min(menuW, parentNodeW);
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    NgbDropdownMenu.prototype.isEventFrom = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        return this._elementRef.nativeElement.contains($event.target);
    };
    /**
     * @param {?} triggerEl
     * @param {?} placement
     * @return {?}
     */
    NgbDropdownMenu.prototype.position = /**
     * @param {?} triggerEl
     * @param {?} placement
     * @return {?}
     */
    function (triggerEl, placement) {
        var _this = this;
        //
        if (this._elementRef.nativeElement.getBoundingClientRect().width == 0) {
            setTimeout((/**
             * @return {?}
             */
            function () {
                _this.applyPlacement(positionElements(triggerEl, _this._elementRef.nativeElement, placement));
            }), 0);
        }
        else {
            this.applyPlacement(positionElements(triggerEl, this._elementRef.nativeElement, placement));
        }
    };
    /**
     * @param {?} _placement
     * @return {?}
     */
    NgbDropdownMenu.prototype.applyPlacement = /**
     * @param {?} _placement
     * @return {?}
     */
    function (_placement) {
        // remove the current placement classes
        this._renderer.removeClass(this._elementRef.nativeElement.parentNode, "dropup");
        this._renderer.removeClass(this._elementRef.nativeElement.parentNode, "dropdown");
        this.placement = _placement;
        /**
         * apply the new placement
         * in case of top use up-arrow or down-arrow otherwise
         */
        if (_placement.search("^top") !== -1) {
            this._renderer.addClass(this._elementRef.nativeElement.parentNode, "dropup");
        }
        else {
            this._renderer.addClass(this._elementRef.nativeElement.parentNode, "dropdown");
        }
    };
    NgbDropdownMenu.decorators = [
        { type: Directive, args: [{
                    selector: "[ngbDropdownMenu]",
                    host: {
                        "[class.dropdown-menu]": "true",
                        "[class.show]": "dropdown.isOpen()",
                        "[attr.x-placement]": "placement",
                    },
                    exportAs: "DropdownMenu",
                },] }
    ];
    /** @nocollapse */
    NgbDropdownMenu.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: Inject, args: [forwardRef((/**
                         * @return {?}
                         */
                        function () { return NgbDropdown; })),] }] },
        { type: ElementRef },
        { type: Renderer2 }
    ]; };
    return NgbDropdownMenu;
}());
export { NgbDropdownMenu };
if (false) {
    /** @type {?} */
    NgbDropdownMenu.prototype.placement;
    /** @type {?} */
    NgbDropdownMenu.prototype.isOpen;
    /**
     * @type {?}
     * @private
     */
    NgbDropdownMenu.prototype._triggerEl;
    /** @type {?} */
    NgbDropdownMenu.prototype.dropdown;
    /** @type {?} */
    NgbDropdownMenu.prototype._elementRef;
    /**
     * @type {?}
     * @private
     */
    NgbDropdownMenu.prototype._renderer;
}
/**
 * Marks an element to which dropdown menu will be anchored. This is a simple version
 * of the NgbDropdownToggle directive. It plays the same role as NgbDropdownToggle but
 * doesn't listen to click events to toggle dropdown menu thus enabling support for
 * events other than click.
 *
 * \@since 1.1.0
 */
var NgbDropdownAnchor = /** @class */ (function () {
    function NgbDropdownAnchor(dropdown, _elementRef) {
        this.dropdown = dropdown;
        this._elementRef = _elementRef;
        this.anchorEl = _elementRef.nativeElement;
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    NgbDropdownAnchor.prototype.isEventFrom = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        return this._elementRef.nativeElement.contains($event.target);
    };
    NgbDropdownAnchor.decorators = [
        { type: Directive, args: [{
                    selector: "[ngbDropdownAnchor]",
                    host: {
                        class: "dropdown-toggle",
                        "aria-haspopup": "true",
                        "[attr.aria-expanded]": "dropdown.isOpen()",
                    },
                },] }
    ];
    /** @nocollapse */
    NgbDropdownAnchor.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: Inject, args: [forwardRef((/**
                         * @return {?}
                         */
                        function () { return NgbDropdown; })),] }] },
        { type: ElementRef }
    ]; };
    return NgbDropdownAnchor;
}());
export { NgbDropdownAnchor };
if (false) {
    /** @type {?} */
    NgbDropdownAnchor.prototype.anchorEl;
    /** @type {?} */
    NgbDropdownAnchor.prototype.dropdown;
    /**
     * @type {?}
     * @private
     */
    NgbDropdownAnchor.prototype._elementRef;
}
/**
 * Allows the dropdown to be toggled via click. This directive is optional: you can use NgbDropdownAnchor as an
 * alternative.
 */
var NgbDropdownToggle = /** @class */ (function (_super) {
    tslib_1.__extends(NgbDropdownToggle, _super);
    function NgbDropdownToggle(dropdown, elementRef) {
        return _super.call(this, dropdown, elementRef) || this;
    }
    /**
     * @return {?}
     */
    NgbDropdownToggle.prototype.toggleOpen = /**
     * @return {?}
     */
    function () {
        event.stopPropagation();
        this.dropdown.toggle();
    };
    NgbDropdownToggle.decorators = [
        { type: Directive, args: [{
                    selector: "[ngbDropdownToggle]",
                    host: {
                        class: "dropdown-toggle",
                        "aria-haspopup": "true",
                        "[attr.aria-expanded]": "dropdown.isOpen()",
                        "(click)": "toggleOpen()",
                    },
                    providers: [
                        {
                            provide: NgbDropdownAnchor,
                            useExisting: forwardRef((/**
                             * @return {?}
                             */
                            function () { return NgbDropdownToggle; })),
                        },
                    ],
                },] }
    ];
    /** @nocollapse */
    NgbDropdownToggle.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: Inject, args: [forwardRef((/**
                         * @return {?}
                         */
                        function () { return NgbDropdown; })),] }] },
        { type: ElementRef }
    ]; };
    return NgbDropdownToggle;
}(NgbDropdownAnchor));
export { NgbDropdownToggle };
/**
 * Transforms a node into a dropdown.
 */
var NgbDropdown = /** @class */ (function () {
    function NgbDropdown(config, ngZone) {
        var _this = this;
        /**
         *  Defines whether or not the dropdown-menu is open initially.
         */
        this._open = false;
        /**
         * Placement of a popover accepts:
         *    "top", "top-left", "top-right", "bottom", "bottom-left", "bottom-right",
         *    "left", "left-top", "left-bottom", "right", "right-top", "right-bottom"
         * and array of above values.
         */
        this.placement = ["auto", "bottom"];
        /**
         *  An event fired when the dropdown is opened or closed.
         *  Event's payload equals whether dropdown is open.
         */
        this.openChange = new EventEmitter();
        this.overLayService = null;
        this.placement = config.placement;
        this.autoClose = config.autoClose;
        // 此处原意是解决menu还没有被显示时，会再次调用计算位置。但是在框架会出现位置只计算一次的情况
        this._zoneSubscription = ngZone.onStable.subscribe((/**
         * @return {?}
         */
        function () {
            _this._positionMenu();
        }));
        this.overLayService = new OverLayHiddenService();
    }
    /**
     * @return {?}
     */
    NgbDropdown.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        if (this._menu) {
            this._menu.applyPlacement(Array.isArray(this.placement)
                ? this.placement[0]
                : ((/** @type {?} */ (this.placement))));
        }
    };
    /**
     * Checks if the dropdown menu is open or not.
     */
    /**
     * Checks if the dropdown menu is open or not.
     * @return {?}
     */
    NgbDropdown.prototype.isOpen = /**
     * Checks if the dropdown menu is open or not.
     * @return {?}
     */
    function () {
        return this._open;
    };
    /**
     * Opens the dropdown menu of a given navbar or tabbed navigation.
     */
    /**
     * Opens the dropdown menu of a given navbar or tabbed navigation.
     * @return {?}
     */
    NgbDropdown.prototype.open = /**
     * Opens the dropdown menu of a given navbar or tabbed navigation.
     * @return {?}
     */
    function () {
        var _this = this;
        if (!this._open) {
            this._open = true;
            this._positionMenu();
            this.openChange.emit(true);
            this._menu._elementRef.nativeElement.classList.add('show');
            // 注册鼠标滚轮，点击事件，用于隐藏Panel
            this.overLayService.registerMouseEvent(this._menu._elementRef.nativeElement, (/**
             * @param {?} e
             * @return {?}
             */
            function (e) {
                /** @type {?} */
                var tar = (/** @type {?} */ (e.target));
                /** @type {?} */
                var classList = Array.from(tar.classList || []);
                if (tar.className.indexOf('morebtn') > -1 ||
                    tar.className.indexOf("dropdown-toggle") > -1 ||
                    tar.closest(".dropdown-item") ||
                    classList.includes("dropdown-item")) {
                    return;
                }
                _this.close();
            }));
        }
    };
    /**
     * Closes the dropdown menu of a given navbar or tabbed navigation.
     */
    /**
     * Closes the dropdown menu of a given navbar or tabbed navigation.
     * @return {?}
     */
    NgbDropdown.prototype.close = /**
     * Closes the dropdown menu of a given navbar or tabbed navigation.
     * @return {?}
     */
    function () {
        if (this._open) {
            this._open = false;
            this.openChange.emit(false);
            this._menu._elementRef.nativeElement.classList.remove('show');
            this.overLayService.destory(this._menu._elementRef.nativeElement);
        }
    };
    /**
     * Toggles the dropdown menu of a given navbar or tabbed navigation.
     */
    /**
     * Toggles the dropdown menu of a given navbar or tabbed navigation.
     * @return {?}
     */
    NgbDropdown.prototype.toggle = /**
     * Toggles the dropdown menu of a given navbar or tabbed navigation.
     * @return {?}
     */
    function () {
        if (this.isOpen()) {
            this.close();
        }
        else {
            this.open();
        }
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    NgbDropdown.prototype.closeFromClick = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        if (this.autoClose &&
            $event.button !== 2 &&
            !this._isEventFromToggle($event)) {
            if (this.autoClose === true) {
                this.close();
            }
            else if (this.autoClose === "inside" &&
                this._isEventFromMenu($event)) {
                this.close();
            }
            else if (this.autoClose === "outside" &&
                !this._isEventFromMenu($event)) {
                this.close();
            }
        }
    };
    /**
     * @return {?}
     */
    NgbDropdown.prototype.closeFromOutsideEsc = /**
     * @return {?}
     */
    function () {
        if (this.autoClose) {
            this.close();
        }
    };
    /**
     * @return {?}
     */
    NgbDropdown.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        if (this._zoneSubscription)
            this._zoneSubscription.unsubscribe();
    };
    /**
     * @private
     * @param {?} $event
     * @return {?}
     */
    NgbDropdown.prototype._isEventFromToggle = /**
     * @private
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        return this._anchor.isEventFrom($event);
    };
    /**
     * @private
     * @param {?} $event
     * @return {?}
     */
    NgbDropdown.prototype._isEventFromMenu = /**
     * @private
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        return this._menu ? this._menu.isEventFrom($event) : false;
    };
    /**
     * @private
     * @return {?}
     */
    NgbDropdown.prototype._positionMenu = /**
     * @private
     * @return {?}
     */
    function () {
        if (this.isOpen() && this._menu) {
            this._menu.position(this._anchor.anchorEl, this.placement);
        }
    };
    NgbDropdown.decorators = [
        { type: Directive, args: [{
                    selector: "[ngbDropdown]",
                    exportAs: "ngbDropdown",
                    host: {
                        "(keyup.esc)": "closeFromOutsideEsc()",
                    },
                },] }
    ];
    /** @nocollapse */
    NgbDropdown.ctorParameters = function () { return [
        { type: NgbDropdownConfig },
        { type: NgZone }
    ]; };
    NgbDropdown.propDecorators = {
        _menu: [{ type: ContentChild, args: [NgbDropdownMenu,] }],
        _anchor: [{ type: ContentChild, args: [NgbDropdownAnchor,] }],
        autoClose: [{ type: Input }],
        _open: [{ type: Input, args: ["open",] }],
        placement: [{ type: Input }],
        openChange: [{ type: Output }]
    };
    return NgbDropdown;
}());
export { NgbDropdown };
if (false) {
    /**
     * @type {?}
     * @private
     */
    NgbDropdown.prototype._zoneSubscription;
    /**
     * @type {?}
     * @private
     */
    NgbDropdown.prototype._menu;
    /**
     * @type {?}
     * @private
     */
    NgbDropdown.prototype._anchor;
    /**
     * Indicates that dropdown should be closed when selecting one of dropdown items (click) or pressing ESC.
     * When it is true (default) dropdowns are automatically closed on both outside and inside (menu) clicks.
     * When it is false dropdowns are never automatically closed.
     * When it is 'outside' dropdowns are automatically closed on outside clicks but not on menu clicks.
     * When it is 'inside' dropdowns are automatically on menu clicks but not on outside clicks.
     * @type {?}
     */
    NgbDropdown.prototype.autoClose;
    /**
     *  Defines whether or not the dropdown-menu is open initially.
     * @type {?}
     */
    NgbDropdown.prototype._open;
    /**
     * Placement of a popover accepts:
     *    "top", "top-left", "top-right", "bottom", "bottom-left", "bottom-right",
     *    "left", "left-top", "left-bottom", "right", "right-top", "right-bottom"
     * and array of above values.
     * @type {?}
     */
    NgbDropdown.prototype.placement;
    /**
     *  An event fired when the dropdown is opened or closed.
     *  Event's payload equals whether dropdown is open.
     * @type {?}
     */
    NgbDropdown.prototype.openChange;
    /**
     * @type {?}
     * @private
     */
    NgbDropdown.prototype.overLayService;
}
//# sourceMappingURL=data:application/json;base64,