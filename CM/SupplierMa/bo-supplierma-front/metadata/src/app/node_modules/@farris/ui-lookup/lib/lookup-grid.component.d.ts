import { OnChanges, SimpleChanges, EventEmitter, OnInit, Injector, ComponentFactoryResolver, ChangeDetectorRef, AfterViewInit, ViewContainerRef, ComponentRef, Type, ElementRef, NgZone, Renderer2, OnDestroy } from "@angular/core";
import { Observable, Subscription, Subject } from "rxjs";
import { LocaleService } from "@farris/ui-locale";
import { IResizeEvent } from "@farris/ui-draggable";
import { MessagerService } from "@farris/ui-messager";
import { LoadingService, LoadingComponent } from "@farris/ui-loading";
import { DataTableComponent } from "@farris/ui-datatable";
import { TreeNode } from "@farris/ui-treetable";
import { LayoutPanelComponent } from "@farris/ui-layout";
import { CommonUtils, OverLayHiddenService } from "@farris/ui-common";
import { EntityFilter } from "@farris/ui-common/types";
import { ShortcutsService } from "@farris/ui-shortcuts";
import { InputGroupComponent } from "@farris/ui-input-group";
import { NotifyService } from "@farris/ui-notify";
import { ExtInfoFormatter, CustomDataFormatter, QuickSelectOption } from "./lookup-displaytype";
import { LookupComponent } from "./lookup.component";
import { LookupGridOptions, LookupGridResult, NavigationOptions, DisplayInfo, TreeInfo, PersonalConfig } from "./lookup-grid-options";
import { ILookupHttpService } from "./http/ILookupHttpService";
import { NavigationFilter } from "./http/RemoteParams";
import { LookupLeftComponent } from "./lookup-left.component";
import { LookupDefaultMapping } from "./lookup-defaut-mapping";
import { LookupUtils } from "./utils";
import { PersonalConfigService } from "./lookup-presonalConfig.service";
import { UtilService, TreeNodeHelper, FavoriteHelper, SelectionManager, DataTableEventManager, TreeTableEventManager, MultiSelectionManager, LookupHttpManager, LookupComponentManager, LookupDialogManager, LookupSelectionService } from "./services";
import { EventManager } from "@angular/platform-browser";
export declare const LOOKUPGRID_VALUE_ACCESSOR: any;
export declare class LookupGridComponent extends LookupComponent implements OnInit, AfterViewInit, OnChanges, OnDestroy {
    injector: Injector;
    cfr: ComponentFactoryResolver;
    el: ElementRef;
    utils: CommonUtils;
    private defaultMapping;
    changeDetector: ChangeDetectorRef;
    shortcuts: ShortcutsService;
    lookupUtils: LookupUtils;
    private zone;
    private render2;
    groupIcon: string;
    _displayType: string;
    /** 使用表单设计器中的显示类型。否则使用元数据设置的显示类型。 默认：false */
    customDisplayType: boolean;
    viewType: "text" | "tag";
    displayType: string;
    /** 启用清空按钮 */
    enableClear: boolean;
    /** 服务器端排序 */
    remoteSort: boolean;
    condition: EntityFilter;
    /** 树表显示全选复选框。 默认不显示 */
    showCheckAll: boolean;
    /** 是否启用多选 */
    singleSelect: boolean;
    /** 多选分隔符 */
    multipleChoiceSeparator: string;
    /** 主键字段 */
    idField?: string;
    /** 可以为元数据ID、webapiURL */
    uri?: string;
    /**
     * BE REST RUI
     * - 此处设置后 uri 失效
     */
    beUri: string;
    /**
     * 显示过滤工具条
     */
    showFilterBar: boolean;
    /** 是否启用分页 */
    pagination: boolean;
    /** 当前页索引，从 0开始 */
    pageIndex: number;
    /** 每页记录数 */
    pageSize: number;
    /** 可用分页记录数列表 */
    pageList: number[];
    /** 总记录数 */
    total: number;
    /** 可拖动列 */
    /** 显示列信息, 默认为 [] */
    columns: any[];
    /** 帮助查询是否为远端查询 */
    remoteSearch: boolean;
    /** 文本变化后，进行服务器端查询 */
    searchOnServer: boolean;
    /** 不进行服务器查询，有啥算啥 */
    nosearch: boolean;
    /**
     * 启用任意输入后，值通过输入时触发
     */
    clearMappings: EventEmitter<{}>;
    /**
     * 允许输入的字符最大长度。
     * 任意输入时，此属性有效
     */
    maxLength: any;
    mappingFn: (rowData: any, mapFields: any, bindingData?: any) => void;
    /** 数据列表 */
    items: any;
    favoriteItems: any[];
    /** 自定义数据 */
    customData: any;
    /** 绑定值所在的对象 */
    bindingData: {};
    treeInfo: TreeInfo;
    /** 是否启用级联选择控制选项 */
    enableCascade: boolean;
    /** 级联控制默认值： enable, up, down, disable */
    cascadeStatus: "enable" | "up" | "down" | "disable";
    placeholder: string;
    /** 显示已选记录列表。 默认为 false 不显示 */
    showSelected: boolean;
    /** 应用收藏夹 */
    useFavorite: boolean;
    /** 收藏数据来自于： locale: 本地存储， remote: 服务器端存储 */
    favoriteDataFrom: "locale" | "remote";
    /** 使用提示,快捷选择 */
    useTip: boolean;
    /** 记录窗口大小 */
    isRecordSize: boolean;
    /** 快速选择 */
    userId: string;
    /** 是否启用选中value值对应的行数据，默认 true */
    enableToSelect: boolean;
    enableFindText: boolean;
    /** -1: 不展开； 0: 全部展开；>0: 展开到指定级数 */
    expandLevel: number;
    navTreeTableOptions: any;
    treeTableOptions: any;
    dataTableOptions: any;
    defaultTreeTableOptions: {
        maxLevel: number;
        enableContextMenu: boolean;
        contextMenuItems: any[];
    };
    /** 树形帮助数据加载方式： default: 内置取数； loadall: 加载所有 layerload：分层加载 */
    loadTreeDataType: "default" | "loadall" | "layerload";
    /** 窗口打开后立即加载数据，默认为 true */
    loadDataWhenOpen: boolean;
    /**
     * 导航列表，树列表在帮助打开后选中的数据;
     * 设置后，`selectFirstInNav` 失效！
     */
    navSelectedIds: string;
    /**
     * 导航帮助，选中第1条数据，默认为 false;
     * 注意：当`navSelectedIds`不为空时，此属性失效。
     */
    selectFirstInNav: boolean;
    /** 启用构造完整树过滤 */
    enableFullTree: boolean;
    /** 显示文本自定义函数 */
    displayFormatter: (value: string, data: any, instance: any) => string;
    /** 显示文本字段集合，以 英文 逗号隔开 */
    displayFields: string;
    displayTextSeparator: string;
    /**
     * 帮助元数据ID，不为空时调用指定的URI
     * /api/runtime/bcc/v1.0/help/data/{helpId}
     */
    helpId: string;
    /** 文本对齐方式； left | center | right; 默认 left */
    textAlign: string;
    /** 鼠标滑过输入框时显示输入框内的文本信息 */
    enableTitle: boolean;
    useExtendInfo: boolean;
    extInfoFields: string;
    extInfoFormatter: ExtInfoFormatter;
    extendInfo: string;
    /** IDE 设计器自定义格式化 2103 */
    customFormatter: CustomDataFormatter;
    customNavFormatter: CustomDataFormatter;
    /** 自定义确定事件 */
    okHandler: any;
    /** 自定义取消事件 */
    cancelHandler: any;
    tagboxHeight: string;
    maxTagboxHeight: any;
    /** 启用获取所有子级数据的功能 */
    enableGetAllChildNodes: boolean;
    shortcutKey: {
        /** 打开帮助窗口 */
        open: string;
        /** 确认选择数据 */
        confirm: string;
        /** 搜索框焦点 */
        searchFocus: string;
        /** 选中上一条 */
        moveUp: string;
        /** 选中下一条 */
        moveDown: string;
        /** 展开节点 */
        expand: string;
        /** 折叠节点 */
        collapse: string;
        /** 下一页 */
        nextPager: string;
        /** 上一页 */
        prevPager: string;
    };
    /** 快捷选择相关配置项，默认为 null, 即不启用此功能 */
    quickSelect: QuickSelectOption;
    /** 数据选择后，值映射前触发
     * 返回 Observable
     *      canSelect: <boolean>  是否允许选择
     *      message: <string> 不允许选择时的提示信息
     */
    beforeSelectData: (p: {
        instance: any;
        data: any;
    }) => Observable<{
        canSelect: boolean;
        message: string;
    } | boolean>;
    selectedData: EventEmitter<{}>;
    clear: EventEmitter<{}>;
    search: EventEmitter<{}>;
    valueChanged: EventEmitter<{}>;
    loadSuccess: EventEmitter<{}>;
    pagerChanged: EventEmitter<{}>;
    expandTreeNode: EventEmitter<{}>;
    textChanged: EventEmitter<{}>;
    checkedChange: EventEmitter<{
        data: any;
        isCheck: boolean;
    }>;
    tagRemoved: EventEmitter<{}>;
    /** 内容中留白边距 */
    containerMargin: {
        top: number;
        bottom: number;
        left: number;
        right: number;
    };
    containerStyle: {
        marginLeft: string;
        marginRight: string;
        marginTop: string;
        marginBottom: string;
    };
    _gridOptions: LookupGridOptions;
    gridOptions: LookupGridOptions;
    contentContainer: ViewContainerRef;
    favoritesContainer: ViewContainerRef;
    leftContainer: ViewContainerRef;
    centerContainer: ViewContainerRef;
    multiSelectDT: DataTableComponent;
    inputGroup: InputGroupComponent;
    leftPanel: LayoutPanelComponent;
    tagbox: ElementRef;
    okButton: ElementRef;
    componentRef: ComponentRef<any>;
    leftComponentRef: ComponentRef<LookupLeftComponent>;
    favoritesComponentRef: ComponentRef<any>;
    http: ILookupHttpService;
    messagerService: MessagerService;
    loadingService: LoadingService;
    loading: LoadingComponent;
    navigationOptions: NavigationOptions;
    leftPanelWidth: number;
    navLookupDialogMinWidth: number;
    navigationFilter: NavigationFilter;
    subscriptions: Subscription[];
    dialogOpenedSubscription: Subscription;
    dialogClosedSubscription: Subscription;
    isTextChange: boolean;
    isTabChanged: boolean;
    displayInfo: DisplayInfo;
    tabChangeSubscription: any;
    personalConf: PersonalConfig;
    favoriteColumns: any[];
    /** 临时查询参数 */
    _searchState: any;
    allData: any;
    readonly selections: any;
    readonly usePersionalConf: boolean;
    readonly displayTextList: string[];
    personalConfigService: PersonalConfigService;
    utilService: UtilService;
    treeNodeHelper: TreeNodeHelper;
    localService: LocaleService;
    notifyService: NotifyService;
    allColumnsTitle: string;
    mustWriteSomething: string;
    mustChoosAdatarow: string;
    addFavoriteSuccess: string;
    delFavoriteSuccess: string;
    searching: boolean;
    /** 临时存储查询结果集 */
    _searchResult: any;
    lookupinitializationSubject: Subject<{}>;
    /** 多选时，选中的数据 */
    currentSelectedItems: Observable<any>;
    /** 已选数据列信息 */
    selectedColumns: any[];
    activeTab: string | "datalist" | "favorite" | "selected";
    favHelper: FavoriteHelper;
    ttEventMgr: TreeTableEventManager;
    multiSelMgr: MultiSelectionManager;
    httpMgr: LookupHttpManager;
    lookupCmpMgr: LookupComponentManager;
    dialogMgr: LookupDialogManager;
    selectionMgr: SelectionManager;
    dtEventMgr: DataTableEventManager;
    lookupSelectionSer: LookupSelectionService;
    controlId: string;
    savingFaoriteData: boolean;
    isReady: boolean;
    showTagboxClearButton: boolean;
    hasError: boolean;
    isGetAllChidlNodes: boolean;
    eventManager: EventManager;
    /** 选中记录ID，自定义帮助取数时使用 */
    selectedIds: any[];
    private lookupSearchInputEvent;
    private farrisInstances;
    /** 用户初始设置 */
    private _userSettings;
    readonly userInitialConfig: any;
    _treeInfo_: any;
    /** dialog 内容区域高度。 弹窗总高度 - 头部高度 - 脚部高度 - （启用收藏 TAB头高度） */
    dialogContentHeight: number;
    overLayService: OverLayHiddenService;
    private debugSer;
    constructor(injector: Injector, cfr: ComponentFactoryResolver, el: ElementRef, utils: CommonUtils, defaultMapping: LookupDefaultMapping, changeDetector: ChangeDetectorRef, shortcuts: ShortcutsService, lookupUtils: LookupUtils, zone: NgZone, render2: Renderer2);
    writeConsole(msg: any, type?: 'info' | 'log' | 'warn' | 'error'): void;
    private cacheUserConfig;
    private deepClone;
    ngOnInit(): void;
    ngOnDestroy(): void;
    ngOnChanges(changes: SimpleChanges): void;
    ngAfterViewInit(): void;
    private createInstance;
    showDialog(): any;
    /** 判断是否为双列表帮助 */
    isDoublleList(): boolean;
    /** 判断是否显示为树帮助 */
    isTree(): boolean;
    onResized(e: any): void;
    onResizing(pos: IResizeEvent): void;
    onMaxDialog(pos: IResizeEvent): void;
    resizeCmp(size?: any): void;
    private checkGridOptions;
    getComponentType(): Type<any>;
    showLoading(msg?: string): void;
    closeLoading(): void;
    getSearchColumns(resdata: any): any;
    private initOptions;
    /**
     * 设置帮助窗口标题
     */
    private setLookupTitleText;
    private showGetAllChildrenCheckbox;
    initData(): void;
    loadData(resData?: LookupGridResult, rebindEvent?: boolean): void;
    private loadFavData;
    loadDataTableData(resData?: LookupGridResult): void;
    private updateDataTable;
    private setTreeInfo;
    private loadTreeTableData;
    /**
     * 在构完整树中，有部分节点因为条件被过滤，为显示完整树，
     * 这些节点在运行时是不允许被选中的, 返回新的节点数组
     * By Lucas 20200302
     */
    checkNodeCanBeSelect(nodes: any, isAllTreeData?: boolean): TreeNode[];
    onChanges(val: any): void;
    onClear(emit?: boolean): void;
    clearValue(emit?: boolean): void;
    selectItem(rowData?: any): void;
    private getParentPathCode;
    private _beforeSelectDataCallBack;
    private updateControlValue;
    private updateBindData;
    private getExtendInfoFields;
    onUpdateExtendInfo(): void;
    private updateExtendInfo;
    private getExtendInfoText;
    private getDisplayText;
    private setDisplayText;
    runDictPickedEvent(rowData: any): void;
    private focusToInput;
    closeDialog(rowData?: any): void;
    cancelSelect(): void;
    setModelValue(v: any): void;
    onTabChange(e: any): void;
    private registerMouseEventForTagView;
    private toggleClearIcon;
    private onTagboxMouseEnter;
    private onTagboxMouseLeave;
    onRemoveSelectItem($event: any, txt: any): void;
    private updateOtherFieldDataWhenTagremoved;
    onAllChildNodesClick($event: any): void;
}
