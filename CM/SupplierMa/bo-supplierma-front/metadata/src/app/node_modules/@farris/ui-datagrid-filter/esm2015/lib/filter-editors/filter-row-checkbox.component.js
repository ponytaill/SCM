/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { FilterOperator, FilterConditionValue } from './../operations/operators';
import { Component, ViewChild, ElementRef, ChangeDetectorRef, Injector } from '@angular/core';
import { FilterRowEditorComponent } from './filter-row-editor.component';
import { DatagridFilterRowService } from '../datagrid-filter-row.service';
// <input [checked]="chekced" id="{{ id }}" type="checkbox" #chk >
export class FilterCheckboxComponent extends FilterRowEditorComponent {
    /**
     * @param {?} dfrs
     * @param {?} cd
     * @param {?} inject
     */
    constructor(dfrs, cd, inject) {
        super();
        this.dfrs = dfrs;
        this.cd = cd;
        this.inject = inject;
        this.i = 0;
        this.checked = false;
        // this.dfrs.filterRowConditions$.subscribe(ccs => {
        //     this.fr.conditionChange.emit(ccs);
        // });
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        super.ngOnInit();
        this.chk.nativeElement.indeterminate = true;
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    checkedChange($event) {
        this.dfrs.closeFilterPanel();
        if (this.i > 0) {
            this.checked = !this.checked;
        }
        this.i += 1;
        if (this.i > 2) {
            this.i = 0;
            this.chk.nativeElement.indeterminate = true;
        }
        else {
            this.chk.nativeElement.indeterminate = false;
        }
        if (this.i === 0) {
            this.dfrs.updateColumnConditions(this.column.field, FilterConditionValue.All);
            this.checked = false;
        }
        else {
            /** @type {?} */
            const condition = {
                operator1: FilterOperator.Equal,
                value1: this.checked
            };
            this.dfrs.updateColumnConditions(this.column.field, condition);
        }
        this.cd.detectChanges();
        $event.stopPropagation();
    }
    /**
     * @return {?}
     */
    clearValue() {
        this.checked = false;
        this.chk.nativeElement.indeterminate = true;
        this.cd.detectChanges();
    }
    /**
     * @param {?} filterCondition
     * @return {?}
     */
    initFilter(filterCondition) {
        if (filterCondition && Object.keys(filterCondition).length) {
            this.checked = filterCondition.value1;
            this.chk.nativeElement.indeterminate = false;
            this.i = this.checked ? 2 : 1;
        }
        else {
            this.checked = false;
            this.chk.nativeElement.indeterminate = true;
            this.i = 0;
        }
        this.dfrs._updateColumnConditions(this.column.field, filterCondition);
        this.cd.detectChanges();
    }
}
FilterCheckboxComponent.decorators = [
    { type: Component, args: [{
                selector: 'filter-checkbox',
                template: `
    <div class="custom-control custom-checkbox f-checkradio-single">
        <input [name]="column.field" [checked]="checked" type="checkbox" #chk class="custom-control-input">
        <label class="custom-control-label" (click)="checkedChange($event)"></label>
    </div>
    `
            }] }
];
/** @nocollapse */
FilterCheckboxComponent.ctorParameters = () => [
    { type: DatagridFilterRowService },
    { type: ChangeDetectorRef },
    { type: Injector }
];
FilterCheckboxComponent.propDecorators = {
    chk: [{ type: ViewChild, args: ['chk',] }]
};
if (false) {
    /** @type {?} */
    FilterCheckboxComponent.prototype.i;
    /** @type {?} */
    FilterCheckboxComponent.prototype.checked;
    /** @type {?} */
    FilterCheckboxComponent.prototype.chk;
    /** @type {?} */
    FilterCheckboxComponent.prototype.dfrs;
    /**
     * @type {?}
     * @private
     */
    FilterCheckboxComponent.prototype.cd;
    /**
     * @type {?}
     * @private
     */
    FilterCheckboxComponent.prototype.inject;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmlsdGVyLXJvdy1jaGVja2JveC5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZmFycmlzL3VpLWRhdGFncmlkLWZpbHRlci8iLCJzb3VyY2VzIjpbImxpYi9maWx0ZXItZWRpdG9ycy9maWx0ZXItcm93LWNoZWNrYm94LmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFtQixjQUFjLEVBQUUsb0JBQW9CLEVBQUUsTUFBTSwyQkFBMkIsQ0FBQztBQUNsRyxPQUFPLEVBQUUsU0FBUyxFQUFVLFNBQVMsRUFBRSxVQUFVLEVBQVMsaUJBQWlCLEVBQUUsUUFBUSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzdHLE9BQU8sRUFBRSx3QkFBd0IsRUFBRSxNQUFNLCtCQUErQixDQUFDO0FBQ3pFLE9BQU8sRUFBRSx3QkFBd0IsRUFBRSxNQUFNLGdDQUFnQyxDQUFDOztBQWlCMUUsTUFBTSxPQUFPLHVCQUF3QixTQUFRLHdCQUF3Qjs7Ozs7O0lBSWpFLFlBQ1csSUFBOEIsRUFDN0IsRUFBcUIsRUFBVSxNQUFnQjtRQUN2RCxLQUFLLEVBQUUsQ0FBQztRQUZELFNBQUksR0FBSixJQUFJLENBQTBCO1FBQzdCLE9BQUUsR0FBRixFQUFFLENBQW1CO1FBQVUsV0FBTSxHQUFOLE1BQU0sQ0FBVTtRQUwzRCxNQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ04sWUFBTyxHQUFHLEtBQUssQ0FBQztRQU9aLG9EQUFvRDtRQUNwRCx5Q0FBeUM7UUFDekMsTUFBTTtJQUNWLENBQUM7Ozs7SUFFRCxRQUFRO1FBQ0osS0FBSyxDQUFDLFFBQVEsRUFBRSxDQUFDO1FBQ2pCLElBQUksQ0FBQyxHQUFHLENBQUMsYUFBYSxDQUFDLGFBQWEsR0FBRyxJQUFJLENBQUM7SUFDaEQsQ0FBQzs7Ozs7SUFFRCxhQUFhLENBQUMsTUFBa0I7UUFDNUIsSUFBSSxDQUFDLElBQUksQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDO1FBQzdCLElBQUksSUFBSSxDQUFDLENBQUMsR0FBRyxDQUFDLEVBQUU7WUFDWixJQUFJLENBQUMsT0FBTyxHQUFHLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQztTQUNoQztRQUNELElBQUksQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ1osSUFBSSxJQUFJLENBQUMsQ0FBQyxHQUFHLENBQUMsRUFBRTtZQUNaLElBQUksQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1lBQ1gsSUFBSSxDQUFDLEdBQUcsQ0FBQyxhQUFhLENBQUMsYUFBYSxHQUFHLElBQUksQ0FBQztTQUMvQzthQUFNO1lBQ0gsSUFBSSxDQUFDLEdBQUcsQ0FBQyxhQUFhLENBQUMsYUFBYSxHQUFHLEtBQUssQ0FBQztTQUNoRDtRQUVELElBQUksSUFBSSxDQUFDLENBQUMsS0FBSyxDQUFDLEVBQUU7WUFDZCxJQUFJLENBQUMsSUFBSSxDQUFDLHNCQUFzQixDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxFQUFFLG9CQUFvQixDQUFDLEdBQUcsQ0FBRSxDQUFDO1lBQy9FLElBQUksQ0FBQyxPQUFPLEdBQUcsS0FBSyxDQUFDO1NBQ3hCO2FBQU07O2tCQUNHLFNBQVMsR0FBb0I7Z0JBQy9CLFNBQVMsRUFBRSxjQUFjLENBQUMsS0FBSztnQkFDL0IsTUFBTSxFQUFFLElBQUksQ0FBQyxPQUFPO2FBQ3ZCO1lBQ0QsSUFBSSxDQUFDLElBQUksQ0FBQyxzQkFBc0IsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLEtBQUssRUFBRSxTQUFTLENBQUUsQ0FBQztTQUNuRTtRQUNELElBQUksQ0FBQyxFQUFFLENBQUMsYUFBYSxFQUFFLENBQUM7UUFDeEIsTUFBTSxDQUFDLGVBQWUsRUFBRSxDQUFDO0lBQzdCLENBQUM7Ozs7SUFFRCxVQUFVO1FBQ04sSUFBSSxDQUFDLE9BQU8sR0FBRyxLQUFLLENBQUM7UUFDckIsSUFBSSxDQUFDLEdBQUcsQ0FBQyxhQUFhLENBQUMsYUFBYSxHQUFHLElBQUksQ0FBQztRQUM1QyxJQUFJLENBQUMsRUFBRSxDQUFDLGFBQWEsRUFBRSxDQUFDO0lBQzVCLENBQUM7Ozs7O0lBRUQsVUFBVSxDQUFDLGVBQW9CO1FBQzNCLElBQUksZUFBZSxJQUFJLE1BQU0sQ0FBQyxJQUFJLENBQUMsZUFBZSxDQUFDLENBQUMsTUFBTSxFQUFFO1lBQ3hELElBQUksQ0FBQyxPQUFPLEdBQUcsZUFBZSxDQUFDLE1BQU0sQ0FBQztZQUN0QyxJQUFJLENBQUMsR0FBRyxDQUFDLGFBQWEsQ0FBQyxhQUFhLEdBQUcsS0FBSyxDQUFDO1lBQzdDLElBQUksQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7U0FDakM7YUFBTTtZQUNILElBQUksQ0FBQyxPQUFPLEdBQUcsS0FBSyxDQUFDO1lBQ3JCLElBQUksQ0FBQyxHQUFHLENBQUMsYUFBYSxDQUFDLGFBQWEsR0FBRyxJQUFJLENBQUM7WUFDNUMsSUFBSSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUM7U0FDZDtRQUNELElBQUksQ0FBQyxJQUFJLENBQUMsdUJBQXVCLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLEVBQUUsZUFBZSxDQUFDLENBQUM7UUFDdEUsSUFBSSxDQUFDLEVBQUUsQ0FBQyxhQUFhLEVBQUUsQ0FBQztJQUM1QixDQUFDOzs7WUExRUosU0FBUyxTQUFDO2dCQUNQLFFBQVEsRUFBRSxpQkFBaUI7Z0JBQzNCLFFBQVEsRUFBRTs7Ozs7S0FLVDthQUVKOzs7O1lBaEJRLHdCQUF3QjtZQUZ5QixpQkFBaUI7WUFBRSxRQUFROzs7a0JBc0JoRixTQUFTLFNBQUMsS0FBSzs7OztJQUZoQixvQ0FBTTs7SUFDTiwwQ0FBZ0I7O0lBQ2hCLHNDQUFrQzs7SUFFOUIsdUNBQXFDOzs7OztJQUNyQyxxQ0FBNkI7Ozs7O0lBQUUseUNBQXdCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRmlsdGVyQ29uZGl0aW9uLCBGaWx0ZXJPcGVyYXRvciwgRmlsdGVyQ29uZGl0aW9uVmFsdWUgfSBmcm9tICcuLy4uL29wZXJhdGlvbnMvb3BlcmF0b3JzJztcclxuaW1wb3J0IHsgQ29tcG9uZW50LCBPbkluaXQsIFZpZXdDaGlsZCwgRWxlbWVudFJlZiwgSW5wdXQsIENoYW5nZURldGVjdG9yUmVmLCBJbmplY3RvciB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBGaWx0ZXJSb3dFZGl0b3JDb21wb25lbnQgfSBmcm9tICcuL2ZpbHRlci1yb3ctZWRpdG9yLmNvbXBvbmVudCc7XHJcbmltcG9ydCB7IERhdGFncmlkRmlsdGVyUm93U2VydmljZSB9IGZyb20gJy4uL2RhdGFncmlkLWZpbHRlci1yb3cuc2VydmljZSc7XHJcbmltcG9ydCB7IEZpbHRlclJvd0NvbXBvbmVudCB9IGZyb20gJy4uL2RhdGFncmlkLWZpbHRlci1yb3cuY29tcG9uZW50JztcclxuXHJcblxyXG5cclxuLy8gPGlucHV0IFtjaGVja2VkXT1cImNoZWtjZWRcIiBpZD1cInt7IGlkIH19XCIgdHlwZT1cImNoZWNrYm94XCIgI2NoayA+XHJcblxyXG5AQ29tcG9uZW50KHtcclxuICAgIHNlbGVjdG9yOiAnZmlsdGVyLWNoZWNrYm94JyxcclxuICAgIHRlbXBsYXRlOiBgXHJcbiAgICA8ZGl2IGNsYXNzPVwiY3VzdG9tLWNvbnRyb2wgY3VzdG9tLWNoZWNrYm94IGYtY2hlY2tyYWRpby1zaW5nbGVcIj5cclxuICAgICAgICA8aW5wdXQgW25hbWVdPVwiY29sdW1uLmZpZWxkXCIgW2NoZWNrZWRdPVwiY2hlY2tlZFwiIHR5cGU9XCJjaGVja2JveFwiICNjaGsgY2xhc3M9XCJjdXN0b20tY29udHJvbC1pbnB1dFwiPlxyXG4gICAgICAgIDxsYWJlbCBjbGFzcz1cImN1c3RvbS1jb250cm9sLWxhYmVsXCIgKGNsaWNrKT1cImNoZWNrZWRDaGFuZ2UoJGV2ZW50KVwiPjwvbGFiZWw+XHJcbiAgICA8L2Rpdj5cclxuICAgIGBcclxuXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBGaWx0ZXJDaGVja2JveENvbXBvbmVudCBleHRlbmRzIEZpbHRlclJvd0VkaXRvckNvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCB7XHJcbiAgICBpID0gMDtcclxuICAgIGNoZWNrZWQgPSBmYWxzZTtcclxuICAgIEBWaWV3Q2hpbGQoJ2NoaycpIGNoazogRWxlbWVudFJlZjtcclxuICAgIGNvbnN0cnVjdG9yKFxyXG4gICAgICAgIHB1YmxpYyBkZnJzOiBEYXRhZ3JpZEZpbHRlclJvd1NlcnZpY2UsXHJcbiAgICAgICAgcHJpdmF0ZSBjZDogQ2hhbmdlRGV0ZWN0b3JSZWYsIHByaXZhdGUgaW5qZWN0OiBJbmplY3Rvcikge1xyXG4gICAgICAgIHN1cGVyKCk7XHJcblxyXG4gICAgICAgIC8vIHRoaXMuZGZycy5maWx0ZXJSb3dDb25kaXRpb25zJC5zdWJzY3JpYmUoY2NzID0+IHtcclxuICAgICAgICAvLyAgICAgdGhpcy5mci5jb25kaXRpb25DaGFuZ2UuZW1pdChjY3MpO1xyXG4gICAgICAgIC8vIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIG5nT25Jbml0KCkge1xyXG4gICAgICAgIHN1cGVyLm5nT25Jbml0KCk7XHJcbiAgICAgICAgdGhpcy5jaGsubmF0aXZlRWxlbWVudC5pbmRldGVybWluYXRlID0gdHJ1ZTtcclxuICAgIH1cclxuXHJcbiAgICBjaGVja2VkQ2hhbmdlKCRldmVudDogTW91c2VFdmVudCkge1xyXG4gICAgICAgIHRoaXMuZGZycy5jbG9zZUZpbHRlclBhbmVsKCk7XHJcbiAgICAgICAgaWYgKHRoaXMuaSA+IDApIHtcclxuICAgICAgICAgICAgdGhpcy5jaGVja2VkID0gIXRoaXMuY2hlY2tlZDtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5pICs9IDE7XHJcbiAgICAgICAgaWYgKHRoaXMuaSA+IDIpIHtcclxuICAgICAgICAgICAgdGhpcy5pID0gMDtcclxuICAgICAgICAgICAgdGhpcy5jaGsubmF0aXZlRWxlbWVudC5pbmRldGVybWluYXRlID0gdHJ1ZTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLmNoay5uYXRpdmVFbGVtZW50LmluZGV0ZXJtaW5hdGUgPSBmYWxzZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICh0aGlzLmkgPT09IDApIHtcclxuICAgICAgICAgICAgdGhpcy5kZnJzLnVwZGF0ZUNvbHVtbkNvbmRpdGlvbnModGhpcy5jb2x1bW4uZmllbGQsIEZpbHRlckNvbmRpdGlvblZhbHVlLkFsbCApO1xyXG4gICAgICAgICAgICB0aGlzLmNoZWNrZWQgPSBmYWxzZTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBjb25zdCBjb25kaXRpb246IEZpbHRlckNvbmRpdGlvbiA9IHtcclxuICAgICAgICAgICAgICAgIG9wZXJhdG9yMTogRmlsdGVyT3BlcmF0b3IuRXF1YWwsXHJcbiAgICAgICAgICAgICAgICB2YWx1ZTE6IHRoaXMuY2hlY2tlZFxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICB0aGlzLmRmcnMudXBkYXRlQ29sdW1uQ29uZGl0aW9ucyh0aGlzLmNvbHVtbi5maWVsZCwgY29uZGl0aW9uICk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuY2QuZGV0ZWN0Q2hhbmdlcygpO1xyXG4gICAgICAgICRldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcclxuICAgIH1cclxuXHJcbiAgICBjbGVhclZhbHVlKCkge1xyXG4gICAgICAgIHRoaXMuY2hlY2tlZCA9IGZhbHNlO1xyXG4gICAgICAgIHRoaXMuY2hrLm5hdGl2ZUVsZW1lbnQuaW5kZXRlcm1pbmF0ZSA9IHRydWU7XHJcbiAgICAgICAgdGhpcy5jZC5kZXRlY3RDaGFuZ2VzKCk7XHJcbiAgICB9XHJcblxyXG4gICAgaW5pdEZpbHRlcihmaWx0ZXJDb25kaXRpb246IGFueSkge1xyXG4gICAgICAgIGlmIChmaWx0ZXJDb25kaXRpb24gJiYgT2JqZWN0LmtleXMoZmlsdGVyQ29uZGl0aW9uKS5sZW5ndGgpIHtcclxuICAgICAgICAgICAgdGhpcy5jaGVja2VkID0gZmlsdGVyQ29uZGl0aW9uLnZhbHVlMTtcclxuICAgICAgICAgICAgdGhpcy5jaGsubmF0aXZlRWxlbWVudC5pbmRldGVybWluYXRlID0gZmFsc2U7XHJcbiAgICAgICAgICAgIHRoaXMuaSA9IHRoaXMuY2hlY2tlZCA/IDIgOiAxO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMuY2hlY2tlZCA9IGZhbHNlO1xyXG4gICAgICAgICAgICB0aGlzLmNoay5uYXRpdmVFbGVtZW50LmluZGV0ZXJtaW5hdGUgPSB0cnVlO1xyXG4gICAgICAgICAgICB0aGlzLmkgPSAwO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLmRmcnMuX3VwZGF0ZUNvbHVtbkNvbmRpdGlvbnModGhpcy5jb2x1bW4uZmllbGQsIGZpbHRlckNvbmRpdGlvbik7XHJcbiAgICAgICAgdGhpcy5jZC5kZXRlY3RDaGFuZ2VzKCk7XHJcbiAgICB9XHJcbn1cclxuIl19