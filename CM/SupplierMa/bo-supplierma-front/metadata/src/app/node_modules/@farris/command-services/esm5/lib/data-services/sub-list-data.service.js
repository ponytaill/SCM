import { Injectable, Optional } from '@angular/core';
import { empty, of, EMPTY } from 'rxjs';
import { tap, switchMap, concatMap } from 'rxjs/operators';
import { Repository, ViewModel } from '@farris/devkit';
import { FormLoadingService } from '../form-loading/form-loading.service';
import { FormNotifyService } from '../form-notify.service';
import { LanguageService } from '../languag.service';
import { FormMessageService } from '../form-message.service';
import { FormErrorService } from '../error/form-error.service';
/**
 * 子列表取数服务
 */
var SubListDataService = /** @class */ (function () {
    /**
     * 构造函数
     */
    function SubListDataService(msgService, repository, loadingService, viewModel, languageService, formNotifyService, formErrorService) {
        this.msgService = msgService;
        this.repository = repository;
        this.loadingService = loadingService;
        this.viewModel = viewModel;
        this.languageService = languageService;
        this.formNotifyService = formNotifyService;
        this.formErrorService = formErrorService;
        if (!languageService) {
            this.languageService = LanguageService.getInstance();
        }
        this.viewModel = viewModel;
    }
    /**
     * 新增
     */
    SubListDataService.prototype.add = function () {
        var _this = this;
        if (this.messagePipe) {
            this.messagePipe.next({ messageType: 'add' });
        }
        var path = this.getPath();
        var loadingTimerId = this.loadingService.showLoadingWithDelay(500);
        var append$ = this.repository.appendByPath(path);
        return append$.pipe(tap(function () {
            _this.loadingService.hideDelayLoading(loadingTimerId);
        }, function (error) {
            _this.loadingService.hideDelayLoading(loadingTimerId);
            _this.formErrorService.exception(_this.languageService.addFailed, error);
        }));
    };
    /**
     * 在指定位置插入
     * @param position 位置
     */
    SubListDataService.prototype.insert = function (position) {
        var _this = this;
        if (position === void 0) { position = -1; }
        if (this.messagePipe) {
            this.messagePipe.next({ messageType: 'insert' });
        }
        var path = this.getPath();
        var loadingTimerId = this.loadingService.showLoadingWithDelay(500);
        var append$ = this.repository.insertByPath(path, position);
        return append$.pipe(tap(function () {
            _this.loadingService.hideDelayLoading(loadingTimerId);
        }, function (error) {
            _this.loadingService.hideDelayLoading(loadingTimerId);
            _this.formErrorService.exception(_this.languageService.addFailed, error);
        }));
    };
    /**
     * 删除子表数据
     */
    SubListDataService.prototype.remove = function (id, successMsg) {
        var msg = successMsg ? successMsg : '';
        return this.innerRemove(id, false, msg);
    };
    /**
     * 删除子表数据（不确认）
     */
    SubListDataService.prototype.removeWithoutConfirm = function (id) {
        return this.innerRemove(id, true, '');
    };
    /**
     * 批量删除子表
     * @param ids ids
     * @param successMsg 自定义提示信息
     */
    SubListDataService.prototype.removeChildrenByIds = function (ids, successMsg) {
        var _this = this;
        if (!ids) {
            this.formNotifyService.warning(this.languageService['plsSelectDeleteData'], { hideTitle: true });
            return EMPTY;
        }
        var action$ = this.msgService.confirm(this.languageService.confirmDeletion);
        return action$.pipe(concatMap(function (result) {
            if (!result) {
                return EMPTY;
            }
            var path = _this.getPath();
            var loadingTimerId = _this.loadingService.showLoadingWithDelay(500);
            var remove$ = _this.repository.batchRemoveByPath(path, ids);
            return remove$.pipe(tap(function () {
                _this.loadingService.hideDelayLoading(loadingTimerId);
                if (successMsg && successMsg.trim()) {
                    _this.formNotifyService.success(successMsg, { hideTitle: true });
                }
                else {
                    _this.formNotifyService.success(_this.languageService.deleteSuccess, { hideTitle: true });
                }
                // this.formNotifyService.success(this.languageService.deleteSuccess, { hideTitle: true });
            }, function (error) {
                _this.loadingService.hideDelayLoading(loadingTimerId);
                _this.formErrorService.exception(_this.languageService.deleteFailed, error);
            }));
        }));
    };
    /**
     * 删除
     */
    SubListDataService.prototype.innerRemove = function (id, isConfirm, successMsg) {
        var _this = this;
        if (this.messagePipe) {
            this.messagePipe.next({ messageType: 'remove' });
        }
        if (!id) {
            this.formNotifyService.warning(this.languageService['plsSelectDeleteData'], { hideTitle: true });
            return empty();
        }
        var action$;
        if (isConfirm === false) {
            action$ = this.msgService.question(this.languageService.confirmDeletion);
        }
        else {
            action$ = of(true);
        }
        return action$.pipe(concatMap(function (result) {
            if (!result) {
                return empty();
            }
            var path = _this.getPath();
            var loadingTimerId = _this.loadingService.showLoadingWithDelay(500);
            var remove$ = _this.repository.removeByPath(path, id);
            return remove$.pipe(tap(function () {
                _this.loadingService.hideDelayLoading(loadingTimerId);
                if (successMsg && successMsg.trim()) {
                    _this.formNotifyService.success(successMsg, { hideTitle: true });
                }
                else {
                    _this.formNotifyService.success(_this.languageService.deleteSuccess, { hideTitle: true });
                }
                // this.formNotifyService.success(this.languageService.deleteSuccess, { hideTitle: true });
            }, function (error) {
                _this.loadingService.hideDelayLoading(loadingTimerId);
                _this.formErrorService.exception(_this.languageService.deleteFailed, error);
            }));
        }));
    };
    /**
     * 删除并保存
     * @param id id
     * @param successMsg 自定义提示信息
     */
    SubListDataService.prototype.removeAndSave = function (id, successMsg) {
        var _this = this;
        if (this.messagePipe) {
            this.messagePipe.next({ messageType: 'removeAndSave' });
        }
        if (!id) {
            this.formNotifyService.warning(this.languageService.plsSelectDeleteData, { hideTitle: true });
            return empty();
        }
        var action$ = this.msgService.confirm(this.languageService.confirmDeletion);
        return action$.pipe(concatMap(function (result) {
            if (!result) {
                return empty();
            }
            // 删除子表数据
            var path = _this.getPath();
            var loadingTimerId = _this.loadingService.showLoadingWithDelay(500);
            var remove$ = _this.repository.removeByPath(path, id);
            return remove$.pipe(
            // 执行主表保存
            switchMap(function () {
                var fid = _this.viewModel.bindingData.list.currentId;
                return _this.repository.applyChangesById(fid);
            }), 
            // 隐藏加载中
            tap(function () {
                _this.loadingService.hideDelayLoading(loadingTimerId);
                if (successMsg && successMsg.trim()) {
                    _this.formNotifyService.success(successMsg, { hideTitle: true });
                }
                else {
                    _this.formNotifyService.success(_this.languageService.deleteSuccess, { hideTitle: true });
                }
                // this.formNotifyService.success(this.languageService.deleteSuccess, { hideTitle: true });
            }, function (error) {
                _this.loadingService.hideDelayLoading(loadingTimerId);
                _this.formErrorService.exception(_this.languageService.deleteFailed, error);
            }));
        }));
    };
    /**
     * 上移或下移数据
     * @param direction 方向，up | down
     * @param field 排序字段
     * @param targets 要移动的数据
     * @description
     * 使用该方法时排序字段必须有值，否则无法排序
     */
    SubListDataService.prototype.move = function (direction, field, targets) {
        var _this = this;
        if (!targets) {
            return;
        }
        if (typeof targets === 'string') {
            targets = targets.split(',').filter(function (p) { return p; });
        }
        var bindingPath = this.viewModel && this.viewModel.bindingPath || null;
        if (!bindingPath) {
            return;
        }
        var bindingList = this.viewModel.bindingData.getList();
        if (!bindingList || bindingList.length < 1) {
            return;
        }
        targets.forEach(function (target) {
            var index = bindingList.getIndexById(target);
            if (index === -1) {
                return;
            }
            var item = bindingList.findById(target);
            var position = item.getValue(field);
            var base = direction === 'up' ? -1 : 1;
            // 待交换的行信息
            var exchangeRowIndex = index + base;
            if (exchangeRowIndex < 0 || exchangeRowIndex > bindingList.length) {
                // 第一行无法上移，最后一行无法下移
                return;
            }
            var exchangeRowId = bindingList.getIdByIndex(exchangeRowIndex);
            var exchangeRow = bindingList.findById(exchangeRowId);
            var exchangeRowPosition = exchangeRow[field];
            // 移动行和交换行都没有排序
            if (_this.isNullOrEmpty(position) && _this.isNullOrEmpty(exchangeRowPosition)) {
                return;
            }
            bindingList.swapById(target, exchangeRowId);
            exchangeRow.setValue(field, position, true, true);
            item.setValue(field, exchangeRowPosition, true, true);
        });
    };
    SubListDataService.prototype.isNullOrEmpty = function (value) {
        return value === '' || value === null || value === undefined;
    };
    /**
     * 获取完整路径
     * @todo：强识别到从表这一级
     * fixed by justin: 根据bindingPath，如果是从从表，需要获取主表数据id和从表数据id
     */
    SubListDataService.prototype.getPath = function () {
        var bindingPath = this.viewModel.bindingPath;
        var rid = this.viewModel.bindingData.list.currentId; // root表数据id
        var path = '/' + rid;
        var subPaths = bindingPath.split('/');
        if (subPaths.length > 0) {
            // eg:bindingPath形如/edus/grades,split后是['', 'edus', 'grades']
            // 因此index从1开始
            for (var index = 1; index < subPaths.length - 1; index++) {
                var subPath = subPaths[index];
                var subData = this.viewModel.bindingData[subPath];
                if (!subData || !subData.currentId) {
                    this.formNotifyService.warning(this.languageService['plsSelectDetailFormData'], { hideTitle: true });
                    throw Error("\u83B7\u53D6\u5B50\u8868\u5B8C\u6574\u8DEF\u5F84\u51FA\u9519\uFF0C\u627E\u4E0D\u5230" + subData + "\u5BF9\u5E94\u7684\u5B50\u8868\uFF0C\u6216\u5BF9\u5E94\u5B50\u8868\u6CA1\u6709\u5F53\u524D\u884C\u3002");
                }
                path += "/" + subPath + "/" + subData.currentId;
            }
        }
        path += '/' + subPaths[subPaths.length - 1];
        return path;
    };
    Object.defineProperty(SubListDataService.prototype, "messagePipe", {
        /**
         * 获取根组件appContext
         */
        get: function () {
            if (this.viewModel && this.viewModel.frameContext) {
                var appContext = this.viewModel.frameContext.getFormAppContext() || null;
                if (appContext) {
                    return appContext.messagePipe || null;
                }
            }
            return null;
        },
        enumerable: true,
        configurable: true
    });
    SubListDataService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    SubListDataService.ctorParameters = function () { return [
        { type: FormMessageService },
        { type: Repository },
        { type: FormLoadingService },
        { type: ViewModel },
        { type: LanguageService, decorators: [{ type: Optional }] },
        { type: FormNotifyService },
        { type: FormErrorService }
    ]; };
    return SubListDataService;
}());
export { SubListDataService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3ViLWxpc3QtZGF0YS5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGZhcnJpcy9jb21tYW5kLXNlcnZpY2VzLyIsInNvdXJjZXMiOlsibGliL2RhdGEtc2VydmljZXMvc3ViLWxpc3QtZGF0YS5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsUUFBUSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ3JELE9BQU8sRUFBYyxLQUFLLEVBQUUsRUFBRSxFQUFFLEtBQUssRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUNwRCxPQUFPLEVBQUUsR0FBRyxFQUFFLFNBQVMsRUFBRSxTQUFTLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUMzRCxPQUFPLEVBQWUsVUFBVSxFQUFFLFNBQVMsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQ3BFLE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxNQUFNLHNDQUFzQyxDQUFDO0FBQzFFLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLHdCQUF3QixDQUFDO0FBQzNELE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQztBQUNyRCxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSx5QkFBeUIsQ0FBQztBQUM3RCxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSw2QkFBNkIsQ0FBQztBQUUvRDs7R0FFRztBQUNIO0lBR0U7O09BRUc7SUFDSCw0QkFDVSxVQUE4QixFQUM5QixVQUEyQixFQUMzQixjQUFrQyxFQUNsQyxTQUFvQixFQUNSLGVBQWdDLEVBQzVDLGlCQUFvQyxFQUNwQyxnQkFBa0M7UUFObEMsZUFBVSxHQUFWLFVBQVUsQ0FBb0I7UUFDOUIsZUFBVSxHQUFWLFVBQVUsQ0FBaUI7UUFDM0IsbUJBQWMsR0FBZCxjQUFjLENBQW9CO1FBQ2xDLGNBQVMsR0FBVCxTQUFTLENBQVc7UUFDUixvQkFBZSxHQUFmLGVBQWUsQ0FBaUI7UUFDNUMsc0JBQWlCLEdBQWpCLGlCQUFp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QUFPLENBQUMsSUFBSSxDQUFDLGVBQWUsQ0FBQyx5QkFBeUIsQ0FBQyxFQUFFLEVBQUUsU0FBUyxFQUFFLElBQUksRUFBRSxDQUFDLENBQUM7b0JBQ3JHLE1BQU0sS0FBSyxDQUFDLHlGQUFpQixPQUFPLDJHQUFtQixDQUFDLENBQUM7aUJBQzFEO2dCQUNELElBQUksSUFBSSxNQUFJLE9BQU8sU0FBSSxPQUFPLENBQUMsU0FBVyxDQUFDO2FBQzVDO1NBQ0Y7UUFDRCxJQUFJLElBQUksR0FBRyxHQUFHLFFBQVEsQ0FBQyxRQUFRLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxDQUFDO1FBRTVDLE9BQU8sSUFBSSxDQUFDO0lBQ2QsQ0FBQztJQUlELHNCQUFZLDJDQUFXO1FBSHZCOztXQUVHO2FBQ0g7WUFDRSxJQUFJLElBQUksQ0FBQyxTQUFTLElBQUksSUFBSSxDQUFDLFNBQVMsQ0FBQyxZQUFZLEVBQUU7Z0JBQ2pELElBQU0sVUFBVSxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsWUFBWSxDQUFDLGlCQUFpQixFQUFFLElBQUksSUFBSSxDQUFDO2dCQUMzRSxJQUFJLFVBQVUsRUFBRTtvQkFDZCxPQUFPLFVBQVUsQ0FBQyxXQUFXLElBQUksSUFBSSxDQUFDO2lCQUN2QzthQUNGO1lBQ0QsT0FBTyxJQUFJLENBQUM7UUFDZCxDQUFDOzs7T0FBQTs7Z0JBcFRGLFVBQVU7Ozs7Z0JBTkYsa0JBQWtCO2dCQUpMLFVBQVU7Z0JBQ3ZCLGtCQUFrQjtnQkFETyxTQUFTO2dCQUdsQyxlQUFlLHVCQWtCbkIsUUFBUTtnQkFuQkosaUJBQWlCO2dCQUdqQixnQkFBZ0I7O0lBMFR6Qix5QkFBQztDQUFBLEFBclRELElBcVRDO0FBQ0QsT0FBTyxFQUFFLGtCQUFrQixFQUFFLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlLCBPcHRpb25hbCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSwgZW1wdHksIG9mLCBFTVBUWSB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgdGFwLCBzd2l0Y2hNYXAsIGNvbmNhdE1hcCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcbmltcG9ydCB7IEJpbmRpbmdMaXN0LCBSZXBvc2l0b3J5LCBWaWV3TW9kZWwgfSBmcm9tICdAZmFycmlzL2RldmtpdCc7XG5pbXBvcnQgeyBGb3JtTG9hZGluZ1NlcnZpY2UgfSBmcm9tICcuLi9mb3JtLWxvYWRpbmcvZm9ybS1sb2FkaW5nLnNlcnZpY2UnO1xuaW1wb3J0IHsgRm9ybU5vdGlmeVNlcnZpY2UgfSBmcm9tICcuLi9mb3JtLW5vdGlmeS5zZXJ2aWNlJztcbmltcG9ydCB7IExhbmd1YWdlU2VydmljZSB9IGZyb20gJy4uL2xhbmd1YWcuc2VydmljZSc7XG5pbXBvcnQgeyBGb3JtTWVzc2FnZVNlcnZpY2UgfSBmcm9tICcuLi9mb3JtLW1lc3NhZ2Uuc2VydmljZSc7XG5pbXBvcnQgeyBGb3JtRXJyb3JTZXJ2aWNlIH0gZnJvbSAnLi4vZXJyb3IvZm9ybS1lcnJvci5zZXJ2aWNlJztcblxuLyoqXG4gKiDlrZDliJfooajlj5bmlbDmnI3liqFcbiAqL1xuQEluamVjdGFibGUoKVxuY2xhc3MgU3ViTGlzdERhdGFTZXJ2aWNlIHtcblxuICAvKipcbiAgICog5p6E6YCg5Ye95pWwXG4gICAqL1xuICBjb25zdHJ1Y3RvcihcbiAgICBwcml2YXRlIG1zZ1NlcnZpY2U6IEZvcm1NZXNzYWdlU2VydmljZSxcbiAgICBwcml2YXRlIHJlcG9zaXRvcnk6IFJlcG9zaXRvcnk8YW55PixcbiAgICBwcml2YXRlIGxvYWRpbmdTZXJ2aWNlOiBGb3JtTG9hZGluZ1NlcnZpY2UsXG4gICAgcHJpdmF0ZSB2aWV3TW9kZWw6IFZpZXdNb2RlbCxcbiAgICBAT3B0aW9uYWwoKSBwcml2YXRlIGxhbmd1YWdlU2VydmljZTogTGFuZ3VhZ2VTZXJ2aWNlLFxuICAgIHByaXZhdGUgZm9ybU5vdGlmeVNlcnZpY2U6IEZvcm1Ob3RpZnlTZXJ2aWNlLFxuICAgIHByaXZhdGUgZm9ybUVycm9yU2VydmljZTogRm9ybUVycm9yU2VydmljZVxuICApIHtcbiAgICBpZiAoIWxhbmd1YWdlU2VydmljZSkge1xuICAgICAgdGhpcy5sYW5ndWFnZVNlcnZpY2UgPSBMYW5ndWFnZVNlcnZpY2UuZ2V0SW5zdGFuY2UoKTtcbiAgICB9XG4gICAgdGhpcy52aWV3TW9kZWwgPSB2aWV3TW9kZWw7XG4gIH1cblxuICAvKipcbiAgICog5paw5aKeXG4gICAqL1xuICBhZGQoKTogT2JzZXJ2YWJsZTxhbnk+IHtcbiAgICBpZiAodGhpcy5tZXNzYWdlUGlwZSkge1xuICAgICAgdGhpcy5tZXNzYWdlUGlwZS5uZXh0KHsgbWVzc2FnZVR5cGU6ICdhZGQnIH0pO1xuICAgIH1cbiAgICBjb25zdCBwYXRoID0gdGhpcy5nZXRQYXRoKCk7XG4gICAgY29uc3QgbG9hZGluZ1RpbWVySWQgPSB0aGlzLmxvYWRpbmdTZXJ2aWNlLnNob3dMb2FkaW5nV2l0aERlbGF5KDUwMCk7XG4gICAgY29uc3QgYXBwZW5kJCA9IHRoaXMucmVwb3NpdG9yeS5hcHBlbmRCeVBhdGgocGF0aCk7XG4gICAgcmV0dXJuIGFwcGVuZCQucGlwZShcbiAgICAgIHRhcCgoKSA9PiB7XG4gICAgICAgIHRoaXMubG9hZGluZ1NlcnZpY2UuaGlkZURlbGF5TG9hZGluZyhsb2FkaW5nVGltZXJJZCk7XG4gICAgICB9LFxuICAgICAgICBlcnJvciA9PiB7XG4gICAgICAgICAgdGhpcy5sb2FkaW5nU2VydmljZS5oaWRlRGVsYXlMb2FkaW5nKGxvYWRpbmdUaW1lcklkKTtcbiAgICAgICAgICB0aGlzLmZvcm1FcnJvclNlcnZpY2UuZXhjZXB0aW9uKHRoaXMubGFuZ3VhZ2VTZXJ2aWNlLmFkZEZhaWxlZCwgZXJyb3IpO1xuICAgICAgICB9XG4gICAgICApXG4gICAgKTtcbiAgfVxuICAvKipcbiAgICog5Zyo5oyH5a6a5L2N572u5o+S5YWlXG4gICAqIEBwYXJhbSBwb3NpdGlvbiDkvY3nva5cbiAgICovXG4gIHB1YmxpYyBpbnNlcnQocG9zaXRpb246IDEgfCAtMSA9IC0xKSB7XG4gICAgaWYgKHRoaXMubWVzc2FnZVBpcGUpIHtcbiAgICAgIHRoaXMubWVzc2FnZVBpcGUubmV4dCh7IG1lc3NhZ2VUeXBlOiAnaW5zZXJ0JyB9KTtcbiAgICB9XG4gICAgY29uc3QgcGF0aCA9IHRoaXMuZ2V0UGF0aCgpO1xuICAgIGNvbnN0IGxvYWRpbmdUaW1lcklkID0gdGhpcy5sb2FkaW5nU2VydmljZS5zaG93TG9hZGluZ1dpdGhEZWxheSg1MDApO1xuICAgIGNvbnN0IGFwcGVuZCQgPSB0aGlzLnJlcG9zaXRvcnkuaW5zZXJ0QnlQYXRoKHBhdGgsIHBvc2l0aW9uKTtcbiAgICByZXR1cm4gYXBwZW5kJC5waXBlKFxuICAgICAgdGFwKCgpID0+IHtcbiAgICAgICAgdGhpcy5sb2FkaW5nU2VydmljZS5oaWRlRGVsYXlMb2FkaW5nKGxvYWRpbmdUaW1lcklkKTtcbiAgICAgIH0sXG4gICAgICAgIGVycm9yID0+IHtcbiAgICAgICAgICB0aGlzLmxvYWRpbmdTZXJ2aWNlLmhpZGVEZWxheUxvYWRpbmcobG9hZGluZ1RpbWVySWQpO1xuICAgICAgICAgIHRoaXMuZm9ybUVycm9yU2VydmljZS5leGNlcHRpb24odGhpcy5sYW5ndWFnZVNlcnZpY2UuYWRkRmFpbGVkLCBlcnJvcik7XG4gICAgICAgIH1cbiAgICAgIClcbiAgICApO1xuICB9XG4gIC8qKlxuICAgKiDliKDpmaTlrZDooajmlbDmja5cbiAgICovXG4gIHJlbW92ZShpZDogc3RyaW5nLCBzdWNjZXNzTXNnPzogc3RyaW5nKTogT2JzZXJ2YWJsZTxhbnk+IHtcbiAgICBjb25zdCBtc2cgPSBzdWNjZXNzTXNnID8gc3VjY2Vzc01zZyA6ICcnO1xuICAgIHJldHVybiB0aGlzLmlubmVyUmVtb3ZlKGlkLCBmYWxzZSwgbXNnKTtcbiAgfVxuXG4gIC8qKlxuICAgKiDliKDpmaTlrZDooajmlbDmja7vvIjkuI3noa7orqTvvIlcbiAgICovXG4gIHJlbW92ZVdpdGhvdXRDb25maXJtKGlkOiBzdHJpbmcpOiBPYnNlcnZhYmxlPGFueT4ge1xuICAgIHJldHVybiB0aGlzLmlubmVyUmVtb3ZlKGlkLCB0cnVlLCAnJyk7XG4gIH1cblxuICAvKipcbiAgICog5om56YeP5Yig6Zmk5a2Q6KGoXG4gICAqIEBwYXJhbSBpZHMgaWRzXG4gICAqIEBwYXJhbSBzdWNjZXNzTXNnIOiHquWumuS5ieaPkOekuuS/oeaBr1xuICAgKi9cbiAgcmVtb3ZlQ2hpbGRyZW5CeUlkcyhpZHM6IHN0cmluZywgc3VjY2Vzc01zZz86IHN0cmluZyk6IE9ic2VydmFibGU8YW55PiB7XG4gICAgaWYgKCFpZHMpIHtcbiAgICAgIHRoaXMuZm9ybU5vdGlmeVNlcnZpY2Uud2FybmluZyh0aGlzLmxhbmd1YWdlU2VydmljZVsncGxzU2VsZWN0RGVsZXRlRGF0YSddLCB7IGhpZGVUaXRsZTogdHJ1ZSB9KTtcbiAgICAgIHJldHVybiBFTVBUWTtcbiAgICB9XG4gICAgY29uc3QgYWN0aW9uJCA9IHRoaXMubXNnU2VydmljZS5jb25maXJtKHRoaXMubGFuZ3VhZ2VTZXJ2aWNlLmNvbmZpcm1EZWxldGlvbik7XG4gICAgcmV0dXJuIGFjdGlvbiQucGlwZShcbiAgICAgIGNvbmNhdE1hcChyZXN1bHQgPT4ge1xuICAgICAgICBpZiAoIXJlc3VsdCkge1xuICAgICAgICAgIHJldHVybiBFTVBUWTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBwYXRoID0gdGhpcy5nZXRQYXRoKCk7XG4gICAgICAgIGNvbnN0IGxvYWRpbmdUaW1lcklkID0gdGhpcy5sb2FkaW5nU2VydmljZS5zaG93TG9hZGluZ1dpdGhEZWxheSg1MDApO1xuICAgICAgICBjb25zdCByZW1vdmUkID0gdGhpcy5yZXBvc2l0b3J5LmJhdGNoUmVtb3ZlQnlQYXRoKHBhdGgsIGlkcyk7XG4gICAgICAgIHJldHVybiByZW1vdmUkLnBpcGUoXG4gICAgICAgICAgdGFwKCgpID0+IHtcbiAgICAgICAgICAgIHRoaXMubG9hZGluZ1NlcnZpY2UuaGlkZURlbGF5TG9hZGluZyhsb2FkaW5nVGltZXJJZCk7XG4gICAgICAgICAgICBpZiAoc3VjY2Vzc01zZyAmJiBzdWNjZXNzTXNnLnRyaW0oKSkge1xuICAgICAgICAgICAgICB0aGlzLmZvcm1Ob3RpZnlTZXJ2aWNlLnN1Y2Nlc3Moc3VjY2Vzc01zZywgeyBoaWRlVGl0bGU6IHRydWUgfSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICB0aGlzLmZvcm1Ob3RpZnlTZXJ2aWNlLnN1Y2Nlc3ModGhpcy5sYW5ndWFnZVNlcnZpY2UuZGVsZXRlU3VjY2VzcywgeyBoaWRlVGl0bGU6IHRydWUgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyB0aGlzLmZvcm1Ob3RpZnlTZXJ2aWNlLnN1Y2Nlc3ModGhpcy5sYW5ndWFnZVNlcnZpY2UuZGVsZXRlU3VjY2VzcywgeyBoaWRlVGl0bGU6IHRydWUgfSk7XG4gICAgICAgICAgfSxcbiAgICAgICAgICAgIGVycm9yID0+IHtcbiAgICAgICAgICAgICAgdGhpcy5sb2FkaW5nU2VydmljZS5oaWRlRGVsYXlMb2FkaW5nKGxvYWRpbmdUaW1lcklkKTtcbiAgICAgICAgICAgICAgdGhpcy5mb3JtRXJyb3JTZXJ2aWNlLmV4Y2VwdGlvbih0aGlzLmxhbmd1YWdlU2VydmljZS5kZWxldGVGYWlsZWQsIGVycm9yKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICApXG4gICAgICAgICk7XG4gICAgICB9KVxuICAgICk7XG4gIH1cblxuICAvKipcbiAgICog5Yig6ZmkXG4gICAqL1xuICBpbm5lclJlbW92ZShpZDogc3RyaW5nLCBpc0NvbmZpcm06IGJvb2xlYW4sIHN1Y2Nlc3NNc2c6IHN0cmluZyk6IE9ic2VydmFibGU8YW55PiB7XG4gICAgaWYgKHRoaXMubWVzc2FnZVBpcGUpIHtcbiAgICAgIHRoaXMubWVzc2FnZVBpcGUubmV4dCh7IG1lc3NhZ2VUeXBlOiAncmVtb3ZlJyB9KTtcbiAgICB9XG4gICAgaWYgKCFpZCkge1xuICAgICAgdGhpcy5mb3JtTm90aWZ5U2VydmljZS53YXJuaW5nKHRoaXMubGFuZ3VhZ2VTZXJ2aWNlWydwbHNTZWxlY3REZWxldGVEYXRhJ10sIHsgaGlkZVRpdGxlOiB0cnVlIH0pO1xuICAgICAgcmV0dXJuIGVtcHR5KCk7XG4gICAgfVxuXG4gICAgbGV0IGFjdGlvbiQ6IE9ic2VydmFibGU8Ym9vbGVhbj47XG4gICAgaWYgKGlzQ29uZmlybSA9PT0gZmFsc2UpIHtcbiAgICAgIGFjdGlvbiQgPSB0aGlzLm1zZ1NlcnZpY2UucXVlc3Rpb24odGhpcy5sYW5ndWFnZVNlcnZpY2UuY29uZmlybURlbGV0aW9uKTtcbiAgICB9IGVsc2Uge1xuICAgICAgYWN0aW9uJCA9IG9mKHRydWUpO1xuICAgIH1cblxuICAgIHJldHVybiBhY3Rpb24kLnBpcGUoXG4gICAgICBjb25jYXRNYXAocmVzdWx0ID0+IHtcbiAgICAgICAgaWYgKCFyZXN1bHQpIHtcbiAgICAgICAgICByZXR1cm4gZW1wdHkoKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBwYXRoID0gdGhpcy5nZXRQYXRoKCk7XG4gICAgICAgIGNvbnN0IGxvYWRpbmdUaW1lcklkID0gdGhpcy5sb2FkaW5nU2VydmljZS5zaG93TG9hZGluZ1dpdGhEZWxheSg1MDApO1xuICAgICAgICBjb25zdCByZW1vdmUkID0gdGhpcy5yZXBvc2l0b3J5LnJlbW92ZUJ5UGF0aChwYXRoLCBpZCk7XG4gICAgICAgIHJldHVybiByZW1vdmUkLnBpcGUoXG4gICAgICAgICAgdGFwKCgpID0+IHtcbiAgICAgICAgICAgIHRoaXMubG9hZGluZ1NlcnZpY2UuaGlkZURlbGF5TG9hZGluZyhsb2FkaW5nVGltZXJJZCk7XG4gICAgICAgICAgICBpZiAoc3VjY2Vzc01zZyAmJiBzdWNjZXNzTXNnLnRyaW0oKSkge1xuICAgICAgICAgICAgICB0aGlzLmZvcm1Ob3RpZnlTZXJ2aWNlLnN1Y2Nlc3Moc3VjY2Vzc01zZywgeyBoaWRlVGl0bGU6IHRydWUgfSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICB0aGlzLmZvcm1Ob3RpZnlTZXJ2aWNlLnN1Y2Nlc3ModGhpcy5sYW5ndWFnZVNlcnZpY2UuZGVsZXRlU3VjY2VzcywgeyBoaWRlVGl0bGU6IHRydWUgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyB0aGlzLmZvcm1Ob3RpZnlTZXJ2aWNlLnN1Y2Nlc3ModGhpcy5sYW5ndWFnZVNlcnZpY2UuZGVsZXRlU3VjY2VzcywgeyBoaWRlVGl0bGU6IHRydWUgfSk7XG4gICAgICAgICAgfSxcbiAgICAgICAgICAgIGVycm9yID0+IHtcbiAgICAgICAgICAgICAgdGhpcy5sb2FkaW5nU2VydmljZS5oaWRlRGVsYXlMb2FkaW5nKGxvYWRpbmdUaW1lcklkKTtcbiAgICAgICAgICAgICAgdGhpcy5mb3JtRXJyb3JTZXJ2aWNlLmV4Y2VwdGlvbih0aGlzLmxhbmd1YWdlU2VydmljZS5kZWxldGVGYWlsZWQsIGVycm9yKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICApXG4gICAgICAgICk7XG4gICAgICB9KVxuICAgICk7XG4gIH1cblxuICAvKipcbiAgICog5Yig6Zmk5bm25L+d5a2YXG4gICAqIEBwYXJhbSBpZCBpZFxuICAgKiBAcGFyYW0gc3VjY2Vzc01zZyDoh6rlrprkuYnmj5DnpLrkv6Hmga9cbiAgICovXG4gIHJlbW92ZUFuZFNhdmUoaWQ6IHN0cmluZywgc3VjY2Vzc01zZz86IHN0cmluZyk6IE9ic2VydmFibGU8YW55PiB7XG4gICAgaWYgKHRoaXMubWVzc2FnZVBpcGUpIHtcbiAgICAgIHRoaXMubWVzc2FnZVBpcGUubmV4dCh7IG1lc3NhZ2VUeXBlOiAncmVtb3ZlQW5kU2F2ZScgfSk7XG4gICAgfVxuICAgIGlmICghaWQpIHtcbiAgICAgIHRoaXMuZm9ybU5vdGlmeVNlcnZpY2Uud2FybmluZyh0aGlzLmxhbmd1YWdlU2VydmljZS5wbHNTZWxlY3REZWxldGVEYXRhLCB7IGhpZGVUaXRsZTogdHJ1ZSB9KTtcbiAgICAgIHJldHVybiBlbXB0eSgpO1xuICAgIH1cbiAgICBjb25zdCBhY3Rpb24kID0gdGhpcy5tc2dTZXJ2aWNlLmNvbmZpcm0odGhpcy5sYW5ndWFnZVNlcnZpY2UuY29uZmlybURlbGV0aW9uKTtcbiAgICByZXR1cm4gYWN0aW9uJC5waXBlKFxuICAgICAgY29uY2F0TWFwKHJlc3VsdCA9PiB7XG4gICAgICAgIGlmICghcmVzdWx0KSB7XG4gICAgICAgICAgcmV0dXJuIGVtcHR5KCk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyDliKDpmaTlrZDooajmlbDmja5cbiAgICAgICAgY29uc3QgcGF0aCA9IHRoaXMuZ2V0UGF0aCgpO1xuICAgICAgICBjb25zdCBsb2FkaW5nVGltZXJJZCA9IHRoaXMubG9hZGluZ1NlcnZpY2Uuc2hvd0xvYWRpbmdXaXRoRGVsYXkoNTAwKTtcbiAgICAgICAgY29uc3QgcmVtb3ZlJCA9IHRoaXMucmVwb3NpdG9yeS5yZW1vdmVCeVBhdGgocGF0aCwgaWQpO1xuXG4gICAgICAgIHJldHVybiByZW1vdmUkLnBpcGUoXG5cbiAgICAgICAgICAvLyDmiafooYzkuLvooajkv53lrZhcbiAgICAgICAgICBzd2l0Y2hNYXAoKCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgZmlkID0gdGhpcy52aWV3TW9kZWwuYmluZGluZ0RhdGEubGlzdC5jdXJyZW50SWQgYXMgc3RyaW5nO1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMucmVwb3NpdG9yeS5hcHBseUNoYW5nZXNCeUlkKGZpZCk7XG4gICAgICAgICAgfSksXG5cbiAgICAgICAgICAvLyDpmpDol4/liqDovb3kuK1cbiAgICAgICAgICB0YXAoKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5sb2FkaW5nU2VydmljZS5oaWRlRGVsYXlMb2FkaW5nKGxvYWRpbmdUaW1lcklkKTtcbiAgICAgICAgICAgIGlmIChzdWNjZXNzTXNnICYmIHN1Y2Nlc3NNc2cudHJpbSgpKSB7XG4gICAgICAgICAgICAgIHRoaXMuZm9ybU5vdGlmeVNlcnZpY2Uuc3VjY2VzcyhzdWNjZXNzTXNnLCB7IGhpZGVUaXRsZTogdHJ1ZSB9KTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHRoaXMuZm9ybU5vdGlmeVNlcnZpY2Uuc3VjY2Vzcyh0aGlzLmxhbmd1YWdlU2VydmljZS5kZWxldGVTdWNjZXNzLCB7IGhpZGVUaXRsZTogdHJ1ZSB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIHRoaXMuZm9ybU5vdGlmeVNlcnZpY2Uuc3VjY2Vzcyh0aGlzLmxhbmd1YWdlU2VydmljZS5kZWxldGVTdWNjZXNzLCB7IGhpZGVUaXRsZTogdHJ1ZSB9KTtcbiAgICAgICAgICB9LFxuICAgICAgICAgICAgZXJyb3IgPT4ge1xuICAgICAgICAgICAgICB0aGlzLmxvYWRpbmdTZXJ2aWNlLmhpZGVEZWxheUxvYWRpbmcobG9hZGluZ1RpbWVySWQpO1xuICAgICAgICAgICAgICB0aGlzLmZvcm1FcnJvclNlcnZpY2UuZXhjZXB0aW9uKHRoaXMubGFuZ3VhZ2VTZXJ2aWNlLmRlbGV0ZUZhaWxlZCwgZXJyb3IpO1xuICAgICAgICAgICAgfSlcbiAgICAgICAgKTtcbiAgICAgIH0pXG4gICAgKTtcbiAgfVxuICAvKipcbiAgICog5LiK56e75oiW5LiL56e75pWw5o2uXG4gICAqIEBwYXJhbSBkaXJlY3Rpb24g5pa55ZCR77yMdXAgfCBkb3duXG4gICAqIEBwYXJhbSBmaWVsZCDmjpLluo/lrZfmrrVcbiAgICogQHBhcmFtIHRhcmdldHMg6KaB56e75Yqo55qE5pWw5o2uXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKiDkvb/nlKjor6Xmlrnms5Xml7bmjpLluo/lrZfmrrXlv4XpobvmnInlgLzvvIzlkKbliJnml6Dms5XmjpLluo9cbiAgICovXG4gIHB1YmxpYyBtb3ZlKGRpcmVjdGlvbjogc3RyaW5nIHwgJ3VwJyB8ICdkb3duJywgZmllbGQ6IHN0cmluZywgdGFyZ2V0czogQXJyYXk8YW55PiB8IHN0cmluZykge1xuICAgIGlmICghdGFyZ2V0cykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIHRhcmdldHMgPT09ICdzdHJpbmcnKSB7XG4gICAgICB0YXJnZXRzID0gdGFyZ2V0cy5zcGxpdCgnLCcpLmZpbHRlcihwID0+IHApO1xuICAgIH1cbiAgICBjb25zdCBiaW5kaW5nUGF0aCA9IHRoaXMudmlld01vZGVsICYmIHRoaXMudmlld01vZGVsLmJpbmRpbmdQYXRoIHx8IG51bGw7XG4gICAgaWYgKCFiaW5kaW5nUGF0aCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zdCBiaW5kaW5nTGlzdCA9IHRoaXMudmlld01vZGVsLmJpbmRpbmdEYXRhLmdldExpc3QoKSBhcyBCaW5kaW5nTGlzdDtcbiAgICBpZiAoIWJpbmRpbmdMaXN0IHx8IGJpbmRpbmdMaXN0Lmxlbmd0aCA8IDEpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdGFyZ2V0cy5mb3JFYWNoKCh0YXJnZXQpID0+IHtcbiAgICAgIGNvbnN0IGluZGV4ID0gYmluZGluZ0xpc3QuZ2V0SW5kZXhCeUlkKHRhcmdldCk7XG4gICAgICBpZiAoaW5kZXggPT09IC0xKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGNvbnN0IGl0ZW0gPSBiaW5kaW5nTGlzdC5maW5kQnlJZCh0YXJnZXQpO1xuICAgICAgY29uc3QgcG9zaXRpb24gPSBpdGVtLmdldFZhbHVlKGZpZWxkKTtcbiAgICAgIGNvbnN0IGJhc2UgPSBkaXJlY3Rpb24gPT09ICd1cCcgID8gLTEgOiAxO1xuICAgICAgLy8g5b6F5Lqk5o2i55qE6KGM5L+h5oGvXG4gICAgICBjb25zdCBleGNoYW5nZVJvd0luZGV4ID0gaW5kZXggKyBiYXNlO1xuICAgICAgaWYgKGV4Y2hhbmdlUm93SW5kZXggPCAwIHx8IGV4Y2hhbmdlUm93SW5kZXggPiBiaW5kaW5nTGlzdC5sZW5ndGgpIHtcbiAgICAgICAgLy8g56ys5LiA6KGM5peg5rOV5LiK56e777yM5pyA5ZCO5LiA6KGM5peg5rOV5LiL56e7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGNvbnN0IGV4Y2hhbmdlUm93SWQgPSBiaW5kaW5nTGlzdC5nZXRJZEJ5SW5kZXgoZXhjaGFuZ2VSb3dJbmRleCk7XG4gICAgICBjb25zdCBleGNoYW5nZVJvdyA9IGJpbmRpbmdMaXN0LmZpbmRCeUlkKGV4Y2hhbmdlUm93SWQpO1xuICAgICAgY29uc3QgZXhjaGFuZ2VSb3dQb3NpdGlvbiA9IGV4Y2hhbmdlUm93W2ZpZWxkXTtcbiAgICAgIC8vIOenu+WKqOihjOWSjOS6pOaNouihjOmDveayoeacieaOkuW6j1xuICAgICAgaWYgKHRoaXMuaXNOdWxsT3JFbXB0eShwb3NpdGlvbikgJiYgdGhpcy5pc051bGxPckVtcHR5KGV4Y2hhbmdlUm93UG9zaXRpb24pKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGJpbmRpbmdMaXN0LnN3YXBCeUlkKHRhcmdldCwgZXhjaGFuZ2VSb3dJZCk7XG4gICAgICBleGNoYW5nZVJvdy5zZXRWYWx1ZShmaWVsZCwgcG9zaXRpb24sdHJ1ZSx0cnVlKTtcbiAgICAgIGl0ZW0uc2V0VmFsdWUoZmllbGQsIGV4Y2hhbmdlUm93UG9zaXRpb24sdHJ1ZSx0cnVlKTtcbiAgICB9KTtcblxuICB9XG4gIHByaXZhdGUgaXNOdWxsT3JFbXB0eSh2YWx1ZTogYW55KSB7XG4gICAgcmV0dXJuIHZhbHVlID09PSAnJyB8fCB2YWx1ZSA9PT0gbnVsbCB8fCB2YWx1ZSA9PT0gdW5kZWZpbmVkO1xuICB9XG4gIC8qKlxuICAgKiDojrflj5blrozmlbTot6/lvoRcbiAgICogQHRvZG/vvJrlvLror4bliKvliLDku47ooajov5nkuIDnuqdcbiAgICogZml4ZWQgYnkganVzdGluOiDmoLnmja5iaW5kaW5nUGF0aO+8jOWmguaenOaYr+S7juS7juihqO+8jOmcgOimgeiOt+WPluS4u+ihqOaVsOaNrmlk5ZKM5LuO6KGo5pWw5o2uaWRcbiAgICovXG4gIHByaXZhdGUgZ2V0UGF0aCgpOiBzdHJpbmcge1xuICAgIGNvbnN0IGJpbmRpbmdQYXRoID0gdGhpcy52aWV3TW9kZWwuYmluZGluZ1BhdGg7XG4gICAgY29uc3QgcmlkID0gdGhpcy52aWV3TW9kZWwuYmluZGluZ0RhdGEubGlzdC5jdXJyZW50SWQ7IC8vIHJvb3TooajmlbDmja5pZFxuICAgIGxldCBwYXRoID0gJy8nICsgcmlkO1xuXG4gICAgY29uc3Qgc3ViUGF0aHMgPSBiaW5kaW5nUGF0aC5zcGxpdCgnLycpO1xuICAgIGlmIChzdWJQYXRocy5sZW5ndGggPiAwKSB7XG4gICAgICAvLyBlZzpiaW5kaW5nUGF0aOW9ouWmgi9lZHVzL2dyYWRlcyxzcGxpdOWQjuaYr1snJywgJ2VkdXMnLCAnZ3JhZGVzJ11cbiAgICAgIC8vIOWboOatpGluZGV45LuOMeW8gOWni1xuICAgICAgZm9yIChsZXQgaW5kZXggPSAxOyBpbmRleCA8IHN1YlBhdGhzLmxlbmd0aCAtIDE7IGluZGV4KyspIHtcbiAgICAgICAgY29uc3Qgc3ViUGF0aCA9IHN1YlBhdGhzW2luZGV4XTtcbiAgICAgICAgY29uc3Qgc3ViRGF0YSA9IHRoaXMudmlld01vZGVsLmJpbmRpbmdEYXRhW3N1YlBhdGhdO1xuICAgICAgICBpZiAoIXN1YkRhdGEgfHwgIXN1YkRhdGEuY3VycmVudElkKSB7XG4gICAgICAgICAgdGhpcy5mb3JtTm90aWZ5U2VydmljZS53YXJuaW5nKHRoaXMubGFuZ3VhZ2VTZXJ2aWNlWydwbHNTZWxlY3REZXRhaWxGb3JtRGF0YSddLCB7IGhpZGVUaXRsZTogdHJ1ZSB9KTtcbiAgICAgICAgICB0aHJvdyBFcnJvcihg6I635Y+W5a2Q6KGo5a6M5pW06Lev5b6E5Ye66ZSZ77yM5om+5LiN5YiwJHtzdWJEYXRhfeWvueW6lOeahOWtkOihqO+8jOaIluWvueW6lOWtkOihqOayoeacieW9k+WJjeihjOOAgmApO1xuICAgICAgICB9XG4gICAgICAgIHBhdGggKz0gYC8ke3N1YlBhdGh9LyR7c3ViRGF0YS5jdXJyZW50SWR9YDtcbiAgICAgIH1cbiAgICB9XG4gICAgcGF0aCArPSAnLycgKyBzdWJQYXRoc1tzdWJQYXRocy5sZW5ndGggLSAxXTtcblxuICAgIHJldHVybiBwYXRoO1xuICB9XG4gIC8qKlxuICAgKiDojrflj5bmoLnnu4Tku7ZhcHBDb250ZXh0XG4gICAqL1xuICBwcml2YXRlIGdldCBtZXNzYWdlUGlwZSgpIHtcbiAgICBpZiAodGhpcy52aWV3TW9kZWwgJiYgdGhpcy52aWV3TW9kZWwuZnJhbWVDb250ZXh0KSB7XG4gICAgICBjb25zdCBhcHBDb250ZXh0ID0gdGhpcy52aWV3TW9kZWwuZnJhbWVDb250ZXh0LmdldEZvcm1BcHBDb250ZXh0KCkgfHwgbnVsbDtcbiAgICAgIGlmIChhcHBDb250ZXh0KSB7XG4gICAgICAgIHJldHVybiBhcHBDb250ZXh0Lm1lc3NhZ2VQaXBlIHx8IG51bGw7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBudWxsO1xuICB9XG59XG5leHBvcnQgeyBTdWJMaXN0RGF0YVNlcnZpY2UgfTtcbiJdfQ==