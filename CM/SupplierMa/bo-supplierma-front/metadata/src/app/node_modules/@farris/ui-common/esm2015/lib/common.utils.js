/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { ColumnFormatService } from '@farris/ui-common/column';
import * as i0 from "@angular/core";
export class CommonUtils {
    constructor() {
        this.cfs = null;
        if (!this.cfs) {
            this.cfs = new ColumnFormatService(null, null);
        }
    }
    /**
     * 获取对象中指定字段的值。 field: 可以为带有层级结构的路径，如： user.firstName | name 等
     * data: 获取字段的数据源，一般为JSON对象
     * safe: 为true, 将html字符进行转码输出，默认为 false
     * @param {?} field
     * @param {?} data
     * @param {?=} safe
     * @return {?}
     */
    getValue(field, data, safe = false) {
        if (!data) {
            return '';
        }
        /** @type {?} */
        let resultVal = '';
        if (field.indexOf('.') === -1 && data.hasOwnProperty(field)) {
            resultVal = data[field];
        }
        else {
            resultVal = field.split('.').reduce((/**
             * @param {?} obj
             * @param {?} key
             * @return {?}
             */
            (obj, key) => {
                if (obj) {
                    return obj[key];
                }
                else {
                    return null;
                }
            }), data);
        }
        if (safe) {
            return this.formatterValue(resultVal);
        }
        else {
            return resultVal;
        }
    }
    /**
     * 更新指定对象中某个字段的值
     * @param {?} obj 被更新对象
     * @param {?} field 被更新字段
     * @param {?} val 新值
     * @param {?=} nest 是否为嵌套，默认为 true
     * @return {?}
     */
    setValue(obj, field, val, nest = true) {
        if (field) {
            if (field.indexOf('.') > -1 && nest) {
                /** @type {?} */
                let lastObj = null;
                /** @type {?} */
                const _fields = field.split('.');
                _fields.reduce((/**
                 * @param {?} c
                 * @param {?} p
                 * @return {?}
                 */
                (c, p) => {
                    lastObj = c;
                    return c[p];
                }), obj);
                if (lastObj) {
                    lastObj[_fields.pop()] = val;
                }
            }
            else {
                obj[field] = val;
            }
        }
    }
    /**
     * @param {?} value
     * @param {?} enumData
     * @param {?} valueField
     * @return {?}
     */
    getEnumItem(value, enumData, valueField) {
        /** @type {?} */
        const item = enumData.find((/**
         * @param {?} n
         * @return {?}
         */
        n => n[valueField] == value));
        return item;
    }
    /**
     * @private
     * @param {?} value
     * @param {?} col
     * @return {?}
     */
    _getEnumTitleFromColumn(value, col) {
        /** @type {?} */
        const _col = (/** @type {?} */ (col));
        /** @type {?} */
        const formatter = (/** @type {?} */ (_col.formatter));
        if (formatter && typeof formatter === 'object') {
            if (formatter.type === 'enum' && formatter.options) {
                return this.getEnumTitleFromColumnOptions(value, formatter.options);
            }
        }
        return value;
    }
    /**
     * @param {?} col
     * @param {?} data
     * @return {?}
     */
    getEnumTitle(col, data) {
        /** @type {?} */
        const val = this.getValue(col.field, data);
        return this._getEnumTitleFromColumn(val, col);
    }
    /**
     * @param {?} value
     * @param {?} opts
     * @return {?}
     */
    getEnumTitleFromColumnOptions(value, opts) {
        const { data, valueField, textField } = opts;
        /** @type {?} */
        const item = this.getEnumItem(value, data, valueField);
        if (item) {
            return item[textField];
        }
        else {
            return value;
        }
    }
    /**
     * @param {?} str
     * @return {?}
     */
    escapeHtml(str) {
        if (str === null || str === undefined) {
            return '';
        }
        return str
            .replace(/&/g, '&amp;')
            .replace(/</g, '&lt;')
            .replace(/>/g, '&gt;')
            .replace(/\"/g, '&quot;')
            .replace(/\'/g, '&#39;')
            .replace(/\//g, '&#x2F;');
    }
    /**
     * @param {?} str
     * @return {?}
     */
    unescapeHtml(str) {
        if (str === null || str === undefined) {
            return '';
        }
        return str
            .replace(/&amp;/g, '&')
            .replace(/&lt;/g, '<')
            .replace(/&gt;/g, '>')
            .replace(/&quot;/g, '"')
            .replace(/&#39;/g, '\'')
            .replace(/&#x2F;/g, '/');
    }
    /**
     * @private
     * @param {?} val
     * @return {?}
     */
    formatterValue(val) {
        if (val === null || val === undefined || val === '') {
            return '';
        }
        if (typeof val === 'string') {
            return this.escapeHtml(val);
        }
        return val;
    }
    /**
     * 获取字符串在页面中的真实宽度
     * @param {?} txt
     * @param {?} font
     * @return {?}
     */
    getTextWidth(txt, font) {
        // const frag = document.createDocumentFragment();
        /** @type {?} */
        const canvas = document.createElement('canvas');
        /** @type {?} */
        const context = canvas.getContext('2d');
        context.font = font;
        /** @type {?} */
        const metrics = context.measureText(txt);
        return Math.round(metrics.width);
    }
    /**
     * @param {?} id
     * @return {?}
     */
    removeStyleSheet(id) {
        /** @type {?} */
        const styleElement = document.querySelector('#' + id);
        if (styleElement) {
            styleElement.remove();
        }
    }
    /**
     * @param {?} styleSheetId
     * @return {?}
     */
    createStyleSheet(styleSheetId) {
        /** @type {?} */
        const htmlHead = document.querySelector('head');
        /** @type {?} */
        const styleEleId = styleSheetId;
        /** @type {?} */
        let styleElement = null;
        if (document.querySelector('#' + styleEleId)) {
            styleElement = document.querySelector('#' + styleEleId);
            styleElement.innerText = '';
        }
        else {
            styleElement = document.createElement('style');
            styleElement.id = styleEleId;
            htmlHead.appendChild(styleElement);
        }
        return styleElement;
    }
    /**
     * @param {?} styleSheetId
     * @return {?}
     */
    getStyleSheet(styleSheetId) {
        /** @type {?} */
        const styleSheets = (/** @type {?} */ (document.styleSheets));
        /** @type {?} */
        let styleSheet = null;
        for (const stylesheet of styleSheets) {
            if ((stylesheet.ownerNode || stylesheet['owningElement']).id === styleSheetId) {
                styleSheet = stylesheet;
                break;
            }
        }
        return styleSheet;
    }
    /**
     * @param {?} rules
     * @param {?} styleSheet
     * @return {?}
     */
    appendCssRules(rules, styleSheet) {
        for (const rule of rules) {
            /** @type {?} */
            const ruleName = rule.slice(0, rule.indexOf('{'));
            /** @type {?} */
            const removedCssRule = this.removeCssRule(ruleName, styleSheet);
            if (styleSheet.addRule) {
                /** @type {?} */
                let cssText = '';
                if (removedCssRule) {
                    cssText += removedCssRule.cssText.slice(removedCssRule.cssText.indexOf('{') + 1, removedCssRule.cssText.indexOf('}'));
                }
                cssText += rule.slice(rule.indexOf('{') + 1, rule.indexOf('}')).replace(/"/g, '').replace(/,/g, ';') + ';';
                styleSheet.addRule(ruleName, cssText, 0);
            }
            else {
                styleSheet.insertRule(rule, 0);
            }
        }
    }
    /**
     * @param {?} ruleName
     * @param {?} styleSheet
     * @return {?}
     */
    getCssRule(ruleName, styleSheet) {
        /** @type {?} */
        const cssRules = (/** @type {?} */ ((styleSheet.cssRules || styleSheet.rules)));
        /** @type {?} */
        let r = null;
        for (const rule of cssRules) {
            if (rule.selectorText == ruleName) {
                r = rule;
            }
        }
        return r;
    }
    /**
     * @param {?} ruleName
     * @param {?} styleSheet
     * @return {?}
     */
    removeCssRule(ruleName, styleSheet) {
        /** @type {?} */
        const cssRules = (/** @type {?} */ ((styleSheet.cssRules || styleSheet.rules)));
        /** @type {?} */
        let ii = 0;
        /** @type {?} */
        let cssRule = false;
        do {
            cssRule = cssRules[ii];
            if (cssRule) {
                if (cssRule.selectorText.toLowerCase() == ruleName.toLowerCase()) {
                    if (styleSheet.cssRules) {
                        styleSheet.deleteRule(ii);
                    }
                    else {
                        styleSheet.removeRule(ii);
                    }
                    return cssRule;
                }
            }
            ii++;
        } while (cssRule);
    }
    /**
     * @param {?} val
     * @return {?}
     */
    isNullOrUndefined(val) {
        return val === null || val === undefined;
    }
    /**
     * @return {?}
     */
    isIE() {
        /** @type {?} */
        const uA = window.navigator.userAgent;
        return /msie\s|trident\/|edge\//i.test(uA) && !!('uniqueID' in document || 'documentMode' in document || ('ActiveXObject' in window) || 'MSInputMethodContext' in window);
    }
    /**
     * @param {?} sorts
     * @return {?}
     */
    buildSortString(sorts) {
        return this.cfs.buildSortString(sorts);
    }
    /**
     * @param {?} conditions
     * @return {?}
     */
    buildSqlWhere(conditions) {
        return this.cfs.buildSqlWhere(conditions);
    }
    /**
     * @return {?}
     */
    getBrowserType() {
        /** @type {?} */
        const ua = navigator.userAgent.toLowerCase();
        // 获取用户端信息
        /** @type {?} */
        const info = {
            ie: /msie/.test(ua) && !/opera/.test(ua),
            //  匹配IE浏览器
            op: /opera/.test(ua),
            //  匹配Opera浏览器
            sa: /version.*safari/.test(ua),
            // 匹配Safari浏览器
            ch: /chrome/.test(ua),
            //  匹配Chrome浏览器
            ff: /gecko/.test(ua) && !/webkit/.test(ua) // 匹配Firefox浏览器
        };
        return info;
    }
    /**
     * @return {?}
     */
    getFFVer() {
        /** @type {?} */
        const ua = navigator.userAgent;
        /** @type {?} */
        const b = ua.indexOf('Firefox/');
        if (b < 0) {
            return 0;
        }
        return parseFloat(ua.substring(b + 8, ua.lastIndexOf('\.')));
    }
}
CommonUtils.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */
CommonUtils.ctorParameters = () => [];
/** @nocollapse */ CommonUtils.ngInjectableDef = i0.defineInjectable({ factory: function CommonUtils_Factory() { return new CommonUtils(); }, token: CommonUtils, providedIn: "root" });
if (false) {
    /**
     * @type {?}
     * @private
     */
    CommonUtils.prototype.cfs;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tbW9uLnV0aWxzLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGZhcnJpcy91aS1jb21tb24vIiwic291cmNlcyI6WyJsaWIvY29tbW9uLnV0aWxzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFZLE1BQU0sZUFBZSxDQUFDO0FBQ3JELE9BQU8sRUFBa0QsbUJBQW1CLEVBQUUsTUFBTSwwQkFBMEIsQ0FBQzs7QUFLL0csTUFBTSxPQUFPLFdBQVc7SUFFcEI7UUFEUSxRQUFHLEdBQXdCLElBQUksQ0FBQztRQUVwQyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsRUFBRTtZQUNYLElBQUksQ0FBQyxHQUFHLEdBQUcsSUFBSSxtQkFBbUIsQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLENBQUM7U0FDbEQ7SUFDTCxDQUFDOzs7Ozs7Ozs7O0lBT0QsUUFBUSxDQUFDLEtBQWEsRUFBRSxJQUFTLEVBQUUsSUFBSSxHQUFHLEtBQUs7UUFDM0MsSUFBSSxDQUFDLElBQUksRUFBRTtZQUNQLE9BQVEsRUFBRSxDQUFDO1NBQ2Q7O1lBQ0csU0FBUyxHQUFHLEVBQUU7UUFDbEIsSUFBSSxLQUFLLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQyxJQUFJLElBQUksQ0FBQyxjQUFjLENBQUMsS0FBSyxDQUFDLEVBQUU7WUFDekQsU0FBUyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztTQUMzQjthQUFNO1lBQ0gsU0FBUyxHQUFHLEtBQUssQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsTUFBTTs7Ozs7WUFBQyxDQUFDLEdBQUcsRUFBRSxHQUFHLEVBQUUsRUFBRTtnQkFDN0MsSUFBSSxHQUFHLEVBQUU7b0JBQ0wsT0FBTyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUM7aUJBQ25CO3FCQUFNO29CQUNILE9BQU8sSUFBSSxDQUFDO2lCQUNmO1lBQ0wsQ0FBQyxHQUFFLElBQUksQ0FBQyxDQUFDO1NBQ1o7UUFFRCxJQUFJLElBQUksRUFBRTtZQUNOLE9BQU8sSUFBSSxDQUFDLGNBQWMsQ0FBQyxTQUFTLENBQUMsQ0FBQztTQUN6QzthQUFNO1lBQ0gsT0FBTyxTQUFTLENBQUM7U0FDcEI7SUFDTCxDQUFDOzs7Ozs7Ozs7SUFTRCxRQUFRLENBQUMsR0FBMkIsRUFBRSxLQUFhLEVBQUUsR0FBUSxFQUFFLElBQUksR0FBRyxJQUFJO1FBQ3RFLElBQUksS0FBSyxFQUFFO1lBQ1AsSUFBSSxLQUFLLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLElBQUksRUFBRTs7b0JBQzdCLE9BQU8sR0FBRyxJQUFJOztzQkFDWixPQUFPLEdBQUcsS0FBSyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUM7Z0JBQ2hDLE9BQU8sQ0FBQyxNQUFNOzs7OztnQkFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRTtvQkFDckIsT0FBTyxHQUFHLENBQUMsQ0FBQztvQkFDWixPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztnQkFDaEIsQ0FBQyxHQUFFLEdBQUcsQ0FBQyxDQUFDO2dCQUVSLElBQUksT0FBTyxFQUFFO29CQUNULE9BQU8sQ0FBQyxPQUFPLENBQUMsR0FBRyxFQUFFLENBQUMsR0FBRyxHQUFHLENBQUM7aUJBQ2hDO2FBQ0o7aUJBQU07Z0JBQ0gsR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLEdBQUcsQ0FBQzthQUNwQjtTQUNKO0lBQ0wsQ0FBQzs7Ozs7OztJQUVELFdBQVcsQ0FBQyxLQUFVLEVBQUUsUUFBZSxFQUFFLFVBQVU7O2NBQ3pDLElBQUksR0FBRyxRQUFRLENBQUMsSUFBSTs7OztRQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxJQUFJLEtBQUssRUFBQztRQUN2RCxPQUFPLElBQUksQ0FBQztJQUNoQixDQUFDOzs7Ozs7O0lBRU8sdUJBQXVCLENBQUMsS0FBVSxFQUFFLEdBQVE7O2NBQzFDLElBQUksR0FBRyxtQkFBQSxHQUFHLEVBQWM7O2NBQ3hCLFNBQVMsR0FBRyxtQkFBQSxJQUFJLENBQUMsU0FBUyxFQUFtQjtRQUNuRCxJQUFJLFNBQVMsSUFBSSxPQUFPLFNBQVMsS0FBSyxRQUFRLEVBQUU7WUFDNUMsSUFBSSxTQUFTLENBQUMsSUFBSSxLQUFLLE1BQU0sSUFBSSxTQUFTLENBQUMsT0FBTyxFQUFFO2dCQUNoRCxPQUFPLElBQUksQ0FBQyw2QkFBNkIsQ0FBQyxLQUFLLEVBQUUsU0FBUyxDQUFDLE9BQU8sQ0FBQyxDQUFDO2FBQ3ZFO1NBQ0o7UUFDRCxPQUFPLEtBQUssQ0FBQztJQUNqQixDQUFDOzs7Ozs7SUFFRCxZQUFZLENBQUMsR0FBZSxFQUFFLElBQVM7O2NBQzdCLEdBQUcsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxLQUFLLEVBQUUsSUFBSSxDQUFDO1FBQzFDLE9BQU8sSUFBSSxDQUFDLHVCQUF1QixDQUFDLEdBQUcsRUFBRSxHQUFHLENBQUMsQ0FBQztJQUNsRCxDQUFDOzs7Ozs7SUFFRCw2QkFBNkIsQ0FBQyxLQUFVLEVBQUUsSUFBUztjQUN6QyxFQUFFLElBQUksRUFBRSxVQUFVLEVBQUUsU0FBUyxFQUFFLEdBQUcsSUFBSTs7Y0FDdEMsSUFBSSxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUMsS0FBSyxFQUFFLElBQUksRUFBRSxVQUFVLENBQUM7UUFDdEQsSUFBSSxJQUFJLEVBQUU7WUFDTixPQUFPLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQztTQUMxQjthQUFNO1lBQ0gsT0FBTyxLQUFLLENBQUM7U0FDaEI7SUFDTCxDQUFDOzs7OztJQUVELFVBQVUsQ0FBQyxHQUFHO1FBQ1YsSUFBSSxHQUFHLEtBQUssSUFBSSxJQUFJLEdBQUcsS0FBSyxTQUFTLEVBQUU7WUFDbkMsT0FBUSxFQUFFLENBQUM7U0FDZDtRQUNELE9BQU8sR0FBRzthQUNULE9BQU8sQ0FBQyxJQUFJLEVBQUUsT0FBTyxDQUFDO2FBQ3RCLE9BQU8sQ0FBQyxJQUFJLEVBQUUsTUFBTSxDQUFDO2FBQ3JCLE9BQU8sQ0FBQyxJQUFJLEVBQUUsTUFBTSxDQUFDO2FBQ3JCLE9BQU8sQ0FBQyxLQUFLLEVBQUUsUUFBUSxDQUFDO2FBQ3hCLE9BQU8sQ0FBQyxLQUFLLEVBQUUsT0FBTyxDQUFDO2FBQ3ZCLE9BQU8sQ0FBQyxLQUFLLEVBQUUsUUFBUSxDQUFDLENBQUM7SUFDOUIsQ0FBQzs7Ozs7SUFFRCxZQUFZLENBQUMsR0FBRztRQUNaLElBQUksR0FBRyxLQUFLLElBQUksSUFBSSxHQUFHLEtBQUssU0FBUyxFQUFFO1lBQ25DLE9BQVEsRUFBRSxDQUFDO1NBQ2Q7UUFDRCxPQUFPLEdBQUc7YUFDVCxPQUFPLENBQUMsUUFBUSxFQUFFLEdBQUcsQ0FBQzthQUN0QixPQUFPLENBQUMsT0FBTyxFQUFFLEdBQUcsQ0FBQzthQUNyQixPQUFPLENBQUMsT0FBTyxFQUFFLEdBQUcsQ0FBQzthQUNyQixPQUFPLENBQUMsU0FBUyxFQUFFLEdBQUcsQ0FBQzthQUN2QixPQUFPLENBQUMsUUFBUSxFQUFFLElBQUksQ0FBQzthQUN2QixPQUFPLENBQUMsU0FBUyxFQUFFLEdBQUcsQ0FBQyxDQUFDO0lBQzdCLENBQUM7Ozs7OztJQUdPLGNBQWMsQ0FBQyxHQUFRO1FBQzNCLElBQUksR0FBRyxLQUFLLElBQUksSUFBSSxHQUFHLEtBQUssU0FBUyxJQUFJLEdBQUcsS0FBSyxFQUFFLEVBQUU7WUFDakQsT0FBTyxFQUFFLENBQUM7U0FDYjtRQUVELElBQUksT0FBTyxHQUFHLEtBQUssUUFBUSxFQUFFO1lBQ3pCLE9BQU8sSUFBSSxDQUFDLFVBQVUsQ0FBQyxHQUFHLENBQUMsQ0FBQztTQUMvQjtRQUVELE9BQU8sR0FBRyxDQUFDO0lBQ2YsQ0FBQzs7Ozs7OztJQUdELFlBQVksQ0FBQyxHQUFXLEVBQUUsSUFBSTs7O2NBRXBCLE1BQU0sR0FBRyxRQUFRLENBQUMsYUFBYSxDQUFDLFFBQVEsQ0FBQzs7Y0FDekMsT0FBTyxHQUFHLE1BQU0sQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDO1FBQ3ZDLE9BQU8sQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDOztjQUNkLE9BQU8sR0FBRyxPQUFPLENBQUMsV0FBVyxDQUFDLEdBQUcsQ0FBQztRQUN4QyxPQUFPLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ3JDLENBQUM7Ozs7O0lBRUQsZ0JBQWdCLENBQUMsRUFBVTs7Y0FDakIsWUFBWSxHQUFHLFFBQVEsQ0FBQyxhQUFhLENBQUMsR0FBRyxHQUFHLEVBQUUsQ0FBQztRQUNyRCxJQUFJLFlBQVksRUFBRTtZQUNkLFlBQVksQ0FBQyxNQUFNLEVBQUUsQ0FBQztTQUN6QjtJQUNMLENBQUM7Ozs7O0lBRUQsZ0JBQWdCLENBQUMsWUFBb0I7O2NBQzNCLFFBQVEsR0FBRyxRQUFRLENBQUMsYUFBYSxDQUFDLE1BQU0sQ0FBQzs7Y0FFekMsVUFBVSxHQUFHLFlBQVk7O1lBQzNCLFlBQVksR0FBRyxJQUFJO1FBQ3ZCLElBQUksUUFBUSxDQUFDLGFBQWEsQ0FBQyxHQUFHLEdBQUcsVUFBVSxDQUFDLEVBQUU7WUFDMUMsWUFBWSxHQUFHLFFBQVEsQ0FBQyxhQUFhLENBQUMsR0FBRyxHQUFHLFVBQVUsQ0FBQyxDQUFDO1lBQ3hELFlBQVksQ0FBQyxTQUFTLEdBQUcsRUFBRSxDQUFDO1NBQy9CO2FBQU07WUFDSCxZQUFZLEdBQUcsUUFBUSxDQUFDLGFBQWEsQ0FBQyxPQUFPLENBQUMsQ0FBQztZQUMvQyxZQUFZLENBQUMsRUFBRSxHQUFHLFVBQVUsQ0FBQztZQUM3QixRQUFRLENBQUMsV0FBVyxDQUFDLFlBQVksQ0FBQyxDQUFDO1NBQ3RDO1FBRUQsT0FBTyxZQUFZLENBQUM7SUFDeEIsQ0FBQzs7Ozs7SUFFRCxhQUFhLENBQUMsWUFBWTs7Y0FDaEIsV0FBVyxHQUFHLG1CQUFBLFFBQVEsQ0FBQyxXQUFXLEVBQU87O1lBQzNDLFVBQVUsR0FBRyxJQUFJO1FBQ3JCLEtBQUssTUFBTSxVQUFVLElBQUksV0FBVyxFQUFFO1lBQ2xDLElBQUksQ0FBQyxVQUFVLENBQUMsU0FBUyxJQUFJLFVBQVUsQ0FBQyxlQUFlLENBQUMsQ0FBQyxDQUFDLEVBQUUsS0FBSyxZQUFZLEVBQUU7Z0JBQzNFLFVBQVUsR0FBRyxVQUFVLENBQUM7Z0JBQ3hCLE1BQU07YUFDVDtTQUNKO1FBRUQsT0FBTyxVQUFVLENBQUM7SUFDdEIsQ0FBQzs7Ozs7O0lBRUQsY0FBYyxDQUFDLEtBQWUsRUFBRSxVQUFVO1FBQ3RDLEtBQUssTUFBTSxJQUFJLElBQUksS0FBSyxFQUFFOztrQkFDaEIsUUFBUSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUM7O2tCQUMzQyxjQUFjLEdBQUcsSUFBSSxDQUFDLGFBQWEsQ0FBQyxRQUFRLEVBQUUsVUFBVSxDQUFDO1lBQy9ELElBQUksVUFBVSxDQUFDLE9BQU8sRUFBRTs7b0JBQ2hCLE9BQU8sR0FBRyxFQUFFO2dCQUNoQixJQUFJLGNBQWMsRUFBRTtvQkFDaEIsT0FBTyxJQUFJLGNBQWMsQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLGNBQWMsQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsRUFBRSxjQUFjLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO2lCQUN6SDtnQkFDRCxPQUFPLElBQUksSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsRUFBRSxJQUFJLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLElBQUksRUFBRSxFQUFFLENBQUMsQ0FBQyxPQUFPLENBQUMsSUFBSSxFQUFFLEdBQUcsQ0FBQyxHQUFHLEdBQUcsQ0FBQztnQkFDM0csVUFBVSxDQUFDLE9BQU8sQ0FBQyxRQUFRLEVBQUUsT0FBTyxFQUFFLENBQUMsQ0FBQyxDQUFDO2FBQzVDO2lCQUFNO2dCQUNILFVBQVUsQ0FBQyxVQUFVLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQyxDQUFDO2FBQ2xDO1NBQ0o7SUFDTCxDQUFDOzs7Ozs7SUFFRCxVQUFVLENBQUMsUUFBZ0IsRUFBRSxVQUFVOztjQUM3QixRQUFRLEdBQUcsbUJBQUEsQ0FBQyxVQUFVLENBQUMsUUFBUSxJQUFJLFVBQVUsQ0FBQyxLQUFLLENBQUMsRUFBTzs7WUFDN0QsQ0FBQyxHQUFHLElBQUk7UUFDWixLQUFLLE1BQU0sSUFBSSxJQUFJLFFBQVEsRUFBRTtZQUN6QixJQUFJLElBQUksQ0FBQyxZQUFZLElBQUksUUFBUSxFQUFFO2dCQUMvQixDQUFDLEdBQUcsSUFBSSxDQUFDO2FBQ1o7U0FDSjtRQUVELE9BQU8sQ0FBQyxDQUFDO0lBQ2IsQ0FBQzs7Ozs7O0lBRUQsYUFBYSxDQUFDLFFBQWdCLEVBQUUsVUFBVTs7Y0FDaEMsUUFBUSxHQUFHLG1CQUFBLENBQUMsVUFBVSxDQUFDLFFBQVEsSUFBSSxVQUFVLENBQUMsS0FBSyxDQUFDLEVBQU87O1lBQzdELEVBQUUsR0FBRyxDQUFDOztZQUNOLE9BQU8sR0FBUSxLQUFLO1FBQ3hCLEdBQUc7WUFDQyxPQUFPLEdBQUcsUUFBUSxDQUFDLEVBQUUsQ0FBQyxDQUFDO1lBQ3ZCLElBQUksT0FBTyxFQUFFO2dCQUNULElBQUksT0FBTyxDQUFDLFlBQVksQ0FBQyxXQUFXLEVBQUUsSUFBSSxRQUFRLENBQUMsV0FBVyxFQUFFLEVBQUU7b0JBQzlELElBQUksVUFBVSxDQUFDLFFBQVEsRUFBRTt3QkFDckIsVUFBVSxDQUFDLFVBQVUsQ0FBQyxFQUFFLENBQUMsQ0FBQztxQkFDN0I7eUJBQU07d0JBQ0gsVUFBVSxDQUFDLFVBQVUsQ0FBQyxFQUFFLENBQUMsQ0FBQztxQkFDN0I7b0JBRUQsT0FBTyxPQUFPLENBQUM7aUJBQ2xCO2FBQ0o7WUFDRCxFQUFFLEVBQUUsQ0FBQztTQUNSLFFBQVEsT0FBTyxFQUFFO0lBQ3RCLENBQUM7Ozs7O0lBRUQsaUJBQWlCLENBQUMsR0FBUTtRQUN0QixPQUFPLEdBQUcsS0FBSyxJQUFJLElBQUksR0FBRyxLQUFLLFNBQVMsQ0FBQztJQUM3QyxDQUFDOzs7O0lBRUQsSUFBSTs7Y0FDTSxFQUFFLEdBQUcsTUFBTSxDQUFDLFNBQVMsQ0FBQyxTQUFTO1FBQ3JDLE9BQU8sMEJBQTBCLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLFVBQVUsSUFBSSxRQUFRLElBQUksY0FBYyxJQUFJLFFBQVEsSUFBSSxDQUFDLGVBQWUsSUFBSSxNQUFNLENBQUMsSUFBSSxzQkFBc0IsSUFBSSxNQUFNLENBQUMsQ0FBQztJQUM5SyxDQUFDOzs7OztJQUVELGVBQWUsQ0FBQyxLQUFZO1FBQ3hCLE9BQU8sSUFBSSxDQUFDLEdBQUcsQ0FBQyxlQUFlLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDM0MsQ0FBQzs7Ozs7SUFFRCxhQUFhLENBQUMsVUFBaUI7UUFDM0IsT0FBTyxJQUFJLENBQUMsR0FBRyxDQUFDLGFBQWEsQ0FBQyxVQUFVLENBQUMsQ0FBQztJQUM5QyxDQUFDOzs7O0lBRUQsY0FBYzs7Y0FDSixFQUFFLEdBQUcsU0FBUyxDQUFDLFNBQVMsQ0FBQyxXQUFXLEVBQUU7OztjQUN0QyxJQUFJLEdBQUc7WUFDVCxFQUFFLEVBQUcsTUFBTSxDQUFFLElBQUksQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBRSxJQUFJLENBQUMsRUFBRSxDQUFDOztZQUMzQyxFQUFFLEVBQUcsT0FBTyxDQUFFLElBQUksQ0FBQyxFQUFFLENBQUM7O1lBQ3RCLEVBQUUsRUFBRyxpQkFBaUIsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDOztZQUMvQixFQUFFLEVBQUcsUUFBUSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUM7O1lBQ3RCLEVBQUUsRUFBRyxPQUFPLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBRSxlQUFlO1NBQy9EO1FBRUQsT0FBTyxJQUFJLENBQUM7SUFDaEIsQ0FBQzs7OztJQUdELFFBQVE7O2NBQ0UsRUFBRSxHQUFHLFNBQVMsQ0FBQyxTQUFTOztjQUN4QixDQUFDLEdBQUcsRUFBRSxDQUFDLE9BQU8sQ0FBQyxVQUFVLENBQUM7UUFDaEMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFO1lBQ1AsT0FBTyxDQUFDLENBQUM7U0FDWjtRQUNELE9BQU8sVUFBVSxDQUFFLEVBQUUsQ0FBQyxTQUFTLENBQUMsQ0FBQyxHQUFHLENBQUMsRUFBRSxFQUFFLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNsRSxDQUFDOzs7WUEvUUosVUFBVSxTQUFDO2dCQUNSLFVBQVUsRUFBRSxNQUFNO2FBQ3JCOzs7Ozs7Ozs7O0lBRUcsMEJBQXdDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSwgT3B0aW9uYWwgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgRGF0YUNvbHVtbiwgQ29sdW1uRm9ybWF0dGVyLCBFbnVtRm9ybWF0T3B0aW9ucywgQ29sdW1uRm9ybWF0U2VydmljZSB9IGZyb20gJ0BmYXJyaXMvdWktY29tbW9uL2NvbHVtbic7XHJcblxyXG5ASW5qZWN0YWJsZSh7XHJcbiAgICBwcm92aWRlZEluOiAncm9vdCdcclxufSlcclxuZXhwb3J0IGNsYXNzIENvbW1vblV0aWxzIHtcclxuICAgIHByaXZhdGUgY2ZzOiBDb2x1bW5Gb3JtYXRTZXJ2aWNlID0gbnVsbDtcclxuICAgIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgICAgIGlmICghdGhpcy5jZnMpIHtcclxuICAgICAgICAgICAgdGhpcy5jZnMgPSBuZXcgQ29sdW1uRm9ybWF0U2VydmljZShudWxsLCBudWxsKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDojrflj5blr7nosaHkuK3mjIflrprlrZfmrrXnmoTlgLzjgIIgZmllbGQ6IOWPr+S7peS4uuW4puacieWxgue6p+e7k+aehOeahOi3r+W+hO+8jOWmgu+8miB1c2VyLmZpcnN0TmFtZSB8IG5hbWUg562JXHJcbiAgICAgKiBkYXRhOiDojrflj5blrZfmrrXnmoTmlbDmja7mupDvvIzkuIDoiKzkuLpKU09O5a+56LGhXHJcbiAgICAgKiBzYWZlOiDkuLp0cnVlLCDlsIZodG1s5a2X56ym6L+b6KGM6L2s56CB6L6T5Ye677yM6buY6K6k5Li6IGZhbHNlXHJcbiAgICAgKi9cclxuICAgIGdldFZhbHVlKGZpZWxkOiBzdHJpbmcsIGRhdGE6IGFueSwgc2FmZSA9IGZhbHNlKSB7XHJcbiAgICAgICAgaWYgKCFkYXRhKSB7XHJcbiAgICAgICAgICAgIHJldHVybiAgJyc7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGxldCByZXN1bHRWYWwgPSAnJztcclxuICAgICAgICBpZiAoZmllbGQuaW5kZXhPZignLicpID09PSAtMSAmJiBkYXRhLmhhc093blByb3BlcnR5KGZpZWxkKSkge1xyXG4gICAgICAgICAgICByZXN1bHRWYWwgPSBkYXRhW2ZpZWxkXTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICByZXN1bHRWYWwgPSBmaWVsZC5zcGxpdCgnLicpLnJlZHVjZSgob2JqLCBrZXkpID0+IHtcclxuICAgICAgICAgICAgICAgIGlmIChvYmopIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gb2JqW2tleV07XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9LCBkYXRhKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChzYWZlKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmZvcm1hdHRlclZhbHVlKHJlc3VsdFZhbCk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdFZhbDtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDmm7TmlrDmjIflrprlr7nosaHkuK3mn5DkuKrlrZfmrrXnmoTlgLxcclxuICAgICAqIEBwYXJhbSBvYmog6KKr5pu05paw5a+56LGhXHJcbiAgICAgKiBAcGFyYW0gZmllbGQg6KKr5pu05paw5a2X5q61XHJcbiAgICAgKiBAcGFyYW0gdmFsIOaWsOWAvFxyXG4gICAgICogQHBhcmFtIG5lc3Qg5piv5ZCm5Li65bWM5aWX77yM6buY6K6k5Li6IHRydWVcclxuICAgICAqL1xyXG4gICAgc2V0VmFsdWUob2JqOiB7IFtrZXk6IHN0cmluZ106IGFueSB9LCBmaWVsZDogc3RyaW5nLCB2YWw6IGFueSwgbmVzdCA9IHRydWUpIHtcclxuICAgICAgICBpZiAoZmllbGQpIHtcclxuICAgICAgICAgICAgaWYgKGZpZWxkLmluZGV4T2YoJy4nKSA+IC0xICYmIG5lc3QpIHtcclxuICAgICAgICAgICAgICAgIGxldCBsYXN0T2JqID0gbnVsbDtcclxuICAgICAgICAgICAgICAgIGNvbnN0IF9maWVsZHMgPSBmaWVsZC5zcGxpdCgnLicpO1xyXG4gICAgICAgICAgICAgICAgX2ZpZWxkcy5yZWR1Y2UoIChjLCBwKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGFzdE9iaiA9IGM7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGNbcF07XHJcbiAgICAgICAgICAgICAgICB9LCBvYmopO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmIChsYXN0T2JqKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGFzdE9ialtfZmllbGRzLnBvcCgpXSA9IHZhbDtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIG9ialtmaWVsZF0gPSB2YWw7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0RW51bUl0ZW0odmFsdWU6IGFueSwgZW51bURhdGE6IGFueVtdLCB2YWx1ZUZpZWxkKSB7XHJcbiAgICAgICAgY29uc3QgaXRlbSA9IGVudW1EYXRhLmZpbmQobiA9PiBuW3ZhbHVlRmllbGRdID09IHZhbHVlKTtcclxuICAgICAgICByZXR1cm4gaXRlbTtcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIF9nZXRFbnVtVGl0bGVGcm9tQ29sdW1uKHZhbHVlOiBhbnksIGNvbDogYW55KSB7XHJcbiAgICAgICAgY29uc3QgX2NvbCA9IGNvbCBhcyBEYXRhQ29sdW1uO1xyXG4gICAgICAgIGNvbnN0IGZvcm1hdHRlciA9IF9jb2wuZm9ybWF0dGVyIGFzIENvbHVtbkZvcm1hdHRlcjtcclxuICAgICAgICBpZiAoZm9ybWF0dGVyICYmIHR5cGVvZiBmb3JtYXR0ZXIgPT09ICdvYmplY3QnKSB7XHJcbiAgICAgICAgICAgIGlmIChmb3JtYXR0ZXIudHlwZSA9PT0gJ2VudW0nICYmIGZvcm1hdHRlci5vcHRpb25zKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5nZXRFbnVtVGl0bGVGcm9tQ29sdW1uT3B0aW9ucyh2YWx1ZSwgZm9ybWF0dGVyLm9wdGlvbnMpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB2YWx1ZTtcclxuICAgIH1cclxuXHJcbiAgICBnZXRFbnVtVGl0bGUoY29sOiBEYXRhQ29sdW1uLCBkYXRhOiBhbnkgKSB7XHJcbiAgICAgICAgY29uc3QgdmFsID0gdGhpcy5nZXRWYWx1ZShjb2wuZmllbGQsIGRhdGEpO1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9nZXRFbnVtVGl0bGVGcm9tQ29sdW1uKHZhbCwgY29sKTtcclxuICAgIH1cclxuXHJcbiAgICBnZXRFbnVtVGl0bGVGcm9tQ29sdW1uT3B0aW9ucyh2YWx1ZTogYW55LCBvcHRzOiBhbnkpIHtcclxuICAgICAgICBjb25zdCB7IGRhdGEsIHZhbHVlRmllbGQsIHRleHRGaWVsZCB9ID0gb3B0cztcclxuICAgICAgICBjb25zdCBpdGVtID0gdGhpcy5nZXRFbnVtSXRlbSh2YWx1ZSwgZGF0YSwgdmFsdWVGaWVsZCk7XHJcbiAgICAgICAgaWYgKGl0ZW0pIHtcclxuICAgICAgICAgICAgcmV0dXJuIGl0ZW1bdGV4dEZpZWxkXTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICByZXR1cm4gdmFsdWU7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGVzY2FwZUh0bWwoc3RyKSB7XHJcbiAgICAgICAgaWYgKHN0ciA9PT0gbnVsbCB8fCBzdHIgPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICByZXR1cm4gICcnO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gc3RyXHJcbiAgICAgICAgLnJlcGxhY2UoLyYvZywgJyZhbXA7JylcclxuICAgICAgICAucmVwbGFjZSgvPC9nLCAnJmx0OycpXHJcbiAgICAgICAgLnJlcGxhY2UoLz4vZywgJyZndDsnKVxyXG4gICAgICAgIC5yZXBsYWNlKC9cXFwiL2csICcmcXVvdDsnKVxyXG4gICAgICAgIC5yZXBsYWNlKC9cXCcvZywgJyYjMzk7JylcclxuICAgICAgICAucmVwbGFjZSgvXFwvL2csICcmI3gyRjsnKTtcclxuICAgIH1cclxuXHJcbiAgICB1bmVzY2FwZUh0bWwoc3RyKSB7XHJcbiAgICAgICAgaWYgKHN0ciA9PT0gbnVsbCB8fCBzdHIgPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICByZXR1cm4gICcnO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gc3RyXHJcbiAgICAgICAgLnJlcGxhY2UoLyZhbXA7L2csICcmJylcclxuICAgICAgICAucmVwbGFjZSgvJmx0Oy9nLCAnPCcpXHJcbiAgICAgICAgLnJlcGxhY2UoLyZndDsvZywgJz4nKVxyXG4gICAgICAgIC5yZXBsYWNlKC8mcXVvdDsvZywgJ1wiJylcclxuICAgICAgICAucmVwbGFjZSgvJiMzOTsvZywgJ1xcJycpXHJcbiAgICAgICAgLnJlcGxhY2UoLyYjeDJGOy9nLCAnLycpO1xyXG4gICAgfVxyXG5cclxuXHJcbiAgICBwcml2YXRlIGZvcm1hdHRlclZhbHVlKHZhbDogYW55KSB7XHJcbiAgICAgICAgaWYgKHZhbCA9PT0gbnVsbCB8fCB2YWwgPT09IHVuZGVmaW5lZCB8fCB2YWwgPT09ICcnKSB7XHJcbiAgICAgICAgICAgIHJldHVybiAnJztcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICh0eXBlb2YgdmFsID09PSAnc3RyaW5nJykge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5lc2NhcGVIdG1sKHZhbCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gdmFsO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKiDojrflj5blrZfnrKbkuLLlnKjpobXpnaLkuK3nmoTnnJ/lrp7lrr3luqYgKi9cclxuICAgIGdldFRleHRXaWR0aCh0eHQ6IHN0cmluZywgZm9udCkge1xyXG4gICAgICAgIC8vIGNvbnN0IGZyYWcgPSBkb2N1bWVudC5jcmVhdGVEb2N1bWVudEZyYWdtZW50KCk7XHJcbiAgICAgICAgY29uc3QgY2FudmFzID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnY2FudmFzJyk7XHJcbiAgICAgICAgY29uc3QgY29udGV4dCA9IGNhbnZhcy5nZXRDb250ZXh0KCcyZCcpO1xyXG4gICAgICAgIGNvbnRleHQuZm9udCA9IGZvbnQ7XHJcbiAgICAgICAgY29uc3QgbWV0cmljcyA9IGNvbnRleHQubWVhc3VyZVRleHQodHh0KTtcclxuICAgICAgICByZXR1cm4gTWF0aC5yb3VuZChtZXRyaWNzLndpZHRoKTtcclxuICAgIH1cclxuXHJcbiAgICByZW1vdmVTdHlsZVNoZWV0KGlkOiBzdHJpbmcpIHtcclxuICAgICAgICBjb25zdCBzdHlsZUVsZW1lbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjJyArIGlkKTtcclxuICAgICAgICBpZiAoc3R5bGVFbGVtZW50KSB7XHJcbiAgICAgICAgICAgIHN0eWxlRWxlbWVudC5yZW1vdmUoKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgY3JlYXRlU3R5bGVTaGVldChzdHlsZVNoZWV0SWQ6IHN0cmluZyk6IEhUTUxTdHlsZUVsZW1lbnQge1xyXG4gICAgICAgIGNvbnN0IGh0bWxIZWFkID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignaGVhZCcpO1xyXG5cclxuICAgICAgICBjb25zdCBzdHlsZUVsZUlkID0gc3R5bGVTaGVldElkO1xyXG4gICAgICAgIGxldCBzdHlsZUVsZW1lbnQgPSBudWxsO1xyXG4gICAgICAgIGlmIChkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjJyArIHN0eWxlRWxlSWQpKSB7XHJcbiAgICAgICAgICAgIHN0eWxlRWxlbWVudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyMnICsgc3R5bGVFbGVJZCk7XHJcbiAgICAgICAgICAgIHN0eWxlRWxlbWVudC5pbm5lclRleHQgPSAnJztcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBzdHlsZUVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzdHlsZScpO1xyXG4gICAgICAgICAgICBzdHlsZUVsZW1lbnQuaWQgPSBzdHlsZUVsZUlkO1xyXG4gICAgICAgICAgICBodG1sSGVhZC5hcHBlbmRDaGlsZChzdHlsZUVsZW1lbnQpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIHN0eWxlRWxlbWVudDtcclxuICAgIH1cclxuXHJcbiAgICBnZXRTdHlsZVNoZWV0KHN0eWxlU2hlZXRJZCkge1xyXG4gICAgICAgIGNvbnN0IHN0eWxlU2hlZXRzID0gZG9jdW1lbnQuc3R5bGVTaGVldHMgYXMgYW55O1xyXG4gICAgICAgIGxldCBzdHlsZVNoZWV0ID0gbnVsbDtcclxuICAgICAgICBmb3IgKGNvbnN0IHN0eWxlc2hlZXQgb2Ygc3R5bGVTaGVldHMpIHtcclxuICAgICAgICAgICAgaWYgKChzdHlsZXNoZWV0Lm93bmVyTm9kZSB8fCBzdHlsZXNoZWV0Wydvd25pbmdFbGVtZW50J10pLmlkID09PSBzdHlsZVNoZWV0SWQpIHtcclxuICAgICAgICAgICAgICAgIHN0eWxlU2hlZXQgPSBzdHlsZXNoZWV0O1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBzdHlsZVNoZWV0O1xyXG4gICAgfVxyXG5cclxuICAgIGFwcGVuZENzc1J1bGVzKHJ1bGVzOiBzdHJpbmdbXSwgc3R5bGVTaGVldCkge1xyXG4gICAgICAgIGZvciAoY29uc3QgcnVsZSBvZiBydWxlcykge1xyXG4gICAgICAgICAgICBjb25zdCBydWxlTmFtZSA9IHJ1bGUuc2xpY2UoMCwgcnVsZS5pbmRleE9mKCd7JykpO1xyXG4gICAgICAgICAgICBjb25zdCByZW1vdmVkQ3NzUnVsZSA9IHRoaXMucmVtb3ZlQ3NzUnVsZShydWxlTmFtZSwgc3R5bGVTaGVldCk7XHJcbiAgICAgICAgICAgIGlmIChzdHlsZVNoZWV0LmFkZFJ1bGUpIHtcclxuICAgICAgICAgICAgICAgIGxldCBjc3NUZXh0ID0gJyc7XHJcbiAgICAgICAgICAgICAgICBpZiAocmVtb3ZlZENzc1J1bGUpIHtcclxuICAgICAgICAgICAgICAgICAgICBjc3NUZXh0ICs9IHJlbW92ZWRDc3NSdWxlLmNzc1RleHQuc2xpY2UocmVtb3ZlZENzc1J1bGUuY3NzVGV4dC5pbmRleE9mKCd7JykgKyAxLCByZW1vdmVkQ3NzUnVsZS5jc3NUZXh0LmluZGV4T2YoJ30nKSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBjc3NUZXh0ICs9IHJ1bGUuc2xpY2UocnVsZS5pbmRleE9mKCd7JykgKyAxLCBydWxlLmluZGV4T2YoJ30nKSkucmVwbGFjZSgvXCIvZywgJycpLnJlcGxhY2UoLywvZywgJzsnKSArICc7JztcclxuICAgICAgICAgICAgICAgIHN0eWxlU2hlZXQuYWRkUnVsZShydWxlTmFtZSwgY3NzVGV4dCwgMCk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBzdHlsZVNoZWV0Lmluc2VydFJ1bGUocnVsZSwgMCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0Q3NzUnVsZShydWxlTmFtZTogc3RyaW5nLCBzdHlsZVNoZWV0KSB7XHJcbiAgICAgICAgY29uc3QgY3NzUnVsZXMgPSAoc3R5bGVTaGVldC5jc3NSdWxlcyB8fCBzdHlsZVNoZWV0LnJ1bGVzKSBhcyBhbnk7XHJcbiAgICAgICAgbGV0IHIgPSBudWxsO1xyXG4gICAgICAgIGZvciAoY29uc3QgcnVsZSBvZiBjc3NSdWxlcykge1xyXG4gICAgICAgICAgICBpZiAocnVsZS5zZWxlY3RvclRleHQgPT0gcnVsZU5hbWUpIHtcclxuICAgICAgICAgICAgICAgIHIgPSBydWxlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gcjtcclxuICAgIH1cclxuXHJcbiAgICByZW1vdmVDc3NSdWxlKHJ1bGVOYW1lOiBzdHJpbmcsIHN0eWxlU2hlZXQgKSB7XHJcbiAgICAgICAgY29uc3QgY3NzUnVsZXMgPSAoc3R5bGVTaGVldC5jc3NSdWxlcyB8fCBzdHlsZVNoZWV0LnJ1bGVzKSBhcyBhbnk7XHJcbiAgICAgICAgbGV0IGlpID0gMDtcclxuICAgICAgICBsZXQgY3NzUnVsZTogYW55ID0gZmFsc2U7XHJcbiAgICAgICAgZG8ge1xyXG4gICAgICAgICAgICBjc3NSdWxlID0gY3NzUnVsZXNbaWldO1xyXG4gICAgICAgICAgICBpZiAoY3NzUnVsZSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKGNzc1J1bGUuc2VsZWN0b3JUZXh0LnRvTG93ZXJDYXNlKCkgPT0gcnVsZU5hbWUudG9Mb3dlckNhc2UoKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChzdHlsZVNoZWV0LmNzc1J1bGVzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0eWxlU2hlZXQuZGVsZXRlUnVsZShpaSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgc3R5bGVTaGVldC5yZW1vdmVSdWxlKGlpKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBjc3NSdWxlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlpKys7XHJcbiAgICAgICAgfSB3aGlsZSAoY3NzUnVsZSk7XHJcbiAgICB9XHJcblxyXG4gICAgaXNOdWxsT3JVbmRlZmluZWQodmFsOiBhbnkpIHtcclxuICAgICAgICByZXR1cm4gdmFsID09PSBudWxsIHx8IHZhbCA9PT0gdW5kZWZpbmVkO1xyXG4gICAgfVxyXG5cclxuICAgIGlzSUUoKSB7XHJcbiAgICAgICAgY29uc3QgdUEgPSB3aW5kb3cubmF2aWdhdG9yLnVzZXJBZ2VudDtcclxuICAgICAgICByZXR1cm4gL21zaWVcXHN8dHJpZGVudFxcL3xlZGdlXFwvL2kudGVzdCh1QSkgJiYgISEoJ3VuaXF1ZUlEJyBpbiBkb2N1bWVudCB8fCAnZG9jdW1lbnRNb2RlJyBpbiBkb2N1bWVudCB8fCAoJ0FjdGl2ZVhPYmplY3QnIGluIHdpbmRvdykgfHwgJ01TSW5wdXRNZXRob2RDb250ZXh0JyBpbiB3aW5kb3cpO1xyXG4gICAgfVxyXG5cclxuICAgIGJ1aWxkU29ydFN0cmluZyhzb3J0czogYW55W10pOiBzdHJpbmcge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmNmcy5idWlsZFNvcnRTdHJpbmcoc29ydHMpO1xyXG4gICAgfVxyXG5cclxuICAgIGJ1aWxkU3FsV2hlcmUoY29uZGl0aW9uczogYW55W10pOiBzdHJpbmcge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmNmcy5idWlsZFNxbFdoZXJlKGNvbmRpdGlvbnMpO1xyXG4gICAgfVxyXG5cclxuICAgIGdldEJyb3dzZXJUeXBlKCkge1xyXG4gICAgICAgIGNvbnN0IHVhID0gbmF2aWdhdG9yLnVzZXJBZ2VudC50b0xvd2VyQ2FzZSgpOyAgLy8g6I635Y+W55So5oi356uv5L+h5oGvXHJcbiAgICAgICAgY29uc3QgaW5mbyA9IHtcclxuICAgICAgICAgICAgaWUgOiAvbXNpZS8gLnRlc3QodWEpICYmICEvb3BlcmEvIC50ZXN0KHVhKSwgIC8vICDljLnphY1JRea1j+iniOWZqFxyXG4gICAgICAgICAgICBvcCA6IC9vcGVyYS8gLnRlc3QodWEpLCAgLy8gIOWMuemFjU9wZXJh5rWP6KeI5ZmoXHJcbiAgICAgICAgICAgIHNhIDogL3ZlcnNpb24uKnNhZmFyaS8udGVzdCh1YSksICAvLyDljLnphY1TYWZhcmnmtY/op4jlmahcclxuICAgICAgICAgICAgY2ggOiAvY2hyb21lLy50ZXN0KHVhKSwgIC8vICDljLnphY1DaHJvbWXmtY/op4jlmahcclxuICAgICAgICAgICAgZmYgOiAvZ2Vja28vLnRlc3QodWEpICYmICEvd2Via2l0Ly50ZXN0KHVhKSAgLy8g5Yy56YWNRmlyZWZveOa1j+iniOWZqFxyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHJldHVybiBpbmZvO1xyXG4gICAgfVxyXG5cclxuXHJcbiAgICBnZXRGRlZlcigpIHtcclxuICAgICAgICBjb25zdCB1YSA9IG5hdmlnYXRvci51c2VyQWdlbnQ7XHJcbiAgICAgICAgY29uc3QgYiA9IHVhLmluZGV4T2YoJ0ZpcmVmb3gvJyk7XHJcbiAgICAgICAgaWYgKGIgPCAwKSB7XHJcbiAgICAgICAgICAgIHJldHVybiAwO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gcGFyc2VGbG9hdCAodWEuc3Vic3RyaW5nKGIgKyA4LCB1YS5sYXN0SW5kZXhPZignXFwuJykpKTtcclxuICAgIH1cclxuXHJcblxyXG59XHJcbiJdfQ==