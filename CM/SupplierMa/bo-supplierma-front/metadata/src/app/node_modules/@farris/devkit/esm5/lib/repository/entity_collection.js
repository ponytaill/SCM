import { Modification, ModifyType } from '../changeset/index';
import { Subject } from 'rxjs';
import { Entity, FieldMetadataUtil, EntityList } from '../entity/index';
// tslint:disable: no-bitwise
/**
 * 实体集合
 * @todo：应该用EntityList代替。
 */
var EntityCollection = /** @class */ (function () {
    /**
     * 构造函数
     */
    function EntityCollection(entityType) {
        this.innerEntitySet = new Set();
        this.innerEntityMap = new Map();
        this.collectionChanged = new Subject();
        this.changes = new Subject();
        this.entityType = entityType;
        this.primaryKey = FieldMetadataUtil.getPrimaryKey(this.entityType) || entityType.prototype.primaryKey;
    }
    /**
     * 实体数量
     */
    EntityCollection.prototype.count = function () {
        return this.innerEntitySet.size;
    };
    Object.defineProperty(EntityCollection.prototype, "entityTypeName", {
        get: function () {
            return this.entityType.name;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * 是否包含指定主键值的实体
     * @param id 主键值
     */
    EntityCollection.prototype.has = function (id) {
        return this.innerEntityMap.has(id);
    };
    /**
     * 清空全部实体
     */
    EntityCollection.prototype.clear = function () {
        this.innerEntityMap.clear();
        this.innerEntitySet.clear();
        this.notifyCollectionChanged(new Modification([], ModifyType.Load));
    };
    /**
     * 清空全部实体
     * @param isReset 是否为重置实体操作
     */
    EntityCollection.prototype.reset = function (notify) {
        if (notify === void 0) { notify = true; }
        this.innerEntityMap.forEach(function (entity) {
            entity.unsubscribe.next();
            entity.unsubscribe.complete();
        });
        this.innerEntitySet.forEach(function (entity) {
            entity.unsubscribe.next();
            entity.unsubscribe.complete();
        });
        this.innerEntityMap.clear();
        this.innerEntitySet.clear();
        if (notify === true) {
            var modification = new Modification([], ModifyType.Load);
            modification.isReset = true;
            this.notifyCollectionChanged(modification);
        }
    };
    /**
     * 转换为实体数组
     */
    EntityCollection.prototype.toArray = function () {
        return Array.from(this.innerEntitySet);
    };
    /**
     * 转换为JSON数组
     */
    EntityCollection.prototype.toJSON = function () {
        var result = [];
        var entities = this.toArray();
        entities.forEach(function (entity) {
            result.push(entity.toJSON());
        });
        return result;
    };
    /**
     * 批量加载实体
     */
    EntityCollection.prototype.loadEntities = function (entities, entityCreate) {
        var _this = this;
        if (entityCreate === void 0) { entityCreate = false; }
        this.innerEntityMap.clear();
        this.innerEntitySet.clear();
        entities.forEach(function (entity) {
            _this.innerEntitySet.add(entity);
            _this.innerEntityMap.set(entity[_this.primaryKey], entity);
            _this.listenEntityChangeEvent(entity);
        });
        var modification = new Modification(entities, ModifyType.Load);
        modification.entityCreate = entityCreate;
        this.notifyCollectionChanged(modification);
    };
    /**
     * 追加实体
     * @param entity 要追加的实体
     * @param isCloned 实体是否是克隆的
     */
    EntityCollection.prototype.addEntity = function (entity, isCloned) {
        if (isCloned === void 0) { isCloned = false; }
        this.verifyEntityToAdd(entity);
        this.innerEntitySet.add(entity);
        this.innerEntityMap.set(entity[this.primaryKey], entity);
        this.listenEntityChangeEvent(entity);
        var modifyType = isCloned ? ModifyType.Clone : ModifyType.Add;
        this.notifyCollectionChanged(new Modification([entity], modifyType));
    };
    /**
     * 在当前行前或后插入数据
     * @param entity 实体
     * @param position 位置
     */
    EntityCollection.prototype.insertEntity = function (entity, position) {
        this.verifyEntityToAdd(entity);
        this.innerEntitySet.add(entity);
        this.innerEntityMap.set(entity[this.primaryKey], entity);
        this.listenEntityChangeEvent(entity);
        this.notifyCollectionChanged(new Modification(entity, ModifyType.Insert, null, null, position));
    };
    /**
     * 更新实体
     * @param entity entity
     * @param data 实体数据
     */
    EntityCollection.prototype.updateEntity = function (entity, data) {
        entity.load(data);
        this.notifyCollectionChanged(new Modification(data, ModifyType.Update, null, null));
    };
    /**
     * 批量追加实体
     * @param entities 要加载的实体数组
     */
    EntityCollection.prototype.addEntities = function (entities) {
        var _this = this;
        if (!entities) {
            return;
        }
        var entitiesToAdd = [];
        entities.forEach(function (entity) {
            _this.verifyEntityToAdd(entity);
            entitiesToAdd.push(entity);
        });
        entitiesToAdd.forEach(function (entity) {
            _this.innerEntitySet.add(entity);
            _this.innerEntityMap.set(entity[_this.primaryKey], entity);
            _this.listenEntityChangeEvent(entity);
        });
        this.notifyCollectionChanged(new Modification(entitiesToAdd, ModifyType.Add));
    };
    /**
     * 添加实体（不切换当前行）
     * @param entities 实体
     */
    EntityCollection.prototype.addData = function (entities) {
        var _this = this;
        if (!entities) {
            return;
        }
        var entitiesToAdd = [];
        entities.forEach(function (entity) {
            _this.verifyEntityToAdd(entity);
            entitiesToAdd.push(entity);
        });
        entitiesToAdd.forEach(function (entity) {
            _this.innerEntitySet.add(entity);
            _this.innerEntityMap.set(entity[_this.primaryKey], entity);
            _this.listenEntityChangeEvent(entity);
        });
        this.notifyCollectionChanged(new Modification(entitiesToAdd, ModifyType.AddData));
    };
    /**
     * 根据主键值获取实体
     */
    EntityCollection.prototype.getEntityById = function (identity) {
        if (this.innerEntityMap.has(identity) === false) {
            return null;
        }
        var entity = this.innerEntityMap.get(identity);
        return entity;
    };
    /**
     * 根据路径获取实体
     */
    EntityCollection.prototype.getEntityByPath = function (pathArray) {
        var rootEntityId = pathArray[0].split(':')[1];
        var parentNode = this.getEntityById(rootEntityId);
        for (var i = 1; i < pathArray.length && parentNode; i = i + 1) {
            var currentPath = pathArray[i];
            if ((parentNode instanceof Entity) || (parentNode.typeName === 'ConcreteEntityPrototype')) {
                // @todo：强识了别冒号
                if (currentPath.indexOf(':') === -1) {
                    parentNode = parentNode[pathArray[i]];
                }
            }
            else {
                parentNode = parentNode.get(pathArray[i].split(':')[1]);
            }
        }
        return parentNode;
    };
    /**
     * id:1/a/id:2/c
     * @param pathArray 路径数组
     */
    EntityCollection.prototype.getEntitiesByPath = function (pathArray) {
        var rootEntityId = pathArray[0].split(':')[1];
        var entity = this.getEntityById(rootEntityId);
        for (var i = 1; i < pathArray.length && entity; i += 2) {
            var path = pathArray[i];
            entity = entity[path];
            if (!(entity instanceof EntityList)) {
                throw new Error('路径格式错误');
            }
            if ((i + 1) < pathArray.length) {
                var id = pathArray[i + 1].split(':')[1];
                entity = entity.get(id);
            }
        }
        return entity;
    };
    /**
     * 返回符合指定条件的实体集合
     * @param predicate 条件谓词
     */
    EntityCollection.prototype.getEntities = function (predicate) {
        var entities = Array.from(this.innerEntitySet);
        var matchedEntities = entities.filter(predicate);
        return matchedEntities;
    };
    /**
     * 获取全部实体
     */
    EntityCollection.prototype.getAllEntities = function () {
        return Array.from(this.innerEntitySet);
    };
    /**
     * 根据主键值删除对应实体
     * @param identity 主键值
     */
    EntityCollection.prototype.removeEntityById = function (identity) {
        this.verifyEntityToRemove(identity);
        var entityToRemove = this.innerEntityMap.get(identity);
        this.innerEntityMap.delete(identity);
        this.innerEntitySet.delete(entityToRemove);
        this.notifyCollectionChanged(new Modification([entityToRemove], ModifyType.Remove));
        return entityToRemove;
    };
    EntityCollection.prototype.removeEntitiesByIds = function (id) {
    };
    /**
     * 删除符合条件的实体集合
     */
    EntityCollection.prototype.removeEntities = function (predicate) {
        var _this = this;
        var entitiesToRemove = Array.from(this.innerEntitySet).filter(predicate);
        entitiesToRemove.forEach(function (entityToRemove) {
            _this.innerEntityMap.delete(entityToRemove[_this.primaryKey]);
            _this.innerEntitySet.delete(entityToRemove);
        });
        this.notifyCollectionChanged(new Modification(entitiesToRemove, ModifyType.Remove));
        return entitiesToRemove;
    };
    /**
     * 移除数据（不切换当前行）
     * @param predicate 过滤函数
     */
    EntityCollection.prototype.removeData = function (predicate) {
        var _this = this;
        var entitiesToRemove = Array.from(this.innerEntitySet).filter(predicate);
        entitiesToRemove.forEach(function (entityToRemove) {
            _this.innerEntityMap.delete(entityToRemove[_this.primaryKey]);
            _this.innerEntitySet.delete(entityToRemove);
        });
        this.notifyCollectionChanged(new Modification(entitiesToRemove, ModifyType.RemoveData));
        return entitiesToRemove;
    };
    /**
     * 重置子表数据
     * @param paths 路径
     * 路径格式 ['id:provinceId','id:cityMDMs','zoneMDMs']
     * @description path参数格式
     * ```json
     * [
     * "id:b5ed23ca-88d9-4377-98ec-92f35c1325f1",
     * "cityMDMs",
     * "id:373706af-622f-4aea-a006-dddbffd7bda3",
     * "zoneMDMs"
     * ]
     * ```
     * @param entities 实体数组
     */
    EntityCollection.prototype.resetEntities = function (paths, entities) {
        if (paths[0].indexOf(':') === -1) {
            throw new Error('路径格式错误');
        }
        // 获取主实体
        var id = paths[0].split(':')[1];
        var entity = this.innerEntityMap.get(id);
        var entityList = entity[paths[1]];
        if (!entity) {
            throw new Error("\u627E\u4E0D\u5230\u4E3B\u952E\u4E3A" + id + "\u7684\u5B9E\u4F53");
        }
        for (var index = 2; index < paths.length; index += 2) {
            var pathInfo = paths[index].split(':');
            var entityId = pathInfo[1];
            // 获取到当前层级的实体
            entity = entityList.get(entityId);
            if (!entity) {
                throw new Error("\u627E\u4E0D\u5230\u4E3B\u952E\u4E3A" + id + "\u7684\u5B9E\u4F53");
            }
            // 获取当前层级实体下的列表属性
            entityList = entity[paths[index + 1]];
        }
        entityList.clear();
        entityList.loadEntities(entities);
    };
    /**
     * 验证实体是否能够添加
     */
    EntityCollection.prototype.verifyEntityToAdd = function (entity) {
        if (this.has(entity[this.primaryKey])) {
            throw new Error("The repository already had an item with the save identity of '" + entity[this.primaryKey] + "'");
        }
        return true;
    };
    /**
     * 验证实体是否能移除
     */
    EntityCollection.prototype.verifyEntityToRemove = function (identity) {
        if (!this.has(identity)) {
            throw new Error("The entity with identity of '" + identity + " dose not exsit.'");
        }
        return true;
    };
    /**
     * 实体集合变更流
     */
    EntityCollection.prototype.notifyCollectionChanged = function (modification) {
        this.collectionChanged.next(modification);
    };
    EntityCollection.prototype.listenEntityChangeEvent = function (entity) {
        var _this = this;
        if (entity) {
            entity.onValueChanged.subscribe(function (change) { return _this.changes.next(change); });
        }
    };
    Object.defineProperty(EntityCollection.prototype, "pageSize", {
        /**
         * 获取分页大小
         * @description 如果用户未指定分页大小则默认为0，即获取所有数据
         */
        get: function () {
            if (!!this.paginationInfo) {
                return this.paginationInfo.pageSize || 0;
            }
            return 0;
        },
        //#region 分页
        /**
         * 设置分页大小
         */
        set: function (pageSize) {
            if (typeof (pageSize) !== 'number' || pageSize < 0) {
                throw new Error('Invalid parameter:pageSize');
            }
            var original = this.paginationInfo;
            // const entityPaginationInfo = Object.assign({}, original[this.entityTypeName], { pageSize });
            // this.paginationInfo = Object.assign({}, original, { [this.entityTypeName]: entityPaginationInfo });
            // this.notifyCollectionChanged(new Modification(this.paginationInfo[this.entityTypeName], ModifyType.PaginationInfoChange));
            this.paginationInfo = Object.assign({}, original, { pageSize: pageSize });
            this.notifyCollectionChanged(new Modification(this.paginationInfo, ModifyType.PaginationInfoChange));
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(EntityCollection.prototype, "totalCount", {
        /**
         * 获取数据总条数
         */
        get: function () {
            if (!!this.paginationInfo) {
                return this.paginationInfo.total || 0;
            }
            return 0;
        },
        /**
         * 设置数据总条数
         */
        set: function (total) {
            if (typeof (total) !== 'number' || total < 0) {
                throw new Error('Invalid parameter:total');
            }
            var original = this.paginationInfo;
            // const entityPaginationInfo = Object.assign({}, original[this.entityTypeName], { total });
            // this.paginationInfo = Object.assign({}, original, { [this.entityTypeName]: entityPaginationInfo });
            this.paginationInfo = Object.assign({}, original, { total: total });
            this.notifyCollectionChanged(new Modification(this.paginationInfo, ModifyType.PaginationInfoChange));
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(EntityCollection.prototype, "pageIndex", {
        /**
         * 获取当前页码
         */
        get: function () {
            if (!!this.paginationInfo) {
                return this.paginationInfo.pageIndex || 1;
            }
            return 1;
        },
        /**
         * 设置当前页码
         */
        set: function (pageIndex) {
            if (typeof (pageIndex) !== 'number' || pageIndex < 0) {
                throw new Error('Invalid parameter:pageIndex');
            }
            var original = this.paginationInfo;
            // const entityPaginationInfo = Object.assign({}, original[this.entityTypeName], { pageIndex });
            // this.paginationInfo = Object.assign({}, original, { [this.entityTypeName]: entityPaginationInfo });
            this.paginationInfo = Object.assign({}, original, { pageIndex: pageIndex });
            this.notifyCollectionChanged(new Modification(this.paginationInfo, ModifyType.PaginationInfoChange));
        },
        enumerable: true,
        configurable: true
    });
    /**
     * 更新分页信息
     * @param path 绑定路径
     * @param pageInfo 分页信息
     */
    EntityCollection.prototype.updatePaginationInfoByPath = function (path, pageInfo) {
        var original = this.paginationInfo;
        var pageIndex = pageInfo.pageIndex, pageSize = pageInfo.pageSize;
        var total = pageInfo && (pageInfo.totalCount || pageInfo.total) || 0;
        var paginationInfo = Object.assign({}, original, { pageIndex: pageIndex, pageSize: pageSize, total: total });
        this.setPaginationConfigByPath(path, paginationInfo);
    };
    /**
     * 根据路径获取分页大小
     * @param path 路径
     */
    EntityCollection.prototype.getPaginationConfigByPath = function (path, defaultValue) {
        if (!path || path === '/') {
            return this.paginationInfo;
        }
        if (typeof path !== 'string') {
            throw new Error('路径必须为字符串！');
        }
        var paths = path.split('/').filter(function (item) { return !!item && item.trim().length > 0; }).map(function (item) { return item.trim(); });
        var config = this.paginationInfo;
        paths.forEach(function (item) {
            if (config && config.hasOwnProperty(item)) {
                config = config[item];
            }
            else {
                config = null;
            }
        });
        return !!config ? config : typeof defaultValue !== 'undefined' ? defaultValue : undefined;
    };
    /**
     * 设置分页信息
     * @param path 路径
     * @param value 值，其中总条数key为total
     */
    EntityCollection.prototype.setPaginationConfigByPath = function (path, value) {
        var original = JSON.stringify(this.paginationInfo);
        if (!path || path === '/') {
            this.paginationInfo = value;
        }
        else {
            if (!Array.isArray(path)) {
                path = path.toString().match(/[^/[\]]+/g) || [];
            }
            path.slice(0, -1).reduce(function (prev, current, index) {
                return Object(prev[current]) === prev[current]
                    ? prev[current]
                    : prev[current] = Math.abs(path[index + 1]) >> 0 === +path[index + 1]
                        ? []
                        : {};
            }, this.paginationInfo)[path[path.length - 1]] = value;
        }
        if (JSON.stringify(this.paginationInfo) !== original) {
            this.notifyCollectionChanged(new Modification(this.paginationInfo, ModifyType.PaginationInfoChange));
        }
        return this.paginationInfo;
    };
    return EntityCollection;
}());
export { EntityCollection };
//# sourceMappingURL=data:application/json;base64,