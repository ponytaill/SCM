/**
 * ViewModelContext管理类
 */
class ViewModelContextManager {
    /**
     * 构造函数
     */
    constructor() {
        this.contextMap = new Map();
        this.contextSet = new Set();
    }
    /**
     * 注册Context
     */
    regContext(viewModelContext) {
        const id = viewModelContext.id;
        if (this.contextMap.has(id) === true) {
            // throw Error(`id为${id}的ViewModelContext已经存在`);
            // 临时处理，方式报错。
            this.unregContext(viewModelContext);
        }
        this.contextMap.set(id, viewModelContext);
        this.contextSet.add(viewModelContext);
    }
    /**
     * 取消注册
     */
    unregContext(context) {
        const id = context.id;
        this.contextMap.delete(id);
        this.contextSet.delete(context);
    }
    /**
     * 获取ContextMap
     */
    getContextMap() {
        return this.contextMap;
    }
    /**
     * 获取全部Context
     */
    getContexts() {
        return Array.from(this.contextSet);
    }
    /**
     * 根据id获取Context
     */
    getContextById(id) {
        const targetContext = this.contextMap.get(id);
        return targetContext;
    }
    /**
     * 获取根Context
     */
    getRootContext() {
        const contexts = this.getContexts();
        const rootContext = contexts.find((context) => {
            return context.parent === null;
        });
        return rootContext;
    }
    /**
     * 获取传入视图模型id的root及root的下一代集合数组
     */
    getRootContextAndPosterityById(viewModelId) {
        const targetContext = this.getContextById(viewModelId);
        const contexts = this.getContexts();
        let contextsGroup = [];
        // 1.找到ROOT
        const RootId = this.getContextsGroupRoot(targetContext);
        // 2.可直接遍历拿到所有直系后代 (目前只有两层结构直接获取下一代)
        contexts.map((context) => {
            if (context.parent && context.parent.id === RootId) {
                contextsGroup.push(context);
            }
        });
        contextsGroup.push(this.getContextById(RootId));
        return contextsGroup;
    }
    getContextsGroupRoot(context) {
        if (context.parent) {
            return this.getContextsGroupRoot(context.parent);
        }
        else {
            return context.id;
        }
    }
}
export { ViewModelContextManager };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidmlld19tb2RlbF9jb250ZXhfbWFuYWdlci5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BmYXJyaXMvbW9iaWxlLWRldmtpdC8iLCJzb3VyY2VzIjpbImxpYi9hcHAvdmlld19tb2RlbF9jb250ZXhfbWFuYWdlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQTs7R0FFRztBQUNILE1BQU0sdUJBQXVCO0lBYTNCOztPQUVHO0lBQ0g7UUFDRSxJQUFJLENBQUMsVUFBVSxHQUFHLElBQUksR0FBRyxFQUE0QixDQUFDO1FBQ3RELElBQUksQ0FBQyxVQUFVLEdBQUcsSUFBSSxHQUFHLEVBQW9CLENBQUM7SUFDaEQsQ0FBQztJQUVEOztPQUVHO0lBQ0ksVUFBVSxDQUFDLGdCQUFrQztRQUNsRCxNQUFNLEVBQUUsR0FBRyxnQkFBZ0IsQ0FBQyxFQUFFLENBQUM7UUFDL0IsSUFBSSxJQUFJLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsS0FBSyxJQUFJLEVBQUU7WUFDcEMsZ0RBQWdEO1lBQ2hELGFBQWE7WUFDYixJQUFJLENBQUMsWUFBWSxDQUFDLGdCQUFnQixDQUFDLENBQUM7U0FDckM7UUFFRCxJQUFJLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxFQUFFLEVBQUUsZ0JBQWdCLENBQUMsQ0FBQztRQUMxQyxJQUFJLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO0lBQ3hDLENBQUM7SUFFRDs7T0FFRztJQUNJLFlBQVksQ0FBQyxPQUF5QjtRQUMzQyxNQUFNLEVBQUUsR0FBRyxPQUFPLENBQUMsRUFBRSxDQUFDO1FBQ3RCLElBQUksQ0FBQyxVQUFVLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBQzNCLElBQUksQ0FBQyxVQUFVLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBQ2xDLENBQUM7SUFFRDs7T0FFRztJQUNJLGFBQWE7UUFDbEIsT0FBTyxJQUFJLENBQUMsVUFBVSxDQUFDO0lBQ3pCLENBQUM7SUFFRDs7T0FFRztJQUNJLFdBQVc7UUFDaEIsT0FBTyxLQUFLLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQztJQUNyQyxDQUFDO0lBRUQ7O09BRUc7SUFDSSxjQUFjLENBQUMsRUFBVTtRQUM5QixNQUFNLGFBQWEsR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUM5QyxPQUFPLGFBQWEsQ0FBQztJQUN2QixDQUFDO0lBRUQ7O09BRUc7SUFDSSxjQUFjO1FBQ25CLE1BQU0sUUFBUSxHQUFHLElBQUksQ0FBQyxXQUFXLEVBQUUsQ0FBQztRQUNwQyxNQUFNLFdBQVcsR0FBRyxRQUFRLENBQUMsSUFBSSxDQUFDLENBQUMsT0FBeUIsRUFBRSxFQUFFO1lBQzlELE9BQU8sT0FBTyxDQUFDLE1BQU0sS0FBSyxJQUFJLENBQUM7UUFDakMsQ0FBQyxDQUFDLENBQUM7UUFDSCxPQUFPLFdBQVcsQ0FBQztJQUNyQixDQUFDO0lBRUQ7O09BRUc7SUFDSSw4QkFBOEIsQ0FBQyxXQUFXO1FBQy9DLE1BQU0sYUFBYSxHQUFHLElBQUksQ0FBQyxjQUFjLENBQUMsV0FBVyxDQUFDLENBQUM7UUFDdkQsTUFBTSxRQUFRLEdBQUcsSUFBSSxDQUFDLFdBQVcsRUFBRSxDQUFDO1FBQ3BDLElBQUksYUFBYSxHQUFHLEVBQUUsQ0FBQztRQUN2QixXQUFXO1FBQ1gsTUFBTSxNQUFNLEdBQUcsSUFBSSxDQUFDLG9CQUFvQixDQUFDLGFBQWEsQ0FBQyxDQUFDO1FBQ3hELG9DQUFvQztRQUNwQyxRQUFRLENBQUMsR0FBRyxDQUFDLENBQUMsT0FBeUIsRUFBRSxFQUFFO1lBQ3pDLElBQUksT0FBTyxDQUFDLE1BQU0sSUFBSSxPQUFPLENBQUMsTUFBTSxDQUFDLEVBQUUsS0FBSyxNQUFNLEVBQUU7Z0JBQ2xELGFBQWEsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7YUFDN0I7UUFDSCxDQUFDLENBQUMsQ0FBQztRQUNILGFBQWEsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDO1FBQ2hELE9BQU8sYUFBYSxDQUFDO0lBQ3ZCLENBQUM7SUFFTyxvQkFBb0IsQ0FBQyxPQUF5QjtRQUNwRCxJQUFJLE9BQU8sQ0FBQyxNQUFNLEVBQUU7WUFDbEIsT0FBTyxJQUFJLENBQUMsb0JBQW9CLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ2xEO2FBQU07WUFDTCxPQUFPLE9BQU8sQ0FBQyxFQUFFLENBQUE7U0FDbEI7SUFDSCxDQUFDO0NBQ0Y7QUFFRCxPQUFPLEVBQUUsdUJBQXVCLEVBQUUsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFZpZXdNb2RlbENvbnRleHQgfSBmcm9tICcuLi92aWV3LW1vZGVsL2luZGV4JztcclxuXHJcbi8qKlxyXG4gKiBWaWV3TW9kZWxDb250ZXh0566h55CG57G7XHJcbiAqL1xyXG5jbGFzcyBWaWV3TW9kZWxDb250ZXh0TWFuYWdlciB7XHJcblxyXG4gIC8qKlxyXG4gICAqIENvbnRleHTlrZflhbhcclxuICAgKi9cclxuICBwcml2YXRlIGNvbnRleHRNYXA6IE1hcDxzdHJpbmcsIFZpZXdNb2RlbENvbnRleHQ+O1xyXG5cclxuICAvKipcclxuICAgKiBDb250ZXh06ZuG5ZCIXHJcbiAgICovXHJcbiAgcHJpdmF0ZSBjb250ZXh0U2V0OiBTZXQ8Vmlld01vZGVsQ29udGV4dD47XHJcblxyXG5cclxuICAvKipcclxuICAgKiDmnoTpgKDlh73mlbBcclxuICAgKi9cclxuICBjb25zdHJ1Y3RvcigpIHtcclxuICAgIHRoaXMuY29udGV4dE1hcCA9IG5ldyBNYXA8c3RyaW5nLCBWaWV3TW9kZWxDb250ZXh0PigpO1xyXG4gICAgdGhpcy5jb250ZXh0U2V0ID0gbmV3IFNldDxWaWV3TW9kZWxDb250ZXh0PigpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog5rOo5YaMQ29udGV4dFxyXG4gICAqL1xyXG4gIHB1YmxpYyByZWdDb250ZXh0KHZpZXdNb2RlbENvbnRleHQ6IFZpZXdNb2RlbENvbnRleHQpOiB2b2lkIHtcclxuICAgIGNvbnN0IGlkID0gdmlld01vZGVsQ29udGV4dC5pZDtcclxuICAgIGlmICh0aGlzLmNvbnRleHRNYXAuaGFzKGlkKSA9PT0gdHJ1ZSkge1xyXG4gICAgICAvLyB0aHJvdyBFcnJvcihgaWTkuLoke2lkfeeahFZpZXdNb2RlbENvbnRleHTlt7Lnu4/lrZjlnKhgKTtcclxuICAgICAgLy8g5Li05pe25aSE55CG77yM5pa55byP5oql6ZSZ44CCXHJcbiAgICAgIHRoaXMudW5yZWdDb250ZXh0KHZpZXdNb2RlbENvbnRleHQpO1xyXG4gICAgfVxyXG5cclxuICAgIHRoaXMuY29udGV4dE1hcC5zZXQoaWQsIHZpZXdNb2RlbENvbnRleHQpO1xyXG4gICAgdGhpcy5jb250ZXh0U2V0LmFkZCh2aWV3TW9kZWxDb250ZXh0KTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOWPlua2iOazqOWGjFxyXG4gICAqL1xyXG4gIHB1YmxpYyB1bnJlZ0NvbnRleHQoY29udGV4dDogVmlld01vZGVsQ29udGV4dCk6IHZvaWQge1xyXG4gICAgY29uc3QgaWQgPSBjb250ZXh0LmlkO1xyXG4gICAgdGhpcy5jb250ZXh0TWFwLmRlbGV0ZShpZCk7XHJcbiAgICB0aGlzLmNvbnRleHRTZXQuZGVsZXRlKGNvbnRleHQpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog6I635Y+WQ29udGV4dE1hcFxyXG4gICAqL1xyXG4gIHB1YmxpYyBnZXRDb250ZXh0TWFwKCkge1xyXG4gICAgcmV0dXJuIHRoaXMuY29udGV4dE1hcDtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOiOt+WPluWFqOmDqENvbnRleHRcclxuICAgKi9cclxuICBwdWJsaWMgZ2V0Q29udGV4dHMoKTogVmlld01vZGVsQ29udGV4dFtdIHtcclxuICAgIHJldHVybiBBcnJheS5mcm9tKHRoaXMuY29udGV4dFNldCk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDmoLnmja5pZOiOt+WPlkNvbnRleHRcclxuICAgKi9cclxuICBwdWJsaWMgZ2V0Q29udGV4dEJ5SWQoaWQ6IHN0cmluZyk6IFZpZXdNb2RlbENvbnRleHQge1xyXG4gICAgY29uc3QgdGFyZ2V0Q29udGV4dCA9IHRoaXMuY29udGV4dE1hcC5nZXQoaWQpO1xyXG4gICAgcmV0dXJuIHRhcmdldENvbnRleHQ7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDojrflj5bmoLlDb250ZXh0XHJcbiAgICovXHJcbiAgcHVibGljIGdldFJvb3RDb250ZXh0KCk6IFZpZXdNb2RlbENvbnRleHQge1xyXG4gICAgY29uc3QgY29udGV4dHMgPSB0aGlzLmdldENvbnRleHRzKCk7XHJcbiAgICBjb25zdCByb290Q29udGV4dCA9IGNvbnRleHRzLmZpbmQoKGNvbnRleHQ6IFZpZXdNb2RlbENvbnRleHQpID0+IHtcclxuICAgICAgcmV0dXJuIGNvbnRleHQucGFyZW50ID09PSBudWxsO1xyXG4gICAgfSk7XHJcbiAgICByZXR1cm4gcm9vdENvbnRleHQ7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDojrflj5bkvKDlhaXop4blm77mqKHlnotpZOeahHJvb3Tlj4pyb29055qE5LiL5LiA5Luj6ZuG5ZCI5pWw57uEXHJcbiAgICovXHJcbiAgcHVibGljIGdldFJvb3RDb250ZXh0QW5kUG9zdGVyaXR5QnlJZCh2aWV3TW9kZWxJZCk6IFZpZXdNb2RlbENvbnRleHRbXSB7XHJcbiAgICBjb25zdCB0YXJnZXRDb250ZXh0ID0gdGhpcy5nZXRDb250ZXh0QnlJZCh2aWV3TW9kZWxJZCk7XHJcbiAgICBjb25zdCBjb250ZXh0cyA9IHRoaXMuZ2V0Q29udGV4dHMoKTtcclxuICAgIGxldCBjb250ZXh0c0dyb3VwID0gW107XHJcbiAgICAvLyAxLuaJvuWIsFJPT1RcclxuICAgIGNvbnN0IFJvb3RJZCA9IHRoaXMuZ2V0Q29udGV4dHNHcm91cFJvb3QodGFyZ2V0Q29udGV4dCk7XHJcbiAgICAvLyAyLuWPr+ebtOaOpemBjeWOhuaLv+WIsOaJgOacieebtOezu+WQjuS7oyAo55uu5YmN5Y+q5pyJ5Lik5bGC57uT5p6E55u05o6l6I635Y+W5LiL5LiA5LujKVxyXG4gICAgY29udGV4dHMubWFwKChjb250ZXh0OiBWaWV3TW9kZWxDb250ZXh0KSA9PiB7XHJcbiAgICAgIGlmIChjb250ZXh0LnBhcmVudCAmJiBjb250ZXh0LnBhcmVudC5pZCA9PT0gUm9vdElkKSB7XHJcbiAgICAgICAgY29udGV4dHNHcm91cC5wdXNoKGNvbnRleHQpO1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuICAgIGNvbnRleHRzR3JvdXAucHVzaCh0aGlzLmdldENvbnRleHRCeUlkKFJvb3RJZCkpO1xyXG4gICAgcmV0dXJuIGNvbnRleHRzR3JvdXA7XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIGdldENvbnRleHRzR3JvdXBSb290KGNvbnRleHQ6IFZpZXdNb2RlbENvbnRleHQpIHtcclxuICAgIGlmIChjb250ZXh0LnBhcmVudCkge1xyXG4gICAgICByZXR1cm4gdGhpcy5nZXRDb250ZXh0c0dyb3VwUm9vdChjb250ZXh0LnBhcmVudCk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICByZXR1cm4gY29udGV4dC5pZFxyXG4gICAgfVxyXG4gIH1cclxufVxyXG5cclxuZXhwb3J0IHsgVmlld01vZGVsQ29udGV4dE1hbmFnZXIgfTtcclxuIl19