/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, Input, ElementRef, Renderer2 } from '@angular/core';
import { ViewChangeService } from './view-change.service';
//视图区域
export class FarrisViewItemDirective {
    /**
     * @param {?} elementRef
     * @param {?} viewChangeService
     * @param {?} render
     */
    constructor(elementRef, viewChangeService, render) {
        this.elementRef = elementRef;
        this.viewChangeService = viewChangeService;
        this.render = render;
        this.fViewGroupId = 'default';
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.viewChangeService.addViewItem(this.viewItemType, this.fViewGroupId);
        this.viewChangeService.getChangeCurrentViewId().subscribe((/**
         * @param {?} currentViewType
         * @return {?}
         */
        (currentViewType) => {
            if (!currentViewType)
                return;
            if (!currentViewType[this.fViewGroupId]) {
                return;
            }
            else if (currentViewType[this.fViewGroupId] == this.viewItemType) {
                // this.render.setStyle(this.elementRef.nativeElement,'display','');
                this.render.removeClass(this.elementRef.nativeElement, 'f-viewchange-view-none');
            }
            else {
                // this.render.setStyle(this.elementRef.nativeElement,'display','none',0);
                this.render.addClass(this.elementRef.nativeElement, 'f-viewchange-view-none');
            }
        }));
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.viewChangeService.removeViewItem(this.viewItemType, this.fViewGroupId);
    }
}
FarrisViewItemDirective.decorators = [
    { type: Directive, args: [{
                selector: '[fViewItem]'
            },] }
];
/** @nocollapse */
FarrisViewItemDirective.ctorParameters = () => [
    { type: ElementRef },
    { type: ViewChangeService },
    { type: Renderer2 }
];
FarrisViewItemDirective.propDecorators = {
    viewItemType: [{ type: Input, args: ['fViewItem',] }],
    fViewGroupId: [{ type: Input, args: ['fViewGroupId',] }]
};
if (false) {
    /** @type {?} */
    FarrisViewItemDirective.prototype.viewItemType;
    /** @type {?} */
    FarrisViewItemDirective.prototype.fViewGroupId;
    /**
     * @type {?}
     * @private
     */
    FarrisViewItemDirective.prototype.elementRef;
    /**
     * @type {?}
     * @private
     */
    FarrisViewItemDirective.prototype.viewChangeService;
    /**
     * @type {?}
     * @private
     */
    FarrisViewItemDirective.prototype.render;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidmlldy1jaGFuZ2UuZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGZhcnJpcy91aS12aWV3LWNoYW5nZS8iLCJzb3VyY2VzIjpbImxpYi92aWV3LWNoYW5nZS5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUNBLE9BQU8sRUFBRSxTQUFTLEVBQWMsS0FBSyxFQUF3QixVQUFVLEVBQXFELFNBQVMsRUFBdUIsTUFBTSxlQUFlLENBQUM7QUFDbEwsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0sdUJBQXVCLENBQUM7O0FBSzFELE1BQU0sT0FBTyx1QkFBdUI7Ozs7OztJQUtoQyxZQUNVLFVBQXNCLEVBQ3RCLGlCQUFvQyxFQUNwQyxNQUFrQjtRQUZsQixlQUFVLEdBQVYsVUFBVSxDQUFZO1FBQ3RCLHNCQUFpQixHQUFqQixpQkFBaUIsQ0FBbUI7UUFDcEMsV0FBTSxHQUFOLE1BQU0sQ0FBWTtRQUxMLGlCQUFZLEdBQVcsU0FBUyxDQUFDO0lBUXhELENBQUM7Ozs7SUFFTSxRQUFRO1FBQ1gsSUFBSSxDQUFDLGlCQUFpQixDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsWUFBWSxFQUFFLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQztRQUN6RSxJQUFJLENBQUMsaUJBQWlCLENBQUMsc0JBQXNCLEVBQUUsQ0FBQyxTQUFTOzs7O1FBQUMsQ0FBQyxlQUFvQixFQUFRLEVBQUU7WUFDckYsSUFBRyxDQUFDLGVBQWU7Z0JBQUUsT0FBTztZQUM1QixJQUFHLENBQUMsZUFBZSxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsRUFBQztnQkFDbkMsT0FBTzthQUNWO2lCQUNJLElBQUcsZUFBZSxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxJQUFJLENBQUMsWUFBWSxFQUFDO2dCQUM1RCxvRUFBb0U7Z0JBQ3BFLElBQUksQ0FBQyxNQUFNLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsYUFBYSxFQUFFLHdCQUF3QixDQUFDLENBQUM7YUFDcEY7aUJBQ0c7Z0JBQ0EsMEVBQTBFO2dCQUMxRSxJQUFJLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLGFBQWEsRUFBRSx3QkFBd0IsQ0FBQyxDQUFDO2FBQ2pGO1FBQ0wsQ0FBQyxFQUFDLENBQUM7SUFDUCxDQUFDOzs7O0lBRU0sV0FBVztRQUNkLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLFlBQVksRUFBRSxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUM7SUFDaEYsQ0FBQzs7O1lBcENKLFNBQVMsU0FBQztnQkFDUCxRQUFRLEVBQUUsYUFBYTthQUMxQjs7OztZQUw0RCxVQUFVO1lBQzlELGlCQUFpQjtZQURrRyxTQUFTOzs7MkJBUWhJLEtBQUssU0FBQyxXQUFXOzJCQUNqQixLQUFLLFNBQUMsY0FBYzs7OztJQURyQiwrQ0FBeUM7O0lBQ3pDLCtDQUF3RDs7Ozs7SUFHdEQsNkNBQThCOzs7OztJQUM5QixvREFBNEM7Ozs7O0lBQzVDLHlDQUEwQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHN0eWxlIH0gZnJvbSAnQGFuZ3VsYXIvYW5pbWF0aW9ucyc7XHJcbmltcG9ydCB7IERpcmVjdGl2ZSwgSW5qZWN0YWJsZSwgSW5wdXQsIEV2ZW50RW1pdHRlciwgT3V0cHV0LCBFbGVtZW50UmVmLCBPbkluaXQsIE9uRGVzdHJveSwgQ2hhbmdlRGV0ZWN0b3JSZWYsIEhvc3RCaW5kaW5nLCBSZW5kZXJlcjIsIFJlbmRlcmVyU3R5bGVGbGFnczIgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgVmlld0NoYW5nZVNlcnZpY2UgfSBmcm9tICcuL3ZpZXctY2hhbmdlLnNlcnZpY2UnO1xyXG4vL+inhuWbvuWMuuWfn1xyXG5ARGlyZWN0aXZlKHtcclxuICAgIHNlbGVjdG9yOiAnW2ZWaWV3SXRlbV0nXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBGYXJyaXNWaWV3SXRlbURpcmVjdGl2ZSBpbXBsZW1lbnRzIE9uSW5pdCwgT25EZXN0cm95IHtcclxuXHJcbiAgICBASW5wdXQoJ2ZWaWV3SXRlbScpIHZpZXdJdGVtVHlwZTogc3RyaW5nO1xyXG4gICAgQElucHV0KCdmVmlld0dyb3VwSWQnKSBmVmlld0dyb3VwSWQ6IHN0cmluZyA9ICdkZWZhdWx0JztcclxuICBcclxuICAgIGNvbnN0cnVjdG9yKFxyXG4gICAgICBwcml2YXRlIGVsZW1lbnRSZWY6IEVsZW1lbnRSZWYsXHJcbiAgICAgIHByaXZhdGUgdmlld0NoYW5nZVNlcnZpY2U6IFZpZXdDaGFuZ2VTZXJ2aWNlLFxyXG4gICAgICBwcml2YXRlIHJlbmRlciA6IFJlbmRlcmVyMlxyXG4gICAgKSB7XHJcbiAgICAgICAgXHJcbiAgICB9XHJcbiAgXHJcbiAgICBwdWJsaWMgbmdPbkluaXQoKTogdm9pZCB7XHJcbiAgICAgICAgdGhpcy52aWV3Q2hhbmdlU2VydmljZS5hZGRWaWV3SXRlbSh0aGlzLnZpZXdJdGVtVHlwZSwgdGhpcy5mVmlld0dyb3VwSWQpO1xyXG4gICAgICAgIHRoaXMudmlld0NoYW5nZVNlcnZpY2UuZ2V0Q2hhbmdlQ3VycmVudFZpZXdJZCgpLnN1YnNjcmliZSgoY3VycmVudFZpZXdUeXBlOiBhbnkpOiB2b2lkID0+IHtcclxuICAgICAgICAgICAgaWYoIWN1cnJlbnRWaWV3VHlwZSkgcmV0dXJuO1xyXG4gICAgICAgICAgICBpZighY3VycmVudFZpZXdUeXBlW3RoaXMuZlZpZXdHcm91cElkXSl7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSBpZihjdXJyZW50Vmlld1R5cGVbdGhpcy5mVmlld0dyb3VwSWRdID09IHRoaXMudmlld0l0ZW1UeXBlKXtcclxuICAgICAgICAgICAgICAgIC8vIHRoaXMucmVuZGVyLnNldFN0eWxlKHRoaXMuZWxlbWVudFJlZi5uYXRpdmVFbGVtZW50LCdkaXNwbGF5JywnJyk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnJlbmRlci5yZW1vdmVDbGFzcyh0aGlzLmVsZW1lbnRSZWYubmF0aXZlRWxlbWVudCwgJ2Ytdmlld2NoYW5nZS12aWV3LW5vbmUnKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNle1xyXG4gICAgICAgICAgICAgICAgLy8gdGhpcy5yZW5kZXIuc2V0U3R5bGUodGhpcy5lbGVtZW50UmVmLm5hdGl2ZUVsZW1lbnQsJ2Rpc3BsYXknLCdub25lJywwKTtcclxuICAgICAgICAgICAgICAgIHRoaXMucmVuZGVyLmFkZENsYXNzKHRoaXMuZWxlbWVudFJlZi5uYXRpdmVFbGVtZW50LCAnZi12aWV3Y2hhbmdlLXZpZXctbm9uZScpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbiAgXHJcbiAgICBwdWJsaWMgbmdPbkRlc3Ryb3koKTogdm9pZCB7XHJcbiAgICAgICAgdGhpcy52aWV3Q2hhbmdlU2VydmljZS5yZW1vdmVWaWV3SXRlbSh0aGlzLnZpZXdJdGVtVHlwZSwgdGhpcy5mVmlld0dyb3VwSWQpO1xyXG4gICAgfVxyXG4gIH0iXX0=