/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ComponentFactoryResolver, Directive, HostListener, Injector, Input, NgZone, Renderer2 } from '@angular/core';
import { reqAnimFrame } from '@farris/ui-common';
import { InputGroupComponent } from '@farris/ui-input-group';
import { debounceTime, filter, map } from 'rxjs/operators';
import { LookupGridDisplayType } from '../lookup-displaytype';
import { LookupGridComponent } from '../lookup-grid.component';
import { LookupQuickSelectPanelComponent } from './quick-select-panel.component';
var LookupQuickSelectDirective = /** @class */ (function () {
    function LookupQuickSelectDirective(injector, ngzone, render, inputRef, lookupRef, cfr) {
        this.injector = injector;
        this.ngzone = ngzone;
        this.render = render;
        this.inputRef = inputRef;
        this.lookupRef = lookupRef;
        this.cfr = cfr;
    }
    /**
     * @return {?}
     */
    LookupQuickSelectDirective.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
    };
    /**
     * @return {?}
     */
    LookupQuickSelectDirective.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.options && this.options.enable) {
            this.inputRef.inputClick.subscribe((/**
             * @param {?} e
             * @return {?}
             */
            function (e) {
                e.stopPropagation();
                if (!_this.panelElement) {
                    // 执行帮助前
                    _this.lookupRef.dictPicking({
                        instance: _this,
                    }).subscribe((/**
                     * @param {?} pr
                     * @return {?}
                     */
                    function (pr) {
                        if (_this.lookupRef.displayType === LookupGridDisplayType.TreeList || !_this.lookupRef.singleSelect) {
                            return;
                        }
                        var _a = _this.lookupRef.dialogMgr.checkDictPickingResult(pr), show = _a.show, customData = _a.customData, message = _a.message;
                        _this.lookupRef.customData = customData;
                        if (show) {
                            _this.createDataPanel();
                        }
                        else {
                            if (message) {
                                _this.lookupRef.notifyService.warning(message);
                            }
                        }
                    }));
                }
            }));
            this.inputRef.valueChange.pipe(debounceTime(200)).subscribe((/**
             * @param {?} val
             * @return {?}
             */
            function (val) {
                _this.lookupRef.dictPicking({ instance: _this }).subscribe((/**
                 * @param {?} pr
                 * @return {?}
                 */
                function (pr) {
                    if (_this.lookupRef.displayType === LookupGridDisplayType.TreeList || !_this.lookupRef.singleSelect) {
                        return;
                    }
                    var _a = _this.lookupRef.dialogMgr.checkDictPickingResult(pr), show = _a.show, customData = _a.customData, message = _a.message;
                    _this.lookupRef.customData = customData;
                    if (!_this.panelElement) {
                        _this.createDataPanel();
                    }
                    else {
                        _this.loadData();
                    }
                }));
            }));
            this.inputRef.keydownHandle.pipe(filter((/**
             * @param {?} event
             * @return {?}
             */
            function (event) {
                return event.key === 'Escape' || event.key === 'Tab' || event.key === 'ArrowRight' || event.key === 'F2';
            }))).subscribe((/**
             * @return {?}
             */
            function () {
                _this.hide();
            }));
        }
    };
    /**
     * @return {?}
     */
    LookupQuickSelectDirective.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.lookupRef.overLayService.destory(this.lookupRef.el.nativeElement);
    };
    /**
     * @private
     * @return {?}
     */
    LookupQuickSelectDirective.prototype.removePanelElement = /**
     * @private
     * @return {?}
     */
    function () {
        document.body.removeChild(this.panelElement);
        this.panelElement = null;
    };
    /**
     * @param {?=} e
     * @return {?}
     */
    LookupQuickSelectDirective.prototype.hide = /**
     * @param {?=} e
     * @return {?}
     */
    function (e) {
        var _this = this;
        reqAnimFrame((/**
         * @return {?}
         */
        function () {
            if (_this.panelElement) {
                if (e && (e.type === 'mousewheel' || e.type === 'wheel')) {
                    _this.removePanelElement();
                }
                else {
                    _this.panelElement.classList.remove('f-area-show');
                    setTimeout((/**
                     * @return {?}
                     */
                    function () {
                        _this.removePanelElement();
                    }), 120);
                }
                _this.lookupRef.overLayService.destory(_this.lookupRef.el.nativeElement);
            }
        }));
    };
    /**
     * @private
     * @return {?}
     */
    LookupQuickSelectDirective.prototype.createDataPanel = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        this.panelElement = document.createElement('div');
        this.panelElement.classList.add('overlay-pane', 'f-lookup_quick-panel', 'f-area-hide');
        document.body.appendChild(this.panelElement);
        var _a = this.getPanelSize(), width = _a.width, left = _a.left, top = _a.top, height = _a.height;
        this.panelElement.style.width = width + "px";
        this.panelElement.style.height = height + "px";
        this.panelElement.style.top = top + "px";
        this.panelElement.style.left = left + "px";
        this.panelElement.style.zIndex = '10001';
        // 创建数据展示组件
        /** @type {?} */
        var cmpFact = this.cfr.resolveComponentFactory(LookupQuickSelectPanelComponent);
        this.cmpRef = cmpFact.create(this.injector);
        this.cmpRef.instance.showMore = this.options.showMore;
        this.cmpRef.instance.textField = this.lookupRef.textField;
        this.cmpRef.instance.formatter = this.options.formatter;
        // cmpRef.location.nativeElement.classList.add('farris-main-area');
        this.panelElement.appendChild(this.cmpRef.location.nativeElement);
        this.cmpRef.changeDetectorRef.detectChanges();
        // more clicked 打开帮助窗口
        this.cmpRef.instance.moreClcik.subscribe((/**
         * @param {?} e
         * @return {?}
         */
        function (e) {
            _this.hide(e);
            _this.lookupRef.showDialog();
        }));
        this.cmpRef.instance.itemClick.subscribe((/**
         * @param {?} e
         * @return {?}
         */
        function (e) {
            var data = e.data;
            _this.lookupRef.selectItem(data);
            _this.hide();
        }));
        // 注册鼠标滚轮，点击事件，用于隐藏Panel
        this.lookupRef.overLayService.registerMouseEvent(this.lookupRef.el.nativeElement, (/**
         * @param {?} e
         * @return {?}
         */
        function (e) {
            if (!_this.panelElement || e.target['closest']('.f-lookup_quick-panel')) {
                return;
            }
            if (_this.cmpRef) {
                _this.cmpRef.destroy();
                _this.cmpRef = null;
            }
            _this.hide(e);
            if (_this.lookupRef.inputGroup.textbox.nativeElement === e.target) {
                return false;
            }
        }));
        this.panelElement.classList.add('f-area-show');
        this.loadData();
    };
    /**
     * @private
     * @return {?}
     */
    LookupQuickSelectDirective.prototype.calculationPanelHeight = /**
     * @private
     * @return {?}
     */
    function () {
        return this.options.showItemsCount * 30 + (this.options.showMore ? 50 : 0) + this.options.footerHeight + 5;
    };
    /**
     * @private
     * @return {?}
     */
    LookupQuickSelectDirective.prototype.getInputSizeInfo = /**
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var el = this.lookupRef.viewType === 'text' ? this.inputRef.inputGroup : this.lookupRef.tagbox;
        return el.nativeElement.getBoundingClientRect();
    };
    /**
     * @private
     * @return {?}
     */
    LookupQuickSelectDirective.prototype.getPanelSize = /**
     * @private
     * @return {?}
     */
    function () {
        var _a = this.getInputSizeInfo(), width = _a.width, height = _a.height, top = _a.top, left = _a.left;
        /** @type {?} */
        var bottom = window.innerHeight - height - top;
        /** @type {?} */
        var panelHeight = this.calculationPanelHeight();
        /** @type {?} */
        var h = top > bottom ? top : bottom;
        if (bottom > panelHeight) {
            top = top + height;
            // 面板由上向下展开
            this.panelElement.style.transformOrigin = '100% top';
        }
        else {
            if (top > bottom) {
                if (h < panelHeight) {
                    panelHeight = h - 10;
                    top = 10;
                }
                else {
                    top = top - parseInt('' + panelHeight, 10) - 5;
                }
                // 面板由下向上展开
                this.panelElement.style.transformOrigin = '100% bottom';
            }
            else {
                if (h < panelHeight) {
                    panelHeight = h - 10;
                }
                top = top + height;
            }
        }
        return { width: width, top: top, height: panelHeight, left: left };
    };
    /**
     * @private
     * @return {?}
     */
    LookupQuickSelectDirective.prototype.getData = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var p = {
            pageInfo: {
                pageSize: this.options.showItemsCount,
                pageIndex: 1,
            },
        };
        /** @type {?} */
        var t = "all";
        if (this.lookupRef.isTextChange) {
            this.lookupRef._searchState = {
                field: this.lookupRef.textField,
                //"*",
                value: this.lookupRef.displayText
            };
            p = {
                search: this.lookupRef._searchState
            };
            t = 'search';
        }
        return this.lookupRef.httpMgr.lookupRequest(p, t).pipe(map((/**
         * @param {?} restData
         * @return {?}
         */
        function (restData) {
            if (restData) {
                return restData.items || [];
            }
            if (_this.lookupRef.displayText && _this.lookupRef.isTextChange) {
                return _this.lookupRef.items.filter((/**
                 * @param {?} n
                 * @return {?}
                 */
                function (n) {
                    return n[_this.lookupRef.textField].indexOf(_this.lookupRef.displayText) > -1;
                })).slice(0, _this.options.showItemsCount);
            }
            return _this.lookupRef.items.slice(0, _this.options.showItemsCount);
        })));
    };
    /**
     * @private
     * @return {?}
     */
    LookupQuickSelectDirective.prototype.loadData = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var loadingRef = this.lookupRef.loadingService.show({ container: this.panelElement });
        this.getData().subscribe((/**
         * @param {?} data
         * @return {?}
         */
        function (data) {
            _this.cmpRef.instance.loadData(data);
            loadingRef.close();
        }));
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    LookupQuickSelectDirective.prototype.registerKeyboardEvent = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        var _this = this;
        if (!this.lookupRef.singleSelect) {
            return;
        }
        /** @type {?} */
        var rows = [];
        if (this.cmpRef) {
            rows = this.cmpRef.instance.data;
        }
        if (!rows || !rows.length) {
            return;
        }
        if ($event.code === 'ArrowUp' || $event.code === 'ArrowDown') {
            $event.preventDefault();
            $event.stopPropagation();
        }
        /** @type {?} */
        var idx = this.cmpRef.instance.activeIndex;
        /** @type {?} */
        var activeIndex = idx;
        /** @type {?} */
        var selectItem = (/**
         * @param {?} index
         * @return {?}
         */
        function (index) {
            activeIndex = index;
            _this.cmpRef.instance.setActiveItem(index);
        });
        if ($event.code === 'ArrowUp') { // up
            if (idx > -1) {
                /** @type {?} */
                var prevIdx = idx - 1;
                if (prevIdx < 0) {
                    prevIdx = rows.length - 1;
                }
                selectItem(prevIdx);
            }
            else {
                selectItem(rows.length - 1);
            }
        }
        if ($event.code === 'ArrowDown') { // down
            // down
            /** @type {?} */
            var nextIdx = idx + 1;
            if (nextIdx >= rows.length) {
                nextIdx = 0;
            }
            selectItem(nextIdx);
        }
        if ($event.key === 'Enter') {
            if (rows && rows.length) {
                /** @type {?} */
                var data = rows[idx];
                this.lookupRef.selectItem(data);
                this.hide();
            }
        }
    };
    LookupQuickSelectDirective.decorators = [
        { type: Directive, args: [{ selector: '[quick-select]' },] }
    ];
    /** @nocollapse */
    LookupQuickSelectDirective.ctorParameters = function () { return [
        { type: Injector },
        { type: NgZone },
        { type: Renderer2 },
        { type: InputGroupComponent },
        { type: LookupGridComponent },
        { type: ComponentFactoryResolver }
    ]; };
    LookupQuickSelectDirective.propDecorators = {
        options: [{ type: Input, args: ['quick-select',] }],
        registerKeyboardEvent: [{ type: HostListener, args: ['keydown', ['$event'],] }]
    };
    return LookupQuickSelectDirective;
}());
export { LookupQuickSelectDirective };
if (false) {
    /** @type {?} */
    LookupQuickSelectDirective.prototype.options;
    /**
     * @type {?}
     * @private
     */
    LookupQuickSelectDirective.prototype.panelElement;
    /**
     * @type {?}
     * @private
     */
    LookupQuickSelectDirective.prototype.cmpRef;
    /**
     * @type {?}
     * @private
     */
    LookupQuickSelectDirective.prototype.injector;
    /**
     * @type {?}
     * @private
     */
    LookupQuickSelectDirective.prototype.ngzone;
    /**
     * @type {?}
     * @private
     */
    LookupQuickSelectDirective.prototype.render;
    /**
     * @type {?}
     * @private
     */
    LookupQuickSelectDirective.prototype.inputRef;
    /**
     * @type {?}
     * @private
     */
    LookupQuickSelectDirective.prototype.lookupRef;
    /**
     * @type {?}
     * @private
     */
    LookupQuickSelectDirective.prototype.cfr;
}
//# sourceMappingURL=data:application/json;base64,