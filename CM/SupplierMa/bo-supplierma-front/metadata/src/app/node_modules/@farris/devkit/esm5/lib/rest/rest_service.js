import { Injectable } from '@angular/core';
import { HttpClient, HttpParams } from '@angular/common/http';
var RestfulService = /** @class */ (function () {
    /**
     * 构造函数
     * @param httpClient http客户端
     */
    function RestfulService(httpClient) {
        this.httpClient = httpClient;
    }
    /**
     * 发送GET请求
     * @param uri 请求地址
     * @param params 请求参数
     */
    RestfulService.prototype.get = function (uri, params, options) {
        return this.request(uri, 'GET', params, options);
    };
    /**
     * 发送POST请求
     * @param uri 请求地址
     * @param params 请求参数
     */
    RestfulService.prototype.put = function (uri, body, params, options) {
        var optionsWithBody = this.addBody(options, body);
        return this.request(uri, 'PUT', params, optionsWithBody);
    };
    /**
     * 发送PUT请求
     * @param uri 请求地址
     * @param params 请求参数
     */
    RestfulService.prototype.post = function (uri, body, params, options) {
        var optionsWithBody = this.addBody(options, body);
        return this.request(uri, 'POST', params, optionsWithBody);
    };
    /**
     * 发送DELETE请求
     * @param uri 请求地址
     * @param params 请求参数
     */
    RestfulService.prototype.delete = function (uri, params, options) {
        return this.request(uri, 'DELETE', params, options);
    };
    /**
     * 发送请求
     * @param uri 请求地址
     * @param params 请求参数
     */
    RestfulService.prototype.request = function (uri, method, params, options) {
        if (options === void 0) { options = {}; }
        options = options || {};
        if (params) {
            var httpParams = this.buildParams(params);
            options.params = httpParams;
        }
        var methodName = method;
        var result = this.httpClient.request(methodName, uri, options);
        return result;
    };
    /**
     * 构造Http请求参数
     * @param params 请求参数
     */
    RestfulService.prototype.buildParams = function (params) {
        var httpParams = new HttpParams();
        for (var key in params) {
            if (params.hasOwnProperty(key)) {
                var value = params[key].toString();
                httpParams = httpParams.append(key, value);
            }
        }
        return httpParams;
    };
    RestfulService.prototype.addBody = function (options, body) {
        options = options || {};
        var mergedOptions = Object.assign(options, { body: body });
        return mergedOptions;
    };
    RestfulService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    RestfulService.ctorParameters = function () { return [
        { type: HttpClient }
    ]; };
    return RestfulService;
}());
export { RestfulService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVzdF9zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGZhcnJpcy9kZXZraXQvIiwic291cmNlcyI6WyJsaWIvcmVzdC9yZXN0X3NlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLEVBQUUsVUFBVSxFQUFFLFVBQVUsRUFBRSxNQUFNLHNCQUFzQixDQUFDO0FBSzlEO0lBR0U7OztPQUdHO0lBQ0gsd0JBQW9CLFVBQXNCO1FBQXRCLGVBQVUsR0FBVixVQUFVLENBQVk7SUFBSSxDQUFDO0lBRS9DOzs7O09BSUc7SUFDSCw0QkFBRyxHQUFILFVBQUksR0FBVyxFQUFFLE1BQWUsRUFBRSxPQUFhO1FBQzdDLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxHQUFHLEVBQUUsS0FBSyxFQUFFLE1BQU0sRUFBRSxPQUFPLENBQUMsQ0FBQztJQUNuRCxDQUFDO0lBRUQ7Ozs7T0FJRztJQUNILDRCQUFHLEdBQUgsVUFBSSxHQUFXLEVBQUUsSUFBUyxFQUFFLE1BQWUsRUFBRSxPQUFhO1FBQ3hELElBQU0sZUFBZSxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsT0FBTyxFQUFFLElBQUksQ0FBQyxDQUFDO1FBQ3BELE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxHQUFHLEVBQUUsS0FBSyxFQUFFLE1BQU0sRUFBRSxlQUFlLENBQUMsQ0FBQztJQUMzRCxDQUFDO0lBRUQ7Ozs7T0FJRztJQUNILDZCQUFJLEdBQUosVUFBSyxHQUFXLEVBQUUsSUFBUyxFQUFFLE1BQWUsRUFBRSxPQUFhO1FBQ3pELElBQU0sZUFBZSxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsT0FBTyxFQUFFLElBQUksQ0FBQyxDQUFDO1FBQ3BELE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxHQUFHLEVBQUUsTUFBTSxFQUFFLE1BQU0sRUFBRSxlQUFlLENBQUMsQ0FBQztJQUM1RCxDQUFDO0lBRUQ7Ozs7T0FJRztJQUNILCtCQUFNLEdBQU4sVUFBTyxHQUFXLEVBQUUsTUFBZSxFQUFFLE9BQWE7UUFDaEQsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLEdBQUcsRUFBRSxRQUFRLEVBQUUsTUFBTSxFQUFFLE9BQU8sQ0FBQyxDQUFDO0lBQ3RELENBQUM7SUFFRDs7OztPQUlHO0lBQ0ssZ0NBQU8sR0FBZixVQUFnQixHQUFXLEVBQUUsTUFBcUIsRUFBRSxNQUFjLEVBQUUsT0FBaUI7UUFBakIsd0JBQUEsRUFBQSxZQUFpQjtRQUNuRixPQUFPLEdBQUcsT0FBTyxJQUFJLEVBQUUsQ0FBQztRQUN4QixJQUFJLE1BQU0sRUFBRTtZQUNWLElBQU0sVUFBVSxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUMsTUFBTSxDQUFDLENBQUM7WUFDNUMsT0FBTyxDQUFDLE1BQU0sR0FBRyxVQUFVLENBQUM7U0FDN0I7UUFDRCxJQUFNLFVBQVUsR0FBRyxNQUFnQixDQUFDO1FBQ3BDLElBQU0sTUFBTSxHQUFHLElBQUksQ0FBQyxVQUFVLENBQUMsT0FBTyxDQUFDLFVBQVUsRUFBRSxHQUFHLEVBQUUsT0FBTyxDQUFDLENBQUM7UUFDakUsT0FBTyxNQUFNLENBQUM7SUFDaEIsQ0FBQztJQUVEOzs7T0FHRztJQUNLLG9DQUFXLEdBQW5CLFVBQW9CLE1BQWM7UUFDaEMsSUFBSSxVQUFVLEdBQUcsSUFBSSxVQUFVLEVBQUUsQ0FBQztRQUNsQyxLQUFLLElBQU0sR0FBRyxJQUFJLE1BQU0sRUFBRTtZQUN4QixJQUFJLE1BQU0sQ0FBQyxjQUFjLENBQUMsR0FBRyxDQUFDLEVBQUU7Z0JBQzlCLElBQU0sS0FBSyxHQUFHLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxRQUFRLEVBQUUsQ0FBQztnQkFDckMsVUFBVSxHQUFHLFVBQVUsQ0FBQyxNQUFNLENBQUMsR0FBRyxFQUFFLEtBQUssQ0FBQyxDQUFDO2FBQzVDO1NBQ0Y7UUFDRCxPQUFPLFVBQVUsQ0FBQztJQUNwQixDQUFDO0lBRU8sZ0NBQU8sR0FBZixVQUFnQixPQUFZLEVBQUUsSUFBUztRQUNyQyxPQUFPLEdBQUcsT0FBTyxJQUFJLEVBQUUsQ0FBQztRQUN4QixJQUFNLGFBQWEsR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDLE9BQU8sRUFBRSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUMsQ0FBQyxDQUFDO1FBQzVELE9BQU8sYUFBYSxDQUFDO0lBQ3ZCLENBQUM7O2dCQWxGRixVQUFVOzs7O2dCQUxGLFVBQVU7O0lBd0ZuQixxQkFBQztDQUFBLEFBbkZELElBbUZDO1NBbEZZLGNBQWMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IEh0dHBDbGllbnQsIEh0dHBQYXJhbXMgfSBmcm9tICdAYW5ndWxhci9jb21tb24vaHR0cCc7XHJcbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcclxuXHJcbmV4cG9ydCB0eXBlIFJlc3RmdWxNZXRob2QgPSAnR0VUJyB8ICdQVVQnIHwgJ1BPU1QnIHwgJ0RFTEVURSc7XHJcblxyXG5ASW5qZWN0YWJsZSgpXHJcbmV4cG9ydCBjbGFzcyBSZXN0ZnVsU2VydmljZSB7XHJcblxyXG4gIC8qKlxyXG4gICAqIOaehOmAoOWHveaVsFxyXG4gICAqIEBwYXJhbSBodHRwQ2xpZW50IGh0dHDlrqLmiLfnq69cclxuICAgKi9cclxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIGh0dHBDbGllbnQ6IEh0dHBDbGllbnQpIHsgfVxyXG5cclxuICAvKipcclxuICAgKiDlj5HpgIFHRVTor7fmsYJcclxuICAgKiBAcGFyYW0gdXJpIOivt+axguWcsOWdgFxyXG4gICAqIEBwYXJhbSBwYXJhbXMg6K+35rGC5Y+C5pWwXHJcbiAgICovXHJcbiAgZ2V0KHVyaTogc3RyaW5nLCBwYXJhbXM/OiBvYmplY3QsIG9wdGlvbnM/OiBhbnkpOiBPYnNlcnZhYmxlPGFueVtdPiB7XHJcbiAgICByZXR1cm4gdGhpcy5yZXF1ZXN0KHVyaSwgJ0dFVCcsIHBhcmFtcywgb3B0aW9ucyk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDlj5HpgIFQT1NU6K+35rGCXHJcbiAgICogQHBhcmFtIHVyaSDor7fmsYLlnLDlnYBcclxuICAgKiBAcGFyYW0gcGFyYW1zIOivt+axguWPguaVsFxyXG4gICAqL1xyXG4gIHB1dCh1cmk6IHN0cmluZywgYm9keTogYW55LCBwYXJhbXM/OiBvYmplY3QsIG9wdGlvbnM/OiBhbnkpOiBPYnNlcnZhYmxlPGFueT4ge1xyXG4gICAgY29uc3Qgb3B0aW9uc1dpdGhCb2R5ID0gdGhpcy5hZGRCb2R5KG9wdGlvbnMsIGJvZHkpO1xyXG4gICAgcmV0dXJuIHRoaXMucmVxdWVzdCh1cmksICdQVVQnLCBwYXJhbXMsIG9wdGlvbnNXaXRoQm9keSk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDlj5HpgIFQVVTor7fmsYJcclxuICAgKiBAcGFyYW0gdXJpIOivt+axguWcsOWdgFxyXG4gICAqIEBwYXJhbSBwYXJhbXMg6K+35rGC5Y+C5pWwXHJcbiAgICovXHJcbiAgcG9zdCh1cmk6IHN0cmluZywgYm9keTogYW55LCBwYXJhbXM/OiBvYmplY3QsIG9wdGlvbnM/OiBhbnkpOiBPYnNlcnZhYmxlPGFueT4ge1xyXG4gICAgY29uc3Qgb3B0aW9uc1dpdGhCb2R5ID0gdGhpcy5hZGRCb2R5KG9wdGlvbnMsIGJvZHkpO1xyXG4gICAgcmV0dXJuIHRoaXMucmVxdWVzdCh1cmksICdQT1NUJywgcGFyYW1zLCBvcHRpb25zV2l0aEJvZHkpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog5Y+R6YCBREVMRVRF6K+35rGCXHJcbiAgICogQHBhcmFtIHVyaSDor7fmsYLlnLDlnYBcclxuICAgKiBAcGFyYW0gcGFyYW1zIOivt+axguWPguaVsFxyXG4gICAqL1xyXG4gIGRlbGV0ZSh1cmk6IHN0cmluZywgcGFyYW1zPzogb2JqZWN0LCBvcHRpb25zPzogYW55KTogT2JzZXJ2YWJsZTxhbnk+IHtcclxuICAgIHJldHVybiB0aGlzLnJlcXVlc3QodXJpLCAnREVMRVRFJywgcGFyYW1zLCBvcHRpb25zKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOWPkemAgeivt+axglxyXG4gICAqIEBwYXJhbSB1cmkg6K+35rGC5Zyw5Z2AXHJcbiAgICogQHBhcmFtIHBhcmFtcyDor7fmsYLlj4LmlbBcclxuICAgKi9cclxuICBwcml2YXRlIHJlcXVlc3QodXJpOiBzdHJpbmcsIG1ldGhvZDogUmVzdGZ1bE1ldGhvZCwgcGFyYW1zOiBvYmplY3QsIG9wdGlvbnM6IGFueSA9IHt9KTogT2JzZXJ2YWJsZTxhbnk+IHtcclxuICAgIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xyXG4gICAgaWYgKHBhcmFtcykge1xyXG4gICAgICBjb25zdCBodHRwUGFyYW1zID0gdGhpcy5idWlsZFBhcmFtcyhwYXJhbXMpO1xyXG4gICAgICBvcHRpb25zLnBhcmFtcyA9IGh0dHBQYXJhbXM7XHJcbiAgICB9XHJcbiAgICBjb25zdCBtZXRob2ROYW1lID0gbWV0aG9kIGFzIHN0cmluZztcclxuICAgIGNvbnN0IHJlc3VsdCA9IHRoaXMuaHR0cENsaWVudC5yZXF1ZXN0KG1ldGhvZE5hbWUsIHVyaSwgb3B0aW9ucyk7XHJcbiAgICByZXR1cm4gcmVzdWx0O1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog5p6E6YCgSHR0cOivt+axguWPguaVsFxyXG4gICAqIEBwYXJhbSBwYXJhbXMg6K+35rGC5Y+C5pWwXHJcbiAgICovXHJcbiAgcHJpdmF0ZSBidWlsZFBhcmFtcyhwYXJhbXM6IG9iamVjdCk6IEh0dHBQYXJhbXMge1xyXG4gICAgbGV0IGh0dHBQYXJhbXMgPSBuZXcgSHR0cFBhcmFtcygpO1xyXG4gICAgZm9yIChjb25zdCBrZXkgaW4gcGFyYW1zKSB7XHJcbiAgICAgIGlmIChwYXJhbXMuaGFzT3duUHJvcGVydHkoa2V5KSkge1xyXG4gICAgICAgIGNvbnN0IHZhbHVlID0gcGFyYW1zW2tleV0udG9TdHJpbmcoKTtcclxuICAgICAgICBodHRwUGFyYW1zID0gaHR0cFBhcmFtcy5hcHBlbmQoa2V5LCB2YWx1ZSk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiBodHRwUGFyYW1zO1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBhZGRCb2R5KG9wdGlvbnM6IGFueSwgYm9keTogYW55KSB7XHJcbiAgICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcclxuICAgIGNvbnN0IG1lcmdlZE9wdGlvbnMgPSBPYmplY3QuYXNzaWduKG9wdGlvbnMsIHsgYm9keTogYm9keX0pO1xyXG4gICAgcmV0dXJuIG1lcmdlZE9wdGlvbnM7XHJcbiAgfVxyXG59XHJcbiJdfQ==