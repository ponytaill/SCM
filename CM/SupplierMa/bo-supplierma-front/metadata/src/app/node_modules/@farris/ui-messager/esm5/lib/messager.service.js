/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*
 * @Author: 疯狂秀才(Lucas Huang)
 * @LastEditors: 疯狂秀才(Lucas Huang)
 * @Company: Inspur
 * @Version: v0.0.15
 * @Date: 2019-04-02 11:48:08
 * @LastEditTime: 2019-10-26 16:38:34
 */
import { Injectable, Injector, NgZone } from '@angular/core';
import { Subject, of } from 'rxjs';
import { BsModalService } from '@farris/ui-modal';
import { MessagerDefaultConfig, MESSAGER_DEFAULT_CONFIG } from './messager.config';
import { MessagerComponent } from './messager.component';
import { LocaleService } from '@farris/ui-locale';
var MessagerService = /** @class */ (function () {
    function MessagerService(bsModalService, injector) {
        this.bsModalService = bsModalService;
        this.injector = injector;
        this.version = '0.0.15';
        this.currentId = -1;
        this.modals = [];
        this.defaultMessagerConfig = null;
        /** @type {?} */
        var config = this.injector.get(MESSAGER_DEFAULT_CONFIG) || MessagerDefaultConfig;
        this.defaultMessagerConfig = Object.assign({}, MessagerDefaultConfig, config);
        this.ngZone = this.injector.get(NgZone);
        this.localeService = this.injector.get(LocaleService);
    }
    Object.defineProperty(MessagerService.prototype, "okText", {
        get: /**
         * @return {?}
         */
        function () {
            return this.localeService.getValue('messager.ok');
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MessagerService.prototype, "cancelText", {
        get: /**
         * @return {?}
         */
        function () {
            return this.localeService.getValue('messager.cancel');
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MessagerService.prototype, "yesText", {
        get: /**
         * @return {?}
         */
        function () {
            return this.localeService.getValue('messager.yes');
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MessagerService.prototype, "noText", {
        get: /**
         * @return {?}
         */
        function () {
            return this.localeService.getValue('messager.no');
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MessagerService.prototype, "titleText", {
        get: /**
         * @return {?}
         */
        function () {
            return this.localeService.getValue('messager.title');
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MessagerService.prototype, "errorTitle", {
        get: /**
         * @return {?}
         */
        function () {
            return this.localeService.getValue('messager.errorTitle');
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} str
     * @return {?}
     */
    MessagerService.prototype.escapeHtml = /**
     * @param {?} str
     * @return {?}
     */
    function (str) {
        if (str === null || str === undefined) {
            return '';
        }
        return str
            .replace(/&/g, '&amp;')
            .replace(/</g, '&lt;')
            .replace(/>/g, '&gt;')
            .replace(/\"/g, '&quot;')
            .replace(/\'/g, '&#39;')
            .replace(/\//g, '&#x2F;');
    };
    /**
     * 显示信息提示框
     * @param msgtype 消息类别
     * @param message 提示消息一
     * @param opts 参数 提供属性 fitContent:true支持自动适应宽度
     * @param submsg 提示消息二级
     */
    /**
     * 显示信息提示框
     * @param {?} msgtype 消息类别
     * @param {?} message 提示消息一
     * @param {?=} opts 参数 提供属性 fitContent:true支持自动适应宽度
     * @param {?=} submsg 提示消息二级
     * @return {?}
     */
    MessagerService.prototype.show = /**
     * 显示信息提示框
     * @param {?} msgtype 消息类别
     * @param {?} message 提示消息一
     * @param {?=} opts 参数 提供属性 fitContent:true支持自动适应宽度
     * @param {?=} submsg 提示消息二级
     * @return {?}
     */
    function (msgtype, message, opts, submsg) {
        var _this = this;
        if (submsg === void 0) { submsg = ''; }
        if (document.activeElement) {
            ((/** @type {?} */ (document.activeElement))).blur();
        }
        /** @type {?} */
        var modalHeight = 180;
        /** @type {?} */
        var defaultOpts = {
            safeHtml: true,
            title: this.titleText,
            width: 390,
            height: modalHeight,
            showButtons: false,
            showMaxButton: false,
            resizable: false,
            initialState: {
                okText: this.okText,
                okHandle: (/**
                 * @return {?}
                 */
                function () {
                    _this.close();
                })
            },
            class: 'modal-message ' + (msgtype ? 'modal-message-type-' + msgtype : ''),
            showHeader: false,
        };
        defaultOpts = Object.assign({}, this.defaultMessagerConfig, defaultOpts);
        /** @type {?} */
        var extendOpts = {};
        switch (msgtype) {
            case 'prompt':
                // 弹出对话类型
                extendOpts = { showHeader: true, modalHeight: 260 };
                break;
            case 'error':
                // 错误
                extendOpts = { title: this.errorTitle, width: 446, showHeader: true, showMaxButton: true, fitContent: true };
                break;
            case 'exception':
                extendOpts = { safeHtml: false, title: this.errorTitle, width: 446, showHeader: true, fitContent: true };
                break;
            default:
                // 默认其他
                extendOpts = { width: submsg ? 446 : 390, fitContent: true };
        }
        Object.assign(defaultOpts, extendOpts);
        if (opts) {
            Object.assign(defaultOpts, opts);
        }
        if (message && defaultOpts.safeHtml) {
            message = this.escapeHtml(message);
        }
        Object.assign(defaultOpts.initialState, {
            type: msgtype,
            message: message,
            msg: submsg,
            exception: opts && opts['exception'] ? opts['exception'] : null,
            showLines: opts && opts['showLines'] ? opts['showLines'] : 3,
            readonly: opts && opts['readonly'] ? opts['readonly'] : false
        });
        if (defaultOpts['buttons'] && defaultOpts['buttons'].length) {
            if (!defaultOpts.initialState['buttons'] || !defaultOpts.initialState['buttons'].length) {
                defaultOpts.initialState['buttons'] = defaultOpts['buttons'];
            }
        }
        /** @type {?} */
        var _modal = this.bsModalService.show(MessagerComponent, defaultOpts);
        // _modal.content.buttons = defaultOpts['buttons'] || [];
        this.confirmSubject = new Subject();
        if (this.modals.length > 0) {
            /** @type {?} */
            var modalContainerComponent = _modal.dialog;
            modalContainerComponent.instance.isShown = true;
            modalContainerComponent.instance.moveTo(15 * this.modals.length, 15 * this.modals.length);
        }
        this.ngZone.runOutsideAngular((/**
         * @return {?}
         */
        function () {
            // 第1个按钮获取焦点
            setTimeout((/**
             * @return {?}
             */
            function () {
                /** @type {?} */
                var btnOk = _modal.content.btnOkEl ? _modal.content.btnOkEl.nativeElement : null;
                if (btnOk) {
                    btnOk['focus']();
                }
                else {
                    /** @type {?} */
                    var btns = _modal.dialog.location.nativeElement.querySelectorAll('.modal-footer button');
                    if (btns.length) {
                        btns.item(0)['focus']();
                    }
                }
            }));
        }));
        this.msgMgr(_modal);
        return _modal;
    };
    /**
     * @private
     * @param {?} ref
     * @return {?}
     */
    MessagerService.prototype.msgMgr = /**
     * @private
     * @param {?} ref
     * @return {?}
     */
    function (ref) {
        var _this = this;
        /** @type {?} */
        var id = this.bsModalService.getModalsCount() + 1000;
        if (this.modals.length === 0) {
            this.modals.push({ id: id, ref: ref });
        }
        else {
            if (!this.getModalById(id)) {
                this.modals.push({ id: id, ref: ref });
            }
            else {
                this.getModalById(id).ref = ref;
            }
        }
        /** @type {?} */
        var cmp = this.getModalCmp();
        cmp.closed.subscribe((/**
         * @param {?} level
         * @return {?}
         */
        function (level) {
            _this.removeMessager(id);
            _this.confirmSubject.unsubscribe();
        }));
        this.currentId = id;
    };
    /**
     * @param {?} message
     * @param {?} okCallback
     * @param {?=} cancelCallback
     * @param {?=} msg
     * @param {?=} fitContent
     * @return {?}
     */
    MessagerService.prototype.question = /**
     * @param {?} message
     * @param {?} okCallback
     * @param {?=} cancelCallback
     * @param {?=} msg
     * @param {?=} fitContent
     * @return {?}
     */
    function (message, okCallback, cancelCallback, msg, fitContent) {
        if (fitContent === void 0) { fitContent = true; }
        /** @type {?} */
        var questionDlg = this.show('question', message, {
            initialState: {
                okText: this.yesText,
                okHandle: (/**
                 * @return {?}
                 */
                function () {
                    questionDlg.close();
                    if (okCallback) {
                        okCallback();
                    }
                }),
                cancelText: this.noText,
                cancelHandle: (/**
                 * @return {?}
                 */
                function () {
                    questionDlg.close();
                    if (cancelCallback) {
                        cancelCallback();
                    }
                })
            },
            fitContent: fitContent
        }, msg);
        return questionDlg;
    };
    /**
     * @param {?} messager
     * @param {?} btns
     * @param {?=} msg
     * @param {?=} fitContent
     * @return {?}
     */
    MessagerService.prototype.question2 = /**
     * @param {?} messager
     * @param {?} btns
     * @param {?=} msg
     * @param {?=} fitContent
     * @return {?}
     */
    function (messager, btns, msg, fitContent) {
        if (fitContent === void 0) { fitContent = true; }
        return this.show('question', messager, {
            initialState: {
                buttons: btns
            },
            fitContent: fitContent
        }, msg);
    };
    /**
     * 2020年3月7日因为textarea高度在不同浏览器下不一样，固定高度可能会出现滚动条
     * @param title 标题
     * @param msg 信息
     * @param fitContent 自适应内容
     */
    /**
     * 2020年3月7日因为textarea高度在不同浏览器下不一样，固定高度可能会出现滚动条
     * @param {?} title 标题
     * @param {?=} msg 信息
     * @param {?=} fitContent 自适应内容
     * @return {?}
     */
    MessagerService.prototype.prompt = /**
     * 2020年3月7日因为textarea高度在不同浏览器下不一样，固定高度可能会出现滚动条
     * @param {?} title 标题
     * @param {?=} msg 信息
     * @param {?=} fitContent 自适应内容
     * @return {?}
     */
    function (title, msg, fitContent) {
        if (fitContent === void 0) { fitContent = true; }
        /** @type {?} */
        var promptSubject = new Subject();
        /** @type {?} */
        var dlg = this.show('prompt', msg, {
            title: title,
            initialState: {
                okText: this.okText,
                okHandle: (/**
                 * @return {?}
                 */
                function () {
                    /** @type {?} */
                    var mc = (/** @type {?} */ (dlg.content));
                    dlg.close();
                    promptSubject.next(mc.promptText.nativeElement.value);
                }),
                cancelText: this.cancelText,
                cancelHandle: (/**
                 * @return {?}
                 */
                function () {
                    dlg.close();
                    promptSubject.next(false);
                })
            },
            fitContent: fitContent,
            closed: (/**
             * @return {?}
             */
            function () {
                promptSubject.unsubscribe();
            })
        }, msg);
        return promptSubject;
    };
    /**
     * @param {?} title
     * @param {?=} msg
     * @param {?=} opts
     * @return {?}
     */
    MessagerService.prototype.prompt2 = /**
     * @param {?} title
     * @param {?=} msg
     * @param {?=} opts
     * @return {?}
     */
    function (title, msg, opts) {
        var _this = this;
        /** @type {?} */
        var promptSubject = new Subject();
        /** @type {?} */
        var _opts = {
            showOkButton: true,
            showCloseButton: true,
            showFontSize: false,
            fontSize: 18,
            readonly: false,
            saveSize: false,
            closeWhenever: true
        };
        if (!opts) {
            opts = _opts;
        }
        else {
            opts = Object.assign(_opts, opts);
        }
        /** @type {?} */
        var _dialogOpts = {
            title: title,
            initialState: {
                showOkButton: opts.showOkButton === undefined ? true : opts.showOkButton,
                showCancelButton: opts.showCancelButton === undefined ? true : opts.showCancelButton,
                okText: this.okText,
                okHandle: (/**
                 * @return {?}
                 */
                function () {
                    /** @type {?} */
                    var mc = (/** @type {?} */ (dlg.content));
                    /** @type {?} */
                    var val = mc.promptText.nativeElement.value;
                    if (opts.closeWhenever) {
                        dlg.close();
                        promptSubject.next(val);
                    }
                    else {
                        promptSubject.next({ val: val, dlg: dlg });
                    }
                }),
                cancelText: this.cancelText,
                cancelHandle: (/**
                 * @return {?}
                 */
                function () {
                    dlg.close();
                    promptSubject.next(false);
                }),
                showFontSize: opts.showFontSize,
                fontSize: opts.fontSize || 18,
                enableWordCount: !!opts.enableWordCount,
                countType: opts.countType || 'length',
                maxLength: opts.maxLength,
                inputType: opts.inputType || 'textarea',
                placeholder: opts.placeholder || ''
            },
            fitContent: false,
            showMaxButton: true,
            resizable: true,
            class: '',
            closed: (/**
             * @return {?}
             */
            function () {
                promptSubject.unsubscribe();
            }),
            opened: (/**
             * @return {?}
             */
            function () {
                if (opts.inputType !== 'textarea') {
                    return;
                }
                else {
                    setTimeout((/**
                     * @return {?}
                     */
                    function () {
                        /** @type {?} */
                        var textareaEle = dlg.content.promptText.nativeElement;
                        textareaEle.closest('section').style.padding = '15px';
                        textareaEle.style.resize = 'none';
                        textareaEle.style.height = '100%';
                        if (opts.readonly) {
                            textareaEle.readOnly = true;
                        }
                    }));
                }
            }),
            beforeClose: (/**
             * @param {?} modalRef
             * @return {?}
             */
            function (modalRef) {
                if (opts.saveSize && !dlg.dialog.instance.isMax) {
                    /** @type {?} */
                    var data = { fontSize: dlg.content.fontSize, width: modalRef.config.width, height: modalRef.config.height };
                    _this.saveTextAreaSizeInfo(data);
                }
                return of(true);
            })
        };
        /** @type {?} */
        var dialogOpts = _dialogOpts;
        if (opts) {
            dialogOpts = Object.assign(dialogOpts, opts);
        }
        /** @type {?} */
        var dlg = this.show('prompt', msg, dialogOpts, msg);
        if (opts.inputType && dlg.content.promptText) {
            dlg.content.promptText.nativeElement.focus();
        }
        return promptSubject;
    };
    /**
     * @return {?}
     */
    MessagerService.prototype.getKeyString = /**
     * @return {?}
     */
    function () {
        // 一台终端共用一个配置
        // 保留最后一次的设置，
        // 保存窗口大小，字体大小
        return 'IGIX-FARRIS-UI-TEXTAREA-ZOOM-SETTINGS';
    };
    /**
     * @private
     * @param {?} data
     * @return {?}
     */
    MessagerService.prototype.saveTextAreaSizeInfo = /**
     * @private
     * @param {?} data
     * @return {?}
     */
    function (data) {
        if (window.localStorage) {
            /** @type {?} */
            var key = this.getKeyString();
            localStorage.setItem(key, JSON.stringify(data));
        }
    };
    /**
     * @param {?} message
     * @param {?=} msg
     * @param {?=} fitContent
     * @return {?}
     */
    MessagerService.prototype.confirm = /**
     * @param {?} message
     * @param {?=} msg
     * @param {?=} fitContent
     * @return {?}
     */
    function (message, msg, fitContent) {
        if (fitContent === void 0) { fitContent = true; }
        /** @type {?} */
        var confirmSubject = new Subject();
        /** @type {?} */
        var confirmDlg = this.show('question', message, {
            initialState: {
                okText: this.okText,
                okHandle: (/**
                 * @return {?}
                 */
                function () {
                    confirmDlg.close();
                    confirmSubject.next(true);
                }),
                cancelText: this.cancelText,
                cancelHandle: (/**
                 * @return {?}
                 */
                function () {
                    confirmDlg.close();
                    confirmSubject.next(false);
                })
            },
            fitContent: fitContent,
            closed: (/**
             * @return {?}
             */
            function () {
                confirmSubject.unsubscribe();
            })
        }, msg);
        return confirmSubject.asObservable();
    };
    /**
     * @param {?} message
     * @param {?=} callback
     * @param {?=} msg
     * @param {?=} fitContent
     * @return {?}
     */
    MessagerService.prototype.info = /**
     * @param {?} message
     * @param {?=} callback
     * @param {?=} msg
     * @param {?=} fitContent
     * @return {?}
     */
    function (message, callback, msg, fitContent) {
        if (fitContent === void 0) { fitContent = true; }
        /** @type {?} */
        var infoDlg = this.show('info', message, {
            initialState: {
                okText: this.okText,
                okHandle: (/**
                 * @return {?}
                 */
                function () {
                    infoDlg.close();
                    if (callback) {
                        callback();
                    }
                })
            },
            fitContent: fitContent
        }, msg);
        return infoDlg;
    };
    /** 操作成功提示，
     * message: 提示信息
     * msg: 2级信息
     * fitCountent: 默认为true
     * callback: 确定事件回调
     */
    /**
     * 操作成功提示，
     * message: 提示信息
     * msg: 2级信息
     * fitCountent: 默认为true
     * callback: 确定事件回调
     * @param {?} message
     * @param {?=} msg
     * @param {?=} fitContent
     * @param {?=} callback
     * @return {?}
     */
    MessagerService.prototype.success = /**
     * 操作成功提示，
     * message: 提示信息
     * msg: 2级信息
     * fitCountent: 默认为true
     * callback: 确定事件回调
     * @param {?} message
     * @param {?=} msg
     * @param {?=} fitContent
     * @param {?=} callback
     * @return {?}
     */
    function (message, msg, fitContent, callback) {
        if (fitContent === void 0) { fitContent = true; }
        if (callback === void 0) { callback = null; }
        /** @type {?} */
        var successDlg = this.show('success', message, {
            initialState: {
                okText: this.okText,
                okHandle: (/**
                 * @return {?}
                 */
                function () {
                    successDlg.close();
                    if (callback) {
                        callback();
                    }
                })
            },
            fitContent: fitContent
        }, msg);
        return successDlg;
    };
    /** 提示错误信息，
     * message: 提示信息
     * msg: 2级信息
     * fitCountent: 默认为true
     * callback: 确定事件回调
     */
    /**
     * 提示错误信息，
     * message: 提示信息
     * msg: 2级信息
     * fitCountent: 默认为true
     * callback: 确定事件回调
     * @param {?} message
     * @param {?=} msg
     * @param {?=} fitContent
     * @param {?=} callback
     * @param {?=} safeHtml
     * @return {?}
     */
    MessagerService.prototype.error = /**
     * 提示错误信息，
     * message: 提示信息
     * msg: 2级信息
     * fitCountent: 默认为true
     * callback: 确定事件回调
     * @param {?} message
     * @param {?=} msg
     * @param {?=} fitContent
     * @param {?=} callback
     * @param {?=} safeHtml
     * @return {?}
     */
    function (message, msg, fitContent, callback, safeHtml) {
        if (fitContent === void 0) { fitContent = true; }
        if (callback === void 0) { callback = null; }
        if (safeHtml === void 0) { safeHtml = true; }
        /** @type {?} */
        var errorDlg = this.show('error', message, {
            safeHtml: safeHtml,
            initialState: {
                okText: this.okText,
                okHandle: (/**
                 * @return {?}
                 */
                function () {
                    errorDlg.close();
                    if (callback) {
                        callback();
                    }
                })
            },
            fitContent: fitContent
        }, msg);
        return errorDlg;
    };
    /**
     * @param {?} message
     * @param {?=} msg
     * @param {?=} fitContent
     * @param {?=} callback
     * @return {?}
     */
    MessagerService.prototype.warning = /**
     * @param {?} message
     * @param {?=} msg
     * @param {?=} fitContent
     * @param {?=} callback
     * @return {?}
     */
    function (message, msg, fitContent, callback) {
        if (fitContent === void 0) { fitContent = true; }
        if (callback === void 0) { callback = null; }
        /** @type {?} */
        var warningDlg = this.show('warning', message, {
            initialState: {
                okText: this.okText,
                okHandle: (/**
                 * @return {?}
                 */
                function () {
                    warningDlg.close();
                    if (callback) {
                        callback();
                    }
                })
            },
            fitContent: fitContent
        }, msg);
        return warningDlg;
    };
    /**
     * @param {?} type
     * @param {?} title
     * @param {?=} message
     * @param {?=} callback
     * @return {?}
     */
    MessagerService.prototype.showHtmlMsg = /**
     * @param {?} type
     * @param {?} title
     * @param {?=} message
     * @param {?=} callback
     * @return {?}
     */
    function (type, title, message, callback) {
        if (callback === void 0) { callback = null; }
        /** @type {?} */
        var msgDlg = this.show(type, title, {
            safeHtml: false,
            initialState: {
                okText: this.okText,
                okHandle: (/**
                 * @return {?}
                 */
                function () {
                    msgDlg.close();
                    if (callback) {
                        callback();
                    }
                })
            },
            fitContent: true
        }, message);
        return msgDlg;
    };
    /**
     * @private
     * @return {?}
     */
    MessagerService.prototype.close = /**
     * @private
     * @return {?}
     */
    function () {
        if (this.modals.length) {
            /** @type {?} */
            var msgbox = this.getModalById(this.currentId);
            if (msgbox) {
                msgbox.ref.close();
            }
        }
    };
    /**
     * @private
     * @param {?} id
     * @return {?}
     */
    MessagerService.prototype.getModalById = /**
     * @private
     * @param {?} id
     * @return {?}
     */
    function (id) {
        return this.modals.find((/**
         * @param {?} item
         * @return {?}
         */
        function (item) { return item.id === id; }));
    };
    /**
     * @private
     * @return {?}
     */
    MessagerService.prototype.getModalCmp = /**
     * @private
     * @return {?}
     */
    function () {
        return this.bsModalService.getCurrentModalContainer().instance;
    };
    /**
     * @private
     * @param {?} id
     * @return {?}
     */
    MessagerService.prototype.removeMessager = /**
     * @private
     * @param {?} id
     * @return {?}
     */
    function (id) {
        this.modals = this.modals.filter((/**
         * @param {?} n
         * @return {?}
         */
        function (n) { return n.id !== id; }));
        if (!this.modals.length) {
            this.currentId = -1;
        }
        else {
            this.currentId = this.modals[this.modals.length - 1].id;
        }
    };
    MessagerService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    MessagerService.ctorParameters = function () { return [
        { type: BsModalService },
        { type: Injector }
    ]; };
    return MessagerService;
}());
export { MessagerService };
if (false) {
    /** @type {?} */
    MessagerService.prototype.version;
    /** @type {?} */
    MessagerService.prototype.currentId;
    /** @type {?} */
    MessagerService.prototype.modals;
    /**
     * @type {?}
     * @private
     */
    MessagerService.prototype.defaultMessagerConfig;
    /**
     * @type {?}
     * @private
     */
    MessagerService.prototype.confirmSubject;
    /**
     * @type {?}
     * @private
     */
    MessagerService.prototype.ngZone;
    /**
     * @type {?}
     * @private
     */
    MessagerService.prototype.localeService;
    /**
     * @type {?}
     * @private
     */
    MessagerService.prototype.bsModalService;
    /**
     * @type {?}
     * @private
     */
    MessagerService.prototype.injector;
}
//# sourceMappingURL=data:application/json;base64,