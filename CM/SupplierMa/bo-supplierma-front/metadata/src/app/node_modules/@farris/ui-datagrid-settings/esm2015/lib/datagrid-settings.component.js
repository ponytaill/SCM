/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, ViewEncapsulation, ViewChild, ElementRef, Input, EventEmitter, ChangeDetectorRef, Injector, Output } from '@angular/core';
import { LocaleService } from '@farris/ui-locale';
import { MessagerService } from '@farris/ui-messager';
export class DatagridSettingsComponent {
    /**
     * @param {?} cd
     * @param {?} inject
     */
    constructor(cd, inject) {
        this.cd = cd;
        this.inject = inject;
        this.activeTabIndex = 1;
        /**
         * 排序列数据
         */
        this.sortTreeData = [];
        this.sortNames = [];
        this.sortInfo = {};
        /**
         * 显示列数据
         */
        this.viewTreeData = [];
        this.viewColumns = [];
        this.columnFormat = [];
        this.groupField = [];
        this.canSetColumnSort = true;
        this.canSetColumnVisible = true;
        this.enableReset = false;
        this.cancelHandle = new EventEmitter();
        this.submitHandle = new EventEmitter();
        this.reset = new EventEmitter();
        this.concise = new EventEmitter();
        this.schemeInfo = null;
        this.searchItems = [];
        this.alignItems = [];
        this.summaryItems = [];
        this.summaryItems2 = [];
        this.messager = this.inject.get(MessagerService, null);
        this.localeSer = this.inject.get(LocaleService);
        this.searchItems = [
            { value: 'all', title: this.localeSer.getValue('datagrid.settings.allColumns') },
            { value: 'visible', title: this.localeSer.getValue('datagrid.settings.visibleColumns') },
            { value: 'hidden', title: this.localeSer.getValue('datagrid.settings.hiddenColumns') }
        ];
        this.alignItems = [
            { value: 'left', title: this.localeSer.getValue('datagrid.settings.alignLeft') },
            { value: 'center', title: this.localeSer.getValue('datagrid.settings.alignCenter') },
            { value: 'right', title: this.localeSer.getValue('datagrid.settings.alignRight') },
        ];
        this.summaryItems = [
            { value: -1, title: this.localeSer.getValue('datagrid.settings.summaryNone') },
            { value: 2, title: this.localeSer.getValue('datagrid.settings.summarySum') },
            { value: 0, title: this.localeSer.getValue('datagrid.settings.summaryMax') },
            { value: 1, title: this.localeSer.getValue('datagrid.settings.summaryMin') },
            { value: 3, title: this.localeSer.getValue('datagrid.settings.summaryAverage') },
            { value: 4, title: this.localeSer.getValue('datagrid.settings.summarCount') },
        ];
        this.summaryItems2 = [
            { value: -1, title: this.localeSer.getValue('datagrid.settings.summaryNone') },
            { value: 4, title: this.localeSer.getValue('datagrid.settings.summarCount') },
        ];
    }
    /**
     * @private
     * @return {?}
     */
    initData() {
        this.sortNames = this.gridInstance.sortName ? this.gridInstance.sortName.split(',') : [];
        this.viewColumns = this.getViewColumns();
        this.sortInfo = this.gridInstance['__sortInfo'] || {};
        this.columnFormat = [...this.columns[0]];
        this.groupField = this.gridInstance.groupField ? this.gridInstance.groupField.split(',') : [];
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        if (!this.gridInstance.enableScheme) {
            this.initData();
        }
        else {
            if (this.schemeInfo) {
                this.sortInfo = this.schemeInfo.sortInfo || {};
                if (this.sortInfo) {
                    this.sortNames = this.sortInfo.sortName || '';
                }
                this.viewColumns = this.schemeInfo.viewColumns;
                this.columnFormat = this.schemeInfo.columnFormat;
                if (!this.columnFormat) {
                    this.columnFormat = [...this.columns[0]];
                }
                if (this.schemeInfo.groupField) {
                    if (typeof this.schemeInfo.groupField === 'string') {
                        this.groupField = ((/** @type {?} */ (this.schemeInfo.groupField))).split(',');
                    }
                    else {
                        this.groupField = this.schemeInfo.groupField || [];
                    }
                }
                else {
                    this.groupField = [];
                }
                return;
            }
            this.initData();
        }
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        if (changes.columns && !changes.columns.isFirstChange()) {
            // console.log(this.columns);
        }
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    close($event) {
        $event.stopPropagation();
        if (this.modalRef) {
            this.modalRef.close();
        }
    }
    /**
     * @param {?} $event
     * @param {?} idx
     * @return {?}
     */
    changeTabs($event, idx) {
        $event.stopPropagation();
        this.activeTabIndex = idx;
    }
    /**
     * @param {?} sortInfo
     * @return {?}
     */
    onSortInfoChange(sortInfo) {
        this.sortInfo = sortInfo;
    }
    /**
     * @private
     * @return {?}
     */
    getViewColumns() {
        // 多表头
        /** @type {?} */
        let visibleCls = [];
        if (this.columns.length > 1) {
            this.columns.forEach((/**
             * @param {?} cols
             * @return {?}
             */
            cols => {
                visibleCls = visibleCls.concat(this._getViewColumns(cols));
            }));
        }
        else {
            visibleCls = this.columns[0].filter((/**
             * @param {?} n
             * @return {?}
             */
            n => (n.visible || n.visible === undefined)));
        }
        return visibleCls.map((/**
         * @param {?} n
         * @return {?}
         */
        n => n.field));
    }
    /**
     * @private
     * @param {?} cols
     * @return {?}
     */
    _getViewColumns(cols) {
        return cols.filter((/**
         * @param {?} c
         * @return {?}
         */
        c => !c.colspan && (c.visible || c.visible === undefined)));
    }
    /**
     * @private
     * @return {?}
     */
    mergeColumnFormats() {
        if (this.sortInfo && Object.keys(this.sortInfo).length && this.columnFormat && this.columnFormat.length) {
            const { sortName, sortOrder } = this.sortInfo;
            if (sortName && sortName.length) {
                sortName.forEach((/**
                 * @param {?} n
                 * @param {?} i
                 * @return {?}
                 */
                (n, i) => {
                    /** @type {?} */
                    const col = this.columnFormat.find((/**
                     * @param {?} col
                     * @return {?}
                     */
                    (col) => {
                        return col.field === n;
                    }));
                    if (col) {
                        col.sortable = true;
                        col.order = sortOrder[i] || 'asc';
                    }
                }));
            }
        }
    }
    /**
     * @param {?} colFormatData
     * @return {?}
     */
    onColumnFormatChange(colFormatData) {
        this.columnFormat = colFormatData;
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    onSubmitClick($event) {
        this.mergeColumnFormats();
        this.submitHandle.emit($event);
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    onCancelClick($event) {
        this.cancelHandle.emit($event);
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    onSettingReset($event) {
        // this.reset.emit($event);
        /** @type {?} */
        const restorDefaultText = this.localeSer.getValue('datagrid.settings.restoreDefaultSettingsText') || '确认要恢复默认设置吗？';
        this.messager.confirm(restorDefaultText).subscribe((/**
         * @param {?} t
         * @return {?}
         */
        (t) => {
            if (t) {
                this.reset2Default();
            }
        }));
    }
    /**
     * @private
     * @return {?}
     */
    reset2Default() {
        /** @type {?} */
        const options = this.gridInstance.dfs['_state'].initialOptions;
        if (options.columnFields && options.columnFields.length) {
            /** @type {?} */
            const newColumns = [];
            options.columnFields.forEach((/**
             * @param {?} c
             * @return {?}
             */
            c => {
                if (c.field !== '_datagrid-setting-control_') {
                    /** @type {?} */
                    const col = this.gridInstance.columns[0].find((/**
                     * @param {?} n
                     * @return {?}
                     */
                    (n) => n.field === c.field));
                    if (col) {
                        col.visible = c.visible;
                        col.halign = c.halign;
                        col.align = c.align;
                        col.width = c.width;
                        col.footer = Object.assign({}, c.footer || {});
                        col.groupFooter = Object.assign({}, c.groupFooter || {});
                        newColumns.push(col);
                    }
                }
            }));
            this.columns = [newColumns];
        }
        this.viewColumns = this.getViewColumns();
        if (options.sort) {
            /** @type {?} */
            const sortOrders = options.sort.sortOrder ? options.sort.sortOrder.split(',') : [];
            this.sortNames = options.sort.sortName ? options.sort.sortName.split(',') : [];
            this.sortInfo = { sortName: this.sortNames, sortOrder: sortOrders };
        }
        else {
            this.sortNames = [];
            this.sortInfo = {};
        }
        this.columnFormat = [...this.columns[0]];
        this.groupField = options.groupField ? options.groupField.split(',') : [];
    }
    /**
     * 显示简洁模式窗口
     * @param {?} $event
     * @return {?}
     */
    showConcise($event) {
        if ($event) {
            $event.stopPropagation();
        }
        this.mergeColumnFormats();
        this.concise.emit();
    }
}
DatagridSettingsComponent.decorators = [
    { type: Component, args: [{
                selector: 'datagrid-settings',
                template: "<div class=\"f-datagrid-settings d-flex flex-column\" style=\"height: 100%;\">\r\n\r\n    <div class=\"d-flex justify-content-between header\" #header>\r\n        <div class=\"title\">{{'datagrid.settings.title' | locale}}</div>\r\n\r\n        <div style=\"width: 100%;\" class=\"tabs\">\r\n            <div class=\"d-flex justify-content-center\">\r\n                <div class=\"d-flex tabs-labels\" (mousedown)=\"$event.stopPropagation()\">\r\n                    <div class=\"navitem\" [class.active]=\"activeTabIndex === 1\" (click)=\"changeTabs($event, 1)\"\r\n                        style=\"border: 0;\">\r\n                        <span style=\"padding: 0 14px;display: block;\">\r\n                            {{'datagrid.settings.visible' | locale}}\r\n                        </span>\r\n                    </div>\r\n                    <div class=\"navitem\" *ngIf=\"canSetColumnSort\" [class.active]=\"activeTabIndex === 2 && canSetColumnSort\" (click)=\"changeTabs($event, 2)\" style=\"border: 0;\">\r\n                        <span style=\"padding: 0 14px;display: block;\">\r\n                            {{'datagrid.settings.sortting' | locale}}\r\n                        </span>\r\n                    </div>\r\n                    <div class=\"navitem\" *ngIf=\"gridInstance?.groupRows\"\r\n                        [class.active]=\"activeTabIndex === 3\" (click)=\"changeTabs($event, 3)\" style=\"border: 0;\">\r\n                        <span style=\"padding: 0 14px; display: block;\">\r\n                            {{'datagrid.settings.groupping' | locale}}\r\n                        </span>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n\r\n        <div class=\"close\">\r\n            <span class=\"f-icon modal_close\" (click)=\"close($event)\"></span>\r\n        </div>\r\n    </div>\r\n\r\n    <div class=\"f-utils-fill tabs-container\" [ngSwitch]=\"activeTabIndex\" >\r\n        <ng-container *ngSwitchCase=\"1\">\r\n            <column-format-setting [(fields)]=\"viewColumns\" [columns]=\"columns\"\r\n                (formatChange)=\"onColumnFormatChange($event)\"></column-format-setting>\r\n        </ng-container>\r\n        <ng-container *ngSwitchCase=\"2\">\r\n            <sort-setting [treeData]=\"sortTreeData\" [selectedIds]=\"sortNames\"\r\n                (sortInfoChange)=\"onSortInfoChange($event)\"></sort-setting>\r\n        </ng-container>\r\n\r\n        <ng-container *ngSwitchCase=\"3\">\r\n            <column-group-setting [(groupFields)]=\"groupField\" [fields]=\"viewColumns\" [columns]=\"columns\"\r\n                [(formatColumns)]=\"columnFormat\"></column-group-setting>\r\n        </ng-container>\r\n    </div>\r\n\r\n    <div class=\"buttons\">\r\n        <button class=\"btn btn-link\" (click)=\"showConcise($event)\" *ngIf=\"gridInstance.enableSimpleMode\"\r\n            style=\"width: 66px;height: 32px; float: left;\">{{ 'datagrid.settings.conciseMode' | locale: '\u7B80\u6D01\u6A21\u5F0F' }}</button>\r\n        <button class=\"btn btn-link reset\" (click)=\"onSettingReset($event)\"\r\n            *ngIf=\"enableReset\">{{ 'datagrid.settings.reset' | locale: '\u6062\u590D\u9ED8\u8BA4' }}</button>\r\n        <button class=\"btn btn-secondary cancel\"\r\n            (click)=\"onCancelClick($event)\">{{'datagrid.settings.cancel' | locale}}</button>\r\n        <button class=\"btn btn-primary ok\"\r\n            (click)=\"onSubmitClick($event)\">{{'datagrid.settings.ok' | locale}}</button>\r\n    </div>\r\n\r\n</div>",
                encapsulation: ViewEncapsulation.None,
                styles: [`

        .f-datagrid-settings .header {
            position:relative;width:100%; height: 56px;padding: 0 24px;border:0px
        }

        .f-datagrid-settings .header .title {
            display: block; white-space: nowrap; font-size: 17px; line-height: 56px;
        }
        .f-datagrid-settings .header .tabs {
            height: 32px;
            top: 12px; font-size: 14px;
            position: relative;
            line-height: 32px;
        }
        .f-datagrid-settings .header .tabs .tabs-labels {
            background: #EFF5FF;border-radius: 17px;color:#6080AD
        }

        .f-datagrid-settings .header .tabs .tabs-labels .navitem.active {
            line-height: 28px;
            margin: 2px;
            height: 28px;
            background: rgb(246 250 255);
            border-radius: 15px;
            box-shadow: 0 4px 18px 0 rgb(2 75 193 / 20%)
        }
        .f-datagrid-settings .header .close {
            line-height: 56px;padding: 0;width: 20px
        }
        .f-datagrid-settings .tabs-container {
            height: 100%;overflow: hidden; position: relative; margin: 0 24px; border: 1px solid #DEE1EA; border-radius: 8px;
        }
        .f-datagrid-settings .buttons
        {
            height: 66px;text-align: right;padding: 14px 24px 20px 24px;
        }

        .f-datagrid-settings .buttons button {
            width: 66px;height: 32px;
        }
        .f-datagrid-settings .buttons .cancel {
            margin-left: 12px;margin-right: 8px;
        }
        .f-datagrid-settings .buttons .ok {
            width: 100px;
        }

        .f-datagrid-settings .dg-column-format-setting>div{
            width: 360px; min-width:260px;overflow: hidden;background:#ffffff;padding: 10px 5px 10px 8px;border-right: 1px solid #DEE1EA
        }

        .f-datagrid-settings .dg-column-format-setting .checkbox, .format-setting-column .checkbox{
            margin-right: 5px; font-size: 14px;color: #0089FF;
        }

        .f-datagrid-settings  .column-group-setting .title{
            height: 36px; line-height: 36px; color: #59a1ff
        }

        .f-datagrid-settings  .column-group-setting .all-fields {
            background-color:#fff;padding-top: 0px!important;
        }

        .f-datagrid-settings  .column-group-setting .group-sum-fields {
            height: 36px; line-height: 36px; border-top: 1px solid #e4e7ef; color: #59a1ff
        }


        .smooth-dnd-ghost.format-setting-column {
            border: 1px solid #2a87ff;
            z-index: 999999999 !important;
            background-color: #e7f1ff;;
            padding: 4px 8px;
            color: rgb(0 0 0);
        }

        .smooth-dnd-ghost.format-setting-column .field-drag-handle {
            float: right;
        }

        .dg-column-format-setting  .smooth-dnd-drop-preview-constant-class {
            background-color: #dee1ea;
        }
        .dg-column-format-setting .format-setting-column {
            background: #fafbfd;
            padding: 4px 8px;
            margin-bottom: 5px;
            border: 1px solid #f2f4f8;
            border-radius: 5px;
        }
        .dg-column-format-setting .format-setting-column.active {
            color: rgb(0 0 0);
            border: 1px solid #2a87ff;
            background: #e7f1ff;
            border-top: 1px solid #2a87ff!important;
            border-bottom: 1px solid #2a87ff!important;
        }

        .dg-column-format-setting .format-setting-column .field-drag-handle{
            float: right;
            cursor: grab;
        }

        .dg-column-format-setting .format-setting-column .field-drag-handle:active{
            cursor: grabbing;
        }

        `]
            }] }
];
/** @nocollapse */
DatagridSettingsComponent.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: Injector }
];
DatagridSettingsComponent.propDecorators = {
    enableReset: [{ type: Input }],
    columns: [{ type: Input }],
    cancelHandle: [{ type: Output }],
    submitHandle: [{ type: Output }],
    reset: [{ type: Output }],
    concise: [{ type: Output }],
    schemeInfo: [{ type: Input }],
    header: [{ type: ViewChild, args: ['header',] }]
};
if (false) {
    /** @type {?} */
    DatagridSettingsComponent.prototype.modalRef;
    /** @type {?} */
    DatagridSettingsComponent.prototype.gridInstance;
    /** @type {?} */
    DatagridSettingsComponent.prototype.activeTabIndex;
    /**
     * 排序列数据
     * @type {?}
     */
    DatagridSettingsComponent.prototype.sortTreeData;
    /** @type {?} */
    DatagridSettingsComponent.prototype.sortNames;
    /** @type {?} */
    DatagridSettingsComponent.prototype.sortInfo;
    /**
     * 显示列数据
     * @type {?}
     */
    DatagridSettingsComponent.prototype.viewTreeData;
    /** @type {?} */
    DatagridSettingsComponent.prototype.viewColumns;
    /** @type {?} */
    DatagridSettingsComponent.prototype.columnFormat;
    /** @type {?} */
    DatagridSettingsComponent.prototype.groupField;
    /** @type {?} */
    DatagridSettingsComponent.prototype.canSetColumnSort;
    /** @type {?} */
    DatagridSettingsComponent.prototype.canSetColumnVisible;
    /** @type {?} */
    DatagridSettingsComponent.prototype.enableReset;
    /** @type {?} */
    DatagridSettingsComponent.prototype.columns;
    /** @type {?} */
    DatagridSettingsComponent.prototype.cancelHandle;
    /** @type {?} */
    DatagridSettingsComponent.prototype.submitHandle;
    /** @type {?} */
    DatagridSettingsComponent.prototype.reset;
    /** @type {?} */
    DatagridSettingsComponent.prototype.concise;
    /** @type {?} */
    DatagridSettingsComponent.prototype.schemeInfo;
    /** @type {?} */
    DatagridSettingsComponent.prototype.header;
    /** @type {?} */
    DatagridSettingsComponent.prototype.searchItems;
    /** @type {?} */
    DatagridSettingsComponent.prototype.alignItems;
    /** @type {?} */
    DatagridSettingsComponent.prototype.summaryItems;
    /** @type {?} */
    DatagridSettingsComponent.prototype.summaryItems2;
    /**
     * @type {?}
     * @private
     */
    DatagridSettingsComponent.prototype.localeSer;
    /**
     * @type {?}
     * @private
     */
    DatagridSettingsComponent.prototype.messager;
    /**
     * @type {?}
     * @private
     */
    DatagridSettingsComponent.prototype.cd;
    /**
     * @type {?}
     * @private
     */
    DatagridSettingsComponent.prototype.inject;
}
//# sourceMappingURL=data:application/json;base64,