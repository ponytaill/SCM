import { Inject, Injectable, Injector, LOCALE_ID, Optional } from "@angular/core";
import { map } from "rxjs/operators";
import { FeatureRepository } from "./feature-repository";
import { Prop } from "./types";
export class FeatureDataService {
    constructor(injector, repository, localeId) {
        this.injector = injector;
        this.repository = repository;
        this.localeId = localeId;
        this.localeId = this.localeId || 'zh-CHS';
    }
    /**
     * 根据物料id获取物料特征项及特征值（公共默认值）
     * @param materialId 物料id
     */
    getFeaturesByMaterialId(materialId) {
        return this.repository.getFeaturesByMaterialId(materialId).pipe(map((response) => {
            if (!response || !response.returnValue) {
                return null;
            }
            const returnValue = JSON.parse(response.returnValue);
            const result = { propset: [], props: [] };
            const propsets = returnValue.propset || null;
            const props = returnValue.props || null;
            if (propsets && Array.isArray(propsets)) {
                propsets.map((propset) => {
                    propset.name = this.translateName(propset);
                    return propset;
                });
                result.propset = propsets;
            }
            if (props && Array.isArray(props) && props.length > 0) {
                props.map((prop) => {
                    // 处理多语
                    prop.name = this.translateName(prop);
                    // 处理枚举
                    if (prop.inputtype === Prop.InputType.enum && prop.enuminfo) {
                        prop.data = JSON.parse(prop.enuminfo);
                    }
                    // 处理必填和只读
                    prop.isreadonly = prop.isreadonly === '1' ? true : false;
                    prop.isrequired = prop.isrequired === '1' ? true : false;
                    return prop;
                });
                result.props = props;
            }
            return result;
        }));
    }
    /**
     * 根据物料id及物料特征保存后的hash获取该物料已经存储的特征项值
     * @param materialId 物料Id
     * @param configID 对应该物料的特征项hash
     * @returns
     */
    getConfigedValueByFeatureId(materialId, configID, configType = 'Materials') {
        return this.repository.getConfigedValueByFeatureId(materialId, configID, configType).pipe(map((result) => {
            return JSON.parse(result);
        }));
    }
    /**
     * 保存物料特征项
     * @param materialId 物料id
     * @param charactValue 特征值
     * @param configType 配置类型
     * @returns
     */
    applyFeatures(materialId, charactValue, configType = 'Materials') {
        return this.repository.applyFeatures(materialId, charactValue, configType).pipe(map((config) => {
            return JSON.parse(config);
        }));
    }
    /**
     * 获取帮助信息
     * @param helpid 帮助id
     * @param filter 过滤条件
     * @param params 参数
     * @returns
     */
    getHelpInfo(helpid, filter, params) {
        const url = '/api/scm/scmfnd/v1.0/scmcommoncmpservice/service/gethelpdata';
        const httpParams = {};
        if (params) {
            if (params.pageIndex) {
                httpParams['pageIndex'] = JSON.stringify(params.pageIndex - 0);
            }
            if (params.pageSize) {
                httpParams['pageSize'] = JSON.stringify(params.pageSize - 0);
            }
            if (params.condition) {
                httpParams['condition'] = JSON.stringify(params.condition);
            }
            if (params.searchValue) {
                httpParams['search'] = params.searchValue;
            }
        }
        const body = {
            helpID: helpid,
            queryParam: JSON.stringify(httpParams),
            filterStr: filter
        };
        const befRepository = null; //this.repository as BefRepository<any>;
        const options = {
            body
        };
        return befRepository.proxy.request(url, 'put', null, options).pipe(map((result) => JSON.parse(result)));
    }
    /**
     * 国际化特征项或特征集名称
     * @param object 特征集或特征项对象
     * @returns
     */
    translateName(object) {
        if (!object) {
            return null;
        }
        let name = null;
        switch (this.localeId) {
            case 'en':
                {
                    name = object['name_en'];
                }
                break;
            case 'zh-CHS':
                {
                    name = object['name_chs'];
                }
                break;
            case 'zh-CHT':
                {
                    name = object['name_cht'];
                }
                break;
            default: name = object['name_chs'];
        }
        return name;
    }
}
FeatureDataService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
FeatureDataService.ctorParameters = () => [
    { type: Injector },
    { type: FeatureRepository },
    { type: String, decorators: [{ type: Optional }, { type: Inject, args: [LOCALE_ID,] }] }
];
//# sourceMappingURL=data:application/json;base64,