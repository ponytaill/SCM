import { HttpHeaders } from '@angular/common/http';
import { of } from 'rxjs';
import { map, tap } from 'rxjs/operators';
import { FieldMetadataUtil } from '@farris/devkit';
/**
 * 路径树仓库
 */
class PathTreeRepository {
    /**
     * 添加兄弟节点
     */
    addSibling(repository, id) {
        const restService = repository.restService;
        const baseUri = restService.baseUri;
        const addSiblingUri = `${baseUri}/service/pathhierarchycreatesibling`;
        const body = {
            dataID: id,
            requestInfo: restService.buildRequestInfo()
        };
        const options = {
            headers: new HttpHeaders({ 'Content-Type': 'application/json' }),
            body: body
        };
        return restService.invoke(addSiblingUri, 'PUT', null, options).pipe(map((responseInfo) => {
            const entity = repository.buildEntity(responseInfo.returnValue);
            repository.entityCollection.addEntity(entity);
            return entity;
        }));
    }
    /**
     * 添加兄弟节点
     */
    addChild(repository, parentId) {
        const restService = repository.restService;
        const baseUri = restService.baseUri;
        const addChildUri = `${baseUri}/service/pathhierarchycreatechildlayer`;
        const body = {
            dataID: parentId,
            requestInfo: restService.buildRequestInfo()
        };
        const options = {
            headers: new HttpHeaders({ 'Content-Type': 'application/json' }),
            body: body
        };
        return restService.invoke(addChildUri, 'PUT', null, options).pipe(map((responseInfo) => {
            const entity = repository.buildEntity(responseInfo.returnValue);
            repository.entityCollection.addEntity(entity);
            return entity;
        }));
    }
    /**
     * 添加子表兄弟节点
     */
    addSubSibling(repository, nodes, ids) {
        const restService = repository.restService;
        const baseUri = restService.baseUri;
        const addSubSiblingUri = `${baseUri}/service/childnodepathhierarchycreatesibling`;
        const body = {
            nodes: nodes,
            ids: ids,
            requestInfo: restService.buildRequestInfo()
        };
        const options = {
            headers: new HttpHeaders({ 'Content-Type': 'application/json' }),
            body: body
        };
        return restService.invoke(addSubSiblingUri, 'PUT', null, options).pipe(map((responseInfo) => {
            let path = this.getPaths(nodes, ids);
            const entity = repository.entityManager.appendEntityByPath(path, responseInfo.returnValue);
            return entity;
        }));
    }
    /**
    * 添加子表子节点
    */
    addSubChild(repository, nodes, ids) {
        const restService = repository.restService;
        const baseUri = restService.baseUri;
        const addSubChildUri = `${baseUri}/service/childnodepathhierarchycreatechildlayer`;
        const body = {
            nodes: nodes,
            ids: ids,
            requestInfo: restService.buildRequestInfo()
        };
        const options = {
            headers: new HttpHeaders({ 'Content-Type': 'application/json' }),
            body: body
        };
        return restService.invoke(addSubChildUri, 'PUT', null, options).pipe(map((responseInfo) => {
            let path = this.getPaths(nodes, ids);
            const entity = repository.entityManager.appendEntityByPath(path, responseInfo.returnValue);
            return entity;
        }));
    }
    getPaths(nodes, ids) {
        let paths = '';
        if (nodes && nodes.length > 0 && ids && ids.length > 0) {
            for (let i = 0; i < ids.length; i++) {
                if (nodes[i]) {
                    paths = paths + `/${ids[i]}`;
                    paths = paths + `/${nodes[i]}s`;
                }
            }
        }
        return paths;
    }
    /**
     * 加载父节点
     */
    // tslint:disable-next-line: max-line-length
    loadByParentId(repository, hierarchyInfoKey, parentId, filters, sorts, frozenCurrentRow = false, pagination, frameContext, reload = false) {
        const localEntities = this.getChildren(repository, hierarchyInfoKey, parentId);
        if (localEntities && localEntities.length > 0 && !reload) {
            return of(localEntities);
        }
        const restService = repository.restService;
        const parentHierarchyInfo = this.getHierarchyInfoById(repository, hierarchyInfoKey, parentId);
        const originalHierarchyInfoKey = this.getOriginalHierarchyInfoKey(repository, hierarchyInfoKey);
        const filtersWithParent = this.buildFiltersWithParent(originalHierarchyInfoKey, parentHierarchyInfo, filters);
        const isUsePagination = pagination && pagination.pageSize > 0 || false;
        // 组织EntityFilter
        const entityFilter = {
            FilterConditions: filtersWithParent,
            SortConditions: sorts,
            IsUsePagination: isUsePagination,
            Pagination: { PageIndex: pagination && pagination.pageIndex || 0, PageSize: pagination && pagination.pageSize || 0, PageCount: 0, TotalCount: 0 }
        };
        const requestInfo = restService.buildRequestInfo();
        return restService.extendQuery(entityFilter, requestInfo).pipe(map((responseInfo) => {
            const paginationInfo = this.getPaginationInfo(responseInfo);
            if (parentId) {
                if (paginationInfo && paginationInfo.pageSize !== 0 && frameContext) {
                    frameContext.params.set(`_NODE_${parentId}_PAGINATION_INFO_`, paginationInfo);
                }
            }
            else {
                if (paginationInfo && paginationInfo.pageSize !== 0 && frameContext) {
                    frameContext.repository.entityCollection.updatePaginationInfoByPath('/', paginationInfo);
                }
            }
            // 先清空下级实体
            this.clearDescendantEntities(repository, hierarchyInfoKey, parentHierarchyInfo, frozenCurrentRow);
            // 追加下级实体
            const listData = responseInfo.returnValue.result;
            const entities = repository.buildEntities(listData);
            if (frozenCurrentRow) {
                repository.entityCollection.addData(entities);
            }
            else {
                repository.entityCollection.addEntities(entities);
            }
            return entities;
        }));
    }
    // tslint:disable-next-line: max-line-length
    loadFullTree(repository, hierarchyInfoKey, parentId, propertyName, fullTreeType, loadType, filters, context) {
        const restService = repository.restService;
        const baseUri = restService.baseUri;
        const queryUrl = `${baseUri}/service/parentidfulltreequery`;
        const pathHierarchyInfo = this.getHierarchyInfoById(repository, hierarchyInfoKey, parentId);
        const entityFilter = this.buildEntityFilter(filters, null, 0, 0);
        const body = {
            dataId: parentId || '',
            isUsePagination: false,
            virtualPropertyName: propertyName,
            pagination: {},
            fullTreeType,
            loadType,
            filter: entityFilter,
            requestInfo: restService.buildRequestInfo()
        };
        const options = {
            body: body
        };
        return restService.invoke(queryUrl, 'PUT', null, options).pipe(tap((responseInfo) => {
            // 保存展开的节点
            if (responseInfo.returnValue && responseInfo.returnValue.selectedRowId && context && context.frameContext) {
                const frameContext = context.frameContext;
                const virtualRootFrameContext = frameContext && frameContext.getVirtualRootFrameContext() || null;
                if (virtualRootFrameContext) {
                    const list = responseInfo.returnValue.result;
                    const selectedRowId = responseInfo.returnValue.selectedRowId;
                    // 从顶层开始计算所有需要展开的节点
                    const leafNodeInfo = list.find(item => item[repository.primaryKey] === selectedRowId);
                    const hierarchyInfo = leafNodeInfo[hierarchyInfoKey];
                    const ids = this.getAllParentIds(hierarchyInfo, list, hierarchyInfoKey, repository);
                    virtualRootFrameContext.params.set('_DEVKIT_expandRowIds', ids.join(','));
                    virtualRootFrameContext.params.set('_DEVKIT_selectedRowId', selectedRowId);
                    virtualRootFrameContext.uiState.setPropertyValue('__DEVKIT__selectedRow', selectedRowId);
                }
            }
        }), map((responseInfo) => {
            const frozenCurrentRow = context && context.frozenCurrentRow || false;
            // 先清空下级实体
            this.clearDescendantEntities(repository, hierarchyInfoKey, pathHierarchyInfo, frozenCurrentRow);
            // 追加下级实体
            const listData = responseInfo.returnValue.result;
            const entities = repository.buildEntities(listData);
            if (frozenCurrentRow) {
                repository.entityCollection.addData(entities);
            }
            else {
                repository.entityCollection.addEntities(entities);
            }
            return entities;
        }));
    }
    /**
     * 插入对父节点的过滤
     */
    buildFiltersWithParent(originalHierarchyInfoKey, parentHierarchyInfo, filterArray) {
        const relationType = filterArray && filterArray.length >= 1 ? 1 : 0;
        const parentLayer = parentHierarchyInfo ? parentHierarchyInfo['layer'] : 0;
        const parentFilterArray = [
            {
                "FilterField": `${originalHierarchyInfoKey}.Layer`,
                "Value": parentLayer + 1,
                "Lbracket": null,
                "Rbracket": null,
                "Relation": 1,
                "Expresstype": 0,
                "Compare": 0
            }
        ];
        // 父路径过滤，如果为空，则不添加（兼容oracle取数）
        const parentPath = parentHierarchyInfo ? parentHierarchyInfo['path'] : '';
        if (parentPath) {
            parentFilterArray.push({
                "FilterField": `${originalHierarchyInfoKey}.Path`,
                "Value": parentPath,
                "Lbracket": null,
                "Rbracket": null,
                "Relation": relationType,
                "Expresstype": 0,
                "Compare": 7
            });
        }
        else {
            parentFilterArray[0].Relation = relationType;
        }
        return parentFilterArray.concat(filterArray);
    }
    buildEntityFilter(filter, sort, pageSize, pageIndex) {
        // @todo：临时兼容老代码，降低改动带来的风险
        if (!filter && !sort && !pageSize && !pageIndex) {
            return null;
        }
        if (!filter) {
            filter = [];
        }
        if (!sort) {
            sort = [];
        }
        // 纠正最后一个过滤条件的Relation
        if (filter && filter.length > 0) {
            filter[filter.length - 1].Relation = 0;
        }
        const entityFilter = {
            FilterConditions: filter,
            SortConditions: sort,
            IsUsePagination: pageSize === 0 ? false : true,
            Pagination: {
                PageIndex: pageIndex,
                PageSize: pageSize,
                PageCount: 0,
                TotalCount: 0
            }
        };
        return entityFilter;
    }
    /**
     * 清空后代实体
     */
    clearDescendantEntities(repository, hierarchyInfokey, parentHierarchyInfo, frozenCurrentRow = false) {
        // 清空根节点
        if (!parentHierarchyInfo) {
            repository.entityCollection.clear();
            return;
        }
        const fPath = parentHierarchyInfo.path;
        const fLayer = parentHierarchyInfo.layer;
        if (frozenCurrentRow) {
            repository.entityCollection.removeData((entity) => {
                const hierarchyInfo = entity[hierarchyInfokey];
                const path = hierarchyInfo.path;
                const layer = hierarchyInfo.layer;
                return layer > fLayer && path.startsWith(fPath);
            });
        }
        else {
            repository.entityCollection.removeEntities((entity) => {
                const hierarchyInfo = entity[hierarchyInfokey];
                const path = hierarchyInfo.path;
                const layer = hierarchyInfo.layer;
                return layer > fLayer && path.startsWith(fPath);
            });
        }
    }
    /**
     * 获取实体的分级信息
     */
    getHierarchyInfoById(repository, hierarchyInfokey, id) {
        if (!id) {
            return null;
        }
        const entity = repository.entityCollection.getEntityById(id);
        const hierarchyInfoEntity = entity[hierarchyInfokey];
        return hierarchyInfoEntity.toJSON();
    }
    /**
     * 获取分级码的原始的字段名
     */
    getOriginalHierarchyInfoKey(repository, hierarchyInfokey) {
        const ngObjects = FieldMetadataUtil.getNgObjects(repository.entityType);
        const hierarchyInfoNgObject = ngObjects[hierarchyInfokey];
        return hierarchyInfoNgObject.originalDataField;
    }
    getPaginationInfo(responseInfo) {
        return responseInfo && responseInfo.returnValue && responseInfo.returnValue.pagination || null;
    }
    findParent(hierarchyInfo, list, hierarchyInfoKey) {
        return list.find(item => {
            const currentHierarchyInfo = item[hierarchyInfoKey];
            return currentHierarchyInfo.layer === hierarchyInfo.layer - 1 && hierarchyInfo.path.startsWith(currentHierarchyInfo.path);
        });
    }
    getAllParentIds(hierarchyInfo, list, hierarchyInfoKey, repository) {
        let item = this.findParent(hierarchyInfo, list, hierarchyInfoKey);
        const ids = [];
        while (item) {
            ids.push(item[repository.primaryKey]);
            item = this.findParent(item[hierarchyInfoKey], list, hierarchyInfoKey);
        }
        return ids;
    }
    getHierarchyInfo(entity, hierarchyInfoKey) {
        return entity[hierarchyInfoKey];
    }
    /**
     * 查找节点下所有子级（第一级）
     * @param repository repository
     * @param hierarchyInfoKey 分级码字段
     * @param id id
     * @returns
     */
    getChildren(repository, hierarchyInfoKey, id) {
        const hierarchyInfo = this.getHierarchyInfoById(repository, hierarchyInfoKey, id);
        if (!hierarchyInfo) {
            return null;
        }
        const layer = hierarchyInfo.layer;
        const path = hierarchyInfo.path;
        const entities = repository.entityCollection.getEntities((entity) => {
            const hierarchyInfo = this.getHierarchyInfo(entity, hierarchyInfoKey);
            const matched = hierarchyInfo.layer === layer + 1 && hierarchyInfo.path.startsWith(path);
            if (matched) {
                return entity;
            }
            else {
                return null;
            }
        });
        return entities;
    }
}
export { PathTreeRepository };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGF0aC10cmVlLXJlcG9zaXRvcnkuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZmFycmlzL2NvbW1hbmQtc2VydmljZXMvIiwic291cmNlcyI6WyJsaWIvZGF0YS1zZXJ2aWNlcy90cmVlLXRhYmxlL3JlcG9zaXRvcnkvcGF0aC10cmVlLXJlcG9zaXRvcnkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLHNCQUFzQixDQUFDO0FBQ25ELE9BQU8sRUFBYyxFQUFFLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFDdEMsT0FBTyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUMxQyxPQUFPLEVBQVUsaUJBQWlCLEVBQTRCLE1BQU0sZ0JBQWdCLENBQUM7QUFHckY7O0dBRUc7QUFDSCxNQUFNLGtCQUFrQjtJQUV0Qjs7T0FFRztJQUNJLFVBQVUsQ0FBQyxVQUFpQyxFQUFFLEVBQVU7UUFDN0QsTUFBTSxXQUFXLEdBQUcsVUFBVSxDQUFDLFdBQVcsQ0FBQztRQUMzQyxNQUFNLE9BQU8sR0FBRyxXQUFXLENBQUMsT0FBTyxDQUFDO1FBQ3BDLE1BQU0sYUFBYSxHQUFHLEdBQUcsT0FBTyxxQ0FBcUMsQ0FBQztRQUN0RSxNQUFNLElBQUksR0FBRztZQUNYLE1BQU0sRUFBRSxFQUFFO1lBQ1YsV0FBVyxFQUFFLFdBQVcsQ0FBQyxnQkFBZ0IsRUFBRTtTQUM1QyxDQUFDO1FBQ0YsTUFBTSxPQUFPLEdBQUc7WUFDZCxPQUFPLEVBQUUsSUFBSSxXQUFXLENBQUMsRUFBRSxjQUFjLEVBQUUsa0JBQWtCLEVBQUUsQ0FBQztZQUNoRSxJQUFJLEVBQUUsSUFBSTtTQUNYLENBQUM7UUFDRixPQUFPLFdBQVcsQ0FBQyxNQUFNLENBQUMsYUFBYSxFQUFFLEtBQUssRUFBRSxJQUFJLEVBQUUsT0FBTyxDQUFDLENBQUMsSUFBSSxDQUNqRSxHQUFHLENBQUMsQ0FBQyxZQUEwQixFQUFFLEVBQUU7WUFDakMsTUFB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R0FBRyxhQUFhLENBQUMsS0FBSyxDQUFDO1FBQ2xDLE1BQU0sSUFBSSxHQUFHLGFBQWEsQ0FBQyxJQUFJLENBQUM7UUFDaEMsTUFBTSxRQUFRLEdBQWEsVUFBVSxDQUFDLGdCQUFnQixDQUFDLFdBQVcsQ0FBQyxDQUFDLE1BQWMsRUFBRSxFQUFFO1lBQ3BGLE1BQU0sYUFBYSxHQUFHLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxNQUFNLEVBQUUsZ0JBQWdCLENBQUMsQ0FBQztZQUN0RSxNQUFNLE9BQU8sR0FBRyxhQUFhLENBQUMsS0FBSyxLQUFLLEtBQUssR0FBRyxDQUFDLElBQUksYUFBYSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLENBQUM7WUFDekYsSUFBSSxPQUFPLEVBQUU7Z0JBQ1gsT0FBTyxNQUFNLENBQUM7YUFDZjtpQkFBTTtnQkFDTCxPQUFPLElBQUksQ0FBQzthQUNiO1FBQ0gsQ0FBQyxDQUFDLENBQUM7UUFDSCxPQUFPLFFBQVEsQ0FBQztJQUNsQixDQUFDO0NBQ0Y7QUFFRCxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEh0dHBIZWFkZXJzIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uL2h0dHAnO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSwgb2YgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IG1hcCwgdGFwIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuaW1wb3J0IHsgRW50aXR5LCBGaWVsZE1ldGFkYXRhVXRpbCwgRnJhbWVDb250ZXh0LCBSZXBvc2l0b3J5IH0gZnJvbSAnQGZhcnJpcy9kZXZraXQnO1xuaW1wb3J0IHsgUmVzcG9uc2VJbmZvLCBCZWZSZXBvc2l0b3J5IH0gZnJvbSAnQGZhcnJpcy9iZWYnO1xuXG4vKipcbiAqIOi3r+W+hOagkeS7k+W6k1xuICovXG5jbGFzcyBQYXRoVHJlZVJlcG9zaXRvcnkge1xuXG4gIC8qKlxuICAgKiDmt7vliqDlhYTlvJ/oioLngrlcbiAgICovXG4gIHB1YmxpYyBhZGRTaWJsaW5nKHJlcG9zaXRvcnk6IEJlZlJlcG9zaXRvcnk8RW50aXR5PiwgaWQ6IHN0cmluZyk6IE9ic2VydmFibGU8RW50aXR5PiB7XG4gICAgY29uc3QgcmVzdFNlcnZpY2UgPSByZXBvc2l0b3J5LnJlc3RTZXJ2aWNlO1xuICAgIGNvbnN0IGJhc2VVcmkgPSByZXN0U2VydmljZS5iYXNlVXJpO1xuICAgIGNvbnN0IGFkZFNpYmxpbmdVcmkgPSBgJHtiYXNlVXJpfS9zZXJ2aWNlL3BhdGhoaWVyYXJjaHljcmVhdGVzaWJsaW5nYDtcbiAgICBjb25zdCBib2R5ID0ge1xuICAgICAgZGF0YUlEOiBpZCxcbiAgICAgIHJlcXVlc3RJbmZvOiByZXN0U2VydmljZS5idWlsZFJlcXVlc3RJbmZvKClcbiAgICB9O1xuICAgIGNvbnN0IG9wdGlvbnMgPSB7XG4gICAgICBoZWFkZXJzOiBuZXcgSHR0cEhlYWRlcnMoeyAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nIH0pLFxuICAgICAgYm9keTogYm9keVxuICAgIH07XG4gICAgcmV0dXJuIHJlc3RTZXJ2aWNlLmludm9rZShhZGRTaWJsaW5nVXJpLCAnUFVUJywgbnVsbCwgb3B0aW9ucykucGlwZShcbiAgICAgIG1hcCgocmVzcG9uc2VJbmZvOiBSZXNwb25zZUluZm8pID0+IHtcbiAgICAgICAgY29uc3QgZW50aXR5ID0gcmVwb3NpdG9yeS5idWlsZEVudGl0eShyZXNwb25zZUluZm8ucmV0dXJuVmFsdWUpO1xuICAgICAgICByZXBvc2l0b3J5LmVudGl0eUNvbGxlY3Rpb24uYWRkRW50aXR5KGVudGl0eSk7XG4gICAgICAgIHJldHVybiBlbnRpdHk7XG4gICAgICB9KVxuICAgICk7XG4gIH1cblxuICAvKipcbiAgICog5re75Yqg5YWE5byf6IqC54K5XG4gICAqL1xuICBwdWJsaWMgYWRkQ2hpbGQocmVwb3NpdG9yeTogQmVmUmVwb3NpdG9yeTxFbnRpdHk+LCBwYXJlbnRJZDogc3RyaW5nKSB7XG4gICAgY29uc3QgcmVzdFNlcnZpY2UgPSByZXBvc2l0b3J5LnJlc3RTZXJ2aWNlO1xuICAgIGNvbnN0IGJhc2VVcmkgPSByZXN0U2VydmljZS5iYXNlVXJpO1xuICAgIGNvbnN0IGFkZENoaWxkVXJpID0gYCR7YmFzZVVyaX0vc2VydmljZS9wYXRoaGllcmFyY2h5Y3JlYXRlY2hpbGRsYXllcmA7XG5cbiAgICBjb25zdCBib2R5ID0ge1xuICAgICAgZGF0YUlEOiBwYXJlbnRJZCxcbiAgICAgIHJlcXVlc3RJbmZvOiByZXN0U2VydmljZS5idWlsZFJlcXVlc3RJbmZvKClcbiAgICB9O1xuICAgIGNvbnN0IG9wdGlvbnMgPSB7XG4gICAgICBoZWFkZXJzOiBuZXcgSHR0cEhlYWRlcnMoeyAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nIH0pLFxuICAgICAgYm9keTogYm9keVxuICAgIH07XG4gICAgcmV0dXJuIHJlc3RTZXJ2aWNlLmludm9rZShhZGRDaGlsZFVyaSwgJ1BVVCcsIG51bGwsIG9wdGlvbnMpLnBpcGUoXG4gICAgICBtYXAoKHJlc3BvbnNlSW5mbzogUmVzcG9uc2VJbmZvKSA9PiB7XG4gICAgICAgIGNvbnN0IGVudGl0eSA9IHJlcG9zaXRvcnkuYnVpbGRFbnRpdHkocmVzcG9uc2VJbmZvLnJldHVyblZhbHVlKTtcbiAgICAgICAgcmVwb3NpdG9yeS5lbnRpdHlDb2xsZWN0aW9uLmFkZEVudGl0eShlbnRpdHkpO1xuICAgICAgICByZXR1cm4gZW50aXR5O1xuICAgICAgfSlcbiAgICApO1xuICB9XG5cbiAgLyoqXG4gICAqIOa3u+WKoOWtkOihqOWFhOW8n+iKgueCuVxuICAgKi9cbiAgcHVibGljIGFkZFN1YlNpYmxpbmcocmVwb3NpdG9yeTogQmVmUmVwb3NpdG9yeTxFbnRpdHk+LCBub2RlczogQXJyYXk8c3RyaW5nPiwgaWRzOiBBcnJheTxzdHJpbmc+KTogT2JzZXJ2YWJsZTxFbnRpdHk+IHtcbiAgICBjb25zdCByZXN0U2VydmljZSA9IHJlcG9zaXRvcnkucmVzdFNlcnZpY2U7XG4gICAgY29uc3QgYmFzZVVyaSA9IHJlc3RTZXJ2aWNlLmJhc2VVcmk7XG4gICAgY29uc3QgYWRkU3ViU2libGluZ1VyaSA9IGAke2Jhc2VVcml9L3NlcnZpY2UvY2hpbGRub2RlcGF0aGhpZXJhcmNoeWNyZWF0ZXNpYmxpbmdgO1xuICAgIGNvbnN0IGJvZHkgPSB7XG4gICAgICBub2Rlczogbm9kZXMsXG4gICAgICBpZHM6IGlkcyxcbiAgICAgIHJlcXVlc3RJbmZvOiByZXN0U2VydmljZS5idWlsZFJlcXVlc3RJbmZvKClcbiAgICB9O1xuICAgIGNvbnN0IG9wdGlvbnMgPSB7XG4gICAgICBoZWFkZXJzOiBuZXcgSHR0cEhlYWRlcnMoeyAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nIH0pLFxuICAgICAgYm9keTogYm9keVxuICAgIH07XG4gICAgcmV0dXJuIHJlc3RTZXJ2aWNlLmludm9rZShhZGRTdWJTaWJsaW5nVXJpLCAnUFVUJywgbnVsbCwgb3B0aW9ucykucGlwZShcbiAgICAgIG1hcCgocmVzcG9uc2VJbmZvOiBSZXNwb25zZUluZm8pID0+IHtcbiAgICAgICAgbGV0IHBhdGggPSB0aGlzLmdldFBhdGhzKG5vZGVzLCBpZHMpO1xuICAgICAgICBjb25zdCBlbnRpdHkgPSByZXBvc2l0b3J5LmVudGl0eU1hbmFnZXIuYXBwZW5kRW50aXR5QnlQYXRoKHBhdGgsIHJlc3BvbnNlSW5mby5yZXR1cm5WYWx1ZSlcbiAgICAgICAgcmV0dXJuIGVudGl0eTtcbiAgICAgIH0pXG4gICAgKTtcbiAgfVxuXG4gIC8qKlxuICAqIOa3u+WKoOWtkOihqOWtkOiKgueCuVxuICAqL1xuICBwdWJsaWMgYWRkU3ViQ2hpbGQocmVwb3NpdG9yeTogQmVmUmVwb3NpdG9yeTxFbnRpdHk+LCBub2RlczogQXJyYXk8c3RyaW5nPiwgaWRzOiBBcnJheTxzdHJpbmc+KSB7XG4gICAgY29uc3QgcmVzdFNlcnZpY2UgPSByZXBvc2l0b3J5LnJlc3RTZXJ2aWNlO1xuICAgIGNvbnN0IGJhc2VVcmkgPSByZXN0U2VydmljZS5iYXNlVXJpO1xuICAgIGNvbnN0IGFkZFN1YkNoaWxkVXJpID0gYCR7YmFzZVVyaX0vc2VydmljZS9jaGlsZG5vZGVwYXRoaGllcmFyY2h5Y3JlYXRlY2hpbGRsYXllcmA7XG5cbiAgICBjb25zdCBib2R5ID0ge1xuICAgICAgbm9kZXM6IG5vZGVzLFxuICAgICAgaWRzOiBpZHMsXG4gICAgICByZXF1ZXN0SW5mbzogcmVzdFNlcnZpY2UuYnVpbGRSZXF1ZXN0SW5mbygpXG4gICAgfTtcbiAgICBjb25zdCBvcHRpb25zID0ge1xuICAgICAgaGVhZGVyczogbmV3IEh0dHBIZWFkZXJzKHsgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJyB9KSxcbiAgICAgIGJvZHk6IGJvZHlcbiAgICB9O1xuICAgIHJldHVybiByZXN0U2VydmljZS5pbnZva2UoYWRkU3ViQ2hpbGRVcmksICdQVVQnLCBudWxsLCBvcHRpb25zKS5waXBlKFxuICAgICAgbWFwKChyZXNwb25zZUluZm86IFJlc3BvbnNlSW5mbykgPT4ge1xuICAgICAgICBsZXQgcGF0aCA9IHRoaXMuZ2V0UGF0aHMobm9kZXMsIGlkcyk7XG4gICAgICAgIGNvbnN0IGVudGl0eSA9IHJlcG9zaXRvcnkuZW50aXR5TWFuYWdlci5hcHBlbmRFbnRpdHlCeVBhdGgocGF0aCwgcmVzcG9uc2VJbmZvLnJldHVyblZhbHVlKVxuICAgICAgICByZXR1cm4gZW50aXR5O1xuICAgICAgfSlcbiAgICApO1xuICB9XG5cbiAgcHJpdmF0ZSBnZXRQYXRocyhub2Rlczogc3RyaW5nW10sIGlkczogc3RyaW5nW10pIHtcbiAgICBsZXQgcGF0aHMgPSAnJztcbiAgICBpZiAobm9kZXMgJiYgbm9kZXMubGVuZ3RoID4gMCAmJiBpZHMgJiYgaWRzLmxlbmd0aCA+IDApIHtcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgaWRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGlmIChub2Rlc1tpXSkge1xuICAgICAgICAgIHBhdGhzID0gcGF0aHMgKyBgLyR7aWRzW2ldfWA7XG4gICAgICAgICAgcGF0aHMgPSBwYXRocyArIGAvJHtub2Rlc1tpXX1zYDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcGF0aHM7XG4gIH1cblxuICAvKipcbiAgICog5Yqg6L2954i26IqC54K5XG4gICAqL1xuICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6IG1heC1saW5lLWxlbmd0aFxuICBwdWJsaWMgbG9hZEJ5UGFyZW50SWQocmVwb3NpdG9yeTogQmVmUmVwb3NpdG9yeTxFbnRpdHk+LCBoaWVyYXJjaHlJbmZvS2V5OiBzdHJpbmcsIHBhcmVudElkOiBzdHJpbmcsIGZpbHRlcnM6IGFueVtdLCBzb3J0czogYW55W10sIGZyb3plbkN1cnJlbnRSb3c6IGJvb2xlYW4gPSBmYWxzZSwgcGFnaW5hdGlvbj86IHsgcGFnZVNpemU6IG51bWJlciwgcGFnZUluZGV4OiBudW1iZXIgfSwgZnJhbWVDb250ZXh0PzogRnJhbWVDb250ZXh0LCByZWxvYWQ6IGJvb2xlYW4gPSBmYWxzZSk6IE9ic2VydmFibGU8RW50aXR5W10+IHtcbiAgICBjb25zdCBsb2NhbEVudGl0aWVzID0gdGhpcy5nZXRDaGlsZHJlbihyZXBvc2l0b3J5LCBoaWVyYXJjaHlJbmZvS2V5LCBwYXJlbnRJZCk7XG4gICAgaWYgKGxvY2FsRW50aXRpZXMgJiYgbG9jYWxFbnRpdGllcy5sZW5ndGggPiAwICYmICFyZWxvYWQpIHtcbiAgICAgIHJldHVybiBvZihsb2NhbEVudGl0aWVzKTtcbiAgICB9XG4gICAgY29uc3QgcmVzdFNlcnZpY2UgPSByZXBvc2l0b3J5LnJlc3RTZXJ2aWNlO1xuICAgIGNvbnN0IHBhcmVudEhpZXJhcmNoeUluZm8gPSB0aGlzLmdldEhpZXJhcmNoeUluZm9CeUlkKHJlcG9zaXRvcnksIGhpZXJhcmNoeUluZm9LZXksIHBhcmVudElkKTtcbiAgICBjb25zdCBvcmlnaW5hbEhpZXJhcmNoeUluZm9LZXkgPSB0aGlzLmdldE9yaWdpbmFsSGllcmFyY2h5SW5mb0tleShyZXBvc2l0b3J5LCBoaWVyYXJjaHlJbmZvS2V5KTtcbiAgICBjb25zdCBmaWx0ZXJzV2l0aFBhcmVudCA9IHRoaXMuYnVpbGRGaWx0ZXJzV2l0aFBhcmVudChvcmlnaW5hbEhpZXJhcmNoeUluZm9LZXksIHBhcmVudEhpZXJhcmNoeUluZm8sIGZpbHRlcnMpO1xuICAgIGNvbnN0IGlzVXNlUGFnaW5hdGlvbiA9IHBhZ2luYXRpb24gJiYgcGFnaW5hdGlvbi5wYWdlU2l6ZSA+IDAgfHwgZmFsc2U7XG4gICAgLy8g57uE57uHRW50aXR5RmlsdGVyXG4gICAgY29uc3QgZW50aXR5RmlsdGVyID0ge1xuICAgICAgRmlsdGVyQ29uZGl0aW9uczogZmlsdGVyc1dpdGhQYXJlbnQsXG4gICAgICBTb3J0Q29uZGl0aW9uczogc29ydHMsXG4gICAgICBJc1VzZVBhZ2luYXRpb246IGlzVXNlUGFnaW5hdGlvbixcbiAgICAgIFBhZ2luYXRpb246IHsgUGFnZUluZGV4OiBwYWdpbmF0aW9uICYmIHBhZ2luYXRpb24ucGFnZUluZGV4IHx8IDAsIFBhZ2VTaXplOiBwYWdpbmF0aW9uICYmIHBhZ2luYXRpb24ucGFnZVNpemUgfHwgMCwgUGFnZUNvdW50OiAwLCBUb3RhbENvdW50OiAwIH1cbiAgICB9O1xuICAgIGNvbnN0IHJlcXVlc3RJbmZvID0gcmVzdFNlcnZpY2UuYnVpbGRSZXF1ZXN0SW5mbygpO1xuICAgIHJldHVybiByZXN0U2VydmljZS5leHRlbmRRdWVyeShlbnRpdHlGaWx0ZXIsIHJlcXVlc3RJbmZvKS5waXBlKFxuICAgICAgbWFwKChyZXNwb25zZUluZm86IFJlc3BvbnNlSW5mbykgPT4ge1xuICAgICAgICBjb25zdCBwYWdpbmF0aW9uSW5mbyA9IHRoaXMuZ2V0UGFnaW5hdGlvbkluZm8ocmVzcG9uc2VJbmZvKTtcbiAgICAgICAgaWYgKHBhcmVudElkKSB7XG4gICAgICAgICAgaWYgKHBhZ2luYXRpb25JbmZvICYmIHBhZ2luYXRpb25JbmZvLnBhZ2VTaXplICE9PSAwICYmIGZyYW1lQ29udGV4dCkge1xuICAgICAgICAgICAgZnJhbWVDb250ZXh0LnBhcmFtcy5zZXQoYF9OT0RFXyR7cGFyZW50SWR9X1BBR0lOQVRJT05fSU5GT19gLCBwYWdpbmF0aW9uSW5mbyk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGlmIChwYWdpbmF0aW9uSW5mbyAmJiBwYWdpbmF0aW9uSW5mby5wYWdlU2l6ZSAhPT0gMCAmJiBmcmFtZUNvbnRleHQpIHtcbiAgICAgICAgICAgIGZyYW1lQ29udGV4dC5yZXBvc2l0b3J5LmVudGl0eUNvbGxlY3Rpb24udXBkYXRlUGFnaW5hdGlvbkluZm9CeVBhdGgoJy8nLCBwYWdpbmF0aW9uSW5mbyk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIC8vIOWFiOa4heepuuS4i+e6p+WunuS9k1xuICAgICAgICB0aGlzLmNsZWFyRGVzY2VuZGFudEVudGl0aWVzKHJlcG9zaXRvcnksIGhpZXJhcmNoeUluZm9LZXksIHBhcmVudEhpZXJhcmNoeUluZm8sIGZyb3plbkN1cnJlbnRSb3cpO1xuICAgICAgICAvLyDov73liqDkuIvnuqflrp7kvZNcbiAgICAgICAgY29uc3QgbGlzdERhdGEgPSByZXNwb25zZUluZm8ucmV0dXJuVmFsdWUucmVzdWx0O1xuICAgICAgICBjb25zdCBlbnRpdGllcyA9IHJlcG9zaXRvcnkuYnVpbGRFbnRpdGllcyhsaXN0RGF0YSk7XG4gICAgICAgIGlmIChmcm96ZW5DdXJyZW50Um93KSB7XG4gICAgICAgICAgcmVwb3NpdG9yeS5lbnRpdHlDb2xsZWN0aW9uLmFkZERhdGEoZW50aXRpZXMpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJlcG9zaXRvcnkuZW50aXR5Q29sbGVjdGlvbi5hZGRFbnRpdGllcyhlbnRpdGllcyk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gZW50aXRpZXM7XG4gICAgICB9KVxuICAgICk7XG4gIH1cbiAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOiBtYXgtbGluZS1sZW5ndGhcbiAgcHVibGljIGxvYWRGdWxsVHJlZShyZXBvc2l0b3J5OiBCZWZSZXBvc2l0b3J5PEVudGl0eT4sIGhpZXJhcmNoeUluZm9LZXk6IHN0cmluZywgcGFyZW50SWQ6IHN0cmluZywgcHJvcGVydHlOYW1lOiBzdHJpbmcsIGZ1bGxUcmVlVHlwZTogc3RyaW5nLCBsb2FkVHlwZTogc3RyaW5nLCBmaWx0ZXJzPzogYW55W10sIGNvbnRleHQ/OiBhbnkpOiBPYnNlcnZhYmxlPEVudGl0eVtdPiB7XG4gICAgY29uc3QgcmVzdFNlcnZpY2UgPSByZXBvc2l0b3J5LnJlc3RTZXJ2aWNlO1xuICAgIGNvbnN0IGJhc2VVcmkgPSByZXN0U2VydmljZS5iYXNlVXJpO1xuICAgIGNvbnN0IHF1ZXJ5VXJsID0gYCR7YmFzZVVyaX0vc2VydmljZS9wYXJlbnRpZGZ1bGx0cmVlcXVlcnlgO1xuICAgIGNvbnN0IHBhdGhIaWVyYXJjaHlJbmZvID0gdGhpcy5nZXRIaWVyYXJjaHlJbmZvQnlJZChyZXBvc2l0b3J5LCBoaWVyYXJjaHlJbmZvS2V5LCBwYXJlbnRJZCk7XG4gICAgY29uc3QgZW50aXR5RmlsdGVyID0gdGhpcy5idWlsZEVudGl0eUZpbHRlcihmaWx0ZXJzLCBudWxsLCAwLCAwKTtcbiAgICBjb25zdCBib2R5ID0ge1xuICAgICAgZGF0YUlkOiBwYXJlbnRJZCB8fCAnJyxcbiAgICAgIGlzVXNlUGFnaW5hdGlvbjogZmFsc2UsXG4gICAgICB2aXJ0dWFsUHJvcGVydHlOYW1lOiBwcm9wZXJ0eU5hbWUsXG4gICAgICBwYWdpbmF0aW9uOiB7fSxcbiAgICAgIGZ1bGxUcmVlVHlwZSxcbiAgICAgIGxvYWRUeXBlLFxuICAgICAgZmlsdGVyOiBlbnRpdHlGaWx0ZXIsXG4gICAgICByZXF1ZXN0SW5mbzogcmVzdFNlcnZpY2UuYnVpbGRSZXF1ZXN0SW5mbygpXG4gICAgfTtcbiAgICBjb25zdCBvcHRpb25zID0ge1xuICAgICAgYm9keTogYm9keVxuICAgIH07XG4gICAgcmV0dXJuIHJlc3RTZXJ2aWNlLmludm9rZShxdWVyeVVybCwgJ1BVVCcsIG51bGwsIG9wdGlvbnMpLnBpcGUoXG4gICAgICB0YXAoKHJlc3BvbnNlSW5mbzogUmVzcG9uc2VJbmZvKSA9PiB7XG4gICAgICAgIC8vIOS/neWtmOWxleW8gOeahOiKgueCuVxuICAgICAgICBpZiAocmVzcG9uc2VJbmZvLnJldHVyblZhbHVlICYmIHJlc3BvbnNlSW5mby5yZXR1cm5WYWx1ZS5zZWxlY3RlZFJvd0lkICYmIGNvbnRleHQgJiYgY29udGV4dC5mcmFtZUNvbnRleHQpIHtcbiAgICAgICAgICBjb25zdCBmcmFtZUNvbnRleHQgPSBjb250ZXh0LmZyYW1lQ29udGV4dCBhcyBGcmFtZUNvbnRleHQ7XG4gICAgICAgICAgY29uc3QgdmlydHVhbFJvb3RGcmFtZUNvbnRleHQgPSBmcmFtZUNvbnRleHQgJiYgZnJhbWVDb250ZXh0LmdldFZpcnR1YWxSb290RnJhbWVDb250ZXh0KCkgfHwgbnVsbDtcbiAgICAgICAgICBpZiAodmlydHVhbFJvb3RGcmFtZUNvbnRleHQpIHtcbiAgICAgICAgICAgIGNvbnN0IGxpc3QgPSByZXNwb25zZUluZm8ucmV0dXJuVmFsdWUucmVzdWx0IGFzIGFueVtdO1xuICAgICAgICAgICAgY29uc3Qgc2VsZWN0ZWRSb3dJZCA9IHJlc3BvbnNlSW5mby5yZXR1cm5WYWx1ZS5zZWxlY3RlZFJvd0lkO1xuICAgICAgICAgICAgLy8g5LuO6aG25bGC5byA5aeL6K6h566X5omA5pyJ6ZyA6KaB5bGV5byA55qE6IqC54K5XG4gICAgICAgICAgICBjb25zdCBsZWFmTm9kZUluZm8gPSBsaXN0LmZpbmQoaXRlbSA9PiBpdGVtW3JlcG9zaXRvcnkucHJpbWFyeUtleV0gPT09IHNlbGVjdGVkUm93SWQpO1xuICAgICAgICAgICAgY29uc3QgaGllcmFyY2h5SW5mbyA9IGxlYWZOb2RlSW5mb1toaWVyYXJjaHlJbmZvS2V5XSBhcyB7IGlzRGV0YWlsOiBib29sZWFuLCBsYXllcjogbnVtYmVyLCBwYXRoOiBzdHJpbmcgfTtcbiAgICAgICAgICAgIGNvbnN0IGlkcyA9IHRoaXMuZ2V0QWxsUGFyZW50SWRzKGhpZXJhcmNoeUluZm8sIGxpc3QsIGhpZXJhcmNoeUluZm9LZXksIHJlcG9zaXRvcnkpO1xuICAgICAgICAgICAgdmlydHVhbFJvb3RGcmFtZUNvbnRleHQucGFyYW1zLnNldCgnX0RFVktJVF9leHBhbmRSb3dJZHMnLCBpZHMuam9pbignLCcpKTtcbiAgICAgICAgICAgIHZpcnR1YWxSb290RnJhbWVDb250ZXh0LnBhcmFtcy5zZXQoJ19ERVZLSVRfc2VsZWN0ZWRSb3dJZCcsIHNlbGVjdGVkUm93SWQpO1xuICAgICAgICAgICAgdmlydHVhbFJvb3RGcmFtZUNvbnRleHQudWlTdGF0ZS5zZXRQcm9wZXJ0eVZhbHVlKCdfX0RFVktJVF9fc2VsZWN0ZWRSb3cnLCBzZWxlY3RlZFJvd0lkKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0pLFxuICAgICAgbWFwKChyZXNwb25zZUluZm86IFJlc3BvbnNlSW5mbykgPT4ge1xuICAgICAgICBjb25zdCBmcm96ZW5DdXJyZW50Um93OiBib29sZWFuID0gY29udGV4dCAmJiBjb250ZXh0LmZyb3plbkN1cnJlbnRSb3cgfHwgZmFsc2U7XG4gICAgICAgIC8vIOWFiOa4heepuuS4i+e6p+WunuS9k1xuICAgICAgICB0aGlzLmNsZWFyRGVzY2VuZGFudEVudGl0aWVzKHJlcG9zaXRvcnksIGhpZXJhcmNoeUluZm9LZXksIHBhdGhIaWVyYXJjaHlJbmZvLCBmcm96ZW5DdXJyZW50Um93KTtcbiAgICAgICAgLy8g6L+95Yqg5LiL57qn5a6e5L2TXG4gICAgICAgIGNvbnN0IGxpc3REYXRhID0gcmVzcG9uc2VJbmZvLnJldHVyblZhbHVlLnJlc3VsdDtcbiAgICAgICAgY29uc3QgZW50aXRpZXMgPSByZXBvc2l0b3J5LmJ1aWxkRW50aXRpZXMobGlzdERhdGEpO1xuICAgICAgICBpZiAoZnJvemVuQ3VycmVudFJvdykge1xuICAgICAgICAgIHJlcG9zaXRvcnkuZW50aXR5Q29sbGVjdGlvbi5hZGREYXRhKGVudGl0aWVzKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXBvc2l0b3J5LmVudGl0eUNvbGxlY3Rpb24uYWRkRW50aXRpZXMoZW50aXRpZXMpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBlbnRpdGllcztcbiAgICAgIH0pXG4gICAgKTtcbiAgfVxuICAvKipcbiAgICog5o+S5YWl5a+554i26IqC54K555qE6L+H5rukXG4gICAqL1xuICBwdWJsaWMgYnVpbGRGaWx0ZXJzV2l0aFBhcmVudChvcmlnaW5hbEhpZXJhcmNoeUluZm9LZXk6IHN0cmluZywgcGFyZW50SGllcmFyY2h5SW5mbzogYW55LCBmaWx0ZXJBcnJheTogYW55W10pOiBhbnkge1xuICAgIGNvbnN0IHJlbGF0aW9uVHlwZSA9IGZpbHRlckFycmF5ICYmIGZpbHRlckFycmF5Lmxlbmd0aCA+PSAxID8gMSA6IDA7XG5cbiAgICBjb25zdCBwYXJlbnRMYXllciA9IHBhcmVudEhpZXJhcmNoeUluZm8gPyBwYXJlbnRIaWVyYXJjaHlJbmZvWydsYXllciddIDogMDtcbiAgICBjb25zdCBwYXJlbnRGaWx0ZXJBcnJheSA9IFtcbiAgICAgIHtcbiAgICAgICAgXCJGaWx0ZXJGaWVsZFwiOiBgJHtvcmlnaW5hbEhpZXJhcmNoeUluZm9LZXl9LkxheWVyYCxcbiAgICAgICAgXCJWYWx1ZVwiOiBwYXJlbnRMYXllciArIDEsXG4gICAgICAgIFwiTGJyYWNrZXRcIjogbnVsbCxcbiAgICAgICAgXCJSYnJhY2tldFwiOiBudWxsLFxuICAgICAgICBcIlJlbGF0aW9uXCI6IDEsXG4gICAgICAgIFwiRXhwcmVzc3R5cGVcIjogMCxcbiAgICAgICAgXCJDb21wYXJlXCI6IDBcbiAgICAgIH1cbiAgICBdO1xuXG4gICAgLy8g54i26Lev5b6E6L+H5ruk77yM5aaC5p6c5Li656m677yM5YiZ5LiN5re75Yqg77yI5YW85a65b3JhY2xl5Y+W5pWw77yJXG4gICAgY29uc3QgcGFyZW50UGF0aCA9IHBhcmVudEhpZXJhcmNoeUluZm8gPyBwYXJlbnRIaWVyYXJjaHlJbmZvWydwYXRoJ10gOiAnJztcbiAgICBpZiAocGFyZW50UGF0aCkge1xuICAgICAgcGFyZW50RmlsdGVyQXJyYXkucHVzaCh7XG4gICAgICAgIFwiRmlsdGVyRmllbGRcIjogYCR7b3JpZ2luYWxIaWVyYXJjaHlJbmZvS2V5fS5QYXRoYCxcbiAgICAgICAgXCJWYWx1ZVwiOiBwYXJlbnRQYXRoLFxuICAgICAgICBcIkxicmFja2V0XCI6IG51bGwsXG4gICAgICAgIFwiUmJyYWNrZXRcIjogbnVsbCxcbiAgICAgICAgXCJSZWxhdGlvblwiOiByZWxhdGlvblR5cGUsXG4gICAgICAgIFwiRXhwcmVzc3R5cGVcIjogMCxcbiAgICAgICAgXCJDb21wYXJlXCI6IDdcbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBwYXJlbnRGaWx0ZXJBcnJheVswXS5SZWxhdGlvbiA9IHJlbGF0aW9uVHlwZTtcbiAgICB9XG5cbiAgICByZXR1cm4gcGFyZW50RmlsdGVyQXJyYXkuY29uY2F0KGZpbHRlckFycmF5KTtcbiAgfVxuICBwdWJsaWMgYnVpbGRFbnRpdHlGaWx0ZXIoZmlsdGVyOiBhbnlbXSwgc29ydDogYW55W10sIHBhZ2VTaXplOiBudW1iZXIsIHBhZ2VJbmRleDogbnVtYmVyKSB7XG5cbiAgICAvLyBAdG9kb++8muS4tOaXtuWFvOWuueiAgeS7o+egge+8jOmZjeS9juaUueWKqOW4puadpeeahOmjjumZqVxuICAgIGlmICghZmlsdGVyICYmICFzb3J0ICYmICFwYWdlU2l6ZSAmJiAhcGFnZUluZGV4KSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgaWYgKCFmaWx0ZXIpIHtcbiAgICAgIGZpbHRlciA9IFtdO1xuICAgIH1cbiAgICBpZiAoIXNvcnQpIHtcbiAgICAgIHNvcnQgPSBbXTtcbiAgICB9XG4gICAgLy8g57qg5q2j5pyA5ZCO5LiA5Liq6L+H5ruk5p2h5Lu255qEUmVsYXRpb25cbiAgICBpZiAoZmlsdGVyICYmIGZpbHRlci5sZW5ndGggPiAwKSB7XG4gICAgICBmaWx0ZXJbZmlsdGVyLmxlbmd0aCAtIDFdLlJlbGF0aW9uID0gMDtcbiAgICB9XG4gICAgY29uc3QgZW50aXR5RmlsdGVyID0ge1xuICAgICAgRmlsdGVyQ29uZGl0aW9uczogZmlsdGVyLFxuICAgICAgU29ydENvbmRpdGlvbnM6IHNvcnQsXG4gICAgICBJc1VzZVBhZ2luYXRpb246IHBhZ2VTaXplID09PSAwID8gZmFsc2UgOiB0cnVlLFxuICAgICAgUGFnaW5hdGlvbjoge1xuICAgICAgICBQYWdlSW5kZXg6IHBhZ2VJbmRleCxcbiAgICAgICAgUGFnZVNpemU6IHBhZ2VTaXplLFxuICAgICAgICBQYWdlQ291bnQ6IDAsXG4gICAgICAgIFRvdGFsQ291bnQ6IDBcbiAgICAgIH1cbiAgICB9O1xuICAgIHJldHVybiBlbnRpdHlGaWx0ZXI7XG4gIH1cbiAgLyoqXG4gICAqIOa4heepuuWQjuS7o+WunuS9k1xuICAgKi9cbiAgcHVibGljIGNsZWFyRGVzY2VuZGFudEVudGl0aWVzKHJlcG9zaXRvcnk6IEJlZlJlcG9zaXRvcnk8RW50aXR5PiwgaGllcmFyY2h5SW5mb2tleTogc3RyaW5nLCBwYXJlbnRIaWVyYXJjaHlJbmZvOiBhbnksIGZyb3plbkN1cnJlbnRSb3c6IGJvb2xlYW4gPSBmYWxzZSk6IHZvaWQge1xuXG4gICAgLy8g5riF56m65qC56IqC54K5XG4gICAgaWYgKCFwYXJlbnRIaWVyYXJjaHlJbmZvKSB7XG4gICAgICByZXBvc2l0b3J5LmVudGl0eUNvbGxlY3Rpb24uY2xlYXIoKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY29uc3QgZlBhdGggPSBwYXJlbnRIaWVyYXJjaHlJbmZvLnBhdGg7XG4gICAgY29uc3QgZkxheWVyID0gcGFyZW50SGllcmFyY2h5SW5mby5sYXllcjtcbiAgICBpZiAoZnJvemVuQ3VycmVudFJvdykge1xuICAgICAgcmVwb3NpdG9yeS5lbnRpdHlDb2xsZWN0aW9uLnJlbW92ZURhdGEoKGVudGl0eTogRW50aXR5KSA9PiB7XG4gICAgICAgIGNvbnN0IGhpZXJhcmNoeUluZm8gPSBlbnRpdHlbaGllcmFyY2h5SW5mb2tleV07XG4gICAgICAgIGNvbnN0IHBhdGggPSBoaWVyYXJjaHlJbmZvLnBhdGg7XG4gICAgICAgIGNvbnN0IGxheWVyID0gaGllcmFyY2h5SW5mby5sYXllcjtcbiAgICAgICAgcmV0dXJuIGxheWVyID4gZkxheWVyICYmIHBhdGguc3RhcnRzV2l0aChmUGF0aCk7XG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmVwb3NpdG9yeS5lbnRpdHlDb2xsZWN0aW9uLnJlbW92ZUVudGl0aWVzKChlbnRpdHk6IEVudGl0eSkgPT4ge1xuICAgICAgICBjb25zdCBoaWVyYXJjaHlJbmZvID0gZW50aXR5W2hpZXJhcmNoeUluZm9rZXldO1xuICAgICAgICBjb25zdCBwYXRoID0gaGllcmFyY2h5SW5mby5wYXRoO1xuICAgICAgICBjb25zdCBsYXllciA9IGhpZXJhcmNoeUluZm8ubGF5ZXI7XG4gICAgICAgIHJldHVybiBsYXllciA+IGZMYXllciAmJiBwYXRoLnN0YXJ0c1dpdGgoZlBhdGgpO1xuICAgICAgfSk7XG4gICAgfVxuXG4gIH1cblxuICAvKipcbiAgICog6I635Y+W5a6e5L2T55qE5YiG57qn5L+h5oGvXG4gICAqL1xuICBwdWJsaWMgZ2V0SGllcmFyY2h5SW5mb0J5SWQocmVwb3NpdG9yeTogQmVmUmVwb3NpdG9yeTxFbnRpdHk+LCBoaWVyYXJjaHlJbmZva2V5OiBzdHJpbmcsIGlkOiBzdHJpbmcpOiBhbnkge1xuICAgIGlmICghaWQpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICBjb25zdCBlbnRpdHk6IEVudGl0eSA9IHJlcG9zaXRvcnkuZW50aXR5Q29sbGVjdGlvbi5nZXRFbnRpdHlCeUlkKGlkKTtcbiAgICBjb25zdCBoaWVyYXJjaHlJbmZvRW50aXR5OiBFbnRpdHkgPSBlbnRpdHlbaGllcmFyY2h5SW5mb2tleV07XG4gICAgcmV0dXJuIGhpZXJhcmNoeUluZm9FbnRpdHkudG9KU09OKCk7XG4gIH1cblxuICAvKipcbiAgICog6I635Y+W5YiG57qn56CB55qE5Y6f5aeL55qE5a2X5q615ZCNXG4gICAqL1xuICBwdWJsaWMgZ2V0T3JpZ2luYWxIaWVyYXJjaHlJbmZvS2V5KHJlcG9zaXRvcnk6IEJlZlJlcG9zaXRvcnk8RW50aXR5PiwgaGllcmFyY2h5SW5mb2tleTogc3RyaW5nKTogc3RyaW5nIHtcbiAgICBjb25zdCBuZ09iamVjdHMgPSBGaWVsZE1ldGFkYXRhVXRpbC5nZXROZ09iamVjdHMocmVwb3NpdG9yeS5lbnRpdHlUeXBlKTtcbiAgICBjb25zdCBoaWVyYXJjaHlJbmZvTmdPYmplY3QgPSBuZ09iamVjdHNbaGllcmFyY2h5SW5mb2tleV07XG4gICAgcmV0dXJuIGhpZXJhcmNoeUluZm9OZ09iamVjdC5vcmlnaW5hbERhdGFGaWVsZCBhcyBzdHJpbmc7XG4gIH1cbiAgcHJpdmF0ZSBnZXRQYWdpbmF0aW9uSW5mbyhyZXNwb25zZUluZm86IFJlc3BvbnNlSW5mbykge1xuICAgIHJldHVybiByZXNwb25zZUluZm8gJiYgcmVzcG9uc2VJbmZvLnJldHVyblZhbHVlICYmIHJlc3BvbnNlSW5mby5yZXR1cm5WYWx1ZS5wYWdpbmF0aW9uIHx8IG51bGw7XG4gIH1cbiAgcHJpdmF0ZSBmaW5kUGFyZW50KGhpZXJhcmNoeUluZm86IHsgaXNEZXRhaWw6IGJvb2xlYW4sIGxheWVyOiBudW1iZXIsIHBhdGg6IHN0cmluZyB9LCBsaXN0OiBhbnlbXSwgaGllcmFyY2h5SW5mb0tleTogc3RyaW5nKSB7XG4gICAgcmV0dXJuIGxpc3QuZmluZChpdGVtID0+IHtcbiAgICAgIGNvbnN0IGN1cnJlbnRIaWVyYXJjaHlJbmZvID0gaXRlbVtoaWVyYXJjaHlJbmZvS2V5XSBhcyB7IGlzRGV0YWlsOiBib29sZWFuLCBsYXllcjogbnVtYmVyLCBwYXRoOiBzdHJpbmcgfTtcbiAgICAgIHJldHVybiBjdXJyZW50SGllcmFyY2h5SW5mby5sYXllciA9PT0gaGllcmFyY2h5SW5mby5sYXllciAtIDEgJiYgaGllcmFyY2h5SW5mby5wYXRoLnN0YXJ0c1dpdGgoY3VycmVudEhpZXJhcmNoeUluZm8ucGF0aCk7XG4gICAgfSk7XG4gIH1cbiAgcHJpdmF0ZSBnZXRBbGxQYXJlbnRJZHMoaGllcmFyY2h5SW5mbzogeyBpc0RldGFpbDogYm9vbGVhbiwgbGF5ZXI6IG51bWJlciwgcGF0aDogc3RyaW5nIH0sIGxpc3Q6IGFueVtdLCBoaWVyYXJjaHlJbmZvS2V5OiBzdHJpbmcsIHJlcG9zaXRvcnk6IFJlcG9zaXRvcnk8YW55Pikge1xuICAgIGxldCBpdGVtID0gdGhpcy5maW5kUGFyZW50KGhpZXJhcmNoeUluZm8sIGxpc3QsIGhpZXJhcmNoeUluZm9LZXkpO1xuICAgIGNvbnN0IGlkcyA9IFtdO1xuICAgIHdoaWxlIChpdGVtKSB7XG4gICAgICBpZHMucHVzaChpdGVtW3JlcG9zaXRvcnkucHJpbWFyeUtleV0pO1xuICAgICAgaXRlbSA9IHRoaXMuZmluZFBhcmVudChpdGVtW2hpZXJhcmNoeUluZm9LZXldLCBsaXN0LCBoaWVyYXJjaHlJbmZvS2V5KTtcbiAgICB9XG4gICAgcmV0dXJuIGlkcztcbiAgfVxuICBwcml2YXRlIGdldEhpZXJhcmNoeUluZm8oZW50aXR5OiBFbnRpdHksIGhpZXJhcmNoeUluZm9LZXk6IHN0cmluZyk6IHsgcGF0aDogc3RyaW5nLCBsYXllcjogbnVtYmVyLCBpc0RldGFpbDogYm9vbGVhbiB9IHtcbiAgICByZXR1cm4gZW50aXR5W2hpZXJhcmNoeUluZm9LZXldO1xuICB9XG4gIC8qKlxuICAgKiDmn6Xmib7oioLngrnkuIvmiYDmnInlrZDnuqfvvIjnrKzkuIDnuqfvvIlcbiAgICogQHBhcmFtIHJlcG9zaXRvcnkgcmVwb3NpdG9yeVxuICAgKiBAcGFyYW0gaGllcmFyY2h5SW5mb0tleSDliIbnuqfnoIHlrZfmrrVcbiAgICogQHBhcmFtIGlkIGlkXG4gICAqIEByZXR1cm5zIFxuICAgKi9cbiAgcHJpdmF0ZSBnZXRDaGlsZHJlbihyZXBvc2l0b3J5OiBCZWZSZXBvc2l0b3J5PEVudGl0eT4sIGhpZXJhcmNoeUluZm9LZXk6IHN0cmluZywgaWQ6IHN0cmluZyk6IEVudGl0eVtdIHtcbiAgICBjb25zdCBoaWVyYXJjaHlJbmZvID0gdGhpcy5nZXRIaWVyYXJjaHlJbmZvQnlJZChyZXBvc2l0b3J5LCBoaWVyYXJjaHlJbmZvS2V5LCBpZCk7XG4gICAgaWYgKCFoaWVyYXJjaHlJbmZvKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgY29uc3QgbGF5ZXIgPSBoaWVyYXJjaHlJbmZvLmxheWVyO1xuICAgIGNvbnN0IHBhdGggPSBoaWVyYXJjaHlJbmZvLnBhdGg7XG4gICAgY29uc3QgZW50aXRpZXM6IEVudGl0eVtdID0gcmVwb3NpdG9yeS5lbnRpdHlDb2xsZWN0aW9uLmdldEVudGl0aWVzKChlbnRpdHk6IEVudGl0eSkgPT4ge1xuICAgICAgY29uc3QgaGllcmFyY2h5SW5mbyA9IHRoaXMuZ2V0SGllcmFyY2h5SW5mbyhlbnRpdHksIGhpZXJhcmNoeUluZm9LZXkpO1xuICAgICAgY29uc3QgbWF0Y2hlZCA9IGhpZXJhcmNoeUluZm8ubGF5ZXIgPT09IGxheWVyICsgMSAmJiBoaWVyYXJjaHlJbmZvLnBhdGguc3RhcnRzV2l0aChwYXRoKTtcbiAgICAgIGlmIChtYXRjaGVkKSB7XG4gICAgICAgIHJldHVybiBlbnRpdHk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gZW50aXRpZXM7XG4gIH1cbn1cblxuZXhwb3J0IHsgUGF0aFRyZWVSZXBvc2l0b3J5IH07XG4iXX0=