/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable, ComponentFactoryResolver, Injector, ApplicationRef } from '@angular/core';
import { FilterPanelComponent } from './filter-panel.component';
import * as i0 from "@angular/core";
export class FilterPanelService {
    /**
     * @param {?} cfr
     * @param {?} injector
     * @param {?} appRef
     */
    constructor(cfr, injector, appRef) {
        this.cfr = cfr;
        this.injector = injector;
        this.appRef = appRef;
    }
    /**
     * @param {?} option
     * @return {?}
     */
    showPanel(option) {
        this.hidePanel();
        /** @type {?} */
        const containerFac = this.cfr.resolveComponentFactory(FilterPanelComponent);
        this.filterPanelContainer = containerFac.create(this.injector);
        this.appRef.attachView(this.filterPanelContainer.hostView);
        document.querySelector('body').appendChild(this.filterPanelContainer.location.nativeElement);
        this.filterPanelContainer.instance.option = option;
        // this.filterPanelContainer.instance.clear.subscribe((event)=>{
        //   this.clear();
        // });
        this.filterPanelContainer.changeDetectorRef.markForCheck();
        this.filterPanelContainer.changeDetectorRef.detectChanges();
        return this.filterPanelContainer.instance;
    }
    /**
     * @return {?}
     */
    hidePanel() {
        if (this.filterPanelContainer) {
            this.filterPanelContainer.instance.hide = true;
            this.filterPanelContainer.destroy();
            this.filterPanelContainer = undefined;
        }
    }
}
FilterPanelService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */
FilterPanelService.ctorParameters = () => [
    { type: ComponentFactoryResolver },
    { type: Injector },
    { type: ApplicationRef }
];
/** @nocollapse */ FilterPanelService.ngInjectableDef = i0.defineInjectable({ factory: function FilterPanelService_Factory() { return new FilterPanelService(i0.inject(i0.ComponentFactoryResolver), i0.inject(i0.INJECTOR), i0.inject(i0.ApplicationRef)); }, token: FilterPanelService, providedIn: "root" });
if (false) {
    /** @type {?} */
    FilterPanelService.prototype.filterPanelContainer;
    /**
     * @type {?}
     * @private
     */
    FilterPanelService.prototype.cfr;
    /**
     * @type {?}
     * @private
     */
    FilterPanelService.prototype.injector;
    /**
     * @type {?}
     * @private
     */
    FilterPanelService.prototype.appRef;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmlsdGVyLXBhbmVsLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZmFycmlzL3VpLWZpbHRlci1wYW5lbC8iLCJzb3VyY2VzIjpbImxpYi9maWx0ZXItcGFuZWwuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSx3QkFBd0IsRUFBRSxRQUFRLEVBQUUsY0FBYyxFQUE4QyxNQUFNLGVBQWUsQ0FBQztBQUMzSSxPQUFPLEVBQUUsb0JBQW9CLEVBQUUsTUFBTSwwQkFBMEIsQ0FBQzs7QUFNaEUsTUFBTSxPQUFPLGtCQUFrQjs7Ozs7O0lBSTNCLFlBQ1ksR0FBNkIsRUFDN0IsUUFBa0IsRUFDbEIsTUFBc0I7UUFGdEIsUUFBRyxHQUFILEdBQUcsQ0FBMEI7UUFDN0IsYUFBUSxHQUFSLFFBQVEsQ0FBVTtRQUNsQixXQUFNLEdBQU4sTUFBTSxDQUFnQjtJQUM5QixDQUFDOzs7OztJQUVMLFNBQVMsQ0FBQyxNQUF5QjtRQUMvQixJQUFJLENBQUMsU0FBUyxFQUFFLENBQUM7O2NBQ1gsWUFBWSxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsdUJBQXVCLENBQUMsb0JBQW9CLENBQUM7UUFDM0UsSUFBSSxDQUFDLG9CQUFvQixHQUFHLFlBQVksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBQy9ELElBQUksQ0FBQyxNQUFNLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUUzRCxRQUFRLENBQUMsYUFBYSxDQUFDLE1BQU0sQ0FBQyxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsb0JBQW9CLENBQUMsUUFBUSxDQUFDLGFBQWEsQ0FBQyxDQUFDO1FBRTdGLElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxRQUFRLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQztRQUNuRCxnRUFBZ0U7UUFDaEUsa0JBQWtCO1FBQ2xCLE1BQU07UUFDTixJQUFJLENBQUMsb0JBQW9CLENBQUMsaUJBQWlCLENBQUMsWUFBWSxFQUFFLENBQUM7UUFDM0QsSUFBSSxDQUFDLG9CQUFvQixDQUFDLGlCQUFpQixDQUFDLGFBQWEsRUFBRSxDQUFDO1FBQzVELE9BQU8sSUFBSSxDQUFDLG9CQUFvQixDQUFDLFFBQVEsQ0FBQztJQUM5QyxDQUFDOzs7O0lBRU0sU0FBUztRQUNaLElBQUksSUFBSSxDQUFDLG9CQUFvQixFQUFFO1lBQzNCLElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxRQUFRLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQztZQUMvQyxJQUFJLENBQUMsb0JBQW9CLENBQUMsT0FBTyxFQUFFLENBQUM7WUFDcEMsSUFBSSxDQUFDLG9CQUFvQixHQUFHLFNBQVMsQ0FBQztTQUN6QztJQUNMLENBQUM7OztZQXBDSixVQUFVLFNBQUM7Z0JBQ1IsVUFBVSxFQUFFLE1BQU07YUFDckI7Ozs7WUFOb0Isd0JBQXdCO1lBQUUsUUFBUTtZQUFFLGNBQWM7Ozs7O0lBU25FLGtEQUF5RDs7Ozs7SUFHckQsaUNBQXFDOzs7OztJQUNyQyxzQ0FBMEI7Ozs7O0lBQzFCLG9DQUE4QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUsIENvbXBvbmVudEZhY3RvcnlSZXNvbHZlciwgSW5qZWN0b3IsIEFwcGxpY2F0aW9uUmVmLCBDb21wb25lbnRSZWYsIFZpZXdDb250YWluZXJSZWYsIEVsZW1lbnRSZWYgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgRmlsdGVyUGFuZWxDb21wb25lbnQgfSBmcm9tICcuL2ZpbHRlci1wYW5lbC5jb21wb25lbnQnO1xyXG5pbXBvcnQgeyBGaWx0ZXJQYW5lbE9wdGlvbiB9IGZyb20gJy4vZmlsdGVyLXBhbmVsLmludGVyZmFjZSc7XHJcblxyXG5ASW5qZWN0YWJsZSh7XHJcbiAgICBwcm92aWRlZEluOiAncm9vdCdcclxufSlcclxuZXhwb3J0IGNsYXNzIEZpbHRlclBhbmVsU2VydmljZSB7XHJcblxyXG4gICAgZmlsdGVyUGFuZWxDb250YWluZXI6IENvbXBvbmVudFJlZjxGaWx0ZXJQYW5lbENvbXBvbmVudD47XHJcblxyXG4gICAgY29uc3RydWN0b3IoXHJcbiAgICAgICAgcHJpdmF0ZSBjZnI6IENvbXBvbmVudEZhY3RvcnlSZXNvbHZlcixcclxuICAgICAgICBwcml2YXRlIGluamVjdG9yOiBJbmplY3RvcixcclxuICAgICAgICBwcml2YXRlIGFwcFJlZjogQXBwbGljYXRpb25SZWYsXHJcbiAgICApIHsgfVxyXG5cclxuICAgIHNob3dQYW5lbChvcHRpb246IEZpbHRlclBhbmVsT3B0aW9uKSB7XHJcbiAgICAgICAgdGhpcy5oaWRlUGFuZWwoKTtcclxuICAgICAgICBjb25zdCBjb250YWluZXJGYWMgPSB0aGlzLmNmci5yZXNvbHZlQ29tcG9uZW50RmFjdG9yeShGaWx0ZXJQYW5lbENvbXBvbmVudCk7XHJcbiAgICAgICAgdGhpcy5maWx0ZXJQYW5lbENvbnRhaW5lciA9IGNvbnRhaW5lckZhYy5jcmVhdGUodGhpcy5pbmplY3Rvcik7XHJcbiAgICAgICAgdGhpcy5hcHBSZWYuYXR0YWNoVmlldyh0aGlzLmZpbHRlclBhbmVsQ29udGFpbmVyLmhvc3RWaWV3KTtcclxuXHJcbiAgICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcignYm9keScpLmFwcGVuZENoaWxkKHRoaXMuZmlsdGVyUGFuZWxDb250YWluZXIubG9jYXRpb24ubmF0aXZlRWxlbWVudCk7XHJcblxyXG4gICAgICAgIHRoaXMuZmlsdGVyUGFuZWxDb250YWluZXIuaW5zdGFuY2Uub3B0aW9uID0gb3B0aW9uO1xyXG4gICAgICAgIC8vIHRoaXMuZmlsdGVyUGFuZWxDb250YWluZXIuaW5zdGFuY2UuY2xlYXIuc3Vic2NyaWJlKChldmVudCk9PntcclxuICAgICAgICAvLyAgIHRoaXMuY2xlYXIoKTtcclxuICAgICAgICAvLyB9KTtcclxuICAgICAgICB0aGlzLmZpbHRlclBhbmVsQ29udGFpbmVyLmNoYW5nZURldGVjdG9yUmVmLm1hcmtGb3JDaGVjaygpO1xyXG4gICAgICAgIHRoaXMuZmlsdGVyUGFuZWxDb250YWluZXIuY2hhbmdlRGV0ZWN0b3JSZWYuZGV0ZWN0Q2hhbmdlcygpO1xyXG4gICAgICAgIHJldHVybiB0aGlzLmZpbHRlclBhbmVsQ29udGFpbmVyLmluc3RhbmNlO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBoaWRlUGFuZWwoKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuZmlsdGVyUGFuZWxDb250YWluZXIpIHtcclxuICAgICAgICAgICAgdGhpcy5maWx0ZXJQYW5lbENvbnRhaW5lci5pbnN0YW5jZS5oaWRlID0gdHJ1ZTtcclxuICAgICAgICAgICAgdGhpcy5maWx0ZXJQYW5lbENvbnRhaW5lci5kZXN0cm95KCk7XHJcbiAgICAgICAgICAgIHRoaXMuZmlsdGVyUGFuZWxDb250YWluZXIgPSB1bmRlZmluZWQ7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcbiJdfQ==