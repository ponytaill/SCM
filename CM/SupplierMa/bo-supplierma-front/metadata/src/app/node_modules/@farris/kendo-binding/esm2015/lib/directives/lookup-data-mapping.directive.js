/*
 * @Author: 疯狂秀才(lucas huang)
 * @Date: 2018-11-07 16:31:57
 * @LastEditors: 疯狂秀才(Lucas Huang)
 * @LastEditTime: 2019-09-27 14:57:22
 * @Company: Inspur
 * @Version: v0.0.1
 */
/**
 * 使用方法：
 * [data-mapping]="{ id: 'user.userId', name: 'user.userName' }"
 * key 为帮助上的字段， value 为 表单中的字段名
 * 帮助上的同一个字段可以映射到表单中的多个字段中，{ ... id: 'user.userid, user.addusid'}
 * 多字段以逗号隔开
 *
 */
import { Directive, Optional, Self, Input } from '@angular/core';
import { BindingObject, ViewModel } from '@farris/devkit';
import { LookupGridComponent } from '@farris/ui-lookup';
import { DataMapping } from './data-mapping';
export class LookupDataMappingDirective extends DataMapping {
    constructor(vm, lookup) {
        super();
        this.vm = vm;
        this.lookup = lookup;
        this.target = null;
    }
    ngOnInit() {
        this.lookup.selectedData.subscribe((data) => {
            const _mapfields = this.mapfields || this.lookup.mapFields;
            this.mappingData(data, _mapfields);
        });
        this.lookup.clearMappings.subscribe((result) => {
            // const value = result && result.value || null;
            const mapfields = Object.assign({}, (this.mapfields || this.lookup.mapFields || {}));
            const lookupTextField = this.lookup.textField;
            const data = {};
            const controlName = this.lookup.ngControl && this.lookup.ngControl.name;
            if (controlName && this.vm) {
                const textFieldMapping = mapfields[lookupTextField];
                const ngFormControl = this.vm && this.vm.form && this.vm.form.ngFormControls && this.vm.form.ngFormControls[controlName];
                const binding = ngFormControl && ngFormControl.binding;
                if (textFieldMapping && binding) {
                    mapfields[lookupTextField] = textFieldMapping.split(',').filter(item => item !== binding).join(',');
                }
            }
            // this.setValue(data, lookupTextField.split('.'), value);
            Object.keys(mapfields).forEach(field => {
                this.setValue(data, field.split('.'), '');
            });
            this.mappingData(data, mapfields, true);
        });
        this.lookup.clear.subscribe(() => {
            const _mapfields = this.mapfields || this.lookup.mapFields;
            this.mappingData(null, _mapfields);
        });
    }
}
LookupDataMappingDirective.decorators = [
    { type: Directive, args: [{ selector: '[data-mapping]' },] }
];
/** @nocollapse */
LookupDataMappingDirective.ctorParameters = () => [
    { type: ViewModel, decorators: [{ type: Optional }] },
    { type: LookupGridComponent, decorators: [{ type: Optional }, { type: Self }] }
];
LookupDataMappingDirective.propDecorators = {
    mapfields: [{ type: Input, args: ['data-mapping',] }],
    target: [{ type: Input, args: ['target',] }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9va3VwLWRhdGEtbWFwcGluZy5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZmFycmlzL2tlbmRvLWJpbmRpbmcvIiwic291cmNlcyI6WyJsaWIvZGlyZWN0aXZlcy9sb29rdXAtZGF0YS1tYXBwaW5nLmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7OztHQU9HO0FBRUg7Ozs7Ozs7R0FPRztBQUVILE9BQU8sRUFBRSxTQUFTLEVBQVUsUUFBUSxFQUFFLElBQUksRUFBRSxLQUFLLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDekUsT0FBTyxFQUFFLGFBQWEsRUFBNkMsU0FBUyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDckcsT0FBTyxFQUFFLG1CQUFtQixFQUFFLE1BQU0sbUJBQW1CLENBQUM7QUFDeEQsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBSTdDLE1BQU0sT0FBTywwQkFBMkIsU0FBUSxXQUFXO0lBS3pELFlBQStCLEVBQWEsRUFBOEIsTUFBMkI7UUFDbkcsS0FBSyxFQUFFLENBQUM7UUFEcUIsT0FBRSxHQUFGLEVBQUUsQ0FBVztRQUE4QixXQUFNLEdBQU4sTUFBTSxDQUFxQjtRQUZwRixXQUFNLEdBQWtCLElBQUksQ0FBQztJQUk5QyxDQUFDO0lBRUQsUUFBUTtRQUNOLElBQUksQ0FBQyxNQUFNLENBQUMsWUFBWSxDQUFDLFNBQVMsQ0FBQyxDQUFDLElBQVMsRUFBRSxFQUFFO1lBQy9DLE1BQU0sVUFBVSxHQUFHLElBQUksQ0FBQyxTQUFTLElBQUksSUFBSSxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUM7WUFDM0QsSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLEVBQUUsVUFBVSxDQUFDLENBQUM7UUFDckMsQ0FBQyxDQUFDLENBQUM7UUFDSCxJQUFJLENBQUMsTUFBTSxDQUFDLGFBQWEsQ0FBQyxTQUFTLENBQUMsQ0FBQyxNQUFXLEVBQUUsRUFBRTtZQUNsRCxnREFBZ0Q7WUFDaEQsTUFBTSxTQUFTLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUMsU0FBUyxJQUFJLElBQUksQ0FBQyxNQUFNLENBQUMsU0FBUyxJQUFJLEVBQUUsQ0FBQyxDQUFDLENBQUM7WUFDckYsTUFBTSxlQUFlLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUM7WUFDOUMsTUFBTSxJQUFJLEdBQUcsRUFBRSxDQUFDO1lBQ2hCLE1BQU0sV0FBVyxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsU0FBUyxJQUFJLElBQUksQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQztZQUN4RSxJQUFJLFdBQVcsSUFBSSxJQUFJLENBQUMsRUFBRSxFQUFFO2dCQUMxQixNQUFNLGdCQUFnQixHQUFHLFNBQVMsQ0FBQyxlQUFlLENBQUMsQ0FBQztnQkFDcEQsTUFBTSxhQUFhLEdBQUcsSUFBSSxDQUFDLEVBQUUsSUFBSSxJQUFJLENBQUMsRUFBRSxDQUFDLElBQUksSUFBSSxJQUFJLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxjQUFjLElBQUksSUFBSSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDLFdBQVcsQ0FBa0IsQ0FBQztnQkFDMUksTUFBTSxPQUFPLEdBQUcsYUFBYSxJQUFJLGFBQWEsQ0FBQyxPQUFPLENBQUM7Z0JBQ3ZELElBQUksZ0JBQWdCLElBQUksT0FBTyxFQUFFO29CQUMvQixTQUFTLENBQUMsZUFBZSxDQUFDLEdBQUcsZ0JBQWdCLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLElBQUksS0FBSyxPQUFPLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7aUJBQ3JHO2FBQ0Y7WUFDRCwwREFBMEQ7WUFDMUQsTUFBTSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLEVBQUU7Z0JBQ3JDLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxFQUFFLEtBQUssQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUM7WUFDNUMsQ0FBQyxDQUFDLENBQUM7WUFDSCxJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksRUFBRSxTQUFTLEVBQUUsSUFBSSxDQUFDLENBQUM7UUFDMUMsQ0FBQyxDQUFDLENBQUM7UUFDSCxJQUFJLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxTQUFTLENBQUMsR0FBRyxFQUFFO1lBQy9CLE1BQU0sVUFBVSxHQUFHLElBQUksQ0FBQyxTQUFTLElBQUksSUFBSSxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUM7WUFDM0QsSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLEVBQUUsVUFBVSxDQUFDLENBQUM7UUFDckMsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDOzs7WUF2Q0YsU0FBUyxTQUFDLEVBQUUsUUFBUSxFQUFFLGdCQUFnQixFQUFFOzs7O1lBTDBCLFNBQVMsdUJBVzdELFFBQVE7WUFWZCxtQkFBbUIsdUJBVXFCLFFBQVEsWUFBSSxJQUFJOzs7d0JBSDlELEtBQUssU0FBQyxjQUFjO3FCQUNwQixLQUFLLFNBQUMsUUFBUSIsInNvdXJjZXNDb250ZW50IjpbIi8qXHJcbiAqIEBBdXRob3I6IOeWr+eLguengOaJjShsdWNhcyBodWFuZylcclxuICogQERhdGU6IDIwMTgtMTEtMDcgMTY6MzE6NTdcclxuICogQExhc3RFZGl0b3JzOiDnlq/ni4Lnp4DmiY0oTHVjYXMgSHVhbmcpXHJcbiAqIEBMYXN0RWRpdFRpbWU6IDIwMTktMDktMjcgMTQ6NTc6MjJcclxuICogQENvbXBhbnk6IEluc3B1clxyXG4gKiBAVmVyc2lvbjogdjAuMC4xXHJcbiAqL1xyXG5cclxuLyoqXHJcbiAqIOS9v+eUqOaWueazle+8mlxyXG4gKiBbZGF0YS1tYXBwaW5nXT1cInsgaWQ6ICd1c2VyLnVzZXJJZCcsIG5hbWU6ICd1c2VyLnVzZXJOYW1lJyB9XCJcclxuICoga2V5IOS4uuW4ruWKqeS4iueahOWtl+aute+8jCB2YWx1ZSDkuLog6KGo5Y2V5Lit55qE5a2X5q615ZCNXHJcbiAqIOW4ruWKqeS4iueahOWQjOS4gOS4quWtl+auteWPr+S7peaYoOWwhOWIsOihqOWNleS4reeahOWkmuS4quWtl+auteS4re+8jHsgLi4uIGlkOiAndXNlci51c2VyaWQsIHVzZXIuYWRkdXNpZCd9XHJcbiAqIOWkmuWtl+auteS7pemAl+WPt+malOW8gFxyXG4gKlxyXG4gKi9cclxuXHJcbmltcG9ydCB7IERpcmVjdGl2ZSwgT25Jbml0LCBPcHRpb25hbCwgU2VsZiwgSW5wdXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgQmluZGluZ09iamVjdCwgRGF0YVByb3BJbmZvLCBEYXRhVHlwZUluZm8sIE5nRm9ybUNvbnRyb2wsIFZpZXdNb2RlbCB9IGZyb20gJ0BmYXJyaXMvZGV2a2l0JztcclxuaW1wb3J0IHsgTG9va3VwR3JpZENvbXBvbmVudCB9IGZyb20gJ0BmYXJyaXMvdWktbG9va3VwJztcclxuaW1wb3J0IHsgRGF0YU1hcHBpbmcgfSBmcm9tICcuL2RhdGEtbWFwcGluZyc7XHJcblxyXG5cclxuQERpcmVjdGl2ZSh7IHNlbGVjdG9yOiAnW2RhdGEtbWFwcGluZ10nIH0pXHJcbmV4cG9ydCBjbGFzcyBMb29rdXBEYXRhTWFwcGluZ0RpcmVjdGl2ZSBleHRlbmRzIERhdGFNYXBwaW5nIGltcGxlbWVudHMgT25Jbml0IHtcclxuXHJcbiAgQElucHV0KCdkYXRhLW1hcHBpbmcnKSBtYXBmaWVsZHM6IGFueTtcclxuICBASW5wdXQoJ3RhcmdldCcpIHRhcmdldDogQmluZGluZ09iamVjdCA9IG51bGw7XHJcblxyXG4gIGNvbnN0cnVjdG9yKEBPcHRpb25hbCgpIHB1YmxpYyB2bTogVmlld01vZGVsLCBAT3B0aW9uYWwoKSBAU2VsZigpIHByaXZhdGUgbG9va3VwOiBMb29rdXBHcmlkQ29tcG9uZW50KSB7XHJcbiAgICBzdXBlcigpO1xyXG4gIH1cclxuXHJcbiAgbmdPbkluaXQoKSB7XHJcbiAgICB0aGlzLmxvb2t1cC5zZWxlY3RlZERhdGEuc3Vic2NyaWJlKChkYXRhOiBhbnkpID0+IHtcclxuICAgICAgY29uc3QgX21hcGZpZWxkcyA9IHRoaXMubWFwZmllbGRzIHx8IHRoaXMubG9va3VwLm1hcEZpZWxkcztcclxuICAgICAgdGhpcy5tYXBwaW5nRGF0YShkYXRhLCBfbWFwZmllbGRzKTtcclxuICAgIH0pO1xyXG4gICAgdGhpcy5sb29rdXAuY2xlYXJNYXBwaW5ncy5zdWJzY3JpYmUoKHJlc3VsdDogYW55KSA9PiB7XHJcbiAgICAgIC8vIGNvbnN0IHZhbHVlID0gcmVzdWx0ICYmIHJlc3VsdC52YWx1ZSB8fCBudWxsO1xyXG4gICAgICBjb25zdCBtYXBmaWVsZHMgPSBPYmplY3QuYXNzaWduKHt9LCAodGhpcy5tYXBmaWVsZHMgfHwgdGhpcy5sb29rdXAubWFwRmllbGRzIHx8IHt9KSk7XHJcbiAgICAgIGNvbnN0IGxvb2t1cFRleHRGaWVsZCA9IHRoaXMubG9va3VwLnRleHRGaWVsZDtcclxuICAgICAgY29uc3QgZGF0YSA9IHt9O1xyXG4gICAgICBjb25zdCBjb250cm9sTmFtZSA9IHRoaXMubG9va3VwLm5nQ29udHJvbCAmJiB0aGlzLmxvb2t1cC5uZ0NvbnRyb2wubmFtZTtcclxuICAgICAgaWYgKGNvbnRyb2xOYW1lICYmIHRoaXMudm0pIHtcclxuICAgICAgICBjb25zdCB0ZXh0RmllbGRNYXBwaW5nID0gbWFwZmllbGRzW2xvb2t1cFRleHRGaWVsZF07XHJcbiAgICAgICAgY29uc3QgbmdGb3JtQ29udHJvbCA9IHRoaXMudm0gJiYgdGhpcy52bS5mb3JtICYmIHRoaXMudm0uZm9ybS5uZ0Zvcm1Db250cm9scyAmJiB0aGlzLnZtLmZvcm0ubmdGb3JtQ29udHJvbHNbY29udHJvbE5hbWVdIGFzIE5nRm9ybUNvbnRyb2w7XHJcbiAgICAgICAgY29uc3QgYmluZGluZyA9IG5nRm9ybUNvbnRyb2wgJiYgbmdGb3JtQ29udHJvbC5iaW5kaW5nO1xyXG4gICAgICAgIGlmICh0ZXh0RmllbGRNYXBwaW5nICYmIGJpbmRpbmcpIHtcclxuICAgICAgICAgIG1hcGZpZWxkc1tsb29rdXBUZXh0RmllbGRdID0gdGV4dEZpZWxkTWFwcGluZy5zcGxpdCgnLCcpLmZpbHRlcihpdGVtID0+IGl0ZW0gIT09IGJpbmRpbmcpLmpvaW4oJywnKTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgICAgLy8gdGhpcy5zZXRWYWx1ZShkYXRhLCBsb29rdXBUZXh0RmllbGQuc3BsaXQoJy4nKSwgdmFsdWUpO1xyXG4gICAgICBPYmplY3Qua2V5cyhtYXBmaWVsZHMpLmZvckVhY2goZmllbGQgPT4ge1xyXG4gICAgICAgIHRoaXMuc2V0VmFsdWUoZGF0YSwgZmllbGQuc3BsaXQoJy4nKSwgJycpO1xyXG4gICAgICB9KTtcclxuICAgICAgdGhpcy5tYXBwaW5nRGF0YShkYXRhLCBtYXBmaWVsZHMsIHRydWUpO1xyXG4gICAgfSk7XHJcbiAgICB0aGlzLmxvb2t1cC5jbGVhci5zdWJzY3JpYmUoKCkgPT4ge1xyXG4gICAgICBjb25zdCBfbWFwZmllbGRzID0gdGhpcy5tYXBmaWVsZHMgfHwgdGhpcy5sb29rdXAubWFwRmllbGRzO1xyXG4gICAgICB0aGlzLm1hcHBpbmdEYXRhKG51bGwsIF9tYXBmaWVsZHMpO1xyXG4gICAgfSk7XHJcbiAgfVxyXG59XHJcbiJdfQ==