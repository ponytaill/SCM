import { MetadataUtil } from '../../core/index';
import { PRIMITIVE_PROP_META, OBJECT_PROP_META, DYNAMIC_PROP_META, LIST_PROP_META } from './field_decorator';
/**
 * 实体元数据工具类
 */
export class EntityMetadataUtil {
    /**
     * 获取所有属性
     * @todo：封装根据基类获取所有元数据的方法，解决重复代码
     */
    static getAllNgProperties(entityType) {
        const ngPlainProperties = this.getNgFieldProperties(entityType);
        const ngEntityProperties = this.getNgObjectProperties(entityType);
        const ngDynamicProperties = this.getNgDynamicProperties(entityType);
        const ngEntityListProperties = this.getNgObjectProperties(entityType);
        return Object.assign({}, ngPlainProperties, ngEntityProperties, ngDynamicProperties, ngEntityListProperties);
    }
    /**
     * 获取NgField的属性元数据
     */
    static getNgFieldProperties(entityType) {
        return MetadataUtil.getPropsMetadatasByName(entityType, PRIMITIVE_PROP_META);
    }
    /**
     * 获取NgObject属性元数据
     */
    static getNgObjectProperties(entityType) {
        return MetadataUtil.getPropsMetadatasByName(entityType, OBJECT_PROP_META);
    }
    /**
     * 获取NgDynamic属性元数据
     */
    static getNgDynamicProperties(entityType) {
        return MetadataUtil.getPropsMetadatasByName(entityType, DYNAMIC_PROP_META);
    }
    /**
     * 获取NgList属性元数据
     */
    static getNgListProperties(entityType) {
        return MetadataUtil.getPropsMetadatasByName(entityType, LIST_PROP_META);
    }
    /**
     * 获取主键属性元数据
     */
    static getPrimaryKeyProperty(entityType) {
        let primaryKeyProperty;
        const ngPlainProperties = EntityMetadataUtil.getNgFieldProperties(entityType);
        Object.keys(ngPlainProperties).forEach((propName) => {
            const ngProperty = ngPlainProperties[propName];
            if (ngProperty.primary === true) {
                primaryKeyProperty = ngProperty;
            }
        });
        return primaryKeyProperty;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZW50aXR5X21ldGFkYXRhX3V0aWwuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZmFycmlzL21vYmlsZS1kZXZraXQvIiwic291cmNlcyI6WyJsaWIvZW50aXR5L21ldGFkYXRhL2VudGl0eV9tZXRhZGF0YV91dGlsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQztBQUdoRCxPQUFPLEVBQ1MsbUJBQW1CLEVBQXlCLGdCQUFnQixFQUMxRSxpQkFBaUIsRUFBdUIsY0FBYyxFQUN2RCxNQUFNLG1CQUFtQixDQUFDO0FBRTNCOztHQUVHO0FBQ0gsTUFBTSxPQUFPLGtCQUFrQjtJQUU3Qjs7O09BR0c7SUFDSCxNQUFNLENBQUMsa0JBQWtCLENBQUMsVUFBd0I7UUFDaEQsTUFBTSxpQkFBaUIsR0FBRyxJQUFJLENBQUMsb0JBQW9CLENBQUMsVUFBVSxDQUFDLENBQUM7UUFDaEUsTUFBTSxrQkFBa0IsR0FBRyxJQUFJLENBQUMscUJBQXFCLENBQUMsVUFBVSxDQUFDLENBQUM7UUFDbEUsTUFBTSxtQkFBbUIsR0FBRyxJQUFJLENBQUMsc0JBQXNCLENBQUMsVUFBVSxDQUFDLENBQUM7UUFDcEUsTUFBTSxzQkFBc0IsR0FBRyxJQUFJLENBQUMscUJBQXFCLENBQUMsVUFBVSxDQUFDLENBQUM7UUFFdEUsT0FBTyxNQUFNLENBQUMsTUFBTSxDQUFDLEVBQUUsRUFDckIsaUJBQWlCLEVBQUksa0JBQWtCLEVBQ3ZDLG1CQUFtQixFQUFFLHNCQUFzQixDQUM1QyxDQUFDO0lBQ0osQ0FBQztJQUVEOztPQUVHO0lBQ0gsTUFBTSxDQUFDLG9CQUFvQixDQUFDLFVBQWU7UUFDekMsT0FBTyxZQUFZLENBQUMsdUJBQXVCLENBQUMsVUFBVSxFQUFFLG1CQUFtQixDQUFDLENBQUM7SUFDL0UsQ0FBQztJQUVEOztPQUVHO0lBQ0gsTUFBTSxDQUFDLHFCQUFxQixDQUFDLFVBQWU7UUFDMUMsT0FBTyxZQUFZLENBQUMsdUJBQXVCLENBQUMsVUFBVSxFQUFFLGdCQUFnQixDQUFDLENBQUM7SUFDNUUsQ0FBQztJQUVEOztPQUVHO0lBQ0gsTUFBTSxDQUFDLHNCQUFzQixDQUFDLFVBQWU7UUFDM0MsT0FBTyxZQUFZLENBQUMsdUJBQXVCLENBQUMsVUFBVSxFQUFFLGlCQUFpQixDQUFDLENBQUM7SUFDN0UsQ0FBQztJQUVEOztPQUVHO0lBQ0gsTUFBTSxDQUFDLG1CQUFtQixDQUFDLFVBQWU7UUFDeEMsT0FBTyxZQUFZLENBQUMsdUJBQXVCLENBQUMsVUFBVSxFQUFFLGNBQWMsQ0FBQyxDQUFDO0lBQzFFLENBQUM7SUFFRDs7T0FFRztJQUNILE1BQU0sQ0FBQyxxQkFBcUIsQ0FBQyxVQUF3QjtRQUNuRCxJQUFJLGtCQUFrQixDQUFDO1FBQ3ZCLE1BQU0saUJBQWlCLEdBQUcsa0JBQWtCLENBQUMsb0JBQW9CLENBQUMsVUFBVSxDQUFDLENBQUM7UUFDOUUsTUFBTSxDQUFDLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLFFBQWdCLEVBQUUsRUFBRTtZQUMxRCxNQUFNLFVBQVUsR0FBRyxpQkFBaUIsQ0FBQyxRQUFRLENBQTBCLENBQUM7WUFDeEUsSUFBSSxVQUFVLENBQUMsT0FBTyxLQUFLLElBQUksRUFBRTtnQkFDL0Isa0JBQWtCLEdBQUcsVUFBVSxDQUFDO2FBQ2pDO1FBQ0gsQ0FBQyxDQUFDLENBQUM7UUFFSCxPQUFPLGtCQUFrQixDQUFDO0lBQzVCLENBQUM7Q0FDRiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFR5cGUgfSBmcm9tICcuLi8uLi9jb3JlL2luZGV4JztcclxuaW1wb3J0IHsgTWV0YWRhdGFVdGlsIH0gZnJvbSAnLi4vLi4vY29yZS9pbmRleCc7XHJcbmltcG9ydCB7IEVudGl0eSB9IGZyb20gJy4uL2VudGl0eSc7XHJcblxyXG5pbXBvcnQge1xyXG4gIFByb3BNZXRhZGF0YSwgUFJJTUlUSVZFX1BST1BfTUVUQSwgUHJpbWl0aXZlUHJvcE1ldGFkYXRhLCBPQkpFQ1RfUFJPUF9NRVRBLCBPYmplY3RQcm9wTWV0YWRhdGEsXHJcbiAgRFlOQU1JQ19QUk9QX01FVEEsIER5bmFtaWNQcm9wTWV0YWRhdGEsIExJU1RfUFJPUF9NRVRBLCAgICBMaXN0UHJvcE1ldGFkYXRhXHJcbn0gZnJvbSAnLi9maWVsZF9kZWNvcmF0b3InO1xyXG5cclxuLyoqXHJcbiAqIOWunuS9k+WFg+aVsOaNruW3peWFt+exu1xyXG4gKi9cclxuZXhwb3J0IGNsYXNzIEVudGl0eU1ldGFkYXRhVXRpbCB7XHJcblxyXG4gIC8qKlxyXG4gICAqIOiOt+WPluaJgOacieWxnuaAp1xyXG4gICAqIEB0b2Rv77ya5bCB6KOF5qC55o2u5Z+657G76I635Y+W5omA5pyJ5YWD5pWw5o2u55qE5pa55rOV77yM6Kej5Yaz6YeN5aSN5Luj56CBXHJcbiAgICovXHJcbiAgc3RhdGljIGdldEFsbE5nUHJvcGVydGllcyhlbnRpdHlUeXBlOiBUeXBlPEVudGl0eT4pOiB7IFtwcm9wTmFtZTogc3RyaW5nXTogUHJvcE1ldGFkYXRhIH0ge1xyXG4gICAgY29uc3QgbmdQbGFpblByb3BlcnRpZXMgPSB0aGlzLmdldE5nRmllbGRQcm9wZXJ0aWVzKGVudGl0eVR5cGUpO1xyXG4gICAgY29uc3QgbmdFbnRpdHlQcm9wZXJ0aWVzID0gdGhpcy5nZXROZ09iamVjdFByb3BlcnRpZXMoZW50aXR5VHlwZSk7XHJcbiAgICBjb25zdCBuZ0R5bmFtaWNQcm9wZXJ0aWVzID0gdGhpcy5nZXROZ0R5bmFtaWNQcm9wZXJ0aWVzKGVudGl0eVR5cGUpO1xyXG4gICAgY29uc3QgbmdFbnRpdHlMaXN0UHJvcGVydGllcyA9IHRoaXMuZ2V0TmdPYmplY3RQcm9wZXJ0aWVzKGVudGl0eVR5cGUpO1xyXG5cclxuICAgIHJldHVybiBPYmplY3QuYXNzaWduKHt9LFxyXG4gICAgICBuZ1BsYWluUHJvcGVydGllcywgICBuZ0VudGl0eVByb3BlcnRpZXMsXHJcbiAgICAgIG5nRHluYW1pY1Byb3BlcnRpZXMsIG5nRW50aXR5TGlzdFByb3BlcnRpZXNcclxuICAgICk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDojrflj5ZOZ0ZpZWxk55qE5bGe5oCn5YWD5pWw5o2uXHJcbiAgICovXHJcbiAgc3RhdGljIGdldE5nRmllbGRQcm9wZXJ0aWVzKGVudGl0eVR5cGU6IGFueSk6IHsgW3Byb3BOYW1lOiBzdHJpbmddOiBQcmltaXRpdmVQcm9wTWV0YWRhdGEgfSB7XHJcbiAgICByZXR1cm4gTWV0YWRhdGFVdGlsLmdldFByb3BzTWV0YWRhdGFzQnlOYW1lKGVudGl0eVR5cGUsIFBSSU1JVElWRV9QUk9QX01FVEEpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog6I635Y+WTmdPYmplY3TlsZ7mgKflhYPmlbDmja5cclxuICAgKi9cclxuICBzdGF0aWMgZ2V0TmdPYmplY3RQcm9wZXJ0aWVzKGVudGl0eVR5cGU6IGFueSk6IHsgW3Byb3BOYW1lOiBzdHJpbmddOiBPYmplY3RQcm9wTWV0YWRhdGEgfSB7XHJcbiAgICByZXR1cm4gTWV0YWRhdGFVdGlsLmdldFByb3BzTWV0YWRhdGFzQnlOYW1lKGVudGl0eVR5cGUsIE9CSkVDVF9QUk9QX01FVEEpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog6I635Y+WTmdEeW5hbWlj5bGe5oCn5YWD5pWw5o2uXHJcbiAgICovXHJcbiAgc3RhdGljIGdldE5nRHluYW1pY1Byb3BlcnRpZXMoZW50aXR5VHlwZTogYW55KTogeyBbcHJvcE5hbWU6IHN0cmluZ106IER5bmFtaWNQcm9wTWV0YWRhdGEgfSB7XHJcbiAgICByZXR1cm4gTWV0YWRhdGFVdGlsLmdldFByb3BzTWV0YWRhdGFzQnlOYW1lKGVudGl0eVR5cGUsIERZTkFNSUNfUFJPUF9NRVRBKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOiOt+WPlk5nTGlzdOWxnuaAp+WFg+aVsOaNrlxyXG4gICAqL1xyXG4gIHN0YXRpYyBnZXROZ0xpc3RQcm9wZXJ0aWVzKGVudGl0eVR5cGU6IGFueSk6IHsgW3Byb3BOYW1lOiBzdHJpbmddOiBMaXN0UHJvcE1ldGFkYXRhIH0ge1xyXG4gICAgcmV0dXJuIE1ldGFkYXRhVXRpbC5nZXRQcm9wc01ldGFkYXRhc0J5TmFtZShlbnRpdHlUeXBlLCBMSVNUX1BST1BfTUVUQSk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDojrflj5bkuLvplK7lsZ7mgKflhYPmlbDmja5cclxuICAgKi9cclxuICBzdGF0aWMgZ2V0UHJpbWFyeUtleVByb3BlcnR5KGVudGl0eVR5cGU6IFR5cGU8RW50aXR5Pik6IFByaW1pdGl2ZVByb3BNZXRhZGF0YSB7XHJcbiAgICBsZXQgcHJpbWFyeUtleVByb3BlcnR5O1xyXG4gICAgY29uc3QgbmdQbGFpblByb3BlcnRpZXMgPSBFbnRpdHlNZXRhZGF0YVV0aWwuZ2V0TmdGaWVsZFByb3BlcnRpZXMoZW50aXR5VHlwZSk7XHJcbiAgICBPYmplY3Qua2V5cyhuZ1BsYWluUHJvcGVydGllcykuZm9yRWFjaCgocHJvcE5hbWU6IHN0cmluZykgPT4ge1xyXG4gICAgICBjb25zdCBuZ1Byb3BlcnR5ID0gbmdQbGFpblByb3BlcnRpZXNbcHJvcE5hbWVdIGFzIFByaW1pdGl2ZVByb3BNZXRhZGF0YTtcclxuICAgICAgaWYgKG5nUHJvcGVydHkucHJpbWFyeSA9PT0gdHJ1ZSkge1xyXG4gICAgICAgIHByaW1hcnlLZXlQcm9wZXJ0eSA9IG5nUHJvcGVydHk7XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG5cclxuICAgIHJldHVybiBwcmltYXJ5S2V5UHJvcGVydHk7XHJcbiAgfVxyXG59XHJcbiJdfQ==