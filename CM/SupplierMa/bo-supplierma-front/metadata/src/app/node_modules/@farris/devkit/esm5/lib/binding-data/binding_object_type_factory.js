import * as tslib_1 from "tslib";
import { BindingPropertyType } from './binding_property';
import { PropertyUtil } from './property_util';
import { BaseBindingObject } from './base_binding_object';
import { BindingListFactory } from './binding_list_factory';
import { TranslateService } from '../i18n/translate_service';
// import { BindingObjectFactory } from './binding_object_factory';
/**
 * BindingObjectTypeFactory
 */
var BindingObjectTypeFactory = /** @class */ (function () {
    function BindingObjectTypeFactory() {
    }
    /**
     * 创建BindingObject
     * @param properties
     * @param data
     * @returns
     */
    BindingObjectTypeFactory.create = function (properties /*, data?: any*/) {
        var bindingObjectType = this.getType(properties);
        return new bindingObjectType();
    };
    /**
     * 创建原型类型
     * @param properties
     * @returns
     */
    BindingObjectTypeFactory.createType = function (properties) {
        // 继承原绑定对象所有属性
        var bindingObjectType = /** @class */ (function (_super) {
            tslib_1.__extends(BindingObjectType, _super);
            function BindingObjectType() {
                return _super.call(this) || this;
                // this.innerValues = ImmutableMap(Object.assign({}, data));
            }
            return BindingObjectType;
        }(BaseBindingObject));
        // 获取主键
        var primaryKey = PropertyUtil.getPrimaryKey(properties);
        // 设置主键
        bindingObjectType.prototype.primaryKey = primaryKey;
        bindingObjectType.prototype.properties = properties;
        // 将属性扩展到原型对象上
        this.extendProperties(bindingObjectType.prototype, properties);
        return bindingObjectType;
    };
    /**
     * 扩展原型属性
     * @param typePrototype
     * @param properties
     */
    BindingObjectTypeFactory.extendProperties = function (typePrototype, properties) {
        var _this = this;
        // 扩展BindingObject属性
        properties.forEach(function (property) {
            if (property.type === BindingPropertyType.List) {
                _this.extendListProperty(typePrototype, property);
            }
            else if (property.type === BindingPropertyType.Object) {
                _this.extendObjectProperty(typePrototype, property);
            }
            else if (property.type === BindingPropertyType.Dynamic) {
                _this.extendDynamicObjectProperty(typePrototype, property);
            }
            else {
                _this.extendPlainProperty(typePrototype, property);
            }
        });
    };
    /**
     * 扩展原型列表属性
     * @param typePrototype
     * @param property
     */
    BindingObjectTypeFactory.extendListProperty = function (typePrototype, property) {
        var propertyName = property.name;
        var childListProperties = PropertyUtil.getProperties(property.entityType);
        var key = "_" + propertyName + "_";
        // 将子的BindingList实例赋值给当前属性
        Object.defineProperty(typePrototype, propertyName, {
            get: function () {
                var _this = this;
                var bindingList = this[key];
                if (!bindingList) {
                    bindingList = BindingListFactory.create(childListProperties);
                    this[key] = bindingList;
                    // 加载数据
                    var data = this.getValue(propertyName);
                    if (data) {
                        var bindingObjects = data.map(function (item) {
                            var bindingObject = BindingObjectTypeFactory.create(childListProperties);
                            return bindingObject;
                        });
                        bindingList.load(bindingObjects);
                    }
                    // 指定子List的parent、监听子List的changes事件
                    bindingList.parent = this;
                    bindingList.changes.subscribe(function (change) {
                        change.path.unshift(propertyName);
                        _this.changes.next(change);
                    });
                }
                return bindingList;
            },
            set: function (bindingList) {
                this[key] = bindingList;
            }
        });
    };
    /**
     * 扩展原型对象属性
     * @param typePrototype
     * @param property
     */
    BindingObjectTypeFactory.extendObjectProperty = function (typePrototype, property) {
        var propertyName = property.name;
        var childObjectProperties = PropertyUtil.getProperties(property.entityType);
        var key = "_" + propertyName + "_";
        Object.defineProperty(typePrototype, propertyName, {
            get: function () {
                var _this = this;
                var bindingObject = this[key];
                if (!bindingObject) {
                    var value = this.getValue(propertyName) || {};
                    bindingObject = BindingObjectTypeFactory.create(childObjectProperties);
                    this[key] = bindingObject;
                    // 指定子Object的parent、监听子Object的changes事件
                    bindingObject.parent = this;
                    bindingObject.changes.subscribe(function (change) {
                        change.path.unshift(propertyName);
                        _this.changes.next(change);
                    });
                }
                return bindingObject;
            },
            set: function (value) {
                this[key] = value;
            }
        });
    };
    /**
     * 扩展原型动态属性
     * @param typePrototype
     * @param property
     */
    BindingObjectTypeFactory.extendDynamicObjectProperty = function (typePrototype, property) {
        var propertyName = property.name;
        // Object.defineProperty(typePrototype, propertyName, {
        //   value: null
        // });
        typePrototype[propertyName] = null;
    };
    /**
     * 扩展原型简单属性
     * @param typePrototype
     * @param property
     */
    BindingObjectTypeFactory.extendPlainProperty = function (typePrototype, property) {
        var propertyName = property.name;
        Object.defineProperty(typePrototype, propertyName, {
            get: function () {
                var _a;
                if (property.enableMultiLangInput === true) {
                    var value = this.getValue(propertyName, false);
                    if (!value) {
                        value = this.getValue(propertyName, false);
                        var langCode = TranslateService.getCurrentLanguage();
                        return _a = {}, _a[langCode] = value, _a;
                    }
                    return value;
                }
                else {
                    var value = this.getValue(propertyName);
                    return value;
                }
            },
            set: function (value) {
                var oldValue = this.getValue(propertyName);
                if (value === oldValue) {
                    return;
                }
                this.setValue(propertyName, value, true, true);
            }
        });
    };
    /**
     * 获取缓存的bindingList模板类
     * @param properties bindingList属性
     * @returns
     */
    BindingObjectTypeFactory.getType = function (properties) {
        if (this.provider.has(properties)) {
            return this.provider.get(properties);
        }
        var bindingObjectType = this.createType(properties);
        this.provider.set(properties, bindingObjectType);
        return bindingObjectType;
    };
    BindingObjectTypeFactory.provider = new Map();
    return BindingObjectTypeFactory;
}());
export { BindingObjectTypeFactory };
//# sourceMappingURL=data:application/json;base64,