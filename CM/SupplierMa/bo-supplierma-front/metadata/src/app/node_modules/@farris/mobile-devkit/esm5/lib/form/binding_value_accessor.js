import { BindingPathConverter, DateUtil } from '../utils/index';
import { BindingType } from './types';
/**
 * Entity值访问器
 */
var EntityBindingValueAccessor = /** @class */ (function () {
    function EntityBindingValueAccessor(bindingData, bindingPath, valueConverter) {
        this.bindingData = bindingData;
        this.bindingPathSegments = this.getBindingPathSegments(bindingPath);
        this.valueConverter = valueConverter;
    }
    EntityBindingValueAccessor.prototype.getValue = function () {
        var stateValue = this.bindingData.getValue(this.bindingPathSegments);
        var controlValue = this.valueConverter ? this.valueConverter.convertTo(stateValue) : stateValue;
        return controlValue;
    };
    EntityBindingValueAccessor.prototype.setValue = function (controlValue) {
        var oldStateValue = this.bindingData.getValue(this.bindingPathSegments);
        var stateValue = this.valueConverter ? this.valueConverter.convertFrom(controlValue) : controlValue;
        if (this.isDateConverter(this.valueConverter) === true) {
            if (DateUtil.isEqual(oldStateValue, stateValue) === true) {
                return;
            }
        }
        this.bindingData.setValue(this.bindingPathSegments, stateValue, true, true);
    };
    EntityBindingValueAccessor.prototype.getBindingPathSegments = function (bindingPath) {
        var parentPathSegments = BindingPathConverter.toBindingPathArray(this.bindingData.bindingPath);
        bindingPath = bindingPath.replace(/\./g, '\/');
        var bindingPathSegments = BindingPathConverter.toBindingPathArray(bindingPath);
        return parentPathSegments.concat(bindingPathSegments);
    };
    /**
     * 是否是DateConverter
     */
    EntityBindingValueAccessor.prototype.isDateConverter = function (converter) {
        var isDateConverter = false;
        if (converter && converter.hasOwnProperty('format') === true) {
            isDateConverter = true;
        }
        return isDateConverter;
    };
    return EntityBindingValueAccessor;
}());
/**
 * UIState值访问器
 */
var UIStateBindingValueAccessor = /** @class */ (function () {
    function UIStateBindingValueAccessor(uiState, bindingPath, valueConverter) {
        this.uiState = uiState;
        this.bindingPathSegments = this.getUiStateBindingPath(bindingPath);
    }
    UIStateBindingValueAccessor.prototype.getValue = function () {
        var stateValue;
        var obj = this.uiState;
        this.bindingPathSegments.forEach(function (item) {
            stateValue = obj[item];
            obj = stateValue;
        });
        return stateValue;
    };
    UIStateBindingValueAccessor.prototype.setValue = function (controlValue) {
        var _a;
        var length = this.bindingPathSegments.length;
        if (length === 1) {
            this.uiState.setPropertyValue(this.bindingPathSegments, controlValue);
        }
        else {
            var obj = void 0;
            for (var i = length - 1; i > 0; i--) {
                obj = (_a = {}, _a[this.bindingPathSegments[i]] = controlValue, _a);
                controlValue = obj;
            }
            this.uiState.setPropertyValue(this.bindingPathSegments[0], obj);
        }
    };
    // UISTATE获取路径
    UIStateBindingValueAccessor.prototype.getUiStateBindingPath = function (bindingPath) {
        var index = bindingPath.search('/');
        if (index !== -1) {
            return bindingPath.split('/');
        }
        else {
            return [bindingPath];
        }
    };
    return UIStateBindingValueAccessor;
}());
/**
 * 绑定值访问器工厂
 */
var BindingValueAccessorFactory = /** @class */ (function () {
    function BindingValueAccessorFactory() {
    }
    BindingValueAccessorFactory.create = function (bindingType, bindingBindingPath, bindingValueConverter, viewModelContext) {
        switch (bindingType) {
            case BindingType.EntityState:
                var bindingData = viewModelContext.bindingData;
                return new EntityBindingValueAccessor(bindingData, bindingBindingPath, bindingValueConverter);
            case BindingType.UIState:
                var uiState = viewModelContext.uiState;
                return new UIStateBindingValueAccessor(uiState, bindingBindingPath, bindingValueConverter);
            default:
                throw new Error('Not Supported');
        }
    };
    return BindingValueAccessorFactory;
}());
export { EntityBindingValueAccessor, UIStateBindingValueAccessor, BindingValueAccessorFactory };
//# sourceMappingURL=data:application/json;base64,