/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { DatagridComponent } from './../datagrid.component';
import { Injectable } from '@angular/core';
import { delay } from 'rxjs/operators';
var SelectionModeService = /** @class */ (function () {
    function SelectionModeService(grid) {
        var _this = this;
        this.dgRef = null;
        this.oldSettings = null;
        this.selectStartEvent = null;
        this.events = null;
        this.dgRef = grid;
        if (this.dgRef.selectionMode === 'default') {
            grid.zone.runOutsideAngular((/**
             * @return {?}
             */
            function () {
                _this.removeEvents();
                _this.events = _this.registerStopSelectionEvent();
            }));
        }
    }
    /**
     * @return {?}
     */
    SelectionModeService.prototype.destroy = /**
     * @return {?}
     */
    function () {
        this.dgRef = null;
        this.removeEvents();
    };
    /**
     * @return {?}
     */
    SelectionModeService.prototype.removeEvents = /**
     * @return {?}
     */
    function () {
        if (this.events && this.events.length) {
            this.events.forEach((/**
             * @param {?} e
             * @return {?}
             */
            function (e) {
                e();
            }));
            this.events = null;
        }
    };
    /**
     * @return {?}
     */
    SelectionModeService.prototype.toggleMode = /**
     * @return {?}
     */
    function () {
        if (this.dgRef) {
            if (this.dgRef.selectionMode === 'default') {
                this.enableWindowsSelectionMode();
            }
            else {
                this.restoreSettings();
            }
        }
    };
    /**
     * @return {?}
     */
    SelectionModeService.prototype.enableWindowsSelectionMode = /**
     * @return {?}
     */
    function () {
        if (this.dgRef) {
            this.oldSettings = {
                showCheckbox: this.dgRef.showCheckbox,
                keepSelect: this.dgRef.keepSelect,
                onlySelectSelf: this.dgRef.onlySelectSelf,
                selectOnCheck: this.dgRef.selectOnCheck,
                checkOnSelect: this.dgRef.checkOnSelect
            };
            this.dgRef.showCheckbox = true;
            this.dgRef.keepSelect = true;
            this.dgRef.onlySelectSelf = false;
            this.dgRef.selectOnCheck = true;
            this.dgRef.checkOnSelect = true;
            this.dgRef.dfs.updateProperty('keepSelect', true);
            this.dgRef.dfs.updateProperty('onlySelectSelf', false);
            this.dgRef.dfs.updateProperty('selectOnCheck', true);
            this.dgRef.dfs.updateProperty('checkOnSelect', true);
        }
    };
    /**
     * @return {?}
     */
    SelectionModeService.prototype.restoreSettings = /**
     * @return {?}
     */
    function () {
        if (this.dgRef && this.oldSettings) {
            this.dgRef.showCheckbox = this.oldSettings.showCheckbox;
            this.dgRef.keepSelect = this.oldSettings.keepSelect;
            this.dgRef.onlySelectSelf = this.oldSettings.onlySelectSelf;
            this.dgRef.selectOnCheck = this.oldSettings.selectOnCheck;
            this.dgRef.checkOnSelect = this.oldSettings.checkOnSelect;
            this.dgRef.dfs.updateProperty('keepSelect', this.oldSettings.keepSelect);
            this.dgRef.dfs.updateProperty('onlySelectSelf', this.oldSettings.onlySelectSelf);
            this.dgRef.dfs.updateProperty('selectOnCheck', this.oldSettings.selectOnCheck);
            this.dgRef.dfs.updateProperty('checkOnSelect', this.oldSettings.checkOnSelect);
        }
    };
    /**
     * @private
     * @return {?}
     */
    SelectionModeService.prototype.registerStopSelectionEvent = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var kd = this.dgRef.render2.listen(document, 'keydown', (/**
         * @param {?} event
         * @return {?}
         */
        function (event) {
            if (event.ctrlKey || event.shiftKey) {
                _this.unselectable();
            }
        }));
        /** @type {?} */
        var ku = this.dgRef.render2.listen(document, 'keyup', (/**
         * @param {?} event
         * @return {?}
         */
        function (event) {
            if (event.ctrlKey || event.shiftKey || event.keyCode === 17 || event.keyCode === 16) {
                _this.enableSelectable();
            }
        }));
        return [kd, ku];
    };
    /**
     * @private
     * @return {?}
     */
    SelectionModeService.prototype.unselectable = /**
     * @private
     * @return {?}
     */
    function () {
        this.dgRef.render2.setAttribute(this.dgRef.dgContainer.nativeElement, 'unselectable', 'on');
        this.dgRef.render2.setAttribute(this.dgRef.dgContainer.nativeElement, 'onselectstart', 'return false');
        this.dgRef.render2.setStyle(this.dgRef.dgContainer.nativeElement, '-moz-user-select', 'none');
    };
    /**
     * @private
     * @return {?}
     */
    SelectionModeService.prototype.enableSelectable = /**
     * @private
     * @return {?}
     */
    function () {
        this.dgRef.render2.removeAttribute(this.dgRef.dgContainer.nativeElement, 'unselectable');
        this.dgRef.render2.removeAttribute(this.dgRef.dgContainer.nativeElement, 'onselectstart');
        this.dgRef.render2.removeStyle(this.dgRef.dgContainer.nativeElement, '-moz-user-select');
    };
    /**
     * @param {?} param
     * @return {?}
     */
    SelectionModeService.prototype.beforRowClick = /**
     * @param {?} param
     * @return {?}
     */
    function (param) {
        var _this = this;
        if (this.dgRef && this.dgRef.selectionMode === 'default') {
            /** @type {?} */
            var isSelected = this.dgRef.dfs.isRowSelected(param.id);
            /** @type {?} */
            var isCtrlKey = param.e.ctrlKey;
            /** @type {?} */
            var isShiftKey = param.e.shiftKey;
            this.dgRef.endEditing();
            if (!isCtrlKey && !isShiftKey) {
                if (!isSelected) {
                    this.dgRef.clearCheckeds();
                }
                else {
                    // 如果有多条选，移除其他选中行
                    /** @type {?} */
                    var currentPagerIds_1 = this.dgRef.getRows().map((/**
                     * @param {?} n
                     * @return {?}
                     */
                    function (n) { return n.id; }));
                    /** @type {?} */
                    var unCheckIDs = this.dgRef.checkValues.filter((/**
                     * @param {?} i
                     * @return {?}
                     */
                    function (i) { return currentPagerIds_1.includes(i) && i != param.id; }));
                    /** @type {?} */
                    var unSelectIds = this.dgRef.checkValues.filter((/**
                     * @param {?} n
                     * @return {?}
                     */
                    function (n) { return !currentPagerIds_1.includes(n); }));
                    // const unCheckIDs = this.dgRef.checkValues.filter(n => n != param.id);
                    if (unCheckIDs && unCheckIDs.length) {
                        this.dgRef.unCheckRows(unCheckIDs, true);
                        this.dgRef.clearSelections(tslib_1.__spread([param.id], unSelectIds));
                    }
                }
            }
            else {
                if (isShiftKey) {
                    /** @type {?} */
                    var focusIndex = this.dgRef.focusRowIndex;
                    if (focusIndex === -1) {
                        focusIndex = 0;
                    }
                    /** @type {?} */
                    var endIndex = param.rowIndex;
                    /** @type {?} */
                    var start = focusIndex;
                    /** @type {?} */
                    var end = endIndex;
                    if (focusIndex > endIndex) {
                        start = endIndex;
                        end = focusIndex;
                    }
                    /** @type {?} */
                    var data = this.dgRef.getRows();
                    /** @type {?} */
                    var checkedItems = tslib_1.__spread(data).splice(start, end - start + 1);
                    /** @type {?} */
                    var willCheckIds = checkedItems.map((/**
                     * @param {?} n
                     * @return {?}
                     */
                    function (n) {
                        return _this.dgRef.dfs.primaryId(n);
                    }));
                    if (!isCtrlKey) {
                        this.dgRef.clearCheckeds(false, false);
                    }
                    // this.dgRef.selectValues = willCheckIds;
                    this.dgRef.checkRows(willCheckIds, true);
                    return true;
                }
            }
            if (isSelected && isCtrlKey) {
                param.e.stopPropagation();
                // 执行取消选择
                this.dgRef.unCheckRow(param.id);
                return true;
            }
            this.dgRef.beforeSelect(param).pipe(delay(100)).subscribe((/**
             * @param {?} canSelect
             * @return {?}
             */
            function (canSelect) {
                if (canSelect) {
                    _this.dgRef.dfs.selectRow(param.rowIndex, param.rowData);
                    if (_this.dgRef.selectedRow) {
                        _this.dgRef.selectedRow.dr = param.dr;
                    }
                }
                _this.dgRef.rowClick.emit({ data: param.rowData, grid: _this.dgRef, dblclick: false });
                _this.dgRef.dgs.setSelecedRow.emit({ selected: true, id: _this.dgRef.dfs.primaryId(param.rowData) });
            }));
            return true;
        }
        return false;
    };
    /**
     * @return {?}
     */
    SelectionModeService.prototype.endRowClick = /**
     * @return {?}
     */
    function () {
        if (this.dgRef && this.dgRef.selectionMode === 'default') {
            this.dgRef.checkOnSelect = false;
        }
    };
    SelectionModeService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    SelectionModeService.ctorParameters = function () { return [
        { type: DatagridComponent }
    ]; };
    return SelectionModeService;
}());
export { SelectionModeService };
if (false) {
    /** @type {?} */
    SelectionModeService.prototype.dgRef;
    /**
     * @type {?}
     * @private
     */
    SelectionModeService.prototype.oldSettings;
    /**
     * @type {?}
     * @private
     */
    SelectionModeService.prototype.selectStartEvent;
    /**
     * @type {?}
     * @private
     */
    SelectionModeService.prototype.events;
}
//# sourceMappingURL=data:application/json;base64,