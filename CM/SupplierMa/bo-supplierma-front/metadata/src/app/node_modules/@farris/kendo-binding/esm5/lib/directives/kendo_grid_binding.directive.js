import * as tslib_1 from "tslib";
import { Directive, Input, HostListener, Optional, EventEmitter, Output, ContentChildren, QueryList, NgZone } from '@angular/core';
import { of } from 'rxjs';
import { GridComponent, DataBindingDirective, SelectionDirective, } from '@progress/kendo-angular-grid';
import { BindingData, ChangeType, FrameEventBus, UIState, Form, ViewModel } from '@farris/devkit';
import { DialogService } from '@farris/ui-dialog';
import { RuntimeStateService } from '@farris/ui-common';
import { DateTimeHelperService } from '@farris/ui-common/date';
import { FarrisKendoGridFormatService } from '../format/index';
import { GridColumnAggregateDirective } from './grid-summary.directive';
import { MultiSelectGridUtility } from '../util/multi_select_grid_utility';
import { SelectedRowContext } from '../entity/index';
/*
 * Kendo Grid 数据绑定指令
 *
 * TODO:
 * 1、整体刷存在性能问题；
 * 2、选中和当前行没有区分开；
 */
var KendoGridBindingDirective = /** @class */ (function (_super) {
    tslib_1.__extends(KendoGridBindingDirective, _super);
    /**
     * 构造函数
     * @param  grid 宿主Grid
     */
    function KendoGridBindingDirective(bindingData, uiState, eventBus, viewModel, grid, selectionDir, dialogSer, dateService, kendogridFormatSer, rts, ngZone) {
        var _this = _super.call(this, grid) || this;
        _this.bindingData = bindingData;
        _this.uiState = uiState;
        _this.eventBus = eventBus;
        _this.viewModel = viewModel;
        _this.grid = grid;
        _this.selectionDir = selectionDir;
        _this.dialogSer = dialogSer;
        _this.dateService = dateService;
        _this.kendogridFormatSer = kendogridFormatSer;
        _this.rts = rts;
        _this.ngZone = ngZone;
        /* 行样式事件 */
        // @Input()
        // rowClassName: (context: any) => any;
        // tslint:disable-next-line:no-output-rename
        _this.appendRow = new EventEmitter();
        /* 绑定排序事件 */
        _this.sortChangeEvent = new EventEmitter();
        /* 行样式事件 */
        _this.rowClass = new EventEmitter();
        _this.hiddenColLen = 0;
        /**
         * TODO: 从实体获取其默认值
         * 当前行索引值，默认第一个
         */
        _this.rowIndex = 0;
        _this.columnIndex = 0;
        _this.currentSkip = 0;
        /**
         * 是否启用多选，默认未启用
         */
        _this.isMultipleSelectionMode = false;
        /**
         * 上一个选中行，默认不存在
         */
        _this.lastRowIndex = -1;
        /**
         * 选中行切换事件
         */
        _this.selectedRowChange = new EventEmitter();
        /**
         * checkbox选择事件
         */
        _this.selectedCheckboxChange = new EventEmitter();
        _this.selectionDir.selectedKeys = [];
        _this.viewModel.uiState.setPropertyValue('ids', _this.selectionDir.selectedKeys);
        var appContext = _this.viewModel.frameContext.getFormAppContext();
        if (appContext && appContext.hasOwnProperty('messagePipe')) {
            appContext.messagePipe.subscribe(function (message) {
                _this.grid.closeCell();
            });
        }
        return _this;
    }
    Object.defineProperty(KendoGridBindingDirective.prototype, "gridOption", {
        get: function () {
            return this.grid['gridOption'];
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(KendoGridBindingDirective.prototype, "len", {
        get: function () {
            return this.grid.columns.length;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(KendoGridBindingDirective.prototype, "IsMultipleSelectionMode", {
        get: function () {
            if (!this.grid) {
                return this.isMultipleSelectionMode;
            }
            if (this.grid.selectable) { // 优先尝试从this.grid.selectable获取
                // tslint:disable-next-line: no-string-literal
                if (this.grid.selectable['mode'] === 'multiple') {
                    this.isMultipleSelectionMode = true;
                }
                else {
                    this.isMultipleSelectionMode = false;
                }
            }
            else {
                if (this.grid.selectableSettings && this.grid.selectableSettings.mode === 'multiple') {
                    this.isMultipleSelectionMode = true;
                }
            }
            return this.isMultipleSelectionMode;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(KendoGridBindingDirective.prototype, "bindingList", {
        /**
         * 绑定列表(Grid对应数据源)
         */
        get: function () {
            // 根实体
            if (this.viewModel.bindingPath === '/' || !this.viewModel.bindingPath) {
                return this.bindingData.list;
            }
            // 子实体
            var bindingPath = this.viewModel.bindingPath.substr(1);
            bindingPath = bindingPath[0].toLowerCase() + bindingPath.substring(1, bindingPath.length);
            var paths = bindingPath.split('/');
            var filteredPaths = paths.filter(function (part) {
                return part !== '';
            });
            return this.bindingData.getValue(filteredPaths);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * 获取分页信息
     */
    KendoGridBindingDirective.prototype.getPagingInfo = function () {
        var bindingPath = this.viewModel.bindingPath;
        var bindingData = this.viewModel.bindingData;
        var pagingInfo = bindingData.pagingInfo;
        if (bindingPath === '/') {
            return pagingInfo;
        }
        else {
            var bindingPaths = bindingPath.substr(1).split('/').filter(function (item) { return !!item && item.length > 0; }).map(function (item) {
                return item.substring(0, item.length - 1);
            });
            bindingPaths.forEach(function (path) {
                pagingInfo = pagingInfo && pagingInfo[path] || {};
            });
            return pagingInfo;
        }
    };
    /**
     * 指令初始化后
     */
    KendoGridBindingDirective.prototype.ngOnInit = function () {
        var _this = this;
        _super.prototype.ngOnInit.call(this);
        // 初始化state，分组使用。
        this.initDataState();
        this.refreshView();
        // 数据变化
        this.bindingChangeSubscription = this.bindingData.changes.subscribe(function (change) {
            _this.refreshView(change);
            if (change.type === ChangeType.Load) {
                // load时，在多选模式下，需清空选中集合
                if (_this.isMultipleSelectionMode) {
                    var isMatch_1 = _this.checkIfChangeMatchBindingPath(change);
                    if (isMatch_1) {
                        // 清空多选集合
                        _this.selectionDir.selectedKeys = [];
                        _this.viewModel.uiState.setPropertyValue('ids', _this.selectionDir.selectedKeys);
                        _this.ngZone.runOutsideAngular(function () {
                            // 渲染初始选中行
                            setTimeout(function () {
                                var rowSelectedContext = new SelectedRowContext();
                                var isPageable = MultiSelectGridUtility.checkIfEnablePaging(_this.grid);
                                if (isPageable) {
                                    _this.rowIndex = _this.grid.skip;
                                }
                                else {
                                    _this.rowIndex = 0;
                                }
                                rowSelectedContext.currentRowIndex = _this.rowIndex;
                                rowSelectedContext.lastRowIndex = _this.lastRowIndex;
                                _this.handleSelectedRowChange(rowSelectedContext);
                            }, 300);
                        });
                    }
                }
            }
            // TODO: 使用策略模式重构
            // bindingData 同步 SelectedKeys
            if (change.type === ChangeType.Remove) {
                _this.syncDeletedKeys(change.value);
            }
            var isMatch = _this.checkIfChangeMatchBindingPath(change);
            if (isMatch) {
                _this.handleSelectedKeyChange(_this.bindingList.currentId);
            }
            // 渲染当前行
            if (isMatch && _this.checkCurrentRowIdExists() && change.type === ChangeType.SelectionChanged && !_this.dataId) {
                _this.renderCurrentRow(_this.bindingList.currentId);
            }
            // tslint:disable-next-line: max-line-length
            // FIXME:需要有重置页码的时机
            /*if ((change.type === ChangeType.SelectionChanged || change.type === ChangeType.GlobalSelectionChanged) && this.currentRowId !== this.bindingList.currentId) {
                this.resetPageInfo();
            }*/
            // 触发变更检测
            if (change.type === ChangeType.Load || change.type === ChangeType.SelectionChanged
                || change.type === ChangeType.Append || change.type === ChangeType.Remove) {
                // 触发变更检测
                if (_this.grid && _this.grid['changeDetectorRef'] && _this.grid['changeDetectorRef']['detectChanges']) {
                    _this.grid['changeDetectorRef']['detectChanges']();
                }
            }
        });
        if (this.editable === true && this.form === null) {
            throw Error('启用编辑时，必须指定form');
        }
        if (!this.grid || !this.farrisBindingGridOption || !this.farrisBindingGridOption['fields']) {
            return;
        }
        var gridColumns = this.farrisBindingGridOption['fields'];
        var gridOption = this.farrisBindingGridOption;
        // 判断列中是否存在固定列
        gridOption.lockable = function (columns) {
            return columns.some(function (ele) {
                return ele.frozen;
            });
        };
        this.rowClass.emit(this.grid);
        // 添加列属性或者方法
        gridColumns.forEach(function (element) {
            // 自定义超链
            if (element.linkedLabelEnabled && !element.linkEvent) {
                element.linkEvent = function () {
                    return;
                };
            }
            // 若没有自定义格式化方法  每个列对象绑定格式化方法
            if (!element.getColumnFormat) {
                element.getColumnFormat = function (dataItem, column) {
                    return _this.kendogridFormatSer.getColumnFormat(dataItem, column);
                };
            }
            // 如果没有自定义类样式 每个列绑定 格式化方法
            if (!element.getClassName) {
                element.getClassName = function (dataItem, column) { return ''; };
            }
            // 自定义帮助前后事件
            if (element.editor && element.editor.type === 'LookupEdit') {
                // 帮助前事件
                if (!element.dictPicking) {
                    element.dictPicking = function (param) {
                        return of(true);
                    };
                }
                // 帮助后事件
                if (!element.dictPicked) {
                    element.dictPicked = function (param) {
                        // 重新进入编辑
                        _this.cellClickHandler(_this.cellClickParam);
                        return of(true);
                    };
                }
            }
        });
        // 绑定gridOption
        this.bindingGridOption();
        // 多选模式下，设置初始选中行
        if (this.IsMultipleSelectionMode) {
            // TODO: 移除 setTimeout
            var self_1 = this;
            this.ngZone.runOutsideAngular(function () {
                setTimeout(function () {
                    var rowSelectedContext = new SelectedRowContext();
                    rowSelectedContext.currentRowIndex = self_1.rowIndex;
                    rowSelectedContext.lastRowIndex = self_1.lastRowIndex;
                    self_1.handleSelectedRowChange(rowSelectedContext);
                }, 300);
            });
        }
    };
    KendoGridBindingDirective.prototype.ngAfterViewInit = function () {
        // this.gridElement = document.querySelector('.k-grid');
        // // 绑定grid keydown对象的方法
        // this.ngZone.runOutsideAngular(() => {
        //   this.gridKeydownEvent = this.enterCell.bind(this);
        //   this.gridCellClickEvent = this.cellClickHandler.bind(this);
        //   this.gridCellCloseEvent = this.cellCloseHandler.bind(this);
        //   this.gridElement.addEventListener('keydown', this.gridKeydownEvent);
        //   this.gridElement.addEventListener('cellClick', this.gridCellClickEvent);
        //   this.gridElement.addEventListener('cellClose', this.gridCellCloseEvent);
        // });
    };
    /**
     * 检测change的路径和BindingPath是否匹配
     */
    KendoGridBindingDirective.prototype.checkIfChangeMatchBindingPath = function (change) {
        var isMatch = false;
        if (!change || !change.path) {
            return isMatch;
        }
        var changePathArray = change.path;
        if (!changePathArray) {
            return isMatch;
        }
        if (!(this.bindingData) && !(this.bindingData.bindingPath)) {
            return isMatch;
        }
        var bingdingPathArray = this.bindingData.bindingPath.split('/');
        if (bingdingPathArray.length <= 0) {
            return isMatch;
        }
        if (changePathArray.length === 0) { // 主表
            if (this.bindingData.bindingPath === '/') {
                isMatch = true;
            }
        }
        else if (change.path.length === 1) { // 主从表
            if (bingdingPathArray.length === 2 && bingdingPathArray[1] === change.path[0]) {
                isMatch = true;
            }
        }
        else if (change.path.length === 2) { // 主从从表
            if (bingdingPathArray.length === 3 && bingdingPathArray[1] === change.path[0] && bingdingPathArray[2] === change.path[1]) {
                isMatch = true;
            }
        }
        return isMatch;
    };
    /**
     * 处理选中主键变更
     */
    KendoGridBindingDirective.prototype.handleSelectedKeyChange = function (currentId) {
        var selectedKeys = this.selectionDir.selectedKeys;
        if (!currentId) {
            // 如果当前行时null，但selectedKeys里有值，清空并发送一次行切换
            if (selectedKeys.length > 0) {
                var removedSelectedKeys = selectedKeys.splice(0, selectedKeys.length);
                if (removedSelectedKeys.indexOf(null) === -1) {
                    this.emitSelectedRowChange({ currentRowId: null });
                }
            }
            return;
        }
        var oldCurrentRowId = null;
        if (this.IsMultipleSelectionMode) {
            oldCurrentRowId = this.currentRowId;
        }
        else {
            oldCurrentRowId = this.selectionDir.selectedKeys.length === 0
                ? null : this.selectionDir.selectedKeys[0];
        }
        // TODO:if (this.currentRowId !== currentId) {
        if (oldCurrentRowId !== currentId) {
            var selectedRowContext = {};
            selectedRowContext.currentRowId = currentId;
            this.currentRowId = currentId;
            this.emitSelectedRowChange(selectedRowContext);
        }
    };
    /**
     * 发射选中行切换事件
     * @description 统一单选模式和多选模式下的行切换事件
     */
    KendoGridBindingDirective.prototype.emitSelectedRowChange = function (selectedRowContext) {
        if (!this.IsMultipleSelectionMode) { // 向后兼容
            var currentId = selectedRowContext.currentRowId;
            this.selectionDir.selectedKeys = [currentId];
            this.selectionDir.selectedKeysChange.emit(this.selectionDir.selectedKeys);
        }
        this.selectedRowChange.emit(selectedRowContext);
    };
    KendoGridBindingDirective.prototype.checkCurrentRowIdExists = function () {
        var isExist = false;
        if (this.bindingList && this.bindingList.currentId && this.bindingList.currentId.length > 0) {
            isExist = true;
        }
        return isExist;
    };
    /**
     * 同步已删除键到选中集合
     */
    KendoGridBindingDirective.prototype.syncDeletedKeys = function (deletedValueCollection) {
        var _this = this;
        if (!deletedValueCollection) {
            return;
        }
        deletedValueCollection.forEach(function (id) {
            var index = _this.selectionDir.selectedKeys.indexOf(id);
            if (index > -1) {
                _this.selectionDir.selectedKeys.splice(index, 1);
                // selectedKeys被清空的时候，触发一次行变更
                if (_this.selectionDir.selectedKeys.length === 0) {
                    _this.emitSelectedRowChange({ currentRowId: null });
                }
            }
        });
    };
    KendoGridBindingDirective.prototype.renderCurrentRow = function (currentId) {
        if (!currentId || currentId === '') { // 不存在当前行
            return;
        }
        // TODO:使用策略模式重构
        if (this.IsMultipleSelectionMode) {
            return;
        }
        this.renderSelectionRow(this.bindingList.currentId, this.selectionDir.selectedKeys);
    };
    /**
     * 指令输入变更处理
     */
    KendoGridBindingDirective.prototype.ngOnChanges = function (changes) {
        _super.prototype.ngOnChanges.call(this, changes);
        this.refreshView();
    };
    /**
     * 指令销毁，注销订阅
     */
    KendoGridBindingDirective.prototype.ngOnDestroy = function () {
        if (this.bindingChangeSubscription) {
            this.bindingChangeSubscription.unsubscribe();
        }
    };
    KendoGridBindingDirective.prototype.refreshView = function (change) {
        // this.bindData();
        this.refreshData(change);
        // 刷新页脚合计信息。客户端合计，暂时放这里，服务端合计时最好从这里移走。by justin
        this.refreshSummary();
    };
    /**
     * 绑定data到宿主grid上
     * @deprecated
     */
    KendoGridBindingDirective.prototype.bindData = function () {
        /*const data = this.bindingList.toJSON();
        let skip = 0;
        if (this.bindingList.pageIndex > 0) {
          skip = (this.bindingList.pageIndex - 1) * this.bindingList.pageSize;
        }
        this.updatePager(this.bindingList.pageSize, skip);
        const processed = process(data, Object.assign({}, this.state, { skip: 0 }));
        processed.total = this.bindingList.total;
        this.grid.data = processed;*/
    };
    KendoGridBindingDirective.prototype.refreshData = function (change) {
        var skip = 0;
        var _a = this.getPagingInfo() || {}, _b = _a.pageIndex, pageIndex = _b === void 0 ? 1 : _b, _c = _a.pageSize, pageSize = _c === void 0 ? 0 : _c;
        if (pageIndex > 0) {
            skip = (pageIndex - 1) * pageSize;
        }
        this.updatePager(pageSize, skip);
        this.endCellEdit(change);
        this.data = this.bindingList.toJSON({ ignoreMultiLangInput: true });
    };
    /**
     * 退出编辑状态
     * @param change 变更
     */
    KendoGridBindingDirective.prototype.endCellEdit = function (change) {
        var isEditing = this.grid.isEditing;
        if (change && change.type === ChangeType.Load && isEditing) {
            this.grid.cancelCell();
        }
    };
    KendoGridBindingDirective.prototype.refreshSummary = function () {
        var _this = this;
        if (this.aggrColumns) {
            this.aggrColumns.forEach(function (aggrCol) {
                if (aggrCol.aggregate) {
                    aggrCol.recalculateSummary(_this.bindingList);
                }
            });
        }
    };
    KendoGridBindingDirective.prototype.onPageChange = function (event) {
        var _a = event || {}, _b = _a.skip, skip = _b === void 0 ? 0 : _b, _c = _a.take, take = _c === void 0 ? 0 : _c;
        // this.bindingList.setPaginationInfo(skip, take);
        this.bindingData.setPagingInfo(skip, take, this.viewModel.bindingPath);
        // 移除选中行样式
        MultiSelectGridUtility.removeRowSelectedStyle(this.grid, this.rowIndex);
    };
    /**
     * 重置grid分页信息
     */
    KendoGridBindingDirective.prototype.resetPageInfo = function () {
        var _a = (this.getPagingInfo() || {}).pageSize, pageSize = _a === void 0 ? 0 : _a;
        this.bindingData.setPagingInfo(0, pageSize, this.viewModel.bindingPath);
    };
    KendoGridBindingDirective.prototype.initDataState = function () {
        // const groups: GroupDescriptor[] = [];
        // if (this.groupField) {
        //   groups.push({field: this.groupField, aggregates: this.aggregates||[]});
        //   this.grid.group = groups;
        // }
        // this.state = Object.assign(this.state, {group: groups});
        var e_1, _a;
        var aggregatesDes = [];
        if (this.groupAggrFields) {
            try {
                for (var _b = tslib_1.__values(this.groupAggrFields), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var groupAggrField = _c.value;
                    aggregatesDes.push({ field: groupAggrField, aggregate: 'sum' });
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_1) throw e_1.error; }
            }
        }
        var group = [];
        if (this.groupField) {
            group.push({ field: this.groupField, aggregates: aggregatesDes });
        }
        this.group = group;
    };
    /*
     * @override
     * @param state State
     */
    KendoGridBindingDirective.prototype.onStateChange = function (state) {
        // 说明：pager根据skip计算当前页码。kendo grid内部会在filter state变化时把skip变为0（重置到第一页）。
        // 因此需要重写onStateChange方法，修正skip
        if (state.skip !== this.currentSkip) {
            state.skip = this.currentSkip;
        }
        // 使用kendo默认的处理state的逻辑
        this.applyState(state);
        this.rebind();
    };
    // protected applyState({skip, take, sort, group, filter}: State): void {
    //   this.skip = skip;
    //   this.pageSize = take;
    //   this.sort = sort;
    //   this.group = group;
    //   this.filter = filter;
    // }
    /*
     * @override 服务器端分页取数。process使用的state中skip应为0，否则不显示数据
     * @param state State
     */
    KendoGridBindingDirective.prototype.process = function (state) {
        // if (this.editing) {
        //   state.sort = null;
        // } else {
        //   state.sort = this.originalSort;
        // }
        state.skip = 0;
        var _a = this.getPagingInfo() || {}, _b = _a.pageSize, pageSize = _b === void 0 ? 0 : _b, _c = _a.total, totalCount = _c === void 0 ? 0 : _c;
        // fix：不启用分页时，take=0导致process不返回数据
        if (state.take === 0) {
            state.take = this.bindingList.length;
        }
        else {
            state.take = pageSize;
        }
        // 编辑模式的判断依据为pageSize小于绑定数据的数量且启用分页
        var isEditMode = state.take < this.bindingList.length;
        if (isEditMode) {
            state.take = this.bindingList.length;
        }
        var processed = _super.prototype.process.call(this, state);
        // fix:数据从无到有时分页不启用
        processed.total = Math.max(totalCount, this.bindingList.length);
        // 分页编辑模式下数据总记录数不能等于真实的数据数据，否则分页工具条就会自动增加分页页签
        if (isEditMode) {
            processed.total = totalCount || 1;
        }
        return processed;
    };
    /*
     * 选中行主键变化处理
     * @param event { SelectionEvent} 选中行变化处理
     */
    KendoGridBindingDirective.prototype.selectedKeysChangeHandler = function (selectedKeys) {
        if (!(this.IsMultipleSelectionMode)) { // 单选模式下
            // 设置BindingData中的当前行
            this.setSelectionIdToBindingData(selectedKeys[selectedKeys.length - 1]);
        }
        this.viewModel.uiState.setPropertyValue('ids', this.selectionDir.selectedKeys); // 更新集合
    };
    /*
     * 处理Grid行切换事件
     * @param event { SelectionEvent} 行切换事件对象
     */
    KendoGridBindingDirective.prototype.selectionChangeHandler = function (event) {
        if (this.IsMultipleSelectionMode) {
            this.handleSelectedCheckboxChange(this.grid.wrapper, event);
        }
    };
    /**
     * 处理checkbox选中事件
     */
    KendoGridBindingDirective.prototype.handleSelectedCheckboxChange = function (elementRef, event) {
        MultiSelectGridUtility.renderSelectedChangeCheckbox(elementRef, event);
        this.selectedCheckboxChange.emit(event);
    };
    /*
     * 单元格点击处理
     * @param event { CellClickEvent } 单元格单击事件对象
     */
    KendoGridBindingDirective.prototype.cellClickHandler = function (event) {
        this.cellClickParam = event;
        this.cellClickEvent = event;
        this.rowIndex = event.rowIndex;
        this.columnIndex = event.columnIndex;
        this.sender = event.sender;
        // 多选模式下，且不分组的情况下，检测行切换
        if (this.IsMultipleSelectionMode && !this.gridOption.groupable) {
            var currentRowIndex = event.rowIndex;
            if (currentRowIndex !== this.lastRowIndex) {
                var rowSelectedContext = new SelectedRowContext();
                rowSelectedContext.currentRowIndex = currentRowIndex;
                rowSelectedContext.lastRowIndex = this.lastRowIndex;
                this.handleSelectedRowChange(rowSelectedContext);
            }
        }
        // 设置实体的当前行
        this.dataId = this.getSelectedIdFromGrid(event.dataItem);
        this.setSelectionIdToBindingData(this.dataId);
        // 若状态机不是可编辑状态 不可编辑
        if (!this.isEditable()) {
            return;
        }
        // 列模板不存在  不可编辑
        if (!event.column.editTemplate) {
            return;
        }
        if (event.type === 'click' && !event.isEdited) {
            // 如果存在显隐状况  确定正确的columnIndex
            var originColums = this.getColumns(this.gridOption.fields);
            var columns = this.getColumns(originColums);
            var currentColumnIndex = columns.findIndex(function (col) { return col.dataField === event.column.field; });
            var hiddenColLen = columns.slice(0, currentColumnIndex + 1).filter(function (col) { return !col.visible; }).length;
            // 赋值全局行索引  列索引
            this.rowIndex = event.rowIndex;
            this.columnIndex = event.columnIndex + hiddenColLen;
            this.hiddenColLen = hiddenColLen;
            this.sender = event.sender;
            this.setEditable(this.rowIndex, this.columnIndex);
        }
    };
    /**
     * 处理选中行切换事件
     */
    KendoGridBindingDirective.prototype.handleSelectedRowChange = function (rowSelectedContext) {
        MultiSelectGridUtility.renderClickChangedRow(this.grid, rowSelectedContext);
        this.rowIndex = rowSelectedContext.currentRowIndex;
        this.lastRowIndex = rowSelectedContext.currentRowIndex;
        // 更新当前行
        var id = this.getPrimary(this.rowIndex);
        this.setSelectionIdToBindingData(id);
    };
    /**
     * 获取指定行的主键
     * @param row 行号
     */
    KendoGridBindingDirective.prototype.getPrimary = function (row) {
        var data = this.grid.data;
        if (data && !Array.isArray(data) && data.hasOwnProperty('data')) {
            data = data.data;
        }
        var _a = this.getPagingInfo() || {}, _b = _a.pageIndex, pageIndex = _b === void 0 ? 1 : _b, _c = _a.pageSize, pageSize = _c === void 0 ? 0 : _c;
        var skip = this.bindingList.skip;
        // 不分页或者第一页时取不需要修改行号
        var rowNumber = pageSize === 0 || pageIndex === 1 ? row : row - skip;
        if (data.length > rowNumber) {
            return data[rowNumber][this.bindingList.primaryKey];
        }
        return null;
    };
    /*
     * 单元格结束编辑处理
     * @param event 单元格结束编辑事件对象
     */
    KendoGridBindingDirective.prototype.cellCloseHandler = function (event) {
        if (this.dialogSer.hasDialogOpened()) {
            event.preventDefault();
            return;
        }
        if (this.rts) {
            // 帮助组件文本变化后去查询
            if (this.rts.getFormState('lookup.pending')) {
                event.preventDefault();
                return;
            }
            // 点击帮助确定可取消按钮后不结束当前单元格编辑
            if (event.originalEvent) {
                if (this.rts.eventPath(event.originalEvent).find(function (n) { return n.tagName === 'FARRIS-DIALOG'; })) {
                    event.preventDefault();
                    return;
                }
            }
        }
        var formGroup = event.formGroup, column = event.column, dataItem = event.dataItem, rowIndex = event.rowIndex;
        var columns = this.getColumns(this.gridOption.fields);
        var currentCol = columns.find(function (element) {
            return element.dataField === column.field;
        });
        var formControlValue = formGroup[currentCol.editor.binding.path].value;
        if (currentCol.getDynamicData) {
            // 若此列是动态单元格列
            currentCol = currentCol.getDynamicData(dataItem, currentCol);
        }
        this.setValue(formControlValue, currentCol);
    };
    /*
       * 回车  切换单元格
       * @param event 键盘按下事件
       */
    KendoGridBindingDirective.prototype.enterCell = function (e) {
        var _this = this;
        // 回车键
        if (!e.shiftKey && e.keyCode === 13) {
            // textarea enter 屏蔽换行操作
            e.preventDefault();
            if (!this.sender) {
                return;
            }
            // 由于keydown 事件会先执行，所以这里先要执行blur 事件；
            e.target.blur();
            this.ngZone.runOutsideAngular(function () {
                setTimeout(function () {
                    if (_this.rts && _this.rts.getFormState('lookup.pending')) {
                        e.preventDefault();
                        return;
                    }
                    _this.enterNextCell();
                }, 201);
            });
        }
    };
    /*
       * 绑定grid option
       * @param dataItem 行数据
       */
    KendoGridBindingDirective.prototype.bindingGridOption = function () {
        if (!this.farrisBindingGridOption) {
            return;
        }
        Object.defineProperty(this.grid, 'gridOption', { value: this.farrisBindingGridOption });
    };
    /*
     * 更新Grid分页状态
     * @param take
     * @param skip
     */
    KendoGridBindingDirective.prototype.updatePager = function (take, skip) {
        if (take === 0) {
            this.currentSkip = 0;
            this.pageSize = 0;
            this.skip = 0;
            this.grid.pageable = false;
        }
        else {
            this.currentSkip = skip;
            this.skip = skip;
            this.pageSize = take;
            this.grid.pageable = {
                buttonCount: 10,
                info: true,
                type: 'numeric',
                pageSizes: false,
                previousNext: true
            };
        }
    };
    /*
     * 设置单元格可编辑性
     * @param dataItem 行数据
     * @param column 列对象
     * @param rowIndex 行索引
     * @param columnIndex 列索引
     * @param sender grid实例
     */
    KendoGridBindingDirective.prototype.setEditable = function (rowNumber, columnNumber) {
        var data = this.grid.data['data'];
        var _a = this.getPagingInfo() || {}, _b = _a.pageIndex, pageIndex = _b === void 0 ? 1 : _b, _c = _a.pageSize, pageSize = _c === void 0 ? 0 : _c;
        var skip = this.bindingList.skip;
        // 不分页或者第一页时取不需要修改行号
        var dataRowNumber = pageSize === 0 || pageIndex === 1 ? rowNumber : rowNumber - skip;
        var item = data[dataRowNumber];
        if (this.gridOption.groupable) {
            item = this.getGroupItem(data, dataRowNumber);
        }
        var originColums = this.getColumns(this.gridOption.fields);
        var columns = this.getColumns(originColums);
        /* 假如列的顺序改变 比如存在固定列  那么应该获取真正的列对象 */
        // let col = columns[columnNumber];
        var tempIndex = columnNumber;
        // 当前列索引不为0
        if (this.grid['gridOption'].showLineNumber) {
            tempIndex = tempIndex - 1;
        }
        if (this.grid.selectable && this.grid.selectable['mode'] === 'multiple') {
            tempIndex = tempIndex - 1;
        }
        var col = columns[tempIndex];
        var params = {
            dataItem: item,
            column: col,
            rowIndex: rowNumber,
            columnIndex: tempIndex,
        };
        // 控制单元格的可编辑性
        if (col && !col.editable) {
            col.editable = function (param) { return true; };
        }
        if (col && this.notReadOnly(col, params)) {
            // 设置当前行
            this.dataId = this.getSelectedIdFromGrid(item);
            this.setSelectionIdToBindingData(this.dataId);
            // const value = this.getValue(item, col.dataField);
            // this.setValue(value, col);
            this.sender.editCell(rowNumber, columnNumber - this.hiddenColLen, this.viewModel.form);
        }
    };
    /*
    获取更新 rowIndex columnIndex
     */
    KendoGridBindingDirective.prototype.updateIndex = function (rowNumber, columnIndex) {
        var newColumnIndex = (columnIndex + 1) % this.len;
        if (!newColumnIndex) {
            var dataLen = this.bindingList.toJSON().length;
            var newRowIndex = (rowNumber + 1) % dataLen;
            return { rowIndex: newRowIndex, columnIndex: newColumnIndex };
        }
        return {
            rowIndex: rowNumber,
            columnIndex: newColumnIndex
        };
    };
    /* 是否只读 */
    KendoGridBindingDirective.prototype.notReadOnly = function (column, param) {
        if (!column) {
            return false;
        }
        return column.editable(param) && !column.editor.readonly;
    };
    /*
       * 给列表赋值 或给formcontrol赋值
        */
    KendoGridBindingDirective.prototype.setValue = function (value, column) {
        var currentColumnType = column.dataType;
        // 同时判断gridOption的列对象
        var bindingData = this.viewModel.bindingData;
        var fieldPaths = this.getFieldPaths(bindingData.bindingPath, column.dataField);
        // 存在行编辑器
        if (currentColumnType === 'date') {
            var dateStr = this.dateService.formatTo(value, 'yyyy-MM-dd HH:mm:ss');
            if (!dateStr) {
                dateStr = '';
            }
            this.viewModel.bindingData.setValue(fieldPaths, dateStr, true, true);
        }
        else {
            this.viewModel.bindingData.setValue(fieldPaths, value, true, true);
        }
    };
    /* 分组时 获取点击行数据 */
    KendoGridBindingDirective.prototype.getGroupItem = function (data, rowNumber) {
        var index = rowNumber;
        for (var i in data) {
            if (index < data[i].items.length) {
                return data[i].items[index];
            }
            else {
                index = index - data[i].items.length;
            }
        }
    };
    /*
     * 获取 单元格值  主从表支持
     * @param dataItem 行数据
     * @param field 字段
     */
    KendoGridBindingDirective.prototype.getValue = function (dataItem, field) {
        var index = field.indexOf('.');
        if (index < 0) {
            return dataItem[field];
        }
        var fields = field.split('.');
        // field字符串组合
        return fields.reduce(function (result, next) {
            return result[next];
        }, dataItem);
    };
    /*
    * 获取 bindingData 路径
    * @param bindingPath 当前绑定的字段路径
    * @param fieldName 字段
    */
    KendoGridBindingDirective.prototype.getFieldPaths = function (bindingPath, field) {
        var fieldPath = '';
        if (bindingPath.length > 1) {
            fieldPath = bindingPath.substr(1).replace(/\//g, '.') + '.' + field;
        }
        else {
            fieldPath = field;
        }
        return fieldPath.split('.');
    };
    /**
     * 回车进入下一个单元格
     */
    KendoGridBindingDirective.prototype.enterNextCell = function () {
        var _this = this;
        var index = this.updateIndex(this.rowIndex, this.columnIndex);
        if (!index.columnIndex && !index.rowIndex) {
            var len_1 = this.bindingList.toJSON().length;
            // 如果存在添加数据的API
            this.appendRow.emit();
            if (this.appendRow.observers && this.appendRow.observers.length) {
                this.interVal = setInterval(function () {
                    if (_this.bindingList.toJSON().length - 1 === len_1) {
                        _this.setEditable(_this.bindingList.toJSON().length - 1, 0);
                        _this.rowIndex = _this.bindingList.toJSON().length - 1;
                        _this.columnIndex = 0;
                        clearInterval(_this.interVal);
                    }
                }, 0);
                return;
            }
        }
        this.setEditable(index.rowIndex, index.columnIndex);
        this.rowIndex = index.rowIndex;
        this.columnIndex = index.columnIndex;
    };
    /* 获取真正的列对象 */
    KendoGridBindingDirective.prototype.getColumns = function (columns) {
        // 判断是否存在固定列
        var hasLocked = columns.some(function (ele) {
            return ele.frozen;
        });
        if (hasLocked) {
            var lockedColumns = columns.filter(function (ele) {
                return ele.frozen;
            });
            var notLockedColumns = columns.filter(function (ele) {
                return !ele.frozen;
            });
            return tslib_1.__spread(lockedColumns, notLockedColumns);
        }
        return columns;
    };
    /*
     * 渲染指定行为选中行：将指定行的key添加到选中行集合中
     */
    KendoGridBindingDirective.prototype.renderSelectionRow = function (key, selectedKeys) {
        if (!key || key === '') {
            return;
        }
        // TODO:使用策略模式重构
        if (this.IsMultipleSelectionMode) {
            var index = selectedKeys.indexOf(key);
            if (index >= 0) {
                return;
            }
            selectedKeys.push(key);
        }
        else {
            if (selectedKeys.length === 1 && selectedKeys[0] === key) {
                return;
            }
            selectedKeys.splice(0, selectedKeys.length);
            selectedKeys.push(key);
        }
        this.selectionDir.selectedKeysChange.emit(selectedKeys); // 手动触发selectedKeysChange事件
    };
    /*
     * 获取Grid上的当前行内码
     * @param dataItem 行数据
     */
    KendoGridBindingDirective.prototype.getSelectedIdFromGrid = function (dataItem) {
        var primaryKey = this.bindingList.primaryKey;
        return dataItem[primaryKey];
    };
    /*
     * 设置BindingList的当前行
     * @param id 当前行内码
     */
    KendoGridBindingDirective.prototype.setSelectionIdToBindingData = function (id) {
        this.bindingList.setCurrentId(id, true);
    };
    /*
    *列表整体是否可编辑
     */
    KendoGridBindingDirective.prototype.isEditable = function () {
        if (this.editable === undefined) {
            if (!this.viewModel.stateMachine) {
                // 状态机不存在的时候
                return false;
            }
            // 状态机存在的时候
            return this.viewModel.stateMachine['editable'];
        }
        // 自定义赋值
        return this.editable;
    };
    /*  */
    KendoGridBindingDirective.prototype.isDataChanged = function () {
        var e_2, _a;
        var hasUnsavedData = false;
        var entityArray = this.viewModel.frameContext.repository.entityCollection.toArray();
        try {
            for (var entityArray_1 = tslib_1.__values(entityArray), entityArray_1_1 = entityArray_1.next(); !entityArray_1_1.done; entityArray_1_1 = entityArray_1.next()) {
                var entity = entityArray_1_1.value;
                if (entity.changes.length > 0) {
                    hasUnsavedData = true;
                    break;
                }
            }
        }
        catch (e_2_1) { e_2 = { error: e_2_1 }; }
        finally {
            try {
                if (entityArray_1_1 && !entityArray_1_1.done && (_a = entityArray_1.return)) _a.call(entityArray_1);
            }
            finally { if (e_2) throw e_2.error; }
        }
        return hasUnsavedData;
    };
    KendoGridBindingDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[farrisBindingPath]'
                },] }
    ];
    /** @nocollapse */
    KendoGridBindingDirective.ctorParameters = function () { return [
        { type: BindingData },
        { type: UIState, decorators: [{ type: Optional }] },
        { type: FrameEventBus, decorators: [{ type: Optional }] },
        { type: ViewModel, decorators: [{ type: Optional }] },
        { type: GridComponent },
        { type: SelectionDirective },
        { type: DialogService },
        { type: DateTimeHelperService },
        { type: FarrisKendoGridFormatService },
        { type: RuntimeStateService },
        { type: NgZone }
    ]; };
    KendoGridBindingDirective.propDecorators = {
        editable: [{ type: Input, args: ['farrisEditable',] }],
        form: [{ type: Input, args: ['farrisForm',] }],
        groupField: [{ type: Input, args: ['groupField',] }],
        groupAggrFields: [{ type: Input, args: ['groupAggrFields',] }],
        farrisBindingGridOption: [{ type: Input }],
        rowClassName: [{ type: Input }],
        appendRow: [{ type: Output, args: ['append-row',] }],
        sortChangeEvent: [{ type: Output }],
        rowClass: [{ type: Output }],
        selectedRowChange: [{ type: Output }],
        selectedCheckboxChange: [{ type: Output }],
        aggrColumns: [{ type: ContentChildren, args: [GridColumnAggregateDirective,] }],
        onPageChange: [{ type: HostListener, args: ['pageChange', ['$event'],] }],
        selectedKeysChangeHandler: [{ type: HostListener, args: ['selectedKeysChange', ['$event'],] }],
        selectionChangeHandler: [{ type: HostListener, args: ['selectionChange', ['$event'],] }],
        cellClickHandler: [{ type: HostListener, args: ['cellClick', ['$event'],] }],
        cellCloseHandler: [{ type: HostListener, args: ['cellClose', ['$event'],] }],
        enterCell: [{ type: HostListener, args: ['keydown', ['$event'],] }]
    };
    return KendoGridBindingDirective;
}(DataBindingDirective));
export { KendoGridBindingDirective };
//# sourceMappingURL=data:application/json;base64,