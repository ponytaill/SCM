/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { LocaleService } from '@farris/ui-locale';
import { Component, Input, Injector, ViewChild, Output, EventEmitter, ChangeDetectorRef, ViewEncapsulation } from '@angular/core';
import { NgForm } from '@angular/forms';
import { DatagridSettingsComponent } from '../datagrid-settings.component';
export class ColumnFormatSettingComponent {
    /**
     * @param {?} injector
     * @param {?} gridSettingComponentRef
     * @param {?} cd
     */
    constructor(injector, gridSettingComponentRef, cd) {
        this.injector = injector;
        this.gridSettingComponentRef = gridSettingComponentRef;
        this.cd = cd;
        this.columns = [];
        this.fields = [];
        this.formatChange = new EventEmitter();
        this.fieldsChange = new EventEmitter();
        this.allCols = [];
        /**
         * format Data
         */
        this.formatData = [];
        this.columnType = 'all';
        this.activeField = null;
        this.showGridFooter = false;
        this.searchItems = [];
        this.alignItems = [];
        this.summaryItems = [];
        this.summaryItems2 = [];
        this.isEn = false;
        this.showGridFooter = this.gridSettingComponentRef.gridInstance.showFooter &&
            !this.gridSettingComponentRef.gridInstance.footerTemplate;
        this.localeSer = this.injector.get(LocaleService, null);
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        if (changes.columns && !changes.columns.isFirstChange()) {
            this.setFormatData();
            this.allCols = this.columns[0];
            this.activeField = this.columns[0][0];
            this.checkColumnOptions();
        }
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.isEn = this.localeSer.localeId === 'en';
        this.initData();
        if (this.colForm) {
            this.colForm.valueChanges.subscribe((/**
             * @param {?} v
             * @return {?}
             */
            v => {
                if (!this.colForm.pristine) {
                    this.formatChange.emit(this.formatData);
                }
            }));
        }
    }
    /**
     * @private
     * @return {?}
     */
    setFormatData() {
        this.formatData = this.fields.map((/**
         * @param {?} n
         * @return {?}
         */
        n => {
            return this.columns[0].find((/**
             * @param {?} col
             * @return {?}
             */
            col => col.field === n));
        }));
    }
    /**
     * @private
     * @return {?}
     */
    initData() {
        this.alignItems = this.gridSettingComponentRef.alignItems;
        this.searchItems = this.gridSettingComponentRef.searchItems;
        this.summaryItems = this.gridSettingComponentRef.summaryItems;
        this.summaryItems2 = this.gridSettingComponentRef.summaryItems2;
        this.setFormatData();
        this.allCols = this.columns[0];
        this.activeField = this.columns[0][0];
        this.checkColumnOptions();
    }
    /**
     * @private
     * @return {?}
     */
    checkColumnOptions() {
        if (this.activeField) {
            if (this.activeField.allowGrouping === undefined) {
                this.activeField.allowGrouping = true;
            }
            if (this.activeField.groupFooter === undefined) {
                this.activeField.groupFooter = { options: { calculationType: -1 } };
            }
            else {
                this.activeField.groupFooter.options = this.activeField.groupFooter.options || { calculationType: -1 };
                if (this.activeField.groupFooter.options.calculationType === undefined) {
                    this.activeField.groupFooter.options.calculationType = -1;
                }
            }
            if (this.activeField.footer === undefined) {
                this.activeField.footer = { options: { calculationType: -1 } };
            }
            else {
                this.activeField.footer.options = this.activeField.footer.options || { calculationType: -1 };
                if (this.activeField.footer.options.calculationType === undefined) {
                    this.activeField.footer.options.calculationType = -1;
                }
            }
        }
    }
    // 根据列的类型进行筛选过滤，
    // all 所有列
    // visible 可见列
    // hidden 隐藏列
    // group 分组列
    /**
     * @param {?} ct
     * @param {?=} searchWords
     * @return {?}
     */
    filterColumns(ct, searchWords = '') {
        /** @type {?} */
        let cols = [];
        switch (ct) {
            case 'visible':
                cols = this.formatData;
                break;
            case 'hidden':
                cols = this.columns[0].filter((/**
                 * @param {?} n
                 * @return {?}
                 */
                n => this.fields.indexOf(n.field) === -1));
                break;
            case 'all':
            default:
                cols = this.columns[0];
                break;
        }
        if (searchWords) {
            cols = cols.filter((/**
             * @param {?} c
             * @return {?}
             */
            c => c.title.toLowerCase().indexOf(searchWords) > -1));
        }
        this.allCols = cols;
    }
    /**
     * @param {?} col
     * @param {?} $event
     * @return {?}
     */
    onFieldClick(col, $event) {
        this.activeField = col;
        this.checkColumnOptions();
    }
    /**
     * @private
     * @return {?}
     */
    onFieldsChanged() {
        this.setFormatData();
        this.fieldsChange.emit(this.fields);
    }
    /**
     * @param {?} $event
     * @param {?} col
     * @return {?}
     */
    onDblClick($event, col) {
        // console.log('显示与隐藏切换事件', col);
        this.onCheckboxClick($event, col);
    }
    /**
     * @param {?} $event
     * @param {?} col
     * @return {?}
     */
    onCheckboxClick($event, col) {
        // console.log('显示与隐藏切换事件', col);
        $event.stopPropagation();
        /** @type {?} */
        const index = this.fields.indexOf(col.field);
        if (index === -1) {
            this.fields.push(col.field);
        }
        else {
            this.fields.splice(index, 1);
        }
        this.columns[0].forEach((/**
         * @param {?} f
         * @return {?}
         */
        f => {
            f.visible = this.fields.indexOf(f.field) > -1;
        }));
        this.fields = this.columns[0].filter((/**
         * @param {?} n
         * @return {?}
         */
        n => n.visible)).map((/**
         * @param {?} n
         * @return {?}
         */
        n => n.field));
        this.onFieldsChanged();
    }
    /**
     * @param {?} $event
     * @param {?} ct
     * @return {?}
     */
    searchColumn($event, ct) {
        /** @type {?} */
        const txt = $event.target.value;
        this.filterColumns(ct, txt);
    }
    /**
     * @param {?} fieldInfo
     * @param {?} ct
     * @param {?} txt
     * @param {?} ulElRef
     * @return {?}
     */
    onFieldDrop(fieldInfo, ct, txt, ulElRef) {
        // console.log('drop', fieldInfo);
        const { removedIndex, addedIndex } = fieldInfo;
        /** @type {?} */
        const moveItem = this.allCols[removedIndex];
        /** @type {?} */
        const targetItem = this.allCols[addedIndex];
        /** @type {?} */
        const moveItemIndex = this.columns[0].findIndex((/**
         * @param {?} n
         * @return {?}
         */
        n => n.field === moveItem.field));
        /** @type {?} */
        const targetItemIndex = this.columns[0].findIndex((/**
         * @param {?} n
         * @return {?}
         */
        n => n.field === targetItem.field));
        /** @type {?} */
        const removedItem = this.columns[0].splice(moveItemIndex, 1);
        this.columns[0].splice(targetItemIndex, 0, ...removedItem);
        this.fields = this.columns[0].filter((/**
         * @param {?} n
         * @return {?}
         */
        n => n.visible)).map((/**
         * @param {?} n
         * @return {?}
         */
        n => n.field));
        this.onFieldsChanged();
        this.filterColumns(ct, txt);
        // if (ulElRef) {
        //     ulElRef.querySelectorAll('li .field-drag-handle').forEach(el => {
        //         el.style.cursor = 'grab';
        //     });
        // }
    }
    /**
     * 0: 1个也没有选中； 1: 全部选中； 2: 有选中的也有没选中的
     * @private
     * @return {?}
     */
    getCheckAllState() {
        if (this.fields.length === 0) {
            return 0;
        }
        else {
            if (this.fields.length === this.columns[0].length) {
                return 1;
            }
            return 2;
        }
    }
    /**
     * @param {?} $event
     * @param {?} ct
     * @param {?} txt
     * @return {?}
     */
    onCheckAllClick($event, ct, txt) {
        /** @type {?} */
        const state = this.getCheckAllState();
        if (state === 0 || state === 2) {
            // 执行全选
            this.columns[0].forEach((/**
             * @param {?} n
             * @return {?}
             */
            n => n.visible = true));
            this.fields = this.columns[0].map((/**
             * @param {?} n
             * @return {?}
             */
            n => n.field));
        }
        else {
            // 取消全选
            this.columns[0].forEach((/**
             * @param {?} n
             * @return {?}
             */
            n => n.visible = false));
            this.fields = [];
        }
        this.onFieldsChanged();
        this.filterColumns(ct, txt);
    }
}
ColumnFormatSettingComponent.decorators = [
    { type: Component, args: [{
                selector: 'column-format-setting',
                template: "<div class=\"d-flex flex-row flex-fill dg-column-format-setting\" style=\"height: 100%\">\r\n    <div region=\"west\" class=\"west d-flex flex-column \">\r\n        <div style=\"margin: 0 6px;\">\r\n            <input #inputWord type=\"text\" class=\"form-control\" placeholder=\"{{'datagrid.settings.searchPlaceholder' | locale}}\" (input)=\"searchColumn($event, ct.selectedValues)\" style=\"height: 30px;\">\r\n            <div style=\"padding: 5px 0px;background-color: #fff;\">\r\n                <button class=\"btn btn-link\" \r\n                    style=\"height: 32px;padding-left: 4px;\" (click)=\"onCheckAllClick($event, ct.selectedValues, inputWord.value)\">\r\n                    <span class=\"f-icon f-icon-minus-outline checkbox\" [class.f-icon-checkbox]=\"!fields.length\"\r\n                        [class.f-icon-checkbox-checked]=\"fields.length === columns[0].length\"></span>\r\n                    {{ 'datagrid.settings.checkall' | locale }}\r\n                </button>\r\n\r\n                <farris-combo-list #ct \r\n                [data]=\"searchItems\" \r\n                [editable]=\"false\"\r\n                [ngModel]=\"'all'\" [idField]=\"'value'\"\r\n                [textField]=\"'title'\"\r\n                [enableClear]=\"false\"\r\n                (valueChange)=\"filterColumns(ct.selectedValues, inputWord.value)\"\r\n                style=\"float: right;\" [style.width.px]=\"isEn ? 120: 80\"\r\n                class=\"format-setting-searchitem\"></farris-combo-list>\r\n            </div>\r\n        </div>\r\n        <div style=\"overflow: auto;padding-right:3px\" class=\"flex-fill\">\r\n            <ul class=\"list-group  list-group-flush\" #ul column-visible-drag (drop)=\"onFieldDrop($event, ct.selectedValues, inputWord.value, ul)\">\r\n                <li class=\"list-group-item list-group-item-action smooth-dnd-draggable-wrapper format-setting-column\" *ngFor=\"let col of allCols\" \r\n                    (click)=\"onFieldClick(col, $event)\" [class.active]=\"activeField && activeField.field === col.field\"\r\n                    (dblclick)=\"onDblClick($event, col)\">\r\n                    <span class=\"f-icon checkbox\"\r\n                        [class.f-icon-checkbox-checked]=\"fields.indexOf(col.field) > -1\"\r\n                        [class.f-icon-checkbox]=\"fields.indexOf(col.field) == -1\"\r\n                        (click)=\"onCheckboxClick($event, col)\"></span>\r\n                    {{ col.title}} \r\n\r\n                    <span class=\"f-icon f-icon-drag-vertical field-drag-handle\"></span>\r\n                </li>\r\n            </ul>\r\n        </div>\r\n      \r\n    </div>\r\n    <div region=\"center\" class=\"center flex-fill\" style=\"overflow:auto;padding: 0 10px; padding-left: 20px;border-right: 0;\">\r\n\r\n        <h6 style=\"margin: 15px 0px;font-weight: bold;\">{{ 'datagrid.settings.properties' | locale }}</h6>\r\n\r\n        <form #colformatform=\"ngForm\" style=\"margin-top: 5px;\">\r\n            <div class=\"farris-group-wrap mb-3\">\r\n                <div class=\"form-group farris-form-group\">\r\n                    <label for=\"hpinput01\" class=\"col-form-label\">\r\n                        <span class=\"farris-label-text\" >{{ 'datagrid.settings.headeralign' | locale }}</span>\r\n                    </label>\r\n                    <div class=\"farris-input-wrap\">\r\n\r\n                        <farris-combo-list name=\"halign\" \r\n                        [data]=\"alignItems\" \r\n                        [editable]=\"false\"\r\n                        [(ngModel)]=\"activeField!.halign\"\r\n                        [idField]=\"'value'\"\r\n                        [textField]=\"'title'\"\r\n                        [enableClear]=\"false\"></farris-combo-list>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div class=\"farris-group-wrap  mb-3\">\r\n                <div class=\"form-group farris-form-group\">\r\n                    <label for=\"hpinput01\" class=\"col-form-label\">\r\n                        <span class=\"farris-label-text\">{{ 'datagrid.settings.dataalign' | locale }}</span>\r\n                    </label>\r\n                    <div class=\"farris-input-wrap\">\r\n\r\n                        <farris-combo-list name=\"align\" \r\n                        [data]=\"alignItems\" \r\n                        [editable]=\"false\"\r\n                        [(ngModel)]=\"activeField!.align\"\r\n                        [idField]=\"'value'\"\r\n                        [textField]=\"'title'\"\r\n                        [enableClear]=\"false\"></farris-combo-list>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div class=\"farris-group-wrap  mb-3\" *ngIf=\"showGridFooter\">\r\n                <div class=\"form-group farris-form-group\">\r\n                    <label for=\"hpinput01\" class=\"col-form-label\">\r\n                        <span class=\"farris-label-text\">{{ 'datagrid.settings.summarytype' | locale }}</span>\r\n                    </label>\r\n                    <div class=\"farris-input-wrap \">\r\n                       \r\n                        <farris-combo-list name=\"footer.options.calculationType\" \r\n                        [data]=\" activeField.dataType === 'number'?  summaryItems : summaryItems2 \" \r\n                        [editable]=\"false\"\r\n                        [(ngModel)]=\"activeField.footer.options.calculationType\"\r\n                        [idField]=\"'value'\"\r\n                        [textField]=\"'title'\"\r\n                        [enableClear]=\"false\"></farris-combo-list>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n            <div class=\"farris-group-wrap  mb-3\" *ngIf=\"showGridFooter && (!activeField.footer.options.calculationType || activeField.footer.options.calculationType == -1)\">\r\n                <div class=\"form-group farris-form-group\">\r\n                    <label for=\"hpinput01\" class=\"col-form-label\">\r\n                        <span class=\"farris-label-text\">{{ 'datagrid.settings.summarytext' | locale }}</span>\r\n                    </label>\r\n                    <div class=\"farris-input-wrap\">\r\n                        <input type=\"input\" name=\"footer.options.text\" class=\"form-control\" [(ngModel)]=\"activeField.footer.options.text\">\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n        </form>\r\n    </div>\r\n   \r\n</div>",
                encapsulation: ViewEncapsulation.None
            }] }
];
/** @nocollapse */
ColumnFormatSettingComponent.ctorParameters = () => [
    { type: Injector },
    { type: DatagridSettingsComponent },
    { type: ChangeDetectorRef }
];
ColumnFormatSettingComponent.propDecorators = {
    columns: [{ type: Input }],
    fields: [{ type: Input }],
    colForm: [{ type: ViewChild, args: ['colformatform',] }],
    formatChange: [{ type: Output }],
    fieldsChange: [{ type: Output }]
};
if (false) {
    /** @type {?} */
    ColumnFormatSettingComponent.prototype.columns;
    /** @type {?} */
    ColumnFormatSettingComponent.prototype.fields;
    /** @type {?} */
    ColumnFormatSettingComponent.prototype.colForm;
    /** @type {?} */
    ColumnFormatSettingComponent.prototype.formatChange;
    /** @type {?} */
    ColumnFormatSettingComponent.prototype.fieldsChange;
    /** @type {?} */
    ColumnFormatSettingComponent.prototype.allCols;
    /**
     * format Data
     * @type {?}
     */
    ColumnFormatSettingComponent.prototype.formatData;
    /** @type {?} */
    ColumnFormatSettingComponent.prototype.columnType;
    /** @type {?} */
    ColumnFormatSettingComponent.prototype.activeField;
    /** @type {?} */
    ColumnFormatSettingComponent.prototype.showGridFooter;
    /** @type {?} */
    ColumnFormatSettingComponent.prototype.searchItems;
    /** @type {?} */
    ColumnFormatSettingComponent.prototype.alignItems;
    /** @type {?} */
    ColumnFormatSettingComponent.prototype.summaryItems;
    /** @type {?} */
    ColumnFormatSettingComponent.prototype.summaryItems2;
    /** @type {?} */
    ColumnFormatSettingComponent.prototype.localeSer;
    /** @type {?} */
    ColumnFormatSettingComponent.prototype.isEn;
    /**
     * @type {?}
     * @private
     */
    ColumnFormatSettingComponent.prototype.injector;
    /** @type {?} */
    ColumnFormatSettingComponent.prototype.gridSettingComponentRef;
    /**
     * @type {?}
     * @private
     */
    ColumnFormatSettingComponent.prototype.cd;
}
//# sourceMappingURL=data:application/json;base64,