/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { NgModule } from '@angular/core';
import { FormsModule, ReactiveFormsModule } from '@angular/forms';
import { CommonModule } from '@angular/common';
/*
* @Author: 疯狂秀才(Lucas Huang)
 * @Date: 2019-08-12 10:56:11
 * @LastEditors: 疯狂秀才(Lucas Huang)
 * @LastEditTime: 2019-10-14 11:27:18
 * @QQ: 1055818239
 * @Version: v0.0.1
 */
import { FarrisDatePickerModule } from '@farris/ui-datepicker';
import { InputGroupModule } from '@farris/ui-input-group';
import { LookupModule } from '@farris/ui-lookup';
import { ComboListModule } from '@farris/ui-combo-list';
import { NumberSpinnerModule } from '@farris/ui-number-spinner';
import { SwitchModule } from '@farris/ui-switch';
import { TimePickerModule } from '@farris/ui-time-picker';
import { ComboLookupModule } from '@farris/ui-combo-lookup';
import { LanguageTextboxModule } from '@farris/ui-language-textbox';
import { FarrisFormsModule } from '@farris/ui-forms';
import { DatagridBaseEditorDirective } from './datagrid-base-editor.directive';
import { DatagridTextareaComponent } from './editors/datagrid-textarea.component';
import { DatagridCheckboxComponent } from './editors/datagrid-checkbox.component';
import { DatagridDatepickerComponent } from './editors/datagrid-datepicker.component';
import { DatagridInputGroupComponent } from './editors/datagrid-inputgroup.component';
import { DatagridSelectComponent } from './editors/datagrid-select.component';
import { DatagridLookupComponent } from './editors/datagrid-lookup.component';
import { DatagridTooltipComponent } from './tooltip/tooltip.component';
import { DatagridNumberSpinnerComponent } from './editors/datagrid-numberspinner.component';
import { DatagridTextboxComponent } from './editors/datagrid-textbox.component';
import { DatagridComboListComponent } from './editors/datagrid-combolist.component';
import { DatagridSwitchComponent } from './editors/datagrid-switch.component';
import { DatagridTimerComponent } from './editors/datagrid-timer.component';
import { DatagridCombolookupComponent } from './editors/datagrid-combolookup.component';
import { DatagridLanguageTextboxComponent } from './editors/datagrid-languagetextbox.component';
import { DatagridEnumEditorComponent } from './editors/datagrid-enumeditor.component';
import { DatagridSortEditorComponent } from './editors/datagrid-sorteditor.component';
import { DatagridFilterEditorComponent } from './editors/datagrid-filtereditor.component';
import { EnumEditorModule } from '@farris/ui-enum-editor';
import { SorterModule } from '@farris/ui-sort-editor';
import { FilterModule } from '@farris/ui-filter-editor';
/** @type {?} */
const editorComponents = [
    DatagridTooltipComponent,
    DatagridTextboxComponent,
    DatagridTextareaComponent,
    DatagridCheckboxComponent,
    DatagridDatepickerComponent,
    DatagridInputGroupComponent,
    DatagridSelectComponent,
    DatagridLookupComponent,
    DatagridNumberSpinnerComponent,
    DatagridComboListComponent,
    DatagridSwitchComponent,
    DatagridTimerComponent,
    DatagridCombolookupComponent,
    DatagridLanguageTextboxComponent,
    DatagridEnumEditorComponent,
    DatagridSortEditorComponent,
    DatagridFilterEditorComponent
];
export class DatagridEditorsModule {
}
DatagridEditorsModule.decorators = [
    { type: NgModule, args: [{
                declarations: [
                    DatagridBaseEditorDirective,
                    ...editorComponents,
                ],
                imports: [
                    CommonModule,
                    FormsModule,
                    FarrisDatePickerModule,
                    InputGroupModule,
                    LookupModule,
                    ComboListModule,
                    ComboLookupModule,
                    NumberSpinnerModule,
                    SwitchModule,
                    TimePickerModule,
                    LanguageTextboxModule,
                    ReactiveFormsModule,
                    EnumEditorModule,
                    FarrisFormsModule,
                    FilterModule,
                    SorterModule
                ],
                exports: [
                    DatagridBaseEditorDirective,
                    ...editorComponents
                ],
                entryComponents: [
                    ...editorComponents
                ],
                providers: []
            },] }
];
//# sourceMappingURL=data:application/json;base64,