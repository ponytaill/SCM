/**
 * @fileoverview added by tsickle
 * Generated from: lib/bef_rest_service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*
 * @Author: Witt
 * @Date: 2019-02-23 13:57:47
 * @Last Modified by: aalizzwell
 * @Last Modified time: 2019-09-24 14:10:40
 */
import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { throwError, of, EMPTY } from 'rxjs';
import { switchMap, map, catchError, tap } from 'rxjs/operators';
import { EventBus } from '@farris/devkit';
import { HttpHeaderUtil, HttpParamUtil, RequestInfoUtil, ResponseInfoUtil } from './utils/index';
import { BefRepository } from './bef_repository';
import { FrameworkSessionService } from './framework_session_service';
import { BefSessionService } from './session/index';
import { BefProxy } from './bef_proxy';
import { UriService } from './uri_service';
import { BefProxyExtend } from './bef_proxy_extend';
import { HttpService } from './http_service';
import { BackEndMessageUtil } from './utils/back_end_message.util';
import { BefSessionManager } from './session/bef_session_manager';
/** @type {?} */
const GET = 'GET';
/** @type {?} */
const DELETE = 'DELETE';
/** @type {?} */
const PUT = 'PUT';
/** @type {?} */
const POST = 'POST';
/** @type {?} */
const PATCH = 'PATCH';
/**
 * BEF取数服务
 * 该服务由BefRepository实例化，不做注入，每个BefRepository拥有一个BefRestService实例。
 */
class BefRestService {
    /**
     * 构造函数
     * @param {?} httpClient http服务
     * @param {?} baseUri
     * @param {?} frmSessionService
     * @param {?} repository
     * @param {?=} eventBus
     */
    constructor(httpClient, baseUri, frmSessionService, repository, eventBus) {
        this.httpClient = httpClient;
        this.httpService = new HttpService(this.httpClient);
        this.baseUri = baseUri;
        /** @type {?} */
        const injector = repository.getInjector();
        this.sessionService = new BefSessionService(httpClient, baseUri, frmSessionService, injector);
        this.repository = repository;
        this.eventBus = eventBus;
    }
    // #region 代理相关
    /**
     * 获取Bef代理
     * @return {?}
     */
    get proxy() {
        if (!!this.repository.proxy) {
            return this.repository.proxy;
        }
        else {
            return this.createBefProxy();
        }
    }
    /**
     * 创建Bef代理
     * @private
     * @return {?}
     */
    createBefProxy() {
        /** @type {?} */
        const serverUri = this.repository.serverUri;
        /** @type {?} */
        const uriService = new UriService(serverUri);
        /** @type {?} */
        const defaultProxy = new BefProxy(this.httpClient, uriService);
        defaultProxy.setBaseUri(this.baseUri);
        /** @type {?} */
        const extend = new BefProxyExtend(this.repository);
        defaultProxy.setProxyExtend(extend);
        return defaultProxy;
    }
    // #endregion
    // #region 基本CRUD方法
    /**
     * 已废弃，请使用repository.proxy对应方法代替
     * @deprecated
     * @param {?=} entityFilter
     * @return {?}
     */
    query(entityFilter) {
        return this.proxy.query(entityFilter);
    }
    /**
     * 已废弃，请使用repository.proxy对应方法代替
     * @deprecated
     * @param {?} entityFilter
     * @param {?} requestInfo
     * @return {?}
     */
    extendQuery(entityFilter, requestInfo) {
        return this.proxy.extendQuery(entityFilter, requestInfo);
    }
    /**
     * 分页查询各从表数据
     * @param {?} id 主表id
     * @param {?} retrieveParam 参数
     * @param {?} requestInfo
     * @return {?}
     */
    serviceRetrieve(id, retrieveParam, requestInfo) {
        return this.proxy.serviceRetrieve(id, retrieveParam, requestInfo);
    }
    /**
     * 分页查询从表/从从表数据
     * @param {?} params 查询参数
     * @return {?}
     */
    queryChild(params) {
        return this.proxy.queryChild(params);
    }
    /**
     * 已废弃，请使用repository.proxy对应方法代替
     * @deprecated
     * @param {?} id
     * @return {?}
     */
    retrieve(id) {
        return this.proxy.retrieve(id);
    }
    /**
     * 已废弃，请使用repository.proxy对应方法代替
     * @deprecated
     * @param {?} id
     * @param {?} requestInfo
     * @param {?=} retrieveParam
     * @return {?}
     */
    extendRetrieve(id, requestInfo, retrieveParam) {
        return this.proxy.extendRetrieve(id, requestInfo, retrieveParam);
    }
    /**
     * 已废弃，请使用repository.proxy对应方法代替
     * @deprecated
     * @param {?=} defaultValue
     * @param {?=} requestInfo
     * @return {?}
     */
    create(defaultValue, requestInfo) {
        return this.proxy.create(defaultValue, requestInfo);
    }
    /**
     * 已废弃，请使用repository.proxy对应方法代替
     * @deprecated
     * @param {?} fpath
     * @param {?=} requestInfo
     * @return {?}
     */
    createByPath(fpath, requestInfo) {
        return this.proxy.createByPath(fpath, requestInfo);
    }
    /**
     * 已废弃，请使用repository.proxy对应方法代替
     * @deprecated
     * @param {?} changeDetail
     * @param {?=} requestInfo
     * @return {?}
     */
    update(changeDetail, requestInfo) {
        return this.proxy.update(changeDetail, requestInfo);
    }
    /**
     * 已废弃，请使用repository.proxy对应方法代替
     * @deprecated
     * @param {?=} requestInfo
     * @return {?}
     */
    save(requestInfo) {
        return this.proxy.save(requestInfo);
    }
    /**
     * 已废弃，请使用repository.proxy对应方法代替
     * @deprecated
     * @param {?} id
     * @return {?}
     */
    delete(id) {
        return this.proxy.delete(id);
    }
    /**
     * 已废弃，请使用repository.proxy对应方法代替
     * @deprecated
     * @param {?} id
     * @param {?} requestInfo
     * @return {?}
     */
    extendDelete(id, requestInfo) {
        return this.proxy.extendDelete(id, requestInfo);
    }
    /**
     * 已废弃，请使用repository.proxy对应方法代替
     * @deprecated
     * @param {?} fpath
     * @param {?} id
     * @return {?}
     */
    deletByPath(fpath, id) {
        return this.proxy.deletByPath(fpath, id);
    }
    /**
     * 已废弃，请使用repository.proxy对应方法代替
     * @deprecated
     * @param {?} fpath
     * @param {?} id
     * @param {?} requestInfo
     * @return {?}
     */
    extendDeletByPath(fpath, id, requestInfo) {
        return this.proxy.extendDeletByPath(fpath, id, requestInfo);
    }
    /**
     * @param {?} fPath
     * @param {?} ids
     * @param {?} requestInfo
     * @return {?}
     */
    batchDeleteByPath(fPath, ids, requestInfo) {
        return this.proxy.batchDeleteByPath(fPath, ids, requestInfo);
    }
    /**
     * 已废弃，请使用repository.proxy对应方法代替
     * @deprecated
     * @param {?} ids
     * @return {?}
     */
    batchDelete(ids) {
        return this.proxy.batchDelete(ids);
    }
    /**
     * 已废弃，请使用repository.proxy对应方法代替
     * @deprecated
     * @param {?} ids
     * @param {?} requestInfo
     * @return {?}
     */
    extendBatchDelete(ids, requestInfo) {
        return this.proxy.extendBatchDelete(ids, requestInfo);
    }
    /**
     * 根据ids批量删除实体
     * @param {?} ids ids
     * @param {?} requestInfo requestInfo
     * @return {?}
     */
    extendBatchDeletion(ids, requestInfo) {
        return this.proxy.extendBatchDeletion(ids, requestInfo);
    }
    /**
     * 已废弃，请使用repository.proxy对应方法代替
     * @deprecated
     * @param {?=} options
     * @return {?}
     */
    cancel(options) {
        return this.proxy.cancel(options);
    }
    // #endregion
    // #region request方法
    /**
     * 已废弃，请使用repository.proxy对应方法代替
     * @deprecated
     * @param {?} url
     * @param {?} method
     * @param {?=} params
     * @param {?=} options
     * @param {?=} selfHandError
     * @param {?=} ignoreError
     * @param {?=} ignoreChanges
     * @return {?}
     */
    request(url, method, params, options, selfHandError, ignoreError, ignoreChanges) {
        return this.innerRequest(url, method, params, options, selfHandError, ignoreError, ignoreChanges, false);
    }
    // tslint:disable: align
    /**
     * 调用后端方法
     * @param {?} url url
     * @param {?} method method
     * @param {?=} params params
     * @param {?=} options options
     * @param {?=} selfHandError 自己处理异常
     * @param {?=} ignoreError 忽略错误
     * @param {?=} ignoreChanges 忽略变更
     * @return {?}
     */
    invoke(url, method, params, options, selfHandError, ignoreError, ignoreChanges) {
        if (options && options.body && options.body.RequestInfo) {
            throw new Error('请使用requestInfo提交变更');
        }
        return this.innerRequest(url, method, params, options, selfHandError, ignoreError, ignoreChanges, true);
    }
    /**
     * 内部的request方法
     * @private
     * @param {?} url
     * @param {?} method
     * @param {?=} params
     * @param {?=} options
     * @param {?=} selfHandError
     * @param {?=} ignoreError
     * @param {?=} ignoreChanges
     * @param {?=} useCorrectRequestInfoCheckMethod
     * @return {?}
     */
    innerRequest(url, method, params, options, selfHandError, ignoreError, ignoreChanges, useCorrectRequestInfoCheckMethod) {
        options = options || {};
        /** @type {?} */
        const befSessionIdKey = 'BEFSessionID';
        // 是否自己处理异常
        if (typeof (selfHandError) === 'undefined' || typeof (selfHandError) !== 'boolean') {
            selfHandError = false;
        }
        // 是否忽略异常继续执行
        if (typeof (ignoreError) === 'undefined' || typeof (ignoreError) !== 'boolean') {
            ignoreError = false;
        }
        // 选择检查RequestInfo的方法
        if (typeof (useCorrectRequestInfoCheckMethod) === 'undefined' || typeof (useCorrectRequestInfoCheckMethod) !== 'boolean') {
            useCorrectRequestInfoCheckMethod = false;
        }
        /** @type {?} */
        const checkRequestInfoMethod = useCorrectRequestInfoCheckMethod ? this.existRequestInfo : this.hasRequestInfo;
        // params
        if (params) {
            // const httpParams = this.buildParams(params);
            options.params = params;
        }
        // 带有requestInfo的请求，请求成功后清空变更集
        /** @type {?} */
        const hasRequestInfo = checkRequestInfoMethod(options);
        /** @type {?} */
        let headers = HttpHeaderUtil.convertToHeaders(options.headers);
        // 串联session流和http流
        /** @type {?} */
        const formAppContext = this.repository.appContext.getFormAppContext();
        return BefSessionManager.getSessionId(formAppContext, this.sessionService).pipe(switchMap((/**
         * @param {?} sessionId
         * @return {?}
         */
        (sessionId) => {
            headers = this.sessionService.extendRequestHeaders(headers);
            options.headers = HttpHeaderUtil.toJson(headers);
            options.observe = 'response';
            return this.httpService.request(method, url, options);
        })), tap((/**
         * @param {?} response
         * @return {?}
         */
        (response) => {
            if (response.headers && response.headers.has(befSessionIdKey)) {
                this.sessionService.setBeSessionId(response.headers.get(befSessionIdKey));
            }
        })), map((/**
         * @param {?} response
         * @return {?}
         */
        (response) => response.body)), map((/**
         * @param {?} result
         * @return {?}
         */
        (result) => {
            /** @type {?} */
            const messages = ResponseInfoUtil.parseBackEndMessage(result);
            BackEndMessageUtil.handleMessage(messages, this.repository.getInjector());
            return this.handleReponseInfo(result, hasRequestInfo, ignoreChanges, options);
        })), catchError((/**
         * @param {?} error
         * @return {?}
         */
        (error) => {
            return this.handleErrors(error, selfHandError, ignoreError);
        })));
    }
    /**
     * 处理返回结果
     * @param {?} result
     * @param {?} hasRequestInfo
     * @param {?} ignoreChanges
     * @param {?} options
     * @return {?}
     */
    handleReponseInfo(result, hasRequestInfo, ignoreChanges, options) {
        if (hasRequestInfo) {
            // 如果有带有RequestInfo，则按新结构处理
            // 1、应用服务器端返回的变更；
            // 2、清空本地变更集；
            // 3、返回新结构
            if (result && result.innerDataChange && ignoreChanges !== true) {
                this.repository.handleDataChangeDetails(result.innerDataChange);
            }
            if (result && result.innerVariableChange) {
                this.repository.handleVariableChangeDetail(result.innerVariableChange);
            }
            this.repository.clearAllEntityChanges();
            /** @type {?} */
            const requestInfo = RequestInfoUtil.getRequestInfo(options);
            /** @type {?} */
            const variableChange = requestInfo && requestInfo.variableChange;
            this.repository.clearAllVariableChanges(variableChange);
            return result;
        }
        else {
            // 如果有没有RequestInfo，则按老的方式处理
            // 1、不处理服务器端返回的变更：跟老的行为一样；
            // 2、不清理本地变更：因为变更没有提交；
            // 3、返回老的结构：兼容老的代码
            return this.unWrapResponseInfo(result);
        }
    }
    /**
     * 错误处理
     * @param {?} error
     * @param {?} selfHandError
     * @param {?} ignoreError
     * @return {?}
     */
    handleErrors(error, selfHandError, ignoreError) {
        this.clearLoading();
        if (!!selfHandError) {
            return throwError(error);
        }
        else {
            /** @type {?} */
            const formAppContext = this.repository.appContext.getFormAppContext();
            /** @type {?} */
            const applicationId = formAppContext.ApplicationId;
            /** @type {?} */
            const applicationContext = window[applicationId] || {};
            /** @type {?} */
            const messages = ResponseInfoUtil.parseBackEndError(error);
            /** @type {?} */
            const bizMessages = BackEndMessageUtil.getFormlessMessages(messages);
            /** @type {?} */
            const isExceptionHandlerExist = !!applicationContext.isExceptionHandlerExist;
            /** @type {?} */
            const isExistFormlessMessage = bizMessages && bizMessages.length > 0 || false;
            /** @type {?} */
            const needThrowException = !(error && error.error && error.error.extensionMessage && BackEndMessageUtil.isBackEndMessageHandlerExist(this.repository.getInjector()) && !isExistFormlessMessage);
            /** @type {?} */
            const willThrowException = !!this.eventBus && isExceptionHandlerExist && needThrowException;
            BackEndMessageUtil.handleMessage(messages, this.repository.getInjector(), { hasThrowError: willThrowException, isException: true, eventBus: this.eventBus, error, formAppContext });
            if (!!this.eventBus && isExceptionHandlerExist) {
                if (ResponseInfoUtil.isReported401Error(error)) {
                    return throwError(error);
                }
                if (needThrowException) {
                    this.eventBus.post('Exception', '', 'onException', error, formAppContext);
                }
                if (ignoreError) {
                    return of(null);
                }
                else {
                    return EMPTY;
                }
            }
            else {
                return throwError(error);
            }
        }
    }
    // #endregion
    // #region 工具方法
    /**
     * 清空Loading
     * @private
     * @return {?}
     */
    clearLoading() {
        /** @type {?} */
        const ifLoadingExists = window['DEVKIT_LOADING_SERVICE'] &&
            window['DEVKIT_LOADING_SERVICE'] instanceof Array &&
            window['DEVKIT_LOADING_SERVICE'].length > 0 || false;
        if (ifLoadingExists === false) {
            return;
        }
        /** @type {?} */
        const loadingServices = window['DEVKIT_LOADING_SERVICE'];
        for (const service of loadingServices) {
            if (typeof (service.destroy) === 'function') {
                service.destroy();
            }
        }
    }
    /**
     * 处理返回值，兼容老版本
     * @private
     * @param {?} result
     * @return {?}
     */
    unWrapResponseInfo(result) {
        return ResponseInfoUtil.unWrapResponseInfo(result);
    }
    /**
     * 是否带有RequestInfo
     * @private
     * @param {?} options
     * @return {?}
     */
    hasRequestInfo(options) {
        return RequestInfoUtil.hasRequestInfoWithR(options);
    }
    /**
     * 是否带有requestInfo
     * @private
     * @param {?} options
     * @return {?}
     */
    existRequestInfo(options) {
        return RequestInfoUtil.hasRequestInfo(options);
    }
    /**
     * 构造HttpParams对象
     * @private
     * @param {?} params 请求参数
     * @return {?}
     */
    buildParams(params) {
        return HttpParamUtil.buildParams(params);
    }
    /**
     * 构造带RequestInfo的Body（适用于多个参数的情况，如果只有一个RequestInfo参数，body=RequestInfo）
     * \@body 未携带RequestInfo的body，格式形如: {key1: value1, key2: value2}
     * @param {?} body
     * @return {?}
     */
    buildBodyWithRequestInfo(body) {
        return RequestInfoUtil.buildBodyWithRequestInfo(body, this.repository);
    }
    /**
     * 构造RequestInfo
     * @return {?}
     */
    buildRequestInfo() {
        return RequestInfoUtil.buildRequestInfo(this.repository);
    }
}
BefRestService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
BefRestService.ctorParameters = () => [
    { type: HttpClient },
    { type: String },
    { type: FrameworkSessionService },
    { type: BefRepository },
    { type: EventBus }
];
if (false) {
    /**
     * @type {?}
     * @private
     */
    BefRestService.prototype.repository;
    /**
     * httpClient
     * @type {?}
     * @private
     */
    BefRestService.prototype.httpClient;
    /**
     * @type {?}
     * @private
     */
    BefRestService.prototype.httpService;
    /**
     * 会话服务
     * @type {?}
     */
    BefRestService.prototype.sessionService;
    /**
     * 接口根Uri
     * @type {?}
     */
    BefRestService.prototype.baseUri;
    /**
     * 事件总线
     * @type {?}
     */
    BefRestService.prototype.eventBus;
}
export { BefRestService };
//# sourceMappingURL=data:application/json;base64,