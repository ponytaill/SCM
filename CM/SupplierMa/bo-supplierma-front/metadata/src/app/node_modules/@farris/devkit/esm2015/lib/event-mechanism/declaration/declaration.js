import { Injectable } from '@angular/core';
import { MetadataUtil } from '../../metadata/index';
import { NG_DECLARATION } from './declaration_decorator';
import { VariableParseService } from '../../variable/index';
import { EventTypeEnum } from './event-type';
class Declaration {
    constructor() {
    }
    /**
     * 初始化
     */
    init(frameComponent) {
        if (!frameComponent) {
            return;
        }
        this.bindDeclaration(frameComponent, null);
    }
    /**
     *  依据定义列表进行初始化
     * @param frameComponent 表单component实例
     * @param ngDeclarations 事件定义列表信息
     */
    initWithDeclarations(frameComponent, ngDeclarations) {
        if (!frameComponent) {
            return;
        }
        this.bindDeclaration(frameComponent, null);
    }
    /**
     * 基于事件元数据构建事件
     * @param context 框架上下文
     */
    bindDeclaration(frameComponent, ngDeclarations) {
        const context = frameComponent.context;
        if (!context) {
            return;
        }
        const ngPublicEventProps = ngDeclarations ? ngDeclarations : this.getNgPublicEvent();
        if (!ngPublicEventProps) {
            return;
        }
        Object.keys(ngPublicEventProps).forEach((propertyName) => {
            const ngExportEvent = ngPublicEventProps[propertyName];
            Object.defineProperty(this, propertyName, {
                value: () => {
                    // 获取命令处理上下文
                    const targetContext = context;
                    // todo: 给ngExportEvent添加frameId（保证框架之间的事件隔离）
                    // if (ngExportEvent.frameId) {
                    //   targetContext = context.appContext.getFrameContext(ngExportEvent.frameId);
                    // }
                    const emitter = ngExportEvent.token;
                    const tokenValue = ngExportEvent.token;
                    const eventName = ngExportEvent.name;
                    let eventArgs = JSON.parse(JSON.stringify(ngExportEvent.params));
                    const eventType = ngExportEvent.type;
                    if (!targetContext.eventBus) {
                        return;
                    }
                    const injector = targetContext.injector;
                    const variableParseService = injector.get(VariableParseService);
                    // 执行参数解析
                    setTimeout(() => {
                        eventArgs = variableParseService.parse(eventArgs, targetContext);
                        const eventSender = targetContext.frameComponent;
                        let currentContext = targetContext;
                        const eventId = new Date().valueOf();
                        if (eventType && eventType === EventTypeEnum.ROUTE) {
                            // 事件依次向上冒泡
                            while (currentContext) {
                                currentContext.eventBus.post(emitter, tokenValue, eventName, eventArgs, eventSender, eventType, eventId);
                                // currentContext = currentContext.parent;
                                currentContext = this.getParentContext(currentContext);
                            }
                        }
                        else {
                            currentContext.eventBus.post(emitter, tokenValue, eventName, eventArgs, eventSender);
                        }
                    }, 0);
                }
            });
        });
    }
    /**
     * 获取事件定义列表
     * @returns  事件定义
     */
    getNgPublicEvent() {
        return MetadataUtil.getPropsMetadatasByName(this.constructor, NG_DECLARATION);
    }
    /**
     * 获取父Context
     * @param context 当前上下文
     */
    getParentContext(context) {
        // 首先查找直接上级FrameContext
        if (context.parent) {
            return context.parent;
        }
        // 到了AppContext边界，返回上级AppContext的根FrameContext
        const parentAppContext = context.appContext.parent;
        if (parentAppContext) {
            return parentAppContext.frameContextManager.getRootFrameContext();
        }
        return null;
    }
}
Declaration.decorators = [
    { type: Injectable }
];
/** @nocollapse */
Declaration.ctorParameters = () => [];
export { Declaration };
//# sourceMappingURL=data:application/json;base64,