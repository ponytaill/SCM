/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, Input, Injector, ElementRef, HostListener } from '@angular/core';
import { NgControl } from '@angular/forms';
var TextareaAutoSizeDirective = /** @class */ (function () {
    function TextareaAutoSizeDirective(el, ngControl, injector) {
        this.el = el;
        this.ngControl = ngControl;
        this.injector = injector;
        this.enable = true;
        this.previousValue = null;
        this.isUserResized = false;
        this.textarea = this.el.nativeElement;
    }
    /**
     * @return {?}
     */
    TextareaAutoSizeDirective.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.init();
    };
    /**
     * @param {?} changes
     * @return {?}
     */
    TextareaAutoSizeDirective.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        if (changes.enable && !changes.enable.isFirstChange()) {
            this.sizeToFit();
        }
    };
    /**
     * @return {?}
     */
    TextareaAutoSizeDirective.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        this.minHeight = this.textarea.getBoundingClientRect().height;
    };
    /**
     * @private
     * @return {?}
     */
    TextareaAutoSizeDirective.prototype.init = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.enable) {
            this.document = this.textarea.ownerDocument;
            this.documentElement = this.document.documentElement;
            if (this.textarea) {
                if (this.textarea.value) {
                    this.sizeToFit();
                }
            }
            if (this.ngControl) {
                this.ngControl.valueChanges.subscribe((/**
                 * @param {?} v
                 * @return {?}
                 */
                function (v) {
                    if (v !== _this.previousValue) {
                        _this.sizeToFit();
                    }
                }));
            }
        }
    };
    /**
     * @return {?}
     */
    TextareaAutoSizeDirective.prototype.onInput = /**
     * @return {?}
     */
    function () {
        this.sizeToFit();
    };
    /**
     * @return {?}
     */
    TextareaAutoSizeDirective.prototype.onValueChange = /**
     * @return {?}
     */
    function () {
        this.sizeToFit();
    };
    /**
     * @private
     * @return {?}
     */
    TextareaAutoSizeDirective.prototype.overflowOffset = /**
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var offsetTop = 0;
        /** @type {?} */
        var el = this.textarea;
        while (el !== document.body && el !== null) {
            offsetTop += el.offsetTop || 0;
            el = el.offsetParent;
        }
        /** @type {?} */
        var top = offsetTop - document.defaultView.pageYOffset;
        /** @type {?} */
        var bottom = this.documentElement.clientHeight - (top + this.textarea.offsetHeight);
        return { top: top, bottom: bottom };
    };
    /**
     * @private
     * @return {?}
     */
    TextareaAutoSizeDirective.prototype.sizeToFit = /**
     * @private
     * @return {?}
     */
    function () {
        if (!this.enable) {
            return;
        }
        /** @type {?} */
        var textarea = this.textarea;
        /** @type {?} */
        var viewportMarginBottom = 100;
        if (this.isUserResized) {
            return;
        }
        if (this.textarea.value === this.previousValue) {
            return;
        }
        if (this.textarea.offsetWidth <= 0 && this.textarea.offsetHeight <= 0) {
            return;
        }
        // const { top, bottom } = this.overflowOffset();
        // if (top < 0 || bottom < 0) {
        //     return;
        // }
        /** @type {?} */
        var textareaStyle = getComputedStyle(textarea);
        /** @type {?} */
        var topBorderWidth = Number(textareaStyle.borderTopWidth.replace(/px/, ''));
        /** @type {?} */
        var bottomBorderWidth = Number(textareaStyle.borderBottomWidth.replace(/px/, ''));
        /** @type {?} */
        var isBorderBox = textareaStyle.boxSizing === 'border-box';
        /** @type {?} */
        var borderAddOn = isBorderBox ? topBorderWidth + bottomBorderWidth : 0;
        // const maxHeight = Number(textareaStyle.height.replace(/px/, '')) + bottom;
        // const adjustedViewportMarginBottom = bottom < viewportMarginBottom ? bottom : viewportMarginBottom;
        // textarea.style.maxHeight = `${maxHeight - adjustedViewportMarginBottom}px`;
        if (this.maxHeight) {
            textarea.style.maxHeight = this.maxHeight + "px";
        }
        /** @type {?} */
        var container = textarea.parentElement;
        if (container instanceof HTMLElement) {
            /** @type {?} */
            var containerHeight = container.style.height;
            container.style.height = getComputedStyle(container).height;
            textarea.style.height = 'auto';
            /** @type {?} */
            var h = textarea.scrollHeight + borderAddOn;
            if (this.minHeight > h) {
                h = this.minHeight;
            }
            textarea.style.height = h + "px";
            container.style.height = containerHeight;
        }
        this.previousValue = textarea.value;
    };
    TextareaAutoSizeDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[auto-size]',
                },] }
    ];
    /** @nocollapse */
    TextareaAutoSizeDirective.ctorParameters = function () { return [
        { type: ElementRef },
        { type: NgControl },
        { type: Injector }
    ]; };
    TextareaAutoSizeDirective.propDecorators = {
        enable: [{ type: Input, args: ['auto-size',] }],
        maxHeight: [{ type: Input }],
        onInput: [{ type: HostListener, args: ['input',] }],
        onValueChange: [{ type: HostListener, args: ['change',] }]
    };
    return TextareaAutoSizeDirective;
}());
export { TextareaAutoSizeDirective };
if (false) {
    /** @type {?} */
    TextareaAutoSizeDirective.prototype.enable;
    /** @type {?} */
    TextareaAutoSizeDirective.prototype.maxHeight;
    /**
     * @type {?}
     * @private
     */
    TextareaAutoSizeDirective.prototype.previousValue;
    /**
     * @type {?}
     * @private
     */
    TextareaAutoSizeDirective.prototype.isUserResized;
    /**
     * @type {?}
     * @private
     */
    TextareaAutoSizeDirective.prototype.textarea;
    /**
     * @type {?}
     * @private
     */
    TextareaAutoSizeDirective.prototype.document;
    /**
     * @type {?}
     * @private
     */
    TextareaAutoSizeDirective.prototype.documentElement;
    /**
     * @type {?}
     * @private
     */
    TextareaAutoSizeDirective.prototype.minHeight;
    /**
     * @type {?}
     * @private
     */
    TextareaAutoSizeDirective.prototype.el;
    /**
     * @type {?}
     * @private
     */
    TextareaAutoSizeDirective.prototype.ngControl;
    /**
     * @type {?}
     * @private
     */
    TextareaAutoSizeDirective.prototype.injector;
}
//# sourceMappingURL=data:application/json;base64,