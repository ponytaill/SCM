import * as tslib_1 from "tslib";
import { ValidationError } from './validation_error';
import { ValidationTypes } from './validation_types';
import { EntityList } from '../entity_list';
import { FieldMetadataUtil } from '../metadata/index';
/**
 * 执行数据验证
 */
var ValidationExecutor = /** @class */ (function () {
    function ValidationExecutor(validator) {
        this.validator = validator;
        /** 异步验证请求集合 */
        this.awaitingPromises = [];
    }
    /**
     * 将信息中的关键字替换为具体实体对象中的信息
     * @param message 验证信息
     * @param metadata 验证规则
     * @param value 待验证的值
     */
    ValidationExecutor.replaceMessageSpecialTokens = function (message, metadata, value) {
        var messageString;
        if (message instanceof Function) {
            messageString = message(metadata);
        }
        else if (typeof message === 'string') {
            messageString = message;
        }
        if (messageString && metadata.constraints instanceof Array) {
            metadata.constraints.forEach(function (constraint, index) {
                messageString = messageString.replace(new RegExp("\\$constraint" + (index + 1), 'g'), constraint);
            });
        }
        if (messageString && value !== undefined && value !== null) {
            messageString = messageString.replace(/\$value/g, value);
        }
        if (messageString) {
            messageString = messageString.replace(/\$property/g, metadata.property);
        }
        if (messageString) {
            messageString = messageString.replace(/\$target/g, metadata.targetName);
        }
        return messageString;
    };
    /**
     * 验证实例对象
     * @param object 验证实例对象
     * @param newValue 实体将要更新的值
     * @param validationErrors 验证信息集合
     * @param propertyName 实例对象属性
     * @param index 所属集合实例中索引
     */
    ValidationExecutor.prototype.execute = function (object, newValue, validationErrors, propertyName, index, externalRules, currentRowId, frameContext) {
        var _this = this;
        // if (!currentRowId) {
        //   currentRowId = object.primaryValue;
        // }
        if (!externalRules && frameContext) {
            externalRules = frameContext.form.getValidationRules();
        }
        // 提取实体上定义的验证描述
        // 格式{key:[rule1,rule2]}
        var validateMetadatas = FieldMetadataUtil.getValidationMetadataWithPath(object);
        var remainedExternalRules = new Map();
        // 合并额外验证规则
        if (externalRules) {
            // const parentPathArray: string[] = object['__PARENT_PATH__'] ? [...object['__PARENT_PATH__']] : [''];
            // if (parentPathArray.length > 1) {
            //   parentPathArray[0] = '';
            // }
            var parentPathArray = [];
            var objectCursor = object;
            while (objectCursor && objectCursor !== objectCursor['__PARENT__']) {
                var cursorParentPath = objectCursor['__PARENT_PATH__'] ? objectCursor['__PARENT_PATH__'][1] : '';
                // if (parentPathArray[parentPathArray.length - 1] !== cursorParentPath) {
                parentPathArray.push(cursorParentPath);
                // }
                objectCursor = objectCursor['__PARENT__'];
                if (objectCursor instanceof EntityList) {
                    objectCursor = objectCursor['__PARENT__'];
                }
            }
            var parentPath_1 = parentPathArray.reverse().join('/');
            externalRules.forEach(function (rules, path) {
                if (path) {
                    // 提取额外验证规则字段路径
                    var pathArray = path.split('/');
                    // 提取字段名称
                    var fieldName_1 = pathArray.pop();
                    // 提取字段父路径
                    var fieldParentPath = pathArray.join('/');
                    // 匹配外部验证规则和实体验证规则父路径
                    if (parentPath_1 === fieldParentPath) {
                        validateMetadatas[fieldName_1] = tslib_1.__spread((validateMetadatas[fieldName_1] || []));
                        // 合并外部校验规则到实体校验规则，并同步外部验证规则显示信息至实体验证规则，如：中英文字段描述、字段所在位置。
                        if (rules.length) {
                            var targetId_1 = '';
                            rules.forEach(function (rule) {
                                if (rule.targetId && rule.targetId.length > targetId_1.length) {
                                    targetId_1 = rule.targetId;
                                }
                                validateMetadatas[fieldName_1].push(rule);
                            });
                            validateMetadatas[fieldName_1].forEach(function (validateRule) {
                                validateRule.targetId = targetId_1;
                                validateRule.targetName = rules[0].targetName;
                                validateRule.property = rules[0].property;
                                if (rules[0].frameContext) {
                                    validateRule.frameContext = rules[0].frameContext;
                                }
                                validateRule.fullPath = rules[0].fullPath;
                                validateRule['initialized'] = true;
                            });
                        }
                    }
                    else {
                        remainedExternalRules.set(path, rules);
                    }
                }
            });
        }
        // 处理校验规则中的属性名称
        // 场景为前端未开启校验或form校验规则中对应绑定路径中对应控件未开启校验，导致上一步骤中组件名、字段名未能同步为对应中文
        if (validateMetadatas && Object.keys(validateMetadatas).length > 0) {
            Object.keys(validateMetadatas).forEach(function (fieldName) {
                var validateRules = validateMetadatas[fieldName];
                if (validateRules && validateRules.length > 0) {
                    var firstValidateRule = validateRules[0];
                    var path_1 = firstValidateRule['path'];
                    if (path_1) {
                        validateRules.forEach(function (validateRule) {
                            // 将initialized判断外移减少代码执行次数
                            if (validateRule['initialized'] !== true) {
                                var bindingPaths = path_1.split('.');
                                var form = _this.getForm(bindingPaths, frameContext);
                                var formControl = _this.getFormControl(bindingPaths, frameContext);
                                if (formControl) {
                                    validateRule.targetId = formControl.id;
                                    validateRule.targetName = form && form.formGroupName;
                                    validateRule.property = formControl.name || formControl.defaultI18nValue || '';
                                }
                            }
                        });
                    }
                }
            });
        }
        // 过滤出当前验证属性的验证规则
        if (propertyName) {
            validateMetadatas = Object.keys(validateMetadatas)
                .filter(function (key) { return key === propertyName; })
                .reduce(function (val, curr) {
                var _a;
                return Object.assign({}, val, (_a = {}, _a[curr] = validateMetadatas[curr], _a));
            }, {});
        }
        // validateMetadatas = {rule:当前属性的所有校验规则}
        Object.keys(validateMetadatas).filter(function (key) {
            return object && (object.hasOwnProperty(key) ||
                (object.constructor.prototype &&
                    object.constructor.prototype.typeName &&
                    object.constructor.prototype.hasOwnProperty(key)) ||
                object['__proto__'].hasOwnProperty(key));
        }).forEach(function (key) {
            // todo: 没用兼容value是undefined的情况
            var value = newValue;
            if (newValue === undefined) {
                value = object[key];
            }
            var isMultLanguageField = false;
            var multiLangFields = _this.getMultiLanguageFields(object);
            if (multiLangFields && multiLangFields.length > 0) {
                if (multiLangFields.includes(key)) {
                    isMultLanguageField = true;
                }
            }
            // const value = newValue || 
            var validateRules = validateMetadatas[key];
            if (validateRules.length) {
                var _a = validateRules[0], fieldName = _a.property, field = _a.targetId, frameContext_1 = _a.frameContext, fullPath = _a.fullPath;
                // const fieldContainerName = Number.isInteger(index) ?
                // `${validateRules[0].targetName} 第${index + 1}行` : validateRules[0].targetName;
                var fieldContainerName = Number.isInteger(index) ?
                    ValidationExecutor.replaceMessageSpecialTokens(ValidationTypes.getMessage(ValidationTypes.FIELD_CONTAINER), validateRules[0], index + 1) : validateRules[0].targetName;
                var validationDisplayName = fieldContainerName ? fieldContainerName + " - " + fieldName : "" + fieldName;
                // const property = validateRules['path'] || key;
                var validationError = _this.generateValidationError(object, value, key, validationDisplayName, index, field, frameContext_1, fullPath);
                if (index !== undefined) {
                    validationError['index'] = index;
                }
                validationErrors.push(validationError);
                _this.defaultValidations(object, value, validateRules, validationError, isMultLanguageField, currentRowId);
            }
        });
        this.objectValidations(object, validationErrors, propertyName, index, remainedExternalRules, currentRowId, frameContext);
        this.listValidations(object, validationErrors, propertyName, index, remainedExternalRules, frameContext);
        // this.sortValidationErrors(validationErrors);
        // todo 存在某些ngObject类型的数据，界面上没有，实体中有，实体设置了必填，导致验证不通过无法保存的问题
        // if (!propertyName) {
        //     this.objectValidations(object, validationErrors);
        // }
    };
    ValidationExecutor.prototype.getMultiLanguageFields = function (entity) {
        if (entity && entity.constructor) {
            var ngFields_1 = FieldMetadataUtil.getNgFields(entity.constructor);
            return Object.keys(ngFields_1).filter(function (fieldName) { return ngFields_1[fieldName].enableMultiLangInput; });
        }
        return null;
    };
    /**
     * 清除通过验证信息
     * @param errors 验证失败信息
     */
    ValidationExecutor.prototype.stripEmptyErrors = function (errors) {
        var _this = this;
        return errors.filter(function (error) {
            if (error.children) {
                error.children = _this.stripEmptyErrors(error.children);
            }
            if (Object.keys(error.constraints).length === 0) {
                if (error.children.length === 0) {
                    return false;
                }
                else {
                    delete error.constraints;
                }
            }
            return true;
        });
    };
    /**
     * 生成未通过验证的对象
     * @param object 要验证的实体实例对象
     * @param value 要验证的值
     * @param propertyName 待验证的实体属性名称
     * @param index 验证数据索引
     * @param field 待验证字段
     */
    ValidationExecutor.prototype.generateValidationError = function (object, value, property, propertyName, index, field, frameContext, fullPath) {
        var validationError = new ValidationError();
        validationError.target = object;
        validationError.value = value;
        validationError.property = property;
        validationError.propertyName = propertyName;
        validationError.field = field;
        validationError.index = index;
        validationError.children = [];
        validationError.constraints = {};
        if (frameContext) {
            validationError.frameContext = frameContext;
        }
        validationError.fullPath = fullPath;
        return validationError;
    };
    /**
     * 验证实体中的属性
     * @param object 要验证的实体实例对象
     * @param value 要验证的值
     * @param validateRules 验证规则
     * @param errorMap 难证信息。{[key]: message}
     *
     * key: 验证规则名称
     * message: 验证信息
     */
    ValidationExecutor.prototype.defaultValidations = function (object, value, validateRules, validationError, isMultLanguageField, currentRowId) {
        var _this = this;
        var errorMap = validationError.constraints;
        return validateRules
            .filter(function (validateRule) {
            // 验证实体属性是否符合规则
            var validValue = _this.validator.validateValueByMetadata(object, value, validateRule, isMultLanguageField, currentRowId);
            if (validValue instanceof Promise) {
                var promise = validValue.then(function (isValid) {
                    if (!isValid) {
                        var _a = _this.createValidationError(object, value, validateRule), type = _a.type, message = _a.messageString;
                        errorMap[type] = message;
                        validationError.rule = validateRule;
                    }
                });
                _this.awaitingPromises.push(promise);
            }
            return !validValue;
        })
            .forEach(function (validateRule) {
            // 不符合规则，生成错误信息
            var _a = _this.createValidationError(object, value, validateRule), key = _a.type, message = _a.messageString;
            errorMap[key] = message;
            validationError.rule = validateRule;
        });
    };
    /**
     * 验证列表中的每条记录
     * @param object 要验证的实体实例对象
     * @param errors 验证失败的信息集合
     * @param property 属性名称
     * @param parentIndex 当前集合的父对象所属集合列表中的索引。
     */
    ValidationExecutor.prototype.listValidations = function (object, errors, property, parentIndex, externalRules, frameContext) {
        var _this = this;
        var INDEX_LABEL = "__ACTUAL_INDEX__";
        var listFields = FieldMetadataUtil.getNgList(object.constructor);
        if (!listFields) {
            return;
        }
        var keys = Object.keys(listFields);
        if (property) {
            keys = keys.filter(function (key) { return key === property; });
        }
        keys.forEach(function (propertyName) {
            var metadata = listFields[propertyName];
            var clzType = metadata.type;
            var value = object[propertyName];
            if (value) {
                var parentPaths = object.getPaths().path || [];
                parentPaths.push(propertyName);
                var validationError_1 = _this.generateValidationError(object, value.items, parentPaths.join('.'), propertyName, parentIndex);
                validationError_1.isArray = true;
                errors.push(validationError_1);
                value.items.forEach(function (entity, index) {
                    var actualIndex = entity[INDEX_LABEL] ? entity[INDEX_LABEL] : index;
                    _this.execute(entity, undefined, validationError_1.children, undefined, actualIndex, externalRules, entity.primaryValue, frameContext);
                });
            }
        });
    };
    /**
     * 验证实体中的引用对象
     * @param object 要验证的实体对象
     * @param errors 错误信息集合
     */
    ValidationExecutor.prototype.objectValidations = function (object, errors, property, parentIndex, externalRules, currentRowId, frameContext) {
        var _this = this;
        var objectFields = FieldMetadataUtil.getNgObjects(object.constructor);
        if (!objectFields || Object.keys(objectFields).length < 1) {
            return;
        }
        var keys = Object.keys(objectFields);
        if (property) {
            keys = keys.filter(function (key) { return key === property; });
        }
        keys.forEach(function (propertyName) {
            var metadata = objectFields[propertyName];
            var objectType = metadata.type;
            var value = object[propertyName];
            if (value) {
                _this.execute(value, undefined, errors, undefined, parentIndex, externalRules, currentRowId, frameContext);
            }
        });
    };
    /**
     * 创建验证规则信息
     * @param object 要验证的实体对象
     * @param value 验证的值
     * @param metadata 验证规则
     */
    ValidationExecutor.prototype.createValidationError = function (object, value, metadata) {
        var targetName = object.constructor ? object.constructor.name : undefined;
        var type = metadata.type;
        var message = metadata.message;
        if (!message) {
            message = ValidationTypes.getMessage(type);
        }
        if (ValidationTypes.isValidType(type) && (type === ValidationTypes.MAXVALUE || type === ValidationTypes.MINVALUE)) {
            if (this.isDateString(value) && metadata.constraints && metadata.constraints.length) {
                // 获取日期类型的提示信息
                var extType = type === ValidationTypes.MINVALUE ? ValidationTypes.MIN_DATE : ValidationTypes.MAX_DATE;
                message = ValidationTypes.getMessage(extType);
                /*if (metadata.constraints[0]) {
                  metadata.constraints[0] = DateUtil.format(metadata.constraints[0], 'yyyy-MM-dd HH:mm:ss');
                }*/
            }
        }
        var messageString = ValidationExecutor.replaceMessageSpecialTokens(message, metadata, value);
        return { type: type, messageString: messageString, metadata: metadata };
    };
    ValidationExecutor.prototype.getFrameContext = function (bindingPaths, eventFrameContext) {
        if (!bindingPaths || bindingPaths.length < 1 || !eventFrameContext) {
            return null;
        }
        var paths = bindingPaths.concat([]);
        paths.pop();
        var bindingPath = paths.join('/');
        var frameContext = eventFrameContext.appContext.frameContextManager.getFrameContexts().find(function (context) { return context && context.viewModel && context.viewModel.bindingPath && context.viewModel.bindingPath.split('/').filter(function (p) { return p; }).join('/') === bindingPath; });
        return frameContext || null;
    };
    ValidationExecutor.prototype.getForm = function (bindingPaths, eventFrameContext) {
        if (!bindingPaths || bindingPaths.length < 1 || !eventFrameContext) {
            return null;
        }
        var frameContext = this.getFrameContext(bindingPaths, eventFrameContext);
        return frameContext && frameContext.form || null;
    };
    ValidationExecutor.prototype.getFormControl = function (bindingPaths, eventFrameContext) {
        if (!bindingPaths || bindingPaths.length < 1 || !eventFrameContext) {
            return null;
        }
        var paths = bindingPaths.concat([]);
        var propertyName = paths.pop();
        var frameContext = this.getFrameContext(bindingPaths, eventFrameContext);
        var formControl = frameContext && frameContext.form && frameContext.form.ngFormControls && frameContext.form.ngFormControls[propertyName] || null;
        return formControl;
    };
    ValidationExecutor.prototype.isDateString = function (value) {
        var regex = /\d{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])(T|\s?)?(([0-2]\d:[0-5]\d)?(:[0-5]\d(?:\.\d+)))?(?:Z|\+[0-2]\d(?:\:[0-5]\d)?)?/g;
        return regex.test(value);
    };
    return ValidationExecutor;
}());
export { ValidationExecutor };
//# sourceMappingURL=data:application/json;base64,