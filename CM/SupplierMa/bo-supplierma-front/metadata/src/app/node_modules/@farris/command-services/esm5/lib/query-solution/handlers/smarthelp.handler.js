import { CompareType } from '../enum/compare-type.enum';
import { ValueType } from '../enum/value-type.enum';
import { RelationType } from '../enum/relation-type.enum';
var SmartHelpHandler = /** @class */ (function () {
    function SmartHelpHandler() {
    }
    SmartHelpHandler.prototype.convert = function (qc) {
        var shv = qc.value;
        if (shv.value.length == 0)
            return [];
        var arr = [];
        if (shv.isInputText || shv.valueField == null) {
            arr.push({
                'FilterField': qc.fieldCode,
                'Compare': CompareType.Like,
                'Value': shv.textValue,
                'Relation': RelationType.And,
                'Expresstype': ValueType.Value
            });
            return arr;
        }
        else {
            shv.getOriginalValue().split(',').forEach(function (id) {
                id && arr.push({
                    'FilterField': qc.fieldCode,
                    'Compare': CompareType.Equal,
                    'Value': id,
                    'Relation': RelationType.Or,
                    'Expresstype': ValueType.Value
                });
            });
            if (arr.length > 0) {
                arr[0]['Lbracket'] = '(';
                arr[arr.length - 1]['Rbracket'] = ')';
                arr[arr.length - 1]['Relation'] = RelationType.And;
                return arr;
            }
            else {
                return [];
            }
        }
    };
    return SmartHelpHandler;
}());
export { SmartHelpHandler };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic21hcnRoZWxwLmhhbmRsZXIuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZmFycmlzL2NvbW1hbmQtc2VydmljZXMvIiwic291cmNlcyI6WyJsaWIvcXVlcnktc29sdXRpb24vaGFuZGxlcnMvc21hcnRoZWxwLmhhbmRsZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLDJCQUEyQixDQUFDO0FBQ3hELE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSx5QkFBeUIsQ0FBQztBQUNwRCxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sNEJBQTRCLENBQUM7QUFFMUQ7SUFBQTtJQW1DQSxDQUFDO0lBbENHLGtDQUFPLEdBQVAsVUFBUSxFQUFrQjtRQUN0QixJQUFNLEdBQUcsR0FBSSxFQUFFLENBQUMsS0FBd0IsQ0FBQztRQUN6QyxJQUFHLEdBQUcsQ0FBQyxLQUFLLENBQUMsTUFBTSxJQUFJLENBQUM7WUFBRSxPQUFPLEVBQUUsQ0FBQztRQUVwQyxJQUFNLEdBQUcsR0FBRyxFQUFFLENBQUM7UUFDZixJQUFHLEdBQUcsQ0FBQyxXQUFXLElBQUksR0FBRyxDQUFDLFVBQVUsSUFBSSxJQUFJLEVBQUM7WUFDekMsR0FBRyxDQUFDLElBQUksQ0FBQztnQkFDTCxhQUFhLEVBQUcsRUFBRSxDQUFDLFNBQVM7Z0JBQzVCLFNBQVMsRUFBRyxXQUFXLENBQUMsSUFBSTtnQkFDNUIsT0FBTyxFQUFHLEdBQUcsQ0FBQyxTQUFTO2dCQUN2QixVQUFVLEVBQUcsWUFBWSxDQUFDLEdBQUc7Z0JBQzdCLGFBQWEsRUFBQyxTQUFTLENBQUMsS0FBSzthQUNoQyxDQUFDLENBQUM7WUFDSCxPQUFPLEdBQUcsQ0FBQztTQUNkO2FBQUk7WUFDRCxHQUFHLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsT0FBTyxDQUFDLFVBQUEsRUFBRTtnQkFDeEMsRUFBRSxJQUFJLEdBQUcsQ0FBQyxJQUFJLENBQUM7b0JBQ1gsYUFBYSxFQUFHLEVBQUUsQ0FBQyxTQUFTO29CQUM1QixTQUFTLEVBQUcsV0FBVyxDQUFDLEtBQUs7b0JBQzdCLE9BQU8sRUFBRyxFQUFFO29CQUNaLFVBQVUsRUFBRyxZQUFZLENBQUMsRUFBRTtvQkFDNUIsYUFBYSxFQUFDLFNBQVMsQ0FBQyxLQUFLO2lCQUNoQyxDQUFDLENBQUM7WUFDUCxDQUFDLENBQUMsQ0FBQztZQUNILElBQUcsR0FBRyxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUM7Z0JBQ2QsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxHQUFHLEdBQUcsQ0FBQztnQkFDekIsR0FBRyxDQUFDLEdBQUcsQ0FBQyxNQUFNLEdBQUUsQ0FBQyxDQUFDLENBQUMsVUFBVSxDQUFDLEdBQUcsR0FBRyxDQUFDO2dCQUNyQyxHQUFHLENBQUMsR0FBRyxDQUFDLE1BQU0sR0FBRSxDQUFDLENBQUMsQ0FBQyxVQUFVLENBQUMsR0FBRyxZQUFZLENBQUMsR0FBRyxDQUFDO2dCQUNsRCxPQUFPLEdBQUcsQ0FBQzthQUNkO2lCQUFJO2dCQUNELE9BQU8sRUFBRSxDQUFDO2FBQ2I7U0FDSjtJQUNMLENBQUM7SUFDTCx1QkFBQztBQUFELENBQUMsQUFuQ0QsSUFtQ0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJUXVlcnlDb25kaXRpb25IYW5kbGVyIH0gZnJvbSBcIi4vaXF1ZXJ5Y29uZGl0aW9uLmhhbmRsZXJcIjtcbmltcG9ydCB7IFF1ZXJ5Q29uZGl0aW9uLCBTbWFydEhlbHBWYWx1ZSB9IGZyb20gXCJAZmFycmlzL2NvbXBvbmVudC1xdWVyeWNvbmRpdGlvblwiO1xuaW1wb3J0IHsgQ29tcGFyZVR5cGUgfSBmcm9tICcuLi9lbnVtL2NvbXBhcmUtdHlwZS5lbnVtJztcbmltcG9ydCB7IFZhbHVlVHlwZSB9IGZyb20gJy4uL2VudW0vdmFsdWUtdHlwZS5lbnVtJztcbmltcG9ydCB7IFJlbGF0aW9uVHlwZSB9IGZyb20gJy4uL2VudW0vcmVsYXRpb24tdHlwZS5lbnVtJztcblxuZXhwb3J0IGNsYXNzIFNtYXJ0SGVscEhhbmRsZXIgaW1wbGVtZW50cyBJUXVlcnlDb25kaXRpb25IYW5kbGVye1xuICAgIGNvbnZlcnQocWM6IFF1ZXJ5Q29uZGl0aW9uKSB7XG4gICAgICAgIGNvbnN0IHNodiA9IChxYy52YWx1ZSBhcyBTbWFydEhlbHBWYWx1ZSk7XG4gICAgICAgIGlmKHNodi52YWx1ZS5sZW5ndGggPT0gMCkgcmV0dXJuIFtdO1xuXG4gICAgICAgIGNvbnN0IGFyciA9IFtdO1xuICAgICAgICBpZihzaHYuaXNJbnB1dFRleHQgfHwgc2h2LnZhbHVlRmllbGQgPT0gbnVsbCl7XG4gICAgICAgICAgICBhcnIucHVzaCh7XG4gICAgICAgICAgICAgICAgJ0ZpbHRlckZpZWxkJyA6IHFjLmZpZWxkQ29kZSxcbiAgICAgICAgICAgICAgICAnQ29tcGFyZScgOiBDb21wYXJlVHlwZS5MaWtlLFxuICAgICAgICAgICAgICAgICdWYWx1ZScgOiBzaHYudGV4dFZhbHVlLFxuICAgICAgICAgICAgICAgICdSZWxhdGlvbicgOiBSZWxhdGlvblR5cGUuQW5kLFxuICAgICAgICAgICAgICAgICdFeHByZXNzdHlwZSc6VmFsdWVUeXBlLlZhbHVlXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJldHVybiBhcnI7XG4gICAgICAgIH1lbHNle1xuICAgICAgICAgICAgc2h2LmdldE9yaWdpbmFsVmFsdWUoKS5zcGxpdCgnLCcpLmZvckVhY2goaWQgPT4ge1xuICAgICAgICAgICAgICAgIGlkICYmIGFyci5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgJ0ZpbHRlckZpZWxkJyA6IHFjLmZpZWxkQ29kZSxcbiAgICAgICAgICAgICAgICAgICAgJ0NvbXBhcmUnIDogQ29tcGFyZVR5cGUuRXF1YWwsXG4gICAgICAgICAgICAgICAgICAgICdWYWx1ZScgOiBpZCxcbiAgICAgICAgICAgICAgICAgICAgJ1JlbGF0aW9uJyA6IFJlbGF0aW9uVHlwZS5PcixcbiAgICAgICAgICAgICAgICAgICAgJ0V4cHJlc3N0eXBlJzpWYWx1ZVR5cGUuVmFsdWVcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgaWYoYXJyLmxlbmd0aCA+IDApe1xuICAgICAgICAgICAgICAgIGFyclswXVsnTGJyYWNrZXQnXSA9ICcoJztcbiAgICAgICAgICAgICAgICBhcnJbYXJyLmxlbmd0aCAtMV1bJ1JicmFja2V0J10gPSAnKSc7XG4gICAgICAgICAgICAgICAgYXJyW2Fyci5sZW5ndGggLTFdWydSZWxhdGlvbiddID0gUmVsYXRpb25UeXBlLkFuZDtcbiAgICAgICAgICAgICAgICByZXR1cm4gYXJyO1xuICAgICAgICAgICAgfWVsc2V7XG4gICAgICAgICAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxufVxuIl19