import { Injectable } from '@angular/core';
import { MetadataUtil } from '../metadata/index';
import { NG_COMMAND } from './decorators';
import { of, Subject, from, EMPTY } from 'rxjs';
import { concatMap, tap, every } from 'rxjs/operators';
/**
 * ViewModel是界面层访问应用层的入口。
 *
 * ### 定义ViewModel
 *
 * 定义ViewModel需要以下几个步骤：
 *
 * 1、定义的ViewModel需要继承ViewModel基类
 * 2、使用NgViewModel关联相关对象，比如：绑定数据（SinmpleDemoBindingData）、表单（SimpleDemoForm）、
 *    状态机（SimpleDemoStateMachine）等，但所有这些关联都是可选的，用不到或者自己单独实现时，不指定即可。
 * 3、同时我们需要传递一个injector给基类的构造函数，在ViewModel实例化时，会从injector获取NgViewModel声明的各个类型的实例。
 *
 * 下面我们来定义一个简单的ViewModel，代码如下：
 * ```ts
 * import { Injector, Injectable } from '@angular/core';
 * import { NgViewModel, ViewModel } from '@farris/devkit';
 *
 * @Injectable()
 * @NgViewModel({
 *   children: [],
 *   binding: SimpleDemoBindingData,
 *   form: SimpleDemoForm,
 *   stateMachine: SimpleDemoStateMachine,
 * })
 * class SimpleDemoViewModel extends ViewModel {
 *    constructor(injector: Injector) {
 *      super(injector);
 *    }
 *    @NgCommand({
 *      name: 'formLoad',
 *      params: {
 *        dataId: '1'
 *      }
 *    })
 *    public formLoad() {}
 * }
 * export { SimpleDemoViewModel };
 * ```
 *
 * 通过组件的构造函数，我们将ViewModel注入进组件
 * ```ts
 * @Component({
 *   selector: 'app-simple-demo',
 *   templateUrl: './simple-demo.component.html'
 * })
 * class SimpleDemoComponent implements OnInit {
 *
 *   public viewModel: SimpleDemoViewModel;
 *
 *   constructor(viewModel: SimpleDemoViewModel) {
 *     this.viewModel = viewModel;
 *   }
 * }
 * ```
 *
 * ### 组件模板中使用ViewModel
 *
 * 我们可以在模板中绑定NgViewModel中指定的 BindingData、Form、StateMachine的实例。
 * ```html
 * * <!--绑定数据-->
 * <p>{{viewModel.bindingData.name}}</p>
 *
 * <!--绑定表单-->
 * <form [formGroup]="viewModel.form">
 *   <input type="text" formControlName="name">
 * </form>
 *
 * <!--绑定状态机-->
 * <button type="button" [disabled]="!viewModel.stateMachine.canAdd">新增 </button>
 * * ```
 *
 * 我们在模板中绑定绑定viewModel的一个方法作为事件处理，这个方法可以是普通的方法，也可以是用NgCommand注解修饰过的。
 * ```html
 * <button type="button" (click)="viewModel.add()">新增 </button>
 * ```
 *
 * ### 组合的ViewModle
 *
 * 当界面比较复杂时，我们对界面按一定的粒度进行拆分，拆分出来的各个组成部分分别对应一个ViewModel，这样就形成了一个ViewModel树。
 * 我们在父的ViewModel的NgViewModel注解中通过在children属性中声明它的子ViewModel，将它们关联起来。
 * 假设我们有一个左列表右卡片的界面，我们可以为左列表、右卡片分别定义一个ViewModel，然后在页面的ViewModel中，将它们组合起来，
 * 代码如下：
 * ```ts
 * @Injectable()
 *  @NgViewModel({
 *  children: [LeftListViewModel, RightCardViewModel],
 *    binding: NestedDemoBindingData,
 * })
 * class NestedDemoViewModel extends ViewModel {
 *   constructor(injector: Injector) {
 *     super(injector);
 *   }
 * }
 * export { NestedDemoViewModel };
 * ```
 */
class ViewModel {
    /**
     * kendogrid option
     */
    // constructor(metadata?: IContextMetadata) {
    //   if (!this.bindingPath && metadata && metadata.bindingTo) {
    //     this.bindingPath = metadata.bindingTo;
    //   }
    // }
    constructor() {
        /**
         * 界面验证信息
         */
        this.verifyInformations = [];
        this.verifycationChanged = new Subject();
    }
    /**
     * 表达式服务
     */
    get expression() {
        return this.frameContext.expressionManager;
    }
    /**
     * 表达式结果
     */
    get expressionResult() {
        return this.frameContext.expressionResult;
    }
    ngOnDestroy() {
        this.dispose();
    }
    dispose(options) {
        // this.frameContext = null;
        // this.bindingData = null;
        // this.stateMachine = null;
        this.form = null;
        // this.uiState = null;
        if (this.entityValueChangingListeners) {
            this.entityValueChangingListeners.clear();
        }
        if (this.entityValueChangedListeners) {
            this.entityValueChangedListeners.clear();
        }
        if (this.verifycationChanged) {
            this.verifycationChanged.complete();
            this.verifycationChanged = null;
        }
    }
    setMetadata(metadata) {
        if (!this.bindingPath && metadata && metadata.bindingTo) {
            this.bindingPath = metadata.bindingTo;
        }
    }
    /**
     * 初始化
     */
    init(context) {
        if (!this.name) {
            this.name = context.metadata.viewModelCode || this.constructor.name;
        }
        this.frameContext = context;
        this.bindingData = context.bindingData;
        this.uiState = context.uiState;
        this.form = context.form;
        this.stateMachine = context.stateMachine;
        this.buildCommands(context);
        this.entityValueChangingListeners = new Map();
        this.entityValueChangedListeners = new Map();
        // 为bindingData赋值值变化监听器
        if (this.bindingData) {
            this.bindingData.setValueChangeInvokerFactory((paths) => {
                return (preValue, value, entityChanged, primaryValue) => {
                    const plainPath = '/' + paths.join('/');
                    let command;
                    if (entityChanged === false) {
                        command = this.entityValueChangingListeners[plainPath];
                    }
                    else {
                        command = this.entityValueChangedListeners[plainPath];
                    }
                    if (!!command) {
                        const change = {
                            paths: paths,
                            preValue: preValue,
                            value: value,
                            id: primaryValue,
                            changed: entityChanged
                        };
                        const commands = command.split(';').filter(p => p);
                        let valueChangeSuccess = true;
                        return from(commands).pipe(concatMap(item => {
                            if (!valueChangeSuccess) {
                                return EMPTY;
                            }
                            return this[item](change).pipe(tap((result) => {
                                valueChangeSuccess = result;
                            }));
                        }), every((result) => result));
                        // return this[command](change).pipe(map(result => {
                        //   return result === false ? false : true;
                        // }));
                    }
                    else {
                        return of(true);
                    }
                };
            });
        }
        this.initListeners();
    }
    /**
     * 绑定命令
     */
    buildCommands(context) {
        const ngCommands = context.metadata.commands || MetadataUtil.getPropsMetadatasByName(this.constructor, NG_COMMAND);
        this.metadatas = ngCommands;
        this.keybindingMap = new Map();
        Object.keys(ngCommands).forEach((propertyName) => {
            const ngCommand = ngCommands[propertyName];
            // 注册快捷键
            if (ngCommand.keyBinding) {
                this.keybindingMap.set(propertyName, ngCommand.keyBinding);
            }
            Object.defineProperty(this, propertyName, {
                value: (data) => {
                    if (context.isDisposed) {
                        return EMPTY;
                    }
                    // 获取命令处理上下文
                    let targetContext = context;
                    if (ngCommand.frameId) {
                        targetContext = context.appContext.getFrameContext(ngCommand.frameId);
                    }
                    const command = {
                        name: ngCommand.name,
                        params: ngCommand.params,
                        paramDescriptions: ngCommand.paramDescriptions,
                        eventParam: data || null
                    };
                    return targetContext.commandBus.dispatch(command);
                }
            });
        });
    }
    /**
     * 从Form获取监听器
     */
    initListeners() {
        const extractPath = (bindingBasePath, bindingPath) => {
            return '/' + bindingBasePath.split('/').concat(bindingPath.split('.')).filter((item) => item.length > 0).join('/');
        };
        if (this.form) {
            const valueChangingListeners = this.form.getEntityValueChangingListeners();
            Object.keys(valueChangingListeners).forEach((bindingPath) => {
                const plainPath = extractPath(this.bindingPath, bindingPath);
                this.entityValueChangingListeners[plainPath] = valueChangingListeners[bindingPath];
            });
            const valueChangedListeners = this.form.getEntityValueChangedListeners();
            Object.keys(valueChangedListeners).forEach((bindingPath) => {
                const plainPath = extractPath(this.bindingPath, bindingPath);
                this.entityValueChangedListeners[plainPath] = valueChangedListeners[bindingPath];
            });
        }
    }
    bindToParent(parent) {
        if (parent) {
            if (parent.verifycationChanged) {
                parent.verifycationChanged.subscribe(verifyInformations => {
                    if (this.verifycationChanged) {
                        this.verifycationChanged.next(verifyInformations);
                    }
                });
            }
        }
    }
    /**
     * 合并审批及表单表达式并计算结果
     * @param expression 表达式
     * @returns
     */
    transform(expression) {
        if (Array.isArray(expression)) {
            const wfConf = expression.find(item => item && item.source === 'wf');
            if (wfConf && wfConf.value) {
                return this.transform(wfConf.value);
            }
            else {
                return this.transform(expression[0]);
            }
        }
        else {
            if (typeof expression === 'boolean') {
                return expression;
            }
            else if (typeof expression === 'string') {
                return new Function('ctx', `return ${expression}`).apply(this.frameContext, [this]);
            }
            else {
                // 表达式result
                return expression;
            }
        }
    }
}
ViewModel.decorators = [
    { type: Injectable }
];
/** @nocollapse */
ViewModel.ctorParameters = () => [];
export { ViewModel };
//# sourceMappingURL=data:application/json;base64,