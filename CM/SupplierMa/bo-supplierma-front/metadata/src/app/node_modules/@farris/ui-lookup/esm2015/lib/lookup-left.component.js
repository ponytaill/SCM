/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*
* @Author: 疯狂秀才(Lucas Huang)
* @Date: 2018-12-14 14:40:48
 * @LastEditors: 疯狂秀才(Lucas Huang)
 * @LastEditTime: 2019-09-25 18:10:29
* @Company: Inspur
* @Version: v0.0.1
*/
import { Component, ViewChild, ViewContainerRef, EventEmitter, Output, ComponentFactoryResolver, ChangeDetectorRef } from '@angular/core';
import { of } from 'rxjs';
import { DataTableComponent } from '@farris/ui-datatable';
import { TreeTableComponent } from '@farris/ui-treetable';
export class LookupLeftComponent {
    /**
     * @param {?} cfr
     * @param {?} cd
     */
    constructor(cfr, cd) {
        this.cfr = cfr;
        this.cd = cd;
        this.selected = new EventEmitter();
        this.unselected = new EventEmitter();
        this.search = new EventEmitter();
        this.pageChanged = new EventEmitter();
        this._searchState = null;
        this.allData = null;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
    }
    /**
     * @return {?}
     */
    createComponent() {
        /** @type {?} */
        let dtFac = null;
        if (!this.isTreeList()) {
            dtFac = this.cfr.resolveComponentFactory(DataTableComponent);
        }
        else {
            dtFac = this.cfr.resolveComponentFactory(TreeTableComponent);
        }
        this.navOptions['keepSelect'] = false;
        // 左侧查询过滤条，隐藏掉；
        this.navOptions['showFilterBar'] = true;
        // if (this.navOptions.width) {
        //     this.navOptions.width = this.navOptions.width - 2;
        // }
        this.navOptions.width = this.lookupCmp.leftPanelWidth - 2;
        // const injector: Injector = ReflectiveInjector.resolveAndCreate([
        //     { provide: DataTableService, useFactory: () => { new DataTableService()}}
        // ]);
        this.cmpRef = this.cmpContainer.createComponent(dtFac);
        if (!this.isTreeList()) {
            this.navOptions['fill'] = true;
            this.cmpRef.instance.maxSize = 5;
            this.cmpRef.instance.fill = true;
        }
        else {
            this.navOptions['fit'] = true;
        }
        // this.cmpRef.instance.fit = true;
        if (this.navOptions.pageInfo) {
            if (this.navOptions.pageInfo.pageList) {
                this.navOptions.pageList = this.navOptions.pageInfo.pageList;
            }
            this.navOptions.pagination = this.navOptions.pageInfo.enablePager;
            this.navOptions.pageIndex = this.navOptions.pageInfo.pageIndex;
            this.navOptions.pageSize = this.navOptions.pageInfo.pageSize;
        }
        else {
            this.navOptions.pagination = false;
        }
        Object.assign(this.cmpRef.instance, this.navOptions);
        this.loadData();
        return of(this.cmpRef);
    }
    /**
     * @return {?}
     */
    update() {
        this.cd.detectChanges();
    }
    /**
     * @param {?=} size
     * @return {?}
     */
    resize(size) {
        if (size) {
            size.width = size.width - 2;
            // if (this.cmpRef.instance instanceof TreeTableComponent) {
            //     size.height += 46;
            // }
            this.cmpRef.instance.resize(size);
        }
    }
    /**
     * @return {?}
     */
    isTreeList() {
        return this.navOptions.displayType.toLowerCase() === 'treelist';
    }
    /**
     * @private
     * @param {?} items
     * @param {?} dt
     * @return {?}
     */
    selectLeftDataTableRow(items, dt) {
        if (items && items.length) {
            /** @type {?} */
            let item = null;
            if (this.lookupCmp.navSelectedIds) {
                item = items.find((/**
                 * @param {?} n
                 * @return {?}
                 */
                n => n[dt.idField] == this.lookupCmp.navSelectedIds));
            }
            else {
                if (this.lookupCmp.selectFirstInNav) {
                    item = items[0];
                }
            }
            if (item) {
                dt.dtBody.selectedRowIndex = -1;
                dt.dtBody.selectedRow('', 0, item);
            }
        }
    }
    /**
     * @private
     * @return {?}
     */
    closeLoading() {
        this.lookupCmp.closeLoading();
    }
    /**
     * @private
     * @param {?} dt
     * @return {?}
     */
    initDataTable(dt) {
        dt.loadData({
            pageSize: this.navOptions.pageSize,
            pageIndex: this.navOptions.pageIndex,
            total: this.navOptions.total,
            data: this.navOptions.items,
        });
        dt.resize({ width: 320, height: this.navOptions.height });
        // 行选中
        dt.selectedRow.subscribe((/**
         * @param {?} d
         * @return {?}
         */
        d => {
            this.selected.emit({ data: d.data });
        }));
        dt.unSelectRow.subscribe((/**
         * @param {?} d
         * @return {?}
         */
        d => {
            this.selected.emit(null);
        }));
        /** @type {?} */
        const p = { pageInfo: { pageIndex: 1, pageSize: this.navOptions.pageSize }, search: '' };
        /** @type {?} */
        const loadTableData = {
            next: (/**
             * @param {?} data
             * @return {?}
             */
            (data) => {
                this.closeLoading();
                dataTableReLoad(data);
            }),
            error: (/**
             * @param {?} err
             * @return {?}
             */
            (err) => {
                this.closeLoading();
            })
        };
        // 查询
        dt.search.subscribe((/**
         * @param {?} searchData
         * @return {?}
         */
        searchData => {
            this._searchState = searchData;
            this.search.emit(searchData);
            p.search = searchData;
            p.pageInfo.pageSize = dt.pageSize;
            this.lookupCmp.navigationFilter = null;
            this.lookupCmp.httpMgr.getData(p, 'navsearch').subscribe(loadTableData);
        }));
        /** @type {?} */
        const dataTableReLoad = (/**
         * @param {?} data
         * @return {?}
         */
        (data) => {
            dt.loadData({
                pageSize: data.pageInfo.pageSize,
                pageIndex: data.pageInfo.pageIndex,
                total: data.total,
                data: data.items,
            });
            this.selectLeftDataTableRow(data.items, dt);
            dt.cd.markForCheck();
        });
        // 分页
        dt.pageChanged.subscribe((/**
         * @param {?} d
         * @return {?}
         */
        d => {
            this.pageChanged.emit(d);
            this.lookupCmp.navigationFilter = null;
            this.lookupCmp.httpMgr.getData(d, 'navsearch').subscribe(loadTableData);
        }));
        dt.pageSizeChanged.subscribe((/**
         * @param {?} e
         * @return {?}
         */
        (e) => {
            this.lookupCmp.navigationFilter = null;
            this.lookupCmp.httpMgr.getData(e, 'navsearch').subscribe(loadTableData);
        }));
        dt.columnSorted.subscribe((/**
         * @param {?} sort
         * @return {?}
         */
        (sort) => {
            const { sortName, sortOrder } = Object.assign({}, sort);
            this.lookupCmp.navigationFilter = null;
            /** @type {?} */
            const param = Object.assign({ sortName, sortOrder }, this._searchState);
            this.lookupCmp.httpMgr.getData(param, 'navsearch').subscribe(loadTableData);
        }));
        dt.clearSearchValue.subscribe((/**
         * @return {?}
         */
        () => {
            this._searchState = null;
        }));
        this.selectLeftDataTableRow(this.navOptions.items, dt);
    }
    /**
     * @private
     * @param {?} tt
     * @return {?}
     */
    initTreeTable(tt) {
        tt.virtualized = true;
        tt.nodeSelected.subscribe((/**
         * @param {?} d
         * @return {?}
         */
        d => {
            this.selected.emit({ data: d.node.data });
        }));
        tt.nodeUnSelect.subscribe((/**
         * @param {?} d
         * @return {?}
         */
        d => {
            this.selected.emit(null);
        }));
        tt.fixedHeader = true;
        // tt.fit = true;
        this.lookupCmp.treeNodeHelper.updateTreeNodeExpanded(this.navOptions.items, this.navOptions.treeInfo);
        tt.loadDataType = this.navOptions.treeInfo.loadDataType;
        // 检查完整树过滤条件 By Lucas 20200302
        this.navOptions.items = this.lookupCmp.checkNodeCanBeSelect(this.navOptions.items, this.navOptions.treeInfo.loadDataType === 'all');
        tt.loadData(this.navOptions.items);
        if (this.lookupCmp.navSelectedIds) {
            tt.selectNode(this.lookupCmp.navSelectedIds);
        }
        else if (this.lookupCmp.selectFirstInNav) {
            tt.selectFirstNode();
        }
        this.allData = this.navOptions.items;
        /** @type {?} */
        const loadTreeData = {
            next: (/**
             * @param {?} resData
             * @return {?}
             */
            (resData) => {
                this.closeLoading();
                tt.clearAll();
                /** @type {?} */
                const items = this.lookupCmp.checkNodeCanBeSelect(resData.items, this.navOptions.treeInfo.loadDataType === 'all');
                tt.loadData(items);
                tt.resize();
            }),
            error: (/**
             * @param {?} err
             * @return {?}
             */
            (err) => {
                this.closeLoading();
            })
        };
        tt.search.subscribe((/**
         * @param {?} search
         * @return {?}
         */
        search => {
            this._searchState = search;
            this.lookupCmp.navigationFilter = null;
            this.lookupCmp.httpMgr.getData({ search }, 'navsearch').subscribe(loadTreeData);
        }));
        tt.columnSorted.subscribe((/**
         * @param {?} sort
         * @return {?}
         */
        (sort) => {
            this.lookupCmp.navigationFilter = null;
            if (tt.loadDataType === 'all') {
                tt.clientSort();
            }
            else {
                const { sortName, sortOrder } = Object.assign({}, sort);
                /** @type {?} */
                const param = Object.assign({ sortName, sortOrder }, this._searchState);
                this.lookupCmp.httpMgr.getData(param, 'nav').subscribe(loadTreeData);
            }
        }));
        tt.clearSearchValue.subscribe((/**
         * @return {?}
         */
        () => {
            this._searchState = null;
            tt.loadData(this.allData);
        }));
        tt.expand.subscribe((/**
         * @param {?} tn
         * @return {?}
         */
        (tn) => {
            this.onNodeExpanded(tn, tt);
        }));
    }
    /**
     * @private
     * @param {?} tn
     * @param {?} tt
     * @return {?}
     */
    onNodeExpanded(tn, tt) {
        if (tn.leaf) {
            return;
        }
        if (!tn.children || !tn.children.length) {
            /** @type {?} */
            const treeInfo = this.navOptions.treeInfo;
            if (this.navOptions.treeInfo.loadDataType === 'async') {
                /** @type {?} */
                let parentPath = '';
                /** @type {?} */
                let parentLayer = -1;
                const { field = '*', value = '' } = Object.assign({}, tt.searchData);
                tn['showLoading'] = true;
                tt.detectChanges();
                if (treeInfo.layerType === 'parentId') {
                    // 父ID加载方式
                    parentPath = tn['id'];
                }
                else {
                    /** @type {?} */
                    const treeInfoField = treeInfo.dataField;
                    if (treeInfoField) {
                        parentPath = tn.data[treeInfoField][treeInfo.pathField];
                        parentLayer = tn.data[treeInfoField][treeInfo.layerField];
                    }
                    else {
                        console.log('未找到分级信息。');
                    }
                }
                if (!this.lookupCmp.uri) {
                    this.lookupCmp.expandTreeNode.emit({
                        instance: tt, node: tn,
                        parentIdOrPath: parentPath, parentLayer, search: { value, field }
                    });
                    return;
                }
                this.getChildren(parentPath, parentLayer, { searchField: field === '*' ? '*' : field, searchValue: value }, tt).subscribe((/**
                 * @param {?} data
                 * @return {?}
                 */
                data => {
                    if (tt) {
                        if (tn && data.items && data.items.length) {
                            tt.appendChildren(data.items, tn);
                        }
                        tn['showLoading'] = false;
                        tt.detectChanges();
                    }
                }));
            }
        }
    }
    /**
     * @private
     * @param {?} parentPath
     * @param {?} parentLayer
     * @param {?} searchData
     * @param {?} tt
     * @return {?}
     */
    getChildren(parentPath, parentLayer, searchData, tt) {
        /** @type {?} */
        const uri = this.lookupCmp.gridOptions.uri;
        /** @type {?} */
        const search = Object.assign({ parentLayer, category: 'nav' }, searchData);
        if (this.navOptions.treeInfo.layerType === 'parentId') {
            search['parentId'] = parentPath;
        }
        else {
            search['parentPath'] = parentPath;
        }
        /** @type {?} */
        const param = {
            searchValue: JSON.stringify(search),
            customData: this.lookupCmp.customData,
            enableFullTree: false,
            loadTreeDataType: 'layerload'
        };
        if (this.lookupCmp.helpId) {
            param['helpId'] = this.lookupCmp.helpId;
        }
        if (tt && tt.sortName) {
            Object.assign(param, {
                sortName: tt.sortName,
                sortOrder: tt.sortOrder
            });
        }
        return this.lookupCmp.http.getData(uri, param);
    }
    /**
     * @return {?}
     */
    loadData() {
        this.cmpRef.instance.allColumnsTitle = this.lookupCmp.allColumnsTitle;
        if (!this.isTreeList()) {
            /** @type {?} */
            const dt = (/** @type {?} */ (this.cmpRef.instance));
            this.initDataTable(dt);
        }
        else {
            /** @type {?} */
            const tt = (/** @type {?} */ (this.cmpRef.instance));
            this.initTreeTable(tt);
        }
    }
}
LookupLeftComponent.decorators = [
    { type: Component, args: [{
                selector: 'lookup-left',
                template: "<div style=\"height: 100%;position: relative;\">\r\n    <ng-container #container></ng-container>\r\n</div>"
            }] }
];
/** @nocollapse */
LookupLeftComponent.ctorParameters = () => [
    { type: ComponentFactoryResolver },
    { type: ChangeDetectorRef }
];
LookupLeftComponent.propDecorators = {
    cmpContainer: [{ type: ViewChild, args: ['container', { read: ViewContainerRef },] }],
    selected: [{ type: Output }],
    unselected: [{ type: Output }],
    search: [{ type: Output }],
    pageChanged: [{ type: Output }]
};
if (false) {
    /** @type {?} */
    LookupLeftComponent.prototype.cmpRef;
    /** @type {?} */
    LookupLeftComponent.prototype.navOptions;
    /** @type {?} */
    LookupLeftComponent.prototype.lookupCmp;
    /** @type {?} */
    LookupLeftComponent.prototype.cmpContainer;
    /** @type {?} */
    LookupLeftComponent.prototype.selected;
    /** @type {?} */
    LookupLeftComponent.prototype.unselected;
    /** @type {?} */
    LookupLeftComponent.prototype.search;
    /** @type {?} */
    LookupLeftComponent.prototype.pageChanged;
    /**
     * @type {?}
     * @private
     */
    LookupLeftComponent.prototype._searchState;
    /**
     * @type {?}
     * @private
     */
    LookupLeftComponent.prototype.allData;
    /**
     * @type {?}
     * @private
     */
    LookupLeftComponent.prototype.cfr;
    /**
     * @type {?}
     * @private
     */
    LookupLeftComponent.prototype.cd;
}
//# sourceMappingURL=data:application/json;base64,