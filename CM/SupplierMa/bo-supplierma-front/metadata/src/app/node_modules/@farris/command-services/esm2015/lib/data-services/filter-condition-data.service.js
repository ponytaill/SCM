import { Injectable } from '@angular/core';
import { ViewModel } from '@farris/devkit';
import { FilterConditionService } from '../filter-condition.service';
import { CommandService } from '../command-service';
class FilterConditionDataService {
    constructor(viewModel, filterConditionService, commandService) {
        this.viewModel = viewModel;
        this.filterConditionService = filterConditionService;
        this.commandService = commandService;
    }
    /**
     * 执行过滤
     * @param commandName 命令名称
     * @param frameId 命令所在的frameId
     */
    filter(commandName, frameId) {
        const self = this;
        let filters = self.context && self.context.eventParam && self.context.eventParam.data || [];
        if (typeof (filters) === 'string') {
            filters = JSON.parse(filters);
        }
        // 查询时重置页码为第一页
        this.viewModel.frameContext.repository.entityCollection.pageIndex = 1;
        this.viewModel.frameContext.repository.filterConditionManager.setConditions(this.viewModel.bindingPath, filters);
        return this.commandService.execute(commandName, frameId);
    }
}
FilterConditionDataService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
FilterConditionDataService.ctorParameters = () => [
    { type: ViewModel },
    { type: FilterConditionService },
    { type: CommandService }
];
export { FilterConditionDataService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmlsdGVyLWNvbmRpdGlvbi1kYXRhLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZmFycmlzL2NvbW1hbmQtc2VydmljZXMvIiwic291cmNlcyI6WyJsaWIvZGF0YS1zZXJ2aWNlcy9maWx0ZXItY29uZGl0aW9uLWRhdGEuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUMzQyxPQUFPLEVBQUUsc0JBQXNCLEVBQUUsTUFBTSw2QkFBNkIsQ0FBQztBQUNyRSxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sb0JBQW9CLENBQUM7QUFFcEQsTUFDTSwwQkFBMEI7SUFDNUIsWUFDWSxTQUFvQixFQUNwQixzQkFBOEMsRUFDOUMsY0FBOEI7UUFGOUIsY0FBUyxHQUFULFNBQVMsQ0FBVztRQUNwQiwyQkFBc0IsR0FBdEIsc0JBQXNCLENBQXdCO1FBQzlDLG1CQUFjLEdBQWQsY0FBYyxDQUFnQjtJQUN0QyxDQUFDO0lBRUw7Ozs7T0FJRztJQUNJLE1BQU0sQ0FBQyxXQUFtQixFQUFFLE9BQWU7UUFDOUMsTUFBTSxJQUFJLEdBQVEsSUFBSSxDQUFDO1FBQ3ZCLElBQUksT0FBTyxHQUFHLElBQUksQ0FBQyxPQUFPLElBQUksSUFBSSxDQUFDLE9BQU8sQ0FBQyxVQUFVLElBQUksSUFBSSxDQUFDLE9BQU8sQ0FBQyxVQUFVLENBQUMsSUFBSSxJQUFJLEVBQUUsQ0FBQztRQUM1RixJQUFJLE9BQU8sQ0FBQyxPQUFPLENBQUMsS0FBSyxRQUFRLEVBQUU7WUFDL0IsT0FBTyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUM7U0FDakM7UUFDRCxjQUFjO1FBQ2QsSUFBSSxDQUFDLFNBQVMsQ0FBQyxZQUFZLENBQUMsVUFBVSxDQUFDLGdCQUFnQixDQUFDLFNBQVMsR0FBRyxDQUFDLENBQUM7UUFDdEUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxZQUFZLENBQUMsVUFBVSxDQUFDLHNCQUFzQixDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLFdBQVcsRUFBRSxPQUFPLENBQUMsQ0FBQztRQUNqSCxPQUFPLElBQUksQ0FBQyxjQUFjLENBQUMsT0FBTyxDQUFDLFdBQVcsRUFBRSxPQUFPLENBQUMsQ0FBQztJQUM3RCxDQUFDOzs7WUF2QkosVUFBVTs7OztZQUpGLFNBQVM7WUFDVCxzQkFBc0I7WUFDdEIsY0FBYzs7QUEyQnZCLE9BQU8sRUFBRSwwQkFBMEIsRUFBRSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgVmlld01vZGVsIH0gZnJvbSAnQGZhcnJpcy9kZXZraXQnO1xuaW1wb3J0IHsgRmlsdGVyQ29uZGl0aW9uU2VydmljZSB9IGZyb20gJy4uL2ZpbHRlci1jb25kaXRpb24uc2VydmljZSc7XG5pbXBvcnQgeyBDb21tYW5kU2VydmljZSB9IGZyb20gJy4uL2NvbW1hbmQtc2VydmljZSc7XG5cbkBJbmplY3RhYmxlKClcbmNsYXNzIEZpbHRlckNvbmRpdGlvbkRhdGFTZXJ2aWNlIHtcbiAgICBjb25zdHJ1Y3RvcihcbiAgICAgICAgcHJpdmF0ZSB2aWV3TW9kZWw6IFZpZXdNb2RlbCxcbiAgICAgICAgcHJpdmF0ZSBmaWx0ZXJDb25kaXRpb25TZXJ2aWNlOiBGaWx0ZXJDb25kaXRpb25TZXJ2aWNlLFxuICAgICAgICBwcml2YXRlIGNvbW1hbmRTZXJ2aWNlOiBDb21tYW5kU2VydmljZVxuICAgICkgeyB9XG5cbiAgICAvKipcbiAgICAgKiDmiafooYzov4fmu6RcbiAgICAgKiBAcGFyYW0gY29tbWFuZE5hbWUg5ZG95Luk5ZCN56ewXG4gICAgICogQHBhcmFtIGZyYW1lSWQg5ZG95Luk5omA5Zyo55qEZnJhbWVJZFxuICAgICAqL1xuICAgIHB1YmxpYyBmaWx0ZXIoY29tbWFuZE5hbWU6IHN0cmluZywgZnJhbWVJZDogc3RyaW5nKSB7XG4gICAgICAgIGNvbnN0IHNlbGY6IGFueSA9IHRoaXM7XG4gICAgICAgIGxldCBmaWx0ZXJzID0gc2VsZi5jb250ZXh0ICYmIHNlbGYuY29udGV4dC5ldmVudFBhcmFtICYmIHNlbGYuY29udGV4dC5ldmVudFBhcmFtLmRhdGEgfHwgW107XG4gICAgICAgIGlmICh0eXBlb2YgKGZpbHRlcnMpID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgZmlsdGVycyA9IEpTT04ucGFyc2UoZmlsdGVycyk7XG4gICAgICAgIH1cbiAgICAgICAgLy8g5p+l6K+i5pe26YeN572u6aG156CB5Li656ys5LiA6aG1XG4gICAgICAgIHRoaXMudmlld01vZGVsLmZyYW1lQ29udGV4dC5yZXBvc2l0b3J5LmVudGl0eUNvbGxlY3Rpb24ucGFnZUluZGV4ID0gMTtcbiAgICAgICAgdGhpcy52aWV3TW9kZWwuZnJhbWVDb250ZXh0LnJlcG9zaXRvcnkuZmlsdGVyQ29uZGl0aW9uTWFuYWdlci5zZXRDb25kaXRpb25zKHRoaXMudmlld01vZGVsLmJpbmRpbmdQYXRoLCBmaWx0ZXJzKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuY29tbWFuZFNlcnZpY2UuZXhlY3V0ZShjb21tYW5kTmFtZSwgZnJhbWVJZCk7XG4gICAgfVxufVxuZXhwb3J0IHsgRmlsdGVyQ29uZGl0aW9uRGF0YVNlcnZpY2UgfTtcbiJdfQ==