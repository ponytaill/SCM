import { Injectable, InjectFlags, Optional } from '@angular/core';
import { from, of, empty, EMPTY } from 'rxjs';
import { switchMap } from 'rxjs/operators';
import { UploadDialogService, UploadLimit, DownloadService, FileState } from '@gsp-svc/formdoc-upload';
import { FileViewerService } from '@gsp-svc/file-viewer';
import { FrameContext, BindingPathConverter, DataPathCreator } from '@farris/devkit';
import { FormNotifyService } from '../form-notify.service';
import { AttachmentUtil } from './attachment.util';
import { AttachmentDataService } from './attachment-data.service';
import { LanguageService } from '../languag.service';
import { EntityService } from '../entity-services/index';
// tslint:disable: max-line-length
/**
 * 附件服务
 */
var AttachmentService = /** @class */ (function () {
    /**
     * 构造函数
     */
    function AttachmentService(frameContext, attachDataService, notifyService, uploadDialogService, downloadService) {
        this.frameContext = frameContext;
        this.attachDataService = attachDataService;
        this.notifyService = notifyService;
        this.uploadDialogService = uploadDialogService;
        this.downloadService = downloadService;
        /**
         * 默认根目录
         */
        this.defaultRootDirId = '';
        this.setLanguageService();
        this.fileViewerService = this.frameContext.injector.get(FileViewerService, null, InjectFlags.Optional);
        this.entityService = this.frameContext.injector.get(EntityService, null, InjectFlags.Optional);
        if (!this.downloadService && typeof DownloadService !== 'undefined') {
            this.downloadService = this.frameContext.injector.get(DownloadService, null);
        }
    }
    Object.defineProperty(AttachmentService.prototype, "defaultParentDirName", {
        /**
         * 默认父路径
         */
        get: function () {
            return this.frameContext.bindingData.list.currentId;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AttachmentService.prototype, "bindingData", {
        /**
         * 绑定数据
         */
        get: function () {
            return this.frameContext.bindingData;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * 设置语言服务
     */
    AttachmentService.prototype.setLanguageService = function () {
        var injector = this.frameContext.injector;
        this.languageService = injector.get(LanguageService, null, InjectFlags.Optional);
        if (!this.languageService) {
            this.languageService = LanguageService.getInstance();
        }
    };
    /**
     * 上传单个文件
     * @param attachmentIdPath 附件内码字段的路径，形如/attachInfo/attachmentId；
     * @param attachmentNamePath 附件名称字段的路径
     */
    AttachmentService.prototype.uploadAndUpdateRow = function (attachmentInfoFieldPath, rootDirId, parentDirName, fileType, id) {
        var _this = this;
        var rootId = rootDirId ? rootDirId : this.defaultRootDirId;
        var formId = parentDirName ? parentDirName : this.defaultParentDirName;
        if (!rootId || !formId) {
            throw new Error('rootDirId和parentDirName不能为空，请填写');
        }
        var uploadLimit = new UploadLimit();
        uploadLimit.fileCount = 1;
        if (fileType) {
            uploadLimit.fileType = fileType;
        }
        // 获取老的附件id数组
        var attachmentIdList = [];
        var currentItem = null;
        if (id) {
            // 修正当前行
            var bindingList = this.frameContext.bindingData.getList();
            if (bindingList.currentId !== id) {
                bindingList.setCurrentId(id, true, true);
            }
            // 如果指定了id则获取指定id的行
            currentItem = this.getSpecialRow(attachmentInfoFieldPath, id);
        }
        else {
            // 没有指定则使用当前行，可能存在当前行和事件行不一致的情况，此时应该在命令中传递id参数
            currentItem = this.getCurrentRow(attachmentInfoFieldPath);
        }
        if (currentItem && currentItem.primaryKeyValue) {
            var attachmentIds = this.getAttachmentIdsByPathAndDataIds(attachmentInfoFieldPath, [currentItem.primaryKeyValue]);
            if (attachmentIds && attachmentIds.length > 0) {
                attachmentIdList.push.apply(attachmentIdList, attachmentIds);
            }
        }
        var dialog$ = from(this.uploadDialogService.uploadFileWithLimit(formId, rootId, uploadLimit, attachmentIdList));
        var result$ = dialog$.pipe(switchMap(function (fileInfos) {
            if (!fileInfos || fileInfos.length === 0) {
                _this.notifyService.warning(_this.languageService.plsUploadFirst, { hideTitle: true });
                return empty();
            }
            // 过滤出state为新增的附件
            fileInfos = fileInfos.filter(function (fileInfo) {
                if (fileInfo.hasOwnProperty('state')) {
                    return fileInfo.state === FileState.New;
                }
                return true;
            });
            if (fileInfos.length === 0) {
                return of(true);
            }
            // 是否上传判断
            var attachmentInfos = AttachmentUtil.convertToAttachmentInfos(fileInfos);
            var firstAttachmentInfo = AttachmentUtil.getFirstAttachmentInfo(attachmentInfos);
            return _this.attachDataService.updateRow(attachmentInfoFieldPath, firstAttachmentInfo);
        }));
        return result$;
    };
    /**
     * 上传单个文件（支持多列）
     * @param attachmentInfoFieldPath 附件内码字段的路径，形如/attachInfo/attachmentId；
     * @param rootDirId 附件存储根目录
     * @param parentDirName 附件存储目录
     * @param fileType 文件类型，like .txt,.docx
     */
    AttachmentService.prototype.uploadAndUpdateRowWithPropertyName = function (attachmentInfoFieldPath, rootDirId, parentDirName, fileType, id) {
        var _this = this;
        var rootId = rootDirId ? rootDirId : this.defaultRootDirId;
        var formId = parentDirName ? parentDirName : this.defaultParentDirName;
        if (!rootId || !formId) {
            throw new Error('rootDirId和parentDirName不能为空，请填写');
        }
        var uploadLimit = new UploadLimit();
        uploadLimit.fileCount = 1;
        if (fileType) {
            uploadLimit.fileType = fileType;
        }
        // 获取老的附件id数组
        var attachmentIdList = [];
        var currentItem = null;
        if (id) {
            // 修正当前行
            var bindingList = this.frameContext.bindingData.getList();
            if (bindingList.currentId !== id) {
                bindingList.setCurrentId(id, true, true);
            }
            // 如果指定了id则获取指定id的行
            currentItem = this.getSpecialRow(attachmentInfoFieldPath, id);
        }
        else {
            // 没有指定则使用当前行，可能存在当前行和事件行不一致的情况，此时应该在命令中传递id参数
            currentItem = this.getCurrentRow(attachmentInfoFieldPath);
        }
        if (currentItem && currentItem.primaryKeyValue) {
            var attachmentIds = this.getAttachmentIdsByPathAndDataIds(attachmentInfoFieldPath, [currentItem.primaryKeyValue]);
            if (attachmentIds && attachmentIds.length > 0) {
                attachmentIdList.push.apply(attachmentIdList, attachmentIds);
            }
        }
        var dialog$ = from(this.uploadDialogService.uploadFileWithLimit(formId, rootId, uploadLimit, attachmentIdList));
        var result$ = dialog$.pipe(switchMap(function (fileInfos) {
            if (!fileInfos || fileInfos.length === 0) {
                _this.notifyService.warning(_this.languageService.plsUploadFirst, { hideTitle: true });
                return EMPTY;
            }
            // 过滤出state为新增的附件
            fileInfos = fileInfos.filter(function (fileInfo) {
                if (fileInfo.hasOwnProperty('state')) {
                    return fileInfo.state === FileState.New;
                }
                return true;
            });
            if (fileInfos.length === 0) {
                return of(true);
            }
            // 是否上传判断
            var attachmentInfos = AttachmentUtil.convertToAttachmentInfos(fileInfos);
            var firstAttachmentInfo = AttachmentUtil.getFirstAttachmentInfo(attachmentInfos);
            return _this.attachDataService.updateRowWithPropertyName(attachmentInfoFieldPath, firstAttachmentInfo);
        }));
        return result$;
    };
    /**
     * 上传多个文件
     */
    AttachmentService.prototype.uploadAndBatchAddRows = function (attachmentInfoFieldPath, rootDirId, parentDirName, fileType) {
        var _this = this;
        var rootId = rootDirId ? rootDirId : this.defaultRootDirId;
        var formId = parentDirName ? parentDirName : this.defaultParentDirName;
        if (!rootId || !formId) {
            throw new Error('rootDirId和parentDirName不能为空，请填写');
        }
        var uploadLimit = new UploadLimit();
        if (fileType) {
            uploadLimit.fileType = fileType;
        }
        var dialog$ = from(this.uploadDialogService.uploadFileWithLimit(formId, rootId, uploadLimit));
        var result$ = dialog$.pipe(switchMap(function (fileInfos) {
            if (!fileInfos || fileInfos.length === 0) {
                _this.notifyService.warning(_this.languageService.plsUploadFirst, { hideTitle: true });
                return EMPTY;
            }
            // 过滤出state为新增的附件
            fileInfos = fileInfos.filter(function (fileInfo) {
                if (fileInfo.hasOwnProperty('state')) {
                    return fileInfo.state === FileState.New;
                }
                return true;
            });
            if (fileInfos.length === 0) {
                return of(true);
            }
            var attachmentInfos = AttachmentUtil.convertToAttachmentInfos(fileInfos);
            return _this.attachDataService.updateRows(attachmentInfoFieldPath, attachmentInfos);
        }));
        return result$;
    };
    /**
     * 上传多个文件
     */
    AttachmentService.prototype.uploadAndBatchAddRowsWithPropertyName = function (attachmentInfoFieldPath, rootDirId, parentDirName, fileType) {
        var _this = this;
        var rootId = rootDirId ? rootDirId : this.defaultRootDirId;
        var formId = parentDirName ? parentDirName : this.defaultParentDirName;
        if (!rootId || !formId) {
            throw new Error('rootDirId和parentDirName不能为空，请填写');
        }
        var uploadLimit = new UploadLimit();
        if (fileType) {
            uploadLimit.fileType = fileType;
        }
        var dialog$ = from(this.uploadDialogService.uploadFileWithLimit(formId, rootId, uploadLimit));
        var result$ = dialog$.pipe(switchMap(function (fileInfos) {
            if (!fileInfos || fileInfos.length === 0) {
                _this.notifyService.warning(_this.languageService.plsUploadFirst, { hideTitle: true });
                return EMPTY;
            }
            // 过滤出state为新增的附件
            fileInfos = fileInfos.filter(function (fileInfo) {
                if (fileInfo.hasOwnProperty('state')) {
                    return fileInfo.state === FileState.New;
                }
                return true;
            });
            if (fileInfos.length === 0) {
                return of(true);
            }
            var attachmentInfos = AttachmentUtil.convertToAttachmentInfos(fileInfos);
            return _this.attachDataService.updateRowsWithPropertyName(attachmentInfoFieldPath, attachmentInfos);
        }));
        return result$;
    };
    /**
     * 下载附件（根据附件id）
     */
    AttachmentService.prototype.download = function (attachId, rootId) {
        if (!attachId) {
            this.notifyService.warning(this.languageService.plsSelectDownloadAtt, { hideTitle: true });
            return EMPTY;
        }
        rootId = rootId || 'default-root';
        var url = this.getDownloadUrl([attachId], rootId);
        // let url = '';
        // if (rootId) {
        //   url = `/api/runtime/dfs/v1.0/formdoc/filecontent?metadataid=${attachId}&rootid=${rootId}`;
        // } else {
        //   url = `/api/runtime/dfs/v1.0/formdoc/download/${attachId}`;
        // }
        window.open(url);
        return of(true);
    };
    /**
     * 批量下载附件（根据附件id数组）
     */
    AttachmentService.prototype.batchDownload = function (attachIds, rootId) {
        if (!attachIds || attachIds.length === 0) {
            this.notifyService.warning(this.languageService.plsSelectDownloadAtt, { hideTitle: true });
            return EMPTY;
        }
        // 只选择一个附件时按单个附件下载处理
        if (attachIds.length === 1) {
            return this.download(attachIds[0], rootId);
        }
        // const attachIdsString = JSON.stringify(attachIds);
        // const url = `/api/runtime/dfs/v1.0/formdoc/multiple/download?metadataidlist=${attachIdsString}&rootid=${rootId}`;
        var url = this.getDownloadUrl(attachIds, rootId);
        window.open(url);
        return of(true);
    };
    /**
     * 获取下载路径
     * @param metadataidlist 附件id数组
     * @param rootId rootId
     */
    AttachmentService.prototype.getDownloadUrl = function (metadataidlist, rootId) {
        rootId = rootId || 'default-root';
        if (this.downloadService) {
            if (metadataidlist.length === 1) {
                return this.downloadService.getDownloadUrl(metadataidlist[0], rootId);
            }
            else {
                var attachIdsString = JSON.stringify(metadataidlist);
                return this.downloadService.getMultipleDownloadUrl(attachIdsString, rootId);
            }
        }
        else {
            console.warn('因安全问题，附件下载提供安全校验机制，附件下载功能需重新编译。');
            if (metadataidlist.length === 1) {
                return "/api/runtime/dfs/v1.0/formdoc/filecontent?metadataid=" + metadataidlist[0] + "&rootid=" + rootId;
            }
            else {
                var attachIdsString = JSON.stringify(metadataidlist);
                return "/api/runtime/dfs/v1.0/formdoc/multiple/download?metadataidlist=" + attachIdsString + "&rootid=" + rootId;
            }
        }
    };
    /**
     * 下载（根据数据id）
     */
    AttachmentService.prototype.downloadByDataId = function (dataId, attachmentInfoFieldPath, rootId) {
        if (!dataId) {
            this.notifyService.warning(this.languageService.plsSelectDownloadAtt, { hideTitle: true });
            return EMPTY;
        }
        var dataIds = [dataId];
        var attachIds = this.getAttachmentIdsByPathAndDataIds(attachmentInfoFieldPath, dataIds);
        if (attachIds.length === 0) {
            this.notifyService.warning(this.languageService.noDownloadAtt, { hideTitle: true });
            return EMPTY;
        }
        var attachId = attachIds[0];
        return this.download(attachId);
    };
    /**
     * 批量下载附件
     */
    AttachmentService.prototype.batchDownloadByDataIds = function (dataIds, attachmentInfoFieldPath, rootId) {
        if (typeof dataIds === 'string' && dataIds && dataIds.length > 0) {
            dataIds = dataIds.split(',').filter(function (p) { return p; });
        }
        if (!dataIds || Array.isArray(dataIds) === false || dataIds.length === 0) {
            this.notifyService.warning(this.languageService.plsSelectDownloadAtt, { hideTitle: true });
            return EMPTY;
        }
        var ids = [].concat(dataIds);
        var attachIds = this.getAttachmentIdsByPathAndDataIds(attachmentInfoFieldPath, ids);
        if (attachIds.length === 0) {
            this.notifyService.warning(this.languageService.noDownloadAtt, { hideTitle: true });
            return EMPTY;
        }
        return this.batchDownload(attachIds, rootId);
    };
    /**
     * 根据附件UDT字段的路径预览附件
     * @param attachmentInfoFieldPath 附件UDT字段path
     * @param rootDirId 跟目录id
     * @param ids 附件id
     */
    AttachmentService.prototype.previewByAttachmentInfoFieldPath = function (attachmentInfoFieldPath, rootDirId, ids) {
        if (!attachmentInfoFieldPath || !rootDirId) {
            throw new Error('attachmentInfoFieldPath和rootDirId不能为空，请填写');
        }
        var attachIds = [];
        var dataIds = [];
        if (ids && ids.length > 0) {
            if (typeof (ids) === 'string') {
                dataIds.push(ids);
            }
            else {
                dataIds = ids;
            }
            attachIds = this.getAttachmentIdsByPathAndDataIds(attachmentInfoFieldPath, dataIds);
        }
        else {
            attachIds = this.getAttachmentIdsByPathAndDataIds(attachmentInfoFieldPath, null);
        }
        if (attachIds && attachIds.length === 0) {
            this.notifyService.warning(this.languageService.noAttachment, { hideTitle: true });
            return EMPTY;
        }
        return this.previewByAttachmentIds(attachIds, rootDirId);
    };
    /**
     * 根据附件UDT字段的路径预览当前行的附件
     * @param attachmentInfoFieldPath 附件UDT字段path
     * @param rootDirId 根目录id
     */
    AttachmentService.prototype.previewByAttachmentInfoFieldPathWithIndex = function (attachmentInfoFieldPath, rootDirId) {
        if (!attachmentInfoFieldPath || !rootDirId) {
            throw new Error('attachmentInfoFieldPath和rootDirId不能为空，请填写');
        }
        var currentRow = this.getCurrentRow(attachmentInfoFieldPath);
        var parentBindingPathArray = BindingPathConverter.toBindingPathArray(attachmentInfoFieldPath);
        var attachmentFieldName = parentBindingPathArray.pop();
        if (!currentRow[attachmentFieldName] || !currentRow[attachmentFieldName]['attachmentId']) {
            this.notifyService.warning(this.languageService.noAttachment, { hideTitle: true });
            return EMPTY;
        }
        var attachIds = this.getAttachmentIdsByPathAndDataIds(attachmentInfoFieldPath, null);
        if (attachIds && attachIds.length === 0) {
            this.notifyService.warning(this.languageService.noAttachment, { hideTitle: true });
            return EMPTY;
        }
        var attachmentId = this.getCurrentAttachmentId(attachmentInfoFieldPath);
        if (!attachmentId) {
            throw new Error('要预览的附件id不存在，请确认');
        }
        else {
            return this.previewFileListWithIndex(attachIds, rootDirId, attachmentId);
        }
    };
    /**
     * 根据目录预览附件
     * @param subDirName 父目录名称
     * @param rootDirId 根目录id
     */
    AttachmentService.prototype.previewBySubDirName = function (subDirName, rootDirId) {
        if (!subDirName || !rootDirId) {
            throw new Error('subDirName和rootDirId不能为空，请填写');
        }
        var viewer$ = from(this.fileViewerService.viewerFormFile(subDirName, rootDirId));
        return viewer$;
    };
    /**
     * 根据目录预览指定索引的附件
     * @param attachmentInfoFieldPath 附件UDT字段path
     * @param subDirName 子目录名称
     * @param rootDirId 根目录id
     */
    AttachmentService.prototype.previewBySubDirNameWithIndex = function (attachmentInfoFieldPath, subDirName, rootDirId) {
        if (!subDirName || !rootDirId) {
            throw new Error('subDirName和rootDirId不能为空，请填写');
        }
        // const attachIds = this.getAttachmentIdsByPathAndDataIds(attachmentInfoFieldPath, null);
        var attachmentId = this.getCurrentAttachmentId(attachmentInfoFieldPath);
        if (!attachmentId) {
            this.notifyService.warning(this.languageService.noAttachment, { hideTitle: true });
            return EMPTY;
        }
        var viewer$ = from(this.fileViewerService.viewerFormFileWithIndex(subDirName, rootDirId, attachmentId));
        return viewer$;
    };
    /**
     * 根据附件id数组预览附件
     * @param attachmentIds 附件id数组
     * @param rootDirId 根目录id
     */
    AttachmentService.prototype.previewByAttachmentIds = function (attachmentIds, rootDirId) {
        var viewer$ = from(this.fileViewerService.viewerFileList(attachmentIds, rootDirId));
        return viewer$;
    };
    /**
     * 根据附件id数组预览指定索引的附件
     * @param attachmentIds 附件id数组
     * @param rootDirId 根目录id
     * @param attachmentId 附件Id
     */
    AttachmentService.prototype.previewFileListWithIndex = function (attachmentIds, rootDirId, attachmentId) {
        var viewer$ = from(this.fileViewerService.viewerFileListWithIndex(attachmentIds, rootDirId, attachmentId));
        return viewer$;
    };
    /**
     * 生成版本号
     * @param versions 历史版本号
     * @description 默认编码规则v1.0 v2.0 ...
     */
    AttachmentService.prototype.genVersion = function (versions) {
        if (!versions) {
            versions = [];
        }
        var mainCode = versions.length + 1;
        return "V" + mainCode + ".0";
    };
    /**
     * 更新附件版本信息
     * @param versionField 附件版本字段
     * @param historyField 是否历史版本字段
     * @param attachmentFieldPath 附件udt字段路径
     */
    AttachmentService.prototype.updateAttachmentVersion = function (versionField, historyField, attachmentFieldPath) {
        var _this = this;
        /**
         * 遍历所有附件行
         * 找到所有没有附件版本的行
         * 遍历这些行
         * 通过文件名去查找同名的且有附件版本号的行
         * 这些行历史版本字段置为true
         * 无版本号的行，版本= 上行数 + 1
         *
         */
        var bindingPaths = attachmentFieldPath.split('/').filter(function (p) { return p; });
        // 弹出附件udt字段
        var attachmentField = bindingPaths.pop();
        // 获取到所有的附件
        var attachmentBindingList = this.frameContext.bindingData.getValue(bindingPaths);
        var befRepository = this.frameContext.repository;
        var entityManager = befRepository.entityManager;
        var dataPath = DataPathCreator.createByShortPathFromRoot(bindingPaths, entityManager, this.frameContext.bindingData);
        var paths = dataPath.toArray().map(function (path) {
            if (path.startsWith('PropName:')) {
                return path.split(':')[1];
            }
            else {
                return path;
            }
        });
        if (attachmentBindingList) {
            var attachments_1 = attachmentBindingList.toJSON();
            // 只处理有附件的情况
            if (attachments_1) {
                var versionLessRows = attachments_1.filter(function (item) { return !item[versionField]; });
                versionLessRows.forEach(function (item) {
                    var fileName = item[attachmentField]['fileName'];
                    var versionedRows = attachments_1.filter(function (row) { return row[attachmentField]['fileName'] === fileName && row[versionField]; });
                    paths.pop();
                    paths.push("DataId:" + item[attachmentBindingList.primaryKey]);
                    var entity = _this.frameContext.repository.entityCollection.getEntityByPath(paths);
                    var version = _this.genVersion(versionedRows);
                    entity[versionField] = version;
                    entity[historyField] = false;
                    // 处理历史记录
                    versionedRows.forEach(function (row) {
                        paths.pop();
                        paths.push("DataId:" + row[attachmentBindingList.primaryKey]);
                        entity = _this.frameContext.repository.entityCollection.getEntityByPath(paths);
                        entity[historyField] = true;
                    });
                });
            }
        }
    };
    AttachmentService.prototype.isAttachmentCanDelete = function (historyField, attachmentFieldPath) {
        var bindingPaths = attachmentFieldPath.split('/').filter(function (p) { return p; });
        // 弹出附件udt字段
        bindingPaths.pop();
        var attachmentBindingList = this.frameContext.bindingData.getValue(bindingPaths);
        var bindingObject = attachmentBindingList.currentItem;
        if (bindingObject[historyField] === true) {
            this.notifyService.warning(this.languageService.historyAttachment, { hideTitle: true });
            return EMPTY;
        }
    };
    AttachmentService.prototype.updateAttachmentHistory = function (versionField, historyField, attachmentFieldPath) {
        var _this = this;
        var bindingPaths = attachmentFieldPath.split('/').filter(function (p) { return p; });
        // 弹出附件udt字段
        var attachmentField = bindingPaths.pop();
        // 获取到所有的附件
        var attachmentBindingList = this.frameContext.bindingData.getValue(bindingPaths);
        // const befRepository = this.frameContext.repository as BefRepository<any>;
        // const entityManager = befRepository.entityManager;
        if (attachmentBindingList) {
            var attachments = attachmentBindingList.toJSON();
            var versionedRows = attachments.filter(function (item) { return item[versionField]; });
            var fileNameMap_1 = new Map();
            var befRepository = this.frameContext.repository;
            var entityManager = befRepository.entityManager;
            var dataPath = DataPathCreator.createByShortPathFromRoot(bindingPaths, entityManager, this.frameContext.bindingData);
            var paths_1 = dataPath.toArray().map(function (path) {
                if (path.startsWith('PropName:')) {
                    return path.split(':')[1];
                }
                else {
                    return path;
                }
            });
            versionedRows.forEach(function (item) {
                var fileName = item[attachmentField]['fileName'];
                if (fileNameMap_1.has(fileName)) {
                    fileNameMap_1.get(fileName).push(item);
                }
                else {
                    fileNameMap_1.set(fileName, [item]);
                }
            });
            Array.from(fileNameMap_1.values()).forEach(function (array) {
                array.sort(function (x, y) {
                    var xVersion = parseInt(x[versionField].replace(/[a-zA-Z\.]/g, ''));
                    var yVersion = parseInt(y[versionField].replace(/[a-zA-Z\.]/g, ''));
                    return yVersion - xVersion;
                });
                var row = array[0];
                paths_1.pop();
                paths_1.push("DataId:" + row[attachmentBindingList.primaryKey]);
                var entity = _this.frameContext.repository.entityCollection.getEntityByPath(paths_1);
                entity[historyField] = false;
            });
        }
    };
    /**
     * 获取当前视图模型当前行的附件id
     * @param attachmentInfoFieldPath 附件udt字段
     */
    AttachmentService.prototype.getCurrentAttachmentId = function (attachmentInfoFieldPath) {
        var parentBindingPathArray = BindingPathConverter.toBindingPathArray(attachmentInfoFieldPath);
        var attachmentFieldName = parentBindingPathArray.pop();
        var bindingList = this.frameContext.bindingData.getValue(parentBindingPathArray);
        var currentItem = bindingList.currentItem;
        if (currentItem && currentItem.primaryKeyValue) {
            return currentItem[attachmentFieldName] && currentItem[attachmentFieldName]['attachmentId'] || null;
        }
        else {
            return null;
        }
    };
    /**
     * 获取当前行
     * @param attachmentInfoFieldPath udt字段
     */
    AttachmentService.prototype.getCurrentRow = function (attachmentInfoFieldPath) {
        var parentBindingPathArray = BindingPathConverter.toBindingPathArray(attachmentInfoFieldPath);
        parentBindingPathArray.pop();
        var bindingList = this.frameContext.bindingData.getValue(parentBindingPathArray);
        var currentItem = bindingList && bindingList.currentItem;
        return currentItem;
    };
    /**
     * 获取指定附件信息表的指定行
     * @param attachmentInfoFieldPath
     * @param primaryValue
     * @returns
     */
    AttachmentService.prototype.getSpecialRow = function (attachmentInfoFieldPath, primaryValue) {
        var parentBindingPathArray = BindingPathConverter.toBindingPathArray(attachmentInfoFieldPath);
        parentBindingPathArray.pop();
        var bindingList = this.frameContext.bindingData.getValue(parentBindingPathArray);
        var currentItem = bindingList && bindingList.findById(primaryValue);
        return currentItem;
    };
    /**
     * 获取dataIds对应Entity上的附件id数组
     */
    AttachmentService.prototype.getAttachmentIdsByPathAndDataIds = function (attachmentInfoFieldPath, dataIds) {
        // 解析路径
        var parentBindingPathArray = BindingPathConverter.toBindingPathArray(attachmentInfoFieldPath);
        var attachmentFieldName = parentBindingPathArray.pop();
        // 获取附件所在实体的数据列表，不传递dataIds参数，则返回全部
        var entityListData = this.entityService.getEntityListData(parentBindingPathArray);
        var filteredEntityListData = [];
        if (dataIds && Array.isArray(dataIds) === true) {
            filteredEntityListData = entityListData.filter(function (entityData) {
                return dataIds.indexOf(entityData.id) > -1;
            });
        }
        else {
            filteredEntityListData = entityListData;
        }
        // 转换为附件Id数组
        var attachmentIds = [];
        filteredEntityListData.forEach(function (entityData) {
            if (entityData[attachmentFieldName]) {
                var attachmentId = entityData[attachmentFieldName]['attachmentId'];
                if (attachmentId) {
                    attachmentIds.push(attachmentId);
                }
            }
        });
        return attachmentIds;
    };
    AttachmentService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    AttachmentService.ctorParameters = function () { return [
        { type: FrameContext },
        { type: AttachmentDataService },
        { type: FormNotifyService },
        { type: UploadDialogService },
        { type: DownloadService, decorators: [{ type: Optional }] }
    ]; };
    return AttachmentService;
}());
export { AttachmentService };
//# sourceMappingURL=data:application/json;base64,