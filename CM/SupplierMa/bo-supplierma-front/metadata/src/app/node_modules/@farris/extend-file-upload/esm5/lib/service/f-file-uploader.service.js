/**
 * @fileoverview added by tsickle
 * Generated from: lib/service/f-file-uploader.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { EventEmitter, Optional } from "@angular/core";
import { Observable, Subject } from "rxjs";
import { mergeMap, finalize } from "rxjs/operators";
import { FFileUtils } from "../utils/index";
import { UploadStatus, UploadServerService, } from "../model/index";
var FFileUploaderService = /** @class */ (function () {
    function FFileUploaderService(uploadServerSer) {
        var _this = this;
        this.uploadServerSer = uploadServerSer;
        this.allowedContentTypes = ["*"];
        //默认不限制,0代表不限制 Number.POSITIVE_INFINITY
        this.maxUploads = 0;
        /**
         * 单位M，默认是12M,0代表不限制
         */
        this.maxFileSize = 12;
        this.concurrency = Number.POSITIVE_INFINITY;
        this.uploadedCount = 0;
        this.extendServerConfig = null;
        this.queue = [];
        this.serviceEvents = new EventEmitter();
        this.uploadScheduler = new Subject();
        this.subs = [];
        this.uploadScheduler
            .pipe(mergeMap((/**
         * @param {?} upload
         * @return {?}
         */
        function (upload) {
            return _this.serverMethod(upload);
        }), this.concurrency))
            .subscribe((/**
         * @param {?} uploadOutput
         * @return {?}
         */
        function (uploadOutput) {
            // if (uploadOutput.type == 'removed' || uploadOutput.type == 'done') {
            //   // 删除或者done移除
            //   const subIndex = this.subs.findIndex(sub => sub.id === uploadOutput.file.id);
            //   if (subIndex > -1 && this.subs[subIndex].sub) {
            //     this.subs[subIndex].sub.unsubscribe();
            //   }
            //   this.subs.splice(subIndex, 1);
            // }
            if (uploadOutput.type == "removed") {
                // 事件中返回的都是
                _this.queue = _this.queue.filter((/**
                 * @param {?} item
                 * @return {?}
                 */
                function (item) { return item.progress.status !== UploadStatus.Remove; }));
                if (!uploadOutput.hasOwnProperty("message")) {
                    uploadOutput["message"] = "被删除";
                }
            }
            if (uploadOutput.type == "error") {
                // 上传失败的附件移除
                _this.queue = _this.queue.filter((/**
                 * @param {?} queueItem
                 * @return {?}
                 */
                function (queueItem) {
                    return (uploadOutput.files.findIndex((/**
                     * @param {?} item
                     * @return {?}
                     */
                    function (item) { return queueItem.id == item.id; })) <
                        0);
                }));
            }
            _this.serviceEvents.emit(uploadOutput);
        }));
    }
    /**
     * @param {?} options
     * @return {?}
     */
    FFileUploaderService.prototype.setOptions = /**
     * @param {?} options
     * @return {?}
     */
    function (options) {
        // 重置文件大小、类型、个数限制
        if (options) {
            for (var prop in options) {
                this[prop] = options[prop];
            }
        }
    };
    /**
     * @param {?} incomingFiles
     * @return {?}
     */
    FFileUploaderService.prototype.handleFiles = /**
     * @param {?} incomingFiles
     * @return {?}
     */
    function (incomingFiles) {
        var _this = this;
        /** @type {?} */
        var allowedIncomingFiles = [].reduce.call(incomingFiles, (/**
         * @param {?} acc
         * @param {?} checkFile
         * @param {?} i
         * @return {?}
         */
        function (acc, checkFile, i) {
            /** @type {?} */
            var futureQueueLength = acc.length + _this.queue.length + 1;
            /** @type {?} */
            var judgeResult = _this.rejectedReason(checkFile.name, checkFile.type, futureQueueLength, checkFile.size);
            if (judgeResult.allowed) {
                acc = acc.concat(checkFile);
            }
            else {
                // 不符合当前文件类型或者内容超出限制，抛出事件
                /** @type {?} */
                var rejectedFile = FFileUtils.makeUploadFile(checkFile, i);
                _this.serviceEvents.emit({
                    type: "rejected",
                    file: rejectedFile,
                    message: judgeResult.message,
                });
            }
            return acc;
        }), []);
        // 构造文件结构，并单个抛出事件
        [].map.call(allowedIncomingFiles, (/**
         * @param {?} file
         * @param {?} i
         * @return {?}
         */
        function (file, i) {
            /** @type {?} */
            var uploadFile = FFileUtils.makeUploadFile(file, i);
            _this.queue.push(uploadFile);
            _this.serviceEvents.emit({ type: "addedToQueue", file: uploadFile });
        }));
        // 所有的文件都已经添加，抛出事件
        this.serviceEvents.emit({ type: "allAddedToQueue" });
    };
    /**
     * @private
     * @param {?} name
     * @param {?} type
     * @param {?} queuelength
     * @param {?} size
     * @return {?}
     */
    FFileUploaderService.prototype.rejectedReason = /**
     * @private
     * @param {?} name
     * @param {?} type
     * @param {?} queuelength
     * @param {?} size
     * @return {?}
     */
    function (name, type, queuelength, size) {
        /** @type {?} */
        var allowed = false;
        /** @type {?} */
        var message = "";
        // 已存在同名文件
        /** @type {?} */
        var findDuplicateIndex = this.queue.findIndex((/**
         * @param {?} file
         * @return {?}
         */
        function (file) { return file.name == name; }));
        if (findDuplicateIndex > -1) {
            message = "上传失败：已存在同名文件";
        }
        else if (!this.isContentTypeAllowed(name)) {
            message =
                "上传失败：只允许上传" +
                    this.allowedContentTypes.join(",") +
                    "类型的文档";
        }
        else if (this.maxUploads > 0 &&
            (this.maxUploads <= this.uploadedCount ||
                queuelength + this.uploadedCount > this.maxUploads)) {
            message = "上传失败：文件总个数超出" + this.maxUploads + "限制";
        }
        else if (!this.isFileSizeAllowed(size)) {
            message = "上传失败：单个文件大小超出" + this.maxFileSize + "MB的限制";
        }
        else if (size == 0) {
            message = "上传失败：不允许文件为空";
        }
        else {
            allowed = true;
        }
        return {
            allowed: allowed,
            message: message,
        };
    };
    /**
     * 从前端传来事件，进行服务器端方法类型判断
     * @param input
     */
    /**
     * 从前端传来事件，进行服务器端方法类型判断
     * @param {?} input
     * @return {?}
     */
    FFileUploaderService.prototype.initInputEvents = /**
     * 从前端传来事件，进行服务器端方法类型判断
     * @param {?} input
     * @return {?}
     */
    function (input) {
        var _this = this;
        //debugger
        return input.subscribe((/**
         * @param {?} event
         * @return {?}
         */
        function (event) {
            //debugger
            switch (event.type) {
                case 'sliceUpload':
                    /** @type {?} */
                    var _files = _this.queue.filter((/**
                     * @param {?} file
                     * @return {?}
                     */
                    function (file) { return file.progress.status === UploadStatus.Queue; }));
                    if (_files.length > 0) {
                        _this.uploadScheduler.next({
                            files: _files,
                            event: event,
                            file: null,
                        });
                    }
                    break;
                case "upload":
                case "multipartUpload":
                    /** @type {?} */
                    var uploadFileIndex = _this.queue.findIndex((/**
                     * @param {?} file
                     * @return {?}
                     */
                    function (file) { return file === event.file; }));
                    if (uploadFileIndex !== -1 && event.file) {
                        _this.uploadScheduler.next({
                            files: [_this.queue[uploadFileIndex]],
                            event: event,
                            file: null,
                        });
                    }
                    break;
                case "uploadAll":
                    /** @type {?} */
                    var files = _this.queue.filter((/**
                     * @param {?} file
                     * @return {?}
                     */
                    function (file) { return file.progress.status === UploadStatus.Queue; }));
                    if (files.length > 0) {
                        event.type = "upload";
                        _this.uploadScheduler.next({
                            files: files,
                            event: event,
                            file: null,
                        });
                    }
                    break;
                case "cancel":
                    /** @type {?} */
                    var id_1 = event.id || null;
                    if (!id_1) {
                        return;
                    }
                    /** @type {?} */
                    var fileIndex = _this.queue.findIndex((/**
                     * @param {?} file
                     * @return {?}
                     */
                    function (file) { return file.id === id_1; }));
                    if (fileIndex !== -1) {
                        _this.serviceEvents.emit({
                            type: "cancelled",
                            files: [_this.queue[fileIndex]],
                            message: "已取消附件上传",
                        });
                        _this.queue.splice(fileIndex, 1);
                    }
                    break;
                    // case 'cancel':
                    // debugger
                    // const id = event.id || null;
                    // if (!id) {
                    //   return;
                    // }
                    // const subs = this.subs.filter(sub => sub.id === id);
                    // subs.forEach(sub => {
                    //   if (sub.sub) {
                    //     sub.sub.unsubscribe();
                    //     const fileIndex = this.queue.findIndex(file => file.id === id);
                    //     if (fileIndex !== -1) {
                    //       this.queue[fileIndex].progress.status = UploadStatus.Cancelled;
                    //       this.serviceEvents.emit({ type: 'cancelled', file: this.queue[fileIndex] });
                    //     }
                    //   }
                    // });
                    break;
                // case 'cancelAll':
                //   this.subs.forEach(sub => {
                //     if (sub.sub) {
                //       sub.sub.unsubscribe();
                //     }
                //     const file = this.queue.find(uploadFile => uploadFile.id === sub.id);
                //     if (file) {
                //       file.progress.status = UploadStatus.Cancelled;
                //       this.serviceEvents.emit({ type: 'cancelled', file: file });
                //     }
                //   });
                //   break;
                case "hide":
                    if (!event.id) {
                        return;
                    }
                    /** @type {?} */
                    var ids_1 = event.id.split(",");
                    _this.queue = _this.queue.filter((/**
                     * @param {?} file
                     * @return {?}
                     */
                    function (file) {
                        /** @type {?} */
                        var tIndex = ids_1.findIndex((/**
                         * @param {?} tId
                         * @return {?}
                         */
                        function (tId) { return tId == file.id; }));
                        return tIndex > -1 ? false : true;
                    }));
                    break;
                case "cancelAll":
                    // 取消，直接从队列中移除，不用修改状态
                    /** @type {?} */
                    var queueFiles = _this.queue.filter((/**
                     * @param {?} uploadFile
                     * @return {?}
                     */
                    function (uploadFile) { return uploadFile.progress.status === UploadStatus.Queue; }));
                    if (queueFiles.length) {
                        _this.serviceEvents.emit({
                            type: "cancelled",
                            files: queueFiles,
                            message: "已取消附件上传",
                        });
                        _this.queue = _this.queue.filter((/**
                         * @param {?} uploadFile
                         * @return {?}
                         */
                        function (uploadFile) { return uploadFile.progress.status != UploadStatus.Queue; }));
                    }
                    break;
                case "remove":
                    if (!event.id) {
                        return;
                    }
                    /** @type {?} */
                    var removeIndex = _this.queue.findIndex((/**
                     * @param {?} file
                     * @return {?}
                     */
                    function (file) { return file.id === event.id; }));
                    if (removeIndex !== -1) {
                        // 得有个开始删除和已经删除
                        _this.queue[removeIndex].progress.status = UploadStatus.Remove;
                        _this.uploadScheduler.next({
                            files: [_this.queue[removeIndex]],
                            event: event,
                            file: null,
                        });
                    }
                    break;
                case "removeAll":
                    /** @type {?} */
                    var removeQueueFiles = _this.queue.filter((/**
                     * @param {?} uploadFile
                     * @return {?}
                     */
                    function (uploadFile) { return uploadFile.progress.status === UploadStatus.Queue; }));
                    if (removeQueueFiles.length) {
                        _this.serviceEvents.emit({
                            type: "cancelled",
                            files: removeQueueFiles,
                            message: "删除附件成功",
                        });
                        _this.queue = _this.queue.filter((/**
                         * @param {?} uploadFile
                         * @return {?}
                         */
                        function (uploadFile) { return uploadFile.progress.status != UploadStatus.Queue; }));
                    }
                    // 正在上传的附件是如何处理
                    // const doneFiles = this.queue.filter(uploadFile => uploadFile.progress.status === UploadStatus.Done);
                    if (_this.queue.length) {
                        event.type = "remove";
                        _this.queue.map((/**
                         * @param {?} item
                         * @return {?}
                         */
                        function (item) { return (item.progress.status = UploadStatus.Remove); }));
                        _this.uploadScheduler.next({
                            files: _this.queue,
                            event: event,
                            file: null,
                        });
                    }
                    break;
            }
        }));
    };
    /**
     * @param {?} extendSer
     * @return {?}
     */
    FFileUploaderService.prototype.setExtendServerConfig = /**
     * @param {?} extendSer
     * @return {?}
     */
    function (extendSer) {
        this.extendServerConfig = extendSer;
    };
    /**
     * @param {?} upload
     * @return {?}
     */
    FFileUploaderService.prototype.serverMethod = /**
     * @param {?} upload
     * @return {?}
     */
    function (upload) {
        var _this = this;
        return new Observable((/**
         * @param {?} observer
         * @return {?}
         */
        function (observer) {
            /** @type {?} */
            var sub;
            /** @type {?} */
            var ids = upload.files.map((/**
             * @param {?} fileItem
             * @return {?}
             */
            function (fileItem) { return fileItem.id; }));
            switch (upload.event.type) {
                case 'sliceUpload':
                    sub = _this.upload(upload.files, upload.event);
                    break;
                case "upload":
                    sub = _this.upload(upload.files, upload.event);
                    break;
                case "multipartUpload":
                    sub = _this.multipartUpload(upload.files[0], upload.event);
                    break;
                // case 'uploadAll':
                //   ids = upload.files.map(fileItem => fileItem.id);
                //   sub = this.uploadAll(upload.files, upload.event);
                //   break;
                case "remove":
                    sub = _this.remove(upload.files, upload.event);
                    break;
                // case 'removeAll':
                //   ids = upload.files.map(fileItem => fileItem.id);
                //   sub = this.removeAll(upload.files, upload.event);
                //   break;
                default:
                    sub = null;
            }
            if (!sub) {
                return;
            }
            sub.pipe(finalize((/**
             * @return {?}
             */
            function () {
                // debugger;
                if (!observer.closed) {
                    observer.complete();
                }
            }))).subscribe((/**
             * @param {?} output
             * @return {?}
             */
            function (output) {
                // debugger;
                observer.next(output);
            }), (/**
             * @param {?} err
             * @return {?}
             */
            function (err) {
                observer.next(err);
            }), (/**
             * @return {?}
             */
            function () {
                observer.complete();
            }));
            _this.subs.push({ ids: ids, sub: sub, id: "" });
            // switch (upload.event.type) {
            //   case 'uploadAll':
            //     this.subs.push({ ids: ids, sub: sub, id: '' });
            //     break;
            //   case 'removeAll':
            //     this.subs.push({ ids: ids, sub: sub, id: '' });
            //     break;
            //   default:
            // }
        }));
    };
    /**
     * 单个文件上传
     * @param file
     * @param event
     */
    // uploadFile(file: UploadFile, event: UploadInput): Observable<UploadOutput> {
    //   const uploadFile = <BlobFile>file.nativeFile;
    //   const uploadIndex = this.queue.findIndex(outFile => outFile.nativeFile === uploadFile);
    //   // 已经被取消的不能被上传
    //   if (this.queue[uploadIndex].progress.status === UploadStatus.Cancelled) {
    //     return new Observable(observer => {
    //       observer.complete();
    //     });
    //   }
    //   // 抛出开始上传的事件
    //   this.serviceEvents.emit({ type: 'start', files: [file] });
    //   return this.uploadServerSer.upload(file, event, this.extendServerConfig);
    // }
    /**
     * 单个文件上传
     * @param {?} file
     * @param {?} event
     * @return {?}
     */
    // uploadFile(file: UploadFile, event: UploadInput): Observable<UploadOutput> {
    //   const uploadFile = <BlobFile>file.nativeFile;
    //   const uploadIndex = this.queue.findIndex(outFile => outFile.nativeFile === uploadFile);
    //   // 已经被取消的不能被上传
    //   if (this.queue[uploadIndex].progress.status === UploadStatus.Cancelled) {
    //     return new Observable(observer => {
    //       observer.complete();
    //     });
    //   }
    //   // 抛出开始上传的事件
    //   this.serviceEvents.emit({ type: 'start', files: [file] });
    //   return this.uploadServerSer.upload(file, event, this.extendServerConfig);
    // }
    FFileUploaderService.prototype.multipartUpload = /**
     * 单个文件上传
     * @param {?} file
     * @param {?} event
     * @return {?}
     */
    // uploadFile(file: UploadFile, event: UploadInput): Observable<UploadOutput> {
    //   const uploadFile = <BlobFile>file.nativeFile;
    //   const uploadIndex = this.queue.findIndex(outFile => outFile.nativeFile === uploadFile);
    //   // 已经被取消的不能被上传
    //   if (this.queue[uploadIndex].progress.status === UploadStatus.Cancelled) {
    //     return new Observable(observer => {
    //       observer.complete();
    //     });
    //   }
    //   // 抛出开始上传的事件
    //   this.serviceEvents.emit({ type: 'start', files: [file] });
    //   return this.uploadServerSer.upload(file, event, this.extendServerConfig);
    // }
    function (file, event) {
        // 抛出开始上传的事件
        this.serviceEvents.emit({ type: "start", files: [file] });
        return this.uploadServerSer.multipartUpload(file, event, this.extendServerConfig);
    };
    /**
     * @param {?} files
     * @param {?} event
     * @return {?}
     */
    FFileUploaderService.prototype.upload = /**
     * @param {?} files
     * @param {?} event
     * @return {?}
     */
    function (files, event) {
        // 抛出开始上传的事件
        this.serviceEvents.emit({ type: "start", files: files });
        return this.uploadServerSer.upload(files, event, this.extendServerConfig);
    };
    /**
     * @param {?} files
     * @param {?} event
     * @return {?}
     */
    FFileUploaderService.prototype.remove = /**
     * @param {?} files
     * @param {?} event
     * @return {?}
     */
    function (files, event) {
        return this.uploadServerSer.remove(files, event, this.extendServerConfig);
    };
    // removeAll(files: UploadFile[], event: UploadInput): Observable<UploadOutput> {
    //   return this.uploadServerSer.removeAll(files, event, this.extendServerConfig);
    // }
    // 重置
    // removeAll(files: UploadFile[], event: UploadInput): Observable<UploadOutput> {
    //   return this.uploadServerSer.removeAll(files, event, this.extendServerConfig);
    // }
    // 重置
    /**
     * @return {?}
     */
    FFileUploaderService.prototype.reset = 
    // removeAll(files: UploadFile[], event: UploadInput): Observable<UploadOutput> {
    //   return this.uploadServerSer.removeAll(files, event, this.extendServerConfig);
    // }
    // 重置
    /**
     * @return {?}
     */
    function () {
        this.queue = [];
        //this.uploadScheduler = new Subject();
        // this.subs.forEach(sub => {
        //   if (sub.sub) {
        //     sub.sub.unsubscribe();
        //   }
        // });
        this.subs = [];
    };
    // 暂时
    // 暂时
    /**
     * @param {?} contentTypes
     * @return {?}
     */
    FFileUploaderService.prototype.setContentTypes = 
    // 暂时
    /**
     * @param {?} contentTypes
     * @return {?}
     */
    function (contentTypes) {
        if (typeof contentTypes !== "undefined" && contentTypes instanceof Array) {
            if (contentTypes.find((/**
             * @param {?} type
             * @return {?}
             */
            function (type) { return type === "*"; })) !== undefined) {
                this.allowedContentTypes = ["*"];
            }
            else {
                this.allowedContentTypes = contentTypes;
            }
            return;
        }
        this.allowedContentTypes = ["*"];
    };
    /**
     * @return {?}
     */
    FFileUploaderService.prototype.allContentTypesAllowed = /**
     * @return {?}
     */
    function () {
        return (this.allowedContentTypes.find((/**
         * @param {?} type
         * @return {?}
         */
        function (type) { return type === "*"; })) !==
            undefined);
    };
    /**
     *
     * @param name
     */
    /**
     *
     * @param {?} name
     * @return {?}
     */
    FFileUploaderService.prototype.isContentTypeAllowed = /**
     *
     * @param {?} name
     * @return {?}
     */
    function (name) {
        if (this.allContentTypesAllowed()) {
            return true;
        }
        // 附件没有后缀
        if (name.lastIndexOf(".") < 0) {
            return false;
        }
        /** @type {?} */
        var namesuffix = name.substr(name.lastIndexOf("."));
        // 简化计算
        return (this.allowedContentTypes.findIndex((/**
         * @param {?} item
         * @return {?}
         */
        function (item) { return item.toLowerCase() == namesuffix.toLowerCase(); })) > -1);
    };
    /**
     * @param {?} fileSize
     * @return {?}
     */
    FFileUploaderService.prototype.isFileSizeAllowed = /**
     * @param {?} fileSize
     * @return {?}
     */
    function (fileSize) {
        if (!this.maxFileSize) {
            return true;
        }
        // fileSize是b单位 maxFileSize是MB单位
        return fileSize <= this.maxFileSize * 1024 * 1024; // * 8
    };
    /** @nocollapse */
    FFileUploaderService.ctorParameters = function () { return [
        { type: UploadServerService, decorators: [{ type: Optional }] }
    ]; };
    return FFileUploaderService;
}());
export { FFileUploaderService };
if (false) {
    /** @type {?} */
    FFileUploaderService.prototype.queue;
    /** @type {?} */
    FFileUploaderService.prototype.serviceEvents;
    /** @type {?} */
    FFileUploaderService.prototype.uploadScheduler;
    /** @type {?} */
    FFileUploaderService.prototype.subs;
    /** @type {?} */
    FFileUploaderService.prototype.allowedContentTypes;
    /** @type {?} */
    FFileUploaderService.prototype.maxUploads;
    /**
     * 单位M，默认是12M,0代表不限制
     * @type {?}
     */
    FFileUploaderService.prototype.maxFileSize;
    /** @type {?} */
    FFileUploaderService.prototype.concurrency;
    /** @type {?} */
    FFileUploaderService.prototype.uploadedCount;
    /**
     * @type {?}
     * @private
     */
    FFileUploaderService.prototype.extendServerConfig;
    /**
     * @type {?}
     * @private
     */
    FFileUploaderService.prototype.uploadServerSer;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZi1maWxlLXVwbG9hZGVyLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZmFycmlzL2V4dGVuZC1maWxlLXVwbG9hZC8iLCJzb3VyY2VzIjpbImxpYi9zZXJ2aWNlL2YtZmlsZS11cGxvYWRlci5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsT0FBTyxFQUFFLFlBQVksRUFBRSxRQUFRLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDdkQsT0FBTyxFQUFFLFVBQVUsRUFBRSxPQUFPLEVBQW9CLE1BQU0sTUFBTSxDQUFDO0FBQzdELE9BQU8sRUFBRSxRQUFRLEVBQUUsUUFBUSxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDcEQsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQzVDLE9BQU8sRUFJSCxZQUFZLEVBRVosbUJBQW1CLEdBRXRCLE1BQU0sZ0JBQWdCLENBQUM7QUFFeEI7SUFpQkksOEJBQWdDLGVBQW9DO1FBQXBFLGlCQXlDQztRQXpDK0Isb0JBQWUsR0FBZixlQUFlLENBQXFCO1FBUnBFLHdCQUFtQixHQUFhLENBQUMsR0FBRyxDQUFDLENBQUM7O1FBRXRDLGVBQVUsR0FBVyxDQUFDLENBQUM7Ozs7UUFFdkIsZ0JBQVcsR0FBVyxFQUFFLENBQUM7UUFDekIsZ0JBQVcsR0FBVyxNQUFNLENBQUMsaUJBQWlCLENBQUM7UUFDL0Msa0JBQWEsR0FBVyxDQUFDLENBQUM7UUFDbEIsdUJBQWtCLEdBQUcsSUFBSSxDQUFDO1FBRTlCLElBQUksQ0FBQyxLQUFLLEdBQUcsRUFBRSxDQUFDO1FBQ2hCLElBQUksQ0FBQyxhQUFhLEdBQUcsSUFBSSxZQUFZLEVBQWdCLENBQUM7UUFDdEQsSUFBSSxDQUFDLGVBQWUsR0FBRyxJQUFJLE9BQU8sRUFBRSxDQUFDO1FBQ3JDLElBQUksQ0FBQyxJQUFJLEdBQUcsRUFBRSxDQUFDO1FBRWYsSUFBSSxDQUFDLGVBQWU7YUFDZixJQUFJLENBQ0QsUUFBUTs7OztRQUFD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LEtBQUssQ0FBQztTQUNoQjs7WUFDRyxVQUFVLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ25ELE9BQU87UUFDUCxPQUFPLENBQ0gsSUFBSSxDQUFDLG1CQUFtQixDQUFDLFNBQVM7Ozs7UUFDOUIsVUFBQyxJQUFJLElBQUssT0FBQSxJQUFJLENBQUMsV0FBVyxFQUFFLElBQUksVUFBVSxDQUFDLFdBQVcsRUFBRSxFQUE5QyxDQUE4QyxFQUMzRCxHQUFHLENBQUMsQ0FBQyxDQUNULENBQUM7SUFDTixDQUFDOzs7OztJQUVELGdEQUFpQjs7OztJQUFqQixVQUFrQixRQUFnQjtRQUM5QixJQUFJLENBQUMsSUFBSSxDQUFDLFdBQVcsRUFBRTtZQUNuQixPQUFPLElBQUksQ0FBQztTQUNmO1FBQ0QsZ0NBQWdDO1FBQ2hDLE9BQU8sUUFBUSxJQUFJLElBQUksQ0FBQyxXQUFXLEdBQUcsSUFBSSxHQUFHLElBQUksQ0FBQyxDQUFDLE1BQU07SUFDN0QsQ0FBQzs7O2dCQS9kRCxtQkFBbUIsdUJBcUJOLFFBQVE7O0lBMmN6QiwyQkFBQztDQUFBLEFBNWRELElBNGRDO1NBNWRZLG9CQUFvQjs7O0lBQzdCLHFDQUFvQjs7SUFDcEIsNkNBQTBDOztJQUMxQywrQ0FJRzs7SUFDSCxvQ0FBMEQ7O0lBQzFELG1EQUFzQzs7SUFFdEMsMENBQXVCOzs7OztJQUV2QiwyQ0FBeUI7O0lBQ3pCLDJDQUErQzs7SUFDL0MsNkNBQTBCOzs7OztJQUMxQixrREFBa0M7Ozs7O0lBQ3RCLCtDQUF3RCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEV2ZW50RW1pdHRlciwgT3B0aW9uYWwgfSBmcm9tIFwiQGFuZ3VsYXIvY29yZVwiO1xyXG5pbXBvcnQgeyBPYnNlcnZhYmxlLCBTdWJqZWN0LCBTdWJzY3JpcHRpb24sIG9mIH0gZnJvbSBcInJ4anNcIjtcclxuaW1wb3J0IHsgbWVyZ2VNYXAsIGZpbmFsaXplIH0gZnJvbSBcInJ4anMvb3BlcmF0b3JzXCI7XHJcbmltcG9ydCB7IEZGaWxlVXRpbHMgfSBmcm9tIFwiLi4vdXRpbHMvaW5kZXhcIjtcclxuaW1wb3J0IHtcclxuICAgIFVwbG9hZEZpbGUsXHJcbiAgICBVcGxvYWRPdXRwdXQsXHJcbiAgICBVcGxvYWRJbnB1dCxcclxuICAgIFVwbG9hZFN0YXR1cyxcclxuICAgIEJsb2JGaWxlLFxyXG4gICAgVXBsb2FkU2VydmVyU2VydmljZSxcclxuICAgIFVwbG9hZGVyT3B0aW9ucyxcclxufSBmcm9tIFwiLi4vbW9kZWwvaW5kZXhcIjtcclxuXHJcbmV4cG9ydCBjbGFzcyBGRmlsZVVwbG9hZGVyU2VydmljZSB7XHJcbiAgICBxdWV1ZTogVXBsb2FkRmlsZVtdO1xyXG4gICAgc2VydmljZUV2ZW50czogRXZlbnRFbWl0dGVyPFVwbG9hZE91dHB1dD47XHJcbiAgICB1cGxvYWRTY2hlZHVsZXI6IFN1YmplY3Q8e1xyXG4gICAgICAgIGZpbGU6IFVwbG9hZEZpbGU7XHJcbiAgICAgICAgZXZlbnQ6IFVwbG9hZElucHV0O1xyXG4gICAgICAgIGZpbGVzPzogVXBsb2FkRmlsZVtdO1xyXG4gICAgfT47XHJcbiAgICBzdWJzOiB7IGlkOiBzdHJpbmc7IHN1YjogU3Vic2NyaXB0aW9uOyBpZHM/OiBzdHJpbmdbXSB9W107XHJcbiAgICBhbGxvd2VkQ29udGVudFR5cGVzOiBzdHJpbmdbXSA9IFtcIipcIl07XHJcbiAgICAvL+m7mOiupOS4jemZkOWItiww5Luj6KGo5LiN6ZmQ5Yi2IE51bWJlci5QT1NJVElWRV9JTkZJTklUWVxyXG4gICAgbWF4VXBsb2FkczogbnVtYmVyID0gMDtcclxuICAgIC8qKiDljZXkvY1N77yM6buY6K6k5pivMTJNLDDku6PooajkuI3pmZDliLYgKi9cclxuICAgIG1heEZpbGVTaXplOiBudW1iZXIgPSAxMjtcclxuICAgIGNvbmN1cnJlbmN5OiBudW1iZXIgPSBOdW1iZXIuUE9TSVRJVkVfSU5GSU5JVFk7XHJcbiAgICB1cGxvYWRlZENvdW50OiBudW1iZXIgPSAwO1xyXG4gICAgcHJpdmF0ZSBleHRlbmRTZXJ2ZXJDb25maWcgPSBudWxsO1xyXG4gICAgY29uc3RydWN0b3IoQE9wdGlvbmFsKCkgcHJpdmF0ZSB1cGxvYWRTZXJ2ZXJTZXI6IFVwbG9hZFNlcnZlclNlcnZpY2UpIHtcclxuICAgICAgICB0aGlzLnF1ZXVlID0gW107XHJcbiAgICAgICAgdGhpcy5zZXJ2aWNlRXZlbnRzID0gbmV3IEV2ZW50RW1pdHRlcjxVcGxvYWRPdXRwdXQ+KCk7XHJcbiAgICAgICAgdGhpcy51cGxvYWRTY2hlZHVsZXIgPSBuZXcgU3ViamVjdCgpO1xyXG4gICAgICAgIHRoaXMuc3VicyA9IFtdO1xyXG5cclxuICAgICAgICB0aGlzLnVwbG9hZFNjaGVkdWxlclxyXG4gICAgICAgICAgICAucGlwZShcclxuICAgICAgICAgICAgICAgIG1lcmdlTWFwKCh1cGxvYWQpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5zZXJ2ZXJNZXRob2QodXBsb2FkKTtcclxuICAgICAgICAgICAgICAgIH0sIHRoaXMuY29uY3VycmVuY3kpXHJcbiAgICAgICAgICAgIClcclxuICAgICAgICAgICAgLnN1YnNjcmliZSgodXBsb2FkT3V0cHV0KSA9PiB7XHJcbiAgICAgICAgICAgICAgICAvLyBpZiAodXBsb2FkT3V0cHV0LnR5cGUgPT0gJ3JlbW92ZWQnIHx8IHVwbG9hZE91dHB1dC50eXBlID09ICdkb25lJykge1xyXG4gICAgICAgICAgICAgICAgLy8gICAvLyDliKDpmaTmiJbogIVkb25l56e76ZmkXHJcbiAgICAgICAgICAgICAgICAvLyAgIGNvbnN0IHN1YkluZGV4ID0gdGhpcy5zdWJzLmZpbmRJbmRleChzdWIgPT4gc3ViLmlkID09PSB1cGxvYWRPdXRwdXQuZmlsZS5pZCk7XHJcbiAgICAgICAgICAgICAgICAvLyAgIGlmIChzdWJJbmRleCA+IC0xICYmIHRoaXMuc3Vic1tzdWJJbmRleF0uc3ViKSB7XHJcbiAgICAgICAgICAgICAgICAvLyAgICAgdGhpcy5zdWJzW3N1YkluZGV4XS5zdWIudW5zdWJzY3JpYmUoKTtcclxuICAgICAgICAgICAgICAgIC8vICAgfVxyXG4gICAgICAgICAgICAgICAgLy8gICB0aGlzLnN1YnMuc3BsaWNlKHN1YkluZGV4LCAxKTtcclxuICAgICAgICAgICAgICAgIC8vIH1cclxuICAgICAgICAgICAgICAgIGlmICh1cGxvYWRPdXRwdXQudHlwZSA9PSBcInJlbW92ZWRcIikge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIOS6i+S7tuS4rei/lOWbnueahOmDveaYr1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMucXVldWUgPSB0aGlzLnF1ZXVlLmZpbHRlcihcclxuICAgICAgICAgICAgICAgICAgICAgICAgKGl0ZW0pID0+IGl0ZW0ucHJvZ3Jlc3Muc3RhdHVzICE9PSBVcGxvYWRTdGF0dXMuUmVtb3ZlXHJcbiAgICAgICAgICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoIXVwbG9hZE91dHB1dC5oYXNPd25Qcm9wZXJ0eShcIm1lc3NhZ2VcIikpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdXBsb2FkT3V0cHV0W1wibWVzc2FnZVwiXSA9IFwi6KKr5Yig6ZmkXCI7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKHVwbG9hZE91dHB1dC50eXBlID09IFwiZXJyb3JcIikge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIOS4iuS8oOWksei0peeahOmZhOS7tuenu+mZpFxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMucXVldWUgPSB0aGlzLnF1ZXVlLmZpbHRlcigocXVldWVJdGVtKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAoXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB1cGxvYWRPdXRwdXQuZmlsZXMuZmluZEluZGV4KChpdGVtKSA9PiBxdWV1ZUl0ZW0uaWQgPT0gaXRlbS5pZCkgPFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgMFxyXG4gICAgICAgICAgICAgICAgICAgICAgICApO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgdGhpcy5zZXJ2aWNlRXZlbnRzLmVtaXQodXBsb2FkT3V0cHV0KTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICBzZXRPcHRpb25zKG9wdGlvbnM6IFVwbG9hZGVyT3B0aW9ucykge1xyXG4gICAgICAgIC8vIOmHjee9ruaWh+S7tuWkp+Wwj+OAgeexu+Wei+OAgeS4quaVsOmZkOWItlxyXG4gICAgICAgIGlmIChvcHRpb25zKSB7XHJcbiAgICAgICAgICAgIGZvciAobGV0IHByb3AgaW4gb3B0aW9ucykge1xyXG4gICAgICAgICAgICAgICAgdGhpc1twcm9wXSA9IG9wdGlvbnNbcHJvcF07XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBoYW5kbGVGaWxlcyhpbmNvbWluZ0ZpbGVzOiBGaWxlTGlzdCk6IHZvaWQge1xyXG4gICAgICAgIGNvbnN0IGFsbG93ZWRJbmNvbWluZ0ZpbGVzOiBGaWxlW10gPSBbXS5yZWR1Y2UuY2FsbChcclxuICAgICAgICAgICAgaW5jb21pbmdGaWxlcyxcclxuICAgICAgICAgICAgKGFjYzogRmlsZVtdLCBjaGVja0ZpbGU6IEZpbGUsIGk6IG51bWJlcikgPT4ge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgZnV0dXJlUXVldWVMZW5ndGggPSBhY2MubGVuZ3RoICsgdGhpcy5xdWV1ZS5sZW5ndGggKyAxO1xyXG4gICAgICAgICAgICAgICAgbGV0IGp1ZGdlUmVzdWx0ID0gdGhpcy5yZWplY3RlZFJlYXNvbihcclxuICAgICAgICAgICAgICAgICAgICBjaGVja0ZpbGUubmFtZSxcclxuICAgICAgICAgICAgICAgICAgICBjaGVja0ZpbGUudHlwZSxcclxuICAgICAgICAgICAgICAgICAgICBmdXR1cmVRdWV1ZUxlbmd0aCxcclxuICAgICAgICAgICAgICAgICAgICBjaGVja0ZpbGUuc2l6ZVxyXG4gICAgICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgICAgIGlmIChqdWRnZVJlc3VsdC5hbGxvd2VkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgYWNjID0gYWNjLmNvbmNhdChjaGVja0ZpbGUpO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAvLyDkuI3nrKblkIjlvZPliY3mlofku7bnsbvlnovmiJbogIXlhoXlrrnotoXlh7rpmZDliLbvvIzmipvlh7rkuovku7ZcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCByZWplY3RlZEZpbGU6IFVwbG9hZEZpbGUgPSBGRmlsZVV0aWxzLm1ha2VVcGxvYWRGaWxlKFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjaGVja0ZpbGUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlcclxuICAgICAgICAgICAgICAgICAgICApO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2VydmljZUV2ZW50cy5lbWl0KHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJyZWplY3RlZFwiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBmaWxlOiByZWplY3RlZEZpbGUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6IGp1ZGdlUmVzdWx0Lm1lc3NhZ2UsXHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gYWNjO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBbXVxyXG4gICAgICAgICk7XHJcblxyXG4gICAgICAgIC8vIOaehOmAoOaWh+S7tue7k+aehO+8jOW5tuWNleS4quaKm+WHuuS6i+S7tlxyXG4gICAgICAgIFtdLm1hcC5jYWxsKGFsbG93ZWRJbmNvbWluZ0ZpbGVzLCAoZmlsZTogRmlsZSwgaTogbnVtYmVyKSA9PiB7XHJcbiAgICAgICAgICAgIGNvbnN0IHVwbG9hZEZpbGU6IFVwbG9hZEZpbGUgPSBGRmlsZVV0aWxzLm1ha2VVcGxvYWRGaWxlKGZpbGUsIGkpO1xyXG4gICAgICAgICAgICB0aGlzLnF1ZXVlLnB1c2godXBsb2FkRmlsZSk7XHJcbiAgICAgICAgICAgIHRoaXMuc2VydmljZUV2ZW50cy5lbWl0KHsgdHlwZTogXCJhZGRlZFRvUXVldWVcIiwgZmlsZTogdXBsb2FkRmlsZSB9KTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgLy8g5omA5pyJ55qE5paH5Lu26YO95bey57uP5re75Yqg77yM5oqb5Ye65LqL5Lu2XHJcbiAgICAgICAgdGhpcy5zZXJ2aWNlRXZlbnRzLmVtaXQoeyB0eXBlOiBcImFsbEFkZGVkVG9RdWV1ZVwiIH0pO1xyXG4gICAgfVxyXG4gICAgcHJpdmF0ZSByZWplY3RlZFJlYXNvbihuYW1lLCB0eXBlLCBxdWV1ZWxlbmd0aCwgc2l6ZSkge1xyXG4gICAgICAgIGxldCBhbGxvd2VkID0gZmFsc2U7XHJcbiAgICAgICAgbGV0IG1lc3NhZ2UgPSBcIlwiO1xyXG4gICAgICAgIC8vIOW3suWtmOWcqOWQjOWQjeaWh+S7tlxyXG4gICAgICAgIGxldCBmaW5kRHVwbGljYXRlSW5kZXggPSB0aGlzLnF1ZXVlLmZpbmRJbmRleCgoZmlsZSkgPT4gZmlsZS5uYW1lID09IG5hbWUpO1xyXG4gICAgICAgIGlmIChmaW5kRHVwbGljYXRlSW5kZXggPiAtMSkge1xyXG4gICAgICAgICAgICBtZXNzYWdlID0gXCLkuIrkvKDlpLHotKXvvJrlt7LlrZjlnKjlkIzlkI3mlofku7ZcIjtcclxuICAgICAgICB9IGVsc2UgaWYgKCF0aGlzLmlzQ29udGVudFR5cGVBbGxvd2VkKG5hbWUpKSB7XHJcbiAgICAgICAgICAgIG1lc3NhZ2UgPVxyXG4gICAgICAgICAgICAgICAgXCLkuIrkvKDlpLHotKXvvJrlj6rlhYHorrjkuIrkvKBcIiArXHJcbiAgICAgICAgICAgICAgICB0aGlzLmFsbG93ZWRDb250ZW50VHlwZXMuam9pbihcIixcIikgK1xyXG4gICAgICAgICAgICAgICAgXCLnsbvlnovnmoTmlofmoaNcIjtcclxuICAgICAgICB9IGVsc2UgaWYgKFxyXG4gICAgICAgICAgICB0aGlzLm1heFVwbG9hZHMgPiAwICYmXHJcbiAgICAgICAgICAgICh0aGlzLm1heFVwbG9hZHMgPD0gdGhpcy51cGxvYWRlZENvdW50IHx8XHJcbiAgICAgICAgICAgICAgICBxdWV1ZWxlbmd0aCArIHRoaXMudXBsb2FkZWRDb3VudCA+IHRoaXMubWF4VXBsb2FkcylcclxuICAgICAgICApIHtcclxuICAgICAgICAgICAgbWVzc2FnZSA9IFwi5LiK5Lyg5aSx6LSl77ya5paH5Lu25oC75Liq5pWw6LaF5Ye6XCIgKyB0aGlzLm1heFVwbG9hZHMgKyBcIumZkOWItlwiO1xyXG4gICAgICAgIH0gZWxzZSBpZiAoIXRoaXMuaXNGaWxlU2l6ZUFsbG93ZWQoc2l6ZSkpIHtcclxuICAgICAgICAgICAgbWVzc2FnZSA9IFwi5LiK5Lyg5aSx6LSl77ya5Y2V5Liq5paH5Lu25aSn5bCP6LaF5Ye6XCIgKyB0aGlzLm1heEZpbGVTaXplICsgXCJNQueahOmZkOWItlwiO1xyXG4gICAgICAgIH0gZWxzZSBpZiAoc2l6ZSA9PSAwKSB7XHJcbiAgICAgICAgICAgIG1lc3NhZ2UgPSBcIuS4iuS8oOWksei0pe+8muS4jeWFgeiuuOaWh+S7tuS4uuepulwiO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGFsbG93ZWQgPSB0cnVlO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICBhbGxvd2VkLFxyXG4gICAgICAgICAgICBtZXNzYWdlLFxyXG4gICAgICAgIH07XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIOS7juWJjeerr+S8oOadpeS6i+S7tu+8jOi/m+ihjOacjeWKoeWZqOerr+aWueazleexu+Wei+WIpOaWrVxyXG4gICAgICogQHBhcmFtIGlucHV0XHJcbiAgICAgKi9cclxuICAgIGluaXRJbnB1dEV2ZW50cyhpbnB1dDogRXZlbnRFbWl0dGVyPFVwbG9hZElucHV0Pik6IFN1YnNjcmlwdGlvbiB7XHJcbiAgICAgICAgLy9kZWJ1Z2dlclxyXG4gICAgICAgIHJldHVybiBpbnB1dC5zdWJzY3JpYmUoKGV2ZW50OiBVcGxvYWRJbnB1dCkgPT4ge1xyXG4gICAgICAgICAgICAvL2RlYnVnZ2VyXHJcbiAgICAgICAgICAgIHN3aXRjaCAoZXZlbnQudHlwZSkge1xyXG4gICAgICAgICAgICAgICAgY2FzZSAnc2xpY2VVcGxvYWQnOlxyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IF9maWxlcyA9IHRoaXMucXVldWUuZmlsdGVyKFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAoZmlsZSkgPT4gZmlsZS5wcm9ncmVzcy5zdGF0dXMgPT09IFVwbG9hZFN0YXR1cy5RdWV1ZVxyXG4gICAgICAgICAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKF9maWxlcy5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMudXBsb2FkU2NoZWR1bGVyLm5leHQoe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZmlsZXM6IF9maWxlcyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV2ZW50OiBldmVudCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpbGU6IG51bGwsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgXCJ1cGxvYWRcIjpcclxuICAgICAgICAgICAgICAgIGNhc2UgXCJtdWx0aXBhcnRVcGxvYWRcIjpcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCB1cGxvYWRGaWxlSW5kZXggPSB0aGlzLnF1ZXVlLmZpbmRJbmRleChcclxuICAgICAgICAgICAgICAgICAgICAgICAgKGZpbGUpID0+IGZpbGUgPT09IGV2ZW50LmZpbGVcclxuICAgICAgICAgICAgICAgICAgICApO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh1cGxvYWRGaWxlSW5kZXggIT09IC0xICYmIGV2ZW50LmZpbGUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy51cGxvYWRTY2hlZHVsZXIubmV4dCh7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaWxlczogW3RoaXMucXVldWVbdXBsb2FkRmlsZUluZGV4XV0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBldmVudDogZXZlbnQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaWxlOiBudWxsLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlIFwidXBsb2FkQWxsXCI6XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgZmlsZXMgPSB0aGlzLnF1ZXVlLmZpbHRlcihcclxuICAgICAgICAgICAgICAgICAgICAgICAgKGZpbGUpID0+IGZpbGUucHJvZ3Jlc3Muc3RhdHVzID09PSBVcGxvYWRTdGF0dXMuUXVldWVcclxuICAgICAgICAgICAgICAgICAgICApO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChmaWxlcy5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGV2ZW50LnR5cGUgPSBcInVwbG9hZFwiO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnVwbG9hZFNjaGVkdWxlci5uZXh0KHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpbGVzOiBmaWxlcyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV2ZW50OiBldmVudCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpbGU6IG51bGwsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgXCJjYW5jZWxcIjpcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBpZCA9IGV2ZW50LmlkIHx8IG51bGw7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFpZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGZpbGVJbmRleCA9IHRoaXMucXVldWUuZmluZEluZGV4KChmaWxlKSA9PiBmaWxlLmlkID09PSBpZCk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGZpbGVJbmRleCAhPT0gLTEpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zZXJ2aWNlRXZlbnRzLmVtaXQoe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJjYW5jZWxsZWRcIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpbGVzOiBbdGhpcy5xdWV1ZVtmaWxlSW5kZXhdXSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6IFwi5bey5Y+W5raI6ZmE5Lu25LiK5LygXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnF1ZXVlLnNwbGljZShmaWxlSW5kZXgsIDEpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICAvLyBjYXNlICdjYW5jZWwnOlxyXG4gICAgICAgICAgICAgICAgICAgIC8vIGRlYnVnZ2VyXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gY29uc3QgaWQgPSBldmVudC5pZCB8fCBudWxsO1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIGlmICghaWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAvLyAgIHJldHVybjtcclxuICAgICAgICAgICAgICAgICAgICAvLyB9XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gY29uc3Qgc3VicyA9IHRoaXMuc3Vicy5maWx0ZXIoc3ViID0+IHN1Yi5pZCA9PT0gaWQpO1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIHN1YnMuZm9yRWFjaChzdWIgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vICAgaWYgKHN1Yi5zdWIpIHtcclxuICAgICAgICAgICAgICAgICAgICAvLyAgICAgc3ViLnN1Yi51bnN1YnNjcmliZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgIC8vICAgICBjb25zdCBmaWxlSW5kZXggPSB0aGlzLnF1ZXVlLmZpbmRJbmRleChmaWxlID0+IGZpbGUuaWQgPT09IGlkKTtcclxuICAgICAgICAgICAgICAgICAgICAvLyAgICAgaWYgKGZpbGVJbmRleCAhPT0gLTEpIHtcclxuICAgICAgICAgICAgICAgICAgICAvLyAgICAgICB0aGlzLnF1ZXVlW2ZpbGVJbmRleF0ucHJvZ3Jlc3Muc3RhdHVzID0gVXBsb2FkU3RhdHVzLkNhbmNlbGxlZDtcclxuICAgICAgICAgICAgICAgICAgICAvLyAgICAgICB0aGlzLnNlcnZpY2VFdmVudHMuZW1pdCh7IHR5cGU6ICdjYW5jZWxsZWQnLCBmaWxlOiB0aGlzLnF1ZXVlW2ZpbGVJbmRleF0gfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAvLyAgIH1cclxuICAgICAgICAgICAgICAgICAgICAvLyB9KTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIC8vIGNhc2UgJ2NhbmNlbEFsbCc6XHJcbiAgICAgICAgICAgICAgICAvLyAgIHRoaXMuc3Vicy5mb3JFYWNoKHN1YiA9PiB7XHJcbiAgICAgICAgICAgICAgICAvLyAgICAgaWYgKHN1Yi5zdWIpIHtcclxuICAgICAgICAgICAgICAgIC8vICAgICAgIHN1Yi5zdWIudW5zdWJzY3JpYmUoKTtcclxuICAgICAgICAgICAgICAgIC8vICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgLy8gICAgIGNvbnN0IGZpbGUgPSB0aGlzLnF1ZXVlLmZpbmQodXBsb2FkRmlsZSA9PiB1cGxvYWRGaWxlLmlkID09PSBzdWIuaWQpO1xyXG4gICAgICAgICAgICAgICAgLy8gICAgIGlmIChmaWxlKSB7XHJcbiAgICAgICAgICAgICAgICAvLyAgICAgICBmaWxlLnByb2dyZXNzLnN0YXR1cyA9IFVwbG9hZFN0YXR1cy5DYW5jZWxsZWQ7XHJcbiAgICAgICAgICAgICAgICAvLyAgICAgICB0aGlzLnNlcnZpY2VFdmVudHMuZW1pdCh7IHR5cGU6ICdjYW5jZWxsZWQnLCBmaWxlOiBmaWxlIH0pO1xyXG4gICAgICAgICAgICAgICAgLy8gICAgIH1cclxuICAgICAgICAgICAgICAgIC8vICAgfSk7XHJcbiAgICAgICAgICAgICAgICAvLyAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSBcImhpZGVcIjpcclxuICAgICAgICAgICAgICAgICAgICBpZiAoIWV2ZW50LmlkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IGlkcyA9IGV2ZW50LmlkLnNwbGl0KFwiLFwiKTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnF1ZXVlID0gdGhpcy5xdWV1ZS5maWx0ZXIoKGZpbGUpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHRJbmRleCA9IGlkcy5maW5kSW5kZXgoKHRJZCkgPT4gdElkID09IGZpbGUuaWQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdEluZGV4ID4gLTEgPyBmYWxzZSA6IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlIFwiY2FuY2VsQWxsXCI6XHJcbiAgICAgICAgICAgICAgICAgICAgLy8g5Y+W5raI77yM55u05o6l5LuO6Zif5YiX5Lit56e76Zmk77yM5LiN55So5L+u5pS554q25oCBXHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgcXVldWVGaWxlcyA9IHRoaXMucXVldWUuZmlsdGVyKFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAodXBsb2FkRmlsZSkgPT4gdXBsb2FkRmlsZS5wcm9ncmVzcy5zdGF0dXMgPT09IFVwbG9hZFN0YXR1cy5RdWV1ZVxyXG4gICAgICAgICAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHF1ZXVlRmlsZXMubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc2VydmljZUV2ZW50cy5lbWl0KHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IFwiY2FuY2VsbGVkXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaWxlczogcXVldWVGaWxlcyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6IFwi5bey5Y+W5raI6ZmE5Lu25LiK5LygXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnF1ZXVlID0gdGhpcy5xdWV1ZS5maWx0ZXIoXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAodXBsb2FkRmlsZSkgPT4gdXBsb2FkRmlsZS5wcm9ncmVzcy5zdGF0dXMgIT0gVXBsb2FkU3RhdHVzLlF1ZXVlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSBcInJlbW92ZVwiOlxyXG4gICAgICAgICAgICAgICAgICAgIGlmICghZXZlbnQuaWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBjb25zdCByZW1vdmVJbmRleCA9IHRoaXMucXVldWUuZmluZEluZGV4KFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAoZmlsZSkgPT4gZmlsZS5pZCA9PT0gZXZlbnQuaWRcclxuICAgICAgICAgICAgICAgICAgICApO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChyZW1vdmVJbmRleCAhPT0gLTEpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8g5b6X5pyJ5Liq5byA5aeL5Yig6Zmk5ZKM5bey57uP5Yig6ZmkXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucXVldWVbcmVtb3ZlSW5kZXhdLnByb2dyZXNzLnN0YXR1cyA9IFVwbG9hZFN0YXR1cy5SZW1vdmU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMudXBsb2FkU2NoZWR1bGVyLm5leHQoe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZmlsZXM6IFt0aGlzLnF1ZXVlW3JlbW92ZUluZGV4XV0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBldmVudDogZXZlbnQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaWxlOiBudWxsLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlIFwicmVtb3ZlQWxsXCI6XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgcmVtb3ZlUXVldWVGaWxlcyA9IHRoaXMucXVldWUuZmlsdGVyKFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAodXBsb2FkRmlsZSkgPT4gdXBsb2FkRmlsZS5wcm9ncmVzcy5zdGF0dXMgPT09IFVwbG9hZFN0YXR1cy5RdWV1ZVxyXG4gICAgICAgICAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHJlbW92ZVF1ZXVlRmlsZXMubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc2VydmljZUV2ZW50cy5lbWl0KHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IFwiY2FuY2VsbGVkXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaWxlczogcmVtb3ZlUXVldWVGaWxlcyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6IFwi5Yig6Zmk6ZmE5Lu25oiQ5YqfXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnF1ZXVlID0gdGhpcy5xdWV1ZS5maWx0ZXIoXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAodXBsb2FkRmlsZSkgPT4gdXBsb2FkRmlsZS5wcm9ncmVzcy5zdGF0dXMgIT0gVXBsb2FkU3RhdHVzLlF1ZXVlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIC8vIOato+WcqOS4iuS8oOeahOmZhOS7tuaYr+WmguS9leWkhOeQhlxyXG4gICAgICAgICAgICAgICAgICAgIC8vIGNvbnN0IGRvbmVGaWxlcyA9IHRoaXMucXVldWUuZmlsdGVyKHVwbG9hZEZpbGUgPT4gdXBsb2FkRmlsZS5wcm9ncmVzcy5zdGF0dXMgPT09IFVwbG9hZFN0YXR1cy5Eb25lKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5xdWV1ZS5sZW5ndGgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZXZlbnQudHlwZSA9IFwicmVtb3ZlXCI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucXVldWUubWFwKFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKGl0ZW0pID0+IChpdGVtLnByb2dyZXNzLnN0YXR1cyA9IFVwbG9hZFN0YXR1cy5SZW1vdmUpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMudXBsb2FkU2NoZWR1bGVyLm5leHQoe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZmlsZXM6IHRoaXMucXVldWUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBldmVudDogZXZlbnQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaWxlOiBudWxsLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICBzZXRFeHRlbmRTZXJ2ZXJDb25maWcoZXh0ZW5kU2VyKSB7XHJcbiAgICAgICAgdGhpcy5leHRlbmRTZXJ2ZXJDb25maWcgPSBleHRlbmRTZXI7XHJcbiAgICB9XHJcblxyXG4gICAgc2VydmVyTWV0aG9kKHVwbG9hZDoge1xyXG4gICAgICAgIGZpbGU6IFVwbG9hZEZpbGU7XHJcbiAgICAgICAgZXZlbnQ6IFVwbG9hZElucHV0O1xyXG4gICAgICAgIGZpbGVzPzogVXBsb2FkRmlsZVtdO1xyXG4gICAgfSk6IE9ic2VydmFibGU8VXBsb2FkT3V0cHV0PiB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBPYnNlcnZhYmxlKChvYnNlcnZlcikgPT4ge1xyXG4gICAgICAgICAgICBsZXQgc3ViO1xyXG4gICAgICAgICAgICBsZXQgaWRzID0gdXBsb2FkLmZpbGVzLm1hcCgoZmlsZUl0ZW0pID0+IGZpbGVJdGVtLmlkKTtcclxuICAgICAgICAgICAgc3dpdGNoICh1cGxvYWQuZXZlbnQudHlwZSkge1xyXG4gICAgICAgICAgICAgICAgY2FzZSAnc2xpY2VVcGxvYWQnOlxyXG4gICAgICAgICAgICAgICAgICAgIHN1YiA9IHRoaXMudXBsb2FkKHVwbG9hZC5maWxlcywgdXBsb2FkLmV2ZW50KTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgXCJ1cGxvYWRcIjpcclxuICAgICAgICAgICAgICAgICAgICBzdWIgPSB0aGlzLnVwbG9hZCh1cGxvYWQuZmlsZXMsIHVwbG9hZC5ldmVudCk7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlIFwibXVsdGlwYXJ0VXBsb2FkXCI6XHJcbiAgICAgICAgICAgICAgICAgICAgc3ViID0gdGhpcy5tdWx0aXBhcnRVcGxvYWQodXBsb2FkLmZpbGVzWzBdLCB1cGxvYWQuZXZlbnQpO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgLy8gY2FzZSAndXBsb2FkQWxsJzpcclxuICAgICAgICAgICAgICAgIC8vICAgaWRzID0gdXBsb2FkLmZpbGVzLm1hcChmaWxlSXRlbSA9PiBmaWxlSXRlbS5pZCk7XHJcbiAgICAgICAgICAgICAgICAvLyAgIHN1YiA9IHRoaXMudXBsb2FkQWxsKHVwbG9hZC5maWxlcywgdXBsb2FkLmV2ZW50KTtcclxuICAgICAgICAgICAgICAgIC8vICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlIFwicmVtb3ZlXCI6XHJcbiAgICAgICAgICAgICAgICAgICAgc3ViID0gdGhpcy5yZW1vdmUodXBsb2FkLmZpbGVzLCB1cGxvYWQuZXZlbnQpO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgLy8gY2FzZSAncmVtb3ZlQWxsJzpcclxuICAgICAgICAgICAgICAgIC8vICAgaWRzID0gdXBsb2FkLmZpbGVzLm1hcChmaWxlSXRlbSA9PiBmaWxlSXRlbS5pZCk7XHJcbiAgICAgICAgICAgICAgICAvLyAgIHN1YiA9IHRoaXMucmVtb3ZlQWxsKHVwbG9hZC5maWxlcywgdXBsb2FkLmV2ZW50KTtcclxuICAgICAgICAgICAgICAgIC8vICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgICAgIHN1YiA9IG51bGw7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKCFzdWIpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBzdWIucGlwZShmaW5hbGl6ZSgoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAvLyBkZWJ1Z2dlcjtcclxuICAgICAgICAgICAgICAgIGlmICghb2JzZXJ2ZXIuY2xvc2VkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgb2JzZXJ2ZXIuY29tcGxldGUoKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSkpLnN1YnNjcmliZShcclxuICAgICAgICAgICAgICAgICAgICAob3V0cHV0KSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGRlYnVnZ2VyO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBvYnNlcnZlci5uZXh0KG91dHB1dCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICAoZXJyKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG9ic2VydmVyLm5leHQoZXJyKTtcclxuICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgICgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgb2JzZXJ2ZXIuY29tcGxldGUoKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICApO1xyXG4gICAgICAgICAgICB0aGlzLnN1YnMucHVzaCh7IGlkczogaWRzLCBzdWI6IHN1YiwgaWQ6IFwiXCIgfSk7XHJcbiAgICAgICAgICAgIC8vIHN3aXRjaCAodXBsb2FkLmV2ZW50LnR5cGUpIHtcclxuICAgICAgICAgICAgLy8gICBjYXNlICd1cGxvYWRBbGwnOlxyXG4gICAgICAgICAgICAvLyAgICAgdGhpcy5zdWJzLnB1c2goeyBpZHM6IGlkcywgc3ViOiBzdWIsIGlkOiAnJyB9KTtcclxuICAgICAgICAgICAgLy8gICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAvLyAgIGNhc2UgJ3JlbW92ZUFsbCc6XHJcbiAgICAgICAgICAgIC8vICAgICB0aGlzLnN1YnMucHVzaCh7IGlkczogaWRzLCBzdWI6IHN1YiwgaWQ6ICcnIH0pO1xyXG4gICAgICAgICAgICAvLyAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIC8vICAgZGVmYXVsdDpcclxuXHJcbiAgICAgICAgICAgIC8vIH1cclxuICAgICAgICB9KTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICog5Y2V5Liq5paH5Lu25LiK5LygXHJcbiAgICAgKiBAcGFyYW0gZmlsZVxyXG4gICAgICogQHBhcmFtIGV2ZW50XHJcbiAgICAgKi9cclxuICAgIC8vIHVwbG9hZEZpbGUoZmlsZTogVXBsb2FkRmlsZSwgZXZlbnQ6IFVwbG9hZElucHV0KTogT2JzZXJ2YWJsZTxVcGxvYWRPdXRwdXQ+IHtcclxuICAgIC8vICAgY29uc3QgdXBsb2FkRmlsZSA9IDxCbG9iRmlsZT5maWxlLm5hdGl2ZUZpbGU7XHJcbiAgICAvLyAgIGNvbnN0IHVwbG9hZEluZGV4ID0gdGhpcy5xdWV1ZS5maW5kSW5kZXgob3V0RmlsZSA9PiBvdXRGaWxlLm5hdGl2ZUZpbGUgPT09IHVwbG9hZEZpbGUpO1xyXG5cclxuICAgIC8vICAgLy8g5bey57uP6KKr5Y+W5raI55qE5LiN6IO96KKr5LiK5LygXHJcbiAgICAvLyAgIGlmICh0aGlzLnF1ZXVlW3VwbG9hZEluZGV4XS5wcm9ncmVzcy5zdGF0dXMgPT09IFVwbG9hZFN0YXR1cy5DYW5jZWxsZWQpIHtcclxuICAgIC8vICAgICByZXR1cm4gbmV3IE9ic2VydmFibGUob2JzZXJ2ZXIgPT4ge1xyXG4gICAgLy8gICAgICAgb2JzZXJ2ZXIuY29tcGxldGUoKTtcclxuICAgIC8vICAgICB9KTtcclxuICAgIC8vICAgfVxyXG4gICAgLy8gICAvLyDmipvlh7rlvIDlp4vkuIrkvKDnmoTkuovku7ZcclxuICAgIC8vICAgdGhpcy5zZXJ2aWNlRXZlbnRzLmVtaXQoeyB0eXBlOiAnc3RhcnQnLCBmaWxlczogW2ZpbGVdIH0pO1xyXG4gICAgLy8gICByZXR1cm4gdGhpcy51cGxvYWRTZXJ2ZXJTZXIudXBsb2FkKGZpbGUsIGV2ZW50LCB0aGlzLmV4dGVuZFNlcnZlckNvbmZpZyk7XHJcbiAgICAvLyB9XHJcbiAgICBtdWx0aXBhcnRVcGxvYWQoXHJcbiAgICAgICAgZmlsZTogVXBsb2FkRmlsZSxcclxuICAgICAgICBldmVudDogVXBsb2FkSW5wdXRcclxuICAgICk6IE9ic2VydmFibGU8VXBsb2FkT3V0cHV0PiB7XHJcbiAgICAgICAgLy8g5oqb5Ye65byA5aeL5LiK5Lyg55qE5LqL5Lu2XHJcbiAgICAgICAgdGhpcy5zZXJ2aWNlRXZlbnRzLmVtaXQoeyB0eXBlOiBcInN0YXJ0XCIsIGZpbGVzOiBbZmlsZV0gfSk7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMudXBsb2FkU2VydmVyU2VyLm11bHRpcGFydFVwbG9hZChcclxuICAgICAgICAgICAgZmlsZSxcclxuICAgICAgICAgICAgZXZlbnQsXHJcbiAgICAgICAgICAgIHRoaXMuZXh0ZW5kU2VydmVyQ29uZmlnXHJcbiAgICAgICAgKTtcclxuICAgIH1cclxuICAgIHVwbG9hZChmaWxlczogVXBsb2FkRmlsZVtdLCBldmVudDogVXBsb2FkSW5wdXQpOiBPYnNlcnZhYmxlPFVwbG9hZE91dHB1dD4ge1xyXG4gICAgICAgIC8vIOaKm+WHuuW8gOWni+S4iuS8oOeahOS6i+S7tlxyXG4gICAgICAgIHRoaXMuc2VydmljZUV2ZW50cy5lbWl0KHsgdHlwZTogXCJzdGFydFwiLCBmaWxlczogZmlsZXMgfSk7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMudXBsb2FkU2VydmVyU2VyLnVwbG9hZChmaWxlcywgZXZlbnQsIHRoaXMuZXh0ZW5kU2VydmVyQ29uZmlnKTtcclxuICAgIH1cclxuXHJcbiAgICByZW1vdmUoZmlsZXM6IFVwbG9hZEZpbGVbXSwgZXZlbnQ6IFVwbG9hZElucHV0KTogT2JzZXJ2YWJsZTxVcGxvYWRPdXRwdXQ+IHtcclxuICAgICAgICByZXR1cm4gdGhpcy51cGxvYWRTZXJ2ZXJTZXIucmVtb3ZlKGZpbGVzLCBldmVudCwgdGhpcy5leHRlbmRTZXJ2ZXJDb25maWcpO1xyXG4gICAgfVxyXG4gICAgLy8gcmVtb3ZlQWxsKGZpbGVzOiBVcGxvYWRGaWxlW10sIGV2ZW50OiBVcGxvYWRJbnB1dCk6IE9ic2VydmFibGU8VXBsb2FkT3V0cHV0PiB7XHJcbiAgICAvLyAgIHJldHVybiB0aGlzLnVwbG9hZFNlcnZlclNlci5yZW1vdmVBbGwoZmlsZXMsIGV2ZW50LCB0aGlzLmV4dGVuZFNlcnZlckNvbmZpZyk7XHJcbiAgICAvLyB9XHJcbiAgICAvLyDph43nva5cclxuICAgIHJlc2V0KCkge1xyXG4gICAgICAgIHRoaXMucXVldWUgPSBbXTtcclxuICAgICAgICAvL3RoaXMudXBsb2FkU2NoZWR1bGVyID0gbmV3IFN1YmplY3QoKTtcclxuICAgICAgICAvLyB0aGlzLnN1YnMuZm9yRWFjaChzdWIgPT4ge1xyXG4gICAgICAgIC8vICAgaWYgKHN1Yi5zdWIpIHtcclxuICAgICAgICAvLyAgICAgc3ViLnN1Yi51bnN1YnNjcmliZSgpO1xyXG4gICAgICAgIC8vICAgfVxyXG4gICAgICAgIC8vIH0pO1xyXG4gICAgICAgIHRoaXMuc3VicyA9IFtdO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIOaaguaXtlxyXG4gICAgc2V0Q29udGVudFR5cGVzKGNvbnRlbnRUeXBlczogc3RyaW5nW10pOiB2b2lkIHtcclxuICAgICAgICBpZiAodHlwZW9mIGNvbnRlbnRUeXBlcyAhPT0gXCJ1bmRlZmluZWRcIiAmJiBjb250ZW50VHlwZXMgaW5zdGFuY2VvZiBBcnJheSkge1xyXG4gICAgICAgICAgICBpZiAoY29udGVudFR5cGVzLmZpbmQoKHR5cGU6IHN0cmluZykgPT4gdHlwZSA9PT0gXCIqXCIpICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuYWxsb3dlZENvbnRlbnRUeXBlcyA9IFtcIipcIl07XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmFsbG93ZWRDb250ZW50VHlwZXMgPSBjb250ZW50VHlwZXM7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLmFsbG93ZWRDb250ZW50VHlwZXMgPSBbXCIqXCJdO1xyXG4gICAgfVxyXG5cclxuICAgIGFsbENvbnRlbnRUeXBlc0FsbG93ZWQoKTogYm9vbGVhbiB7XHJcbiAgICAgICAgcmV0dXJuIChcclxuICAgICAgICAgICAgdGhpcy5hbGxvd2VkQ29udGVudFR5cGVzLmZpbmQoKHR5cGU6IHN0cmluZykgPT4gdHlwZSA9PT0gXCIqXCIpICE9PVxyXG4gICAgICAgICAgICB1bmRlZmluZWRcclxuICAgICAgICApO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIG5hbWVcclxuICAgICAqL1xyXG4gICAgaXNDb250ZW50VHlwZUFsbG93ZWQobmFtZTogc3RyaW5nKTogYm9vbGVhbiB7XHJcbiAgICAgICAgaWYgKHRoaXMuYWxsQ29udGVudFR5cGVzQWxsb3dlZCgpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyDpmYTku7bmsqHmnInlkI7nvIBcclxuICAgICAgICBpZiAobmFtZS5sYXN0SW5kZXhPZihcIi5cIikgPCAwKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgbGV0IG5hbWVzdWZmaXggPSBuYW1lLnN1YnN0cihuYW1lLmxhc3RJbmRleE9mKFwiLlwiKSk7XHJcbiAgICAgICAgLy8g566A5YyW6K6h566XXHJcbiAgICAgICAgcmV0dXJuIChcclxuICAgICAgICAgICAgdGhpcy5hbGxvd2VkQ29udGVudFR5cGVzLmZpbmRJbmRleChcclxuICAgICAgICAgICAgICAgIChpdGVtKSA9PiBpdGVtLnRvTG93ZXJDYXNlKCkgPT0gbmFtZXN1ZmZpeC50b0xvd2VyQ2FzZSgpXHJcbiAgICAgICAgICAgICkgPiAtMVxyXG4gICAgICAgICk7XHJcbiAgICB9XHJcblxyXG4gICAgaXNGaWxlU2l6ZUFsbG93ZWQoZmlsZVNpemU6IG51bWJlcik6IGJvb2xlYW4ge1xyXG4gICAgICAgIGlmICghdGhpcy5tYXhGaWxlU2l6ZSkge1xyXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gZmlsZVNpemXmmK9i5Y2V5L2NIG1heEZpbGVTaXpl5pivTULljZXkvY1cclxuICAgICAgICByZXR1cm4gZmlsZVNpemUgPD0gdGhpcy5tYXhGaWxlU2l6ZSAqIDEwMjQgKiAxMDI0OyAvLyAqIDhcclxuICAgIH1cclxufVxyXG4iXX0=