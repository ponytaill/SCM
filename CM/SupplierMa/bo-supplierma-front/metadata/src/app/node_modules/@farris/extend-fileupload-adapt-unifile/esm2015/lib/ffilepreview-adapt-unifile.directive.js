/**
 * @fileoverview added by tsickle
 * Generated from: lib/ffilepreview-adapt-unifile.directive.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, HostListener, Input } from '@angular/core';
import { FfilepreviewAdaptUnifileService } from './ffilepreview-adapt-unifile.service';
export class FFilePreviewAdaptUnifileDirective {
    /**
     * @param {?} previewSer
     */
    constructor(previewSer) {
        this.previewSer = previewSer;
        /**
         * 处理扩展的服务器端配置
         */
        this._extendServeConfig = null;
    }
    /**
     * 捕获预览事件
     * @param {?} fileInfo
     * @return {?}
     */
    filePreviewEventHandler(fileInfo) {
        /** @type {?} */
        const previewOpts = Object.assign(this.extendServerConfig || {}, {
            options: {
                showDownload: !!fileInfo.showDownload,
                showHeader: true,
                showFileList: true
            }
        });
        this.previewSer.previewFile(fileInfo, previewOpts);
    }
    /**
     * 捕获下载事件
     * @param {?} downloadEv
     * @return {?}
     */
    fileDownloadEventHandler(downloadEv) {
        // 如果是批量下载, downloadEv={fileInfos:[],name:}
        if (downloadEv && downloadEv['fileInfos'].length > 0) {
            if (downloadEv['fileInfos'].length > 1) {
                this.previewSer.multiDownloadFilesWidthName(downloadEv['fileInfos'], downloadEv['name'], this.extendServerConfig);
            }
            else {
                this.previewSer.downloadFile(downloadEv['fileInfos'][0], this.extendServerConfig);
            }
        }
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set extendServerConfig(value) {
        this._extendServeConfig = value;
        this.previewSer.setPreviwExtendServerConfig(value);
    }
    /**
     * @return {?}
     */
    get extendServerConfig() {
        return this._extendServeConfig;
    }
}
FFilePreviewAdaptUnifileDirective.decorators = [
    { type: Directive, args: [{
                selector: '[fFilePreviewAdaptUnifile]',
                providers: [FfilepreviewAdaptUnifileService]
            },] }
];
/** @nocollapse */
FFilePreviewAdaptUnifileDirective.ctorParameters = () => [
    { type: FfilepreviewAdaptUnifileService }
];
FFilePreviewAdaptUnifileDirective.propDecorators = {
    filePreviewEventHandler: [{ type: HostListener, args: ['filePreviewEvent', ['$event'],] }],
    fileDownloadEventHandler: [{ type: HostListener, args: ['fileDownloadEvent', ['$event'],] }],
    extendServerConfig: [{ type: Input }]
};
if (false) {
    /**
     * 处理扩展的服务器端配置
     * @type {?}
     * @private
     */
    FFilePreviewAdaptUnifileDirective.prototype._extendServeConfig;
    /**
     * @type {?}
     * @private
     */
    FFilePreviewAdaptUnifileDirective.prototype.previewSer;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmZpbGVwcmV2aWV3LWFkYXB0LXVuaWZpbGUuZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGZhcnJpcy9leHRlbmQtZmlsZXVwbG9hZC1hZGFwdC11bmlmaWxlLyIsInNvdXJjZXMiOlsibGliL2ZmaWxlcHJldmlldy1hZGFwdC11bmlmaWxlLmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsWUFBWSxFQUFFLEtBQUssRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMvRCxPQUFPLEVBQUUsK0JBQStCLEVBQUUsTUFBTSxzQ0FBc0MsQ0FBQztBQU12RixNQUFNLE9BQU8saUNBQWlDOzs7O0lBMkMxQyxZQUFvQixVQUEyQztRQUEzQyxlQUFVLEdBQVYsVUFBVSxDQUFpQzs7OztRQVR2RCx1QkFBa0IsR0FBQyxJQUFJLENBQUM7SUFXaEMsQ0FBQzs7Ozs7O0lBdkNELHVCQUF1QixDQUFDLFFBQVE7O2NBQ3RCLFdBQVcsR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxrQkFBa0IsSUFBSSxFQUFFLEVBQUU7WUFDN0QsT0FBTyxFQUFFO2dCQUNMLFlBQVksRUFBRSxDQUFDLENBQUMsUUFBUSxDQUFDLFlBQVk7Z0JBQ3JDLFVBQVUsRUFBRSxJQUFJO2dCQUNoQixZQUFZLEVBQUUsSUFBSTthQUNyQjtTQUFDLENBQUM7UUFDUCxJQUFJLENBQUMsVUFBVSxDQUFDLFdBQVcsQ0FBQyxRQUFRLEVBQUUsV0FBVyxDQUFDLENBQUM7SUFDdkQsQ0FBQzs7Ozs7O0lBTUQsd0JBQXdCLENBQUMsVUFBVTtRQUMvQiwyQ0FBMkM7UUFDM0MsSUFBSSxVQUFVLElBQUUsVUFBVSxDQUFDLFdBQVcsQ0FBQyxDQUFDLE1BQU0sR0FBQyxDQUFDLEVBQUU7WUFDOUMsSUFBSSxVQUFVLENBQUMsV0FBVyxDQUFDLENBQUMsTUFBTSxHQUFDLENBQUMsRUFBRTtnQkFDbEMsSUFBSSxDQUFDLFVBQVUsQ0FBQywyQkFBMkIsQ0FBQyxVQUFVLENBQUMsV0FBVyxDQUFDLEVBQUMsVUFBVSxDQUFDLE1BQU0sQ0FBQyxFQUFFLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDO2FBQ3BIO2lCQUFJO2dCQUNELElBQUksQ0FBQyxVQUFVLENBQUMsWUFBWSxDQUFDLFVBQVUsQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxJQUFJLENBQUMsa0JBQWtCLENBQUMsQ0FBQzthQUNyRjtTQUNKO0lBQ0wsQ0FBQzs7Ozs7SUFNRCxJQUNJLGtCQUFrQixDQUFDLEtBQUs7UUFDeEIsSUFBSSxDQUFDLGtCQUFrQixHQUFDLEtBQUssQ0FBQztRQUM5QixJQUFJLENBQUMsVUFBVSxDQUFDLDJCQUEyQixDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ3ZELENBQUM7Ozs7SUFDRCxJQUFJLGtCQUFrQjtRQUNsQixPQUFPLElBQUksQ0FBQyxrQkFBa0IsQ0FBQztJQUNuQyxDQUFDOzs7WUE5Q0osU0FBUyxTQUFDO2dCQUNQLFFBQVEsRUFBRSw0QkFBNEI7Z0JBQ3RDLFNBQVMsRUFBQyxDQUFDLCtCQUErQixDQUFDO2FBQzlDOzs7O1lBTFEsK0JBQStCOzs7c0NBV25DLFlBQVksU0FBQyxrQkFBa0IsRUFBRSxDQUFDLFFBQVEsQ0FBQzt1Q0FjM0MsWUFBWSxTQUFDLG1CQUFtQixFQUFFLENBQUMsUUFBUSxDQUFDO2lDQWdCNUMsS0FBSzs7Ozs7Ozs7SUFETiwrREFBZ0M7Ozs7O0lBU3BCLHVEQUFtRCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERpcmVjdGl2ZSwgSG9zdExpc3RlbmVyLCBJbnB1dCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBGZmlsZXByZXZpZXdBZGFwdFVuaWZpbGVTZXJ2aWNlIH0gZnJvbSAnLi9mZmlsZXByZXZpZXctYWRhcHQtdW5pZmlsZS5zZXJ2aWNlJztcclxuXHJcbkBEaXJlY3RpdmUoe1xyXG4gICAgc2VsZWN0b3I6ICdbZkZpbGVQcmV2aWV3QWRhcHRVbmlmaWxlXScsXHJcbiAgICBwcm92aWRlcnM6W0ZmaWxlcHJldmlld0FkYXB0VW5pZmlsZVNlcnZpY2VdXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBGRmlsZVByZXZpZXdBZGFwdFVuaWZpbGVEaXJlY3RpdmUge1xyXG4gICAgLyoqXHJcbiAgICAgKiDmjZXojrfpooTop4jkuovku7ZcclxuICAgICAqIEBwYXJhbSBmaWxlSW5mbyBcclxuICAgICAqL1xyXG4gICAgQEhvc3RMaXN0ZW5lcignZmlsZVByZXZpZXdFdmVudCcsIFsnJGV2ZW50J10pXHJcbiAgICBmaWxlUHJldmlld0V2ZW50SGFuZGxlcihmaWxlSW5mbykge1xyXG4gICAgICAgIGNvbnN0IHByZXZpZXdPcHRzID0gT2JqZWN0LmFzc2lnbih0aGlzLmV4dGVuZFNlcnZlckNvbmZpZyB8fCB7fSwge1xyXG4gICAgICAgICAgICBvcHRpb25zOiB7XHJcbiAgICAgICAgICAgICAgICBzaG93RG93bmxvYWQ6ICEhZmlsZUluZm8uc2hvd0Rvd25sb2FkLFxyXG4gICAgICAgICAgICAgICAgc2hvd0hlYWRlcjogdHJ1ZSxcclxuICAgICAgICAgICAgICAgIHNob3dGaWxlTGlzdDogdHJ1ZVxyXG4gICAgICAgICAgICB9fSk7XHJcbiAgICAgICAgdGhpcy5wcmV2aWV3U2VyLnByZXZpZXdGaWxlKGZpbGVJbmZvLCBwcmV2aWV3T3B0cyk7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIOaNleiOt+S4i+i9veS6i+S7tlxyXG4gICAgICogQHBhcmFtIGZpbGVJbmZvIFxyXG4gICAgICovXHJcbiAgICBASG9zdExpc3RlbmVyKCdmaWxlRG93bmxvYWRFdmVudCcsIFsnJGV2ZW50J10pXHJcbiAgICBmaWxlRG93bmxvYWRFdmVudEhhbmRsZXIoZG93bmxvYWRFdikge1xyXG4gICAgICAgIC8vIOWmguaenOaYr+aJuemHj+S4i+i9vSwgZG93bmxvYWRFdj17ZmlsZUluZm9zOltdLG5hbWU6fVxyXG4gICAgICAgIGlmIChkb3dubG9hZEV2JiZkb3dubG9hZEV2WydmaWxlSW5mb3MnXS5sZW5ndGg+MCkge1xyXG4gICAgICAgICAgICBpZiAoZG93bmxvYWRFdlsnZmlsZUluZm9zJ10ubGVuZ3RoPjEpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMucHJldmlld1Nlci5tdWx0aURvd25sb2FkRmlsZXNXaWR0aE5hbWUoZG93bmxvYWRFdlsnZmlsZUluZm9zJ10sZG93bmxvYWRFdlsnbmFtZSddLCB0aGlzLmV4dGVuZFNlcnZlckNvbmZpZyk7XHJcbiAgICAgICAgICAgIH1lbHNle1xyXG4gICAgICAgICAgICAgICAgdGhpcy5wcmV2aWV3U2VyLmRvd25sb2FkRmlsZShkb3dubG9hZEV2WydmaWxlSW5mb3MnXVswXSwgdGhpcy5leHRlbmRTZXJ2ZXJDb25maWcpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSAgICAgICAgXHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDlpITnkIbmianlsZXnmoTmnI3liqHlmajnq6/phY3nva5cclxuICAgICAqL1xyXG4gICAgcHJpdmF0ZSBfZXh0ZW5kU2VydmVDb25maWc9bnVsbDtcclxuICAgIEBJbnB1dCgpIFxyXG4gICAgc2V0IGV4dGVuZFNlcnZlckNvbmZpZyh2YWx1ZSl7XHJcbiAgICAgICAgdGhpcy5fZXh0ZW5kU2VydmVDb25maWc9dmFsdWU7XHJcbiAgICAgICAgdGhpcy5wcmV2aWV3U2VyLnNldFByZXZpd0V4dGVuZFNlcnZlckNvbmZpZyh2YWx1ZSk7XHJcbiAgICB9IFxyXG4gICAgZ2V0IGV4dGVuZFNlcnZlckNvbmZpZygpe1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9leHRlbmRTZXJ2ZUNvbmZpZztcclxuICAgIH1cclxuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgcHJldmlld1NlcjogRmZpbGVwcmV2aWV3QWRhcHRVbmlmaWxlU2VydmljZSkge1xyXG5cclxuICAgIH1cclxuXHJcbn1cclxuIl19