/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { DatagridComponent } from './../datagrid.component';
import { Injectable } from '@angular/core';
import { delay } from 'rxjs/operators';
export class SelectionModeService {
    /**
     * @param {?} grid
     */
    constructor(grid) {
        this.dgRef = null;
        this.oldSettings = null;
        this.selectStartEvent = null;
        this.events = null;
        this.dgRef = grid;
        if (this.dgRef.selectionMode === 'default') {
            grid.zone.runOutsideAngular((/**
             * @return {?}
             */
            () => {
                this.removeEvents();
                this.events = this.registerStopSelectionEvent();
            }));
        }
    }
    /**
     * @return {?}
     */
    destroy() {
        this.dgRef = null;
        this.removeEvents();
    }
    /**
     * @return {?}
     */
    removeEvents() {
        if (this.events && this.events.length) {
            this.events.forEach((/**
             * @param {?} e
             * @return {?}
             */
            e => {
                e();
            }));
            this.events = null;
        }
    }
    /**
     * @return {?}
     */
    toggleMode() {
        if (this.dgRef) {
            if (this.dgRef.selectionMode === 'default') {
                this.enableWindowsSelectionMode();
            }
            else {
                this.restoreSettings();
            }
        }
    }
    /**
     * @return {?}
     */
    enableWindowsSelectionMode() {
        if (this.dgRef) {
            this.oldSettings = {
                showCheckbox: this.dgRef.showCheckbox,
                keepSelect: this.dgRef.keepSelect,
                onlySelectSelf: this.dgRef.onlySelectSelf,
                selectOnCheck: this.dgRef.selectOnCheck,
                checkOnSelect: this.dgRef.checkOnSelect
            };
            this.dgRef.showCheckbox = true;
            this.dgRef.keepSelect = true;
            this.dgRef.onlySelectSelf = false;
            this.dgRef.selectOnCheck = true;
            this.dgRef.checkOnSelect = true;
            this.dgRef.dfs.updateProperty('keepSelect', true);
            this.dgRef.dfs.updateProperty('onlySelectSelf', false);
            this.dgRef.dfs.updateProperty('selectOnCheck', true);
            this.dgRef.dfs.updateProperty('checkOnSelect', true);
        }
    }
    /**
     * @return {?}
     */
    restoreSettings() {
        if (this.dgRef && this.oldSettings) {
            this.dgRef.showCheckbox = this.oldSettings.showCheckbox;
            this.dgRef.keepSelect = this.oldSettings.keepSelect;
            this.dgRef.onlySelectSelf = this.oldSettings.onlySelectSelf;
            this.dgRef.selectOnCheck = this.oldSettings.selectOnCheck;
            this.dgRef.checkOnSelect = this.oldSettings.checkOnSelect;
            this.dgRef.dfs.updateProperty('keepSelect', this.oldSettings.keepSelect);
            this.dgRef.dfs.updateProperty('onlySelectSelf', this.oldSettings.onlySelectSelf);
            this.dgRef.dfs.updateProperty('selectOnCheck', this.oldSettings.selectOnCheck);
            this.dgRef.dfs.updateProperty('checkOnSelect', this.oldSettings.checkOnSelect);
        }
    }
    /**
     * @private
     * @return {?}
     */
    registerStopSelectionEvent() {
        /** @type {?} */
        const kd = this.dgRef.render2.listen(document, 'keydown', (/**
         * @param {?} event
         * @return {?}
         */
        (event) => {
            if (event.ctrlKey || event.shiftKey) {
                this.unselectable();
            }
        }));
        /** @type {?} */
        const ku = this.dgRef.render2.listen(document, 'keyup', (/**
         * @param {?} event
         * @return {?}
         */
        (event) => {
            if (event.ctrlKey || event.shiftKey || event.keyCode === 17 || event.keyCode === 16) {
                this.enableSelectable();
            }
        }));
        return [kd, ku];
    }
    /**
     * @private
     * @return {?}
     */
    unselectable() {
        this.dgRef.render2.setAttribute(this.dgRef.dgContainer.nativeElement, 'unselectable', 'on');
        this.dgRef.render2.setAttribute(this.dgRef.dgContainer.nativeElement, 'onselectstart', 'return false');
        this.dgRef.render2.setStyle(this.dgRef.dgContainer.nativeElement, '-moz-user-select', 'none');
    }
    /**
     * @private
     * @return {?}
     */
    enableSelectable() {
        this.dgRef.render2.removeAttribute(this.dgRef.dgContainer.nativeElement, 'unselectable');
        this.dgRef.render2.removeAttribute(this.dgRef.dgContainer.nativeElement, 'onselectstart');
        this.dgRef.render2.removeStyle(this.dgRef.dgContainer.nativeElement, '-moz-user-select');
    }
    /**
     * @param {?} param
     * @return {?}
     */
    beforRowClick(param) {
        if (this.dgRef && this.dgRef.selectionMode === 'default') {
            /** @type {?} */
            const isSelected = this.dgRef.dfs.isRowSelected(param.id);
            /** @type {?} */
            const isCtrlKey = param.e.ctrlKey;
            /** @type {?} */
            const isShiftKey = param.e.shiftKey;
            this.dgRef.endEditing();
            if (!isCtrlKey && !isShiftKey) {
                if (!isSelected) {
                    this.dgRef.clearCheckeds();
                }
                else {
                    // 如果有多条选，移除其他选中行
                    /** @type {?} */
                    const currentPagerIds = this.dgRef.getRows().map((/**
                     * @param {?} n
                     * @return {?}
                     */
                    n => n.id));
                    /** @type {?} */
                    const unCheckIDs = this.dgRef.checkValues.filter((/**
                     * @param {?} i
                     * @return {?}
                     */
                    i => currentPagerIds.includes(i) && i != param.id));
                    /** @type {?} */
                    const unSelectIds = this.dgRef.checkValues.filter((/**
                     * @param {?} n
                     * @return {?}
                     */
                    n => !currentPagerIds.includes(n)));
                    // const unCheckIDs = this.dgRef.checkValues.filter(n => n != param.id);
                    if (unCheckIDs && unCheckIDs.length) {
                        this.dgRef.unCheckRows(unCheckIDs, true);
                        this.dgRef.clearSelections([param.id, ...unSelectIds]);
                    }
                }
            }
            else {
                if (isShiftKey) {
                    /** @type {?} */
                    let focusIndex = this.dgRef.focusRowIndex;
                    if (focusIndex === -1) {
                        focusIndex = 0;
                    }
                    /** @type {?} */
                    const endIndex = param.rowIndex;
                    /** @type {?} */
                    let start = focusIndex;
                    /** @type {?} */
                    let end = endIndex;
                    if (focusIndex > endIndex) {
                        start = endIndex;
                        end = focusIndex;
                    }
                    /** @type {?} */
                    const data = this.dgRef.getRows();
                    /** @type {?} */
                    const checkedItems = [...data].splice(start, end - start + 1);
                    /** @type {?} */
                    const willCheckIds = checkedItems.map((/**
                     * @param {?} n
                     * @return {?}
                     */
                    n => {
                        return this.dgRef.dfs.primaryId(n);
                    }));
                    if (!isCtrlKey) {
                        this.dgRef.clearCheckeds(false, false);
                    }
                    // this.dgRef.selectValues = willCheckIds;
                    this.dgRef.checkRows(willCheckIds, true);
                    return true;
                }
            }
            if (isSelected && isCtrlKey) {
                param.e.stopPropagation();
                // 执行取消选择
                this.dgRef.unCheckRow(param.id);
                return true;
            }
            this.dgRef.beforeSelect(param).pipe(delay(100)).subscribe((/**
             * @param {?} canSelect
             * @return {?}
             */
            (canSelect) => {
                if (canSelect) {
                    this.dgRef.dfs.selectRow(param.rowIndex, param.rowData);
                    if (this.dgRef.selectedRow) {
                        this.dgRef.selectedRow.dr = param.dr;
                    }
                }
                this.dgRef.rowClick.emit({ data: param.rowData, grid: this.dgRef, dblclick: false });
                this.dgRef.dgs.setSelecedRow.emit({ selected: true, id: this.dgRef.dfs.primaryId(param.rowData) });
            }));
            return true;
        }
        return false;
    }
    /**
     * @return {?}
     */
    endRowClick() {
        if (this.dgRef && this.dgRef.selectionMode === 'default') {
            this.dgRef.checkOnSelect = false;
        }
    }
}
SelectionModeService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
SelectionModeService.ctorParameters = () => [
    { type: DatagridComponent }
];
if (false) {
    /** @type {?} */
    SelectionModeService.prototype.dgRef;
    /**
     * @type {?}
     * @private
     */
    SelectionModeService.prototype.oldSettings;
    /**
     * @type {?}
     * @private
     */
    SelectionModeService.prototype.selectStartEvent;
    /**
     * @type {?}
     * @private
     */
    SelectionModeService.prototype.events;
}
//# sourceMappingURL=data:application/json;base64,