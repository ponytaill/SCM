/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, HostBinding, Input, Output, EventEmitter, Injector } from '@angular/core';
import { MessagerService } from '@farris/ui-messager';
import { cloneDeep } from 'lodash-es';
import { SortTypes, SortType } from '@farris/ui-common/types';
import { DomSanitizer } from '@angular/platform-browser';
import { LocaleService } from '@farris/ui-locale';
export class SortEditorComponent {
    /**
     * @param {?} messagerService
     * @param {?} sanitizer
     * @param {?} injector
     */
    constructor(messagerService, sanitizer, injector) {
        this.messagerService = messagerService;
        this.sanitizer = sanitizer;
        this.injector = injector;
        this.sortTypes = SortTypes;
        this.columnSizeData = [30, 120, 60];
        this.cls = 'f-sort-editor f-utils-flex-column f-utils-absolute-all';
        this.fieldEditor = { type: 'select', options: null };
        this.conditions = [];
        this.columns = [];
        this.sortsChanged = new EventEmitter();
        this.newCondition = {
            sortField: '',
            sortType: SortType.Asc,
        };
        this.currentCondition = null;
        this.localeService = this.injector.get(LocaleService);
        this.sortTypes = [
            { label: this.localeService.getValue('sortEditor.asc'), value: SortType.Asc },
            { label: this.localeService.getValue('sortEditor.desc'), value: SortType.Desc }
        ];
    }
    /**
     * @return {?}
     */
    ngOnInit() { }
    /**
     * @param {?} $event
     * @return {?}
     */
    selected($event) {
        this.currentCondition = $event;
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    isSelected($event) {
        if (this.currentCondition) {
            return this.currentCondition.index === $event;
        }
        return false;
    }
    /**
     * @param {?} index
     * @return {?}
     */
    insertCondition(index) {
        /** @type {?} */
        const _newCondition = Object.assign({}, this.newCondition);
        if (index === 0) {
            this.conditions = [_newCondition, ...this.conditions];
        }
        else {
            /** @type {?} */
            const _data = cloneDeep(this.conditions);
            _data.splice(index, 0, _newCondition);
            this.conditions = [..._data];
        }
        this.changeConditionList('insert');
    }
    /**
     * @param {?} index
     * @return {?}
     */
    removeCondition(index) {
        this.conditions.splice(index, 1);
        // this.conditions = [...this.conditions];
        this.changeConditionList('remove');
        if (this.currentCondition) {
            if (index === this.currentCondition.index) {
                this.currentCondition = null;
            }
        }
    }
    /**
     * @return {?}
     */
    onAdd() {
        this.conditions = [...this.conditions, Object.assign({}, this.newCondition)];
        this.changeConditionList('add');
    }
    /**
     * @return {?}
     */
    onClear() {
        this.messagerService.question('确认要清空当前所有排序字段吗？', (/**
         * @return {?}
         */
        () => {
            this.conditions = [];
            this.changeConditionList('clear');
        }));
    }
    /**
     * @return {?}
     */
    onMoveTop() {
        if (this.currentCondition) {
            this.conditions.unshift(this.currentCondition.condition);
            this.conditions.splice(this.currentCondition.index + 1, 1);
            this.currentCondition.index = 0;
            this.changeConditionList('moveTop');
        }
    }
    /**
     * @return {?}
     */
    onMovePrev() {
        if (this.currentCondition) {
            /** @type {?} */
            const index = this.currentCondition.index;
            /** @type {?} */
            const tempArr = this.conditions.splice(index, 1);
            this.conditions.splice(index - 1, 0, ...tempArr);
            this.currentCondition.index = index - 1;
            this.changeConditionList('movePrev');
        }
    }
    /**
     * @return {?}
     */
    onMoveNext() {
        if (this.currentCondition) {
            /** @type {?} */
            const index = this.currentCondition.index;
            /** @type {?} */
            const tempArr = this.conditions.splice(index, 1);
            this.conditions.splice(index + 1, 0, ...tempArr);
            this.currentCondition.index = index + 1;
            this.changeConditionList('moveNext');
        }
    }
    /**
     * @return {?}
     */
    onMoveBottom() {
        if (this.currentCondition) {
            this.conditions.push(this.currentCondition.condition);
            this.conditions.splice(this.currentCondition.index, 1);
            this.currentCondition.index = this.conditions.length - 1;
            this.changeConditionList('moveBottom');
        }
    }
    /**
     * @return {?}
     */
    canUse() {
        if (this.currentCondition) {
            return this.conditions.length > 1;
        }
        return false;
    }
    /**
     * @return {?}
     */
    canMoveUp() {
        if (this.canUse()) {
            return this.currentCondition.index > 0;
        }
        return false;
    }
    /**
     * @return {?}
     */
    canMoveDown() {
        if (this.canUse()) {
            return this.currentCondition.index < this.conditions.length - 1;
        }
        return false;
    }
    /**
     * @private
     * @param {?} action
     * @return {?}
     */
    changeConditionList(action) {
        this.sortsChanged.emit({ action, data: this.conditions });
    }
}
SortEditorComponent.decorators = [
    { type: Component, args: [{
                selector: 'sort-editor',
                template: "<div class=\"table-header \" style=\"max-height: 35px;\">\r\n    <table class=\"table table-bordered sort-col-header\" style=\"margin-bottom: 0\">\r\n        <colgroup>\r\n            <col *ngFor=\"let s of columnSizeData\" [width]=\" s + 'px'\">\r\n        </colgroup>\r\n        <thead>\r\n            <tr>\r\n                <th></th>\r\n                <th>&nbsp;<b>{{ 'sortEditor.field'| locale }}</b></th>\r\n                <th>&nbsp;<b>{{ 'sortEditor.order'| locale }}</b></th>\r\n            </tr>\r\n        </thead>\r\n    </table>\r\n</div>\r\n<div class=\"table-body flex-fill\" style=\"overflow: hidden\" #tablebodybox>\r\n    <perfect-scrollbar [config]=\"{}\" style=\"height: 100%\">\r\n        <table class=\"table table-bordered\" style=\"margin: 0;\">\r\n            <colgroup>\r\n                <col *ngFor=\"let s of columnSizeData\" [width]=\" s + 'px'\">\r\n            </colgroup>\r\n            <tbody>\r\n                <tr *ngFor=\"let condition of conditions; let index=index;\" (click)=\"selected({'index':index, 'condition': condition})\" [class.selected]=\"isSelected(index)\" >\r\n                    <td style=\"padding-left: 0; padding-right: 0; text-align: center\">\r\n                        <button type=\"button\" (click)=\"insertCondition(index)\" class=\"k-button k-button-icon k-flat\"><span class=\"k-icon k-i-plus\"></span></button>\r\n                        <button type=\"button\" (click)=\"removeCondition(index)\" class=\"k-button k-button-icon k-flat\"><span class=\"k-icon k-i-minus\"></span></button>\r\n                    </td>\r\n                    <td>\r\n                        <select *ngIf=\"fieldEditor.type === 'select'\" class=\"form-control filter-select\" [(ngModel)]=\"condition.sortField\" name=\"sortField\">\r\n                            <option *ngFor=\"let col of columns\" [value]=\"col.value\">{{ col.label }}</option>\r\n                        </select>\r\n\r\n                        <farris-combo-lookup *ngIf=\"fieldEditor.type === 'combo-tree'\" name=\"sortField\"\r\n                            [idField]=\"fieldEditor?.options?.idField ||'value'\"\r\n                            [textField]=\"fieldEditor?.options?.textField ||'label'\"\r\n                            [displayType]=\"'LOOKUPTREELIST'\" [useValue]=\"true\"\r\n                            [useTreeView]=\"true\"\r\n                            [columns]=\"fieldEditor?.options?.columns || []\"\r\n                            [data]=\"columns\"\r\n                            [(ngModel)]=\"condition.sortField\"\r\n                            [remoteSearch]=\"false\"\r\n                            [autoWidth]=\"fieldEditor?.options?.autoWidth\"\r\n                            [panelWidth]=\"fieldEditor?.options?.panelWidth || 200\"\r\n                        >\r\n                        </farris-combo-lookup>\r\n\r\n                    </td>\r\n                    <td>\r\n                        <select class=\"form-control filter-select\" [(ngModel)]=\"condition.sortType\" name=\"sortType\">\r\n                            <option *ngFor=\"let item of sortTypes\" [value]=\"item.value\">{{ item.label }}</option>\r\n                        </select>\r\n                    </td>\r\n                </tr>\r\n            </tbody>\r\n        </table>\r\n    </perfect-scrollbar>\r\n</div>\r\n<div class=\"footer-container\" style=\"max-height: 32px;flex-shrink: 0; \">\r\n    <button type=\"button\" (click)=\"onAdd()\"\r\n        class=\"k-button k-button-icontext k-flat \"><span class=\"f-icon f-icon-add\"></span> {{ 'sortEditor.add'| locale }}</button>\r\n    <button type=\"button\" (click)=\"onClear()\" [disabled]=\"!conditions.length\"\r\n        class=\"k-button k-button-icontext k-flat \"><span class=\"f-icon f-icon-close\"></span> {{ 'sortEditor.clear'| locale }}</button>\r\n    <button type=\"button\" [disabled]=\"!canMoveUp()\" (click)=\"onMoveTop()\"\r\n        class=\"k-button k-button-icontext k-flat \"><span class=\"f-icon f-icon-arrow-end-up\"></span> {{ 'sortEditor.moveTop'| locale }}</button>\r\n    <button type=\"button\" [disabled]=\"!canMoveUp()\" (click)=\"onMovePrev()\"\r\n        class=\"k-button k-button-icontext k-flat \"><span class=\"f-icon f-icon-arrow-60-up\"></span> {{ 'sortEditor.moveUp'| locale }}</button>\r\n    <button type=\"button\" [disabled]=\"!canMoveDown()\" (click)=\"onMoveNext()\"\r\n        class=\"k-button k-button-icontext k-flat \"><span class=\"f-icon f-icon-arrow-60-down\"></span> {{ 'sortEditor.moveDown'| locale }}</button>\r\n    <button type=\"button\" [disabled]=\"!canMoveDown()\" (click)=\"onMoveBottom()\"\r\n        class=\"k-button k-button-icontext k-flat\"><span class=\"f-icon f-icon-arrow-end-down\"></span> {{ 'sortEditor.moveBottom'| locale }}</button>\r\n</div>",
                styles: [`
        .sort-col-header thead th { padding: 0; line-height: 35px;}
        .filter-select { width:100%; padding-left: 0; padding-right: 0; }
        .selected { background: #c2e4ff; }
        `]
            }] }
];
/** @nocollapse */
SortEditorComponent.ctorParameters = () => [
    { type: MessagerService },
    { type: DomSanitizer },
    { type: Injector }
];
SortEditorComponent.propDecorators = {
    cls: [{ type: HostBinding, args: ['class',] }],
    fieldEditor: [{ type: Input }],
    conditions: [{ type: Input }],
    columns: [{ type: Input }],
    height: [{ type: Input }],
    sortsChanged: [{ type: Output }]
};
if (false) {
    /** @type {?} */
    SortEditorComponent.prototype.sortTypes;
    /** @type {?} */
    SortEditorComponent.prototype.columnSizeData;
    /** @type {?} */
    SortEditorComponent.prototype.cls;
    /** @type {?} */
    SortEditorComponent.prototype.fieldEditor;
    /** @type {?} */
    SortEditorComponent.prototype.conditions;
    /** @type {?} */
    SortEditorComponent.prototype.columns;
    /** @type {?} */
    SortEditorComponent.prototype.height;
    /** @type {?} */
    SortEditorComponent.prototype.sortsChanged;
    /**
     * @type {?}
     * @private
     */
    SortEditorComponent.prototype.newCondition;
    /** @type {?} */
    SortEditorComponent.prototype.currentCondition;
    /** @type {?} */
    SortEditorComponent.prototype.localeService;
    /**
     * @type {?}
     * @private
     */
    SortEditorComponent.prototype.messagerService;
    /**
     * @type {?}
     * @private
     */
    SortEditorComponent.prototype.sanitizer;
    /**
     * @type {?}
     * @private
     */
    SortEditorComponent.prototype.injector;
}
//# sourceMappingURL=data:application/json;base64,