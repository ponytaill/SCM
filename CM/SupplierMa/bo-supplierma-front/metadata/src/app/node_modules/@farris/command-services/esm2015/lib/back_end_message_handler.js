import { Inject, Injectable, Injector } from '@angular/core';
import { FrameContext, TranslateToken } from '@farris/devkit';
/**
 * 后端消息处理服务
 * @description
 * ### 服务注入位置
 *  1、整个表单的root-component
 *  2、弹出窗口的root-component
 */
export class BackEndMessageHandler {
    constructor(injector, frameContext, translate) {
        this.injector = injector;
        this.frameContext = frameContext;
        this.translate = translate;
    }
    /**
     * 处理后端返回的消息或错误
     * @param message 消息或错误
     */
    handle(message, context) {
        const isException = context && context.isException || false;
        const hasThrowError = context && context.hasThrowError || false;
        const eventBus = context && context.eventBus || null;
        const error = context && context.error || null;
        const formAppContext = context && context.formAppContext || null;
        const result = this.collect(message, isException, hasThrowError, eventBus, error, formAppContext);
        if (result && result.form && result.form.length > 0) {
            result.form.forEach((item) => {
                item.frameContext.viewModel.form.updateFormErrors(item.message, true, 'backend');
            });
        }
        else {
            this.resetFormMessage(message.context.appContext, message.context.ns);
        }
        const targetFrameContext = this.findTargetFrameContext(this.frameContext);
        if (result && result.all && result.all.length > 0) {
            targetFrameContext.viewModel.verifycationChanged.next(result.all);
        }
        else {
            if (result !== null) {
                targetFrameContext.viewModel.verifycationChanged.next([]);
            }
        }
    }
    /**
     * 收集汇总信息和form信息
     * @param backEndMessage
     */
    collect(backEndMessage, isException = false, hasThrowError = false, eventBus = null, error = null, formAppContext = null) {
        const bizMessages = backEndMessage && backEndMessage.bizMessages || null;
        const appContext = backEndMessage && backEndMessage.context.appContext;
        const ns = backEndMessage.context.ns;
        if (!bizMessages || bizMessages.length < 1) {
            return null;
        }
        const result = {
            form: [],
            all: []
        };
        let hasFormlessError = false;
        for (let bizMessage of bizMessages) {
            const message = bizMessage.message;
            const location = bizMessage.location || null;
            const columns = location && location.columns || null;
            const nodeCode = location && location.nodeCode || null;
            const rows = location && location.rows;
            const bindingPath = this.getBindingPath(appContext, ns, nodeCode);
            const bindingPaths = bindingPath && bindingPath.split('/').filter(p => p);
            // 目前仅处理有location，且有id、列名、表名的。
            if (!location || !columns || columns.length < 1 || !nodeCode || !rows || rows.length < 1) {
                continue;
            }
            // 遍历数据行
            for (let row of rows) {
                for (let column of columns) {
                    // 获取到所有绑定该列数据的frameContext
                    let frameContexts = this.getFrameContextsByBindingPathAndColumnName(appContext, ns, bindingPath, column);
                    if (!frameContexts || frameContexts.length < 1) {
                        // 没有任何一个组件绑定该列的数据
                        hasFormlessError = true;
                        continue;
                    }
                    // 排除掉只读datagrid
                    frameContexts = frameContexts.filter((frameContext) => {
                        const isDataGridComponent = this.isDataGridComponent(frameContext.frameComponent);
                        if (isDataGridComponent) {
                            const isReadonlyDataGrid = this.isReadonlyDataGrid(frameContext.frameComponent);
                            if (isReadonlyDataGrid) {
                                return false;
                            }
                            else {
                                return true;
                            }
                        }
                        return true;
                    });
                    // 遍历的行是否为当前行
                    const isCurrentRow = this.isCurrentRow(appContext, ns, bindingPath, row);
                    // 如果是当前行的话需要将错误信息放到form中
                    if (isCurrentRow) {
                        // 忽略grid
                        // const formFrameContexts = frameContexts.filter(frameContext => !this.isGridComponent(frameContext.frameComponent));
                        if (frameContexts && frameContexts.length > 0) {
                            frameContexts.forEach((frameContext) => {
                                // 只处理了一个组件中列只绑定到一个前端控件的场景
                                const formControls = this.getFormControlByColumnName(frameContext, column);
                                if (formControls && formControls.length > 0) {
                                    formControls.forEach(([domPropertyName, formControl]) => {
                                        //const domPropertyName = formControl && formControl. || null;
                                        this.mergeMessage(result.form, frameContext, domPropertyName, message);
                                    });
                                }
                                //if (formControl && domPropertyName) {
                                //}
                            });
                        }
                        else {
                        }
                    }
                    // 将错误信息放到汇总中
                    frameContexts.forEach((frameContext) => {
                        const viewModelName = frameContext.viewModel.form.formGroupName;
                        const formControls = this.getFormControlByColumnName(frameContext, column);
                        if (formControls && formControls.length > 0) {
                            const [domPropertyName, formControl] = formControls.find(([propertyName, formControl]) => propertyName && propertyName.length > 0);
                            // const domPropertyName = domProperty && domProperty.propertyName;
                            const bindingList = frameContext.viewModel.bindingData.getValue(bindingPaths);
                            let index = bindingList.getIndexById(row);
                            const primary = `${row}_${column}_${message}`;
                            // TODO:虽然能纠正汇总消息显示重复的问题，但可能导致点击错误无法定位到对应控件的问题，待后续优化
                            if (index >= 0 && result.all.findIndex(p => p.id === primary) === -1) {
                                // 数据源中有多于1行时显示索引
                                const position = (bindingList && bindingList.length > 1) ? (index + 1) : -1;
                                const title = this.buildItemTitle(viewModelName, formControl.name || formControl.defaultI18nValue || domPropertyName, position);
                                const item = {
                                    id: primary,
                                    index,
                                    targetField: formControl.id,
                                    title,
                                    msg: message,
                                    namespace: ns,
                                    bindingPath,
                                    type: 'error'
                                };
                                result.all.push(item);
                            }
                        }
                    });
                }
            }
        }
        if (hasFormlessError && isException && !hasThrowError && eventBus) {
            eventBus.post('Exception', '', 'onException', error, formAppContext);
        }
        return result;
    }
    mergeMessage(formItems, frameContext, domPropertyName, message) {
        const targetItem = formItems.find(item => item.frameContext.frameId === frameContext.frameId);
        if (targetItem) {
            const isPropertyExist = targetItem.message && Object.keys(targetItem.message).includes(domPropertyName);
            const messageType = `backend-message-${Object.keys(targetItem.message).length + 1}`;
            if (isPropertyExist) {
                targetItem.message[domPropertyName]['errors'][messageType] = { name: message };
            }
            else {
                targetItem.message[domPropertyName] = { errors: { [messageType]: { name: message } } };
            }
        }
        else {
            formItems.push({
                frameContext: frameContext,
                message: {
                    [domPropertyName]: {
                        errors: {
                            'backend-message-1': { name: message }
                        }
                    }
                }
            });
        }
    }
    buildItemTitle(viewModelName, propertyName, index) {
        const template = {
            'zh-CHS': {
                viewModelName: `$viewModel`,
                index: `第 $index 行`,
                propertyName: `- $propertyName`
            },
            'en': {
                viewModelName: `$viewModel`,
                index: `row $index`,
                propertyName: `- $propertyName`
            },
            'zh-CHT': {
                viewModelName: `$viewModel`,
                index: `第 $index 行`,
                propertyName: `- $propertyName`
            }
        };
        const currentLanguage = this.translate.getCurrentLanguage() || 'zh-CHS';
        const message = [];
        if (viewModelName) {
            message.push(template[currentLanguage]['viewModelName'].replace('$viewModel', viewModelName));
        }
        if (index > 0) {
            message.push(template[currentLanguage]['index'].replace('$index', index));
        }
        if (propertyName) {
            message.push(template[currentLanguage]['propertyName'].replace('$propertyName', propertyName));
        }
        return message.join(' ');
    }
    /**
     * 根据表名或nodeCode获取绑定路径
     * @param appContext appContext
     * @param ns ns
     * @param nodeCode 表名
     */
    getBindingPath(appContext, ns, nodeCode) {
        const frameContext = this.getFrameContext(appContext, ns);
        return frameContext.repository.entityTypeInfo.getBindingPathByTableName(nodeCode);
    }
    /**
     * 通过绑定路径和列名找到所有符合条件的视图模型(包括grid和form)
     * @param appContext appContext
     * @param ns namespace
     * @param bindingPath 绑定路径
     * @param columnName 列名
     */
    getFrameContextsByBindingPathAndColumnName(appContext, ns, bindingPath, columnName) {
        let frameContexts = appContext.frameContextManager.getFrameContexts();
        if (frameContexts && frameContexts.length > 0) {
            // 找到form中有控件的frameContext
            frameContexts = frameContexts.filter((frameContext) => {
                // 基本条件是否满足
                let isValidFrameContext = frameContext.namespace === ns && frameContext.viewModel.bindingPath === bindingPath && frameContext.viewModel.form && frameContext.viewModel.form.controls && Object.keys(frameContext.viewModel.form.controls).length > 0;
                if (!isValidFrameContext) {
                    return false;
                }
                // 再通过列名过滤
                const bindingPaths = bindingPath.split('/').filter(p => p);
                const dataTypeInfo = frameContext.repository.entityTypeInfo.getTypeInfoByPath(bindingPaths);
                if (dataTypeInfo) {
                    const dataPropInfos = Array.from(dataTypeInfo.propInfoMap.values());
                    // 从当前实体属性中找到数据字段为列名的属性
                    const entityPropertyInfo = dataPropInfos.find((propInfo) => propInfo.metadataInfo && (propInfo.metadataInfo.originalDataField === columnName || propInfo.metadataInfo.dataField === columnName));
                    if (entityPropertyInfo) {
                        const entityPropertyName = entityPropertyInfo.name;
                        const ngFormControl = Object.values(frameContext.viewModel.form.ngFormControls).find(item => item.binding === entityPropertyName);
                        if (ngFormControl) {
                            return true;
                        }
                        else {
                            const item = Object.keys(frameContext.viewModel.form.ngFormControls).find(key => key === entityPropertyName);
                            return item ? true : false;
                        }
                    }
                    else {
                        return false;
                    }
                }
                else {
                    return false;
                }
            });
            return frameContexts;
        }
        return null;
    }
    /**
     * 是否为datagrid组件
     * @param frameComponent component
     */
    isDataGridComponent(frameComponent) {
        const columnNames = frameComponent.context.viewModel['dataGridColumnsName'] || null;
        return columnNames ? true : false;
    }
    /**
     * grid组件是否是只读的
     * @param frameComponent frameComponent
     * @returns
     */
    isReadonlyDataGrid(frameComponent) {
        const frameContext = frameComponent.context;
        const dataGridColumnsName = frameContext.viewModel['dataGridColumnsName'] || null;
        if (dataGridColumnsName) {
            const datagridColumns = frameContext.viewModel[dataGridColumnsName];
            return datagridColumns.every((group) => {
                return group.every(item => !item.editor);
            });
        }
        else {
            throw new Error(`传入的组件不是一个表格！`);
        }
    }
    /**
     * id是否为当前行
     * @param appContext appContext
     * @param ns namespace
     * @param bindingPath bindingPath
     * @param id id
     */
    isCurrentRow(appContext, ns, bindingPath, id) {
        const bindingPaths = bindingPath.split('/').filter(p => p);
        const frameContext = this.getFrameContext(appContext, ns);
        const bindingData = frameContext.bindingData;
        const bindingList = bindingData.getValue(bindingPaths);
        return bindingList.currentItem.primaryKeyValue === id;
    }
    /**
     * 获取当前ns下的rootFrameContext
     * @param appContext appcontext
     * @param ns namespace
     */
    getFrameContext(appContext, ns) {
        const frameContexts = appContext.frameContextManager.getFrameContexts();
        if (frameContexts && frameContexts.length > 0) {
            const randomFrameContext = frameContexts.find(frameContext => frameContext.namespace === ns);
            if (randomFrameContext) {
                const virtualRootFrameContext = randomFrameContext.getVirtualRootFrameContext();
                return virtualRootFrameContext;
            }
        }
        return null;
    }
    /**
     * 通过绑定路径和列名获取绑定到该列的formControl
     */
    getFormControlByColumnName(frameContext, columnName) {
        const bindingPaths = frameContext.viewModel.bindingPath.split('/').filter(p => p);
        // 通过bindingPath找到对应的实体信息
        const typeInfo = frameContext.repository.entityTypeInfo.getTypeInfoByPath(bindingPaths);
        const propsInfo = Array.from(typeInfo.propInfoMap.values());
        const propInfo = propsInfo.find((propInfo) => propInfo.metadataInfo && (propInfo.metadataInfo.originalDataField === columnName || propInfo.metadataInfo.dataField === columnName));
        if (propInfo) {
            const mappingName = propInfo.name;
            const formControls = Object.entries(frameContext.viewModel.form.ngFormControls).filter((item) => item[1].binding === mappingName || item[0] === mappingName);
            // const ngFormControl = Object.values(frameContext.viewModel.form.ngFormControls).find(item => item.binding === mappingName);
            if (formControls) {
                return formControls;
            }
        }
        return null;
    }
    resetFormMessage(appContext, ns) {
        const frameContexts = appContext.frameContextManager.getFrameContexts().filter(frameContext => frameContext.namespace === ns);
        frameContexts.forEach(frameContext => frameContext && frameContext.viewModel && frameContext.viewModel.form && frameContext.viewModel.form.clearBackendError());
    }
    /**
     * 递归找到展示消息的组件上下文
     * @param frameContext frameContext
     */
    findTargetFrameContext(frameContext) {
        const virtualRootFrameContext = frameContext.getVirtualRootFrameContext();
        const virtualRootComponent = virtualRootFrameContext.frameComponent;
        const isDialogComponent = virtualRootComponent && virtualRootComponent['isDialogRootComponent'] || false;
        if (isDialogComponent) {
            // 如果消息处理服务是弹窗内的，则消息提示展示在弹窗内
            return virtualRootFrameContext;
        }
        else {
            // 当前消息服务不在弹窗内，递归向上查找，找到第一个弹窗，如果找不到则找到最上的root-component
            const parentFrameContext = virtualRootFrameContext.parent;
            if (parentFrameContext) {
                return this.findTargetFrameContext(parentFrameContext);
            }
            else {
                return virtualRootFrameContext;
            }
        }
    }
}
BackEndMessageHandler.decorators = [
    { type: Injectable }
];
/** @nocollapse */
BackEndMessageHandler.ctorParameters = () => [
    { type: Injector },
    { type: FrameContext },
    { type: undefined, decorators: [{ type: Inject, args: [TranslateToken,] }] }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmFja19lbmRfbWVzc2FnZV9oYW5kbGVyLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGZhcnJpcy9jb21tYW5kLXNlcnZpY2VzLyIsInNvdXJjZXMiOlsibGliL2JhY2tfZW5kX21lc3NhZ2VfaGFuZGxlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsTUFBTSxFQUFFLFVBQVUsRUFBRSxRQUFRLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDN0QsT0FBTyxFQUFtRixZQUFZLEVBQTRCLGNBQWMsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQ3pLOzs7Ozs7R0FNRztBQUVILE1BQU0sT0FBTyxxQkFBcUI7SUFDaEMsWUFBb0IsUUFBa0IsRUFBVSxZQUEwQixFQUFrQyxTQUFvQjtRQUE1RyxhQUFRLEdBQVIsUUFBUSxDQUFVO1FBQVUsaUJBQVksR0FBWixZQUFZLENBQWM7UUFBa0MsY0FBUyxHQUFULFNBQVMsQ0FBVztJQUFJLENBQUM7SUFDckk7OztPQUdHO0lBQ0ksTUFBTSxDQUFDLE9BQWdDLEVBQUUsT0FBWTtRQUMxRCxNQUFNLFdBQVcsR0FBRyxPQUFPLElBQUksT0FBTyxDQUFDLFdBQVcsSUFBSSxLQUFLLENBQUM7UUFDNUQsTUFBTSxhQUFhLEdBQUcsT0FBTyxJQUFJLE9BQU8sQ0FBQyxhQUFhLElBQUksS0FBSyxDQUFDO1FBQ2hFLE1BQU0sUUFBUSxHQUFHLE9BQU8sSUFBSSxPQUFPLENBQUMsUUFBUSxJQUFJLElBQUksQ0FBQztRQUNyRCxNQUFNLEtBQUssR0FBRyxPQUFPLElBQUksT0FBTyxDQUFDLEtBQUssSUFBSSxJQUFJLENBQUM7UUFDL0MsTUFBTSxjQUFjLEdBQUcsT0FBTyxJQUFJLE9BQU8sQ0FBQyxjQUFjLElBQUksSUFBSSxDQUFDO1FBQ2pFLE1BQU0sTUFBTSxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsT0FBTyxFQUFFLFdBQVcsRUFBRSxhQUFhLEVBQUUsUUFBUSxFQUFFLEtBQUssRUFBRSxjQUFjLENBQUMsQ0FBQztRQUNsRyxJQUFJLE1BQU0sSUFBSSxNQUFNLENBQUMsSUFBSSxJQUFJLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRTtZQUNuRCxNQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDLElBQWtELEVBQUUsRUFBRTtnQkFDekUsSUFBSSxDQUFDLFlBQVksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLGdCQUFnQixDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUUsSUFBSSxFQUFFLFNBQVMsQ0FBQyxDQUFDO1lBQ25GLENBQUMsQ0FBQyxDQUFDO1NBQ0o7YUFBTTtZQUNMLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLFVBQVUsRUFBRSxPQUFPLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQyxDQUFDO1NBQ3ZFO1FBQ0QsTUFBTSxrQkFBa0IsR0FBaUIsSUFBSSxDQUFDLHNCQUFzQixDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQztRQUN4RixJQUFJLE1BQU0sSUFBSSxNQUFNLENBQUMsR0FBRyxJQUFJLE1BQU0sQ0FBQyxHQUFHLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRTtZQUNqRCxrQkFBa0IsQ0FBQyxTQUFTLENBQUMsbUJBQW1CLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQztTQUNuRTthQUFNO1lBQ0wsSUFBSSxNQUFNLEtBQUssSUFBSSxFQUFFO2dCQUNuQixrQkFBa0IsQ0FBQyxTQUFTLENBQUMsbUJBQW1CLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDO2FBQzNEO1NBQ0Y7SUFDSCxDQUFDO0lBQ0Q7OztPQUdHO0lBQ0ssT0FBTyxDQUFDLGNBQXVDLEVBQUUsY0FBdUIsS0FBSyxFQUFFLGdCQUF5QixLQUFLLEVBQUUsV0FBcUIsSUFBSSxFQUFFLFFBQWEsSUFBSSxFQUFFLGlCQUE2QixJQUFJO1FBQ3BNLE1BQU0sV0FBVyxHQUFHLGNBQWMsSUFBSSxjQUFjLENBQUMsV0FBVyxJQUFJLElBQUksQ0FBQztRQUN6RSxNQUFNLFVBQVUsR0FBRyxjQUFjLElBQUksY0FBYyxDQUFDLE9BQU8sQ0FBQyxVQUFVLENBQUM7UUFDdkUsTUFBTSxFQUFFLEdBQUcsY0FBYyxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUM7UUFDckMsSUFBSSxDQUFDLFdBQVcsSUFBSSxXQUFXLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRTtZQUMxQyxPQUFPLElBQUksQ0FBQztTQUNiO1FBQ0QsTUFBTSxNQUFNLEdBQUc7WUFDYixJQUFJLEVBQUUsRUFBRTtZQUNSLEdBQUcsRUFBRSxFQUFFO1NBQ1IsQ0FBQztRQUNGLElBQUksZ0JBQWdCLEdBQUcsS0FBSyxDQUFDO1FBQzdCLEtBQUssSUFBSSxVQUFVLElBQUksV0FBVyxFQUFFO1lBQ2xDLE1BQU0sT0FBTyxHQUFHLFVBQVUsQ0FBQyxPQUFPLENBQUM7WUFDbkMsTUFBTSxRQUFRLEdBQUcsVUFBVSxDQUFDLFFBQVEsSUFBSSxJQUFJLENBQUM7WUFDN0MsTUFBTSxPQUFPLEdBQUcsUUFBUSxJQUFJLFFBQVEsQ0FBQyxPQUFPLElBQUksSUFBSSxDQUFDO1lBQ3JELE1BQU0sUUFBUSxHQUFHLFFBQVEsSUFBSSxRQUFRLENBQUMsUUFBUSxJQUFJLElBQUksQ0FBQztZQUN2RCxNQUFNLElBQUksR0FBRyxRQUFRLElBQUksUUFBUSxDQUFDLElBQUksQ0FBQztZQUN2QyxNQUFNLFdBQVcsR0FBRyxJQUFJLENBQUMsY0FBYyxDQUFDLFVBQVUsRUFBRSxFQUFFLEVBQUUsUUFBUSxDQUFDLENBQUM7WUFDbEUsTUFBTSxZQUFZLEdBQUcsV0FBVyxJQUFJLFdBQVcsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFFMUUsOEJBQThCO1lBQzlCLElBQUksQ0FBQyxRQUFRLElBQUksQ0FBQyxPQUFPLElBQUksT0FBTyxDQUFDLE1BQU0sR0FBRyxDQUFDLElBQUksQ0FBQyxRQUFRLElBQUksQ0FBQyxJQUFJLElBQUksSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUU7Z0JBQ3hGLFNBQVM7YUFDVjtZQUNELFFBQVE7WUFDUixLQUFLLElBQUksR0FBRyxJQUFJLElBQUksRUFBRTtnQkFDcEIsS0FBSyxJQUFJLE1BQU0sSUFBSSxPQUFPLEVBQUU7b0JBQzFCLDJCQUEyQjtvQkFDM0IsSUFBSSxhQUFhLEdBQUcsSUFBSSxDQUFDLDBDQUEwQyxDQUFDLFVBQVUsRUFBRSxFQUFFLEVBQUUsV0FBVyxFQUFFLE1BQU0sQ0FBQyxDQUFDO29CQUN6RyxJQUFJLENBQUMsYUFBYSxJQUFJLGFBQWEsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFO3dCQUM5QyxrQkFBa0I7d0JBQ2xCLGdCQUFnQixHQUFHLElBQUksQ0FBQzt3QkFDeEIsU0FBUztxQkFDVjtvQkFDRCxnQkFBZ0I7b0JBQ2hCLGFBQWEsR0FBRyxhQUFhLENBQUMsTUFBTSxDQUFDLENBQUMsWUFBMEIsRUFBRSxFQUFFO3dCQUNsRSxNQUFNLG1CQUFtQixHQUFHLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxZQUFZLENBQUMsY0FBYyxDQUFDLENBQUM7d0JBQ2xGLElBQUksbUJBQW1CLEVBQUU7NEJBQ3ZCLE1BQU0sa0JBQWtCLEdBQUcsSUFBSSxDQUFDLGtCQUFrQixDQUFDLFlBQVksQ0FBQyxjQUFjLENBQUMsQ0FBQzs0QkFDaEYsSUFBSSxrQkFBa0IsRUFBRTtnQ0FDdEIsT0FBTyxLQUFLLENBQUM7NkJBQ2Q7aUNBQU07Z0NBQ0wsT0FBTyxJQUFJLENBQUM7NkJBQ2I7eUJBQ0Y7d0JBQ0QsT0FBTyxJQUFJLENBQUM7b0JBQ2QsQ0FBQyxDQUFDLENBQUM7b0JBQ0gsYUFBYTtvQkFDYixNQUFNLFlBQVksR0FBRyxJQUFJLENBQUMsWUFBWSxDQUFDLFVBQVUsRUFBRSxFQUFFLEVBQUUsV0FBVyxFQUFFLEdBQUcsQ0FBQyxDQUFDO29CQUN6RSx5QkFBeUI7b0JBQ3pCLElBQUksWUFBWSxFQUFFO3dCQUNoQixTQUFTO3dCQUNULHNIQUFzSDt3QkFDdEgsSUFBSSxhQUFhLElBQUksYUFBYSxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUU7NEJBQzdDLGFBQWEsQ0FBQyxPQUFPLENBQUMsQ0FBQyxZQUEwQixFQUFFLEVBQUU7Z0NBQ25ELDBCQUEwQjtnQ0FDMUIsTUFBTSxZQUFZLEdBQUcsSUFBSSxDQUFDLDBCQUEwQixDQUFDLFlBQVksRUFBRSxNQUFNLENBQUMsQ0FBQztnQ0FDM0UsSUFBSSxZQUFZLElBQUksWUFBWSxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUU7b0NBQzNDLFlBQVksQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLGVBQWUsRUFBRSxXQUFXLENBQUMsRUFBRSxFQUFFO3dDQUN0RCw4REFBOEQ7d0NBQzlELElBQUksQ0FBQyxZQUFZLENBQUMsTUFBTSxDQUFDLElBQUksRUFBRSxZQUFZLEVBQUUsZUFBZSxFQUFFLE9BQU8sQ0FBQyxDQUFDO29DQUN6RSxDQUFDLENBQUMsQ0FBQztpQ0FDSjtnQ0FFRCx1Q0FBdUM7Z0NBRXZDLEdBQUc7NEJBQ0wsQ0FBQyxDQUFDLENBQUM7eUJBQ0o7NkJBQU07eUJBQ047cUJBQ0Y7b0JBQ0QsYUFBYTtvQkFDYixhQUFhLENBQUMsT0FBTyxDQUFDLENBQUMsWUFBMEIsRUFBRSxFQUFFO3dCQUNuRCxNQUFNLGFBQWEsR0FBRyxZQUFZLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUM7d0JBQ2hFLE1BQU0sWUFBWSxHQUFHLElBQUksQ0FBQywwQkFBMEIsQ0FBQyxZQUFZLEVBQUUsTUFBTSxDQUFDLENBQUM7d0JBQzNFLElBQUksWUFBWSxJQUFJLFlBQVksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFOzRCQUMzQyxNQUFNLENBQUMsZUFBZSxFQUFFLFdBQVcsQ0FBQyxHQUFHLFlBQVksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLFlBQVksRUFBRSxXQUFXLENBQUMsRUFBRSxFQUFFLENBQUMsWUFBWSxJQUFJLFlBQVksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLENBQUM7NEJBQ25JLG1FQUFtRTs0QkFDbkUsTUFBTSxXQUFXLEdBQUcsWUFBWSxDQUFDLFNBQVMsQ0FBQyxXQUFXLENBQUMsUUFBUSxDQUFDLFlBQVksQ0FBZ0IsQ0FBQzs0QkFDN0YsSUFBSSxLQUFLLEdBQUcsV0FBVyxDQUFDLFlBQVksQ0FBQyxHQUFHLENBQUMsQ0FBQzs0QkFDMUMsTUFBTSxPQUFPLEdBQUcsR0FBRyxHQUFHLElBQUksTUFBTSxJQUFJLE9BQU8sRUFBRSxDQUFDOzRCQUM5QyxvREFBb0Q7NEJBQ3BELElBQUksS0FBSyxJQUFJLENBQUMsSUFBSSxNQUFNLENBQUMsR0FBRyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUFFLEtBQUssT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUU7Z0NBQ3BFLGlCQUFpQjtnQ0FDakIsTUFBTSxRQUFRLEdBQUcsQ0FBQyxXQUFXLElBQUksV0FBVyxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO2dDQUM1RSxNQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsY0FBYyxDQUFDLGFBQWEsRUFBRSxXQUFXLENBQUMsSUFBSSxJQUFJLFdBQVcsQ0FBQyxnQkFBZ0IsSUFBSSxlQUFlLEVBQUUsUUFBUSxDQUFDLENBQUM7Z0NBQ2hJLE1BQU0sSUFBSSxHQUFHO29DQUNYLEVBQUUsRUFBRSxPQUFPO29DQUNYLEtBQUs7b0NBQ0wsV0FBVyxFQUFFLFdBQVcsQ0FBQyxFQUFFO29DQUMzQixLQUFLO29DQUNMLEdBQUcsRUFBRSxPQUFPO29DQUNaLFNBQVMsRUFBRSxFQUFFO29DQUNiLFdBQVc7b0NBQ1gsSUFBSSxFQUFFLE9BQU87aUNBQ2QsQ0FBQztnQ0FDRixNQUFNLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQzs2QkFDdkI7eUJBQ0Y7b0JBRUgsQ0FBQyxDQUFDLENBQUM7aUJBQ0o7YUFDRjtTQUNGO1FBQ0QsSUFBSSxnQkFBZ0IsSUFBSSxXQUFXLElBQUksQ0FBQyxhQUFhLElBQUksUUFBUSxFQUFFO1lBQ2pFLFFBQVEsQ0FBQyxJQUFJLENBQUMsV0FBVyxFQUFFLEVBQUUsRUFBRSxhQUFhLEVBQUUsS0FBSyxFQUFFLGNBQWMsQ0FBQyxDQUFDO1NBQ3RFO1FBQ0QsT0FBTyxNQUFNLENBQUM7SUFDaEIsQ0FBQztJQUNPLFlBQVksQ0FBQyxTQUE0SSxFQUFFLFlBQTBCLEVBQUUsZUFBdUIsRUFBRSxPQUFlO1FBQ3JPLE1BQU0sVUFBVSxHQUFHLFNBQVMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLE9BQU8sS0FBSyxZQUFZLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDOUYsSUFBSSxVQUFVLEVBQUU7WUFDZCxNQUFNLGVBQWUsR0FBRyxVQUFVLENBQUMsT0FBTyxJQUFJLE1BQU0sQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLE9BQU8sQ0FBQyxDQUFDLFFBQVEsQ0FBQyxlQUFlLENBQUMsQ0FBQztZQUN4RyxNQUFNLFdBQVcsR0FBRyxtQkFBbUIsTUFBTSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsT0FBTyxDQUFDLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRSxDQUFDO1lBQ3BGLElBQUksZUFBZSxFQUFFO2dCQUNuQixVQUFVLENBQUMsT0FBTyxDQUFDLGVBQWUsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFDLFdBQVcsQ0FBQyxHQUFHLEVBQUUsSUFBSSxFQUFFLE9BQU8sRUFBRSxDQUFDO2FBQ2hGO2lCQUFNO2dCQUNMLFVBQVUsQ0FBQyxPQUFPLENBQUMsZUFBZSxDQUFDLEdBQUcsRUFBRSxNQUFNLEVBQUUsRUFBRSxDQUFDLFdBQVcsQ0FBQyxFQUFFLEVBQUUsSUFBSSxFQUFFLE9BQU8sRUFBRSxFQUFFLEVBQUUsQ0FBQzthQUN4RjtTQUNGO2FBQU07WUFDTCxTQUFTLENBQUMsSUFBSSxDQUFDO2dCQUNiLFlBQVksRUFBRSxZQUFZO2dCQUMxQixPQUFPLEVBQUU7b0JBQ1AsQ0FBQyxlQUFlLENBQUMsRUFBRTt3QkFDakIsTUFBTSxFQUFFOzRCQUNOLG1CQUFtQixFQUFFLEVBQUUsSUFBSSxFQUFFLE9BQU8sRUFBRTt5QkFDdkM7cUJBQ0Y7aUJBQ0Y7YUFDRixDQUFDLENBQUM7U0FDSjtJQUNILENBQUM7SUFDTyxjQUFjLENBQUMsYUFBcUIsRUFBRSxZQUFvQixFQUFFLEtBQVU7UUFDNUUsTUFBTSxRQUFRLEdBQUc7WUFDZixRQUFRLEVBQUU7Z0JBQ1IsYUFBYSxFQUFFLFlBQVk7Z0JBQzNCLEtBQUssRUFBRSxZQUFZO2dCQUNuQixZQUFZLEVBQUUsaUJBQWlCO2FBQ2hDO1lBQ0QsSUFBSSxFQUFFO2dCQUNKLGFBQWEsRUFBRSxZQUFZO2dCQUMzQixLQUFLLEVBQUUsWUFBWTtnQkFDbkIsWUFBWSxFQUFFLGlCQUFpQjthQUNoQztZQUNELFFBQVEsRUFBRTtnQkFDUixhQUFhLEVBQUUsWUFBWTtnQkFDM0IsS0FBSyxFQUFFLFlBQVk7Z0JBQ25CLFlBQVksRUFBRSxpQkFBaUI7YUFDaEM7U0FDRixDQUFDO1FBQ0YsTUFBTSxlQUFlLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxrQkFBa0IsRUFBRSxJQUFJLFFBQVEsQ0FBQztRQUN4RSxNQUFNLE9BQU8sR0FBRyxFQUFFLENBQUM7UUFDbkIsSUFBSSxhQUFhLEVBQUU7WUFDakIsT0FBTyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsZUFBZSxDQUFDLENBQUMsZUFBZSxDQUFDLENBQUMsT0FBTyxDQUFDLFlBQVksRUFBRSxhQUFhLENBQUMsQ0FBQyxDQUFDO1NBQy9GO1FBQ0QsSUFBSSxLQUFLLEdBQUcsQ0FBQyxFQUFFO1lBQ2IsT0FBTyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsZUFBZSxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsT0FBTyxDQUFDLFFBQVEsRUFBRSxLQUFLLENBQUMsQ0FBQyxDQUFDO1NBQzNFO1FBQ0QsSUFBSSxZQUFZLEVBQUU7WUFDaEIsT0FBTyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsZUFBZSxDQUFDLENBQUMsY0FBYyxDQUFDLENBQUMsT0FBTyxDQUFDLGVBQWUsRUFBRSxZQUFZLENBQUMsQ0FBQyxDQUFDO1NBQ2hHO1FBQ0QsT0FBTyxPQUFPLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQzNCLENBQUM7SUFDRDs7Ozs7T0FLRztJQUNLLGNBQWMsQ0FBQyxVQUFzQixFQUFFLEVBQVUsRUFBRSxRQUFnQjtRQUN6RSxNQUFNLFlBQVksR0FBRyxJQUFJLENBQUMsZUFBZSxDQUFDLFVBQVUsRUFBRSxFQUFFLENBQUMsQ0FBQztRQUMxRCxPQUFPLFlBQVksQ0FBQyxVQUFVLENBQUMsY0FBYyxDQUFDLHlCQUF5QixDQUFDLFFBQVEsQ0FBQyxDQUFDO0lBQ3BGLENBQUM7SUFDRDs7Ozs7O09BTUc7SUFDSywwQ0FBMEMsQ0FBQyxVQUFzQixFQUFFLEVBQVUsRUFBRSxXQUFtQixFQUFFLFVBQWtCO1FBQzVILElBQUksYUFBYSxHQUFHLFVBQVUsQ0FBQyxtQkFBbUIsQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDO1FBQ3RFLElBQUksYUFBYSxJQUFJLGFBQWEsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFO1lBQzdDLDBCQUEwQjtZQUMxQixhQUFhLEdBQUcsYUFBYSxDQUFDLE1BQU0sQ0FBQyxDQUFDLFlBQTBCLEVBQUUsRUFBRTtnQkFDbEUsV0FBVztnQkFDWCxJQUFJLG1CQUFtQixHQUFHLFlBQVksQ0FBQyxTQUFTLEtBQUssRUFBRSxJQUFJLFlBQVksQ0FBQyxTQUFTLENBQUMsV0FBVyxLQUFLLFdBQVcsSUFBSSxZQUFZLENBQUMsU0FBUyxDQUFDLElBQUksSUFBSSxZQUFZLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxRQUFRLElBQUksTUFBTSxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDO2dCQUNyUCxJQUFJLENBQUMsbUJBQW1CLEVBQUU7b0JBQ3hCLE9BQU8sS0FBSyxDQUFDO2lCQUNkO2dCQUNELFVBQVU7Z0JBQ1YsTUFBTSxZQUFZLEdBQUcsV0FBVyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztnQkFDM0QsTUFBTSxZQUFZLEdBQUcsWUFBWSxDQUFDLFVBQVUsQ0FBQyxjQUFjLENBQUMsaUJBQWlCLENBQUMsWUFBWSxDQUFDLENBQUM7Z0JBQzVGLElBQUksWUFBWSxFQUFFO29CQUNoQixNQUFNLGFBQWEsR0FBRyxLQUFLLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxXQUFXLENBQUMsTUFBTSxFQUFFLENBQUMsQ0FBQztvQkFDcEUsdUJBQXVCO29CQUN2QixNQUFNLGtCQUFrQixHQUFHLGFBQWEsQ0FBQyxJQUFJLENBQUMsQ0FBQyxRQUFzQixFQUFFLEVBQUUsQ0FBQyxRQUFRLENBQUMsWUFBWSxJQUFJLENBQUMsUUFBUSxDQUFDLFlBQVksQ0FBQyxpQkFBaUIsS0FBSyxVQUFVLElBQUksUUFBUSxDQUFDLFlBQVksQ0FBQyxTQUFTLEtBQUssVUFBVSxDQUFDLENBQUMsQ0FBQztvQkFDL00sSUFBSSxrQkFBa0IsRUFBRTt3QkFDdEIsTUFBTSxrQkFBa0IsR0FBRyxrQkFBa0IsQ0FBQyxJQUFJLENBQUM7d0JBQ25ELE1BQU0sYUFBYSxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUMsWUFBWSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLE9BQU8sS0FBSyxrQkFBa0IsQ0FBQyxDQUFDO3dCQUNsSSxJQUFJLGFBQWEsRUFBRTs0QkFDakIsT0FBTyxJQUFJLENBQUM7eUJBQ2I7NkJBQU07NEJBQ0wsTUFBTSxJQUFJLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxjQUFjLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLEtBQUssa0JBQWtCLENBQUMsQ0FBQzs0QkFDN0csT0FBTyxJQUFJLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDO3lCQUM1QjtxQkFDRjt5QkFBTTt3QkFDTCxPQUFPLEtBQUssQ0FBQztxQkFDZDtpQkFDRjtxQkFBTTtvQkFDTCxPQUFPLEtBQUssQ0FBQztpQkFDZDtZQUNILENBQUMsQ0FBQyxDQUFDO1lBQ0gsT0FBTyxhQUFhLENBQUM7U0FDdEI7UUFDRCxPQUFPLElBQUksQ0FBQztJQUNkLENBQUM7SUFDRDs7O09BR0c7SUFDSyxtQkFBbUIsQ0FBQyxjQUE4QjtRQUN4RCxNQUFNLFdBQVcsR0FBRyxjQUFjLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxxQkFBcUIsQ0FBQyxJQUFJLElBQUksQ0FBQztRQUNwRixPQUFPLFdBQVcsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUM7SUFDcEMsQ0FBQztJQUNEOzs7O09BSUc7SUFDSyxrQkFBa0IsQ0FBQyxjQUE4QjtRQUN2RCxNQUFNLFlBQVksR0FBRyxjQUFjLENBQUMsT0FBTyxDQUFDO1FBQzVDLE1BQU0sbUJBQW1CLEdBQUcsWUFBWSxDQUFDLFNBQVMsQ0FBQyxxQkFBcUIsQ0FBQyxJQUFJLElBQUksQ0FBQztRQUNsRixJQUFJLG1CQUFtQixFQUFFO1lBQ3ZCLE1BQU0sZUFBZSxHQUFVLFlBQVksQ0FBQyxTQUFTLENBQUMsbUJBQW1CLENBQUMsQ0FBQztZQUMzRSxPQUFPLGVBQWUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxLQUFpQixFQUFFLEVBQUU7Z0JBQ2pELE9BQU8sS0FBSyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1lBQzNDLENBQUMsQ0FBQyxDQUFDO1NBQ0o7YUFBTTtZQUNMLE1BQU0sSUFBSSxLQUFLLENBQUMsY0FBYyxDQUFDLENBQUM7U0FDakM7SUFDSCxDQUFDO0lBQ0Q7Ozs7OztPQU1HO0lBQ0ssWUFBWSxDQUFDLFVBQXNCLEVBQUUsRUFBVSxFQUFFLFdBQW1CLEVBQUUsRUFBVTtRQUN0RixNQUFNLFlBQVksR0FBRyxXQUFXLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQzNELE1BQU0sWUFBWSxHQUFHLElBQUksQ0FBQyxlQUFlLENBQUMsVUFBVSxFQUFFLEVBQUUsQ0FBQyxDQUFDO1FBQzFELE1BQU0sV0FBVyxHQUFHLFlBQVksQ0FBQyxXQUFXLENBQUM7UUFDN0MsTUFBTSxXQUFXLEdBQUcsV0FBVyxDQUFDLFFBQVEsQ0FBQyxZQUFZLENBQWdCLENBQUM7UUFDdEUsT0FBTyxXQUFXLENBQUMsV0FBVyxDQUFDLGVBQWUsS0FBSyxFQUFFLENBQUM7SUFDeEQsQ0FBQztJQUNEOzs7O09BSUc7SUFDSyxlQUFlLENBQUMsVUFBc0IsRUFBRSxFQUFVO1FBQ3hELE1BQU0sYUFBYSxHQUFHLFVBQVUsQ0FBQyxtQkFBbUIsQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDO1FBQ3hFLElBQUksYUFBYSxJQUFJLGFBQWEsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFO1lBQzdDLE1BQU0sa0JBQWtCLEdBQUcsYUFBYSxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsRUFBRSxDQUFDLFlBQVksQ0FBQyxTQUFTLEtBQUssRUFBRSxDQUFDLENBQUM7WUFDN0YsSUFBSSxrQkFBa0IsRUFBRTtnQkFDdEIsTUFBTSx1QkFBdUIsR0FBRyxrQkFBa0IsQ0FBQywwQkFBMEIsRUFBRSxDQUFDO2dCQUNoRixPQUFPLHVCQUF1QixDQUFDO2FBQ2hDO1NBQ0Y7UUFDRCxPQUFPLElBQUksQ0FBQztJQUNkLENBQUM7SUFDRDs7T0FFRztJQUNLLDBCQUEwQixDQUFDLFlBQTBCLEVBQUUsVUFBa0I7UUFDL0UsTUFBTSxZQUFZLEdBQUcsWUFBWSxDQUFDLFNBQVMsQ0FBQyxXQUFXLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ2xGLHlCQUF5QjtRQUN6QixNQUFNLFFBQVEsR0FBRyxZQUFZLENBQUMsVUFBVSxDQUFDLGNBQWMsQ0FBQyxpQkFBaUIsQ0FBQyxZQUFZLENBQUMsQ0FBQztRQUV4RixNQUFNLFNBQVMsR0FBRyxLQUFLLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxXQUFXLENBQUMsTUFBTSxFQUFFLENBQUMsQ0FBQztRQUM1RCxNQUFNLFFBQVEsR0FBRyxTQUFTLENBQUMsSUFBSSxDQUFDLENBQUMsUUFBc0IsRUFBRSxFQUFFLENBQUMsUUFBUSxDQUFDLFlBQVksSUFBSSxDQUFDLFFBQVEsQ0FBQyxZQUFZLENBQUMsaUJBQWlCLEtBQUssVUFBVSxJQUFJLFFBQVEsQ0FBQyxZQUFZLENBQUMsU0FBUyxLQUFLLFVBQVUsQ0FBQyxDQUFDLENBQUM7UUFDak0sSUFBSSxRQUFRLEVBQUU7WUFDWixNQUFNLFdBQVcsR0FBRyxRQUFRLENBQUMsSUFBSSxDQUFDO1lBQ2xDLE1BQU0sWUFBWSxHQUFtQyxNQUFNLENBQUMsT0FBTyxDQUFDLFlBQVksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLElBQUksRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sS0FBSyxXQUFXLElBQUksSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLFdBQVcsQ0FBQyxDQUFDO1lBQzdMLDhIQUE4SDtZQUM5SCxJQUFJLFlBQVksRUFBRTtnQkFDaEIsT0FBTyxZQUFZLENBQUM7YUFDckI7U0FDRjtRQUNELE9BQU8sSUFBSSxDQUFDO0lBQ2QsQ0FBQztJQUNPLGdCQUFnQixDQUFDLFVBQXNCLEVBQUUsRUFBVTtRQUN6RCxNQUFNLGFBQWEsR0FBRyxVQUFVLENBQUMsbUJBQW1CLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQyxNQUFNLENBQUMsWUFBWSxDQUFDLEVBQUUsQ0FBQyxZQUFZLENBQUMsU0FBUyxLQUFLLEVBQUUsQ0FBQyxDQUFDO1FBQzlILGFBQWEsQ0FBQyxPQUFPLENBQUMsWUFBWSxDQUFDLEVBQUUsQ0FBQyxZQUFZLElBQUksWUFBWSxDQUFDLFNBQVMsSUFBSSxZQUFZLENBQUMsU0FBUyxDQUFDLElBQUksSUFBSSxZQUFZLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxpQkFBaUIsRUFBRSxDQUFDLENBQUM7SUFDbEssQ0FBQztJQUNEOzs7T0FHRztJQUNLLHNCQUFzQixDQUFDLFlBQTBCO1FBQ3ZELE1BQU0sdUJBQXVCLEdBQUcsWUFBWSxDQUFDLDBCQUEwQixFQUFFLENBQUM7UUFDMUUsTUFBTSxvQkFBb0IsR0FBRyx1QkFBdUIsQ0FBQyxjQUFjLENBQUM7UUFDcEUsTUFBTSxpQkFBaUIsR0FBRyxvQkFBb0IsSUFBSSxvQkFBb0IsQ0FBQyx1QkFBdUIsQ0FBQyxJQUFJLEtBQUssQ0FBQztRQUN6RyxJQUFJLGlCQUFpQixFQUFFO1lBQ3JCLDRCQUE0QjtZQUM1QixPQUFPLHVCQUF1QixDQUFDO1NBQ2hDO2FBQU07WUFDTCx1REFBdUQ7WUFDdkQsTUFBTSxrQkFBa0IsR0FBRyx1QkFBdUIsQ0FBQyxNQUFNLENBQUM7WUFDMUQsSUFBSSxrQkFBa0IsRUFBRTtnQkFDdEIsT0FBTyxJQUFJLENBQUMsc0JBQXNCLENBQUMsa0JBQWtCLENBQUMsQ0FBQzthQUN4RDtpQkFBTTtnQkFDTCxPQUFPLHVCQUF1QixDQUFDO2FBQ2hDO1NBQ0Y7SUFDSCxDQUFDOzs7WUEvVkYsVUFBVTs7OztZQVRrQixRQUFRO1lBQ3FELFlBQVk7NENBVXZCLE1BQU0sU0FBQyxjQUFjIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0LCBJbmplY3RhYmxlLCBJbmplY3RvciB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQXBwQ29udGV4dCwgQmFja0VuZE1lc3NhZ2UsIEJpbmRpbmdMaXN0LCBEYXRhUHJvcEluZm8sIEV2ZW50QnVzLCBGcmFtZUNvbXBvbmVudCwgRnJhbWVDb250ZXh0LCBOZ0Zvcm1Db250cm9sLCBUcmFuc2xhdGUsIFRyYW5zbGF0ZVRva2VuIH0gZnJvbSAnQGZhcnJpcy9kZXZraXQnO1xuLyoqXG4gKiDlkI7nq6/mtojmga/lpITnkIbmnI3liqFcbiAqIEBkZXNjcmlwdGlvblxuICogIyMjIOacjeWKoeazqOWFpeS9jee9rlxuICogIDHjgIHmlbTkuKrooajljZXnmoRyb290LWNvbXBvbmVudCBcbiAqICAy44CB5by55Ye656qX5Y+j55qEcm9vdC1jb21wb25lbnQgXG4gKi9cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBCYWNrRW5kTWVzc2FnZUhhbmRsZXIgaW1wbGVtZW50cyBCYWNrRW5kTWVzc2FnZS5JQmFja0VuZE1lc3NhZ2VIYW5kbGVyIHtcbiAgY29uc3RydWN0b3IocHJpdmF0ZSBpbmplY3RvcjogSW5qZWN0b3IsIHByaXZhdGUgZnJhbWVDb250ZXh0OiBGcmFtZUNvbnRleHQsIEBJbmplY3QoVHJhbnNsYXRlVG9rZW4pIHByaXZhdGUgdHJhbnNsYXRlOiBUcmFuc2xhdGUpIHsgfVxuICAvKipcbiAgICog5aSE55CG5ZCO56uv6L+U5Zue55qE5raI5oGv5oiW6ZSZ6K+vXG4gICAqIEBwYXJhbSBtZXNzYWdlIOa2iOaBr+aIlumUmeivr1xuICAgKi9cbiAgcHVibGljIGhhbmRsZShtZXNzYWdlOiBCYWNrRW5kTWVzc2FnZS5JTWVzc2FnZSwgY29udGV4dDogYW55KSB7XG4gICAgY29uc3QgaXNFeGNlcHRpb24gPSBjb250ZXh0ICYmIGNvbnRleHQuaXNFeGNlcHRpb24gfHwgZmFsc2U7XG4gICAgY29uc3QgaGFzVGhyb3dFcnJvciA9IGNvbnRleHQgJiYgY29udGV4dC5oYXNUaHJvd0Vycm9yIHx8IGZhbHNlO1xuICAgIGNvbnN0IGV2ZW50QnVzID0gY29udGV4dCAmJiBjb250ZXh0LmV2ZW50QnVzIHx8IG51bGw7XG4gICAgY29uc3QgZXJyb3IgPSBjb250ZXh0ICYmIGNvbnRleHQuZXJyb3IgfHwgbnVsbDtcbiAgICBjb25zdCBmb3JtQXBwQ29udGV4dCA9IGNvbnRleHQgJiYgY29udGV4dC5mb3JtQXBwQ29udGV4dCB8fCBudWxsO1xuICAgIGNvbnN0IHJlc3VsdCA9IHRoaXMuY29sbGVjdChtZXNzYWdlLCBpc0V4Y2VwdGlvbiwgaGFzVGhyb3dFcnJvciwgZXZlbnRCdXMsIGVycm9yLCBmb3JtQXBwQ29udGV4dCk7XG4gICAgaWYgKHJlc3VsdCAmJiByZXN1bHQuZm9ybSAmJiByZXN1bHQuZm9ybS5sZW5ndGggPiAwKSB7XG4gICAgICByZXN1bHQuZm9ybS5mb3JFYWNoKChpdGVtOiB7IGZyYW1lQ29udGV4dDogRnJhbWVDb250ZXh0LCBtZXNzYWdlOiBhbnkgfSkgPT4ge1xuICAgICAgICBpdGVtLmZyYW1lQ29udGV4dC52aWV3TW9kZWwuZm9ybS51cGRhdGVGb3JtRXJyb3JzKGl0ZW0ubWVzc2FnZSwgdHJ1ZSwgJ2JhY2tlbmQnKTtcbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnJlc2V0Rm9ybU1lc3NhZ2UobWVzc2FnZS5jb250ZXh0LmFwcENvbnRleHQsIG1lc3NhZ2UuY29udGV4dC5ucyk7XG4gICAgfVxuICAgIGNvbnN0IHRhcmdldEZyYW1lQ29udGV4dDogRnJhbWVDb250ZXh0ID0gdGhpcy5maW5kVGFyZ2V0RnJhbWVDb250ZXh0KHRoaXMuZnJhbWVDb250ZXh0KTtcbiAgICBpZiAocmVzdWx0ICYmIHJlc3VsdC5hbGwgJiYgcmVzdWx0LmFsbC5sZW5ndGggPiAwKSB7XG4gICAgICB0YXJnZXRGcmFtZUNvbnRleHQudmlld01vZGVsLnZlcmlmeWNhdGlvbkNoYW5nZWQubmV4dChyZXN1bHQuYWxsKTtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKHJlc3VsdCAhPT0gbnVsbCkge1xuICAgICAgICB0YXJnZXRGcmFtZUNvbnRleHQudmlld01vZGVsLnZlcmlmeWNhdGlvbkNoYW5nZWQubmV4dChbXSk7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIC8qKlxuICAgKiDmlLbpm4bmsYfmgLvkv6Hmga/lkoxmb3Jt5L+h5oGvXG4gICAqIEBwYXJhbSBiYWNrRW5kTWVzc2FnZSBcbiAgICovXG4gIHByaXZhdGUgY29sbGVjdChiYWNrRW5kTWVzc2FnZTogQmFja0VuZE1lc3NhZ2UuSU1lc3NhZ2UsIGlzRXhjZXB0aW9uOiBib29sZWFuID0gZmFsc2UsIGhhc1Rocm93RXJyb3I6IGJvb2xlYW4gPSBmYWxzZSwgZXZlbnRCdXM6IEV2ZW50QnVzID0gbnVsbCwgZXJyb3I6IGFueSA9IG51bGwsIGZvcm1BcHBDb250ZXh0OiBBcHBDb250ZXh0ID0gbnVsbCk6IHsgZm9ybTogeyBmcmFtZUNvbnRleHQ6IEZyYW1lQ29udGV4dCwgbWVzc2FnZTogYW55IH1bXSwgYWxsOiBhbnlbXSB9IHtcbiAgICBjb25zdCBiaXpNZXNzYWdlcyA9IGJhY2tFbmRNZXNzYWdlICYmIGJhY2tFbmRNZXNzYWdlLmJpek1lc3NhZ2VzIHx8IG51bGw7XG4gICAgY29uc3QgYXBwQ29udGV4dCA9IGJhY2tFbmRNZXNzYWdlICYmIGJhY2tFbmRNZXNzYWdlLmNvbnRleHQuYXBwQ29udGV4dDtcbiAgICBjb25zdCBucyA9IGJhY2tFbmRNZXNzYWdlLmNvbnRleHQubnM7XG4gICAgaWYgKCFiaXpNZXNzYWdlcyB8fCBiaXpNZXNzYWdlcy5sZW5ndGggPCAxKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgY29uc3QgcmVzdWx0ID0ge1xuICAgICAgZm9ybTogW10sXG4gICAgICBhbGw6IFtdXG4gICAgfTtcbiAgICBsZXQgaGFzRm9ybWxlc3NFcnJvciA9IGZhbHNlO1xuICAgIGZvciAobGV0IGJpek1lc3NhZ2Ugb2YgYml6TWVzc2FnZXMpIHtcbiAgICAgIGNvbnN0IG1lc3NhZ2UgPSBiaXpNZXNzYWdlLm1lc3NhZ2U7XG4gICAgICBjb25zdCBsb2NhdGlvbiA9IGJpek1lc3NhZ2UubG9jYXRpb24gfHwgbnVsbDtcbiAgICAgIGNvbnN0IGNvbHVtbnMgPSBsb2NhdGlvbiAmJiBsb2NhdGlvbi5jb2x1bW5zIHx8IG51bGw7XG4gICAgICBjb25zdCBub2RlQ29kZSA9IGxvY2F0aW9uICYmIGxvY2F0aW9uLm5vZGVDb2RlIHx8IG51bGw7XG4gICAgICBjb25zdCByb3dzID0gbG9jYXRpb24gJiYgbG9jYXRpb24ucm93cztcbiAgICAgIGNvbnN0IGJpbmRpbmdQYXRoID0gdGhpcy5nZXRCaW5kaW5nUGF0aChhcHBDb250ZXh0LCBucywgbm9kZUNvZGUpO1xuICAgICAgY29uc3QgYmluZGluZ1BhdGhzID0gYmluZGluZ1BhdGggJiYgYmluZGluZ1BhdGguc3BsaXQoJy8nKS5maWx0ZXIocCA9PiBwKTtcblxuICAgICAgLy8g55uu5YmN5LuF5aSE55CG5pyJbG9jYXRpb27vvIzkuJTmnIlpZOOAgeWIl+WQjeOAgeihqOWQjeeahOOAglxuICAgICAgaWYgKCFsb2NhdGlvbiB8fCAhY29sdW1ucyB8fCBjb2x1bW5zLmxlbmd0aCA8IDEgfHwgIW5vZGVDb2RlIHx8ICFyb3dzIHx8IHJvd3MubGVuZ3RoIDwgMSkge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cbiAgICAgIC8vIOmBjeWOhuaVsOaNruihjFxuICAgICAgZm9yIChsZXQgcm93IG9mIHJvd3MpIHtcbiAgICAgICAgZm9yIChsZXQgY29sdW1uIG9mIGNvbHVtbnMpIHtcbiAgICAgICAgICAvLyDojrflj5bliLDmiYDmnInnu5Hlrpror6XliJfmlbDmja7nmoRmcmFtZUNvbnRleHRcbiAgICAgICAgICBsZXQgZnJhbWVDb250ZXh0cyA9IHRoaXMuZ2V0RnJhbWVDb250ZXh0c0J5QmluZGluZ1BhdGhBbmRDb2x1bW5OYW1lKGFwcENvbnRleHQsIG5zLCBiaW5kaW5nUGF0aCwgY29sdW1uKTtcbiAgICAgICAgICBpZiAoIWZyYW1lQ29udGV4dHMgfHwgZnJhbWVDb250ZXh0cy5sZW5ndGggPCAxKSB7XG4gICAgICAgICAgICAvLyDmsqHmnInku7vkvZXkuIDkuKrnu4Tku7bnu5Hlrpror6XliJfnmoTmlbDmja5cbiAgICAgICAgICAgIGhhc0Zvcm1sZXNzRXJyb3IgPSB0cnVlO1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgfVxuICAgICAgICAgIC8vIOaOkumZpOaOieWPquivu2RhdGFncmlkXG4gICAgICAgICAgZnJhbWVDb250ZXh0cyA9IGZyYW1lQ29udGV4dHMuZmlsdGVyKChmcmFtZUNvbnRleHQ6IEZyYW1lQ29udGV4dCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgaXNEYXRhR3JpZENvbXBvbmVudCA9IHRoaXMuaXNEYXRhR3JpZENvbXBvbmVudChmcmFtZUNvbnRleHQuZnJhbWVDb21wb25lbnQpO1xuICAgICAgICAgICAgaWYgKGlzRGF0YUdyaWRDb21wb25lbnQpIHtcbiAgICAgICAgICAgICAgY29uc3QgaXNSZWFkb25seURhdGFHcmlkID0gdGhpcy5pc1JlYWRvbmx5RGF0YUdyaWQoZnJhbWVDb250ZXh0LmZyYW1lQ29tcG9uZW50KTtcbiAgICAgICAgICAgICAgaWYgKGlzUmVhZG9ubHlEYXRhR3JpZCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgLy8g6YGN5Y6G55qE6KGM5piv5ZCm5Li65b2T5YmN6KGMXG4gICAgICAgICAgY29uc3QgaXNDdXJyZW50Um93ID0gdGhpcy5pc0N1cnJlbnRSb3coYXBwQ29udGV4dCwgbnMsIGJpbmRpbmdQYXRoLCByb3cpO1xuICAgICAgICAgIC8vIOWmguaenOaYr+W9k+WJjeihjOeahOivnemcgOimgeWwhumUmeivr+S/oeaBr+aUvuWIsGZvcm3kuK1cbiAgICAgICAgICBpZiAoaXNDdXJyZW50Um93KSB7XG4gICAgICAgICAgICAvLyDlv73nlaVncmlkXG4gICAgICAgICAgICAvLyBjb25zdCBmb3JtRnJhbWVDb250ZXh0cyA9IGZyYW1lQ29udGV4dHMuZmlsdGVyKGZyYW1lQ29udGV4dCA9PiAhdGhpcy5pc0dyaWRDb21wb25lbnQoZnJhbWVDb250ZXh0LmZyYW1lQ29tcG9uZW50KSk7XG4gICAgICAgICAgICBpZiAoZnJhbWVDb250ZXh0cyAmJiBmcmFtZUNvbnRleHRzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgZnJhbWVDb250ZXh0cy5mb3JFYWNoKChmcmFtZUNvbnRleHQ6IEZyYW1lQ29udGV4dCkgPT4ge1xuICAgICAgICAgICAgICAgIC8vIOWPquWkhOeQhuS6huS4gOS4que7hOS7tuS4reWIl+WPque7keWumuWIsOS4gOS4quWJjeerr+aOp+S7tueahOWcuuaZr1xuICAgICAgICAgICAgICAgIGNvbnN0IGZvcm1Db250cm9scyA9IHRoaXMuZ2V0Rm9ybUNvbnRyb2xCeUNvbHVtbk5hbWUoZnJhbWVDb250ZXh0LCBjb2x1bW4pO1xuICAgICAgICAgICAgICAgIGlmIChmb3JtQ29udHJvbHMgJiYgZm9ybUNvbnRyb2xzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICAgIGZvcm1Db250cm9scy5mb3JFYWNoKChbZG9tUHJvcGVydHlOYW1lLCBmb3JtQ29udHJvbF0pID0+IHtcbiAgICAgICAgICAgICAgICAgICAgLy9jb25zdCBkb21Qcm9wZXJ0eU5hbWUgPSBmb3JtQ29udHJvbCAmJiBmb3JtQ29udHJvbC4gfHwgbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5tZXJnZU1lc3NhZ2UocmVzdWx0LmZvcm0sIGZyYW1lQ29udGV4dCwgZG9tUHJvcGVydHlOYW1lLCBtZXNzYWdlKTtcbiAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIC8vaWYgKGZvcm1Db250cm9sICYmIGRvbVByb3BlcnR5TmFtZSkge1xuXG4gICAgICAgICAgICAgICAgLy99XG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgLy8g5bCG6ZSZ6K+v5L+h5oGv5pS+5Yiw5rGH5oC75LitXG4gICAgICAgICAgZnJhbWVDb250ZXh0cy5mb3JFYWNoKChmcmFtZUNvbnRleHQ6IEZyYW1lQ29udGV4dCkgPT4ge1xuICAgICAgICAgICAgY29uc3Qgdmlld01vZGVsTmFtZSA9IGZyYW1lQ29udGV4dC52aWV3TW9kZWwuZm9ybS5mb3JtR3JvdXBOYW1lO1xuICAgICAgICAgICAgY29uc3QgZm9ybUNvbnRyb2xzID0gdGhpcy5nZXRGb3JtQ29udHJvbEJ5Q29sdW1uTmFtZShmcmFtZUNvbnRleHQsIGNvbHVtbik7XG4gICAgICAgICAgICBpZiAoZm9ybUNvbnRyb2xzICYmIGZvcm1Db250cm9scy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgIGNvbnN0IFtkb21Qcm9wZXJ0eU5hbWUsIGZvcm1Db250cm9sXSA9IGZvcm1Db250cm9scy5maW5kKChbcHJvcGVydHlOYW1lLCBmb3JtQ29udHJvbF0pID0+IHByb3BlcnR5TmFtZSAmJiBwcm9wZXJ0eU5hbWUubGVuZ3RoID4gMCk7XG4gICAgICAgICAgICAgIC8vIGNvbnN0IGRvbVByb3BlcnR5TmFtZSA9IGRvbVByb3BlcnR5ICYmIGRvbVByb3BlcnR5LnByb3BlcnR5TmFtZTtcbiAgICAgICAgICAgICAgY29uc3QgYmluZGluZ0xpc3QgPSBmcmFtZUNvbnRleHQudmlld01vZGVsLmJpbmRpbmdEYXRhLmdldFZhbHVlKGJpbmRpbmdQYXRocykgYXMgQmluZGluZ0xpc3Q7XG4gICAgICAgICAgICAgIGxldCBpbmRleCA9IGJpbmRpbmdMaXN0LmdldEluZGV4QnlJZChyb3cpO1xuICAgICAgICAgICAgICBjb25zdCBwcmltYXJ5ID0gYCR7cm93fV8ke2NvbHVtbn1fJHttZXNzYWdlfWA7XG4gICAgICAgICAgICAgIC8vIFRPRE866Jm954S26IO957qg5q2j5rGH5oC75raI5oGv5pi+56S66YeN5aSN55qE6Zeu6aKY77yM5L2G5Y+v6IO95a+86Ie054K55Ye76ZSZ6K+v5peg5rOV5a6a5L2N5Yiw5a+55bqU5o6n5Lu255qE6Zeu6aKY77yM5b6F5ZCO57ut5LyY5YyWXG4gICAgICAgICAgICAgIGlmIChpbmRleCA+PSAwICYmIHJlc3VsdC5hbGwuZmluZEluZGV4KHAgPT4gcC5pZCA9PT0gcHJpbWFyeSkgPT09IC0xKSB7XG4gICAgICAgICAgICAgICAgLy8g5pWw5o2u5rqQ5Lit5pyJ5aSa5LqOMeihjOaXtuaYvuekuue0ouW8lVxuICAgICAgICAgICAgICAgIGNvbnN0IHBvc2l0aW9uID0gKGJpbmRpbmdMaXN0ICYmIGJpbmRpbmdMaXN0Lmxlbmd0aCA+IDEpID8gKGluZGV4ICsgMSkgOiAtMTtcbiAgICAgICAgICAgICAgICBjb25zdCB0aXRsZSA9IHRoaXMuYnVpbGRJdGVtVGl0bGUodmlld01vZGVsTmFtZSwgZm9ybUNvbnRyb2wubmFtZSB8fCBmb3JtQ29udHJvbC5kZWZhdWx0STE4blZhbHVlIHx8IGRvbVByb3BlcnR5TmFtZSwgcG9zaXRpb24pO1xuICAgICAgICAgICAgICAgIGNvbnN0IGl0ZW0gPSB7XG4gICAgICAgICAgICAgICAgICBpZDogcHJpbWFyeSxcbiAgICAgICAgICAgICAgICAgIGluZGV4LFxuICAgICAgICAgICAgICAgICAgdGFyZ2V0RmllbGQ6IGZvcm1Db250cm9sLmlkLFxuICAgICAgICAgICAgICAgICAgdGl0bGUsXG4gICAgICAgICAgICAgICAgICBtc2c6IG1lc3NhZ2UsXG4gICAgICAgICAgICAgICAgICBuYW1lc3BhY2U6IG5zLFxuICAgICAgICAgICAgICAgICAgYmluZGluZ1BhdGgsXG4gICAgICAgICAgICAgICAgICB0eXBlOiAnZXJyb3InXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICByZXN1bHQuYWxsLnB1c2goaXRlbSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChoYXNGb3JtbGVzc0Vycm9yICYmIGlzRXhjZXB0aW9uICYmICFoYXNUaHJvd0Vycm9yICYmIGV2ZW50QnVzKSB7XG4gICAgICBldmVudEJ1cy5wb3N0KCdFeGNlcHRpb24nLCAnJywgJ29uRXhjZXB0aW9uJywgZXJyb3IsIGZvcm1BcHBDb250ZXh0KTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuICBwcml2YXRlIG1lcmdlTWVzc2FnZShmb3JtSXRlbXM6IHsgZnJhbWVDb250ZXh0OiBGcmFtZUNvbnRleHQsIG1lc3NhZ2U6IHsgW2RvbVByb3BlcnR5TmFtZTogc3RyaW5nXTogeyBlcnJvcnM6IHsgW21lc3NhZ2VUeXBlOiBzdHJpbmddOiB7IG5hbWU6IHN0cmluZyB9IH0gfSB9IH1bXSwgZnJhbWVDb250ZXh0OiBGcmFtZUNvbnRleHQsIGRvbVByb3BlcnR5TmFtZTogc3RyaW5nLCBtZXNzYWdlOiBzdHJpbmcpIHtcbiAgICBjb25zdCB0YXJnZXRJdGVtID0gZm9ybUl0ZW1zLmZpbmQoaXRlbSA9PiBpdGVtLmZyYW1lQ29udGV4dC5mcmFtZUlkID09PSBmcmFtZUNvbnRleHQuZnJhbWVJZCk7XG4gICAgaWYgKHRhcmdldEl0ZW0pIHtcbiAgICAgIGNvbnN0IGlzUHJvcGVydHlFeGlzdCA9IHRhcmdldEl0ZW0ubWVzc2FnZSAmJiBPYmplY3Qua2V5cyh0YXJnZXRJdGVtLm1lc3NhZ2UpLmluY2x1ZGVzKGRvbVByb3BlcnR5TmFtZSk7XG4gICAgICBjb25zdCBtZXNzYWdlVHlwZSA9IGBiYWNrZW5kLW1lc3NhZ2UtJHtPYmplY3Qua2V5cyh0YXJnZXRJdGVtLm1lc3NhZ2UpLmxlbmd0aCArIDF9YDtcbiAgICAgIGlmIChpc1Byb3BlcnR5RXhpc3QpIHtcbiAgICAgICAgdGFyZ2V0SXRlbS5tZXNzYWdlW2RvbVByb3BlcnR5TmFtZV1bJ2Vycm9ycyddW21lc3NhZ2VUeXBlXSA9IHsgbmFtZTogbWVzc2FnZSB9O1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGFyZ2V0SXRlbS5tZXNzYWdlW2RvbVByb3BlcnR5TmFtZV0gPSB7IGVycm9yczogeyBbbWVzc2FnZVR5cGVdOiB7IG5hbWU6IG1lc3NhZ2UgfSB9IH07XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGZvcm1JdGVtcy5wdXNoKHtcbiAgICAgICAgZnJhbWVDb250ZXh0OiBmcmFtZUNvbnRleHQsXG4gICAgICAgIG1lc3NhZ2U6IHtcbiAgICAgICAgICBbZG9tUHJvcGVydHlOYW1lXToge1xuICAgICAgICAgICAgZXJyb3JzOiB7XG4gICAgICAgICAgICAgICdiYWNrZW5kLW1lc3NhZ2UtMSc6IHsgbmFtZTogbWVzc2FnZSB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG4gIH1cbiAgcHJpdmF0ZSBidWlsZEl0ZW1UaXRsZSh2aWV3TW9kZWxOYW1lOiBzdHJpbmcsIHByb3BlcnR5TmFtZTogc3RyaW5nLCBpbmRleDogYW55KSB7XG4gICAgY29uc3QgdGVtcGxhdGUgPSB7XG4gICAgICAnemgtQ0hTJzoge1xuICAgICAgICB2aWV3TW9kZWxOYW1lOiBgJHZpZXdNb2RlbGAsXG4gICAgICAgIGluZGV4OiBg56ysICRpbmRleCDooYxgLFxuICAgICAgICBwcm9wZXJ0eU5hbWU6IGAtICRwcm9wZXJ0eU5hbWVgXG4gICAgICB9LFxuICAgICAgJ2VuJzoge1xuICAgICAgICB2aWV3TW9kZWxOYW1lOiBgJHZpZXdNb2RlbGAsXG4gICAgICAgIGluZGV4OiBgcm93ICRpbmRleGAsXG4gICAgICAgIHByb3BlcnR5TmFtZTogYC0gJHByb3BlcnR5TmFtZWBcbiAgICAgIH0sXG4gICAgICAnemgtQ0hUJzoge1xuICAgICAgICB2aWV3TW9kZWxOYW1lOiBgJHZpZXdNb2RlbGAsXG4gICAgICAgIGluZGV4OiBg56ysICRpbmRleCDooYxgLFxuICAgICAgICBwcm9wZXJ0eU5hbWU6IGAtICRwcm9wZXJ0eU5hbWVgXG4gICAgICB9XG4gICAgfTtcbiAgICBjb25zdCBjdXJyZW50TGFuZ3VhZ2UgPSB0aGlzLnRyYW5zbGF0ZS5nZXRDdXJyZW50TGFuZ3VhZ2UoKSB8fCAnemgtQ0hTJztcbiAgICBjb25zdCBtZXNzYWdlID0gW107XG4gICAgaWYgKHZpZXdNb2RlbE5hbWUpIHtcbiAgICAgIG1lc3NhZ2UucHVzaCh0ZW1wbGF0ZVtjdXJyZW50TGFuZ3VhZ2VdWyd2aWV3TW9kZWxOYW1lJ10ucmVwbGFjZSgnJHZpZXdNb2RlbCcsIHZpZXdNb2RlbE5hbWUpKTtcbiAgICB9XG4gICAgaWYgKGluZGV4ID4gMCkge1xuICAgICAgbWVzc2FnZS5wdXNoKHRlbXBsYXRlW2N1cnJlbnRMYW5ndWFnZV1bJ2luZGV4J10ucmVwbGFjZSgnJGluZGV4JywgaW5kZXgpKTtcbiAgICB9XG4gICAgaWYgKHByb3BlcnR5TmFtZSkge1xuICAgICAgbWVzc2FnZS5wdXNoKHRlbXBsYXRlW2N1cnJlbnRMYW5ndWFnZV1bJ3Byb3BlcnR5TmFtZSddLnJlcGxhY2UoJyRwcm9wZXJ0eU5hbWUnLCBwcm9wZXJ0eU5hbWUpKTtcbiAgICB9XG4gICAgcmV0dXJuIG1lc3NhZ2Uuam9pbignICcpO1xuICB9XG4gIC8qKlxuICAgKiDmoLnmja7ooajlkI3miJZub2RlQ29kZeiOt+WPlue7keWumui3r+W+hFxuICAgKiBAcGFyYW0gYXBwQ29udGV4dCBhcHBDb250ZXh0XG4gICAqIEBwYXJhbSBucyBuc1xuICAgKiBAcGFyYW0gbm9kZUNvZGUg6KGo5ZCNXG4gICAqL1xuICBwcml2YXRlIGdldEJpbmRpbmdQYXRoKGFwcENvbnRleHQ6IEFwcENvbnRleHQsIG5zOiBzdHJpbmcsIG5vZGVDb2RlOiBzdHJpbmcpIHtcbiAgICBjb25zdCBmcmFtZUNvbnRleHQgPSB0aGlzLmdldEZyYW1lQ29udGV4dChhcHBDb250ZXh0LCBucyk7XG4gICAgcmV0dXJuIGZyYW1lQ29udGV4dC5yZXBvc2l0b3J5LmVudGl0eVR5cGVJbmZvLmdldEJpbmRpbmdQYXRoQnlUYWJsZU5hbWUobm9kZUNvZGUpO1xuICB9XG4gIC8qKlxuICAgKiDpgJrov4fnu5Hlrprot6/lvoTlkozliJflkI3mib7liLDmiYDmnInnrKblkIjmnaHku7bnmoTop4blm77mqKHlnoso5YyF5ousZ3JpZOWSjGZvcm0pXG4gICAqIEBwYXJhbSBhcHBDb250ZXh0IGFwcENvbnRleHRcbiAgICogQHBhcmFtIG5zIG5hbWVzcGFjZVxuICAgKiBAcGFyYW0gYmluZGluZ1BhdGgg57uR5a6a6Lev5b6EXG4gICAqIEBwYXJhbSBjb2x1bW5OYW1lIOWIl+WQjVxuICAgKi9cbiAgcHJpdmF0ZSBnZXRGcmFtZUNvbnRleHRzQnlCaW5kaW5nUGF0aEFuZENvbHVtbk5hbWUoYXBwQ29udGV4dDogQXBwQ29udGV4dCwgbnM6IHN0cmluZywgYmluZGluZ1BhdGg6IHN0cmluZywgY29sdW1uTmFtZTogc3RyaW5nKTogRnJhbWVDb250ZXh0W10ge1xuICAgIGxldCBmcmFtZUNvbnRleHRzID0gYXBwQ29udGV4dC5mcmFtZUNvbnRleHRNYW5hZ2VyLmdldEZyYW1lQ29udGV4dHMoKTtcbiAgICBpZiAoZnJhbWVDb250ZXh0cyAmJiBmcmFtZUNvbnRleHRzLmxlbmd0aCA+IDApIHtcbiAgICAgIC8vIOaJvuWIsGZvcm3kuK3mnInmjqfku7bnmoRmcmFtZUNvbnRleHRcbiAgICAgIGZyYW1lQ29udGV4dHMgPSBmcmFtZUNvbnRleHRzLmZpbHRlcigoZnJhbWVDb250ZXh0OiBGcmFtZUNvbnRleHQpID0+IHtcbiAgICAgICAgLy8g5Z+65pys5p2h5Lu25piv5ZCm5ruh6LazXG4gICAgICAgIGxldCBpc1ZhbGlkRnJhbWVDb250ZXh0ID0gZnJhbWVDb250ZXh0Lm5hbWVzcGFjZSA9PT0gbnMgJiYgZnJhbWVDb250ZXh0LnZpZXdNb2RlbC5iaW5kaW5nUGF0aCA9PT0gYmluZGluZ1BhdGggJiYgZnJhbWVDb250ZXh0LnZpZXdNb2RlbC5mb3JtICYmIGZyYW1lQ29udGV4dC52aWV3TW9kZWwuZm9ybS5jb250cm9scyAmJiBPYmplY3Qua2V5cyhmcmFtZUNvbnRleHQudmlld01vZGVsLmZvcm0uY29udHJvbHMpLmxlbmd0aCA+IDA7XG4gICAgICAgIGlmICghaXNWYWxpZEZyYW1lQ29udGV4dCkge1xuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICAvLyDlho3pgJrov4fliJflkI3ov4fmu6RcbiAgICAgICAgY29uc3QgYmluZGluZ1BhdGhzID0gYmluZGluZ1BhdGguc3BsaXQoJy8nKS5maWx0ZXIocCA9PiBwKTtcbiAgICAgICAgY29uc3QgZGF0YVR5cGVJbmZvID0gZnJhbWVDb250ZXh0LnJlcG9zaXRvcnkuZW50aXR5VHlwZUluZm8uZ2V0VHlwZUluZm9CeVBhdGgoYmluZGluZ1BhdGhzKTtcbiAgICAgICAgaWYgKGRhdGFUeXBlSW5mbykge1xuICAgICAgICAgIGNvbnN0IGRhdGFQcm9wSW5mb3MgPSBBcnJheS5mcm9tKGRhdGFUeXBlSW5mby5wcm9wSW5mb01hcC52YWx1ZXMoKSk7XG4gICAgICAgICAgLy8g5LuO5b2T5YmN5a6e5L2T5bGe5oCn5Lit5om+5Yiw5pWw5o2u5a2X5q615Li65YiX5ZCN55qE5bGe5oCnXG4gICAgICAgICAgY29uc3QgZW50aXR5UHJvcGVydHlJbmZvID0gZGF0YVByb3BJbmZvcy5maW5kKChwcm9wSW5mbzogRGF0YVByb3BJbmZvKSA9PiBwcm9wSW5mby5tZXRhZGF0YUluZm8gJiYgKHByb3BJbmZvLm1ldGFkYXRhSW5mby5vcmlnaW5hbERhdGFGaWVsZCA9PT0gY29sdW1uTmFtZSB8fCBwcm9wSW5mby5tZXRhZGF0YUluZm8uZGF0YUZpZWxkID09PSBjb2x1bW5OYW1lKSk7XG4gICAgICAgICAgaWYgKGVudGl0eVByb3BlcnR5SW5mbykge1xuICAgICAgICAgICAgY29uc3QgZW50aXR5UHJvcGVydHlOYW1lID0gZW50aXR5UHJvcGVydHlJbmZvLm5hbWU7XG4gICAgICAgICAgICBjb25zdCBuZ0Zvcm1Db250cm9sID0gT2JqZWN0LnZhbHVlcyhmcmFtZUNvbnRleHQudmlld01vZGVsLmZvcm0ubmdGb3JtQ29udHJvbHMpLmZpbmQoaXRlbSA9PiBpdGVtLmJpbmRpbmcgPT09IGVudGl0eVByb3BlcnR5TmFtZSk7XG4gICAgICAgICAgICBpZiAobmdGb3JtQ29udHJvbCkge1xuICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIGNvbnN0IGl0ZW0gPSBPYmplY3Qua2V5cyhmcmFtZUNvbnRleHQudmlld01vZGVsLmZvcm0ubmdGb3JtQ29udHJvbHMpLmZpbmQoa2V5ID0+IGtleSA9PT0gZW50aXR5UHJvcGVydHlOYW1lKTtcbiAgICAgICAgICAgICAgcmV0dXJuIGl0ZW0gPyB0cnVlIDogZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIHJldHVybiBmcmFtZUNvbnRleHRzO1xuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuICAvKipcbiAgICog5piv5ZCm5Li6ZGF0YWdyaWTnu4Tku7ZcbiAgICogQHBhcmFtIGZyYW1lQ29tcG9uZW50IGNvbXBvbmVudFxuICAgKi9cbiAgcHJpdmF0ZSBpc0RhdGFHcmlkQ29tcG9uZW50KGZyYW1lQ29tcG9uZW50OiBGcmFtZUNvbXBvbmVudCkge1xuICAgIGNvbnN0IGNvbHVtbk5hbWVzID0gZnJhbWVDb21wb25lbnQuY29udGV4dC52aWV3TW9kZWxbJ2RhdGFHcmlkQ29sdW1uc05hbWUnXSB8fCBudWxsO1xuICAgIHJldHVybiBjb2x1bW5OYW1lcyA/IHRydWUgOiBmYWxzZTtcbiAgfVxuICAvKipcbiAgICogZ3JpZOe7hOS7tuaYr+WQpuaYr+WPquivu+eahFxuICAgKiBAcGFyYW0gZnJhbWVDb21wb25lbnQgZnJhbWVDb21wb25lbnRcbiAgICogQHJldHVybnMgXG4gICAqL1xuICBwcml2YXRlIGlzUmVhZG9ubHlEYXRhR3JpZChmcmFtZUNvbXBvbmVudDogRnJhbWVDb21wb25lbnQpIHtcbiAgICBjb25zdCBmcmFtZUNvbnRleHQgPSBmcmFtZUNvbXBvbmVudC5jb250ZXh0O1xuICAgIGNvbnN0IGRhdGFHcmlkQ29sdW1uc05hbWUgPSBmcmFtZUNvbnRleHQudmlld01vZGVsWydkYXRhR3JpZENvbHVtbnNOYW1lJ10gfHwgbnVsbDtcbiAgICBpZiAoZGF0YUdyaWRDb2x1bW5zTmFtZSkge1xuICAgICAgY29uc3QgZGF0YWdyaWRDb2x1bW5zOiBhbnlbXSA9IGZyYW1lQ29udGV4dC52aWV3TW9kZWxbZGF0YUdyaWRDb2x1bW5zTmFtZV07XG4gICAgICByZXR1cm4gZGF0YWdyaWRDb2x1bW5zLmV2ZXJ5KChncm91cDogQXJyYXk8YW55PikgPT4ge1xuICAgICAgICByZXR1cm4gZ3JvdXAuZXZlcnkoaXRlbSA9PiAhaXRlbS5lZGl0b3IpO1xuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihg5Lyg5YWl55qE57uE5Lu25LiN5piv5LiA5Liq6KGo5qC877yBYCk7XG4gICAgfVxuICB9XG4gIC8qKlxuICAgKiBpZOaYr+WQpuS4uuW9k+WJjeihjFxuICAgKiBAcGFyYW0gYXBwQ29udGV4dCBhcHBDb250ZXh0XG4gICAqIEBwYXJhbSBucyBuYW1lc3BhY2VcbiAgICogQHBhcmFtIGJpbmRpbmdQYXRoIGJpbmRpbmdQYXRoXG4gICAqIEBwYXJhbSBpZCBpZFxuICAgKi9cbiAgcHJpdmF0ZSBpc0N1cnJlbnRSb3coYXBwQ29udGV4dDogQXBwQ29udGV4dCwgbnM6IHN0cmluZywgYmluZGluZ1BhdGg6IHN0cmluZywgaWQ6IHN0cmluZykge1xuICAgIGNvbnN0IGJpbmRpbmdQYXRocyA9IGJpbmRpbmdQYXRoLnNwbGl0KCcvJykuZmlsdGVyKHAgPT4gcCk7XG4gICAgY29uc3QgZnJhbWVDb250ZXh0ID0gdGhpcy5nZXRGcmFtZUNvbnRleHQoYXBwQ29udGV4dCwgbnMpO1xuICAgIGNvbnN0IGJpbmRpbmdEYXRhID0gZnJhbWVDb250ZXh0LmJpbmRpbmdEYXRhO1xuICAgIGNvbnN0IGJpbmRpbmdMaXN0ID0gYmluZGluZ0RhdGEuZ2V0VmFsdWUoYmluZGluZ1BhdGhzKSBhcyBCaW5kaW5nTGlzdDtcbiAgICByZXR1cm4gYmluZGluZ0xpc3QuY3VycmVudEl0ZW0ucHJpbWFyeUtleVZhbHVlID09PSBpZDtcbiAgfVxuICAvKipcbiAgICog6I635Y+W5b2T5YmNbnPkuIvnmoRyb290RnJhbWVDb250ZXh0XG4gICAqIEBwYXJhbSBhcHBDb250ZXh0IGFwcGNvbnRleHRcbiAgICogQHBhcmFtIG5zIG5hbWVzcGFjZVxuICAgKi9cbiAgcHJpdmF0ZSBnZXRGcmFtZUNvbnRleHQoYXBwQ29udGV4dDogQXBwQ29udGV4dCwgbnM6IHN0cmluZykge1xuICAgIGNvbnN0IGZyYW1lQ29udGV4dHMgPSBhcHBDb250ZXh0LmZyYW1lQ29udGV4dE1hbmFnZXIuZ2V0RnJhbWVDb250ZXh0cygpO1xuICAgIGlmIChmcmFtZUNvbnRleHRzICYmIGZyYW1lQ29udGV4dHMubGVuZ3RoID4gMCkge1xuICAgICAgY29uc3QgcmFuZG9tRnJhbWVDb250ZXh0ID0gZnJhbWVDb250ZXh0cy5maW5kKGZyYW1lQ29udGV4dCA9PiBmcmFtZUNvbnRleHQubmFtZXNwYWNlID09PSBucyk7XG4gICAgICBpZiAocmFuZG9tRnJhbWVDb250ZXh0KSB7XG4gICAgICAgIGNvbnN0IHZpcnR1YWxSb290RnJhbWVDb250ZXh0ID0gcmFuZG9tRnJhbWVDb250ZXh0LmdldFZpcnR1YWxSb290RnJhbWVDb250ZXh0KCk7XG4gICAgICAgIHJldHVybiB2aXJ0dWFsUm9vdEZyYW1lQ29udGV4dDtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbiAgLyoqXG4gICAqIOmAmui/h+e7keWumui3r+W+hOWSjOWIl+WQjeiOt+WPlue7keWumuWIsOivpeWIl+eahGZvcm1Db250cm9sXG4gICAqL1xuICBwcml2YXRlIGdldEZvcm1Db250cm9sQnlDb2x1bW5OYW1lKGZyYW1lQ29udGV4dDogRnJhbWVDb250ZXh0LCBjb2x1bW5OYW1lOiBzdHJpbmcpOiBBcnJheTxbc3RyaW5nLCBOZ0Zvcm1Db250cm9sXT4ge1xuICAgIGNvbnN0IGJpbmRpbmdQYXRocyA9IGZyYW1lQ29udGV4dC52aWV3TW9kZWwuYmluZGluZ1BhdGguc3BsaXQoJy8nKS5maWx0ZXIocCA9PiBwKTtcbiAgICAvLyDpgJrov4diaW5kaW5nUGF0aOaJvuWIsOWvueW6lOeahOWunuS9k+S/oeaBr1xuICAgIGNvbnN0IHR5cGVJbmZvID0gZnJhbWVDb250ZXh0LnJlcG9zaXRvcnkuZW50aXR5VHlwZUluZm8uZ2V0VHlwZUluZm9CeVBhdGgoYmluZGluZ1BhdGhzKTtcblxuICAgIGNvbnN0IHByb3BzSW5mbyA9IEFycmF5LmZyb20odHlwZUluZm8ucHJvcEluZm9NYXAudmFsdWVzKCkpO1xuICAgIGNvbnN0IHByb3BJbmZvID0gcHJvcHNJbmZvLmZpbmQoKHByb3BJbmZvOiBEYXRhUHJvcEluZm8pID0+IHByb3BJbmZvLm1ldGFkYXRhSW5mbyAmJiAocHJvcEluZm8ubWV0YWRhdGFJbmZvLm9yaWdpbmFsRGF0YUZpZWxkID09PSBjb2x1bW5OYW1lIHx8IHByb3BJbmZvLm1ldGFkYXRhSW5mby5kYXRhRmllbGQgPT09IGNvbHVtbk5hbWUpKTtcbiAgICBpZiAocHJvcEluZm8pIHtcbiAgICAgIGNvbnN0IG1hcHBpbmdOYW1lID0gcHJvcEluZm8ubmFtZTtcbiAgICAgIGNvbnN0IGZvcm1Db250cm9sczogQXJyYXk8W3N0cmluZywgTmdGb3JtQ29udHJvbF0+ID0gT2JqZWN0LmVudHJpZXMoZnJhbWVDb250ZXh0LnZpZXdNb2RlbC5mb3JtLm5nRm9ybUNvbnRyb2xzKS5maWx0ZXIoKGl0ZW0pID0+IGl0ZW1bMV0uYmluZGluZyA9PT0gbWFwcGluZ05hbWUgfHwgaXRlbVswXSA9PT0gbWFwcGluZ05hbWUpO1xuICAgICAgLy8gY29uc3QgbmdGb3JtQ29udHJvbCA9IE9iamVjdC52YWx1ZXMoZnJhbWVDb250ZXh0LnZpZXdNb2RlbC5mb3JtLm5nRm9ybUNvbnRyb2xzKS5maW5kKGl0ZW0gPT4gaXRlbS5iaW5kaW5nID09PSBtYXBwaW5nTmFtZSk7XG4gICAgICBpZiAoZm9ybUNvbnRyb2xzKSB7XG4gICAgICAgIHJldHVybiBmb3JtQ29udHJvbHM7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBudWxsO1xuICB9XG4gIHByaXZhdGUgcmVzZXRGb3JtTWVzc2FnZShhcHBDb250ZXh0OiBBcHBDb250ZXh0LCBuczogc3RyaW5nKSB7XG4gICAgY29uc3QgZnJhbWVDb250ZXh0cyA9IGFwcENvbnRleHQuZnJhbWVDb250ZXh0TWFuYWdlci5nZXRGcmFtZUNvbnRleHRzKCkuZmlsdGVyKGZyYW1lQ29udGV4dCA9PiBmcmFtZUNvbnRleHQubmFtZXNwYWNlID09PSBucyk7XG4gICAgZnJhbWVDb250ZXh0cy5mb3JFYWNoKGZyYW1lQ29udGV4dCA9PiBmcmFtZUNvbnRleHQgJiYgZnJhbWVDb250ZXh0LnZpZXdNb2RlbCAmJiBmcmFtZUNvbnRleHQudmlld01vZGVsLmZvcm0gJiYgZnJhbWVDb250ZXh0LnZpZXdNb2RlbC5mb3JtLmNsZWFyQmFja2VuZEVycm9yKCkpO1xuICB9XG4gIC8qKlxuICAgKiDpgJLlvZLmib7liLDlsZXnpLrmtojmga/nmoTnu4Tku7bkuIrkuIvmlodcbiAgICogQHBhcmFtIGZyYW1lQ29udGV4dCBmcmFtZUNvbnRleHRcbiAgICovXG4gIHByaXZhdGUgZmluZFRhcmdldEZyYW1lQ29udGV4dChmcmFtZUNvbnRleHQ6IEZyYW1lQ29udGV4dCk6IEZyYW1lQ29udGV4dCB7XG4gICAgY29uc3QgdmlydHVhbFJvb3RGcmFtZUNvbnRleHQgPSBmcmFtZUNvbnRleHQuZ2V0VmlydHVhbFJvb3RGcmFtZUNvbnRleHQoKTtcbiAgICBjb25zdCB2aXJ0dWFsUm9vdENvbXBvbmVudCA9IHZpcnR1YWxSb290RnJhbWVDb250ZXh0LmZyYW1lQ29tcG9uZW50O1xuICAgIGNvbnN0IGlzRGlhbG9nQ29tcG9uZW50ID0gdmlydHVhbFJvb3RDb21wb25lbnQgJiYgdmlydHVhbFJvb3RDb21wb25lbnRbJ2lzRGlhbG9nUm9vdENvbXBvbmVudCddIHx8IGZhbHNlO1xuICAgIGlmIChpc0RpYWxvZ0NvbXBvbmVudCkge1xuICAgICAgLy8g5aaC5p6c5raI5oGv5aSE55CG5pyN5Yqh5piv5by556qX5YaF55qE77yM5YiZ5raI5oGv5o+Q56S65bGV56S65Zyo5by556qX5YaFXG4gICAgICByZXR1cm4gdmlydHVhbFJvb3RGcmFtZUNvbnRleHQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIOW9k+WJjea2iOaBr+acjeWKoeS4jeWcqOW8ueeql+WGhe+8jOmAkuW9kuWQkeS4iuafpeaJvu+8jOaJvuWIsOesrOS4gOS4quW8ueeql++8jOWmguaenOaJvuS4jeWIsOWImeaJvuWIsOacgOS4iueahHJvb3QtY29tcG9uZW50XG4gICAgICBjb25zdCBwYXJlbnRGcmFtZUNvbnRleHQgPSB2aXJ0dWFsUm9vdEZyYW1lQ29udGV4dC5wYXJlbnQ7XG4gICAgICBpZiAocGFyZW50RnJhbWVDb250ZXh0KSB7XG4gICAgICAgIHJldHVybiB0aGlzLmZpbmRUYXJnZXRGcmFtZUNvbnRleHQocGFyZW50RnJhbWVDb250ZXh0KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiB2aXJ0dWFsUm9vdEZyYW1lQ29udGV4dDtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn0iXX0=