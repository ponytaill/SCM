/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Renderer2, ElementRef, NgZone, Injector, ViewChild } from '@angular/core';
import { DatagridBaseEditorDirective } from '../datagrid-base-editor.directive';
import { ComboListComponent } from '@farris/ui-combo-list';
import { ComboListDefaultOptions } from '../editor-default-options';
export class DatagridComboListComponent extends DatagridBaseEditorDirective {
    /**
     * @param {?} render
     * @param {?} el
     * @param {?} ngzone
     * @param {?} injector
     */
    constructor(render, el, ngzone, injector) {
        super(render, el, injector);
        this.ngzone = ngzone;
        this.injector = injector;
        this.stopPropagation = false;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        super.ngOnInit();
        this.options = Object.assign({}, ComboListDefaultOptions, this.options);
        if (this.options.showClear !== undefined) {
            this.options.enableClear = this.options.showClear;
        }
        if (this.formControl && this.formControl.value) {
            this.options.selectedValues = this.formControl.value;
        }
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        this.inputElement = this.instance.input.textbox.nativeElement;
        super.ngAfterViewInit();
        // setTimeout(() => {
        //     this.instance.show();
        // });
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        super.ngOnDestroy();
        this.inputElement = null;
    }
    // onBeforeShow = () => {
    //     if (this.options.beforeShow) {
    //         return this.options.beforeShow(this);
    //     }
    //     return of(true);
    // }
    // onBeforeHide = () => {
    //     if (this.options.beforeHide) {
    //         return this.options.beforeHide(this);
    //     }
    //     return of(true);
    // }
    /**
     * @param {?} $event
     * @return {?}
     */
    onShowPanel($event) {
        if (this.options.showPanel) {
            this.options.showPanel(this.eventPrams($event));
        }
        else if (this.options.onShown) {
            this.options.onShown(this.eventPrams($event));
        }
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    onHidePanel($event) {
        if (this.options.hidePanel) {
            this.options.hidePanel(this.eventPrams($event));
        }
        else if (this.options.onHidden) {
            this.options.onHidden(this.eventPrams($event));
        }
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    onClear($event) {
        if (this.options.clear) {
            this.options.clear(this.eventPrams($event));
        }
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    onValueChange($event) {
        if (this.options.valueChange) {
            this.options.valueChange(this.eventPrams($event));
        }
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    onSelectChange($event) {
        if (this.options.selectChange) {
            this.options.selectChange(this.eventPrams($event));
        }
    }
    /**
     * @return {?}
     */
    hide() {
        this.instance.hide();
    }
    /**
     * @private
     * @param {?} $event
     * @return {?}
     */
    eventPrams($event) {
        /** @type {?} */
        const p = this.eventParams($event);
        p['instance'] = this.instance;
        p['editor'] = this;
        return p;
    }
}
DatagridComboListComponent.decorators = [
    { type: Component, args: [{
                selector: 'grid-editor-combolist',
                template: `
        <div [formGroup]="group" class="f-datagrid-cell-formgroup farris-group-auto">
            <farris-combo-list #cmblist style="width: 100%"
                [formControlName]="column.field"
                [readonly]= "options.readonly"
                [editable]= "options.editable"
                [(selectedValues)]="options.selectedValues"
                [idField]="options.idField"
                [textField]="options.textField"
                [multiSelect]="options.multiSelect"
                [valueField]="options.valueField"
                [uri]="options.uri"
                [data]="options.data"
                [nosearch]="options.nosearch"
                [maxLength]="options?.maxLength"
                [context]="options?.context"
                [itemTemplate]="options?.itemTemplate"
                [enableClear]="options.enableClear"
                [autoWidth]="options.autoWidth"
                [panelHeight]="options.panelHeight"
                [panelWidth]="options.panelWidth"
                [enableCancelSelected]="options.enableCancelSelected"
                [beforeShow]="options?.beforeShow"
                [beforeHide]="options?.beforeHide"
                (showPanel)="onShowPanel($event)"
                (hidePanel)="onHidePanel($event)"
                (clear)="onClear($event)"
                (valueChange)="onValueChange($event)"
                (selectChange)="onSelectChange($event)"
                [showPanelType]="options?.showPanelEvent || 'click'"
                [mappingField]="options?.mappingField"
            ></farris-combo-list>
        </div>
    `
            }] }
];
/** @nocollapse */
DatagridComboListComponent.ctorParameters = () => [
    { type: Renderer2 },
    { type: ElementRef },
    { type: NgZone },
    { type: Injector }
];
DatagridComboListComponent.propDecorators = {
    instance: [{ type: ViewChild, args: ['cmblist',] }]
};
if (false) {
    /** @type {?} */
    DatagridComboListComponent.prototype.stopPropagation;
    /** @type {?} */
    DatagridComboListComponent.prototype.instance;
    /**
     * @type {?}
     * @private
     */
    DatagridComboListComponent.prototype.ngzone;
    /** @type {?} */
    DatagridComboListComponent.prototype.injector;
}
//# sourceMappingURL=data:application/json;base64,