import * as tslib_1 from "tslib";
import { Subject } from 'rxjs';
import { ChangeSet } from '../changeset/change_set';
import { ModifyType } from '../changeset/types';
import { Entity } from './entity';
import { EntityFactory } from './entity_creator';
import { PARENT_CLASS, PARENT_PATH } from './types';
/**
 * 实体集合列表
 */
var EntityList = /** @class */ (function () {
    // #endregion
    /**
     * @param data JSON数据集合
     * @param type 集合中的实体类型
     */
    function EntityList(data, type) {
        var _this = this;
        /**
         * 已废弃：请勿使用
         */
        this.listChanged = new Subject();
        /**
         * 已废弃：请勿使用
         */
        this.changeSet = new ChangeSet();
        // #endregion
        // #region 公有属性
        /**
         * 集合改变时触发(新增、行记录修改、删除)
         * @event
         */
        this.onListChanged = this.listChanged.asObservable();
        this.clear();
        if (data) {
            // this.loadEntities(data);
            data.forEach(function (item) {
                _this.initEntity(EntityFactory(type, item));
            });
        }
    }
    Object.defineProperty(EntityList.prototype, "items", {
        /**
         * 获取项集合
         */
        get: function () {
            return this.rawData;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(EntityList.prototype, "changes", {
        /**
         * 列表变更集
         */
        get: function () {
            return this.changeSet.changes;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * 迭代器
     */
    EntityList.prototype[Symbol.iterator] = function () {
        return tslib_1.__generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [5 /*yield**/, tslib_1.__values(this.items)];
                case 1:
                    _a.sent();
                    return [2 /*return*/];
            }
        });
    };
    // #region 公有方法
    /** 加载实体列表 */
    EntityList.prototype.loadEntities = function (entities) {
        var _this = this;
        this.clear();
        entities.forEach(function (entity) {
            _this.initEntity(entity);
        });
        // 发送Load变更
        var changeItem = {
            path: [],
            value: entities,
            preValue: undefined,
            type: ModifyType.Load
        };
        this.setChanges(changeItem);
    };
    /**
     * 清空
     */
    EntityList.prototype.clear = function () {
        this.rawData = [];
    };
    /**
     * 添加实体对象到集合中，并返回新加的对象
     * @param entity 实体对象
     */
    EntityList.prototype.appendNew = function (entity) {
        var newEntity = this.initEntity(entity);
        // 新增变更
        var changeItem = {
            path: [],
            value: [newEntity],
            preValue: undefined,
            type: ModifyType.Add
        };
        this.setChanges(changeItem);
        return newEntity;
    };
    /**
     * 追加实体
     */
    EntityList.prototype.appendEntity = function (entity) {
        var newEntity = this.initEntity(entity);
        // 新增变更
        var changeItem = {
            path: [],
            value: [newEntity],
            preValue: undefined,
            type: ModifyType.Add
        };
        this.setChanges(changeItem);
    };
    /**
     * 批量追加实体
     */
    EntityList.prototype.appendEntities = function (entities) {
        var _this = this;
        var newEntites = entities.map(function (entity) {
            return _this.initEntity(entity);
        });
        var changeItem = {
            path: [],
            value: newEntites,
            preValue: undefined,
            type: ModifyType.Add
        };
        this.setChanges(changeItem);
    };
    /**
     * 删除指定主键ID 的实体对象，返回布尔，true 删除成功，false 删除失败
     * @param primaryId 主键ID
     */
    EntityList.prototype.remove = function (primaryId) {
        var _a;
        var total = this.count();
        var indexToRemove = this.rawData.findIndex(function (entity) {
            return entity.primaryValue === primaryId;
        });
        if (indexToRemove === -1) {
            return false;
        }
        var entityToRemove = this.rawData[indexToRemove];
        this.rawData.splice(indexToRemove, 1);
        // 删除变更
        var changeItem = {
            path: [],
            value: (_a = {}, _a[entityToRemove.primaryProperty.dataField] = primaryId, _a),
            preValue: undefined,
            type: ModifyType.Remove
        };
        this.updateIndex(total);
        this.setChanges(changeItem);
        return true;
    };
    /**
     * 从集合中获取指定ID值的实体对象
     * @param id 主键值
     */
    EntityList.prototype.get = function (id) {
        return this.items.find(function (item) {
            return item.primaryValue === id;
        });
    };
    /**
     * 将变更记录添加到集合变更集中
     * @param value 变更记录
     */
    EntityList.prototype.setChanges = function (modinfo) {
        // 向app层发送的变更
        this.listChanged.next(modinfo);
        // 构造向changeSet中添加的chagne
        var change = Object.assign({}, modinfo);
        if (modinfo.type === ModifyType.Add && modinfo.value[0] instanceof Entity) {
            change.value = [modinfo.value[0].data];
        }
        this.changeSet.append(change);
    };
    /** 集合总记录数 */
    EntityList.prototype.count = function () {
        return this.items.length;
    };
    /**
     * 获取实体对象的索引值
     */
    EntityList.prototype.indexOf = function (entity) {
        return this.items.indexOf(entity);
    };
    /**
     * 计算集合中某个属性的总和
     * @param propertyName 属性名称
     */
    EntityList.prototype.sum = function (propertyName) {
        if (this.count() === 0) {
            return 0;
        }
        return this.items.reduce(function (val, curr) {
            return val + curr[propertyName];
        }, 0);
    };
    /**
     * 已废弃：请使用toJSON方法代替
     * @deprecated
     */
    EntityList.prototype.toJson = function () {
        return this.rawData;
    };
    /**
     * 转换为JSON格式
     */
    EntityList.prototype.toJSON = function () {
        var result = [];
        this.items.forEach(function (entity) {
            result.push(entity.toJSON());
        });
        return result;
    };
    EntityList.prototype.toArray = function () {
        return this.items;
    };
    // #endregion
    // #region 私有方法
    /**
     * 实体初始化
     * @param entity 实体
     */
    EntityList.prototype.initEntity = function (entity) {
        var _this = this;
        entity[PARENT_CLASS] = this;
        entity[PARENT_PATH] = this[PARENT_PATH];
        entity.onValueChanged.subscribe(function (v) {
            var path = v.path;
            var value = v.value;
            var preValue = v.preValue;
            var operator = v.type;
            var subChanges = { path: path, value: value, preValue: preValue, type: operator };
            _this.setChanges(subChanges);
        });
        // TODO: 添加数据验证逻辑代码
        var newLength = this.rawData.push(entity);
        this[newLength - 1] = entity;
        return entity;
    };
    /**
     * 更新索引
     * @param total 总记录数
     */
    EntityList.prototype.updateIndex = function (total) {
        var _this = this;
        for (var i = 0; i < total; i++) {
            delete this[i];
        }
        this.rawData.forEach(function (entity, index) {
            _this[index] = entity;
        });
    };
    /**
     * 获取属性名称
     */
    EntityList.prototype.getPropertyName = function () {
        var path = this[PARENT_PATH];
        if (path && path.length) {
            var name_1 = path[path.length - 1];
            return name_1;
        }
        return undefined;
    };
    return EntityList;
}());
export { EntityList };
//# sourceMappingURL=data:application/json;base64,