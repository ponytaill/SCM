/*
 * @Author: aalizzwell
 * @Date: 2019-08-02 15:31:34
 * @Last Modified by: aalizzwell
 * @Last Modified time: 2020-03-03 09:33:43
 */
import { Injectable, Optional, Injector, ComponentFactoryResolver, ReflectiveInjector } from '@angular/core';
import { Router, ActivatedRoute } from '@angular/router';
import { RuntimeFrameworkService } from './rtf-service';
import { AppType } from '@gsp-sys/rtf-common';
import { MenuStateService } from './menu-state.service';
import { NavigationEventService } from './navigation-event.service';
import { QuerystringService } from './querystring';
import { FrameContext, TranslateToken } from '@farris/devkit';
import { FEPageModalService } from '@farris/extend-page-modal';
import lodash from 'lodash-es';
import { FarrisFormService } from './farris-form.service';
import { LanguageService } from './languag.service';
import { map, switchMap } from 'rxjs/operators';
import { EMPTY, of } from 'rxjs';
import { FormNotifyService } from './form-notify.service';
// tslint:disable: no-string-literal max-line-length
const APP_CONTEXT_MANAGER = 'DEVKIT_APP_CONTEXT_MANAGER';
/**
 * 导航服务
 * @scope FormModule
 */
export class NavigationService {
    constructor(runtimeFrameworkService, menuStateService, navigationEventService, querystringService, frameContext, injector, languageService
    // @Optional() private pageModalService: FEPageModalService,
    // @Optional() private farrisFormService: FarrisFormService,
    // @Optional() private languageService: LanguageService
    ) {
        this.runtimeFrameworkService = runtimeFrameworkService;
        this.menuStateService = menuStateService;
        this.navigationEventService = navigationEventService;
        this.querystringService = querystringService;
        this.frameContext = frameContext;
        this.injector = injector;
        this.languageService = languageService;
        // appId不同于tabId，每次表单实例化时都会重新生成
        const appId = this.formAppContext && this.formAppContext.ApplicationId;
        let tabId = this.querystrings.tabId || this.querystrings.funcId || this.querystrings.appId;
        // 已经编译的表单，使用appId记录hash
        if (appId) {
            const appContextManager = window[APP_CONTEXT_MANAGER] || new Map();
            if (appContextManager && !appContextManager.has(appId)) {
                appContextManager.set(appId, { hash: window.location.hash });
                window[APP_CONTEXT_MANAGER] = appContextManager;
            }
        }
        if (tabId) {
            const formEventServices = window['formEventServices'] || new Map();
            // tabId、appId都存在时，使用appId替换tabId
            if (appId) {
                tabId = appId;
            }
            if (formEventServices && formEventServices.has(tabId)) {
                this.navigationEventService = formEventServices.get(tabId);
            }
            else {
                this.navigationEventService.registerEvent();
                formEventServices.set(tabId, this.navigationEventService);
                this.navigationEventService.frameContext = this.frameContext;
                window['formEventServices'] = formEventServices;
            }
            this.registerDestroyEvent(tabId);
        }
        if (!languageService) {
            this.languageService = new LanguageService();
        }
    }
    set context(context) {
        this.navigationEventService['context'] = context;
        this['commandContext'] = context;
    }
    /**
     * 获取整个表单的appcontext（除module上的appcontext）
     */
    get formAppContext() {
        if (this.frameContext) {
            let appContext = this.frameContext.appContext;
            // tslint:disable-next-line: max-line-length
            while (appContext && appContext.parent && appContext.parent.injector && appContext.parent.injector.get(FrameContext, null) !== null) {
                appContext = appContext.parent;
            }
            return appContext;
        }
        return null;
    }
    get querystrings() {
        let hash = window.location.hash;
        const appId = this.formAppContext && this.formAppContext.ApplicationId;
        if (appId) {
            const appContextManager = window[APP_CONTEXT_MANAGER];
            const appContext = appContextManager && appContextManager.get(appId);
            hash = appContext && appContext.hash || hash;
        }
        const params = this.querystringService.parse(hash);
        if (params) {
            params.formToken = this.runtimeFrameworkService.formToken;
        }
        return params;
    }
    /**
     * 提示服务
     */
    get formNotifyService() {
        return this.injector && this.injector.get(FormNotifyService, null);
    }
    /**
     * 注册销毁事件
     * @param tabId
     */
    registerDestroyEvent(tabId) {
        if (this.frameContext && this.frameContext.destorySignal) {
            this.frameContext.destorySignal.subscribe(() => {
                this.navigationEventService = null;
            });
        }
        if (this.frameContext && this.frameContext.appContext && this.frameContext.appContext.destorySignal) {
            this.frameContext.appContext.destorySignal.subscribe(() => {
                const formEventServices = window['formEventServices'];
                if (formEventServices) {
                    formEventServices.delete(tabId);
                }
                const appContextManager = window[APP_CONTEXT_MANAGER];
                if (appContextManager) {
                    appContextManager.delete(tabId);
                }
            });
        }
    }
    // #region 接口
    /**
     * 打开菜单
     * @param tabId 根据TabId决定打开新标签页或定位之前打开的标签页
     * @param funcId 菜单Id
     * @param params 参数
     * @param reload 是否重新刷新
     * @param enableRefresh 启用数据刷新
     * @param tabName tab标题
     * @param destructuring 是否解构参数
     */
    openMenu(tabId, funcId, params, reload, enableRefresh, tabName, destructuring) {
        if (!funcId && this.formNotifyService) {
            this.formNotifyService.warning(this.languageService.appOrFuncIdRequired, { hideTitle: true });
            return EMPTY;
        }
        if (tabName) {
            tabName = this.translate(tabName);
        }
        let queryStringParams = this.buildParamMap(params);
        destructuring = this.convertToBoolean(destructuring, false);
        if (destructuring === true) {
            queryStringParams = this.buildParam(params);
        }
        const paramsMap = this.buildParamMap(params);
        const currentTabId = this.querystrings.tabId || this.querystrings.funcId || this.querystrings.appId;
        const options = {
            tabId,
            funcId,
            appType: AppType.Menu,
            queryStringParams: queryStringParams,
            entityParams: paramsMap,
            appId: undefined,
            appEntrance: undefined,
            isReload: reload,
            tabName: tabName || null
        };
        // 启用数据刷新参数为true或者没有定义，则按刷新处理
        // 没有传递该参数或该参数为空，则认为按照之前的逻辑处理，默认刷新
        // null false "false" "true" undefined
        enableRefresh = this.convertToBoolean(enableRefresh, true);
        if (enableRefresh === true) {
            this.menuStateService.addMenuState(currentTabId, tabId);
        }
        this.runtimeFrameworkService.openMenu(options);
    }
    /**
     * 打开菜单（流）
     * @param tabId 根据TabId决定打开新标签页或定位之前打开的标签页
     * @param funcId 菜单Id
     * @param params 参数
     * @param reload 是否重新刷新
     * @param enableRefresh 启用数据刷新
     * @param destructuring 解构参数
     */
    openMenu$(tabId, funcId, params, reload, enableRefresh, tabName, destructuring) {
        if (!funcId && this.formNotifyService) {
            this.formNotifyService.warning(this.languageService.appOrFuncIdRequired, { hideTitle: true });
            return EMPTY;
        }
        if (tabName) {
            tabName = this.translate(tabName);
        }
        let queryStringParams = this.buildParamMap(params);
        destructuring = this.convertToBoolean(destructuring, false);
        if (destructuring === true) {
            queryStringParams = this.buildParam(params);
        }
        const paramsMap = this.buildParamMap(params);
        const currentTabId = this.querystrings.tabId || this.querystrings.funcId || this.querystrings.appId;
        const options = {
            tabId,
            funcId,
            appType: AppType.Menu,
            queryStringParams: queryStringParams,
            entityParams: paramsMap,
            appId: undefined,
            appEntrance: undefined,
            isReload: reload,
            tabName: tabName || null
        };
        // 启用数据刷新参数为true或者没有定义，则按刷新处理
        enableRefresh = this.convertToBoolean(enableRefresh, true);
        if (enableRefresh === true) {
            this.menuStateService.addMenuState(currentTabId, tabId);
        }
        return this.runtimeFrameworkService.openMenu$(options);
    }
    /**
     * 打开菜单(带维度)
     * @param tabId 根据TabId决定打开新标签页或定位之前打开的标签页
     * @param funcId 菜单Id
     * @param params 参数
     * @param reload 是否重新刷新
     * @param enableRefresh 启用数据刷新
     * @param dim1 dim1
     * @param dim2 dim2
     * @param destructuring 解构参数
     */
    openMenuWithDimension(tabId, funcId, params, enableRefresh, dim1, dim2, tabName, metadataId, destructuring) {
        if (!funcId && this.formNotifyService) {
            this.formNotifyService.warning(this.languageService.appOrFuncIdRequired, { hideTitle: true });
            return EMPTY;
        }
        if (tabName) {
            tabName = this.translate(tabName);
        }
        if (metadataId === undefined || metadataId === null) {
            metadataId = '';
        }
        let queryStringParams = this.buildParamMap(params);
        destructuring = this.convertToBoolean(destructuring, false);
        if (destructuring === true) {
            queryStringParams = this.buildParam(params);
        }
        const paramsMap = this.buildParamMap(params);
        queryStringParams.set('dim1', dim1 ? dim1 : 'public');
        queryStringParams.set('dim2', dim2 ? dim2 : 'public');
        queryStringParams.set('metadataId', metadataId);
        queryStringParams.set('isRtc', '1');
        queryStringParams.set('isRootMetadata', 'true');
        const currentTabId = this.querystrings.tabId || this.querystrings.funcId || this.querystrings.appId;
        const options = {
            tabId,
            funcId,
            appType: AppType.Menu,
            queryStringParams: queryStringParams,
            entityParams: paramsMap,
            appId: undefined,
            appEntrance: undefined,
            isReload: false,
            tabName: tabName || null
        };
        // 启用数据刷新参数为true或者没有定义，则按刷新处理
        // 没有传递该参数或该参数为空，则认为按照之前的逻辑处理，默认刷新
        // null false "false" "true" undefined
        enableRefresh = this.convertToBoolean(enableRefresh, true);
        if (enableRefresh === true) {
            this.menuStateService.addMenuState(currentTabId, tabId);
        }
        this.runtimeFrameworkService.openMenu(options);
    }
    /**
     * 打开应用
     * @param tabId tabId 根据TabId决定打开新标签页或定位之前打开的标签页
     * @param appId 应用Id
     * @param appEntrance 应用入口
     * @param params 参数
     * @param reload 是否重新刷新
     * @param tabName tab标题
     * @param enableRefresh 启用数据刷新
     * @param destructuring 解构参数
     */
    openApp(tabId, appId, appEntrance, params, reload, tabName, enableRefresh, destructuring) {
        if (!appId && this.formNotifyService) {
            this.formNotifyService.warning(this.languageService.appOrFuncIdRequired, { hideTitle: true });
            return EMPTY;
        }
        if (tabName) {
            tabName = this.translate(tabName);
        }
        let queryStringParams = this.buildParamMap(params);
        destructuring = this.convertToBoolean(destructuring, false);
        if (destructuring === true) {
            queryStringParams = this.buildParam(params);
        }
        const paramsMap = this.buildParamMap(params);
        const currentTabId = this.querystrings.tabId || this.querystrings.funcId || this.querystrings.appId;
        const options = {
            tabId,
            appId,
            appEntrance,
            funcId: undefined,
            appType: AppType.App,
            queryStringParams: queryStringParams,
            entityParams: paramsMap,
            isReload: reload,
            tabName: tabName || null
        };
        enableRefresh = this.convertToBoolean(enableRefresh, true);
        if (enableRefresh === true) {
            this.menuStateService.addMenuState(currentTabId, tabId);
        }
        this.runtimeFrameworkService.openMenu(options);
    }
    /**
     * 打开应用(流式)
     * @param tabId tabId 根据TabId决定打开新标签页或定位之前打开的标签页
     * @param appId 应用Id
     * @param appEntrance 应用入口
     * @param params 参数
     * @param reload 是否重新刷新
     * @param tabName tab标题
     * @param enableRefresh 启用数据刷新
     * @param destructuring 解构参数
     */
    openApp$(tabId, appId, appEntrance, params, reload, tabName, enableRefresh, destructuring) {
        if (!appId && this.formNotifyService) {
            this.formNotifyService.warning(this.languageService.appOrFuncIdRequired, { hideTitle: true });
            return EMPTY;
        }
        if (tabName) {
            tabName = this.translate(tabName);
        }
        let queryStringParams = this.buildParamMap(params);
        destructuring = this.convertToBoolean(destructuring, false);
        if (destructuring === true) {
            queryStringParams = this.buildParam(params);
        }
        const paramsMap = this.buildParamMap(params);
        const currentTabId = this.querystrings.tabId || this.querystrings.funcId || this.querystrings.appId;
        const options = {
            tabId,
            appId,
            appEntrance,
            funcId: undefined,
            appType: AppType.App,
            queryStringParams: queryStringParams,
            entityParams: paramsMap,
            isReload: reload,
            tabName: tabName || null
        };
        enableRefresh = this.convertToBoolean(enableRefresh, true);
        if (enableRefresh === true) {
            this.menuStateService.addMenuState(currentTabId, tabId);
        }
        return this.runtimeFrameworkService.openMenu$(options);
    }
    /**
     * 关闭
     * @param onCloseing 关闭前事件处理器
     */
    close() {
        const options = this.querystrings;
        const { isDialogComponent: isInDialog, rootComponent } = this.findDialog();
        if (isInDialog) {
            const modalRef = this.get(rootComponent, 'dialogRef');
            modalRef['close']();
            return;
        }
        options.token = options.formToken;
        this.runtimeFrameworkService.beforeCloseMenu(options);
    }
    /**
     * 强制关闭
     */
    destory() {
        const options = this.querystrings;
        options.token = options.formToken;
        this.runtimeFrameworkService.closeMenu(options);
    }
    /**
     *
     * @param params params
     * @deprecated 待废弃，与buildParamMap重复
     */
    parseParams(params) {
        if (typeof params === 'undefined' || params === null || (typeof params === 'string' && params.length < 1)) {
            params = {};
        }
        const paramMap = new Map();
        if (typeof params === 'object') {
            params = JSON.stringify(params);
        }
        params = window['encodeURIComponent'](params);
        paramMap.set('WEB_FORM_ROUTE_PARAMS', params);
        return paramMap;
    }
    /**
     * 注册事件监听器
     * @param eventType 事件类型 onTabClosed
     * @param handler 处理器
     * @returns string 返回事件标识
     */
    addEventListener(eventType, handler) {
        return this.navigationEventService.addEventListener(eventType, handler);
    }
    /**
     * 移除事件监听器
     * @param eventType 事件类型 onTabClosed | onTabCloseing
     * @param key 事件标识
     */
    removeEventListener(eventType, key) {
        return this.navigationEventService.removeEventListener(eventType, key);
    }
    /**
     * 清空事件监听器
     * @param eventType 事件类型
     */
    clearEventListener(eventType) {
        this.navigationEventService.clearEventListener(eventType);
    }
    /**
     * 以弹框、侧边栏或新标签页方式打开表单
     * @param mode 打开方式，支持`modal`弹窗、`sidebar`侧边栏、`tab`新标签页
     * @param modalId 弹窗id，如果mode=`modal`且没有url，
     * @param configs 弹窗配置
     * @param url 远端表单url
     * @param tabId 标签页id，modal=tab时必填
     * @param tabType 标签页类型，`menu` 或`app`
     * @param funcOrAppId 菜单或应用id
     * @param appEntrance 应用入口
     * @param params 参数
     * @param tabName 新标签页名称
     * @param enableRefresh 启用启动刷新
     * @param destructuring 是否解构
     */
    open(mode, modalId, url, configs, tabId, tabType, funcOrAppId, appEntrance, params, tabName, enableRefresh, destructuring) {
        const pageModalService = this.injector.get(FEPageModalService, null);
        if (!pageModalService) {
            throw new Error('get FEPageModalService failed.');
        }
        // 校验参数是否合法
        if (!mode) {
            throw new Error('[NavigationService]->open,mode参数不能为空！');
        }
        if (mode === 'modal' || mode === 'sidebar') {
            if (!modalId && !url) {
                throw new Error('弹窗及侧边栏模式时弹窗容器id和表单路径不能同时为空！');
            }
            if (modalId && url) {
                throw new Error('弹窗及侧边栏模式时弹窗容器id和表单路径不能同时存在！');
            }
            const uiStateConfig = this.getObjectTypeConfig(params);
            const modalConfig = this.buildConfigs(configs);
            if (mode === 'sidebar') {
                modalConfig.dialogType = mode;
            }
            let pageModalRef = null;
            if (modalId) {
                const farrisFormService = this.injector.get(FarrisFormService, null);
                if (!farrisFormService) {
                    return;
                }
                let componentType = farrisFormService.getControls(modalId);
                const componentRef = this.createComponentRef(componentType, uiStateConfig);
                pageModalRef = pageModalService.show(componentRef, modalConfig);
            }
            else if (url) {
                pageModalRef = pageModalService.showByUrl(url, modalConfig);
            }
            if (pageModalRef && !!pageModalRef.content) {
                pageModalRef.content.isDialogRootComponent = true;
                pageModalRef.content.dialogRef = pageModalRef;
                const header = pageModalRef.dialog && pageModalRef.dialog.instance && pageModalRef.dialog.instance.el && pageModalRef.dialog.instance.el.nativeElement && pageModalRef.dialog.instance.el.nativeElement.querySelector(".f-page-header");
                if (header && pageModalRef.dialog.instance.draggbar) {
                    pageModalRef.dialog.instance.draggbar.handle = header;
                    header.style.cursor = 'move';
                }
            }
        }
        else if (mode === 'tab') {
            if (!tabId || !tabType || !funcOrAppId) {
                if (this.formNotifyService) {
                    this.formNotifyService.warning(this.languageService.appOrFuncIdRequired, { hideTitle: true });
                }
                throw new Error('新标签模式时标签页id、标签类型、菜单或应用id均不能为空！');
            }
            if (tabType === 'app' && !appEntrance) {
                throw new Error('以应用方式打开时入口应用不能为空！');
            }
            if (tabType == 'app') {
                this.openApp(tabId, funcOrAppId, appEntrance, params, false, tabName, enableRefresh, destructuring);
            }
            else if (tabType === 'menu') {
                this.openMenu(tabId, funcOrAppId, params, false, enableRefresh, tabName, destructuring);
            }
        }
        else {
            throw new Error('不支持的模式！');
        }
        // this.pageModalService.
    }
    /**
     * in app navigate
     * @param commands commands
     */
    // public navigate(commands: any[]);
    /**
     * in app navigate
     * @param commands commands
     * @param options options
     * @description options:{ relativeTo: this.activatedRoute, queryParams:{a:1,b:2},etc:...}
     */
    navigate(commands, options) {
        const router = this.injector && this.injector.get(Router, null);
        const activatedRoute = this.injector && this.injector.get(ActivatedRoute, null);
        const queryParams = lodash.merge({}, this.querystrings, options && options.queryParams || {});
        if (options && options.hasOwnProperty('queryParams')) {
            delete options.queryParams;
        }
        const extras = lodash.merge({ skipLocationChange: false, relativeTo: activatedRoute, queryParams }, options || {});
        if (router) {
            return router.navigate(commands, extras);
        }
        else {
            return null;
        }
    }
    // #endregion
    // #region 私有方法
    /**
     * 封装路由参数
     * @param params 参数
     * @param options 配置参数
     */
    buildParamMap(params, options) {
        if (typeof params === 'undefined' || params === null || (typeof params === 'string' && params.length < 1)) {
            params = {};
        }
        const paramMap = new Map();
        if (options && Object.keys(options).length > 0) {
            if (typeof params !== 'object') {
                params = JSON.parse(params);
            }
            params = lodash.merge(params, options);
        }
        if (typeof params === 'object') {
            params = JSON.stringify(params);
        }
        const currentTabId = this.querystrings.tabId || this.querystrings.funcId || this.querystrings.appId;
        params = window['encodeURIComponent'](params);
        paramMap.set('WEB_FORM_ROUTE_PARAMS', params);
        paramMap.set('WEB_FORM_ROUTER_PARENT_ID', currentTabId);
        return paramMap;
    }
    buildParam(params, options) {
        if (typeof params === 'undefined' || params === null || (typeof params === 'string' && params.length < 1)) {
            params = {};
        }
        const paramMap = new Map();
        if (options && Object.keys(options).length > 0) {
            if (typeof params !== 'object') {
                params = JSON.parse(params);
            }
            params = lodash.merge(params, options);
        }
        if (typeof params !== 'object') {
            params = JSON.parse(params);
        }
        Object.keys(params).forEach(key => {
            paramMap.set(key, params[key]);
        });
        const currentTabId = this.querystrings.tabId || this.querystrings.funcId || this.querystrings.appId;
        params = window['encodeURIComponent'](params);
        paramMap.set('WEB_FORM_ROUTE_PARAMS', params);
        paramMap.set('WEB_FORM_ROUTER_PARENT_ID', currentTabId);
        return paramMap;
    }
    /**
     * 查找弹窗组件
     */
    findDialog() {
        let frameContext = this.get(this, 'commandContext.frameContext');
        let isDialogComponent = this.get(frameContext, 'frameComponent.isDialogRootComponent', false);
        let parentFrameContext = this.get(frameContext, 'parent');
        while (parentFrameContext != null && !isDialogComponent) {
            frameContext = this.get(frameContext, 'parent');
            parentFrameContext = this.get(parentFrameContext, 'parent');
            isDialogComponent = this.get(frameContext, 'frameComponent.isDialogRootComponent', false);
        }
        const rootComponent = this.get(frameContext, 'frameComponent');
        return { isDialogComponent, rootComponent };
    }
    /**
     * loadsh get
     * @param object 对象
     * @param path 路径
     * @param defaultVal 默认值
     */
    get(object, path, defaultVal = null) {
        const PATH = Array.isArray(path)
            ? path
            : path.split('.').filter(i => i.length);
        if (!PATH.length) {
            return object === undefined ? defaultVal : object;
        }
        if (object === null || object === undefined || typeof (object[PATH[0]]) === 'undefined') {
            return defaultVal;
        }
        return this.get(object[PATH.shift()], PATH, defaultVal);
    }
    convertToBoolean(value, defaultVal = false) {
        if (typeof value === 'undefined' || value === null) {
            value = defaultVal;
        }
        if (typeof value === 'string') {
            value = value || String(defaultVal);
            value = value === 'true' ? true : false;
        }
        return value;
    }
    /**
     * 翻译资源项
     * @param key 资源项key
     */
    translate(key) {
        const translateService = this.injector && this.injector.get(TranslateToken, null) || null;
        if (translateService && key && key.startsWith('{{') && key.endsWith('}}')) {
            key = key.replace('{{', '').replace('}}', '').trim();
            return translateService.transform(key, null);
        }
        return key;
    }
    // #endregion
    //#region 弹窗相关方法
    buildConfigs(config) {
        let languageService = this.injector.get(LanguageService, null);
        if (!languageService) {
            languageService = LanguageService.getInstance();
        }
        const defaultConfigs = {
            title: languageService && languageService.defaultDialogTitle || '',
            width: 800,
            height: 500,
            showButtons: false
        };
        const objectTypeConfig = this.getObjectTypeConfig(config);
        const configs = Object.assign(defaultConfigs, objectTypeConfig);
        const onClosingHandler = configs.beforeClose;
        const refresh = configs['refresh'] || {};
        const refreshCommandName = refresh && refresh.commandName || null;
        const refreshFrameId = refresh && refresh.frameId || null;
        // tslint:disable: no-string-literal
        const cancelChanges = configs['cancelChanges'] || false;
        configs.beforeClose = (ref) => {
            if (!!onClosingHandler && typeof onClosingHandler === 'function') {
                return onClosingHandler(ref).pipe(switchMap(result => {
                    if (result) {
                        if (cancelChanges) {
                            return this.cancelChanges(ref).pipe(switchMap(() => this.refreshForm(refreshCommandName, refreshFrameId)));
                        }
                    }
                    return of(result);
                }));
            }
            else {
                if (cancelChanges) {
                    return this.cancelChanges(ref).pipe(switchMap(() => this.refreshForm(refreshCommandName, refreshFrameId)));
                }
                else {
                    return of(true);
                }
            }
        };
        return configs;
    }
    getObjectTypeConfig(config) {
        let objectTypeConfig;
        if (typeof config === 'undefined') {
            config = {};
        }
        if (typeof config === 'string') {
            if (config.length) {
                try {
                    objectTypeConfig = JSON.parse(config);
                }
                catch (_a) {
                    throw new Error(config + '不是合法的json字符串');
                }
            }
            else {
                objectTypeConfig = {};
            }
        }
        else if (typeof config === 'object') {
            objectTypeConfig = Object.assign({}, config);
        }
        else {
            throw new Error('填写对象格式或json字符串');
        }
        return objectTypeConfig;
    }
    /**
     * 取消服务器变更集
     */
    cancelChanges(ref) {
        if (ref && ref.modalRef && ref.modalRef.content) {
            const component = ref.modalRef.content;
            if (component && component.context) {
                const repository = component.context.repository || null;
                if (repository) {
                    return repository.cancelChanges().pipe(switchMap(() => of(true)));
                }
            }
        }
        return of(true);
    }
    refreshForm(refreshCommandName, refreshFrameId) {
        if (refreshCommandName && refreshFrameId) {
            const frameContext = this.frameContext.appContext.frameContextManager.getFrameContextById(refreshFrameId);
            if (frameContext) {
                const viewModel = frameContext.viewModel;
                return viewModel[refreshCommandName]().pipe(map(() => true));
            }
        }
        return of(true);
    }
    createComponentRef(componentType, uiStateObject) {
        let componentRef;
        const frameContext = this.getFrameContext();
        const componentFactoryResolver = this.getComponentFactoryResolver();
        if (frameContext && componentFactoryResolver) {
            const contentCmptFactory = componentFactoryResolver.resolveComponentFactory(componentType);
            const modalContentInjector = ReflectiveInjector.resolveAndCreate([], frameContext.injector);
            componentRef = contentCmptFactory.create(modalContentInjector);
            if (componentRef && componentRef.instance && componentRef.instance.viewModel && componentRef.instance.viewModel.uiState) {
                if (typeof uiStateObject === 'object' && Object.keys(uiStateObject).length) {
                    Object.keys(uiStateObject).forEach(item => {
                        componentRef.instance.viewModel.uiState.setPropertyValue(item, uiStateObject[item]);
                    });
                }
                // 附加isDialog参数
                componentRef.instance.viewModel.uiState.setPropertyValue('DEVKIT_DIALOG', true);
            }
        }
        return componentRef;
    }
    /**
     * 兼容旧弹窗，获取frameContext
     */
    getFrameContext() {
        if (this.frameContext) {
            return this.frameContext;
        }
        if (this['context'] && this['context']['frameContext']) {
            return this['context']['frameContext'];
        }
        return null;
    }
    /**
     * 兼容旧弹窗，获取ComponentFactoryResolver
     */
    getComponentFactoryResolver() {
        const frameContext = this.getFrameContext();
        let componentFactoryResolver;
        if (frameContext) {
            componentFactoryResolver = frameContext.injector.get(ComponentFactoryResolver);
        }
        return componentFactoryResolver;
    }
}
NavigationService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
NavigationService.ctorParameters = () => [
    { type: RuntimeFrameworkService },
    { type: MenuStateService },
    { type: NavigationEventService },
    { type: QuerystringService },
    { type: FrameContext, decorators: [{ type: Optional }] },
    { type: Injector, decorators: [{ type: Optional }] },
    { type: LanguageService, decorators: [{ type: Optional }] }
];
//# sourceMappingURL=data:application/json;base64,