/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { takeUntil } from 'rxjs/operators';
import { LocaleService } from '@farris/ui-locale';
import { Subject } from 'rxjs';
import { Component, ViewEncapsulation, Injector, ChangeDetectorRef, ElementRef, ViewChild, Renderer2, Input, NgZone } from '@angular/core';
import { DatagridService } from './../../services/datagrid.service';
import ResizeObserver from 'resize-observer-polyfill';
import { DatagridComponent } from '../../datagrid.component';
var DatagridFilterToolbarComponent = /** @class */ (function () {
    function DatagridFilterToolbarComponent(inject, el, cd, dgs, render, ngZone, localeSer) {
        this.inject = inject;
        this.el = el;
        this.cd = cd;
        this.dgs = dgs;
        this.render = render;
        this.ngZone = ngZone;
        this.localeSer = localeSer;
        this.empty = '[ æ—  ]';
        this.filterText = this.empty;
        this.openFilterPanel = false;
        this.showExpand = false;
        this.enableFilterSetting = false;
        this.windowResizeHandler = null;
        this.ro = null;
        this.destory$ = new Subject();
        this.empty = this.localeSer.getValue('datagrid.filter.nofilter');
        this.filterText = this.empty;
    }
    Object.defineProperty(DatagridFilterToolbarComponent.prototype, "toolbarWidth", {
        get: /**
         * @return {?}
         */
        function () {
            return this.filterToolbarRef.nativeElement.offsetWidth;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DatagridFilterToolbarComponent.prototype, "filterTextContainerWidth", {
        get: /**
         * @return {?}
         */
        function () {
            /** @type {?} */
            var actionW = 52;
            if (this.enableFilterSetting) {
                actionW = 65;
            }
            return this.toolbarWidth - 85 - actionW;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DatagridFilterToolbarComponent.prototype, "filterTextRealWidth", {
        get: /**
         * @return {?}
         */
        function () {
            this.render.setStyle(this.filterPanelTextRef.nativeElement, 'white-space', 'nowrap');
            /** @type {?} */
            var w = this.filterPanelTextRef.nativeElement.scrollWidth;
            this.render.setStyle(this.filterPanelTextRef.nativeElement, 'white-space', 'normal');
            return w;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    DatagridFilterToolbarComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.dg = this.inject.get(DatagridComponent);
        this.dfrs = this.dg.clientFilterService;
        this.dgs.clearFilter.pipe(takeUntil(this.destory$)).subscribe((/**
         * @return {?}
         */
        function () {
            _this.filterText = _this.empty;
            _this.openFilterPanel = false;
            _this.dgs.onFilterTextChange(_this.filterText);
            _this.cd.detectChanges();
        }));
        this.filterChangeSubscription = this.dgs.onFilterChanged.pipe(takeUntil(this.destory$)).subscribe((/**
         * @param {?} n
         * @return {?}
         */
        function (n) {
            _this.filterText = _this.dfrs.convertFilterCondition2String(n);
            if (!_this.filterText) {
                _this.filterText = _this.empty;
            }
            _this.updateExpandState();
            setTimeout((/**
             * @return {?}
             */
            function () {
                _this.bindEvent();
            }), 100);
            if (!_this.showExpand) {
                _this.openFilterPanel = false;
            }
            _this.cd.detectChanges();
            _this.dgs.onFilterTextChange(_this.filterText);
        }));
        this.ngZone.runOutsideAngular((/**
         * @return {?}
         */
        function () {
            _this.ro = new ResizeObserver((/**
             * @return {?}
             */
            function () {
                setTimeout((/**
                 * @return {?}
                 */
                function () {
                    _this.updateExpandState();
                    _this.cd.detectChanges();
                }), 100);
            }));
            _this.ro.observe(_this.el.nativeElement.closest('div.f-datagrid'));
        }));
    };
    /**
     * @return {?}
     */
    DatagridFilterToolbarComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.destory$.next();
        this.destory$.complete();
        this.ro.disconnect();
        if (this.filterChangeSubscription) {
            this.filterChangeSubscription.unsubscribe();
            this.filterChangeSubscription = null;
        }
        if (this.windowResizeHandler) {
            this.windowResizeHandler();
            this.windowResizeHandler = null;
        }
    };
    /**
     * @private
     * @return {?}
     */
    DatagridFilterToolbarComponent.prototype.bindEvent = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        this.ngZone.runOutsideAngular((/**
         * @return {?}
         */
        function () {
            /** @type {?} */
            var filterFields = _this.filterToolbarRef.nativeElement.querySelectorAll('.filter-field');
            _this.bindFilterFieldHandler(filterFields);
            /** @type {?} */
            var dropdownFilterFields = _this.filterPanelTextRef.nativeElement.querySelectorAll('.filter-field');
            _this.bindFilterFieldHandler(dropdownFilterFields, false);
        }));
    };
    /**
     * @private
     * @param {?} filterFields
     * @param {?=} hidePanel
     * @return {?}
     */
    DatagridFilterToolbarComponent.prototype.bindFilterFieldHandler = /**
     * @private
     * @param {?} filterFields
     * @param {?=} hidePanel
     * @return {?}
     */
    function (filterFields, hidePanel) {
        var _this = this;
        if (hidePanel === void 0) { hidePanel = true; }
        if (filterFields && filterFields.length) {
            filterFields.forEach((/**
             * @param {?} ff
             * @return {?}
             */
            function (ff) {
                _this.render.listen(ff, 'click', (/**
                 * @return {?}
                 */
                function () {
                    _this.removeFilterField(ff, hidePanel);
                }));
            }));
        }
    };
    /**
     * @private
     * @param {?} ff
     * @param {?=} hidePanel
     * @return {?}
     */
    DatagridFilterToolbarComponent.prototype.removeFilterField = /**
     * @private
     * @param {?} ff
     * @param {?=} hidePanel
     * @return {?}
     */
    function (ff, hidePanel) {
        if (hidePanel === void 0) { hidePanel = true; }
        /** @type {?} */
        var field = ff.classList[1].replace('filter-column-', '');
        delete this.dg.conditions[field];
        this.dfrs.removeFilterField(field);
        ff.remove();
        if (hidePanel) {
            this.openFilterPanel = false;
            this.updateExpandState();
        }
    };
    /**
     * @private
     * @return {?}
     */
    DatagridFilterToolbarComponent.prototype.updateExpandState = /**
     * @private
     * @return {?}
     */
    function () {
        this.showExpand = this.isShowExpand();
    };
    /**
     * @return {?}
     */
    DatagridFilterToolbarComponent.prototype.isShowExpand = /**
     * @return {?}
     */
    function () {
        if (this.filterTextContainerWidth > this.filterTextRealWidth) {
            return false;
        }
        else if (this.filterTextRealWidth > this.filterTextContainerWidth) {
            return true;
        }
        else {
            return false;
        }
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    DatagridFilterToolbarComponent.prototype.clearFilter = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        this.filterText = this.empty;
        this.dgs.onClearFilter();
        this.dgs.onFilterChanged.emit({});
        return false;
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    DatagridFilterToolbarComponent.prototype.refreshFilter = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        this.dg.filterData();
        return false;
    };
    /**
     * @return {?}
     */
    DatagridFilterToolbarComponent.prototype.showFilterTextPanel = /**
     * @return {?}
     */
    function () {
        this.openFilterPanel = !this.openFilterPanel;
        this.cd.detectChanges();
    };
    DatagridFilterToolbarComponent.decorators = [
        { type: Component, args: [{
                    selector: 'filter-toolbar',
                    template: "\n        <div class=\"f-datagrid-filter-toolbar-panel\" #filterPanel [class.show]=\"openFilterPanel\" style=\"width: auto\">\n            <span class=\"filter-text\" #filterPanelText [innerHTML]=\"filterText\"></span>\n        </div>\n        <div class=\"f-datagrid-filter-toolbar\" #filterToolbar>\n            <span class=\"title\">{{'datagrid.filter.title'| locale}}\uFF1A</span>\n            <span #filterbarTxt class=\"filter-text\" [innerHTML]=\"filterText\"> </span>\n            <span class=\"filter-action\" *ngIf=\"filterText !== empty \">\n                <span *ngIf=\"showExpand\" class=\"f-icon filter-action-item\"\n                    [class.f-icon-arrow-chevron-up]=\"openFilterPanel\"\n                    [class.f-icon-arrow-chevron-down]=\"!openFilterPanel\"\n                (click)=\"showFilterTextPanel()\" title=\"{{'datagrid.filter.more'|locale}}\"></span>\n                <span title=\"{{'datagrid.filter.clearAll'|locale}}\" class=\"f-icon f-icon-x filter-action-item filter-clear\" (click)=\"clearFilter($event)\"></span>\n                <span title=\"refresh\" class=\"f-icon f-icon-reload-sm filter-action-item filter-refresh\" style=\"color: #388fff\" (click)=\"refreshFilter($event)\"></span>\n                <span *ngIf=\"enableFilterSetting\" class=\"f-icon f-icon-cog filter-action-item\" title=\"{{'datagrid.filter.setting'|locale}}\"></span>\n            </span>\n        </div>\n    ",
                    encapsulation: ViewEncapsulation.None
                }] }
    ];
    /** @nocollapse */
    DatagridFilterToolbarComponent.ctorParameters = function () { return [
        { type: Injector },
        { type: ElementRef },
        { type: ChangeDetectorRef },
        { type: DatagridService },
        { type: Renderer2 },
        { type: NgZone },
        { type: LocaleService }
    ]; };
    DatagridFilterToolbarComponent.propDecorators = {
        enableFilterSetting: [{ type: Input }],
        filterPanelRef: [{ type: ViewChild, args: ['filterPanel',] }],
        filterPanelTextRef: [{ type: ViewChild, args: ['filterPanelText',] }],
        filterTextRef: [{ type: ViewChild, args: ['filterbarTxt',] }],
        filterToolbarRef: [{ type: ViewChild, args: ['filterToolbar',] }]
    };
    return DatagridFilterToolbarComponent;
}());
export { DatagridFilterToolbarComponent };
if (false) {
    /** @type {?} */
    DatagridFilterToolbarComponent.prototype.empty;
    /** @type {?} */
    DatagridFilterToolbarComponent.prototype.filterText;
    /** @type {?} */
    DatagridFilterToolbarComponent.prototype.openFilterPanel;
    /** @type {?} */
    DatagridFilterToolbarComponent.prototype.showExpand;
    /** @type {?} */
    DatagridFilterToolbarComponent.prototype.enableFilterSetting;
    /** @type {?} */
    DatagridFilterToolbarComponent.prototype.filterPanelRef;
    /** @type {?} */
    DatagridFilterToolbarComponent.prototype.filterPanelTextRef;
    /** @type {?} */
    DatagridFilterToolbarComponent.prototype.filterTextRef;
    /** @type {?} */
    DatagridFilterToolbarComponent.prototype.filterToolbarRef;
    /** @type {?} */
    DatagridFilterToolbarComponent.prototype.filterChangeSubscription;
    /** @type {?} */
    DatagridFilterToolbarComponent.prototype.windowResizeHandler;
    /** @type {?} */
    DatagridFilterToolbarComponent.prototype.ro;
    /**
     * @type {?}
     * @private
     */
    DatagridFilterToolbarComponent.prototype.destory$;
    /**
     * @type {?}
     * @private
     */
    DatagridFilterToolbarComponent.prototype.dfrs;
    /**
     * @type {?}
     * @private
     */
    DatagridFilterToolbarComponent.prototype.dg;
    /**
     * @type {?}
     * @private
     */
    DatagridFilterToolbarComponent.prototype.inject;
    /**
     * @type {?}
     * @private
     */
    DatagridFilterToolbarComponent.prototype.el;
    /**
     * @type {?}
     * @private
     */
    DatagridFilterToolbarComponent.prototype.cd;
    /**
     * @type {?}
     * @private
     */
    DatagridFilterToolbarComponent.prototype.dgs;
    /**
     * @type {?}
     * @private
     */
    DatagridFilterToolbarComponent.prototype.render;
    /**
     * @type {?}
     * @private
     */
    DatagridFilterToolbarComponent.prototype.ngZone;
    /**
     * @type {?}
     * @private
     */
    DatagridFilterToolbarComponent.prototype.localeSer;
}
//# sourceMappingURL=data:application/json;base64,