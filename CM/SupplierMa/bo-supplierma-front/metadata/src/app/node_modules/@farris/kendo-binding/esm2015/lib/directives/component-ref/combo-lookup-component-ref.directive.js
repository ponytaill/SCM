import { Directive, ElementRef, Injector } from "@angular/core";
import { FrameContext } from "@farris/devkit";
import { ComboLookupComponent } from '@farris/ui-combo-lookup';
export class ComboLookupComponentRefDirective {
    constructor(injector, component, elementRef, frameContext) {
        this.injector = injector;
        this.component = component;
        this.elementRef = elementRef;
        this.frameContext = frameContext;
    }
    ngOnInit() {
        const id = this.elementRef && this.elementRef.nativeElement && this.elementRef.nativeElement.id;
        if (this.frameContext && id) {
            this.frameContext.componentRefManager.add(id, this.component);
        }
    }
    ngOnDestroy() {
    }
}
ComboLookupComponentRefDirective.decorators = [
    { type: Directive, args: [{
                selector: '[comboLookupRef]'
            },] }
];
/** @nocollapse */
ComboLookupComponentRefDirective.ctorParameters = () => [
    { type: Injector },
    { type: ComboLookupComponent },
    { type: ElementRef },
    { type: FrameContext }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tYm8tbG9va3VwLWNvbXBvbmVudC1yZWYuZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGZhcnJpcy9rZW5kby1iaW5kaW5nLyIsInNvdXJjZXMiOlsibGliL2RpcmVjdGl2ZXMvY29tcG9uZW50LXJlZi9jb21iby1sb29rdXAtY29tcG9uZW50LXJlZi5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxVQUFVLEVBQUUsUUFBUSxFQUFxQixNQUFNLGVBQWUsQ0FBQztBQUNuRixPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDOUMsT0FBTyxFQUFFLG9CQUFvQixFQUFFLE1BQU0seUJBQXlCLENBQUM7QUFLL0QsTUFBTSxPQUFPLGdDQUFnQztJQUMzQyxZQUFvQixRQUFrQixFQUFVLFNBQStCLEVBQVUsVUFBc0IsRUFBVSxZQUEwQjtRQUEvSCxhQUFRLEdBQVIsUUFBUSxDQUFVO1FBQVUsY0FBUyxHQUFULFNBQVMsQ0FBc0I7UUFBVSxlQUFVLEdBQVYsVUFBVSxDQUFZO1FBQVUsaUJBQVksR0FBWixZQUFZLENBQWM7SUFBSSxDQUFDO0lBQ3hKLFFBQVE7UUFDTixNQUFNLEVBQUUsR0FBRyxJQUFJLENBQUMsVUFBVSxJQUFJLElBQUksQ0FBQyxVQUFVLENBQUMsYUFBYSxJQUFJLElBQUksQ0FBQyxVQUFVLENBQUMsYUFBYSxDQUFDLEVBQUUsQ0FBQztRQUNoRyxJQUFJLElBQUksQ0FBQyxZQUFZLElBQUksRUFBRSxFQUFFO1lBQzNCLElBQUksQ0FBQyxZQUFZLENBQUMsbUJBQW1CLENBQUMsR0FBRyxDQUFDLEVBQUUsRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUM7U0FDL0Q7SUFDSCxDQUFDO0lBQ0QsV0FBVztJQUNYLENBQUM7OztZQVpGLFNBQVMsU0FBQztnQkFDVCxRQUFRLEVBQUUsa0JBQWtCO2FBQzdCOzs7O1lBTitCLFFBQVE7WUFFL0Isb0JBQW9CO1lBRlQsVUFBVTtZQUNyQixZQUFZIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRGlyZWN0aXZlLCBFbGVtZW50UmVmLCBJbmplY3RvciwgT25EZXN0cm95LCBPbkluaXQgfSBmcm9tIFwiQGFuZ3VsYXIvY29yZVwiO1xyXG5pbXBvcnQgeyBGcmFtZUNvbnRleHQgfSBmcm9tIFwiQGZhcnJpcy9kZXZraXRcIjtcclxuaW1wb3J0IHsgQ29tYm9Mb29rdXBDb21wb25lbnQgfSBmcm9tICdAZmFycmlzL3VpLWNvbWJvLWxvb2t1cCc7XHJcblxyXG5ARGlyZWN0aXZlKHtcclxuICBzZWxlY3RvcjogJ1tjb21ib0xvb2t1cFJlZl0nXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBDb21ib0xvb2t1cENvbXBvbmVudFJlZkRpcmVjdGl2ZSBpbXBsZW1lbnRzIE9uSW5pdCwgT25EZXN0cm95IHtcclxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIGluamVjdG9yOiBJbmplY3RvciwgcHJpdmF0ZSBjb21wb25lbnQ6IENvbWJvTG9va3VwQ29tcG9uZW50LCBwcml2YXRlIGVsZW1lbnRSZWY6IEVsZW1lbnRSZWYsIHByaXZhdGUgZnJhbWVDb250ZXh0OiBGcmFtZUNvbnRleHQpIHsgfVxyXG4gIG5nT25Jbml0KCk6IHZvaWQge1xyXG4gICAgY29uc3QgaWQgPSB0aGlzLmVsZW1lbnRSZWYgJiYgdGhpcy5lbGVtZW50UmVmLm5hdGl2ZUVsZW1lbnQgJiYgdGhpcy5lbGVtZW50UmVmLm5hdGl2ZUVsZW1lbnQuaWQ7XHJcbiAgICBpZiAodGhpcy5mcmFtZUNvbnRleHQgJiYgaWQpIHtcclxuICAgICAgdGhpcy5mcmFtZUNvbnRleHQuY29tcG9uZW50UmVmTWFuYWdlci5hZGQoaWQsIHRoaXMuY29tcG9uZW50KTtcclxuICAgIH1cclxuICB9XHJcbiAgbmdPbkRlc3Ryb3koKTogdm9pZCB7XHJcbiAgfVxyXG5cclxufSJdfQ==