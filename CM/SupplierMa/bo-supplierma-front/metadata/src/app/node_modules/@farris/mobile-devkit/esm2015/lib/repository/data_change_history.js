import { DataChangeType } from '../core';
class DataChangeHistory {
    constructor() {
        this.history = [];
    }
    addChange(dataChange) {
        const changeType = DataChangeType[dataChange.changeType];
        this[`on${changeType}Data`](dataChange);
    }
    addChanges(dataChange) {
        dataChange.forEach(change => this.addChange(change));
    }
    clear() {
        this.history.splice(0, this.history.length);
    }
    clearByIds(ids) {
        this.history = this.history.filter(item => {
            if (item.fpath && item.fpath !== '/' && item.fpath.includes('/')) {
                for (const id of ids) {
                    const include = item.fpath.split('/').includes(id);
                    return !include;
                }
            }
            else {
                return !ids.includes(item.dataId);
            }
        });
    }
    isChanged() {
        return this.history.length > 0;
    }
    onAddData(dataChange) {
        this.history.push(dataChange);
    }
    onDeleteData(dataChange) {
        const index = this.history.findIndex(item => item.dataId === dataChange.dataId && item.changeType === DataChangeType.Add);
        if (index >= 0) {
            this.history.splice(index, 1);
        }
        else {
            this.history.push(dataChange);
        }
    }
}
export { DataChangeHistory };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0YV9jaGFuZ2VfaGlzdG9yeS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BmYXJyaXMvbW9iaWxlLWRldmtpdC8iLCJzb3VyY2VzIjpbImxpYi9yZXBvc2l0b3J5L2RhdGFfY2hhbmdlX2hpc3RvcnkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFjLGNBQWMsRUFBRSxNQUFNLFNBQVMsQ0FBQztBQUVyRCxNQUFNLGlCQUFpQjtJQUVuQjtRQUNJLElBQUksQ0FBQyxPQUFPLEdBQUcsRUFBRSxDQUFDO0lBQ3RCLENBQUM7SUFDTSxTQUFTLENBQUMsVUFBc0I7UUFDbkMsTUFBTSxVQUFVLEdBQUcsY0FBYyxDQUFDLFVBQVUsQ0FBQyxVQUFVLENBQUMsQ0FBQztRQUN6RCxJQUFJLENBQUMsS0FBSyxVQUFVLE1BQU0sQ0FBQyxDQUFDLFVBQVUsQ0FBQyxDQUFDO0lBQzVDLENBQUM7SUFDTSxVQUFVLENBQUMsVUFBd0I7UUFDdEMsVUFBVSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQztJQUN6RCxDQUFDO0lBQ00sS0FBSztRQUNSLElBQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUMsRUFBRSxJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQ2hELENBQUM7SUFDTSxVQUFVLENBQUMsR0FBYTtRQUMzQixJQUFJLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxFQUFFO1lBQ3RDLElBQUksSUFBSSxDQUFDLEtBQUssSUFBSSxJQUFJLENBQUMsS0FBSyxLQUFLLEdBQUcsSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsRUFBRTtnQkFDOUQsS0FBSyxNQUFNLEVBQUUsSUFBSSxHQUFHLEVBQUU7b0JBQ2xCLE1BQU0sT0FBTyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxFQUFFLENBQUMsQ0FBQztvQkFDbkQsT0FBTyxDQUFDLE9BQU8sQ0FBQztpQkFDbkI7YUFDSjtpQkFBTTtnQkFDSCxPQUFPLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7YUFDckM7UUFDTCxDQUFDLENBQUMsQ0FBQztJQUNQLENBQUM7SUFDTSxTQUFTO1FBQ1osT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUM7SUFDbkMsQ0FBQztJQUNPLFNBQVMsQ0FBQyxVQUFzQjtRQUNwQyxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQztJQUNsQyxDQUFDO0lBQ08sWUFBWSxDQUFDLFVBQXNCO1FBQ3ZDLE1BQU0sS0FBSyxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sS0FBSyxVQUFVLENBQUMsTUFBTSxJQUFJLElBQUksQ0FBQyxVQUFVLEtBQUssY0FBYyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQzFILElBQUksS0FBSyxJQUFJLENBQUMsRUFBRTtZQUNaLElBQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLEtBQUssRUFBRSxDQUFDLENBQUMsQ0FBQztTQUNqQzthQUFNO1lBQ0gsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUM7U0FDakM7SUFDTCxDQUFDO0NBQ0o7QUFDRCxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERhdGFDaGFuZ2UsIERhdGFDaGFuZ2VUeXBlIH0gZnJvbSAnLi4vY29yZSc7XHJcblxyXG5jbGFzcyBEYXRhQ2hhbmdlSGlzdG9yeSB7XHJcbiAgICBwcml2YXRlIGhpc3Rvcnk6IEFycmF5PERhdGFDaGFuZ2U+O1xyXG4gICAgY29uc3RydWN0b3IoKSB7XHJcbiAgICAgICAgdGhpcy5oaXN0b3J5ID0gW107XHJcbiAgICB9XHJcbiAgICBwdWJsaWMgYWRkQ2hhbmdlKGRhdGFDaGFuZ2U6IERhdGFDaGFuZ2UpIHtcclxuICAgICAgICBjb25zdCBjaGFuZ2VUeXBlID0gRGF0YUNoYW5nZVR5cGVbZGF0YUNoYW5nZS5jaGFuZ2VUeXBlXTtcclxuICAgICAgICB0aGlzW2BvbiR7Y2hhbmdlVHlwZX1EYXRhYF0oZGF0YUNoYW5nZSk7XHJcbiAgICB9XHJcbiAgICBwdWJsaWMgYWRkQ2hhbmdlcyhkYXRhQ2hhbmdlOiBEYXRhQ2hhbmdlW10pIHtcclxuICAgICAgICBkYXRhQ2hhbmdlLmZvckVhY2goY2hhbmdlID0+IHRoaXMuYWRkQ2hhbmdlKGNoYW5nZSkpO1xyXG4gICAgfVxyXG4gICAgcHVibGljIGNsZWFyKCkge1xyXG4gICAgICAgIHRoaXMuaGlzdG9yeS5zcGxpY2UoMCwgdGhpcy5oaXN0b3J5Lmxlbmd0aCk7XHJcbiAgICB9XHJcbiAgICBwdWJsaWMgY2xlYXJCeUlkcyhpZHM6IHN0cmluZ1tdKSB7XHJcbiAgICAgICAgdGhpcy5oaXN0b3J5ID0gdGhpcy5oaXN0b3J5LmZpbHRlcihpdGVtID0+IHtcclxuICAgICAgICAgICAgaWYgKGl0ZW0uZnBhdGggJiYgaXRlbS5mcGF0aCAhPT0gJy8nICYmIGl0ZW0uZnBhdGguaW5jbHVkZXMoJy8nKSkge1xyXG4gICAgICAgICAgICAgICAgZm9yIChjb25zdCBpZCBvZiBpZHMpIHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBpbmNsdWRlID0gaXRlbS5mcGF0aC5zcGxpdCgnLycpLmluY2x1ZGVzKGlkKTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gIWluY2x1ZGU7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gIWlkcy5pbmNsdWRlcyhpdGVtLmRhdGFJZCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgIH1cclxuICAgIHB1YmxpYyBpc0NoYW5nZWQoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuaGlzdG9yeS5sZW5ndGggPiAwO1xyXG4gICAgfVxyXG4gICAgcHJpdmF0ZSBvbkFkZERhdGEoZGF0YUNoYW5nZTogRGF0YUNoYW5nZSkge1xyXG4gICAgICAgIHRoaXMuaGlzdG9yeS5wdXNoKGRhdGFDaGFuZ2UpO1xyXG4gICAgfVxyXG4gICAgcHJpdmF0ZSBvbkRlbGV0ZURhdGEoZGF0YUNoYW5nZTogRGF0YUNoYW5nZSkge1xyXG4gICAgICAgIGNvbnN0IGluZGV4ID0gdGhpcy5oaXN0b3J5LmZpbmRJbmRleChpdGVtID0+IGl0ZW0uZGF0YUlkID09PSBkYXRhQ2hhbmdlLmRhdGFJZCAmJiBpdGVtLmNoYW5nZVR5cGUgPT09IERhdGFDaGFuZ2VUeXBlLkFkZCk7XHJcbiAgICAgICAgaWYgKGluZGV4ID49IDApIHtcclxuICAgICAgICAgICAgdGhpcy5oaXN0b3J5LnNwbGljZShpbmRleCwgMSk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy5oaXN0b3J5LnB1c2goZGF0YUNoYW5nZSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcbmV4cG9ydCB7IERhdGFDaGFuZ2VIaXN0b3J5IH07XHJcbiJdfQ==