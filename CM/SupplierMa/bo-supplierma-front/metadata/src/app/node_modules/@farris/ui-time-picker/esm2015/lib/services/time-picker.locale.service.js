/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { LocaleService } from '@farris/ui-locale';
import * as i0 from "@angular/core";
import * as i1 from "@farris/ui-locale";
export class TimePickerLocaleService {
    /**
     * @param {?} localeService
     */
    constructor(localeService) {
        this.localeService = localeService;
        this.localeConfig = {
            'ZH_CN': {
                placeholder: '请选择时间'
            },
            'EN_US': {
                placeholder: 'Please select a time'
            }
        };
    }
    /**
     * @return {?}
     */
    getLocaleConfig() {
        /** @type {?} */
        const locale = this.localeService.getValue('locale');
        if (locale && this.localeConfig[locale]) {
            return this.localeConfig[locale];
        }
        else {
            return this.localeConfig.ZH_CN;
        }
    }
}
TimePickerLocaleService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */
TimePickerLocaleService.ctorParameters = () => [
    { type: LocaleService }
];
/** @nocollapse */ TimePickerLocaleService.ngInjectableDef = i0.defineInjectable({ factory: function TimePickerLocaleService_Factory() { return new TimePickerLocaleService(i0.inject(i1.LocaleService)); }, token: TimePickerLocaleService, providedIn: "root" });
if (false) {
    /**
     * @type {?}
     * @private
     */
    TimePickerLocaleService.prototype.localeConfig;
    /**
     * @type {?}
     * @private
     */
    TimePickerLocaleService.prototype.localeService;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGltZS1waWNrZXIubG9jYWxlLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZmFycmlzL3VpLXRpbWUtcGlja2VyLyIsInNvdXJjZXMiOlsibGliL3NlcnZpY2VzL3RpbWUtcGlja2VyLmxvY2FsZS5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQzs7O0FBS2xELE1BQU0sT0FBTyx1QkFBdUI7Ozs7SUFTaEMsWUFBb0IsYUFBNEI7UUFBNUIsa0JBQWEsR0FBYixhQUFhLENBQWU7UUFSeEMsaUJBQVksR0FBRztZQUNuQixPQUFPLEVBQUc7Z0JBQ04sV0FBVyxFQUFFLE9BQU87YUFDdkI7WUFDRCxPQUFPLEVBQUc7Z0JBQ04sV0FBVyxFQUFFLHNCQUFzQjthQUN0QztTQUNKLENBQUM7SUFDaUQsQ0FBQzs7OztJQUM3QyxlQUFlOztjQUNaLE1BQU0sR0FBRyxJQUFJLENBQUMsYUFBYSxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUM7UUFDcEQsSUFBSSxNQUFNLElBQUksSUFBSSxDQUFDLFlBQVksQ0FBQyxNQUFNLENBQUMsRUFBRTtZQUNyQyxPQUFPLElBQUksQ0FBQyxZQUFZLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDcEM7YUFBTTtZQUNILE9BQU8sSUFBSSxDQUFDLFlBQVksQ0FBQyxLQUFLLENBQUM7U0FDbEM7SUFDTCxDQUFDOzs7WUFwQkosVUFBVSxTQUFDO2dCQUNSLFVBQVUsRUFBRSxNQUFNO2FBQ3JCOzs7O1lBSlEsYUFBYTs7Ozs7Ozs7SUFNbEIsK0NBT0U7Ozs7O0lBQ1UsZ0RBQW9DIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBMb2NhbGVTZXJ2aWNlIH0gZnJvbSAnQGZhcnJpcy91aS1sb2NhbGUnO1xyXG5cclxuQEluamVjdGFibGUoe1xyXG4gICAgcHJvdmlkZWRJbjogJ3Jvb3QnXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBUaW1lUGlja2VyTG9jYWxlU2VydmljZSB7XHJcbiAgICBwcml2YXRlIGxvY2FsZUNvbmZpZyA9IHtcclxuICAgICAgICAnWkhfQ04nIDoge1xyXG4gICAgICAgICAgICBwbGFjZWhvbGRlcjogJ+ivt+mAieaLqeaXtumXtCdcclxuICAgICAgICB9LFxyXG4gICAgICAgICdFTl9VUycgOiB7XHJcbiAgICAgICAgICAgIHBsYWNlaG9sZGVyOiAnUGxlYXNlIHNlbGVjdCBhIHRpbWUnXHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgbG9jYWxlU2VydmljZTogTG9jYWxlU2VydmljZSkge31cclxuICAgIHB1YmxpYyBnZXRMb2NhbGVDb25maWcoKSB7XHJcbiAgICAgICAgY29uc3QgbG9jYWxlID0gdGhpcy5sb2NhbGVTZXJ2aWNlLmdldFZhbHVlKCdsb2NhbGUnKTtcclxuICAgICAgICBpZiAobG9jYWxlICYmIHRoaXMubG9jYWxlQ29uZmlnW2xvY2FsZV0pIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMubG9jYWxlQ29uZmlnW2xvY2FsZV07XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMubG9jYWxlQ29uZmlnLlpIX0NOO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG4iXX0=