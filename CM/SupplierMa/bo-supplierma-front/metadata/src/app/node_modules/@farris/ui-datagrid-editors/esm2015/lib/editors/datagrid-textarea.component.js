/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*
 * @Author: 疯狂秀才(Lucas Huang)
 * @Date: 2019-08-14 11:44:30
 * @LastEditors: 疯狂秀才(Lucas Huang)
 * @LastEditTime: 2019-10-14 13:15:49
 * @QQ: 1055818239
 * @Version: v0.0.1
 */
import { Component, ElementRef, ViewChild, Renderer2, NgZone, Injector } from '@angular/core';
import { MessagerService } from '@farris/ui-messager';
import { EventManager } from '@angular/platform-browser';
import { BsModalService } from '@farris/ui-modal';
import { TextareaWordcountDirective } from '@farris/ui-forms';
import { DatagridBaseEditorDirective } from '../datagrid-base-editor.directive';
export class DatagridTextareaComponent extends DatagridBaseEditorDirective {
    /**
     * @param {?} render
     * @param {?} el
     * @param {?} ngzone
     * @param {?} injector
     */
    constructor(render, el, ngzone, injector) {
        super(render, el, injector);
        this.ngzone = ngzone;
        this.injector = injector;
        this.altEnterHandler = null;
        this.modalService = this.injector.get(BsModalService);
        this.messagerService = this.injector.get(MessagerService);
        this.eventManager = this.injector.get(EventManager);
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        super.ngOnInit();
        if (!this.dg.nowrap) {
            this.render.setStyle(this.instance.nativeElement, 'height', `${this.height}px`);
        }
        this.inputElement = this.instance.nativeElement;
        this.ngzone.runOutsideAngular((/**
         * @return {?}
         */
        () => {
            this.inputClickHandler = this.render.listen(this.instance.nativeElement, 'click', (/**
             * @param {?} e
             * @return {?}
             */
            (e) => {
                e.stopPropagation();
                return false;
            }));
        }));
        this.bindEventHandler();
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        if (this.instance) {
            this.inputClickHandler();
            if (this.altEnterHandler) {
                this.altEnterHandler();
            }
        }
    }
    /**
     * @private
     * @return {?}
     */
    bindEventHandler() {
        this.altEnterHandler = this.eventManager.addEventListener(this.inputElement, 'keydown.alt.enter', (/**
         * @param {?} event
         * @return {?}
         */
        (event) => {
            /** @type {?} */
            const target = ((/** @type {?} */ (event.target)));
            /** @type {?} */
            const val = target.value + '\n';
            target.value = val;
            event.preventDefault();
            event.stopPropagation();
            return false;
        }));
    }
    /**
     * @return {?}
     */
    showDialog() {
        const { dialogWidth, dialogHeight } = this.options;
        /** @type {?} */
        const opts = {
            width: dialogWidth || 500,
            height: dialogHeight || 400,
            showFontSize: true,
            enableWordCount: this.options.enableWordCount,
            countType: this.options.countType,
            maxLength: this.options.maxLength
        };
        this.messagerService.prompt2(this.column.title, this.formControl.value, opts).subscribe((/**
         * @param {?} v
         * @return {?}
         */
        v => {
            if (v) {
                this.formControl.setValue(v);
            }
            this.inputElement.focus();
            if (!this.options.onlyShowInDialog && this.wordcountref) {
                this.wordcountref.updateWordsCount();
            }
        }));
    }
}
DatagridTextareaComponent.decorators = [
    { type: Component, args: [{
                selector: 'grid-editor-textarea',
                template: `
    <div [formGroup]="group" class="f-datagrid-cell-formgroup farris-group-auto" style="position:relative">
        <datagrid-tooltip [control]="formControl" [tooltipPosition]="'top-left'" [message]="errorMessage">
            <textarea #input class="form-control"
                style="height:100%;resize:none;min-height:auto;"
                [formControlName]="column.field"
                [word-count]="options?.enableWordCount"
                [countType]="options?.countType"
                #wordcount="WordCountRef"
                [onlyShowInDialog]="options?.onlyShowInDialog"
                maxlength="{{options?.maxLength}}"></textarea>
        </datagrid-tooltip>
        <span class="f-icon modal_maximize" title="弹出窗口进行编辑" *ngIf="options?.editType && options?.editType !== 'default'"
             style="position: absolute;top: 2px;right: 2px; cursor:pointer" (click)="showDialog()"></span>
    </div>
    `
            }] }
];
/** @nocollapse */
DatagridTextareaComponent.ctorParameters = () => [
    { type: Renderer2 },
    { type: ElementRef },
    { type: NgZone },
    { type: Injector }
];
DatagridTextareaComponent.propDecorators = {
    instance: [{ type: ViewChild, args: ['input',] }],
    wordcountref: [{ type: ViewChild, args: ['wordcount',] }]
};
if (false) {
    /** @type {?} */
    DatagridTextareaComponent.prototype.instance;
    /** @type {?} */
    DatagridTextareaComponent.prototype.wordcountref;
    /**
     * @type {?}
     * @private
     */
    DatagridTextareaComponent.prototype.inputClickHandler;
    /**
     * @type {?}
     * @private
     */
    DatagridTextareaComponent.prototype.modalService;
    /**
     * @type {?}
     * @private
     */
    DatagridTextareaComponent.prototype.messagerService;
    /**
     * @type {?}
     * @private
     */
    DatagridTextareaComponent.prototype.eventManager;
    /**
     * @type {?}
     * @private
     */
    DatagridTextareaComponent.prototype.altEnterHandler;
    /**
     * @type {?}
     * @private
     */
    DatagridTextareaComponent.prototype.ngzone;
    /** @type {?} */
    DatagridTextareaComponent.prototype.injector;
}
//# sourceMappingURL=data:application/json;base64,