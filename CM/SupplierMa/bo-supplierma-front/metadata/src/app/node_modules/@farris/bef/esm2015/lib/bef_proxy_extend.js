/**
 * @fileoverview added by tsickle
 * Generated from: lib/bef_proxy_extend.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { throwError, of, EMPTY } from 'rxjs';
import { switchMap } from 'rxjs/operators';
import { RequestInfoUtil, ResponseInfoUtil } from './utils';
import { BackEndMessageUtil } from './utils/back_end_message.util';
import { BefSessionManager } from './session/bef_session_manager';
// tslint:disable: max-line-length tslint:disable: no-string-literal
export class BefProxyExtend {
    /**
     * @param {?} context
     */
    constructor(context) {
        this.context = context;
    }
    /**
     * 请求结果返回
     * @param {?} response response
     * @param {?=} ignoreChanges 忽略变更
     * @param {?=} options
     * @return {?}
     */
    onResponse(response, ignoreChanges, options) {
        if (response && response.innerDataChange && ignoreChanges !== true) {
            this.context.handleDataChangeDetails(response.innerDataChange);
        }
        if (response && response.innerVariableChange) {
            this.context.handleVariableChangeDetail(response.innerVariableChange);
        }
        /** @type {?} */
        const messages = ResponseInfoUtil.parseBackEndMessage(response);
        BackEndMessageUtil.handleMessage(messages, this.context.getInjector());
        this.context.clearAllEntityChanges();
        /** @type {?} */
        const requestInfo = RequestInfoUtil.getRequestInfo(options);
        /** @type {?} */
        const variableChange = requestInfo && requestInfo.variableChange;
        this.context.clearAllVariableChanges(variableChange);
        if (response && response.hasOwnProperty('returnValue')) {
            return response.returnValue;
        }
        else {
            return response;
        }
    }
    /**
     * 发生错误
     * @param {?} error error
     * @param {?} selfHandError 自定义错误处理
     * @param {?} ignoreError 忽略错误
     * @return {?}
     */
    onError(error, selfHandError, ignoreError) {
        /** @type {?} */
        const formAppContext = this.context.appContext.getFormAppContext();
        /** @type {?} */
        const applicationId = formAppContext.ApplicationId;
        /** @type {?} */
        const loadingServices = window['DEVKIT_LOADING_SERVICE'];
        /** @type {?} */
        const messages = ResponseInfoUtil.parseBackEndError(error);
        BackEndMessageUtil.handleMessage(messages, this.context.getInjector());
        if (loadingServices && loadingServices instanceof Array && loadingServices.length > 0) {
            for (const loadingService of loadingServices) {
                if (typeof (loadingService.destroy) === 'function') {
                    loadingService.destroy();
                }
            }
        }
        if (!!selfHandError) {
            return throwError(error);
        }
        else {
            /** @type {?} */
            const eventBus = this.context.restService.eventBus;
            /** @type {?} */
            const applicationContext = window[applicationId] || {};
            /** @type {?} */
            const isExceptionHandlerExist = !!applicationContext.isExceptionHandlerExist;
            /** @type {?} */
            const messages = ResponseInfoUtil.parseBackEndError(error);
            /** @type {?} */
            const bizMessages = BackEndMessageUtil.getFormlessMessages(messages);
            /** @type {?} */
            const isExistFormlessMessage = bizMessages && bizMessages.length > 0 || false;
            /** @type {?} */
            const needThrowException = !(error && error.error && error.error.extensionMessage && BackEndMessageUtil.isBackEndMessageHandlerExist(this.context.getInjector()) && !isExistFormlessMessage);
            /** @type {?} */
            const willThrowException = !!eventBus && isExceptionHandlerExist && needThrowException;
            BackEndMessageUtil.handleMessage(messages, this.context.getInjector(), { hasThrowError: willThrowException, isException: true, eventBus: eventBus, error, formAppContext });
            if (!!eventBus && isExceptionHandlerExist) {
                if (ResponseInfoUtil.isReported401Error(error)) {
                    return throwError(error);
                }
                if (needThrowException) {
                    eventBus.post('Exception', '', 'onException', error, formAppContext);
                }
                if (ignoreError) {
                    return of(null);
                }
                else {
                    return EMPTY;
                }
            }
            else {
                return throwError(error);
            }
        }
    }
    /**
     * 扩展http headers
     * @param {?} headers headers
     * @param {?=} runtimeContext
     * @return {?}
     */
    extendHeaders(headers, runtimeContext) {
        /** @type {?} */
        const formAppContext = this.context.appContext.getFormAppContext();
        /** @type {?} */
        const $getSessionId = BefSessionManager.getSessionId(formAppContext, this.context.restService.sessionService);
        return $getSessionId.pipe(switchMap((/**
         * @param {?} sessionId
         * @return {?}
         */
        sessionId => {
            headers = this.context.restService.sessionService.extendRequestHeaders(headers, runtimeContext);
            return of(headers);
        })));
    }
    /**
     * 扩展请求参数
     * @param {?} url
     * @param {?} params 参数
     * @return {?}
     */
    extendUrl(url, params) {
        if (!params) {
            return url;
        }
        for (const key in params) {
            if (params.hasOwnProperty(key)) {
                /** @type {?} */
                const value = JSON.stringify(params[key]);
                if (url.indexOf('?') === -1) {
                    url = `${url}?${key}=${value}`;
                }
                else {
                    url = `${url}&${key}=${value}`;
                }
            }
        }
        return url;
    }
    /**
     * 扩展请求体
     * @param {?} body body
     * @return {?}
     */
    extendBody(body) {
        if (!body || typeof body !== 'object' || Object.keys(body).length < 1) {
            return body;
        }
        Object.keys(body).forEach((/**
         * @param {?} name
         * @return {?}
         */
        name => {
            if (name === 'requestInfo') {
                body['requestInfo'] = this.context.restService.buildRequestInfo();
            }
        }));
        // 兼容J版后端body只有一个key时body只传value的情况
        if (Object.keys(body).length === 1) {
            body = Object.values(body)[0];
        }
        return body;
    }
    /**
     * @param {?} response
     * @return {?}
     */
    parseHeaders(response) {
        /** @type {?} */
        const sessionIdKey = 'BEFSessionID';
        if (response.headers && response.headers.has(sessionIdKey)) {
            this.context.restService.sessionService.setBeSessionId(response.headers.get(sessionIdKey));
        }
    }
}
if (false) {
    /**
     * @type {?}
     * @private
     */
    BefProxyExtend.prototype.context;
}
//# sourceMappingURL=data:application/json;base64,