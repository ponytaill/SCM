import { HttpClient } from "@angular/common/http";
import { Inject, Injectable, Injector } from "@angular/core";
import { FORM_PATH_TOKEN } from "@farris/devkit";
import { share } from "rxjs/operators";
var FormManifestService = /** @class */ (function () {
    function FormManifestService(injector, modulePath, httpClient) {
        this.injector = injector;
        this.modulePath = modulePath;
        this.httpClient = httpClient;
    }
    FormManifestService.prototype.load = function () {
        if (this.modulePath.endsWith('\/')) {
            this.modulePath = this.modulePath.substring(0, this.modulePath.length - 1);
        }
        var formManifestPath = this.modulePath + "/expressions/form.manifest.json?version=" + new Date().valueOf().toString();
        var request$ = FormManifestService.mainfests.get(this.modulePath);
        if (request$) {
            return request$;
        }
        else {
            var req$ = this.httpClient.get(formManifestPath, { responseType: 'json' }).pipe(share());
            FormManifestService.mainfests.set(this.modulePath, req$);
            return req$;
        }
    };
    FormManifestService.mainfests = new Map();
    FormManifestService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    FormManifestService.ctorParameters = function () { return [
        { type: Injector },
        { type: undefined, decorators: [{ type: Inject, args: [FORM_PATH_TOKEN,] }] },
        { type: HttpClient }
    ]; };
    return FormManifestService;
}());
export { FormManifestService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZm9ybV9tYW5pZmVzdF9zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGZhcnJpcy9jb21tYW5kLXNlcnZpY2VzLyIsInNvdXJjZXMiOlsibGliL21hbmlmZXN0L2Zvcm1fbWFuaWZlc3Rfc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFDbEQsT0FBTyxFQUFFLE1BQU0sRUFBRSxVQUFVLEVBQUUsUUFBUSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRTdELE9BQU8sRUFBRSxlQUFlLEVBQXNDLE1BQU0sZ0JBQWdCLENBQUM7QUFDckYsT0FBTyxFQUFFLEtBQUssRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBRXZDO0lBR0UsNkJBQ1UsUUFBa0IsRUFDTyxVQUFVLEVBQ25DLFVBQXNCO1FBRnRCLGFBQVEsR0FBUixRQUFRLENBQVU7UUFDTyxlQUFVLEdBQVYsVUFBVSxDQUFBO1FBQ25DLGVBQVUsR0FBVixVQUFVLENBQVk7SUFDNUIsQ0FBQztJQUNFLGtDQUFJLEdBQVg7UUFDRSxJQUFJLElBQUksQ0FBQyxVQUFVLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxFQUFFO1lBQ2xDLElBQUksQ0FBQyxVQUFVLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQyxTQUFTLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxVQUFVLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxDQUFDO1NBQzVFO1FBQ0QsSUFBTSxnQkFBZ0IsR0FBTSxJQUFJLENBQUMsVUFBVSxnREFBMkMsSUFBSSxJQUFJLEVBQUUsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxRQUFRLEVBQUksQ0FBQztRQUN4SCxJQUFNLFFBQVEsR0FBRyxtQkFBbUIsQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQztRQUNwRSxJQUFJLFFBQVEsRUFBRTtZQUNaLE9BQU8sUUFBUSxDQUFDO1NBQ2pCO2FBQU07WUFDTCxJQUFNLElBQUksR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBZSxnQkFBZ0IsRUFBRSxFQUFFLFlBQVksRUFBRSxNQUFNLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQyxDQUFDO1lBQ3pHLG1CQUFtQixDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLFVBQVUsRUFBRSxJQUFJLENBQUMsQ0FBQztZQUN6RCxPQUFPLElBQUksQ0FBQztTQUNiO0lBQ0gsQ0FBQztJQW5CYyw2QkFBUyxHQUFHLElBQUksR0FBRyxFQUFvQyxDQUFDOztnQkFGeEUsVUFBVTs7OztnQkFMa0IsUUFBUTtnREFVaEMsTUFBTSxTQUFDLGVBQWU7Z0JBWGxCLFVBQVU7O0lBNEJuQiwwQkFBQztDQUFBLEFBdEJELElBc0JDO1NBckJZLG1CQUFtQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEh0dHBDbGllbnQgfSBmcm9tIFwiQGFuZ3VsYXIvY29tbW9uL2h0dHBcIjtcbmltcG9ydCB7IEluamVjdCwgSW5qZWN0YWJsZSwgSW5qZWN0b3IgfSBmcm9tIFwiQGFuZ3VsYXIvY29yZVwiO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gXCJyeGpzXCI7XG5pbXBvcnQgeyBGT1JNX1BBVEhfVE9LRU4sIEZvcm1NYW5pZmVzdCwgSUZvcm1NYW5pZmVzdFNlcnZpY2UgfSBmcm9tIFwiQGZhcnJpcy9kZXZraXRcIjtcbmltcG9ydCB7IHNoYXJlIH0gZnJvbSBcInJ4anMvb3BlcmF0b3JzXCI7XG5cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBGb3JtTWFuaWZlc3RTZXJ2aWNlIGltcGxlbWVudHMgSUZvcm1NYW5pZmVzdFNlcnZpY2Uge1xuICBwcml2YXRlIHN0YXRpYyBtYWluZmVzdHMgPSBuZXcgTWFwPHN0cmluZywgT2JzZXJ2YWJsZTxGb3JtTWFuaWZlc3Q+PigpO1xuICBjb25zdHJ1Y3RvcihcbiAgICBwcml2YXRlIGluamVjdG9yOiBJbmplY3RvcixcbiAgICBASW5qZWN0KEZPUk1fUEFUSF9UT0tFTikgcHJpdmF0ZSBtb2R1bGVQYXRoLFxuICAgIHByaXZhdGUgaHR0cENsaWVudDogSHR0cENsaWVudFxuICApIHsgfVxuICBwdWJsaWMgbG9hZCgpOiBPYnNlcnZhYmxlPEZvcm1NYW5pZmVzdD4ge1xuICAgIGlmICh0aGlzLm1vZHVsZVBhdGguZW5kc1dpdGgoJ1xcLycpKSB7XG4gICAgICB0aGlzLm1vZHVsZVBhdGggPSB0aGlzLm1vZHVsZVBhdGguc3Vic3RyaW5nKDAsIHRoaXMubW9kdWxlUGF0aC5sZW5ndGggLSAxKTtcbiAgICB9XG4gICAgY29uc3QgZm9ybU1hbmlmZXN0UGF0aCA9IGAke3RoaXMubW9kdWxlUGF0aH0vZXhwcmVzc2lvbnMvZm9ybS5tYW5pZmVzdC5qc29uP3ZlcnNpb249JHtuZXcgRGF0ZSgpLnZhbHVlT2YoKS50b1N0cmluZygpfWA7XG4gICAgY29uc3QgcmVxdWVzdCQgPSBGb3JtTWFuaWZlc3RTZXJ2aWNlLm1haW5mZXN0cy5nZXQodGhpcy5tb2R1bGVQYXRoKTtcbiAgICBpZiAocmVxdWVzdCQpIHtcbiAgICAgIHJldHVybiByZXF1ZXN0JDtcbiAgICB9IGVsc2Uge1xuICAgICAgY29uc3QgcmVxJCA9IHRoaXMuaHR0cENsaWVudC5nZXQ8Rm9ybU1hbmlmZXN0Pihmb3JtTWFuaWZlc3RQYXRoLCB7IHJlc3BvbnNlVHlwZTogJ2pzb24nIH0pLnBpcGUoc2hhcmUoKSk7XG4gICAgICBGb3JtTWFuaWZlc3RTZXJ2aWNlLm1haW5mZXN0cy5zZXQodGhpcy5tb2R1bGVQYXRoLCByZXEkKTtcbiAgICAgIHJldHVybiByZXEkO1xuICAgIH1cbiAgfVxufVxuIl19