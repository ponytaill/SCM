/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, ElementRef, EventEmitter, Input, Output, Renderer2, ViewContainerRef, Optional, Injector, NgZone } from '@angular/core';
import { PopoverConfig } from './popover.config';
import { ComponentLoaderFactory } from '@farris/ui-modal/component-loader';
import { PopoverContainerComponent } from './popover-container.component';
import { PositioningService } from '@farris/ui-modal/positioning';
import { OverLayHiddenService } from '@farris/ui-common';
/**
 * A lightweight, extensible directive for fancy popover creation.
 */
var PopoverDirective = /** @class */ (function () {
    function PopoverDirective(_config, _elementRef, _renderer, _viewContainerRef, cis, _positionService, inject) {
        this._elementRef = _elementRef;
        this._renderer = _renderer;
        this._positionService = _positionService;
        this.inject = inject;
        /**
         * Close popover on outside click
         */
        this.outsideClick = true;
        /**
         * A selector specifying the element the popover should be appended to.
         */
        this.container = 'body';
        /**
         * Css class for popover container
         */
        this.containerClass = '';
        // 按条件激活
        this.popActive = true;
        // 显示动作
        this.showAction = 'show';
        this.isFixed = false;
        this._isInited = false;
        // 标记是否进入提示框内
        this.containerInOutState = false;
        if (this.inject) {
            this.ngZone = this.inject.get(NgZone, null);
            this.overlaySer = this.inject.get(OverLayHiddenService, null);
        }
        this._popover = cis
            .createLoader(_elementRef, _viewContainerRef, _renderer)
            .provide({ provide: PopoverConfig, useValue: _config });
        Object.assign(this, _config);
        this.onShown = this._popover.onShown;
        this.onHidden = this._popover.onHidden;
        // fix: no focus on button on Mac OS #1795
        if (typeof window !== 'undefined') {
            _elementRef.nativeElement.addEventListener('click', (/**
             * @return {?}
             */
            function () {
                try {
                    _elementRef.nativeElement.focus();
                }
                catch (err) {
                    return;
                }
            }));
        }
        if (!this.overlaySer) {
            this.overlaySer = new OverLayHiddenService();
        }
    }
    Object.defineProperty(PopoverDirective.prototype, "isOpen", {
        /**
         * Returns whether or not the popover is currently being shown
         */
        get: /**
         * Returns whether or not the popover is currently being shown
         * @return {?}
         */
        function () {
            return this._popover.isShown;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (value) {
                this[this.showAction]();
            }
            else {
                this.hide();
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Opens an element’s popover. This is considered a “manual” triggering of
     * the popover.
     */
    /**
     * Opens an element’s popover. This is considered a “manual” triggering of
     * the popover.
     * @return {?}
     */
    PopoverDirective.prototype.show = /**
     * Opens an element’s popover. This is considered a “manual” triggering of
     * the popover.
     * @return {?}
     */
    function () {
        var _this = this;
        if (!this.popActive || this._popover.isShown || !this.popover) {
            return;
        }
        this._popover
            .attach(PopoverContainerComponent)
            .to(this.container)
            .position({ attachment: this.placement })
            .show({
            showType: "popover",
            content: this.popover,
            context: this.popoverContext,
            placement: this.placement,
            title: this.popoverTitle,
            containerClass: this.containerClass,
        });
        this.overlaySer.registerMouseEvent(this._elementRef.nativeElement, (/**
         * @return {?}
         */
        function () {
            _this._popover.hide();
        }));
        // this.isOpen = true;
        if (this.triggers == 'hover' && this._popover.instance && this._popover.instance.getMouseState) {
            this._popover.instance.getMouseState().subscribe((/**
             * @param {?} state
             * @return {?}
             */
            function (state) {
                _this.containerInOutState = state;
                if (!state) {
                    _this._popover.hide();
                }
            }));
        }
    };
    /**
     * @return {?}
     */
    PopoverDirective.prototype.show2 = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (!this.popActive || this._popover.isShown || !this.popover) {
            return;
        }
        /** @type {?} */
        var targetRef = this._popover
            .attach(PopoverContainerComponent)
            .to(this.container)
            .show({
            content: this.popover,
            context: this.popoverContext,
            placement: this.placement,
            title: this.popoverTitle,
            containerClass: this.containerClass
        });
        this.overlaySer.registerMouseEvent(this._elementRef.nativeElement, (/**
         * @return {?}
         */
        function () {
            _this._popover.hide();
        }));
        //this.isOpen = true;
        var _a = this._elementRef.nativeElement.getBoundingClientRect(), hostHeight = _a.height, hostWidth = _a.width, top = _a.top, left = _a.left;
        var _b = targetRef.location.nativeElement.getBoundingClientRect(), targetHeight = _b.height, targetWidth = _b.width;
        /** @type {?} */
        var targetTop;
        /** @type {?} */
        var targetLeft;
        switch (this.placement) {
            case 'bottom':
                targetTop = top - targetHeight - 8 + "px";
                targetLeft = left + hostWidth / 2 - targetWidth / 2 + "px";
                this._renderer.addClass(targetRef.location.nativeElement, "arrow-" + 'left');
                break;
            case 'left':
                targetTop = top - targetHeight - 8 + "px";
                targetLeft = left + hostWidth / 2 - targetWidth / 2 + "px";
                this._renderer.addClass(targetRef.location.nativeElement, "arrow-" + 'left');
                break;
            case 'right':
                targetTop = top - targetHeight - 8 + "px";
                targetLeft = left + hostWidth / 2 - targetWidth / 2 + "px";
                this._renderer.addClass(targetRef.location.nativeElement, "arrow-" + 'left');
                break;
            default:
                targetTop = top - targetHeight - 8 + "px";
                targetLeft = left + hostWidth / 2 - targetWidth / 2 + "px";
                this._renderer.addClass(targetRef.location.nativeElement, "arrow-" + 'left');
                break;
        }
        /** @type {?} */
        var postion = { top: targetTop, left: targetLeft };
        this.setStyles(targetRef.location.nativeElement, postion);
    };
    /**
     * @param {?} element
     * @param {?} postion
     * @return {?}
     */
    PopoverDirective.prototype.setStyles = /**
     * @param {?} element
     * @param {?} postion
     * @return {?}
     */
    function (element, postion) {
        var _this = this;
        /** @type {?} */
        var paramsArr = Object.keys(postion);
        paramsArr &&
            paramsArr.forEach((/**
             * @param {?} param
             * @return {?}
             */
            function (param) {
                _this._renderer.setStyle(element, param, postion[param]);
            }));
    };
    /**
     * Closes an element’s popover. This is considered a “manual” triggering of
     * the popover.
     */
    /**
     * Closes an element’s popover. This is considered a “manual” triggering of
     * the popover.
     * @return {?}
     */
    PopoverDirective.prototype.hide = /**
     * Closes an element’s popover. This is considered a “manual” triggering of
     * the popover.
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.triggers == 'hover' && this.ngZone) {
            if (this.isOpen) {
                this.ngZone.runOutsideAngular((/**
                 * @return {?}
                 */
                function () {
                    setTimeout((/**
                     * @return {?}
                     */
                    function () {
                        if (!_this.containerInOutState) {
                            _this._popover.hide();
                            _this.overlaySer.destory(_this._elementRef.nativeElement);
                        }
                    }), 300);
                }));
            }
            return;
        }
        if (this.isOpen) {
            this._popover.hide();
            //this.isOpen = false;
            this.overlaySer.destory(this._elementRef.nativeElement);
        }
    };
    /**
     * Toggles an element’s popover. This is considered a “manual” triggering of
     * the popover.
     */
    /**
     * Toggles an element’s popover. This is considered a “manual” triggering of
     * the popover.
     * @return {?}
     */
    PopoverDirective.prototype.toggle = /**
     * Toggles an element’s popover. This is considered a “manual” triggering of
     * the popover.
     * @return {?}
     */
    function () {
        if (this.isOpen) {
            return this.hide();
        }
        this.show();
    };
    /**
     * @return {?}
     */
    PopoverDirective.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        // fix: seems there are an issue with `routerLinkActive`
        // which result in duplicated call ngOnInit without call to ngOnDestroy
        // read more: https://github.com/valor-software/ngx-bootstrap/issues/1885
        if (this._isInited) {
            return;
        }
        this._isInited = true;
        if (this.isFixed) {
            this._positionService.setOptions({
                modifiers: {
                    preventOverflow: {
                        enabled: false
                    }
                }
            });
        }
        if (this.triggers == 'hover') {
            this._popover.listen({
                triggers: this.triggers,
                outsideClick: this.outsideClick,
                show: (/**
                 * @return {?}
                 */
                function () { return _this[_this.showAction](); }),
                hide: (/**
                 * @return {?}
                 */
                function () { return _this.hide(); })
            });
        }
        else {
            this._popover.listen({
                triggers: this.triggers,
                outsideClick: this.outsideClick,
                show: (/**
                 * @return {?}
                 */
                function () { return _this[_this.showAction](); })
            });
        }
    };
    /**
     * @return {?}
     */
    PopoverDirective.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this._popover.dispose();
    };
    PopoverDirective.decorators = [
        { type: Directive, args: [{ selector: '[farrisPopover]', exportAs: 'bs-popover' },] }
    ];
    /** @nocollapse */
    PopoverDirective.ctorParameters = function () { return [
        { type: PopoverConfig },
        { type: ElementRef },
        { type: Renderer2 },
        { type: ViewContainerRef },
        { type: ComponentLoaderFactory },
        { type: PositioningService },
        { type: Injector, decorators: [{ type: Optional }] }
    ]; };
    PopoverDirective.propDecorators = {
        popover: [{ type: Input }],
        popoverContext: [{ type: Input }],
        popoverTitle: [{ type: Input }],
        placement: [{ type: Input }],
        outsideClick: [{ type: Input }],
        triggers: [{ type: Input }],
        container: [{ type: Input }],
        containerClass: [{ type: Input }],
        popActive: [{ type: Input }],
        showAction: [{ type: Input }],
        isOpen: [{ type: Input }],
        isFixed: [{ type: Input }],
        onShown: [{ type: Output }],
        onHidden: [{ type: Output }]
    };
    return PopoverDirective;
}());
export { PopoverDirective };
if (false) {
    /**
     * Content to be displayed as popover.
     * @type {?}
     */
    PopoverDirective.prototype.popover;
    /**
     * Context to be used if popover is a template.
     * @type {?}
     */
    PopoverDirective.prototype.popoverContext;
    /**
     * Title of a popover.
     * @type {?}
     */
    PopoverDirective.prototype.popoverTitle;
    /**
     * Placement of a popover. Accepts: "top", "bottom", "left", "right"
     * @type {?}
     */
    PopoverDirective.prototype.placement;
    /**
     * Close popover on outside click
     * @type {?}
     */
    PopoverDirective.prototype.outsideClick;
    /**
     * Specifies events that should trigger. Supports a space separated list of
     * event names.
     * @type {?}
     */
    PopoverDirective.prototype.triggers;
    /**
     * A selector specifying the element the popover should be appended to.
     * @type {?}
     */
    PopoverDirective.prototype.container;
    /**
     * Css class for popover container
     * @type {?}
     */
    PopoverDirective.prototype.containerClass;
    /** @type {?} */
    PopoverDirective.prototype.popActive;
    /** @type {?} */
    PopoverDirective.prototype.showAction;
    /** @type {?} */
    PopoverDirective.prototype.isFixed;
    /**
     * Emits an event when the popover is shown
     * @type {?}
     */
    PopoverDirective.prototype.onShown;
    /**
     * Emits an event when the popover is hidden
     * @type {?}
     */
    PopoverDirective.prototype.onHidden;
    /**
     * @type {?}
     * @private
     */
    PopoverDirective.prototype._popover;
    /**
     * @type {?}
     * @private
     */
    PopoverDirective.prototype._isInited;
    /**
     * @type {?}
     * @private
     */
    PopoverDirective.prototype.ngZone;
    /**
     * @type {?}
     * @private
     */
    PopoverDirective.prototype.containerInOutState;
    /**
     * @type {?}
     * @private
     */
    PopoverDirective.prototype.setTimeoutFlag;
    /**
     * @type {?}
     * @private
     */
    PopoverDirective.prototype.overlaySer;
    /**
     * @type {?}
     * @private
     */
    PopoverDirective.prototype._elementRef;
    /**
     * @type {?}
     * @private
     */
    PopoverDirective.prototype._renderer;
    /**
     * @type {?}
     * @private
     */
    PopoverDirective.prototype._positionService;
    /**
     * @type {?}
     * @private
     */
    PopoverDirective.prototype.inject;
}
//# sourceMappingURL=data:application/json;base64,