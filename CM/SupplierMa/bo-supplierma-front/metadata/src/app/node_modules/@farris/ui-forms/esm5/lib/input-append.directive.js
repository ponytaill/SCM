/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, ElementRef, Renderer2, Injector, Input, Output, ViewContainerRef, NgZone } from '@angular/core';
import { EventEmitter } from '@angular/core';
var InputAppendDirective = /** @class */ (function () {
    // private ngControl: NgControl;
    function InputAppendDirective(viewRef, el, render, injector) {
        this.viewRef = viewRef;
        this.el = el;
        this.render = render;
        this.injector = injector;
        this._enableAppend = true;
        // 追加到哪个类型下 TextBox、MultiTextBox、 StaticText
        this.inputAppendControlType = 'InputGroup';
        // 根据类型不一样，在控件处于禁用、只读时，决定颜色是否可用
        // 有两种：按钮 button 文本 text
        this._appendType = 'button';
        // 追加的文本
        this._inputAppendText = '';
        // 模板
        // @Input() inputAppendTmpl: TemplateRef<any>;
        this._disabled = false;
        /*
            * 文本点击事件
            */
        this.inputAppendClickEvent = new EventEmitter();
        // 标记native的外层
        this.elWrapElement = null;
        // 标记元素
        this.appendWrapElement = null;
        // 暂时不用
        this.appendTextElement = null;
        this.clickHandler = null;
        this.disabledCls = 'f-state-disabled';
        this.ngZone = null;
        this.ngZone = this.injector.get(NgZone);
    }
    Object.defineProperty(InputAppendDirective.prototype, "enableAppend", {
        get: /**
         * @return {?}
         */
        function () {
            return this._enableAppend;
        },
        // 相当于启用禁用此功能
        set: 
        // 相当于启用禁用此功能
        /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (value === '' || value) {
                this._enableAppend = true;
                // 需要
                if (!this.appendWrapElement) {
                    this.createStruct();
                }
            }
            else {
                this._enableAppend = false;
                if (this.appendWrapElement) {
                    this.resetStruct();
                }
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(InputAppendDirective.prototype, "inputAppendType", {
        get: /**
         * @return {?}
         */
        function () {
            return this._appendType;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            var _this = this;
            if (value) {
                if (['button', 'text'].findIndex((/**
                 * @param {?} item
                 * @return {?}
                 */
                function (item) { return item == value; })) < 0) {
                    // 类型在支持范围内
                    value = 'button';
                }
                if (value != this._appendType) {
                    if (this.appendWrapElement) {
                        // 移除原来，追加新的
                        this.render.removeClass(this.appendWrapElement, 'input-append-' + this._appendType);
                        this.render.addClass(this.appendWrapElement, 'input-append-' + value);
                        if (this._appendType == 'button') {
                            // 原来是按钮
                            if (this.clickHandler) {
                                this.clickHandler();
                                this.clickHandler = null;
                            }
                        }
                        else {
                            this.clickHandler = this.render.listen(this.appendWrapElement, 'click', (/**
                             * @param {?} ev
                             * @return {?}
                             */
                            function (ev) {
                                _this.inputAppendClickEvent.emit(ev);
                            }));
                        }
                    }
                    this._appendType = value;
                }
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(InputAppendDirective.prototype, "inputAppendText", {
        get: /**
         * @return {?}
         */
        function () {
            return this._inputAppendText;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (value != this._inputAppendText) {
                this._inputAppendText = value;
                if (this.appendWrapElement && this._enableAppend) {
                    this.render.removeChild(this.appendWrapElement, this.appendTextElement);
                    this.appendTextElement.innerHTML = value;
                    this.render.appendChild(this.appendWrapElement, this.appendTextElement);
                }
                else {
                    this.createStruct();
                }
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(InputAppendDirective.prototype, "inputAppendDisabled", {
        get: /**
         * @return {?}
         */
        function () {
            return this._disabled;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (value != this._disabled) {
                this._disabled = value;
                if (this.appendWrapElement) {
                    value && this.render.addClass(this.appendWrapElement, this.disabledCls);
                    !value && this.render.removeClass(this.appendWrapElement, this.disabledCls);
                }
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    InputAppendDirective.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        //this.ngControl = this.injector.get(NgControl, null);
    };
    /**
     * @return {?}
     */
    InputAppendDirective.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        this.createStruct();
    };
    /**
     * @return {?}
     */
    InputAppendDirective.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        //this.resetStruct();
        if (this.clickHandler) {
            this.clickHandler();
            this.clickHandler = null;
        }
        if (this.appendWrapElement) {
            this.appendWrapElement.remove();
            this.appendWrapElement = null;
        }
        if (this.elWrapElement) {
            this.elWrapElement.remove();
            this.elWrapElement = null;
        }
    };
    /**
     * 重置
     */
    /**
     * 重置
     * @private
     * @return {?}
     */
    InputAppendDirective.prototype.resetStruct = /**
     * 重置
     * @private
     * @return {?}
     */
    function () {
        if (this.clickHandler) {
            this.clickHandler();
            this.clickHandler = null;
        }
        // 分类型移除不同新增加的结构或样式
        switch (this.inputAppendControlType) {
            case 'StaticText':
                this.render.removeClass(this.el.nativeElement, 'f-cmp-static-text-input-append');
                break;
            case 'TextBox':
            case 'MultiTextBox':
                if (this.elWrapElement) {
                    /** @type {?} */
                    var wrapParent = this.render.parentNode(this.elWrapElement);
                    this.render.appendChild(wrapParent, this.el.nativeElement);
                    this.elWrapElement.remove();
                    this.elWrapElement = null;
                }
                break;
        }
        if (this.appendWrapElement) {
            this.appendWrapElement.remove();
            this.appendWrapElement = null;
        }
    };
    /**
     * 创建
     */
    /**
     * 创建
     * @private
     * @return {?}
     */
    InputAppendDirective.prototype.createStruct = /**
     * 创建
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        if (!this.inputAppendText || !this.enableAppend || this.appendWrapElement) {
            return;
        }
        /** @type {?} */
        var buttonWrap = this.render.createElement('div');
        buttonWrap.className = 'input-group-append input-append-wrapper';
        buttonWrap.className += ' input-append-' + this.inputAppendType;
        if (this._disabled) {
            buttonWrap.className += ' ' + this.disabledCls;
        }
        /** @type {?} */
        var buttonTextWrap = this.render.createElement('div');
        buttonTextWrap.className = 'input-group-text';
        buttonTextWrap.innerHTML = this.inputAppendText;
        this.appendTextElement = buttonTextWrap;
        this.appendWrapElement = buttonWrap;
        this.render.appendChild(buttonWrap, buttonTextWrap);
        switch (this.inputAppendControlType) {
            case 'StaticText':
                // 此时还没有生成内部的样式
                // let textareaEl = this.el.nativeElement.querySelector('.f-form-control-textarea');
                this.render.addClass(this.el.nativeElement, 'f-cmp-static-text-input-append' + (this._disabled ? ' ' + this.disabledCls : ''));
                this.render.appendChild(this.el.nativeElement, buttonWrap);
                break;
            case 'TextBox':
            case 'MultiTextBox':
                /** @type {?} */
                var textParent = this.render.parentNode(this.el.nativeElement);
                /** @type {?} */
                var inputWrap = this.render.createElement('div');
                inputWrap.className = 'f-cmp-text-input-append' + (this._disabled ? ' ' + this.disabledCls : '');
                if (this.el.nativeElement.outerHTML.indexOf('textarea') > -1) {
                    inputWrap.className = 'f-cmp-textarea-input-append' + (this._disabled ? ' ' + this.disabledCls : '');
                }
                this.elWrapElement = inputWrap;
                this.render.appendChild(inputWrap, this.el.nativeElement);
                this.render.appendChild(inputWrap, buttonWrap);
                this.render.appendChild(textParent, inputWrap);
                break;
            default:
                // 存在类似下拉这样的控件，内部调用input-group结构还没有初始化
                /** @type {?} */
                var inputGroupEl = this.el.nativeElement.querySelector('.input-group');
                if (inputGroupEl) {
                    this.render.appendChild(inputGroupEl, buttonWrap);
                }
                else {
                    if (this.ngZone) {
                        this.ngZone.runOutsideAngular((/**
                         * @return {?}
                         */
                        function () {
                            setTimeout((/**
                             * @return {?}
                             */
                            function () {
                                /** @type {?} */
                                var inputGroupEl2 = _this.el.nativeElement.querySelector('.input-group');
                                _this.render.appendChild(inputGroupEl2, buttonWrap);
                            }));
                        }));
                    }
                }
        }
        if (this.inputAppendType == 'button') {
            this.clickHandler = this.render.listen(this.appendWrapElement, 'click', (/**
             * @param {?} ev
             * @return {?}
             */
            function (ev) {
                _this.inputAppendClickEvent.emit(ev);
            }));
        }
    };
    InputAppendDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[input-append]',
                },] }
    ];
    /** @nocollapse */
    InputAppendDirective.ctorParameters = function () { return [
        { type: ViewContainerRef },
        { type: ElementRef },
        { type: Renderer2 },
        { type: Injector }
    ]; };
    InputAppendDirective.propDecorators = {
        enableAppend: [{ type: Input, args: ['input-append',] }],
        inputAppendControlType: [{ type: Input }],
        inputAppendType: [{ type: Input }],
        inputAppendText: [{ type: Input }],
        inputAppendDisabled: [{ type: Input }],
        inputAppendClickEvent: [{ type: Output }]
    };
    return InputAppendDirective;
}());
export { InputAppendDirective };
if (false) {
    /**
     * @type {?}
     * @private
     */
    InputAppendDirective.prototype._enableAppend;
    /** @type {?} */
    InputAppendDirective.prototype.inputAppendControlType;
    /**
     * @type {?}
     * @private
     */
    InputAppendDirective.prototype._appendType;
    /**
     * @type {?}
     * @private
     */
    InputAppendDirective.prototype._inputAppendText;
    /**
     * @type {?}
     * @private
     */
    InputAppendDirective.prototype._disabled;
    /** @type {?} */
    InputAppendDirective.prototype.inputAppendClickEvent;
    /**
     * @type {?}
     * @private
     */
    InputAppendDirective.prototype.elWrapElement;
    /**
     * @type {?}
     * @private
     */
    InputAppendDirective.prototype.appendWrapElement;
    /**
     * @type {?}
     * @private
     */
    InputAppendDirective.prototype.appendTextElement;
    /**
     * @type {?}
     * @private
     */
    InputAppendDirective.prototype.clickHandler;
    /**
     * @type {?}
     * @private
     */
    InputAppendDirective.prototype.disabledCls;
    /**
     * @type {?}
     * @private
     */
    InputAppendDirective.prototype.ngZone;
    /**
     * @type {?}
     * @private
     */
    InputAppendDirective.prototype.viewRef;
    /**
     * @type {?}
     * @private
     */
    InputAppendDirective.prototype.el;
    /**
     * @type {?}
     * @private
     */
    InputAppendDirective.prototype.render;
    /**
     * @type {?}
     * @private
     */
    InputAppendDirective.prototype.injector;
}
//# sourceMappingURL=data:application/json;base64,