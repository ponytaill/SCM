/**
 * @fileoverview added by tsickle
 * Generated from: lib/controlcomponent/datepicker/datepicker.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input, Injector, EventEmitter, Output } from '@angular/core';
import { SolutionService } from '../../service/solution.service';
import { ControlType } from '../../entity/controltype';
import { ShowType } from '@farris/ui-datepicker';
import { Subject } from 'rxjs';
import { takeUntil } from 'rxjs/operators';
import { QueryConditionComponent } from '../../querycondition.component';
var DatePickerComponent = /** @class */ (function () {
    function DatePickerComponent(injector) {
        this.injector = injector;
        /**
         * 某个字段发生值变化事件时，需要同步清空的字段，可能不是当前字段
         */
        this.changeFields = [];
        this.conditionChange = new EventEmitter();
        // true显示时间 false不显示
        this.showType = ShowType.all; // 显示类型，默认显示全部1；不显示日期，用于选择年月模式2；不显示日期及月份，用于选择年模式3；用于周选择4。
        // 显示类型，默认显示全部1；不显示日期，用于选择年月模式2；不显示日期及月份，用于选择年模式3；用于周选择4。
        this.maxDate = '';
        this.minDate = '';
        this.editable = false;
        this.dateRangeDatesDelimiter = '~';
        this.solutionService = this.injector.get(SolutionService);
        /** @type {?} */
        var queryconditionComponent = this.injector.get(QueryConditionComponent, null);
        if (queryconditionComponent) {
            this.destroy$ = queryconditionComponent.destroy$;
        }
        else {
            this.destroy$ = new Subject();
        }
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    DatePickerComponent.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        var _this = this;
        if (changes['changeFields'] && changes['changeFields'].currentValue && !changes['changeFields'].firstChange) {
            /** @type {?} */
            var isChange = changes['changeFields'].currentValue.some((/**
             * @param {?} field
             * @return {?}
             */
            function (field) { return field == _this.item.fieldCode; }));
            if (isChange) {
                if (this.dateRange) {
                    this.beginValue = this.item.value && this.item.value.startTime ? this.item.value.startTime.toString().trim() : '';
                    this.endValue = this.item.value && this.item.value.endTime ? this.item.value.endTime.toString().trim() : '';
                    this.bindValue = this.item.value.getOriginalValue();
                }
                else {
                    this.bindValue = this.item.value.getOriginalValue();
                }
            }
        }
    };
    /**
     * @return {?}
     */
    DatePickerComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.testId = this.solutionService.getGuid();
        // const controlType = this.item.control.getControlType();
        switch (this.controlType) {
            case ControlType.DateRange:
                this.returnFormat = this.item.control.returnFormat ? this.item.control.returnFormat : 'yyyy-MM-dd';
                this.dateFormat = this.item.control.format ? this.item.control.format : 'yyyy-MM-dd';
                this.dateRange = true;
                break;
            case ControlType.SingleDate:
                this.returnFormat = this.item.control.returnFormat ? this.item.control.returnFormat : 'yyyy-MM-dd';
                this.dateFormat = this.item.control.format ? this.item.control.format : 'yyyy-MM-dd';
                this.dateRange = false;
                break;
            case ControlType.SingleYear:
                this.returnFormat = this.item.control.returnFormat ? this.item.control.returnFormat : 'yyyy';
                this.dateFormat = this.item.control.format ? this.item.control.format : 'yyyy';
                this.showType = ShowType.noDateAndMonth;
                this.dateRange = false;
                break;
            case ControlType.DateTimeRange:
                this.returnFormat = this.item.control.returnFormat ? this.item.control.returnFormat : 'yyyy-MM-dd HH:mm:ss';
                if (this.item.control.enableCustomFormat) {
                    // 使用自定义格式
                    this.dateFormat = this.item.control.format ? this.item.control.format : 'yyyy-MM-dd HH:mm:ss';
                }
                else {
                    // 未启用自定义格式
                    this.dateFormat = this.item.control.format ? this.item.control.format : 'yyyy-MM-dd';
                    this.dateFormat = this.dateFormat + ' HH:mm:ss';
                }
                this.showTime = true;
                this.dateRange = true;
                break;
            case ControlType.SingleMonth:
                this.returnFormat = this.item.control.returnFormat ? this.item.control.returnFormat : 'yyyy-MM';
                this.dateFormat = this.item.control.format ? this.item.control.format : 'yyyy-MM';
                this.showType = ShowType.noDate;
                this.dateRange = false;
                break;
            case ControlType.MonthRange:
                this.returnFormat = this.item.control.returnFormat ? this.item.control.returnFormat : 'yyyy-MM';
                this.dateFormat = this.item.control.format ? this.item.control.format : 'yyyy-MM';
                this.showType = ShowType.noDate;
                this.dateRange = true;
                break;
            case ControlType.SingleDateTime:
                this.returnFormat = this.item.control.returnFormat ? this.item.control.returnFormat : 'yyyy-MM-dd HH:mm:ss';
                if (this.item.control.enableCustomFormat) {
                    // 使用自定义格式
                    this.dateFormat = this.item.control.format ? this.item.control.format : 'yyyy-MM-dd HH:mm:ss';
                }
                else {
                    // 未启用自定义格式
                    this.dateFormat = this.item.control.format ? this.item.control.format : 'yyyy-MM-dd';
                    this.dateFormat = this.dateFormat + ' HH:mm:ss';
                }
                this.showTime = true;
                this.dateRange = false;
                break;
        }
        // 更新条件
        this.updateParamsByCondition();
        this.placeholder = this.item.placeHolder ? this.item.placeHolder : this.item.control.placeholder;
        if (this.dateRange) {
            this.beginValue = this.item.value && this.item.value.startTime ? this.item.value.startTime.toString().trim() : '';
            this.endValue = this.item.value && this.item.value.endTime ? this.item.value.endTime.toString().trim() : '';
            this.beginPlaceHolder = this.item.beginPlaceHolder ? this.item.beginPlaceHolder : this.placeholder;
            this.endPlaceHolder = this.item.endPlaceHolder ? this.item.endPlaceHolder : this.placeholder;
            this.bindValue = this.item.value.getOriginalValue();
        }
        else {
            this.bindValue = this.item.value.getOriginalValue();
        }
        if (this.item.control.weekSelect && this.controlType == ControlType.DateRange) {
            this.showType = ShowType.selectWeek;
        }
        // 
        this.solutionService.getControlConfigState().pipe(takeUntil(this.destroy$)).subscribe((/**
         * @param {?} simpleConditions
         * @return {?}
         */
        function (simpleConditions) {
            //简单条件
            /** @type {?} */
            var findSimpleCondition = simpleConditions.find((/**
             * @param {?} item
             * @return {?}
             */
            function (item) { return item['fieldCode'] == _this.item['fieldCode']; }));
            if (findSimpleCondition) {
                _this.updateParamsByCondition(findSimpleCondition);
            }
        }));
    };
    /**
     * @return {?}
     */
    DatePickerComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
    };
    /**
     * @private
     * @param {?=} condition
     * @return {?}
     */
    DatePickerComponent.prototype.updateParamsByCondition = /**
     * @private
     * @param {?=} condition
     * @return {?}
     */
    function (condition) {
        if (condition === void 0) { condition = null; }
        /** @type {?} */
        var conditionControl = null;
        conditionControl = condition ? condition.control : this.item.control;
        switch (this.controlType) {
            case ControlType.SingleYear:
                this.maxDate = conditionControl.hasOwnProperty('maxDate') ? conditionControl['maxDate'] : this.maxDate;
                this.minDate = conditionControl.hasOwnProperty('minDate') ? conditionControl['minDate'] : this.minDate;
                break;
        }
    };
    /**
     * @param {?} event
     * @return {?}
     */
    DatePickerComponent.prototype.onDateChange = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this.item.value.setOriginalValue({
            formatted: event.returnFormatted,
            delimiter: this.dateRangeDatesDelimiter
        });
        this.conditionChange.emit();
    };
    /**
     * @param {?} field
     * @return {?}
     */
    DatePickerComponent.prototype.getConditionItemTitle = /**
     * @param {?} field
     * @return {?}
     */
    function (field) {
        return this.solutionService.getConditionItemTitle(field);
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    DatePickerComponent.prototype.beginValueChange = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        // this.beginValue = $event;
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    DatePickerComponent.prototype.endValueChange = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        // this.endValue = $event;
    };
    DatePickerComponent.decorators = [
        { type: Component, args: [{
                    selector: 'app-solution-datepicker',
                    template: "<div class=\"farris-group-wrap\" id=\"{{item.id}}\">\r\n    <div class=\"form-group farris-form-group  common-group\"  [ngClass]=\"{'q-state-readonly':item.readonly,'datepicker-range-group':dateRange}\">\r\n        <label class=\"col-form-label\" *ngIf=\"item\" title=\"{{getConditionItemTitle(item)}}\">\r\n            <span class=\"farris-label-info text-danger\" *ngIf=\"item.control.isRequired()\">*</span>\r\n            <span class=\"farris-label-text\">{{item.fieldName}}</span>\r\n        </label>\r\n        <div class=\"farris-input-wrap\">\r\n            <farris-datepicker *ngIf=\"!dateRange\"\r\n                [(ngModel)]=\"bindValue\"\r\n                [dateRange]=\"dateRange\"\r\n                [placeholder]=\"placeholder\"\r\n                [returnFormat]=\"returnFormat\"\r\n                [dateFormat]=\"dateFormat\"\r\n                [editable]=\"editable\"\r\n                [showType]=\"showType\"\r\n                [showTime]=\"showTime\"\r\n                [readonly]=\"item.readonly\"\r\n                (valueChange)=\"onDateChange($event)\"\r\n                [maxDate]=\"maxDate\"\r\n                [minDate]=\"minDate\"\r\n                id=\"{{testId}}\"\r\n            >\r\n            </farris-datepicker>\r\n            <farris-datepicker *ngIf=\"dateRange\"\r\n                [dateRange]=\"dateRange\"\r\n                [placeholder]=\"placeholder\"      \r\n                [beginPlaceholder]=\"beginPlaceHolder\"\r\n                [endPlaceholder]=\"endPlaceHolder\"\r\n                [returnFormat]=\"returnFormat\"\r\n                [dateFormat]=\"dateFormat\"\r\n                [editable]=\"editable\"\r\n                [showType]=\"showType\"\r\n                [showTime]=\"showTime\"\r\n                [readonly]=\"item.readonly\"\r\n                [(ngModel)]=\"bindValue\"\r\n                (valueChange)=\"onDateChange($event)\"\r\n                id=\"{{testId}}\"\r\n            >\r\n            </farris-datepicker>\r\n        </div>\r\n    </div>\r\n</div>\r\n"
                }] }
    ];
    /** @nocollapse */
    DatePickerComponent.ctorParameters = function () { return [
        { type: Injector }
    ]; };
    DatePickerComponent.propDecorators = {
        item: [{ type: Input }],
        controlType: [{ type: Input }],
        changeFields: [{ type: Input }],
        conditionChange: [{ type: Output, args: ['conditionChange',] }]
    };
    return DatePickerComponent;
}());
export { DatePickerComponent };
if (false) {
    /** @type {?} */
    DatePickerComponent.prototype.item;
    /** @type {?} */
    DatePickerComponent.prototype.controlType;
    /**
     * 某个字段发生值变化事件时，需要同步清空的字段，可能不是当前字段
     * @type {?}
     */
    DatePickerComponent.prototype.changeFields;
    /** @type {?} */
    DatePickerComponent.prototype.conditionChange;
    /** @type {?} */
    DatePickerComponent.prototype.solutionService;
    /** @type {?} */
    DatePickerComponent.prototype.dateRange;
    /** @type {?} */
    DatePickerComponent.prototype.showTime;
    /** @type {?} */
    DatePickerComponent.prototype.showType;
    /** @type {?} */
    DatePickerComponent.prototype.maxDate;
    /** @type {?} */
    DatePickerComponent.prototype.minDate;
    /** @type {?} */
    DatePickerComponent.prototype.disableDates;
    /** @type {?} */
    DatePickerComponent.prototype.placeholder;
    /** @type {?} */
    DatePickerComponent.prototype.dateFormat;
    /** @type {?} */
    DatePickerComponent.prototype.returnFormat;
    /** @type {?} */
    DatePickerComponent.prototype.returnType;
    /** @type {?} */
    DatePickerComponent.prototype.disabled;
    /** @type {?} */
    DatePickerComponent.prototype.readonly;
    /** @type {?} */
    DatePickerComponent.prototype.editable;
    /** @type {?} */
    DatePickerComponent.prototype.dateRangeDatesDelimiter;
    /** @type {?} */
    DatePickerComponent.prototype.bindValue;
    /** @type {?} */
    DatePickerComponent.prototype.beginValue;
    /** @type {?} */
    DatePickerComponent.prototype.endValue;
    /** @type {?} */
    DatePickerComponent.prototype.testId;
    /** @type {?} */
    DatePickerComponent.prototype.beginPlaceHolder;
    /** @type {?} */
    DatePickerComponent.prototype.endPlaceHolder;
    /** @type {?} */
    DatePickerComponent.prototype.destroy$;
    /**
     * @type {?}
     * @private
     */
    DatePickerComponent.prototype.injector;
}
//# sourceMappingURL=data:application/json;base64,