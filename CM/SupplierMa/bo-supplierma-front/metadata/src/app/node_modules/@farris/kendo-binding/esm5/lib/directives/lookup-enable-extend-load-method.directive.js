import { Directive, Optional, Self, Input } from '@angular/core';
import { FrameContext } from '@farris/devkit';
import { LookupGridComponent } from '@farris/ui-lookup';
// tslint:disable-next-line: directive-selector
var LookupEnableExtendLoadMethodDirective = /** @class */ (function () {
    function LookupEnableExtendLoadMethodDirective(frameContext, lookup) {
        this.frameContext = frameContext;
        this.lookup = lookup;
    }
    LookupEnableExtendLoadMethodDirective.prototype.ngOnInit = function () {
        if (!this.frameContext || !this.lookup || this.enableExtendLoadMethod !== true) {
            return;
        }
        var befApiUrl = this.frameContext.repository.apiUri;
        var helpMetadataId = this.lookup.uri;
        var enableKey = helpMetadataId + "@" + befApiUrl;
        this.frameContext.setParam(enableKey, true);
    };
    LookupEnableExtendLoadMethodDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[enableExtendLoadMethod]'
                },] }
    ];
    /** @nocollapse */
    LookupEnableExtendLoadMethodDirective.ctorParameters = function () { return [
        { type: FrameContext, decorators: [{ type: Optional }] },
        { type: LookupGridComponent, decorators: [{ type: Optional }, { type: Self }] }
    ]; };
    LookupEnableExtendLoadMethodDirective.propDecorators = {
        enableExtendLoadMethod: [{ type: Input }]
    };
    return LookupEnableExtendLoadMethodDirective;
}());
export { LookupEnableExtendLoadMethodDirective };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9va3VwLWVuYWJsZS1leHRlbmQtbG9hZC1tZXRob2QuZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGZhcnJpcy9rZW5kby1iaW5kaW5nLyIsInNvdXJjZXMiOlsibGliL2RpcmVjdGl2ZXMvbG9va3VwLWVuYWJsZS1leHRlbmQtbG9hZC1tZXRob2QuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBRSxTQUFTLEVBQVUsUUFBUSxFQUFFLElBQUksRUFBRSxLQUFLLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDekUsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQzlDLE9BQU8sRUFBRSxtQkFBbUIsRUFBRSxNQUFNLG1CQUFtQixDQUFDO0FBRXhELCtDQUErQztBQUMvQztJQVFJLCtDQUNxQixZQUEwQixFQUNqQixNQUEyQjtRQURwQyxpQkFBWSxHQUFaLFlBQVksQ0FBYztRQUNqQixXQUFNLEdBQU4sTUFBTSxDQUFxQjtJQUNyRCxDQUFDO0lBRUwsd0RBQVEsR0FBUjtRQUNJLElBQUksQ0FBQyxJQUFJLENBQUMsWUFBWSxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sSUFBSSxJQUFJLENBQUMsc0JBQXNCLEtBQUssSUFBSSxFQUFFO1lBQzVFLE9BQU87U0FDVjtRQUNELElBQU0sU0FBUyxHQUFHLElBQUksQ0FBQyxZQUFZLENBQUMsVUFBVSxDQUFDLE1BQU0sQ0FBQztRQUN0RCxJQUFNLGNBQWMsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQztRQUN2QyxJQUFNLFNBQVMsR0FBTSxjQUFjLFNBQUksU0FBVyxDQUFDO1FBQ25ELElBQUksQ0FBQyxZQUFZLENBQUMsUUFBUSxDQUFDLFNBQVMsRUFBRSxJQUFJLENBQUMsQ0FBQztJQUNoRCxDQUFDOztnQkFyQkosU0FBUyxTQUFDO29CQUNQLFFBQVEsRUFBRSwwQkFBMEI7aUJBQ3ZDOzs7O2dCQU5RLFlBQVksdUJBYWQsUUFBUTtnQkFaTixtQkFBbUIsdUJBYXJCLFFBQVEsWUFBSSxJQUFJOzs7eUNBTGxCLEtBQUs7O0lBaUJWLDRDQUFDO0NBQUEsQUF0QkQsSUFzQkM7U0FuQlkscUNBQXFDIiwic291cmNlc0NvbnRlbnQiOlsiXHJcbmltcG9ydCB7IERpcmVjdGl2ZSwgT25Jbml0LCBPcHRpb25hbCwgU2VsZiwgSW5wdXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgRnJhbWVDb250ZXh0IH0gZnJvbSAnQGZhcnJpcy9kZXZraXQnO1xyXG5pbXBvcnQgeyBMb29rdXBHcmlkQ29tcG9uZW50IH0gZnJvbSAnQGZhcnJpcy91aS1sb29rdXAnO1xyXG5cclxuLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOiBkaXJlY3RpdmUtc2VsZWN0b3JcclxuQERpcmVjdGl2ZSh7XHJcbiAgICBzZWxlY3RvcjogJ1tlbmFibGVFeHRlbmRMb2FkTWV0aG9kXSdcclxufSlcclxuZXhwb3J0IGNsYXNzIExvb2t1cEVuYWJsZUV4dGVuZExvYWRNZXRob2REaXJlY3RpdmUgaW1wbGVtZW50cyBPbkluaXQge1xyXG5cclxuICAgIEBJbnB1dCgpXHJcbiAgICBwdWJsaWMgZW5hYmxlRXh0ZW5kTG9hZE1ldGhvZDogYW55O1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKFxyXG4gICAgICBAT3B0aW9uYWwoKXByaXZhdGUgZnJhbWVDb250ZXh0OiBGcmFtZUNvbnRleHQsXHJcbiAgICAgIEBPcHRpb25hbCgpIEBTZWxmKCkgcHJpdmF0ZSBsb29rdXA6IExvb2t1cEdyaWRDb21wb25lbnRcclxuICAgICkgeyB9XHJcblxyXG4gICAgbmdPbkluaXQoKSB7XHJcbiAgICAgICAgaWYgKCF0aGlzLmZyYW1lQ29udGV4dCB8fCAhdGhpcy5sb29rdXAgfHwgdGhpcy5lbmFibGVFeHRlbmRMb2FkTWV0aG9kICE9PSB0cnVlKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3QgYmVmQXBpVXJsID0gdGhpcy5mcmFtZUNvbnRleHQucmVwb3NpdG9yeS5hcGlVcmk7XHJcbiAgICAgICAgY29uc3QgaGVscE1ldGFkYXRhSWQgPSB0aGlzLmxvb2t1cC51cmk7XHJcbiAgICAgICAgY29uc3QgZW5hYmxlS2V5ID0gYCR7aGVscE1ldGFkYXRhSWR9QCR7YmVmQXBpVXJsfWA7XHJcbiAgICAgICAgdGhpcy5mcmFtZUNvbnRleHQuc2V0UGFyYW0oZW5hYmxlS2V5LCB0cnVlKTtcclxuICAgIH1cclxufVxyXG4iXX0=