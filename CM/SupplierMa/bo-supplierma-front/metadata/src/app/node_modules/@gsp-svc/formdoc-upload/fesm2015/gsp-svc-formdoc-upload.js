import { FarrisDialogModule } from '@farris/ui-dialog';
import { CommonModule } from '@angular/common';
import { of } from 'rxjs/observable/of';
import { catchError, tap, map } from 'rxjs/operators';
import { UUID } from 'angular2-uuid';
import { DomSanitizer } from '@angular/platform-browser';
import { ButtonsModule } from '@progress/kendo-angular-buttons';
import { MessagerService, MessagerModule } from '@farris/ui-messager';
import { LoadingService, LoadingModule } from '@farris/ui-loading';
import { ProgressModule } from '@farris/ui-progress';
import { FormsModule } from '@angular/forms';
import { ComboListModule } from '@farris/ui-combo-list';
import { HttpService } from '@ecp-caf/caf-common';
import { Injectable, Component, NgModule, Injector, ComponentFactoryResolver, ViewChild, Input, defineInjectable } from '@angular/core';
import { BsModalService } from '@farris/ui-modal';
import { of as of$1 } from 'rxjs';
import { HttpClientModule } from '@angular/common/http';
import { NotifyModule } from '@farris/ui-notify';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class FormdocUploadService {
    constructor() { }
}
FormdocUploadService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */
FormdocUploadService.ctorParameters = () => [];
/** @nocollapse */ FormdocUploadService.ngInjectableDef = defineInjectable({ factory: function FormdocUploadService_Factory() { return new FormdocUploadService(); }, token: FormdocUploadService, providedIn: "root" });

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class FormdocUploadComponent {
    constructor() { }
    /**
     * @return {?}
     */
    ngOnInit() {
    }
}
FormdocUploadComponent.decorators = [
    { type: Component, args: [{
                selector: 'lib-formdoc-upload',
                template: `
    <p>
      formdoc-upload works!
    </p>
  `
            }] }
];
/** @nocollapse */
FormdocUploadComponent.ctorParameters = () => [];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class FormdocUploadModule {
}
FormdocUploadModule.decorators = [
    { type: NgModule, args: [{
                declarations: [FormdocUploadComponent],
                imports: [],
                exports: [FormdocUploadComponent]
            },] }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @enum {number} */
const DocType = {
    Word: 0,
    Excel: 1,
    Powerpoint: 2,
    Pdf: 3,
    Txt: 4,
    Image: 5,
    Other: 6,
};
DocType[DocType.Word] = 'Word';
DocType[DocType.Excel] = 'Excel';
DocType[DocType.Powerpoint] = 'Powerpoint';
DocType[DocType.Pdf] = 'Pdf';
DocType[DocType.Txt] = 'Txt';
DocType[DocType.Image] = 'Image';
DocType[DocType.Other] = 'Other';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class GspFormDocInfo {
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @enum {number} */
const OperatingModes = {
    Formal: 0,
    Temp: 1,
};
OperatingModes[OperatingModes.Formal] = 'Formal';
OperatingModes[OperatingModes.Temp] = 'Temp';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class GspFormRemoveListEntity {
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class GspFormDocOperateEntity {
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class ChangeInstanceRequest {
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class UploadService {
    /**
     * @param {?} http
     */
    constructor(http) {
        this.http = http;
    }
    /**
     * @param {?} docListInfo
     * @param {?} rootId
     * @return {?}
     */
    uploadList(docListInfo, rootId) {
        /** @type {?} */
        let url;
        docListInfo.rootId = rootId;
        url = "/api/runtime/dfs/v1.0/formdoc/list";
        //url = "/api/runtime/dfs/v1.0/formdoc/list";
        return this.http.post(url, docListInfo).pipe(tap((/**
         * @param {?} res
         * @return {?}
         */
        res => { })), catchError((/**
         * @param {?} error
         * @return {?}
         */
        (error) => {
            return of(error);
        })));
    }
    /**
     * @param {?} metadataIdList
     * @param {?} rootId
     * @return {?}
     */
    commit(metadataIdList, rootId) {
        /** @type {?} */
        let url;
        /** @type {?} */
        let entity = new GspFormDocOperateEntity;
        entity.metadataIdList = metadataIdList;
        entity.rootId = rootId;
        url = "/api/runtime/dfs/v1.0/formdoc/commit";
        //url = "http://localhost:5000/api/runtime/dfs/v1.0/formdoc/commit";
        return this.http.post(url, entity).pipe();
    }
    /**
     * @param {?} metadataIdList
     * @param {?} rootId
     * @return {?}
     */
    cancel(metadataIdList, rootId) {
        /** @type {?} */
        let url;
        /** @type {?} */
        let entity = new GspFormDocOperateEntity;
        entity.metadataIdList = metadataIdList;
        entity.rootId = rootId;
        url = "/api/runtime/dfs/v1.0/formdoc/cancel";
        //url = "http://localhost:5000/api/runtime/dfs/v1.0/formdoc/cancel";
        //localStorage.setItem("SessionId","huoliang");
        return this.http.put(url, entity).pipe();
    }
    /**
     * @param {?} idList
     * @param {?} rootId
     * @return {?}
     */
    removeList(idList, rootId) {
        /** @type {?} */
        let url;
        //url = "http://localhost:5000/api/runtime/dfs/v1.0/formdoc/list";
        url = "/api/runtime/dfs/v1.0/formdoc/list";
        /** @type {?} */
        var idListInfo = new GspFormRemoveListEntity;
        idListInfo.metadataIdList = idList;
        idListInfo.mode = OperatingModes.Temp;
        idListInfo.rootId = rootId;
        return this.http.delete(url, idListInfo).pipe();
    }
    /**
     * @param {?} metadataId
     * @param {?} rootId
     * @return {?}
     */
    getFile(metadataId, rootId) {
        /** @type {?} */
        let url;
        if (rootId == "")
            url = "/api/runtime/dfs/v1.0/formdoc/file/" + metadataId;
        else
            url = "/api/runtime/dfs/v1.0/formdoc/file/" + metadataId + "/" + rootId;
        return this.http.get(url).pipe(tap((/**
         * @param {?} res
         * @return {?}
         */
        res => { })), catchError((/**
         * @param {?} error
         * @return {?}
         */
        (error) => {
            return of(error);
        })));
    }
    /**
     * @param {?} docInfo
     * @return {?}
     */
    uploadFile(docInfo) {
        /** @type {?} */
        let url = "/api/runtime/dfs/v1.0/formdoc";
        //url = "/api/runtime/dfs/v1.0/formdoc/list";
        return this.http.post(url, docInfo).pipe(tap((/**
         * @param {?} res
         * @return {?}
         */
        res => { })), catchError((/**
         * @param {?} error
         * @return {?}
         */
        (error) => {
            return of(error);
        })));
    }
    /**
     * @return {?}
     */
    getStorageExtensionInfo() {
        /** @type {?} */
        let url = "/api/runtime/dfs/v1.0/storagestrategy/extension";
        //url = "/api/runtime/dfs/v1.0/formdoc/list";
        return this.http.get(url).pipe(tap((/**
         * @param {?} res
         * @return {?}
         */
        res => { })), catchError((/**
         * @param {?} error
         * @return {?}
         */
        (error) => {
            return of(error);
        })));
    }
    /**
     * @param {?} storageInfoList
     * @param {?} rootId
     * @return {?}
     */
    changeStorageInstance(storageInfoList, rootId) {
        /** @type {?} */
        let url = "/api/runtime/dfs/v1.0/formdoc/changeinstance";
        /** @type {?} */
        let request = new ChangeInstanceRequest;
        request.fileInfoList = storageInfoList;
        request.rootId = rootId;
        return this.http.post(url, request).pipe(tap((/**
         * @param {?} res
         * @return {?}
         */
        res => { })), catchError((/**
         * @param {?} error
         * @return {?}
         */
        (error) => {
            return of(error);
        })));
    }
    /**
     * @param {?} formId
     * @param {?} rootId
     * @return {?}
     */
    getUploadedFileInfoList(formId, rootId) {
        /** @type {?} */
        let url = "/api/runtime/dfs/v1.0/formdoc/uploadedfile/infolist" + "?formid=" + formId + "&rootid=" + rootId;
        //url = "/api/runtime/dfs/v1.0/formdoc/list";
        return this.http.get(url).pipe(tap((/**
         * @param {?} res
         * @return {?}
         */
        res => { })), catchError((/**
         * @param {?} error
         * @return {?}
         */
        (error) => {
            return of(error);
        })));
    }
    /**
     * @param {?} rootId
     * @return {?}
     */
    getRootSetting(rootId) {
        /** @type {?} */
        let url = "/api/runtime/dfs/v1.0/rootsetting/" + rootId;
        return this.http.get(url).pipe(tap((/**
         * @param {?} res
         * @return {?}
         */
        res => { })), catchError((/**
         * @param {?} error
         * @return {?}
         */
        (error) => {
            return of(error);
        })));
    }
}
UploadService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
UploadService.ctorParameters = () => [
    { type: HttpService }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class UploadFileInfo {
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class GspFormUploadEntity {
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class ExStorageFileInfo {
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class FileUploadComponent {
    /**
     * @param {?} msgService
     * @param {?} uploadService
     * @param {?} loadService
     * @param {?=} injector
     */
    constructor(msgService, uploadService, loadService, injector) {
        this.msgService = msgService;
        this.uploadService = uploadService;
        this.loadService = loadService;
        this.injector = injector;
        this.files = [];
        this.metadataIdList = [];
        this.uploadFileInfoList = [];
        this.errFileList = [];
        this.errTypeList = [];
        this.nullFileList = [];
        this.showType = 0;
        this.mouseOn = false;
        this.bufferSize = 1024 * 1024;
        this.selectedFileCount = 0;
        this.uploadIconAddress = '/platform/runtime/dfs/images/upload.svg';
        this.uploadLittleIconAddress = '/platform/runtime/dfs/images/uploadIcon.svg';
        this.hasSelectedFile = false;
        this.fileAllSelected = false;
        this.uploadProcess = { width: '0%' };
        this.fileTotalChunk = {};
        //fileUploadState: { [key: string]: boolean } = {};
        //flag: number = 0;
        this.requestArray = new Array;
        this.requestBodyArray = new Array;
        this.uploadedChunk = {};
        this.uploadedProcess = {};
        this.defaultPropertyName = "";
        this.propertiesNames = [];
        this.queueListStyle = { width: '480px' };
        this.dropListValue = "";
        this.uploadedFileTotal = 0;
        this.haveExtensionProperty = false;
        this.uploadedFileInfoList = [];
        this.oldUploadedFileList = [];
        //uploadedNameList = [];
        this.sameNameAllowed = true;
        this.fileType = "*";
        this.fileCount = 0;
        this.oldIdList = [];
        this.exStorageFileList = [];
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        //if (this.storageService != null) {
        this.uploadService.getStorageExtensionInfo().subscribe((/**
         * @param {?} res
         * @return {?}
         */
        res => {
            if (res != null && res.error == null) {
                this.storageExtension = res;
                this.defaultPropertyName = this.storageExtension.defaultPropertyName;
                this.propertiesNames.push({ id: "0", name: this.storageExtension.defaultPropertyName });
                /** @type {?} */
                let i = 0;
                // this.propertiesNames.push(...(this.storageExtension.extensionPropertyNameList));
                this.storageExtension.extensionPropertyNameList.forEach((/**
                 * @param {?} element
                 * @return {?}
                 */
                element => {
                    this.propertiesNames.push({ id: (++i).toString(), name: element });
                }));
                this.queueListStyle.width = '380px';
                this.haveExtensionProperty = true;
            }
        }));
        this.uploadService.getRootSetting(this.rootId).subscribe((/**
         * @param {?} res
         * @return {?}
         */
        res => {
            if (res != null && res.error == null) {
                this.sameNameAllowed = res.sameNameAllowed;
                if (!this.sameNameAllowed) {
                    this.uploadService.getUploadedFileInfoList(this.formId, this.rootId).subscribe((/**
                     * @param {?} res
                     * @return {?}
                     */
                    res => {
                        if (res != null && res.error == null) {
                            this.uploadedFileInfoList = res;
                            this.oldUploadedFileList = JSON.parse(JSON.stringify(res));
                        }
                    }));
                }
            }
        }));
        if (this.oldIdList != null && this.oldIdList.length > 0) {
            this.uploadService.removeList(this.oldIdList, this.rootId).subscribe();
        }
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    fileSelected($event) {
        this.hasSelectedFile = true;
        this.selectedFiles = document.querySelector('#file');
        if (this.fileCount > 0) {
            if (this.selectedFiles.files.length + this.files.length > this.fileCount) {
                /** @type {?} */
                let selectedNum = ((/** @type {?} */ (this.selectedFiles.files.length))) + this.files.length;
                this.msgService.warning('已选择' + selectedNum + '个文件，超过系统设置的数量限制' + this.fileCount + '个，请重新选择上传文件。');
                return;
            }
        }
        //this.flag = 0;
        for (let i = 0; i < this.selectedFiles.files.length; i++) {
            /** @type {?} */
            let selectedFile = this.selectedFiles.files[i];
            //selectedFile.slice
            /** @type {?} */
            let uuid = UUID.UUID();
            if (!this.sameNameAllowed) {
                if (this.uploadedFileInfoList.find((/**
                 * @param {?} x
                 * @return {?}
                 */
                x => x.fileName == selectedFile.name)) != null) {
                    // this.uploadedNameList.push(selectedFile.name);
                    // this.msgService.question('之前已上传过同名文件: ' + selectedFile.name + '，需要替换么？', () => {
                    //   uuid = this.uploadedFileInfoList.find(x => x.fileName == selectedFile.name).metadataId;
                    //   this.uploadFile(uuid, selectedFile);
                    // })
                    /** @type {?} */
                    const msg = this.msgService.show('warning', '已上传过同名文件: ' + selectedFile.name, {
                        initialState: {
                            buttons: [
                                {
                                    text: '重命名',
                                    cls: 'btn btn-secondary',
                                    handle: (/**
                                     * @return {?}
                                     */
                                    () => {
                                        /** @type {?} */
                                        let oldName = selectedFile.name;
                                        /** @type {?} */
                                        let newName;
                                        /** @type {?} */
                                        let flag = true;
                                        /** @type {?} */
                                        let i = 1;
                                        while (flag) {
                                            newName = oldName.substring(0, oldName.lastIndexOf('.')) + '(' + i + ')' + oldName.substring(oldName.lastIndexOf('.'));
                                            if (this.uploadedFileInfoList.find((/**
                                             * @param {?} x
                                             * @return {?}
                                             */
                                            x => x.fileName == newName)) != null) {
                                                i++;
                                            }
                                            else
                                                flag = false;
                                        }
                                        this.uploadFile(uuid, selectedFile, newName);
                                        msg.close();
                                    })
                                },
                                {
                                    text: '替换',
                                    cls: 'btn btn-secondary',
                                    handle: (/**
                                     * @return {?}
                                     */
                                    () => {
                                        uuid = this.uploadedFileInfoList.find((/**
                                         * @param {?} x
                                         * @return {?}
                                         */
                                        x => x.fileName == selectedFile.name)).metadataId;
                                        this.uploadFile(uuid, selectedFile, selectedFile.name);
                                        this.uploadedFileTotal--;
                                        if (this.oldUploadedFileList.find((/**
                                         * @param {?} x
                                         * @return {?}
                                         */
                                        x => x.fileName == selectedFile.name))) {
                                            this.uploadedFileTotal++;
                                            this.uploadedFileInfoList.splice(this.uploadedFileInfoList.indexOf(this.uploadedFileInfoList.filter((/**
                                             * @param {?} x
                                             * @return {?}
                                             */
                                            x => x.fileName == selectedFile.name))[0]), 1);
                                        }
                                        msg.close();
                                    })
                                },
                                {
                                    text: '取消',
                                    cls: 'btn btn-secondary',
                                    handle: (/**
                                     * @return {?}
                                     */
                                    () => {
                                        msg.close();
                                    })
                                }
                            ]
                        }
                    });
                    continue;
                }
            }
            // if (this.files.find(x => x.name == selectedFile.name) != null) {
            //   this.errFileList.push(selectedFile.name);
            //   continue;
            // }
            if (selectedFile.size == 0) {
                this.nullFileList.push(selectedFile.name);
                continue;
            }
            //this.flag += Math.ceil(selectedFile.size / this.bufferSize);
            //let reader = new FileReader();
            this.uploadFile(uuid, selectedFile, selectedFile.name);
        }
        // if (this.uploadedNameList.length > 0) {
        //   let name: string = this.listToString(this.uploadedNameList);
        //   this.msgService.warning('之前已上传过同名文件: ' + name + '请重新选择上传文件。');
        //   this.uploadedNameList = [];
        // }
        if (this.errFileList.length > 0) {
            /** @type {?} */
            let name = this.listToString(this.errFileList);
            this.msgService.warning('已上传同名文件: ' + name + '请重新选择上传文件。');
            this.errFileList = [];
        }
        if (this.nullFileList.length > 0) {
            /** @type {?} */
            let name = this.listToString(this.nullFileList);
            name = name.substring(0, name.length - 1);
            this.msgService.warning('文件:  ' + name + ' 大小为0，请重新选择上传文件。');
            this.nullFileList = [];
        }
        // if (this.errTypeList.length > 0) {
        //   let type: string = this.listToString(this.errTypeList);
        //   this.msgService.warning('不支持上传类型为 ' + type + '的文件请重新选择上传文件。');
        //   this.errTypeList = [];
        // }
        this.files = this.files.slice();
        this.fileAllSelected = false;
        $event.target.value = '';
    }
    /**
     * @param {?} file
     * @return {?}
     */
    showErrorMessage(file) {
        this.msgService.error('上传附件失败。' + file.errorMessage);
    }
    /**
     * @param {?} uuid
     * @param {?} selectedFile
     * @param {?} fileName
     * @return {?}
     */
    uploadFile(uuid, selectedFile, fileName) {
        /** @type {?} */
        let fileInfo;
        // let uuid = UUID.UUID();
        //reader.readAsBinaryString(selectedFile);
        //reader.onload = (e) => {
        fileInfo = {
            id: uuid,
            name: fileName,
            type: selectedFile.type,
            source: "",
            size: this.getFileSize(selectedFile.size),
            fileSize: selectedFile.size,
            picListDisplayName: this.getPicListDisplayName(fileName),
            queueListDisplayName: this.getQueueDisplayName(fileName),
            //content: reader.result.toString(),
            hasUploaded: false,
            mouseOn: false,
            selectd: false,
            isUploading: true,
            uploadResult: false,
            uploadProcess: 0,
            errorMessage: "",
            extensionDropListId: 0,
            extensionName: ""
        };
        if (this.storageExtension != null)
            fileInfo.extensionName = this.defaultPropertyName;
        /** @type {?} */
        let chunkTotal = Math.ceil(selectedFile.size / this.bufferSize);
        /** @type {?} */
        let chunkIndex = 0;
        this.fileTotalChunk[uuid] = chunkTotal;
        /** @type {?} */
        let uploadFileInfo = new UploadFileInfo();
        uploadFileInfo.metadataId = uuid;
        uploadFileInfo.fileName = fileInfo.name;
        uploadFileInfo.fileSize = fileInfo.size;
        while (chunkIndex < chunkTotal) {
            /** @type {?} */
            let uploadInfo = new GspFormUploadEntity;
            uploadInfo.formId = this.formId;
            uploadInfo.mode = OperatingModes.Temp;
            uploadInfo.rootId = this.rootId;
            /** @type {?} */
            let docInfo = new GspFormDocInfo;
            docInfo.fileName = fileName;
            docInfo.metadataId = uuid;
            docInfo.total = chunkTotal;
            this.uploadedChunk[docInfo.metadataId] = 0;
            /** @type {?} */
            let nextSize = Math.min((chunkIndex + 1) * this.bufferSize, selectedFile.size);
            /** @type {?} */
            let fileData = selectedFile.slice(chunkIndex * this.bufferSize, nextSize);
            /** @type {?} */
            let reader = new FileReader();
            reader.readAsBinaryString(fileData);
            /** @type {?} */
            let innerIndex = chunkIndex;
            reader.onload = (/**
             * @return {?}
             */
            () => {
                docInfo.fileContent = btoa(reader.result.toString());
                docInfo.index = innerIndex;
                //chunkIndex++;
                if (this.haveExtensionProperty)
                    docInfo.exPropertyName = this.defaultPropertyName;
                //docInfo.isLast = true;
                uploadInfo.docInfo = docInfo;
                /** @type {?} */
                let info = uploadInfo;
                // this.requestArray.push(this.uploadService.uploadFile(uploadInfo));
                this.requestBodyArray.push(info);
                this.uploadService.uploadFile(info).subscribe((/**
                 * @param {?} res
                 * @return {?}
                 */
                res => {
                    if (res != null) {
                        this.files[this.files.indexOf(fileInfo)].uploadResult = false;
                        this.files[this.files.indexOf(fileInfo)].isUploading = false;
                        this.files[this.files.indexOf(fileInfo)].errorMessage = res.error.Message;
                    }
                    else {
                        this.uploadedChunk[docInfo.metadataId]++;
                        this.files[this.files.indexOf(fileInfo)].uploadProcess = Number.parseInt((this.uploadedChunk[docInfo.metadataId] / this.fileTotalChunk[docInfo.metadataId] * 100).toFixed(0));
                        if (this.uploadedChunk[docInfo.metadataId] == this.fileTotalChunk[docInfo.metadataId]) {
                            this.files[this.files.indexOf(fileInfo)].uploadResult = true;
                            this.files[this.files.indexOf(fileInfo)].isUploading = false;
                            this.uploadFileInfoList = this.uploadFileInfoList.concat(uploadFileInfo);
                            this.uploadedFileInfoList = this.uploadedFileInfoList.concat(uploadFileInfo);
                            this.uploadedFileTotal++;
                        }
                    }
                }));
            });
            //console.log(chunkIndex + 1);
            chunkIndex = chunkIndex + 1;
        }
        /** @type {?} */
        let type = selectedFile.type;
        if (type.includes("image")) {
            this.addDocInfo(selectedFile, fileInfo, DocType.Image);
        }
        else if (type.includes("word")) {
            this.addDocInfo(selectedFile, fileInfo, DocType.Word);
        }
        else if (type.includes("pdf")) {
            this.addDocInfo(selectedFile, fileInfo, DocType.Pdf);
        }
        else if (type.includes("plain")) {
            this.addDocInfo(selectedFile, fileInfo, DocType.Txt);
        }
        else if (type.includes("sheet") || type.includes("excel")) {
            this.addDocInfo(selectedFile, fileInfo, DocType.Excel);
        }
        else if (type.includes("powerpoint") || type.includes("presentation")) {
            this.addDocInfo(selectedFile, fileInfo, DocType.Powerpoint);
        }
        else {
            this.addDocInfo(selectedFile, fileInfo, DocType.Other);
            // let name: string = selectedFile.name;
            // let errType = name.substring(selectedFile.name.lastIndexOf('.'));
            // this.errTypeList.push(errType);
        }
        /** @type {?} */
        let index = -1;
        this.files.forEach((/**
         * @param {?} x
         * @return {?}
         */
        x => {
            if (x.name == fileInfo.name) {
                if (index == -1)
                    index = this.files.indexOf(x);
            }
        }));
        if (index != -1 && index != this.files.length - 1) {
            this.files.splice(index, 1);
            this.uploadFileInfoList.splice(index, 1);
            this.uploadedFileInfoList.splice(index, 1);
            this.uploadedFileTotal--;
        }
    }
    /**
     * @return {?}
     */
    selectAllFile() {
        if (!this.fileAllSelected) {
            this.files.forEach((/**
             * @param {?} element
             * @return {?}
             */
            element => {
                // let obj: any = document.getElementById(element.name);
                // obj.checked = true;
                element.selectd = true;
            }));
            this.fileAllSelected = true;
            this.selectedFileCount = this.files.length;
        }
        else {
            this.files.forEach((/**
             * @param {?} element
             * @return {?}
             */
            element => {
                // let obj: any = document.getElementById(element.name);
                // obj.checked = false;
                element.selectd = false;
            }));
            this.fileAllSelected = false;
            this.selectedFileCount = 0;
        }
    }
    /**
     * @param {?} file
     * @return {?}
     */
    checkoutSelectFile(file) {
        // let obj: any = document.getElementById(fileName);
        file.selectd = !file.selectd;
        if (file.selectd)
            this.selectedFileCount++;
        else
            this.selectedFileCount--;
        if (this.selectedFileCount == this.files.length) {
            this.fileAllSelected = true;
            //this.isFileAllSelected();
        }
        else {
            this.fileAllSelected = false;
            //this.isFileAllSelected();
        }
    }
    /**
     * @param {?} fileInfo
     * @return {?}
     */
    listDeleteFile(fileInfo) {
        if (fileInfo.selectd)
            this.selectedFileCount--;
        //console.log(fileName);
        this.files.splice(this.files.indexOf(fileInfo), 1);
        if (fileInfo.uploadResult) {
            /** @type {?} */
            let idList = [];
            idList.push(fileInfo.id);
            this.uploadService.cancel(idList, this.rootId).subscribe();
            this.uploadFileInfoList.splice(this.uploadFileInfoList.indexOf(this.uploadFileInfoList.filter((/**
             * @param {?} x
             * @return {?}
             */
            x => x.fileName == fileInfo.name))[0]), 1);
            this.uploadedFileInfoList.splice(this.uploadedFileInfoList.indexOf(this.uploadedFileInfoList.filter((/**
             * @param {?} x
             * @return {?}
             */
            x => x.fileName == fileInfo.name))[0]), 1);
            this.uploadedFileTotal--;
        }
        if (this.selectedFileCount == 0)
            this.fileAllSelected = false;
    }
    /**
     * @return {?}
     */
    listMultipleDeleteFile() {
        /** @type {?} */
        let selectedFile = [];
        this.files.forEach((/**
         * @param {?} element
         * @return {?}
         */
        element => {
            /** @type {?} */
            let obj = document.getElementById(element.name);
            if (obj.checked)
                selectedFile.push(element);
        }));
        /** @type {?} */
        let metadataList = [];
        selectedFile.forEach((/**
         * @param {?} element
         * @return {?}
         */
        element => {
            metadataList.push(element.id);
            this.files.splice(this.files.indexOf(element), 1);
            if (element.uploadResult) {
                // let idList: string[] = [];
                // idList.push(fileInfo.id);
                // this.uploadService.cancel(idList, this.rootId).subscribe();
                this.uploadFileInfoList.splice(this.uploadFileInfoList.indexOf(this.uploadFileInfoList.filter((/**
                 * @param {?} x
                 * @return {?}
                 */
                x => x.fileName == element.name))[0]), 1);
                this.uploadedFileInfoList.splice(this.uploadedFileInfoList.indexOf(this.uploadedFileInfoList.filter((/**
                 * @param {?} x
                 * @return {?}
                 */
                x => x.fileName == element.name))[0]), 1);
                this.uploadedFileTotal--;
            }
        }));
        this.uploadService.cancel(metadataList, this.rootId).subscribe();
        /** @type {?} */
        let allBox = document.getElementById("allCheckBox");
        if (allBox != null)
            allBox.checked = false;
        this.selectedFileCount = 0;
        this.fileAllSelected = false;
    }
    /**
     * @param {?} fileName
     * @return {?}
     */
    getPicListDisplayName(fileName) {
        if (fileName.length <= 10)
            return fileName;
        else {
            /** @type {?} */
            let headContent = fileName.substring(0, 2);
            /** @type {?} */
            let tailContent = fileName.substring(fileName.lastIndexOf('.') - 2);
            return headContent + "…" + tailContent;
        }
    }
    /**
     * @param {?} fileName
     * @return {?}
     */
    getQueueDisplayName(fileName) {
        return fileName;
    }
    /**
     * @param {?} selectdFile
     * @param {?} fileInfo
     * @param {?} docType
     * @return {?}
     */
    addDocInfo(selectdFile, fileInfo, docType) {
        switch (docType) {
            case DocType.Word: {
                fileInfo.source = "/platform/runtime/dfs/images/word.png";
                this.files.push(fileInfo);
                break;
            }
            case DocType.Pdf: {
                fileInfo.source = "/platform/runtime/dfs/images/pdf.png";
                this.files.push(fileInfo);
                break;
            }
            case DocType.Excel: {
                fileInfo.source = "/platform/runtime/dfs/images/excel.png";
                this.files.push(fileInfo);
                break;
            }
            case DocType.Txt: {
                fileInfo.source = "/platform/runtime/dfs/images/txt.png";
                this.files.push(fileInfo);
                break;
            }
            case DocType.Powerpoint: {
                fileInfo.source = "/platform/runtime/dfs/images/ppt.png";
                this.files.push(fileInfo);
                break;
            }
            case DocType.Other: {
                fileInfo.source = "/platform/runtime/dfs/images/file.png";
                this.files.push(fileInfo);
                break;
            }
            case DocType.Image:
                /** @type {?} */
                let reader = new FileReader();
                reader.readAsDataURL(selectdFile);
                reader.onload = (/**
                 * @param {?} _event
                 * @return {?}
                 */
                (_event) => {
                    /** @type {?} */
                    let imgUrl = reader.result;
                    if (this.injector != null) {
                        /** @type {?} */
                        let sanitizer = this.injector.get(DomSanitizer);
                        fileInfo.source = sanitizer.bypassSecurityTrustResourceUrl(imgUrl);
                    }
                    else
                        fileInfo.source = imgUrl;
                    this.files.push(fileInfo);
                });
                break;
        }
    }
    /**
     * @param {?} strList
     * @return {?}
     */
    listToString(strList) {
        /** @type {?} */
        let name = "";
        for (let i = 0; i < strList.length; i++) {
            name += strList[i] + ",";
        }
        return name;
    }
    /**
     * @param {?} $event
     * @param {?} file
     * @return {?}
     */
    typeChange($event, file) {
        file.extensionName = $event.data.name;
        /** @type {?} */
        let exStorageFileInfo = new ExStorageFileInfo;
        if (file.extensionName == this.storageExtension.defaultPropertyName) {
            if (this.exStorageFileList.filter((/**
             * @param {?} x
             * @return {?}
             */
            x => x.metadataId == file.id)).length > 0)
                this.exStorageFileList.splice(this.exStorageFileList.findIndex((/**
                 * @param {?} x
                 * @return {?}
                 */
                x => x.metadataId == file.id)), 1);
        }
        else {
            if (this.exStorageFileList.filter((/**
             * @param {?} x
             * @return {?}
             */
            x => x.metadataId == file.id)).length > 0) {
                exStorageFileInfo = this.exStorageFileList.filter((/**
                 * @param {?} x
                 * @return {?}
                 */
                x => x.metadataId == file.id))[0];
                exStorageFileInfo.exPropertyName = file.extensionName;
            }
            else {
                exStorageFileInfo.metadataId = file.id;
                exStorageFileInfo.exPropertyName = file.extensionName;
                this.exStorageFileList.push(exStorageFileInfo);
            }
        }
    }
    /**
     * @return {?}
     */
    upload() {
        if (this.uploadedFileTotal != this.files.filter((/**
         * @param {?} x
         * @return {?}
         */
        x => x.isUploading || x.uploadResult)).length) {
            // this.notifyService.success(<NotifyOptions>{
            //   msg: '保存成功！', timeout: 3000
            // });
            this.msgService.warning('等一下，文档正在上传。');
            return of$1(false);
        }
        if (this.storageExtension == null)
            return of$1(this.uploadFileInfoList);
        else {
            if (this.exStorageFileList.length == 0)
                return of$1(this.uploadFileInfoList);
            else {
                /** @type {?} */
                const loading = this.loadService.show({
                    message: '正在将文件保存到' + this.storageExtension.extensionName
                });
                return this.uploadService.changeStorageInstance(this.exStorageFileList, this.rootId).pipe(map((/**
                 * @param {?} res
                 * @return {?}
                 */
                res => {
                    if (res != null)
                        this.msgService.error('保存到' + this.storageExtension.extensionName + "失败，上传文件自动保存到" + this.storageExtension.defaultPropertyName + "存储。" + res.error.Message);
                    loading.close();
                    return this.uploadFileInfoList;
                })));
            }
        }
    }
    /**
     * @return {?}
     */
    cancel() {
        if (this.uploadFileInfoList.length == 0)
            return;
        this.uploadFileInfoList.forEach((/**
         * @param {?} element
         * @return {?}
         */
        element => {
            this.metadataIdList.push(element.metadataId);
        }));
        this.uploadService.cancel(this.metadataIdList, this.rootId).subscribe();
    }
    /**
     * @return {?}
     */
    getUploadFileInfoList() {
        return this.uploadFileInfoList;
    }
    /**
     * @param {?} file
     * @return {?}
     */
    delete(file) {
        this.files.splice(this.files.indexOf(file), 1);
        if (file.uploadResult)
            this.uploadedFileTotal--;
        if (this.exStorageFileList.filter((/**
         * @param {?} x
         * @return {?}
         */
        x => x.metadataId == file.id)).length > 0) {
            this.exStorageFileList.splice(this.exStorageFileList.findIndex((/**
             * @param {?} x
             * @return {?}
             */
            x => x.metadataId == file.id)), 1);
        }
        // var obj:any = document.querySelector('#file');
        // obj.files.remove();
        //obj.value='';
    }
    /**
     * @param {?} size
     * @return {?}
     */
    getFileSize(size) {
        if (size < 102400)
            return (size / 1024).toFixed(1) + "K";
        else if (size < 1024 * 1024)
            return (size / 1024).toFixed(0) + "K";
        else if (size < 100 * 1024 * 1024)
            return (size / 1024 / 1024).toFixed(1) + "M";
        else if (size < 1024 * 1024 * 1024)
            return (size / 1024 / 1024).toFixed(0) + "M";
        else
            return (size / 1024 / 1024 / 1024).toFixed(1) + "G";
    }
    /**
     * @return {?}
     */
    showByGroup() {
        this.showType = 0;
        // this.selectedFileCount = 0;
    }
    /**
     * @return {?}
     */
    showByList() {
        this.showType = 1;
        // this.selectedFileCount = 0;
        if (this.selectedFileCount != 0 && this.selectedFileCount == this.files.length) {
            this.fileAllSelected = true;
        }
    }
    /**
     * @param {?} file
     * @return {?}
     */
    mouseOver(file) {
        file.mouseOn = true;
    }
    /**
     * @param {?} file
     * @return {?}
     */
    mouseOut(file) {
        file.mouseOn = false;
    }
}
FileUploadComponent.decorators = [
    { type: Component, args: [{
                selector: 'app-file-upload',
                template: "<div *ngIf=\"hasSelectedFile\">\n\n    <div class=\"farris-header\" style=\"height: 50px; width: 100%\">\n        <div class=\"btn btn-secondary upload_button\">\n            <img [src]=\"uploadLittleIconAddress\">\n            <span>\u4E0A\u4F20\u6587\u4EF6 </span>\n            <input type=\"file\" (change)=\"fileSelected($event)\" id=\"file\" multiple=\"multiple\" title=\"\" [accept]=\"fileType\">\n        </div>\n\n\n        <button *ngIf=\"showType==0 && !fileAllSelected && files.length >0 \" style=\"padding-left: 20px\" class=\"btn-link btn ng-star-inserted\" (click)=\"selectAllFile()\">\u5168\u9009</button>\n        <button *ngIf=\"showType==0 && fileAllSelected  && files.length >0 \" style=\"padding-left: 20px\" class=\"btn-link btn ng-star-inserted\" (click)=\"selectAllFile()\">\u5168\u4E0D\u9009</button>\n        <button *ngIf=\"showType==0 && selectedFileCount>0\" style=\"padding-left: 20px\" class=\"btn-link btn ng-star-inserted\" (click)=\"listMultipleDeleteFile()\">\u5220\u9664</button>\n\n        <button *ngIf=\"showType==1 && selectedFileCount>0\" style=\"padding-left: 20px\" class=\"btn-link btn ng-star-inserted\" (click)=\"listMultipleDeleteFile()\">\u5220\u9664</button>\n\n        <kendo-buttongroup [selection]=\"'single'\" class=\"button_group_upload \" style=\"background-color: #ffffff; color: #388FFF;border: 1px solid #ddd;\" look=\"flat\">\n            <button kendoButton [selected]=\"true\" [toggleable]=\"true\" [imageUrl]=\"'/platform/runtime/dfs/images/piclist.png'\" (click)=\"showByGroup()\"></button>\n            <button kendoButton [toggleable]=\"true\" [imageUrl]=\"'/platform/runtime/dfs/images/queuelist.png'\" (click)=\"showByList()\"></button>\n        </kendo-buttongroup>\n\n\n    </div>\n\n    <!-- <div class=\"progress\" style=\"height: 12px;\">\n    <div class=\"progress-bar\" role=\"progressbar\" [ngStyle]=\"uploadProcess\"></div>\n  </div> -->\n\n    <div class=\"pic_list\" *ngIf=\"showType==0\">\n        <ul *ngFor=\"let file of files\">\n            <li (mouseenter)=\"mouseOver(file)\" (mouseleave)=\"mouseOut(file)\">\n                <div *ngIf=\"file.isUploading\">\n                    <farris-progress [type]=\"'circle'\" [percent]=\"file.uploadProcess\" [strokeLinecap]=\"'square'\" [status]=\"'active'\"></farris-progress>\n                </div>\n\n                <table *ngIf=\"!file.uploadResult && !file.isUploading\" style=\"margin: 0 auto; border: 1px solid #ddd; width: 135px; height: 160px;\">\n                    <tr style=\"margin: 0 auto ; height: 80px;\">\n                        <td style=\"text-align: center\"><span class=\"f-icon f-icon-error\"></span></td>\n                    </tr>\n                    <tr style=\"margin: 0 auto ; height: 30px;\">\n                        <td style=\"text-align: center\"> \u4E0A\u4F20\u5931\u8D25 </td>\n                    </tr>\n                    <tr>\n                        <td style=\"text-align: center\"><button style=\"margin: 0 auto ; height: 20px; \" class=\"btn-link btn ng-star-inserted\" (click)=\"showErrorMessage(file)\">\u8BE6\u60C5</button></td>\n                    </tr>\n                </table>\n                <div *ngIf=\"!file.isUploading && file.uploadResult\" style=\"border: 1px solid #ddd;\">\n                    <img [src]='file.source'>\n                    <div *ngIf=\"haveExtensionProperty\" style=\"width: 133px; height: 25px; background-color: white; position: absolute;bottom: 0; \">\n\n                        <div style=\"width: 100px;height: 25px;position:absolute;margin: 0 17px;\">\n                            <farris-combo-list [(ngModel)]=\"file.extensionDropListId\" [data]=\"propertiesNames\" [idField]=\"'id'\" [textField]=\"'name'\" (selectChange)=\"typeChange($event,file)\" [enableClear]=\"false\">\n                                <!-- <ng-template #itemTemp let-item>\n                                    <div class=\"combo-list\">\n                                        <span [class]=\"'combo-list-circle combo-list-'+item.state\"></span>\n                                        <span class=\"combo-list-label\">{{item.label}}</span>\n                                    </div>\n                                </ng-template> -->\n                            </farris-combo-list>\n                        </div>\n                    </div>\n                </div>\n                <table *ngIf=\"!file.isUploading\">\n                    <tr style=\"height: 20px\">\n                        <td style=\"width: 15px; vertical-align: middle; text-align: center\">\n                            <!-- <input type=\"checkbox\" [id]=\"file.name\" (click)=\"checkoutSelectFile(file.name)\">  -->\n                            <div class=\"farris-input-wrap\" style=\"height: 20px\" (click)=\"checkoutSelectFile(file)\">\n                                <div class=\"custom-control custom-checkbox\" style=\"margin: 4px 0 0;height: 20px;\">\n                                    <input class=\"custom-control-input\" type=\"checkbox\" [id]=\"file.name\" [(ngModel)]=\"file.selectd\">\n                                    <label class=\"custom-control-label\" style=\"padding: 0 0 10px 0; position: relative; top: -8px;\"></label>\n                                </div>\n                            </div>\n                        </td>\n                        <td style=\"width: 120px; vertical-align: middle; text-align: center\" [title]=\"file.name\">\n                            {{file.picListDisplayName}}</td>\n                    </tr>\n                </table>\n                <!-- <span>{{file.picListDisplayName}}</span> -->\n                <!-- <p class=\"filename\">{{file.picListDisplayName}}</p> -->\n                <button *ngIf=\"!file.isUploading && file.mouseOn\" style=\"position: absolute; top: 0; right: 0px; width: 24px; height: 24px;\" kendoButton [icon]=\"'delete'\" (click)=\"listDeleteFile(file)\"></button>\n                <!-- <button *ngIf=\"file.hasUploaded\" class=\"k-primary\" kendoButton [icon]=\"'check'\" [disabled]=\"true\"></button> -->\n            </li>\n        </ul>\n    </div>\n\n    <div class=\"queue_list\" *ngIf=\"showType==1\">\n        <table>\n            <tr style=\"height: 50px; table-layout:fixed;\">\n                <th style=\"width: 40px; vertical-align: middle; text-align: center\">\n                    <!-- <input type=\"checkbox\" id=\"allCheckBox\" (click)=\"selectAllFile()\"> -->\n                    <div class=\"farris-input-wrap\" (click)=\"selectAllFile()\">\n                        <div class=\"custom-control custom-checkbox\" style=\"margin: 4px 0 0\">\n                            <input class=\"custom-control-input\" type=\"checkbox\" id=\"allCheckBox\" [(ngModel)]=\"fileAllSelected\">\n                            <label class=\"custom-control-label\" style=\"padding: 0\"></label>\n                        </div>\n                    </div>\n                </th>\n                <th style=\"vertical-align: middle\" [ngStyle]=\"queueListStyle\">\u6587\u4EF6\u540D</th>\n                <th style=\"width: 100px; vertical-align: middle\">\u5927\u5C0F</th>\n                <th style=\"width: 170px; vertical-align: middle; text-align: center\">\u72B6\u6001</th>\n                <th *ngIf=\"haveExtensionProperty\" style=\"width: 100px; vertical-align: middle; text-align: center\">\n                    {{storageExtension.extensionName}}\n                </th>\n                <th style=\"width: 140px; vertical-align: middle; text-align: center\">\u64CD\u4F5C</th>\n            </tr>\n        </table>\n        <div style=\"height: 370px; overflow: auto;\">\n            <table>\n                <tr *ngFor=\"let file of files\" style=\"height: 40px\">\n                    <td colspan=\"5\" *ngIf=\"file.isUploading\">\n                        <!-- <div style=\"width:100%; display: table-cell; vertical-align: middle; text-align: center; \"> -->\n                        <div style=\"width: 500px;margin:0 auto\">\n                            <farris-progress [percent]=\"file.uploadProcess\" [status]=\"'active'\">\n                            </farris-progress>\n                        </div>\n\n                    </td>\n                    <td *ngIf=\"!file.isUploading\" style=\" width: 40px; vertical-align: middle; text-align: center\">\n                        <!-- <input type=\"checkbox\" [id]=\"file.name\" (click)=\"checkoutSelectFile(file.name)\"> -->\n                        <div class=\"farris-input-wrap\" (click)=\"checkoutSelectFile(file)\">\n                            <div class=\"custom-control custom-checkbox\" style=\"margin: 4px 0 0\">\n                                <input class=\"custom-control-input\" type=\"checkbox\" [id]=\"file.name\" [(ngModel)]=\"file.selectd\">\n                                <label class=\"custom-control-label\" style=\"padding: 0\"></label>\n                            </div>\n                        </div>\n                    </td>\n                    <td *ngIf=\"!file.isUploading\" style=\"vertical-align: middle\" [ngStyle]=\"queueListStyle\">\n                        {{file.queueListDisplayName}}</td>\n                    <td *ngIf=\"!file.isUploading\" style=\"width: 100px; vertical-align: middle\">{{file.size}}</td>\n                    <td *ngIf=\"!file.isUploading\" style=\"text-align: center; width: 170px; vertical-align: middle;\">\n                        <table *ngIf=\"!file.uploadResult\" style=\"margin: 0 auto\">\n                            <tr style=\"margin: 0 auto\">\n                                <td><span class=\"f-icon f-icon-error\"></span></td>\n                                <td> \u4E0A\u4F20\u5931\u8D25 </td>\n                                <td><button style=\"height: 24px\" class=\"btn-link btn ng-star-inserted\" (click)=\"showErrorMessage(file)\">\u8BE6\u60C5</button></td>\n                            </tr>\n                        </table>\n                        <!-- <span *ngIf=\"!file.uploadResult\"><span class=\"f-icon f-icon-error\"></span> \u4E0A\u4F20\u5931\u8D25 <button\n              class=\"btn-link btn ng-star-inserted\" (click)=\"showErrorMessage(file)\">\u8BE6\u60C5</button></span> -->\n                        <span *ngIf=\"file.uploadResult\"><span class=\"f-icon f-icon-success\"></span> \u4E0A\u4F20\u6210\u529F</span>\n                    </td>\n                    <td *ngIf=\"!file.isUploading&&haveExtensionProperty\" style=\"text-align: center; width: 100px; vertical-align: middle;\">\n                        <farris-combo-list [(ngModel)]=\"file.extensionDropListId\" [data]=\"propertiesNames\" [idField]=\"'id'\" [textField]=\"'name'\" (selectChange)=\"typeChange($event,file)\" [enableClear]=\"false\">\n                            <!-- <ng-template #itemTemp let-item>\n                                    <div class=\"combo-list\">\n                                        <span [class]=\"'combo-list-circle combo-list-'+item.state\"></span>\n                                        <span class=\"combo-list-label\">{{item.label}}</span>\n                                    </div>\n                                </ng-template> -->\n                        </farris-combo-list>\n                    </td>\n                    <td *ngIf=\"!file.isUploading\" style=\"text-align: center; width: 140px; vertical-align: middle;\">\n                        <!-- <button *ngIf=\"file.uploadResult\" class=\"btn-link btn ng-star-inserted\" (click)=\"retryUploadFile(file.name)\">\u91CD\u8BD5</button> -->\n                        <button class=\"btn-link btn ng-star-inserted\" style=\"margin: 0 auto\" (click)=\"listDeleteFile(file)\">\u5220\u9664</button>\n                    </td>\n\n                </tr>\n            </table>\n        </div>\n    </div>\n</div>\n\n<div *ngIf=\"!hasSelectedFile\" class='home_page'>\n    <img [src]=\"uploadIconAddress\">\n    <div>\n        <span class=\"btn btn-primary btn-lg\">\u4E0A\u4F20\u6587\u4EF6 </span>\n        <input type=\"file\" (change)=\"fileSelected($event)\" id=\"file\" multiple=\"multiple\" title=\"\" [accept]=\"fileType\">\n    </div>\n</div>",
                styles: [".home_page{text-align:center}.home_page img{position:absolute;top:180px;margin-left:-35px;width:70px;height:56px}.home_page div{position:absolute;left:50%;top:255px;margin-left:-75px;width:150px;height:32px;overflow:hidden}.home_page div span{width:150px;height:32px;position:absolute;z-index:10;left:0}.home_page div input{position:absolute;left:0;top:0;opacity:0;filter:'alpha(opacity=0)';z-index:11}.upload_button{width:110px;height:32px;overflow:hidden}.upload_button span{position:relative;right:-4px;top:4px;width:56px;height:22px;font-size:14px}.upload_button input{height:32px;width:110px;position:absolute;left:22px;top:12px;opacity:0;filter:'alpha(opacity=0)';overflow:hidden}.upload_button img{position:relative;left:-6px;top:3px;width:14px;height:14px}.button_group_upload{position:absolute;right:18px;top:12px;height:26px;width:53px}.button_group_upload button{height:26px;width:26px}.fileinput-button{position:absolute;right:60px;bottom:40px;overflow:hidden;width:24px;height:24px;border-radius:12px;transform:scale(2.5);-ms-transform:scale(2.5);-moz-transform:scale(2.5);-webkit-transform:scale(2.5);-o-transform:scale(2.5);color:#0686fd}.fileinput-button input{position:absolute;left:0;top:0;opacity:0;filter:'alpha(opacity=0)'}.pic-droplist{height:24px;color:#e0e1e2;background-color:#e0e1e2}.pic-droplist input-group{display:table-cell;width:100px;text-align:center;border:0}.pic-droplist input-group div{border:0}.pic-droplist input-group div div,.pic-droplist input-group div input{background-color:#e0e1e2}.pic_list{padding:0;height:420px;overflow-y:auto;overflow-x:hidden}.pic_list ul{padding:0;list-style:none;width:100%;margin:20px 0 0 20px}.pic_list ul li{height:180px;width:135px;margin:8px 0 8px 12px;float:left;overflow:hidden;align-items:center;position:relative}.pic_list ul li div{width:135px;height:160px;margin:auto;display:table-cell;vertical-align:middle;text-align:center;position:relative}.pic_list ul li div img{max-width:120px;max-height:118px;align-items:center;margin:auto;vertical-align:middle;text-align:center}.pic_list ul li span.filename{width:100px;text-align:center;overflow:hidden;text-overflow:ellipsis;white-space:nowrap}.queue_list{display:block;height:420px;overflow-y:auto}.file_list{list-style:none;margin:0;padding:0;overflow-x:hidden;overflow-y:auto}.file_list li{height:50px;line-height:35px;font-size:16px;position:relative}.file_list li button{float:right;top:6px;right:10px;width:20px}.file_list li p.title{padding:0 0 0 6px;margin:0 210px 0 0}.file_list li p.size{position:absolute;width:100px;top:0;right:100px}"]
            }] }
];
/** @nocollapse */
FileUploadComponent.ctorParameters = () => [
    { type: MessagerService },
    { type: UploadService },
    { type: LoadingService },
    { type: Injector }
];
FileUploadComponent.propDecorators = {
    formId: [{ type: Input }],
    rootId: [{ type: Input }],
    fileType: [{ type: Input }],
    fileCount: [{ type: Input }],
    oldIdList: [{ type: Input }],
    opCell: [{ type: ViewChild, args: ['opCell',] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class DownloadService {
    constructor() { }
    /**
     * @param {?} metadataId
     * @param {?} rootId
     * @return {?}
     */
    getDownloadUrl(metadataId, rootId) {
        return "/api/runtime/dfs/v1.0/doc/filecontent?metadataid=" + metadataId + "&rootid=" + rootId + "&token=" + this.getToken(this.mergeString(metadataId, rootId));
    }
    /**
     * @param {?} metadataIdList
     * @param {?} rootId
     * @return {?}
     */
    getMultipleDownloadUrl(metadataIdList, rootId) {
        /** @type {?} */
        let list = JSON.parse(metadataIdList);
        return "/api/runtime/dfs/v1.0/doc/multiple/download?metadataidlist=" + metadataIdList + "&rootid=" + rootId + "&token=" + this.getToken(this.mergeString(list[0], rootId));
    }
    /**
     * @param {?} metadataIdList
     * @param {?} rootId
     * @param {?} zipName
     * @return {?}
     */
    getMultipleDownloadUrlWithName(metadataIdList, rootId, zipName) {
        /** @type {?} */
        let list = JSON.parse(metadataIdList);
        if (zipName == null || zipName == "")
            zipName = 'unifile.zip';
        if (!zipName.endsWith(".zip"))
            zipName += '.zip';
        return "/api/runtime/dfs/v1.0/doc/compress/download?metadataidlist=" + metadataIdList + "&rootid=" + rootId + "&token=" + this.getToken(this.mergeString(list[0], rootId)) + "&zipName=" + zipName;
    }
    /**
     * @param {?} metadataId
     * @param {?} rootId
     * @param {?} version
     * @return {?}
     */
    getHistoryDownloadUrl(metadataId, rootId, version) {
        //let list:string[]=JSON.parse(metadataIdList);
        return "/api/runtime/dfs/v1.0/doc/historycontent?metadataid=" + metadataId + "&rootid=" + rootId + "&version=" + version + "&token=" + this.getToken(this.mergeString(metadataId, rootId));
    }
    /**
     * @private
     * @param {?} str
     * @param {?} str1
     * @return {?}
     */
    mergeString(str, str1) {
        /** @type {?} */
        let min = str.length < str1.length ? str.length : str1.length;
        /** @type {?} */
        let res = "";
        /** @type {?} */
        let i = 0;
        for (i = 0; i < min; i++) {
            res += str.substring(i, i + 1);
            res += str1.substring(i, i + 1);
        }
        res += str.length < str1.length ? str1.substring(i) : str.substring(i);
        return res;
    }
    /**
     * @private
     * @param {?} str
     * @return {?}
     */
    getToken(str) {
        /** @type {?} */
        let array = [1, 2, 3];
        if (str.length > 24)
            str = str.substring(0, 24);
        /** @type {?} */
        let length = Math.floor(str.length / 3);
        /** @type {?} */
        let str1 = str.substring(0, length);
        /** @type {?} */
        let str2 = str.substring(length, 2 * length);
        /** @type {?} */
        let str3 = str.substring(2 * length, 3 * length);
        /** @type {?} */
        let randomArray = [];
        /** @type {?} */
        var random = Math.ceil(Math.random() * 3);
        randomArray.push(array[random - 1]);
        array.splice(random - 1, 1);
        random = Math.ceil(Math.random() * 2);
        randomArray.push(array[random - 1]);
        array.splice(random - 1, 1);
        randomArray.push(array[0]);
        /** @type {?} */
        let timeStamp = Math.round(new Date().getTime() / 1000) + "";
        return timeStamp.substring(0, 5) + "times" + randomArray[0] + "" + randomArray[1] + "" + randomArray[2] + this.switchStr(str1, str2, str3, randomArray[0]) + this.switchStr(str1, str2, str3, randomArray[1]) + this.switchStr(str1, str2, str3, randomArray[2]) + "times" + timeStamp.substring(5);
    }
    /**
     * @private
     * @param {?} str1
     * @param {?} str2
     * @param {?} str3
     * @param {?} i
     * @return {?}
     */
    switchStr(str1, str2, str3, i) {
        switch (i) {
            case 1: return str1;
            case 2: return str2;
            case 3: return str3;
        }
    }
}
DownloadService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
DownloadService.ctorParameters = () => [];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class UploadModule {
}
UploadModule.decorators = [
    { type: NgModule, args: [{
                declarations: [FileUploadComponent],
                imports: [
                    CommonModule,
                    ButtonsModule,
                    NotifyModule,
                    MessagerModule.forRoot(),
                    LoadingModule.forRoot(),
                    ProgressModule,
                    FormsModule,
                    ComboListModule
                ],
                exports: [FileUploadComponent],
                entryComponents: [FileUploadComponent],
                providers: [UploadService, DownloadService]
            },] }
];
/** @type {?} */
const ɵa = UploadModule;

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class UploadDialogComponent {
    /**
     * @param {?} modalService
     */
    constructor(modalService) {
        this.modalService = modalService;
        this.metadataIdList = [];
    }
    /**
     * @return {?}
     */
    ngOnInit() {
    }
    /**
     * @return {?}
     */
    showDialog() {
        this.dlg = this.modalService.show(FileUploadComponent, {
            title: '选择文件',
            width: 800, height: 500,
            buttons: [
                {
                    text: '上传', cls: 'k-button k-button-icontext k-primary', iconCls: "k-icon k-i-check", handle: (/**
                     * @return {?}
                     */
                    () => {
                        this.fileUpload.upload();
                        this.dlg.close();
                    })
                },
                {
                    text: '关闭', cls: 'k-button k-button-icontext', iconCls: "k-icon k-i-close", handle: (/**
                     * @return {?}
                     */
                    () => {
                        this.fileUpload.cancel();
                        this.dlg.close();
                    })
                }
            ],
            showButtons: true,
        });
        this.dlg.content.formId = this.formId;
    }
}
UploadDialogComponent.decorators = [
    { type: Component, args: [{
                selector: 'app-uploaddialog',
                template: "\n",
                styles: [""]
            }] }
];
/** @nocollapse */
UploadDialogComponent.ctorParameters = () => [
    { type: BsModalService }
];
UploadDialogComponent.propDecorators = {
    formId: [{ type: Input }],
    fileUpload: [{ type: ViewChild, args: [FileUploadComponent,] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class UploadDialogService {
    /**
     * @param {?} modalService
     * @param {?} componentFactoryResolver
     * @param {?} injector
     */
    constructor(modalService, componentFactoryResolver, injector) {
        this.modalService = modalService;
        this.componentFactoryResolver = componentFactoryResolver;
        this.injector = injector;
        this.fileInfoList = [];
    }
    /**
     * @param {?} formId
     * @param {?} rootId
     * @return {?}
     */
    showDialog(formId, rootId) {
        /** @type {?} */
        let flag = 0;
        return new Promise((/**
         * @param {?} resolve
         * @return {?}
         */
        resolve => {
            /** @type {?} */
            var viewerFactory = this.componentFactoryResolver.resolveComponentFactory(FileUploadComponent);
            /** @type {?} */
            var viewerRef = viewerFactory.create(this.injector);
            viewerRef.instance.rootId = rootId;
            viewerRef.instance.formId = formId;
            this.dlg = this.modalService.show(viewerRef, {
                title: '上传文件',
                width: 950, height: 570,
                buttons: [
                    {
                        text: '保存', cls: 'k-button k-button-icontext k-primary', handle: (/**
                         * @return {?}
                         */
                        () => {
                            this.dlg.content.upload().subscribe((/**
                             * @param {?} res
                             * @return {?}
                             */
                            res => {
                                if (res) {
                                    resolve(res);
                                    flag = 1;
                                    this.dlg.close();
                                }
                            }));
                        })
                    },
                    {
                        text: '关闭', cls: 'k-button k-button-icontext', handle: (/**
                         * @return {?}
                         */
                        () => {
                            this.dlg.close();
                        })
                    }
                ],
                showButtons: true,
                showMaxButton: false,
                beforeClose: (/**
                 * @return {?}
                 */
                () => {
                    if (flag == 0)
                        this.dlg.content.cancel();
                    return of$1(true);
                })
            });
        }));
    }
    /**
     * @param {?} formId
     * @param {?} rootId
     * @param {?=} oldIdList
     * @return {?}
     */
    uploadFile(formId, rootId, oldIdList = []) {
        return this.uploadFileWithLimit(formId, rootId, null, oldIdList);
    }
    /**
     * @param {?} formId
     * @param {?} rootId
     * @param {?} limit
     * @param {?=} oldIdList
     * @return {?}
     */
    uploadFileWithLimit(formId, rootId, limit, oldIdList = []) {
        /** @type {?} */
        let flag = 0;
        return new Promise((/**
         * @param {?} resolve
         * @return {?}
         */
        resolve => {
            /** @type {?} */
            var uploadFactory = this.componentFactoryResolver.resolveComponentFactory(FileUploadComponent);
            /** @type {?} */
            var uploadRef = uploadFactory.create(this.injector);
            if (limit != null) {
                uploadRef.instance.fileCount = limit.fileCount;
                if (limit.fileType != null && limit.fileType != "")
                    uploadRef.instance.fileType = limit.fileType;
            }
            uploadRef.instance.rootId = rootId;
            uploadRef.instance.formId = formId;
            uploadRef.instance.oldIdList = oldIdList;
            this.dlg = this.modalService.show(uploadRef, {
                title: '上传文件',
                width: 950, height: 570,
                buttons: [
                    {
                        text: '保存', cls: 'k-button k-button-icontext k-primary', handle: (/**
                         * @return {?}
                         */
                        () => {
                            this.dlg.content.upload().subscribe((/**
                             * @param {?} res
                             * @return {?}
                             */
                            res => {
                                if (res) {
                                    resolve(res);
                                    flag = 1;
                                    this.dlg.close();
                                }
                            }));
                        })
                    },
                    {
                        text: '关闭', cls: 'k-button k-button-icontext', handle: (/**
                         * @return {?}
                         */
                        () => {
                            this.dlg.close();
                        })
                    }
                ],
                showButtons: true,
                showMaxButton: false,
                beforeClose: (/**
                 * @return {?}
                 */
                () => {
                    if (flag == 0)
                        this.dlg.content.cancel();
                    return of$1(true);
                })
            });
        }));
    }
}
UploadDialogService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
UploadDialogService.ctorParameters = () => [
    { type: BsModalService },
    { type: ComponentFactoryResolver },
    { type: Injector }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class UploadDialogMoudle {
}
UploadDialogMoudle.decorators = [
    { type: NgModule, args: [{
                declarations: [UploadDialogComponent],
                imports: [
                    CommonModule,
                    FarrisDialogModule,
                    MessagerModule.forRoot(),
                    UploadModule,
                    ButtonsModule,
                    NotifyModule.forRoot(),
                    HttpClientModule
                ],
                exports: [UploadDialogComponent, FileUploadComponent],
                entryComponents: [UploadDialogComponent, FileUploadComponent],
                providers: [BsModalService, HttpService, UploadDialogService, UploadService]
            },] }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class UploadLimit {
    constructor() {
        this.fileType = "*";
        this.fileCount = 0;
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class GspFormUploadListEntity {
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { FormdocUploadService, FormdocUploadComponent, FormdocUploadModule, UploadDialogMoudle, UploadDialogComponent, UploadDialogService, UploadService, DownloadService, FileUploadComponent, UploadFileInfo, UploadModule, ɵa, UploadLimit, GspFormDocOperateEntity, GspFormRemoveListEntity, GspFormUploadListEntity };

//# sourceMappingURL=gsp-svc-formdoc-upload.js.map