/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable, Injector, ComponentFactoryResolver } from '@angular/core';
import { FileUploadComponent } from './upload/file-upload/file-upload.component';
import { BsModalService } from '@farris/ui-modal';
import { of } from 'rxjs';
export class UploadDialogService {
    /**
     * @param {?} modalService
     * @param {?} componentFactoryResolver
     * @param {?} injector
     */
    constructor(modalService, componentFactoryResolver, injector) {
        this.modalService = modalService;
        this.componentFactoryResolver = componentFactoryResolver;
        this.injector = injector;
        this.fileInfoList = [];
    }
    /**
     * @param {?} formId
     * @param {?} rootId
     * @return {?}
     */
    showDialog(formId, rootId) {
        /** @type {?} */
        let flag = 0;
        return new Promise((/**
         * @param {?} resolve
         * @return {?}
         */
        resolve => {
            /** @type {?} */
            var viewerFactory = this.componentFactoryResolver.resolveComponentFactory(FileUploadComponent);
            /** @type {?} */
            var viewerRef = viewerFactory.create(this.injector);
            viewerRef.instance.rootId = rootId;
            viewerRef.instance.formId = formId;
            this.dlg = this.modalService.show(viewerRef, {
                title: '上传文件',
                width: 950, height: 570,
                buttons: [
                    {
                        text: '保存', cls: 'k-button k-button-icontext k-primary', handle: (/**
                         * @return {?}
                         */
                        () => {
                            this.dlg.content.upload().subscribe((/**
                             * @param {?} res
                             * @return {?}
                             */
                            res => {
                                if (res) {
                                    resolve(res);
                                    flag = 1;
                                    this.dlg.close();
                                }
                            }));
                        })
                    },
                    {
                        text: '关闭', cls: 'k-button k-button-icontext', handle: (/**
                         * @return {?}
                         */
                        () => {
                            this.dlg.close();
                        })
                    }
                ],
                showButtons: true,
                showMaxButton: false,
                beforeClose: (/**
                 * @return {?}
                 */
                () => {
                    if (flag == 0)
                        this.dlg.content.cancel();
                    return of(true);
                })
            });
        }));
    }
    /**
     * @param {?} formId
     * @param {?} rootId
     * @param {?=} oldIdList
     * @return {?}
     */
    uploadFile(formId, rootId, oldIdList = []) {
        return this.uploadFileWithLimit(formId, rootId, null, oldIdList);
    }
    /**
     * @param {?} formId
     * @param {?} rootId
     * @param {?} limit
     * @param {?=} oldIdList
     * @return {?}
     */
    uploadFileWithLimit(formId, rootId, limit, oldIdList = []) {
        /** @type {?} */
        let flag = 0;
        return new Promise((/**
         * @param {?} resolve
         * @return {?}
         */
        resolve => {
            /** @type {?} */
            var uploadFactory = this.componentFactoryResolver.resolveComponentFactory(FileUploadComponent);
            /** @type {?} */
            var uploadRef = uploadFactory.create(this.injector);
            if (limit != null) {
                uploadRef.instance.fileCount = limit.fileCount;
                if (limit.fileType != null && limit.fileType != "")
                    uploadRef.instance.fileType = limit.fileType;
            }
            uploadRef.instance.rootId = rootId;
            uploadRef.instance.formId = formId;
            uploadRef.instance.oldIdList = oldIdList;
            this.dlg = this.modalService.show(uploadRef, {
                title: '上传文件',
                width: 950, height: 570,
                buttons: [
                    {
                        text: '保存', cls: 'k-button k-button-icontext k-primary', handle: (/**
                         * @return {?}
                         */
                        () => {
                            this.dlg.content.upload().subscribe((/**
                             * @param {?} res
                             * @return {?}
                             */
                            res => {
                                if (res) {
                                    resolve(res);
                                    flag = 1;
                                    this.dlg.close();
                                }
                            }));
                        })
                    },
                    {
                        text: '关闭', cls: 'k-button k-button-icontext', handle: (/**
                         * @return {?}
                         */
                        () => {
                            this.dlg.close();
                        })
                    }
                ],
                showButtons: true,
                showMaxButton: false,
                beforeClose: (/**
                 * @return {?}
                 */
                () => {
                    if (flag == 0)
                        this.dlg.content.cancel();
                    return of(true);
                })
            });
        }));
    }
}
UploadDialogService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
UploadDialogService.ctorParameters = () => [
    { type: BsModalService },
    { type: ComponentFactoryResolver },
    { type: Injector }
];
if (false) {
    /** @type {?} */
    UploadDialogService.prototype.dlg;
    /** @type {?} */
    UploadDialogService.prototype.fileInfoList;
    /**
     * @type {?}
     * @private
     */
    UploadDialogService.prototype.modalService;
    /**
     * @type {?}
     * @private
     */
    UploadDialogService.prototype.componentFactoryResolver;
    /**
     * @type {?}
     * @private
     */
    UploadDialogService.prototype.injector;
}
//# sourceMappingURL=data:application/json;base64,