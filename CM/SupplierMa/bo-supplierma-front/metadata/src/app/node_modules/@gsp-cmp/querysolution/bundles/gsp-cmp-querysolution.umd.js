(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/common'), require('rxjs/Observable'), require('@farris/ui-modal'), require('rxjs'), require('@angular/platform-browser'), require('@farris/ui-common'), require('lodash-es'), require('@angular/forms'), require('@farris/ui-dialog'), require('@farris/ui-lookup'), require('@farris/ui-multi-select'), require('@farris/ui-field-group'), require('@farris/ui-input-group'), require('@farris/ui-dropdown'), require('@farris/ui-notify'), require('@farris/ui-loading'), require('@angular/common/http'), require('@farris/ui-datagrid'), require('@farris/ui-tooltip'), require('@farris/component-querycondition'), require('@farris/ui-common/date'), require('@farris/ui-common/number'), require('@farris/ui-locale'), require('@angular/core'), require('resize-observer-polyfill')) :
    typeof define === 'function' && define.amd ? define('@gsp-cmp/querysolution', ['exports', '@angular/common', 'rxjs/Observable', '@farris/ui-modal', 'rxjs', '@angular/platform-browser', '@farris/ui-common', 'lodash-es', '@angular/forms', '@farris/ui-dialog', '@farris/ui-lookup', '@farris/ui-multi-select', '@farris/ui-field-group', '@farris/ui-input-group', '@farris/ui-dropdown', '@farris/ui-notify', '@farris/ui-loading', '@angular/common/http', '@farris/ui-datagrid', '@farris/ui-tooltip', '@farris/component-querycondition', '@farris/ui-common/date', '@farris/ui-common/number', '@farris/ui-locale', '@angular/core', 'resize-observer-polyfill'], factory) :
    (factory((global['gsp-cmp'] = global['gsp-cmp'] || {}, global['gsp-cmp'].querysolution = {}),global.ng.common,global.rxjs.Observable,global.uiModal,global.rxjs,global.ng.platformBrowser,global.uiCommon,global.lodashEs,global.ng.forms,global.uiDialog,global.uiLookup,global.uiMultiSelect,global.uiFieldGroup,global.uiInputGroup,global.uiDropdown,global.uiNotify,global.uiLoading,global.ng.common.http,global.uiDatagrid,global.uiTooltip,global.componentQuerycondition,global.date,global.number,global.uiLocale,global.ng.core,global.ResizeObserver));
}(this, (function (exports,common,Observable,uiModal,rxjs,platformBrowser,uiCommon,lodashEs,forms,uiDialog,uiLookup,uiMultiSelect,uiFieldGroup,uiInputGroup,uiDropdown,uiNotify,uiLoading,http,uiDatagrid,uiTooltip,componentQuerycondition,date,number,uiLocale,core,ResizeObserver) { 'use strict';

    ResizeObserver = ResizeObserver && ResizeObserver.hasOwnProperty('default') ? ResizeObserver['default'] : ResizeObserver;

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    function __awaiter(thisArg, _arguments, P, generator) {
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try {
                step(generator.next(value));
            }
            catch (e) {
                reject(e);
            } }
            function rejected(value) { try {
                step(generator["throw"](value));
            }
            catch (e) {
                reject(e);
            } }
            function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }
    function __generator(thisArg, body) {
        var _ = { label: 0, sent: function () { if (t[0] & 1)
                throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function () { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f)
                throw new TypeError("Generator is already executing.");
            while (_)
                try {
                    if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
                        return t;
                    if (y = 0, t)
                        op = [op[0] & 2, t.value];
                    switch (op[0]) {
                        case 0:
                        case 1:
                            t = op;
                            break;
                        case 4:
                            _.label++;
                            return { value: op[1], done: false };
                        case 5:
                            _.label++;
                            y = op[1];
                            op = [0];
                            continue;
                        case 7:
                            op = _.ops.pop();
                            _.trys.pop();
                            continue;
                        default:
                            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                                _ = 0;
                                continue;
                            }
                            if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) {
                                _.label = op[1];
                                break;
                            }
                            if (op[0] === 6 && _.label < t[1]) {
                                _.label = t[1];
                                t = op;
                                break;
                            }
                            if (t && _.label < t[2]) {
                                _.label = t[2];
                                _.ops.push(op);
                                break;
                            }
                            if (t[2])
                                _.ops.pop();
                            _.trys.pop();
                            continue;
                    }
                    op = body.call(thisArg, _);
                }
                catch (e) {
                    op = [6, e];
                    y = 0;
                }
                finally {
                    f = t = 0;
                }
            if (op[0] & 5)
                throw op[1];
            return { value: op[0] ? op[1] : void 0, done: true };
        }
    }

    /**
     * @fileoverview added by tsickle
     * Generated from: lib/service/httpservice.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var HttpService = /** @class */ (function () {
        function HttpService(http$$1) {
            this.http = http$$1;
            this.histroyUrl = "/api/runtime/sys/v1.0/querysolution/previousQuery";
            this.url = '/api/runtime/sys/v1.0/querysolution';
        }
        /**
         * 新增查询方案
         * @param querySolution 查询方案实体
         */
        /**
         * 新增查询方案
         * @param {?} querySolution 查询方案实体
         * @param {?} sessionId
         * @return {?}
         */
        HttpService.prototype.create = /**
         * 新增查询方案
         * @param {?} querySolution 查询方案实体
         * @param {?} sessionId
         * @return {?}
         */
            function (querySolution, sessionId) {
                /** @type {?} */
                var headers = new http.HttpHeaders({
                    'Content-Type': 'application/json',
                    'sessionid': sessionId
                });
                /** @type {?} */
                var options = {
                    headers: headers,
                    sessionid: sessionId
                };
                /** @type {?} */
                var convertor = new componentQuerycondition.QuerySolutionVoConvertor();
                /** @type {?} */
                var body = convertor.convertJObject(querySolution);
                return this.http.post(this.url, body, options);
            };
        /**
         * 根据表单ID查询当前表单当前登录用户的查询方案列表
         * @param formId 表单ID
         */
        /**
         * 根据表单ID查询当前表单当前登录用户的查询方案列表
         * @param {?} formId 表单ID
         * @param {?} sessionId
         * @return {?}
         */
        HttpService.prototype.query = /**
         * 根据表单ID查询当前表单当前登录用户的查询方案列表
         * @param {?} formId 表单ID
         * @param {?} sessionId
         * @return {?}
         */
            function (formId, sessionId) {
                /** @type {?} */
                var headers = new http.HttpHeaders({
                    'Content-Type': 'application/json',
                    'sessionid': sessionId
                });
                /** @type {?} */
                var options = {
                    headers: headers,
                };
                /** @type {?} */
                var belongId = formId;
                // let url = `http://localhost:5100/api/dev/main/v1.0/querysolution/bybelongid/${belongId}`;
                /** @type {?} */
                var url = this.url + "/belongId/" + belongId;
                return this.http.get(url, options);
            };
        /**
         * 更新
         * @param querySolution 查询方案实体
         */
        /**
         * 更新
         * @param {?} querySolution 查询方案实体
         * @param {?} sessionId
         * @return {?}
         */
        HttpService.prototype.update = /**
         * 更新
         * @param {?} querySolution 查询方案实体
         * @param {?} sessionId
         * @return {?}
         */
            function (querySolution, sessionId) {
                /** @type {?} */
                var headers = new http.HttpHeaders({
                    'Content-Type': 'application/json',
                    'sessionid': sessionId
                });
                /** @type {?} */
                var options = {
                    headers: headers
                };
                /** @type {?} */
                var convertor = new componentQuerycondition.QuerySolutionVoConvertor();
                /** @type {?} */
                var body = convertor.convertJObject(querySolution);
                return this.http.put(this.url, body, options);
            };
        /**
         * 删除
         * @unused
         * @param idArray 删除的解决方案ID列表
         */
        // delete(idArray: Array<string>, sessionId: string) {
        //     if (!idArray || idArray.length <= 0) {
        //         return;
        //     }
        //     let headers = new HttpHeaders({
        //         'Content-Type': 'application/json',
        //         'sessionid': sessionId
        //     });
        //     const options = {
        //         headers: headers,
        //         sessionid: sessionId
        //     };
        //     let ids = '';
        //     idArray.forEach(id => {
        //         ids = ids + "#" + id;
        //     });
        //     let url = `/api/dev/main/v1.0/querysolution/${encodeURIComponent(ids)}`;
        //     return this.http.delete(url, options);
        // }
        /**
         * 批量更新
         * @param object : '{defaultId, belongId, deletedIds}'
         */
        /**
             * 删除
             * @unused
             * @param idArray 删除的解决方案ID列表
             */
        // delete(idArray: Array<string>, sessionId: string) {
        //     if (!idArray || idArray.length <= 0) {
        //         return;
        //     }
        //     let headers = new HttpHeaders({
        //         'Content-Type': 'application/json',
        //         'sessionid': sessionId
        //     });
        //     const options = {
        //         headers: headers,
        //         sessionid: sessionId
        //     };
        //     let ids = '';
        //     idArray.forEach(id => {
        //         ids = ids + "#" + id;
        //     });
        //     let url = `/api/dev/main/v1.0/querysolution/${encodeURIComponent(ids)}`;
        //     return this.http.delete(url, options);
        // }
        /**
         * 批量更新
         * @param {?} body
         * @param {?} sessionId
         * @return {?}
         */
        HttpService.prototype.batchUpdate = /**
             * 删除
             * @unused
             * @param idArray 删除的解决方案ID列表
             */
            // delete(idArray: Array<string>, sessionId: string) {
            //     if (!idArray || idArray.length <= 0) {
            //         return;
            //     }
            //     let headers = new HttpHeaders({
            //         'Content-Type': 'application/json',
            //         'sessionid': sessionId
            //     });
            //     const options = {
            //         headers: headers,
            //         sessionid: sessionId
            //     };
            //     let ids = '';
            //     idArray.forEach(id => {
            //         ids = ids + "#" + id;
            //     });
            //     let url = `/api/dev/main/v1.0/querysolution/${encodeURIComponent(ids)}`;
            //     return this.http.delete(url, options);
            // }
            /**
             * 批量更新
             * @param {?} body
             * @param {?} sessionId
             * @return {?}
             */
            function (body, sessionId) {
                /** @type {?} */
                var headers = new http.HttpHeaders({
                    'Content-Type': 'application/json',
                    'sessionid': sessionId
                });
                /** @type {?} */
                var options = {
                    headers: headers,
                    sessionid: sessionId
                };
                /** @type {?} */
                var url = this.url + "/batch";
                return this.http.put(url, body, options);
            };
        /**
         * 获取默认查询方案ID
         * @unused
         * @param formId
         */
        // getDefaultQuerySolution(formId: string, sessionId: string): Observable<any> {
        //     let headers = new HttpHeaders({
        //         'Content-Type': 'text/plain',
        //         'sessionid': sessionId
        //     });
        //     let belongId = formId;
        //     // let url = `http://localhost:5100/api/dev/main/v1.0/querysolution/defaultSolution/bybelongid/${belongId}`;
        //     let url = `/api/dev/main/v1.0/querysolution/defaultSolution/bybelongid/${belongId}`;
        //     return this.http.get(url, { headers: headers, responseType: 'text' });
        // }
        /**
            * 是否支持
            */
        /**
             * 获取默认查询方案ID
             * @unused
             * @param formId
             */
        // getDefaultQuerySolution(formId: string, sessionId: string): Observable<any> {
        //     let headers = new HttpHeaders({
        //         'Content-Type': 'text/plain',
        //         'sessionid': sessionId
        //     });
        //     let belongId = formId;
        //     // let url = `http://localhost:5100/api/dev/main/v1.0/querysolution/defaultSolution/bybelongid/${belongId}`;
        //     let url = `/api/dev/main/v1.0/querysolution/defaultSolution/bybelongid/${belongId}`;
        //     return this.http.get(url, { headers: headers, responseType: 'text' });
        // }
        /**
         * 是否支持
         * @return {?}
         */
        HttpService.prototype.supportLS = /**
             * 获取默认查询方案ID
             * @unused
             * @param formId
             */
            // getDefaultQuerySolution(formId: string, sessionId: string): Observable<any> {
            //     let headers = new HttpHeaders({
            //         'Content-Type': 'text/plain',
            //         'sessionid': sessionId
            //     });
            //     let belongId = formId;
            //     // let url = `http://localhost:5100/api/dev/main/v1.0/querysolution/defaultSolution/bybelongid/${belongId}`;
            //     let url = `/api/dev/main/v1.0/querysolution/defaultSolution/bybelongid/${belongId}`;
            //     return this.http.get(url, { headers: headers, responseType: 'text' });
            // }
            /**
             * 是否支持
             * @return {?}
             */
            function () {
                if (window.hasOwnProperty("localStorage")) {
                    return true;
                }
                return false;
            };
        /**
         * 设置保存时候，属性从小写变成大写
         * @param key
         * @param value
         */
        /**
         * 设置保存时候，属性从小写变成大写
         * @param {?} key
         * @param {?} value
         * @return {?}
         */
        HttpService.prototype.setLS = /**
         * 设置保存时候，属性从小写变成大写
         * @param {?} key
         * @param {?} value
         * @return {?}
         */
            function (key, value) {
                /** @type {?} */
                var conditionsStr = '[]';
                if (value) {
                    if (typeof value == 'string') {
                        conditionsStr = value;
                    }
                    else {
                        /** @type {?} */
                        var convertor = new componentQuerycondition.QuerySolutionVoConvertor();
                        conditionsStr = JSON.stringify(convertor.formatConvertJObject(value));
                    }
                }
                if (key && this.supportLS) {
                    localStorage.setItem(key, conditionsStr);
                }
            };
        /**
         * 获取时，属性从大写变成小写
         * @param key
         */
        /**
         * 获取时，属性从大写变成小写
         * @param {?} key
         * @return {?}
         */
        HttpService.prototype.getLS = /**
         * 获取时，属性从大写变成小写
         * @param {?} key
         * @return {?}
         */
            function (key) {
                /** @type {?} */
                var result = new Array();
                if (key && this.supportLS) {
                    /** @type {?} */
                    var v = localStorage.getItem(key);
                    if (v != undefined || v !== null) {
                        result = JSON.parse(v);
                    }
                }
                if (result.length > 0) {
                    /** @type {?} */
                    var convertor = new componentQuerycondition.QuerySolutionVoConvertor();
                    return convertor.formatFromJobject(result);
                }
                return result;
            };
        /**
         * 更新
         * @param querySolution 查询方案实体
         */
        /**
         * 更新
         * @param {?} querySolution 查询方案实体
         * @param {?} sessionId
         * @return {?}
         */
        HttpService.prototype.saveHistroy = /**
         * 更新
         * @param {?} querySolution 查询方案实体
         * @param {?} sessionId
         * @return {?}
         */
            function (querySolution, sessionId) {
                /** @type {?} */
                var headers = new http.HttpHeaders({
                    "Content-Type": "application/json",
                    sessionid: sessionId
                });
                /** @type {?} */
                var options = {
                    headers: headers
                };
                /** @type {?} */
                var convertor = new componentQuerycondition.QuerySolutionVoConvertor();
                /** @type {?} */
                var body = convertor.convertJObject(querySolution);
                return this.http.put(this.histroyUrl, body, options);
            };
        HttpService.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        HttpService.ctorParameters = function () {
            return [
                { type: http.HttpClient }
            ];
        };
        return HttpService;
    }());

    /**
     * @fileoverview added by tsickle
     * Generated from: lib/service/fieldconfig.service.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var FieldConfigService = /** @class */ (function () {
        function FieldConfigService() {
        }
        FieldConfigService.decorators = [
            { type: core.Injectable }
        ];
        return FieldConfigService;
    }());

    /**
     * @fileoverview added by tsickle
     * Generated from: lib/interface/IQuerySolutionHandler.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var QUERYSOLUTION_HANDLER_TOKEN = new core.InjectionToken('gsp-cmp/I_QUERYSOLUTION_HANDLER');

    /**
     * @fileoverview added by tsickle
     * Generated from: lib/service/solution.cache.service.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var SolutionCacheService = /** @class */ (function () {
        function SolutionCacheService() {
        }
        /**
         * @return {?}
         */
        SolutionCacheService.clearSolutionCache = /**
         * @return {?}
         */
            function () {
                SolutionCacheService.solutionListCache = {};
            };
        /**
         * @param {?} key
         * @return {?}
         */
        SolutionCacheService.removeSolutionCache = /**
         * @param {?} key
         * @return {?}
         */
            function (key) {
                delete SolutionCacheService.solutionListCache[key];
            };
        /**
         * @param {?} key
         * @param {?} value
         * @return {?}
         */
        SolutionCacheService.setSolutionCache = /**
         * @param {?} key
         * @param {?} value
         * @return {?}
         */
            function (key, value) {
                SolutionCacheService.solutionListCache[key] = value;
            };
        /**
         * @param {?} key
         * @return {?}
         */
        SolutionCacheService.getSolutionCache = /**
         * @param {?} key
         * @return {?}
         */
            function (key) {
                return SolutionCacheService.solutionListCache[key];
            };
        /**
         * @return {?}
         */
        SolutionCacheService.getSolutionAllCache = /**
         * @return {?}
         */
            function () {
                return SolutionCacheService.solutionListCache;
            };
        /**
         * @param {?} key
         * @param {?} value
         * @return {?}
         */
        SolutionCacheService.setCurrentSolution = /**
         * @param {?} key
         * @param {?} value
         * @return {?}
         */
            function (key, value) {
                SolutionCacheService.currentSolution[key] = value;
            };
        /**
         * @param {?} key
         * @return {?}
         */
        SolutionCacheService.getCurrentSolution = /**
         * @param {?} key
         * @return {?}
         */
            function (key) {
                return SolutionCacheService.currentSolution[key];
            };
        /**
         * @param {?} key
         * @return {?}
         */
        SolutionCacheService.removeCurrentSolution = /**
         * @param {?} key
         * @return {?}
         */
            function (key) {
                delete SolutionCacheService.currentSolution[key];
            };
        /**
         * @return {?}
         */
        SolutionCacheService.clearCurrentSolution = /**
         * @return {?}
         */
            function () {
                SolutionCacheService.currentSolution = {};
            };
        SolutionCacheService.solutionListChanged = new rxjs.Subject();
        SolutionCacheService.solutionListCache = {};
        SolutionCacheService.currentSolution = {};
        return SolutionCacheService;
    }());

    /**
     * @fileoverview added by tsickle
     * Generated from: lib/query-solution.component.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var QuerySolutionComponent = /** @class */ (function () {
        function QuerySolutionComponent(notify, resolver, injector, modalService, convertService, solutionService, httpService, fieldConfigService, localeService) {
            var _this = this;
            this.notify = notify;
            this.resolver = resolver;
            this.injector = injector;
            this.modalService = modalService;
            this.convertService = convertService;
            this.solutionService = solutionService;
            this.httpService = httpService;
            this.fieldConfigService = fieldConfigService;
            this.localeService = localeService;
            this._fieldConfigs = [];
            this._presetFieldConfigs = [];
            this._resetFieldConfigs = [];
            /**
             * 此值由设计器传入
             * 组件在设计时无法点击被禁用，true
             * 组件在运行时可以点击使用，false
             */
            this.isDisabled = false;
            /**
             * 查询条件列表
             */
            this.queryEmitter = new core.EventEmitter();
            /**
             * 查询方案cls
             */
            this.cls = 'query-solution';
            /**
             * 查询方案数据源
             */
            this.querySolutionVos = new Array();
            /**
             * 当前所选的方案，有可能不是方案
             */
            this.selectedSolution = new componentQuerycondition.QuerySolutionVo();
            /**
             * 是否折叠
             */
            this.isFold = false;
            /**
             * label和控件是否排成一行，默认是；false时排成上下两行
             */
            this.isControlInline = true;
            /**
             * 是否需要完整显示超过6个字符的标签，默认false
             */
            this.showCompleteLabel = false;
            /**
             * 是否启用加载后查询
             */
            this.enableInitQuery = false;
            /**
             * 选择的控件展示列表
             */
            this.selectedFieldConditions = new Array();
            //方案是否赋默认值
            this.isSetDefaultValue = false;
            //方案是否已赋默认值
            this.doneSetDefaultValue = false;
            //是否已完成自动查询，默认值为true，当enableInitQuery输入值为true时，首次执行ngOnchanges()时将其设为false
            this.doneInitQuery = true;
            /**
             * 条件概要
             */
            this.summaryConditions = [];
            /**
             * 是否启用记录历史方式
             * 上次查询——不能删除、可以另存、不存在变更
             * 方案列表只有上次查询时，上次查询、系统默认都存在
             * 方案列表多个时，有上次查询，上次查询选中
             * 方案列表没有上次查询时，但是LocalStorage有,构造一个上次查询
             *
             */
            this.enableHistory = false;
            this.historyRefer = {
                schemeKey: '',
                // 历史记录scheme
                foundSchme: null,
                // 历史方案保存
                schemeKeyLS: '',
                //LocalStorage 历史记录标记
                initCondition: false //LocalStorage是否按照执行完查询
            };
            this.newSaveAsSolutionVo = ( /**
             * @return {?}
             */function () {
                //当前选中的方案，再修改筛选条件后，其原来的筛选条件并没有变化，仅仅this.selectedFieldConditions有变化
                /** @type {?} */
                var solution = lodashEs.cloneDeep(_this.selectedSolution);
                //新增的方案要清空查询方案编号
                solution.code = '';
                //是否系统属性必须设置为False
                solution.isSystem = false;
                //解决方案所属表单
                solution.belongId = _this.formId;
                //新增方案Id需要Guid
                solution.id = _this.solutionService.getGuid();
                //新增方案isDefault需要设置为false
                solution.isDefault = false;
                //新增方案的筛选条件，是当前选中的筛选条件
                solution.queryConditions = _this.selectedFieldConditions;
                //设置类型要清空
                solution.type = "";
                solution.isChanged = false;
                return solution;
            });
            this.handleKeyDown = ( /**
             * @param {?} event
             * @return {?}
             */function (event) {
                if (event.key == 'Enter')
                    _this.query();
            });
            this._idSer = new uiCommon.IdService();
            this.solutionHandler = this.injector.get(QUERYSOLUTION_HANDLER_TOKEN, null, core.InjectFlags.Optional);
            this._self = this.injector.get(core.ElementRef);
            this.cdf = this.injector.get(core.ChangeDetectorRef);
            this.eventManager = this.injector.get(platformBrowser.EventManager);
        }
        Object.defineProperty(QuerySolutionComponent.prototype, "fieldConfigs", {
            get: /**
             * @return {?}
             */ function () {
                return this._fieldConfigs;
            },
            /**
             * 字段配置数据源，用于选择字段配置
             */
            set: /**
             * 字段配置数据源，用于选择字段配置
             * @param {?} fieldConfigJson
             * @return {?}
             */ function (fieldConfigJson) {
                this._fieldConfigs = this.solutionService.convertToQueryConditions(fieldConfigJson);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(QuerySolutionComponent.prototype, "resetFieldConfigs", {
            get: /**
             * @return {?}
             */ function () {
                return this._resetFieldConfigs;
            },
            set: /**
             * @param {?} resetFieldConfigJson
             * @return {?}
             */ function (resetFieldConfigJson) {
                var _this = this;
                if (!resetFieldConfigJson || resetFieldConfigJson.length == 0) {
                    return;
                }
                // 规范数据
                /** @type {?} */
                var formatResetConfigJson = resetFieldConfigJson.map(( /**
                 * @param {?} tConfigItem
                 * @return {?}
                 */function (tConfigItem) {
                    /** @type {?} */
                    var findItem = _this.presetFieldConfigs.find(( /**
                     * @param {?} presetItem
                     * @return {?}
                     */function (presetItem) { return presetItem['fieldCode'] == tConfigItem['labelCode']; }));
                    if (findItem) {
                        tConfigItem['control']['controltype'] = findItem.control.getControlType();
                        return tConfigItem;
                    }
                }));
                this._resetFieldConfigs = this.solutionService.convertToSimpleQueryConditions(formatResetConfigJson);
                // 更新已有配置
                this.solutionService.updateControl(this._presetFieldConfigs, this._resetFieldConfigs);
                // 更新已有的方案
                this.sysQuerySolutionVo && this.solutionService.updateControl(this.sysQuerySolutionVo.queryConditions, this._resetFieldConfigs);
                // 更新历史记录
                this.historyRefer['foundSchme'] && this.solutionService.updateControl(this.historyRefer['foundSchme'].queryConditions, this._resetFieldConfigs);
                // 更新已选
                this.selectedSolution && this.solutionService.updateControl(this.selectedSolution.queryConditions, this._resetFieldConfigs);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(QuerySolutionComponent.prototype, "presetFieldConfigs", {
            get: /**
             * @return {?}
             */ function () {
                return this._presetFieldConfigs;
            },
            /**
             * 预置查询字段
             */
            set: /**
             * 预置查询字段
             * @param {?} presetFieldConfigJson
             * @return {?}
             */ function (presetFieldConfigJson) {
                this._presetFieldConfigs = this.solutionService.convertToQueryConditions(presetFieldConfigJson);
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @return {?}
         */
        QuerySolutionComponent.prototype.ngOnDestroy = /**
         * @return {?}
         */
            function () {
                this._self.nativeElement.removeEventListener("keydown", this.handleKeyDown);
            };
        /**
         * @param {?} changes
         * @return {?}
         */
        QuerySolutionComponent.prototype.ngOnChanges = /**
         * @param {?} changes
         * @return {?}
         */
            function (changes) {
                if (changes['defaultConfigs']) {
                    this.isSetDefaultValue = true;
                    if (changes['defaultConfigs'].currentValue && !changes['defaultConfigs'].firstChange) { //设计时不会给defaultConfigs赋值
                        this.setQueryConditionValues(changes['defaultConfigs'].currentValue, this.selectedSolution);
                        this.initAutoQuery(this.selectedSolution);
                    }
                }
                if (changes['enableInitQuery'] && changes['enableInitQuery'].firstChange && changes['enableInitQuery'].currentValue) {
                    this.doneInitQuery = false;
                }
            };
        /**
         * 组件初始化
         */
        /**
         * 组件初始化
         * @return {?}
         */
        QuerySolutionComponent.prototype.ngOnInit = /**
         * 组件初始化
         * @return {?}
         */
            function () {
                //只在运行时 获取sessionId，查询已存储方案
                this.initSysQuerySolution();
                if (!this.isDisabled) {
                    this.sessionId = this.solutionHandler.getUserSessionId();
                    // 缓存历史方案
                    this.initAutoQueryByLS();
                    // 加载方案列表
                    this.loadQuerySolutions();
                    //注册键盘监听事件
                    this.listenKeyBoard();
                }
                else {
                    //设计时只加载系统预置方案
                    this.loadSysQuerySolution();
                }
            };
        /**
         * @return {?}
         */
        QuerySolutionComponent.prototype.initSysQuerySolution = /**
         * @return {?}
         */
            function () {
                if (this.presetQuerySolutionName && this.presetQuerySolutionName != '') {
                    this.sysQuerySolutionVo = new componentQuerycondition.QuerySolutionVo();
                    this.sysQuerySolutionVo.id = this.solutionService.getGuid();
                    this.sysQuerySolutionVo.code = (this.presetQuerySolutionName != this.localeService.getValue("querySolution.container.sysPresetName")) ? this.presetQuerySolutionName : this.localeService.getValue("querySolution.container.defaultName");
                    this.sysQuerySolutionVo.queryConditions = lodashEs.cloneDeep(this.presetFieldConfigs);
                    this.sysQuerySolutionVo.belongId = this.formId;
                    this.sysQuerySolutionVo.isSystem = true;
                    // this.querySolutionVos.push(this.sysQuerySolutionVo);
                }
            };
        /**
         * 加载系统预置方案
        */
        /**
         * 加载系统预置方案
         * @return {?}
         */
        QuerySolutionComponent.prototype.loadSysQuerySolution = /**
         * 加载系统预置方案
         * @return {?}
         */
            function () {
                this.querySolutionVos.push(this.sysQuerySolutionVo);
                this.selectedSolution = lodashEs.cloneDeep(this.sysQuerySolutionVo);
                this.loadQueryConditions();
            };
        /**
         * 规范方案条件
         */
        /**
         * 规范方案条件
         * @private
         * @param {?} tConvertor
         * @param {?} element
         * @param {?=} fromJobject
         * @return {?}
         */
        QuerySolutionComponent.prototype.formatQuerySolutionVO = /**
         * 规范方案条件
         * @private
         * @param {?} tConvertor
         * @param {?} element
         * @param {?=} fromJobject
         * @return {?}
         */
            function (tConvertor, element, fromJobject) {
                var _this = this;
                if (fromJobject === void 0) {
                    fromJobject = false;
                }
                /** @type {?} */
                var querysolutionVO;
                /** @type {?} */
                var sourceData;
                /** @type {?} */
                var _fieldCodeArr = [];
                /** @type {?} */
                var _tQueryConditions;
                if (fromJobject) {
                    querysolutionVO = tConvertor.initFromJobject(element);
                }
                else {
                    querysolutionVO = element;
                }
                this.fieldConfigs.forEach(( /**
                 * @param {?} _item
                 * @return {?}
                 */function (_item) { _fieldCodeArr.push(_item.fieldCode); }));
                if (querysolutionVO && querysolutionVO.queryConditions && querysolutionVO.queryConditions.length > 0) {
                    //若表单上删除了某个字段，但已保存的自定义方案中包含该字段时，在加载方案过程中将该字段剔除
                    _tQueryConditions = querysolutionVO.queryConditions.filter(( /**
                     * @param {?} element
                     * @return {?}
                     */function (element) {
                        return _fieldCodeArr.indexOf(element.fieldCode) > -1;
                    }));
                    querysolutionVO.queryConditions = _tQueryConditions;
                    //对自定义方案的国际化信息、帮助控件的帮助前及帮助后事件进行动态赋值
                    querysolutionVO.queryConditions.forEach(( /**
                     * @param {?} element
                     * @return {?}
                     */function (element) {
                        sourceData = _this.fieldConfigs.find(( /**
                         * @param {?} _item
                         * @return {?}
                         */function (_item) { return _item.fieldCode == element.fieldCode; }));
                        element.fieldName = sourceData.fieldName;
                        element.placeHolder = sourceData.placeHolder;
                        element.beginPlaceHolder = sourceData.hasOwnProperty('beginPlaceHolder') ? sourceData['beginPlaceHolder'] : '';
                        element.endPlaceHolder = sourceData.hasOwnProperty('endPlaceHolder') ? sourceData['endPlaceHolder'] : '';
                        if (sourceData.control.preEventCmd) {
                            (( /** @type {?} */(element.control))).preEventCmd = sourceData.control.preEventCmd;
                        }
                        if (sourceData.control.postEventCmd) {
                            (( /** @type {?} */(element.control))).postEventCmd = sourceData.control.postEventCmd;
                        }
                        if (sourceData.control.clear) {
                            (( /** @type {?} */(element.control))).clear = sourceData.control.clear;
                        }
                        if (sourceData.control.click) {
                            (( /** @type {?} */(element.control))).click = sourceData.control.click;
                        }
                        if (sourceData.control.enumValues && sourceData.control.enumValues.length > 0) {
                            (( /** @type {?} */(element.control))).enumValues = sourceData.control.enumValues;
                            (( /** @type {?} */(element.control))).enumValues = sourceData.control.enumValues;
                        }
                        if (sourceData.control.data && sourceData.control.data.length > 0) {
                            (( /** @type {?} */(element.control))).data = sourceData.control.data;
                        }
                    }));
                }
                return querysolutionVO;
            };
        /**
         * 加载查询方案数据
         */
        /**
         * 加载查询方案数据
         * @return {?}
         */
        QuerySolutionComponent.prototype.loadQuerySolutions = /**
         * 加载查询方案数据
         * @return {?}
         */
            function () {
                return __awaiter(this, void 0, void 0, function () {
                    var self;
                    var _this = this;
                    return __generator(this, function (_a) {
                        self = this;
                        this.httpService.query(this.formId, this.sessionId).subscribe(( /**
                         * @param {?} items
                         * @return {?}
                         */function (items) {
                            /** @type {?} */
                            var convertor = new componentQuerycondition.QuerySolutionVoConvertor();
                            /** @type {?} */
                            var querysolutionVO;
                            if (items && items.length > 0) {
                                items.forEach(( /**
                                 * @param {?} element
                                 * @return {?}
                                 */function (element) {
                                    querysolutionVO = _this.formatQuerySolutionVO(convertor, element, true);
                                    if (_this.enableHistory && querysolutionVO['type'] == 'pre') {
                                        // 如果返回列表内存在历史记录                        
                                        querysolutionVO.code = _this.localeService.getValue("querySolution.container.histroyName");
                                        _this.historyRefer['schemeKey'] = querysolutionVO.id;
                                        _this.historyRefer['foundSchme'] = lodashEs.cloneDeep(querysolutionVO);
                                        _this.historyRefer['initCondition'] = true;
                                        //  this.defaultQuerySolution = cloneDeep(querysolutionVO);
                                    }
                                    else if (querysolutionVO['type'] != 'pre') {
                                        _this.querySolutionVos.push(querysolutionVO);
                                        if (querysolutionVO.isDefault) { //如果有默认方案，则设置全局默认方案
                                            _this.defaultQuerySolution = lodashEs.cloneDeep(querysolutionVO);
                                        }
                                    }
                                }));
                                self.setSolutionCache(_this.querySolutionVos);
                            }
                            if (_this.enableHistory && !_this.historyRefer['initCondition']) {
                                //如果还没有设置条件
                                _this.formatInitQuerySolution();
                            }
                            if (_this.enableHistory && _this.historyRefer['initCondition']) {
                                _this.selectedSolution = lodashEs.cloneDeep(_this.historyRefer['foundSchme']);
                                //只有缓存记录
                                _this.querySolutionVos.splice(0, 0, _this.historyRefer['foundSchme']);
                                if (_this.querySolutionVos.length == 1) {
                                    // 只有上次查询时
                                    _this.querySolutionVos.push(_this.sysQuerySolutionVo);
                                }
                                self.setSolutionCache(_this.querySolutionVos);
                                _this.loadQueryConditions();
                                // if(this.historyRefer['schemeKey'] !== ''){
                                //     //更新一次缓存
                                //     this.changeQueryHistroy(false);
                                // }                
                            }
                            else if (_this.defaultQuerySolution || _this.querySolutionVos.length) {
                                //如果已查到有默认方案，或已有存储的方案
                                //不再加载系统配置的方案，首先加载默认方案，没有默认则加载第一个方案
                                if (_this.defaultQuerySolution && _this.defaultQuerySolution.id != '') {
                                    _this.selectedSolution = lodashEs.cloneDeep(_this.defaultQuerySolution);
                                }
                                else {
                                    _this.selectedSolution = lodashEs.cloneDeep(_this.querySolutionVos[0]);
                                }
                                _this.loadQueryConditions();
                            }
                            else {
                                //如果没有任何已存储的方案，则加载系统配置方案
                                _this.loadSysQuerySolution();
                            }
                            if (_this.isSetDefaultValue && !_this.historyRefer['initCondition']) {
                                _this.setQueryConditionValues(_this.defaultConfigs, _this.selectedSolution);
                            }
                            _this.initAutoQuery(_this.selectedSolution);
                        }));
                        return [2 /*return*/];
                    });
                });
            };
        /**
         * @param {?} querySolutionVos
         * @return {?}
         */
        QuerySolutionComponent.prototype.setSolutionCache = /**
         * @param {?} querySolutionVos
         * @return {?}
         */
            function (querySolutionVos) {
                if (!this.isDisabled && gspframeworkService && querySolutionVos && querySolutionVos.length) {
                    // 获取当前功能菜单信息, 并以功能菜单ID为缓存key
                    /** @type {?} */
                    var option = gspframeworkService.rtf.session.getCommonVariable();
                    SolutionCacheService.setSolutionCache(option.tabId, querySolutionVos);
                    SolutionCacheService.solutionListChanged.next(true);
                }
            };
        /**
         * @param {?} value
         * @return {?}
         */
        QuerySolutionComponent.prototype.setCurrentSolutionCache = /**
         * @param {?} value
         * @return {?}
         */
            function (value) {
                if (!this.isDisabled && gspframeworkService && value) {
                    // 获取当前功能菜单信息, 并以功能菜单ID为缓存key
                    /** @type {?} */
                    var option = gspframeworkService.rtf.session.getCommonVariable();
                    if (option && option.tabId) {
                        SolutionCacheService.setCurrentSolution(option.tabId, value);
                    }
                }
            };
        /**
         * @return {?}
         */
        QuerySolutionComponent.prototype.loadQueryConditions = /**
         * @return {?}
         */
            function () {
                //加载筛选条件
                this.selectedFieldConditions = new Array();
                if (this.selectedSolution && this.selectedSolution.queryConditions && this.selectedSolution.queryConditions.length > 0) {
                    // this.selectedFieldConditions = this.selectedSolution.queryConditions as Array<QueryCondition>;
                    this.selectedFieldConditions = this.selectedSolution.queryConditions;
                }
                // 如果方案的变更是在収折时
                this.whenFoldSetSummaryConditions();
                this.showSaveButton = this.selectedSolution.isSystem ? false : true;
                !this.isDisabled && this.solutionHandler.setCurrentQueryConditions(lodashEs.cloneDeep(this.selectedFieldConditions));
                this.setCurrentSolutionCache(this.selectedSolution);
            };
        /**
         * @return {?}
         */
        QuerySolutionComponent.prototype.saveAs = /**
         * @return {?}
         */
            function () {
                this.openSaveAsDialog(this.localeService.getValue("querySolution.saveAsDialog.title"));
            };
        /**
         * 获取默认标签
         * @param solution
         */
        /**
         * 获取默认标签
         * @param {?} solution
         * @return {?}
         */
        QuerySolutionComponent.prototype.getDefaultLabel = /**
         * 获取默认标签
         * @param {?} solution
         * @return {?}
         */
            function (solution) {
                if (!(this.defaultQuerySolution)) {
                    return { 'visibility': 'hidden' };
                }
                else {
                    if (solution.id == this.defaultQuerySolution.id) ;
                    else {
                        return { 'visibility': 'hidden' };
                    }
                }
            };
        /**
         * 方案选择事件
         * @param solution 当前选中的方案
         */
        /**
         * 方案选择事件
         * @param {?} solution 当前选中的方案
         * @return {?}
         */
        QuerySolutionComponent.prototype.select = /**
         * 方案选择事件
         * @param {?} solution 当前选中的方案
         * @return {?}
         */
            function (solution) {
                this.selectedSolution = Object.assign(new componentQuerycondition.QuerySolutionVo(), solution);
                if (solution.queryConditions && solution.queryConditions.length > 0) {
                    this.selectedFieldConditions = this.selectedSolution.queryConditions;
                }
                else {
                    this.selectedFieldConditions = new Array();
                }
                this.showSaveButton = this.selectedSolution.isSystem ? false : true;
                !this.isDisabled && this.solutionHandler.setCurrentQueryConditions(lodashEs.cloneDeep(this.selectedFieldConditions));
                this.setCurrentSolutionCache(this.selectedSolution);
                // 如果方案的变更是在収折时
                this.whenFoldSetSummaryConditions();
            };
        /**
         * @param {?} solution
         * @return {?}
         */
        QuerySolutionComponent.prototype.selectAndQuery = /**
         * @param {?} solution
         * @return {?}
         */
            function (solution) {
                if (this.defaultConfigs && this.defaultConfigs.isCurrent || (solution.isSystem && solution.type !== 'pre')) {
                    this.setQueryConditionValues(this.defaultConfigs, solution); //已包含select操作
                }
                else {
                    if (this.enableHistory && solution.type == 'pre') {
                        /** @type {?} */
                        var conditions = lodashEs.cloneDeep(this.historyRefer['foundSchme']['queryConditions']);
                        if (conditions.length > 0) {
                            solution.queryConditions = conditions;
                        }
                    }
                    this.select(solution);
                }
                this.query();
            };
        /**
         * 打开字段配置窗口
         */
        /**
         * 打开字段配置窗口
         * @return {?}
         */
        QuerySolutionComponent.prototype.openFieldConfigDialog = /**
         * 打开字段配置窗口
         * @return {?}
         */
            function () {
                this.farrisQueryCondition.openFieldConfigDialog();
            };
        /**
         * @param {?} $event
         * @return {?}
         */
        QuerySolutionComponent.prototype.fieldConditionsChangeHander = /**
         * @param {?} $event
         * @return {?}
         */
            function ($event) {
                /** @type {?} */
                var data = $event;
                // this.selectedSolution.queryConditions = data;此时不改变当前选中的方案，等到保存时，直接调用this.selectedFieldConditions来保存。
                this.selectedFieldConditions = data;
                if (!this.isDisabled) {
                    this.solutionHandler.setCurrentQueryConditions(lodashEs.cloneDeep(this.selectedFieldConditions));
                    this.solutionHandler.setFilterConditions(this.selectedFieldConditions);
                    this.setCurrentSolutionCache(this.selectedSolution);
                }
                this.markAsChanged(true, this.selectedSolution.id);
            };
        /**
         * 保存方案
         */
        /**
         * 保存方案
         * @return {?}
         */
        QuerySolutionComponent.prototype.save = /**
         * 保存方案
         * @return {?}
         */
            function () {
                var _this = this;
                if (!this.formId) {
                    this.solutionService.showInfo(this.localeService.getValue("querySolution.container.pleaseInput"), 'error', '', 1500);
                    return;
                }
                //id为空则表示没有预置方案，则此时保存方案相当于新增一个方案
                if (!this.selectedSolution.id) {
                    this.openSaveAsDialog(this.localeService.getValue("querySolution.container.save"));
                }
                //直接保存
                else {
                    this.selectedSolution.queryConditions = this.selectedFieldConditions;
                    this.httpService.update(this.selectedSolution, this.sessionId).subscribe(( /**
                     * @return {?}
                     */function () {
                        /** @type {?} */
                        var tempIndex = _this.querySolutionVos.findIndex(( /**
                         * @param {?} x
                         * @return {?}
                         */function (x) { return x.id == _this.selectedSolution.id; }));
                        // this.selectedFieldConditions = this.selectedSolution.queryConditions;
                        _this.querySolutionVos.splice(tempIndex, 1, _this.selectedSolution);
                        _this.markAsChanged(false, _this.selectedSolution.id);
                        _this.solutionService.showInfo(_this.localeService.getValue("querySolution.container.saveSuccess"), 'success', '', 1500);
                    }), ( /**
                     * @param {?} error
                     * @return {?}
                     */function (error) {
                        _this.solutionService.showInfo(_this.localeService.getValue("querySolution.container.saveFail"), 'error', '', 1500);
                        throw error;
                    }));
                }
            };
        /**
         * 打开另存为对话框，点击保存按钮时也走该逻辑
         * @param title
         */
        /**
         * 打开另存为对话框，点击保存按钮时也走该逻辑
         * @param {?} title
         * @return {?}
         */
        QuerySolutionComponent.prototype.openSaveAsDialog = /**
         * 打开另存为对话框，点击保存按钮时也走该逻辑
         * @param {?} title
         * @return {?}
         */
            function (title) {
                if (!this.formId) {
                    this.solutionService.showInfo(this.localeService.getValue("querySolution.container.pleaseInput"), 'error', '', 1500);
                    return;
                }
                this.saveAsDialog.title = title;
                this.saveAsDialog.querySolution = this.newSaveAsSolutionVo();
                this.saveAsDialog.show();
            };
        /**
         * 另存为确定事件处理
         * @param solution 新增的查询方案
         */
        /**
         * 另存为确定事件处理
         * @param {?} _event
         * @return {?}
         */
        QuerySolutionComponent.prototype.saveAsConfrimHandler = /**
         * 另存为确定事件处理
         * @param {?} _event
         * @return {?}
         */
            function (_event) {
                var _this = this;
                /** @type {?} */
                var solution = _event['querySolution'];
                if (solution.queryConditions && solution.queryConditions.length) {
                    solution.queryConditions.forEach(( /**
                     * @param {?} element
                     * @return {?}
                     */function (element) {
                        if (!!element.readonly) {
                            element.readonly = false;
                        }
                    }));
                }
                this.httpService.create(solution, this.sessionId).subscribe(( /**
                 * @return {?}
                 */function () {
                    //重新设置全局的默认方案
                    if (solution.isDefault) { //被设置为默认方案
                        _this.defaultQuerySolution = solution;
                        _this.querySolutionVos = _this.querySolutionVos.map(( /**
                         * @param {?} vo
                         * @return {?}
                         */function (vo) {
                            vo.isDefault = false;
                            return vo;
                        }));
                    }
                    //用户保存自己的筛选方案后，不再显示系统默认的方案
                    if (_this.querySolutionVos.length === 1 && _this.querySolutionVos[0].isSystem) {
                        //用户没有配置自己的筛选方案时，或者用户只配置了一个筛选方案时，此数组都有一个方案；若此方案是系统默认方案，则应在另存为时删掉
                        _this.querySolutionVos = new Array();
                    }
                    else if (_this.querySolutionVos.length === 2 && _this.enableHistory) {
                        /** @type {?} */
                        var filterSolutionVos = new Array();
                        filterSolutionVos = _this.querySolutionVos.filter(( /**
                         * @param {?} item
                         * @return {?}
                         */function (item) {
                            if (item.type == 'pre') {
                                return true;
                            }
                            return !item.isSystem;
                        }));
                        _this.querySolutionVos = filterSolutionVos;
                    }
                    _this.querySolutionVos.push(solution);
                    _this.selectedSolution = solution;
                    _this.showSaveButton = _this.selectedSolution.isSystem ? false : true;
                    _this.selectedFieldConditions = _this.selectedSolution.queryConditions;
                    _this.solutionService.showInfo(_this.localeService.getValue("querySolution.container.saveSuccess"), 'success', '', 1500);
                }), ( /**
                 * @param {?} error
                 * @return {?}
                 */function (error) {
                    _this.solutionService.showInfo(_this.localeService.getValue("querySolution.container.saveFail"), 'error', '', 1500);
                    throw error;
                }));
            };
        /**
         * 打开管理界面
         */
        /**
         * 打开管理界面
         * @return {?}
         */
        QuerySolutionComponent.prototype.openManangerDialog = /**
         * 打开管理界面
         * @return {?}
         */
            function () {
                this.manageDialog.show(lodashEs.cloneDeep(this.querySolutionVos));
            };
        /**
         * 管理界面确定处理
         * @param _event
         * @param dialog
         */
        /**
         * 管理界面确定处理
         * @param {?} _event
         * @return {?}
         */
        QuerySolutionComponent.prototype.managerConfirmHandler = /**
         * 管理界面确定处理
         * @param {?} _event
         * @return {?}
         */
            function (_event) {
                var _this = this;
                /** @type {?} */
                var obj = _event;
                if (obj['validator'] == true) {
                    //点击checkbox时，newDefaultQuerySolution被赋值； 全局默认方案被删除时，newDefaultQuerySolution变为null
                    /** @type {?} */
                    var defaultId_1 = obj['newDefaultQuerySolution'] ? obj['newDefaultQuerySolution'].id : '';
                    /** @type {?} */
                    var belongId = this.formId;
                    //若没有删除任何方案，deletedQuerySolutionVos会是一个空数组
                    /** @type {?} */
                    var deletedIds_1 = obj['deletedQuerySolutionIds'];
                    this.httpService.batchUpdate({ defaultId: defaultId_1, belongId: belongId, deletedIds: deletedIds_1 }, this.sessionId).subscribe(( /**
                     * @return {?}
                     */function () {
                        //把删除后的vo赋值给 this.querySolutionVos；如果没删除方案， this.querySolutionVos跟obj['splicedQuerySolutionVos']同值
                        //默认方案的变化也记录在updatedQuerySolutionVos中
                        _this.querySolutionVos = obj['updatedQuerySolutionVos'];
                        if (!obj['currentDefaultQuerySolutionId']) { //如果传过来的当前默认方案id是空，代表所有默认方案都取消了
                            _this.defaultQuerySolution = null;
                        }
                        //如果有默认方案先显示默认方案，如果没有默认方案则直接显示当前查询方案的第一个；如果没有任何查询方案则直接清空查询方案，则显示系统预置的默认方案
                        if (defaultId_1) {
                            //已设置默认方案
                            _this.select(obj['newDefaultQuerySolution']);
                            _this.defaultQuerySolution = obj['newDefaultQuerySolution'];
                        }
                        else {
                            //未更改默认方案，判断当前选择的查询方案是否已被删除
                            if (deletedIds_1.includes(_this.selectedSolution.id)) { //如果被删除
                                if (_this.querySolutionVos.length > 0) {
                                    if (_this.enableHistory && _this.querySolutionVos.length == 1 && _this.querySolutionVos[0].type == 'pre') {
                                        _this.select(_this.sysQuerySolutionVo);
                                        _this.querySolutionVos.push(_this.sysQuerySolutionVo);
                                    }
                                    else {
                                        _this.select(_this.querySolutionVos[0]);
                                    }
                                }
                                else {
                                    _this.select(_this.sysQuerySolutionVo);
                                    _this.querySolutionVos.push(_this.sysQuerySolutionVo);
                                }
                            }
                        }
                        _this.solutionService.showInfo(_this.localeService.getValue("querySolution.container.saveSuccess"), 'success', '', 1500);
                    }), ( /**
                     * @param {?} error
                     * @return {?}
                     */function (error) {
                        _this.solutionService.showInfo(_this.localeService.getValue("querySolution.container.saveFail"), 'error', '', 1500);
                        return Observable.Observable.throw(error);
                    }));
                }
            };
        /**
         * 执行筛选
         */
        /**
         * 执行筛选
         * @return {?}
         */
        QuerySolutionComponent.prototype.query = /**
         * 执行筛选
         * @return {?}
         */
            function () {
                if (!this.isDisabled) {
                    /** @type {?} */
                    var errorArr = this.solutionService.isValid(this.selectedFieldConditions);
                    if (errorArr && errorArr.length) {
                        /** @type {?} */
                        var errorFields = errorArr.map(( /**
                         * @param {?} error
                         * @return {?}
                         */function (error) { return error.field; }));
                        this.solutionService.showInfo(this.localeService.getValue("querySolution.container.require").replace('{fields}', errorFields.join(', ')), 'warning', '', 2500);
                    }
                    else {
                        /** @type {?} */
                        var queryConditions = lodashEs.cloneDeep(this.selectedFieldConditions);
                        this.solutionHandler.setFilterConditions(queryConditions);
                        this.queryEmitter.emit(queryConditions);
                        // 更新历史记录
                        this.changeQueryHistroy();
                    }
                }
            };
        /**
         * 清空->条件全部重置为空
         */
        /**
         * 清空->条件全部重置为空
         * @return {?}
         */
        QuerySolutionComponent.prototype.clear = /**
         * 清空->条件全部重置为空
         * @return {?}
         */
            function () {
                // this.isFold = !this.isFold;
                /** @type {?} */
                var isNotEmpty = this.selectedFieldConditions.some(( /**
                 * @param {?} condition
                 * @return {?}
                 */function (condition) { return condition.value.isEmpty() == false; }));
                if (isNotEmpty) {
                    /** @type {?} */
                    var newList = lodashEs.cloneDeep(this.farrisQueryCondition.resetSelectedConditionValues(true));
                    this.selectedFieldConditions = newList;
                    this.selectedSolution.queryConditions = newList;
                    this.solutionHandler.setCurrentQueryConditions(lodashEs.cloneDeep(newList));
                    this.solutionHandler.setFilterConditions(newList);
                    this.markAsChanged(true, this.selectedSolution.id);
                    this.query();
                }
            };
        /**
         * 折叠按钮的清空
         */
        /**
         * 折叠按钮的清空
         * @return {?}
         */
        QuerySolutionComponent.prototype.foldClearHandler = /**
         * 折叠按钮的清空
         * @return {?}
         */
            function () {
                if (this.isFold) {
                    // 如果点击的时候是収折的
                    this.isFold = false;
                    if (this.summaryConditions.length > 0) {
                        this.summaryConditions = [];
                        this.clear();
                    }
                }
                else {
                    // 如果点击的时候是展开的
                    this.clear();
                }
            };
        /**
         * 箭头点击事件
         */
        /**
         * 箭头点击事件
         * @return {?}
         */
        QuerySolutionComponent.prototype.arrowClick = /**
         * 箭头点击事件
         * @return {?}
         */
            function () {
                this.isFold = !this.isFold;
                this.whenFoldSetSummaryConditions();
                if (!this.isFold) {
                    this.summaryConditions = [];
                }
            };
        /**
         * @private
         * @return {?}
         */
        QuerySolutionComponent.prototype.whenFoldSetSummaryConditions = /**
         * @private
         * @return {?}
         */
            function () {
                if (this.isFold) {
                    // 如果収折
                    /** @type {?} */
                    var isNotEmpty = this.selectedFieldConditions.some(( /**
                     * @param {?} condition
                     * @return {?}
                     */function (condition) { return condition.value.isEmpty() == false; }));
                    if (isNotEmpty) {
                        this.summaryConditions = this.selectedFieldConditions.filter(( /**
                         * @param {?} condition
                         * @return {?}
                         */function (condition) { return condition.value.isEmpty() == false; }));
                    }
                    else {
                        this.summaryConditions = [];
                    }
                }
            };
        /**
         * 为系统预置方案或者自定义查询方案设置筛选条件默认值
         * @param configs 默认值设置
         * @param selectedSolution 当前选择的筛选方案
         */
        /**
         * 为系统预置方案或者自定义查询方案设置筛选条件默认值
         * @param {?} configs 默认值设置
         * @param {?} selectedSolution 当前选择的筛选方案
         * @return {?}
         */
        QuerySolutionComponent.prototype.setQueryConditionValues = /**
         * 为系统预置方案或者自定义查询方案设置筛选条件默认值
         * @param {?} configs 默认值设置
         * @param {?} selectedSolution 当前选择的筛选方案
         * @return {?}
         */
            function (configs, selectedSolution) {
                /** @type {?} */
                var targetSolution;
                /** @type {?} */
                var targetSolutionWithValues;
                if (configs && configs.fieldConfigs && configs.fieldConfigs.length) {
                    if (selectedSolution.hasOwnProperty('type') && selectedSolution['type'] == 'pre') {
                        //如果是历史记录
                        targetSolution = null;
                        this.select(selectedSolution);
                    }
                    else {
                        targetSolution = configs.isCurrent ? selectedSolution : (selectedSolution.isSystem ? selectedSolution : null);
                    }
                    if (targetSolution && targetSolution.queryConditions && targetSolution.queryConditions.length) {
                        targetSolutionWithValues = lodashEs.cloneDeep(this.solutionService.setValues(targetSolution, configs.fieldConfigs, !!configs.readonly));
                        this.doneSetDefaultValue = true;
                        this.select(targetSolutionWithValues);
                    }
                    else {
                        //不为自定义方案设置默认值时，标记下要为其赋默认值的意图，但未成功
                        this.doneSetDefaultValue = true;
                        //如果没有设置默认值，就把当前选中方案的条件的值传出
                        this.solutionHandler.setCurrentQueryConditions(this.selectedSolution.queryConditions);
                    }
                }
            };
        /**
         * 加载筛选方案后自动查询
         * @param currentSolution 当前筛选方案
         */
        /**
         * 加载筛选方案后自动查询
         * @param {?} currentSolution 当前筛选方案
         * @return {?}
         */
        QuerySolutionComponent.prototype.initAutoQuery = /**
         * 加载筛选方案后自动查询
         * @param {?} currentSolution 当前筛选方案
         * @return {?}
         */
            function (currentSolution) {
                if (this.enableInitQuery && this.doneInitQuery && this.enableHistory) {
                    // 已通过历史记录进行过查询
                    return;
                }
                /** @type {?} */
                var enableQuery = true;
                if (currentSolution && currentSolution.queryConditions && currentSolution.queryConditions.length) {
                    if (this.isSetDefaultValue && !this.doneSetDefaultValue) {
                        enableQuery = false;
                    }
                }
                else {
                    enableQuery = false;
                }
                if (enableQuery && this.enableInitQuery) {
                    // this.solutionHandler.setFilterConditions(this.selectedSolution.queryConditions); 执行query方法时，已经执行setFilterConditions
                    //if(this._self.nativeElement.querySelector('.farris-panel .btn-group .btn-primary')){
                    this.query();
                    this.doneInitQuery = true;
                    //}
                }
            };
        /**
         * 当前查询方案的筛选条件发生变化时，标记方案处于编辑状态
         * @param isChanged 方案是否处于编辑状态
         * @param solutionId 需要标记是否处于编辑状态的方案的id
         */
        /**
         * 当前查询方案的筛选条件发生变化时，标记方案处于编辑状态
         * @param {?} isChanged 方案是否处于编辑状态
         * @param {?} solutionId 需要标记是否处于编辑状态的方案的id
         * @return {?}
         */
        QuerySolutionComponent.prototype.markAsChanged = /**
         * 当前查询方案的筛选条件发生变化时，标记方案处于编辑状态
         * @param {?} isChanged 方案是否处于编辑状态
         * @param {?} solutionId 需要标记是否处于编辑状态的方案的id
         * @return {?}
         */
            function (isChanged, solutionId) {
                this.querySolutionVos.forEach(( /**
                 * @param {?} solution
                 * @return {?}
                 */function (solution) {
                    if (solution.id == solutionId)
                        solution.isChanged = isChanged;
                }));
                this.selectedSolution.isChanged = isChanged;
                this.cdf.detectChanges();
            };
        /**
         * 处理筛选按钮和清空按钮的响应式位置变更
         * @param $event farris-querycondition组件内部是否显示按钮
         */
        // showButtonHandle($event: any) {
        //     if(!this.isDisabled){
        //         let data = $event;
        //         this.queryButtonOnRight = !data;
        //         if(this.enableInitQuery && !this.doneInitQuery) {
        //             this.initAutoQuery(this.selectedSolution);
        //         }
        //     }
        // }
        /**
         * 键盘监听函数，当按下回车键时相当于按下筛选按钮
         */
        /**
             * 处理筛选按钮和清空按钮的响应式位置变更
             * @param $event farris-querycondition组件内部是否显示按钮
             */
        // showButtonHandle($event: any) {
        //     if(!this.isDisabled){
        //         let data = $event;
        //         this.queryButtonOnRight = !data;
        //         if(this.enableInitQuery && !this.doneInitQuery) {
        //             this.initAutoQuery(this.selectedSolution);
        //         }
        //     }
        // }
        /**
         * 键盘监听函数，当按下回车键时相当于按下筛选按钮
         * @private
         * @return {?}
         */
        QuerySolutionComponent.prototype.listenKeyBoard = /**
             * 处理筛选按钮和清空按钮的响应式位置变更
             * @param $event farris-querycondition组件内部是否显示按钮
             */
            // showButtonHandle($event: any) {
            //     if(!this.isDisabled){
            //         let data = $event;
            //         this.queryButtonOnRight = !data;
            //         if(this.enableInitQuery && !this.doneInitQuery) {
            //             this.initAutoQuery(this.selectedSolution);
            //         }
            //     }
            // }
            /**
             * 键盘监听函数，当按下回车键时相当于按下筛选按钮
             * @private
             * @return {?}
             */
            function () {
                this._self.nativeElement.addEventListener("keydown", this.handleKeyDown);
            };
        /**
         * 自动初始化查询
         * 启用历史记录，并且启用了初始化查询，如果有条件，就进行查询
         */
        /**
         * 自动初始化查询
         * 启用历史记录，并且启用了初始化查询，如果有条件，就进行查询
         * @private
         * @return {?}
         */
        QuerySolutionComponent.prototype.initAutoQueryByLS = /**
         * 自动初始化查询
         * 启用历史记录，并且启用了初始化查询，如果有条件，就进行查询
         * @private
         * @return {?}
         */
            function () {
                // 启用历史
                if (this.enableHistory && !this.isDisabled) {
                    // key
                    this.setLSKey();
                    // 初始化对象
                    this.initQuerySolution();
                    // 如果设置了初始查询
                    if (this.enableInitQuery) {
                        this.formatInitQuerySolution();
                        if (this.historyRefer['foundSchme']['queryConditions'].length > 0) {
                            /** @type {?} */
                            var queryConditions = lodashEs.cloneDeep(this.historyRefer['foundSchme']['queryConditions']);
                            this.selectedFieldConditions = queryConditions;
                            // 设置查询条件
                            this.solutionHandler.setFilterConditions(queryConditions);
                            // 抛出查询事件
                            this.queryEmitter.emit(queryConditions);
                            // 标记
                            this.doneInitQuery = true;
                        }
                    }
                }
            };
        /**
         * 初始化
         */
        /**
         * 初始化
         * @private
         * @return {?}
         */
        QuerySolutionComponent.prototype.initQuerySolution = /**
         * 初始化
         * @private
         * @return {?}
         */
            function () {
                /** @type {?} */
                var querysolutionVO = new componentQuerycondition.QuerySolutionVo();
                querysolutionVO.id = this.solutionService.getGuid();
                querysolutionVO.code = this.localeService.getValue("querySolution.container.histroyName");
                querysolutionVO.queryConditions = [];
                querysolutionVO.belongId = this.formId;
                querysolutionVO.isSystem = true;
                querysolutionVO.type = 'pre';
                this.historyRefer['foundSchme'] = querysolutionVO;
            };
        /**
         * 初始化来自LS的条件
         */
        /**
         * 初始化来自LS的条件
         * @private
         * @return {?}
         */
        QuerySolutionComponent.prototype.formatInitQuerySolution = /**
         * 初始化来自LS的条件
         * @private
         * @return {?}
         */
            function () {
                /** @type {?} */
                var histroyCondition = this.httpService.getLS(this.historyRefer.schemeKeyLS);
                if (histroyCondition.length > 0) {
                    /** @type {?} */
                    var convertor = new componentQuerycondition.QuerySolutionVoConvertor();
                    this.historyRefer['foundSchme']['queryConditions'] = histroyCondition;
                    // 规范化条件
                    this.historyRefer['foundSchme'] = this.formatQuerySolutionVO(convertor, this.historyRefer['foundSchme']);
                    // 更新配置
                    this.solutionService.updateControl(this.historyRefer['foundSchme'], this.resetFieldConfigs);
                    this.historyRefer.initCondition = true;
                }
            };
        /**
         * 保存之后更新历史
         */
        /**
         * 保存之后更新历史
         * @private
         * @param {?=} updateAll
         * @return {?}
         */
        QuerySolutionComponent.prototype.changeQueryHistroy = /**
         * 保存之后更新历史
         * @private
         * @param {?=} updateAll
         * @return {?}
         */
            function (updateAll) {
                if (updateAll === void 0) {
                    updateAll = true;
                }
                if (!this.enableHistory) {
                    return;
                }
                if (this.selectedSolution['type'] == 'pre') {
                    this.selectedSolution['isChanged'] = false;
                }
                else {
                    /** @type {?} */
                    var preIndex = this.querySolutionVos.findIndex(( /**
                     * @param {?} qsolutionVO
                     * @return {?}
                     */function (qsolutionVO) {
                        return qsolutionVO['type'] == 'pre';
                    }));
                    // 执行查询之后，上次查询的修改就不认为是变更了
                    if (preIndex > -1) {
                        this.querySolutionVos[preIndex]['isChanged'] = false;
                    }
                }
                /** @type {?} */
                var queryConditions = lodashEs.cloneDeep(this.selectedFieldConditions);
                this.historyRefer['foundSchme'].queryConditions = queryConditions;
                // 更新缓存
                this.httpService.setLS(this.historyRefer.schemeKeyLS, this.historyRefer['foundSchme'].queryConditions);
                if (updateAll) {
                    // 发起请求保存历史记录
                    this.httpService.saveHistroy(this.historyRefer['foundSchme'], this.sessionId).subscribe(( /**
                     * @return {?}
                     */function () {
                    }));
                }
            };
        /**
         * 处理iframe嵌套
         */
        /**
         * 处理iframe嵌套
         * @private
         * @return {?}
         */
        QuerySolutionComponent.prototype.getTopWindow = /**
         * 处理iframe嵌套
         * @private
         * @return {?}
         */
            function () {
                /** @type {?} */
                var curWin = window.self;
                try {
                    while (curWin.location.origin === curWin.parent.location.origin) {
                        if (curWin !== curWin.parent && !(( /** @type {?} */(curWin))).isRTFTopWin) {
                            curWin = curWin.parent;
                        }
                        else {
                            break;
                        }
                    }
                }
                catch (e) { }
                return curWin;
            };
        /**
         * 设置key
         */
        /**
         * 设置key
         * @private
         * @return {?}
         */
        QuerySolutionComponent.prototype.setLSKey = /**
         * 设置key
         * @private
         * @return {?}
         */
            function () {
                // 获取window
                /** @type {?} */
                var curWindow = this.getTopWindow();
                /** @type {?} */
                var userCode = '';
                if (curWindow['gspframeworkService'] && curWindow['gspframeworkService'].hasOwnProperty('common')) {
                    userCode = curWindow['gspframeworkService']['common'].userInfos.get().code;
                }
                this.historyRefer.schemeKeyLS = userCode ? 'Scheme' + this._idSer.encrypt(userCode + this.formId) : '';
            };
        QuerySolutionComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'farris-querysolution',
                        template: "<div #querysolution class=\"farris-panel position-relative\" tabindex=\"1\" style=\"outline: none;\">\r\n    <div class=\"solution-header\">\r\n        <div class=\"btn-group mr-3\" fDropdown>\r\n            <div class=\"solution-header-title\" fDropdownToggle>               \r\n                <span style=\"max-width: 288px;overflow: hidden;text-overflow: ellipsis;white-space: nowrap\"\r\n                    title=\"{{selectedSolution.code}}\">{{selectedSolution.code}}</span>\r\n                <b class=\"header-title--change\" *ngIf=\"selectedSolution.isChanged\">*</b>\r\n                <span class=\"f-icon f-accordion-expand\"></span>\r\n            </div>\r\n            <div class=\"dropdown-menu solution-header-title-menu\" fDropdownMenu>\r\n                <div class=\"solution-header-title-menu-inner\">\r\n                    <div class=\"solution-header-title-menu-arrow\"></div>\r\n                    <li class=\"dropdown-item solution-header-dropdown-item\"\r\n                        [ngClass]=\"{'solution-header-dropdown-item-active': solution.id === selectedSolution.id }\"\r\n                        (click)=\"selectAndQuery(solution)\" *ngFor=\"let solution of querySolutionVos\">\r\n                        <b *ngIf=\"solution.isChanged\"  class=\"menu-item--change\" >*</b>\r\n                        <span class=\"solution-header-dropdown-item-title\" [title]=\"solution.code\">{{solution.code}}</span>\r\n                        <span class=\"solution-header-dropdown-item-tip\"\r\n                            [ngStyle]=\"getDefaultLabel(solution)\">{{'querySolution.container.default' | locale}}</span>\r\n                    </li>\r\n                    <li class=\"solution-header-dropdown-item-btns\">\r\n                        <span class=\"dropdown-item-btn\" *ngIf=\"showSaveButton\"\r\n                            (click)=\"save()\">{{'queryCondition.container.save' | locale}}</span>\r\n                        <span class=\"dropdown-item-btn\"\r\n                            (click)=\"saveAs()\">{{'queryCondition.container.saveAs' | locale}}</span>\r\n                        <span class=\"dropdown-item-btn\"\r\n                            (click)=\"openManangerDialog()\">{{'querySolution.container.manage' | locale}}</span>\r\n                    </li>\r\n                </div>\r\n            </div>\r\n        </div>\r\n        <div class=\"summary-condition\" *ngIf=\"isFold&&summaryConditions.length>0\">\r\n            <lib-summary-list [conditions]=\"summaryConditions\"></lib-summary-list>\r\n        </div>\r\n        <div class=\"solution-action\">\r\n            <div class=\"btn-group\" *ngIf=\"!isFold\">\r\n                <button *ngIf=\"isFold==false\" (click)=\"query()\" type=\"button\"\r\n                    class=\"btn btn-primary \">{{'queryCondition.container.query' | locale}}</button>\r\n            </div>\r\n            <div class=\"icon-group\">\r\n                <!--\u6E05\u7A7A\u6309\u94AE-->\r\n                <span *ngIf=\"!isFold||summaryConditions.length>0\" class=\"icon-group-remove\" (click)=\"foldClearHandler()\"\r\n                    title=\"{{'querySolution.container.clear' | locale}}\">\r\n                    <span class=\"f-icon f-icon-remove\"></span>\r\n                </span>                \r\n                <ng-container *ngIf=\"!isFold\">\r\n                    <span class=\"divide\"></span>\r\n                    <!--\u914D\u7F6E\u6309\u94AE-->\r\n                    <span class=\"icon-group-setup\" (click)=\"openFieldConfigDialog()\"\r\n                        title=\"{{'queryCondition.container.config' | locale}}\">\r\n                        <span class=\"f-icon f-icon-home-setup\"></span>\r\n                    </span>\r\n                    <!--\u5C55\u5F00\u6536\u8D77-->\r\n                    <span class=\"icon-group-packup\" (click)=\"arrowClick()\"\r\n                        title=\"{{'querySolution.container.arrowUp' | locale}}\">\r\n                        <span class=\"f-icon f-icon-packup\"></span>\r\n                    </span>\r\n                </ng-container>\r\n                <!--\u5C55\u5F00\u6536\u8D77-->\r\n                <span *ngIf=\"isFold\" class=\"icon-group-packup\" (click)=\"arrowClick()\"\r\n                    title=\"{{'querySolution.container.arrowDown' | locale}}\">\r\n                    <span class=\"f-icon f-icon-packup\" style=\"transform: rotate(180deg);\"></span>\r\n                </span>\r\n\r\n            </div>\r\n        </div>\r\n    </div>\r\n    <div>\r\n        <farris-querycondition [ngClass]=\"{'d-none':isFold}\" #farrisQueryCondition\r\n            [(selectedFieldConditions)]=\"selectedFieldConditions\" [fieldConfigs]=\"fieldConfigs\"\r\n            (fieldConditionsChange)=\"fieldConditionsChangeHander($event)\" [isControlInline]=\"isControlInline\"\r\n            [showCompleteLabel]=\"showCompleteLabel\" [isDisabled]=\"isDisabled\" [resetFieldConfigs]=\"resetFieldConfigs\">\r\n        </farris-querycondition>\r\n    </div>\r\n\r\n    <app-solutionmanager #manageDialog (confirmEmitter)=\"managerConfirmHandler($event)\"></app-solutionmanager>\r\n    <app-saveasdialog #saveAsDialog (confirmEmitter)=\"saveAsConfrimHandler($event)\"></app-saveasdialog>\r\n    <div *ngIf=\"isDisabled\" style=\"position:absolute;top:0;bottom:0;left:0;right:0;z-index: 99;\"></div>\r\n</div>",
                        encapsulation: core.ViewEncapsulation.None,
                        providers: [HttpService, componentQuerycondition.ConvertorService, FieldConfigService],
                        styles: [".solution-action{float:right}.solution-action span{vertical-align:middle;margin:0 3px}.solution-action .divide{font-size:12px;padding:3px 0}.solution-header{height:30px;margin-bottom:5px;-webkit-box-pack:start;justify-content:flex-start}.solution-action .f-icon{cursor:pointer}.solution-action .icon-group{display:inline-block}.solution-header-title-text{overflow:initial!important}"]
                    }] }
        ];
        /** @nocollapse */
        QuerySolutionComponent.ctorParameters = function () {
            return [
                { type: uiNotify.NotifyService },
                { type: core.ComponentFactoryResolver },
                { type: core.Injector },
                { type: uiModal.BsModalService },
                { type: componentQuerycondition.ConvertorService },
                { type: componentQuerycondition.SolutionService },
                { type: HttpService },
                { type: FieldConfigService },
                { type: uiLocale.LocaleService }
            ];
        };
        QuerySolutionComponent.propDecorators = {
            defaultConfigs: [{ type: core.Input }],
            fieldConfigs: [{ type: core.Input }],
            presetQuerySolutionName: [{ type: core.Input }],
            resetFieldConfigs: [{ type: core.Input }],
            presetFieldConfigs: [{ type: core.Input }],
            isDisabled: [{ type: core.Input }],
            formId: [{ type: core.Input }],
            queryEmitter: [{ type: core.Output }],
            cls: [{ type: core.HostBinding, args: ['class',] }],
            isFold: [{ type: core.Input }],
            isControlInline: [{ type: core.Input }],
            showCompleteLabel: [{ type: core.Input }],
            enableInitQuery: [{ type: core.Input }],
            enableHistory: [{ type: core.Input }],
            farrisQueryCondition: [{ type: core.ViewChild, args: ['farrisQueryCondition',] }],
            manageDialog: [{ type: core.ViewChild, args: ['manageDialog',] }],
            saveAsDialog: [{ type: core.ViewChild, args: ['saveAsDialog',] }]
        };
        return QuerySolutionComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * Generated from: lib/service/edit.service.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var itemIndex = ( /**
     * @param {?} item
     * @param {?} data
     * @return {?}
     */function (item, data) {
        for (var idx = 0; idx < data.length; idx++) {
            if (data[idx].id === item.id) {
                return idx;
            }
        }
        return -1;
    });
    var EditService = /** @class */ (function () {
        function EditService() {
            this.createdItems = [];
            this.updatedItems = [];
        }
        /**
         * @param {?} item
         * @return {?}
         */
        EditService.prototype.update = /**
         * @param {?} item
         * @return {?}
         */
            function (item) {
                if (!this.isNew(item)) {
                    /** @type {?} */
                    var index = itemIndex(item, this.updatedItems);
                    if (index !== -1) {
                        this.updatedItems.splice(index, 1, item);
                    }
                    else {
                        this.updatedItems.push(item);
                    }
                }
                else {
                    /** @type {?} */
                    var index = this.createdItems.indexOf(item);
                    this.createdItems.splice(index, 1, item);
                }
            };
        /**
         * @param {?} item
         * @return {?}
         */
        EditService.prototype.isNew = /**
         * @param {?} item
         * @return {?}
         */
            function (item) {
                return !item.id;
            };
        /**
         * @param {?} target
         * @param {?} source
         * @return {?}
         */
        EditService.prototype.assignValues = /**
         * @param {?} target
         * @param {?} source
         * @return {?}
         */
            function (target, source) {
                Object.assign(target, source);
            };
        EditService.decorators = [
            { type: core.Injectable }
        ];
        return EditService;
    }());

    /**
     * @fileoverview added by tsickle
     * Generated from: lib/solutionmanager/solutionmanager.component.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var SolutionManangerComponent = /** @class */ (function () {
        function SolutionManangerComponent(formBuilder, editService, notify, localeService) {
            this.formBuilder = formBuilder;
            this.editService = editService;
            this.notify = notify;
            this.localeService = localeService;
            this.cancelEmitter = new core.EventEmitter();
            this.confirmEmitter = new core.EventEmitter();
            // @Input()
            // currentDefaultQuerySolutionId: string;
            // @Input()
            this.querySolutions = new Array();
            this.deletedQuerySolutionIds = new Array();
        }
        /**
         * @return {?}
         */
        SolutionManangerComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.columns = [
                    { field: 'code', width: 272, title: this.localeService.getValue('querySolution.manageDialog.name') },
                    { field: 'isSystem', width: 110, title: this.localeService.getValue('querySolution.manageDialog.property'), formatter: this.getSolutionProperty.bind(this), halign: 'center', align: 'center' },
                    { field: 'isDefault', width: 70, title: this.localeService.getValue('querySolution.manageDialog.default'), template: this.checkCell, halign: 'center', align: 'center' },
                    { width: 70, title: this.localeService.getValue('querySolution.manageDialog.operation'), template: this.optCell, halign: 'center', align: 'center' }
                ];
                this.title = this.localeService.getValue('querySolution.container.manage');
            };
        /**
         * @param {?} querySolutions
         * @return {?}
         */
        SolutionManangerComponent.prototype.show = /**
         * @param {?} querySolutions
         * @return {?}
         */
            function (querySolutions) {
                if (querySolutions) {
                    this.listData = this.findSolutionsWithoutSys(querySolutions);
                    this.querySolutions = querySolutions;
                }
                this.checkedSolution = this.querySolutions.find(( /**
                 * @param {?} vo
                 * @return {?}
                 */function (vo) { return vo.isDefault; }));
                this.deletedQuerySolutionIds = [];
                // this.checkedSolution = undefined;
                this.dialog.show();
            };
        /**
         * @param {?} value
         * @return {?}
         */
        SolutionManangerComponent.prototype.getSolutionProperty = /**
         * @param {?} value
         * @return {?}
         */
            function (value) {
                return value ? this.localeService.getValue("querySolution.manageDialog.system") : this.localeService.getValue("querySolution.manageDialog.personal");
            };
        /**
         * @param {?} querySolutions
         * @return {?}
         */
        SolutionManangerComponent.prototype.findSolutionsWithoutSys = /**
         * @param {?} querySolutions
         * @return {?}
         */
            function (querySolutions) {
                /** @type {?} */
                var result = [];
                querySolutions.forEach(( /**
                 * @param {?} qs
                 * @return {?}
                 */function (qs) {
                    if (!qs.isSystem)
                        result.push(qs);
                }));
                return result;
            };
        /**
         * @param {?} dataItem
         * @return {?}
         */
        SolutionManangerComponent.prototype.delelteSolution = /**
         * @param {?} dataItem
         * @return {?}
         */
            function (dataItem) {
                this.deletedQuerySolutionIds.push(dataItem.id);
                if (this.checkedSolution && dataItem.id == this.checkedSolution.id) {
                    this.checkedSolution = null;
                }
                //当checkedSolution不存在，直接删除
                for (var i = 0; i < this.querySolutions.length; i++) {
                    if (dataItem.id == this.querySolutions[i].id) {
                        this.querySolutions.splice(i, 1);
                        break;
                    }
                }
                this.listData = this.findSolutionsWithoutSys(this.querySolutions);
            };
        /**
         * @param {?} checked
         * @param {?} dataItem
         * @return {?}
         */
        SolutionManangerComponent.prototype.setDefault = /**
         * @param {?} checked
         * @param {?} dataItem
         * @return {?}
         */
            function (checked, dataItem) {
                if (checked) { //if checked，设置当前vo为默认，其他设为非默认
                    this.checkedSolution = dataItem;
                    //key point！
                    // this.currentDefaultQuerySolutionId = dataItem.id;
                    this.querySolutions = this.querySolutions.map(( /**
                     * @param {?} vo
                     * @return {?}
                     */function (vo) {
                        if (vo.id == dataItem.id) {
                            vo.isDefault = true;
                        }
                        else {
                            vo.isDefault = false;
                        }
                        return vo;
                    }));
                }
                else { //if unchecked, 设置当前vo为非默认，其余vo不变; 没有checkedSolution时
                    if (dataItem.id == this.checkedSolution.id) {
                        this.checkedSolution = null;
                        // this.currentDefaultQuerySolutionId = '';
                        this.querySolutions = this.querySolutions.map(( /**
                         * @param {?} vo
                         * @return {?}
                         */function (vo) {
                            if (vo.id == dataItem.id) {
                                vo.isDefault = false;
                            }
                            return vo;
                        }));
                    }
                }
                this.listData = this.findSolutionsWithoutSys(this.querySolutions);
                this.list.refresh();
            };
        /**
         * @return {?}
         */
        SolutionManangerComponent.prototype.cancel = /**
         * @return {?}
         */
            function () {
                this.dialog.close();
            };
        /**
         * @return {?}
         */
        SolutionManangerComponent.prototype.confirm = /**
         * @return {?}
         */
            function () {
                /** @type {?} */
                var obj = new Object();
                obj['deletedQuerySolutionIds'] = this.deletedQuerySolutionIds;
                obj['newDefaultQuerySolution'] = lodashEs.cloneDeep(this.checkedSolution);
                obj['updatedQuerySolutionVos'] = lodashEs.cloneDeep(this.querySolutions);
                // obj['currentDefaultQuerySolutionId'] = this.currentDefaultQuerySolutionId;
                if (this.deletedQuerySolutionIds.length > 0 || this.checkedSolution && this.checkedSolution.id) {
                    obj['validator'] = true;
                }
                else {
                    obj['validator'] = false;
                }
                this.confirmEmitter.emit(obj);
                this.dialog.close();
            };
        SolutionManangerComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'app-solutionmanager',
                        template: "<farris-dialog #dialog [buttons]=\"manangerbuttonRef\" [width]=\"550\" [height]=\"570\" [title]=\"title\">\r\n    <div class=\"solutionmanager-inner\">\r\n        <farris-datagrid #list [columns]=\"columns\" [data]=\"listData\" [pagination]=\"false\" [fit]=\"true\"></farris-datagrid>\r\n    </div>\r\n    <ng-template #optCell let-ctx>\r\n        <span class=\"f-icon f-icon-yxs_delete solutionmanager-grid-delete\" (click)=\"delelteSolution(ctx.rowData)\"></span>\r\n     </ng-template>\r\n     <ng-template #checkCell let-ctx>\r\n        <div class=\"custom-control custom-radio f-checkradio-single\" style=\"padding-top: 3px;\">\r\n            <input class=\"custom-control-input\" id=\"radio-{{ctx.rowData.id}}\" type=\"radio\" (click)=\"setDefault($event.target.checked, ctx.rowData)\" [checked]=\"ctx.rowData.isDefault\"/>\r\n            <label class=\"custom-control-label\" for=\"radio-{{ctx.rowData.id}}\"></label>\r\n        </div>\r\n     </ng-template>\r\n</farris-dialog>\r\n<ng-template #manangerbuttonRef>\r\n    <button class=\"btn btn-primary\" (click)=\"confirm()\">{{'querySolution.manageDialog.confirm' | locale}}</button>\r\n    <button class=\"btn btn-secondary\" (click)=\"cancel()\">{{'querySolution.manageDialog.cancel' | locale}}</button>\r\n</ng-template>",
                        providers: [EditService],
                        styles: [""]
                    }] }
        ];
        /** @nocollapse */
        SolutionManangerComponent.ctorParameters = function () {
            return [
                { type: forms.FormBuilder },
                { type: EditService },
                { type: uiNotify.NotifyService },
                { type: uiLocale.LocaleService }
            ];
        };
        SolutionManangerComponent.propDecorators = {
            cancelEmitter: [{ type: core.Output }],
            confirmEmitter: [{ type: core.Output }],
            dialog: [{ type: core.ViewChild, args: ['dialog',] }],
            optCell: [{ type: core.ViewChild, args: ['optCell',] }],
            checkCell: [{ type: core.ViewChild, args: ['checkCell',] }],
            list: [{ type: core.ViewChild, args: ['list',] }]
        };
        return SolutionManangerComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * Generated from: lib/saveasdialog/saveasdialog.component.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var SaveAsDialogComponent = /** @class */ (function () {
        function SaveAsDialogComponent(notify, solutionService, localeService) {
            this.notify = notify;
            this.solutionService = solutionService;
            this.localeService = localeService;
            this.cls = 'saveasdialog';
            this.cancelEmitter = new core.EventEmitter();
            this.confirmEmitter = new core.EventEmitter();
            //@Input属性，旧代码未设置，故保留
            this.querySolution = new componentQuerycondition.QuerySolutionVo();
        }
        /**
         * @return {?}
         */
        SaveAsDialogComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
            };
        /**
         * @return {?}
         */
        SaveAsDialogComponent.prototype.show = /**
         * @return {?}
         */
            function () {
                this.dialog.show();
            };
        /**
         * @return {?}
         */
        SaveAsDialogComponent.prototype.cancel = /**
         * @return {?}
         */
            function () {
                // this.cancelEmitter.emit(true);
                this.dialog.close();
            };
        /**
         * @return {?}
         */
        SaveAsDialogComponent.prototype.confirm = /**
         * @return {?}
         */
            function () {
                if (!this.querySolution.code) {
                    this.solutionService.showInfo(this.localeService.getValue('querySolution.saveAsDialog.pleaseInput'), 'info', '', 1500);
                    return;
                }
                /** @type {?} */
                var obj = new Object();
                obj['querySolution'] = lodashEs.cloneDeep(this.querySolution);
                this.confirmEmitter.emit(obj);
                this.dialog.close();
            };
        /**
         * @param {?} checkStatus
         * @return {?}
         */
        SaveAsDialogComponent.prototype.setDefault = /**
         * @param {?} checkStatus
         * @return {?}
         */
            function (checkStatus) {
                this.querySolution.isDefault = checkStatus;
            };
        SaveAsDialogComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'app-saveasdialog',
                        template: "<farris-dialog #dialog [buttons]=\"saveasbuttonRef\" [width]=\"550\" [height]=\"310\" [title]=\"title\">\r\n    <div class=\"qs-save-as-input\">\r\n        <div class=\"farris-input-wrap\">\r\n            <input class=\"form-control\" placeholder=\"{{'querySolution.saveAsDialog.placeholder' | locale}}\" [(ngModel)]=\"querySolution.code\"/>\r\n        </div>\r\n        <div class=\"custom-control custom-checkbox qs-save-as-check\">\r\n            <input class=\"custom-control-input\" type=\"checkbox\" (change)=\"setDefault($event.target.checked)\" [(ngModel)]=\"querySolution.isDefault\"/>\r\n            <label class=\"custom-control-label\" (click)=\"setDefault(!querySolution.isDefault)\">{{'querySolution.saveAsDialog.setAsDefault' | locale}}</label>\r\n        </div>\r\n    </div>\r\n</farris-dialog>\r\n<ng-template #saveasbuttonRef>\r\n    <div class=\"qs-save-as-btn\">\r\n        <button class=\"btn btn-primary\" (click)=\"confirm()\">{{'querySolution.saveAsDialog.confirm' | locale}}</button>        \r\n        <button class=\"btn btn-secondary\" (click)=\"cancel()\">{{'querySolution.saveAsDialog.cancel' | locale}}</button>\r\n    </div>\r\n</ng-template>",
                        encapsulation: core.ViewEncapsulation.None,
                        styles: [".qs-save-as-btn .btn{float:right;margin-left:10px;font-size:14px;line-height:26px}.qs-save-as-btn .btn-secondary{min-width:70px}.qs-save-as-input{width:100%;line-height:20px;font-size:14px;padding:20px 10px}.qs-save-as-check{margin:10px auto}"]
                    }] }
        ];
        /** @nocollapse */
        SaveAsDialogComponent.ctorParameters = function () {
            return [
                { type: uiNotify.NotifyService },
                { type: componentQuerycondition.SolutionService },
                { type: uiLocale.LocaleService }
            ];
        };
        SaveAsDialogComponent.propDecorators = {
            cls: [{ type: core.HostBinding, args: ['class',] }],
            cancelEmitter: [{ type: core.Output }],
            confirmEmitter: [{ type: core.Output }],
            dialog: [{ type: core.ViewChild, args: ['dialog',] }]
        };
        return SaveAsDialogComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * Generated from: lib/summary-condition/summary-condition.component.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var SummaryConditionComponent = /** @class */ (function () {
        function SummaryConditionComponent(dtHelper, numberHelper, injector) {
            this.dtHelper = dtHelper;
            this.numberHelper = numberHelper;
            this.injector = injector;
            // 分隔符
            this._spliter = '';
            // 是否区间
            this._isRange = false;
            this.showTime = false;
            this.textField = 'name';
            this.valueField = 'value';
            // 从服务器端取值是格式化后的
            this.returnFormat = '';
            // 文本显示
            this.text = "";
            // 千分位符号
            this.thousand = ',';
            // 小数点处符号
            this.decimal = '.';
            // 货币符号及值展现形式
            this.expression = '%s%v';
            // formControl显示的文本
            /**
             * 国际化类型
             * \@Input() localizationType: string;
             */
            // 货币符号，默认是RMB
            this.currencySymbol = '￥';
            // 十进制前面填充的符号
            this.filledSymbol = '0';
            this.localeService = this.injector.get(uiLocale.LocaleService);
        }
        Object.defineProperty(SummaryConditionComponent.prototype, "condition", {
            get: /**
             * @return {?}
             */ function () {
                return this._condition;
            },
            set: /**
             * @param {?} qCondition
             * @return {?}
             */ function (qCondition) {
                this._condition = qCondition;
                this.formatCondition();
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @return {?}
         */
        SummaryConditionComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
            };
        /**
         * @return {?}
         */
        SummaryConditionComponent.prototype.formatCondition = /**
         * @return {?}
         */
            function () {
                /** @type {?} */
                var qCondition = this.condition;
                if (qCondition) {
                    this._conditionType = qCondition.control.getControlType();
                    /** @type {?} */
                    var textValueObj = void 0;
                    /** @type {?} */
                    var textOriginalValue = qCondition.value.getOriginalValue();
                    /** @type {?} */
                    var startValue = void 0;
                    /** @type {?} */
                    var endValue = void 0;
                    switch (this._conditionType) {
                        case componentQuerycondition.ControlType.Text:
                            //文本
                            textValueObj = ( /** @type {?} */(qCondition.value));
                            textOriginalValue = textValueObj.value && textValueObj.value.trim();
                            break;
                        case componentQuerycondition.ControlType.SingleNumber:
                            // 数值
                            this.numberOptions = { precision: qCondition.control['precision'], type: 'number' };
                            break;
                        case componentQuerycondition.ControlType.NumberRange:
                            // 数值区间
                            this._isRange = true;
                            this._spliter = '~';
                            this.numberOptions = { precision: qCondition.control['precision'], type: 'number' };
                            startValue = qCondition.value['startValue'] ? qCondition.value['startValue'] : '';
                            endValue = qCondition.value['endValue'] ? qCondition.value['endValue'] : '';
                            textOriginalValue = [startValue, endValue].join(this._spliter);
                            break;
                        case componentQuerycondition.ControlType.SingleDate:
                            //单个日期
                            this.returnFormat = qCondition.control && qCondition.control['returnFormat'] ? qCondition.control['returnFormat'] : "yyyy-MM-dd";
                            this.format = qCondition.control && qCondition.control['format'] ? qCondition.control['format'] : "yyyy-MM-dd";
                            break;
                        case componentQuerycondition.ControlType.DateRange:
                            //日期区间
                            this._isRange = true;
                            this._spliter = '~';
                            this.returnFormat = qCondition.control && qCondition.control['returnFormat'] ? qCondition.control['returnFormat'] : "yyyy-MM-dd";
                            this.format = qCondition.control && qCondition.control['format'] ? qCondition.control['format'] : "yyyy-MM-dd";
                            startValue = qCondition.value['startTime'] ? qCondition.value['startTime'] : '';
                            endValue = qCondition.value['endTime'] ? qCondition.value['endTime'] : '';
                            textOriginalValue = [startValue, endValue].join(this._spliter);
                            break;
                        case componentQuerycondition.ControlType.SingleYear:
                            // 只有年
                            this.returnFormat = qCondition.control && qCondition.control['returnFormat'] ? qCondition.control['returnFormat'] : "yyyy";
                            this.format = qCondition.control && qCondition.control['format'] ? qCondition.control['format'] : "yyyy";
                            break;
                        case componentQuerycondition.ControlType.SingleMonth:
                            // 只有月
                            this.returnFormat = qCondition.control && qCondition.control['returnFormat'] ? qCondition.control['returnFormat'] : "yyyy-MM";
                            this.format = qCondition.control && qCondition.control['format'] ? qCondition.control['format'] : "yyyy-MM";
                            break;
                        case componentQuerycondition.ControlType.MonthRange:
                            // 月范围
                            this._isRange = true;
                            this._spliter = '~';
                            this.returnFormat = qCondition.control && qCondition.control['returnFormat'] ? qCondition.control['returnFormat'] : "yyyy-MM";
                            this.format = qCondition.control && qCondition.control['format'] ? qCondition.control['format'] : "yyyy-MM";
                            startValue = qCondition.value['startTime'] ? qCondition.value['startTime'] : '';
                            endValue = qCondition.value['endTime'] ? qCondition.value['endTime'] : '';
                            break;
                        case componentQuerycondition.ControlType.SingleDateTime:
                            // 时间
                            this.showTime = true;
                            this.returnFormat = qCondition.control['returnFormat'] ? qCondition.control['returnFormat'] : this.returnFormat;
                            this.format = 'yyyy-MM-dd HH:mm:ss';
                            if (qCondition.control) {
                                if (qCondition.control['enableCustomFormat']) {
                                    this.format = qCondition.control['format'] ? qCondition.control['format'] : this.returnFormat;
                                }
                                else {
                                    this.format = qCondition.control && qCondition.control['format'] ? qCondition.control['format'] + ' HH:mm:ss' : this.returnFormat;
                                }
                            }
                            break;
                        case componentQuerycondition.ControlType.DateTimeRange:
                            // 时间区间
                            this.showTime = true;
                            this._isRange = true;
                            this._spliter = '~';
                            this.returnFormat = qCondition.control['returnFormat'] ? qCondition.control['returnFormat'] : this.returnFormat;
                            this.format = 'yyyy-MM-dd HH:mm:ss';
                            if (qCondition.control) {
                                if (qCondition.control['enableCustomFormat']) {
                                    this.format = qCondition.control['format'] ? qCondition.control['format'] : this.returnFormat;
                                }
                                else {
                                    this.format = qCondition.control && qCondition.control['format'] ? qCondition.control['format'] + ' HH:mm:ss' : this.returnFormat;
                                }
                            }
                            startValue = qCondition.value['startTime'] ? qCondition.value['startTime'] : '';
                            endValue = qCondition.value['endTime'] ? qCondition.value['endTime'] : '';
                            break;
                        case componentQuerycondition.ControlType.BoolCheck:
                            // 布尔值-单个值
                            /** @type {?} */
                            var checkValue = (( /** @type {?} */(qCondition.value))).value;
                            textOriginalValue = checkValue.length > 0 ? checkValue['0'] : null;
                            break;
                        case componentQuerycondition.ControlType.DropDownList:
                            // 下拉
                            this._spliter = ',';
                            break;
                        case componentQuerycondition.ControlType.Radio:
                            // 单选组
                            this._spliter = ',';
                            break;
                        case componentQuerycondition.ControlType.InputGroup:
                            // inputgroup
                            textValueObj = ( /** @type {?} */(qCondition.value));
                            textOriginalValue = textValueObj.textValue && textValueObj.textValue.trim();
                            break;
                        case componentQuerycondition.ControlType.SmartHelp:
                            // 帮助
                            textValueObj = ( /** @type {?} */(qCondition.value));
                            textOriginalValue = textValueObj.textValue && textValueObj.textValue.trim();
                            break;
                        default:
                            textOriginalValue = qCondition.value.getOriginalValue();
                    }
                    this.text = this.formatValue(textOriginalValue);
                }
                else {
                    this.text = '';
                }
            };
        /**
         * 处理多语言，待定
         */
        /**
         * 处理多语言，待定
         * @param {?} value
         * @return {?}
         */
        SummaryConditionComponent.prototype.formatLang = /**
         * 处理多语言，待定
         * @param {?} value
         * @return {?}
         */
            function (value) {
                return value && value[this.currentLanguage] ? value[this.currentLanguage] : '';
            };
        /**
         * C货币
         * D十进制
         * F浮点数
         * N数字，带千分位
         * P百分比
         */
        /**
         * C货币
         * D十进制
         * F浮点数
         * N数字，带千分位
         * P百分比
         * @param {?} value
         * @return {?}
         */
        SummaryConditionComponent.prototype.getFormatNumberValue = /**
         * C货币
         * D十进制
         * F浮点数
         * N数字，带千分位
         * P百分比
         * @param {?} value
         * @return {?}
         */
            function (value) {
                if (!this.format && !this.numberOptions) {
                    return value.toString();
                }
                if (this.numberOptions && this.numberOptions.type && this.numberOptions.type == 'number') {
                    if (this.numberOptions.formatter) {
                        return this.numberOptions.formatter(value);
                    }
                    else {
                        if (this.numberOptions.useThousands) {
                            // 设置了千分位
                            if (this.numberOptions.precision != undefined) {
                                this.format = 'n' + this.numberOptions.precision;
                            }
                            else {
                                this.format = 'n';
                            }
                        }
                        else {
                            // 没有设置千分位
                            if (this.numberOptions.precision != undefined) {
                                this.format = 'f' + this.numberOptions.precision;
                            }
                            else {
                                // 没有设置精度，没有设置千分位
                                return value.toString();
                            }
                        }
                    }
                }
                else {
                    return value.toString();
                }
                /** @type {?} */
                var firstLetter = this.currencyToUpperCase(this.format.substring(0, 1));
                /** @type {?} */
                var precision = Number(this.format.substring(1));
                /** @type {?} */
                var config = {};
                /** @type {?} */
                var result;
                if (!/C|D|F|N|P/g.test(firstLetter)) {
                    console.warn("\u4E0D\u652F\u6301format\u4E3A " + this.format + " \u7C7B\u578B\u7684\u6570\u5B57\u683C\u5F0F\u5316");
                    return;
                }
                if (this.thousand) {
                    Object.assign(config, { thousand: this.thousand });
                }
                if (this.decimal) {
                    Object.assign(config, { decimal: this.decimal });
                }
                if (this.expression) {
                    Object.assign(config, { format: this.expression });
                }
                switch (firstLetter) {
                    case 'C':
                        Object.assign(config, { prefix: this.currencySymbol, precision: precision });
                        result = this.numberHelper.formatMoney(value, config);
                        break;
                    case 'D':
                        result = this.toDecimal(value, precision);
                        break;
                    case 'F':
                        Object.assign(config, { prefix: '', thousand: '', precision: precision });
                        result = this.numberHelper.formatMoney(value, config);
                        break;
                    case 'N':
                        Object.assign(config, { prefix: '', precision: precision });
                        result = this.numberHelper.formatMoney(value, config);
                        break;
                    case 'P':
                        result = this.toPercent(value, precision);
                        break;
                }
                return result;
            };
        /**
         * @param value 转换成十进制的数字
         * @param precision 十进制数字的长度
         */
        /**
         * @param {?} value 转换成十进制的数字
         * @param {?} precision 十进制数字的长度
         * @return {?}
         */
        SummaryConditionComponent.prototype.toDecimal = /**
         * @param {?} value 转换成十进制的数字
         * @param {?} precision 十进制数字的长度
         * @return {?}
         */
            function (value, precision) {
                if (value.toString().indexOf('.') > -1) {
                    console.warn('十进制转换仅限整型类型');
                    return;
                }
                return (Array(precision).join(this.filledSymbol) + value).slice(-precision);
            };
        /**
         * @param value 转换成百分数的数字
         * @param decimal 小数点保留几位
         */
        /**
         * @param {?} value 转换成百分数的数字
         * @param {?} precision
         * @return {?}
         */
        SummaryConditionComponent.prototype.toPercent = /**
         * @param {?} value 转换成百分数的数字
         * @param {?} precision
         * @return {?}
         */
            function (value, precision) {
                return Number(value * 100).toFixed(Number(precision)) + '%';
            };
        /**
         * 将货币符号首字母转换成大写
         */
        /**
         * 将货币符号首字母转换成大写
         * @param {?} value
         * @return {?}
         */
        SummaryConditionComponent.prototype.currencyToUpperCase = /**
         * 将货币符号首字母转换成大写
         * @param {?} value
         * @return {?}
         */
            function (value) {
                return value.replace(/[a-z]+/g, ( /**
                 * @param {?} word
                 * @return {?}
                 */function (word) {
                    return word.toUpperCase();
                }));
            };
        /**
         * 处理年，Y=>y, D=>d
         */
        /**
         * 处理年，Y=>y, D=>d
         * @param {?} value
         * @return {?}
         */
        SummaryConditionComponent.prototype.dateToUpperCase = /**
         * 处理年，Y=>y, D=>d
         * @param {?} value
         * @return {?}
         */
            function (value) {
                /** @type {?} */
                var newFormat;
                if (/Y/g.test(value) === true) {
                    newFormat = value.replace(/Y/g, 'y');
                }
                else {
                    newFormat = value;
                }
                if (/D/g.test(newFormat) === true) {
                    newFormat = newFormat.replace(/D/g, 'd');
                }
                return newFormat;
            };
        /**
         * 枚举类型处理
         */
        /**
         * 枚举类型处理
         * @param {?} value
         * @return {?}
         */
        SummaryConditionComponent.prototype.getFormatEnumValue = /**
         * 枚举类型处理
         * @param {?} value
         * @return {?}
         */
            function (value) {
                var _this = this;
                if (value == undefined || value === null || value === '') {
                    return '';
                }
                if (this.dataSource && this.dataSource.length) {
                    // 可能存在多选枚举，作为分隔符  
                    // let curVals = ('' + value).split(',');
                    /** @type {?} */
                    var curVals_1 = ('' + value).split(this._spliter);
                    /** @type {?} */
                    var nameResult = [];
                    var _loop_1 = function (k) {
                        /** @type {?} */
                        var findObj = this_1.dataSource.find(( /**
                         * @param {?} item
                         * @return {?}
                         */function (item) {
                            return item[_this.valueField] == curVals_1[k];
                        }));
                        if (findObj) {
                            nameResult.push(findObj[this_1.textField]);
                        }
                        else {
                            nameResult.push(curVals_1[k]);
                        }
                    };
                    var this_1 = this;
                    for (var k = 0; k < curVals_1.length; k++) {
                        _loop_1(k);
                    }
                    if (nameResult.length > 0) {
                        // return nameResult.join(',');
                        return nameResult.join(this._spliter);
                    }
                    return '';
                }
                else {
                    return value;
                }
            };
        /**
         * boolean值处理
         */
        /**
         * boolean值处理
         * @param {?} value
         * @return {?}
         */
        SummaryConditionComponent.prototype.getFormatCheckBoxValue = /**
         * boolean值处理
         * @param {?} value
         * @return {?}
         */
            function (value) {
                if (value === true) {
                    return this.localeService.getValue('text.yes');
                }
                else if (value === false || value == null || typeof value === 'undefined') {
                    return this.localeService.getValue('text.no');
                }
                else {
                    return value;
                }
            };
        /*
        * 日期格式化
        */
        /*
          * 日期格式化
          */
        /**
         * @param {?} value
         * @return {?}
         */
        SummaryConditionComponent.prototype.dateformat = /*
          * 日期格式化
          */
            /**
             * @param {?} value
             * @return {?}
             */
            function (value) {
                /** @type {?} */
                var str;
                if (!this.format) {
                    this.format = 'YYYY-MM-dd';
                }
                // 当前值是已经格式化后的日期字符串
                if (this.returnFormat && typeof value == 'string') {
                    value = this.getDateFromFormatedString(value, this.returnFormat);
                }
                if (this.format === 'hh:mm:ss' || this.format === 'HH:mm:ss') {
                    // 格式化时间  临时处理
                    str = value;
                }
                else {
                    // 格式化日期
                    str = this.dtHelper.formatTo(value, this.dateToUpperCase(this.format));
                }
                return str;
            };
        /**
         * @private
         * @param {?} dateString
         * @param {?} format
         * @return {?}
         */
        SummaryConditionComponent.prototype.getDateFromFormatedString = /**
         * @private
         * @param {?} dateString
         * @param {?} format
         * @return {?}
         */
            function (dateString, format) {
                /** @type {?} */
                var result = { year: 0, month: 0, day: 0, hour: 0, minite: 0, second: 0 };
                if (dateString) {
                    format.replace(/y{4}|Y{4}|M+|d+|D+|h+|H+|m+|s+/g, ( /**
                     * @param {?} m
                     * @param {?} a
                     * @param {?} b
                     * @param {?} c
                     * @return {?}
                     */function (m, a, b, c) {
                        dateString.substring(a).replace(/\d+/, ( /**
                         * @param {?} d
                         * @return {?}
                         */function (d) {
                            if (d) {
                                c = parseInt(d.substr(0, m.length), 10);
                            }
                        }));
                        if (/y+/i.test(m) && !result.year)
                            result.year = c;
                        if (/M+/.test(m) && !result.month)
                            result.month = c;
                        if (/d+/i.test(m) && !result.day)
                            result.day = c;
                        if (/h+/i.test(m) && !result.hour)
                            result.hour = c;
                        if (/m+/.test(m) && !result.minite)
                            result.minite = c;
                        if (/s+/.test(m) && !result.second)
                            result.second = c;
                    }));
                }
                result.day = result.day ? result.day : 1;
                result.month = result.month ? result.month : 1;
                /** @type {?} */
                var resultDate = new Date(result.year + '/' + result.month + '/' + result.day + ' ' + result.hour + ':' + result.minite + ':' + result.second);
                return resultDate;
            };
        /**
         * @param {?} date
         * @param {?} fmt
         * @return {?}
         */
        SummaryConditionComponent.prototype.function = /**
         * @param {?} date
         * @param {?} fmt
         * @return {?}
         */
            function (date$$1, fmt) {
                /** @type {?} */
                var o = {
                    'M+': date$$1.getMonth() + 1,
                    //月份
                    'd+': date$$1.getDate(),
                    //日
                    'h+': date$$1.getHours(),
                    //小时
                    'm+': date$$1.getMinutes(),
                    //分
                    's+': date$$1.getSeconds(),
                    //秒
                    'q+': Math.floor((date$$1.getMonth() + 3) / 3),
                    //季度
                    'S': date$$1.getMilliseconds() //毫秒
                };
                if (!fmt) {
                    fmt = 'yyyy-MM-dd hh:mm:ss';
                }
                if (/(y+)/.test(fmt)) {
                    fmt = fmt.replace(RegExp.$1, (date$$1.getFullYear() + '').substr(4 - RegExp.$1.length));
                }
                for (var k in o) {
                    if (new RegExp('(' + k + ')').test(fmt)) {
                        fmt = fmt.replace(RegExp.$1, (RegExp.$1.length == 1) ? (o[k]) : (('00' + o[k]).substr(('' + o[k]).length)));
                    }
                }
                return fmt;
            };
        /**
         * 格式化处理
         */
        /**
         * 格式化处理
         * @param {?} value
         * @return {?}
         */
        SummaryConditionComponent.prototype.formatValue = /**
         * 格式化处理
         * @param {?} value
         * @return {?}
         */
            function (value) {
                var _this = this;
                /** @type {?} */
                var str;
                if (this.currentLanguage) {
                    return this.formatLang(value);
                }
                // 标记类型
                if (this._conditionType !== componentQuerycondition.ControlType.BoolCheck && (value == null || typeof value === 'undefined')) {
                    return '';
                }
                switch (this._conditionType) {
                    case componentQuerycondition.ControlType.Text:
                        str = value;
                        break;
                    case componentQuerycondition.ControlType.DateRange:
                    case componentQuerycondition.ControlType.MonthRange:
                    case componentQuerycondition.ControlType.DateTimeRange:
                        /** @type {?} */
                        var dateValues = value.split(this._spliter);
                        /** @type {?} */
                        var dataStr_1 = [];
                        if (dateValues && dateValues.length) {
                            dateValues.forEach(( /**
                             * @param {?} date
                             * @return {?}
                             */function (date$$1) {
                                /** @type {?} */
                                var val = _this.dateformat(date$$1);
                                dataStr_1.push(val);
                            }));
                        }
                        str = dataStr_1.join(this._spliter);
                        break;
                    case componentQuerycondition.ControlType.SingleDate:
                    case componentQuerycondition.ControlType.SingleDateTime:
                    case componentQuerycondition.ControlType.SingleMonth:
                    case componentQuerycondition.ControlType.SingleYear:
                        str = this.dateformat(value);
                        break;
                    case componentQuerycondition.ControlType.SingleNumber:
                        // 数字
                        str = this.getFormatNumberValue(value);
                        break;
                    case componentQuerycondition.ControlType.NumberRange:
                        // 数字 区间     
                        /** @type {?} */
                        var numberValues = value.split(this._spliter);
                        /** @type {?} */
                        var resultStr_1 = [];
                        if (numberValues && numberValues.length) {
                            numberValues.forEach(( /**
                             * @param {?} date
                             * @return {?}
                             */function (date$$1) {
                                /** @type {?} */
                                var val = _this.getFormatNumberValue(date$$1);
                                resultStr_1.push(val);
                            }));
                        }
                        str = resultStr_1.join(this._spliter);
                        break;
                    case componentQuerycondition.ControlType.Radio:
                        // 单选组
                        this.dataSource = (( /** @type {?} */(this.condition.control))).enumValues;
                        str = this.getFormatEnumValue(value);
                        break;
                    case componentQuerycondition.ControlType.DropDownList:
                        // 下拉
                        this.dataSource = (( /** @type {?} */(this.condition.control))).enumValues;
                        str = this.getFormatEnumValue(value);
                        break;
                    case componentQuerycondition.ControlType.BoolCheck:
                        // 布尔
                        //this.dataSource = (this.condition.control as CheckBoxControl).data;
                        str = this.getFormatCheckBoxValue(value);
                        break;
                    default:
                        str = value;
                }
                return str;
            };
        SummaryConditionComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'lib-summary-condition',
                        template: "<span class=\"summary-condition--label\">{{condition.fieldName}}</span>:<span class=\"summary-condition--text\">{{text}}</span>",
                        styles: [""]
                    }] }
        ];
        /** @nocollapse */
        SummaryConditionComponent.ctorParameters = function () {
            return [
                { type: date.DateTimeHelperService },
                { type: number.NumberHelperService },
                { type: core.Injector }
            ];
        };
        SummaryConditionComponent.propDecorators = {
            condition: [{ type: core.Input }],
            filledSymbol: [{ type: core.Input }]
        };
        return SummaryConditionComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * Generated from: lib/summary-list/summary-list.component.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var SummaryListComponent = /** @class */ (function () {
        function SummaryListComponent(ngZone, cd) {
            this.ngZone = ngZone;
            this.cd = cd;
            this.cls = true;
            this.conditions = new Array();
            this.enableTips = false;
            this.ro = null;
            this.widthFlag = 0;
        }
        /**
         * @return {?}
         */
        SummaryListComponent.prototype.ngOnDestroy = /**
         * @return {?}
         */
            function () {
                if (this.ro) {
                    this.ro.unobserve(this.wrapperEl.nativeElement);
                    this.ro = null;
                }
            };
        /**
         * @return {?}
         */
        SummaryListComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.observerElement();
            };
        /**
         * @private
         * @return {?}
         */
        SummaryListComponent.prototype.observerElement = /**
         * @private
         * @return {?}
         */
            function () {
                var _this = this;
                this.ngZone.runOutsideAngular(( /**
                 * @return {?}
                 */function () {
                    _this.ro = new ResizeObserver(( /**
                     * @param {?} entries
                     * @param {?} observer
                     * @return {?}
                     */function (entries, observer) {
                        /** @type {?} */
                        var tempWidth = entries[0].contentRect.width;
                        // 宽度变化超过80开始计算
                        if (Math.abs(tempWidth - _this.widthFlag) > 15) {
                            _this.widthFlag = tempWidth;
                            _this.changeTipsState();
                        }
                    }));
                    _this.ro.observe(_this.wrapperEl.nativeElement);
                }));
            };
        /**
         * @private
         * @return {?}
         */
        SummaryListComponent.prototype.changeTipsState = /**
         * @private
         * @return {?}
         */
            function () {
                /** @type {?} */
                var tEnableTips = this.enableTips;
                if (this.wrapperEl.nativeElement.clientWidth + 2 < this.wrapperEl.nativeElement.scrollWidth) {
                    tEnableTips = true;
                }
                else {
                    tEnableTips = false;
                }
                if (tEnableTips !== this.enableTips) {
                    this.enableTips = tEnableTips;
                    this.cd.markForCheck();
                    this.cd.detectChanges();
                }
            };
        SummaryListComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'lib-summary-list',
                        template: "<div class=\"summary-condition-wrapper\" #wrapper [farrisTooltip]=\"enableTips\" [placement]=\"'bottom'\" [content]=\"tpTemplate\" [tipCls]=\"'summary-list--tips'\" [tipWidth]=\"widthFlag+'px'\">\r\n    <ng-container *ngFor=\"let currentItem of conditions;let i = index;let lastIndex=last;\">\r\n        <lib-summary-condition class=\"summary-condition--item\" [condition]=\"currentItem\"></lib-summary-condition>\r\n        <span class=\"summary-condition--spliter\" [ngClass]=\"{'last-spliter':i==lastIndex}\"></span>\r\n    </ng-container>\r\n</div>\r\n<ng-template #tpTemplate>\r\n    <div class=\"summary-condition--tips\" *ngIf=\"enableTips\">\r\n        <ng-container *ngFor=\"let currentItem of conditions;let i = index;let lastIndex=last;\">\r\n            <lib-summary-condition class=\"summary-condition--item\" [condition]=\"currentItem\"></lib-summary-condition>\r\n            <span class=\"summary-condition--gutter\">;</span>\r\n        </ng-container>\r\n    </div>\r\n</ng-template>",
                        styles: [""]
                    }] }
        ];
        /** @nocollapse */
        SummaryListComponent.ctorParameters = function () {
            return [
                { type: core.NgZone },
                { type: core.ChangeDetectorRef }
            ];
        };
        SummaryListComponent.propDecorators = {
            cls: [{ type: core.HostBinding, args: ['class.summary-list',] }],
            conditions: [{ type: core.Input }],
            enableTips: [{ type: core.Input }],
            wrapperEl: [{ type: core.ViewChild, args: ['wrapper', { read: core.ElementRef },] }]
        };
        return SummaryListComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * Generated from: lib/query-solution.module.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var QuerySolutionModule = /** @class */ (function () {
        function QuerySolutionModule() {
        }
        QuerySolutionModule.decorators = [
            { type: core.NgModule, args: [{
                        imports: [
                            common.CommonModule,
                            forms.FormsModule,
                            uiDialog.FarrisDialogModule,
                            uiLookup.LookupModule,
                            uiMultiSelect.MultiSelectModule,
                            uiFieldGroup.FieldGroupModule,
                            uiInputGroup.InputGroupModule,
                            uiDropdown.FDropdownDirectiveTypeModule,
                            uiNotify.NotifyModule.forRoot(),
                            uiLoading.LoadingModule.forRoot(),
                            componentQuerycondition.QueryConditionModule,
                            http.HttpClientModule,
                            uiLocale.LocaleModule,
                            uiDatagrid.DatagridModule,
                            number.NumberHelperModule,
                            date.DateHelperModule,
                            uiTooltip.FarrisTooltipModule
                        ],
                        declarations: [
                            QuerySolutionComponent,
                            SolutionManangerComponent,
                            SaveAsDialogComponent,
                            SummaryConditionComponent,
                            SummaryListComponent,
                        ],
                        entryComponents: [
                            SolutionManangerComponent,
                            SaveAsDialogComponent
                        ],
                        providers: [componentQuerycondition.SolutionService],
                        exports: [
                            QuerySolutionComponent,
                            SolutionManangerComponent,
                            SaveAsDialogComponent
                        ]
                    },] }
        ];
        return QuerySolutionModule;
    }());

    /**
     * @fileoverview added by tsickle
     * Generated from: public-api.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * Generated from: gsp-cmp-querysolution.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    exports.QuerySolutionModule = QuerySolutionModule;
    exports.QuerySolutionComponent = QuerySolutionComponent;
    exports.ɵe = SaveAsDialogComponent;
    exports.ɵc = SolutionManangerComponent;
    exports.SummaryConditionComponent = SummaryConditionComponent;
    exports.SummaryListComponent = SummaryListComponent;
    exports.QUERYSOLUTION_HANDLER_TOKEN = QUERYSOLUTION_HANDLER_TOKEN;
    exports.SolutionCacheService = SolutionCacheService;
    exports.ɵd = EditService;
    exports.ɵb = FieldConfigService;
    exports.ɵa = HttpService;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=gsp-cmp-querysolution.umd.js.map