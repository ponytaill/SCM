/**
 * @fileoverview added by tsickle
 * Generated from: lib/summary-list/summary-list.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input, ViewChild, ElementRef, NgZone, HostBinding, ChangeDetectorRef } from '@angular/core';
import ResizeObserver from "resize-observer-polyfill";
export class SummaryListComponent {
    /**
     * @param {?} ngZone
     * @param {?} cd
     */
    constructor(ngZone, cd) {
        this.ngZone = ngZone;
        this.cd = cd;
        this.cls = true;
        this.conditions = new Array();
        this.enableTips = false;
        this.ro = null;
        this.widthFlag = 0;
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        if (this.ro) {
            this.ro.unobserve(this.wrapperEl.nativeElement);
            this.ro = null;
        }
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.observerElement();
    }
    /**
     * @private
     * @return {?}
     */
    observerElement() {
        this.ngZone.runOutsideAngular((/**
         * @return {?}
         */
        () => {
            this.ro = new ResizeObserver((/**
             * @param {?} entries
             * @param {?} observer
             * @return {?}
             */
            (entries, observer) => {
                /** @type {?} */
                const tempWidth = entries[0].contentRect.width;
                // 宽度变化超过80开始计算
                if (Math.abs(tempWidth - this.widthFlag) > 15) {
                    this.widthFlag = tempWidth;
                    this.changeTipsState();
                }
            }));
            this.ro.observe(this.wrapperEl.nativeElement);
        }));
    }
    /**
     * @private
     * @return {?}
     */
    changeTipsState() {
        /** @type {?} */
        let tEnableTips = this.enableTips;
        if (this.wrapperEl.nativeElement.clientWidth + 2 < this.wrapperEl.nativeElement.scrollWidth) {
            tEnableTips = true;
        }
        else {
            tEnableTips = false;
        }
        if (tEnableTips !== this.enableTips) {
            this.enableTips = tEnableTips;
            this.cd.markForCheck();
            this.cd.detectChanges();
        }
    }
}
SummaryListComponent.decorators = [
    { type: Component, args: [{
                selector: 'lib-summary-list',
                template: "<div class=\"summary-condition-wrapper\" #wrapper [farrisTooltip]=\"enableTips\" [placement]=\"'bottom'\" [content]=\"tpTemplate\" [tipCls]=\"'summary-list--tips'\" [tipWidth]=\"widthFlag+'px'\">\r\n    <ng-container *ngFor=\"let currentItem of conditions;let i = index;let lastIndex=last;\">\r\n        <lib-summary-condition class=\"summary-condition--item\" [condition]=\"currentItem\"></lib-summary-condition>\r\n        <span class=\"summary-condition--spliter\" [ngClass]=\"{'last-spliter':i==lastIndex}\"></span>\r\n    </ng-container>\r\n</div>\r\n<ng-template #tpTemplate>\r\n    <div class=\"summary-condition--tips\" *ngIf=\"enableTips\">\r\n        <ng-container *ngFor=\"let currentItem of conditions;let i = index;let lastIndex=last;\">\r\n            <lib-summary-condition class=\"summary-condition--item\" [condition]=\"currentItem\"></lib-summary-condition>\r\n            <span class=\"summary-condition--gutter\">;</span>\r\n        </ng-container>\r\n    </div>\r\n</ng-template>",
                styles: [""]
            }] }
];
/** @nocollapse */
SummaryListComponent.ctorParameters = () => [
    { type: NgZone },
    { type: ChangeDetectorRef }
];
SummaryListComponent.propDecorators = {
    cls: [{ type: HostBinding, args: ['class.summary-list',] }],
    conditions: [{ type: Input }],
    enableTips: [{ type: Input }],
    wrapperEl: [{ type: ViewChild, args: ['wrapper', { read: ElementRef },] }]
};
if (false) {
    /** @type {?} */
    SummaryListComponent.prototype.cls;
    /** @type {?} */
    SummaryListComponent.prototype.conditions;
    /** @type {?} */
    SummaryListComponent.prototype.enableTips;
    /** @type {?} */
    SummaryListComponent.prototype.wrapperEl;
    /**
     * @type {?}
     * @private
     */
    SummaryListComponent.prototype.ro;
    /** @type {?} */
    SummaryListComponent.prototype.widthFlag;
    /**
     * @type {?}
     * @private
     */
    SummaryListComponent.prototype.ngZone;
    /**
     * @type {?}
     * @private
     */
    SummaryListComponent.prototype.cd;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3VtbWFyeS1saXN0LmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0Bnc3AtY21wL3F1ZXJ5c29sdXRpb24vIiwic291cmNlcyI6WyJsaWIvc3VtbWFyeS1saXN0L3N1bW1hcnktbGlzdC5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFVLEtBQUssRUFBRyxTQUFTLEVBQUUsVUFBVSxFQUFFLE1BQU0sRUFBYSxXQUFXLEVBQWlCLGlCQUFpQixFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRW5KLE9BQU8sY0FBYyxNQUFNLDBCQUEwQixDQUFDO0FBTXRELE1BQU0sT0FBTyxvQkFBb0I7Ozs7O0lBUS9CLFlBQW9CLE1BQWEsRUFBUyxFQUFxQjtRQUEzQyxXQUFNLEdBQU4sTUFBTSxDQUFPO1FBQVMsT0FBRSxHQUFGLEVBQUUsQ0FBbUI7UUFONUIsUUFBRyxHQUFDLElBQUksQ0FBQztRQUNuQyxlQUFVLEdBQTBCLElBQUksS0FBSyxFQUFrQixDQUFDO1FBQ2hFLGVBQVUsR0FBRyxLQUFLLENBQUM7UUFFcEIsT0FBRSxHQUEwQixJQUFJLENBQUM7UUFDekMsY0FBUyxHQUFHLENBQUMsQ0FBQztJQUdkLENBQUM7Ozs7SUFDRCxXQUFXO1FBQ1QsSUFBSSxJQUFJLENBQUMsRUFBRSxFQUFFO1lBQ1gsSUFBSSxDQUFDLEVBQUUsQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxhQUFhLENBQUMsQ0FBQztZQUNoRCxJQUFJLENBQUMsRUFBRSxHQUFHLElBQUksQ0FBQztTQUNoQjtJQUNILENBQUM7Ozs7SUFFRCxRQUFRO1FBQ04sSUFBSSxDQUFDLGVBQWUsRUFBRSxDQUFDO0lBQ3pCLENBQUM7Ozs7O0lBRU8sZUFBZTtRQUNyQixJQUFJLENBQUMsTUFBTSxDQUFDLGlCQUFpQjs7O1FBQUMsR0FBRyxFQUFFO1lBQ2pDLElBQUksQ0FBQyxFQUFFLEdBQUcsSUFBSSxjQUFjOzs7OztZQUFDLENBQUMsT0FBTyxFQUFFLFFBQVEsRUFBRSxFQUFFOztzQkFDM0MsU0FBUyxHQUFHLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxXQUFXLENBQUMsS0FBSztnQkFDOUMsZUFBZTtnQkFDZixJQUFJLElBQUksQ0FBQyxHQUFHLENBQUMsU0FBUyxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsR0FBRyxFQUFFLEVBQUU7b0JBQzdDLElBQUksQ0FBQyxTQUFTLEdBQUcsU0FBUyxDQUFDO29CQUMzQixJQUFJLENBQUMsZUFBZSxFQUFFLENBQUM7aUJBQ3hCO1lBQ0gsQ0FBQyxFQUFDLENBQUM7WUFDSCxJQUFJLENBQUMsRUFBRSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLGFBQWEsQ0FBQyxDQUFDO1FBQ2hELENBQUMsRUFBQyxDQUFDO0lBQ0wsQ0FBQzs7Ozs7SUFDTyxlQUFlOztZQUNqQixXQUFXLEdBQUMsSUFBSSxDQUFDLFVBQVU7UUFDL0IsSUFBSSxJQUFJLENBQUMsU0FBUyxDQUFDLGFBQWEsQ0FBQyxXQUFXLEdBQUUsQ0FBQyxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsYUFBYSxDQUFDLFdBQVcsRUFBRTtZQUMxRixXQUFXLEdBQUcsSUFBSSxDQUFDO1NBQ3BCO2FBQU07WUFDTCxXQUFXLEdBQUcsS0FBSyxDQUFDO1NBQ3JCO1FBQ0QsSUFBRyxXQUFXLEtBQUcsSUFBSSxDQUFDLFVBQVUsRUFBQztZQUMvQixJQUFJLENBQUMsVUFBVSxHQUFDLFdBQVcsQ0FBQztZQUM1QixJQUFJLENBQUMsRUFBRSxDQUFDLFlBQVksRUFBRSxDQUFDO1lBQ3ZCLElBQUksQ0FBQyxFQUFFLENBQUMsYUFBYSxFQUFFLENBQUM7U0FDekI7SUFDSCxDQUFDOzs7WUFwREYsU0FBUyxTQUFDO2dCQUNULFFBQVEsRUFBRSxrQkFBa0I7Z0JBQzVCLG8vQkFBNEM7O2FBRTdDOzs7O1lBUDBELE1BQU07WUFBeUMsaUJBQWlCOzs7a0JBVXhILFdBQVcsU0FBQyxvQkFBb0I7eUJBQ2hDLEtBQUs7eUJBQ0wsS0FBSzt3QkFDTCxTQUFTLFNBQUMsU0FBUyxFQUFFLEVBQUUsSUFBSSxFQUFFLFVBQVUsRUFBRTs7OztJQUgxQyxtQ0FBNEM7O0lBQzVDLDBDQUF5RTs7SUFDekUsMENBQTRCOztJQUM1Qix5Q0FBa0U7Ozs7O0lBQ2xFLGtDQUF5Qzs7SUFDekMseUNBQWM7Ozs7O0lBQ0Ysc0NBQXFCOzs7OztJQUFDLGtDQUE2QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCwgT25Jbml0LCBJbnB1dCwgIFZpZXdDaGlsZCwgRWxlbWVudFJlZiwgTmdab25lLCBPbkRlc3Ryb3ksIEhvc3RCaW5kaW5nLCBBZnRlclZpZXdJbml0LCBDaGFuZ2VEZXRlY3RvclJlZiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBRdWVyeUNvbmRpdGlvbn0gZnJvbSAnQGZhcnJpcy9jb21wb25lbnQtcXVlcnljb25kaXRpb24nO1xyXG5pbXBvcnQgUmVzaXplT2JzZXJ2ZXIgZnJvbSBcInJlc2l6ZS1vYnNlcnZlci1wb2x5ZmlsbFwiO1xyXG5AQ29tcG9uZW50KHtcclxuICBzZWxlY3RvcjogJ2xpYi1zdW1tYXJ5LWxpc3QnLFxyXG4gIHRlbXBsYXRlVXJsOiAnLi9zdW1tYXJ5LWxpc3QuY29tcG9uZW50Lmh0bWwnLFxyXG4gIHN0eWxlVXJsczogWycuL3N1bW1hcnktbGlzdC5jb21wb25lbnQuY3NzJ11cclxufSlcclxuZXhwb3J0IGNsYXNzIFN1bW1hcnlMaXN0Q29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0LCBPbkRlc3Ryb3kge1xyXG4gICAgXHJcbiAgQEhvc3RCaW5kaW5nKCdjbGFzcy5zdW1tYXJ5LWxpc3QnKSBjbHM9dHJ1ZTtcclxuICBASW5wdXQoKSBjb25kaXRpb25zOiBBcnJheTxRdWVyeUNvbmRpdGlvbj4gPSBuZXcgQXJyYXk8UXVlcnlDb25kaXRpb24+KCk7XHJcbiAgQElucHV0KCkgZW5hYmxlVGlwcyA9IGZhbHNlO1xyXG4gIEBWaWV3Q2hpbGQoJ3dyYXBwZXInLCB7IHJlYWQ6IEVsZW1lbnRSZWYgfSkgd3JhcHBlckVsOiBFbGVtZW50UmVmO1xyXG4gIHByaXZhdGUgcm86IFJlc2l6ZU9ic2VydmVyIHwgbnVsbCA9IG51bGw7XHJcbiAgd2lkdGhGbGFnID0gMDtcclxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIG5nWm9uZTpOZ1pvbmUscHJpdmF0ZSBjZDogQ2hhbmdlRGV0ZWN0b3JSZWYpIHtcclxuXHJcbiAgfVxyXG4gIG5nT25EZXN0cm95KCk6IHZvaWQge1xyXG4gICAgaWYgKHRoaXMucm8pIHtcclxuICAgICAgdGhpcy5yby51bm9ic2VydmUodGhpcy53cmFwcGVyRWwubmF0aXZlRWxlbWVudCk7XHJcbiAgICAgIHRoaXMucm8gPSBudWxsO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgbmdPbkluaXQoKSB7XHJcbiAgICB0aGlzLm9ic2VydmVyRWxlbWVudCgpO1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBvYnNlcnZlckVsZW1lbnQoKSB7XHJcbiAgICB0aGlzLm5nWm9uZS5ydW5PdXRzaWRlQW5ndWxhcigoKSA9PiB7XHJcbiAgICAgIHRoaXMucm8gPSBuZXcgUmVzaXplT2JzZXJ2ZXIoKGVudHJpZXMsIG9ic2VydmVyKSA9PiB7XHJcbiAgICAgICAgY29uc3QgdGVtcFdpZHRoID0gZW50cmllc1swXS5jb250ZW50UmVjdC53aWR0aDtcclxuICAgICAgICAvLyDlrr3luqblj5jljJbotoXov4c4MOW8gOWni+iuoeeul1xyXG4gICAgICAgIGlmIChNYXRoLmFicyh0ZW1wV2lkdGggLSB0aGlzLndpZHRoRmxhZykgPiAxNSkge1xyXG4gICAgICAgICAgdGhpcy53aWR0aEZsYWcgPSB0ZW1wV2lkdGg7XHJcbiAgICAgICAgICB0aGlzLmNoYW5nZVRpcHNTdGF0ZSgpO1xyXG4gICAgICAgIH1cclxuICAgICAgfSk7XHJcbiAgICAgIHRoaXMucm8ub2JzZXJ2ZSh0aGlzLndyYXBwZXJFbC5uYXRpdmVFbGVtZW50KTtcclxuICAgIH0pO1xyXG4gIH1cclxuICBwcml2YXRlIGNoYW5nZVRpcHNTdGF0ZSgpIHtcclxuICAgIGxldCB0RW5hYmxlVGlwcz10aGlzLmVuYWJsZVRpcHM7XHJcbiAgICBpZiAodGhpcy53cmFwcGVyRWwubmF0aXZlRWxlbWVudC5jbGllbnRXaWR0aCArMiA8IHRoaXMud3JhcHBlckVsLm5hdGl2ZUVsZW1lbnQuc2Nyb2xsV2lkdGgpIHtcclxuICAgICAgdEVuYWJsZVRpcHMgPSB0cnVlO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgdEVuYWJsZVRpcHMgPSBmYWxzZTtcclxuICAgIH1cclxuICAgIGlmKHRFbmFibGVUaXBzIT09dGhpcy5lbmFibGVUaXBzKXtcclxuICAgICAgdGhpcy5lbmFibGVUaXBzPXRFbmFibGVUaXBzO1xyXG4gICAgICB0aGlzLmNkLm1hcmtGb3JDaGVjaygpO1xyXG4gICAgICB0aGlzLmNkLmRldGVjdENoYW5nZXMoKTtcclxuICAgIH1cclxuICB9XHJcbn1cclxuIl19