{"version":3,"sources":["ng://@gsp-svc/formdoc-upload/lib/formdoc-upload.service.ts","ng://@gsp-svc/formdoc-upload/lib/formdoc-upload.component.ts","ng://@gsp-svc/formdoc-upload/lib/formdoc-upload.module.ts","ng://@gsp-svc/formdoc-upload/lib/upload/entity/doctype.ts","ng://@gsp-svc/formdoc-upload/lib/upload/entity/gspformdocinfo.ts","ng://@gsp-svc/formdoc-upload/lib/upload/entity/operatingmodes.ts","ng://@gsp-svc/formdoc-upload/lib/upload/entity/gspformremovelistentity.ts","ng://@gsp-svc/formdoc-upload/lib/upload/entity/gspformdocoperateentity.ts","ng://@gsp-svc/formdoc-upload/lib/upload/entity/changeinstancerequest.ts","ng://@gsp-svc/formdoc-upload/lib/upload/upload.service.ts","ng://@gsp-svc/formdoc-upload/lib/upload/entity/uploadfileinfo.ts","ng://@gsp-svc/formdoc-upload/lib/upload/entity/gspformuploadentity.ts","ng://@gsp-svc/formdoc-upload/lib/upload/entity/extensionstoragefileinfo.ts","ng://@gsp-svc/formdoc-upload/lib/upload/file-upload/file-upload.component.ts","ng://@gsp-svc/formdoc-upload/lib/upload/download.service.ts","ng://@gsp-svc/formdoc-upload/lib/upload/upload.module.ts","ng://@gsp-svc/formdoc-upload/lib/uploaddialog/uploaddialog/uploaddialog.component.ts","ng://@gsp-svc/formdoc-upload/lib/uploaddialog.service.ts","ng://@gsp-svc/formdoc-upload/lib/uploaddialog/uploaddialog.module.ts","ng://@gsp-svc/formdoc-upload/lib/upload/entity/uploadlimit.ts","ng://@gsp-svc/formdoc-upload/lib/upload/entity/gspformuploadlistentity.ts"],"names":["FormdocUploadService","Injectable","args","providedIn","FormdocUploadComponent","prototype","ngOnInit","Component","selector","template","FormdocUploadModule","NgModule","declarations","imports","exports","Word","Excel","Powerpoint","Pdf","Txt","Image","Other","GspFormDocInfo","Formal","Temp","GspFormRemoveListEntity","GspFormDocOperateEntity","ChangeInstanceRequest","UploadService","http","this","uploadList","docListInfo","rootId","post","pipe","tap","res","catchError","error","of","commit","metadataIdList","entity","cancel","put","removeList","idList","idListInfo","mode","OperatingModes","delete","getFile","metadataId","url","get","uploadFile","docInfo","getStorageExtensionInfo","changeStorageInstance","storageInfoList","request","fileInfoList","getUploadedFileInfoList","formId","getRootSetting","HttpService","UploadFileInfo","GspFormUploadEntity","ExStorageFileInfo","FileUploadComponent","msgService","uploadService","loadService","injector","files","uploadFileInfoList","errFileList","errTypeList","nullFileList","showType","mouseOn","bufferSize","selectedFileCount","uploadIconAddress","uploadLittleIconAddress","hasSelectedFile","fileAllSelected","uploadProcess","width","fileTotalChunk","requestArray","Array","requestBodyArray","uploadedChunk","uploadedProcess","defaultPropertyName","propertiesNames","queueListStyle","dropListValue","uploadedFileTotal","haveExtensionProperty","uploadedFileInfoList","oldUploadedFileList","sameNameAllowed","fileType","fileCount","oldIdList","exStorageFileList","_this","subscribe","storageExtension","push","id","name","i_1","extensionPropertyNameList","forEach","element","toString","JSON","parse","stringify","length","fileSelected","$event","selectedFiles","document","querySelector","selectedNum","warning","i","selectedFile","this_1","uuid","UUID","find","x","fileName","msg_1","show","initialState","buttons","text","cls","handle","newName","oldName","flag","substring","lastIndexOf","close","splice","indexOf","filter","size","name_1","listToString","name_2","slice","target","value","showErrorMessage","file","errorMessage","fileInfo","type","source","getFileSize","fileSize","picListDisplayName","getPicListDisplayName","queueListDisplayName","getQueueDisplayName","hasUploaded","selectd","isUploading","uploadResult","extensionDropListId","extensionName","chunkTotal","Math","ceil","chunkIndex","uploadFileInfo","uploadInfo","this_2","total","nextSize","min","fileData","reader","FileReader","readAsBinaryString","innerIndex","onload","fileContent","btoa","result","index","exPropertyName","info","Message","Number","parseInt","toFixed","concat","includes","addDocInfo","DocType","selectAllFile","checkoutSelectFile","listDeleteFile","listMultipleDeleteFile","getElementById","checked","metadataList","allBox","selectdFile","docType","reader_1","readAsDataURL","_event","imgUrl","sanitizer","DomSanitizer","bypassSecurityTrustResourceUrl","strList","typeChange","data","exStorageFileInfo","findIndex","upload","loading_1","message","map","getUploadFileInfoList","showByGroup","showByList","mouseOver","mouseOut","MessagerService","LoadingService","Injector","Input","ViewChild","DownloadService","getDownloadUrl","getToken","mergeString","getMultipleDownloadUrl","list","getMultipleDownloadUrlWithName","zipName","endsWith","getHistoryDownloadUrl","version","str","str1","array","floor","str2","str3","randomArray","random","timeStamp","round","Date","getTime","switchStr","UploadModule","CommonModule","ButtonsModule","NotifyModule","MessagerModule","forRoot","LoadingModule","ProgressModule","FormsModule","ComboListModule","entryComponents","providers","Éµa","UploadDialogComponent","modalService","showDialog","dlg","title","height","iconCls","fileUpload","showButtons","content","BsModalService","UploadDialogService","componentFactoryResolver","Promise","resolve","viewerRef","resolveComponentFactory","create","instance","showMaxButton","beforeClose","uploadFileWithLimit","limit","uploadRef","ComponentFactoryResolver","UploadDialogMoudle","FarrisDialogModule","HttpClientModule","UploadLimit","GspFormUploadListEntity"],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class FormdocUploadService {\n\n  constructor() { }\n}\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'lib-formdoc-upload',\n  template: `\n    <p>\n      formdoc-upload works!\n    </p>\n  `,\n  styles: []\n})\nexport class FormdocUploadComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n","import { NgModule } from '@angular/core';\nimport { FormdocUploadComponent } from './formdoc-upload.component';\n\n\n@NgModule({\n  declarations: [FormdocUploadComponent],\n  imports: [\n  ],\n  exports: [FormdocUploadComponent]\n})\nexport class FormdocUploadModule { }\n","export enum DocType{\r\n    Word,\r\n    Excel,\r\n    Powerpoint,\r\n    Pdf,\r\n    Txt,\r\n    Image,\r\n    Other\r\n}","import { GspDocMetaProperty } from './gspdocmetaproperty';\r\n\r\nexport class GspFormDocInfo {\r\n    public metadataId: string;\r\n    public fileName: string;\r\n    public fileContent: string;\r\n    public index: number;\r\n    public total: number;\r\n    public exPropertyName: string;\r\n    public extProperty: GspDocMetaProperty;\r\n}","export enum OperatingModes{\r\n    Formal,\r\n    Temp\r\n}","import { OperatingModes } from \"./operatingmodes\";\r\n\r\nexport class GspFormRemoveListEntity {\r\n    public metadataIdList: string[];\r\n    public mode: OperatingModes;\r\n    public rootId: string;\r\n}","export class GspFormDocOperateEntity {\r\n    public metadataIdList: string[];\r\n    public rootId: string;\r\n}","import { ExStorageFileInfo } from './extensionstoragefileinfo';\r\n\r\nexport class ChangeInstanceRequest {\r\n    public fileInfoList: ExStorageFileInfo[];\r\n    public rootId: string;\r\n}","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { GspFormUploadListEntity } from './entity/gspformuploadlistentity';\nimport { HttpService } from '@ecp-caf/caf-common';\nimport { catchError, tap } from 'rxjs/operators';\nimport { HttpErrorResponse } from '@angular/common/http';\nimport { GspFormRemoveListEntity } from './entity/gspformremovelistentity';\nimport { of } from 'rxjs/observable/of';\nimport { GspFormDocOperateEntity } from './entity/gspformdocoperateentity';\n\nimport { GspFormUploadEntity } from './entity/gspformuploadentity';\nimport { ExStorageFileInfo } from './entity/extensionstoragefileinfo';\nimport { ChangeInstanceRequest } from './entity/changeinstancerequest';\nimport { OperatingModes } from './entity/operatingmodes';\n\n\n\n@Injectable()\nexport class UploadService {\n\n  constructor(private http: HttpService) { }\n\n  uploadList(docListInfo: GspFormUploadListEntity, rootId: string): Observable<any> {\n    let url;\n    docListInfo.rootId = rootId;\n\n    url = \"/api/runtime/dfs/v1.0/formdoc/list\";\n    //url = \"/api/runtime/dfs/v1.0/formdoc/list\";\n\n    return this.http.post(url, docListInfo).pipe(\n      tap(res => { }),\n      catchError((error: HttpErrorResponse) => {\n        return of(error);\n      }));\n  }\n\n\n  commit(metadataIdList: string[], rootId: string): Observable<any> {\n    let url;\n    let entity: GspFormDocOperateEntity = new GspFormDocOperateEntity;\n    entity.metadataIdList = metadataIdList;\n    entity.rootId = rootId;\n    url = \"/api/runtime/dfs/v1.0/formdoc/commit\";\n    //url = \"http://localhost:5000/api/runtime/dfs/v1.0/formdoc/commit\";\n\n    return this.http.post(url, entity).pipe();\n  }\n\n  cancel(metadataIdList: string[], rootId: string): Observable<any> {\n    let url;\n    let entity: GspFormDocOperateEntity = new GspFormDocOperateEntity;\n    entity.metadataIdList = metadataIdList;\n    entity.rootId = rootId;\n    url = \"/api/runtime/dfs/v1.0/formdoc/cancel\";\n    //url = \"http://localhost:5000/api/runtime/dfs/v1.0/formdoc/cancel\";\n    //localStorage.setItem(\"SessionId\",\"huoliang\");\n    return this.http.put(url, entity).pipe();\n  }\n\n  removeList(idList: string[], rootId: string) {\n    let url;\n    //url = \"http://localhost:5000/api/runtime/dfs/v1.0/formdoc/list\";\n    url = \"/api/runtime/dfs/v1.0/formdoc/list\";\n    var idListInfo = new GspFormRemoveListEntity;\n    idListInfo.metadataIdList = idList;\n    idListInfo.mode = OperatingModes.Temp;\n    idListInfo.rootId = rootId;\n    return this.http.delete(url, idListInfo).pipe();\n  }\n\n  getFile(metadataId: string, rootId: string) {\n\n    let url;\n    if (rootId == \"\")\n      url = \"/api/runtime/dfs/v1.0/formdoc/file/\" + metadataId;\n    else\n      url = \"/api/runtime/dfs/v1.0/formdoc/file/\" + metadataId + \"/\" + rootId;\n    return this.http.get(url).pipe(tap(res => { }),\n      catchError((error: HttpErrorResponse) => {\n        return of(error);\n      }));\n\n  }\n\n  uploadFile(docInfo: GspFormUploadEntity): Observable<any> {\n\n    let url = \"/api/runtime/dfs/v1.0/formdoc\";\n    //url = \"/api/runtime/dfs/v1.0/formdoc/list\";\n\n    return this.http.post(url, docInfo).pipe(\n      tap(res => { }),\n      catchError((error: HttpErrorResponse) => {\n        return of(error);\n      }));\n  }\n\n\n  getStorageExtensionInfo(): Observable<any> {\n    let url = \"/api/runtime/dfs/v1.0/storagestrategy/extension\";\n    //url = \"/api/runtime/dfs/v1.0/formdoc/list\";\n\n    return this.http.get(url).pipe(\n      tap(res => { }),\n      catchError((error: HttpErrorResponse) => {\n        return of(error);\n      }));\n  }\n\n  changeStorageInstance(storageInfoList: ExStorageFileInfo[], rootId: string): Observable<any> {\n    let url = \"/api/runtime/dfs/v1.0/formdoc/changeinstance\";\n    let request: ChangeInstanceRequest = new ChangeInstanceRequest;\n    request.fileInfoList = storageInfoList;\n    request.rootId = rootId;\n    return this.http.post(url, request).pipe(\n      tap(res => { }),\n      catchError((error: HttpErrorResponse) => {\n        return of(error);\n      }));\n  }\n\n\n  getUploadedFileInfoList(formId: string, rootId: string): Observable<any> {\n    let url = \"/api/runtime/dfs/v1.0/formdoc/uploadedfile/infolist\" + \"?formid=\" + formId + \"&rootid=\" + rootId;\n    //url = \"/api/runtime/dfs/v1.0/formdoc/list\";\n\n    return this.http.get(url).pipe(\n      tap(res => { }),\n      catchError((error: HttpErrorResponse) => {\n        return of(error);\n      }));\n  }\n\n  getRootSetting(rootId: string): Observable<any> {\n    let url = \"/api/runtime/dfs/v1.0/rootsetting/\" + rootId;\n\n    return this.http.get(url).pipe(\n      tap(res => { }),\n      catchError((error: HttpErrorResponse) => {\n        return of(error);\n      }));\n  }\n\n}\n","export class UploadFileInfo {\r\n\r\n    public metadataId: string;\r\n    public fileName: string;\r\n    public fileSize:string;\r\n\r\n}","import { OperatingModes } from './operatingmodes';\r\nimport { GspFormDocInfo } from './gspformdocinfo';\r\n\r\nexport class GspFormUploadEntity{\r\n    public formId: string;\r\n    public docInfo: GspFormDocInfo;\r\n    public mode: OperatingModes;\r\n    public rootId: string;\r\n\r\n}","export class ExStorageFileInfo {\r\n    public metadataId: string;\r\n    public exPropertyName: string;\r\n}","import { Component, OnInit, Input, ViewChild, TemplateRef, Optional, Injector } from '@angular/core';\nimport { FileInfo } from '../entity/fileinfo';\nimport { DocType } from '../entity/doctype';\nimport { GspFormDocInfo } from '../entity/gspformdocinfo';\nimport { OperatingModes } from '../entity/operatingmodes';\nimport { UploadService } from '../upload.service';\nimport { UploadFileInfo } from '../entity/uploadfileinfo';\nimport { MessagerService } from '@farris/ui-messager';\nimport { map } from 'rxjs/operators';\nimport { Observable, of } from 'rxjs';\nimport { GspFormUploadEntity } from '../entity/gspformuploadentity';\nimport { UUID } from 'angular2-uuid';\nimport { StorageExtension } from '../entity/storageextension';\nimport { ExStorageFileInfo } from '../entity/extensionstoragefileinfo';\nimport { DropListEntity } from '../entity/droplistentity';\nimport { LoadingService } from '@farris/ui-loading';\nimport { DomSanitizer } from '@angular/platform-browser';\nimport { fillProperties } from '@angular/core/src/util/property';\n\n\n@Component({\n  selector: 'app-file-upload',\n  templateUrl: './file-upload.component.html',\n  styleUrls: ['./file-upload.component.css'],\n})\nexport class FileUploadComponent implements OnInit {\n\n  files: FileInfo[] = [];\n  metadataIdList: string[] = [];\n  uploadFileInfoList: UploadFileInfo[] = [];\n  errFileList: string[] = [];\n  errTypeList: string[] = [];\n  nullFileList: string[] = [];\n  showType: number = 0;\n  mouseOn: boolean = false;\n  bufferSize = 1024 * 1024;\n  selectedFiles: any;\n\n  selectedFileCount: number = 0;\n\n  uploadIconAddress = '/platform/runtime/dfs/images/upload.svg';\n  uploadLittleIconAddress = '/platform/runtime/dfs/images/uploadIcon.svg';\n\n  hasSelectedFile: boolean = false;\n\n  fileAllSelected: boolean = false;\n\n  uploadProcess = { width: '0%' };\n\n  fileTotalChunk: { [key: string]: number } = {};\n  //fileUploadState: { [key: string]: boolean } = {};\n  //flag: number = 0;\n  requestArray: Array<Observable<any>> = new Array;\n\n  requestBodyArray: Array<GspFormUploadEntity> = new Array;\n\n  uploadedChunk: { [key: string]: number } = {};\n  uploadedProcess: { [key: string]: number } = {};\n\n  //allSelected: boolean = true;\n  storageExtension: StorageExtension;\n\n  defaultPropertyName: string = \"\";\n  propertiesNames: DropListEntity[] = [];\n\n  queueListStyle = { width: '480px' };\n\n  dropListValue: string = \"\";\n\n  uploadedFileTotal: number = 0;\n\n  haveExtensionProperty: boolean = false;\n\n  uploadedFileInfoList = [];\n  oldUploadedFileList = [];\n  //uploadedNameList = [];\n\n  sameNameAllowed = true;\n\n  constructor(private msgService: MessagerService, private uploadService: UploadService, private loadService: LoadingService, private injector?: Injector) { }\n  @Input() formId: string;\n  @Input() rootId: string;\n  @Input() fileType: string = \"*\";\n  @Input() fileCount: number = 0;\n  @Input() oldIdList: string[] = [];\n\n  //@Output() onCustomEvent: EventEmitter<any> = new EventEmitter();\n\n  @ViewChild('opCell') opCell: TemplateRef<any>;\n\n  ngOnInit() {\n    //if (this.storageService != null) {\n    this.uploadService.getStorageExtensionInfo().subscribe(\n      res => {\n        if (res != null && res.error == null) {\n          this.storageExtension = res;\n          this.defaultPropertyName = this.storageExtension.defaultPropertyName;\n          this.propertiesNames.push({ id: \"0\", name: this.storageExtension.defaultPropertyName });\n          let i = 0;\n          // this.propertiesNames.push(...(this.storageExtension.extensionPropertyNameList));\n          this.storageExtension.extensionPropertyNameList.forEach(element => {\n            this.propertiesNames.push({ id: (++i).toString(), name: element });\n          });\n          this.queueListStyle.width = '380px';\n          this.haveExtensionProperty = true;\n\n        }\n      }\n    )\n\n    this.uploadService.getRootSetting(this.rootId).subscribe(\n      res => {\n        if (res != null && res.error == null) {\n          this.sameNameAllowed = res.sameNameAllowed;\n          if (!this.sameNameAllowed) {\n            this.uploadService.getUploadedFileInfoList(this.formId, this.rootId).subscribe(\n              res => {\n                if (res != null && res.error == null) {\n                  this.uploadedFileInfoList = res;\n                  this.oldUploadedFileList = JSON.parse(JSON.stringify(res));;\n\n                }\n              })\n          }\n        }\n      }\n    )\n    if (this.oldIdList != null && this.oldIdList.length > 0) {\n      this.uploadService.removeList(this.oldIdList, this.rootId).subscribe();\n    }\n  }\n\n\n  fileSelected($event) {\n    this.hasSelectedFile = true;\n    this.selectedFiles = document.querySelector('#file');\n\n    if (this.fileCount > 0) {\n      if (this.selectedFiles.files.length + this.files.length > this.fileCount) {\n        let selectedNum: number = (this.selectedFiles.files.length as number) + this.files.length;\n        this.msgService.warning('Ã¥Â·Â²Ã©ÂÂÃ¦ÂÂ©' + selectedNum + 'Ã¤Â¸ÂªÃ¦ÂÂÃ¤Â»Â¶Ã¯Â¼ÂÃ¨Â¶ÂÃ¨Â¿ÂÃ§Â³Â»Ã§Â»ÂÃ¨Â®Â¾Ã§Â½Â®Ã§ÂÂÃ¦ÂÂ°Ã©ÂÂÃ©ÂÂÃ¥ÂÂ¶' + this.fileCount + 'Ã¤Â¸ÂªÃ¯Â¼ÂÃ¨Â¯Â·Ã©ÂÂÃ¦ÂÂ°Ã©ÂÂÃ¦ÂÂ©Ã¤Â¸ÂÃ¤Â¼Â Ã¦ÂÂÃ¤Â»Â¶Ã£ÂÂ');\n        return;\n      }\n    }\n\n    //this.flag = 0;\n    for (let i = 0; i < this.selectedFiles.files.length; i++) {\n      let selectedFile = this.selectedFiles.files[i];\n      //selectedFile.slice\n      let uuid = UUID.UUID();\n      if (!this.sameNameAllowed) {\n        if (this.uploadedFileInfoList.find(x => x.fileName == selectedFile.name) != null) {\n          // this.uploadedNameList.push(selectedFile.name);\n          // this.msgService.question('Ã¤Â¹ÂÃ¥ÂÂÃ¥Â·Â²Ã¤Â¸ÂÃ¤Â¼Â Ã¨Â¿ÂÃ¥ÂÂÃ¥ÂÂÃ¦ÂÂÃ¤Â»Â¶: ' + selectedFile.name + 'Ã¯Â¼ÂÃ©ÂÂÃ¨Â¦ÂÃ¦ÂÂ¿Ã¦ÂÂ¢Ã¤Â¹ÂÃ¯Â¼Â', () => {\n          //   uuid = this.uploadedFileInfoList.find(x => x.fileName == selectedFile.name).metadataId;\n          //   this.uploadFile(uuid, selectedFile);\n          // })\n          const msg = this.msgService.show('warning', 'Ã¥Â·Â²Ã¤Â¸ÂÃ¤Â¼Â Ã¨Â¿ÂÃ¥ÂÂÃ¥ÂÂÃ¦ÂÂÃ¤Â»Â¶: ' + selectedFile.name, {\n            initialState: {\n              buttons: [\n                {\n                  text: 'Ã©ÂÂÃ¥ÂÂ½Ã¥ÂÂ',\n                  cls: 'btn btn-secondary',\n                  handle: () => {\n                    let oldName: string = selectedFile.name;\n                    let newName\n                    let flag = true;\n                    let i = 1;\n                    while (flag) {\n                      newName = oldName.substring(0, oldName.lastIndexOf('.')) + '(' + i + ')' + oldName.substring(oldName.lastIndexOf('.'));\n                      if (this.uploadedFileInfoList.find(x => x.fileName == newName) != null) {\n                        i++;\n                      }\n                      else\n                        flag = false;\n                    }\n\n                    this.uploadFile(uuid, selectedFile, newName);\n                    msg.close();\n                  }\n                },\n                {\n                  text: 'Ã¦ÂÂ¿Ã¦ÂÂ¢',\n                  cls: 'btn btn-secondary',\n                  handle: () => {\n                    uuid = this.uploadedFileInfoList.find(x => x.fileName == selectedFile.name).metadataId;\n                    this.uploadFile(uuid, selectedFile, selectedFile.name);\n                    this.uploadedFileTotal--;\n                    if (this.oldUploadedFileList.find(x => x.fileName == selectedFile.name)) {\n                      this.uploadedFileTotal++;\n                      this.uploadedFileInfoList.splice(this.uploadedFileInfoList.indexOf(this.uploadedFileInfoList.filter(x => x.fileName == selectedFile.name)[0]), 1);\n                    }\n                    msg.close();\n                  }\n                },\n                {\n                  text: 'Ã¥ÂÂÃ¦Â¶Â',\n                  cls: 'btn btn-secondary',\n                  handle: () => {\n                    msg.close();\n                  }\n                }\n              ]\n            }\n          })\n          continue;\n        }\n      }\n\n      // if (this.files.find(x => x.name == selectedFile.name) != null) {\n      //   this.errFileList.push(selectedFile.name);\n      //   continue;\n      // }\n\n      if (selectedFile.size == 0) {\n        this.nullFileList.push(selectedFile.name);\n        continue;\n      }\n\n      //this.flag += Math.ceil(selectedFile.size / this.bufferSize);\n      //let reader = new FileReader();\n      this.uploadFile(uuid, selectedFile, selectedFile.name);\n\n    }\n    // if (this.uploadedNameList.length > 0) {\n    //   let name: string = this.listToString(this.uploadedNameList);\n    //   this.msgService.warning('Ã¤Â¹ÂÃ¥ÂÂÃ¥Â·Â²Ã¤Â¸ÂÃ¤Â¼Â Ã¨Â¿ÂÃ¥ÂÂÃ¥ÂÂÃ¦ÂÂÃ¤Â»Â¶: ' + name + 'Ã¨Â¯Â·Ã©ÂÂÃ¦ÂÂ°Ã©ÂÂÃ¦ÂÂ©Ã¤Â¸ÂÃ¤Â¼Â Ã¦ÂÂÃ¤Â»Â¶Ã£ÂÂ');\n    //   this.uploadedNameList = [];\n    // }\n\n    if (this.errFileList.length > 0) {\n      let name: string = this.listToString(this.errFileList);\n      this.msgService.warning('Ã¥Â·Â²Ã¤Â¸ÂÃ¤Â¼Â Ã¥ÂÂÃ¥ÂÂÃ¦ÂÂÃ¤Â»Â¶: ' + name + 'Ã¨Â¯Â·Ã©ÂÂÃ¦ÂÂ°Ã©ÂÂÃ¦ÂÂ©Ã¤Â¸ÂÃ¤Â¼Â Ã¦ÂÂÃ¤Â»Â¶Ã£ÂÂ');\n      this.errFileList = [];\n    }\n\n    if (this.nullFileList.length > 0) {\n      let name: string = this.listToString(this.nullFileList);\n      name = name.substring(0, name.length - 1);\n      this.msgService.warning('Ã¦ÂÂÃ¤Â»Â¶:  ' + name + ' Ã¥Â¤Â§Ã¥Â°ÂÃ¤Â¸Âº0Ã¯Â¼ÂÃ¨Â¯Â·Ã©ÂÂÃ¦ÂÂ°Ã©ÂÂÃ¦ÂÂ©Ã¤Â¸ÂÃ¤Â¼Â Ã¦ÂÂÃ¤Â»Â¶Ã£ÂÂ');\n      this.nullFileList = [];\n    }\n    // if (this.errTypeList.length > 0) {\n    //   let type: string = this.listToString(this.errTypeList);\n    //   this.msgService.warning('Ã¤Â¸ÂÃ¦ÂÂ¯Ã¦ÂÂÃ¤Â¸ÂÃ¤Â¼Â Ã§Â±Â»Ã¥ÂÂÃ¤Â¸Âº ' + type + 'Ã§ÂÂÃ¦ÂÂÃ¤Â»Â¶Ã¨Â¯Â·Ã©ÂÂÃ¦ÂÂ°Ã©ÂÂÃ¦ÂÂ©Ã¤Â¸ÂÃ¤Â¼Â Ã¦ÂÂÃ¤Â»Â¶Ã£ÂÂ');\n    //   this.errTypeList = [];\n    // }\n    this.files = this.files.slice();\n    this.fileAllSelected = false;\n    $event.target.value = '';\n  }\n\n  showErrorMessage(file) {\n    this.msgService.error('Ã¤Â¸ÂÃ¤Â¼Â Ã©ÂÂÃ¤Â»Â¶Ã¥Â¤Â±Ã¨Â´Â¥Ã£ÂÂ' + file.errorMessage);\n  }\n\n\n  uploadFile(uuid: string, selectedFile, fileName: string) {\n    let fileInfo: FileInfo;\n    // let uuid = UUID.UUID();\n    //reader.readAsBinaryString(selectedFile);\n    //reader.onload = (e) => {\n    fileInfo = {\n      id: uuid,\n      name: fileName,\n      type: selectedFile.type,\n      source: \"\",\n      size: this.getFileSize(selectedFile.size),\n      fileSize: selectedFile.size,\n      picListDisplayName: this.getPicListDisplayName(fileName),\n      queueListDisplayName: this.getQueueDisplayName(fileName),\n      //content: reader.result.toString(),\n      hasUploaded: false,\n      mouseOn: false,\n      selectd: false,\n      isUploading: true,\n      uploadResult: false,\n      uploadProcess: 0,\n      errorMessage: \"\",\n      extensionDropListId: 0,\n      extensionName: \"\"\n    }\n\n    if (this.storageExtension != null)\n      fileInfo.extensionName = this.defaultPropertyName;\n    let chunkTotal: number = Math.ceil(selectedFile.size / this.bufferSize);\n    let chunkIndex: number = 0;\n\n\n    this.fileTotalChunk[uuid] = chunkTotal;\n\n    let uploadFileInfo = new UploadFileInfo();\n\n    uploadFileInfo.metadataId = uuid;\n    uploadFileInfo.fileName = fileInfo.name;\n    uploadFileInfo.fileSize = fileInfo.size;\n\n\n    while (chunkIndex < chunkTotal) {\n      let uploadInfo = new GspFormUploadEntity;\n      uploadInfo.formId = this.formId;\n      uploadInfo.mode = OperatingModes.Temp;\n      uploadInfo.rootId = this.rootId;\n\n      let docInfo: GspFormDocInfo = new GspFormDocInfo;\n\n      docInfo.fileName = fileName;\n      docInfo.metadataId = uuid;\n      docInfo.total = chunkTotal;\n\n      this.uploadedChunk[docInfo.metadataId] = 0;\n\n      let nextSize = Math.min((chunkIndex + 1) * this.bufferSize, selectedFile.size);\n      let fileData = selectedFile.slice(chunkIndex * this.bufferSize, nextSize);\n      let reader = new FileReader();\n      reader.readAsBinaryString(fileData);\n      let innerIndex = chunkIndex;\n      reader.onload = () => {\n        docInfo.fileContent = btoa(reader.result.toString());\n\n        docInfo.index = innerIndex;\n        //chunkIndex++;\n        if (this.haveExtensionProperty)\n          docInfo.exPropertyName = this.defaultPropertyName;\n        //docInfo.isLast = true;\n        uploadInfo.docInfo = docInfo;\n\n        let info = uploadInfo;\n\n        // this.requestArray.push(this.uploadService.uploadFile(uploadInfo));\n        this.requestBodyArray.push(info);\n\n        this.uploadService.uploadFile(info).subscribe(res => {\n          if (res != null) {\n            this.files[this.files.indexOf(fileInfo)].uploadResult = false;\n            this.files[this.files.indexOf(fileInfo)].isUploading = false;\n            this.files[this.files.indexOf(fileInfo)].errorMessage = res.error.Message;\n          } else {\n            this.uploadedChunk[docInfo.metadataId]++;\n            this.files[this.files.indexOf(fileInfo)].uploadProcess = Number.parseInt((this.uploadedChunk[docInfo.metadataId] / this.fileTotalChunk[docInfo.metadataId] * 100).toFixed(0));\n            if (this.uploadedChunk[docInfo.metadataId] == this.fileTotalChunk[docInfo.metadataId]) {\n              this.files[this.files.indexOf(fileInfo)].uploadResult = true;\n              this.files[this.files.indexOf(fileInfo)].isUploading = false;\n              this.uploadFileInfoList = this.uploadFileInfoList.concat(uploadFileInfo);\n              this.uploadedFileInfoList = this.uploadedFileInfoList.concat(uploadFileInfo);\n              this.uploadedFileTotal++;\n            }\n          }\n        });\n      }\n      //console.log(chunkIndex + 1);\n      chunkIndex = chunkIndex + 1;\n    }\n\n    let type: string = selectedFile.type;\n    if (type.includes(\"image\")) {\n      this.addDocInfo(selectedFile, fileInfo, DocType.Image);\n    }\n    else if (type.includes(\"word\")) {\n      this.addDocInfo(selectedFile, fileInfo, DocType.Word);\n    }\n    else if (type.includes(\"pdf\")) {\n      this.addDocInfo(selectedFile, fileInfo, DocType.Pdf);\n    }\n    else if (type.includes(\"plain\")) {\n      this.addDocInfo(selectedFile, fileInfo, DocType.Txt);\n    }\n    else if (type.includes(\"sheet\") || type.includes(\"excel\")) {\n      this.addDocInfo(selectedFile, fileInfo, DocType.Excel)\n    }\n    else if (type.includes(\"powerpoint\") || type.includes(\"presentation\")) {\n      this.addDocInfo(selectedFile, fileInfo, DocType.Powerpoint);\n    }\n    else {\n      this.addDocInfo(selectedFile, fileInfo, DocType.Other);\n      // let name: string = selectedFile.name;\n      // let errType = name.substring(selectedFile.name.lastIndexOf('.'));\n      // this.errTypeList.push(errType);\n    }\n    let index = -1;\n    this.files.forEach(x => {\n      if (x.name == fileInfo.name) {\n        if (index == -1)\n          index = this.files.indexOf(x);\n      }\n    })\n    if (index != -1 && index != this.files.length - 1) {\n      this.files.splice(index, 1);\n      this.uploadFileInfoList.splice(index, 1);\n      this.uploadedFileInfoList.splice(index, 1);\n      this.uploadedFileTotal--;\n    }\n  }\n\n\n  selectAllFile() {\n\n    if (!this.fileAllSelected) {\n      this.files.forEach(element => {\n        // let obj: any = document.getElementById(element.name);\n        // obj.checked = true;\n        element.selectd = true;\n      });\n      this.fileAllSelected = true;\n      this.selectedFileCount = this.files.length;\n\n    } else {\n      this.files.forEach(element => {\n        // let obj: any = document.getElementById(element.name);\n        // obj.checked = false;\n        element.selectd = false;\n      });\n      this.fileAllSelected = false;\n      this.selectedFileCount = 0;\n    }\n  }\n\n\n  checkoutSelectFile(file: FileInfo) {\n    // let obj: any = document.getElementById(fileName);\n    file.selectd = !file.selectd;\n    if (file.selectd)\n      this.selectedFileCount++;\n    else\n      this.selectedFileCount--;\n    if (this.selectedFileCount == this.files.length) {\n      this.fileAllSelected = true;\n      //this.isFileAllSelected();\n    }\n    else {\n      this.fileAllSelected = false;\n      //this.isFileAllSelected();\n    }\n\n  }\n\n  listDeleteFile(fileInfo: FileInfo) {\n    if (fileInfo.selectd)\n      this.selectedFileCount--;\n    //console.log(fileName);\n    this.files.splice(this.files.indexOf(fileInfo), 1);\n    if (fileInfo.uploadResult) {\n      let idList: string[] = [];\n      idList.push(fileInfo.id);\n      this.uploadService.cancel(idList, this.rootId).subscribe();\n\n      this.uploadFileInfoList.splice(this.uploadFileInfoList.indexOf(this.uploadFileInfoList.filter(x => x.fileName == fileInfo.name)[0]), 1);\n      this.uploadedFileInfoList.splice(this.uploadedFileInfoList.indexOf(this.uploadedFileInfoList.filter(x => x.fileName == fileInfo.name)[0]), 1);\n      this.uploadedFileTotal--;\n    }\n    if (this.selectedFileCount == 0)\n      this.fileAllSelected = false;\n  }\n\n  listMultipleDeleteFile() {\n    let selectedFile: FileInfo[] = [];\n    this.files.forEach(element => {\n      let obj: any = document.getElementById(element.name);\n      if (obj.checked)\n        selectedFile.push(element);\n    })\n    let metadataList: string[] = [];\n    selectedFile.forEach(element => {\n      metadataList.push(element.id);\n      this.files.splice(this.files.indexOf(element), 1);\n      if (element.uploadResult) {\n        // let idList: string[] = [];\n        // idList.push(fileInfo.id);\n        // this.uploadService.cancel(idList, this.rootId).subscribe();\n\n        this.uploadFileInfoList.splice(this.uploadFileInfoList.indexOf(this.uploadFileInfoList.filter(x => x.fileName == element.name)[0]), 1);\n        this.uploadedFileInfoList.splice(this.uploadedFileInfoList.indexOf(this.uploadedFileInfoList.filter(x => x.fileName == element.name)[0]), 1);\n        this.uploadedFileTotal--;\n      }\n    })\n    this.uploadService.cancel(metadataList, this.rootId).subscribe();\n\n    let allBox: any = document.getElementById(\"allCheckBox\");\n    if (allBox != null)\n      allBox.checked = false;\n    this.selectedFileCount = 0;\n    this.fileAllSelected = false;\n  }\n\n\n  getPicListDisplayName(fileName: string) {\n    if (fileName.length <= 10)\n      return fileName;\n    else {\n      let headContent = fileName.substring(0, 2);\n      let tailContent = fileName.substring(fileName.lastIndexOf('.') - 2);\n      return headContent + \"Ã¢ÂÂ¦\" + tailContent;\n    }\n  }\n\n  getQueueDisplayName(fileName: string) {\n    return fileName;\n  }\n\n  addDocInfo(selectdFile, fileInfo: FileInfo, docType: DocType) {\n    switch (docType) {\n      case DocType.Word: {\n        fileInfo.source = \"/platform/runtime/dfs/images/word.png\"\n        this.files.push(fileInfo);\n        break;\n      }\n\n      case DocType.Pdf: {\n        fileInfo.source = \"/platform/runtime/dfs/images/pdf.png\"\n        this.files.push(fileInfo);\n        break;\n      }\n\n      case DocType.Excel: {\n        fileInfo.source = \"/platform/runtime/dfs/images/excel.png\";\n        this.files.push(fileInfo);\n        break;\n      }\n\n      case DocType.Txt: {\n        fileInfo.source = \"/platform/runtime/dfs/images/txt.png\";\n        this.files.push(fileInfo);\n        break;\n      }\n\n      case DocType.Powerpoint: {\n        fileInfo.source = \"/platform/runtime/dfs/images/ppt.png\";\n        this.files.push(fileInfo);\n        break;\n      }\n\n      case DocType.Other: {\n        fileInfo.source = \"/platform/runtime/dfs/images/file.png\";\n        this.files.push(fileInfo);\n        break;\n      }\n\n      case DocType.Image:\n        let reader = new FileReader();\n\n        reader.readAsDataURL(selectdFile);\n        reader.onload = (_event) => {\n          let imgUrl = reader.result;\n          if (this.injector != null) {\n            let sanitizer = this.injector.get(DomSanitizer);\n            fileInfo.source = sanitizer.bypassSecurityTrustResourceUrl(imgUrl);\n          } else\n            fileInfo.source = imgUrl;\n          this.files.push(fileInfo);\n        }\n        break;\n    }\n\n  }\n\n  listToString(strList: string[]) {\n    let name: string = \"\";\n    for (let i = 0; i < strList.length; i++) {\n      name += strList[i] + \",\";\n    }\n    return name;\n  }\n\n\n  exStorageFileList: ExStorageFileInfo[] = [];\n\n  typeChange($event: any, file: FileInfo) {\n    file.extensionName = $event.data.name;\n    let exStorageFileInfo: ExStorageFileInfo = new ExStorageFileInfo;\n    if (file.extensionName == this.storageExtension.defaultPropertyName) {\n      if (this.exStorageFileList.filter(x => x.metadataId == file.id).length > 0)\n        this.exStorageFileList.splice(this.exStorageFileList.findIndex(x => x.metadataId == file.id), 1)\n    } else {\n      if (this.exStorageFileList.filter(x => x.metadataId == file.id).length > 0) {\n        exStorageFileInfo = this.exStorageFileList.filter(x => x.metadataId == file.id)[0];\n        exStorageFileInfo.exPropertyName = file.extensionName;\n      } else {\n        exStorageFileInfo.metadataId = file.id;\n        exStorageFileInfo.exPropertyName = file.extensionName;\n        this.exStorageFileList.push(exStorageFileInfo);\n      }\n    }\n  }\n\n  upload(): Observable<any> {\n    if (this.uploadedFileTotal != this.files.filter(x => x.isUploading || x.uploadResult).length) {\n      // this.notifyService.success(<NotifyOptions>{\n      //   msg: 'Ã¤Â¿ÂÃ¥Â­ÂÃ¦ÂÂÃ¥ÂÂÃ¯Â¼Â', timeout: 3000\n      // });\n      this.msgService.warning('Ã§Â­ÂÃ¤Â¸ÂÃ¤Â¸ÂÃ¯Â¼ÂÃ¦ÂÂÃ¦Â¡Â£Ã¦Â­Â£Ã¥ÂÂ¨Ã¤Â¸ÂÃ¤Â¼Â Ã£ÂÂ');\n      return of(false);\n    }\n    if (this.storageExtension == null)\n      return of(this.uploadFileInfoList);\n    else {\n      if (this.exStorageFileList.length == 0)\n        return of(this.uploadFileInfoList);\n      else {\n        const loading = this.loadService.show({\n          message: 'Ã¦Â­Â£Ã¥ÂÂ¨Ã¥Â°ÂÃ¦ÂÂÃ¤Â»Â¶Ã¤Â¿ÂÃ¥Â­ÂÃ¥ÂÂ°' + this.storageExtension.extensionName\n        });\n        return this.uploadService.changeStorageInstance(this.exStorageFileList, this.rootId).pipe(\n          map(res => {\n            if (res != null)\n              this.msgService.error('Ã¤Â¿ÂÃ¥Â­ÂÃ¥ÂÂ°' + this.storageExtension.extensionName + \"Ã¥Â¤Â±Ã¨Â´Â¥Ã¯Â¼ÂÃ¤Â¸ÂÃ¤Â¼Â Ã¦ÂÂÃ¤Â»Â¶Ã¨ÂÂªÃ¥ÂÂ¨Ã¤Â¿ÂÃ¥Â­ÂÃ¥ÂÂ°\" + this.storageExtension.defaultPropertyName + \"Ã¥Â­ÂÃ¥ÂÂ¨Ã£ÂÂ\" + res.error.Message);\n            loading.close();\n            return this.uploadFileInfoList;\n          }))\n      }\n    }\n  }\n\n  cancel() {\n    if (this.uploadFileInfoList.length == 0)\n      return;\n    this.uploadFileInfoList.forEach(element => {\n      this.metadataIdList.push(element.metadataId);\n    })\n    this.uploadService.cancel(this.metadataIdList, this.rootId).subscribe();\n\n  }\n\n  getUploadFileInfoList() {\n    return this.uploadFileInfoList;\n  }\n\n  delete(file) {\n    this.files.splice(this.files.indexOf(file), 1);\n    if (file.uploadResult)\n      this.uploadedFileTotal--;\n    if (this.exStorageFileList.filter(x => x.metadataId == file.id).length > 0) {\n      this.exStorageFileList.splice(this.exStorageFileList.findIndex(x => x.metadataId == file.id), 1);\n    }\n    // var obj:any = document.querySelector('#file');\n    // obj.files.remove();\n    //obj.value='';\n  }\n\n  getFileSize(size: number) {\n    if (size < 102400)\n      return (size / 1024).toFixed(1) + \"K\";\n    else if (size < 1024 * 1024)\n      return (size / 1024).toFixed(0) + \"K\";\n    else if (size < 100 * 1024 * 1024)\n      return (size / 1024 / 1024).toFixed(1) + \"M\";\n    else if (size < 1024 * 1024 * 1024)\n      return (size / 1024 / 1024).toFixed(0) + \"M\";\n    else\n      return (size / 1024 / 1024 / 1024).toFixed(1) + \"G\";\n  }\n  showByGroup() {\n    this.showType = 0;\n    // this.selectedFileCount = 0;\n  }\n\n  showByList() {\n    this.showType = 1;\n    // this.selectedFileCount = 0;\n    if (this.selectedFileCount != 0 && this.selectedFileCount == this.files.length) {\n      this.fileAllSelected = true;\n    }\n  }\n\n  mouseOver(file) {\n    file.mouseOn = true;\n  }\n  mouseOut(file) {\n    file.mouseOn = false;\n  }\n\n}\n\n\n","import { Injectable } from '@angular/core';\n\n\n@Injectable()\nexport class DownloadService {\n\n  constructor() { }\n\n  getDownloadUrl(metadataId: string, rootId: string) {\n    return \"/api/runtime/dfs/v1.0/doc/filecontent?metadataid=\" + metadataId + \"&rootid=\" + rootId + \"&token=\" + this.getToken(this.mergeString(metadataId, rootId));\n  }\n\n  getMultipleDownloadUrl(metadataIdList: string, rootId: string) {\n    let list: string[] = JSON.parse(metadataIdList);\n    return \"/api/runtime/dfs/v1.0/doc/multiple/download?metadataidlist=\" + metadataIdList + \"&rootid=\" + rootId + \"&token=\" + this.getToken(this.mergeString(list[0], rootId));\n  }\n\n  getMultipleDownloadUrlWithName(metadataIdList: string, rootId: string, zipName: string) {\n    let list: string[] = JSON.parse(metadataIdList);\n    if (zipName == null || zipName == \"\")\n      zipName = 'unifile.zip';\n    if (!zipName.endsWith(\".zip\"))\n      zipName += '.zip';\n    return \"/api/runtime/dfs/v1.0/doc/compress/download?metadataidlist=\" + metadataIdList + \"&rootid=\" + rootId + \"&token=\" + this.getToken(this.mergeString(list[0], rootId)) + \"&zipName=\" + zipName;\n  }\n\n  getHistoryDownloadUrl(metadataId: string, rootId: string, version: string) {\n    //let list:string[]=JSON.parse(metadataIdList);\n    return \"/api/runtime/dfs/v1.0/doc/historycontent?metadataid=\" + metadataId + \"&rootid=\" + rootId + \"&version=\" + version + \"&token=\" + this.getToken(this.mergeString(metadataId, rootId));\n  }\n\n\n\n  private mergeString(str: string, str1: string): string {\n    let min = str.length < str1.length ? str.length : str1.length;\n    let res: string = \"\";\n    let i = 0;\n    for (i = 0; i < min; i++) {\n      res += str.substring(i, i + 1);\n      res += str1.substring(i, i + 1);\n    }\n    res += str.length < str1.length ? str1.substring(i) : str.substring(i);\n    return res;\n  }\n\n  private getToken(str: string): string {\n    let array = [1, 2, 3];\n    if (str.length > 24)\n      str = str.substring(0, 24);\n    let length = Math.floor(str.length / 3);\n    let str1 = str.substring(0, length);\n    let str2 = str.substring(length, 2 * length);\n    let str3 = str.substring(2 * length, 3 * length);\n    let randomArray = [];\n    var random = Math.ceil(Math.random() * 3);\n    randomArray.push(array[random - 1]);\n    array.splice(random - 1, 1);\n    random = Math.ceil(Math.random() * 2);\n    randomArray.push(array[random - 1]);\n    array.splice(random - 1, 1);\n    randomArray.push(array[0]);\n    let timeStamp: string = Math.round(new Date().getTime() / 1000) + \"\";\n\n    return timeStamp.substring(0, 5) + \"times\" + randomArray[0] + \"\" + randomArray[1] + \"\" + randomArray[2] + this.switchStr(str1, str2, str3, randomArray[0]) + this.switchStr(str1, str2, str3, randomArray[1]) + this.switchStr(str1, str2, str3, randomArray[2]) + \"times\" + timeStamp.substring(5);\n  }\n\n  private switchStr(str1: string, str2: string, str3: string, i: number): string {\n    switch (i) {\n      case 1: return str1;\n      case 2: return str2;\n      case 3: return str3;\n    }\n  }\n\n\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FileUploadComponent } from './file-upload/file-upload.component';\nimport { ButtonsModule } from '@progress/kendo-angular-buttons';\nimport { NotifyModule } from '@farris/ui-notify';\nimport { MessagerModule } from '@farris/ui-messager';\nimport { UploadService } from './upload.service';\nimport { LoadingModule } from '@farris/ui-loading';\nimport { ProgressModule } from '@farris/ui-progress'\nimport { FormsModule } from '@angular/forms';\nimport { ComboListModule } from '@farris/ui-combo-list';\nimport { DownloadService } from './download.service';\n\n\n\n@NgModule({\n  declarations: [FileUploadComponent],\n  imports: [\n    CommonModule,\n    ButtonsModule,\n    NotifyModule,\n    MessagerModule.forRoot(),\n    LoadingModule.forRoot(),\n    ProgressModule,\n    FormsModule,\n    ComboListModule\n\n  ],\n  exports: [FileUploadComponent],\n  entryComponents: [FileUploadComponent],\n  providers: [UploadService, DownloadService]\n})\nexport class UploadModule { }\n\nexport const ÃÂµa = UploadModule;\n","import { Component, OnInit, ViewChild, Input } from '@angular/core';\nimport { BsModalRef, BsModalService } from '@farris/ui-modal';\nimport { FileUploadComponent } from '../../upload/file-upload/file-upload.component';\n\n@Component({\n  selector: 'app-uploaddialog',\n  templateUrl: './uploaddialog.component.html',\n  styleUrls: ['./uploaddialog.component.css']\n})\nexport class UploadDialogComponent implements OnInit {\n\n  dlg: BsModalRef;\n\n  metadataIdList:string[]=[];\n\n  @Input() formId:string;\n\n  constructor(private modalService: BsModalService) { }\n\n  @ViewChild(FileUploadComponent) fileUpload: FileUploadComponent;\n\n  ngOnInit() {\n  }\n\n  showDialog() {\n    this.dlg = this.modalService.show(FileUploadComponent, {\n      title: 'Ã©ÂÂÃ¦ÂÂ©Ã¦ÂÂÃ¤Â»Â¶',\n      width: 800, height: 500,\n      buttons: [\n        {\n          text: 'Ã¤Â¸ÂÃ¤Â¼Â ', cls: 'k-button k-button-icontext k-primary', iconCls: \"k-icon k-i-check\", handle: () => {\n            this.fileUpload.upload();\n            this.dlg.close();\n          }\n        },\n        {\n          text: 'Ã¥ÂÂ³Ã©ÂÂ­', cls: 'k-button k-button-icontext', iconCls: \"k-icon k-i-close\", handle: () => {\n            this.fileUpload.cancel();\n            this.dlg.close();\n          }\n        }\n      ],\n\n      showButtons: true,\n\n    });\n    this.dlg.content.formId=this.formId;\n\n  }\n\n}\n","import { Injectable, Injector, ComponentFactoryResolver } from '@angular/core';\r\nimport { FileUploadComponent } from './upload/file-upload/file-upload.component';\r\nimport { BsModalService, BsModalRef } from '@farris/ui-modal';\r\nimport { UploadFileInfo } from './upload/entity/uploadfileinfo';\r\nimport { Observable, of } from 'rxjs';\r\nimport { UploadLimit } from './upload/entity/uploadlimit';\r\n\r\n\r\n@Injectable()\r\nexport class UploadDialogService {\r\n    constructor(private modalService: BsModalService, private componentFactoryResolver: ComponentFactoryResolver, private injector: Injector) { }\r\n\r\n    dlg: BsModalRef;\r\n\r\n    fileInfoList: UploadFileInfo[] = [];\r\n\r\n    showDialog(formId: string, rootId: string) {\r\n        let flag = 0;\r\n        return new Promise(resolve => {\r\n            var viewerFactory = this.componentFactoryResolver.resolveComponentFactory(FileUploadComponent);\r\n            var viewerRef = viewerFactory.create(this.injector);\r\n\r\n            viewerRef.instance.rootId = rootId;\r\n            viewerRef.instance.formId = formId;\r\n\r\n            this.dlg = this.modalService.show(viewerRef, {\r\n                title: 'Ã¤Â¸ÂÃ¤Â¼Â Ã¦ÂÂÃ¤Â»Â¶',\r\n                width: 950, height: 570,\r\n                buttons: [\r\n                    {\r\n                        text: 'Ã¤Â¿ÂÃ¥Â­Â', cls: 'k-button k-button-icontext k-primary', handle: () => {\r\n                            this.dlg.content.upload().subscribe(\r\n                                res => {\r\n                                    if (res) {\r\n                                        resolve(res);\r\n                                        flag = 1;\r\n                                        this.dlg.close();\r\n                                    }\r\n                                }\r\n                            );\r\n                        }\r\n                    },\r\n                    {\r\n                        text: 'Ã¥ÂÂ³Ã©ÂÂ­', cls: 'k-button k-button-icontext', handle: () => {\r\n                            this.dlg.close();\r\n                        }\r\n                    }\r\n                ],\r\n\r\n                showButtons: true,\r\n                showMaxButton: false,\r\n                beforeClose: (): Observable<boolean> => {\r\n                    if (flag == 0)\r\n                        this.dlg.content.cancel();\r\n                    return of(true);\r\n                }\r\n            });\r\n        })\r\n    }\r\n\r\n    uploadFile(formId: string, rootId: string,oldIdList: string[]=[]) { \r\n        return this.uploadFileWithLimit(formId, rootId, null, oldIdList);\r\n    }\r\n\r\n\r\n    uploadFileWithLimit(formId: string, rootId: string, limit: UploadLimit, oldIdList: string[]=[]) {\r\n        let flag = 0;\r\n        return new Promise(resolve => {\r\n            var uploadFactory = this.componentFactoryResolver.resolveComponentFactory(FileUploadComponent);\r\n            var uploadRef = uploadFactory.create(this.injector);\r\n            if (limit != null) {\r\n                uploadRef.instance.fileCount = limit.fileCount;\r\n                if (limit.fileType != null && limit.fileType != \"\")\r\n                    uploadRef.instance.fileType = limit.fileType\r\n            }\r\n\r\n            uploadRef.instance.rootId = rootId;\r\n            uploadRef.instance.formId = formId;\r\n            uploadRef.instance.oldIdList=oldIdList;\r\n\r\n            this.dlg = this.modalService.show(uploadRef, {\r\n                title: 'Ã¤Â¸ÂÃ¤Â¼Â Ã¦ÂÂÃ¤Â»Â¶',\r\n                width: 950, height: 570,\r\n                buttons: [\r\n                    {\r\n\r\n                        text: 'Ã¤Â¿ÂÃ¥Â­Â', cls: 'k-button k-button-icontext k-primary', handle: () => {\r\n                            this.dlg.content.upload().subscribe(\r\n                                res => {\r\n                                    if (res) {\r\n                                        resolve(res);\r\n                                        flag = 1;\r\n                                        this.dlg.close();\r\n                                    }\r\n                                }\r\n                            );\r\n                        }\r\n                    },\r\n                    {\r\n                        text: 'Ã¥ÂÂ³Ã©ÂÂ­', cls: 'k-button k-button-icontext', handle: () => {\r\n                            this.dlg.close();\r\n                        }\r\n                    }\r\n                ],\r\n\r\n                showButtons: true,\r\n                showMaxButton: false,\r\n                beforeClose: (): Observable<boolean> => {\r\n                    if (flag == 0)\r\n                        this.dlg.content.cancel();\r\n                    return of(true);\r\n                }\r\n            });\r\n        })\r\n    }\r\n}","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { FarrisDialogModule } from '@farris/ui-dialog';\nimport { ButtonsModule } from '@progress/kendo-angular-buttons';\nimport { MessagerModule } from '@farris/ui-messager';\nimport { BsModalService } from '@farris/ui-modal';\n\nimport { UploadModule } from '../upload/upload.module';\nimport { UploadDialogComponent } from './uploaddialog/uploaddialog.component';\nimport { HttpService } from '@ecp-caf/caf-common';\nimport { UploadService } from '../upload/upload.service';\nimport { UploadDialogService } from '../uploaddialog.service';\nimport { HttpClientModule } from '@angular/common/http';\nimport { NotifyModule } from '@farris/ui-notify';\nimport { FileUploadComponent } from '../upload/file-upload/file-upload.component';\n\n\n@NgModule({\n  declarations: [UploadDialogComponent],\n  imports: [\n    CommonModule,\n    FarrisDialogModule,\n    MessagerModule.forRoot(),\n    UploadModule,\n    ButtonsModule,\n    NotifyModule.forRoot(),\n    HttpClientModule\n  ],\n  exports: [UploadDialogComponent,FileUploadComponent],\n  entryComponents: [UploadDialogComponent,FileUploadComponent],\n  providers: [BsModalService, HttpService, UploadDialogService, UploadService]\n})\nexport class UploadDialogMoudle { }\n","export class UploadLimit {\r\n    public fileType: string = \"*\";\r\n    public fileCount: number = 0;\r\n}","import { GspFormDocInfo } from './gspformdocinfo';\r\nimport { OperatingModes } from './operatingmodes';\r\n\r\nexport class GspFormUploadListEntity {\r\n    public formId: string;\r\n    public docInfoList: GspFormDocInfo[];\r\n    public mode: OperatingModes;\r\n    public rootId: string;\r\n}"]}