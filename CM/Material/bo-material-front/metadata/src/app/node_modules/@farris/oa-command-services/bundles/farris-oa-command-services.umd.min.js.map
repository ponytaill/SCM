{"version":3,"sources":["ng://@farris/oa-command-services/lib/print-web-page/entity.ts","ng://@farris/oa-command-services/lib/print-web-page/print-web-page.service.ts","ng://@farris/oa-command-services/lib/task-center-bridge/entity.ts","ng://@farris/oa-command-services/lib/task-center-bridge/task-center-bridge.service.ts","ng://@farris/oa-command-services/lib/transit-approval/transit-approval.service.ts","ng://@farris/oa-command-services/lib/oa-command-services-module.ts"],"sourcesContent":["\r\nexport enum templateType {\r\n  card = \"card\"\r\n}","import { Injectable } from \"@angular/core\";\r\nimport { MessagerService } from '@farris/ui-messager';\r\nimport { templateType } from \"./entity\";\r\n@Injectable()\r\nexport class PrintWebPageService {\r\n\r\n  private currentTemplate: templateType;\r\n\r\n  constructor(\r\n\r\n    private msgSer: MessagerService\r\n  ) {\r\n    window.onbeforeprint = () => {\r\n      if (this.currentTemplate == templateType.card) {\r\n        const rootLayout = document.getElementById('root-layout');\r\n        const mainContainer = document.getElementById('main-container');\r\n        if (rootLayout && mainContainer) {\r\n          rootLayout.style.display = 'block';\r\n          rootLayout.style.position = 'relative';\r\n          mainContainer.style.display = 'block';\r\n          rootLayout.parentElement.style.position = 'relative';\r\n          document.title = '';\r\n        } else {\r\n          this.msgSer.error('æªæ¾å°æ¨¡æ¿ä¸­å³é®èç¹ï¼è¯·æ£æ¥å½ä»¤ä¼ åä¸­æ¨¡æ¿ç±»åæ¯å¦æ­£ç¡®ã');\r\n        }\r\n      }\r\n    }\r\n    window.onafterprint = () => {\r\n      if (this.currentTemplate == templateType.card) {\r\n        const rootLayout = document.getElementById('root-layout');\r\n        const mainContainer = document.getElementById('main-container');\r\n        if (rootLayout && mainContainer) {\r\n          mainContainer.setAttribute('style', '');\r\n          rootLayout.setAttribute('style', '');\r\n          rootLayout.parentElement.setAttribute('style', '');\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  public printWebPage(tempType: templateType = templateType.card) {\r\n    this.currentTemplate = tempType;\r\n    if (!window.navigator.userAgent.includes('AppleWebKit/')) {\r\n      this.msgSer.prompt('æç¤º', 'ä¸ºä¿è¯æå°ææï¼æ¨èä½¿ç¨è°·æ­æµè§å¨è¿è¡æå°ãæ¯å¦ç»§ç»­æå°ï¼').subscribe((confirmed) => {\r\n        if (confirmed) {\r\n          window.print()\r\n        }\r\n      });\r\n    } else {\r\n      window.print()\r\n    }\r\n  }\r\n\r\n}","\r\nexport enum WFActionType {\r\n  Resubmit = 'Resubmit'\r\n}\r\n\r\n\r\nexport interface Parameter {\r\n  code: string;\r\n  value: string;\r\n}\r\n\r\nexport interface Action {\r\n  code: string;\r\n  parameters: Parameter[];\r\n}\r\n\r\nexport interface WFTask {\r\n  id: string;\r\n  sourceId: string;\r\n  name: string;\r\n  state: string;\r\n  owner: string;\r\n  priority: number;\r\n  categoryId: string;\r\n  submitter: string;\r\n  startTime: string;\r\n  endTime: string;\r\n  processInstanceId: string;\r\n  refBizId: string;\r\n  submitterName: string;\r\n  bizCategory: string;\r\n  activityType: string;\r\n  activityDefinitionId: string;\r\n  activityInstanceId: string;\r\n  fromType: number;\r\n  tenantId: number;\r\n  readTime: string;\r\n  createdTime: string;\r\n  creator: string;\r\n  lastModifiedTime: string;\r\n  lastModifier: string;\r\n  actions: Action[];\r\n}\r\n\r\n\r\n\r\nexport type WFAction = {\r\n  \"code\": WFActionType,\r\n  \"parameters\": [],\r\n  \"id\": \"\",\r\n  \"name\": \"\",\r\n  \"sortOrder\": 13,\r\n  \"typeId\": \"wf\",\r\n  \"isBatchAction\": false,\r\n  \"isPrimaryAction\": false,\r\n  \"isHyperlinkAction\": false,\r\n  \"isCustomizeAction\": false,\r\n  \"terminal\": \"web,app\",\r\n  \"scope\": \"running\",\r\n  \"groupId\": \"complete\",\r\n  \"nameLanguage\": null,\r\n  \"preEvents\": [],\r\n  \"postEvents\": []\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { FrameContext } from '@farris/devkit';\r\nimport { WFAction, WFActionType, WFTask } from './entity';\r\n\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class TaskCenterBridgeService {\r\n\r\n  constructor() { }\r\n\r\n  public initTaskCenterBridge(customerCmds: {}) {\r\n    const bridgeWin = window.parent;\r\n    let frameContext: FrameContext;\r\n    try {\r\n      frameContext = this['context'].frameContext\r\n    } catch (error) {\r\n      throw new Error('can not find frameContex');\r\n    }\r\n\r\n    let slienceSaveTask;\r\n\r\n    try {\r\n      slienceSaveTask = this['context'].frameContext.viewModel.slienceSave1;\r\n    } catch (error) {\r\n      // ä¸å­å¨éé³ä¿å­å½ä»¤\r\n    }\r\n    if (bridgeWin) {\r\n      bridgeWin['taskCenterBeforeLoad'] = (\r\n        actionObj: {\r\n          \"task\": WFTask,\r\n          \"action\": WFAction\r\n        }\r\n      ) => {\r\n        return new Promise((resolve, reject) => {\r\n          const { action } = actionObj;\r\n          if (frameContext.uiState['UIStateInProcess'] == 'Approving' && frameContext.uiState['formConfigId']) {\r\n            slienceSaveTask.call(this).subscribe(() => {\r\n              resolve({\r\n                result: true\r\n              });\r\n            }, () => {\r\n              window.document.body.click()\r\n              resolve({\r\n                result: false\r\n              });\r\n            })\r\n          } else if (action.code == WFActionType.Resubmit && slienceSaveTask) {\r\n            slienceSaveTask.call(this).subscribe(() => {\r\n              resolve({\r\n                result: true\r\n              });\r\n            })\r\n          } else {\r\n            resolve({\r\n              result: true\r\n            });\r\n          }\r\n        })\r\n      }\r\n    }\r\n  }\r\n}\r\n","import { Injectable, Injector } from '@angular/core';\r\n// import { StateMachineService } from '@farris/command-services';\r\nimport { FrameContext } from '@farris/devkit';\r\nimport { BehaviorSubject } from 'rxjs';\r\n\r\n@Injectable()\r\nexport class TransitApprovalStatus {\r\n    constructor(\r\n        private injetor: Injector\r\n    ) {\r\n        // å ä¸ºæ³¨ä½ç½®çé®é¢ï¼è¿æ ·å­æ¿ä¸å°\r\n        // this.stateMachineSer = this.injetor.get(StateMachineService);\r\n    }\r\n    public switchStatus() {\r\n        const result: BehaviorSubject<string> = new BehaviorSubject('Cancel');\r\n        //  å¤æ­æµç¨ä¼ å  formConfigId\r\n        let frameContext: FrameContext;\r\n        try {\r\n            frameContext = this['context'].frameContext\r\n        } catch (error) {\r\n            throw new Error('can not find frameContex');\r\n        }\r\n        if (frameContext.uiState['UIStateInProcess'] == 'Approving' && frameContext.uiState['formConfigId']) {\r\n            result.next('Edit');\r\n        }\r\n        return result;\r\n    }\r\n}","import { NgModule } from '@angular/core';\r\nimport { PrintWebPageService } from './print-web-page/print-web-page.service';\r\nimport { TaskCenterBridgeService } from './task-center-bridge/task-center-bridge.service';\r\nimport { TransitApprovalStatus } from './transit-approval/transit-approval.service';\r\n\r\n\r\n\r\n@NgModule({\r\n    providers: [\r\n        TaskCenterBridgeService,\r\n        PrintWebPageService,\r\n        TransitApprovalStatus,\r\n    ],\r\n    imports: [\r\n\r\n    ],\r\n    exports: [\r\n\r\n    ],\r\n    entryComponents: [\r\n    ]\r\n})\r\nclass OACommandServicesModule {\r\n    constructor() { }\r\n}\r\n\r\nexport { OACommandServicesModule };\r\n\r\n"],"names":["templateType","PrintWebPageService","prototype","printWebPage","tempType","this","currentTemplate","window","navigator","userAgent","includes","print","msgSer","prompt","subscribe","confirmed","Injectable","MessagerService","_this","onbeforeprint","rootLayout","mainContainer","document","getElementById","style","display","position","parentElement","title","error","onafterprint","setAttribute","WFActionType","TaskCenterBridgeService","initTaskCenterBridge","customerCmds","frameContext","slienceSaveTask","bridgeWin","parent","Error","viewModel","slienceSave1","actionObj","Promise","resolve","reject","action","uiState","call","result","body","click","code","args","providedIn","TransitApprovalStatus","switchStatus","BehaviorSubject","next","Injector","injetor","OACommandServicesModule","NgModule","providers","imports","exports","entryComponents"],"mappings":"+ZACA,IAAYA,EACN,OCFNC,GAwCSA,EAAAC,UAAAC,aAAP,SAAoBC,QAAA,IAAAA,IAAAA,EAAyBJ,GAC3CK,KAAKC,gBAAkBF,EAClBG,OAAOC,UAAUC,UAAUC,SAAS,gBAOvCH,OAAOI,QANPN,KAAKO,OAAOC,OAAO,KAAM,iCAAiCC,UAAS,SAAEC,GAC/DA,GACFR,OAAOI,W,oBA1ChBK,EAAAA,a,yCAFQC,EAAAA,mBAoDThB,GA7CE,SAAAA,EAEUW,GAFV,IAAAM,EAAAb,KAEUA,KAAAO,OAAAA,EAERL,OAAOY,cAAa,WAClB,IACQC,EACAC,EAFJH,EAAKZ,iBAAmBN,IACpBoB,EAAaE,SAASC,eAAe,eACrCF,EAAgBC,SAASC,eAAe,kBAC1CH,GAAcC,GAChBD,EAAWI,MAAMC,QAAU,QAC3BL,EAAWI,MAAME,SAAW,WAC5BL,EAAcG,MAAMC,QAAU,QAC9BL,EAAWO,cAAcH,MAAME,SAAW,WAC1CJ,SAASM,MAAQ,IAEjBV,EAAKN,OAAOiB,MAAM,kCAIxBtB,OAAOuB,aAAY,WACjB,IACQV,EACAC,EAFJH,EAAKZ,iBAAmBN,IACpBoB,EAAaE,SAASC,eAAe,eACrCF,EAAgBC,SAASC,eAAe,kBAC1CH,GAAcC,IAChBA,EAAcU,aAAa,QAAS,IACpCX,EAAWW,aAAa,QAAS,IACjCX,EAAWO,cAAcI,aAAa,QAAS,OCjCzD,IAAYC,EACF,WCFVC,GAYSA,EAAA/B,UAAAgC,qBAAP,SAA4BC,GAA5B,IAEMC,EAOAC,EATNnB,EAAAb,KACQiC,EAAY/B,OAAOgC,OAEzB,IACEH,EAAe/B,KAAc,QAAE+B,aAC/B,MAAOP,GACP,MAAM,IAAIW,MAAM,4BAKlB,IACEH,EAAkBhC,KAAc,QAAE+B,aAAaK,UAAUC,aACzD,MAAOb,IAGLS,IACFA,EAAgC,qBAAC,SAC/BK,GAKA,OAAO,IAAIC,QAAO,SAAEC,EAASC,GACnB,IAAAC,EAAAJ,EAAAI,OACwC,aAA5CX,EAAaY,QAA0B,kBAAoBZ,EAAaY,QAAsB,aAChGX,EAAgBY,KAAK/B,GAAMJ,UAAS,WAClC+B,EAAQ,CACNK,QAAQ,KAEX,WACC3C,OAAOe,SAAS6B,KAAKC,QACrBP,EAAQ,CACNK,QAAQ,MAGHH,EAAOM,MAAQrB,GAAyBK,EACjDA,EAAgBY,KAAK/B,GAAMJ,UAAS,WAClC+B,EAAQ,CACNK,QAAQ,MAIZL,EAAQ,CACNK,QAAQ,S,oBAnDrBlC,EAAAA,WAAUsC,KAAA,CAAC,CACVC,WAAY,W,4IAIZ,SAAAtB,KCVF,IAAAuB,GAaWA,EAAAtD,UAAAuD,aAAP,W,IAGQrB,EAFEc,EAAkC,IAAIQ,EAAAA,gBAAgB,UAG5D,IACItB,EAAe/B,KAAc,QAAE+B,aACjC,MAAOP,GACL,MAAM,IAAIW,MAAM,4BAKpB,MAHgD,aAA5CJ,EAAaY,QAA0B,kBAAoBZ,EAAaY,QAAsB,cAC9FE,EAAOS,KAAK,QAETT,G,oBApBdlC,EAAAA,a,yCALoB4C,EAAAA,YA2BrBJ,GApBI,SAAAA,EACYK,GAAAxD,KAAAwD,QAAAA,ECRhB,IAAAC,G,oBAOCC,EAAAA,SAAQT,KAAA,CAAC,CACNU,UAAW,CACP/B,EACAhC,EACAuD,GAEJS,QAAS,GAGTC,QAAS,GAGTC,gBAAiB,O,sCAKrBL,GADI,SAAAA,K"}