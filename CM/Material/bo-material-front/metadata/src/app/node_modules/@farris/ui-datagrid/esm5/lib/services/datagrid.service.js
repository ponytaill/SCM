/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Utils } from './../utils/utils';
import { EventEmitter } from '@angular/core';
import { Subject, BehaviorSubject } from 'rxjs';
import { filter, map, debounceTime } from 'rxjs/operators';
import { IdService } from '@farris/ui-common';
var DatagridService = /** @class */ (function () {
    function DatagridService() {
        this.scorllSubject = new Subject();
        this.scrollX = new BehaviorSubject(0);
        this.rowHoverSubject = new Subject();
        this.rowSelectSubject = new Subject();
        this.dataSourceChangedSubject = new Subject();
        /**
         * 编辑单元格
         */
        this.editCellSubject = new Subject();
        /**
         * 选中单元格
         */
        this.selectCellSubject = new Subject();
        /**
         * 结束单元编辑
         */
        this.endCellEdit = new Subject();
        this.changeCheckedRows = new Subject();
        /**
         * 结束行编辑
         */
        // private endRowEdit = new BehaviorSubject(true);
        this.scorll$ = this.scorllSubject.asObservable();
        this.scrollX$ = this.scorll$.pipe(filter((/**
         * @param {?} p
         * @return {?}
         */
        function (p) { return p.type === 'psScrollX'; })), map((/**
         * @param {?} t
         * @return {?}
         */
        function (t) { return t.x; })), debounceTime(50));
        this.scrollY$ = this.scorll$.pipe(filter((/**
         * @param {?} p
         * @return {?}
         */
        function (p) { return p.type === 'psScrollY'; })), map((/**
         * @param {?} t
         * @return {?}
         */
        function (t) { return t.x; })), debounceTime(50));
        this.rowHover$ = this.rowHoverSubject.asObservable();
        this.rowClick$ = this.rowSelectSubject.asObservable();
        this.onDataSourceChange = this.dataSourceChangedSubject.asObservable();
        this.cellEdit$ = this.editCellSubject.asObservable();
        this.endCellEdit$ = this.endCellEdit.asObservable();
        this.checkedRowsTotalChanged$ = this.changeCheckedRows.asObservable();
        this.updateEmptyStyle$ = new EventEmitter();
        this.showGridHeader = new EventEmitter();
        // 取消全选
        this.uncheckAll = new EventEmitter();
        // 全部选中
        this.checkAll = new EventEmitter();
        this.columnResized = new EventEmitter();
        this.rowHeightChanged = new EventEmitter();
        this.loadVirtualData = new EventEmitter();
        /**
         * 显示固定列隐影
         */
        this.showFixedShadow = new EventEmitter();
        // public endRowEdit$ = this.endRowEdit.asObservable();
        this.setSelecedRow = new EventEmitter();
        this.setCheckedRows = new EventEmitter();
        this.scrollToCurrentRow = new EventEmitter();
        this.columnsChanged = new EventEmitter();
        this.cellContentWrapChanged = new EventEmitter();
        this.onFilterChanged = new EventEmitter();
        this.clearFilter = new EventEmitter();
        this.filterTextChange = new EventEmitter();
        this.toggleFilterRow = new EventEmitter();
        this.refreshFooterData = new EventEmitter();
        this.disableHeader = new EventEmitter();
        /**
         * 更新全选复选框状态
         */
        this.changeCheckAllStatus = new EventEmitter();
        this.setScrollbarPosition = new EventEmitter();
        this.smartFilterBarExpand = new EventEmitter();
        this.smartFilterDataChange = new EventEmitter();
        this.scrollbarUpdate = new EventEmitter();
        this.footerPositionChanged = new EventEmitter();
        this.styleElement = null;
        this.commonUtils = null;
        this.idService = null;
        // 单元格编辑器创建完成
        this.cellEditorCreated = new EventEmitter();
        // 单元格编辑器销毁
        this.cellEditorDestory = new EventEmitter();
        // 焦点行切换
        this.focusRowChanged = new EventEmitter();
        this.groupBy = (/**
         * @param {?} arr
         * @param {?} fn
         * @return {?}
         */
        function (arr, fn) { return arr.map(typeof fn === 'function' ? fn : (/**
         * @param {?} val
         * @return {?}
         */
        function (val) { return Utils.getValue(fn, val); })).reduce((/**
         * @param {?} acc
         * @param {?} val
         * @param {?} i
         * @return {?}
         */
        function (acc, val, i) {
            acc[val] = (acc[val] || []).concat(arr[i]);
            return acc;
        }), {}); });
    }
    /**
     * @param {?} x
     * @param {?} action
     * @return {?}
     */
    DatagridService.prototype.onScrollMove = /**
     * @param {?} x
     * @param {?} action
     * @return {?}
     */
    function (x, action) {
        this.scorllSubject.next({ x: x, type: action });
    };
    /**
     * @return {?}
     */
    DatagridService.prototype.dataSourceChanged = /**
     * @return {?}
     */
    function () {
        this.dataSourceChangedSubject.next();
    };
    /**
     * @param {?} rowIndex
     * @param {?} rowData
     * @param {?} mouseEnter
     * @return {?}
     */
    DatagridService.prototype.onRowHover = /**
     * @param {?} rowIndex
     * @param {?} rowData
     * @param {?} mouseEnter
     * @return {?}
     */
    function (rowIndex, rowData, mouseEnter) {
        this.rowHoverSubject.next({ index: rowIndex, data: rowData, mouseenter: mouseEnter });
    };
    /**
     * @param {?} rowIndex
     * @param {?} rowData
     * @return {?}
     */
    DatagridService.prototype.onRowClick = /**
     * @param {?} rowIndex
     * @param {?} rowData
     * @return {?}
     */
    function (rowIndex, rowData) {
        this.rowSelectSubject.next({ index: rowIndex, data: rowData });
    };
    /**
     * @param {?} tdElement
     * @return {?}
     */
    DatagridService.prototype.onCellEdit = /**
     * @param {?} tdElement
     * @return {?}
     */
    function (tdElement) {
        this.editCellSubject.next(tdElement);
    };
    /**
     * @param {?} cell
     * @return {?}
     */
    DatagridService.prototype.onEndCellEdit = /**
     * @param {?} cell
     * @return {?}
     */
    function (cell) {
        this.endCellEdit.next(cell);
    };
    /**
     * @param {?} cell
     * @return {?}
     */
    DatagridService.prototype.onSelectCell = /**
     * @param {?} cell
     * @return {?}
     */
    function (cell) {
        this.selectCellSubject.next(cell);
    };
    /**
     * @return {?}
     */
    DatagridService.prototype.onCheckedRowsCountChange = /**
     * @return {?}
     */
    function () {
        this.changeCheckedRows.next();
    };
    /**
     * @param {?} rowHeight
     * @return {?}
     */
    DatagridService.prototype.onRowHeightChange = /**
     * @param {?} rowHeight
     * @return {?}
     */
    function (rowHeight) {
        this.rowHeightChanged.emit(rowHeight);
    };
    /**
     * @param {?} data
     * @return {?}
     */
    DatagridService.prototype.onLoadVirtualData = /**
     * @param {?} data
     * @return {?}
     */
    function (data) {
        this.loadVirtualData.emit({ data: data });
    };
    /**
     * @return {?}
     */
    DatagridService.prototype.onClearFilter = /**
     * @return {?}
     */
    function () {
        this.clearFilter.emit();
        this.filterTextChange.emit('');
    };
    /**
     * @param {?} txt
     * @return {?}
     */
    DatagridService.prototype.onFilterTextChange = /**
     * @param {?} txt
     * @return {?}
     */
    function (txt) {
        this.filterTextChange.emit(txt);
    };
    /**
     * @return {?}
     */
    DatagridService.prototype.restoreScrollbarPosition = /**
     * @return {?}
     */
    function () {
        this.setScrollbarPosition.emit();
    };
    /**
     * @return {?}
     */
    DatagridService.prototype.updateEmptyStyle = /**
     * @return {?}
     */
    function () {
        this.updateEmptyStyle$.emit();
    };
    /**
     * @param {?} data
     * @param {?} mergeFields
     * @return {?}
     */
    DatagridService.prototype.getMergeCellInfo = /**
     * @param {?} data
     * @param {?} mergeFields
     * @return {?}
     */
    function (data, mergeFields) {
        /** @type {?} */
        var result = {};
        /** @type {?} */
        var firstVal = null;
        /** @type {?} */
        var currVal;
        mergeFields.forEach((/**
         * @param {?} f
         * @param {?} i
         * @return {?}
         */
        function (f, i) {
            if (i === 0) {
                data.forEach((/**
                 * @param {?} d
                 * @param {?} j
                 * @return {?}
                 */
                function (d, j) {
                    var _a;
                    /** @type {?} */
                    var item = (_a = {}, _a[f] = { show: true, rowspan: 1 }, _a);
                    if (!result[j]) {
                        result[j] = item;
                    }
                    else {
                        if (!result[j][f]) {
                            result[j] = Object.assign(result[j], item);
                        }
                    }
                    /** @type {?} */
                    var _item = result[j];
                    currVal = d[f];
                    if (firstVal === null || firstVal !== currVal) {
                        firstVal = currVal;
                        _item[f].show = true;
                        _item[f].startIndex = j;
                    }
                    else {
                        /** @type {?} */
                        var strIndex = result[j - 1][f].startIndex;
                        _item[f].startIndex = strIndex;
                        _item[f].show = false;
                        result[strIndex][f].rowspan++;
                    }
                }));
            }
        }));
        return result;
    };
    /**
     * @param {?} data
     * @param {?} field
     * @return {?}
     */
    DatagridService.prototype.getMergeCellInfo0 = /**
     * @param {?} data
     * @param {?} field
     * @return {?}
     */
    function (data, field) {
        /** @type {?} */
        var result = {};
        /** @type {?} */
        var firstVal;
        /** @type {?} */
        var currVal;
        data.forEach((/**
         * @param {?} d
         * @param {?} j
         * @return {?}
         */
        function (d, j) {
            var _a;
            /** @type {?} */
            var item = (_a = {}, _a[field] = { show: true, rowspan: 1, value: '' }, _a);
            if (!result[j]) {
                result[j] = item;
            }
            /** @type {?} */
            var _item = result[j];
            currVal = Utils.getValue(field, d);
            _item[field].value = currVal;
            if (firstVal === undefined || firstVal !== currVal) {
                firstVal = currVal;
                _item[field].show = true;
                _item[field].startIndex = j;
            }
            else {
                /** @type {?} */
                var strIndex = result[j - 1][field].startIndex;
                _item[field].startIndex = strIndex;
                _item[field].show = false;
                result[strIndex][field].rowspan++;
            }
        }));
        return result;
    };
    /**
     * @param {?} data
     * @param {?} mergeFields
     * @return {?}
     */
    DatagridService.prototype.getMergeCellInfo2 = /**
     * @param {?} data
     * @param {?} mergeFields
     * @return {?}
     */
    function (data, mergeFields) {
        /** @type {?} */
        var result = {};
        /** @type {?} */
        var firstVal = null;
        result = this.getMergeCellInfo0(data, mergeFields.splice(0, 1)[0]);
        /** @type {?} */
        var groupData = this.groupBy(data, mergeFields[0]);
        /** @type {?} */
        var groupKeys = Object.keys(groupData);
        /** @type {?} */
        var startRowIndex = 0;
        mergeFields.forEach((/**
         * @param {?} f
         * @param {?} i
         * @return {?}
         */
        function (f, i) {
            groupKeys.forEach((/**
             * @param {?} k
             * @param {?} j
             * @return {?}
             */
            function (k, j) {
                /** @type {?} */
                var currVal;
                groupData[k].forEach((/**
                 * @param {?} d
                 * @param {?} n
                 * @return {?}
                 */
                function (d, n) {
                    var _a;
                    if (result[startRowIndex] && !result[startRowIndex][f]) {
                        result[startRowIndex] = Object.assign(result[startRowIndex], (_a = {}, _a[f] = { show: true, rowspan: 1, value: '' }, _a));
                    }
                    /** @type {?} */
                    var _item = result[startRowIndex];
                    currVal = Utils.getValue(f, d);
                    _item[f].value = currVal;
                    if (firstVal === null || firstVal !== currVal) {
                        firstVal = currVal;
                        _item[f].show = true;
                        _item[f].startIndex = startRowIndex;
                    }
                    else {
                        /** @type {?} */
                        var strIndex = result[startRowIndex - 1][f].startIndex;
                        _item[f].startIndex = strIndex;
                        _item[f].show = false;
                        result[strIndex][f].rowspan++;
                    }
                    startRowIndex++;
                }));
            }));
        }));
        return result;
    };
    /**
     * @param {?} data
     * @param {?} mergeFields
     * @return {?}
     */
    DatagridService.prototype.getMergeCellInfo3 = /**
     * @param {?} data
     * @param {?} mergeFields
     * @return {?}
     */
    function (data, mergeFields) {
        /** @type {?} */
        var result = {};
        /** @type {?} */
        var firstField = mergeFields.splice(0, 1)[0];
        result = this.getMergeCellInfo0(data, firstField);
        /** @type {?} */
        var prevGroupField = firstField;
        // const groupData = this.groupBy(data, firstField);
        // const groupKeys = Object.keys(groupData);
        mergeFields.forEach((/**
         * @param {?} f
         * @param {?} i
         * @return {?}
         */
        function (f, i) {
            /** @type {?} */
            var startRowIndex = 0;
            /** @type {?} */
            var firstVal;
            /** @type {?} */
            var currVal;
            if (i > 0) {
                prevGroupField = mergeFields[i - 1];
            }
            data.forEach((/**
             * @param {?} d
             * @param {?} n
             * @return {?}
             */
            function (d, n) {
                var _a;
                if (result[startRowIndex] && !result[startRowIndex][f]) {
                    result[startRowIndex] = Object.assign(result[startRowIndex], (_a = {}, _a[f] = { show: true, rowspan: 1, value: '' }, _a));
                }
                /** @type {?} */
                var _item = result[startRowIndex];
                currVal = Utils.getValue(f, d);
                _item[f].value = currVal;
                if (startRowIndex > 0) {
                    /** @type {?} */
                    var prevItem_1 = result[startRowIndex - 1];
                    /** @type {?} */
                    var _c = Object.keys(_item).map((/**
                     * @param {?} c
                     * @return {?}
                     */
                    function (c) { return '' + _item[c].value; })).join(',');
                    /** @type {?} */
                    var _p = Object.keys(prevItem_1).map((/**
                     * @param {?} p
                     * @return {?}
                     */
                    function (p) { return '' + prevItem_1[p].value; })).join(',');
                    if (_c !== _p) {
                        firstVal = undefined;
                    }
                }
                if ((firstVal === undefined || firstVal !== currVal)) {
                    firstVal = currVal;
                    _item[f].show = true;
                    _item[f].startIndex = startRowIndex;
                }
                else {
                    /** @type {?} */
                    var startIndex = result[startRowIndex - 1][f].startIndex;
                    _item[f].startIndex = startIndex;
                    _item[f].show = false;
                    result[startIndex][f].rowspan++;
                }
                if (data.length - 1 > startRowIndex) {
                    startRowIndex++;
                }
            }));
        }));
        return result;
    };
    /**
     * @param {?} rowIndex
     * @param {?} field
     * @param {?} mergeCellInfo
     * @return {?}
     */
    DatagridService.prototype.getMergeInfo = /**
     * @param {?} rowIndex
     * @param {?} field
     * @param {?} mergeCellInfo
     * @return {?}
     */
    function (rowIndex, field, mergeCellInfo) {
        if (field && mergeCellInfo && mergeCellInfo[rowIndex] && mergeCellInfo[rowIndex][field]) {
            return mergeCellInfo[rowIndex][field];
        }
        return null;
    };
    /**
     * @return {?}
     */
    DatagridService.prototype.removeStyleSheet = /**
     * @return {?}
     */
    function () {
        if (this.styleElement) {
            this.styleElement.remove();
            this.styleElement = null;
        }
    };
    /**
     * @param {?} styleSheetId
     * @return {?}
     */
    DatagridService.prototype.createStyleElement = /**
     * @param {?} styleSheetId
     * @return {?}
     */
    function (styleSheetId) {
        this.styleElement = this._createStyleSheet(styleSheetId);
    };
    /**
     * @param {?} rules
     * @return {?}
     */
    DatagridService.prototype.appendCssRules = /**
     * @param {?} rules
     * @return {?}
     */
    function (rules) {
        if (this.styleElement) {
            this._appendCssRules(rules, this.styleElement.sheet);
        }
    };
    /**
     * @param {?} ruleName
     * @return {?}
     */
    DatagridService.prototype.removeCssRule = /**
     * @param {?} ruleName
     * @return {?}
     */
    function (ruleName) {
        var _this = this;
        if (this.styleElement) {
            if (typeof ruleName === 'string') {
                this._removeCssRule(ruleName, this.styleElement.sheet);
            }
            else {
                if (Array.isArray(ruleName)) {
                    ruleName.forEach((/**
                     * @param {?} n
                     * @return {?}
                     */
                    function (n) {
                        _this._removeCssRule(n, _this.styleElement.sheet);
                    }));
                }
            }
        }
    };
    /**
     * @private
     * @param {?} styleSheetId
     * @return {?}
     */
    DatagridService.prototype._createStyleSheet = /**
     * @private
     * @param {?} styleSheetId
     * @return {?}
     */
    function (styleSheetId) {
        /** @type {?} */
        var htmlHead = document.querySelector('head');
        /** @type {?} */
        var styleEleId = styleSheetId;
        /** @type {?} */
        var styleElement = null;
        if (document.querySelector('#' + styleEleId)) {
            styleElement = document.querySelector('#' + styleEleId);
            styleElement.innerText = '';
        }
        else {
            styleElement = document.createElement('style');
            styleElement.id = styleEleId;
            styleElement.type = 'text/css';
            // styleElement.sheet = new CSSStyleSheet();
            htmlHead.appendChild(styleElement);
        }
        return styleElement;
    };
    /**
     * @private
     * @param {?} rules
     * @param {?} styleSheet
     * @return {?}
     */
    DatagridService.prototype._appendCssRules = /**
     * @private
     * @param {?} rules
     * @param {?} styleSheet
     * @return {?}
     */
    function (rules, styleSheet) {
        var e_1, _a;
        try {
            for (var rules_1 = tslib_1.__values(rules), rules_1_1 = rules_1.next(); !rules_1_1.done; rules_1_1 = rules_1.next()) {
                var rule = rules_1_1.value;
                /** @type {?} */
                var ruleName = rule.slice(0, rule.indexOf('{')).trim();
                /** @type {?} */
                var removedCssRule = this._removeCssRule(ruleName, styleSheet);
                if (styleSheet.addRule) {
                    /** @type {?} */
                    var cssText = '';
                    if (removedCssRule) {
                        cssText += removedCssRule.cssText.slice(removedCssRule.cssText.indexOf('{') + 1, removedCssRule.cssText.indexOf('}'));
                    }
                    cssText += rule.slice(rule.indexOf('{') + 1, rule.indexOf('}')).replace(/"/g, '').replace(/,/g, ';') + ';';
                    styleSheet.addRule(ruleName, cssText, 0);
                }
                else {
                    styleSheet.insertRule(rule, 0);
                }
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (rules_1_1 && !rules_1_1.done && (_a = rules_1.return)) _a.call(rules_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
    };
    /**
     * @private
     * @param {?} ruleName
     * @param {?} styleSheet
     * @return {?}
     */
    DatagridService.prototype._removeCssRule = /**
     * @private
     * @param {?} ruleName
     * @param {?} styleSheet
     * @return {?}
     */
    function (ruleName, styleSheet) {
        if (!styleSheet) {
            return;
        }
        /** @type {?} */
        var cssRules = (/** @type {?} */ ((styleSheet.cssRules || styleSheet.rules)));
        /** @type {?} */
        var ii = 0;
        /** @type {?} */
        var cssRule = false;
        do {
            cssRule = cssRules[ii];
            if (cssRule) {
                if (cssRule.selectorText.toLowerCase() == ruleName.toLowerCase()) {
                    if (styleSheet.cssRules) {
                        styleSheet.deleteRule(ii);
                    }
                    else {
                        styleSheet.removeRule(ii);
                    }
                    return cssRule;
                }
            }
            ii++;
        } while (cssRule);
    };
    /**
     * @param {?} gridID
     * @return {?}
     */
    DatagridService.prototype.createConfigKey = /**
     * @param {?} gridID
     * @return {?}
     */
    function (gridID) {
        var host = location.host, hash = location.hash, href = location.href, pathname = location.pathname;
        /** @type {?} */
        var formCode = '';
        /** @type {?} */
        var menuId = '';
        if (hash) {
            /** @type {?} */
            var _searchArr = hash.split('?');
            formCode = _searchArr[0];
            /** @type {?} */
            var searchObj_1 = {};
            if (_searchArr[1]) {
                _searchArr[1].split('&').map((/**
                 * @param {?} n
                 * @return {?}
                 */
                function (n) {
                    searchObj_1[n.split('=')[0]] = n.split('=')[1];
                }));
            }
            /** @type {?} */
            var catchFuncIdKEY = "" + pathname;
            if (searchObj_1 && Object.keys(searchObj_1).length) {
                menuId = searchObj_1.funcId || '';
                if (menuId) {
                    localStorage.setItem(catchFuncIdKEY, menuId);
                }
            }
            if (!menuId) {
                menuId = localStorage.getItem(catchFuncIdKEY);
            }
        }
        /** @type {?} */
        var key = formCode + '_' + menuId + '_' + gridID;
        if (!this.idService) {
            this.idService = new IdService();
        }
        return this.idService.encrypt(key);
    };
    /**
     * @param {?} styler
     * @param {?} args
     * @return {?}
     */
    DatagridService.prototype.getCustomStyle = /**
     * @param {?} styler
     * @param {?} args
     * @return {?}
     */
    function (styler, args) {
        if (typeof styler === 'object') {
            return styler;
        }
        else {
            if (typeof styler === 'function') {
                /** @type {?} */
                var p = args || [];
                return styler.apply(void 0, tslib_1.__spread(p));
            }
        }
    };
    /**
     * @param {?} nextTr
     * @param {?} dir
     * @return {?}
     */
    DatagridService.prototype.findNextTr = /**
     * @param {?} nextTr
     * @param {?} dir
     * @return {?}
     */
    function (nextTr, dir) {
        /** @type {?} */
        var getNextElement = (/**
         * @param {?} target
         * @return {?}
         */
        function (target) {
            if (target && target.className.indexOf('f-datagrid-disable-row') == -1) {
                return target;
            }
            return false;
        });
        /** @type {?} */
        var m = dir === 'down' ? 'nextElementSibling' : 'previousElementSibling';
        /** @type {?} */
        var getEle = (/**
         * @param {?} t
         * @return {?}
         */
        function (t) {
            /** @type {?} */
            var n = null;
            /** @type {?} */
            var next = true;
            while (next) {
                n = getNextElement(t);
                if (n) {
                    next = false;
                }
                else {
                    if (t && t[m]) {
                        n = getNextElement(t[m]);
                        if (n) {
                            break;
                        }
                    }
                    else {
                        next = false;
                    }
                }
            }
            return n;
        });
        return getEle(nextTr);
    };
    return DatagridService;
}());
export { DatagridService };
if (false) {
    /**
     * @type {?}
     * @private
     */
    DatagridService.prototype.scorllSubject;
    /**
     * @type {?}
     * @private
     */
    DatagridService.prototype.scrollX;
    /**
     * @type {?}
     * @private
     */
    DatagridService.prototype.rowHoverSubject;
    /**
     * @type {?}
     * @private
     */
    DatagridService.prototype.rowSelectSubject;
    /**
     * @type {?}
     * @private
     */
    DatagridService.prototype.dataSourceChangedSubject;
    /**
     * 编辑单元格
     * @type {?}
     * @private
     */
    DatagridService.prototype.editCellSubject;
    /**
     * 选中单元格
     * @type {?}
     * @private
     */
    DatagridService.prototype.selectCellSubject;
    /**
     * 结束单元编辑
     * @type {?}
     * @private
     */
    DatagridService.prototype.endCellEdit;
    /**
     * @type {?}
     * @private
     */
    DatagridService.prototype.changeCheckedRows;
    /**
     * 结束行编辑
     * @type {?}
     */
    DatagridService.prototype.scorll$;
    /** @type {?} */
    DatagridService.prototype.scrollX$;
    /** @type {?} */
    DatagridService.prototype.scrollY$;
    /** @type {?} */
    DatagridService.prototype.rowHover$;
    /** @type {?} */
    DatagridService.prototype.rowClick$;
    /** @type {?} */
    DatagridService.prototype.onDataSourceChange;
    /** @type {?} */
    DatagridService.prototype.cellEdit$;
    /** @type {?} */
    DatagridService.prototype.endCellEdit$;
    /** @type {?} */
    DatagridService.prototype.checkedRowsTotalChanged$;
    /** @type {?} */
    DatagridService.prototype.updateEmptyStyle$;
    /** @type {?} */
    DatagridService.prototype.showGridHeader;
    /** @type {?} */
    DatagridService.prototype.uncheckAll;
    /** @type {?} */
    DatagridService.prototype.checkAll;
    /** @type {?} */
    DatagridService.prototype.columnResized;
    /** @type {?} */
    DatagridService.prototype.rowHeightChanged;
    /** @type {?} */
    DatagridService.prototype.loadVirtualData;
    /**
     * 显示固定列隐影
     * @type {?}
     */
    DatagridService.prototype.showFixedShadow;
    /** @type {?} */
    DatagridService.prototype.setSelecedRow;
    /** @type {?} */
    DatagridService.prototype.setCheckedRows;
    /** @type {?} */
    DatagridService.prototype.scrollToCurrentRow;
    /** @type {?} */
    DatagridService.prototype.columnsChanged;
    /** @type {?} */
    DatagridService.prototype.cellContentWrapChanged;
    /** @type {?} */
    DatagridService.prototype.onFilterChanged;
    /** @type {?} */
    DatagridService.prototype.clearFilter;
    /** @type {?} */
    DatagridService.prototype.filterTextChange;
    /** @type {?} */
    DatagridService.prototype.toggleFilterRow;
    /** @type {?} */
    DatagridService.prototype.refreshFooterData;
    /** @type {?} */
    DatagridService.prototype.disableHeader;
    /**
     * 更新全选复选框状态
     * @type {?}
     */
    DatagridService.prototype.changeCheckAllStatus;
    /** @type {?} */
    DatagridService.prototype.setScrollbarPosition;
    /** @type {?} */
    DatagridService.prototype.smartFilterBarExpand;
    /** @type {?} */
    DatagridService.prototype.smartFilterDataChange;
    /** @type {?} */
    DatagridService.prototype.scrollbarUpdate;
    /** @type {?} */
    DatagridService.prototype.footerPositionChanged;
    /** @type {?} */
    DatagridService.prototype.styleElement;
    /** @type {?} */
    DatagridService.prototype.commonUtils;
    /** @type {?} */
    DatagridService.prototype.idService;
    /** @type {?} */
    DatagridService.prototype.cellEditorCreated;
    /** @type {?} */
    DatagridService.prototype.cellEditorDestory;
    /** @type {?} */
    DatagridService.prototype.focusRowChanged;
    /** @type {?} */
    DatagridService.prototype.groupBy;
}
//# sourceMappingURL=data:application/json;base64,