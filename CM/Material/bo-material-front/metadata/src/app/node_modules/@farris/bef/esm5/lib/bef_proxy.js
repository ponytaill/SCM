/**
 * @fileoverview added by tsickle
 * Generated from: lib/bef_proxy.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { switchMap, map, catchError, tap } from 'rxjs/operators';
import { HttpClient } from '@angular/common/http';
import { encodeUrl } from '@farris/devkit';
import { BefDataPathUtil } from './bef_data_path_util';
import { UriService } from './uri_service';
import { HttpHeaderUtil, HttpParamUtil, RequestInfoUtil, ResponseInfoUtil } from './utils/index';
import { HttpService } from './http_service';
/** @type {?} */
var GET = 'GET';
/** @type {?} */
var DELETE = 'DELETE';
/** @type {?} */
var PUT = 'PUT';
/** @type {?} */
var POST = 'POST';
/** @type {?} */
var PATCH = 'PATCH';
/**
 * Bef代理类
 * 代理类的职责是处理http请求，发送一个http请求所需的资源有：uri，method，header、body、query parameter
 * uri 由uriService
 */
var BefProxy = /** @class */ (function () {
    function BefProxy(httpClient, uriService) {
        this.httpClient = httpClient;
        this.uriService = uriService;
        this.httpService = new HttpService(this.httpClient);
    }
    /**
     * 设置基路径
     * @param baseUri 基路径
     */
    /**
     * 设置基路径
     * @param {?} baseUri 基路径
     * @return {?}
     */
    BefProxy.prototype.setBaseUri = /**
     * 设置基路径
     * @param {?} baseUri 基路径
     * @return {?}
     */
    function (baseUri) {
        this.baseUri = baseUri;
    };
    /**
     * 设置策略模式
     * @param strategy 策略
     */
    /**
     * 设置策略模式
     * @param {?} proxyExtend
     * @return {?}
     */
    BefProxy.prototype.setProxyExtend = /**
     * 设置策略模式
     * @param {?} proxyExtend
     * @return {?}
     */
    function (proxyExtend) {
        this.proxyExtend = proxyExtend;
    };
    /**
     * 查询
     */
    /**
     * 查询
     * @param {?=} entityFilter
     * @return {?}
     */
    BefProxy.prototype.query = /**
     * 查询
     * @param {?=} entityFilter
     * @return {?}
     */
    function (entityFilter) {
        /** @type {?} */
        var url = this.baseUri;
        if (entityFilter) {
            /** @type {?} */
            var entityFilterJson = JSON.stringify(entityFilter);
            url = url + "?entityFilter=" + entityFilterJson;
        }
        return this.request(url, GET);
    };
    /**
     * 扩展查询
     */
    /**
     * 扩展查询
     * @param {?} entityFilter
     * @param {?} requestInfo
     * @return {?}
     */
    BefProxy.prototype.extendQuery = /**
     * 扩展查询
     * @param {?} entityFilter
     * @param {?} requestInfo
     * @return {?}
     */
    function (entityFilter, requestInfo) {
        /** @type {?} */
        var url = this.baseUri + "/extension/query";
        if (entityFilter) {
            /** @type {?} */
            var entityFilterJson = JSON.stringify(entityFilter);
            entityFilterJson = encodeUrl(entityFilterJson);
            url = url + "?entityFilter=" + entityFilterJson;
        }
        /** @type {?} */
        var body = requestInfo;
        /** @type {?} */
        var options = this.addBodyToOptions({}, body);
        return this.request(url, PUT, null, options, false);
    };
    /**
     * 查询数据（带过滤条件）
     * @param entityFilter 过滤、排序、分页信息
     * @param requestInfo requestInfo
     * @description 和extendQuery一致，仅将查询参数放到body中
     */
    /**
     * 查询数据（带过滤条件）
     * \@description 和extendQuery一致，仅将查询参数放到body中
     * @param {?} entityFilter 过滤、排序、分页信息
     * @param {?} requestInfo requestInfo
     * @return {?}
     */
    BefProxy.prototype.filter = /**
     * 查询数据（带过滤条件）
     * \@description 和extendQuery一致，仅将查询参数放到body中
     * @param {?} entityFilter 过滤、排序、分页信息
     * @param {?} requestInfo requestInfo
     * @return {?}
     */
    function (entityFilter, requestInfo) {
        /** @type {?} */
        var url = this.baseUri + "/extension/filter";
        /** @type {?} */
        var body = { requestInfo: requestInfo };
        if (entityFilter) {
            body = { entityFilter: entityFilter, requestInfo: requestInfo };
        }
        /** @type {?} */
        var options = this.addBodyToOptions({}, body);
        return this.request(url, POST, null, options, false);
    };
    /**
     * 检索数据
     * @param id 单据内码
     * @return 数据对象
     */
    /**
     * 检索数据
     * @param {?} id 单据内码
     * @return {?} 数据对象
     */
    BefProxy.prototype.retrieve = /**
     * 检索数据
     * @param {?} id 单据内码
     * @return {?} 数据对象
     */
    function (id) {
        /** @type {?} */
        var url = this.baseUri + "/" + id;
        return this.request(url, GET);
    };
    /**
     * @deprecated 方法已经废弃，请勿使用
     */
    /**
     * @deprecated 方法已经废弃，请勿使用
     * @param {?} id
     * @param {?} retrieveParam
     * @param {?} requestInfo
     * @return {?}
     */
    BefProxy.prototype.serviceRetrieve = /**
     * @deprecated 方法已经废弃，请勿使用
     * @param {?} id
     * @param {?} retrieveParam
     * @param {?} requestInfo
     * @return {?}
     */
    function (id, retrieveParam, requestInfo) {
        /** @type {?} */
        var url = this.baseUri + "/service/retrieve/" + id;
        /** @type {?} */
        var options = {
            body: { retrieveParam: retrieveParam, requestInfo: requestInfo }
        };
        return this.request(url, PUT, null, options);
    };
    /**
     * 分页查询从表/从从表数据
     * @param params 参数
     */
    /**
     * 分页查询从表/从从表数据
     * @param {?} params 参数
     * @return {?}
     */
    BefProxy.prototype.queryChild = /**
     * 分页查询从表/从从表数据
     * @param {?} params 参数
     * @return {?}
     */
    function (params) {
        /** @type {?} */
        var url = this.baseUri + "/service/querychild";
        /** @type {?} */
        var options = { body: params };
        return this.request(url, PUT, null, options);
    };
    /**
     * 检索数据（扩展）
     */
    /**
     * 检索数据（扩展）
     * @param {?} id
     * @param {?} requestInfo
     * @param {?=} retrieveParam
     * @return {?}
     */
    BefProxy.prototype.extendRetrieve = /**
     * 检索数据（扩展）
     * @param {?} id
     * @param {?} requestInfo
     * @param {?=} retrieveParam
     * @return {?}
     */
    function (id, requestInfo, retrieveParam) {
        /** @type {?} */
        var url = this.baseUri + "/extension/retrieve/" + id;
        /** @type {?} */
        var body = requestInfo;
        if (retrieveParam) {
            body = { retrieveParam: retrieveParam, requestInfo: requestInfo };
        }
        /** @type {?} */
        var options = this.addBodyToOptions({}, body);
        return this.request(url, PUT, null, options);
    };
    /**
     * 检索数据
     */
    /**
     * 检索数据
     * @param {?} id
     * @param {?} requestInfo
     * @return {?}
     */
    BefProxy.prototype.edit = /**
     * 检索数据
     * @param {?} id
     * @param {?} requestInfo
     * @return {?}
     */
    function (id, requestInfo) {
        /** @type {?} */
        var url = this.baseUri + "/service/edit/" + id;
        /** @type {?} */
        var body = requestInfo;
        /** @type {?} */
        var options = this.addBodyToOptions({}, body);
        return this.request(url, PUT, null, options);
    };
    /**
     * 创建一条数据
     */
    /**
     * 创建一条数据
     * @param {?=} defaultValue
     * @param {?=} requestInfo
     * @return {?}
     */
    BefProxy.prototype.create = /**
     * 创建一条数据
     * @param {?=} defaultValue
     * @param {?=} requestInfo
     * @return {?}
     */
    function (defaultValue, requestInfo) {
        /** @type {?} */
        var body = {
            defaultValue: defaultValue,
            requestInfo: requestInfo,
        };
        /** @type {?} */
        var options = this.addBodyToOptions({}, body);
        return this.request(this.baseUri, POST, null, options);
    };
    /**
     * 从表新增
     * @path 新增路径（从表形如：/1/edus，从从表形如：/1/edus/11/grades）
     */
    /**
     * 从表新增
     * \@path 新增路径（从表形如：/1/edus，从从表形如：/1/edus/11/grades）
     * @param {?} fpath
     * @param {?=} requestInfo
     * @return {?}
     */
    BefProxy.prototype.createByPath = /**
     * 从表新增
     * \@path 新增路径（从表形如：/1/edus，从从表形如：/1/edus/11/grades）
     * @param {?} fpath
     * @param {?=} requestInfo
     * @return {?}
     */
    function (fpath, requestInfo) {
        /** @type {?} */
        var pathUrl = BefDataPathUtil.convertPathToUrl(fpath);
        /** @type {?} */
        var url = "" + this.baseUri + pathUrl;
        /** @type {?} */
        var body = requestInfo;
        /** @type {?} */
        var options = this.addBodyToOptions({}, body);
        return this.request(url, POST, null, options);
    };
    /**
     * 提交变更
     */
    /**
     * 提交变更
     * @param {?} changeDetail
     * @param {?=} requestInfo
     * @return {?}
     */
    BefProxy.prototype.update = /**
     * 提交变更
     * @param {?} changeDetail
     * @param {?=} requestInfo
     * @return {?}
     */
    function (changeDetail, requestInfo) {
        /** @type {?} */
        var body = {
            changeDetail: changeDetail,
            requestInfo: requestInfo,
        };
        /** @type {?} */
        var options = this.addBodyToOptions({}, body);
        return this.request(this.baseUri, PATCH, null, options);
    };
    /**
     * 执行保存
     */
    /**
     * 执行保存
     * @param {?=} requestInfo
     * @return {?}
     */
    BefProxy.prototype.save = /**
     * 执行保存
     * @param {?=} requestInfo
     * @return {?}
     */
    function (requestInfo) {
        /** @type {?} */
        var body = requestInfo;
        /** @type {?} */
        var options = this.addBodyToOptions({}, body);
        return this.request(this.baseUri, PUT, null, options);
    };
    /**
     * 删除
     */
    /**
     * 删除
     * @param {?} id
     * @return {?}
     */
    BefProxy.prototype.delete = /**
     * 删除
     * @param {?} id
     * @return {?}
     */
    function (id) {
        /** @type {?} */
        var url = this.baseUri + "/" + id;
        return this.request(url, DELETE);
    };
    /**
     * 删除并保存
     */
    /**
     * 删除并保存
     * @param {?} id
     * @param {?} requestInfo
     * @return {?}
     */
    BefProxy.prototype.deleteAndSave = /**
     * 删除并保存
     * @param {?} id
     * @param {?} requestInfo
     * @return {?}
     */
    function (id, requestInfo) {
        /** @type {?} */
        var url = this.baseUri + "/service/delete/" + id;
        /** @type {?} */
        var body = requestInfo;
        /** @type {?} */
        var options = this.addBodyToOptions({}, body);
        return this.request(url, PUT, null, options);
    };
    /**
     * 删除（扩展）
     */
    /**
     * 删除（扩展）
     * @param {?} id
     * @param {?} requestInfo
     * @return {?}
     */
    BefProxy.prototype.extendDelete = /**
     * 删除（扩展）
     * @param {?} id
     * @param {?} requestInfo
     * @return {?}
     */
    function (id, requestInfo) {
        /** @type {?} */
        var url = this.baseUri + "/extension/delete/" + id;
        /** @type {?} */
        var body = requestInfo;
        /** @type {?} */
        var options = this.addBodyToOptions({}, body);
        return this.request(url, PUT, null, options);
    };
    /**
     * 删除后代
     * @param fpath 父路径（从表形如：/1/edus，从从表形如：/1/edus/11/grades）
     */
    /**
     * 删除后代
     * @param {?} fpath 父路径（从表形如：/1/edus，从从表形如：/1/edus/11/grades）
     * @param {?} id
     * @return {?}
     */
    BefProxy.prototype.deletByPath = /**
     * 删除后代
     * @param {?} fpath 父路径（从表形如：/1/edus，从从表形如：/1/edus/11/grades）
     * @param {?} id
     * @return {?}
     */
    function (fpath, id) {
        /** @type {?} */
        var pathUrl = BefDataPathUtil.convertPathToUrl(fpath);
        /** @type {?} */
        var url = "" + this.baseUri + pathUrl + "/" + id;
        return this.request(url, DELETE);
    };
    /**
     * 删除后代（扩展）
     * @param fpath 父路径（从表形如：/1/edus，从从表形如：/1/edus/11/grades）
     */
    /**
     * 删除后代（扩展）
     * @param {?} fpath 父路径（从表形如：/1/edus，从从表形如：/1/edus/11/grades）
     * @param {?} id
     * @param {?} requestInfo
     * @return {?}
     */
    BefProxy.prototype.extendDeletByPath = /**
     * 删除后代（扩展）
     * @param {?} fpath 父路径（从表形如：/1/edus，从从表形如：/1/edus/11/grades）
     * @param {?} id
     * @param {?} requestInfo
     * @return {?}
     */
    function (fpath, id, requestInfo) {
        /** @type {?} */
        var pathUrl = BefDataPathUtil.convertPathToUrl(fpath);
        /** @type {?} */
        var url = this.baseUri + "/extension" + pathUrl + "/" + id;
        /** @type {?} */
        var body = requestInfo;
        /** @type {?} */
        var options = this.addBodyToOptions({}, body);
        return this.request(url, PUT, null, options);
    };
    /**
     * 批量删除后代
     * @param fPath 'extension/{rootId}/cc/batch'
     * @param  ids 子集id
     * @param  requestInfo 请求信息
     */
    /**
     * 批量删除后代
     * @param {?} fPath 'extension/{rootId}/cc/batch'
     * @param {?} ids 子集id
     * @param {?} requestInfo 请求信息
     * @return {?}
     */
    BefProxy.prototype.batchDeleteByPath = /**
     * 批量删除后代
     * @param {?} fPath 'extension/{rootId}/cc/batch'
     * @param {?} ids 子集id
     * @param {?} requestInfo 请求信息
     * @return {?}
     */
    function (fPath, ids, requestInfo) {
        /** @type {?} */
        var pathUrl = BefDataPathUtil.convertPathToUrl(fPath);
        /** @type {?} */
        var pathArray = pathUrl.split('/');
        if (pathArray.length < 3) {
            throw Error("\u6839\u636Epath\u5220\u9664\u5B9E\u4F53\u6570\u636E\u51FA\u9519\u4E86\u3002\u4F20\u5165\u7684path[" + fPath + "]\u683C\u5F0F\u4E0D\u5BF9");
        }
        /*   const rootId = pathArray[1];
        
            const nameArray = [];
            pathArray.forEach((name, index) => {
              if (index > 1 ) {
                if (name.indexOf('s') !== -1) {
                  nameArray.push(name.substr(0, name.length - 1));
                } else {
                  nameArray.push(name);
                }
              }
            });
            const childName = nameArray.join('/');*/
        /** @type {?} */
        var url = this.baseUri + "/extension" + pathUrl + "/batch";
        /** @type {?} */
        var idsArray = ids.split(',');
        /** @type {?} */
        var body = {
            ids: idsArray,
            requestInfo: requestInfo
        };
        /** @type {?} */
        var options = this.addBodyToOptions({}, body);
        return this.request(url, PUT, null, options);
    };
    /**
     * 批量删除
     * @param ids 待删除的id数组
     */
    /**
     * 批量删除
     * @param {?} ids 待删除的id数组
     * @return {?}
     */
    BefProxy.prototype.batchDelete = /**
     * 批量删除
     * @param {?} ids 待删除的id数组
     * @return {?}
     */
    function (ids) {
        /** @type {?} */
        var params = {
            ids: ids.join(',')
        };
        return this.request(this.baseUri, DELETE, params);
    };
    /**
     * 根据ids批量删除实体
     * @param ids ids
     * @param ifSave 是否保存
     */
    /**
     * 根据ids批量删除实体
     * @param {?} ids ids
     * @param {?} requestInfo
     * @return {?}
     */
    BefProxy.prototype.extendBatchDeletion = /**
     * 根据ids批量删除实体
     * @param {?} ids ids
     * @param {?} requestInfo
     * @return {?}
     */
    function (ids, requestInfo) {
        /** @type {?} */
        var url = this.baseUri + "/extension/batchdeletion";
        /** @type {?} */
        var body = {
            ids: ids,
            requestInfo: requestInfo
        };
        /** @type {?} */
        var options = this.addBodyToOptions({}, body);
        return this.request(url, PUT, null, options);
    };
    /**
     * 批量删除（扩展）
     */
    /**
     * 批量删除（扩展）
     * @param {?} ids
     * @param {?} requestInfo
     * @return {?}
     */
    BefProxy.prototype.extendBatchDelete = /**
     * 批量删除（扩展）
     * @param {?} ids
     * @param {?} requestInfo
     * @return {?}
     */
    function (ids, requestInfo) {
        /** @type {?} */
        var url = this.baseUri + "/extension/batchdelete";
        /** @type {?} */
        var params = {
            ids: ids.join(',')
        };
        /** @type {?} */
        var body = requestInfo;
        /** @type {?} */
        var options = this.addBodyToOptions({}, body);
        return this.request(url, PUT, params, options);
    };
    /**
     * 取消
     */
    /**
     * 取消
     * @param {?=} context
     * @return {?}
     */
    BefProxy.prototype.cancel = /**
     * 取消
     * @param {?=} context
     * @return {?}
     */
    function (context) {
        /** @type {?} */
        var url = this.baseUri + "/service/cancel";
        return this.request(url, POST, null, null, false, false, false, context);
    };
    /**
     * 批量新增从表/从从表数据
     * @param path 实体绑定路径，like 1/childs or 1/childs/11/childchilds
     * @param defaultValues 默认实体数据数组
     */
    /**
     * 批量新增从表/从从表数据
     * @param {?} path 实体绑定路径，like 1/childs or 1/childs/11/childchilds
     * @param {?} defaultValues 默认实体数据数组
     * @param {?} requestInfo
     * @return {?}
     */
    BefProxy.prototype.batchAppendByPath = /**
     * 批量新增从表/从从表数据
     * @param {?} path 实体绑定路径，like 1/childs or 1/childs/11/childchilds
     * @param {?} defaultValues 默认实体数据数组
     * @param {?} requestInfo
     * @return {?}
     */
    function (path, defaultValues, requestInfo) {
        /** @type {?} */
        var pathUrl = BefDataPathUtil.convertPathToUrl(path);
        /** @type {?} */
        var url = "" + this.baseUri + pathUrl + "/batch";
        /** @type {?} */
        var body = {
            requestInfo: requestInfo,
            retrieveDefaultParam: {
                defaultValues: defaultValues
            }
        };
        /** @type {?} */
        var options = this.addBodyToOptions({}, body);
        return this.request(url, POST, null, options);
    };
    /**
     * 批量新增主表数据
     * @param defaultValues 默认实体数据数组
     */
    /**
     * 批量新增主表数据
     * @param {?} defaultValues 默认实体数据数组
     * @param {?} requestInfo
     * @return {?}
     */
    BefProxy.prototype.batchAppend = /**
     * 批量新增主表数据
     * @param {?} defaultValues 默认实体数据数组
     * @param {?} requestInfo
     * @return {?}
     */
    function (defaultValues, requestInfo) {
        /** @type {?} */
        var url = this.baseUri + "/batch";
        ;
        /** @type {?} */
        var body = {
            requestInfo: requestInfo,
            retrieveDefaultParam: {
                defaultValues: defaultValues
            }
        };
        /** @type {?} */
        var options = this.addBodyToOptions({}, body);
        return this.request(url, POST, null, options);
    };
    // tslint:disable-next-line: max-line-length
    // tslint:disable-next-line: max-line-length
    /**
     * @param {?} url
     * @param {?} method
     * @param {?=} params
     * @param {?=} options
     * @param {?=} selfHandError
     * @param {?=} ignoreError
     * @param {?=} ignoreChanges
     * @param {?=} runtimeContext
     * @return {?}
     */
    BefProxy.prototype.request = 
    // tslint:disable-next-line: max-line-length
    /**
     * @param {?} url
     * @param {?} method
     * @param {?=} params
     * @param {?=} options
     * @param {?=} selfHandError
     * @param {?=} ignoreError
     * @param {?=} ignoreChanges
     * @param {?=} runtimeContext
     * @return {?}
     */
    function (url, method, params, options, selfHandError, ignoreError, ignoreChanges, runtimeContext) {
        var _this = this;
        options = options || {};
        // 是否自行处理错误
        if (typeof (selfHandError) === 'undefined' || typeof (selfHandError) !== 'boolean') {
            selfHandError = false;
        }
        // 是否忽略异常继续执行
        if (typeof (ignoreError) === 'undefined' || typeof (ignoreError) !== 'boolean') {
            ignoreError = false;
        }
        // params
        if (params) {
            // const httpParams = this.buildParams(params);
            options.params = params;
        }
        // 处理headers
        options.headers = HttpHeaderUtil.convertToHeaders(options.headers);
        // 1、判断是否带requestInfo（不区分首字母大小写）;
        // 2、如果传递的是RequestInfo，则转换为requestInfo；
        /** @type {?} */
        var hasRequestInfo = this.hasRequestInfo(options);
        if (options && options.body && options.body.hasOwnProperty('RequestInfo')) {
            options.body.requestInfo = options.body.RequestInfo;
            delete options.body.RequestInfo;
        }
        return this.proxyExtend.extendHeaders(options.headers, runtimeContext).pipe(switchMap((/**
         * @param {?} headers
         * @return {?}
         */
        function (headers) {
            options.headers = HttpHeaderUtil.toJson(headers);
            options.observe = 'response';
            return _this.httpService.request(method, url, options);
        })), tap((/**
         * @param {?} response
         * @return {?}
         */
        function (response) { return _this.proxyExtend.parseHeaders(response); })), map((/**
         * @param {?} result
         * @return {?}
         */
        function (result) { return result.body; })), map((/**
         * @param {?} result
         * @return {?}
         */
        function (result) {
            if (hasRequestInfo) {
                _this.proxyExtend.onResponse(result, ignoreChanges, options);
                return result;
            }
            else {
                // body里没有requestInfo的情况，模拟老的处理方式（不清理变更、将returnValue解析出来）
                return _this.unWrapResponseInfo(result);
            }
        })), catchError((/**
         * @param {?} error
         * @return {?}
         */
        function (error) {
            return _this.proxyExtend.onError(error, selfHandError, ignoreError);
        })));
    };
    /**
     * 调用httpclient取数
     * @param url url
     * @param method methods
     * @param options options
     */
    /**
     * 调用httpclient取数
     * @protected
     * @param {?} url url
     * @param {?} method methods
     * @param {?} options options
     * @return {?}
     */
    BefProxy.prototype.invoke = /**
     * 调用httpclient取数
     * @protected
     * @param {?} url url
     * @param {?} method methods
     * @param {?} options options
     * @return {?}
     */
    function (url, method, options) {
        var _this = this;
        if (options.params) {
            url = this.proxyExtend.extendUrl(url, options.params);
            options.params = null;
        }
        if (options.body) {
            options.body = this.proxyExtend.extendBody(options.body);
        }
        options.headers = HttpHeaderUtil.convertToHeaders(options.headers);
        /** @type {?} */
        var headers$ = this.proxyExtend.extendHeaders(options.headers);
        return headers$.pipe(switchMap((/**
         * @param {?} headers
         * @return {?}
         */
        function (headers) {
            options.headers = HttpHeaderUtil.toJson(headers);
            options.observe = 'response';
            return _this.httpService.request(method, url, options)
                .pipe(tap((/**
             * @param {?} response
             * @return {?}
             */
            function (response) { return _this.proxyExtend.parseHeaders(response); })), map((/**
             * @param {?} result
             * @return {?}
             */
            function (result) { return result.body; })), map((/**
             * @param {?} result
             * @return {?}
             */
            function (result) { return _this.proxyExtend.onResponse(result, false, options); })), catchError((/**
             * @param {?} error
             * @return {?}
             */
            function (error) { return _this.proxyExtend.onError(error, false, false); })));
        })));
    };
    /**
     * 向HttpOptions对象中添加body
     * @param options 原来的options
     * @param body body内容
     */
    /**
     * 向HttpOptions对象中添加body
     * @private
     * @param {?} options 原来的options
     * @param {?} body body内容
     * @return {?}
     */
    BefProxy.prototype.addBodyToOptions = /**
     * 向HttpOptions对象中添加body
     * @private
     * @param {?} options 原来的options
     * @param {?} body body内容
     * @return {?}
     */
    function (options, body) {
        options = options || {};
        /** @type {?} */
        var mergedOptions = Object.assign(options, { body: body });
        return mergedOptions;
    };
    /**
     * 构造HttpParams对象
     * @param params 请求参数
     */
    /**
     * 构造HttpParams对象
     * @private
     * @param {?} params 请求参数
     * @return {?}
     */
    BefProxy.prototype.buildParams = /**
     * 构造HttpParams对象
     * @private
     * @param {?} params 请求参数
     * @return {?}
     */
    function (params) {
        return HttpParamUtil.buildParams(params);
    };
    /**
     * 是否带有RequestInfo
     */
    /**
     * 是否带有RequestInfo
     * @private
     * @param {?} options
     * @return {?}
     */
    BefProxy.prototype.hasRequestInfo = /**
     * 是否带有RequestInfo
     * @private
     * @param {?} options
     * @return {?}
     */
    function (options) {
        return RequestInfoUtil.hasRequestInfo(options) || RequestInfoUtil.hasRequestInfoWithR(options);
    };
    /**
     * 处理返回值，兼容老版本
     */
    /**
     * 处理返回值，兼容老版本
     * @private
     * @param {?} result
     * @return {?}
     */
    BefProxy.prototype.unWrapResponseInfo = /**
     * 处理返回值，兼容老版本
     * @private
     * @param {?} result
     * @return {?}
     */
    function (result) {
        return ResponseInfoUtil.unWrapResponseInfo(result);
    };
    BefProxy.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    BefProxy.ctorParameters = function () { return [
        { type: HttpClient },
        { type: UriService }
    ]; };
    return BefProxy;
}());
export { BefProxy };
if (false) {
    /**
     * @type {?}
     * @protected
     */
    BefProxy.prototype.proxyExtend;
    /**
     * restful基路径
     * @type {?}
     * @protected
     */
    BefProxy.prototype.baseUri;
    /**
     * @type {?}
     * @private
     */
    BefProxy.prototype.httpService;
    /** @type {?} */
    BefProxy.prototype.httpClient;
    /** @type {?} */
    BefProxy.prototype.uriService;
}
//# sourceMappingURL=data:application/json;base64,