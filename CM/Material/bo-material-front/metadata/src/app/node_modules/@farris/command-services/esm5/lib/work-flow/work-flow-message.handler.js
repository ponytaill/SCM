import { Injectable, Injector } from "@angular/core";
import { AppContextManager, FrameContext } from "@farris/devkit";
import { from, of } from "rxjs";
import { BefRepositoryUtil } from '@farris/bef';
import { concatMap, throwIfEmpty } from "rxjs/operators";
import { ValidationService } from "../validation.service";
import { WorkFlowMessage } from "./work-flow-message";
import { WorkFlowMessageService } from "./work-flow-message.service";
var WorkFlowMessageHandler = /** @class */ (function () {
    function WorkFlowMessageHandler(injector, frameContext, workFlowMessageService, workFlowMessage) {
        this.injector = injector;
        this.frameContext = frameContext;
        this.workFlowMessageService = workFlowMessageService;
        this.workFlowMessage = workFlowMessage;
    }
    WorkFlowMessageHandler.prototype.onComponentInit = function (frameContext) {
        var _this = this;
        var eventId = this.workFlowMessage.addEventListener(this.handle.bind(this));
        var frameContextDestroySignal = this.frameContext.destorySignal;
        if (frameContextDestroySignal) {
            frameContextDestroySignal.subscribe(function () {
                _this.workFlowMessage.removeEventListener(eventId);
            });
        }
        var appContextDestroySignal = this.frameContext.appContext.destorySignal;
        if (appContextDestroySignal) {
            appContextDestroySignal.subscribe(function () {
                _this.workFlowMessage.workFlowMessageService.destroy();
            });
        }
    };
    WorkFlowMessageHandler.prototype.handle = function (message) {
        var _this = this;
        var source = message.sender;
        var data = message.data;
        var commandName = data && data.command || null;
        var resultTask = null;
        if (!commandName) {
            return;
        }
        if (commandName == 'wf-required-verification') {
            // 工作流的必填校验
            // 如此获取的是当前组件的校验服务，应该按namespace来区分，不同的namespace需要分别执行校验
            var formFrameContexts = this.getFormFrameContexts();
            resultTask = from(formFrameContexts).pipe(concatMap(function (frameContext) {
                var validation = frameContext.injector.get(ValidationService, null);
                if (validation) {
                    return validation.validateAll();
                }
                return of(true);
            }));
        }
        else {
            var command = this.frameContext.viewModel[commandName];
            if (command) {
                resultTask = command(data.arguments);
            }
        }
        if (resultTask) {
            var message_1 = this.buildMessage(true, source, this.isChanged);
            resultTask.pipe(throwIfEmpty()).subscribe(function (result) {
                // 向来源方回传消息
                _this.workFlowMessageService.send(message_1);
            }, function () {
                message_1.data.result = false;
                _this.workFlowMessageService.send(message_1);
            });
        }
    };
    WorkFlowMessageHandler.prototype.buildMessage = function (result, target, dataChanged, type) {
        if (type === void 0) { type = 'message'; }
        var message = {
            data: {
                result: result,
                dataChanged: dataChanged
            },
            type: type,
            target: target,
        };
        return message;
    };
    WorkFlowMessageHandler.prototype.getFormFrameContexts = function () {
        var appContextManager = this.injector.get(AppContextManager, null);
        var formFrameContexts = [];
        if (appContextManager) {
            var appContexts = appContextManager.getAppContexts();
            if (appContexts && appContexts.length > 0) {
                appContexts.forEach(function (appContext) {
                    var frameContexts = appContext.frameContextManager.getFrameContexts();
                    frameContexts.reduce(function (contexts, frameContext) {
                        var namespace = frameContext.namespace;
                        var index = contexts.findIndex(function (frame) { return frame.namespace === namespace; });
                        if (index === -1) {
                            var root = frameContext.getVirtualRootFrameContext();
                            contexts.push(root);
                        }
                        return contexts;
                    }, formFrameContexts);
                });
            }
        }
        return formFrameContexts;
    };
    Object.defineProperty(WorkFlowMessageHandler.prototype, "isChanged", {
        /**
         * 是否有未保存的变更
         */
        get: function () {
            var befRepository = this.frameContext.repository;
            return BefRepositoryUtil.isExistUnsaveData(befRepository);
        },
        enumerable: true,
        configurable: true
    });
    WorkFlowMessageHandler.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    WorkFlowMessageHandler.ctorParameters = function () { return [
        { type: Injector },
        { type: FrameContext },
        { type: WorkFlowMessageService },
        { type: WorkFlowMessage }
    ]; };
    return WorkFlowMessageHandler;
}());
export { WorkFlowMessageHandler };
//# sourceMappingURL=data:application/json;base64,