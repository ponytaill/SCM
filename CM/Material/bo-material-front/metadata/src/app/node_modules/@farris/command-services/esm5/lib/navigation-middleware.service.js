import { Injectable, Optional } from '@angular/core';
import { of } from 'rxjs';
import { switchMap } from 'rxjs/operators';
import { BefRepositoryUtil } from '@farris/bef';
import { TAB_EVENT } from './types';
import { NavigationService } from './navigation.service';
import { FrameContext, UID } from '@farris/devkit';
import { FormMessageService } from './form-message.service';
import { LanguageService } from './languag.service';
import { CardDataService } from './data-services/card-data.service';
/**
 * 导航中间件服务
 * @scope FrameComponent
 */
// tslint:disable: no-string-literal
var NavigationMiddlewareService = /** @class */ (function () {
    function NavigationMiddlewareService(navigationService, frameContext, msgService, languageService, cardDataService) {
        this.navigationService = navigationService;
        this.frameContext = frameContext;
        this.msgService = msgService;
        this.languageService = languageService;
        this.cardDataService = cardDataService;
        this.repository = frameContext.repository;
        if (!this.languageService) {
            this.languageService = LanguageService.getInstance();
        }
        if (this.frameContext) {
            this.appContext = this.frameContext.getFormAppContext() || null;
        }
    }
    /**
     * 关闭前处理
     */
    NavigationMiddlewareService.prototype.onClosing = function () {
        var _this = this;
        if (this.isInDialog()) {
            return;
        }
        this.navigationService.addEventListener(TAB_EVENT.onTabClosing, function (options) {
            if (_this.isChanged && !_this.appContext.opened) {
                // 如果需要用户确认就切换到当前tab
                if (options && options.beforeCloseHandle && typeof options.beforeCloseHandle === 'function') {
                    options.beforeCloseHandle({ selectedChange: true });
                }
                var conform = _this.msgService.question(_this.languageService['exitWithoutSave']);
                /*记录弹窗已打开*/
                _this.appContext.opened = true;
                return conform.pipe(switchMap(function (result) {
                    _this.appContext.opened = false;
                    if (result) {
                        /*记录用户关闭弹窗*/
                        if (!!_this.cardDataService) {
                            var revert$ = _this.cardDataService.revert(options);
                            return revert$.pipe(switchMap(function () { return of(result); }));
                        }
                    }
                    return of(result);
                }));
            }
            else if (_this.isChanged && _this.appContext.opened) {
                return of(false);
            }
            else {
                return of(true);
            }
        });
    };
    /**
     * 是否在是弹窗窗口内
     */
    NavigationMiddlewareService.prototype.isInDialog = function () {
        var frameContext = this.frameContext;
        var isDialogRootComponent = frameContext.frameComponent['isDialogRootComponent'] || false;
        while (frameContext.parent !== null && !isDialogRootComponent) {
            frameContext = frameContext.parent;
            isDialogRootComponent = frameContext.frameComponent['isDialogRootComponent'];
        }
        return isDialogRootComponent;
    };
    /**
     * 获取tabid,如果targetId存在则直接使用targetId
     * @description 将用户要查看的数据id转换为运行框架需要的tabId
     * @param params router参数
     * @param targetId 要编辑/查看的数据id
     */
    NavigationMiddlewareService.prototype.getTabId = function (params, targetId) {
        if (!!targetId) {
            return targetId;
        }
        var paramsObj = null;
        if (!!params && params.startsWith('{') && params.endsWith('}')) {
            paramsObj = JSON.parse(params);
        }
        var paramId = null;
        if (paramsObj && paramsObj.hasOwnProperty('id') && !!paramsObj.id) {
            paramId = paramsObj.id;
        }
        else {
            paramId = UID.create();
        }
        return paramId;
    };
    Object.defineProperty(NavigationMiddlewareService.prototype, "isChanged", {
        /**
         * 是否有未保存的变更
         */
        get: function () {
            var befRepository = this.repository;
            return BefRepositoryUtil.isExistUnsaveData(befRepository);
        },
        enumerable: true,
        configurable: true
    });
    NavigationMiddlewareService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    NavigationMiddlewareService.ctorParameters = function () { return [
        { type: NavigationService },
        { type: FrameContext },
        { type: FormMessageService },
        { type: LanguageService, decorators: [{ type: Optional }] },
        { type: CardDataService }
    ]; };
    return NavigationMiddlewareService;
}());
export { NavigationMiddlewareService };
//# sourceMappingURL=data:application/json;base64,