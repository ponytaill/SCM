/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { debounceTime, map, filter } from 'rxjs/operators';
import { Component, EventEmitter, Output, ElementRef, ViewChild, NgZone, Injector, Input } from '@angular/core';
import { fromEvent } from 'rxjs';
var FindInputComponent = /** @class */ (function () {
    function FindInputComponent(el, ngZone, injector) {
        this.el = el;
        this.ngZone = ngZone;
        this.injector = injector;
        this.current = 0;
        this.count = 0;
        this.columns = [];
        this.close = new EventEmitter();
        this.valueChanged = new EventEmitter();
        this.enterHandler = new EventEmitter();
        this.findField = '';
        this.keyupEventSub = null;
    }
    /**
     * @return {?}
     */
    FindInputComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.columns.length) {
            this.columns = this.columns.filter((/**
             * @param {?} c
             * @return {?}
             */
            function (c) { return !c.formatter && c.field; }));
            this.findField = this.columns[0].field;
        }
        this.ngZone.runOutsideAngular((/**
         * @return {?}
         */
        function () {
            _this.keyupEventSub = fromEvent(_this.input.nativeElement, 'keyup').pipe(filter((/**
             * @param {?} e
             * @return {?}
             */
            function (e) { return (e.switch || e.keyCode) !== 13; })), debounceTime(200), map((/**
             * @param {?} e
             * @return {?}
             */
            function (e) { return e.target.value; }))).subscribe((/**
             * @param {?} v
             * @return {?}
             */
            function (v) {
                _this.valueChanged.emit({ value: v, field: _this.findField });
            }));
        }));
    };
    /**
     * @return {?}
     */
    FindInputComponent.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        this.input.nativeElement.focus();
    };
    /**
     * @return {?}
     */
    FindInputComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        if (this.keyupEventSub) {
            this.keyupEventSub.unsubscribe();
        }
        this.keyupEventSub = null;
    };
    /**
     * @param {?} event
     * @return {?}
     */
    FindInputComponent.prototype.onClose = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this.close.emit();
        return false;
    };
    /**
     * @param {?} $event
     * @param {?} step
     * @return {?}
     */
    FindInputComponent.prototype.onEnter = /**
     * @param {?} $event
     * @param {?} step
     * @return {?}
     */
    function ($event, step) {
        this.enterHandler.emit(step);
        return false;
    };
    FindInputComponent.decorators = [
        { type: Component, args: [{
                    selector: 'find-input',
                    template: "\n        <div class=\"f-find-input\" style=\"\">\n            <div class=\"input-group\">\n                <div class=\"input-group-prepend\">\n                    <select class=\"form-control\" [(ngModel)]=\"findField\">\n                        <option *ngFor=\"let col of columns\" value=\"{{col.field}}\">{{ col.title }}</option>\n                    </select>\n                </div>\n                <input #input type=\"text\" placeholder=\"\u81F3\u5C112\u4E2A\u5B57\u7B26\" class=\"form-control\"\n                    (keydown.esc)=\"onClose($event)\" (keydown.enter)=\"onEnter($event, 0)\">\n                <div class=\"input-group-append\">\n                    <span class=\"input-group-text\">{{current}}/{{count}}</span>\n                    <button class=\"btn btn-outline-secondary\" type=\"button\" title=\"\u4E0A\u4E00\u4E2A\"\n                        [disabled]=\"current === 0\" (click)=\"onEnter($event, -1)\">\n                        <span class=\"f-icon f-icon-arrow-chevron-up\"></span>\n                    </button>\n                    <button class=\"btn btn-outline-secondary\" type=\"button\" title=\"\u4E0B\u4E00\u4E2A\"\n                    [disabled]=\"current === count\" (click)=\"onEnter($event, 1)\">\n                        <span class=\"f-icon f-icon-arrow-chevron-down\"></span>\n                    </button>\n                    <button class=\"btn btn-outline-secondary\" type=\"button\" title=\"\u5173\u95ED\" (click)=\"onClose($event)\">\n                        <span class=\"f-icon f-icon-close\"></span>\n                    </button>\n                </div>\n            </div>\n        </div>\n    ",
                    styles: ["\n        .f-find-input {\n            width: 300px; height: 40px; background: #fefefe; position: absolute; right: 0; z-index: 10; padding: 5px;\n            border: 1px solid #d5d5d5;\n            box-shadow: 0px 1px 2px 0px #989898;\n        }\n        .f-find-input .input-group-text { border-right: 1px solid #ccc; font-size: 10px }\n        .f-find-input .input-group-append { background: #fff; }\n        .f-find-input .input-group-append button { padding:1px 6px;}\n        "]
                }] }
    ];
    /** @nocollapse */
    FindInputComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: NgZone },
        { type: Injector }
    ]; };
    FindInputComponent.propDecorators = {
        current: [{ type: Input }],
        count: [{ type: Input }],
        columns: [{ type: Input }],
        close: [{ type: Output }],
        valueChanged: [{ type: Output }],
        enterHandler: [{ type: Output }],
        input: [{ type: ViewChild, args: ['input',] }]
    };
    return FindInputComponent;
}());
export { FindInputComponent };
if (false) {
    /** @type {?} */
    FindInputComponent.prototype.current;
    /** @type {?} */
    FindInputComponent.prototype.count;
    /** @type {?} */
    FindInputComponent.prototype.columns;
    /** @type {?} */
    FindInputComponent.prototype.close;
    /** @type {?} */
    FindInputComponent.prototype.valueChanged;
    /** @type {?} */
    FindInputComponent.prototype.enterHandler;
    /** @type {?} */
    FindInputComponent.prototype.input;
    /** @type {?} */
    FindInputComponent.prototype.findField;
    /**
     * @type {?}
     * @private
     */
    FindInputComponent.prototype.keyupEventSub;
    /**
     * @type {?}
     * @private
     */
    FindInputComponent.prototype.el;
    /**
     * @type {?}
     * @private
     */
    FindInputComponent.prototype.ngZone;
    /**
     * @type {?}
     * @private
     */
    FindInputComponent.prototype.injector;
}
//# sourceMappingURL=data:application/json;base64,