import { ModifyType } from '../changeset/types';
import { PARENT_PATH, PARENT_CLASS } from './types';
import { Entity } from './entity';
/**
 * 支持动态字段集合的动态实体
 */
export class DynamicEntity extends Entity {
    /**
     * 是否是嵌套的动态实体
     */
    get IsNested() {
        return this[PARENT_CLASS] instanceof DynamicEntity;
    }
    /**
     * @param data JSON数据
     */
    constructor(data) {
        super(data);
        this.loadDynamicData(data);
    }
    loadDynamicData(dynamicData) {
        this.initializeDynamicField(dynamicData);
        // super.loadFields(dynamicData);
    }
    /**
     * 初始化动态数据
     * @param dynamicData 动态数据
     */
    initializeDynamicField(dynamicData) {
        // 遍历动态数据的key，创建动态实体属性。
        Object.keys(dynamicData).forEach(propertyName => {
            // 如果属性已经存在，先删除
            if (this[propertyName]) {
                delete this[propertyName];
            }
            const dataField = propertyName;
            if (dynamicData[propertyName] instanceof Object) {
                const path = this.createPath(propertyName);
                let dynamicEntity = this.createDynamicEntityFromJsonData(dynamicData[propertyName], path);
                Object.defineProperty(this, propertyName, {
                    get: function () {
                        return dynamicEntity;
                    },
                    set: function (value) {
                        const modifyInfo = {
                            path: dynamicEntity[PARENT_PATH],
                            value: value.data,
                            preValue: this[propertyName].data,
                            type: ModifyType.ValueChange
                        };
                        dynamicEntity = this.createDynamicEntityFromJsonData(value, path);
                        this.setChanges(modifyInfo);
                    },
                    configurable: true
                });
            }
            else {
                Object.defineProperty(this, propertyName, {
                    // 定义返回数据方法。
                    get: function () {
                        // 从初始数据返回字段值。
                        return this.data[dataField];
                    },
                    set: function (value) {
                        // 值相同时不触发变更。
                        const oldValue = this.data[dataField];
                        if (oldValue === value) {
                            return;
                        }
                        // 更新元数据数据。
                        this.data[dataField] = value;
                        // 变更集
                        const changes = {
                            type: ModifyType.ValueChange,
                            path: this.createPath(propertyName),
                            value: value,
                            preValue: oldValue
                        };
                        if (this[PARENT_PATH]) {
                            changes.path = this[PARENT_PATH].concat(changes.path);
                        }
                        this.setChanges(changes);
                    },
                    configurable: true
                });
            }
        });
    }
    createDynamicEntityFromJsonData(value, parentPath) {
        let instance;
        if (value instanceof DynamicEntity) {
            instance = value;
        }
        else {
            instance = new DynamicEntity(value);
        }
        instance[PARENT_CLASS] = this;
        instance[PARENT_PATH] = parentPath;
        instance.onValueChanged.subscribe(changes => {
            if (changes) {
                changes.path = (this[PARENT_PATH] || []).concat(changes.path);
                this.setChanges(changes);
            }
        });
        return instance;
    }
    /**
     * 将变更记录保存至变更集中
     * @param value 变更记录
     * @todo
     * 1、preValue的处理有问题，下级传递上来的变更这样可以，根DyanmicaEntity上的，data已经发生变化，prevalue和value是一样了；
     * 2、当value是下级冒泡上来的，需要根据value去更新当前层级的data，该逻辑不应该放在setChagnes，待修改。
     */
    setChanges(value) {
        const propertyName = value.path[value.path.length - 1];
        const preValue = Object.assign({}, this.data);
        this.newData = Object.assign(this.newData, { [propertyName]: value.value });
        let parentPath = value.path;
        if (value.path.length > 2) {
            parentPath = value.path.slice(0, value.path.length - 2);
        }
        // 统一不使用构造函数（保持和其他位置对Modification的构造一致）
        // const parentModification = new Modification(this.data, value.type, parentPath, preValue);
        const parentModification = {
            path: parentPath,
            value: this.data,
            preValue: preValue,
            type: value.type
        };
        this.valueChanged.next(parentModification);
        this.changeSet.append(value);
    }
    /**
     * toJSON
     */
    toJSON() {
        return this.data;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZHluYW1pY19lbnRpdHkuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZmFycmlzL21vYmlsZS1kZXZraXQvIiwic291cmNlcyI6WyJsaWIvZW50aXR5L2R5bmFtaWNfZW50aXR5LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQWdCLE1BQU0sb0JBQW9CLENBQUM7QUFDOUQsT0FBTyxFQUFFLFdBQVcsRUFBVyxZQUFZLEVBQUUsTUFBTSxTQUFTLENBQUM7QUFDN0QsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLFVBQVUsQ0FBQztBQUVsQzs7R0FFRztBQUNILE1BQU0sT0FBTyxhQUFjLFNBQVEsTUFBTTtJQUV2Qzs7T0FFRztJQUNILElBQVcsUUFBUTtRQUNqQixPQUFPLElBQUksQ0FBQyxZQUFZLENBQUMsWUFBWSxhQUFhLENBQUM7SUFDckQsQ0FBQztJQUVEOztPQUVHO0lBQ0gsWUFBWSxJQUFTO1FBQ25CLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUNaLElBQUksQ0FBQyxlQUFlLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDN0IsQ0FBQztJQUVNLGVBQWUsQ0FBQyxXQUFnQjtRQUNyQyxJQUFJLENBQUMsc0JBQXNCLENBQUMsV0FBVyxDQUFDLENBQUM7UUFDekMsaUNBQWlDO0lBQ25DLENBQUM7SUFFRDs7O09BR0c7SUFDSyxzQkFBc0IsQ0FBQyxXQUFnQjtRQUM3Qyx1QkFBdUI7UUFDdkIsTUFBTSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQyxPQUFPLENBQUMsWUFBWSxDQUFDLEVBQUU7WUFFOUMsZUFBZTtZQUNmLElBQUksSUFBSSxDQUFDLFlBQVksQ0FBQyxFQUFFO2dCQUN0QixPQUFPLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQzthQUMzQjtZQUVELE1BQU0sU0FBUyxHQUFHLFlBQVksQ0FBQztZQUMvQixJQUFJLFdBQVcsQ0FBQyxZQUFZLENBQUMsWUFBWSxNQUFNLEVBQUU7Z0JBQy9DLE1BQU0sSUFB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OztPQUVHO0lBQ0ksTUFBTTtRQUNYLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQztJQUNuQixDQUFDO0NBQ0YiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBNb2RpZnlUeXBlLCBNb2RpZmljYXRpb24gfSBmcm9tICcuLi9jaGFuZ2VzZXQvdHlwZXMnO1xyXG5pbXBvcnQgeyBQQVJFTlRfUEFUSCwgRHluYW1pYywgUEFSRU5UX0NMQVNTIH0gZnJvbSAnLi90eXBlcyc7XHJcbmltcG9ydCB7IEVudGl0eSB9IGZyb20gJy4vZW50aXR5JztcclxuXHJcbi8qKlxyXG4gKiDmlK/mjIHliqjmgIHlrZfmrrXpm4blkIjnmoTliqjmgIHlrp7kvZNcclxuICovXHJcbmV4cG9ydCBjbGFzcyBEeW5hbWljRW50aXR5IGV4dGVuZHMgRW50aXR5IGltcGxlbWVudHMgRHluYW1pYyB7XHJcblxyXG4gIC8qKlxyXG4gICAqIOaYr+WQpuaYr+W1jOWll+eahOWKqOaAgeWunuS9k1xyXG4gICAqL1xyXG4gIHB1YmxpYyBnZXQgSXNOZXN0ZWQoKTogYm9vbGVhbiB7XHJcbiAgICByZXR1cm4gdGhpc1tQQVJFTlRfQ0xBU1NdIGluc3RhbmNlb2YgRHluYW1pY0VudGl0eTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEBwYXJhbSBkYXRhIEpTT07mlbDmja5cclxuICAgKi9cclxuICBjb25zdHJ1Y3RvcihkYXRhOiBhbnkpIHtcclxuICAgIHN1cGVyKGRhdGEpO1xyXG4gICAgdGhpcy5sb2FkRHluYW1pY0RhdGEoZGF0YSk7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgbG9hZER5bmFtaWNEYXRhKGR5bmFtaWNEYXRhOiBhbnkpIHtcclxuICAgIHRoaXMuaW5pdGlhbGl6ZUR5bmFtaWNGaWVsZChkeW5hbWljRGF0YSk7XHJcbiAgICAvLyBzdXBlci5sb2FkRmllbGRzKGR5bmFtaWNEYXRhKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOWIneWni+WMluWKqOaAgeaVsOaNrlxyXG4gICAqIEBwYXJhbSBkeW5hbWljRGF0YSDliqjmgIHmlbDmja5cclxuICAgKi9cclxuICBwcml2YXRlIGluaXRpYWxpemVEeW5hbWljRmllbGQoZHluYW1pY0RhdGE6IGFueSk6IHZvaWQge1xyXG4gICAgLy8g6YGN5Y6G5Yqo5oCB5pWw5o2u55qEa2V577yM5Yib5bu65Yqo5oCB5a6e5L2T5bGe5oCn44CCXHJcbiAgICBPYmplY3Qua2V5cyhkeW5hbWljRGF0YSkuZm9yRWFjaChwcm9wZXJ0eU5hbWUgPT4ge1xyXG5cclxuICAgICAgLy8g5aaC5p6c5bGe5oCn5bey57uP5a2Y5Zyo77yM5YWI5Yig6ZmkXHJcbiAgICAgIGlmICh0aGlzW3Byb3BlcnR5TmFtZV0pIHtcclxuICAgICAgICBkZWxldGUgdGhpc1twcm9wZXJ0eU5hbWVdO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBjb25zdCBkYXRhRmllbGQgPSBwcm9wZXJ0eU5hbWU7XHJcbiAgICAgIGlmIChkeW5hbWljRGF0YVtwcm9wZXJ0eU5hbWVdIGluc3RhbmNlb2YgT2JqZWN0KSB7XHJcbiAgICAgICAgY29uc3QgcGF0aCA9IHRoaXMuY3JlYXRlUGF0aChwcm9wZXJ0eU5hbWUpO1xyXG4gICAgICAgIGxldCBkeW5hbWljRW50aXR5ID0gdGhpcy5jcmVhdGVEeW5hbWljRW50aXR5RnJvbUpzb25EYXRhKGR5bmFtaWNEYXRhW3Byb3BlcnR5TmFtZV0sIHBhdGgpO1xyXG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBwcm9wZXJ0eU5hbWUsIHtcclxuICAgICAgICAgIGdldDogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBkeW5hbWljRW50aXR5O1xyXG4gICAgICAgICAgfSxcclxuICAgICAgICAgIHNldDogZnVuY3Rpb24odmFsdWUpIHtcclxuICAgICAgICAgICAgY29uc3QgbW9kaWZ5SW5mbyA9IHtcclxuICAgICAgICAgICAgICBwYXRoOiBkeW5hbWljRW50aXR5W1BBUkVOVF9QQVRIXSxcclxuICAgICAgICAgICAgICB2YWx1ZTogdmFsdWUuZGF0YSxcclxuICAgICAgICAgICAgICBwcmVWYWx1ZTogdGhpc1twcm9wZXJ0eU5hbWVdLmRhdGEsXHJcbiAgICAgICAgICAgICAgdHlwZTogTW9kaWZ5VHlwZS5WYWx1ZUNoYW5nZVxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICBkeW5hbWljRW50aXR5ID0gdGhpcy5jcmVhdGVEeW5hbWljRW50aXR5RnJvbUpzb25EYXRhKHZhbHVlLCBwYXRoKTtcclxuICAgICAgICAgICAgdGhpcy5zZXRDaGFuZ2VzKG1vZGlmeUluZm8pO1xyXG4gICAgICAgICAgfSxcclxuICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxyXG4gICAgICAgIH0pO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBwcm9wZXJ0eU5hbWUsIHtcclxuICAgICAgICAgIC8vIOWumuS5iei/lOWbnuaVsOaNruaWueazleOAglxyXG4gICAgICAgICAgZ2V0OiBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgLy8g5LuO5Yid5aeL5pWw5o2u6L+U5Zue5a2X5q615YC844CCXHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmRhdGFbZGF0YUZpZWxkXTtcclxuICAgICAgICAgIH0sXHJcbiAgICAgICAgICBzZXQ6IGZ1bmN0aW9uKHZhbHVlKSB7XHJcbiAgICAgICAgICAgIC8vIOWAvOebuOWQjOaXtuS4jeinpuWPkeWPmOabtOOAglxyXG4gICAgICAgICAgICBjb25zdCBvbGRWYWx1ZSA9IHRoaXMuZGF0YVtkYXRhRmllbGRdO1xyXG4gICAgICAgICAgICBpZiAob2xkVmFsdWUgPT09IHZhbHVlKSB7XHJcbiAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIC8vIOabtOaWsOWFg+aVsOaNruaVsOaNruOAglxyXG4gICAgICAgICAgICB0aGlzLmRhdGFbZGF0YUZpZWxkXSA9IHZhbHVlO1xyXG4gICAgICAgICAgICAvLyDlj5jmm7Tpm4ZcclxuICAgICAgICAgICAgY29uc3QgY2hhbmdlcyA9IHtcclxuICAgICAgICAgICAgICB0eXBlOiBNb2RpZnlUeXBlLlZhbHVlQ2hhbmdlLFxyXG4gICAgICAgICAgICAgIHBhdGg6IHRoaXMuY3JlYXRlUGF0aChwcm9wZXJ0eU5hbWUpLFxyXG4gICAgICAgICAgICAgIHZhbHVlOiB2YWx1ZSxcclxuICAgICAgICAgICAgICBwcmVWYWx1ZTogb2xkVmFsdWVcclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgIGlmICh0aGlzW1BBUkVOVF9QQVRIXSkge1xyXG4gICAgICAgICAgICAgIGNoYW5nZXMucGF0aCA9IHRoaXNbUEFSRU5UX1BBVEhdLmNvbmNhdChjaGFuZ2VzLnBhdGgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHRoaXMuc2V0Q2hhbmdlcyhjaGFuZ2VzKTtcclxuICAgICAgICAgIH0sXHJcbiAgICAgICAgICBjb25maWd1cmFibGU6IHRydWVcclxuICAgICAgICB9KTtcclxuICAgICAgfVxyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIGNyZWF0ZUR5bmFtaWNFbnRpdHlGcm9tSnNvbkRhdGEodmFsdWU6IGFueSwgcGFyZW50UGF0aDogc3RyaW5nW10pIHtcclxuICAgIGxldCBpbnN0YW5jZTogRHluYW1pY0VudGl0eTtcclxuICAgIGlmICh2YWx1ZSBpbnN0YW5jZW9mIER5bmFtaWNFbnRpdHkpIHtcclxuICAgICAgaW5zdGFuY2UgPSB2YWx1ZTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIGluc3RhbmNlID0gbmV3IER5bmFtaWNFbnRpdHkodmFsdWUpO1xyXG4gICAgfVxyXG4gICAgaW5zdGFuY2VbUEFSRU5UX0NMQVNTXSA9IHRoaXM7XHJcbiAgICBpbnN0YW5jZVtQQVJFTlRfUEFUSF0gPSBwYXJlbnRQYXRoO1xyXG4gICAgaW5zdGFuY2Uub25WYWx1ZUNoYW5nZWQuc3Vic2NyaWJlKGNoYW5nZXMgPT4ge1xyXG4gICAgICBpZiAoY2hhbmdlcykge1xyXG4gICAgICAgIGNoYW5nZXMucGF0aCA9ICh0aGlzW1BBUkVOVF9QQVRIXSB8fCBbXSkuY29uY2F0KGNoYW5nZXMucGF0aCk7XHJcbiAgICAgICAgdGhpcy5zZXRDaGFuZ2VzKGNoYW5nZXMpO1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuXHJcbiAgICByZXR1cm4gaW5zdGFuY2U7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDlsIblj5jmm7TorrDlvZXkv53lrZjoh7Plj5jmm7Tpm4bkuK1cclxuICAgKiBAcGFyYW0gdmFsdWUg5Y+Y5pu06K6w5b2VXHJcbiAgICogQHRvZG9cclxuICAgKiAx44CBcHJlVmFsdWXnmoTlpITnkIbmnInpl67popjvvIzkuIvnuqfkvKDpgJLkuIrmnaXnmoTlj5jmm7Tov5nmoLflj6/ku6XvvIzmoLlEeWFubWljYUVudGl0eeS4iueahO+8jGRhdGHlt7Lnu4/lj5HnlJ/lj5jljJbvvIxwcmV2YWx1ZeWSjHZhbHVl5piv5LiA5qC35LqG77ybXHJcbiAgICogMuOAgeW9k3ZhbHVl5piv5LiL57qn5YaS5rOh5LiK5p2l55qE77yM6ZyA6KaB5qC55o2udmFsdWXljrvmm7TmlrDlvZPliY3lsYLnuqfnmoRkYXRh77yM6K+l6YC76L6R5LiN5bqU6K+l5pS+5Zyoc2V0Q2hhZ25lc++8jOW+heS/ruaUueOAglxyXG4gICAqL1xyXG4gIHNldENoYW5nZXModmFsdWU6IE1vZGlmaWNhdGlvbik6IHZvaWQge1xyXG4gICAgY29uc3QgcHJvcGVydHlOYW1lID0gdmFsdWUucGF0aFt2YWx1ZS5wYXRoLmxlbmd0aCAtIDFdO1xyXG4gICAgY29uc3QgcHJlVmFsdWUgPSBPYmplY3QuYXNzaWduKHt9LCB0aGlzLmRhdGEpO1xyXG4gICAgdGhpcy5uZXdEYXRhID0gT2JqZWN0LmFzc2lnbih0aGlzLm5ld0RhdGEsIHsgW3Byb3BlcnR5TmFtZV06IHZhbHVlLnZhbHVlIH0pO1xyXG4gICAgbGV0IHBhcmVudFBhdGggPSB2YWx1ZS5wYXRoO1xyXG4gICAgaWYgKHZhbHVlLnBhdGgubGVuZ3RoID4gMikge1xyXG4gICAgICBwYXJlbnRQYXRoID0gdmFsdWUucGF0aC5zbGljZSgwLCB2YWx1ZS5wYXRoLmxlbmd0aCAtIDIpO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIOe7n+S4gOS4jeS9v+eUqOaehOmAoOWHveaVsO+8iOS/neaMgeWSjOWFtuS7luS9jee9ruWvuU1vZGlmaWNhdGlvbueahOaehOmAoOS4gOiHtO+8iVxyXG4gICAgLy8gY29uc3QgcGFyZW50TW9kaWZpY2F0aW9uID0gbmV3IE1vZGlmaWNhdGlvbih0aGlzLmRhdGEsIHZhbHVlLnR5cGUsIHBhcmVudFBhdGgsIHByZVZhbHVlKTtcclxuICAgIGNvbnN0IHBhcmVudE1vZGlmaWNhdGlvbjogTW9kaWZpY2F0aW9uID0ge1xyXG4gICAgICBwYXRoOiBwYXJlbnRQYXRoLFxyXG4gICAgICB2YWx1ZTogdGhpcy5kYXRhLFxyXG4gICAgICBwcmVWYWx1ZTogcHJlVmFsdWUsXHJcbiAgICAgIHR5cGU6IHZhbHVlLnR5cGVcclxuICAgIH07XHJcblxyXG4gICAgdGhpcy52YWx1ZUNoYW5nZWQubmV4dChwYXJlbnRNb2RpZmljYXRpb24pO1xyXG4gICAgdGhpcy5jaGFuZ2VTZXQuYXBwZW5kKHZhbHVlKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIHRvSlNPTlxyXG4gICAqL1xyXG4gIHB1YmxpYyB0b0pTT04oKSB7XHJcbiAgICByZXR1cm4gdGhpcy5kYXRhO1xyXG4gIH1cclxufVxyXG4iXX0=