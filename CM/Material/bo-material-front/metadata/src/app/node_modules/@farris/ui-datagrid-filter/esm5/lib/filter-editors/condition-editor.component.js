/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { FormControl, FormBuilder } from '@angular/forms';
import { ColumnFilterType } from '@farris/ui-datagrid';
import { Component, Input, Output, EventEmitter, Injector, ChangeDetectorRef } from '@angular/core';
import { FilterOperator } from '../operations/operators';
var ConditionEditorComponent = /** @class */ (function () {
    function ConditionEditorComponent(inject, cd, fb) {
        this.inject = inject;
        this.cd = cd;
        this.fb = fb;
        this.datatype = ColumnFilterType.string;
        this.condition = {
            operator1: 0,
            value1: '',
            relation: '',
            operator2: 0,
            value2: ''
        };
        this.filterOptions = {};
        this.conditionChange = new EventEmitter();
        this.emptyCondition = tslib_1.__assign({}, this.condition);
        this.formValueChangesSubscription = null;
        this.originalCondition = {};
        this.form = this.fb.group({
            operator1: new FormControl(0),
            value1: new FormControl(''),
            relation: new FormControl(''),
            operator2: new FormControl(0),
            value2: new FormControl(''),
        });
        this.emptyConditonString = JSON.stringify(this.emptyCondition);
    }
    /**
     * @return {?}
     */
    ConditionEditorComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.originalCondition = Object.assign({}, this.condition);
        this.form.patchValue(this.condition);
    };
    /**
     * @return {?}
     */
    ConditionEditorComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        if (this.formValueChangesSubscription) {
            this.formValueChangesSubscription.unsubscribe();
            this.formValueChangesSubscription = null;
        }
    };
    /**
     * @param {?} changes
     * @return {?}
     */
    ConditionEditorComponent.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
    };
    /**
     * @private
     * @param {?} v
     * @return {?}
     */
    ConditionEditorComponent.prototype.emitConditionChange = /**
     * @private
     * @param {?} v
     * @return {?}
     */
    function (v) {
        this.condition = v;
        /** @type {?} */
        var filter = this.checkFilterOperator();
        this.conditionChange.emit(filter);
    };
    /**
     * @return {?}
     */
    ConditionEditorComponent.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.form.valueChanges.subscribe((/**
         * @param {?} v
         * @return {?}
         */
        function (v) {
            _this.condition = Object.assign(_this.emptyCondition, _this.condition);
            if (_this.emptyConditonString === JSON.stringify(v)) {
                _this.emitConditionChange(v);
            }
            else {
                if (_this.condition.value1 != v.value1 || (_this.condition.value2 !== undefined && _this.condition.value2 != v.value2)) {
                    _this.emitConditionChange(v);
                }
                else {
                    if ((_this.condition.operator1 != v.operator1 && v.value1 !== '') ||
                        ((_this.condition.relation != v.relation || _this.condition.operator2 != v.operator2) && v.value2 !== '')) {
                        _this.emitConditionChange(v);
                    }
                }
            }
        }));
    };
    /**
     * @private
     * @return {?}
     */
    ConditionEditorComponent.prototype.checkFilterOperator = /**
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var filter = tslib_1.__assign({}, this.condition);
        /** @type {?} */
        var op1 = parseInt('' + filter.operator1, 10);
        /** @type {?} */
        var f1 = { operator1: filter.operator1, value1: filter.value1 };
        if (op1 === FilterOperator.Empty || op1 === FilterOperator.NotEmpty) {
            filter.value1 = '';
            f1.value1 = '';
        }
        if (filter.value1 === '' && op1 !== FilterOperator.Empty && op1 !== FilterOperator.NotEmpty) {
            return '';
        }
        if (!filter.relation) {
            return f1;
        }
        else {
            /** @type {?} */
            var op2 = parseInt('' + filter.operator2, 10);
            if (op2 === FilterOperator.Empty || op2 === FilterOperator.NotEmpty) {
                filter.value2 = '';
                return filter;
            }
            else {
                if (!filter.value2) {
                    return f1;
                }
            }
        }
        return filter;
    };
    /**
     * @param {?} relation
     * @return {?}
     */
    ConditionEditorComponent.prototype.chooseRelation = /**
     * @param {?} relation
     * @return {?}
     */
    function (relation) {
        this.form.get('relation').setValue(relation);
        this.condition.relation = relation;
        if (this.condition.operator2 === undefined) {
            this.condition.operator2 = 0;
        }
        this.cd.detectChanges();
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    ConditionEditorComponent.prototype.resetFilters = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        if (this.emptyConditonString !== JSON.stringify(this.condition)) {
            this.condition = JSON.parse(this.emptyConditonString);
            this.form.reset(this.condition);
        }
    };
    ConditionEditorComponent.decorators = [
        { type: Component, args: [{
                    selector: 'condition-editor',
                    template: "<form [formGroup]=\"form\">\r\n<ul class=\"list-group filter-condition\">\r\n    <li class=\"list-group-item border-0\">\r\n        <select class=\"form-control form-control-sm\" formControlName=\"operator1\" >\r\n            <option *ngFor=\"let o of operators\" [selected]=\"o.isDefault\" [value]=\"o.code\">{{ o.label }}</option>\r\n        </select>\r\n    </li>\r\n    <li class=\"list-group-item border-0\" [ngSwitch]=\"datatype\" *ngIf=\"condition.operator1 < 1000\">\r\n        <!-- <farris-time-picker #timepicker formControlName=\"value1\" [readonly]= \"false\" [editable]= \"true\"\r\n        [hourStep] = \"1\" [minuteStep] = \"1\"  *ngSwitchCase=\"'4'\" [format]=\"filterOptions?.format\" [secondStep] = \"1\"></farris-time-picker> -->\r\n\r\n        <farris-datepicker formControlName=\"value1\" [dateFormat]=\"filterOptions?.dateFormat\" [returnFormat]=\"filterOptions?.returnFormat\" [useDefault]=\"false\" [showTime]=\"false\" *ngSwitchCase=\"'3'\" ></farris-datepicker>\r\n        <farris-datepicker formControlName=\"value1\" [dateFormat]=\"filterOptions?.dateFormat\" [returnFormat]=\"filterOptions?.returnFormat\" [useDefault]=\"false\" [showTime]=\"true\" *ngSwitchCase=\"'5'\" ></farris-datepicker>\r\n        <!-- <farris-number-spinner  name=\"value1\" [(ngModel)]=\"condition.value1\" *ngSwitchCase=\"'1'\"></farris-number-spinner> -->\r\n        <div class=\"f-datagrid-cell-formgroup farris-group-auto flex-fill\"  *ngSwitchCase=\"'1'\">\r\n            <input formControlName=\"value1\" class=\"form-control\" type=\"number\" >\r\n        </div>\r\n        <div class=\"f-datagrid-cell-formgroup farris-group-auto flex-fill\"  *ngSwitchCase=\"'4'\">\r\n            <input formControlName=\"value1\" class=\"form-control\" type=\"time\" >\r\n        </div>\r\n\r\n        <input class=\"form-control form-control-sm\" formControlName=\"value1\" *ngSwitchDefault type=\"text\" >\r\n    </li>\r\n\r\n    <ng-container *ngIf=\"condition.value1\">\r\n        \r\n        <li class=\"list-group-item border-0\">\r\n            <div class=\"custom-control custom-radio custom-control-inline\" style=\"margin-right: 0;\">\r\n                <input type=\"radio\" id=\"customRadioInline1\" formControlName=\"relation\" value=\"and\" class=\"custom-control-input\">\r\n                <label class=\"custom-control-label\" for=\"customRadioInline1\" (click)=\"chooseRelation('and')\">{{ 'datagrid.filter.and' | locale }}</label>\r\n            </div>\r\n            <div class=\"custom-control custom-radio custom-control-inline\">\r\n                <input type=\"radio\" id=\"customRadioInline2\" formControlName=\"relation\" value=\"or\" class=\"custom-control-input\">\r\n                <label class=\"custom-control-label\" for=\"customRadioInline2\"  (click)=\"chooseRelation('or')\">{{ 'datagrid.filter.or' | locale }}</label>\r\n            </div>\r\n        </li>\r\n        <ng-container *ngIf=\"condition.relation\">\r\n            \r\n            <li class=\"list-group-item border-0\">\r\n                <select class=\"form-control form-control-sm\" formControlName=\"operator2\" >\r\n                    <option *ngFor=\"let o of operators\" [selected]=\"o.isDefault\" [value]=\"o.code\">{{ o.label }}</option>\r\n                </select>\r\n            </li>\r\n            <li class=\"list-group-item border-0\" [ngSwitch]=\"datatype\" *ngIf=\"condition.operator2 < 1000\">\r\n                <!-- <farris-time-picker #timepicker formControlName=\"value2\" [readonly]= \"false\" [editable]= \"false\"\r\n                [hourStep] = \"1\" [minuteStep] = \"1\"  *ngSwitchCase=\"'4'\" [format]=\"filterOptions?.format\"[secondStep] = \"1\"></farris-time-picker> -->\r\n                <farris-datepicker formControlName=\"value2\" [dateFormat]=\"filterOptions?.dateFormat\" [useDefault]=\"false\" [showTime]=\"false\" *ngSwitchCase=\"'3'\" ></farris-datepicker>\r\n                <farris-datepicker formControlName=\"value2\" [dateFormat]=\"filterOptions?.dateFormat\" [useDefault]=\"false\" [showTime]=\"true\"  *ngSwitchCase=\"'5'\" ></farris-datepicker>\r\n                <!-- <farris-number-spinner  name=\"value2\" [(ngModel)]=\"condition.value2\" *ngSwitchCase=\"'1'\"></farris-number-spinner> -->\r\n                <div class=\"f-datagrid-cell-formgroup farris-group-auto flex-fill\"  *ngSwitchCase=\"'1'\">\r\n                    <input formControlName=\"value2\" class=\"form-control\" type=\"number\" >\r\n                </div>\r\n                <div class=\"f-datagrid-cell-formgroup farris-group-auto flex-fill\"  *ngSwitchCase=\"'4'\">\r\n                    <input formControlName=\"value2\" class=\"form-control\" type=\"time\" >\r\n                </div>\r\n                <input class=\"form-control form-control-sm\" formControlName=\"value2\" *ngSwitchDefault type=\"text\" >\r\n            </li>\r\n        </ng-container>\r\n    </ng-container>\r\n    \r\n    <li class=\"list-group-item border-0\">\r\n        <div class=\"d-flex\">\r\n            <!-- <div class=\"p-2 \"><button type=\"button\" class=\"btn btn-light\">\u9AD8\u7EA7</button></div> -->\r\n            <div class=\"ml-auto\">\r\n                <button type=\"button\" (click)=\"resetFilters($event)\" class=\"btn btn-primary\">{{ 'datagrid.filter.clear' | locale }}</button>\r\n            </div>\r\n        </div>\r\n   </li>\r\n</ul>\r\n</form>"
                }] }
    ];
    /** @nocollapse */
    ConditionEditorComponent.ctorParameters = function () { return [
        { type: Injector },
        { type: ChangeDetectorRef },
        { type: FormBuilder }
    ]; };
    ConditionEditorComponent.propDecorators = {
        operators: [{ type: Input }],
        datatype: [{ type: Input }],
        condition: [{ type: Input }],
        filterOptions: [{ type: Input }],
        conditionChange: [{ type: Output }]
    };
    return ConditionEditorComponent;
}());
export { ConditionEditorComponent };
if (false) {
    /** @type {?} */
    ConditionEditorComponent.prototype.operators;
    /** @type {?} */
    ConditionEditorComponent.prototype.datatype;
    /** @type {?} */
    ConditionEditorComponent.prototype.condition;
    /** @type {?} */
    ConditionEditorComponent.prototype.filterOptions;
    /** @type {?} */
    ConditionEditorComponent.prototype.conditionChange;
    /** @type {?} */
    ConditionEditorComponent.prototype.emptyCondition;
    /** @type {?} */
    ConditionEditorComponent.prototype.formValueChangesSubscription;
    /** @type {?} */
    ConditionEditorComponent.prototype.originalCondition;
    /** @type {?} */
    ConditionEditorComponent.prototype.form;
    /**
     * @type {?}
     * @private
     */
    ConditionEditorComponent.prototype.emptyConditonString;
    /**
     * @type {?}
     * @private
     */
    ConditionEditorComponent.prototype.inject;
    /**
     * @type {?}
     * @private
     */
    ConditionEditorComponent.prototype.cd;
    /**
     * @type {?}
     * @private
     */
    ConditionEditorComponent.prototype.fb;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uZGl0aW9uLWVkaXRvci5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZmFycmlzL3VpLWRhdGFncmlkLWZpbHRlci8iLCJzb3VyY2VzIjpbImxpYi9maWx0ZXItZWRpdG9ycy9jb25kaXRpb24tZWRpdG9yLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLE9BQU8sRUFBVSxXQUFXLEVBQUUsV0FBVyxFQUFhLE1BQU0sZ0JBQWdCLENBQUM7QUFDN0UsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFHdkQsT0FBTyxFQUFFLFNBQVMsRUFBVSxLQUFLLEVBQzdCLE1BQU0sRUFBRSxZQUFZLEVBQUUsUUFBUSxFQUFhLGlCQUFpQixFQUFpQixNQUFNLGVBQWUsQ0FBQztBQUN2RyxPQUFPLEVBQXVDLGNBQWMsRUFBRSxNQUFNLHlCQUF5QixDQUFDO0FBRzlGO0lBbUNJLGtDQUFvQixNQUFnQixFQUFVLEVBQXFCLEVBQVUsRUFBZTtRQUF4RSxXQUFNLEdBQU4sTUFBTSxDQUFVO1FBQVUsT0FBRSxHQUFGLEVBQUUsQ0FBbUI7UUFBVSxPQUFFLEdBQUYsRUFBRSxDQUFhO1FBN0JuRixhQUFRLEdBQXFCLGdCQUFnQixDQUFDLE1BQU0sQ0FBQztRQUVyRCxjQUFTLEdBQW9CO1lBQ2xDLFNBQVMsRUFBRSxDQUFDO1lBQ1osTUFBTSxFQUFFLEVBQUU7WUFDVixRQUFRLEVBQUUsRUFBRTtZQUNaLFNBQVMsRUFBRSxDQUFDO1lBQ1osTUFBTSxFQUFFLEVBQUU7U0FDYixDQUFDO1FBRU8sa0JBQWEsR0FBUSxFQUFFLENBQUM7UUFFdkIsb0JBQWUsR0FBRyxJQUFJLFlBQVksRUFBRSxDQUFDO1FBRS9DLG1CQUFjLHdCQUFRLElBQUksQ0FBQyxTQUFTLEVBQUU7UUFFdEMsaUNBQTRCLEdBQWlCLElBQUksQ0FBQztRQUNsRCxzQkFBaUIsR0FBb0IsRUFBRSxDQUFDO1FBRXhDLFNBQUksR0FBYyxJQUFJLENB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IEZvcm1Db250cm9sLCBGb3JtQnVpbGRlciwgRm9ybUdyb3VwIH0gZnJvbSAnQGFuZ3VsYXIvZm9ybXMnO1xyXG5pbXBvcnQgeyBDb2x1bW5GaWx0ZXJUeXBlIH0gZnJvbSAnQGZhcnJpcy91aS1kYXRhZ3JpZCc7XHJcbmltcG9ydCB7IFN1YnNjcmlwdGlvbiwgb2YsIG1lcmdlIH0gZnJvbSAncnhqcyc7XHJcblxyXG5pbXBvcnQgeyBDb21wb25lbnQsIE9uSW5pdCwgSW5wdXQsIE9uQ2hhbmdlcywgU2ltcGxlQ2hhbmdlcywgVmlld0NoaWxkLFxyXG4gICAgT3V0cHV0LCBFdmVudEVtaXR0ZXIsIEluamVjdG9yLCBPbkRlc3Ryb3ksIENoYW5nZURldGVjdG9yUmVmLCBBZnRlclZpZXdJbml0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IEZpbHRlclJvd09wZXJhdG9yLCAgRmlsdGVyQ29uZGl0aW9uLCBGaWx0ZXJPcGVyYXRvciB9IGZyb20gJy4uL29wZXJhdGlvbnMvb3BlcmF0b3JzJztcclxuXHJcblxyXG5AQ29tcG9uZW50KHtcclxuICAgIHNlbGVjdG9yOiAnY29uZGl0aW9uLWVkaXRvcicsXHJcbiAgICB0ZW1wbGF0ZVVybDogJy4vY29uZGl0aW9uLWVkaXRvci5jb21wb25lbnQuaHRtbCcsXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBDb25kaXRpb25FZGl0b3JDb21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQsIE9uQ2hhbmdlcywgT25EZXN0cm95LCBBZnRlclZpZXdJbml0IHtcclxuICAgIEBJbnB1dCgpIG9wZXJhdG9yczogRmlsdGVyUm93T3BlcmF0b3JbXTtcclxuICAgIEBJbnB1dCgpIGRhdGF0eXBlOiBDb2x1bW5GaWx0ZXJUeXBlID0gQ29sdW1uRmlsdGVyVHlwZS5zdHJpbmc7XHJcblxyXG4gICAgQElucHV0KCkgY29uZGl0aW9uOiBGaWx0ZXJDb25kaXRpb24gPSB7XHJcbiAgICAgICAgb3BlcmF0b3IxOiAwLFxyXG4gICAgICAgIHZhbHVlMTogJycsXHJcbiAgICAgICAgcmVsYXRpb246ICcnLFxyXG4gICAgICAgIG9wZXJhdG9yMjogMCxcclxuICAgICAgICB2YWx1ZTI6ICcnXHJcbiAgICB9O1xyXG5cclxuICAgIEBJbnB1dCgpIGZpbHRlck9wdGlvbnM6IGFueSA9IHt9O1xyXG5cclxuICAgIEBPdXRwdXQoKSBjb25kaXRpb25DaGFuZ2UgPSBuZXcgRXZlbnRFbWl0dGVyKCk7XHJcblxyXG4gICAgZW1wdHlDb25kaXRpb24gPSAgey4uLnRoaXMuY29uZGl0aW9ufTtcclxuXHJcbiAgICBmb3JtVmFsdWVDaGFuZ2VzU3Vic2NyaXB0aW9uOiBTdWJzY3JpcHRpb24gPSBudWxsO1xyXG4gICAgb3JpZ2luYWxDb25kaXRpb246IEZpbHRlckNvbmRpdGlvbiA9IHt9O1xyXG5cclxuICAgIGZvcm06IEZvcm1Hcm91cCA9IHRoaXMuZmIuZ3JvdXAoe1xyXG4gICAgICAgIG9wZXJhdG9yMTogbmV3IEZvcm1Db250cm9sKDApLFxyXG4gICAgICAgIHZhbHVlMTogbmV3IEZvcm1Db250cm9sKCcnKSxcclxuICAgICAgICByZWxhdGlvbjogbmV3IEZvcm1Db250cm9sKCcnKSxcclxuICAgICAgICBvcGVyYXRvcjI6IG5ldyBGb3JtQ29udHJvbCgwKSxcclxuICAgICAgICB2YWx1ZTI6IG5ldyBGb3JtQ29udHJvbCgnJyksXHJcbiAgICB9KTtcclxuXHJcbiAgICBwcml2YXRlIGVtcHR5Q29uZGl0b25TdHJpbmcgPSBKU09OLnN0cmluZ2lmeSh0aGlzLmVtcHR5Q29uZGl0aW9uKTtcclxuXHJcbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIGluamVjdDogSW5qZWN0b3IsIHByaXZhdGUgY2Q6IENoYW5nZURldGVjdG9yUmVmLCBwcml2YXRlIGZiOiBGb3JtQnVpbGRlcikgeyB9XHJcblxyXG4gICAgbmdPbkluaXQoKTogdm9pZCB7XHJcbiAgICAgICAgdGhpcy5vcmlnaW5hbENvbmRpdGlvbiA9IE9iamVjdC5hc3NpZ24oe30sIHRoaXMuY29uZGl0aW9uKTtcclxuICAgICAgICB0aGlzLmZvcm0ucGF0Y2hWYWx1ZSh0aGlzLmNvbmRpdGlvbik7XHJcbiAgICB9XHJcblxyXG4gICAgbmdPbkRlc3Ryb3koKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuZm9ybVZhbHVlQ2hhbmdlc1N1YnNjcmlwdGlvbikge1xyXG4gICAgICAgICAgICB0aGlzLmZvcm1WYWx1ZUNoYW5nZXNTdWJzY3JpcHRpb24udW5zdWJzY3JpYmUoKTtcclxuICAgICAgICAgICAgdGhpcy5mb3JtVmFsdWVDaGFuZ2VzU3Vic2NyaXB0aW9uID0gbnVsbDtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgbmdPbkNoYW5nZXMoY2hhbmdlczogU2ltcGxlQ2hhbmdlcykge1xyXG4gICAgfVxyXG5cclxuXHJcbiAgICBwcml2YXRlIGVtaXRDb25kaXRpb25DaGFuZ2UodjogYW55KSB7XHJcbiAgICAgICAgdGhpcy5jb25kaXRpb24gPSB2O1xyXG4gICAgICAgIGNvbnN0IGZpbHRlciA9IHRoaXMuY2hlY2tGaWx0ZXJPcGVyYXRvcigpO1xyXG4gICAgICAgIHRoaXMuY29uZGl0aW9uQ2hhbmdlLmVtaXQoZmlsdGVyKTtcclxuICAgIH1cclxuXHJcbiAgICBuZ0FmdGVyVmlld0luaXQoKSB7XHJcbiAgICAgICAgdGhpcy5mb3JtLnZhbHVlQ2hhbmdlcy5zdWJzY3JpYmUoKHY6IEZpbHRlckNvbmRpdGlvbikgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLmNvbmRpdGlvbiA9IE9iamVjdC5hc3NpZ24odGhpcy5lbXB0eUNvbmRpdGlvbiwgdGhpcy5jb25kaXRpb24pO1xyXG5cclxuICAgICAgICAgICAgaWYgKHRoaXMuZW1wdHlDb25kaXRvblN0cmluZyA9PT0gSlNPTi5zdHJpbmdpZnkodikpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuZW1pdENvbmRpdGlvbkNoYW5nZSh2KTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLmNvbmRpdGlvbi52YWx1ZTEgIT0gdi52YWx1ZTEgfHwgKHRoaXMuY29uZGl0aW9uLnZhbHVlMiAhPT0gdW5kZWZpbmVkICYmIHRoaXMuY29uZGl0aW9uLnZhbHVlMiAhPSB2LnZhbHVlMikpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmVtaXRDb25kaXRpb25DaGFuZ2Uodik7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICgodGhpcy5jb25kaXRpb24ub3BlcmF0b3IxICE9IHYub3BlcmF0b3IxICYmICB2LnZhbHVlMSAhPT0gJycpIHx8IFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAoKHRoaXMuY29uZGl0aW9uLnJlbGF0aW9uICE9IHYucmVsYXRpb24gIHx8IHRoaXMuY29uZGl0aW9uLm9wZXJhdG9yMiAhPSB2Lm9wZXJhdG9yMikgJiYgIHYudmFsdWUyICE9PSAnJykpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5lbWl0Q29uZGl0aW9uQ2hhbmdlKHYpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgY2hlY2tGaWx0ZXJPcGVyYXRvcigpIHtcclxuICAgICAgICBjb25zdCBmaWx0ZXIgPSB7Li4udGhpcy5jb25kaXRpb259O1xyXG4gICAgICAgIGNvbnN0IG9wMSA9IHBhcnNlSW50KCcnICsgZmlsdGVyLm9wZXJhdG9yMSwgMTApO1xyXG4gICAgICAgIGNvbnN0IGYxID0ge29wZXJhdG9yMTogZmlsdGVyLm9wZXJhdG9yMSwgdmFsdWUxOiBmaWx0ZXIudmFsdWUxfTtcclxuXHJcbiAgICAgICAgaWYgKG9wMSA9PT0gRmlsdGVyT3BlcmF0b3IuRW1wdHkgfHwgb3AxID09PSBGaWx0ZXJPcGVyYXRvci5Ob3RFbXB0eSkge1xyXG4gICAgICAgICAgICBmaWx0ZXIudmFsdWUxID0gJyc7XHJcbiAgICAgICAgICAgIGYxLnZhbHVlMSA9ICcnO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKGZpbHRlci52YWx1ZTEgPT09ICcnICYmIG9wMSAhPT0gRmlsdGVyT3BlcmF0b3IuRW1wdHkgJiYgb3AxICE9PSBGaWx0ZXJPcGVyYXRvci5Ob3RFbXB0eSkge1xyXG4gICAgICAgICAgICByZXR1cm4gJyc7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoIWZpbHRlci5yZWxhdGlvbikge1xyXG4gICAgICAgICAgICByZXR1cm4gZjE7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgY29uc3Qgb3AyID0gcGFyc2VJbnQoJycgKyBmaWx0ZXIub3BlcmF0b3IyLCAxMCk7XHJcbiAgICAgICAgICAgIGlmIChvcDIgPT09IEZpbHRlck9wZXJhdG9yLkVtcHR5IHx8IG9wMiA9PT0gRmlsdGVyT3BlcmF0b3IuTm90RW1wdHkpIHtcclxuICAgICAgICAgICAgICAgIGZpbHRlci52YWx1ZTIgPSAnJztcclxuICAgICAgICAgICAgICAgIHJldHVybiBmaWx0ZXI7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoIWZpbHRlci52YWx1ZTIpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZjE7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBmaWx0ZXI7XHJcbiAgICB9XHJcblxyXG4gICAgY2hvb3NlUmVsYXRpb24ocmVsYXRpb246ICdhbmQnIHwgJ29yJykge1xyXG4gICAgICAgIHRoaXMuZm9ybS5nZXQoJ3JlbGF0aW9uJykuc2V0VmFsdWUocmVsYXRpb24pO1xyXG4gICAgICAgIHRoaXMuY29uZGl0aW9uLnJlbGF0aW9uID0gcmVsYXRpb247XHJcbiAgICAgICAgaWYgKHRoaXMuY29uZGl0aW9uLm9wZXJhdG9yMiA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIHRoaXMuY29uZGl0aW9uLm9wZXJhdG9yMiA9IDA7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuY2QuZGV0ZWN0Q2hhbmdlcygpO1xyXG4gICAgfVxyXG5cclxuICAgIHJlc2V0RmlsdGVycygkZXZlbnQ6IE1vdXNlRXZlbnQpIHtcclxuICAgICAgICBpZiAodGhpcy5lbXB0eUNvbmRpdG9uU3RyaW5nICE9PSBKU09OLnN0cmluZ2lmeSh0aGlzLmNvbmRpdGlvbikpIHtcclxuICAgICAgICAgICAgdGhpcy5jb25kaXRpb24gPSBKU09OLnBhcnNlKHRoaXMuZW1wdHlDb25kaXRvblN0cmluZyk7XHJcbiAgICAgICAgICAgIHRoaXMuZm9ybS5yZXNldCh0aGlzLmNvbmRpdGlvbik7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxufVxyXG4iXX0=