/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { LocaleService } from '@farris/ui-locale';
import { Injectable, ApplicationRef, ComponentFactoryResolver, Injector, ElementRef } from '@angular/core';
import { LOADING_DEFAULT_CONFIG, loaddingDefaultConfig } from './loading.config';
import { LoadingComponent } from './loading.component';
import { max } from 'lodash-es';
var LoadingService = /** @class */ (function () {
    function LoadingService(appRef, cfr, injecotr) {
        this.appRef = appRef;
        this.cfr = cfr;
        this.injecotr = injecotr;
        this.currentLoadingInstanceID = null;
        this.loadingInstances = {};
        this.localeSer = this.injecotr.get(LocaleService);
    }
    /**
     * @param {?=} config
     * @return {?}
     */
    LoadingService.prototype.show = /**
     * @param {?=} config
     * @return {?}
     */
    function (config) {
        var _this = this;
        this.config = this.injecotr.get(LOADING_DEFAULT_CONFIG) || {};
        this.config = Object.assign(loaddingDefaultConfig, this.config);
        /** @type {?} */
        var _loadingCmpRef;
        /** @type {?} */
        var loadingFactory = this.cfr.resolveComponentFactory(LoadingComponent);
        _loadingCmpRef = loadingFactory.create(this.injecotr);
        if (config) {
            this.config = Object.assign({}, this.config, config);
        }
        /** @type {?} */
        var languageCode = localStorage.getItem('languageCode');
        // if (languageCode === 'en') {
        //     this.config.message = 'Loading...';
        // }
        if (this.localeSer) {
            if (!this.config.message || this.config.message === '正在加载中，请稍候...') {
                this.config.message = this.localeSer.getValue('loading.message');
            }
        }
        /** @type {?} */
        var container = this.config.container;
        if (container === 'body') {
            document.querySelector((/** @type {?} */ (container))).appendChild(_loadingCmpRef.location.nativeElement);
        }
        else {
            if (container instanceof ElementRef) {
                container.nativeElement.appendChild(_loadingCmpRef.location.nativeElement);
            }
            else {
                if (container instanceof Element) {
                    container.appendChild(_loadingCmpRef.location.nativeElement);
                }
            }
        }
        _loadingCmpRef.instance.delay = this.config.delay;
        _loadingCmpRef.instance.isActive = true;
        Object.assign(_loadingCmpRef.instance, this.config);
        _loadingCmpRef.instance.closed.subscribe((/**
         * @param {?} state
         * @return {?}
         */
        function (state) {
            if (!state) {
                delete _this.loadingInstances[_loadingCmpRef.instance.id];
                _this.currentLoadingInstanceID = _this.getMaxLoadingID();
                _this.clearDom(_loadingCmpRef);
            }
        }));
        _loadingCmpRef.changeDetectorRef.markForCheck();
        _loadingCmpRef.changeDetectorRef.detectChanges();
        /** @type {?} */
        var loadingID = this.createInsId();
        _loadingCmpRef.instance.id = loadingID;
        this.loadingInstances[loadingID] = _loadingCmpRef;
        this.currentLoadingInstanceID = loadingID;
        return _loadingCmpRef.instance;
    };
    /**
     * @param {?=} loadingId
     * @return {?}
     */
    LoadingService.prototype.close = /**
     * @param {?=} loadingId
     * @return {?}
     */
    function (loadingId) {
        /** @type {?} */
        var id = loadingId || this.currentLoadingInstanceID;
        /** @type {?} */
        var loadingRef = this.loadingInstances[id];
        if (loadingRef) {
            loadingRef.instance.close();
        }
    };
    /**
     * @return {?}
     */
    LoadingService.prototype.clearAll = /**
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var keys = Object.keys(this.loadingInstances);
        if (keys.length) {
            keys.forEach((/**
             * @param {?} id
             * @return {?}
             */
            function (id) {
                _this.clearDom(_this.loadingInstances[id]);
            }));
        }
        else {
            /** @type {?} */
            var loadings = document.querySelectorAll('farris-loading');
            if (loadings.length) {
                loadings.forEach((/**
                 * @param {?} el
                 * @return {?}
                 */
                function (el) { return el.remove(); }));
            }
            this.loadingInstances = {};
        }
    };
    /**
     * @private
     * @param {?} _loadingCmpRef
     * @return {?}
     */
    LoadingService.prototype.clearDom = /**
     * @private
     * @param {?} _loadingCmpRef
     * @return {?}
     */
    function (_loadingCmpRef) {
        if (_loadingCmpRef && _loadingCmpRef.location) {
            /** @type {?} */
            var loadingEl = _loadingCmpRef.location.nativeElement;
            if (loadingEl.parentNode) {
                loadingEl.parentNode.removeChild(loadingEl);
            }
            _loadingCmpRef.destroy();
        }
        _loadingCmpRef = null;
    };
    /**
     * @private
     * @return {?}
     */
    LoadingService.prototype.createInsId = /**
     * @private
     * @return {?}
     */
    function () {
        return this.getMaxLoadingID() + 1;
    };
    /**
     * @private
     * @return {?}
     */
    LoadingService.prototype.getMaxLoadingID = /**
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var ids = Object.keys(this.loadingInstances).map((/**
         * @param {?} k
         * @return {?}
         */
        function (k) { return parseInt(k, 10); }));
        if (ids.length) {
            return max(ids);
        }
        return 0;
    };
    LoadingService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    LoadingService.ctorParameters = function () { return [
        { type: ApplicationRef },
        { type: ComponentFactoryResolver },
        { type: Injector }
    ]; };
    return LoadingService;
}());
export { LoadingService };
if (false) {
    /** @type {?} */
    LoadingService.prototype.config;
    /**
     * @type {?}
     * @private
     */
    LoadingService.prototype.currentLoadingInstanceID;
    /**
     * @type {?}
     * @private
     */
    LoadingService.prototype.loadingInstances;
    /**
     * @type {?}
     * @private
     */
    LoadingService.prototype.localeSer;
    /**
     * @type {?}
     * @private
     */
    LoadingService.prototype.appRef;
    /**
     * @type {?}
     * @private
     */
    LoadingService.prototype.cfr;
    /**
     * @type {?}
     * @private
     */
    LoadingService.prototype.injecotr;
}
//# sourceMappingURL=data:application/json;base64,