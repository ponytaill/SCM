{"version":3,"sources":["../../../../node_modules/tslib/tslib.es6.js","ng://@farris/ui-datagrid-settings/lib/datagrid-settings.component.ts","ng://@farris/ui-datagrid-settings/lib/getValueWithLocaleId.ts","ng://@farris/ui-datagrid-settings/lib/simple-mode/simple-columns.component.ts","ng://@farris/ui-datagrid-settings/lib/datagrid-scheme.service.ts","ng://@farris/ui-datagrid-settings/lib/scheme/newscheme.component.ts","ng://@farris/ui-datagrid-settings/lib/scheme/scheme-list.component.ts","ng://@farris/ui-datagrid-settings/lib/datagrid-settings.service.ts","ng://@farris/ui-datagrid-settings/lib/datagrid-sort-setting.component.ts","ng://@farris/ui-datagrid-settings/lib/datagrid-view-columns.component.ts","ng://@farris/ui-datagrid-settings/lib/column-format-setting/column-format-setting.component.ts","ng://@farris/ui-datagrid-settings/lib/column-group/column-group.component.ts","ng://@farris/ui-datagrid-settings/lib/column-format-setting/column-visible-drag.directive.ts","ng://@farris/ui-datagrid-settings/lib/column-group/column-group-drag.directive.ts","ng://@farris/ui-datagrid-settings/lib/datagrid-settings.module.ts"],"names":["__assign","Object","assign","t","s","i","n","arguments","length","p","prototype","hasOwnProperty","call","apply","this","__read","o","m","Symbol","iterator","r","e","ar","next","done","push","value","error","__spread","concat","DatagridSettingsComponent","cd","inject","activeTabIndex","sortTreeData","sortNames","sortInfo","viewTreeData","viewColumns","columnFormat","groupField","canSetColumnSort","canSetColumnVisible","enableReset","cancelHandle","EventEmitter","submitHandle","reset","concise","schemeInfo","searchItems","alignItems","summaryItems","summaryItems2","messager","get","MessagerService","localeSer","LocaleService","title","getValue","initData","gridInstance","sortName","split","getViewColumns","columns","ngOnInit","enableScheme","ngOnChanges","changes","isFirstChange","close","$event","stopPropagation","modalRef","changeTabs","idx","onSortInfoChange","_this","visibleCls","forEach","cols","_getViewColumns","filter","visible","undefined","map","field","c","colspan","mergeColumnFormats","keys","_a","sortOrder_1","sortOrder","col","find","sortable","order","onColumnFormatChange","colFormatData","onSubmitClick","emit","onCancelClick","onSettingReset","restorDefaultText","confirm","subscribe","reset2Default","options","dfs","initialOptions","columnFields","newColumns_1","halign","align","width","footer","groupFooter","sort","sortOrders","showConcise","Component","args","selector","template","encapsulation","ViewEncapsulation","None","ChangeDetectorRef","Injector","Input","Output","ViewChild","getMultilingualValue","valObj","localeId","val","console","log","SimpleColumnsComponent","injector","seartTypes","fields","clickToHidden","top","_schemeList","cls","formatChange","fieldsChange","submit","closed","advanced","addNewScheme","showSchemeList","activeItemChange","allCols","columnType","isEn","showSchemePanel","switchValue","currentSchemeItem","searchResultIsVisibleAll","defaultSchemeName","settings","defineProperty","JSON","parse","name","onClick","target","indexOf","onEscKeydown","document","querySelector","onEnterKeydown","onControlGKeydown","ctrlKey","preventDefault","key","toLowerCase","showAdvanced","searchInput","nativeElement","focus","getCurrentSchemeSettings","queryConditionString","dirtySettings","container","filterColumns","searchWords","onFieldsChanged","onDblClick","onCheckboxClick","checked","index","splice","item","searchColumn","txt","onFieldDrop","fieldInfo","ulElRef","removedIndex","addedIndex","moveItem","targetItem","moveItemIndex","findIndex","targetItemIndex","removedItem","getCheckAllState","visibleLen","onCheckAllClick","state","isCheckAll","a","viewFields","_settings","content","bind","btnOk","currentScheme","onChooseScheme","setTimeout","schemeitemsEleRef","itemEl","id","scrollIntoViewIfNeeded","scrollIntoView","onlySeeVisibleColumns","onNewSchemeClick","onShowSchemeList","onSchemeItemClick","schemeSettings","detectChanges","flag","HostBinding","HostListener","SCHEME_WEBAPI","DatagridSchemeService","restService","schemeList$","Subject","update","d","gridId","setRestService","httpSer","getWebFormKey","webformHash","window","location","hash","substring","lastIndexOf","getSchemeKey","getSchemeList","gridID","uri","invoke","saveScheme","scheme","isUpdate","httpMethod","belongId","body","updateScheme","param","of","getStateValue","statePro","_i","dgState","reduce","updateStateValue","propertyName","setSchemeList","newSchemeList","hasSchemeName","schemeName","schemeList","trim","replayNames_1","currentNames","values","k","includes","checkAuthority","getLanguages","NewSchemeComponent","dataPermissionIds","closeModal","submitModal","isDefault","type","orgids","schemeType","noPublicAuthority","noOrgAuthority","languages","code","default","nameMaxLength","zh-CHS","zh-CHT","en","onSelectedOrg","selections","orgId","onSetRangeType","refresh","hasAuthority","public","org","getSelectedId","clearAllOrgs","SchemeListComponent","items","removeItem","colName","colType","colDefault","colCreator","colMgr","publicTxt","privateTxt","orgTxt","formatter","v","schemeIsDefault","btnDel","onClose","setDefault","ctx","rowData","defaultItem","defaultId","onSchemeDel","deletedIds","GRID_SETTINGS_WEBAPI","InjectionToken","DatagridSettingsService","modalSer","idService","multiSortMsg","columnsSortableMsg","notSupportHeaderGroupMsg","notShowDialog","_httpRestService","gridRefs","activeSchemeItem","saving","cfr","app","schemeListSubscription","ComponentFactoryResolver","ApplicationRef","notifyService","NotifyService","schemeService","destroy","setActiveSchemeItem","registerGridInstance","dg","getGridInstance","dgID","updateSchemeSettings","schemeItem","schemeContentObj","stringify","updateActiveSchemeItemSettings","dgId","getActiveSchemeItem","activeItem","schemekey","getSearchTypes","showSimple","selectedSchemeItem","convertColumnsToSimple","ControlPanelFeild","searchTypes","simpleRef_1","resolveComponentFactory","create","attachView","hostView","instance","_currentSchemtItem","appendChild","pipe","switchMap","style","right","timer","remove","unsubscribe","disabled","updateGridView","visibleFields","showNewSchemeDialog","auth","list","showSchemeListDialog","cloneDeep","success","_activeSchemeItem","hasActiveItem","getDefaultScheme","show","opts","enableSimpleMode","_editColSortInfo","showSetColumnsTab","isHeaderGroup","currentSettings","fcol","treeData","convertColumns2TreeData","viewColumnsTreeData","checkViewTreeNodes","defaultOpts","height","showHeader","initialState","showButtons","modalOpts","dialog","draggbar","handle","header","warning","multiSort","hasEnableSortColumns","flatColumns","grid","getChilds","rowIndex","colStartIndex","colCount","forSort","childCols","_count","slice","element","data","selectable","expanded","children","_","treeNodes","tn","_cols","rowspan","allowGrouping","dataType","resetGridView","btn","sortInfo_1","viewColumns_1","columnFormat_1","_groupField","groupRows","join","_colformats","saveData","setUserConfig","updateColumnFormat","newVisibleOrderColumns","columnsChanged","clearSort","hideColumns","isNewAddColumn","newCols","formatCol","f","text","calculationType","parseInt","showFooter","footerTemplate","createConfigKey","dgs","getCurrentUserSettings","config","saveUserConfig","LOCALEID","currentConfig","localStorage","getItem","_config","setItem","httpRestService","gridIns","activeScheme_1","hasOrgAuthority","authOrganizationData","_saveUserConfig","getUserConfig","_getUserConfig","con","defaultScheme","publicSchemes","getSettings","forkJoin","_b","userSetting","supportedLanguages","userSettings","userConfigSetting","configkey1","configkey2","configkey3","textvalue","saveUserSettings","resetUserConfig","getUserSettings","ucs","textValue","buildSubmitData","localeKey","canDel","schemeListDlg","msg","simpleRef","resizable","newSchemeDlg","createNewScheme","info","hasPublicAuthority","authOperationData","hasName","Array","isArray","msgs","requiredName","selectedSettings","newId","guid","isSystem","extendId","extendInfo","buildOrgAndSchemeRelations","schemeId","orgIds","relatedId","activeScheme","Injectable","BsModalService","IdService","DatagridSortSettingComponent","idField","valueField","textField","selectedIds","sortInfoChange","setFieldSortOrder","ms","moveToLeft","onSelectionsChange","getSortInfo","names_1","orders_1","si","onBeforeMove","DatagridViewColumnsComponent","_selectedIds","selectedIdsChange","vals","hiddenColumn","column","ColumnFormatSettingComponent","gridSettingComponentRef","formatData","activeField","showGridFooter","setFormatData","checkColumnOptions","colForm","valueChanges","pristine","ct","onFieldClick","ColumnGroupSettingComponent","formatColumns","groupFields","groupFieldsChange","formatColumnsChange","groupColumns","allowGroupColumns","activeCalculationCol","showSelectColumnsPanel","setGroupColumns","registerEventHandle","initCalculationColumns","groupingSettingEl","addEventListener","selectcolumnspanel","onGroupFieldsChange","getAllowGroupingColumns","toggleGroupingColumnPanel","addGroupColumn","onRemoveGroupingField","onGroupingFieldDropped","smoothDnd","constants","wrapperClass","animationClass","SmoothDndForVisible","dropHandler","dropHandlers","reactDropHandler","handler","wrapChild","ColumnVisibleDragDirective","ngzone","render","el","drop","behaviour","dragHandleSelector","dropPlaceholder","className","getGhostParent","getChildPayload","shouldAcceptDrop","sourceContainerOptions","payload","onDropReady","dropResult","run","onDrop","onDragEnter","onDragStart","onDragEnd","ngAfterViewInit","initDnD","ngOnDestroy","disposeDnd","dispose","Directive","NgZone","Renderer2","ElementRef","smoothDnD","SmoothDndForGroupingField","ColumnGroupDragDirective","orientation","DatagridSettingsModule","forRoot","apiUri","ngModule","providers","provide","GRID_SETTINGS_SERVICE","useClass","NgModule","declarations","imports","CommonModule","FormsModule","MultiSelectModule","ComboListModule","DatagridModule","FarrisCommonModule","MessagerModule","LocaleModule","ModalModule","SwitchModule","FarrisTooltipModule","NotifyModule","OrganizationSelectorModule","LanguageTextboxModule","entryComponents","exports"],"mappings":"g+CA6BO,IAAIA,EAAW,WAQlB,OAPAA,EAAWC,OAAOC,QAAU,SAAkBC,GAC1C,IAAK,IAAIC,EAAGC,EAAI,EAAGC,EAAIC,UAAUC,OAAQH,EAAIC,EAAGD,IAE5C,IAAK,IAAII,KADTL,EAAIG,UAAUF,GACOJ,OAAOS,UAAUC,eAAeC,KAAKR,EAAGK,KAAIN,EAAEM,GAAKL,EAAEK,IAE9E,OAAON,IAEKU,MAAMC,KAAMP,YAkFzB,SAASQ,EAAOC,EAAGV,GACtB,IAAIW,EAAsB,mBAAXC,QAAyBF,EAAEE,OAAOC,UACjD,IAAKF,EAAG,OAAOD,EACf,IAAmBI,EAAYC,EAA3BhB,EAAIY,EAAEL,KAAKI,GAAOM,EAAK,GAC3B,IACI,WAAc,IAANhB,GAAgBA,KAAM,MAAQc,EAAIf,EAAEkB,QAAQC,MAAMF,EAAGG,KAAKL,EAAEM,OAExE,MAAOC,GAASN,EAAI,CAAEM,MAAOA,GACjC,QACQ,IACQP,IAAMA,EAAEI,OAASP,EAAIZ,EAAU,YAAIY,EAAEL,KAAKP,GAE1D,QAAkB,GAAIgB,EAAG,MAAMA,EAAEM,OAE7B,OAAOL,EAGJ,SAASM,IACZ,IAAK,IAAIN,EAAK,GAAIjB,EAAI,EAAGA,EAAIE,UAAUC,OAAQH,IAC3CiB,EAAKA,EAAGO,OAAOd,EAAOR,UAAUF,KACpC,OAAOiB,mBCwBP,SAAAQ,EAAoBC,EAA+BC,GAA/BlB,KAAAiB,GAAAA,EAA+BjB,KAAAkB,OAAAA,EAlCnDlB,KAAAmB,eAAiB,EAGjBnB,KAAAoB,aAAe,GACfpB,KAAAqB,UAAY,GACZrB,KAAAsB,SAAgB,GAGhBtB,KAAAuB,aAAe,GACfvB,KAAAwB,YAAc,GAEdxB,KAAAyB,aAAe,GAEfzB,KAAA0B,WAAa,GAEb1B,KAAA2B,kBAAmB,EACnB3B,KAAA4B,qBAAsB,EACb5B,KAAA6B,aAAc,EAGb7B,KAAA8B,aAAe,IAAIC,EAAAA,aACnB/B,KAAAgC,aAAe,IAAID,EAAAA,aACnB/B,KAAAiC,MAAQ,IAAIF,EAAAA,aACZ/B,KAAAkC,QAAU,IAAIH,EAAAA,aACf/B,KAAAmC,WAA2B,KAGpCnC,KAAAoC,YAAc,GACdpC,KAAAqC,WAAa,GACbrC,KAAAsC,aAAe,GACftC,KAAAuC,cAAgB,GAKZvC,KAAKwC,SAAWxC,KAAKkB,OAAOuB,IAAIC,EAAAA,gBAAiB,MACjD1C,KAAK2C,UAAY3C,KAAKkB,OAAOuB,IAAIG,EAAAA,eACjC5C,KAAKoC,YAAc,CACf,CAAExB,MAAO,MAAOiC,MAAO7C,KAAK2C,UAAUG,SAAS,iCAC/C,CAAElC,MAAO,UAAWiC,MAAO7C,KAAK2C,UAAUG,SAAS,qCACnD,CAAElC,MAAO,SAAUiC,MAAO7C,KAAK2C,UAAUG,SAAS,qCAGtD9C,KAAKqC,WAAa,CACd,CAAEzB,MAAO,OAAQiC,MAAO7C,KAAK2C,UAAUG,SAAS,gCAChD,CAAElC,MAAO,SAAUiC,MAAO7C,KAAK2C,UAAUG,SAAS,kCAClD,CAAElC,MAAO,QAASiC,MAAO7C,KAAK2C,UAAUG,SAAS,kCAGrD9C,KAAKsC,aAAe,CAChB,CAAE1B,OAAQ,EAAGiC,MAAO7C,KAAK2C,UAAUG,SAAS,kCAC5C,CAAElC,MAAO,EAAGiC,MAAO7C,KAAK2C,UAAUG,SAAS,iCAC3C,CAAElC,MAAO,EAAGiC,MAAO7C,KAAK2C,UAAUG,SAAS,iCAC3C,CAAElC,MAAO,EAAGiC,MAAO7C,KAAK2C,UAAUG,SAAS,iCAC3C,CAAElC,MAAO,EAAGiC,MAAO7C,KAAK2C,UAAUG,SAAS,qCAC3C,CAAElC,MAAO,EAAGiC,MAAO7C,KAAK2C,UAAUG,SAAS,mCAG/C9C,KAAKuC,cAAgB,CACjB,CAAE3B,OAAQ,EAAGiC,MAAO7C,KAAK2C,UAAUG,SAAS,kCAC5C,CAAElC,MAAO,EAAGiC,MAAO7C,KAAK2C,UAAUG,SAAS,mCA2KvD,OAtKY9B,EAAApB,UAAAmD,SAAR,WACI/C,KAAKqB,UAAYrB,KAAKgD,aAAaC,SAAWjD,KAAKgD,aAAaC,SAASC,MAAM,KAAO,GACtFlD,KAAKwB,YAAcxB,KAAKmD,iBACxBnD,KAAKsB,SAAWtB,KAAKgD,aAAyB,YAAK,GACnDhD,KAAKyB,aAAYX,EAAOd,KAAKoD,QAAQ,IACrCpD,KAAK0B,WAAa1B,KAAKgD,aAAatB,WAAa1B,KAAKgD,aAAatB,WAAWwB,MAAM,KAAO,IAG/FlC,EAAApB,UAAAyD,SAAA,WACI,GAAKrD,KAAKgD,aAAaM,aAEhB,CACH,GAAItD,KAAKmC,WAqBL,OApBAnC,KAAKsB,SAAWtB,KAAKmC,WAAWb,UAAY,GACxCtB,KAAKsB,WACLtB,KAAKqB,UAAYrB,KAAKsB,SAAS2B,UAAY,IAE/CjD,KAAKwB,YAAcxB,KAAKmC,WAAWX,YACnCxB,KAAKyB,aAAezB,KAAKmC,WAAWV,aAC/BzB,KAAKyB,eACNzB,KAAKyB,aAAYX,EAAOd,KAAKoD,QAAQ,UAGrCpD,KAAKmC,WAAWT,WAC0B,iBAA/B1B,KAAKmC,WAAWT,WACvB1B,KAAK0B,WAAc1B,KAAKmC,WAAqB,WAASe,MAAM,KAE5DlD,KAAK0B,WAAa1B,KAAKmC,WAAWT,YAAc,GAGpD1B,KAAK0B,WAAa,IAK1B1B,KAAK+C,gBAzBL/C,KAAK+C,YA6Bb/B,EAAApB,UAAA2D,YAAA,SAAYC,GACJA,EAAQJ,SAAYI,EAAQJ,QAAQK,iBAK5CzC,EAAApB,UAAA8D,MAAA,SAAMC,GACFA,EAAOC,kBACH5D,KAAK6D,UACL7D,KAAK6D,SAASH,SAItB1C,EAAApB,UAAAkE,WAAA,SAAWH,EAAoBI,GAC3BJ,EAAOC,kBACP5D,KAAKmB,eAAiB4C,GAG1B/C,EAAApB,UAAAoE,iBAAA,SAAiB1C,GACbtB,KAAKsB,SAAWA,GAGZN,EAAApB,UAAAuD,eAAR,WAAA,IAAAc,EAAAjE,KAEQkE,EAAa,GASjB,OARIlE,KAAKoD,QAAQ1D,OAAS,EACtBM,KAAKoD,QAAQe,QAAO,SAACC,GACjBF,EAAaA,EAAWnD,OAAOkD,EAAKI,gBAAgBD,MAGxDF,EAAalE,KAAKoD,QAAQ,GAAGkB,OAAM,SAAC9E,GAAK,OAACA,EAAE+E,SAAW/E,EAAE+E,UAAYC,YAGlEN,EAAWO,IAAG,SAACjF,GAAK,OAAAA,EAAEkF,SAGzB1D,EAAApB,UAAAyE,gBAAR,SAAwBD,GACpB,OAAOA,EAAKE,OAAM,SAACK,GAAK,OAACA,EAAEC,UAAYD,EAAEJ,SAAWI,EAAEJ,UAAYC,cAI9DxD,EAAApB,UAAAiF,mBAAR,WAAA,IAAAZ,EAAAjE,KACI,GAAIA,KAAKsB,UAAYnC,OAAO2F,KAAK9E,KAAKsB,UAAU5B,QAAUM,KAAKyB,cAAgBzB,KAAKyB,aAAa/B,OAAQ,CAC/F,IAAAqF,EAAA/E,KAAAsB,SAAE2B,EAAA8B,EAAA9B,SAAU+B,EAAAD,EAAAE,UACdhC,GAAYA,EAASvD,QACrBuD,EAASkB,QAAO,SAAE3E,EAAGD,OACX2F,EAAMjB,EAAKxC,aAAa0D,KAAI,SAAED,GAChC,OAAOA,EAAIR,QAAUlF,IAErB0F,IACAA,EAAIE,UAAW,EACfF,EAAIG,MAAQL,EAAUzF,IAAM,WAQhDyB,EAAApB,UAAA0F,qBAAA,SAAqBC,GACjBvF,KAAKyB,aAAe8D,GAGxBvE,EAAApB,UAAA4F,cAAA,SAAc7B,GACV3D,KAAK6E,qBACL7E,KAAKgC,aAAayD,KAAK9B,IAG3B3C,EAAApB,UAAA8F,cAAA,SAAc/B,GACV3D,KAAK8B,aAAa2D,KAAK9B,IAG3B3C,EAAApB,UAAA+F,eAAA,SAAehC,GAAf,IAAAM,EAAAjE,KAEU4F,EAAoB5F,KAAK2C,UAAUG,SAAS,iDAAmD,cACrG9C,KAAKwC,SAASqD,QAAQD,GAAmBE,UAAS,SAAEzG,GAC5CA,GACA4E,EAAK8B,mBAKT/E,EAAApB,UAAAmG,cAAR,WAAA,IAAA9B,EAAAjE,KACUgG,EAAUhG,KAAKgD,aAAaiD,IAAY,OAAEC,eAChD,GAAIF,EAAQG,cAAgBH,EAAQG,aAAazG,OAAQ,KAE/C0G,EAAa,GACnBJ,EAAQG,aAAahC,QAAO,SAACQ,GACzB,GAAgB,+BAAZA,EAAED,MAAwC,KACpCQ,EAAMjB,EAAKjB,aAAaI,QAAQ,GAAG+B,KAAI,SAAE3F,GAAW,OAAAA,EAAEkF,QAAUC,EAAED,QACpEQ,IACAA,EAAIX,QAAUI,EAAEJ,QAChBW,EAAImB,OAAS1B,EAAE0B,OACfnB,EAAIoB,MAAQ3B,EAAE2B,MACdpB,EAAIqB,MAAQ5B,EAAE4B,MACdrB,EAAIsB,OAAMtH,EAAA,GAAOyF,EAAE6B,QAAU,IAC7BtB,EAAIuB,YAAWvH,EAAA,GAAOyF,EAAE8B,aAAe,IACvCL,EAAWzF,KAAKuE,OAK5BlF,KAAKoD,QAAU,CAACgD,GAKpB,GAFApG,KAAKwB,YAAcxB,KAAKmD,iBAEpB6C,EAAQU,KAAM,KACRC,EAAaX,EAAQU,KAAKzB,UAAWe,EAAQU,KAAKzB,UAAU/B,MAAM,KAAO,GAC/ElD,KAAKqB,UAAY2E,EAAQU,KAAKzD,SAAW+C,EAAQU,KAAKzD,SAASC,MAAM,KAAO,GAC5ElD,KAAKsB,SAAW,CAAE2B,SAAUjD,KAAKqB,UAAW4D,UAAY0B,QAExD3G,KAAKqB,UAAY,GACjBrB,KAAKsB,SAAW,GAEpBtB,KAAKyB,aAAYX,EAAOd,KAAKoD,QAAQ,IACrCpD,KAAK0B,WAAcsE,EAAQtE,WAAasE,EAAQtE,WAAWwB,MAAM,KAAO,IAG5ElC,EAAApB,UAAAgH,YAAA,SAAYjD,GAEJA,GACAA,EAAOC,kBAEX5D,KAAK6E,qBACL7E,KAAKkC,QAAQuD,4BA5VpBoB,EAAAA,UAASC,KAAA,CAAC,CACPC,SAAU,oBACVC,SAAA,u1GAgHAC,cAAeC,EAAAA,kBAAkBC,aA9G7B,gxHAZ8BC,EAAAA,yBAAmBC,EAAAA,iDAgJpDC,EAAAA,uBACAA,EAAAA,4BAEAC,EAAAA,6BACAA,EAAAA,sBACAA,EAAAA,wBACAA,EAAAA,2BACAD,EAAAA,sBAEAE,EAAAA,UAASV,KAAA,CAAC,aA6Mf9F,KCxWA,SAAgByG,EAAqBC,EAAQC,GACzC,GAAID,GAA4B,iBAAXA,GAAuBvI,OAAO2F,KAAK4C,GAAQhI,OAAS,EAAG,KAElEkI,EAAMF,EADZC,EAAWA,GAAY,UAEvB,OAAIC,IAAQpD,UACDoD,GAEPC,QAAQC,IAAI,iBAAiBH,EAAQ,QAASD,GACvC,IAGX,MAAO,oBCqEX,SAAAK,EAAoBC,EAA2B/G,GAA3BjB,KAAAgI,SAAAA,EAA2BhI,KAAAiB,GAAAA,EA9DtCjB,KAAAsD,cAAe,EACftD,KAAAiI,WAAkB,GAElBjI,KAAAoD,QAAU,GAEVpD,KAAAkI,OAAS,GAETlI,KAAAmI,eAAgB,EAEhBnI,KAAAoI,IAAM,EACPpI,KAAAqI,YAAc,GAcArI,KAAAsI,IAAM,kCASlBtI,KAAAuI,aAAe,IAAIxG,EAAAA,aACnB/B,KAAAwI,aAAe,IAAIzG,EAAAA,aACnB/B,KAAAyI,OAAS,IAAI1G,EAAAA,aACb/B,KAAA0I,OAAS,IAAI3G,EAAAA,aACb/B,KAAA2I,SAAW,IAAI5G,EAAAA,aAEf/B,KAAA4I,aAAe,IAAI7G,EAAAA,aACnB/B,KAAA6I,eAAiB,IAAI9G,EAAAA,aACrB/B,KAAA8I,iBAAmB,IAAI/G,EAAAA,aACjC/B,KAAA+I,QAAU,GACV/I,KAAAgJ,WAAa,MAIbhJ,KAAAiJ,MAAO,EAEPjJ,KAAAkJ,iBAAkB,EAElBlJ,KAAAmJ,aAAc,EAEdnJ,KAAAoJ,kBAAoB,KAEpBpJ,KAAAqJ,0BAA2B,EAC3BrJ,KAAAsJ,kBAAoB,OAIpBtJ,KAAAuJ,SAAyB,GAGrBvJ,KAAK2C,UAAY3C,KAAKgI,SAASvF,IAAIG,EAAAA,cAAe,MAClD5C,KAAKwC,SAAWxC,KAAKgI,SAASvF,IAAIC,EAAAA,gBAAiB,MAga3D,OArdIvD,OAAAqK,eACIzB,EAAAnI,UAAA,aAAU,KADd,WAEI,OAAOI,KAAKqI,iBAEhB,SAAeT,GAAf,IAAA3D,EAAAjE,KACQ4H,GAAOA,EAAIlI,QACXkI,EAAIzD,QAAO,SAAC3E,GACRA,EAAW,QAAIiI,EAAqBgC,KAAKC,MAAMlK,EAAEmK,MAAO1F,EAAKtB,UAAUgF,YAG/E3H,KAAKqI,YAAcT,GAAO,oCA+C9BG,EAAAnI,UAAAgK,QADA,SACQjG,GAEJA,EAAOC,mBACSD,EAAOkG,OAAkB,WAAK,IAClCC,QAAQ,oCAAsC,GAElD9J,KAAKmI,eACLnI,KAAK0D,QAIb1D,KAAKkJ,iBAAkB,GAI3BnB,EAAAnI,UAAAmK,aADA,SACapG,GACTA,EAAOC,kBACFoG,SAASC,cAAc,oBACxBjK,KAAK0D,SAKbqE,EAAAnI,UAAAsK,eADA,SACevG,GACXA,EAAOC,kBACFoG,SAASC,cAAc,oBACxBjK,KAAKwF,iBAKbuC,EAAAnI,UAAAuK,kBADA,SACkBxG,GACVA,EAAOyG,UAAYJ,SAASC,cAAc,qBAC1CtG,EAAO0G,iBACP1G,EAAOC,kBAC0B,MAA7BD,EAAO2G,IAAIC,cACXvK,KAAKwK,aAAa7G,GACkB,MAA7BA,EAAO2G,IAAIC,cAClBvK,KAAK2F,iBAC+B,MAA7BhC,EAAO2G,IAAIC,eAClBvK,KAAKyK,YAAYC,cAAcC,UAKnC5C,EAAAnI,UAAAgL,yBAAR,WACI,OAAI5K,KAAKoJ,kBACkBK,KAAKC,MAAM1J,KAAKoJ,kBAAkByB,sBACnC7K,KAAK2C,UAAUgF,UAGlC,MAGXI,EAAAnI,UAAAyD,SAAA,WACIrD,KAAK+I,QAAU/I,KAAKoD,QAAQ,GACxBpD,KAAKgD,aAAaM,cAAgBtD,KAAKoJ,oBACvCpJ,KAAKuJ,SAAWvJ,KAAK4K,4BAA8B,IAGnD5K,KAAKuJ,UAAYvJ,KAAKuJ,SAAS/H,aAAexB,KAAKuJ,SAAS/H,YAAY9B,QACxEM,KAAKkI,OAASlI,KAAKuJ,SAAS/H,YAC5BxB,KAAK8K,eAAc,IAEnB9K,KAAKkI,OAASlI,KAAKmD,iBAGvBnD,KAAK+K,UAAUL,cAAcC,QAE7B3K,KAAKsJ,kBAAoBtJ,KAAK2C,UAAUG,SAAS,8BAAgC9C,KAAKgD,aAAasG,mBAG/FvB,EAAAnI,UAAAuD,eAAR,WAAA,IAAAc,EAAAjE,KAEQkE,EAAa,GASjB,OARIlE,KAAKoD,QAAQ1D,OAAS,EACtBM,KAAKoD,QAAQe,QAAO,SAACC,GACjBF,EAAaA,EAAWnD,OAAOkD,EAAKI,gBAAgBD,MAGxDF,EAAalE,KAAKoD,QAAQ,GAAGkB,OAAM,SAAC9E,GAAK,OAACA,EAAE+E,SAAW/E,EAAE+E,UAAYC,YAGlEN,EAAWO,IAAG,SAACjF,GAAK,OAAAA,EAAEkF,SAGzBqD,EAAAnI,UAAAyE,gBAAR,SAAwBD,GACpB,OAAOA,EAAKE,OAAM,SAACK,GAAK,OAACA,EAAEC,UAAYD,EAAEJ,SAAWI,EAAEJ,UAAYC,cAQtEuD,EAAAnI,UAAAoL,cAAA,SAAcC,GAAd,IAAAhH,EAAAjE,UAAc,IAAAiL,IAAAA,EAAA,QACN7G,EAAO,GAGPA,EADApE,KAAKmJ,YACEnJ,KAAKoD,QAAQ,GAAGkB,OAAM,SAAC9E,GAAK,OAAAyE,EAAKiE,OAAO4B,QAAQtK,EAAEkF,QAAU,IAE5D1E,KAAKoD,QAAQ,GAGpB6H,IACA7G,EAAOA,EAAKE,OAAM,SAACK,GAAK,OAAAA,EAAE9B,MAAM0H,cAAcT,QAAQmB,EAAYV,gBAAkB,KAGxFvK,KAAK+I,QAAU3E,GAKX2D,EAAAnI,UAAAsL,gBAAR,WACSlL,KAAKgD,aAAaM,cACnBtD,KAAKwI,aAAa/C,KAAKzF,KAAKkI,SAGpCH,EAAAnI,UAAAuL,WAAA,SAAWxH,EAAQuB,GAEflF,KAAKoL,gBAAgBzH,EAAQuB,IAGjC6C,EAAAnI,UAAAwL,gBAAA,SAAgBzH,EAAQuB,GAEpBvB,EAAOC,kBACP5D,KAAKkJ,iBAAkB,MACnBmC,GAAU,EACRC,EAAQtL,KAAKkI,OAAO4B,QAAQ5E,EAAIR,QACvB,IAAX4G,GACAtL,KAAKkI,OAAOvH,KAAKuE,EAAIR,OACrB2G,GAAU,IAEVrL,KAAKkI,OAAOqD,OAAOD,EAAO,GAC1BD,GAAU,OAGRG,EAAOxL,KAAKoD,QAAQ,GAAG+B,KAAI,SAAC3F,GAAK,OAAAA,EAAEkF,QAAUQ,EAAIR,QACnD8G,IACAA,EAAKjH,QAAU8G,GAMnBrL,KAAKkI,OAASlI,KAAKoD,QAAQ,GAAGkB,OAAM,SAAC9E,GAAK,OAAAA,EAAE+E,UAASE,IAAG,SAACjF,GAAK,OAAAA,EAAEkF,QAEhE1E,KAAKqJ,yBAA2BrJ,KAAK+I,QAAQzE,OAAM,SAAC9E,GAAK,OAAAA,EAAE+E,UAAS7E,SAAWM,KAAK+I,QAAQrJ,OAE5FM,KAAK8K,eAAc,GACnB9K,KAAKkL,mBAGTnD,EAAAnI,UAAA6L,aAAA,SAAa9H,OACH+H,EAAM/H,EAAOkG,OAAOjJ,MAC1BZ,KAAKgL,cAAcU,IAGvB3D,EAAAnI,UAAA+L,YAAA,SAAYC,EAAWF,EAAKG,SACxB7L,KAAKkJ,iBAAkB,EAEf,IAAA4C,EAAAF,EAAAE,aAAcC,EAAAH,EAAAG,WAEhBC,EAAWhM,KAAK+I,QAAQ+C,GACxBG,EAAajM,KAAK+I,QAAQgD,GAE1BG,EAAgBlM,KAAKoD,QAAQ,GAAG+I,UAAS,SAAC3M,GAAK,OAAAA,EAAEkF,QAAUsH,EAAStH,QACpE0H,EAAkBpM,KAAKoD,QAAQ,GAAG+I,UAAS,SAAC3M,GAAK,OAAAA,EAAEkF,QAAUuH,EAAWvH,QAExE2H,EAAcrM,KAAKoD,QAAQ,GAAGmI,OAAOW,EAAe,IAC1DnH,EAAA/E,KAAKoD,QAAQ,IAAGmI,OAAMxL,MAAAgF,EAAAjE,EAAA,CAACsL,EAAiB,GAAMC,IAE9CrM,KAAKkI,OAASlI,KAAKoD,QAAQ,GAAGkB,OAAM,SAAC9E,GAAK,OAAAA,EAAE+E,UAASE,IAAG,SAACjF,GAAK,OAAAA,EAAEkF,QAChE1E,KAAKkL,kBAELlL,KAAKgL,cAAcU,IAMf3D,EAAAnI,UAAA0M,iBAAR,WACI,IAAKtM,KAAKyK,YAAYC,cAAc9J,MAChC,OAA2B,IAAvBZ,KAAKkI,OAAOxI,OACL,EAEHM,KAAKkI,OAAOxI,SAAWM,KAAKoD,QAAQ,GAAG1D,OAChC,EAEJ,MAGL6M,EAAavM,KAAK+I,QAAQzE,OAAM,SAAC9E,GAAK,OAAAA,EAAE+E,UAAS7E,OACvD,OAAI6M,IAAevM,KAAK+I,QAAQrJ,OACrB,EAEH6M,EAAavM,KAAK+I,QAAQrJ,OACP,IAAf6M,EACO,EAEJ,OAJX,GAWZxE,EAAAnI,UAAA4M,gBAAA,SAAgB7I,EAAoB+H,GAApC,IAAAzH,EAAAjE,KACI2D,EAAOC,kBACP5D,KAAKkJ,iBAAkB,MACjBuD,EAAQzM,KAAKsM,mBAEbI,EAAuB,IAAVD,GAAyB,IAAVA,EAE7Bf,EAID1L,KAAKoD,QAAQ,GAAGe,QAAO,SAAC3E,OACdgM,EAAOvH,EAAK8E,QAAQ5D,KAAI,SAACwH,GAAK,OAAAnN,EAAEkF,OAASiI,EAAEjI,QAC7C8G,IACAhM,EAAE+E,QAAUmI,EACZlB,EAAKjH,QAAUmI,KAPvB1M,KAAKoD,QAAQ,GAAGe,QAAO,SAAC3E,GAAK,OAAAA,EAAE+E,QAAUmI,IAY7C1M,KAAKkI,OAASlI,KAAKoD,QAAQ,GAAGkB,OAAM,SAAC9E,GAAK,OAAAA,EAAE+E,UAASE,IAAG,SAACjF,GAAK,OAAAA,EAAEkF,QAEhE1E,KAAKqJ,yBAA2BrJ,KAAK+I,QAAQzE,OAAM,SAAC9E,GAAK,OAAAA,EAAE+E,UAAS7E,SAAWM,KAAK+I,QAAQrJ,OAE5FM,KAAK8K,eAAc,GAEnB9K,KAAKkL,kBACLlL,KAAKgL,cAAcU,IAGvB3D,EAAAnI,UAAA8D,MAAA,SAAMC,GACEA,GACAA,EAAOC,kBAEX5D,KAAK0I,OAAOjD,QAIhBsC,EAAAnI,UAAA4K,aAAA,SAAa7G,GACT3D,KAAK0D,MAAMC,GACX3D,KAAK2I,SAASlD,KAAK,CAAEmH,WAAY5M,KAAKkI,UAI1CH,EAAAnI,UAAA+F,eAAA,SAAehC,GAAf,IAAAM,EAAAjE,KACQ2D,GACAA,EAAOC,kBAGX5D,KAAKkJ,iBAAkB,MACjBtD,EAAoB5F,KAAK2C,UAAUG,SAAS,iDAAmD,cACrG9C,KAAKwC,SAASqD,QAAQD,GAAmBE,UAAS,SAAEzG,GAC5CA,IACA4E,EAAK8B,gBACL9B,EAAK6G,eAAc,OAKvB/C,EAAAnI,UAAAmG,cAAR,WAAA,IAAA9B,EAAAjE,KACUgG,EAAUhG,KAAKgD,aAAaiD,IAAY,OAAEC,eAChD,GAAIF,EAAQG,cAAgBH,EAAQG,aAAazG,OAAQ,KAE/C0G,EAAa,GACnBJ,EAAQG,aAAahC,QAAO,SAACQ,GACzB,GAAgB,+BAAZA,EAAED,MAAwC,KACpCQ,EAAMjB,EAAKjB,aAAaI,QAAQ,GAAG+B,KAAI,SAAE3F,GAAW,OAAAA,EAAEkF,QAAUC,EAAED,QACpEQ,IACAA,EAAIX,QAAUI,EAAEJ,QAChBW,EAAImB,OAAS1B,EAAE0B,OACfnB,EAAIoB,MAAQ3B,EAAE2B,MACdpB,EAAIqB,MAAQ5B,EAAE4B,MACdrB,EAAIsB,OAAMtH,EAAA,GAAOyF,EAAE6B,QAAU,IAC7BtB,EAAIuB,YAAWvH,EAAA,GAAOyF,EAAE8B,aAAe,IACvCL,EAAWzF,KAAKuE,OAK5BlF,KAAKoD,QAAU,CAACgD,GAQpB,GALApG,KAAK+I,QAAU/I,KAAKoD,QAAQ,GAC5BpD,KAAKuJ,SAAW,GAChBvJ,KAAKkI,OAASlI,KAAKmD,iBACnBnD,KAAKuJ,SAAS/H,YAAcxB,KAAKkI,OACjClI,KAAKuJ,SAAS9H,aAAYX,EAAOd,KAAKoD,QAAQ,IAC1C4C,EAAQU,KAAM,KACRC,EAAaX,EAAQU,KAAKzB,UAAWe,EAAQU,KAAKzB,UAAU/B,MAAM,KAAO,GACzE7B,EAAY2E,EAAQU,KAAKzD,SAAW+C,EAAQU,KAAKzD,SAASC,MAAM,KAAO,GAC7ElD,KAAKuJ,SAASjI,SAAW,CAAE2B,SAAU5B,EAAW4D,UAAY0B,QAE5D3G,KAAKuJ,SAASjI,SAAW,GAE7BtB,KAAKuJ,SAAS7H,WAAcsE,EAAQtE,WAAasE,EAAQtE,WAAWwB,MAAM,KAAO,IAIrF6E,EAAAnI,UAAA4F,cAAA,SAAc7B,GAOV,GANIA,GACAA,EAAOC,kBAEX5D,KAAKkJ,iBAAkB,EACvBlJ,KAAKuJ,SAAS/H,YAAcxB,KAAKkI,OAE5BlI,KAAKsD,cAAiBtD,KAAKoJ,kBAezB,KACGyD,EAAY7M,KAAK4K,2BACnBiC,IACA7M,KAAKuJ,SAAWpK,OAAOC,OAAOyN,GAAa,GAAI7M,KAAKuJ,gBAjBnDvJ,KAAKuJ,SAAS9H,eACfzB,KAAKuJ,SAAS9H,aAAYX,EAAOd,KAAKoD,QAAQ,KAG7CpD,KAAKuJ,SAASjI,WACftB,KAAKuJ,SAASjI,SAAW,CACrB2B,SAAUjD,KAAKgD,aAAaC,SAAWjD,KAAKgD,aAAaC,SAASC,MAAM,KAAO,GAC/E+B,UAAYjF,KAAKgD,aAAaiC,UAAYjF,KAAKgD,aAAaiC,UAAU/B,MAAM,KAAO,KAIvFlD,KAAKuJ,SAAS7H,aAAe8C,YAC7BxE,KAAKuJ,SAAS7H,WAAa1B,KAAKgD,aAAatB,WAAa1B,KAAKgD,aAAatB,WAAWwB,MAAM,KAAO,IAS5GlD,KAAKyI,OAAOhD,KAAK,CAACqH,QAAS9M,KAAKuJ,SAAU7F,MAAO1D,KAAK0D,MAAMqJ,KAAK/M,MAAO6J,OAAQ7J,KAAKgN,MAAMtC,cAAeuC,cAAejN,KAAKoJ,qBAIlIrB,EAAAnI,UAAAsN,eAAA,SAAevJ,GAAf,IAAAM,EAAAjE,KACQ2D,GACAA,EAAOC,kBAGX5D,KAAKkJ,iBAAmBlJ,KAAKkJ,gBAE7BiE,WAAU,WACN,GAAIlJ,EAAKmJ,mBAAqBnJ,EAAKmF,kBAAmB,KAC5CiE,EAASpJ,EAAKmJ,kBAAkB1C,cAAcT,cAAc,eAAehG,EAAKmF,kBAAkBkE,IACpGD,IACIA,EAAOE,uBACPF,EAAOE,yBAEPF,EAAOG,sBAQ3BzF,EAAAnI,UAAA6N,sBAAA,SAAsB9J,GAClB3D,KAAKmJ,YAAcxF,EACnB3D,KAAKgL,iBAITjD,EAAAnI,UAAA8N,iBAAA,SAAiB/J,GACTA,GACAA,EAAOC,kBAEX5D,KAAKkJ,iBAAkB,EACvBlJ,KAAK4I,aAAanD,QAItBsC,EAAAnI,UAAA+N,iBAAA,SAAiBhK,GACTA,GACAA,EAAOC,kBAEX5D,KAAKkJ,iBAAkB,EACvBlJ,KAAK6I,eAAepD,QAIxBsC,EAAAnI,UAAAgO,kBAAA,SAAkBjK,EAAQ6H,GAA1B,IAAAvH,EAAAjE,KACImN,WAAU,WACNlJ,EAAKmF,kBAAoBoC,EACzBvH,EAAKiF,iBAAkB,MAEnB2E,EAAiB,KACjBrC,IAEAqC,GADAA,EAAiBpE,KAAKC,MAAM8B,EAAKX,uBACD5G,EAAKtB,UAAUgF,YAK3C1D,EAAKsF,SAAWsE,EAChB5J,EAAKiE,OAAS2F,EAAerM,aAIjCyC,EAAK8B,gBAET9B,EAAKhD,GAAG6M,mBAKhB/F,EAAAnI,UAAAkL,cAAA,SAAciD,yBAtejBlH,EAAAA,UAASC,KAAA,CAAC,CACPC,SAAU,2BACVC,SAAA,otOAIAC,cAAeC,EAAAA,kBAAkBC,+qKAd6BE,EAAAA,gBAAzDD,EAAAA,2DAiBJE,EAAAA,0BACAA,EAAAA,uBAEAA,EAAAA,sBAEAA,EAAAA,6BAEAA,EAAAA,mBAEAA,EAAAA,0BAEAA,EAAAA,mBAaA0G,EAAAA,YAAWlH,KAAA,CAAC,4BAEZU,EAAAA,UAASV,KAAA,CAAC,+BACVU,EAAAA,UAASV,KAAA,CAAC,8BACVU,EAAAA,UAASV,KAAA,CAAC,wCAEVU,EAAAA,UAASV,KAAA,CAAC,+BACVU,EAAAA,UAASV,KAAA,CAAC,uCAEVS,EAAAA,6BACAA,EAAAA,uBACAA,EAAAA,uBACAA,EAAAA,yBACAA,EAAAA,6BAEAA,EAAAA,+BACAA,EAAAA,iCACAA,EAAAA,wBA0BA0G,EAAAA,aAAYnH,KAAA,CAAC,QAAS,CAAC,iCAevBmH,EAAAA,aAAYnH,KAAA,CAAC,qBAAsB,CAAC,mCAQpCmH,EAAAA,aAAYnH,KAAA,CAAC,uBAAwB,CAAC,sCAQtCmH,EAAAA,aAAYnH,KAAA,CAAC,UAAW,CAAC,cA8X9BiB,KC7eMmG,EAAgB,sCAWtBC,EAAA,WAMI,SAAAA,IALQnO,KAAAoO,YAAc,KACdpO,KAAAyM,MAAuB,GAE/BzM,KAAAqO,YAAc,IAAIC,EAAAA,QA8GtB,OAzGIH,EAAAvO,UAAA2O,OAAA,SAAOC,EAAgBC,GACdzO,KAAKyM,MAAMgC,KACZzO,KAAKyM,MAAMgC,GAAU,IAEzBzO,KAAKyM,MAAMgC,GAAUtP,OAAOC,OAAOY,KAAKyM,MAAMgC,GAASD,IAG3DL,EAAAvO,UAAA8O,eAAA,SAAeC,GACPA,GAAWA,EAAuB,gBAClC3O,KAAKoO,YAAcO,EAAuB,cAAe,cAIzDR,EAAAvO,UAAAgP,cAAR,eACUC,EAAcC,OAAOC,SAASC,KAAK9L,MAAM,KAAK,GACpD,OAAO2L,EAAYI,UAAUJ,EAAYK,YAAY,KAAO,IAGhEf,EAAAvO,UAAAuP,aAAA,SAAaV,GAET,OADgBzO,KAAK4O,gBACJ,mBAAmBH,GAGxCN,EAAAvO,UAAAwP,cAAA,SAAcC,OACJC,EA1CiBpB,gDA0CWlO,KAAKmP,aAAaE,GACpD,GAAIrP,KAAKoO,YACL,OAAOpO,KAAKoO,YAAYmB,OAAOD,EAAK,MAAO,KAAM,MAAM,IAI/DnB,EAAAvO,UAAA4P,WAAA,SAAWC,EAA6BJ,EAAgBK,GACpD,QADoD,IAAAA,IAAAA,GAAA,GAChD1P,KAAKoO,YAAa,KACZuB,EAAaD,EAAW,MAAO,OAErC,OADAD,EAAOG,SAAW5P,KAAKmP,aAAaE,GAC7BrP,KAAKoO,YAAYmB,OAAOrB,EAAeyB,EAAY,KAAM,CAAEE,KAAMJ,IAAS,KAIzFtB,EAAAvO,UAAAkQ,aAAA,SAAaC,EAAoBV,GAC7B,IAAKU,EACD,OAAOC,EAAAA,IAAG,OAERJ,EAAW5P,KAAKmP,aAAaE,GAGnC,OAFAU,EAAMH,SAAWA,EAEbG,EAAMH,SACC5P,KAAKoO,YAAYmB,OA9DJrB,4CA8DiC,MAAO,KAAM,CAAC2B,KAAME,IAAQ,QADrF,GAKJ5B,EAAAvO,UAAAqQ,cAAA,SAAcxB,OAAQ,IAAAyB,EAAA,GAAAC,EAAA,EAAAA,EAAA1Q,UAAAC,OAAAyQ,IAAAD,EAAAC,EAAA,GAAA1Q,UAAA0Q,OACZC,EAAUpQ,KAAKyM,MAAMgC,GAC3B,OAAI2B,EACIF,GAAYA,EAASxQ,OACdwQ,EAASG,OAAM,SAAE/P,EAAGqE,GACvB,OAAOrE,EAAEqE,IACVyL,GAGAA,EAEJ,MAGHjC,EAAAvO,UAAA0Q,iBAAR,SAAyB7B,EAAQ8B,EAAc3P,SAC3CZ,KAAKuO,SAAMxJ,EAAA,IAAGwL,GAAe3P,EAAKmE,GAAG0J,IAGzCN,EAAAvO,UAAA4Q,cAAA,SAAc/B,EAAQgC,GAClBzQ,KAAKsQ,iBAAiB7B,EAAQ,OAAQgC,GACtCzQ,KAAKqO,YAAY5N,KAAKgQ,IAG1BtC,EAAAvO,UAAA8Q,cAAA,SAAcjC,EAAQkC,OACZC,EAAa5Q,KAAKiQ,cAAcxB,EAAQ,QAC9C,IAAKmC,IAAeA,EAAWlR,OAC3B,OAAO,EAGX,GAA0B,iBAAfiR,EACP,QAASC,EAAWzL,KAAI,SAAC3F,GAAK,OAAAA,EAAEmK,OAASgH,EAAWE,SAEpD,GAA0B,iBAAfF,EAAyB,KAC1BG,EAAc,GAUpB,OATAF,EAAWzM,QAAO,SAAC3E,OACTuR,EAAe5R,OAAO6R,OAAOxR,EAAEmK,MACrC,IAAI,IAAIsH,KAAKN,EACLI,EAAaG,SAASP,EAAWM,KACjCH,EAAYnQ,KAAKsQ,KAKtBH,IAKnB3C,EAAAvO,UAAAuR,eAAA,WACI,OAAOnR,KAAKoO,YAAYmB,OAjHL,6DAiHgC,MAAO,KAAM,MAAM,IAG1EpB,EAAAvO,UAAAwR,aAAA,WACI,OAAOpR,KAAKoO,YAAYmB,OAnHR,6DAmHgC,MAAO,KAAM,MAAM,IAE3EpB,EAlHA,gBCqCI,SAAAkD,EAAoBpQ,GAAAjB,KAAAiB,GAAAA,EArBXjB,KAAAsR,kBAAoB,GAEnBtR,KAAAuR,WAAa,IAAIxP,EAAAA,aACjB/B,KAAAwR,YAAc,IAAIzP,EAAAA,aAClB/B,KAAAmR,eAAiB,IAAIpP,EAAAA,aAE/B/B,KAAAmC,WAAa,CACTwH,KAAM,GACN8H,WAAW,EACXC,KAAM,UACNC,OAAQ,IAGZ3R,KAAA4R,WAAa,UAEb5R,KAAA6R,mBAAoB,EACpB7R,KAAA8R,gBAAiB,EAEjB9R,KAAA+R,UAAY,CAAC,CAAEC,KAAM,SAAUrI,KAAM,OAAQsI,WAAS,GAAO,CAAED,KAAM,KAAMrI,KAAM,WAAY,CAAEqI,KAAM,SAAUrI,KAAM,SACrH3J,KAAAkS,cAAgB,CAAEC,SAAU,EAAGC,SAAU,EAAGC,GAAI,IAyDpD,OArDIhB,EAAAzR,UAAAyD,SAAA,aAGAgO,EAAAzR,UAAA8D,MAAA,SAAMC,GACF3D,KAAKuR,WAAW9L,QAGpB4L,EAAAzR,UAAA6I,OAAA,SAAO9E,GACH3D,KAAKwR,YAAY/L,KAAKzF,KAAKmC,aAG/BkP,EAAAzR,UAAA8F,cAAA,SAAc/B,GACV3D,KAAK0D,MAAMC,IAGf0N,EAAAzR,UAAA0S,cAAA,SAAc3O,GACV,GAAIA,EAAO4O,YAAc5O,EAAO4O,WAAW7S,OAAS,KAC5CiS,EAAShO,EAAO4O,WAAW9N,IAAG,SAACjF,GAAK,OAAAA,EAAEgT,QAC1CxS,KAAKmC,WAAWwP,OAASA,IAIjCN,EAAAzR,UAAA6S,eAAA,SAAe9O,EAAoBiE,GAC/BjE,EAAOC,kBACP5D,KAAK4R,WAAahK,EACN,WAARA,GAA4B,QAARA,EACpB5H,KAAKmR,eAAe1L,KAAK,CAAE7E,MAAOgH,EAAKzF,WAAYnC,KAAKmC,aAExDnC,KAAKmC,WAAWuP,KAAO9J,GAK/ByJ,EAAAzR,UAAA8S,QAAA,SAAQC,QAAA,IAAAA,IAAAA,EAAA,CAAiBC,UAAQ,EAAMC,KAAK,IACxC7S,KAAKmC,WAAUjD,EAAA,GAAOc,KAAKmC,YAC3BnC,KAAK4R,WAAa5R,KAAKmC,WAAWuP,KAClC1R,KAAK6R,mBAAqBc,EAAaC,UACvC5S,KAAK8R,gBAAkBa,EAAaE,IACpC7S,KAAKiB,GAAG6M,iBAGZuD,EAAAzR,UAAAkT,cAAA,SAAcnP,GACVkE,QAAQC,IAAInE,GACRA,EAAO4O,YAAa5O,EAAO4O,WAAW7S,OACtCM,KAAKmC,WAAWwP,OAAShO,EAAO4O,WAAW9N,IAAG,SAACjF,GAAK,OAAAA,EAAEgT,QAEtDxS,KAAKmC,WAAWwP,OAAS,IAIjCN,EAAAzR,UAAAmT,aAAA,WACI/S,KAAKmC,WAAWwP,OAAS,wBAxGhC9K,EAAAA,UAASC,KAAA,CAAC,CACPC,SAAU,aACVC,SAAA,ikKAEI,giBANCI,EAAAA,qDA8BJI,EAAAA,UAASV,KAAA,CAAC,qCAEVQ,EAAAA,0BAEAC,EAAAA,4BACAA,EAAAA,+BACAA,EAAAA,UAwEL8J,kBC7EI,SAAA2B,EAAoB/R,EAA+B0B,EAAkCqF,GAAjEhI,KAAAiB,GAAAA,EAA+BjB,KAAA2C,UAAAA,EAAkC3C,KAAAgI,SAAAA,EAnB5EhI,KAAAiT,MAAQ,GAEPjT,KAAAuR,WAAa,IAAIxP,EAAAA,aACjB/B,KAAAwR,YAAc,IAAIzP,EAAAA,aAEnB/B,KAAAkT,YAAa,EAQtBlT,KAAAoD,QAAU,GAEFpD,KAAAwD,QAGJ,KAqFR,OAlFIwP,EAAApT,UAAAyD,SAAA,WAAA,IAAAY,EAAAjE,KAEUmT,EAAUnT,KAAK2C,UAAUG,SAAS,iCAAmC,KACrEsQ,EAAUpT,KAAK2C,UAAUG,SAAS,iCAAmC,KACrEuQ,EAAarT,KAAK2C,UAAUG,SAAS,sCAAwC,KAC7EwQ,EAAatT,KAAK2C,UAAUG,SAAS,qCAAuC,MAC5EyQ,EAASvT,KAAK2C,UAAUG,SAAS,gCAAkC,KAEnE0Q,EAAYxT,KAAK2C,UAAUG,SAAS,6BAA+B,KACnE2Q,EAAazT,KAAK2C,UAAUG,SAAS,8BAAgC,KACrE4Q,EAAS1T,KAAK2C,UAAUG,SAAS,0BAA4B,KAGnE9C,KAAKoD,QAAU,CAEX,CAACsB,MAAO,OAAQ7B,MAAOsQ,EAAS5M,MAAO,IAAKoN,UAAS,SAAGC,GACpD,OAAOnM,EAAqBgC,KAAKC,MAAMkK,GAAI3P,EAAKtB,UAAUgF,YAE9D,CAACjD,MAAO,OAAQ7B,MAAOuQ,EAAS7M,MAAO,GAAIF,OAAQ,SAAUC,MAAO,SAAUqN,UAAS,SAAGC,EAAGpF,GACzF,OAAOoF,GACH,IAAK,SACD,MAAO,mDAAoDJ,EAAW,UAC1E,IAAK,MACD,MAAO,gDAAiDE,EAAQ,UACpE,IAAK,UACL,QACI,MAAO,oDAAqDD,EAAY,aAGpF,CAAC/O,MAAO,YAAa7B,MAAOwQ,EAAY9M,MAAO,GAAIF,OAAQ,SAAUC,MAAO,SAAUU,SAAUhH,KAAK6T,iBACrG,CAACnP,MAAO,WAAY7B,MAAOyQ,EAAY/M,MAAO,IAC9C,CAAC1D,MAAO0Q,EAAQhN,MAAO,GAAIS,SAAUhH,KAAK8T,OAAQzN,OAAQ,SAAUC,MAAO,YAKnF0M,EAAApT,UAAAmU,QAAA,SAAQpQ,GACJ3D,KAAKuR,WAAW9L,QAGpBuN,EAAApT,UAAA4F,cAAA,SAAc7B,GACV3D,KAAKwR,YAAY/L,KAAMzF,KAAKwD,UAGhCwP,EAAApT,UAAA8F,cAAA,SAAc/B,GACV3D,KAAKuR,WAAW9L,QAGpBuN,EAAApT,UAAAoU,WAAA,SAAWrQ,EAAasQ,OACd3T,EAAc,KAAVqD,EAEV3D,KAAKiT,MAAM9O,QAAO,SAAC3E,GACfA,EAAEiS,WAAY,EACVjS,EAAE8N,KAAO2G,EAAIC,QAAQ5G,IAAMhN,IAC3Bd,EAAEiS,UAAYnR,KAItBN,KAAKiT,MAAKnS,EAAOd,KAAKiT,WAEhBkB,EAAcnU,KAAKiT,MAAM9N,KAAI,SAAC3F,GAAK,OAAAA,EAAEiS,YACvC0C,IACAnU,KAAKwD,QAAUxD,KAAKwD,SAAW,GAC/BxD,KAAKwD,QAAQ4Q,UAAYD,EAAY7G,KAK7C0F,EAAApT,UAAAyU,YAAA,SAAY1Q,EAAQsQ,GAChB,GAAKjU,KAAKkT,WAAV,CAGAvP,EAAOC,sBACD0J,EAAK2G,EAAIC,QAAQ5G,GACvBtN,KAAKiT,MAAQjT,KAAKiT,MAAM3O,OAAM,SAAC9E,GAAK,OAAAA,EAAE8N,KAAOA,IAC7CtN,KAAKwD,QAAUxD,KAAKwD,SAAW,GAC/BxD,KAAKwD,QAAQ8Q,WAAUxT,EAAQd,KAAKwD,QAAQ8Q,YAAc,GAAE,CAAGhH,IAC3DA,IAAOtN,KAAKwD,QAAQ4Q,YACpBpU,KAAKwD,QAAQ4Q,UAAY,UAClBpU,KAAKwD,QAAQ4Q,iCA3G/BvN,EAAAA,UAASC,KAAA,CAAC,CACPC,SAAU,cACVC,SAAA,6pEAPKI,EAAAA,yBAEAxE,EAAAA,qBAFwDyE,EAAAA,2CAY5DC,EAAAA,0BAEAC,EAAAA,4BACAA,EAAAA,2BAEAD,EAAAA,sBAEAE,EAAAA,UAASV,KAAA,CAAC,8BACVU,EAAAA,UAASV,KAAA,CAAC,uCACVU,EAAAA,UAASV,KAAA,CAAC,mCACVU,EAAAA,UAASV,KAAA,CAAC,sBACVU,EAAAA,UAASV,KAAA,CAAC,SA4FfkM,KChGauB,EAAwB,IAAIC,EAAAA,eAAe,6CAExDC,EAAA,WAkCI,SAAAA,EAAoBzM,EAA4B0M,EAC5BlS,EAAmCmS,EACnChS,GAFA3C,KAAAgI,SAAAA,EAA4BhI,KAAA0U,SAAAA,EAC5B1U,KAAAwC,SAAAA,EAAmCxC,KAAA2U,UAAAA,EACnC3U,KAAA2C,UAAAA,EAjCZ3C,KAAA4U,aAAe,sBACf5U,KAAA6U,mBAAqB,iBACrB7U,KAAA8U,yBAA2B,YAC3B9U,KAAA+U,cAAgB,2BAEhB/U,KAAAgV,iBAAmB,KAEnBhV,KAAA+R,UAAiB,GAcjB/R,KAAAiV,SAA+C,KAC/CjV,KAAAkV,iBAA8C,KAE9ClV,KAAAmV,QAAS,EACTnV,KAAAoV,IAAgC,KAChCpV,KAAAqV,IAAsB,KACtBrV,KAAAsV,uBAAuC,KAQ3CtV,KAAKoV,IAAMpV,KAAKgI,SAASvF,IAAI8S,EAAAA,0BAC7BvV,KAAKqV,IAAMrV,KAAKgI,SAASvF,IAAI+S,EAAAA,gBAC7BxV,KAAKyV,cAAgBzV,KAAKgI,SAASvF,IAAIiT,EAAAA,cAAe,MACtD1V,KAAK2V,cAAgB,IAAIxH,EA2oCjC,OAxqCIhP,OAAAqK,eAAIiL,EAAA7U,UAAA,kBAAe,KAAnB,WACI,OAAOI,KAAKgV,sBAGhB,SAAoBrG,GAChB3O,KAAKgV,iBAAmBrG,EAEpB3O,KAAK2V,eACL3V,KAAK2V,cAAcjH,eAAeC,oCAyB1C8F,EAAA7U,UAAAgW,QAAA,SAAQtI,GACAA,GAAMtN,KAAKiV,UAAYjV,KAAKiV,SAAS3H,UAC9BtN,KAAKiV,SAAS3H,GAErBtN,KAAKiV,SAAW,KAEpBjV,KAAKmV,QAAS,EACdnV,KAAK6V,oBAAoBvI,EAAI,OAGjCmH,EAAA7U,UAAAkW,qBAAA,SAAqBC,GACjB,GAAKA,EAAL,KAIMzI,EAAKyI,EAAGzI,GACdtN,KAAKiV,SAAWjV,KAAKiV,UAAY,GAC5BjV,KAAKiV,SAAS3H,KACftN,KAAKiV,SAAS3H,GAAMyI,QANpBlO,QAAQC,IAAI,mDAUpB2M,EAAA7U,UAAAoW,gBAAA,SAAgBC,GACZ,OAAOjW,KAAKiV,SAAWjV,KAAKiV,SAASgB,GAAQ,MAIzCxB,EAAA7U,UAAAsW,qBAAR,SAA6BC,EAAiC5M,GAC1D,GAAI4M,GAAc5M,EAAU,KAClB6M,EAAmB3M,KAAKC,MAAMyM,EAAWtL,sBAC/C,GAAIuL,EAAkB,CAClB,GAAKA,EAAiBpW,KAAK2C,UAAUgF,UAAW,KACtCkG,EAAiBuI,EAAiBpW,KAAK2C,UAAUgF,UACvDyO,EAAiBpW,KAAK2C,UAAUgF,UAAYxI,OAAOC,OAAOyO,EAAgBtE,QAE1E6M,EAAiBpW,KAAK2C,UAAUgF,UAAa4B,EAEjD4M,EAAWtL,qBAAuBpB,KAAK4M,UAAUD,MAM7D3B,EAAA7U,UAAA0W,+BAAA,SAA+BC,EAAchN,OACnC4M,EAAanW,KAAKwW,oBAAoBD,GAC5CvW,KAAKkW,qBAAqBC,EAAY5M,IAI1CkL,EAAA7U,UAAAiW,oBAAA,SAAoBU,EAAcE,OACxBC,EAAY1W,KAAK2V,cAAcxG,aAAaoH,GAClDvW,KAAKkV,iBAAmBlV,KAAKkV,kBAAoB,GACjDlV,KAAKkV,iBAAiBwB,GAAaD,GAGvChC,EAAA7U,UAAA4W,oBAAA,SAAoBD,OACVG,EAAY1W,KAAK2V,cAAcxG,aAAaoH,GAClD,OAAOvW,KAAKkV,iBAAmBlV,KAAKkV,iBAAiBwB,GAAa,MAGtEjC,EAAA7U,UAAA+W,eAAA,WACI,MAAO,CACH,CAAE/V,MAAO,MAAOiC,MAAO7C,KAAK2C,UAAUG,SAAS,iCAC/C,CAAElC,MAAO,UAAWiC,MAAO7C,KAAK2C,UAAUG,SAAS,qCACnD,CAAElC,MAAO,SAAUiC,MAAO7C,KAAK2C,UAAUG,SAAS,sCAI1D2R,EAAA7U,UAAAgX,WAAA,SAAW5T,EAAiCuG,EAAyBsN,GAArE,IAAA5S,EAAAjE,KACUoD,EAAUpD,KAAK8W,uBAAuB9T,EAAaI,SACzDA,EAAQ,GAAKA,EAAQ,GAAGkB,OAAM,SAAC9E,GAAK,OAAAA,EAAEkF,OAASlF,EAAEkF,QAAU1B,EAAa+T,wBAElEC,EAAchX,KAAK2W,iBAEzB,GAAI3W,KAAKoV,IAAK,KAEN6B,EADejX,KAAKoV,IAAI8B,wBAAwBnP,GACzBoP,OAAOnX,KAAKgI,UAWvC,GAVAhI,KAAKqV,IAAI+B,WAAWH,EAAUI,UAC9BJ,EAAUK,SAASlU,QAAUA,EAC7B6T,EAAUK,SAASrP,WAAa+O,EAChCC,EAAUK,SAAStU,aAAeA,EAE9BgH,SAASC,cAAc,mBACvBgN,EAAUK,SAASlP,IAAM,IAG7B6O,EAAUK,SAAShU,aAAeN,EAAaM,aAC3CN,EAAaM,aACb,GAAIiG,EACIsN,GACA7W,KAAKkW,qBAAqBW,EAAoBtN,GAC9C0N,EAAUK,SAASlO,kBAAoByN,IAEvCI,EAAUK,SAASlO,kBAAoB,KACvC6N,EAAUK,SAAS/N,SAAWA,OAE/B,KACGgO,EAAqBvX,KAAKwW,oBAAoBxT,EAAasK,IACjE2J,EAAUK,SAASlO,kBAAoBmO,EAqG/C,OAjGAvN,SAAS6F,KAAK2H,YAAYP,EAAUlI,SAASrE,eAE7CuM,EAAUK,SAAS5O,OAAO+O,KACtBC,EAAAA,UAAS,WAEL,OADAT,EAAUK,SAASvM,UAAUL,cAAciN,MAAMC,MAAQ,SAClDC,EAAAA,MAAM,QAEnB/R,UAAS,WACPmR,EAAUlI,SAASrE,cAAcoN,SACjCb,EAAUrB,UACVqB,EAAY,KACRhT,EAAKqR,wBACLrR,EAAKqR,uBAAuByC,gBAIpCd,EAAUK,SAAS3O,SAAS7C,UAAS,SAAEf,OAAE6H,EAAA7H,EAAA6H,WACjCA,GAAcA,EAAWlN,QACzBuE,EAAKiS,qBAAqBe,EAAUK,SAASlO,kBAAmB,CAAC5H,YAAaoL,IAElF3I,EAAKuG,aAAaxH,EAAc,KAAMiU,EAAUK,SAASlO,qBAG7D6N,EAAUK,SAAS7O,OAAO3C,UAAS,SAAGvF,GAClCA,EAAEsJ,OAAOmO,UAAW,EAChB/T,EAAKkR,QAGJlR,EAAKkR,SAEF5U,EAAE0M,eACFhJ,EAAK4R,oBAAoB7S,EAAasK,GAAI/M,EAAE0M,eAGhDhJ,EAAKgU,eAAe1X,EAAGyC,EAAczC,EAAEsJ,WAI/CoN,EAAUK,SAAS9O,aAAa1C,UAAS,SAAEoS,GACvCjU,EAAKqS,+BAA+BtT,EAAasK,GAAI,CAAC9L,YAAa0W,MAIvEjB,EAAUK,SAAS1O,aAAa9C,UAAS,WACrC7B,EAAKkU,oBAAoBnV,EAAciU,KAG3CA,EAAUK,SAAS1G,WAAa5Q,KAAK2V,cAAc1F,cAAcjN,EAAasK,GAAI,SAAW,GAG7F2J,EAAUK,SAASzO,eAAe/C,UAAS,WACvC7B,EAAK0R,cAAcvG,cAAcpM,EAAasK,IAAImK,KAC9CC,EAAAA,UAAS,SAAErY,GACP,OAAO4E,EAAK0R,cAAcxE,iBAAiBsG,KACvChT,EAAAA,IAAG,SAAE2T,GACD,OAAAlZ,EAAA,CACImZ,KAAMhZ,GACH+Y,SAKrBtS,UAAS,SAAEzG,GACT4E,EAAK0R,cAAcnF,cAAcxN,EAAasK,GAAIjO,EAAEgZ,MAAQ,IAC5DpU,EAAKqU,qBAAqBtV,EAAcuV,EAAAA,UAAUlZ,EAAEgZ,MAAQ,IAAKhZ,EAAEmZ,aAI3ExY,KAAKsV,uBAAyBtV,KAAK2V,cAActH,YAAYvI,UAAS,SAAEuS,GAGpE,GAFApB,EAAUK,SAAS1G,WAAayH,EAE3BA,GAASA,EAAK3Y,OAAnB,KAKM+Y,EAAoBxU,EAAKuS,oBAAoBxT,EAAasK,IAChE,GAAImL,EAAmB,KACfC,EAAgBL,EAAKlT,KAAI,SAAC3F,GAAK,OAAAA,EAAE8N,KAAOmL,EAAkBnL,KACzDoL,IACDA,EAAgBzU,EAAK0U,iBAAiBN,GACtCpU,EAAK4R,oBAAoB7S,EAAasK,GAAIoL,GAAiB,OAG/DzB,EAAUK,SAASlO,kBAAoBsP,QAZvCzU,EAAK4R,oBAAoB7S,EAAasK,GAAI,QAiBlD2J,EAAUK,SAASxO,iBAAiBhD,UAAS,SAAExF,GAC3C2D,EAAK4R,oBAAoB7S,EAAasK,GAAIhN,KAG9C2W,EAAUI,SAASvJ,gBAEnBmJ,EAAUK,SAASvM,UAAUL,cAAciN,MAAMC,MAAQ,MAElDX,IAKfxC,EAAA7U,UAAAgZ,KAAA,SAAK5V,EAAiC6V,GAGlC,OAFA7Y,KAAK8V,qBAAqB9S,GAEtBA,EAAa8V,iBACN9Y,KAAK4W,WAAW5T,GAEhBhD,KAAKwK,aAAaxH,EAAc6V,IAIvCpE,EAAA7U,UAAA4K,aAAR,SAAqBxH,EAAiC6V,EAAqBhC,GAA3E,IAAA5S,EAAAjE,KACQ+Y,GAAmB,GAEC,IADA/Y,KAAK2B,iBAAiBqB,KAI1C+V,GAAmB,OAGjBC,GAAqBhZ,KAAKiZ,cAAcjW,GAYxC7B,EAVE6X,EACO,EAEHD,EACO,GAEC,EAMpB,IAAwB,IAApB5X,EAAJ,KAKMiC,EAAUpD,KAAK8W,uBAAuB9T,EAAaI,SAGrD8V,EAAgC,KAChCrC,GAAsBA,EAAmBhM,uBACzCqO,EAAkBzP,KAAKC,MAAMmN,EAAmBhM,sBAAsB7K,KAAK2C,UAAUgF,WAEjElG,cAAgByX,EAAgBzX,aAAa/B,SAC7D0D,EAAQ,GAAKA,EAAQ,GAAGqB,IAAG,SAAES,OACnBiU,EAAOD,EAAgBzX,aAAa0D,KAAI,SAAC3F,GAAK,OAAAA,EAAEkF,QAAUQ,EAAIR,QAIpE,OAHIyU,IACAjU,EAAM/F,OAAOC,OAAO8F,EAAKiU,IAEtBjU,KAMnB9B,EAAQ,GAAKA,EAAQ,GAAGkB,OAAM,SAAC9E,GAAK,OAAAA,EAAEkF,OAASlF,EAAEkF,QAAU1B,EAAa+T,wBAClEqC,EAAWpZ,KAAKqZ,wBAAwBd,EAAAA,UAAUnV,IAAU,GAC5DkW,EAAsBtZ,KAAKqZ,wBAAwBd,EAAAA,UAAUnV,IAAU,GAC7EpD,KAAKuZ,mBAAmBD,OAEpBzV,EAAW,KAMT2V,GAJSxZ,KAAK2C,UAAUG,SAAS,wBACpB9C,KAAK2C,UAAUG,SAAS,4BACxB9C,KAAK2C,UAAUG,SAAS,2BAEvB,CAChByD,MAAO,IAAKkT,OAAQ,IAAKC,YAAY,EAAO7W,MAAO,OACnD8W,aAAc,CACVvW,QAAOA,EACPhC,aAAcgY,EACd7X,aAAc+X,EACdtW,aAAYA,EACZrB,iBAAkBoX,EAClBnX,oBAAqBoX,EACrB7X,eAAcA,EACdgB,WAAY+W,GAEhBU,aAAa,IAEXC,EAAY1a,OAAOC,OAAOoa,EAAaX,GAAQ,IAG/CvB,GADNzT,EAAW7D,KAAK0U,SAASkE,KAAK5X,EAA2B6Y,IACxB,QAiCjC,OAhCAvC,EAASzV,aAAc,EACvByV,EAASzT,SAAWA,EACpByT,EAAS3V,iBAAmBoX,EAC5BzB,EAAS1V,qBAAuB5B,KAAKiZ,cAAcjW,GAEnDsU,EAAStV,aAAa8D,UAAS,SAAEvF,GAC7BA,EAAEsJ,OAAOmO,UAAW,EAChB/T,EAAKkR,QAGJlR,EAAKkR,SACF0B,GACA5S,EAAK4R,oBAAoB7S,EAAasK,GAAIuJ,GAE9C5S,EAAKgU,eAAepU,EAAUb,EAAczC,EAAEsJ,WAItDyN,EAASxV,aAAagE,UAAS,SAAEvF,GAC7BsD,EAASH,UAIb4T,EAASpV,QAAQ4D,UAAS,SAAEvF,GACxBsD,EAASH,YACH6F,EAAW1F,EAASiJ,QAClBxL,EAAAiI,EAAAjI,SAAUE,EAAA+H,EAAA/H,YAAaC,EAAA8H,EAAA9H,aAAcC,EAAA6H,EAAA7H,WAC7CuC,EAAK2S,WAAW5T,EAAc,CAAE1B,SAAQA,EAAEE,YAAWA,EAAEC,aAAYA,EAAEC,WAAUA,GAAImV,KAGhEhT,EAASiW,OAAe,SAChCC,SAASC,OAAS1C,EAAS2C,OAAOvP,cAC1C7G,EApFH7D,KAAKwC,SAAS0X,QAAQla,KAAK+U,gBAyF3BN,EAAA7U,UAAA+B,iBAAR,SAAyBqB,GACrB,SAAIA,EAAamX,YAAana,KAAKoa,qBAAqBpX,MAG/ChD,KAAKoa,qBAAqBpX,GAEnBA,EAAamX,eAAlB,EACIna,KAAK4U,aAFL5U,KAAK6U,qBAOhBJ,EAAA7U,UAAAwa,qBAAR,SAA6BpX,GAQzB,OAPyBA,EAAaqX,YAAYhK,OAAM,SAAE1L,EAAGrE,GACzD,OAAIA,EAAE8E,SACKT,EAAI,EAERA,GACR,GAEuB,GAGtB8P,EAAA7U,UAAAqZ,cAAR,SAAsBqB,OACZvM,EAAOuM,EAAKlX,QAAQ1D,OAAS,EACnC,OAAIqO,EACO/N,KAAK8U,yBAET/G,GAGH0G,EAAA7U,UAAA2a,UAAR,SAAkBnW,EAAMoW,EAAUC,EAAeC,EAAUC,GAA3D,IAAA1W,EAAAjE,UAA2D,IAAA2a,IAAAA,GAAA,OACjDC,EAAY,GACdC,EAASJ,EACb,OAAKrW,EAAKoW,IAIVpW,EAAKoW,GAAUM,QAAQ3W,QAAO,SAAC4W,IAC3BF,GAAkBE,EAAQnW,UACX8V,GACXE,EAAUja,KAAKoa,KAIvB3W,EAAKoW,GAAUjP,OAAO,EAAGqP,EAAUlb,QAE5Bkb,EAAUnW,IAAG,SAAEE,EAAGpF,OACjBC,EAAS,CACTwb,KAAMrW,EACNsW,YAAYN,KAAYhW,EAAES,UAW9B,OARIT,EAAEC,SAAWD,EAAEC,QAAU,IACzBpF,EAAI,CACAwb,KAAMrW,EACNsW,YAAY,EACZC,UAAU,EACVC,SAAUlX,EAAKsW,UAAUnW,EAAMoW,EAAW,EAAG,EAAI7V,EAAEC,WAGpDpF,KA1BC,IA6BhBiV,EAAA7U,UAAAyZ,wBAAA,SAAwBjV,EAAsBuW,GAA9C,IAAA1W,EAAAjE,UAA8C,IAAA2a,IAAAA,GAAA,OACpCvX,EAAUgB,EAAKK,IAAG,SAAEE,GAKtB,OAJAA,EAAEF,IAAG,SAAE2W,GAEH,OADAA,EAAExW,QAAUwW,EAAExW,SAAW,EAClBwW,IAEJzW,IAEX,OAAuB,IAAnBvB,EAAQ1D,OACD0D,EAAQ,GAAGqB,IAAG,SAACE,GAClB,MAAO,CACHqW,KAAMrW,EACNsW,YAAYN,KAAYhW,EAAES,YAI3BhC,EAAQ,GAAGqB,IAAG,SAAEE,EAAGpF,GACtB,OAAIoF,EAAEC,SAAWD,EAAEC,QAAU,EAClB,CACHoW,KAAMrW,EACNsW,YAAY,EACZC,UAAU,EACVC,SAAUlX,EAAKsW,UAAUnX,EAAS,EAAG,EAAGuB,EAAEC,QAAS+V,IAGhD,CACHK,KAAMrW,EACNsW,YAAYN,KAAYhW,EAAES,aAQtCqP,EAAA7U,UAAA2Z,mBAAR,SAA2B8B,GAA3B,IAAApX,EAAAjE,KACIqb,EAAUlX,QAAO,SAAEmX,GACVA,EAAGH,UAAaG,EAAGH,SAASzb,QAG7B4b,EAAGL,YAAa,EAChBhX,EAAKsV,mBAAmB+B,EAAGH,WAH3BG,EAAGL,YAAa,KAQpBxG,EAAA7U,UAAAkX,uBAAR,SAA+B1S,GAE3B,OAAOA,EAAKK,IAAG,SAAG8W,GACd,OAAOA,EAAM9W,IAAG,SAAGE,GACf,GAAgB,+BAAZA,EAAED,MACF,MAAO,CACHA,MAAOC,EAAED,MACT7B,MAAO8B,EAAE9B,MACT+B,QAASD,EAAEC,QACX4W,QAAS7W,EAAE6W,QACXpW,SAAUT,EAAES,SACZC,MAAOV,EAAEU,MACTgB,OAAQ1B,EAAE0B,QAAU,OACpBC,MAAO3B,EAAE2B,OAAS,OAClB/B,QAASI,EAAEJ,QACXkX,cAAe9W,EAAE8W,cACjBhV,YAAa9B,EAAE8B,YACfD,OAAQ7B,EAAE6B,OACVD,MAAO5B,EAAE4B,OAAS,IAClBmV,SAAU/W,EAAE+W,UAAY,YAGjCpX,OAAM,SAAC9E,GAAK,OAAAA,OAIfiV,EAAA7U,UAAA+b,cAAR,SAAsB3Y,GAClB,GAAKA,EAAL,KAGMiD,EAAMjD,EAAaiD,IACzB,GAAIA,EAAK,KACCD,EAAUC,EAAY,OAAEC,eAa9B,GAXIF,EAAQU,OACJV,EAAQU,KAAKzD,WACbD,EAAaC,SAAW+C,EAAQU,KAAKzD,UAErC+C,EAAQU,KAAKzB,YACbjC,EAAaiC,UAAYe,EAAQU,KAAKzB,YAI9CjC,EAAatB,WAAasE,EAAQtE,YAAc,GAE5CsE,EAAQG,cAAgBH,EAAQG,aAAazG,OAAQ,KAE/C0G,EAAa,GACnBJ,EAAQG,aAAahC,QAAO,SAACQ,OACnBO,EAAMlC,EAAaI,QAAQ,GAAG+B,KAAI,SAAE3F,GAAW,OAAAA,EAAEkF,QAAUC,EAAED,QAC/DQ,IACAA,EAAIX,QAAUI,EAAEJ,QAChBW,EAAImB,OAAS1B,EAAE0B,OACfnB,EAAIoB,MAAQ3B,EAAE2B,MACdpB,EAAIqB,MAAQ5B,EAAE4B,MACdrB,EAAIsB,OAAS7B,EAAE6B,OACftB,EAAIuB,YAAc9B,EAAE8B,YACpBL,EAAWzF,KAAKuE,MAIxBlC,EAAaI,QAAQ,GAAKgD,EAI9BpD,EAA6B,oBAI7ByR,EAAA7U,UAAAqY,eAAR,SAAuBpU,EAAUb,EAAc4Y,GAA/C,IAAA3X,EAAAjE,UAA+C,IAAA4b,IAAAA,EAAA,UACrCrS,EAAW1F,EAASiJ,QAE1B,GAAIvD,EAAU,CACF,IAAAsS,EAAAtS,EAAAjI,SAAUwa,EAAAvS,EAAA/H,YAAaua,EAAAxS,EAAA9H,aAAcC,EAAA6H,EAAA7H,WAE7C1B,KAAKsW,+BAA+BtT,EAAasK,GAAI,CAAChM,SAAQua,EAAEra,YAAWsa,EAAEra,aAAYsa,EAAEra,WAAUA,IAErG1B,KAAKmV,QAAS,MAEV6G,EAAc,GACdhZ,EAAaiZ,WAAava,GAAcA,EAAWhC,SACnDsc,EAActa,EAAWwa,KAAK,MAElClZ,EAAatB,WAAasa,MACpBG,EAAcJ,EAAe/b,KAAK8W,uBAAuB,CAACiF,IAAe,GAAK,GAC9EK,EAAW,CAAE9a,SAAQua,EAAEra,YAAWsa,EAAEpa,WAAYsa,EAAava,aAAc0a,GACjFnc,KAAKqc,cAAcrZ,EAAasK,GAAI8O,GAAUtW,UAAS,WAanD,GAZI8V,IACAA,EAAI5D,UAAW,GAEnB/T,EAAKkR,QAAS,EACV2G,GAAeA,EAAYpc,SAC3BsD,EAAaI,QAAUJ,EAAaI,QAAQqB,IAAG,SAACL,GAE5C,OADAH,EAAKqY,mBAAmBlY,EAAM2X,EAAc/Y,GACrCiB,EAAKsY,uBAAuBnY,EAAM0X,EAAaC,EAAc/Y,MAI5EA,EAAawZ,gBAAe,GACxBX,GAAY1c,OAAO2F,KAAK+W,GAAUnc,OAAQ,CAClC,IAAAuD,EAAA4Y,EAAA5Y,SAAUgC,EAAA4W,EAAA5W,UACdhC,GAAYA,EAASvD,OACrBsD,EAAa0D,KAAKzD,EAASiZ,KAAK,KAAMjX,EAAUiX,KAAK,MAErDlZ,EAAayZ,iBAGjBzZ,EAAayZ,YAGjB5Y,EAASH,eAGbG,EAASH,SAKjB+Q,EAAA7U,UAAA2c,uBAAA,SAAuBnY,EAAW5C,EAAkBC,EAAmBuB,GAAvE,IAAAiB,EAAAjE,KACU0c,EAAc,GACpBtY,EAAKD,QAAO,SAAE4W,EAASzP,GACfrH,EAAK0Y,eAAe5B,EAAQrW,MAAOjD,IAAmC,+BAAlBsZ,EAAQrW,QAA2C1B,EAAaM,aACpH9B,EAAYb,KAAKoa,EAAQrW,QAEzBqW,EAAQxW,QAAU/C,EAAY0P,SAAS6J,EAAQrW,OAC1CqW,EAAQxW,SACTmY,EAAY/b,KAAKoa,UAMzB6B,EAAUpb,EAAYiD,IAAG,SAAEC,GAC3B,OAAON,EAAKe,KAAI,SAACR,GAAK,OAAAA,EAAED,QAAUA,MACnCJ,OAAM,SAAC9E,GAAK,OAAAA,IAMf,OAJIkd,EAAYhd,SACZkd,EAAUA,EAAQ7b,OAAO2b,IAGtBE,EAAQtY,OAAM,SAACK,GAAK,OAAAA,GAAKA,EAAED,OAAqB,+BAAZC,EAAED,SAOzC+P,EAAA7U,UAAA+c,eAAR,SAAuBjY,EAAYtB,GAE/B,QADAA,EAAUA,GAAW,IACL+B,KAAI,SAACR,GAAK,OAAAA,EAAED,QAAUA,KAI1C+P,EAAA7U,UAAA0c,mBAAA,SAAmBlY,EAAa3C,EAAqBuB,GAC7CvB,GAAgBA,EAAa/B,QAC7B0E,EAAKD,QAAO,SAACe,OACH2X,EAAYpb,EAAa0D,KAAI,SAAC2X,GAAI,OAAAA,EAAEpY,QAAUQ,EAAIR,QACpDmY,IACA3X,EAAIqB,MAAQsW,EAAUtW,MACtBrB,EAAImB,OAASwW,EAAUxW,QAAU,OACjCnB,EAAIoB,MAAQuW,EAAUvW,OAAS,OAE3BtD,EAAaiZ,YAAc/W,EAAIuW,eAAiBvW,EAAIuW,gBAAkBjX,aACjEU,EAAIuB,cACLvB,EAAIuB,YAAcoW,EAAUpW,aAG5BvB,EAAIuB,aAAevB,EAAIuB,YAAYT,UACnCd,EAAIuB,YAAYT,QAAQ+W,KAAOF,EAAUpW,YAAYT,QAAQ+W,MAAQ,GACrE7X,EAAIuB,YAAYT,QAAQgX,gBACpBH,EAAUpW,YAAYT,QAAQgX,kBAAoBxY,WACA,OAAlDqY,EAAUpW,YAAYT,QAAQgX,gBAC9BC,SAASJ,EAAUpW,YAAYT,QAAQgX,gBAAiB,KAAO,IAIvEha,EAAaka,aAAela,EAAama,iBACpCjY,EAAIsB,SACLtB,EAAIsB,OAASqW,EAAUrW,QAGvBtB,EAAIsB,QAAUtB,EAAIsB,OAAOR,UACzBd,EAAIsB,OAAOR,QAAQ+W,KAAOF,EAAUrW,OAAOR,QAAQ+W,MAAQ,GAC3D7X,EAAIsB,OAAOR,QAAQgX,gBACfH,EAAUrW,OAAOR,QAAQgX,kBAAoBxY,WACA,OAA7CqY,EAAUrW,OAAOR,QAAQgX,gBACzBC,SAASJ,EAAUrW,OAAOR,QAAQgX,gBAAiB,KAAO,QAS9EvI,EAAA7U,UAAAwd,gBAAR,SAAwB3O,OACd6L,EAAOta,KAAKgW,gBAAgBvH,GAClC,GAAI6L,EACA,OAAOA,EAAK+C,IAAID,gBAAgB3O,GAEhC5G,QAAQC,IAAI,4DAMZ2M,EAAA7U,UAAA0d,uBAAR,SAA+B7O,OACrBzL,EAAehD,KAAKgW,gBAAgBvH,GACpC8O,EAAS,CAACjc,SAAU,GAAIE,YAAa,GAAIE,WAAY,GAAID,aAAc,IAE7E,GAAIuB,EAAc,CACN,IAAAC,EAAAD,EAAAC,SAAUgC,EAAAjC,EAAAiC,UAAW7B,EAAAJ,EAAAI,QAC7B,GAAIH,EAAU,KACJ3B,EAAW,CACb2B,SAAUA,EAASC,MAAM,KACzB+B,UAAWA,EAAU/B,MAAM,MAG/Bqa,EAAOjc,SAAWA,MAGhBE,EAAc4B,EAAQ,GAAGkB,OAAM,SAAC9E,GAAK,OAAAA,EAAE+E,SAAW/E,EAAE+E,UAAYC,YAAWC,IAAG,SAACjF,GAAK,OAAAA,EAAEkF,QAC5F6Y,EAAO/b,YAAcA,EACrB+b,EAAO9b,aAAezB,KAAK8W,uBAAuB1T,GAAS,GAEvDJ,EAAaiZ,YACbsB,EAAO7b,WAAasB,EAAatB,YAGzC,OAAO6b,GAIX9I,EAAA7U,UAAA4d,eAAA,SAAe/O,OACL8O,EAASvd,KAAKsd,uBAAuB7O,GAC3C,OAAOzO,KAAKqc,cAAc5N,EAAQ8O,IAGtC9I,EAAA7U,UAAAyc,cAAA,SAAc5N,EAAgB8O,GAA9B,IAAAtZ,EAAAjE,KACUsK,EAAMtK,KAAKod,gBAAgB3O,GAC3BgP,EAAWzd,KAAK2C,UAAUgF,SAC1B+V,EAAgBC,aAAaC,QAAQtT,GACrCuT,GAAWH,EAAgBjU,KAAKC,MAAMgU,GAAiB,KAAQ,GAUrE,GATIH,GACIM,IACAA,EAAQJ,GAAYF,GAGxBI,aAAaG,QAAQxT,EAAKb,KAAK4M,UAAUwH,KAEzCF,aAAazK,WAAW5I,GAExBtK,KAAK+d,gBAAiB,KAChBC,EAAUhe,KAAKgW,gBAAgBvH,GACrC,GAAIuP,GAAWA,EAAQ1a,aAAc,KAC3B2a,EAAeje,KAAKwW,oBAAoB/H,GAC9C,OAAIwP,EAE0B,YAAtBA,EAAavM,KACN1R,KAAK2V,cAAcnG,WAAWyO,EAAcxP,GAAQ,GAEpDzO,KAAK2V,cAAcxE,iBAAiBsG,KACvCC,EAAAA,UAAS,SAAErY,GACP,GAAIA,EAAEmZ,QAAS,KACL0F,EAAkB7e,EAAE8e,sBAAwB9e,EAAE8e,qBAAqBze,OACzE,GAA0B,WAAtBue,EAAavM,MAA4C,QAAtBuM,EAAavM,MAAkBwM,EAClE,OAAOja,EAAK0R,cAAcnG,WAAWyO,EAAcxP,GAAQ,GAInE,OAAOuB,EAAAA,IAAG,MAKfA,EAAAA,IAAG,GAIlB,OAAOhQ,KAAKoe,gBAAgB9T,EAAMiT,EAASM,EAAW,IAG1D,OAAO7N,EAAAA,IAAG,IAGdyE,EAAA7U,UAAAye,cAAA,SAAc/T,GACV,GAAItK,KAAK+d,gBACL,OAAO/d,KAAKse,eAAehU,OAErBiT,EAASI,aAAaC,QAAQtT,GACpC,GAAIiT,EAAQ,KACFgB,EAAM9U,KAAKC,MAAM6T,GACvB,OAAIgB,EAAIve,KAAK2C,UAAUgF,UACZqI,EAAAA,GAAGuO,EAAIve,KAAK2C,UAAUgF,WAEzBxI,OAAO2F,KAAKyZ,GAAKzU,QAAQ,gBAAkB,EACpCkG,EAAAA,GAAGuO,GAEP,KAGX,OAAOvO,EAAAA,GAAG,OAKdyE,EAAA7U,UAAA+Y,iBAAR,SAAyB/H,OAOjB4N,EAAgB,KACpB,IAAK5N,IAAeA,EAAWlR,OAC3B,OAAO8e,EAGP,KADAA,EAAgB5N,EAAWzL,KAAI,SAAC3F,GAAK,OAAAA,EAAEiS,aACnB,KACZgN,EAAgB7N,EAAWtM,OAAM,SAAC9E,GAAK,MAAW,WAAXA,EAAEkS,OAExC+M,EAAc/e,SACf+e,EAAgB7N,EAAWtM,OAAM,SAAC9E,GAAK,MAAW,QAAXA,EAAEkS,QAIzC8M,EADAC,EAAc/e,OACE+e,EAAc,GAEd7N,EAAW,GAKvC,OAAO4N,GAIX/J,EAAA7U,UAAA8e,YAAA,SAAYjQ,GAAZ,IAAAxK,EAAAjE,KACUsK,EAAMtK,KAAKod,gBAAgB3O,GAC3BuP,EAAUhe,KAAKgW,gBAAgBvH,GAEjCJ,EAAc2B,EAAAA,GAAG,IAKrB,OAJIgO,GAAWA,EAAQ1a,eACnB+K,EAAcrO,KAAKoP,cAAcX,IAG9BkQ,EAAAA,SAAStQ,EAAarO,KAAKqe,cAAc/T,GAAMtK,KAAK2V,cAAcvE,gBAAgBqG,KACrFhT,EAAAA,IAAG,SAAEM,OAAA6Z,EAAA3e,EAAA8E,EAAA,GAAC6L,EAAAgO,EAAA,GAAYC,EAAAD,EAAA,GAAaE,EAAAF,EAAA,GAG3B,GAFAhO,EAAaA,GAAc,GAC3B3M,EAAK8N,UAAY+M,EACZlO,EAAWlR,OAET,CAEHuE,EAAKuM,cAAcI,EAAYnC,OAEzB+P,EAAqCva,EAAK0U,iBAAiB/H,GACjE,GAAK4N,EAEE,CACHva,EAAK4R,oBAAoBpH,EAAQ+P,OAC3BO,EAAetV,KAAKC,MAAM8U,EAAc3T,sBAC9C,GAAIkU,EAAc,KACRpX,EAAW1D,EAAKtB,UAAUgF,SAChC,OAAIoX,EAAapX,IACbgW,aAAaG,QAAQxT,EAAKb,KAAK4M,UAAU0I,IAClCA,EAAapX,KAEpBoX,EAAapX,GAAY,KACzBgW,aAAaG,QAAQxT,EAAKb,KAAK4M,UAAU0I,IAClC,MAGX,OAAO,KAfX,OAAOF,EAPX,OAAOA,MA+BfpK,EAAA7U,UAAAwe,gBAAR,SAAwB9T,EAAKiT,GACzB,QACUyB,EAAoB,CACtBC,WAAY3U,EACZ4U,WAAY,GACZC,WAAY,GACZC,UAAW7B,EAAS9T,KAAK4M,UAAUkH,GAAW,IAGlD,OAAOvd,KAAK+d,gBAAgBsB,iBAAiBL,GAC/C,MAAOze,GACLsH,QAAQhH,MAAMN,KAItBkU,EAAA7U,UAAA0f,gBAAA,SAAgBtc,EAAca,GAA9B,IAAAI,EAAAjE,KACU4F,EAAoB5F,KAAK2C,UAAUG,SAAS,iDAAmD,cACrG9C,KAAKwC,SAASqD,QAAQD,GAAmB6R,KACrCC,EAAAA,UAAS,SAAGrY,GACR,OAAIA,EACO4E,EAAKoY,cAAcrZ,EAAasK,GAAI,IAExC0C,EAAAA,GAAG3Q,MAEhByG,UAAS,SAAEzG,GACLA,IACA4E,EAAK0X,cAAc3Y,GACnBa,EAASH,YAKb+Q,EAAA7U,UAAA0e,eAAR,SAAuBhU,GAAvB,IAAArG,EAAAjE,KACI,IACI,OAAOA,KAAK+d,gBAAgBwB,gBAAgBjV,GAAKmN,KAC7ChT,EAAAA,IAAG,SAAE+a,GACD,GAAIA,GAAOA,EAAIC,UAAW,KAChB9a,EAAI8E,KAAKC,MAAM8V,EAAIC,WACzB,OAAI9a,EACIA,EAAEV,EAAKtB,UAAUgF,WACjBgW,aAAaG,QAAQxT,EAAKkV,EAAIC,WACvB9a,EAAEV,EAAKtB,UAAUgF,YAExBhD,EAAEV,EAAKtB,UAAUgF,UAAY,KAC7BgW,aAAaG,QAAQxT,EAAKb,KAAK4M,UAAU1R,IAIlC,MAIR,KAEX,OAAO,QAGjB,MAAOpE,GACLsH,QAAQhH,MAAMN,KAIdkU,EAAA7U,UAAA8f,gBAAR,SAAwBjR,EAAgBlF,QAAA,IAAAA,IAAAA,EAAA,UAC9BkU,EAAWzd,KAAK2C,UAAUgF,SAC3B4B,IACDA,EAAWvJ,KAAKsd,uBAAuB7O,QAErCkR,EAAY3f,KAAKod,gBAAgB3O,GACjCiP,EAAgBC,aAAaC,QAAQ+B,GACrC9B,GAAWH,EAAgBjU,KAAKC,MAAMgU,GAAiB,KAAQ,GAKrE,OAJIG,IACAA,EAAQJ,GAAYlU,GAGjBsU,GAKHpJ,EAAA7U,UAAA0Y,qBAAR,SAA6BtV,EAAmB4N,EAAiBgP,GAAjE,IAAA3b,EAAAjE,UAAiE,IAAA4f,IAAAA,GAAA,OACvD/F,EAAY,CACdtT,MAAO,IAAKkT,OAAQ,IAAKC,YAAY,EAAO7W,MAAO,OACnD8W,aAAc,CACV1G,MAAOrC,GAAc,GACrBsC,WAAY0M,GAEhBhG,aAAa,GAGXiG,EAAgB7f,KAAK0U,SAASkE,KAAK5F,EAAqB6G,GACxDvC,EAAWuI,EAAqB,QACtCvI,EAAS/F,WAAWzL,UAAS,WACzB+Z,EAAcnc,UAGlB4T,EAAS9F,YAAY1L,UAAS,SAAEzG,GAC5B4E,EAAK0R,cAAc7F,aAAazQ,EAAG2D,EAAasK,IAAIxH,UAAS,SAAEvF,GAC3D,IAAS,IAANA,EAAH,KAIMuf,EAAM,aACR7b,EAAKwR,cACLxR,EAAKwR,cAAc+C,QAAQsH,GAE3B7b,EAAKzB,SAASgW,QAAQsH,OAGpBlP,EAAa3M,EAAK0R,cAAc1F,cAAcjN,EAAasK,GAAI,QAElEjO,EAAE+U,WACDxD,EAAWzM,QAAO,SAAC3E,GACfA,EAAEiS,WAAY,EACVjS,EAAE8N,KAAOjO,EAAE+U,YACX5U,EAAEiS,WAAY,SAMtBhB,EAAgBG,EAChBvR,EAAEiV,YAAcjV,EAAEiV,WAAW5U,SAC7B+Q,EAAgBG,EAAWtM,OAAM,SAAC9E,GAC9B,OAAQH,EAAEiV,WAAWpD,SAAS1R,EAAE8N,OAIxCrJ,EAAK0R,cAAcnF,cAAcxN,EAAasK,GAAImD,GAClDoP,EAAcnc,aA9BVmc,EAAcnc,YAkCHmc,EAAc/F,OAAe,SACrCC,SAASC,OAAS1C,EAAS2C,OAAOvP,eAI7C+J,EAAA7U,UAAAuY,oBAAR,SAA4BnV,EAAc+c,GAA1C,IAAA9b,EAAAjE,KACU6Z,EAAY,CACdtT,MAAO,IAAKkT,OAAQ,IAAKC,YAAY,EAAO7W,MAAO,OACnD8W,aAAc,CACV5H,UAAW/R,KAAK+R,WAEpB6H,aAAa,EACboG,WAAW,GAGTC,EAAejgB,KAAK0U,SAASkE,KAAKvH,EAAoBwI,GACtDvC,EAAW2I,EAAoB,QACrC3I,EAAS/F,WAAWzL,UAAS,WACzBma,EAAavc,UAGjB4T,EAAS9F,YAAYiG,KACjBC,EAAAA,UAAS,SAAErY,GACP,OAAO4E,EAAKic,gBAAgBld,EAAasK,GAAIjO,MAEnDyG,UAAS,SAAEzG,GACT,IAAe,IAAXA,EAAE0O,KAAN,KAUM6C,EAAa3M,EAAK0R,cAAc1F,cAAcjN,EAAasK,GAAI,SAAW,GAC5EjO,EAAEoS,WACFb,EAAWzM,QAAO,SAAC3E,GACfA,EAAEiS,WAAY,IAGtBb,EAAWjQ,KAAKtB,GAChB4E,EAAK4R,oBAAoB7S,EAAasK,GAAIjO,GAC1C4E,EAAK0R,cAAcnF,cAAcxN,EAAasK,GAAIsD,GAClDqP,EAAavc,YAnBb,KACUoc,EAAMzgB,EAAEygB,KAAO,UACjB7b,EAAKwR,cACLxR,EAAKwR,cAAc0K,KAAKL,GAExB7b,EAAKzB,SAAS2d,KAAKL,MAiB/BxI,EAASnG,eAAesG,KACpBC,EAAAA,UAAS,SAAErY,GACP,OAAO4E,EAAK0R,cAAcxE,iBAAiBsG,KACvChT,EAAAA,IAAG,SAAE2T,GACD,OAAAlZ,EAAA,CACIwS,KAAMrS,GACH+Y,SAKrBtS,UAAS,SAAEzG,OACLsT,EAAe,CAAEC,UAAQ,EAAMC,KAAK,GACpCiN,EAAM,uBAIV,GAHqB,QAAjBzgB,EAAEqS,KAAK9Q,QACPkf,EAAM,wBAENzgB,EAAEmZ,QAAS,KACL4H,EAAqB/gB,EAAEghB,mBAAqBhhB,EAAEghB,kBAAkB3gB,OACtEiT,EAAaC,UAASwN,MAChBlC,EAAkB7e,EAAE8e,sBAAwB9e,EAAE8e,qBAAqBze,OACzEiT,EAAaE,IAAMqL,EACE,WAAjB7e,EAAEqS,KAAK9Q,MACP0W,EAASnV,WAAWuP,KAAOrS,EAAEqS,KAAK9Q,MACV,QAAjBvB,EAAEqS,KAAK9Q,QACTsd,GAGD5G,EAASnV,WAAWuP,KAAOrS,EAAEqS,KAAK9Q,MAClC0W,EAASnV,WAAWwP,OAAStS,EAAE8e,qBAAqBjC,KAAK,KACzD5E,EAAShG,kBAAoBjS,EAAE8e,sBAJ/Bla,EAAKwR,cAAcyE,QAAQ4F,SAQnC7b,EAAKwR,cAAcyE,QAAQ4F,GAC3BnN,EAAe,CAAEC,UAAQ,EAAOC,KAAK,GAEzCyE,EAAS5E,QAAQC,KAGEsN,EAAanG,OAAe,SACpCC,SAASC,OAAS1C,EAAS2C,OAAOvP,eAGrD+J,EAAA7U,UAAAwP,cAAA,SAAcX,GACV,OAAOzO,KAAK2V,cAAcvG,cAAcX,IAG5CgG,EAAA7U,UAAAsgB,gBAAA,SAAgBzR,EAAgBuM,GAC5B,IAAIA,EAAKrR,KACL,OAAOqG,EAAAA,GAAG,CAACjC,MAAM,EAAO+R,IAAK,gBAEvBQ,EAAUtgB,KAAK2V,cAAcjF,cAAcjC,EAAQuM,EAAKrR,MAE9D,GAAuB,kBAAZ2W,GAAyBA,EAChC,OAAOtQ,EAAAA,GAAG,CAACjC,MAAM,EAAO+R,IAAK,iBAC1B,GAAIS,MAAMC,QAAQF,IAAYA,EAAQ5gB,OAAQ,KAC3C+gB,EAAQH,EAAQ7b,IAAG,SAACjF,GACtB,MAAU,WAANA,EACO,aACK,WAANA,EACC,aAEA,aAIf,OAAOwQ,EAAAA,GAAG,CAACjC,MAAM,EAAO+R,IAAKW,EAAKvE,KAAK,UAIzCwE,EAAe,GAOrB,GANA1gB,KAAK+R,UAAU5N,QAAO,SAAC3E,GACO,KAAtBwb,EAAKrR,KAAKnK,EAAEwS,OAAgBgJ,EAAKrR,KAAKnK,EAAEwS,QAAUxN,WAClDkc,EAAa/f,KAAKnB,EAAEwS,QAIxB0O,EAAahhB,OAAQ,CACf+gB,EAAQC,EAAajc,IAAG,SAACjF,GAC3B,MAAU,WAANA,EACO,aACK,WAANA,EACC,aAEA,aAGf,OAAOwQ,EAAAA,GAAG,CAACjC,MAAM,EAAO+R,IAAKW,EAAKvE,KAAK,MAI3C,GAAIlB,EAAKtJ,MAAsB,QAAdsJ,EAAKtJ,QAAoBsJ,EAAKrJ,SAAWqJ,EAAKrJ,OAAOjS,QAClE,OAAOsQ,EAAAA,GAAG,CAACjC,MAAM,EAAO+R,IAAK,cAE7BjC,EAAU,KACR8C,EAAmB3gB,KAAK4K,yBAAyB6D,GAEnDoP,EADA8C,GAIU3gB,KAAK0f,gBAAgBjR,OAG7BmS,EAAQ5gB,KAAK2U,UAAUkM,OACzBpP,EAAYuJ,EAAKvJ,UACjBA,GACkB,YAAduJ,EAAKtJ,OACLD,GAAY,GAIhBuJ,EAAKrR,MAA6B,iBAAdqR,EAAKrR,OACzBqR,EAAKrR,KAAOF,KAAK4M,UAAU2E,EAAKrR,WAG9B8F,EAA8B,CAChCnC,GAAIsT,EACJhR,SAAU,GACVoC,KAAM,GACNrI,KAAMqR,EAAKrR,KACX+H,KAAMsJ,EAAKtJ,KACXD,UAAWA,EACXqP,UAAU,EACVC,SAAU,2BACVC,WAAYhhB,KAAKihB,2BAA2BL,EAAO5F,EAAKrJ,QACxD9G,qBAAsBgT,EAASpU,KAAK4M,UAAUwH,GAAU,IAG5D,OAAO7d,KAAK2V,cAAcnG,WAAWC,EAAQhB,GAAQgJ,KACjDhT,EAAAA,IAAG,WACC,OAAOgL,MAKnBgF,EAAA7U,UAAA4Q,cAAA,SAAcI,EAAmCnC,GAC7CzO,KAAK2V,cAAcpH,OAAO,CAAC8J,KAAMzH,GAAanC,IAG1CgG,EAAA7U,UAAAqhB,2BAAR,SAAmCC,EAAkBC,GAArD,IAAAld,EAAAjE,KACI,OAAKmhB,GAAWA,EAAOzhB,OAGhByhB,EAAO1c,IAAG,SAACjF,GACd,MAAO,CACH8N,GAAIrJ,EAAK0Q,UAAUkM,OACnBrO,MAAOhT,EACP4hB,UAAWF,KANP,IAWRzM,EAAA7U,UAAAgL,yBAAR,SAAiC6D,OACvB4S,EAAerhB,KAAKwW,oBAAoB/H,GAC9C,OAAI4S,GAAgBA,EAAaxW,qBACtBpB,KAAKC,MAAM2X,EAAaxW,sBAE5B,0BAlrCdyW,EAAAA,sDAnBoBja,EAAAA,gBAEZka,EAAAA,sBACA7e,EAAAA,uBAKA8e,EAAAA,iBAFA5e,EAAAA,iBAisCT6R,EAprCA,GCrBAgN,EAAA,WAmBI,SAAAA,EAAoBzZ,EAA4B/G,GAA5BjB,KAAAgI,SAAAA,EAA4BhI,KAAAiB,GAAAA,EAVvCjB,KAAA0hB,QAAU,QACV1hB,KAAA2hB,WAAa,QACb3hB,KAAA4hB,UAAY,QACZ5hB,KAAA6hB,YAAc,GAEd7hB,KAAAoZ,SAAW,GAGVpZ,KAAA8hB,eAAiB,IAAI/f,EAAAA,aA2DnC,OAtDI0f,EAAA7hB,UAAAyD,SAAA,aAEAoe,EAAA7hB,UAAAmiB,kBAAA,SAAkBpe,EAAoBqX,EAAW3V,GAW7C,OAVA1B,EAAOC,kBACPoX,EAAK5V,UAAW,EAChB4V,EAAK3V,MAAQA,EAERA,GACDrF,KAAKgiB,GAAGC,WAAWjH,GAGvBhb,KAAKiB,GAAG6M,gBACR9N,KAAKkiB,mBAAmB,OACjB,GAGXT,EAAA7hB,UAAAuiB,YAAA,WACI,GAAIniB,KAAKgiB,GAAGzP,WAAY,KACd6P,EAAQ,GACRC,EAAS,GAOf,OANAriB,KAAKgiB,GAAGzP,WAAWpO,QAAO,SAACe,GACvBA,EAAIG,MAAQH,EAAIG,OAAS,MACzB+c,EAAMzhB,KAAKuE,EAAIR,OACf2d,EAAO1hB,KAAKuE,EAAIG,SAGb,CAAEpC,SAAUmf,EAAOnd,UAAWod,GAEzC,MAAO,IAGXZ,EAAA7hB,UAAAsiB,mBAAA,SAAmBve,OACT2e,EAAKtiB,KAAKmiB,cAChBniB,KAAK8hB,eAAerc,KAAK6c,IAG7Bb,EAAA7hB,UAAA2iB,aAAA,SAAa5e,OACHsP,EAAatP,EAAY,MAC/B,GAAIA,EAAOkG,OAAOC,QAAQ,aAAe,EACrC,IAAK,IAAMwD,KAAM2F,EACTtP,EAAOsP,MAAM3F,KACb3J,EAAOsP,MAAM3F,GAAIjI,MAAQ,YAIjC,GAAsB,UAAlB1B,EAAOkG,OACP,IAAK,IAAMyD,KAAM2F,EACTtP,EAAOsP,MAAM3F,KACb3J,EAAOsP,MAAM3F,GAAIjI,MAAQ,4BAnEhDwB,EAAAA,UAASC,KAAA,CAAC,CACPC,SAAU,eACVC,SAAA,qrFAL0CK,EAAAA,gBAAgCD,EAAAA,sDASzEE,EAAAA,0BACAA,EAAAA,yBACAA,EAAAA,2BACAA,EAAAA,wBAEAA,EAAAA,kBACAE,EAAAA,UAASV,KAAA,CAAC,8BAEVS,EAAAA,UA2DLka,EA5EA,GCAAe,EAAA,WA2BI,SAAAA,EAAoBxa,EAA4B/G,GAA5BjB,KAAAgI,SAAAA,EAA4BhI,KAAAiB,GAAAA,EAnBvCjB,KAAA0hB,QAAU,QACV1hB,KAAA2hB,WAAa,QACb3hB,KAAA4hB,UAAY,QAGb5hB,KAAAyiB,aAAe,GASdziB,KAAAoZ,SAAW,GAGVpZ,KAAA0iB,kBAAoB,IAAI3gB,EAAAA,aAmBtC,OA9BI5C,OAAAqK,eAAIgZ,EAAA5iB,UAAA,cAAW,KAAf,WACI,OAAOI,KAAKyiB,kBAEhB,SAAyBE,GACrB3iB,KAAKyiB,aAAeE,EACpB3iB,KAAK0iB,kBAAkBjd,KAAKkd,oCAWhCH,EAAA5iB,UAAAyD,SAAA,aAEAmf,EAAA5iB,UAAA2D,YAAA,SAAYC,KAIZgf,EAAA5iB,UAAA2iB,aAAA,SAAa5e,KAIb6e,EAAA5iB,UAAAgjB,aAAA,SAAajf,EAAoBkf,GAC7Blf,EAAOC,kBACP5D,KAAKgiB,GAAGC,WAAWY,wBAvC1Bhc,EAAAA,UAASC,KAAA,CAAC,CACPC,SAAU,eACVC,SAAA,4hCAL0CK,EAAAA,gBAClCD,EAAAA,sDAOPE,EAAAA,0BACAA,EAAAA,yBACAA,EAAAA,2BAOAA,EAAAA,wBAKAA,EAAAA,kBACAE,EAAAA,UAASV,KAAA,CAAC,iCAEVS,EAAAA,UAmBLib,EA5CA,gBCiCI,SAAAM,EAAoB9a,EAA2B+a,EAA4D9hB,GAAvFjB,KAAAgI,SAAAA,EAA2BhI,KAAA+iB,wBAAAA,EAA4D/iB,KAAAiB,GAAAA,EAtBlGjB,KAAAoD,QAAU,GACVpD,KAAAkI,OAAS,GAIRlI,KAAAuI,aAAe,IAAIxG,EAAAA,aACnB/B,KAAAwI,aAAe,IAAIzG,EAAAA,aAE7B/B,KAAA+I,QAAU,GAGV/I,KAAAgjB,WAAa,GACbhjB,KAAAgJ,WAAa,MACbhJ,KAAAijB,YAAc,KACdjjB,KAAAkjB,gBAAiB,EAEjBljB,KAAAoC,YAAc,GACdpC,KAAAqC,WAAa,GACbrC,KAAAsC,aAAe,GACftC,KAAAuC,cAAgB,GAEhBvC,KAAAiJ,MAAO,EAEHjJ,KAAKkjB,eAAiBljB,KAAK+iB,wBAAwB/f,aAAaka,aACvCld,KAAK+iB,wBAAwB/f,aAAama,eACnEnd,KAAK2C,UAAY3C,KAAKgI,SAASvF,IAAIG,EAAAA,cAAe,MAkM1D,OA/LIkgB,EAAAljB,UAAA2D,YAAA,SAAYC,GACJA,EAAQJ,UAAYI,EAAQJ,QAAQK,kBACpCzD,KAAKmjB,gBACLnjB,KAAK+I,QAAU/I,KAAKoD,QAAQ,GAC5BpD,KAAKijB,YAAcjjB,KAAKoD,QAAQ,GAAG,GACnCpD,KAAKojB,uBAIbN,EAAAljB,UAAAyD,SAAA,WAAA,IAAAY,EAAAjE,KAEIA,KAAKiJ,KAAmC,OAA5BjJ,KAAK2C,UAAUgF,SAE3B3H,KAAK+C,WAED/C,KAAKqjB,SACLrjB,KAAKqjB,QAAQC,aAAaxd,UAAS,SAAC8N,GAC3B3P,EAAKof,QAAQE,UACdtf,EAAKsE,aAAa9C,KAAKxB,EAAK+e,eAMpCF,EAAAljB,UAAAujB,cAAR,WAAA,IAAAlf,EAAAjE,KACIA,KAAKgjB,WAAahjB,KAAKkI,OAAOzD,IAAG,SAACjF,GAC9B,OAAOyE,EAAKb,QAAQ,GAAG+B,KAAI,SAACD,GAAO,OAAAA,EAAIR,QAAUlF,OAIjDsjB,EAAAljB,UAAAmD,SAAR,WAEI/C,KAAKqC,WAAarC,KAAK+iB,wBAAwB1gB,WAC/CrC,KAAKoC,YAAcpC,KAAK+iB,wBAAwB3gB,YAChDpC,KAAKsC,aAAetC,KAAK+iB,wBAAwBzgB,aACjDtC,KAAKuC,cAAgBvC,KAAK+iB,wBAAwBxgB,cAGlDvC,KAAKmjB,gBACLnjB,KAAK+I,QAAU/I,KAAKoD,QAAQ,GAC5BpD,KAAKijB,YAAcjjB,KAAKoD,QAAQ,GAAG,GACnCpD,KAAKojB,sBAGDN,EAAAljB,UAAAwjB,mBAAR,WACQpjB,KAAKijB,cACDjjB,KAAKijB,YAAYxH,gBAAkBjX,YACnCxE,KAAKijB,YAAYxH,eAAgB,GAGjCzb,KAAKijB,YAAYxc,cAAgBjC,UACjCxE,KAAKijB,YAAYxc,YAAc,CAAET,QAAS,CAACgX,iBAAkB,KAE7Dhd,KAAKijB,YAAYxc,YAAYT,QAAUhG,KAAKijB,YAAYxc,YAAYT,SAAW,CAACgX,iBAAkB,GAC9Fhd,KAAKijB,YAAYxc,YAAYT,QAAQgX,kBAAoBxY,YACzDxE,KAAKijB,YAAYxc,YAAYT,QAAQgX,iBAAmB,IAI5Dhd,KAAKijB,YAAYzc,SAAWhC,UAC5BxE,KAAKijB,YAAYzc,OAAU,CAAER,QAAS,CAACgX,iBAAkB,KAEzDhd,KAAKijB,YAAYzc,OAAOR,QAAUhG,KAAKijB,YAAYzc,OAAOR,SAAW,CAACgX,iBAAkB,GACpFhd,KAAKijB,YAAYzc,OAAOR,QAAQgX,kBAAoBxY,YACpDxE,KAAKijB,YAAYzc,OAAOR,QAAQgX,iBAAmB,MAWnE8F,EAAAljB,UAAAoL,cAAA,SAAcwY,EAAYvY,GAA1B,IAAAhH,EAAAjE,UAA0B,IAAAiL,IAAAA,EAAA,QAClB7G,EAAO,GACX,OAAQof,GACJ,IAAK,UACDpf,EAAOpE,KAAKgjB,WACZ,MACJ,IAAK,SACD5e,EAAOpE,KAAKoD,QAAQ,GAAGkB,OAAM,SAAC9E,GAAK,OAAkC,IAAlCyE,EAAKiE,OAAO4B,QAAQtK,EAAEkF,SACzD,MACJ,IAAK,MACL,QACIN,EAAOpE,KAAKoD,QAAQ,GAIxB6H,IACA7G,EAAOA,EAAKE,OAAM,SAACK,GAAK,OAAAA,EAAE9B,MAAM0H,cAAcT,QAAQmB,IAAgB,KAG1EjL,KAAK+I,QAAU3E,GAGnB0e,EAAAljB,UAAA6jB,aAAA,SAAave,EAAKvB,GACd3D,KAAKijB,YAAc/d,EACnBlF,KAAKojB,sBAIDN,EAAAljB,UAAAsL,gBAAR,WACIlL,KAAKmjB,gBACLnjB,KAAKwI,aAAa/C,KAAKzF,KAAKkI,SAGhC4a,EAAAljB,UAAAuL,WAAA,SAAWxH,EAAQuB,GAEflF,KAAKoL,gBAAgBzH,EAAQuB,IAGjC4d,EAAAljB,UAAAwL,gBAAA,SAAgBzH,EAAQuB,GAAxB,IAAAjB,EAAAjE,KAEI2D,EAAOC,sBACD0H,EAAQtL,KAAKkI,OAAO4B,QAAQ5E,EAAIR,QACvB,IAAX4G,EACAtL,KAAKkI,OAAOvH,KAAKuE,EAAIR,OAErB1E,KAAKkI,OAAOqD,OAAOD,EAAO,GAG9BtL,KAAKoD,QAAQ,GAAGe,QAAO,SAAC2Y,GACpBA,EAAEvY,QAAUN,EAAKiE,OAAO4B,QAAQgT,EAAEpY,QAAU,IAGhD1E,KAAKkI,OAASlI,KAAKoD,QAAQ,GAAGkB,OAAM,SAAC9E,GAAK,OAAAA,EAAE+E,UAASE,IAAG,SAACjF,GAAK,OAAAA,EAAEkF,QAEhE1E,KAAKkL,mBAGT4X,EAAAljB,UAAA6L,aAAA,SAAa9H,EAAQ6f,OACX9X,EAAM/H,EAAOkG,OAAOjJ,MAC1BZ,KAAKgL,cAAcwY,EAAI9X,IAG3BoX,EAAAljB,UAAA+L,YAAA,SAAYC,EAAW4X,EAAI9X,EAAKG,SAEpBC,EAAAF,EAAAE,aAAcC,EAAAH,EAAAG,WAEhBC,EAAWhM,KAAK+I,QAAQ+C,GACxBG,EAAajM,KAAK+I,QAAQgD,GAE1BG,EAAgBlM,KAAKoD,QAAQ,GAAG+I,UAAS,SAAC3M,GAAK,OAAAA,EAAEkF,QAAUsH,EAAStH,QACpE0H,EAAkBpM,KAAKoD,QAAQ,GAAG+I,UAAS,SAAC3M,GAAK,OAAAA,EAAEkF,QAAUuH,EAAWvH,QAExE2H,EAAcrM,KAAKoD,QAAQ,GAAGmI,OAAOW,EAAe,IAC1DnH,EAAA/E,KAAKoD,QAAQ,IAAGmI,OAAMxL,MAAAgF,EAAAjE,EAAA,CAACsL,EAAiB,GAAMC,IAE9CrM,KAAKkI,OAASlI,KAAKoD,QAAQ,GAAGkB,OAAM,SAAC9E,GAAK,OAAAA,EAAE+E,UAASE,IAAG,SAACjF,GAAK,OAAAA,EAAEkF,QAChE1E,KAAKkL,kBAELlL,KAAKgL,cAAcwY,EAAI9X,IAYnBoX,EAAAljB,UAAA0M,iBAAR,WACI,OAA2B,IAAvBtM,KAAKkI,OAAOxI,OACL,EAEHM,KAAKkI,OAAOxI,SAAWM,KAAKoD,QAAQ,GAAG1D,OAChC,EAEJ,GAIfojB,EAAAljB,UAAA4M,gBAAA,SAAgB7I,EAAQ6f,EAAI9X,OAClBe,EAAQzM,KAAKsM,mBACL,IAAVG,GAAyB,IAAVA,GAEfzM,KAAKoD,QAAQ,GAAGe,QAAO,SAAC3E,GAAK,OAAAA,EAAE+E,SAAU,IACzCvE,KAAKkI,OAASlI,KAAKoD,QAAQ,GAAGqB,IAAG,SAACjF,GAAK,OAAAA,EAAEkF,UAGzC1E,KAAKoD,QAAQ,GAAGe,QAAO,SAAC3E,GAAK,OAAAA,EAAE+E,SAAU,IACzCvE,KAAKkI,OAAS,IAGlBlI,KAAKkL,kBACLlL,KAAKgL,cAAcwY,EAAI9X,wBA/N9B7E,EAAAA,UAASC,KAAA,CAAC,CACPC,SAAU,wBACVC,SAAA,8wMACAC,cAAeC,EAAAA,kBAAkBC,kDAPFE,EAAAA,gBAE1BrG,SAFqEoG,EAAAA,sDAUzEE,EAAAA,sBACAA,EAAAA,uBAEAE,EAAAA,UAASV,KAAA,CAAC,uCAEVS,EAAAA,6BACAA,EAAAA,UAqNLub,kBC3JI,SAAAY,EAAoB1b,EAA2B+a,EAA4D9hB,GAAvFjB,KAAAgI,SAAAA,EAA2BhI,KAAA+iB,wBAAAA,EAA4D/iB,KAAAiB,GAAAA,EAnBlGjB,KAAAkI,OAAS,GACTlI,KAAA2jB,cAAgB,GAEhB3jB,KAAA4jB,YAAc,GAEb5jB,KAAA6jB,kBAAoB,IAAI9hB,EAAAA,aACxB/B,KAAA8jB,oBAAsB,IAAI/hB,EAAAA,aAMpC/B,KAAA+jB,aAAe,GACf/jB,KAAAgkB,kBAAoB,GACpBhkB,KAAAikB,qBAAuB,KAEvBjkB,KAAAkkB,wBAAyB,EACzBlkB,KAAAsC,aAAe,GACftC,KAAAuC,cAAgB,GAmIpB,OAhIImhB,EAAA9jB,UAAAyD,SAAA,WAAA,IAAAY,EAAAjE,KAEIA,KAAKsC,aAAetC,KAAK+iB,wBAAwBzgB,aACjDtC,KAAKuC,cAAgBvC,KAAK+iB,wBAAwBxgB,cAElDvC,KAAKmkB,kBACLnkB,KAAKokB,sBACLpkB,KAAKqkB,yBAEDrkB,KAAKqjB,SACLrjB,KAAKqjB,QAAQC,aAAaxd,UAAS,SAAC8N,GAC3B3P,EAAKof,QAAQE,UACdtf,EAAK6f,oBAAoBre,KAAKxB,EAAK0f,iBAK/C3jB,KAAK2jB,cAAcxf,QAAO,SAAC3E,GACvByE,EAAKmf,mBAAmB5jB,MAIhCkkB,EAAA9jB,UAAA2D,YAAA,SAAYC,GAAZ,IAAAS,EAAAjE,KACQwD,EAAQmgB,gBAAkBngB,EAAQmgB,cAAclgB,kBAChDzD,KAAK2jB,cAAcxf,QAAO,SAAC3E,GACvByE,EAAKmf,mBAAmB5jB,KAE5BQ,KAAKmkB,kBACLnkB,KAAKqkB,2BAILX,EAAA9jB,UAAAykB,uBAAR,WACQrkB,KAAK2jB,gBACL3jB,KAAKikB,qBAAuBjkB,KAAK2jB,cAAc,KAI/CD,EAAA9jB,UAAAwkB,oBAAR,WAAA,IAAAngB,EAAAjE,KACIA,KAAKskB,kBAAkB5Z,cAAc6Z,iBAAiB,QAAO,SAAGhkB,GACxDA,EAAEsJ,SAAY5F,EAAKugB,mBAAmB9Z,gBACtCzG,EAAKigB,wBAAyB,KAEnC,IAGCR,EAAA9jB,UAAAukB,gBAAR,WAAA,IAAAlgB,EAAAjE,KACQA,KAAK4jB,aAAe5jB,KAAK4jB,YAAYlkB,OACrCM,KAAK+jB,aAAe/jB,KAAK4jB,YAAYnf,IAAG,SAAEqY,GACtC,OAAO7Y,EAAKb,QAAQ,GAAG+B,KAAI,SAACD,GAAO,OAAAA,EAAIR,QAAUoY,MAClDxY,OAAM,SAAC9E,GAAK,OAAAA,IAEfQ,KAAK+jB,aAAe,GAExB/jB,KAAKykB,uBAGDf,EAAA9jB,UAAA8kB,wBAAR,WACI,OAAO1kB,KAAKoD,QAAQ,GAAGkB,OAAM,SAAC9E,GAAK,OAAAA,EAAEic,eAAiBjc,EAAEic,gBAAkBjX,aAGtEkf,EAAA9jB,UAAA6kB,oBAAR,WACIzkB,KAAK6jB,kBAAkBpe,KAAKzF,KAAK4jB,cAG7BF,EAAA9jB,UAAAwjB,mBAAR,SAA2Ble,GACnBA,IAEIA,EAAIuB,cAAgBjC,UACpBU,EAAIuB,YAAc,CAAET,QAAS,CAACgX,iBAAkB,KAEhD9X,EAAIuB,YAAYT,QAAUd,EAAIuB,YAAYT,SAAW,CAACgX,iBAAkB,GACpE9X,EAAIuB,YAAYT,QAAQgX,kBAAoBxY,YAC5CU,EAAIuB,YAAYT,QAAQgX,iBAAmB,MAkB3D0G,EAAA9jB,UAAA+kB,0BAAA,SAA0BhhB,GACtBA,EAAOC,kBACP5D,KAAKkkB,wBAA0BlkB,KAAKkkB,uBACpClkB,KAAKgkB,kBAAoBhkB,KAAK0kB,2BAIlChB,EAAA9jB,UAAAglB,eAAA,SAAejhB,EAAQuB,GACnBvB,EAAOC,mBACsC,IAAzC5D,KAAK4jB,YAAY9Z,QAAQ5E,EAAIR,SAC7B1E,KAAK+jB,aAAYjjB,EAAOd,KAAK+jB,aAAY,CAAE7e,IAC3ClF,KAAK4jB,YAAc5jB,KAAK+jB,aAAatf,IAAG,SAACjF,GAAK,OAAAA,EAAEkF,QAChD1E,KAAKykB,sBACLzkB,KAAKkkB,wBAAyB,IAKtCR,EAAA9jB,UAAAilB,sBAAA,SAAsBlhB,EAAQuB,GAC1BvB,EAAOC,kBACP5D,KAAK4jB,YAAc5jB,KAAK4jB,YAAYtf,OAAM,SAAC9E,GAAK,OAAAA,IAAM0F,EAAIR,QAC1D1E,KAAKmkB,mBAITT,EAAA9jB,UAAAklB,uBAAA,SAAuBnhB,SACnBkE,QAAQC,IAAI,yBAA0BnE,GAC9B,IAAAmI,EAAAnI,EAAAmI,aAAcC,EAAApI,EAAAoI,WAEhBM,EAAcrM,KAAK4jB,YAAYrY,OAAOO,EAAc,IAC1D/G,EAAA/E,KAAK4jB,aAAYrY,OAAMxL,MAAAgF,EAAAjE,EAAA,CAACiL,EAAY,GAAMM,IAC1CrM,KAAKmkB,mBAGTT,EAAA9jB,UAAA6jB,aAAA,SAAa9f,EAAQuB,GACjBlF,KAAKikB,qBAAuB/e,uBAvMnC2B,EAAAA,UAASC,KAAA,CAAC,CACPC,SAAU,uBACVC,SAAA,srLAEI,m3DAR2BK,EAAAA,gBAE1BrG,SAFoCoG,EAAAA,sDAuDxCE,EAAAA,sBACAA,EAAAA,6BACAA,EAAAA,2BAEAA,EAAAA,iCAEAC,EAAAA,oCACAA,EAAAA,kCAEAC,EAAAA,UAASV,KAAA,CAAC,+CACVU,EAAAA,UAASV,KAAA,CAAC,uCACVU,EAAAA,UAASV,KAAA,CAAC,mBA2If4c,KCvMQqB,EAAAC,UAAAC,aAAcF,EAAAC,UAAAE,eACtBC,EAAAA,UAAoBC,YAAcC,EAAAA,aAAaC,mBAAmBC,QAClEJ,EAAAA,UAAoBK,WAAY,mBAsD5B,SAAAC,EAAoBC,EAAwB1d,EAA4B2d,EAA2BC,GAAnG,IAAA3hB,EAAAjE,KAAoBA,KAAA0lB,OAAAA,EAAwB1lB,KAAAgI,SAAAA,EAA4BhI,KAAA2lB,OAAAA,EAA2B3lB,KAAA4lB,GAAAA,EAzCzF5lB,KAAA6lB,KAAO,IAAI9jB,EAAAA,aACZ/B,KAAAgG,QAA4B,CACjC8f,UAAW,OACXC,mBAAoB,qBACpBC,gBAAiB,CACbC,UAAW,oBAEfC,eAAc,WACV,OAAOlc,SAAS6F,MAEpBsW,gBAAiBnmB,KAAKmmB,gBAAgBpZ,KAAK/M,MAC3ComB,iBAAgB,SAAGC,EAAwBC,GACvC,OAAO,GAEXC,YAAW,SAAGC,GACVviB,EAAKyhB,OAAOe,IAAG,WACXxiB,EAAKsiB,YAAYC,MAGzBE,OAAM,SAAGF,GACLviB,EAAKyhB,OAAOe,IAAG,WACXxiB,EAAK4hB,KAAKpgB,KAAK+gB,MAGvBG,YAAW,WACP1iB,EAAKyhB,OAAOe,IAAG,WACXxiB,EAAK0iB,iBAGbC,YAAW,SAAGzG,GACVlc,EAAKyhB,OAAOe,IAAG,WACXxiB,EAAK2iB,YAAYzG,MAGzB0G,UAAS,SAAG1G,GACRlc,EAAKyhB,OAAOe,IAAG,WACXxiB,EAAK4iB,UAAU1G,OAkD/B,OA5CIsF,EAAA7lB,UAAAknB,gBAAA,WACI9mB,KAAK+mB,WAGTtB,EAAA7lB,UAAAonB,YAAA,WACIhnB,KAAKinB,cAGDxB,EAAA7lB,UAAAqnB,WAAR,WACQjnB,KAAK+K,YACL/K,KAAK+K,UAAUmc,UACflnB,KAAK+K,UAAY,OAIjB0a,EAAA7lB,UAAAmnB,QAAR,WACI/mB,KAAKinB,aACLjnB,KAAK+K,UAAYoa,EAAAA,UACbnlB,KAAK4lB,GAAGlb,cACR1K,KAAKgG,UAILyf,EAAA7lB,UAAAumB,gBAAR,SAAwB7a,GACpB,OAAOA,GAGHma,EAAA7lB,UAAA2mB,YAAR,SAAoBC,KAIZf,EAAA7lB,UAAAgnB,YAAR,SAAoBzG,GAChBtY,QAAQC,IAAI,aAAcqY,IAGtBsF,EAAA7lB,UAAAinB,UAAR,SAAkB1G,KAKVsF,EAAA7lB,UAAA+mB,YAAR,iCAvFHQ,EAAAA,UAASrgB,KAAA,CAAC,CACPC,SAAU,qEAhBMqgB,EAAAA,cAAQ/f,EAAAA,gBAAUggB,EAAAA,iBAAWC,EAAAA,4CAoB5C/f,EAAAA,wBACAD,EAAAA,SAqFLme,KC3GA8B,EAAAA,UAG0BnC,YAAcC,EAAAA,aAAaC,mBAAmBC,QACxEiC,EAAAA,UAA0BhC,WAAY,EAEtC,IAAAiC,EAAA,WA8CI,SAAAA,EAAoB/B,EAAwB1d,EAA4B2d,EAA2BC,GAAnG,IAAA3hB,EAAAjE,KAAoBA,KAAA0lB,OAAAA,EAAwB1lB,KAAAgI,SAAAA,EAA4BhI,KAAA2lB,OAAAA,EAA2B3lB,KAAA4lB,GAAAA,EAzCzF5lB,KAAA6lB,KAAO,IAAI9jB,EAAAA,aACZ/B,KAAAgG,QAA4B,CACjC0hB,YAAa,aACb5B,UAAW,OACXE,gBAAiB,CACbC,UAAW,oBAEfC,eAAc,WACV,OAAOlc,SAAS6F,MAEpBsW,gBAAiBnmB,KAAKmmB,gBAAgBpZ,KAAK/M,MAC3ComB,iBAAgB,SAAGC,EAAwBC,GACvC,OAAO,GAEXC,YAAW,SAAGC,GACVviB,EAAKyhB,OAAOe,IAAG,WACXxiB,EAAKsiB,YAAYC,MAGzBE,OAAM,SAAGF,GACLviB,EAAKyhB,OAAOe,IAAG,WACXxiB,EAAK4hB,KAAKpgB,KAAK+gB,MAGvBG,YAAW,WACP1iB,EAAKyhB,OAAOe,IAAG,WACXxiB,EAAK0iB,iBAGbC,YAAW,SAAGzG,GACVlc,EAAKyhB,OAAOe,IAAG,WACXxiB,EAAK2iB,YAAYzG,MAGzB0G,UAAS,SAAG1G,GACRlc,EAAKyhB,OAAOe,IAAG,WACXxiB,EAAK4iB,UAAU1G,OAkD/B,OA5CIsH,EAAA7nB,UAAAknB,gBAAA,WACI9mB,KAAK+mB,WAGTU,EAAA7nB,UAAAonB,YAAA,WACIhnB,KAAKinB,cAGDQ,EAAA7nB,UAAAqnB,WAAR,WACQjnB,KAAK+K,YACL/K,KAAK+K,UAAUmc,UACflnB,KAAK+K,UAAY,OAKjB0c,EAAA7nB,UAAAmnB,QAAR,WACI/mB,KAAKinB,aACLjnB,KAAK+K,UAAYyc,EAAAA,UACbxnB,KAAK4lB,GAAGlb,cACR1K,KAAKgG,UAILyhB,EAAA7nB,UAAAumB,gBAAR,SAAwB7a,GACpB,OAAOA,GAGHmc,EAAA7nB,UAAA2mB,YAAR,SAAoBC,KAIZiB,EAAA7nB,UAAAgnB,YAAR,SAAoBzG,KAIZsH,EAAA7nB,UAAAinB,UAAR,SAAkB1G,KAKVsH,EAAA7nB,UAAA+mB,YAAR,iCAxFHQ,EAAAA,UAASrgB,KAAA,CAAC,CACPC,SAAU,mEAPMqgB,EAAAA,cAAQ/f,EAAAA,gBAAUggB,EAAAA,iBAAWC,EAAAA,4CAW5C/f,EAAAA,wBACAD,EAAAA,SAqFLmgB,EA3FA,GCLAE,EAAA,WA4BA,SAAAA,KAmDA,OARWA,EAAAC,QAAP,SAAeC,GACX,MAAO,CACHC,SAAUH,EACVI,UAAW,CACP,CAAEC,QAASC,EAAAA,sBAAuBC,SAAUzT,0BA/C3D0T,EAAAA,SAAQrhB,KAAA,CAAC,CACNshB,aAAc,CACVpnB,EACAygB,EACAe,EACAM,EACAY,EACA+B,EACAgC,EACA1f,EACAsJ,EACA2B,GAEJqV,QAAS,CACLC,EAAAA,aACAC,EAAAA,YACAC,EAAAA,kBACAC,EAAAA,gBACAC,EAAAA,eACAC,EAAAA,mBAAmBf,UACnBgB,EAAAA,eAAehB,UACfiB,EAAAA,aAAajB,UACbkB,EAAAA,YAAYlB,UACZmB,EAAAA,aACAC,EAAAA,oBACAC,EAAAA,aAAarB,UACbsB,EAAAA,2BACAC,EAAAA,uBAEJC,gBAAiB,CACbpoB,EACA+G,EACAsJ,EACA2B,GAEJqW,QAAS,CACLroB,EACA+G,EACAsJ,EACA2B,OAYR2U,EA/EA","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","import {\r\n    Component, ViewEncapsulation, ViewChild, ElementRef, Input, EventEmitter,\r\n    OnInit, OnChanges, SimpleChanges, ChangeDetectorRef, Injector, Output\r\n} from '@angular/core';\r\nimport { BsModalRef } from '@farris/ui-modal';\r\nimport { DataColumn, DatagridComponent } from '@farris/ui-datagrid';\r\nimport { LocaleService } from '@farris/ui-locale';\r\nimport { MessagerService } from '@farris/ui-messager';\r\nimport { DatagridSchemeModel, SettingModel } from './setting.model';\r\n\r\n@Component({\r\n    selector: 'datagrid-settings',\r\n    templateUrl: './datagrid-settings.component.html',\r\n    styles: [\r\n        `\r\n\r\n        .f-datagrid-settings .header {\r\n            position:relative;width:100%; height: 56px;padding: 0 24px;border:0px\r\n        }\r\n\r\n        .f-datagrid-settings .header .title {\r\n            display: block; white-space: nowrap; font-size: 17px; line-height: 56px;\r\n        }\r\n        .f-datagrid-settings .header .tabs {\r\n            height: 32px;\r\n            top: 12px; font-size: 14px;\r\n            position: relative;\r\n            line-height: 32px;\r\n        }\r\n        .f-datagrid-settings .header .tabs .tabs-labels {\r\n            background: #EFF5FF;border-radius: 17px;color:#6080AD\r\n        }\r\n\r\n        .f-datagrid-settings .header .tabs .tabs-labels .navitem.active {\r\n            line-height: 28px;\r\n            margin: 2px;\r\n            height: 28px;\r\n            background: rgb(246 250 255);\r\n            border-radius: 15px;\r\n            box-shadow: 0 4px 18px 0 rgb(2 75 193 / 20%)\r\n        }\r\n        .f-datagrid-settings .header .close {\r\n            line-height: 56px;padding: 0;width: 20px\r\n        }\r\n        .f-datagrid-settings .tabs-container {\r\n            height: 100%;overflow: hidden; position: relative; margin: 0 24px; border: 1px solid #DEE1EA; border-radius: 8px;\r\n        }\r\n        .f-datagrid-settings .buttons\r\n        {\r\n            height: 66px;text-align: right;padding: 14px 24px 20px 24px;\r\n        }\r\n\r\n        .f-datagrid-settings .buttons button {\r\n            width: 66px;height: 32px;\r\n        }\r\n        .f-datagrid-settings .buttons .cancel {\r\n            margin-left: 12px;margin-right: 8px;\r\n        }\r\n        .f-datagrid-settings .buttons .ok {\r\n            width: 100px;\r\n        }\r\n\r\n        .f-datagrid-settings .dg-column-format-setting>div{\r\n            width: 360px; min-width:260px;overflow: hidden;background:#ffffff;padding: 10px 5px 10px 8px;border-right: 1px solid #DEE1EA\r\n        }\r\n\r\n        .f-datagrid-settings .dg-column-format-setting .checkbox, .format-setting-column .checkbox{\r\n            margin-right: 5px; font-size: 14px;color: #0089FF;\r\n        }\r\n\r\n        .f-datagrid-settings  .column-group-setting .title{\r\n            height: 36px; line-height: 36px; color: #59a1ff\r\n        }\r\n\r\n        .f-datagrid-settings  .column-group-setting .all-fields {\r\n            background-color:#fff;padding-top: 0px!important;\r\n        }\r\n\r\n        .f-datagrid-settings  .column-group-setting .group-sum-fields {\r\n            height: 36px; line-height: 36px; border-top: 1px solid #e4e7ef; color: #59a1ff\r\n        }\r\n\r\n\r\n        .smooth-dnd-ghost.format-setting-column {\r\n            border: 1px solid #2a87ff;\r\n            z-index: 999999999 !important;\r\n            background-color: #e7f1ff;;\r\n            padding: 4px 8px;\r\n            color: rgb(0 0 0);\r\n        }\r\n\r\n        .smooth-dnd-ghost.format-setting-column .field-drag-handle {\r\n            float: right;\r\n        }\r\n\r\n        .dg-column-format-setting  .smooth-dnd-drop-preview-constant-class {\r\n            background-color: #dee1ea;\r\n        }\r\n        .dg-column-format-setting .format-setting-column {\r\n            background: #fafbfd;\r\n            padding: 4px 8px;\r\n            margin-bottom: 5px;\r\n            border: 1px solid #f2f4f8;\r\n            border-radius: 5px;\r\n        }\r\n        .dg-column-format-setting .format-setting-column.active {\r\n            color: rgb(0 0 0);\r\n            border: 1px solid #2a87ff;\r\n            background: #e7f1ff;\r\n            border-top: 1px solid #2a87ff!important;\r\n            border-bottom: 1px solid #2a87ff!important;\r\n        }\r\n\r\n        .dg-column-format-setting .format-setting-column .field-drag-handle{\r\n            float: right;\r\n            cursor: grab;\r\n        }\r\n\r\n        .dg-column-format-setting .format-setting-column .field-drag-handle:active{\r\n            cursor: grabbing;\r\n        }\r\n\r\n        `\r\n    ],\r\n    encapsulation: ViewEncapsulation.None\r\n})\r\nexport class DatagridSettingsComponent implements OnInit, OnChanges {\r\n    modalRef: BsModalRef;\r\n    gridInstance: DatagridComponent;\r\n    activeTabIndex = 1;\r\n\r\n    /** æåºåæ°æ® */\r\n    sortTreeData = [];\r\n    sortNames = [];\r\n    sortInfo: any = {};\r\n\r\n    /** æ¾ç¤ºåæ°æ® */\r\n    viewTreeData = [];\r\n    viewColumns = [];\r\n\r\n    columnFormat = [];\r\n\r\n    groupField = [];\r\n\r\n    canSetColumnSort = true;\r\n    canSetColumnVisible = true;\r\n    @Input() enableReset = false;\r\n    @Input() columns: DataColumn[][];\r\n\r\n    @Output() cancelHandle = new EventEmitter();\r\n    @Output() submitHandle = new EventEmitter();\r\n    @Output() reset = new EventEmitter();\r\n    @Output() concise = new EventEmitter();\r\n    @Input() schemeInfo: SettingModel = null;\r\n\r\n    @ViewChild('header') header: ElementRef;\r\n    searchItems = [];\r\n    alignItems = [];\r\n    summaryItems = [];\r\n    summaryItems2 = [];\r\n\r\n    private localeSer: LocaleService;\r\n    private messager: MessagerService;\r\n    constructor(private cd: ChangeDetectorRef, private inject: Injector) {\r\n        this.messager = this.inject.get(MessagerService, null);\r\n        this.localeSer = this.inject.get(LocaleService);\r\n        this.searchItems = [\r\n            { value: 'all', title: this.localeSer.getValue('datagrid.settings.allColumns') },\r\n            { value: 'visible', title: this.localeSer.getValue('datagrid.settings.visibleColumns') },\r\n            { value: 'hidden', title: this.localeSer.getValue('datagrid.settings.hiddenColumns') }\r\n        ];\r\n\r\n        this.alignItems = [\r\n            { value: 'left', title: this.localeSer.getValue('datagrid.settings.alignLeft')},\r\n            { value: 'center', title: this.localeSer.getValue('datagrid.settings.alignCenter')},\r\n            { value: 'right', title: this.localeSer.getValue('datagrid.settings.alignRight')},\r\n        ];\r\n\r\n        this.summaryItems = [\r\n            { value: -1, title: this.localeSer.getValue('datagrid.settings.summaryNone') },\r\n            { value: 2, title: this.localeSer.getValue('datagrid.settings.summarySum') },\r\n            { value: 0, title: this.localeSer.getValue('datagrid.settings.summaryMax') },\r\n            { value: 1, title: this.localeSer.getValue('datagrid.settings.summaryMin') },\r\n            { value: 3, title: this.localeSer.getValue('datagrid.settings.summaryAverage') },\r\n            { value: 4, title: this.localeSer.getValue('datagrid.settings.summarCount') },\r\n        ];\r\n\r\n        this.summaryItems2 = [\r\n            { value: -1, title: this.localeSer.getValue('datagrid.settings.summaryNone') },\r\n            { value: 4, title: this.localeSer.getValue('datagrid.settings.summarCount') },\r\n        ];\r\n\r\n    }\r\n\r\n    private initData() {\r\n        this.sortNames = this.gridInstance.sortName ? this.gridInstance.sortName.split(',') : [];\r\n        this.viewColumns = this.getViewColumns();\r\n        this.sortInfo = this.gridInstance['__sortInfo'] || {};\r\n        this.columnFormat = [...this.columns[0]];\r\n        this.groupField = this.gridInstance.groupField ? this.gridInstance.groupField.split(',') : [];\r\n    }\r\n\r\n    ngOnInit() {\r\n        if (!this.gridInstance.enableScheme) {\r\n            this.initData();\r\n        } else {\r\n            if (this.schemeInfo) {\r\n                this.sortInfo = this.schemeInfo.sortInfo || {};\r\n                if (this.sortInfo) {\r\n                    this.sortNames = this.sortInfo.sortName || '';\r\n                }\r\n                this.viewColumns = this.schemeInfo.viewColumns;\r\n                this.columnFormat = this.schemeInfo.columnFormat;\r\n                if (!this.columnFormat) {\r\n                    this.columnFormat = [...this.columns[0]];\r\n                }\r\n\r\n                if (this.schemeInfo.groupField) {\r\n                    if (typeof this.schemeInfo.groupField === 'string') {\r\n                        this.groupField = (this.schemeInfo.groupField as any).split(',');\r\n                    } else {\r\n                        this.groupField = this.schemeInfo.groupField || [];\r\n                    }\r\n                } else {\r\n                    this.groupField = [];\r\n                }\r\n                \r\n                return;\r\n            }\r\n            this.initData();\r\n        }\r\n    }\r\n\r\n    ngOnChanges(changes: SimpleChanges) {\r\n        if (changes.columns && !changes.columns.isFirstChange()) {\r\n            // console.log(this.columns);\r\n        }\r\n    }\r\n\r\n    close($event: MouseEvent) {\r\n        $event.stopPropagation();\r\n        if (this.modalRef) {\r\n            this.modalRef.close();\r\n        }\r\n    }\r\n\r\n    changeTabs($event: MouseEvent, idx) {\r\n        $event.stopPropagation();\r\n        this.activeTabIndex = idx;\r\n    }\r\n\r\n    onSortInfoChange(sortInfo: any) {\r\n        this.sortInfo = sortInfo;\r\n    }\r\n\r\n    private getViewColumns() {\r\n        // å¤è¡¨å¤´\r\n        let visibleCls = [];\r\n        if (this.columns.length > 1 ) {\r\n            this.columns.forEach(cols => {\r\n                visibleCls = visibleCls.concat(this._getViewColumns(cols));\r\n            });\r\n        } else {\r\n            visibleCls = this.columns[0].filter(n => (n.visible || n.visible === undefined));\r\n        }\r\n\r\n        return visibleCls.map(n => n.field);\r\n    }\r\n\r\n    private _getViewColumns(cols: any[]) {\r\n        return cols.filter(c => !c.colspan && (c.visible || c.visible === undefined));\r\n    }\r\n\r\n\r\n    private mergeColumnFormats() {\r\n        if (this.sortInfo && Object.keys(this.sortInfo).length && this.columnFormat && this.columnFormat.length) {\r\n            const { sortName, sortOrder } = this.sortInfo;\r\n            if (sortName && sortName.length) {\r\n                sortName.forEach((n, i) => {\r\n                    const col = this.columnFormat.find((col: any) => {\r\n                        return col.field === n;\r\n                    });\r\n                    if (col) {\r\n                        col.sortable = true;\r\n                        col.order = sortOrder[i] || 'asc';\r\n                    }\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    onColumnFormatChange(colFormatData) {\r\n        this.columnFormat = colFormatData;\r\n    }\r\n\r\n    onSubmitClick($event) {\r\n        this.mergeColumnFormats();\r\n        this.submitHandle.emit($event);\r\n    }\r\n\r\n    onCancelClick($event) {\r\n        this.cancelHandle.emit($event);\r\n    }\r\n\r\n    onSettingReset($event) {\r\n        // this.reset.emit($event);\r\n        const restorDefaultText = this.localeSer.getValue('datagrid.settings.restoreDefaultSettingsText') || 'ç¡®è®¤è¦æ¢å¤é»è®¤è®¾ç½®åï¼';\r\n        this.messager.confirm(restorDefaultText).subscribe((t: boolean) => {\r\n            if (t) {\r\n                this.reset2Default();\r\n            }\r\n        });\r\n    }\r\n\r\n    private reset2Default() {\r\n        const options = this.gridInstance.dfs['_state'].initialOptions;\r\n        if (options.columnFields && options.columnFields.length) {\r\n\r\n            const newColumns = [];\r\n            options.columnFields.forEach(c => {\r\n                if (c.field !== '_datagrid-setting-control_') {\r\n                    const col = this.gridInstance.columns[0].find((n: any) => n.field === c.field);\r\n                    if (col) {\r\n                        col.visible = c.visible;\r\n                        col.halign = c.halign;\r\n                        col.align = c.align;\r\n                        col.width = c.width;\r\n                        col.footer = {...c.footer || {}};\r\n                        col.groupFooter = {...c.groupFooter || {}};\r\n                        newColumns.push(col);\r\n                    }\r\n                }\r\n            });\r\n\r\n            this.columns = [newColumns];\r\n        }\r\n\r\n        this.viewColumns = this.getViewColumns();\r\n\r\n        if (options.sort) {\r\n            const sortOrders = options.sort.sortOrder? options.sort.sortOrder.split(',') : [];\r\n            this.sortNames = options.sort.sortName ? options.sort.sortName.split(',') : [];\r\n            this.sortInfo = { sortName: this.sortNames, sortOrder:  sortOrders };\r\n        } else {\r\n            this.sortNames = [];\r\n            this.sortInfo = {};\r\n        }\r\n        this.columnFormat = [...this.columns[0]];\r\n        this.groupField =  options.groupField ? options.groupField.split(',') : [];\r\n    }\r\n    /** æ¾ç¤ºç®æ´æ¨¡å¼çªå£ */\r\n    showConcise($event) {\r\n\r\n        if ($event) {\r\n            $event.stopPropagation();\r\n        }\r\n        this.mergeColumnFormats();\r\n        this.concise.emit();\r\n    }\r\n}\r\n","export function getMultilingualValue(valObj, localeId) {\r\n    if (valObj && typeof valObj === 'object' && Object.keys(valObj).length > 0) {\r\n        localeId = localeId || 'zh-CHS';\r\n        const val = valObj[localeId];\r\n        if (val !== undefined) {\r\n            return val;\r\n        } else {\r\n            console.log(`can not find '${localeId}' in `, valObj);\r\n            return '';\r\n        }\r\n    } else {\r\n        return '';\r\n    }\r\n}","\r\nimport { ChangeDetectorRef, Component, EventEmitter, HostBinding, Injector, Input, OnInit,\r\n        Output, ViewEncapsulation, HostListener, ViewChild, ElementRef } from '@angular/core';\r\nimport { LocaleService } from '@farris/ui-locale';\r\nimport { MessagerService } from '@farris/ui-messager';\r\nimport { DatagridComponent } from '@farris/ui-datagrid';\r\nimport { SettingModel } from '../setting.model';\r\nimport { getMultilingualValue } from '../getValueWithLocaleId';\r\n\r\n@Component({\r\n    selector: 'datagrid-settings-simple',\r\n    templateUrl: './simple-columns.component.html',\r\n    styleUrls: [\r\n        `./settings-simple.scss`\r\n    ],\r\n    encapsulation: ViewEncapsulation.None\r\n})\r\nexport class SimpleColumnsComponent implements OnInit {\r\n    @Input() enableScheme = false;\r\n    @Input() seartTypes: any = [];\r\n    /** ææå */\r\n    @Input() columns = [];\r\n    /** æ¾ç¤ºçå */\r\n    @Input() fields = [];\r\n    /** ç¹å»ä¾§è¾¹æ ·å¼ä»¥å¤çåºåéèé¢æ¿ãé»è®¤ä¸º true */\r\n    @Input() clickToHidden = true;\r\n\r\n    @Input() top = 0;\r\n    private _schemeList = [];\r\n    @Input()\r\n    get schemeList() {\r\n        return this._schemeList;\r\n    }\r\n    set schemeList(val) {\r\n        if (val && val.length) {\r\n            val.forEach(n => {\r\n                n['_title_'] = getMultilingualValue(JSON.parse(n.name), this.localeSer.localeId);\r\n            });\r\n        }\r\n        this._schemeList = val || [];\r\n    }\r\n\r\n    @HostBinding('class') cls = 'f-datagrid-settings-simple-host';\r\n\r\n    @ViewChild('colcontainer') container: ElementRef;\r\n    @ViewChild('okbtn') btnOk: ElementRef;\r\n    @ViewChild('inputWord') searchInput: ElementRef;\r\n\r\n    @ViewChild('schemeitems') schemeitemsEleRef: ElementRef;\r\n    @ViewChild('btnSchemeName') btnRef: ElementRef;\r\n\r\n    @Output() formatChange = new EventEmitter();\r\n    @Output() fieldsChange = new EventEmitter();\r\n    @Output() submit = new EventEmitter();\r\n    @Output() closed = new EventEmitter();\r\n    @Output() advanced = new EventEmitter();\r\n\r\n    @Output() addNewScheme = new EventEmitter();\r\n    @Output() showSchemeList = new EventEmitter();\r\n    @Output() activeItemChange = new EventEmitter();\r\n    allCols = [];\r\n    columnType = 'all';\r\n\r\n    gridInstance: DatagridComponent;\r\n    localeSer: LocaleService;\r\n    isEn = false;\r\n\r\n    showSchemePanel = false;\r\n\r\n    switchValue = false;\r\n    // å½åæ¹æ¡\r\n    currentSchemeItem = null;\r\n\r\n    searchResultIsVisibleAll = false;\r\n    defaultSchemeName = 'ç³»ç»é¢å¶';\r\n\r\n    private messager: MessagerService;\r\n\r\n    settings: SettingModel = {};\r\n\r\n    constructor(private injector: Injector, public cd: ChangeDetectorRef) {\r\n        this.localeSer = this.injector.get(LocaleService, null);\r\n        this.messager = this.injector.get(MessagerService, null);\r\n    }\r\n\r\n    @HostListener('click', ['$event'])\r\n    onClick($event: MouseEvent) {\r\n        // console.log($event);\r\n        $event.stopPropagation();\r\n        const clsname = $event.target['className'] || '';\r\n        if (clsname.indexOf('f-datagrid-settings-simple-host') > -1) {\r\n            // éèä¾§è¾¹æ ï¼\r\n            if (this.clickToHidden) {\r\n                this.close();\r\n            }\r\n        }\r\n\r\n        this.showSchemePanel = false;\r\n    }\r\n\r\n    @HostListener('window:keydown.esc', ['$event'])\r\n    onEscKeydown($event) {\r\n        $event.stopPropagation();\r\n        if (!document.querySelector('modal-container')) {\r\n            this.close();\r\n        }\r\n    }\r\n\r\n    @HostListener('window:keydown.enter', ['$event'])\r\n    onEnterKeydown($event) {\r\n        $event.stopPropagation();\r\n        if (!document.querySelector('modal-container')) {\r\n            this.onSubmitClick();\r\n        }\r\n    }\r\n\r\n    @HostListener('keydown', ['$event'])\r\n    onControlGKeydown($event: KeyboardEvent) {\r\n        if ($event.ctrlKey && !document.querySelector('modal-container')) {\r\n            $event.preventDefault();\r\n            $event.stopPropagation();\r\n            if ($event.key.toLowerCase() === 'g') {\r\n                this.showAdvanced($event);\r\n            } else if ($event.key.toLowerCase() === 'r') {\r\n                this.onSettingReset();\r\n            } else if ($event.key.toLowerCase() === 's') {\r\n                this.searchInput.nativeElement.focus();\r\n            }\r\n        }\r\n    }\r\n\r\n    private getCurrentSchemeSettings() {\r\n        if (this.currentSchemeItem) {\r\n            const schemeSettings = JSON.parse(this.currentSchemeItem.queryConditionString);\r\n            return schemeSettings[this.localeSer.localeId] as SettingModel;\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        this.allCols = this.columns[0];\r\n        if (this.gridInstance.enableScheme && this.currentSchemeItem) {\r\n            this.settings = this.getCurrentSchemeSettings() || {};\r\n        }\r\n\r\n        if (this.settings && this.settings.viewColumns && this.settings.viewColumns.length) {\r\n            this.fields = this.settings.viewColumns;\r\n            this.dirtySettings(true);\r\n        } else {\r\n            this.fields = this.getViewColumns();\r\n        }\r\n\r\n        this.container.nativeElement.focus();\r\n\r\n        this.defaultSchemeName = this.localeSer.getValue('datagrid.scheme.syspreset') || this.gridInstance.defaultSchemeName;\r\n    }\r\n\r\n    private getViewColumns() {\r\n        // å¤è¡¨å¤´\r\n        let visibleCls = [];\r\n        if (this.columns.length > 1 ) {\r\n            this.columns.forEach(cols => {\r\n                visibleCls = visibleCls.concat(this._getViewColumns(cols));\r\n            });\r\n        } else {\r\n            visibleCls = this.columns[0].filter(n => (n.visible || n.visible === undefined));\r\n        }\r\n\r\n        return visibleCls.map(n => n.field);\r\n    }\r\n\r\n    private _getViewColumns(cols: any[]) {\r\n        return cols.filter(c => !c.colspan && (c.visible || c.visible === undefined));\r\n    }\r\n    \r\n    // æ ¹æ®åçç±»åè¿è¡ç­éè¿æ»¤ï¼\r\n    // all ææå\r\n    // visible å¯è§å\r\n    // hidden éèå\r\n    // group åç»å\r\n    filterColumns(searchWords = '') {\r\n        let cols = [];\r\n\r\n        if (this.switchValue) {\r\n            cols = this.columns[0].filter(n => this.fields.indexOf(n.field) > -1);\r\n        } else {\r\n            cols = this.columns[0];\r\n        }\r\n\r\n        if (searchWords) {\r\n            cols = cols.filter(c => c.title.toLowerCase().indexOf(searchWords.toLowerCase()) > -1);\r\n        }\r\n\r\n        this.allCols = cols;\r\n    }\r\n\r\n\r\n\r\n    private onFieldsChanged() {\r\n        if (!this.gridInstance.enableScheme) {\r\n            this.fieldsChange.emit(this.fields);\r\n        }\r\n    }\r\n    onDblClick($event, col) {\r\n        // console.log('æ¾ç¤ºä¸éèåæ¢äºä»¶', col);\r\n        this.onCheckboxClick($event, col);\r\n    }\r\n\r\n    onCheckboxClick($event, col) {\r\n        // console.log('æ¾ç¤ºä¸éèåæ¢äºä»¶', col);\r\n        $event.stopPropagation();\r\n        this.showSchemePanel = false;\r\n        let checked = false;\r\n        const index = this.fields.indexOf(col.field);\r\n        if (index === -1) {\r\n            this.fields.push(col.field);\r\n            checked = true;\r\n        } else {\r\n            this.fields.splice(index, 1);\r\n            checked = false;\r\n        }\r\n\r\n        const item = this.columns[0].find(n => n.field === col.field);\r\n        if (item) {\r\n            item.visible = checked;\r\n        }\r\n        // this.columns[0].forEach(f => {\r\n        //     f.visible = this.fields.indexOf(f.field) > -1;\r\n        // });\r\n\r\n        this.fields = this.columns[0].filter(n => n.visible).map(n => n.field);\r\n\r\n        this.searchResultIsVisibleAll = this.allCols.filter(n => n.visible).length === this.allCols.length;\r\n\r\n        this.dirtySettings(true);\r\n        this.onFieldsChanged();\r\n    }\r\n\r\n    searchColumn($event) {\r\n        const txt = $event.target.value;\r\n        this.filterColumns(txt);\r\n    }\r\n\r\n    onFieldDrop(fieldInfo, txt, ulElRef: any) {\r\n        this.showSchemePanel = false;\r\n       // console.log('drop', fieldInfo);\r\n        const { removedIndex, addedIndex } = fieldInfo;\r\n\r\n        const moveItem = this.allCols[removedIndex];\r\n        const targetItem = this.allCols[addedIndex];\r\n\r\n        const moveItemIndex = this.columns[0].findIndex(n => n.field === moveItem.field);\r\n        const targetItemIndex = this.columns[0].findIndex(n => n.field === targetItem.field);\r\n\r\n        const removedItem = this.columns[0].splice(moveItemIndex, 1);\r\n        this.columns[0].splice(targetItemIndex, 0, ...removedItem);\r\n\r\n        this.fields = this.columns[0].filter(n => n.visible).map(n => n.field);\r\n        this.onFieldsChanged();\r\n\r\n        this.filterColumns(txt);\r\n    }\r\n\r\n    /**\r\n     * 0: 1ä¸ªä¹æ²¡æéä¸­ï¼ 1: å¨é¨éä¸­ï¼ 2: æéä¸­çä¹ææ²¡éä¸­ç\r\n     */\r\n    private getCheckAllState() {\r\n        if (!this.searchInput.nativeElement.value) {\r\n            if (this.fields.length === 0) {\r\n                return 0;\r\n            } else {\r\n                if (this.fields.length === this.columns[0].length) {\r\n                    return 1;\r\n                }\r\n                return 2;\r\n            }\r\n        } else {\r\n            const visibleLen = this.allCols.filter(n => n.visible).length;\r\n            if (visibleLen === this.allCols.length) {\r\n                return 1;\r\n            } else {\r\n                if (visibleLen < this.allCols.length) {\r\n                    if (visibleLen === 0) {\r\n                        return 0\r\n                    }\r\n                    return 1;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    // å¨é\r\n    onCheckAllClick($event: MouseEvent, txt) {\r\n        $event.stopPropagation();\r\n        this.showSchemePanel = false;\r\n        const state = this.getCheckAllState();\r\n\r\n        const isCheckAll = state === 0 || state === 2;\r\n\r\n        if (!txt) {\r\n            this.columns[0].forEach(n => n.visible = isCheckAll);\r\n            \r\n        } else {\r\n            this.columns[0].forEach(n => {\r\n                const item = this.allCols.find(a => n.field == a.field);\r\n                if (item) {\r\n                    n.visible = isCheckAll;\r\n                    item.visible = isCheckAll;\r\n                }\r\n            });\r\n\r\n        }\r\n        this.fields = this.columns[0].filter(n => n.visible).map(n => n.field);\r\n\r\n        this.searchResultIsVisibleAll = this.allCols.filter(n => n.visible).length === this.allCols.length;\r\n\r\n        this.dirtySettings(true);\r\n\r\n        this.onFieldsChanged();\r\n        this.filterColumns(txt);\r\n    }\r\n\r\n    close($event?: MouseEvent) {\r\n        if ($event) {\r\n            $event.stopPropagation();\r\n        }\r\n        this.closed.emit();\r\n    }\r\n\r\n    // æå¼é«çº§è®¾ç½®çªå£\r\n    showAdvanced($event) {\r\n        this.close($event);\r\n        this.advanced.emit({ viewFields: this.fields });\r\n    }\r\n\r\n    // æ¢å¤é»è®¤\r\n    onSettingReset($event?: any) {\r\n        if ($event) {\r\n            $event.stopPropagation();\r\n        }\r\n\r\n        this.showSchemePanel = false;\r\n        const restorDefaultText = this.localeSer.getValue('datagrid.settings.restoreDefaultSettingsText') || 'ç¡®è®¤è¦æ¢å¤é»è®¤è®¾ç½®åï¼';\r\n        this.messager.confirm(restorDefaultText).subscribe((t: boolean) => {\r\n            if (t) {\r\n                this.reset2Default();\r\n                this.dirtySettings(true);\r\n            }\r\n        });\r\n    }\r\n\r\n    private reset2Default() {\r\n        const options = this.gridInstance.dfs['_state'].initialOptions;\r\n        if (options.columnFields && options.columnFields.length) {\r\n\r\n            const newColumns = [];\r\n            options.columnFields.forEach(c => {\r\n                if (c.field !== '_datagrid-setting-control_') {\r\n                    const col = this.gridInstance.columns[0].find((n: any) => n.field === c.field);\r\n                    if (col) {\r\n                        col.visible = c.visible;\r\n                        col.halign = c.halign;\r\n                        col.align = c.align;\r\n                        col.width = c.width;\r\n                        col.footer = {...c.footer || {}};\r\n                        col.groupFooter = {...c.groupFooter || {}};\r\n                        newColumns.push(col);\r\n                    }\r\n                }\r\n            });\r\n\r\n            this.columns = [newColumns];\r\n        }\r\n\r\n        this.allCols = this.columns[0];\r\n        this.settings = {};\r\n        this.fields = this.getViewColumns();\r\n        this.settings.viewColumns = this.fields;\r\n        this.settings.columnFormat = [...this.columns[0]];\r\n        if (options.sort) {\r\n            const sortOrders = options.sort.sortOrder? options.sort.sortOrder.split(',') : [];\r\n            const sortNames = options.sort.sortName ? options.sort.sortName.split(',') : [];\r\n            this.settings.sortInfo = { sortName: sortNames, sortOrder:  sortOrders };\r\n        } else {\r\n            this.settings.sortInfo = {};\r\n        }\r\n        this.settings.groupField =  options.groupField ? options.groupField.split(',') : [];\r\n    }\r\n\r\n    // ç¡®å®æé®ç¹å»äºä»¶\r\n    onSubmitClick($event?: any) {\r\n        if ($event) {\r\n            $event.stopPropagation();\r\n        }\r\n        this.showSchemePanel = false;\r\n        this.settings.viewColumns = this.fields;\r\n\r\n        if (!this.enableScheme || !this.currentSchemeItem) {\r\n            if (!this.settings.columnFormat) {\r\n                this.settings.columnFormat = [...this.columns[0]];\r\n            }\r\n\r\n            if (!this.settings.sortInfo) {\r\n                this.settings.sortInfo = {\r\n                    sortName: this.gridInstance.sortName ? this.gridInstance.sortName.split(',') : [],\r\n                    sortOrder:  this.gridInstance.sortOrder ? this.gridInstance.sortOrder.split(',') : []\r\n                };\r\n            }\r\n\r\n            if (this.settings.groupField === undefined) {\r\n                this.settings.groupField = this.gridInstance.groupField ? this.gridInstance.groupField.split(',') : [];\r\n            }\r\n        } else {\r\n            const _settings = this.getCurrentSchemeSettings();\r\n            if (_settings) {\r\n                this.settings = Object.assign(_settings || {}, this.settings);\r\n            }\r\n        }\r\n        // this.activeItemChange.emit(this.activeSchemeItem);\r\n        this.submit.emit({content: this.settings, close: this.close.bind(this), target: this.btnOk.nativeElement, currentScheme: this.currentSchemeItem});\r\n    }\r\n\r\n    // æ¾ç¤ºä¸ææ¹æ¡åè¡¨\r\n    onChooseScheme($event) {\r\n        if ($event) {\r\n            $event.stopPropagation();\r\n        }\r\n\r\n        this.showSchemePanel = !this.showSchemePanel;\r\n\r\n        setTimeout(() => {\r\n            if (this.schemeitemsEleRef && this.currentSchemeItem) {\r\n                const itemEl = this.schemeitemsEleRef.nativeElement.querySelector(`#schemeitem_${this.currentSchemeItem.id}`);\r\n                if (itemEl) {\r\n                    if (itemEl.scrollIntoViewIfNeeded) {\r\n                        itemEl.scrollIntoViewIfNeeded();\r\n                    } else {\r\n                        itemEl.scrollIntoView();\r\n                    }\r\n                }\r\n            }\r\n        })\r\n    }\r\n\r\n    // ä»æ¾ç¤ºå¯è§å\r\n    onlySeeVisibleColumns($event) {\r\n        this.switchValue = $event;\r\n        this.filterColumns();\r\n    }\r\n\r\n    // æ°å¢æ¹æ¡\r\n    onNewSchemeClick($event) {\r\n        if ($event) {\r\n            $event.stopPropagation();\r\n        }\r\n        this.showSchemePanel = false;\r\n        this.addNewScheme.emit();\r\n    }\r\n\r\n    // æ¾ç¤ºæ¹æ¡åè¡¨ç®¡ççªå£\r\n    onShowSchemeList($event) {\r\n        if ($event) {\r\n            $event.stopPropagation();\r\n        }\r\n        this.showSchemePanel = false;\r\n        this.showSchemeList.emit();\r\n    }\r\n\r\n    // æ¹æ¡ç¹å»\r\n    onSchemeItemClick($event, item) {\r\n        setTimeout(() => {\r\n            this.currentSchemeItem = item;\r\n            this.showSchemePanel = false;\r\n\r\n            let schemeSettings = null;\r\n            if (item) {\r\n                schemeSettings = JSON.parse(item.queryConditionString);\r\n                schemeSettings = schemeSettings[this.localeSer.localeId];\r\n\r\n                if (!schemeSettings) {\r\n                    this.reset2Default();\r\n                } else {\r\n                    this.settings = schemeSettings;\r\n                    this.fields = schemeSettings.viewColumns;   \r\n                }\r\n\r\n            } else {\r\n                this.reset2Default();\r\n            }\r\n            this.cd.detectChanges();\r\n        });\r\n    }\r\n\r\n\r\n    dirtySettings(flag) {\r\n        // this.isChanged = flag;\r\n    }\r\n}\r\n","import { Observable, of, Subject } from \"rxjs\";\r\nimport { map } from \"rxjs/operators\";\r\nimport { BatchScheme, DatagridSchemeModel, DgSchemeState, SchemeAuthModel, SchemeState } from \"./setting.model\";\r\n\r\n/** ä¿å­æ¹æ¡API */\r\nconst SCHEME_WEBAPI = '/api/runtime/sys/v1.0/querysolution';\r\n/** è·åæ¹æ¡åè¡¨API */\r\nconst SCHEME_WEBAPI_QUERY = `${SCHEME_WEBAPI}/belongId/`;\r\n/** æ¹æ¡åè¡¨ç®¡ç- è®¾é»è®¤ãå é¤ API */\r\nconst SCHEME_WEBAPI_UPDATE = `${SCHEME_WEBAPI}/batch`;\r\n/** æééªè¯ */\r\nconst SCHEME_WEBAPI_Auth = '/api/runtime/sys/v1.0/querysolution/componentType/Datagrid';\r\n\r\nconst LANGUAGE_WEBAPI = '/api/runtime/sys/v1.0/loginInfo?infoType=supportedLanguage';\r\n\r\n\r\nexport class DatagridSchemeService {\r\n    private restService = null;\r\n    private state: DgSchemeState = {};\r\n\r\n    schemeList$ = new Subject();\r\n\r\n    constructor() {\r\n    }\r\n\r\n    update(d: SchemeState, gridId: string) {\r\n        if (!this.state[gridId]) {\r\n            this.state[gridId] = {};\r\n        }\r\n        this.state[gridId] = Object.assign(this.state[gridId], d);\r\n    }\r\n\r\n    setRestService(httpSer: any) {\r\n        if (httpSer && httpSer['befRepository']) {\r\n            this.restService = httpSer['befRepository']['restService'];\r\n        }\r\n    }\r\n\r\n    private getWebFormKey() {\r\n        const webformHash = window.location.hash.split('?')[0];\r\n        return webformHash.substring(webformHash.lastIndexOf('/') + 1);\r\n    }\r\n\r\n    getSchemeKey(gridId: string) {\r\n        const formKey = this.getWebFormKey();\r\n        return `${formKey}_DatagridScheme_${gridId}`;\r\n    }\r\n\r\n    getSchemeList(gridID: string): Observable<DatagridSchemeModel[]> {\r\n        const uri = SCHEME_WEBAPI_QUERY + this.getSchemeKey(gridID);\r\n        if (this.restService) {\r\n            return this.restService.invoke(uri, 'GET', null, null, false);\r\n        }\r\n    }\r\n\r\n    saveScheme(scheme: DatagridSchemeModel, gridID: string, isUpdate = false) {\r\n        if (this.restService) {\r\n            const httpMethod = isUpdate ? 'PUT': 'POST';\r\n            scheme.belongId = this.getSchemeKey(gridID);\r\n            return this.restService.invoke(SCHEME_WEBAPI, httpMethod, null, { body: scheme}, false);\r\n        }\r\n    }\r\n\r\n    updateScheme(param: BatchScheme, gridID: string): Observable<any> {\r\n        if (!param) {\r\n            return of(false);\r\n        }\r\n        const belongId = this.getSchemeKey(gridID);\r\n        param.belongId = belongId\r\n\r\n        if (param.belongId) {\r\n            return this.restService.invoke(SCHEME_WEBAPI_UPDATE, 'PUT', null, {body: param}, false);\r\n        }\r\n    }\r\n\r\n    getStateValue(gridId, ...statePro) {\r\n        const dgState = this.state[gridId];\r\n        if (dgState) {\r\n            if (statePro && statePro.length) {\r\n                return statePro.reduce((r, c) => {\r\n                    return r[c];\r\n                }, dgState)\r\n            }\r\n\r\n            return dgState;\r\n        }\r\n        return null;\r\n    }\r\n\r\n    private updateStateValue(gridId, propertyName, value) {\r\n        this.update({[propertyName]: value}, gridId);\r\n    }\r\n\r\n    setSchemeList(gridId, newSchemeList) {\r\n        this.updateStateValue(gridId, 'list', newSchemeList);\r\n        this.schemeList$.next(newSchemeList);\r\n    }\r\n\r\n    hasSchemeName(gridId, schemeName: any) {\r\n        const schemeList = this.getStateValue(gridId, 'list');\r\n        if (!schemeList || !schemeList.length) {\r\n            return false;\r\n        }\r\n\r\n        if (typeof schemeName === 'string') {\r\n            return !!schemeList.find(n => n.name === schemeName.trim());\r\n        } else {\r\n            if (typeof schemeName === 'object') {\r\n                const replayNames = [];\r\n                schemeList.forEach(n => {\r\n                    const currentNames = Object.values(n.name);\r\n                    for(let k in schemeName) {\r\n                        if (currentNames.includes(schemeName[k])) {\r\n                            replayNames.push(k);\r\n                        }\r\n                    }\r\n                });\r\n\r\n                return replayNames;\r\n            }\r\n        }\r\n    }\r\n\r\n    checkAuthority(): Observable<SchemeAuthModel> {\r\n        return this.restService.invoke(SCHEME_WEBAPI_Auth, 'GET', null, null, false);\r\n    }\r\n\r\n    getLanguages() {\r\n        return this.restService.invoke(LANGUAGE_WEBAPI, 'GET', null, null, false);\r\n    }\r\n}\r\n","import { ChangeDetectorRef, Component, ElementRef, EventEmitter, Input, OnInit, Output, ViewChild } from '@angular/core';\r\n\r\n@Component({\r\n    selector: 'new-scheme',\r\n    templateUrl: './newscheme.component.html',\r\n    styles: [\r\n        `\r\n        .icon-question {\r\n            width: 16px;\r\n            border-radius: 20px;\r\n            height: 16px;\r\n            text-align: center;\r\n            vertical-align: middle;\r\n            line-height: 15px;\r\n            font-size: 10px;\r\n            margin-left: 10px;\r\n            background: #EAF4FF;\r\n            color: #2A87FF;\r\n            cursor: pointer\r\n        }\r\n\r\n        .icon-question:hover {\r\n            background: #2A87FF;\r\n            color: #fff;\r\n        }\r\n        `\r\n    ]\r\n})\r\nexport class NewSchemeComponent implements OnInit {\r\n\r\n    @ViewChild('header') header: ElementRef<any>;\r\n\r\n    @Input() dataPermissionIds = [];\r\n\r\n    @Output() closeModal = new EventEmitter();\r\n    @Output() submitModal = new EventEmitter();\r\n    @Output() checkAuthority = new EventEmitter();\r\n\r\n    schemeInfo = {\r\n        name: '',\r\n        isDefault: false,\r\n        type: 'private',\r\n        orgids: ''\r\n    }\r\n\r\n    schemeType = 'private';\r\n\r\n    noPublicAuthority = false;\r\n    noOrgAuthority = false;\r\n\r\n    languages = [{ code: 'zh-CHS', name: 'ä¸­æç®ä½', default: true },{ code: 'en', name: 'English' },{ code: 'zh-CHT', name: 'ä¸­æç¹ä½'}];\r\n    nameMaxLength = { 'zh-CHS': 9, 'zh-CHT': 9, en: 50 };\r\n    \r\n    constructor(private cd: ChangeDetectorRef) { }\r\n\r\n    ngOnInit(): void {\r\n    }\r\n\r\n    close($event) {\r\n        this.closeModal.emit();\r\n    }\r\n\r\n    submit($event) {\r\n        this.submitModal.emit(this.schemeInfo);\r\n    }\r\n\r\n    onCancelClick($event) {\r\n        this.close($event);\r\n    }\r\n\r\n    onSelectedOrg($event) {\r\n        if ($event.selections && $event.selections.length ) {\r\n            let orgids = $event.selections.map(n => n.orgId);\r\n            this.schemeInfo.orgids = orgids;\r\n        }\r\n    }\r\n\r\n    onSetRangeType($event: MouseEvent, val) {\r\n        $event.stopPropagation();\r\n        this.schemeType = val;\r\n        if (val === 'public' || val === 'org') {\r\n            this.checkAuthority.emit({ value: val, schemeInfo: this.schemeInfo });\r\n        } else {\r\n            this.schemeInfo.type = val;\r\n        }\r\n        // console.log($event, this.schemeInfo.type);\r\n    }\r\n\r\n    refresh(hasAuthority = { public: true, org: true }) {\r\n        this.schemeInfo = {...this.schemeInfo};\r\n        this.schemeType = this.schemeInfo.type;\r\n        this.noPublicAuthority = !hasAuthority.public;\r\n        this.noOrgAuthority = !hasAuthority.org;\r\n        this.cd.detectChanges();\r\n    }\r\n\r\n    getSelectedId($event) {\r\n        console.log($event);\r\n        if ($event.selections &&$event.selections.length) {\r\n            this.schemeInfo.orgids = $event.selections.map(n => n.orgId);\r\n        } else {\r\n            this.schemeInfo.orgids = '';\r\n        }\r\n    }\r\n\r\n    clearAllOrgs() {\r\n        this.schemeInfo.orgids = '';\r\n    }\r\n}\r\n","import { ChangeDetectorRef, Component, ElementRef, EventEmitter, Injector, Input, OnInit, Output, TemplateRef, ViewChild } from '@angular/core';\r\nimport { DatagridComponent } from '@farris/ui-datagrid';\r\nimport { LocaleService } from '@farris/ui-locale';\r\nimport { getMultilingualValue } from '../getValueWithLocaleId';\r\n\r\n@Component({\r\n    selector: 'scheme-list',\r\n    templateUrl: 'scheme-list.component.html'\r\n})\r\n\r\nexport class SchemeListComponent implements OnInit {\r\n\r\n    @Input() items = [];\r\n    \r\n    @Output() closeModal = new EventEmitter();\r\n    @Output() submitModal = new EventEmitter();\r\n\r\n    @Input() removeItem = true;\r\n    \r\n    @ViewChild('header') header: ElementRef<any>;\r\n    @ViewChild('schemeName') schemeName: TemplateRef<any>;\r\n    @ViewChild('schemeIsDefault') schemeIsDefault: TemplateRef<any>;\r\n    @ViewChild('btnDel') btnDel: TemplateRef<any>;\r\n    @ViewChild('dg') dg: DatagridComponent;\r\n\r\n    columns = [];\r\n   \r\n    private changes: {\r\n        defaultId?: string,\r\n        deletedIds?: any[]\r\n    } = null;\r\n    constructor(private cd: ChangeDetectorRef, private localeSer: LocaleService, private injector: Injector) { }\r\n\r\n    ngOnInit(): void {\r\n\r\n        const colName = this.localeSer.getValue('datagrid.scheme.columns.name') || 'åç§°';\r\n        const colType = this.localeSer.getValue('datagrid.scheme.columns.type') || 'å±æ§';\r\n        const colDefault = this.localeSer.getValue('datagrid.scheme.columns.isDefault') || 'é»è®¤';\r\n        const colCreator = this.localeSer.getValue('datagrid.scheme.columns.username') || 'åå»ºäºº';\r\n        const colMgr = this.localeSer.getValue('datagrid.scheme.columns.mgr') || 'ç®¡ç';\r\n\r\n        const publicTxt = this.localeSer.getValue('datagrid.scheme.isPublic') || 'å¬å±';\r\n        const privateTxt = this.localeSer.getValue('datagrid.scheme.isPrivate') || 'ä¸ªäºº';\r\n        const orgTxt = this.localeSer.getValue('datagrid.scheme.isOrg') || 'ç»ç»';\r\n\r\n\r\n        this.columns = [\r\n            // {field: 'name', title: 'åç§°', width: 150, template: this.schemeName},\r\n            {field: 'name', title: colName, width: 150, formatter: (v) => {\r\n                return getMultilingualValue(JSON.parse(v), this.localeSer.localeId);\r\n            }},\r\n            {field: 'type', title: colType, width: 50, halign: 'center', align: 'center', formatter: (v, d) => {\r\n                switch(v) {\r\n                    case 'public':\r\n                        return '<span class=\"scheme-manager__label px-1 public\">'+ publicTxt +'</span>';\r\n                    case 'org':\r\n                        return '<span class=\"scheme-manager__label px-1 org\">'+ orgTxt +'</span>';\r\n                    case 'private':\r\n                    default:\r\n                        return '<span class=\"scheme-manager__label px-1 private\">'+ privateTxt +'</span>';\r\n                }\r\n            }},\r\n            {field: 'isDefault', title: colDefault, width: 50, halign: 'center', align: 'center', template: this.schemeIsDefault },\r\n            {field: 'userName', title: colCreator, width: 80},\r\n            {title: colMgr, width: 50, template: this.btnDel, halign: 'center', align: 'center',}\r\n        ];\r\n    \r\n    }\r\n\r\n    onClose($event) {\r\n        this.closeModal.emit();\r\n    }\r\n\r\n    onSubmitClick($event) {\r\n        this.submitModal.emit( this.changes);\r\n    }\r\n\r\n    onCancelClick($event) {\r\n        this.closeModal.emit();\r\n    }\r\n\r\n    setDefault($event: any, ctx) {\r\n        const r = $event == '1';\r\n        // $event.stopPropagation();\r\n        this.items.forEach(n => {\r\n            n.isDefault = false;\r\n            if (n.id === ctx.rowData.id && r) {\r\n                n.isDefault = r;\r\n            }\r\n        });\r\n\r\n        this.items = [...this.items];\r\n\r\n        const defaultItem = this.items.find(n => n.isDefault);\r\n        if (defaultItem) {\r\n            this.changes = this.changes || {};\r\n            this.changes.defaultId = defaultItem.id;\r\n        }\r\n        // this.cd.detectChanges();\r\n    }\r\n\r\n    onSchemeDel($event, ctx) {\r\n        if (!this.removeItem) {\r\n            return;\r\n        }\r\n        $event.stopPropagation();\r\n        const id = ctx.rowData.id;\r\n        this.items = this.items.filter(n => n.id !== id);\r\n        this.changes = this.changes || {};\r\n        this.changes.deletedIds = [...(this.changes.deletedIds || []), id];\r\n        if (id === this.changes.defaultId) {\r\n            this.changes.defaultId = '';\r\n            delete this.changes.defaultId;\r\n        }\r\n    }\r\n}","import { map, switchMap, tap } from 'rxjs/operators';\r\nimport { forkJoin, Observable, of, Subscription, timer } from 'rxjs';\r\nimport { Injectable, Injector, InjectionToken, ComponentFactoryResolver, ApplicationRef } from '@angular/core';\r\nimport { DatagridComponent, DataColumn } from '@farris/ui-datagrid';\r\nimport { BsModalService, ModalOptions, ModalContainerComponent } from '@farris/ui-modal';\r\nimport { MessagerService } from '@farris/ui-messager';\r\nimport { DatagridSettingsComponent } from './datagrid-settings.component';\r\nimport { cloneDeep } from 'lodash-es';\r\nimport { LocaleService } from '@farris/ui-locale';\r\nimport { TreeNode } from '@farris/ui-treetable';\r\nimport { IdService } from '@farris/ui-common';\r\nimport { SimpleColumnsComponent } from './simple-mode/simple-columns.component';\r\nimport { DatagridSchemeService } from './datagrid-scheme.service';\r\nimport { NewSchemeComponent } from './scheme/newscheme.component';\r\nimport { SchemeListComponent } from './scheme/scheme-list.component';\r\nimport { NotifyService } from '@farris/ui-notify';\r\nimport { DatagridSchemeModel, SchemeAuthModel, SettingModel } from './setting.model';\r\n\r\n\r\nexport const GRID_SETTINGS_WEBAPI =  new InjectionToken(' Farris DataGrid User Setting WebApi URI.');\r\n\r\n@Injectable()\r\nexport class DatagridSettingsService {\r\n\r\n    private multiSortMsg = 'åè¡¨ä¸­æªå¼å¯å¤åæåºçåè½ã è¯·æ£æ¥ï¼';\r\n    private columnsSortableMsg = 'æªå¼å¯åçæåºåè½ãè¯·æ£æ¥ï¼';\r\n    private notSupportHeaderGroupMsg = 'æä¸æ¯æå¤è¡¨å¤´è®¾ç½®';\r\n    private notShowDialog = 'å¤è¡¨å¤´æä¸æ¯æåæ¾ç¤ºè®¾ç½®ï¼åæ¶æªå¯ç¨åæåºåè½ã';\r\n\r\n    private _httpRestService = null;\r\n\r\n    private languages: any = [];\r\n\r\n    get httpRestService() {\r\n        return this._httpRestService;\r\n    };\r\n\r\n    set httpRestService(httpSer) {\r\n        this._httpRestService = httpSer;\r\n\r\n        if (this.schemeService) {\r\n            this.schemeService.setRestService(httpSer);\r\n        }\r\n    }\r\n\r\n    private gridRefs: {[key: string]: DatagridComponent} = null;\r\n    private activeSchemeItem: {[schemeid: string]: any} = null;\r\n\r\n    private saving = false;\r\n    private cfr: ComponentFactoryResolver = null;\r\n    private app: ApplicationRef = null;\r\n    private schemeListSubscription: Subscription = null;\r\n\r\n    private schemeService: DatagridSchemeService;\r\n    private notifyService: NotifyService;\r\n    constructor(private injector: Injector, private modalSer: BsModalService,\r\n                private messager: MessagerService, private idService: IdService,\r\n                private localeSer: LocaleService) {\r\n\r\n        this.cfr = this.injector.get(ComponentFactoryResolver);\r\n        this.app = this.injector.get(ApplicationRef);\r\n        this.notifyService = this.injector.get(NotifyService, null);\r\n        this.schemeService = new DatagridSchemeService();\r\n    }\r\n\r\n\r\n    destroy(id?: string) {\r\n        if (id && this.gridRefs && this.gridRefs[id]) {\r\n            delete this.gridRefs[id];\r\n        } else {\r\n            this.gridRefs = null;\r\n        }\r\n        this.saving = false;\r\n        this.setActiveSchemeItem(id, null);\r\n    }\r\n\r\n    registerGridInstance(dg: DatagridComponent) {\r\n        if (!dg) {\r\n            console.log('DatagridSettingService: grid instance is null.');\r\n            return;\r\n        }\r\n        const id = dg.id;\r\n        this.gridRefs = this.gridRefs || {};\r\n        if (!this.gridRefs[id]) {\r\n            this.gridRefs[id] = dg;\r\n        }\r\n    }\r\n\r\n    getGridInstance(dgID: string) {\r\n        return this.gridRefs ? this.gridRefs[dgID] : null;\r\n    }\r\n\r\n    /** æ´æ°æ¹æ¡ä¸­çéç½®æ°æ® */\r\n    private updateSchemeSettings(schemeItem: DatagridSchemeModel, settings: Partial<SettingModel>) {\r\n        if (schemeItem && settings) {\r\n            const schemeContentObj = JSON.parse(schemeItem.queryConditionString);\r\n            if (schemeContentObj) {\r\n                if ( schemeContentObj[this.localeSer.localeId]) {\r\n                    const schemeSettings = schemeContentObj[this.localeSer.localeId];\r\n                    schemeContentObj[this.localeSer.localeId] = Object.assign(schemeSettings, settings);\r\n                } else {\r\n                    schemeContentObj[this.localeSer.localeId] =  settings;\r\n                }\r\n                schemeItem.queryConditionString = JSON.stringify(schemeContentObj);\r\n            }\r\n        }\r\n    }\r\n\r\n    /** æ´æ°å½åæ¹æ¡éç½®æ°æ® */\r\n    updateActiveSchemeItemSettings(dgId: string, settings: Partial<SettingModel>) {\r\n        const schemeItem = this.getActiveSchemeItem(dgId);\r\n        this.updateSchemeSettings(schemeItem, settings);\r\n    }\r\n\r\n    /** è®¾ç½®æ´»å¨çæ¹æ¡ */\r\n    setActiveSchemeItem(dgId: string, activeItem: any) {\r\n        const schemekey = this.schemeService.getSchemeKey(dgId);\r\n        this.activeSchemeItem = this.activeSchemeItem || {};\r\n        this.activeSchemeItem[schemekey] = activeItem;\r\n    }\r\n    /** è·åå½åæ´»å¨çæ¹æ¡ */\r\n    getActiveSchemeItem(dgId: string): DatagridSchemeModel {\r\n        const schemekey = this.schemeService.getSchemeKey(dgId);\r\n        return this.activeSchemeItem ? this.activeSchemeItem[schemekey] : null;\r\n    }\r\n\r\n    getSearchTypes() {\r\n        return [\r\n            { value: 'all', title: this.localeSer.getValue('datagrid.settings.allColumns') },\r\n            { value: 'visible', title: this.localeSer.getValue('datagrid.settings.visibleColumns') },\r\n            { value: 'hidden', title: this.localeSer.getValue('datagrid.settings.hiddenColumns') }\r\n        ];\r\n    }\r\n\r\n    showSimple(gridInstance: DatagridComponent, settings?: SettingModel, selectedSchemeItem?: DatagridSchemeModel) {\r\n        const columns = this.convertColumnsToSimple(gridInstance.columns);\r\n        columns[0] = columns[0].filter(n => n.field && n.field !== gridInstance.ControlPanelFeild);\r\n\r\n        const searchTypes = this.getSearchTypes();\r\n\r\n        if (this.cfr) {\r\n            const cmpFactory = this.cfr.resolveComponentFactory(SimpleColumnsComponent);\r\n            let simpleRef = cmpFactory.create(this.injector);\r\n            this.app.attachView(simpleRef.hostView);\r\n            simpleRef.instance.columns = columns;\r\n            simpleRef.instance.seartTypes = searchTypes;\r\n            simpleRef.instance.gridInstance = gridInstance;\r\n\r\n            if (document.querySelector('#page-wrapper')) {\r\n                simpleRef.instance.top = 76;\r\n            }\r\n\r\n            simpleRef.instance.enableScheme = gridInstance.enableScheme;\r\n            if (gridInstance.enableScheme) {\r\n                if (settings) {\r\n                    if (selectedSchemeItem) {\r\n                        this.updateSchemeSettings(selectedSchemeItem, settings);\r\n                        simpleRef.instance.currentSchemeItem = selectedSchemeItem;\r\n                    } else {\r\n                        simpleRef.instance.currentSchemeItem = null;\r\n                        simpleRef.instance.settings = settings;\r\n                    }\r\n                } else {\r\n                    const _currentSchemtItem = this.getActiveSchemeItem(gridInstance.id);\r\n                    simpleRef.instance.currentSchemeItem = _currentSchemtItem;\r\n                }\r\n            }\r\n\r\n            document.body.appendChild(simpleRef.location.nativeElement);\r\n\r\n            simpleRef.instance.closed.pipe(\r\n                switchMap( () => {\r\n                    simpleRef.instance.container.nativeElement.style.right = '-500px';\r\n                    return timer(500);\r\n                })\r\n            ).subscribe( () => {\r\n                simpleRef.location.nativeElement.remove();\r\n                simpleRef.destroy();\r\n                simpleRef = null;\r\n                if (this.schemeListSubscription) {\r\n                    this.schemeListSubscription.unsubscribe();\r\n                }\r\n            });\r\n\r\n            simpleRef.instance.advanced.subscribe(({ viewFields }) => {\r\n                if (viewFields && viewFields.length){\r\n                    this.updateSchemeSettings(simpleRef.instance.currentSchemeItem, {viewColumns: viewFields});\r\n                }\r\n                this.showAdvanced(gridInstance, null, simpleRef.instance.currentSchemeItem);\r\n            });\r\n\r\n            simpleRef.instance.submit.subscribe( (e: any) => {\r\n                e.target.disabled = true;\r\n                if (this.saving) {\r\n                    return;\r\n                }\r\n                if (!this.saving) {\r\n\r\n                    if (e.currentScheme) {\r\n                        this.setActiveSchemeItem(gridInstance.id, e.currentScheme);\r\n                    }\r\n\r\n                    this.updateGridView(e, gridInstance, e.target);\r\n                }\r\n            });\r\n\r\n            simpleRef.instance.fieldsChange.subscribe((visibleFields: string[]) => {\r\n                this.updateActiveSchemeItemSettings(gridInstance.id, {viewColumns: visibleFields})\r\n            });\r\n\r\n            // æå¼æ°å¢æ¹æ¡çªå£\r\n            simpleRef.instance.addNewScheme.subscribe(() => {\r\n                this.showNewSchemeDialog(gridInstance, simpleRef);\r\n            });\r\n\r\n            simpleRef.instance.schemeList = this.schemeService.getStateValue(gridInstance.id, 'list') || [];\r\n\r\n            // æå¼æ¹æ¡ç®¡çåè¡¨çªå£\r\n            simpleRef.instance.showSchemeList.subscribe(() => {\r\n                this.schemeService.getSchemeList(gridInstance.id).pipe(\r\n                    switchMap((t) => {\r\n                        return this.schemeService.checkAuthority().pipe(\r\n                            map((auth: SchemeAuthModel) => {\r\n                                return {\r\n                                    list: t,\r\n                                    ...auth\r\n                                }\r\n                            })\r\n                        )\r\n                    })\r\n                ).subscribe((t: any) => {\r\n                    this.schemeService.setSchemeList(gridInstance.id, t.list || []);\r\n                    this.showSchemeListDialog(gridInstance, cloneDeep(t.list || []), t.success);\r\n                });\r\n            });\r\n\r\n            this.schemeListSubscription = this.schemeService.schemeList$.subscribe((list: any) => {\r\n                simpleRef.instance.schemeList = list;\r\n\r\n                if (!list || !list.length) {\r\n                    this.setActiveSchemeItem(gridInstance.id, null);\r\n                    return;\r\n                }\r\n\r\n                const _activeSchemeItem = this.getActiveSchemeItem(gridInstance.id);\r\n                if (_activeSchemeItem) {\r\n                    let hasActiveItem = list.find(n => n.id === _activeSchemeItem.id);\r\n                    if (!hasActiveItem) {\r\n                        hasActiveItem = this.getDefaultScheme(list); // è·åè®¾ç½®ä¸ºå½åæ¹æ¡çé¡¹\r\n                        this.setActiveSchemeItem(gridInstance.id, hasActiveItem || null);\r\n                    }\r\n\r\n                    simpleRef.instance.currentSchemeItem = hasActiveItem;\r\n                }\r\n            });\r\n\r\n            // åæ¢æ¹æ¡\r\n            simpleRef.instance.activeItemChange.subscribe((r: any) => {\r\n                this.setActiveSchemeItem(gridInstance.id, r);\r\n            });\r\n\r\n            simpleRef.hostView.detectChanges();\r\n\r\n            simpleRef.instance.container.nativeElement.style.right = '0px';\r\n\r\n            return simpleRef;\r\n        }\r\n    }\r\n\r\n\r\n    show(gridInstance: DatagridComponent, opts?: ModalOptions) {\r\n        this.registerGridInstance(gridInstance);\r\n\r\n        if (gridInstance.enableSimpleMode) {\r\n            return this.showSimple(gridInstance);\r\n        } else {\r\n            return this.showAdvanced(gridInstance, opts);\r\n        }\r\n    }\r\n\r\n    private showAdvanced(gridInstance: DatagridComponent, opts?: ModalOptions, selectedSchemeItem?: DatagridSchemeModel) {\r\n        let _editColSortInfo = true;\r\n        const editColSortInfo = this.canSetColumnSort(gridInstance);\r\n        if (editColSortInfo !== true) {\r\n            // this.messager.warning(msg);\r\n            // return;\r\n            _editColSortInfo = false;\r\n        }\r\n\r\n        const showSetColumnsTab = !this.isHeaderGroup(gridInstance);\r\n        const getActiveTabIndex = () => {\r\n            if (showSetColumnsTab) {\r\n                return 1;\r\n            } else {\r\n                if (_editColSortInfo) {\r\n                    return 2;\r\n                } else {\r\n                    return -1;\r\n                }\r\n            }\r\n        };\r\n        const activeTabIndex = getActiveTabIndex();\r\n\r\n        if (activeTabIndex === -1) {\r\n            this.messager.warning(this.notShowDialog);\r\n            return;\r\n        }\r\n\r\n        const columns = this.convertColumnsToSimple(gridInstance.columns);\r\n\r\n        // è·åå½åæ¹æ¡ä¸­å½åè¯­è¨çéç½®æ°æ®\r\n        let currentSettings: SettingModel = null;\r\n        if (selectedSchemeItem && selectedSchemeItem.queryConditionString) {\r\n            currentSettings = JSON.parse(selectedSchemeItem.queryConditionString)[this.localeSer.localeId];\r\n\r\n            if (currentSettings.columnFormat && currentSettings.columnFormat.length) {\r\n                columns[0] = columns[0].map((col) => {\r\n                    const fcol = currentSettings.columnFormat.find(n => n.field === col.field);\r\n                    if (fcol) {\r\n                        col = Object.assign(col, fcol);\r\n                    }\r\n                    return col;\r\n                });\r\n            }\r\n        }\r\n\r\n\r\n        columns[0] = columns[0].filter(n => n.field && n.field !== gridInstance.ControlPanelFeild);\r\n        const treeData = this.convertColumns2TreeData(cloneDeep(columns), true);\r\n        const viewColumnsTreeData = this.convertColumns2TreeData(cloneDeep(columns), false);\r\n        this.checkViewTreeNodes(viewColumnsTreeData);\r\n\r\n        let modalRef = null;\r\n\r\n        const okText = this.localeSer.getValue('datagrid.settings.ok') || 'ç¡®å®';\r\n        const cancelText = this.localeSer.getValue('datagrid.settings.cancel') || 'åæ¶';\r\n        const resetText =  this.localeSer.getValue('datagrid.settings.reset') || 'éç½®';\r\n\r\n        const defaultOpts = {\r\n            width: 760, height: 560, showHeader: false, title: 'æ§å¶é¢æ¿',\r\n            initialState: {\r\n                columns,\r\n                sortTreeData: treeData,\r\n                viewTreeData: viewColumnsTreeData,\r\n                gridInstance,\r\n                canSetColumnSort: _editColSortInfo,\r\n                canSetColumnVisible: showSetColumnsTab,\r\n                activeTabIndex,\r\n                schemeInfo: currentSettings\r\n            },\r\n            showButtons: false\r\n        };\r\n        const modalOpts = Object.assign(defaultOpts, opts || {});\r\n\r\n        modalRef = this.modalSer.show(DatagridSettingsComponent, modalOpts);\r\n        const instance = modalRef.content as DatagridSettingsComponent;\r\n        instance.enableReset = true;\r\n        instance.modalRef = modalRef;\r\n        instance.canSetColumnSort = _editColSortInfo;\r\n        instance.canSetColumnVisible = !this.isHeaderGroup(gridInstance);\r\n\r\n        instance.submitHandle.subscribe((e) => {\r\n            e.target.disabled = true;\r\n            if (this.saving) {\r\n                return;\r\n            }\r\n            if (!this.saving) {\r\n                if (selectedSchemeItem) {\r\n                    this.setActiveSchemeItem(gridInstance.id, selectedSchemeItem);\r\n                }\r\n                this.updateGridView(modalRef, gridInstance, e.target);\r\n            }\r\n        });\r\n\r\n        instance.cancelHandle.subscribe((e) => {\r\n            modalRef.close();\r\n        });\r\n\r\n        // åæ¢å°ä¾§è¾¹æ ç®æ´æ¨¡å¼\r\n        instance.concise.subscribe((e) => {\r\n            modalRef.close();\r\n            const settings = modalRef.content;\r\n            const { sortInfo, viewColumns, columnFormat, groupField } = settings;\r\n            this.showSimple(gridInstance, { sortInfo, viewColumns, columnFormat, groupField }, selectedSchemeItem);\r\n        });\r\n\r\n        const modalContainer = modalRef.dialog.instance as ModalContainerComponent;\r\n        modalContainer.draggbar.handle = instance.header.nativeElement;\r\n        return modalRef;\r\n    }\r\n\r\n\r\n\r\n    private canSetColumnSort(gridInstance: DatagridComponent) {\r\n        if (gridInstance.multiSort && this.hasEnableSortColumns(gridInstance)) {\r\n            return true;\r\n        } else {\r\n            if (!this.hasEnableSortColumns(gridInstance)) {\r\n                return this.columnsSortableMsg;\r\n            } else if (!gridInstance.multiSort) {\r\n                return this.multiSortMsg;\r\n            }\r\n        }\r\n    }\r\n\r\n    private hasEnableSortColumns(gridInstance: DatagridComponent) {\r\n        const sortColumnsCount = gridInstance.flatColumns.reduce((c, r) => {\r\n            if (r.sortable) {\r\n                return c + 1;\r\n            }\r\n            return c;\r\n        }, 0);\r\n\r\n        return sortColumnsCount > 0;\r\n    }\r\n\r\n    private isHeaderGroup(grid: DatagridComponent) {\r\n        const flag = grid.columns.length > 1;\r\n        if (flag) {\r\n            return this.notSupportHeaderGroupMsg;\r\n        }\r\n        return flag;\r\n    }\r\n\r\n    private getChilds(cols, rowIndex, colStartIndex, colCount, forSort = false) {\r\n        const childCols = [];\r\n        let _count = colStartIndex;\r\n        if (!cols[rowIndex]) {\r\n            return  [];\r\n        }\r\n\r\n        cols[rowIndex].slice().forEach(element => {\r\n            _count = _count + element.colspan;\r\n            if ( _count <= colCount ) {\r\n                childCols.push(element);\r\n            }\r\n        });\r\n\r\n        cols[rowIndex].splice(0, childCols.length);\r\n\r\n        return childCols.map((c, i) => {\r\n            let n: any = {\r\n                data: c,\r\n                selectable: forSort ? !!c.sortable : true\r\n            };\r\n\r\n            if (c.colspan && c.colspan > 1) {\r\n                n = {\r\n                    data: c,\r\n                    selectable: false,\r\n                    expanded: true,\r\n                    children: this.getChilds(cols, rowIndex + 1, 0 , c.colspan)\r\n                };\r\n            }\r\n            return n;\r\n        });\r\n    }\r\n    convertColumns2TreeData(cols: DataColumn[][], forSort = false) {\r\n        const columns = cols.map((c: any) => {\r\n            c.map((_) => {\r\n                _.colspan = _.colspan || 1;\r\n                return _;\r\n            });\r\n            return c;\r\n        });\r\n        if (columns.length === 1) {\r\n            return columns[0].map(c => {\r\n                return {\r\n                    data: c,\r\n                    selectable: forSort ? !!c.sortable : true\r\n                };\r\n            });\r\n        } else {\r\n            return columns[0].map((c, i) => {\r\n                if (c.colspan && c.colspan > 1) {\r\n                    return {\r\n                        data: c,\r\n                        selectable: false,\r\n                        expanded: true,\r\n                        children: this.getChilds(columns, 1, 0, c.colspan, forSort)\r\n                    };\r\n                } else {\r\n                    return {\r\n                        data: c,\r\n                        selectable: forSort ? !!c.sortable : true\r\n                    };\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n\r\n    private checkViewTreeNodes(treeNodes: TreeNode[]) {\r\n        treeNodes.forEach((tn: TreeNode) => {\r\n            if (!tn.children || !tn.children.length) {\r\n                tn.selectable = true;\r\n            } else {\r\n                tn.selectable = false;\r\n                this.checkViewTreeNodes(tn.children);\r\n            }\r\n        });\r\n    }\r\n\r\n    private convertColumnsToSimple(cols: any) {\r\n        // ç§»é¤è®¾ç½®å\r\n        return cols.map( (_cols: DataColumn[]) => {\r\n            return _cols.map( (c: DataColumn) => {\r\n                if (c.field !== '_datagrid-setting-control_') {\r\n                    return {\r\n                        field: c.field,\r\n                        title: c.title,\r\n                        colspan: c.colspan,\r\n                        rowspan: c.rowspan,\r\n                        sortable: c.sortable,\r\n                        order: c.order,\r\n                        halign: c.halign || 'left',\r\n                        align: c.align || 'left',\r\n                        visible: c.visible,\r\n                        allowGrouping: c.allowGrouping,\r\n                        groupFooter: c.groupFooter,\r\n                        footer: c.footer,\r\n                        width: c.width || 100,\r\n                        dataType: c.dataType || 'string'\r\n                    };\r\n                }\r\n            }).filter(n => n);\r\n        });\r\n    }\r\n\r\n    private resetGridView(gridInstance: any) {\r\n        if (!gridInstance) {\r\n            return;\r\n        }\r\n        const dfs = gridInstance.dfs;\r\n        if (dfs) {\r\n            const options = dfs['_state'].initialOptions;\r\n\r\n            if (options.sort) {\r\n                if (options.sort.sortName) {\r\n                    gridInstance.sortName = options.sort.sortName;\r\n                }\r\n                if (options.sort.sortOrder) {\r\n                    gridInstance.sortOrder = options.sort.sortOrder;\r\n                }\r\n            }\r\n\r\n            gridInstance.groupField = options.groupField || '';\r\n            // TODO: è¿éè¦ä¿®æ­£é»è®¤åçæ¾ç¤ºé¡ºåº\r\n            if (options.columnFields && options.columnFields.length) {\r\n\r\n                const newColumns = [];\r\n                options.columnFields.forEach(c => {\r\n                    const col = gridInstance.columns[0].find((n: any) => n.field === c.field);\r\n                    if (col) {\r\n                        col.visible = c.visible;\r\n                        col.halign = c.halign;\r\n                        col.align = c.align;\r\n                        col.width = c.width;\r\n                        col.footer = c.footer;\r\n                        col.groupFooter = c.groupFooter;\r\n                        newColumns.push(col);\r\n                    }\r\n                });\r\n\r\n                gridInstance.columns[0] = newColumns;\r\n            }\r\n\r\n            // gridInstance['checkOptions']();\r\n            gridInstance['columnsChanged']();\r\n        }\r\n    }\r\n\r\n    private updateGridView(modalRef, gridInstance, btn = null) {\r\n        const settings = modalRef.content;\r\n\r\n        if (settings) {\r\n            const { sortInfo, viewColumns, columnFormat, groupField } = settings;\r\n\r\n            this.updateActiveSchemeItemSettings(gridInstance.id, {sortInfo, viewColumns, columnFormat, groupField});\r\n\r\n            this.saving = true;\r\n\r\n            let _groupField = '';\r\n            if (gridInstance.groupRows && groupField && groupField.length) {\r\n                _groupField = groupField.join(',') ;\r\n            }\r\n            gridInstance.groupField = _groupField;\r\n            const _colformats = columnFormat ? this.convertColumnsToSimple([columnFormat])[0] : [];\r\n            const saveData = { sortInfo, viewColumns, groupField: _groupField, columnFormat: _colformats };\r\n            this.setUserConfig(gridInstance.id, saveData).subscribe( () => {\r\n                if (btn) {\r\n                    btn.disabled = false;\r\n                }\r\n                this.saving = false;\r\n                if (viewColumns && viewColumns.length) {\r\n                    gridInstance.columns = gridInstance.columns.map(cols => {\r\n                        this.updateColumnFormat(cols, columnFormat, gridInstance);\r\n                        return this.newVisibleOrderColumns(cols, viewColumns, columnFormat, gridInstance);\r\n                    });\r\n                }\r\n\r\n                gridInstance.columnsChanged(true);\r\n                if (sortInfo && Object.keys(sortInfo).length) {\r\n                    const { sortName, sortOrder } = sortInfo;\r\n                    if (sortName && sortName.length) {\r\n                        gridInstance.sort(sortName.join(','), sortOrder.join(','));\r\n                    } else {\r\n                        gridInstance.clearSort();\r\n                    }\r\n                } else {\r\n                    gridInstance.clearSort();\r\n                }\r\n\r\n                modalRef.close();\r\n            });\r\n        } else {\r\n            modalRef.close();\r\n        }\r\n    }\r\n\r\n\r\n    newVisibleOrderColumns(cols: any, viewColumns: any, columnFormat: any, gridInstance: any) {\r\n        const hideColumns = [];\r\n        cols.forEach((element, index) => {\r\n            if (this.isNewAddColumn(element.field, columnFormat) && element.field !== '_datagrid-setting-control_' && !gridInstance.enableScheme) {\r\n                viewColumns.push(element.field);\r\n            } else {\r\n                element.visible = viewColumns.includes(element.field);\r\n                if (!element.visible) {\r\n                    hideColumns.push(element);\r\n                }\r\n            }\r\n        });\r\n\r\n        // æ¸çä¸å­å¨çå\r\n        let newCols = viewColumns.map( field => {\r\n            return cols.find(c => c.field === field);\r\n        }).filter(n => n);\r\n\r\n        if (hideColumns.length) {\r\n            newCols = newCols.concat(hideColumns);\r\n        }\r\n\r\n        return newCols.filter(c => c && c.field && c.field !== '_datagrid-setting-control_' );\r\n    }\r\n\r\n    /**\r\n     * æ¯å¦ä¸ºæ°å¢å çå­æ®µ\r\n     * æ°å¢çå­æ®µï¼éè¦å¨åè¡¨ä¸­å±ç¤ºåºæ¥ï¼å¹¶ä¿å­å°ä¸ªæ§åè®¾ç½®ä¸­\r\n     */\r\n    private isNewAddColumn(field: any, columns: any) {\r\n        columns = columns || [];\r\n        return !columns.find(c => c.field === field);\r\n    }\r\n\r\n\r\n    updateColumnFormat(cols: any[], columnFormat: any[], gridInstance) {\r\n        if (columnFormat && columnFormat.length) {\r\n            cols.forEach(col => {\r\n                const formatCol = columnFormat.find(f=> f.field === col.field);\r\n                if (formatCol) {\r\n                    col.width = formatCol.width;\r\n                    col.halign = formatCol.halign || 'left';\r\n                    col.align = formatCol.align || 'left';\r\n\r\n                    if (gridInstance.groupRows && (col.allowGrouping || col.allowGrouping === undefined)) {\r\n                        if (!col.groupFooter) {\r\n                            col.groupFooter = formatCol.groupFooter;\r\n                        }\r\n\r\n                        if (col.groupFooter && col.groupFooter.options) {\r\n                            col.groupFooter.options.text = formatCol.groupFooter.options.text || '';\r\n                            col.groupFooter.options.calculationType =\r\n                                formatCol.groupFooter.options.calculationType !== undefined &&\r\n                                formatCol.groupFooter.options.calculationType !== null ?\r\n                                parseInt(formatCol.groupFooter.options.calculationType, 10) : -1;\r\n                        }\r\n                    }\r\n\r\n                    if (gridInstance.showFooter && !gridInstance.footerTemplate) {\r\n                        if (!col.footer) {\r\n                            col.footer = formatCol.footer;\r\n                        }\r\n\r\n                        if (col.footer && col.footer.options) {\r\n                            col.footer.options.text = formatCol.footer.options.text || '';\r\n                            col.footer.options.calculationType =\r\n                                formatCol.footer.options.calculationType !== undefined &&\r\n                                formatCol.footer.options.calculationType !== null ?\r\n                                parseInt(formatCol.footer.options.calculationType, 10) : -1;\r\n                        }\r\n                    }\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    // åå»ºå¯ä¸key, ç±uri + gridId ç»æï¼å¹¶æ··æ·\r\n    private createConfigKey(gridId: string) {\r\n        const grid = this.getGridInstance(gridId);\r\n        if (grid) {\r\n            return grid.dgs.createConfigKey(gridId);\r\n        } else {\r\n            console.log('DatagridSettingService: Can not find the grid instance.');\r\n        }\r\n\r\n    }\r\n\r\n\r\n    private getCurrentUserSettings(gridId: string) {\r\n        const gridInstance = this.getGridInstance(gridId);\r\n        const config = {sortInfo: {}, viewColumns: [], groupField: '', columnFormat: []};\r\n\r\n        if (gridInstance) {\r\n            const { sortName, sortOrder, columns} = gridInstance;\r\n            if (sortName) {\r\n                const sortInfo = {\r\n                    sortName: sortName.split(','),\r\n                    sortOrder: sortOrder.split(',')\r\n                };\r\n\r\n                config.sortInfo = sortInfo;\r\n            }\r\n\r\n            const viewColumns = columns[0].filter(n => n.visible || n.visible === undefined).map(n => n.field);\r\n            config.viewColumns = viewColumns;\r\n            config.columnFormat = this.convertColumnsToSimple(columns)[0];\r\n\r\n            if (gridInstance.groupRows) {\r\n                config.groupField = gridInstance.groupField;\r\n            }\r\n        }\r\n        return config;\r\n    }\r\n\r\n\r\n    saveUserConfig(gridId: string) {\r\n        const config = this.getCurrentUserSettings(gridId);\r\n        return this.setUserConfig(gridId, config);\r\n    }\r\n\r\n    setUserConfig(gridId: string, config: any ): Observable<any> {\r\n        const key = this.createConfigKey(gridId);\r\n        const LOCALEID = this.localeSer.localeId;\r\n        const currentConfig = localStorage.getItem(key);\r\n        const _config = (currentConfig ? JSON.parse(currentConfig) : { }) || {};\r\n        if (config) {\r\n            if (_config) {\r\n                _config[LOCALEID] = config;\r\n            }\r\n\r\n            localStorage.setItem(key, JSON.stringify(_config));\r\n        } else {\r\n            localStorage.removeItem(key);\r\n        }\r\n        if (this.httpRestService) {\r\n            const gridIns = this.getGridInstance(gridId);\r\n            if (gridIns && gridIns.enableScheme) {\r\n                const activeScheme = this.getActiveSchemeItem(gridId);\r\n                if (activeScheme) {\r\n                    // return this.updateScheme(gridId, config);\r\n                    if (activeScheme.type === 'private') {\r\n                        return this.schemeService.saveScheme(activeScheme, gridId, true)\r\n                    } else {\r\n                        return this.schemeService.checkAuthority().pipe(\r\n                            switchMap((t: SchemeAuthModel) => {\r\n                                if (t.success) {\r\n                                    const hasOrgAuthority = t.authOrganizationData && t.authOrganizationData.length;\r\n                                    if (activeScheme.type === 'public' || (activeScheme.type === 'org' && hasOrgAuthority)) {\r\n                                        return this.schemeService.saveScheme(activeScheme, gridId, true);\r\n                                    }\r\n                                }\r\n\r\n                                return of(true);\r\n                            }),\r\n                        )\r\n                    }\r\n                } else {\r\n                    return of(true);\r\n                }\r\n            }\r\n            // ä¿å­è³æ°æ®åº\r\n            return this._saveUserConfig(key,  config ? _config :  '');\r\n        }\r\n\r\n        return of(true);\r\n    }\r\n\r\n    getUserConfig(key): Observable<any> {\r\n        if (this.httpRestService) {\r\n            return this._getUserConfig(key);\r\n        } else {\r\n            const config = localStorage.getItem(key);\r\n            if (config) {\r\n                const con = JSON.parse(config);\r\n                if (con[this.localeSer.localeId]) {\r\n                    return of(con[this.localeSer.localeId]);\r\n                } else {\r\n                    if (Object.keys(con).indexOf('viewColumns') > -1) {\r\n                        return of(con);\r\n                    }\r\n                    return null;\r\n                }\r\n            } else {\r\n                return of(null);\r\n            }\r\n        }\r\n    }\r\n\r\n    private getDefaultScheme(schemeList: Array<DatagridSchemeModel>) {\r\n        // 1ãæä¸ªäººé»è®¤çè¿åä¸ªäººé»è®¤æ¹æ¡\r\n        // 2ãæ²¡æä¸ªäººé»è®¤æ¹æ¡çï¼è¿åå¬å±æ¹æ¡ç¬¬1ä¸ª\r\n        // 3ãæ²¡æå¬å±æ¹æ¡ï¼è¿åç»ç»æ¹æ¡ç¬¬1ä¸ª\r\n        // 4ãæ²¡æç»ç»æ¹æ¡ç, è¿åä¸ªäººæ¹æ¡ç¬¬1ä¸ª\r\n        // 5ãæ²¡æä¸ªäººæ¹æ¡çï¼è¿åç³»ç»é¢å¶ï¼å³è¡¨åè®¾è®¡æ¶çæ ¼å¼\r\n\r\n        let defaultScheme = null;\r\n        if (!schemeList || !schemeList.length) {\r\n            return defaultScheme;\r\n        } else {\r\n            defaultScheme = schemeList.find(n => n.isDefault);\r\n            if (!defaultScheme) {\r\n                let publicSchemes = schemeList.filter(n => n.type === 'public');\r\n\r\n                if (!publicSchemes.length) {\r\n                    publicSchemes = schemeList.filter(n => n.type === 'org');\r\n                }\r\n\r\n                if (publicSchemes.length) {\r\n                    defaultScheme = publicSchemes[0];\r\n                } else {\r\n                    defaultScheme = schemeList[0];\r\n                }\r\n            }\r\n        }\r\n\r\n        return defaultScheme;\r\n    }\r\n\r\n\r\n    getSettings(gridId: string) {\r\n        const key = this.createConfigKey(gridId);\r\n        const gridIns = this.getGridInstance(gridId);\r\n\r\n        let schemeList$ = of([]);\r\n        if (gridIns && gridIns.enableScheme) {\r\n            schemeList$ = this.getSchemeList(gridId);\r\n        }\r\n\r\n        return forkJoin(schemeList$, this.getUserConfig(key), this.schemeService.getLanguages()).pipe(\r\n            map(([schemeList, userSetting, supportedLanguages]) => {\r\n                schemeList = schemeList || [];\r\n                this.languages = supportedLanguages;\r\n                if (!schemeList.length) {\r\n                    return userSetting;\r\n                } else {\r\n                    // ç¼å­æ¹æ¡åè¡¨\r\n                    this.setSchemeList(schemeList, gridId);\r\n                    // æ¥æ¾é»è®¤æ¹æ¡\r\n                    const defaultScheme: DatagridSchemeModel = this.getDefaultScheme(schemeList);\r\n                    if (!defaultScheme) {\r\n                        return userSetting;\r\n                    } else {\r\n                        this.setActiveSchemeItem(gridId, defaultScheme);\r\n                        const userSettings = JSON.parse(defaultScheme.queryConditionString);\r\n                        if (userSettings) {\r\n                            const localeId = this.localeSer.localeId;\r\n                            if (userSettings[localeId]) {\r\n                                localStorage.setItem(key, JSON.stringify(userSettings));\r\n                                return userSettings[localeId];\r\n                            } else {\r\n                                userSettings[localeId] = null;\r\n                                localStorage.setItem(key, JSON.stringify(userSettings));\r\n                                return null;\r\n                            }\r\n                        } else {\r\n                            return null;\r\n                        }\r\n                    }\r\n                }\r\n            })\r\n        );\r\n    }\r\n\r\n\r\n    private _saveUserConfig(key, config) {\r\n        try {\r\n            const userConfigSetting = {\r\n                configkey1: key,\r\n                configkey2: '',\r\n                configkey3: '',\r\n                textvalue: config ? JSON.stringify(config) :  ''\r\n            };\r\n\r\n            return this.httpRestService.saveUserSettings(userConfigSetting);\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n\r\n    resetUserConfig(gridInstance, modalRef) {\r\n        const restorDefaultText = this.localeSer.getValue('datagrid.settings.restoreDefaultSettingsText') || 'ç¡®è®¤è¦æ¢å¤é»è®¤è®¾ç½®åï¼';\r\n        this.messager.confirm(restorDefaultText).pipe(\r\n            switchMap( (t: boolean) => {\r\n                if (t) {\r\n                    return this.setUserConfig(gridInstance.id, '');\r\n                }\r\n                return of(t);\r\n            })\r\n        ).subscribe((t: boolean) => {\r\n            if (t) {\r\n                this.resetGridView(gridInstance);\r\n                modalRef.close();\r\n            }\r\n        });\r\n    }\r\n\r\n    private _getUserConfig(key) {\r\n        try {\r\n            return this.httpRestService.getUserSettings(key).pipe(\r\n                map((ucs: any) => {\r\n                    if (ucs && ucs.textValue) {\r\n                        const c = JSON.parse(ucs.textValue);\r\n                        if (c) {\r\n                            if (c[this.localeSer.localeId]) {\r\n                                localStorage.setItem(key, ucs.textValue);\r\n                                return c[this.localeSer.localeId];\r\n                            } else {\r\n                                c[this.localeSer.localeId] = null;\r\n                                localStorage.setItem(key, JSON.stringify(c));\r\n                                // if (Object.keys(c).indexOf('viewColumns') > -1) {\r\n                                //     return c;\r\n                                // }\r\n                                return null;\r\n                            }\r\n\r\n                        }\r\n                        return null;\r\n                    }\r\n                    return null;\r\n                })\r\n            );\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n\r\n    private buildSubmitData(gridId: string, settings = null) {\r\n        const LOCALEID = this.localeSer.localeId;\r\n        if (!settings) {\r\n            settings = this.getCurrentUserSettings(gridId);\r\n        }\r\n        const localeKey = this.createConfigKey(gridId);\r\n        const currentConfig = localStorage.getItem(localeKey);\r\n        const _config = (currentConfig ? JSON.parse(currentConfig) : { }) || {};\r\n        if (_config) {\r\n            _config[LOCALEID] = settings;\r\n        }\r\n\r\n        return _config;\r\n    }\r\n\r\n// ----------------------------------------------------------------------------------------------- \\\\\r\n\r\n    private showSchemeListDialog(gridInstance: any, schemeList: any, canDel = true) {\r\n        const modalOpts = {\r\n            width: 760, height: 577, showHeader: false, title: 'æ§å¶é¢æ¿',\r\n            initialState: {\r\n                items: schemeList || [],\r\n                removeItem: canDel\r\n            },\r\n            showButtons: false\r\n        };\r\n\r\n        const schemeListDlg = this.modalSer.show(SchemeListComponent, modalOpts);\r\n        const instance = schemeListDlg.content as SchemeListComponent;\r\n        instance.closeModal.subscribe( () => {\r\n            schemeListDlg.close();\r\n        });\r\n\r\n        instance.submitModal.subscribe((t: any) => {\r\n            this.schemeService.updateScheme(t, gridInstance.id).subscribe((e: any) => {\r\n                if(e === false) {\r\n                    schemeListDlg.close();\r\n                    return;\r\n                }\r\n                const msg = 'åè®¾ç½®æ¹æ¡ä¿å­æåã';\r\n                if (this.notifyService) {\r\n                    this.notifyService.success(msg);\r\n                } else {\r\n                    this.messager.success(msg);\r\n                }\r\n\r\n                const schemeList = this.schemeService.getStateValue(gridInstance.id, 'list');\r\n\r\n                if(t.defaultId) {\r\n                    schemeList.forEach(n => {\r\n                        n.isDefault = false;\r\n                        if (n.id === t.defaultId) {\r\n                            n.isDefault = true;\r\n                            // this.setActiveSchemeItem(gridInstance.id, n);\r\n                        }\r\n                    });\r\n                }\r\n\r\n                let newSchemeList = schemeList;\r\n                if (t.deletedIds && t.deletedIds.length) {\r\n                    newSchemeList = schemeList.filter(n => {\r\n                        return !t.deletedIds.includes(n.id)\r\n                    });\r\n                }\r\n\r\n                this.schemeService.setSchemeList(gridInstance.id, newSchemeList);\r\n                schemeListDlg.close();\r\n            });\r\n        });\r\n\r\n        const modalContainer = schemeListDlg.dialog.instance as ModalContainerComponent;\r\n        modalContainer.draggbar.handle = instance.header.nativeElement;\r\n    }\r\n\r\n    // æ°å¢æå¦å­æ¹æ¡\r\n    private showNewSchemeDialog(gridInstance, simpleRef ) {\r\n        const modalOpts = {\r\n            width: 480, height: 269, showHeader: false, title: 'æ§å¶é¢æ¿',\r\n            initialState: {\r\n                languages: this.languages\r\n            },\r\n            showButtons: false,\r\n            resizable: false\r\n        };\r\n\r\n        const newSchemeDlg = this.modalSer.show(NewSchemeComponent, modalOpts);\r\n        const instance = newSchemeDlg.content as NewSchemeComponent;\r\n        instance.closeModal.subscribe( () => {\r\n            newSchemeDlg.close();\r\n        });\r\n\r\n        instance.submitModal.pipe(\r\n            switchMap((t: any) => {\r\n                return this.createNewScheme(gridInstance.id, t);\r\n            })\r\n        ).subscribe((t: any) => {\r\n            if (t.flag === false) {\r\n                const msg = t.msg || 'è¯·è¾å¥æ¹æ¡åç§°';\r\n                if (this.notifyService) {\r\n                    this.notifyService.info(msg);\r\n                } else {\r\n                    this.messager.info(msg);\r\n                }\r\n                return;\r\n            }\r\n            // æ´æ°æ¹æ¡åè¡¨\r\n            const schemeList = this.schemeService.getStateValue(gridInstance.id, 'list') || [];\r\n            if (t.isDefault) {\r\n                schemeList.forEach(n => {\r\n                    n.isDefault = false;\r\n                });\r\n            }\r\n            schemeList.push(t);\r\n            this.setActiveSchemeItem(gridInstance.id, t);\r\n            this.schemeService.setSchemeList(gridInstance.id, schemeList);\r\n            newSchemeDlg.close();\r\n        });\r\n\r\n        instance.checkAuthority.pipe(\r\n            switchMap((t: any) => {\r\n                return this.schemeService.checkAuthority().pipe(\r\n                    map((auth: SchemeAuthModel) => {\r\n                        return {\r\n                            type: t,\r\n                            ...auth\r\n                        }\r\n                    })\r\n                )\r\n            })\r\n        ).subscribe((t: any) => {\r\n            let hasAuthority = { public: true, org: true };\r\n            let msg = 'æ¨æ²¡æå°æ¹æ¡çä½¿ç¨èå´è®¾ç½®ä¸ºå¬å±çæéã';\r\n            if (t.type.value === 'org') {\r\n                msg = 'æ¨æ²¡æå°æ¹æ¡çä½¿ç¨èå´è®¾ç½®ä¸ºç»ç»çæéã';\r\n            }\r\n            if (t.success) {\r\n                const hasPublicAuthority = t.authOperationData && t.authOperationData.length;\r\n                hasAuthority.public = hasPublicAuthority;\r\n                const hasOrgAuthority = t.authOrganizationData && t.authOrganizationData.length;\r\n                hasAuthority.org = hasOrgAuthority;\r\n                if (t.type.value === 'public') {\r\n                    instance.schemeInfo.type = t.type.value;\r\n                } else if (t.type.value === 'org') {\r\n                    if (!hasOrgAuthority) {\r\n                        this.notifyService.warning(msg);\r\n                    }else {\r\n                        instance.schemeInfo.type = t.type.value;\r\n                        instance.schemeInfo.orgids = t.authOrganizationData.join(',')\r\n                        instance.dataPermissionIds = t.authOrganizationData;\r\n                    }\r\n                }\r\n            } else {\r\n                this.notifyService.warning(msg);\r\n                hasAuthority = { public: false, org: false };;\r\n            }\r\n            instance.refresh(hasAuthority);\r\n        })\r\n\r\n        const modalContainer = newSchemeDlg.dialog.instance as ModalContainerComponent;\r\n        modalContainer.draggbar.handle = instance.header.nativeElement;\r\n    }\r\n\r\n    getSchemeList(gridId: string) {\r\n        return this.schemeService.getSchemeList(gridId);\r\n    }\r\n\r\n    createNewScheme(gridId: string, data: any) {\r\n        if(!data.name) {\r\n            return of({flag: false, msg: 'è¯·è¾å¥æ¹æ¡åç§°'});\r\n        } else {\r\n            const hasName = this.schemeService.hasSchemeName(gridId, data.name);\r\n\r\n            if (typeof hasName === 'boolean' && hasName) {\r\n                return of({flag: false, msg: 'æ¹æ¡åç§°å·²å­å¨ï¼è¯·ä¿®æ¹ã'});\r\n            } else if (Array.isArray(hasName) && hasName.length) {\r\n                const msgs =  hasName.map(n => {\r\n                    if (n === 'zh-CHS') {\r\n                        return 'ç®ä½ä¸­æåç§°å·²å­å¨ã';\r\n                    } else if(n === 'zh-CHT') {\r\n                        return 'ç¹ä½ä¸­æåç§°å·²å­å¨ã';\r\n                    } else {\r\n                        return 'è±æåç§°å·²å­å¨ã';\r\n                    }\r\n                });\r\n\r\n                return of({flag: false, msg: msgs.join('')});\r\n            }\r\n        }\r\n\r\n        const requiredName = [];\r\n        this.languages.forEach(n => {\r\n            if (data.name[n.code] === '' || data.name[n.code] === undefined) {\r\n                requiredName.push(n.code);\r\n            }\r\n        });\r\n\r\n        if (requiredName.length) {\r\n            const msgs =  requiredName.map(n => {\r\n                if (n === 'zh-CHS') {\r\n                    return 'è¯·è¾å¥ç®ä½ä¸­æåç§°ã';\r\n                } else if(n === 'zh-CHT') {\r\n                    return 'è¯·è¾å¥ç¹ä½ä¸­æåç§°ã';\r\n                } else {\r\n                    return 'è¯·è¾å¥è±æåç§°ã';\r\n                }\r\n            });\r\n            return of({flag: false, msg: msgs.join('')});\r\n        }\r\n\r\n\r\n        if (data.type && data.type === 'org' && (!data.orgids || !data.orgids.length)) {\r\n            return of({flag: false, msg: 'è¯·éæ©ç»ç»'});\r\n        }\r\n        let _config = null;\r\n        const selectedSettings = this.getCurrentSchemeSettings(gridId);\r\n        if (selectedSettings) {\r\n            _config = selectedSettings;\r\n        } else {\r\n            // æ¶éå½åæ¹æ¡éç½®æ°æ®\r\n            _config = this.buildSubmitData(gridId);\r\n        }\r\n\r\n        const newId = this.idService.guid();\r\n        let isDefault = data.isDefault;\r\n        if (isDefault) {\r\n            if (data.type !== 'private') {\r\n                isDefault = false;\r\n            }\r\n        }\r\n\r\n        if (data.name && typeof data.name === 'object') {\r\n            data.name = JSON.stringify(data.name);\r\n        }\r\n\r\n        const scheme: DatagridSchemeModel = {\r\n            id: newId,\r\n            belongId: '',\r\n            code: '',\r\n            name: data.name,\r\n            type: data.type,\r\n            isDefault: isDefault,\r\n            isSystem: false,\r\n            extendId: 'datagrid-settings-scheme',\r\n            extendInfo: this.buildOrgAndSchemeRelations(newId, data.orgids),\r\n            queryConditionString: _config? JSON.stringify(_config): '',\r\n        };\r\n\r\n        return this.schemeService.saveScheme(scheme, gridId).pipe(\r\n            map(() => {\r\n                return scheme;\r\n            })\r\n        );\r\n    }\r\n\r\n    setSchemeList(schemeList: DatagridSchemeModel[], gridId: string) {\r\n        this.schemeService.update({list: schemeList}, gridId);\r\n    }\r\n\r\n    private buildOrgAndSchemeRelations(schemeId: string, orgIds: string[]) {\r\n        if (!orgIds || !orgIds.length) {\r\n            return  [];\r\n        }\r\n        return orgIds.map(n => {\r\n            return {\r\n                id: this.idService.guid(),\r\n                orgId: n,\r\n                relatedId: schemeId\r\n            }\r\n        });\r\n    }\r\n\r\n    private getCurrentSchemeSettings(gridId: string): SettingModel {\r\n        const activeScheme = this.getActiveSchemeItem(gridId) as DatagridSchemeModel;\r\n        if (activeScheme && activeScheme.queryConditionString) {\r\n            return JSON.parse(activeScheme.queryConditionString);\r\n        }\r\n        return null;\r\n    }\r\n}\r\n","import { OnInit, Component, Input, ViewChild, Injector, EventEmitter, Output, ChangeDetectorRef } from '@angular/core';\r\nimport { MultiSelectComponent } from '@farris/ui-multi-select';\r\n\r\n@Component({\r\n    selector: 'sort-setting',\r\n    templateUrl: './datagrid-sort-setting.component.html'\r\n})\r\nexport class DatagridSortSettingComponent implements OnInit {\r\n\r\n    @Input() idField = 'field';\r\n    @Input() valueField = 'field';\r\n    @Input() textField = 'title';\r\n    @Input() selectedIds = [];\r\n\r\n    @Input() treeData = [];\r\n    @ViewChild('ms') ms: MultiSelectComponent;\r\n\r\n    @Output() sortInfoChange = new EventEmitter();\r\n\r\n    constructor(private injector: Injector, private cd: ChangeDetectorRef) {}\r\n\r\n\r\n    ngOnInit() {}\r\n\r\n    setFieldSortOrder($event: MouseEvent, data: any, order: string) {\r\n        $event.stopPropagation();\r\n        data.sortable = true;\r\n        data.order = order;\r\n\r\n        if (!order) {\r\n            this.ms.moveToLeft(data);\r\n        }\r\n\r\n        this.cd.detectChanges();\r\n        this.onSelectionsChange(null);\r\n        return false;\r\n    }\r\n\r\n    getSortInfo() {\r\n        if (this.ms.selections) {\r\n            const names = [];\r\n            const orders = [];\r\n            this.ms.selections.forEach(col => {\r\n                col.order = col.order || 'asc';\r\n                names.push(col.field);\r\n                orders.push(col.order);\r\n            });\r\n\r\n            return { sortName: names, sortOrder: orders };\r\n        }\r\n        return '';\r\n    }\r\n\r\n    onSelectionsChange($event) {\r\n        const si = this.getSortInfo();\r\n        this.sortInfoChange.emit(si);\r\n    }\r\n\r\n    onBeforeMove($event) {\r\n        const items: any = $event.items as any;\r\n        if ($event.target.indexOf('rightAll') > -1) {\r\n            for (const id in items) {\r\n                if ($event.items[id]) {\r\n                    $event.items[id].order = 'asc';\r\n                }\r\n            }\r\n        } else {\r\n            if ($event.target === 'right') {\r\n                for (const id in items) {\r\n                    if ($event.items[id]) {\r\n                        $event.items[id].order = 'asc';\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n","import { OnInit, Component, Input, ViewChild, Injector, EventEmitter,\r\n    Output, ChangeDetectorRef, OnChanges, SimpleChanges } from '@angular/core';\r\nimport { MultiSelectComponent } from '@farris/ui-multi-select';\r\n@Component({\r\n    selector: 'view-columns',\r\n    templateUrl: './datagrid-view-columns.component.html',\r\n})\r\nexport class DatagridViewColumnsComponent implements OnInit, OnChanges {\r\n    @Input() idField = 'field';\r\n    @Input() valueField = 'field';\r\n    @Input() textField = 'title';\r\n\r\n\r\n    private _selectedIds = [];\r\n    get selectedIds() {\r\n        return this._selectedIds;\r\n    }\r\n    @Input() set selectedIds(vals) {\r\n        this._selectedIds = vals;\r\n        this.selectedIdsChange.emit(vals);\r\n    }\r\n\r\n    @Input() treeData = [];\r\n    @ViewChild('ms') ms: MultiSelectComponent;\r\n\r\n    @Output() selectedIdsChange = new EventEmitter();\r\n\r\n    constructor(private injector: Injector, private cd: ChangeDetectorRef) {}\r\n\r\n\r\n    ngOnInit() {}\r\n\r\n    ngOnChanges(changes: SimpleChanges) {\r\n\r\n    }\r\n\r\n    onBeforeMove($event) {\r\n\r\n    }\r\n\r\n    hiddenColumn($event: MouseEvent, column: any) {\r\n        $event.stopPropagation();\r\n        this.ms.moveToLeft(column);\r\n    }\r\n}\r\n","import { LocaleService } from '@farris/ui-locale';\r\nimport { Component, Input, OnInit, Injector, ViewChild, Output, EventEmitter, ChangeDetectorRef, OnChanges, SimpleChanges, ViewEncapsulation } from '@angular/core';\r\nimport { NgForm } from '@angular/forms';\r\nimport { DatagridSettingsComponent } from '../datagrid-settings.component';\r\n\r\n@Component({\r\n    selector: 'column-format-setting',\r\n    templateUrl: './column-format-setting.component.html',\r\n    encapsulation: ViewEncapsulation.None\r\n})\r\nexport class ColumnFormatSettingComponent implements OnInit, OnChanges {\r\n    @Input() columns = [];\r\n    @Input() fields = [];\r\n\r\n    @ViewChild('colformatform') colForm: NgForm;\r\n\r\n    @Output() formatChange = new EventEmitter();\r\n    @Output() fieldsChange = new EventEmitter();\r\n\r\n    allCols = [];\r\n\r\n    /** format Data */\r\n    formatData = [];\r\n    columnType = 'all';\r\n    activeField = null;\r\n    showGridFooter = false;\r\n\r\n    searchItems = [];\r\n    alignItems = [];\r\n    summaryItems = [];\r\n    summaryItems2 = [];\r\n    localeSer: LocaleService;\r\n    isEn = false;\r\n    constructor(private injector: Injector, public gridSettingComponentRef: DatagridSettingsComponent, private cd: ChangeDetectorRef) {\r\n        this.showGridFooter = this.gridSettingComponentRef.gridInstance.showFooter &&\r\n                                !this.gridSettingComponentRef.gridInstance.footerTemplate;\r\n        this.localeSer = this.injector.get(LocaleService, null);\r\n    }\r\n\r\n    ngOnChanges(changes: SimpleChanges) {\r\n        if (changes.columns && !changes.columns.isFirstChange()) {\r\n            this.setFormatData();\r\n            this.allCols = this.columns[0];\r\n            this.activeField = this.columns[0][0];\r\n            this.checkColumnOptions();\r\n        }\r\n    }\r\n\r\n    ngOnInit(): void {\r\n\r\n        this.isEn = this.localeSer.localeId === 'en';\r\n\r\n        this.initData();\r\n\r\n        if (this.colForm) {\r\n            this.colForm.valueChanges.subscribe(v => {\r\n                if (!this.colForm.pristine) {\r\n                    this.formatChange.emit(this.formatData);\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    private setFormatData() {\r\n        this.formatData = this.fields.map(n => {\r\n            return this.columns[0].find(col => col.field === n);\r\n        });\r\n    }\r\n\r\n    private initData() {\r\n\r\n        this.alignItems = this.gridSettingComponentRef.alignItems;\r\n        this.searchItems = this.gridSettingComponentRef.searchItems;\r\n        this.summaryItems = this.gridSettingComponentRef.summaryItems;\r\n        this.summaryItems2 = this.gridSettingComponentRef.summaryItems2;\r\n\r\n\r\n        this.setFormatData();\r\n        this.allCols = this.columns[0];\r\n        this.activeField = this.columns[0][0];\r\n        this.checkColumnOptions();\r\n    }\r\n\r\n    private checkColumnOptions() {\r\n        if (this.activeField) {\r\n            if (this.activeField.allowGrouping === undefined) {\r\n                this.activeField.allowGrouping = true;\r\n            }\r\n\r\n            if (this.activeField.groupFooter === undefined) {\r\n                this.activeField.groupFooter = { options: {calculationType: -1} };\r\n            } else {\r\n                this.activeField.groupFooter.options = this.activeField.groupFooter.options || {calculationType: -1};\r\n                if (this.activeField.groupFooter.options.calculationType === undefined) {\r\n                    this.activeField.groupFooter.options.calculationType = -1;\r\n                }\r\n            }\r\n\r\n            if (this.activeField.footer === undefined) {\r\n                this.activeField.footer =  { options: {calculationType: -1} };\r\n            } else {\r\n                this.activeField.footer.options = this.activeField.footer.options || {calculationType: -1};\r\n                if (this.activeField.footer.options.calculationType === undefined) {\r\n                    this.activeField.footer.options.calculationType = -1;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    // æ ¹æ®åçç±»åè¿è¡ç­éè¿æ»¤ï¼\r\n    // all ææå\r\n    // visible å¯è§å\r\n    // hidden éèå\r\n    // group åç»å\r\n    filterColumns(ct: string, searchWords = '') {\r\n        let cols = [];\r\n        switch (ct) {\r\n            case 'visible':\r\n                cols = this.formatData;\r\n                break;\r\n            case 'hidden':\r\n                cols = this.columns[0].filter(n => this.fields.indexOf(n.field) === -1);\r\n                break;\r\n            case 'all':\r\n            default:\r\n                cols = this.columns[0];\r\n                break;\r\n        }\r\n\r\n        if (searchWords) {\r\n            cols = cols.filter(c => c.title.toLowerCase().indexOf(searchWords) > -1);\r\n        }\r\n\r\n        this.allCols = cols;\r\n    }\r\n\r\n    onFieldClick(col, $event) {\r\n        this.activeField = col;\r\n        this.checkColumnOptions();\r\n    }\r\n\r\n\r\n    private onFieldsChanged() {\r\n        this.setFormatData();\r\n        this.fieldsChange.emit(this.fields);\r\n    }\r\n\r\n    onDblClick($event, col) {\r\n        // console.log('æ¾ç¤ºä¸éèåæ¢äºä»¶', col);\r\n        this.onCheckboxClick($event, col);\r\n    }\r\n\r\n    onCheckboxClick($event, col) {\r\n        // console.log('æ¾ç¤ºä¸éèåæ¢äºä»¶', col);\r\n        $event.stopPropagation();\r\n        const index = this.fields.indexOf(col.field);\r\n        if (index === -1) {\r\n            this.fields.push(col.field);\r\n        } else {\r\n            this.fields.splice(index, 1);\r\n        }\r\n\r\n        this.columns[0].forEach(f => {\r\n            f.visible = this.fields.indexOf(f.field) > -1;\r\n        });\r\n\r\n        this.fields = this.columns[0].filter(n => n.visible).map(n => n.field);\r\n\r\n        this.onFieldsChanged();\r\n    }\r\n\r\n    searchColumn($event, ct) {\r\n        const txt = $event.target.value;\r\n        this.filterColumns(ct, txt);\r\n    }\r\n\r\n    onFieldDrop(fieldInfo, ct, txt, ulElRef: any) {\r\n       // console.log('drop', fieldInfo);\r\n        const { removedIndex, addedIndex } = fieldInfo;\r\n\r\n        const moveItem = this.allCols[removedIndex];\r\n        const targetItem = this.allCols[addedIndex];\r\n\r\n        const moveItemIndex = this.columns[0].findIndex(n => n.field === moveItem.field);\r\n        const targetItemIndex = this.columns[0].findIndex(n => n.field === targetItem.field);\r\n\r\n        const removedItem = this.columns[0].splice(moveItemIndex, 1);\r\n        this.columns[0].splice(targetItemIndex, 0, ...removedItem);\r\n\r\n        this.fields = this.columns[0].filter(n => n.visible).map(n => n.field);\r\n        this.onFieldsChanged();\r\n\r\n        this.filterColumns(ct, txt);\r\n\r\n        // if (ulElRef) {\r\n        //     ulElRef.querySelectorAll('li .field-drag-handle').forEach(el => {\r\n        //         el.style.cursor = 'grab';\r\n        //     });\r\n        // }\r\n    }\r\n\r\n    /**\r\n     * 0: 1ä¸ªä¹æ²¡æéä¸­ï¼ 1: å¨é¨éä¸­ï¼ 2: æéä¸­çä¹ææ²¡éä¸­ç\r\n     */\r\n    private getCheckAllState() {\r\n        if (this.fields.length === 0) {\r\n            return 0;\r\n        } else {\r\n            if (this.fields.length === this.columns[0].length) {\r\n                return 1;\r\n            }\r\n            return 2;\r\n        }\r\n    }\r\n\r\n    onCheckAllClick($event, ct, txt) {\r\n        const state = this.getCheckAllState();\r\n        if (state === 0 || state === 2) {\r\n            // æ§è¡å¨é\r\n            this.columns[0].forEach(n => n.visible = true);\r\n            this.fields = this.columns[0].map(n => n.field);\r\n        } else {\r\n            // åæ¶å¨é\r\n            this.columns[0].forEach(n => n.visible = false);\r\n            this.fields = [];\r\n        }\r\n\r\n        this.onFieldsChanged();\r\n        this.filterColumns(ct, txt);\r\n    }\r\n}\r\n","import { Component, OnInit, Input, Injector, ChangeDetectorRef, ElementRef, ViewChild, EventEmitter, Output, OnChanges, SimpleChanges } from '@angular/core';\r\nimport { NgForm } from '@angular/forms';\r\nimport { DatagridSettingsComponent } from '../datagrid-settings.component';\r\n\r\n@Component({\r\n    selector: 'column-group-setting',\r\n    templateUrl: './column-group.component.html',\r\n    styles: [\r\n        `\r\n        .column-group-setting{ height: 100%; background-color: #ffffff; padding: 0 10px 10px 10px}\r\n        .smooth-dnd-ghost.group-field {\r\n            z-index: 999999999 !important;\r\n        }\r\n        .active {\r\n            background-color: rgb(231 241 255);\r\n            color: rgb(0 0 0);\r\n        }\r\n        .column-group-setting .group-field {\r\n            float: left;max-width: 200px;margin-right: 10px;\r\n            width: auto; padding: 5px;padding-right: 30px;\r\n            border-radius: 20px;padding-left: 10px; cursor:move\r\n        }\r\n        .group-field .f-icon { position: absolute;right: 2px;top: 7px; }\r\n        .btn-add-groupfield{float: left;width: 32px;padding: 0px;padding-top: 3px; border-radius: 20px;}\r\n        .group-field-panel{\r\n            height: 260px; border-radius: 5px; z-index: 3;position: absolute;\r\n            background: rgb(255 255 255); box-shadow: 1px 1px 4px rgb(156 155 155 / 75%);\r\n            overflow: hidden;\r\n            overflow-y: auto;\r\n        }\r\n        .group-field-panel ul {\r\n            display: inline-block;margin: 20px;margin-top: 5px;\r\n        }\r\n        .group-field-panel li {\r\n            float: left; cursor: pointer;max-width: 200px;margin-right: 10px;width: auto;\r\n            padding: 10px; min-width: 80px; margin-top: 15px; text-align: center;\r\n        }\r\n        .format-setting-column {\r\n            background: rgba(247,248,251,0.6);\r\n            padding: 7px 10px;\r\n            margin-bottom: 5px;\r\n            border: 1px solid rgba(233,236,243,0.45);\r\n            border-radius: 5px;\r\n        }\r\n        .format-setting-column.active {\r\n            border: 1px solid rgb(42 135 255);\r\n            background: rgb(239 247 255);\r\n            border-top: 1px solid rgb(42 135 255)!important;\r\n            border-bottom: 1px solid rgb(42 135 255)!important;\r\n        }\r\n\r\n        `\r\n    ]\r\n})\r\nexport class ColumnGroupSettingComponent implements OnInit, OnChanges {\r\n    @Input() columns;\r\n    @Input() fields = [];\r\n    @Input() formatColumns = [];\r\n\r\n    @Input() groupFields = [];\r\n\r\n    @Output() groupFieldsChange = new EventEmitter();\r\n    @Output() formatColumnsChange = new EventEmitter();\r\n\r\n    @ViewChild('groupingSetting') groupingSettingEl: ElementRef;\r\n    @ViewChild('selectcolumnspanel') selectcolumnspanel: ElementRef;\r\n    @ViewChild('groupSumform') colForm: NgForm;\r\n\r\n    groupColumns = [];\r\n    allowGroupColumns = [];\r\n    activeCalculationCol = null;\r\n\r\n    showSelectColumnsPanel = false;\r\n    summaryItems = [];\r\n    summaryItems2 = [];\r\n    constructor(private injector: Injector, public gridSettingComponentRef: DatagridSettingsComponent, private cd: ChangeDetectorRef) { }\r\n\r\n    ngOnInit(): void {\r\n\r\n        this.summaryItems = this.gridSettingComponentRef.summaryItems;\r\n        this.summaryItems2 = this.gridSettingComponentRef.summaryItems2;\r\n\r\n        this.setGroupColumns();\r\n        this.registerEventHandle();\r\n        this.initCalculationColumns();\r\n\r\n        if (this.colForm) {\r\n            this.colForm.valueChanges.subscribe(v => {\r\n                if (!this.colForm.pristine) {\r\n                    this.formatColumnsChange.emit(this.formatColumns);\r\n                }\r\n            });\r\n        }\r\n        \r\n        this.formatColumns.forEach(n => {\r\n            this.checkColumnOptions(n);\r\n        });\r\n    }\r\n\r\n    ngOnChanges(changes: SimpleChanges) {\r\n        if (changes.formatColumns && !changes.formatColumns.isFirstChange()) {\r\n            this.formatColumns.forEach(n => {\r\n                this.checkColumnOptions(n);\r\n            });\r\n            this.setGroupColumns();\r\n            this.initCalculationColumns();\r\n        }\r\n    }\r\n\r\n    private initCalculationColumns() {\r\n        if (this.formatColumns) {\r\n            this.activeCalculationCol = this.formatColumns[0];\r\n        }\r\n    }\r\n\r\n    private registerEventHandle() {\r\n        this.groupingSettingEl.nativeElement.addEventListener('click', (e) => {\r\n            if (e.target  !== this.selectcolumnspanel.nativeElement) {\r\n                this.showSelectColumnsPanel = false;\r\n            }\r\n        }, false);\r\n    }\r\n\r\n    private setGroupColumns() {\r\n        if (this.groupFields && this.groupFields.length) {\r\n            this.groupColumns = this.groupFields.map( f => {\r\n                return this.columns[0].find(col => col.field === f);\r\n            }).filter(n => n);\r\n        } else {\r\n            this.groupColumns = [];\r\n        }\r\n        this.onGroupFieldsChange();\r\n    }\r\n\r\n    private getAllowGroupingColumns() {\r\n        return this.columns[0].filter(n => n.allowGrouping || n.allowGrouping === undefined);\r\n    }\r\n\r\n    private onGroupFieldsChange() {\r\n        this.groupFieldsChange.emit(this.groupFields);\r\n    }\r\n\r\n    private checkColumnOptions(col) {\r\n        if (col) {\r\n\r\n            if (col.groupFooter === undefined) {\r\n                col.groupFooter = { options: {calculationType: -1} };\r\n            } else {\r\n                col.groupFooter.options = col.groupFooter.options || {calculationType: -1};\r\n                if (col.groupFooter.options.calculationType === undefined) {\r\n                    col.groupFooter.options.calculationType = -1;\r\n                }\r\n            }\r\n\r\n            // if (this.activeField.footer === undefined) {\r\n            //     this.activeField.footer =  { options: {calculationType: -1} };\r\n            // } else {\r\n            //     this.activeField.footer.options = this.activeField.footer.options || {calculationType: -1};\r\n            //     if (this.activeField.footer.options.calculationType === undefined) {\r\n            //         this.activeField.footer.options.calculationType = -1;\r\n            //     }\r\n            // }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * æ¾ç¤ºæéèå­æ®µéåé¢æ¿\r\n     */\r\n    toggleGroupingColumnPanel($event) {\r\n        $event.stopPropagation();\r\n        this.showSelectColumnsPanel = !this.showSelectColumnsPanel;\r\n        this.allowGroupColumns = this.getAllowGroupingColumns();\r\n    }\r\n\r\n    /** æ·»å åç»å­æ®µ */\r\n    addGroupColumn($event, col) {\r\n        $event.stopPropagation();\r\n        if (this.groupFields.indexOf(col.field) === -1) {\r\n            this.groupColumns = [...this.groupColumns, col];\r\n            this.groupFields = this.groupColumns.map(n => n.field);\r\n            this.onGroupFieldsChange();\r\n            this.showSelectColumnsPanel = false;\r\n        }\r\n    }\r\n\r\n    /** ç§»é¤åç»å­æ®µ */\r\n    onRemoveGroupingField($event, col) {\r\n        $event.stopPropagation();\r\n        this.groupFields = this.groupFields.filter(n => n !== col.field);\r\n        this.setGroupColumns();\r\n    }\r\n\r\n    /** æå¨åç»å­æ®µè¿è¡æåº */\r\n    onGroupingFieldDropped($event) {\r\n        console.log('grouping field droped.', $event);\r\n        const { removedIndex, addedIndex } = $event;\r\n\r\n        const removedItem = this.groupFields.splice(removedIndex, 1);\r\n        this.groupFields.splice(addedIndex, 0, ...removedItem);\r\n        this.setGroupColumns();\r\n    }\r\n\r\n    onFieldClick($event, col) {\r\n        this.activeCalculationCol = col;\r\n    }\r\n}\r\n","\r\nimport { Directive, NgZone, Injector, Renderer2, ElementRef, AfterViewInit, Input,\r\n        OnChanges, SimpleChanges, Output, EventEmitter, OnDestroy } from '@angular/core';\r\nimport { dropHandlers, smoothDnD as SmoothDndForVisible, DropResult, ContainerOptions, constants } from '@farris/smooth-dnd';\r\n\r\n\r\nconst { wrapperClass, animationClass } = constants;\r\nSmoothDndForVisible.dropHandler = dropHandlers.reactDropHandler().handler;\r\nSmoothDndForVisible.wrapChild = false;\r\n\r\nexport interface DragStartEndInfo {\r\n    isSource: boolean;\r\n    payload: any;\r\n    willAcceptDrop: boolean;\r\n}\r\n\r\n@Directive({\r\n    selector: '[column-visible-drag]',\r\n})\r\nexport class ColumnVisibleDragDirective implements AfterViewInit, OnDestroy {\r\n    private container: any;\r\n    @Output() drop = new EventEmitter();\r\n    @Input() options: ContainerOptions = {\r\n        behaviour: 'move',\r\n        dragHandleSelector: '.field-drag-handle',\r\n        dropPlaceholder: {\r\n            className: 'drop-group-field',\r\n        },\r\n        getGhostParent: () => {\r\n            return document.body;\r\n        },\r\n        getChildPayload: this.getChildPayload.bind(this),\r\n        shouldAcceptDrop: (sourceContainerOptions, payload) => {\r\n            return true;\r\n        },\r\n        onDropReady: (dropResult: DropResult) => {\r\n            this.ngzone.run(() => {\r\n                this.onDropReady(dropResult);\r\n            });\r\n        },\r\n        onDrop: (dropResult: DropResult) => {\r\n            this.ngzone.run(() => {\r\n                this.drop.emit(dropResult);\r\n            });\r\n        },\r\n        onDragEnter: () => {\r\n            this.ngzone.run(() => {\r\n                this.onDragEnter();\r\n            });\r\n        },\r\n        onDragStart: (info: DragStartEndInfo) => {\r\n            this.ngzone.run(() => {\r\n                this.onDragStart(info);\r\n            });\r\n        },\r\n        onDragEnd: (info: DragStartEndInfo) => {\r\n            this.ngzone.run(() => {\r\n                this.onDragEnd(info);\r\n            });\r\n        }\r\n    };\r\n\r\n    constructor(private ngzone: NgZone, private injector: Injector, private render: Renderer2, private el: ElementRef) { }\r\n    ngAfterViewInit() {\r\n        this.initDnD();\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        this.disposeDnd();\r\n    }\r\n\r\n    private disposeDnd() {\r\n        if (this.container) {\r\n            this.container.dispose();\r\n            this.container = null;\r\n        }\r\n    }\r\n\r\n    private initDnD() {\r\n        this.disposeDnd();\r\n        this.container = SmoothDndForVisible(\r\n            this.el.nativeElement,\r\n            this.options\r\n        );\r\n    }\r\n\r\n    private getChildPayload(index) {\r\n        return index;\r\n    }\r\n\r\n    private onDropReady(dropResult) {\r\n        // console.log('DROP READY', dropResult);\r\n    }\r\n\r\n    private onDragStart(info) {\r\n        console.log('DRAG START', info);\r\n    }\r\n\r\n    private onDragEnd(info) {\r\n        // console.log('DRAG END', info);\r\n    }\r\n\r\n\r\n    private onDragEnter() {\r\n        // console.log('DRAG ENTER');\r\n    }\r\n\r\n}\r\n","import { Directive, NgZone, Injector, Renderer2, ElementRef, AfterViewInit, Input,  Output, EventEmitter, OnDestroy } from '@angular/core';\r\nimport { dropHandlers, smoothDnD as SmoothDndForGroupingField, DropResult, ContainerOptions, constants } from '@farris/smooth-dnd';\r\n\r\nSmoothDndForGroupingField.dropHandler = dropHandlers.reactDropHandler().handler;\r\nSmoothDndForGroupingField.wrapChild = false;\r\n\r\n@Directive({\r\n    selector: '[column-group-drag]',\r\n})\r\nexport class ColumnGroupDragDirective implements AfterViewInit, OnDestroy {\r\n    private container: any;\r\n    @Output() drop = new EventEmitter();\r\n    @Input() options: ContainerOptions = {\r\n        orientation: 'horizontal',\r\n        behaviour: 'move',\r\n        dropPlaceholder: {\r\n            className: 'drop-group-field',\r\n        },\r\n        getGhostParent: () => {\r\n            return document.body;\r\n        },\r\n        getChildPayload: this.getChildPayload.bind(this),\r\n        shouldAcceptDrop: (sourceContainerOptions, payload) => {\r\n            return true;\r\n        },\r\n        onDropReady: (dropResult: DropResult) => {\r\n            this.ngzone.run(() => {\r\n                this.onDropReady(dropResult);\r\n            });\r\n        },\r\n        onDrop: (dropResult: DropResult) => {\r\n            this.ngzone.run(() => {\r\n                this.drop.emit(dropResult);\r\n            });\r\n        },\r\n        onDragEnter: () => {\r\n            this.ngzone.run(() => {\r\n                this.onDragEnter();\r\n            });\r\n        },\r\n        onDragStart: (info) => {\r\n            this.ngzone.run(() => {\r\n                this.onDragStart(info);\r\n            });\r\n        },\r\n        onDragEnd: (info) => {\r\n            this.ngzone.run(() => {\r\n                this.onDragEnd(info);\r\n            });\r\n        }\r\n    };\r\n\r\n    constructor(private ngzone: NgZone, private injector: Injector, private render: Renderer2, private el: ElementRef) { }\r\n    ngAfterViewInit() {\r\n        this.initDnD();\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        this.disposeDnd();\r\n    }\r\n\r\n    private disposeDnd() {\r\n        if (this.container) {\r\n            this.container.dispose();\r\n            this.container = null;\r\n        }\r\n    }\r\n\r\n\r\n    private initDnD() {\r\n        this.disposeDnd();\r\n        this.container = SmoothDndForGroupingField(\r\n            this.el.nativeElement,\r\n            this.options\r\n        );\r\n    }\r\n\r\n    private getChildPayload(index) {\r\n        return index;\r\n    }\r\n\r\n    private onDropReady(dropResult) {\r\n        // console.log('DROP READY', dropResult);\r\n    }\r\n\r\n    private onDragStart(info) {\r\n        // console.log('DRAG START', info);\r\n    }\r\n\r\n    private onDragEnd(info) {\r\n        // console.log('DRAG END', info);\r\n    }\r\n\r\n\r\n    private onDragEnter() {\r\n        // console.log('DRAG ENTER');\r\n    }\r\n}\r\n","\r\nimport { FormsModule } from '@angular/forms';\r\nimport { CommonModule } from '@angular/common';\r\nimport { NgModule, ModuleWithProviders } from '@angular/core';\r\nimport { ModalModule } from '@farris/ui-modal';\r\nimport { GRID_SETTINGS_SERVICE, DatagridModule} from '@farris/ui-datagrid';\r\nimport { MultiSelectModule } from '@farris/ui-multi-select';\r\nimport { FarrisCommonModule } from '@farris/ui-common';\r\nimport { LocaleModule } from '@farris/ui-locale';\r\nimport { MessagerModule } from '@farris/ui-messager';\r\nimport { ComboListModule } from '@farris/ui-combo-list';\r\nimport { SwitchModule } from '@farris/ui-switch';\r\nimport { FarrisTooltipModule } from '@farris/ui-tooltip';\r\nimport { NotifyModule } from '@farris/ui-notify';\r\nimport { OrganizationSelectorModule } from '@farris/ui-organization-selector';\r\n\r\nimport { DatagridSettingsComponent } from './datagrid-settings.component';\r\n\r\nimport { DatagridSettingsService } from './datagrid-settings.service';\r\nimport { DatagridSortSettingComponent } from './datagrid-sort-setting.component';\r\nimport { DatagridViewColumnsComponent } from './datagrid-view-columns.component';\r\nimport { ColumnFormatSettingComponent } from './column-format-setting/column-format-setting.component';\r\nimport { ColumnGroupSettingComponent } from './column-group/column-group.component';\r\nimport { ColumnVisibleDragDirective } from './column-format-setting/column-visible-drag.directive';\r\nimport { ColumnGroupDragDirective } from './column-group/column-group-drag.directive';\r\nimport { SimpleColumnsComponent } from './simple-mode/simple-columns.component';\r\nimport { NewSchemeComponent } from './scheme/newscheme.component';\r\nimport { SchemeListComponent } from './scheme/scheme-list.component';\r\nimport { LanguageTextboxModule } from '@farris/ui-language-textbox';\r\n@NgModule({\r\n    declarations: [\r\n        DatagridSettingsComponent,\r\n        DatagridSortSettingComponent,\r\n        DatagridViewColumnsComponent,\r\n        ColumnFormatSettingComponent,\r\n        ColumnGroupSettingComponent,\r\n        ColumnVisibleDragDirective,\r\n        ColumnGroupDragDirective,\r\n        SimpleColumnsComponent,\r\n        NewSchemeComponent,\r\n        SchemeListComponent\r\n    ],\r\n    imports: [\r\n        CommonModule,\r\n        FormsModule,\r\n        MultiSelectModule,\r\n        ComboListModule,\r\n        DatagridModule,\r\n        FarrisCommonModule.forRoot(),\r\n        MessagerModule.forRoot(),\r\n        LocaleModule.forRoot(),\r\n        ModalModule.forRoot(),\r\n        SwitchModule,\r\n        FarrisTooltipModule,\r\n        NotifyModule.forRoot(),\r\n        OrganizationSelectorModule,\r\n        LanguageTextboxModule\r\n    ],\r\n    entryComponents: [\r\n        DatagridSettingsComponent,\r\n        SimpleColumnsComponent,\r\n        NewSchemeComponent,\r\n        SchemeListComponent\r\n    ],\r\n    exports: [\r\n        DatagridSettingsComponent,\r\n        SimpleColumnsComponent,\r\n        NewSchemeComponent,\r\n        SchemeListComponent\r\n    ]\r\n})\r\nexport class DatagridSettingsModule {\r\n    static forRoot(apiUri = ''): ModuleWithProviders {\r\n        return {\r\n            ngModule: DatagridSettingsModule,\r\n            providers: [\r\n                { provide: GRID_SETTINGS_SERVICE, useClass: DatagridSettingsService }\r\n            ]\r\n        };\r\n    }\r\n}\r\n"]}