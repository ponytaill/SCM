/**
 * 使用方法：
 * [comob-lookup-data-mapping]="{ id: 'user.userId', name: 'user.userName' }"
 * key 为帮助上的字段， value 为 表单中的字段名
 * 帮助上的同一个字段可以映射到表单中的多个字段中，{ ... id: 'user.userid, user.addusid'}
 * 多字段以逗号隔开
 *
 */
import { Directive, Optional, Self, Input } from '@angular/core';
import { BindingObject, ViewModel } from '@farris/devkit';
import { ComboLookupComponent } from '@farris/ui-combo-lookup';
import { DataMapping } from './data-mapping';
export class ComboLookupDataMappingDirective extends DataMapping {
    constructor(vm, lookup) {
        super();
        this.vm = vm;
        this.lookup = lookup;
        this.target = null;
        if (this.lookup) {
            this.lookup.useFormDataMapping = true;
        }
    }
    ngOnInit() {
        // 值变化，亦通过该事件触发任意输入清空事件
        this.lookup.valueChange.subscribe((result) => {
            if (!result['nosearch']) {
                // 值变化
                const data = result.selections && result.selections.length > 0 ? result.selections : null;
                this.onValueChange(data);
            }
            else {
                // 任意输入清空映射字段
                this.onClearMapping();
            }
        });
        // 清空事件
        this.lookup.clear.subscribe(() => {
            const _mapfields = this.mapfields || this.lookup.mapFields;
            this.mappingData(null, _mapfields);
        });
    }
    onClearMapping() {
        const mapfields = Object.assign({}, (this.mapfields || this.lookup.mapFields || {}));
        const lookupTextField = this.lookup.textField;
        const data = {};
        const controlName = this.lookup.ngControl && this.lookup.ngControl.name;
        if (controlName && this.vm) {
            const textFieldMapping = mapfields[lookupTextField];
            const ngFormControl = this.vm && this.vm.form && this.vm.form.ngFormControls && this.vm.form.ngFormControls[controlName];
            const binding = ngFormControl && ngFormControl.binding;
            if (textFieldMapping && binding) {
                const targetField = textFieldMapping.split(',').filter(item => item !== binding).join(',');
                if (targetField) {
                    mapfields[lookupTextField] = targetField;
                }
                else {
                    delete mapfields[lookupTextField];
                }
            }
        }
        // this.setValue(data, lookupTextField.split('.'), value);
        Object.keys(mapfields).forEach(field => {
            this.setValue(data, field.split('.'), '');
        });
        this.mappingData(data, mapfields, true);
    }
    onValueChange(data) {
        const _mapfields = this.mapfields || this.lookup.mapFields;
        this.mappingData(data, _mapfields);
    }
}
ComboLookupDataMappingDirective.decorators = [
    { type: Directive, args: [{ selector: '[combo-lookup-data-mapping]' },] }
];
/** @nocollapse */
ComboLookupDataMappingDirective.ctorParameters = () => [
    { type: ViewModel, decorators: [{ type: Optional }] },
    { type: ComboLookupComponent, decorators: [{ type: Optional }, { type: Self }] }
];
ComboLookupDataMappingDirective.propDecorators = {
    mapfields: [{ type: Input, args: ['combo-lookup-data-mapping',] }],
    target: [{ type: Input, args: ['target',] }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tYm8tbG9va3VwLWRhdGEtbWFwcGluZy5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZmFycmlzL2tlbmRvLWJpbmRpbmcvIiwic291cmNlcyI6WyJsaWIvZGlyZWN0aXZlcy9jb21iby1sb29rdXAtZGF0YS1tYXBwaW5nLmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQTs7Ozs7OztHQU9HO0FBRUgsT0FBTyxFQUFFLFNBQVMsRUFBVSxRQUFRLEVBQUUsSUFBSSxFQUFFLEtBQUssRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUN6RSxPQUFPLEVBQUUsYUFBYSxFQUFpQixTQUFTLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUV6RSxPQUFPLEVBQUUsb0JBQW9CLEVBQUUsTUFBTSx5QkFBeUIsQ0FBQztBQUMvRCxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFJN0MsTUFBTSxPQUFPLCtCQUFnQyxTQUFRLFdBQVc7SUFLOUQsWUFBK0IsRUFBYSxFQUE4QixNQUE0QjtRQUNwRyxLQUFLLEVBQUUsQ0FBQztRQURxQixPQUFFLEdBQUYsRUFBRSxDQUFXO1FBQThCLFdBQU0sR0FBTixNQUFNLENBQXNCO1FBRnJGLFdBQU0sR0FBa0IsSUFBSSxDQUFDO1FBSTVDLElBQUksSUFBSSxDQUFDLE1BQU0sRUFBRTtZQUNmLElBQUksQ0FBQyxNQUFNLENBQUMsa0JBQWtCLEdBQUcsSUFBSSxDQUFDO1NBQ3ZDO0lBQ0gsQ0FBQztJQUVELFFBQVE7UUFDTix1QkFBdUI7UUFDdkIsSUFBSSxDQUFDLE1BQU0sQ0FBQyxXQUFXLENBQUMsU0FBUyxDQUFDLENBQUMsTUFBb0IsRUFBRSxFQUFFO1lBQ3pELElBQUksQ0FBQyxNQUFNLENBQUMsVUFBVSxDQUFDLEVBQUU7Z0JBQ3ZCLE1BQU07Z0JBQ04sTUFBTSxJQUFJLEdBQUcsTUFBTSxDQUFDLFVBQVUsSUFBSSxNQUFNLENBQUMsVUFBVSxDQUFDLE1BQU0sR0FBRyxDQUFDLENB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LHVCQVVvQixRQUFRLFlBQUksSUFBSTs7O3dCQUg5RCxLQUFLLFNBQUMsMkJBQTJCO3FCQUNqQyxLQUFLLFNBQUMsUUFBUSIsInNvdXJjZXNDb250ZW50IjpbIlxyXG4vKipcclxuICog5L2/55So5pa55rOV77yaXHJcbiAqIFtjb21vYi1sb29rdXAtZGF0YS1tYXBwaW5nXT1cInsgaWQ6ICd1c2VyLnVzZXJJZCcsIG5hbWU6ICd1c2VyLnVzZXJOYW1lJyB9XCJcclxuICoga2V5IOS4uuW4ruWKqeS4iueahOWtl+aute+8jCB2YWx1ZSDkuLog6KGo5Y2V5Lit55qE5a2X5q615ZCNXHJcbiAqIOW4ruWKqeS4iueahOWQjOS4gOS4quWtl+auteWPr+S7peaYoOWwhOWIsOihqOWNleS4reeahOWkmuS4quWtl+auteS4re+8jHsgLi4uIGlkOiAndXNlci51c2VyaWQsIHVzZXIuYWRkdXNpZCd9XHJcbiAqIOWkmuWtl+auteS7pemAl+WPt+malOW8gFxyXG4gKlxyXG4gKi9cclxuXHJcbmltcG9ydCB7IERpcmVjdGl2ZSwgT25Jbml0LCBPcHRpb25hbCwgU2VsZiwgSW5wdXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgQmluZGluZ09iamVjdCwgTmdGb3JtQ29udHJvbCwgVmlld01vZGVsIH0gZnJvbSAnQGZhcnJpcy9kZXZraXQnO1xyXG5pbXBvcnQgeyBDb21ib0NoYW5nZXMgfSBmcm9tICdAZmFycmlzL3VpLWNvbWJvLWxpc3QnO1xyXG5pbXBvcnQgeyBDb21ib0xvb2t1cENvbXBvbmVudCB9IGZyb20gJ0BmYXJyaXMvdWktY29tYm8tbG9va3VwJztcclxuaW1wb3J0IHsgRGF0YU1hcHBpbmcgfSBmcm9tICcuL2RhdGEtbWFwcGluZyc7XHJcblxyXG5cclxuQERpcmVjdGl2ZSh7IHNlbGVjdG9yOiAnW2NvbWJvLWxvb2t1cC1kYXRhLW1hcHBpbmddJyB9KVxyXG5leHBvcnQgY2xhc3MgQ29tYm9Mb29rdXBEYXRhTWFwcGluZ0RpcmVjdGl2ZSBleHRlbmRzIERhdGFNYXBwaW5nIGltcGxlbWVudHMgT25Jbml0IHtcclxuXHJcbiAgQElucHV0KCdjb21iby1sb29rdXAtZGF0YS1tYXBwaW5nJykgbWFwZmllbGRzOiBhbnk7XHJcbiAgQElucHV0KCd0YXJnZXQnKSB0YXJnZXQ6IEJpbmRpbmdPYmplY3QgPSBudWxsO1xyXG5cclxuICBjb25zdHJ1Y3RvcihAT3B0aW9uYWwoKSBwdWJsaWMgdm06IFZpZXdNb2RlbCwgQE9wdGlvbmFsKCkgQFNlbGYoKSBwcml2YXRlIGxvb2t1cDogQ29tYm9Mb29rdXBDb21wb25lbnQpIHtcclxuICAgIHN1cGVyKCk7XHJcbiAgICBpZiAodGhpcy5sb29rdXApIHtcclxuICAgICAgdGhpcy5sb29rdXAudXNlRm9ybURhdGFNYXBwaW5nID0gdHJ1ZTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIG5nT25Jbml0KCkge1xyXG4gICAgLy8g5YC85Y+Y5YyW77yM5Lqm6YCa6L+H6K+l5LqL5Lu26Kem5Y+R5Lu75oSP6L6T5YWl5riF56m65LqL5Lu2XHJcbiAgICB0aGlzLmxvb2t1cC52YWx1ZUNoYW5nZS5zdWJzY3JpYmUoKHJlc3VsdDogQ29tYm9DaGFuZ2VzKSA9PiB7XHJcbiAgICAgIGlmICghcmVzdWx0Wydub3NlYXJjaCddKSB7XHJcbiAgICAgICAgLy8g5YC85Y+Y5YyWXHJcbiAgICAgICAgY29uc3QgZGF0YSA9IHJlc3VsdC5zZWxlY3Rpb25zICYmIHJlc3VsdC5zZWxlY3Rpb25zLmxlbmd0aCA+IDAgPyByZXN1bHQuc2VsZWN0aW9ucyA6IG51bGw7XHJcbiAgICAgICAgdGhpcy5vblZhbHVlQ2hhbmdlKGRhdGEpO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIC8vIOS7u+aEj+i+k+WFpea4heepuuaYoOWwhOWtl+autVxyXG4gICAgICAgIHRoaXMub25DbGVhck1hcHBpbmcoKTtcclxuICAgICAgfVxyXG4gICAgfSk7XHJcbiAgICAvLyDmuIXnqbrkuovku7ZcclxuICAgIHRoaXMubG9va3VwLmNsZWFyLnN1YnNjcmliZSgoKSA9PiB7XHJcbiAgICAgIGNvbnN0IF9tYXBmaWVsZHMgPSB0aGlzLm1hcGZpZWxkcyB8fCB0aGlzLmxvb2t1cC5tYXBGaWVsZHM7XHJcbiAgICAgIHRoaXMubWFwcGluZ0RhdGEobnVsbCwgX21hcGZpZWxkcyk7XHJcbiAgICB9KTtcclxuICB9XHJcbiAgcHJpdmF0ZSBvbkNsZWFyTWFwcGluZygpIHtcclxuICAgIGNvbnN0IG1hcGZpZWxkcyA9IE9iamVjdC5hc3NpZ24oe30sICh0aGlzLm1hcGZpZWxkcyB8fCB0aGlzLmxvb2t1cC5tYXBGaWVsZHMgfHwge30pKTtcclxuICAgIGNvbnN0IGxvb2t1cFRleHRGaWVsZCA9IHRoaXMubG9va3VwLnRleHRGaWVsZDtcclxuICAgIGNvbnN0IGRhdGEgPSB7fTtcclxuICAgIGNvbnN0IGNvbnRyb2xOYW1lID0gdGhpcy5sb29rdXAubmdDb250cm9sICYmIHRoaXMubG9va3VwLm5nQ29udHJvbC5uYW1lO1xyXG4gICAgaWYgKGNvbnRyb2xOYW1lICYmIHRoaXMudm0pIHtcclxuICAgICAgY29uc3QgdGV4dEZpZWxkTWFwcGluZyA9IG1hcGZpZWxkc1tsb29rdXBUZXh0RmllbGRdO1xyXG4gICAgICBjb25zdCBuZ0Zvcm1Db250cm9sID0gdGhpcy52bSAmJiB0aGlzLnZtLmZvcm0gJiYgdGhpcy52bS5mb3JtLm5nRm9ybUNvbnRyb2xzICYmIHRoaXMudm0uZm9ybS5uZ0Zvcm1Db250cm9sc1tjb250cm9sTmFtZV0gYXMgTmdGb3JtQ29udHJvbDtcclxuICAgICAgY29uc3QgYmluZGluZyA9IG5nRm9ybUNvbnRyb2wgJiYgbmdGb3JtQ29udHJvbC5iaW5kaW5nO1xyXG4gICAgICBpZiAodGV4dEZpZWxkTWFwcGluZyAmJiBiaW5kaW5nKSB7XHJcbiAgICAgICAgY29uc3QgdGFyZ2V0RmllbGQgPSB0ZXh0RmllbGRNYXBwaW5nLnNwbGl0KCcsJykuZmlsdGVyKGl0ZW0gPT4gaXRlbSAhPT0gYmluZGluZykuam9pbignLCcpO1xyXG4gICAgICAgIGlmICh0YXJnZXRGaWVsZCkge1xyXG4gICAgICAgICAgbWFwZmllbGRzW2xvb2t1cFRleHRGaWVsZF0gPSB0YXJnZXRGaWVsZDtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgZGVsZXRlIG1hcGZpZWxkc1tsb29rdXBUZXh0RmllbGRdO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgLy8gdGhpcy5zZXRWYWx1ZShkYXRhLCBsb29rdXBUZXh0RmllbGQuc3BsaXQoJy4nKSwgdmFsdWUpO1xyXG4gICAgT2JqZWN0LmtleXMobWFwZmllbGRzKS5mb3JFYWNoKGZpZWxkID0+IHtcclxuICAgICAgdGhpcy5zZXRWYWx1ZShkYXRhLCBmaWVsZC5zcGxpdCgnLicpLCAnJyk7XHJcbiAgICB9KTtcclxuICAgIHRoaXMubWFwcGluZ0RhdGEoZGF0YSwgbWFwZmllbGRzLCB0cnVlKTtcclxuICB9XHJcbiAgcHJpdmF0ZSBvblZhbHVlQ2hhbmdlKGRhdGEpIHtcclxuICAgIGNvbnN0IF9tYXBmaWVsZHMgPSB0aGlzLm1hcGZpZWxkcyB8fCB0aGlzLmxvb2t1cC5tYXBGaWVsZHM7XHJcbiAgICB0aGlzLm1hcHBpbmdEYXRhKGRhdGEsIF9tYXBmaWVsZHMpO1xyXG4gIH1cclxufVxyXG4iXX0=