import { PARENT_CLASS, FieldMetadataUtil } from '../entity/index';
import { ModifyType } from '../changeset/index';
import { ChangeType } from './changes';
import { BindingPropertyType } from './binding_property';
import { BindingObjectFactory } from './binding_object_factory';
/**
 * 实体操作工具类
 */
class EntityUtil {
    /**
     * 将entity的数据加载到bindingObject中，并保持两者同步。
     * @param entity        实体对象
     * @param bindingObject 绑定对象
     */
    static loadEntity(entity, bindingObject) {
        // 遍历bindingObject的properties进行赋值
        bindingObject.properties.forEach((property) => {
            const propertyName = property.name;
            if (property.type === BindingPropertyType.List) {
                this.loadEntityList(entity[propertyName] || entity[PARENT_CLASS], bindingObject[propertyName]);
            }
            else if (property.type === BindingPropertyType.Object) {
                if (entity && entity[propertyName]) {
                    this.loadEntity(entity[propertyName], bindingObject[propertyName]);
                }
            }
            else if (property.type === BindingPropertyType.Dynamic) {
                if (entity && entity[propertyName]) {
                    const dynamicObject = BindingObjectFactory.createDynamicBindingObject(entity[propertyName].data);
                    BindingObjectFactory.attachDynamicObjectProperty(bindingObject, propertyName, dynamicObject);
                    this.loadEntity(entity[propertyName], bindingObject[propertyName]);
                }
            }
            else {
                bindingObject.setValue(propertyName, entity[propertyName], false, false);
            }
        });
        this.setUpEntityPipeline(entity, bindingObject);
    }
    /**
     * 建立entity和bindingObject之间的关联
     * @param entity        实体对象
     * @param bindingObject 绑定对象
     */
    static setUpEntityPipeline(entity, bindingObject) {
        // 监听entity变更
        entity.onValueChanged.subscribe((modification) => {
            if (modification.type !== ModifyType.ValueChange || modification.path.length === 0) {
                return;
            }
            const propertyName = modification.path[modification.path.length - 1];
            const primaryKeyPath = modification.path[modification.path.length - 2];
            // 验证主键是否匹配
            // 存在主键并且主键不是id时才检查（值对象、关联对象不检查）
            if (bindingObject.primaryKey && bindingObject.primaryKey === 'id') {
                const primaryKey = bindingObject.primaryKey;
                const primaryKeyValue = bindingObject.getValue(primaryKey);
                if (primaryKeyPath !== `${primaryKey}:${primaryKeyValue}`) {
                    return;
                }
            }
            // 值没有发生变化，不再设置
            // TODO: 通过bindingObject修改entity属性值时，entity总会触发一个变更回来，如果不截获这个重复的变更，会导致重复或死循环
            if (bindingObject.getValue(propertyName) === modification.value) {
                return;
            }
            bindingObject.setValue(propertyName, modification.value, true, false, modification.errors);
        });
        // 监听bindingObject变更
        bindingObject.viewChanges.subscribe((viewChange) => {
            const value = viewChange.value;
            const propertyName = viewChange.path[0];
            let pathPrefix = '';
            const pathData = entity.getPaths();
            const paths = pathData.path;
            let id = bindingObject['id'];
            if (pathData.isUdt) {
                // grid中udt没有id，从父级中取出id，以便存放验证信息
                const getParentId = (target) => {
                    let parentId = '';
                    const findId = (item) => {
                        if (item && item && item['id']) {
                            parentId = item['id'];
                            return;
                        }
                        else if (item['parent']) {
                            findId(item['parent']);
                        }
                    };
                    findId(target);
                    return parentId;
                };
                id = getParentId(bindingObject);
                if (pathData.isGrid) {
                    // grid 将从表主字段去除
                    paths.shift();
                }
                if (paths.length) {
                    pathPrefix = paths.join('.') + '.';
                }
            }
            // 不是主键值字段时，要先检查主键是否存在，并且主键是否相等（防止后代变更冒泡上来）
            // 非主键属性变更时，要先检查主键是否匹配（如果主键也修改了，要求先修改主键再修改其他值）
            if (bindingObject.primaryKey) {
                const primaryKey = bindingObject.primaryKey;
                if (propertyName !== primaryKey) {
                    if (!entity[primaryKey] || entity[primaryKey] !== bindingObject[primaryKey]) {
                        return;
                    }
                }
            }
            // 如果BindingObject上的属性值和Entity上对应属性值一样，则不再设置
            if (entity[propertyName] === value) {
                return;
            }
            // 调用表单验证,通过后调用实体验证
            // bingdingObject变化后，先调用实体上的验证，通过后再设置实体的变动
            entity[propertyName] = value;
        });
    }
    /**
     * 将entityList中的Entity对象转换为BindingObject对象，加载到bindingList中，并保持entityList和bindingList同步。
     * @param entityList  实体列表
     * @param bindingList 绑定列表
     */
    static loadEntityList(entityList, bindingList) {
        this.loadEntities(entityList.items, bindingList);
        this.setUpEntityListPipeline(entityList, bindingList);
    }
    /**
     * 建立entityList和bindingList之间的关联
     * @param entityList  实体列表
     * @param bindingList 绑定列表
     */
    static setUpEntityListPipeline(entityList, bindingList) {
        entityList.onListChanged.subscribe((modification) => {
            switch (modification.type) {
                // 添加实体
                case ModifyType.Add:
                    const entitiesToAdd = modification.value;
                    if (entitiesToAdd.length === 0) {
                        return;
                    }
                    // 检查父id是否一致，冒泡导致的变更不处理
                    const paths = modification.path;
                    const parentPath = paths[paths.length - 2];
                    const parentId = bindingList.parent.primaryKeyValue;
                    if (parentPath.indexOf(parentId) === -1) {
                        return;
                    }
                    this.appendEntities(modification.value, bindingList);
                    break;
                // 删除实体
                case ModifyType.Remove:
                    // 删除实体（value格式待商榷，目前value的格式为 { primaryKey: primaryValue}）
                    const id = modification.value[bindingList.primaryKey];
                    bindingList.removeByIds([id]);
                    // this.removeEntities(<Entity[]>modification.value, bindingList);
                    break;
                // 加载实体
                case ModifyType.Load:
                    const entities = modification.value;
                    this.loadEntities(entities, bindingList);
                    break;
                default:
                    break;
            }
        });
    }
    /**
     * 监听repository变化，保持repository和bindingList同步。
     * @param repository  实体仓库
     * @param bindingList 绑定列表
     */
    static loadRepository(repository, bindingList) {
        // 初次加载
        const entities = Array.from(repository.entityCollection.toArray());
        this.loadEntities(entities, bindingList);
        // 监听变化
        repository.entityCollectionChange.subscribe((modification) => {
            switch (modification.type) {
                case ModifyType.Load:
                    this.loadEntities(modification.value, bindingList);
                    break;
                case ModifyType.Add:
                    this.appendEntities(modification.value, bindingList);
                    break;
                case ModifyType.Remove:
                    this.removeEntities(modification.value, bindingList);
                    break;
                case ModifyType.PaginationInfoChange:
                    bindingList.paginationInfo = modification.value;
                    break;
                default:
                    break;
            }
        });
        // 监听BindingList数据变化
        bindingList.changes.subscribe((change) => {
            if (change.type === ChangeType.PaginationInfoChange) {
                const entityCollection = repository.entityCollection;
                // const entityTypeName = entityCollection.entityTypeName;
                // const original = entityCollection.paginationInfo[entityTypeName];
                // const entityPaginationInfo = Object.assign({}, original, change.value);
                entityCollection.paginationInfo = Object.assign({}, entityCollection.paginationInfo, change.value);
            }
        });
    }
    /**
     * 将entities中的Entity对象转换为BindingObject对象，并加载到bindingList中
     * @param entities    实体数组
     * @param bindingList 绑定列表
     */
    static loadEntities(entities, bindingList) {
        const bindingObjects = this.createBindingObjects(entities, bindingList);
        bindingList.load(bindingObjects);
    }
    /**
     * 将entities中的Entity对象转换为BIndingObject对象，并追加到bindingList中
     * @param entities    实体数组
     * @param bindingList 绑定列表
     */
    static appendEntities(entities, bindingList) {
        const bindingObjects = this.createBindingObjects(entities, bindingList);
        bindingList.append(bindingObjects);
    }
    /**
     * 从bindingList移除entities对应的BindingObject对象
     * @param entities    实体数组
     * @param bindingList 绑定列表
     */
    static removeEntities(entities, bindingList) {
        if (entities === null || entities.length === 0) {
            return;
        }
        // 归集要删除的id数组
        const primaryKey = bindingList.primaryKey;
        const ids = [];
        entities.forEach((entity) => {
            ids.push(entity[primaryKey]);
        });
        bindingList.removeByIds(ids);
    }
    /**
     * 将entities中的Entity对象转换为BindingObject对象
     * @param entities    实体数组
     * @param bindingList 绑定列表
     */
    static createBindingObjects(entities, bindingList) {
        if (entities === null || entities.length === 0) {
            return [];
        }
        const bindingObjects = [];
        entities.forEach((entity) => {
            const bindingObject = BindingObjectFactory.create(bindingList.properties);
            this.loadEntity(entity, bindingObject);
            // // 为bindingObject设置默认值initialData属性
            // if (entity['initialData']) {
            //   bindingObject['initialData'] = entity['initialData'];
            // }
            bindingObjects.push(bindingObject);
        });
        return bindingObjects;
    }
    static watchReposiroty(repository, bindingData) {
        // reposiroty => bindingData
        repository.entityCollectionChange.subscribe((modification) => {
            switch (modification.type) {
                case ModifyType.PaginationInfoChange:
                    bindingData.pagingInfo = modification.value;
                    break;
                default:
                    break;
            }
        });
    }
    /**
     * 查找属性的类型
     * @param entityType 实体类型
     * @param targetPropName 属性名称
     * @return 属性信息，包含属性类型（NgField、NgObject、NgList）和属性对应的实体类型（当NgField类型时为null）
     */
    static getPropInfo(entityType, targetPropName) {
        let propType;
        let propEntityType;
        // NgField
        const ngFieldProperties = FieldMetadataUtil.getNgFields(entityType);
        Object.keys(ngFieldProperties).forEach((propName) => {
            if (propName === targetPropName) {
                propType = 'NgField';
                propEntityType = null;
            }
        });
        // NgObject
        const ngObjectProperties = FieldMetadataUtil.getNgObjects(entityType);
        Object.keys(ngObjectProperties).forEach((propName) => {
            if (propName === targetPropName) {
                propType = 'NgObject';
                propEntityType = ngObjectProperties[propName].type;
            }
        });
        // NgList
        const ngListProperties = FieldMetadataUtil.getNgList(entityType);
        Object.keys(ngListProperties).forEach((propName) => {
            if (propName === targetPropName) {
                propType = 'NgList';
                propEntityType = ngListProperties[propName].type;
            }
        });
        const ngDynamicProperties = FieldMetadataUtil.getNgDynamic(entityType);
        Object.keys(ngDynamicProperties).forEach((propName) => {
            if (propName === targetPropName) {
                propType = 'NgDynamic';
                propEntityType = ngDynamicProperties[propName].type;
            }
        });
        return { propType, propEntityType };
    }
    /**
     * 获取实体的主键名
     * @param entityType 实体类型
     */
    static getPrimaryKey(entityType) {
        const primaryNgFiledProp = FieldMetadataUtil.getPrimaryFieldMetadata(entityType);
        if (primaryNgFiledProp) {
            return primaryNgFiledProp.dataField;
        }
        else {
            return '';
        }
    }
    /**
     * 是否为对象属性
     */
    static isObjectProp(entityType, targetPropName) {
        let isObjectProp = false;
        const ngObjectProperties = FieldMetadataUtil.getNgObjects(entityType);
        Object.keys(ngObjectProperties).forEach((propName) => {
            if (propName === targetPropName) {
                isObjectProp = true;
            }
        });
        return isObjectProp;
    }
    /**
     * 检查是否是动态列属性
     */
    static isDynamicProp(entityType, targetPropName) {
        let isDynamicProp = false;
        const ngDynamicProperties = FieldMetadataUtil.getNgDynamic(entityType);
        Object.keys(ngDynamicProperties).forEach((propName) => {
            if (propName === targetPropName) {
                isDynamicProp = true;
            }
        });
        return isDynamicProp;
    }
    /**
     * 为实体增加initialData属性
     * @param entity 实体实例
     * @param initialData 默认值对象
     */
    static appendInitialData(entity, initialData) {
        const data = Object.assign({}, initialData);
        delete data.id;
        delete data.parentID;
        entity['initialData'] = data;
    }
}
export { EntityUtil };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZW50aXR5X3V0aWwuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZmFycmlzL21vYmlsZS1kZXZraXQvIiwic291cmNlcyI6WyJsaWIvYmluZGluZy1kYXRhL2VudGl0eV91dGlsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBc0IsWUFBWSxFQUFFLGlCQUFpQixFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDdEYsT0FBTyxFQUFnQixVQUFVLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQztBQUM5RCxPQUFPLEVBQXNCLFVBQVUsRUFBRSxNQUFNLFdBQVcsQ0FBQztBQUczRCxPQUFPLEVBQW1CLG1CQUFtQixFQUFFLE1BQU0sb0JBQW9CLENBQUM7QUFDMUUsT0FBTyxFQUFFLG9CQUFvQixFQUFFLE1BQU0sMEJBQTBCLENBQUM7QUFJaEU7O0dBRUc7QUFDSCxNQUFNLFVBQVU7SUFFZDs7OztPQUlHO0lBQ0gsTUFBTSxDQUFDLFVBQVUsQ0FBQyxNQUFjLEVBQUUsYUFBNEI7UUFFNUQsaUNBQWlDO1FBQ2pDLGFBQWEsQ0FBQyxVQUFVLENBQUMsT0FBTyxDQUFDLENBQUMsUUFBeUIsRUFBRSxFQUFFO1lBQzdELE1BQU0sWUFBWSxHQUFHLFFBQVEsQ0FBQyxJQUFJLENBQUM7WUFDbkMsSUFBSSxRQUFRLENBQUMsSUFBSSxLQUFLLG1CQUFtQixDQUFDLElBQUksRUFBRTtnQkFDOUMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxNQUFNLENBQUMsWUFBWSxDQUFDLElBQUksTUFBTSxDQUFDLFlBQVksQ0FBQyxFQUFFLGFBQWEsQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDO2FBQ2hHO2lCQUFNLElBQUksUUFBUSxDQUFDLElBQUksS0FBSyxtQkFBbUIsQ0FBQyxNQUFNLEVBQUU7Z0JBQ3ZELElBQUksTUFBTSxJQUFJLE1BQU0sQ0FBQyxZQUFZLENBQUMsRUFBRTtvQkFDbEMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxNQUFNLENBQUMsWUFBWSxDQUFDLEVBQUUsYUFBYSxDQUFD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QUFPLEVBQUUsVUFBVSxFQUFFLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBSZXBvc2l0b3J5IH0gZnJvbSAnLi4vcmVwb3NpdG9yeS9pbmRleCc7XHJcbmltcG9ydCB7IEVudGl0eSwgRW50aXR5TGlzdCwgUEFSRU5UX0NMQVNTLCBGaWVsZE1ldGFkYXRhVXRpbCB9IGZyb20gJy4uL2VudGl0eS9pbmRleCc7XHJcbmltcG9ydCB7IE1vZGlmaWNhdGlvbiwgTW9kaWZ5VHlwZSB9IGZyb20gJy4uL2NoYW5nZXNldC9pbmRleCc7XHJcbmltcG9ydCB7IFZpZXdDaGFuZ2UsIENoYW5nZSwgQ2hhbmdlVHlwZSB9IGZyb20gJy4vY2hhbmdlcyc7XHJcbmltcG9ydCB7IEJpbmRpbmdMaXN0IH0gZnJvbSAnLi9iaW5kaW5nX2xpc3QnO1xyXG5pbXBvcnQgeyBCaW5kaW5nT2JqZWN0IH0gZnJvbSAnLi9iaW5kaW5nX29iamVjdCc7XHJcbmltcG9ydCB7IEJpbmRpbmdQcm9wZXJ0eSwgQmluZGluZ1Byb3BlcnR5VHlwZSB9IGZyb20gJy4vYmluZGluZ19wcm9wZXJ0eSc7XHJcbmltcG9ydCB7IEJpbmRpbmdPYmplY3RGYWN0b3J5IH0gZnJvbSAnLi9iaW5kaW5nX29iamVjdF9mYWN0b3J5JztcclxuaW1wb3J0IHsgUGFnaW5hdGlvbiB9IGZyb20gJy4uL2NvcmUvaW5kZXgnO1xyXG5pbXBvcnQgeyBCaW5kaW5nRGF0YSB9IGZyb20gJy4vYmluZGluZ19kYXRhJztcclxuXHJcbi8qKlxyXG4gKiDlrp7kvZPmk43kvZzlt6XlhbfnsbtcclxuICovXHJcbmNsYXNzIEVudGl0eVV0aWwge1xyXG5cclxuICAvKipcclxuICAgKiDlsIZlbnRpdHnnmoTmlbDmja7liqDovb3liLBiaW5kaW5nT2JqZWN05Lit77yM5bm25L+d5oyB5Lik6ICF5ZCM5q2l44CCXHJcbiAgICogQHBhcmFtIGVudGl0eSAgICAgICAg5a6e5L2T5a+56LGhXHJcbiAgICogQHBhcmFtIGJpbmRpbmdPYmplY3Qg57uR5a6a5a+56LGhXHJcbiAgICovXHJcbiAgc3RhdGljIGxvYWRFbnRpdHkoZW50aXR5OiBFbnRpdHksIGJpbmRpbmdPYmplY3Q6IEJpbmRpbmdPYmplY3QpIHtcclxuXHJcbiAgICAvLyDpgY3ljoZiaW5kaW5nT2JqZWN055qEcHJvcGVydGllc+i/m+ihjOi1i+WAvFxyXG4gICAgYmluZGluZ09iamVjdC5wcm9wZXJ0aWVzLmZvckVhY2goKHByb3BlcnR5OiBCaW5kaW5nUHJvcGVydHkpID0+IHtcclxuICAgICAgY29uc3QgcHJvcGVydHlOYW1lID0gcHJvcGVydHkubmFtZTtcclxuICAgICAgaWYgKHByb3BlcnR5LnR5cGUgPT09IEJpbmRpbmdQcm9wZXJ0eVR5cGUuTGlzdCkge1xyXG4gICAgICAgIHRoaXMubG9hZEVudGl0eUxpc3QoZW50aXR5W3Byb3BlcnR5TmFtZV0gfHwgZW50aXR5W1BBUkVOVF9DTEFTU10sIGJpbmRpbmdPYmplY3RbcHJvcGVydHlOYW1lXSk7XHJcbiAgICAgIH0gZWxzZSBpZiAocHJvcGVydHkudHlwZSA9PT0gQmluZGluZ1Byb3BlcnR5VHlwZS5PYmplY3QpIHtcclxuICAgICAgICBpZiAoZW50aXR5ICYmIGVudGl0eVtwcm9wZXJ0eU5hbWVdKSB7XHJcbiAgICAgICAgICB0aGlzLmxvYWRFbnRpdHkoZW50aXR5W3Byb3BlcnR5TmFtZV0sIGJpbmRpbmdPYmplY3RbcHJvcGVydHlOYW1lXSk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9IGVsc2UgaWYgKHByb3BlcnR5LnR5cGUgPT09IEJpbmRpbmdQcm9wZXJ0eVR5cGUuRHluYW1pYykge1xyXG4gICAgICAgIGlmIChlbnRpdHkgJiYgZW50aXR5W3Byb3BlcnR5TmFtZV0pIHtcclxuICAgICAgICAgIGNvbnN0IGR5bmFtaWNPYmplY3QgPSBCaW5kaW5nT2JqZWN0RmFjdG9yeS5jcmVhdGVEeW5hbWljQmluZGluZ09iamVjdChlbnRpdHlbcHJvcGVydHlOYW1lXS5kYXRhKTtcclxuICAgICAgICAgIEJpbmRpbmdPYmplY3RGYWN0b3J5LmF0dGFjaER5bmFtaWNPYmplY3RQcm9wZXJ0eShiaW5kaW5nT2JqZWN0LCBwcm9wZXJ0eU5hbWUsIGR5bmFtaWNPYmplY3QpO1xyXG4gICAgICAgICAgdGhpcy5sb2FkRW50aXR5KGVudGl0eVtwcm9wZXJ0eU5hbWVdLCBiaW5kaW5nT2JqZWN0W3Byb3BlcnR5TmFtZV0pO1xyXG4gICAgICAgIH1cclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICBiaW5kaW5nT2JqZWN0LnNldFZhbHVlKHByb3BlcnR5TmFtZSwgZW50aXR5W3Byb3BlcnR5TmFtZV0sIGZhbHNlLCBmYWxzZSk7XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG5cclxuICAgIHRoaXMuc2V0VXBFbnRpdHlQaXBlbGluZShlbnRpdHksIGJpbmRpbmdPYmplY3QpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog5bu656uLZW50aXR55ZKMYmluZGluZ09iamVjdOS5i+mXtOeahOWFs+iBlFxyXG4gICAqIEBwYXJhbSBlbnRpdHkgICAgICAgIOWunuS9k+WvueixoVxyXG4gICAqIEBwYXJhbSBiaW5kaW5nT2JqZWN0IOe7keWumuWvueixoVxyXG4gICAqL1xyXG4gIHN0YXRpYyBzZXRVcEVudGl0eVBpcGVsaW5lKGVudGl0eTogRW50aXR5LCBiaW5kaW5nT2JqZWN0OiBCaW5kaW5nT2JqZWN0KSB7XHJcblxyXG4gICAgLy8g55uR5ZCsZW50aXR55Y+Y5pu0XHJcbiAgICBlbnRpdHkub25WYWx1ZUNoYW5nZWQuc3Vic2NyaWJlKChtb2RpZmljYXRpb246IE1vZGlmaWNhdGlvbikgPT4ge1xyXG4gICAgICBpZiAobW9kaWZpY2F0aW9uLnR5cGUgIT09IE1vZGlmeVR5cGUuVmFsdWVDaGFuZ2UgfHwgbW9kaWZpY2F0aW9uLnBhdGgubGVuZ3RoID09PSAwKSB7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgICB9XHJcbiAgICAgIGNvbnN0IHByb3BlcnR5TmFtZSA9IG1vZGlmaWNhdGlvbi5wYXRoW21vZGlmaWNhdGlvbi5wYXRoLmxlbmd0aCAtIDFdO1xyXG4gICAgICBjb25zdCBwcmltYXJ5S2V5UGF0aCA9IG1vZGlmaWNhdGlvbi5wYXRoW21vZGlmaWNhdGlvbi5wYXRoLmxlbmd0aCAtIDJdO1xyXG5cclxuICAgICAgLy8g6aqM6K+B5Li76ZSu5piv5ZCm5Yy56YWNXHJcbiAgICAgIC8vIOWtmOWcqOS4u+mUruW5tuS4lOS4u+mUruS4jeaYr2lk5pe25omN5qOA5p+l77yI5YC85a+56LGh44CB5YWz6IGU5a+56LGh5LiN5qOA5p+l77yJXHJcbiAgICAgIGlmIChiaW5kaW5nT2JqZWN0LnByaW1hcnlLZXkgJiYgYmluZGluZ09iamVjdC5wcmltYXJ5S2V5ID09PSAnaWQnKSB7XHJcbiAgICAgICAgY29uc3QgcHJpbWFyeUtleSA9IGJpbmRpbmdPYmplY3QucHJpbWFyeUtleTtcclxuICAgICAgICBjb25zdCBwcmltYXJ5S2V5VmFsdWUgPSBiaW5kaW5nT2JqZWN0LmdldFZhbHVlKHByaW1hcnlLZXkpO1xyXG4gICAgICAgIGlmIChwcmltYXJ5S2V5UGF0aCAhPT0gYCR7cHJpbWFyeUtleX06JHtwcmltYXJ5S2V5VmFsdWV9YCkge1xyXG4gICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG5cclxuICAgICAgLy8g5YC85rKh5pyJ5Y+R55Sf5Y+Y5YyW77yM5LiN5YaN6K6+572uXHJcbiAgICAgIC8vIFRPRE86IOmAmui/h2JpbmRpbmdPYmplY3Tkv67mlLllbnRpdHnlsZ7mgKflgLzml7bvvIxlbnRpdHnmgLvkvJrop6blj5HkuIDkuKrlj5jmm7Tlm57mnaXvvIzlpoLmnpzkuI3miKrojrfov5nkuKrph43lpI3nmoTlj5jmm7TvvIzkvJrlr7zoh7Tph43lpI3miJbmrbvlvqrnjq9cclxuICAgICAgaWYgKGJpbmRpbmdPYmplY3QuZ2V0VmFsdWUocHJvcGVydHlOYW1lKSA9PT0gbW9kaWZpY2F0aW9uLnZhbHVlKSB7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgICB9XHJcbiAgICAgIGJpbmRpbmdPYmplY3Quc2V0VmFsdWUocHJvcGVydHlOYW1lLCBtb2RpZmljYXRpb24udmFsdWUsIHRydWUsIGZhbHNlLCBtb2RpZmljYXRpb24uZXJyb3JzKTtcclxuICAgIH0pO1xyXG5cclxuICAgIC8vIOebkeWQrGJpbmRpbmdPYmplY3Tlj5jmm7RcclxuICAgIGJpbmRpbmdPYmplY3Qudmlld0NoYW5nZXMuc3Vic2NyaWJlKCh2aWV3Q2hhbmdlOiBWaWV3Q2hhbmdlKSA9PiB7XHJcbiAgICAgIGNvbnN0IHZhbHVlID0gdmlld0NoYW5nZS52YWx1ZTtcclxuICAgICAgY29uc3QgcHJvcGVydHlOYW1lID0gdmlld0NoYW5nZS5wYXRoWzBdO1xyXG5cclxuICAgICAgbGV0IHBhdGhQcmVmaXggPSAnJztcclxuICAgICAgY29uc3QgcGF0aERhdGEgPSBlbnRpdHkuZ2V0UGF0aHMoKTtcclxuICAgICAgY29uc3QgcGF0aHMgPSBwYXRoRGF0YS5wYXRoO1xyXG4gICAgICBsZXQgaWQgPSBiaW5kaW5nT2JqZWN0WydpZCddO1xyXG4gICAgICBpZiAocGF0aERhdGEuaXNVZHQpIHtcclxuICAgICAgICAvLyBncmlk5LitdWR05rKh5pyJaWTvvIzku47niLbnuqfkuK3lj5blh7ppZO+8jOS7peS+v+WtmOaUvumqjOivgeS/oeaBr1xyXG4gICAgICAgIGNvbnN0IGdldFBhcmVudElkID0gKHRhcmdldDogYW55KSA9PiB7XHJcbiAgICAgICAgICBsZXQgcGFyZW50SWQgPSAnJztcclxuICAgICAgICAgIGNvbnN0IGZpbmRJZCA9IChpdGVtOiBhbnkpID0+IHtcclxuICAgICAgICAgICAgaWYgKGl0ZW0gJiYgaXRlbSAmJiBpdGVtWydpZCddKSB7XHJcbiAgICAgICAgICAgICAgcGFyZW50SWQgPSBpdGVtWydpZCddO1xyXG4gICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfSBlbHNlIGlmIChpdGVtWydwYXJlbnQnXSkge1xyXG4gICAgICAgICAgICAgIGZpbmRJZChpdGVtWydwYXJlbnQnXSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIH07XHJcbiAgICAgICAgICBmaW5kSWQodGFyZ2V0KTtcclxuICAgICAgICAgIHJldHVybiBwYXJlbnRJZDtcclxuICAgICAgICB9O1xyXG4gICAgICAgIGlkID0gZ2V0UGFyZW50SWQoYmluZGluZ09iamVjdCk7XHJcbiAgICAgICAgaWYgKHBhdGhEYXRhLmlzR3JpZCkge1xyXG4gICAgICAgICAgLy8gZ3JpZCDlsIbku47ooajkuLvlrZfmrrXljrvpmaRcclxuICAgICAgICAgIHBhdGhzLnNoaWZ0KCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChwYXRocy5sZW5ndGgpIHtcclxuICAgICAgICAgIHBhdGhQcmVmaXggPSBwYXRocy5qb2luKCcuJykgKyAnLic7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcblxyXG4gICAgICAvLyDkuI3mmK/kuLvplK7lgLzlrZfmrrXml7bvvIzopoHlhYjmo4Dmn6XkuLvplK7mmK/lkKblrZjlnKjvvIzlubbkuJTkuLvplK7mmK/lkKbnm7jnrYnvvIjpmLLmraLlkI7ku6Plj5jmm7TlhpLms6HkuIrmnaXvvIlcclxuICAgICAgLy8g6Z2e5Li76ZSu5bGe5oCn5Y+Y5pu05pe277yM6KaB5YWI5qOA5p+l5Li76ZSu5piv5ZCm5Yy56YWN77yI5aaC5p6c5Li76ZSu5Lmf5L+u5pS55LqG77yM6KaB5rGC5YWI5L+u5pS55Li76ZSu5YaN5L+u5pS55YW25LuW5YC877yJXHJcbiAgICAgIGlmIChiaW5kaW5nT2JqZWN0LnByaW1hcnlLZXkpIHtcclxuICAgICAgICBjb25zdCBwcmltYXJ5S2V5ID0gYmluZGluZ09iamVjdC5wcmltYXJ5S2V5O1xyXG4gICAgICAgIGlmIChwcm9wZXJ0eU5hbWUgIT09IHByaW1hcnlLZXkpIHtcclxuICAgICAgICAgIGlmICghZW50aXR5W3ByaW1hcnlLZXldIHx8IGVudGl0eVtwcmltYXJ5S2V5XSAhPT0gYmluZGluZ09iamVjdFtwcmltYXJ5S2V5XSkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcblxyXG4gICAgICAvLyDlpoLmnpxCaW5kaW5nT2JqZWN05LiK55qE5bGe5oCn5YC85ZKMRW50aXR55LiK5a+55bqU5bGe5oCn5YC85LiA5qC377yM5YiZ5LiN5YaN6K6+572uXHJcbiAgICAgIGlmIChlbnRpdHlbcHJvcGVydHlOYW1lXSA9PT0gdmFsdWUpIHtcclxuICAgICAgICByZXR1cm47XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIC8vIOiwg+eUqOihqOWNlemqjOivgSzpgJrov4flkI7osIPnlKjlrp7kvZPpqozor4FcclxuICAgICAgLy8gYmluZ2RpbmdPYmplY3Tlj5jljJblkI7vvIzlhYjosIPnlKjlrp7kvZPkuIrnmoTpqozor4HvvIzpgJrov4flkI7lho3orr7nva7lrp7kvZPnmoTlj5jliqhcclxuICAgICAgZW50aXR5W3Byb3BlcnR5TmFtZV0gPSB2YWx1ZTtcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog5bCGZW50aXR5TGlzdOS4reeahEVudGl0eeWvueixoei9rOaNouS4ukJpbmRpbmdPYmplY3Tlr7nosaHvvIzliqDovb3liLBiaW5kaW5nTGlzdOS4re+8jOW5tuS/neaMgWVudGl0eUxpc3TlkoxiaW5kaW5nTGlzdOWQjOatpeOAglxyXG4gICAqIEBwYXJhbSBlbnRpdHlMaXN0ICDlrp7kvZPliJfooahcclxuICAgKiBAcGFyYW0gYmluZGluZ0xpc3Qg57uR5a6a5YiX6KGoXHJcbiAgICovXHJcbiAgc3RhdGljIGxvYWRFbnRpdHlMaXN0KGVudGl0eUxpc3Q6IEVudGl0eUxpc3Q8YW55PiwgYmluZGluZ0xpc3Q6IEJpbmRpbmdMaXN0KSB7XHJcbiAgICB0aGlzLmxvYWRFbnRpdGllcyhlbnRpdHlMaXN0Lml0ZW1zLCBiaW5kaW5nTGlzdCk7XHJcblxyXG4gICAgdGhpcy5zZXRVcEVudGl0eUxpc3RQaXBlbGluZShlbnRpdHlMaXN0LCBiaW5kaW5nTGlzdCk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDlu7rnq4tlbnRpdHlMaXN05ZKMYmluZGluZ0xpc3TkuYvpl7TnmoTlhbPogZRcclxuICAgKiBAcGFyYW0gZW50aXR5TGlzdCAg5a6e5L2T5YiX6KGoXHJcbiAgICogQHBhcmFtIGJpbmRpbmdMaXN0IOe7keWumuWIl+ihqFxyXG4gICAqL1xyXG4gIHN0YXRpYyBzZXRVcEVudGl0eUxpc3RQaXBlbGluZShlbnRpdHlMaXN0OiBFbnRpdHlMaXN0PGFueT4sIGJpbmRpbmdMaXN0OiBCaW5kaW5nTGlzdCkge1xyXG5cclxuICAgIGVudGl0eUxpc3Qub25MaXN0Q2hhbmdlZC5zdWJzY3JpYmUoKG1vZGlmaWNhdGlvbjogTW9kaWZpY2F0aW9uKSA9PiB7XHJcbiAgICAgIHN3aXRjaCAobW9kaWZpY2F0aW9uLnR5cGUpIHtcclxuXHJcbiAgICAgICAgLy8g5re75Yqg5a6e5L2TXHJcbiAgICAgICAgY2FzZSBNb2RpZnlUeXBlLkFkZDpcclxuICAgICAgICAgIGNvbnN0IGVudGl0aWVzVG9BZGQgPSA8RW50aXR5W10+bW9kaWZpY2F0aW9uLnZhbHVlO1xyXG4gICAgICAgICAgaWYgKGVudGl0aWVzVG9BZGQubGVuZ3RoID09PSAwKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAvLyDmo4Dmn6XniLZpZOaYr+WQpuS4gOiHtO+8jOWGkuazoeWvvOiHtOeahOWPmOabtOS4jeWkhOeQhlxyXG4gICAgICAgICAgY29uc3QgcGF0aHMgPSBtb2RpZmljYXRpb24ucGF0aDtcclxuICAgICAgICAgIGNvbnN0IHBhcmVudFBhdGggPSBwYXRoc1twYXRocy5sZW5ndGggLSAyXTtcclxuICAgICAgICAgIGNvbnN0IHBhcmVudElkID0gYmluZGluZ0xpc3QucGFyZW50LnByaW1hcnlLZXlWYWx1ZTtcclxuICAgICAgICAgIGlmIChwYXJlbnRQYXRoLmluZGV4T2YocGFyZW50SWQpID09PSAtMSkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgdGhpcy5hcHBlbmRFbnRpdGllcyg8RW50aXR5W10+bW9kaWZpY2F0aW9uLnZhbHVlLCBiaW5kaW5nTGlzdCk7XHJcbiAgICAgICAgICBicmVhaztcclxuXHJcbiAgICAgICAgLy8g5Yig6Zmk5a6e5L2TXHJcbiAgICAgICAgY2FzZSBNb2RpZnlUeXBlLlJlbW92ZTpcclxuXHJcbiAgICAgICAgICAvLyDliKDpmaTlrp7kvZPvvIh2YWx1ZeagvOW8j+W+heWVhuamt++8jOebruWJjXZhbHVl55qE5qC85byP5Li6IHsgcHJpbWFyeUtleTogcHJpbWFyeVZhbHVlfe+8iVxyXG4gICAgICAgICAgY29uc3QgaWQgPSBtb2RpZmljYXRpb24udmFsdWVbYmluZGluZ0xpc3QucHJpbWFyeUtleV07XHJcbiAgICAgICAgICBiaW5kaW5nTGlzdC5yZW1vdmVCeUlkcyhbaWRdKTtcclxuICAgICAgICAgIC8vIHRoaXMucmVtb3ZlRW50aXRpZXMoPEVudGl0eVtdPm1vZGlmaWNhdGlvbi52YWx1ZSwgYmluZGluZ0xpc3QpO1xyXG4gICAgICAgICAgYnJlYWs7XHJcblxyXG4gICAgICAgIC8vIOWKoOi9veWunuS9k1xyXG4gICAgICAgIGNhc2UgTW9kaWZ5VHlwZS5Mb2FkOlxyXG4gICAgICAgICAgY29uc3QgZW50aXRpZXMgPSBtb2RpZmljYXRpb24udmFsdWU7XHJcbiAgICAgICAgICB0aGlzLmxvYWRFbnRpdGllcyhlbnRpdGllcywgYmluZGluZ0xpc3QpO1xyXG4gICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgIGJyZWFrO1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOebkeWQrHJlcG9zaXRvcnnlj5jljJbvvIzkv53mjIFyZXBvc2l0b3J55ZKMYmluZGluZ0xpc3TlkIzmraXjgIJcclxuICAgKiBAcGFyYW0gcmVwb3NpdG9yeSAg5a6e5L2T5LuT5bqTXHJcbiAgICogQHBhcmFtIGJpbmRpbmdMaXN0IOe7keWumuWIl+ihqFxyXG4gICAqL1xyXG4gIHN0YXRpYyBsb2FkUmVwb3NpdG9yeShyZXBvc2l0b3J5OiBSZXBvc2l0b3J5PGFueT4sIGJpbmRpbmdMaXN0OiBCaW5kaW5nTGlzdCkge1xyXG5cclxuICAgIC8vIOWIneasoeWKoOi9vVxyXG4gICAgY29uc3QgZW50aXRpZXMgPSBBcnJheS5mcm9tKHJlcG9zaXRvcnkuZW50aXR5Q29sbGVjdGlvbi50b0FycmF5KCkpO1xyXG4gICAgdGhpcy5sb2FkRW50aXRpZXMoZW50aXRpZXMsIGJpbmRpbmdMaXN0KTtcclxuXHJcbiAgICAvLyDnm5HlkKzlj5jljJZcclxuICAgIHJlcG9zaXRvcnkuZW50aXR5Q29sbGVjdGlvbkNoYW5nZS5zdWJzY3JpYmUoKG1vZGlmaWNhdGlvbjogTW9kaWZpY2F0aW9uKSA9PiB7XHJcbiAgICAgIHN3aXRjaCAobW9kaWZpY2F0aW9uLnR5cGUpIHtcclxuICAgICAgICBjYXNlIE1vZGlmeVR5cGUuTG9hZDpcclxuICAgICAgICAgIHRoaXMubG9hZEVudGl0aWVzKDxFbnRpdHlbXT5tb2RpZmljYXRpb24udmFsdWUsIGJpbmRpbmdMaXN0KTtcclxuICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIGNhc2UgTW9kaWZ5VHlwZS5BZGQ6XHJcbiAgICAgICAgICB0aGlzLmFwcGVuZEVudGl0aWVzKDxFbnRpdHlbXT5tb2RpZmljYXRpb24udmFsdWUsIGJpbmRpbmdMaXN0KTtcclxuICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIGNhc2UgTW9kaWZ5VHlwZS5SZW1vdmU6XHJcbiAgICAgICAgICB0aGlzLnJlbW92ZUVudGl0aWVzKDxFbnRpdHlbXT5tb2RpZmljYXRpb24udmFsdWUsIGJpbmRpbmdMaXN0KTtcclxuICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIGNhc2UgTW9kaWZ5VHlwZS5QYWdpbmF0aW9uSW5mb0NoYW5nZTpcclxuICAgICAgICAgIGJpbmRpbmdMaXN0LnBhZ2luYXRpb25JbmZvID0gPFBhZ2luYXRpb24+bW9kaWZpY2F0aW9uLnZhbHVlO1xyXG4gICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgIGJyZWFrO1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuXHJcbiAgICAvLyDnm5HlkKxCaW5kaW5nTGlzdOaVsOaNruWPmOWMllxyXG4gICAgYmluZGluZ0xpc3QuY2hhbmdlcy5zdWJzY3JpYmUoKGNoYW5nZTogQ2hhbmdlKSA9PiB7XHJcbiAgICAgIGlmIChjaGFuZ2UudHlwZSA9PT0gQ2hhbmdlVHlwZS5QYWdpbmF0aW9uSW5mb0NoYW5nZSkge1xyXG4gICAgICAgIGNvbnN0IGVudGl0eUNvbGxlY3Rpb24gPSByZXBvc2l0b3J5LmVudGl0eUNvbGxlY3Rpb247XHJcbiAgICAgICAgLy8gY29uc3QgZW50aXR5VHlwZU5hbWUgPSBlbnRpdHlDb2xsZWN0aW9uLmVudGl0eVR5cGVOYW1lO1xyXG4gICAgICAgIC8vIGNvbnN0IG9yaWdpbmFsID0gZW50aXR5Q29sbGVjdGlvbi5wYWdpbmF0aW9uSW5mb1tlbnRpdHlUeXBlTmFtZV07XHJcbiAgICAgICAgLy8gY29uc3QgZW50aXR5UGFnaW5hdGlvbkluZm8gPSBPYmplY3QuYXNzaWduKHt9LCBvcmlnaW5hbCwgY2hhbmdlLnZhbHVlKTtcclxuICAgICAgICBlbnRpdHlDb2xsZWN0aW9uLnBhZ2luYXRpb25JbmZvID0gT2JqZWN0LmFzc2lnbih7fSwgZW50aXR5Q29sbGVjdGlvbi5wYWdpbmF0aW9uSW5mbywgY2hhbmdlLnZhbHVlKTtcclxuICAgICAgfVxyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDlsIZlbnRpdGllc+S4reeahEVudGl0eeWvueixoei9rOaNouS4ukJpbmRpbmdPYmplY3Tlr7nosaHvvIzlubbliqDovb3liLBiaW5kaW5nTGlzdOS4rVxyXG4gICAqIEBwYXJhbSBlbnRpdGllcyAgICDlrp7kvZPmlbDnu4RcclxuICAgKiBAcGFyYW0gYmluZGluZ0xpc3Qg57uR5a6a5YiX6KGoXHJcbiAgICovXHJcbiAgc3RhdGljIGxvYWRFbnRpdGllcyhlbnRpdGllczogRW50aXR5W10sIGJpbmRpbmdMaXN0OiBCaW5kaW5nTGlzdCkge1xyXG4gICAgY29uc3QgYmluZGluZ09iamVjdHMgPSB0aGlzLmNyZWF0ZUJpbmRpbmdPYmplY3RzKGVudGl0aWVzLCBiaW5kaW5nTGlzdCk7XHJcbiAgICBiaW5kaW5nTGlzdC5sb2FkKGJpbmRpbmdPYmplY3RzKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOWwhmVudGl0aWVz5Lit55qERW50aXR55a+56LGh6L2s5o2i5Li6QkluZGluZ09iamVjdOWvueixoe+8jOW5tui/veWKoOWIsGJpbmRpbmdMaXN05LitXHJcbiAgICogQHBhcmFtIGVudGl0aWVzICAgIOWunuS9k+aVsOe7hFxyXG4gICAqIEBwYXJhbSBiaW5kaW5nTGlzdCDnu5HlrprliJfooahcclxuICAgKi9cclxuICBzdGF0aWMgYXBwZW5kRW50aXRpZXMoZW50aXRpZXM6IEVudGl0eVtdLCBiaW5kaW5nTGlzdDogQmluZGluZ0xpc3QpIHtcclxuICAgIGNvbnN0IGJpbmRpbmdPYmplY3RzID0gdGhpcy5jcmVhdGVCaW5kaW5nT2JqZWN0cyhlbnRpdGllcywgYmluZGluZ0xpc3QpO1xyXG4gICAgYmluZGluZ0xpc3QuYXBwZW5kKGJpbmRpbmdPYmplY3RzKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOS7jmJpbmRpbmdMaXN056e76ZmkZW50aXRpZXPlr7nlupTnmoRCaW5kaW5nT2JqZWN05a+56LGhXHJcbiAgICogQHBhcmFtIGVudGl0aWVzICAgIOWunuS9k+aVsOe7hFxyXG4gICAqIEBwYXJhbSBiaW5kaW5nTGlzdCDnu5HlrprliJfooahcclxuICAgKi9cclxuICBzdGF0aWMgcmVtb3ZlRW50aXRpZXMoZW50aXRpZXM6IEVudGl0eVtdLCBiaW5kaW5nTGlzdDogQmluZGluZ0xpc3QpIHtcclxuICAgIGlmIChlbnRpdGllcyA9PT0gbnVsbCB8fCBlbnRpdGllcy5sZW5ndGggPT09IDApIHtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIOW9kumbhuimgeWIoOmZpOeahGlk5pWw57uEXHJcbiAgICBjb25zdCBwcmltYXJ5S2V5ID0gYmluZGluZ0xpc3QucHJpbWFyeUtleTtcclxuICAgIGNvbnN0IGlkcyA9IFtdO1xyXG4gICAgZW50aXRpZXMuZm9yRWFjaCgoZW50aXR5OiBFbnRpdHkpID0+IHtcclxuICAgICAgaWRzLnB1c2goZW50aXR5W3ByaW1hcnlLZXldKTtcclxuICAgIH0pO1xyXG4gICAgYmluZGluZ0xpc3QucmVtb3ZlQnlJZHMoaWRzKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOWwhmVudGl0aWVz5Lit55qERW50aXR55a+56LGh6L2s5o2i5Li6QmluZGluZ09iamVjdOWvueixoVxyXG4gICAqIEBwYXJhbSBlbnRpdGllcyAgICDlrp7kvZPmlbDnu4RcclxuICAgKiBAcGFyYW0gYmluZGluZ0xpc3Qg57uR5a6a5YiX6KGoXHJcbiAgICovXHJcbiAgc3RhdGljIGNyZWF0ZUJpbmRpbmdPYmplY3RzKGVudGl0aWVzOiBFbnRpdHlbXSwgYmluZGluZ0xpc3Q6IEJpbmRpbmdMaXN0KSB7XHJcblxyXG4gICAgaWYgKGVudGl0aWVzID09PSBudWxsIHx8IGVudGl0aWVzLmxlbmd0aCA9PT0gMCkge1xyXG4gICAgICByZXR1cm4gW107XHJcbiAgICB9XHJcblxyXG4gICAgY29uc3QgYmluZGluZ09iamVjdHMgPSBbXTtcclxuICAgIGVudGl0aWVzLmZvckVhY2goKGVudGl0eTogRW50aXR5KSA9PiB7XHJcbiAgICAgIGNvbnN0IGJpbmRpbmdPYmplY3QgPSBCaW5kaW5nT2JqZWN0RmFjdG9yeS5jcmVhdGUoYmluZGluZ0xpc3QucHJvcGVydGllcyk7XHJcbiAgICAgIHRoaXMubG9hZEVudGl0eShlbnRpdHksIGJpbmRpbmdPYmplY3QpO1xyXG5cclxuICAgICAgLy8gLy8g5Li6YmluZGluZ09iamVjdOiuvue9rum7mOiupOWAvGluaXRpYWxEYXRh5bGe5oCnXHJcbiAgICAgIC8vIGlmIChlbnRpdHlbJ2luaXRpYWxEYXRhJ10pIHtcclxuICAgICAgLy8gICBiaW5kaW5nT2JqZWN0Wydpbml0aWFsRGF0YSddID0gZW50aXR5Wydpbml0aWFsRGF0YSddO1xyXG4gICAgICAvLyB9XHJcblxyXG4gICAgICBiaW5kaW5nT2JqZWN0cy5wdXNoKGJpbmRpbmdPYmplY3QpO1xyXG4gICAgfSk7XHJcbiAgICByZXR1cm4gYmluZGluZ09iamVjdHM7XHJcbiAgfVxyXG4gIHB1YmxpYyBzdGF0aWMgd2F0Y2hSZXBvc2lyb3R5KHJlcG9zaXRvcnk6IFJlcG9zaXRvcnk8YW55PiwgYmluZGluZ0RhdGE6IEJpbmRpbmdEYXRhKSB7XHJcbiAgICAvLyByZXBvc2lyb3R5ID0+IGJpbmRpbmdEYXRhXHJcbiAgICByZXBvc2l0b3J5LmVudGl0eUNvbGxlY3Rpb25DaGFuZ2Uuc3Vic2NyaWJlKChtb2RpZmljYXRpb246IE1vZGlmaWNhdGlvbikgPT4ge1xyXG4gICAgICBzd2l0Y2ggKG1vZGlmaWNhdGlvbi50eXBlKSB7XHJcbiAgICAgICAgY2FzZSBNb2RpZnlUeXBlLlBhZ2luYXRpb25JbmZvQ2hhbmdlOlxyXG4gICAgICAgICAgYmluZGluZ0RhdGEucGFnaW5nSW5mbyA9IG1vZGlmaWNhdGlvbi52YWx1ZTtcclxuICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICBicmVhaztcclxuICAgICAgfVxyXG4gICAgfSk7XHJcbiAgfVxyXG4gIC8qKlxyXG4gICAqIOafpeaJvuWxnuaAp+eahOexu+Wei1xyXG4gICAqIEBwYXJhbSBlbnRpdHlUeXBlIOWunuS9k+exu+Wei1xyXG4gICAqIEBwYXJhbSB0YXJnZXRQcm9wTmFtZSDlsZ7mgKflkI3np7BcclxuICAgKiBAcmV0dXJuIOWxnuaAp+S/oeaBr++8jOWMheWQq+WxnuaAp+exu+Wei++8iE5nRmllbGTjgIFOZ09iamVjdOOAgU5nTGlzdO+8ieWSjOWxnuaAp+WvueW6lOeahOWunuS9k+exu+Wei++8iOW9k05nRmllbGTnsbvlnovml7bkuLpudWxs77yJXHJcbiAgICovXHJcbiAgc3RhdGljIGdldFByb3BJbmZvKGVudGl0eVR5cGU6IGFueSwgdGFyZ2V0UHJvcE5hbWU6IHN0cmluZyk6IHsgcHJvcFR5cGU6IHN0cmluZywgcHJvcEVudGl0eVR5cGU6IGFueSB9IHtcclxuXHJcbiAgICBsZXQgcHJvcFR5cGU6IHN0cmluZztcclxuICAgIGxldCBwcm9wRW50aXR5VHlwZTogYW55O1xyXG5cclxuICAgIC8vIE5nRmllbGRcclxuICAgIGNvbnN0IG5nRmllbGRQcm9wZXJ0aWVzID0gRmllbGRNZXRhZGF0YVV0aWwuZ2V0TmdGaWVsZHMoZW50aXR5VHlwZSk7XHJcbiAgICBPYmplY3Qua2V5cyhuZ0ZpZWxkUHJvcGVydGllcykuZm9yRWFjaCgocHJvcE5hbWU6IHN0cmluZykgPT4ge1xyXG4gICAgICBpZiAocHJvcE5hbWUgPT09IHRhcmdldFByb3BOYW1lKSB7XHJcbiAgICAgICAgcHJvcFR5cGUgPSAnTmdGaWVsZCc7XHJcbiAgICAgICAgcHJvcEVudGl0eVR5cGUgPSBudWxsO1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuXHJcbiAgICAvLyBOZ09iamVjdFxyXG4gICAgY29uc3QgbmdPYmplY3RQcm9wZXJ0aWVzID0gRmllbGRNZXRhZGF0YVV0aWwuZ2V0TmdPYmplY3RzKGVudGl0eVR5cGUpO1xyXG4gICAgT2JqZWN0LmtleXMobmdPYmplY3RQcm9wZXJ0aWVzKS5mb3JFYWNoKChwcm9wTmFtZTogc3RyaW5nKSA9PiB7XHJcbiAgICAgIGlmIChwcm9wTmFtZSA9PT0gdGFyZ2V0UHJvcE5hbWUpIHtcclxuICAgICAgICBwcm9wVHlwZSA9ICdOZ09iamVjdCc7XHJcbiAgICAgICAgcHJvcEVudGl0eVR5cGUgPSBuZ09iamVjdFByb3BlcnRpZXNbcHJvcE5hbWVdLnR5cGU7XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG5cclxuICAgIC8vIE5nTGlzdFxyXG4gICAgY29uc3QgbmdMaXN0UHJvcGVydGllcyA9IEZpZWxkTWV0YWRhdGFVdGlsLmdldE5nTGlzdChlbnRpdHlUeXBlKTtcclxuICAgIE9iamVjdC5rZXlzKG5nTGlzdFByb3BlcnRpZXMpLmZvckVhY2goKHByb3BOYW1lOiBzdHJpbmcpID0+IHtcclxuICAgICAgaWYgKHByb3BOYW1lID09PSB0YXJnZXRQcm9wTmFtZSkge1xyXG4gICAgICAgIHByb3BUeXBlID0gJ05nTGlzdCc7XHJcbiAgICAgICAgcHJvcEVudGl0eVR5cGUgPSBuZ0xpc3RQcm9wZXJ0aWVzW3Byb3BOYW1lXS50eXBlO1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuXHJcbiAgICBjb25zdCBuZ0R5bmFtaWNQcm9wZXJ0aWVzID0gRmllbGRNZXRhZGF0YVV0aWwuZ2V0TmdEeW5hbWljKGVudGl0eVR5cGUpO1xyXG4gICAgT2JqZWN0LmtleXMobmdEeW5hbWljUHJvcGVydGllcykuZm9yRWFjaCgocHJvcE5hbWU6IHN0cmluZykgPT4ge1xyXG4gICAgICBpZiAocHJvcE5hbWUgPT09IHRhcmdldFByb3BOYW1lKSB7XHJcbiAgICAgICAgcHJvcFR5cGUgPSAnTmdEeW5hbWljJztcclxuICAgICAgICBwcm9wRW50aXR5VHlwZSA9IG5nRHluYW1pY1Byb3BlcnRpZXNbcHJvcE5hbWVdLnR5cGU7XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG5cclxuICAgIHJldHVybiB7IHByb3BUeXBlLCBwcm9wRW50aXR5VHlwZSB9O1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog6I635Y+W5a6e5L2T55qE5Li76ZSu5ZCNXHJcbiAgICogQHBhcmFtIGVudGl0eVR5cGUg5a6e5L2T57G75Z6LXHJcbiAgICovXHJcbiAgc3RhdGljIGdldFByaW1hcnlLZXkoZW50aXR5VHlwZTogYW55KSB7XHJcbiAgICBjb25zdCBwcmltYXJ5TmdGaWxlZFByb3AgPSBGaWVsZE1ldGFkYXRhVXRpbC5nZXRQcmltYXJ5RmllbGRNZXRhZGF0YShlbnRpdHlUeXBlKTtcclxuICAgIGlmIChwcmltYXJ5TmdGaWxlZFByb3ApIHtcclxuICAgICAgcmV0dXJuIHByaW1hcnlOZ0ZpbGVkUHJvcC5kYXRhRmllbGQ7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICByZXR1cm4gJyc7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDmmK/lkKbkuLrlr7nosaHlsZ7mgKdcclxuICAgKi9cclxuICBzdGF0aWMgaXNPYmplY3RQcm9wKGVudGl0eVR5cGU6IGFueSwgdGFyZ2V0UHJvcE5hbWU6IHN0cmluZywgKSB7XHJcbiAgICBsZXQgaXNPYmplY3RQcm9wID0gZmFsc2U7XHJcbiAgICBjb25zdCBuZ09iamVjdFByb3BlcnRpZXMgPSBGaWVsZE1ldGFkYXRhVXRpbC5nZXROZ09iamVjdHMoZW50aXR5VHlwZSk7XHJcbiAgICBPYmplY3Qua2V5cyhuZ09iamVjdFByb3BlcnRpZXMpLmZvckVhY2goKHByb3BOYW1lOiBzdHJpbmcpID0+IHtcclxuICAgICAgaWYgKHByb3BOYW1lID09PSB0YXJnZXRQcm9wTmFtZSkge1xyXG4gICAgICAgIGlzT2JqZWN0UHJvcCA9IHRydWU7XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG4gICAgcmV0dXJuIGlzT2JqZWN0UHJvcDtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOajgOafpeaYr+WQpuaYr+WKqOaAgeWIl+WxnuaAp1xyXG4gICAqL1xyXG4gIHN0YXRpYyBpc0R5bmFtaWNQcm9wKGVudGl0eVR5cGU6IGFueSwgdGFyZ2V0UHJvcE5hbWU6IHN0cmluZykge1xyXG4gICAgbGV0IGlzRHluYW1pY1Byb3AgPSBmYWxzZTtcclxuICAgIGNvbnN0IG5nRHluYW1pY1Byb3BlcnRpZXMgPSBGaWVsZE1ldGFkYXRhVXRpbC5nZXROZ0R5bmFtaWMoZW50aXR5VHlwZSk7XHJcbiAgICBPYmplY3Qua2V5cyhuZ0R5bmFtaWNQcm9wZXJ0aWVzKS5mb3JFYWNoKChwcm9wTmFtZTogc3RyaW5nKSA9PiB7XHJcbiAgICAgIGlmIChwcm9wTmFtZSA9PT0gdGFyZ2V0UHJvcE5hbWUpIHtcclxuICAgICAgICBpc0R5bmFtaWNQcm9wID0gdHJ1ZTtcclxuICAgICAgfVxyXG4gICAgfSk7XHJcbiAgICByZXR1cm4gaXNEeW5hbWljUHJvcDtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOS4uuWunuS9k+WinuWKoGluaXRpYWxEYXRh5bGe5oCnXHJcbiAgICogQHBhcmFtIGVudGl0eSDlrp7kvZPlrp7kvotcclxuICAgKiBAcGFyYW0gaW5pdGlhbERhdGEg6buY6K6k5YC85a+56LGhXHJcbiAgICovXHJcbiAgc3RhdGljIGFwcGVuZEluaXRpYWxEYXRhKGVudGl0eSwgaW5pdGlhbERhdGEpIHtcclxuICAgIGNvbnN0IGRhdGEgPSBPYmplY3QuYXNzaWduKHt9LCBpbml0aWFsRGF0YSk7XHJcbiAgICBkZWxldGUgZGF0YS5pZDtcclxuICAgIGRlbGV0ZSBkYXRhLnBhcmVudElEO1xyXG4gICAgZW50aXR5Wydpbml0aWFsRGF0YSddID0gZGF0YTtcclxuICB9XHJcbn1cclxuXHJcbmV4cG9ydCB7IEVudGl0eVV0aWwgfTtcclxuIl19