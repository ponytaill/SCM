/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*
 * @Author: 疯狂秀才(Lucas Huang)
 * @Date: 2019-08-08 18:53:41
 * @LastEditors: 疯狂秀才(Lucas Huang)
 * @LastEditTime: 2019-11-27 11:19:44
 * @QQ: 1055818239
 * @Version: v0.0.1
 */
import { Renderer2, forwardRef, Injector, HostBinding, ChangeDetectorRef } from '@angular/core';
import { NgZone, ViewEncapsulation, TemplateRef } from '@angular/core';
import { Component, Output, EventEmitter, ElementRef, Input, ViewChild } from '@angular/core';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import ResizeObserver from 'resize-observer-polyfill';
/** @type {?} */
export var INPUT_GROUP_VALUE_ACCESSOR = {
    provide: NG_VALUE_ACCESSOR,
    useExisting: forwardRef((/**
     * @return {?}
     */
    function () { return InputGroupComponent; })),
    multi: true
};
var InputGroupComponent = /** @class */ (function () {
    function InputGroupComponent(el, renderer, ngZone, injector) {
        this.el = el;
        this.renderer = renderer;
        this.ngZone = ngZone;
        this.injector = injector;
        this.autocomplete = 'off';
        this.showClearButton = false;
        this.value = '';
        /**
         * 只读
         */
        this.readonly = false;
        /**
         * 禁用
         */
        this.disabled = false;
        /**
         * 允许编辑
         */
        this.editable = true;
        /**
         * 启用清除按钮
         */
        this.enableClear = true;
        /**
         * 扩展按钮
         */
        this.groupText = '';
        /**
         * 自定义CLASS
         */
        this.customCls = '';
        /**
         * 当组件禁用或只读时显示后边的按钮
         */
        this.showButtonWhenDisabled = false;
        /**
         * 启用提示信息
         */
        this.placeholder = '';
        /**
         * 文本在输入框中的对齐方式
         */
        this.textAlign = 'left';
        this.isPassword = false;
        this.enableViewPassword = true;
        this.minLength = undefined;
        this.maxLength = undefined;
        this.enableTitle = true;
        /**
         * 扩展信息；在输入框前面 显示 ① 图标鼠标滑过后显示
         */
        this.useExtendInfo = false;
        this.extendInfo = '';
        this.forcePlaceholder = false;
        this.updateExtendInfo = new EventEmitter();
        this.clear = new EventEmitter();
        this.valueChange = new EventEmitter();
        this.clickHandle = new EventEmitter();
        this.blurHandle = new EventEmitter();
        this.focusHandle = new EventEmitter();
        this.enterHandle = new EventEmitter();
        this.iconMouseEnter = new EventEmitter();
        this.iconMouseLeave = new EventEmitter();
        this.keyupHandle = new EventEmitter();
        this.keydownHandle = new EventEmitter();
        this.inputClick = new EventEmitter();
        this.inputType = 'text';
        this.cd = null;
        this.focusCls = 'f-state-focus';
        this.ro = null;
        this.onModelChange = (/**
         * @param {?} obj
         * @return {?}
         */
        function (obj) { });
        this.onModelTouched = (/**
         * @param {?} val
         * @return {?}
         */
        function (val) { });
        this.cd = this.injector.get(ChangeDetectorRef);
    }
    /**
     * @return {?}
     */
    InputGroupComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        if (!this.groupText) {
            this.renderer.setStyle(this.el.nativeElement.querySelector('.input-group-append'), 'margin-left', '0');
        }
        this.initSmartPassword();
        // if (!this.editable) {
        //     this.readonly = true
        // }
    };
    /**
     * @return {?}
     */
    InputGroupComponent.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.ngZone.runOutsideAngular((/**
         * @return {?}
         */
        function () {
            if (_this.enableClear) {
                _this.inputGroup.nativeElement.addEventListener('mouseenter', _this.onMouseEnter.bind(_this));
                _this.inputGroup.nativeElement.addEventListener('mouseleave', _this.onMouseLeave.bind(_this));
            }
            _this.ro = new ResizeObserver((/**
             * @param {?} entries
             * @param {?} observer
             * @return {?}
             */
            function (entries, observer) {
                if (entries && entries[0] && _this.clearIconRef) {
                    var _a = entries[0].contentRect, width = _a.width, height = _a.height;
                    /** @type {?} */
                    var target = entries[0].target;
                    if (width < 70) {
                        _this.clearIconRef.nativeElement.classList.add('input-group-clear-right');
                    }
                    else {
                        _this.clearIconRef.nativeElement.classList.remove('input-group-clear-right');
                    }
                }
            }));
            _this.ro.observe(_this.inputGroup.nativeElement);
        }));
    };
    /**
     * @param {?} changes
     * @return {?}
     */
    InputGroupComponent.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        if (changes.groupText && !changes.groupText.isFirstChange()) {
            if (changes.groupText.currentValue) {
                this.renderer.setStyle(this.el.nativeElement.querySelector('.input-group-append'), 'margin-left', '-1');
            }
        }
    };
    /**
     * @param {?} val
     * @return {?}
     */
    InputGroupComponent.prototype.ngModelChange = /**
     * @param {?} val
     * @return {?}
     */
    function (val) {
    };
    /**
     * @private
     * @return {?}
     */
    InputGroupComponent.prototype.initSmartPassword = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.isPassword) {
            /** @type {?} */
            var openEyeICON_1 = '<span class="f-icon f-icon-eye" style="color: rgb(56, 143, 255);"></span>';
            /** @type {?} */
            var closeEyeICON_1 = '<span class="f-icon f-icon-eye"></span>';
            this.groupText = closeEyeICON_1;
            if (!this.enableViewPassword) {
                this.groupText = '';
            }
            this.inputType = 'password';
            /** @type {?} */
            var openEyes_1 = false;
            this.onClickHandle = (/**
             * @param {?} $event
             * @return {?}
             */
            function ($event) {
                openEyes_1 = !openEyes_1;
                /** @type {?} */
                var inputtype = openEyes_1 ? 'text' : 'password';
                _this.groupText = openEyes_1 ? openEyeICON_1 : closeEyeICON_1;
                _this.inputType = inputtype;
                _this.cd.detectChanges();
                return false;
            });
        }
        else {
            this.inputType = 'text';
        }
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    InputGroupComponent.prototype.onEnter = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        // if (this.editable) {
        //     $event.stopPropagation();
        // }
        this.enterHandle.emit({ originalEvent: $event });
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    InputGroupComponent.prototype.onInputFocus = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        if (this.disabled) {
            return;
        }
        else {
            this.renderer.addClass(this.inputGroup.nativeElement, this.focusCls);
            if (this.editable || !this.readonly) {
                this.focusHandle.emit($event);
            }
        }
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    InputGroupComponent.prototype.onInputClick = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        this.inputClick.emit($event);
    };
    /**
     * @param {?} event
     * @return {?}
     */
    InputGroupComponent.prototype.onMouseEnter = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        if (this.value) {
            if (!this.editable) {
                if (!this.state && !this.disabled) {
                    this.showClearButton = true;
                }
            }
            else {
                if (!this.readonly && !this.disabled) {
                    this.showClearButton = true;
                }
            }
        }
        if (this.showClearButton) {
            this.toggleClearIcon(event, true);
        }
    };
    /**
     * @param {?} event
     * @return {?}
     */
    InputGroupComponent.prototype.onMouseLeave = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this.showClearButton = false;
        this.toggleClearIcon(event, false);
    };
    /**
     * @return {?}
     */
    InputGroupComponent.prototype.getStateCls = /**
     * @return {?}
     */
    function () {
        if (this.disabled) {
            return { 'f-state-disabled': true };
        }
        else {
            if (!this.editable) {
                return { 'f-state-editable': true, 'f-state-readonly': this.readonly };
            }
            else {
                return { 'f-state-readonly': this.readonly };
            }
        }
    };
    /**
     * @private
     * @param {?} event
     * @param {?=} isShow
     * @return {?}
     */
    InputGroupComponent.prototype.toggleClearIcon = /**
     * @private
     * @param {?} event
     * @param {?=} isShow
     * @return {?}
     */
    function (event, isShow) {
        if (isShow === void 0) { isShow = false; }
        /** @type {?} */
        var str = isShow ? '' : 'none';
        /** @type {?} */
        var clearIcon = event.target.querySelector('.input-group-clear');
        if (clearIcon) {
            clearIcon.style.display = str;
        }
    };
    /**
     * @return {?}
     */
    InputGroupComponent.prototype.onMouseOverInExtentInfo = /**
     * @return {?}
     */
    function () {
        this.updateExtendInfo.emit();
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    InputGroupComponent.prototype.onMousedown = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        /** @type {?} */
        var target = (/** @type {?} */ ($event.target));
        if (target.tagName !== 'INPUT') {
            $event.preventDefault();
        }
        $event.stopPropagation();
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    InputGroupComponent.prototype.onClearValue = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        /** @type {?} */
        var flag1 = !this.readonly && !this.disabled && this.editable;
        /** @type {?} */
        var flag2 = !this.editable;
        $event.stopPropagation();
        if (flag1 || flag2) {
            this.onValueChange('', false);
            this.showClearButton = false;
            this.clear.emit();
        }
    };
    /**
     * @param {?} event
     * @return {?}
     */
    InputGroupComponent.prototype.onBlur = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this.renderer.removeClass(this.inputGroup.nativeElement, this.focusCls);
        this.blurHandle.emit(event);
        event.stopPropagation();
        return false;
    };
    /**
     * @param {?} val
     * @param {?=} emit
     * @return {?}
     */
    InputGroupComponent.prototype.onValueChange = /**
     * @param {?} val
     * @param {?=} emit
     * @return {?}
     */
    function (val, emit) {
        if (emit === void 0) { emit = true; }
        if (this.value !== val) {
            this.value = val;
            this.onModelChange(val);
            this.onModelTouched(val);
            if (emit) {
                this.valueChange.emit(val);
            }
        }
    };
    /**
     * @param {?} event
     * @return {?}
     */
    InputGroupComponent.prototype.onClickHandle = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        if (this.showButtonWhenDisabled || ((!this.editable || !this.readonly) && !this.disabled)) {
            this.clickHandle.emit({
                originalEvent: event,
                value: this.value
            });
        }
        // if (!this.editable) {
        //     if (!this.disabled) {
        //         this.clickHandle.emit({
        //             originalEvent: event,
        //             value: this.value
        //         });
        //     }
        // } else {
        //     if (!this.readonly && !this.disabled) {
        //         this.clickHandle.emit({
        //             originalEvent: event,
        //             value: this.value
        //         });
        //     }
        // }
        event.stopPropagation();
    };
    /**
     * @param {?} e
     * @return {?}
     */
    InputGroupComponent.prototype.onIconMouseEnter = /**
     * @param {?} e
     * @return {?}
     */
    function (e) {
        this.iconMouseEnter.emit(e);
    };
    /**
     * @param {?} e
     * @return {?}
     */
    InputGroupComponent.prototype.onIconMouseLeave = /**
     * @param {?} e
     * @return {?}
     */
    function (e) {
        this.iconMouseLeave.emit(e);
    };
    /**
     * @return {?}
     */
    InputGroupComponent.prototype.focus = /**
     * @return {?}
     */
    function () {
        this.textbox.nativeElement.focus();
    };
    /**
     * @param {?} obj
     * @return {?}
     */
    InputGroupComponent.prototype.writeValue = /**
     * @param {?} obj
     * @return {?}
     */
    function (obj) {
        this.value = (obj === null || obj === undefined) ? '' : obj;
        this.textbox.nativeElement.value = this.value;
        // 在此处执行 onModelChange 则 pristine 状态变为 false 即非第一次加载；导至表单中的错误信息显示出来，
        // 如果必须要执行一次，需要重新ngControl 的状态
        // this.onModelChange(obj);
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    InputGroupComponent.prototype.registerOnChange = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this.onModelChange = fn;
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    InputGroupComponent.prototype.registerOnTouched = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this.onModelTouched = fn;
    };
    /**
     * @param {?} isDisabled
     * @return {?}
     */
    InputGroupComponent.prototype.setDisabledState = /**
     * @param {?} isDisabled
     * @return {?}
     */
    function (isDisabled) {
        this.disabled = isDisabled;
    };
    /**
     * @return {?}
     */
    InputGroupComponent.prototype.setFocusToEnd = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var el = this.textbox.nativeElement;
        el.focus();
        el.selectionStart = el.value.length;
        el.selectionEnd = el.value.length;
    };
    InputGroupComponent.decorators = [
        { type: Component, args: [{
                    selector: 'farrisui-input-group, input-group, farris-input-group',
                    template: "\n        <div #inputGroup [class]=\"customCls + ' input-group'\"\n            [class.f-state-disabled]=\"disabled\"\n            [class.f-state-editable]=\"editable && !disabled && !readonly\"\n            [class.f-state-readonly]=\"readonly && !disabled\">\n            <span class=\"input-group-before-tips\" *ngIf=\"useExtendInfo\" (mouseenter)=\"onMouseOverInExtentInfo()\"\n                farrisPopover [popover]=\"extendInfo\" [triggers]=\"'hover'\" [container]=\"'body'\" [placement]=\"'top'\">\n                <i class=\"f-icon f-icon-info-circle\"></i><b class=\"tips-arrow\"></b>\n            </span>\n\n            <input\n                #textbox\n                name=\"input-group-value\"\n                class=\"form-control f-utils-fill\"\n                [class.text-left]=\"textAlign == 'left'\"\n                [class.text-center]=\"textAlign == 'center'\"\n                [class.text-right]=\"textAlign == 'right'\"\n                [attr.title]=\"enableTitle? value: ''\"\n                [attr.type]=\"inputType\"\n                [attr.placeholder]=\"(disabled||readonly)&&!forcePlaceholder?'':placeholder\"\n                [attr.autocomplete]=\"autocomplete\"\n                [readonly]=\"readonly || !editable\"\n                [ngModel]=\"value\"\n                [disabled]=\"disabled\"\n                (blur)=\"onBlur($event)\"\n                (mousedown)=\"onMousedown($event)\"\n                (ngModelChange)=\"onValueChange($event)\"\n                (keydown.enter)=\"onEnter($event)\"\n                (focus)=\"onInputFocus($event)\"\n                (click)=\"onInputClick($event)\"\n                minlength=\"{{minLength}}\"\n                maxlength=\"{{maxLength}}\"\n                (keyup)=\"keyupHandle.emit($event)\"\n                (keydown)=\"keydownHandle.emit($event)\"\n                [attr.tabindex]=\"tabIndex\"\n            />\n            <div class=\"input-group-append\" [ngClass]=\"{'append-force-show':showButtonWhenDisabled && (readonly||disabled)}\">\n                <span *ngIf=\"enableClear && !readonly && !disabled\"\n                    [style.display]=\"showClearButton ? 'flex' : 'none'\"\n                    class=\"input-group-text input-group-clear\" #clearIcon\n                    (click)=\"onClearValue($event)\" style=\"width:24px\">\n                    <i class=\"f-icon modal_close\"></i>\n                </span>\n                <span class=\"input-group-text\"\n                    (mouseenter)=\"onIconMouseEnter($event)\" (mouseleave)=\"onIconMouseLeave($event)\"\n                    *ngIf=\"groupText && !groupTextTemplate\" [innerHTML]=\"groupText | safe: 'html'\"\n                    (click)=\"onClickHandle($event)\"></span>\n                <ng-container *ngIf=\"groupTextTemplate\">\n                    <ng-container *ngTemplateOutlet=\"groupTextTemplate\" ></ng-container>\n                </ng-container>\n            </div>\n        </div>\n    ",
                    // .input-group-clear:hover {
                    //     background: #e9ecef !important;
                    // }
                    providers: [INPUT_GROUP_VALUE_ACCESSOR],
                    encapsulation: ViewEncapsulation.None,
                    styles: ["\n            .input-group {\n                flex-wrap: nowrap;\n            }\n            .input-group-text {\n                cursor: pointer;\n            }\n            .input-group-clear {\n                cursor: pointer;\n            }\n\n            .input-group-text:hover {\n                background: #ccc;\n            }\n\n            .input-group-clear-right {\n                position: absolute;\n                height: 100%;\n                right: 0;\n                top: 0;\n                z-index: 100;\n            }\n        "]
                }] }
    ];
    /** @nocollapse */
    InputGroupComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: Renderer2 },
        { type: NgZone },
        { type: Injector }
    ]; };
    InputGroupComponent.propDecorators = {
        autocomplete: [{ type: HostBinding, args: ['class.f-cmp-inputgroup',] }, { type: Input }],
        value: [{ type: Input }],
        readonly: [{ type: Input }],
        disabled: [{ type: Input }],
        editable: [{ type: Input }],
        enableClear: [{ type: Input }],
        groupText: [{ type: Input }],
        customCls: [{ type: Input }],
        showButtonWhenDisabled: [{ type: Input }],
        placeholder: [{ type: Input }],
        textAlign: [{ type: Input }],
        groupTextTemplate: [{ type: Input }],
        isPassword: [{ type: Input }],
        enableViewPassword: [{ type: Input }],
        minLength: [{ type: Input }],
        maxLength: [{ type: Input }],
        tabIndex: [{ type: Input }],
        enableTitle: [{ type: Input }],
        useExtendInfo: [{ type: Input }],
        extendInfo: [{ type: Input }],
        forcePlaceholder: [{ type: Input }],
        updateExtendInfo: [{ type: Output }],
        clear: [{ type: Output }],
        valueChange: [{ type: Output }],
        clickHandle: [{ type: Output }],
        blurHandle: [{ type: Output }],
        focusHandle: [{ type: Output }],
        enterHandle: [{ type: Output }],
        iconMouseEnter: [{ type: Output }],
        iconMouseLeave: [{ type: Output }],
        keyupHandle: [{ type: Output }],
        keydownHandle: [{ type: Output }],
        inputClick: [{ type: Output }],
        inputGroup: [{ type: ViewChild, args: ['inputGroup',] }],
        textbox: [{ type: ViewChild, args: ['textbox',] }],
        clearIconRef: [{ type: ViewChild, args: ['clearIcon',] }]
    };
    return InputGroupComponent;
}());
export { InputGroupComponent };
if (false) {
    /** @type {?} */
    InputGroupComponent.prototype.autocomplete;
    /** @type {?} */
    InputGroupComponent.prototype.showClearButton;
    /** @type {?} */
    InputGroupComponent.prototype.ngControl;
    /** @type {?} */
    InputGroupComponent.prototype.value;
    /**
     * 只读
     * @type {?}
     */
    InputGroupComponent.prototype.readonly;
    /**
     * 禁用
     * @type {?}
     */
    InputGroupComponent.prototype.disabled;
    /**
     * 允许编辑
     * @type {?}
     */
    InputGroupComponent.prototype.editable;
    /**
     * 启用清除按钮
     * @type {?}
     */
    InputGroupComponent.prototype.enableClear;
    /**
     * 扩展按钮
     * @type {?}
     */
    InputGroupComponent.prototype.groupText;
    /**
     * 自定义CLASS
     * @type {?}
     */
    InputGroupComponent.prototype.customCls;
    /**
     * 当组件禁用或只读时显示后边的按钮
     * @type {?}
     */
    InputGroupComponent.prototype.showButtonWhenDisabled;
    /**
     * 启用提示信息
     * @type {?}
     */
    InputGroupComponent.prototype.placeholder;
    /**
     * 文本在输入框中的对齐方式
     * @type {?}
     */
    InputGroupComponent.prototype.textAlign;
    /** @type {?} */
    InputGroupComponent.prototype.groupTextTemplate;
    /** @type {?} */
    InputGroupComponent.prototype.isPassword;
    /** @type {?} */
    InputGroupComponent.prototype.enableViewPassword;
    /** @type {?} */
    InputGroupComponent.prototype.minLength;
    /** @type {?} */
    InputGroupComponent.prototype.maxLength;
    /** @type {?} */
    InputGroupComponent.prototype.tabIndex;
    /** @type {?} */
    InputGroupComponent.prototype.enableTitle;
    /**
     * 扩展信息；在输入框前面 显示 ① 图标鼠标滑过后显示
     * @type {?}
     */
    InputGroupComponent.prototype.useExtendInfo;
    /** @type {?} */
    InputGroupComponent.prototype.extendInfo;
    /** @type {?} */
    InputGroupComponent.prototype.forcePlaceholder;
    /** @type {?} */
    InputGroupComponent.prototype.updateExtendInfo;
    /** @type {?} */
    InputGroupComponent.prototype.clear;
    /** @type {?} */
    InputGroupComponent.prototype.valueChange;
    /** @type {?} */
    InputGroupComponent.prototype.clickHandle;
    /** @type {?} */
    InputGroupComponent.prototype.blurHandle;
    /** @type {?} */
    InputGroupComponent.prototype.focusHandle;
    /** @type {?} */
    InputGroupComponent.prototype.enterHandle;
    /** @type {?} */
    InputGroupComponent.prototype.iconMouseEnter;
    /** @type {?} */
    InputGroupComponent.prototype.iconMouseLeave;
    /** @type {?} */
    InputGroupComponent.prototype.keyupHandle;
    /** @type {?} */
    InputGroupComponent.prototype.keydownHandle;
    /** @type {?} */
    InputGroupComponent.prototype.inputClick;
    /** @type {?} */
    InputGroupComponent.prototype.inputGroup;
    /** @type {?} */
    InputGroupComponent.prototype.textbox;
    /** @type {?} */
    InputGroupComponent.prototype.clearIconRef;
    /** @type {?} */
    InputGroupComponent.prototype.inputType;
    /**
     * @type {?}
     * @private
     */
    InputGroupComponent.prototype.state;
    /** @type {?} */
    InputGroupComponent.prototype.cd;
    /**
     * @type {?}
     * @private
     */
    InputGroupComponent.prototype.focusCls;
    /**
     * @type {?}
     * @private
     */
    InputGroupComponent.prototype.ro;
    /** @type {?} */
    InputGroupComponent.prototype.onModelChange;
    /** @type {?} */
    InputGroupComponent.prototype.onModelTouched;
    /** @type {?} */
    InputGroupComponent.prototype.el;
    /**
     * @type {?}
     * @private
     */
    InputGroupComponent.prototype.renderer;
    /**
     * @type {?}
     * @private
     */
    InputGroupComponent.prototype.ngZone;
    /**
     * @type {?}
     * @private
     */
    InputGroupComponent.prototype.injector;
}
//# sourceMappingURL=data:application/json;base64,