/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input, ViewChild, Injector, EventEmitter, Output, ChangeDetectorRef } from '@angular/core';
import { MultiSelectComponent } from '@farris/ui-multi-select';
var DatagridViewColumnsComponent = /** @class */ (function () {
    function DatagridViewColumnsComponent(injector, cd) {
        this.injector = injector;
        this.cd = cd;
        this.idField = 'field';
        this.valueField = 'field';
        this.textField = 'title';
        this._selectedIds = [];
        this.treeData = [];
        this.selectedIdsChange = new EventEmitter();
    }
    Object.defineProperty(DatagridViewColumnsComponent.prototype, "selectedIds", {
        get: /**
         * @return {?}
         */
        function () {
            return this._selectedIds;
        },
        set: /**
         * @param {?} vals
         * @return {?}
         */
        function (vals) {
            this._selectedIds = vals;
            this.selectedIdsChange.emit(vals);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    DatagridViewColumnsComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () { };
    /**
     * @param {?} changes
     * @return {?}
     */
    DatagridViewColumnsComponent.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    DatagridViewColumnsComponent.prototype.onBeforeMove = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
    };
    /**
     * @param {?} $event
     * @param {?} column
     * @return {?}
     */
    DatagridViewColumnsComponent.prototype.hiddenColumn = /**
     * @param {?} $event
     * @param {?} column
     * @return {?}
     */
    function ($event, column) {
        $event.stopPropagation();
        this.ms.moveToLeft(column);
    };
    DatagridViewColumnsComponent.decorators = [
        { type: Component, args: [{
                    selector: 'view-columns',
                    template: "<multi-select [dataSource]=\"treeData\" [idField]=\"idField\" [valueField]=\"valueField\"\r\n[textField]=\"textField\" [displayType]=\"'Tree'\" style=\"height: 100%\" [height]=\"0\" [showCheckbox]=\"false\"\r\n[(selectedId)]=\"selectedIds\" [leftTitle]=\"'datagrid.settings.canchoose'|locale\" \r\n[rightTitle]=\"'datagrid.settings.choosed'|locale\" #ms (beforeMove)=\"onBeforeMove($event)\">\r\n    <ng-template farrisTemplate=\"text\" let-data let-side=\"side\" let-selected=\"selected\">\r\n        <ng-container *ngIf=\"side === 'L'\">\r\n            {{ data[textField] }}\r\n        </ng-container>\r\n        <ng-container *ngIf=\"side === 'R' \">\r\n\r\n            {{ data[textField] }} \r\n\r\n\r\n            <span class=\"sort-btns\" >\r\n                <a href=\"javascript: void(0)\" class=\" p-1\" (click)=\"hiddenColumn($event, data)\">\r\n                    <span class=\"f-icon f-icon-close\"></span>\r\n                </a>\r\n            </span>\r\n\r\n        </ng-container>\r\n    </ng-template>\r\n</multi-select>"
                }] }
    ];
    /** @nocollapse */
    DatagridViewColumnsComponent.ctorParameters = function () { return [
        { type: Injector },
        { type: ChangeDetectorRef }
    ]; };
    DatagridViewColumnsComponent.propDecorators = {
        idField: [{ type: Input }],
        valueField: [{ type: Input }],
        textField: [{ type: Input }],
        selectedIds: [{ type: Input }],
        treeData: [{ type: Input }],
        ms: [{ type: ViewChild, args: ['ms',] }],
        selectedIdsChange: [{ type: Output }]
    };
    return DatagridViewColumnsComponent;
}());
export { DatagridViewColumnsComponent };
if (false) {
    /** @type {?} */
    DatagridViewColumnsComponent.prototype.idField;
    /** @type {?} */
    DatagridViewColumnsComponent.prototype.valueField;
    /** @type {?} */
    DatagridViewColumnsComponent.prototype.textField;
    /**
     * @type {?}
     * @private
     */
    DatagridViewColumnsComponent.prototype._selectedIds;
    /** @type {?} */
    DatagridViewColumnsComponent.prototype.treeData;
    /** @type {?} */
    DatagridViewColumnsComponent.prototype.ms;
    /** @type {?} */
    DatagridViewColumnsComponent.prototype.selectedIdsChange;
    /**
     * @type {?}
     * @private
     */
    DatagridViewColumnsComponent.prototype.injector;
    /**
     * @type {?}
     * @private
     */
    DatagridViewColumnsComponent.prototype.cd;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0YWdyaWQtdmlldy1jb2x1bW5zLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BmYXJyaXMvdWktZGF0YWdyaWQtc2V0dGluZ3MvIiwic291cmNlcyI6WyJsaWIvZGF0YWdyaWQtdmlldy1jb2x1bW5zLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFVLFNBQVMsRUFBRSxLQUFLLEVBQUUsU0FBUyxFQUFFLFFBQVEsRUFBRSxZQUFZLEVBQ2hFLE1BQU0sRUFBRSxpQkFBaUIsRUFBNEIsTUFBTSxlQUFlLENBQUM7QUFDL0UsT0FBTyxFQUFFLG9CQUFvQixFQUFFLE1BQU0seUJBQXlCLENBQUM7QUFDL0Q7SUF3Qkksc0NBQW9CLFFBQWtCLEVBQVUsRUFBcUI7UUFBakQsYUFBUSxHQUFSLFFBQVEsQ0FBVTtRQUFVLE9BQUUsR0FBRixFQUFFLENBQW1CO1FBbkI1RCxZQUFPLEdBQUcsT0FBTyxDQUFDO1FBQ2xCLGVBQVUsR0FBRyxPQUFPLENBQUM7UUFDckIsY0FBUyxHQUFHLE9BQU8sQ0FBQztRQUdyQixpQkFBWSxHQUFHLEVBQUUsQ0FBQztRQVNqQixhQUFRLEdBQUcsRUFBRSxDQUFDO1FBR2Isc0JBQWlCLEdBQUcsSUFBSSxZQUFZLEVBQUUsQ0FBQztJQUV1QixDQUFDO0lBYnpFLHNCQUFJLHFEQUFXOzs7O1FBQWY7WUFDSSxPQUFPLElBQUksQ0FBQyxZQUFZLENBQUM7UUFDN0IsQ0FBQzs7Ozs7UUFDRCxVQUF5QixJQUFJO1lBQ3pCLElBQUksQ0FBQyxZQUFZLEdBQUcsSUFBSSxDQUFDO1lBQ3pCLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDdEMsQ0FBQzs7O09BSkE7Ozs7SUFjRCwrQ0FBUTs7O0lBQVIsY0FBWSxDQUFDOzs7OztJQUViLGtEQUFXOzs7O0lBQVgsVUFBWSxPQUFzQjtJQUVsQyxDQUFDOzs7OztJQUVELG1EQUFZOzs7O0lBQVosVUFBYSxNQUFNO0lBRW5CLENBQUM7Ozs7OztJQUVELG1EQUFZOzs7OztJQUFaLFVBQWEsTUFBa0IsRUFBRSxNQUFXO1FBQ3hDLE1BQU0sQ0FBQyxlQUFlLEVBQUUsQ0FBQztRQUN6QixJQUFJLENBQUMsRUFBRSxDQUFDLFVBQVUsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUMvQixDQUFDOztnQkF4Q0osU0FBUyxTQUFDO29CQUNQLFFBQVEsRUFBRSxjQUFjO29CQUN4QiwwaENBQXFEO2lCQUN4RDs7OztnQkFONkMsUUFBUTtnQkFDMUMsaUJBQWlCOzs7MEJBT3hCLEtBQUs7NkJBQ0wsS0FBSzs0QkFDTCxLQUFLOzhCQU9MLEtBQUs7MkJBS0wsS0FBSztxQkFDTCxTQUFTLFNBQUMsSUFBSTtvQ0FFZCxNQUFNOztJQW1CWCxtQ0FBQztDQUFBLEFBekNELElBeUNDO1NBckNZLDRCQUE0Qjs7O0lBQ3JDLCtDQUEyQjs7SUFDM0Isa0RBQThCOztJQUM5QixpREFBNkI7Ozs7O0lBRzdCLG9EQUEwQjs7SUFTMUIsZ0RBQXVCOztJQUN2QiwwQ0FBMEM7O0lBRTFDLHlEQUFpRDs7Ozs7SUFFckMsZ0RBQTBCOzs7OztJQUFFLDBDQUE2QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE9uSW5pdCwgQ29tcG9uZW50LCBJbnB1dCwgVmlld0NoaWxkLCBJbmplY3RvciwgRXZlbnRFbWl0dGVyLFxyXG4gICAgT3V0cHV0LCBDaGFuZ2VEZXRlY3RvclJlZiwgT25DaGFuZ2VzLCBTaW1wbGVDaGFuZ2VzIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IE11bHRpU2VsZWN0Q29tcG9uZW50IH0gZnJvbSAnQGZhcnJpcy91aS1tdWx0aS1zZWxlY3QnO1xyXG5AQ29tcG9uZW50KHtcclxuICAgIHNlbGVjdG9yOiAndmlldy1jb2x1bW5zJyxcclxuICAgIHRlbXBsYXRlVXJsOiAnLi9kYXRhZ3JpZC12aWV3LWNvbHVtbnMuY29tcG9uZW50Lmh0bWwnLFxyXG59KVxyXG5leHBvcnQgY2xhc3MgRGF0YWdyaWRWaWV3Q29sdW1uc0NvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCwgT25DaGFuZ2VzIHtcclxuICAgIEBJbnB1dCgpIGlkRmllbGQgPSAnZmllbGQnO1xyXG4gICAgQElucHV0KCkgdmFsdWVGaWVsZCA9ICdmaWVsZCc7XHJcbiAgICBASW5wdXQoKSB0ZXh0RmllbGQgPSAndGl0bGUnO1xyXG5cclxuXHJcbiAgICBwcml2YXRlIF9zZWxlY3RlZElkcyA9IFtdO1xyXG4gICAgZ2V0IHNlbGVjdGVkSWRzKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9zZWxlY3RlZElkcztcclxuICAgIH1cclxuICAgIEBJbnB1dCgpIHNldCBzZWxlY3RlZElkcyh2YWxzKSB7XHJcbiAgICAgICAgdGhpcy5fc2VsZWN0ZWRJZHMgPSB2YWxzO1xyXG4gICAgICAgIHRoaXMuc2VsZWN0ZWRJZHNDaGFuZ2UuZW1pdCh2YWxzKTtcclxuICAgIH1cclxuXHJcbiAgICBASW5wdXQoKSB0cmVlRGF0YSA9IFtdO1xyXG4gICAgQFZpZXdDaGlsZCgnbXMnKSBtczogTXVsdGlTZWxlY3RDb21wb25lbnQ7XHJcblxyXG4gICAgQE91dHB1dCgpIHNlbGVjdGVkSWRzQ2hhbmdlID0gbmV3IEV2ZW50RW1pdHRlcigpO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgaW5qZWN0b3I6IEluamVjdG9yLCBwcml2YXRlIGNkOiBDaGFuZ2VEZXRlY3RvclJlZikge31cclxuXHJcblxyXG4gICAgbmdPbkluaXQoKSB7fVxyXG5cclxuICAgIG5nT25DaGFuZ2VzKGNoYW5nZXM6IFNpbXBsZUNoYW5nZXMpIHtcclxuXHJcbiAgICB9XHJcblxyXG4gICAgb25CZWZvcmVNb3ZlKCRldmVudCkge1xyXG5cclxuICAgIH1cclxuXHJcbiAgICBoaWRkZW5Db2x1bW4oJGV2ZW50OiBNb3VzZUV2ZW50LCBjb2x1bW46IGFueSkge1xyXG4gICAgICAgICRldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcclxuICAgICAgICB0aGlzLm1zLm1vdmVUb0xlZnQoY29sdW1uKTtcclxuICAgIH1cclxufVxyXG4iXX0=