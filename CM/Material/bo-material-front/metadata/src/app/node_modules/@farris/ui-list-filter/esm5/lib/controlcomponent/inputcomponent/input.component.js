/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input, HostBinding, EventEmitter, Output, ElementRef } from '@angular/core';
import { SolutionService } from '../../service/solution.service';
var InputComponent = /** @class */ (function () {
    function InputComponent(solutionService, element) {
        this.solutionService = solutionService;
        this.element = element;
        this.searchHandle = new EventEmitter();
        /**
         * 判断是否是在扩展区域展示
         */
        this.extend = false;
        /**
         * 判断是否显示label
         */
        this.showlabel = true;
    }
    Object.defineProperty(InputComponent.prototype, "isExtend", {
        get: /**
         * @return {?}
         */
        function () {
            return !this.extend && this.autoLabel;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(InputComponent.prototype, "hidenLabel", {
        get: /**
         * @return {?}
         */
        function () {
            return !this.showlabel;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    InputComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        //console.log(this.item);
        if (this.item) {
            /** @type {?} */
            var type = Object.prototype.toString.call(this.item.placeHolder);
            if (type == '[object Undefined]') {
                if (this.item.control && this.item.control.hasOwnProperty('placeholder')) {
                    this.placeholder = this.item.control.placeholder;
                }
            }
            else {
                this.placeholder = this.item.placeHolder;
            }
        }
        if (this.item && this.item.control && this.item.control.hasOwnProperty('isExtend')) {
            this.extend = this.item.control.isExtend;
            if (!this.extend) {
                this.showlabel = this.item.control.showLabel;
            }
        }
        this.solutionService.addFilterEditorInstance(this.item.fieldCode, this);
        // (this.item.value as HelpValue).clear$.subscribe(() => {
        //     this.textValue = '';
        // });
    };
    /**
     * @return {?}
     */
    InputComponent.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        // if(!this.extend){
        //     const El = this.element.nativeElement;
        //     const itemWidth = El.clientWidth;
        //     El.querySelector('.list-filter-input-item').style.width = itemWidth + 'px';
        //     El.querySelector('.input-item-btns').style.width = itemWidth + 100 + 'px';
        // }
    };
    /**
     * @return {?}
     */
    InputComponent.prototype.ngOnChanges = /**
     * @return {?}
     */
    function () {
    };
    // getConditionItemStyle(field: QueryCondition, controlType: any) {
    //     return this.solutionService.getConditionItemStyle(field,controlType);
    // }
    // getConditionItemStyle(field: QueryCondition, controlType: any) {
    //     return this.solutionService.getConditionItemStyle(field,controlType);
    // }
    /**
     * @param {?} field
     * @return {?}
     */
    InputComponent.prototype.getConditionItemTitle = 
    // getConditionItemStyle(field: QueryCondition, controlType: any) {
    //     return this.solutionService.getConditionItemStyle(field,controlType);
    // }
    /**
     * @param {?} field
     * @return {?}
     */
    function (field) {
        return this.solutionService.getConditionItemTitle(field);
    };
    /**
     * @param {?} e
     * @return {?}
     */
    InputComponent.prototype.InputChanged = /**
     * @param {?} e
     * @return {?}
     */
    function (e) {
        // let keycode = window.event ? e.keyCode : e.which;
        // if(keycode == 13){//回车键
        //     this.searchHandle.emit(this.item.value.value);
        // }
        if (this.disabled) {
            return;
        }
        this.searchHandle.emit(this.item.value.value);
    };
    InputComponent.decorators = [
        { type: Component, args: [{
                    selector: 'app-filter-input',
                    template: "<label class=\"col-form-label\" *ngIf=\"item && showlabel\" title=\"{{getConditionItemTitle(item)}}\">\r\n    <span class=\"farris-label-info text-danger\" *ngIf=\"item.control.required\">*</span>\r\n    <span class=\"farris-label-text\">{{item.fieldName}}</span>\r\n</label>\r\n<div class=\"farris-input-wrap\" *ngIf=\"item\">\r\n    <input class=\"form-control\" \r\n    type=\"text\" \r\n    [disabled]=\"disabled\"\r\n    [(ngModel)]=\"item.value.value\" \r\n    [placeholder]=\"placeholder\"\r\n    (keyup.enter)=\"InputChanged($event)\"\r\n    (blur)=\"InputChanged($event)\"\r\n    >\r\n</div>",
                    styles: [""]
                }] }
    ];
    /** @nocollapse */
    InputComponent.ctorParameters = function () { return [
        { type: SolutionService },
        { type: ElementRef }
    ]; };
    InputComponent.propDecorators = {
        item: [{ type: Input }],
        autoLabel: [{ type: Input }],
        disabled: [{ type: Input }],
        searchHandle: [{ type: Output, args: ['searchHandle',] }],
        isExtend: [{ type: HostBinding, args: ['class.filter-item-wrap',] }],
        hidenLabel: [{ type: HostBinding, args: ['class.filter-item-hiddenlabel',] }]
    };
    return InputComponent;
}());
export { InputComponent };
if (false) {
    /**
     * QueryCondition类型
     * @type {?}
     */
    InputComponent.prototype.item;
    /** @type {?} */
    InputComponent.prototype.autoLabel;
    /** @type {?} */
    InputComponent.prototype.disabled;
    /** @type {?} */
    InputComponent.prototype.searchHandle;
    /**
     * 判断是否是在扩展区域展示
     * @type {?}
     */
    InputComponent.prototype.extend;
    /**
     * 判断是否显示label
     * @type {?}
     */
    InputComponent.prototype.showlabel;
    /** @type {?} */
    InputComponent.prototype.placeholder;
    /**
     * @type {?}
     * @private
     */
    InputComponent.prototype.solutionService;
    /**
     * @type {?}
     * @private
     */
    InputComponent.prototype.element;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5wdXQuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGZhcnJpcy91aS1saXN0LWZpbHRlci8iLCJzb3VyY2VzIjpbImxpYi9jb250cm9sY29tcG9uZW50L2lucHV0Y29tcG9uZW50L2lucHV0LmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxLQUFLLEVBQXFCLFdBQVcsRUFBRSxZQUFZLEVBQUUsTUFBTSxFQUFpQixVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFbEksT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLGdDQUFnQyxDQUFDO0FBRWpFO0lBK0JJLHdCQUFvQixlQUFnQyxFQUFtQixPQUFtQjtRQUF0RSxvQkFBZSxHQUFmLGVBQWUsQ0FBaUI7UUFBbUIsWUFBTyxHQUFQLE9BQU8sQ0FBWTtRQWpCbEUsaUJBQVksR0FBRyxJQUFJLFlBQVksRUFBRSxDQUFDOzs7O1FBRzFELFdBQU0sR0FBWSxLQUFLLENBQUM7Ozs7UUFFeEIsY0FBUyxHQUFZLElBQUksQ0FBQztJQVlvRSxDQUFDO0lBVC9GLHNCQUNJLG9DQUFROzs7O1FBRFo7WUFFSSxPQUFPLENBQUMsSUFBSSxDQUFDLE1BQU0sSUFBSSxJQUFJLENBQUMsU0FBUyxDQUFDO1FBQzFDLENBQUM7OztPQUFBO0lBQ0Qsc0JBQ0ksc0NBQVU7Ozs7UUFEZDtZQUVJLE9BQU8sQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDO1FBQzNCLENBQUM7OztPQUFBOzs7O0lBSUQsaUNBQVE7OztJQUFSO1FBQ0kseUJBQXlCO1FBQ3pCLElBQUksSUFBSSxDQUFDLElBQUksRUFBRTs7Z0JBQ0wsSUFBSSxHQUFHLE1BQU0sQ0FBQyxTQUFTLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQztZQUNsRSxJQUFJLElBQUksSUFBSSxvQkFBb0IsRUFBRTtnQkFDOUIsSUFBSSxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sSUFBSSxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxjQUFjLENBQUMsYUFBYSxDQUFDLEVBQUU7b0JBQ3RFLElBQUksQ0FBQyxXQUFXLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsV0FBVyxDQUFDO2lCQUNwRDthQUNKO2lCQUNJO2dCQUNELElBQUksQ0FBQyxXQUFXLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUM7YUFDNUM7U0FDSjtRQUNELElBQUksSUFBSSxDQUFDLElBQUksSUFBSSxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sSUFBSSxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxjQUFjLENBQUMsVUFBVSxDQUFDLEVBQUU7WUFDaEYsSUFBSSxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUM7WUFDekMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUU7Z0JBQ2QsSUFBSSxDQUFDLFNBQVMsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUM7YUFDaEQ7U0FDSjtRQUNELElBQUksQ0FBQyxlQUFlLENBQUMsdUJBQXVCLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUUsSUFBSSxDQUFDLENBQUM7UUFFeEUsMERBQTBEO1FBQzFELDJCQUEyQjtRQUMzQixNQUFNO0lBQ1YsQ0FBQzs7OztJQUNELHdDQUFlOzs7SUFBZjtRQUNJLG9CQUFvQjtRQUNwQiw2Q0FBNkM7UUFDN0Msd0NBQXdDO1FBQ3hDLGtGQUFrRjtRQUNsRixpRkFBaUY7UUFDakYsSUFBSTtJQUNSLENBQUM7Ozs7SUFDRCxvQ0FBVzs7O0lBQVg7SUFFQSxDQUFDO0lBRUQsbUVBQW1FO0lBQ25FLDRFQUE0RTtJQUM1RSxJQUFJOzs7Ozs7OztJQUVKLDhDQUFxQjs7Ozs7Ozs7SUFBckIsVUFBc0IsS0FBcUI7UUFDdkMsT0FBTyxJQUFJLENBQUMsZUFBZSxDQUFDLHFCQUFxQixDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQzdELENBQUM7Ozs7O0lBRUQscUNBQVk7Ozs7SUFBWixVQUFhLENBQUM7UUFDVixvREFBb0Q7UUFDcEQsMEJBQTBCO1FBQzFCLHFEQUFxRDtRQUNyRCxJQUFJO1FBQ0osSUFBSSxJQUFJLENBQUMsUUFBUSxFQUFFO1lBQUUsT0FBTztTQUFFO1FBQzlCLElBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ2xELENBQUM7O2dCQXJGSixTQUFTLFNBQUM7b0JBQ1AsUUFBUSxFQUFFLGtCQUFrQjtvQkFDNUIsb21CQUFxQzs7aUJBRXhDOzs7O2dCQU5RLGVBQWU7Z0JBRndFLFVBQVU7Ozt1QkFlckcsS0FBSzs0QkFDTCxLQUFLOzJCQUNMLEtBQUs7K0JBQ0wsTUFBTSxTQUFDLGNBQWM7MkJBUXJCLFdBQVcsU0FBQyx3QkFBd0I7NkJBSXBDLFdBQVcsU0FBQywrQkFBK0I7O0lBNERoRCxxQkFBQztDQUFBLEFBdEZELElBc0ZDO1NBaEZZLGNBQWM7Ozs7OztJQUt2Qiw4QkFBbUI7O0lBQ25CLG1DQUE0Qjs7SUFDNUIsa0NBQTJCOztJQUMzQixzQ0FBMEQ7Ozs7O0lBRzFELGdDQUF3Qjs7Ozs7SUFFeEIsbUNBQTBCOztJQUMxQixxQ0FBb0I7Ozs7O0lBV1IseUNBQXdDOzs7OztJQUFFLGlDQUFvQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCwgSW5wdXQsIE9uSW5pdCwgT25DaGFuZ2VzLCBIb3N0QmluZGluZywgRXZlbnRFbWl0dGVyLCBPdXRwdXQsIEFmdGVyVmlld0luaXQsIEVsZW1lbnRSZWYgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgUXVlcnlDb25kaXRpb24gfSBmcm9tICcuLi8uLi9lbnRpdHkvcXVlcnljb25kaXRpb24nO1xyXG5pbXBvcnQgeyBTb2x1dGlvblNlcnZpY2UgfSBmcm9tICcuLi8uLi9zZXJ2aWNlL3NvbHV0aW9uLnNlcnZpY2UnO1xyXG5cclxuQENvbXBvbmVudCh7XHJcbiAgICBzZWxlY3RvcjogJ2FwcC1maWx0ZXItaW5wdXQnLFxyXG4gICAgdGVtcGxhdGVVcmw6ICcuL2lucHV0LmNvbXBvbmVudC5odG1sJyxcclxuICAgIHN0eWxlVXJsczogWycuL2lucHV0LmNvbXBvbmVudC5zY3NzJ11cclxufSlcclxuXHJcbmV4cG9ydCBjbGFzcyBJbnB1dENvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCwgT25DaGFuZ2VzLCBBZnRlclZpZXdJbml0IHtcclxuXHJcbiAgICAvKipcclxuICAgICAqIFF1ZXJ5Q29uZGl0aW9u57G75Z6LXHJcbiAgICAgKi9cclxuICAgIEBJbnB1dCgpIGl0ZW06IGFueTtcclxuICAgIEBJbnB1dCgpIGF1dG9MYWJlbDogYm9vbGVhbjtcclxuICAgIEBJbnB1dCgpIGRpc2FibGVkOiBib29sZWFuO1xyXG4gICAgQE91dHB1dCgnc2VhcmNoSGFuZGxlJykgc2VhcmNoSGFuZGxlID0gbmV3IEV2ZW50RW1pdHRlcigpO1xyXG5cclxuICAgIC8qKuWIpOaWreaYr+WQpuaYr+WcqOaJqeWxleWMuuWfn+WxleekuiAqL1xyXG4gICAgZXh0ZW5kOiBib29sZWFuID0gZmFsc2U7XHJcbiAgICAvKirliKTmlq3mmK/lkKbmmL7npLpsYWJlbCAqL1xyXG4gICAgc2hvd2xhYmVsOiBib29sZWFuID0gdHJ1ZTtcclxuICAgIHBsYWNlaG9sZGVyOiBzdHJpbmc7XHJcblxyXG4gICAgQEhvc3RCaW5kaW5nKCdjbGFzcy5maWx0ZXItaXRlbS13cmFwJylcclxuICAgIGdldCBpc0V4dGVuZCgpOiBib29sZWFuIHtcclxuICAgICAgICByZXR1cm4gIXRoaXMuZXh0ZW5kICYmIHRoaXMuYXV0b0xhYmVsO1xyXG4gICAgfVxyXG4gICAgQEhvc3RCaW5kaW5nKCdjbGFzcy5maWx0ZXItaXRlbS1oaWRkZW5sYWJlbCcpXHJcbiAgICBnZXQgaGlkZW5MYWJlbCgpOiBib29sZWFuIHtcclxuICAgICAgICByZXR1cm4gIXRoaXMuc2hvd2xhYmVsO1xyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgc29sdXRpb25TZXJ2aWNlOiBTb2x1dGlvblNlcnZpY2UsIHByaXZhdGUgcmVhZG9ubHkgZWxlbWVudDogRWxlbWVudFJlZikgeyB9XHJcblxyXG4gICAgbmdPbkluaXQoKTogdm9pZCB7XHJcbiAgICAgICAgLy9jb25zb2xlLmxvZyh0aGlzLml0ZW0pO1xyXG4gICAgICAgIGlmICh0aGlzLml0ZW0pIHtcclxuICAgICAgICAgICAgY29uc3QgdHlwZSA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh0aGlzLml0ZW0ucGxhY2VIb2xkZXIpO1xyXG4gICAgICAgICAgICBpZiAodHlwZSA9PSAnW29iamVjdCBVbmRlZmluZWRdJykge1xyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuaXRlbS5jb250cm9sICYmIHRoaXMuaXRlbS5jb250cm9sLmhhc093blByb3BlcnR5KCdwbGFjZWhvbGRlcicpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5wbGFjZWhvbGRlciA9IHRoaXMuaXRlbS5jb250cm9sLnBsYWNlaG9sZGVyO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5wbGFjZWhvbGRlciA9IHRoaXMuaXRlbS5wbGFjZUhvbGRlcjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodGhpcy5pdGVtICYmIHRoaXMuaXRlbS5jb250cm9sICYmIHRoaXMuaXRlbS5jb250cm9sLmhhc093blByb3BlcnR5KCdpc0V4dGVuZCcpKSB7XHJcbiAgICAgICAgICAgIHRoaXMuZXh0ZW5kID0gdGhpcy5pdGVtLmNvbnRyb2wuaXNFeHRlbmQ7XHJcbiAgICAgICAgICAgIGlmICghdGhpcy5leHRlbmQpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuc2hvd2xhYmVsID0gdGhpcy5pdGVtLmNvbnRyb2wuc2hvd0xhYmVsO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuc29sdXRpb25TZXJ2aWNlLmFkZEZpbHRlckVkaXRvckluc3RhbmNlKHRoaXMuaXRlbS5maWVsZENvZGUsIHRoaXMpO1xyXG5cclxuICAgICAgICAvLyAodGhpcy5pdGVtLnZhbHVlIGFzIEhlbHBWYWx1ZSkuY2xlYXIkLnN1YnNjcmliZSgoKSA9PiB7XHJcbiAgICAgICAgLy8gICAgIHRoaXMudGV4dFZhbHVlID0gJyc7XHJcbiAgICAgICAgLy8gfSk7XHJcbiAgICB9XHJcbiAgICBuZ0FmdGVyVmlld0luaXQoKSB7XHJcbiAgICAgICAgLy8gaWYoIXRoaXMuZXh0ZW5kKXtcclxuICAgICAgICAvLyAgICAgY29uc3QgRWwgPSB0aGlzLmVsZW1lbnQubmF0aXZlRWxlbWVudDtcclxuICAgICAgICAvLyAgICAgY29uc3QgaXRlbVdpZHRoID0gRWwuY2xpZW50V2lkdGg7XHJcbiAgICAgICAgLy8gICAgIEVsLnF1ZXJ5U2VsZWN0b3IoJy5saXN0LWZpbHRlci1pbnB1dC1pdGVtJykuc3R5bGUud2lkdGggPSBpdGVtV2lkdGggKyAncHgnO1xyXG4gICAgICAgIC8vICAgICBFbC5xdWVyeVNlbGVjdG9yKCcuaW5wdXQtaXRlbS1idG5zJykuc3R5bGUud2lkdGggPSBpdGVtV2lkdGggKyAxMDAgKyAncHgnO1xyXG4gICAgICAgIC8vIH1cclxuICAgIH1cclxuICAgIG5nT25DaGFuZ2VzKCk6IHZvaWQge1xyXG5cclxuICAgIH1cclxuXHJcbiAgICAvLyBnZXRDb25kaXRpb25JdGVtU3R5bGUoZmllbGQ6IFF1ZXJ5Q29uZGl0aW9uLCBjb250cm9sVHlwZTogYW55KSB7XHJcbiAgICAvLyAgICAgcmV0dXJuIHRoaXMuc29sdXRpb25TZXJ2aWNlLmdldENvbmRpdGlvbkl0ZW1TdHlsZShmaWVsZCxjb250cm9sVHlwZSk7XHJcbiAgICAvLyB9XHJcblxyXG4gICAgZ2V0Q29uZGl0aW9uSXRlbVRpdGxlKGZpZWxkOiBRdWVyeUNvbmRpdGlvbikge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnNvbHV0aW9uU2VydmljZS5nZXRDb25kaXRpb25JdGVtVGl0bGUoZmllbGQpO1xyXG4gICAgfVxyXG5cclxuICAgIElucHV0Q2hhbmdlZChlKSB7XHJcbiAgICAgICAgLy8gbGV0IGtleWNvZGUgPSB3aW5kb3cuZXZlbnQgPyBlLmtleUNvZGUgOiBlLndoaWNoO1xyXG4gICAgICAgIC8vIGlmKGtleWNvZGUgPT0gMTMpey8v5Zue6L2m6ZSuXHJcbiAgICAgICAgLy8gICAgIHRoaXMuc2VhcmNoSGFuZGxlLmVtaXQodGhpcy5pdGVtLnZhbHVlLnZhbHVlKTtcclxuICAgICAgICAvLyB9XHJcbiAgICAgICAgaWYgKHRoaXMuZGlzYWJsZWQpIHsgcmV0dXJuOyB9XHJcbiAgICAgICAgdGhpcy5zZWFyY2hIYW5kbGUuZW1pdCh0aGlzLml0ZW0udmFsdWUudmFsdWUpO1xyXG4gICAgfVxyXG59Il19