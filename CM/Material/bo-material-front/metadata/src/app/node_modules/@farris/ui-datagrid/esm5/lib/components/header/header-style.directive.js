/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, ElementRef, Renderer2, Injector, Input } from '@angular/core';
var HeaderStyleDirective = /** @class */ (function () {
    function HeaderStyleDirective(el, render, inject) {
        this.el = el;
        this.render = render;
        this.inject = inject;
    }
    /**
     * @return {?}
     */
    HeaderStyleDirective.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.renderCss2Element();
    };
    /**
     * @private
     * @return {?}
     */
    HeaderStyleDirective.prototype.renderCss2Element = /**
     * @private
     * @return {?}
     */
    function () {
        if (this.column && this.column.headerStyler) {
            /** @type {?} */
            var styler = this.column.headerStyler;
            /** @type {?} */
            var dom = this.el.nativeElement;
            /** @type {?} */
            var st = typeof this.column.headerStyler;
            if (st === 'string') {
                this.render.addClass(this.el.nativeElement, (/** @type {?} */ (styler)));
            }
            else if (st === 'function') {
                /** @type {?} */
                var r = ((/** @type {?} */ (this.column.headerStyler)))(this.column);
                if (r.cls) {
                    this.render.addClass(this.el.nativeElement, r.cls);
                }
                if (r.style) {
                    this.renderStyle(dom, r.style);
                }
            }
            else if (st === 'object' && Object.keys(st).length) {
                this.renderStyle(dom, styler);
            }
        }
    };
    /**
     * @private
     * @param {?} targetEl
     * @param {?} styleObj
     * @return {?}
     */
    HeaderStyleDirective.prototype.renderStyle = /**
     * @private
     * @param {?} targetEl
     * @param {?} styleObj
     * @return {?}
     */
    function (targetEl, styleObj) {
        var _this = this;
        /** @type {?} */
        var cssKeys = Object.keys(styleObj);
        cssKeys.forEach((/**
         * @param {?} k
         * @return {?}
         */
        function (k) {
            _this.render.setStyle(targetEl, k, styleObj[k]);
        }));
    };
    HeaderStyleDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[header-style]',
                    exportAs: 'HeaderStyler'
                },] }
    ];
    /** @nocollapse */
    HeaderStyleDirective.ctorParameters = function () { return [
        { type: ElementRef },
        { type: Renderer2 },
        { type: Injector }
    ]; };
    HeaderStyleDirective.propDecorators = {
        column: [{ type: Input, args: ['header-style',] }]
    };
    return HeaderStyleDirective;
}());
export { HeaderStyleDirective };
if (false) {
    /** @type {?} */
    HeaderStyleDirective.prototype.column;
    /**
     * @type {?}
     * @private
     */
    HeaderStyleDirective.prototype.el;
    /**
     * @type {?}
     * @private
     */
    HeaderStyleDirective.prototype.render;
    /**
     * @type {?}
     * @private
     */
    HeaderStyleDirective.prototype.inject;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGVhZGVyLXN0eWxlLmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BmYXJyaXMvdWktZGF0YWdyaWQvIiwic291cmNlcyI6WyJsaWIvY29tcG9uZW50cy9oZWFkZXIvaGVhZGVyLXN0eWxlLmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxVQUFVLEVBQUUsU0FBUyxFQUFFLFFBQVEsRUFBRSxLQUFLLEVBQVUsTUFBTSxlQUFlLENBQUM7QUFHMUY7SUFPSSw4QkFBb0IsRUFBYyxFQUFVLE1BQWlCLEVBQVUsTUFBZ0I7UUFBbkUsT0FBRSxHQUFGLEVBQUUsQ0FBWTtRQUFVLFdBQU0sR0FBTixNQUFNLENBQVc7UUFBVSxXQUFNLEdBQU4sTUFBTSxDQUFVO0lBQUcsQ0FBQzs7OztJQUUzRix1Q0FBUTs7O0lBQVI7UUFDSSxJQUFJLENBQUMsaUJBQWlCLEVBQUUsQ0FBQztJQUM3QixDQUFDOzs7OztJQUVPLGdEQUFpQjs7OztJQUF6QjtRQUNJLElBQUksSUFBSSxDQUFDLE1BQU0sSUFBSSxJQUFJLENBQUMsTUFBTSxDQUFDLFlBQVksRUFBRTs7Z0JBQ25DLE1BQU0sR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLFlBQVk7O2dCQUNqQyxHQUFHLEdBQUcsSUFBSSxDQUFDLEVBQUUsQ0FBQyxhQUFhOztnQkFDM0IsRUFBRSxHQUFHLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQyxZQUFZO1lBRTFDLElBQUksRUFBRSxLQUFLLFFBQVEsRUFBRTtnQkFDakIsSUFBSSxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxhQUFhLEVBQUUsbUJBQUEsTUFBTSxFQUFVLENBQUMsQ0FBQzthQUNqRTtpQkFBTSxJQUFJLEVBQUUsS0FBSyxVQUFVLEVBQUU7O29CQUNwQixDQUFDLEdBQUcsQ0FBQyxtQkFBQSxJQUFJLENBQUMsTUFBTSxDQUFDLFlBQVksRUFBaUIsQ0FBQyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUM7Z0JBQ2xFLElBQUksQ0FBQyxDQUFDLEdBQUcsRUFBRTtvQkFDUCxJQUFJLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLGFBQWEsRUFBRSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUM7aUJBQ3REO2dCQUNELElBQUksQ0FBQyxDQUFDLEtBQUssRUFBRTtvQkFDVCxJQUFJLENBQUMsV0FBVyxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUM7aUJBQ2xDO2FBQ0o7aUJBQU0sSUFBSSxFQUFFLEtBQUssUUFBUSxJQUFJLE1BQU0sQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUMsTUFBTSxFQUFFO2dCQUNsRCxJQUFJLENBQUMsV0FBVyxDQUFDLEdBQUcsRUFBRSxNQUFNLENBQUMsQ0FBQzthQUNqQztTQUNKO0lBQ0wsQ0FBQzs7Ozs7OztJQUVPLDBDQUFXOzs7Ozs7SUFBbkIsVUFBb0IsUUFBYSxFQUFFLFFBQWE7UUFBaEQsaUJBS0M7O1lBSlMsT0FBTyxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDO1FBQ3JDLE9BQU8sQ0FBQyxPQUFPOzs7O1FBQUMsVUFBQSxDQUFDO1lBQ2IsS0FBSSxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsUUFBUSxFQUFFLENBQUMsRUFBRSxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNuRCxDQUFDLEVBQUMsQ0FBQztJQUNQLENBQUM7O2dCQXhDSixTQUFTLFNBQUM7b0JBQ1AsUUFBUSxFQUFFLGdCQUFnQjtvQkFDMUIsUUFBUSxFQUFFLGNBQWM7aUJBQzNCOzs7O2dCQU5tQixVQUFVO2dCQUFFLFNBQVM7Z0JBQUUsUUFBUTs7O3lCQVE5QyxLQUFLLFNBQUMsY0FBYzs7SUFxQ3pCLDJCQUFDO0NBQUEsQUExQ0QsSUEwQ0M7U0F0Q1ksb0JBQW9COzs7SUFDN0Isc0NBQTBDOzs7OztJQUU5QixrQ0FBc0I7Ozs7O0lBQUUsc0NBQXlCOzs7OztJQUFFLHNDQUF3QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERpcmVjdGl2ZSwgRWxlbWVudFJlZiwgUmVuZGVyZXIyLCBJbmplY3RvciwgSW5wdXQsIE9uSW5pdCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBEYXRhQ29sdW1uLCBIZWFkZXJTdHlsZUZuIH0gZnJvbSAnLi8uLi8uLi90eXBlcy9kYXRhLWNvbHVtbic7XHJcblxyXG5ARGlyZWN0aXZlKHtcclxuICAgIHNlbGVjdG9yOiAnW2hlYWRlci1zdHlsZV0nLFxyXG4gICAgZXhwb3J0QXM6ICdIZWFkZXJTdHlsZXInXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBIZWFkZXJTdHlsZURpcmVjdGl2ZSBpbXBsZW1lbnRzIE9uSW5pdCB7XHJcbiAgICBASW5wdXQoJ2hlYWRlci1zdHlsZScpIGNvbHVtbjogRGF0YUNvbHVtbjtcclxuXHJcbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIGVsOiBFbGVtZW50UmVmLCBwcml2YXRlIHJlbmRlcjogUmVuZGVyZXIyLCBwcml2YXRlIGluamVjdDogSW5qZWN0b3IpIHt9XHJcblxyXG4gICAgbmdPbkluaXQoKSB7XHJcbiAgICAgICAgdGhpcy5yZW5kZXJDc3MyRWxlbWVudCgpO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgcmVuZGVyQ3NzMkVsZW1lbnQoKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuY29sdW1uICYmIHRoaXMuY29sdW1uLmhlYWRlclN0eWxlcikge1xyXG4gICAgICAgICAgICBjb25zdCBzdHlsZXIgPSB0aGlzLmNvbHVtbi5oZWFkZXJTdHlsZXI7XHJcbiAgICAgICAgICAgIGNvbnN0IGRvbSA9IHRoaXMuZWwubmF0aXZlRWxlbWVudDtcclxuICAgICAgICAgICAgY29uc3Qgc3QgPSB0eXBlb2YgdGhpcy5jb2x1bW4uaGVhZGVyU3R5bGVyO1xyXG5cclxuICAgICAgICAgICAgaWYgKHN0ID09PSAnc3RyaW5nJykge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5yZW5kZXIuYWRkQ2xhc3ModGhpcy5lbC5uYXRpdmVFbGVtZW50LCBzdHlsZXIgYXMgc3RyaW5nKTtcclxuICAgICAgICAgICAgfSBlbHNlIGlmIChzdCA9PT0gJ2Z1bmN0aW9uJykge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgciA9ICh0aGlzLmNvbHVtbi5oZWFkZXJTdHlsZXIgYXMgSGVhZGVyU3R5bGVGbikodGhpcy5jb2x1bW4pO1xyXG4gICAgICAgICAgICAgICAgaWYgKHIuY2xzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5yZW5kZXIuYWRkQ2xhc3ModGhpcy5lbC5uYXRpdmVFbGVtZW50LCByLmNscyk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAoci5zdHlsZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMucmVuZGVyU3R5bGUoZG9tLCByLnN0eWxlKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSBlbHNlIGlmIChzdCA9PT0gJ29iamVjdCcgJiYgT2JqZWN0LmtleXMoc3QpLmxlbmd0aCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5yZW5kZXJTdHlsZShkb20sIHN0eWxlcik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSByZW5kZXJTdHlsZSh0YXJnZXRFbDogYW55LCBzdHlsZU9iajogYW55KSB7XHJcbiAgICAgICAgY29uc3QgY3NzS2V5cyA9IE9iamVjdC5rZXlzKHN0eWxlT2JqKTtcclxuICAgICAgICBjc3NLZXlzLmZvckVhY2goayA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMucmVuZGVyLnNldFN0eWxlKHRhcmdldEVsLCBrLCBzdHlsZU9ialtrXSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG59XHJcbiJdfQ==