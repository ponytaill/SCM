/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, NgZone, Injector, Renderer2, ElementRef, Input, Output, EventEmitter } from '@angular/core';
import { dropHandlers, smoothDnD as SmoothDndForGroupingField } from '@farris/smooth-dnd';
SmoothDndForGroupingField.dropHandler = dropHandlers.reactDropHandler().handler;
SmoothDndForGroupingField.wrapChild = false;
var ColumnGroupDragDirective = /** @class */ (function () {
    function ColumnGroupDragDirective(ngzone, injector, render, el) {
        var _this = this;
        this.ngzone = ngzone;
        this.injector = injector;
        this.render = render;
        this.el = el;
        this.drop = new EventEmitter();
        this.options = {
            orientation: 'horizontal',
            behaviour: 'move',
            dropPlaceholder: {
                className: 'drop-group-field',
            },
            getGhostParent: (/**
             * @return {?}
             */
            function () {
                return document.body;
            }),
            getChildPayload: this.getChildPayload.bind(this),
            shouldAcceptDrop: (/**
             * @param {?} sourceContainerOptions
             * @param {?} payload
             * @return {?}
             */
            function (sourceContainerOptions, payload) {
                return true;
            }),
            onDropReady: (/**
             * @param {?} dropResult
             * @return {?}
             */
            function (dropResult) {
                _this.ngzone.run((/**
                 * @return {?}
                 */
                function () {
                    _this.onDropReady(dropResult);
                }));
            }),
            onDrop: (/**
             * @param {?} dropResult
             * @return {?}
             */
            function (dropResult) {
                _this.ngzone.run((/**
                 * @return {?}
                 */
                function () {
                    _this.drop.emit(dropResult);
                }));
            }),
            onDragEnter: (/**
             * @return {?}
             */
            function () {
                _this.ngzone.run((/**
                 * @return {?}
                 */
                function () {
                    _this.onDragEnter();
                }));
            }),
            onDragStart: (/**
             * @param {?} info
             * @return {?}
             */
            function (info) {
                _this.ngzone.run((/**
                 * @return {?}
                 */
                function () {
                    _this.onDragStart(info);
                }));
            }),
            onDragEnd: (/**
             * @param {?} info
             * @return {?}
             */
            function (info) {
                _this.ngzone.run((/**
                 * @return {?}
                 */
                function () {
                    _this.onDragEnd(info);
                }));
            })
        };
    }
    /**
     * @return {?}
     */
    ColumnGroupDragDirective.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        this.initDnD();
    };
    /**
     * @return {?}
     */
    ColumnGroupDragDirective.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.disposeDnd();
    };
    /**
     * @private
     * @return {?}
     */
    ColumnGroupDragDirective.prototype.disposeDnd = /**
     * @private
     * @return {?}
     */
    function () {
        if (this.container) {
            this.container.dispose();
            this.container = null;
        }
    };
    /**
     * @private
     * @return {?}
     */
    ColumnGroupDragDirective.prototype.initDnD = /**
     * @private
     * @return {?}
     */
    function () {
        this.disposeDnd();
        this.container = SmoothDndForGroupingField(this.el.nativeElement, this.options);
    };
    /**
     * @private
     * @param {?} index
     * @return {?}
     */
    ColumnGroupDragDirective.prototype.getChildPayload = /**
     * @private
     * @param {?} index
     * @return {?}
     */
    function (index) {
        return index;
    };
    /**
     * @private
     * @param {?} dropResult
     * @return {?}
     */
    ColumnGroupDragDirective.prototype.onDropReady = /**
     * @private
     * @param {?} dropResult
     * @return {?}
     */
    function (dropResult) {
        // console.log('DROP READY', dropResult);
    };
    /**
     * @private
     * @param {?} info
     * @return {?}
     */
    ColumnGroupDragDirective.prototype.onDragStart = /**
     * @private
     * @param {?} info
     * @return {?}
     */
    function (info) {
        // console.log('DRAG START', info);
    };
    /**
     * @private
     * @param {?} info
     * @return {?}
     */
    ColumnGroupDragDirective.prototype.onDragEnd = /**
     * @private
     * @param {?} info
     * @return {?}
     */
    function (info) {
        // console.log('DRAG END', info);
    };
    /**
     * @private
     * @return {?}
     */
    ColumnGroupDragDirective.prototype.onDragEnter = /**
     * @private
     * @return {?}
     */
    function () {
        // console.log('DRAG ENTER');
    };
    ColumnGroupDragDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[column-group-drag]',
                },] }
    ];
    /** @nocollapse */
    ColumnGroupDragDirective.ctorParameters = function () { return [
        { type: NgZone },
        { type: Injector },
        { type: Renderer2 },
        { type: ElementRef }
    ]; };
    ColumnGroupDragDirective.propDecorators = {
        drop: [{ type: Output }],
        options: [{ type: Input }]
    };
    return ColumnGroupDragDirective;
}());
export { ColumnGroupDragDirective };
if (false) {
    /**
     * @type {?}
     * @private
     */
    ColumnGroupDragDirective.prototype.container;
    /** @type {?} */
    ColumnGroupDragDirective.prototype.drop;
    /** @type {?} */
    ColumnGroupDragDirective.prototype.options;
    /**
     * @type {?}
     * @private
     */
    ColumnGroupDragDirective.prototype.ngzone;
    /**
     * @type {?}
     * @private
     */
    ColumnGroupDragDirective.prototype.injector;
    /**
     * @type {?}
     * @private
     */
    ColumnGroupDragDirective.prototype.render;
    /**
     * @type {?}
     * @private
     */
    ColumnGroupDragDirective.prototype.el;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29sdW1uLWdyb3VwLWRyYWcuZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGZhcnJpcy91aS1kYXRhZ3JpZC1zZXR0aW5ncy8iLCJzb3VyY2VzIjpbImxpYi9jb2x1bW4tZ3JvdXAvY29sdW1uLWdyb3VwLWRyYWcuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sRUFBRSxRQUFRLEVBQUUsU0FBUyxFQUFFLFVBQVUsRUFBaUIsS0FBSyxFQUFHLE1BQU0sRUFBRSxZQUFZLEVBQWEsTUFBTSxlQUFlLENBQUM7QUFDM0ksT0FBTyxFQUFFLFlBQVksRUFBRSxTQUFTLElBQUkseUJBQXlCLEVBQTJDLE1BQU0sb0JBQW9CLENBQUM7QUFFbkkseUJBQXlCLENBQUMsV0FBVyxHQUFHLFlBQVksQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDLE9BQU8sQ0FBQztBQUNoRix5QkFBeUIsQ0FBQyxTQUFTLEdBQUcsS0FBSyxDQUFDO0FBRTVDO0lBOENJLGtDQUFvQixNQUFjLEVBQVUsUUFBa0IsRUFBVSxNQUFpQixFQUFVLEVBQWM7UUFBakgsaUJBQXNIO1FBQWxHLFdBQU0sR0FBTixNQUFNLENBQVE7UUFBVSxhQUFRLEdBQVIsUUFBUSxDQUFVO1FBQVUsV0FBTSxHQUFOLE1BQU0sQ0FBVztRQUFVLE9BQUUsR0FBRixFQUFFLENBQVk7UUF6Q3ZHLFNBQUksR0FBRyxJQUFJLFlBQVksRUFBRSxDQUFDO1FBQzNCLFlBQU8sR0FBcUI7WUFDakMsV0FBVyxFQUFFLFlBQVk7WUFDekIsU0FBUyxFQUFFLE1BQU07WUFDakIsZUFBZSxFQUFFO2dCQUNiLFNBQVMsRUFBRSxrQkFBa0I7YUFDaEM7WUFDRCxjQUFjOzs7WUFBRTtnQkFDWixPQUFPLFFBQVEsQ0FBQyxJQUFJLENBQUM7WUFDekIsQ0FBQyxDQUFBO1lBQ0QsZUFBZSxFQUFFLElBQUksQ0FBQyxlQUFlLENBQUMsSUFBSSxDQUFDLElBQUksQ0FB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QUUsMENBQXlCOzs7OztJQUFFLHNDQUFzQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERpcmVjdGl2ZSwgTmdab25lLCBJbmplY3RvciwgUmVuZGVyZXIyLCBFbGVtZW50UmVmLCBBZnRlclZpZXdJbml0LCBJbnB1dCwgIE91dHB1dCwgRXZlbnRFbWl0dGVyLCBPbkRlc3Ryb3kgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgZHJvcEhhbmRsZXJzLCBzbW9vdGhEbkQgYXMgU21vb3RoRG5kRm9yR3JvdXBpbmdGaWVsZCwgRHJvcFJlc3VsdCwgQ29udGFpbmVyT3B0aW9ucywgY29uc3RhbnRzIH0gZnJvbSAnQGZhcnJpcy9zbW9vdGgtZG5kJztcclxuXHJcblNtb290aERuZEZvckdyb3VwaW5nRmllbGQuZHJvcEhhbmRsZXIgPSBkcm9wSGFuZGxlcnMucmVhY3REcm9wSGFuZGxlcigpLmhhbmRsZXI7XHJcblNtb290aERuZEZvckdyb3VwaW5nRmllbGQud3JhcENoaWxkID0gZmFsc2U7XHJcblxyXG5ARGlyZWN0aXZlKHtcclxuICAgIHNlbGVjdG9yOiAnW2NvbHVtbi1ncm91cC1kcmFnXScsXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBDb2x1bW5Hcm91cERyYWdEaXJlY3RpdmUgaW1wbGVtZW50cyBBZnRlclZpZXdJbml0LCBPbkRlc3Ryb3kge1xyXG4gICAgcHJpdmF0ZSBjb250YWluZXI6IGFueTtcclxuICAgIEBPdXRwdXQoKSBkcm9wID0gbmV3IEV2ZW50RW1pdHRlcigpO1xyXG4gICAgQElucHV0KCkgb3B0aW9uczogQ29udGFpbmVyT3B0aW9ucyA9IHtcclxuICAgICAgICBvcmllbnRhdGlvbjogJ2hvcml6b250YWwnLFxyXG4gICAgICAgIGJlaGF2aW91cjogJ21vdmUnLFxyXG4gICAgICAgIGRyb3BQbGFjZWhvbGRlcjoge1xyXG4gICAgICAgICAgICBjbGFzc05hbWU6ICdkcm9wLWdyb3VwLWZpZWxkJyxcclxuICAgICAgICB9LFxyXG4gICAgICAgIGdldEdob3N0UGFyZW50OiAoKSA9PiB7XHJcbiAgICAgICAgICAgIHJldHVybiBkb2N1bWVudC5ib2R5O1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZ2V0Q2hpbGRQYXlsb2FkOiB0aGlzLmdldENoaWxkUGF5bG9hZC5iaW5kKHRoaXMpLFxyXG4gICAgICAgIHNob3VsZEFjY2VwdERyb3A6IChzb3VyY2VDb250YWluZXJPcHRpb25zLCBwYXlsb2FkKSA9PiB7XHJcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgb25Ecm9wUmVhZHk6IChkcm9wUmVzdWx0OiBEcm9wUmVzdWx0KSA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMubmd6b25lLnJ1bigoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLm9uRHJvcFJlYWR5KGRyb3BSZXN1bHQpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIG9uRHJvcDogKGRyb3BSZXN1bHQ6IERyb3BSZXN1bHQpID0+IHtcclxuICAgICAgICAgICAgdGhpcy5uZ3pvbmUucnVuKCgpID0+IHtcclxuICAgICAgICAgICAgICAgIHRoaXMuZHJvcC5lbWl0KGRyb3BSZXN1bHQpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIG9uRHJhZ0VudGVyOiAoKSA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMubmd6b25lLnJ1bigoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLm9uRHJhZ0VudGVyKCk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgb25EcmFnU3RhcnQ6IChpbmZvKSA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMubmd6b25lLnJ1bigoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLm9uRHJhZ1N0YXJ0KGluZm8pO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIG9uRHJhZ0VuZDogKGluZm8pID0+IHtcclxuICAgICAgICAgICAgdGhpcy5uZ3pvbmUucnVuKCgpID0+IHtcclxuICAgICAgICAgICAgICAgIHRoaXMub25EcmFnRW5kKGluZm8pO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgbmd6b25lOiBOZ1pvbmUsIHByaXZhdGUgaW5qZWN0b3I6IEluamVjdG9yLCBwcml2YXRlIHJlbmRlcjogUmVuZGVyZXIyLCBwcml2YXRlIGVsOiBFbGVtZW50UmVmKSB7IH1cclxuICAgIG5nQWZ0ZXJWaWV3SW5pdCgpIHtcclxuICAgICAgICB0aGlzLmluaXREbkQoKTtcclxuICAgIH1cclxuXHJcbiAgICBuZ09uRGVzdHJveSgpIHtcclxuICAgICAgICB0aGlzLmRpc3Bvc2VEbmQoKTtcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIGRpc3Bvc2VEbmQoKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuY29udGFpbmVyKSB7XHJcbiAgICAgICAgICAgIHRoaXMuY29udGFpbmVyLmRpc3Bvc2UoKTtcclxuICAgICAgICAgICAgdGhpcy5jb250YWluZXIgPSBudWxsO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcblxyXG4gICAgcHJpdmF0ZSBpbml0RG5EKCkge1xyXG4gICAgICAgIHRoaXMuZGlzcG9zZURuZCgpO1xyXG4gICAgICAgIHRoaXMuY29udGFpbmVyID0gU21vb3RoRG5kRm9yR3JvdXBpbmdGaWVsZChcclxuICAgICAgICAgICAgdGhpcy5lbC5uYXRpdmVFbGVtZW50LFxyXG4gICAgICAgICAgICB0aGlzLm9wdGlvbnNcclxuICAgICAgICApO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgZ2V0Q2hpbGRQYXlsb2FkKGluZGV4KSB7XHJcbiAgICAgICAgcmV0dXJuIGluZGV4O1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgb25Ecm9wUmVhZHkoZHJvcFJlc3VsdCkge1xyXG4gICAgICAgIC8vIGNvbnNvbGUubG9nKCdEUk9QIFJFQURZJywgZHJvcFJlc3VsdCk7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBvbkRyYWdTdGFydChpbmZvKSB7XHJcbiAgICAgICAgLy8gY29uc29sZS5sb2coJ0RSQUcgU1RBUlQnLCBpbmZvKTtcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIG9uRHJhZ0VuZChpbmZvKSB7XHJcbiAgICAgICAgLy8gY29uc29sZS5sb2coJ0RSQUcgRU5EJywgaW5mbyk7XHJcbiAgICB9XHJcblxyXG5cclxuICAgIHByaXZhdGUgb25EcmFnRW50ZXIoKSB7XHJcbiAgICAgICAgLy8gY29uc29sZS5sb2coJ0RSQUcgRU5URVInKTtcclxuICAgIH1cclxufVxyXG4iXX0=