import { DateUtil } from '../utils/date_util';
/**
 * 验证器工厂
 */
var ValidatorFactory = /** @class */ (function () {
    function ValidatorFactory() {
    }
    /**
     * 创建适配器
     */
    ValidatorFactory.create = function (validRules) {
        var _this = this;
        var validatorFn = [];
        if (Array.isArray(validRules) && validRules.length > 1) {
            validRules.forEach(function (validRule) {
                validatorFn.push(_this.initValidRuleFn(validRule));
            });
        }
        else if (Array.isArray(validRules) && validRules.length === 1) {
            validatorFn.push(this.initValidRuleFn(validRules[0]));
        }
        else {
            validatorFn.push(this.initValidRuleFn(validRules));
        }
        return validatorFn;
    };
    ValidatorFactory.initValidRuleFn = function (validRule) {
        var type = validRule.type, constraints = validRule.constraints, message = validRule.message;
        switch (type) {
            case 'required':
                return function (v) {
                    if (constraints[0] === true) {
                        if (null === v || undefined === v || '' === v) {
                            return { passing: false, message: message || '必填' };
                        }
                        else {
                            return { passing: true, message: '' };
                        }
                    }
                };
            case 'NumberMaxValue':
                return function (v) {
                    if (typeof v !== 'number') {
                        return;
                    }
                    if (constraints[0] || 0 == constraints[0]) {
                        if (v <= parseFloat(constraints[0])) {
                            return { passing: true, message: '' };
                        }
                        else {
                            return { passing: false, message: message || "\u8F93\u5165\u503C\u4E0D\u80FD\u5927\u4E8E" + constraints[0] };
                        }
                    }
                };
            case 'NumberMinValue':
                return function (v) {
                    if (typeof v !== 'number') {
                        return;
                    }
                    if (constraints[0] || 0 == constraints[0]) {
                        if (v >= parseFloat(constraints[0])) {
                            return { passing: true, message: '' };
                        }
                        else {
                            return { passing: false, message: message || "\u8F93\u5165\u503C\u4E0D\u80FD\u5C0F\u4E8E" + constraints[0] };
                        }
                    }
                };
            case 'DateMaxValue':
                return function (v) {
                    if (constraints[0]) {
                        if (DateUtil.isBefore(v, constraints[0]) || DateUtil.isSame(v, constraints[0])) {
                            return { passing: true, message: '' };
                        }
                        else {
                            return { passing: false, message: message || "\u8F93\u5165\u65E5\u671F\u4E0D\u80FD\u5927\u4E8E" + constraints[0] };
                        }
                    }
                };
            case 'DateMinValue':
                return function (v) {
                    if (constraints[0]) {
                        if (DateUtil.isAfter(v, constraints[0]) || DateUtil.isSame(v, constraints[0])) {
                            return { passing: true, message: '' };
                        }
                        else {
                            return { passing: false, message: message || "\u8F93\u5165\u65E5\u671F\u4E0D\u80FD\u5C0F\u4E8E" + constraints[0] };
                        }
                    }
                };
            case 'StringMaxLength':
                return function (v) {
                    if (constraints[0]) {
                        if (v.length <= constraints[0]) {
                            return { passing: true, message: '' };
                        }
                        else {
                            return { passing: false, message: message || "\u8F93\u5165\u503C\u957F\u5EA6\u4E0D\u80FD\u5927\u4E8E" + constraints[0] };
                        }
                    }
                };
            case 'StringMinLength':
                return function (v) {
                    if (constraints[0]) {
                        if (v.length >= constraints[0]) {
                            return { passing: true, message: '' };
                        }
                        else {
                            return { passing: false, message: message || "\u8F93\u5165\u503C\u957F\u5EA6\u4E0D\u80FD\u5C0F\u4E8E" + constraints[0] };
                        }
                    }
                };
            case 'regex':
                return function (v) {
                    var constraintsTemp = [];
                    if (typeof constraints[0] === 'string') {
                        constraintsTemp = constraints[0].split(',');
                    }
                    for (var i = 0; i < constraintsTemp.length; i++) {
                        if (constraintsTemp[i] === '') {
                            return;
                        }
                        var re = new RegExp(constraintsTemp[i]);
                        if (re.test(v)) {
                            return { passing: false, message: message || "\u5B58\u5728\u4E0D\u53EF\u8F93\u5165\u9879" + constraints[0] };
                        }
                        else {
                            return { passing: true, message: '' };
                        }
                    }
                };
            case 'customFunction':
                return function (v) {
                    if (typeof constraints[0] === 'function') {
                        var message_1 = constraints[0](v);
                        if (!message_1) {
                            return { passing: true, message: '' };
                        }
                        else {
                            return { passing: false, message: message_1 };
                        }
                    }
                };
            default:
                return function () {
                    return { passing: true, message: '' };
                };
        }
    };
    /**
     * 遍历生成的校验方法对当前值进行校验，当发现错误就返回校验结果
     * 遍历完成没有错误则返回校验通过结果
     * @param validatorFn 校验方法
     * @param value 当前值
     */
    ValidatorFactory.executeValidator = function (validatorFn, value) {
        for (var i = 0; i < validatorFn.length; i++) {
            var validationResult = validatorFn[i](value);
            if (validationResult['passing'] === false) {
                return validationResult;
            }
        }
        return { passing: true, message: '' };
    };
    return ValidatorFactory;
}());
export { ValidatorFactory };
//# sourceMappingURL=data:application/json;base64,