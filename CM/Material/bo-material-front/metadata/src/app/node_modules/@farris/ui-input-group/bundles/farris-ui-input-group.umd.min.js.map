{"version":3,"sources":["ng://@farris/ui-input-group/lib/input-group.service.ts","ng://@farris/ui-input-group/lib/input-group.component.ts","ng://@farris/ui-input-group/lib/input-group.module.ts"],"names":["InputGroupService","Injectable","args","providedIn","INPUT_GROUP_VALUE_ACCESSOR","provide","NG_VALUE_ACCESSOR","useExisting","forwardRef","InputGroupComponent","multi","prototype","ngOnInit","this","groupText","renderer","setStyle","el","nativeElement","querySelector","initSmartPassword","ngAfterViewInit","_this","ngZone","runOutsideAngular","enableClear","inputGroup","addEventListener","onMouseEnter","bind","onMouseLeave","ro","ResizeObserver","entries","observer","clearIconRef","_a","contentRect","width","height","target","classList","add","remove","observe","ngOnChanges","changes","isFirstChange","currentValue","ngModelChange","val","isPassword","closeEyeICON_1","enableViewPassword","openEyes_1","inputType","onClickHandle","$event","inputtype","cd","detectChanges","onEnter","enterHandle","emit","originalEvent","onInputFocus","disabled","addClass","focusCls","editable","readonly","focusHandle","onInputClick","inputClick","event","value","showClearButton","state","toggleClearIcon","getStateCls","f-state-disabled","f-state-readonly","f-state-editable","isShow","str","clearIcon","style","display","onMouseOverInExtentInfo","updateExtendInfo","onMousedown","tagName","preventDefault","stopPropagation","onClearValue","flag1","flag2","onValueChange","clear","onBlur","removeClass","blurHandle","onModelChange","onModelTouched","valueChange","showButtonWhenDisabled","clickHandle","onIconMouseEnter","e","iconMouseEnter","onIconMouseLeave","iconMouseLeave","focus","textbox","writeValue","obj","undefined","registerOnChange","fn","registerOnTouched","setDisabledState","isDisabled","setFocusToEnd","selectionStart","length","selectionEnd","Component","selector","template","providers","encapsulation","ViewEncapsulation","None","ElementRef","Renderer2","NgZone","Injector","HostBinding","type","Input","Output","ViewChild","injector","autocomplete","customCls","placeholder","textAlign","minLength","maxLength","enableTitle","useExtendInfo","extendInfo","forcePlaceholder","EventEmitter","keyupHandle","keydownHandle","get","ChangeDetectorRef","InputGroupModule","NgModule","declarations","imports","CommonModule","FormsModule","PopoverModule","forRoot","FarrisCommonModule","exports"],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class InputGroupService {\r\n\r\n  constructor() { }\r\n}\r\n","/*\r\n * @Author: ç¯çç§æ(Lucas Huang)\r\n * @Date: 2019-08-08 18:53:41\r\n * @LastEditors: ç¯çç§æ(Lucas Huang)\r\n * @LastEditTime: 2019-11-27 11:19:44\r\n * @QQ: 1055818239\r\n * @Version: v0.0.1\r\n */\r\nimport { SimpleChanges, Renderer2, forwardRef, Injector, HostBinding, ChangeDetectorRef } from '@angular/core';\r\nimport { NgZone, ViewEncapsulation, TemplateRef } from '@angular/core';\r\nimport { Component, OnInit, Output, EventEmitter, ElementRef, Input, AfterViewInit, ViewChild, OnChanges } from '@angular/core';\r\nimport { NG_VALUE_ACCESSOR, ControlValueAccessor, NgControl, MaxLengthValidator } from '@angular/forms';\r\nimport ResizeObserver from 'resize-observer-polyfill';\r\nexport const INPUT_GROUP_VALUE_ACCESSOR: any = {\r\n    provide: NG_VALUE_ACCESSOR,\r\n    useExisting: forwardRef(() => InputGroupComponent),\r\n    multi: true\r\n};\r\n\r\n@Component({\r\n    selector: 'farrisui-input-group, input-group, farris-input-group',\r\n    template: `\r\n        <div #inputGroup [class]=\"customCls + ' input-group'\"\r\n            [class.f-state-disabled]=\"disabled\"\r\n            [class.f-state-editable]=\"editable && !disabled && !readonly\"\r\n            [class.f-state-readonly]=\"readonly && !disabled\">\r\n            <span class=\"input-group-before-tips\" *ngIf=\"useExtendInfo\" (mouseenter)=\"onMouseOverInExtentInfo()\"\r\n                farrisPopover [popover]=\"extendInfo\" [triggers]=\"'hover'\" [container]=\"'body'\" [placement]=\"'top'\">\r\n                <i class=\"f-icon f-icon-info-circle\"></i><b class=\"tips-arrow\"></b>\r\n            </span>\r\n\r\n            <input\r\n                #textbox\r\n                name=\"input-group-value\"\r\n                class=\"form-control f-utils-fill\"\r\n                [class.text-left]=\"textAlign == 'left'\"\r\n                [class.text-center]=\"textAlign == 'center'\"\r\n                [class.text-right]=\"textAlign == 'right'\"\r\n                [attr.title]=\"enableTitle? value: ''\"\r\n                [attr.type]=\"inputType\"\r\n                [attr.placeholder]=\"(disabled||readonly)&&!forcePlaceholder?'':placeholder\"\r\n                [attr.autocomplete]=\"autocomplete\"\r\n                [readonly]=\"readonly || !editable\"\r\n                [ngModel]=\"value\"\r\n                [disabled]=\"disabled\"\r\n                (blur)=\"onBlur($event)\"\r\n                (mousedown)=\"onMousedown($event)\"\r\n                (ngModelChange)=\"onValueChange($event)\"\r\n                (keydown.enter)=\"onEnter($event)\"\r\n                (focus)=\"onInputFocus($event)\"\r\n                (click)=\"onInputClick($event)\"\r\n                minlength=\"{{minLength}}\"\r\n                maxlength=\"{{maxLength}}\"\r\n                (keyup)=\"keyupHandle.emit($event)\"\r\n                (keydown)=\"keydownHandle.emit($event)\"\r\n                [attr.tabindex]=\"tabIndex\"\r\n            />\r\n            <div class=\"input-group-append\" [ngClass]=\"{'append-force-show':showButtonWhenDisabled && (readonly||disabled)}\">\r\n                <span *ngIf=\"enableClear && !readonly && !disabled\"\r\n                    [style.display]=\"showClearButton ? 'flex' : 'none'\"\r\n                    class=\"input-group-text input-group-clear\" #clearIcon\r\n                    (click)=\"onClearValue($event)\" style=\"width:24px\">\r\n                    <i class=\"f-icon modal_close\"></i>\r\n                </span>\r\n                <span class=\"input-group-text\"\r\n                    (mouseenter)=\"onIconMouseEnter($event)\" (mouseleave)=\"onIconMouseLeave($event)\"\r\n                    *ngIf=\"groupText && !groupTextTemplate\" [innerHTML]=\"groupText | safe: 'html'\"\r\n                    (click)=\"onClickHandle($event)\"></span>\r\n                <ng-container *ngIf=\"groupTextTemplate\">\r\n                    <ng-container *ngTemplateOutlet=\"groupTextTemplate\" ></ng-container>\r\n                </ng-container>\r\n            </div>\r\n        </div>\r\n    `,\r\n    styles: [\r\n        `\r\n            .input-group {\r\n                flex-wrap: nowrap;\r\n            }\r\n            .input-group-text {\r\n                cursor: pointer;\r\n            }\r\n            .input-group-clear {\r\n                cursor: pointer;\r\n            }\r\n\r\n            .input-group-text:hover {\r\n                background: #ccc;\r\n            }\r\n\r\n            .input-group-clear-right {\r\n                position: absolute;\r\n                height: 100%;\r\n                right: 0;\r\n                top: 0;\r\n                z-index: 100;\r\n            }\r\n        `\r\n    ],\r\n    // .input-group-clear:hover {\r\n    //     background: #e9ecef !important;\r\n    // }\r\n    providers: [INPUT_GROUP_VALUE_ACCESSOR],\r\n    encapsulation: ViewEncapsulation.None\r\n})\r\nexport class InputGroupComponent\r\n    implements OnInit, AfterViewInit, OnChanges, ControlValueAccessor {\r\n    @HostBinding('class.f-cmp-inputgroup')\r\n    @Input() autocomplete = 'off';\r\n    showClearButton = false;\r\n    ngControl: NgControl;\r\n    @Input() value = '';\r\n    /** åªè¯» */\r\n    @Input() readonly = false;\r\n    /** ç¦ç¨ */\r\n    @Input() disabled = false;\r\n    /** åè®¸ç¼è¾ */\r\n    @Input() editable = true;\r\n    /** å¯ç¨æ¸é¤æé® */\r\n    @Input() enableClear = true;\r\n    /** æ©å±æé® */\r\n    @Input() groupText = '';\r\n    /** èªå®ä¹CLASS */\r\n    @Input() customCls = '';\r\n    /** å½ç»ä»¶ç¦ç¨æåªè¯»æ¶æ¾ç¤ºåè¾¹çæé® */\r\n    @Input() showButtonWhenDisabled = false;\r\n    /** å¯ç¨æç¤ºä¿¡æ¯ */\r\n    @Input() placeholder = '';\r\n    /** ææ¬å¨è¾å¥æ¡ä¸­çå¯¹é½æ¹å¼ */\r\n    @Input() textAlign = 'left';\r\n\r\n    @Input() groupTextTemplate: TemplateRef<any>;\r\n    @Input() isPassword = false;\r\n    @Input() enableViewPassword = true;\r\n\r\n    @Input() minLength: number | undefined = undefined;\r\n    @Input() maxLength: number | undefined = undefined;\r\n\r\n    @Input() tabIndex: number;\r\n\r\n    @Input() enableTitle = true;\r\n    /** æ©å±ä¿¡æ¯ï¼å¨è¾å¥æ¡åé¢ æ¾ç¤º â  å¾æ é¼ æ æ»è¿åæ¾ç¤º */\r\n    @Input() useExtendInfo = false;\r\n    @Input() extendInfo = '';\r\n    @Input() forcePlaceholder = false;\r\n    @Output() updateExtendInfo = new EventEmitter();\r\n\r\n    @Output() clear = new EventEmitter();\r\n    @Output() valueChange = new EventEmitter();\r\n    @Output() clickHandle = new EventEmitter();\r\n    @Output() blurHandle = new EventEmitter();\r\n    @Output() focusHandle = new EventEmitter();\r\n    @Output() enterHandle = new EventEmitter();\r\n    @Output() iconMouseEnter = new EventEmitter();\r\n    @Output() iconMouseLeave = new EventEmitter();\r\n    @Output() keyupHandle = new EventEmitter();\r\n    @Output() keydownHandle = new EventEmitter();\r\n    @Output() inputClick = new EventEmitter();\r\n\r\n    @ViewChild('inputGroup') inputGroup: ElementRef;\r\n    @ViewChild('textbox') textbox: ElementRef;\r\n    @ViewChild('clearIcon') clearIconRef: ElementRef;\r\n\r\n    inputType = 'text';\r\n\r\n    private state: boolean;\r\n    cd: ChangeDetectorRef = null;\r\n\r\n    private focusCls = 'f-state-focus';\r\n    private ro: ResizeObserver = null;\r\n    onModelChange = (obj: any) => { };\r\n    onModelTouched = (val: any) => { };\r\n\r\n\r\n    constructor(\r\n        public el: ElementRef,\r\n        private renderer: Renderer2,\r\n        private ngZone: NgZone,\r\n        private injector: Injector\r\n    ) {\r\n        this.cd = this.injector.get(ChangeDetectorRef);\r\n    }\r\n\r\n    ngOnInit() {\r\n        if (!this.groupText) {\r\n            this.renderer.setStyle(\r\n                this.el.nativeElement.querySelector('.input-group-append'),\r\n                'margin-left',\r\n                '0'\r\n            );\r\n        }\r\n\r\n        this.initSmartPassword();\r\n\r\n\r\n        // if (!this.editable) {\r\n        //     this.readonly = true\r\n        // }\r\n    }\r\n\r\n    ngAfterViewInit() {\r\n        this.ngZone.runOutsideAngular(() => {\r\n            if (this.enableClear) {\r\n                this.inputGroup.nativeElement.addEventListener(\r\n                    'mouseenter',\r\n                    this.onMouseEnter.bind(this)\r\n                );\r\n                this.inputGroup.nativeElement.addEventListener(\r\n                    'mouseleave',\r\n                    this.onMouseLeave.bind(this)\r\n                );\r\n            }\r\n\r\n            this.ro = new ResizeObserver((entries, observer) => {\r\n                if (entries && entries[0] && this.clearIconRef) {\r\n                    const { width, height } = entries[0].contentRect;\r\n                    const target =  entries[0].target;\r\n\r\n                    if (width < 70) {\r\n                        this.clearIconRef.nativeElement.classList.add('input-group-clear-right');\r\n                    } else {\r\n                        this.clearIconRef.nativeElement.classList.remove('input-group-clear-right');\r\n                    }\r\n                }\r\n            });\r\n            this.ro.observe(this.inputGroup.nativeElement);\r\n\r\n        });\r\n\r\n    }\r\n\r\n    ngOnChanges(changes: SimpleChanges) {\r\n        if (changes.groupText && !changes.groupText.isFirstChange()) {\r\n            if (changes.groupText.currentValue) {\r\n                this.renderer.setStyle(\r\n                    this.el.nativeElement.querySelector('.input-group-append'),\r\n                    'margin-left',\r\n                    '-1'\r\n                );\r\n            }\r\n        }\r\n    }\r\n\r\n    ngModelChange(val: any) {\r\n    }\r\n\r\n\r\n    private initSmartPassword() {\r\n        if (this.isPassword) {\r\n            const openEyeICON = '<span class=\"f-icon f-icon-eye\" style=\"color: rgb(56, 143, 255);\"></span>';\r\n            const closeEyeICON = '<span class=\"f-icon f-icon-eye\"></span>';\r\n            this.groupText = closeEyeICON;\r\n\r\n            if (!this.enableViewPassword) {\r\n                this.groupText = '';\r\n            }\r\n\r\n            this.inputType = 'password';\r\n            let openEyes = false;\r\n            this.onClickHandle = ($event) => {\r\n                openEyes = !openEyes;\r\n                const inputtype = openEyes ? 'text' : 'password';\r\n                this.groupText = openEyes ? openEyeICON : closeEyeICON;\r\n                this.inputType = inputtype;\r\n                this.cd.detectChanges();\r\n                return false;\r\n            };\r\n        } else {\r\n            this.inputType = 'text';\r\n        }\r\n    }\r\n\r\n    onEnter($event: KeyboardEvent) {\r\n        // if (this.editable) {\r\n        //     $event.stopPropagation();\r\n        // }\r\n        this.enterHandle.emit({originalEvent: $event});\r\n    }\r\n\r\n    onInputFocus($event) {\r\n        if (this.disabled) {\r\n            return;\r\n        } else {\r\n            this.renderer.addClass(this.inputGroup.nativeElement, this.focusCls);\r\n            if (this.editable || !this.readonly) {\r\n                this.focusHandle.emit($event);\r\n            }\r\n        }\r\n    }\r\n\r\n    onInputClick($event) {\r\n        this.inputClick.emit($event);\r\n    }\r\n\r\n\r\n    onMouseEnter(event) {\r\n        if (this.value) {\r\n            if (!this.editable) {\r\n                if (!this.state && !this.disabled) {\r\n                    this.showClearButton = true;\r\n                }\r\n            } else {\r\n                if (!this.readonly && !this.disabled) {\r\n                    this.showClearButton = true;\r\n                }\r\n            }\r\n        }\r\n        if (this.showClearButton) {\r\n            this.toggleClearIcon(event, true);\r\n        }\r\n    }\r\n\r\n    onMouseLeave(event) {\r\n        this.showClearButton = false;\r\n        this.toggleClearIcon(event, false);\r\n    }\r\n\r\n    getStateCls() {\r\n        if (this.disabled) {\r\n            return { 'f-state-disabled': true };\r\n        } else {\r\n            if (!this.editable) {\r\n                return { 'f-state-editable': true, 'f-state-readonly': this.readonly };\r\n            } else {\r\n                return { 'f-state-readonly': this.readonly };\r\n            }\r\n        }\r\n    }\r\n\r\n    private toggleClearIcon(event: any, isShow = false) {\r\n        const str = isShow ? '' : 'none';\r\n        const clearIcon = event.target.querySelector('.input-group-clear');\r\n        if (clearIcon) {\r\n            clearIcon.style.display = str;\r\n        }\r\n    }\r\n\r\n    onMouseOverInExtentInfo() {\r\n        this.updateExtendInfo.emit();\r\n    }\r\n\r\n    onMousedown($event: MouseEvent) {\r\n        const target = $event.target as HTMLElement;\r\n        if (target.tagName !== 'INPUT') {\r\n            $event.preventDefault();\r\n        }\r\n        $event.stopPropagation();\r\n    }\r\n\r\n    onClearValue($event: any) {\r\n        const flag1 = !this.readonly && !this.disabled && this.editable;\r\n        const flag2 = !this.editable;\r\n        $event.stopPropagation();\r\n        if (flag1 || flag2) {\r\n            this.onValueChange('', false);\r\n            this.showClearButton = false;\r\n            this.clear.emit();\r\n        }\r\n    }\r\n\r\n    onBlur(event) {\r\n        this.renderer.removeClass(this.inputGroup.nativeElement, this.focusCls);\r\n        this.blurHandle.emit(event);\r\n        event.stopPropagation();\r\n        return false;\r\n    }\r\n\r\n    onValueChange(val: string, emit = true) {\r\n        if (this.value !== val) {\r\n            this.value = val;\r\n            this.onModelChange(val);\r\n            this.onModelTouched(val);\r\n            if (emit) {\r\n                this.valueChange.emit(val);\r\n            }\r\n        }\r\n    }\r\n\r\n    onClickHandle(event: Event) {\r\n\r\n        if (this.showButtonWhenDisabled || ((!this.editable  || !this.readonly) && !this.disabled)) {\r\n            this.clickHandle.emit({\r\n                originalEvent: event,\r\n                value: this.value\r\n            });\r\n        }\r\n\r\n\r\n        // if (!this.editable) {\r\n        //     if (!this.disabled) {\r\n        //         this.clickHandle.emit({\r\n        //             originalEvent: event,\r\n        //             value: this.value\r\n        //         });\r\n        //     }\r\n        // } else {\r\n        //     if (!this.readonly && !this.disabled) {\r\n        //         this.clickHandle.emit({\r\n        //             originalEvent: event,\r\n        //             value: this.value\r\n        //         });\r\n        //     }\r\n        // }\r\n\r\n        event.stopPropagation();\r\n    }\r\n    onIconMouseEnter(e: MouseEvent) {\r\n        this.iconMouseEnter.emit(e);\r\n    }\r\n    onIconMouseLeave(e: MouseEvent) {\r\n        this.iconMouseLeave.emit(e);\r\n    }\r\n    focus() {\r\n        this.textbox.nativeElement.focus();\r\n    }\r\n\r\n    writeValue(obj: any): void {\r\n        this.value = (obj === null || obj === undefined) ? '' : obj;\r\n        this.textbox.nativeElement.value = this.value;\r\n        // å¨æ­¤å¤æ§è¡ onModelChange å pristine ç¶æåä¸º false å³éç¬¬ä¸æ¬¡å è½½ï¼å¯¼è³è¡¨åä¸­çéè¯¯ä¿¡æ¯æ¾ç¤ºåºæ¥ï¼\r\n        // å¦æå¿é¡»è¦æ§è¡ä¸æ¬¡ï¼éè¦éæ°ngControl çç¶æ\r\n        // this.onModelChange(obj);\r\n    }\r\n    registerOnChange(fn: any): void {\r\n        this.onModelChange = fn;\r\n    }\r\n    registerOnTouched(fn: any): void {\r\n        this.onModelTouched = fn;\r\n    }\r\n    setDisabledState(isDisabled: boolean): void {\r\n        this.disabled = isDisabled;\r\n    }\r\n\r\n    setFocusToEnd() {\r\n        const el = this.textbox.nativeElement;\r\n        el.focus();\r\n        el.selectionStart = el.value.length;\r\n        el.selectionEnd = el.value.length;\r\n    }\r\n}\r\n","import { PopoverModule } from '@farris/ui-popover';\r\nimport { NgModule } from '@angular/core';\r\nimport { InputGroupComponent } from './input-group.component';\r\nimport { FarrisCommonModule } from '@farris/ui-common';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule } from '@angular/forms';\r\n\r\n@NgModule({\r\n  declarations: [InputGroupComponent],\r\n  imports: [\r\n    CommonModule,\r\n    FormsModule,\r\n    PopoverModule.forRoot(),\r\n    FarrisCommonModule\r\n  ],\r\n  exports: [\r\n    InputGroupComponent\r\n  ]\r\n})\r\nexport class InputGroupModule { }\r\n"]}