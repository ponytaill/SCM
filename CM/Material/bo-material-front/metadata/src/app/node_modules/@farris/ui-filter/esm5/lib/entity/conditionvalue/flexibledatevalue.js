/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ControlType } from '../controltype';
import { EventEmitter } from '@angular/core';
import { DateTimeHelperService } from '@farris/ui-common/date';
var FlexibleDateValue = /** @class */ (function () {
    function FlexibleDateValue(value, single) {
        if (value === void 0) { value = { startValue: null, endValue: null, value: null }; }
        if (single === void 0) { single = true; }
        this.clear$ = new EventEmitter();
        this.startValue = value.startValue;
        this.endValue = value.endValue;
        this.value = value.value;
        this.single = single;
    }
    /**
     * @return {?}
     */
    FlexibleDateValue.prototype.getControlType = /**
     * @return {?}
     */
    function () {
        return ControlType.FlexibleDate;
    };
    /**
     * @return {?}
     */
    FlexibleDateValue.prototype.isEmpty = /**
     * @return {?}
     */
    function () {
        if (this.single) {
            return !this.value;
        }
        else {
            return (this.startValue == null && this.endValue == null);
        }
    };
    /**
     * @return {?}
     */
    FlexibleDateValue.prototype.clearValue = /**
     * @return {?}
     */
    function () {
        this.startValue = undefined;
        this.endValue = undefined;
        this.value = undefined;
        this.clear$.emit();
    };
    /**
     * @param {?} value
     * @return {?}
     */
    FlexibleDateValue.prototype.setOriginalValue = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        throw new Error("Method not implemented.");
    };
    /**
     * @return {?}
     */
    FlexibleDateValue.prototype.getOriginalValue = /**
     * @return {?}
     */
    function () {
        return {
            begin: this.startValue,
            end: this.endValue,
            value: this.value
        };
    };
    /**
     * @param {?=} ctrl
     * @return {?}
     */
    FlexibleDateValue.prototype.getValueText = /**
     * @param {?=} ctrl
     * @return {?}
     */
    function (ctrl) {
        if (this.single) {
            if (this.value == undefined || (!this.value && typeof (this.value) != 'undefined')) {
                return this.value;
            }
            else {
                return '' + this.value;
            }
        }
        else {
            if (this.startValue == undefined && this.endValue == undefined) {
                return '';
            }
            else {
                if (ctrl && ctrl.format) {
                    /** @type {?} */
                    var dateHlp = new DateTimeHelperService();
                    if (this.startValue == undefined) {
                        return ('~' + dateHlp.formatTo(this.endValue, ctrl.format));
                    }
                    else if (this.endValue == undefined) {
                        return (dateHlp.formatTo(this.startValue, ctrl.format) + '~');
                    }
                    else {
                        return dateHlp.formatTo(this.startValue, ctrl.format) + '~' + dateHlp.formatTo(this.endValue, ctrl.format);
                    }
                }
                else {
                    if (this.startValue == undefined) {
                        return ('~' + this.endValue);
                    }
                    else if (this.endValue == undefined) {
                        return (this.startValue + '~');
                    }
                    else {
                        return (this.startValue + '~' + this.endValue);
                    }
                }
            }
        }
    };
    return FlexibleDateValue;
}());
export { FlexibleDateValue };
if (false) {
    /** @type {?} */
    FlexibleDateValue.prototype.startValue;
    /** @type {?} */
    FlexibleDateValue.prototype.endValue;
    /** @type {?} */
    FlexibleDateValue.prototype.value;
    /** @type {?} */
    FlexibleDateValue.prototype.single;
    /** @type {?} */
    FlexibleDateValue.prototype.clear$;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmxleGlibGVkYXRldmFsdWUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZmFycmlzL3VpLWZpbHRlci8iLCJzb3VyY2VzIjpbImxpYi9lbnRpdHkvY29uZGl0aW9udmFsdWUvZmxleGlibGVkYXRldmFsdWUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUNBLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUM3QyxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzdDLE9BQU8sRUFBRSxxQkFBcUIsRUFBRSxNQUFNLHdCQUF3QixDQUFDO0FBRS9EO0lBT0ksMkJBQVksS0FBa0gsRUFBRSxNQUFzQjtRQUExSSxzQkFBQSxFQUFBLFVBQW1FLFVBQVUsRUFBRSxJQUFJLEVBQUUsUUFBUSxFQUFFLElBQUksRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFO1FBQUUsdUJBQUEsRUFBQSxhQUFzQjtRQUZ0SixXQUFNLEdBQUcsSUFBSSxZQUFZLEVBQUUsQ0FBQztRQUd4QixJQUFJLENBQUMsVUFBVSxHQUFHLEtBQUssQ0FBQyxVQUFVLENBQUM7UUFDbkMsSUFBSSxDQUFDLFFBQVEsR0FBRyxLQUFLLENBQUMsUUFBUSxDQUFDO1FBQy9CLElBQUksQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDLEtBQUssQ0FBQztRQUN6QixJQUFJLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQztJQUN6QixDQUFDOzs7O0lBRUQsMENBQWM7OztJQUFkO1FBQ0ksT0FBTyxXQUFXLENBQUMsWUFBWSxDQUFDO0lBQ3BDLENBQUM7Ozs7SUFDRCxtQ0FBTzs7O0lBQVA7UUFDSSxJQUFJLElBQUksQ0FBQyxNQUFNLEVBQUU7WUFDYixPQUFPLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQztTQUN0QjthQUFNO1lBQ0gsT0FBTyxDQUFDLElBQUksQ0FBQyxVQUFVLElBQUksSUFBSSxJQUFJLElBQUksQ0FBQyxRQUFRLElBQUksSUFBSSxDQUFDLENBQUM7U0FD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IElWYWx1ZSB9IGZyb20gJy4vaXZhbHVlJztcclxuaW1wb3J0IHsgQ29udHJvbFR5cGUgfSBmcm9tICcuLi9jb250cm9sdHlwZSc7XHJcbmltcG9ydCB7IEV2ZW50RW1pdHRlciB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBEYXRlVGltZUhlbHBlclNlcnZpY2UgfSBmcm9tICdAZmFycmlzL3VpLWNvbW1vbi9kYXRlJztcclxuXHJcbmV4cG9ydCBjbGFzcyBGbGV4aWJsZURhdGVWYWx1ZSBpbXBsZW1lbnRzIElWYWx1ZSB7XHJcbiAgICBzdGFydFZhbHVlOiBzdHJpbmc7XHJcbiAgICBlbmRWYWx1ZTogc3RyaW5nO1xyXG4gICAgdmFsdWU6IHN0cmluZztcclxuICAgIHNpbmdsZTogYm9vbGVhbjtcclxuICAgIGNsZWFyJCA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcclxuXHJcbiAgICBjb25zdHJ1Y3Rvcih2YWx1ZTogeyBzdGFydFZhbHVlOiBzdHJpbmcsIGVuZFZhbHVlOiBzdHJpbmcsIHZhbHVlOiBzdHJpbmcgfSA9IHsgc3RhcnRWYWx1ZTogbnVsbCwgZW5kVmFsdWU6IG51bGwsIHZhbHVlOiBudWxsIH0sIHNpbmdsZTogYm9vbGVhbiA9IHRydWUpIHtcclxuICAgICAgICB0aGlzLnN0YXJ0VmFsdWUgPSB2YWx1ZS5zdGFydFZhbHVlO1xyXG4gICAgICAgIHRoaXMuZW5kVmFsdWUgPSB2YWx1ZS5lbmRWYWx1ZTtcclxuICAgICAgICB0aGlzLnZhbHVlID0gdmFsdWUudmFsdWU7XHJcbiAgICAgICAgdGhpcy5zaW5nbGUgPSBzaW5nbGU7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0Q29udHJvbFR5cGUoKTogQ29udHJvbFR5cGUge1xyXG4gICAgICAgIHJldHVybiBDb250cm9sVHlwZS5GbGV4aWJsZURhdGU7XHJcbiAgICB9XHJcbiAgICBpc0VtcHR5KCk6IGJvb2xlYW4ge1xyXG4gICAgICAgIGlmICh0aGlzLnNpbmdsZSkge1xyXG4gICAgICAgICAgICByZXR1cm4gIXRoaXMudmFsdWU7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgcmV0dXJuICh0aGlzLnN0YXJ0VmFsdWUgPT0gbnVsbCAmJiB0aGlzLmVuZFZhbHVlID09IG51bGwpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGNsZWFyVmFsdWUoKTogdm9pZCB7XHJcbiAgICAgICAgdGhpcy5zdGFydFZhbHVlID0gdW5kZWZpbmVkO1xyXG4gICAgICAgIHRoaXMuZW5kVmFsdWUgPSB1bmRlZmluZWQ7XHJcbiAgICAgICAgdGhpcy52YWx1ZSA9IHVuZGVmaW5lZDtcclxuICAgICAgICB0aGlzLmNsZWFyJC5lbWl0KCk7XHJcbiAgICB9XHJcbiAgICBzZXRPcmlnaW5hbFZhbHVlKHZhbHVlOiBhbnkpOiB2b2lkIHtcclxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJNZXRob2Qgbm90IGltcGxlbWVudGVkLlwiKTtcclxuICAgIH1cclxuICAgIGdldE9yaWdpbmFsVmFsdWUoKSB7XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgYmVnaW46IHRoaXMuc3RhcnRWYWx1ZSxcclxuICAgICAgICAgICAgZW5kOiB0aGlzLmVuZFZhbHVlLFxyXG4gICAgICAgICAgICB2YWx1ZTogdGhpcy52YWx1ZVxyXG4gICAgICAgIH07XHJcbiAgICB9XHJcblxyXG5cclxuICAgIGdldFZhbHVlVGV4dChjdHJsPzogYW55KTogYW55IHtcclxuICAgICAgICBpZiAodGhpcy5zaW5nbGUpIHtcclxuICAgICAgICAgICAgaWYgKHRoaXMudmFsdWUgPT0gdW5kZWZpbmVkIHx8ICghdGhpcy52YWx1ZSAmJiB0eXBlb2YgKHRoaXMudmFsdWUpICE9ICd1bmRlZmluZWQnKSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMudmFsdWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gJycgKyB0aGlzLnZhbHVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBpZiAodGhpcy5zdGFydFZhbHVlID09IHVuZGVmaW5lZCAmJiB0aGlzLmVuZFZhbHVlID09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuICcnO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgaWYgKGN0cmwgJiYgY3RybC5mb3JtYXQpIHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBkYXRlSGxwID0gbmV3IERhdGVUaW1lSGVscGVyU2VydmljZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLnN0YXJ0VmFsdWUgPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAoJ34nICsgIGRhdGVIbHAuZm9ybWF0VG8odGhpcy5lbmRWYWx1ZSwgY3RybC5mb3JtYXQpKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAodGhpcy5lbmRWYWx1ZSA9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIChkYXRlSGxwLmZvcm1hdFRvKHRoaXMuc3RhcnRWYWx1ZSwgY3RybC5mb3JtYXQpICsgJ34nKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBkYXRlSGxwLmZvcm1hdFRvKHRoaXMuc3RhcnRWYWx1ZSwgY3RybC5mb3JtYXQpICsnficrIGRhdGVIbHAuZm9ybWF0VG8odGhpcy5lbmRWYWx1ZSwgY3RybC5mb3JtYXQpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuc3RhcnRWYWx1ZSA9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICgnficgKyB0aGlzLmVuZFZhbHVlKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAodGhpcy5lbmRWYWx1ZSA9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICh0aGlzLnN0YXJ0VmFsdWUgKyAnficpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICh0aGlzLnN0YXJ0VmFsdWUgKyAnficgKyB0aGlzLmVuZFZhbHVlKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuIl19