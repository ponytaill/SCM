/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, Input, NgZone, ElementRef, Renderer2, Optional, HostListener } from '@angular/core';
import { DatagridHeaderComponent } from './datagrid-header.component';
import { fromEvent } from 'rxjs';
import { takeUntil } from 'rxjs/operators';
/*
 * @Author: 疯狂秀才(Lucas Huang)
 * @Date: 2019-08-10 09:04:53
 * @LastEditors: 疯狂秀才(Lucas Huang)
 * @LastEditTime: 2019-11-20 17:09:09
 * @QQ: 1055818239
 * @Version: v0.0.12
 */
export class DatagridResizeColumnDirective {
    /**
     * @param {?} dh
     * @param {?} ngzone
     * @param {?} el
     * @param {?} render
     */
    constructor(dh, ngzone, el, render) {
        this.dh = dh;
        this.ngzone = ngzone;
        this.el = el;
        this.render = render;
        this.dg = this.dh.dg;
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        if (this.isEnable()) {
            this.render.addClass(this.el.nativeElement, 'f-datagrid-header-cell-resize');
            this.resizer = document.createElement('span');
            this.resizer.className = 'column-resize-bar';
            this.el.nativeElement.appendChild(this.resizer);
            this.ngzone.runOutsideAngular((/**
             * @return {?}
             */
            () => {
                // this.resizerMouseDownListener = this.onMouseDown.bind(this);
                // this.resizer.addEventListener('mousedown', this.resizerMouseDownListener);
                /** @type {?} */
                const mouseUp$ = fromEvent(this.resizer, 'mouseup');
                this.resizerMouseDownListener = fromEvent(this.resizer, 'mousedown').pipe(
                // debounceTime(260),
                takeUntil(mouseUp$)).subscribe((/**
                 * @param {?} e
                 * @return {?}
                 */
                (e) => this.onMouseDown(e)));
            }));
            // const mouse$ = fromEvent(this.resizer, 'click');
            // const buff$ = mouse$.pipe(
            //     debounceTime(250)
            // );
            // const click$ = mouse$.pipe(
            //     buffer(buff$),
            //     map(list => {
            //         return {event: list[0], count: list.length};
            //     }),
            //     filter(x => x.count === 2),
            //     map(x => x.event),
            //     takeUntil(mouseUp$)
            // );
            // click$.subscribe((e) => {
            //     this.onDblClickHandler(e);
            //     // this.onMouseUp(e);
            // });
        }
    }
    /**
     * @return {?}
     */
    onDblClickHandler() {
        if (this.col.field && this.col.field !== this.dg.ControlPanelFeild) {
            /** @type {?} */
            const thRef = this.el;
            this.dg.sizeToContent(this.col, thRef);
        }
        return false;
    }
    /**
     * @private
     * @return {?}
     */
    isEnable() {
        if (this.dg.resizeColumn) {
            if (this.col.field === this.dg.ControlPanelFeild) {
                this.col.resizable = false;
            }
            if (this.col.resizable === undefined) {
                this.col.resizable = true;
            }
            return this.col.resizable;
        }
        return false;
    }
    /**
     * @return {?}
     */
    bindDocumentEvents() {
        this.ngzone.runOutsideAngular((/**
         * @return {?}
         */
        () => {
            this.documentMouseMoveListener = this.onMouseMove.bind(this);
            document.addEventListener('mousemove', this.documentMouseMoveListener);
            this.documentMouseUpListener = this.onMouseUp.bind(this);
            document.addEventListener('mouseup', this.documentMouseUpListener);
        }));
    }
    /**
     * @return {?}
     */
    unbindDocumentEvents() {
        if (this.documentMouseMoveListener) {
            document.removeEventListener('mousemove', this.documentMouseMoveListener);
            this.documentMouseMoveListener = null;
        }
        if (this.documentMouseUpListener) {
            document.removeEventListener('mouseup', this.documentMouseUpListener);
            this.documentMouseUpListener = null;
        }
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onMouseDown(event) {
        event.stopPropagation();
        this.dg.onColumnResizeBegin(event);
        this.render.addClass(this.el.nativeElement, 'column-resizeing');
        this.bindDocumentEvents();
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onMouseMove(event) {
        this.dg.onColumnResize(event);
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onMouseUp(event) {
        this.dg.onColumnResizeEnd(event, this.col);
        this.render.removeClass(this.el.nativeElement, 'column-resizeing');
        this.unbindDocumentEvents();
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        if (this.resizerMouseDownListener) {
            // this.resizer.removeEventListener('mousedown', this.resizerMouseDownListener);
            this.resizerMouseDownListener.unsubscribe();
        }
        this.unbindDocumentEvents();
        if (this.dblclickListener) {
            this.dblclickListener();
        }
        this.resizer = null;
    }
}
DatagridResizeColumnDirective.decorators = [
    { type: Directive, args: [{
                selector: '[resize-column]',
            },] }
];
/** @nocollapse */
DatagridResizeColumnDirective.ctorParameters = () => [
    { type: DatagridHeaderComponent, decorators: [{ type: Optional }] },
    { type: NgZone },
    { type: ElementRef },
    { type: Renderer2 }
];
DatagridResizeColumnDirective.propDecorators = {
    col: [{ type: Input, args: ['resize-column',] }],
    onDblClickHandler: [{ type: HostListener, args: ['dblclick',] }]
};
if (false) {
    /** @type {?} */
    DatagridResizeColumnDirective.prototype.col;
    /** @type {?} */
    DatagridResizeColumnDirective.prototype.resizer;
    /** @type {?} */
    DatagridResizeColumnDirective.prototype.resizerMouseDownListener;
    /** @type {?} */
    DatagridResizeColumnDirective.prototype.documentMouseMoveListener;
    /** @type {?} */
    DatagridResizeColumnDirective.prototype.documentMouseUpListener;
    /** @type {?} */
    DatagridResizeColumnDirective.prototype.dblclickListener;
    /**
     * @type {?}
     * @private
     */
    DatagridResizeColumnDirective.prototype.dg;
    /** @type {?} */
    DatagridResizeColumnDirective.prototype.dh;
    /** @type {?} */
    DatagridResizeColumnDirective.prototype.ngzone;
    /** @type {?} */
    DatagridResizeColumnDirective.prototype.el;
    /** @type {?} */
    DatagridResizeColumnDirective.prototype.render;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0YWdyaWQtcmVzaXplLWNvbHVtbi5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZmFycmlzL3VpLWRhdGFncmlkLyIsInNvdXJjZXMiOlsibGliL2NvbXBvbmVudHMvaGVhZGVyL2RhdGFncmlkLXJlc2l6ZS1jb2x1bW4uZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBRSxNQUFNLEVBQUUsVUFBVSxFQUFFLFNBQVMsRUFBNEIsUUFBUSxFQUFFLFlBQVksRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUdsSSxPQUFPLEVBQUUsdUJBQXVCLEVBQUUsTUFBTSw2QkFBNkIsQ0FBQztBQUN0RSxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBQ2pDLE9BQU8sRUFBcUMsU0FBUyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7Ozs7Ozs7OztBQVk5RSxNQUFNLE9BQU8sNkJBQTZCOzs7Ozs7O0lBUXRDLFlBQ3VCLEVBQTJCLEVBQ3ZDLE1BQWMsRUFBUyxFQUFjLEVBQVMsTUFBaUI7UUFEbkQsT0FBRSxHQUFGLEVBQUUsQ0FBeUI7UUFDdkMsV0FBTSxHQUFOLE1BQU0sQ0FBUTtRQUFTLE9BQUUsR0FBRixFQUFFLENBQVk7UUFBUyxXQUFNLEdBQU4sTUFBTSxDQUFXO1FBRXRFLElBQUksQ0FBQyxFQUFFLEdBQUcsSUFBSSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUM7SUFDekIsQ0FBQzs7OztJQUVELGVBQWU7UUFDWCxJQUFJLElBQUksQ0FBQyxRQUFRLEVBQUUsRUFBRTtZQUNqQixJQUFJLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLGFBQWEsRUFBRSwrQkFBK0IsQ0FBQyxDQUFDO1lBRTdFLElBQUksQ0FBQyxPQUFPLEdBQUcsUUFBUSxDQUFDLGFBQWEsQ0FBQyxNQUFNLENBQUMsQ0FBQztZQUM5QyxJQUFJLENBQUMsT0FBTyxD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Z0IsRUFBRSxDQUFDO1NBQzNCO1FBRUQsSUFBSSxDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUM7SUFDeEIsQ0FBQzs7O1lBMUlKLFNBQVMsU0FBQztnQkFDUCxRQUFRLEVBQUUsaUJBQWlCO2FBQzlCOzs7O1lBYlEsdUJBQXVCLHVCQXVCdkIsUUFBUTtZQTFCVSxNQUFNO1lBQUUsVUFBVTtZQUFFLFNBQVM7OztrQkFrQm5ELEtBQUssU0FBQyxlQUFlO2dDQXdEckIsWUFBWSxTQUFDLFVBQVU7Ozs7SUF4RHhCLDRDQUF3Qzs7SUFDeEMsZ0RBQXlCOztJQUN6QixpRUFBOEI7O0lBQzlCLGtFQUErQjs7SUFDL0IsZ0VBQTZCOztJQUM3Qix5REFBc0I7Ozs7O0lBQ3RCLDJDQUE4Qjs7SUFFMUIsMkNBQThDOztJQUM5QywrQ0FBcUI7O0lBQUUsMkNBQXFCOztJQUFFLCtDQUF3QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERpcmVjdGl2ZSwgSW5wdXQsIE5nWm9uZSwgRWxlbWVudFJlZiwgUmVuZGVyZXIyLCBBZnRlclZpZXdJbml0LCBPbkRlc3Ryb3ksIE9wdGlvbmFsLCBIb3N0TGlzdGVuZXIgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgRGF0YUNvbHVtbiB9IGZyb20gJy4uLy4uL3R5cGVzL2RhdGEtY29sdW1uJztcclxuaW1wb3J0IHsgRGF0YWdyaWRDb21wb25lbnQgfSBmcm9tICcuLy4uLy4uL2RhdGFncmlkLmNvbXBvbmVudCc7XHJcbmltcG9ydCB7IERhdGFncmlkSGVhZGVyQ29tcG9uZW50IH0gZnJvbSAnLi9kYXRhZ3JpZC1oZWFkZXIuY29tcG9uZW50JztcclxuaW1wb3J0IHsgZnJvbUV2ZW50IH0gZnJvbSAncnhqcyc7XHJcbmltcG9ydCB7IGJ1ZmZlciwgZGVib3VuY2VUaW1lLCBtYXAsIGZpbHRlciwgdGFrZVVudGlsIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xyXG4vKlxyXG4gKiBAQXV0aG9yOiDnlq/ni4Lnp4DmiY0oTHVjYXMgSHVhbmcpXHJcbiAqIEBEYXRlOiAyMDE5LTA4LTEwIDA5OjA0OjUzXHJcbiAqIEBMYXN0RWRpdG9yczog55av54uC56eA5omNKEx1Y2FzIEh1YW5nKVxyXG4gKiBATGFzdEVkaXRUaW1lOiAyMDE5LTExLTIwIDE3OjA5OjA5XHJcbiAqIEBRUTogMTA1NTgxODIzOVxyXG4gKiBAVmVyc2lvbjogdjAuMC4xMlxyXG4gKi9cclxuQERpcmVjdGl2ZSh7XHJcbiAgICBzZWxlY3RvcjogJ1tyZXNpemUtY29sdW1uXScsXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBEYXRhZ3JpZFJlc2l6ZUNvbHVtbkRpcmVjdGl2ZSBpbXBsZW1lbnRzIEFmdGVyVmlld0luaXQsIE9uRGVzdHJveSB7XHJcbiAgICBASW5wdXQoJ3Jlc2l6ZS1jb2x1bW4nKSBjb2w6IERhdGFDb2x1bW47XHJcbiAgICByZXNpemVyOiBIVE1MU3BhbkVsZW1lbnQ7XHJcbiAgICByZXNpemVyTW91c2VEb3duTGlzdGVuZXI6IGFueTtcclxuICAgIGRvY3VtZW50TW91c2VNb3ZlTGlzdGVuZXI6IGFueTtcclxuICAgIGRvY3VtZW50TW91c2VVcExpc3RlbmVyOiBhbnk7XHJcbiAgICBkYmxjbGlja0xpc3RlbmVyOiBhbnk7XHJcbiAgICBwcml2YXRlIGRnOiBEYXRhZ3JpZENvbXBvbmVudDtcclxuICAgIGNvbnN0cnVjdG9yKFxyXG4gICAgICAgIEBPcHRpb25hbCgpIHB1YmxpYyBkaDogRGF0YWdyaWRIZWFkZXJDb21wb25lbnQsXHJcbiAgICAgICAgcHVibGljIG5nem9uZTogTmdab25lLCBwdWJsaWMgZWw6IEVsZW1lbnRSZWYsIHB1YmxpYyByZW5kZXI6IFJlbmRlcmVyMlxyXG4gICAgKSB7XHJcbiAgICAgICAgdGhpcy5kZyA9IHRoaXMuZGguZGc7XHJcbiAgICB9XHJcblxyXG4gICAgbmdBZnRlclZpZXdJbml0KCkge1xyXG4gICAgICAgIGlmICh0aGlzLmlzRW5hYmxlKCkpIHtcclxuICAgICAgICAgICAgdGhpcy5yZW5kZXIuYWRkQ2xhc3ModGhpcy5lbC5uYXRpdmVFbGVtZW50LCAnZi1kYXRhZ3JpZC1oZWFkZXItY2VsbC1yZXNpemUnKTtcclxuXHJcbiAgICAgICAgICAgIHRoaXMucmVzaXplciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NwYW4nKTtcclxuICAgICAgICAgICAgdGhpcy5yZXNpemVyLmNsYXNzTmFtZSA9ICdjb2x1bW4tcmVzaXplLWJhcic7XHJcbiAgICAgICAgICAgIHRoaXMuZWwubmF0aXZlRWxlbWVudC5hcHBlbmRDaGlsZCh0aGlzLnJlc2l6ZXIpO1xyXG5cclxuICAgICAgICAgICAgdGhpcy5uZ3pvbmUucnVuT3V0c2lkZUFuZ3VsYXIoKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgLy8gdGhpcy5yZXNpemVyTW91c2VEb3duTGlzdGVuZXIgPSB0aGlzLm9uTW91c2VEb3duLmJpbmQodGhpcyk7XHJcbiAgICAgICAgICAgICAgICAvLyB0aGlzLnJlc2l6ZXIuYWRkRXZlbnRMaXN0ZW5lcignbW91c2Vkb3duJywgdGhpcy5yZXNpemVyTW91c2VEb3duTGlzdGVuZXIpO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgbW91c2VVcCQgPSBmcm9tRXZlbnQodGhpcy5yZXNpemVyLCAnbW91c2V1cCcpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5yZXNpemVyTW91c2VEb3duTGlzdGVuZXIgPSBmcm9tRXZlbnQodGhpcy5yZXNpemVyLCAnbW91c2Vkb3duJykucGlwZShcclxuICAgICAgICAgICAgICAgICAgICAvLyBkZWJvdW5jZVRpbWUoMjYwKSxcclxuICAgICAgICAgICAgICAgICAgICB0YWtlVW50aWwobW91c2VVcCQpXHJcbiAgICAgICAgICAgICAgICApLnN1YnNjcmliZSgoZTogYW55KSA9PlxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMub25Nb3VzZURvd24oZSlcclxuICAgICAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgLy8gY29uc3QgbW91c2UkID0gZnJvbUV2ZW50KHRoaXMucmVzaXplciwgJ2NsaWNrJyk7XHJcbiAgICAgICAgICAgIC8vIGNvbnN0IGJ1ZmYkID0gbW91c2UkLnBpcGUoXHJcbiAgICAgICAgICAgIC8vICAgICBkZWJvdW5jZVRpbWUoMjUwKVxyXG4gICAgICAgICAgICAvLyApO1xyXG5cclxuICAgICAgICAgICAgLy8gY29uc3QgY2xpY2skID0gbW91c2UkLnBpcGUoXHJcbiAgICAgICAgICAgIC8vICAgICBidWZmZXIoYnVmZiQpLFxyXG4gICAgICAgICAgICAvLyAgICAgbWFwKGxpc3QgPT4ge1xyXG4gICAgICAgICAgICAvLyAgICAgICAgIHJldHVybiB7ZXZlbnQ6IGxpc3RbMF0sIGNvdW50OiBsaXN0Lmxlbmd0aH07XHJcbiAgICAgICAgICAgIC8vICAgICB9KSxcclxuICAgICAgICAgICAgLy8gICAgIGZpbHRlcih4ID0+IHguY291bnQgPT09IDIpLFxyXG4gICAgICAgICAgICAvLyAgICAgbWFwKHggPT4geC5ldmVudCksXHJcbiAgICAgICAgICAgIC8vICAgICB0YWtlVW50aWwobW91c2VVcCQpXHJcbiAgICAgICAgICAgIC8vICk7XHJcblxyXG4gICAgICAgICAgICAvLyBjbGljayQuc3Vic2NyaWJlKChlKSA9PiB7XHJcbiAgICAgICAgICAgIC8vICAgICB0aGlzLm9uRGJsQ2xpY2tIYW5kbGVyKGUpO1xyXG4gICAgICAgICAgICAvLyAgICAgLy8gdGhpcy5vbk1vdXNlVXAoZSk7XHJcbiAgICAgICAgICAgIC8vIH0pO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBASG9zdExpc3RlbmVyKCdkYmxjbGljaycpXHJcbiAgICBvbkRibENsaWNrSGFuZGxlcigpIHtcclxuICAgICAgICBpZiAodGhpcy5jb2wuZmllbGQgJiYgdGhpcy5jb2wuZmllbGQgIT09IHRoaXMuZGcuQ29udHJvbFBhbmVsRmVpbGQpIHtcclxuICAgICAgICAgICAgY29uc3QgdGhSZWYgPSB0aGlzLmVsO1xyXG4gICAgICAgICAgICB0aGlzLmRnLnNpemVUb0NvbnRlbnQodGhpcy5jb2wsIHRoUmVmKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgaXNFbmFibGUoKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuZGcucmVzaXplQ29sdW1uKSB7XHJcblxyXG4gICAgICAgICAgICBpZiAoIHRoaXMuY29sLmZpZWxkID09PSB0aGlzLmRnLkNvbnRyb2xQYW5lbEZlaWxkKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmNvbC5yZXNpemFibGUgPSBmYWxzZTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKHRoaXMuY29sLnJlc2l6YWJsZSA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmNvbC5yZXNpemFibGUgPSB0cnVlO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5jb2wucmVzaXphYmxlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfVxyXG5cclxuICAgIGJpbmREb2N1bWVudEV2ZW50cygpIHtcclxuICAgICAgICB0aGlzLm5nem9uZS5ydW5PdXRzaWRlQW5ndWxhcigoKSA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMuZG9jdW1lbnRNb3VzZU1vdmVMaXN0ZW5lciA9IHRoaXMub25Nb3VzZU1vdmUuYmluZCh0aGlzKTtcclxuICAgICAgICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignbW91c2Vtb3ZlJywgdGhpcy5kb2N1bWVudE1vdXNlTW92ZUxpc3RlbmVyKTtcclxuXHJcbiAgICAgICAgICAgIHRoaXMuZG9jdW1lbnRNb3VzZVVwTGlzdGVuZXIgPSB0aGlzLm9uTW91c2VVcC5iaW5kKHRoaXMpO1xyXG4gICAgICAgICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdtb3VzZXVwJywgdGhpcy5kb2N1bWVudE1vdXNlVXBMaXN0ZW5lcik7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgdW5iaW5kRG9jdW1lbnRFdmVudHMoKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuZG9jdW1lbnRNb3VzZU1vdmVMaXN0ZW5lcikge1xyXG4gICAgICAgICAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdtb3VzZW1vdmUnLCB0aGlzLmRvY3VtZW50TW91c2VNb3ZlTGlzdGVuZXIpO1xyXG4gICAgICAgICAgICB0aGlzLmRvY3VtZW50TW91c2VNb3ZlTGlzdGVuZXIgPSBudWxsO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKHRoaXMuZG9jdW1lbnRNb3VzZVVwTGlzdGVuZXIpIHtcclxuICAgICAgICAgICAgZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcignbW91c2V1cCcsIHRoaXMuZG9jdW1lbnRNb3VzZVVwTGlzdGVuZXIpO1xyXG4gICAgICAgICAgICB0aGlzLmRvY3VtZW50TW91c2VVcExpc3RlbmVyID0gbnVsbDtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgb25Nb3VzZURvd24oZXZlbnQ6IE1vdXNlRXZlbnQpIHtcclxuICAgICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcclxuICAgICAgICB0aGlzLmRnLm9uQ29sdW1uUmVzaXplQmVnaW4oZXZlbnQpO1xyXG4gICAgICAgIHRoaXMucmVuZGVyLmFkZENsYXNzKHRoaXMuZWwubmF0aXZlRWxlbWVudCwgJ2NvbHVtbi1yZXNpemVpbmcnKTtcclxuICAgICAgICB0aGlzLmJpbmREb2N1bWVudEV2ZW50cygpO1xyXG4gICAgfVxyXG5cclxuICAgIG9uTW91c2VNb3ZlKGV2ZW50OiBNb3VzZUV2ZW50KSB7XHJcbiAgICAgICAgdGhpcy5kZy5vbkNvbHVtblJlc2l6ZShldmVudCk7XHJcbiAgICB9XHJcblxyXG4gICAgb25Nb3VzZVVwKGV2ZW50OiBNb3VzZUV2ZW50KSB7XHJcbiAgICAgICAgdGhpcy5kZy5vbkNvbHVtblJlc2l6ZUVuZChldmVudCwgdGhpcy5jb2wpO1xyXG4gICAgICAgIHRoaXMucmVuZGVyLnJlbW92ZUNsYXNzKHRoaXMuZWwubmF0aXZlRWxlbWVudCwgJ2NvbHVtbi1yZXNpemVpbmcnKTtcclxuICAgICAgICB0aGlzLnVuYmluZERvY3VtZW50RXZlbnRzKCk7XHJcbiAgICB9XHJcblxyXG4gICAgbmdPbkRlc3Ryb3koKSB7XHJcbiAgICAgICAgaWYgKHRoaXMucmVzaXplck1vdXNlRG93bkxpc3RlbmVyKSB7XHJcbiAgICAgICAgICAgIC8vIHRoaXMucmVzaXplci5yZW1vdmVFdmVudExpc3RlbmVyKCdtb3VzZWRvd24nLCB0aGlzLnJlc2l6ZXJNb3VzZURvd25MaXN0ZW5lcik7XHJcbiAgICAgICAgICAgIHRoaXMucmVzaXplck1vdXNlRG93bkxpc3RlbmVyLnVuc3Vic2NyaWJlKCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLnVuYmluZERvY3VtZW50RXZlbnRzKCk7XHJcblxyXG4gICAgICAgIGlmICh0aGlzLmRibGNsaWNrTGlzdGVuZXIpIHtcclxuICAgICAgICAgICAgdGhpcy5kYmxjbGlja0xpc3RlbmVyKCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLnJlc2l6ZXIgPSBudWxsO1xyXG4gICAgfVxyXG59XHJcbiJdfQ==