{"version":3,"sources":["ng://@farris/command-services/lib/form-loading/hide-event.service.ts","ng://@farris/command-services/lib/form-loading/form-loading.service.ts","ng://@farris/command-services/lib/languages/language-message-en.ts","ng://@farris/command-services/lib/languages/language-message-zh.ts","ng://@farris/command-services/lib/languages/language-message-zhft.ts","ng://@farris/command-services/lib/languages/language-message-factory.ts","ng://@farris/command-services/lib/languag.service.ts","node_modules/tslib/tslib.es6.js","ng://@farris/command-services/lib/util/device-ability.ts","ng://@farris/command-services/lib/error/exception_strategy.ts","ng://@farris/command-services/lib/error/exception_strategy_factory.ts","ng://@farris/command-services/lib/util/http.ts","ng://@farris/command-services/lib/error/form-error.service.ts","ng://@farris/command-services/lib/form-message.service.ts","ng://@farris/command-services/lib/form-notify.service.ts","ng://@farris/command-services/lib/form-wizard.service.ts","ng://@farris/command-services/lib/check.service.ts","ng://@farris/command-services/lib/data-check.service.ts","ng://@farris/command-services/lib/event.service.ts","ng://@farris/command-services/lib/menu-state.service.ts","ng://@farris/command-services/lib/router.service.ts","ng://@farris/command-services/lib/types.ts","ng://@farris/command-services/lib/querystring.ts","ng://@farris/command-services/lib/rtf-service.ts","ng://@farris/command-services/lib/navigation-event.service.ts","ng://@farris/command-services/lib/farris-form.service.ts","ng://@farris/command-services/lib/navigation.service.ts","ng://@farris/command-services/lib/data-services/utils/edit-state.util.ts","ng://@farris/command-services/lib/form-notify-strategy.service.ts","ng://@farris/command-services/lib/command-service.ts","ng://@farris/command-services/lib/validation.service.ts","ng://@farris/command-services/lib/data-services/card-data.service.ts","ng://@farris/command-services/lib/navigation-middleware.service.ts","ng://@farris/command-services/lib/grid.middleware.service.ts","ng://@farris/command-services/lib/param.service.ts","ng://@farris/command-services/lib/keybinding-service.ts","ng://@farris/command-services/lib/filter-condition.service.ts","ng://@farris/command-services/lib/ui-state.service.ts","ng://@farris/command-services/lib/state-machine.service.ts","ng://@farris/command-services/lib/binding-data.service.ts","ng://@farris/command-services/lib/application-param.service.ts","ng://@farris/command-services/lib/entity-services/entity-traversing.service.ts","ng://@farris/command-services/lib/entity-services/entity-manipulation.service.ts","ng://@farris/command-services/lib/entity-services/entity-aggregation.service.ts","ng://@farris/command-services/lib/entity-services/entity-list.service.ts","ng://@farris/command-services/lib/entity-services/entity.service.ts","ng://@farris/command-services/lib/binding-path.service.ts","ng://@farris/command-services/lib/form-control.service.ts","ng://@farris/command-services/lib/frame-context.service.ts","ng://@farris/command-services/lib/focus-invalid.service.ts","ng://@farris/command-services/lib/change-item.service.ts","ng://@farris/command-services/lib/data-services/list-data.service.ts","ng://@farris/command-services/lib/data-services/sub-list-data.service.ts","ng://@farris/command-services/lib/data-services/base-data.service.ts","ng://@farris/command-services/lib/data-services/tree-table/util/parent-tree.util.ts","ng://@farris/command-services/lib/data-services/tree-table/util/path-tree.util.ts","ng://@farris/command-services/lib/data-services/tree-table/util/tree-util-factory.ts","ng://@farris/command-services/lib/data-services/tree-table/repository/parent-tree-repository.ts","ng://@farris/command-services/lib/data-services/tree-table/repository/path-tree-repository.ts","ng://@farris/command-services/lib/data-services/tree-table/repository/tree-repository-factory.ts","ng://@farris/command-services/lib/data-services/tree-data.service.ts","ng://@farris/command-services/lib/data-services/filter-condition-data.service.ts","ng://@farris/command-services/lib/data-services/edit-data.service.ts","ng://@farris/command-services/lib/data-services/remove-data.service.ts","ng://@farris/command-services/lib/data-services/save-data.service.ts","ng://@farris/command-services/lib/data-services/sub-tree-data-service.ts","ng://@farris/command-services/lib/be-action.service.ts","ng://@farris/command-services/lib/approve.service.ts","ng://@farris/command-services/lib/print.service.ts","ng://@farris/command-services/lib/attachment/types.ts","ng://@farris/command-services/lib/attachment/attachment.util.ts","ng://@farris/command-services/lib/attachment/attachment-data.service.ts","ng://@farris/command-services/lib/attachment/attachment.service.ts","ng://@farris/command-services/lib/attachment/file.service.ts","ng://@farris/command-services/lib/dialog.service.ts","ng://@farris/command-services/lib/sidebar-service.ts","ng://@farris/command-services/lib/filter-service.ts","ng://@farris/command-services/lib/component-manager.service.ts","ng://@farris/command-services/lib/authority/authority.service.ts","ng://@farris/command-services/lib/authority/authority.ts","ng://@farris/command-services/lib/exception.handler.ts","ng://@farris/command-services/lib/providers/legacy_providers.ts","ng://@farris/command-services/lib/user-settings.service.ts","ng://@farris/command-services/lib/work-flow/work-flow-message.service.ts","ng://@farris/command-services/lib/work-flow/work-flow-message.ts","ng://@farris/command-services/lib/work-flow/work-flow-message.handler.ts","ng://@farris/command-services/lib/providers/module_providers.ts","ng://@farris/command-services/lib/query-solution/enum/compare-type.enum.ts","ng://@farris/command-services/lib/query-solution/enum/value-type.enum.ts","ng://@farris/command-services/lib/query-solution/enum/relation-type.enum.ts","ng://@farris/command-services/lib/query-solution/handlers/text.handler.ts","ng://@farris/command-services/lib/query-solution/handlers/daterage.handler.ts","ng://@farris/command-services/lib/query-solution/handlers/dropdown.handler.ts","ng://@farris/command-services/lib/query-solution/handlers/numberrage.handler.ts","ng://@farris/command-services/lib/query-solution/handlers/smarthelp.handler.ts","ng://@farris/command-services/lib/query-solution/handlers/single-year.handler.ts","ng://@farris/command-services/lib/query-solution/handlers/checkbox.handler.ts","ng://@farris/command-services/lib/query-solution/handlers/single-month.handler.ts","ng://@farris/command-services/lib/query-solution/handlers/monthrange.handler.ts","ng://@farris/command-services/lib/query-solution/handlers/single-date-time.handler.ts","ng://@farris/command-services/lib/query-solution/handlers/single-number.handler.ts","ng://@farris/command-services/lib/query-solution/handlers/single-date.handler.ts","ng://@farris/command-services/lib/query-solution/handlers/combolookup.handler.ts","ng://@farris/command-services/lib/query-solution/handlers/radio.handler.ts","ng://@farris/command-services/lib/query-solution/handlers/inputgroup.handler.ts","ng://@farris/command-services/lib/query-solution/querycondition.handler.factory.ts","ng://@farris/command-services/lib/query-solution/query-solution.service.ts","ng://@farris/command-services/lib/end-edit.service.ts","ng://@farris/command-services/lib/remote-summary.service.ts","ng://@farris/command-services/lib/batch-edit.service.ts","ng://@farris/command-services/lib/discussion-group.service.ts","ng://@farris/command-services/lib/list-filter/list-filter.service.ts","ng://@farris/command-services/lib/manifest/form_manifest_service.ts","ng://@farris/command-services/lib/manifest/form_expression_manifest_service.ts","ng://@farris/command-services/lib/localization.service.ts","ng://@farris/command-services/lib/service.ts","ng://@farris/command-services/lib/data-grid.service.ts","ng://@farris/command-services/lib/form-attention.service.ts","ng://@farris/command-services/lib/feature-edit/types.ts","ng://@farris/command-services/lib/feature-edit/feature-repository.ts","ng://@farris/command-services/lib/feature-edit/feature-data.service.ts","ng://@farris/command-services/lib/feature-edit/feature-edit.service.ts","ng://@farris/command-services/lib/expression_service.ts","ng://@farris/command-services/lib/dirty-checking.service.ts","ng://@farris/command-services/lib/pop_up.service.ts","ng://@farris/command-services/lib/form.service.ts","ng://@farris/command-services/lib/view-model.service.ts","ng://@farris/command-services/lib/pagination.service.ts","ng://@farris/command-services/lib/providers/frame_providers.ts","ng://@farris/command-services/lib/providers/dynamic_providers.ts","ng://@farris/command-services/lib/command-services-module.ts","ng://@farris/command-services/lib/rtf-message/message-pipe.ts","ng://@farris/command-services/lib/rtf-message/message-pipe-service.ts","ng://@farris/command-services/lib/back_end_message_handler.ts"],"names":["HideEventService","Injectable","this","hideEvent","Subject","FormLoadingService","prototype","setSuspend","flag","isSuspend","show","configOrMessage","loadingCmp","close","registerService","loadingConfig","buildLoadingConfig","loadingService","showLoadingWithDelay","delayTime","_this","timerId","setTimeout","loadingTimerIds","push","hideDelayLoading","timerIdToClear","clearLoadingTimer","hide","message","hasOwnProperty","delay","clearAll","window","clearAllLoadingTimers","destroy","clearTimeout","filter","forEach","services","Array","isArray","length","service","LoadingService","decorators","type","Optional","AppContext","hideEventService","applicationContext","subscribe","result","LanguageMessageForEn","yes","no","unsaveNotifyTitle","clientNotifyTitle","serverNotifyTitle","cancelApproveSuccess","cancelApproveFailed","unallowEmptyProcessInstanceName","unallowEmptyBizBillId","unallowEmptyChildBizBillId","bizDefKeyRequired","procInsIdRequired","addChildFailed","addSiblingFailed","addSubChildFailed","addSubSiblingFailed","deleteFailed","multiSaveFailed","appendFailed","queryFailed","cancelFailed","updateFailed","addFailed","loadFailed","saveSuccess","saveFailed","deleteSuccess","deleteFaild","confirmDeletion","submitSuccess","submitFaild","notifyTitle","httpError","gridDataNotSave","exitWithoutSave","notSupportMenuType","cancelWithoutSave","plsSelectDeleteData","errorHierarchyKey","plsSelectParentNode","deleteChildFirst","incorrectHierarchyConfig","operationFailed","plsSelectEditData","plsSelectViewData","plsUploadFirst","defaultDialogTitle","changeToFirst","changeToLast","noProcessInstanceId","noDataExist","noAttachment","confirm","cancel","plsSelectCopyData","copyFieldsRequired","pathIsRequired","propsIsEmpty","historyAttachment","plsSelectDownloadAtt","noDownloadAtt","plsCheckBatchEditRows","plsSelectDetailFormData","dataAndStateChanged","dataChanged","stateChanged","defaultStateName","copy","copySuccess","copyFailed","roger","appOrFuncIdRequired","tableCanNotEmpty","LanguageMessageForZh","LanguageMessageForZhft","LanguageMessageFactory","create","language","languageMessageMap","has","get","languageMessage","set","Map","LanguageService","Object","defineProperty","getInstance","innerInstance","instance","extendProperties","keys","propName","Inject","args","LOCALE_ID","localeId","extendStatics","d","b","setPrototypeOf","__proto__","p","__extends","__","constructor","__assign","assign","t","s","i","n","arguments","call","apply","__values","o","m","Symbol","iterator","next","value","done","__read","r","e","ar","error","__spread","concat","DeviceAbility","copyToClipboard","text","windowRef","clipboardData","setData","document","queryCommandSupported","textarea","createElement","textContent","style","position","body","appendChild","select","execCommand","ex","removeChild","ExceptionStrategy","MessagerService","messagerService","languageService","_super","InfoExceptionStrategy","tslib_1.__extends","handleException","info","Message","WarningExceptionStrategy","warning","ErrorExceptionStrategy","handleErrorLevel","bsModalRef","exceptionMsg","date","Date","localDate","moment","format","detail","Detail","innerMessage","options","showMaxButton","buttons","langService","cls","handle","width","height","safeHtml","exception","copyButton","onClick","content","showMiniNotify","displayError","console","FatalExceptionStrategy","HttpStatusType","ExceptionFactory","exceptionFactory","getExceptionHandleStrategy","exceptionLevel","exceptionStrategy","HttpUtil","getHttpStatusType","httpResponseSatus","statusType","Info","Success","Redirect","ClientError","ServerError","FormErrorService","isHttpErrorResponse","httpErrorHandler","commonErrorHandler","status","msgService","http401Error","httpErrorInClient","httpErrorInServer","Error","errorMsg","name","HttpErrorResponse","FormMessageService","question","confirmResult$","confirmPromise","from","question2","promise$","Promise","resolve","reject","dialogRef","defaultFocus","prompt","title","JSON","parse","Level","undefined","replace","showHeader","dialogShownKey","i18n","en","sessionInvalid","ok","zh-CHS","curLanguage","messageOptions","initialState","okText","okHandle","modalRef","redirectUri","redirect_uri","location","href","cancelText","cancelHandle","fitContent","dialog","closed","FormNotifyService","default","notifyService","msg","timeout","notifyOptions","hideTitle","success","NotifyService","FormWizardService","preStep","currentPageId","wizardSer","getCurrentPageId","updateWizardState","WizardEventType","Prev","nextStep","Next","cancelWizard","finishWizard","WizardService","CheckService","checkEmpty","DataCheckService","checkBeforeEdit","idToEdit","ifSkipCheck","formNotifyService","empty","checkBeforeView","idToView","id","params","command","messageService","EventService","trigger","eventType","eventData","frameIds","eventBus","FrameEventBus","MenuStateService","getState","data","sessionStorage","getItem","COMMAND_SERVICE_LINK_STORAGE_KEY","setState","links","setItem","stringify","addMenuState","parentMenuId","childMenuId","state","isParentExist","childItem","find","item","getMenuState","parentMenu","childMenu","updateMenuState","key","removeMenu","menuId","removeParentMenu","removeChildMenu","childMenus","child","index","splice","RouterService","route","url","router","createUrlTree","toString","setParams","navigateByUrl","registerEvent","getParams","hash","getAppId","getFuncId","frameworkService","eventListner","FuncSwitch","getOriginalId","tabId","menuState","menuStateService","formReload","lastSwitchId","FuncClosed","onClosed","removeMenuState","lastCloseId","indexOf","split","_a","openMenu","funcId","reload","paramsMap","buildParamMap","openFuncWithParam","openApp","appId","appEntrance","paramMap","appService","closeMenu","findDialog","isDialogComponent","rootComponent","closeFunc","getAppEntrance","closeApp","frameContext","parentFrameContext","object","path","defaultVal","PATH","shift","paramsObj","routerParamService","decodeURLParams","getParentMenuId","WEB_FORM_ROUTER_PARENT_ID","query","search","slice","reduce","val","decodeURIComponent","queryString","Router","RouterParamService","FrameworkService","AppService","TAB_EVENT","onTabClosed","onTabClosing","onTabSwitched","QuerystringService","RuntimeFrameworkService","getService","env","top","isSameOrigin","parent","rtfService","func","openMenu$","openMenuByStream","EMPTY","getEntityParam","callback","once","beforeCloseMenu","beforeClose","getMenuParams","addEventListener","token","handler","frmEvent","eventListener","getMenuSwitchControlEvent","subject","tabId_1","options_1","response","menuSwitchControl","subjectRegister","code","broadcast","subjectRemove","subjectNotify","notify","subjectResponse","observerToken","UID","responseUnSubscribe","environment","host","NavigationEventService","querystringService","formToken","runtimeFrameworkService","querystrings","handleTabSwitchEvent","handleTabClosedEvent","handleTabClosingEvent","eventTabId","fireTabSwitchEvent","onTabSwitchListeners","size","map","fireTabClosingEvent","formEventServices","delete","appContext","dispose","onClosingListeners","of","listeners","values","result$","userRejected","pipe","concatMap","take","tap","switchMap","every","fireTabClosedEvent","onClosedListeners","removeEventListener","clearEventListener","clear","FARRIS_FORM_COMPONENTS","InjectionToken","FarrisFormService","append","cmpIns","controls","getControls","warn","initCtrls","APP_CONTEXT_MANAGER","NavigationService","context","navigationEventService","injector","FrameContext","formAppContext","ApplicationId","appContextManager","registerDestroyEvent","destorySignal","enableRefresh","tabName","destructuring","translate","queryStringParams","convertToBoolean","buildParam","currentTabId","appType","AppType","Menu","entityParams","isReload","openMenuWithDimension","dim1","dim2","metadataId","App","openApp$","isInDialog","destory","parseParams","open","mode","modalId","configs","tabType","funcOrAppId","pageModalService","FEPageModalService","uiStateConfig","getObjectTypeConfig","modalConfig","buildConfigs","dialogType","pageModalRef","farrisFormService","componentType","componentRef","createComponentRef","showByUrl","isDialogRootComponent","header","el","nativeElement","querySelector","draggbar","cursor","navigate","commands","activatedRoute","ActivatedRoute","queryParams","lodash","merge","extras","skipLocationChange","relativeTo","String","translateService","TranslateToken","startsWith","endsWith","trim","transform","config","defaultConfigs","showButtons","objectTypeConfig","onClosingHandler","refresh","refreshCommandName","commandName","refreshFrameId","frameId","cancelChanges","ref","refreshForm","component","repository","frameContextManager","getFrameContextById","viewModel","uiStateObject","getFrameContext","componentFactoryResolver","getComponentFactoryResolver","contentCmptFactory","resolveComponentFactory","modalContentInjector","ReflectiveInjector","resolveAndCreate","uiState","setPropertyValue","ComponentFactoryResolver","Injector","IS_ADD","LAST_MODIFIED_ID","EditStateUtil","getLastModifiedId","virtualRootFrameContext","getVirtualRootFrameContext","lastModifiedId","getParam","setLastModifiedId","setParam","getAddState","setAddState","cancelAddState","setEditState","FormNotifyStrategyService","querystring","odocDisableNotification","toLowerCase","urlSearchParams","URLSearchParams","CommandService","innerContext","execute","waitForBeSession","restService","sessionService","getBeSessionId","beSessionId","extractResult","taskName","results","suspendFrameContextRowSelectedEvent","bindingData","rowSelectedEventSuspend","resumeFrameContextRowSelectedEvent","ViewModel","ValidationService","validate","getList","result_1","tslib_1.__values","result_1_1","isValid","alert","validationResults","validateCurrentRow","entityTypeInfo","primaryValue","list","currentId","entity","entityCollection","getEntityById","validateEntityAllowEmptyRule","entities","namespace","frameContexts","getFrameContextsByNamespace","getFrameContexts","isModal","hasOwnVerifyDetailService","rootViewModel","root","toValidate","formErrors","form","enableValidate","verifyInformations","formValid","formValidationRules","formContext","bindingObject","getObject","setShowValidationMsg","getValidationRules","rules","rule","isFormValid","observableList","getIndexById","zip","resultList","handleErrors","errors","validationError","children","errMsgObj","findId","target","PARENT_CLASS","parentPathData","isUdt","isGrid","getPaths","join","constraints","paths","property","changes","ChangeType","UpdateErrors","x","isValidated","collectValidationErrors","verifycationChanged","validateAll","getAllEntities","isMultiEntityValiate","getNotAllowEmptyBindingPaths","invalidPaths","bindingPaths","bindingList","getValue","tableNames_1","viewModelName","getViewModelNameByBindingPaths","bindingPath","formGroupName","deepFirstTraversalEntityTypeInfo","previousValue","getPropInfosByGroup","DataPropGroup","List","propInfo","typeInfo","entityInfo","allowEmpty","nodeCode","validationResultTypes","offset","findIndex","targetField","field","propertyName","fullPath","resetValidation","isDialog","namespace_1","frameComponent","VerifyDetailService","Repository","validationAllResult","CardDataService","load","loadingTimerId","getById","formErrorService","onLoading","transitionActionParamName","skip","listening","sync","action_1","action","ngCommand","metadatas","actionName","formPrimaryValue","formState","stateMachine","stateName","ngAction","actions","transitTo","states","primaryValueChanged","showLoadingConfirm","resetForm","add","cascadeAdd","currentNamespace","currentFormFrameContexts","childFrameContexts","childBindingPaths","sort","a","rid","fpath","getPath","appendByPath","last","edit","update","update$","updateById","updateWithoutEmpty","checkBeforeUpdate","updateWithNotify","loadPaged","save","successMsg","updateChangesById","save$","applyChangesById","updateResult","showMessage","cancelWithCheck","revert","cancelWithoutCheck","BefRepositoryUtil","isExistUnsaveData","formMessageService","ifCancel","loadEntities","subPaths","subPath","subData","validationService","commandService","NavigationMiddlewareService","onClosing","navigationService","isChanged","opened","beforeCloseHandle","selectedChange","conform","cardDataService","getTabId","targetId","befRepository","getFormAppContext","GridMiddlewareService","onPageChanging","filters","eventParam","pageIndex","filterConditionManager","setConditions","ParamService","parseMapParams","asObservable","param","KeybindingService","bind","keybindingMap","keyBinding","method","register","binding","combo","_getCombo","keyMap","ctrlKey","altKey","shiftKey","bindingProvider","_dispatch","unregister","unbind","repeat","ready","keyInfo","charCodeAt","metaKey","Mousetrap.default","FilterConditionService","UIStateService","componentId","StateMachineService","transit","_currentFrameContext","_initLoad","initFormState","currentRootFrameContext","getCurrentRootFrameContext","toggleFormState","currentFrameContext","getAllRootFrameContext","rootFc","getFrameContextManagerMap","getFrameContextMap","rootFrameContextArr","ElementRef","className","includes","_clsDefaultName","addCssClass","removeCssClass","elementRef","originalClassName","getFormRootComponent","viewContext","virtualRootContext","StateMachine","BindingDataService","setCurrentId","getAllFrameContexts","setCurrentRow","BindingData","ApplicationParamService","highOrderInvoke","paramService","setupParams","setQueryParams","setStaticParams","parsedQueryParams","innerData","paramName","updateUIState","staicParams","staticParamsObj","mapStaticParamsToObject","staticParams","inDialog","sessionInfo","setSessionInfo","sessionId","Token","setBeSessionId","webFormRouteParams","decodeURI","encodeURI","prop","controlEvent","isObservable","event","EntityTraversingService","getPropValue","getEntityData","bindingListOrObject","BindingList","currentItem","toJSON","getEntityListData","EntityManipulationService","setPropValue","setValue","EntityAggregationService","count","splitedPath","splitPath","traversingService","listPath","sum","accTotal","entityData","propValue","parseFloat","propPath","isNaN","avg","total","max","accMax","min","accMin","currentData","pathItem","currentNode","propPathItem","pop","unshift","EntityListService","pageSize","EntityService","manipulationService","aggregationService","BindingPathService","getBindingPathsByFrameContext","getBindingPathsByTableName","dataTypeInfo","tableName","level","originalCode","props","propInfoMap","idx","dataTypeInfo_1","getBindingPathsByPath","nodeCodes","getPropInfoByPath","group","getPathInfo","entityPath","propertyNames","FormControlService","getFormControlsByFrameContext","ngFormControls","getFormControlByBinding","ngFormControl","getFormControlIndexByFullPath","bindings","formControlBindingPaths","getFormControlIndexByBinding","FrameContextService","getFrameContextsByTableName","bindingPathService","getFrameContextsByPropertyPath","propertyPath","separtor","formControls","formControl","getFrameContextsByColumnName","columnName","getTypeInfoByPath","columnPropInfo","getPropInfos","dataPropInfo","metadataInfo","originalDataField","dataField","formControlService","getFrameContextsByBindingPath","FocusInvalidService","focusInvalidInput","rootElement","firstVerifyInformation","selectFirstVerifyInformation","focusElement","focusGridCell","focusableDataGrid","disabled","editCell","updateVerifyInformationsIndex","verifyInformation","tabIndex","input","getInputElementById","getAttribute","Number","frameIndex","domIndex","getFieldIndex","rowIndex","isGridComponent","getColumnIndex","dataGridColumnsName","columns","column","fields","fixed_1","fixed","fixedColumns","fixedColumnIndex","this_1","getIndexFromColumns","v1","v2","element","ownerDocument","getElementById","tagName","inputs","getElementsByTagName","getFormControlIndexByBindingPath","elementId","focused","elementToFocus","elements","querySelectorAll","subElements","focus","grid_1","getGridRef","frameElement_1","getComponentRef","focusById","matchedFrameContexts","componentsMap","componentManager","getComponentsByFrameId","datagridComponent","frameContextService","POSTER","RECEIVER","REPOSITORY","TAB_ID","ChangeItemService","init","changeItem","setBykey","getByKey","setIframePoster","itemChangePoster","getIframePoster","itemChangeReceiver","parentId","Observable","subscriber","getNextItemByCurrentId","setRepository","paginationInfo","currentIdx","nextIdx","getEntities","ListDataService","mergeFilterConditions","mergeSortConditions","fireQueryEvent","queryChild","fullPaths","EntityPathConverter","toEntityPathArray","substr","parentPaths","configPath","getPaginationConfigByPath","_b","messagePipe","messageType","insert","updateChanges","updateAllChanges","applyChanges","remove","ifSave","breakable","remove$","removeById","removeRows","ids","deleteCurrentRowIfNoChecks","removeByIds","refreshAfterRemoving","loadCmdName","loadCmdFrameId","_cancel","originalConditions","getFilters","conditions","lastFilter","Relation","relation","sorts","sortConditionManager","getConditionsByBindingPath","direction","filterConditionService","SubListDataService","insertByPath","innerRemove","removeWithoutConfirm","removeChildrenByIds","batchRemoveByPath","isConfirm","removeByPath","removeAndSave","fid","move","targets","findById","exchangeRowIndex","exchangeRowId","getIdByIndex","exchangeRow","exchangeRowPosition","isNullOrEmpty","swapById","BaseDataService","ParentTreeNodeUtil","selectFirstRootNode","hierarchyInfoKey","treeNodesData","firstRootNodeId","getFirstNodeId","selectedNode","selectNodeByBindingList","selectedNodeId","selectedNodeData","getNodeDataById","hasChildNodes","rootData","itemData","rootLayer_1","getRootLayer","layer","layers","minLayer","Math","getNextNodeId","currentNodeData","fLayer","fParentElement","siblingtreeNodesData","getChildNodesData","getNextSiblingNodeId","parentData","currentIndex","parentElement","nodeData","PathTreeNodeUtil","currentPath","fPath","substring","TreeUtilFactory","treeType","util","ParentTreeRepository","addSibling","addSiblingUri","baseUri","dataID","requestInfo","buildRequestInfo","headers","HttpHeaders","Content-Type","invoke","responseInfo","buildEntity","returnValue","addEntity","addChild","addChildUri","addSubSibling","nodes","addSubSiblingUri","entityManager","appendEntityByPath","addSubChild","addSubChildUri","loadByParentId","frozenCurrentRow","pagination","localEntities","getChildren","parentHierarchyInfo","getHierarchyInfoById","originalHierarchyInfoKey","getOriginalHierarchyInfoKey","entityFilter","FilterConditions","buildFiltersWithParent","SortConditions","IsUsePagination","Pagination","PageIndex","PageSize","PageCount","TotalCount","extendQuery","getPaginationInfo","updatePaginationInfoByPath","clearDescendantEntities","listData","buildEntities","addData","addEntities","loadFullTree","fullTreeType","loadType","queryUrl","dataId","isUsePagination","virtualPropertyName","buildEntityFilter","selectedRowId","selectedRowId_1","hierarchyInfo","primaryKey","getAllParentIds","filterArray","relationType","parentLayer","parentFilterArray","FilterField","Value","Lbracket","Rbracket","Expresstype","Compare","hierarchyInfokey","getChildNodes","removeEntities","removeData","fparentElement","flayer","childHierarchyInfo","childs","getHierarchyInfo","FieldMetadataUtil","getNgObjects","entityType","findParent","currentHierarchyInfo","PathTreeRepository","pathHierarchyInfo","parentPath","TreeRepositoryFactory","TreeDataService","filtersArray","parseConditions","sortsArray","correctSelectedNode","hierarchyType","getHierarchyType","treeNodeUtil","errorService","loadByLevel","setLoadByLevelState","getIdToExpand","buildPaginationInfo","currentRowId","primaryKeyValue","firstChildId","expandNodes","idToExpand","setIdToExpand","conditionsString","reloadChild$","reloadByLevel","addChild$","nextNodeId","enableNodePagination","nodePageSize","nodePageIndex","isAdd","removeEntityById","getTreeNodeUtil","getNextNodeIdAfterRemoving","idToRemove","setNextNodeAfterRemoving","selectFirstRow","hierarchyInfoNgObjectInfo","FilterConditionDataService","EditDataService","editEntityById","RemoveDataService","enableRemoveAndSave","innerRemoveById","removeAndSaveById","removeAndSaveByIdForTree","checkIdsToRemove","treeDataService","removeAndSaveByIds","confirm$","confirmToRemove","removeEntityAndSaveById","ifRemove","listDataService","SaveDataService","SubTreeDataService","hierarchyInfoField","nodeCodeArray","BeActionService","invokeAction","actionUri","httpMethod","httpHeaders","innerInvokeAction","executeAction","buildQueryParams","queryParamsString","getRestService","hasRequestInfo","fullActionUri","ApproveService","submitApproveWithInteraction","bizBillID","submitApprove","interactionResult","beActionService","bizInstID","procDefId","processDefinitionId","formLoadingService","excutionResponse","procInstId","needInteraction","submitter","excute","interactionResponse","catchError","submitApproveWithBizDefKey","bizDefKey","approvePayload","startProcessPayload","variables","processDefinitionKey","submitApproveWithBizDefKeyUseControl","payload","wfTaskHandlerService","startProcess","childSubmitApproveWithBizDefKey","bizId","childBizId","cancelApprove","cancelSubmit","viewProcess","flowchartService","viewFlowChart","switchPrefixLetter","jsonObj","toUpper","_c","toUpperCase","WFSubmiteService","WFFlowchartService","WfTaskHandlerService","PrintService","printSingle","beMetaId","bizBillId","printArray","showWarning","printByIds","dataIds","printByIdsWithDimension","billCategoryId","sourceOptions","buildSourceOptions","sourceId","outputOptions","buildOutputOptions","FirstDimensionVal","SecondDimensionVal","printService","outputBEData","printMulti","filterCondition","sortCondition","includeChildData","entryFilter","filterConditions","sortConditions","sourceFilterOptions","buildSourceFilterOptions","outputBEDataWithFilter","printMultiWithDimension","sfo","DataIds","SourceId","RetrieveParam","retrieveParam","FormatId","formatId","ServiceUnit","serviceUnit","currentPage","pageRowCount","queryType","queryServiceId","queryParam","OutputType","outputType","PRINT","FileType","fileType","Html5","Path","DeviceId","deviceId","printJob","printerName","printSetting","printType","PrintType","Form","EntityFilter","commandContext","CloudprintService","ATTACHMENT_ORDER_FIELD","AttachmentUtil","convertToAttachmentInfos","fileInfos","fileInfo","convertToAttachmentInfo","attachmentId","fileName","getFirstAttachmentInfo","attachmentInfos","peekAttachmentIds","attachmentInfo","AttachmentDataService","updateRow","attachmentInfoFieldPath","updateUri","updateAttachInfo","createUpdateAttachInfo","syncAttachmentInfosToClient","updateRowWithPropertyName","updateRows","serverAttachInfo","createBatchCreateAttachInfo","isRootEntity","NodeCodes","batchUploadInfo","appendAttachmentInfosToClient","updateRowsWithConfigs","appendAttachmentInfos","updateRowsWithPropertyName","parentBindingPathArray","BindingPathConverter","toBindingPathArray","BefDataPathUtil","convertToObjectCodes","HiretryIds","convertToDataIdsForUpdate","AttachmentIds","AttachmentId","attachmentIds","convertToDataIdsForAdd","rootDataId","updateEntityById","keyValues","updateEntities","updateEntity","setValueByPath","prev","AttachmentService","setLanguageService","InjectFlags","uploadAndUpdateRow","rootDirId","parentDirName","rootId","defaultRootDirId","formId","defaultParentDirName","uploadLimit","UploadLimit","fileCount","attachmentIdList","getSpecialRow","getCurrentRow","getAttachmentIdsByPathAndDataIds","uploadDialogService","uploadFileWithLimit","FileState","New","firstAttachmentInfo","attachDataService","uploadAndUpdateRowWithPropertyName","uploadAndBatchAddRows","uploadAndBatchAddRowsWithPropertyName","download","attachId","getDownloadUrl","batchDownload","attachIds","metadataidlist","downloadService","attachIdsString","getMultipleDownloadUrl","downloadByDataId","batchDownloadByDataIds","previewByAttachmentInfoFieldPath","previewByAttachmentIds","previewByAttachmentInfoFieldPathWithIndex","currentRow","attachmentFieldName","getCurrentAttachmentId","previewFileListWithIndex","previewBySubDirName","subDirName","fileViewerService","viewerFormFile","previewBySubDirNameWithIndex","viewerFormFileWithIndex","viewerFileList","viewerFileListWithIndex","genVersion","versions","updateAttachmentVersion","versionField","historyField","attachmentFieldPath","attachmentField","attachmentBindingList","DataPathCreator","createByShortPathFromRoot","toArray","attachments_1","versionedRows","row","getEntityByPath","version","isAttachmentCanDelete","updateAttachmentHistory","fileNameMap_1","paths_1","array","y","xVersion","parseInt","entityListData","entityService","filteredEntityListData","UploadDialogService","DownloadService","FileViewerService","FileService","addFileRows","fileInfoFieldPath","getAttachmentInfosToAddFromContext","addFileRowsWithConfigs","process","attachmentInfos_1","mapFields","fileExtends","getFileExtendsFromContext","fUploadOutPut","extend","removeFileRows","getDataIdsToRemoveFromContext","isSublist","removeObservables","removeObservable","subListDataService","forkJoin","fileExtendFieldPath","fileExtend","fileId","convertFileIdToDataId","fileBindingPath","fileFieldName","fileListBindingPath","updateOrder","attachment","debounceTime","DialogService","createModalComponentRef","_providers","modalService","openModal","configObj","innerCompopnent","remote","useIsolateJs","parameter","dialogServiceInstance","componentCallback","componentModify","modalInstanceCallback","createRemoteForm","cmpRef","uistate","openHelpModal","events","editor","_d","_e","areaResponse","mapFields_1","valueOf","modals","openCallbackableModal","subject_1","frameId_1","_f","handle_1","_g","currentRow_1","formCmp","selectedItems","frameComtext","rows","mapFields_2","_h","event_1","_j","context_1","selectedItems_1","k","sourceKeyArray","targetValue","bindingPaths_1","targetPath","closeModal","moduleName_1","moduleName","System","import","then","module","moduleRef","entryComponent","componentRef_1","BsModalService","_componentFactoryResolver","SidebarService","openSidebar","sidebarUIService","sendIsOpen","closeSidebar","confirmBeforeClosingSidebar","checkAllEntityChanges","confirmResult","continueClosingSidebar","stopClosingSidebar","FarrisSidebarService","FilterService","stripFiltersWithSpecialValue","specialValues","strippedFilterArray","filterValue","getFilterValue","ComponentManagerService","appendControl","getControl","AuthorityService","queryOperationAuthority","operationIds","queryResult","j","dummyResult","Authority","setLabelMap","labelMap","operationLabelMap","opId","label","initialize","authorityService","operationAuth","authOfLabel","hasOperation","ExceptionHandler","setContext","FARRIS_COMMAND_SERVICE_PROVIDERS","UserSettingsService","timezone","baseOffset","i18nSetting","defaultLanguage","userDateFormat","userTimeFormat","userNumberFormat","negativeSign","numberDecimalDigits","numberDecimalSeparator","numberGroupSeparator","userRegionCode","frmI18nSettingService","getSetting","userSettings","FrmI18nSettingService","WorkFlowMessageService","listen","messageHandler","send","win","postMessage","sender","source","WorkFlowMessage","setup","workFlowMessageService","ceil","random","eventId","WorkFlowMessageHandler","onComponentInit","workFlowMessage","frameContextDestroySignal","appContextDestroySignal","resultTask","formFrameContexts","getFormFrameContexts","validation","message_1","buildMessage","throwIfEmpty","AppContextManager","appContexts","getAppContexts","contexts","frame","CompareType","ValueType","RelationType","FARRIS_COMMAND_SERVICE_MODULE_PROVIDERS","provide","UserSettingsToken","useClass","TextHandler","convert","qc","tv","fieldCode","Like","And","DateRangeHandler","arr","drv","startTime","GreaterOrEqual","endTime","LessOrEqual","DropDownHandler","ddv","dv","Equal","Or","NumberRangeHandler","nrv","startValue","endValue","SmartHelpHandler","shv","isInputText","valueField","textValue","getOriginalValue","SingleYearHandler","yv","yearValue","CheckBoxHandler","tvv","SingleMonthHandler","mv","monthValue","MonthRangeHandler","mrv","SingleDateTimeHandler","dtv","datetimeValue","SingleNumberHandler","numValue","SingleDateHandler","dateValue","ComboLookUpHandler","cluv","arr_1","RadioHandler","rv","InputGroupHandler","igv","textField","itemValue","QueryConditionHandlerFactory","_instance","getHandler","controlType","queryConditionHandlerMapping","ControlType","Text","InputGroup","DateRange","DateTimeRange","DropDownList","NumberRange","SmartHelp","SingleYear","BoolCheck","SingleMonth","MonthRange","SingleDateTime","SingleNumber","SingleDate","ComboLookUp","Radio","QuerySolutionService","getUserSessionId","frameworkSessionService","setFilterConditions","queryConditionHandler","filterConditionList","isEmpty","control","getControlType","setCurrentQueryConditions","FrameworkSessionService","EndEditService","endEdit","RemoteSummaryService","summary","methodName","proxy","BatchEditService","openBatchEditDialog","batchEditDialogService","gridViewModel","ids_1","dialogRef_1","batchEdit","onConfirm","changeDetectionController","detach","updateBindingData","reattach","openHiddenHelp","helpId","componentManagerService","showDialog","clearHelpSelections","helpElement","displayValue","checkCurrentRow","mappings","getValueByPath","batchAppend","mappings_1","defaultValues_1","defaultValue","batchAppendByPathBasedOnHelpSelections","mappings_2","defaultValues_2","buildPath","batchAppendByPath","batchAppendBasedOnRowHelpSelections","bindingPath_1","defaultValues_3","bindingList_1","currentEntity","headItem","mappingRow","idMapField","sourceItemId_1","emptyRows_1","targetItem","request","clone","buildIds","copyRow","ignoreFields","ignoreFieldsArray","sources","action$","extractedFields","current","loadChild","afterIncrementalSelectHelpClose","associatedField","foreignKey","rootFrameContext","currentData_1","currentDataArray_1","appends","itemId","removes","selectItem","addAction$","removeAction$","removeEntityByPath","beforeMultiSelectHelpOpen","afterMultiSelectHelpClose","commandFrameId","onHelpClose","onHelpCloseHandler","path_1","createByPath","newEntity","suspendFrameContextEvent","resumeFrameContextEvent","suspend","updateLookupField","updateSimpleField","currentColumnType","dataType","dateStr","dateService","formatTo","updateBindingList","helpData","helpFields","idIndex","helpField","helpValue","targetBindingObject_1","fpaths","targetPropertyName","getBindingPathArray","f","filteredPaths","part","tailPath","EntityList","currentItemId","Entity","BatchEditDialogService","DateTimeHelperService","DiscussionGroupService","addComment","configId","visibility","buildAddCommentParam","queryComments","buildQueryCommentsUrl","queryAllOrgs","queryFrequentAtUsers","buildQueryFrequentAtUsersUrl","queryAtUsers","user","buildQueryAtUsersUrl","serverUri","bill","billId","comment","ListFilterConditionsService","setCurrentFilterConditions","FormManifestService","modulePath","formManifestPath","request$","mainfests","req$","httpClient","responseType","share","FORM_PATH_TOKEN","HttpClient","FormExpressionManifestService","formManifestService","formManifest","expressionManifest","expressions","ns","expressionPath","FORM_MANIFEST_SERVICE_TOKEN","LocalizationService","dateFormat","timeFormat","dateTimeFormat","numberFormat","date$$1","number","localize","transformDate","transformDateTime","transformNumber","getFormat","localizationType","formats","parseDateFormat","dateTime","parseTimeFormat","bigNumber","BigNumber","isBigNumber","isNegative","buildNumberFormat","prefix","absoluteValue","toFormat","groupSize","decimalSeparator","groupSeparator","Service","DataGridService","clearChecks","gridComponents","getFormGridComponents","gridComponent","clearSelections","clearCheckeds","uncheckDeletedRows","frameContextsInCurrentBindingPath","gridInCurrentFrame","getGridComponentByFrameContexts","grid","unCheckRows","childrenFrameContexts","childrenGridComponents","checkedRows","uncheckRows","grids","componentRefs","DatagridComponent","componentsRef","FormAttentionService","blink","duration","idOrEl","attentionService","catchAttention","AttentionService","Prop","InputType","FeatureRepository","getFeaturesByMaterialId","materialId","materialID","getConfigedValueByFeatureId","configID","configType","objType","objID","applyFeatures","charactValue","getHelpInfo","helpid","httpParams","condition","searchValue","helpID","filterStr","FeatureDataService","propset","propsets","translateName","inputtype","enum","enuminfo","isreadonly","isrequired","FeatureEditService","materialFeatureId","featureDataService","featureEditorService","buildFeatures","featureSet","featureTemplate","mergeFeatures","FeatureEditorService","ExpressionService","expression","customContext","deps","resolveService","groupDependencies","ExpressionUtil","getGroupFunctionDependency","entityContext","buildEntityContext","stateContext","buildStateContext","entityOriginalNodeCode","bignumber_js","expressionExecutor","eval","executeAsync","isGroupdMainEntity","dep","isEntityDependency","isGroupDependency","getEntity","collection","ENTITY_TEMPLATE","childrenEntityPaths","getChildrenEntityPaths","getCurrentRowByPaths","parent_1","node","__items__","__type__","uiState_1","getOwnPropertyNames","match","ResolveService","ExpressionExecutor","DirtyCheckingService","detectChanges","global","appRef","tick","cd","detectChangesAfter","ChangeDetectorRef","ApplicationRef","PopUpService","longPaths","entityListPaths","originalData","entityList_1","getEntityNodeByPath","item_1","entity_1","updateCurrentRow","getRootFrameContext","paths_2","modalBindingList","closeCheck","entityList","FormService","getIndex","ViewModelService","getGridColumns","PaginationService","resetChildrenPagination","childrenEntityCodes","getPropNamesByGroup","pageCount","FARRIS_COMMAND_SERVICE_FRAME_PROVIDERS","QUERYSOLUTION_HANDLER_TOKEN","LISTFILTER_HANDLER_TOKEN","FORM_EXPRESSION_MANIFEST_SERVICE_TOKEN","MESSAGE_SERVICE_TOKEN","NOTIFY_SERVICE_TOKEN","FRAME_COMPONENT_INIT_HANDLER_TOKEN","multi","DYNAMIC_FARRIS_COMMAND_SERVICE_PROVIDERS","NgModule","providers","imports","WfTaskHandlerModule","exports","CommandServicesModule","MessagePipe","sendMessage","MessagePipeService","pipeName","useFormContext","pipeType","BackEndMessageHandler","isException","hasThrowError","collect","updateFormErrors","resetFormMessage","targetFrameContext","findTargetFrameContext","all","backEndMessage","bizMessages","hasFormlessError","bizMessage","location_1","getBindingPath","getFrameContextsByBindingPathAndColumnName","isDataGridComponent","isReadonlyDataGrid","isCurrentRow","getFormControlByColumnName","domPropertyName","mergeMessage","primary_1","buildItemTitle","defaultI18nValue","columns_1","columns_1_1","rows_1","rows_1_1","bizMessages_1","bizMessages_1_1","post","formItems","isPropertyExist","backend-message-1","template","zh-CHT","currentLanguage","getCurrentLanguage","getBindingPathByTableName","entityPropertyInfo","entityPropertyName_1","randomFrameContext","mappingName_1","entries","clearBackendError","virtualRootComponent","TabId","AppId","AppEntrance","FuncId"],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\nimport { Subject } from 'rxjs';\n\n/**\n * åéæ¶æ¯ç»FormLoadingServiceï¼\n * ä½¿å¶æ¥æ¶åè°ç¨hide()å½æ°\n * æ­¤æå¡ä»ç¨äºå¤çHttpå¼å¸¸\n */\n@Injectable()\nclass HideEventService {\n    public hideEvent = new Subject<any>();\n}\n\nexport { HideEventService };","import { Injectable, SkipSelf, Optional } from '@angular/core';\nimport { LoadingService, LoadingConfig, LoadingComponent } from '@farris/ui-loading';\nimport { HideEventService } from './hide-event.service';\nimport { AppContext, FrameContext } from '@farris/devkit';\n// tslint:disable: no-string-literal\n/**\n * å è½½æç¤ºHelper\n * 1ãåè£@farris/uiçLoadingServiceï¼\n * 2ãæä¾éå¯¹è¡¨åçå¿«æ·æ¹æ³ï¼\n */\n@Injectable()\nclass FormLoadingService {\n  private static isSuspend = false;\n  /**\n   * å è½½ä¸­ç»ä»¶å®ä¾\n   */\n  private loadingCmp: LoadingComponent;\n\n  /**\n   * å»¶è¿loadingå®æ¶å¨\n   */\n  private loadingTimerIds: any[] = [];\n\n  /**\n   * å¼ºå¶æ¾ç¤ºï¼ä¸è½éè\n   */\n\n  /**\n   * æé å½æ°\n   * æ³¨å¥@farris/uiçLoadingService\n   */\n  constructor(\n    private loadingService: LoadingService,\n    @Optional() private hideEventService: HideEventService,\n    @Optional() private applicationContext: AppContext,\n  ) {\n    if (hideEventService) {\n      this.hideEventService.hideEvent.subscribe(\n        result => {\n          this.hide();\n        }\n      );\n    }\n  }\n  public setSuspend(flag: boolean) {\n    FormLoadingService.isSuspend = flag;\n  }\n  /**\n   * æ¾ç¤ºå è½½ä¸­\n   */\n  public show(configOrMessage?: any): LoadingComponent {\n    if (FormLoadingService.isSuspend === true) {\n      return;\n    }\n    if (this.loadingCmp) {\n      this.loadingCmp.close();\n      this.loadingCmp = null;\n    }\n    this.registerService();\n    const loadingConfig = this.buildLoadingConfig(configOrMessage);\n    this.loadingCmp = this.loadingService.show(loadingConfig);\n    return this.loadingCmp;\n  }\n\n  /**\n   * å»¶è¿æ¾ç¤ºLoading\n   */\n  public showLoadingWithDelay(delayTime: number, configOrMessage?: any): any {\n    // this.show(configOrMessage);\n    const timerId = setTimeout(() => {\n      this.show(configOrMessage);\n    }, delayTime);\n    this.loadingTimerIds.push(timerId);\n    this.registerService();\n    return timerId;\n  }\n\n  /**\n   * éèå»¶è¿çLoading\n   */\n  public hideDelayLoading(timerIdToClear: any) {\n    this.clearLoadingTimer(timerIdToClear);\n    this.hide();\n  }\n\n  /**\n   * æé LoadingConfig\n   * @param configOrMessage éç½®å¯¹è±¡ææ¶æ¯å­ç¬¦ä¸²\n   */\n  private buildLoadingConfig(configOrMessage: any): LoadingConfig {\n    let loadingConfig: LoadingConfig;\n    if (!!configOrMessage) {\n      if (typeof configOrMessage === 'object') {\n        loadingConfig = configOrMessage;\n      } else {\n        loadingConfig = { 'message': configOrMessage };\n      }\n    } else {\n      loadingConfig = {};\n    }\n    if (!loadingConfig.hasOwnProperty('delay')) {\n      loadingConfig.delay = 0;\n    }\n    return loadingConfig;\n  }\n\n  /**\n   * å³é­ææloading\n   */\n  public clearAll() {\n    FormLoadingService.isSuspend = false;\n    window.setTimeout(() => {\n      this.loadingService.clearAll();\n    }, 350);\n    this.loadingCmp = null;\n    this.clearAllLoadingTimers();\n    this.destroy();\n  }\n\n  /**\n   * æ¸ç©ºLoadingå®æ¶å¨\n   */\n  private clearLoadingTimer(timerIdToClear: any) {\n    clearTimeout(timerIdToClear);\n    this.loadingTimerIds = this.loadingTimerIds.filter((timerId: any) => {\n      return timerId !== timerIdToClear;\n    });\n  }\n\n  /**\n   * æ¸ç©ºææLoadingå®æ¶å¨\n   */\n  private clearAllLoadingTimers() {\n    this.loadingTimerIds.forEach((timerId: any) => {\n      this.clearLoadingTimer(timerId);\n    });\n  }\n\n  /**\n   * éèå è½½ä¸­\n   */\n  public hide() {\n    if (!this.loadingCmp) {\n      this.destroy();\n      return;\n    }\n    if (FormLoadingService.isSuspend === true) {\n      return;\n    }\n    this.loadingCmp.close();\n    this.loadingCmp = null;\n    this.destroy();\n  }\n  /**\n   * éæ¯loadingService\n   */\n  public destroy() {\n    if (FormLoadingService.isSuspend === true) {\n      return;\n    }\n    const services: any[] = window['DEVKIT_LOADING_SERVICE'] || [];\n    if (services && Array.isArray(services) && services.length > 0) {\n      services.forEach((service: FormLoadingService) => {\n        if (service) {\n          service.clearAllLoadingTimers();\n          if (service.loadingCmp) {\n            service.loadingCmp.close();\n            service.loadingCmp = null;\n        }\n        }\n      });\n    }\n    window['DEVKIT_LOADING_SERVICE'] = [];\n  }\n\n  /**\n   * æ³¨åææçLoadingServiceå®ä¾\n   */\n  private registerService() {\n    const services: any[] = window['DEVKIT_LOADING_SERVICE'] || [];\n    services.push(this);\n    window['DEVKIT_LOADING_SERVICE'] = services;\n  }\n}\n\n\nexport { FormLoadingService };\n","\nimport { LanguageMessage } from './language-message';\n\n/**\n * è±æè¯­è¨æ¶æ¯\n */\nclass LanguageMessageForEn implements LanguageMessage {\n  yes = 'Yes';\n  no = 'No';\n  unsaveNotifyTitle = 'Exist unsave record. Do save operation or not?';\n  clientNotifyTitle = 'System Prompt In The Frontend';\n  serverNotifyTitle = 'System Prompt In The Backend';\n  cancelApproveSuccess = 'Cancel Approve Success';\n  cancelApproveFailed = 'Cancel Approve Failed';\n  unallowEmptyProcessInstanceName = 'Process Instance Name Can Not Be Empty';\n  unallowEmptyBizBillId = 'Biz Bill Id Can Not Be Empty';\n  unallowEmptyChildBizBillId = 'Child Biz Bill Id Can Not Be Empty';\n  bizDefKeyRequired = 'Biz Def Key can\\'t be empty.';\n  procInsIdRequired = 'Process instance Id can\\'t be empty.';\n  addChildFailed = 'Add Child Failed';\n  addSiblingFailed = 'Add Sibling Failed';\n  addSubChildFailed = 'Add Sub Child Failed';\n  addSubSiblingFailed = 'Add Sub Sibling Failed';\n  deleteFailed = 'Delete Failed';\n  multiSaveFailed = 'MultiSave Failed';\n  appendFailed = 'Append Failed';\n  queryFailed = 'Query Failed';\n  cancelFailed = 'Cancel Failed';\n  updateFailed = 'Update Failed';\n  addFailed = 'Add Failed';\n  loadFailed = 'Load Failed';\n  saveSuccess = 'Successfully saved!';\n  saveFailed = 'Save failed!';\n  deleteSuccess = 'Successfully deleted!';\n  deleteFaild = 'Failed to delete!';\n  confirmDeletion = 'Confirm deletion?';\n  submitSuccess = 'Submit successfully!';\n  submitFaild = 'Submit failed!';\n  notifyTitle = 'System prompt';\n  httpError = 'HTTP request error! Please check the server error!';\n  gridDataNotSave = 'The current page data is not saved. Turning the page will result in data loss. Do you want to continue turning the page?';\n  exitWithoutSave = 'There is unsaved data. Do you want to continue closing?';\n  notSupportMenuType = 'Not supported menu type!';\n  cancelWithoutSave = 'Exist unsaved change,Confirm to cancel?';\n  plsSelectDeleteData = 'Please select the data to delete!';\n  errorHierarchyKey = 'Incorrect ierarchy key';\n  plsSelectParentNode = 'Please select parent node!';\n  deleteChildFirst = 'Please delete the child nodes first!';\n  incorrectHierarchyConfig = 'Hierarchy config is incorrect!';\n  operationFailed = 'The operation failed.';\n  plsSelectEditData = 'Please select the data you want to edit!';\n  plsSelectViewData = 'Please select the data you want to view!';\n  plsUploadFirst = 'Please upload attachment first!';\n  defaultDialogTitle = 'Dialog';\n  public changeToFirst = 'The first data.';\n  public changeToLast = 'The last data.';\n  public noProcessInstanceId = 'Please provide the process instance id.';\n  public noDataExist = 'Data does not exist to access the edit state!';\n  public noAttachment = 'There are no attachments to preview.';\n  public confirm = 'Confirm';\n  public cancel = 'Cancel';\n  public plsSelectCopyData = 'Please select the data you want to copy!';\n  public copyFieldsRequired = 'The copy fields can`t be empty!';\n  public pathIsRequired = 'The request url can`t be empty!';\n  public propsIsEmpty = 'The material has no props!';\n  public historyAttachment = 'The history attachment can`t be delete!';\n  public plsSelectDownloadAtt = 'Please select the attachment you want to download!';\n  public noDownloadAtt = 'There are no attachments to download!';\n  public plsCheckBatchEditRows = 'Please check the rows you want to edit!';\n  public plsSelectDetailFormData = 'Please select a detail form data first!';\n  public dataAndStateChanged = 'Are you sure you want to load the new data and switch to $1 state?';\n  public dataChanged = 'Are you sure you want to load the data and discards the current modification?';\n  public stateChanged = 'Are you sure you want to switch $1 state?';\n  public defaultStateName = 'init';\n  public copy = 'Copy detail message';\n  public copySuccess = 'Copy success';\n  public copyFailed = 'Copy failed';\n  public roger = 'Roger';\n  public appOrFuncIdRequired = 'No menu or application parameters are configured, please configure them in the designer.';\n  public tableCanNotEmpty = 'can not empty.';\n}\n\nexport { LanguageMessageForEn };\n","import { LanguageMessage } from './language-message';\n\n/**\n * è±æè¯­è¨æ¶æ¯\n */\nclass LanguageMessageForZh implements LanguageMessage {\n  public yes = 'æ¯';\n  public no = 'å¦';\n  public unsaveNotifyTitle = 'å­å¨æªä¿å­è®°å½ãæ¯å¦è¦ä¿å­ï¼';\n  public clientNotifyTitle = 'åç«¯å¼å¸¸æç¤º';\n  public serverNotifyTitle = 'æå¡å¨ç«¯å¼å¸¸æç¤º';\n  public cancelApproveSuccess = 'åæ¶æäº¤æåï¼';\n  public cancelApproveFailed = 'åæ¶æäº¤å¤±è´¥ï¼';\n  public unallowEmptyProcessInstanceName = 'æµç¨å®ä¾åç§°ä¸è½ä¸ºç©º';\n  public unallowEmptyBizBillId = 'è¯·éæ©ä¸æ¡æ°æ®';\n  public bizDefKeyRequired = 'å¥å£åæ®ä¸è½ä¸ºç©º';\n  public unallowEmptyChildBizBillId = 'ä»è¡¨ä¸å¡åæ®ç¼å·ä¸è½ä¸ºç©ºï¼';\n  public procInsIdRequired = 'æµç¨å®ä¾Idä¸è½ä¸ºç©ºï¼';\n  public addChildFailed = 'æ°å¢å­çº§å¤±è´¥';\n  public addSiblingFailed = 'æ°å¢åçº§å¤±è´¥';\n  public addSubChildFailed = 'æ°å¢ä»è¡¨å­çº§å¤±è´¥';\n  public addSubSiblingFailed = 'æ°å¢ä»è¡¨åçº§å¤±è´¥';\n  public deleteFailed = 'å é¤å¤±è´¥';\n  public multiSaveFailed = 'æ¹éä¿å­å¤±è´¥';\n  public appendFailed = 'è¿½å å¤±è´¥';\n  public queryFailed = 'æ¥è¯¢å¤±è´¥';\n  public cancelFailed = 'åæ¶å¤±è´¥';\n  public updateFailed = 'æ´æ°å¤±è´¥';\n  public addFailed = 'æ°å¢å¤±è´¥';\n  public loadFailed = 'å è½½å¤±è´¥';\n  public saveSuccess = 'ä¿å­æåï¼';\n  public saveFailed = 'ä¿å­å¤±è´¥ï¼';\n  public deleteSuccess = 'å é¤æåï¼';\n  public deleteFaild = 'å é¤å¤±è´¥ï¼';\n  public confirmDeletion = 'ç¡®è®¤å é¤ï¼';\n  public submitSuccess = 'æäº¤å®¡æ¹æåï¼';\n  public submitFaild = 'æäº¤å®¡æ¹å¤±è´¥ï¼';\n  public notifyTitle = 'ç³»ç»æç¤º';\n  public httpError = 'HTTPè¯·æ±éè¯¯ï¼è¯·æ£æ¥Serverç«¯éè¯¯ï¼';\n  public gridDataNotSave = 'å½åé¡µæ°æ®æªä¿å­ï¼ç¿»é¡µå°å¯¼è´æ°æ®ä¸¢å¤±ï¼æ¯å¦ç»§ç»­ç¿»é¡µï¼';\n  public exitWithoutSave = 'å­å¨æªä¿å­çæ°æ®ï¼æ¯å¦ç»§ç»­å³é­ï¼';\n  public notSupportMenuType = 'å³é­çæ¢ä¸æ¯èåä¹ä¸æ¯åºç¨ã';\n  public cancelWithoutSave = 'å­å¨æªä¿å­çåæ´ï¼ç¡®è®¤åæ¶ï¼';\n  public plsSelectDeleteData = 'è¯·éæ©è¦å é¤çæ°æ®ï¼';\n  public errorHierarchyKey = 'éè¯¯çåçº§ç ';\n  public plsSelectParentNode = 'è¯·éæ©ç¶èç¹';\n  public deleteChildFirst = 'è¯·åå é¤å­èç¹';\n  public incorrectHierarchyConfig = 'åçº§ç éç½®ä¿¡æ¯éè¯¯';\n  public operationFailed = 'æä½æ§è¡å¤±è´¥ã';\n  public plsSelectEditData = 'è¯·éæ©è¦ç¼è¾çæ°æ®ï¼';\n  public plsSelectViewData = 'è¯·éæ©è¦æ¥ççæ°æ®ï¼';\n  public plsUploadFirst = 'è¯·åä¸ä¼ éä»¶ï¼';\n  public defaultDialogTitle = 'å¼¹çª';\n  public changeToFirst = 'å·²å°è¾¾ç¬¬ä¸æ¡æ°æ®';\n  public changeToLast = 'å·²å°è¾¾æåä¸æ¡æ°æ®';\n  public noProcessInstanceId = 'è¯·æå®æµç¨å®ä¾æ è¯ã';\n  public noDataExist = 'è¦ç¼è¾çæ°æ®ä¸å­å¨ï¼æ æ³è¿å¥ç¼è¾ç¶æï¼';\n  public noAttachment = 'æ²¡æå¯ä»¥é¢è§çéä»¶ã';\n  public confirm = 'ç¡®å®';\n  public cancel = 'åæ¶';\n  public plsSelectCopyData = 'è¯·éæ©è¦å¤å¶çæ°æ®ï¼';\n  public copyFieldsRequired = 'è¦å¤å¶çå­æ®µä¸è½ä¸ºç©ºï¼';\n  public pathIsRequired = 'è¯·æ±è·¯å¾ä¸è½ä¸ºç©ºï¼';\n  public propsIsEmpty = 'æ²¡æå¯ä»¥ç¼è¾çç©æç¹å¾ï¼';\n  public historyAttachment = 'åå²çæ¬éä»¶ç¦æ­¢å é¤ï¼';\n  public plsSelectDownloadAtt = 'è¯·éæ©è¦ä¸è½½çéä»¶!';\n  public noDownloadAtt = 'æ¾ä¸å°è¦ä¸è½½çéä»¶!'\n  public plsCheckBatchEditRows = 'è¯·å¾éè¦æ¹éç¼è¾çè¡ï¼';\n  public plsSelectDetailFormData = 'è¯·åéæ©ä¸æ¡ä»è¡¨æ°æ®ï¼';\n  public dataAndStateChanged = 'ç¡®å®è¦å è½½æ°æ®å¹¶åæ¢å°$1ç¶æï¼';\n  public dataChanged = 'ç¡®å®è¦å è½½æ°æ®å¹¶æ¾å¼å½åä¿®æ¹ï¼';\n  public stateChanged = 'ç¡®å®è¦åæ¢å°$1ç¶æï¼';\n  public defaultStateName = 'åå§';\n  public copy = 'å¤å¶è¯¦ç»ä¿¡æ¯';\n  public copySuccess = 'å¤å¶æå';\n  public copyFailed = 'å¤å¶å¤±è´¥';\n  public roger = 'ç¥éäº';\n  public appOrFuncIdRequired = 'æªéç½®èåæåºç¨åæ°ï¼è¯·å¨è®¾è®¡å¨ä¸­éç½®ã';\n  public tableCanNotEmpty = 'ä¸è½ä¸ºç©ºã';\n}\n\nexport { LanguageMessageForZh };\n","import { LanguageMessage } from './language-message';\n\n/**\n * ç¹ä½ä¸­æè¯­è¨æ¶æ¯\n */\nclass LanguageMessageForZhft implements LanguageMessage {\n  public yes = 'æ¯';\n  public no = 'å¦';\n  public unsaveNotifyTitle = 'å­å¨æªä¿å­è¨éãæ¯å¦è¦ä¿å­ï¼';\n  public clientNotifyTitle = 'åç«¯ç°å¸¸æç¤º';\n  public serverNotifyTitle = 'æåå¨ç«¯ç°å¸¸æç¤º';\n  public cancelApproveSuccess = 'åæ¶æäº¤æåï¼';\n  public cancelApproveFailed = 'åæ¶æäº¤å¤±æï¼';\n  public unallowEmptyProcessInstanceName = 'æµç¨å¯¦ä¾åç¨±ä¸è½çºç©º';\n  public unallowEmptyBizBillId = 'è«é¸æå£¹æ¢æ¸æ';\n  public bizDefKeyRequired = 'å¥å£å®æä¸è½çºç©º';\n  public unallowEmptyChildBizBillId = 'å¾è¡¨æ¥­åå®æç·¨èä¸è½çºç©ºï¼';\n  public procInsIdRequired = 'æµç¨å¯¦ä¾idä¸è½çºç©ºï¼';\n  public addChildFailed = 'æ°å¢å­ç´å¤±æ';\n  public addSiblingFailed = 'æ°å¢åç´å¤±æ';\n  public addSubChildFailed = 'æ°å¢å¾è¡¨å­ç´å¤±æ';\n  public addSubSiblingFailed = 'æ°å¢å¾è¡¨åç´å¤±æ';\n  public deleteFailed = 'åªé¤å¤±æ';\n  public multiSaveFailed = 'æ¹éä¿å­å¤±æ';\n  public appendFailed = 'è¿½å å¤±æ';\n  public queryFailed = 'æ¥è©¢å¤±æ';\n  public cancelFailed = 'åæ¶å¤±æ';\n  public updateFailed = 'æ´æ°å¤±æ';\n  public addFailed = 'æ°å¢å¤±æ';\n  public loadFailed = 'å è¼å¤±æ';\n  public saveSuccess = 'ä¿å­æåï¼';\n  public saveFailed = 'ä¿å­å¤±æï¼';\n  public deleteSuccess = 'åªé¤æåï¼';\n  public deleteFaild = 'åªé¤å¤±æï¼';\n  public confirmDeletion = 'ç¢ºèªåªé¤ï¼';\n  public submitSuccess = 'æäº¤å¯©æ¹æåï¼';\n  public submitFaild = 'æäº¤å¯©æ¹å¤±æï¼';\n  public notifyTitle = 'ç³»çµ±æç¤º';\n  public httpError = 'HTTPè«æ±é¯èª¤ï¼è«æª¢æ¥Serverç«¯é¯èª¤ï¼';\n  public gridDataNotSave = 'ç¶åé æ¸ææªä¿å­ï¼ç¿»é å°å°è´æ¸æä¸å¤±ï¼æ¯å¦ç¹¼çºç¿»é ï¼';\n  public exitWithoutSave = 'å­å¨æªä¿å­çæ¸æï¼æ¯å¦ç¹¼çºééï¼';\n  public notSupportMenuType = 'ééçæ¢ä¸æ¯èå®ä¹ä¸æ¯æç¨ã';\n  public cancelWithoutSave = 'å­å¨æªä¿å­çè®æ´ï¼ç¢ºèªåæ¶ï¼';\n  public plsSelectDeleteData = 'è«é¸æè¦åªé¤çæ¸æï¼';\n  public errorHierarchyKey = 'é¯èª¤çåç´ç¢¼';\n  public plsSelectParentNode = 'è«é¸æç¶ç¯é»';\n  public deleteChildFirst = 'è«ååªé¤å­ç¯é»';\n  public incorrectHierarchyConfig = 'åç´ç¢¼éç½®ä¿¡æ¯é¯èª¤';\n  public operationFailed = 'æä½å·è¡å¤±æã';\n  public plsSelectEditData = 'è«é¸æè¦ç·¨è¼¯çæ¸æï¼';\n  public plsSelectViewData = 'è«é¸æè¦æ¥ççæ¸æï¼';\n  public plsUploadFirst = 'è«åä¸å³éä»¶ï¼';\n  public defaultDialogTitle = 'å½çª';\n  public changeToFirst = 'å·²å°éç¬¬å£¹æ¢æ¸æ';\n  public changeToLast = 'å·²å°éæå¾å£¹æ¢æ¸æ';\n  public noProcessInstanceId = 'è«æå®æµç¨å¯¦ä¾æ¨è­ã';\n  public noDataExist = 'è¦ç·¨è¼¯çæ¸æä¸å­å¨ï¼ç¡æ³é²å¥ç·¨è¼¯çæï¼';\n  public noAttachment = 'æ²æå¯ä»¥é è¦½çéä»¶ã';\n  public confirm = 'ç¢ºå®';\n  public cancel = 'åæ¶';\n  public plsSelectCopyData = 'è«é¸æè¦å¾©å¶çæ¸æï¼';\n  public copyFieldsRequired = 'è¦å¾©å¶çå­æ®µä¸è½çºç©ºï¼';\n  public pathIsRequired = 'è«æ±è·¯å¾ä¸è½çºç©ºï¼';\n  public propsIsEmpty = 'æ²æå¯ä»¥ç·¨è¼¯çç©æç¹å¾ï¼';\n  public historyAttachment = 'æå²çæ¬éä»¶ç¦æ­¢åªé¤ï¼';\n  public plsSelectDownloadAtt = 'è«é¸æè¦ä¸è¼çéä»¶!';\n  public noDownloadAtt = 'æ¾ä¸å°è¦ä¸è¼çéä»¶ï¼';\n  public plsCheckBatchEditRows = 'è«å¾é¸è¦æ¹éç·¨è¼¯çè¡ï¼';\n  public plsSelectDetailFormData = 'è«åé¸æä¸æ¢å¾è¡¨æ¸æï¼';\n  public dataAndStateChanged = 'ç¢ºå®è¦å è¼æ¸æä¸¦åæå°$1çæï¼';\n  public dataChanged = 'ç¢ºå®è¦å è¼æ¸æä¸¦æ¾æ£ç¶åä¿®æ¹ï¼';\n  public stateChanged = 'ç¢ºå®è¦åæå°$1çæï¼';\n  public defaultStateName = 'åå§';\n  public copy = 'å¾©å¶è©³ç´°ä¿¡æ¯';\n  public copySuccess = 'å¾©å¶æå';\n  public copyFailed = 'å¾©å¶å¤±æ';\n  public roger = 'ç¥éäº';\n  public appOrFuncIdRequired = 'æªéç½®èå®ææç¨åæ¸ï¼è«å¨è¨­è¨å¨ä¸­éç½®ã';\n  public tableCanNotEmpty = 'ä¸è½çºç©ºã';\n}\n\nexport { LanguageMessageForZhft };\n","import { LanguageMessage } from './language-message';\nimport { LanguageMessageForZh } from './language-message-zh';\nimport { LanguageMessageForEn } from './language-message-en';\nimport { LanguageMessageForZhft } from './language-message-zhft';\nclass LanguageMessageFactory {\n\n  private static languageMessageMap: Map<string, LanguageMessage> = new Map<string, LanguageMessage>();\n\n  /**\n   * Create an instance by language\n   */\n  public static create(language: string): LanguageMessage {\n    if (this.languageMessageMap.has(language) === true) {\n      return this.languageMessageMap.get(language);\n    }\n\n    let languageMessage: LanguageMessage;\n    switch (language) {\n      case 'zh-CHS':\n        languageMessage = new LanguageMessageForZh();\n        break;\n      case 'en':\n        languageMessage = new LanguageMessageForEn();\n        break;\n      case 'zh-CHT':\n        languageMessage = new LanguageMessageForZhft();\n        break;\n      default:\n        languageMessage = new LanguageMessageForZh();\n        break;\n    }\n    this.languageMessageMap.set(language, languageMessage);\n\n    return languageMessage;\n  }\n}\n\nexport { LanguageMessageFactory };\n","import { Injectable, LOCALE_ID, Optional, Inject } from '@angular/core';\nimport { LanguageMessage, LanguageMessageFactory } from './languages/index';\n\n\n/**\n * å¤è¯­è¨æå¡\n * @scope FormModule\n */\n@Injectable()\nclass LanguageService implements LanguageMessage {\n\n  /**\n   * åä¾å¯¹è±¡\n   */\n  private static innerInstance: LanguageService = null;\n\n  // #region å®ç°LanguageMessageæ¥å£ï¼æ¹ä¾¿ä¹¦å\n  public yes: string;\n  public no: string;\n  public unsaveNotifyTitle: string;\n  public clientNotifyTitle: string;\n  public serverNotifyTitle: string;\n  public cancelApproveSuccess: string;\n  public cancelApproveFailed: string;\n  public unallowEmptyProcessInstanceName: string;\n  public unallowEmptyBizBillId: string;\n  public unallowEmptyChildBizBillId: string;\n  public bizDefKeyRequired: string;\n  public procInsIdRequired: string;\n  public addChildFailed: string;\n  public addSiblingFailed: string;\n  public addSubChildFailed: string;\n  public addSubSiblingFailed: string;\n  public deleteFailed: string;\n  public multiSaveFailed: string;\n  public appendFailed: string;\n  public queryFailed: string;\n  public cancelFailed: string;\n  public updateFailed: string;\n  public addFailed: string;\n  public loadFailed: string;\n  public saveSuccess: string;\n  public saveFailed: string;\n  public deleteSuccess: string;\n  public deleteFaild: string;\n  public confirmDeletion: string;\n  public submitSuccess: string;\n  public submitFaild: string;\n  public notifyTitle: string;\n  public httpError: string;\n  public gridDataNotSave: string;\n  public exitWithoutSave: string;\n  public notSupportMenuType: string;\n  public cancelWithoutSave: string;\n  public plsSelectDeleteData: string;\n  public errorHierarchyKey: string;\n  public plsSelectParentNode: string;\n  public deleteChildFirst: string;\n  public incorrectHierarchyConfig: string;\n  public operationFailed: string;\n  public plsSelectEditData: string;\n  public plsSelectViewData: string;\n  public plsUploadFirst: string;\n  public defaultDialogTitle: string;\n  public changeToFirst: string;\n  public changeToLast: string;\n  public noProcessInstanceId: string;\n  public noDataExist: string;\n  public noAttachment: string;\n  public confirm: string;\n  public cancel: string;\n  public plsSelectCopyData: string;\n  public copyFieldsRequired: string;\n  public pathIsRequired: string;\n  public propsIsEmpty: string;\n  public historyAttachment: string;\n  public plsSelectDownloadAtt: string;\n  public noDownloadAtt: string;\n  public plsCheckBatchEditRows: string;\n  public plsSelectDetailFormData: string;\n  public dataAndStateChanged: string;\n  public dataChanged: string;\n  public stateChanged: string;\n  public defaultStateName: string;\n  public copy: string;\n  public copySuccess: string;\n  public copyFailed: string;\n  public roger: string;\n  public appOrFuncIdRequired: string;\n  public tableCanNotEmpty: string;\n  // #endregion\n\n  /**\n   * å½åè¯­è¨\n   */\n  protected language = 'zh-CHS';\n\n  /**\n   * å½åè¯­è¨å\n   */\n  protected get languageMessage(): LanguageMessage {\n    return LanguageMessageFactory.create(this.language);\n  }\n\n  /**\n   * æé å½æ°\n   */\n  constructor(@Optional() @Inject(LOCALE_ID) localeId?: string) {\n    this.language = localeId || 'zh-CHS';\n    this.extendProperties();\n    LanguageService.innerInstance = this;\n  }\n\n  /**\n   * è·åå®ä¾\n   */\n  public static getInstance() {\n    if (this.innerInstance) {\n      return this.innerInstance;\n    }\n    const instance = new LanguageService('zh-CHS');\n    LanguageService.innerInstance = instance;\n    return instance;\n  }\n\n  /**\n   * æ©å±å±æ§\n   */\n  private extendProperties() {\n    Object.keys(this.languageMessage).forEach((propName: string) => {\n      Object.defineProperty(this, propName, {\n        get: () => {\n          return this.languageMessage[propName];\n        }\n      });\n    });\n  }\n}\n\nexport { LanguageService };\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","export class DeviceAbility {\n  /**\n   * å¤å¶å°ç²è´´æ¿\n   * @param text \n   * @returns \n   */\n  public static copyToClipboard(text): boolean {\n    const windowRef: any = window;\n    if (windowRef.clipboardData && windowRef.clipboardData.setData) {\n      return windowRef.clipboardData.setData(\"Text\", text);\n    } else if (document.queryCommandSupported && document.queryCommandSupported(\"copy\")) {\n      var textarea = document.createElement(\"textarea\");\n      textarea.textContent = text;\n      textarea.style.position = \"fixed\";\n      document.body.appendChild(textarea);\n      textarea.select();\n      try {\n        return document.execCommand(\"copy\");\n      } catch (ex) {\n      } finally {\n        document.body.removeChild(textarea);\n      }\n    }\n    return false;\n  }\n}","\nimport { Optional } from '@angular/core';\nimport { MessagerService } from '@farris/ui-messager';\nimport { LanguageService } from '../languag.service';\nimport { ServerExceptionEntity } from './types';\nimport { DeviceAbility } from '../util/device-ability';\nimport { BsModalRef } from '@farris/ui-modal';\nimport { FormNotifyService } from '../form-notify.service';\nimport { FrameContext } from '@farris/devkit';\nimport moment from 'moment';\n/**\n * å¼å¸¸å¤çæ¥å£\n */\nexport interface IExceptionStrategy {\n  handleException(error: ServerExceptionEntity): void;\n}\n\n\n/**\n * å¼å¸¸å¤çåºç±»\n */\nexport class ExceptionStrategy {\n  constructor(\n    public messagerService: MessagerService,\n    @Optional() public languageService: LanguageService) {\n  }\n}\n\n/**\n * ä¿¡æ¯çº§å«å¼å¸¸å¤ç\n */\nexport class InfoExceptionStrategy extends ExceptionStrategy implements IExceptionStrategy {\n  constructor(\n    messagerService: MessagerService,\n    @Optional() languageService: LanguageService) {\n    super(messagerService, languageService);\n  }\n\n  public handleException(error: ServerExceptionEntity): void {\n    if (!error) {\n      return;\n    }\n\n    this.messagerService.info(error.Message);\n  }\n}\n\n\n/**\n * è­¦åçº§å«å¼å¸¸å¤ç\n */\nexport class WarningExceptionStrategy extends ExceptionStrategy implements IExceptionStrategy {\n  constructor(\n    messagerService: MessagerService,\n    @Optional() languageService: LanguageService) {\n    super(messagerService, languageService);\n  }\n\n  public handleException(error: ServerExceptionEntity): void {\n    if (!error) {\n      return;\n    }\n\n    this.messagerService.warning(error.Message);\n  }\n}\n\n\n/**\n * éè¯¯çº§å«å¼å¸¸å¤ç\n */\nexport class ErrorExceptionStrategy extends ExceptionStrategy implements IExceptionStrategy {\n  private langService: LanguageService = null;\n  constructor(\n    messagerService: MessagerService,\n    @Optional() languageService: LanguageService) {\n    super(messagerService, languageService);\n    this.langService = languageService;\n    if (!this.langService) {\n      this.langService = new LanguageService();\n    }\n\n  }\n\n  public handleException(error: ServerExceptionEntity): void {\n    if (!error) {\n      return;\n    }\n\n    this.handleErrorLevel(error);\n  }\n\n  private handleErrorLevel(error: ServerExceptionEntity): void {\n    const exceptionMsg = error.Message || '';\n    const date = error.date || new Date();\n    const localDate = moment(date).format('YYYY-MM-DD HH:mm:ss');\n    const detail = error.Detail || `${error.Message}\\r\\nåçæ¶é´ï¼${localDate}\\r\\nè¯¦ç»ä¿¡æ¯ï¼${error.innerMessage}` || '';\n\n    const innerMessage = error.innerMessage || null;\n    let bsModalRef: BsModalRef;\n    const options = {\n      // title: this.languageService.serverNotifyTitle,\n      showMaxButton: false,\n      buttons: [\n        {\n          text: this.langService.roger,\n          cls: 'btn btn-primary btn-lg',\n          handle: () => {\n            bsModalRef.close();\n          }\n        }\n      ],\n      // showHeader: false,\n      width: 440,\n      height: 200,\n      safeHtml: false,\n      exception: {\n        date: localDate,\n        message: innerMessage,\n        copyButton: {\n          text: this.langService.copy,\n          onClick: (e) => {\n            const result = DeviceAbility.copyToClipboard(detail);\n            const text = result ? this.langService.copySuccess : this.langService.copyFailed;\n            bsModalRef.content.showMiniNotify(text, 1500);\n          }\n        }\n      }\n    };\n    this.displayError(error);\n    bsModalRef = this.messagerService.show('exception', exceptionMsg, options);\n  }\n  /**\n   * å¨æ§å¶å°ä¸­æ¾ç¤ºéè¯¯ä¿¡æ¯\n   */\n  private displayError(error: ServerExceptionEntity) {\n    if (!error) {\n      return;\n    }\n    if (!console || !console.error) {\n      return;\n    }\n    console.error(error);\n  }\n}\n\n/**\n * è´å½éè¯¯çº§å«å¼å¸¸å¤ç\n */\nexport class FatalExceptionStrategy extends ExceptionStrategy implements IExceptionStrategy {\n  constructor(\n    messagerService: MessagerService,\n    @Optional() languageService: LanguageService) {\n    super(messagerService, languageService);\n  }\n\n  public handleException(error: ServerExceptionEntity): void {\n    if (!error) {\n      return;\n    }\n\n    this.messagerService.error(error.Message);\n  }\n}\n","import { Optional, Injectable } from '@angular/core';\nimport { MessagerService } from '@farris/ui-messager';\nimport { LanguageService } from '../languag.service';\nimport { ServerExceptionEntity, ExceptionLevel } from './types';\nimport {\n  IExceptionStrategy, InfoExceptionStrategy, WarningExceptionStrategy, ErrorExceptionStrategy, FatalExceptionStrategy\n} from './exception_strategy';\n\n\n@Injectable()\nexport class ExceptionFactory {\n\n  /**\n   * å¼å¸¸å·¥åå®ä¾\n   */\n  private static exceptionFactory: ExceptionFactory = null;\n\n  /**\n   * æé å½æ°\n   * @param messagerService æ¶æ¯æå¡\n   * @param languageService å¤è¯­è¨æå¡\n   */\n  private constructor(\n    public messagerService: MessagerService,\n    @Optional() private languageService: LanguageService,\n  ) {\n\n  }\n\n  /**\n   * è·åå·¥åå®ä¾\n   * @param messagerService æ¶æ¯æå¡\n   * @param languageService å¤è¯­è¨æå¡\n   */\n  public static getInstance(messagerService: MessagerService, languageService: LanguageService): ExceptionFactory {\n    if (!this.exceptionFactory) {\n      this.exceptionFactory = new ExceptionFactory(messagerService, languageService);\n    }\n\n    return this.exceptionFactory;\n  }\n\n  /**\n   * è·åå¼å¸¸å¤çç­ç¥\n   * @param exceptionLevel å¼å¸¸ç­çº§\n   */\n  public getExceptionHandleStrategy(exceptionLevel: ExceptionLevel): IExceptionStrategy {\n    let exceptionStrategy: IExceptionStrategy;\n\n    switch (exceptionLevel) {\n      case ExceptionLevel.Info:\n        exceptionStrategy = new InfoExceptionStrategy(this.messagerService, this.languageService);\n        break;\n      case ExceptionLevel.Warning:\n        exceptionStrategy = new WarningExceptionStrategy(this.messagerService, this.languageService);\n        break;\n      case ExceptionLevel.Error:\n        exceptionStrategy = new ErrorExceptionStrategy(this.messagerService, this.languageService);\n        break;\n      case ExceptionLevel.Fatal:\n        exceptionStrategy = new FatalExceptionStrategy(this.messagerService, this.languageService);\n        break;\n      default:\n\n        // é»è®¤å¼å¸¸ç­çº§æ¯éè¯¯\n        exceptionStrategy = new ErrorExceptionStrategy(this.messagerService, this.languageService);\n        break;\n    }\n\n    return exceptionStrategy;\n  }\n}\n","// https://github.com/typeslick/status-code-enum\nenum HttpStatusType {\n    Info = 1,\n    Success,\n    Redirect,\n    ClientError,\n    ServerError\n}\n\n/**\n * httpéç¨ç±»\n */\nclass HttpUtil {\n\n    /**\n     * åºäºhttpç¶æç è¿åç¶æç±»å\n     * @param httpResponseSatus httpè¯·æ±è¿åç¶æç \n     * @returns null | HttpStatusType\n     */\n    public static getHttpStatusType(httpResponseSatus: number): any {\n        if (!httpResponseSatus) {\n            return null;\n        }\n        \n        let statusType = null; // é»è®¤å¼ä¸ºç©º\n        \n        if (httpResponseSatus < 100 || httpResponseSatus > 600) {\n            statusType = null; // ä¸åçç¶æç \n        } else if (httpResponseSatus >= 100 && httpResponseSatus < 200) {\n            statusType = HttpStatusType.Info;\n        } else if (httpResponseSatus >= 200 && httpResponseSatus < 300) {\n            statusType = HttpStatusType.Success;\n        } else if (httpResponseSatus >= 300 && httpResponseSatus < 400) {\n            statusType = HttpStatusType.Redirect;\n        } else if (httpResponseSatus >= 400 && httpResponseSatus < 500) {\n            statusType = HttpStatusType.ClientError;\n        } else if (httpResponseSatus >= 500 && httpResponseSatus < 600) {\n            statusType = HttpStatusType.ServerError;\n        }\n\n        return statusType;\n    }\n}\n\nexport { HttpUtil, HttpStatusType };","import { Injectable, Optional } from '@angular/core';\nimport { HttpErrorResponse } from '@angular/common/http';\n\nimport { FormMessageService } from '../form-message.service';\nimport { LanguageService } from '../languag.service';\nimport { HttpUtil, HttpStatusType } from '../util/http';\n\n/**\n * è¡¨åéè¯¯æç¤ºæå¡\n * @description ç»ä¸å¤çååç«¯å¼å¸¸\n */\n@Injectable()\nclass FormErrorService {\n\n  constructor(\n    private msgService: FormMessageService,\n    @Optional() private languageService: LanguageService\n  ) {\n  }\n\n  /**\n   * å¼å¸¸è·¯ç±æ¹æ³\n   */\n  public exception(message: string, error: any) {\n    // éå¯¹sessionå¤±æåç¹æ®å¤ç\n    if (error && error.hasOwnProperty('expired') && error['expired'] === true) {\n      return;\n    }\n    if (error && this.isHttpErrorResponse(error)) {\n      this.httpErrorHandler(error);\n    } else {\n\n      // todo: ç»åå¼å¸¸å¤çåï¼ç»§ç»­æè§£è¯¥æ¹æ³\n      this.commonErrorHandler(message);\n    }\n  }\n\n  /**\n   * httpè¯·æ±å¼å¸¸å¤çå¨\n   */\n  public httpErrorHandler(httpError: HttpErrorResponse): void {\n    if (!httpError) {\n      return;\n    }\n\n    const statusType = HttpUtil.getHttpStatusType(httpError.status);\n\n    switch (statusType) {\n      case HttpStatusType.ClientError:\n        if (httpError.status === 401) {\n          this.msgService.http401Error(httpError);\n          break;\n        }\n\n        this.msgService.httpErrorInClient(httpError);\n        break;\n      case HttpStatusType.ServerError:\n        this.msgService.httpErrorInServer(httpError);\n        break;\n      default:\n        throw new Error('Get invalid status code when using httpErrorHandler method.');\n    }\n  }\n\n  private commonErrorHandler(errorMsg: string): void {\n    if (!errorMsg) {\n      return;\n    }\n    this.msgService.error(errorMsg);\n  }\n  /**\n   * httpErrorResponse like\n   * @param error å¼å¸¸\n   */\n  private isHttpErrorResponse(error) {\n    if (!error) {\n      return false;\n    }\n    if (typeof error !== 'object') {\n      return false;\n    }\n    if (error.name === 'HttpErrorResponse' && error.hasOwnProperty('status') && error.hasOwnProperty('error')) {\n      return true;\n    }\n    if (error instanceof HttpErrorResponse) {\n      return true;\n    }\n    return false;\n  }\n}\n\nexport { FormErrorService };\n\n","import { Inject, Injectable, LOCALE_ID, Optional } from '@angular/core';\nimport { HttpErrorResponse } from '@angular/common/http';\nimport { Observable, Subject, of, from } from 'rxjs';\nimport { MessagerService } from '@farris/ui-messager';\nimport { fromPromise } from 'rxjs/observable/fromPromise';\nimport { LanguageService } from './languag.service';\nimport { ServerExceptionEntity, ExceptionFactory, IExceptionStrategy } from './error/index';\nimport { BsModalRef } from '@farris/ui-modal';\n\n/**\n * è¡¨åæ¶æ¯æå¡\n * @scope FormModule\n * @summary\n * 1ãåè£@farris/uiçæ¶æ¯æå¡ï¼\n * 2ãæä¾éå¯¹è¡¨åçå¿«æ·æ¹æ³ï¼\n */\n@Injectable()\nclass FormMessageService {\n\n  /**\n   * æé å½æ°\n   * æ³¨å¥@farris/uiçLoadingService\n   */\n  constructor(\n    private messagerService: MessagerService,\n    @Optional() private languageService: LanguageService,\n    @Inject(LOCALE_ID) private curLanguage: string, // ä¸ºäºç¬ç«å¼¹åºéæ°ç»å½æç¤ºæ¡ï¼åæ¢å°è¿è¡æ¡æ¶httpæå¡åå¯ä»¥å é¤\n  ) {\n    this.languageService = this.languageService || LanguageService.getInstance();\n  }\n  /**\n   * questionå¼¹çª\n   */\n  public question(content: string): Observable<boolean> {\n    const confirmResult$: Promise<boolean> = this.confirmPromise(content);\n    return from(confirmResult$);\n  }\n\n  /**\n   * å¸¦é»è®¤ç¦ç¹çå¼¹åºæç¤º\n   * @param content åå®¹\n   */\n  public question2(content: string): Observable<boolean> {\n    const promise$: Promise<boolean> = new Promise((resolve, reject) => {\n      const dialogRef = this.messagerService.question2(\n        content,\n        [\n          {\n            text: this.languageService.no,\n            cls: 'btn btn-secondary',\n            handle: () => {\n              resolve(false);\n              dialogRef.close();\n            }\n          },\n          {\n            text: this.languageService.yes,\n            cls: 'btn btn-primary',\n            defaultFocus: true,\n            handle: () => {\n              resolve(true);\n              dialogRef.close();\n            }\n          }\n        ]);\n    });\n    return from(promise$);\n  }\n\n  /**\n   * å¼¹åºè¾å¥å¯¹è¯æ¡\n   * @param title æ é¢\n   */\n  public prompt(title: string): Observable<any> {\n    return this.messagerService.prompt(title);\n  }\n\n  /**\n   * ä½¿ç¨Promiseå®ä¾åè£åè°æ¹æ³ï¼ä»¥åæ­¥åè°æ¹æ³æ§è¡åç»æ\n   * @param content\n   */\n  private confirmPromise(content: string): Promise<boolean> {\n    return new Promise((resolve, reject) => {\n      this.messagerService.question(\n        content,\n        () => { resolve(true); },\n        () => { resolve(false); }\n      );\n    });\n  }\n\n  /**\n   * ç¡®è®¤å¼¹æ¡\n   * @param content å¼¹åºåå®¹æç¤º\n   */\n  public confirm(content: string): Observable<boolean> {\n    return this.messagerService.confirm(content);\n  }\n\n  /**\n   * æ¶æ¯å¼¹æ¡\n   */\n  public info(content: string) {\n    this.messagerService.info(content);\n  }\n\n  /**\n   * éè¯¯å¼¹æ¡\n   */\n  public error(content: string) {\n    this.messagerService.error(content);\n  }\n\n  /**\n   * è­¦åå¼¹æ¡\n   */\n  public warning(content: string) {\n    this.messagerService.warning(content);\n  }\n\n  /**\n   * æå¡å¨ç«¯å¼å¸¸æç¤ºå¼¹æ¡\n   */\n  public httpErrorInServer(httpError: HttpErrorResponse): void {\n    let error: ServerExceptionEntity = httpError.error;\n    if (typeof (error) === 'string') {\n      try {\n        error = JSON.parse(error);\n      } catch (e) { }\n    }\n    if (!error || error.Level == null || error.Level == undefined) { // æªå°è£errorææªè®¾ç½®å¼å¸¸ç­çº§\n      this.messagerService.error(httpError.message);\n      return;\n    }\n    const exceptionStrategy: IExceptionStrategy = ExceptionFactory.getInstance(this.messagerService, this.languageService).getExceptionHandleStrategy(error.Level);\n    exceptionStrategy.handleException(error);\n  }\n\n  /**\n   * å®¢æ·ç«¯å¼å¸¸æç¤ºå¼¹æ¡\n   */\n  public httpErrorInClient(httpError: HttpErrorResponse): void {\n    if (!httpError) {\n      return;\n    }\n    const message = httpError.error && httpError.error.error && httpError.error.error.message;\n    const exceptionMsg = message || httpError.message && httpError.message.replace(/http:\\/\\/[a-zA-Z0-9.:]{1,}/, '');\n    const options = {\n      // title: this.languageService.clientNotifyTitle,\n      // showMaxButton: true,\n      showHeader: false,\n      width: 400,\n      height: 200,\n      safeHtml: false\n    };\n\n    this.messagerService.show('error', exceptionMsg, options);\n  }\n\n  /**\n   * 401å¼å¸¸å¤ç\n   * ä¸ºäºç¬ç«å¼¹åºéæ°ç»å½æç¤ºæ¡ï¼åæ¢å°è¿è¡æ¡æ¶httpæå¡åå¯ä»¥å é¤\n   * @param httpError å¼å¸¸\n   */\n  public http401Error(httpError: HttpErrorResponse): void {\n    const dialogShownKey = '401ErrorShownFlag';\n\n    if (!httpError || window[dialogShownKey]) {\n      return;\n    }\n\n    const i18n = {\n      en: {\n        title: 'Warning',\n        sessionInvalid: 'Your login has expired, please login again.',\n        ok: 'ok',\n        cancel: 'cancel'\n      },\n      'zh-CHS': {\n        title: 'æç¤º',\n        sessionInvalid: 'ç¨æ·ç»å½ä¿¡æ¯å·²å¤±æï¼æ¯å¦éæ°ç»å½?',\n        ok: 'ç¡®è®¤',\n        cancel: 'åæ¶'\n      }\n    };\n    this.curLanguage = this.curLanguage || 'zh-CHS';\n\n    const messageOptions = {\n      title: i18n[this.curLanguage].title,\n      initialState: {\n        okText: i18n[this.curLanguage].ok,\n        okHandle: () => {\n          modalRef.close();\n          window[dialogShownKey] = false;\n          const eventResult = httpError && httpError.error || {};\n          const redirectUri = eventResult.redirect_uri || '/login.html';\n          window.location.href = `/logout.html#?logout-before-redirect=true&loginUri=${redirectUri}`;\n        },\n        cancelText: i18n[this.curLanguage].cancel,\n        cancelHandle: () => {\n          modalRef.close();\n          window[dialogShownKey] = false;\n        }\n      },\n      showHeader: true,\n      width: 420,\n      height: 180,\n      fitContent: false\n    };\n    const modalRef = this.messagerService.show('question', i18n[this.curLanguage].sessionInvalid, messageOptions);\n    window[dialogShownKey] = true;\n    if (modalRef && modalRef.dialog && modalRef.dialog.instance.closed) {\n      modalRef.dialog.instance.closed.subscribe(() => {\n        window[dialogShownKey] = false;\n      });\n    }\n  }\n\n}\n\nexport { FormMessageService };\n\n","import { Injectable, Optional } from '@angular/core';\nimport { NotifyService, NotifyOptions } from '@farris/ui-notify';\nimport { LanguageService } from './languag.service';\n\n/**\n * éç¥æå¡\n * @scope FormModule\n * @description\n * æ¶æ¯æç¤ºä½¿ç¨ç­ç¥ï¼æåä½¿ç¨successï¼å¤±è´¥ä½¿ç¨errorï¼è­¦åä½¿ç¨warningï¼å¶ä»åºæ¯ä½¿ç¨info\n */\n@Injectable()\nclass FormNotifyService {\n\n  /**\n   * æé å½æ°\n   * æ³¨å¥@farris/uiçNotifyService\n   */\n  constructor(private notifyService: NotifyService,\n    @Optional() private languageService: LanguageService\n  ) {\n    if (!languageService) {\n      this.languageService = LanguageService.getInstance();\n    }\n  }\n\n  /**\n   * ä¿¡æ¯æç¤º\n   * @param content åå®¹\n   */\n  public default(content: string) {\n    return this.notifyService.default(<NotifyOptions>{\n      title: this.languageService.notifyTitle,\n      msg: content,\n      timeout: 3000\n    });\n  }\n\n  /**\n   * ä¿¡æ¯æç¤º\n   * @param content åå®¹\n   */\n  public info(content: string, options?: { [prop: string]: any }) {\n    const notifyOptions: NotifyOptions = {\n      title: this.languageService.notifyTitle,\n      msg: content,\n      timeout: 3000\n    } as NotifyOptions;\n    if (options && options.hideTitle) {\n      delete notifyOptions.title;\n    }\n    return this.notifyService.info(notifyOptions);\n  }\n\n  /**\n   * æåæç¤º\n   * @param content åå®¹\n   * @param options? éé¡¹ {shorTitle: false}\n   */\n  public success(content: string, options?: { [prop: string]: any }) {\n    const notifyOptions: NotifyOptions = {\n      title: this.languageService.notifyTitle,\n      msg: content,\n      timeout: 3000\n    } as NotifyOptions;\n    if (options && options.hideTitle) {\n      delete notifyOptions.title;\n    }\n    this.notifyService.success(notifyOptions);\n  }\n\n  /**\n   * è­¦åæç¤º\n   * @param content åå®¹\n   * @param options éé¡¹\n   */\n  public warning(content: string, options?: { [prop: string]: any }) {\n    const notifyOptions: NotifyOptions = {\n      title: this.languageService.notifyTitle,\n      msg: content,\n      timeout: 3000\n    } as NotifyOptions;\n    if (options && options.hideTitle) {\n      delete notifyOptions.title;\n    }\n    this.notifyService.warning(notifyOptions);\n  }\n\n  /**\n   * éè¯¯æç¤º\n   * @param content åå®¹\n   */\n  public error(content: string, options?: { [prop: string]: any }) {\n    const notifyOptions: NotifyOptions = {\n      title: this.languageService.notifyTitle,\n      msg: content,\n      timeout: 3000\n    } as NotifyOptions;\n    if (options && options.hideTitle) {\n      delete notifyOptions.title;\n    }\n    this.notifyService.error(notifyOptions);\n  }\n}\n\nexport { FormNotifyService };\n","import { Injectable } from '@angular/core';\nimport { WizardService, WizardEventType } from '@farris/ui-wizard';\nimport { FrameContext } from '@farris/devkit';\n\n@Injectable()\nexport class FormWizardService {\n    constructor(\n        private wizardSer: WizardService\n    ) { }\n\n    public preStep() {\n        const currentPageId = this.wizardSer.getCurrentPageId();\n        this.wizardSer.updateWizardState(WizardEventType.Prev, currentPageId);\n    }\n    public nextStep() {\n        const currentPageId = this.wizardSer.getCurrentPageId();\n        this.wizardSer.updateWizardState(WizardEventType.Next, currentPageId);\n    }\n    public cancelWizard() {\n        this.wizardSer.cancelWizard();\n    }\n\n    public finishWizard() {\n        this.wizardSer.finishWizard();\n    }\n}\n","import { Injectable } from '@angular/core';\n\n/**\n * æ£æ¥è§å\n * @scope FormModule\n */\n@Injectable()\nclass CheckService {\n\n  constructor() {\n  }\n\n  /**\n   * æ£æ¥æ¯å¦ä¸ºç©º\n   */\n  public checkEmpty(value: any) {\n    return !!value;\n  }\n}\n\nexport { CheckService };\n","import { Injectable, Optional } from '@angular/core';\nimport { Observable, empty, of } from 'rxjs';\nimport { CommandContext } from '@farris/devkit';\nimport { FormMessageService } from './form-message.service';\nimport { FormNotifyService } from './form-notify.service';\nimport { LanguageService } from './languag.service';\n\n/**\n * æ°æ®æ£æ¥æå¡\n */\n@Injectable()\nclass DataCheckService {\n\n  constructor(\n    private messageService: FormMessageService,\n    private formNotifyService: FormNotifyService,\n    @Optional() private languageService: LanguageService,\n  ) {\n    if (!this.languageService) {\n      this.languageService = LanguageService.getInstance();\n    }\n  }\n\n  /**\n   * ç¼è¾åæ£æ¥\n   */\n  public checkBeforeEdit(idToEdit: string): any {\n\n    const ifSkipCheck = this.ifSkipCheck(idToEdit);\n    if (ifSkipCheck === true) {\n      return true;\n    }\n\n    if (idToEdit) {\n      return true;\n    }\n\n    this.formNotifyService.warning(this.languageService.plsSelectEditData, { hideTitle: true });\n    return empty();\n  }\n\n  /**\n   * æ¥çåæ£æ¥\n   */\n  public checkBeforeView(idToView: string): any {\n    const ifSkipCheck = this.ifSkipCheck(idToView);\n    if (ifSkipCheck === true) {\n      return true;\n    }\n\n    if (idToView) {\n      return true;\n    }\n\n    this.formNotifyService.warning(this.languageService.plsSelectViewData, { hideTitle: true });\n    return empty();\n  }\n  /**\n   * èè¡¨åè·³è¿æ£æ¥\n   * @todoï¼å¾å é¤ï¼å¼å®¹èè¡¨å\n   */\n  public ifSkipCheck(id: string): boolean {\n    const context = this['context'] as CommandContext;\n    const params = context.command.params;\n\n    // è¡¨åæ²¡æéæ°ä¿å­è¿çæåµ\n    if (params.hasOwnProperty('idToEdit') === false && params.hasOwnProperty('idToView') === false) {\n      return true;\n    }\n\n    // ä¿å­è¿ä½æ²¡æå¡«åæ°çæåµ\n    // @todo: ä¼æ¼æç©ºä¸²çæåµï¼ç®åä¸»é®è§£æçè¿åå¼æ¯undefinedï¼æä¸èèç©ºä¸²åºæ¯\n    if (id === '') {\n      return true;\n    }\n\n    return false;\n  }\n}\n\nexport { DataCheckService };\n","import { Injectable } from '@angular/core';\nimport { FrameEventBus } from '@farris/devkit';\n\n/**\n * æ¡æ¶äºä»¶æå¡\n * @scope FormModule\n */\n@Injectable()\nclass EventService {\n\n  constructor(private eventBus: FrameEventBus) {\n  }\n\n  trigger(eventType: string, eventData?: any, frameIds?: string[]) {\n    this.eventBus.trigger(eventType, eventData, frameIds);\n  }\n}\n\nexport { EventService };\n","import { Injectable } from '@angular/core';\n// tslint:disable: no-unused-expression\n/**\n * èåç¶ææå¡\n * @scope FormModule\n */\n@Injectable()\nclass MenuStateService {\n    private readonly COMMAND_SERVICE_LINK_STORAGE_KEY = 'COMMAND_SERVICE_LINK_STORAGE_KEY';\n    private getState() {\n        const data = !!sessionStorage && sessionStorage.getItem(this.COMMAND_SERVICE_LINK_STORAGE_KEY) || null;\n        if (!!data) {\n            return JSON.parse(data);\n        }\n        return {};\n    }\n    private setState(links) {\n        !!sessionStorage && sessionStorage.setItem(this.COMMAND_SERVICE_LINK_STORAGE_KEY, JSON.stringify(links));\n    }\n    public addMenuState(parentMenuId: string, childMenuId: string, status: boolean = true) {\n        if (!childMenuId) {\n            return;\n        }\n        const state = this.getState();\n        const isParentExist = !!state && state.hasOwnProperty(parentMenuId);\n        const childItem = { id: childMenuId, status };\n        if (isParentExist) {\n            const parent = state[parentMenuId];\n            const isChildItemExist = parent.find(item => item.id === childMenuId);\n            if (!isChildItemExist) {\n                state[parentMenuId].push(childItem);\n            }\n        } else {\n            state[parentMenuId] = [childItem];\n        }\n        this.setState(state);\n    }\n    public getMenuState(parentMenuId: string, childMenuId?: string) {\n        const state = this.getState();\n        if (state === null) {\n            return null;\n        }\n        const isParentExist = state.hasOwnProperty(parentMenuId);\n        if (!isParentExist) {\n            return null;\n        }\n        const parentMenu = state[parentMenuId];\n        const childMenu = parentMenu.filter(item => item.status === true);\n        if (typeof childMenuId === 'undefined' || childMenuId.length < 1) {\n            return childMenu;\n        }\n        return parentMenu.filter(item => item.status && item.id === childMenuId);\n    }\n    public updateMenuState(childMenuId: string, status: boolean) {\n        const state = this.getState();\n        if (state === null) {\n            return;\n        }\n        Object.keys(state).forEach(key => {\n            const childMenu = state[key].find(item => item.id === childMenuId);\n            if (!!childMenu) {\n                childMenu.status = status;\n            }\n        });\n        this.setState(state);\n    }\n    public removeMenu(menuId: string) {\n        this.removeParentMenu(menuId);\n        this.removeChildMenu(menuId);\n    }\n    private removeParentMenu(menuId: string) {\n        const state = this.getState();\n        if (state === null) {\n            return null;\n        }\n        Object.keys(state).forEach(item => {\n            if (item === menuId && state[menuId].length < 1) {\n                delete state[item];\n            }\n        });\n        this.setState(state);\n    }\n    private removeChildMenu(menuId: string) {\n        const state = this.getState();\n        if (state === null) {\n            return;\n        }\n        Object.keys(state).forEach(parentMenuId => {\n            const childMenus = state[parentMenuId];\n            if (childMenus && childMenus.length > 0) {\n                childMenus.forEach((child, index) => {\n                    if (child.id === menuId) {\n                        childMenus.splice(index, 1);\n                    }\n                });\n            }\n        });\n        this.setState(state);\n    }\n}\n\nexport { MenuStateService };\n","/*\n * @Author: Witt\n * @Date: 2018-11-15 15:56:11\n * @Last Modified by: aalizzwell\n * @Last Modified time: 2019-07-09 16:23:04\n */\n\nimport { Injectable, Optional } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { RouterParamService } from '@farris/devkit';\nimport { FrameworkService, AppService } from '@gsp-sys/rtf-common';\nimport { MenuStateService } from './menu-state.service';\nimport { Subject } from 'rxjs';\nimport { LanguageService } from './languag.service';\n\n// tslint:disable: no-string-literal\n/**\n * è·¯ç±æå¡\n * @scope FormModule\n */\n@Injectable()\nclass RouterService {\n  /**\n   * ä¸æ¬¡åæ¢çTabId\n   */\n  private lastSwitchId: string = null;\n  /**\n   * ä¸æ¬¡å³é­çTabId\n   */\n  private lastCloseId: string = null;\n  // private menuStateService: MenuStateService = null;\n  public onClosed: Subject<any> = null;\n  constructor(\n    private router: Router,\n    private routerParamService: RouterParamService,\n    private frameworkService: FrameworkService,\n    @Optional() private appService: AppService,\n    @Optional() private menuStateService: MenuStateService,\n    @Optional() private languageService: LanguageService,\n  ) {\n    if (!this.menuStateService) {\n      this.menuStateService = new MenuStateService();\n    }\n    if (!this.languageService) {\n      this.languageService = LanguageService.getInstance();\n    }\n    this.onClosed = new Subject<any>();\n    this.registerEvent();\n  }\n\n  /**\n   * åæ¢è·¯ç±\n   * @param url èåID\n   * @param params è·¯ç±åæ°\n   */\n  public route(url: string, params: any) {\n    url = this.router.createUrlTree([url]).toString();\n    this.setParams(url, params);\n    this.router.navigateByUrl(url);\n  }\n  /**\n   * æ³¨åè¿è¡æ¡æ¶äºä»¶\n   */\n  public registerEvent() {\n    const params: any = this.getParams(window.location.hash);\n    const menuId = this.getAppId() || this.getFuncId();\n    this.frameworkService.eventListner(this.frameworkService.FuncSwitch, e => {\n      if (!e) {\n        return;\n      }\n      const id = this.getOriginalId(e.id) || e.tabId;\n      const menuState = this.menuStateService.getMenuState(id);\n      if (!!id && menuId === id && !!menuState && menuState.length > 0) {\n        this.formReload();\n        this.lastSwitchId = id;\n      }\n    }, params);\n\n    this.frameworkService.eventListner(this.frameworkService.FuncClosed, e => {\n      if (!e) {\n        return;\n      }\n      this.onClosed.next(e);\n      const id = this.getOriginalId(e.id) || e.tabId;\n      if (menuId === id) {\n        return;\n      }\n      const menuState = this.menuStateService.getMenuState(menuId, id);\n      // && id !== this.lastCloseId\n      if (!!id && !!menuState && menuState.length > 0) {\n        this.removeMenuState(id);\n        this.formReload();\n        this.lastCloseId = id;\n      }\n    }, params);\n  }\n\n  private removeMenuState(tabId: string) {\n    if (this['context']) {\n      this.menuStateService.removeMenu(tabId);\n    }\n  }\n  /**\n   * è·ååå§åè½id\n   * @param id id\n   */\n  private getOriginalId(id: string) {\n    if (!id) {\n      return id;\n    }\n    if (id.indexOf('_') !== -1) {\n      id = id.split('_')[0];\n    }\n    return id;\n  }\n  /**\n   * å·æ°ç»ä»¶æ°æ®\n   */\n  private formReload() {\n    try {\n      this['context']['frameContext']['appContext']['refresh']();\n    } catch{ }\n  }\n  /**\n   * æå¼åè½èå\n   * @param funcId èååç \n   * @param params è·¯ç±åæ°ï¼å½¢å¦ï¼ { key1: val1, key2: value2 }\n   */\n  public openMenu(funcId: string, params: any, reload?: boolean) {\n    if (typeof reload === 'undefined' || typeof reload !== 'boolean') {\n      reload = false;\n    }\n    const paramsMap = this.buildParamMap(params);\n    const parentMenuId = this.getFuncId() || this.getAppId();\n    this.menuStateService.addMenuState(parentMenuId, funcId);\n    paramsMap.set('WEB_FORM_ROUTER_PARENT_ID', parentMenuId);\n    this.frameworkService.openFuncWithParam(funcId, paramsMap, reload);\n  }\n\n  /**\n   * æå¼åºç¨\n   * @param appId åºç¨åç \n   * @param appEntrance åºç¨å¥å£\n   * @param params è·¯ç±åæ°ï¼å½¢å¦ï¼ { key1: val1, key2: value2 }\n   */\n  public openApp(appId: string, appEntrance: string, params: any, reload?: boolean) {\n    if (typeof reload === 'undefined' || typeof reload !== 'boolean') {\n      reload = false;\n    }\n    const paramMap = this.buildParamMap(params);\n    const parentMenuId = this.getAppId() || this.getFuncId();\n    this.menuStateService.addMenuState(parentMenuId, appId);\n    paramMap.set('WEB_FORM_ROUTER_PARENT_ID', parentMenuId);\n    if (!!this.appService) {\n      this.appService.openApp(appId, appEntrance, paramMap, reload);\n    }\n  }\n\n  /**\n   * æé åæ°\n   */\n  private buildParamMap(params: any): Map<string, string> {\n    if (typeof params === 'undefined' || params === null || (typeof params === 'string' && params.length < 1)) {\n      params = {};\n    }\n    const paramMap = new Map<string, any>();\n    if (typeof params === 'object') {\n      params = JSON.stringify(params);\n    }\n    params = window['encodeURIComponent'](params);\n    paramMap.set('WEB_FORM_ROUTE_PARAMS', params);\n    return paramMap;\n  }\n\n  /**\n   * å³é­åè½èå\n   */\n  public closeMenu() {\n    const funcId: string | null = this.getFuncId();\n    const appId: string | null = this.getAppId();\n    const { isDialogComponent, rootComponent } = this.findDialog();\n    if (isDialogComponent) {\n      const modalRef = this.get(rootComponent, 'dialogRef');\n      modalRef['close']();\n      return;\n    }\n\n    if (funcId !== null && typeof funcId === 'string' && funcId.length > 0) {\n      this.closeFunc(funcId);\n    } else if (appId !== null && typeof appId === 'string' && appId.length > 0) {\n      const appEntrance = this.getAppEntrance();\n      this.closeApp(appId, appEntrance);\n    } else {\n      console.error(this.languageService['notSupportMenuType']);\n    }\n  }\n\n  /**\n   * æ¥æ¾å¼¹çªç»ä»¶\n   */\n  private findDialog() {\n    let frameContext = this.get(this, 'context.frameContext');\n    let isDialogComponent = this.get(frameContext, 'frameComponent.isDialogRootComponent', false);\n\n    let parentFrameContext = this.get(frameContext, 'parent');\n    while (parentFrameContext != null && !isDialogComponent) {\n      frameContext = this.get(frameContext, 'parent');\n      parentFrameContext = this.get(parentFrameContext, 'parent');\n      isDialogComponent = this.get(frameContext, 'frameComponent.isDialogRootComponent', false);\n    }\n    const rootComponent = this.get(frameContext, 'frameComponent');\n    return { isDialogComponent, rootComponent };\n\n  }\n\n  /**\n   * loadsh get\n   * @param object å¯¹è±¡\n   * @param path è·¯å¾\n   * @param defaultVal é»è®¤å¼\n   */\n  private get(object: any, path: Array<string> | string, defaultVal: any = null) {\n    const PATH = Array.isArray(path)\n      ? path\n      : path.split('.').filter(i => i.length);\n    if (!PATH.length) {\n      return object === undefined ? defaultVal : object;\n    }\n\n    if (object === null || object === undefined || typeof (object[PATH[0]]) === 'undefined') {\n      return defaultVal;\n    }\n\n    return this.get(object[PATH.shift()], PATH, defaultVal);\n  }\n\n  /**\n   * å³é­èå\n   * @param funcId èåid\n   */\n  public closeFunc(funcId?: string) {\n    if (!funcId) {\n      funcId = this.getFuncId();\n    }\n    if (!!this.frameworkService) {\n      this.frameworkService.closeFunc(funcId).subscribe();\n    }\n  }\n\n  /**\n   * å³é­app\n   * @param appId åºç¨id\n   */\n  public closeApp(appId?: string, appEntrance?: string) {\n    if (!appId) {\n      appId = this.getAppId();\n    }\n    if (typeof appEntrance === 'undefined') {\n      appEntrance = this.getAppEntrance();\n    }\n    if (!!this.appService) {\n      this.appService.closeApp(appId, appEntrance).subscribe();\n    }\n  }\n\n  /**\n   * è®¾ç½®åæ°\n   * @param params è·¯ç±åæ°\n   */\n  private setParams(url: string, params: string | { [key: string]: any; }) {\n    let paramsObj;\n    if (typeof params === 'string' && params !== '') {\n      paramsObj = JSON.parse(params);\n    } else {\n      paramsObj = params || {};\n    }\n\n    // è®¾ç½®è·¯ç±åæ°\n    this.routerParamService.setParams(url, paramsObj);\n  }\n\n  /**\n   * è·åfuncId\n   */\n  private getFuncId() {\n    const hash = window.location.hash;\n    if (!hash) {\n      return null;\n    }\n    const params = this.decodeURLParams(hash);\n    if (params && params.hasOwnProperty('funcId')) {\n      return params.funcId;\n    } else {\n      return null;\n    }\n  }\n\n  /**\n   * è·åappId\n   */\n  private getAppId() {\n    const hash = window.location.hash;\n    if (!hash) {\n      return null;\n    }\n    const params = this.decodeURLParams(hash);\n    if (params && params.hasOwnProperty('appId')) {\n      return params.appId;\n    } else {\n      return null;\n    }\n  }\n\n  private getParentMenuId() {\n    const hash = window.location.hash;\n    if (!hash) {\n      return null;\n    }\n    const params = this.decodeURLParams(hash);\n    if (params && params.hasOwnProperty('WEB_FORM_ROUTER_PARENT_ID')) {\n      return params.WEB_FORM_ROUTER_PARENT_ID;\n    } else {\n      return null;\n    }\n  }\n  /**\n   * è·ååºç¨å¥å£\n   */\n  private getAppEntrance() {\n    const hash = window.location.hash;\n    if (!hash) {\n      return null;\n    }\n    const params = this.decodeURLParams(hash);\n    if (params && params.hasOwnProperty('appEntrance')) {\n      return params.appEntrance;\n    } else {\n      return null;\n    }\n  }\n  /**\n   * è§£ç åæ°\n   * @param query search|hash\n   */\n  private decodeURLParams(query: string): { [propName: string]: any } {\n    if (typeof query === 'undefined') {\n      query = window.location.hash || window.location.search;\n    }\n    const hashes = query.slice(query.indexOf('?') + 1).split('&');\n    return hashes.reduce((params, hash) => {\n      const split = hash.indexOf('=');\n      const key = hash.slice(0, split);\n      const val = hash.slice(split + 1);\n      return Object.assign(params, { [key]: decodeURIComponent(val) });\n    }, {});\n  }\n  private getParams(queryString: string): { [propName: string]: any } {\n    if (!queryString) {\n      return {};\n    }\n    const hashes = queryString.slice(queryString.indexOf('?') + 1).split('&');\n    return hashes.reduce((params, hash) => {\n      const split = hash.indexOf('=');\n      const key = hash.slice(0, split);\n      const val = hash.slice(split + 1);\n      return Object.assign(params, { [key]: decodeURIComponent(val) });\n    }, {});\n  }\n}\n\nexport { RouterService };\n","import { RequestInfo } from '@farris/bef';\n// tslint:disable: unified-signatures\nexport const TAB_EVENT = {\n    /**\n     * Tabå³é­å\n     */\n    onTabClosed: 'FuncClosed',\n    /**\n     * Tabå³é­å\n     */\n    onTabClosing: 'beforeFuncCloseEvent',\n    /**\n     * Tabåæ¢\n     */\n    onTabSwitched: 'funcSwitchEvent'\n};\n\nexport const TAB_QUERY_STRING = {\n    TabId: 'tabId',\n    AppType: 'appType',\n    AppId: 'appId',\n    AppEntrance: 'appEntrance',\n    FuncId: 'funcId'\n};\n\n/**\n * å¸¦RequestInfoçbodyå¯¹è±¡\n */\nexport interface BodyWithRequestInfo {\n    requestInfo: RequestInfo;\n    [key: string]: any;\n}\n\nexport const WEB_FORM_ROUTE_PARAMS_KEY = 'WEB_FORM_ROUTE_PARAMS';\nexport const enum DataType{\n  map = '[object Map]'\n}\nexport type KeyObject<T = any> = { key: T };","import { Injectable } from '@angular/core';\n\n/**\n * æ¥è¯¢åæ°æå¡\n * @scope FormModule\n */\n@Injectable()\nexport class QuerystringService {\n    /**\n     * è§£ç åæ°\n     * @param queryString search|hash\n     */\n    public parse(queryString: string): { [propName: string]: any } {\n        if (!queryString) {\n            return {};\n        }\n        const hashes = queryString.slice(queryString.indexOf('?') + 1).split('&');\n        return hashes.reduce((params, hash) => {\n            const split = hash.indexOf('=');\n            const key = hash.slice(0, split);\n            const val = hash.slice(split + 1);\n            return Object.assign(params, { [key]: decodeURIComponent(val) });\n        }, {});\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { EMPTY, Observable, Subject } from 'rxjs';\nimport { UID } from '@farris/devkit';\nimport { switchMap } from 'rxjs/operators';\n/*\n * @Author: aalizzwell \n * @Date: 2019-07-23 15:56:11 \n * @Last Modified by: aalizzwell\n * @Last Modified time: 2019-11-27 15:31:36\n */\n\n\n/**\n * RuntimeFrameworkService\n * @scope @FormModule\n */\n// tslint:disable: no-string-literal disable: max-line-length\n@Injectable()\nexport class RuntimeFrameworkService {\n  private rtfService: any;\n  constructor() {\n    this.rtfService = this.getService();\n  }\n  /**\n   * éåè·årtfæå¡\n   */\n  private getService() {\n    let env: Window = window;\n    while (!env['gspframeworkService'] && env !== window.top && this.isSameOrigin(env)) {\n      env = env.parent;\n    }\n    return env['gspframeworkService'] && env['gspframeworkService']['rtf'] || {};\n  }\n  // #region å¯¼èªæå¡\n  /**\n   * æå¼èåæåºç¨\n   * @param options options\n   */\n  openMenu(options: any) {\n    if (this.rtfService && this.rtfService.hasOwnProperty('func') && typeof this.rtfService['func']['openMenu'] === 'function') {\n      this.rtfService.func.openMenu(options);\n    }\n  }\n  /**\n   * æå¼èåæåºç¨\n   * @param options options\n   */\n  openMenu$(options: any) {\n    if (this.rtfService && this.rtfService.hasOwnProperty('func') && typeof this.rtfService['func']['openMenuByStream'] === 'function') {\n      return this.rtfService.func.openMenuByStream(options);\n    }\n    return EMPTY;\n  }\n  /**\n   * è·åå¯¼èªå®ä½æ°æ®\n   * @param tabId tabid\n   * @param callback callback\n   * @param once once\n   */\n  getEntityParam(tabId: string, callback: any, once: boolean = true) {\n    if (this.rtfService && this.rtfService.hasOwnProperty('func') && typeof this.rtfService['func']['getEntityParam'] === 'function') {\n      this.rtfService.func.getEntityParam(tabId, callback, once);\n    }\n  }\n  /**\n   * å°è¯å³é­èåæåºç¨\n   * @param options optins\n   */\n  beforeCloseMenu(options: any) {\n    if (this.rtfService && this.rtfService.hasOwnProperty('func') && typeof this.rtfService['func']['beforeClose'] === 'function') {\n      this.rtfService.func.beforeClose(options);\n    }\n  }\n  /**\n   * å³é­èå\n   * @param options options\n   */\n  closeMenu(options: any) {\n    if (this.rtfService && this.rtfService.hasOwnProperty('func') && typeof this.rtfService['func']['close'] === 'function') {\n      this.rtfService.func.close(options);\n    }\n  }\n  /**\n   * è·åèåéæåæ°\n   * @param funcId èåid\n   * @param callback åè°\n   */\n  getMenuParams(funcId: string, callback: (params) => void) {\n    if (this.rtfService && this.rtfService.hasOwnProperty('func') && typeof this.rtfService['func']['getMenuParams'] === 'function') {\n      this.rtfService.func.getMenuParams(funcId, callback);\n    }\n  }\n  /**\n   * æ·»å äºä»¶çå¬\n   */\n  addEventListener(token: string, handler: (value: any) => void, options: any) {\n    if (this.rtfService && this.rtfService.hasOwnProperty('frmEvent') && typeof this.rtfService['frmEvent']['eventListener'] === 'function') {\n      this.rtfService.frmEvent.eventListener(token, handler, options);\n    }\n  }\n  /**\n   * è·åè¿è¡æ¡æ¶èååæ¢æ§å¶äºä»¶\n   * @returns Observable<any>\n   */\n  public getMenuSwitchControlEvent(): Observable<any> {\n    const subject = new Subject<any>();\n    const frmEvent = this.rtfService && this.rtfService.frmEvent || null;\n    if (frmEvent) {\n      const tabId = this.tabId;\n      const options = this.params;\n      window.setTimeout(() => {\n        frmEvent.eventListener(tabId, (response: { menuSwitchControl: { key: any, value: any }, [prop: string]: any }) => {\n          const menuSwitchControl = response && response.menuSwitchControl || null;\n          if (menuSwitchControl && menuSwitchControl.key === tabId) {\n            subject.next(menuSwitchControl.value);\n          } else {\n            subject.next(null);\n          }\n        }, options);\n      }, 0);\n    }\n    return subject;\n  }\n  //#endregion\n\n  // #region ééå±å±æ§\n  public get params() {\n    if (this.rtfService && this.rtfService.hasOwnProperty('session') && typeof this.rtfService['session']['getCommonVariable'] === 'function') {\n      return this.rtfService['session']['getCommonVariable']();\n    }\n    return null;\n  }\n  /**\n   * è·åtabId\n   */\n  public get tabId() {\n    return this.params && this.params['tabId'] || null;\n  }\n  /**\n   * è·åformToken\n   */\n  public get formToken() {\n    return this.params && this.params['formToken'] || null;\n  }\n  /**\n   * è·åfuncId\n   */\n  public get funcId() {\n    return this.params && this.params['funcId'] || null;\n  }\n  // #endregion\n\n  // #region äºä»¶éä¿¡\n  /**\n   * æ³¨åä¸»é¢\n   * @param code ä¸»é¢çæ è¯\n   * @param options tokençæè§å\n   * @param subject èªå®ä¹ä¸»é¢ï¼é»è®¤ä½¿ç¨Subject\n   * @returns string æ³¨åæååè¿åä¸»é¢çå¯ä¸æ è¯\n   */\n  public subjectRegister(code: string, options: any, subject?: Subject<any>): string {\n    if (this.rtfService && this.rtfService.hasOwnProperty('broadcast') && typeof this.rtfService['broadcast']['subjectRegister'] === 'function') {\n      return this.rtfService.broadcast.subjectRegister(code, options, subject);\n    }\n    return null;\n  }\n  /**\n   * ç§»é¤ä¸»é¢\n   * @param token ä¸»é¢å¯ä¸æ è¯\n   */\n  public subjectRemove(token: string) {\n    if (this.rtfService && this.rtfService.hasOwnProperty('broadcast') && typeof this.rtfService['broadcast']['subjectRemove'] === 'function') {\n      this.rtfService.broadcast.subjectRemove(token);\n    }\n  }\n  /**\n   * ç»ä¸»é¢åéæ¶æ¯\n   * @param token ä¸»é¢æ è¯\n   * @param info æ¶æ¯\n   */\n  public subjectNotify(token: string, info: any) {\n    if (this.rtfService && this.rtfService.hasOwnProperty('broadcast') && typeof this.rtfService['broadcast']['notify'] === 'function') {\n      this.rtfService.broadcast.notify(token, info);\n    }\n  }\n  /**\n   * æ³¨åä¸»é¢çå¬å¨\n   * @param token ä¸»é¢æ è¯\n   * @param handler ä¸»é¢å¤çå¨\n   * @param observerToken çå¬å¨id(å¯é)\n   * @returns çå¬å¨Id\n   * @description çå¬ä¸»é¢æ¶æ¯ï¼çå¬æåè¿åå½åçå¬èçå¯ä¸æ è¯\n   */\n  public subjectResponse(token: string, handler: (data: any) => void, observerToken?: string): string {\n    if (this.rtfService && this.rtfService.hasOwnProperty('broadcast') && typeof this.rtfService['broadcast']['response'] === 'function') {\n      let code = observerToken;\n      if (typeof observerToken === 'undefined' || !observerToken || observerToken.length < 1) {\n        code = UID.create();\n      }\n      this.rtfService.broadcast.response(token, code, handler);\n      return code;\n    }\n    return null;\n  }\n  /**\n   * åæ¶å¯¹ä¸»é¢ççå¬\n   * @param token ä¸»é¢æ è¯\n   * @param observerToken çå¬å¨æ è¯\n   */\n  public responseUnSubscribe(token: string, observerToken: string) {\n    if (this.rtfService && this.rtfService.hasOwnProperty('broadcast') && typeof this.rtfService['broadcast']['responseUnSubscribe'] === 'function') {\n      this.rtfService.broadcast.responseUnSubscribe(token, observerToken);\n    }\n  }\n  // #endregion\n\n  // #region å·¥å·å½æ°\n  /**\n   * æ¯å¦åæº\n   * @param environment window\n   */\n  private isSameOrigin(environment: Window) {\n    const host = window.location.host;\n    try {\n      if (environment && environment.location && typeof environment.location.host !== 'undefined') {\n        return environment.location.host === host;\n      }\n    } catch (e) {\n      return false;\n    }\n\n    return false;\n  }\n  // #endregion\n}\n","import { Injectable, Optional } from '@angular/core';\nimport { Observable, of, from, EMPTY } from 'rxjs';\nimport { every, concatMap, switchMap, take, tap } from 'rxjs/operators';\nimport { AppOptions } from '@gsp-sys/rtf-common';\nimport { RuntimeFrameworkService } from './rtf-service';\nimport { MenuStateService } from './menu-state.service';\nimport { TAB_EVENT } from './types';\nimport { QuerystringService } from './querystring';\nimport { FrameContext, UID } from '@farris/devkit';\n\n/**\n * å¯¼èªäºä»¶æå¡\n * @scope FormModule\n */\n@Injectable()\nexport class NavigationEventService {\n  public frameContext: FrameContext;\n  /**\n   * å³é­åäºä»¶å¤çå¨\n   */\n  private onClosedListeners: Map<string, (options?: AppOptions) => void>;\n  /**\n   * å³é­åå¤çå¨\n   */\n  private onClosingListeners: Map<string, (options?: AppOptions) => Observable<boolean>>;\n  private onTabSwitchListeners: Map<string, (options?: AppOptions) => void>;\n  private params: { [propName: string]: any };\n\n  constructor(\n    private runtimeFrameworkService: RuntimeFrameworkService,\n    private menuStateService: MenuStateService,\n    private querystringService: QuerystringService\n  ) {\n    this.onClosedListeners = new Map<string, (options?: AppOptions) => void>();\n    this.onClosingListeners = new Map<string, (options?: AppOptions) => Observable<boolean>>();\n    this.onTabSwitchListeners = new Map<string, (options?: AppOptions) => void>();\n  }\n  private get querystrings() {\n    const params = this.querystringService.parse(window.location.hash);\n    // ä¿®æ­£formToken\n    if (params) {\n      params.formToken = this.runtimeFrameworkService.formToken;\n    }\n    return params;\n  }\n  /**\n   * æ³¨åäºä»¶\n   */\n  public registerEvent() {\n    const options = this.querystrings;\n    this.params = options;\n    // æ³¨åæ ç­¾é¡µåæ¢äºä»¶\n    this.runtimeFrameworkService.addEventListener(TAB_EVENT.onTabSwitched, (e) => this.handleTabSwitchEvent(e), options);\n    // æ³¨åæ ç­¾é¡µå³é­åäºä»¶\n    this.runtimeFrameworkService.addEventListener(TAB_EVENT.onTabClosed, (e) => this.handleTabClosedEvent(e), options);\n    // æ³¨åæ ç­¾é¡µå³é­åäºä»¶\n    this.runtimeFrameworkService.addEventListener(TAB_EVENT.onTabClosing, (e) => this.handleTabClosingEvent(e), options);\n  }\n  /**\n   * å¤çæ ç­¾é¡µåæ¢äºä»¶\n   */\n  private handleTabSwitchEvent(e: any) {\n    if (!e) {\n      return;\n    }\n    // éä¸­çè¡¨åä¸ºç³»ç»è¡¨åï¼åªè½è¿åidï¼æ²¡ætabId\n    const eventTabId = e.tabId || e.id || null;\n    if (!eventTabId) {\n      return;\n    }\n    const options = this.params; // this.querystrings;\n    const tabId = options.tabId || options.funcId || options.appId;\n    const menuState = this.menuStateService.getMenuState(eventTabId);\n    if (!!tabId && tabId === eventTabId && !!menuState && menuState.length > 0) {\n      this.formReload();\n    }\n    this.fireTabSwitchEvent(e);\n  }\n  /**\n   * è§¦åtabåæ¢äºä»¶\n   * @param e e\n   */\n  private fireTabSwitchEvent(e: any) {\n    if (!this.onTabSwitchListeners || this.onTabSwitchListeners.size < 1) {\n      return;\n    }\n    this.onTabSwitchListeners.forEach((handle, key, map) => {\n      if (typeof handle === 'function') {\n        handle(e);\n      }\n    });\n  }\n  /**\n   * æ ç­¾é¡µå³é­åäºä»¶\n   */\n  private handleTabClosingEvent(e: any) {\n    if (!e) {\n      return;\n    }\n    // è¦å³é­çè¡¨åä¸ºç³»ç»è¡¨åï¼åªè½è¿åidï¼æ²¡ætabId\n    const eventTabId = e.tabId || e.id || null;\n    const options = this.params; // this.querystrings;\n    const tabId = options.tabId || options.funcId || options.appId;\n    if (!!eventTabId && !!tabId && tabId === eventTabId) {\n      this.fireTabClosingEvent(e).subscribe(result => {\n        if (result) {\n          setTimeout(() => this.removeMenuState(eventTabId), 500);\n          const formEventServices: Map<string, any> = window['formEventServices'];\n          if (formEventServices.has(eventTabId)) {\n            formEventServices.delete(eventTabId);\n            window['formEventServices'] = formEventServices;\n          }\n          if (!(e && e.hasOwnProperty('token'))) {\n            e = Object.assign({}, e, { token: options.formToken });\n          }\n          if (this.frameContext && this.frameContext.appContext) {\n            this.frameContext.appContext.dispose();\n          }\n          this.runtimeFrameworkService.closeMenu(e);\n        }\n      });\n    }\n  }\n  /**\n   * è§¦åå³é­åäºä»¶\n   */\n  private fireTabClosingEvent(e: any): Observable<boolean> {\n    if (!this.onClosingListeners || this.onClosingListeners.size < 1) {\n      return of(true);\n    }\n    const listeners = this.onClosingListeners.values();\n    const result$ = from(listeners);\n    // ç¨æ·æç»\n    let userRejected = false;\n    return result$.pipe(\n      concatMap(handle => {\n        if (userRejected) {\n          return EMPTY;\n        }\n        return handle(e).pipe(\n          take(1),\n          tap(result => userRejected = !result),\n          switchMap(result => of(result))\n        );\n      }),\n      every(result => result)\n    );\n  }\n  /**\n   * æ ç­¾é¡µå³é­åäºä»¶\n   */\n  private handleTabClosedEvent(e: any) {\n    if (!e) {\n      return;\n    }\n    const options = this.params; // this.querystrings;\n    const tabId = options.tabId || options.funcId || options.appId;\n    const eventTabId = e.tabId || e.id || null;\n    if (tabId === eventTabId) {\n      return;\n    }\n    const menuState = this.menuStateService.getMenuState(tabId, eventTabId);\n    if (!!eventTabId && !!menuState && menuState.length > 0) {\n      this.removeMenuState(eventTabId);\n      this.formReload();\n    }\n    this.fireTabClosedEvent(e);\n  }\n  private removeMenuState(tabId: string) {\n    if (this['context']) {\n      this.menuStateService.removeMenu(tabId);\n    }\n  }\n  /**\n   * è§¦åå³é­åäºä»¶\n   * @param e event\n   */\n  private fireTabClosedEvent(e: any) {\n    if (!this.onClosedListeners || this.onClosedListeners.size < 1) {\n      return;\n    }\n    this.onClosedListeners.forEach((handle, key, map) => {\n      if (typeof handle === 'function') {\n        handle(e);\n      }\n    });\n  }\n  // #endregion\n  /**\n   * æ³¨åäºä»¶çå¬å¨\n   * @param eventType äºä»¶ç±»å onTabClosed\n   * @param handler å¤çå¨\n   */\n  public addEventListener(eventType: string, handler: (options: AppOptions) => any): string {\n    const key = UID.create();\n    if (eventType === TAB_EVENT.onTabClosed) {\n      this.onClosedListeners.set(key, handler);\n      return key;\n    } else if (eventType === TAB_EVENT.onTabClosing) {\n      this.onClosingListeners.set(key, handler);\n      return key;\n    } else if (eventType === TAB_EVENT.onTabSwitched) {\n      this.onTabSwitchListeners.set(key, handler);\n      return key;\n    }\n    return null;\n  }\n  /**\n   * ç§»é¤äºä»¶çå¬å¨\n   * @param eventType äºä»¶ç±»å\n   * @param key äºä»¶æ è¯\n   */\n  public removeEventListener(eventType: string, key: string) {\n    if (eventType === TAB_EVENT.onTabClosed) {\n      return this.onClosedListeners.delete(key);\n    } else if (eventType === TAB_EVENT.onTabClosing) {\n      return this.onClosingListeners.delete(key);\n    }\n    return false;\n  }\n  /**\n   * æ¸ç©ºäºä»¶çå¬å¨\n   * @param eventType äºä»¶ç±»å\n   */\n  public clearEventListener(eventType: string): void {\n    if (eventType === TAB_EVENT.onTabClosed) {\n      this.onClosedListeners.clear();\n    } else if (eventType === TAB_EVENT.onTabClosing) {\n      this.onClosingListeners.clear();\n    }\n  }\n  /**\n   * å·æ°ç»ä»¶æ°æ®\n   */\n  private formReload() {\n    try {\n      // tslint:disable-next-line: no-string-literal\n      this['context']['frameContext']['appContext']['refresh']();\n    } catch { }\n  }\n}\n","import { Injectable, InjectionToken, Inject, Optional } from '@angular/core';\nexport const FARRIS_FORM_COMPONENTS = new InjectionToken<{[key: string]: any}>('è¡¨åå¼¹åºçªå£æéèç»ä»¶åè¡¨');\n\n/**\n * è¡¨åæå¡\n * @scope FormModule\n */\n@Injectable()\nexport class FarrisFormService {\n\n    private controls: { [key: string]: any} = {};\n\n    constructor(@Optional()@Inject(FARRIS_FORM_COMPONENTS) initCtrls: any = {}) {\n      if (!initCtrls) {\n        initCtrls = {};\n      }\n      this.controls = { ...initCtrls };\n    }\n\n    append(key: string, cmpIns: any) {\n        this.controls[key] = cmpIns;\n    }\n\n    getControls(key: string) {\n        if (this.controls[key]) {\n            return this.controls[key];\n        } else {\n            console.warn(`æªæ¾å°Keyä¸º${key}çç»ä»¶ï¼`);\n            return null;\n        }\n    }\n\n}\n","/*\n * @Author: aalizzwell\n * @Date: 2019-08-02 15:31:34\n * @Last Modified by: aalizzwell\n * @Last Modified time: 2020-03-03 09:33:43\n */\nimport { Injectable, Optional, Injector, ComponentFactoryResolver, ReflectiveInjector } from '@angular/core';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { RuntimeFrameworkService } from './rtf-service';\nimport { AppOptions, AppType } from '@gsp-sys/rtf-common';\nimport { MenuStateService } from './menu-state.service';\nimport { NavigationEventService } from './navigation-event.service';\nimport { QuerystringService } from './querystring';\nimport { FrameContext, TranslateToken, Translate, FrameComponent } from '@farris/devkit';\nimport { FEPageModalService } from '@farris/extend-page-modal';\nimport lodash from 'lodash-es';\nimport { FarrisFormService } from './farris-form.service';\nimport { LanguageService } from './languag.service';\nimport { map, switchMap } from 'rxjs/operators';\nimport { EMPTY, Observable, of } from 'rxjs';\nimport { FormNotifyService } from './form-notify.service';\ndeclare const System: any;\n// tslint:disable: no-string-literal max-line-length\nconst APP_CONTEXT_MANAGER = 'DEVKIT_APP_CONTEXT_MANAGER';\n/**\n * å¯¼èªæå¡\n * @scope FormModule\n */\n@Injectable()\nexport class NavigationService {\n  constructor(\n    private runtimeFrameworkService: RuntimeFrameworkService,\n    private menuStateService: MenuStateService,\n    private navigationEventService: NavigationEventService,\n    private querystringService: QuerystringService,\n    @Optional() private frameContext: FrameContext,\n    @Optional() private injector: Injector,\n    @Optional() private languageService: LanguageService\n    // @Optional() private pageModalService: FEPageModalService,\n    // @Optional() private farrisFormService: FarrisFormService,\n    // @Optional() private languageService: LanguageService\n  ) {\n    // appIdä¸åäºtabIdï¼æ¯æ¬¡è¡¨åå®ä¾åæ¶é½ä¼éæ°çæ\n    const appId = this.formAppContext && this.formAppContext.ApplicationId;\n    let tabId = this.querystrings.tabId || this.querystrings.funcId || this.querystrings.appId;\n    // å·²ç»ç¼è¯çè¡¨åï¼ä½¿ç¨appIdè®°å½hash\n    if (appId) {\n      const appContextManager = window[APP_CONTEXT_MANAGER] || new Map<string, any>();\n      if (appContextManager && !appContextManager.has(appId)) {\n        appContextManager.set(appId, { hash: window.location.hash });\n        window[APP_CONTEXT_MANAGER] = appContextManager;\n      }\n    }\n    if (tabId) {\n      const formEventServices: Map<string, any> = window['formEventServices'] || new Map<string, any>();\n      // tabIdãappIdé½å­å¨æ¶ï¼ä½¿ç¨appIdæ¿æ¢tabId\n      if (appId) {\n        tabId = appId;\n      }\n      if (formEventServices && formEventServices.has(tabId)) {\n        this.navigationEventService = formEventServices.get(tabId);\n      } else {\n        this.navigationEventService.registerEvent();\n        formEventServices.set(tabId, this.navigationEventService);\n        this.navigationEventService.frameContext = this.frameContext;\n        window['formEventServices'] = formEventServices;\n      }\n      this.registerDestroyEvent(tabId);\n    }\n    if (!languageService) {\n      this.languageService = new LanguageService();\n    }\n  }\n  public set context(context) {\n    this.navigationEventService['context'] = context;\n    this['commandContext'] = context;\n  }\n  /**\n   * è·åæ´ä¸ªè¡¨åçappcontextï¼é¤moduleä¸çappcontextï¼\n   */\n  private get formAppContext() {\n    if (this.frameContext) {\n      let appContext = this.frameContext.appContext;\n      // tslint:disable-next-line: max-line-length\n      while (appContext && appContext.parent && appContext.parent.injector && appContext.parent.injector.get(FrameContext, null) !== null) {\n        appContext = appContext.parent;\n      }\n      return appContext;\n    }\n    return null;\n  }\n  private get querystrings() {\n    let hash = window.location.hash;\n    const appId = this.formAppContext && this.formAppContext.ApplicationId;\n    if (appId) {\n      const appContextManager = window[APP_CONTEXT_MANAGER];\n      const appContext = appContextManager && appContextManager.get(appId);\n      hash = appContext && appContext.hash || hash;\n    }\n    const params = this.querystringService.parse(hash);\n    if (params) {\n      params.formToken = this.runtimeFrameworkService.formToken;\n    }\n    return params;\n  }\n  /**\n   * æç¤ºæå¡\n   */\n  private get formNotifyService() {\n    return this.injector && this.injector.get<FormNotifyService>(FormNotifyService, null);\n  }\n  /**\n   * æ³¨åéæ¯äºä»¶\n   * @param tabId \n   */\n  private registerDestroyEvent(tabId: string) {\n    if (this.frameContext && this.frameContext.destorySignal) {\n      this.frameContext.destorySignal.subscribe(() => {\n        this.navigationEventService = null;\n      });\n    }\n    if (this.frameContext && this.frameContext.appContext && this.frameContext.appContext.destorySignal) {\n      this.frameContext.appContext.destorySignal.subscribe(() => {\n        const formEventServices = window['formEventServices'] as Map<string, any>;\n        if (formEventServices) {\n          formEventServices.delete(tabId);\n        }\n        const appContextManager = window[APP_CONTEXT_MANAGER] as Map<string, any>;\n        if (appContextManager) {\n          appContextManager.delete(tabId);\n        }\n      });\n    }\n  }\n  // #region æ¥å£\n\n  /**\n   * æå¼èå\n   * @param tabId æ ¹æ®TabIdå³å®æå¼æ°æ ç­¾é¡µæå®ä½ä¹åæå¼çæ ç­¾é¡µ\n   * @param funcId èåId\n   * @param params åæ°\n   * @param reload æ¯å¦éæ°å·æ°\n   * @param enableRefresh å¯ç¨æ°æ®å·æ°\n   * @param tabName tabæ é¢\n   * @param destructuring æ¯å¦è§£æåæ°\n   */\n  public openMenu(tabId: string, funcId: string, params: any, reload?: boolean, enableRefresh?: any, tabName?: string, destructuring?: any) {\n    if (!funcId && this.formNotifyService) {\n      this.formNotifyService.warning(this.languageService.appOrFuncIdRequired, { hideTitle: true });\n      return EMPTY;\n    }\n    if (tabName) {\n      tabName = this.translate(tabName);\n    }\n\n    let queryStringParams = this.buildParamMap(params);\n    destructuring = this.convertToBoolean(destructuring, false);\n    if (destructuring === true) {\n      queryStringParams = this.buildParam(params);\n    }\n    const paramsMap = this.buildParamMap(params);\n    const currentTabId = this.querystrings.tabId || this.querystrings.funcId || this.querystrings.appId;\n    const options: AppOptions = {\n      tabId,\n      funcId,\n      appType: AppType.Menu,\n      queryStringParams: queryStringParams,\n      entityParams: paramsMap,\n      appId: undefined,\n      appEntrance: undefined,\n      isReload: reload,\n      tabName: tabName || null\n    };\n    // å¯ç¨æ°æ®å·æ°åæ°ä¸ºtrueæèæ²¡æå®ä¹ï¼åæå·æ°å¤ç\n    // æ²¡æä¼ éè¯¥åæ°æè¯¥åæ°ä¸ºç©ºï¼åè®¤ä¸ºæç§ä¹åçé»è¾å¤çï¼é»è®¤å·æ°\n    // null false \"false\" \"true\" undefined\n    enableRefresh = this.convertToBoolean(enableRefresh, true);\n    if (enableRefresh === true) {\n      this.menuStateService.addMenuState(currentTabId, tabId);\n    }\n    this.runtimeFrameworkService.openMenu(options);\n  }\n  /**\n   * æå¼èåï¼æµï¼\n   * @param tabId æ ¹æ®TabIdå³å®æå¼æ°æ ç­¾é¡µæå®ä½ä¹åæå¼çæ ç­¾é¡µ\n   * @param funcId èåId\n   * @param params åæ°\n   * @param reload æ¯å¦éæ°å·æ°\n   * @param enableRefresh å¯ç¨æ°æ®å·æ°\n   * @param destructuring è§£æåæ°\n   */\n  public openMenu$(tabId: string, funcId: string, params: any, reload?: boolean, enableRefresh?: any, tabName?: string, destructuring?: any) {\n    if (!funcId && this.formNotifyService) {\n      this.formNotifyService.warning(this.languageService.appOrFuncIdRequired, { hideTitle: true });\n      return EMPTY;\n    }\n    if (tabName) {\n      tabName = this.translate(tabName);\n    }\n    let queryStringParams = this.buildParamMap(params);\n    destructuring = this.convertToBoolean(destructuring, false);\n    if (destructuring === true) {\n      queryStringParams = this.buildParam(params);\n    }\n    const paramsMap = this.buildParamMap(params);\n    const currentTabId = this.querystrings.tabId || this.querystrings.funcId || this.querystrings.appId;\n    const options: AppOptions = {\n      tabId,\n      funcId,\n      appType: AppType.Menu,\n      queryStringParams: queryStringParams,\n      entityParams: paramsMap,\n      appId: undefined,\n      appEntrance: undefined,\n      isReload: reload,\n      tabName: tabName || null\n    };\n    // å¯ç¨æ°æ®å·æ°åæ°ä¸ºtrueæèæ²¡æå®ä¹ï¼åæå·æ°å¤ç\n    enableRefresh = this.convertToBoolean(enableRefresh, true);\n    if (enableRefresh === true) {\n      this.menuStateService.addMenuState(currentTabId, tabId);\n    }\n    return this.runtimeFrameworkService.openMenu$(options);\n  }\n  /**\n   * æå¼èå(å¸¦ç»´åº¦)\n   * @param tabId æ ¹æ®TabIdå³å®æå¼æ°æ ç­¾é¡µæå®ä½ä¹åæå¼çæ ç­¾é¡µ\n   * @param funcId èåId\n   * @param params åæ°\n   * @param reload æ¯å¦éæ°å·æ°\n   * @param enableRefresh å¯ç¨æ°æ®å·æ°\n   * @param dim1 dim1\n   * @param dim2 dim2\n   * @param destructuring è§£æåæ°\n   */\n  public openMenuWithDimension(tabId: string, funcId: string, params: any, enableRefresh?: any, dim1?: any, dim2?: any, tabName?: string, metadataId?: string, destructuring?: any) {\n    if (!funcId && this.formNotifyService) {\n      this.formNotifyService.warning(this.languageService.appOrFuncIdRequired, { hideTitle: true });\n      return EMPTY;\n    }\n    if (tabName) {\n      tabName = this.translate(tabName);\n    }\n    if (metadataId === undefined || metadataId === null) {\n      metadataId = '';\n    }\n    let queryStringParams = this.buildParamMap(params);\n    destructuring = this.convertToBoolean(destructuring, false);\n    if (destructuring === true) {\n      queryStringParams = this.buildParam(params);\n    }\n\n    const paramsMap = this.buildParamMap(params);\n    queryStringParams.set('dim1', dim1 ? dim1 : 'public');\n    queryStringParams.set('dim2', dim2 ? dim2 : 'public');\n    queryStringParams.set('metadataId', metadataId);\n    queryStringParams.set('isRtc', '1');\n    queryStringParams.set('isRootMetadata', 'true');\n    const currentTabId = this.querystrings.tabId || this.querystrings.funcId || this.querystrings.appId;\n    const options: AppOptions = {\n      tabId,\n      funcId,\n      appType: AppType.Menu,\n      queryStringParams: queryStringParams,\n      entityParams: paramsMap,\n      appId: undefined,\n      appEntrance: undefined,\n      isReload: false,\n      tabName: tabName || null\n    };\n    // å¯ç¨æ°æ®å·æ°åæ°ä¸ºtrueæèæ²¡æå®ä¹ï¼åæå·æ°å¤ç\n    // æ²¡æä¼ éè¯¥åæ°æè¯¥åæ°ä¸ºç©ºï¼åè®¤ä¸ºæç§ä¹åçé»è¾å¤çï¼é»è®¤å·æ°\n    // null false \"false\" \"true\" undefined\n    enableRefresh = this.convertToBoolean(enableRefresh, true);\n    if (enableRefresh === true) {\n      this.menuStateService.addMenuState(currentTabId, tabId);\n    }\n    this.runtimeFrameworkService.openMenu(options);\n  }\n  /**\n   * æå¼åºç¨\n   * @param tabId tabId æ ¹æ®TabIdå³å®æå¼æ°æ ç­¾é¡µæå®ä½ä¹åæå¼çæ ç­¾é¡µ\n   * @param appId åºç¨Id\n   * @param appEntrance åºç¨å¥å£\n   * @param params åæ°\n   * @param reload æ¯å¦éæ°å·æ°\n   * @param tabName tabæ é¢\n   * @param enableRefresh å¯ç¨æ°æ®å·æ°\n   * @param destructuring è§£æåæ°\n   */\n\n  public openApp(tabId: string, appId: string, appEntrance: string, params: any, reload?: boolean, tabName?: string, enableRefresh?: any, destructuring?: any) {\n    if (!appId && this.formNotifyService) {\n      this.formNotifyService.warning(this.languageService.appOrFuncIdRequired, { hideTitle: true });\n      return EMPTY;\n    }\n    if (tabName) {\n      tabName = this.translate(tabName);\n    }\n    let queryStringParams = this.buildParamMap(params);\n    destructuring = this.convertToBoolean(destructuring, false);\n    if (destructuring === true) {\n      queryStringParams = this.buildParam(params);\n    }\n    const paramsMap = this.buildParamMap(params);\n    const currentTabId = this.querystrings.tabId || this.querystrings.funcId || this.querystrings.appId;\n    const options: AppOptions = {\n      tabId,\n      appId,\n      appEntrance,\n      funcId: undefined,\n      appType: AppType.App,\n      queryStringParams: queryStringParams,\n      entityParams: paramsMap,\n      isReload: reload,\n      tabName: tabName || null\n    };\n    enableRefresh = this.convertToBoolean(enableRefresh, true);\n    if (enableRefresh === true) {\n      this.menuStateService.addMenuState(currentTabId, tabId);\n    }\n    this.runtimeFrameworkService.openMenu(options);\n  }\n  /**\n   * æå¼åºç¨(æµå¼)\n   * @param tabId tabId æ ¹æ®TabIdå³å®æå¼æ°æ ç­¾é¡µæå®ä½ä¹åæå¼çæ ç­¾é¡µ\n   * @param appId åºç¨Id\n   * @param appEntrance åºç¨å¥å£\n   * @param params åæ°\n   * @param reload æ¯å¦éæ°å·æ°\n   * @param tabName tabæ é¢\n   * @param enableRefresh å¯ç¨æ°æ®å·æ°\n   * @param destructuring è§£æåæ°\n   */\n  public openApp$(tabId: string, appId: string, appEntrance: string, params: any, reload?: boolean, tabName?: string, enableRefresh?: any, destructuring?: any) {\n    if (!appId && this.formNotifyService) {\n      this.formNotifyService.warning(this.languageService.appOrFuncIdRequired, { hideTitle: true });\n      return EMPTY;\n    }\n    if (tabName) {\n      tabName = this.translate(tabName);\n    }\n    let queryStringParams = this.buildParamMap(params);\n    destructuring = this.convertToBoolean(destructuring, false);\n    if (destructuring === true) {\n      queryStringParams = this.buildParam(params);\n    }\n    const paramsMap = this.buildParamMap(params);\n    const currentTabId = this.querystrings.tabId || this.querystrings.funcId || this.querystrings.appId;\n    const options: AppOptions = {\n      tabId,\n      appId,\n      appEntrance,\n      funcId: undefined,\n      appType: AppType.App,\n      queryStringParams: queryStringParams,\n      entityParams: paramsMap,\n      isReload: reload,\n      tabName: tabName || null\n    };\n    enableRefresh = this.convertToBoolean(enableRefresh, true);\n    if (enableRefresh === true) {\n      this.menuStateService.addMenuState(currentTabId, tabId);\n    }\n    return this.runtimeFrameworkService.openMenu$(options);\n  }\n  /**\n   * å³é­\n   * @param onCloseing å³é­åäºä»¶å¤çå¨\n   */\n  public close() {\n    const options = this.querystrings;\n    const { isDialogComponent: isInDialog, rootComponent } = this.findDialog();\n    if (isInDialog) {\n      const modalRef = this.get(rootComponent, 'dialogRef');\n      modalRef['close']();\n      return;\n    }\n    options.token = options.formToken;\n    this.runtimeFrameworkService.beforeCloseMenu(options);\n  }\n  /**\n   * å¼ºå¶å³é­\n   */\n  public destory() {\n    const options = this.querystrings;\n    options.token = options.formToken;\n    this.runtimeFrameworkService.closeMenu(options);\n  }\n  /**\n   * \n   * @param params params\n   * @deprecated å¾åºå¼ï¼ä¸buildParamMapéå¤\n   */\n  private parseParams(params: any) {\n    if (typeof params === 'undefined' || params === null || (typeof params === 'string' && params.length < 1)) {\n      params = {};\n    }\n    const paramMap = new Map<string, any>();\n    if (typeof params === 'object') {\n      params = JSON.stringify(params);\n    }\n    params = window['encodeURIComponent'](params);\n    paramMap.set('WEB_FORM_ROUTE_PARAMS', params);\n    return paramMap;\n  }\n  /**\n   * æ³¨åäºä»¶çå¬å¨\n   * @param eventType äºä»¶ç±»å onTabClosed\n   * @param handler å¤çå¨\n   * @returns string è¿åäºä»¶æ è¯\n   */\n  public addEventListener(eventType: string, handler: (options: AppOptions) => any): string {\n    return this.navigationEventService.addEventListener(eventType, handler);\n  }\n  /**\n   * ç§»é¤äºä»¶çå¬å¨\n   * @param eventType äºä»¶ç±»å onTabClosed | onTabCloseing\n   * @param key äºä»¶æ è¯\n   */\n  public removeEventListener(eventType: string, key: string): boolean {\n    return this.navigationEventService.removeEventListener(eventType, key);\n  }\n  /**\n   * æ¸ç©ºäºä»¶çå¬å¨\n   * @param eventType äºä»¶ç±»å\n   */\n  public clearEventListener(eventType: string): void {\n    this.navigationEventService.clearEventListener(eventType);\n  }\n  /**\n   * ä»¥å¼¹æ¡ãä¾§è¾¹æ ææ°æ ç­¾é¡µæ¹å¼æå¼è¡¨å\n   * @param mode æå¼æ¹å¼ï¼æ¯æ`modal`å¼¹çªã`sidebar`ä¾§è¾¹æ ã`tab`æ°æ ç­¾é¡µ\n   * @param modalId å¼¹çªidï¼å¦æmode=`modal`ä¸æ²¡æurlï¼\n   * @param configs å¼¹çªéç½®\n   * @param url è¿ç«¯è¡¨åurl\n   * @param tabId æ ç­¾é¡µidï¼modal=tabæ¶å¿å¡«\n   * @param tabType æ ç­¾é¡µç±»åï¼`menu` æ`app`\n   * @param funcOrAppId èåæåºç¨id\n   * @param appEntrance åºç¨å¥å£\n   * @param params åæ°\n   * @param tabName æ°æ ç­¾é¡µåç§°\n   * @param enableRefresh å¯ç¨å¯å¨å·æ°\n   * @param destructuring æ¯å¦è§£æ\n   */\n  public open(mode: 'modal' | 'sidebar' | 'tab', modalId?: string, url?: string, configs?: any, tabId?: string, tabType?: 'menu' | 'app', funcOrAppId?: string, appEntrance?: string, params?: any, tabName?: string, enableRefresh?: any, destructuring?: any) {\n    const pageModalService = this.injector.get<FEPageModalService>(FEPageModalService, null);\n    if (!pageModalService) {\n      throw new Error('get FEPageModalService failed.');\n    }\n    // æ ¡éªåæ°æ¯å¦åæ³\n    if (!mode) {\n      throw new Error('[NavigationService]->open,modeåæ°ä¸è½ä¸ºç©ºï¼');\n    }\n    if (mode === 'modal' || mode === 'sidebar') {\n      if (!modalId && !url) {\n        throw new Error('å¼¹çªåä¾§è¾¹æ æ¨¡å¼æ¶å¼¹çªå®¹å¨idåè¡¨åè·¯å¾ä¸è½åæ¶ä¸ºç©ºï¼');\n      }\n      if (modalId && url) {\n        throw new Error('å¼¹çªåä¾§è¾¹æ æ¨¡å¼æ¶å¼¹çªå®¹å¨idåè¡¨åè·¯å¾ä¸è½åæ¶å­å¨ï¼');\n      }\n      const uiStateConfig = this.getObjectTypeConfig(params);\n      const modalConfig = this.buildConfigs(configs);\n      if (mode === 'sidebar') {\n        modalConfig.dialogType = mode;\n      }\n      let pageModalRef = null;\n      if (modalId) {\n        const farrisFormService = this.injector.get<FarrisFormService>(FarrisFormService, null);\n        if (!farrisFormService) {\n          return;\n        }\n        let componentType = farrisFormService.getControls(modalId);\n        const componentRef = this.createComponentRef(componentType, uiStateConfig);\n        pageModalRef = pageModalService.show(componentRef, modalConfig);\n      } else if (url) {\n        pageModalRef = pageModalService.showByUrl(url, modalConfig);\n      }\n      if (pageModalRef && !!pageModalRef.content) {\n        pageModalRef.content.isDialogRootComponent = true;\n        pageModalRef.content.dialogRef = pageModalRef;\n        const header = pageModalRef.dialog && pageModalRef.dialog.instance && pageModalRef.dialog.instance.el && pageModalRef.dialog.instance.el.nativeElement && pageModalRef.dialog.instance.el.nativeElement.querySelector(\".f-page-header\");\n        if (header && pageModalRef.dialog.instance.draggbar) {\n          pageModalRef.dialog.instance.draggbar.handle = header;\n          header.style.cursor = 'move';\n        }\n      }\n    } else if (mode === 'tab') {\n      if (!tabId || !tabType || !funcOrAppId) {\n        if (this.formNotifyService) {\n          this.formNotifyService.warning(this.languageService.appOrFuncIdRequired, { hideTitle: true });\n        }\n        throw new Error('æ°æ ç­¾æ¨¡å¼æ¶æ ç­¾é¡µidãæ ç­¾ç±»åãèåæåºç¨idåä¸è½ä¸ºç©ºï¼');\n      }\n      if (tabType === 'app' && !appEntrance) {\n        throw new Error('ä»¥åºç¨æ¹å¼æå¼æ¶å¥å£åºç¨ä¸è½ä¸ºç©ºï¼');\n      }\n      if (tabType == 'app') {\n        this.openApp(tabId, funcOrAppId, appEntrance, params, false, tabName, enableRefresh, destructuring);\n      } else if (tabType === 'menu') {\n        this.openMenu(tabId, funcOrAppId, params, false, enableRefresh, tabName, destructuring);\n      }\n    } else {\n      throw new Error('ä¸æ¯æçæ¨¡å¼ï¼');\n    }\n    // this.pageModalService.\n  }\n  /**\n   * in app navigate\n   * @param commands commands\n   */\n  // public navigate(commands: any[]);\n  /**\n   * in app navigate\n   * @param commands commands\n   * @param options options\n   * @description options:{ relativeTo: this.activatedRoute, queryParams:{a:1,b:2},etc:...}\n   */\n  public navigate(commands: any[], options?: any): Promise<boolean> {\n    const router = this.injector && this.injector.get<Router>(Router, null);\n    const activatedRoute = this.injector && this.injector.get<ActivatedRoute>(ActivatedRoute, null);\n    const queryParams = lodash.merge({}, this.querystrings, options && options.queryParams || {});\n    if (options && options.hasOwnProperty('queryParams')) {\n      delete options.queryParams;\n    }\n    const extras = lodash.merge({ skipLocationChange: false, relativeTo: activatedRoute, queryParams }, options || {});\n    if (router) {\n      return router.navigate(commands, extras);\n    } else {\n      return null;\n    }\n  }\n  // #endregion\n\n  // #region ç§ææ¹æ³\n\n  /**\n   * å°è£è·¯ç±åæ°\n   * @param params åæ°\n   * @param options éç½®åæ°\n   */\n  private buildParamMap(params: any, options?: any): Map<string, string> {\n    if (typeof params === 'undefined' || params === null || (typeof params === 'string' && params.length < 1)) {\n      params = {};\n    }\n    const paramMap = new Map<string, any>();\n    if (options && Object.keys(options).length > 0) {\n      if (typeof params !== 'object') {\n        params = JSON.parse(params);\n      }\n      params = lodash.merge(params, options);\n    }\n    if (typeof params === 'object') {\n      params = JSON.stringify(params);\n    }\n    const currentTabId = this.querystrings.tabId || this.querystrings.funcId || this.querystrings.appId;\n    params = window['encodeURIComponent'](params);\n    paramMap.set('WEB_FORM_ROUTE_PARAMS', params);\n    paramMap.set('WEB_FORM_ROUTER_PARENT_ID', currentTabId);\n    return paramMap;\n  }\n  private buildParam(params, options?: any): Map<string, string> {\n    if (typeof params === 'undefined' || params === null || (typeof params === 'string' && params.length < 1)) {\n      params = {};\n    }\n    const paramMap = new Map<string, any>();\n    if (options && Object.keys(options).length > 0) {\n      if (typeof params !== 'object') {\n        params = JSON.parse(params);\n      }\n      params = lodash.merge(params, options);\n    }\n    if (typeof params !== 'object') {\n      params = JSON.parse(params);\n    }\n    Object.keys(params).forEach(key => {\n      paramMap.set(key, params[key]);\n    });\n    const currentTabId = this.querystrings.tabId || this.querystrings.funcId || this.querystrings.appId;\n    params = window['encodeURIComponent'](params);\n    paramMap.set('WEB_FORM_ROUTE_PARAMS', params);\n    paramMap.set('WEB_FORM_ROUTER_PARENT_ID', currentTabId);\n    return paramMap;\n  }\n  /**\n   * æ¥æ¾å¼¹çªç»ä»¶\n   */\n  private findDialog() {\n    let frameContext = this.get(this, 'commandContext.frameContext');\n    let isDialogComponent = this.get(frameContext, 'frameComponent.isDialogRootComponent', false);\n\n    let parentFrameContext = this.get(frameContext, 'parent');\n    while (parentFrameContext != null && !isDialogComponent) {\n      frameContext = this.get(frameContext, 'parent');\n      parentFrameContext = this.get(parentFrameContext, 'parent');\n      isDialogComponent = this.get(frameContext, 'frameComponent.isDialogRootComponent', false);\n    }\n    const rootComponent = this.get(frameContext, 'frameComponent');\n    return { isDialogComponent, rootComponent };\n  }\n\n  /**\n   * loadsh get\n   * @param object å¯¹è±¡\n   * @param path è·¯å¾\n   * @param defaultVal é»è®¤å¼\n   */\n  private get(object: any, path: Array<string> | string, defaultVal: any = null) {\n    const PATH = Array.isArray(path)\n      ? path\n      : path.split('.').filter(i => i.length);\n    if (!PATH.length) {\n      return object === undefined ? defaultVal : object;\n    }\n\n    if (object === null || object === undefined || typeof (object[PATH[0]]) === 'undefined') {\n      return defaultVal;\n    }\n\n    return this.get(object[PATH.shift()], PATH, defaultVal);\n  }\n  private convertToBoolean(value: any, defaultVal: boolean = false) {\n    if (typeof value === 'undefined' || value === null) {\n      value = defaultVal;\n    }\n    if (typeof value === 'string') {\n      value = value || String(defaultVal);\n      value = value === 'true' ? true : false;\n    }\n    return value;\n  }\n  /**\n   * ç¿»è¯èµæºé¡¹\n   * @param key èµæºé¡¹key\n   */\n  private translate(key: string) {\n    const translateService = this.injector && this.injector.get<Translate>(TranslateToken, null) || null;\n    if (translateService && key && key.startsWith('{{') && key.endsWith('}}')) {\n      key = key.replace('{{', '').replace('}}', '').trim();\n      return translateService.transform(key, null);\n    }\n    return key;\n  }\n  // #endregion\n\n  //#region å¼¹çªç¸å³æ¹æ³\n  private buildConfigs(config: any): { [prop: string]: any } {\n    let languageService = this.injector.get<LanguageService>(LanguageService, null);\n    if (!languageService) {\n      languageService = LanguageService.getInstance();\n    }\n\n    const defaultConfigs: any = {\n      title: languageService && languageService.defaultDialogTitle || '',\n      width: 800,\n      height: 500,\n      showButtons: false\n    };\n    const objectTypeConfig = this.getObjectTypeConfig(config);\n    const configs = Object.assign(defaultConfigs, objectTypeConfig);\n    const onClosingHandler = configs.beforeClose;\n    const refresh = configs['refresh'] || {};\n    const refreshCommandName = refresh && refresh.commandName || null;\n    const refreshFrameId = refresh && refresh.frameId || null;\n    // tslint:disable: no-string-literal\n    const cancelChanges = configs['cancelChanges'] || false;\n    configs.beforeClose = (ref) => {\n      if (!!onClosingHandler && typeof onClosingHandler === 'function') {\n        return onClosingHandler(ref).pipe(\n          switchMap(result => {\n            if (result) {\n              if (cancelChanges) {\n                return this.cancelChanges(ref).pipe(\n                  switchMap(() => this.refreshForm(refreshCommandName, refreshFrameId))\n                );\n              }\n            }\n            return of(result);\n          })\n        );\n      } else {\n        if (cancelChanges) {\n          return this.cancelChanges(ref).pipe(\n            switchMap(() => this.refreshForm(refreshCommandName, refreshFrameId))\n          );\n        } else {\n          return of(true);\n        }\n      }\n\n    };\n    return configs;\n  }\n  private getObjectTypeConfig(config: any) {\n    let objectTypeConfig: any\n    if (typeof config === 'undefined') {\n      config = {};\n    }\n    if (typeof config === 'string') {\n      if (config.length) {\n        try {\n          objectTypeConfig = JSON.parse(config);\n        } catch {\n          throw new Error(config + 'ä¸æ¯åæ³çjsonå­ç¬¦ä¸²');\n        }\n      } else {\n        objectTypeConfig = {};\n      }\n    } else if (typeof config === 'object') {\n      objectTypeConfig = Object.assign({}, config);\n    } else {\n      throw new Error('å¡«åå¯¹è±¡æ ¼å¼æjsonå­ç¬¦ä¸²');\n    }\n    return objectTypeConfig;\n  }\n  /**\n   * åæ¶æå¡å¨åæ´é\n   */\n  private cancelChanges(ref: any): Observable<boolean> {\n    if (ref && ref.modalRef && ref.modalRef.content) {\n      const component: FrameComponent = ref.modalRef.content as FrameComponent;\n      if (component && component.context) {\n        const repository = component.context.repository || null;\n        if (repository) {\n          return repository.cancelChanges().pipe(switchMap(() => of(true)));\n        }\n      }\n    }\n    return of(true);\n  }\n  private refreshForm(refreshCommandName: string, refreshFrameId: string): Observable<any> {\n    if (refreshCommandName && refreshFrameId) {\n      const frameContext = this.frameContext.appContext.frameContextManager.getFrameContextById(refreshFrameId);\n      if (frameContext) {\n        const viewModel = frameContext.viewModel;\n        return viewModel[refreshCommandName]().pipe(\n          map(() => true)\n        );\n      }\n    }\n    return of(true);\n  }\n  private createComponentRef(componentType: any, uiStateObject: any) {\n    let componentRef: any;\n    const frameContext = this.getFrameContext();\n    const componentFactoryResolver = this.getComponentFactoryResolver();\n    if (frameContext && componentFactoryResolver) {\n      const contentCmptFactory = componentFactoryResolver.resolveComponentFactory(componentType);\n      const modalContentInjector = ReflectiveInjector.resolveAndCreate([], frameContext.injector);\n      componentRef = contentCmptFactory.create(modalContentInjector);\n      if (componentRef && componentRef.instance && componentRef.instance.viewModel && componentRef.instance.viewModel.uiState) {\n        if (typeof uiStateObject === 'object' && Object.keys(uiStateObject).length) {\n          Object.keys(uiStateObject).forEach(item => {\n            componentRef.instance.viewModel.uiState.setPropertyValue(item, uiStateObject[item]);\n          });\n        }\n        // éå isDialogåæ°\n        componentRef.instance.viewModel.uiState.setPropertyValue('DEVKIT_DIALOG', true);\n      }\n    }\n    return componentRef;\n  }\n  /**\n   * å¼å®¹æ§å¼¹çªï¼è·åframeContext\n   */\n  private getFrameContext() {\n    if (this.frameContext) {\n      return this.frameContext\n    }\n    if (this['context'] && this['context']['frameContext']) {\n      return this['context']['frameContext'];\n    }\n    return null;\n  }\n  /**\n   * å¼å®¹æ§å¼¹çªï¼è·åComponentFactoryResolver\n   */\n  private getComponentFactoryResolver() {\n    const frameContext = this.getFrameContext();\n    let componentFactoryResolver: any;\n    if (frameContext) {\n      componentFactoryResolver = frameContext.injector.get(ComponentFactoryResolver);\n    }\n    return componentFactoryResolver;\n  }\n  //#endregion\n}\n","import { FrameContext } from '@farris/devkit';\nimport { AppParamUtil } from './app-param.util';\n\nconst IS_ADD = 'IS_ADD';\nconst LAST_MODIFIED_ID = 'LAST_MODIFIED_ID';\n\n/**\n * è¡¨åç¶æå·¥å·ç±»\n * @internal\n */\nclass EditStateUtil {\n\n    /**\n     * è·åå½åè¡id\n     */\n    public static getLastModifiedId(frameContext: FrameContext): string {\n        // const lastModifiedId = AppParamUtil.get(frameContext, LAST_MODIFIED_ID);\n        const virtualRootFrameContext = frameContext.getVirtualRootFrameContext();\n        let lastModifiedId = null;\n        if (virtualRootFrameContext) {\n            lastModifiedId = virtualRootFrameContext.getParam(LAST_MODIFIED_ID);\n            return lastModifiedId ? lastModifiedId : null;\n        }\n        return lastModifiedId;\n    }\n\n    /**\n     * è®¾ç½®æåä¿®æ¹çid\n     */\n    public static setLastModifiedId(frameContext: FrameContext, lastModifiedId: string): void {\n        // AppParamUtil.set(frameContext, LAST_MODIFIED_ID, lastModifiedId);\n        const virtualRootFrameContext = frameContext.getVirtualRootFrameContext();\n        if (virtualRootFrameContext) {\n            virtualRootFrameContext.setParam(LAST_MODIFIED_ID, lastModifiedId);\n        }\n    }\n\n    /**\n     * è·åæ°å¢ç¶æ\n     */\n    public static getAddState(frameContext: FrameContext, ): boolean {\n        // return AppParamUtil.get(frameContext, IS_ADD);\n        const virtualRootFrameContext = frameContext.getVirtualRootFrameContext();\n        if (virtualRootFrameContext) {\n            return virtualRootFrameContext.getParam(IS_ADD);\n        }\n    }\n\n    /**\n     * è®¾ç½®æ°å¢ç¶æ\n     */\n    public static setAddState(frameContext: FrameContext, lastModifiedId: string): void {\n        // AppParamUtil.set(frameContext, IS_ADD, true);\n        const virtualRootFrameContext = frameContext.getVirtualRootFrameContext();\n        if (virtualRootFrameContext) {\n            virtualRootFrameContext.setParam(IS_ADD, true);\n        }\n        this.setLastModifiedId(frameContext, lastModifiedId);\n    }\n\n    /**\n     * åæ¶æ°å¢ç¶æ\n     */\n    public static cancelAddState(frameContext: FrameContext) {\n        // AppParamUtil.set(frameContext, IS_ADD, false);\n        const virtualRootFrameContext = frameContext.getVirtualRootFrameContext();\n        if (virtualRootFrameContext) {\n            virtualRootFrameContext.setParam(IS_ADD, false);\n        }\n    }\n\n    /**\n     * è®¾ç½®ç¼è¾ç¶æ\n     */\n    public static setEditState(frameContext: FrameContext, id: string) {\n        // AppParamUtil.set(frameContext, IS_ADD, false);\n        const virtualRootFrameContext = frameContext.getVirtualRootFrameContext();\n        if (virtualRootFrameContext) {\n            virtualRootFrameContext.setParam(IS_ADD, false);\n        }\n        this.setLastModifiedId(frameContext, id);\n    }\n}\n\nexport { EditStateUtil };\n","import { FormNotifyService } from './form-notify.service';\n\nclass FormNotifyStrategyService {\n  /**\n   * æ¶æ¯æç¤º\n   * @param formNotifyService formNotifyService\n   * @param content content\n   */\n  public static info(formNotifyService: FormNotifyService, content: string) {\n    const search = window.location.hash;\n    const { odocDisableNotification = '' } = FormNotifyStrategyService.querystring(search);\n    if (odocDisableNotification && odocDisableNotification.toLowerCase() === 'true') {\n      return;\n    }\n    formNotifyService.info(content, { hideTitle: true });\n  }\n  /**\n   * æåæç¤º\n   * @param formNotifyService formNotifyService\n   * @param content content\n   */\n  public static success(formNotifyService: FormNotifyService, content: string) {\n    const search = window.location.hash;\n    const { odocDisableNotification = '' } = FormNotifyStrategyService.querystring(search);\n    if (odocDisableNotification && odocDisableNotification.toLowerCase() === 'true') {\n      return;\n    }\n    formNotifyService.success(content, { hideTitle: true });\n  }\n  private static querystring(querystring: string): any {\n    const urlSearchParams = new URLSearchParams(querystring);\n    const result = {};\n    urlSearchParams.forEach((value: string, key: string) => {\n      result[key] = value;\n    });\n    return result;\n  }\n}\nexport { FormNotifyStrategyService };\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { filter, take } from 'rxjs/operators';\nimport { AppContext, ViewModel, CommandContext, Entity, FrameContext } from '@farris/devkit';\nimport { BefRepository } from '@farris/bef';\n\n/**\n * å½ä»¤æå¡\n * @scope FrameConmponent\n */\n@Injectable()\nclass CommandService {\n\n  /**\n   * åé¨cotnext\n   */\n  private innerContext: CommandContext;\n\n  /**\n   * contextåå¼æ¹æ³\n   */\n  public get context(): CommandContext {\n    return this.innerContext;\n  }\n\n  /**\n   * contextè®¾å¼æ¹æ³\n   */\n  public set context(context: CommandContext) {\n    this.innerContext = context;\n  }\n\n  constructor(\n    private viewModel: ViewModel,\n    private appContext: AppContext\n  ) { }\n\n  /**\n   * æ§è¡å½ä»¤\n   * @param commandName å½ä»¤åç§°\n   * @param frameId æ¡æ¶ID\n   */\n  public execute(commandName: string, frameId?: string): Observable<any> {\n    if (!commandName || commandName === '' || commandName === 'undefined') {\n      return;\n    }\n    let viewModel = this.viewModel;\n    if (frameId) {\n      const targetContext = this.appContext.frameContextManager.getFrameContextById(frameId);\n      viewModel = targetContext.viewModel;\n    }\n    return viewModel[commandName]();\n  }\n\n  /**\n   * ç­å¾BeSessionåå»º\n   * @returns ææ°åå»ºåºæ¥çBeSession\n   */\n  public waitForBeSession(): Observable<string> {\n    const frameContext = this.context.frameContext;\n    const befRepository = frameContext.repository as BefRepository<Entity>;\n    const sessionService = befRepository.restService.sessionService;\n    return sessionService.getBeSessionId().pipe(\n      filter((beSessionId: string) => {\n        return beSessionId !== null;\n      }),\n      take(1)\n    );\n  }\n\n  /**\n   * æåæä¸ªä»»å¡çæ§è¡ç»æ\n   * @param taskName ä»»å¡åç§°\n   * @reutrn è¿åtaskNameå¯¹åºä»»å¡çæ§è¡ç»æ\n   */\n  public extractResult(taskName: string) {\n    const results = this.context.results;\n    return results[taskName];\n  }\n  /**\n   * æåå½åç»ä»¶çè¡åæ¢äºä»¶æåº\n   */\n  public suspendFrameContextRowSelectedEvent(frameId?: string) {\n    let frameContext: FrameContext = this.viewModel.frameContext;\n    if (frameId) {\n      frameContext = this.viewModel.frameContext.appContext.frameContextManager.getFrameContextById(frameId);\n    }\n    if (frameContext) {\n      frameContext.bindingData.rowSelectedEventSuspend = true;\n    }\n\n  }\n  public resumeFrameContextRowSelectedEvent(frameId?: string) {\n    let frameContext: FrameContext = this.viewModel.frameContext;\n    if (frameId) {\n      frameContext = this.viewModel.frameContext.appContext.frameContextManager.getFrameContextById(frameId);\n    }\n    if (frameContext) {\n      frameContext.bindingData.rowSelectedEventSuspend = false;\n    }\n  }\n}\n\nexport { CommandService };\n","// tslint:disable: max-line-length\nimport { Injectable, Optional } from '@angular/core';\nimport { Repository, Entity, FrameContext, PARENT_CLASS, ChangeType, ValidationResult, ValidationError, ValidateRule, ViewModel, DataTypeInfo, DataPropGroup, DataPropInfo, BindingList } from '@farris/devkit';\nimport { tap, switchMap } from 'rxjs/operators';\nimport { EMPTY, Observable, Subject } from 'rxjs';\nimport { zip } from 'rxjs/observable/zip';\nimport { empty } from 'rxjs/observable/empty';\nimport { of } from 'rxjs/observable/of';\nimport { VerifyDetailService } from '@farris/ui-verify-detail';\nimport { FormNotifyService } from './form-notify.service';\nimport { LanguageService } from './languag.service';\n\n/**\n * è¡¨åéªè¯æå¡\n * @scope FrameComponent\n */\n\n@Injectable()\nclass ValidationService {\n\n  private validationResults = new Subject<any>();\n  private validationAllResult = new Subject<any>();\n  /**\n   * æé å½æ°\n   */\n  constructor(\n    private repository: Repository<any>,\n    private frameContext: FrameContext,\n    @Optional() private notifyService: FormNotifyService,\n    @Optional() private languageService: LanguageService\n  ) {\n    if (!this.languageService) {\n      this.languageService = new LanguageService();\n    }\n  }\n\n  /**\n   * éªè¯è¡¨ååçææè¡¨å\n   */\n  public validate() {\n    this.repository.getList().subscribe(\n      (result: Entity[]) => {\n        for (const entity of result) {\n          entity.validate().subscribe((result: ValidationResult) => {\n            if (!result.isValid) {\n              alert(result.message);\n              this.validationResults.next(result);\n            }\n          });\n        }\n      }\n    );\n    return this.validationResults;\n  }\n  /**\n   * æ ¡éªå½åè¡\n   */\n  public validateCurrentRow(): Observable<any> {\n    const entityTypeInfo = this.repository.entityTypeInfo;\n    // ç»åè¡¨ååªæ ¡éªå½åæé®æå¨çè¡¨å\n    const primaryValue = this.frameContext.bindingData.list.currentId;\n    if (!primaryValue) {\n      return of(true);\n    }\n    // é¦åæ ¡éªå®ä½ä¸è½ä¸ºç©ºè§å\n    const entity = this.repository.entityCollection.getEntityById(primaryValue);\n    if (!entity) {\n      return of(true);\n    }\n    const isEntityValid = this.validateEntityAllowEmptyRule(entity, entityTypeInfo);\n    if (!isEntityValid) {\n      return EMPTY;\n    }\n    const entities: Entity[] = [entity];\n    const namespace = this.frameContext.namespace;\n    let frameContexts = [];\n    // ä¿®å¤ä½¿ç¨ç¸åbeåå»ºçvoçç»åè¡¨åæ ¡éªæ¶å¤ä¸ªè¡¨åæ ¡éªè§åè¢«åå¹¶çé®é¢\n    // TODO: ç®åæªèèç»åè¡¨åç»ä¸ä¿å­çåºæ¯ï¼åç»­æ¯æç»åè¡¨åç»ä¸ä¿å­æ¶åä¿®æ¹\n    if (namespace !== null) {\n      // å­å¨å½åç©ºé´ï¼è¯´æè¡¨åè¾æ°ï¼å¯ä»¥ä¾èµè¯¥ç¹æ§\n      frameContexts = this.frameContext.appContext.frameContextManager.getFrameContextsByNamespace(namespace);\n    } else {\n      // è¡¨åè¾èï¼è·åææçä¸ä¸æï¼å¨æ ¡éªé¶æ®µè¿æ»¤è§å\n      frameContexts = this.frameContext.appContext.frameContextManager.getFrameContexts();\n    }\n\n    const isModal = this.isInDialog();\n    const hasOwnVerifyDetailService = this.hasOwnVerifyDetailService();\n    let rootViewModel = this.frameContext.root.viewModel;\n    if (isModal && hasOwnVerifyDetailService) {\n      rootViewModel = this.frameContext.getVirtualRootFrameContext().viewModel;\n    }\n\n    let toValidate = false;\n    const formErrors = [];\n    frameContexts.forEach((frameContext: FrameContext) => {\n      if (frameContext.form && frameContext.form.enableValidate) {\n        toValidate = true;\n      }\n    });\n    if (!toValidate || entities.length < 1) {\n      return of(true);\n    }\n    rootViewModel.verifyInformations = [];\n    let formValid = true;\n    let entityValid = true;\n    const formValidationRules = new Map<string, ValidateRule[]>();\n    frameContexts.forEach((formContext: FrameContext) => {\n      const bindingObject = formContext.bindingData.getObject();\n      // éç¥ææbindingData,\n      bindingObject && bindingObject.setShowValidationMsg(true);\n      if (formContext.form && formContext.form.enableValidate) {\n        // è·åå½åè¡¨åä¸çææéªè¯è§å\n        const currentFormValidationRules = formContext.form.getValidationRules();\n        currentFormValidationRules.forEach((rules, path) => {\n          if (formValidationRules.has(path)) {\n            rules.forEach(rule => formValidationRules.get(path).push(rule));\n          } else {\n            formValidationRules.set(path, [...rules]);\n          }\n        });\n        formContext.form.setShowValidationMsg(true);\n        // éä¸ªè°ç¨è¡¨åçéªè¯ï¼éªè¯åç«¯è¡¨åè§å\n        if (!formContext.form.isFormValid()) {\n          formErrors.push(formContext.form);\n          formValid = false;\n        }\n      }\n    });\n\n    // éªè¯ææå®ä½\n    const observableList = entities.map((entity: Entity) => {\n      const index = this.frameContext.bindingData.list.getIndexById(entity.primaryValue);\n      return entity.validate(undefined, undefined, formValidationRules, null, this.frameContext);\n    });\n    const result$ = zip(...observableList).pipe(\n      tap((resultList) => {\n        frameContexts.forEach((formContext: FrameContext) => {\n          if (!formContext.form.enableValidate) {\n            return;\n          }\n          const handleErrors = (errors: ValidationError[]) => {\n            errors.forEach((validationError: ValidationError) => {\n              if (validationError.children && validationError.children.length) {\n                handleErrors(validationError.children);\n              }\n              const errMsgObj = {};\n              let id = '';\n              const findId = (target: any) => {\n                if (target && target.data && target.data.id) {\n                  id = target.data.id;\n                  return;\n                } else if (target[PARENT_CLASS]) {\n                  findId(target[PARENT_CLASS]);\n                }\n              };\n              findId(validationError.target);\n\n              // å®ä½éªè¯åºéï¼éè¦å°éè¯¯å±ç¤ºå°çé¢ä¸\n              // å®ä½ä¸ä¸å®æ¯å½åè¡\n              let parentPathData = {\n                path: [],\n                isUdt: false,\n                isGrid: false\n              };\n              if (validationError.target) {\n                parentPathData = validationError.target.getPaths();\n              }\n              const bindingPath = '/' + parentPathData.path.join('/');\n              if (validationError.constraints) {\n                Object.keys(validationError.constraints).forEach(key => {\n                  errMsgObj[key] = {\n                    name: validationError.constraints[key]\n                  };\n                  // if (this.frameContext.viewModel.bindingPath === bindingPath) {\n                  //   rootViewModel['verifyInformations'].push({\n                  //     id: id,\n                  //     title: key,\n                  //     msg: validationError.constraints[key],\n                  //     type: 'warn'\n                  //   })\n                  // }\n                });\n              }\n              const paths = parentPathData.path.concat(validationError.property);\n\n              //if (this.frameContext.viewModel.bindingPath === bindingPath) {\n              // å°éè¯¯ä¿¡æ¯æ´æ°å°formControlä¸\n              formContext.bindingData.changes.next({\n                type: ChangeType.UpdateErrors,\n                id,\n                path: paths,\n                isUdt: parentPathData.isUdt,\n                isGrid: parentPathData.isGrid,\n                value: validationError.value,\n                errors: errMsgObj\n              });\n              //}\n            });\n          };\n          // å±å¼éªè¯ç»æ\n          const isValidList = resultList.map((result: ValidationResult) => result.isValid);\n          // ä¿å­ååè°ç¨å®ä½ä¸çéªè¯è§åï¼å¨é¨éè¿ä¹åæä¿å­\n          // å®ä½éªè¯éè¿\n          if (isValidList.filter(x => x).length === observableList.length) {\n            // å°éè¯¯ä¿¡æ¯æ´æ°å°formControlä¸\n            formContext.bindingData.changes.next({\n              type: ChangeType.UpdateErrors,\n              path: []\n            });\n            // éªè¯æååéèè¾å¥æ¶çéªè¯\n            if (formValid) {\n              const bindingObject = formContext.bindingData.getObject();\n              bindingObject && bindingObject.setShowValidationMsg(false);\n              const form = formContext.form;\n              if (form) {\n                form.setShowValidationMsg(false);\n              }\n            }\n          } else {\n            // å®ä½éªè¯æéè¯¯\n            entityValid = false;\n            resultList.forEach((result: ValidationResult) => {\n              if (result.isValid) {\n                // æ¸é¤éªè¯éè¿çéè¯¯\n                formContext.bindingData.changes.next({\n                  type: ChangeType.UpdateErrors,\n                  path: []\n                });\n              } else {\n                handleErrors(result.errors);\n              }\n            });\n          }\n        });\n      }),\n      switchMap((resultList) => {\n        let isValidated = true;\n        const errors = [];\n        resultList.forEach((result: ValidationResult) => {\n          if (!result.isValid) {\n            isValidated = false;\n          }\n          errors.push(...result.errors);\n        });\n        if (errors.length > 0) {\n          this.collectValidationErrors(rootViewModel, errors, this.frameContext.namespace);\n        }\n        // rootViewModel.verifycationChanged.next(rootViewModel.verifyInformations);\n        let verifyInformations = rootViewModel.verifyInformations;\n        if (isModal && hasOwnVerifyDetailService) {\n          verifyInformations = rootViewModel.verifyInformations.filter(item => item.namespace === namespace);\n        }\n        rootViewModel.verifycationChanged.next(verifyInformations);\n        if (isValidated && !formValid) {\n          // å®ä½æ ¡éªéè¿ä½è¡¨åæ ¡éªä¸éè¿ï¼æ­¤æ¶å®ä½åè¡¨åå­å¨æ ¡éªè§åä¸ä¸è´çæåµ\n          console.warn('å®ä½åæ§ä»¶æ ¡éªè§åä¸ä¸è´ï¼ä¼å¯¼è´å½ä»¤æ§è¡ä¸­æ­ï¼');\n        }\n        if (isValidated && formValid) {\n          return of(true);\n        } else {\n          return empty();\n        }\n      })\n    );\n    return result$;\n  }\n  /**\n   * è°ç¨è¡¨ååå®ä½ä¸çéªè¯è§å, éè¿åè°ç¨åè°cb\n   */\n  validateAll(): Observable<any> {\n    // ç»åè¡¨ååªæ ¡éªå½åæé®æå¨çè¡¨å\n    const entities: Entity[] = this.repository.entityCollection.getAllEntities();\n    const namespace = this.frameContext.namespace;\n    let frameContexts = [];\n    if (namespace !== null) {\n      // å­å¨å½åç©ºé´ï¼è¯´æè¡¨åè¾æ°ï¼å¯ä»¥ä¾èµè¯¥ç¹æ§\n      frameContexts = this.frameContext.appContext.frameContextManager.getFrameContextsByNamespace(namespace);\n    } else {\n      // è¡¨åè¾èï¼è·åææçä¸ä¸æï¼å¨æ ¡éªé¶æ®µè¿æ»¤è§å\n      frameContexts = this.frameContext.appContext.frameContextManager.getFrameContexts();\n    }\n\n    let toValidate = false;\n    const formErrors = [];\n    frameContexts.forEach((frameContext: FrameContext) => {\n      if (frameContext.form && frameContext.form.enableValidate) {\n        toValidate = true;\n      }\n    });\n    if (!toValidate || entities.length < 1) {\n      return of(true);\n    }\n    const isModal = this.isInDialog();\n    const hasOwnVerifyDetailService = this.hasOwnVerifyDetailService();\n    let rootViewModel = this.frameContext.root.viewModel;\n    if (isModal && hasOwnVerifyDetailService) {\n      rootViewModel = this.frameContext.getVirtualRootFrameContext().viewModel;\n    }\n\n    let formValid = true;\n    let entityValid = true;\n    const formValidationRules = new Map<string, ValidateRule[]>();\n    frameContexts.forEach((formContext: FrameContext) => {\n      const bindingObject = formContext.bindingData.getObject();\n      // éç¥ææbindingData,\n      bindingObject && bindingObject.setShowValidationMsg(true);\n      if (formContext.form && formContext.form.enableValidate) {\n        // è·åå½åè¡¨åä¸çææéªè¯è§å\n        const currentFormValidationRules = formContext.form.getValidationRules();\n        currentFormValidationRules.forEach((rules, path) => {\n          if (formValidationRules.has(path)) {\n            rules.forEach(rule => formValidationRules.get(path).push(rule));\n          } else {\n            formValidationRules.set(path, [...rules]);\n          }\n        });\n        formContext.form.setShowValidationMsg(true);\n        // éä¸ªè°ç¨è¡¨åçéªè¯ï¼éªè¯åç«¯è¡¨åè§å\n        if (!formContext.form.isFormValid()) {\n          formErrors.push(formContext.form);\n          formValid = false;\n        }\n      }\n    });\n    // è§¦åææå®ä½çvalidateäºä»¶\n    const isMultiEntityValiate = entities.length > 0;\n\n    // éªè¯ææå®ä½\n    const observableList = entities.map((entity: Entity, index: number) =>\n      entity.validate(undefined, undefined, formValidationRules, isMultiEntityValiate ? index : null, this.frameContext));\n    const result$ = zip(...observableList).pipe(\n      tap((resultList) => {\n        frameContexts.forEach((formContext: FrameContext) => {\n          if (!formContext.form.enableValidate) {\n            return;\n          }\n          const handleErrors = (errors: ValidationError[]) => {\n            errors.forEach((validationError: ValidationError) => {\n              if (validationError.children && validationError.children.length) {\n                handleErrors(validationError.children);\n              }\n              const errMsgObj = {};\n              let id = '';\n              const findId = (target: any) => {\n                if (target && target.data && target.data.id) {\n                  id = target.data.id;\n                  return;\n                } else if (target[PARENT_CLASS]) {\n                  findId(target[PARENT_CLASS]);\n                }\n              };\n              findId(validationError.target);\n\n              // å®ä½éªè¯åºéï¼éè¦å°éè¯¯å±ç¤ºå°çé¢ä¸\n              // å®ä½ä¸ä¸å®æ¯å½åè¡\n              let parentPathData = {\n                path: [],\n                isUdt: false,\n                isGrid: false\n              };\n              if (validationError.target) {\n                parentPathData = validationError.target.getPaths();\n              }\n              const bindingPath = '/' + parentPathData.path.join('/');\n              if (validationError.constraints) {\n                Object.keys(validationError.constraints).forEach(key => {\n                  errMsgObj[key] = {\n                    name: validationError.constraints[key]\n                  };\n                  // if (this.frameContext.viewModel.bindingPath === bindingPath) {\n                  //   rootViewModel['verifyInformations'].push({\n                  //     id: id,\n                  //     title: key,\n                  //     msg: validationError.constraints[key],\n                  //     type: 'warn'\n                  //   })\n                  // }\n                });\n              }\n              const paths = parentPathData.path.concat(validationError.property);\n\n              //if (this.frameContext.viewModel.bindingPath === bindingPath) {\n              // å°éè¯¯ä¿¡æ¯æ´æ°å°formControlä¸\n              formContext.bindingData.changes.next({\n                type: ChangeType.UpdateErrors,\n                id,\n                path: paths,\n                isUdt: parentPathData.isUdt,\n                isGrid: parentPathData.isGrid,\n                value: validationError.value,\n                errors: errMsgObj\n              });\n              //}\n            });\n          };\n          // å±å¼éªè¯ç»æ\n          const isValidList = resultList.map((result: ValidationResult) => result.isValid);\n          // ä¿å­ååè°ç¨å®ä½ä¸çéªè¯è§åï¼å¨é¨éè¿ä¹åæä¿å­\n          // å®ä½éªè¯éè¿\n          if (isValidList.filter(x => x).length === observableList.length) {\n            // å°éè¯¯ä¿¡æ¯æ´æ°å°formControlä¸\n            formContext.bindingData.changes.next({\n              type: ChangeType.UpdateErrors,\n              path: []\n            });\n            // éªè¯æååéèè¾å¥æ¶çéªè¯\n            if (formValid) {\n              const bindingObject = formContext.bindingData.getObject();\n              bindingObject && bindingObject.setShowValidationMsg(false);\n              const form = formContext.form;\n              if (form) {\n                form.setShowValidationMsg(false);\n              }\n            }\n          } else {\n            // å®ä½éªè¯æéè¯¯\n            entityValid = false;\n            resultList.forEach((result: ValidationResult) => {\n              if (result.isValid) {\n                // æ¸é¤éªè¯éè¿çéè¯¯\n                formContext.bindingData.changes.next({\n                  type: ChangeType.UpdateErrors,\n                  path: []\n                });\n              } else {\n                handleErrors(result.errors);\n              }\n            });\n          }\n        });\n      }),\n      switchMap((resultList) => {\n        let isValidated = true;\n        const errors = [];\n        resultList.forEach((result: ValidationResult) => {\n          if (!result.isValid) {\n            isValidated = false;\n          }\n          errors.push(...result.errors);\n        });\n        if (errors.length > 0) {\n          this.collectValidationErrors(rootViewModel, errors, this.frameContext.namespace);\n        }\n        let verifyInformations = rootViewModel.verifyInformations;\n        if (isModal && hasOwnVerifyDetailService) {\n          verifyInformations = rootViewModel.verifyInformations.filter(item => item.namespace === namespace);\n        }\n        // å ä¸ºæ ¡éªç´¯å çç¼æï¼å¯¼è´ä¹åçæ ¡éªä¿¡æ¯ä¸ç´å­å¨ï¼åªè½éè¿æ ¡éªç»ææ¥ç¡®å®æ¯å¦è¿æéè¯¯ä¿¡æ¯\n        if (isValidated && formValid) {\n          verifyInformations = rootViewModel.verifyInformations = [];\n        }\n        rootViewModel.verifycationChanged.next(verifyInformations);\n        if (isValidated && formValid) {\n          return of(true);\n        } else {\n          return empty();\n        }\n      })\n    );\n    return result$;\n  }\n  /**\n   * æ ¡éªå®ä½æ¯å¦æ»¡è¶³ä¸è½ä¸ºç©ºçè§å\n   * @param entity ä¸»å®ä½\n   */\n  private validateEntityAllowEmptyRule(entity: Entity, entityTypeInfo: DataTypeInfo) {\n    // ç¡®è®¤å®ä½åä¸ªå±çº§ä¸­æ¯å¦å­å¨ä¸è½ä¸ºç©ºçè§å\n    const paths = this.getNotAllowEmptyBindingPaths(entityTypeInfo);\n    if (!paths || paths.length < 1) {\n      return true;\n    }\n    // æ¾å°ææä¸åæ³çbindingPaths\n    const invalidPaths = paths.filter((path: string) => {\n      const bindingPaths = path.split('/').filter(p => p);\n      const bindingList = this.frameContext.bindingData.getValue(bindingPaths) as BindingList;\n      if (!bindingList || bindingList.length < 1) {\n        return true;\n      }\n      return false;\n    });\n    if (invalidPaths.length > 0) {\n      const tableNames = [];\n      invalidPaths.forEach((path: string) => {\n        const viewModelName = this.getViewModelNameByBindingPaths(path.split('/'));\n        tableNames.push(viewModelName);\n      });\n      if (this.notifyService) {\n        this.notifyService.error(`${tableNames.join('ï¼')} ${this.languageService.tableCanNotEmpty}`, { hideTitle: true });\n      }\n      return false;\n    }\n    return true;\n  }\n  /**\n   * \n   * @param bindingPaths pathä¸è½ä¸ºç©ºæ/ï¼ä¸æ¯æä¸»è¡¨\n   */\n  private getViewModelNameByBindingPaths(bindingPaths: string[]) {\n    const namespace = this.frameContext.namespace;\n    let frameContexts: FrameContext[] = null;\n    if (namespace !== null) {\n      // å­å¨å½åç©ºé´ï¼è¯´æè¡¨åè¾æ°ï¼å¯ä»¥ä¾èµè¯¥ç¹æ§\n      frameContexts = this.frameContext.appContext.frameContextManager.getFrameContextsByNamespace(namespace);\n    } else {\n      // è¡¨åè¾èï¼è·åææçä¸ä¸æï¼å¨æ ¡éªé¶æ®µè¿æ»¤è§å\n      frameContexts = this.frameContext.appContext.frameContextManager.getFrameContexts();\n    }\n    const bindingPath = bindingPaths.filter(p => p).join('/');\n    const frameContext = frameContexts.find((frameContext: FrameContext) => frameContext.viewModel && frameContext.viewModel.bindingPath.split('/').filter(p => p).join('/') === bindingPath);\n    const viewModelName = frameContext && frameContext.form && frameContext.form.formGroupName || '';\n    return viewModelName;\n  }\n  private getNotAllowEmptyBindingPaths(entityTypeInfo: DataTypeInfo): string[] | undefined {\n    if (!entityTypeInfo) {\n      return undefined;\n    }\n    const paths = [];\n    this.deepFirstTraversalEntityTypeInfo(entityTypeInfo, paths);\n    return paths;\n  }\n  private deepFirstTraversalEntityTypeInfo(entityTypeInfo: DataTypeInfo, result: string[] = [], previousValue: string[] = []) {\n    const list = entityTypeInfo.getPropInfosByGroup(DataPropGroup.List);\n    if (list && list.length > 0) {\n      list.forEach((propInfo: DataPropInfo) => {\n        const typeInfo = propInfo.typeInfo;\n        if (typeInfo && typeInfo.entityInfo && typeInfo.entityInfo.allowEmpty === false) {\n          previousValue.push(typeInfo.entityInfo.nodeCode);\n          this.deepFirstTraversalEntityTypeInfo(typeInfo, result, previousValue);\n        }\n      });\n    }\n    // æ²¡æä¸çº§äºï¼æ­¤æ¶åºè¯¥æ¸ç©ºæ¸¸æ ï¼å°æ¶éå°çè·¯å¾æ¾å°ç»æéä¸­\n    if (previousValue && previousValue.length > 0) {\n      const paths = previousValue.join('/');\n      result.push(paths);\n    }\n    previousValue.splice(0, previousValue.length);\n  }\n  collectValidationErrors(rootViewModel: ViewModel, errors: ValidationError[], namespace: string, filter: boolean = true) {\n    if (filter) {\n      rootViewModel.verifyInformations = rootViewModel.verifyInformations.filter(item => item.namespace !== namespace);\n    }\n    errors.forEach((validationError: ValidationError) => {\n      if (validationError.children && validationError.children.length) {\n        this.collectValidationErrors(rootViewModel, validationError.children, namespace, false);\n      }\n      let id = '';\n      const findId = (target: any) => {\n        if (target && target.data && target.data.id) {\n          id = target.data.id;\n          return;\n        } else if (target[PARENT_CLASS]) {\n          findId(target[PARENT_CLASS]);\n        }\n      };\n      findId(validationError.target);\n      if (validationError.constraints) {\n        const validationResultTypes = Object.keys(validationError.constraints);\n        if (validationResultTypes.length) {\n          const offset = rootViewModel.verifyInformations.filter(item => item.namespace === namespace).length;\n          let index = rootViewModel.verifyInformations.findIndex(item => item.namespace === namespace);\n          index = index === -1 ? 0 : index + offset;\n          rootViewModel.verifyInformations.splice(index, 0, {\n            id: id,\n            namespace,\n            targetField: validationError.field,\n            index: validationError.index,\n            title: validationError.propertyName,\n            msg: validationError.constraints[validationResultTypes[0]],\n            frameContext: validationError.frameContext,\n            fullPath: validationError.fullPath,\n            type: validationResultTypes[0] === 'required' ? 'empty' : 'error'\n          });\n        }\n      }\n    });\n  }\n  /**\n   * éç½®æ ¡éªä¿¡æ¯ï¼ä»å½åè¡¨åï¼\n   */\n  public resetValidation(): Observable<any> {\n    const isDialog = this.isInDialog();\n    let rootViewModel = this.frameContext.root.viewModel;\n    if (isDialog) {\n      rootViewModel = this.frameContext.getVirtualRootFrameContext().viewModel;\n    }\n    let verifyInformations = rootViewModel.verifyInformations;\n    if (verifyInformations.length) {\n      const namespace = this.frameContext.namespace;\n      if (namespace !== null) {\n        verifyInformations = rootViewModel.verifyInformations.filter(item => item.namespace !== namespace);\n      }\n      rootViewModel.verifyInformations = verifyInformations;\n      //rootViewModel.verifyInformations.splice(0, rootViewModel.verifyInformations.length);\n    }\n    if (rootViewModel && rootViewModel.verifycationChanged) {\n      rootViewModel.verifycationChanged.next(verifyInformations);\n    }\n    return of(null);\n  }\n  /**\n   * æ¯å¦å¨å¼¹çªåé¨\n   */\n  private isInDialog() {\n    return this.frameContext && this.frameContext.getVirtualRootFrameContext() && this.frameContext.getVirtualRootFrameContext().frameComponent && this.frameContext.getVirtualRootFrameContext().frameComponent['isDialogRootComponent'] || false;\n  }\n  /**\n   * æ¥æç¬èªçæ ¡éªæç¤ºæå¡\n   */\n  private hasOwnVerifyDetailService() {\n    return this.frameContext.injector.get<VerifyDetailService>(VerifyDetailService, null) !== this.frameContext.root.appContext.injector.get<VerifyDetailService>(VerifyDetailService, null);;\n  }\n}\n\nexport { ValidationService };\n","import { Injectable, Optional } from '@angular/core';\nimport { Entity, BindingData, FrameContext, ViewModel } from '@farris/devkit';\nimport { BefRepository, BefRepositoryUtil } from '@farris/bef';\nimport { Observable, of, empty, EMPTY, concat, zip, from, Subject } from 'rxjs';\nimport { tap, switchMap, concatMap, concatAll, takeLast, last } from 'rxjs/operators';\nimport { FormLoadingService } from '../form-loading/form-loading.service';\nimport { LanguageService } from '../languag.service';\nimport { FormNotifyService } from '../form-notify.service';\nimport { FormMessageService } from '../form-message.service';\nimport { FormErrorService } from '../error/form-error.service';\nimport { EditStateUtil } from './utils/index';\nimport { FormNotifyStrategyService } from '../form-notify-strategy.service';\nimport { RuntimeFrameworkService } from '../rtf-service';\nimport { DataType, WEB_FORM_ROUTE_PARAMS_KEY } from '../types';\nimport { CommandService } from '../command-service';\nimport { ValidationService } from '../validation.service';\n// tslint:disable: no-string-literal\n// tslint:disable: max-line-length\n/**\n * å¡çä»åºæå¡\n */\n@Injectable()\nclass CardDataService {\n\n  /**\n   * å®ä½ä»åº\n   */\n  private repository: BefRepository<Entity>;\n\n  /**\n   * ç»å®æ°æ®\n   */\n  private bindingData: BindingData;\n\n  /**\n   * æé å½æ°\n   */\n  constructor(\n    private formMessageService: FormMessageService,\n    private frameContext: FrameContext,\n    private loadingService: FormLoadingService,\n    private formNotifyService: FormNotifyService,\n    @Optional() private languageService: LanguageService,\n    private formErrorService: FormErrorService,\n    private runtimeFrameworkService: RuntimeFrameworkService,\n    private commandService: CommandService\n  ) {\n    if (!languageService) {\n      this.languageService = LanguageService.getInstance();\n    }\n    this.repository = this.frameContext.repository as BefRepository<Entity>;\n    this.bindingData = this.frameContext.bindingData;\n  }\n\n  /**\n   * å è½½æ°æ®\n   * @param id ä¸»å®ä½id\n   * @param enableChildrenPagination å¯ç¨å­è¡¨åé¡µ\n   */\n  public load(id: string): Observable<Entity> {\n    const loadingTimerId = this.loadingService.showLoadingWithDelay(500);\n    this.frameContext.appContext.params.set(\"retrieveing\", true);\n    this.frameContext.appContext.params.delete('queryChild');\n    const get$ = this.repository.getById(id);\n    return get$.pipe(\n      tap(\n        () => {\n          this.loadingService.hideDelayLoading(loadingTimerId);\n        },\n        (error: any) => {\n          this.loadingService.hideDelayLoading(loadingTimerId);\n          this.formErrorService.exception(this.languageService.loadFailed, error);\n        }\n      )\n    );\n  }\n  /**\n   * å è½½å\n   * @param id id\n   * @param transitionActionParamName ç¶æè¿ç§»å¨ä½åæ°ç¼å·\n   * @returns \n   */\n  public onLoading(transitionActionParamName: string) {\n    const tabId = this.runtimeFrameworkService && this.runtimeFrameworkService.tabId || null;\n    if (!tabId) {\n      return;\n    }\n    let skip = true;\n    const listening = this.frameContext.appContext.params.get(tabId) || false;\n    transitionActionParamName = transitionActionParamName || 'transitionAction';\n    if (!listening) {\n      this.frameContext.appContext.params.set(tabId, true);\n      this.runtimeFrameworkService.getEntityParam(tabId, (options: any) => {\n        if (skip) {\n          skip = false;\n          return;\n        }\n        const params = this.parseParams(options);\n        if (params && params.sync) {\n          const action = params.action;\n          const id = params.id;\n          const ngCommand = this.frameContext && this.frameContext.viewModel && this.frameContext.viewModel.metadatas && this.frameContext.viewModel.metadatas[action];\n          const actionName = ngCommand.params && ngCommand.params[transitionActionParamName] || null;\n          const formPrimaryValue = this.frameContext.bindingData.list.currentId;\n          const formState = this.frameContext.stateMachine.context.state;\n          let state = null;\n          let stateName: string;\n          if (!actionName) {\n            // å¯è½æ¯ç¨æ·èªå·±éç½®çå½ä»¤ï¼æ²¡æç¶ææºåæ¢ï¼æ­¤æ¶ä¸åå¤æ­ç¶ææº\n            state = formState;\n          }\n          else {\n            const ngAction = this.frameContext && this.frameContext.stateMachine && this.frameContext.stateMachine.metadatas && this.frameContext.stateMachine.metadatas.actions && this.frameContext.stateMachine.metadatas.actions[actionName];\n            state = ngAction && ngAction.transitTo || formState;\n            stateName = this.frameContext && this.frameContext.stateMachine && this.frameContext.stateMachine.metadatas && this.frameContext.stateMachine.metadatas && this.frameContext.stateMachine.metadatas.states[state] && this.frameContext.stateMachine.metadatas.states[state].name || this.languageService.defaultStateName;\n            if (stateName && stateName.startsWith('{{') && stateName.endsWith('}}')) {\n              const key = stateName.replace('{{', '').replace('}}', '');\n              stateName = this.frameContext.translate.transform(key, null);\n            }\n          }\n          const primaryValueChanged = formPrimaryValue !== id;\n          const stateChanged = formState !== state;\n\n          if (primaryValueChanged && stateChanged) {\n            // ååçåå\n            const message = this.languageService.dataAndStateChanged.replace(/\\$1/g, stateName);\n            this.showLoadingConfirm(message).pipe(switchMap(() => {\n              return this.resetForm(action);\n            })).subscribe();\n          } else if (primaryValueChanged) {\n            // ä¸»é®åçåå\n            this.showLoadingConfirm(this.languageService.dataChanged).pipe(switchMap(() => {\n              return this.resetForm(action);\n            })).subscribe();\n          } else if (stateChanged) {\n            // ç¶æåçåå\n            const message = this.languageService.stateChanged.replace(/\\$1/g, stateName);\n            this.showLoadingConfirm(message).pipe(switchMap(() => {\n              return this.resetForm(action);\n            })).subscribe();\n          } else {\n            // æ°æ®åç¶æåæªåçåå\n            return of(true);\n          }\n        }\n      }, false);\n    }\n  }\n\n  /**\n   * æ°å¢\n   */\n  public add(): Observable<any> {\n    const lastModifiedId = this.bindingData.list.currentId;\n\n    const loadingTimerId = this.loadingService.showLoadingWithDelay(500);\n    const create$ = this.repository.create();\n    return create$.pipe(\n      tap(\n        () => {\n          EditStateUtil.setEditState(this.frameContext, lastModifiedId);\n          this.loadingService.hideDelayLoading(loadingTimerId);\n        },\n        (error: any) => {\n          this.loadingService.hideDelayLoading(loadingTimerId);\n          this.formErrorService.exception(this.languageService.addFailed, error);\n        }\n      )\n    );\n  }\n  /**\n   * çº§èæ°å¢\n   */\n  public cascadeAdd(): Observable<any> {\n    const subject = new Subject<any>();\n    // æ¾å°ææviewmodel,æ¿å°äºææçframeContextï¼å¯è½æç»åè¡¨åç\n    const frameContexts = this.frameContext.appContext.frameContextManager.getFrameContexts();\n    // æ¾å°å½åframeContextçå¬å±namespace\n    const currentNamespace = this.frameContext.getVirtualRootFrameContext().namespace;\n    // æ¿å°å½åå½ä»¤æå¨frameçè¡¨åçææframeContext\n    const currentFormFrameContexts = frameContexts.filter((context: FrameContext) => context.namespace === currentNamespace) || [];\n    let bindingPaths = [];\n    if (currentFormFrameContexts && currentFormFrameContexts.length > 0) {\n      // æ¾å°ææä¸çº§frameContext\n      const childFrameContexts = currentFormFrameContexts.filter((context: FrameContext) => context.viewModel.bindingPath && context.viewModel.bindingPath !== '/');\n      if (childFrameContexts && childFrameContexts.length > 0) {\n        const childBindingPaths = childFrameContexts.map((context: FrameContext) => context.viewModel.bindingPath);\n        if (childBindingPaths && childBindingPaths.length > 0) {\n          bindingPaths = childBindingPaths.map(path => path.split('/').filter(p => p)).sort((a, b) => a.length - b.length);\n        }\n      }\n    }\n    this.loadingService.show();\n    this.repository.create().pipe(\n      switchMap((entity: Entity) => {\n        const rid = entity.primaryValue;\n        if (bindingPaths && bindingPaths.length > 0) {\n          return from(bindingPaths).pipe(\n            concatMap((bindingPath: Array<any>) => {\n              const fpath = this.getPath(this.frameContext.viewModel, '/' + bindingPath.join('/'), rid);\n              return this.repository.appendByPath(fpath);\n            })\n          );\n        } else {\n          return of(entity);\n        }\n      })\n    ).pipe(last()).subscribe(\n      () => {\n        this.loadingService.hide();\n        subject.next();\n      },\n      (error: any) => {\n        this.loadingService.hide();\n        this.formErrorService.exception(this.languageService.addFailed, error);\n      });\n    return subject;\n  }\n\n  /**\n   * ç¼è¾ï¼æ´æ°æ°æ®å¹¶æ è®°ç¼è¾ç¶æï¼\n   */\n  public edit(id?: string): Observable<Entity> {\n    const update$ = this.update();\n    return update$.pipe(\n      tap(() => {\n        const currentId = this.bindingData.list.currentId\n        EditStateUtil.setEditState(this.frameContext, currentId);\n      })\n    );\n  }\n\n  /**\n   * æ´æ°\n   * @param id ä¸»å®ä½id\n   * @param enableChildrenPagination å¯ç¨å­è¡¨åé¡µ\n   */\n  public update(id?: string): Observable<Entity> {\n    // è·åid\n    id = this.bindingData.list.currentId as string;\n    if (!id) {\n      return empty();\n    }\n    const loadingTimerId = this.loadingService.showLoadingWithDelay(500);\n    const update$ = this.repository.updateById(id);\n    this.frameContext.appContext.params.set(\"retrieveing\", true);\n    return update$.pipe(\n      tap(() => {\n        this.loadingService.hideDelayLoading(loadingTimerId);\n      },\n        error => {\n          this.loadingService.hideDelayLoading(loadingTimerId);\n          this.formErrorService.exception(this.languageService.updateFailed, error);\n        }\n      )\n    );\n  }\n  public updateWithoutEmpty() {\n    // è·åid\n    const id = this.bindingData.list.currentId as string;\n    if (!id) {\n      return of(null);\n    } else {\n      return this.update();\n    }\n  }\n  /**\n   * æ ¡éªå½åè¡æ¯å¦å­å¨\n   * @returns \n   */\n  public checkBeforeUpdate(): Observable<boolean> {\n    const bindingList = this.frameContext.bindingData.list;\n    const id = bindingList && bindingList.currentId;\n    if (!id) {\n      this.formNotifyService.warning(this.languageService.noDataExist, { hideTitle: true });\n      return EMPTY;\n    }\n    return of(true);\n  }\n  /**\n   * å·²åºå¼\n   * @returns \n   */\n  public updateWithNotify() {\n    // è·åid\n    const id = this.bindingData.list.currentId as string;\n    if (!id) {\n      this.formNotifyService.warning(this.languageService.noDataExist, { hideTitle: true });\n      return EMPTY;\n    } else {\n      return this.update();\n    }\n  }\n  /**\n   * å è½½å¡çæ°æ®ï¼åé¡µå è½½å­è¡¨æ°æ®ï¼\n   * @deprecated æ¹æ³å·²åºå¼ï¼è¯·å¿ä½¿ç¨\n   */\n  public loadPaged(filter?: string, sort?: string) {\n    // è·åid\n    const id = this.bindingData.list.currentId as string;\n    if (!id) {\n      return EMPTY;\n    }\n\n    const loadingTimerId = this.loadingService.showLoadingWithDelay(500);\n    // this.frameContext.root.params.set('updateWithPaging', true);\n    const update$ = of(null);//this.repository.updateEntityById(id, true);\n    return update$.pipe(\n      tap(() => {\n        this.loadingService.hideDelayLoading(loadingTimerId);\n      },\n        error => {\n          this.loadingService.hideDelayLoading(loadingTimerId);\n          this.formErrorService.exception(this.languageService.updateFailed, error);\n        }\n      )\n    );\n  }\n  /**\n   * ä¿å­\n   */\n  public save(successMsg?: string): Observable<boolean> {\n    // è·åå½åè¡\n    const id = this.bindingData.list.currentId as string;\n    if (!id) {\n      return of(false);\n    }\n\n    const loadingTimerId = this.loadingService.showLoadingWithDelay(500);\n    const update$ = this.repository.updateChangesById(id);\n    const save$ = this.repository.applyChangesById(id);\n    const result$ = update$.pipe(\n\n      // update$ => save$\n      switchMap((updateResult: boolean) => {\n        if (updateResult === false) {\n          return of(false);\n        } else {\n          return save$;\n        }\n      }),\n\n      // éèloading\n      tap(() => {\n\n        // åæ¶æ°å¢ç¶æ\n        EditStateUtil.setEditState(this.frameContext, id);\n        this.loadingService.hideDelayLoading(loadingTimerId);\n        // this.formNotifyService.info(this.languageService.saveSuccess);\n        if (successMsg && successMsg.trim()) {\n          let showMessage: boolean = true;\n          if (successMsg.startsWith('{') && successMsg.endsWith('}')) {\n            try {\n              const options = JSON.parse(successMsg);\n              if (options && options.showMessage === false) {\n                showMessage = false;\n              }\n            } catch { }\n          }\n          if (showMessage !== false) {\n            this.formNotifyService.success(successMsg, { hideTitle: true });\n          }\n        } else {\n          FormNotifyStrategyService.success(this.formNotifyService, this.languageService.saveSuccess);\n        }\n        // FormNotifyStrategyService.success(this.formNotifyService, this.languageService.saveSuccess);\n      },\n        error => {\n          this.loadingService.hideDelayLoading(loadingTimerId);\n          this.formErrorService.exception(this.languageService.saveFailed, error);\n        }\n      )\n    );\n\n    return result$;\n  }\n\n\n  // #region åæ¶ç¸å³æ¹æ³\n\n  /**\n   * åæ¶ï¼é»è®¤åæ¶ï¼\n   */\n  public cancel(): Observable<any> {\n    return this.cancelWithCheck();\n  }\n\n  /**\n   * è¿ååæ´é\n   * @description ä¸å¸¦åæ´æ£æµæç¤º\n   */\n  public revert(options?: any): Observable<any> {\n    return this.cancelWithoutCheck(options);\n  }\n\n  /**\n   * åæ¶ï¼åæ¶åæ£æ¥æªä¿å­çåæ´ï¼\n   * @summary\n   * 1ãç¨æ·è¯¯æä½ï¼åªéè¦åä¸ªæç¤ºå°±å¯ä»¥äºï¼\n   * 2ãç¨æ·ææåæ¶ï¼ç¹å»åæ¶å°±æ¯è¦æ¾å¼ææåæ´ï¼è¿æ¶åè¯¢é®äººå®¶æ¯å¦è¦ä¿å­æèæç¤ºå­å¨åæ´æç¹å¤æ­¤ä¸ä¸¾ï¼ç¡®è®¤ä¸æå³å¯ã\n   * 3ãç¨æ·è¯¯æä½ï¼æ²¡æåæ´çæåµä¸ç´æ¥ç»åæ¶äºï¼ç¨æ·ä¼äº§çææï¼å ä¸ºç¨æ·ææ¶åå¹¶ä¸ç¡®å®æ¯å¦æåæ´ï¼åºè¯¥ä¹ç¡®è®¤ä¸æã\n   * @todo\n   * 1ãç±äºäº§åé¨å¾å¤ä»£ç è¯¯ç¨äºè¯¥æ¹æ³ï¼ä¾èµäºæ²¡æåæ´çæ¶åç´æ¥åæ¶ï¼ç°å¨å¼¹çªç¡®è®¤æ¡æ¥ï¼ä¸å¤ªåéï¼\n   * 2ãäº§åé¨éè¦ç¨cancelWithoutCheckæ¹æ³ä»£æ¿ï¼ç®ååç»å¼å®¹çï¼å¾å é¤ã\n   */\n  public cancelWithCheck() {\n\n    // @todel\n    const hasUnSavedChanges = BefRepositoryUtil.isExistUnsaveData(this.repository);\n    if (!hasUnSavedChanges) {\n      return this.cancelChanges();\n    }\n\n    // ç¡®è®¤æ¯å¦åæ¶\n    const confirm$ = this.formMessageService.question(this.languageService['cancelWithoutSave']);\n    const result$ = confirm$.pipe(\n      switchMap((ifCancel: boolean) => {\n        if (ifCancel === false) {\n          return EMPTY;\n        }\n        return this.cancelChanges();\n      })\n    );\n\n    return result$;\n  }\n\n  /**\n   * åæ¶ï¼ç´æ¥åæ¶ï¼ä¸æ§è¡æ£æ¥ï¼\n   */\n  public cancelWithoutCheck(options?: any) {\n    return this.cancelChanges(options);\n  }\n\n  /**\n   * åæ¶\n   */\n  private cancelChanges(options?: any): Observable<any> {\n    const loadingTimerId = this.loadingService.showLoadingWithDelay(500);\n    const cancel$ = this.repository.cancelChanges(options);\n    return cancel$.pipe(\n      tap(\n        () => {\n          EditStateUtil.setEditState(this.frameContext, '');\n          this.loadingService.hideDelayLoading(loadingTimerId);\n        },\n        error => {\n          this.loadingService.hideDelayLoading(loadingTimerId);\n          this.formErrorService.exception(this.languageService.cancelFailed, error);\n        }\n      )\n    );\n  }\n\n  // #endregion\n\n\n  /**\n   * éæ°å è½½ï¼ä»ä¾å¡çåæ¶åéæ°å è½½æ°æ®ï¼å¶ä»åºæ¯è¯·å¿ä½¿ç¨ï¼\n   */\n  public reload() {\n    const isAdd = EditStateUtil.getAddState(this.frameContext);\n    let id;\n    if (isAdd === true) {\n      id = EditStateUtil.getLastModifiedId(this.frameContext);\n    } else {\n      id = this.bindingData.list.currentId as string;\n    }\n\n    if (!id) {\n      this.repository.entityCollection.loadEntities([]);\n      return;\n    }\n\n    return this.load(id);\n  }\n  private getPath(viewModel: ViewModel, bindingPath: string, rid: string): string {\n    let path = '/' + rid;\n\n    const subPaths = bindingPath.split('/');\n    if (subPaths.length > 0) {\n      // eg:bindingPathå½¢å¦/edus/grades,splitåæ¯['', 'edus', 'grades']\n      // å æ­¤indexä»1å¼å§\n      for (let index = 1; index < subPaths.length - 1; index++) {\n        const subPath = subPaths[index];\n        const subData = viewModel.bindingData[subPath];\n        if (!subData || !subData.currentId) {\n          throw Error(`è·åå­è¡¨å®æ´è·¯å¾åºéï¼æ¾ä¸å°${subData}å¯¹åºçå­è¡¨ï¼æå¯¹åºå­è¡¨æ²¡æå½åè¡ã`);\n        }\n        path += `/${subPath}/${subData.currentId}`;\n      }\n    }\n    path += '/' + subPaths[subPaths.length - 1];\n\n    return path;\n  }\n  private resetForm(action: string) {\n    const validationService = this.frameContext.injector.get<ValidationService>(ValidationService, null);\n    return this.frameContext.repository.cancelChanges().pipe(\n      switchMap(() => this.commandService.execute(action).pipe(switchMap(() => {\n        return validationService && validationService.resetValidation() || of(null);\n      }))));\n  }\n  private parseParams(options: any): { action: string, id: string, sync: boolean } | null {\n    if (options && Object.prototype.toString.call(options) === DataType.map) {\n      let params = options.get(WEB_FORM_ROUTE_PARAMS_KEY);\n      if (params && typeof params === 'string') {\n        params = decodeURIComponent(params);\n        if (params.startsWith('{') && params.endsWith('}')) {\n          params = JSON.parse(params);\n        }\n        return {\n          action: params.action,\n          id: params.idToView || params.idToEdit || params.id,\n          sync: params.sync || false\n        };\n      }\n    }\n    return null;\n  }\n  private showLoadingConfirm(message: string) {\n    return this.formMessageService.confirm(message).pipe(\n      switchMap((result: boolean) => {\n        if (result === true) {\n          return of(true);\n        } else {\n          return EMPTY;\n        }\n      })\n    );\n  }\n}\nexport { CardDataService };\n","import { Injectable, Optional } from '@angular/core';\nimport { of } from 'rxjs';\nimport { switchMap } from 'rxjs/operators';\nimport { BefRepository, BefRepositoryUtil } from '@farris/bef';\nimport { TAB_EVENT } from './types';\nimport { NavigationService } from './navigation.service';\nimport { FrameContext, Repository, UID } from '@farris/devkit';\nimport { FormMessageService } from './form-message.service';\nimport { LanguageService } from './languag.service';\nimport { CardDataService } from './data-services/card-data.service';\n/**\n * å¯¼èªä¸­é´ä»¶æå¡\n * @scope FrameComponent\n */\n// tslint:disable: no-string-literal\n@Injectable()\nexport class NavigationMiddlewareService {\n  private repository: Repository<any>;\n\n  private appContext: any;\n  constructor(\n    private navigationService: NavigationService,\n    private frameContext: FrameContext,\n    private msgService: FormMessageService,\n    @Optional() private languageService: LanguageService,\n    private cardDataService: CardDataService\n  ) {\n    this.repository = frameContext.repository;\n    if (!this.languageService) {\n      this.languageService = LanguageService.getInstance();\n    }\n    if (this.frameContext) {\n      this.appContext = this.frameContext.getFormAppContext() || null;\n    }\n  }\n  /**\n   * å³é­åå¤ç\n   */\n  public onClosing() {\n    if (this.isInDialog()) {\n      return;\n    }\n    this.navigationService.addEventListener(TAB_EVENT.onTabClosing, (options) => {\n      if (this.isChanged && !this.appContext.opened) {\n        // å¦æéè¦ç¨æ·ç¡®è®¤å°±åæ¢å°å½åtab\n        if (options && options.beforeCloseHandle && typeof options.beforeCloseHandle === 'function') {\n          options.beforeCloseHandle({ selectedChange: true });\n        }\n        const conform = this.msgService.question(this.languageService['exitWithoutSave']);\n        /*è®°å½å¼¹çªå·²æå¼*/\n        this.appContext.opened = true;\n        return conform.pipe(\n          switchMap((result: boolean) => {\n            this.appContext.opened = false;\n            if (result) {\n              /*è®°å½ç¨æ·å³é­å¼¹çª*/\n              if (!!this.cardDataService) {\n                const revert$ = this.cardDataService.revert(options);\n                return revert$.pipe(\n                  switchMap(() => of(result))\n                );\n              }\n            }\n            return of(result);\n          })\n        );\n      } else if (this.isChanged && this.appContext.opened) {\n        return of(false);\n      } else {\n        return of(true);\n      }\n    });\n  }\n  /**\n   * æ¯å¦å¨æ¯å¼¹çªçªå£å\n   */\n  private isInDialog() {\n    let frameContext = this.frameContext;\n    let isDialogRootComponent = frameContext.frameComponent['isDialogRootComponent'] || false;\n    while (frameContext.parent !== null && !isDialogRootComponent) {\n      frameContext = frameContext.parent;\n      isDialogRootComponent = frameContext.frameComponent['isDialogRootComponent'];\n    }\n    return isDialogRootComponent;\n  }\n  /**\n   * è·åtabid,å¦ætargetIdå­å¨åç´æ¥ä½¿ç¨targetId\n   * @description å°ç¨æ·è¦æ¥ççæ°æ®idè½¬æ¢ä¸ºè¿è¡æ¡æ¶éè¦çtabId\n   * @param params routeråæ°\n   * @param targetId è¦ç¼è¾/æ¥ççæ°æ®id\n   */\n  public getTabId(params: string, targetId: string): any {\n    if (!!targetId) {\n      return targetId;\n    }\n    let paramsObj: any = null;\n    if (!!params && params.startsWith('{') && params.endsWith('}')) {\n      paramsObj = JSON.parse(params);\n    }\n    let paramId = null;\n    if (paramsObj && paramsObj.hasOwnProperty('id') && !!paramsObj.id) {\n      paramId = paramsObj.id;\n    } else {\n      paramId = UID.create();\n    }\n    return paramId;\n  }\n  /**\n   * æ¯å¦ææªä¿å­çåæ´\n   */\n  private get isChanged(): boolean {\n    const befRepository = this.repository as BefRepository<any>;\n    return BefRepositoryUtil.isExistUnsaveData(befRepository);\n  }\n}\n","/*\n * @Author: aalizzwell\n * @Date: 2019-08-05 11:48:27\n * @Last Modified by: aalizzwell\n * @Last Modified time: 2019-08-06 15:01:53\n */\n\nimport { Injectable, Optional } from '@angular/core';\nimport { EMPTY, of } from 'rxjs';\nimport { switchMap } from 'rxjs/operators';\nimport { FrameContext, Repository, ViewModel } from '@farris/devkit';\nimport { FormMessageService } from './form-message.service';\nimport { LanguageService } from './languag.service';\nimport { BefRepositoryUtil, BefRepository } from '@farris/bef';\nimport { CommandService } from './command-service';\n\n// tslint:disable: no-string-literal\n/**\n * Gridä¸­é´ä»¶æå¡\n * @scope FrameComponent\n */\n@Injectable()\nexport class GridMiddlewareService {\n  private repository: Repository<any>;\n\n  constructor(\n    private frameContext: FrameContext,\n    private msgService: FormMessageService,\n    @Optional() private languageService: LanguageService,\n    private viewModel: ViewModel,\n    private commandService: CommandService\n  ) {\n    this.repository = this.frameContext.repository;\n    if (!this.languageService) {\n      this.languageService = LanguageService.getInstance();\n    }\n  }\n  /**\n   * é¡µç åæ¢å\n   */\n  public onPageChanging() {\n    if (this.isChanged) {\n      return this.msgService.question(this.languageService['gridDataNotSave']).pipe(\n        switchMap((result: boolean) => {\n          if (!result) {\n            return EMPTY;\n          } else {\n            return of(true);\n          }\n        })\n      );\n    } else {\n      return of(true);\n    }\n  }\n  /**\n   * è¡¨æ ¼è¿æ»¤\n   * @param commandName å½ä»¤åç§°\n   * @param frameId frameId\n   * @returns \n   */\n  public filter(commandName: string, frameId: string) {\n    const self: any = this;\n    let filters = self.context && self.context.eventParam || [];\n    if (typeof (filters) === 'string') {\n      filters = JSON.parse(filters);\n    }\n    // æ¥è¯¢æ¶éç½®é¡µç ä¸ºç¬¬ä¸é¡µ\n    this.viewModel.frameContext.repository.entityCollection.pageIndex = 1;\n    this.viewModel.frameContext.repository.filterConditionManager.setConditions(this.viewModel.bindingPath, filters);\n    return this.commandService.execute(commandName, frameId);\n  }\n  /**\n   * æ¯å¦ææªä¿å­çåæ´\n   */\n  private get isChanged(): boolean {\n    const befRepository = this.repository as BefRepository<any>;\n    return BefRepositoryUtil.isExistUnsaveData(befRepository);\n  }\n}","import { Injectable } from '@angular/core';\nimport { QuerystringService } from './querystring';\nimport { RuntimeFrameworkService } from './rtf-service';\nimport { of, Observable, BehaviorSubject, Subject } from 'rxjs';\nimport { switchMap } from 'rxjs/operators';\n// tslint:disable: no-string-literal\n/**\n * åæ°æå¡\n * @scope FormModule\n */\n@Injectable()\nexport class ParamService {\n  constructor(\n    private querystringService: QuerystringService,\n    private runtimeFrameworkService: RuntimeFrameworkService\n  ) { }\n  /**\n   * ééè·åææåæ°\n   */\n  public get params(): Observable<{ [propName: string]: any }> {\n    // åä»hashä¸­è·ååæ°\n    const hash = window.location.hash;\n    const params = this.querystringService.parse(hash);\n    /*\n    const appMode = params.appMode;\n    // appModeæ²¡æå®ä¹ï¼è®¤ä¸ºæ¯èè¡¨å,appMode = mdi æ spa\n    if (typeof appMode === 'undefined' || appMode === null) {\n        return of(params);\n    }\n    // appModeå­å¨ï¼ä½ä¸ºç©ºï¼ä¹è®¤ä¸ºæ¯èè¡¨å\n    if (appMode.length < 1) {\n        return of(params);\n    }\n    // æ°è¡¨åï¼ä½¿ç¨iframeæ¨¡å¼\n    if (appMode.toLowerCase() === 'mdi') {\n        return of(params);\n    }\n    */\n    // è·åtabIdï¼ææ°çæ¬ä¸å®ætabIdï¼å¦æåä¸å°tabIdåè®¤ä¸ºæ¯èè¡¨åï¼ç´æ¥ä»urlè·ååæ°\n    const tabId = params.tabId;\n    if (!tabId) {\n      // throw new Error('TabId can`t be empty!');\n      return of(params);\n    }\n    const subject = new Subject<any>();\n    // ç®¡éåæ°eå¯è½ä¸ºobjectãMapç±»å\n    this.runtimeFrameworkService.addEventListener(tabId, (e: any) => {\n      let map = {};\n      if (e instanceof Map || (e && typeof (e['get']) === 'function' && typeof e['entries'] === 'function')) {\n        map = this.parseMapParams(e);\n      }\n      let args = {};\n      if (e instanceof Map || (e && typeof (e['get']) === 'function' && typeof e['entries'] === 'function')) {\n        args = new Map(e);\n      } else {\n        args = Object.assign({}, e);\n      }\n      setTimeout(() => {\n        subject.next(Object.assign({}, args, map, params));\n      }, 0);\n    }, params);\n    return subject.asObservable();\n  }\n  /**\n   * è§£æmapç±»åçåæ°\n   * @param params params\n   */\n  private parseMapParams(params: Map<any, any>) {\n    const map = {};\n    map['WEB_FORM_ROUTE_PARAMS'] = decodeURIComponent(params.get('WEB_FORM_ROUTE_PARAMS'));\n    params.forEach((value, key) => {\n      if (key !== 'WEB_FORM_ROUTE_PARAMS') {\n        map[key] = value;\n      }\n    });\n    return map;\n  }\n  /**\n   * è·åparamåæ°\n   * @param param key\n   */\n  public get(param: string): Observable<any> {\n    return this.params.pipe(\n      switchMap(options => {\n        if (!!options && options.hasOwnProperty(param)) {\n          return of(options.param);\n        } else {\n          return of(undefined);\n        }\n      })\n    );\n  }\n  /**\n   * åæ°è½¬ä¸ºå¯¹è±¡\n   */\n  public parse(): Observable<any> {\n    return this.params.pipe(\n      switchMap(options => {\n        return of(options);\n      })\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Keybinding, ViewModel } from '@farris/devkit'\nimport * as Mousetrap from 'mousetrap';\nimport { Observable } from 'rxjs';\n\nconst enum CharCode {\n\n  Digit0 = 48,\n  Digit1 = 49,\n  Digit2 = 50,\n  Digit3 = 51,\n  Digit4 = 52,\n  Digit5 = 53,\n  Digit6 = 54,\n  Digit7 = 55,\n  Digit8 = 56,\n  Digit9 = 57,\n\n  A = 65,\n  B = 66,\n  C = 67,\n  D = 68,\n  E = 69,\n  F = 70,\n  G = 71,\n  H = 72,\n  I = 73,\n  J = 74,\n  K = 75,\n  L = 76,\n  M = 77,\n  N = 78,\n  O = 79,\n  P = 80,\n  Q = 81,\n  R = 82,\n  S = 83,\n  T = 84,\n  U = 85,\n  V = 86,\n  W = 87,\n  X = 88,\n  Y = 89,\n  Z = 90,\n\n  a = 97,\n  b = 98,\n  c = 99,\n  d = 100,\n  e = 101,\n  f = 102,\n  g = 103,\n  h = 104,\n  i = 105,\n  j = 106,\n  k = 107,\n  l = 108,\n  m = 109,\n  n = 110,\n  o = 111,\n  p = 112,\n  q = 113,\n  r = 114,\n  s = 115,\n  t = 116,\n  u = 117,\n  v = 118,\n  w = 119,\n  x = 120,\n  y = 121,\n  z = 122\n}\n\n/**\n * å¿«æ·é®æå¡\n * @scope FormModule\n */\n@Injectable()\nexport class KeybindingService {\n  private keyMap: Map<String, () => Observable<any>>;\n  private bindingProvider: Mousetrap;\n  private ready: boolean;\n\n  constructor() {\n    this.keyMap = new Map<String, () => Observable<any>>();\n    this.bindingProvider = Mousetrap.default;\n    this.ready = true;\n  }\n\n  /**\n   * å¯¹è§å¾æ¨¡åè®¾ç½®çå¿«æ·é®è¿è¡ç»å®å¤ç\n   * @param viewModel è§å¾æ¨¡å\n   */\n  public bind(viewModel: ViewModel) {\n    viewModel.keybindingMap.forEach((keyBinding, method) => {\n      this.register(keyBinding, () => {\n        return viewModel[method]();\n      });\n    });\n  }\n\n\t/**\n\t * æ³¨åå¿«æ·é®\n\t * @param binding é®çç»å®ä¿¡æ¯\n\t * @param handler ååºäºä»¶\n\t */\n  public register(binding: Keybinding, handler: () => Observable<any>) {\n    var combo = this._getCombo(binding);\n    if (combo) {\n      this.keyMap.set(combo, handler);\n      if (binding.ctrlKey && binding.altKey && !binding.shiftKey) {\n        // å®éåç°ï¼ctrl+altç»åï¼åªè½è§¦åkeyupäºä»¶\n        this.bindingProvider.bind(combo, this._dispatch.bind(this), 'keyup');\n      } else {\n        this.bindingProvider.bind(combo, this._dispatch.bind(this));\n      }\n    }\n  }\n\n  /**\n   * åæ¶å¿«æ·é®æ³¨å\n   * @param binding é®çç»å®ä¿¡æ¯ \n   */\n  public unregister(binding: Keybinding) {\n    var combo = this._getCombo(binding);\n    if (combo) {\n      this.keyMap.delete(combo);\n      this.bindingProvider.unbind(combo);\n    }\n  }\n\n  private _dispatch(e: KeyboardEvent): boolean {\n    if (e.repeat) return false;\n    if (this.ready) {\n      var combo = this._getCombo(e);\n      if (combo && this.keyMap.has(combo)) {\n        this.ready = false;\n        this.keyMap.get(combo)().subscribe(() => {\n          this.ready = true;\n        }, (error) => {\n          this.ready = true;\n        }, () => {\n          this.ready = true;\n        });\n      }\n    }\n    return false;\n  }\n\n\t/**\n\t * è¿åctrl+shift+alt+aå½¢å¼çç»åå­ç¬¦ä¸²ï¼å¨é¨ä¸ºå°å\n\t * @param keyInfo \n\t */\n  private _getCombo(keyInfo: Keybinding | KeyboardEvent): String | null {\n    var key = keyInfo.key.toLowerCase();\n    if (key.length != 1 || key.charCodeAt(0) < CharCode.a || key.charCodeAt(0) > CharCode.z) {\n      console.warn(\"å¿«æ·é®å­æ¯å½¢å¼ä¸ºa-z\");\n      return null;\n    }\n    var combo = (keyInfo.ctrlKey ? 'ctrl+' : '')\n      + (keyInfo.shiftKey ? 'shift+' : '')\n      + (keyInfo.altKey ? 'alt+' : '')\n      + (keyInfo.metaKey ? 'meta+' : '')\n      + key;\n\n    if (combo.length == 1) {\n      console.warn(\"å¿«æ·é®è³å°åå«ä¸ä¸ªModifieré®\");\n      return null;\n    }\n\n    return combo;\n  }\n}","// tslint:disable: max-line-length\nimport { Injectable } from '@angular/core';\n\n/**\n * @deprecated å·²åºé¤\n */\n@Injectable()\nclass FilterConditionService {\n}\nexport { FilterConditionService };\n","import { Injectable } from '@angular/core';\n\n/**\n * UIç¶ææå¡\n * @scope FrameComponent\n */\n@Injectable()\nclass UIStateService {\n\n  constructor() {\n  }\n\n  getState(componentId: string, stateName: string) {\n    throw new Error('Not Implemented');\n  }\n\n  setState(componentId: string, stateName: string, value: any) {\n    throw new Error('Not Implemented');\n  }\n}\n\nexport { UIStateService };\n","import { Injectable, ElementRef } from '@angular/core';\nimport { StateMachine, FrameContext, AppContext } from '@farris/devkit';\n// tslint:disable: max-line-length\n/**\n * ç¶ææºæå¡\n * @scope FrameComponent\n */\n@Injectable()\nclass StateMachineService {\n\n  constructor(\n    private stateMachine: StateMachine\n  ) {\n    if (this.stateMachine.initialState.name === 'init') {\n      window.setTimeout(() => {\n        this.initFormState();\n      }, 0);\n    }\n  }\n\n  private _clsDefaultName = 'f-form-state-default';\n  private _initLoad = true;\n  private _currentFrameContext: any\n\n  transit(action: string) {\n    if (action && typeof this.stateMachine[action] === 'function') {\n      this.stateMachine[action]();\n      this._currentFrameContext = this['context'] && this['context']['frameContext'];\n      if (this._initLoad) {\n        this.initFormState();\n        this._initLoad = false;\n      }\n      if (!this._currentFrameContext) {\n        return;\n      }\n      const currentRootFrameContext = this.getCurrentRootFrameContext(this._currentFrameContext);\n      if (!!currentRootFrameContext) {\n        this.toggleFormState(action, currentRootFrameContext);\n      }\n    }\n  }\n\n  private getCurrentRootFrameContext(currentFrameContext: FrameContext): FrameContext {\n    let currentRootFrameContext: FrameContext;\n    this.getAllRootFrameContext().forEach((rootFc: FrameContext) => {\n      if (currentFrameContext.namespace === rootFc.namespace) {\n        currentRootFrameContext = rootFc;\n      }\n    })\n    return currentRootFrameContext;\n  }\n\n  private getFrameContextManagerMap() {\n    if (this.stateMachine && this.stateMachine.frameContext) {\n      const appContext = this.stateMachine.frameContext.appContext as AppContext;\n      if (appContext) {\n        const frameContextManager = appContext.frameContextManager;\n        return frameContextManager.getFrameContextMap();\n      }\n    }\n    return null;\n    // return this.stateMachine && this.stateMachine.frameContext && this.stateMachine.frameContext.appContext && this.stateMachine.frameContext.appContext.frameContextManager && this.stateMachine.frameContext.appContext.frameContextManager.getFrameContextMap();\n  }\n\n  private getAllRootFrameContext(): any[] {\n    const rootFrameContextArr = [];\n    const frameContexts = this.getFrameContextManagerMap();\n    if (frameContexts) {\n      frameContexts.forEach(item => {\n        if ((item['namespace'] === '' && item['parent'] === null) || (item['parent'] !== null && item['namespace'] !== item['parent']['namespace'])) {\n          rootFrameContextArr.push(item);\n        }\n      })\n    }\n    return rootFrameContextArr;\n  }\n\n  private initFormState() {\n    if (!this.getFrameContextManagerMap()) {\n      return;\n    }\n    this.getAllRootFrameContext().forEach((rootFc: FrameContext) => {\n      const rootComponent = rootFc.injector.get<ElementRef>(ElementRef, null) || null;\n      if (!rootComponent || !rootComponent.nativeElement) {\n        return;\n      }\n      if (!rootComponent.nativeElement.className.includes(this._clsDefaultName) && !rootComponent.nativeElement.className.includes('f-form-state-create') && !rootComponent.nativeElement.className.includes('f-form-state-edit')) {\n        this.addCssClass(rootComponent, this._clsDefaultName);\n      }\n    })\n  }\n\n  private toggleFormState(action: string, frameContext: FrameContext) {\n    const rootComponent = frameContext.injector.get<ElementRef>(ElementRef, null) || null;\n    if (!rootComponent || !rootComponent.nativeElement || !action) {\n      return;\n    }\n    action = action.toLowerCase();\n    if (action && ['create', 'edit'].includes(action)) {\n      if (action === 'create') {\n        this.addCssClass(rootComponent, 'f-form-state-create');\n      } else if (action === 'edit') {\n        this.addCssClass(rootComponent, 'f-form-state-edit');\n      }\n      this.removeCssClass(rootComponent, this._clsDefaultName);\n    } else {\n      ['f-form-state-create', 'f-form-state-edit'].forEach(item => this.removeCssClass(rootComponent, item));\n      this.addCssClass(rootComponent, this._clsDefaultName);\n    }\n  }\n  private addCssClass(elementRef: ElementRef, className: string) {\n    if (!elementRef || !className || !elementRef.nativeElement) {\n      return;\n    }\n    const originalClassName: string = elementRef.nativeElement.className || '';\n    if (!originalClassName.includes(className)) {\n      elementRef.nativeElement.className = `${originalClassName} ${className}`;\n    }\n  }\n  private removeCssClass(elementRef: ElementRef, className: string) {\n    if (!elementRef || !className || !elementRef.nativeElement) {\n      return;\n    }\n    const originalClassName: string = elementRef.nativeElement.className || '';\n    if (originalClassName.includes(className)) {\n      elementRef.nativeElement.className = originalClassName.split(' ').filter(p => p && p !== className).join(' ');\n    }\n  }\n  private getFormRootComponent() {\n    if (this.stateMachine && this.stateMachine.frameContext) {\n      const viewContext = this.stateMachine.frameContext;\n      if (viewContext) {\n        const virtualRootContext = viewContext.getVirtualRootFrameContext();\n        if (virtualRootContext) {\n          const injector = virtualRootContext.injector;\n          if (typeof injector.get === 'function') {\n            return injector.get<ElementRef>(ElementRef, null);\n          }\n        }\n      }\n    }\n    return null;\n    // return this.stateMachine && this.stateMachine.frameContext && this.stateMachine.frameContext.getVirtualRootFrameContext() && this.stateMachine.frameContext.getVirtualRootFrameContext().injector && typeof this.stateMachine.frameContext.getVirtualRootFrameContext().injector.get === 'function' && this.stateMachine.frameContext.getVirtualRootFrameContext().injector.get<ElementRef>(ElementRef, null) || null;\n  }\n}\n\nexport { StateMachineService };\n","import { Injectable } from '@angular/core';\nimport { AppContext, BindingData, FrameContext } from '@farris/devkit';\n\n/**\n * å®ä½æå¡\n * @scope FrameComponent\n */\n@Injectable()\nclass BindingDataService {\n\n  /**\n   * æé å½æ°\n   */\n  constructor(\n    private bindingData: BindingData,\n    private appContext: AppContext\n  ) { }\n\n  /**\n   * è®¾ç½®å½åæ¡æ¶çå½åè¡\n   */\n  setCurrentId(id: string, frameId: string) {\n    // let bindingData = this.bindingData;\n    // if (frameId) {\n    //   const targetContext = this.appContext.getFrameContext(frameId);\n    //   bindingData = targetContext.bindingData;\n    // }\n    // bindingData.list.setCurrentId(id);\n\n    // @todoï¼å¨é¨éæ°è®¾ç½®ä¸é\n    const frameContexts = Array.from(this.appContext.getAllFrameContexts().values());\n    frameContexts.forEach((frameContext: FrameContext) => {\n      const bindingData = frameContext.bindingData;\n      bindingData.list.setCurrentId(id, true, false);\n    });\n  }\n  public setCurrentRow(id: string, frameId: string) {\n    let bindingData = this.bindingData;\n    if (frameId) {\n      const targetContext = this.appContext.getFrameContext(frameId);\n      bindingData = targetContext.bindingData;\n    }\n    bindingData.getList().setCurrentId(id);\n  }\n}\n\nexport { BindingDataService };\n","import { ActivatedRoute, ParamMap } from '@angular/router';\nimport { take } from 'rxjs/operators';\nimport { FrameworkService } from '@gsp-sys/rtf-common';\nimport { ViewModel } from '@farris/devkit';\nimport { Injectable, Optional } from '@angular/core';\nimport { ParamService } from './param.service';\nimport { RuntimeFrameworkService } from './rtf-service';\nimport { BefRepository } from '@farris/bef';\nimport { isObservable } from 'rxjs';\n\n/**\n * åºç¨åæ°æå¡\n * @scope FormModule\n */\n\n@Injectable()\nexport class ApplicationParamService {\n  private params: any;\n  constructor(\n    @Optional() private paramService: ParamService,\n    @Optional() private runtimeFrameworkService: RuntimeFrameworkService,\n  ) {\n    if (!this.runtimeFrameworkService) {\n      this.runtimeFrameworkService = new RuntimeFrameworkService();\n    }\n  }\n  /**\n   * è§£æåæ°\n   */\n  public parseParams(route: ActivatedRoute, frameworkService: FrameworkService, viewModel: ViewModel, callback: () => void) {\n    const highOrderInvoke = this.highOrderInvoke(callback);\n    if (!this.paramService) {\n      route.queryParams.pipe(take(1)).subscribe((params: any) => {\n        this.params = params;\n        this.setupParams(params, frameworkService, viewModel, highOrderInvoke);\n      });\n    } else {\n      this.paramService.parse().pipe(take(1)).subscribe(params => {\n        this.params = params;\n        this.setupParams(params, frameworkService, viewModel, highOrderInvoke);\n      });\n    }\n  }\n\n  /**\n   * è®¾ç½®åæ°\n   */\n  private setupParams(params, frameworkService: FrameworkService, viewModel: ViewModel, callback: () => void) {\n    const queryParams = this.getParams(params);\n    if (!queryParams) {\n      callback();\n      return;\n    }\n\n    // åè®¾ç½®åæ°ï¼ä¿è¯æ®éè·¯ç±ä¹è½æ­£å¸¸æ§è¡ã\n    this.setQueryParams(queryParams, viewModel);\n\n    const funcId = this.getFuncId(queryParams);\n    const appId = this.getAppId(queryParams);\n    if (!funcId && !appId) {\n      callback();\n      return;\n    }\n\n    if (funcId) {\n      this.setStaticParams(funcId, queryParams, frameworkService, viewModel, callback);\n    } else {\n      callback();\n    }\n  }\n  /**\n   * è®¾ç½®æ¥è¯¢åæ°\n   */\n  private setQueryParams(queryParams: any, viewModel: ViewModel): any {\n    const parsedQueryParams = {};\n    // è®¾ç½®è¡¨ååæ°\n    // é¦åå¤æ­æ¯å¦ä¸ºå¼¹çª\n    const isInDialog = this.isInDialog(viewModel);\n    const uiState = viewModel && viewModel.uiState && viewModel.uiState.innerData || {};\n    // å¦ææ¯å¼¹çªï¼å¼¹çªå¤çåæ°ï¼æ è®ºè¡¨ååæ°æéæåæ°ï¼ä¸åºè¯¥è¦çå¼¹çªçåæ°ãå¼¹çªæå¼æ¶ä¼ éçåæ°ç¸å½äºå±é¨åéï¼ä¸åºè¢«è¦ç\n    Object.keys(queryParams).forEach((paramName: string) => {\n      if (!isInDialog) {\n        parsedQueryParams[paramName] = queryParams[paramName];\n      } else {\n        if (!uiState.hasOwnProperty(paramName)) {\n          parsedQueryParams[paramName] = queryParams[paramName];\n        }\n      }\n    });\n    this.updateUIState(viewModel, parsedQueryParams);\n  }\n\n  /**\n   * è®¾ç½®éæåæ°\n   */\n  private setStaticParams(\n    funcId: string, queryParams: any, frameworkService: FrameworkService, viewModel: ViewModel, callback: () => void\n  ) {\n    this.runtimeFrameworkService.getMenuParams(funcId, (staicParams) => {\n      const staticParamsObj = this.mapStaticParamsToObject(staicParams, queryParams, viewModel);\n      if (!staticParamsObj) {\n        callback();\n        return;\n      }\n      this.updateUIState(viewModel, staticParamsObj);\n      callback();\n    });\n  }\n\n  /**\n   * å°staticParamsè½¬æ¢ä¸ºæ®éå¯¹è±¡\n   * @param staticParamsï¼å½¢å¦ï¼[{'name': 'key1', 'value': 'val1'}, {'name': 'key2', 'value': 'val2'}]\n   * @return å½¢å¦ï¼{key1: val1, key2: value2 }\n   */\n  private mapStaticParamsToObject(staticParams: Map<any, any>, queryParams: any, viewModel?: ViewModel): any {\n    if (!staticParams) {\n      return;\n    }\n    const inDialog = this.isInDialog(viewModel);\n    const uiState = viewModel && viewModel.uiState && viewModel.uiState.innerData || {};\n    const result = {};\n    staticParams.forEach((value, key, map) => {\n      if (!inDialog) {\n        // éæåæ°ä¸è½è¦çæ¥è¯¢åæ°\n        if (!queryParams.hasOwnProperty(key)) {\n          result[key] = value;\n        }\n      } else {\n        if (!queryParams.hasOwnProperty(key) && !uiState.hasOwnProperty(key)) {\n          result[key] = value;\n        }\n      }\n    });\n    return result;\n  }\n  /**\n   * æ¯å¦å¨å¼¹çªå\n   * @param viewModel viewmodel\n   */\n  private isInDialog(viewModel: ViewModel) {\n    let isInDialog = false;\n    if (viewModel && viewModel.uiState) {\n      // tslint:disable-next-line: max-line-length\n      if (viewModel.uiState.innerData && viewModel.uiState.innerData.hasOwnProperty('DEVKIT_DIALOG') || viewModel.uiState['DEVKIT_DIALOG']) {\n        isInDialog = true;\n      }\n    }\n    return isInDialog;\n  }\n  /**\n   * æ´æ°UIState\n   */\n  private updateUIState(viewModel: ViewModel, params: any) {\n    if (!viewModel || !params) {\n      return;\n    }\n    const uiState = viewModel.uiState;\n\n    // å¼å®¹ä½¿ç¨stringä¼ éparamså¯¹è±¡çåºæ¯\n    if (typeof params === 'string' && params !== '') {\n      params = JSON.parse(params);\n    }\n\n    // å¨UIStateä¸ºåæ°åå»ºå±æ§\n    Object.keys(params).forEach((propName: string) => {\n      uiState.setPropertyValue(propName, params[propName]);\n      if (propName && propName === 'union_session') {\n        let sessionInfo = params[propName];\n        this.setSessionInfo(viewModel, sessionInfo);\n      }\n    });\n  }\n  private setSessionInfo(viewModel: ViewModel, sessionInfo: any) {\n    if (!viewModel || !sessionInfo) {\n      return;\n    }\n    if (sessionInfo && typeof sessionInfo === 'string' && sessionInfo.startsWith('{') && sessionInfo.endsWith('}')) {\n      sessionInfo = JSON.parse(sessionInfo);\n    }\n    const token = sessionInfo && sessionInfo.token || null;\n    const sessionId = sessionInfo && sessionInfo.sessionId || null;\n    if (token) {\n      viewModel.frameContext.appContext.Token = token;\n    }\n    if (sessionId) {\n      const befRepository = viewModel.frameContext.repository as BefRepository<any>;\n      if (befRepository) {\n        befRepository.restService.sessionService.setBeSessionId(sessionId);\n      }\n    }\n  }\n  /**\n   * è·ååè½èåid\n   */\n  private getFuncId(queryParams: any): any {\n    if (!queryParams) {\n      return;\n    }\n    return queryParams['funcId'];\n  }\n\n  /**\n   * è·ååºç¨id\n   */\n  private getAppId(queryParams: any): any {\n    if (!queryParams) {\n      return;\n    }\n    return queryParams['appId'];\n  }\n  private getTabId(queryParams: any) {\n    if (!queryParams) {\n      return;\n    }\n    return queryParams['tabId'];\n  }\n  /**\n   * è·åurlåæ°å¯¹è±¡\n   * @param queryParams urlåæ°\n   */\n  private getParams(queryParams: any): { [propName: string]: any } {\n    if (!queryParams) {\n      return {};\n    }\n    let result = {};\n    if (queryParams.hasOwnProperty('WEB_FORM_ROUTE_PARAMS')) {\n      let webFormRouteParams: string = queryParams['WEB_FORM_ROUTE_PARAMS'];\n      if (webFormRouteParams && webFormRouteParams.startsWith('{') && webFormRouteParams.endsWith('}')) {\n        webFormRouteParams = decodeURI(encodeURI(webFormRouteParams).replace(/%0A/g, '\\\\n').replace(/%09/g, '\\\\t').replace(/%0D/g, '\\\\r'));\n        result = JSON.parse(webFormRouteParams);\n      }\n      Object.keys(queryParams).forEach(prop => {\n        if (prop !== 'WEB_FORM_ROUTE_PARAMS') {\n          result[prop] = queryParams[prop];\n        }\n      });\n      return result;\n    }\n    return queryParams;\n  }\n  private highOrderInvoke(callback) {\n    return () => {\n      try {\n        const queryParams = this.getParams(this.params);\n        const tabId = this.getTabId(queryParams);\n        if (tabId) {\n          const controlEvent = this.runtimeFrameworkService.getMenuSwitchControlEvent();\n          if (controlEvent && isObservable(controlEvent)) {\n            controlEvent.subscribe((event: any) => {\n              if (event) {\n                event.next('ok');\n              }\n            });\n          }\n        }\n      } catch (e) { console.warn(e); }\n      if (callback && typeof callback === 'function') {\n        callback();\n      }\n    }\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { FrameContext, BindingData, BindingList, BindingObject } from '@farris/devkit';\n\n/**\n * å®ä½éåæå¡\n * @todo\n * å®ä½å±æ²¡æå°è£ç¸å³æ¹æ³ï¼ä¸´æ¶éè¿BindingDataæ¥è·åæ°æ®\n */\n@Injectable()\nclass EntityTraversingService {\n\n  private get bindingData(): BindingData {\n    return this.frameContext.bindingData;\n  }\n\n  constructor(private frameContext: FrameContext) {\n  }\n\n  /**\n   * è·åå¼\n   */\n  public getPropValue(path: string[]): any {\n    return this.bindingData.getValue(path);\n  }\n\n  /**\n   * è·åå®ä½æ°æ®\n   */\n  public getEntityData(path: string[]): any {\n    let bindingObj: BindingObject;\n    const bindingListOrObject = this.bindingData.getValue(path);\n    if (bindingListOrObject instanceof BindingList === true) {\n      bindingObj = bindingListOrObject.currentItem;\n    } else {\n      bindingObj = bindingListOrObject;\n    }\n    return bindingObj.toJSON();\n  }\n\n  /**\n   * è·åå®ä½åè¡¨æ°æ®\n   */\n  public getEntityListData(path: string[]): any[] {\n    const bindingList = this.bindingData.getValue(path) as BindingList;\n    return bindingList.toJSON();\n  }\n\n}\n\nexport { EntityTraversingService };\n","import { Injectable } from '@angular/core';\nimport { FrameContext, BindingData } from '@farris/devkit';\n\n@Injectable()\nclass EntityManipulationService {\n\n  private get bindingData(): BindingData {\n    return this.frameContext.bindingData;\n  }\n\n  constructor(private frameContext: FrameContext) {\n  }\n\n  /**\n   * è®¾ç½®pathå¯¹åºçå­æ®µå¼\n   */\n  public setPropValue(path: string[], value: any): any {\n\n    // å®ä½å±è¿æ²¡æå°è£ï¼ä¸´æ¶ç¨BindingDataç¸å³æ¹æ³ä»£æ¿\n    this.bindingData.setValue(path, value, true, true);\n  }\n\n}\n\nexport { EntityManipulationService };\n","import { Injectable } from '@angular/core';\nimport { FrameContext, BindingData, BindingList, BindingObject } from '@farris/devkit';\nimport { EntityTraversingService } from './entity-traversing.service';\n\ninterface SplitedPath {\n  listPath: string[];\n  propPath: string[];\n}\n\n/**\n * å®ä½èåæå¡\n */\n@Injectable()\nclass EntityAggregationService {\n\n  private get bindingData(): BindingData {\n    return this.frameContext.bindingData;\n  }\n\n  private traversingService: EntityTraversingService;\n\n  constructor(private frameContext: FrameContext) {\n    this.traversingService   = this.frameContext.injector.get<EntityTraversingService>(EntityTraversingService);\n  }\n\n  /**\n   * è·åpathå¯¹åºåè¡¨è®°å½çæ¡æ°\n   */\n  public count(path: string[]): number {\n    const splitedPath = this.splitPath(path);\n    const entityListData = this.traversingService.getEntityListData(splitedPath.listPath);\n    return entityListData.length;\n  }\n\n  /**\n   * è·åpathå¯¹åºå­æ®µçå\n   */\n  public sum(path: string[]) {\n    const splitedPath = this.splitPath(path);\n    const entityListData = this.traversingService.getEntityListData(splitedPath.listPath);\n\n    const total = entityListData.reduce((accTotal: number, entityData: any) => {\n      let propValue = parseFloat(this.getPropValue(entityData, splitedPath.propPath));\n      propValue = isNaN(propValue) ? 0 : propValue;\n      accTotal += propValue;\n      return accTotal;\n    }, 0);\n    return total;\n  }\n\n  /**\n   * è·åpathå¯¹åºå­æ®µçå¹³åå¼\n   */\n  public avg(path: string[]) {\n    const count = this.count(path);\n    const total = this.sum(path);\n    return count !== 0 ? total / count : 0;\n  }\n\n  /**\n   * è·åpathå¯¹åºå­æ®µçæå¤§å¼\n   */\n  public max(path: string[]): number {\n    const splitedPath = this.splitPath(path);\n    const entityListData = this.traversingService.getEntityListData(splitedPath.listPath);\n\n    const max =  entityListData.reduce((accMax: number, entityData: any) => {\n      const propValue = parseFloat(this.getPropValue(entityData, splitedPath.propPath));\n      if (isNaN(propValue) === false && ( !accMax || propValue > accMax)) {\n        accMax = propValue;\n      }\n      return accMax;\n    }, null);\n    return max ? max : 0;\n  }\n\n  /**\n   * è·åpathå¯¹åºå­æ®µçæå°å¼\n   */\n  public min(path: string[]): number {\n    const splitedPath = this.splitPath(path);\n    const entityListData = this.traversingService.getEntityListData(splitedPath.listPath);\n\n    const min = entityListData.reduce((accMin: number, entityData: any) => {\n      const propValue = parseFloat(this.getPropValue(entityData, splitedPath.propPath));\n      if (isNaN(propValue) === false && ( !accMin || propValue < accMin)) {\n        accMin = propValue;\n      }\n      return accMin;\n    }, null);\n    return min ? min : 0;\n  }\n\n  /**\n   * è·åå±æ§å¼\n   */\n  private getPropValue(entityData: any, path: string[]) {\n    let currentData = entityData;\n    path.forEach((pathItem: string) => {\n\n      // æåéåºçé½éç½®ä¸ºnullï¼ä¸»è¦éå¯¹å³èå¯¹è±¡æªèµå¼åºæ¯\n      if (!currentData) {\n        currentData = null;\n        return;\n      }\n      currentData = currentData[pathItem];\n    });\n\n    return currentData;\n  }\n\n  /**\n   * åéè·¯å¾ï¼åéç¬¦åè¡¨è·¯å¾åå±æ§è·¯å¾\n   * @return å½¢å¦ {parentListPath: [], propertyPath: []}\n   */\n  private splitPath(path: string[]): SplitedPath {\n    const listPath = path.concat([]);\n    const propPath = [];\n    let currentNode = this.bindingData.getValue(listPath);\n    while (currentNode instanceof BindingList !== true) {\n      const propPathItem = listPath.pop();\n      if (!propPathItem) {\n        return;\n      }\n      propPath.unshift(propPathItem);\n      currentNode = this.bindingData.getValue(listPath);\n    }\n\n    return {\n      listPath: listPath,\n      propPath: propPath\n    };\n  }\n\n}\n\nexport { EntityAggregationService };\n","/*\n * @Author: aalizzwell \n * @Date: 2019-05-29 19:07:30 \n * @Last Modified by: aalizzwell\n * @Last Modified time: 2019-05-29 19:31:19\n */\nimport { Injectable } from '@angular/core';\nimport { BindingData } from '@farris/devkit';\n\n/**\n * EntityListæå¡\n * @scope FrameComponent\n */\n@Injectable()\nclass EntityListService {\n\n  constructor(private bindingData: BindingData) {}\n\n    /**\n     * è·åå½åé¡µç \n     */\n    public get pageIndex() {\n        return this.bindingData.list.pageIndex;\n    }\n\n    /**\n     * è·åå½ååé¡µå¤§å°\n     */\n    public get pageSize() {\n        return this.bindingData.list.pageSize;\n    }\n}\n\nexport { EntityListService };\n","import { Injectable } from '@angular/core';\nimport { FrameContext } from '@farris/devkit';\nimport { EntityTraversingService } from './entity-traversing.service';\nimport { EntityManipulationService } from './entity-manipulation.service';\nimport { EntityAggregationService} from './entity-aggregation.service';\n\n/**\n * å®ä½æå¡\n * @scope FrameComponent\n */\n@Injectable()\nclass EntityService {\n\n  private traversingService: EntityTraversingService;\n\n  private manipulationService: EntityManipulationService;\n\n  private aggregationService: EntityAggregationService;\n\n  constructor(private frameContext: FrameContext) {\n    const injector = this.frameContext.injector;\n    this.traversingService   = injector.get<EntityTraversingService>(EntityTraversingService);\n    this.manipulationService = injector.get<EntityManipulationService>(EntityManipulationService);\n    this.aggregationService  = injector.get<EntityAggregationService>(EntityAggregationService);\n  }\n\n  /**\n   * è·åpathå¯¹åºçå±æ§å¼\n   */\n  public getPropValue(path: string[]): any {\n    return this.traversingService.getPropValue(path);\n  }\n\n  /**\n   * è®¾ç½®pathå¯¹åºçå±æ§å¼\n   */\n  public setPropValue(path: string[], value: any): void {\n    return this.manipulationService.setPropValue(path, value);\n  }\n\n  /**\n   * è®¾ç½®pathå¯¹åºçEntityæ°æ®\n   */\n  public getEntityData(path: string[]): any {\n    return this.traversingService.getEntityData(path);\n  }\n\n  /**\n   * è®¾ç½®pathå¯¹åºçEntityListæ°æ®\n   */\n  public getEntityListData(path: string[]): any {\n    return this.traversingService.getEntityListData(path);\n  }\n\n  /**\n   * è·åpathå¯¹åºEntityListè®°å½æ°\n   */\n  public count(path: string[]): number {\n    return this.aggregationService.count(path);\n  }\n\n  /**\n   * è·åpathå¯¹åºå±æ§çåè®¡å¼\n   */\n  public sum(path: string[]): number {\n    return this.aggregationService.sum(path);\n  }\n\n  /**\n   * è·åpathå¯¹åºå±æ§çå¹³åå¼\n   */\n  public avg(path: string[]): number {\n    return this.aggregationService.avg(path);\n  }\n\n  /**\n   * è·åpathå¯¹åºå±æ§çæå¤§å¼\n   */\n  public max(path: string[]): number {\n    return this.aggregationService.max(path);\n  }\n\n  /**\n   * è·åpathå¯¹åºå±æ§çæå°å¼\n   */\n  public min(path: string[]): number {\n    return this.aggregationService.min(path);\n  }\n}\n\nexport { EntityService };\n","import { Injectable, Injector } from \"@angular/core\";\nimport { AppContext, DataTypeInfo, Entity, FrameContext, Repository } from \"@farris/devkit\";\n\n@Injectable()\nexport class BindingPathService {\n  constructor(private injector: Injector, private appContext: AppContext, private repository: Repository<Entity>) { }\n  /**\n   * è·åç»ä»¶ä¸ä¸æçç»å®è·¯å¾\n   * @param frameContext ç»ä»¶ä¸ä¸æ\n   * @returns \n   */\n  public getBindingPathsByFrameContext(frameContext: FrameContext): string[] {\n    return frameContext && frameContext.viewModel && frameContext.viewModel.bindingPath && frameContext.viewModel.bindingPath.split('/').filter(p => p) || null;\n  }\n  /**\n   * éè¿BEè¡¨åè·åbindingPath\n   * @param dataTypeInfo \n   * @param tableName \n   * @param paths \n   * @param level\n   * @returns \n   */\n  public getBindingPathsByTableName(dataTypeInfo: DataTypeInfo, tableName: string, paths: string[] = [], level: number = 0): string[] {\n    level++;\n    if (dataTypeInfo.entityInfo && (dataTypeInfo.entityInfo.nodeCode === tableName || dataTypeInfo.entityInfo.originalCode === tableName)) {\n      if (level !== 1) {\n        paths.push(dataTypeInfo.entityInfo.nodeCode);\n      }\n      return paths;\n    }\n    const props = Array.from(dataTypeInfo.propInfoMap.values()).filter(p => p.typeInfo);\n    if (props.length < 1) {\n      paths = [];\n      return paths;\n    }\n    if (dataTypeInfo.entityInfo) {\n      if (level !== 1) {\n        paths.push(dataTypeInfo.entityInfo.nodeCode);\n      }\n    }\n\n    for (let idx = 0; idx < props.length; idx++) {\n      const dataTypeInfo = props[idx].typeInfo;\n      const path = this.getBindingPathsByTableName(dataTypeInfo, tableName, paths, level);\n      if (!path || path.length < 1) {\n        continue;\n      } else {\n        paths = paths.concat(path);\n        return paths;\n      }\n    }\n    return null;\n  }\n  /**\n   * è·åå±æ§è·¯å¾ä¸­çç»å®è·¯å¾\n   * @param paths paths\n   * @param entityTypeInfo \n   * @returns \n   */\n  public getBindingPathsByPath(paths: string[] | string, entityTypeInfo: DataTypeInfo): string[] {\n    let nodeCodes = [];\n    if (typeof paths === 'string') {\n      paths = paths.split('/').filter(p => p);\n    }\n    paths = paths.concat([]);\n    while (paths.length > 0) {\n      const dataPropInfo = entityTypeInfo.getPropInfoByPath(paths);\n      if (dataPropInfo.group === 'List') {\n        nodeCodes = paths;\n        break;\n      }\n      paths.pop();\n    }\n    return nodeCodes;\n  }\n  /**\n   * è·åå±æ§è·¯å¾ä¿¡æ¯\n   * @param path å±æ§è·¯å¾\n   * @returns \n   */\n  public getPathInfo(path: string): { bindingPath: string, propertyName: string, bindingPaths: string[], propertyNames: string[] } {\n    const paths = path.split('/').filter(p => p);\n    // è·åæå¤§å®ä½å±çº§ï¼å¶ä½ä¸ºå±æ§ï¼ç®åå±æ§ãudtãå³èãå³èåµå¥å³èï¼\n    const entityPath = this.getBindingPathsByPath(paths, this.repository.entityTypeInfo);\n    const propertyName = paths.slice(entityPath.length).join('/');\n    return { bindingPath: entityPath.join('/'), propertyName, bindingPaths: entityPath, propertyNames: propertyName.split('/').filter(p => p) };\n  }\n}","import { Injectable } from \"@angular/core\";\nimport { FrameContext, NgFormControl } from \"@farris/devkit\";\n\n@Injectable()\nexport class FormControlService {\n  constructor() { }\n  public getFormControlsByFrameContext(frameContext: FrameContext): { [propertyName: string]: NgFormControl } | null {\n    return frameContext && frameContext.form && frameContext.form.ngFormControls || null;\n  }\n  /**\n   * éè¿bindingåæ°æ®è·åNgFormControl\n   * @param frameContext \n   * @param binding binding\n   * @returns \n   */\n  public getFormControlByBinding(frameContext: FrameContext, binding: string): NgFormControl {\n    const ngFormControls = this.getFormControlsByFrameContext(frameContext);\n    if (!ngFormControls) {\n      return null;\n    }\n    return Object.values(ngFormControls).find((ngFormControl: NgFormControl) => ngFormControl && ngFormControl.binding === binding);\n\n  }\n  /**\n   * \n   * @param frameContext frameContext\n   * @param fullPath \n   * @returns \n   */\n  public getFormControlIndexByFullPath(frameContext: FrameContext, fullPath: string): number {\n    const ngFormControls = this.getFormControlsByFrameContext(frameContext);\n    if (!ngFormControls) {\n      return null;\n    }\n    const bindings = fullPath.split('/').filter(p => p);\n    return Object.values(ngFormControls).findIndex((ngFormControl: NgFormControl) => {\n      if (!ngFormControl) {\n        return false;\n      }\n      const bindingPath = frameContext.viewModel.bindingPath;\n      const bindingPaths = bindingPath.split('/').filter(p => p);\n      const formControlBindingPaths = ngFormControl.binding.split('.').filter(p => p);\n      const fullPath = bindingPaths.concat(formControlBindingPaths);\n      return fullPath.join('/') === bindings.join('/');\n    });\n  }\n  /**\n   * éè¿bindingåæ°æ®è·åNgFormControlä½ç½®\n   * @param frameContext \n   * @param binding binding\n   * @returns ä»0å¼å§\n   */\n  public getFormControlIndexByBinding(frameContext: FrameContext, binding: string): number {\n    const ngFormControls = this.getFormControlsByFrameContext(frameContext);\n    if (!ngFormControls) {\n      return null;\n    }\n    return Object.values(ngFormControls).findIndex((ngFormControl: NgFormControl) => ngFormControl && ngFormControl.binding === binding);\n  }\n}","import { Injectable, Injector } from \"@angular/core\";\nimport { AppContext, DataPropInfo, Entity, FrameContext, Repository } from \"@farris/devkit\";\nimport { BindingPathService } from \"./binding-path.service\";\nimport { FormControlService } from './form-control.service';\n\n@Injectable()\nexport class FrameContextService {\n  constructor(\n    private injector: Injector, \n    private appContext: AppContext, \n    private frameContext: FrameContext, \n    private repository: Repository<Entity>,\n    private bindingPathService: BindingPathService,\n    private formControlService: FormControlService\n    ) { }\n  /**\n     * éè¿BEè¡¨åè·åå¯¹åºçframeContext\n     * @param tableName \n     * @returns \n     */\n  public getFrameContextsByTableName(tableName: string): null | FrameContext[] {\n    if (!tableName) {\n      throw new Error('tableName ä¸è½ä¸ºç©ºã');\n    }\n    const dataTypeInfo = this.repository && this.repository.entityTypeInfo || null;\n    if (!dataTypeInfo) {\n      return null;\n    }\n    const bindingPaths = [];\n    this.bindingPathService.getBindingPathsByTableName(dataTypeInfo, tableName, bindingPaths);\n    const frameContexts = this.appContext && this.appContext.frameContextManager.getFrameContexts() || [];\n    if (!frameContexts || frameContexts.length === 0) {\n      return null;\n    }\n    return frameContexts.filter((frameContext: FrameContext) => frameContext && frameContext.viewModel && frameContext.viewModel.bindingPath.split('/').filter(p => p).join('/') === bindingPaths.join('/'));\n  }\n  /**\n   * æ ¹æ®å­æ®µå®æ´è·¯å¾è·åæå¨çä¸ä¸æ\n   * @param propertyPath \n   * @param separtor \n   * @returns \n   */\n  public getFrameContextsByPropertyPath(propertyPath: string, separtor: string = '/'): FrameContext[] {\n    if (!propertyPath) {\n      throw new Error('propertyPath ä¸è½ä¸ºç©ºã');\n    }\n    const frameContexts = this.appContext && this.appContext.frameContextManager.getFrameContexts() || [];\n    return frameContexts.filter((frameContext: FrameContext) => {\n      const formControls = frameContext && frameContext.form && frameContext.form.ngFormControls || {};\n      const bindingPath = frameContext && frameContext.viewModel && frameContext.viewModel.bindingPath || '';\n      if (formControls && Object.keys(formControls).length > 0) {\n        const key = Object.keys(formControls).find((key: string) => {\n          const formControl = formControls[key];\n          if (!formControl || !formControl.binding) {\n            return false;\n          }\n          const bindings = formControl.binding.split('.').filter(p => p);\n          const bindingPaths = bindingPath.split('/').filter(p => p);\n          const fullPath = bindingPaths.concat(bindings);\n          return propertyPath.split(separtor).filter(p => p).join('/') === fullPath.join('/');\n        });\n        return key ? true : false;\n      }\n      return false;\n    });\n  }\n  /**\n   * éè¿BEå­æ®µåè·åå­æ®µçbindingPath\n   * @param bindingPaths ç»å®è·¯å¾\n   * @param columnName BEå­æ®µå\n   * @returns \n   */\n  public getFrameContextsByColumnName(bindingPaths: string[], columnName: string): FrameContext[] | null {\n    if (!bindingPaths) {\n      throw new Error('bindingPath ä¸è½ä¸ºç©ºã');\n    }\n    if (!columnName) {\n      throw new Error('columnName ä¸è½ä¸ºç©ºã');\n    }\n    bindingPaths = bindingPaths.filter(p => p);\n    const entityTypeInfo = this.repository && this.repository.entityTypeInfo || null;\n    if (!entityTypeInfo) {\n      return null;\n    }\n    const dataTypeInfo = entityTypeInfo.getTypeInfoByPath(bindingPaths);\n    const dataPropInfos = dataTypeInfo && dataTypeInfo.getPropInfos() || [];\n    const columnPropInfo = dataPropInfos.find((dataPropInfo: DataPropInfo) => dataPropInfo.metadataInfo && (dataPropInfo.metadataInfo.originalDataField === columnName || dataPropInfo.metadataInfo.dataField === columnName));\n    if (!columnPropInfo || !columnPropInfo.metadataInfo) {\n      return null;\n    }\n    const frameContexts = this.appContext.frameContextManager.getFrameContexts();\n    return frameContexts.filter((frameContext: FrameContext) => {\n      const ngFormControls = this.formControlService.getFormControlsByFrameContext(frameContext);\n      if (!ngFormControls || Object.keys(ngFormControls).length < 1) {\n        return false;\n      }\n      const currentBindingPaths = this.bindingPathService.getBindingPathsByFrameContext(frameContext) || [];\n      const isValidFrameContext = currentBindingPaths.join('/') === bindingPaths.join('/');\n      if (!isValidFrameContext) {\n        return false;\n      }\n      const ngFormControl = Object.values(frameContext.viewModel.form.ngFormControls).find(item => item.binding === columnPropInfo.metadataInfo.path);\n      return ngFormControl ? true : false;\n    });\n  }\n  \n  /**\n   * éè¿ç»å®è·¯å¾è·åå¯¹åºçç»ä»¶ä¸ä¸ææ°ç»\n   * @param bindingPath bindingPathå­ç¬¦ä¸²\n   * @param namespace ns,é»è®¤ä¸º''\n   */\n   public getFrameContextsByBindingPath(bindingPath: string | string[], namespace: string = ''): FrameContext[] {\n    if (Array.isArray(bindingPath)) {\n      bindingPath = bindingPath.join('/');\n    }\n    const frameContexts = this.appContext && this.appContext.frameContextManager.getFrameContexts() || [];\n    return frameContexts.filter((frameContext: FrameContext) => frameContext && frameContext.namespace === namespace && frameContext.viewModel.bindingPath === bindingPath);\n  }\n}","import { Injectable, ElementRef } from '@angular/core';\nimport { Repository, FrameContext, NgFormControl } from '@farris/devkit';\nimport { FrameContextService } from './frame-context.service';\nimport { FormControlService } from './form-control.service';\n\nconst FIXED_COLUMN_START_INDEX = 5000;\nconst GRID_COLUMN_START_INDEX = 10000;\ninterface FocusableInvalidationGrid {\n  editCell(rowId: any, field: string): void;\n  disabled: boolean;\n}\n\n/**\n * è¡¨åéªè¯æå¡\n * @scope FrameComponent\n */\n@Injectable()\nclass FocusInvalidService {\n  /**\n   * æé å½æ°\n   */\n  constructor(\n    private repository: Repository<any>,\n    private frameContext: FrameContext,\n    private frameContextService: FrameContextService,\n    private formControlService: FormControlService\n  ) {\n  }\n\n  /**\n   * åç¬¬ä¸ä¸ªéªè¯ä¸éè¿çå­æ®µè®¾ç½®ç¦ç¹\n   */\n  public focusInvalidInput(verifyInformations: any[], rootElement: ElementRef<any>) {\n    // æ éªè¯ä¸éè¿ä¿¡æ¯æ¶ï¼ç´æ¥è¿åã\n    if (!verifyInformations || !verifyInformations.length) {\n      return;\n    }\n    let targetField = null;\n    const firstVerifyInformation = this.selectFirstVerifyInformation(verifyInformations, rootElement);\n    if (firstVerifyInformation) {\n      targetField = firstVerifyInformation.targetField;\n      if (targetField) {\n        const canFocus = this.focusElement(targetField, rootElement);\n        if (canFocus) {\n          verifyInformations['focused'] = true;\n        }\n      }\n    }\n  }\n\n  /**\n   * è®¾ç½®DataGridååæ ¼ç¦ç¹\n   */\n  public focusGridCell(verifyInformations: any[], focusableDataGrid: FocusableInvalidationGrid) {\n    if (!verifyInformations || !verifyInformations.length || verifyInformations['focused'] == true || focusableDataGrid.disabled === true) {\n      return;\n    }\n    let targetField = null;\n    let targetId = null;\n    const firstVerifyInformation = this.selectFirstVerifyInformation(verifyInformations);\n    if (firstVerifyInformation) {\n      targetField = firstVerifyInformation.targetField;\n      targetId = firstVerifyInformation.id;\n      verifyInformations['focused'] = true;\n      focusableDataGrid.editCell(targetId, targetField);\n    }\n  }\n  private updateVerifyInformationsIndex(verifyInformations: any[], rootElement?: ElementRef<any>) {\n    verifyInformations = verifyInformations.filter((verifyInformation: any) => {\n      const frameContexts = this.getFrameContextsByPropertyPath(verifyInformation.fullPath, '/');\n      const frameContext = frameContexts && frameContexts.filter(frameContext => frameContext && frameContext.frameId === this.frameContext.frameId);\n      return frameContext ? true : false;\n    });\n    return verifyInformations.map((verifyInformation: any) => {\n      let tabIndex = -1;\n      if (verifyInformation) {\n        if (rootElement && verifyInformation.targetField) {\n          const input = this.getInputElementById(verifyInformation.targetField, rootElement);\n          tabIndex = input && input.getAttribute('tabindex') || -1;\n          tabIndex = Number(tabIndex);\n        }\n        // const frameContexts = this.getFrameContextsByPropertyPath(verifyInformation.fullPath, '/');\n        const frameContext = this.frameContext;//frameContexts && frameContexts[0] || null;\n        const frameIndex = frameContext.index + 1;\n        verifyInformation.tabIndex = tabIndex;\n        verifyInformation.domIndex = -1;\n        verifyInformation.frameIndex = -1;\n        verifyInformation.position = tabIndex;\n        if (frameContext) {\n          const domIndex = verifyInformation.fullPath && this.getFieldIndex(frameContext, verifyInformation.fullPath) || 0;\n          if (domIndex > 0) {\n            const rowIndex = verifyInformation.index || 0;\n            verifyInformation.domIndex = domIndex;\n            verifyInformation.frameIndex = frameContext.index;\n            verifyInformation.position = tabIndex > 0 ? tabIndex : (frameIndex * 1000 + rowIndex * 1000 + domIndex);\n          }\n        }\n      }\n      return verifyInformation;\n    });\n  }\n  private isGridComponent(frameContext: FrameContext) {\n    if (frameContext) {\n      const dataGridColumnsName = frameContext.viewModel['dataGridColumnsName'] || null;\n      return dataGridColumnsName ? true : false;\n    }\n    return undefined;\n  }\n  private getColumnIndex(frameContext: FrameContext, binding: string) {\n    binding = binding.split('/').filter(p => p).join('/');\n    const bindingPaths = frameContext.viewModel.bindingPath.split('/').filter(p => p);\n    const dataGridColumnsName = frameContext.viewModel['dataGridColumnsName'] || null;\n    const frameIndex = frameContext.index + 1;\n    if (!dataGridColumnsName) {\n      return undefined;\n    }\n    let columns: any[] = frameContext.viewModel[dataGridColumnsName];\n    if (!columns || columns.length < 1) {\n      return undefined;\n    }\n    // æå¹³columns\n    columns = columns.reduce((results: any[], item) => {\n      if (Array.isArray(item)) {\n        return results.concat(item);\n      }\n      return results.concat([item]);\n    }, []);\n    let position = -1;\n    for (let index = 0; index < columns.length; index++) {\n      const column: any | any[] = columns[index];\n      const fields = column && column.field && column.field.split('.').filter(p => p) || null;\n      if (!fields) {\n        continue;\n      }\n      if (bindingPaths.concat(fields).join('/') === binding) {\n        const fixed = column.fixed;\n        if (fixed) {\n          const fixedColumns = columns.filter(item => item.fixed === fixed);\n          const fixedColumnIndex = this.getIndexFromColumns(fixedColumns, binding);\n          if (fixed === 'left') {\n            position = frameIndex * FIXED_COLUMN_START_INDEX + fixedColumnIndex;\n          } else {\n            position = frameIndex * GRID_COLUMN_START_INDEX + 1000 + fixedColumnIndex;\n          }\n        } else {\n          position = frameIndex * GRID_COLUMN_START_INDEX + index;\n        }\n        break;\n      }\n    }\n    return position;\n  }\n  private getIndexFromColumns(columns: any[], binding: string) {\n    const bindingPaths = this.frameContext.viewModel.bindingPath.split('/').filter(p => p);\n    return columns.findIndex(column => {\n      const fields = column && column.field && column.field.split('.').filter(p => p) || null;\n      if (!fields) {\n        return false;\n      }\n      if (bindingPaths.concat(fields).join('/') === binding) {\n        return true;\n      }\n      return false;\n    });\n  }\n  private selectFirstVerifyInformation(verifyInformations: any[], rootElement?: ElementRef<any>) {\n    verifyInformations = this.updateVerifyInformationsIndex(verifyInformations, rootElement);\n    verifyInformations.sort((v1: any, v2: any) => Number(v1.position) - Number(v2.position));\n    return verifyInformations && verifyInformations.length > 0 && verifyInformations[0] || null;\n  }\n  private getInputElementById(targetField: string, rootElement: ElementRef<any>) {\n    let element = rootElement.nativeElement.ownerDocument.getElementById(targetField) || null;\n    if (element && element.tagName !== 'INPUT') {\n      const inputs = element.getElementsByTagName('input');\n      if (inputs.length) {\n        element = inputs[0];\n      }\n    }\n    return element;\n  }\n  public getFrameContextsByPropertyPath(propertyPath: string, separtor: string = '/'): FrameContext[] {\n    if (!propertyPath) {\n      return [];\n    }\n    const frameContexts = this.frameContext && this.frameContext.appContext.frameContextManager.getFrameContexts() || [];\n    return frameContexts.filter((frameContext: FrameContext) => {\n      const formControls = frameContext && frameContext.form && frameContext.form.ngFormControls || {};\n      const bindingPath = frameContext && frameContext.viewModel && frameContext.viewModel.bindingPath || '';\n      if (formControls && Object.keys(formControls).length > 0) {\n        const key = Object.keys(formControls).find((key: string) => {\n          const formControl = formControls[key];\n          if (!formControl || !formControl.binding) {\n            return false;\n          }\n          const bindings = formControl.binding.split('.').filter(p => p);\n          const bindingPaths = bindingPath.split('/').filter(p => p);\n          const fullPath = bindingPaths.concat(bindings);\n          return propertyPath.split(separtor).filter(p => p).join('/') === fullPath.join('/');\n        });\n        return key ? true : false;\n      }\n      return false;\n    });\n  }\n  public getFormControlIndexByBindingPath(frameContext: FrameContext, binding: string): number {\n    const ngFormControls = this.getFormControlsByFrameContext(frameContext);\n    if (!ngFormControls) {\n      return null;\n    }\n    const bindings = binding.split('/').filter(p => p);\n    return Object.values(ngFormControls).findIndex((ngFormControl: NgFormControl) => {\n      if (!ngFormControl) {\n        return false;\n      }\n      const bindingPath = frameContext.viewModel.bindingPath;\n      const bindingPaths = bindingPath.split('/').filter(p => p);\n      const formControlBindingPaths = ngFormControl.binding.split('.').filter(p => p);\n      const fullPath = bindingPaths.concat(formControlBindingPaths);\n      return fullPath.join('/') === bindings.join('/');\n    });\n  }\n  public getFieldIndex(frameContext: FrameContext, binding: string) {\n    const isGridComponent = this.isGridComponent(frameContext);\n    if (isGridComponent) {\n      return this.getColumnIndex(frameContext, binding);\n    } else {\n      return this.getFormControlIndexByBindingPath(frameContext, binding);\n    }\n  }\n  public getFormControlsByFrameContext(frameContext: FrameContext): { [propertyName: string]: NgFormControl } | null {\n    return frameContext && frameContext.form && frameContext.form.ngFormControls || null;\n  }\n  public focusElement(elementId: string, rootElement: ElementRef<any>): boolean {\n    let focused = false;\n    let elementToFocus = rootElement.nativeElement.ownerDocument.getElementById(elementId);\n    // æªè·åå°æå®å­æ®µæ¶ï¼è¿åï¼ä¸åè®¾ç½®ç¦ç¹ã\n    if (elementToFocus) {\n      // å¦ææå¤ä¸ªidéå¤çåç´ ï¼åä¸å®ä½\n      const elements = rootElement.nativeElement.ownerDocument.querySelectorAll(`#${elementId}`);\n      if (elements && elements.length > 1) {\n        return focused;\n      }\n      // å¦æç»å®ç®æ å­æ®µçæ§ä»¶ä¸æ¯Inputåç´ ï¼åæ¥æ¾å¶ä¸çº§èç¹ã\n      if (elementToFocus.tagName !== 'INPUT') {\n        const subElements = elementToFocus.getElementsByTagName('input');\n        if (subElements.length) {\n          elementToFocus = subElements[0];\n        }\n      }\n      elementToFocus.focus();\n      focused = true;\n    }\n    return focused;\n  }\n  /**\n   * è®¾ç½®ç¦ç¹\n   * @param verifyInformation éè¯¯ä¿¡æ¯\n   * @param frameContext ä¸ä¸æ\n   * @returns \n   */\n  public focus(verifyInformation: any, frameContext: FrameContext) {\n    if (!verifyInformation) {\n      return;\n    }\n    const isGridValidation = verifyInformation.index !== null;\n    if (isGridValidation) {\n      const grid = this.getGridRef(frameContext);\n      if (grid) {\n        setTimeout(() => {\n          grid.editCell(verifyInformation.id, verifyInformation.targetField);\n        }, 0);\n      }\n    } else {\n      const frameElement = this.getComponentRef(frameContext);\n      const elementId = verifyInformation.targetField;\n      this.focusById(elementId, frameElement);\n    }\n  }\n\n  /**\n   * éè¿æ§ä»¶idè®¾ç½®ç¦ç¹\n   * @param elementId \n   * @param elementRef \n   */\n  private focusById(elementId: string, elementRef?: ElementRef) {\n    const document: any = elementRef && elementRef.nativeElement.ownerDocument || window.document;\n    if (document) {\n      const element = document.getElementById(elementId);\n      if (element.tagName !== 'INPUT') {\n        const subElements = element.getElementsByTagName('input');\n        if (subElements.length) {\n          const input = subElements[0];\n          if (input && typeof input.focus === 'function') {\n            input.focus();\n          }\n        }\n      } else {\n        element.focus();\n      }\n    }\n  }\n  /**\n   * è·åç»ä»¶å®ä¾\n   * @param frameContext \n   * @returns \n   */\n  private getComponentRef(frameContext: FrameContext) {\n    return this.frameContext && this.frameContext.injector.get<ElementRef>(ElementRef, null) || null;\n  }\n  /**\n   * è·ågridå®ä¾\n   * @param frameContext frameContext\n   * @returns \n   */\n  private getGridRef(frameContext: FrameContext): FocusableInvalidationGrid {\n    const namespace = frameContext.namespace;\n    const bindingPath = frameContext.viewModel.bindingPath;\n    const frameContexts: FrameContext[] = this.frameContext.appContext.frameContextManager.getFrameContextsByNamespace(namespace) || [];\n    const matchedFrameContexts = frameContexts.filter((frameContext: FrameContext) => frameContext.viewModel && frameContext.viewModel.bindingPath.split('/').filter(p => p).toString() === bindingPath.split('/').filter(p => p).toString());\n    let result = null;\n    if (matchedFrameContexts) {\n      matchedFrameContexts.every((frameContext: FrameContext) => {\n        const frameId = frameContext.frameId;\n        const componentsMap = this.frameContext.appContext.componentManager.getComponentsByFrameId(frameId);\n        if (!componentsMap) {\n          return true;\n        }\n        const datagridComponent = Array.from(componentsMap.values()).find((component: any) => component && component['__component_type__'] === 'DatagridComponent');\n        if (datagridComponent) {\n          result = datagridComponent;\n          return false;\n        } else {\n          return true;\n        }\n      });\n    }\n    return result;\n  }\n}\n\nexport { FocusableInvalidationGrid, FocusInvalidService };\n","import { Injectable } from '@angular/core';\nimport { Repository, FrameContext} from '@farris/devkit';\nimport { switchMap } from 'rxjs/operators';\nimport { Observable, Subject, Subscriber } from 'rxjs';\nimport { of } from 'rxjs/observable/of';\nimport { FormNotifyService } from './form-notify.service';\nimport { LanguageService } from './languag.service';\n\n\nconst POSTER = 'iframePoster';\nconst RECEIVER = 'iframeReceiver';\nconst REPOSITORY = 'repository';\n// window.hashä¸­funcIdçå±æ§å\nconst FUNC_ID = 'funcId=';\nconst TAB_ID = 'tabId=';\n/**\n * ChangeItemService\n * @scope FrameComponent\n */\n@Injectable()\nclass ChangeItemService {\n\n  public top = top;\n  private funcId: string;\n  private tabId: string;\n  public itemChangePoster = new Subject<any>();\n  public itemChangeReceiver = new Subject<any>();\n  /**\n   * æé å½æ°\n   */\n  constructor(\n    private repository: Repository<any>,\n    private frameContext: FrameContext,\n    private notifyService: FormNotifyService,\n    private languageService: LanguageService\n  ) {\n  }\n\n  init() {\n    this.top['topMap'] = this.top['topMap'] || {};\n    this.changeItem = this.changeItem.bind(this);\n  }\n\n  setBykey(key: string, value: any) {\n    this.top['topMap'] = this.top['topMap'] || {};\n    this.top['topMap'][this.tabId] = this.top['topMap'][this.tabId] || {};\n    const topObject = this.top['topMap'][this.tabId];\n    topObject[key] = value;\n  }\n\n  getByKey(key: string) {\n    const topObject = this.top['topMap'][this.tabId] || {};\n    return topObject[key];\n  }\n\n  // å»ºç«iframeéä¿¡\n  setIframePoster() {\n    if (this.getByKey[POSTER]) {\n      return;\n    } else {\n      this.setBykey(POSTER, this.itemChangePoster);\n    }\n  }\n\n  getIframePoster() {\n    this.itemChangePoster = this.getByKey(RECEIVER);\n    this.setBykey(RECEIVER, this.itemChangeReceiver);\n  }\n\n  changeItem(type: string, id: string, parentId: string) {\n    // æ ¹æ®æ¯å¦æ¯å¼¹åºå¼å¡çåä¸åçtabId\n    const virtualRootFrameContext = this.frameContext.getVirtualRootFrameContext();\n    const virtualRootComponent = virtualRootFrameContext.frameComponent;\n    const isDialogComponent = virtualRootComponent['isDialogRootComponent'] || false;\n    if (isDialogComponent) {\n      this.tabId = window.location.hash.split(TAB_ID)[1].slice(0, window.location.hash.split(TAB_ID)[1].indexOf('&'));\n    } else {\n      this.tabId = parentId;\n    }\n    this.itemChangeReceiver = this.getByKey(RECEIVER);\n    return Observable.create((subscriber: Subscriber<any>) => {\n      this.getNextItemByCurrentId(id, type).subscribe((result: any) => {\n        subscriber.next(result);\n      });\n    });\n  }\n\n  // å¨liståå§åæ¶è°ç¨ï¼ç¼å­listçrepository\n  setRepository() {\n    if (window.location.hash.includes(TAB_ID)) {\n      this.tabId = window.location.hash.split(TAB_ID)[1].slice(0, window.location.hash.split(TAB_ID)[1].indexOf('&'));\n      this.setBykey(REPOSITORY, this.frameContext.repository);\n      this.setIframePoster();\n      this.getIframePoster();\n    }\n  }\n\n  // æ ¹æ®ç±»ååidè·åç¸é»çæ°æ®\n  getNextItemByCurrentId(currentId: string, type: string) {\n    const repository = this.getByKey(REPOSITORY);\n    const { pageSize, pageIndex, total } = repository.entityCollection.paginationInfo;\n    let currentIdx = null;\n    const list = repository.entityCollection.getAllEntities();\n    list.find((x: any, idx: string) => {\n      if (x.id === currentId) {\n        currentIdx = idx;\n      }\n    });\n    // æ²¡æå¨åè¡¨ä¸­æ¾å°æ°æ®ï¼è¿åç©º\n    if (currentIdx === null) {\n      // æ°å¢åæ¶å½åæ æ°æ®æ¶ç¹ä¸ä¸æ¡ä¸ä¸æ¡\n      if (list.length) {\n        switch (type) {\n          case 'prev':\n            return of(list[list.length - 1].id);\n            break;\n          case 'next':\n            this.notifyService.info(this.languageService.changeToLast, { hideTitle: true });\n            return of(null);\n            break;\n        }\n      }\n      return of(null);\n    }\n    let nextIdx = currentIdx;\n    switch (type) {\n      case 'prev':\n        // å½åé¡µç¬¬ä¸æ¡,ä¸éç¬¬ä¸é¡µ,åä¸ä¸é¡µæåä¸æ¡\n        if (currentIdx === 0 && pageIndex !== 1) {\n          return repository.getEntities([], [], pageSize, pageIndex - 1).pipe(\n            switchMap(result => {\n              nextIdx = pageSize - 1;\n              return of(result[nextIdx].id);\n            })\n          );\n        }\n        // ç¬¬ä¸é¡µç¬¬ä¸æ¡ï¼ä»è¿ååææ°æ®\n        else if (currentIdx === 0 && pageIndex === 1) {\n          this.notifyService.info(this.languageService.changeToFirst, { hideTitle: true });\n          return of(list[nextIdx].id);\n        }\n        // ä¸æ¯ç¬¬ä¸æ¡ï¼è¿åä¸ä¸æ¡\n        else {\n          nextIdx = currentIdx - 1;\n          return of(list[nextIdx].id);\n        }\n        break;\n      case 'next':\n        // è¶è¿å½åé¡µ\n        if (currentIdx + 1 + 1 > list.length) {\n          // ä¸éæåä¸æ¡æ°æ®,åä¸ä¸é¡µç¬¬ä¸æ¡æ°æ®\n          if (((pageIndex - 1) * pageSize + currentIdx + 1) < total) {\n            return repository.getEntities([], [], pageSize, pageIndex + 1).pipe(switchMap(result => {\n              return of(result[0].id);\n            }));\n          }\n          // æåä¸æ¡æ°æ®ï¼ä»è¿ååæ°æ®\n          else {\n            this.notifyService.info(this.languageService.changeToLast, { hideTitle: true });\n            return of(list[nextIdx].id);\n          }\n        } else {\n          nextIdx = currentIdx + 1;\n          return of(list[nextIdx].id);\n        }\n        break;\n    }\n  }\n\n\n}\n\nexport { ChangeItemService };\n","import { Injectable, Optional } from '@angular/core';\nimport { Observable, of, empty, EMPTY } from 'rxjs';\nimport { tap, switchMap, concatMap, catchError } from 'rxjs/operators';\nimport { Repository, BindingData, Entity, ViewModel, BindingList, EntityPathConverter, BindingObject } from '@farris/devkit';\nimport { BefRepository, BefRepositoryUtil, BefDataPathUtil } from '@farris/bef';\nimport { FormLoadingService } from '../form-loading/form-loading.service';\nimport { FormNotifyService } from '../form-notify.service';\nimport { LanguageService } from '../languag.service';\nimport { FormMessageService } from '../form-message.service';\nimport { FormErrorService } from '../error/form-error.service';\nimport { CommandService } from '../command-service';\nimport { FilterConditionService } from '../filter-condition.service';\n// tslint:disable: no-string-literal max-line-length\n\n/**\n * åè¡¨ä»åºæå¡\n */\n@Injectable()\nclass ListDataService {\n\n  /**\n   * æé \n   * @param msgService msgService\n   * @param repository repository\n   * @param bindingData bindingData\n   * @param loadingService loadingService\n   * @param languageService languageService\n   * @param formNotifyService formNotifyService\n   * @param formErrorService formErrorService\n   * ! @param viewModel viewModel,vmæ¯åææ³¨å¥çï¼èè¡¨åè·åä¸å°ï¼ä¸å®è¦åéç©ºå¤æ­\n   * @param filterConditionService filterConditionService\n   */\n  constructor(\n    private msgService: FormMessageService,\n    private repository: Repository<any>,\n    private bindingData: BindingData,\n    private loadingService: FormLoadingService,\n    @Optional() private languageService: LanguageService,\n    private formNotifyService: FormNotifyService,\n    private formErrorService: FormErrorService,\n    private viewModel: ViewModel,\n    private filterConditionService: FilterConditionService,\n  ) {\n    if (!languageService) {\n      this.languageService = LanguageService.getInstance();\n    }\n\n    // if (!filterConditionService) {\n    //   this.filterConditionService = new FilterConditionService();\n    // }\n  }\n\n  /**\n   * å è½½\n   */\n  public load(filter?: string, sort?: string): Observable<Entity[]> {\n\n    // åæ°å¤ç\n    filter = !filter ? '[]' : filter;\n    sort = !sort ? '[]' : sort;\n    // åå¹¶è¿æ»¤æ¡ä»¶\n    filter = this.mergeFilterConditions(filter);\n    // åå¹¶æåºæ¡ä»¶\n    sort = this.mergeSortConditions(sort);\n\n    const loadingTimerId = this.loadingService.showLoadingWithDelay(200);\n    const query$ = this.repository.getEntities(JSON.parse(filter), JSON.parse(sort), null, null);\n    return query$.pipe(\n      tap(\n        () => {\n          // è§¦åè¿ç«¯åè®¡äºä»¶\n          this.fireQueryEvent(filter);\n          this.loadingService.hideDelayLoading(loadingTimerId);\n        },\n        (error: any) => {\n          this.loadingService.hideDelayLoading(loadingTimerId);\n          this.formErrorService.exception(this.languageService.loadFailed, error);\n        }\n      )\n    );\n  }\n  /**\n   * è¿æ»¤æ°æ®\n   * @param filter è¿æ»¤æ¡ä»¶\n   * @param sort æåºæ¡ä»¶\n   */\n  public filter(filter?: string, sort?: string): Observable<Entity[]> {\n    // åæ°å¤ç\n    filter = !filter ? '[]' : filter;\n    sort = !sort ? '[]' : sort;\n    // åå¹¶è¿æ»¤æ¡ä»¶\n    filter = this.mergeFilterConditions(filter);\n    // åå¹¶æåºæ¡ä»¶\n    sort = this.mergeSortConditions(sort);\n\n    const loadingTimerId = this.loadingService.showLoadingWithDelay(200);\n    const query$ = this.repository.filter(JSON.parse(filter), JSON.parse(sort));\n    return query$.pipe(\n      tap(\n        () => {\n          // è§¦åè¿ç«¯åè®¡äºä»¶\n          this.fireQueryEvent(filter);\n          this.loadingService.hideDelayLoading(loadingTimerId);\n        },\n        (error: any) => {\n          this.loadingService.hideDelayLoading(loadingTimerId);\n          this.formErrorService.exception(this.languageService.loadFailed, error);\n        }\n      )\n    );\n  }\n  /**\n   * æ¥è¯¢\n   */\n  public query(filter: string, sort: string, pageSize: number, pageIndex: number): Observable<Entity[]> {\n    // åæ°å¤ç\n    filter = (filter === '') ? '[]' : filter;\n    sort = (sort === '') ? '[]' : sort;\n    // åå¹¶è¿æ»¤æ¡ä»¶\n    filter = this.mergeFilterConditions(filter);\n    // åå¹¶æåºæ¡ä»¶\n    sort = this.mergeSortConditions(sort);\n    // æ§è¡åæ°\n    const loadingTimerId = this.loadingService.showLoadingWithDelay(5);\n    const query$ = this.repository.getEntities(JSON.parse(filter), JSON.parse(sort), pageSize, pageIndex);\n    return query$.pipe(\n      tap(\n        () => {\n          // è§¦åè¿ç«¯åè®¡äºä»¶\n          this.fireQueryEvent(filter);\n          this.loadingService.hideDelayLoading(loadingTimerId);\n        },\n        (error: any) => {\n          this.loadingService.hideDelayLoading(loadingTimerId);\n          this.formErrorService.exception(this.languageService.queryFailed, error);\n        }\n      )\n    );\n  }\n\n  public queryChild(filter: string, sort: string) {\n    // const isUpdateWithPaging = this.viewModel.frameContext.root.params.get('updateWithPaging') || false;\n    // if (isUpdateWithPaging) {\n    //   return of(null);\n    // }\n    // tslint:disable-next-line: max-line-length\n    const fullPaths = EntityPathConverter.toEntityPathArray(this.viewModel.bindingPath, this.bindingData);\n    const paths = fullPaths.slice(0, fullPaths.length - 1);\n    // debug\n    // tslint:disable-next-line: max-line-length\n    const bindingPaths = this.viewModel.bindingPath.split('/').filter(item => item);\n    const bindingData = this.viewModel.bindingData;\n    let nodeCode = bindingPaths[bindingPaths.length - 1];\n    nodeCode = nodeCode.substr(0, nodeCode.length - 1);\n    // è·åä¸çº§å®ä½\n    const parentPaths = bindingPaths.slice(0, bindingPaths.length - 1);\n    const BindingList = bindingData.getValue(parentPaths) as BindingList;\n    if (!BindingList) {\n      return;\n    }\n    this.viewModel.frameContext.appContext.params.delete(\"retrieveing\");\n    const configPath = `/${nodeCode}`;\n    const config = this.repository.entityCollection.getPaginationConfigByPath(configPath);\n    if (config) {\n      const { pageIndex = 1, pageSize = 0 } = config;\n      // pageSize = 0è¡¨ç¤ºæªåé¡µ\n      if (pageSize !== 0) {\n        this.viewModel.frameContext.appContext.params.set('queryChild', true);\n        const request$ = this.repository.queryChild(paths, pageIndex, pageSize);\n        return request$.pipe(\n          tap(() => { },\n            error => {\n              this.formErrorService.exception(this.languageService.queryFailed, error);\n            }\n          )\n        );\n      }\n    }\n\n  }\n\n  /**\n   * è·ååé¡µä¿¡æ¯\n   * @param nodeCode nodeCode\n   * @returns åé¡µä¿¡æ¯ï¼åæ¬ï¼åé¡µå¤§å°ãå½åé¡µç \n   * @description åºæ¬åé¡µä¿¡æ¯å¨åé¡µä¿¡æ¯ä¸­å­å¨æ¶keyä¸ºnodeCode\n   */\n  /*private getPagingInfo(nodeCode: string) {\n    const result: { pageIndex?: number, pageSize?: number } = {};\n    const nodeCodePath = `/${nodeCode}`;\n    const defaultPagingInfo = this.repository.entityCollection.getPaginationConfigByPath(nodeCodePath);\n    const pageSize = defaultPagingInfo && defaultPagingInfo.pageSize || 0;\n    const pageIndex = defaultPagingInfo && defaultPagingInfo.pageIndex || 1;\n    result.pageIndex = pageIndex;\n    result.pageSize = pageSize;\n    return result;\n  }*/\n  /**\n   * è¿½å ä¸æ¡æ°æ°æ®\n   */\n  public append(): Observable<Entity> {\n    const loadingTimerId = this.loadingService.showLoadingWithDelay(500);\n    if (this.messagePipe) {\n      this.messagePipe.next({ messageType: 'append' });\n    }\n    const append$ = this.repository.append();\n    return append$.pipe(\n      tap(() => {\n        this.loadingService.hideDelayLoading(loadingTimerId);\n      },\n        error => {\n          this.loadingService.hideDelayLoading(loadingTimerId);\n          this.formErrorService.exception(this.languageService.appendFailed, error);\n        }\n      )\n    );\n  }\n  /**\n   * å½åè¡åæåæå¥æ°æ®\n   * @param position 1 | -1\n   */\n  public insert(position: 1 | -1 = -1) {\n    const loadingTimerId = this.loadingService.showLoadingWithDelay(500);\n    if (this.messagePipe) {\n      this.messagePipe.next({ messageType: 'insert' });\n    }\n    const append$ = this.repository.insert(position);\n    return append$.pipe(\n      tap(() => {\n        this.loadingService.hideDelayLoading(loadingTimerId);\n      },\n        error => {\n          this.loadingService.hideDelayLoading(loadingTimerId);\n          this.formErrorService.exception(this.languageService.appendFailed, error);\n        }\n      )\n    );\n  }\n\n  /**\n   * æäº¤åæ´ï¼æ¹éç¼è¾é¡µé¢ï¼è¡åæ¢æ¶æäº¤å¢éï¼\n   */\n  public updateChanges(): Observable<boolean> {\n    const update$ = this.repository.updateAllChanges();\n    return update$;\n  }\n\n  /**\n   * æ¹éä¿å­\n   * @param successMsg èªå®ä¹æç¤ºä¿¡æ¯\n   */\n  public save(successMsg?: string): Observable<boolean> {\n    if (this.messagePipe) {\n      this.messagePipe.next({ messageType: 'save' });\n    }\n    const loadingTimerId = this.loadingService.showLoadingWithDelay(500);\n    const save$ = this.repository.applyChanges();\n    const result$ = save$.pipe(\n      tap(\n        () => {\n          this.loadingService.hideDelayLoading(loadingTimerId);\n          if (successMsg && successMsg.trim()) {\n            this.formNotifyService.success(successMsg, { hideTitle: true });\n          } else {\n            this.formNotifyService.success(this.languageService.saveSuccess, { hideTitle: true });\n          }\n        },\n        error => {\n          this.loadingService.hideDelayLoading(loadingTimerId);\n          this.formErrorService.exception(this.languageService.multiSaveFailed, error);\n        }\n      )\n    );\n\n    return result$;\n  }\n\n  /**\n   * å é¤\n   * @param id è¦å é¤çæ°æ®çid\n   * @param ifSave æ¯å¦ä¿å­\n   * @param successMsg èªå®ä¹æç¤ºä¿¡æ¯\n   * @param confirm æ¯å¦éè¦ç¡®è®¤\n   * @param breakable æ¯å¦å¯ä¸­æ­ï¼ifSaveä¸ºfalseæ¶æµä¼ä¸­æ­\n   */\n  public remove(id: string, ifSave?: boolean | string, successMsg?: string, confirm: boolean | string = true, breakable: boolean | string = true): Observable<any> {\n    if (this.messagePipe) {\n      this.messagePipe.next({ messageType: 'delete' });\n    }\n    if (!id) {\n      this.formNotifyService.warning(this.languageService['plsSelectDeleteData'], { hideTitle: true });\n      return empty();\n    }\n    confirm = (confirm === false || confirm === 'false') ? false : true;\n    breakable = (breakable === false || breakable === 'false') ? false : true;\n    const action$ = confirm ? this.msgService.question(this.languageService.confirmDeletion) : of(true);\n    return action$.pipe(\n      concatMap(result => {\n        if (!result) {\n          return empty();\n        }\n        ifSave = (ifSave === false || ifSave === 'false') ? false : true;\n        const loadingTimerId = this.loadingService.showLoadingWithDelay(500);\n        const remove$ = this.repository.removeById(id, ifSave);\n        if (!remove$) {\n          return empty();\n        }\n        return remove$.pipe(\n          tap(\n            () => {\n              this.loadingService.hideDelayLoading(loadingTimerId);\n              if (successMsg && successMsg.trim()) {\n                this.formNotifyService.success(successMsg, { hideTitle: true });\n              } else {\n                this.formNotifyService.success(this.languageService.deleteSuccess, { hideTitle: true });\n              }\n            },\n            error => {\n              this.loadingService.hideDelayLoading(loadingTimerId);\n              this.formErrorService.exception(this.languageService.deleteFailed, error);\n            }\n          ),\n          switchMap(() => {\n            if (ifSave === true || !breakable) {\n              // return this.load();\n              return of([]);\n            } else {\n              return empty();\n            }\n          })\n        );\n      })\n    );\n  }\n  /**\n   * æ¹éå é¤\n   * @param ids ids\n   * @param ifSave æ¯å¦ä¿å­\n   * @param successMsg èªå®ä¹æç¤ºä¿¡æ¯\n   * @param deleteCurrentRowIfNoChecks æ²¡æå¾éæ¶å é¤å½åè¡\n   */\n  public removeRows(ids: string[], ifSave?: boolean | string, successMsg?: string, deleteCurrentRowIfNoChecks: boolean | string = false): Observable<any> {\n    if (this.messagePipe) {\n      this.messagePipe.next({ messageType: 'removeRows' });\n    }\n    deleteCurrentRowIfNoChecks = (deleteCurrentRowIfNoChecks === 'true' || deleteCurrentRowIfNoChecks === true) ? true : false;\n    if (!ids || ids.length === 0) {\n      const currentId = this.bindingData.list.currentId;\n      if (deleteCurrentRowIfNoChecks === true && currentId) {\n        ids = [this.bindingData.list.currentId];\n      } else {\n        this.formNotifyService.warning(this.languageService['plsSelectDeleteData'], { hideTitle: true });\n        return empty();\n      }\n    }\n    const action$ = this.msgService.confirm(this.languageService.confirmDeletion);\n    return action$.pipe(\n      concatMap(result => {\n        if (!result) {\n          return empty();\n        }\n        if (typeof ifSave === 'undefined') {\n          ifSave = true;\n        }\n        if (typeof ifSave === 'string') {\n          ifSave = ifSave.toLowerCase() === 'false' ? false : true;\n        }\n        ifSave = (ifSave === false) ? false : true;\n        const loadingTimerId = this.loadingService.showLoadingWithDelay(500);\n        const remove$ = this.repository.removeByIds(ids, ifSave);\n\n        if (!remove$) {\n          return empty();\n        }\n\n        return remove$.pipe(\n          tap(\n            () => {\n              this.loadingService.hideDelayLoading(loadingTimerId);\n              if (successMsg && successMsg.trim()) {\n                this.formNotifyService.success(successMsg, { hideTitle: true });\n              } else {\n                this.formNotifyService.success(this.languageService.deleteSuccess, { hideTitle: true });\n              }\n              // this.formNotifyService.success(this.languageService.deleteSuccess, { hideTitle: true });\n            },\n            error => {\n              this.loadingService.hideDelayLoading(loadingTimerId);\n              this.formErrorService.exception(this.languageService.deleteFailed, error);\n            }\n          ),\n          switchMap(() => {\n            return of([]);\n          })\n        );\n      })\n    );\n  }\n\n  /**\n   * å é¤åçå·æ°\n   */\n  public refreshAfterRemoving(loadCmdName: string, loadCmdFrameId: string): Observable<any> {\n    if (this.viewModel && loadCmdName && loadCmdFrameId) {\n      const commandService = this.viewModel.frameContext.injector.get<CommandService>(CommandService, null);\n      return commandService.execute(loadCmdName, loadCmdFrameId);\n    }\n    return this.load();\n  }\n\n  /**\n   * å·æ°\n   * @param loadCmdName å·æ°å½ä»¤\n   * @param loadCmdFrameId å·æ°å½ä»¤æå¨çframeId\n   */\n  public refresh(loadCmdName: string, loadCmdFrameId: string): Observable<any> {\n    if (this.viewModel && loadCmdName && loadCmdFrameId) {\n      const commandService = this.viewModel.frameContext.injector.get<CommandService>(CommandService, null);\n      return commandService.execute(loadCmdName, loadCmdFrameId);\n    }\n    return this.load();\n  }\n  /**\n   * åæ¶æ¶æ£æµæªä¿å­è®°å½\n   */\n  public cancel(): Observable<any> {\n    if (this.messagePipe) {\n      this.messagePipe.next({ messageType: 'cancel' });\n    }\n    // æ²¡æåæ´æ¶ç´æ¥åæ¶\n    const befRepository = this.repository as BefRepository<any>;\n    const hasUnsavedData = BefRepositoryUtil.isExistUnsaveData(befRepository);\n    if (hasUnsavedData === false) {\n      return this._cancel();\n    }\n\n    const confirmResult$ = this.msgService.question(this.languageService['cancelWithoutSave']).pipe(\n      switchMap((ifCancel: boolean) => {\n        if (ifCancel === false) {\n          return EMPTY;\n        }\n\n        return this._cancel();\n      })\n    );\n\n    return confirmResult$;\n  }\n  /**\n   * è¿ååæ´é\n   * @description ä¸å¸¦åæ´æ£æµæç¤º\n   */\n  public revert(): Observable<any> {\n    return this._cancel();\n  }\n  /**\n   * åæ¶ï¼åé¨åæ¶ï¼\n   */\n  private _cancel(): Observable<any> {\n    const loadingTimerId = this.loadingService.showLoadingWithDelay(500);\n    const cancel$ = this.repository.cancelChanges();\n    return cancel$.pipe(\n      tap(() => {\n        this.loadingService.hideDelayLoading(loadingTimerId);\n      },\n        error => {\n          this.loadingService.hideDelayLoading(loadingTimerId);\n          this.formErrorService.exception(this.languageService.cancelFailed, error);\n        }\n      )\n    );\n  }\n  /**\n   * è·åæ ¹ç»ä»¶appContext\n   */\n  private get messagePipe() {\n    if (this.viewModel && this.viewModel.frameContext) {\n      const appContext = this.viewModel.frameContext.getFormAppContext() || null;\n      if (appContext) {\n        return appContext.messagePipe || null;\n      }\n    }\n    return null;\n  }\n  /**\n   * è§¦åæ¥è¯¢äºä»¶\n   * @param filters è¿æ»¤æ¡ä»¶\n   */\n  private fireQueryEvent(filters: any) {\n    const messagePipe = this.messagePipe;\n    // const frameId = this.viewModel && this.viewModel.frameContext && this.viewModel.frameContext.frameId || null;\n    if (messagePipe) {\n      messagePipe.next({ type: 'query' });\n    }\n  }\n  /**\n   * åå¹¶è¿æ»¤æ¡ä»¶\n   * @param filter è¡¨åè¿æ»¤æ¡ä»¶\n   */\n  private mergeFilterConditions(filter: any) {\n    if (typeof filter === 'string') {\n      filter = JSON.parse(filter) || [];\n    }\n    const filters: Array<any> = filter;\n    const bindingPath = this.viewModel && this.viewModel.bindingPath || null;\n    if (bindingPath) {\n      const originalConditions = this.viewModel && this.viewModel.frameContext.repository.filterConditionManager.getFilters(bindingPath) || [];\n      // this.filterConditionService.getFilters(bindingPath) || [];\n      const conditions = Array.from(originalConditions);\n      if (conditions && conditions.length > 0) {\n        /*filters.forEach((item: any, index: number) => {\n          const field = item.FilterField || null;\n          if (field) {\n            const duplicateIndex = conditions.findIndex(condition => condition.FilterField === field);\n            if (duplicateIndex !== -1) {\n              filters[index] = conditions[duplicateIndex];\n              conditions.splice(duplicateIndex, 1);\n            }\n          }\n        });*/\n        // ä¿®æ¹å½ä»¤ä¸è¿æ»¤æ¡ä»¶çæåä¸ä¸ªæ¥è¯¢å³ç³»ä¸ºand\n        if (filters.length > 0) {\n          // æåä¸ä¸ªè¿æ»¤æ¡ä»¶\n          const lastFilter = filters[filters.length - 1];\n          if (lastFilter) {\n            if (lastFilter.hasOwnProperty('Relation')) {\n              delete lastFilter.Relation;\n            }\n            lastFilter.relation = 1;\n          }\n        }\n        // åå¹¶æ°çè¿æ»¤æ¡ä»¶ååæ¥å½ä»¤ä¸çè¿æ»¤æ¡ä»¶\n        filters.push(...conditions);\n      }\n    }\n\n    return JSON.stringify(filters);\n  }\n  /**\n   * åå¹¶æåºæ¡ä»¶\n   * @param sort æåºæ¡ä»¶\n   */\n  private mergeSortConditions(sort: any) {\n    if (typeof sort === 'string') {\n      sort = JSON.parse(sort) || [];\n    }\n    const sorts: Array<any> = sort;\n    const bindingPath = this.viewModel && this.viewModel.bindingPath || null;\n    if (bindingPath) {\n      // è·åå½åç»å®è·¯å¾çæææåºæ¡ä»¶\n      const originalConditions = this.viewModel && this.viewModel.frameContext.repository.sortConditionManager.getConditionsByBindingPath(bindingPath, (direction) => {\n        if (direction === 'asc') {\n          return 0;\n        } else { return 1; }\n      }) || [];\n      const conditions = Array.from(originalConditions);\n      // å¦æå½åç»å®è·¯å¾ææåºæ¡ä»¶ï¼åå¿½ç¥å½ä»¤ä¸é¢å¶çæåºæ¡ä»¶\n      if (conditions && conditions.length > 0) {\n        // éåå·²æçè¿æ»¤æ¡ä»¶ï¼å¦ææéå¤çfieldï¼ç¨åèçè¦çå·²æç\n        /*sorts.forEach((item: any, index: number) => {\n          const field = item.SortField || null;\n          if (field) {\n            const duplicateIndex = conditions.findIndex(condition => condition.SortField === field);\n            if (duplicateIndex !== -1) {\n              sorts[index] = conditions[duplicateIndex];\n              conditions.splice(duplicateIndex, 1);\n            }\n          }\n        });*/\n        return JSON.stringify(conditions);\n        // å°å¶ä½æåºæ¡ä»¶æ·»å å°æåºæ°ç»\n        // sorts.push(...conditions);\n      }\n    }\n    return JSON.stringify(sorts);\n  }\n}\nexport { ListDataService };\n","import { Injectable, Optional } from '@angular/core';\nimport { Observable, empty, of, EMPTY } from 'rxjs';\nimport { tap, switchMap, concatMap } from 'rxjs/operators';\nimport { BindingList, Repository, ViewModel } from '@farris/devkit';\nimport { FormLoadingService } from '../form-loading/form-loading.service';\nimport { FormNotifyService } from '../form-notify.service';\nimport { LanguageService } from '../languag.service';\nimport { FormMessageService } from '../form-message.service';\nimport { FormErrorService } from '../error/form-error.service';\n\n/**\n * å­åè¡¨åæ°æå¡\n */\n@Injectable()\nclass SubListDataService {\n\n  /**\n   * æé å½æ°\n   */\n  constructor(\n    private msgService: FormMessageService,\n    private repository: Repository<any>,\n    private loadingService: FormLoadingService,\n    private viewModel: ViewModel,\n    @Optional() private languageService: LanguageService,\n    private formNotifyService: FormNotifyService,\n    private formErrorService: FormErrorService\n  ) {\n    if (!languageService) {\n      this.languageService = LanguageService.getInstance();\n    }\n    this.viewModel = viewModel;\n  }\n\n  /**\n   * æ°å¢\n   */\n  add(): Observable<any> {\n    if (this.messagePipe) {\n      this.messagePipe.next({ messageType: 'add' });\n    }\n    const path = this.getPath();\n    const loadingTimerId = this.loadingService.showLoadingWithDelay(500);\n    const append$ = this.repository.appendByPath(path);\n    return append$.pipe(\n      tap(() => {\n        this.loadingService.hideDelayLoading(loadingTimerId);\n      },\n        error => {\n          this.loadingService.hideDelayLoading(loadingTimerId);\n          this.formErrorService.exception(this.languageService.addFailed, error);\n        }\n      )\n    );\n  }\n  /**\n   * å¨æå®ä½ç½®æå¥\n   * @param position ä½ç½®\n   */\n  public insert(position: 1 | -1 = -1) {\n    if (this.messagePipe) {\n      this.messagePipe.next({ messageType: 'insert' });\n    }\n    const path = this.getPath();\n    const loadingTimerId = this.loadingService.showLoadingWithDelay(500);\n    const append$ = this.repository.insertByPath(path, position);\n    return append$.pipe(\n      tap(() => {\n        this.loadingService.hideDelayLoading(loadingTimerId);\n      },\n        error => {\n          this.loadingService.hideDelayLoading(loadingTimerId);\n          this.formErrorService.exception(this.languageService.addFailed, error);\n        }\n      )\n    );\n  }\n  /**\n   * å é¤å­è¡¨æ°æ®\n   */\n  remove(id: string, successMsg?: string): Observable<any> {\n    const msg = successMsg ? successMsg : '';\n    return this.innerRemove(id, false, msg);\n  }\n\n  /**\n   * å é¤å­è¡¨æ°æ®ï¼ä¸ç¡®è®¤ï¼\n   */\n  removeWithoutConfirm(id: string): Observable<any> {\n    return this.innerRemove(id, true, '');\n  }\n\n  /**\n   * æ¹éå é¤å­è¡¨\n   * @param ids ids\n   * @param successMsg èªå®ä¹æç¤ºä¿¡æ¯\n   */\n  removeChildrenByIds(ids: string, successMsg?: string): Observable<any> {\n    if (!ids) {\n      this.formNotifyService.warning(this.languageService['plsSelectDeleteData'], { hideTitle: true });\n      return EMPTY;\n    }\n    const action$ = this.msgService.confirm(this.languageService.confirmDeletion);\n    return action$.pipe(\n      concatMap(result => {\n        if (!result) {\n          return EMPTY;\n        }\n        const path = this.getPath();\n        const loadingTimerId = this.loadingService.showLoadingWithDelay(500);\n        const remove$ = this.repository.batchRemoveByPath(path, ids);\n        return remove$.pipe(\n          tap(() => {\n            this.loadingService.hideDelayLoading(loadingTimerId);\n            if (successMsg && successMsg.trim()) {\n              this.formNotifyService.success(successMsg, { hideTitle: true });\n            } else {\n              this.formNotifyService.success(this.languageService.deleteSuccess, { hideTitle: true });\n            }\n            // this.formNotifyService.success(this.languageService.deleteSuccess, { hideTitle: true });\n          },\n            error => {\n              this.loadingService.hideDelayLoading(loadingTimerId);\n              this.formErrorService.exception(this.languageService.deleteFailed, error);\n            }\n          )\n        );\n      })\n    );\n  }\n\n  /**\n   * å é¤\n   */\n  innerRemove(id: string, isConfirm: boolean, successMsg: string): Observable<any> {\n    if (this.messagePipe) {\n      this.messagePipe.next({ messageType: 'remove' });\n    }\n    if (!id) {\n      this.formNotifyService.warning(this.languageService['plsSelectDeleteData'], { hideTitle: true });\n      return empty();\n    }\n\n    let action$: Observable<boolean>;\n    if (isConfirm === false) {\n      action$ = this.msgService.question(this.languageService.confirmDeletion);\n    } else {\n      action$ = of(true);\n    }\n\n    return action$.pipe(\n      concatMap(result => {\n        if (!result) {\n          return empty();\n        }\n        const path = this.getPath();\n        const loadingTimerId = this.loadingService.showLoadingWithDelay(500);\n        const remove$ = this.repository.removeByPath(path, id);\n        return remove$.pipe(\n          tap(() => {\n            this.loadingService.hideDelayLoading(loadingTimerId);\n            if (successMsg && successMsg.trim()) {\n              this.formNotifyService.success(successMsg, { hideTitle: true });\n            } else {\n              this.formNotifyService.success(this.languageService.deleteSuccess, { hideTitle: true });\n            }\n            // this.formNotifyService.success(this.languageService.deleteSuccess, { hideTitle: true });\n          },\n            error => {\n              this.loadingService.hideDelayLoading(loadingTimerId);\n              this.formErrorService.exception(this.languageService.deleteFailed, error);\n            }\n          )\n        );\n      })\n    );\n  }\n\n  /**\n   * å é¤å¹¶ä¿å­\n   * @param id id\n   * @param successMsg èªå®ä¹æç¤ºä¿¡æ¯\n   */\n  removeAndSave(id: string, successMsg?: string): Observable<any> {\n    if (this.messagePipe) {\n      this.messagePipe.next({ messageType: 'removeAndSave' });\n    }\n    if (!id) {\n      this.formNotifyService.warning(this.languageService.plsSelectDeleteData, { hideTitle: true });\n      return empty();\n    }\n    const action$ = this.msgService.confirm(this.languageService.confirmDeletion);\n    return action$.pipe(\n      concatMap(result => {\n        if (!result) {\n          return empty();\n        }\n\n        // å é¤å­è¡¨æ°æ®\n        const path = this.getPath();\n        const loadingTimerId = this.loadingService.showLoadingWithDelay(500);\n        const remove$ = this.repository.removeByPath(path, id);\n\n        return remove$.pipe(\n\n          // æ§è¡ä¸»è¡¨ä¿å­\n          switchMap(() => {\n            const fid = this.viewModel.bindingData.list.currentId as string;\n            return this.repository.applyChangesById(fid);\n          }),\n\n          // éèå è½½ä¸­\n          tap(() => {\n            this.loadingService.hideDelayLoading(loadingTimerId);\n            if (successMsg && successMsg.trim()) {\n              this.formNotifyService.success(successMsg, { hideTitle: true });\n            } else {\n              this.formNotifyService.success(this.languageService.deleteSuccess, { hideTitle: true });\n            }\n            // this.formNotifyService.success(this.languageService.deleteSuccess, { hideTitle: true });\n          },\n            error => {\n              this.loadingService.hideDelayLoading(loadingTimerId);\n              this.formErrorService.exception(this.languageService.deleteFailed, error);\n            })\n        );\n      })\n    );\n  }\n  /**\n   * ä¸ç§»æä¸ç§»æ°æ®\n   * @param direction æ¹åï¼up | down\n   * @param field æåºå­æ®µ\n   * @param targets è¦ç§»å¨çæ°æ®\n   * @description\n   * ä½¿ç¨è¯¥æ¹æ³æ¶æåºå­æ®µå¿é¡»æå¼ï¼å¦åæ æ³æåº\n   */\n  public move(direction: string | 'up' | 'down', field: string, targets: Array<any> | string) {\n    if (!targets) {\n      return;\n    }\n    if (typeof targets === 'string') {\n      targets = targets.split(',').filter(p => p);\n    }\n    const bindingPath = this.viewModel && this.viewModel.bindingPath || null;\n    if (!bindingPath) {\n      return;\n    }\n    const bindingList = this.viewModel.bindingData.getList() as BindingList;\n    if (!bindingList || bindingList.length < 1) {\n      return;\n    }\n    targets.forEach((target) => {\n      const index = bindingList.getIndexById(target);\n      if (index === -1) {\n        return;\n      }\n      const item = bindingList.findById(target);\n      const position = item.getValue(field);\n      const base = direction === 'up'  ? -1 : 1;\n      // å¾äº¤æ¢çè¡ä¿¡æ¯\n      const exchangeRowIndex = index + base;\n      if (exchangeRowIndex < 0 || exchangeRowIndex > bindingList.length) {\n        // ç¬¬ä¸è¡æ æ³ä¸ç§»ï¼æåä¸è¡æ æ³ä¸ç§»\n        return;\n      }\n      const exchangeRowId = bindingList.getIdByIndex(exchangeRowIndex);\n      const exchangeRow = bindingList.findById(exchangeRowId);\n      const exchangeRowPosition = exchangeRow[field];\n      // ç§»å¨è¡åäº¤æ¢è¡é½æ²¡ææåº\n      if (this.isNullOrEmpty(position) && this.isNullOrEmpty(exchangeRowPosition)) {\n        return;\n      }\n      bindingList.swapById(target, exchangeRowId);\n      exchangeRow.setValue(field, position,true,true);\n      item.setValue(field, exchangeRowPosition,true,true);\n    });\n\n  }\n  private isNullOrEmpty(value: any) {\n    return value === '' || value === null || value === undefined;\n  }\n  /**\n   * è·åå®æ´è·¯å¾\n   * @todoï¼å¼ºè¯å«å°ä»è¡¨è¿ä¸çº§\n   * fixed by justin: æ ¹æ®bindingPathï¼å¦ææ¯ä»ä»è¡¨ï¼éè¦è·åä¸»è¡¨æ°æ®idåä»è¡¨æ°æ®id\n   */\n  private getPath(): string {\n    const bindingPath = this.viewModel.bindingPath;\n    const rid = this.viewModel.bindingData.list.currentId; // rootè¡¨æ°æ®id\n    let path = '/' + rid;\n\n    const subPaths = bindingPath.split('/');\n    if (subPaths.length > 0) {\n      // eg:bindingPathå½¢å¦/edus/grades,splitåæ¯['', 'edus', 'grades']\n      // å æ­¤indexä»1å¼å§\n      for (let index = 1; index < subPaths.length - 1; index++) {\n        const subPath = subPaths[index];\n        const subData = this.viewModel.bindingData[subPath];\n        if (!subData || !subData.currentId) {\n          this.formNotifyService.warning(this.languageService['plsSelectDetailFormData'], { hideTitle: true });\n          throw Error(`è·åå­è¡¨å®æ´è·¯å¾åºéï¼æ¾ä¸å°${subData}å¯¹åºçå­è¡¨ï¼æå¯¹åºå­è¡¨æ²¡æå½åè¡ã`);\n        }\n        path += `/${subPath}/${subData.currentId}`;\n      }\n    }\n    path += '/' + subPaths[subPaths.length - 1];\n\n    return path;\n  }\n  /**\n   * è·åæ ¹ç»ä»¶appContext\n   */\n  private get messagePipe() {\n    if (this.viewModel && this.viewModel.frameContext) {\n      const appContext = this.viewModel.frameContext.getFormAppContext() || null;\n      if (appContext) {\n        return appContext.messagePipe || null;\n      }\n    }\n    return null;\n  }\n}\nexport { SubListDataService };\n","\nimport { Entity, FrameContext, BindingData } from '@farris/devkit';\nimport { BefRepository, BefRestService } from '@farris/bef';\n\n/**\n * åºç¡æ°æ®æå¡\n */\nclass BaseDataService {\n\n  /**\n   * æ¡æ¶ä¸ä¸æ\n   */\n  protected frameContext: FrameContext;\n\n  /**\n   * å®ä½ä»åº\n   */\n  protected get repository(): BefRepository<Entity> {\n    return this.frameContext.repository as BefRepository<Entity>;\n  }\n\n  /**\n   * Restæå¡\n   */\n  protected get restService(): BefRestService {\n    return this.repository.restService;\n  }\n\n  /**\n   * æ°æ®ç»å®\n   */\n  protected get bindingData(): BindingData {\n    return this.frameContext.bindingData;\n  }\n\n  /**\n   * æé å½æ°\n   */\n  constructor(frameContext: FrameContext) {\n    this.frameContext = frameContext;\n  }\n\n}\n\nexport { BaseDataService };\n","import { BindingData, BindingList } from '@farris/devkit';\n\n/**\n * æ æ°æ®çå¸®å©ç±»\n */\nclass ParentTreeNodeUtil {\n\n  /**\n   * éä¸­ç¬¬ä¸ä¸ªæ ¹èç¹\n   */\n  public selectFirstRootNode(bindingData: BindingData, hierarchyInfoKey: string) {\n\n    const treeNodesData = bindingData.list.toJSON();\n    const firstRootNodeId = this.getFirstNodeId(treeNodesData, hierarchyInfoKey);\n    this.selectedNode(bindingData, hierarchyInfoKey, firstRootNodeId);\n  }\n  public selectNodeByBindingList(bindingList: BindingList, hierarchyInfoKey: string, selectedNodeId: string): void {\n    const treeNodesData = bindingList.toJSON();\n    // å¦æè¦è®¾ç½®çèç¹ä¸å­å¨ï¼åè®¾ç½®ç¬¬1ä¸ªæ ¹èç¹\n    const selectedNodeData = this.getNodeDataById(treeNodesData, selectedNodeId);\n    let currentId = selectedNodeId;\n    if (!selectedNodeData) {\n      currentId = this.getFirstNodeId(treeNodesData, hierarchyInfoKey);\n    }\n    setTimeout(() => {\n      bindingList.setCurrentId(currentId, true, true);\n    }, 0);\n  }\n  /**\n   * éä¸­èç¹\n   */\n  public selectedNode(bindingData: BindingData, hierarchyInfoKey: string, selectedNodeId: string): void {\n    const treeNodesData = bindingData.list.toJSON();\n    // å¦æè¦è®¾ç½®çèç¹ä¸å­å¨ï¼åè®¾ç½®ç¬¬1ä¸ªæ ¹èç¹\n    const selectedNodeData = this.getNodeDataById(treeNodesData, selectedNodeId);\n    let currentId = selectedNodeId;\n    if (!selectedNodeData) {\n      currentId = this.getFirstNodeId(treeNodesData, hierarchyInfoKey);\n    }\n    if (bindingData.rowSelectedEventSuspend === true) {\n      return;\n    }\n    setTimeout(() => {\n      bindingData.list.currentId = null;\n      bindingData.list.setCurrentId(currentId, true, true);\n    }, 0);\n  }\n\n  /**\n   * æ£æ¥æ¯å¦æå­èç¹\n   */\n  public hasChildNodes(treeNodesData: any[], hierarchyInfoKey: string, fid: string): boolean {\n    const fNodeData = this.getNodeDataById(treeNodesData, fid);\n    // const fLayer = fNodeData[hierarchyInfoKey]['layer'];\n    const fIsDetail = fNodeData[hierarchyInfoKey]['isDetail'];\n\n    // éæç»èç¹ï¼è¿åtrue\n    if (fIsDetail === false) {\n      return true;\n    }\n    return false;\n\n    // const childNodesData = this.getChildNodesData(treeNodesData, hierarchyInfoKey, fLayer, fid);\n    // return childNodesData.length > 0;\n  }\n\n  /**\n   * è·åæ ¹èç¹ï¼å¤ä¸ªæ ¹èç¹æ¶è·åç¬¬ä¸ä¸ªï¼\n   * @return æ¾ä¸å°æ¶è¿ånull\n   */\n  private getFirstNodeId(treeNodesData: any[], hierarchyInfoKey: string): string {\n    let rootData = treeNodesData.find((itemData: any) => {\n      const layer = itemData[hierarchyInfoKey]['layer'];\n      return layer === 1;\n    });\n    if (!rootData) {\n      const rootLayer = this.getRootLayer(treeNodesData, hierarchyInfoKey);\n      rootData = treeNodesData.find((itemData: any) => {\n        const layer = itemData[hierarchyInfoKey]['layer'];\n        return layer === rootLayer;\n      });\n    }\n    return rootData ? rootData['id'] : '';\n  }\n  private getRootLayer(treeNodesData: any[], hierarchyInfoKey: string) {\n    let layer = null;\n    if (treeNodesData && Array.isArray(treeNodesData)) {\n      const layers = treeNodesData.map(item => {\n        const layer = item[hierarchyInfoKey]['layer'];\n        return layer;\n      });\n      const minLayer = Math.min.apply(Math, layers);\n      if (!isNaN(minLayer)) {\n        layer = minLayer;\n      }\n    }\n    return layer;\n  }\n  /**\n   * è·åä¸ä¸ä¸ªèç¹ï¼å é¤åï¼\n   */\n  public getNextNodeId(treeNodesData: any[], hierarchyInfoKey: string, currentId: string): string {\n\n    // å½åèç¹ä¿¡æ¯\n    const currentNodeData = treeNodesData.find((itemData: any) => {\n      return itemData['id'] === currentId;\n    });\n    const currentLayer = currentNodeData[hierarchyInfoKey]['layer'];\n\n    // ç¶èç¹ä¿¡æ¯\n    const fLayer = currentLayer - 1;\n    const fParentElement = currentNodeData[hierarchyInfoKey]['parentElement'];\n\n    // æ¥æ¾åå¼èç¹\n    const siblingtreeNodesData = this.getChildNodesData(treeNodesData, hierarchyInfoKey, fLayer, fParentElement);\n\n    // å¦ææ²¡æåå¼èç¹ï¼åä¸æ¥æ¾\n    if (siblingtreeNodesData.length === 1) {\n      const parentData = treeNodesData.find((itemData: any) => {\n        return itemData['id'] === fParentElement;\n      });\n\n      // å­å¨ç¶èç¹ï¼åè®¾ç½®ç¶èç¹ï¼\n      // ä¸å­å¨ç¶èç¹ï¼åè®¾ç½®ç¬¬ä¸ä¸ªæ ¹èç¹ã\n      if (!parentData) {\n        return this.getFirstNodeId(treeNodesData, hierarchyInfoKey);\n      }\n      return parentData['id'];\n    } else {\n      return this.getNextSiblingNodeId(siblingtreeNodesData, currentId);\n    }\n  }\n\n  /**\n   * è·åä¸ä¸ªåå¼èç¹çid\n   */\n  public getNextSiblingNodeId(siblingtreeNodesData: any[], currentId: string): string {\n    if (siblingtreeNodesData.length <= 1) {\n      return '';\n    }\n\n    const currentIndex = siblingtreeNodesData.findIndex((itemData: any) => {\n      return itemData['id'] === currentId;\n    });\n\n    // æåä¸è¡ä¸ç§»ä¸è¡ï¼å¶ä»ä¸ç§»ä¸è¡\n    let nextIndex = -1;\n    if (currentIndex === siblingtreeNodesData.length - 1) {\n      nextIndex = currentIndex - 1;\n    } else {\n      nextIndex = currentIndex + 1;\n    }\n\n    return siblingtreeNodesData[nextIndex]['id'];\n  }\n\n  /**\n   * è·åä¸çº§èç¹çBindingObjectséå\n   */\n  public getChildNodesData(treeNodesData: any[], hierarchyInfoKey: string, fLayer: number, fParentElement: string): any[] {\n    const childtreeNodesData = treeNodesData.filter((itemData) => {\n      const layer = itemData[hierarchyInfoKey]['layer'];\n      const parentElement = itemData[hierarchyInfoKey]['parentElement'];\n      return (layer === fLayer + 1) && fParentElement == parentElement;\n    });\n    return childtreeNodesData;\n  }\n\n  /**\n   * è·åidè·åèç¹æ°æ®\n   */\n  public getNodeDataById(treeNodesData: any[], id: string): any {\n    const nodeData = treeNodesData.find((itemData: any) => {\n      return itemData['id'] === id;\n    });\n    return nodeData ? nodeData : null;\n  }\n}\n\nexport { ParentTreeNodeUtil };\n","import { BindingData, BindingList } from '@farris/devkit';\n\n/**\n * æ æ°æ®çå¸®å©ç±»\n */\nclass PathTreeNodeUtil {\n\n  /**\n   * éä¸­ç¬¬ä¸ä¸ªæ ¹èç¹\n   */\n  public selectFirstRootNode(bindingData: BindingData, hierarchyInfoKey: string) {\n\n    const treeNodesData = bindingData.list.toJSON();\n    const firstRootNodeId = this.getFirstNodeId(treeNodesData, hierarchyInfoKey);\n    this.selectedNode(bindingData, hierarchyInfoKey, firstRootNodeId);\n  }\n  public selectNodeByBindingList(bindingList: BindingList, hierarchyInfoKey: string, selectedNodeId: string): void {\n    const treeNodesData = bindingList.toJSON();\n    // å¦æè¦è®¾ç½®çèç¹ä¸å­å¨ï¼åè®¾ç½®ç¬¬1ä¸ªæ ¹èç¹\n    const selectedNodeData = this.getNodeDataById(treeNodesData, selectedNodeId);\n    let currentId = selectedNodeId;\n    if (!selectedNodeData) {\n      currentId = this.getFirstNodeId(treeNodesData, hierarchyInfoKey);\n    }\n\n    setTimeout(() => {\n      bindingList.setCurrentId(currentId, true, true);\n    }, 0);\n  }\n  /**\n   * éä¸­èç¹\n   */\n  public selectedNode(bindingData: BindingData, hierarchyInfoKey: string, selectedNodeId: string): void {\n    const treeNodesData = bindingData.list.toJSON();\n    // å¦æè¦è®¾ç½®çèç¹ä¸å­å¨ï¼åè®¾ç½®ç¬¬1ä¸ªæ ¹èç¹\n    const selectedNodeData = this.getNodeDataById(treeNodesData, selectedNodeId);\n    let currentId = selectedNodeId;\n    if (!selectedNodeData) {\n      currentId = this.getFirstNodeId(treeNodesData, hierarchyInfoKey);\n    }\n    if (bindingData.rowSelectedEventSuspend === true) {\n      return;\n    }\n    setTimeout(() => {\n      bindingData.list.currentId = null;\n      bindingData.list.setCurrentId(currentId, true, true);\n    }, 0);\n  }\n\n  /**\n   * æ£æ¥æ¯å¦æå­èç¹\n   */\n  public hasChildNodes(treeNodesData: any[], hierarchyInfoKey: string, fid: string): boolean {\n    const fNodeData = this.getNodeDataById(treeNodesData, fid);\n    // const fLayer = fNodeData[hierarchyInfoKey]['layer'];\n    // const fPath  = fNodeData[hierarchyInfoKey]['path'];\n    const fIsDetail = fNodeData[hierarchyInfoKey]['isDetail'];\n\n    // éæç»èç¹ï¼è¿åtrue\n    if (fIsDetail === false) {\n      return true;\n    }\n    return false;\n    // const childNodesData = this.getChildNodesData(treeNodesData, hierarchyInfoKey, fLayer, fPath);\n    // return childNodesData.length > 0;\n  }\n\n  /**\n   * è·åæ ¹èç¹ï¼å¤ä¸ªæ ¹èç¹æ¶è·åç¬¬ä¸ä¸ªï¼\n   * @return æ¾ä¸å°æ¶è¿ånull\n   */\n  private getFirstNodeId(treeNodesData: any[], hierarchyInfoKey: string): string {\n    let rootData = treeNodesData.find((itemData: any) => {\n      const layer = itemData[hierarchyInfoKey]['layer'];\n      return layer === 1;\n    });\n    if (!rootData) {\n      const rootLayer = this.getRootLayer(treeNodesData, hierarchyInfoKey);\n      rootData = treeNodesData.find((itemData: any) => {\n        const layer = itemData[hierarchyInfoKey]['layer'];\n        return layer === rootLayer;\n      });\n    }\n    return rootData ? rootData['id'] : '';\n  }\n  private getRootLayer(treeNodesData: any[], hierarchyInfoKey: string) {\n    let layer = null;\n    if (treeNodesData && Array.isArray(treeNodesData)) {\n      const layers = treeNodesData.map(item => {\n        const layer = item[hierarchyInfoKey]['layer'];\n        return layer;\n      });\n      const minLayer = Math.min.apply(Math, layers);\n      if (!isNaN(minLayer)) {\n        layer = minLayer;\n      }\n    }\n    return layer;\n  }\n  /**\n   * è·åä¸ä¸ä¸ªèç¹ï¼å é¤åï¼\n   */\n  public getNextNodeId(treeNodesData: any[], hierarchyInfoKey: string, currentId: string): string {\n\n    // å½åèç¹ä¿¡æ¯\n    const currentNodeData = treeNodesData.find((itemData: any) => {\n      return itemData['id'] === currentId;\n    });\n    const currentPath = currentNodeData[hierarchyInfoKey]['path'];\n    const currentLayer = currentNodeData[hierarchyInfoKey]['layer'];\n\n    // ç¶èç¹ä¿¡æ¯\n    const fLayer = currentLayer - 1;\n    const fPath = currentPath.substring(0, currentPath.length - 4);\n\n    // æ¥æ¾åå¼èç¹\n    const siblingtreeNodesData = this.getChildNodesData(treeNodesData, hierarchyInfoKey, fLayer, fPath);\n\n    // å¦ææ²¡æåå¼èç¹ï¼åä¸æ¥æ¾\n    if (siblingtreeNodesData.length === 1) {\n      const parentData = treeNodesData.find((itemData: any) => {\n        return itemData[hierarchyInfoKey]['path'] === fPath;\n      });\n\n      // å­å¨ç¶èç¹ï¼åè®¾ç½®ç¶èç¹ï¼\n      // ä¸å­å¨ç¶èç¹ï¼åè®¾ç½®ç¬¬ä¸ä¸ªæ ¹èç¹ã\n      if (!parentData) {\n        return this.getFirstNodeId(treeNodesData, hierarchyInfoKey);\n      }\n      return parentData['id'];\n    } else {\n      return this.getNextSiblingNodeId(siblingtreeNodesData, currentId);\n    }\n  }\n\n  /**\n   * è·åä¸ä¸ªåå¼èç¹çid\n   */\n  public getNextSiblingNodeId(siblingtreeNodesData: any[], currentId: string): string {\n    if (siblingtreeNodesData.length <= 1) {\n      return '';\n    }\n\n    const currentIndex = siblingtreeNodesData.findIndex((itemData: any) => {\n      return itemData['id'] === currentId;\n    });\n\n    // æåä¸è¡ä¸ç§»ä¸è¡ï¼å¶ä»ä¸ç§»ä¸è¡\n    let nextIndex = -1;\n    if (currentIndex === siblingtreeNodesData.length - 1) {\n      nextIndex = currentIndex - 1;\n    } else {\n      nextIndex = currentIndex + 1;\n    }\n\n    return siblingtreeNodesData[nextIndex]['id'];\n  }\n\n  /**\n   * è·åä¸çº§èç¹çBindingObjectséå\n   */\n  public getChildNodesData(treeNodesData: any[], hierarchyInfoKey: string, fLayer: number, fPath: string): any[] {\n    const childtreeNodesData = treeNodesData.filter((itemData) => {\n      const layer = itemData[hierarchyInfoKey]['layer'];\n      const path = itemData[hierarchyInfoKey]['path'];\n      return (layer === fLayer + 1) && path.startsWith(fPath);\n    });\n    return childtreeNodesData;\n  }\n\n  /**\n   * è·åidè·åèç¹æ°æ®\n   */\n  public getNodeDataById(treeNodesData: any[], id: string): any {\n    const nodeData = treeNodesData.find((itemData: any) => {\n      return itemData['id'] === id;\n    });\n    return nodeData ? nodeData : null;\n  }\n}\n\nexport { PathTreeNodeUtil };\n","/*\n * @Author: aalizzwell \n * @Date: 2019-05-30 14:12:39 \n * @Last Modified by: aalizzwell\n * @Last Modified time: 2019-05-30 16:18:47\n */\nimport { ParentTreeNodeUtil } from './parent-tree.util';\nimport { PathTreeNodeUtil } from './path-tree.util';\n\nexport class TreeUtilFactory {\n  static getInstance(treeType: string) {\n    let util = null;\n    switch (treeType) {\n      case 'path':\n        util = new PathTreeNodeUtil();\n        break;\n      case 'parent':\n        util = new ParentTreeNodeUtil();\n        break;\n      default: break;\n    }\n    return util;\n  }\n}","import { HttpHeaders } from '@angular/common/http';\nimport { of, Observable } from 'rxjs';\nimport { map, tap } from 'rxjs/operators';\nimport { Entity, FieldMetadataUtil, FrameContext, Repository } from '@farris/devkit';\nimport { ResponseInfo, BefRepository } from '@farris/bef';\n\n/**\n * ç¶å­æ ä»åº\n */\nclass ParentTreeRepository {\n\n  /**\n   * æ·»å åå¼èç¹\n   */\n  public addSibling(repository: BefRepository<Entity>, id: string): Observable<Entity> {\n    const restService = repository.restService;\n    const baseUri = restService.baseUri;\n    const addSiblingUri = `${baseUri}/service/parenthierarchycreatesibling`;\n    const body = {\n      dataID: id,\n      requestInfo: restService.buildRequestInfo()\n    };\n    const options = {\n      headers: new HttpHeaders({ 'Content-Type': 'application/json' }),\n      body: body\n    };\n    return restService.invoke(addSiblingUri, 'PUT', null, options).pipe(\n      map((responseInfo: ResponseInfo) => {\n        const entity = repository.buildEntity(responseInfo.returnValue);\n        repository.entityCollection.addEntity(entity);\n        return entity;\n      })\n    );\n  }\n\n  /**\n   * æ·»å åå¼èç¹\n   */\n  public addChild(repository: BefRepository<Entity>, parentId: string) {\n    const restService = repository.restService;\n    const baseUri = restService.baseUri;\n    const addChildUri = `${baseUri}/service/parenthierarchycreatechildlayer`;\n\n    const body = {\n      dataID: parentId,\n      requestInfo: restService.buildRequestInfo()\n    };\n    const options = {\n      headers: new HttpHeaders({ 'Content-Type': 'application/json' }),\n      body: body\n    };\n    return restService.invoke(addChildUri, 'PUT', null, options).pipe(\n      map((responseInfo: ResponseInfo) => {\n        const entity = repository.buildEntity(responseInfo.returnValue);\n        repository.entityCollection.addEntity(entity);\n        return entity;\n      })\n    );\n  }\n\n  /**\n   * æ·»å å­è¡¨åå¼èç¹\n   */\n  public addSubSibling(repository: BefRepository<Entity>, nodes: Array<string>, ids: Array<string>): Observable<Entity> {\n    const restService = repository.restService;\n    const baseUri = restService.baseUri;\n    const addSubSiblingUri = `${baseUri}/service/childnodeparenthierarchycreatesibling`;\n    const body = {\n      nodes: nodes,\n      ids: ids,\n      requestInfo: restService.buildRequestInfo()\n    };\n    const options = {\n      headers: new HttpHeaders({ 'Content-Type': 'application/json' }),\n      body: body\n    };\n    return restService.invoke(addSubSiblingUri, 'PUT', null, options).pipe(\n      map((responseInfo: ResponseInfo) => {\n        let path = this.getPaths(nodes, ids);\n        const entity = repository.entityManager.appendEntityByPath(path, responseInfo.returnValue)\n        return entity;\n      })\n    );\n  }\n\n  /**\n   * æ·»å å­è¡¨å­èç¹\n   */\n  public addSubChild(repository: BefRepository<Entity>, nodes: Array<string>, ids: Array<string>) {\n    const restService = repository.restService;\n    const baseUri = restService.baseUri;\n    const addSubChildUri = `${baseUri}/service/childnodeparenthierarchycreatechildlayer`;\n\n    const body = {\n      nodes: nodes,\n      ids: ids,\n      requestInfo: restService.buildRequestInfo()\n    };\n    const options = {\n      headers: new HttpHeaders({ 'Content-Type': 'application/json' }),\n      body: body\n    };\n    return restService.invoke(addSubChildUri, 'PUT', null, options).pipe(\n      map((responseInfo: ResponseInfo) => {\n        let paths = this.getPaths(nodes, ids);\n        const entity = repository.entityManager.appendEntityByPath(paths, responseInfo.returnValue);\n        return entity;\n      })\n    );\n  }\n\n  private getPaths(nodes: string[], ids: string[]) {\n    let paths = '';\n    if (nodes && nodes.length > 0 && ids && ids.length > 0) {\n      for (let i = 0; i < ids.length; i++) {\n        if (nodes[i]) {\n          paths = paths + `/${ids[i]}`;\n          paths = paths + `/${nodes[i]}s`;\n        }\n      }\n    }\n    return paths;\n  }\n\n  /**\n   * å è½½ç¶èç¹\n   */\n  // tslint:disable-next-line: max-line-length\n  public loadByParentId(repository: BefRepository<Entity>, hierarchyInfoKey: string, parentId: string, filters: any[], sorts: any[], frozenCurrentRow: boolean = false, pagination?: { pageSize: number, pageIndex: number }, frameContext?: FrameContext, reload: boolean = false): Observable<Entity[]> {\n    const localEntities = this.getChildren(repository, hierarchyInfoKey, parentId);\n    if (localEntities && localEntities.length > 0 && !reload) {\n      return of(localEntities);\n    }\n    const restService = repository.restService;\n    const parentHierarchyInfo = this.getHierarchyInfoById(repository, hierarchyInfoKey, parentId);\n    const originalHierarchyInfoKey = this.getOriginalHierarchyInfoKey(repository, hierarchyInfoKey);\n    const filtersWithParent = this.buildFiltersWithParent(originalHierarchyInfoKey, parentHierarchyInfo, filters);\n    const isUsePagination = pagination && pagination.pageSize > 0 || false;\n    // ç»ç»EntityFilter\n    const entityFilter = {\n      FilterConditions: filtersWithParent,\n      SortConditions: sorts,\n      IsUsePagination: isUsePagination,\n      Pagination: { PageIndex: pagination && pagination.pageIndex || 0, PageSize: pagination && pagination.pageSize || 0, PageCount: 0, TotalCount: 0 }\n    };\n    const requestInfo = restService.buildRequestInfo();\n    return restService.extendQuery(entityFilter, requestInfo).pipe(\n      map((responseInfo: ResponseInfo) => {\n        const paginationInfo = this.getPaginationInfo(responseInfo);\n        if (parentId) {\n          if (paginationInfo && paginationInfo.pageSize !== 0 && frameContext) {\n            frameContext.params.set(`_NODE_${parentId}_PAGINATION_INFO_`, paginationInfo);\n          }\n        } else {\n          if (paginationInfo && paginationInfo.pageSize !== 0 && frameContext) {\n            frameContext.repository.entityCollection.updatePaginationInfoByPath('/', paginationInfo);\n          }\n        }\n        // åæ¸ç©ºä¸çº§å®ä½\n        this.clearDescendantEntities(repository, hierarchyInfoKey, parentHierarchyInfo, frozenCurrentRow);\n        // è¿½å ä¸çº§å®ä½\n        const listData = responseInfo.returnValue.result;\n        const entities = repository.buildEntities(listData);\n        if (frozenCurrentRow) {\n          repository.entityCollection.addData(entities);\n        } else {\n          repository.entityCollection.addEntities(entities);\n        }\n        return entities;\n      })\n    );\n  }\n  // tslint:disable-next-line: max-line-length\n  public loadFullTree(repository: BefRepository<Entity>, hierarchyInfoKey: string, parentId: string, propertyName: string, fullTreeType: string, loadType: string, filters?: any[], context?: any): Observable<Entity[]> {\n    const restService = repository.restService;\n    const baseUri = restService.baseUri;\n    const queryUrl = `${baseUri}/service/parentidfulltreequery`;\n    const parentHierarchyInfo = this.getHierarchyInfoById(repository, hierarchyInfoKey, parentId);\n    const entityFilter = this.buildEntityFilter(filters, null, 0, 0);\n\n    const body = {\n      dataId: parentId || '',\n      isUsePagination: false,\n      virtualPropertyName: propertyName,\n      pagination: {},\n      fullTreeType,\n      loadType,\n      filter: entityFilter,\n      requestInfo: restService.buildRequestInfo()\n    };\n    const options = {\n      body: body\n    };\n    return restService.invoke(queryUrl, 'PUT', null, options).pipe(\n      tap((responseInfo: ResponseInfo) => {\n        // ä¿å­å±å¼çèç¹\n        if (responseInfo.returnValue && responseInfo.returnValue.selectedRowId && context && context.frameContext) {\n          const frameContext = context.frameContext as FrameContext;\n          const virtualRootFrameContext = frameContext && frameContext.getVirtualRootFrameContext() || null;\n          if (virtualRootFrameContext) {\n            const list = responseInfo.returnValue.result as any[];\n            const selectedRowId = responseInfo.returnValue.selectedRowId;\n            // ä»é¡¶å±å¼å§è®¡ç®ææéè¦å±å¼çèç¹\n            const leafNodeInfo = list.find(item => item[repository.primaryKey] === selectedRowId);\n            const hierarchyInfo = leafNodeInfo[hierarchyInfoKey] as { isDetail: boolean, layer: number, parentElement: string };\n            const ids = this.getAllParentIds(hierarchyInfo, list, hierarchyInfoKey, repository);\n            virtualRootFrameContext.params.set('_DEVKIT_expandRowIds', ids.join(','));\n            virtualRootFrameContext.params.set('_DEVKIT_selectedRowId', selectedRowId);\n            virtualRootFrameContext.uiState.setPropertyValue('__DEVKIT__selectedRow', selectedRowId);\n          }\n        }\n      }),\n      map((responseInfo: ResponseInfo) => {\n        const frozenCurrentRow = context && context.frozenCurrentRow || false;\n        // åæ¸ç©ºä¸çº§å®ä½\n        this.clearDescendantEntities(repository, hierarchyInfoKey, parentHierarchyInfo, frozenCurrentRow);\n        // è¿½å ä¸çº§å®ä½\n        const listData = responseInfo.returnValue.result;\n        const entities = repository.buildEntities(listData);\n        if (frozenCurrentRow) {\n          repository.entityCollection.addData(entities);\n        } else {\n          repository.entityCollection.addEntities(entities);\n        }\n        return entities;\n      })\n    );\n  }\n  /**\n   * æå¥å¯¹ç¶èç¹çè¿æ»¤\n   */\n  public buildFiltersWithParent(originalHierarchyInfoKey: string, parentHierarchyInfo: any, filterArray: any[]): any {\n    const relationType = filterArray && filterArray.length >= 1 ? 1 : 0;\n    const parentLayer = parentHierarchyInfo ? parentHierarchyInfo['layer'] : 0;\n    const parentElement = parentHierarchyInfo ? parentHierarchyInfo['id'] : '';\n\n    const parentFilterArray = [\n      {\n        \"FilterField\": `${originalHierarchyInfoKey}.Layer`,\n        \"Value\": parentLayer + 1,\n        \"Lbracket\": null,\n        \"Rbracket\": null,\n        \"Relation\": 1,\n        \"Expresstype\": 0,\n        \"Compare\": 0\n      }\n    ];\n    if (parentElement) {\n      parentFilterArray.push(\n        {\n          \"FilterField\": `${originalHierarchyInfoKey}.ParentElement`,\n          \"Value\": parentElement,\n          \"Lbracket\": null,\n          \"Rbracket\": null,\n          \"Relation\": relationType,\n          \"Expresstype\": 0,\n          \"Compare\": 0\n        }\n      );\n    } else {\n      parentFilterArray[0].Relation = relationType;\n    }\n    return parentFilterArray.concat(filterArray);\n  }\n  public buildEntityFilter(filter: any[], sort: any[], pageSize: number, pageIndex: number) {\n\n    // @todoï¼ä¸´æ¶å¼å®¹èä»£ç ï¼éä½æ¹å¨å¸¦æ¥çé£é©\n    if (!filter && !sort && !pageSize && !pageIndex) {\n      return null;\n    }\n    if (!filter) {\n      filter = [];\n    }\n    if (!sort) {\n      sort = [];\n    }\n    // çº æ­£æåä¸ä¸ªè¿æ»¤æ¡ä»¶çRelation\n    if (filter && filter.length > 0) {\n      filter[filter.length - 1].Relation = 0;\n    }\n    const entityFilter = {\n      FilterConditions: filter,\n      SortConditions: sort,\n      IsUsePagination: pageSize === 0 ? false : true,\n      Pagination: {\n        PageIndex: pageIndex,\n        PageSize: pageSize,\n        PageCount: 0,\n        TotalCount: 0\n      }\n    };\n    return entityFilter;\n  }\n  /**\n   * æ¸ç©ºåä»£å®ä½\n   * @description parentHierarchyInfoä¸­layerä¸ºè¦æ¸ç©ºåä»£èç¹çlayerï¼ä½éé¢çparentElementä¸æ¯ç¶çº§çidï¼èæ¯è¦æ¸ç©ºåä»£èç¹çid\n   */\n  public clearDescendantEntities(repository: BefRepository<Entity>, hierarchyInfokey: string, parentHierarchyInfo: any, frozenCurrentRow: boolean = false): void {\n    // æ¸ç©ºæ ¹èç¹\n    if (!parentHierarchyInfo) {\n      repository.entityCollection.clear();\n      return;\n    }\n    const nodes = this.getChildNodes(repository, hierarchyInfokey, parentHierarchyInfo);\n    if (frozenCurrentRow) {\n      repository.entityCollection.removeEntities((entity: Entity) => {\n        const id = entity[entity.primaryKey];\n        return nodes.includes(id);\n      });\n    } else {\n      repository.entityCollection.removeData((entity: Entity) => {\n        const id = entity[entity.primaryKey];\n        return nodes.includes(id);\n      });\n    }\n\n  }\n  /**\n   * è·åæä¸ªèç¹çææå­èç¹\n   * @param repository repository\n   * @param hierarchyInfokey hierarchyInfokey\n   * @param parentHierarchyInfo parentHierarchyInfo\n   */\n  private getChildNodes(repository: BefRepository<Entity>, hierarchyInfokey: string, parentHierarchyInfo: any) {\n    const fparentElement = parentHierarchyInfo.id;\n    const flayer = parentHierarchyInfo.layer;\n    let nodes = [];\n    repository.entityCollection.getAllEntities().forEach(entity => {\n      const hierarchyInfo = entity[hierarchyInfokey];\n      const parentElement = hierarchyInfo.parentElement;\n      const layer = hierarchyInfo.layer;\n      const result = layer >= (flayer + 1) && parentElement === fparentElement;\n      if (result) {\n        const id = entity[entity.primaryKey];\n        nodes.push(id);\n        const childHierarchyInfo = this.getHierarchyInfoById(repository, hierarchyInfokey, id);\n        const childs = this.getChildNodes(repository, hierarchyInfokey, childHierarchyInfo);\n        if (childs && childs.length > 0) {\n          nodes = nodes.concat(childs);\n        }\n      }\n    });\n    return nodes;\n  }\n  /**\n   * è·åå®ä½çåçº§ä¿¡æ¯\n   */\n  public getHierarchyInfoById(repository: BefRepository<Entity>, hierarchyInfokey: string, id: string): any {\n    if (!id) {\n      return null;\n    }\n    const entity: Entity = repository.entityCollection.getEntityById(id);\n    const hierarchyInfoEntity: Entity = entity[hierarchyInfokey];\n    const result = hierarchyInfoEntity.toJSON();\n    result['id'] = id;\n    return result;\n  }\n  public getHierarchyInfo(entity: Entity, hierarchyInfokey: string): { parentElement: string, layer: number, isDetail: boolean } {\n    return entity[hierarchyInfokey];\n  }\n  /**\n   * è·ååçº§ç çåå§çå­æ®µå\n   */\n  public getOriginalHierarchyInfoKey(repository: BefRepository<Entity>, hierarchyInfokey: string): string {\n    const ngObjects = FieldMetadataUtil.getNgObjects(repository.entityType);\n    const hierarchyInfoNgObject = ngObjects[hierarchyInfokey];\n    return hierarchyInfoNgObject.originalDataField as string;\n  }\n  private getPaginationInfo(responseInfo: ResponseInfo) {\n    return responseInfo && responseInfo.returnValue && responseInfo.returnValue.pagination || null;\n  }\n  private findParent(hierarchyInfo: { isDetail: boolean, layer: number, parentElement: string }, list: any[], hierarchyInfoKey: string) {\n    return list.find(item => {\n      const currentHierarchyInfo = item[hierarchyInfoKey] as { isDetail: boolean, layer: number, parentElement: string };\n      return currentHierarchyInfo.layer === hierarchyInfo.layer - 1 && hierarchyInfo.parentElement === currentHierarchyInfo.parentElement;\n    });\n  }\n  private getAllParentIds(hierarchyInfo: { isDetail: boolean, layer: number, parentElement: string }, list: any[], hierarchyInfoKey: string, repository: Repository<any>) {\n    let item = this.findParent(hierarchyInfo, list, hierarchyInfoKey);\n    const ids = [];\n    while (item) {\n      ids.push(item[repository.primaryKey]);\n      item = this.findParent(item[hierarchyInfoKey], list, hierarchyInfoKey);\n    }\n    return ids;\n  }\n  /**\n   * æ¥æ¾èç¹ä¸ææå­çº§ï¼ç¬¬ä¸çº§ï¼\n   * @param repository repository\n   * @param hierarchyInfoKey åçº§ç å­æ®µ\n   * @param id id\n   * @returns \n   */\n  private getChildren(repository: BefRepository<Entity>, hierarchyInfoKey: string, id: string): Entity[] {\n    const hierarchyInfo = this.getHierarchyInfoById(repository, hierarchyInfoKey, id);\n    if (!hierarchyInfo) {\n      return null;\n    }\n    const layer = hierarchyInfo.layer;\n    const parentElement = hierarchyInfo.parentElement;\n    const entities: Entity[] = repository.entityCollection.getEntities((entity: Entity) => {\n      const hierarchyInfo = this.getHierarchyInfo(entity, hierarchyInfoKey);\n      const matched = hierarchyInfo.layer === layer + 1 && (hierarchyInfo.parentElement === parentElement || !parentElement && !hierarchyInfo.parentElement);\n      if (matched) {\n        return entity;\n      } else {\n        return null;\n      }\n    });\n    return entities;\n  }\n}\n\nexport { ParentTreeRepository };\n","import { HttpHeaders } from '@angular/common/http';\nimport { Observable, of } from 'rxjs';\nimport { map, tap } from 'rxjs/operators';\nimport { Entity, FieldMetadataUtil, FrameContext, Repository } from '@farris/devkit';\nimport { ResponseInfo, BefRepository } from '@farris/bef';\n\n/**\n * è·¯å¾æ ä»åº\n */\nclass PathTreeRepository {\n\n  /**\n   * æ·»å åå¼èç¹\n   */\n  public addSibling(repository: BefRepository<Entity>, id: string): Observable<Entity> {\n    const restService = repository.restService;\n    const baseUri = restService.baseUri;\n    const addSiblingUri = `${baseUri}/service/pathhierarchycreatesibling`;\n    const body = {\n      dataID: id,\n      requestInfo: restService.buildRequestInfo()\n    };\n    const options = {\n      headers: new HttpHeaders({ 'Content-Type': 'application/json' }),\n      body: body\n    };\n    return restService.invoke(addSiblingUri, 'PUT', null, options).pipe(\n      map((responseInfo: ResponseInfo) => {\n        const entity = repository.buildEntity(responseInfo.returnValue);\n        repository.entityCollection.addEntity(entity);\n        return entity;\n      })\n    );\n  }\n\n  /**\n   * æ·»å åå¼èç¹\n   */\n  public addChild(repository: BefRepository<Entity>, parentId: string) {\n    const restService = repository.restService;\n    const baseUri = restService.baseUri;\n    const addChildUri = `${baseUri}/service/pathhierarchycreatechildlayer`;\n\n    const body = {\n      dataID: parentId,\n      requestInfo: restService.buildRequestInfo()\n    };\n    const options = {\n      headers: new HttpHeaders({ 'Content-Type': 'application/json' }),\n      body: body\n    };\n    return restService.invoke(addChildUri, 'PUT', null, options).pipe(\n      map((responseInfo: ResponseInfo) => {\n        const entity = repository.buildEntity(responseInfo.returnValue);\n        repository.entityCollection.addEntity(entity);\n        return entity;\n      })\n    );\n  }\n\n  /**\n   * æ·»å å­è¡¨åå¼èç¹\n   */\n  public addSubSibling(repository: BefRepository<Entity>, nodes: Array<string>, ids: Array<string>): Observable<Entity> {\n    const restService = repository.restService;\n    const baseUri = restService.baseUri;\n    const addSubSiblingUri = `${baseUri}/service/childnodepathhierarchycreatesibling`;\n    const body = {\n      nodes: nodes,\n      ids: ids,\n      requestInfo: restService.buildRequestInfo()\n    };\n    const options = {\n      headers: new HttpHeaders({ 'Content-Type': 'application/json' }),\n      body: body\n    };\n    return restService.invoke(addSubSiblingUri, 'PUT', null, options).pipe(\n      map((responseInfo: ResponseInfo) => {\n        let path = this.getPaths(nodes, ids);\n        const entity = repository.entityManager.appendEntityByPath(path, responseInfo.returnValue)\n        return entity;\n      })\n    );\n  }\n\n  /**\n  * æ·»å å­è¡¨å­èç¹\n  */\n  public addSubChild(repository: BefRepository<Entity>, nodes: Array<string>, ids: Array<string>) {\n    const restService = repository.restService;\n    const baseUri = restService.baseUri;\n    const addSubChildUri = `${baseUri}/service/childnodepathhierarchycreatechildlayer`;\n\n    const body = {\n      nodes: nodes,\n      ids: ids,\n      requestInfo: restService.buildRequestInfo()\n    };\n    const options = {\n      headers: new HttpHeaders({ 'Content-Type': 'application/json' }),\n      body: body\n    };\n    return restService.invoke(addSubChildUri, 'PUT', null, options).pipe(\n      map((responseInfo: ResponseInfo) => {\n        let path = this.getPaths(nodes, ids);\n        const entity = repository.entityManager.appendEntityByPath(path, responseInfo.returnValue)\n        return entity;\n      })\n    );\n  }\n\n  private getPaths(nodes: string[], ids: string[]) {\n    let paths = '';\n    if (nodes && nodes.length > 0 && ids && ids.length > 0) {\n      for (let i = 0; i < ids.length; i++) {\n        if (nodes[i]) {\n          paths = paths + `/${ids[i]}`;\n          paths = paths + `/${nodes[i]}s`;\n        }\n      }\n    }\n    return paths;\n  }\n\n  /**\n   * å è½½ç¶èç¹\n   */\n  // tslint:disable-next-line: max-line-length\n  public loadByParentId(repository: BefRepository<Entity>, hierarchyInfoKey: string, parentId: string, filters: any[], sorts: any[], frozenCurrentRow: boolean = false, pagination?: { pageSize: number, pageIndex: number }, frameContext?: FrameContext, reload: boolean = false): Observable<Entity[]> {\n    const localEntities = this.getChildren(repository, hierarchyInfoKey, parentId);\n    if (localEntities && localEntities.length > 0 && !reload) {\n      return of(localEntities);\n    }\n    const restService = repository.restService;\n    const parentHierarchyInfo = this.getHierarchyInfoById(repository, hierarchyInfoKey, parentId);\n    const originalHierarchyInfoKey = this.getOriginalHierarchyInfoKey(repository, hierarchyInfoKey);\n    const filtersWithParent = this.buildFiltersWithParent(originalHierarchyInfoKey, parentHierarchyInfo, filters);\n    const isUsePagination = pagination && pagination.pageSize > 0 || false;\n    // ç»ç»EntityFilter\n    const entityFilter = {\n      FilterConditions: filtersWithParent,\n      SortConditions: sorts,\n      IsUsePagination: isUsePagination,\n      Pagination: { PageIndex: pagination && pagination.pageIndex || 0, PageSize: pagination && pagination.pageSize || 0, PageCount: 0, TotalCount: 0 }\n    };\n    const requestInfo = restService.buildRequestInfo();\n    return restService.extendQuery(entityFilter, requestInfo).pipe(\n      map((responseInfo: ResponseInfo) => {\n        const paginationInfo = this.getPaginationInfo(responseInfo);\n        if (parentId) {\n          if (paginationInfo && paginationInfo.pageSize !== 0 && frameContext) {\n            frameContext.params.set(`_NODE_${parentId}_PAGINATION_INFO_`, paginationInfo);\n          }\n        } else {\n          if (paginationInfo && paginationInfo.pageSize !== 0 && frameContext) {\n            frameContext.repository.entityCollection.updatePaginationInfoByPath('/', paginationInfo);\n          }\n        }\n        // åæ¸ç©ºä¸çº§å®ä½\n        this.clearDescendantEntities(repository, hierarchyInfoKey, parentHierarchyInfo, frozenCurrentRow);\n        // è¿½å ä¸çº§å®ä½\n        const listData = responseInfo.returnValue.result;\n        const entities = repository.buildEntities(listData);\n        if (frozenCurrentRow) {\n          repository.entityCollection.addData(entities);\n        } else {\n          repository.entityCollection.addEntities(entities);\n        }\n\n        return entities;\n      })\n    );\n  }\n  // tslint:disable-next-line: max-line-length\n  public loadFullTree(repository: BefRepository<Entity>, hierarchyInfoKey: string, parentId: string, propertyName: string, fullTreeType: string, loadType: string, filters?: any[], context?: any): Observable<Entity[]> {\n    const restService = repository.restService;\n    const baseUri = restService.baseUri;\n    const queryUrl = `${baseUri}/service/parentidfulltreequery`;\n    const pathHierarchyInfo = this.getHierarchyInfoById(repository, hierarchyInfoKey, parentId);\n    const entityFilter = this.buildEntityFilter(filters, null, 0, 0);\n    const body = {\n      dataId: parentId || '',\n      isUsePagination: false,\n      virtualPropertyName: propertyName,\n      pagination: {},\n      fullTreeType,\n      loadType,\n      filter: entityFilter,\n      requestInfo: restService.buildRequestInfo()\n    };\n    const options = {\n      body: body\n    };\n    return restService.invoke(queryUrl, 'PUT', null, options).pipe(\n      tap((responseInfo: ResponseInfo) => {\n        // ä¿å­å±å¼çèç¹\n        if (responseInfo.returnValue && responseInfo.returnValue.selectedRowId && context && context.frameContext) {\n          const frameContext = context.frameContext as FrameContext;\n          const virtualRootFrameContext = frameContext && frameContext.getVirtualRootFrameContext() || null;\n          if (virtualRootFrameContext) {\n            const list = responseInfo.returnValue.result as any[];\n            const selectedRowId = responseInfo.returnValue.selectedRowId;\n            // ä»é¡¶å±å¼å§è®¡ç®ææéè¦å±å¼çèç¹\n            const leafNodeInfo = list.find(item => item[repository.primaryKey] === selectedRowId);\n            const hierarchyInfo = leafNodeInfo[hierarchyInfoKey] as { isDetail: boolean, layer: number, path: string };\n            const ids = this.getAllParentIds(hierarchyInfo, list, hierarchyInfoKey, repository);\n            virtualRootFrameContext.params.set('_DEVKIT_expandRowIds', ids.join(','));\n            virtualRootFrameContext.params.set('_DEVKIT_selectedRowId', selectedRowId);\n            virtualRootFrameContext.uiState.setPropertyValue('__DEVKIT__selectedRow', selectedRowId);\n          }\n        }\n      }),\n      map((responseInfo: ResponseInfo) => {\n        const frozenCurrentRow: boolean = context && context.frozenCurrentRow || false;\n        // åæ¸ç©ºä¸çº§å®ä½\n        this.clearDescendantEntities(repository, hierarchyInfoKey, pathHierarchyInfo, frozenCurrentRow);\n        // è¿½å ä¸çº§å®ä½\n        const listData = responseInfo.returnValue.result;\n        const entities = repository.buildEntities(listData);\n        if (frozenCurrentRow) {\n          repository.entityCollection.addData(entities);\n        } else {\n          repository.entityCollection.addEntities(entities);\n        }\n        return entities;\n      })\n    );\n  }\n  /**\n   * æå¥å¯¹ç¶èç¹çè¿æ»¤\n   */\n  public buildFiltersWithParent(originalHierarchyInfoKey: string, parentHierarchyInfo: any, filterArray: any[]): any {\n    const relationType = filterArray && filterArray.length >= 1 ? 1 : 0;\n\n    const parentLayer = parentHierarchyInfo ? parentHierarchyInfo['layer'] : 0;\n    const parentFilterArray = [\n      {\n        \"FilterField\": `${originalHierarchyInfoKey}.Layer`,\n        \"Value\": parentLayer + 1,\n        \"Lbracket\": null,\n        \"Rbracket\": null,\n        \"Relation\": 1,\n        \"Expresstype\": 0,\n        \"Compare\": 0\n      }\n    ];\n\n    // ç¶è·¯å¾è¿æ»¤ï¼å¦æä¸ºç©ºï¼åä¸æ·»å ï¼å¼å®¹oracleåæ°ï¼\n    const parentPath = parentHierarchyInfo ? parentHierarchyInfo['path'] : '';\n    if (parentPath) {\n      parentFilterArray.push({\n        \"FilterField\": `${originalHierarchyInfoKey}.Path`,\n        \"Value\": parentPath,\n        \"Lbracket\": null,\n        \"Rbracket\": null,\n        \"Relation\": relationType,\n        \"Expresstype\": 0,\n        \"Compare\": 7\n      });\n    } else {\n      parentFilterArray[0].Relation = relationType;\n    }\n\n    return parentFilterArray.concat(filterArray);\n  }\n  public buildEntityFilter(filter: any[], sort: any[], pageSize: number, pageIndex: number) {\n\n    // @todoï¼ä¸´æ¶å¼å®¹èä»£ç ï¼éä½æ¹å¨å¸¦æ¥çé£é©\n    if (!filter && !sort && !pageSize && !pageIndex) {\n      return null;\n    }\n    if (!filter) {\n      filter = [];\n    }\n    if (!sort) {\n      sort = [];\n    }\n    // çº æ­£æåä¸ä¸ªè¿æ»¤æ¡ä»¶çRelation\n    if (filter && filter.length > 0) {\n      filter[filter.length - 1].Relation = 0;\n    }\n    const entityFilter = {\n      FilterConditions: filter,\n      SortConditions: sort,\n      IsUsePagination: pageSize === 0 ? false : true,\n      Pagination: {\n        PageIndex: pageIndex,\n        PageSize: pageSize,\n        PageCount: 0,\n        TotalCount: 0\n      }\n    };\n    return entityFilter;\n  }\n  /**\n   * æ¸ç©ºåä»£å®ä½\n   */\n  public clearDescendantEntities(repository: BefRepository<Entity>, hierarchyInfokey: string, parentHierarchyInfo: any, frozenCurrentRow: boolean = false): void {\n\n    // æ¸ç©ºæ ¹èç¹\n    if (!parentHierarchyInfo) {\n      repository.entityCollection.clear();\n      return;\n    }\n    const fPath = parentHierarchyInfo.path;\n    const fLayer = parentHierarchyInfo.layer;\n    if (frozenCurrentRow) {\n      repository.entityCollection.removeData((entity: Entity) => {\n        const hierarchyInfo = entity[hierarchyInfokey];\n        const path = hierarchyInfo.path;\n        const layer = hierarchyInfo.layer;\n        return layer > fLayer && path.startsWith(fPath);\n      });\n    } else {\n      repository.entityCollection.removeEntities((entity: Entity) => {\n        const hierarchyInfo = entity[hierarchyInfokey];\n        const path = hierarchyInfo.path;\n        const layer = hierarchyInfo.layer;\n        return layer > fLayer && path.startsWith(fPath);\n      });\n    }\n\n  }\n\n  /**\n   * è·åå®ä½çåçº§ä¿¡æ¯\n   */\n  public getHierarchyInfoById(repository: BefRepository<Entity>, hierarchyInfokey: string, id: string): any {\n    if (!id) {\n      return null;\n    }\n    const entity: Entity = repository.entityCollection.getEntityById(id);\n    const hierarchyInfoEntity: Entity = entity[hierarchyInfokey];\n    return hierarchyInfoEntity.toJSON();\n  }\n\n  /**\n   * è·ååçº§ç çåå§çå­æ®µå\n   */\n  public getOriginalHierarchyInfoKey(repository: BefRepository<Entity>, hierarchyInfokey: string): string {\n    const ngObjects = FieldMetadataUtil.getNgObjects(repository.entityType);\n    const hierarchyInfoNgObject = ngObjects[hierarchyInfokey];\n    return hierarchyInfoNgObject.originalDataField as string;\n  }\n  private getPaginationInfo(responseInfo: ResponseInfo) {\n    return responseInfo && responseInfo.returnValue && responseInfo.returnValue.pagination || null;\n  }\n  private findParent(hierarchyInfo: { isDetail: boolean, layer: number, path: string }, list: any[], hierarchyInfoKey: string) {\n    return list.find(item => {\n      const currentHierarchyInfo = item[hierarchyInfoKey] as { isDetail: boolean, layer: number, path: string };\n      return currentHierarchyInfo.layer === hierarchyInfo.layer - 1 && hierarchyInfo.path.startsWith(currentHierarchyInfo.path);\n    });\n  }\n  private getAllParentIds(hierarchyInfo: { isDetail: boolean, layer: number, path: string }, list: any[], hierarchyInfoKey: string, repository: Repository<any>) {\n    let item = this.findParent(hierarchyInfo, list, hierarchyInfoKey);\n    const ids = [];\n    while (item) {\n      ids.push(item[repository.primaryKey]);\n      item = this.findParent(item[hierarchyInfoKey], list, hierarchyInfoKey);\n    }\n    return ids;\n  }\n  private getHierarchyInfo(entity: Entity, hierarchyInfoKey: string): { path: string, layer: number, isDetail: boolean } {\n    return entity[hierarchyInfoKey];\n  }\n  /**\n   * æ¥æ¾èç¹ä¸ææå­çº§ï¼ç¬¬ä¸çº§ï¼\n   * @param repository repository\n   * @param hierarchyInfoKey åçº§ç å­æ®µ\n   * @param id id\n   * @returns \n   */\n  private getChildren(repository: BefRepository<Entity>, hierarchyInfoKey: string, id: string): Entity[] {\n    const hierarchyInfo = this.getHierarchyInfoById(repository, hierarchyInfoKey, id);\n    if (!hierarchyInfo) {\n      return null;\n    }\n    const layer = hierarchyInfo.layer;\n    const path = hierarchyInfo.path;\n    const entities: Entity[] = repository.entityCollection.getEntities((entity: Entity) => {\n      const hierarchyInfo = this.getHierarchyInfo(entity, hierarchyInfoKey);\n      const matched = hierarchyInfo.layer === layer + 1 && hierarchyInfo.path.startsWith(path);\n      if (matched) {\n        return entity;\n      } else {\n        return null;\n      }\n    });\n    return entities;\n  }\n}\n\nexport { PathTreeRepository };\n","import { ParentTreeRepository } from './parent-tree-repository';\nimport { PathTreeRepository } from './path-tree-repository';\n\nexport class TreeRepositoryFactory {\n    static getInstance(treeType: string){\n        let repository=null;\n        switch (treeType) {\n            case \"path\":\n                repository = new PathTreeRepository();\n                break;\n            case \"parent\":\n                repository = new ParentTreeRepository();\n                break;\n            default: break;\n        }\n        return repository;\n    }\n}","import { Injectable, Optional } from '@angular/core';\nimport { Observable, of, empty, EMPTY } from 'rxjs';\nimport { tap, switchMap, concatMap } from 'rxjs/operators';\n\nimport { Entity, FrameContext, FieldMetadataUtil, NgFieldProperty } from '@farris/devkit';\nimport { BefRepository, BefRepositoryUtil } from '@farris/bef';\n\nimport { FormLoadingService } from '../form-loading/form-loading.service';\nimport { FormNotifyService } from '../form-notify.service';\nimport { LanguageService } from '../languag.service';\nimport { FormMessageService } from '../form-message.service';\nimport { FormErrorService } from '../error/form-error.service';\n\nimport { BaseDataService } from './base-data.service';\nimport { EditStateUtil } from './utils/index';\nimport { TreeUtilFactory } from './tree-table/util/tree-util-factory';\nimport { TreeRepositoryFactory } from './tree-table/repository/tree-repository-factory';\n// tslint:disable: no-string-literal\n\n/**\n * æ æ°æ®æå¡\n */\n@Injectable()\nclass TreeDataService extends BaseDataService {\n\n  /**\n   * åçº§ä¿¡æ¯å­æ®µå\n   */\n  private get hierarchyInfoKey(): string {\n    return this.virtualRootFrameContext.getParam('hierarchyInfoKey');\n  }\n  private get virtualRootFrameContext() {\n    return this.frameContext.getVirtualRootFrameContext();\n  }\n\n  /**\n   * æé å½æ°\n   */\n  constructor(\n    frameContext: FrameContext,\n    private messageService: FormMessageService,\n    private loadingService: FormLoadingService,\n    private notifyService: FormNotifyService,\n    private errorService: FormErrorService,\n    @Optional() private languageService: LanguageService\n  ) {\n    super(frameContext);\n    if (!languageService) {\n      this.languageService = LanguageService.getInstance();\n    }\n  }\n\n  /**\n   * å è½½æ°æ®\n   */\n  public load(filters?: string, sorts?: string): Observable<Entity[]> {\n    const filtersArray = this.parseConditions(filters);\n    const sortsArray = this.parseConditions(sorts);\n    const correctSelectedNode = this.repository.entityCollection.count() === 0;\n\n    const loadingTimerId = this.loadingService.showLoadingWithDelay(500);\n    const query$ = this.repository.getEntities(filtersArray, sortsArray, null, null);\n    return query$.pipe(\n      tap(\n        () => {\n\n          // çº æ­£éä¸­èç¹\n          if (correctSelectedNode === true) {\n            const hierarchyType = this.getHierarchyType();\n            const treeNodeUtil = TreeUtilFactory.getInstance(hierarchyType);\n            if (treeNodeUtil !== null) {\n              treeNodeUtil.selectFirstRootNode(this.bindingData, this.hierarchyInfoKey);\n            }\n          }\n\n          this.loadingService.hideDelayLoading(loadingTimerId);\n        },\n        (error: any) => {\n          this.loadingService.hideDelayLoading(loadingTimerId);\n          this.errorService.exception(this.languageService.loadFailed, error);\n        }\n      )\n    );\n  }\n\n  /**\n   * åå±å è½½æ°æ®\n   */\n  public loadByLevel(filters?: string, sorts?: string, frozenCurrentRow?: boolean | string): Observable<Entity[]> {\n    this.setLoadByLevelState(filters, sorts);\n    const filtersArray = this.parseConditions(filters);\n    const sortsArray = this.parseConditions(sorts);\n    // const parentId = this.bindingData.list.currentId;\n    const parentId = this.getIdToExpand();\n    const correctSelectedNode = this.repository.entityCollection.count() === 0;\n    if (frozenCurrentRow === undefined) {\n      frozenCurrentRow = false;\n    }\n    if (typeof frozenCurrentRow !== 'boolean') {\n      frozenCurrentRow = frozenCurrentRow === 'true' ? true : false;\n    }\n    const hierarchyType = this.getHierarchyType();\n    const repository = TreeRepositoryFactory.getInstance(hierarchyType);\n\n    if (repository === null) {\n      return empty();\n    }\n    const loadingTimerId = this.loadingService.showLoadingWithDelay(500);\n    // æé åé¡µä¿¡æ¯\n    const pagination = this.buildPaginationInfo(parentId);\n    const reload = this.frameContext.params.get('_RELOAD_CHILDREN_') || false;\n    const query$ = repository.loadByParentId(this.repository, this.hierarchyInfoKey, parentId, filtersArray, sortsArray, frozenCurrentRow, pagination, this.frameContext, reload);\n    return query$.pipe(\n      tap(\n        (entities: Entity[]) => {\n          this.frameContext.params.delete('_RELOAD_CHILDREN_');\n          // çº æ­£éä¸­èç¹\n          if (correctSelectedNode === true) {\n            const treeNodeUtil = TreeUtilFactory.getInstance(hierarchyType);\n            if (treeNodeUtil !== null) {\n              treeNodeUtil.selectFirstRootNode(this.bindingData, this.hierarchyInfoKey);\n            }\n          }\n          const currentRowId = this.bindingData.list.currentItem.primaryKeyValue;\n          if (frozenCurrentRow) {\n            // å¦æä¸ä¸æ¬¡éä¸­è¡ä¸ºæ¬æ¬¡å è½½æ°æ®ä¸­çä¸æ¡ï¼ååºè¯¥éæ°éä¸­è¯¥è¡\n            const containsCurrentRow = entities.find(item => item.primaryValue === currentRowId);\n            if (containsCurrentRow) {\n              this.setCurrentId(currentRowId);\n            }\n            // åæ¥çå½åè¡ä¸å¨å·²ç»å è½½çæ°æ®ä¸­ï¼å¦å±å¼å°ç¬¬ä¸çº§ï¼å°ç¬¬ä¸çº§çæè¡è®¾ä¸ºå½åè¡ï¼å¨é¨æ¶èµ·ï¼å±å¼ç¬¬ä¸çº§\n            if (!this.repository.entityCollection.getEntityById(currentRowId)) {\n              const firstChildId = entities && Array.isArray(entities) && entities.length > 0 && entities[0].primaryValue || null;\n              if (firstChildId) {\n                this.setCurrentId(firstChildId);\n              }\n            }\n          }\n          this.loadingService.hideDelayLoading(loadingTimerId);\n        },\n        error => {\n          this.loadingService.hideDelayLoading(loadingTimerId);\n          this.errorService.exception(this.languageService.loadFailed, error);\n        }\n      )\n    );\n  }\n  /**\n   * å è½½å®æ´æ \n   * @param virtualPropertyName èæå­æ®µ\n   * @param fullTreeType æ¯å¦æ¯å®æ´æ å è½½ 0ï¼å®æ´æ  1ï¼é¨åæ \n   * @param loadType æ¯å¦åçº§å è½½ 0ï¼å¨é¨å è½½ 1ï¼åçº§å è½½\n   * @param filter è¿æ»¤æ¡ä»¶\n   * @param frozenCurrentRow å»ç»å½åè¡\n   */\n  public loadFullTree(virtualPropertyName: string, fullTreeType: string, loadType: string, filters: string, frozenCurrentRow?: boolean | string): Observable<Entity[]> {\n    if (typeof fullTreeType !== 'string') {\n      throw new Error('ArgumentError: fullTreeType ä¸è½ä¸ºç©ºä¸å¿é¡»ä¸ºå­ç¬¦ä¸²ã');\n    }\n    if (typeof loadType !== 'string') {\n      throw new Error('ArgumentError: loadType ä¸è½ä¸ºç©ºä¸å¿é¡»ä¸ºå­ç¬¦ä¸²ã');\n    }\n    if (frozenCurrentRow === undefined) {\n      frozenCurrentRow = false;\n    }\n    if (typeof frozenCurrentRow !== 'boolean') {\n      frozenCurrentRow = frozenCurrentRow === 'true' ? true : false;\n    }\n    const virtualRootFrameContext = this.virtualRootFrameContext;\n    // è¿åä¸æ¬¡è®¾ç½®çç»æé\n    virtualRootFrameContext.params.delete('_DEVKIT_expandRowIds');\n    virtualRootFrameContext.params.delete('_DEVKIT_selectedRowId');\n    virtualRootFrameContext.uiState.setPropertyValue('__DEVKIT__selectedRow', null);\n    const filtersArray = this.parseConditions(filters);\n    const parentId = this.getIdToExpand();\n    const correctSelectedNode = this.repository.entityCollection.count() === 0;\n    const hierarchyType = this.getHierarchyType();\n    const repository = TreeRepositoryFactory.getInstance(hierarchyType);\n\n    if (repository === null) {\n      return EMPTY;\n    }\n    const loadingTimerId = this.loadingService.showLoadingWithDelay(500);\n    const context = {\n      frameContext: this.frameContext,\n      frozenCurrentRow\n    };\n    // tslint:disable-next-line: max-line-length\n    const query$ = repository.loadFullTree(this.repository, this.hierarchyInfoKey, parentId, virtualPropertyName, fullTreeType, loadType, filtersArray, context);\n    return query$.pipe(\n      tap(\n        (entities: Entity[]) => {\n          const selectedRowId = virtualRootFrameContext.params.get('_DEVKIT_selectedRowId');\n          // çº æ­£éä¸­èç¹\n          if (correctSelectedNode === true || !selectedRowId) {\n            const treeNodeUtil = TreeUtilFactory.getInstance(hierarchyType);\n            if (treeNodeUtil !== null) {\n              treeNodeUtil.selectFirstRootNode(this.bindingData, this.hierarchyInfoKey);\n            }\n          }\n          const currentRowId = this.bindingData.list.currentItem.primaryKeyValue;\n          if (frozenCurrentRow) {\n            // å¦æä¸ä¸æ¬¡éä¸­è¡ä¸ºæ¬æ¬¡å è½½æ°æ®ä¸­çä¸æ¡ï¼ååºè¯¥éæ°éä¸­è¯¥è¡\n            const containsCurrentRow = entities.find(item => item.primaryValue === currentRowId);\n            if (containsCurrentRow) {\n              this.setCurrentId(currentRowId);\n            }\n            // åæ¥çå½åè¡ä¸å¨å·²ç»å è½½çæ°æ®ä¸­ï¼å¦å±å¼å°ç¬¬ä¸çº§ï¼å°ç¬¬ä¸çº§çæè¡è®¾ä¸ºå½åè¡ï¼å¨é¨æ¶èµ·ï¼å±å¼ç¬¬ä¸çº§\n            if (!this.repository.entityCollection.getEntityById(currentRowId) && entities && entities.length > 0) {\n              const firstChildId = entities && Array.isArray(entities) && entities.length > 0 && entities[0].primaryValue || null;\n              if (firstChildId) {\n                this.setCurrentId(firstChildId);\n              }\n            }\n          }\n          this.loadingService.hideDelayLoading(loadingTimerId);\n        },\n        error => {\n          this.loadingService.hideDelayLoading(loadingTimerId);\n          this.errorService.exception(this.languageService.loadFailed, error);\n        }\n      )\n    );\n  }\n  /**\n   * è·åææ°å±å¼çèç¹\n   */\n  public getIdToExpand() {\n    const expandNodes = this.virtualRootFrameContext.getParam('TREE_LATEST_EXPANDED_ID') || [];\n    const idToExpand = expandNodes.pop();\n    this.virtualRootFrameContext.setParam('TREE_LATEST_EXPANDED_ID', expandNodes);\n    return idToExpand;\n  }\n\n  /**\n   * è®¾ç½®ææ°å±å¼çèç¹\n   */\n  public setIdToExpand(idToExpand: string): void {\n    const expandNodes = this.virtualRootFrameContext.getParam('TREE_LATEST_EXPANDED_ID') || [];\n    expandNodes.push(idToExpand);\n    this.virtualRootFrameContext.setParam('TREE_LATEST_EXPANDED_ID', expandNodes);\n  }\n\n  /**\n   * è§£æè¿æ»¤æ¡ä»¶\n   */\n  public parseConditions(conditions?: string): any[] {\n    const conditionsString = (!conditions || conditions === '') ? '[]' : conditions;\n    return JSON.parse(conditionsString);\n  }\n\n  /**\n   * æ°å¢åçº§\n   */\n  public addSibling(id: string): Observable<any> {\n\n    // è®¾è®¡æ¶idçè·åæ¹ä¸ºä»å½ä»¤åæ°ä¸è·åï¼ä½è®¾è®¡æ¶æ²¡æåæ°å¿å¡«æ£æ¥ï¼\n    // å¦ææå¼è¡¨åä¿å­äºï¼å³æ´æ°äºææ°çå½ä»¤æä»¶ï¼ï¼ä½æ²¡æéç½®è¯¥åæ°ï¼å¯è½ä¼ä¼ éè¿æ¥ä¸ä¸ªç©ºå¼ï¼\n    // ä¸ºäºå¼å®¹æ­¤æåµï¼ä½¿ç¨å½åè¡idä½ä¸ºidçå¼\n    id = id ? id : this.bindingData.list.currentId;\n\n    // åæ°æ£æ¥\n    if (!id || id === 'undefined') {\n      id = '';\n    }\n\n    // è®°å½æè¿ä¸æ¬¡ä¿®æ¹çæ°æ®id\n    const lastModifiedId = this.bindingData.list.currentId;\n    // è·ååçº§æ¹å¼\n    const hierarchyType: string = this.getHierarchyType();\n    // æ§è¡åæ°\n    const loadingTimerId = this.loadingService.showLoadingWithDelay(500);\n    const repository = TreeRepositoryFactory.getInstance(hierarchyType);\n    if (!repository) {\n      // éè¯¯çåçº§ç \n      throw new Error(this.languageService['errorHierarchyKey']);\n    }\n    const result$ = repository.addSibling(this.repository, id);\n    return result$.pipe(\n      tap(\n        () => {\n          this.virtualRootFrameContext.setParam('IS_ADD', true);\n          this.virtualRootFrameContext.setParam('LAST_MODIFIED_ID', lastModifiedId);\n          this.loadingService.hideDelayLoading(loadingTimerId);\n        },\n        error => {\n          this.loadingService.hideDelayLoading(loadingTimerId);\n          this.errorService.exception(this.languageService.addSiblingFailed, error);\n        }\n      )\n    );\n  }\n\n  /**\n   * æ°å¢ä¸çº§\n   */\n  public addChild(id: string): Observable<any> {\n\n    // åå åaddSiblingçä¿®æ¹\n    id = id ? id : this.bindingData.list.currentId;\n\n    // åæ°æ£æ¥\n    if (!id) {\n      // è¯·éæ©ç¶èç¹\n      this.notifyService.warning(this.languageService['plsSelectParentNode'], { hideTitle: true });\n      return empty();\n    }\n\n    // è®°å½æè¿ä¸æ¬¡ä¿®æ¹çæ°æ®id\n    const lastModifiedId = this.bindingData.list.currentId;\n    // è·ååçº§æ¹å¼\n    const hierarchyType = this.getHierarchyType();\n    // æ§è¡åæ°\n    const loadingTimerId = this.loadingService.showLoadingWithDelay(500);\n\n    // æ°å¢çæ¶åï¼è¦å±å¼ç¶èç¹\n    this.setIdToExpand(id);\n    const reloadChild$ = this.reloadByLevel();\n\n    const repository = TreeRepositoryFactory.getInstance(hierarchyType);\n    if (!repository) {\n      throw new Error(this.languageService['errorHierarchyKey']);\n    }\n    const addChild$ = repository.addChild(this.repository, id);\n    const result$ = reloadChild$.pipe(\n      switchMap(() => {\n        return addChild$;\n      }),\n      tap(\n        () => {\n          this.virtualRootFrameContext.setParam('IS_ADD', true);\n          this.virtualRootFrameContext.setParam('LAST_MODIFIED_ID', lastModifiedId);\n          this.loadingService.hideDelayLoading(loadingTimerId);\n        },\n        error => {\n          this.loadingService.hideDelayLoading(loadingTimerId);\n          this.errorService.exception(this.languageService.addChildFailed, error);\n        }\n      )\n    );\n    return result$;\n  }\n  /**\n   * æ¹éä¿å­\n   */\n  public save(): Observable<boolean> {\n    if (this.messagePipe) {\n      this.messagePipe.next({ messageType: 'save' });\n    }\n    const loadingTimerId = this.loadingService.showLoadingWithDelay(500);\n    const save$ = this.repository.applyChanges();\n    const result$ = save$.pipe(\n      tap(\n        () => {\n          this.loadingService.hideDelayLoading(loadingTimerId);\n          this.notifyService.success(this.languageService.saveSuccess, { hideTitle: true });\n        },\n        error => {\n          this.loadingService.hideDelayLoading(loadingTimerId);\n          this.errorService.exception(this.languageService.multiSaveFailed, error);\n        }\n      )\n    );\n    return result$;\n  }\n  /**\n   * å é¤\n   */\n  public remove(id: string, successMsg?: string): Observable<boolean> {\n\n    // åå åaddSibling\n    id = id ? id : this.bindingData.list.currentId;\n\n    // åæ°æ£æ¥\n    if (!id) {\n      this.notifyService.warning(this.languageService['plsSelectDeleteData'], { hideTitle: true });\n      return empty();\n    }\n\n    // å­å¨å­èç¹ä¸åè®¸å é¤\n    const treeNodesData = this.repository.entityCollection.toJSON();\n    const hierarchyType = this.getHierarchyType();\n    const treeNodeUtil = TreeUtilFactory.getInstance(hierarchyType);\n    if (treeNodeUtil === null) {\n      return empty();\n    }\n    if (treeNodeUtil.hasChildNodes(treeNodesData, this.hierarchyInfoKey, id) === true) {\n      this.notifyService.warning(this.languageService['deleteChildFirst'], { hideTitle: true });\n      return empty();\n    }\n\n    // ç¡®è®¤å é¤\n    const action$ = this.messageService.question(this.languageService.confirmDeletion);\n    return action$.pipe(\n      concatMap(result => {\n        if (!result) {\n          return empty();\n        }\n\n        // è·åå é¤åè¦è®¾ç½®çèç¹id\n        const nextNodeId = treeNodeUtil.getNextNodeId(treeNodesData, this.hierarchyInfoKey, id);\n\n        // æ§è¡å é¤\n        const loadingTimerId = this.loadingService.showLoadingWithDelay(500);\n        const remove$ = this.frameContext.repository.removeById(id);\n        return remove$.pipe(\n          tap(() => {\n\n            // è®¾ç½®éä¸­èç¹\n            treeNodeUtil.selectedNode(this.bindingData, this.hierarchyInfoKey, nextNodeId);\n\n            this.loadingService.hideDelayLoading(loadingTimerId);\n            if (successMsg && successMsg.trim()) {\n              this.notifyService.success(successMsg, { hideTitle: true });\n            } else {\n              this.notifyService.success(this.languageService.deleteSuccess, { hideTitle: true });\n            }\n            // this.notifyService.success(this.languageService.deleteSuccess, { hideTitle: true });\n          },\n            error => {\n              this.loadingService.hideDelayLoading(loadingTimerId);\n              this.errorService.exception(this.languageService.deleteFailed, error);\n            }\n          )\n        );\n      })\n    );\n  }\n\n  /**\n   * åæ¶æ¶æ£æµæªä¿å­è®°å½\n   */\n  public cancel(): Observable<any> {\n\n    // æ²¡æåæ´æ¶ç´æ¥åæ¶\n    // const cardDataService = this.frameContext.injector.get<CardDataService>(CardDataService);\n    const befRepository = this.repository as BefRepository<any>;\n    const hasUnsavedData = BefRepositoryUtil.isExistUnsaveData(befRepository);\n    if (!hasUnsavedData) {\n      return this._cancel();\n    }\n\n    const confirmResult$ = this.messageService.question(this.languageService['cancelWithoutSave']).pipe(\n      switchMap((ifCancel: boolean) => {\n        if (ifCancel === false) {\n          return EMPTY;\n        }\n        return this._cancel();\n      })\n    );\n    return confirmResult$;\n  }\n  /**\n   * æé åé¡µä¿¡æ¯\n   * @param parentId parentId\n   * @returns \n   */\n  private buildPaginationInfo(parentId: any) {\n    const pagination: any = { pageIndex: 0, pageSize: 0 };\n    const enableNodePagination = this.frameContext.params.get('enableNodePagination');\n    if (!parentId) {\n      // ä¸çº§åé¡µ\n      const pageSize = this.repository.entityCollection.pageSize || 0;\n      const pageIndex = this.repository.entityCollection.pageIndex || 0;\n      // å¯ç¨äºä¸çº§åé¡µ\n      if (pageSize !== 0) {\n        pagination.pageSize = pageSize;\n        pagination.pageIndex = pageIndex;\n      }\n    } else {\n      // å¦ææªå¯ç¨èç¹åé¡µæå½åä¸ºé¡¶çº§èç¹å è½½ï¼åä¸å¤çèç¹åé¡µ\n      if (enableNodePagination) {\n        const nodePageSize = this.frameContext.params.get('nodePageSize') || 0;\n        let nodePageIndex = this.frameContext.params.get(`_NODE_${parentId}_PAGE_INDEX_`);\n        if (!nodePageIndex) {\n          this.frameContext.params.set(`_NODE_${parentId}_PAGE_INDEX_`, 1);\n          nodePageIndex = 1;\n        }\n        pagination.pageIndex = nodePageIndex;\n        pagination.pageSize = nodePageSize;\n      }\n    }\n    return pagination;\n  }\n\n  /**\n   * åæ¶åæ´\n   */\n  private _cancel(): Observable<any> {\n    const loadingTimerId = this.loadingService.showLoadingWithDelay(500);\n    const cancel$ = this.repository.cancelChanges();\n    return cancel$.pipe(\n      switchMap(() => {\n        const isAdd = this.virtualRootFrameContext.getParam('IS_ADD');\n        const lastModifiedId = this.virtualRootFrameContext.getParam('LAST_MODIFIED_ID');\n        const currentId = this.bindingData.list.currentId;\n\n        if (isAdd === true) {\n          this.repository.entityCollection.removeEntityById(currentId);\n\n          // éç½®ç¼è¾ç¶æ\n          this.virtualRootFrameContext.setParam('IS_ADD', false);\n          if (lastModifiedId) {\n            setTimeout(() => {\n              this.bindingData.list.setCurrentId(lastModifiedId, true, true);\n            }, 0);\n          }\n          return of(null);\n        } else {\n          return this.repository.updateById(currentId);\n        }\n      }),\n      tap(\n        () => {\n          this.loadingService.hideDelayLoading(loadingTimerId);\n        },\n        (error: any) => {\n          this.loadingService.hideDelayLoading(loadingTimerId);\n          this.errorService.exception(this.languageService.cancelFailed, error);\n        }\n      )\n    );\n  }\n\n  /**\n   * æ£æ¥æ¯å¦å­å¨ä¸çº§èç¹ï¼åé¨æ¹æ³ï¼è¯·å¿ä½¿ç¨ï¼\n   */\n  public hasChildNodes(id: string, treeNodesData: any[]): boolean {\n    const treeNodeUtil = this.getTreeNodeUtil();\n    if (treeNodeUtil.hasChildNodes(treeNodesData, this.hierarchyInfoKey, id) === true) {\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * è®¡ç®å é¤åçå½åèç¹idï¼åé¨æ¹æ³ï¼è¯·å¿ä½¿ç¨ï¼\n   */\n  public getNextNodeIdAfterRemoving(idToRemove: string, treeNodesData: any[]): string {\n    const treeNodeUtil = this.getTreeNodeUtil();\n    const nextNodeId = treeNodeUtil.getNextNodeId(treeNodesData, this.hierarchyInfoKey, idToRemove);\n    return nextNodeId;\n  }\n\n  /**\n   * è®¾ç½®å é¤åçå½åèç¹èç¹ï¼åé¨æ¹æ³ï¼è¯·å¿ä½¿ç¨ï¼\n   */\n  public setNextNodeAfterRemoving(nextNodeId: string): void {\n    const treeNodeUtil = this.getTreeNodeUtil();\n    treeNodeUtil.selectedNode(this.bindingData, this.hierarchyInfoKey, nextNodeId);\n  }\n  /**\n   * è®¾ç½®æ çå½åè¡(ç»å®æ´æ ä½¿ç¨)\n   * @param id id\n   */\n  public setCurrentId(id: string) {\n    id = id || this.frameContext.getVirtualRootFrameContext().uiState['__DEVKIT__selectedRow'] || this.bindingData.list.currentItem.primaryKeyValue;\n    this.frameContext.bindingData.list.setCurrentId(id, true, true, true);\n  }\n  /**\n   * éä¸­æ çç¬¬ä¸ä¸ªèç¹\n   */\n  public selectFirstRow() {\n    const hierarchyType = this.getHierarchyType();\n    const treeNodeUtil = TreeUtilFactory.getInstance(hierarchyType);\n    if (treeNodeUtil !== null) {\n      treeNodeUtil.selectFirstRootNode(this.bindingData, this.hierarchyInfoKey);\n    }\n  }\n  /**\n   * è·åæ èç¹å·¥å·ç±»å®ä¾\n   */\n  private getTreeNodeUtil(): any {\n    const hierarchyType = this.getHierarchyType();\n    const treeNodeUtil = TreeUtilFactory.getInstance(hierarchyType);\n    if (treeNodeUtil === null) {\n      throw new Error(`ä¸æ¯æ${hierarchyType}ç±»åçåçº§`);\n    }\n    return treeNodeUtil;\n  }\n\n\n\n  /**\n   * è®°å½å è½½ç¶æ\n   * @todoï¼å¾å é¤\n   */\n  private setLoadByLevelState(filters: string, sorts: string) {\n\n    // @todoï¼ä¸´æ¶å¤ç\n    this.virtualRootFrameContext.setParam('isLoadTreeByLevel', true);\n    this.virtualRootFrameContext.setParam('loadTreeByLevelFilter', filters);\n    this.virtualRootFrameContext.setParam('loadTreeByLevelSort', sorts);\n  }\n\n  /**\n   * å±å¼å½åèç¹\n   * @todoï¼å¾å é¤\n   */\n  private reloadByLevel(): Observable<Entity[]> {\n    const isLoadByLevel = this.virtualRootFrameContext.getParam('isLoadTreeByLevel');\n    if (isLoadByLevel === true) {\n      const filters = this.virtualRootFrameContext.getParam('loadTreeByLevelFilter');\n      const sorts = this.virtualRootFrameContext.getParam('loadTreeByLevelSort');\n      return this.loadByLevel(filters, sorts);\n    }\n    return of([]);\n  }\n\n  private getHierarchyType() {\n    const ngObjects = FieldMetadataUtil.getNgObjects(this.repository.entityType);\n    const hierarchyInfoNgObjectInfo = ngObjects[this.hierarchyInfoKey];\n    let hierarchyType = 'path'; // åçº§ç é»è®¤ä¸ºpathï¼å¼å®¹åè¡¨å\n    if (hierarchyInfoNgObjectInfo.hasOwnProperty('hierarchyType') && hierarchyInfoNgObjectInfo['hierarchyType'] != null) {\n      hierarchyType = hierarchyInfoNgObjectInfo['hierarchyType'] as string;\n    }\n    if (hierarchyType == null || hierarchyType.length < 1) {\n      // 'åçº§ç éç½®ä¿¡æ¯éè¯¯'\n      throw new Error(this.languageService['incorrectHierarchyConfig']);\n    }\n    return hierarchyType;\n  }\n  /**\n   * è·åæ ¹ç»ä»¶æ¶æ¯ç®¡é\n   */\n  private get messagePipe() {\n    if (this.frameContext) {\n      const appContext = this.frameContext.getFormAppContext() || null;\n      if (appContext) {\n        return appContext.messagePipe || null;\n      }\n    }\n    return null;\n  }\n}\nexport { TreeDataService };\n","import { Injectable } from '@angular/core';\nimport { ViewModel } from '@farris/devkit';\nimport { FilterConditionService } from '../filter-condition.service';\nimport { CommandService } from '../command-service';\n\n@Injectable()\nclass FilterConditionDataService {\n    constructor(\n        private viewModel: ViewModel,\n        private filterConditionService: FilterConditionService,\n        private commandService: CommandService\n    ) { }\n\n    /**\n     * æ§è¡è¿æ»¤\n     * @param commandName å½ä»¤åç§°\n     * @param frameId å½ä»¤æå¨çframeId\n     */\n    public filter(commandName: string, frameId: string) {\n        const self: any = this;\n        let filters = self.context && self.context.eventParam && self.context.eventParam.data || [];\n        if (typeof (filters) === 'string') {\n            filters = JSON.parse(filters);\n        }\n        // æ¥è¯¢æ¶éç½®é¡µç ä¸ºç¬¬ä¸é¡µ\n        this.viewModel.frameContext.repository.entityCollection.pageIndex = 1;\n        this.viewModel.frameContext.repository.filterConditionManager.setConditions(this.viewModel.bindingPath, filters);\n        return this.commandService.execute(commandName, frameId);\n    }\n}\nexport { FilterConditionDataService };\n","import { Injectable } from '@angular/core';\nimport { Entity, BindingData, FrameContext } from '@farris/devkit';\nimport { BefRepository } from '@farris/bef';\nimport { Observable, EMPTY } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { FormLoadingService } from '../form-loading/form-loading.service';\nimport { LanguageService } from '../languag.service';\nimport { FormErrorService } from '../error/form-error.service';\nimport { EditStateUtil } from './utils/index';\n\n\n/**\n * æ°æ®ç¼è¾æå¡\n */\n@Injectable()\nclass EditDataService {\n\n  /**\n   * å®ä½ä»åº\n   */\n  private repository: BefRepository<Entity>;\n\n  /**\n   * ç»å®æ°æ®\n   */\n  private bindingData: BindingData;\n\n  /**\n   * Loadingæå¡\n   */\n  private loadingService: FormLoadingService;\n\n  /**\n   * è¯­è¨æå¡\n   */\n  private languageService: LanguageService;\n\n  /**\n   * éè¯¯å¤çæå¡\n   */\n  private errorService: FormErrorService;\n\n  /**\n   * æé å½æ°\n   */\n  constructor(private frameContext: FrameContext) {\n    this.repository = this.frameContext.repository as BefRepository<Entity>;\n    this.bindingData = this.frameContext.bindingData;\n    this.loadingService = this.frameContext.injector.get<FormLoadingService>(FormLoadingService, null);\n    this.languageService = this.frameContext.injector.get<LanguageService>(LanguageService, null);\n    this.errorService = this.frameContext.injector.get<FormErrorService>(FormErrorService, null);\n  }\n\n  /**\n   * ç¼è¾ï¼æ¯æå éï¼\n   */\n  public edit(id: string): Observable<Entity> {\n\n    id = id || this.bindingData.list.currentId;\n    if (!id) {\n      return EMPTY;\n    }\n\n    const loadingTimerId = this.loadingService.showLoadingWithDelay(500);\n    const edit$ = this.repository.editEntityById(id);\n    const result$ = edit$.pipe(\n      tap(\n        () => {\n          this.loadingService.hideDelayLoading(loadingTimerId);\n          EditStateUtil.setEditState(this.frameContext, id);\n        },\n        (error: any) => {\n          this.loadingService.hideDelayLoading(loadingTimerId);\n          this.errorService.exception(this.languageService.updateFailed, error);\n        }\n      )\n    );\n    return result$;\n  }\n}\n\n\nexport { EditDataService };\n","import { Injectable } from '@angular/core';\nimport { Observable, of, EMPTY } from 'rxjs';\nimport { tap, switchMap, concatMap } from 'rxjs/operators';\nimport { FrameContext, Entity, } from '@farris/devkit';\nimport { BefRepository, } from '@farris/bef';\nimport { FormLoadingService } from '../form-loading/form-loading.service';\nimport { FormNotifyService } from '../form-notify.service';\nimport { LanguageService } from '../languag.service';\nimport { FormMessageService } from '../form-message.service';\nimport { FormErrorService } from '../error/form-error.service';\nimport { CommandService } from '../command-service';\nimport { ListDataService } from './list-data.service';\nimport { TreeDataService } from './tree-data.service';\n\n/**\n * å é¤æå¡\n */\n@Injectable()\nclass RemoveDataService {\n\n  private notifyService: FormNotifyService;\n\n  private messageService: FormMessageService;\n\n  private loadingService: FormLoadingService;\n\n  private errorService: FormErrorService;\n\n  private languageService: LanguageService;\n\n  private befRepository: BefRepository<any>;\n\n  private commandService: CommandService;\n\n  private listDataService: ListDataService;\n\n  private treeDataService: TreeDataService;\n\n  /**\n   * æé å½æ°\n   * @param frameContext ç»ä»¶ä¸ä¸æ\n   */\n  constructor(private frameContext: FrameContext) {\n    this.notifyService = this.frameContext.injector.get<FormNotifyService>(FormNotifyService, null);\n    this.messageService = this.frameContext.injector.get<FormMessageService>(FormMessageService, null);\n    this.errorService = this.frameContext.injector.get<FormErrorService>(FormErrorService, null);\n    this.loadingService = this.frameContext.injector.get<FormLoadingService>(FormLoadingService, null);\n\n    this.languageService = this.frameContext.injector.get<LanguageService>(LanguageService, null);\n    this.commandService = this.frameContext.injector.get<CommandService>(CommandService, null);\n    this.listDataService = this.frameContext.injector.get<ListDataService>(ListDataService, null);\n    this.treeDataService = this.frameContext.injector.get<TreeDataService>(TreeDataService, null);\n    this.befRepository = this.frameContext.repository as BefRepository<Entity>;\n  }\n\n  /**\n   * å é¤idå¯¹åºçå®ä½\n   * @param id è¦å é¤çæ°æ®id\n   * @param ifSave æ¯å¦ä¿å­\n   * @param enableRemoveAndSave æ¯å¦å¯ç¨å é¤å¹¶ä¿å­ï¼ä»ä¸ºå¼å®¹ï¼æ°è°ç¨è¯·å¿è®¾ç½®ï¼\n   * @summary\n   * enableRemoveAndSaveå­å¨çæä¹ï¼\n   * 1ãèè¡¨åçå¯è½æ²¡ædelAndSaveæ¹æ³ï¼\n   * 2ãä¸ºäºå°ListDataServiceä¸­çremoveæ¹æ³è¿ç§»å°æ­¤æ¹æ³ä¸ï¼æ¾ç¤ºè®¾ç½®ä¸ºfalseï¼ä¿æåä»¥åè¡ä¸ºä¸è´ï¼\n   * 3ãè¯¥åæ°é»è®¤ä¸ºtrueï¼å¹¶ä¸å¨WebComponentå±ä¸æ´é²ï¼æ°å½ä»¤ä¸éè¦ä¼ éï¼é»è®¤ä¸ºtrueï¼\n   */\n  public removeById(id: string, ifSave: boolean, enableRemoveAndSave: boolean = true, successMsg?: string): Observable<boolean> {\n    const msg = successMsg ? successMsg : '';\n    return this.innerRemoveById(id, ifSave, enableRemoveAndSave, msg);\n  }\n\n  public removeByIds(ids: string[]): Observable<boolean> {\n    throw new Error('Not Implemented');\n  }\n\n  /**\n   * å é¤idå¯¹åºçå®ä½ï¼å¹¶æ§è¡ä¿å­\n   */\n  public removeAndSaveById(id: string, successMsg?: string): Observable<boolean> {\n    const msg = successMsg ? successMsg : '';\n    return this.innerRemoveById(id, true, true, msg);\n  }\n\n  /**\n   * å é¤å¹¶ä¿å­æ èç¹æ°æ®\n   */\n  public removeAndSaveByIdForTree(id: string, successMsg?: string): Observable<boolean> {\n    const msg = successMsg ? successMsg : '';\n    // æ£æ¥è¦å é¤çidæ¯å¦å­å¨\n    if (this.checkIdsToRemove([id]) === false) {\n      this.notifyService.warning(this.languageService.plsSelectDeleteData, { hideTitle: true });\n      return EMPTY;\n    }\n\n    // æ£æ¥æ¯å¦æå­èç¹\n    const treeNodesData = this.befRepository.entityCollection.toJSON();\n    if (this.treeDataService.hasChildNodes(id, treeNodesData) === true) {\n      this.messageService.warning(this.languageService.deleteChildFirst);\n      return EMPTY;\n    }\n\n    // æ§è¡å é¤\n    const remove$ = this.innerRemoveById(id, true, true, msg);\n    const nextNodeId = this.treeDataService.getNextNodeIdAfterRemoving(id, treeNodesData);;\n    const result$ = remove$.pipe(\n      tap(() => {\n        this.treeDataService.setNextNodeAfterRemoving(nextNodeId);\n      })\n    );\n\n    return result$;\n  }\n\n\n  /**\n   * æ¹éå é¤å¹¶ä¿å­\n   */\n  public removeAndSaveByIds() {\n    throw new Error('Not Implemented');\n  }\n\n  /**\n   * å é¤åçå·æ°\n   */\n  public refreshAfterRemoving(loadCmdName: string, loadCmdFrameId: string): Observable<any> {\n    if (!this.frameContext || !loadCmdName || !loadCmdFrameId) {\n      return;\n    }\n    const commandService = this.frameContext.injector.get<CommandService>(CommandService, null);\n    return commandService.execute(loadCmdName, loadCmdFrameId);\n  }\n\n  /**\n   * å é¤idå¯¹åºçå®ä½\n   * @param id å®ä½id\n   * @param ifSave æ¯å¦ä¿å­\n   * @param enableRemoveAndSave æ¯å¦å¯ç¨å é¤å¹¶ä¿å­ï¼èEAPIä¸æ²¡ææ­¤æ¹æ³ï¼éè¿å¼å³è¿è¡å¼å®¹ï¼\n   * @summary\n   * enableRemoveAndSaveåæ°è¯´æï¼\n   * 1ãèEAPIä¸æ²¡ædelAndSaveæ¹æ³ï¼åªè½åä¸¤æ¬¡è¯·æ±ï¼å é¤åä¿å­ï¼ï¼\n   * 2ãæ­¤å¼å³ç¨äºéæ©ä½¿ç¨åªç§æ¹å¼ï¼å¼å®¹èè¡¨åã\n   */\n  private innerRemoveById(id: string, ifSave: boolean, enableRemoveAndSave: boolean, successMsg: string): Observable<boolean> {\n\n    // æ£æ¥è¦å é¤çidæ¯å¦å­å¨\n    if (this.checkIdsToRemove([id]) === false) {\n      this.notifyService.warning(this.languageService.plsSelectDeleteData, { hideTitle: true });\n      return EMPTY;\n    }\n\n    const confirm$ = this.confirmToRemove();\n    const remove$ = enableRemoveAndSave && ifSave ?\n      this.befRepository.removeEntityAndSaveById(id) :\n      this.befRepository.removeById(id, ifSave);\n\n    const result$ = confirm$.pipe(\n      concatMap((ifRemove: boolean) => {\n        if (ifRemove === false) {\n          return EMPTY;\n        }\n        const loadingTimerId = this.loadingService.showLoadingWithDelay(500);\n        return remove$.pipe(\n          tap(\n            () => {\n              this.loadingService.hideDelayLoading(loadingTimerId);\n              if (successMsg && successMsg.trim()) {\n                this.notifyService.success(successMsg, { hideTitle: true });\n              } else {\n                this.notifyService.success(this.languageService.deleteSuccess, { hideTitle: true });\n              }\n              // this.notifyService.success(this.languageService.deleteSuccess, { hideTitle: true });\n            },\n            (error: any) => {\n              this.loadingService.hideDelayLoading(loadingTimerId);\n              this.errorService.exception(this.languageService.deleteFailed, error);\n            }\n          ),\n          switchMap(() => {\n            const saved = enableRemoveAndSave && ifSave;\n            if (!saved) {\n              return EMPTY;\n            } else {\n              return of(null);\n            }\n          })\n        );\n      })\n    );\n\n    return result$;\n  }\n\n  /**\n   * æ£æ¥è¦å é¤çidsæ¯å¦ä¸ºç©º\n   */\n  private checkIdsToRemove(ids: string[]): boolean {\n    if (!ids) {\n      return false;\n    }\n    const filteredIds = ids.filter((id: string) => {\n      return !!id;\n    });\n    if (filteredIds.length === 0) {\n      return false;\n    }\n\n    return true;\n  }\n\n  /**\n   * ç¡®è®¤å é¤\n   */\n  private confirmToRemove(): Observable<boolean> {\n    const confirm$ = this.messageService.question(this.languageService.confirmDeletion);\n    const result$ = confirm$.pipe(\n      concatMap((ifRemove: boolean) => {\n        if (ifRemove === false) {\n          return EMPTY;\n        } else {\n          return of(true);\n        }\n      }\n      ));\n    return result$;\n  }\n}\n\nexport { RemoveDataService };\n\n\n","import { Injectable } from '@angular/core';\nimport { FrameContext, Entity } from '@farris/devkit';\nimport { BefRepository } from '@farris/bef';\nimport { FormLoadingService } from '../form-loading/form-loading.service';\nimport { FormNotifyService } from '../form-notify.service';\nimport { LanguageService } from '../languag.service';\nimport { FormMessageService } from '../form-message.service';\nimport { FormErrorService } from '../error/form-error.service';\n\n/**\n * å é¤æå¡\n */\n@Injectable()\nclass SaveDataService {\n\n  private notifyService: FormNotifyService;\n\n  private messageService: FormMessageService;\n\n  private loadingService: FormLoadingService;\n\n  private errorService: FormErrorService;\n\n  private languageService: LanguageService;\n\n  private befRepository: BefRepository<any>;\n\n  /**\n   * æé å½æ°\n   * @param frameContext ç»ä»¶ä¸ä¸æ\n   */\n  constructor(private frameContext: FrameContext) {\n    this.notifyService = this.frameContext.injector.get<FormNotifyService>(FormNotifyService, null);\n    this.messageService = this.frameContext.injector.get<FormMessageService>(FormMessageService, null);\n    this.loadingService = this.frameContext.injector.get<FormLoadingService>(FormLoadingService, null);\n    this.languageService = this.frameContext.injector.get<LanguageService>(LanguageService, null);\n    this.befRepository = this.frameContext.repository as BefRepository<Entity>;\n  }\n}\n\nexport { SaveDataService };\n","import { Injectable, Optional } from '@angular/core';\nimport { EMPTY, Observable } from 'rxjs';\nimport { tap, switchMap, concatMap } from 'rxjs/operators';\n\nimport { BindingList, FrameContext, ViewModel } from '@farris/devkit';\nimport { BaseDataService } from './base-data.service';\nimport { FormMessageService } from '../form-message.service';\nimport { FormLoadingService } from '../form-loading/form-loading.service';\nimport { FormErrorService } from '../error/form-error.service';\nimport { FormNotifyService } from '../form-notify.service';\nimport { LanguageService } from '../languag.service';\nimport { TreeRepositoryFactory } from './tree-table/repository/tree-repository-factory';\nimport { TreeUtilFactory } from './tree-table/util/tree-util-factory';\n\n\n\n/**\n * æ æ°æ®æå¡\n */\n@Injectable()\nclass SubTreeDataService extends BaseDataService {\n\n  /**\n   * åçº§ç ä¿¡æ¯\n   */\n  private get hierarchyInfoKey(): string {\n    return this.virtualRootFrameContext.getParam('hierarchyInfoKey');\n  }\n  private get hierarchyInfoField(): string {\n    return this.hierarchyInfoKey.split('/').filter(p => p).pop();\n  }\n  private get virtualRootFrameContext() {\n    return this.frameContext.getVirtualRootFrameContext();\n  }\n\n  /**\n   * æé å½æ°\n   */\n  constructor(\n    frameContext: FrameContext,\n    private viewModel: ViewModel,\n    private messageService: FormMessageService,\n    private loadingService: FormLoadingService,\n    private errorService: FormErrorService,\n    private formNotifyService: FormNotifyService,\n    @Optional() private languageService: LanguageService\n  ) {\n    super(frameContext);\n    if (!languageService) {\n      this.languageService = LanguageService.getInstance();\n    }\n  }\n\n  private get messagePipe() {\n    if (this.viewModel && this.viewModel.frameContext) {\n      const appContext = this.viewModel.frameContext.getFormAppContext() || null;\n      if (appContext) {\n        return appContext.messagePipe || null;\n      }\n    }\n    return null;\n  }\n\n  /**\n   * æ°å¢å­è¡¨åçº§\n   */\n  public addSubSibling(): Observable<any> {\n    if (this.messagePipe) {\n      this.messagePipe.next({ messageType: 'addSubSibling' });\n    }\n    let params: { nodeCodes: string[], ids: string[] } = this.getParams();\n    // è·ååçº§æ¹å¼\n    const hierarchyType: string = this.getHierarchyType();\n    // æ§è¡åæ°\n    const loadingTimerId = this.loadingService.showLoadingWithDelay(500);\n    const repository = TreeRepositoryFactory.getInstance(hierarchyType);\n    if (!repository) {\n      // éè¯¯çåçº§ç \n      throw new Error(this.languageService['errorHierarchyKey']);\n    }\n    const result$ = repository.addSubSibling(this.repository, params.nodeCodes, params.ids);\n    return result$.pipe(\n      tap(\n        () => {\n          this.loadingService.hideDelayLoading(loadingTimerId);\n        },\n        error => {\n          this.errorService.exception(this.languageService.addSubSiblingFailed, error);\n        }\n      )\n    );\n  }\n\n  /**\n   * æ°å¢ä¸çº§\n   */\n  public addSubChild(): Observable<any> {\n    if (this.messagePipe) {\n      this.messagePipe.next({ messageType: 'addSubChild' });\n    }\n    let params: { nodeCodes: string[], ids: string[] } = this.getParams();\n    // è·ååçº§æ¹å¼\n    const hierarchyType = this.getHierarchyType();\n\n    const currentList = this.frameContext && this.frameContext.bindingData && this.frameContext.bindingData.getList();\n    if (!currentList['currentId']) {\n      // è¯·éæ©ç¶èç¹\n      this.formNotifyService.warning(this.languageService['plsSelectParentNode'], { hideTitle: true });\n      return EMPTY;\n    }\n    // æ§è¡åæ°\n    const loadingTimerId = this.loadingService.showLoadingWithDelay(500);\n\n    const repository = TreeRepositoryFactory.getInstance(hierarchyType);\n    if (!repository) {\n      throw new Error(this.languageService['errorHierarchyKey']);\n    }\n    const addSubChild$ = repository.addSubChild(this.repository, params.nodeCodes, params.ids);\n    const result$ = addSubChild$.pipe(\n      tap(\n        () => {\n          this.loadingService.hideDelayLoading(loadingTimerId);\n        },\n        error => {\n          this.loadingService.hideDelayLoading(loadingTimerId);\n          this.errorService.exception(this.languageService.addSubChildFailed, error);\n        }\n      )\n    );\n    return result$;\n  }\n  /**\n   * å é¤å­è¡¨æ èç¹\n   * @param id id\n   */\n  public remove(id: string, successMsg?: string): Observable<any> {\n    // åæ°æ£æ¥\n    if (!id) {\n      this.formNotifyService.warning(this.languageService['plsSelectDeleteData'], { hideTitle: true });\n      return EMPTY;\n    }\n    // è·ååçº§æ¹å¼\n    const hierarchyType = this.getHierarchyType();\n    // æå­èç¹æ¶ä¸åè®¸å é¤\n    const treeNodesData = this.frameContext.bindingData.getList().toJSON();\n    const bindingList = this.frameContext.bindingData.getList();\n    const treeNodeUtil = TreeUtilFactory.getInstance(hierarchyType);\n    if (treeNodeUtil === null) {\n      return EMPTY;\n    }\n    if (treeNodeUtil.hasChildNodes(treeNodesData, this.hierarchyInfoField, id) === true) {\n      this.messageService.warning(this.languageService['deleteChildFirst']);\n      return EMPTY;\n    }\n    // ç¡®è®¤å é¤\n    const action$ = this.messageService.question(this.languageService.confirmDeletion);\n    return action$.pipe(\n      concatMap(result => {\n        if (!result) {\n          return EMPTY;\n        }\n        // è·åå é¤åè¦è®¾ç½®çèç¹id\n        const nextNodeId = treeNodeUtil.getNextNodeId(treeNodesData, this.hierarchyInfoField, id);\n\n        // æ§è¡å é¤\n        const loadingTimerId = this.loadingService.show();\n        const path = this.getPath();\n        const remove$ = this.frameContext.repository.removeByPath(path, id);\n        return remove$.pipe(\n          tap(() => {\n            // è®¾ç½®éä¸­èç¹\n            treeNodeUtil.selectNodeByBindingList(bindingList, this.hierarchyInfoField, nextNodeId);\n            this.loadingService.hideDelayLoading(loadingTimerId);\n            if (successMsg && successMsg.trim()) {\n              this.formNotifyService.success(successMsg, { hideTitle: true });\n            } else {\n              this.formNotifyService.success(this.languageService.deleteSuccess, { hideTitle: true });\n            }\n            // this.formNotifyService.success(this.languageService.deleteSuccess, { hideTitle: true });\n          },\n            error => {\n              this.loadingService.hideDelayLoading(loadingTimerId);\n              this.errorService.exception(this.languageService.deleteFailed, error);\n            }\n          )\n        );\n      })\n    );\n  }\n\n  private getHierarchyType() {\n    const propInfo = this.repository.entityTypeInfo.getPropInfoByPath(this.hierarchyInfoKey.split('/'));\n    let hierarchyType = propInfo.metadataInfo['hierarchyType'] || null;\n    if (hierarchyType == null || hierarchyType.length < 1) {\n      // 'åçº§ç éç½®ä¿¡æ¯éè¯¯'\n      throw new Error(this.languageService['incorrectHierarchyConfig']);\n    }\n    return hierarchyType;\n  }\n\n  /**\n   * è·ååæ°\n   * /parentId/childCodes/childId/grandsonCodes\n   * [childCodes, grandsonCodes]\n   * [parntId, childId]\n   */\n  private getParams(): { nodeCodes: string[], ids: string[] } {\n    let nodeCodes = this.viewModel.bindingPath.substr(1).split('/');\n    let ids = [];\n    let nodeCodeArray = [];\n    const rid = this.viewModel.bindingData.list.currentId; // rootè¡¨æ°æ®id\n    ids.push(rid);\n    let subData: any = this.viewModel.bindingData;\n    if (nodeCodes.length > 0) {\n      nodeCodes.map(nodeCode => {\n        subData = subData[nodeCode];\n        if (subData && subData.currentId) {\n          ids.push(subData.currentId);\n        }\n        //å»é¤nodeCodeçs\n        nodeCode ? nodeCodeArray.push(nodeCode.substring(0, nodeCode.length - 1)) : nodeCodeArray.push(nodeCode);\n      })\n    }\n    return { nodeCodes: nodeCodeArray, ids: ids };\n  }\n  /**\n   * è·åå®æ´è·¯å¾\n   * fixed by justin: æ ¹æ®bindingPathï¼å¦ææ¯ä»ä»è¡¨ï¼éè¦è·åä¸»è¡¨æ°æ®idåä»è¡¨æ°æ®id\n   */\n  private getPath(): string {\n    const bindingPath = this.viewModel.bindingPath;\n    const rid = this.viewModel.bindingData.list.currentId; // rootè¡¨æ°æ®id\n    let path = '/' + rid;\n\n    const subPaths = bindingPath.split('/').filter(p => p);\n    if (subPaths.length > 0) {\n      // eg:bindingPathå½¢å¦/edus/grades,splitåæ¯['edus', 'grades']\n      let subData: any = this.viewModel.bindingData;\n      for (let index = 1; index < subPaths.length - 1; index++) {\n        const subPath = subPaths[index];\n        subData = subData[subPath];\n        if (!subData || !subData.currentId) {\n          throw Error(`è·åå­è¡¨å®æ´è·¯å¾åºéï¼æ¾ä¸å°${subData}å¯¹åºçå­è¡¨ï¼æå¯¹åºå­è¡¨æ²¡æå½åè¡ã`);\n        }\n        path += `/${subPath}/${subData.currentId}`;\n      }\n    }\n    path += '/' + subPaths[subPaths.length - 1];\n\n    return path;\n  }\n}\nexport { SubTreeDataService };\n","import { Injectable, Optional } from '@angular/core';\nimport { HttpHeaders, HttpErrorResponse } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { Repository } from '@farris/devkit';\nimport { BefRepository, BefRestService, RequestInfo, ResponseInfo } from '@farris/bef';\nimport { BodyWithRequestInfo } from './types';\nimport { FormLoadingService } from './form-loading/form-loading.service';\nimport { FormMessageService } from './form-message.service';\nimport { FormNotifyService } from './form-notify.service';\nimport { FormErrorService } from './error/form-error.service';\nimport { LanguageService } from './languag.service';\n// tslint:disable: no-string-literal\n\n/**\n * åè¡¨ä»åºæå¡\n * @scope FrameComponent\n */\n@Injectable()\nclass BeActionService {\n\n  /**\n   * æé å½æ°\n   */\n  constructor(\n    private repository: Repository<any>,\n    private loadingService: FormLoadingService,\n    private msgService: FormMessageService,\n    private notifyService: FormNotifyService,\n    private formErrorService: FormErrorService,\n    @Optional() private languageService: LanguageService,\n  ) {\n    if (!this.languageService) {\n      this.languageService = LanguageService.getInstance();\n    }\n  }\n\n  /**\n   * æ§è¡èªå®ä¹å¨ä½\n   */\n  public invokeAction(\n    actionUri: string, httpMethod: string, httpHeaders?: any, queryParams?: any, body?: BodyWithRequestInfo\n  ): Observable<ResponseInfo> {\n    return this.innerInvokeAction(actionUri, httpMethod, httpHeaders, queryParams, body, true);\n  }\n\n  /**\n   * å·²å¼ç¨ï¼è¯·ä½¿ç¨invokeActionä»£æ¿\n   * @deprecated\n   * @summary\n   * è¿ç§»æ¶è¯·æ³¨æï¼invokeActionä¸­bodyè¯·ä¼ éæ»¡è¶³BodyWithRequestInfoæ¥å£çæ ¼å¼ï¼å½¢å¦ï¼\n   * { requestInfo: reqeustInfoInstance, key1: value1, key2: value2 }\n   */\n  public executeAction(\n    actionUri: string, httpMethod: string, httpHeaders?: any, queryParams?: any, body?: any\n  ): Observable<any> {\n\n    // 1ãä¸ç¡®å®bodyä¸­æ¯å¦æRequestInfoå¯¹è±¡\n    // 2ãrestServiceçreqeustä¼æ ¹æ®bodyä¸­æ¯å¦ækeyä¸ºReqeustInfoï¼å¤§åå¼å¤´ï¼çåæ°æ¥ç¡®å®ï¼\n    // 3ãå¦æbodyä¸­æ²¡ækeyä¸ºReqeustInfoçåæ°ï¼ä¸ç´æ¥è¿åResponseInfoï¼èæ¯è¿ä¸æ­¥è§£æï¼è¿åå¶ä¸­çreturnValueã\n    return this.innerInvokeAction(actionUri, httpMethod, httpHeaders, queryParams, body, false);\n  }\n\n  /**\n   * æé æ¥è¯¢å­ç¬¦ä¸²\n   */\n  public buildQueryParams(queryParams: string): string {\n    if (typeof queryParams === 'string') {\n      queryParams = JSON.parse(queryParams);\n    }\n\n    let queryParamsString = '';\n    Object.keys(queryParams).forEach((key: string) => {\n      queryParamsString += `${key}=${queryParams[key]}`;\n    });\n\n    return queryParamsString;\n  }\n\n  /**\n   * è·åRestæå¡\n   */\n  public getRestService(): BefRestService {\n    const befRepository = this.repository as BefRepository<any>;\n    return befRepository.restService;\n  }\n\n\n  /**\n   * è°ç¨èªå®ä¹å¨ä½\n   */\n  private innerInvokeAction(\n    actionUri: string, httpMethod: string, httpHeaders?: any, queryParams?: any, body?: any, hasRequestInfo?: boolean\n  ): Observable<any>  {\n    const options = {};\n    const restService = this.getRestService();\n    const baseUri = restService.baseUri;\n\n    // æé url\n    let fullActionUri = `${baseUri}/service/${actionUri}`;\n    if (queryParams && queryParams !== '') {\n      const queryParamsString = this.buildQueryParams(queryParams);\n      fullActionUri += queryParamsString;\n    }\n\n\n    // bodyæé \n    if (body && body !== '') {\n      if (typeof body === 'string' && body.startsWith('{') && body.endsWith('}')) {\n        body = JSON.parse(body);\n      }\n      options['body'] = body;\n    }\n\n    // httpå¤´æé \n    if (httpHeaders && httpHeaders !== '') {\n      httpHeaders = JSON.parse(httpHeaders);\n\n      // å¦ææ²¡æè®¾ç½®Content-Typeï¼é»è®¤ç¨jsonæ ¼å¼\n      if (!httpHeaders['Content-Type']) {\n        httpHeaders['Content-Type'] = 'application/json';\n      }\n      options['headers'] = new HttpHeaders(httpHeaders);\n    } else {\n      options['headers'] = new HttpHeaders({ 'Content-Type': 'application/json' });\n    }\n\n    // æ§è¡æå¡å¨ç«¯è¯·æ±\n    this.loadingService.show();\n\n    // invokeæ¹æ³\n    // 1ãRequestInfo=>æ¥é\n    // 2ãrequestInfo=>ResponseInfo\n    // requestæ¹æ³\n    // 1ãRequestInfo=>ResponseInfo\n    // 2ãrequestInfo=>returnValue\n    const methodName = hasRequestInfo ? 'invoke' : 'request';\n    const result$ = restService[methodName](fullActionUri, httpMethod, null, options);\n    return result$.pipe(\n      tap(\n        () => {\n          this.loadingService.hide();\n        },\n        (error: any) => {\n          this.loadingService.hide();\n          const errorMsg = fullActionUri + this.languageService['operationFailed'];\n          this.formErrorService.exception(errorMsg, error);\n        }\n      )\n    );\n  }\n}\n\n\nexport { BeActionService };\n\n\n","import { Injectable, Optional } from '@angular/core';\nimport { Observable, empty, of, from, EMPTY } from 'rxjs';\nimport { tap, map, switchMap, catchError } from 'rxjs/operators';\nimport { BeActionService } from './be-action.service';\nimport { FormMessageService } from './form-message.service';\nimport { FormNotifyService } from './form-notify.service';\nimport { LanguageService } from './languag.service';\nimport { FormLoadingService } from './form-loading/form-loading.service';\nimport { FormErrorService } from './error/form-error.service';\nimport { WFSubmiteService, InteractionResponse, ExcutionResponse } from '@gsp-wf/rtdevkit';\nimport { WfTaskHandlerService } from '@gsp-wf/wf-task-handler';\nimport { BefRepository } from '@farris/bef';\nimport { Entity, FrameContext } from '@farris/devkit';\nimport { WFFlowchartService } from '@gsp-wf/ui-flowchart';\nimport { FormNotifyStrategyService } from './form-notify-strategy.service';\nimport { BodyWithRequestInfo } from './../lib/types';\n// tslint:disable: max-line-length\n/**\n * å®¡æ¹æå¡\n * @Scope FrameComponent\n */\n@Injectable()\nclass ApproveService {\n\n  /**\n   * å®ä½ä»åº\n   */\n  private repository: BefRepository<Entity>;\n\n  /**\n   * æé å½æ°\n   */\n  constructor(\n    private formLoadingService: FormLoadingService,\n    private beActionService: BeActionService,\n    private msgService: FormMessageService,\n    private notifyService: FormNotifyService,\n    @Optional() private languageService: LanguageService,\n    private formErrorService: FormErrorService,\n    private frameContext: FrameContext,\n    @Optional() private submitter: WFSubmiteService,\n    @Optional() private flowchartService: WFFlowchartService,\n    @Optional() private wfTaskHandlerService: WfTaskHandlerService\n  ) {\n    if (this.frameContext) {\n      this.repository = this.frameContext.repository as BefRepository<Entity>;\n      if (!this.wfTaskHandlerService) {\n        this.wfTaskHandlerService = this.frameContext.injector.get(WfTaskHandlerService, null);\n      }\n    }\n  }\n\n  /**\n   * å¸¦æäº¤äºçæäº¤å®¡æ¹\n   */\n  submitApproveWithInteraction(bizBillID: string) {\n    return this.submitApprove(bizBillID);\n  }\n\n  /**\n   * æäº¤å®¡æ¹\n   * @param bizBillID ä¸å¡åæ®id\n   * @param interactionResult åç«¯äº¤äºç»æ\n   * @deprecated å·²åºå¼ï¼æ¸ä½¿ç¨åå«å¥å£åæ®çå®¡æ¹\n   */\n  submitApprove(bizBillID: string, interactionResult?: InteractionResponse): Observable<any> {\n    if (!bizBillID) {\n      // this.msgService.error(this.languageService.unallowEmptyBizBillId);\n      this.notifyService.info(this.languageService.unallowEmptyBizBillId, { hideTitle: true });\n      return empty();\n    }\n\n    const actionUri = 'submittoapprovevoaction';\n\n    const restService = this.beActionService.getRestService();\n\n    const body: BodyWithRequestInfo = {\n      requestInfo: restService.buildRequestInfo(),\n      bizInstID: bizBillID,\n      interactionResult: interactionResult ? {\n        procDefId: interactionResult.processDefinitionId\n      } : {}\n    };\n\n    this.formLoadingService.show();\n\n    // æ·»å æç¤º\n    const action$ = this.beActionService.invokeAction(actionUri, 'PUT', null, null, body);\n    // ç®ååå«ä¸ç§æåµï¼\n    // 1. ç¬¬ä¸æ¬¡æäº¤æåï¼æå¡ç«¯è¿åæµç¨å®ä¾id\n    // 2. ç¬¬ä¸æ¬¡æäº¤æåï¼æå¡ç«¯è¿åæµç¨å®ä¾idï¼å¹¶è¿åå¤ä¸ªåä¸èï¼äº¤äºæ¶æäº¤åä¸è\n    // 3. ç¬¬ä¸æ¬¡æäº¤æªæåï¼æå¡ç«¯è¿åå¤ä¸ªæµç¨å®ä¹ï¼éè¦äº¤äºåç¬¬äºæ¬¡æäº¤å®¡æ¹ï¼ç¬¬äºæ¬¡æäº¤ä¼åºç°æåµ1åæåµ2\n\n    return action$.pipe(\n      map((result): ExcutionResponse => {\n        if (result && result.returnValue && result.returnValue.excutionResponse) {\n          var wfResponse: ExcutionResponse = result.returnValue.excutionResponse;\n          return wfResponse;\n        }\n      }),\n      switchMap((response: ExcutionResponse) => {\n        if (response && response.procInstId) {\n          if (this.repository) {\n            const updating$ = this.repository.updateById(bizBillID);\n            return updating$.pipe(tap(() => {\n              this.formLoadingService.hide();\n              // this.notifyService.info(this.languageService.submitSuccess);\n              FormNotifyStrategyService.success(this.notifyService, this.languageService.submitSuccess);\n            }), map(() => {\n              return response;\n            }));\n          } else {\n            this.formLoadingService.hide();\n            // this.notifyService.info(this.languageService.submitSuccess);\n            FormNotifyStrategyService.success(this.notifyService, this.languageService.submitSuccess);\n            return of(response);\n          }\n        } else {\n          return of(response);\n        }\n      }),\n      switchMap((response: ExcutionResponse) => {\n        if (response.needInteraction) {\n          return from(new Promise((resolve) => {\n            this.submitter.excute(response, (interactionResponse: InteractionResponse) => {\n              // å¦ææ­¤æ¬¡æªæäº¤ï¼èéæ©åå¾å°äºæµç¨å®ä¹IDï¼åå¨æ­¤æäº¤å®¡æ¹\n              if (!response.procInstId && interactionResponse.processDefinitionId) {\n                this.submitApprove(bizBillID, interactionResponse).subscribe(() => {\n                  resolve();\n                });\n              } else {\n                resolve();\n              }\n            });\n          }));\n        } else {\n          return of(null);\n        }\n      }),\n      catchError(\n        error => {\n          this.formLoadingService.hide();\n          // this.formErrorService.exception(this.languageService.submitFaild, error);\n          return of(error);\n        }\n      )\n    );\n  }\n  /**\n   * æäº¤å®¡æ¹(å¸¦å¥å£åæ®)\n   * @param bizBillID ä¸å¡åæ®Id\n   * @param bizDefKey å¥å£åæ®Id\n   * @param options options\n   * @param interactionResult äº¤äºç»æ\n   */\n\n  public submitApproveWithBizDefKey(bizBillID: string, bizDefKey: string, options?: any, interactionResult?: InteractionResponse): Observable<any> {\n    if (!bizBillID) {\n      this.notifyService.warning(this.languageService.unallowEmptyBizBillId, { hideTitle: true });\n      return EMPTY;\n    }\n    if (!bizDefKey) {\n      this.notifyService.warning(this.languageService.bizDefKeyRequired, { hideTitle: true });\n      return EMPTY;\n    }\n    try {\n      if (options && typeof (options) === 'string') {\n        options = JSON.parse(options);\n      }\n    } catch (e) {\n      throw new Error('ArgumentError:options not a valid json string.');\n    }\n\n    const actionUri = 'submittoapprovewithpayload';\n\n    const restService = this.beActionService.getRestService();\n\n    const body: BodyWithRequestInfo = {\n      requestInfo: restService.buildRequestInfo(),\n      approvePayload: {\n        startProcessPayload: {\n          bizDefKey: bizDefKey,\n          dataId: bizBillID,\n          name: options && options.name || '',\n          variables: options && options.variables || {}\n        }\n      }\n    };\n    if (interactionResult) {\n      body.approvePayload.startProcessPayload.processDefinitionId = interactionResult.processDefinitionId;\n      body.approvePayload.startProcessPayload.processDefinitionKey = interactionResult['processDefinitionKey'];\n    }\n    this.formLoadingService.show();\n\n    // æ·»å æç¤º\n    const action$ = this.beActionService.invokeAction(actionUri, 'PUT', null, null, body);\n    // ç®ååå«ä¸ç§æåµï¼\n    // 1. ç¬¬ä¸æ¬¡æäº¤æåï¼æå¡ç«¯è¿åæµç¨å®ä¾id\n    // 2. ç¬¬ä¸æ¬¡æäº¤æåï¼æå¡ç«¯è¿åæµç¨å®ä¾idï¼å¹¶è¿åå¤ä¸ªåä¸èï¼äº¤äºæ¶æäº¤åä¸è\n    // 3. ç¬¬ä¸æ¬¡æäº¤æªæåï¼æå¡ç«¯è¿åå¤ä¸ªæµç¨å®ä¹ï¼éè¦äº¤äºåç¬¬äºæ¬¡æäº¤å®¡æ¹ï¼ç¬¬äºæ¬¡æäº¤ä¼åºç°æåµ1åæåµ2\n\n    return action$.pipe(\n      map((result): ExcutionResponse => {\n        if (result && result.returnValue && result.returnValue.excutionResponse) {\n          const wfResponse: ExcutionResponse = result.returnValue.excutionResponse;\n          return wfResponse;\n        }\n      }),\n      switchMap((response: ExcutionResponse) => {\n        if (response && response.procInstId) {\n          if (this.repository) {\n            const updating$ = this.repository.updateById(bizBillID);\n            return updating$.pipe(tap(() => {\n              this.formLoadingService.hide();\n              // this.notifyService.info(this.languageService.submitSuccess);\n              FormNotifyStrategyService.success(this.notifyService, this.languageService.submitSuccess);\n            }), map(() => {\n              return response;\n            }));\n          } else {\n            this.formLoadingService.hide();\n            // this.notifyService.info(this.languageService.submitSuccess);\n            FormNotifyStrategyService.success(this.notifyService, this.languageService.submitSuccess);\n            return of(response);\n          }\n        } else {\n          return of(response);\n        }\n      }),\n      switchMap((response: ExcutionResponse) => {\n        if (response.needInteraction) {\n          return from(new Promise((resolve) => {\n            this.submitter.excute(response, (interactionResponse: InteractionResponse) => {\n              // å¦ææ­¤æ¬¡æªæäº¤ï¼èéæ©åå¾å°äºæµç¨å®ä¹IDï¼åå¨æ­¤æäº¤å®¡æ¹\n              if (!response.procInstId && interactionResponse.processDefinitionId) {\n                this.submitApproveWithBizDefKey(bizBillID, bizDefKey, options, interactionResponse).subscribe(() => {\n                  resolve();\n                });\n              } else {\n                resolve();\n              }\n            });\n          }));\n        } else {\n          return of(null);\n        }\n      }),\n      catchError(\n        error => {\n          this.formLoadingService.hide();\n          // this.formErrorService.exception(this.languageService.submitFaild, error);\n          return of(error);\n        }\n      )\n    );\n  }\n  /**\n   * æäº¤å®¡æ¹(å¸¦å¥å£åæ®ä½¿ç¨wfæ§ä»¶)\n   * @param bizBillID ä¸å¡åæ®Id\n   * @param bizDefKey å¥å£åæ®Id\n   * @param options ä¸ä¸æåæ°\n   * @param variables å¯éåæ°\n   */\n  public submitApproveWithBizDefKeyUseControl(bizBillID: string, bizDefKey: string, options: any = {}, variables?: any) {\n    if (!bizBillID) {\n      this.notifyService.warning(this.languageService.unallowEmptyBizBillId, { hideTitle: true });\n      return EMPTY;\n    }\n    if (!bizDefKey) {\n      this.notifyService.warning(this.languageService.bizDefKeyRequired, { hideTitle: true });\n      return EMPTY;\n    }\n    if (!options || typeof options !== 'object') {\n      options = {};\n    }\n    const payload: any = {\n      dataId: bizBillID,\n      bizDefKey,\n      ...options\n    };\n    // å¤çvariablesåæ°\n    if (variables) {\n      if (variables.startsWith('{') && variables.endsWith('}')) {\n        try {\n          variables = JSON.parse(variables);\n        } catch {\n          variables = {};\n        }\n      }\n      payload.variables = variables;\n    }\n    return this.wfTaskHandlerService && this.wfTaskHandlerService.startProcess(payload);\n  }\n  /**\n   * å­è¡¨æäº¤å®¡æ¹\n   * @param bizDefKey å¥å£åæ®Id\n   * @param bizId ä¸å¡åæ®Idï¼ä¸»è¡¨ï¼\n   * @param childBizId ä¸å¡åæ®Idï¼ä»è¡¨ï¼\n   * @param options ä¸ä¸æåæ°\n   * @param variables å¯éåæ°\n   */\n  public childSubmitApproveWithBizDefKey(bizDefKey: string, bizId: string, childBizId: string, options: any = {}, variables?: any): Observable<any> {\n    // å¥å£åæ®ä¸è½ä¸ºç©º\n    if (!bizDefKey) {\n      this.notifyService.warning(this.languageService.bizDefKeyRequired, { hideTitle: true });\n      return EMPTY;\n    }\n    // ä¸»ä¸å¡åæ®Idä¸è½ä¸ºç©º\n    if (!bizId) {\n      this.notifyService.warning(this.languageService.unallowEmptyBizBillId, { hideTitle: true });\n      return EMPTY;\n    }\n    // ä»è¡¨ä¸å¡åæ®Idä¸è½ä¸ºç©º\n    if (!childBizId) {\n      this.notifyService.warning(this.languageService.unallowEmptyChildBizBillId, { hideTitle: true });\n      return EMPTY;\n    }\n    if (!options || typeof options !== 'object') {\n      options = {};\n    }\n    const payload: any = {\n      dataId: `${bizId},${childBizId}`,\n      bizDefKey,\n      ...options\n    };\n    // å¤çvariablesåæ°\n    if (variables) {\n      if (variables.startsWith('{') && variables.endsWith('}')) {\n        try {\n          variables = JSON.parse(variables);\n        } catch {\n          variables = {};\n        }\n      }\n      payload.variables = variables;\n    }\n    return this.wfTaskHandlerService && this.wfTaskHandlerService.startProcess(payload);\n  }\n  /**\n   * åæ¶å®¡æ¹\n   * @deprecated å·²åºå¼ï¼è¯·ä½¿ç¨cancelSubmit\n   */\n  public cancelApprove(bizBillID: string): Observable<any> {\n    if (!bizBillID) {\n      this.notifyService.warning(this.languageService.unallowEmptyBizBillId, { hideTitle: true });\n      return empty();\n    }\n\n    const actionUri = 'canceltosubmitvoaction';\n\n    const restService = this.beActionService.getRestService();\n\n    const body = {\n      requestInfo: restService.buildRequestInfo(),\n      bizInstID: bizBillID,\n    };\n\n    this.formLoadingService.show();\n\n    const action$ = this.beActionService.executeAction(actionUri, 'PUT', null, null, body);\n    return action$.pipe(\n      switchMap(() => {\n        if (this.repository) {\n          const updating$ = this.repository.updateById(bizBillID);\n          return updating$.pipe(tap(() => {\n            this.formLoadingService.hide();\n            // this.notifyService.info(this.languageService.cancelApproveSuccess);\n            FormNotifyStrategyService.success(this.notifyService, this.languageService.cancelApproveSuccess);\n          }));\n        } else {\n          this.formLoadingService.hide();\n          // this.notifyService.info(this.languageService.cancelApproveSuccess);\n          FormNotifyStrategyService.success(this.notifyService, this.languageService.cancelApproveSuccess);\n          return of();\n        }\n      }\n      ),\n      catchError(error => {\n        this.formLoadingService.hide();\n        // this.formErrorService.exception(this.languageService.cancelApproveFailed, error);\n        return of(error);\n      }));\n  }\n  /**\n   * åæ¶å®¡æ¹(æ¯æä¸»è¡¨ãå­è¡¨)\n   * @param procInstId æµç¨å®ä¾Id\n   */\n  public cancelSubmit(procInstId: string): Observable<any> {\n    if (!procInstId) {\n      this.notifyService.warning(this.languageService.procInsIdRequired, { hideTitle: true });\n      return EMPTY;\n    }\n    return this.wfTaskHandlerService && this.wfTaskHandlerService.cancelSubmit({ procInstId: procInstId });\n  }\n  /**\n   * æ¥çæµç¨å¾\n   * @param procInstId æµç¨å®ä¾ID\n   */\n  viewProcess(procInstId: string) {\n    if (this.flowchartService) {\n      if (!procInstId) {\n        this.notifyService.warning(this.languageService.noProcessInstanceId, { hideTitle: true });\n        return;\n      }\n      return this.flowchartService.viewFlowChart(procInstId);\n    }\n  }\n\n\n  /**\n   * è½¬æ¢éç½®å¤§å°å\n   * @param jsonObj Object\n   * @deprecated\n   */\n  private switchPrefixLetter(jsonObj: any, toUpper: boolean): any {\n    if (typeof (jsonObj) === 'object' && !!jsonObj) {\n      if (Array.isArray(jsonObj)) {\n        for (var i = 0; i < jsonObj.length; i++) {\n          this.switchPrefixLetter(jsonObj[i], toUpper);\n        }\n      } else {\n        for (const key of Object.keys(jsonObj)) {\n          var newKey = (toUpper ? key.substring(0, 1).toUpperCase() : key.substring(0, 1).toLowerCase()) + key.substring(1);\n          jsonObj[newKey] = jsonObj[key];\n          if (typeof jsonObj[key] === 'object') {\n            this.switchPrefixLetter(jsonObj[key], toUpper);\n          }\n          delete (jsonObj[key]);\n        }\n      }\n    }\n    return jsonObj;\n  }\n}\nexport { ApproveService };\n","import { Injectable, Injector, Optional } from '@angular/core';\nimport { EMPTY } from 'rxjs';\nimport { FormMessageService } from './form-message.service';\nimport { LanguageService } from './languag.service';\nimport { BefRepository } from '@farris/bef';\nimport { CommandContext, Entity, FrameContext } from '@farris/devkit';\nimport { CloudprintService, OutputOptions, SourceOptions, OutputType, FileType, SourceFilterOptions, PrintType } from '@gsp-svc/cloudprint';\nimport { FormNotifyService } from './form-notify.service';\n// tslint:disable: unified-signatures\n// tslint:disable: max-line-length\n/**\n * æå°æå¡\n * @Scope FrameComponent\n */\n@Injectable()\nclass PrintService {\n  /**\n   * å®ä½ä»åº\n   */\n  private repository: BefRepository<Entity>;\n\n  /**\n   * æé å½æ°\n   */\n  constructor(\n    private msgService: FormMessageService,\n    private languageService: LanguageService,\n    private printService: CloudprintService,\n    @Optional() private formNotifyService: FormNotifyService,\n  ) {\n  }\n\n  /**\n   * æå°åæ®\n   * @param beMetaId BEåæ°æ®æ è¯\n   * @param bizBillId ä¸å¡åæ®æ è¯\n   */\n  public printSingle(beMetaId: string, bizBillId: string) {\n    if (!bizBillId) {\n      // this.msgService.error(this.languageService.unallowEmptyBizBillId);\n      this.showWarning(this.languageService.unallowEmptyBizBillId);\n      return EMPTY;\n    }\n    return this.printArray(beMetaId, [bizBillId]);\n  }\n  /**\n   * æå°åæ®ï¼éè¿idæidsï¼\n   * @param beMetaId beåæ°æ®Id\n   * @param ids åæ®idæids\n   */\n  public printByIds(beMetaId: string, ids: string) {\n    if (!ids) {\n      // this.msgService.error(this.languageService.unallowEmptyBizBillId);\n      this.showWarning(this.languageService.unallowEmptyBizBillId);\n      return EMPTY;\n    }\n    const dataIds: Array<string> = ids.split(',').filter(item => item);\n    return this.printArray(beMetaId, dataIds);\n  }\n  /**\n   * æå°åæ®ï¼å¸¦ç»´åº¦ï¼\n   * @param beMetaId beåæ°æ®Id\n   * @param ids åæ®idæids\n   * @param dim1 ç»´åº¦1å¼\n   * @param dim2 ç»´åº¦2å¼\n   * @param billCategoryId åæ®ç±»åId\n   */\n  public printByIdsWithDimension(beMetaId: string, ids: string, dim1: string, dim2: string, billCategoryId?: string) {\n    if (!ids) {\n      // this.msgService.error(this.languageService.unallowEmptyBizBillId);\n      this.showWarning(this.languageService.unallowEmptyBizBillId);\n      return EMPTY;\n    }\n    const dataIds: Array<string> = ids.split(',').filter(item => item);\n    return this.printArray(beMetaId, dataIds, dim1, dim2, billCategoryId);\n  }\n  /**\n   * æå°å¤ä¸ªåæ®\n   * @param beMetaId BEåæ°æ®æ è¯\n   * @param dataIds ä¸å¡åæ®æ è¯æ°ç»\n   * @param dim1 ç»´åº¦1\n   * @param dim2 ç»´åº¦2\n   * @param billCategoryId ä¸å¡åæ®ç±»åId\n   */\n  public printArray(beMetaId: string, dataIds: string[], dim1?: any, dim2?: any, billCategoryId?: string) {\n    if (!dataIds || dataIds.length === 0) {\n      // this.msgService.error(this.languageService.unallowEmptyBizBillId);\n      this.showWarning(this.languageService.unallowEmptyBizBillId);\n      return EMPTY;\n    }\n    const sourceOptions: SourceOptions = this.buildSourceOptions({\n      dataIds: dataIds,\n      sourceId: beMetaId\n    });\n\n    const outputOptions: OutputOptions = this.buildOutputOptions();\n\n    if (typeof dim1 !== 'undefined') {\n      sourceOptions.FirstDimensionVal = dim1;\n    }\n    if (typeof dim2 !== 'undefined') {\n      sourceOptions.SecondDimensionVal = dim2;\n    }\n    if (typeof billCategoryId !== 'undefined') {\n      sourceOptions.billCategoryId = billCategoryId;\n    }\n    return this.printService.outputBEData(sourceOptions, outputOptions, 'tab');\n  }\n\n  /**\n   * æç§BEåæ°æ¹å¼æ¹éæå°åæ®\n   * @param beMetaId BEåæ°æ®æ è¯\n   * @param filterCondition è¿æ»¤æ¡ä»¶\n   * @param sortCondition æåºæ¡ä»¶\n   * @param includeChildData åå«å­è¡¨æ°æ®\n   */\n  public printMulti(beMetaId: string, filterCondition: string, sortCondition: string, includeChildData: boolean = true) {\n    const entryFilter = { 'isUsePagination': false, 'filterConditions': [], 'sortConditions': [], 'pagination': null };\n    if (filterCondition) {\n      // ç»ä¸çº æ­£æåä¸ä¸ªè¿æ»¤æ¡ä»¶çRelation\n      const filters = JSON.parse(filterCondition);\n      if (filters && filters.length > 0) {\n        filters[filters.length - 1].Relation = 0;\n      }\n      entryFilter.filterConditions = filters;\n    }\n\n    if (sortCondition) {\n      entryFilter.sortConditions = JSON.parse(sortCondition);\n    }\n    // sfo:SourceFilterOptions\n    const sourceFilterOptions: SourceFilterOptions = this.buildSourceFilterOptions({ sourceId: beMetaId, entryFilter, includeChildData });\n    const outputOptions: OutputOptions = this.buildOutputOptions();\n    return this.printService.outputBEDataWithFilter(sourceFilterOptions, outputOptions, 'tab');\n  }\n  /**\n   * æç§BEåæ°æ¹å¼æ¹éæå°åæ®(å¸¦ç»´åº¦)\n   * @param beMetaId BEåæ°æ®æ è¯\n   * @param filterCondition è¿æ»¤æ¡ä»¶\n   * @param sortCondition æåºæ¡ä»¶\n   * @param dim1 ç»´åº¦1value\n   * @param dim2 ç»´åº¦2value\n   * @param billCategoryId ä¸å¡åæ®ç±»åId\n   * @param includeChildData åå«å­è¡¨æ°æ®\n   */\n  public printMultiWithDimension(beMetaId: string, filterCondition: string, sortCondition: string, dim1: string, dim2: string, billCategoryId?: string, includeChildData: boolean = true) {\n    const entryFilter = { 'isUsePagination': false, 'filterConditions': [], 'sortConditions': [], 'pagination': null };\n    if (filterCondition) {\n      // ç»ä¸çº æ­£æåä¸ä¸ªè¿æ»¤æ¡ä»¶çRelation\n      const filters = JSON.parse(filterCondition);\n      if (filters && filters.length > 0) {\n        filters[filters.length - 1].Relation = 0;\n      }\n      entryFilter.filterConditions = filters;\n    }\n\n    if (sortCondition) {\n      entryFilter.sortConditions = JSON.parse(sortCondition);\n    }\n    const sfo: SourceFilterOptions = this.buildSourceFilterOptions({ sourceId: beMetaId, entryFilter, includeChildData });\n    if (typeof dim1 !== 'undefined') {\n      sfo.FirstDimensionVal = dim1;\n    }\n    if (typeof dim2 !== 'undefined') {\n      sfo.SecondDimensionVal = dim2;\n    }\n    if (typeof billCategoryId !== 'undefined') {\n      sfo.billCategoryId = billCategoryId;\n    }\n    const outputOptions: OutputOptions = this.buildOutputOptions();\n    return this.printService.outputBEDataWithFilter(sfo, outputOptions, 'tab');\n  }\n  /**\n   * æé SourceOptions\n   * @param options options\n   */\n  private buildSourceOptions(options: { dataIds: string[], sourceId: string, [prop: string]: any }): SourceOptions {\n    const so: SourceOptions = {\n      DataIds: options && options.dataIds || undefined,\n      SourceId: options && options.sourceId || undefined,\n      FirstDimensionVal: options && options.dim1 || undefined,\n      SecondDimensionVal: options && options.dim2 || undefined,\n      RetrieveParam: options && options.retrieveParam || undefined,\n      FormatId: options && options.formatId || undefined,\n      billCategoryId: options && options.billCategoryId || undefined,\n      ServiceUnit: options && options.serviceUnit || undefined,\n      currentPage: options && options.currentPage || undefined,\n      pageRowCount: options && options.pageRowCount || undefined,\n      queryType: options && options.queryType || undefined,\n      queryServiceId: options && options.queryServiceId || undefined,\n      queryParam: options && options.queryParam || undefined\n    };\n    return so;\n  }\n  /**\n   * æé OutputOptions\n   * @param options options\n   */\n  private buildOutputOptions(options?: { [prop: string]: any }): OutputOptions {\n    const oo: OutputOptions = {\n      OutputType: options && options.outputType || OutputType.PRINT,\n      FileType: options && options.fileType || FileType.Html5,\n      Path: options && options.path || undefined,\n      DeviceId: options && options.deviceId || undefined,\n      printJob: options && options.printJob || undefined,\n      printerName: options && options.printerName || undefined,\n      printSetting: options && options.printSetting || undefined,\n      printType: options && options.printType || PrintType.Form\n    };\n    return oo;\n  }\n  /**\n   * æé SourceFilterOptions\n   * @param options options\n   */\n  private buildSourceFilterOptions(options: { sourceId: string, [prop: string]: any }): SourceFilterOptions {\n    const entryFilter = { 'isUsePagination': false, 'filterConditions': [], 'sortConditions': [], 'pagination': null };\n    const sfo: SourceFilterOptions & { [prop: string]: any } = {\n      SourceId: options.sourceId,\n      EntityFilter: options && options.entryFilter || entryFilter,\n      FirstDimensionVal: options && options.dim1 || undefined,\n      SecondDimensionVal: options && options.dim2 || undefined,\n      FormatId: options && options.formatId || undefined,\n      ServiceUnit: options && options.serviceUnit || undefined,\n      billCategoryId: options && options.billCategoryId || undefined,\n      currentPage: options && options.currentPage || undefined,\n      pageRowCount: options && options.pageRowCount || undefined,\n      queryParam: options && options.queryParam || undefined,\n      queryServiceId: options && options.queryServiceId || undefined,\n      queryType: options && options.queryType || undefined,\n      includeChildData: options && options.hasOwnProperty('includeChildData') ? options.includeChildData : true\n    };\n    return sfo;\n  }\n  /**\n   * å±ç¤ºéè¯¯æ¶æ¯\n   * @param message éè¯¯æ¶æ¯\n   */\n  private showWarning(message: string) {\n    if (this.notifyService) {\n      this.notifyService.warning(message, { hideTitle: true });\n    } else if (this.msgService) {\n      this.msgService.error(message);\n    }\n  }\n  private get notifyService(): FormNotifyService | null {\n    if (this.formNotifyService) {\n      return this.formNotifyService;\n    } else if (this.injector) {\n      return this.injector.get<FormNotifyService>(FormNotifyService, null);\n    }\n    return null;\n  }\n  private get commandContext(): CommandContext | null {\n    return this['context'] || null;\n  }\n  private get frameContext(): FrameContext | null {\n    return this.commandContext && this.commandContext.frameContext || null;\n  }\n  private get injector(): Injector | null {\n    return this.frameContext && this.frameContext.injector || null;\n  }\n}\n\nexport { PrintService };\n","/**\n * éä»¶ä¿¡æ¯å®ä¹\n */\ninterface AttachmentInfo {\n\n  /**\n   * éä»¶id\n   */\n  attachmentId: string;\n\n  /**\n   * éä»¶åç§°\n   */\n  fileName: string;\n}\n\n\n/**\n * æå¡å¨ç«¯æéçéä»¶ä¿¡æ¯å®ä¹\n */\ninterface ServerAttachmentInfo {\n\n  /**\n   * è¡¨åè·¯å¾\n   */\n  NodeCodes: string[];\n\n  /**\n   * ä¸»é®è·¯å¾\n   */\n  HiretryIds: string[];\n\n  /**\n   * éä»¶idæ°ç»ï¼æ¹éæ°å¢æ¶ä½¿ç¨ï¼\n   */\n  AttachmentIds?: string[];\n\n  /**\n   * éä»¶idï¼æ´æ°æ¶ä½¿ç¨ï¼\n   */\n  AttachmentId?: string;\n}\n/**\n * éä»¶udtæåºå­æ®µ\n */\nconst ATTACHMENT_ORDER_FIELD = 'fileSortOrder';\n\nexport { AttachmentInfo, ServerAttachmentInfo, ATTACHMENT_ORDER_FIELD };\n","import { UploadFileInfo } from '@gsp-svc/formdoc-upload';\nimport { AttachmentInfo } from './types';\n\n/**\n * éä»¶ä¿¡æ¯å¤çå·¥å·ç±»\n */\nclass AttachmentUtil {\n\n  /**\n   * è½¬æ¢ä¸ºéä»¶ä¿¡æ¯æ°ç»\n   */\n  public static convertToAttachmentInfos(fileInfos: UploadFileInfo[]): AttachmentInfo[] {\n    if (!fileInfos) {\n      return [];\n    }\n    const attachmentInfos: AttachmentInfo[] = fileInfos.map((fileInfo: UploadFileInfo) => {\n      return this.convertToAttachmentInfo(fileInfo);\n    });\n    return attachmentInfos;\n  }\n\n  /**\n   * è½¬æ¢ä¸ºéä»¶ä¿¡æ¯\n   */\n  public static convertToAttachmentInfo(fileInfo: UploadFileInfo): AttachmentInfo {\n    const attachmentInfo: AttachmentInfo = {\n      attachmentId: fileInfo.metadataId,\n      fileName: fileInfo.fileName\n    };\n    return attachmentInfo;\n  }\n\n  /**\n   * è·åéä»¶åè¡¨ä¸­çç¬¬ä¸ä¸ªéä»¶\n   */\n  public static getFirstAttachmentInfo(attachmentInfos: AttachmentInfo[]) {\n    if (!attachmentInfos || attachmentInfos.length === 0) {\n      return;\n    }\n    const firstAttachmentInfo = attachmentInfos[0];\n    return firstAttachmentInfo;\n  }\n\n  /**\n   * æåéä»¶idæ°ç»\n   */\n  public static peekAttachmentIds(attachmentInfos: AttachmentInfo[]) {\n    if (!attachmentInfos) {\n      attachmentInfos = [];\n    }\n    const attachmentIds = attachmentInfos.map((attachmentInfo: AttachmentInfo) => {\n      return attachmentInfo.attachmentId;\n    });\n\n    return attachmentIds;\n  }\n\n}\n\nexport { AttachmentUtil };\n","import { Injectable } from '@angular/core';\nimport { Observable, of } from 'rxjs';\nimport { tap, switchMap, map } from 'rxjs/operators';\nimport { FrameContext, Entity, BindingData, BindingPathConverter } from '@farris/devkit';\nimport { BefRepository, BefDataPathUtil, ResponseInfo } from '@farris/bef';\nimport { FormLoadingService } from '../form-loading/form-loading.service';\nimport { AttachmentInfo, ServerAttachmentInfo } from './types';\nimport { AttachmentUtil } from './attachment.util';\n\n/**\n * éä»¶è°ç¨\n */\n@Injectable()\nclass AttachmentDataService {\n\n  /**\n   * å®ä½ä»åº\n   */\n  private get repository(): BefRepository<Entity> {\n    return this.frameContext.repository as BefRepository<Entity>;\n  }\n\n  /**\n   * ç»å®æ°æ®\n   */\n  private get bindingData(): BindingData {\n    return this.frameContext.bindingData;\n  }\n\n  constructor(private frameContext: FrameContext, private loadingService: FormLoadingService) {\n  }\n\n  /**\n   * æ´æ°éä»¶ä¿¡æ¯\n   */\n  public updateRow(attachmentInfoFieldPath: string, attachmentInfo: AttachmentInfo): Observable<any> {\n    const restService = this.repository.restService;\n    const baseUri = restService.baseUri;\n    const updateUri = `${baseUri}/service/updateattachment`;\n    const serverAttachInfo = this.createUpdateAttachInfo(attachmentInfoFieldPath, attachmentInfo);\n    const body = {\n      updateAttachInfo: serverAttachInfo,\n      requestInfo: restService.buildRequestInfo()\n    };\n    const options = {\n      body: body\n    };\n    this.loadingService.show();\n    return restService.invoke(updateUri, 'PUT', null, options).pipe(\n      switchMap((responseInfo: ResponseInfo) => {\n        return this.syncAttachmentInfosToClient();\n      }),\n      tap(() => {\n        this.loadingService.hide();\n      })\n    );\n  }\n  /**\n   * éè¿å±æ§åæ´æ°éä»¶ä¿¡æ¯\n   * @param attachmentInfoFieldPath éä»¶å­æ®µ\n   * @param attachmentInfo éä»¶ä¿¡æ¯\n   */\n  public updateRowWithPropertyName(attachmentInfoFieldPath: string, attachmentInfo: AttachmentInfo): Observable<any> {\n    const restService = this.repository.restService;\n    const baseUri = restService.baseUri;\n    const updateUri = `${baseUri}/service/updateattachmentwithproptyname`;\n    const serverAttachInfo = this.createUpdateAttachInfo(attachmentInfoFieldPath, attachmentInfo);\n    const propertyName = attachmentInfoFieldPath.split('/').filter(p => p).pop();\n    const body = {\n      updateAttachInfo: serverAttachInfo,\n      propertyName,\n      requestInfo: restService.buildRequestInfo()\n    };\n    const options = {\n      body: body\n    };\n    this.loadingService.show();\n    return restService.invoke(updateUri, 'PUT', null, options).pipe(\n      switchMap((responseInfo: ResponseInfo) => {\n        return this.syncAttachmentInfosToClient();\n      }),\n      tap(() => {\n        this.loadingService.hide();\n      })\n    );\n  }\n  /**\n   * æ¹éåå»ºéä»¶è¡æ°æ®\n   */\n  public updateRows(attachmentInfoFieldPath: string, attachmentInfos: AttachmentInfo[]): Observable<any> {\n    const restService = this.repository.restService;\n    const baseUri = restService.baseUri;\n    const updateUri = `${baseUri}/service/batchuploadattachment`;\n    const serverAttachInfo = this.createBatchCreateAttachInfo(attachmentInfoFieldPath, attachmentInfos);\n    const isRootEntity = serverAttachInfo.NodeCodes.length === 0;\n\n    const body = {\n      batchUploadInfo: serverAttachInfo,\n      requestInfo: restService.buildRequestInfo()\n    };\n    const options = {\n      body: body\n    };\n    return restService.invoke(updateUri, 'PUT', null, options).pipe(\n      switchMap((responseInfo: ResponseInfo) => {\n        return this.appendAttachmentInfosToClient(responseInfo.returnValue, isRootEntity);\n      }),\n      tap(() => {\n        this.loadingService.hide();\n      })\n    );\n  }\n  /**\n   * æ¹éåå»ºéä»¶è¡æ°æ®\n   */\n  public updateRowsWithConfigs(attachmentInfoFieldPath: string, attachmentInfos: AttachmentInfo[], configs: { [prop: string]: any }): Observable<any> {\n    const restService = this.repository.restService;\n    const baseUri = restService.baseUri;\n    const updateUri = `${baseUri}/service/batchuploadattachment`;\n    const serverAttachInfo = this.createBatchCreateAttachInfo(attachmentInfoFieldPath, attachmentInfos);\n    // const isRootEntity = serverAttachInfo.NodeCodes.length === 0;\n\n    const body = {\n      batchUploadInfo: serverAttachInfo,\n      requestInfo: restService.buildRequestInfo()\n    };\n    const options = {\n      body: body\n    };\n    return restService.invoke(updateUri, 'PUT', null, options).pipe(\n      switchMap((responseInfo: ResponseInfo) => {\n        return this.appendAttachmentInfos(responseInfo.returnValue, configs);\n      }),\n      tap(() => {\n        this.loadingService.hide();\n      })\n    );\n  }\n  /**\n   * æ ¹æ®å±æ§åæ¹éåå»ºéä»¶è¡æ°æ®\n   */\n  public updateRowsWithPropertyName(attachmentInfoFieldPath: string, attachmentInfos: AttachmentInfo[]): Observable<any> {\n    const restService = this.repository.restService;\n    const baseUri = restService.baseUri;\n    const updateUri = `${baseUri}/service/batchuploadattachmentwithproptyname`;\n    const serverAttachInfo = this.createBatchCreateAttachInfo(attachmentInfoFieldPath, attachmentInfos);\n    const isRootEntity = serverAttachInfo.NodeCodes.length === 0;\n    const propertyName = attachmentInfoFieldPath.split('/').filter(p => p).pop();\n\n    const body = {\n      batchUploadInfo: serverAttachInfo,\n      propertyName,\n      requestInfo: restService.buildRequestInfo()\n    };\n    const options = {\n      body: body\n    };\n    return restService.invoke(updateUri, 'PUT', null, options).pipe(\n      switchMap((responseInfo: ResponseInfo) => {\n        return this.appendAttachmentInfosToClient(responseInfo.returnValue, isRootEntity);\n      }),\n      tap(() => {\n        this.loadingService.hide();\n      })\n    );\n  }\n\n  /**\n   * åå»ºæå¡å¨ç«¯éè¦çæ´æ°ä¿¡æ¯\n   */\n  private createUpdateAttachInfo(attachmentInfoFieldPath: string, attachmentInfo: AttachmentInfo): ServerAttachmentInfo {\n\n    const attachmentId = attachmentInfo.attachmentId;\n    const parentBindingPathArray = BindingPathConverter.toBindingPathArray(attachmentInfoFieldPath);\n    parentBindingPathArray.pop();\n    const nodeCodes = BefDataPathUtil.convertToObjectCodes(parentBindingPathArray, this.bindingData);\n    const hiretryIds = BefDataPathUtil.convertToDataIdsForUpdate(parentBindingPathArray, this.bindingData);\n\n    const serverAttachInfo: ServerAttachmentInfo = {\n      NodeCodes: nodeCodes,\n      HiretryIds: hiretryIds,\n      AttachmentIds: [attachmentId],\n      AttachmentId: attachmentId\n    };\n\n    return serverAttachInfo;\n  }\n\n  /**\n   * åå»ºæå¡å¨ç«¯éè¦çæ¹éæ°å¢éä»¶ä¿¡æ¯\n   */\n  private createBatchCreateAttachInfo(attachmentInfoFieldPath: string, attachmentInfo: AttachmentInfo[]): ServerAttachmentInfo {\n    const attachmentIds = AttachmentUtil.peekAttachmentIds(attachmentInfo);\n\n    const parentBindingPathArray = BindingPathConverter.toBindingPathArray(attachmentInfoFieldPath);\n    parentBindingPathArray.pop();\n    const nodeCodes = BefDataPathUtil.convertToObjectCodes(parentBindingPathArray, this.bindingData);\n    const hiretryIds = BefDataPathUtil.convertToDataIdsForAdd(parentBindingPathArray, this.bindingData);\n\n    const serverAttachInfo = {\n      NodeCodes: nodeCodes,\n      HiretryIds: hiretryIds,\n      AttachmentIds: attachmentIds,\n      AttachmentId: null\n    };\n\n    return serverAttachInfo;\n  }\n\n  /**\n   * åæ­¥æå¡å¨ç«¯ææ°ä¿¡æ¯å°å®¢æ·ç«¯\n   * @todo:\n   * 1ãä¸»å¯¹è±¡æ¹éæ°å¢æ¶ä¸æ¯æ\n   */\n  public syncAttachmentInfosToClient() {\n    const rootDataId = this.bindingData.list.currentId;\n    return this.repository.updateEntityById(rootDataId);\n  }\n\n  /**\n   * è¿½å ä¸»è¡¨æ°æ®å°å®¢æ·ç«¯\n   */\n  public appendAttachmentInfosToClient(listData: any[], isRootEntity: boolean): Observable<any[]> {\n    if (isRootEntity === true) {\n      const entities = this.repository.buildEntities(listData);\n      this.repository.entityCollection.addEntities(entities);\n      return of(listData);\n    } else {\n      const rootDataId = this.bindingData.list.currentId;\n      return this.repository.updateEntityById(rootDataId).pipe(\n        map(() => listData)\n      );\n    }\n  }\n  public appendAttachmentInfos(listData: any[], keyValues: { [prop: string]: any }): Observable<any[]> {\n    const entities = this.repository.buildEntities(listData);\n    this.repository.entityCollection.addEntities(entities);\n    // æ´æ°å®ä½ä½¿ä¹äº§çåæ´é\n    this.updateEntities(entities, keyValues);\n    return of(listData);\n  }\n  private updateEntities(entities: Entity[], keyValues: { [prop: string]: any }) {\n    entities.forEach((entity: Entity) => {\n      this.updateEntity(entity, keyValues);\n    });\n  }\n  private updateEntity(target: Entity, keyValues: { [prop: string]: any }) {\n    Object.keys(keyValues).forEach((key: string) => {\n      this.setValueByPath(target, key, keyValues[key]);\n    });\n  }\n  private setValueByPath(target: object, path: string, value: any) {\n    if (target) {\n      const paths = path.split('.');\n      if (paths.length <= 1) {\n        target[path] = value;\n      } else {\n        paths.slice(0, -1).reduce((prev, path) => {\n          if (!(prev.hasOwnProperty(path) || prev['__proto__'].hasOwnProperty(path))) {\n            prev[path] = {};\n          }\n          return prev[path];\n        }, target)[paths[paths.length - 1]] = value;\n      }\n    }\n  }\n}\n\n\nexport { AttachmentDataService };\n","import { Injectable, InjectFlags, Optional } from '@angular/core';\nimport { Observable, from, of, empty, EMPTY } from 'rxjs';\nimport { switchMap } from 'rxjs/operators';\nimport { UploadDialogService, UploadFileInfo, UploadLimit, DownloadService, FileState } from '@gsp-svc/formdoc-upload';\nimport { FileViewerService } from '@gsp-svc/file-viewer';\nimport { FrameContext, BindingData, BindingPathConverter, BindingList, DataPathUtil, DataPathCreator, EntityList, Entity } from '@farris/devkit';\nimport { FormNotifyService } from '../form-notify.service';\nimport { AttachmentUtil } from './attachment.util';\nimport { AttachmentDataService } from './attachment-data.service';\nimport { LanguageService } from '../languag.service';\nimport { EntityService } from '../entity-services/index';\nimport { BefRepository } from '@farris/bef';\n\n// tslint:disable: max-line-length\n/**\n * éä»¶æå¡\n */\n@Injectable()\nclass AttachmentService {\n\n  /**\n   * é»è®¤æ ¹ç®å½\n   */\n  private defaultRootDirId = '';\n\n  /**\n   * é»è®¤ç¶è·¯å¾\n   */\n  private get defaultParentDirName(): string {\n    return this.frameContext.bindingData.list.currentId;\n  }\n\n  /**\n   * ç»å®æ°æ®\n   */\n  private get bindingData(): BindingData {\n    return this.frameContext.bindingData;\n  }\n\n  /**\n   * å¤è¯­æå¡\n   */\n  private languageService: LanguageService;\n\n  /**\n   * éä»¶é¢è§æå¡\n   */\n  private fileViewerService: FileViewerService;\n\n  /**\n   * å®ä½æå¡\n   */\n  private entityService: EntityService;\n\n  /**\n   * æé å½æ°\n   */\n  constructor(\n    private frameContext: FrameContext,\n    private attachDataService: AttachmentDataService,\n    private notifyService: FormNotifyService,\n    private uploadDialogService: UploadDialogService,\n    @Optional() private downloadService: DownloadService\n  ) {\n    this.setLanguageService();\n    this.fileViewerService = this.frameContext.injector.get<FileViewerService>(FileViewerService, null, InjectFlags.Optional);\n    this.entityService = this.frameContext.injector.get<EntityService>(EntityService, null, InjectFlags.Optional);\n    if (!this.downloadService && typeof DownloadService !== 'undefined') {\n      this.downloadService = this.frameContext.injector.get<DownloadService>(DownloadService, null);\n    }\n  }\n\n  /**\n   * è®¾ç½®è¯­è¨æå¡\n   */\n  private setLanguageService() {\n    const injector = this.frameContext.injector;\n    this.languageService = injector.get<LanguageService>(LanguageService, null, InjectFlags.Optional);\n    if (!this.languageService) {\n      this.languageService = LanguageService.getInstance();\n    }\n  }\n\n  /**\n   * ä¸ä¼ åä¸ªæä»¶\n   * @param attachmentIdPath éä»¶åç å­æ®µçè·¯å¾ï¼å½¢å¦/attachInfo/attachmentIdï¼\n   * @param attachmentNamePath éä»¶åç§°å­æ®µçè·¯å¾\n   */\n  public uploadAndUpdateRow(attachmentInfoFieldPath: string, rootDirId?: string, parentDirName?: string, fileType?: string, id?: string): Observable<any> {\n    const rootId = rootDirId ? rootDirId : this.defaultRootDirId;\n    const formId = parentDirName ? parentDirName : this.defaultParentDirName;\n    if (!rootId || !formId) {\n      throw new Error('rootDirIdåparentDirNameä¸è½ä¸ºç©ºï¼è¯·å¡«å');\n    }\n\n    const uploadLimit: UploadLimit = new UploadLimit();\n    uploadLimit.fileCount = 1;\n    if (fileType) {\n      uploadLimit.fileType = fileType;\n    }\n    // è·åèçéä»¶idæ°ç»\n    const attachmentIdList = [];\n    let currentItem = null;\n    if (id) {\n      // ä¿®æ­£å½åè¡\n      const bindingList: BindingList = this.frameContext.bindingData.getList();\n      if (bindingList.currentId !== id) {\n        bindingList.setCurrentId(id, true, true);\n      }\n      // å¦ææå®äºidåè·åæå®idçè¡\n      currentItem = this.getSpecialRow(attachmentInfoFieldPath, id);\n    } else {\n      // æ²¡ææå®åä½¿ç¨å½åè¡ï¼å¯è½å­å¨å½åè¡åäºä»¶è¡ä¸ä¸è´çæåµï¼æ­¤æ¶åºè¯¥å¨å½ä»¤ä¸­ä¼ éidåæ°\n      currentItem = this.getCurrentRow(attachmentInfoFieldPath);\n    }\n    if (currentItem && currentItem.primaryKeyValue) {\n      const attachmentIds = this.getAttachmentIdsByPathAndDataIds(attachmentInfoFieldPath, [currentItem.primaryKeyValue]);\n      if (attachmentIds && attachmentIds.length > 0) {\n        attachmentIdList.push.apply(attachmentIdList, attachmentIds);\n      }\n    }\n\n    const dialog$ = from(this.uploadDialogService.uploadFileWithLimit(formId, rootId, uploadLimit, attachmentIdList));\n    const result$ = dialog$.pipe(\n      switchMap((fileInfos: UploadFileInfo[]) => {\n        if (!fileInfos || fileInfos.length === 0) {\n          this.notifyService.warning(this.languageService.plsUploadFirst, { hideTitle: true });\n          return empty();\n        }\n        // è¿æ»¤åºstateä¸ºæ°å¢çéä»¶\n        fileInfos = fileInfos.filter((fileInfo: UploadFileInfo) => {\n          if (fileInfo.hasOwnProperty('state')) {\n            return fileInfo.state === FileState.New;\n          }\n          return true;\n        });\n        if (fileInfos.length === 0) {\n          return of(true);\n        }\n        // æ¯å¦ä¸ä¼ å¤æ­\n        const attachmentInfos = AttachmentUtil.convertToAttachmentInfos(fileInfos);\n        const firstAttachmentInfo = AttachmentUtil.getFirstAttachmentInfo(attachmentInfos);\n        return this.attachDataService.updateRow(attachmentInfoFieldPath, firstAttachmentInfo);\n      })\n    );\n\n    return result$;\n  }\n  /**\n   * ä¸ä¼ åä¸ªæä»¶ï¼æ¯æå¤åï¼\n   * @param attachmentInfoFieldPath éä»¶åç å­æ®µçè·¯å¾ï¼å½¢å¦/attachInfo/attachmentIdï¼\n   * @param rootDirId éä»¶å­å¨æ ¹ç®å½\n   * @param parentDirName éä»¶å­å¨ç®å½\n   * @param fileType æä»¶ç±»åï¼like .txt,.docx\n   */\n  public uploadAndUpdateRowWithPropertyName(attachmentInfoFieldPath: string, rootDirId?: string, parentDirName?: string, fileType?: string, id?: string): Observable<any> {\n    const rootId = rootDirId ? rootDirId : this.defaultRootDirId;\n    const formId = parentDirName ? parentDirName : this.defaultParentDirName;\n    if (!rootId || !formId) {\n      throw new Error('rootDirIdåparentDirNameä¸è½ä¸ºç©ºï¼è¯·å¡«å');\n    }\n\n    const uploadLimit: UploadLimit = new UploadLimit();\n    uploadLimit.fileCount = 1;\n    if (fileType) {\n      uploadLimit.fileType = fileType;\n    }\n\n    // è·åèçéä»¶idæ°ç»\n    const attachmentIdList = [];\n    let currentItem = null;\n    if (id) {\n      // ä¿®æ­£å½åè¡\n      const bindingList: BindingList = this.frameContext.bindingData.getList();\n      if (bindingList.currentId !== id) {\n        bindingList.setCurrentId(id, true, true);\n      }\n      // å¦ææå®äºidåè·åæå®idçè¡\n      currentItem = this.getSpecialRow(attachmentInfoFieldPath, id);\n    } else {\n      // æ²¡ææå®åä½¿ç¨å½åè¡ï¼å¯è½å­å¨å½åè¡åäºä»¶è¡ä¸ä¸è´çæåµï¼æ­¤æ¶åºè¯¥å¨å½ä»¤ä¸­ä¼ éidåæ°\n      currentItem = this.getCurrentRow(attachmentInfoFieldPath);\n    }\n    if (currentItem && currentItem.primaryKeyValue) {\n      const attachmentIds = this.getAttachmentIdsByPathAndDataIds(attachmentInfoFieldPath, [currentItem.primaryKeyValue]);\n      if (attachmentIds && attachmentIds.length > 0) {\n        attachmentIdList.push.apply(attachmentIdList, attachmentIds);\n      }\n    }\n\n    const dialog$ = from(this.uploadDialogService.uploadFileWithLimit(formId, rootId, uploadLimit, attachmentIdList));\n    const result$ = dialog$.pipe(\n      switchMap((fileInfos: UploadFileInfo[]) => {\n        if (!fileInfos || fileInfos.length === 0) {\n          this.notifyService.warning(this.languageService.plsUploadFirst, { hideTitle: true });\n          return EMPTY;\n        }\n        // è¿æ»¤åºstateä¸ºæ°å¢çéä»¶\n        fileInfos = fileInfos.filter((fileInfo: UploadFileInfo) => {\n          if (fileInfo.hasOwnProperty('state')) {\n            return fileInfo.state === FileState.New;\n          }\n          return true;\n        });\n        if (fileInfos.length === 0) {\n          return of(true);\n        }\n        // æ¯å¦ä¸ä¼ å¤æ­\n        const attachmentInfos = AttachmentUtil.convertToAttachmentInfos(fileInfos);\n        const firstAttachmentInfo = AttachmentUtil.getFirstAttachmentInfo(attachmentInfos);\n        return this.attachDataService.updateRowWithPropertyName(attachmentInfoFieldPath, firstAttachmentInfo);\n      })\n    );\n\n    return result$;\n  }\n  /**\n   * ä¸ä¼ å¤ä¸ªæä»¶\n   */\n  public uploadAndBatchAddRows(attachmentInfoFieldPath: string, rootDirId?: string, parentDirName?: string, fileType?: string): Observable<any> {\n    const rootId = rootDirId ? rootDirId : this.defaultRootDirId;\n    const formId = parentDirName ? parentDirName : this.defaultParentDirName;\n    if (!rootId || !formId) {\n      throw new Error('rootDirIdåparentDirNameä¸è½ä¸ºç©ºï¼è¯·å¡«å');\n    }\n\n    const uploadLimit: UploadLimit = new UploadLimit();\n    if (fileType) {\n      uploadLimit.fileType = fileType;\n    }\n    const dialog$ = from(this.uploadDialogService.uploadFileWithLimit(formId, rootId, uploadLimit));\n    const result$ = dialog$.pipe(\n      switchMap((fileInfos: UploadFileInfo[]) => {\n        if (!fileInfos || fileInfos.length === 0) {\n          this.notifyService.warning(this.languageService.plsUploadFirst, { hideTitle: true });\n          return EMPTY;\n        }\n        // è¿æ»¤åºstateä¸ºæ°å¢çéä»¶\n        fileInfos = fileInfos.filter((fileInfo: UploadFileInfo) => {\n          if (fileInfo.hasOwnProperty('state')) {\n            return fileInfo.state === FileState.New;\n          }\n          return true;\n        });\n        if (fileInfos.length === 0) {\n          return of(true);\n        }\n        const attachmentInfos = AttachmentUtil.convertToAttachmentInfos(fileInfos);\n        return this.attachDataService.updateRows(attachmentInfoFieldPath, attachmentInfos);\n      })\n    );\n    return result$;\n  }\n  /**\n   * ä¸ä¼ å¤ä¸ªæä»¶\n   */\n  public uploadAndBatchAddRowsWithPropertyName(attachmentInfoFieldPath: string, rootDirId?: string, parentDirName?: string, fileType?: string): Observable<any> {\n    const rootId = rootDirId ? rootDirId : this.defaultRootDirId;\n    const formId = parentDirName ? parentDirName : this.defaultParentDirName;\n    if (!rootId || !formId) {\n      throw new Error('rootDirIdåparentDirNameä¸è½ä¸ºç©ºï¼è¯·å¡«å');\n    }\n    const uploadLimit: UploadLimit = new UploadLimit();\n    if (fileType) {\n      uploadLimit.fileType = fileType;\n    }\n    const dialog$ = from(this.uploadDialogService.uploadFileWithLimit(formId, rootId, uploadLimit));\n    const result$ = dialog$.pipe(\n      switchMap((fileInfos: UploadFileInfo[]) => {\n        if (!fileInfos || fileInfos.length === 0) {\n          this.notifyService.warning(this.languageService.plsUploadFirst, { hideTitle: true });\n          return EMPTY;\n        }\n        // è¿æ»¤åºstateä¸ºæ°å¢çéä»¶\n        fileInfos = fileInfos.filter((fileInfo: UploadFileInfo) => {\n          if (fileInfo.hasOwnProperty('state')) {\n            return fileInfo.state === FileState.New;\n          }\n          return true;\n        });\n        if (fileInfos.length === 0) {\n          return of(true);\n        }\n        const attachmentInfos = AttachmentUtil.convertToAttachmentInfos(fileInfos);\n        return this.attachDataService.updateRowsWithPropertyName(attachmentInfoFieldPath, attachmentInfos);\n      })\n    );\n    return result$;\n  }\n  /**\n   * ä¸è½½éä»¶ï¼æ ¹æ®éä»¶idï¼\n   */\n  public download(attachId: string, rootId?: string): any {\n    if (!attachId) {\n      this.notifyService.warning(this.languageService.plsSelectDownloadAtt, { hideTitle: true });\n      return EMPTY;\n    }\n    rootId = rootId || 'default-root';\n    const url = this.getDownloadUrl([attachId], rootId);\n    // let url = '';\n    // if (rootId) {\n    //   url = `/api/runtime/dfs/v1.0/formdoc/filecontent?metadataid=${attachId}&rootid=${rootId}`;\n    // } else {\n    //   url = `/api/runtime/dfs/v1.0/formdoc/download/${attachId}`;\n    // }\n    window.open(url);\n    return of(true);\n  }\n  /**\n   * æ¹éä¸è½½éä»¶ï¼æ ¹æ®éä»¶idæ°ç»ï¼\n   */\n  public batchDownload(attachIds: string[], rootId: string): any {\n    if (!attachIds || attachIds.length === 0) {\n      this.notifyService.warning(this.languageService.plsSelectDownloadAtt, { hideTitle: true });\n      return EMPTY;\n    }\n    // åªéæ©ä¸ä¸ªéä»¶æ¶æåä¸ªéä»¶ä¸è½½å¤ç\n    if (attachIds.length === 1) {\n      return this.download(attachIds[0], rootId);\n    }\n    // const attachIdsString = JSON.stringify(attachIds);\n    // const url = `/api/runtime/dfs/v1.0/formdoc/multiple/download?metadataidlist=${attachIdsString}&rootid=${rootId}`;\n    const url = this.getDownloadUrl(attachIds, rootId);\n    window.open(url);\n    return of(true);\n  }\n  /**\n   * è·åä¸è½½è·¯å¾\n   * @param metadataidlist éä»¶idæ°ç»\n   * @param rootId rootId\n   */\n  private getDownloadUrl(metadataidlist: Array<string>, rootId: string): string {\n    rootId = rootId || 'default-root';\n    if (this.downloadService) {\n      if (metadataidlist.length === 1) {\n        return this.downloadService.getDownloadUrl(metadataidlist[0], rootId);\n      } else {\n        const attachIdsString = JSON.stringify(metadataidlist);\n        return this.downloadService.getMultipleDownloadUrl(attachIdsString, rootId);\n      }\n    } else {\n      console.warn('å å®å¨é®é¢ï¼éä»¶ä¸è½½æä¾å®å¨æ ¡éªæºå¶ï¼éä»¶ä¸è½½åè½ééæ°ç¼è¯ã');\n      if (metadataidlist.length === 1) {\n        return `/api/runtime/dfs/v1.0/formdoc/filecontent?metadataid=${metadataidlist[0]}&rootid=${rootId}`;\n      } else {\n        const attachIdsString = JSON.stringify(metadataidlist);\n        return `/api/runtime/dfs/v1.0/formdoc/multiple/download?metadataidlist=${attachIdsString}&rootid=${rootId}`;\n      }\n    }\n  }\n  /**\n   * ä¸è½½ï¼æ ¹æ®æ°æ®idï¼\n   */\n  public downloadByDataId(dataId: string, attachmentInfoFieldPath: string, rootId: string): Observable<any> {\n    if (!dataId) {\n      this.notifyService.warning(this.languageService.plsSelectDownloadAtt, { hideTitle: true });\n      return EMPTY;\n    }\n\n    const dataIds = [dataId];\n    const attachIds = this.getAttachmentIdsByPathAndDataIds(attachmentInfoFieldPath, dataIds);\n    if (attachIds.length === 0) {\n      this.notifyService.warning(this.languageService.noDownloadAtt, { hideTitle: true });\n      return EMPTY;\n    }\n\n    const attachId = attachIds[0];\n    return this.download(attachId);\n  }\n\n  /**\n   * æ¹éä¸è½½éä»¶\n   */\n  public batchDownloadByDataIds(dataIds: string[] | string, attachmentInfoFieldPath: string, rootId: string): Observable<any> {\n    if (typeof dataIds === 'string' && dataIds && dataIds.length > 0) {\n      dataIds = dataIds.split(',').filter(p => p);\n    }\n    if (!dataIds || Array.isArray(dataIds) === false || dataIds.length === 0) {\n      this.notifyService.warning(this.languageService.plsSelectDownloadAtt, { hideTitle: true });\n      return EMPTY;\n    }\n    const ids = [].concat(dataIds);\n    const attachIds = this.getAttachmentIdsByPathAndDataIds(attachmentInfoFieldPath, ids);\n    if (attachIds.length === 0) {\n      this.notifyService.warning(this.languageService.noDownloadAtt, { hideTitle: true });\n      return EMPTY;\n    }\n\n    return this.batchDownload(attachIds, rootId);\n  }\n\n  /**\n   * æ ¹æ®éä»¶UDTå­æ®µçè·¯å¾é¢è§éä»¶\n   * @param attachmentInfoFieldPath éä»¶UDTå­æ®µpath\n   * @param rootDirId è·ç®å½id\n   * @param ids éä»¶id\n   */\n  public previewByAttachmentInfoFieldPath(attachmentInfoFieldPath: string, rootDirId: string, ids?: any) {\n    if (!attachmentInfoFieldPath || !rootDirId) {\n      throw new Error('attachmentInfoFieldPathårootDirIdä¸è½ä¸ºç©ºï¼è¯·å¡«å');\n    }\n    let attachIds = [];\n    let dataIds = [];\n    if (ids && ids.length > 0) {\n      if (typeof (ids) === 'string') {\n        dataIds.push(ids);\n      } else {\n        dataIds = ids;\n      }\n      attachIds = this.getAttachmentIdsByPathAndDataIds(attachmentInfoFieldPath, dataIds);\n    } else {\n      attachIds = this.getAttachmentIdsByPathAndDataIds(attachmentInfoFieldPath, null);\n    }\n    if (attachIds && attachIds.length === 0) {\n      this.notifyService.warning(this.languageService.noAttachment, { hideTitle: true });\n      return EMPTY;\n    }\n    return this.previewByAttachmentIds(attachIds, rootDirId);\n  }\n  /**\n   * æ ¹æ®éä»¶UDTå­æ®µçè·¯å¾é¢è§å½åè¡çéä»¶\n   * @param attachmentInfoFieldPath éä»¶UDTå­æ®µpath\n   * @param rootDirId æ ¹ç®å½id\n   */\n  public previewByAttachmentInfoFieldPathWithIndex(attachmentInfoFieldPath: string, rootDirId: string): Observable<any> {\n    if (!attachmentInfoFieldPath || !rootDirId) {\n      throw new Error('attachmentInfoFieldPathårootDirIdä¸è½ä¸ºç©ºï¼è¯·å¡«å');\n    }\n    const currentRow = this.getCurrentRow(attachmentInfoFieldPath);\n    const parentBindingPathArray = BindingPathConverter.toBindingPathArray(attachmentInfoFieldPath);\n    const attachmentFieldName = parentBindingPathArray.pop();\n    if (!currentRow[attachmentFieldName] || !currentRow[attachmentFieldName]['attachmentId']) {\n      this.notifyService.warning(this.languageService.noAttachment, { hideTitle: true });\n      return EMPTY;\n    }\n    const attachIds = this.getAttachmentIdsByPathAndDataIds(attachmentInfoFieldPath, null);\n    if (attachIds && attachIds.length === 0) {\n      this.notifyService.warning(this.languageService.noAttachment, { hideTitle: true });\n      return EMPTY;\n    }\n    const attachmentId = this.getCurrentAttachmentId(attachmentInfoFieldPath);\n    if (!attachmentId) {\n      throw new Error('è¦é¢è§çéä»¶idä¸å­å¨ï¼è¯·ç¡®è®¤');\n    } else {\n      return this.previewFileListWithIndex(attachIds, rootDirId, attachmentId);\n    }\n  }\n  /**\n   * æ ¹æ®ç®å½é¢è§éä»¶\n   * @param subDirName ç¶ç®å½åç§°\n   * @param rootDirId æ ¹ç®å½id\n   */\n  public previewBySubDirName(subDirName: string, rootDirId: string): Observable<any> {\n    if (!subDirName || !rootDirId) {\n      throw new Error('subDirNameårootDirIdä¸è½ä¸ºç©ºï¼è¯·å¡«å');\n    }\n    const viewer$ = from(this.fileViewerService.viewerFormFile(subDirName, rootDirId));\n    return viewer$;\n  }\n  /**\n   * æ ¹æ®ç®å½é¢è§æå®ç´¢å¼çéä»¶\n   * @param attachmentInfoFieldPath éä»¶UDTå­æ®µpath\n   * @param subDirName å­ç®å½åç§°\n   * @param rootDirId æ ¹ç®å½id\n   */\n  public previewBySubDirNameWithIndex(attachmentInfoFieldPath: string, subDirName: string, rootDirId: string): Observable<any> {\n    if (!subDirName || !rootDirId) {\n      throw new Error('subDirNameårootDirIdä¸è½ä¸ºç©ºï¼è¯·å¡«å');\n    }\n    // const attachIds = this.getAttachmentIdsByPathAndDataIds(attachmentInfoFieldPath, null);\n    const attachmentId = this.getCurrentAttachmentId(attachmentInfoFieldPath);\n    if (!attachmentId) {\n      this.notifyService.warning(this.languageService.noAttachment, { hideTitle: true });\n      return EMPTY;\n    }\n    const viewer$ = from(this.fileViewerService.viewerFormFileWithIndex(subDirName, rootDirId, attachmentId));\n    return viewer$;\n  }\n  /**\n   * æ ¹æ®éä»¶idæ°ç»é¢è§éä»¶\n   * @param attachmentIds éä»¶idæ°ç»\n   * @param rootDirId æ ¹ç®å½id\n   */\n  public previewByAttachmentIds(attachmentIds: string[], rootDirId: string): Observable<any> {\n    const viewer$ = from(this.fileViewerService.viewerFileList(attachmentIds, rootDirId));\n    return viewer$;\n  }\n  /**\n   * æ ¹æ®éä»¶idæ°ç»é¢è§æå®ç´¢å¼çéä»¶\n   * @param attachmentIds éä»¶idæ°ç»\n   * @param rootDirId æ ¹ç®å½id\n   * @param attachmentId éä»¶Id\n   */\n  public previewFileListWithIndex(attachmentIds: string[], rootDirId: string, attachmentId: string) {\n    const viewer$ = from(this.fileViewerService.viewerFileListWithIndex(attachmentIds, rootDirId, attachmentId));\n    return viewer$;\n  }\n  /**\n   * çæçæ¬å·\n   * @param versions åå²çæ¬å·\n   * @description é»è®¤ç¼ç è§åv1.0 v2.0 ...\n   */\n  public genVersion(versions: string[]) {\n    if (!versions) {\n      versions = [];\n    }\n    const mainCode = versions.length + 1;\n    return `V${mainCode}.0`;\n  }\n  /**\n   * æ´æ°éä»¶çæ¬ä¿¡æ¯\n   * @param versionField éä»¶çæ¬å­æ®µ\n   * @param historyField æ¯å¦åå²çæ¬å­æ®µ\n   * @param attachmentFieldPath éä»¶udtå­æ®µè·¯å¾\n   */\n  public updateAttachmentVersion(versionField: string, historyField: string, attachmentFieldPath: string) {\n    /**\n     * éåææéä»¶è¡\n     * æ¾å°æææ²¡æéä»¶çæ¬çè¡\n     * éåè¿äºè¡\n     * éè¿æä»¶åå»æ¥æ¾ååçä¸æéä»¶çæ¬å·çè¡ \n     * è¿äºè¡åå²çæ¬å­æ®µç½®ä¸ºtrue\n     * æ çæ¬å·çè¡ï¼çæ¬= ä¸è¡æ° + 1\n     * \n     */\n    const bindingPaths = attachmentFieldPath.split('/').filter(p => p);\n    // å¼¹åºéä»¶udtå­æ®µ\n    const attachmentField = bindingPaths.pop();\n    // è·åå°ææçéä»¶\n    const attachmentBindingList = this.frameContext.bindingData.getValue(bindingPaths) as BindingList;\n    const befRepository = this.frameContext.repository as BefRepository<any>;\n    const entityManager = befRepository.entityManager;\n    const dataPath = DataPathCreator.createByShortPathFromRoot(bindingPaths, entityManager, this.frameContext.bindingData);\n    const paths = dataPath.toArray().map((path: string) => {\n      if (path.startsWith('PropName:')) {\n        return path.split(':')[1];\n      } else {\n        return path;\n      }\n    });\n    if (attachmentBindingList) {\n      const attachments = attachmentBindingList.toJSON();\n      // åªå¤çæéä»¶çæåµ\n      if (attachments) {\n        const versionLessRows = attachments.filter(item => !item[versionField]);\n        versionLessRows.forEach(item => {\n          const fileName = item[attachmentField]['fileName'];\n          const versionedRows = attachments.filter(row => row[attachmentField]['fileName'] === fileName && row[versionField]);\n          paths.pop();\n          paths.push(`DataId:${item[attachmentBindingList.primaryKey]}`);\n          let entity = this.frameContext.repository.entityCollection.getEntityByPath(paths);\n          const version = this.genVersion(versionedRows);\n          entity[versionField] = version;\n          entity[historyField] = false;\n          // å¤çåå²è®°å½\n          versionedRows.forEach(row => {\n            paths.pop();\n            paths.push(`DataId:${row[attachmentBindingList.primaryKey]}`);\n            entity = this.frameContext.repository.entityCollection.getEntityByPath(paths);\n            entity[historyField] = true;\n          });\n        });\n      }\n    }\n  }\n  public isAttachmentCanDelete(historyField: string, attachmentFieldPath: string) {\n    const bindingPaths = attachmentFieldPath.split('/').filter(p => p);\n    // å¼¹åºéä»¶udtå­æ®µ\n    bindingPaths.pop();\n    const attachmentBindingList = this.frameContext.bindingData.getValue(bindingPaths) as BindingList;\n    const bindingObject = attachmentBindingList.currentItem;\n    if (bindingObject[historyField] === true) {\n      this.notifyService.warning(this.languageService.historyAttachment, { hideTitle: true });\n      return EMPTY;\n    }\n  }\n  public updateAttachmentHistory(versionField: string, historyField: string, attachmentFieldPath: string) {\n    const bindingPaths = attachmentFieldPath.split('/').filter(p => p);\n    // å¼¹åºéä»¶udtå­æ®µ\n    const attachmentField = bindingPaths.pop();\n    // è·åå°ææçéä»¶\n    const attachmentBindingList = this.frameContext.bindingData.getValue(bindingPaths) as BindingList;\n    // const befRepository = this.frameContext.repository as BefRepository<any>;\n    // const entityManager = befRepository.entityManager;\n    if (attachmentBindingList) {\n      const attachments = attachmentBindingList.toJSON();\n      const versionedRows = attachments.filter(item => item[versionField]);\n      const fileNameMap = new Map<string, Array<any>>();\n      const befRepository = this.frameContext.repository as BefRepository<any>;\n      const entityManager = befRepository.entityManager;\n      const dataPath = DataPathCreator.createByShortPathFromRoot(bindingPaths, entityManager, this.frameContext.bindingData);\n      const paths = dataPath.toArray().map((path: string) => {\n        if (path.startsWith('PropName:')) {\n          return path.split(':')[1];\n        } else {\n          return path;\n        }\n      });\n      versionedRows.forEach(item => {\n        const fileName = item[attachmentField]['fileName'];\n        if (fileNameMap.has(fileName)) {\n          fileNameMap.get(fileName).push(item);\n        } else {\n          fileNameMap.set(fileName, [item]);\n        }\n      });\n      Array.from(fileNameMap.values()).forEach((array: Array<any>) => {\n        array.sort((x, y) => {\n          const xVersion = parseInt(x[versionField].replace(/[a-zA-Z\\.]/g, ''));\n          const yVersion = parseInt(y[versionField].replace(/[a-zA-Z\\.]/g, ''));\n          return yVersion - xVersion;\n        });\n        const row = array[0];\n        paths.pop();\n        paths.push(`DataId:${row[attachmentBindingList.primaryKey]}`);\n        const entity = this.frameContext.repository.entityCollection.getEntityByPath(paths);\n        entity[historyField] = false;\n      });\n    }\n  }\n  /**\n   * è·åå½åè§å¾æ¨¡åå½åè¡çéä»¶id\n   * @param attachmentInfoFieldPath éä»¶udtå­æ®µ\n   */\n  private getCurrentAttachmentId(attachmentInfoFieldPath: string) {\n    const parentBindingPathArray = BindingPathConverter.toBindingPathArray(attachmentInfoFieldPath);\n    const attachmentFieldName = parentBindingPathArray.pop();\n    const bindingList: BindingList = this.frameContext.bindingData.getValue(parentBindingPathArray) as BindingList;\n    const currentItem = bindingList.currentItem;\n    if (currentItem && currentItem.primaryKeyValue) {\n      return currentItem[attachmentFieldName] && currentItem[attachmentFieldName]['attachmentId'] || null;\n    } else {\n      return null;\n    }\n  }\n  /**\n   * è·åå½åè¡\n   * @param attachmentInfoFieldPath udtå­æ®µ\n   */\n  private getCurrentRow(attachmentInfoFieldPath: string) {\n    const parentBindingPathArray = BindingPathConverter.toBindingPathArray(attachmentInfoFieldPath);\n    parentBindingPathArray.pop();\n    const bindingList: BindingList = this.frameContext.bindingData.getValue(parentBindingPathArray) as BindingList;\n    const currentItem = bindingList && bindingList.currentItem;\n    return currentItem;\n  }\n  /**\n   * è·åæå®éä»¶ä¿¡æ¯è¡¨çæå®è¡\n   * @param attachmentInfoFieldPath \n   * @param primaryValue \n   * @returns \n   */\n  private getSpecialRow(attachmentInfoFieldPath: string, primaryValue: string) {\n    const parentBindingPathArray = BindingPathConverter.toBindingPathArray(attachmentInfoFieldPath);\n    parentBindingPathArray.pop();\n    const bindingList: BindingList = this.frameContext.bindingData.getValue(parentBindingPathArray) as BindingList;\n    const currentItem = bindingList && bindingList.findById(primaryValue);\n    return currentItem;\n  }\n  /**\n   * è·ådataIdså¯¹åºEntityä¸çéä»¶idæ°ç»\n   */\n  private getAttachmentIdsByPathAndDataIds(attachmentInfoFieldPath: string, dataIds?: string[]): string[] {\n\n    // è§£æè·¯å¾\n    const parentBindingPathArray = BindingPathConverter.toBindingPathArray(attachmentInfoFieldPath);\n    const attachmentFieldName = parentBindingPathArray.pop();\n\n    // è·åéä»¶æå¨å®ä½çæ°æ®åè¡¨ï¼ä¸ä¼ édataIdsåæ°ï¼åè¿åå¨é¨\n    const entityListData = this.entityService.getEntityListData(parentBindingPathArray);\n    let filteredEntityListData = [];\n    if (dataIds && Array.isArray(dataIds) === true) {\n      filteredEntityListData = entityListData.filter((entityData: any) => {\n        return dataIds.indexOf(entityData.id) > -1;\n      });\n    } else {\n      filteredEntityListData = entityListData;\n    }\n\n    // è½¬æ¢ä¸ºéä»¶Idæ°ç»\n    const attachmentIds = [];\n    filteredEntityListData.forEach((entityData: any) => {\n      if (entityData[attachmentFieldName]) {\n        const attachmentId = entityData[attachmentFieldName]['attachmentId'];\n        if (attachmentId) {\n          attachmentIds.push(attachmentId);\n        }\n      }\n    });\n\n    return attachmentIds;\n  }\n}\n\nexport { AttachmentService };\n","import { Injectable, Optional } from '@angular/core';\nimport { Observable, forkJoin, Subject } from 'rxjs';\nimport { FUploadFileExtend } from '@farris/extend-file-upload';\nimport { FrameContext, CommandContext, BindingPathConverter, BindingList, BindingObject } from '@farris/devkit';\nimport { FormNotifyService } from '../form-notify.service';\nimport { AttachmentInfo, ATTACHMENT_ORDER_FIELD } from './types';\nimport { AttachmentDataService } from './attachment-data.service';\nimport { LanguageService } from '../languag.service';\nimport { EntityService } from '../entity-services/index';\nimport { ListDataService, SubListDataService } from '../data-services/index';\nimport { FormLoadingService } from '../form-loading/form-loading.service';\nimport { debounceTime, tap } from 'rxjs/operators';\n\n/**\n * éä»¶ä¸ä¼ \n * @summary\n * fileExtendï¼å½åæä»¶ä¸ä¼ æé¢è§ç»ä»¶ä¼ éè¿æ¥çæ°æ®ï¼\n * fileExtendFieldPathï¼å½åéä»¶UDTçå­æ®µè·¯å¾ï¼\n * attachmentInfoï¼å½åéä»¶UDTæéçä¿¡æ¯ï¼\n */\n@Injectable()\nclass FileService {\n  private subject: Subject<{ fileInfoFieldPath: string, configs: string }>;\n  private attachmentInfos: AttachmentInfo[];\n  /**\n   * æé å½æ°\n   */\n  constructor(\n    private frameContext: FrameContext,\n    private attachDataService: AttachmentDataService,\n    private entityService: EntityService,\n    private subListDataService: SubListDataService,\n    private notifyService: FormNotifyService,\n    private languageService: LanguageService,\n    private listDataService: ListDataService,\n    @Optional() private formLoadingService: FormLoadingService\n  ) {\n    this.subject = new Subject<{ fileInfoFieldPath: string, configs: string }>();\n    this.subject.pipe(debounceTime(500)).subscribe((data: { fileInfoFieldPath: string, configs: string }) => {\n      this.process(data.fileInfoFieldPath, data.configs);\n    });\n    this.attachmentInfos = [];\n  }\n\n  // #region ä¸ä¼ æä»¶\n\n  /**\n   * æ¹éæ·»å éä»¶è¡\n   */\n  public addFileRows(fileInfoFieldPath: string) {\n    const attachmentInfos = this.getAttachmentInfosToAddFromContext();\n    if (attachmentInfos.length === 0) {\n      this.notifyService.info('è¯·åä¸ä¼ éä»¶');\n    }\n    return this.attachDataService.updateRows(fileInfoFieldPath, attachmentInfos);\n  }\n  /**\n   * æ¹éæ·»å å¸¦éä»¶ç±»åçéä»¶è¡\n   * @param fileInfoFieldPath éä»¶udtå­æ®µ\n   * @param configs éä»¶æ©å±ä¿¡æ¯éç½® \n   * @description configséç½®å¦{\"billId\":\"{UISTATE~/root/billId}\",\"rowId\":\"{UISTATE~/root/rowId}\",\"attachmentType\":\"xueli\"}\n   */\n  public addFileRowsWithConfigs(fileInfoFieldPath: string, configs: string) {\n    const attachmentInfos = this.getAttachmentInfosToAddFromContext();\n    if (attachmentInfos.length === 0) {\n      this.notifyService.info('è¯·åä¸ä¼ éä»¶');\n    }\n    // let mapFields = null;\n    // if (typeof configs === 'string') {\n    //   // å»æé¦å°¾ç©ºæ ¼\n    //   configs = configs.trim();\n    // }\n    // if (configs.startsWith('{') && configs.endsWith('}')) {\n    //   try {\n    //     mapFields = JSON.parse(configs);\n    //   } catch {\n    //     throw new Error('éä»¶æ©å±ä¿¡æ¯éç½®ä¸æ¯åæ³çjsonå­ç¬¦ä¸²ã');\n    //   }\n    // } else {\n    //   throw new Error('éä»¶æ©å±ä¿¡æ¯éç½®ä¸æ¯åæ³çjsonå­ç¬¦ä¸²ã');\n    // }\n    this.attachmentInfos = this.attachmentInfos.concat(attachmentInfos);\n    this.subject.next({ fileInfoFieldPath, configs });\n    //return this.attachDataService.updateRowsWithConfigs(fileInfoFieldPath, attachmentInfos, mapFields);\n  }\n  private process(fileInfoFieldPath: string, configs: string) {\n    if (this.attachmentInfos && this.attachmentInfos.length > 0) {\n      const attachmentInfos = this.attachmentInfos.concat([]);\n      let mapFields = null;\n      if (typeof configs === 'string') {\n        // å»æé¦å°¾ç©ºæ ¼\n        configs = configs.trim();\n      }\n      if (configs.startsWith('{') && configs.endsWith('}')) {\n        try {\n          mapFields = JSON.parse(configs);\n        } catch {\n          throw new Error('éä»¶æ©å±ä¿¡æ¯éç½®ä¸æ¯åæ³çjsonå­ç¬¦ä¸²ã');\n        }\n      } else {\n        throw new Error('éä»¶æ©å±ä¿¡æ¯éç½®ä¸æ¯åæ³çjsonå­ç¬¦ä¸²ã');\n      }\n      this.attachDataService.updateRowsWithConfigs(fileInfoFieldPath, attachmentInfos, mapFields).pipe(\n        tap(() => {\n          this.attachmentInfos = this.attachmentInfos.filter(item => !attachmentInfos.find(attachmentInfo => attachmentInfo.attachmentId === item.attachmentId));\n          if (this.attachmentInfos.length > 0) {\n            this.process(fileInfoFieldPath, configs);\n          }\n        })\n      ).subscribe();\n    }\n\n  }\n\n  /**\n   * è·åè¦æ·»å çéä»¶ä¿¡æ¯æ°ç»\n   */\n  private getAttachmentInfosToAddFromContext(): AttachmentInfo[] {\n    const fileExtends = this.getFileExtendsFromContext();\n    const attachmentInfos = this.convertToAttachmentInfos(fileExtends);\n    return attachmentInfos;\n  }\n\n  /**\n   * å°éä»¶ä¸ä¼ ç»ä»¶è¿åçéä»¶ä¿¡æ¯è½¬æ¢ä¸ºæå¡å¨ç«¯éè¦çæ ¼å¼\n   */\n  private convertToAttachmentInfos(fileExtends: FUploadFileExtend[]): AttachmentInfo[] {\n    if (!fileExtends) {\n      return [];\n    }\n\n    const attachmentInfos: AttachmentInfo[] = [];\n    fileExtends.forEach((fUploadOutPut: FUploadFileExtend) => {\n      const attachmentInfo: AttachmentInfo = {\n        attachmentId: fUploadOutPut.extend.metadataId,\n        fileName: fUploadOutPut.extend.fileName,\n      };\n      attachmentInfos.push(attachmentInfo);\n    });\n    return attachmentInfos;\n  }\n\n  // #endregion\n\n\n  // #region å é¤æä»¶\n\n  /**\n   * å é¤éä»¶è¡\n   */\n  public removeFileRows(fileInfoFieldPath: string): Observable<any> {\n    const dataIds = this.getDataIdsToRemoveFromContext(fileInfoFieldPath);\n    if (dataIds.length === 0) {\n      this.notifyService.info('è¯·éæ©è¦å é¤çéä»¶');\n    }\n    const isSublist = fileInfoFieldPath.split('/').filter(p => p).length >= 2;\n    const removeObservables: Observable<any>[] = [];\n    if (isSublist) {\n      dataIds.forEach((dataId: string) => {\n        let removeObservable;\n        removeObservable = this.subListDataService.removeWithoutConfirm(dataId);\n        removeObservables.push(removeObservable);\n      });\n      return forkJoin(removeObservables);\n    } else {\n      return this.listDataService.removeRows(dataIds, false, null, false);\n    }\n  }\n\n  /**\n   * è·åè¦å é¤çæ°æ®\n   */\n  private getDataIdsToRemoveFromContext(fileExtendFieldPath: string): string[] {\n\n    // ä»ä¸ä¸æä¸­è·åè¦å¤ççéä»¶ä¿¡æ¯æ°ç»\n    const fileExtends = this.getFileExtendsFromContext();\n\n    // å°éä»¶æ°ç»è½¬æ¢ä¸ºå¯¹åºçæ°æ®id\n    const dataIds: string[] = [];\n    fileExtends.forEach((fileExtend: FUploadFileExtend) => {\n\n      // ä¸ä¼ å é¤åé¢è§å é¤ä¼ éè¿æ¥çfileIdçkeyå¯è½ä¸ä¸è´ï¼è¦åå¼å®¹\n      const fileId = fileExtend.extend.metadataId;\n      const dataId = this.convertFileIdToDataId(fileId, fileExtendFieldPath);\n      dataIds.push(dataId);\n    });\n    return dataIds;\n  }\n\n  /**\n   * æ ¹æ®è·¯å¾è·åéä»¶å­æ®µå¼æ°ç»\n   * @param fieldPath å­æ®µè·¯å¾\n   */\n  private convertFileIdToDataId(fileId: string, fileExtendFieldPath: string): string {\n\n    // è§£æè·¯å¾\n    const fileBindingPath = BindingPathConverter.toBindingPathArray(fileExtendFieldPath);\n    const fileFieldName = fileBindingPath.pop();\n    const fileListBindingPath = fileBindingPath;\n\n    // è·åéä»¶idæ°ç»\n    const entityListData = this.entityService.getEntityListData(fileListBindingPath);\n    const targetEntityData = entityListData.find((entityData: any) => {\n      if (entityData[fileFieldName]) {\n        const attachmentId = entityData[fileFieldName]['attachmentId'];\n        if (attachmentId === fileId) {\n          return true;\n        }\n      }\n    });\n\n    return targetEntityData.id;\n  }\n\n  // #endregion\n  //#region æä»¶æåº\n  /**\n   * æ´æ°éä»¶æåº\n   * @param attachmentInfoFieldPath éä»¶udtå­æ®µè·¯å¾\n   * @param ids éä»¶æåºåçéä»¶idæ°ç»\n   */\n  public updateOrder(attachmentInfoFieldPath: string, ids: string[]) {\n    if (!attachmentInfoFieldPath) {\n      throw new Error('éä»¶udtå­æ®µè·¯å¾åæ°ä¸è½ä¸ºç©º');\n    }\n    // æ¯æä»ä»£ç ä¸­ç´æ¥è°ç¨ï¼å¦æåæ°ä¸­ä¼ éäºidsåä½¿ç¨ï¼å¦åä½¿ç¨å½ä»¤ä¸ä¸æä¸­çäºä»¶åæ°\n    if (!ids) {\n      // è·åäºä»¶åæ°\n      const commandContext = this['context'] as CommandContext;\n      // ä¸ç»ä»¶çº¦å®äºä»¶åæ°ä¸ºæ°æ®ä¸»é®æ°ç»\n      ids = commandContext && commandContext.eventParam && commandContext.eventParam.data;\n    }\n    // å¯¹æ¶éçä¸»é®æ°ç»è¿è¡å¤æ­\n    if (!ids || !Array.isArray(ids)) {\n      return;\n    }\n    // å½åå½ä»¤æå¨ç»ä»¶çç»å®æ°æ®\n    const bindingList: BindingList = this.frameContext.bindingData.getList();\n    // æ ç»å®æ°æ®æ¶ä¸å¤ç\n    if (!bindingList || bindingList.length < 1) {\n      return;\n    }\n    // ç»ä¸è·åéä»¶udtä¿¡æ¯\n    const parentBindingPathArray = BindingPathConverter.toBindingPathArray(attachmentInfoFieldPath);\n    const attachmentField = parentBindingPathArray.pop();\n    // åºç°udtå­æ®µä¸å­å¨çæåµï¼è¯´æå½ä»¤ä¸­éä»¶udtå­æ®µéç½®éè¯¯ævoä¸­æ²¡æéä»¶udtãæ§å¶å¨ä¸å¼å®¹éè¯¯ï¼æ­¤å¤å¤æ­åªä¸ºé»æ­¢åç»­çéå\n    if (!attachmentField) {\n      throw new Error('æ æ³è·åéä»¶udtå­æ®µï¼è¯·ç¡®è®¤å½ä»¤ä¸­éä»¶udtå­æ®µè·¯å¾éç½®æ­£ç¡®ï¼ä¸è§å¾æ¨¡åä¸­å­å¨éä»¶udtå­æ®µ');\n    }\n    const data = bindingList.toJSON();\n    // æ´æ°ç»å®æ°æ®ä¸­éä»¶udtå­æ®µä¸­æåºå­æ®µçå¼,ä»æ´æ°æéä»¶çè¡\n    ids.forEach((id: string, index: number) => {\n      const item = data.find(item => item && item[attachmentField] && item[attachmentField]['attachmentId'] === id);\n      const primaryKeyValue = item && item.id;\n      if (!primaryKeyValue) {\n        return;\n      }\n      const bindingObject = bindingList.findById(primaryKeyValue);\n      if (bindingObject) {\n        // éä»¶udtå¯¹è±¡\n        const attachment = bindingObject[attachmentField] as BindingObject;\n        if (attachment) {\n          // è·åæ§å¼\n          const order = attachment.getValue(ATTACHMENT_ORDER_FIELD);\n          if (order !== index) {\n            // æ´æ°æåº\n            attachment.setValue(ATTACHMENT_ORDER_FIELD, index, true, true);\n          }\n        }\n      }\n    });\n  }\n  //#endregion\n\n  // #region å¶ä»å·¥å·æ¹æ³\n\n  /**\n   * ä»ä¸ä¸æä¸­è·åè¦å¤ççéä»¶ä¿¡æ¯æ°ç»\n   * @summary\n   * ä¸ºäºç»ä¸åä¸ªåå¤ä¸ªéä»¶çå¤çæ¹å¼ï¼ç»ä¸åè£ä¸ºæ°ç»\n   */\n  private getFileExtendsFromContext(): FUploadFileExtend[] {\n\n    const commandContext = this['context'] as CommandContext;\n    const eventParam = commandContext.eventParam;\n    if (!eventParam) {\n      return [];\n    }\n\n    let fileExtends: any[];\n    if (Array.isArray(eventParam) === false) {\n      fileExtends = [eventParam];\n    } else {\n      fileExtends = eventParam.concat([]);\n    }\n\n    return fileExtends as FUploadFileExtend[];\n  }\n  // #endregion\n}\n\nexport { FileService };\n","import { Injectable, ComponentFactoryResolver, ReflectiveInjector, Provider, ComponentRef, InjectFlags, NgModuleFactory, Injector, Optional } from '@angular/core';\nimport { BsModalService, ModalOptions } from '@farris/ui-modal';\nimport { FarrisFormService } from './farris-form.service';\nimport { FrameContext, FrameComponent, BindingList } from '@farris/devkit';\nimport { of, Observable, Subject } from 'rxjs';\nimport { LanguageService } from './languag.service';\nimport { switchMap } from 'rxjs/operators';\ndeclare const System: any;\n/**\n * å¼¹çªæå¡\n * @scope FormModule\n */\n@Injectable()\nclass DialogService {\n\n  private _providers: Provider[] = [];\n\n  private languageService: LanguageService;\n  private modalRef: any;\n  private modals: any = {};\n\n  constructor(\n    private modalService: BsModalService,\n    private farrisFormService: FarrisFormService,\n    private _componentFactoryResolver: ComponentFactoryResolver,\n    private frameContext?: FrameContext,\n    @Optional() private injector?: Injector\n  ) {\n    this.setLanguageService();\n  }\n\n  /**\n   * è®¾ç½®è¯­è¨æå¡\n   */\n  private setLanguageService() {\n\n    // FrameContextä¸ä¸å®å­å¨ï¼ä¸è½ç´æ¥ç¨\n    const frameContext = this.getFrameContext();\n    if (frameContext) {\n      const injector = this.frameContext.injector;\n      this.languageService = injector.get<LanguageService>(LanguageService, null, InjectFlags.Optional);\n    }\n\n    if (!this.languageService) {\n      this.languageService = LanguageService.getInstance();\n    }\n  }\n\n  /**\n   * å¼å®¹æ§å¼¹çªï¼è·åframeContext\n   */\n  private getFrameContext() {\n    if (this.frameContext) {\n      return this.frameContext\n    }\n    if (this['context'] && this['context']['frameContext']) {\n      return this['context']['frameContext'];\n    }\n    return null;\n  }\n  /**\n   * å¼å®¹æ§å¼¹çªï¼è·åComponentFactoryResolver\n   */\n  private getComponentFactoryResolver() {\n    const frameContext = this.getFrameContext();\n    let componentFactoryResolver: any;\n    if (frameContext) {\n      componentFactoryResolver = frameContext.injector.get(ComponentFactoryResolver);\n    }\n    return componentFactoryResolver;\n  }\n\n  /**\n   * è·åconfigè½¬æ¢æå¯¹è±¡ç±»åçéç½®\n   * @param config éç½®é¡¹\n   */\n  private getObjectTypeConfig(config: any) {\n    let objectTypeConfig: any\n    if (typeof config === 'string') {\n      if (config.length) {\n        try {\n          objectTypeConfig = JSON.parse(config);\n        } catch {\n          throw new Error(config + 'ä¸æ¯åæ³çjsonå­ç¬¦ä¸²');\n        }\n      } else {\n        objectTypeConfig = {};\n      }\n    } else if (typeof config === 'object') {\n      objectTypeConfig = Object.assign({}, config);\n    } else {\n      throw new Error('å¡«åå¯¹è±¡æ ¼å¼æjsonå­ç¬¦ä¸²');\n    }\n    return objectTypeConfig;\n  }\n\n  /**\n   * åå»ºæ¨¡ææ¡åç»ä»¶å®ä¾ï¼å¹¶è¿åæ¨¡ææ¡å®ä¾ï¼åäºå¼å®¹èè¡¨åå¤ç\n   * @param config å¼¹çªéç½®\n   * @param compnent å¼¹çªåç»ä»¶\n   * @param uiStateObject ç»å®å¼¹çªåç»ä»¶uiState\n   */\n  private createModalComponentRef(config: any, component: any, uiStateObject: any) {\n    let componentRef: any;\n    let modalRef: any;\n    const frameContext = this.getFrameContext();\n    const componentFactoryResolver = this.getComponentFactoryResolver();\n    if (frameContext && componentFactoryResolver) {\n      const contentCmptFactory = componentFactoryResolver.resolveComponentFactory(component);\n      const modalContentInjector = ReflectiveInjector.resolveAndCreate([...this._providers], frameContext.injector);\n      componentRef = contentCmptFactory.create(modalContentInjector);\n      if (componentRef && componentRef.instance && componentRef.instance.viewModel && componentRef.instance.viewModel.uiState) {\n        if (typeof uiStateObject === 'object' && Object.keys(uiStateObject).length) {\n          Object.keys(uiStateObject).forEach(item => {\n            componentRef.instance.viewModel.uiState.setPropertyValue(item, uiStateObject[item]);\n          });\n        }\n        // éå isDialogåæ°\n        componentRef.instance.viewModel.uiState.setPropertyValue('DEVKIT_DIALOG', true);\n      }\n      modalRef = this.modalService.show(componentRef, config);\n    } else {\n      modalRef = this.modalService.show(component, config);\n    }\n    return modalRef;\n  }\n  /**\n   * \n   * @param config æ¨¡ææ¡æ¬èº«éç½®\n   * @param modalId æ¨¡ææ¡åç»ä»¶çid\n   * @param uiStateConfig æ¨¡ææ¡åç»ä»¶uiStateä¸çå­æ®µåå¼\n   */\n  public openModal(config: any = {}, modalId: string, uiStateConfig: any = {}, callback?: (modalRef: any) => any) {\n\n    const configObj = this.getObjectTypeConfig(config);\n    const uiStateObject = this.getObjectTypeConfig(uiStateConfig);\n    let innerCompopnent = this.farrisFormService.getControls(modalId);\n    let modalRef: any;\n    let modalConfig: any = {\n      title: this.languageService.defaultDialogTitle,\n      width: 760,\n      height: 450,\n      showButtons: false\n    };\n    modalConfig = Object.assign(modalConfig, configObj);\n    const onClosingHandler = modalConfig.beforeClose;\n    // tslint:disable: no-string-literal\n    const cancelChanges = modalConfig['cancelChanges'] || false;\n    modalConfig.beforeClose = (ref) => {\n      // if (ref && ref.modalRef && ref.modalRef.content) {\n      //   ref.modalRef.content.isDialogRootComponent = false;\n      // }\n      if (!!onClosingHandler && typeof onClosingHandler === 'function') {\n        return onClosingHandler(ref).pipe(\n          switchMap(result => {\n            if (result) {\n              if (cancelChanges) {\n                return this.cancelChanges(ref);\n              }\n            }\n            return of(result);\n          })\n        );\n      }\n      if (cancelChanges) {\n        return this.cancelChanges(ref);\n      } else {\n        return of(true);\n      }\n    };\n    const remote = modalConfig.remote || false;\n    if (remote) {\n      this.createRemoteForm(modalConfig, uiStateObject).subscribe(\n        (modalRef: any) => {\n          this.modalRef = modalRef;\n          if (modalRef && !!modalRef.content) {\n            modalRef.content.isDialogRootComponent = true;\n            modalRef.content.dialogRef = modalRef;\n          }\n          callback(modalRef);\n        }\n      );\n    } else {\n      if (!innerCompopnent) {\n        console.error(`è·åæ§ä»¶å¤±è´¥ï¼modalId=${modalId}`);\n        return;\n      }\n      if (typeof innerCompopnent === 'string') {\n        modalConfig.dialogType = 'iframe';\n        modalRef = this.modalService.show(innerCompopnent, modalConfig);\n      } else if (typeof innerCompopnent === 'function') {\n        modalRef = this.createModalComponentRef(modalConfig, innerCompopnent, uiStateObject);\n      } else if (typeof innerCompopnent === 'object') {\n        // å¦ææ¯å¯¹è±¡ ä¸ä½¿ç¨ç¬ç«jså è½½\n        // {\"useIsolateJs\":true,\"modalInstance\":f()}\n        if (innerCompopnent.useIsolateJs) {\n          const parameter = {\n            injector: this.injector,\n            uiState: uiStateObject,\n            modalService: this.modalService,\n            dialogServiceInstance: this,\n            eventBus: this.frameContext.getVirtualRootFrameContext().eventBus,\n            componentCallback: this.componentModify,\n            modalInstanceCallback: this.modalInstanceCallback\n          };\n          // ä¼å¨åé¨è¿è¡\n          return innerCompopnent[\"modalInstance\"](modalConfig, parameter);\n\n        } else {\n          modalRef = this.modalService.show(innerCompopnent, modalConfig);\n        }\n      }\n\n      this.modalRef = modalRef;\n      if (modalRef && !!modalRef.content) {\n        modalRef.content.isDialogRootComponent = true;\n        modalRef.content.dialogRef = modalRef;\n      }\n      return modalRef;\n    }\n  }\n\n  private componentModify(cmpRef: any, parameter: {\n    uistate: any\n  }) {\n    if (cmpRef && cmpRef.instance && cmpRef.instance.viewModel && cmpRef.instance.viewModel.uiState) {\n      if (parameter.uistate && typeof parameter.uistate === \"string\") {\n        parameter.uistate = JSON.parse(parameter.uistate);\n      }\n      if (typeof parameter.uistate === 'object' && Object.keys(parameter.uistate).length) {\n        Object.keys(parameter.uistate).forEach(item => {\n          cmpRef.instance.viewModel.uiState.setPropertyValue(item, parameter.uistate[item]);\n        });\n      }\n      // éå isDialogåæ°\n      cmpRef.instance.viewModel.uiState.setPropertyValue('DEVKIT_DIALOG', true);\n    }\n  }\n\n  private modalInstanceCallback(cmpRef: any, options: any, parameter: any) {\n    if (parameter && parameter.modalService) {\n      const modalRef = parameter.modalService.show(cmpRef, options);\n      if (modalRef && !!modalRef.content) {\n        modalRef.content.isDialogRootComponent = true;\n        modalRef.content.dialogRef = modalRef;\n      }\n      return modalRef;\n    }\n  }\n\n  /**\n   * æå¼ç±»å¸®å©è¡¨å\n   * @param frameId \n   * @param params \n   * @param configs \n   * @description å¼¹åºè¡¨ååå¼¹åºè¿ç«¯è¡¨ååºå«ä¸ºå¼¹åºè¡¨åéè¦éç½®å­æ®µæ å°\n   */\n  public openHelpModal(frameId: string, params: string, configs?: any) {\n    const events = this['context']['eventParam'] || {};\n    // å¡çåºæ¯ä¼ éè¿æ¥çäºä»¶æ¯èªå®ä¹å¯¹è±¡ï¼åå«eventåoptionsãåè¡¨åºæ¯ä¼ éè¿æ¥çäºä»¶åæ°æ¯æ®éäºä»¶åæ°ï¼å¨åæ°ä¸­æºå¸¦äºeditor.options\n    const event = events.event || events;\n    const options = events.options || events.editor && events.editor.options || {};\n    const context = events && events.context;\n    const subject = new Subject<any>();\n    // modalIdå¨ä¸¤ç§åºæ¯ä¸é½éè¦ï¼ç¨æ¥åºåå®ä¾\n    const { modalId = null } = options;\n    if (!configs) {\n      configs = '{}';\n    }\n    if (typeof configs === 'string' && configs.length > 0) {\n      configs = JSON.parse(configs);\n    }\n    const { remote = false, currentRow = false, areaResponse = undefined } = configs || {};\n    // æ¯æareaResponseéç½®\n    if (areaResponse !== undefined && options.areaResponse === undefined) {\n      options.areaResponse = areaResponse;\n    }\n    if (remote) {\n      const mapFields = configs.mapFields || {};\n      options.remote = remote + '?v=' + new Date().valueOf();\n      this.openModal(options, modalId, params, (dialogRef: any) => {\n        // æ°å¢eventåæ°ï¼ä¸ºäºä»¥åè°ç¨eventä¸­çformControlä»¥ééåè¡¨ä¸­çæºè½è¾å¥æ¡å¼¹åºè¡¨åï¼\n        this.modals[modalId] = { subject, frameId: frameId, mapFields, dialogRef, currentRow, event: event, context };\n      });\n    } else {\n      const dialogRef = this.openModal(options, modalId, params);\n      const mapFields = options.mapFields || {};\n      this.modals[modalId] = { subject, frameId: frameId, mapFields, dialogRef, currentRow, event: event, context };\n    }\n    return subject;\n  }\n\n  /**\n   * æå¼å¸¦åè°çå¼¹çª\n   * @param frameId frameId\n   * @param params åæ°\n   * @param configs éç½®\n   * @returns \n   */\n  public openCallbackableModal(frameId: string, params?: string, configs?: any) {\n    if (!configs) {\n      configs = '{}';\n    }\n    if (typeof configs === 'string') {\n      configs = JSON.parse(configs);\n    }\n    const events = this['context'] && this['context']['eventParam'] || {};\n    const options = events.options;\n    options.showButtons = true;\n    options.buttons = [\n      {\n        text: this.languageService.confirm, cls: 'btn btn-primary', handle: (event: any) => {\n          const { modalId = null } = options || {};\n          if (modalId) {\n            const modal = this.modals[modalId];\n            const { subject = null, dialogRef = null, frameId = null, handle = null, currentRow = false } = modal || {};\n            const formCmp = dialogRef.content; // å¼¹çªè¡¨åå®ä¾\n            if (!formCmp) {\n              throw new Error('ä¸æ¯æçè¡¨åç±»å');\n            }\n            let selectedItems = [];\n            if (currentRow === true) {\n              let frameComtext: FrameContext;\n              if (formCmp.context) {\n                frameComtext = formCmp.context.appContext.frameContextManager.getFrameContextById(frameId) as FrameContext;\n              } else {\n                frameComtext = formCmp.appContext.frameContextManager.getFrameContextById(frameId) as FrameContext;\n              }\n\n              if (!frameComtext) {\n                throw new Error(`æ æçframeIdï¼${frameId}ï¼è¯·ç¡®è®¤å½ä»¤ä¸­frameIdæ­£ç¡®ã`);\n              }\n              const bindingList = frameComtext.bindingData.getList() as BindingList;\n              const item = bindingList && bindingList.currentItem && bindingList.currentItem.toJSON();\n              selectedItems = [item];\n            } else {\n              let rows: Map<string, any>;\n              // å¦æcontextä¸ºç©º é£ä¹å°è¯ä»å¯¹åºçappcontextè¯»åï¼ä¸»è¦ç®çæ¯ä¸ºäºè§£æè¡¨åçå¼¹åº\n              if (formCmp.context) {\n                rows = formCmp.context.appContext.frameContextManager.getFrameContextById(frameId).uiState.rows || new Map<string, any>();\n              } else {\n                rows = formCmp.appContext.frameContextManager.getFrameContextById(frameId).uiState.rows || new Map<string, any>();\n              }\n\n              selectedItems = Array.from(rows.values());\n            }\n            if (typeof handle === 'function') {\n              handle(selectedItems);\n            }\n            if (subject) {\n              subject.next();\n            }\n            dialogRef.close(options);\n          }\n        }\n      },\n      { text: this.languageService.cancel, cls: 'btn', handle: (event: any) => this.cancel(options) }\n    ];\n\n    const subject = new Subject<any>();\n    const { modalId = null } = options;\n    const { remote = null, currentRow = false, areaResponse = undefined } = configs;\n    const handle = options.handle;\n    // æ¯æareaResponseéç½®\n    if (areaResponse !== undefined && options.areaResponse === undefined) {\n      options.areaResponse = areaResponse;\n    }\n    if (remote) {\n      options.remote = remote + '?v=' + new Date().valueOf();\n      this.openModal(options, modalId, params, (dialogRef: any) => {\n        this.modals[modalId] = { subject, frameId: frameId, dialogRef, handle, currentRow, event: events.event };\n      });\n    } else {\n      const dialogRef = this.openModal(options, modalId, params);\n      this.modals[modalId] = { subject, frameId: frameId, dialogRef, handle, currentRow, event: events.event };\n    }\n    return subject;\n  }\n\n  /**\n   * ç¡®è®¤æé®äºä»¶\n   * @param args \n   */\n  public confirm() {\n    const events = this['context'] && this['context']['eventParam'] || {};\n    const { modalId = null } = events || {};\n    if (modalId) {\n      const modal = this.modals[modalId];\n      const { subject = null, dialogRef = null, mapFields = {}, frameId = null, currentRow = false, event = null, context = null } = modal || {};\n      const formCmp = dialogRef.content; // å¼¹çªè¡¨åå®ä¾\n      if (!formCmp) {\n        throw new Error('ä¸æ¯æçè¡¨åç±»å');\n      }\n      // const selectedIds = formCmp.context.appContext.frameContextManager.getFrameContextById(frameId).uiState.ids;\n\n      let selectedItems = [];\n      if (currentRow === true) {\n        const frameComtext = formCmp.context.appContext.frameContextManager.getFrameContextById(frameId) as FrameContext;\n        if (!frameComtext) {\n          throw new Error(`æ æçframeIdï¼${frameId}ï¼è¯·ç¡®è®¤å½ä»¤ä¸­frameIdæ­£ç¡®ã`);\n        }\n        const bindingList = frameComtext.bindingData.getList() as BindingList;\n        const item = bindingList && bindingList.currentItem && bindingList.currentItem.toJSON();\n        if (item && Object.keys(item).length > 0) {\n          selectedItems = [item];\n        }\n      } else {\n        const rows: Map<string, any> = formCmp.context.appContext.frameContextManager.getFrameContextById(frameId).uiState.rows || new Map<string, any>();\n        selectedItems = Array.from(rows.values());\n      }\n\n      // æ å°å­æ®µæ°æ®\n      // è·åè§¦åå¼¹æ¡çç¼è¾å¨çå­æ®µåç§°\n      let editorField = undefined;\n      if (event && event.editor && event.editor.column) {\n        editorField = event.editor.column.field;\n      }\n      if (selectedItems && mapFields) {\n        Object.keys(mapFields).forEach(k => {\n          const targetField: string = mapFields[k];\n          const sourceKeyArray = k.split('.').filter(p => p) || [];\n          const targetValue = selectedItems.map(r => {\n            return sourceKeyArray.reduce((target, key) => {\n              if (target && (target.hasOwnProperty(key) || target['__proto__'].hasOwnProperty(key))) {\n                return target[key];\n              } else {\n                return '';\n              }\n            }, r);\n          }).join(',');\n          if (targetField) {\n            const bindingPaths = this.frameContext.viewModel.bindingPath.split('/').filter(p => p);\n            const targetFields = targetField.split(',').filter(p => p);\n            targetFields.forEach(target => {\n              if (context) {\n                this.setValueByPath(context, target, targetValue);\n              } else {\n                const targetPath = target.split('.');\n                this.frameContext.bindingData.setValue(bindingPaths.concat(targetPath), targetValue, true, true);\n              }\n\n            });\n          }\n        })\n      }\n      if (subject) {\n        subject.next();\n      }\n      dialogRef.close();\n    }\n  }\n  /**\n   * åæ¶æé®äºä»¶\n   * @param args \n   */\n  public cancel(event?: any) {\n    const events = event || this['context'] && this['context']['eventParam'] || {};\n    const { modalId = null } = events || {};\n    if (modalId) {\n      const modal = this.modals[modalId];\n      const { subject = null, dialogRef = null } = modal || {};\n      if (subject) {\n        subject.next();\n      }\n      if (dialogRef) {\n        dialogRef.close();\n      }\n    }\n  }\n  /**\n   * åæ¶æå¡å¨åæ´é\n   */\n  private cancelChanges(ref: any): Observable<boolean> {\n    if (ref && ref.modalRef && ref.modalRef.content) {\n      const component: FrameComponent = ref.modalRef.content as FrameComponent;\n      if (component && component.context) {\n        const repository = component.context.repository || null;\n        if (repository) {\n          return repository.cancelChanges().pipe(switchMap(() => of(true)));\n        }\n      }\n    }\n    return of(true);\n  }\n  /**\n   * å³é­è¯¥å¼¹çª\n   */\n  closeModal() {\n    if (this.modalRef) {\n      this.modalRef.close();\n    }\n  }\n  /**\n   * åå»ºè¿ç¨è¡¨åå®ä¾\n   * @param options dialogéç½®\n   * @param uiState uistate\n   */\n  private createRemoteForm(options: any, uiState: any): Subject<any> {\n    const remote = options.remote || false;\n    const subject = new Subject<any>();\n    if (remote) {\n      let moduleName = options.moduleName || null;\n      System.import(remote).then((module: any) => {\n        if (!moduleName) {\n          moduleName = Object.keys(module).pop();\n        }\n        const moduleFactory = module[moduleName] as NgModuleFactory<any>;\n        const moduleRef = moduleFactory.create(this.injector);\n        const entryComponent = moduleRef['_bootstrapComponents'][0];\n        if (entryComponent) {\n          const compFactory = moduleRef.componentFactoryResolver.resolveComponentFactory(entryComponent);\n          const componentRef: ComponentRef<any> = compFactory.create(this.injector);\n\n          if (componentRef && componentRef.instance && componentRef.instance.viewModel && componentRef.instance.viewModel.uiState) {\n            if (typeof uiState === 'object' && Object.keys(uiState).length) {\n              Object.keys(uiState).forEach(item => {\n                componentRef.instance.viewModel.uiState.setPropertyValue(item, uiState[item]);\n              });\n            }\n            // éå isDialogåæ°\n            componentRef.instance.viewModel.uiState.setPropertyValue('DEVKIT_DIALOG', true);\n          }\n          const modalRef = this.modalService.show(componentRef, options);\n          subject.next(modalRef);\n        } else {\n          throw new Error(`æ æ³æ¾å°å¥å£è¡¨åï¼`);\n        }\n      });\n    }\n    return subject;\n  }\n  private setValueByPath(target: object, path: string, value: any) {\n    if (target) {\n      const paths = path.split('.');\n      if (paths.length <= 1) {\n        target[path] = value;\n      } else {\n        paths.slice(0, -1).reduce((prev, path) => {\n          if (!(prev.hasOwnProperty(path) || prev['__proto__'].hasOwnProperty(path))) {\n            prev[path] = {};\n          }\n          return prev[path];\n        }, target)[paths[paths.length - 1]] = value;\n      }\n    }\n  }\n}\n\nexport { DialogService };\n","import { Injectable, Optional } from '@angular/core';\nimport { Observable, of } from 'rxjs';\nimport { switchMap } from 'rxjs/operators';\nimport { FarrisSidebarService } from '@farris/ui-sidebar';\nimport { Entity, FrameContext } from '@farris/devkit';\nimport { BefRepository } from '@farris/bef';\nimport { FormMessageService } from './form-message.service';\nimport { LanguageService } from './languag.service';\n\n\n/**\n * ä¾§è¾¹æ æå¡\n * @scope FrameComponent\n */\n@Injectable()\nclass SidebarService {\n\n  private get repository(): BefRepository<Entity> {\n    return this.frameContext.repository as BefRepository<Entity>;\n  }\n\n  constructor(\n    private frameContext: FrameContext,\n    private sidebarUIService: FarrisSidebarService,\n    private messageService: FormMessageService,\n    @Optional() private languageService: LanguageService,\n  ) {\n    if (!this.languageService) {\n      this.languageService = LanguageService.getInstance();\n    }\n  }\n\n  openSidebar() {\n    this.sidebarUIService.sendIsOpen(true);\n  }\n\n  closeSidebar() {\n    this.sidebarUIService.sendIsOpen(false);\n  }\n\n  /**\n   * å³é­åååæ¶åæ´\n   */\n  confirmBeforeClosingSidebar(): Observable<boolean> {\n\n    // æ£æ¥æ¯å¦æåæ´ï¼æ²¡æåæ´ç´æ¥å³é­\n    const ifChangesExist = this.repository.entityManager.checkAllEntityChanges();\n    if (!ifChangesExist) {\n      return of(true);\n    }\n\n    // ç¡®è®¤æ¯å¦å³é­\n    const confirm$ = this.messageService.question(this.languageService['exitWithoutSave']);\n    const result$ = confirm$.pipe(\n      switchMap((confirmResult: boolean) => {\n        if (confirmResult === false) {\n          return of(false);\n        } else {\n          return of(true);\n        }\n      })\n    );\n\n    return result$;\n  }\n\n  /**\n   * ç»§ç»­å³é­ä¾§è¾¹æ \n   */\n  public continueClosingSidebar(): Observable<boolean> {\n    return of(true);\n  }\n\n  /**\n   * é»æ­¢ä¾§è¾¹æ å³é­\n   */\n  public stopClosingSidebar(): Observable<boolean> {\n    return of(false);\n  }\n}\n\nexport { SidebarService };\n","import { Injectable } from '@angular/core';\n\n/**\n * è¿æ»¤æ¡ä»¶æå¡\n * @scope FormModule\n */\n@Injectable()\nclass FilterService {\n\n  /**\n   * ç§»é¤åå«ç¹æ®å¼çè¿æ»¤æ¡ä»¶\n   * @todoï¼åå®filtersä¸ºå­ç¬¦ä¸²ï¼å¾è®¾è®¡æ¶æ¯ææ°ç»åæ°åä¸èµ·è°æ´\n   */\n  public stripFiltersWithSpecialValue(filters: string, specialValues: string): string {\n    if (!filters || !specialValues) {\n      return filters;\n    }\n\n    const filterArray: any[] = JSON.parse(filters);\n    const strippedFilterArray = filterArray.filter((filter: any) => {\n      const filterValue = this.getFilterValue(filter);\n      return specialValues.indexOf(filterValue) === -1;\n    });\n\n    return JSON.stringify(strippedFilterArray);\n  }\n\n  /**\n   * è·åè¿æ»¤æ¡ä»¶çå¼\n   * @todoï¼æ²¡æFilteræ¥å£å®ä¹ï¼ç®åäº§åé¨å¤§å°åä¸ä¸è´ã\n   */\n  private getFilterValue(filter: any) {\n    return filter.Value || filter.value;\n  }\n}\n\nexport { FilterService };\n","import { Injectable, InjectionToken, Inject, Optional } from '@angular/core';\nexport const FARRIS_FORM_COMPONENTS = new InjectionToken<{ [key: string]: any }>('è¡¨åå¼¹åºçªå£æéèç»ä»¶åè¡¨');\n\n/**\n * è¡¨åæå¡\n * @scope FormModule\n */\n@Injectable()\nexport class ComponentManagerService {\n\n  private controls: { [key: string]: any } = {};\n\n  appendControl(key: string, cmpIns: any) {\n    this.controls[key] = cmpIns;\n  }\n\n  getControl(key: string) {\n    if (this.controls[key]) {\n      return this.controls[key];\n    } else {\n      console.warn(`æªæ¾å°Keyä¸º${key}çç»ä»¶ï¼`);\n      return null;\n    }\n  }\n  public clear(key?: string) {\n    if (key) {\n      this.controls[key] = null;\n      delete this.controls[key];\n    } else {\n      this.controls = {};\n    }\n  }\n}\n","import { Observable, of,Subject } from \"rxjs\";\n\nexport class AuthorityService {\n    queryOperationAuthority(operationIds: Array<string>): Observable<Map<string, boolean>>{\n        var queryResult = new Map<string, boolean>();\n        var i=0;\n        for(var j=0; j<operationIds.length; j++) {\n            queryResult.set(operationIds[j], i%2==0? true:false);\n            i++;            \n        }\n\n        var dummyResult = new Subject<Map<string, boolean>>();\n        setTimeout(() => {\n            dummyResult.next(queryResult);\n        }, 0);\n\n        return dummyResult;\n    }\n}\n","import { AuthorityService } from './authority.service';\nimport {Observable, empty} from 'rxjs';\nimport { map } from 'rxjs/operators';\n\n/**\n * æé\n */\nexport class Authority {\n    \n    constructor() {\n        this.operationLabelMap = new Map<string, string>();\n        this.authOfLabel = new Map<string, boolean>();\n    }\n\n    /**\n     * ä»labelå°æä½æéIDçæ å°ï¼labelå¯ä»¥æ¯button idç­\n     */\n    private operationLabelMap: Map<string, string>;\n\n    /**\n     * è®°å½labelå¯¹äºçæä½æéï¼æ¯å¦éè¿\n     */\n    private authOfLabel: Map<string, boolean>;\n\n    /**\n     * è®¾ç½®labelå°operation idçæ å°\n     * @param labelMap \n     */\n    protected setLabelMap(labelMap: Object) {\n        for(var i in labelMap) {\n            this.operationLabelMap.set(i, labelMap[i]);\n        }\n        this.operationLabelMap.forEach((opId, label) => {\n            this[label] = false;\n        });        \n    }\n    \n    /**\n     * åå§åæéçå¼\n     */\n    initialize(authorityService: AuthorityService): Observable<void> {\n        if(this.operationLabelMap && this.operationLabelMap.size>0) {\n            return authorityService.queryOperationAuthority(Array.from(this.operationLabelMap.values())).pipe(\n                map((operationAuth) => {\n                    this.operationLabelMap.forEach((opId, label) => {\n                        this.authOfLabel.set(label, operationAuth.has(opId) ? operationAuth.get(opId) : false);\n                    });\n                })\n            );\n        }else{\n            return empty();\n        }\n    }\n\n    /**\n     * è¿åæä½æéï¼å³ç¨æ·æ¯å¦æ¥æLabelæå¯¹åºçæé\n     * @param label æ ç­¾ï¼å¯ä»¥æ¯button idç­\n     */\n    hasOperation(label:string) {        \n        return this.authOfLabel.has(label) && this.authOfLabel.get(label);\n    }\n\n    // è¿åå­æ®µæé\n    // hasField(field:string)\n}","/*\n * @Author: aalizzwell\n * @Date: 2019-05-30 10:35:09\n * @Last Modified by: aalizzwell\n * @Last Modified time: 2019-06-15 19:22:13\n */\nimport { Injectable, Optional } from '@angular/core';\nimport { LanguageService } from './languag.service';\nimport { FormErrorService } from './error/form-error.service';\nimport { IExceptionHandler, AppContext } from '@farris/devkit';\n\n/**\n * é»è®¤å¼å¸¸å¤çå¨\n * @scope æ²¡ææä¾å¯¹åºProvider\n */\n@Injectable()\nclass ExceptionHandler implements IExceptionHandler {\n  private appContext: AppContext = null;\n  constructor(\n    private formErrorService: FormErrorService,\n    @Optional() private languageService: LanguageService,\n    private applicationContext: AppContext,\n  ) {\n    if (this.languageService == null) {\n      this.languageService = LanguageService.getInstance();\n    }\n  }\n  public setContext(applicationContext: AppContext) {\n    this.appContext = applicationContext;\n  }\n  public handle(error: any) {\n    if (!!this.formErrorService) {\n      this.formErrorService.exception(this.languageService.loadFailed, error);\n    }\n  }\n}\n\nexport { ExceptionHandler };\n","import { Provider } from '@angular/core';\nimport { FormLoadingService } from '../form-loading/form-loading.service';\nimport { FormMessageService } from '../form-message.service';\nimport { HideEventService } from '../form-loading/hide-event.service';\nimport { FormNotifyService } from '../form-notify.service';\nimport { FormErrorService } from '../error/form-error.service';\nimport { CheckService } from '../check.service';\nimport { DataCheckService } from '../data-check.service';\n\nimport { EventService } from '../event.service';\nimport { MenuStateService } from '../menu-state.service';\nimport { RouterService } from '../router.service';\nimport { UIStateService } from '../ui-state.service';\nimport { StateMachineService } from '../state-machine.service';\nimport { ValidationService } from '../validation.service';\nimport { BindingDataService } from '../binding-data.service';\nimport { CommandService } from '../command-service';\n\nimport { QuerystringService } from '../querystring';\nimport { RuntimeFrameworkService } from '../rtf-service';\nimport { NavigationEventService } from '../navigation-event.service';\nimport { NavigationService } from '../navigation.service';\nimport { NavigationMiddlewareService } from '../navigation-middleware.service';\nimport { GridMiddlewareService } from '../grid.middleware.service';\nimport { ParamService } from '../param.service';\n\nimport { BeActionService } from '../be-action.service';\nimport { ApproveService } from '../approve.service';\nimport { PrintService } from '../print.service';\nimport { AttachmentDataService, AttachmentService } from '../attachment/index';\nimport { ApplicationParamService } from '../application-param.service';\nimport {\n  EntityTraversingService, EntityManipulationService, EntityAggregationService,\n  EntityListService, EntityService\n} from '../entity-services/index';\nimport { LanguageService } from '../languag.service';\nimport { DialogService } from '../dialog.service';\nimport { SidebarService } from '../sidebar-service';\nimport { FarrisFormService } from '../farris-form.service';\nimport { FilterService } from '../filter-service';\nimport { ChangeItemService } from '../change-item.service';\n\n// data-services\nimport { ListDataService } from '../data-services/list-data.service';\nimport { TreeDataService } from '../data-services/tree-data.service';\nimport { CardDataService } from '../data-services/card-data.service';\nimport { SubListDataService } from '../data-services/sub-list-data.service';\nimport { KeybindingService } from '../keybinding-service';\nimport { FocusInvalidService } from '../focus-invalid.service';\nimport { SubTreeDataService } from '../data-services/sub-tree-data-service';\n\n/**\n * éççèProviders\n */\nconst FARRIS_COMMAND_SERVICE_PROVIDERS: Provider[] = [\n\n  // è¡¨åæ¨¡åæ³¨å¥ï¼18ä¸ªï¼\n  FormLoadingService,\n  FormMessageService,\n  FormNotifyService,\n  FormErrorService,\n  CheckService,\n  DataCheckService,\n  EventService,\n  FilterService,\n  KeybindingService,\n  LanguageService,\n  ParamService,\n  MenuStateService,\n  QuerystringService,\n  RuntimeFrameworkService,\n  NavigationEventService,\n  NavigationService,\n  RouterService,\n  ApplicationParamService,\n\n  // FrameComponentï¼20ä¸ªï¼\n  ValidationService,\n  FocusInvalidService,\n  ChangeItemService,\n  UIStateService,\n  StateMachineService,\n  BindingDataService,\n  CommandService,\n\n  // entity-services\n  EntityTraversingService,\n  EntityManipulationService,\n  EntityAggregationService,\n  EntityListService,\n  EntityService,\n\n  ListDataService,\n  TreeDataService,\n  SubTreeDataService,\n  CardDataService,\n  SubListDataService,\n\n  BeActionService,\n  ApproveService,\n  PrintService,\n  AttachmentDataService,\n  AttachmentService,\n  NavigationMiddlewareService,\n  GridMiddlewareService,\n  SidebarService,\n  FarrisFormService,\n  DialogService,\n];\n\nexport { FARRIS_COMMAND_SERVICE_PROVIDERS };\n","import { Injectable, Injector, Optional } from '@angular/core';\nimport { NumberFormat, UserSettings } from '@farris/devkit';\nimport { FrmI18nSettingService } from '@gsp-sys/rtf-common';\n\n@Injectable()\nexport class UserSettingsService implements UserSettings {\n  constructor(private injector: Injector, @Optional() private frmI18nSettingService: FrmI18nSettingService) { }\n\n  /**\n   * ç¨æ·æ¶åºå­ç¬¦ä¸²\n   */\n  public get timeZone(): string {\n    return this.timezone && this.timezone.id || null;\n  }\n  /**\n   * æ¶åºåç§»\n   */\n  public get timeZoneOffset(): number {\n    const offset = this.timezone && this.timezone.baseOffset;\n    if (offset !== null && offset !== undefined) {\n      return offset;\n    } else {\n      return null;\n    }\n  }\n  /**\n   * é»è®¤è¯­è¨\n   */\n  public get defaultLanguage(): string {\n    return this.i18nSetting && this.i18nSetting.defaultLanguage || null;\n  }\n  /**\n   * æ¥ææ ¼å¼åå­ç¬¦ä¸²\n   * like: yyyy-MM-dd\n   */\n  public get dateFormat(): string {\n    return this.i18nSetting && this.i18nSetting.userDateFormat || null;\n  }\n  /**\n   * æ¶é´æ ¼å¼\n   * like: HH:MM:ss\n   */\n  public get timeFormat(): string {\n    return this.i18nSetting && this.i18nSetting.userTimeFormat || null;\n  }\n  public get dateTimeFormat(): string {\n    const dateFormat = this.i18nSetting && this.i18nSetting.userDateFormat || 'yyyy-MM-dd';\n    const timeFormat = this.i18nSetting && this.i18nSetting.userTimeFormat || 'HH:mm:ss';\n    return `${dateFormat} ${timeFormat}`;\n  }\n  /**\n   * å°åæ ¼å¼\n   */\n  public get addressFormat(): any {\n    return null;\n  }\n  /**\n   * æ°å­æ ¼å¼\n   */\n  public get numberFormat(): NumberFormat {\n    if (this.i18nSetting && this.i18nSetting.userNumberFormat) {\n      const userNumberFormat = this.i18nSetting.userNumberFormat;\n      const numberFormat: NumberFormat = {\n        negativeSign: userNumberFormat.negativeSign || '-',\n        numberDecimalDigits: userNumberFormat.numberDecimalDigits || 2,\n        numberDecimalSeparator: userNumberFormat.numberDecimalSeparator || '.',\n        numberGroupSeparator: userNumberFormat.numberGroupSeparator || ','\n      };\n      return numberFormat;\n    }\n    return null;\n  }\n  /**\n   * åºåä»£ç \n   */\n  public get regionCode(): string {\n    return this.i18nSetting && this.i18nSetting.userRegionCode || null;\n  }\n  /**\n   * ç¨æ·éç½®\n   */\n  private get userSettings(): any {\n    const userSettings = this.frmI18nSettingService && this.frmI18nSettingService.getSetting();\n    return userSettings;\n  }\n  private get timezone() {\n    return this.i18nSetting && this.i18nSetting.timezone;\n  }\n  private get i18nSetting() {\n    return this.userSettings && this.userSettings.i18nSetting;\n  }\n}","import { Injectable } from \"@angular/core\";\nimport { WorkFlow } from \"./types\";\n\n@Injectable()\nexport class WorkFlowMessageService {\n  private messageHandler: (callback: (e: WorkFlow.IMessage) => void) => (event: any) => void;\n  private handler: (event: any) => void;\n  constructor() {\n    this.messageHandler = (callback: (e: WorkFlow.IMessage) => void) => {\n      return (event: any) => {\n        var message = event.data as WorkFlow.IMessage;\n        if (message) {\n          message.sender = event.source;\n        }\n        if (typeof callback === 'function') {\n          callback(message);\n        }\n      }\n    }\n  }\n  /**\n   * çå¬å·¥ä½æµæ¶æ¯\n   * @param callback åè°\n   */\n  public listen(callback: (e: WorkFlow.IMessage) => void) {\n    this.handler = this.messageHandler(callback);\n    window.addEventListener('message', this.handler);\n  }\n  public destroy() {\n    if (this.handler) {\n      window.removeEventListener('message', this.handler);\n    }\n\n  }\n  /**\n   * ç»å·¥ä½æµè¡¨ååéæ¶æ¯\n   * @param message \n   */\n  public send(message: WorkFlow.IMessage): void {\n    if (!message) {\n      return;\n    }\n    let win: Window = window;\n    if (message.target) {\n      win = message.target as Window || window;\n      delete message.target;\n    }\n    if (win) {\n      win.postMessage(message, '*');\n    }\n  }\n}","import { Injectable, Injector } from \"@angular/core\";\nimport { WorkFlow } from \"./types\";\nimport { WorkFlowMessageService } from \"./work-flow-message.service\";\n\n/**\n * å·¥ä½æµæ¶æ¯\n * @warning ç¦æ­¢ä½¿ç¨è¡¨åä¸ä¸æï¼ææä¸ä¸æå¿é¡»ä»å¤é¨ä¼ å¥\n */\n@Injectable()\nexport class WorkFlowMessage {\n  private listeners: Map<string, any>;\n  constructor(private injector: Injector, public workFlowMessageService: WorkFlowMessageService) {\n    this.listeners = new Map<string, any>();\n  }\n  public setup() {\n    if (!this.workFlowMessageService) {\n      return;\n    }\n    this.workFlowMessageService.listen((message: WorkFlow.IMessage) => {\n      if (!this.listeners || this.listeners.size < 1) {\n        return;\n      }\n      this.listeners.forEach((callback: any, key: string) => {\n        if (typeof callback === 'function') {\n          callback(message);\n        }\n      })\n    });\n  }\n  public addEventListener(callback: (event: MessageEvent) => void): string {\n    const id = `${new Date().valueOf().toString(16)}-${Math.ceil(Math.random() * 100)}`;\n    this.listeners.set(id, callback);\n    return id;\n  }\n  public removeEventListener(eventId: string): void {\n    if (!this.listeners || this.listeners.size < 1) {\n      return;\n    }\n    this.listeners.delete(eventId);\n    eventId = null;\n  }\n}\n","import { Injectable, Injector } from \"@angular/core\";\nimport { AppContext, AppContextManager, FrameContext, onFrameComponentInit } from \"@farris/devkit\";\nimport { from, Observable, of } from \"rxjs\";\nimport { BefRepository, BefRepositoryUtil } from '@farris/bef';\nimport { concatMap, throwIfEmpty } from \"rxjs/operators\";\nimport { ValidationService } from \"../validation.service\";\nimport { WorkFlow } from \"./types\";\nimport { WorkFlowMessage } from \"./work-flow-message\";\nimport { WorkFlowMessageService } from \"./work-flow-message.service\";\n\n@Injectable()\nexport class WorkFlowMessageHandler implements onFrameComponentInit {\n  constructor(private injector: Injector, private frameContext: FrameContext, private workFlowMessageService: WorkFlowMessageService, private workFlowMessage: WorkFlowMessage) {\n\n  }\n  public onComponentInit(frameContext: FrameContext) {\n    const eventId = this.workFlowMessage.addEventListener(this.handle.bind(this));\n    const frameContextDestroySignal = this.frameContext.destorySignal;\n    if (frameContextDestroySignal) {\n      frameContextDestroySignal.subscribe(() => {\n        this.workFlowMessage.removeEventListener(eventId);\n      });\n    }\n    const appContextDestroySignal = this.frameContext.appContext.destorySignal;\n    if (appContextDestroySignal) {\n      appContextDestroySignal.subscribe(() => {\n        this.workFlowMessage.workFlowMessageService.destroy();\n      });\n    }\n  }\n  public handle(message: WorkFlow.IMessage): void {\n    const source = message.sender as Window;\n    const data = message.data as WorkFlow.IMessageBody;\n    const commandName = data && data.command || null;\n    let resultTask: Observable<any> = null;\n    if (!commandName) {\n      return;\n    }\n    if (commandName == 'wf-required-verification') {\n      // å·¥ä½æµçå¿å¡«æ ¡éª\n      // å¦æ­¤è·åçæ¯å½åç»ä»¶çæ ¡éªæå¡ï¼åºè¯¥ænamespaceæ¥åºåï¼ä¸åçnamespaceéè¦åå«æ§è¡æ ¡éª\n      const formFrameContexts = this.getFormFrameContexts();\n      resultTask = from(formFrameContexts).pipe(\n        concatMap((frameContext: FrameContext) => {\n          var validation = frameContext.injector.get<ValidationService>(ValidationService, null);\n          if (validation) {\n            return validation.validateAll();\n          }\n          return of(true);\n        })\n      );\n    } else {\n      var command = this.frameContext.viewModel[commandName];\n      if (command) {\n        resultTask = command(data.arguments);\n      }\n    }\n    if (resultTask) {\n      const message: WorkFlow.IMessage = this.buildMessage(true, source, this.isChanged);\n      resultTask.pipe(throwIfEmpty()).subscribe((result) => {\n        // åæ¥æºæ¹åä¼ æ¶æ¯\n        this.workFlowMessageService.send(message);\n      }, () => {\n        message.data.result = false;\n        this.workFlowMessageService.send(message);\n      });\n    }\n  }\n  private buildMessage(result: boolean, target: any, dataChanged: boolean, type: string = 'message') {\n    const message: WorkFlow.IMessage = {\n      data: {\n        result,\n        dataChanged\n      },\n      type: type,\n      target: target,\n    };\n    return message;\n  }\n  private getFormFrameContexts(): FrameContext[] {\n    const appContextManager = this.injector.get<AppContextManager>(AppContextManager, null);\n    const formFrameContexts = [];\n    if (appContextManager) {\n      const appContexts: AppContext[] = appContextManager.getAppContexts();\n      if (appContexts && appContexts.length > 0) {\n        appContexts.forEach((appContext: AppContext) => {\n          const frameContexts: FrameContext[] = appContext.frameContextManager.getFrameContexts();\n          frameContexts.reduce((contexts: FrameContext[], frameContext: FrameContext) => {\n            const namespace = frameContext.namespace;\n            const index = contexts.findIndex((frame: FrameContext) => frame.namespace === namespace);\n            if (index === -1) {\n              const root = frameContext.getVirtualRootFrameContext();\n              contexts.push(root);\n            }\n            return contexts;\n          }, formFrameContexts);\n        });\n      }\n    }\n    return formFrameContexts;\n  }\n  /**\n   * æ¯å¦ææªä¿å­çåæ´\n   */\n  private get isChanged(): boolean {\n    const befRepository = this.frameContext.repository as BefRepository<any>;\n    return BefRepositoryUtil.isExistUnsaveData(befRepository);\n  }\n}","import { FormLoadingService } from '../form-loading/form-loading.service';\nimport { FormMessageService } from '../form-message.service';\nimport { FormNotifyService } from '../form-notify.service';\nimport { FormErrorService } from '../error/form-error.service';\nimport { FormWizardService } from '../form-wizard.service';\n\nimport { CheckService } from '../check.service';\nimport { DataCheckService } from '../data-check.service';\nimport { EventService } from '../event.service';\nimport { ComponentManagerService } from '../component-manager.service';\nimport { FilterService } from '../filter-service';\nimport { KeybindingService } from '../keybinding-service';\nimport { LanguageService } from '../languag.service';\n\nimport { MenuStateService } from '../menu-state.service';\nimport { QuerystringService } from '../querystring';\nimport { RuntimeFrameworkService } from '../rtf-service';\nimport { NavigationEventService } from '../navigation-event.service';\nimport { NavigationService } from '../navigation.service';\nimport { ParamService } from '../param.service';\nimport { RouterService } from '../router.service';\nimport { ApplicationParamService } from '../application-param.service';\nimport { FilterConditionService } from '../filter-condition.service';\nimport { UserSettingsService } from '../user-settings.service';\nimport { UserSettingsToken } from '@farris/devkit';\nimport { WorkFlowMessage, WorkFlowMessageService } from '../work-flow/index';\n/**\n * æ¨¡åçº§æ³¨å¥(å±20ä¸ª)\n */\nconst FARRIS_COMMAND_SERVICE_MODULE_PROVIDERS = [\n  FormLoadingService,\n  FormMessageService,\n  FormNotifyService,\n  FormErrorService,\n  FormWizardService,\n  CheckService,\n  DataCheckService,\n  EventService,\n  ComponentManagerService,\n  FilterService,\n  KeybindingService,\n  LanguageService,\n  ParamService,\n  MenuStateService,\n  QuerystringService,\n  RuntimeFrameworkService,\n  NavigationEventService,\n  NavigationService,\n  RouterService,\n  ApplicationParamService,\n  FilterConditionService,\n  { provide: UserSettingsToken, useClass: UserSettingsService },\n  WorkFlowMessageService,\n  WorkFlowMessage\n];\n\nexport { FARRIS_COMMAND_SERVICE_MODULE_PROVIDERS }\n","/**\n * æ¯è¾ç¬¦\n */\nexport enum CompareType{\n    Equal = 0,\n    NotEqual = 1,\n    Greater = 2,\n    GreaterOrEqual = 3,\n    Less = 4,\n    LessOrEqual = 5,\n    Like = 6,\n    LikeStartWith = 7,\n    LikeEndWith = 8,\n    NotLike = 9,\n    NotLikeStartWith = 10,\n    NotLikeEndWith = 11,\n    Is = 12,\n    IsNot = 13,\n    In = 14,\n    NotIn = 15\n}","export enum ValueType{\n\n    /**\n     *å¼ç±»å\n     */\n    Value = 0,\n\n    /**\n     * è¡¨è¾¾å¼\n     */\n    Express = 1\n}","export enum RelationType{\n\n    Empty = 0,\n\n    /**\n     * ä¸\n     */\n    // And=0,\n    And = 1,\n\n    /**\n     * æ\n     */\n    // Or=1\n    Or = 2\n}","import { IQueryConditionHandler } from \"./iquerycondition.handler\";\nimport { QueryCondition, TextValue } from \"@farris/component-querycondition\";\nimport { CompareType } from '../enum/compare-type.enum';\nimport { ValueType } from '../enum/value-type.enum';\nimport { RelationType } from '../enum/relation-type.enum';\n\nexport class TextHandler implements IQueryConditionHandler {\n  convert(qc: QueryCondition) {\n    const tv = (qc.value as TextValue);\n    return [{\n      'FilterField': qc.fieldCode,\n      'Compare': CompareType.Like,\n      'Value': tv.value, // jsonè½¬ä¹ä¸encodeUriComponentä¸åï¼ä¸åºå¨æ­¤è½¬ä¹ï¼ç±jsonåé¨è½¬ä¹å³å¯\n      'Relation': RelationType.And,\n      'Expresstype': ValueType.Value\n    }];\n  }\n}","import { IQueryConditionHandler } from \"./iquerycondition.handler\";\nimport { QueryCondition, DateRangeValue} from \"@farris/component-querycondition\";\nimport { CompareType } from '../enum/compare-type.enum';\nimport { ValueType } from '../enum/value-type.enum';\nimport { RelationType } from '../enum/relation-type.enum';\n\nexport class DateRangeHandler implements IQueryConditionHandler{\n    convert(qc: QueryCondition) {\n        const arr = [];\n        const drv = (qc.value as DateRangeValue);\n        drv.startTime && arr.push({\n            'FilterField' : qc.fieldCode,\n            'Compare' : CompareType.GreaterOrEqual, //GreaterOrEqual\n            'Value' : drv.startTime,\n            'Relation' : RelationType.And, //and\n            'Expresstype': ValueType.Value\n        });\n        drv.endTime && arr.push({\n            'FilterField' : qc.fieldCode,\n            'Compare' : CompareType.LessOrEqual, //LessOrEqual\n            'Value' : drv.endTime,\n            'Relation' : RelationType.And,//and\n            'Expresstype': ValueType.Value\n        });\n\n        return arr;\n    }\n}","import { IQueryConditionHandler } from \"./iquerycondition.handler\";\nimport { QueryCondition, DropDownListValue } from \"@farris/component-querycondition\";\nimport { CompareType } from '../enum/compare-type.enum';\nimport { ValueType } from '../enum/value-type.enum';\nimport { RelationType } from '../enum/relation-type.enum';\n\nexport class DropDownHandler implements IQueryConditionHandler{\n    convert(qc: QueryCondition) {\n        const ddv = (qc.value as DropDownListValue);\n        const arr = [];\n        ddv.value.forEach(dv => {\n            arr.push({\n                'FilterField' : qc.fieldCode,\n                'Compare' : CompareType.Equal,\n                'Value' : dv.value,\n                'Relation' : RelationType.Or,\n                'Expresstype':ValueType.Value\n            });\n        });\n        arr[0]['Lbracket'] = '(';\n        arr[arr.length -1]['Rbracket'] = ')';\n        arr[arr.length -1]['Relation'] = RelationType.And;\n        return arr;\n    }\n}","import { IQueryConditionHandler } from \"./iquerycondition.handler\";\nimport { QueryCondition, NumberRangeValue } from \"@farris/component-querycondition\";\nimport { CompareType } from '../enum/compare-type.enum';\nimport { ValueType } from '../enum/value-type.enum';\nimport { RelationType } from '../enum/relation-type.enum';\n\nexport class NumberRangeHandler implements IQueryConditionHandler{\n    convert(qc: QueryCondition) {\n        const arr = [];\n        const nrv = (qc.value as NumberRangeValue);\n        (nrv.startValue != null) && arr.push({\n            'FilterField' : qc.fieldCode,\n            'Compare' : CompareType.GreaterOrEqual, //GreaterOrEqual\n            'Value' : nrv.startValue,\n            'Relation' : RelationType.And, //and\n            'Expresstype': ValueType.Value\n        });\n        (nrv.endValue != null) && arr.push({\n            'FilterField' : qc.fieldCode,\n            'Compare' : CompareType.LessOrEqual, //LessOrEqual\n            'Value' : nrv.endValue,\n            'Relation' : RelationType.And,//and\n            'Expresstype': ValueType.Value\n        });\n\n        return arr;\n    }\n}","import { IQueryConditionHandler } from \"./iquerycondition.handler\";\nimport { QueryCondition, SmartHelpValue } from \"@farris/component-querycondition\";\nimport { CompareType } from '../enum/compare-type.enum';\nimport { ValueType } from '../enum/value-type.enum';\nimport { RelationType } from '../enum/relation-type.enum';\n\nexport class SmartHelpHandler implements IQueryConditionHandler{\n    convert(qc: QueryCondition) {\n        const shv = (qc.value as SmartHelpValue);\n        if(shv.value.length == 0) return [];\n\n        const arr = [];\n        if(shv.isInputText || shv.valueField == null){\n            arr.push({\n                'FilterField' : qc.fieldCode,\n                'Compare' : CompareType.Like,\n                'Value' : shv.textValue,\n                'Relation' : RelationType.And,\n                'Expresstype':ValueType.Value\n            });\n            return arr;\n        }else{\n            shv.getOriginalValue().split(',').forEach(id => {\n                id && arr.push({\n                    'FilterField' : qc.fieldCode,\n                    'Compare' : CompareType.Equal,\n                    'Value' : id,\n                    'Relation' : RelationType.Or,\n                    'Expresstype':ValueType.Value\n                });\n            });\n            if(arr.length > 0){\n                arr[0]['Lbracket'] = '(';\n                arr[arr.length -1]['Rbracket'] = ')';\n                arr[arr.length -1]['Relation'] = RelationType.And;\n                return arr;\n            }else{\n                return [];\n            }\n        }\n    }\n}\n","import { IQueryConditionHandler } from \"./iquerycondition.handler\";\nimport { QueryCondition, SingleYearValue } from \"@farris/component-querycondition\";\nimport { CompareType } from '../enum/compare-type.enum';\nimport { ValueType } from '../enum/value-type.enum';\nimport { RelationType } from '../enum/relation-type.enum';\n\nexport class SingleYearHandler implements IQueryConditionHandler{\n    convert(qc: QueryCondition) {\n        const yv = (qc.value as SingleYearValue);\n        return [{\n            'FilterField' : qc.fieldCode,\n            'Compare' : CompareType.Equal,\n            'Value' : yv.yearValue,\n            'Relation' : RelationType.And, //and undefined\n            'Expresstype':ValueType.Value\n        }];\n    }\n}","import { IQueryConditionHandler } from \"./iquerycondition.handler\";\nimport { QueryCondition, CheckBoxValue } from \"@farris/component-querycondition\";\nimport { CompareType } from '../enum/compare-type.enum';\nimport { ValueType } from '../enum/value-type.enum';\nimport { RelationType } from '../enum/relation-type.enum';\n\nexport class CheckBoxHandler implements IQueryConditionHandler{\n    convert(qc: QueryCondition) {\n        const arr = [];\n        const tv = (qc.value as CheckBoxValue);\n        if(tv.value.length == 1)\n            return [{\n                'FilterField' : qc.fieldCode,\n                'Compare' : CompareType.Equal,\n                'Value' : tv.value[0],\n                'Relation' : RelationType.And,\n                'Expresstype':ValueType.Value\n            }];\n        tv.value.forEach(tvv => {\n            arr.push({\n                'FilterField' : qc.fieldCode,\n                'Compare' : CompareType.Equal,\n                'Value' : tvv,\n                'Relation' : RelationType.Or,\n                'Expresstype':ValueType.Value\n            });\n        });\n        arr[0]['Lbracket'] = '(';\n        arr[arr.length -1]['Rbracket'] = ')';\n        arr[arr.length -1]['Relation'] = RelationType.And;\n        return arr;\n    }\n}","import { IQueryConditionHandler } from \"./iquerycondition.handler\";\nimport { QueryCondition, SingleMonthValue } from \"@farris/component-querycondition\";\nimport { CompareType } from '../enum/compare-type.enum';\nimport { ValueType } from '../enum/value-type.enum';\nimport { RelationType } from '../enum/relation-type.enum';\n\nexport class SingleMonthHandler implements IQueryConditionHandler{\n    convert(qc: QueryCondition) {\n        const mv = (qc.value as SingleMonthValue);\n        return [{\n            'FilterField' : qc.fieldCode,\n            'Compare' : CompareType.Equal,\n            'Value' : mv.monthValue,\n            'Relation' : RelationType.And, //and undefined\n            'Expresstype':ValueType.Value\n        }];\n    }\n}","import { IQueryConditionHandler } from \"./iquerycondition.handler\";\nimport { QueryCondition, MonthRangeValue} from \"@farris/component-querycondition\";\nimport { CompareType } from '../enum/compare-type.enum';\nimport { ValueType } from '../enum/value-type.enum';\nimport { RelationType } from '../enum/relation-type.enum';\n\nexport class MonthRangeHandler implements IQueryConditionHandler{\n    convert(qc: QueryCondition) {\n        const arr = [];\n        const mrv = (qc.value as MonthRangeValue);\n        mrv.startTime && arr.push({\n            'FilterField' : qc.fieldCode,\n            'Compare' : CompareType.GreaterOrEqual, //GreaterOrEqual\n            'Value' : mrv.startTime,\n            'Relation' : RelationType.And, //and\n            'Expresstype': ValueType.Value\n        });\n        mrv.endTime && arr.push({\n            'FilterField' : qc.fieldCode,\n            'Compare' : CompareType.LessOrEqual, //LessOrEqual\n            'Value' : mrv.endTime,\n            'Relation' : RelationType.And,//and\n            'Expresstype': ValueType.Value\n        });\n\n        return arr;\n    }\n}","import { IQueryConditionHandler } from \"./iquerycondition.handler\";\nimport { QueryCondition, SingleDateTimeValue } from \"@farris/component-querycondition\";\nimport { CompareType } from '../enum/compare-type.enum';\nimport { ValueType } from '../enum/value-type.enum';\nimport { RelationType } from '../enum/relation-type.enum';\n\nexport class SingleDateTimeHandler implements IQueryConditionHandler{\n    convert(qc: QueryCondition) {\n        const dtv = (qc.value as SingleDateTimeValue);\n        return [{\n            'FilterField' : qc.fieldCode,\n            'Compare' : CompareType.Equal,\n            'Value' : dtv.datetimeValue,\n            'Relation' : RelationType.And, //and undefined\n            'Expresstype':ValueType.Value\n        }];\n    }\n}","import { IQueryConditionHandler } from \"./iquerycondition.handler\";\nimport { QueryCondition, SingleNumberValue } from \"@farris/component-querycondition\";\nimport { CompareType } from '../enum/compare-type.enum';\nimport { ValueType } from '../enum/value-type.enum';\nimport { RelationType } from '../enum/relation-type.enum';\n\nexport class SingleNumberHandler implements IQueryConditionHandler{\n    convert(qc: QueryCondition) {\n        const dtv = (qc.value as SingleNumberValue);\n        return [{\n            'FilterField' : qc.fieldCode,\n            'Compare' : CompareType.Equal,\n            'Value' : dtv.numValue,\n            'Relation' : RelationType.And, //and undefined\n            'Expresstype':ValueType.Value\n        }];\n    }\n}","import { IQueryConditionHandler } from \"./iquerycondition.handler\";\nimport { QueryCondition, SingleDateValue } from \"@farris/component-querycondition\";\nimport { CompareType } from '../enum/compare-type.enum';\nimport { ValueType } from '../enum/value-type.enum';\nimport { RelationType } from '../enum/relation-type.enum';\n\nexport class SingleDateHandler implements IQueryConditionHandler{\n    convert(qc: QueryCondition) {\n        const dtv = (qc.value as SingleDateValue);\n        return [{\n            'FilterField' : qc.fieldCode,\n            'Compare' : CompareType.Equal,\n            'Value' : dtv.dateValue,\n            'Relation' : RelationType.And, //and undefined\n            'Expresstype':ValueType.Value\n        }];\n    }\n}","import { IQueryConditionHandler } from \"./iquerycondition.handler\";\nimport { QueryCondition, ComboLookUpValue } from \"@farris/component-querycondition\";\nimport { CompareType } from '../enum/compare-type.enum';\nimport { ValueType } from '../enum/value-type.enum';\nimport { RelationType } from '../enum/relation-type.enum';\n\nexport class ComboLookUpHandler implements IQueryConditionHandler{\n    convert(qc: QueryCondition) {\n        const cluv = (qc.value as ComboLookUpValue);\n        if(cluv.value.length == 0 || !cluv.valueField){\n            return [];\n        }else{\n            const arr = [];\n            cluv.getOriginalValue().split(',').forEach(id => {\n                id && arr.push({\n                    'FilterField' : qc.fieldCode,\n                    'Compare' : CompareType.Equal,\n                    'Value' : id,\n                    'Relation' : RelationType.Or,\n                    'Expresstype':ValueType.Value\n                });\n            });\n            if(arr.length > 0){\n                arr[0]['Lbracket'] = '(';\n                arr[arr.length -1]['Rbracket'] = ')';\n                arr[arr.length -1]['Relation'] = RelationType.And;\n                return arr;\n            }else{\n                return [];\n            }\n        }\n    }\n}","import { IQueryConditionHandler } from \"./iquerycondition.handler\";\nimport { QueryCondition, RadioValue } from \"@farris/component-querycondition\";\nimport { CompareType } from '../enum/compare-type.enum';\nimport { ValueType } from '../enum/value-type.enum';\nimport { RelationType } from '../enum/relation-type.enum';\n\nexport class RadioHandler implements IQueryConditionHandler{\n    convert(qc: QueryCondition) {\n        const arr = [];\n        const rv = (qc.value as RadioValue);\n        return [{\n            'FilterField' : qc.fieldCode,\n            'Compare' : CompareType.Equal,\n            'Value' : rv.value,\n            'Relation' : RelationType.And,\n            'Expresstype':ValueType.Value\n        }];\n    }\n}","import { IQueryConditionHandler } from \"./iquerycondition.handler\";\nimport { QueryCondition, InputGroupValue } from \"@farris/component-querycondition\";\nimport { CompareType } from '../enum/compare-type.enum';\nimport { ValueType } from '../enum/value-type.enum';\nimport { RelationType } from '../enum/relation-type.enum';\n\nexport class InputGroupHandler implements IQueryConditionHandler {\n  convert(qc: QueryCondition) {\n    const igv = (qc.value as InputGroupValue);\n    const arr = [];\n\n    if (igv.isInputText || igv.textField == null) {\n      arr.push({\n        'FilterField': qc.fieldCode,\n        'Compare': CompareType.Like,\n        'Value': igv.textValue,//encodeURIComponent(igv.textValue),\n        'Relation': RelationType.And,\n        'Expresstype': ValueType.Value\n      });\n      return arr;\n    }\n    else {\n      igv.getOriginalValue().split(',').forEach(itemValue => {\n        itemValue && arr.push({\n          'FilterField': qc.fieldCode,\n          'Compare': CompareType.Equal,\n          'Value': itemValue,\n          'Relation': RelationType.Or,\n          'Expresstype': ValueType.Value\n        });\n      });\n      if (arr.length > 0) {\n        arr[0]['Lbracket'] = '(';\n        arr[arr.length - 1]['Rbracket'] = ')';\n        arr[arr.length - 1]['Relation'] = RelationType.And;\n        return arr;\n      } else {\n        return [];\n      }\n    }\n  }\n}\n","import { ControlType } from \"@farris/component-querycondition\";\nimport { IQueryConditionHandler } from \"./handlers/iquerycondition.handler\";\nimport { TextHandler } from \"./handlers/text.handler\";\nimport { DateRangeHandler } from \"./handlers/daterage.handler\";\nimport { DropDownHandler } from \"./handlers/dropdown.handler\";\nimport { NumberRangeHandler } from \"./handlers/numberrage.handler\";\nimport { SmartHelpHandler } from \"./handlers/smarthelp.handler\";\nimport { SingleYearHandler } from './handlers/single-year.handler';\nimport { CheckBoxHandler } from './handlers/checkbox.handler';\nimport { SingleMonthHandler } from './handlers/single-month.handler';\nimport { MonthRangeHandler } from './handlers/monthrange.handler';\nimport { SingleDateTimeHandler } from './handlers/single-date-time.handler';\nimport { SingleNumberHandler } from './handlers/single-number.handler';\nimport { SingleDateHandler } from './handlers/single-date.handler';\nimport { ComboLookUpHandler } from './handlers/combolookup.handler';\nimport { RadioHandler } from './handlers/radio.handler';\nimport { InputGroupHandler } from './handlers/inputgroup.handler';\n\nexport class QueryConditionHandlerFactory {\n\n    private static _instance: QueryConditionHandlerFactory = null;\n    private queryConditionHandlerMapping: Map<ControlType, IQueryConditionHandler> = new Map<ControlType, IQueryConditionHandler>();\n    private constructor(){\n        this.queryConditionHandlerMapping.set(ControlType.Text, new TextHandler());\n        this.queryConditionHandlerMapping.set(ControlType.InputGroup, new InputGroupHandler());\n        this.queryConditionHandlerMapping.set(ControlType.DateRange, new DateRangeHandler());\n        this.queryConditionHandlerMapping.set(ControlType.DateTimeRange, new DateRangeHandler());\n        this.queryConditionHandlerMapping.set(ControlType.DropDownList, new DropDownHandler());\n        this.queryConditionHandlerMapping.set(ControlType.NumberRange, new NumberRangeHandler());\n        this.queryConditionHandlerMapping.set(ControlType.SmartHelp, new SmartHelpHandler());\n        this.queryConditionHandlerMapping.set(ControlType.SingleYear, new SingleYearHandler());\n        this.queryConditionHandlerMapping.set(ControlType.BoolCheck, new CheckBoxHandler());\n        this.queryConditionHandlerMapping.set(ControlType.SingleMonth, new SingleMonthHandler());\n        this.queryConditionHandlerMapping.set(ControlType.MonthRange, new MonthRangeHandler());\n        this.queryConditionHandlerMapping.set(ControlType.SingleDateTime, new SingleDateTimeHandler());\n        this.queryConditionHandlerMapping.set(ControlType.SingleNumber, new SingleNumberHandler());\n        this.queryConditionHandlerMapping.set(ControlType.SingleDate, new SingleDateHandler());\n        this.queryConditionHandlerMapping.set(ControlType.ComboLookUp, new ComboLookUpHandler());\n        this.queryConditionHandlerMapping.set(ControlType.Radio, new RadioHandler());\n    }\n    public static getInstance(){\n        if(!QueryConditionHandlerFactory._instance){\n            QueryConditionHandlerFactory._instance = new QueryConditionHandlerFactory();\n        }\n        return QueryConditionHandlerFactory._instance;\n    }\n\n    getHandler(controlType: ControlType): IQueryConditionHandler{\n        return this.queryConditionHandlerMapping.get(controlType);\n    }\n}","import { Injectable } from '@angular/core';\nimport { QueryCondition } from '@farris/component-querycondition';\nimport { IQueryConditionHandler } from './handlers/iquerycondition.handler';\nimport { QueryConditionHandlerFactory } from './querycondition.handler.factory';\nimport { FrameContext } from '@farris/devkit';\nimport { IQuerySolutionHandler,QuerySolutionComponent } from '@gsp-cmp/querysolution';\nimport { FrameworkSessionService } from '@farris/bef';\n\n@Injectable()\nexport class QuerySolutionService implements IQuerySolutionHandler {\n\n  constructor(\n    private frameContext: FrameContext,\n    private frameworkSessionService: FrameworkSessionService\n  ) {\n\n  }\n\n  getUserSessionId(): string {\n    return this.frameworkSessionService.getUserSessionId();\n  }\n\n  public setFilterConditions(params: Array<QueryCondition>): void {\n    let queryConditionHandler: IQueryConditionHandler;\n    const filterConditionList = [];\n    params.forEach(qc => {\n      if (!qc.value.isEmpty()) {\n        queryConditionHandler = QueryConditionHandlerFactory.getInstance().getHandler(qc.control.getControlType());\n        queryConditionHandler && filterConditionList.push(...queryConditionHandler.convert(qc));\n      }\n    });\n    //è®¾ç½®å°NgCommand params.filterå±æ§ä¸ï¼{UISTATE~/root-component/filterConditionList}\n    this.frameContext.uiState['filterConditionList'] = JSON.stringify(filterConditionList);\n    // const originalConditions = this.getOriginalQueryConditions(filterConditionList);\n    this.frameContext.uiState['originalFilterConditionList'] = JSON.stringify(filterConditionList);\n  }\n\n  public setCurrentQueryConditions(conditions: QueryCondition[]): void {\n    this.frameContext.uiState['currentQueryConditions'] = conditions;\n  }\n  /**\n   * è¿åè¿æ»¤æ¡ä»¶ä¸­çencode\n   * @param conditions æ¥è¯¢æ¹æ¡æé å®çè¿æ»¤æ¡ä»¶\n   */\n  // private getOriginalQueryConditions(conditions: Array<any>): Array<any> {\n  //   conditions = JSON.parse(JSON.stringify(conditions));\n  //   if (conditions && Array.isArray(conditions) && conditions.length > 0) {\n  //     conditions = conditions.map((item) => {\n  //       if (item.hasOwnProperty('Value')) {\n  //         item.Value = decodeURIComponent(item.Value);\n  //       } else if (item.hasOwnProperty('value')) {\n  //         const value = item.value;\n  //         delete item.value;\n  //         item.Value = decodeURIComponent(value);\n  //       }\n  //       return item;\n  //     });\n  //   }\n  //   return conditions;\n  // }\n\n}\n","import { Injectable } from '@angular/core';\nimport { AppContext, FrameContext } from '@farris/devkit';\nimport { of } from 'rxjs';\nimport { concatMap, tap, delay } from 'rxjs/operators';\n\n/**\n * ç»æè¡¨åç¼è¾ç¶ææå¡\n */\n@Injectable()\nclass EndEditService {\n  constructor(private frameContext: FrameContext) {\n  }\n  /**\n   * ç»æç¼è¾\n   */\n  public endEdit() {\n    const appContext: AppContext = this.frameContext && this.frameContext.getFormAppContext();\n    return of(null).pipe(\n      tap(() => {\n        if (appContext) {\n          appContext.messagePipe.next({ type: 'endEdit' });\n        }\n      }),\n      // todo: ä¸åºè¯¥ä½¿ç¨delayï¼åºè¯¥ä¸²æµ\n      delay(5)\n    );\n  }\n}\nexport { EndEditService };\n","import { Injectable } from '@angular/core';\nimport { ViewModel } from '@farris/devkit';\nimport { BefRepository } from '@farris/bef';\nimport { of, Observable } from 'rxjs';\n\n@Injectable()\nexport class RemoteSummaryService {\n  constructor(private viewModel: ViewModel) { }\n  /**\n   * æå¡å¨ç«¯åè®¡\n   * @param methodName æå¡å¨ç«¯åè®¡èªå®ä¹å¨ä½åç§°\n   * @param filters è¿æ»¤æ¡ä»¶\n   */\n  public summary(methodName: string, filters: any) {\n    const repository = this.viewModel.frameContext.repository as BefRepository<any> || null;\n    if (repository) {\n      const proxy = repository.proxy;\n      if (proxy && typeof proxy[methodName] === 'function') {\n        return proxy[methodName](filters) as Observable<any>;\n      }\n    }\n    return of(null);\n  }\n}\n","import { Injectable, Injector, Optional } from '@angular/core';\nimport { BindingList, ViewModel, BindingObject, Repository, Entity, FrameContext, BindingData, AppContext, BindingProperty, DataTypeInfo, createEntities, EntityList } from '@farris/devkit';\nimport { from, EMPTY, concat, of, Subject, Observable } from 'rxjs';\nimport { concatMap, catchError, tap, switchMap, last, map, delay } from 'rxjs/operators';\nimport { BefRepository, ResponseInfo } from '@farris/bef';\nimport { BatchEditDialogService } from '@farris/ui-batch-edit-dialog';\nimport { DateTimeHelperService } from '@farris/ui-common/date';\nimport { ComponentManagerService } from './component-manager.service';\nimport { FormLoadingService } from './form-loading/form-loading.service';\nimport { LanguageService } from './languag.service';\nimport { FormNotifyService } from './form-notify.service';\n\n// tslint:disable: max-line-length\n/**\n * æ¹éç¼è¾æå¡\n */\n@Injectable()\nexport class BatchEditService {\n  private formLoadingService: FormLoadingService;\n  private onHelpClose: Subject<any>;\n  constructor(\n    private injector: Injector,\n    private componentManagerService: ComponentManagerService,\n    private viewModel: ViewModel,\n    private repository: Repository<any>,\n    private batchEditDialogService: BatchEditDialogService,\n    private dateService: DateTimeHelperService,\n    private languageService: LanguageService,\n    private formNotifyService: FormNotifyService\n  ) {\n    this.formLoadingService = this.injector.get<FormLoadingService>(FormLoadingService, null);\n    if (!this.languageService) {\n      this.languageService = LanguageService.getInstance();\n    }\n    if (!this.formNotifyService) {\n      this.formNotifyService = this.injector.get<FormNotifyService>(FormNotifyService, null);\n    }\n    this.onHelpClose = new Subject<any>();\n    this.onHelpClose.subscribe(result => {\n      const { frameId = '', mapFields = '', data = [] } = result || {};\n      this.onHelpCloseHandler(frameId, mapFields, data);\n    });\n  }\n\n  /**\n   * æå¼æ¹éç¼è¾å¯¹è¯æ¡\n   * @param frameId frameId\n   */\n  public openBatchEditDialog(frameId: string) {\n    if (!frameId) {\n      throw new Error('frameId is required.');\n    }\n    if (this.batchEditDialogService) {\n      let columns = [];\n      if (this.viewModel) {\n        const gridFrameContext: FrameContext = this.viewModel.frameContext.root.appContext.frameContextManager.getFrameContextById(frameId);\n        const gridViewModel = gridFrameContext.viewModel;\n        if (gridViewModel && gridViewModel.hasOwnProperty('dataGridColumnsName')) {\n          // tslint:disable-next-line: no-string-literal\n          const gridColumnsAttrName = gridViewModel['dataGridColumnsName'];\n          columns = gridViewModel[gridColumnsAttrName];\n        } else if (gridViewModel && gridViewModel.hasOwnProperty('dataGridColumns')) {\n          columns = gridViewModel['dataGridColumns'];\n        }\n        const ids: string[] = gridViewModel.uiState['ids'] || [];\n        if (!ids || ids.length < 1) {\n          this.formNotifyService.warning(this.languageService.plsCheckBatchEditRows, { hideTitle: true });\n          return EMPTY;\n        }\n        const dialogRef: any = this.batchEditDialogService.batchEdit(columns, {\n          rows: ids.length,\n          onConfirm: (inputs: Array<any>) => {\n            if (Array.isArray(ids) && ids.length > 0) {\n              // console.log('openBatchEditDialog', inputs);\n              const appContext = this.viewModel.frameContext.appContext;\n              appContext.changeDetectionController.detach();\n              inputs.forEach(input => {\n                this.updateBindingData(input, ids);\n              });\n              appContext.changeDetectionController.reattach();\n            }\n            dialogRef.close();\n          }\n        });\n      }\n    }\n  }\n  /**\n   * æå¼éèå¸®å©\n   * @param helpId å¸®å©id\n   */\n  public openHiddenHelp(helpId: string) {\n    if (!helpId) {\n      throw new Error('Argument error,helpId can`t be empty');\n    }\n    const componentManagerService = this.componentManagerService.getControl(helpId);\n    if (componentManagerService) {\n      componentManagerService.showDialog();\n    } else {\n      throw new Error(`the component which id is ${helpId} can't be found!`);\n    }\n  }\n  /**\n   * æ¸ç©ºå¸®å©å¾éï¼åªè½æè½½å°å¸®å©åäºä»¶ï¼\n   */\n  public clearHelpSelections() {\n    const self: any = this;\n    const helpElement = self.context && self.context.eventParam && self.context.eventParam.instance || null;\n    if (helpElement) {\n      helpElement.displayValue = '';\n    }\n  }\n  /**\n   * å¾éå½åè¡\n   * @param frameId frameId\n   * @param mapFields å­æ®µæ å°\n   * @param primaryKeyValue å¸®å©ä¸»é®å­æ®µ\n   */\n  public checkCurrentRow(frameId: string, mapFields: string, primaryKeyValue: string) {\n    const self: any = this;\n    const helpElement = self.context && self.context.eventParam && self.context.eventParam.instance || null;\n    if (!primaryKeyValue) {\n      primaryKeyValue = 'id';\n    }\n    const mappings = JSON.parse(mapFields);\n    if (helpElement) {\n      frameId = frameId || this.viewModel.frameContext.frameId;\n      if (frameId) {\n        const frameContext = this.getFrameContextById(frameId);\n        if (frameContext) {\n          const bindingPath = frameContext.viewModel.bindingPath;\n          if (bindingPath) {\n            const bindingPaths = bindingPath.split('/').filter(p => p);\n            const bindingList = frameContext.bindingData.getValue(bindingPaths) as BindingList;\n            const currentRow = bindingList.currentItem;\n            const path = mappings[primaryKeyValue];\n            if (path) {\n              const value = this.getValueByPath(currentRow, path);\n              helpElement.displayValue = value;\n            }\n          }\n        }\n      }\n    }\n  }\n  /**\n   * ä»¥å¸®å©å¾éæ°æ®ä½ä¸ºä¾æ®ï¼æ¹éæ°å¢ä¸»è¡¨æ°æ®\n   * @param frameId ä¸»è¡¨æå¨frameçid\n   * @param mapFields å¸®å©å­æ®µä¸ä¸»è¡¨å­æ®µæ å°\n   * @description ä»¥å¸®å©å¾éæ°æ®ä½ä¸ºä¾æ®ï¼æ¹éæ°å¢ä¸»è¡¨æ°æ®\n   */\n  public batchAppend(frameId: string, mapFields: string) {\n    const self: any = this;\n    const result = self.context && self.context.eventParam || [];\n    if (!mapFields) {\n      throw new Error('mapFields can`t be empty.');\n    }\n    if (result && Array.isArray(result) && result.length > 0) {\n      const mappings = JSON.parse(mapFields);\n      // ä¸æ¯bindingPathåæframeIdå¤ç\n      let bindingPath = '/';\n      const appContext = this.injector.get<AppContext>(AppContext, null);\n      if (appContext) {\n        const frameContext = appContext.frameContextManager.getFrameContextById(frameId);\n        if (frameContext) {\n          bindingPath = frameContext.viewModel.bindingPath || '/';\n        } else {\n          throw new Error('frameId is invalid!');\n        }\n      }\n      const defaultValues = [];\n      result.forEach((item) => {\n        const defaultValue = {};\n        Object.keys(mappings).forEach((prop: string) => {\n          const value = this.getValueByPath(item, prop);\n          const fields = mappings[prop];\n          const groups: any[] = fields.split(',').filter(p => p);\n          groups.forEach(group => {\n            const paths = group.split('.').filter(p => p);\n            this.setValueByPath(defaultValue, paths.join('.'), value);\n          });\n        });\n        defaultValues.push(defaultValue);\n      });\n      this.formLoadingService.show();\n      return this.repository.batchAppend(defaultValues).pipe(\n        tap(() => this.formLoadingService.hide()),\n        map(() => true)\n      );\n    }\n    return of(true);\n  }\n  /**\n   * ä»¥å¸®å©å¾éæ°æ®ä½ä¸ºä¾æ®ï¼æ¹éæ°å¢ä»è¡¨/ä»ä»è¡¨\n   * @param frameId ä»è¡¨/ä»ä»è¡¨æå¨frameçid\n   * @param mapFields å¸®å©å­æ®µä¸ä»è¡¨/ä»ä»è¡¨å­æ®µæ å°\n   * @description ä»¥å¸®å©å¾éæ°æ®ä½ä¸ºä¾æ®ï¼æ¹éæ°å¢ä»è¡¨/ä»ä»è¡¨\n   */\n  public batchAppendByPathBasedOnHelpSelections(frameId: string, mapFields: string) {\n    const self: any = this;\n    const result = self.context && self.context.eventParam || [];\n    if (!mapFields) {\n      throw new Error('mapFields can`t be empty.');\n    }\n    if (result && Array.isArray(result) && result.length > 0) {\n      const mappings = JSON.parse(mapFields);\n      // ä¸æ¯bindingPathåæframeIdå¤ç\n      let bindingPath = '/';\n      const appContext = this.injector.get<AppContext>(AppContext, null);\n      if (appContext) {\n        const frameContext = appContext.frameContextManager.getFrameContextById(frameId);\n        if (frameContext) {\n          bindingPath = frameContext.viewModel.bindingPath || '/';\n        } else {\n          throw new Error('frameId is invalid!');\n        }\n      }\n      const defaultValues = [];\n      result.forEach((item) => {\n        const defaultValue = {};\n        Object.keys(mappings).forEach((prop: string) => {\n          const value = this.getValueByPath(item, prop);\n          const fields = mappings[prop];\n          const groups: any[] = fields.split(',').filter(p => p);\n          groups.forEach(group => {\n            const paths = group.split('.').filter(p => p);\n            this.setValueByPath(defaultValue, paths.join('.'), value);\n          });\n        });\n        defaultValues.push(defaultValue);\n      });\n      this.formLoadingService.show();\n      const path = this.buildPath(bindingPath, this.viewModel.bindingData.list.currentId);\n      return this.repository.batchAppendByPath(path, defaultValues).pipe(\n        tap(() => this.formLoadingService.hide()),\n        map(() => true)\n      );\n    }\n    return of(true);\n  }\n  /**\n   * è¡åå¸®å©å¤éæ¹éæ°å¢ææ¿æ¢å­è¡¨æ°æ®\n   * @param frameId frameId, optional,ä¸ºç©ºæ¶ä½¿ç¨å½ä»¤æ§è¡æ¶æå¨çä¸ä¸æ\n   * @param mapFields å­æ®µæ å°\n   * @returns \n   */\n  public batchAppendBasedOnRowHelpSelections(frameId: string, mapFields: string) {\n    const self: any = this;\n    let result: any[] = self.context && self.context.eventParam || [];\n    if (!mapFields) {\n      return of(true);\n    }\n    const mappings = JSON.parse(mapFields);\n    if (!mappings || !mappings.hasOwnProperty('id')) {\n      return of(true);\n    }\n    frameId = frameId || this.viewModel.frameContext.frameId;\n    if (!frameId) {\n      return of(true);\n    }\n    const frameContext = this.getFrameContextById(frameId);\n    if (!frameContext) {\n      return of(true);\n    }\n    setTimeout(() => {\n      this.endEdit(frameContext).subscribe(() => {\n        if (result && Array.isArray(result) && result.length > 0) {\n          const bindingPath = frameContext.viewModel.bindingPath || '/';\n          const bindingPaths = bindingPath.split('/').filter(p => p);\n          const defaultValues = [];\n          // è·åå½åè¡\n          const bindingList: BindingList = frameContext.bindingData.getValue(bindingPaths) as BindingList;\n          const currentRow = bindingList.currentItem;\n          const currentRowId = bindingList.currentId;\n          const currentEntity = this.getEntityByPath(frameContext, bindingPaths, currentRowId);\n          const headItem = result[0];\n          // å¦æä»å¾éä¸æ¡ï¼ååºæ¿æ¢å½åè¡çæ å°\n          if (result.length === 1) {\n            this.mappingRow(headItem, mappings, currentEntity, bindingPath);\n            return of(true);\n          } else {\n            const idMapField = mappings['id'];\n            const sourceItemId = this.getValueByPath(currentEntity, idMapField);\n            // å¦æå½åè¡æ²¡ææ å°æå¾éç»æä¸­æ¾ä¸å°å½åè¡çæ å°\n            if (!sourceItemId || result.findIndex(item => item[bindingList.primaryKey] === sourceItemId) === -1) {\n              // éæ°æ å°å½åè¡\n              this.mappingRow(headItem, mappings, currentEntity, bindingPath);\n              result = result.slice(1);\n            } else if (sourceItemId) {\n              const index = result.findIndex(item => item[bindingList.primaryKey] === sourceItemId);\n              // éæ°æ å°å½åè¡\n              this.mappingRow(result[index], mappings, currentEntity, bindingPath);\n              result.splice(index, 1);\n            }\n            // å½åè¡å¤çå®æ\n            // å¤çæªæ å°çè¡\n            const emptyRows = bindingList.toArray().filter(bindingObject => {\n              const id = this.getValueByPath(bindingObject, mappings[bindingList.primaryKey]);\n              return !id;\n            });\n            if (emptyRows && emptyRows.length > 0) {\n              let rows = result;\n              if (result.length > emptyRows.length) {\n                rows = result.slice(0, emptyRows.length);\n                result = result.slice(emptyRows.length);\n              } else {\n                result = [];\n              }\n              rows.forEach((item, index) => {\n                const targetItem = emptyRows[index];\n                const entity = this.getEntityByPath(frameContext, bindingPaths, targetItem.primaryKeyValue);\n                this.mappingRow(item, mappings, entity, bindingPath);\n              });\n            }\n            // å¤çå©ä½å¾é\n            result.forEach((item) => {\n              const defaultValue = {};\n              Object.keys(mappings).forEach((prop: string) => {\n                const value = this.getValueByPath(item, prop);\n                const fields = mappings[prop];\n                const groups: any[] = fields.split(',').filter(p => p);\n                groups.forEach(group => {\n                  const paths = group.split('.').filter(p => p);\n                  this.setValueByPath(defaultValue, paths.join('.'), value);\n                });\n              });\n              defaultValues.push(defaultValue);\n            });\n            if (defaultValues.length > 0) {\n              this.formLoadingService.show();\n              const path = this.buildPath(bindingPath, this.viewModel.bindingData.list.currentId);\n              this.repository.batchAppendByPath(path, defaultValues).pipe(\n                tap(() => this.formLoadingService.hide())\n              ).subscribe();\n            }\n          }\n        }\n      });\n    }, 100);\n    return of(true);\n  }\n  /**\n   * å¤å¶ä¸»è¡¨æ°æ®\n   * @param id è¦å¤å¶çæ°æ®id\n   * @param fields è¦å¤å¶çå­æ®µ\n   * @description ä»æ¯æå¤å¶ä¸»è¡¨æ°æ®\n   * @deprecated è¯¥æ¹æ³å·²è¢«åºå¼ï¼è¯·ä½¿ç¨cloneæ¹æ³æ¿ä»£ã\n   */\n  public copy(id: string): Observable<any> {\n    if (!id) {\n      this.formNotifyService.warning(this.languageService.plsSelectCopyData, { hideTitle: true });\n      return EMPTY;\n    }\n\n    const befRepository = this.repository as BefRepository<any>;\n    const baseUri = befRepository.restService.baseUri;\n    const url = `${baseUri}/service/copymainobjvoaction`;\n    const requestInfo = befRepository.restService.buildRequestInfo();\n    const body = {\n      requestInfo,\n      dataID: id\n    };\n    const options = {\n      body\n    };\n    this.formLoadingService.show();\n    return befRepository.proxy.request(url, 'PUT', null, options).pipe(\n      tap(() => {\n        this.formLoadingService.hide();\n      }),\n      map((responseInfo: ResponseInfo) => {\n        const returnValue = responseInfo.returnValue;\n        const entity = this.repository.buildEntity(returnValue);\n        this.repository.entityCollection.addEntity(entity);\n        return entity;\n      }),\n    );\n  }\n  /**\n   * å¤å¶æ°æ®ï¼æ¯æä¸»è¡¨ãä»è¡¨ãä»ä»è¡¨ï¼\n   * @param id è¦å¤å¶çè¡\n   * @param path è¯·æ±è·¯å¾\n   * @returns \n   */\n  public clone(id: string, path: string) {\n    if (!id) {\n      this.formNotifyService.warning(this.languageService.plsSelectCopyData, { hideTitle: true });\n      return EMPTY;\n    }\n    if (!path) {\n      this.formNotifyService.warning(this.languageService.pathIsRequired, { hideTitle: true });\n      return EMPTY;\n    }\n    if (!path.startsWith('/')) {\n      path = '/' + path;\n    }\n    path = path.toLowerCase();\n    const bindingPath = this.viewModel.bindingPath;\n    const befRepository = this.repository as BefRepository<any>;\n    const baseUri = befRepository.restService.baseUri;\n    const url = `${baseUri}${path}`;\n    const requestInfo = befRepository.restService.buildRequestInfo();\n    const ids = this.buildIds(bindingPath);\n    ids.push(id);\n    const body = {\n      requestInfo,\n      dataID: ids.join(',')\n    };\n    const options = {\n      body\n    };\n    this.formLoadingService.show();\n    return befRepository.proxy.request(url, 'PUT', null, options).pipe(\n      tap(() => {\n        this.formLoadingService.hide();\n      }),\n      map((responseInfo: ResponseInfo) => {\n        const returnValue = responseInfo.returnValue;\n        let entity = null;\n        if (bindingPath.split('/').filter(p => p).length === 0) {\n          entity = this.repository.buildEntity(returnValue);\n          this.repository.entityCollection.addEntity(entity, true);\n        } else {\n          const fpath = this.buildPath(bindingPath, this.viewModel.bindingData.list.currentId);\n          entity = befRepository.entityManager.appendEntityByPath(fpath, returnValue, returnValue, true);\n        }\n        return entity;\n      }),\n    );\n  }\n\n  //#region æ§çå®ç°\n\n  /**\n   * å¤å¶è¡\n   * @param frameId frameId\n   * @param ignoreFields å¤å¶æ¶å¿½ç¥å­æ®µ\n   * @param repeat éå¤å¤å¶æ¬¡æ°ï¼é»è®¤ä¸º1\n   */\n  public copyRow(frameId: string, ignoreFields: string, repeat: number = 1) {\n    if (typeof repeat !== 'number') {\n      repeat = parseInt(repeat, 10);\n    }\n    if (repeat < 1) {\n      throw new Error('ArgumentError: repeat must >= 1');\n    }\n    // è·åå½åè¡\n    const frameContext = this.viewModel.frameContext.appContext.frameContextManager.getFrameContextById(frameId);\n    const primaryValue = frameContext.bindingData.list.currentId;\n    const bindingPath = frameContext.viewModel.bindingPath || '/';\n    let bindingData = null;\n    let currentItem: BindingObject = null;\n    if (bindingPath === '/') {\n      // ä¸»è¡¨ç´æ¥åå½åè¡\n      currentItem = frameContext.bindingData.list.currentItem;\n    } else {\n      // åä»è¡¨/ä»ä»è¡¨å½åè¡\n      const paths = bindingPath.split('/').filter(p => p);\n      currentItem = (frameContext.bindingData.getValue(paths) as BindingList).currentItem;\n    }\n    bindingData = currentItem.toJSON();\n    if (!currentItem.primaryKeyValue) {\n      if (this.formNotifyService) {\n        this.formNotifyService.warning(this.languageService.plsSelectCopyData, { hideTitle: true });\n      }\n      return EMPTY;\n    }\n    const ignoreFieldsArray = ignoreFields.split(',').filter(item => item);\n\n    const sources = new Array(repeat);\n    return from(sources).pipe(\n      concatMap(() => {\n        let action$ = null;\n        if (bindingPath !== '/') {\n          const fullPath = this.buildPath(bindingPath, primaryValue);\n          action$ = this.repository.appendByPath(fullPath);\n        } else {\n          action$ = this.repository.append();\n        }\n        return action$.pipe(\n          tap((entity: Entity) => {\n            // ä¿®æ­£å®ä½ä¸»é®\n            bindingData[entity.primaryKey] = entity.primaryValue;\n            // å¿½ç¥æå®å­æ®µ\n            ignoreFieldsArray.forEach((field: string) => {\n              const extractedFields = field.split('.').filter(item => item);\n              if (extractedFields.length === 1) {\n                delete bindingData[field];\n              }\n              const parent = extractedFields.slice(0, -1).reduce((prev, current, index) => {\n                return prev[current];\n              }, bindingData);\n              delete parent[extractedFields[extractedFields.length - 1]];\n            });\n            bindingData = Object.assign({}, entity.toJSON(), bindingData);\n            entity.load(bindingData, { loadChild: false });\n          }),\n          catchError(() => {\n            return EMPTY;\n          })\n        );\n      })\n    );\n  }\n  /**\n   * å¢éå¤éå¸®å©æ¹éèµå¼å¸®å©åäºä»¶\n   * @param frameId frameId\n   * @param mapFields å­æ®µæ å°\n   * @param associatedField å³èå­æ®µ\n   */\n  public afterIncrementalSelectHelpClose(frameId: string, mapFields: string, associatedField: string) {\n    const self: any = this;\n    const result = self.context && self.context.eventParam || [];\n    // tslint:disable-next-line: max-line-length\n    // const mapping = '{\"id\":\"userRef.userRef\", \"name\":\"name\", \"sex\":\"sex\",\"age\":\"userRef.userRef_Age\",\"address\":\"userRef.userRef_Address\",\"birthday\":\"userRef.userRef_Birthday\",\"height\":\"userRef.userRef_Height\",\"isMarried\":\"userRef.userRef_IsMarried\"}';\n    if (!associatedField) {\n      throw new Error('associated field can`t be empty.');\n    }\n    if (!mapFields) {\n      throw new Error('mapFields can`t be empty.');\n    }\n    const mappings = JSON.parse(mapFields);\n    const foreignKey = associatedField;\n    // å°éæ©äººåä¿å­å°uistateä¸­\n    const rootFrameContext = this.viewModel.frameContext.root;\n    // ä¸æ¯bindingPathåæframeIdå¤ç\n    let bindingPath = '/';\n    const appContext = this.injector.get<AppContext>(AppContext, null);\n    if (appContext) {\n      const frameContext = appContext.frameContextManager.getFrameContextById(frameId);\n      if (frameContext) {\n        bindingPath = frameContext.viewModel.bindingPath || '/';\n      } else {\n        throw new Error('frameId is invalid!');\n      }\n    }\n    // tslint:disable-next-line: no-string-literal\n    rootFrameContext.uiState['selections'] = result;\n    if (result && Array.isArray(result)) {\n      // æ ¹æ®bindingPathè·åbindingdataä¸­ç°ææ°æ®\n      const bindingPaths = bindingPath.split('/').filter(item => item);\n      const currentData: BindingList = this.viewModel.bindingData.getValue(bindingPaths);\n      const currentDataArray = currentData.toArray();\n      // æ¾å°resultä¸­æï¼ä½bindingDataä¸­æ²¡æçï¼ä¸ºå¾æ°å¢é¡¹\n      const appends = [];\n      result.reduce((prev: Array<any>, item) => {\n        const itemId = item && item[currentData.primaryKey] || null;\n        const isExist = currentDataArray.find((bindingObject: BindingObject) => bindingObject[foreignKey][foreignKey] === itemId);\n        if (!isExist) {\n          prev.push(item);\n        }\n        return prev;\n      }, appends);\n\n      // æ¾å°bindingDataä¸­æï¼resultä¸­æ²¡æçï¼ä¸ºå¾å é¤é¡¹\n      const removes = [];\n      currentDataArray.reduce((results: any, item: BindingObject) => {\n        const index = result.findIndex(selectItem => selectItem[currentData.primaryKey] === item[foreignKey][foreignKey]);\n        if (index === -1) {\n          results.push(item.primaryKeyValue);\n        }\n        return results;\n      }, removes);\n\n      // console.log('addItems', appends, 'removeItems', removes);\n      // è°ç¨åç«¯æ¥å£æ°å¢æ°æ®\n      const addAction$ = from(appends).pipe(\n        concatMap(item => {\n          const path = this.buildPath(bindingPath, this.viewModel.bindingData.list.currentId);\n          return this.repository.appendByPath(path).pipe(\n            tap((entity: Entity) => {\n              Object.keys(mappings).forEach(prop => {\n                const value = this.getValueByPath(item, prop);\n                const fields = mappings[prop];\n                const groups: any[] = fields.split(',').filter(p => p);\n                groups.forEach(group => {\n                  const paths = group.split('.').filter(p => p);\n                  this.setValueByPath(entity, paths.join('.'), value);\n                });\n              });\n            }),\n            catchError(() => {\n              return EMPTY;\n            })\n          );\n        })\n      );\n\n      const removeAction$ = from(removes).pipe(\n        concatMap(item => {\n          const path = this.buildPath(bindingPath, this.viewModel.bindingData.list.currentId);\n          return this.repository.removeByPath(path, item).pipe(\n            tap(() => {\n              const befRepository: BefRepository<any> = this.repository as BefRepository<any>;\n              befRepository.entityManager.removeEntityByPath(path, item);\n            }),\n            catchError(() => {\n              return EMPTY;\n            })\n          );\n        })\n      );\n      if (!appends && !removes || appends && appends.length < 1 && removes && removes.length < 1) {\n        return of(true);\n      }\n      return concat(addAction$, removeAction$).pipe(\n        catchError(() => EMPTY)\n      );\n    }\n    return of(true);\n  }\n  // todo:æ¨¡æç¨æ·æä½ï¼å¾åç«¯æ¥å£æ¯æä¸»è¡¨æ¹éæ°å¢åéå\n  /**\n   * å¤éå¸®å©æ¹éèµå¼å¸®å©åäºä»¶\n   */\n  public beforeMultiSelectHelpOpen() {\n    return this.clearHelpSelections();\n  }\n  /**\n   * å¤éå¸®å©æ¹éèµå¼å¸®å©åäºä»¶\n   * @param frameId ç»å®è·¯å¾\n   * @param mapFields å­æ®µæ å°\n   * @param commandFrameId åè°å½ä»¤æå¨frameId\n   * @param commandName åè°å½ä»¤\n   * @deprecated æ¨¡æç¨æ·æä½ï¼å¾æ¹éèµå¼æ¯æä¸»è¡¨ååºå¼\n   */\n  public afterMultiSelectHelpClose(frameId: string, mapFields: string, commandFrameId?: string, commandName?: string) {\n    const self: any = this;\n    const result = self.context && self.context.eventParam || [];\n    if (result && Array.isArray(result)) {\n      // è°ç¨åç«¯æ¥å£æ°å¢æ°æ®\n      if (!result || result.length < 1) {\n        return of(true);\n      }\n      this.onHelpClose.next({ frameId, mapFields, data: result, commandFrameId, commandName });\n      return of(true);\n    }\n    return of(true);\n  }\n  /**\n    * å¸®å©å³é­åå¤çå¨\n    * @param frameId frameid\n    * @param mapFields mapFields\n    * @param result å¸®å©æ°æ®ç»æ\n    */\n  private onHelpCloseHandler(frameId: string, mapFields: string, result: any[]) {\n    if (!mapFields) {\n      throw new Error('mapFields can`t be empty.');\n    }\n    const mappings = JSON.parse(mapFields);\n    // ä¸æ¯bindingPathåæframeIdå¤ç\n    let bindingPath = '/';\n    const appContext = this.injector.get<AppContext>(AppContext, null);\n    if (appContext) {\n      const frameContext = appContext.frameContextManager.getFrameContextById(frameId);\n      if (frameContext) {\n        bindingPath = frameContext.viewModel.bindingPath || '/';\n      } else {\n        throw new Error('frameId is invalid!');\n      }\n    }\n    // å°éæ©äººåä¿å­å°uistateä¸­\n    const rootFrameContext = this.viewModel.frameContext.root;\n    const befRepository = this.repository as BefRepository<any>;\n    const bindingPaths = bindingPath.split('/').filter(p => p);\n    // tslint:disable-next-line: no-string-literal\n    rootFrameContext.uiState['selections'] = result;\n    if (result && Array.isArray(result)) {\n      const addAction$ = from(result).pipe(\n        concatMap(item => {\n          const requestInfo = befRepository.restService.buildRequestInfo();\n          if (bindingPaths.length > 0) {\n            const path = this.buildPath(bindingPath, this.viewModel.bindingData.list.currentId);\n            return befRepository.restService.createByPath(path, requestInfo).pipe(\n              tap((responseInfo: ResponseInfo) => {\n                const data = responseInfo.returnValue;\n                const newEntity = befRepository.entityManager.appendEntityByPath(path, data, data);\n                Object.keys(mappings).forEach(prop => {\n                  const value = this.getValueByPath(item, prop);\n                  const fields = mappings[prop];\n                  const groups: any[] = fields.split(',').filter(p => p);\n                  groups.forEach(group => {\n                    const paths = group.split('.').filter(p => p);\n                    this.setValueByPath(newEntity, paths.join('.'), value);\n                  });\n                });\n                return newEntity;\n              })\n            );\n          } else {\n            return befRepository.restService.create(null, requestInfo).pipe(\n              tap((responseInfo: ResponseInfo) => {\n                const data = responseInfo.returnValue;\n                const newEntity = this.repository.buildEntity(data);\n                Object.keys(mappings).forEach(prop => {\n                  const value = this.getValueByPath(item, prop);\n                  const fields = mappings[prop];\n                  const groups: any[] = fields.split(',').filter(p => p);\n                  groups.forEach(group => {\n                    const paths = group.split('.').filter(p => p);\n                    this.setValueByPath(newEntity, paths.join('.'), value);\n                  });\n                });\n                this.repository.entityCollection.addEntity(newEntity);\n                return newEntity;\n              })\n            );\n          }\n        })\n      );\n      // const formLoadingService = this.injector.get<FormLoadingService>(FormLoadingService, null);\n      if (this.formLoadingService) {\n        this.suspendFrameContextEvent(frameId);\n        this.formLoadingService.show();\n        this.formLoadingService.setSuspend(true);\n      }\n      return addAction$.pipe(\n        last(),\n      ).pipe(\n        switchMap(() => {\n          const primaryValue = this.viewModel.bindingData.list.currentId;\n          if (primaryValue) {\n            return befRepository.updateChangesById(primaryValue);\n          } else {\n            return of(null);\n          }\n        })\n      ).subscribe(() => {\n        if (this.formLoadingService) {\n          this.resumeFrameContextEvent(frameId);\n          this.formLoadingService.setSuspend(false);\n          this.formLoadingService.hide();\n        }\n      }, () => {\n        if (this.formLoadingService) {\n          this.resumeFrameContextEvent(frameId);\n          this.formLoadingService.setSuspend(false);\n          this.formLoadingService.hide();\n        }\n      });\n    }\n    return of(null);\n  }\n  private suspendFrameContextEvent(frameId: string) {\n    const appContext = this.injector.get<AppContext>(AppContext, null);\n    if (appContext) {\n      const frameContext = appContext.frameContextManager.getFrameContextById(frameId);\n      frameContext.suspend = true;\n    }\n  }\n  private resumeFrameContextEvent(frameId: string) {\n    const appContext = this.injector.get<AppContext>(AppContext, null);\n    if (appContext) {\n      const frameContext = appContext.frameContextManager.getFrameContextById(frameId);\n      frameContext.suspend = false;\n      frameContext.appContext.messagePipe.next('bindData');\n    }\n  }\n\n  //#endregion\n  private setValueByPath(target: object, path: string, value: any) {\n    if (target) {\n      const paths = path.split('.');\n      if (paths.length <= 1) {\n        target[path] = value;\n      } else {\n        paths.slice(0, -1).reduce((prev, path) => {\n          if (!(prev.hasOwnProperty(path) || prev['__proto__'].hasOwnProperty(path))) {\n            prev[path] = {};\n          }\n          return prev[path];\n        }, target)[paths[paths.length - 1]] = value;\n      }\n    }\n  }\n  private getValueByPath(target: object, path: string) {\n    const paths = path.split('.');\n    if (paths.length < 1) {\n      return;\n    }\n    if (paths.length === 1) {\n      return target[path];\n    }\n    let result = null;\n    paths.forEach((prop, index) => {\n      if (index === 0) {\n        result = target && target[prop] || null;\n      } else {\n        result = result && result[prop] || null;\n      }\n    });\n    return result;\n  }\n  /**\n   * æé å­è¡¨è·¯å¾\n   * @param bindingPath ç»å®è·¯å¾\n   * @param id id\n   */\n  private buildPath(bindingPath: string, id: any) {\n    let path = '/' + id;\n    const subPaths = bindingPath.split('/');\n    if (subPaths.length > 0) {\n      // eg:bindingPathå½¢å¦/edus/grades,splitåæ¯['', 'edus', 'grades']\n      // å æ­¤indexä»1å¼å§\n      for (let index = 1; index < subPaths.length - 1; index++) {\n        const subPath = subPaths[index];\n        const subData = this.viewModel.bindingData[subPath];\n        if (!subData || !subData.currentId) {\n          throw Error(`è·åå­è¡¨å®æ´è·¯å¾åºéï¼æ¾ä¸å°${subData}å¯¹åºçå­è¡¨ï¼æå¯¹åºå­è¡¨æ²¡æå½åè¡ã`);\n        }\n        path += `/${subPath}/${subData.currentId}`;\n      }\n    }\n    path += '/' + subPaths[subPaths.length - 1];\n\n    return path;\n  }\n  /**\n   * è·åç»å®è·¯å¾çå½åè¡æ°ç»\n   * @param bindingPath bindingPath\n   * @returns \n   */\n  private buildIds(bindingPath: string): string[] {\n    const bindingPaths = bindingPath.split('/').filter(p => p);\n    const primaryValue = this.viewModel.bindingData.list.currentId;\n    const result = [];\n    const paths = [];\n    if (bindingPaths.length > 0) {\n      result.push(primaryValue);\n      // ä»è¡¨æä»ä»è¡¨è¦å¤å¶çè¡ä¸ä¸å®æ¯å½åè¡ï¼ç¨æ·å¯ä»¥æå®\n      bindingPaths.pop();\n      bindingPaths.forEach((path: string) => {\n        paths.push(path);\n        const bindingList = this.viewModel.bindingData.getValue(paths) as BindingList;\n        if (bindingList) {\n          result.push(bindingList.currentId);\n        }\n      });\n    }\n    return result;\n  }\n  private updateBindingData(input: any, ids: Array<any>) {\n    const { controlType = null, value = null, options = {}, dataType = null } = input || {};\n    if (controlType) {\n      // å¯¹å¸®å©åç¹æ®å¤ç\n      if (controlType === 'lookup' || controlType === 'combo-lookup') {\n        const mapFields = options.mapFields;\n        this.updateLookupField(ids, value, mapFields);\n      } else {\n        this.updateSimpleField(ids, value, input);\n      }\n    }\n  }\n  private updateSimpleField(ids: Array<any>, value: any, column: any) {\n    if (!column) {\n      return;\n    }\n    const currentColumnType = column.dataType;\n    // å­å¨è¡ç¼è¾å¨\n    let result = value;\n    if (currentColumnType === 'date') {\n      let dateStr = this.dateService.formatTo(value, 'yyyy-MM-dd');\n      if (!dateStr) {\n        dateStr = '0001-01-01T00:00:00';\n      }\n      result = dateStr;\n    } else if (currentColumnType === 'number') {\n      result = Number(value) || 0;\n    }\n    const field = column.field;\n    ids.forEach(id => {\n      this.updateBindingList(id, field, result);\n    });\n  }\n  private updateLookupField(ids: Array<any>, helpData: any, mapFields: any) {\n    if (!mapFields) {\n      return;\n    }\n    let helpFields = Object.keys(mapFields);\n    const idIndex = helpFields.findIndex(item => item === 'id');\n    if (helpFields.includes('id') && idIndex !== 0) {\n      helpFields.splice(idIndex, 1);\n      helpFields = ['id', ...helpFields];\n    }\n    helpFields.forEach((helpField: any) => {\n      let helpValue: any = '';\n      if (helpData) {\n        if (helpData instanceof Array) {\n          helpValue = helpData.map((item: any) => {\n            return this.getValue(helpField, item);\n          }).join(',');\n        } else {\n          helpValue = this.getValue(helpField, helpData);\n        }\n      }\n      ids.forEach(id => {\n        this.updateBindingList(id, mapFields[helpField], helpValue);\n      });\n    });\n  }\n  private updateBindingList(primaryValue: any, propertyName: string, value: any) {\n    const viewModel = this.viewModel || null;\n    if (!viewModel || !propertyName) {\n      return;\n    }\n    // æ´æ°ä¸»è¡¨é¨åè¡çå­æ®µ\n    const propertyNames = propertyName.split('.').filter(item => item);\n    const bindingObject = this.bindingList.findById(primaryValue);\n\n    if (propertyNames.length < 2) {\n      bindingObject.setValue(propertyName, value, true, true);\n    } else {\n      let targetBindingObject = null;\n      const fpaths = propertyNames.slice(0, propertyNames.length - 1);\n      const targetPropertyName = propertyNames[propertyNames.length - 1];\n      fpaths.forEach(prop => {\n        targetBindingObject = targetBindingObject && targetBindingObject[prop] || bindingObject[prop];\n      });\n      // todo:éè¦æ·»å å¼ååäºä»¶\n      targetBindingObject.setValue(targetPropertyName, value, true, true);\n    }\n  }\n  private getBindingPathArray(): any[] {\n    const path = this.viewModel.bindingPath;\n    if (path) {\n      return path.split('/').filter(n => n !== '');\n    }\n    return [];\n  }\n  private getValue(f: string, data: any) {\n    let val = '';\n    if (f.indexOf('.') === -1) {\n      val = data[f];\n    } else {\n      val = f.split('.').reduce((a, b) => {\n        return a[b];\n      }, data);\n    }\n\n    return val;\n  }\n  protected get bindingList(): BindingList {\n    // æ ¹å®ä½\n    if (this.viewModel.bindingPath === '/' || !this.viewModel.bindingPath) {\n      return this.viewModel.bindingData.list;\n    }\n    // å­å®ä½\n    let bindingPath = this.viewModel.bindingPath.substr(1);\n    bindingPath = bindingPath[0].toLowerCase() + bindingPath.substring(1, bindingPath.length);\n    const paths = bindingPath.split('/');\n\n    const filteredPaths = paths.filter((part: string) => {\n      return part !== '';\n    });\n    return this.viewModel.bindingData.getValue(filteredPaths);\n  }\n  /**\n   * æ ¹æ®æ å°å°æ°æ®èµå¼ç»bindingData\n   * @param data \n   * @param mapFields \n   * @param bindingData \n   */\n  private mappingRow(data: any, mapFields: any, entity: Entity, bindingPath: string) {\n    Object.keys(mapFields).forEach((prop: string) => {\n      const value = this.getValueByPath(data, prop);\n      const fields = mapFields[prop];\n      const groups: any[] = fields.split(',').filter(p => p);\n      groups.forEach(group => {\n        const paths = group.split('.').filter(p => p);\n        this.setValueByPath(entity, paths.join('.'), value);\n      });\n    });\n  }\n  /**\n   * éè¿frameIdè·åå¯¹åºçç»ä»¶ä¸ä¸æ\n   * @param frameId frameId\n   * @returns \n   */\n  private getFrameContextById(frameId: string): FrameContext | null {\n    if (!frameId) {\n      return null;\n    }\n    const appContext = this.injector.get<AppContext>(AppContext, null);\n    let frameContext: FrameContext = null;\n    if (appContext) {\n      frameContext = appContext.frameContextManager.getFrameContextById(frameId);\n    }\n    return frameContext;\n  }\n  private getEntityByPath(frameContext: FrameContext, bindingPaths: any[], currentId: string) {\n    bindingPaths = [...bindingPaths];\n    const id = frameContext.bindingData.list.currentId;\n    const entity: Entity = frameContext.repository.entityCollection.getEntityById(id) as Entity;\n    let item: Entity = entity;\n    const paths = [];\n    const tailPath = bindingPaths.pop();\n    const parent = bindingPaths.reduce((object: Entity, path: string) => {\n      paths.push(path);\n      if (object && (object.hasOwnProperty(path) || object['__proto__'].hasOwnProperty(path))) {\n        const value = object[path];\n        if (value && value instanceof EntityList) {\n          const bindingList = frameContext.bindingData.getValue(paths) as BindingList;\n          const currentItemId = bindingList.currentId;\n          return value.get(currentItemId);\n        } else {\n          return value;\n        }\n      } else {\n        return null;\n      }\n    }, item);\n    if (parent instanceof Entity) {\n      const list = parent[tailPath] as EntityList<any>;\n      if (list) {\n        return list.get(currentId);\n      } else {\n        throw new Error(`æ æçbindingPath.`);\n      }\n    } else {\n      throw new Error(`æ æçbindingPath.`);\n    }\n  }\n  private endEdit(frameContext: FrameContext) {\n    const appContext: AppContext = frameContext && frameContext.getFormAppContext();\n    return of(null).pipe(\n      tap(() => {\n        if (appContext) {\n          appContext.messagePipe.next({ type: 'endEdit' });\n        }\n      }),\n      // todo: ä¸åºè¯¥ä½¿ç¨delayï¼åºè¯¥ä¸²æµ\n      delay(5)\n    );\n  }\n}\n","import { Injectable, Injector } from '@angular/core';\nimport { FrameContext, Entity } from '@farris/devkit';\nimport { BefRepository } from '@farris/bef';\nimport { FormLoadingService } from './form-loading/form-loading.service';\nimport { RuntimeFrameworkService } from './rtf-service';\nimport { tap } from 'rxjs/operators';\nimport { Observable, of, EMPTY } from 'rxjs';\n// tslint:disable: max-line-length\n@Injectable()\nexport class DiscussionGroupService {\n  /**\n   * å®ä½ä»åº\n   */\n  private get repository(): BefRepository<Entity> {\n    return this.frameContext.repository as BefRepository<Entity>;\n  }\n  /**\n   * å½ä»¤åæ°\n   */\n  private get params() {\n    return this['context'] && this['context']['eventParam'] || {};\n  }\n  constructor(private injector: Injector, private frameContext: FrameContext, private loadingService: FormLoadingService, private runtimeFrameworkService: RuntimeFrameworkService) {\n  }\n\n  public addComment(id?: string, summary?: string, configId?: string, text?: string, visibility?: string, parentId?: string): Observable<any> {\n    id = id || this.frameContext && this.frameContext.bindingData.list.currentId || null;\n    if (!id) {\n      return EMPTY;\n    }\n    const params = this.buildAddCommentParam(id, text, parentId, summary, visibility, configId);\n    const restService = this.repository.restService;\n    const url = '/api/runtime/comment/v1.0/bill-comment/comment';\n    const requestInfo = restService.buildRequestInfo();\n    const options = {\n      body: {\n        requestInfo,\n        ...params\n      }\n    };\n    this.loadingService.show();\n    return restService.invoke(url, 'POST', null, options).pipe(\n      tap(() => {\n        this.loadingService.hide();\n      })\n    );\n  }\n  /**\n   * æ¥è¯¢è¯è®º\n   * @param id id\n   */\n  public queryComments(id: string, configId: string, pageIndex?: number | null, pageSize?: number | null): Observable<any> {\n    id = id || this.frameContext && this.frameContext.bindingData.list.currentId || null;\n    if (!id) {\n      return EMPTY;\n    }\n\n    const restService = this.repository.restService;\n\n    const url = this.buildQueryCommentsUrl(id, pageIndex, pageSize, configId);\n    this.loadingService.show();\n    return restService.invoke(url, 'GET').pipe(\n      tap(() => {\n        this.loadingService.hide();\n      })\n    );\n  }\n  /**\n   * æ¥è¯¢ææé¨é¨ä¿¡æ¯\n   */\n  public queryAllOrgs() {\n    const restService = this.repository.restService;\n    const url = '/api/runtime/sys/v1.0/sysOrgs?param={\"layer\":\"1\"}';\n    this.loadingService.show();\n    return restService.invoke(url, 'GET').pipe(\n      tap(() => {\n        this.loadingService.hide();\n      })\n    );\n  }\n  /**\n   * æ¥è¯¢å¸¸ç¨@ç¨æ· \n   * @param pageIndex \n   * @param pageSize \n   */\n  public queryFrequentAtUsers(pageIndex?: number | null, pageSize?: number | null) {\n    const restService = this.repository.restService;\n    const url = this.buildQueryFrequentAtUsersUrl(pageIndex, pageSize);\n    this.loadingService.show();\n    return restService.invoke(url, 'GET').pipe(\n      tap(() => {\n        this.loadingService.hide();\n      })\n    );\n  }\n  /**\n   * è·åatç¨æ·åè¡¨\n   * @param user ç¨æ·ç¼å·æèç¨æ·åç§°ï¼è¿æ»¤ä½¿ç¨ï¼\n   * @param pageIndex pageIndex\n   * @param pageSize pageSize\n   */\n  public queryAtUsers(user?: string, pageIndex?: number | null, pageSize?: number | null) {\n    const restService = this.repository.restService;\n    const url = this.buildQueryAtUsersUrl(user, pageIndex, pageSize);\n    this.loadingService.show();\n    return restService.invoke(url, 'GET').pipe(\n      tap(() => {\n        this.loadingService.hide();\n      })\n    );\n  }\n  /**\n   * æé è·åè¯è®ºåè¡¨çurl\n   * @param id id\n   */\n  private buildQueryCommentsUrl(id: string, pageIndex: number | null, pageSize: number | null, configId: string) {\n    if (typeof pageIndex === 'undefined' || pageIndex === null) {\n      pageIndex = this.params.pageIndex || 0;\n    }\n    if (typeof pageSize === 'undefined' || pageSize === null) {\n      pageSize = this.params.pageSize || 10;\n    }\n    const serverUri = this.repository.serverUri;\n    // const funcId = this.runtimeFrameworkService && this.runtimeFrameworkService.funcId || '';\n    return `/api/runtime/comment/v1.0/bill-comment/comment/byBill?configId=${configId}&billId=${id}&pageSize=${pageSize}&pageIndex=${pageIndex}`;\n  }\n  /**\n   * æé è·å@ç¨æ·url\n   */\n  private buildQueryAtUsersUrl(user?: string, pageIndex?: number | null, pageSize?: number | null) {\n    const params: string[] = [];\n    if (typeof pageIndex === 'undefined' || pageIndex === null) {\n      pageIndex = this.params.pageIndex || 0;\n    }\n    if (typeof pageSize === 'undefined' || pageSize === null) {\n      pageSize = this.params.pageSize || 1000;\n    }\n    if (user) {\n      params.push(`param=${user}`);\n    }\n    params.push(`pageSize=${pageSize}`);\n    params.push(`pageIndex=${pageIndex}`);\n    return `/api/runtime/comment/v1.0/bill-comment/atUser?${params.join('&')}`;\n  }\n  private buildQueryFrequentAtUsersUrl(pageIndex?: number | null, pageSize?: number | null) {\n    const params: string[] = [];\n    if (typeof pageIndex === 'undefined' || pageIndex === null) {\n      pageIndex = this.params.pageIndex || 0;\n    }\n    if (typeof pageSize === 'undefined' || pageSize === null) {\n      pageSize = this.params.pageSize || 6;\n    }\n    params.push(`pageSize=${pageSize}`);\n    params.push(`pageIndex=${pageIndex}`);\n    return `/api/runtime/comment/v1.0/bill-comment/frequentAtUsers?${params.join('&')}`;\n  }\n  private buildAddCommentParam(id: string, text: string, parentId: string, summary: string, visibility: string, configId: string) {\n    if (typeof text === 'undefined') {\n      text = this.params.text;\n    }\n    if (typeof parentId === 'undefined') {\n      parentId = this.params.parentId;\n    }\n    if (typeof visibility === 'undefined') {\n      visibility = this.params.visibility;\n    }\n    return {\n      'bill': {\n        'billId': id,\n        'configId': configId,\n        'summary': summary\n      },\n      'comment': {\n        'billId': id,\n        'configId': configId,\n        'parentId': parentId || null,\n        'text': text,\n        'visibility': visibility\n      }\n    }\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { FrameContext } from '@farris/devkit';\nimport { ListFilterHandler, QueryCondition } from '@farris/ui-list-filter';\n\n@Injectable()\nexport class ListFilterConditionsService implements ListFilterHandler {\n\n    constructor(private frameContext: FrameContext) { }\n\n    public setCurrentFilterConditions(conditions: QueryCondition[]): void {\n        this.frameContext.uiState['currentFilterConditions'] = conditions;\n    }\n\n}\n","import { HttpClient } from \"@angular/common/http\";\nimport { Inject, Injectable, Injector } from \"@angular/core\";\nimport { Observable } from \"rxjs\";\nimport { FORM_PATH_TOKEN, FormManifest, IFormManifestService } from \"@farris/devkit\";\nimport { share } from \"rxjs/operators\";\n\n@Injectable()\nexport class FormManifestService implements IFormManifestService {\n  private static mainfests = new Map<string, Observable<FormManifest>>();\n  constructor(\n    private injector: Injector,\n    @Inject(FORM_PATH_TOKEN) private modulePath,\n    private httpClient: HttpClient\n  ) { }\n  public load(): Observable<FormManifest> {\n    if (this.modulePath.endsWith('\\/')) {\n      this.modulePath = this.modulePath.substring(0, this.modulePath.length - 1);\n    }\n    const formManifestPath = `${this.modulePath}/expressions/form.manifest.json?version=${new Date().valueOf().toString()}`;\n    const request$ = FormManifestService.mainfests.get(this.modulePath);\n    if (request$) {\n      return request$;\n    } else {\n      const req$ = this.httpClient.get<FormManifest>(formManifestPath, { responseType: 'json' }).pipe(share());\n      FormManifestService.mainfests.set(this.modulePath, req$);\n      return req$;\n    }\n  }\n}\n","import { HttpClient } from \"@angular/common/http\";\nimport { Inject, Injectable, Injector } from \"@angular/core\";\nimport { Observable, of } from \"rxjs\";\nimport { share, switchMap } from \"rxjs/operators\";\nimport { FORM_PATH_TOKEN, FrameContext, FormExpressionsManifest, FormManifest, IFormExpressionManifestService, FORM_MANIFEST_SERVICE_TOKEN, IFormManifestService } from \"@farris/devkit\";\n\n@Injectable()\nexport class FormExpressionManifestService implements IFormExpressionManifestService {\n  private static mainfests = new Map<string, Observable<any>>();\n  constructor(\n    private injector: Injector,\n    private frameContext: FrameContext,\n    private httpClient: HttpClient,\n    @Inject(FORM_PATH_TOKEN) private modulePath,\n    @Inject(FORM_MANIFEST_SERVICE_TOKEN) private formManifestService: IFormManifestService) { }\n\n  public load(): Observable<any> {\n    if (this.modulePath.endsWith('\\/')) {\n      this.modulePath = this.modulePath.substring(0, this.modulePath.length - 1);\n    }\n\n    return this.formManifestService.load().pipe(\n      switchMap((formManifest: FormManifest) => {\n        const expressions = formManifest.expressions;\n        const expressionManifest = expressions.find((expressionManifest: FormExpressionsManifest) => expressionManifest.ns === this.frameContext.namespace);\n        if (expressionManifest) {\n          const expressionPath = `${this.modulePath}/expressions/${expressionManifest.path}?version=${new Date().valueOf().toString()}`;\n          const key = `${this.modulePath}/expressions/${expressionManifest.path}`;\n          const request$ = FormExpressionManifestService.mainfests.get(key);\n          if (request$) {\n            return request$;\n          } else {\n            const req$ = this.httpClient.get(expressionPath, { responseType: 'json' }).pipe(share());\n            FormExpressionManifestService.mainfests.set(key, req$);\n            return req$;\n          }\n        } else {\n          return of({});\n        }\n      })\n    );\n  }\n}","import { Inject, Injectable, Injector } from \"@angular/core\";\nimport { BigNumber } from 'bignumber.js';\nimport moment from 'moment';\nimport { NumberFormat, UserSettings, UserSettingsToken } from \"@farris/devkit\";\n\n@Injectable()\nexport class LocalizationService {\n  constructor(private injector: Injector, @Inject(UserSettingsToken) private userSettings: UserSettings) { }\n\n  /**\n   * ç¨æ·éç½®æ ¼å¼\n   */\n  public get formats(): { date: { dateFormat: string, timeFormat: string, dateTimeFormat: string }, number: { negativeSign: string, numberDecimalDigits: number, numberDecimalSeparator: string, numberGroupSeparator: string }, [prop: string]: any } {\n    const { dateFormat = null, timeFormat = null } = this.userSettings || {};\n    let dateTimeFormat = null;\n    if (dateFormat && timeFormat) {\n      dateTimeFormat = `${dateFormat} ${timeFormat}`;\n    }\n    const date = {\n      dateFormat,\n      timeFormat,\n      dateTimeFormat\n    };\n    const { negativeSign = null, numberDecimalDigits = null, numberDecimalSeparator = null, numberGroupSeparator = null } = this.numberFormat || {};\n    const number = {\n      negativeSign,\n      numberDecimalDigits,\n      numberDecimalSeparator,\n      numberGroupSeparator\n    };\n    return { date, number };\n  }\n  /**\n   * æ ¹æ®æ°æ®ç±»åæ¬å°åæ°æ®\n   * @param value value\n   * @param dataType æ°æ®ç±»å\n   * @returns string\n   */\n  public localize(value: any, dataType: string): string {\n    if (dataType && value) {\n      dataType = dataType.toLowerCase();\n      if (dataType === 'date') {\n        return this.transformDate(value);\n      } else if (dataType === 'datetime') {\n        return this.transformDateTime(value);\n      } else if (dataType === 'number') {\n        return this.transformNumber(value);\n      } else {\n        return value;\n      }\n    } else {\n      return value;\n    }\n  }\n  /**\n   * æ ¹æ®å½éåç±»åè·åæ ¼å¼åå­ç¬¦ä¸²\n   * @param localizationType å½éåç±»å\n   * @returns \n   */\n  public getFormat(localizationType: string): string {\n    if (localizationType) {\n      localizationType = localizationType.toLowerCase();\n    }\n    if (localizationType === 'date') {\n      return this.formats.date.dateFormat;\n    } else if (localizationType === 'datetime') {\n      return this.formats.date.dateTimeFormat;\n    } else {\n      return '';\n    }\n  }\n  /**\n   * è½¬æ¢æ¥æ\n   * @param value value\n   */\n  private transformDate(value: any) {\n    let dateFormat = this.userSettings && this.userSettings.dateFormat || 'YYYY-MM-DD';\n    if (!dateFormat || !value) {\n      return value;\n    }\n    const date = moment(value);\n    const isValid = date.isValid();\n    if (!isValid) {\n      return value;\n    }\n    dateFormat = this.parseDateFormat(dateFormat);\n    return date.format(dateFormat);\n  }\n  /**\n   * è½¬æ¢æ¥ææ¶é´\n   * @param value value\n   * todo: ç®åæ æ³å®ä¹æ¥ææ¶é´æ ¼å¼\n   */\n  private transformDateTime(value: any) {\n    let dateFormat = this.userSettings && this.userSettings.dateFormat || 'YYYY-MM-DD';\n    let timeFormat = this.userSettings && this.userSettings.timeFormat || 'HH:mm:ss';\n    if (!dateFormat || !timeFormat) {\n      return value;\n    }\n    const dateTime = moment(value);\n    const isValid = dateTime.isValid();\n    if (!isValid) {\n      return value;\n    }\n    if (dateFormat) {\n      dateFormat = this.parseDateFormat(dateFormat);\n    }\n    if (timeFormat) {\n      timeFormat = this.parseTimeFormat(timeFormat);\n    }\n    const dateTimeFormat = dateFormat + ' ' + timeFormat;\n    return dateTime.format(dateTimeFormat);\n  }\n  /**\n   * è½¬æ¢æ°å­\n   * @param value value\n   */\n  private transformNumber(value): string {\n    if (value === null || value === undefined || value === '') {\n      return '';\n    }\n    const bigNumber = new BigNumber(value);\n    // å¦æä¸æ¯æ°å­ï¼ä¸åä»»ä½å¤ç\n    if (!BigNumber.isBigNumber(bigNumber)) {\n      return value;\n    }\n    const isNegative = bigNumber.isNegative();\n    const format = this.buildNumberFormat();\n    const { negativeSign = null, numberDecimalDigits = null } = this.numberFormat || {};\n    if (isNegative) {\n      if (negativeSign !== null) {\n        format.prefix = negativeSign;\n        return bigNumber.absoluteValue().toFormat(numberDecimalDigits, null, format);\n      }\n    }\n    return bigNumber.toFormat(numberDecimalDigits, null, format);\n  }\n  /**\n   * è½¬æ¢æ¥ææ ¼å¼è§åä¸ºmomentçformatè§å\n   * @param format format\n   */\n  private parseDateFormat(format: string) {\n    return format.replace(/y/g, 'Y').replace(/d/g, 'D');\n  }\n  /**\n   * è½¬æ¢æ¶é´æ ¼å¼è§åä¸ºmomentçformatè§å\n   * @param format format\n   */\n  private parseTimeFormat(format: string) {\n    return format.replace(/M/g, 'm');\n  }\n  /**\n   * æé bignumberæ°å­æ ¼å¼åéé¡¹\n   */\n  private buildNumberFormat() {\n    if (this.numberFormat) {\n      const { numberDecimalSeparator = null, numberGroupSeparator = null } = this.numberFormat;\n      const format: any = {\n        groupSize: 3,\n      };\n      if (numberDecimalSeparator !== null) {\n        format.decimalSeparator = numberDecimalSeparator;\n      }\n      if (numberGroupSeparator !== null) {\n        format.groupSeparator = numberGroupSeparator;\n      }\n      return format;\n    }\n  }\n  private get numberFormat(): NumberFormat {\n    return this.userSettings && this.userSettings.numberFormat || null;\n  }\n}","import { CommandContext } from \"@farris/devkit\";\n\nexport abstract class Service {\n  public context: CommandContext;\n  /**\n   * å½ä»¤åæ°\n   */\n  public get eventParam(){\n    return this.context && this.context.eventParam || null;\n  }\n}","import { Injectable } from \"@angular/core\";\nimport { Service } from \"./service\";\nimport { DatagridComponent } from '@farris/ui-datagrid';\nimport { QueryCondition } from '@farris/component-querycondition';\nimport { CommandContext, FrameContext } from \"@farris/devkit\";\n@Injectable()\nexport class DataGridService extends Service {\n  /**\n   * æ¸ç©ºææå¾éè¡\n   * @description åæ¶å¾éå½åè¡¨åææå¾éè¡\n   */\n  public clearChecks() {\n    // const params = this.eventParam;\n    // if (params && Array.isArray(params)) {\n    // const param = params[0];\n    // if (param instanceof QueryCondition) {\n    const gridComponents = this.getFormGridComponents(this.context);\n    if (gridComponents && gridComponents.length > 0) {\n      gridComponents.forEach((gridComponent: DatagridComponent) => {\n        let clearSelections = true;\n        if (gridComponent.hasOwnProperty('clearSelectionsWhenDataIsEmpty')) {\n          clearSelections = gridComponent['clearSelectionsWhenDataIsEmpty'];\n        }\n        if (clearSelections) {\n          gridComponent.clearCheckeds(true);\n        }\n      });\n    }\n    // }\n    // }\n  }\n  /**\n   * åæ¶å¾éå é¤çè¡\n   * @param ids ids\n   * @returns \n   * @description åæ¶å¾éå½åç»å®è·¯å¾ä¸æå®æ°æ®ï¼æ¸ç©ºä¸çº§è¡¨æ ¼ä¸­ææå¾éè¡ï¼ä»ä¾å é¤åºæ¯ä½¿ç¨\n   */\n  public uncheckDeletedRows(ids: any) {\n    if (typeof ids === 'string') {\n      if (ids.indexOf(',') !== -1) {\n        ids = ids.split(',').filter(p => p);\n      } else {\n        ids = [ids];\n      }\n    }\n    if (!ids || ids.length < 1) {\n      return;\n    }\n    // è·åbindingPathåns\n    const frameContext = this.context.frameContext;\n    if (!frameContext) {\n      return;\n    }\n    const appContext = frameContext.appContext;\n    const ns = frameContext.namespace;\n    const bindingPath = frameContext.viewModel && frameContext.viewModel.bindingPath;\n    if (!appContext) {\n      return;\n    }\n    // æ ¹æ®bindingPathè·åææå¯è½çframeContext\n    const frameContexts = appContext.frameContextManager.getFrameContextsByNamespace(ns);\n    const frameContextsInCurrentBindingPath = frameContexts.filter(frameContext => frameContext && frameContext.viewModel && frameContext.viewModel.bindingPath === bindingPath);\n    // è·åè¿äºframeä¸­ææçè¡¨æ ¼ç»ä»¶map\n    const gridInCurrentFrame = this.getGridComponentByFrameContexts(frameContextsInCurrentBindingPath);\n    if (!gridInCurrentFrame) {\n      return;\n    }\n    // ä¸ä¸ªbindingPathä¸åºè¯¥åªæä¸ä¸ªgrid\n    const grid: DatagridComponent = gridInCurrentFrame.pop();\n    // æ¸ç©ºå½ä»¤æå¨çframeä¸è¡¨æ ¼çæå®å¾é\n    if(grid){\n      grid.unCheckRows(ids, true);\n    }\n    // æ¸ç©ºä¸çº§è¡¨æ ¼çææå¾éè¡æ°æ®\n    const childrenFrameContexts = frameContexts.filter(frameContext => frameContext.viewModel.bindingPath !== bindingPath && frameContext.viewModel.bindingPath.startsWith(bindingPath));\n    const childrenGridComponents = this.getGridComponentByFrameContexts(childrenFrameContexts);\n    // æ¸ç©ºå½ä»¤æå¨frame\n    if (childrenGridComponents && childrenGridComponents.length > 0) {\n      childrenGridComponents.forEach((gridComponent: DatagridComponent) => {\n        // æ¸ç©ºææå¾é\n        gridComponent.checkedRows = [];\n      });\n    }\n  }\n  /**\n   * åæ¶å¾éè¡\n   * @param ids ids\n   * @returns \n   */\n  public uncheckRows(ids: any) {\n    if (typeof ids === 'string') {\n      ids = [ids];\n    }\n    if (!ids || ids.length < 1) {\n      return;\n    }\n    const gridComponents = this.getFormGridComponents(this.context);\n    if (gridComponents && gridComponents.length > 0) {\n      gridComponents.forEach((gridComponent: DatagridComponent) => {\n        gridComponent.unCheckRows(ids, true);\n      });\n    }\n  }\n  /**\n   * æ ¹æ®å½ä»¤ä¸ä¸æè·åå½åå½ä»¤æå¨ç»ä»¶çè¡¨æ ¼å®ä¾\n   * @param commandContext å½ä»¤ä¸ä¸æ\n   * @returns \n   */\n  private getFormGridComponents(commandContext: CommandContext) {\n    let grids = [];\n    const frameContext = commandContext && commandContext.frameContext;\n    const appContext = frameContext && frameContext.appContext || null;\n    if (appContext) {\n      const componentRefs: Map<string, Map<string, any>> = appContext.componentRefs;\n      const collect = Array.from(componentRefs.values());// [Map<string,any>,Map<string,any>]\n      collect.forEach((item: Map<string, any>) => {\n        const components = Array.from(item.values());\n        const bindingPath = frameContext\n        const gridComponents = components.filter((component: any) => component instanceof DatagridComponent);\n        grids = grids.concat(gridComponents);\n      });\n    }\n    return grids;\n  }\n  private getGridComponentByFrameContexts(frameContexts: FrameContext[]) {\n    return frameContexts.reduce((result, frameContext) => {\n      const appContext = frameContext.appContext;\n      const frameId = frameContext.frameId;\n      // è·åå½åç»ä»¶ä¸ææçç»ä»¶å®ä¾\n      const componentsRef = appContext.componentRefs.get(frameId);\n      const grids = componentsRef && Array.from(componentsRef.values()).filter(component => component instanceof DatagridComponent);\n      if (grids && grids.length > 0) {\n        result = result.concat(grids);\n      }\n      return result;\n    }, []);\n  }\n}","import { Injectable, Injector } from \"@angular/core\";\nimport { FrameContext } from \"@farris/devkit\";\nimport { EMPTY } from \"rxjs\";\nimport { AttentionService, AttentionElement } from '@farris/ui-tooltip';\n\n\n@Injectable()\nexport class FormAttentionService {\n  constructor(private injector: Injector, private frameContext: FrameContext, private attentionService: AttentionService) { }\n  /**\n   * éªçæé®\n   * @param ids idå­ç¬¦ä¸²ææ°ç»\n   * @param duration æ¶é´é´é\n   * @returns \n   */\n  public blink(ids: string | string[], duration?: any) {\n    if (typeof ids === 'string') {\n      ids = ids.split(',').filter(p => p);\n    }\n    if (!Array.isArray(ids) || ids.length < 1) {\n      return EMPTY;\n    }\n    if (typeof duration === 'string') {\n      duration = duration.trim();\n    }\n    if (!duration) {\n      duration = 600;\n    }\n    duration = parseInt(duration);\n    if (isNaN(duration) || duration <= 0) {\n      duration = 600;\n    }\n    const elements: AttentionElement[] = ids.map((item: string) => {\n      return {\n        idOrEl: item,\n        // type:'',\n        // class:''\n      };\n    });\n    this.attentionService.catchAttention(elements, duration);\n  }\n}","export namespace Prop {\n  /**\n   * ç¹å¾é\n   */\n  export interface IPropSet {\n    id: string;\n    /**\n     * ç¹å¾éç¼å·\n     */\n    code: string;\n    /**\n     * å¨æå­æ®µï¼è¿åå¼ä¸­ä¸å­å¨ï¼ç¨äºå±ç¤ºå½åè¯­è¨çææ¬\n     */\n    name?: string;\n    /**\n     * ç¹å¾éåç§°-è±æ\n     */\n    name_en: string;\n    /**\n     * ç¹å¾éåç§°-ç®ä½\n     */\n    name_chs: string;\n    /**\n     * ç¹å¾éåç§°-ç¹ä½\n     */\n    name_cht: string;\n  }\n  /**\n   * ç¹å¾é¡¹\n   */\n  export interface IProp {\n    /**\n     * ç¹å¾é¡¹id\n     */\n    id: string;\n    /**\n     * ç¹å¾é¡¹ç¼å·\n     */\n    code: string;\n    /**\n     * ç¼å·å­æ®µï¼æä¸ä½¿ç¨ï¼\n     */\n    codefield: string;\n    /**\n     * å¨æå­æ®µ\n     */\n    name?: string;\n    /**\n     * ç¹å¾é¡¹åç§°-è±æ\n     */\n    name_en: string;\n    /**\n     * ç¹å¾é¡¹ç¼å·-ç®ä½\n     */\n    name_chs: string;\n    /**\n     * ç¹å¾é¡¹ç¼å·-ç¹ä½\n     */\n    name_cht: string;\n    /**\n     * ç¹å¾å¼\n     */\n    value: any;\n    /**\n     * å¼å­æ®µ\n     */\n    valuefield: string;\n    /**\n     * ç¹å¾é¡¹å¯¹åºçè¾å¥æ§ä»¶ç±»å\n     */\n    inputtype: string;\n    /**\n     * æ°å­ç²¾åº¦\n     */\n    digitalaccuracy: number;\n    /**\n     * ç¹å¾éid\n     */\n    setid: string;\n    helpid: string;\n    /**\n     * æä¸¾æ°æ®æº\n     * @attention æ¥å£è¿åç»æä¸ºå­ç¬¦ä¸²\n     */\n    enuminfo: string;\n    /**\n     * æä¸¾æ°æ®æº\n     */\n    data: IEnumInfo[];\n    /**\n     * æ åä»£ç éæ¯å¦ä¸ºæ \n     */\n    setistree: string;\n    /**\n     * æ åä»£ç éid\n     */\n    codesetid: string;\n    /**\n     * ææ¬å­æ®µ\n     */\n    textfield: string;\n    /**\n     * è¿æ»¤æ¡ä»¶\n     */\n    filtercondition: any;\n    /**\n     * å¿å¡«\n     */\n    isrequired: string | boolean;\n    /**\n     * åªè¯»\n     */\n    isreadonly: string | boolean;\n    /**\n     * æåº\n     */\n    sortorder: number;\n\n    timestamp_createdon: string;\n    timestamp_lastchangedon: string;\n\n    timestamp_createdby: string;\n    timestamp_lastchangedby: string;\n\n  }\n  /**\n   * æä¸¾æ°æ®æºæ ¼å¼\n   */\n  export interface IEnumInfo {\n    id: string;\n    text: string;\n  }\n  export interface IReturnValue {\n    propset: IPropSet[],\n    props: IProp[]\n  }\n  export enum InputType {\n    enum = 'Enum',\n    string = 'String',\n    help = 'Help',\n    number = 'Number',\n    date = 'Date'\n  }\n}\n","import { Injectable, Injector } from \"@angular/core\";\nimport { BefRepository, ResponseInfo } from \"@farris/bef\";\nimport { Repository } from '@farris/devkit';\nimport { Observable } from \"rxjs\";\nimport { map } from \"rxjs/operators\";\nimport { Prop } from \"./types\";\n\n@Injectable()\nexport class FeatureRepository {\n  constructor(\n    private injector: Injector,\n    private repository: Repository<any>,\n  ) { }\n  /**\n   * æ ¹æ®ç©æidè·åç©æç¹å¾é¡¹åç¹å¾å¼ï¼å¬å±é»è®¤å¼ï¼\n   * @param materialId ç©æid\n   */\n  public getFeaturesByMaterialId(materialId: string): Observable<ResponseInfo> {\n    const url = '/api/scm/scmfnd/v1.0/scmcommoncmpservice/service/getmaterialprops';\n    const body = {\n      materialID: materialId\n    };\n    const options = {\n      body\n    };\n    const befRepository: BefRepository<any> = this.repository as BefRepository<any>;\n    return befRepository.proxy.request(url, 'put', null, options);\n  }\n  /**\n   * æ ¹æ®ç©æidåç©æç¹å¾ä¿å­åçhashè·åè¯¥ç©æå·²ç»å­å¨çç¹å¾é¡¹å¼\n   * @param materialId ç©æId\n   * @param configID å¯¹åºè¯¥ç©æçç¹å¾é¡¹hash\n   * @returns \n   */\n  public getConfigedValueByFeatureId(materialId: string, configID: string, configType: string = 'Materials'): Observable<ResponseInfo> {\n    const url = '/api/bf/df/v1.0/charactconfigservice/service/getcharactconfiginfo';\n    const body = { objType: configType, objID: materialId, configID };\n    const befRepository: BefRepository<any> = this.repository as BefRepository<any>;\n    const options = {\n      body\n    };\n    return befRepository.proxy.request(url, 'put', null, options);\n  }\n  /**\n   * ä¿å­ç©æç¹å¾é¡¹\n   * @param materialId ç©æid\n   * @param charactValue ç¹å¾å¼\n   * @param configType éç½®ç±»å\n   * @returns \n   */\n  public applyFeatures(materialId: string, charactValue: any, configType: string = 'Materials') {\n    const body = { objType: configType, objID: materialId, charactValue };\n    const befRepository: BefRepository<any> = this.repository as BefRepository<any>;\n    const options = {\n      body\n    };\n    return befRepository.proxy.request('/api/bf/df/v1.0/charactconfigservice/service/matchcharactconfigid', 'put', null, options);\n  }\n  /**\n   * è·åå¸®å©ä¿¡æ¯\n   * @param helpid å¸®å©id\n   * @param filter è¿æ»¤æ¡ä»¶\n   * @param params åæ°\n   * @returns \n   */\n  public getHelpInfo(helpid: string, filter: string, params: any): Observable<any> {\n    const url = '/api/scm/scmfnd/v1.0/scmcommoncmpservice/service/gethelpdata';\n    const httpParams: any = {};\n    if (params) {\n      if (params.pageIndex) {\n        httpParams['pageIndex'] = JSON.stringify(params.pageIndex - 0);\n      }\n      if (params.pageSize) {\n        httpParams['pageSize'] = JSON.stringify(params.pageSize - 0);\n      }\n      if (params.condition) {\n        httpParams['condition'] = JSON.stringify(params.condition);\n      }\n      if (params.searchValue) {\n        httpParams['search'] = params.searchValue;\n      }\n    }\n    const body = {\n      helpID: helpid,\n      queryParam: JSON.stringify(httpParams),\n      filterStr: filter\n    };\n    const befRepository: BefRepository<any> = this.repository as BefRepository<any>;\n    const options = {\n      body\n    };\n    return befRepository.proxy.request(url, 'put', null, options);\n  }\n}","import { Inject, Injectable, Injector, LOCALE_ID, Optional } from \"@angular/core\";\nimport { BefRepository, ResponseInfo } from \"@farris/bef\";\nimport { FrameContext, RestfulService, Repository } from '@farris/devkit';\nimport { Observable } from \"rxjs\";\nimport { map } from \"rxjs/operators\";\nimport { FeatureRepository } from \"./feature-repository\";\nimport { Prop } from \"./types\";\n\n@Injectable()\nexport class FeatureDataService {\n  constructor(\n    private injector: Injector,\n    private repository: FeatureRepository,\n    @Optional() @Inject(LOCALE_ID) private localeId?: string\n  ) {\n    this.localeId = this.localeId || 'zh-CHS';\n  }\n  /**\n   * æ ¹æ®ç©æidè·åç©æç¹å¾é¡¹åç¹å¾å¼ï¼å¬å±é»è®¤å¼ï¼\n   * @param materialId ç©æid\n   */\n  public getFeaturesByMaterialId(materialId: string): Observable<Prop.IReturnValue> {\n    return this.repository.getFeaturesByMaterialId(materialId).pipe(\n      map((response: ResponseInfo) => {\n        if (!response || !response.returnValue) {\n          return null;\n        }\n        const returnValue = JSON.parse(response.returnValue);\n        const result: Prop.IReturnValue = { propset: [], props: [] };\n        const propsets = returnValue.propset || null;\n        const props = returnValue.props || null;\n        if (propsets && Array.isArray(propsets)) {\n          propsets.map((propset: Prop.IPropSet) => {\n            propset.name = this.translateName(propset);\n            return propset;\n          });\n          result.propset = propsets;\n        }\n        if (props && Array.isArray(props) && props.length > 0) {\n          props.map((prop: Prop.IProp) => {\n            // å¤çå¤è¯­\n            prop.name = this.translateName(prop);\n            // å¤çæä¸¾\n            if (prop.inputtype === Prop.InputType.enum && prop.enuminfo) {\n              prop.data = JSON.parse(prop.enuminfo);\n            }\n            // å¤çå¿å¡«ååªè¯»\n            prop.isreadonly = prop.isreadonly === '1' ? true : false;\n            prop.isrequired = prop.isrequired === '1' ? true : false;\n            return prop;\n          });\n          result.props = props;\n        }\n        return result;\n      })\n    );\n  }\n  /**\n   * æ ¹æ®ç©æidåç©æç¹å¾ä¿å­åçhashè·åè¯¥ç©æå·²ç»å­å¨çç¹å¾é¡¹å¼\n   * @param materialId ç©æId\n   * @param configID å¯¹åºè¯¥ç©æçç¹å¾é¡¹hash\n   * @returns \n   */\n  public getConfigedValueByFeatureId(materialId: string, configID: string, configType: string = 'Materials'): Observable<any> {\n    return this.repository.getConfigedValueByFeatureId(materialId, configID, configType).pipe(map((result: any) => {\n      return JSON.parse(result);\n    }));\n  }\n  /**\n   * ä¿å­ç©æç¹å¾é¡¹\n   * @param materialId ç©æid\n   * @param charactValue ç¹å¾å¼\n   * @param configType éç½®ç±»å\n   * @returns \n   */\n  public applyFeatures(materialId: string, charactValue: any, configType: string = 'Materials') {\n    return this.repository.applyFeatures(materialId, charactValue, configType).pipe(map((config: any) => {\n      return JSON.parse(config);\n    }));\n  }\n  /**\n   * è·åå¸®å©ä¿¡æ¯\n   * @param helpid å¸®å©id\n   * @param filter è¿æ»¤æ¡ä»¶\n   * @param params åæ°\n   * @returns \n   */\n  public getHelpInfo(helpid: string, filter: string, params: any): Observable<any> {\n    const url = '/api/scm/scmfnd/v1.0/scmcommoncmpservice/service/gethelpdata';\n    const httpParams: any = {};\n    if (params) {\n      if (params.pageIndex) {\n        httpParams['pageIndex'] = JSON.stringify(params.pageIndex - 0);\n      }\n      if (params.pageSize) {\n        httpParams['pageSize'] = JSON.stringify(params.pageSize - 0);\n      }\n      if (params.condition) {\n        httpParams['condition'] = JSON.stringify(params.condition);\n      }\n      if (params.searchValue) {\n        httpParams['search'] = params.searchValue;\n      }\n    }\n    const body = {\n      helpID: helpid,\n      queryParam: JSON.stringify(httpParams),\n      filterStr: filter\n    };\n    const befRepository: BefRepository<any> = null;//this.repository as BefRepository<any>;\n    const options = {\n      body\n    };\n    return befRepository.proxy.request(url, 'put', null, options).pipe(\n      map((result: any) => JSON.parse(result))\n    );\n  }\n  /**\n   * å½éåç¹å¾é¡¹æç¹å¾éåç§°\n   * @param object ç¹å¾éæç¹å¾é¡¹å¯¹è±¡\n   * @returns \n   */\n  private translateName(object: Prop.IPropSet | Prop.IProp): string {\n    if (!object) {\n      return null;\n    }\n    let name = null;\n    switch (this.localeId) {\n      case 'en': {\n        name = object['name_en'];\n      } break;\n      case 'zh-CHS': {\n        name = object['name_chs'];\n      } break;\n      case 'zh-CHT': {\n        name = object['name_cht'];\n      } break;\n      default: name = object['name_chs'];\n    }\n    return name;\n  }\n}","import { Injectable, Injector } from \"@angular/core\";\nimport { FeatureEditorService } from '@farris/ui-feature-editor';\nimport { FormNotifyService } from \"../form-notify.service\";\nimport { map, switchMap, tap } from \"rxjs/operators\";\nimport { FormLoadingService } from \"../form-loading/form-loading.service\";\nimport { FeatureDataService } from './feature-data.service';\nimport { LanguageService } from '../languag.service';\nimport { of } from \"rxjs\";\n\n@Injectable()\nexport class FeatureEditService {\n  constructor(\n    private injector: Injector,\n    private featureEditorService: FeatureEditorService,\n    private featureDataService: FeatureDataService,\n    private loadingService: FormLoadingService,\n    private notifyService: FormNotifyService,\n    private languageService: LanguageService,\n  ) { }\n\n  public edit(materialId: string, materialFeatureId?: string, options?: any) {\n    if (!materialId) {\n      throw new Error('[FeatureEditService]ç©æidä¸è½ä¸ºç©ºï¼');\n    }\n    if (!options) {\n      options = {};\n    }\n    if (typeof options === 'string' && options.startsWith('{') && options.endsWith('}')) {\n      options = JSON.parse(options);\n    }\n    options.getHelpInfo = this.featureDataService.getHelpInfo;\n    this.loadingService.show();\n    return this.featureDataService.getFeaturesByMaterialId(materialId).pipe(\n      tap((result: any) => {\n        this.loadingService.hide();\n        const returnValue = result || null;\n        if (returnValue) {\n          const featureInfo = JSON.parse(returnValue);\n          const props = featureInfo.props || null;\n          if (!props || props.length < 1) {\n            this.notifyService.warning(this.languageService.propsIsEmpty);\n            return;\n          }\n          this.featureEditorService.show(props, options);\n        } else {\n          this.notifyService.error(this.languageService.propsIsEmpty);\n        }\n      })\n    );\n  }\n  private buildFeatures(materialId: string, materialFeatureId?: string) {\n    const features$ = this.featureDataService.getFeaturesByMaterialId(materialId);\n    return features$.pipe(\n      switchMap(featureSet => {\n        if (materialFeatureId) {\n          const configedFeatures$ = this.featureDataService.getConfigedValueByFeatureId(materialFeatureId, materialFeatureId);\n          return configedFeatures$.pipe(\n            map(defaultConfigs => {\n              const featureTemplate = featureSet.props;\n              const features = this.mergeFeatures(featureTemplate, defaultConfigs);\n              return features;\n            })\n          );\n        } else {\n          return of(featureSet.props);\n        }\n      })\n    );\n\n  }\n  private mergeFeatures(featureTemplate: any, defaultConfigs: any) {\n    return null;\n  }\n}","import { Injectable, Injector } from \"@angular/core\";\nimport { BigNumber } from 'bignumber.js';\nimport { AppContext, FrameContext, Repository, ENTITY_TEMPLATE, ResolveService, ExpressionUtil, ExpressionExecutor } from \"@farris/devkit\";\nimport { Observable, of } from \"rxjs\";\n\n@Injectable()\nexport class ExpressionService {\n  constructor(private injector: Injector, private resolveService: ResolveService, private frameContext: FrameContext, private expressionExecutor: ExpressionExecutor) { }\n  /**\n   * æ§è¡è¡¨è¾¾å¼è®¡ç®\n   * @param expression è¡¨è¾¾å¼\n   * @param customContext èªå®ä¹ä¸ä¸æ\n   * @returns \n   */\n  public execute(expression: string, customContext?: { [prop: string]: any }): any {\n    const deps = this.resolveService.resolve(expression);\n    const groupDependencies = ExpressionUtil.getGroupFunctionDependency(expression, this.frameContext.repository.entityTypeInfo);\n    const entityContext = this.buildEntityContext(deps, groupDependencies);\n    const stateContext = this.buildStateContext();\n    const context = {\n      [this.entityOriginalNodeCode]: entityContext,\n      ...stateContext,\n      BigNumber,\n      frameContext: this.frameContext,\n      bindingData: this.frameContext.bindingData,\n      repository: this.frameContext.repository,\n      ...customContext\n    }\n    return this.expressionExecutor.eval(expression, context);\n  }\n  /**\n   * æ§è¡è¡¨è¾¾å¼ï¼è¿åå¯è§å¯å¯¹è±¡ï¼\n   * @param expression è¡¨è¾¾å¼\n   * @param customContext èªå®ä¹ä¸ä¸æ\n   * @returns \n   */\n  public executeAsync(expression: string, customContext?: { [prop: string]: any }): Observable<any> {\n    const result = this.execute(expression, customContext);\n    return of(result);\n  }\n  /**\n   * æé å®ä½ä¸ä¸æ\n   * @param deps \n   * @param groupDependencies \n   * @param context \n   * @returns \n   */\n  private buildEntityContext(deps: string[], groupDependencies: string[], context?: { [prop: string]: any }) {\n    let isGroupdMainEntity = false;\n    deps.forEach((dep: string) => {\n      const isEntityDependency = this.isEntityDependency(dep);\n      const isGroupDependency = groupDependencies.findIndex(item => item === dep) !== -1;\n      // å¦æä¾èµçæ¯stateï¼æ éå¤çï¼ç°å¨éè¦ç¡®å®çæ¯è¿åå¤å°å®ä½çé®é¢ï¼åstateæ²¡æå³ç³»\n      // è¡¨è¾¾å¼ä¾èµäºå®ä½\n      if (isEntityDependency) {\n        // æ¯èåä¾èµ\n        if (isGroupDependency) {\n          const dependencyLength = dep.split('/').filter(p => p).length - 1;\n          if (dependencyLength === 1) {\n            // èåäºä¸»è¡¨å­æ®µï¼ææä¸»è¡¨æ°æ®é½éè¦åä¸è¿ç®ï¼æ­¤æ¶å·²ç»ç¡®å®è®¡ç®çå®ä½ä¸ä¸æäºã\n            isGroupdMainEntity = true;\n          } else {\n            // èåäºå­è¡¨å­æ®µï¼åªéè¦ä¼ éå½åå®ä½\n          }\n        } else {\n          // å½åä¾èµä¸æ¯èåï¼åªéè¦ä¼ éå½åå®ä½\n        }\n      }\n    });\n    const data = this.getEntity();\n    if (isGroupdMainEntity) {\n      const collection = this.frameContext.repository.entityCollection.toJSON();\n      data['__type__'] = 'List';\n      data['__items__'] = collection;\n    }\n    return data;\n  }\n  /**\n   * æ¯å¦ä¸ºå®ä½ä¾èµ\n   * @param dep \n   * @returns \n   */\n  private isEntityDependency(dep: string) {\n    return dep.startsWith(ENTITY_TEMPLATE);\n  }\n  /**\n   * è·åå®ä½\n   * @param event \n   * @returns \n   */\n  public getEntity() {\n    const entityTypeInfo = this.frameContext.repository.entityTypeInfo;\n    const bindingData = this.frameContext.bindingData;\n    const childrenEntityPaths = [];\n    ExpressionUtil.getChildrenEntityPaths(entityTypeInfo, childrenEntityPaths);\n    const entity = this.frameContext.bindingData.list.currentItem.toJSON();\n    entity['__type__'] = 'Entity';\n    if (!childrenEntityPaths || childrenEntityPaths.length < 1) {\n      return entity;\n    }\n    // æ¾å°ææå­è¡¨\n    childrenEntityPaths.forEach((paths: string[]) => {\n      const row = ExpressionUtil.getCurrentRowByPaths(paths, bindingData);\n      if (row) {\n        const propertyName = paths.pop();\n        let parent = paths.reduce((object: any, path: string) => {\n          return object && object[path] || null;\n        }, entity);\n        const node = { __items__: [...parent[propertyName]], ...row, __type__: 'List' };\n        parent[propertyName] = node;\n      }\n    });\n    return entity;\n  }\n  /**\n   * è·åä¸»å®ä½åå§å­æ®µå\n   */\n  protected get entityOriginalNodeCode(): string {\n    const repository = this.injector.get(Repository);\n    return repository && repository.entityTypeInfo && repository.entityTypeInfo.entityInfo && repository.entityTypeInfo.entityInfo.originalCode || null;\n  }\n  /**\n   * æé åéä¸ä¸æ\n   * @param event \n   * @returns \n   */\n  public buildStateContext() {\n    const ns = this.frameContext.namespace;\n    const appContext = this.injector.get<AppContext>(AppContext, null);\n    const frameContexts = appContext.frameContextManager.getFrameContextsByNamespace(ns);\n    const result = {};\n    if (frameContexts && frameContexts.length > 0) {\n      const anonymousFrameContext = frameContexts[0];\n      const rootFrameContext = anonymousFrameContext.getVirtualRootFrameContext();\n      if (rootFrameContext) {\n        const uiState = rootFrameContext.viewModel.uiState;\n        const propertyNames = Object.getOwnPropertyNames(uiState) || [];\n        propertyNames.forEach((prop: string) => {\n          if (prop.match(/^[a-zA-Z0-9_\\$]+$/g) !== null) {\n            result[prop] = uiState[prop];\n          }\n        });\n      }\n    }\n    return result;\n  }\n}","import { ApplicationRef, ChangeDetectorRef, Injectable, Injector } from \"@angular/core\";\n\n/**\n * angular èå¼æ£æ¥æå¡\n */\n@Injectable()\nexport class DirtyCheckingService {\n  constructor(public injector: Injector, private cd: ChangeDetectorRef, private appRef: ApplicationRef) {\n  }\n  /**\n   * Checks this view and its children. \n   * @param global æ¯å¦å¨å±æ£æ¥\n   */\n  public detectChanges(global?: boolean | string) {\n    global = (global === true || global === 'true') ? true : false;\n    if (global && this.appRef) {\n      this.appRef.tick();\n    } else if (this.cd) {\n      this.cd.detectChanges();\n    }\n  }\n  /**\n   * å¨æå®æ¶é´ï¼msï¼åè§¦åAngularèå¼æ£æ¥\n   * @param duration è¶æ¶æ¶é´(ms)\n   * @param global æ¯å¦å¨å±æ£æ¥\n   */\n  public detectChangesAfter(duration: number, global?: boolean | string) {\n    global = (global === true || global === 'true') ? true : false;\n    if (isNaN(duration)) {\n      return;\n    }\n    if (global && this.appRef) {\n      window.setTimeout(() => {\n        this.appRef.tick();\n      }, duration);\n    } else if (this.cd) {\n      window.setTimeout(() => {\n        this.cd.detectChanges();\n      }, duration);\n    }\n  }\n}","import { Injectable, Injector } from \"@angular/core\";\nimport { EMPTY, of } from \"rxjs\";\nimport { switchMap, tap } from \"rxjs/operators\";\nimport { BefRepository } from \"@farris/bef\";\nimport { FrameContext, DataPathCreator, Repository, DataPath, EntityList, BindingList, Entity } from \"@farris/devkit\";\nimport { LanguageService } from \"./languag.service\";\nimport { FormMessageService } from \"./form-message.service\";\n\n@Injectable()\nexport class PopUpService {\n  constructor(\n    private injector: Injector,\n    private frameContext: FrameContext,\n    private repository: Repository<any>,\n    private languageService: LanguageService,\n    private messageService: FormMessageService\n  ) { }\n  public confirm() { }\n  /**\n   * åæ¶åæ´\n   * @param frameId \n   * @param id \n   * @returns \n   */\n  public cancel(frameId: string, id?: string) {\n    const frameContext = this.frameContext.appContext.frameContextManager.getFrameContextById(frameId);\n    if (!frameContext) {\n      throw new Error(`[PopUpService]Invalid frameId ${frameId}`);\n    }\n    const primaryValue = this.frameContext.bindingData.list.currentId;\n    const bindingPath = frameContext.viewModel.bindingPath;\n    const bindingPaths = bindingPath.split('/').filter(p => p);\n    if (!id) {\n      const bindingList = this.frameContext.bindingData.getList() as BindingList;\n      id = bindingList.currentId;\n    }\n    const befRepository = this.repository as BefRepository<any>;\n    const longPaths = (DataPathCreator.createByShortPathFromRoot(bindingPaths, befRepository.entityManager, this.frameContext.bindingData) as DataPath).toArray().map((path: string) => path.split(':')[1]);\n    const entityListPaths = Array.from(longPaths);\n    //èå¼å½åè¡¨å½åè¡\n    entityListPaths.pop();\n    const dialogRef = this.frameContext.frameComponent['dialogRef'];\n    if (entityListPaths.length < 1) {\n      // ä¸»è¡¨\n      const entity = this.repository.entityCollection.getEntityById(id) as Entity;\n      const originalData = entity['originalData'];\n      entity.load(originalData, { loadChild: false });\n    } else {\n      const entityList = befRepository.entityManager.getEntityNodeByPath(entityListPaths) as EntityList<any>;\n      if (entityList) {\n        const originalData: any[] = entityList['originalData'];\n        const item = originalData.find(item => item.id === id);\n        if (item) {\n          // å·²ææ°æ®ï¼è¿ååæ´\n          const entity: Entity = befRepository.entityManager.getEntityByPath(longPaths) as Entity;\n          if (entity.changes && entity.changes.length > 0) {\n            return this.messageService.confirm(this.languageService.cancelWithoutSave).pipe(\n              tap((result: boolean) => {\n                if (result) {\n                  entity.load(item, { loadChild: false });\n                  entity.changes.splice(0, entity.changes.length);\n                }\n              })\n            );\n          } else {\n            // æ²¡æä¿®æ¹ï¼ç´æ¥å³é­\n            if (dialogRef) {\n              dialogRef.close();\n            }\n          }\n        } else {\n          // æ°å¢çæ°æ®ï¼å é¤\n          const paths = this.buildPath(bindingPath, primaryValue);\n          return this.messageService.confirm(this.languageService.cancelWithoutSave).pipe(\n            switchMap(result => {\n              if (result) {\n                return befRepository.removeEntityByPath(paths, id).pipe(\n                  tap(() => {\n                    befRepository.entityManager.removeEntityByPath(paths, id);\n\n                    if (entityList.count() === 0 && dialogRef) {\n                      dialogRef.close();\n                    }\n                  })\n                );\n              } else {\n                return EMPTY;\n              }\n            })\n          );\n        }\n      }\n    }\n    return of([]);\n  }\n  /**\n   * åæ­¥å½åè¡\n   */\n  public updateCurrentRow(id?: string) {\n    const bindingPath = this.frameContext.viewModel.bindingPath;\n    const bindingPaths = bindingPath.split('/').filter(p => p);\n    // const frameId = this.frameContext.frameId;\n    const root = this.frameContext.appContext.frameContextManager.getRootFrameContext();\n    const primaryKeyValue = root.bindingData.list.currentId;\n    this.frameContext.bindingData.list.setCurrentId(primaryKeyValue);\n    if (bindingPaths.length > 0) {\n      const paths = [];\n      bindingPaths.forEach((path: string, index: number, array) => {\n        paths.push(path);\n        const bindingList = root.bindingData.getValue(paths) as BindingList;\n        if (bindingList) {\n          const currentId = bindingList.currentId;\n          const modalBindingList = this.frameContext.bindingData.getValue(paths) as BindingList;\n          if (index === bindingPath.length - 1 && id) {\n            modalBindingList.setCurrentId(id);\n          } else if (modalBindingList) {\n            modalBindingList.setCurrentId(currentId);\n          }\n        }\n      });\n    }\n  }\n  public closeCheck() {\n    const frameContext = this.frameContext;\n    const bindingPath = frameContext.viewModel.bindingPath;\n    const bindingPaths = bindingPath.split('/').filter(p => p);\n    const befRepository = this.repository as BefRepository<any>;\n    const longPaths = (DataPathCreator.createByShortPathFromRoot(bindingPaths, befRepository.entityManager, this.frameContext.bindingData) as DataPath).toArray().map((path: string) => path.split(':')[1]);\n    const entityListPaths = Array.from(longPaths);\n    entityListPaths.pop();\n    const entityList = befRepository.entityManager.getEntityNodeByPath(entityListPaths) as EntityList<any>;\n    const dialogRef = this.frameContext.frameComponent['dialogRef'];\n    if (entityList.count() === 0 && dialogRef) {\n      dialogRef.close();\n    }\n  }\n  /**\n   * æé å­è¡¨è·¯å¾\n   * @param bindingPath ç»å®è·¯å¾\n   * @param id id\n   */\n  private buildPath(bindingPath: string, id: any) {\n    let path = '/' + id;\n    const subPaths = bindingPath.split('/');\n    if (subPaths.length > 0) {\n      // eg:bindingPathå½¢å¦/edus/grades,splitåæ¯['', 'edus', 'grades']\n      // å æ­¤indexä»1å¼å§\n      for (let index = 1; index < subPaths.length - 1; index++) {\n        const subPath = subPaths[index];\n        const subData = this.frameContext.viewModel.bindingData[subPath];\n        if (!subData || !subData.currentId) {\n          throw Error(`è·åå­è¡¨å®æ´è·¯å¾åºéï¼æ¾ä¸å°${subData}å¯¹åºçå­è¡¨ï¼æå¯¹åºå­è¡¨æ²¡æå½åè¡ã`);\n        }\n        path += `/${subPath}/${subData.currentId}`;\n      }\n    }\n    path += '/' + subPaths[subPaths.length - 1];\n\n    return path;\n  }\n}","import { Injectable, Injector } from \"@angular/core\";\nimport { AppContext, DataPropInfo, DataTypeInfo, Entity, FrameContext, NgFormControl, Repository } from \"@farris/devkit\";\n\n@Injectable()\nexport class FormService {\n  constructor(\n    private injector: Injector,\n    private appContext: AppContext,\n    private repository: Repository<Entity>\n  ) {\n  }\n  /**\n   * æ ¹æ®å­æ®µè·¯å¾è·åè¯¥å­æ®µå¨å¡çæè¡¨æ ¼ä¸­çç´¢å¼\n   * @param source ngFormControlsæany[][]\n   * @param propertyPath å­æ®µé¤bindingPathä¹å¤çå®æ´è·¯å¾\n   * @returns \n   */\n  public getIndex(source: { [propertyName: string]: NgFormControl } | any[], propertyPath: string) {\n    if (Array.isArray(source)) {\n      const combine: any[] = source.reduce((result: any[], group: any[]) => {\n        return result.concat(group);\n      }, []);\n      return combine.findIndex((item: any) => item.field === propertyPath);\n    } else if (Object.prototype.toString.call(source) === '[object Object]') {\n      return Object.keys(source).findIndex(key => source[key].binding === propertyPath);\n    }\n  }\n  \n}","import { Injectable } from \"@angular/core\";\nimport { FrameContext } from \"@farris/devkit\";\n\n@Injectable()\nexport class ViewModelService {\n  constructor() { }\n  public getGridColumns(frameContext: FrameContext): any[] {\n    const dataGridColumnsName = frameContext && frameContext.viewModel && frameContext.viewModel['dataGridColumnsName'] || null;\n    return dataGridColumnsName && frameContext.viewModel[dataGridColumnsName] || [];\n  }\n}","import { Injectable, Injector } from \"@angular/core\";\nimport { DataPropGroup, FrameContext } from \"@farris/devkit\";\n\n@Injectable()\nexport class PaginationService {\n  constructor(private injector: Injector, private frameContext: FrameContext) { }\n  /**\n   * éç½®å­è¡¨åé¡µä¿¡æ¯\n   */\n  public resetChildrenPagination() {\n    const paginationInfo = this.frameContext.repository.entityCollection.paginationInfo || {};\n    const childrenEntityCodes = this.frameContext.repository.entityTypeInfo.getPropNamesByGroup(DataPropGroup.List) || [];\n    if (paginationInfo && Object.keys(paginationInfo).length > 0) {\n      const keys = Object.keys(paginationInfo);\n      keys.forEach((key: string) => {\n        const value = paginationInfo[key];\n        if (Object.prototype.toString.apply(value) !== '[object Object]') {\n          return;\n        }\n        const rowPagination = childrenEntityCodes.find((nodeCode: string) => {\n          // å»æs\n          nodeCode = nodeCode.slice(0, -1);\n          return key.startsWith(`${nodeCode}_`);\n        });\n        if (rowPagination) {\n          delete paginationInfo[key];\n        } else {\n          paginationInfo[key].pageIndex = 1;\n          delete paginationInfo[key].total;\n          delete paginationInfo[key].pageCount;\n        }\n      });\n      this.frameContext.repository.entityCollection.updatePaginationInfoByPath('/', paginationInfo);\n    }\n  }\n}","import { Provider } from '@angular/core';\n\nimport { UIStateService } from '../ui-state.service';\nimport { StateMachineService } from '../state-machine.service';\nimport { ValidationService } from '../validation.service';\nimport { BindingDataService } from '../binding-data.service';\nimport { CommandService } from '../command-service';\nimport { NavigationMiddlewareService } from '../navigation-middleware.service';\nimport { GridMiddlewareService } from '../grid.middleware.service';\nimport { BeActionService } from '../be-action.service';\nimport { ApproveService } from '../approve.service';\nimport { PrintService } from '../print.service';\nimport { AttachmentDataService, AttachmentService, FileService } from '../attachment/index';\nimport {\n  EntityTraversingService, EntityManipulationService, EntityAggregationService,\n  EntityListService, EntityService\n} from '../entity-services/index';\nimport { SidebarService } from '../sidebar-service';\nimport { ChangeItemService } from '../change-item.service';\n\nimport {\n  ListDataService, CardDataService, SubListDataService, TreeDataService,\n  RemoveDataService, SaveDataService, EditDataService, SubTreeDataService\n} from '../data-services/index';\n\nimport { FarrisFormService } from '../farris-form.service';\nimport { DialogService } from '../dialog.service';\nimport { NavigationEventService } from '../navigation-event.service';\nimport { NavigationService } from '../navigation.service';\nimport { RouterService } from '../router.service';\nimport { AuthorityService } from '../authority/authority.service';\n\nimport { QuerySolutionService } from '../query-solution/query-solution.service';\nimport { QUERYSOLUTION_HANDLER_TOKEN } from '@gsp-cmp/querysolution';\nimport { FilterConditionDataService } from '../data-services/filter-condition-data.service';\nimport { FocusInvalidService } from '../focus-invalid.service';\nimport { EndEditService } from '../end-edit.service';\nimport { RemoteSummaryService } from '../remote-summary.service';\nimport { BatchEditService } from '../batch-edit.service';\nimport { BatchEditDialogService } from '@farris/ui-batch-edit-dialog';\nimport { FeatureEditorService } from '@farris/ui-feature-editor';\nimport { DiscussionGroupService } from '../discussion-group.service';\nimport { ListFilterConditionsService } from '../list-filter/list-filter.service';\nimport { LISTFILTER_HANDLER_TOKEN } from '@farris/ui-list-filter';\nimport { FORM_MANIFEST_SERVICE_TOKEN, FORM_EXPRESSION_MANIFEST_SERVICE_TOKEN, MESSAGE_SERVICE_TOKEN, NOTIFY_SERVICE_TOKEN, FRAME_COMPONENT_INIT_HANDLER_TOKEN } from '@farris/devkit';\nimport { FormManifestService, FormExpressionManifestService } from '../manifest/index';\nimport { LocalizationService } from '../localization.service';\nimport { DataGridService } from '../data-grid.service';\nimport { FormAttentionService } from '../form-attention.service';\nimport { FeatureDataService, FeatureEditService } from '../feature-edit/index';\nimport { ExpressionService } from '../expression_service';\nimport { DirtyCheckingService } from '../dirty-checking.service';\nimport { FormMessageService } from '../form-message.service';\nimport { FormNotifyService } from '../form-notify.service';\nimport { PopUpService } from '../pop_up.service';\nimport { WorkFlowMessageHandler } from '../work-flow/index';\nimport { FormService } from '../form.service';\nimport { FormControlService } from '../form-control.service';\nimport { BindingPathService } from '../binding-path.service';\nimport { FrameContextService } from '../frame-context.service';\nimport { ViewModelService } from '../view-model.service';\nimport { PaginationService } from '../pagination.service';\n/**\n * ç»ä»¶çº§æ³¨å¥æ³¨å¥(å±23ä¸ª)\n */\nconst FARRIS_COMMAND_SERVICE_FRAME_PROVIDERS: Provider[] = [\n  ValidationService,\n  FocusInvalidService,\n  ChangeItemService,\n  UIStateService,\n  StateMachineService,\n  BindingDataService,\n  CommandService,\n\n  // entity-services\n  EntityTraversingService,\n  EntityManipulationService,\n  EntityAggregationService,\n  EntityListService,\n  EntityService,\n\n  // data-services\n  ListDataService,\n  TreeDataService,\n  SubTreeDataService,\n  CardDataService,\n  SubListDataService,\n  RemoveDataService,\n  SaveDataService,\n  EditDataService,\n  FilterConditionDataService,\n  RemoteSummaryService,\n\n  BeActionService,\n  ApproveService,\n  PrintService,\n  AttachmentDataService,\n  AttachmentService,\n  FileService,\n  NavigationMiddlewareService,\n  GridMiddlewareService,\n  SidebarService,\n  FarrisFormService,\n  DialogService,\n  NavigationEventService,\n  NavigationService,\n  RouterService,\n  AuthorityService,\n  {\n    provide: QUERYSOLUTION_HANDLER_TOKEN,\n    useClass: QuerySolutionService\n  },\n  {\n    provide: LISTFILTER_HANDLER_TOKEN,\n    useClass: ListFilterConditionsService\n  },\n  EndEditService,\n  BatchEditDialogService,\n  BatchEditService,\n  DiscussionGroupService,\n  LocalizationService,\n  DataGridService,\n  FormAttentionService,\n  FeatureEditorService,\n  FeatureDataService,\n  FeatureEditService,\n  ExpressionService,\n  PopUpService,\n  DirtyCheckingService,\n  FormService,\n  FormControlService,\n  BindingPathService,\n  FrameContextService,\n  ViewModelService,\n  PaginationService,\n  // è¡¨è¾¾å¼\n  { provide: FORM_MANIFEST_SERVICE_TOKEN, useClass: FormManifestService },\n  { provide: FORM_EXPRESSION_MANIFEST_SERVICE_TOKEN, useClass: FormExpressionManifestService },\n  { provide: MESSAGE_SERVICE_TOKEN, useClass: FormMessageService },\n  { provide: NOTIFY_SERVICE_TOKEN, useClass: FormNotifyService },\n  { provide: FRAME_COMPONENT_INIT_HANDLER_TOKEN, useClass: WorkFlowMessageHandler, multi: true }\n];\n\nexport { FARRIS_COMMAND_SERVICE_FRAME_PROVIDERS };\n","import { Provider } from '@angular/core';\n\nimport { RouterService } from '../router.service';\nimport { UIStateService } from '../ui-state.service';\nimport { StateMachineService } from '../state-machine.service';\nimport { ValidationService } from '../validation.service';\nimport { BindingDataService } from '../binding-data.service';\nimport { CommandService } from '../command-service';\n\nimport { NavigationEventService } from '../navigation-event.service';\nimport { NavigationService } from '../navigation.service';\nimport { NavigationMiddlewareService } from '../navigation-middleware.service';\nimport { GridMiddlewareService } from '../grid.middleware.service';\n\nimport { BeActionService } from '../be-action.service';\nimport { ApproveService } from '../approve.service';\nimport { PrintService } from '../print.service';\nimport { AttachmentDataService, AttachmentService, FileService } from '../attachment/index';\nimport {\n    EntityTraversingService, EntityManipulationService, EntityAggregationService,\n    EntityListService, EntityService\n} from '../entity-services/index';\nimport { DialogService } from '../dialog.service';\nimport { SidebarService } from '../sidebar-service';\nimport { FarrisFormService } from '../farris-form.service';\nimport { ChangeItemService } from '../change-item.service';\n\n// data-services\nimport { ListDataService } from '../data-services/list-data.service';\nimport { TreeDataService } from '../data-services/tree-data.service';\nimport { CardDataService } from '../data-services/card-data.service';\nimport { SubListDataService } from '../data-services/sub-list-data.service';\nimport { FocusInvalidService } from '../focus-invalid.service';\nimport { SubTreeDataService } from '../data-services/sub-tree-data-service';\nimport { RemoveDataService } from '../data-services/remove-data.service';\nimport { SaveDataService } from '../data-services/save-data.service';\nimport { EditDataService } from '../data-services/edit-data.service';\nimport { FilterConditionDataService } from '../data-services/filter-condition-data.service';\nimport { RemoteSummaryService } from '../remote-summary.service';\nimport { AuthorityService } from '../authority/authority.service';\nimport { EndEditService } from '../end-edit.service';\nimport { BatchEditService } from '../batch-edit.service';\nimport { DiscussionGroupService } from '../discussion-group.service';\nimport { LocalizationService } from '../localization.service';\nimport { DataGridService } from '../data-grid.service';\nimport { FormAttentionService } from '../form-attention.service';\nimport { FormManifestService } from '../manifest/form_manifest_service';\nimport { FormExpressionManifestService } from '../manifest/form_expression_manifest_service';\nimport { ListFilterConditionsService } from '../list-filter/list-filter.service';\nimport { QuerySolutionService } from '../query-solution/query-solution.service';\nimport { BatchEditDialogService } from '@farris/ui-batch-edit-dialog';\nimport { FORM_MANIFEST_SERVICE_TOKEN, FORM_EXPRESSION_MANIFEST_SERVICE_TOKEN } from '@farris/devkit';\nimport { QUERYSOLUTION_HANDLER_TOKEN } from '@gsp-cmp/querysolution';\nimport { LISTFILTER_HANDLER_TOKEN } from '@farris/ui-list-filter';\n\n/**\n * ç»ä»¶çº§æ³¨å¥æ³¨å¥(å±23ä¸ª)\n */\nconst DYNAMIC_FARRIS_COMMAND_SERVICE_PROVIDERS: Provider[] = [\n    { provide: 'ValidationService', useClass: ValidationService },\n    { provide: 'FocusInvalidService', useClass: FocusInvalidService },\n    { provide: 'ChangeItemService', useClass: ChangeItemService },\n    { provide: 'UIStateService', useClass: UIStateService },\n    { provide: 'StateMachineService', useClass: StateMachineService },\n    { provide: 'BindingDataService', useClass: BindingDataService },\n    { provide: 'CommandService', useClass: CommandService },\n\n    // entity-services\n    { provide: 'EntityTraversingService', useClass: EntityTraversingService },\n    { provide: 'EntityManipulationService', useClass: EntityManipulationService },\n    { provide: 'EntityAggregationService', useClass: EntityAggregationService },\n    { provide: 'EntityListService', useClass: EntityListService },\n    { provide: 'EntityService', useClass: EntityService },\n\n    // data-services\n    { provide: 'ListDataService', useClass: ListDataService },\n    { provide: 'TreeDataService', useClass: TreeDataService },\n    { provide: 'SubTreeDataService', useClass: SubTreeDataService },\n    { provide: 'CardDataService', useClass: CardDataService },\n    { provide: 'SubListDataService', useClass: SubListDataService },\n    { provide: 'RemoveDataService', useClass: RemoveDataService },\n    { provide: 'SaveDataService', useClass: SaveDataService },\n    { provide: 'EditDataService', useClass: EditDataService },\n    { provide: 'FilterConditionDataService', useClass: FilterConditionDataService },\n    { provide: 'RemoteSummaryService', useClass: RemoteSummaryService },\n\n    { provide: 'BeActionService', useClass: BeActionService },\n    { provide: 'ApproveService', useClass: ApproveService },\n    { provide: 'PrintService', useClass: PrintService },\n    { provide: 'AttachmentDataService', useClass: AttachmentDataService },\n    { provide: 'AttachmentService', useClass: AttachmentService },\n    { provide: 'FileService', useClass: FileService },\n    { provide: 'NavigationMiddlewareService', useClass: NavigationMiddlewareService },\n    { provide: 'GridMiddlewareService', useClass: GridMiddlewareService },\n    { provide: 'SidebarService', useClass: SidebarService },\n    { provide: 'FarrisFormService', useClass: FarrisFormService },\n    { provide: 'DialogService', useClass: DialogService },\n    { provide: 'NavigationEventService', useClass: NavigationEventService },\n    { provide: 'NavigationService', useClass: NavigationService },\n    { provide: 'RouterService', useClass: RouterService },\n    { provide: 'AuthorityService', useClass: AuthorityService },\n    {\n        provide: QUERYSOLUTION_HANDLER_TOKEN,\n        useClass: QuerySolutionService\n    },\n    {\n        provide: LISTFILTER_HANDLER_TOKEN,\n        useClass: ListFilterConditionsService\n    },\n    { provide: 'EndEditService', useClass: EndEditService },\n    { provide: 'BatchEditDialogService', useClass: BatchEditDialogService },\n    { provide: 'BatchEditService', useClass: BatchEditService },\n    { provide: 'DiscussionGroupService', useClass: DiscussionGroupService },\n    { provide: 'LocalizationService', useClass: LocalizationService },\n    { provide: 'DataGridService', useClass: DataGridService },\n    { provide: 'FormAttentionService', useClass: FormAttentionService },\n    // è¡¨è¾¾å¼\n    { provide: FORM_MANIFEST_SERVICE_TOKEN, useClass: FormManifestService },\n    { provide: FORM_EXPRESSION_MANIFEST_SERVICE_TOKEN, useClass: FormExpressionManifestService }\n];\n\n\nexport { DYNAMIC_FARRIS_COMMAND_SERVICE_PROVIDERS };\n","import { NgModule } from '@angular/core';\nimport { FARRIS_COMMAND_SERVICE_MODULE_PROVIDERS } from './providers/index';\nimport { WfTaskHandlerModule } from '@gsp-wf/wf-task-handler';\nimport { WorkFlowMessage } from './work-flow/index';\n\n@NgModule({\n  providers: FARRIS_COMMAND_SERVICE_MODULE_PROVIDERS,\n  imports: [\n    WfTaskHandlerModule\n  ],\n  exports: [\n    WfTaskHandlerModule\n  ]\n})\nclass CommandServicesModule {\n  constructor(private workFlowMessage: WorkFlowMessage) {\n    if (this.workFlowMessage) {\n      this.workFlowMessage.setup();\n    }\n  }\n}\n\nexport { CommandServicesModule };\n","import { RuntimeFrameworkService } from '../rtf-service';\nimport { UID } from '@farris/devkit';\n\nexport class MessagePipe {\n    constructor(public token: string, private rtfService: RuntimeFrameworkService) { }\n    /**\n     * åç®¡éåéæ¶æ¯\n     * @param message æ¶æ¯\n     */\n    public sendMessage(message: any) {\n        this.rtfService.subjectNotify(this.token, message);\n        return this;\n    }\n    /**\n     * çå¬ç®¡éæ¶æ¯\n     * @param handler æ¶æ¯å¤çå¨\n     */\n    public listen(handler: (data: any) => void): () => void {\n        const observerToken = UID.create();\n        this.rtfService.subjectResponse(this.token, handler, observerToken);\n        const unListen = () => {\n            this.rtfService.responseUnSubscribe(this.token, observerToken);\n        };\n        return unListen;\n    }\n    /**\n     * éæ¯ç®¡é\n     */\n    public destory() {\n        this.rtfService.subjectRemove(this.token);\n    }\n}\n","import { MessagePipe } from './message-pipe';\nimport { RuntimeFrameworkService } from '../rtf-service';\nimport { Subject } from 'rxjs';\nimport { QuerystringService } from '../querystring';\n\nexport class MessagePipeService {\n  private static rtfService: RuntimeFrameworkService = new RuntimeFrameworkService();\n  private static querystringService: QuerystringService = new QuerystringService();\n  /**\n   * éè¿tokenè·åæ¶æ¯ç®¡é\n   * @param token æ¶æ¯ç®¡éæ è¯\n   */\n  public static get(token: string): MessagePipe {\n    const pipe = new MessagePipe(token, this.rtfService);\n    return pipe;\n  }\n  /**\n   * åå»ºæ¶æ¯ç®¡é\n   * @param pipeName ç®¡éåç§°\n   * @param useFormContext æ¯å¦ä½¿ç¨è¡¨åä¸ä¸æåå»ºç®¡éæ è¯\n   * @param pipeType ç®¡éç±»å(å¯é)ï¼é»è®¤Subject<any>\n   */\n  public static create(pipeName: string, useFormContext: boolean, pipeType?: Subject<any>): MessagePipe {\n    let options = null;\n    if (useFormContext) {\n      const params = this.querystringService.parse(window.location.hash);\n      const { funcId, appId, appEntrance } = params;\n      options = { funcId, appId, appEntrance };\n    }\n    const token = this.rtfService.subjectRegister(pipeName, options, pipeType);\n    if (!token) {\n      return null;\n    }\n    const pipe = new MessagePipe(token, this.rtfService);\n    return pipe;\n  }\n}\n","import { Inject, Injectable, Injector } from '@angular/core';\nimport { AppContext, BackEndMessage, BindingList, DataPropInfo, EventBus, FrameComponent, FrameContext, NgFormControl, Translate, TranslateToken } from '@farris/devkit';\n/**\n * åç«¯æ¶æ¯å¤çæå¡\n * @description\n * ### æå¡æ³¨å¥ä½ç½®\n *  1ãæ´ä¸ªè¡¨åçroot-component \n *  2ãå¼¹åºçªå£çroot-component \n */\n@Injectable()\nexport class BackEndMessageHandler implements BackEndMessage.IBackEndMessageHandler {\n  constructor(private injector: Injector, private frameContext: FrameContext, @Inject(TranslateToken) private translate: Translate) { }\n  /**\n   * å¤çåç«¯è¿åçæ¶æ¯æéè¯¯\n   * @param message æ¶æ¯æéè¯¯\n   */\n  public handle(message: BackEndMessage.IMessage, context: any) {\n    const isException = context && context.isException || false;\n    const hasThrowError = context && context.hasThrowError || false;\n    const eventBus = context && context.eventBus || null;\n    const error = context && context.error || null;\n    const formAppContext = context && context.formAppContext || null;\n    const result = this.collect(message, isException, hasThrowError, eventBus, error, formAppContext);\n    if (result && result.form && result.form.length > 0) {\n      result.form.forEach((item: { frameContext: FrameContext, message: any }) => {\n        item.frameContext.viewModel.form.updateFormErrors(item.message, true, 'backend');\n      });\n    } else {\n      this.resetFormMessage(message.context.appContext, message.context.ns);\n    }\n    const targetFrameContext: FrameContext = this.findTargetFrameContext(this.frameContext);\n    if (result && result.all && result.all.length > 0) {\n      targetFrameContext.viewModel.verifycationChanged.next(result.all);\n    } else {\n      if (result !== null) {\n        targetFrameContext.viewModel.verifycationChanged.next([]);\n      }\n    }\n  }\n  /**\n   * æ¶éæ±æ»ä¿¡æ¯åformä¿¡æ¯\n   * @param backEndMessage \n   */\n  private collect(backEndMessage: BackEndMessage.IMessage, isException: boolean = false, hasThrowError: boolean = false, eventBus: EventBus = null, error: any = null, formAppContext: AppContext = null): { form: { frameContext: FrameContext, message: any }[], all: any[] } {\n    const bizMessages = backEndMessage && backEndMessage.bizMessages || null;\n    const appContext = backEndMessage && backEndMessage.context.appContext;\n    const ns = backEndMessage.context.ns;\n    if (!bizMessages || bizMessages.length < 1) {\n      return null;\n    }\n    const result = {\n      form: [],\n      all: []\n    };\n    let hasFormlessError = false;\n    for (let bizMessage of bizMessages) {\n      const message = bizMessage.message;\n      const location = bizMessage.location || null;\n      const columns = location && location.columns || null;\n      const nodeCode = location && location.nodeCode || null;\n      const rows = location && location.rows;\n      const bindingPath = this.getBindingPath(appContext, ns, nodeCode);\n      const bindingPaths = bindingPath && bindingPath.split('/').filter(p => p);\n\n      // ç®åä»å¤çælocationï¼ä¸æidãååãè¡¨åçã\n      if (!location || !columns || columns.length < 1 || !nodeCode || !rows || rows.length < 1) {\n        continue;\n      }\n      // éåæ°æ®è¡\n      for (let row of rows) {\n        for (let column of columns) {\n          // è·åå°ææç»å®è¯¥åæ°æ®çframeContext\n          let frameContexts = this.getFrameContextsByBindingPathAndColumnName(appContext, ns, bindingPath, column);\n          if (!frameContexts || frameContexts.length < 1) {\n            // æ²¡æä»»ä½ä¸ä¸ªç»ä»¶ç»å®è¯¥åçæ°æ®\n            hasFormlessError = true;\n            continue;\n          }\n          // æé¤æåªè¯»datagrid\n          frameContexts = frameContexts.filter((frameContext: FrameContext) => {\n            const isDataGridComponent = this.isDataGridComponent(frameContext.frameComponent);\n            if (isDataGridComponent) {\n              const isReadonlyDataGrid = this.isReadonlyDataGrid(frameContext.frameComponent);\n              if (isReadonlyDataGrid) {\n                return false;\n              } else {\n                return true;\n              }\n            }\n            return true;\n          });\n          // éåçè¡æ¯å¦ä¸ºå½åè¡\n          const isCurrentRow = this.isCurrentRow(appContext, ns, bindingPath, row);\n          // å¦ææ¯å½åè¡çè¯éè¦å°éè¯¯ä¿¡æ¯æ¾å°formä¸­\n          if (isCurrentRow) {\n            // å¿½ç¥grid\n            // const formFrameContexts = frameContexts.filter(frameContext => !this.isGridComponent(frameContext.frameComponent));\n            if (frameContexts && frameContexts.length > 0) {\n              frameContexts.forEach((frameContext: FrameContext) => {\n                // åªå¤çäºä¸ä¸ªç»ä»¶ä¸­ååªç»å®å°ä¸ä¸ªåç«¯æ§ä»¶çåºæ¯\n                const formControls = this.getFormControlByColumnName(frameContext, column);\n                if (formControls && formControls.length > 0) {\n                  formControls.forEach(([domPropertyName, formControl]) => {\n                    //const domPropertyName = formControl && formControl. || null;\n                    this.mergeMessage(result.form, frameContext, domPropertyName, message);\n                  });\n                }\n\n                //if (formControl && domPropertyName) {\n\n                //}\n              });\n            } else {\n            }\n          }\n          // å°éè¯¯ä¿¡æ¯æ¾å°æ±æ»ä¸­\n          frameContexts.forEach((frameContext: FrameContext) => {\n            const viewModelName = frameContext.viewModel.form.formGroupName;\n            const formControls = this.getFormControlByColumnName(frameContext, column);\n            if (formControls && formControls.length > 0) {\n              const [domPropertyName, formControl] = formControls.find(([propertyName, formControl]) => propertyName && propertyName.length > 0);\n              // const domPropertyName = domProperty && domProperty.propertyName;\n              const bindingList = frameContext.viewModel.bindingData.getValue(bindingPaths) as BindingList;\n              let index = bindingList.getIndexById(row);\n              const primary = `${row}_${column}_${message}`;\n              // TODO:è½ç¶è½çº æ­£æ±æ»æ¶æ¯æ¾ç¤ºéå¤çé®é¢ï¼ä½å¯è½å¯¼è´ç¹å»éè¯¯æ æ³å®ä½å°å¯¹åºæ§ä»¶çé®é¢ï¼å¾åç»­ä¼å\n              if (index >= 0 && result.all.findIndex(p => p.id === primary) === -1) {\n                // æ°æ®æºä¸­æå¤äº1è¡æ¶æ¾ç¤ºç´¢å¼\n                const position = (bindingList && bindingList.length > 1) ? (index + 1) : -1;\n                const title = this.buildItemTitle(viewModelName, formControl.name || formControl.defaultI18nValue || domPropertyName, position);\n                const item = {\n                  id: primary,\n                  index,\n                  targetField: formControl.id,\n                  title,\n                  msg: message,\n                  namespace: ns,\n                  bindingPath,\n                  type: 'error'\n                };\n                result.all.push(item);\n              }\n            }\n\n          });\n        }\n      }\n    }\n    if (hasFormlessError && isException && !hasThrowError && eventBus) {\n      eventBus.post('Exception', '', 'onException', error, formAppContext);\n    }\n    return result;\n  }\n  private mergeMessage(formItems: { frameContext: FrameContext, message: { [domPropertyName: string]: { errors: { [messageType: string]: { name: string } } } } }[], frameContext: FrameContext, domPropertyName: string, message: string) {\n    const targetItem = formItems.find(item => item.frameContext.frameId === frameContext.frameId);\n    if (targetItem) {\n      const isPropertyExist = targetItem.message && Object.keys(targetItem.message).includes(domPropertyName);\n      const messageType = `backend-message-${Object.keys(targetItem.message).length + 1}`;\n      if (isPropertyExist) {\n        targetItem.message[domPropertyName]['errors'][messageType] = { name: message };\n      } else {\n        targetItem.message[domPropertyName] = { errors: { [messageType]: { name: message } } };\n      }\n    } else {\n      formItems.push({\n        frameContext: frameContext,\n        message: {\n          [domPropertyName]: {\n            errors: {\n              'backend-message-1': { name: message }\n            }\n          }\n        }\n      });\n    }\n  }\n  private buildItemTitle(viewModelName: string, propertyName: string, index: any) {\n    const template = {\n      'zh-CHS': {\n        viewModelName: `$viewModel`,\n        index: `ç¬¬ $index è¡`,\n        propertyName: `- $propertyName`\n      },\n      'en': {\n        viewModelName: `$viewModel`,\n        index: `row $index`,\n        propertyName: `- $propertyName`\n      },\n      'zh-CHT': {\n        viewModelName: `$viewModel`,\n        index: `ç¬¬ $index è¡`,\n        propertyName: `- $propertyName`\n      }\n    };\n    const currentLanguage = this.translate.getCurrentLanguage() || 'zh-CHS';\n    const message = [];\n    if (viewModelName) {\n      message.push(template[currentLanguage]['viewModelName'].replace('$viewModel', viewModelName));\n    }\n    if (index > 0) {\n      message.push(template[currentLanguage]['index'].replace('$index', index));\n    }\n    if (propertyName) {\n      message.push(template[currentLanguage]['propertyName'].replace('$propertyName', propertyName));\n    }\n    return message.join(' ');\n  }\n  /**\n   * æ ¹æ®è¡¨åænodeCodeè·åç»å®è·¯å¾\n   * @param appContext appContext\n   * @param ns ns\n   * @param nodeCode è¡¨å\n   */\n  private getBindingPath(appContext: AppContext, ns: string, nodeCode: string) {\n    const frameContext = this.getFrameContext(appContext, ns);\n    return frameContext.repository.entityTypeInfo.getBindingPathByTableName(nodeCode);\n  }\n  /**\n   * éè¿ç»å®è·¯å¾åååæ¾å°ææç¬¦åæ¡ä»¶çè§å¾æ¨¡å(åæ¬gridåform)\n   * @param appContext appContext\n   * @param ns namespace\n   * @param bindingPath ç»å®è·¯å¾\n   * @param columnName åå\n   */\n  private getFrameContextsByBindingPathAndColumnName(appContext: AppContext, ns: string, bindingPath: string, columnName: string): FrameContext[] {\n    let frameContexts = appContext.frameContextManager.getFrameContexts();\n    if (frameContexts && frameContexts.length > 0) {\n      // æ¾å°formä¸­ææ§ä»¶çframeContext\n      frameContexts = frameContexts.filter((frameContext: FrameContext) => {\n        // åºæ¬æ¡ä»¶æ¯å¦æ»¡è¶³\n        let isValidFrameContext = frameContext.namespace === ns && frameContext.viewModel.bindingPath === bindingPath && frameContext.viewModel.form && frameContext.viewModel.form.controls && Object.keys(frameContext.viewModel.form.controls).length > 0;\n        if (!isValidFrameContext) {\n          return false;\n        }\n        // åéè¿ååè¿æ»¤\n        const bindingPaths = bindingPath.split('/').filter(p => p);\n        const dataTypeInfo = frameContext.repository.entityTypeInfo.getTypeInfoByPath(bindingPaths);\n        if (dataTypeInfo) {\n          const dataPropInfos = Array.from(dataTypeInfo.propInfoMap.values());\n          // ä»å½åå®ä½å±æ§ä¸­æ¾å°æ°æ®å­æ®µä¸ºååçå±æ§\n          const entityPropertyInfo = dataPropInfos.find((propInfo: DataPropInfo) => propInfo.metadataInfo && (propInfo.metadataInfo.originalDataField === columnName || propInfo.metadataInfo.dataField === columnName));\n          if (entityPropertyInfo) {\n            const entityPropertyName = entityPropertyInfo.name;\n            const ngFormControl = Object.values(frameContext.viewModel.form.ngFormControls).find(item => item.binding === entityPropertyName);\n            if (ngFormControl) {\n              return true;\n            } else {\n              const item = Object.keys(frameContext.viewModel.form.ngFormControls).find(key => key === entityPropertyName);\n              return item ? true : false;\n            }\n          } else {\n            return false;\n          }\n        } else {\n          return false;\n        }\n      });\n      return frameContexts;\n    }\n    return null;\n  }\n  /**\n   * æ¯å¦ä¸ºdatagridç»ä»¶\n   * @param frameComponent component\n   */\n  private isDataGridComponent(frameComponent: FrameComponent) {\n    const columnNames = frameComponent.context.viewModel['dataGridColumnsName'] || null;\n    return columnNames ? true : false;\n  }\n  /**\n   * gridç»ä»¶æ¯å¦æ¯åªè¯»ç\n   * @param frameComponent frameComponent\n   * @returns \n   */\n  private isReadonlyDataGrid(frameComponent: FrameComponent) {\n    const frameContext = frameComponent.context;\n    const dataGridColumnsName = frameContext.viewModel['dataGridColumnsName'] || null;\n    if (dataGridColumnsName) {\n      const datagridColumns: any[] = frameContext.viewModel[dataGridColumnsName];\n      return datagridColumns.every((group: Array<any>) => {\n        return group.every(item => !item.editor);\n      });\n    } else {\n      throw new Error(`ä¼ å¥çç»ä»¶ä¸æ¯ä¸ä¸ªè¡¨æ ¼ï¼`);\n    }\n  }\n  /**\n   * idæ¯å¦ä¸ºå½åè¡\n   * @param appContext appContext\n   * @param ns namespace\n   * @param bindingPath bindingPath\n   * @param id id\n   */\n  private isCurrentRow(appContext: AppContext, ns: string, bindingPath: string, id: string) {\n    const bindingPaths = bindingPath.split('/').filter(p => p);\n    const frameContext = this.getFrameContext(appContext, ns);\n    const bindingData = frameContext.bindingData;\n    const bindingList = bindingData.getValue(bindingPaths) as BindingList;\n    return bindingList.currentItem.primaryKeyValue === id;\n  }\n  /**\n   * è·åå½ånsä¸çrootFrameContext\n   * @param appContext appcontext\n   * @param ns namespace\n   */\n  private getFrameContext(appContext: AppContext, ns: string) {\n    const frameContexts = appContext.frameContextManager.getFrameContexts();\n    if (frameContexts && frameContexts.length > 0) {\n      const randomFrameContext = frameContexts.find(frameContext => frameContext.namespace === ns);\n      if (randomFrameContext) {\n        const virtualRootFrameContext = randomFrameContext.getVirtualRootFrameContext();\n        return virtualRootFrameContext;\n      }\n    }\n    return null;\n  }\n  /**\n   * éè¿ç»å®è·¯å¾åååè·åç»å®å°è¯¥åçformControl\n   */\n  private getFormControlByColumnName(frameContext: FrameContext, columnName: string): Array<[string, NgFormControl]> {\n    const bindingPaths = frameContext.viewModel.bindingPath.split('/').filter(p => p);\n    // éè¿bindingPathæ¾å°å¯¹åºçå®ä½ä¿¡æ¯\n    const typeInfo = frameContext.repository.entityTypeInfo.getTypeInfoByPath(bindingPaths);\n\n    const propsInfo = Array.from(typeInfo.propInfoMap.values());\n    const propInfo = propsInfo.find((propInfo: DataPropInfo) => propInfo.metadataInfo && (propInfo.metadataInfo.originalDataField === columnName || propInfo.metadataInfo.dataField === columnName));\n    if (propInfo) {\n      const mappingName = propInfo.name;\n      const formControls: Array<[string, NgFormControl]> = Object.entries(frameContext.viewModel.form.ngFormControls).filter((item) => item[1].binding === mappingName || item[0] === mappingName);\n      // const ngFormControl = Object.values(frameContext.viewModel.form.ngFormControls).find(item => item.binding === mappingName);\n      if (formControls) {\n        return formControls;\n      }\n    }\n    return null;\n  }\n  private resetFormMessage(appContext: AppContext, ns: string) {\n    const frameContexts = appContext.frameContextManager.getFrameContexts().filter(frameContext => frameContext.namespace === ns);\n    frameContexts.forEach(frameContext => frameContext && frameContext.viewModel && frameContext.viewModel.form && frameContext.viewModel.form.clearBackendError());\n  }\n  /**\n   * éå½æ¾å°å±ç¤ºæ¶æ¯çç»ä»¶ä¸ä¸æ\n   * @param frameContext frameContext\n   */\n  private findTargetFrameContext(frameContext: FrameContext): FrameContext {\n    const virtualRootFrameContext = frameContext.getVirtualRootFrameContext();\n    const virtualRootComponent = virtualRootFrameContext.frameComponent;\n    const isDialogComponent = virtualRootComponent && virtualRootComponent['isDialogRootComponent'] || false;\n    if (isDialogComponent) {\n      // å¦ææ¶æ¯å¤çæå¡æ¯å¼¹çªåçï¼åæ¶æ¯æç¤ºå±ç¤ºå¨å¼¹çªå\n      return virtualRootFrameContext;\n    } else {\n      // å½åæ¶æ¯æå¡ä¸å¨å¼¹çªåï¼éå½åä¸æ¥æ¾ï¼æ¾å°ç¬¬ä¸ä¸ªå¼¹çªï¼å¦ææ¾ä¸å°åæ¾å°æä¸çroot-component\n      const parentFrameContext = virtualRootFrameContext.parent;\n      if (parentFrameContext) {\n        return this.findTargetFrameContext(parentFrameContext);\n      } else {\n        return virtualRootFrameContext;\n      }\n    }\n  }\n}"]}