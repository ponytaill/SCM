/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { EventEmitter } from '@angular/core';
import { Component, ElementRef, ChangeDetectorRef, Inject, Renderer2, Injector, Input, ViewChild, forwardRef, ViewEncapsulation, Output } from '@angular/core';
import { DOCUMENT } from '@angular/common';
import { take, debounceTime } from 'rxjs/operators';
import { BaseComboComponent, ComboService } from '@farris/ui-combo-list';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import { LookupUtils } from '@farris/ui-lookup';
import { TreeTableComponent } from '@farris/ui-treetable';
import { DataTableComponent } from '@farris/ui-datatable';
import { Subject } from 'rxjs';
import { IdService } from '@farris/ui-common';
/** @type {?} */
var INPUT_COMBO_VALUE_ACCESSOR = {
    provide: NG_VALUE_ACCESSOR,
    // tslint:disable-next-line: no-use-before-declare
    useExisting: forwardRef((/**
     * @return {?}
     */
    function () { return ComboLookupComponent; })),
    multi: true
};
var ComboLookupComponent = /** @class */ (function (_super) {
    tslib_1.__extends(ComboLookupComponent, _super);
    function ComboLookupComponent(el, cdr, document, render, comboService, injector) {
        var _this = _super.call(this, el, cdr, document, render, comboService, injector) || this;
        _this.el = el;
        _this.cdr = cdr;
        _this.document = document;
        _this.render = render;
        _this.comboService = comboService;
        _this.injector = injector;
        _this.panelHeight = 300;
        _this.comPosition = {
            'height.px': _this.panelHeight
        };
        _this.showHeader = true;
        _this.useTreeView = false;
        /**
         * -1: 不展开； 0: 全部展开；>0: 展开到指定级数
         */
        _this.expandLevel = -1;
        _this.cascade = {
            enable: false,
            up: false,
            down: false
        };
        /**
         * 树形帮助数据加载方式： default: 内置取数； loadall: 加载所有 layerload：分层加载
         */
        _this.loadTreeDataType = 'default';
        /**
         * 启用构造完整树过滤
         */
        _this.enableFullTree = true;
        _this.pageChanged = new EventEmitter();
        _this.pageSizeChanged = new EventEmitter();
        /**
         * 使用表单映射，默认 false
         */
        _this.useFormDataMapping = false;
        _this.loadFinish = false;
        _this.pageInfo = { pageSize: 20, pageIndex: 1, total: 0 };
        _this.tt$ = new Subject();
        _this.loaded$ = new Subject();
        _this._searchKeyWords = '';
        _this.loadDataType = 'all';
        _this.idSer = _this.injector.get(IdService, null);
        if (!_this.idSer) {
            _this.idSer = new IdService();
        }
        return _this;
    }
    Object.defineProperty(ComboLookupComponent.prototype, "columns", {
        get: /**
         * @return {?}
         */
        function () {
            var _this = this;
            /** @type {?} */
            var cols = this._columns !== undefined && this._columns.length > 0 ? this._columns : this.comboService.columns;
            if (this.useTreeView && cols.length > 1) {
                cols = cols.filter((/**
                 * @param {?} n
                 * @return {?}
                 */
                function (n) { return n.field === _this.textField; }));
            }
            return cols;
        },
        // 树列表默认展开层级。 -1： 不展开； 0： 全部展开； >0:  展开到指定级数；
        set: 
        // 树列表默认展开层级。 -1： 不展开； 0： 全部展开； >0:  展开到指定级数；
        /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._columns = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ComboLookupComponent.prototype, "pagination", {
        get: /**
         * @return {?}
         */
        function () {
            if (this._pagination !== undefined) {
                return this._pagination;
            }
            else {
                return this.comboService.pageInfo && this.pageInfo.enablePager ? this.pageInfo.enablePager : false;
            }
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._pagination = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ComboLookupComponent.prototype, "displayType", {
        get: /**
         * @return {?}
         */
        function () {
            return this.comboService.displayType;
        },
        set: /**
         * @param {?} val
         * @return {?}
         */
        function (val) {
            this.comboService.displayType = val + '';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ComboLookupComponent.prototype, "treeCmpRef", {
        get: /**
         * @return {?}
         */
        function () {
            return this._treeCmpRef;
        },
        set: /**
         * @param {?} cmf
         * @return {?}
         */
        function (cmf) {
            if (cmf) {
                cmf.cascadeCheck = this.cascade.enable;
                cmf.cascadeDown = this.cascade.down;
                cmf.cascadeUp = this.cascade.up;
                this.tt$.next(cmf);
            }
            this._treeCmpRef = cmf;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ComboLookupComponent.prototype, "tableCmpRef", {
        set: /**
         * @param {?} cmf
         * @return {?}
         */
        function (cmf) {
            var _this = this;
            if (cmf && this.pagination && this._tableCmpRef) {
                this.loaded$.pipe(take(1)).subscribe((/**
                 * @param {?} e
                 * @return {?}
                 */
                function (e) {
                    cmf.loadData({
                        pageSize: _this.pageInfo.pageSize,
                        total: _this.pageInfo.total,
                        data: _this.data,
                        pageIndex: _this.pageInfo.pageIndex
                    });
                }));
            }
            if (!this._tableCmpRef && this.loadFinish && cmf) {
                cmf.loadData({
                    pageSize: this.pageInfo.pageSize,
                    total: this.pageInfo.total,
                    data: this.data,
                    pageIndex: this.pageInfo.pageIndex
                });
                this._tableCmpRef = cmf;
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    ComboLookupComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        _super.prototype.ngOnInit.call(this);
        this.treeClientSearch.pipe(debounceTime(300)).subscribe((/**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (!_this.remoteSearch && _this.treeCmpRef) {
                _this.treeCmpRef.searchHandle.search(_this.textField, value);
            }
        }));
        this.comboService.treeInfo$.subscribe((/**
         * @param {?} t
         * @return {?}
         */
        function (t) {
            if (t) {
                if (_this.loadTreeDataType === 'default') {
                    _this.loadDataType = t.loadDataType;
                }
                _this.treeInfo = Object.assign(_this.treeInfo || {}, t);
            }
        }));
    };
    /**
     * @protected
     * @param {?} selections
     * @return {?}
     */
    ComboLookupComponent.prototype.onSelectionsChange = /**
     * @protected
     * @param {?} selections
     * @return {?}
     */
    function (selections) {
        var _this = this;
        if (this.displayType === 'LOOKUPLIST') {
            if (!this.multiSelect) {
                this.ownSelections = selections[0] ? selections[0] : {};
            }
            else {
                this.ownSelections = {};
                this.comboService.selections.forEach((/**
                 * @param {?} item
                 * @return {?}
                 */
                function (item) {
                    _this.ownSelections[item[_this.idField]] = item;
                }));
            }
            this.pageInfo = tslib_1.__assign({}, this.pageInfo, this.comboService.pageInfo);
            this.loadFinish = true;
            this.cdr.detectChanges();
            this.loaded$.next(this.pageInfo);
        }
        else {
            if (this.treeCmpRef) {
                this.initTreeData();
            }
            else {
                this.tt$.pipe(take(1)).subscribe((/**
                 * @param {?} cmf
                 * @return {?}
                 */
                function (cmf) {
                    _this.treeCmpRef = cmf;
                    _this.initTreeData();
                    // cmf.checkedNodes(ids, true, false);
                    // cmf.updateSerializedValue();
                }));
            }
        }
    };
    /**
     * @private
     * @return {?}
     */
    ComboLookupComponent.prototype.initTreeData = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var __selections = this.comboService.selections.filter((/**
         * @param {?} n
         * @return {?}
         */
        function (n) { return n !== null && n !== undefined; }));
        /** @type {?} */
        var ids = [];
        this.ownSelections = __selections.map((/**
         * @param {?} item
         * @return {?}
         */
        function (item) {
            ids.push(item[_this.idField]);
            return { data: item, id: item[_this.idField] };
        }));
        this.treeCmpRef.selections = this.ownSelections;
        this.treeCmpRef.checkeds = this.ownSelections;
        if (this.comboService.data && this.comboService.data.length) {
            if (this.treeCmpRef.checkValues && this.treeCmpRef.checkValues.length) {
                if (this.multiSelect) {
                    this.treeCmpRef.checkedNodes(this.treeCmpRef.checkValues);
                    this.treeCmpRef.selectNodes(this.treeCmpRef.checkValues);
                }
                else {
                    this.treeCmpRef.selectNodes(this.treeCmpRef.checkValues);
                }
            }
        }
    };
    /**
     * @protected
     * @return {?}
     */
    ComboLookupComponent.prototype.initDatasChangeAction = /**
     * @protected
     * @return {?}
     */
    function () { };
    /**
     * @private
     * @return {?}
     */
    ComboLookupComponent.prototype.isTree = /**
     * @private
     * @return {?}
     */
    function () {
        return this.displayType === 'LOOKUPTREELIST';
    };
    /**
     * @param {?=} clearMapFields
     * @return {?}
     */
    ComboLookupComponent.prototype.updateMappingFieldValue = /**
     * @param {?=} clearMapFields
     * @return {?}
     */
    function (clearMapFields) {
        var _this = this;
        if (clearMapFields === void 0) { clearMapFields = false; }
        if (this.ngControl && this.ngControl.formDirective &&
            this.ngControl.formDirective.form && this.ngControl.formDirective.form.bindingData) {
            /** @type {?} */
            var bindingData_1 = this.ngControl.formDirective.form.bindingData;
            /** @type {?} */
            var bindingPath = this.ngControl.formDirective.form.bindingPath;
            /** @type {?} */
            var pathArr_1 = [];
            if (bindingPath) {
                pathArr_1 = bindingPath.split('/').filter((/**
                 * @param {?} n
                 * @return {?}
                 */
                function (n) { return n !== ''; }));
            }
            this.mappingField = this.mappingField ? this.mappingField : {};
            if (this.mapFields) {
                /** @type {?} */
                var helpFields = Object.keys(this.mapFields);
                helpFields.forEach((/**
                 * @param {?} f
                 * @return {?}
                 */
                function (f) {
                    /** @type {?} */
                    var fieldNames = _this.mapFields[f] ? _this.mapFields[f] : '';
                    /** @type {?} */
                    var value = '';
                    if (!clearMapFields) {
                        /** @type {?} */
                        var text = _this.comboService.selections && _this.comboService.selections.map((/**
                         * @param {?} item
                         * @return {?}
                         */
                        function (item) {
                            return _this.comboService.getValueByObj(f, item);
                        })).filter((/**
                         * @param {?} n
                         * @return {?}
                         */
                        function (n) { return n !== null; })).join(_this.separator);
                        // value = text ? text : this.displayText ? this.displayText : '';
                        value = text || '';
                    }
                    if (fieldNames) {
                        fieldNames.split(',').forEach((/**
                         * @param {?} fieldName
                         * @return {?}
                         */
                        function (fieldName) {
                            /** @type {?} */
                            var _val = value;
                            if (_this.nosearch && fieldName === _this.ngControl.name) {
                                _val = _this.displayText;
                            }
                            if (bindingData_1.setValue) {
                                if (!_this.useFormDataMapping) {
                                    bindingData_1.setValue(pathArr_1.concat(fieldName.split('.')), _val, true, true);
                                }
                            }
                            else {
                                _this.commonUtils.setValue(bindingData_1, fieldName, value);
                            }
                        }));
                    }
                }));
            }
        }
    };
    /**
     * @return {?}
     */
    ComboLookupComponent.prototype.updateSelectedValues = /**
     * @return {?}
     */
    function () {
        if (this.ngControl &&
            this.ngControl.formDirective &&
            this.ngControl.formDirective.form &&
            this.ngControl.formDirective.form.bindingData) {
            /** @type {?} */
            var bindingData = this.ngControl.formDirective.form.bindingData;
            /** @type {?} */
            var bindingPath = this.ngControl.formDirective.form.bindingPath;
            /** @type {?} */
            var pathArr = [];
            if (bindingPath) {
                pathArr = bindingPath.split('/').filter((/**
                 * @param {?} n
                 * @return {?}
                 */
                function (n) { return n !== ''; }));
            }
            /** @type {?} */
            var targetField = this.mappingField ? this.mapFields[this.idField] : '';
            if (targetField && targetField.indexOf(',') > -1) {
                targetField = targetField.split(',')[0];
            }
            // this.mappingField = this.mappingField ? this.mappingField : '';
            if (targetField && bindingData.getValue) {
                this.selectedValues = bindingData.getValue(pathArr.concat(targetField.split('.'))) || '';
            }
            else if (targetField) {
                this.selectedValues = this.commonUtils.getValue(targetField, bindingData) || '';
            }
        }
    };
    /**
     * @param {?} row
     * @return {?}
     */
    ComboLookupComponent.prototype.onSelectRows = /**
     * @param {?} row
     * @return {?}
     */
    function (row) {
        if (this.displayType === 'LOOKUPLIST') {
            var data = row.data, index = row.index;
            this.comboService.selectItem(data, index);
            this.selectChange.emit({ data: data, index: index, instance: this });
        }
        else if (this.displayType === 'LOOKUPTREELIST') {
            var node = row.node;
            if (row.nodes) {
                this.comboService.selectItem(row.nodes.map((/**
                 * @param {?} n
                 * @return {?}
                 */
                function (n) { return n.data; })));
            }
            else {
                this.comboService.selectItem(node.data);
            }
            this.selectChange.emit(node);
        }
        this.updateTextAndValues();
        if (!this.multiSelect) {
            this.comboService.isOpen$.next(false);
        }
    };
    /**
     * @param {?} row
     * @return {?}
     */
    ComboLookupComponent.prototype.onUnSelectRows = /**
     * @param {?} row
     * @return {?}
     */
    function (row) {
        if (this.displayType === 'LOOKUPLIST') {
            var data = row.data;
            this.comboService.unSelectItem(data);
        }
        else if (this.displayType === 'LOOKUPTREELIST') {
            var node = row.node;
            this.comboService.unSelectItem(node.data);
            this.selectChange.emit(node);
        }
        this.updateTextAndValues();
    };
    /**
     * @param {?} ev
     * @return {?}
     */
    ComboLookupComponent.prototype.onCheckAll = /**
     * @param {?} ev
     * @return {?}
     */
    function (ev) {
        /** @type {?} */
        var state;
        /** @type {?} */
        var selections = [];
        if (this.displayType === 'LOOKUPTREELIST') {
            state = ev.checked;
            selections = this.treeCmpRef.state.rowNodes
                .filter((/**
             * @param {?} n
             * @return {?}
             */
            function (n) { return n.node.selectable === undefined || n.node.selectable; }))
                .map((/**
             * @param {?} r
             * @return {?}
             */
            function (r) { return r.node.data; }));
        }
        else {
            state = ev;
            selections = this.data;
        }
        if (state) {
            this.comboService.selectAll(selections);
        }
        else {
            this.comboService.unSelectAll(selections);
        }
        this.updateTextAndValues();
    };
    /**
     * @private
     * @return {?}
     */
    ComboLookupComponent.prototype.updateTextAndValues = /**
     * @private
     * @return {?}
     */
    function () {
        this.selectedValues = this.comboService.getValue(this.idField);
        /** @type {?} */
        var _displayText = this.comboService.getValue(this.textField);
        this.onValueChange({ text: _displayText, value: this.selectedValues, selections: this.selections });
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    ComboLookupComponent.prototype.onKeyup = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        // console.log('key up', $event);
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    ComboLookupComponent.prototype.onKeydown = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        // console.log('key down', $event);
        if ($event.code === 'Tab') {
            this.hide(false);
        }
    };
    /**
     * @param {?} event
     * @return {?}
     */
    ComboLookupComponent.prototype.onPageChanged = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        var _this = this;
        if (this.uri) {
            this.getData(event).subscribe((/**
             * @param {?} data
             * @return {?}
             */
            function (data) { return _this.comboService.loadLookUpDataTable(data, !!event.sortName); }));
        }
        else {
            this.pageChanged.emit(event);
        }
    };
    /**
     * @param {?} event
     * @return {?}
     */
    ComboLookupComponent.prototype.onPageSizeChanged = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        var _this = this;
        if (this.uri) {
            this.getData(event).subscribe((/**
             * @param {?} data
             * @return {?}
             */
            function (data) { return _this.comboService.loadLookUpDataTable(data, !!event.sortName); }));
        }
        else {
            this.pageSizeChanged.emit(event);
        }
    };
    /**
     * @param {?} event
     * @return {?}
     */
    ComboLookupComponent.prototype.onColumnSorted = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        var _this = this;
        var _a = tslib_1.__assign({}, event), sortName = _a.sortName, sortOrder = _a.sortOrder;
        this.getData({ sortName: sortName, sortOrder: sortOrder }, 'search').subscribe((/**
         * @param {?} data
         * @return {?}
         */
        function (data) {
            _this.comboService.loadLookUpDataTable(data, true);
        }));
    };
    /**
     * @return {?}
     */
    ComboLookupComponent.prototype.onClear = /**
     * @return {?}
     */
    function () {
        this.ownSelections = [];
        if (this.isTree() && this.treeCmpRef) {
            this.treeCmpRef.clearAll();
        }
        _super.prototype.onClear.call(this);
    };
    /**
     * @private
     * @param {?} parentPath
     * @param {?} parentLayer
     * @param {?} searchData
     * @return {?}
     */
    ComboLookupComponent.prototype.getChildren = /**
     * @private
     * @param {?} parentPath
     * @param {?} parentLayer
     * @param {?} searchData
     * @return {?}
     */
    function (parentPath, parentLayer, searchData) {
        /** @type {?} */
        var search = tslib_1.__assign({ parentLayer: parentLayer, category: 'children' }, searchData);
        if (this.treeInfo.layerType === 'parentId') {
            search['parentId'] = parentPath;
        }
        else {
            search['parentPath'] = parentPath;
        }
        /** @type {?} */
        var param = {
            searchValue: JSON.stringify(search),
            customData: this.customData,
            enableFullTree: this.enableFullTree,
            loadTreeDataType: this.loadTreeDataType
        };
        if (this._searchKeyWords) {
            param.enableFullTree = false;
            param.loadTreeDataType = 'layerload';
            if (this.treeInfo.layerType === 'parentId') {
                // 树形帮助查询后，展开节点时将相关查询参数传递到后端 2022-09-13
                search.searchValue = '';
                search.searchField = '*';
            }
            param.searchValue = JSON.stringify(search);
        }
        /** @type {?} */
        var tt = (/** @type {?} */ (this.treeCmpRef));
        if (tt && tt.sortName) {
            Object.assign(param, {
                sortName: tt.sortName,
                sortOrder: tt.sortOrder
            });
        }
        return this.comboService.getData(param, 'get', true);
    };
    /**
     * @param {?=} event
     * @param {?=} type
     * @return {?}
     */
    ComboLookupComponent.prototype.getData = /**
     * @param {?=} event
     * @param {?=} type
     * @return {?}
     */
    function (event, type) {
        if (type === void 0) { type = 'all'; }
        event = event || {};
        if (this._searchKeyWords) {
            event.search = {
                field: '*',
                value: this._searchKeyWords
            };
        }
        /** @type {?} */
        var params = this.buildQueryParams(event, type);
        return this.comboService.getData(params);
    };
    /** 构选查询参数 */
    /**
     * 构选查询参数
     * @private
     * @param {?=} event
     * @param {?=} type
     * @return {?}
     */
    ComboLookupComponent.prototype.buildQueryParams = /**
     * 构选查询参数
     * @private
     * @param {?=} event
     * @param {?=} type
     * @return {?}
     */
    function (event, type) {
        if (type === void 0) { type = 'all'; }
        /** @type {?} */
        var params = {};
        /** @type {?} */
        var searchParam = { category: type };
        if (event) {
            if (event.pageInfo) {
                params['pageIndex'] = event.pageInfo.pageIndex;
                params['pageSize'] = event.pageInfo.pageSize;
            }
            if (event.search) {
                searchParam['searchField'] = event.search.field;
                searchParam['searchValue'] = event.search.value;
            }
            if (event.sortName) {
                searchParam['sortName'] = event.sortName;
            }
            if (event.sortOrder) {
                searchParam['sortOrder'] = event.sortOrder;
            }
        }
        params['searchValue'] = JSON.stringify(searchParam);
        if (this.customData) {
            params['customData'] = this.customData;
        }
        return params;
    };
    /**
     * @param {?} value
     * @param {?} field
     * @return {?}
     */
    ComboLookupComponent.prototype.filterDataOnServer = /**
     * @param {?} value
     * @param {?} field
     * @return {?}
     */
    function (value, field) {
        if (!this.isOpen) {
            return;
        }
        /** @type {?} */
        var search = { search: { field: field, value: value } };
        if (value) {
            this._searchKeyWords = value;
        }
        else {
            this._searchKeyWords = '';
            search = null;
        }
        /** @type {?} */
        var params = this.buildQueryParams(search, 'search');
        this.comboService.serachValue$.next(params);
    };
    /**
     * @param {?} tn
     * @return {?}
     */
    ComboLookupComponent.prototype.onExpandNode = /**
     * @param {?} tn
     * @return {?}
     */
    function (tn) {
        var _this = this;
        if (tn.leaf || tn['showLoading']) {
            return;
        }
        if (!tn.children || !tn.children.length) {
            /** @type {?} */
            var parentPath = '';
            /** @type {?} */
            var parentLayer = -1;
            var _a = {
                value: this._searchKeyWords
            }, _b = _a.field, field = _b === void 0 ? '*' : _b, _c = _a.value, value = _c === void 0 ? '' : _c;
            /** @type {?} */
            var treeInfoField = this.treeInfo.dataField;
            if (this.treeInfo.layerType === 'parentId') {
                // 父ID加载方式
                parentPath = tn['id'];
                parentLayer = tn.data[treeInfoField][this.treeInfo.layerField];
            }
            else {
                if (treeInfoField) {
                    parentPath = tn.data[treeInfoField][this.treeInfo.pathField];
                    parentLayer = tn.data[treeInfoField][this.treeInfo.layerField];
                }
                else {
                    this.treeCmpRef.writeConsole('未找到分级信息。');
                }
            }
            this.getChildren(parentPath, parentLayer, {
                searchField: field === '*' ? '*' : field,
                searchValue: value
            }).subscribe((/**
             * @param {?} data
             * @return {?}
             */
            function (data) {
                if (tn && data.items && data.items.length) {
                    /** @type {?} */
                    var nodes = _this.comboService.checkNodeCanBeSelect(data.items, false);
                    _this.treeCmpRef.appendChildren(nodes, tn);
                }
                _this.treeCmpRef.detectChanges();
                _this.treeCmpRef.psRef.directiveRef.update();
            }));
        }
    };
    ComboLookupComponent.decorators = [
        { type: Component, args: [{
                    // tslint:disable-next-line: component-selector
                    selector: 'farris-combo-lookup',
                    template: "<input-group\r\n    #input\r\n    [attr.title]=\"enableTitle ? displayText : ''\"\r\n    [class.actived]=\"isOpen\"\r\n    [(value)]=\"displayText\"\r\n    [forcePlaceholder]=\"forcePlaceholder\"\r\n    [disabled]=\"disabled\"\r\n    [readonly]=\"readonly\"\r\n    [editable]=\"editable\"\r\n    [groupText]=\"groupIcon\"\r\n    [placeholder]=\"placeholder\"\r\n    [enableClear]=\"enableClear\"\r\n    (clickHandle)=\"onClick()\"\r\n    (inputClick)=\"onInputclick($event)\"\r\n    (blurHandle)=\"onBlur($event)\"\r\n    (focusHandle)=\"onFocus($event)\"\r\n    (valueChange)=\"onTextChange($event)\"\r\n    (clear)=\"onClear()\"\r\n    (keyupHandle)=\"onKeyup($event)\"\r\n    (keydownHandle)=\"onKeydown($event)\"\r\n    [maxLength]=\"maxLength\" \r\n    style=\"display: block;\"\r\n>\r\n</input-group>\r\n<div class=\"comboPanel f-area-hide\" *ngIf=\"isOpen\"  #comboPanel style=\"overflow: hidden; height: 100%; width: 100%\" >\r\n    <farris-datatable\r\n        *ngIf=\"displayType === 'LOOKUPLIST'\"\r\n        #dt\r\n        [width]=\"panelWidth\"\r\n        [height]=\"panelHeight\"\r\n        [columns]=\"columns\"\r\n        [data]=\"comboService.data$ | async\"\r\n        [selections]=\"ownSelections\"\r\n        [idField]=\"idField\"\r\n        [singleSelect]=\"!multiSelect\"\r\n        [pagination] = \"pagination\"\r\n        [pageSize]=\"pageInfo.pageSize\"\r\n        [pageIndex]=\"pageInfo.pageIndex\"\r\n        [pageList]=\"pageInfo.pageList\"\r\n        [total]=\"pageInfo.total\"\r\n        [pagerViewMode]=\"'simple'\"\r\n        [showPageInfo]=\"false\" \r\n        [showPageNumber]=\"false\" \r\n        [showPageList]=\"false\"\r\n        [remoteSort]=\"false\"\r\n        [showHeader]=\"showHeader\"\r\n        (selectRows)=\"onSelectRows($event)\"\r\n        (unSelectRow)=\"onUnSelectRows($event)\"\r\n        (checkAll)=\"onCheckAll($event)\"\r\n        (pageChanged)=\"onPageChanged($event)\"\r\n        (pageSizeChanged)=\"onPageSizeChanged($event)\"\r\n        (columnSorted)=\"onColumnSorted($event)\"\r\n    ></farris-datatable>\r\n\r\n    <farris-treetable #tt\r\n        *ngIf=\"displayType === 'LOOKUPTREELIST'\"\r\n        [showHeader]=\"!useTreeView && showHeader\"\r\n        [showBorder]=\"!useTreeView\" \r\n        [showHeader]=\"!useTreeView\"\r\n        [expandLevel]=\"expandLevel\"\r\n        [virtualized]=\"true\"\r\n\r\n        [columns]=\"columns\"\r\n        [singleSelect]=\"!multiSelect\"\r\n        [idField]=\"idField\"\r\n        [data]=\"comboService.data$ | async\"\r\n        [checkOnSelect]=\"true\"\r\n        [selectOnCheck]=\"true\"\r\n        [fixedHeader]=\"true\"\r\n        [showCheckbox]=\"multiSelect\"\r\n        [fit]=\"true\"\r\n        [remoteSort]=\"false\"\r\n        [loadDataType]=\"loadDataType\"\r\n        (nodeSelected)=\"onSelectRows($event)\"\r\n        (nodeUnSelect)=\"onUnSelectRows($event)\"\r\n        (nodeChecked)=\"onSelectRows($event)\"\r\n        (nodeUnChecked)=\"onUnSelectRows($event)\"\r\n        (checkAll)=\"onCheckAll($event)\"\r\n        (unCheckAll)=\"onCheckAll($event)\"\r\n        (expand)=\"onExpandNode($event)\"\r\n        \r\n    ></farris-treetable>\r\n</div>\r\n<!--\r\n    [width]=\"panelWidth\"\r\n    [height]=\"panelHeight\"\r\n     -->",
                    encapsulation: ViewEncapsulation.None,
                    // styleUrls: ['./combo-lookup.component.scss'],
                    providers: [INPUT_COMBO_VALUE_ACCESSOR, ComboService, LookupUtils]
                }] }
    ];
    /** @nocollapse */
    ComboLookupComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: ChangeDetectorRef },
        { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },
        { type: Renderer2 },
        { type: ComboService },
        { type: Injector }
    ]; };
    ComboLookupComponent.propDecorators = {
        showHeader: [{ type: Input }],
        useTreeView: [{ type: Input }],
        columns: [{ type: Input }],
        pagination: [{ type: Input }],
        displayType: [{ type: Input }],
        expandLevel: [{ type: Input }],
        treeCmpRef: [{ type: ViewChild, args: ['tt',] }],
        tableCmpRef: [{ type: ViewChild, args: ['dt',] }],
        cascade: [{ type: Input }],
        treeInfo: [{ type: Input }],
        loadTreeDataType: [{ type: Input }],
        enableFullTree: [{ type: Input }],
        pageChanged: [{ type: Output }],
        pageSizeChanged: [{ type: Output }],
        useFormDataMapping: [{ type: Input }]
    };
    return ComboLookupComponent;
}(BaseComboComponent));
export { ComboLookupComponent };
if (false) {
    /** @type {?} */
    ComboLookupComponent.prototype.panelHeight;
    /** @type {?} */
    ComboLookupComponent.prototype.comPosition;
    /** @type {?} */
    ComboLookupComponent.prototype.showHeader;
    /** @type {?} */
    ComboLookupComponent.prototype.useTreeView;
    /**
     * -1: 不展开； 0: 全部展开；>0: 展开到指定级数
     * @type {?}
     */
    ComboLookupComponent.prototype.expandLevel;
    /** @type {?} */
    ComboLookupComponent.prototype.cascade;
    /** @type {?} */
    ComboLookupComponent.prototype.treeInfo;
    /**
     * 树形帮助数据加载方式： default: 内置取数； loadall: 加载所有 layerload：分层加载
     * @type {?}
     */
    ComboLookupComponent.prototype.loadTreeDataType;
    /**
     * 启用构造完整树过滤
     * @type {?}
     */
    ComboLookupComponent.prototype.enableFullTree;
    /** @type {?} */
    ComboLookupComponent.prototype.pageChanged;
    /** @type {?} */
    ComboLookupComponent.prototype.pageSizeChanged;
    /**
     * 使用表单映射，默认 false
     * @type {?}
     */
    ComboLookupComponent.prototype.useFormDataMapping;
    /** @type {?} */
    ComboLookupComponent.prototype.ownSelections;
    /** @type {?} */
    ComboLookupComponent.prototype.loadFinish;
    /** @type {?} */
    ComboLookupComponent.prototype.pageInfo;
    /**
     * @type {?}
     * @private
     */
    ComboLookupComponent.prototype.tt$;
    /**
     * @type {?}
     * @private
     */
    ComboLookupComponent.prototype.loaded$;
    /**
     * @type {?}
     * @private
     */
    ComboLookupComponent.prototype._columns;
    /**
     * @type {?}
     * @private
     */
    ComboLookupComponent.prototype._pagination;
    /**
     * @type {?}
     * @private
     */
    ComboLookupComponent.prototype._tableCmpRef;
    /**
     * @type {?}
     * @private
     */
    ComboLookupComponent.prototype._treeCmpRef;
    /**
     * @type {?}
     * @private
     */
    ComboLookupComponent.prototype._searchKeyWords;
    /** @type {?} */
    ComboLookupComponent.prototype.loadDataType;
    /**
     * @type {?}
     * @private
     */
    ComboLookupComponent.prototype.idSer;
    /** @type {?} */
    ComboLookupComponent.prototype.el;
    /** @type {?} */
    ComboLookupComponent.prototype.cdr;
    /** @type {?} */
    ComboLookupComponent.prototype.document;
    /** @type {?} */
    ComboLookupComponent.prototype.render;
    /** @type {?} */
    ComboLookupComponent.prototype.comboService;
    /** @type {?} */
    ComboLookupComponent.prototype.injector;
}
//# sourceMappingURL=data:application/json;base64,