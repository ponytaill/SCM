import * as tslib_1 from "tslib";
// tslint:disable: max-line-length
import { Injectable } from '@angular/core';
import { filter, takeUntil } from 'rxjs/operators';
import { FormControl, FormGroup } from '@angular/forms';
import { BigNumber } from 'bignumber.js';
import { MetadataUtil, PROP_METADATA } from '../metadata/index';
import { ChangeType } from '../binding-data/index';
import { NG_FORM_CONTROL, NG_CHILD_FORM, NG_VALIDATE_FORM } from './decorators';
import { DateUtil } from '../utils/index';
import { ValidationTypes } from '../entity/validator/validation_types';
import { ValidationExecutor } from '../entity/validator/validation_executor';
import * as ValidatorJS from 'validator';
import { DataTypeInfo, RunMode } from '../core';
import { TranslateService } from '../i18n/translate_service';
import { Subject } from 'rxjs';
import { parseISO } from 'date-fns';
/**
 * 表单定义
 */
var Form = /** @class */ (function (_super) {
    tslib_1.__extends(Form, _super);
    /**
     * 构造函数
     */
    function Form() {
        var _this = _super.call(this, {}, null, null) || this;
        _this.raisedByValidateEffector = false;
        _this.isShowValidationMsg = false;
        _this.validatorJs = ValidatorJS.default;
        _this.controlIdMap = {};
        _this.cardControls = {};
        _this.isShowPropMap = {};
        _this.destroy$ = new Subject();
        return _this;
        // this.excludeRuleTypes = {};
    }
    Object.defineProperty(Form.prototype, "formGroupName", {
        /**
         * 名称
         */
        get: function () {
            return this.ngValidateForm ? this.ngValidateForm.formGroupName : '';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Form.prototype, "enableValidate", {
        /**
         * 是否启用表单验证
         */
        get: function () {
            return this.ngValidateForm ? this.ngValidateForm.enableValidate : false;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Form.prototype, "translateService", {
        get: function () {
            return this.translate;
        },
        enumerable: true,
        configurable: true
    });
    Form.prototype.ngOnDestroy = function () {
        this.dispose();
    };
    Form.prototype.dispose = function (options) {
        if (this.destroy$) {
            this.destroy$.next();
            this.destroy$.complete();
            this.destroy$ = null;
        }
        Form.insMap[this.constructor.name] = null;
        this.frameContext = null;
        this.bindingData = null;
        this.ngChildForms = null;
        this.metaDatas = null;
        this.ngFormControls = {};
        this.controls = {};
        this.disposeValidation();
    };
    /**
     * 将formControl的错误信息更新到cardControl上
     */
    Form.updateErrors = function (propertyName, errorObj, id, value, isGrid) {
        Object.keys(Form.insMap).forEach(function (key) {
            var form = Form.insMap[key];
            if (!form) {
                return;
            }
            if (id) {
                form.setControlValue(propertyName, value);
            }
            if (form.enableValidate) {
                form.isFormValid(propertyName, errorObj, id, isGrid);
            }
        });
    };
    /**
     * 设置dom属性为显示状态
     * @param domPropertyName dom属性
     */
    Form.prototype.setIsShowmap = function (domPropertyName) {
        this.isShowPropMap[domPropertyName] = true;
    };
    Form.prototype.setShowValidationMsg = function (flag) {
        this.raisedByValidateEffector = false;
        this.isShowValidationMsg = flag;
    };
    Form.prototype.setControlValue = function (key, value) {
        var bindingObject = this.bindingData && this.bindingData.getObject() || null;
        if (bindingObject && bindingObject.controlMap) {
            bindingObject.controlMap[key] = this.getGridItemControl(key, value);
        }
    };
    /**
     * 根据dom属性名称获取错误信息
     * @param domPropertyName dom属性名称
     */
    Form.prototype.getCardControlErrors = function (domPropertyName) {
        this.setIsShowmap(domPropertyName);
        return this.cardControls[domPropertyName] && this.cardControls[domPropertyName].errors;
    };
    /**
     * 获取字段校验错误
     * @param domPropertyName
     * @returns
     */
    Form.prototype.getFormControlErrors = function (domPropertyName) {
        return this.cardControls[domPropertyName] && this.cardControls[domPropertyName].errors;
    };
    Form.prototype.getGridControlErrors = function (domPropertyName, id) {
        this.setIsShowmap(domPropertyName);
        return this.controlIdMap[id] && this.controlIdMap[id][domPropertyName] && this.controlIdMap[id][domPropertyName]['errors'];
    };
    Form.prototype.isFormValid = function (propertyName, errorObj, id, isGrid) {
        var _this = this;
        var prefix = '';
        // 如果校验信息是由表达式触发的，不处理
        if (this.raisedByValidateEffector) {
            return;
        }
        var isGridComponent = this.frameContext.frameComponent.isGridComponent;
        if (isGridComponent !== undefined) {
            isGrid = isGridComponent;
        }
        //拼接子表frontNodeCode
        var bindingPaths = this.bindingPath.split('/').filter(function (p) { return p; });
        if (bindingPaths.length > 0) {
            prefix = bindingPaths.join('.').concat('.');
        }
        // 界面上绑定的字段名
        var domPropertyName = this.getDomPropertyNameByEntityProp(propertyName, prefix);
        // 传了属性名，但却拿不到dom名称，说明当前组件中没有该字段对应的控件
        if (propertyName && !domPropertyName) {
            return true;
        }
        // 若界面上不存在当前属性（动态列），不进行验证
        if (domPropertyName && !this.isShowPropMap[domPropertyName]) {
            return true;
        }
        var isValid = true;
        var bindingObject = this.bindingData.getObject();
        var currentId = bindingObject.primaryKeyValue;
        var isSubForm = this.bindingPath !== '/';
        var bindingList = this.bindingData.getList();
        // 子表单无数据时，保存时会有一条空数据阻碍验证，所以此处跳过只有一行的情况
        if (isSubForm && bindingList.innerList.size === 0) {
            return true;
        }
        // 无数据时不做校验
        if (!currentId) {
            return true;
        }
        // dataGrid修改时，根据id，创建formControl，并设置错误对象
        if (id && domPropertyName) {
            // if (this.controlIdMap[id] && Object.keys(this.controlIdMap[id]).length === 0) {
            //   this.controlIdMap[id] = {};
            // }
            this.controlIdMap[id] = this.controlIdMap[id] || {};
            this.controlIdMap[id][domPropertyName] = {
                errors: errorObj
            };
        }
        // 将grid的FormControl同步到界面展示用的controlIDMap中
        // const currentBindingObject = bindingList.currentItem as BindingObject;
        var currentBindingObject = bindingObject;
        if (id && id !== currentId) {
            return;
        }
        // 验证全部字段时，清空已有的错误信息
        if (!propertyName && !id) {
            currentBindingObject.controlMap = {};
            this.controlIdMap = {};
            this.cardControls = {};
        }
        Object.keys(this.controls).forEach(function (key) {
            if (_this.isShowPropMap[key] !== true) {
                return;
            }
            // 同步实体错误信息
            if (key === domPropertyName) {
                // 实体验证的信息直接赋值
                if (errorObj && Object.keys(errorObj).length > 0) {
                    // 卡片的错误
                    if (!isGrid) {
                        // 实体层同步过来的错误，目前结构{ruleType:{name:'',value:'',originalErrors:[ValidationError]}}，其中name为校验失败的错误信息
                        // 遍历错误，将validator返回的错误信息国际化
                        Object.keys(errorObj).map(function (validType) {
                            var validationError = errorObj[validType] && errorObj[validType]['error'] || null;
                            if (validationError) {
                                var validateRule = validationError.rule;
                                var ngFormControl = _this.getngFormControlByBinding(validateRule.field);
                                if (ngFormControl) {
                                    validateRule.property = ngFormControl.name || ngFormControl.defaultI18nValue;
                                    validateRule.targetId = ngFormControl.id;
                                    validateRule.targetName = _this.formGroupName;
                                    // 修正校验必填表达式类型和多语资源中key不一致的问题
                                    var fixedValidType = validType === 'require' ? 'required' : validType;
                                    var messageTemplate = ValidationTypes.getMessage(fixedValidType);
                                    if (messageTemplate) {
                                        var invalidMessage = ValidationExecutor.replaceMessageSpecialTokens(messageTemplate, validateRule, ngFormControl.name);
                                        errorObj[validType]['name'] = invalidMessage;
                                    }
                                }
                                // todo: ngFormControl暂时不设置
                                // errorObj['name'] = this.getErrorByRuleType(validType, validateRule, null);
                            }
                        });
                        _this.cardControls[key] = {
                            errors: errorObj
                        };
                    }
                }
                else {
                    _this.cardControls[key] = {};
                }
            }
            if (_this.controls[key] && _this.controls[key].errors && Object.keys(_this.controls[key].errors).length > 0) {
                // 将错误同步到界面展示的位置
                // 认为控件错误只包含错误类型，通过错误类型获取具体的错误信息
                _this.cardControls[key] = {
                    errors: tslib_1.__assign({}, _this.cardControls[key] && _this.cardControls[key].errors, _this.controls[key].errors)
                };
                isValid = false;
            }
        });
        // 处理只开启前端校验，未在BE上启用必填校验的情况
        if (this.cardControls) {
            Object.keys(this.cardControls).forEach(function (key) {
                if (_this.cardControls[key] && _this.cardControls[key].errors) {
                    Object.keys(_this.cardControls[key].errors).forEach(function (validType) {
                        if (typeof _this.cardControls[key].errors[validType] !== 'object') {
                            // 获取对应的校验信息
                            var validateRules = _this.ngFormControls[key].validRules || [];
                            var rules = [].concat(validateRules);
                            var validateRule = rules.find(function (item) { return item.type === validType; });
                            if (validateRule) {
                                validateRule.targetName = _this.formGroupName;
                                var messageTemplate = ValidationTypes.getMessage(validType);
                                var invalidMessage = ValidationExecutor.replaceMessageSpecialTokens(messageTemplate, validateRule, '');
                                _this.cardControls[key].errors[key] = { value: _this.controls[key] && _this.controls[key].value || '', name: invalidMessage };
                            }
                        }
                    });
                }
            });
        }
        Object.keys(this.cardControls).forEach(function (key) {
            if (_this.cardControls[key] && _this.cardControls[key].errors && Object.keys(_this.cardControls[key].errors).length > 0) {
                isValid = false;
            }
        });
        return isValid;
    };
    /**
     * 更新表单错误信息
     * @param errors 错误消息
     */
    Form.prototype.updateFormErrors = function (errors, forceShow, from) {
        var _this = this;
        if (forceShow === void 0) { forceShow = false; }
        if (from === void 0) { from = ''; }
        if (from && from === 'backend') {
            this.clearBackendError();
        }
        // 原来是否已经显示错误，如果已经显示了则增加，否则替换
        if (this.isShowValidationMsg === true || forceShow === true) {
            this.isShowValidationMsg = true;
            Object.keys(errors).forEach(function (key) {
                if (errors[key].errors && Object.keys(errors[key].errors).length > 0) {
                    // 如果控件本身没有错误，则直接使用外部传递过来的错误，否则合并错误
                    _this.cardControls[key] = {
                        errors: tslib_1.__assign({}, _this.cardControls[key] && _this.cardControls[key].errors, errors[key].errors)
                    };
                }
                else {
                    // 移除内存中的错误信息
                    _this.cardControls[key] = {
                        errors: {}
                    };
                    // 重置控件错误信息
                    _this.controls[key].setErrors(null);
                    _this.controls[key].markAsTouched();
                }
            });
        }
    };
    /**
     * 清空后端消息
     */
    Form.prototype.clearBackendError = function () {
        var _this = this;
        Object.keys(this.cardControls).forEach(function (key) {
            var errors = _this.cardControls[key] && _this.cardControls[key].errors || null;
            if (errors) {
                Object.keys(errors).forEach(function (errorType) {
                    if (errorType && errorType.startsWith('backend-message-')) {
                        delete errors[errorType];
                    }
                });
                if (errors && Object.keys(errors).length === 0) {
                    delete _this.cardControls[key].errors;
                }
            }
            else {
                _this.cardControls[key] = {};
            }
        });
    };
    /**
     * 根据实体属性获取ngFormControl
     * @param binding 控件绑定的实体属性名
     */
    Form.prototype.getngFormControlByBinding = function (binding) {
        return Object.values(this.ngFormControls).find(function (ngFormControl) { return ngFormControl.binding && ngFormControl.binding === binding; });
    };
    Form.prototype.disposeValidation = function () {
        var _this = this;
        var properties = this.constructor[PROP_METADATA];
        if (properties && Object.keys(properties).length > 0) {
            Object.keys(properties).forEach(function (key) {
                var props = _this.constructor[PROP_METADATA][key];
                if (props && props.length > 0) {
                    props.forEach(function (item) {
                        if (item.validRules && Array.isArray(item.validRules) && item.validRules.length > 0) {
                            item.validRules = item.validRules.filter(function (item) { return !(item.eval && typeof (item.eval) === 'function'); });
                        }
                    });
                }
            });
        }
    };
    /**
     * 根据dom属性和校验类型获取错误信息
     * @param domProperty dom属性
     * @param validateRuleType 校验类型
     */
    Form.prototype.getErrorMessage = function (domProperty, validateRuleType) {
        var formControl = this.ngFormControls[domProperty];
        if (formControl) {
            var validRules = formControl.validRules;
            var rules = [];
            if (!Array.isArray(validRules)) {
                rules.push(validRules);
            }
            else {
                rules.push.apply(rules, tslib_1.__spread(validRules));
            }
            var rule = rules.find(function (item) { return item.type === validateRuleType; });
            if (rule) {
                var controlName = formControl.name;
                var messageTemplate = ValidationTypes.getMessage(validateRuleType);
                var message = ValidationExecutor.replaceMessageSpecialTokens(messageTemplate, rule, controlName);
                return message;
            }
            return null;
        }
        return null;
    };
    /**
     * 初始化Form
     * @param context 上下文
     */
    Form.prototype.init = function (bindingData, bindingPath, frameContext) {
        this.frameContext = frameContext;
        this.bindingData = bindingData;
        this.bindingPath = bindingPath;
        this.buildForm();
        // @todo: 这种方式做key，如果脚本被压缩，存在风险
        Form.insMap[this.constructor.name] = this;
    };
    /**
     * 构造表单
     */
    Form.prototype.buildForm = function () {
        this.collectMetadatas();
        // this.createChildFormArrays();
        this.createChildForms();
        this.createControls();
    };
    /**
     * 重置表单验证信息
     */
    Form.prototype.resetCardValidMsg = function () {
        var _this = this;
        this.cardControls = {};
        // 剔除 列表中新增后取消,删除的项对应的control信息
        Object.keys(this.controlIdMap).forEach(function (id) {
            if (!_this.bindingData.getList().innerList.map(function (x) { return x.id; }).includes(id)) {
                delete _this.controlIdMap[id];
            }
        });
        this.resetFormControls();
        this.setShowValidationMsg(false);
    };
    /**
     * 更新字段校验规则
     * @param propertyName 属性名
     * @param isRequired 是否必填
     */
    Form.prototype.updateFieldValidateRule = function (propertyName, isRequired) {
        var _this = this;
        if (!propertyName) {
            return;
        }
        var formControl = this.controls[propertyName];
        // 清空全部校验条件
        if (formControl) {
            formControl.clearValidators();
            formControl.markAsUntouched();
            formControl.markAsPristine();
            formControl.setErrors([]);
        }
        // 动态必填场景时生成器不再在formControl上生成必填规则
        // 因此validRules可能为空
        var ngFormControl = this.ngFormControls[propertyName];
        var validateRules = ngFormControl && ngFormControl.validRules || [];
        if (!Array.isArray(validateRules)) {
            validateRules = [validateRules];
        }
        var requiredRuleIndex = validateRules.findIndex(function (validateRule) { return validateRule.type === ValidationTypes.REQUIRED; });
        if (isRequired) {
            // 必填但控件没有必填规则，添加必填规则
            if (requiredRuleIndex == -1) {
                var validateRule = { type: ValidationTypes.REQUIRED, constraints: [true] };
                // 扩展属性，以生成正确的错误提示
                var displayFieldName = ngFormControl && (ngFormControl.name || ngFormControl.defaultI18nValue) || '';
                validateRule.targetId = ngFormControl && ngFormControl.id || null;
                validateRule.targetName = this.formGroupName;
                validateRule.property = displayFieldName;
                validateRule.field = ngFormControl && ngFormControl.binding;
                validateRules.push(validateRule);
            }
        }
        else {
            // 非必填场景，如果有必填规则，移除
            if (requiredRuleIndex !== -1) {
                validateRules.splice(requiredRuleIndex, 1);
            }
        }
        // 整理校验规则
        var validators = [];
        Array.prototype.forEach.call(validateRules, (function (ruleObj) {
            var validateFn = _this.getValidatorByRuleObj(ruleObj, _this.ngFormControls[propertyName]);
            if (validateFn) {
                validators.push(validateFn);
            }
        }));
        this.ngFormControls[propertyName].validRules = validateRules;
        this.controls[propertyName].setValidators(validators);
    };
    Form.prototype.addFieldValidateRule = function (propertyName, message, expressionId, ruleType) {
        var formControl = this.controls[propertyName];
        if (formControl) {
            // 清空全部校验条件
            formControl.setErrors(null);
        }
        var ngFormControl = this.ngFormControls[propertyName];
        var validateRules = this.ngFormControls[propertyName].validRules;
        if (!validateRules) {
            validateRules = [];
        }
        if (!Array.isArray(validateRules)) {
            validateRules = [validateRules];
        }
        var index = validateRules.findIndex(function (rule) { return rule && rule.expressionId === expressionId; });
        if (index !== -1) {
            validateRules.splice(index, 1);
        }
        var bindingPath = this.frameContext.viewModel.bindingPath;
        var bindingPaths = bindingPath.split('/').filter(function (p) { return p; });
        var fieldName = propertyName;
        if (bindingPaths.length !== 0) {
            var prefix = bindingPaths.join('/');
            var binding = ngFormControl.binding || '';
            var property = binding.split('.').join('/');
            fieldName = prefix + "/" + property;
        }
        var context = this.frameContext;
        var validateRule = {
            type: ruleType,
            message: message,
            expressionId: expressionId,
            constraints: [],
            bindingPath: bindingPaths.join('/'),
            eval: function (options) {
                return context.viewModel.expression.validate(expressionId, options);
            }
        };
        validateRules.push(validateRule);
        this.ngFormControls[propertyName].validRules = validateRules;
        // if (this.ngFormControls[propertyName] && validateRules.length > 0) {
        //   const validators: ValidatorFn[] = [];
        //   Array.prototype.forEach.call(validateRules, ((ruleObj: ValidateRule) => {
        //     const validateFn = this.getValidatorByRuleObj(ruleObj, this.ngFormControls[propertyName]);
        //     if (validateFn) {
        //       validators.push(validateFn);
        //     }
        //   }));
        //   this.controls[propertyName].setValidators(validators);
        // }
    };
    /**
     * 根据规则对象生成validator
     * @param ruleObj: ValidateRule
     */
    Form.prototype.getValidatorByRuleObj = function (ruleObj, ngFormControl) {
        var _this = this;
        var type = ruleObj.type, _a = ruleObj.constraints, constraints = _a === void 0 ? [] : _a, _b = ruleObj.message, message = _b === void 0 ? null : _b;
        var displayText = ngFormControl.name || ngFormControl.defaultI18nValue || '';
        var ruleHandlerObj = {
            required: function (control) {
                var value = control.value;
                var isValid = value !== '' && value !== null && value !== undefined && value !== '0001-01-01' && value !== '0001-01-01 00:00:00' && value !== '0001-01-01T00:00:00';
                var parentPaths = _this.bindingPath.split('/').filter(function (p) { return p; });
                var controlPaths = ngFormControl.binding.split('.');
                var paths = parentPaths.concat(controlPaths);
                var propInfo = _this.getPropInfoByPath(paths);
                var isMultiLangInput = propInfo && propInfo.metadataInfo.enableMultiLangInput;
                if (isMultiLangInput) {
                    var currentLanguage = TranslateService.getCurrentLanguage();
                    var currentLangValue = value && value[currentLanguage];
                    isValid = currentLangValue !== '' && currentLangValue !== null && currentLangValue !== undefined && currentLangValue !== '0001-01-01' && currentLangValue !== '0001-01-01 00:00:00' && currentLangValue !== '0001-01-01T00:00:00';
                }
                var messageTemplate = ValidationTypes.getMessage(ValidationTypes.REQUIRED);
                var invalidMessage = ValidationExecutor.replaceMessageSpecialTokens(messageTemplate, ruleObj, control.value);
                if (isValid && control.errors && control.errors.required) {
                    // 修复帮助映射早于控件赋值导致汇总错误消息时帮助必填错误未被清空的问题
                    delete control.errors.required;
                    _this.isFormValid(paths.join('.'));
                }
                return isValid ? null : { required: { value: control.value, name: invalidMessage } };
            },
            maxLength: function (control) {
                var isInValid = control.value && control.value.toString().length > constraints[0];
                var messageTemplate = ValidationTypes.getMessage(ValidationTypes.MAX_LENGTH);
                var invalidMessage = ValidationExecutor.replaceMessageSpecialTokens(messageTemplate, ruleObj, control.value);
                return isInValid ? { maxLength: { value: control.value, name: invalidMessage } } : null;
            },
            minLength: function (control) {
                var isInValid = control.value && control.value.toString().length < constraints[0];
                var messageTemplate = ValidationTypes.getMessage(ValidationTypes.MAX_LENGTH);
                var invalidMessage = ValidationExecutor.replaceMessageSpecialTokens(messageTemplate, ruleObj, control.value);
                return isInValid ? { minLength: { value: control.value, name: invalidMessage } } : null;
            },
            minValue: function (control) {
                var isInValid = false;
                var invalidMessage = '';
                // 这里只做最小值判断，如果用户未输入则不应该做判断
                if (control.value === null || control.value === undefined) {
                    return null;
                }
                if (typeof control.value === 'number' && typeof constraints[0] === 'number') {
                    isInValid = control.value < constraints[0];
                    var messageTemplate = ValidationTypes.getMessage(ValidationTypes.MINVALUE);
                    invalidMessage = ValidationExecutor.replaceMessageSpecialTokens(messageTemplate, ruleObj, control.value);
                    // invalidMessage = `${ngFormControl.name}的值不应小于${constraints[0]}`;
                }
                else if (ngFormControl && ngFormControl.bigNumber === true) {
                    // 大数
                    var minValue = new BigNumber(constraints[0]);
                    var value = new BigNumber(control.value);
                    isInValid = minValue.isGreaterThan(value);
                    var messageTemplate = ValidationTypes.getMessage(ValidationTypes.MINVALUE);
                    invalidMessage = ValidationExecutor.replaceMessageSpecialTokens(messageTemplate, ruleObj, control.value);
                }
                else {
                    var messageTemplate = ValidationTypes.getMessage(ValidationTypes.MIN_DATE);
                    // 假定为日期
                    // 不管控件的值为什么，只要条件不存咋或是null或0或undefined或""，则不对比大小，无意义
                    if (!constraints || constraints.length < 1 || !constraints[0]) {
                        return null;
                    }
                    if (control.value instanceof Date) {
                        isInValid = control.value < parseISO(constraints[0]);
                    }
                    else {
                        isInValid = parseISO(control.value) < parseISO(constraints[0]);
                    }
                    invalidMessage = ValidationExecutor.replaceMessageSpecialTokens(messageTemplate, ruleObj, control.value);
                }
                return isInValid ? { minValue: { value: control.value, name: invalidMessage } } : null;
            },
            maxValue: function (control) {
                var isInValid = false;
                var invalidMessage = '';
                if (control.value === null || control.value === undefined) {
                    return null;
                }
                if (typeof control.value === 'number' && typeof constraints[0] === 'number') {
                    isInValid = control.value > constraints[0];
                    var messageTemplate = ValidationTypes.getMessage(ValidationTypes.MAXVALUE);
                    invalidMessage = ValidationExecutor.replaceMessageSpecialTokens(messageTemplate, ruleObj, control.value);
                    // invalidMessage = `${ngFormControl.name}的值不应大于${constraints[0]}`;
                }
                else if (ngFormControl && ngFormControl.bigNumber === true) {
                    // 大数
                    var maxValue = new BigNumber(constraints[0]);
                    var value = new BigNumber(control.value);
                    isInValid = maxValue.isLessThan(value);
                    var messageTemplate = ValidationTypes.getMessage(ValidationTypes.MAXVALUE);
                    invalidMessage = ValidationExecutor.replaceMessageSpecialTokens(messageTemplate, ruleObj, control.value);
                }
                else {
                    // 假定为日期
                    var messageTemplate = ValidationTypes.getMessage(ValidationTypes.MAX_DATE);
                    if (control.value instanceof Date) {
                        isInValid = control.value > new Date(constraints[0]);
                        // invalidMessage = `${ngFormControl.name}的值不应晚于${constraints[0]}`;
                    }
                    else {
                        isInValid = new Date(control.value) > new Date(constraints[0]);
                        // invalidMessage = `${ngFormControl.name}的值不应早于${constraints[0]}`;
                    }
                    invalidMessage = ValidationExecutor.replaceMessageSpecialTokens(messageTemplate, ruleObj, control.value);
                }
                return isInValid ? { maxValue: { value: control.value, name: invalidMessage } } : null;
            },
            exclude: function (control) {
                var isValid = typeof control.value === 'string' && !_this.validatorJs.contains(control.value, constraints[0]);
                var messageTemplate = ValidationTypes.getMessage(ValidationTypes.EXCLUDE);
                var invalidMessage = ValidationExecutor.replaceMessageSpecialTokens(messageTemplate, ruleObj, control.value);
                return isValid ? null : { exclude: { value: control.value, name: invalidMessage } };
            },
            matches: function (control) {
                var value = (control.value === null || control.value === undefined) ? '' : control.value.toString();
                var isValid = value === '' ? true : _this.validatorJs.matches(value, constraints[0]);
                var invalidMessage = message;
                if (!invalidMessage) {
                    var messageTemplate = ValidationTypes.getMessage(ValidationTypes.MATCHES);
                    invalidMessage = ValidationExecutor.replaceMessageSpecialTokens(messageTemplate, ruleObj, control.value);
                }
                return isValid ? null : { matches: { value: control.value, name: invalidMessage } };
            }
        };
        return ruleHandlerObj[type];
    };
    /**
     * 搜集属性装饰器
     */
    Form.prototype.collectMetadatas = function () {
        this.ngValidateForm = this.frameContext.metadata.form ? MetadataUtil.translateMetadataByName(this.frameContext.metadata.form, this.translateService, ['formGroupName']) :
            MetadataUtil.getClassMetadataByNameWithTranslate(this.constructor, NG_VALIDATE_FORM, this.translateService, ['formGroupName']);
        this.ngFormControls = this.collectionFormControlMetadats(this.frameContext.metadata.formControls);
        this.ngChildForms = this.frameContext.metadata.subForms || MetadataUtil.getPropsMetadatasByName(this.constructor, NG_CHILD_FORM);
    };
    Form.prototype.collectionFormControlMetadats = function (preloadMetadata) {
        var _this = this;
        if (preloadMetadata === void 0) { preloadMetadata = null; }
        var metadatas = preloadMetadata ? MetadataUtil.translateMetadataByName(preloadMetadata, this.translateService, ['name']) :
            MetadataUtil.getPropsMetadatasByNameWithTranslate(this.constructor, NG_FORM_CONTROL, this.translateService, ['name']);
        // 向验证规则中附加表单信息，用于显示验证提示。
        if (metadatas) {
            Object.keys(metadatas).forEach(function (propName) {
                var ngFormControl = metadatas[propName];
                var displayFieldName = ngFormControl.name || ngFormControl.defaultI18nValue || '';
                var formControlId = ngFormControl.id;
                if (Array.isArray(ngFormControl.validRules)) {
                    ngFormControl.validRules.forEach(function (validationRule) {
                        validationRule.targetId = formControlId;
                        validationRule.targetName = _this.formGroupName;
                        validationRule.property = displayFieldName;
                        validationRule.field = ngFormControl.binding;
                    });
                }
            });
        }
        return metadatas;
    };
    // 获取grid中每条数据的formControl
    Form.prototype.getGridItemControl = function (propName, value) {
        var _this = this;
        var createControlFromRules = function (propertyName) {
            var validators = [];
            // 设置form中定义的验证规则
            if (_this.ngFormControls[propertyName] && Array.isArray(_this.ngFormControls[propertyName].validRules)) {
                Array.prototype.forEach.call(_this.ngFormControls[propertyName].validRules, (function (ruleObj) {
                    var validateFn = _this.getValidatorByRuleObj(ruleObj, _this.ngFormControls[propertyName]);
                    if (validateFn) {
                        validators.push(validateFn);
                    }
                }));
            }
            return new FormControl(value, { validators: validators, updateOn: 'blur' });
        };
        return createControlFromRules(propName);
    };
    // 根据实体属性名获取界面绑定的属性名
    Form.prototype.getDomPropertyNameByEntityProp = function (propertyName, prefix) {
        var _this = this;
        if (prefix === void 0) { prefix = ''; }
        var domPropertyName = '';
        Object.keys(this.ngFormControls).forEach(function (key) {
            var binding = "" + prefix + _this.ngFormControls[key].binding;
            if (binding === propertyName) {
                domPropertyName = key;
            }
        });
        return domPropertyName;
    };
    /**
     * 创建FormControl
     */
    Form.prototype.createControls = function () {
        var _this = this;
        Object.keys(this.ngFormControls).forEach(function (propName) {
            var ngFormControl = _this.ngFormControls[propName];
            var validators = [];
            // 设置form中定义的验证规则
            if (Array.isArray(_this.ngFormControls[propName].validRules)) {
                Array.prototype.forEach.call(_this.ngFormControls[propName].validRules, (function (ruleObj) {
                    var validateFn = _this.getValidatorByRuleObj(ruleObj, _this.ngFormControls[propName]);
                    if (validateFn) {
                        validators.push(validateFn);
                    }
                }));
            }
            var updateOn = ngFormControl.updateOn ? ngFormControl.updateOn : 'blur';
            var control = new FormControl(null, { validators: validators, updateOn: updateOn });
            if (ngFormControl.binding) {
                _this.setUpBindingDataPipeline(control, ngFormControl.binding, ngFormControl.valueConverter);
            }
            _this.controls[propName] = control;
            _this[propName] = control;
        });
    };
    /**
     * 创建FormGroup
     */
    Form.prototype.createChildForms = function () {
        var _this = this;
        Object.keys(this.ngChildForms).forEach(function (propName) {
            var ngFormGroup = _this.ngChildForms[propName];
            // 构造子Form
            var formGroup = new ngFormGroup.formType();
            formGroup.init(_this.bindingData, _this.bindingPath, _this.frameContext);
            _this.controls[propName] = formGroup;
            _this[propName] = formGroup;
        });
    };
    /*
    * 新增FormControls
     */
    Form.prototype.addControls = function (column, converter) {
        var updateOn = column && column.editor && column.editor.updateOn ? column.editor.updateOn : 'blur';
        var formControl = new FormControl('', { updateOn: updateOn });
        var fieldPath = column.dataField;
        // 日期格式  需要格式化
        // this.setUpBindingDataPipeline(formControl, fieldPath, converter);
        if (column.editor && column.editor.binding) {
            this.setUpBindingDataPipeline(formControl, fieldPath, converter);
            this.controls[column.editor.binding.path] = formControl;
            this[column.editor.binding.path] = formControl;
        }
    };
    /**
     * 搭建control和table之间的通道
     * @param control 控件
     * @param bindingFieldPath 绑定的字段名
     */
    Form.prototype.setUpBindingDataPipeline = function (control, bindingFieldPath, converter) {
        var _this = this;
        if (!this.bindingData) {
            throw Error('当前组件上下文中找不到BindingData，请检查！');
        }
        // 如果converter存在，则写入上下文，Converter中可能会需要从injector中获取当前语言信息
        // __FRAME_CONTEXT__ 未使用
        /*if (converter) {
          converter['__FRAME_CONTEXT__'] = this.frameContext;
        }*/
        // 将bindignPath与bindingFieldPath合并
        if (this.bindingPath.length > 1) {
            bindingFieldPath = this.bindingPath.substr(1).replace(/\//g, '.') + '.' + bindingFieldPath;
        }
        var bindingPaths = bindingFieldPath.split('.');
        var propertyName = bindingPaths[bindingPaths.length - 1];
        // 设置初始值
        var initValue = this.getValueFromBindingData(bindingPaths, converter);
        control.setValue(initValue);
        // 设置初始值
        // BindingData => control
        this.bindingData.changes.pipe(takeUntil(this.destroy$)).pipe(filter(function (change) {
            var bindingObject = _this.bindingData.getObject();
            var changePath = change.path.join('.');
            if (change.isUdt) {
                return changePath === bindingFieldPath;
            }
            if (change.type === ChangeType.ValueChanged) {
                // path完全匹配
                return changePath === bindingFieldPath;
            }
            else if (change.type === ChangeType.Load || change.type === ChangeType.SelectionChanged || change.type === ChangeType.Remove || change.type === ChangeType.Update) {
                // 对于ObjectChanged、SelectionChanged，匹配到父级
                var changePathWithDot = changePath === '' ? changePath : changePath + '.';
                // 主表新增或切换时，重置错误信息
                if (change && change.type === ChangeType.Load) {
                    _this.resetCardValidMsg();
                }
                return bindingFieldPath.indexOf(changePathWithDot) === 0;
            }
            else if (change.type === ChangeType.UpdateErrors) {
                if (changePath === bindingFieldPath) {
                    _this.cardControls[propertyName] = _this.cardControls[propertyName] || {};
                    if (bindingFieldPath && _this.controls[propertyName]) {
                        if (bindingObject.primaryKeyValue === change.id) {
                            _this.cardControls[propertyName].errors = change.errors;
                        }
                        else {
                            // 只更新当前行的错误提示信息，不是当前行的不处理，放到最终的实体校验里面
                            // this.cardControls[propertyName].errors = null;
                            // this.isFormValid(bindingFieldPath);
                        }
                    }
                    // 没有错误时
                    if (!change.path || !bindingFieldPath || !change.errors) {
                        _this.cardControls[propertyName].errors = null;
                        _this.isFormValid(bindingFieldPath);
                    }
                    return false;
                }
            }
            else {
                return false;
            }
        })).subscribe(function (change) {
            var fullEntityProp = propertyName;
            // udt字段展示时需要将父级属性名和自身属性名用'_'连接
            var pathPrefix = '';
            if (change.isUdt) {
                if (change.isGrid) {
                    // grid 将从表主字段去除
                    change.path.shift();
                }
                if (change.path.length) {
                    pathPrefix = change.path.join('.');
                }
                fullEntityProp = pathPrefix;
            }
            var value = _this.bindingData.getValue(bindingPaths, false);
            var newControlValue = converter ? converter.convertFrom(value) : value;
            // 设置FormControl
            var domPropName = _this.getDomPropertyNameByEntityProp(fullEntityProp);
            _this.cardControls[domPropName] = _this.cardControls[domPropName] || {};
            if (change.errors) {
                _this.cardControls[domPropName].errors = change.errors;
            }
            // dataGrid保存时，根据id，创建formControl，并设置错误对象
            if (change.id) {
                if (_this.controlIdMap[change.id] && Object.keys(_this.controlIdMap[change.id]).length === 0) {
                    _this.controlIdMap[change.id] = {};
                }
                _this.controlIdMap[change.id] = _this.controlIdMap[change.id] || {};
                if (change.errors) {
                    _this.controlIdMap[change.id][domPropName] = {
                        errors: change.errors
                    };
                }
            }
            // 如果和控件上的值一样，则不再更新控件的值
            if (JSON.stringify(control.value) === JSON.stringify(newControlValue)) {
                return;
            }
            // 正则判断是否为日期
            control.setValue(newControlValue);
        });
        // control => BindingData
        control.valueChanges.pipe(takeUntil(this.destroy$)).subscribe(function (value) {
            var oldBindingValue = _this.bindingData.getValue(bindingPaths);
            // 如果是日期，比较年月日是否相等，相等则不重新赋值
            if (value && value.constructor && value.constructor.name === 'Date') {
                var isValidDate = !isNaN(value);
                if (!isValidDate) {
                    return;
                }
                if (oldBindingValue && converter) {
                    var oldValue = converter.convertFrom(oldBindingValue);
                    if (_this.compareDate(value, oldValue) === true) {
                        return;
                    }
                }
            }
            // 如果是日期，比较年月日是否相等，相等则不重新赋值
            if (_this.isDate(converter) === true) {
                if (DateUtil.isEqual(value, oldBindingValue) === true) {
                    return;
                }
            }
            // 如果和BindingData上的值和控件最新的值一样，则不再更新BindingData
            var newBindingValue = converter ? converter.convertTo(value) : value;
            if (JSON.stringify(oldBindingValue) === JSON.stringify(newBindingValue)) {
                return;
            }
            // if (!this.isFormValid(propertyName, null, null, false)) {
            //   const errors = this.cardControls[propertyName] && this.cardControls[propertyName].errors || {};
            //   this.bindingData.setValue(bindingPaths, newBindingValue, false, true, errors);
            // } else {
            _this.clearBackEndMessages(propertyName);
            var emitEventToView = _this.frameContext.appContext.runMode === RunMode.highSpeed;
            _this.bindingData.setValue(bindingPaths, newBindingValue, emitEventToView, true, null, { frameContext: _this.frameContext });
            //}
        });
    };
    /**
     * 判断是否是日期字段
     * 1、目前没有办法判断一个字段是否是日期，只能根据Converter来判断；
     * 2、Devkit不能依赖KendoBinding，不能直接判断DateConverter；
     * 3、不能使用constructor.name,压缩后name变了；
     * 4、暂时根据format属性来判断，一旦其他Converter有format，则判断失效，暂时没有这种情况
     * @todo
     * 为日期字段添加注解，根据注解来判断
     */
    Form.prototype.isDate = function (converter) {
        var isDateConverter = false;
        // if (converter && converter.constructor && converter.constructor.name === 'DateConverter') {
        //   isDateConverter = true;
        // }
        if (converter && converter.hasOwnProperty('format') === true) {
            isDateConverter = true;
        }
        return isDateConverter;
    };
    /**
     * 比较日期（只比较年月日）
     */
    Form.prototype.compareDate = function (srcDate, dstDate) {
        if (!srcDate || !dstDate) {
            return srcDate === dstDate;
        }
        var isEqual = srcDate.getFullYear() === dstDate.getFullYear()
            && srcDate.getMonth() === dstDate.getMonth()
            && srcDate.getDate() === dstDate.getDate()
            && srcDate.getHours() === dstDate.getHours()
            && srcDate.getMinutes() === dstDate.getMinutes()
            && srcDate.getSeconds() === dstDate.getSeconds();
        return isEqual;
    };
    Form.prototype.getPropInfoByPath = function (path) {
        var entityType = this.frameContext && this.frameContext.repository.entityType || null;
        if (entityType) {
            var dataTypeInfo = new DataTypeInfo(entityType);
            var propInfo = dataTypeInfo.getPropInfoByPath(path);
            return propInfo;
            // const isMultiLangInput = propInfo.metadataInfo.enableMultiLangInput;
        }
        return null;
    };
    /**
     * 从BindingData中获取指定路径的值
     */
    Form.prototype.getValueFromBindingData = function (bindingPaths, converter) {
        var value = this.bindingData.getValue(bindingPaths);
        var converteredValue = converter ? converter.convertFrom(value) : value;
        return converteredValue;
    };
    Form.prototype.getEntityValueChangingListeners = function () {
        var _this = this;
        var listeners = {};
        Object.keys(this.ngFormControls).forEach(function (propName) {
            var ngFormControl = _this.ngFormControls[propName];
            if (ngFormControl.valueChanging) {
                listeners[ngFormControl.binding] = ngFormControl.valueChanging;
            }
        });
        return listeners;
    };
    Form.prototype.getEntityValueChangedListeners = function () {
        var _this = this;
        var listeners = {};
        Object.keys(this.ngFormControls).forEach(function (propName) {
            var ngFormControl = _this.ngFormControls[propName];
            if (ngFormControl.valueChanged) {
                listeners[ngFormControl.binding] = ngFormControl.valueChanged;
            }
        });
        return listeners;
    };
    /**
     * 获取所有的前端验证规则
     * @description
     * 返回的校验规则为Map<string,ValidateRule>,其中key为全路径，从bindingPath开始到实体属性，以/分隔
     */
    Form.prototype.getValidationRules = function () {
        var _this = this;
        var validatoinRules = new Map();
        var parentPath = this.bindingPath;
        if (parentPath.length && parentPath === '/') {
            parentPath = '';
        }
        Object.keys(this.ngFormControls).forEach(function (propName) {
            // const fieldName = `${parentPath}/${propName}`;
            if (_this.isShowPropMap[propName] === true || Object.keys(_this.isShowPropMap).length === 0) {
                var ngFormControl_1 = _this.ngFormControls[propName];
                var displayFieldName_1 = ngFormControl_1.name || ngFormControl_1.defaultI18nValue || '';
                var bindingPathArray = ngFormControl_1.binding ? ngFormControl_1.binding.split('.') : [propName];
                var fieldNameArray = tslib_1.__spread([parentPath], bindingPathArray);
                var fieldName_1 = fieldNameArray.join('/');
                if (Array.isArray(ngFormControl_1.validRules) && ngFormControl_1.validRules.length > 0) {
                    var validationrulesToAdd = tslib_1.__spread(ngFormControl_1.validRules);
                    // if (this.excludeRuleTypes && this.excludeRuleTypes[propName] && this.excludeRuleTypes[propName].length > 0) {
                    //   validationrulesToAdd = ngFormControl.validRules.filter((item) => !this.excludeRuleTypes[propName].includes(item.type));
                    // }
                    validationrulesToAdd.forEach(function (validationRule) {
                        validationRule.targetId = ngFormControl_1.id;
                        validationRule.targetName = _this.formGroupName;
                        validationRule.property = displayFieldName_1;
                        validationRule.field = ngFormControl_1.binding;
                        validationRule.fullPath = fieldName_1;
                        if (_this.frameContext) {
                            validationRule.frameContext = _this.frameContext;
                        }
                    });
                    validatoinRules.set(fieldName_1, validationrulesToAdd);
                }
                else {
                    validatoinRules.set(fieldName_1, [{
                            type: 'setDisplayInfo',
                            targetId: ngFormControl_1.id,
                            targetName: _this.formGroupName,
                            property: displayFieldName_1,
                            fullPath: fieldName_1,
                            frameContext: _this.frameContext
                        }]);
                }
            }
        });
        return validatoinRules;
    };
    Form.prototype.setTranslateService = function (translateService) {
        if (!translateService) {
            return;
        }
        this.translate = translateService;
        ValidationTypes.setCurrentLanguage(translateService.getCurrentLanguage());
    };
    /**
     * 重置控件状态
     */
    Form.prototype.resetFormControls = function () {
        var _this = this;
        if (Object.keys(this.controls).length > 0) {
            Object.keys(this.controls).forEach(function (prop) {
                var formControl = _this.controls[prop];
                formControl.markAsUntouched();
                formControl.markAsPristine();
            });
        }
    };
    Form.prototype.clearBackEndMessages = function (domPropertyName) {
        var _this = this;
        if (domPropertyName) {
            if (this.cardControls[domPropertyName] && this.cardControls[domPropertyName]['errors'] && !!Object.keys(this.cardControls[domPropertyName]['errors']).find(function (item) { return item.startsWith('message-'); })) {
                var messageKeys = Object.keys(this.cardControls[domPropertyName]['errors']).filter(function (item) { return item.startsWith('message-'); });
                var errors_1 = tslib_1.__assign({}, this.cardControls[domPropertyName]['errors']);
                messageKeys.forEach(function (key) { return delete errors_1[key]; });
                this.cardControls[domPropertyName] = { errors: errors_1 };
            }
        }
        else {
            Object.keys(this.cardControls).forEach(function (propertyName) {
                if (_this.cardControls[propertyName] && _this.cardControls[propertyName]['errors'] && !!Object.keys(_this.cardControls[propertyName]['errors']).find(function (item) { return item.startsWith('message-'); })) {
                    var messageKeys = Object.keys(_this.cardControls[propertyName]['errors']).filter(function (item) { return item.startsWith('message-'); });
                    var errors_2 = tslib_1.__assign({}, _this.cardControls[propertyName]['errors']);
                    messageKeys.forEach(function (key) { return delete errors_2[key]; });
                    _this.cardControls[propertyName] = { errors: errors_2 };
                }
            });
        }
    };
    /**
     * 存放所有实例的映射
     */
    Form.insMap = {};
    Form.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    Form.ctorParameters = function () { return []; };
    return Form;
}(FormGroup));
export { Form };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZm9ybS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BmYXJyaXMvZGV2a2l0LyIsInNvdXJjZXMiOlsibGliL2Zvcm0vZm9ybS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsa0NBQWtDO0FBQ2xDLE9BQU8sRUFBYyxVQUFVLEVBQXVCLE1BQU0sZUFBZSxDQUFDO0FBRTVFLE9BQU8sRUFBRSxNQUFNLEVBQUUsU0FBUyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDbkQsT0FBTyxFQUFFLFdBQVcsRUFBRSxTQUFTLEVBQWUsTUFBTSxnQkFBZ0IsQ0FBQztBQUNyRSxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sY0FBYyxDQUFDO0FBQ3pDLE9BQU8sRUFBRSxZQUFZLEVBQUUsYUFBYSxFQUFFLE1BQU0sbUJBQW1CLENBQUM7QUFFaEUsT0FBTyxFQUF1QixVQUFVLEVBQWlCLE1BQU0sdUJBQXVCLENBQUM7QUFFdkYsT0FBTyxFQUNMLGVBQWUsRUFDZixhQUFhLEVBQ0csZ0JBQWdCLEVBQ2pDLE1BQU0sY0FBYyxDQUFDO0FBRXRCLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUUxQyxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sc0NBQXNDLENBQUM7QUFDdkUsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0seUNBQXlDLENBQUM7QUFDN0UsT0FBTyxLQUFLLFdBQVcsTUFBTSxXQUFXLENBQUM7QUFFekMsT0FBTyxFQUFnQixZQUFZLEVBQUUsT0FBTyxFQUFFLE1BQU0sU0FBUyxDQUFDO0FBQzlELE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLDJCQUEyQixDQUFDO0FBRzdELE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFDL0IsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLFVBQVUsQ0FBQztBQUNwQzs7R0FFRztBQUNIO0lBQ21CLGdDQUFTO0lBb0MxQjs7T0FFRztJQUNIO1FBQUEsWUFDRSxrQkFBTSxFQUFFLEVB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QUFDO0NBQUEsQUFwbkNELENBQ21CLFNBQVMsR0FtbkMzQjtBQUVELE9BQU8sRUFBRSxJQUFJLEVBQUUsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIHRzbGludDpkaXNhYmxlOiBtYXgtbGluZS1sZW5ndGhcclxuaW1wb3J0IHsgRWxlbWVudFJlZiwgSW5qZWN0YWJsZSwgSW5qZWN0b3IsIE9uRGVzdHJveSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBBYnN0cmFjdENvbnRyb2wgfSBmcm9tICdAYW5ndWxhci9mb3Jtcyc7XHJcbmltcG9ydCB7IGZpbHRlciwgdGFrZVVudGlsIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xyXG5pbXBvcnQgeyBGb3JtQ29udHJvbCwgRm9ybUdyb3VwLCBWYWxpZGF0b3JGbiB9IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcclxuaW1wb3J0IHsgQmlnTnVtYmVyIH0gZnJvbSAnYmlnbnVtYmVyLmpzJztcclxuaW1wb3J0IHsgTWV0YWRhdGFVdGlsLCBQUk9QX01FVEFEQVRBIH0gZnJvbSAnLi4vbWV0YWRhdGEvaW5kZXgnO1xyXG5pbXBvcnQgeyBGcmFtZUNvbnRleHQgfSBmcm9tICcuLi9mcmFtZS9pbmRleCc7XHJcbmltcG9ydCB7IEJpbmRpbmdEYXRhLCBDaGFuZ2UsIENoYW5nZVR5cGUsIEJpbmRpbmdPYmplY3QgfSBmcm9tICcuLi9iaW5kaW5nLWRhdGEvaW5kZXgnO1xyXG5pbXBvcnQgeyBWYWxpZGF0ZVJ1bGUsIFZhbGlkYXRpb24gfSBmcm9tICcuLi9lbnRpdHkvdmFsaWRhdG9yL3R5cGVzJztcclxuaW1wb3J0IHtcclxuICBOR19GT1JNX0NPTlRST0wsIE5nRm9ybUNvbnRyb2wsXHJcbiAgTkdfQ0hJTERfRk9STSwgTmdDaGlsZEZvcm0sXHJcbiAgTmdWYWxpZGF0ZUZvcm0sIE5HX1ZBTElEQVRFX0ZPUk1cclxufSBmcm9tICcuL2RlY29yYXRvcnMnO1xyXG5pbXBvcnQgeyBDb250cm9sVmFsdWVDb252ZXJ0ZXIgfSBmcm9tICcuL2NvbnRyb2xfdmFsdWVfY29udmVydGVyJztcclxuaW1wb3J0IHsgRGF0ZVV0aWwgfSBmcm9tICcuLi91dGlscy9pbmRleCc7XHJcbmltcG9ydCB7IFRyYW5zbGF0ZSB9IGZyb20gJy4uL2kxOG4vdHJhbnNsYXRlJztcclxuaW1wb3J0IHsgVmFsaWRhdGlvblR5cGVzIH0gZnJvbSAnLi4vZW50aXR5L3ZhbGlkYXRvci92YWxpZGF0aW9uX3R5cGVzJztcclxuaW1wb3J0IHsgVmFsaWRhdGlvbkV4ZWN1dG9yIH0gZnJvbSAnLi4vZW50aXR5L3ZhbGlkYXRvci92YWxpZGF0aW9uX2V4ZWN1dG9yJztcclxuaW1wb3J0ICogYXMgVmFsaWRhdG9ySlMgZnJvbSAndmFsaWRhdG9yJztcclxuaW1wb3J0IHsgVmFsaWRhdGlvbkVycm9yIH0gZnJvbSAnLi4vZW50aXR5JztcclxuaW1wb3J0IHsgRGF0YVByb3BJbmZvLCBEYXRhVHlwZUluZm8sIFJ1bk1vZGUgfSBmcm9tICcuLi9jb3JlJztcclxuaW1wb3J0IHsgVHJhbnNsYXRlU2VydmljZSB9IGZyb20gJy4uL2kxOG4vdHJhbnNsYXRlX3NlcnZpY2UnO1xyXG5pbXBvcnQgeyBSdWxlVHlwZSB9IGZyb20gJy4vdHlwZXMnO1xyXG5pbXBvcnQgeyBJRGlzcG9zYWJsZSB9IGZyb20gJy4uL2NvcmUnO1xyXG5pbXBvcnQgeyBTdWJqZWN0IH0gZnJvbSAncnhqcyc7XHJcbmltcG9ydCB7IHBhcnNlSVNPIH0gZnJvbSAnZGF0ZS1mbnMnO1xyXG4vKipcclxuICog6KGo5Y2V5a6a5LmJXHJcbiAqL1xyXG5ASW5qZWN0YWJsZSgpXHJcbmNsYXNzIEZvcm0gZXh0ZW5kcyBGb3JtR3JvdXAgaW1wbGVtZW50cyBJRGlzcG9zYWJsZSwgT25EZXN0cm95IHtcclxuXHJcbiAgLyoqXHJcbiAgICog5a2Y5pS+5omA5pyJ5a6e5L6L55qE5pig5bCEXHJcbiAgICovXHJcbiAgc3RhdGljIGluc01hcDoge1xyXG4gICAgW2Zvcm1OYW1lOiBzdHJpbmddOiBGb3JtXHJcbiAgfSA9IHt9O1xyXG5cclxuICAvKipcclxuICAgKiDlkI3np7BcclxuICAgKi9cclxuICBwdWJsaWMgZ2V0IGZvcm1Hcm91cE5hbWUoKSB7XHJcbiAgICByZXR1cm4gdGhpcy5uZ1ZhbGlkYXRlRm9ybSA/IHRoaXMubmdWYWxpZGF0ZUZvcm0uZm9ybUdyb3VwTmFtZSA6ICcnO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog5piv5ZCm5ZCv55So6KGo5Y2V6aqM6K+BXHJcbiAgICovXHJcbiAgcHVibGljIGdldCBlbmFibGVWYWxpZGF0ZSgpIHtcclxuICAgIHJldHVybiB0aGlzLm5nVmFsaWRhdGVGb3JtID8gdGhpcy5uZ1ZhbGlkYXRlRm9ybS5lbmFibGVWYWxpZGF0ZSA6IGZhbHNlO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIGdldCB0cmFuc2xhdGVTZXJ2aWNlKCk6IFRyYW5zbGF0ZSB7XHJcbiAgICByZXR1cm4gdGhpcy50cmFuc2xhdGU7XHJcbiAgfVxyXG4gIC8qKlxyXG4gICAqIOaOkumZpOeahOagoemqjOinhOWImeexu+Wei1xyXG4gICAqL1xyXG4gIC8vIHByaXZhdGUgZXhjbHVkZVJ1bGVUeXBlczogeyBbcHJvcGVydHlOYW1lOiBzdHJpbmddOiBzdHJpbmdbXSB9O1xyXG5cclxuICAvKipcclxuICAgKiDkuIrkuIvmlodcclxuICAgKi9cclxuICBwcm90ZWN0ZWQgZnJhbWVDb250ZXh0OiBGcmFtZUNvbnRleHQ7XHJcblxyXG4gIC8qKlxyXG4gICAqIOaehOmAoOWHveaVsFxyXG4gICAqL1xyXG4gIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgc3VwZXIoe30sIG51bGwsIG51bGwpO1xyXG4gICAgdGhpcy5jb250cm9sSWRNYXAgPSB7fTtcclxuICAgIHRoaXMuY2FyZENvbnRyb2xzID0ge307XHJcbiAgICB0aGlzLmlzU2hvd1Byb3BNYXAgPSB7fTtcclxuICAgIHRoaXMuZGVzdHJveSQgPSBuZXcgU3ViamVjdDxhbnk+KCk7XHJcbiAgICAvLyB0aGlzLmV4Y2x1ZGVSdWxlVHlwZXMgPSB7fTtcclxuICB9XHJcbiAgbmdPbkRlc3Ryb3koKTogdm9pZCB7XHJcbiAgICB0aGlzLmRpc3Bvc2UoKTtcclxuICB9XHJcbiAgZGlzcG9zZShvcHRpb25zPzogYW55KSB7XHJcbiAgICBpZiAodGhpcy5kZXN0cm95JCkge1xyXG4gICAgICB0aGlzLmRlc3Ryb3kkLm5leHQoKTtcclxuICAgICAgdGhpcy5kZXN0cm95JC5jb21wbGV0ZSgpO1xyXG4gICAgICB0aGlzLmRlc3Ryb3kkID0gbnVsbDtcclxuICAgIH1cclxuICAgIEZvcm0uaW5zTWFwW3RoaXMuY29uc3RydWN0b3IubmFtZV0gPSBudWxsO1xyXG4gICAgdGhpcy5mcmFtZUNvbnRleHQgPSBudWxsO1xyXG4gICAgdGhpcy5iaW5kaW5nRGF0YSA9IG51bGw7XHJcbiAgICB0aGlzLm5nQ2hpbGRGb3JtcyA9IG51bGw7XHJcbiAgICB0aGlzLm1ldGFEYXRhcyA9IG51bGw7XHJcbiAgICB0aGlzLm5nRm9ybUNvbnRyb2xzID0ge307XHJcbiAgICB0aGlzLmNvbnRyb2xzID0ge307XHJcbiAgICB0aGlzLmRpc3Bvc2VWYWxpZGF0aW9uKCk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDnu5HlrprmlbDmja5cclxuICAgKi9cclxuICBwcm90ZWN0ZWQgYmluZGluZ0RhdGE6IEJpbmRpbmdEYXRhO1xyXG4gIC8qKlxyXG4gICAqIOe7keWumui3r+W+hFxyXG4gICAqL1xyXG4gIHByb3RlY3RlZCBiaW5kaW5nUGF0aDogc3RyaW5nO1xyXG4gIC8qKlxyXG4gICAqIEZvcm3mj4/ov7BcclxuICAgKi9cclxuICBwcml2YXRlIG5nVmFsaWRhdGVGb3JtOiBOZ1ZhbGlkYXRlRm9ybTtcclxuICAvKipcclxuICAgKiDnu5PmnoTmj4/ov7DvvJpGb3JtQ29udHJvbFxyXG4gICAqL1xyXG4gIHB1YmxpYyBuZ0Zvcm1Db250cm9sczogeyBbcHJvcE5hbWU6IHN0cmluZ106IE5nRm9ybUNvbnRyb2wgfTtcclxuICAvKipcclxuICAgKiDlhYPmlbDmja5cclxuICAgKi9cclxuICBwdWJsaWMgbWV0YURhdGFzOiB7IFtwcm9wTmFtZTogc3RyaW5nXTogYW55IH07XHJcbiAgLyoqXHJcbiAgICog57uT5p6E5o+P6L+w77yaRm9ybUdyb3VwXHJcbiAgICovXHJcbiAgcHJpdmF0ZSBuZ0NoaWxkRm9ybXM6IHsgW3Byb3BOYW1lOiBzdHJpbmddOiBOZ0NoaWxkRm9ybSB9O1xyXG4gIC8qKlxyXG4gICAqIOWtmOaUvuafkOadoeaVsOaNruS4i+eahOWxnuaAp+mUmeivr+S/oeaBr1xyXG4gICAqL1xyXG4gIHByaXZhdGUgY29udHJvbElkTWFwOiB7XHJcbiAgICBbaWQ6IHN0cmluZ106IHtcclxuICAgICAgW3Byb3BOYW1lOiBzdHJpbmddOiBvYmplY3RcclxuICAgIH1cclxuICB9O1xyXG4gIC8qKlxyXG4gICAqIOeUqOS6juWtmOWCqOWxnuaAp+mUmeivr1xyXG4gICAqL1xyXG4gIHByaXZhdGUgY2FyZENvbnRyb2xzOiBvYmplY3Q7XHJcbiAgcHJpdmF0ZSByYWlzZWRCeVZhbGlkYXRlRWZmZWN0b3IgPSBmYWxzZTtcclxuICBwdWJsaWMgaXNTaG93VmFsaWRhdGlvbk1zZyA9IGZhbHNlO1xyXG5cclxuICAvLyDlsZ7mgKflnKjpobXpnaLkuIrlsZXnpLrnirbmgIHnmoRtYXAsa2V55pivaHRtbOS4reS9v+eUqOeahOWxnuaAp+WQjVxyXG4gIHB1YmxpYyBpc1Nob3dQcm9wTWFwOiB7XHJcbiAgICBbZG9tUHJvcGVydHlOYW1lOiBzdHJpbmddOiBib29sZWFuXHJcbiAgfTtcclxuXHJcbiAgcHJpdmF0ZSB0cmFuc2xhdGU6IFRyYW5zbGF0ZTtcclxuXHJcbiAgcHJpdmF0ZSB2YWxpZGF0b3JKcyA9IFZhbGlkYXRvckpTLmRlZmF1bHQ7XHJcbiAgcHJpdmF0ZSBkZXN0cm95JDogU3ViamVjdDxhbnk+O1xyXG4gIC8qKlxyXG4gICAqIOWwhmZvcm1Db250cm9s55qE6ZSZ6K+v5L+h5oGv5pu05paw5YiwY2FyZENvbnRyb2zkuIpcclxuICAgKi9cclxuICBzdGF0aWMgdXBkYXRlRXJyb3JzKHByb3BlcnR5TmFtZSwgZXJyb3JPYmosIGlkLCB2YWx1ZT8sIGlzR3JpZD8pIHtcclxuICAgIE9iamVjdC5rZXlzKEZvcm0uaW5zTWFwKS5mb3JFYWNoKGtleSA9PiB7XHJcbiAgICAgIGNvbnN0IGZvcm0gPSBGb3JtLmluc01hcFtrZXldO1xyXG4gICAgICBpZiAoIWZvcm0pIHtcclxuICAgICAgICByZXR1cm47XHJcbiAgICAgIH1cclxuICAgICAgaWYgKGlkKSB7XHJcbiAgICAgICAgZm9ybS5zZXRDb250cm9sVmFsdWUocHJvcGVydHlOYW1lLCB2YWx1ZSk7XHJcbiAgICAgIH1cclxuICAgICAgaWYgKGZvcm0uZW5hYmxlVmFsaWRhdGUpIHtcclxuICAgICAgICBmb3JtLmlzRm9ybVZhbGlkKHByb3BlcnR5TmFtZSwgZXJyb3JPYmosIGlkLCBpc0dyaWQpO1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuICB9XHJcbiAgLyoqXHJcbiAgICog6K6+572uZG9t5bGe5oCn5Li65pi+56S654q25oCBXHJcbiAgICogQHBhcmFtIGRvbVByb3BlcnR5TmFtZSBkb23lsZ7mgKdcclxuICAgKi9cclxuICBwdWJsaWMgc2V0SXNTaG93bWFwKGRvbVByb3BlcnR5TmFtZTogc3RyaW5nKSB7XHJcbiAgICB0aGlzLmlzU2hvd1Byb3BNYXBbZG9tUHJvcGVydHlOYW1lXSA9IHRydWU7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgc2V0U2hvd1ZhbGlkYXRpb25Nc2coZmxhZzogYm9vbGVhbikge1xyXG4gICAgdGhpcy5yYWlzZWRCeVZhbGlkYXRlRWZmZWN0b3IgPSBmYWxzZTtcclxuICAgIHRoaXMuaXNTaG93VmFsaWRhdGlvbk1zZyA9IGZsYWc7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgc2V0Q29udHJvbFZhbHVlKGtleTogc3RyaW5nLCB2YWx1ZTogYW55KSB7XHJcbiAgICBjb25zdCBiaW5kaW5nT2JqZWN0OiBCaW5kaW5nT2JqZWN0ID0gdGhpcy5iaW5kaW5nRGF0YSAmJiB0aGlzLmJpbmRpbmdEYXRhLmdldE9iamVjdCgpIHx8IG51bGw7XHJcbiAgICBpZiAoYmluZGluZ09iamVjdCAmJiBiaW5kaW5nT2JqZWN0LmNvbnRyb2xNYXApIHtcclxuICAgICAgYmluZGluZ09iamVjdC5jb250cm9sTWFwW2tleV0gPSB0aGlzLmdldEdyaWRJdGVtQ29udHJvbChrZXksIHZhbHVlKTtcclxuICAgIH1cclxuICB9XHJcbiAgLyoqXHJcbiAgICog5qC55o2uZG9t5bGe5oCn5ZCN56ew6I635Y+W6ZSZ6K+v5L+h5oGvXHJcbiAgICogQHBhcmFtIGRvbVByb3BlcnR5TmFtZSBkb23lsZ7mgKflkI3np7BcclxuICAgKi9cclxuICBwdWJsaWMgZ2V0Q2FyZENvbnRyb2xFcnJvcnMoZG9tUHJvcGVydHlOYW1lPzogc3RyaW5nKTogb2JqZWN0IHtcclxuICAgIHRoaXMuc2V0SXNTaG93bWFwKGRvbVByb3BlcnR5TmFtZSk7XHJcbiAgICByZXR1cm4gdGhpcy5jYXJkQ29udHJvbHNbZG9tUHJvcGVydHlOYW1lXSAmJiB0aGlzLmNhcmRDb250cm9sc1tkb21Qcm9wZXJ0eU5hbWVdLmVycm9ycztcclxuICB9XHJcbiAgLyoqXHJcbiAgICog6I635Y+W5a2X5q615qCh6aqM6ZSZ6K+vXHJcbiAgICogQHBhcmFtIGRvbVByb3BlcnR5TmFtZSBcclxuICAgKiBAcmV0dXJucyBcclxuICAgKi9cclxuICBwdWJsaWMgZ2V0Rm9ybUNvbnRyb2xFcnJvcnMoZG9tUHJvcGVydHlOYW1lPzogc3RyaW5nKSB7XHJcbiAgICByZXR1cm4gdGhpcy5jYXJkQ29udHJvbHNbZG9tUHJvcGVydHlOYW1lXSAmJiB0aGlzLmNhcmRDb250cm9sc1tkb21Qcm9wZXJ0eU5hbWVdLmVycm9ycztcclxuICB9XHJcbiAgcHVibGljIGdldEdyaWRDb250cm9sRXJyb3JzKGRvbVByb3BlcnR5TmFtZTogc3RyaW5nLCBpZDogc3RyaW5nKTogb2JqZWN0IHtcclxuICAgIHRoaXMuc2V0SXNTaG93bWFwKGRvbVByb3BlcnR5TmFtZSk7XHJcbiAgICByZXR1cm4gdGhpcy5jb250cm9sSWRNYXBbaWRdICYmIHRoaXMuY29udHJvbElkTWFwW2lkXVtkb21Qcm9wZXJ0eU5hbWVdICYmIHRoaXMuY29udHJvbElkTWFwW2lkXVtkb21Qcm9wZXJ0eU5hbWVdWydlcnJvcnMnXTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBpc0Zvcm1WYWxpZChwcm9wZXJ0eU5hbWU/OiBzdHJpbmcsIGVycm9yT2JqPzogb2JqZWN0LCBpZD86IHN0cmluZywgaXNHcmlkPzogYm9vbGVhbik6IGJvb2xlYW4ge1xyXG4gICAgbGV0IHByZWZpeCA9ICcnO1xyXG4gICAgLy8g5aaC5p6c5qCh6aqM5L+h5oGv5piv55Sx6KGo6L6+5byP6Kem5Y+R55qE77yM5LiN5aSE55CGXHJcbiAgICBpZiAodGhpcy5yYWlzZWRCeVZhbGlkYXRlRWZmZWN0b3IpIHtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG4gICAgY29uc3QgaXNHcmlkQ29tcG9uZW50ID0gdGhpcy5mcmFtZUNvbnRleHQuZnJhbWVDb21wb25lbnQuaXNHcmlkQ29tcG9uZW50O1xyXG4gICAgaWYgKGlzR3JpZENvbXBvbmVudCAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgIGlzR3JpZCA9IGlzR3JpZENvbXBvbmVudDtcclxuICAgIH1cclxuICAgIC8v5ou85o6l5a2Q6KGoZnJvbnROb2RlQ29kZVxyXG4gICAgY29uc3QgYmluZGluZ1BhdGhzID0gdGhpcy5iaW5kaW5nUGF0aC5zcGxpdCgnLycpLmZpbHRlcihwID0+IHApO1xyXG4gICAgaWYgKGJpbmRpbmdQYXRocy5sZW5ndGggPiAwKSB7XHJcbiAgICAgIHByZWZpeCA9IGJpbmRpbmdQYXRocy5qb2luKCcuJykuY29uY2F0KCcuJyk7XHJcbiAgICB9XHJcbiAgICAvLyDnlYzpnaLkuIrnu5HlrprnmoTlrZfmrrXlkI1cclxuICAgIGNvbnN0IGRvbVByb3BlcnR5TmFtZSA9IHRoaXMuZ2V0RG9tUHJvcGVydHlOYW1lQnlFbnRpdHlQcm9wKHByb3BlcnR5TmFtZSwgcHJlZml4KTtcclxuICAgIC8vIOS8oOS6huWxnuaAp+WQje+8jOS9huWNtOaLv+S4jeWIsGRvbeWQjeensO+8jOivtOaYjuW9k+WJjee7hOS7tuS4reayoeacieivpeWtl+auteWvueW6lOeahOaOp+S7tlxyXG4gICAgaWYgKHByb3BlcnR5TmFtZSAmJiAhZG9tUHJvcGVydHlOYW1lKSB7XHJcbiAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgfVxyXG4gICAgLy8g6Iul55WM6Z2i5LiK5LiN5a2Y5Zyo5b2T5YmN5bGe5oCn77yI5Yqo5oCB5YiX77yJ77yM5LiN6L+b6KGM6aqM6K+BXHJcbiAgICBpZiAoZG9tUHJvcGVydHlOYW1lICYmICF0aGlzLmlzU2hvd1Byb3BNYXBbZG9tUHJvcGVydHlOYW1lXSkge1xyXG4gICAgICByZXR1cm4gdHJ1ZTtcclxuICAgIH1cclxuICAgIGxldCBpc1ZhbGlkID0gdHJ1ZTtcclxuICAgIGNvbnN0IGJpbmRpbmdPYmplY3QgPSB0aGlzLmJpbmRpbmdEYXRhLmdldE9iamVjdCgpO1xyXG4gICAgY29uc3QgY3VycmVudElkID0gYmluZGluZ09iamVjdC5wcmltYXJ5S2V5VmFsdWU7XHJcbiAgICBjb25zdCBpc1N1YkZvcm0gPSB0aGlzLmJpbmRpbmdQYXRoICE9PSAnLyc7XHJcbiAgICBjb25zdCBiaW5kaW5nTGlzdCA9IHRoaXMuYmluZGluZ0RhdGEuZ2V0TGlzdCgpO1xyXG5cclxuICAgIC8vIOWtkOihqOWNleaXoOaVsOaNruaXtu+8jOS/neWtmOaXtuS8muacieS4gOadoeepuuaVsOaNrumYu+eijemqjOivge+8jOaJgOS7peatpOWkhOi3s+i/h+WPquacieS4gOihjOeahOaDheWGtVxyXG4gICAgaWYgKGlzU3ViRm9ybSAmJiBiaW5kaW5nTGlzdC5pbm5lckxpc3Quc2l6ZSA9PT0gMCkge1xyXG4gICAgICByZXR1cm4gdHJ1ZTtcclxuICAgIH1cclxuICAgIC8vIOaXoOaVsOaNruaXtuS4jeWBmuagoemqjFxyXG4gICAgaWYgKCFjdXJyZW50SWQpIHtcclxuICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICB9XHJcbiAgICAvLyBkYXRhR3JpZOS/ruaUueaXtu+8jOagueaNrmlk77yM5Yib5bu6Zm9ybUNvbnRyb2zvvIzlubborr7nva7plJnor6/lr7nosaFcclxuICAgIGlmIChpZCAmJiBkb21Qcm9wZXJ0eU5hbWUpIHtcclxuICAgICAgLy8gaWYgKHRoaXMuY29udHJvbElkTWFwW2lkXSAmJiBPYmplY3Qua2V5cyh0aGlzLmNvbnRyb2xJZE1hcFtpZF0pLmxlbmd0aCA9PT0gMCkge1xyXG4gICAgICAvLyAgIHRoaXMuY29udHJvbElkTWFwW2lkXSA9IHt9O1xyXG4gICAgICAvLyB9XHJcbiAgICAgIHRoaXMuY29udHJvbElkTWFwW2lkXSA9IHRoaXMuY29udHJvbElkTWFwW2lkXSB8fCB7fTtcclxuICAgICAgdGhpcy5jb250cm9sSWRNYXBbaWRdW2RvbVByb3BlcnR5TmFtZV0gPSB7XHJcbiAgICAgICAgZXJyb3JzOiBlcnJvck9ialxyXG4gICAgICB9O1xyXG4gICAgfVxyXG5cclxuICAgIC8vIOWwhmdyaWTnmoRGb3JtQ29udHJvbOWQjOatpeWIsOeVjOmdouWxleekuueUqOeahGNvbnRyb2xJRE1hcOS4rVxyXG4gICAgLy8gY29uc3QgY3VycmVudEJpbmRpbmdPYmplY3QgPSBiaW5kaW5nTGlzdC5jdXJyZW50SXRlbSBhcyBCaW5kaW5nT2JqZWN0O1xyXG4gICAgY29uc3QgY3VycmVudEJpbmRpbmdPYmplY3Q6IEJpbmRpbmdPYmplY3QgPSBiaW5kaW5nT2JqZWN0O1xyXG5cclxuICAgIGlmIChpZCAmJiBpZCAhPT0gY3VycmVudElkKSB7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuXHJcbiAgICAvLyDpqozor4Hlhajpg6jlrZfmrrXml7bvvIzmuIXnqbrlt7LmnInnmoTplJnor6/kv6Hmga9cclxuICAgIGlmICghcHJvcGVydHlOYW1lICYmICFpZCkge1xyXG4gICAgICBjdXJyZW50QmluZGluZ09iamVjdC5jb250cm9sTWFwID0ge307XHJcbiAgICAgIHRoaXMuY29udHJvbElkTWFwID0ge307XHJcbiAgICAgIHRoaXMuY2FyZENvbnRyb2xzID0ge307XHJcbiAgICB9XHJcbiAgICBPYmplY3Qua2V5cyh0aGlzLmNvbnRyb2xzKS5mb3JFYWNoKChrZXkpID0+IHtcclxuICAgICAgaWYgKHRoaXMuaXNTaG93UHJvcE1hcFtrZXldICE9PSB0cnVlKSB7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgICB9XHJcbiAgICAgIC8vIOWQjOatpeWunuS9k+mUmeivr+S/oeaBr1xyXG4gICAgICBpZiAoa2V5ID09PSBkb21Qcm9wZXJ0eU5hbWUpIHtcclxuICAgICAgICAvLyDlrp7kvZPpqozor4HnmoTkv6Hmga/nm7TmjqXotYvlgLxcclxuICAgICAgICBpZiAoZXJyb3JPYmogJiYgT2JqZWN0LmtleXMoZXJyb3JPYmopLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgIC8vIOWNoeeJh+eahOmUmeivr1xyXG4gICAgICAgICAgaWYgKCFpc0dyaWQpIHtcclxuICAgICAgICAgICAgLy8g5a6e5L2T5bGC5ZCM5q2l6L+H5p2l55qE6ZSZ6K+v77yM55uu5YmN57uT5p6Ee3J1bGVUeXBlOntuYW1lOicnLHZhbHVlOicnLG9yaWdpbmFsRXJyb3JzOltWYWxpZGF0aW9uRXJyb3JdfX3vvIzlhbbkuK1uYW1l5Li65qCh6aqM5aSx6LSl55qE6ZSZ6K+v5L+h5oGvXHJcbiAgICAgICAgICAgIC8vIOmBjeWOhumUmeivr++8jOWwhnZhbGlkYXRvcui/lOWbnueahOmUmeivr+S/oeaBr+WbvemZheWMllxyXG4gICAgICAgICAgICBPYmplY3Qua2V5cyhlcnJvck9iaikubWFwKCh2YWxpZFR5cGU6IGFueSkgPT4ge1xyXG4gICAgICAgICAgICAgIGNvbnN0IHZhbGlkYXRpb25FcnJvcjogVmFsaWRhdGlvbkVycm9yID0gZXJyb3JPYmpbdmFsaWRUeXBlXSAmJiBlcnJvck9ialt2YWxpZFR5cGVdWydlcnJvciddIHx8IG51bGw7XHJcbiAgICAgICAgICAgICAgaWYgKHZhbGlkYXRpb25FcnJvcikge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgdmFsaWRhdGVSdWxlOiBWYWxpZGF0ZVJ1bGUgPSB2YWxpZGF0aW9uRXJyb3IucnVsZTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IG5nRm9ybUNvbnRyb2wgPSB0aGlzLmdldG5nRm9ybUNvbnRyb2xCeUJpbmRpbmcodmFsaWRhdGVSdWxlLmZpZWxkKTtcclxuICAgICAgICAgICAgICAgIGlmIChuZ0Zvcm1Db250cm9sKSB7XHJcbiAgICAgICAgICAgICAgICAgIHZhbGlkYXRlUnVsZS5wcm9wZXJ0eSA9IG5nRm9ybUNvbnRyb2wubmFtZSB8fCBuZ0Zvcm1Db250cm9sLmRlZmF1bHRJMThuVmFsdWU7XHJcbiAgICAgICAgICAgICAgICAgIHZhbGlkYXRlUnVsZS50YXJnZXRJZCA9IG5nRm9ybUNvbnRyb2wuaWQ7XHJcbiAgICAgICAgICAgICAgICAgIHZhbGlkYXRlUnVsZS50YXJnZXROYW1lID0gdGhpcy5mb3JtR3JvdXBOYW1lO1xyXG4gICAgICAgICAgICAgICAgICAvLyDkv67mraPmoKHpqozlv4Xloavooajovr7lvI/nsbvlnovlkozlpJror63otYTmupDkuK1rZXnkuI3kuIDoh7TnmoTpl67pophcclxuICAgICAgICAgICAgICAgICAgY29uc3QgZml4ZWRWYWxpZFR5cGUgPSB2YWxpZFR5cGUgPT09ICdyZXF1aXJlJyA/ICdyZXF1aXJlZCcgOiB2YWxpZFR5cGU7XHJcbiAgICAgICAgICAgICAgICAgIGNvbnN0IG1lc3NhZ2VUZW1wbGF0ZSA9IFZhbGlkYXRpb25UeXBlcy5nZXRNZXNzYWdlKGZpeGVkVmFsaWRUeXBlKTtcclxuICAgICAgICAgICAgICAgICAgaWYgKG1lc3NhZ2VUZW1wbGF0ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGludmFsaWRNZXNzYWdlID0gVmFsaWRhdGlvbkV4ZWN1dG9yLnJlcGxhY2VNZXNzYWdlU3BlY2lhbFRva2VucyhtZXNzYWdlVGVtcGxhdGUsIHZhbGlkYXRlUnVsZSwgbmdGb3JtQ29udHJvbC5uYW1lKTtcclxuICAgICAgICAgICAgICAgICAgICBlcnJvck9ialt2YWxpZFR5cGVdWyduYW1lJ10gPSBpbnZhbGlkTWVzc2FnZTtcclxuICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgLy8gdG9kbzogbmdGb3JtQ29udHJvbOaaguaXtuS4jeiuvue9rlxyXG4gICAgICAgICAgICAgICAgLy8gZXJyb3JPYmpbJ25hbWUnXSA9IHRoaXMuZ2V0RXJyb3JCeVJ1bGVUeXBlKHZhbGlkVHlwZSwgdmFsaWRhdGVSdWxlLCBudWxsKTtcclxuICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB0aGlzLmNhcmRDb250cm9sc1trZXldID0ge1xyXG4gICAgICAgICAgICAgIGVycm9yczogZXJyb3JPYmpcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgdGhpcy5jYXJkQ29udHJvbHNba2V5XSA9IHt9O1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgICBpZiAodGhpcy5jb250cm9sc1trZXldICYmIHRoaXMuY29udHJvbHNba2V5XS5lcnJvcnMgJiYgT2JqZWN0LmtleXModGhpcy5jb250cm9sc1trZXldLmVycm9ycykubGVuZ3RoID4gMCkge1xyXG4gICAgICAgIC8vIOWwhumUmeivr+WQjOatpeWIsOeVjOmdouWxleekuueahOS9jee9rlxyXG4gICAgICAgIC8vIOiupOS4uuaOp+S7tumUmeivr+WPquWMheWQq+mUmeivr+exu+Wei++8jOmAmui/h+mUmeivr+exu+Wei+iOt+WPluWFt+S9k+eahOmUmeivr+S/oeaBr1xyXG4gICAgICAgIHRoaXMuY2FyZENvbnRyb2xzW2tleV0gPSB7XHJcbiAgICAgICAgICBlcnJvcnM6IHtcclxuICAgICAgICAgICAgLi4udGhpcy5jYXJkQ29udHJvbHNba2V5XSAmJiB0aGlzLmNhcmRDb250cm9sc1trZXldLmVycm9ycyxcclxuICAgICAgICAgICAgLi4udGhpcy5jb250cm9sc1trZXldLmVycm9yc1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcbiAgICAgICAgaXNWYWxpZCA9IGZhbHNlO1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuICAgIC8vIOWkhOeQhuWPquW8gOWQr+WJjeerr+agoemqjO+8jOacquWcqEJF5LiK5ZCv55So5b+F5aGr5qCh6aqM55qE5oOF5Ya1XHJcbiAgICBpZiAodGhpcy5jYXJkQ29udHJvbHMpIHtcclxuICAgICAgT2JqZWN0LmtleXModGhpcy5jYXJkQ29udHJvbHMpLmZvckVhY2goa2V5ID0+IHtcclxuICAgICAgICBpZiAodGhpcy5jYXJkQ29udHJvbHNba2V5XSAmJiB0aGlzLmNhcmRDb250cm9sc1trZXldLmVycm9ycykge1xyXG4gICAgICAgICAgT2JqZWN0LmtleXModGhpcy5jYXJkQ29udHJvbHNba2V5XS5lcnJvcnMpLmZvckVhY2godmFsaWRUeXBlID0+IHtcclxuICAgICAgICAgICAgaWYgKHR5cGVvZiB0aGlzLmNhcmRDb250cm9sc1trZXldLmVycm9yc1t2YWxpZFR5cGVdICE9PSAnb2JqZWN0Jykge1xyXG4gICAgICAgICAgICAgIC8vIOiOt+WPluWvueW6lOeahOagoemqjOS/oeaBr1xyXG4gICAgICAgICAgICAgIGNvbnN0IHZhbGlkYXRlUnVsZXM6IFZhbGlkYXRlUnVsZSB8IFZhbGlkYXRlUnVsZVtdID0gdGhpcy5uZ0Zvcm1Db250cm9sc1trZXldLnZhbGlkUnVsZXMgfHwgW107XHJcbiAgICAgICAgICAgICAgY29uc3QgcnVsZXM6IFZhbGlkYXRlUnVsZVtdID0gW10uY29uY2F0KHZhbGlkYXRlUnVsZXMpO1xyXG4gICAgICAgICAgICAgIGNvbnN0IHZhbGlkYXRlUnVsZTogVmFsaWRhdGVSdWxlID0gcnVsZXMuZmluZChpdGVtID0+IGl0ZW0udHlwZSA9PT0gdmFsaWRUeXBlKTtcclxuICAgICAgICAgICAgICBpZiAodmFsaWRhdGVSdWxlKSB7XHJcbiAgICAgICAgICAgICAgICB2YWxpZGF0ZVJ1bGUudGFyZ2V0TmFtZSA9IHRoaXMuZm9ybUdyb3VwTmFtZTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IG1lc3NhZ2VUZW1wbGF0ZSA9IFZhbGlkYXRpb25UeXBlcy5nZXRNZXNzYWdlKHZhbGlkVHlwZSk7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBpbnZhbGlkTWVzc2FnZSA9IFZhbGlkYXRpb25FeGVjdXRvci5yZXBsYWNlTWVzc2FnZVNwZWNpYWxUb2tlbnMobWVzc2FnZVRlbXBsYXRlLCB2YWxpZGF0ZVJ1bGUsICcnKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuY2FyZENvbnRyb2xzW2tleV0uZXJyb3JzW2tleV0gPSB7IHZhbHVlOiB0aGlzLmNvbnRyb2xzW2tleV0gJiYgdGhpcy5jb250cm9sc1trZXldLnZhbHVlIHx8ICcnLCBuYW1lOiBpbnZhbGlkTWVzc2FnZSB9O1xyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfSlcclxuICAgICAgICB9XHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgT2JqZWN0LmtleXModGhpcy5jYXJkQ29udHJvbHMpLmZvckVhY2goKGtleSkgPT4ge1xyXG4gICAgICBpZiAodGhpcy5jYXJkQ29udHJvbHNba2V5XSAmJiB0aGlzLmNhcmRDb250cm9sc1trZXldLmVycm9ycyAmJiBPYmplY3Qua2V5cyh0aGlzLmNhcmRDb250cm9sc1trZXldLmVycm9ycykubGVuZ3RoID4gMCkge1xyXG4gICAgICAgIGlzVmFsaWQgPSBmYWxzZTtcclxuICAgICAgfVxyXG4gICAgfSk7XHJcbiAgICByZXR1cm4gaXNWYWxpZDtcclxuICB9XHJcbiAgLyoqXHJcbiAgICog5pu05paw6KGo5Y2V6ZSZ6K+v5L+h5oGvXHJcbiAgICogQHBhcmFtIGVycm9ycyDplJnor6/mtojmga9cclxuICAgKi9cclxuICBwdWJsaWMgdXBkYXRlRm9ybUVycm9ycyhlcnJvcnM6IHsgW2RvbVByb3BlcnR5TmFtZTogc3RyaW5nXTogeyBlcnJvcnM6IHsgW3J1bGVUeXBlOiBzdHJpbmddOiB7IG5hbWU6IHN0cmluZywgW3Byb3A6IHN0cmluZ106IGFueSB9IH0gfSB9LCBmb3JjZVNob3c6IGJvb2xlYW4gPSBmYWxzZSwgZnJvbTogc3RyaW5nID0gJycpIHtcclxuICAgIGlmIChmcm9tICYmIGZyb20gPT09ICdiYWNrZW5kJykge1xyXG4gICAgICB0aGlzLmNsZWFyQmFja2VuZEVycm9yKCk7XHJcbiAgICB9XHJcbiAgICAvLyDljp/mnaXmmK/lkKblt7Lnu4/mmL7npLrplJnor6/vvIzlpoLmnpzlt7Lnu4/mmL7npLrkuobliJnlop7liqDvvIzlkKbliJnmm7/mjaJcclxuICAgIGlmICh0aGlzLmlzU2hvd1ZhbGlkYXRpb25Nc2cgPT09IHRydWUgfHwgZm9yY2VTaG93ID09PSB0cnVlKSB7XHJcbiAgICAgIHRoaXMuaXNTaG93VmFsaWRhdGlvbk1zZyA9IHRydWU7XHJcbiAgICAgIE9iamVjdC5rZXlzKGVycm9ycykuZm9yRWFjaCgoa2V5OiBzdHJpbmcpID0+IHtcclxuICAgICAgICBpZiAoZXJyb3JzW2tleV0uZXJyb3JzICYmIE9iamVjdC5rZXlzKGVycm9yc1trZXldLmVycm9ycykubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgLy8g5aaC5p6c5o6n5Lu25pys6Lqr5rKh5pyJ6ZSZ6K+v77yM5YiZ55u05o6l5L2/55So5aSW6YOo5Lyg6YCS6L+H5p2l55qE6ZSZ6K+v77yM5ZCm5YiZ5ZCI5bm26ZSZ6K+vXHJcbiAgICAgICAgICB0aGlzLmNhcmRDb250cm9sc1trZXldID0ge1xyXG4gICAgICAgICAgICBlcnJvcnM6IHtcclxuICAgICAgICAgICAgICAuLi50aGlzLmNhcmRDb250cm9sc1trZXldICYmIHRoaXMuY2FyZENvbnRyb2xzW2tleV0uZXJyb3JzLFxyXG4gICAgICAgICAgICAgIC4uLmVycm9yc1trZXldLmVycm9yc1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICB9O1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAvLyDnp7vpmaTlhoXlrZjkuK3nmoTplJnor6/kv6Hmga9cclxuICAgICAgICAgIHRoaXMuY2FyZENvbnRyb2xzW2tleV0gPSB7XHJcbiAgICAgICAgICAgIGVycm9yczoge31cclxuICAgICAgICAgIH07XHJcbiAgICAgICAgICAvLyDph43nva7mjqfku7bplJnor6/kv6Hmga9cclxuICAgICAgICAgIHRoaXMuY29udHJvbHNba2V5XS5zZXRFcnJvcnMobnVsbCk7XHJcbiAgICAgICAgICB0aGlzLmNvbnRyb2xzW2tleV0ubWFya0FzVG91Y2hlZCgpO1xyXG4gICAgICAgIH1cclxuICAgICAgfSk7XHJcbiAgICB9XHJcbiAgfVxyXG4gIC8qKlxyXG4gICAqIOa4heepuuWQjuerr+a2iOaBr1xyXG4gICAqL1xyXG4gIHB1YmxpYyBjbGVhckJhY2tlbmRFcnJvcigpIHtcclxuICAgIE9iamVjdC5rZXlzKHRoaXMuY2FyZENvbnRyb2xzKS5mb3JFYWNoKGtleSA9PiB7XHJcbiAgICAgIGNvbnN0IGVycm9ycyA9IHRoaXMuY2FyZENvbnRyb2xzW2tleV0gJiYgdGhpcy5jYXJkQ29udHJvbHNba2V5XS5lcnJvcnMgfHwgbnVsbDtcclxuICAgICAgaWYgKGVycm9ycykge1xyXG4gICAgICAgIE9iamVjdC5rZXlzKGVycm9ycykuZm9yRWFjaChlcnJvclR5cGUgPT4ge1xyXG4gICAgICAgICAgaWYgKGVycm9yVHlwZSAmJiBlcnJvclR5cGUuc3RhcnRzV2l0aCgnYmFja2VuZC1tZXNzYWdlLScpKSB7XHJcbiAgICAgICAgICAgIGRlbGV0ZSBlcnJvcnNbZXJyb3JUeXBlXTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgICAgICBpZiAoZXJyb3JzICYmIE9iamVjdC5rZXlzKGVycm9ycykubGVuZ3RoID09PSAwKSB7XHJcbiAgICAgICAgICBkZWxldGUgdGhpcy5jYXJkQ29udHJvbHNba2V5XS5lcnJvcnM7XHJcbiAgICAgICAgfVxyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIHRoaXMuY2FyZENvbnRyb2xzW2tleV0gPSB7fTtcclxuICAgICAgfVxyXG4gICAgfSk7XHJcbiAgfVxyXG4gIC8qKlxyXG4gICAqIOagueaNruWunuS9k+WxnuaAp+iOt+WPlm5nRm9ybUNvbnRyb2xcclxuICAgKiBAcGFyYW0gYmluZGluZyDmjqfku7bnu5HlrprnmoTlrp7kvZPlsZ7mgKflkI1cclxuICAgKi9cclxuICBwcml2YXRlIGdldG5nRm9ybUNvbnRyb2xCeUJpbmRpbmcoYmluZGluZzogc3RyaW5nKSB7XHJcbiAgICByZXR1cm4gT2JqZWN0LnZhbHVlcyh0aGlzLm5nRm9ybUNvbnRyb2xzKS5maW5kKChuZ0Zvcm1Db250cm9sOiBOZ0Zvcm1Db250cm9sKSA9PiBuZ0Zvcm1Db250cm9sLmJpbmRpbmcgJiYgbmdGb3JtQ29udHJvbC5iaW5kaW5nID09PSBiaW5kaW5nKTtcclxuICB9XHJcbiAgcHJpdmF0ZSBkaXNwb3NlVmFsaWRhdGlvbigpIHtcclxuICAgIGNvbnN0IHByb3BlcnRpZXMgPSB0aGlzLmNvbnN0cnVjdG9yW1BST1BfTUVUQURBVEFdO1xyXG4gICAgaWYgKHByb3BlcnRpZXMgJiYgT2JqZWN0LmtleXMocHJvcGVydGllcykubGVuZ3RoID4gMCkge1xyXG4gICAgICBPYmplY3Qua2V5cyhwcm9wZXJ0aWVzKS5mb3JFYWNoKChrZXk6IHN0cmluZykgPT4ge1xyXG4gICAgICAgIGNvbnN0IHByb3BzID0gdGhpcy5jb25zdHJ1Y3RvcltQUk9QX01FVEFEQVRBXVtrZXldIGFzIGFueVtdO1xyXG4gICAgICAgIGlmIChwcm9wcyAmJiBwcm9wcy5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICBwcm9wcy5mb3JFYWNoKChpdGVtKSA9PiB7XHJcbiAgICAgICAgICAgIGlmIChpdGVtLnZhbGlkUnVsZXMgJiYgQXJyYXkuaXNBcnJheShpdGVtLnZhbGlkUnVsZXMpICYmIGl0ZW0udmFsaWRSdWxlcy5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgICAgaXRlbS52YWxpZFJ1bGVzID0gaXRlbS52YWxpZFJ1bGVzLmZpbHRlcihpdGVtID0+ICEoaXRlbS5ldmFsICYmIHR5cGVvZiAoaXRlbS5ldmFsKSA9PT0gJ2Z1bmN0aW9uJykpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG4gIH1cclxuICAvKipcclxuICAgKiDmoLnmja5kb23lsZ7mgKflkozmoKHpqoznsbvlnovojrflj5bplJnor6/kv6Hmga9cclxuICAgKiBAcGFyYW0gZG9tUHJvcGVydHkgZG9t5bGe5oCnXHJcbiAgICogQHBhcmFtIHZhbGlkYXRlUnVsZVR5cGUg5qCh6aqM57G75Z6LXHJcbiAgICovXHJcbiAgcHJpdmF0ZSBnZXRFcnJvck1lc3NhZ2UoZG9tUHJvcGVydHk6IHN0cmluZywgdmFsaWRhdGVSdWxlVHlwZTogc3RyaW5nKSB7XHJcbiAgICBjb25zdCBmb3JtQ29udHJvbCA9IHRoaXMubmdGb3JtQ29udHJvbHNbZG9tUHJvcGVydHldO1xyXG4gICAgaWYgKGZvcm1Db250cm9sKSB7XHJcbiAgICAgIGNvbnN0IHZhbGlkUnVsZXMgPSBmb3JtQ29udHJvbC52YWxpZFJ1bGVzO1xyXG4gICAgICBjb25zdCBydWxlcyA9IFtdO1xyXG4gICAgICBpZiAoIUFycmF5LmlzQXJyYXkodmFsaWRSdWxlcykpIHtcclxuICAgICAgICBydWxlcy5wdXNoKHZhbGlkUnVsZXMpO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIHJ1bGVzLnB1c2goLi4udmFsaWRSdWxlcyk7XHJcbiAgICAgIH1cclxuICAgICAgY29uc3QgcnVsZSA9IHJ1bGVzLmZpbmQoaXRlbSA9PiBpdGVtLnR5cGUgPT09IHZhbGlkYXRlUnVsZVR5cGUpO1xyXG4gICAgICBpZiAocnVsZSkge1xyXG4gICAgICAgIGNvbnN0IGNvbnRyb2xOYW1lID0gZm9ybUNvbnRyb2wubmFtZTtcclxuICAgICAgICBjb25zdCBtZXNzYWdlVGVtcGxhdGUgPSBWYWxpZGF0aW9uVHlwZXMuZ2V0TWVzc2FnZSh2YWxpZGF0ZVJ1bGVUeXBlKTtcclxuICAgICAgICBjb25zdCBtZXNzYWdlID0gVmFsaWRhdGlvbkV4ZWN1dG9yLnJlcGxhY2VNZXNzYWdlU3BlY2lhbFRva2VucyhtZXNzYWdlVGVtcGxhdGUsIHJ1bGUsIGNvbnRyb2xOYW1lKTtcclxuICAgICAgICByZXR1cm4gbWVzc2FnZTtcclxuICAgICAgfVxyXG4gICAgICByZXR1cm4gbnVsbDtcclxuICAgIH1cclxuICAgIHJldHVybiBudWxsO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog5Yid5aeL5YyWRm9ybVxyXG4gICAqIEBwYXJhbSBjb250ZXh0IOS4iuS4i+aWh1xyXG4gICAqL1xyXG4gIHB1YmxpYyBpbml0KGJpbmRpbmdEYXRhOiBCaW5kaW5nRGF0YSwgYmluZGluZ1BhdGg6IHN0cmluZywgZnJhbWVDb250ZXh0PzogRnJhbWVDb250ZXh0KSB7XHJcbiAgICB0aGlzLmZyYW1lQ29udGV4dCA9IGZyYW1lQ29udGV4dDtcclxuICAgIHRoaXMuYmluZGluZ0RhdGEgPSBiaW5kaW5nRGF0YTtcclxuICAgIHRoaXMuYmluZGluZ1BhdGggPSBiaW5kaW5nUGF0aDtcclxuICAgIHRoaXMuYnVpbGRGb3JtKCk7XHJcbiAgICAvLyBAdG9kbzog6L+Z56eN5pa55byP5YGaa2V577yM5aaC5p6c6ISa5pys6KKr5Y6L57yp77yM5a2Y5Zyo6aOO6ZmpXHJcbiAgICBGb3JtLmluc01hcFt0aGlzLmNvbnN0cnVjdG9yLm5hbWVdID0gdGhpcztcclxuICB9XHJcbiAgLyoqXHJcbiAgICog5p6E6YCg6KGo5Y2VXHJcbiAgICovXHJcbiAgcHVibGljIGJ1aWxkRm9ybSgpIHtcclxuICAgIHRoaXMuY29sbGVjdE1ldGFkYXRhcygpO1xyXG4gICAgLy8gdGhpcy5jcmVhdGVDaGlsZEZvcm1BcnJheXMoKTtcclxuICAgIHRoaXMuY3JlYXRlQ2hpbGRGb3JtcygpO1xyXG4gICAgdGhpcy5jcmVhdGVDb250cm9scygpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog6YeN572u6KGo5Y2V6aqM6K+B5L+h5oGvXHJcbiAgICovXHJcbiAgcHVibGljIHJlc2V0Q2FyZFZhbGlkTXNnKCk6IHZvaWQge1xyXG4gICAgdGhpcy5jYXJkQ29udHJvbHMgPSB7fTtcclxuICAgIC8vIOWJlOmZpCDliJfooajkuK3mlrDlop7lkI7lj5bmtogs5Yig6Zmk55qE6aG55a+55bqU55qEY29udHJvbOS/oeaBr1xyXG4gICAgT2JqZWN0LmtleXModGhpcy5jb250cm9sSWRNYXApLmZvckVhY2goaWQgPT4ge1xyXG4gICAgICBpZiAoIXRoaXMuYmluZGluZ0RhdGEuZ2V0TGlzdCgpLmlubmVyTGlzdC5tYXAoeCA9PiB4LmlkKS5pbmNsdWRlcyhpZCkpIHtcclxuICAgICAgICBkZWxldGUgdGhpcy5jb250cm9sSWRNYXBbaWRdO1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuICAgIHRoaXMucmVzZXRGb3JtQ29udHJvbHMoKTtcclxuICAgIHRoaXMuc2V0U2hvd1ZhbGlkYXRpb25Nc2coZmFsc2UpO1xyXG4gIH1cclxuICAvKipcclxuICAgKiDmm7TmlrDlrZfmrrXmoKHpqozop4TliJlcclxuICAgKiBAcGFyYW0gcHJvcGVydHlOYW1lIOWxnuaAp+WQjVxyXG4gICAqIEBwYXJhbSBpc1JlcXVpcmVkIOaYr+WQpuW/heWhq1xyXG4gICAqL1xyXG4gIHB1YmxpYyB1cGRhdGVGaWVsZFZhbGlkYXRlUnVsZShwcm9wZXJ0eU5hbWU6IHN0cmluZywgaXNSZXF1aXJlZDogYm9vbGVhbikge1xyXG4gICAgaWYgKCFwcm9wZXJ0eU5hbWUpIHtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG4gICAgY29uc3QgZm9ybUNvbnRyb2w6IEFic3RyYWN0Q29udHJvbCA9IHRoaXMuY29udHJvbHNbcHJvcGVydHlOYW1lXTtcclxuXHJcbiAgICAvLyDmuIXnqbrlhajpg6jmoKHpqozmnaHku7ZcclxuICAgIGlmIChmb3JtQ29udHJvbCkge1xyXG4gICAgICBmb3JtQ29udHJvbC5jbGVhclZhbGlkYXRvcnMoKTtcclxuICAgICAgZm9ybUNvbnRyb2wubWFya0FzVW50b3VjaGVkKCk7XHJcbiAgICAgIGZvcm1Db250cm9sLm1hcmtBc1ByaXN0aW5lKCk7XHJcbiAgICAgIGZvcm1Db250cm9sLnNldEVycm9ycyhbXSk7XHJcbiAgICB9XHJcbiAgICAvLyDliqjmgIHlv4XloavlnLrmma/ml7bnlJ/miJDlmajkuI3lho3lnKhmb3JtQ29udHJvbOS4iueUn+aIkOW/heWhq+inhOWImVxyXG4gICAgLy8g5Zug5q2kdmFsaWRSdWxlc+WPr+iDveS4uuepulxyXG4gICAgY29uc3QgbmdGb3JtQ29udHJvbCA9IHRoaXMubmdGb3JtQ29udHJvbHNbcHJvcGVydHlOYW1lXTtcclxuICAgIGxldCB2YWxpZGF0ZVJ1bGVzOiBWYWxpZGF0ZVJ1bGUgfCBWYWxpZGF0ZVJ1bGVbXSA9IG5nRm9ybUNvbnRyb2wgJiYgbmdGb3JtQ29udHJvbC52YWxpZFJ1bGVzIHx8IFtdO1xyXG4gICAgaWYgKCFBcnJheS5pc0FycmF5KHZhbGlkYXRlUnVsZXMpKSB7XHJcbiAgICAgIHZhbGlkYXRlUnVsZXMgPSBbdmFsaWRhdGVSdWxlc107XHJcbiAgICB9XHJcbiAgICBjb25zdCByZXF1aXJlZFJ1bGVJbmRleCA9IHZhbGlkYXRlUnVsZXMuZmluZEluZGV4KCh2YWxpZGF0ZVJ1bGU6IFZhbGlkYXRlUnVsZSkgPT4gdmFsaWRhdGVSdWxlLnR5cGUgPT09IFZhbGlkYXRpb25UeXBlcy5SRVFVSVJFRCk7XHJcbiAgICBpZiAoaXNSZXF1aXJlZCkge1xyXG4gICAgICAvLyDlv4XloavkvYbmjqfku7bmsqHmnInlv4Xloavop4TliJnvvIzmt7vliqDlv4Xloavop4TliJlcclxuICAgICAgaWYgKHJlcXVpcmVkUnVsZUluZGV4ID09IC0xKSB7XHJcblxyXG4gICAgICAgIGNvbnN0IHZhbGlkYXRlUnVsZTogVmFsaWRhdGVSdWxlID0geyB0eXBlOiBWYWxpZGF0aW9uVHlwZXMuUkVRVUlSRUQsIGNvbnN0cmFpbnRzOiBbdHJ1ZV0gfTtcclxuICAgICAgICAvLyDmianlsZXlsZ7mgKfvvIzku6XnlJ/miJDmraPnoa7nmoTplJnor6/mj5DnpLpcclxuICAgICAgICBjb25zdCBkaXNwbGF5RmllbGROYW1lID0gbmdGb3JtQ29udHJvbCAmJiAobmdGb3JtQ29udHJvbC5uYW1lIHx8IG5nRm9ybUNvbnRyb2wuZGVmYXVsdEkxOG5WYWx1ZSkgfHwgJyc7XHJcbiAgICAgICAgdmFsaWRhdGVSdWxlLnRhcmdldElkID0gbmdGb3JtQ29udHJvbCAmJiBuZ0Zvcm1Db250cm9sLmlkIHx8IG51bGw7XHJcbiAgICAgICAgdmFsaWRhdGVSdWxlLnRhcmdldE5hbWUgPSB0aGlzLmZvcm1Hcm91cE5hbWU7XHJcbiAgICAgICAgdmFsaWRhdGVSdWxlLnByb3BlcnR5ID0gZGlzcGxheUZpZWxkTmFtZTtcclxuICAgICAgICB2YWxpZGF0ZVJ1bGUuZmllbGQgPSBuZ0Zvcm1Db250cm9sICYmIG5nRm9ybUNvbnRyb2wuYmluZGluZztcclxuICAgICAgICB2YWxpZGF0ZVJ1bGVzLnB1c2godmFsaWRhdGVSdWxlKTtcclxuICAgICAgfVxyXG4gICAgfSBlbHNlIHtcclxuICAgICAgLy8g6Z2e5b+F5aGr5Zy65pmv77yM5aaC5p6c5pyJ5b+F5aGr6KeE5YiZ77yM56e76ZmkXHJcbiAgICAgIGlmIChyZXF1aXJlZFJ1bGVJbmRleCAhPT0gLTEpIHtcclxuICAgICAgICB2YWxpZGF0ZVJ1bGVzLnNwbGljZShyZXF1aXJlZFJ1bGVJbmRleCwgMSk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIC8vIOaVtOeQhuagoemqjOinhOWImVxyXG4gICAgY29uc3QgdmFsaWRhdG9yczogVmFsaWRhdG9yRm5bXSA9IFtdO1xyXG4gICAgQXJyYXkucHJvdG90eXBlLmZvckVhY2guY2FsbCh2YWxpZGF0ZVJ1bGVzLCAoKHJ1bGVPYmo6IFZhbGlkYXRlUnVsZSkgPT4ge1xyXG4gICAgICBjb25zdCB2YWxpZGF0ZUZuID0gdGhpcy5nZXRWYWxpZGF0b3JCeVJ1bGVPYmoocnVsZU9iaiwgdGhpcy5uZ0Zvcm1Db250cm9sc1twcm9wZXJ0eU5hbWVdKTtcclxuICAgICAgaWYgKHZhbGlkYXRlRm4pIHtcclxuICAgICAgICB2YWxpZGF0b3JzLnB1c2godmFsaWRhdGVGbik7XHJcbiAgICAgIH1cclxuICAgIH0pKTtcclxuICAgIHRoaXMubmdGb3JtQ29udHJvbHNbcHJvcGVydHlOYW1lXS52YWxpZFJ1bGVzID0gdmFsaWRhdGVSdWxlcztcclxuICAgIHRoaXMuY29udHJvbHNbcHJvcGVydHlOYW1lXS5zZXRWYWxpZGF0b3JzKHZhbGlkYXRvcnMpO1xyXG4gIH1cclxuICBwdWJsaWMgYWRkRmllbGRWYWxpZGF0ZVJ1bGUocHJvcGVydHlOYW1lOiBzdHJpbmcsIG1lc3NhZ2U6IHN0cmluZywgZXhwcmVzc2lvbklkOiBzdHJpbmcsIHJ1bGVUeXBlOiBSdWxlVHlwZSkge1xyXG4gICAgY29uc3QgZm9ybUNvbnRyb2w6IEFic3RyYWN0Q29udHJvbCA9IHRoaXMuY29udHJvbHNbcHJvcGVydHlOYW1lXTtcclxuICAgIGlmIChmb3JtQ29udHJvbCkge1xyXG4gICAgICAvLyDmuIXnqbrlhajpg6jmoKHpqozmnaHku7ZcclxuICAgICAgZm9ybUNvbnRyb2wuc2V0RXJyb3JzKG51bGwpO1xyXG4gICAgfVxyXG4gICAgY29uc3QgbmdGb3JtQ29udHJvbCA9IHRoaXMubmdGb3JtQ29udHJvbHNbcHJvcGVydHlOYW1lXTtcclxuICAgIGxldCB2YWxpZGF0ZVJ1bGVzID0gdGhpcy5uZ0Zvcm1Db250cm9sc1twcm9wZXJ0eU5hbWVdLnZhbGlkUnVsZXM7XHJcbiAgICBpZiAoIXZhbGlkYXRlUnVsZXMpIHtcclxuICAgICAgdmFsaWRhdGVSdWxlcyA9IFtdO1xyXG4gICAgfVxyXG4gICAgaWYgKCFBcnJheS5pc0FycmF5KHZhbGlkYXRlUnVsZXMpKSB7XHJcbiAgICAgIHZhbGlkYXRlUnVsZXMgPSBbdmFsaWRhdGVSdWxlc107XHJcbiAgICB9XHJcbiAgICBjb25zdCBpbmRleCA9IHZhbGlkYXRlUnVsZXMuZmluZEluZGV4KChydWxlOiBWYWxpZGF0ZVJ1bGUpID0+IHJ1bGUgJiYgcnVsZS5leHByZXNzaW9uSWQgPT09IGV4cHJlc3Npb25JZCk7XHJcbiAgICBpZiAoaW5kZXggIT09IC0xKSB7XHJcbiAgICAgIHZhbGlkYXRlUnVsZXMuc3BsaWNlKGluZGV4LCAxKTtcclxuICAgIH1cclxuICAgIGNvbnN0IGJpbmRpbmdQYXRoID0gdGhpcy5mcmFtZUNvbnRleHQudmlld01vZGVsLmJpbmRpbmdQYXRoO1xyXG4gICAgY29uc3QgYmluZGluZ1BhdGhzID0gYmluZGluZ1BhdGguc3BsaXQoJy8nKS5maWx0ZXIocCA9PiBwKTtcclxuICAgIGxldCBmaWVsZE5hbWUgPSBwcm9wZXJ0eU5hbWU7XHJcbiAgICBpZiAoYmluZGluZ1BhdGhzLmxlbmd0aCAhPT0gMCkge1xyXG4gICAgICBjb25zdCBwcmVmaXggPSBiaW5kaW5nUGF0aHMuam9pbignLycpO1xyXG4gICAgICBjb25zdCBiaW5kaW5nID0gbmdGb3JtQ29udHJvbC5iaW5kaW5nIHx8ICcnO1xyXG4gICAgICBjb25zdCBwcm9wZXJ0eSA9IGJpbmRpbmcuc3BsaXQoJy4nKS5qb2luKCcvJyk7XHJcbiAgICAgIGZpZWxkTmFtZSA9IGAke3ByZWZpeH0vJHtwcm9wZXJ0eX1gO1xyXG4gICAgfVxyXG4gICAgY29uc3QgY29udGV4dCA9IHRoaXMuZnJhbWVDb250ZXh0O1xyXG4gICAgY29uc3QgdmFsaWRhdGVSdWxlOiBWYWxpZGF0ZVJ1bGUgPSB7XHJcbiAgICAgIHR5cGU6IHJ1bGVUeXBlLFxyXG4gICAgICBtZXNzYWdlOiBtZXNzYWdlLFxyXG4gICAgICBleHByZXNzaW9uSWQ6IGV4cHJlc3Npb25JZCxcclxuICAgICAgY29uc3RyYWludHM6IFtdLFxyXG4gICAgICBiaW5kaW5nUGF0aDogYmluZGluZ1BhdGhzLmpvaW4oJy8nKSxcclxuICAgICAgZXZhbDogZnVuY3Rpb24gKG9wdGlvbnM/OiBhbnkpIHtcclxuICAgICAgICByZXR1cm4gY29udGV4dC52aWV3TW9kZWwuZXhwcmVzc2lvbi52YWxpZGF0ZShleHByZXNzaW9uSWQsIG9wdGlvbnMpO1xyXG4gICAgICB9XHJcbiAgICB9O1xyXG4gICAgdmFsaWRhdGVSdWxlcy5wdXNoKHZhbGlkYXRlUnVsZSk7XHJcbiAgICB0aGlzLm5nRm9ybUNvbnRyb2xzW3Byb3BlcnR5TmFtZV0udmFsaWRSdWxlcyA9IHZhbGlkYXRlUnVsZXM7XHJcbiAgICAvLyBpZiAodGhpcy5uZ0Zvcm1Db250cm9sc1twcm9wZXJ0eU5hbWVdICYmIHZhbGlkYXRlUnVsZXMubGVuZ3RoID4gMCkge1xyXG4gICAgLy8gICBjb25zdCB2YWxpZGF0b3JzOiBWYWxpZGF0b3JGbltdID0gW107XHJcbiAgICAvLyAgIEFycmF5LnByb3RvdHlwZS5mb3JFYWNoLmNhbGwodmFsaWRhdGVSdWxlcywgKChydWxlT2JqOiBWYWxpZGF0ZVJ1bGUpID0+IHtcclxuICAgIC8vICAgICBjb25zdCB2YWxpZGF0ZUZuID0gdGhpcy5nZXRWYWxpZGF0b3JCeVJ1bGVPYmoocnVsZU9iaiwgdGhpcy5uZ0Zvcm1Db250cm9sc1twcm9wZXJ0eU5hbWVdKTtcclxuICAgIC8vICAgICBpZiAodmFsaWRhdGVGbikge1xyXG4gICAgLy8gICAgICAgdmFsaWRhdG9ycy5wdXNoKHZhbGlkYXRlRm4pO1xyXG4gICAgLy8gICAgIH1cclxuICAgIC8vICAgfSkpO1xyXG4gICAgLy8gICB0aGlzLmNvbnRyb2xzW3Byb3BlcnR5TmFtZV0uc2V0VmFsaWRhdG9ycyh2YWxpZGF0b3JzKTtcclxuICAgIC8vIH1cclxuICB9XHJcbiAgLyoqXHJcbiAgICog5qC55o2u6KeE5YiZ5a+56LGh55Sf5oiQdmFsaWRhdG9yXHJcbiAgICogQHBhcmFtIHJ1bGVPYmo6IFZhbGlkYXRlUnVsZVxyXG4gICAqL1xyXG4gIHByaXZhdGUgZ2V0VmFsaWRhdG9yQnlSdWxlT2JqKHJ1bGVPYmo6IFZhbGlkYXRlUnVsZSwgbmdGb3JtQ29udHJvbDogTmdGb3JtQ29udHJvbCk6IFZhbGlkYXRvckZuIHtcclxuICAgIGNvbnN0IHsgdHlwZSwgY29uc3RyYWludHMgPSBbXSwgbWVzc2FnZSA9IG51bGwgfSA9IHJ1bGVPYmo7XHJcbiAgICBjb25zdCBkaXNwbGF5VGV4dCA9IG5nRm9ybUNvbnRyb2wubmFtZSB8fCBuZ0Zvcm1Db250cm9sLmRlZmF1bHRJMThuVmFsdWUgfHwgJyc7XHJcbiAgICBjb25zdCBydWxlSGFuZGxlck9iaiA9IHtcclxuICAgICAgcmVxdWlyZWQ6IChjb250cm9sOiBBYnN0cmFjdENvbnRyb2wpOiB7IFtrZXk6IHN0cmluZ106IGFueSB9IHwgbnVsbCA9PiB7XHJcbiAgICAgICAgY29uc3QgdmFsdWUgPSBjb250cm9sLnZhbHVlO1xyXG4gICAgICAgIGxldCBpc1ZhbGlkID0gdmFsdWUgIT09ICcnICYmIHZhbHVlICE9PSBudWxsICYmIHZhbHVlICE9PSB1bmRlZmluZWQgJiYgdmFsdWUgIT09ICcwMDAxLTAxLTAxJyAmJiB2YWx1ZSAhPT0gJzAwMDEtMDEtMDEgMDA6MDA6MDAnICYmIHZhbHVlICE9PSAnMDAwMS0wMS0wMVQwMDowMDowMCc7XHJcbiAgICAgICAgY29uc3QgcGFyZW50UGF0aHMgPSB0aGlzLmJpbmRpbmdQYXRoLnNwbGl0KCcvJykuZmlsdGVyKHAgPT4gcCk7XHJcbiAgICAgICAgY29uc3QgY29udHJvbFBhdGhzID0gbmdGb3JtQ29udHJvbC5iaW5kaW5nLnNwbGl0KCcuJyk7XHJcbiAgICAgICAgY29uc3QgcGF0aHMgPSBwYXJlbnRQYXRocy5jb25jYXQoY29udHJvbFBhdGhzKTtcclxuICAgICAgICBjb25zdCBwcm9wSW5mbyA9IHRoaXMuZ2V0UHJvcEluZm9CeVBhdGgocGF0aHMpO1xyXG4gICAgICAgIGNvbnN0IGlzTXVsdGlMYW5nSW5wdXQgPSBwcm9wSW5mbyAmJiBwcm9wSW5mby5tZXRhZGF0YUluZm8uZW5hYmxlTXVsdGlMYW5nSW5wdXQ7XHJcbiAgICAgICAgaWYgKGlzTXVsdGlMYW5nSW5wdXQpIHtcclxuICAgICAgICAgIGNvbnN0IGN1cnJlbnRMYW5ndWFnZSA9IFRyYW5zbGF0ZVNlcnZpY2UuZ2V0Q3VycmVudExhbmd1YWdlKCk7XHJcbiAgICAgICAgICBjb25zdCBjdXJyZW50TGFuZ1ZhbHVlID0gdmFsdWUgJiYgdmFsdWVbY3VycmVudExhbmd1YWdlXTtcclxuICAgICAgICAgIGlzVmFsaWQgPSBjdXJyZW50TGFuZ1ZhbHVlICE9PSAnJyAmJiBjdXJyZW50TGFuZ1ZhbHVlICE9PSBudWxsICYmIGN1cnJlbnRMYW5nVmFsdWUgIT09IHVuZGVmaW5lZCAmJiBjdXJyZW50TGFuZ1ZhbHVlICE9PSAnMDAwMS0wMS0wMScgJiYgY3VycmVudExhbmdWYWx1ZSAhPT0gJzAwMDEtMDEtMDEgMDA6MDA6MDAnICYmIGN1cnJlbnRMYW5nVmFsdWUgIT09ICcwMDAxLTAxLTAxVDAwOjAwOjAwJztcclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3QgbWVzc2FnZVRlbXBsYXRlID0gVmFsaWRhdGlvblR5cGVzLmdldE1lc3NhZ2UoVmFsaWRhdGlvblR5cGVzLlJFUVVJUkVEKTtcclxuICAgICAgICBjb25zdCBpbnZhbGlkTWVzc2FnZSA9IFZhbGlkYXRpb25FeGVjdXRvci5yZXBsYWNlTWVzc2FnZVNwZWNpYWxUb2tlbnMobWVzc2FnZVRlbXBsYXRlLCBydWxlT2JqLCBjb250cm9sLnZhbHVlKTtcclxuICAgICAgICBpZiAoaXNWYWxpZCAmJiBjb250cm9sLmVycm9ycyAmJiBjb250cm9sLmVycm9ycy5yZXF1aXJlZCkge1xyXG4gICAgICAgICAgLy8g5L+u5aSN5biu5Yqp5pig5bCE5pep5LqO5o6n5Lu26LWL5YC85a+86Ie05rGH5oC76ZSZ6K+v5raI5oGv5pe25biu5Yqp5b+F5aGr6ZSZ6K+v5pyq6KKr5riF56m655qE6Zeu6aKYXHJcbiAgICAgICAgICBkZWxldGUgY29udHJvbC5lcnJvcnMucmVxdWlyZWQ7XHJcbiAgICAgICAgICB0aGlzLmlzRm9ybVZhbGlkKHBhdGhzLmpvaW4oJy4nKSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBpc1ZhbGlkID8gbnVsbCA6IHsgcmVxdWlyZWQ6IHsgdmFsdWU6IGNvbnRyb2wudmFsdWUsIG5hbWU6IGludmFsaWRNZXNzYWdlIH0gfTtcclxuICAgICAgfSxcclxuICAgICAgbWF4TGVuZ3RoOiAoY29udHJvbDogQWJzdHJhY3RDb250cm9sKTogeyBba2V5OiBzdHJpbmddOiBhbnkgfSB8IG51bGwgPT4ge1xyXG4gICAgICAgIGNvbnN0IGlzSW5WYWxpZCA9IGNvbnRyb2wudmFsdWUgJiYgY29udHJvbC52YWx1ZS50b1N0cmluZygpLmxlbmd0aCA+IGNvbnN0cmFpbnRzWzBdO1xyXG4gICAgICAgIGNvbnN0IG1lc3NhZ2VUZW1wbGF0ZSA9IFZhbGlkYXRpb25UeXBlcy5nZXRNZXNzYWdlKFZhbGlkYXRpb25UeXBlcy5NQVhfTEVOR1RIKTtcclxuICAgICAgICBjb25zdCBpbnZhbGlkTWVzc2FnZSA9IFZhbGlkYXRpb25FeGVjdXRvci5yZXBsYWNlTWVzc2FnZVNwZWNpYWxUb2tlbnMobWVzc2FnZVRlbXBsYXRlLCBydWxlT2JqLCBjb250cm9sLnZhbHVlKTtcclxuICAgICAgICByZXR1cm4gaXNJblZhbGlkID8geyBtYXhMZW5ndGg6IHsgdmFsdWU6IGNvbnRyb2wudmFsdWUsIG5hbWU6IGludmFsaWRNZXNzYWdlIH0gfSA6IG51bGw7XHJcbiAgICAgIH0sXHJcbiAgICAgIG1pbkxlbmd0aDogKGNvbnRyb2w6IEFic3RyYWN0Q29udHJvbCk6IHsgW2tleTogc3RyaW5nXTogYW55IH0gfCBudWxsID0+IHtcclxuICAgICAgICBjb25zdCBpc0luVmFsaWQgPSBjb250cm9sLnZhbHVlICYmIGNvbnRyb2wudmFsdWUudG9TdHJpbmcoKS5sZW5ndGggPCBjb25zdHJhaW50c1swXTtcclxuICAgICAgICBjb25zdCBtZXNzYWdlVGVtcGxhdGUgPSBWYWxpZGF0aW9uVHlwZXMuZ2V0TWVzc2FnZShWYWxpZGF0aW9uVHlwZXMuTUFYX0xFTkdUSCk7XHJcbiAgICAgICAgY29uc3QgaW52YWxpZE1lc3NhZ2UgPSBWYWxpZGF0aW9uRXhlY3V0b3IucmVwbGFjZU1lc3NhZ2VTcGVjaWFsVG9rZW5zKG1lc3NhZ2VUZW1wbGF0ZSwgcnVsZU9iaiwgY29udHJvbC52YWx1ZSk7XHJcbiAgICAgICAgcmV0dXJuIGlzSW5WYWxpZCA/IHsgbWluTGVuZ3RoOiB7IHZhbHVlOiBjb250cm9sLnZhbHVlLCBuYW1lOiBpbnZhbGlkTWVzc2FnZSB9IH0gOiBudWxsO1xyXG4gICAgICB9LFxyXG4gICAgICBtaW5WYWx1ZTogKGNvbnRyb2w6IEFic3RyYWN0Q29udHJvbCk6IHsgW2tleTogc3RyaW5nXTogYW55IH0gfCBudWxsID0+IHtcclxuICAgICAgICBsZXQgaXNJblZhbGlkID0gZmFsc2U7XHJcbiAgICAgICAgbGV0IGludmFsaWRNZXNzYWdlID0gJyc7XHJcbiAgICAgICAgLy8g6L+Z6YeM5Y+q5YGa5pyA5bCP5YC85Yik5pat77yM5aaC5p6c55So5oi35pyq6L6T5YWl5YiZ5LiN5bqU6K+l5YGa5Yik5patXHJcbiAgICAgICAgaWYgKGNvbnRyb2wudmFsdWUgPT09IG51bGwgfHwgY29udHJvbC52YWx1ZSA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHR5cGVvZiBjb250cm9sLnZhbHVlID09PSAnbnVtYmVyJyAmJiB0eXBlb2YgY29uc3RyYWludHNbMF0gPT09ICdudW1iZXInKSB7XHJcbiAgICAgICAgICBpc0luVmFsaWQgPSBjb250cm9sLnZhbHVlIDwgY29uc3RyYWludHNbMF07XHJcbiAgICAgICAgICBjb25zdCBtZXNzYWdlVGVtcGxhdGUgPSBWYWxpZGF0aW9uVHlwZXMuZ2V0TWVzc2FnZShWYWxpZGF0aW9uVHlwZXMuTUlOVkFMVUUpO1xyXG4gICAgICAgICAgaW52YWxpZE1lc3NhZ2UgPSBWYWxpZGF0aW9uRXhlY3V0b3IucmVwbGFjZU1lc3NhZ2VTcGVjaWFsVG9rZW5zKG1lc3NhZ2VUZW1wbGF0ZSwgcnVsZU9iaiwgY29udHJvbC52YWx1ZSk7XHJcbiAgICAgICAgICAvLyBpbnZhbGlkTWVzc2FnZSA9IGAke25nRm9ybUNvbnRyb2wubmFtZX3nmoTlgLzkuI3lupTlsI/kuo4ke2NvbnN0cmFpbnRzWzBdfWA7XHJcbiAgICAgICAgfSBlbHNlIGlmIChuZ0Zvcm1Db250cm9sICYmIG5nRm9ybUNvbnRyb2wuYmlnTnVtYmVyID09PSB0cnVlKSB7XHJcbiAgICAgICAgICAvLyDlpKfmlbBcclxuICAgICAgICAgIGNvbnN0IG1pblZhbHVlID0gbmV3IEJpZ051bWJlcihjb25zdHJhaW50c1swXSk7XHJcbiAgICAgICAgICBjb25zdCB2YWx1ZSA9IG5ldyBCaWdOdW1iZXIoY29udHJvbC52YWx1ZSk7XHJcbiAgICAgICAgICBpc0luVmFsaWQgPSBtaW5WYWx1ZS5pc0dyZWF0ZXJUaGFuKHZhbHVlKTtcclxuICAgICAgICAgIGNvbnN0IG1lc3NhZ2VUZW1wbGF0ZSA9IFZhbGlkYXRpb25UeXBlcy5nZXRNZXNzYWdlKFZhbGlkYXRpb25UeXBlcy5NSU5WQUxVRSk7XHJcbiAgICAgICAgICBpbnZhbGlkTWVzc2FnZSA9IFZhbGlkYXRpb25FeGVjdXRvci5yZXBsYWNlTWVzc2FnZVNwZWNpYWxUb2tlbnMobWVzc2FnZVRlbXBsYXRlLCBydWxlT2JqLCBjb250cm9sLnZhbHVlKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgY29uc3QgbWVzc2FnZVRlbXBsYXRlID0gVmFsaWRhdGlvblR5cGVzLmdldE1lc3NhZ2UoVmFsaWRhdGlvblR5cGVzLk1JTl9EQVRFKTtcclxuICAgICAgICAgIC8vIOWBh+WumuS4uuaXpeacn1xyXG4gICAgICAgICAgLy8g5LiN566h5o6n5Lu255qE5YC85Li65LuA5LmI77yM5Y+q6KaB5p2h5Lu25LiN5a2Y5ZKL5oiW5pivbnVsbOaIljDmiJZ1bmRlZmluZWTmiJZcIlwi77yM5YiZ5LiN5a+55q+U5aSn5bCP77yM5peg5oSP5LmJXHJcbiAgICAgICAgICBpZiAoIWNvbnN0cmFpbnRzIHx8IGNvbnN0cmFpbnRzLmxlbmd0aCA8IDEgfHwgIWNvbnN0cmFpbnRzWzBdKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgaWYgKGNvbnRyb2wudmFsdWUgaW5zdGFuY2VvZiBEYXRlKSB7XHJcbiAgICAgICAgICAgIGlzSW5WYWxpZCA9IGNvbnRyb2wudmFsdWUgPCBwYXJzZUlTTyhjb25zdHJhaW50c1swXSk7XHJcbiAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBpc0luVmFsaWQgPSBwYXJzZUlTTyhjb250cm9sLnZhbHVlKSA8IHBhcnNlSVNPKGNvbnN0cmFpbnRzWzBdKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICAgIGludmFsaWRNZXNzYWdlID0gVmFsaWRhdGlvbkV4ZWN1dG9yLnJlcGxhY2VNZXNzYWdlU3BlY2lhbFRva2VucyhtZXNzYWdlVGVtcGxhdGUsIHJ1bGVPYmosIGNvbnRyb2wudmFsdWUpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gaXNJblZhbGlkID8geyBtaW5WYWx1ZTogeyB2YWx1ZTogY29udHJvbC52YWx1ZSwgbmFtZTogaW52YWxpZE1lc3NhZ2UgfSB9IDogbnVsbDtcclxuICAgICAgfSxcclxuICAgICAgbWF4VmFsdWU6IChjb250cm9sOiBBYnN0cmFjdENvbnRyb2wpOiB7IFtrZXk6IHN0cmluZ106IGFueSB9IHwgbnVsbCA9PiB7XHJcbiAgICAgICAgbGV0IGlzSW5WYWxpZCA9IGZhbHNlO1xyXG4gICAgICAgIGxldCBpbnZhbGlkTWVzc2FnZSA9ICcnO1xyXG4gICAgICAgIGlmIChjb250cm9sLnZhbHVlID09PSBudWxsIHx8IGNvbnRyb2wudmFsdWUgPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh0eXBlb2YgY29udHJvbC52YWx1ZSA9PT0gJ251bWJlcicgJiYgdHlwZW9mIGNvbnN0cmFpbnRzWzBdID09PSAnbnVtYmVyJykge1xyXG4gICAgICAgICAgaXNJblZhbGlkID0gY29udHJvbC52YWx1ZSA+IGNvbnN0cmFpbnRzWzBdO1xyXG4gICAgICAgICAgY29uc3QgbWVzc2FnZVRlbXBsYXRlID0gVmFsaWRhdGlvblR5cGVzLmdldE1lc3NhZ2UoVmFsaWRhdGlvblR5cGVzLk1BWFZBTFVFKTtcclxuICAgICAgICAgIGludmFsaWRNZXNzYWdlID0gVmFsaWRhdGlvbkV4ZWN1dG9yLnJlcGxhY2VNZXNzYWdlU3BlY2lhbFRva2VucyhtZXNzYWdlVGVtcGxhdGUsIHJ1bGVPYmosIGNvbnRyb2wudmFsdWUpO1xyXG4gICAgICAgICAgLy8gaW52YWxpZE1lc3NhZ2UgPSBgJHtuZ0Zvcm1Db250cm9sLm5hbWV955qE5YC85LiN5bqU5aSn5LqOJHtjb25zdHJhaW50c1swXX1gO1xyXG4gICAgICAgIH0gZWxzZSBpZiAobmdGb3JtQ29udHJvbCAmJiBuZ0Zvcm1Db250cm9sLmJpZ051bWJlciA9PT0gdHJ1ZSkge1xyXG4gICAgICAgICAgLy8g5aSn5pWwXHJcbiAgICAgICAgICBjb25zdCBtYXhWYWx1ZSA9IG5ldyBCaWdOdW1iZXIoY29uc3RyYWludHNbMF0pO1xyXG4gICAgICAgICAgY29uc3QgdmFsdWUgPSBuZXcgQmlnTnVtYmVyKGNvbnRyb2wudmFsdWUpO1xyXG4gICAgICAgICAgaXNJblZhbGlkID0gbWF4VmFsdWUuaXNMZXNzVGhhbih2YWx1ZSk7XHJcbiAgICAgICAgICBjb25zdCBtZXNzYWdlVGVtcGxhdGUgPSBWYWxpZGF0aW9uVHlwZXMuZ2V0TWVzc2FnZShWYWxpZGF0aW9uVHlwZXMuTUFYVkFMVUUpO1xyXG4gICAgICAgICAgaW52YWxpZE1lc3NhZ2UgPSBWYWxpZGF0aW9uRXhlY3V0b3IucmVwbGFjZU1lc3NhZ2VTcGVjaWFsVG9rZW5zKG1lc3NhZ2VUZW1wbGF0ZSwgcnVsZU9iaiwgY29udHJvbC52YWx1ZSk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIC8vIOWBh+WumuS4uuaXpeacn1xyXG4gICAgICAgICAgY29uc3QgbWVzc2FnZVRlbXBsYXRlID0gVmFsaWRhdGlvblR5cGVzLmdldE1lc3NhZ2UoVmFsaWRhdGlvblR5cGVzLk1BWF9EQVRFKTtcclxuICAgICAgICAgIGlmIChjb250cm9sLnZhbHVlIGluc3RhbmNlb2YgRGF0ZSkge1xyXG4gICAgICAgICAgICBpc0luVmFsaWQgPSBjb250cm9sLnZhbHVlID4gbmV3IERhdGUoY29uc3RyYWludHNbMF0pO1xyXG4gICAgICAgICAgICAvLyBpbnZhbGlkTWVzc2FnZSA9IGAke25nRm9ybUNvbnRyb2wubmFtZX3nmoTlgLzkuI3lupTmmZrkuo4ke2NvbnN0cmFpbnRzWzBdfWA7XHJcbiAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBpc0luVmFsaWQgPSBuZXcgRGF0ZShjb250cm9sLnZhbHVlKSA+IG5ldyBEYXRlKGNvbnN0cmFpbnRzWzBdKTtcclxuICAgICAgICAgICAgLy8gaW52YWxpZE1lc3NhZ2UgPSBgJHtuZ0Zvcm1Db250cm9sLm5hbWV955qE5YC85LiN5bqU5pep5LqOJHtjb25zdHJhaW50c1swXX1gO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgaW52YWxpZE1lc3NhZ2UgPSBWYWxpZGF0aW9uRXhlY3V0b3IucmVwbGFjZU1lc3NhZ2VTcGVjaWFsVG9rZW5zKG1lc3NhZ2VUZW1wbGF0ZSwgcnVsZU9iaiwgY29udHJvbC52YWx1ZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBpc0luVmFsaWQgPyB7IG1heFZhbHVlOiB7IHZhbHVlOiBjb250cm9sLnZhbHVlLCBuYW1lOiBpbnZhbGlkTWVzc2FnZSB9IH0gOiBudWxsO1xyXG4gICAgICB9LFxyXG4gICAgICBleGNsdWRlOiAoY29udHJvbDogQWJzdHJhY3RDb250cm9sKTogeyBba2V5OiBzdHJpbmddOiBhbnkgfSB8IG51bGwgPT4ge1xyXG4gICAgICAgIGNvbnN0IGlzVmFsaWQgPSB0eXBlb2YgY29udHJvbC52YWx1ZSA9PT0gJ3N0cmluZycgJiYgIXRoaXMudmFsaWRhdG9ySnMuY29udGFpbnMoY29udHJvbC52YWx1ZSwgY29uc3RyYWludHNbMF0pO1xyXG4gICAgICAgIGNvbnN0IG1lc3NhZ2VUZW1wbGF0ZSA9IFZhbGlkYXRpb25UeXBlcy5nZXRNZXNzYWdlKFZhbGlkYXRpb25UeXBlcy5FWENMVURFKTtcclxuICAgICAgICBjb25zdCBpbnZhbGlkTWVzc2FnZSA9IFZhbGlkYXRpb25FeGVjdXRvci5yZXBsYWNlTWVzc2FnZVNwZWNpYWxUb2tlbnMobWVzc2FnZVRlbXBsYXRlLCBydWxlT2JqLCBjb250cm9sLnZhbHVlKTtcclxuICAgICAgICByZXR1cm4gaXNWYWxpZCA/IG51bGwgOiB7IGV4Y2x1ZGU6IHsgdmFsdWU6IGNvbnRyb2wudmFsdWUsIG5hbWU6IGludmFsaWRNZXNzYWdlIH0gfTtcclxuICAgICAgfSxcclxuICAgICAgbWF0Y2hlczogKGNvbnRyb2w6IEFic3RyYWN0Q29udHJvbCk6IHsgW2tleTogc3RyaW5nXTogYW55IH0gfCBudWxsID0+IHtcclxuICAgICAgICBjb25zdCB2YWx1ZSA9IChjb250cm9sLnZhbHVlID09PSBudWxsIHx8IGNvbnRyb2wudmFsdWUgPT09IHVuZGVmaW5lZCkgPyAnJyA6IGNvbnRyb2wudmFsdWUudG9TdHJpbmcoKTtcclxuICAgICAgICBjb25zdCBpc1ZhbGlkID0gdmFsdWUgPT09ICcnID8gdHJ1ZSA6IHRoaXMudmFsaWRhdG9ySnMubWF0Y2hlcyh2YWx1ZSwgY29uc3RyYWludHNbMF0pO1xyXG4gICAgICAgIGxldCBpbnZhbGlkTWVzc2FnZSA9IG1lc3NhZ2U7XHJcbiAgICAgICAgaWYgKCFpbnZhbGlkTWVzc2FnZSkge1xyXG4gICAgICAgICAgY29uc3QgbWVzc2FnZVRlbXBsYXRlID0gVmFsaWRhdGlvblR5cGVzLmdldE1lc3NhZ2UoVmFsaWRhdGlvblR5cGVzLk1BVENIRVMpO1xyXG4gICAgICAgICAgaW52YWxpZE1lc3NhZ2UgPSBWYWxpZGF0aW9uRXhlY3V0b3IucmVwbGFjZU1lc3NhZ2VTcGVjaWFsVG9rZW5zKG1lc3NhZ2VUZW1wbGF0ZSwgcnVsZU9iaiwgY29udHJvbC52YWx1ZSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gaXNWYWxpZCA/IG51bGwgOiB7IG1hdGNoZXM6IHsgdmFsdWU6IGNvbnRyb2wudmFsdWUsIG5hbWU6IGludmFsaWRNZXNzYWdlIH0gfVxyXG4gICAgICB9XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIHJ1bGVIYW5kbGVyT2JqW3R5cGVdO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog5pCc6ZuG5bGe5oCn6KOF6aWw5ZmoXHJcbiAgICovXHJcbiAgcHJpdmF0ZSBjb2xsZWN0TWV0YWRhdGFzKCkge1xyXG4gICAgdGhpcy5uZ1ZhbGlkYXRlRm9ybSA9IHRoaXMuZnJhbWVDb250ZXh0Lm1ldGFkYXRhLmZvcm0gPyBNZXRhZGF0YVV0aWwudHJhbnNsYXRlTWV0YWRhdGFCeU5hbWUodGhpcy5mcmFtZUNvbnRleHQubWV0YWRhdGEuZm9ybSwgdGhpcy50cmFuc2xhdGVTZXJ2aWNlLCBbJ2Zvcm1Hcm91cE5hbWUnXSkgOlxyXG4gICAgICBNZXRhZGF0YVV0aWwuZ2V0Q2xhc3NNZXRhZGF0YUJ5TmFtZVdpdGhUcmFuc2xhdGUodGhpcy5jb25zdHJ1Y3RvciwgTkdfVkFMSURBVEVfRk9STSxcclxuICAgICAgICB0aGlzLnRyYW5zbGF0ZVNlcnZpY2UsIFsnZm9ybUdyb3VwTmFtZSddKTtcclxuICAgIHRoaXMubmdGb3JtQ29udHJvbHMgPSB0aGlzLmNvbGxlY3Rpb25Gb3JtQ29udHJvbE1ldGFkYXRzKHRoaXMuZnJhbWVDb250ZXh0Lm1ldGFkYXRhLmZvcm1Db250cm9scyk7XHJcbiAgICB0aGlzLm5nQ2hpbGRGb3JtcyA9IHRoaXMuZnJhbWVDb250ZXh0Lm1ldGFkYXRhLnN1YkZvcm1zIHx8IE1ldGFkYXRhVXRpbC5nZXRQcm9wc01ldGFkYXRhc0J5TmFtZSh0aGlzLmNvbnN0cnVjdG9yLCBOR19DSElMRF9GT1JNKTtcclxuICB9XHJcblxyXG4gIHByaXZhdGUgY29sbGVjdGlvbkZvcm1Db250cm9sTWV0YWRhdHMocHJlbG9hZE1ldGFkYXRhOiB7IFtwcm9wTmFtZTogc3RyaW5nXTogTmdGb3JtQ29udHJvbCB9ID0gbnVsbCk6IHsgW3Byb3BOYW1lOiBzdHJpbmddOiBOZ0Zvcm1Db250cm9sIH0ge1xyXG4gICAgY29uc3QgbWV0YWRhdGFzID0gcHJlbG9hZE1ldGFkYXRhID8gTWV0YWRhdGFVdGlsLnRyYW5zbGF0ZU1ldGFkYXRhQnlOYW1lKHByZWxvYWRNZXRhZGF0YSwgdGhpcy50cmFuc2xhdGVTZXJ2aWNlLCBbJ25hbWUnXSkgOlxyXG4gICAgICBNZXRhZGF0YVV0aWwuZ2V0UHJvcHNNZXRhZGF0YXNCeU5hbWVXaXRoVHJhbnNsYXRlKHRoaXMuY29uc3RydWN0b3IsIE5HX0ZPUk1fQ09OVFJPTCwgdGhpcy50cmFuc2xhdGVTZXJ2aWNlLCBbJ25hbWUnXSk7XHJcbiAgICAvLyDlkJHpqozor4Hop4TliJnkuK3pmYTliqDooajljZXkv6Hmga/vvIznlKjkuo7mmL7npLrpqozor4Hmj5DnpLrjgIJcclxuICAgIGlmIChtZXRhZGF0YXMpIHtcclxuICAgICAgT2JqZWN0LmtleXMobWV0YWRhdGFzKS5mb3JFYWNoKChwcm9wTmFtZTogc3RyaW5nKSA9PiB7XHJcbiAgICAgICAgY29uc3QgbmdGb3JtQ29udHJvbCA9IG1ldGFkYXRhc1twcm9wTmFtZV07XHJcbiAgICAgICAgY29uc3QgZGlzcGxheUZpZWxkTmFtZSA9IG5nRm9ybUNvbnRyb2wubmFtZSB8fCBuZ0Zvcm1Db250cm9sLmRlZmF1bHRJMThuVmFsdWUgfHwgJyc7XHJcbiAgICAgICAgY29uc3QgZm9ybUNvbnRyb2xJZCA9IG5nRm9ybUNvbnRyb2wuaWQ7XHJcbiAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkobmdGb3JtQ29udHJvbC52YWxpZFJ1bGVzKSkge1xyXG4gICAgICAgICAgbmdGb3JtQ29udHJvbC52YWxpZFJ1bGVzLmZvckVhY2goKHZhbGlkYXRpb25SdWxlOiBWYWxpZGF0ZVJ1bGUpID0+IHtcclxuICAgICAgICAgICAgdmFsaWRhdGlvblJ1bGUudGFyZ2V0SWQgPSBmb3JtQ29udHJvbElkO1xyXG4gICAgICAgICAgICB2YWxpZGF0aW9uUnVsZS50YXJnZXROYW1lID0gdGhpcy5mb3JtR3JvdXBOYW1lO1xyXG4gICAgICAgICAgICB2YWxpZGF0aW9uUnVsZS5wcm9wZXJ0eSA9IGRpc3BsYXlGaWVsZE5hbWU7XHJcbiAgICAgICAgICAgIHZhbGlkYXRpb25SdWxlLmZpZWxkID0gbmdGb3JtQ29udHJvbC5iaW5kaW5nO1xyXG5cclxuICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gbWV0YWRhdGFzO1xyXG4gIH1cclxuXHJcbiAgLy8g6I635Y+WZ3JpZOS4reavj+adoeaVsOaNrueahGZvcm1Db250cm9sXHJcbiAgZ2V0R3JpZEl0ZW1Db250cm9sKHByb3BOYW1lOiBzdHJpbmcsIHZhbHVlOiBhbnkpIHtcclxuICAgIGNvbnN0IGNyZWF0ZUNvbnRyb2xGcm9tUnVsZXMgPSBwcm9wZXJ0eU5hbWUgPT4ge1xyXG4gICAgICBjb25zdCB2YWxpZGF0b3JzID0gW107XHJcbiAgICAgIC8vIOiuvue9rmZvcm3kuK3lrprkuYnnmoTpqozor4Hop4TliJlcclxuICAgICAgaWYgKHRoaXMubmdGb3JtQ29udHJvbHNbcHJvcGVydHlOYW1lXSAmJiBBcnJheS5pc0FycmF5KHRoaXMubmdGb3JtQ29udHJvbHNbcHJvcGVydHlOYW1lXS52YWxpZFJ1bGVzKSkge1xyXG4gICAgICAgIEFycmF5LnByb3RvdHlwZS5mb3JFYWNoLmNhbGwodGhpcy5uZ0Zvcm1Db250cm9sc1twcm9wZXJ0eU5hbWVdLnZhbGlkUnVsZXMsICgocnVsZU9iaikgPT4ge1xyXG4gICAgICAgICAgY29uc3QgdmFsaWRhdGVGbiA9IHRoaXMuZ2V0VmFsaWRhdG9yQnlSdWxlT2JqKHJ1bGVPYmosIHRoaXMubmdGb3JtQ29udHJvbHNbcHJvcGVydHlOYW1lXSk7XHJcbiAgICAgICAgICBpZiAodmFsaWRhdGVGbikge1xyXG4gICAgICAgICAgICB2YWxpZGF0b3JzLnB1c2godmFsaWRhdGVGbik7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfSkpO1xyXG4gICAgICB9XHJcbiAgICAgIHJldHVybiBuZXcgRm9ybUNvbnRyb2wodmFsdWUsIHsgdmFsaWRhdG9yczogdmFsaWRhdG9ycywgdXBkYXRlT246ICdibHVyJyB9KTtcclxuICAgIH07XHJcbiAgICByZXR1cm4gY3JlYXRlQ29udHJvbEZyb21SdWxlcyhwcm9wTmFtZSk7XHJcbiAgfVxyXG5cclxuICAvLyDmoLnmja7lrp7kvZPlsZ7mgKflkI3ojrflj5bnlYzpnaLnu5HlrprnmoTlsZ7mgKflkI1cclxuICBnZXREb21Qcm9wZXJ0eU5hbWVCeUVudGl0eVByb3AocHJvcGVydHlOYW1lOiBzdHJpbmcsIHByZWZpeDogc3RyaW5nID0gJycpOiBzdHJpbmcge1xyXG4gICAgbGV0IGRvbVByb3BlcnR5TmFtZSA9ICcnO1xyXG4gICAgT2JqZWN0LmtleXModGhpcy5uZ0Zvcm1Db250cm9scykuZm9yRWFjaChrZXkgPT4ge1xyXG4gICAgICBjb25zdCBiaW5kaW5nID0gYCR7cHJlZml4fSR7dGhpcy5uZ0Zvcm1Db250cm9sc1trZXldLmJpbmRpbmd9YDtcclxuICAgICAgaWYgKGJpbmRpbmcgPT09IHByb3BlcnR5TmFtZSkge1xyXG4gICAgICAgIGRvbVByb3BlcnR5TmFtZSA9IGtleTtcclxuICAgICAgfVxyXG4gICAgfSk7XHJcbiAgICByZXR1cm4gZG9tUHJvcGVydHlOYW1lO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog5Yib5bu6Rm9ybUNvbnRyb2xcclxuICAgKi9cclxuICBjcmVhdGVDb250cm9scygpIHtcclxuICAgIE9iamVjdC5rZXlzKHRoaXMubmdGb3JtQ29udHJvbHMpLmZvckVhY2goKHByb3BOYW1lOiBzdHJpbmcpID0+IHtcclxuICAgICAgY29uc3QgbmdGb3JtQ29udHJvbCA9IHRoaXMubmdGb3JtQ29udHJvbHNbcHJvcE5hbWVdO1xyXG4gICAgICBjb25zdCB2YWxpZGF0b3JzOiBWYWxpZGF0b3JGbltdID0gW107XHJcblxyXG4gICAgICAvLyDorr7nva5mb3Jt5Lit5a6a5LmJ55qE6aqM6K+B6KeE5YiZXHJcbiAgICAgIGlmIChBcnJheS5pc0FycmF5KHRoaXMubmdGb3JtQ29udHJvbHNbcHJvcE5hbWVdLnZhbGlkUnVsZXMpKSB7XHJcbiAgICAgICAgQXJyYXkucHJvdG90eXBlLmZvckVhY2guY2FsbCh0aGlzLm5nRm9ybUNvbnRyb2xzW3Byb3BOYW1lXS52YWxpZFJ1bGVzLCAocnVsZU9iaiA9PiB7XHJcbiAgICAgICAgICBjb25zdCB2YWxpZGF0ZUZuID0gdGhpcy5nZXRWYWxpZGF0b3JCeVJ1bGVPYmoocnVsZU9iaiwgdGhpcy5uZ0Zvcm1Db250cm9sc1twcm9wTmFtZV0pO1xyXG4gICAgICAgICAgaWYgKHZhbGlkYXRlRm4pIHtcclxuICAgICAgICAgICAgdmFsaWRhdG9ycy5wdXNoKHZhbGlkYXRlRm4pO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH0pKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgY29uc3QgdXBkYXRlT24gPSBuZ0Zvcm1Db250cm9sLnVwZGF0ZU9uID8gbmdGb3JtQ29udHJvbC51cGRhdGVPbiA6ICdibHVyJztcclxuICAgICAgY29uc3QgY29udHJvbCA9IG5ldyBGb3JtQ29udHJvbChudWxsLCB7IHZhbGlkYXRvcnM6IHZhbGlkYXRvcnMsIHVwZGF0ZU9uOiB1cGRhdGVPbiB9KTtcclxuICAgICAgaWYgKG5nRm9ybUNvbnRyb2wuYmluZGluZykge1xyXG4gICAgICAgIHRoaXMuc2V0VXBCaW5kaW5nRGF0YVBpcGVsaW5lKGNvbnRyb2wsIG5nRm9ybUNvbnRyb2wuYmluZGluZywgbmdGb3JtQ29udHJvbC52YWx1ZUNvbnZlcnRlcik7XHJcbiAgICAgIH1cclxuICAgICAgdGhpcy5jb250cm9sc1twcm9wTmFtZV0gPSBjb250cm9sO1xyXG4gICAgICB0aGlzW3Byb3BOYW1lXSA9IGNvbnRyb2w7XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOWIm+W7ukZvcm1Hcm91cFxyXG4gICAqL1xyXG4gIGNyZWF0ZUNoaWxkRm9ybXMoKSB7XHJcbiAgICBPYmplY3Qua2V5cyh0aGlzLm5nQ2hpbGRGb3JtcykuZm9yRWFjaCgocHJvcE5hbWU6IHN0cmluZykgPT4ge1xyXG4gICAgICBjb25zdCBuZ0Zvcm1Hcm91cCA9IHRoaXMubmdDaGlsZEZvcm1zW3Byb3BOYW1lXTtcclxuXHJcbiAgICAgIC8vIOaehOmAoOWtkEZvcm1cclxuICAgICAgY29uc3QgZm9ybUdyb3VwID0gbmV3IG5nRm9ybUdyb3VwLmZvcm1UeXBlKCk7XHJcbiAgICAgIGZvcm1Hcm91cC5pbml0KHRoaXMuYmluZGluZ0RhdGEsIHRoaXMuYmluZGluZ1BhdGgsIHRoaXMuZnJhbWVDb250ZXh0KTtcclxuXHJcbiAgICAgIHRoaXMuY29udHJvbHNbcHJvcE5hbWVdID0gZm9ybUdyb3VwO1xyXG4gICAgICB0aGlzW3Byb3BOYW1lXSA9IGZvcm1Hcm91cDtcclxuICAgIH0pO1xyXG4gIH1cclxuICAvKlxyXG4gICog5paw5aKeRm9ybUNvbnRyb2xzXHJcbiAgICovXHJcbiAgYWRkQ29udHJvbHMoY29sdW1uOiBhbnksIGNvbnZlcnRlcj86IENvbnRyb2xWYWx1ZUNvbnZlcnRlcikge1xyXG5cclxuICAgIGNvbnN0IHVwZGF0ZU9uID0gY29sdW1uICYmIGNvbHVtbi5lZGl0b3IgJiYgY29sdW1uLmVkaXRvci51cGRhdGVPbiA/IGNvbHVtbi5lZGl0b3IudXBkYXRlT24gOiAnYmx1cic7XHJcbiAgICBjb25zdCBmb3JtQ29udHJvbCA9IG5ldyBGb3JtQ29udHJvbCgnJywgeyB1cGRhdGVPbjogdXBkYXRlT24gfSk7XHJcbiAgICBjb25zdCBmaWVsZFBhdGggPSBjb2x1bW4uZGF0YUZpZWxkO1xyXG5cclxuICAgIC8vIOaXpeacn+agvOW8jyAg6ZyA6KaB5qC85byP5YyWXHJcbiAgICAvLyB0aGlzLnNldFVwQmluZGluZ0RhdGFQaXBlbGluZShmb3JtQ29udHJvbCwgZmllbGRQYXRoLCBjb252ZXJ0ZXIpO1xyXG4gICAgaWYgKGNvbHVtbi5lZGl0b3IgJiYgY29sdW1uLmVkaXRvci5iaW5kaW5nKSB7XHJcbiAgICAgIHRoaXMuc2V0VXBCaW5kaW5nRGF0YVBpcGVsaW5lKGZvcm1Db250cm9sLCBmaWVsZFBhdGgsIGNvbnZlcnRlcik7XHJcbiAgICAgIHRoaXMuY29udHJvbHNbY29sdW1uLmVkaXRvci5iaW5kaW5nLnBhdGhdID0gZm9ybUNvbnRyb2w7XHJcbiAgICAgIHRoaXNbY29sdW1uLmVkaXRvci5iaW5kaW5nLnBhdGhdID0gZm9ybUNvbnRyb2w7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuXHJcbiAgLyoqXHJcbiAgICog5pCt5bu6Y29udHJvbOWSjHRhYmxl5LmL6Ze055qE6YCa6YGTXHJcbiAgICogQHBhcmFtIGNvbnRyb2wg5o6n5Lu2XHJcbiAgICogQHBhcmFtIGJpbmRpbmdGaWVsZFBhdGgg57uR5a6a55qE5a2X5q615ZCNXHJcbiAgICovXHJcbiAgcHJpdmF0ZSBzZXRVcEJpbmRpbmdEYXRhUGlwZWxpbmUoY29udHJvbDogRm9ybUNvbnRyb2wsIGJpbmRpbmdGaWVsZFBhdGgsIGNvbnZlcnRlcj86IENvbnRyb2xWYWx1ZUNvbnZlcnRlcikge1xyXG5cclxuICAgIGlmICghdGhpcy5iaW5kaW5nRGF0YSkge1xyXG4gICAgICB0aHJvdyBFcnJvcign5b2T5YmN57uE5Lu25LiK5LiL5paH5Lit5om+5LiN5YiwQmluZGluZ0RhdGHvvIzor7fmo4Dmn6XvvIEnKTtcclxuICAgIH1cclxuXHJcbiAgICAvLyDlpoLmnpxjb252ZXJ0ZXLlrZjlnKjvvIzliJnlhpnlhaXkuIrkuIvmlofvvIxDb252ZXJ0ZXLkuK3lj6/og73kvJrpnIDopoHku45pbmplY3RvcuS4reiOt+WPluW9k+WJjeivreiogOS/oeaBr1xyXG4gICAgLy8gX19GUkFNRV9DT05URVhUX18g5pyq5L2/55SoXHJcbiAgICAvKmlmIChjb252ZXJ0ZXIpIHtcclxuICAgICAgY29udmVydGVyWydfX0ZSQU1FX0NPTlRFWFRfXyddID0gdGhpcy5mcmFtZUNvbnRleHQ7XHJcbiAgICB9Ki9cclxuXHJcbiAgICAvLyDlsIZiaW5kaWduUGF0aOS4jmJpbmRpbmdGaWVsZFBhdGjlkIjlubZcclxuICAgIGlmICh0aGlzLmJpbmRpbmdQYXRoLmxlbmd0aCA+IDEpIHtcclxuICAgICAgYmluZGluZ0ZpZWxkUGF0aCA9IHRoaXMuYmluZGluZ1BhdGguc3Vic3RyKDEpLnJlcGxhY2UoL1xcLy9nLCAnLicpICsgJy4nICsgYmluZGluZ0ZpZWxkUGF0aDtcclxuICAgIH1cclxuICAgIGNvbnN0IGJpbmRpbmdQYXRoczogc3RyaW5nW10gPSBiaW5kaW5nRmllbGRQYXRoLnNwbGl0KCcuJyk7XHJcbiAgICBjb25zdCBwcm9wZXJ0eU5hbWUgPSBiaW5kaW5nUGF0aHNbYmluZGluZ1BhdGhzLmxlbmd0aCAtIDFdO1xyXG4gICAgLy8g6K6+572u5Yid5aeL5YC8XHJcbiAgICBjb25zdCBpbml0VmFsdWUgPSB0aGlzLmdldFZhbHVlRnJvbUJpbmRpbmdEYXRhKGJpbmRpbmdQYXRocywgY29udmVydGVyKTtcclxuICAgIGNvbnRyb2wuc2V0VmFsdWUoaW5pdFZhbHVlKTtcclxuXHJcbiAgICAvLyDorr7nva7liJ3lp4vlgLxcclxuXHJcbiAgICAvLyBCaW5kaW5nRGF0YSA9PiBjb250cm9sXHJcbiAgICB0aGlzLmJpbmRpbmdEYXRhLmNoYW5nZXMucGlwZSh0YWtlVW50aWwodGhpcy5kZXN0cm95JCkpLnBpcGUoZmlsdGVyKChjaGFuZ2U6IENoYW5nZSkgPT4ge1xyXG4gICAgICBjb25zdCBiaW5kaW5nT2JqZWN0ID0gdGhpcy5iaW5kaW5nRGF0YS5nZXRPYmplY3QoKTtcclxuICAgICAgY29uc3QgY2hhbmdlUGF0aCA9IGNoYW5nZS5wYXRoLmpvaW4oJy4nKTtcclxuICAgICAgaWYgKGNoYW5nZS5pc1VkdCkge1xyXG4gICAgICAgIHJldHVybiBjaGFuZ2VQYXRoID09PSBiaW5kaW5nRmllbGRQYXRoO1xyXG4gICAgICB9XHJcbiAgICAgIGlmIChjaGFuZ2UudHlwZSA9PT0gQ2hhbmdlVHlwZS5WYWx1ZUNoYW5nZWQpIHtcclxuICAgICAgICAvLyBwYXRo5a6M5YWo5Yy56YWNXHJcbiAgICAgICAgcmV0dXJuIGNoYW5nZVBhdGggPT09IGJpbmRpbmdGaWVsZFBhdGg7XHJcbiAgICAgIH0gZWxzZSBpZiAoY2hhbmdlLnR5cGUgPT09IENoYW5nZVR5cGUuTG9hZCB8fCBjaGFuZ2UudHlwZSA9PT0gQ2hhbmdlVHlwZS5TZWxlY3Rpb25DaGFuZ2VkIHx8IGNoYW5nZS50eXBlID09PSBDaGFuZ2VUeXBlLlJlbW92ZSB8fCBjaGFuZ2UudHlwZSA9PT0gQ2hhbmdlVHlwZS5VcGRhdGUpIHtcclxuICAgICAgICAvLyDlr7nkuo5PYmplY3RDaGFuZ2Vk44CBU2VsZWN0aW9uQ2hhbmdlZO+8jOWMuemFjeWIsOeItue6p1xyXG4gICAgICAgIGNvbnN0IGNoYW5nZVBhdGhXaXRoRG90ID0gY2hhbmdlUGF0aCA9PT0gJycgPyBjaGFuZ2VQYXRoIDogY2hhbmdlUGF0aCArICcuJztcclxuICAgICAgICAvLyDkuLvooajmlrDlop7miJbliIfmjaLml7bvvIzph43nva7plJnor6/kv6Hmga9cclxuICAgICAgICBpZiAoY2hhbmdlICYmIGNoYW5nZS50eXBlID09PSBDaGFuZ2VUeXBlLkxvYWQpIHtcclxuICAgICAgICAgIHRoaXMucmVzZXRDYXJkVmFsaWRNc2coKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGJpbmRpbmdGaWVsZFBhdGguaW5kZXhPZihjaGFuZ2VQYXRoV2l0aERvdCkgPT09IDA7XHJcbiAgICAgIH0gZWxzZSBpZiAoY2hhbmdlLnR5cGUgPT09IENoYW5nZVR5cGUuVXBkYXRlRXJyb3JzKSB7XHJcbiAgICAgICAgaWYgKGNoYW5nZVBhdGggPT09IGJpbmRpbmdGaWVsZFBhdGgpIHtcclxuICAgICAgICAgIHRoaXMuY2FyZENvbnRyb2xzW3Byb3BlcnR5TmFtZV0gPSB0aGlzLmNhcmRDb250cm9sc1twcm9wZXJ0eU5hbWVdIHx8IHt9O1xyXG4gICAgICAgICAgaWYgKGJpbmRpbmdGaWVsZFBhdGggJiYgdGhpcy5jb250cm9sc1twcm9wZXJ0eU5hbWVdKSB7XHJcbiAgICAgICAgICAgIGlmIChiaW5kaW5nT2JqZWN0LnByaW1hcnlLZXlWYWx1ZSA9PT0gY2hhbmdlLmlkKSB7XHJcbiAgICAgICAgICAgICAgdGhpcy5jYXJkQ29udHJvbHNbcHJvcGVydHlOYW1lXS5lcnJvcnMgPSBjaGFuZ2UuZXJyb3JzO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgIC8vIOWPquabtOaWsOW9k+WJjeihjOeahOmUmeivr+aPkOekuuS/oeaBr++8jOS4jeaYr+W9k+WJjeihjOeahOS4jeWkhOeQhu+8jOaUvuWIsOacgOe7iOeahOWunuS9k+agoemqjOmHjOmdolxyXG4gICAgICAgICAgICAgIC8vIHRoaXMuY2FyZENvbnRyb2xzW3Byb3BlcnR5TmFtZV0uZXJyb3JzID0gbnVsbDtcclxuICAgICAgICAgICAgICAvLyB0aGlzLmlzRm9ybVZhbGlkKGJpbmRpbmdGaWVsZFBhdGgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICAvLyDmsqHmnInplJnor6/ml7ZcclxuICAgICAgICAgIGlmICghY2hhbmdlLnBhdGggfHwgIWJpbmRpbmdGaWVsZFBhdGggfHwgIWNoYW5nZS5lcnJvcnMpIHtcclxuICAgICAgICAgICAgdGhpcy5jYXJkQ29udHJvbHNbcHJvcGVydHlOYW1lXS5lcnJvcnMgPSBudWxsO1xyXG4gICAgICAgICAgICB0aGlzLmlzRm9ybVZhbGlkKGJpbmRpbmdGaWVsZFBhdGgpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgIH1cclxuICAgIH0pKS5zdWJzY3JpYmUoKGNoYW5nZTogQ2hhbmdlKSA9PiB7XHJcbiAgICAgIGxldCBmdWxsRW50aXR5UHJvcCA9IHByb3BlcnR5TmFtZTtcclxuICAgICAgLy8gdWR05a2X5q615bGV56S65pe26ZyA6KaB5bCG54i257qn5bGe5oCn5ZCN5ZKM6Ieq6Lqr5bGe5oCn5ZCN55SoJ18n6L+e5o6lXHJcbiAgICAgIGxldCBwYXRoUHJlZml4ID0gJyc7XHJcbiAgICAgIGlmIChjaGFuZ2UuaXNVZHQpIHtcclxuICAgICAgICBpZiAoY2hhbmdlLmlzR3JpZCkge1xyXG4gICAgICAgICAgLy8gZ3JpZCDlsIbku47ooajkuLvlrZfmrrXljrvpmaRcclxuICAgICAgICAgIGNoYW5nZS5wYXRoLnNoaWZ0KCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChjaGFuZ2UucGF0aC5sZW5ndGgpIHtcclxuICAgICAgICAgIHBhdGhQcmVmaXggPSBjaGFuZ2UucGF0aC5qb2luKCcuJyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGZ1bGxFbnRpdHlQcm9wID0gcGF0aFByZWZpeDtcclxuICAgICAgfVxyXG5cclxuICAgICAgY29uc3QgdmFsdWUgPSB0aGlzLmJpbmRpbmdEYXRhLmdldFZhbHVlKGJpbmRpbmdQYXRocywgZmFsc2UpO1xyXG4gICAgICBjb25zdCBuZXdDb250cm9sVmFsdWUgPSBjb252ZXJ0ZXIgPyBjb252ZXJ0ZXIuY29udmVydEZyb20odmFsdWUpIDogdmFsdWU7XHJcbiAgICAgIC8vIOiuvue9rkZvcm1Db250cm9sXHJcbiAgICAgIGNvbnN0IGRvbVByb3BOYW1lID0gdGhpcy5nZXREb21Qcm9wZXJ0eU5hbWVCeUVudGl0eVByb3AoZnVsbEVudGl0eVByb3ApO1xyXG4gICAgICB0aGlzLmNhcmRDb250cm9sc1tkb21Qcm9wTmFtZV0gPSB0aGlzLmNhcmRDb250cm9sc1tkb21Qcm9wTmFtZV0gfHwge307XHJcbiAgICAgIGlmIChjaGFuZ2UuZXJyb3JzKSB7XHJcbiAgICAgICAgdGhpcy5jYXJkQ29udHJvbHNbZG9tUHJvcE5hbWVdLmVycm9ycyA9IGNoYW5nZS5lcnJvcnM7XHJcbiAgICAgIH1cclxuICAgICAgLy8gZGF0YUdyaWTkv53lrZjml7bvvIzmoLnmja5pZO+8jOWIm+W7umZvcm1Db250cm9s77yM5bm26K6+572u6ZSZ6K+v5a+56LGhXHJcbiAgICAgIGlmIChjaGFuZ2UuaWQpIHtcclxuICAgICAgICBpZiAodGhpcy5jb250cm9sSWRNYXBbY2hhbmdlLmlkXSAmJiBPYmplY3Qua2V5cyh0aGlzLmNvbnRyb2xJZE1hcFtjaGFuZ2UuaWRdKS5sZW5ndGggPT09IDApIHtcclxuICAgICAgICAgIHRoaXMuY29udHJvbElkTWFwW2NoYW5nZS5pZF0gPSB7fTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5jb250cm9sSWRNYXBbY2hhbmdlLmlkXSA9IHRoaXMuY29udHJvbElkTWFwW2NoYW5nZS5pZF0gfHwge307XHJcbiAgICAgICAgaWYgKGNoYW5nZS5lcnJvcnMpIHtcclxuICAgICAgICAgIHRoaXMuY29udHJvbElkTWFwW2NoYW5nZS5pZF1bZG9tUHJvcE5hbWVdID0ge1xyXG4gICAgICAgICAgICBlcnJvcnM6IGNoYW5nZS5lcnJvcnNcclxuICAgICAgICAgIH07XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICAgIC8vIOWmguaenOWSjOaOp+S7tuS4iueahOWAvOS4gOagt++8jOWImeS4jeWGjeabtOaWsOaOp+S7tueahOWAvFxyXG4gICAgICBpZiAoSlNPTi5zdHJpbmdpZnkoY29udHJvbC52YWx1ZSkgPT09IEpTT04uc3RyaW5naWZ5KG5ld0NvbnRyb2xWYWx1ZSkpIHtcclxuICAgICAgICByZXR1cm47XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIC8vIOato+WImeWIpOaWreaYr+WQpuS4uuaXpeacn1xyXG4gICAgICBjb250cm9sLnNldFZhbHVlKG5ld0NvbnRyb2xWYWx1ZSk7XHJcblxyXG4gICAgfSk7XHJcblxyXG4gICAgLy8gY29udHJvbCA9PiBCaW5kaW5nRGF0YVxyXG4gICAgY29udHJvbC52YWx1ZUNoYW5nZXMucGlwZSh0YWtlVW50aWwodGhpcy5kZXN0cm95JCkpLnN1YnNjcmliZSgodmFsdWU6IGFueSkgPT4ge1xyXG4gICAgICBjb25zdCBvbGRCaW5kaW5nVmFsdWUgPSB0aGlzLmJpbmRpbmdEYXRhLmdldFZhbHVlKGJpbmRpbmdQYXRocyk7XHJcbiAgICAgIC8vIOWmguaenOaYr+aXpeacn++8jOavlOi+g+W5tOaciOaXpeaYr+WQpuebuOetie+8jOebuOetieWImeS4jemHjeaWsOi1i+WAvFxyXG4gICAgICBpZiAodmFsdWUgJiYgdmFsdWUuY29uc3RydWN0b3IgJiYgdmFsdWUuY29uc3RydWN0b3IubmFtZSA9PT0gJ0RhdGUnKSB7XHJcbiAgICAgICAgY29uc3QgaXNWYWxpZERhdGUgPSAhaXNOYU4odmFsdWUpO1xyXG4gICAgICAgIGlmICghaXNWYWxpZERhdGUpIHtcclxuICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKG9sZEJpbmRpbmdWYWx1ZSAmJiBjb252ZXJ0ZXIpIHtcclxuICAgICAgICAgIGNvbnN0IG9sZFZhbHVlID0gY29udmVydGVyLmNvbnZlcnRGcm9tKG9sZEJpbmRpbmdWYWx1ZSk7XHJcblxyXG4gICAgICAgICAgaWYgKHRoaXMuY29tcGFyZURhdGUodmFsdWUsIG9sZFZhbHVlKSA9PT0gdHJ1ZSkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcblxyXG4gICAgICAvLyDlpoLmnpzmmK/ml6XmnJ/vvIzmr5TovoPlubTmnIjml6XmmK/lkKbnm7jnrYnvvIznm7jnrYnliJnkuI3ph43mlrDotYvlgLxcclxuICAgICAgaWYgKHRoaXMuaXNEYXRlKGNvbnZlcnRlcikgPT09IHRydWUpIHtcclxuICAgICAgICBpZiAoRGF0ZVV0aWwuaXNFcXVhbCh2YWx1ZSwgb2xkQmluZGluZ1ZhbHVlKSA9PT0gdHJ1ZSkge1xyXG4gICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG5cclxuICAgICAgLy8g5aaC5p6c5ZKMQmluZGluZ0RhdGHkuIrnmoTlgLzlkozmjqfku7bmnIDmlrDnmoTlgLzkuIDmoLfvvIzliJnkuI3lho3mm7TmlrBCaW5kaW5nRGF0YVxyXG4gICAgICBjb25zdCBuZXdCaW5kaW5nVmFsdWUgPSBjb252ZXJ0ZXIgPyBjb252ZXJ0ZXIuY29udmVydFRvKHZhbHVlKSA6IHZhbHVlO1xyXG4gICAgICBpZiAoSlNPTi5zdHJpbmdpZnkob2xkQmluZGluZ1ZhbHVlKSA9PT0gSlNPTi5zdHJpbmdpZnkobmV3QmluZGluZ1ZhbHVlKSkge1xyXG4gICAgICAgIHJldHVybjtcclxuICAgICAgfVxyXG4gICAgICAvLyBpZiAoIXRoaXMuaXNGb3JtVmFsaWQocHJvcGVydHlOYW1lLCBudWxsLCBudWxsLCBmYWxzZSkpIHtcclxuICAgICAgLy8gICBjb25zdCBlcnJvcnMgPSB0aGlzLmNhcmRDb250cm9sc1twcm9wZXJ0eU5hbWVdICYmIHRoaXMuY2FyZENvbnRyb2xzW3Byb3BlcnR5TmFtZV0uZXJyb3JzIHx8IHt9O1xyXG4gICAgICAvLyAgIHRoaXMuYmluZGluZ0RhdGEuc2V0VmFsdWUoYmluZGluZ1BhdGhzLCBuZXdCaW5kaW5nVmFsdWUsIGZhbHNlLCB0cnVlLCBlcnJvcnMpO1xyXG4gICAgICAvLyB9IGVsc2Uge1xyXG4gICAgICB0aGlzLmNsZWFyQmFja0VuZE1lc3NhZ2VzKHByb3BlcnR5TmFtZSk7XHJcbiAgICAgIGNvbnN0IGVtaXRFdmVudFRvVmlldyA9IHRoaXMuZnJhbWVDb250ZXh0LmFwcENvbnRleHQucnVuTW9kZSA9PT0gUnVuTW9kZS5oaWdoU3BlZWQ7XHJcbiAgICAgIHRoaXMuYmluZGluZ0RhdGEuc2V0VmFsdWUoYmluZGluZ1BhdGhzLCBuZXdCaW5kaW5nVmFsdWUsIGVtaXRFdmVudFRvVmlldywgdHJ1ZSwgbnVsbCwgeyBmcmFtZUNvbnRleHQ6IHRoaXMuZnJhbWVDb250ZXh0IH0pO1xyXG4gICAgICAvL31cclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog5Yik5pat5piv5ZCm5piv5pel5pyf5a2X5q61XHJcbiAgICogMeOAgeebruWJjeayoeacieWKnuazleWIpOaWreS4gOS4quWtl+auteaYr+WQpuaYr+aXpeacn++8jOWPquiDveagueaNrkNvbnZlcnRlcuadpeWIpOaWre+8m1xyXG4gICAqIDLjgIFEZXZraXTkuI3og73kvp3otZZLZW5kb0JpbmRpbmfvvIzkuI3og73nm7TmjqXliKTmlq1EYXRlQ29udmVydGVy77ybXHJcbiAgICogM+OAgeS4jeiDveS9v+eUqGNvbnN0cnVjdG9yLm5hbWUs5Y6L57yp5ZCObmFtZeWPmOS6hu+8m1xyXG4gICAqIDTjgIHmmoLml7bmoLnmja5mb3JtYXTlsZ7mgKfmnaXliKTmlq3vvIzkuIDml6blhbbku5ZDb252ZXJ0ZXLmnIlmb3JtYXTvvIzliJnliKTmlq3lpLHmlYjvvIzmmoLml7bmsqHmnInov5nnp43mg4XlhrVcclxuICAgKiBAdG9kb1xyXG4gICAqIOS4uuaXpeacn+Wtl+autea3u+WKoOazqOino++8jOagueaNruazqOino+adpeWIpOaWrVxyXG4gICAqL1xyXG4gIHByaXZhdGUgaXNEYXRlKGNvbnZlcnRlcjogQ29udHJvbFZhbHVlQ29udmVydGVyKTogYm9vbGVhbiB7XHJcbiAgICBsZXQgaXNEYXRlQ29udmVydGVyID0gZmFsc2U7XHJcblxyXG4gICAgLy8gaWYgKGNvbnZlcnRlciAmJiBjb252ZXJ0ZXIuY29uc3RydWN0b3IgJiYgY29udmVydGVyLmNvbnN0cnVjdG9yLm5hbWUgPT09ICdEYXRlQ29udmVydGVyJykge1xyXG4gICAgLy8gICBpc0RhdGVDb252ZXJ0ZXIgPSB0cnVlO1xyXG4gICAgLy8gfVxyXG4gICAgaWYgKGNvbnZlcnRlciAmJiBjb252ZXJ0ZXIuaGFzT3duUHJvcGVydHkoJ2Zvcm1hdCcpID09PSB0cnVlKSB7XHJcbiAgICAgIGlzRGF0ZUNvbnZlcnRlciA9IHRydWU7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gaXNEYXRlQ29udmVydGVyO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog5q+U6L6D5pel5pyf77yI5Y+q5q+U6L6D5bm05pyI5pel77yJXHJcbiAgICovXHJcbiAgY29tcGFyZURhdGUoc3JjRGF0ZTogRGF0ZSwgZHN0RGF0ZTogRGF0ZSkge1xyXG4gICAgaWYgKCFzcmNEYXRlIHx8ICFkc3REYXRlKSB7XHJcbiAgICAgIHJldHVybiBzcmNEYXRlID09PSBkc3REYXRlO1xyXG4gICAgfVxyXG4gICAgY29uc3QgaXNFcXVhbCA9XHJcbiAgICAgIHNyY0RhdGUuZ2V0RnVsbFllYXIoKSA9PT0gZHN0RGF0ZS5nZXRGdWxsWWVhcigpXHJcbiAgICAgICYmIHNyY0RhdGUuZ2V0TW9udGgoKSA9PT0gZHN0RGF0ZS5nZXRNb250aCgpXHJcbiAgICAgICYmIHNyY0RhdGUuZ2V0RGF0ZSgpID09PSBkc3REYXRlLmdldERhdGUoKVxyXG4gICAgICAmJiBzcmNEYXRlLmdldEhvdXJzKCkgPT09IGRzdERhdGUuZ2V0SG91cnMoKVxyXG4gICAgICAmJiBzcmNEYXRlLmdldE1pbnV0ZXMoKSA9PT0gZHN0RGF0ZS5nZXRNaW51dGVzKClcclxuICAgICAgJiYgc3JjRGF0ZS5nZXRTZWNvbmRzKCkgPT09IGRzdERhdGUuZ2V0U2Vjb25kcygpO1xyXG4gICAgcmV0dXJuIGlzRXF1YWw7XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIGdldFByb3BJbmZvQnlQYXRoKHBhdGg6IEFycmF5PHN0cmluZz4pOiBEYXRhUHJvcEluZm8ge1xyXG4gICAgY29uc3QgZW50aXR5VHlwZSA9IHRoaXMuZnJhbWVDb250ZXh0ICYmIHRoaXMuZnJhbWVDb250ZXh0LnJlcG9zaXRvcnkuZW50aXR5VHlwZSB8fCBudWxsO1xyXG4gICAgaWYgKGVudGl0eVR5cGUpIHtcclxuICAgICAgY29uc3QgZGF0YVR5cGVJbmZvID0gbmV3IERhdGFUeXBlSW5mbyhlbnRpdHlUeXBlKTtcclxuICAgICAgY29uc3QgcHJvcEluZm86IERhdGFQcm9wSW5mbyA9IGRhdGFUeXBlSW5mby5nZXRQcm9wSW5mb0J5UGF0aChwYXRoKTtcclxuICAgICAgcmV0dXJuIHByb3BJbmZvO1xyXG4gICAgICAvLyBjb25zdCBpc011bHRpTGFuZ0lucHV0ID0gcHJvcEluZm8ubWV0YWRhdGFJbmZvLmVuYWJsZU11bHRpTGFuZ0lucHV0O1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIG51bGw7XHJcbiAgfVxyXG4gIC8qKlxyXG4gICAqIOS7jkJpbmRpbmdEYXRh5Lit6I635Y+W5oyH5a6a6Lev5b6E55qE5YC8XHJcbiAgICovXHJcbiAgcHJpdmF0ZSBnZXRWYWx1ZUZyb21CaW5kaW5nRGF0YShiaW5kaW5nUGF0aHM6IHN0cmluZ1tdLCBjb252ZXJ0ZXI/OiBDb250cm9sVmFsdWVDb252ZXJ0ZXIpIHtcclxuICAgIGNvbnN0IHZhbHVlID0gdGhpcy5iaW5kaW5nRGF0YS5nZXRWYWx1ZShiaW5kaW5nUGF0aHMpO1xyXG4gICAgY29uc3QgY29udmVydGVyZWRWYWx1ZSA9IGNvbnZlcnRlciA/IGNvbnZlcnRlci5jb252ZXJ0RnJvbSh2YWx1ZSkgOiB2YWx1ZTtcclxuICAgIHJldHVybiBjb252ZXJ0ZXJlZFZhbHVlO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIGdldEVudGl0eVZhbHVlQ2hhbmdpbmdMaXN0ZW5lcnMoKTogeyBbcHJvcGVydHk6IHN0cmluZ106IHN0cmluZyB9IHtcclxuICAgIGNvbnN0IGxpc3RlbmVycyA9IHt9O1xyXG4gICAgT2JqZWN0LmtleXModGhpcy5uZ0Zvcm1Db250cm9scykuZm9yRWFjaCgocHJvcE5hbWUpID0+IHtcclxuICAgICAgY29uc3QgbmdGb3JtQ29udHJvbCA9IHRoaXMubmdGb3JtQ29udHJvbHNbcHJvcE5hbWVdO1xyXG4gICAgICBpZiAobmdGb3JtQ29udHJvbC52YWx1ZUNoYW5naW5nKSB7XHJcbiAgICAgICAgbGlzdGVuZXJzW25nRm9ybUNvbnRyb2wuYmluZGluZ10gPSBuZ0Zvcm1Db250cm9sLnZhbHVlQ2hhbmdpbmc7XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG4gICAgcmV0dXJuIGxpc3RlbmVycztcclxuICB9XHJcblxyXG4gIHB1YmxpYyBnZXRFbnRpdHlWYWx1ZUNoYW5nZWRMaXN0ZW5lcnMoKTogeyBbcHJvcGVydHk6IHN0cmluZ106IHN0cmluZyB9IHtcclxuICAgIGNvbnN0IGxpc3RlbmVycyA9IHt9O1xyXG4gICAgT2JqZWN0LmtleXModGhpcy5uZ0Zvcm1Db250cm9scykuZm9yRWFjaCgocHJvcE5hbWUpID0+IHtcclxuICAgICAgY29uc3QgbmdGb3JtQ29udHJvbCA9IHRoaXMubmdGb3JtQ29udHJvbHNbcHJvcE5hbWVdO1xyXG4gICAgICBpZiAobmdGb3JtQ29udHJvbC52YWx1ZUNoYW5nZWQpIHtcclxuICAgICAgICBsaXN0ZW5lcnNbbmdGb3JtQ29udHJvbC5iaW5kaW5nXSA9IG5nRm9ybUNvbnRyb2wudmFsdWVDaGFuZ2VkO1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuICAgIHJldHVybiBsaXN0ZW5lcnM7XHJcbiAgfVxyXG4gIC8qKlxyXG4gICAqIOiOt+WPluaJgOacieeahOWJjeerr+mqjOivgeinhOWImVxyXG4gICAqIEBkZXNjcmlwdGlvblxyXG4gICAqIOi/lOWbnueahOagoemqjOinhOWImeS4uk1hcDxzdHJpbmcsVmFsaWRhdGVSdWxlPizlhbbkuK1rZXnkuLrlhajot6/lvoTvvIzku45iaW5kaW5nUGF0aOW8gOWni+WIsOWunuS9k+WxnuaAp++8jOS7pS/liIbpmpRcclxuICAgKi9cclxuICBwdWJsaWMgZ2V0VmFsaWRhdGlvblJ1bGVzKCk6IE1hcDxzdHJpbmcsIFZhbGlkYXRlUnVsZVtdPiB7XHJcbiAgICBjb25zdCB2YWxpZGF0b2luUnVsZXMgPSBuZXcgTWFwPHN0cmluZywgVmFsaWRhdGVSdWxlW10+KCk7XHJcbiAgICBsZXQgcGFyZW50UGF0aCA9IHRoaXMuYmluZGluZ1BhdGg7XHJcbiAgICBpZiAocGFyZW50UGF0aC5sZW5ndGggJiYgcGFyZW50UGF0aCA9PT0gJy8nKSB7XHJcbiAgICAgIHBhcmVudFBhdGggPSAnJztcclxuICAgIH1cclxuICAgIE9iamVjdC5rZXlzKHRoaXMubmdGb3JtQ29udHJvbHMpLmZvckVhY2goKHByb3BOYW1lOiBzdHJpbmcpID0+IHtcclxuICAgICAgLy8gY29uc3QgZmllbGROYW1lID0gYCR7cGFyZW50UGF0aH0vJHtwcm9wTmFtZX1gO1xyXG5cclxuICAgICAgaWYgKHRoaXMuaXNTaG93UHJvcE1hcFtwcm9wTmFtZV0gPT09IHRydWUgfHwgT2JqZWN0LmtleXModGhpcy5pc1Nob3dQcm9wTWFwKS5sZW5ndGggPT09IDApIHtcclxuICAgICAgICBjb25zdCBuZ0Zvcm1Db250cm9sID0gdGhpcy5uZ0Zvcm1Db250cm9sc1twcm9wTmFtZV07XHJcbiAgICAgICAgY29uc3QgZGlzcGxheUZpZWxkTmFtZSA9IG5nRm9ybUNvbnRyb2wubmFtZSB8fCBuZ0Zvcm1Db250cm9sLmRlZmF1bHRJMThuVmFsdWUgfHwgJyc7XHJcbiAgICAgICAgY29uc3QgYmluZGluZ1BhdGhBcnJheSA9IG5nRm9ybUNvbnRyb2wuYmluZGluZyA/IG5nRm9ybUNvbnRyb2wuYmluZGluZy5zcGxpdCgnLicpIDogW3Byb3BOYW1lXTtcclxuICAgICAgICBjb25zdCBmaWVsZE5hbWVBcnJheSA9IFtwYXJlbnRQYXRoLCAuLi5iaW5kaW5nUGF0aEFycmF5XTtcclxuICAgICAgICBjb25zdCBmaWVsZE5hbWUgPSBmaWVsZE5hbWVBcnJheS5qb2luKCcvJyk7XHJcbiAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkobmdGb3JtQ29udHJvbC52YWxpZFJ1bGVzKSAmJiBuZ0Zvcm1Db250cm9sLnZhbGlkUnVsZXMubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgbGV0IHZhbGlkYXRpb25ydWxlc1RvQWRkID0gWy4uLm5nRm9ybUNvbnRyb2wudmFsaWRSdWxlc107XHJcbiAgICAgICAgICAvLyBpZiAodGhpcy5leGNsdWRlUnVsZVR5cGVzICYmIHRoaXMuZXhjbHVkZVJ1bGVUeXBlc1twcm9wTmFtZV0gJiYgdGhpcy5leGNsdWRlUnVsZVR5cGVzW3Byb3BOYW1lXS5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAvLyAgIHZhbGlkYXRpb25ydWxlc1RvQWRkID0gbmdGb3JtQ29udHJvbC52YWxpZFJ1bGVzLmZpbHRlcigoaXRlbSkgPT4gIXRoaXMuZXhjbHVkZVJ1bGVUeXBlc1twcm9wTmFtZV0uaW5jbHVkZXMoaXRlbS50eXBlKSk7XHJcbiAgICAgICAgICAvLyB9XHJcbiAgICAgICAgICB2YWxpZGF0aW9ucnVsZXNUb0FkZC5mb3JFYWNoKCh2YWxpZGF0aW9uUnVsZTogVmFsaWRhdGVSdWxlKSA9PiB7XHJcbiAgICAgICAgICAgIHZhbGlkYXRpb25SdWxlLnRhcmdldElkID0gbmdGb3JtQ29udHJvbC5pZDtcclxuICAgICAgICAgICAgdmFsaWRhdGlvblJ1bGUudGFyZ2V0TmFtZSA9IHRoaXMuZm9ybUdyb3VwTmFtZTtcclxuICAgICAgICAgICAgdmFsaWRhdGlvblJ1bGUucHJvcGVydHkgPSBkaXNwbGF5RmllbGROYW1lO1xyXG4gICAgICAgICAgICB2YWxpZGF0aW9uUnVsZS5maWVsZCA9IG5nRm9ybUNvbnRyb2wuYmluZGluZztcclxuICAgICAgICAgICAgdmFsaWRhdGlvblJ1bGUuZnVsbFBhdGggPSBmaWVsZE5hbWU7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLmZyYW1lQ29udGV4dCkge1xyXG4gICAgICAgICAgICAgIHZhbGlkYXRpb25SdWxlLmZyYW1lQ29udGV4dCA9IHRoaXMuZnJhbWVDb250ZXh0O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICB9KTtcclxuICAgICAgICAgIHZhbGlkYXRvaW5SdWxlcy5zZXQoZmllbGROYW1lLCB2YWxpZGF0aW9ucnVsZXNUb0FkZCk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIHZhbGlkYXRvaW5SdWxlcy5zZXQoZmllbGROYW1lLCBbe1xyXG4gICAgICAgICAgICB0eXBlOiAnc2V0RGlzcGxheUluZm8nLFxyXG4gICAgICAgICAgICB0YXJnZXRJZDogbmdGb3JtQ29udHJvbC5pZCxcclxuICAgICAgICAgICAgdGFyZ2V0TmFtZTogdGhpcy5mb3JtR3JvdXBOYW1lLFxyXG4gICAgICAgICAgICBwcm9wZXJ0eTogZGlzcGxheUZpZWxkTmFtZSxcclxuICAgICAgICAgICAgZnVsbFBhdGg6IGZpZWxkTmFtZSxcclxuICAgICAgICAgICAgZnJhbWVDb250ZXh0OiB0aGlzLmZyYW1lQ29udGV4dFxyXG4gICAgICAgICAgfV0pO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfSk7XHJcbiAgICByZXR1cm4gdmFsaWRhdG9pblJ1bGVzO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIHNldFRyYW5zbGF0ZVNlcnZpY2UodHJhbnNsYXRlU2VydmljZTogVHJhbnNsYXRlKSB7XHJcbiAgICBpZiAoIXRyYW5zbGF0ZVNlcnZpY2UpIHtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG4gICAgdGhpcy50cmFuc2xhdGUgPSB0cmFuc2xhdGVTZXJ2aWNlO1xyXG4gICAgVmFsaWRhdGlvblR5cGVzLnNldEN1cnJlbnRMYW5ndWFnZSh0cmFuc2xhdGVTZXJ2aWNlLmdldEN1cnJlbnRMYW5ndWFnZSgpKTtcclxuICB9XHJcbiAgLyoqXHJcbiAgICog6YeN572u5o6n5Lu254q25oCBXHJcbiAgICovXHJcbiAgcHJpdmF0ZSByZXNldEZvcm1Db250cm9scygpIHtcclxuICAgIGlmIChPYmplY3Qua2V5cyh0aGlzLmNvbnRyb2xzKS5sZW5ndGggPiAwKSB7XHJcbiAgICAgIE9iamVjdC5rZXlzKHRoaXMuY29udHJvbHMpLmZvckVhY2goKHByb3ApID0+IHtcclxuICAgICAgICBjb25zdCBmb3JtQ29udHJvbDogQWJzdHJhY3RDb250cm9sID0gdGhpcy5jb250cm9sc1twcm9wXTtcclxuICAgICAgICBmb3JtQ29udHJvbC5tYXJrQXNVbnRvdWNoZWQoKTtcclxuICAgICAgICBmb3JtQ29udHJvbC5tYXJrQXNQcmlzdGluZSgpO1xyXG4gICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgfVxyXG4gIHByaXZhdGUgY2xlYXJCYWNrRW5kTWVzc2FnZXMoZG9tUHJvcGVydHlOYW1lOiBzdHJpbmcpIHtcclxuICAgIGlmIChkb21Qcm9wZXJ0eU5hbWUpIHtcclxuICAgICAgaWYgKHRoaXMuY2FyZENvbnRyb2xzW2RvbVByb3BlcnR5TmFtZV0gJiYgdGhpcy5jYXJkQ29udHJvbHNbZG9tUHJvcGVydHlOYW1lXVsnZXJyb3JzJ10gJiYgISFPYmplY3Qua2V5cyh0aGlzLmNhcmRDb250cm9sc1tkb21Qcm9wZXJ0eU5hbWVdWydlcnJvcnMnXSkuZmluZChpdGVtID0+IGl0ZW0uc3RhcnRzV2l0aCgnbWVzc2FnZS0nKSkpIHtcclxuICAgICAgICBjb25zdCBtZXNzYWdlS2V5cyA9IE9iamVjdC5rZXlzKHRoaXMuY2FyZENvbnRyb2xzW2RvbVByb3BlcnR5TmFtZV1bJ2Vycm9ycyddKS5maWx0ZXIoaXRlbSA9PiBpdGVtLnN0YXJ0c1dpdGgoJ21lc3NhZ2UtJykpO1xyXG4gICAgICAgIGNvbnN0IGVycm9ycyA9IHsgLi4udGhpcy5jYXJkQ29udHJvbHNbZG9tUHJvcGVydHlOYW1lXVsnZXJyb3JzJ10gfTtcclxuICAgICAgICBtZXNzYWdlS2V5cy5mb3JFYWNoKGtleSA9PiBkZWxldGUgZXJyb3JzW2tleV0pO1xyXG4gICAgICAgIHRoaXMuY2FyZENvbnRyb2xzW2RvbVByb3BlcnR5TmFtZV0gPSB7IGVycm9yczogZXJyb3JzIH07XHJcbiAgICAgIH1cclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIE9iamVjdC5rZXlzKHRoaXMuY2FyZENvbnRyb2xzKS5mb3JFYWNoKHByb3BlcnR5TmFtZSA9PiB7XHJcbiAgICAgICAgaWYgKHRoaXMuY2FyZENvbnRyb2xzW3Byb3BlcnR5TmFtZV0gJiYgdGhpcy5jYXJkQ29udHJvbHNbcHJvcGVydHlOYW1lXVsnZXJyb3JzJ10gJiYgISFPYmplY3Qua2V5cyh0aGlzLmNhcmRDb250cm9sc1twcm9wZXJ0eU5hbWVdWydlcnJvcnMnXSkuZmluZChpdGVtID0+IGl0ZW0uc3RhcnRzV2l0aCgnbWVzc2FnZS0nKSkpIHtcclxuICAgICAgICAgIGNvbnN0IG1lc3NhZ2VLZXlzID0gT2JqZWN0LmtleXModGhpcy5jYXJkQ29udHJvbHNbcHJvcGVydHlOYW1lXVsnZXJyb3JzJ10pLmZpbHRlcihpdGVtID0+IGl0ZW0uc3RhcnRzV2l0aCgnbWVzc2FnZS0nKSk7XHJcbiAgICAgICAgICBjb25zdCBlcnJvcnMgPSB7IC4uLnRoaXMuY2FyZENvbnRyb2xzW3Byb3BlcnR5TmFtZV1bJ2Vycm9ycyddIH07XHJcbiAgICAgICAgICBtZXNzYWdlS2V5cy5mb3JFYWNoKGtleSA9PiBkZWxldGUgZXJyb3JzW2tleV0pO1xyXG4gICAgICAgICAgdGhpcy5jYXJkQ29udHJvbHNbcHJvcGVydHlOYW1lXSA9IHsgZXJyb3JzOiBlcnJvcnMgfTtcclxuICAgICAgICB9XHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG4gIH1cclxufVxyXG5cclxuZXhwb3J0IHsgRm9ybSB9O1xyXG4iXX0=