/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { of } from 'rxjs';
import { debounceTime, switchMap } from 'rxjs/operators';
import { LookupLeftComponent } from '../lookup-left.component';
var LookupComponentManager = /** @class */ (function () {
    function LookupComponentManager(ins) {
        this.ins = ins;
    }
    /**
     * @param {?=} type
     * @return {?}
     */
    LookupComponentManager.prototype.getComponentInstance = /**
     * @param {?=} type
     * @return {?}
     */
    function (type) {
        if (type === void 0) { type = 'datatable'; }
        if (!this.ins.componentRef || !this.ins.componentRef.instance) {
            return null;
        }
        if (type === 'selected') {
            return this.ins.multiSelectDT;
        }
        /** @type {?} */
        var ins = this.ins.componentRef.instance;
        if (type === 'leftDataTable' || type === 'leftTree') {
            /** @type {?} */
            var leftRef = this.ins.leftComponentRef;
            if (!leftRef || !leftRef.instance || !leftRef.instance.cmpRef || !leftRef.instance.cmpRef.instance) {
                return null;
            }
            ins = this.ins.leftComponentRef.instance.cmpRef.instance;
        }
        if (type === 'fav') {
            ins = this.ins.favoritesComponentRef.instance;
        }
        switch (type) {
            case 'leftDataTable':
            case 'fav':
            case 'datatable':
                return (/** @type {?} */ (ins));
            case 'leftTree':
            case 'treetable':
                return (/** @type {?} */ (ins));
            default:
                if (this.ins.isTree()) {
                    return (/** @type {?} */ (ins));
                }
                return (/** @type {?} */ (ins));
        }
    };
    /**
     * @param {?} data
     * @return {?}
     */
    LookupComponentManager.prototype.createComponentWithServerData = /**
     * @param {?} data
     * @return {?}
     */
    function (data) {
        if (this.ins.componentRef) {
            return;
        }
        this.ins.idField = data.idField || this.ins.idField;
        this.ins.textField = data.textField || this.ins.textField;
        this.ins.valueField = data.valueField || this.ins.valueField;
        this.ins.displayType = (data && data.displayType) || this.ins.displayType || 'LIST';
        this.ins.componentRef = this.createContent(this.ins.gridOptions);
        this.createFavoriteComponent();
        this.resizeComponent();
    };
    /**
     * @return {?}
     */
    LookupComponentManager.prototype.createFavoriteComponent = /**
     * @return {?}
     */
    function () {
        if (this.ins.useFavorite && !this.ins.favoritesComponentRef) {
            this.ins.favoriteColumns = this.ins.favHelper.getFavoriteColumns();
            /** @type {?} */
            var favoritesOptions = Object.assign({}, this.ins.gridOptions, {
                showFilterBar: false,
                pagination: false,
                columns: this.ins.favoriteColumns || []
            });
            this.ins.favoritesComponentRef = this.createFavoritesContent(favoritesOptions);
            this.resizeComponent('fav');
        }
    };
    /**
     * @private
     * @param {?} expandLevel
     * @return {?}
     */
    LookupComponentManager.prototype.reloadTreeDataForExpand = /**
     * @private
     * @param {?} expandLevel
     * @return {?}
     */
    function (expandLevel) {
        var _this = this;
        /** @type {?} */
        var uri = this.ins.gridOptions.uri;
        /** @type {?} */
        var tt = (/** @type {?} */ (this.ins.componentRef.instance));
        var _a = tslib_1.__assign({}, tt.searchData), _b = _a.field, field = _b === void 0 ? '*' : _b, _c = _a.value, value = _c === void 0 ? '' : _c;
        /** @type {?} */
        var search = { category: 'all', searchValue: value, searchField: field, layerNum: expandLevel };
        /** @type {?} */
        var param = {
            searchValue: JSON.stringify(search),
            customData: this.ins.customData,
            enableFullTree: this.ins.enableFullTree,
            loadTreeDataType: this.ins.loadTreeDataType
        };
        if (this.ins.helpId) {
            param['helpId'] = this.ins.helpId;
        }
        if (tt && tt.sortName) {
            Object.assign(param, {
                sortName: tt.sortName,
                sortOrder: tt.sortOrder
            });
        }
        this.ins.showLoading();
        return this.ins.http.getData(uri, param).subscribe((/**
         * @param {?} data
         * @return {?}
         */
        function (data) {
            _this.ins.closeLoading();
            /** @type {?} */
            var nodes = _this.ins.checkNodeCanBeSelect(data.items, expandLevel === -1);
            _this.ins.items = nodes;
            tt.loadData(nodes);
        }));
    };
    /**
     * @private
     * @param {?} nodes
     * @param {?} level
     * @return {?}
     */
    LookupComponentManager.prototype.setTreeNodeExpandBy = /**
     * @private
     * @param {?} nodes
     * @param {?} level
     * @return {?}
     */
    function (nodes, level) {
        var _this = this;
        if (!nodes || !nodes.length) {
            return;
        }
        nodes.forEach((/**
         * @param {?} n
         * @return {?}
         */
        function (n) {
            /** @type {?} */
            var layer = n.data[_this.ins.treeInfo.dataField].layer;
            /** @type {?} */
            var expandLayer = layer + level - 1;
            n.expanded = layer <= expandLayer ? true : n.expanded;
            if (n.children && n.children.length && layer + 1 <= expandLayer) {
                _this.setTreeNodeExpandBy(n.children, level);
            }
        }));
    };
    // 启用树帮助右键菜单功能
    // 启用树帮助右键菜单功能
    /**
     * @private
     * @param {?} cmpRef
     * @return {?}
     */
    LookupComponentManager.prototype.useContextMenuForTree = 
    // 启用树帮助右键菜单功能
    /**
     * @private
     * @param {?} cmpRef
     * @return {?}
     */
    function (cmpRef) {
        var _this = this;
        var _a = this.ins.treeTableOptions, maxLevel = _a.maxLevel, enableContextMenu = _a.enableContextMenu, language = _a.language;
        if (enableContextMenu && maxLevel) {
            /** @type {?} */
            var levelMenus = [];
            for (var i = 1; i <= maxLevel; i++) {
                /** @type {?} */
                var title = language['expand' + i];
                levelMenus.push({ id: 30 + 1, code: i, title: title, handle: (/**
                     * @param {?} t
                     * @return {?}
                     */
                    function (t) {
                        // 发送请求获取数据
                        /** @type {?} */
                        var level = t.menu.code;
                        if (isLoadAllTreeData_1()) {
                            _this.setTreeNodeExpandBy(_this.ins.items, level);
                            cmpRef.instance.updateSerializedValue();
                        }
                        else {
                            var _a = _this.ins.treeInfo, dataField = _a.dataField, layerField = _a.layerField;
                            /** @type {?} */
                            var firstNodeData = (_this.ins.items || [])[0];
                            if (firstNodeData && firstNodeData.data) {
                                /** @type {?} */
                                var minLayer = _this.ins.utils.getValue(dataField + "." + layerField, firstNodeData.data);
                                /** @type {?} */
                                var _level = minLayer + level - 1;
                                _this.reloadTreeDataForExpand(_level);
                            }
                        }
                    }) });
            }
            /** @type {?} */
            var isLoadAllTreeData_1 = (/**
             * @return {?}
             */
            function () {
                if (_this.ins.loadTreeDataType === 'default') {
                    return cmpRef.instance.loadDataType === 'all';
                }
                else {
                    return _this.ins.loadTreeDataType === 'loadall';
                }
            });
            /** @type {?} */
            var contextMenus = [
                {
                    id: 1, code: 'expandall', title: language.expandall, handle: (/**
                     * @param {?} t
                     * @return {?}
                     */
                    function (t) {
                        if (cmpRef && isLoadAllTreeData_1()) {
                            cmpRef.instance.expandAll();
                        }
                        else {
                            // 发送请求获取数据
                            _this.reloadTreeDataForExpand(-1);
                        }
                    })
                },
                { id: 2, code: 'collapseall', title: language.collapseall, handle: (/**
                     * @param {?} t
                     * @return {?}
                     */
                    function (t) {
                        if (cmpRef) {
                            cmpRef.instance.collapseAll();
                        }
                    }) },
                '-',
                {
                    id: 3, title: language.expandByLayer,
                    children: levelMenus
                }
            ];
            this.ins.treeTableOptions.contextMenuItems = contextMenus;
            cmpRef.instance.beforeShowContextMenu = (/**
             * @return {?}
             */
            function () {
                return of({ show: !cmpRef.instance.state.searched });
            });
        }
    };
    /**
     * @param {?} opts
     * @return {?}
     */
    LookupComponentManager.prototype.createContent = /**
     * @param {?} opts
     * @return {?}
     */
    function (opts) {
        if (this.ins.componentRef) {
            return;
        }
        /** @type {?} */
        var type = this.ins.getComponentType();
        /** @type {?} */
        var dtFac = this.ins.cfr.resolveComponentFactory(type);
        /** @type {?} */
        var cmpRef = null;
        if (this.ins.isDoublleList()) {
            cmpRef = this.ins.centerContainer.createComponent(dtFac);
        }
        else {
            cmpRef = this.ins.contentContainer.createComponent(dtFac);
        }
        if (this.ins.isTree()) {
            opts.fit = true;
            opts.pagination = false;
            if (this.ins.useFavorite) {
                opts.fitColumns = false;
                opts.autoFitColumns = true;
            }
            this.useContextMenuForTree(cmpRef);
        }
        else {
            opts.fill = true;
        }
        /** @type {?} */
        var ttOpts = this.ins.treeTableOptions || {};
        Object.assign(cmpRef.instance, opts, tslib_1.__assign({ allColumnsTitle: this.ins.allColumnsTitle }, ttOpts));
        this.ins.componentRef = cmpRef;
        this.resizeComponent();
        return cmpRef;
    };
    // 创建收藏CMP
    // 创建收藏CMP
    /**
     * @param {?} opts
     * @return {?}
     */
    LookupComponentManager.prototype.createFavoritesContent = 
    // 创建收藏CMP
    /**
     * @param {?} opts
     * @return {?}
     */
    function (opts) {
        /** @type {?} */
        var type = this.ins.getComponentType();
        /** @type {?} */
        var dtFac = this.ins.cfr.resolveComponentFactory(type);
        /** @type {?} */
        var cmpRef = null;
        cmpRef = this.ins.favoritesContainer.createComponent(dtFac);
        if (this.ins.isTree()) {
            opts.fit = true;
            opts.pagination = false;
        }
        else {
            opts.fill = true;
        }
        Object.assign(cmpRef.instance, opts, {
            width: this.ins.dialog.size.width - 20,
            height: this.ins.dialogMgr.getHeight()
        });
        // 订阅收藏夹列表中组件的相关事件
        this.ins.favHelper.initFavoriteComponentEvent(cmpRef);
        return cmpRef;
    };
    /**
     * @param {?=} type
     * @return {?}
     */
    LookupComponentManager.prototype.resizeComponent = /**
     * @param {?=} type
     * @return {?}
     */
    function (type) {
        if (type === void 0) { type = 'datatable'; }
        /** @type {?} */
        var size = {
            width: this.ins.dialog.size.width - 20,
            height: this.ins.dialogMgr.getHeight()
        };
        if (this.ins.isDoublleList() && (type === 'datatable' || type === 'treetable')) {
            size.width = this.ins.dialog.size.width - this.ins.leftPanelWidth - 27;
        }
        this.getComponentInstance(type).resize(size);
    };
    /** 创建左侧组件 */
    /**
     * 创建左侧组件
     * @param {?} ops
     * @return {?}
     */
    LookupComponentManager.prototype.createLeftComponent = /**
     * 创建左侧组件
     * @param {?} ops
     * @return {?}
     */
    function (ops) {
        var _this = this;
        /** @type {?} */
        var dtFac = null;
        if (this.ins.isDoublleList()) {
            dtFac = this.ins.cfr.resolveComponentFactory(LookupLeftComponent);
        }
        this.ins.leftComponentRef = this.ins.leftContainer.createComponent(dtFac);
        ops.height = this.ins.dialogMgr.getHeight();
        if (this.ins.dialogWidth < this.ins.navLookupDialogMinWidth) {
            this.ins.dialogWidth = this.ins.navLookupDialogMinWidth;
            this.ins.dialog.reSize({ width: this.ins.dialogWidth });
            this.ins.resizeCmp({ width: this.ins.dialog.size.width });
        }
        if (ops.width !== this.ins.leftPanel.width) {
            // 默认 1 : 2
            this.ins.leftPanel.resize({
                width: this.ins.leftPanel.width,
                height: ops.height
            });
            this.ins.resizeCmp({ width: this.ins.dialog.size.width });
        }
        // this.resizeComponent();
        this.ins.leftComponentRef.instance.lookupCmp = this.ins;
        this.ins.leftComponentRef.instance.navOptions = ops;
        this.ins.leftComponentRef.instance.selected
            .pipe(debounceTime(100), switchMap((/**
         * @param {?} d
         * @return {?}
         */
        function (d) {
            if (d && d.data) {
                _this.ins.navigationFilter = {
                    selected: d.data,
                    idValue: _this.getNavigationFilter(d.data),
                    searchField: '',
                    searchValue: ''
                };
            }
            else {
                _this.ins.navigationFilter = undefined;
            }
            // 加载右侧数据
            /** @type {?} */
            var p = {
                pageInfo: {
                    pageIndex: _this.ins.gridOptions.pageIndex,
                    pageSize: _this.ins.gridOptions.pageSize
                }
            };
            Object.assign(p, { search: _this.ins._searchState });
            return _this.ins.httpMgr.getData(p, 'list');
        })))
            .subscribe((/**
         * @param {?} res
         * @return {?}
         */
        function (res) {
            _this.ins.closeLoading();
            _this.ins.loadDataWhenOpen = true;
            if (_this.ins.useFavorite && !_this.ins.isTree()) {
                _this.ins.favHelper.updateFavoritesStatus(res.items);
            }
            _this.ins.loadDataTableData(res);
            setTimeout((/**
             * @return {?}
             */
            function () {
                // 选中数据
                _this.ins.selectionMgr.selectCurrentValue();
                _this.ins.changeDetector.detectChanges();
            }));
        }));
        return this.ins.leftComponentRef.instance.createComponent();
    };
    // 获取关联数据, 右侧数据中 关联各字段的值
    // 获取关联数据, 右侧数据中 关联各字段的值
    /**
     * @private
     * @param {?} navRow
     * @return {?}
     */
    LookupComponentManager.prototype.getNavigationFilter = 
    // 获取关联数据, 右侧数据中 关联各字段的值
    /**
     * @private
     * @param {?} navRow
     * @return {?}
     */
    function (navRow) {
        if (this.ins.navigationOptions.relations && this.ins.navigationOptions.relations.length) {
            /** @type {?} */
            var result_1 = [];
            this.ins.navigationOptions.relations.forEach((/**
             * @param {?} r
             * @return {?}
             */
            function (r) {
                /** @type {?} */
                var k = r.groupField;
                /** @type {?} */
                var dField = r.helpField;
                /** @type {?} */
                var rf = { fieldName: dField, fieldValue: '' };
                rf.fieldValue = k.split('.').reduce((/**
                 * @param {?} o
                 * @param {?} c
                 * @return {?}
                 */
                function (o, c) {
                    return o[c];
                }), navRow);
                result_1.push(rf);
            }));
            return result_1;
        }
        return '';
    };
    return LookupComponentManager;
}());
export { LookupComponentManager };
if (false) {
    /**
     * @type {?}
     * @private
     */
    LookupComponentManager.prototype.ins;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9va3VwLWNvbXBvbmVudC5tYW5hZ2VyLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGZhcnJpcy91aS1sb29rdXAvIiwic291cmNlcyI6WyJsaWIvc2VydmljZXMvbG9va3VwLWNvbXBvbmVudC5tYW5hZ2VyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBR0EsT0FBTyxFQUFFLEVBQUUsRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUMxQixPQUFPLEVBQUUsWUFBWSxFQUFFLFNBQVMsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBR3pELE9BQU8sRUFBRSxtQkFBbUIsRUFBRSxNQUFNLDBCQUEwQixDQUFDO0FBRy9EO0lBQ0ksZ0NBQW9CLEdBQXdCO1FBQXhCLFFBQUcsR0FBSCxHQUFHLENBQXFCO0lBQUcsQ0FBQzs7Ozs7SUFFaEQscURBQW9COzs7O0lBQXBCLFVBQXFCLElBQXlDO1FBQXpDLHFCQUFBLEVBQUEsa0JBQXlDO1FBQzFELElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLFlBQVksSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsWUFBWSxDQUFDLFFBQVEsRUFBRTtZQUMzRCxPQUFPLElBQUksQ0FBQztTQUNmO1FBRUQsSUFBSSxJQUFJLEtBQUssVUFBVSxFQUFFO1lBQ3JCLE9BQU8sSUFBSSxDQUFDLEdBQUcsQ0FBQyxhQUFhLENBQUM7U0FDakM7O1lBRUcsR0FBRyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsWUFBWSxDQUFDLFFBQVE7UUFFeEMsSUFBSSxJQUFJLEtBQUssZUFBZSxJQUFJLElBQUksS0FBSyxVQUFVLEVBQUU7O2dCQUMzQyxPQUFPLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxnQkFBZ0I7WUFDekMsSUFBSSxDQUFDLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxRQUFRLElBQUksQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLE1BQU0sSUFBSSxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLFFBQVEs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QUMsRUFBRSxDQUFDO29CQUNyQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztnQkFDaEIsQ0FBQyxHQUFFLE1BQU0sQ0FBQyxDQUFDO2dCQUVYLFFBQU0sQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUM7WUFDcEIsQ0FBQyxFQUFDLENBQUM7WUFDSCxPQUFPLFFBQU0sQ0FBQztTQUNqQjtRQUVELE9BQU8sRUFBRSxDQUFDO0lBQ2QsQ0FBQztJQUNMLDZCQUFDO0FBQUQsQ0FBQyxBQXhXRCxJQXdXQzs7Ozs7OztJQXZXZSxxQ0FBZ0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnRSZWYgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgRGF0YVRhYmxlQ29tcG9uZW50IH0gZnJvbSAnQGZhcnJpcy91aS1kYXRhdGFibGUnO1xyXG5pbXBvcnQgeyBUcmVlTm9kZSwgVHJlZVRhYmxlQ29tcG9uZW50IH0gZnJvbSAnQGZhcnJpcy91aS10cmVldGFibGUnO1xyXG5pbXBvcnQgeyBvZiB9IGZyb20gJ3J4anMnO1xyXG5pbXBvcnQgeyBkZWJvdW5jZVRpbWUsIHN3aXRjaE1hcCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcclxuaW1wb3J0IHsgQ29tcG9uZW50SW5zdGFuY2VUeXBlIH0gZnJvbSAnLi4vbG9va3VwLWRpc3BsYXl0eXBlJztcclxuaW1wb3J0IHsgTG9va3VwR3JpZENvbXBvbmVudCB9IGZyb20gJy4uL2xvb2t1cC1ncmlkLmNvbXBvbmVudCc7XHJcbmltcG9ydCB7IExvb2t1cExlZnRDb21wb25lbnQgfSBmcm9tICcuLi9sb29rdXAtbGVmdC5jb21wb25lbnQnO1xyXG5cclxuXHJcbmV4cG9ydCBjbGFzcyBMb29rdXBDb21wb25lbnRNYW5hZ2VyIHtcclxuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgaW5zOiBMb29rdXBHcmlkQ29tcG9uZW50KSB7fVxyXG5cclxuICAgIGdldENvbXBvbmVudEluc3RhbmNlKHR5cGU6IENvbXBvbmVudEluc3RhbmNlVHlwZSA9ICdkYXRhdGFibGUnKSB7XHJcbiAgICAgICAgaWYgKCF0aGlzLmlucy5jb21wb25lbnRSZWYgfHwgIXRoaXMuaW5zLmNvbXBvbmVudFJlZi5pbnN0YW5jZSkge1xyXG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICh0eXBlID09PSAnc2VsZWN0ZWQnKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmlucy5tdWx0aVNlbGVjdERUO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgbGV0IGlucyA9IHRoaXMuaW5zLmNvbXBvbmVudFJlZi5pbnN0YW5jZTtcclxuXHJcbiAgICAgICAgaWYgKHR5cGUgPT09ICdsZWZ0RGF0YVRhYmxlJyB8fCB0eXBlID09PSAnbGVmdFRyZWUnKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGxlZnRSZWYgPSB0aGlzLmlucy5sZWZ0Q29tcG9uZW50UmVmO1xyXG4gICAgICAgICAgICBpZiAoIWxlZnRSZWYgfHwgIWxlZnRSZWYuaW5zdGFuY2UgfHwgIWxlZnRSZWYuaW5zdGFuY2UuY21wUmVmIHx8ICFsZWZ0UmVmLmluc3RhbmNlLmNtcFJlZi5pbnN0YW5jZSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaW5zID0gdGhpcy5pbnMubGVmdENvbXBvbmVudFJlZi5pbnN0YW5jZS5jbXBSZWYuaW5zdGFuY2U7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAodHlwZSA9PT0gJ2ZhdicpIHtcclxuICAgICAgICAgICAgaW5zID0gdGhpcy5pbnMuZmF2b3JpdGVzQ29tcG9uZW50UmVmLmluc3RhbmNlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgc3dpdGNoICh0eXBlKSB7XHJcbiAgICAgICAgICAgIGNhc2UgJ2xlZnREYXRhVGFibGUnOlxyXG4gICAgICAgICAgICBjYXNlICdmYXYnOlxyXG4gICAgICAgICAgICBjYXNlICdkYXRhdGFibGUnOlxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGlucyBhcyBEYXRhVGFibGVDb21wb25lbnQ7XHJcbiAgICAgICAgICAgIGNhc2UgJ2xlZnRUcmVlJzpcclxuICAgICAgICAgICAgY2FzZSAndHJlZXRhYmxlJzpcclxuICAgICAgICAgICAgICAgIHJldHVybiBpbnMgYXMgVHJlZVRhYmxlQ29tcG9uZW50O1xyXG4gICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuaW5zLmlzVHJlZSgpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGlucyBhcyBUcmVlVGFibGVDb21wb25lbnQ7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gaW5zIGFzIERhdGFUYWJsZUNvbXBvbmVudDtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgY3JlYXRlQ29tcG9uZW50V2l0aFNlcnZlckRhdGEoZGF0YTogYW55KSB7XHJcbiAgICAgICAgaWYgKHRoaXMuaW5zLmNvbXBvbmVudFJlZikge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuaW5zLmlkRmllbGQgPSBkYXRhLmlkRmllbGQgfHwgdGhpcy5pbnMuaWRGaWVsZDtcclxuICAgICAgICB0aGlzLmlucy50ZXh0RmllbGQgPSBkYXRhLnRleHRGaWVsZCB8fCB0aGlzLmlucy50ZXh0RmllbGQ7XHJcbiAgICAgICAgdGhpcy5pbnMudmFsdWVGaWVsZCA9IGRhdGEudmFsdWVGaWVsZCB8fCB0aGlzLmlucy52YWx1ZUZpZWxkO1xyXG5cclxuICAgICAgICB0aGlzLmlucy5kaXNwbGF5VHlwZSA9IChkYXRhICYmIGRhdGEuZGlzcGxheVR5cGUpIHx8IHRoaXMuaW5zLmRpc3BsYXlUeXBlIHx8ICdMSVNUJztcclxuICAgICAgICB0aGlzLmlucy5jb21wb25lbnRSZWYgPSB0aGlzLmNyZWF0ZUNvbnRlbnQodGhpcy5pbnMuZ3JpZE9wdGlvbnMpO1xyXG4gICAgICAgIHRoaXMuY3JlYXRlRmF2b3JpdGVDb21wb25lbnQoKTtcclxuXHJcbiAgICAgICAgdGhpcy5yZXNpemVDb21wb25lbnQoKTtcclxuICAgIH1cclxuXHJcblxyXG4gICAgY3JlYXRlRmF2b3JpdGVDb21wb25lbnQoKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuaW5zLnVzZUZhdm9yaXRlICYmICF0aGlzLmlucy5mYXZvcml0ZXNDb21wb25lbnRSZWYpIHtcclxuICAgICAgICAgICAgdGhpcy5pbnMuZmF2b3JpdGVDb2x1bW5zID0gdGhpcy5pbnMuZmF2SGVscGVyLmdldEZhdm9yaXRlQ29sdW1ucygpO1xyXG4gICAgICAgICAgICBjb25zdCBmYXZvcml0ZXNPcHRpb25zID0gT2JqZWN0LmFzc2lnbih7fSwgdGhpcy5pbnMuZ3JpZE9wdGlvbnMsIHtcclxuICAgICAgICAgICAgICAgIHNob3dGaWx0ZXJCYXI6IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgcGFnaW5hdGlvbjogZmFsc2UsXHJcbiAgICAgICAgICAgICAgICBjb2x1bW5zOiB0aGlzLmlucy5mYXZvcml0ZUNvbHVtbnMgfHwgW11cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIHRoaXMuaW5zLmZhdm9yaXRlc0NvbXBvbmVudFJlZiA9IHRoaXMuY3JlYXRlRmF2b3JpdGVzQ29udGVudChmYXZvcml0ZXNPcHRpb25zKTtcclxuXHJcbiAgICAgICAgICAgIHRoaXMucmVzaXplQ29tcG9uZW50KCdmYXYnKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG5cclxuICAgIHByaXZhdGUgcmVsb2FkVHJlZURhdGFGb3JFeHBhbmQoZXhwYW5kTGV2ZWwpIHtcclxuICAgICAgICBjb25zdCB1cmkgPSB0aGlzLmlucy5ncmlkT3B0aW9ucy51cmk7XHJcbiAgICAgICAgY29uc3QgdHQgPSB0aGlzLmlucy5jb21wb25lbnRSZWYuaW5zdGFuY2UgYXMgVHJlZVRhYmxlQ29tcG9uZW50O1xyXG4gICAgICAgIGNvbnN0IHsgZmllbGQgPSAnKicsIHZhbHVlID0gJycgfSA9IHtcclxuICAgICAgICAgICAgLi4udHQuc2VhcmNoRGF0YVxyXG4gICAgICAgIH07XHJcbiAgICAgICAgY29uc3Qgc2VhcmNoID0geyBjYXRlZ29yeTogJ2FsbCcsIHNlYXJjaFZhbHVlOiB2YWx1ZSwgc2VhcmNoRmllbGQ6IGZpZWxkLCBsYXllck51bTogZXhwYW5kTGV2ZWwgfTtcclxuXHJcblxyXG4gICAgICAgIGNvbnN0IHBhcmFtID0ge1xyXG4gICAgICAgICAgICBzZWFyY2hWYWx1ZTogSlNPTi5zdHJpbmdpZnkoc2VhcmNoKSxcclxuICAgICAgICAgICAgY3VzdG9tRGF0YTogdGhpcy5pbnMuY3VzdG9tRGF0YSxcclxuICAgICAgICAgICAgZW5hYmxlRnVsbFRyZWU6IHRoaXMuaW5zLmVuYWJsZUZ1bGxUcmVlLFxyXG4gICAgICAgICAgICBsb2FkVHJlZURhdGFUeXBlOiB0aGlzLmlucy5sb2FkVHJlZURhdGFUeXBlXHJcbiAgICAgICAgfTtcclxuXHJcblxyXG4gICAgICAgIGlmICh0aGlzLmlucy5oZWxwSWQpIHtcclxuICAgICAgICAgICAgcGFyYW1bJ2hlbHBJZCddID0gdGhpcy5pbnMuaGVscElkO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKHR0ICYmIHR0LnNvcnROYW1lKSB7XHJcbiAgICAgICAgICAgIE9iamVjdC5hc3NpZ24ocGFyYW0sIHtcclxuICAgICAgICAgICAgICAgIHNvcnROYW1lOiB0dC5zb3J0TmFtZSxcclxuICAgICAgICAgICAgICAgIHNvcnRPcmRlcjogdHQuc29ydE9yZGVyXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLmlucy5zaG93TG9hZGluZygpO1xyXG4gICAgICAgIHJldHVybiB0aGlzLmlucy5odHRwLmdldERhdGEodXJpLCBwYXJhbSkuc3Vic2NyaWJlKChkYXRhOiBhbnkpID0+IHtcclxuICAgICAgICAgICAgdGhpcy5pbnMuY2xvc2VMb2FkaW5nKCk7XHJcbiAgICAgICAgICAgIGNvbnN0IG5vZGVzID0gdGhpcy5pbnMuY2hlY2tOb2RlQ2FuQmVTZWxlY3QoZGF0YS5pdGVtcywgZXhwYW5kTGV2ZWwgPT09IC0xKTtcclxuICAgICAgICAgICAgdGhpcy5pbnMuaXRlbXMgPSBub2RlcztcclxuICAgICAgICAgICAgdHQubG9hZERhdGEobm9kZXMpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgc2V0VHJlZU5vZGVFeHBhbmRCeShub2RlczogVHJlZU5vZGVbXSwgbGV2ZWwpIHtcclxuICAgICAgICBpZiAoIW5vZGVzIHx8ICFub2Rlcy5sZW5ndGgpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICBub2Rlcy5mb3JFYWNoKChuOiBUcmVlTm9kZSkgPT4ge1xyXG4gICAgICAgICAgICBjb25zdCBsYXllciA9IG4uZGF0YVt0aGlzLmlucy50cmVlSW5mby5kYXRhRmllbGRdLmxheWVyO1xyXG5cclxuICAgICAgICAgICAgY29uc3QgZXhwYW5kTGF5ZXIgPSBsYXllciArIGxldmVsIC0gMTtcclxuXHJcbiAgICAgICAgICAgIG4uZXhwYW5kZWQgPSBsYXllciA8PSBleHBhbmRMYXllciA/IHRydWUgOiBuLmV4cGFuZGVkO1xyXG4gICAgICAgICAgICBpZiAobi5jaGlsZHJlbiAmJiBuLmNoaWxkcmVuLmxlbmd0aCAmJiBsYXllciArIDEgPD0gZXhwYW5kTGF5ZXIpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuc2V0VHJlZU5vZGVFeHBhbmRCeShuLmNoaWxkcmVuLCBsZXZlbCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICAvLyDlkK/nlKjmoJHluK7liqnlj7PplK7oj5zljZXlip/og71cclxuICAgIHByaXZhdGUgdXNlQ29udGV4dE1lbnVGb3JUcmVlKGNtcFJlZjogQ29tcG9uZW50UmVmPGFueT4pIHtcclxuICAgICAgICBjb25zdCB7IG1heExldmVsLCBlbmFibGVDb250ZXh0TWVudSwgbGFuZ3VhZ2UgfSA9IHRoaXMuaW5zLnRyZWVUYWJsZU9wdGlvbnM7XHJcbiAgICAgICAgaWYgKGVuYWJsZUNvbnRleHRNZW51ICYmIG1heExldmVsKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGxldmVsTWVudXMgPSBbXTtcclxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDE7IGkgPD0gbWF4TGV2ZWw7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgdGl0bGUgPSBsYW5ndWFnZVsnZXhwYW5kJyArIGldO1xyXG4gICAgICAgICAgICAgICAgbGV2ZWxNZW51cy5wdXNoKHsgaWQ6IDMwICsgMSwgY29kZTogaSwgdGl0bGUsIGhhbmRsZTogKHQpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAvLyDlj5HpgIHor7fmsYLojrflj5bmlbDmja5cclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBsZXZlbCA9IHQubWVudS5jb2RlO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChpc0xvYWRBbGxUcmVlRGF0YSgpICkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnNldFRyZWVOb2RlRXhwYW5kQnkodGhpcy5pbnMuaXRlbXMsIGxldmVsKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY21wUmVmLmluc3RhbmNlLnVwZGF0ZVNlcmlhbGl6ZWRWYWx1ZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHsgZGF0YUZpZWxkLCBsYXllckZpZWxkIH0gPSB0aGlzLmlucy50cmVlSW5mbztcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgZmlyc3ROb2RlRGF0YSA9ICh0aGlzLmlucy5pdGVtcyB8fCBbXSlbMF07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChmaXJzdE5vZGVEYXRhICYmIGZpcnN0Tm9kZURhdGEuZGF0YSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgbWluTGF5ZXIgPSB0aGlzLmlucy51dGlscy5nZXRWYWx1ZShgJHtkYXRhRmllbGR9LiR7bGF5ZXJGaWVsZH1gLCBmaXJzdE5vZGVEYXRhLmRhdGEpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IF9sZXZlbCA9IG1pbkxheWVyICsgbGV2ZWwgLSAxO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5yZWxvYWRUcmVlRGF0YUZvckV4cGFuZChfbGV2ZWwpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSB9KTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgY29uc3QgaXNMb2FkQWxsVHJlZURhdGEgPSAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5pbnMubG9hZFRyZWVEYXRhVHlwZSA9PT0gJ2RlZmF1bHQnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGNtcFJlZi5pbnN0YW5jZS5sb2FkRGF0YVR5cGUgPT09ICdhbGwnO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5pbnMubG9hZFRyZWVEYXRhVHlwZSA9PT0gJ2xvYWRhbGwnO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgY29uc3QgY29udGV4dE1lbnVzID0gW1xyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIGlkOiAxLCBjb2RlOiAnZXhwYW5kYWxsJywgdGl0bGU6IGxhbmd1YWdlLmV4cGFuZGFsbCwgaGFuZGxlOiAodCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoY21wUmVmICYmIGlzTG9hZEFsbFRyZWVEYXRhKCkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNtcFJlZi5pbnN0YW5jZS5leHBhbmRBbGwoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIOWPkemAgeivt+axguiOt+WPluaVsOaNrlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5yZWxvYWRUcmVlRGF0YUZvckV4cGFuZCgtMSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgeyBpZDogMiwgY29kZTogJ2NvbGxhcHNlYWxsJywgdGl0bGU6IGxhbmd1YWdlLmNvbGxhcHNlYWxsLCBoYW5kbGU6ICh0KSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGNtcFJlZikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjbXBSZWYuaW5zdGFuY2UuY29sbGFwc2VBbGwoKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9IH0sXHJcbiAgICAgICAgICAgICAgICAnLScsXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWQ6IDMsIHRpdGxlOiBsYW5ndWFnZS5leHBhbmRCeUxheWVyLFxyXG4gICAgICAgICAgICAgICAgICAgIGNoaWxkcmVuOiBsZXZlbE1lbnVzXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIF07XHJcbiAgICAgICAgICAgIHRoaXMuaW5zLnRyZWVUYWJsZU9wdGlvbnMuY29udGV4dE1lbnVJdGVtcyA9IGNvbnRleHRNZW51cztcclxuXHJcbiAgICAgICAgICAgIGNtcFJlZi5pbnN0YW5jZS5iZWZvcmVTaG93Q29udGV4dE1lbnUgPSAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gb2Yoe3Nob3c6ICFjbXBSZWYuaW5zdGFuY2Uuc3RhdGUuc2VhcmNoZWR9KTtcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG5cclxuICAgIGNyZWF0ZUNvbnRlbnQob3B0czogYW55KTogQ29tcG9uZW50UmVmPGFueT4ge1xyXG5cclxuICAgICAgICBpZiAodGhpcy5pbnMuY29tcG9uZW50UmVmKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNvbnN0IHR5cGUgPSB0aGlzLmlucy5nZXRDb21wb25lbnRUeXBlKCk7XHJcblxyXG4gICAgICAgIGNvbnN0IGR0RmFjID0gdGhpcy5pbnMuY2ZyLnJlc29sdmVDb21wb25lbnRGYWN0b3J5KHR5cGUpO1xyXG4gICAgICAgIGxldCBjbXBSZWY6IENvbXBvbmVudFJlZjxhbnk+ID0gbnVsbDtcclxuICAgICAgICBpZiAodGhpcy5pbnMuaXNEb3VibGxlTGlzdCgpKSB7XHJcbiAgICAgICAgICAgIGNtcFJlZiA9IHRoaXMuaW5zLmNlbnRlckNvbnRhaW5lci5jcmVhdGVDb21wb25lbnQoZHRGYWMpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGNtcFJlZiA9IHRoaXMuaW5zLmNvbnRlbnRDb250YWluZXIuY3JlYXRlQ29tcG9uZW50KGR0RmFjKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICh0aGlzLmlucy5pc1RyZWUoKSkge1xyXG4gICAgICAgICAgICBvcHRzLmZpdCA9IHRydWU7XHJcbiAgICAgICAgICAgIG9wdHMucGFnaW5hdGlvbiA9IGZhbHNlO1xyXG4gICAgICAgICAgICBpZiAodGhpcy5pbnMudXNlRmF2b3JpdGUpIHtcclxuICAgICAgICAgICAgICAgIG9wdHMuZml0Q29sdW1ucyA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgb3B0cy5hdXRvRml0Q29sdW1ucyA9IHRydWU7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHRoaXMudXNlQ29udGV4dE1lbnVGb3JUcmVlKGNtcFJlZik7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgb3B0cy5maWxsID0gdHJ1ZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNvbnN0IHR0T3B0cyA9IHRoaXMuaW5zLnRyZWVUYWJsZU9wdGlvbnMgfHwge307XHJcbiAgICAgICAgT2JqZWN0LmFzc2lnbihjbXBSZWYuaW5zdGFuY2UsIG9wdHMsIHsgYWxsQ29sdW1uc1RpdGxlOiB0aGlzLmlucy5hbGxDb2x1bW5zVGl0bGUsIC4uLnR0T3B0cyB9KTtcclxuXHJcbiAgICAgICAgdGhpcy5pbnMuY29tcG9uZW50UmVmID0gY21wUmVmO1xyXG4gICAgICAgIHRoaXMucmVzaXplQ29tcG9uZW50KCk7XHJcbiAgICAgICAgcmV0dXJuIGNtcFJlZjtcclxuICAgIH1cclxuXHJcbiAgICAvLyDliJvlu7rmlLbol49DTVBcclxuICAgIGNyZWF0ZUZhdm9yaXRlc0NvbnRlbnQob3B0czogYW55KTogQ29tcG9uZW50UmVmPGFueT4ge1xyXG5cclxuICAgICAgICBjb25zdCB0eXBlID0gdGhpcy5pbnMuZ2V0Q29tcG9uZW50VHlwZSgpO1xyXG5cclxuICAgICAgICBjb25zdCBkdEZhYyA9IHRoaXMuaW5zLmNmci5yZXNvbHZlQ29tcG9uZW50RmFjdG9yeSh0eXBlKTtcclxuICAgICAgICBsZXQgY21wUmVmID0gbnVsbDtcclxuICAgICAgICBjbXBSZWYgPSB0aGlzLmlucy5mYXZvcml0ZXNDb250YWluZXIuY3JlYXRlQ29tcG9uZW50KGR0RmFjKTtcclxuXHJcbiAgICAgICAgaWYgKHRoaXMuaW5zLmlzVHJlZSgpKSB7XHJcbiAgICAgICAgICAgIG9wdHMuZml0ID0gdHJ1ZTtcclxuICAgICAgICAgICAgb3B0cy5wYWdpbmF0aW9uID0gZmFsc2U7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgb3B0cy5maWxsID0gdHJ1ZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIE9iamVjdC5hc3NpZ24oY21wUmVmLmluc3RhbmNlLCBvcHRzLCB7XHJcbiAgICAgICAgICAgIHdpZHRoOiB0aGlzLmlucy5kaWFsb2cuc2l6ZS53aWR0aCAtIDIwLFxyXG4gICAgICAgICAgICBoZWlnaHQ6IHRoaXMuaW5zLmRpYWxvZ01nci5nZXRIZWlnaHQoKVxyXG4gICAgICAgIH0pO1xyXG5cclxuXHJcbiAgICAgICAgLy8g6K6i6ZiF5pS26JeP5aS55YiX6KGo5Lit57uE5Lu255qE55u45YWz5LqL5Lu2XHJcbiAgICAgICAgdGhpcy5pbnMuZmF2SGVscGVyLmluaXRGYXZvcml0ZUNvbXBvbmVudEV2ZW50KGNtcFJlZik7XHJcblxyXG4gICAgICAgIHJldHVybiBjbXBSZWY7XHJcbiAgICB9XHJcblxyXG4gICAgcmVzaXplQ29tcG9uZW50KHR5cGU6IENvbXBvbmVudEluc3RhbmNlVHlwZSA9ICdkYXRhdGFibGUnKSB7XHJcbiAgICAgICAgY29uc3Qgc2l6ZSA9IHtcclxuICAgICAgICAgICAgd2lkdGg6IHRoaXMuaW5zLmRpYWxvZy5zaXplLndpZHRoIC0gMjAsXHJcbiAgICAgICAgICAgIGhlaWdodDogdGhpcy5pbnMuZGlhbG9nTWdyLmdldEhlaWdodCgpXHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgaWYgKHRoaXMuaW5zLmlzRG91YmxsZUxpc3QoKSAmJiAodHlwZSA9PT0gJ2RhdGF0YWJsZScgfHwgdHlwZSA9PT0gJ3RyZWV0YWJsZScpKSB7XHJcbiAgICAgICAgICAgIHNpemUud2lkdGggPSB0aGlzLmlucy5kaWFsb2cuc2l6ZS53aWR0aCAtIHRoaXMuaW5zLmxlZnRQYW5lbFdpZHRoIC0gMjc7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLmdldENvbXBvbmVudEluc3RhbmNlKHR5cGUpLnJlc2l6ZShzaXplKTtcclxuICAgIH1cclxuXHJcbiAgICAvKiog5Yib5bu65bem5L6n57uE5Lu2ICovXHJcbiAgICBjcmVhdGVMZWZ0Q29tcG9uZW50KG9wczogYW55KSB7XHJcbiAgICAgICAgbGV0IGR0RmFjID0gbnVsbDtcclxuICAgICAgICBpZiAodGhpcy5pbnMuaXNEb3VibGxlTGlzdCgpKSB7XHJcbiAgICAgICAgICAgIGR0RmFjID0gdGhpcy5pbnMuY2ZyLnJlc29sdmVDb21wb25lbnRGYWN0b3J5KExvb2t1cExlZnRDb21wb25lbnQpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLmlucy5sZWZ0Q29tcG9uZW50UmVmID0gdGhpcy5pbnMubGVmdENvbnRhaW5lci5jcmVhdGVDb21wb25lbnQoZHRGYWMpO1xyXG4gICAgICAgIG9wcy5oZWlnaHQgPSB0aGlzLmlucy5kaWFsb2dNZ3IuZ2V0SGVpZ2h0KCk7XHJcblxyXG4gICAgICAgIGlmICh0aGlzLmlucy5kaWFsb2dXaWR0aCA8IHRoaXMuaW5zLm5hdkxvb2t1cERpYWxvZ01pbldpZHRoKSB7XHJcbiAgICAgICAgICAgIHRoaXMuaW5zLmRpYWxvZ1dpZHRoID0gdGhpcy5pbnMubmF2TG9va3VwRGlhbG9nTWluV2lkdGg7XHJcbiAgICAgICAgICAgIHRoaXMuaW5zLmRpYWxvZy5yZVNpemUoeyB3aWR0aDogdGhpcy5pbnMuZGlhbG9nV2lkdGggfSk7XHJcbiAgICAgICAgICAgIHRoaXMuaW5zLnJlc2l6ZUNtcCh7IHdpZHRoOiB0aGlzLmlucy5kaWFsb2cuc2l6ZS53aWR0aCB9KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChvcHMud2lkdGggIT09IHRoaXMuaW5zLmxlZnRQYW5lbC53aWR0aCkge1xyXG4gICAgICAgICAgICAvLyDpu5jorqQgMSA6IDJcclxuICAgICAgICAgICAgdGhpcy5pbnMubGVmdFBhbmVsLnJlc2l6ZSh7XHJcbiAgICAgICAgICAgICAgICB3aWR0aDogdGhpcy5pbnMubGVmdFBhbmVsLndpZHRoLFxyXG4gICAgICAgICAgICAgICAgaGVpZ2h0OiBvcHMuaGVpZ2h0XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB0aGlzLmlucy5yZXNpemVDbXAoeyB3aWR0aDogdGhpcy5pbnMuZGlhbG9nLnNpemUud2lkdGggfSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyB0aGlzLnJlc2l6ZUNvbXBvbmVudCgpO1xyXG5cclxuICAgICAgICB0aGlzLmlucy5sZWZ0Q29tcG9uZW50UmVmLmluc3RhbmNlLmxvb2t1cENtcCA9IHRoaXMuaW5zO1xyXG4gICAgICAgIHRoaXMuaW5zLmxlZnRDb21wb25lbnRSZWYuaW5zdGFuY2UubmF2T3B0aW9ucyA9IG9wcztcclxuXHJcblxyXG4gICAgICAgIHRoaXMuaW5zLmxlZnRDb21wb25lbnRSZWYuaW5zdGFuY2Uuc2VsZWN0ZWRcclxuICAgICAgICAgICAgLnBpcGUoXHJcbiAgICAgICAgICAgICAgICBkZWJvdW5jZVRpbWUoMTAwKSxcclxuICAgICAgICAgICAgICAgIHN3aXRjaE1hcCgoZDogYW55KSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGQgJiYgZC5kYXRhKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuaW5zLm5hdmlnYXRpb25GaWx0ZXIgPSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxlY3RlZDogZC5kYXRhLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWRWYWx1ZTogdGhpcy5nZXROYXZpZ2F0aW9uRmlsdGVyKGQuZGF0YSksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWFyY2hGaWVsZDogJycsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWFyY2hWYWx1ZTogJydcclxuICAgICAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmlucy5uYXZpZ2F0aW9uRmlsdGVyID0gdW5kZWZpbmVkO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAvLyDliqDovb3lj7PkvqfmlbDmja5cclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBwID0ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBwYWdlSW5mbzoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFnZUluZGV4OiB0aGlzLmlucy5ncmlkT3B0aW9ucy5wYWdlSW5kZXgsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYWdlU2l6ZTogdGhpcy5pbnMuZ3JpZE9wdGlvbnMucGFnZVNpemVcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAgICAgT2JqZWN0LmFzc2lnbihwLCB7IHNlYXJjaDogdGhpcy5pbnMuX3NlYXJjaFN0YXRlIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmlucy5odHRwTWdyLmdldERhdGEocCwgJ2xpc3QnKTtcclxuICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgIClcclxuICAgICAgICAgICAgLnN1YnNjcmliZShyZXMgPT4ge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5pbnMuY2xvc2VMb2FkaW5nKCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmlucy5sb2FkRGF0YVdoZW5PcGVuID0gdHJ1ZTtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5pbnMudXNlRmF2b3JpdGUgJiYgIXRoaXMuaW5zLmlzVHJlZSgpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5pbnMuZmF2SGVscGVyLnVwZGF0ZUZhdm9yaXRlc1N0YXR1cyhyZXMuaXRlbXMpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIHRoaXMuaW5zLmxvYWREYXRhVGFibGVEYXRhKHJlcyk7XHJcbiAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAvLyDpgInkuK3mlbDmja5cclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmlucy5zZWxlY3Rpb25NZ3Iuc2VsZWN0Q3VycmVudFZhbHVlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5pbnMuY2hhbmdlRGV0ZWN0b3IuZGV0ZWN0Q2hhbmdlcygpO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICByZXR1cm4gdGhpcy5pbnMubGVmdENvbXBvbmVudFJlZi5pbnN0YW5jZS5jcmVhdGVDb21wb25lbnQoKTtcclxuICAgIH1cclxuXHJcbiAgICAvLyDojrflj5blhbPogZTmlbDmja4sIOWPs+S+p+aVsOaNruS4rSDlhbPogZTlkITlrZfmrrXnmoTlgLxcclxuICAgIHByaXZhdGUgZ2V0TmF2aWdhdGlvbkZpbHRlcihuYXZSb3c6IGFueSkge1xyXG4gICAgICAgIGlmICh0aGlzLmlucy5uYXZpZ2F0aW9uT3B0aW9ucy5yZWxhdGlvbnMgJiYgdGhpcy5pbnMubmF2aWdhdGlvbk9wdGlvbnMucmVsYXRpb25zLmxlbmd0aCkge1xyXG4gICAgICAgICAgICBjb25zdCByZXN1bHQgPSBbXTtcclxuICAgICAgICAgICAgdGhpcy5pbnMubmF2aWdhdGlvbk9wdGlvbnMucmVsYXRpb25zLmZvckVhY2gociA9PiB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBrID0gci5ncm91cEZpZWxkO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgZEZpZWxkID0gci5oZWxwRmllbGQ7XHJcbiAgICAgICAgICAgICAgICBjb25zdCByZiA9IHsgZmllbGROYW1lOiBkRmllbGQsIGZpZWxkVmFsdWU6ICcnIH07XHJcbiAgICAgICAgICAgICAgICByZi5maWVsZFZhbHVlID0gay5zcGxpdCgnLicpLnJlZHVjZSgobywgYykgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBvW2NdO1xyXG4gICAgICAgICAgICAgICAgfSwgbmF2Um93KTtcclxuXHJcbiAgICAgICAgICAgICAgICByZXN1bHQucHVzaChyZik7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuICcnO1xyXG4gICAgfVxyXG59XHJcbiJdfQ==