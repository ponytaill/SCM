import { BehaviorSubject } from 'rxjs';
import { MetadataUtil } from '../core/index';
import { State, initialUIState } from './types';
import { STATE_PROP_META, RENDER_STATE_PROP_META, ACTION_METHOD_META } from './decorators';
import { StateMachineContext } from './state_machine_context';
import { StateMachineWatcher } from './state_machine_watcher';
/**
 * 状态机
 */
var StateMachine = /** @class */ (function () {
    /**
     * 构造函数
     */
    function StateMachine() {
        this.renderStates = {};
        this.handlePropMetadatas();
        this.stateChange = new BehaviorSubject(false);
        this.context = new StateMachineContext(this, this.initialState);
        this.stateMachineWatcher = new StateMachineWatcher(this);
    }
    /**
     * 初始化状态机
     * @param viewModelContext ViewModel上下文
     * @summary
     * 状态机变更，为了在绑定数据之后执行状态机的操作，把render方法延后执行。
     */
    StateMachine.prototype.init = function (viewModelContext) {
        this.viewModelContext = viewModelContext;
        this.context.init(this.viewModelContext);
        this.stateMachineWatcher.init(this.viewModelContext);
        this.render();
    };
    /**
     * 批量处理属性元数据
     */
    StateMachine.prototype.handlePropMetadatas = function () {
        var _this = this;
        var propsMetadatas = MetadataUtil.getPropsMetadatas(this.constructor);
        // 遍历所有属性装饰器，并调用相应的build方法
        if (propsMetadatas) {
            Object.keys(propsMetadatas).forEach(function (propName) {
                var propMetadatas = propsMetadatas[propName];
                propMetadatas.forEach(function (propMetadata) {
                    _this.handlePropMetadata(propName, propMetadata);
                });
            });
        }
        if (!this.initialState) {
            throw new Error('请在StatePropMeta注解中指定状态机的初始状态。');
        }
    };
    /**
     * 处理属性元数据
     */
    StateMachine.prototype.handlePropMetadata = function (propName, propMetadata) {
        var ngMetadataName = propMetadata.ngMetadataName;
        switch (ngMetadataName) {
            case STATE_PROP_META:
                this.buildState(propName, propMetadata);
                break;
            case RENDER_STATE_PROP_META:
                this.buildRenderState(propName, propMetadata);
                break;
            case ACTION_METHOD_META:
                this.buildAction(propName, propMetadata);
                break;
            default:
                break;
        }
    };
    /**
     * 包装State
     * @param stateName 状态名称
     * @param ngState   状态对象
     */
    StateMachine.prototype.buildState = function (stateName, ngState) {
        this.states = this.states || {};
        this[stateName] = new State(stateName);
        this.states[stateName] = this[stateName];
        if (ngState.initialState) {
            this.initialState = this[stateName];
        }
    };
    /**
     * 包装RenderState
     * @param renderStateName 渲染状态名称
     * @param ngRenderState   渲染状态元数据
     */
    StateMachine.prototype.buildRenderState = function (renderStateName, ngRenderState) {
        this.renderStates = this.renderStates || {};
        this[renderStateName] = initialUIState;
        this.renderStates[renderStateName] = this[renderStateName];
        // 将renderState上指定的render加入到renders中
        this.renders = this.renders || {};
        this.renders[renderStateName] = ngRenderState.render;
    };
    /**
     * 包装Action
     * @param actionName 动作名称
     * @param ngAction 动作元数据
     */
    StateMachine.prototype.buildAction = function (actionName, ngAction) {
        var _this = this;
        this[actionName] = function () {
            var nextStateName = ngAction.transitTo;
            var nextState = _this.states[nextStateName];
            _this.context.transitTo(nextState.name);
            _this.render();
        };
    };
    /**
     * 重新计算所有渲染状态的值
     * @sumamry
     * 当 state切换的时候，调用遍历所有的render方法，更改renderState
     */
    StateMachine.prototype.render = function () {
        for (var renderStateName in this.renderStates) {
            if (this.renderStates.hasOwnProperty(renderStateName) === false) {
                continue;
            }
            // 执行RenderState的render方法，更新renderState
            var stateRender = this.renders[renderStateName];
            if (!stateRender) {
                continue;
            }
            this.renderStates[renderStateName] = stateRender(this.context);
            this[renderStateName] = this.renderStates[renderStateName];
        }
        this.stateChange.next(this.context.state);
    };
    return StateMachine;
}());
export { StateMachine };
//# sourceMappingURL=data:application/json;base64,