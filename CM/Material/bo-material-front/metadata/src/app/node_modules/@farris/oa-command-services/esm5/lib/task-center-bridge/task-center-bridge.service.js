/**
 * @fileoverview added by tsickle
 * Generated from: lib/task-center-bridge/task-center-bridge.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { WFActionType } from './entity';
import * as i0 from "@angular/core";
var TaskCenterBridgeService = /** @class */ (function () {
    function TaskCenterBridgeService() {
    }
    /**
     * @param {?} customerCmds
     * @return {?}
     */
    TaskCenterBridgeService.prototype.initTaskCenterBridge = /**
     * @param {?} customerCmds
     * @return {?}
     */
    function (customerCmds) {
        var _this = this;
        /** @type {?} */
        var bridgeWin = window.parent;
        /** @type {?} */
        var frameContext;
        try {
            frameContext = this['context'].frameContext;
        }
        catch (error) {
            throw new Error('can not find frameContex');
        }
        /** @type {?} */
        var slienceSaveTask;
        try {
            slienceSaveTask = this['context'].frameContext.viewModel.slienceSave1;
        }
        catch (error) {
            // 不存在静音保存命令
        }
        if (bridgeWin) {
            bridgeWin['taskCenterBeforeLoad'] = (/**
             * @param {?} actionObj
             * @return {?}
             */
            function (actionObj) {
                return new Promise((/**
                 * @param {?} resolve
                 * @param {?} reject
                 * @return {?}
                 */
                function (resolve, reject) {
                    var action = actionObj.action;
                    if (frameContext.uiState['UIStateInProcess'] == 'Approving' && frameContext.uiState['formConfigId']) {
                        slienceSaveTask.call(_this).subscribe((/**
                         * @return {?}
                         */
                        function () {
                            resolve({
                                result: true
                            });
                        }), (/**
                         * @return {?}
                         */
                        function () {
                            window.document.body.click();
                            resolve({
                                result: false
                            });
                        }));
                    }
                    else if (action.code == WFActionType.Resubmit && slienceSaveTask) {
                        slienceSaveTask.call(_this).subscribe((/**
                         * @return {?}
                         */
                        function () {
                            resolve({
                                result: true
                            });
                        }));
                    }
                    else {
                        resolve({
                            result: true
                        });
                    }
                }));
            });
        }
    };
    TaskCenterBridgeService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */
    TaskCenterBridgeService.ctorParameters = function () { return []; };
    /** @nocollapse */ TaskCenterBridgeService.ngInjectableDef = i0.defineInjectable({ factory: function TaskCenterBridgeService_Factory() { return new TaskCenterBridgeService(); }, token: TaskCenterBridgeService, providedIn: "root" });
    return TaskCenterBridgeService;
}());
export { TaskCenterBridgeService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGFzay1jZW50ZXItYnJpZGdlLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZmFycmlzL29hLWNvbW1hbmQtc2VydmljZXMvIiwic291cmNlcyI6WyJsaWIvdGFzay1jZW50ZXItYnJpZGdlL3Rhc2stY2VudGVyLWJyaWRnZS5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUUzQyxPQUFPLEVBQVksWUFBWSxFQUFVLE1BQU0sVUFBVSxDQUFDOztBQUcxRDtJQUtFO0lBQWdCLENBQUM7Ozs7O0lBRVYsc0RBQW9COzs7O0lBQTNCLFVBQTRCLFlBQWdCO1FBQTVDLGlCQWtEQzs7WUFqRE8sU0FBUyxHQUFHLE1BQU0sQ0FBQyxNQUFNOztZQUMzQixZQUEwQjtRQUM5QixJQUFJO1lBQ0YsWUFBWSxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQyxZQUFZLENBQUE7U0FDNUM7UUFBQyxPQUFPLEtBQUssRUFBRTtZQUNkLE1BQU0sSUFBSSxLQUFLLENBQUMsMEJBQTBCLENBQUMsQ0FBQztTQUM3Qzs7WUFFRyxlQUFlO1FBRW5CLElBQUk7WUFDRixlQUFlLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDLFlBQVksQ0FBQyxTQUFTLENBQUMsWUFBWSxDQUFDO1NBQ3ZFO1FBQUMsT0FBTyxLQUFLLEVBQUU7WUFDZCxZQUFZO1NBQ2I7UUFDRCxJQUFJLFNBQVMsRUFBRTtZQUNiLFNBQVMsQ0FBQyxzQkFBc0IsQ0FBQzs7OztZQUFHLFVBQ2xDLFNBR0M7Z0JBRUQsT0FBTyxJQUFJLE9BQU87Ozs7O2dCQUFDLFVBQUMsT0FBTyxFQUFFLE1BQU07b0JBQ3pCLElBQUEseUJBQU07b0JBQ2QsSUFBSSxZQUFZLENBQUMsT0FBTyxDQUFDLGtCQUFrQixDQUFDLElBQUksV0FBVyxJQUFJLFlBQVksQ0FBQyxPQUFPLENBQUMsY0FBYyxDQUFDLEVBQUU7d0JBQ25HLGVBQWUsQ0FBQyxJQUFJLENBQUMsS0FBSSxDQUFDLENBQUMsU0FBUzs7O3dCQUFDOzRCQUNuQyxPQUFPLENBQUM7Z0NBQ04sTUFBTSxFQUFFLElBQUk7NkJBQ2IsQ0FBQyxDQUFDO3dCQUNMLENBQUM7Ozt3QkFBRTs0QkFDRCxNQUFNLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQTs0QkFDNUIsT0FBTyxDQUFDO2dDQUNOLE1BQU0sRUFBRSxLQUFLOzZCQUNkLENBQUMsQ0FBQzt3QkFDTCxDQUFDLEVBQUMsQ0FBQTtxQkFDSDt5QkFBTSxJQUFJLE1BQU0sQ0FBQyxJQUFJLElBQUksWUFBWSxDQUFDLFFBQVEsSUFBSSxlQUFlLEVBQUU7d0JBQ2xFLGVBQWUsQ0FBQyxJQUFJLENBQUMsS0FBSSxDQUFDLENBQUMsU0FBUzs7O3dCQUFDOzRCQUNuQyxPQUFPLENBQUM7Z0NBQ04sTUFBTSxFQUFFLElBQUk7NkJBQ2IsQ0FBQyxDQUFDO3dCQUNMLENBQUMsRUFBQyxDQUFBO3FCQUNIO3lCQUFNO3dCQUNMLE9BQU8sQ0FBQzs0QkFDTixNQUFNLEVBQUUsSUFBSTt5QkFDYixDQUFDLENBQUM7cUJBQ0o7Z0JBQ0gsQ0FBQyxFQUFDLENBQUE7WUFDSixDQUFDLENBQUEsQ0FBQTtTQUNGO0lBQ0gsQ0FBQzs7Z0JBekRGLFVBQVUsU0FBQztvQkFDVixVQUFVLEVBQUUsTUFBTTtpQkFDbkI7Ozs7O2tDQVBEO0NBK0RDLEFBMURELElBMERDO1NBdkRZLHVCQUF1QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgRnJhbWVDb250ZXh0IH0gZnJvbSAnQGZhcnJpcy9kZXZraXQnO1xyXG5pbXBvcnQgeyBXRkFjdGlvbiwgV0ZBY3Rpb25UeXBlLCBXRlRhc2sgfSBmcm9tICcuL2VudGl0eSc7XHJcblxyXG5cclxuQEluamVjdGFibGUoe1xyXG4gIHByb3ZpZGVkSW46ICdyb290J1xyXG59KVxyXG5leHBvcnQgY2xhc3MgVGFza0NlbnRlckJyaWRnZVNlcnZpY2Uge1xyXG5cclxuICBjb25zdHJ1Y3RvcigpIHsgfVxyXG5cclxuICBwdWJsaWMgaW5pdFRhc2tDZW50ZXJCcmlkZ2UoY3VzdG9tZXJDbWRzOiB7fSkge1xyXG4gICAgY29uc3QgYnJpZGdlV2luID0gd2luZG93LnBhcmVudDtcclxuICAgIGxldCBmcmFtZUNvbnRleHQ6IEZyYW1lQ29udGV4dDtcclxuICAgIHRyeSB7XHJcbiAgICAgIGZyYW1lQ29udGV4dCA9IHRoaXNbJ2NvbnRleHQnXS5mcmFtZUNvbnRleHRcclxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgIHRocm93IG5ldyBFcnJvcignY2FuIG5vdCBmaW5kIGZyYW1lQ29udGV4Jyk7XHJcbiAgICB9XHJcblxyXG4gICAgbGV0IHNsaWVuY2VTYXZlVGFzaztcclxuXHJcbiAgICB0cnkge1xyXG4gICAgICBzbGllbmNlU2F2ZVRhc2sgPSB0aGlzWydjb250ZXh0J10uZnJhbWVDb250ZXh0LnZpZXdNb2RlbC5zbGllbmNlU2F2ZTE7XHJcbiAgICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgICAvLyDkuI3lrZjlnKjpnZnpn7Pkv53lrZjlkb3ku6RcclxuICAgIH1cclxuICAgIGlmIChicmlkZ2VXaW4pIHtcclxuICAgICAgYnJpZGdlV2luWyd0YXNrQ2VudGVyQmVmb3JlTG9hZCddID0gKFxyXG4gICAgICAgIGFjdGlvbk9iajoge1xyXG4gICAgICAgICAgXCJ0YXNrXCI6IFdGVGFzayxcclxuICAgICAgICAgIFwiYWN0aW9uXCI6IFdGQWN0aW9uXHJcbiAgICAgICAgfVxyXG4gICAgICApID0+IHtcclxuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xyXG4gICAgICAgICAgY29uc3QgeyBhY3Rpb24gfSA9IGFjdGlvbk9iajtcclxuICAgICAgICAgIGlmIChmcmFtZUNvbnRleHQudWlTdGF0ZVsnVUlTdGF0ZUluUHJvY2VzcyddID09ICdBcHByb3ZpbmcnICYmIGZyYW1lQ29udGV4dC51aVN0YXRlWydmb3JtQ29uZmlnSWQnXSkge1xyXG4gICAgICAgICAgICBzbGllbmNlU2F2ZVRhc2suY2FsbCh0aGlzKS5zdWJzY3JpYmUoKCkgPT4ge1xyXG4gICAgICAgICAgICAgIHJlc29sdmUoe1xyXG4gICAgICAgICAgICAgICAgcmVzdWx0OiB0cnVlXHJcbiAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH0sICgpID0+IHtcclxuICAgICAgICAgICAgICB3aW5kb3cuZG9jdW1lbnQuYm9keS5jbGljaygpXHJcbiAgICAgICAgICAgICAgcmVzb2x2ZSh7XHJcbiAgICAgICAgICAgICAgICByZXN1bHQ6IGZhbHNlXHJcbiAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICB9IGVsc2UgaWYgKGFjdGlvbi5jb2RlID09IFdGQWN0aW9uVHlwZS5SZXN1Ym1pdCAmJiBzbGllbmNlU2F2ZVRhc2spIHtcclxuICAgICAgICAgICAgc2xpZW5jZVNhdmVUYXNrLmNhbGwodGhpcykuc3Vic2NyaWJlKCgpID0+IHtcclxuICAgICAgICAgICAgICByZXNvbHZlKHtcclxuICAgICAgICAgICAgICAgIHJlc3VsdDogdHJ1ZVxyXG4gICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgcmVzb2x2ZSh7XHJcbiAgICAgICAgICAgICAgcmVzdWx0OiB0cnVlXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH0pXHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcbn1cclxuIl19