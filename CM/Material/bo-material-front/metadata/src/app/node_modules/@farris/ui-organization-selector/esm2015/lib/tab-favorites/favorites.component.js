/**
 * @fileoverview added by tsickle
 * Generated from: lib/tab-favorites/favorites.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input, ChangeDetectorRef, Injector } from '@angular/core';
import * as _ from 'lodash-es';
import { noDataImg } from '../../assets/resource';
import { ApiService } from '../../utils/api.service';
import { CommonUtil } from '../../utils/common.tool';
import { FavoritesTool } from '../../utils/favorites.tool';
import { ChangeType } from '../../utils/index.type';
import { StateMgrTool } from '../../utils/state.mgr.tool';
export class FavoritesComponent {
    /**
     * @param {?} apiService
     * @param {?} favoritesTool
     * @param {?} stateMgr
     * @param {?} cdr
     * @param {?} injector
     */
    constructor(apiService, favoritesTool, stateMgr, cdr, injector) {
        this.apiService = apiService;
        this.favoritesTool = favoritesTool;
        this.stateMgr = stateMgr;
        this.cdr = cdr;
        this.injector = injector;
        this.allChecked = false;
        this.selections = [];
        this.allIndexId = 'allIndexId';
        this.noDataImg = noDataImg;
        this.items = [];
        this.favoritesList = [];
        this.allIndexId = CommonUtil.newGuid();
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.selectionsSub.unsubscribe();
        this.favoritesSub.unsubscribe();
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.favoritesSub = this.favoritesTool.favoritesSubject.subscribe((/**
         * @param {?} data
         * @return {?}
         */
        data => {
            this.favoritesList = data;
            this.loadFavoritesList();
        }));
        this.selectionsSub = this.stateMgr.selectionsSubject.subscribe((/**
         * @param {?} data
         * @return {?}
         */
        data => {
            if (data.changeType === ChangeType.ValueChanged) {
                this.selections = _.cloneDeep(data.value);
            }
            else if (data.changeType === ChangeType.Remove) {
                this.unSelectLine(data.value);
            }
            else if (data.changeType === ChangeType.Append) {
                this.selectLine(data.value);
            }
            this.toggleChecked();
            this.cdr.detectChanges();
        }));
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
    }
    /**
     * @return {?}
     */
    assembleData() {
        this.favoritesSub = this.favoritesTool.favoritesSubject.subscribe((/**
         * @param {?} data
         * @return {?}
         */
        data => {
            this.favoritesList = data;
            this.loadFavoritesList();
        }));
    }
    /**
     * @param {?} e
     * @param {?} item
     * @return {?}
     */
    deleteFromFavorites(e, item) {
        this.favoritesTool.toggleFavorites(e, item);
    }
    /**
     * @param {?} e
     * @return {?}
     */
    toggleAll(e) {
        if (!this.allChecked) {
            this.checkAll();
        }
        else {
            this.unCheckAll();
        }
        e.preventDefault();
    }
    /**
     * @param {?} data
     * @param {?} e
     * @return {?}
     */
    toggleOne(data, e) {
        if (data.checked) {
            if (this.multiSelect) {
                this.emitSelections(data, ChangeType.Remove);
            }
            else {
                this.emitSelections([]);
            }
        }
        else {
            if (this.multiSelect) {
                this.emitSelections(data, ChangeType.Append);
            }
            else {
                this.emitSelections(new Array(data));
            }
        }
        e.preventDefault();
    }
    /**
     * 用于数据展示
     * @return {?}
     */
    loadFavoritesList() {
        this.items = [];
        this.favoritesList.forEach((/**
         * @param {?} res
         * @return {?}
         */
        res => {
            /** @type {?} */
            const indexId = CommonUtil.newGuid();
            /** @type {?} */
            const item = {
                orgId: res.orgId,
                code: res.code,
                name: res.name,
                orgAllPath: res.orgAllPath,
                path: res.path,
                layer: Number(res.layer),
                indexId
            };
            if (CommonUtil.findIndex(res[this.primaryField], this.primaryField, this.selections) !== -1) {
                item.checked = true;
            }
            this.items.push(item);
        }));
        this.items = this.items.slice();
        this.cdr.detectChanges();
    }
    /**
     * 全选后处理
     * @return {?}
     */
    checkAll() {
        this.items.forEach((/**
         * @param {?} item
         * @return {?}
         */
        item => {
            if (CommonUtil.findIndex(item[this.primaryField], this.primaryField, this.selections) === -1) {
                this.emitSelections(item, ChangeType.Append);
            }
        }));
    }
    /**
     * 全部取消
     * @return {?} void
     */
    unCheckAll() {
        /** @type {?} */
        const checkeds = this.items.filter((/**
         * @param {?} item
         * @return {?}
         */
        item => item.checked));
        checkeds.forEach((/**
         * @param {?} item
         * @return {?}
         */
        item => {
            this.emitSelections(item, ChangeType.Remove);
        }));
    }
    /**
     * 当前行选中
     * @private
     * @param {?} data 当前行的数据（）
     * @return {?}
     */
    selectLine(data) {
        if (this.multiSelect) {
            this._insertOneIntoSelections(data);
        }
        else {
            this.selections = [];
            this.items.forEach((/**
             * @param {?} item
             * @return {?}
             */
            item => {
                if (item.checked) {
                    item.checked = false;
                }
            }));
            this._insertOneIntoSelections(data);
        }
        if (this.isAllChecked()) {
            this.allChecked = true;
        }
    }
    /**
     * 单选取消选中
     * @private
     * @param {?} data 取消选中行
     * @return {?}
     */
    unSelectLine(data) {
        /** @type {?} */
        const index = CommonUtil.findIndex(data[this.primaryField], this.primaryField, this.selections);
        if (index > -1) {
            this.selections.splice(index, 1);
        }
        this.setChecked(data, false);
        if (this.allChecked) {
            this.allChecked = false;
        }
    }
    /**
     * @private
     * @param {?} data
     * @param {?} checked
     * @return {?}
     */
    setChecked(data, checked) {
        /** @type {?} */
        const itemIndex = CommonUtil.findIndex(data[this.primaryField], this.primaryField, this.items);
        if (itemIndex > -1) {
            this.items[itemIndex].checked = checked;
        }
    }
    /**
     * @private
     * @param {?} selections
     * @param {?=} changeType
     * @param {?=} from
     * @return {?}
     */
    emitSelections(selections, changeType = ChangeType.ValueChanged, from = 'favorite') {
        this.stateMgr.emitSelections(selections, changeType, from);
    }
    /**
     * @param {?} e
     * @param {?} item
     * @return {?}
     */
    toggleFavorites(e, item) {
        this.favoritesTool.toggleFavorites(e, item);
    }
    /**
     * 全部取消勾选
     * @return {?}
     */
    clearCheckeds() {
        this.items.forEach((/**
         * @param {?} item
         * @return {?}
         */
        item => {
            item.checked = false;
        }));
        this.allChecked = false;
        this.selections = [];
    }
    /**
     * 选中并插入当前行数据到右侧
     * @param {?} data 当前行的数据
     * @return {?}
     */
    _insertOneIntoSelections(data) {
        // 如果当前数据已经移入右侧数据，则返回。
        if (CommonUtil.findIndex(data[this.primaryField], this.primaryField, this.selections) > -1) {
            return;
        }
        this.setChecked(data, true);
        this.selections.push(data);
        this.selections = this.selections.slice();
    }
    /**
     * 翻页检查：人员展示区的勾选状态与已选人员区是否对应
     * @return {?}
     */
    toggleChecked() {
        this.items.forEach((/**
         * @param {?} item
         * @return {?}
         */
        item => {
            if (CommonUtil.findIndex(item[this.primaryField], this.primaryField, this.selections) > -1) {
                item.checked = true;
            }
            else {
                item.checked = false;
            }
        }));
        if (this.isAllChecked()) {
            this.allChecked = true;
        }
        else {
            this.allChecked = false;
        }
    }
    /**
     * @private
     * @return {?}
     */
    isAllChecked() {
        /** @type {?} */
        let count = 0;
        /** @type {?} */
        let allChecked = false;
        this.items.forEach((/**
         * @param {?} item
         * @return {?}
         */
        item => {
            this.selections.forEach((/**
             * @param {?} selection
             * @return {?}
             */
            selection => {
                if (item[this.primaryField] === selection[this.primaryField]) {
                    count += 1;
                }
            }));
        }));
        if (this.items.length === count && count > 0) {
            allChecked = true;
        }
        return allChecked;
    }
    /**
     * @param {?} index
     * @param {?} item
     * @return {?}
     */
    trackByFn(index, item) {
        return index;
    }
}
FavoritesComponent.decorators = [
    { type: Component, args: [{
                selector: 'lib-favorites',
                template: "<div class=\"os-card\">\r\n    <div class=\"os-card-title\" *ngIf=\"multiSelect && items.length > 0\">\r\n        <div class=\"custom-control custom-checkbox\">\r\n            <input class=\"custom-control-input\" [id]=\"allIndexId\" type=\"checkbox\" [checked]=\"allChecked\">\r\n            <label class=\"custom-control-label\" [for]=\"allIndexId\"\r\n                (click)=\"toggleAll($event)\">{{'organizationSelector.tabCommon.firstCheckAllText' | locale}}{{items.length}}{{'organizationSelector.tabCommon.lastCheckAllText' | locale}}</label>\r\n        </div>\r\n    </div>\r\n    <div class=\"os-card-blank\" *ngIf=\"!multiSelect\"></div>\r\n    <perfect-scrollbar>\r\n        <div class=\"os-card-content\">\r\n            <div *ngFor=\"let data of items; let i = index;trackBy: trackByFn\" class=\"s-selectedPerson\">\r\n                <div class=\"custom-control custom-checkbox mb-2\">\r\n                    <input class=\"custom-control-input\" [id]=\"data.indexId\" type=\"checkbox\" [checked]=\"data.checked\">\r\n                    <label class=\"custom-control-label\" [for]=\"data.indexId\" (click)=\"toggleOne(data, $event)\">\r\n                        <div class=\"src-item-container\">\r\n                            <div class=\"src-item-content\">\r\n                                <p class=\"os-card-content-title\" title=\"{{data.name}}\">\r\n                                    {{data.name}}</p>\r\n                                <p class=\"os-card-content-orgpath\" title=\"{{data.orgAllPath}}\">\r\n                                    {{data.orgAllPath}}</p>\r\n                            </div>\r\n                        </div>\r\n                    </label>\r\n                </div>\r\n                <span class=\"f-icon f-icon-minus-circle\"\r\n                    (click)=\"deleteFromFavorites($event, data)\"></span>\r\n            </div>\r\n            <div *ngIf=\"items.length===0\" [ngStyle]=\"{'background-image': noDataImg}\" class=\"fp-os-card-nodata\">\r\n                {{'organizationSelector.tabCommon.noOrgData' | locale}}</div>\r\n        </div>\r\n    </perfect-scrollbar>\r\n    <!-- \u5206\u9875\r\n    <div class=\"pagination-container\" *ngIf=\"items.length!==0\">\r\n        <ul class=\"ngx-pagination pagination pager-viewmode-simple\">\r\n            <li class=\"page-item d-flex flex-fill\"></li>\r\n            <li class=\"page-item\" [class.disabled]=\"pageIndex === 1\" (click)=\"turnOverPage('pre', -1)\">\r\n                <span class=\"page-link border-0\">\r\n                    <span class=\"f-icon f-page-pre\"></span>\r\n                </span>\r\n            </li>\r\n            <li class=\"page-item\">\r\n                <input id=\"farris-datagrid-gotopagenumber\" min=\"1\" type=\"number\" max=\"{{pageTotal}}\"\r\n                    [(ngModel)]=\"pageIndex\" style=\"width: 38px;\" (keyup.enter)=\"switchPage({pageIndex: pageIndex})\"\r\n                    (input)=\"beforePageIndexChange($event, pageTotal)\">\r\n            </li>\r\n            <li class=\"page-item page-separator\" style=\"margin-left: 10px\"> / </li>\r\n            <li class=\"page-item page-total\" style=\"margin-left: 5px\">\r\n                <span style=\"font-size: 16px; font-weight: 600;\"> {{pageTotal}}</span>\r\n            </li>\r\n            <li class=\"page-item\" [class.disabled]=\"pageIndex === pageTotal\" (click)=\"turnOverPage('next', 1)\">\r\n                <a class=\"page-link border-0\">\r\n                    <span class=\"f-icon f-page-next\"></span>\r\n                </a>\r\n            </li>\r\n        </ul>\r\n    </div>\r\n    -->\r\n</div>",
                styles: [":host{background:#fff;display:-webkit-box;display:flex;width:100%;height:100%}.os-card{display:-webkit-box;display:flex;-webkit-box-orient:vertical;-webkit-box-direction:normal;flex-direction:column;-webkit-box-flex:1;flex:1;overflow:hidden}.os-card .s-selectedPerson:hover{background:#eef5ff;border-radius:5px}.os-card .os-card-content{padding-top:3px;clear:both}.os-card .os-card-content .src-item-container{display:-webkit-box;display:flex;height:32px;margin:-21px 0 0 15px}.os-card .os-card-content .src-item-content{margin-left:11px;margin-top:-2px;padding-right:10px;overflow:hidden}.os-card .s-selectedPerson{min-width:240px;float:left;width:calc(50% - 6px);position:relative;height:40px;padding:5px 12px;margin:0 3px 10px}.os-card .s-selectedPerson .f-icon-minus-circle,.os-card .s-selectedPerson .f-icon-star{position:absolute;top:13px;right:15px;font-size:14px;cursor:pointer}.os-card .s-selectedPerson .f-icon-minus-circle{color:#f46160}.os-card .s-selectedPerson .default-light-color{color:#f7b500}.os-card .s-selectedPerson .default-dark-color{color:#d8dce6}.os-card .k-checkbox-label::after,.os-card .k-checkbox-label::before{top:10px;font-size:16px;width:14px;height:14px}.os-card .fp-os-card-nodata{width:100px;height:100px;text-align:center;background-repeat:no-repeat;background-size:contain;color:#b4bccc;padding-top:110px;position:absolute;left:50%;top:50%;margin:-70px 0 0 -50px}.os-card .os-card-content-title{margin:0;overflow:hidden;white-space:nowrap;text-overflow:ellipsis;font-size:13px}.os-card .os-card-content-orgpath{margin:0;font-size:12px;overflow:hidden;white-space:nowrap;text-overflow:ellipsis;color:#c7ccd7}.os-card .os-card-title{display:-webkit-box;display:flex;-webkit-box-pack:justify;justify-content:space-between;font-size:14px}.os-card .os-card-title .custom-control{margin-left:15px;line-height:35px}.os-card .os-card-title .title-clearall{margin:10px 15px 0 0;color:#2a87ff;cursor:pointer;line-height:35px}.os-card .s-selectedPerson .custom-control-label::before{top:1px}.os-card .os-card-title .f-icon{color:#878d99;cursor:pointer}.os-card .os-card-blank{width:100%;height:20px}"]
            }] }
];
/** @nocollapse */
FavoritesComponent.ctorParameters = () => [
    { type: ApiService },
    { type: FavoritesTool },
    { type: StateMgrTool },
    { type: ChangeDetectorRef },
    { type: Injector }
];
FavoritesComponent.propDecorators = {
    primaryField: [{ type: Input }],
    multiSelect: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    FavoritesComponent.prototype.primaryField;
    /** @type {?} */
    FavoritesComponent.prototype.multiSelect;
    /** @type {?} */
    FavoritesComponent.prototype.allChecked;
    /** @type {?} */
    FavoritesComponent.prototype.selections;
    /** @type {?} */
    FavoritesComponent.prototype.allIndexId;
    /** @type {?} */
    FavoritesComponent.prototype.noDataImg;
    /** @type {?} */
    FavoritesComponent.prototype.items;
    /** @type {?} */
    FavoritesComponent.prototype.favoritesList;
    /**
     * @type {?}
     * @private
     */
    FavoritesComponent.prototype.selectionsSub;
    /**
     * @type {?}
     * @private
     */
    FavoritesComponent.prototype.favoritesSub;
    /**
     * @type {?}
     * @private
     */
    FavoritesComponent.prototype.apiService;
    /**
     * @type {?}
     * @private
     */
    FavoritesComponent.prototype.favoritesTool;
    /**
     * @type {?}
     * @private
     */
    FavoritesComponent.prototype.stateMgr;
    /**
     * @type {?}
     * @private
     */
    FavoritesComponent.prototype.cdr;
    /**
     * @type {?}
     * @private
     */
    FavoritesComponent.prototype.injector;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmF2b3JpdGVzLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BmYXJyaXMvdWktb3JnYW5pemF0aW9uLXNlbGVjdG9yLyIsInNvdXJjZXMiOlsibGliL3RhYi1mYXZvcml0ZXMvZmF2b3JpdGVzLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLE9BQU8sRUFDSCxTQUFTLEVBQUUsS0FBSyxFQUF5QixpQkFBaUIsRUFBdUIsUUFBUSxFQUM1RixNQUFNLGVBQWUsQ0FBQztBQUN2QixPQUFPLEtBQUssQ0FBQyxNQUFNLFdBQVcsQ0FBQztBQUUvQixPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sdUJBQXVCLENBQUM7QUFDbEQsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLHlCQUF5QixDQUFDO0FBQ3JELE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSx5QkFBeUIsQ0FBQztBQUNyRCxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sNEJBQTRCLENBQUM7QUFDM0QsT0FBTyxFQUFFLFVBQVUsRUFBaUMsTUFBTSx3QkFBd0IsQ0FBQztBQUNuRixPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sNEJBQTRCLENBQUM7QUFPMUQsTUFBTSxPQUFPLGtCQUFrQjs7Ozs7Ozs7SUFlM0IsWUFDWSxVQUFzQixFQUN0QixhQUE0QixFQUM1QixRQUFzQixFQUN0QixHQUFzQixFQUN0QixRQUFrQjtRQUpsQixlQUFVLEdBQVYsVUFBVSxDQUFZO1FBQ3RCLGtCQUFhLEdBQWIsYUFBYSxDQUFlO1FBQzVCLGFBQVEsR0FBUixRQUFRLENBQWM7UUFDdEIsUUFBRyxHQUFILEdBQUcsQ0FBbUI7UUFDdEIsYUFBUSxHQUFSLFFBQVEsQ0FBVTtRQWY5QixlQUFVLEdBQUcsS0FBSyxDQUFDO1FBQ25CLGVBQVUsR0FBVSxFQUFFLENBQUM7UUFDdkIsZUFBVSxHQUFHLFlBQVksQ0FBQztRQUMxQixjQUFTLEdBQUcsU0FBUyxDQUFDO1FBQ3RCLFVBQUssR0FBRyxF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QiwyQ0FBb0M7Ozs7O0lBQ3BDLHNDQUE4Qjs7Ozs7SUFDOUIsaUNBQThCOzs7OztJQUM5QixzQ0FBMEIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xyXG4gICAgQ29tcG9uZW50LCBJbnB1dCwgT25Jbml0LCBBZnRlclZpZXdJbml0LCBDaGFuZ2VEZXRlY3RvclJlZiwgT3B0aW9uYWwsIE9uRGVzdHJveSwgSW5qZWN0b3JcclxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0ICogYXMgXyBmcm9tICdsb2Rhc2gtZXMnO1xyXG5pbXBvcnQgeyBTdWJzY3JpcHRpb24gfSBmcm9tICdyeGpzJztcclxuaW1wb3J0IHsgbm9EYXRhSW1nIH0gZnJvbSAnLi4vLi4vYXNzZXRzL3Jlc291cmNlJztcclxuaW1wb3J0IHsgQXBpU2VydmljZSB9IGZyb20gJy4uLy4uL3V0aWxzL2FwaS5zZXJ2aWNlJztcclxuaW1wb3J0IHsgQ29tbW9uVXRpbCB9IGZyb20gJy4uLy4uL3V0aWxzL2NvbW1vbi50b29sJztcclxuaW1wb3J0IHsgRmF2b3JpdGVzVG9vbCB9IGZyb20gJy4uLy4uL3V0aWxzL2Zhdm9yaXRlcy50b29sJztcclxuaW1wb3J0IHsgQ2hhbmdlVHlwZSwgT3JnYW5pemF0aW9uLCBPcmdSZXF1ZXN0UGFyYW0gfSBmcm9tICcuLi8uLi91dGlscy9pbmRleC50eXBlJztcclxuaW1wb3J0IHsgU3RhdGVNZ3JUb29sIH0gZnJvbSAnLi4vLi4vdXRpbHMvc3RhdGUubWdyLnRvb2wnO1xyXG5cclxuQENvbXBvbmVudCh7XHJcbiAgICBzZWxlY3RvcjogJ2xpYi1mYXZvcml0ZXMnLFxyXG4gICAgdGVtcGxhdGVVcmw6ICcuL2Zhdm9yaXRlcy5jb21wb25lbnQuaHRtbCcsXHJcbiAgICBzdHlsZVVybHM6IFsnLi9mYXZvcml0ZXMuY29tcG9uZW50LmNzcyddLFxyXG59KVxyXG5leHBvcnQgY2xhc3MgRmF2b3JpdGVzQ29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0LCBBZnRlclZpZXdJbml0LCBPbkRlc3Ryb3kge1xyXG5cclxuICAgIEBJbnB1dCgpIHByaW1hcnlGaWVsZDogc3RyaW5nO1xyXG4gICAgQElucHV0KCkgbXVsdGlTZWxlY3Q6IGJvb2xlYW47XHJcblxyXG4gICAgYWxsQ2hlY2tlZCA9IGZhbHNlO1xyXG4gICAgc2VsZWN0aW9uczogYW55W10gPSBbXTtcclxuICAgIGFsbEluZGV4SWQgPSAnYWxsSW5kZXhJZCc7XHJcbiAgICBub0RhdGFJbWcgPSBub0RhdGFJbWc7XHJcbiAgICBpdGVtcyA9IFtdO1xyXG4gICAgZmF2b3JpdGVzTGlzdCA9IFtdO1xyXG5cclxuICAgIHByaXZhdGUgc2VsZWN0aW9uc1N1YjogU3Vic2NyaXB0aW9uO1xyXG4gICAgcHJpdmF0ZSBmYXZvcml0ZXNTdWI6IFN1YnNjcmlwdGlvbjtcclxuXHJcbiAgICBjb25zdHJ1Y3RvcihcclxuICAgICAgICBwcml2YXRlIGFwaVNlcnZpY2U6IEFwaVNlcnZpY2UsXHJcbiAgICAgICAgcHJpdmF0ZSBmYXZvcml0ZXNUb29sOiBGYXZvcml0ZXNUb29sLFxyXG4gICAgICAgIHByaXZhdGUgc3RhdGVNZ3I6IFN0YXRlTWdyVG9vbCxcclxuICAgICAgICBwcml2YXRlIGNkcjogQ2hhbmdlRGV0ZWN0b3JSZWYsXHJcbiAgICAgICAgcHJpdmF0ZSBpbmplY3RvcjogSW5qZWN0b3JcclxuICAgICkge1xyXG4gICAgICAgIHRoaXMuYWxsSW5kZXhJZCA9IENvbW1vblV0aWwubmV3R3VpZCgpO1xyXG4gICAgfVxyXG5cclxuICAgIG5nT25EZXN0cm95KCk6IHZvaWQge1xyXG4gICAgICAgIHRoaXMuc2VsZWN0aW9uc1N1Yi51bnN1YnNjcmliZSgpO1xyXG4gICAgICAgIHRoaXMuZmF2b3JpdGVzU3ViLnVuc3Vic2NyaWJlKCk7XHJcbiAgICB9XHJcblxyXG4gICAgbmdPbkluaXQoKTogdm9pZCB7XHJcbiAgICAgICAgdGhpcy5mYXZvcml0ZXNTdWIgPSB0aGlzLmZhdm9yaXRlc1Rvb2wuZmF2b3JpdGVzU3ViamVjdC5zdWJzY3JpYmUoZGF0YSA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMuZmF2b3JpdGVzTGlzdCA9IGRhdGE7XHJcbiAgICAgICAgICAgIHRoaXMubG9hZEZhdm9yaXRlc0xpc3QoKTtcclxuICAgICAgICB9KTtcclxuICAgICAgICB0aGlzLnNlbGVjdGlvbnNTdWIgPSB0aGlzLnN0YXRlTWdyLnNlbGVjdGlvbnNTdWJqZWN0LnN1YnNjcmliZShkYXRhID0+IHtcclxuICAgICAgICAgICAgaWYgKGRhdGEuY2hhbmdlVHlwZSA9PT0gQ2hhbmdlVHlwZS5WYWx1ZUNoYW5nZWQpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuc2VsZWN0aW9ucyA9IF8uY2xvbmVEZWVwKGRhdGEudmFsdWUpO1xyXG4gICAgICAgICAgICB9IGVsc2UgaWYgKGRhdGEuY2hhbmdlVHlwZSA9PT0gQ2hhbmdlVHlwZS5SZW1vdmUpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMudW5TZWxlY3RMaW5lKGRhdGEudmFsdWUpO1xyXG4gICAgICAgICAgICB9IGVsc2UgaWYgKGRhdGEuY2hhbmdlVHlwZSA9PT0gQ2hhbmdlVHlwZS5BcHBlbmQpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuc2VsZWN0TGluZShkYXRhLnZhbHVlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB0aGlzLnRvZ2dsZUNoZWNrZWQoKTtcclxuICAgICAgICAgICAgdGhpcy5jZHIuZGV0ZWN0Q2hhbmdlcygpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIG5nQWZ0ZXJWaWV3SW5pdCgpOiB2b2lkIHtcclxuXHJcbiAgICB9XHJcblxyXG4gICAgYXNzZW1ibGVEYXRhKCkge1xyXG4gICAgICAgIHRoaXMuZmF2b3JpdGVzU3ViID0gdGhpcy5mYXZvcml0ZXNUb29sLmZhdm9yaXRlc1N1YmplY3Quc3Vic2NyaWJlKGRhdGEgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLmZhdm9yaXRlc0xpc3QgPSBkYXRhO1xyXG4gICAgICAgICAgICB0aGlzLmxvYWRGYXZvcml0ZXNMaXN0KCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgZGVsZXRlRnJvbUZhdm9yaXRlcyhlOiBhbnksIGl0ZW06IGFueSkge1xyXG4gICAgICAgIHRoaXMuZmF2b3JpdGVzVG9vbC50b2dnbGVGYXZvcml0ZXMoZSwgaXRlbSk7XHJcbiAgICB9XHJcblxyXG4gICAgdG9nZ2xlQWxsKGU6IGFueSkge1xyXG4gICAgICAgIGlmICghdGhpcy5hbGxDaGVja2VkKSB7XHJcbiAgICAgICAgICAgIHRoaXMuY2hlY2tBbGwoKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLnVuQ2hlY2tBbGwoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgfVxyXG5cclxuICAgIHRvZ2dsZU9uZShkYXRhLCBlKSB7XHJcbiAgICAgICAgaWYgKGRhdGEuY2hlY2tlZCkge1xyXG4gICAgICAgICAgICBpZiAodGhpcy5tdWx0aVNlbGVjdCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5lbWl0U2VsZWN0aW9ucyhkYXRhLCBDaGFuZ2VUeXBlLlJlbW92ZSk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmVtaXRTZWxlY3Rpb25zKFtdKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLm11bHRpU2VsZWN0KSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmVtaXRTZWxlY3Rpb25zKGRhdGEsIENoYW5nZVR5cGUuQXBwZW5kKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuZW1pdFNlbGVjdGlvbnMobmV3IEFycmF5KGRhdGEpKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDnlKjkuo7mlbDmja7lsZXnpLpcclxuICAgICAqL1xyXG4gICAgbG9hZEZhdm9yaXRlc0xpc3QoKSB7XHJcbiAgICAgICAgdGhpcy5pdGVtcyA9IFtdO1xyXG4gICAgICAgIHRoaXMuZmF2b3JpdGVzTGlzdC5mb3JFYWNoKHJlcyA9PiB7XHJcbiAgICAgICAgICAgIGNvbnN0IGluZGV4SWQgPSBDb21tb25VdGlsLm5ld0d1aWQoKTtcclxuICAgICAgICAgICAgY29uc3QgaXRlbTogT3JnYW5pemF0aW9uID0ge1xyXG4gICAgICAgICAgICAgICAgb3JnSWQ6IHJlcy5vcmdJZCxcclxuICAgICAgICAgICAgICAgIGNvZGU6IHJlcy5jb2RlLFxyXG4gICAgICAgICAgICAgICAgbmFtZTogcmVzLm5hbWUsXHJcbiAgICAgICAgICAgICAgICBvcmdBbGxQYXRoOiByZXMub3JnQWxsUGF0aCxcclxuICAgICAgICAgICAgICAgIHBhdGg6IHJlcy5wYXRoLFxyXG4gICAgICAgICAgICAgICAgbGF5ZXI6IE51bWJlcihyZXMubGF5ZXIpLFxyXG4gICAgICAgICAgICAgICAgaW5kZXhJZFxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICBpZiAoQ29tbW9uVXRpbC5maW5kSW5kZXgocmVzW3RoaXMucHJpbWFyeUZpZWxkXSwgdGhpcy5wcmltYXJ5RmllbGQsIHRoaXMuc2VsZWN0aW9ucykgIT09IC0xKSB7XHJcbiAgICAgICAgICAgICAgICBpdGVtLmNoZWNrZWQgPSB0cnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHRoaXMuaXRlbXMucHVzaChpdGVtKTtcclxuICAgICAgICB9KTtcclxuICAgICAgICB0aGlzLml0ZW1zID0gdGhpcy5pdGVtcy5zbGljZSgpO1xyXG4gICAgICAgIHRoaXMuY2RyLmRldGVjdENoYW5nZXMoKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIOWFqOmAieWQjuWkhOeQhlxyXG4gICAgICogQHBhcmFtIGRhdGFBcnIg5YWo6YCJ55qE5YC8XHJcbiAgICAgKi9cclxuICAgIGNoZWNrQWxsKCkge1xyXG4gICAgICAgIHRoaXMuaXRlbXMuZm9yRWFjaChpdGVtID0+IHtcclxuICAgICAgICAgICAgaWYgKENvbW1vblV0aWwuZmluZEluZGV4KGl0ZW1bdGhpcy5wcmltYXJ5RmllbGRdLCB0aGlzLnByaW1hcnlGaWVsZCwgdGhpcy5zZWxlY3Rpb25zKSA9PT0gLTEpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuZW1pdFNlbGVjdGlvbnMoaXRlbSwgQ2hhbmdlVHlwZS5BcHBlbmQpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDlhajpg6jlj5bmtohcclxuICAgICAqIEBwYXJhbSBkYXRhQXJyIOWPlua2iOeahOaVsOaNrlxyXG4gICAgICogQHJldHVybnMgdm9pZFxyXG4gICAgICovXHJcbiAgICB1bkNoZWNrQWxsKCkge1xyXG4gICAgICAgIGNvbnN0IGNoZWNrZWRzID0gdGhpcy5pdGVtcy5maWx0ZXIoaXRlbSA9PiBpdGVtLmNoZWNrZWQpO1xyXG4gICAgICAgIGNoZWNrZWRzLmZvckVhY2goaXRlbSA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMuZW1pdFNlbGVjdGlvbnMoaXRlbSwgQ2hhbmdlVHlwZS5SZW1vdmUpO1xyXG4gICAgICAgIH0pXHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDlvZPliY3ooYzpgInkuK1cclxuICAgICAqIEBwYXJhbSBkYXRhIOW9k+WJjeihjOeahOaVsOaNru+8iO+8iVxyXG4gICAgICovXHJcbiAgICBwcml2YXRlIHNlbGVjdExpbmUoZGF0YTogYW55KSB7XHJcbiAgICAgICAgaWYgKHRoaXMubXVsdGlTZWxlY3QpIHtcclxuICAgICAgICAgICAgdGhpcy5faW5zZXJ0T25lSW50b1NlbGVjdGlvbnMoZGF0YSk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy5zZWxlY3Rpb25zID0gW107XHJcbiAgICAgICAgICAgIHRoaXMuaXRlbXMuZm9yRWFjaChpdGVtID0+IHtcclxuICAgICAgICAgICAgICAgIGlmIChpdGVtLmNoZWNrZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICBpdGVtLmNoZWNrZWQgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIHRoaXMuX2luc2VydE9uZUludG9TZWxlY3Rpb25zKGRhdGEpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodGhpcy5pc0FsbENoZWNrZWQoKSkge1xyXG4gICAgICAgICAgICB0aGlzLmFsbENoZWNrZWQgPSB0cnVlO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIOWNlemAieWPlua2iOmAieS4rVxyXG4gICAgICogQHBhcmFtIGRhdGEg5Y+W5raI6YCJ5Lit6KGMXHJcbiAgICAgKi9cclxuICAgICBwcml2YXRlIHVuU2VsZWN0TGluZShkYXRhOiBhbnkpIHtcclxuICAgICAgICBjb25zdCBpbmRleCA9IENvbW1vblV0aWwuZmluZEluZGV4KGRhdGFbdGhpcy5wcmltYXJ5RmllbGRdLCB0aGlzLnByaW1hcnlGaWVsZCwgdGhpcy5zZWxlY3Rpb25zKTtcclxuICAgICAgICBpZiAoaW5kZXggPiAtMSkge1xyXG4gICAgICAgICAgICB0aGlzLnNlbGVjdGlvbnMuc3BsaWNlKGluZGV4LCAxKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5zZXRDaGVja2VkKGRhdGEsIGZhbHNlKTtcclxuICAgICAgICBpZiAodGhpcy5hbGxDaGVja2VkKSB7XHJcbiAgICAgICAgICAgIHRoaXMuYWxsQ2hlY2tlZCA9IGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIHNldENoZWNrZWQoZGF0YTogYW55LCBjaGVja2VkOiBib29sZWFuKSB7XHJcbiAgICAgICAgY29uc3QgaXRlbUluZGV4ID0gQ29tbW9uVXRpbC5maW5kSW5kZXgoZGF0YVt0aGlzLnByaW1hcnlGaWVsZF0sIHRoaXMucHJpbWFyeUZpZWxkLCB0aGlzLml0ZW1zKTtcclxuICAgICAgICBpZiAoaXRlbUluZGV4ID4gLTEpIHtcclxuICAgICAgICAgICAgdGhpcy5pdGVtc1tpdGVtSW5kZXhdLmNoZWNrZWQgPSBjaGVja2VkO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIGVtaXRTZWxlY3Rpb25zKHNlbGVjdGlvbnM6IGFueSwgY2hhbmdlVHlwZSA9IENoYW5nZVR5cGUuVmFsdWVDaGFuZ2VkLCBmcm9tID0gJ2Zhdm9yaXRlJykge1xyXG4gICAgICAgIHRoaXMuc3RhdGVNZ3IuZW1pdFNlbGVjdGlvbnMoc2VsZWN0aW9ucywgY2hhbmdlVHlwZSwgZnJvbSk7XHJcbiAgICB9XHJcblxyXG4gICAgdG9nZ2xlRmF2b3JpdGVzKGU6IGFueSwgaXRlbTogYW55KSB7XHJcbiAgICAgICAgdGhpcy5mYXZvcml0ZXNUb29sLnRvZ2dsZUZhdm9yaXRlcyhlLCBpdGVtKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIOWFqOmDqOWPlua2iOWLvumAiVxyXG4gICAgICovXHJcbiAgICBjbGVhckNoZWNrZWRzKCkge1xyXG4gICAgICAgIHRoaXMuaXRlbXMuZm9yRWFjaChpdGVtID0+IHtcclxuICAgICAgICAgICAgaXRlbS5jaGVja2VkID0gZmFsc2U7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgdGhpcy5hbGxDaGVja2VkID0gZmFsc2U7XHJcbiAgICAgICAgdGhpcy5zZWxlY3Rpb25zID0gW107XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDpgInkuK3lubbmj5LlhaXlvZPliY3ooYzmlbDmja7liLDlj7PkvqdcclxuICAgICAqIEBwYXJhbSBkYXRhIOW9k+WJjeihjOeahOaVsOaNrlxyXG4gICAgICogQHBhcmFtIGNvbGxlY3Rpb24g5pqC5a2Y5b2T5YmN5pWw5o2u55qE6ZuG5ZCIXHJcbiAgICAgKi9cclxuICAgIF9pbnNlcnRPbmVJbnRvU2VsZWN0aW9ucyhkYXRhOiBhbnkpIHtcclxuICAgICAgICAvLyDlpoLmnpzlvZPliY3mlbDmja7lt7Lnu4/np7vlhaXlj7PkvqfmlbDmja7vvIzliJnov5Tlm57jgIJcclxuICAgICAgICBpZiAoQ29tbW9uVXRpbC5maW5kSW5kZXgoZGF0YVt0aGlzLnByaW1hcnlGaWVsZF0sIHRoaXMucHJpbWFyeUZpZWxkLCB0aGlzLnNlbGVjdGlvbnMpID4gLTEpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLnNldENoZWNrZWQoZGF0YSwgdHJ1ZSk7XHJcbiAgICAgICAgdGhpcy5zZWxlY3Rpb25zLnB1c2goZGF0YSk7XHJcbiAgICAgICAgdGhpcy5zZWxlY3Rpb25zID0gdGhpcy5zZWxlY3Rpb25zLnNsaWNlKCk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDnv7vpobXmo4Dmn6XvvJrkurrlkZjlsZXnpLrljLrnmoTli77pgInnirbmgIHkuI7lt7LpgInkurrlkZjljLrmmK/lkKblr7nlupRcclxuICAgICAqL1xyXG4gICAgdG9nZ2xlQ2hlY2tlZCgpIHtcclxuICAgICAgICB0aGlzLml0ZW1zLmZvckVhY2goaXRlbSA9PiB7XHJcbiAgICAgICAgICAgIGlmIChDb21tb25VdGlsLmZpbmRJbmRleChpdGVtW3RoaXMucHJpbWFyeUZpZWxkXSwgdGhpcy5wcmltYXJ5RmllbGQsIHRoaXMuc2VsZWN0aW9ucykgPiAtMSkge1xyXG4gICAgICAgICAgICAgICAgaXRlbS5jaGVja2VkID0gdHJ1ZTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGl0ZW0uY2hlY2tlZCA9IGZhbHNlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgaWYgKHRoaXMuaXNBbGxDaGVja2VkKCkpIHtcclxuICAgICAgICAgICAgdGhpcy5hbGxDaGVja2VkID0gdHJ1ZTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLmFsbENoZWNrZWQgPSBmYWxzZTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBpc0FsbENoZWNrZWQoKTogYm9vbGVhbiB7XHJcbiAgICAgICAgbGV0IGNvdW50ID0gMDtcclxuICAgICAgICBsZXQgYWxsQ2hlY2tlZCA9IGZhbHNlO1xyXG5cclxuICAgICAgICB0aGlzLml0ZW1zLmZvckVhY2goaXRlbSA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMuc2VsZWN0aW9ucy5mb3JFYWNoKHNlbGVjdGlvbiA9PiB7XHJcbiAgICAgICAgICAgICAgICBpZiAoaXRlbVt0aGlzLnByaW1hcnlGaWVsZF0gPT09IHNlbGVjdGlvblt0aGlzLnByaW1hcnlGaWVsZF0pIHtcclxuICAgICAgICAgICAgICAgICAgICBjb3VudCArPSAxO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9KTtcclxuICAgICAgICBpZiAodGhpcy5pdGVtcy5sZW5ndGggPT09IGNvdW50ICYmIGNvdW50ID4gMCkge1xyXG4gICAgICAgICAgICBhbGxDaGVja2VkID0gdHJ1ZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGFsbENoZWNrZWQ7XHJcbiAgICB9XHJcblxyXG4gICAgdHJhY2tCeUZuKGluZGV4LCBpdGVtKSB7XHJcbiAgICAgICAgcmV0dXJuIGluZGV4O1xyXG4gICAgfVxyXG5cclxufVxyXG4iXX0=