import { BindingPropertyType, PropertyUtil } from '../../binding-data/index';
import { BindingPathConverter } from './binding_path_converter';
/**
 * EntityPath转换器
 */
class EntityPathConverter {
    /**
     * 转换为Entity可识别的路径
     * 根：[]
     * 主表：['id:xxx', 'name'],
     * 关联：['id:xxx', 'deptInfo', 'id:xxx', 'name']
     * UDT: ['id:xxx', 'updateInfo', ':', 'createdOn']
     * 从表：['id:xxx', 'edus', 'id:xxx', 'name'],
     * 从从表：['id:xxx', 'edus', 'id:xxx', 'grades', 'id:xxx', 'name']
     */
    static toEntityPathArray(bindingPathString, bindingData) {
        const bindingPathArray = BindingPathConverter.toBindingPathArray(bindingPathString);
        const entityPathArray = [];
        if (bindingPathArray.length === 0) {
            return entityPathArray;
        }
        // 根节点
        let currentBindingObject = bindingData.list.currentItem;
        entityPathArray.push(this.createPrimaryKeyPath(currentBindingObject.primaryKey, currentBindingObject.primaryKeyValue));
        bindingPathArray.forEach((propName) => {
            const propInfo = PropertyUtil.getPropertyByName(currentBindingObject.properties, propName);
            switch (propInfo.type) {
                case BindingPropertyType.Plain:
                    entityPathArray.push(propName);
                    break;
                case BindingPropertyType.Object:
                    currentBindingObject = currentBindingObject[propName];
                    entityPathArray.push(propName);
                    entityPathArray.push(this.createPrimaryKeyPath(currentBindingObject.primaryKey, currentBindingObject.primaryKeyValue));
                    break;
                case BindingPropertyType.List:
                    const currentBindingList = currentBindingObject[propName];
                    currentBindingObject = currentBindingList.currentItem;
                    entityPathArray.push(propName);
                    entityPathArray.push(this.createPrimaryKeyPath(currentBindingObject.primaryKey, currentBindingObject.primaryKeyValue));
                    break;
                default:
                    break;
            }
        });
        return entityPathArray;
    }
    /**
     * 创建路径中的主键部分
     */
    static createPrimaryKeyPath(primaryKey, primaryKeyValue) {
        return `${primaryKey}:${primaryKeyValue}`;
    }
}
export { EntityPathConverter };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZW50aXR5X3BhdGhfY29udmVydGVyLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGZhcnJpcy9tb2JpbGUtZGV2a2l0LyIsInNvdXJjZXMiOlsibGliL3V0aWxzL2RhdGEtcGF0aC9lbnRpdHlfcGF0aF9jb252ZXJ0ZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUNRLG1CQUFtQixFQUFFLFlBQVksRUFDL0MsTUFBTSwwQkFBMEIsQ0FBQztBQUNsQyxPQUFPLEVBQUUsb0JBQW9CLEVBQUUsTUFBTSwwQkFBMEIsQ0FBQztBQUVoRTs7R0FFRztBQUNILE1BQU0sbUJBQW1CO0lBRXZCOzs7Ozs7OztPQVFHO0lBQ0ksTUFBTSxDQUFDLGlCQUFpQixDQUFDLGlCQUF5QixFQUFFLFdBQXdCO1FBQ2pGLE1BQU0sZ0JBQWdCLEdBQWEsb0JBQW9CLENBQUMsa0JBQWtCLENBQUMsaUJBQWlCLENBQUMsQ0FBQztRQUM5RixNQUFNLGVBQWUsR0FBYSxFQUFFLENBQUM7UUFFckMsSUFBSSxnQkFBZ0IsQ0FBQyxNQUFNLEtBQUssQ0FBQyxFQUFFO1lBQ2pDLE9BQU8sZUFBZSxDQUFDO1NBQ3hCO1FBRUQsTUFBTTtRQUNOLElBQUksb0JBQW9CLEdBQUcsV0FBVyxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUM7UUFDeEQsZUFBZSxDQUFDLElBQUksQ0FDbEIsSUFBSSxDQUFDLG9CQUFvQixDQUFDLG9CQUFvQixDQUFDLFVBQVUsRUFBRSxvQkFBb0IsQ0FBQyxlQUFlLENBQUMsQ0FDakcsQ0FBQztRQUVGLGdCQUFnQixDQUFDLE9BQU8sQ0FBQyxDQUFDLFFBQWdCLEVBQUUsRUFBRTtZQUM1QyxNQUFNLFFBQVEsR0FBRyxZQUFZLENBQUMsaUJBQWlCLENBQUMsb0JBQW9CLENBQUMsVUFBVSxFQUFFLFFBQVEsQ0FBQyxDQUFDO1lBQzNGLFFBQVEsUUFBUSxDQUFDLElBQUksRUFBRTtnQkFDckIsS0FBSyxtQkFBbUIsQ0FBQyxLQUFLO29CQUM1QixlQUFlLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO29CQUMvQixNQUFNO2dCQUNSLEtBQUssbUJBQW1CLENBQUMsTUFBTTtvQkFDN0Isb0JBQW9CLEdBQUcsb0JBQW9CLENBQUMsUUFBUSxDQUFDLENBQUM7b0JBQ3RELGVBQWUsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7b0JBQy9CLGVBQWUsQ0FBQyxJQUFJLENBQ2xCLElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxvQkFBb0IsQ0FBQyxVQUFVLEVBQUUsb0JBQW9CLENBQUMsZUFBZSxDQUFDLENBQ2pHLENBQUM7b0JBQ0YsTUFBTTtnQkFDUixLQUFLLG1CQUFtQixDQUFDLElBQUk7b0JBQzNCLE1BQU0sa0JBQWtCLEdBQUcsb0JBQW9CLENBQUMsUUFBUSxDQUFDLENBQUM7b0JBQzFELG9CQUFvQixHQUFHLGtCQUFrQixDQUFDLFdBQVcsQ0FBQztvQkFDdEQsZUFBZSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztvQkFDL0IsZUFBZSxDQUFDLElBQUksQ0FDbEIsSUFBSSxDQUFDLG9CQUFvQixDQUFDLG9CQUFvQixDQUFDLFVBQVUsRUFBRSxvQkFBb0IsQ0FBQyxlQUFlLENBQUMsQ0FDakcsQ0FBQztvQkFDRixNQUFNO2dCQUNSO29CQUNJLE1BQU07YUFDWDtRQUNILENBQUMsQ0FBQyxDQUFDO1FBRUgsT0FBTyxlQUFlLENBQUM7SUFDekIsQ0FBQztJQUVEOztPQUVHO0lBQ0ksTUFBTSxDQUFDLG9CQUFvQixDQUFDLFVBQWtCLEVBQUUsZUFBdUI7UUFDNUUsT0FBTyxHQUFHLFVBQVUsSUFBSSxlQUFlLEVBQUUsQ0FBQztJQUM1QyxDQUFDO0NBRUY7QUFFRCxPQUFPLEVBQUUsbUJBQW1CLEVBQUUsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XHJcbiAgQmluZGluZ0RhdGEsIEJpbmRpbmdQcm9wZXJ0eVR5cGUsIFByb3BlcnR5VXRpbFxyXG59IGZyb20gJy4uLy4uL2JpbmRpbmctZGF0YS9pbmRleCc7XHJcbmltcG9ydCB7IEJpbmRpbmdQYXRoQ29udmVydGVyIH0gZnJvbSAnLi9iaW5kaW5nX3BhdGhfY29udmVydGVyJztcclxuXHJcbi8qKlxyXG4gKiBFbnRpdHlQYXRo6L2s5o2i5ZmoXHJcbiAqL1xyXG5jbGFzcyBFbnRpdHlQYXRoQ29udmVydGVyIHtcclxuXHJcbiAgLyoqXHJcbiAgICog6L2s5o2i5Li6RW50aXR55Y+v6K+G5Yir55qE6Lev5b6EXHJcbiAgICog5qC577yaW11cclxuICAgKiDkuLvooajvvJpbJ2lkOnh4eCcsICduYW1lJ10sXHJcbiAgICog5YWz6IGU77yaWydpZDp4eHgnLCAnZGVwdEluZm8nLCAnaWQ6eHh4JywgJ25hbWUnXVxyXG4gICAqIFVEVDogWydpZDp4eHgnLCAndXBkYXRlSW5mbycsICc6JywgJ2NyZWF0ZWRPbiddXHJcbiAgICog5LuO6KGo77yaWydpZDp4eHgnLCAnZWR1cycsICdpZDp4eHgnLCAnbmFtZSddLFxyXG4gICAqIOS7juS7juihqO+8mlsnaWQ6eHh4JywgJ2VkdXMnLCAnaWQ6eHh4JywgJ2dyYWRlcycsICdpZDp4eHgnLCAnbmFtZSddXHJcbiAgICovXHJcbiAgcHVibGljIHN0YXRpYyB0b0VudGl0eVBhdGhBcnJheShiaW5kaW5nUGF0aFN0cmluZzogc3RyaW5nLCBiaW5kaW5nRGF0YTogQmluZGluZ0RhdGEpOiBzdHJpbmdbXSB7XHJcbiAgICBjb25zdCBiaW5kaW5nUGF0aEFycmF5OiBzdHJpbmdbXSA9IEJpbmRpbmdQYXRoQ29udmVydGVyLnRvQmluZGluZ1BhdGhBcnJheShiaW5kaW5nUGF0aFN0cmluZyk7XHJcbiAgICBjb25zdCBlbnRpdHlQYXRoQXJyYXk6IHN0cmluZ1tdID0gW107XHJcblxyXG4gICAgaWYgKGJpbmRpbmdQYXRoQXJyYXkubGVuZ3RoID09PSAwKSB7XHJcbiAgICAgIHJldHVybiBlbnRpdHlQYXRoQXJyYXk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8g5qC56IqC54K5XHJcbiAgICBsZXQgY3VycmVudEJpbmRpbmdPYmplY3QgPSBiaW5kaW5nRGF0YS5saXN0LmN1cnJlbnRJdGVtO1xyXG4gICAgZW50aXR5UGF0aEFycmF5LnB1c2goXHJcbiAgICAgIHRoaXMuY3JlYXRlUHJpbWFyeUtleVBhdGgoY3VycmVudEJpbmRpbmdPYmplY3QucHJpbWFyeUtleSwgY3VycmVudEJpbmRpbmdPYmplY3QucHJpbWFyeUtleVZhbHVlKVxyXG4gICAgKTtcclxuXHJcbiAgICBiaW5kaW5nUGF0aEFycmF5LmZvckVhY2goKHByb3BOYW1lOiBzdHJpbmcpID0+IHtcclxuICAgICAgY29uc3QgcHJvcEluZm8gPSBQcm9wZXJ0eVV0aWwuZ2V0UHJvcGVydHlCeU5hbWUoY3VycmVudEJpbmRpbmdPYmplY3QucHJvcGVydGllcywgcHJvcE5hbWUpO1xyXG4gICAgICBzd2l0Y2ggKHByb3BJbmZvLnR5cGUpIHtcclxuICAgICAgICBjYXNlIEJpbmRpbmdQcm9wZXJ0eVR5cGUuUGxhaW46XHJcbiAgICAgICAgICBlbnRpdHlQYXRoQXJyYXkucHVzaChwcm9wTmFtZSk7XHJcbiAgICAgICAgICBicmVhaztcclxuICAgICAgICBjYXNlIEJpbmRpbmdQcm9wZXJ0eVR5cGUuT2JqZWN0OlxyXG4gICAgICAgICAgY3VycmVudEJpbmRpbmdPYmplY3QgPSBjdXJyZW50QmluZGluZ09iamVjdFtwcm9wTmFtZV07XHJcbiAgICAgICAgICBlbnRpdHlQYXRoQXJyYXkucHVzaChwcm9wTmFtZSk7XHJcbiAgICAgICAgICBlbnRpdHlQYXRoQXJyYXkucHVzaChcclxuICAgICAgICAgICAgdGhpcy5jcmVhdGVQcmltYXJ5S2V5UGF0aChjdXJyZW50QmluZGluZ09iamVjdC5wcmltYXJ5S2V5LCBjdXJyZW50QmluZGluZ09iamVjdC5wcmltYXJ5S2V5VmFsdWUpXHJcbiAgICAgICAgICApO1xyXG4gICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgY2FzZSBCaW5kaW5nUHJvcGVydHlUeXBlLkxpc3Q6XHJcbiAgICAgICAgICBjb25zdCBjdXJyZW50QmluZGluZ0xpc3QgPSBjdXJyZW50QmluZGluZ09iamVjdFtwcm9wTmFtZV07XHJcbiAgICAgICAgICBjdXJyZW50QmluZGluZ09iamVjdCA9IGN1cnJlbnRCaW5kaW5nTGlzdC5jdXJyZW50SXRlbTtcclxuICAgICAgICAgIGVudGl0eVBhdGhBcnJheS5wdXNoKHByb3BOYW1lKTtcclxuICAgICAgICAgIGVudGl0eVBhdGhBcnJheS5wdXNoKFxyXG4gICAgICAgICAgICB0aGlzLmNyZWF0ZVByaW1hcnlLZXlQYXRoKGN1cnJlbnRCaW5kaW5nT2JqZWN0LnByaW1hcnlLZXksIGN1cnJlbnRCaW5kaW5nT2JqZWN0LnByaW1hcnlLZXlWYWx1ZSlcclxuICAgICAgICAgICk7XHJcbiAgICAgICAgICBicmVhaztcclxuICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICBicmVhaztcclxuICAgICAgfVxyXG4gICAgfSk7XHJcblxyXG4gICAgcmV0dXJuIGVudGl0eVBhdGhBcnJheTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOWIm+W7uui3r+W+hOS4reeahOS4u+mUrumDqOWIhlxyXG4gICAqL1xyXG4gIHB1YmxpYyBzdGF0aWMgY3JlYXRlUHJpbWFyeUtleVBhdGgocHJpbWFyeUtleTogc3RyaW5nLCBwcmltYXJ5S2V5VmFsdWU6IHN0cmluZykge1xyXG4gICAgcmV0dXJuIGAke3ByaW1hcnlLZXl9OiR7cHJpbWFyeUtleVZhbHVlfWA7XHJcbiAgfVxyXG5cclxufVxyXG5cclxuZXhwb3J0IHsgRW50aXR5UGF0aENvbnZlcnRlciB9O1xyXG4iXX0=