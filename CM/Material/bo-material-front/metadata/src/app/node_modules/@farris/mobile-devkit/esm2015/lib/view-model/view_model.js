import { MetadataUtil } from '../core/index';
import { Repository } from '../repository/index';
import { CommandBus } from '../command/index';
import { BindingData } from '../binding-data/index';
import { UIState } from '../ui-state/index';
import { StateMachine } from '../state-machine/index';
import { Form } from '../form/index';
import { ViewModelContext } from './view_model_context';
import { COMMAND_METHOD_META } from './decorators';
import { EMPTY, from, of } from 'rxjs';
import { concatMap, every, tap } from 'rxjs/operators';
class ViewModel {
    /**
     * 构造函数
     */
    constructor(injector, id) {
        this.injector = injector;
        this.id = id;
    }
    /**
     * 初始化
     */
    init() {
        this.initRepository();
        this.initContext();
        this.initBindingData();
        this.initUIState();
        this.intiStateMachine();
        this.initForm();
        this.initCommandBus();
        this.registerWithParent();
        this.initListeners();
        this.closeOldBeSession();
    }
    initRepository() {
        this.repository = this.injector.get(Repository);
    }
    initContext() {
        this.context = this.injector.get(ViewModelContext);
        this.context.init(this);
    }
    initBindingData() {
        this.bindingData = this.context.injector.get(BindingData);
        this.entityValueChangingListeners = new Map();
        this.entityValueChangedListeners = new Map();
        if (this.bindingData) {
            this.bindingData.setValueChangeInvokerFactory((paths) => {
                return (preValue, value, entityChanged, primaryValue) => {
                    const plainPath = '/' + paths.join('/');
                    let command;
                    if (entityChanged === false) {
                        command = this.entityValueChangingListeners[plainPath];
                    }
                    else {
                        command = this.entityValueChangedListeners[plainPath];
                    }
                    if (!!command) {
                        const change = {
                            paths: paths,
                            preValue: preValue,
                            value: value,
                            changed: entityChanged
                        };
                        const commands = command.split(';').filter(p => p);
                        let valueChangeSuccess = true;
                        return from(commands).pipe(concatMap(item => {
                            if (!valueChangeSuccess) {
                                return EMPTY;
                            }
                            return this[item](change).pipe(tap((result) => {
                                valueChangeSuccess = result;
                            }));
                        }), every((result) => result));
                    }
                    else {
                        return of(true);
                    }
                };
            });
        }
        const repositoryName = this.repository.name;
        const bindingDataManager = this.context.appContext.bindingDataManager;
        const repositoryBindingData = bindingDataManager.getBindingDataByName(repositoryName);
        this.bindingData.initByBindingList(repositoryBindingData.list, this.context);
    }
    initUIState() {
        this.uiState = this.injector.get(UIState);
    }
    intiStateMachine() {
        this.stateMachine = this.injector.get(StateMachine, null);
        if (!this.stateMachine) {
            return;
        }
        this.stateMachine.init(this.context);
    }
    initForm() {
        this.form = this.injector.get(Form, null);
        this.form.init();
    }
    initCommandBus() {
        this.commandBus = this.injector.get(CommandBus);
        this.extendCommandMethods();
    }
    extendCommandMethods() {
        this.ngCommands = MetadataUtil.getPropsMetadatasByName(this.constructor, COMMAND_METHOD_META);
        this.keybindingMap = new Map();
        Object.keys(this.ngCommands).forEach((propName) => {
            const ngCommand = this.ngCommands[propName];
            Object.defineProperty(this, propName, {
                value: (eventParams) => {
                    const command = {
                        name: ngCommand.name,
                        params: ngCommand.params,
                        paramDescriptions: ngCommand.paramDescriptions,
                        eventParam: eventParams || null
                    };
                    return this.commandBus.dispatch(command);
                }
            });
            if (ngCommand.keyBinding) {
                this.keybindingMap.set(propName, ngCommand.keyBinding);
            }
        });
    }
    registerWithParent() {
        const parentContext = this.context.parent;
        if (!parentContext || !parentContext.viewModel || !parentContext.viewModel['childViewModels']) {
            return;
        }
        const parentViewModel = parentContext.viewModel;
        const className = this.constructor.name;
        const propName = parentViewModel['childViewModels'][className];
        parentViewModel[propName] = this;
    }
    /**
     * 关闭老的BeSession
     */
    closeOldBeSession() {
        const allViewModelContexts = this.context.appContext.viewModelContextManager.getContexts();
        if (allViewModelContexts.length === 1 && allViewModelContexts[0] === this.context) {
            this.context.repository.reset();
        }
    }
    /**
   * 从Form获取监听器
   */
    initListeners() {
        const extractPath = (bindingBasePath, bindingPath) => {
            return '/' + bindingBasePath.split('/').concat(bindingPath.split('.')).filter((item) => item.length > 0).join('/');
        };
        if (this.form) {
            const valueChangingListeners = this.form.getEntityValueChangingListeners();
            Object.keys(valueChangingListeners).forEach((bindingPath) => {
                const plainPath = extractPath(this.bindingPath, bindingPath);
                this.entityValueChangingListeners[plainPath] = valueChangingListeners[bindingPath];
            });
            const valueChangedListeners = this.form.getEntityValueChangedListeners();
            Object.keys(valueChangedListeners).forEach((bindingPath) => {
                const plainPath = extractPath(this.bindingPath, bindingPath);
                this.entityValueChangedListeners[plainPath] = valueChangedListeners[bindingPath];
            });
        }
    }
}
export { ViewModel };
//# sourceMappingURL=data:application/json;base64,