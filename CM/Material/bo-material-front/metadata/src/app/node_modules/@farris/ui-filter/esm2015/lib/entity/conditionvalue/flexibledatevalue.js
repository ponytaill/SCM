/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ControlType } from '../controltype';
import { EventEmitter } from '@angular/core';
import { DateTimeHelperService } from '@farris/ui-common/date';
export class FlexibleDateValue {
    /**
     * @param {?=} value
     * @param {?=} single
     */
    constructor(value = { startValue: null, endValue: null, value: null }, single = true) {
        this.clear$ = new EventEmitter();
        this.startValue = value.startValue;
        this.endValue = value.endValue;
        this.value = value.value;
        this.single = single;
    }
    /**
     * @return {?}
     */
    getControlType() {
        return ControlType.FlexibleDate;
    }
    /**
     * @return {?}
     */
    isEmpty() {
        if (this.single) {
            return !this.value;
        }
        else {
            return (this.startValue == null && this.endValue == null);
        }
    }
    /**
     * @return {?}
     */
    clearValue() {
        this.startValue = undefined;
        this.endValue = undefined;
        this.value = undefined;
        this.clear$.emit();
    }
    /**
     * @param {?} value
     * @return {?}
     */
    setOriginalValue(value) {
        throw new Error("Method not implemented.");
    }
    /**
     * @return {?}
     */
    getOriginalValue() {
        return {
            begin: this.startValue,
            end: this.endValue,
            value: this.value
        };
    }
    /**
     * @param {?=} ctrl
     * @return {?}
     */
    getValueText(ctrl) {
        if (this.single) {
            if (this.value == undefined || (!this.value && typeof (this.value) != 'undefined')) {
                return this.value;
            }
            else {
                return '' + this.value;
            }
        }
        else {
            if (this.startValue == undefined && this.endValue == undefined) {
                return '';
            }
            else {
                if (ctrl && ctrl.format) {
                    /** @type {?} */
                    const dateHlp = new DateTimeHelperService();
                    if (this.startValue == undefined) {
                        return ('~' + dateHlp.formatTo(this.endValue, ctrl.format));
                    }
                    else if (this.endValue == undefined) {
                        return (dateHlp.formatTo(this.startValue, ctrl.format) + '~');
                    }
                    else {
                        return dateHlp.formatTo(this.startValue, ctrl.format) + '~' + dateHlp.formatTo(this.endValue, ctrl.format);
                    }
                }
                else {
                    if (this.startValue == undefined) {
                        return ('~' + this.endValue);
                    }
                    else if (this.endValue == undefined) {
                        return (this.startValue + '~');
                    }
                    else {
                        return (this.startValue + '~' + this.endValue);
                    }
                }
            }
        }
    }
}
if (false) {
    /** @type {?} */
    FlexibleDateValue.prototype.startValue;
    /** @type {?} */
    FlexibleDateValue.prototype.endValue;
    /** @type {?} */
    FlexibleDateValue.prototype.value;
    /** @type {?} */
    FlexibleDateValue.prototype.single;
    /** @type {?} */
    FlexibleDateValue.prototype.clear$;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmxleGlibGVkYXRldmFsdWUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZmFycmlzL3VpLWZpbHRlci8iLCJzb3VyY2VzIjpbImxpYi9lbnRpdHkvY29uZGl0aW9udmFsdWUvZmxleGlibGVkYXRldmFsdWUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUNBLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUM3QyxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzdDLE9BQU8sRUFBRSxxQkFBcUIsRUFBRSxNQUFNLHdCQUF3QixDQUFDO0FBRS9ELE1BQU0sT0FBTyxpQkFBaUI7Ozs7O0lBTzFCLFlBQVksUUFBaUUsRUFBRSxVQUFVLEVBQUUsSUFBSSxFQUFFLFFBQVEsRUFBRSxJQUFJLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBRSxFQUFFLFNBQWtCLElBQUk7UUFGdEosV0FBTSxHQUFHLElBQUksWUFBWSxFQUFFLENBQUM7UUFHeEIsSUFBSSxDQUFDLFVBQVUsR0FBRyxLQUFLLENBQUMsVUFBVSxDQUFDO1FBQ25DLElBQUksQ0FBQyxRQUFRLEdBQUcsS0FBSyxDQUFDLFFBQVEsQ0FBQztRQUMvQixJQUFJLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQyxLQUFLLENBQUM7UUFDekIsSUFBSSxDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUM7SUFDekIsQ0FBQzs7OztJQUVELGNBQWM7UUFDVixPQUFPLFdBQVcsQ0FBQyxZQUFZLENBQUM7SUFDcEMsQ0FBQzs7OztJQUNELE9BQU87UUFDSCxJQUFJLElBQUksQ0FBQyxNQUFNLEVBQUU7WUFDYixPQUFPLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQztTQUN0QjthQUFNO1lBQ0gsT0FBTyxDQUFDLElBQUksQ0FBQyxVQUFVLElBQUksSUFBSSxJQUFJLElBQUksQ0FBQyxRQUFRLElBQUksSUFBSSxDQUFDLENBQUM7U0FDN0Q7SUFDTCxDQUFDOzs7O0lBQ0QsVUFBVTtRQUNOLElBQUksQ0FBQyxVQUFVLEdBQUcsU0FBUyxDQUFDO1FBQzVCLElBQUksQ0FBQyxRQUFRLEdBQUcsU0FBUyxDQUFDO1FBQzFCLElBQUksQ0FBQyxLQUFLLEdBQUcsU0FBUyxDQUFDO1FBQ3ZCLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxFQUFFLENBQUM7SUFDdkIsQ0FBQzs7Ozs7SUFDRCxnQkFBZ0IsQ0FBQyxLQUFVO1FBQ3ZCLE1BQU0sSUFBSSxLQUFLLENBQUMseUJBQXlCLENBQUMsQ0FBQztJQUMvQyxDQUFDOzs7O0lBQ0QsZ0JBQWdCO1FBQ1osT0FBTztZQUNILEtBQUssRUFBRSxJQUFJLENBQUMsVUFBVTtZQUN0QixHQUFHLEVBQUUsSUFBSSxDQUFDLFFBQVE7WUFDbEIsS0FBSyxFQUFFLElBQUksQ0FBQyxLQUFLO1NBQ3BCLENBQUM7SUFDTixDQUFDOzs7OztJQUdELFlBQVksQ0FBQyxJQUFVO1FBQ25CLElBQUksSUFBSSxDQUFDLE1BQU0sRUFBRTtZQUNiLElBQUksSUFBSSxDQUFDLEtBQUssSUFBSSxTQUFTLElBQUksQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLElBQUksT0FBTyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxXQUFXLENBQUMsRUFBRTtnQkFDaEYsT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDO2FBQ3JCO2lCQUNJO2dCQUNELE9BQU8sRUFBRSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUM7YUFDMUI7U0FDSjthQUNJO1lBQ0QsSUFBSSxJQUFJLENBQUMsVUFBVSxJQUFJLFNBQVMsSUFBSSxJQUFJLENBQUMsUUFBUSxJQUFJLFNBQVMsRUFBRTtnQkFDNUQsT0FBTyxFQUFFLENBQUM7YUFDYjtpQkFBTTtnQkFDSCxJQUFJLElBQUksSUFBSSxJQUFJLENBQUMsTUFBTSxFQUFFOzswQkFDZixPQUFPLEdBQUcsSUFBSSxxQkFBcUIsRUFBRTtvQkFDM0MsSUFBSSxJQUFJLENBQUMsVUFBVSxJQUFJLFNBQVMsRUFBRTt3QkFDOUIsT0FBTyxDQUFDLEdBQUcsR0FBSSxPQUFPLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7cUJBQ2hFO3lCQUNJLElBQUksSUFBSSxDQUFDLFFBQVEsSUFBSSxTQUFTLEVBQUU7d0JBQ2pDLE9BQU8sQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxVQUFVLEVBQUUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLEdBQUcsQ0FBQyxDQUFDO3FCQUNqRTt5QkFDSTt3QkFDRCxPQUFPLE9BQU8sQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLFVBQVUsRUFBRSxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUUsR0FBRyxHQUFFLE9BQU8sQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBRSxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7cUJBQzVHO2lCQUNKO3FCQUFNO29CQUNILElBQUksSUFBSSxDQUFDLFVBQVUsSUFBSSxTQUFTLEVBQUU7d0JBQzlCLE9BQU8sQ0FBQyxHQUFHLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO3FCQUNoQzt5QkFDSSxJQUFJLElBQUksQ0FBQyxRQUFRLElBQUksU0FBUyxFQUFFO3dCQUNqQyxPQUFPLENBQUMsSUFBSSxDQUFDLFVBQVUsR0FBRyxHQUFHLENBQUMsQ0FBQztxQkFDbEM7eUJBQ0k7d0JBQ0QsT0FBTyxDQUFDLElBQUksQ0FBQyxVQUFVLEdBQUcsR0FBRyxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztxQkFDbEQ7aUJBQ0o7YUFDSjtTQUNKO0lBQ0wsQ0FBQztDQUNKOzs7SUEvRUcsdUNBQW1COztJQUNuQixxQ0FBaUI7O0lBQ2pCLGtDQUFjOztJQUNkLG1DQUFnQjs7SUFDaEIsbUNBQTRCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSVZhbHVlIH0gZnJvbSAnLi9pdmFsdWUnO1xyXG5pbXBvcnQgeyBDb250cm9sVHlwZSB9IGZyb20gJy4uL2NvbnRyb2x0eXBlJztcclxuaW1wb3J0IHsgRXZlbnRFbWl0dGVyIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IERhdGVUaW1lSGVscGVyU2VydmljZSB9IGZyb20gJ0BmYXJyaXMvdWktY29tbW9uL2RhdGUnO1xyXG5cclxuZXhwb3J0IGNsYXNzIEZsZXhpYmxlRGF0ZVZhbHVlIGltcGxlbWVudHMgSVZhbHVlIHtcclxuICAgIHN0YXJ0VmFsdWU6IHN0cmluZztcclxuICAgIGVuZFZhbHVlOiBzdHJpbmc7XHJcbiAgICB2YWx1ZTogc3RyaW5nO1xyXG4gICAgc2luZ2xlOiBib29sZWFuO1xyXG4gICAgY2xlYXIkID0gbmV3IEV2ZW50RW1pdHRlcigpO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKHZhbHVlOiB7IHN0YXJ0VmFsdWU6IHN0cmluZywgZW5kVmFsdWU6IHN0cmluZywgdmFsdWU6IHN0cmluZyB9ID0geyBzdGFydFZhbHVlOiBudWxsLCBlbmRWYWx1ZTogbnVsbCwgdmFsdWU6IG51bGwgfSwgc2luZ2xlOiBib29sZWFuID0gdHJ1ZSkge1xyXG4gICAgICAgIHRoaXMuc3RhcnRWYWx1ZSA9IHZhbHVlLnN0YXJ0VmFsdWU7XHJcbiAgICAgICAgdGhpcy5lbmRWYWx1ZSA9IHZhbHVlLmVuZFZhbHVlO1xyXG4gICAgICAgIHRoaXMudmFsdWUgPSB2YWx1ZS52YWx1ZTtcclxuICAgICAgICB0aGlzLnNpbmdsZSA9IHNpbmdsZTtcclxuICAgIH1cclxuXHJcbiAgICBnZXRDb250cm9sVHlwZSgpOiBDb250cm9sVHlwZSB7XHJcbiAgICAgICAgcmV0dXJuIENvbnRyb2xUeXBlLkZsZXhpYmxlRGF0ZTtcclxuICAgIH1cclxuICAgIGlzRW1wdHkoKTogYm9vbGVhbiB7XHJcbiAgICAgICAgaWYgKHRoaXMuc2luZ2xlKSB7XHJcbiAgICAgICAgICAgIHJldHVybiAhdGhpcy52YWx1ZTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICByZXR1cm4gKHRoaXMuc3RhcnRWYWx1ZSA9PSBudWxsICYmIHRoaXMuZW5kVmFsdWUgPT0gbnVsbCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgY2xlYXJWYWx1ZSgpOiB2b2lkIHtcclxuICAgICAgICB0aGlzLnN0YXJ0VmFsdWUgPSB1bmRlZmluZWQ7XHJcbiAgICAgICAgdGhpcy5lbmRWYWx1ZSA9IHVuZGVmaW5lZDtcclxuICAgICAgICB0aGlzLnZhbHVlID0gdW5kZWZpbmVkO1xyXG4gICAgICAgIHRoaXMuY2xlYXIkLmVtaXQoKTtcclxuICAgIH1cclxuICAgIHNldE9yaWdpbmFsVmFsdWUodmFsdWU6IGFueSk6IHZvaWQge1xyXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIk1ldGhvZCBub3QgaW1wbGVtZW50ZWQuXCIpO1xyXG4gICAgfVxyXG4gICAgZ2V0T3JpZ2luYWxWYWx1ZSgpIHtcclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICBiZWdpbjogdGhpcy5zdGFydFZhbHVlLFxyXG4gICAgICAgICAgICBlbmQ6IHRoaXMuZW5kVmFsdWUsXHJcbiAgICAgICAgICAgIHZhbHVlOiB0aGlzLnZhbHVlXHJcbiAgICAgICAgfTtcclxuICAgIH1cclxuXHJcblxyXG4gICAgZ2V0VmFsdWVUZXh0KGN0cmw/OiBhbnkpOiBhbnkge1xyXG4gICAgICAgIGlmICh0aGlzLnNpbmdsZSkge1xyXG4gICAgICAgICAgICBpZiAodGhpcy52YWx1ZSA9PSB1bmRlZmluZWQgfHwgKCF0aGlzLnZhbHVlICYmIHR5cGVvZiAodGhpcy52YWx1ZSkgIT0gJ3VuZGVmaW5lZCcpKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy52YWx1ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiAnJyArIHRoaXMudmFsdWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLnN0YXJ0VmFsdWUgPT0gdW5kZWZpbmVkICYmIHRoaXMuZW5kVmFsdWUgPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gJyc7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoY3RybCAmJiBjdHJsLmZvcm1hdCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGRhdGVIbHAgPSBuZXcgRGF0ZVRpbWVIZWxwZXJTZXJ2aWNlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuc3RhcnRWYWx1ZSA9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICgnficgKyAgZGF0ZUhscC5mb3JtYXRUbyh0aGlzLmVuZFZhbHVlLCBjdHJsLmZvcm1hdCkpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBlbHNlIGlmICh0aGlzLmVuZFZhbHVlID09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gKGRhdGVIbHAuZm9ybWF0VG8odGhpcy5zdGFydFZhbHVlLCBjdHJsLmZvcm1hdCkgKyAnficpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGRhdGVIbHAuZm9ybWF0VG8odGhpcy5zdGFydFZhbHVlLCBjdHJsLmZvcm1hdCkgKyd+JysgZGF0ZUhscC5mb3JtYXRUbyh0aGlzLmVuZFZhbHVlLCBjdHJsLmZvcm1hdCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5zdGFydFZhbHVlID09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gKCd+JyArIHRoaXMuZW5kVmFsdWUpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBlbHNlIGlmICh0aGlzLmVuZFZhbHVlID09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gKHRoaXMuc3RhcnRWYWx1ZSArICd+Jyk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gKHRoaXMuc3RhcnRWYWx1ZSArICd+JyArIHRoaXMuZW5kVmFsdWUpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG4iXX0=