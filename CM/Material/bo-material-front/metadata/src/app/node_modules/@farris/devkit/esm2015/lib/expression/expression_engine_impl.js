import { Injectable, Injector } from "@angular/core";
import { ExpressionRegistry } from "./expression_registry";
import { ExpressionEventEmitter } from "./expression_event_emitter";
import { Expression } from './types';
import { ResolverRegistry, ResolveService } from "../resolver/index";
import { EventHandlerRegistry } from "../event-handler/index";
import { Core } from "../core/index";
export class ExpressionEngineImpl {
    constructor(injector, expressionRegistry, expressionEventEmitter, resolverRegistry, eventHandlerRegistry, resolveService) {
        this.injector = injector;
        this.expressionRegistry = expressionRegistry;
        this.expressionEventEmitter = expressionEventEmitter;
        this.resolverRegistry = resolverRegistry;
        this.eventHandlerRegistry = eventHandlerRegistry;
        this.resolveService = resolveService;
        this.expressionObjects = new Array();
        this.expressionRegistry.expressions.subscribe((exprs) => {
            if (exprs && exprs.length > 0) {
                this.expressionObjects = exprs;
                // 解析表达式依赖
                this.resolveDependency();
            }
            this.attachEvent();
        });
    }
    attachEvent() {
        this.expressionEventEmitter.attach().subscribe((events) => {
            if (!events || events.length < 1 || !this.expressionObjects || this.expressionObjects.length < 1) {
                return;
            }
            events.forEach((event) => {
                const handler = this.getEventHandler(event);
                if (handler) {
                    handler.handleEvent(event, this.expressionObjects);
                }
                else {
                    Core.warn(`没有对应的事件处理器,event=${event.type}`);
                }
            });
        });
    }
    /**
     * 解析表达式依赖
     * @returns
     */
    resolveDependency() {
        if (!this.resolverRegistry || !this.resolverRegistry.resolvers || this.resolverRegistry.resolvers.length < 1 || !this.expressionObjects || this.expressionObjects.length < 1 || !Array.isArray(this.expressionObjects)) {
            return;
        }
        this.expressionObjects.forEach((expressionObject) => {
            const expression = expressionObject.expression;
            const dependencies = this.resolveService.resolve(expression);
            expressionObject.deps = dependencies;
        });
    }
    /**
     * 获取表达式事件处理器
     * @param event event
     * @returns
     */
    getEventHandler(event) {
        if (event.type === Expression.EventType.ValueChanged) {
            // 实体值变化
            if (event.source === Expression.EventSource.BindingData) {
                return this.eventHandlerRegistry.bindingDataValueChangeEventHandler;
            }
            else if (event.source === Expression.EventSource.Field) {
                return this.eventHandlerRegistry.entityValueChangedEventHandler;
            }
            else if (event.source === Expression.EventSource.State) {
                return this.eventHandlerRegistry.stateValueChangedEventHandler;
            }
        }
        else if (event.type === Expression.EventType.Append) {
            if (event.source === Expression.EventSource.Repository || event.source === Expression.EventSource.Field) {
                return this.eventHandlerRegistry.repositoryAddEntityEventHandler;
            }
            else if (event.source === Expression.EventSource.BindingData) {
                return this.eventHandlerRegistry.bindingDataAppendEntityEventHandler;
            }
        }
        else if (event.type === Expression.EventType.Remove) {
            if (event.source === Expression.EventSource.Repository || event.source === Expression.EventSource.Field) {
                return this.eventHandlerRegistry.repositoryRemoveEntityEventHandler;
            }
            else if (event.source === Expression.EventSource.BindingData) {
                return this.eventHandlerRegistry.bindingDataRemoveObjectEventHandler;
            }
        }
        else if (event.type === Expression.EventType.Update) {
            if (event.source === Expression.EventSource.Repository) {
                return this.eventHandlerRegistry.entityUpdateEventHandler;
            }
        }
        else if (event.type === Expression.EventType.Load) {
            if (event.source === Expression.EventSource.Repository || event.source === Expression.EventSource.Field) {
                return this.eventHandlerRegistry.repositoryLoadEventHandler;
            }
            else if (event.source === Expression.EventSource.BindingData) {
                return this.eventHandlerRegistry.bindingDataLoadEventHandler;
            }
        }
        else if (event.type === Expression.EventType.SelectionChanged) {
            if (event.source === Expression.EventSource.BindingData) {
                return this.eventHandlerRegistry.bindingDataSelectionChangedHandler;
            }
        }
        return null;
    }
}
ExpressionEngineImpl.decorators = [
    { type: Injectable }
];
/** @nocollapse */
ExpressionEngineImpl.ctorParameters = () => [
    { type: Injector },
    { type: ExpressionRegistry },
    { type: ExpressionEventEmitter },
    { type: ResolverRegistry },
    { type: EventHandlerRegistry },
    { type: ResolveService }
];
//# sourceMappingURL=data:application/json;base64,