import { Directive, Input, Injector, Optional } from '@angular/core';
import { FrameContext, ChangeType } from '@farris/devkit';
import { FFilePreviewComponent, UploadAndPreviewComponent } from '@farris/extend-file-upload';
/**
 * 树表格绑定指令
 */
class FarrisFilePreviewBindingDirective {
    /**
     * 构造函数
     */
    constructor(previewComponent, frameContext, uploadAndPreviewComponent, injector) {
        this.previewComponent = previewComponent;
        this.frameContext = frameContext;
        this.uploadAndPreviewComponent = uploadAndPreviewComponent;
        this.injector = injector;
    }
    /**
     * 绑定数据
     */
    get bindingData() {
        return this.frameContext.bindingData;
    }
    /**
     * 绑定数据列表
     */
    get bindingList() {
        return this.bindingData.getList();
    }
    /**
     * 指令初始化
     */
    ngOnInit() {
        this.bindData();
        this.uploadAndPreviewComponent.orderField = 'fileSortOrder';
        this.bindingData.changes.subscribe((change) => {
            if (change.type === ChangeType.Load
                || change.type === ChangeType.Append
                || change.type === ChangeType.Remove) {
                this.bindData();
            }
        });
    }
    /**
     * 指令输入变更
     */
    ngOnChanges(changes) {
    }
    /**
     * 绑定数据
     */
    bindData() {
        const fileInfos = this.getFileInfos();
        if (this.componentRef) {
            this.componentRef.fileInfos = fileInfos;
        }
    }
    /**
     * 获取附件信息列表
     */
    getFileInfos() {
        const listData = this.bindingList.toJSON();
        const idKey = this.bindingList.primaryKey;
        const fileInfos = [];
        listData.forEach((itemData) => {
            const id = this.getValueByPath(itemData, idKey);
            const fileId = this.getValueByPath(itemData, this.fileIdKey);
            const fileName = this.getValueByPath(itemData, this.fileNameKey);
            const fileSize = this.getValueByPath(itemData, this.fileSizeKey);
            const fileCreateTime = this.getValueByPath(itemData, this.fileCreateTimeKey);
            const fileInfo = {
                id: fileId,
                name: fileName,
                size: fileSize,
                createTime: fileCreateTime,
                originalData: itemData,
                extend: {
                    metadataId: fileId
                }
            };
            if (this.extendFileInfo && Array.isArray(this.extendFileInfo) && this.extendFileInfo.length > 0) {
                this.extendFileInfo.forEach(item => {
                    fileInfo[item.key] = this.getValueByPath(itemData, item.path);
                });
            }
            if (this.fileSortOrderKey) {
                const fileSortOrder = this.getValueByPath(itemData, this.fileSortOrderKey);
                fileInfo.fileSortOrder = fileSortOrder;
            }
            fileInfos.push(fileInfo);
        });
        return fileInfos;
    }
    /**
     * 根据字段路径获取值
     */
    getValueByPath(data, path) {
        const keys = path.split('.');
        let currentValue = data;
        keys.forEach((key) => {
            currentValue = currentValue && currentValue[key];
        });
        return currentValue;
    }
    getUdtPaths() {
        const paths = this.fileIdKey.split('.');
        paths.pop();
        return paths;
    }
    get fileSizeKey() {
        const basePaths = this.getUdtPaths();
        return basePaths.concat(['fileSize']).join('.');
    }
    get fileCreateTimeKey() {
        const basePaths = this.getUdtPaths();
        return basePaths.concat(['fileCreateTime']).join('.');
    }
    get componentRef() {
        return this.previewComponent || this.uploadAndPreviewComponent || null;
    }
}
FarrisFilePreviewBindingDirective.decorators = [
    { type: Directive, args: [{
                selector: '[farrisFilePreviewBinding]'
            },] }
];
/** @nocollapse */
FarrisFilePreviewBindingDirective.ctorParameters = () => [
    { type: FFilePreviewComponent, decorators: [{ type: Optional }] },
    { type: FrameContext },
    { type: UploadAndPreviewComponent, decorators: [{ type: Optional }] },
    { type: Injector, decorators: [{ type: Optional }] }
];
FarrisFilePreviewBindingDirective.propDecorators = {
    extendFileInfo: [{ type: Input, args: ['extendFileInfo',] }],
    fileIdKey: [{ type: Input, args: ['farrisFileIdKey',] }],
    fileSortOrderKey: [{ type: Input, args: ['farrisFileSortOrderKey',] }],
    fileNameKey: [{ type: Input, args: ['farrisFileNameKey',] }]
};
export { FarrisFilePreviewBindingDirective };
//# sourceMappingURL=data:application/json;base64,