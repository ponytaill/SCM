/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { of } from 'rxjs';
import { debounceTime, switchMap } from 'rxjs/operators';
import { LookupLeftComponent } from '../lookup-left.component';
export class LookupComponentManager {
    /**
     * @param {?} ins
     */
    constructor(ins) {
        this.ins = ins;
    }
    /**
     * @param {?=} type
     * @return {?}
     */
    getComponentInstance(type = 'datatable') {
        if (!this.ins.componentRef || !this.ins.componentRef.instance) {
            return null;
        }
        if (type === 'selected') {
            return this.ins.multiSelectDT;
        }
        /** @type {?} */
        let ins = this.ins.componentRef.instance;
        if (type === 'leftDataTable' || type === 'leftTree') {
            /** @type {?} */
            const leftRef = this.ins.leftComponentRef;
            if (!leftRef || !leftRef.instance || !leftRef.instance.cmpRef || !leftRef.instance.cmpRef.instance) {
                return null;
            }
            ins = this.ins.leftComponentRef.instance.cmpRef.instance;
        }
        if (type === 'fav') {
            ins = this.ins.favoritesComponentRef.instance;
        }
        switch (type) {
            case 'leftDataTable':
            case 'fav':
            case 'datatable':
                return (/** @type {?} */ (ins));
            case 'leftTree':
            case 'treetable':
                return (/** @type {?} */ (ins));
            default:
                if (this.ins.isTree()) {
                    return (/** @type {?} */ (ins));
                }
                return (/** @type {?} */ (ins));
        }
    }
    /**
     * @param {?} data
     * @return {?}
     */
    createComponentWithServerData(data) {
        if (this.ins.componentRef) {
            return;
        }
        this.ins.idField = data.idField || this.ins.idField;
        this.ins.textField = data.textField || this.ins.textField;
        this.ins.valueField = data.valueField || this.ins.valueField;
        this.ins.displayType = (data && data.displayType) || this.ins.displayType || 'LIST';
        this.ins.componentRef = this.createContent(this.ins.gridOptions);
        this.createFavoriteComponent();
        this.resizeComponent();
    }
    /**
     * @return {?}
     */
    createFavoriteComponent() {
        if (this.ins.useFavorite && !this.ins.favoritesComponentRef) {
            this.ins.favoriteColumns = this.ins.favHelper.getFavoriteColumns();
            /** @type {?} */
            const favoritesOptions = Object.assign({}, this.ins.gridOptions, {
                showFilterBar: false,
                pagination: false,
                columns: this.ins.favoriteColumns || []
            });
            this.ins.favoritesComponentRef = this.createFavoritesContent(favoritesOptions);
            this.resizeComponent('fav');
        }
    }
    /**
     * @private
     * @param {?} expandLevel
     * @return {?}
     */
    reloadTreeDataForExpand(expandLevel) {
        /** @type {?} */
        const uri = this.ins.gridOptions.uri;
        /** @type {?} */
        const tt = (/** @type {?} */ (this.ins.componentRef.instance));
        const { field = '*', value = '' } = Object.assign({}, tt.searchData);
        /** @type {?} */
        const search = { category: 'all', searchValue: value, searchField: field, layerNum: expandLevel };
        /** @type {?} */
        const param = {
            searchValue: JSON.stringify(search),
            customData: this.ins.customData,
            enableFullTree: this.ins.enableFullTree,
            loadTreeDataType: this.ins.loadTreeDataType
        };
        if (this.ins.helpId) {
            param['helpId'] = this.ins.helpId;
        }
        if (tt && tt.sortName) {
            Object.assign(param, {
                sortName: tt.sortName,
                sortOrder: tt.sortOrder
            });
        }
        this.ins.showLoading();
        return this.ins.http.getData(uri, param).subscribe((/**
         * @param {?} data
         * @return {?}
         */
        (data) => {
            this.ins.closeLoading();
            /** @type {?} */
            const nodes = this.ins.checkNodeCanBeSelect(data.items, expandLevel === -1);
            this.ins.items = nodes;
            tt.loadData(nodes);
        }));
    }
    /**
     * @private
     * @param {?} nodes
     * @param {?} level
     * @return {?}
     */
    setTreeNodeExpandBy(nodes, level) {
        if (!nodes || !nodes.length) {
            return;
        }
        nodes.forEach((/**
         * @param {?} n
         * @return {?}
         */
        (n) => {
            /** @type {?} */
            const layer = n.data[this.ins.treeInfo.dataField].layer;
            /** @type {?} */
            const expandLayer = layer + level - 1;
            n.expanded = layer <= expandLayer ? true : n.expanded;
            if (n.children && n.children.length && layer + 1 <= expandLayer) {
                this.setTreeNodeExpandBy(n.children, level);
            }
        }));
    }
    // 启用树帮助右键菜单功能
    /**
     * @private
     * @param {?} cmpRef
     * @return {?}
     */
    useContextMenuForTree(cmpRef) {
        const { maxLevel, enableContextMenu, language } = this.ins.treeTableOptions;
        if (enableContextMenu && maxLevel) {
            /** @type {?} */
            const levelMenus = [];
            for (let i = 1; i <= maxLevel; i++) {
                /** @type {?} */
                const title = language['expand' + i];
                levelMenus.push({ id: 30 + 1, code: i, title, handle: (/**
                     * @param {?} t
                     * @return {?}
                     */
                    (t) => {
                        // 发送请求获取数据
                        /** @type {?} */
                        const level = t.menu.code;
                        if (isLoadAllTreeData()) {
                            this.setTreeNodeExpandBy(this.ins.items, level);
                            cmpRef.instance.updateSerializedValue();
                        }
                        else {
                            const { dataField, layerField } = this.ins.treeInfo;
                            /** @type {?} */
                            const firstNodeData = (this.ins.items || [])[0];
                            if (firstNodeData && firstNodeData.data) {
                                /** @type {?} */
                                const minLayer = this.ins.utils.getValue(`${dataField}.${layerField}`, firstNodeData.data);
                                /** @type {?} */
                                let _level = minLayer + level - 1;
                                this.reloadTreeDataForExpand(_level);
                            }
                        }
                    }) });
            }
            /** @type {?} */
            const isLoadAllTreeData = (/**
             * @return {?}
             */
            () => {
                if (this.ins.loadTreeDataType === 'default') {
                    return cmpRef.instance.loadDataType === 'all';
                }
                else {
                    return this.ins.loadTreeDataType === 'loadall';
                }
            });
            /** @type {?} */
            const contextMenus = [
                {
                    id: 1, code: 'expandall', title: language.expandall, handle: (/**
                     * @param {?} t
                     * @return {?}
                     */
                    (t) => {
                        if (cmpRef && isLoadAllTreeData()) {
                            cmpRef.instance.expandAll();
                        }
                        else {
                            // 发送请求获取数据
                            this.reloadTreeDataForExpand(-1);
                        }
                    })
                },
                { id: 2, code: 'collapseall', title: language.collapseall, handle: (/**
                     * @param {?} t
                     * @return {?}
                     */
                    (t) => {
                        if (cmpRef) {
                            cmpRef.instance.collapseAll();
                        }
                    }) },
                '-',
                {
                    id: 3, title: language.expandByLayer,
                    children: levelMenus
                }
            ];
            this.ins.treeTableOptions.contextMenuItems = contextMenus;
            cmpRef.instance.beforeShowContextMenu = (/**
             * @return {?}
             */
            () => {
                return of({ show: !cmpRef.instance.state.searched });
            });
        }
    }
    /**
     * @param {?} opts
     * @return {?}
     */
    createContent(opts) {
        if (this.ins.componentRef) {
            return;
        }
        /** @type {?} */
        const type = this.ins.getComponentType();
        /** @type {?} */
        const dtFac = this.ins.cfr.resolveComponentFactory(type);
        /** @type {?} */
        let cmpRef = null;
        if (this.ins.isDoublleList()) {
            cmpRef = this.ins.centerContainer.createComponent(dtFac);
        }
        else {
            cmpRef = this.ins.contentContainer.createComponent(dtFac);
        }
        if (this.ins.isTree()) {
            opts.fit = true;
            opts.pagination = false;
            if (this.ins.useFavorite) {
                opts.fitColumns = false;
                opts.autoFitColumns = true;
            }
            this.useContextMenuForTree(cmpRef);
        }
        else {
            opts.fill = true;
        }
        /** @type {?} */
        const ttOpts = this.ins.treeTableOptions || {};
        Object.assign(cmpRef.instance, opts, Object.assign({ allColumnsTitle: this.ins.allColumnsTitle }, ttOpts));
        this.ins.componentRef = cmpRef;
        this.resizeComponent();
        return cmpRef;
    }
    // 创建收藏CMP
    /**
     * @param {?} opts
     * @return {?}
     */
    createFavoritesContent(opts) {
        /** @type {?} */
        const type = this.ins.getComponentType();
        /** @type {?} */
        const dtFac = this.ins.cfr.resolveComponentFactory(type);
        /** @type {?} */
        let cmpRef = null;
        cmpRef = this.ins.favoritesContainer.createComponent(dtFac);
        if (this.ins.isTree()) {
            opts.fit = true;
            opts.pagination = false;
        }
        else {
            opts.fill = true;
        }
        Object.assign(cmpRef.instance, opts, {
            width: this.ins.dialog.size.width - 20,
            height: this.ins.dialogMgr.getHeight()
        });
        // 订阅收藏夹列表中组件的相关事件
        this.ins.favHelper.initFavoriteComponentEvent(cmpRef);
        return cmpRef;
    }
    /**
     * @param {?=} type
     * @return {?}
     */
    resizeComponent(type = 'datatable') {
        /** @type {?} */
        const size = {
            width: this.ins.dialog.size.width - 20,
            height: this.ins.dialogMgr.getHeight()
        };
        if (this.ins.isDoublleList() && (type === 'datatable' || type === 'treetable')) {
            size.width = this.ins.dialog.size.width - this.ins.leftPanelWidth - 27;
        }
        this.getComponentInstance(type).resize(size);
    }
    /**
     * 创建左侧组件
     * @param {?} ops
     * @return {?}
     */
    createLeftComponent(ops) {
        /** @type {?} */
        let dtFac = null;
        if (this.ins.isDoublleList()) {
            dtFac = this.ins.cfr.resolveComponentFactory(LookupLeftComponent);
        }
        this.ins.leftComponentRef = this.ins.leftContainer.createComponent(dtFac);
        ops.height = this.ins.dialogMgr.getHeight();
        if (this.ins.dialogWidth < this.ins.navLookupDialogMinWidth) {
            this.ins.dialogWidth = this.ins.navLookupDialogMinWidth;
            this.ins.dialog.reSize({ width: this.ins.dialogWidth });
            this.ins.resizeCmp({ width: this.ins.dialog.size.width });
        }
        if (ops.width !== this.ins.leftPanel.width) {
            // 默认 1 : 2
            this.ins.leftPanel.resize({
                width: this.ins.leftPanel.width,
                height: ops.height
            });
            this.ins.resizeCmp({ width: this.ins.dialog.size.width });
        }
        // this.resizeComponent();
        this.ins.leftComponentRef.instance.lookupCmp = this.ins;
        this.ins.leftComponentRef.instance.navOptions = ops;
        this.ins.leftComponentRef.instance.selected
            .pipe(debounceTime(100), switchMap((/**
         * @param {?} d
         * @return {?}
         */
        (d) => {
            if (d && d.data) {
                this.ins.navigationFilter = {
                    selected: d.data,
                    idValue: this.getNavigationFilter(d.data),
                    searchField: '',
                    searchValue: ''
                };
            }
            else {
                this.ins.navigationFilter = undefined;
            }
            // 加载右侧数据
            /** @type {?} */
            const p = {
                pageInfo: {
                    pageIndex: this.ins.gridOptions.pageIndex,
                    pageSize: this.ins.gridOptions.pageSize
                }
            };
            Object.assign(p, { search: this.ins._searchState });
            return this.ins.httpMgr.getData(p, 'list');
        })))
            .subscribe((/**
         * @param {?} res
         * @return {?}
         */
        res => {
            this.ins.closeLoading();
            this.ins.loadDataWhenOpen = true;
            if (this.ins.useFavorite && !this.ins.isTree()) {
                this.ins.favHelper.updateFavoritesStatus(res.items);
            }
            this.ins.loadDataTableData(res);
            setTimeout((/**
             * @return {?}
             */
            () => {
                // 选中数据
                this.ins.selectionMgr.selectCurrentValue();
                this.ins.changeDetector.detectChanges();
            }));
        }));
        return this.ins.leftComponentRef.instance.createComponent();
    }
    // 获取关联数据, 右侧数据中 关联各字段的值
    /**
     * @private
     * @param {?} navRow
     * @return {?}
     */
    getNavigationFilter(navRow) {
        if (this.ins.navigationOptions.relations && this.ins.navigationOptions.relations.length) {
            /** @type {?} */
            const result = [];
            this.ins.navigationOptions.relations.forEach((/**
             * @param {?} r
             * @return {?}
             */
            r => {
                /** @type {?} */
                const k = r.groupField;
                /** @type {?} */
                const dField = r.helpField;
                /** @type {?} */
                const rf = { fieldName: dField, fieldValue: '' };
                rf.fieldValue = k.split('.').reduce((/**
                 * @param {?} o
                 * @param {?} c
                 * @return {?}
                 */
                (o, c) => {
                    return o[c];
                }), navRow);
                result.push(rf);
            }));
            return result;
        }
        return '';
    }
}
if (false) {
    /**
     * @type {?}
     * @private
     */
    LookupComponentManager.prototype.ins;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9va3VwLWNvbXBvbmVudC5tYW5hZ2VyLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGZhcnJpcy91aS1sb29rdXAvIiwic291cmNlcyI6WyJsaWIvc2VydmljZXMvbG9va3VwLWNvbXBvbmVudC5tYW5hZ2VyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFHQSxPQUFPLEVBQUUsRUFBRSxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBQzFCLE9BQU8sRUFBRSxZQUFZLEVBQUUsU0FBUyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFHekQsT0FBTyxFQUFFLG1CQUFtQixFQUFFLE1BQU0sMEJBQTBCLENBQUM7QUFHL0QsTUFBTSxPQUFPLHNCQUFzQjs7OztJQUMvQixZQUFvQixHQUF3QjtRQUF4QixRQUFHLEdBQUgsR0FBRyxDQUFxQjtJQUFHLENBQUM7Ozs7O0lBRWhELG9CQUFvQixDQUFDLE9BQThCLFdBQVc7UUFDMUQsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsWUFBWSxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxZQUFZLENBQUMsUUFBUSxFQUFFO1lBQzNELE9BQU8sSUFBSSxDQUFDO1NBQ2Y7UUFFRCxJQUFJLElBQUksS0FBSyxVQUFVLEVBQUU7WUFDckIsT0FBTyxJQUFJLENBQUMsR0FBRyxDQUFDLGFBQWEsQ0FBQztTQUNqQzs7WUFFRyxHQUFHLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxZQUFZLENBQUMsUUFBUTtRQUV4QyxJQUFJLElBQUksS0FBSyxlQUFlLElBQUksSUFBSSxLQUFLLFVBQVUsRUFBRTs7a0JBQzNDLE9BQU8sR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLGdCQUFnQjtZQUN6QyxJQUFJLENBQUMsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLFFBQVEsSUFBSSxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsTUFBTSxJQUFJLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsUUFBUSxFQUFFO2dCQUNo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QixDQUFDLEdBQUUsTUFBTSxDQUFDLENBQUM7Z0JBRVgsTUFBTSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQztZQUNwQixDQUFDLEVBQUMsQ0FBQztZQUNILE9BQU8sTUFBTSxDQUFDO1NBQ2pCO1FBRUQsT0FBTyxFQUFFLENBQUM7SUFDZCxDQUFDO0NBQ0o7Ozs7OztJQXZXZSxxQ0FBZ0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnRSZWYgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgRGF0YVRhYmxlQ29tcG9uZW50IH0gZnJvbSAnQGZhcnJpcy91aS1kYXRhdGFibGUnO1xyXG5pbXBvcnQgeyBUcmVlTm9kZSwgVHJlZVRhYmxlQ29tcG9uZW50IH0gZnJvbSAnQGZhcnJpcy91aS10cmVldGFibGUnO1xyXG5pbXBvcnQgeyBvZiB9IGZyb20gJ3J4anMnO1xyXG5pbXBvcnQgeyBkZWJvdW5jZVRpbWUsIHN3aXRjaE1hcCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcclxuaW1wb3J0IHsgQ29tcG9uZW50SW5zdGFuY2VUeXBlIH0gZnJvbSAnLi4vbG9va3VwLWRpc3BsYXl0eXBlJztcclxuaW1wb3J0IHsgTG9va3VwR3JpZENvbXBvbmVudCB9IGZyb20gJy4uL2xvb2t1cC1ncmlkLmNvbXBvbmVudCc7XHJcbmltcG9ydCB7IExvb2t1cExlZnRDb21wb25lbnQgfSBmcm9tICcuLi9sb29rdXAtbGVmdC5jb21wb25lbnQnO1xyXG5cclxuXHJcbmV4cG9ydCBjbGFzcyBMb29rdXBDb21wb25lbnRNYW5hZ2VyIHtcclxuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgaW5zOiBMb29rdXBHcmlkQ29tcG9uZW50KSB7fVxyXG5cclxuICAgIGdldENvbXBvbmVudEluc3RhbmNlKHR5cGU6IENvbXBvbmVudEluc3RhbmNlVHlwZSA9ICdkYXRhdGFibGUnKSB7XHJcbiAgICAgICAgaWYgKCF0aGlzLmlucy5jb21wb25lbnRSZWYgfHwgIXRoaXMuaW5zLmNvbXBvbmVudFJlZi5pbnN0YW5jZSkge1xyXG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICh0eXBlID09PSAnc2VsZWN0ZWQnKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmlucy5tdWx0aVNlbGVjdERUO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgbGV0IGlucyA9IHRoaXMuaW5zLmNvbXBvbmVudFJlZi5pbnN0YW5jZTtcclxuXHJcbiAgICAgICAgaWYgKHR5cGUgPT09ICdsZWZ0RGF0YVRhYmxlJyB8fCB0eXBlID09PSAnbGVmdFRyZWUnKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGxlZnRSZWYgPSB0aGlzLmlucy5sZWZ0Q29tcG9uZW50UmVmO1xyXG4gICAgICAgICAgICBpZiAoIWxlZnRSZWYgfHwgIWxlZnRSZWYuaW5zdGFuY2UgfHwgIWxlZnRSZWYuaW5zdGFuY2UuY21wUmVmIHx8ICFsZWZ0UmVmLmluc3RhbmNlLmNtcFJlZi5pbnN0YW5jZSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaW5zID0gdGhpcy5pbnMubGVmdENvbXBvbmVudFJlZi5pbnN0YW5jZS5jbXBSZWYuaW5zdGFuY2U7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAodHlwZSA9PT0gJ2ZhdicpIHtcclxuICAgICAgICAgICAgaW5zID0gdGhpcy5pbnMuZmF2b3JpdGVzQ29tcG9uZW50UmVmLmluc3RhbmNlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgc3dpdGNoICh0eXBlKSB7XHJcbiAgICAgICAgICAgIGNhc2UgJ2xlZnREYXRhVGFibGUnOlxyXG4gICAgICAgICAgICBjYXNlICdmYXYnOlxyXG4gICAgICAgICAgICBjYXNlICdkYXRhdGFibGUnOlxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGlucyBhcyBEYXRhVGFibGVDb21wb25lbnQ7XHJcbiAgICAgICAgICAgIGNhc2UgJ2xlZnRUcmVlJzpcclxuICAgICAgICAgICAgY2FzZSAndHJlZXRhYmxlJzpcclxuICAgICAgICAgICAgICAgIHJldHVybiBpbnMgYXMgVHJlZVRhYmxlQ29tcG9uZW50O1xyXG4gICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuaW5zLmlzVHJlZSgpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGlucyBhcyBUcmVlVGFibGVDb21wb25lbnQ7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gaW5zIGFzIERhdGFUYWJsZUNvbXBvbmVudDtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgY3JlYXRlQ29tcG9uZW50V2l0aFNlcnZlckRhdGEoZGF0YTogYW55KSB7XHJcbiAgICAgICAgaWYgKHRoaXMuaW5zLmNvbXBvbmVudFJlZikge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuaW5zLmlkRmllbGQgPSBkYXRhLmlkRmllbGQgfHwgdGhpcy5pbnMuaWRGaWVsZDtcclxuICAgICAgICB0aGlzLmlucy50ZXh0RmllbGQgPSBkYXRhLnRleHRGaWVsZCB8fCB0aGlzLmlucy50ZXh0RmllbGQ7XHJcbiAgICAgICAgdGhpcy5pbnMudmFsdWVGaWVsZCA9IGRhdGEudmFsdWVGaWVsZCB8fCB0aGlzLmlucy52YWx1ZUZpZWxkO1xyXG5cclxuICAgICAgICB0aGlzLmlucy5kaXNwbGF5VHlwZSA9IChkYXRhICYmIGRhdGEuZGlzcGxheVR5cGUpIHx8IHRoaXMuaW5zLmRpc3BsYXlUeXBlIHx8ICdMSVNUJztcclxuICAgICAgICB0aGlzLmlucy5jb21wb25lbnRSZWYgPSB0aGlzLmNyZWF0ZUNvbnRlbnQodGhpcy5pbnMuZ3JpZE9wdGlvbnMpO1xyXG4gICAgICAgIHRoaXMuY3JlYXRlRmF2b3JpdGVDb21wb25lbnQoKTtcclxuXHJcbiAgICAgICAgdGhpcy5yZXNpemVDb21wb25lbnQoKTtcclxuICAgIH1cclxuXHJcblxyXG4gICAgY3JlYXRlRmF2b3JpdGVDb21wb25lbnQoKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuaW5zLnVzZUZhdm9yaXRlICYmICF0aGlzLmlucy5mYXZvcml0ZXNDb21wb25lbnRSZWYpIHtcclxuICAgICAgICAgICAgdGhpcy5pbnMuZmF2b3JpdGVDb2x1bW5zID0gdGhpcy5pbnMuZmF2SGVscGVyLmdldEZhdm9yaXRlQ29sdW1ucygpO1xyXG4gICAgICAgICAgICBjb25zdCBmYXZvcml0ZXNPcHRpb25zID0gT2JqZWN0LmFzc2lnbih7fSwgdGhpcy5pbnMuZ3JpZE9wdGlvbnMsIHtcclxuICAgICAgICAgICAgICAgIHNob3dGaWx0ZXJCYXI6IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgcGFnaW5hdGlvbjogZmFsc2UsXHJcbiAgICAgICAgICAgICAgICBjb2x1bW5zOiB0aGlzLmlucy5mYXZvcml0ZUNvbHVtbnMgfHwgW11cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIHRoaXMuaW5zLmZhdm9yaXRlc0NvbXBvbmVudFJlZiA9IHRoaXMuY3JlYXRlRmF2b3JpdGVzQ29udGVudChmYXZvcml0ZXNPcHRpb25zKTtcclxuXHJcbiAgICAgICAgICAgIHRoaXMucmVzaXplQ29tcG9uZW50KCdmYXYnKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG5cclxuICAgIHByaXZhdGUgcmVsb2FkVHJlZURhdGFGb3JFeHBhbmQoZXhwYW5kTGV2ZWwpIHtcclxuICAgICAgICBjb25zdCB1cmkgPSB0aGlzLmlucy5ncmlkT3B0aW9ucy51cmk7XHJcbiAgICAgICAgY29uc3QgdHQgPSB0aGlzLmlucy5jb21wb25lbnRSZWYuaW5zdGFuY2UgYXMgVHJlZVRhYmxlQ29tcG9uZW50O1xyXG4gICAgICAgIGNvbnN0IHsgZmllbGQgPSAnKicsIHZhbHVlID0gJycgfSA9IHtcclxuICAgICAgICAgICAgLi4udHQuc2VhcmNoRGF0YVxyXG4gICAgICAgIH07XHJcbiAgICAgICAgY29uc3Qgc2VhcmNoID0geyBjYXRlZ29yeTogJ2FsbCcsIHNlYXJjaFZhbHVlOiB2YWx1ZSwgc2VhcmNoRmllbGQ6IGZpZWxkLCBsYXllck51bTogZXhwYW5kTGV2ZWwgfTtcclxuXHJcblxyXG4gICAgICAgIGNvbnN0IHBhcmFtID0ge1xyXG4gICAgICAgICAgICBzZWFyY2hWYWx1ZTogSlNPTi5zdHJpbmdpZnkoc2VhcmNoKSxcclxuICAgICAgICAgICAgY3VzdG9tRGF0YTogdGhpcy5pbnMuY3VzdG9tRGF0YSxcclxuICAgICAgICAgICAgZW5hYmxlRnVsbFRyZWU6IHRoaXMuaW5zLmVuYWJsZUZ1bGxUcmVlLFxyXG4gICAgICAgICAgICBsb2FkVHJlZURhdGFUeXBlOiB0aGlzLmlucy5sb2FkVHJlZURhdGFUeXBlXHJcbiAgICAgICAgfTtcclxuXHJcblxyXG4gICAgICAgIGlmICh0aGlzLmlucy5oZWxwSWQpIHtcclxuICAgICAgICAgICAgcGFyYW1bJ2hlbHBJZCddID0gdGhpcy5pbnMuaGVscElkO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKHR0ICYmIHR0LnNvcnROYW1lKSB7XHJcbiAgICAgICAgICAgIE9iamVjdC5hc3NpZ24ocGFyYW0sIHtcclxuICAgICAgICAgICAgICAgIHNvcnROYW1lOiB0dC5zb3J0TmFtZSxcclxuICAgICAgICAgICAgICAgIHNvcnRPcmRlcjogdHQuc29ydE9yZGVyXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLmlucy5zaG93TG9hZGluZygpO1xyXG4gICAgICAgIHJldHVybiB0aGlzLmlucy5odHRwLmdldERhdGEodXJpLCBwYXJhbSkuc3Vic2NyaWJlKChkYXRhOiBhbnkpID0+IHtcclxuICAgICAgICAgICAgdGhpcy5pbnMuY2xvc2VMb2FkaW5nKCk7XHJcbiAgICAgICAgICAgIGNvbnN0IG5vZGVzID0gdGhpcy5pbnMuY2hlY2tOb2RlQ2FuQmVTZWxlY3QoZGF0YS5pdGVtcywgZXhwYW5kTGV2ZWwgPT09IC0xKTtcclxuICAgICAgICAgICAgdGhpcy5pbnMuaXRlbXMgPSBub2RlcztcclxuICAgICAgICAgICAgdHQubG9hZERhdGEobm9kZXMpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgc2V0VHJlZU5vZGVFeHBhbmRCeShub2RlczogVHJlZU5vZGVbXSwgbGV2ZWwpIHtcclxuICAgICAgICBpZiAoIW5vZGVzIHx8ICFub2Rlcy5sZW5ndGgpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICBub2Rlcy5mb3JFYWNoKChuOiBUcmVlTm9kZSkgPT4ge1xyXG4gICAgICAgICAgICBjb25zdCBsYXllciA9IG4uZGF0YVt0aGlzLmlucy50cmVlSW5mby5kYXRhRmllbGRdLmxheWVyO1xyXG5cclxuICAgICAgICAgICAgY29uc3QgZXhwYW5kTGF5ZXIgPSBsYXllciArIGxldmVsIC0gMTtcclxuXHJcbiAgICAgICAgICAgIG4uZXhwYW5kZWQgPSBsYXllciA8PSBleHBhbmRMYXllciA/IHRydWUgOiBuLmV4cGFuZGVkO1xyXG4gICAgICAgICAgICBpZiAobi5jaGlsZHJlbiAmJiBuLmNoaWxkcmVuLmxlbmd0aCAmJiBsYXllciArIDEgPD0gZXhwYW5kTGF5ZXIpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuc2V0VHJlZU5vZGVFeHBhbmRCeShuLmNoaWxkcmVuLCBsZXZlbCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICAvLyDlkK/nlKjmoJHluK7liqnlj7PplK7oj5zljZXlip/og71cclxuICAgIHByaXZhdGUgdXNlQ29udGV4dE1lbnVGb3JUcmVlKGNtcFJlZjogQ29tcG9uZW50UmVmPGFueT4pIHtcclxuICAgICAgICBjb25zdCB7IG1heExldmVsLCBlbmFibGVDb250ZXh0TWVudSwgbGFuZ3VhZ2UgfSA9IHRoaXMuaW5zLnRyZWVUYWJsZU9wdGlvbnM7XHJcbiAgICAgICAgaWYgKGVuYWJsZUNvbnRleHRNZW51ICYmIG1heExldmVsKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGxldmVsTWVudXMgPSBbXTtcclxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDE7IGkgPD0gbWF4TGV2ZWw7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgdGl0bGUgPSBsYW5ndWFnZVsnZXhwYW5kJyArIGldO1xyXG4gICAgICAgICAgICAgICAgbGV2ZWxNZW51cy5wdXNoKHsgaWQ6IDMwICsgMSwgY29kZTogaSwgdGl0bGUsIGhhbmRsZTogKHQpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAvLyDlj5HpgIHor7fmsYLojrflj5bmlbDmja5cclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBsZXZlbCA9IHQubWVudS5jb2RlO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChpc0xvYWRBbGxUcmVlRGF0YSgpICkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnNldFRyZWVOb2RlRXhwYW5kQnkodGhpcy5pbnMuaXRlbXMsIGxldmVsKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY21wUmVmLmluc3RhbmNlLnVwZGF0ZVNlcmlhbGl6ZWRWYWx1ZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHsgZGF0YUZpZWxkLCBsYXllckZpZWxkIH0gPSB0aGlzLmlucy50cmVlSW5mbztcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgZmlyc3ROb2RlRGF0YSA9ICh0aGlzLmlucy5pdGVtcyB8fCBbXSlbMF07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChmaXJzdE5vZGVEYXRhICYmIGZpcnN0Tm9kZURhdGEuZGF0YSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgbWluTGF5ZXIgPSB0aGlzLmlucy51dGlscy5nZXRWYWx1ZShgJHtkYXRhRmllbGR9LiR7bGF5ZXJGaWVsZH1gLCBmaXJzdE5vZGVEYXRhLmRhdGEpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IF9sZXZlbCA9IG1pbkxheWVyICsgbGV2ZWwgLSAxO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5yZWxvYWRUcmVlRGF0YUZvckV4cGFuZChfbGV2ZWwpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSB9KTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgY29uc3QgaXNMb2FkQWxsVHJlZURhdGEgPSAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5pbnMubG9hZFRyZWVEYXRhVHlwZSA9PT0gJ2RlZmF1bHQnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGNtcFJlZi5pbnN0YW5jZS5sb2FkRGF0YVR5cGUgPT09ICdhbGwnO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5pbnMubG9hZFRyZWVEYXRhVHlwZSA9PT0gJ2xvYWRhbGwnO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgY29uc3QgY29udGV4dE1lbnVzID0gW1xyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIGlkOiAxLCBjb2RlOiAnZXhwYW5kYWxsJywgdGl0bGU6IGxhbmd1YWdlLmV4cGFuZGFsbCwgaGFuZGxlOiAodCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoY21wUmVmICYmIGlzTG9hZEFsbFRyZWVEYXRhKCkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNtcFJlZi5pbnN0YW5jZS5leHBhbmRBbGwoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIOWPkemAgeivt+axguiOt+WPluaVsOaNrlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5yZWxvYWRUcmVlRGF0YUZvckV4cGFuZCgtMSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgeyBpZDogMiwgY29kZTogJ2NvbGxhcHNlYWxsJywgdGl0bGU6IGxhbmd1YWdlLmNvbGxhcHNlYWxsLCBoYW5kbGU6ICh0KSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGNtcFJlZikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjbXBSZWYuaW5zdGFuY2UuY29sbGFwc2VBbGwoKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9IH0sXHJcbiAgICAgICAgICAgICAgICAnLScsXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWQ6IDMsIHRpdGxlOiBsYW5ndWFnZS5leHBhbmRCeUxheWVyLFxyXG4gICAgICAgICAgICAgICAgICAgIGNoaWxkcmVuOiBsZXZlbE1lbnVzXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIF07XHJcbiAgICAgICAgICAgIHRoaXMuaW5zLnRyZWVUYWJsZU9wdGlvbnMuY29udGV4dE1lbnVJdGVtcyA9IGNvbnRleHRNZW51cztcclxuXHJcbiAgICAgICAgICAgIGNtcFJlZi5pbnN0YW5jZS5iZWZvcmVTaG93Q29udGV4dE1lbnUgPSAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gb2Yoe3Nob3c6ICFjbXBSZWYuaW5zdGFuY2Uuc3RhdGUuc2VhcmNoZWR9KTtcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG5cclxuICAgIGNyZWF0ZUNvbnRlbnQob3B0czogYW55KTogQ29tcG9uZW50UmVmPGFueT4ge1xyXG5cclxuICAgICAgICBpZiAodGhpcy5pbnMuY29tcG9uZW50UmVmKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNvbnN0IHR5cGUgPSB0aGlzLmlucy5nZXRDb21wb25lbnRUeXBlKCk7XHJcblxyXG4gICAgICAgIGNvbnN0IGR0RmFjID0gdGhpcy5pbnMuY2ZyLnJlc29sdmVDb21wb25lbnRGYWN0b3J5KHR5cGUpO1xyXG4gICAgICAgIGxldCBjbXBSZWY6IENvbXBvbmVudFJlZjxhbnk+ID0gbnVsbDtcclxuICAgICAgICBpZiAodGhpcy5pbnMuaXNEb3VibGxlTGlzdCgpKSB7XHJcbiAgICAgICAgICAgIGNtcFJlZiA9IHRoaXMuaW5zLmNlbnRlckNvbnRhaW5lci5jcmVhdGVDb21wb25lbnQoZHRGYWMpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGNtcFJlZiA9IHRoaXMuaW5zLmNvbnRlbnRDb250YWluZXIuY3JlYXRlQ29tcG9uZW50KGR0RmFjKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICh0aGlzLmlucy5pc1RyZWUoKSkge1xyXG4gICAgICAgICAgICBvcHRzLmZpdCA9IHRydWU7XHJcbiAgICAgICAgICAgIG9wdHMucGFnaW5hdGlvbiA9IGZhbHNlO1xyXG4gICAgICAgICAgICBpZiAodGhpcy5pbnMudXNlRmF2b3JpdGUpIHtcclxuICAgICAgICAgICAgICAgIG9wdHMuZml0Q29sdW1ucyA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgb3B0cy5hdXRvRml0Q29sdW1ucyA9IHRydWU7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHRoaXMudXNlQ29udGV4dE1lbnVGb3JUcmVlKGNtcFJlZik7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgb3B0cy5maWxsID0gdHJ1ZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNvbnN0IHR0T3B0cyA9IHRoaXMuaW5zLnRyZWVUYWJsZU9wdGlvbnMgfHwge307XHJcbiAgICAgICAgT2JqZWN0LmFzc2lnbihjbXBSZWYuaW5zdGFuY2UsIG9wdHMsIHsgYWxsQ29sdW1uc1RpdGxlOiB0aGlzLmlucy5hbGxDb2x1bW5zVGl0bGUsIC4uLnR0T3B0cyB9KTtcclxuXHJcbiAgICAgICAgdGhpcy5pbnMuY29tcG9uZW50UmVmID0gY21wUmVmO1xyXG4gICAgICAgIHRoaXMucmVzaXplQ29tcG9uZW50KCk7XHJcbiAgICAgICAgcmV0dXJuIGNtcFJlZjtcclxuICAgIH1cclxuXHJcbiAgICAvLyDliJvlu7rmlLbol49DTVBcclxuICAgIGNyZWF0ZUZhdm9yaXRlc0NvbnRlbnQob3B0czogYW55KTogQ29tcG9uZW50UmVmPGFueT4ge1xyXG5cclxuICAgICAgICBjb25zdCB0eXBlID0gdGhpcy5pbnMuZ2V0Q29tcG9uZW50VHlwZSgpO1xyXG5cclxuICAgICAgICBjb25zdCBkdEZhYyA9IHRoaXMuaW5zLmNmci5yZXNvbHZlQ29tcG9uZW50RmFjdG9yeSh0eXBlKTtcclxuICAgICAgICBsZXQgY21wUmVmID0gbnVsbDtcclxuICAgICAgICBjbXBSZWYgPSB0aGlzLmlucy5mYXZvcml0ZXNDb250YWluZXIuY3JlYXRlQ29tcG9uZW50KGR0RmFjKTtcclxuXHJcbiAgICAgICAgaWYgKHRoaXMuaW5zLmlzVHJlZSgpKSB7XHJcbiAgICAgICAgICAgIG9wdHMuZml0ID0gdHJ1ZTtcclxuICAgICAgICAgICAgb3B0cy5wYWdpbmF0aW9uID0gZmFsc2U7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgb3B0cy5maWxsID0gdHJ1ZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIE9iamVjdC5hc3NpZ24oY21wUmVmLmluc3RhbmNlLCBvcHRzLCB7XHJcbiAgICAgICAgICAgIHdpZHRoOiB0aGlzLmlucy5kaWFsb2cuc2l6ZS53aWR0aCAtIDIwLFxyXG4gICAgICAgICAgICBoZWlnaHQ6IHRoaXMuaW5zLmRpYWxvZ01nci5nZXRIZWlnaHQoKVxyXG4gICAgICAgIH0pO1xyXG5cclxuXHJcbiAgICAgICAgLy8g6K6i6ZiF5pS26JeP5aS55YiX6KGo5Lit57uE5Lu255qE55u45YWz5LqL5Lu2XHJcbiAgICAgICAgdGhpcy5pbnMuZmF2SGVscGVyLmluaXRGYXZvcml0ZUNvbXBvbmVudEV2ZW50KGNtcFJlZik7XHJcblxyXG4gICAgICAgIHJldHVybiBjbXBSZWY7XHJcbiAgICB9XHJcblxyXG4gICAgcmVzaXplQ29tcG9uZW50KHR5cGU6IENvbXBvbmVudEluc3RhbmNlVHlwZSA9ICdkYXRhdGFibGUnKSB7XHJcbiAgICAgICAgY29uc3Qgc2l6ZSA9IHtcclxuICAgICAgICAgICAgd2lkdGg6IHRoaXMuaW5zLmRpYWxvZy5zaXplLndpZHRoIC0gMjAsXHJcbiAgICAgICAgICAgIGhlaWdodDogdGhpcy5pbnMuZGlhbG9nTWdyLmdldEhlaWdodCgpXHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgaWYgKHRoaXMuaW5zLmlzRG91YmxsZUxpc3QoKSAmJiAodHlwZSA9PT0gJ2RhdGF0YWJsZScgfHwgdHlwZSA9PT0gJ3RyZWV0YWJsZScpKSB7XHJcbiAgICAgICAgICAgIHNpemUud2lkdGggPSB0aGlzLmlucy5kaWFsb2cuc2l6ZS53aWR0aCAtIHRoaXMuaW5zLmxlZnRQYW5lbFdpZHRoIC0gMjc7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLmdldENvbXBvbmVudEluc3RhbmNlKHR5cGUpLnJlc2l6ZShzaXplKTtcclxuICAgIH1cclxuXHJcbiAgICAvKiog5Yib5bu65bem5L6n57uE5Lu2ICovXHJcbiAgICBjcmVhdGVMZWZ0Q29tcG9uZW50KG9wczogYW55KSB7XHJcbiAgICAgICAgbGV0IGR0RmFjID0gbnVsbDtcclxuICAgICAgICBpZiAodGhpcy5pbnMuaXNEb3VibGxlTGlzdCgpKSB7XHJcbiAgICAgICAgICAgIGR0RmFjID0gdGhpcy5pbnMuY2ZyLnJlc29sdmVDb21wb25lbnRGYWN0b3J5KExvb2t1cExlZnRDb21wb25lbnQpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLmlucy5sZWZ0Q29tcG9uZW50UmVmID0gdGhpcy5pbnMubGVmdENvbnRhaW5lci5jcmVhdGVDb21wb25lbnQoZHRGYWMpO1xyXG4gICAgICAgIG9wcy5oZWlnaHQgPSB0aGlzLmlucy5kaWFsb2dNZ3IuZ2V0SGVpZ2h0KCk7XHJcblxyXG4gICAgICAgIGlmICh0aGlzLmlucy5kaWFsb2dXaWR0aCA8IHRoaXMuaW5zLm5hdkxvb2t1cERpYWxvZ01pbldpZHRoKSB7XHJcbiAgICAgICAgICAgIHRoaXMuaW5zLmRpYWxvZ1dpZHRoID0gdGhpcy5pbnMubmF2TG9va3VwRGlhbG9nTWluV2lkdGg7XHJcbiAgICAgICAgICAgIHRoaXMuaW5zLmRpYWxvZy5yZVNpemUoeyB3aWR0aDogdGhpcy5pbnMuZGlhbG9nV2lkdGggfSk7XHJcbiAgICAgICAgICAgIHRoaXMuaW5zLnJlc2l6ZUNtcCh7IHdpZHRoOiB0aGlzLmlucy5kaWFsb2cuc2l6ZS53aWR0aCB9KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChvcHMud2lkdGggIT09IHRoaXMuaW5zLmxlZnRQYW5lbC53aWR0aCkge1xyXG4gICAgICAgICAgICAvLyDpu5jorqQgMSA6IDJcclxuICAgICAgICAgICAgdGhpcy5pbnMubGVmdFBhbmVsLnJlc2l6ZSh7XHJcbiAgICAgICAgICAgICAgICB3aWR0aDogdGhpcy5pbnMubGVmdFBhbmVsLndpZHRoLFxyXG4gICAgICAgICAgICAgICAgaGVpZ2h0OiBvcHMuaGVpZ2h0XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB0aGlzLmlucy5yZXNpemVDbXAoeyB3aWR0aDogdGhpcy5pbnMuZGlhbG9nLnNpemUud2lkdGggfSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyB0aGlzLnJlc2l6ZUNvbXBvbmVudCgpO1xyXG5cclxuICAgICAgICB0aGlzLmlucy5sZWZ0Q29tcG9uZW50UmVmLmluc3RhbmNlLmxvb2t1cENtcCA9IHRoaXMuaW5zO1xyXG4gICAgICAgIHRoaXMuaW5zLmxlZnRDb21wb25lbnRSZWYuaW5zdGFuY2UubmF2T3B0aW9ucyA9IG9wcztcclxuXHJcblxyXG4gICAgICAgIHRoaXMuaW5zLmxlZnRDb21wb25lbnRSZWYuaW5zdGFuY2Uuc2VsZWN0ZWRcclxuICAgICAgICAgICAgLnBpcGUoXHJcbiAgICAgICAgICAgICAgICBkZWJvdW5jZVRpbWUoMTAwKSxcclxuICAgICAgICAgICAgICAgIHN3aXRjaE1hcCgoZDogYW55KSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGQgJiYgZC5kYXRhKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuaW5zLm5hdmlnYXRpb25GaWx0ZXIgPSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxlY3RlZDogZC5kYXRhLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWRWYWx1ZTogdGhpcy5nZXROYXZpZ2F0aW9uRmlsdGVyKGQuZGF0YSksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWFyY2hGaWVsZDogJycsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWFyY2hWYWx1ZTogJydcclxuICAgICAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmlucy5uYXZpZ2F0aW9uRmlsdGVyID0gdW5kZWZpbmVkO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAvLyDliqDovb3lj7PkvqfmlbDmja5cclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBwID0ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBwYWdlSW5mbzoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFnZUluZGV4OiB0aGlzLmlucy5ncmlkT3B0aW9ucy5wYWdlSW5kZXgsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYWdlU2l6ZTogdGhpcy5pbnMuZ3JpZE9wdGlvbnMucGFnZVNpemVcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAgICAgT2JqZWN0LmFzc2lnbihwLCB7IHNlYXJjaDogdGhpcy5pbnMuX3NlYXJjaFN0YXRlIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmlucy5odHRwTWdyLmdldERhdGEocCwgJ2xpc3QnKTtcclxuICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgIClcclxuICAgICAgICAgICAgLnN1YnNjcmliZShyZXMgPT4ge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5pbnMuY2xvc2VMb2FkaW5nKCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmlucy5sb2FkRGF0YVdoZW5PcGVuID0gdHJ1ZTtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5pbnMudXNlRmF2b3JpdGUgJiYgIXRoaXMuaW5zLmlzVHJlZSgpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5pbnMuZmF2SGVscGVyLnVwZGF0ZUZhdm9yaXRlc1N0YXR1cyhyZXMuaXRlbXMpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIHRoaXMuaW5zLmxvYWREYXRhVGFibGVEYXRhKHJlcyk7XHJcbiAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAvLyDpgInkuK3mlbDmja5cclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmlucy5zZWxlY3Rpb25NZ3Iuc2VsZWN0Q3VycmVudFZhbHVlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5pbnMuY2hhbmdlRGV0ZWN0b3IuZGV0ZWN0Q2hhbmdlcygpO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICByZXR1cm4gdGhpcy5pbnMubGVmdENvbXBvbmVudFJlZi5pbnN0YW5jZS5jcmVhdGVDb21wb25lbnQoKTtcclxuICAgIH1cclxuXHJcbiAgICAvLyDojrflj5blhbPogZTmlbDmja4sIOWPs+S+p+aVsOaNruS4rSDlhbPogZTlkITlrZfmrrXnmoTlgLxcclxuICAgIHByaXZhdGUgZ2V0TmF2aWdhdGlvbkZpbHRlcihuYXZSb3c6IGFueSkge1xyXG4gICAgICAgIGlmICh0aGlzLmlucy5uYXZpZ2F0aW9uT3B0aW9ucy5yZWxhdGlvbnMgJiYgdGhpcy5pbnMubmF2aWdhdGlvbk9wdGlvbnMucmVsYXRpb25zLmxlbmd0aCkge1xyXG4gICAgICAgICAgICBjb25zdCByZXN1bHQgPSBbXTtcclxuICAgICAgICAgICAgdGhpcy5pbnMubmF2aWdhdGlvbk9wdGlvbnMucmVsYXRpb25zLmZvckVhY2gociA9PiB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBrID0gci5ncm91cEZpZWxkO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgZEZpZWxkID0gci5oZWxwRmllbGQ7XHJcbiAgICAgICAgICAgICAgICBjb25zdCByZiA9IHsgZmllbGROYW1lOiBkRmllbGQsIGZpZWxkVmFsdWU6ICcnIH07XHJcbiAgICAgICAgICAgICAgICByZi5maWVsZFZhbHVlID0gay5zcGxpdCgnLicpLnJlZHVjZSgobywgYykgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBvW2NdO1xyXG4gICAgICAgICAgICAgICAgfSwgbmF2Um93KTtcclxuXHJcbiAgICAgICAgICAgICAgICByZXN1bHQucHVzaChyZik7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuICcnO1xyXG4gICAgfVxyXG59XHJcbiJdfQ==