/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*
 * @Author: 疯狂秀才(Lucas Huang)
 * @LastEditors: 疯狂秀才(Lucas Huang)
 * @Company: Inspur
 * @Version: v0.0.1
 * @Date: 2019-04-09 11:03:49
 * @LastEditTime: 2019-11-30 10:15:14
 */
import { Component, HostBinding, Input, Output, EventEmitter } from '@angular/core';
import { DomSanitizer } from '@angular/platform-browser';
import { FilterService } from './../services/filter.service';
import { Compare } from '@farris/ui-common/types';
var FilterEditorComponent = /** @class */ (function () {
    function FilterEditorComponent(sanitizer, filterService) {
        var _this = this;
        this.sanitizer = sanitizer;
        this.filterService = filterService;
        this.tabIndex = 0;
        this.columns = [];
        this.conditions = [];
        this.showCode = false;
        this.showSql = false;
        this.enableExpress = false;
        this.enableFrontExpress = false;
        this.fieldEditor = { type: 'select', options: {} };
        this.showExpress = new EventEmitter();
        this.cls = 'f-utils-flex-column f-utils-absolute-all';
        this.filterService.conditionsChanged.subscribe((/**
         * @param {?} conditionList
         * @return {?}
         */
        function (conditionList) {
            _this.conditions = conditionList;
        }));
    }
    /**
     * @return {?}
     */
    FilterEditorComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        if (this.conditions && this.conditions.length) {
            this.conditions = this.conditions.map((/**
             * @param {?} con
             * @return {?}
             */
            function (con) {
                /** @type {?} */
                var cp = parseInt('' + con.compare, 10);
                if (cp === Compare.In || cp === Compare.NotIn) {
                    con.value = con.value.replace(/\r\n/g, ',');
                }
                return con;
            }));
        }
    };
    /**
     * @param {?} index
     * @return {?}
     */
    FilterEditorComponent.prototype.onTabChange = /**
     * @param {?} index
     * @return {?}
     */
    function (index) {
        this.tabIndex = index;
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    FilterEditorComponent.prototype.onShowExpress = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        this.showExpress.emit($event);
    };
    FilterEditorComponent.decorators = [
        { type: Component, args: [{
                    selector: 'filter-editor',
                    template: "\n        <filter-tabs\n            class=\"f-utils-fill-flex-column\"\n            [showCode]=\"showCode\"\n            [showSql]=\"showSql\"\n            [columns]=\"columns\"\n            [height]=\"height\"\n            [enableExpress]=\"enableExpress\"\n            [enableFrontExpress]=\"enableFrontExpress\"\n            [conditions]=\"conditions\"\n            [fieldEditor]=\"fieldEditor\"\n            (showExpress)=\"onShowExpress($event)\"\n            (selectTabChange)=\"onTabChange($event)\">\n        </filter-tabs>\n    "
                }] }
    ];
    /** @nocollapse */
    FilterEditorComponent.ctorParameters = function () { return [
        { type: DomSanitizer },
        { type: FilterService }
    ]; };
    FilterEditorComponent.propDecorators = {
        columns: [{ type: Input }],
        conditions: [{ type: Input }],
        height: [{ type: Input }],
        showCode: [{ type: Input }],
        showSql: [{ type: Input }],
        enableExpress: [{ type: Input }],
        enableFrontExpress: [{ type: Input }],
        fieldEditor: [{ type: Input }],
        showExpress: [{ type: Output }],
        cls: [{ type: HostBinding, args: ['class',] }]
    };
    return FilterEditorComponent;
}());
export { FilterEditorComponent };
if (false) {
    /** @type {?} */
    FilterEditorComponent.prototype.tabIndex;
    /** @type {?} */
    FilterEditorComponent.prototype.columns;
    /** @type {?} */
    FilterEditorComponent.prototype.conditions;
    /** @type {?} */
    FilterEditorComponent.prototype.height;
    /** @type {?} */
    FilterEditorComponent.prototype.showCode;
    /** @type {?} */
    FilterEditorComponent.prototype.showSql;
    /** @type {?} */
    FilterEditorComponent.prototype.enableExpress;
    /** @type {?} */
    FilterEditorComponent.prototype.enableFrontExpress;
    /** @type {?} */
    FilterEditorComponent.prototype.fieldEditor;
    /** @type {?} */
    FilterEditorComponent.prototype.showExpress;
    /** @type {?} */
    FilterEditorComponent.prototype.cls;
    /**
     * @type {?}
     * @private
     */
    FilterEditorComponent.prototype.sanitizer;
    /**
     * @type {?}
     * @private
     */
    FilterEditorComponent.prototype.filterService;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmlsdGVyLWVkaXRvci5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZmFycmlzL3VpLWZpbHRlci1lZGl0b3IvIiwic291cmNlcyI6WyJsaWIvY29tcG9uZW50cy9maWx0ZXItZWRpdG9yLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7QUFTQSxPQUFPLEVBQUUsU0FBUyxFQUFVLFdBQVcsRUFBRSxLQUFLLEVBQUUsTUFBTSxFQUFFLFlBQVksRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUM1RixPQUFPLEVBQUUsWUFBWSxFQUFhLE1BQU0sMkJBQTJCLENBQUM7QUFFcEUsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLDhCQUE4QixDQUFDO0FBQzdELE9BQU8sRUFBbUIsT0FBTyxFQUFFLE1BQU0seUJBQXlCLENBQUM7QUFFbkU7SUFpQ0ksK0JBQW9CLFNBQXVCLEVBQVUsYUFBNEI7UUFBakYsaUJBSUM7UUFKbUIsY0FBUyxHQUFULFNBQVMsQ0FBYztRQUFVLGtCQUFhLEdBQWIsYUFBYSxDQUFlO1FBYmpGLGFBQVEsR0FBRyxDQUFDLENBQUM7UUFDSixZQUFPLEdBQUcsRUFBRSxDQUFDO1FBQ2IsZUFBVSxHQUFzQixFQUFFLENBQUM7UUFFbkMsYUFBUSxHQUFHLEtBQUssQ0FBQztRQUNqQixZQUFPLEdBQUcsS0FBSyxDQUFDO1FBQ2hCLGtCQUFhLEdBQUcsS0FBSyxDQUFDO1FBQ3RCLHVCQUFrQixHQUFHLEtBQUssQ0FBQztRQUMzQixnQkFBVyxHQUFJLEVBQUUsSUFBSSxFQUFFLFFBQVEsRUFBRSxPQUFPLEVBQUUsRUFBRSxFQUFDLENBQUM7UUFFN0MsZ0JBQVcsR0FBRyxJQUFJLFlBQVksRUFBRSxDQUFDO1FBQ3JCLFFBQUcsR0FBRywwQ0FBMEMsQ0FBQztRQUduRSxJQUFJLENBQUMsYUFBYSxDQUFDLGlCQUFpQixDQUFDLFNBQVM7Ozs7UUFBQyxVQUFBLGFBQWE7WUFDeEQsS0FBSSxDQUFDLFVBQVUsR0FBRyxhQUFhLENBQUM7UUFDcEMsQ0FBQyxFQUFDLENBQUM7SUFDUCxDQUFDOzs7O0lBRUQsd0NBQVE7OztJQUFSO1FBQ0ksSUFBSSxJQUFJLENBQUMsVUFBVSxJQUFJLElBQUksQ0FBQyxVQUFVLENBQUMsTUFBTSxFQUFFO1lBQzNDLElBQUksQ0FBQyxVQUFVLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQyxHQUFHOzs7O1lBQUMsVUFBQSxHQUFHOztvQkFDL0IsRUFBRSxHQUFHLFFBQVEsQ0FBQyxFQUFFLEdBQUcsR0FBRyxDQUFDLE9BQU8sRUFBRSxFQUFFLENBQUM7Z0JBQ3pDLElBQUksRUFBRSxLQUFLLE9BQU8sQ0FBQyxFQUFFLElBQUksRUFBRSxLQUFLLE9BQU8sQ0FBQyxLQUFLLEVBQUU7b0JBQzNDLEdBQUcsQ0FBQyxLQUFLLEdBQUcsR0FBRyxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsT0FBTyxFQUFFLEdBQUcsQ0FBQyxDQUFDO2lCQUMvQztnQkFDRCxPQUFPLEdBQUcsQ0FBQztZQUNmLENBQUMsRUFBQyxDQUFDO1NBQ047SUFDTCxDQUFDOzs7OztJQUdELDJDQUFXOzs7O0lBQVgsVUFBWSxLQUFhO1FBQ3JCLElBQUksQ0FBQyxRQUFRLEdBQUcsS0FBSyxDQUFDO0lBQzFCLENBQUM7Ozs7O0lBRUQsNkNBQWE7Ozs7SUFBYixVQUFjLE1BQU07UUFDaEIsSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDbEMsQ0FBQzs7Z0JBMURKLFNBQVMsU0FBQztvQkFDUCxRQUFRLEVBQUUsZUFBZTtvQkFDekIsUUFBUSxFQUFFLDJoQkFjVDtpQkFDSjs7OztnQkF0QlEsWUFBWTtnQkFFWixhQUFhOzs7MEJBd0JqQixLQUFLOzZCQUNMLEtBQUs7eUJBQ0wsS0FBSzsyQkFDTCxLQUFLOzBCQUNMLEtBQUs7Z0NBQ0wsS0FBSztxQ0FDTCxLQUFLOzhCQUNMLEtBQUs7OEJBRUwsTUFBTTtzQkFDTixXQUFXLFNBQUMsT0FBTzs7SUE0QnhCLDRCQUFDO0NBQUEsQUEzREQsSUEyREM7U0F4Q1kscUJBQXFCOzs7SUFDOUIseUNBQWE7O0lBQ2Isd0NBQXNCOztJQUN0QiwyQ0FBNEM7O0lBQzVDLHVDQUF3Qjs7SUFDeEIseUNBQTBCOztJQUMxQix3Q0FBeUI7O0lBQ3pCLDhDQUErQjs7SUFDL0IsbURBQW9DOztJQUNwQyw0Q0FBdUQ7O0lBRXZELDRDQUEyQzs7SUFDM0Msb0NBQXVFOzs7OztJQUUzRCwwQ0FBK0I7Ozs7O0lBQUUsOENBQW9DIiwic291cmNlc0NvbnRlbnQiOlsiLypcclxuICogQEF1dGhvcjog55av54uC56eA5omNKEx1Y2FzIEh1YW5nKVxyXG4gKiBATGFzdEVkaXRvcnM6IOeWr+eLguengOaJjShMdWNhcyBIdWFuZylcclxuICogQENvbXBhbnk6IEluc3B1clxyXG4gKiBAVmVyc2lvbjogdjAuMC4xXHJcbiAqIEBEYXRlOiAyMDE5LTA0LTA5IDExOjAzOjQ5XHJcbiAqIEBMYXN0RWRpdFRpbWU6IDIwMTktMTEtMzAgMTA6MTU6MTRcclxuICovXHJcblxyXG5pbXBvcnQgeyBDb21wb25lbnQsIE9uSW5pdCwgSG9zdEJpbmRpbmcsIElucHV0LCBPdXRwdXQsIEV2ZW50RW1pdHRlciB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBEb21TYW5pdGl6ZXIsIFNhZmVTdHlsZSB9IGZyb20gJ0Bhbmd1bGFyL3BsYXRmb3JtLWJyb3dzZXInO1xyXG5cclxuaW1wb3J0IHsgRmlsdGVyU2VydmljZSB9IGZyb20gJy4vLi4vc2VydmljZXMvZmlsdGVyLnNlcnZpY2UnO1xyXG5pbXBvcnQgeyBGaWx0ZXJDb25kaXRpb24sIENvbXBhcmUgfSBmcm9tICdAZmFycmlzL3VpLWNvbW1vbi90eXBlcyc7XHJcblxyXG5AQ29tcG9uZW50KHtcclxuICAgIHNlbGVjdG9yOiAnZmlsdGVyLWVkaXRvcicsXHJcbiAgICB0ZW1wbGF0ZTogYFxyXG4gICAgICAgIDxmaWx0ZXItdGFic1xyXG4gICAgICAgICAgICBjbGFzcz1cImYtdXRpbHMtZmlsbC1mbGV4LWNvbHVtblwiXHJcbiAgICAgICAgICAgIFtzaG93Q29kZV09XCJzaG93Q29kZVwiXHJcbiAgICAgICAgICAgIFtzaG93U3FsXT1cInNob3dTcWxcIlxyXG4gICAgICAgICAgICBbY29sdW1uc109XCJjb2x1bW5zXCJcclxuICAgICAgICAgICAgW2hlaWdodF09XCJoZWlnaHRcIlxyXG4gICAgICAgICAgICBbZW5hYmxlRXhwcmVzc109XCJlbmFibGVFeHByZXNzXCJcclxuICAgICAgICAgICAgW2VuYWJsZUZyb250RXhwcmVzc109XCJlbmFibGVGcm9udEV4cHJlc3NcIlxyXG4gICAgICAgICAgICBbY29uZGl0aW9uc109XCJjb25kaXRpb25zXCJcclxuICAgICAgICAgICAgW2ZpZWxkRWRpdG9yXT1cImZpZWxkRWRpdG9yXCJcclxuICAgICAgICAgICAgKHNob3dFeHByZXNzKT1cIm9uU2hvd0V4cHJlc3MoJGV2ZW50KVwiXHJcbiAgICAgICAgICAgIChzZWxlY3RUYWJDaGFuZ2UpPVwib25UYWJDaGFuZ2UoJGV2ZW50KVwiPlxyXG4gICAgICAgIDwvZmlsdGVyLXRhYnM+XHJcbiAgICBgXHJcbn0pXHJcblxyXG5leHBvcnQgY2xhc3MgRmlsdGVyRWRpdG9yQ29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0IHtcclxuICAgIHRhYkluZGV4ID0gMDtcclxuICAgIEBJbnB1dCgpIGNvbHVtbnMgPSBbXTtcclxuICAgIEBJbnB1dCgpIGNvbmRpdGlvbnM6IEZpbHRlckNvbmRpdGlvbltdID0gW107XHJcbiAgICBASW5wdXQoKSBoZWlnaHQ6IG51bWJlcjtcclxuICAgIEBJbnB1dCgpIHNob3dDb2RlID0gZmFsc2U7XHJcbiAgICBASW5wdXQoKSBzaG93U3FsID0gZmFsc2U7XHJcbiAgICBASW5wdXQoKSBlbmFibGVFeHByZXNzID0gZmFsc2U7XHJcbiAgICBASW5wdXQoKSBlbmFibGVGcm9udEV4cHJlc3MgPSBmYWxzZTtcclxuICAgIEBJbnB1dCgpIGZpZWxkRWRpdG9yICA9IHsgdHlwZTogJ3NlbGVjdCcsIG9wdGlvbnM6IHt9fTtcclxuXHJcbiAgICBAT3V0cHV0KCkgc2hvd0V4cHJlc3MgPSBuZXcgRXZlbnRFbWl0dGVyKCk7XHJcbiAgICBASG9zdEJpbmRpbmcoJ2NsYXNzJykgY2xzID0gJ2YtdXRpbHMtZmxleC1jb2x1bW4gZi11dGlscy1hYnNvbHV0ZS1hbGwnO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgc2FuaXRpemVyOiBEb21TYW5pdGl6ZXIsIHByaXZhdGUgZmlsdGVyU2VydmljZTogRmlsdGVyU2VydmljZSkge1xyXG4gICAgICAgIHRoaXMuZmlsdGVyU2VydmljZS5jb25kaXRpb25zQ2hhbmdlZC5zdWJzY3JpYmUoY29uZGl0aW9uTGlzdCA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMuY29uZGl0aW9ucyA9IGNvbmRpdGlvbkxpc3Q7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgbmdPbkluaXQoKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuY29uZGl0aW9ucyAmJiB0aGlzLmNvbmRpdGlvbnMubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgIHRoaXMuY29uZGl0aW9ucyA9IHRoaXMuY29uZGl0aW9ucy5tYXAoY29uID0+IHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGNwID0gcGFyc2VJbnQoJycgKyBjb24uY29tcGFyZSwgMTApO1xyXG4gICAgICAgICAgICAgICAgaWYgKGNwID09PSBDb21wYXJlLkluIHx8IGNwID09PSBDb21wYXJlLk5vdEluKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uLnZhbHVlID0gY29uLnZhbHVlLnJlcGxhY2UoL1xcclxcbi9nLCAnLCcpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGNvbjtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuXHJcbiAgICBvblRhYkNoYW5nZShpbmRleDogbnVtYmVyKSB7XHJcbiAgICAgICAgdGhpcy50YWJJbmRleCA9IGluZGV4O1xyXG4gICAgfVxyXG5cclxuICAgIG9uU2hvd0V4cHJlc3MoJGV2ZW50KSB7XHJcbiAgICAgICAgdGhpcy5zaG93RXhwcmVzcy5lbWl0KCRldmVudCk7XHJcbiAgICB9XHJcbn1cclxuIl19