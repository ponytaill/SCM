{"version":3,"sources":["ng://@farris/ui-layout/lib/layout.component.ts","ng://@farris/ui-layout/lib/panels/layout-panel.component.ts","ng://@farris/ui-layout/lib/layout.module.ts"],"names":["LayoutComponent","el","render2","injector","this","showBorder","direction","fill","myclass","panels","ngZone","get","NgZone","prototype","ngOnInit","init","ngAfterContentInit","_this","checkPanels","forEach","p","split","margin","region","setStyle","getPanel","nativeElement","runOutsideAngular","setTimeout","setPanelMaxSize","isInLayoutPanel","addClass","parentElement","width","height","getLayoutSize","clientWidth","clientHeight","layoutSize","east","maxWidth","west","south","maxHeight","north","find","length","regions","map","unique","Error","r","arr","tmp","Set","Array","from","attributes","Component","args","selector","template","encapsulation","ViewEncapsulation","Emulated","ElementRef","Renderer2","Injector","Input","HostBinding","LayoutPanelComponent","layout","minHeight","minWidth","title","iconCls","_resizable","bsColClass","resizing","EventEmitter","resized","Object","defineProperty","val","setStyles","rect","getBoundingClientRect","panel","resetFlex","getrzHandler","rzdir","rzHandler","isCenterPanel","ngOnChanges","changes","isFirstChange","getBsClass","classList","c","indexOf","hasBsClass","undefined","initSize","initClass","push","onResizeStart","$event","resize","size","onResized","onReizing","updatePanelSize","emit","target","Output","ViewChild","AngularResizableDirective","LayoutPanelTitleComponent","LayoutModule","NgModule","imports","CommonModule","AngularDraggableModule","declarations","exports","providers"],"mappings":"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","sourcesContent":["import { LayoutPanelComponent } from './panels/layout-panel.component';\r\nimport { Injector, ContentChildren, ViewEncapsulation, Output, EventEmitter, Inject, forwardRef, NgZone } from '@angular/core';\r\n/*\r\n * @Author: ç¯çç§æ(lucas huang)\r\n * @Date: 2018-11-24 15:58:04\r\n * @LastEditors: ç¯çç§æ(Lucas Huang)\r\n * @LastEditTime: 2019-04-08 19:02:25\r\n * @Company: Inspur\r\n * @Version: v0.0.1\r\n */\r\nimport {\r\n    Component, OnInit, Input, QueryList, ViewChildren, HostBinding,\r\n    ElementRef, Renderer2, Directive, AfterContentInit, ViewChild\r\n} from '@angular/core';\r\n\r\n\r\n@Component({\r\n    selector: 'farrisui-layout,farris-layout,layout',\r\n    templateUrl: 'layout.component.html',\r\n    styles: [\r\n        `\r\n        :host.layout-fill {position: absolute; top: 0; right: 0;bottom: 0;left: 0;}\r\n        `\r\n    ],\r\n    encapsulation: ViewEncapsulation.Emulated\r\n})\r\nexport class LayoutComponent implements OnInit, AfterContentInit {\r\n\r\n    @Input() width: number;\r\n    @Input() height: number;\r\n    @Input() showBorder = true;\r\n\r\n    // h: æ°´å¹³æå; v: åç´æå\r\n    @Input() direction: 'h' | 'v' = 'h';\r\n\r\n    @Input() fill = false;\r\n\r\n    @HostBinding('class') myclass = 'd-flex';\r\n\r\n    panels: LayoutPanelComponent[] = [];\r\n\r\n    private ngZone: NgZone;\r\n\r\n    constructor(private el: ElementRef, private render2: Renderer2, private injector: Injector) {\r\n        this.ngZone = this.injector.get(NgZone);\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.init();\r\n    }\r\n\r\n    ngAfterContentInit() {\r\n        this.checkPanels();\r\n\r\n        this.panels.forEach(p => {\r\n            if (p.split) {\r\n                let margin = '';\r\n                switch (p.region) {\r\n                    case 'north':\r\n                        margin = 'marginTop';\r\n                        break;\r\n                    case 'south':\r\n                        margin = 'marginBottom';\r\n                        break;\r\n                    case 'west':\r\n                        margin = 'marginLeft';\r\n                        break;\r\n                    case 'east':\r\n                        margin = 'marginRight';\r\n                        break;\r\n                }\r\n                this.render2.setStyle(this.getPanel('center').el.nativeElement, margin, '5px');\r\n            }\r\n        });\r\n        this.ngZone.runOutsideAngular(() => {\r\n            setTimeout(() => this.setPanelMaxSize());\r\n        });\r\n    }\r\n\r\n    private init() {\r\n        if (this.direction === 'h') {\r\n            this.myclass += ' flex-row';\r\n        } else {\r\n            this.myclass += ' flex-column';\r\n        }\r\n\r\n        if (this.fill) {\r\n            if (this.isInLayoutPanel()) {\r\n                this.myclass += ' flex-fill';\r\n                this.render2.addClass(this.el.nativeElement.parentElement, 'd-flex');\r\n            } else {\r\n                this.myclass += ' layout-fill';\r\n            }\r\n        } else {\r\n            if (this.width) {\r\n                this.render2.setStyle(this.el.nativeElement, 'width', this.width + 'px');\r\n            }\r\n\r\n            if (this.height) {\r\n                this.render2.setStyle(this.el.nativeElement, 'height', this.height + 'px');\r\n            }\r\n        }\r\n    }\r\n\r\n    private getLayoutSize() {\r\n        const size = {\r\n            width: this.el.nativeElement.clientWidth,\r\n            height: this.el.nativeElement.clientHeight\r\n        };\r\n        return size;\r\n    }\r\n\r\n    setPanelMaxSize() {\r\n        const layoutSize = this.getLayoutSize();\r\n        this.panels.forEach(p => {\r\n            if (p.region !== 'center') {\r\n                if (p.region === 'west' && layoutSize.width) {\r\n                    const east = this.getPanel('east');\r\n                    if (!east) {\r\n                        p.maxWidth = layoutSize.width - 100;\r\n                    } else {\r\n                        p.maxWidth = layoutSize.width - east.width - 100;\r\n                    }\r\n                }\r\n\r\n                if (p.region === 'east' && layoutSize.width) {\r\n                    const west = this.getPanel('west');\r\n                    if (!west) {\r\n                        p.maxWidth = layoutSize.width - 100;\r\n                    } else {\r\n                        p.maxWidth = layoutSize.width - west.width - 100;\r\n                    }\r\n                }\r\n\r\n                if (p.region === 'north' && layoutSize.height) {\r\n                    const south = this.getPanel('south');\r\n                    if (!south) {\r\n                        p.maxHeight = layoutSize.height - 100;\r\n                    } else {\r\n                        p.maxHeight = layoutSize.height - south.height - 100;\r\n                    }\r\n                }\r\n\r\n                if (p.region === 'south' && layoutSize.height) {\r\n                    const north = this.getPanel('north');\r\n                    if (!north) {\r\n                        p.maxHeight = layoutSize.height - 100;\r\n                    } else {\r\n                        p.maxHeight = layoutSize.height - north.height - 100;\r\n                    }\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    getPanel(region: string) {\r\n        return this.panels.find(p => p.region === region);\r\n    }\r\n\r\n    private checkPanels() {\r\n        if (this.panels && this.panels.length) {\r\n            const regions = this.panels.map(p => p.region);\r\n            if (this.unique(regions).length === regions.length) {\r\n                if (this.direction === 'h') {\r\n                    if (regions.find(r => r === 'north' || r === 'south')) {\r\n                        throw new Error('æ°´å¹³æ¹åæåæ¶ï¼åªè½åå« east æè west');\r\n                    }\r\n                } else {\r\n                    if (regions.find(r => r === 'west' || r === 'east')) {\r\n                        throw new Error('æ°´å¹³æ¹åæåæ¶ï¼åªè½åå« north æè south');\r\n                    }\r\n                }\r\n                return true;\r\n            } else {\r\n                throw new Error('layout å¸å±å®¹å¨ä¸­å·æéå¤çpanelã');\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    private unique(arr: string[]) {\r\n        const tmp = new Set(arr);\r\n        return Array.from(tmp);\r\n    }\r\n\r\n    private isInLayoutPanel() {\r\n        return !!this.el.nativeElement.parentElement.attributes['layout-panel'];\r\n    }\r\n}\r\n\r\n\r\n","import {\r\n    Component, OnInit, Input, ElementRef, Renderer2, ViewChild,\r\n    Output, EventEmitter, Inject, forwardRef, SimpleChanges, OnChanges, NgZone\r\n} from '@angular/core';\r\nimport { AngularResizableDirective } from '@farris/ui-draggable';\r\nimport { LayoutComponent } from './../layout.component';\r\n\r\n@Component({\r\n    selector: 'layout-panel',\r\n    template: `\r\n        <div #panel #ngResizable class=\"layout-panel\"\r\n            [ngResizable]=\"split\" [attr.region]=\"region\"\r\n            [rzHandles]=\"rzHandler\"\r\n            [rzMinWidth]=\"minWidth\"\r\n            [rzMaxWidth]=\"maxWidth\"\r\n            [rzMinHeight]=\"minHeight\"\r\n            [rzMaxHeight]=\"maxHeight\"\r\n            (rzResizing)=\"onReizing($event)\"\r\n            (rzStop) = \"onResized($event)\"\r\n            (rzStart) =\"onResizeStart($event)\" >\r\n\r\n            <layout-panel-title *ngIf=\"title\" [title]=\"title\"></layout-panel-title>\r\n\r\n            <ng-content></ng-content>\r\n        <div>\r\n    `,\r\n    styleUrls: ['./layout-panel.css']\r\n})\r\nexport class LayoutPanelComponent implements OnInit, OnChanges {\r\n    @Input() region: string;\r\n    @Input() height: number;\r\n    @Input() width: number;\r\n    @Input() minHeight = 50;\r\n    @Input() minWidth = 50;\r\n    @Input() maxHeight: number;\r\n    @Input() maxWidth: number;\r\n    @Input() title = '';\r\n    @Input() iconCls = '';\r\n\r\n    private _resizable = true;\r\n    rzHandler: string;\r\n    private bsColClass = '';\r\n    @Input() get split() {\r\n        return this._resizable;\r\n    }\r\n\r\n    set split(val: boolean) {\r\n        this._resizable = val;\r\n    }\r\n\r\n\r\n    @Input() showBorder = true;\r\n\r\n    @Output() resizing = new EventEmitter();\r\n    @Output() resized = new EventEmitter();\r\n\r\n    @ViewChild('panel') panel: ElementRef;\r\n    @ViewChild(AngularResizableDirective) ngResizable: AngularResizableDirective;\r\n\r\n    private setStyles() {\r\n        // this.ngZone.runOutsideAngular(() => {\r\n            setTimeout(() => {\r\n                let width, height;\r\n                const rect = this.el.nativeElement.getBoundingClientRect();\r\n\r\n                if (this.height) {\r\n                    height = this.height;\r\n                    this.render2.setStyle(this.el.nativeElement, 'height', height + 'px');\r\n                    this.render2.setStyle(this.panel.nativeElement, 'height', height + 'px');\r\n                }\r\n                if (this.width) {\r\n                    width = this.width;\r\n                    if (rect.width > this.width) {\r\n                        width = rect.width;\r\n                        this.width = width;\r\n                    }\r\n                    this.render2.setStyle(this.el.nativeElement, 'width', width + 'px');\r\n                    this.render2.setStyle(this.panel.nativeElement, 'width', width + 'px');\r\n\r\n                    this.resetFlex();\r\n                }\r\n            });\r\n        // });\r\n    }\r\n\r\n    private getrzHandler() {\r\n        if (this.region) {\r\n            let rzdir = '';\r\n            switch (this.region) {\r\n                case 'west':\r\n                    rzdir = 'e';\r\n                    break;\r\n                case 'east':\r\n                    rzdir = 'w';\r\n                    break;\r\n                case 'north':\r\n                    rzdir = 's';\r\n                    break;\r\n                case 'south':\r\n                    rzdir = 'n';\r\n                    break;\r\n            }\r\n\r\n            this.rzHandler = rzdir;\r\n        } else {\r\n            this.rzHandler = '';\r\n        }\r\n    }\r\n\r\n    isCenterPanel() {\r\n        return this.region === 'center';\r\n    }\r\n\r\n    constructor(public el: ElementRef, private render2: Renderer2, private layout: LayoutComponent, private ngZone: NgZone) { }\r\n\r\n    ngOnChanges(changes: SimpleChanges) {\r\n        if (changes.width && !changes.width.isFirstChange()) {\r\n            this.setStyles();\r\n        }\r\n    }\r\n\r\n    private getBsClass() {\r\n        return Array.from<string>(this.el.nativeElement.classList).find((c: string) => c.indexOf('col-') > -1);\r\n    }\r\n    private hasBsClass() {\r\n        return this.getBsClass() !== undefined;\r\n    }\r\n\r\n    private initSize() {\r\n        this.setStyles();\r\n\r\n        if (this.region) {\r\n            if (this.region === 'west' || this.region === 'east') {\r\n                this.render2.setStyle(this.panel.nativeElement, 'height', '100%');\r\n            }\r\n        }\r\n    }\r\n\r\n    private initClass() {\r\n        if (this.isCenterPanel()) {\r\n            this.render2.addClass(this.panel.nativeElement, 'flex-fill');\r\n            if (this.el.nativeElement.parentElement.attributes['layout-panel']) {\r\n                this.render2.addClass(this.el.nativeElement.parentElement, 'd-flex');\r\n            }\r\n\r\n            this.render2.addClass(this.el.nativeElement, 'd-flex');\r\n            this.render2.addClass(this.el.nativeElement, 'flex-fill');\r\n        }\r\n\r\n        if (this.showBorder) {\r\n            this.render2.addClass(this.panel.nativeElement, 'layout-border');\r\n        }\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.initSize();\r\n        this.initClass();\r\n        this.getrzHandler();\r\n\r\n        this.bsColClass = this.getBsClass();\r\n\r\n        this.layout.panels.push(this);\r\n    }\r\n\r\n    onResizeStart($event: any) {\r\n        this.resetFlex();\r\n    }\r\n\r\n    private resetFlex() {\r\n        if (this.region === 'west' || this.region === 'east') {\r\n            this.render2.setStyle(this.el.nativeElement, 'flex', 'none');\r\n            this.render2.setStyle(this.el.nativeElement, 'max-width', 'none');\r\n        }\r\n    }\r\n\r\n    resize(size: { width?: number, height?: number }) {\r\n        this.setStyles();\r\n        this.onResized({ size });\r\n    }\r\n\r\n    onReizing($event: any) {\r\n        this.updatePanelSize($event);\r\n        // console.log($event);\r\n        this.resizing.emit({ target: this, size: $event.size });\r\n    }\r\n\r\n    private updatePanelSize($event: any) {\r\n        if (this.region === 'south') {\r\n            this.render2.setStyle(this.panel.nativeElement, 'top', 0);\r\n        }\r\n        if (this.region === 'east') {\r\n            this.render2.setStyle(this.panel.nativeElement, 'left', 0);\r\n        }\r\n        if (this.region === 'south' || this.region === 'north') {\r\n            this.render2.setStyle(this.el.nativeElement, 'height', $event.size.height + 'px');\r\n        }\r\n        if (this.region === 'west' || this.region === 'east') {\r\n            this.render2.setStyle(this.el.nativeElement, 'width', $event.size.width + 'px');\r\n        }\r\n    }\r\n\r\n    onResized($event: any) {\r\n        if (this.region === 'south' || this.region === 'north') {\r\n            this.height = $event.size.height;\r\n        }\r\n\r\n        if (this.region === 'west' || this.region === 'east') {\r\n            this.width = $event.size.width;\r\n        }\r\n\r\n        this.updatePanelSize($event);\r\n\r\n        this.layout.setPanelMaxSize();\r\n        this.resized.emit($event.size);\r\n        this.layout.getPanel('center').resized.emit($event.size);\r\n    }\r\n}\r\n\r\n@Component({\r\n    selector: 'layout-panel-title',\r\n    template: `\r\n        <div class=\"d-flex flex-row\" style=\"height: 28px; line-height: 28px\">\r\n            <div class=\"layout-panel-title\">\r\n                <span *ngIf=\"iconCls\" [class]=\"iconCls\"></span>\r\n                {{ title }}\r\n            </div>\r\n            <div class=\"layout-panel-title-tools flex-fill\">\r\n\r\n            </div>\r\n        </div>\r\n    `\r\n})\r\nexport class LayoutPanelTitleComponent {\r\n    @Input() title = '';\r\n    @Input() iconCls = '';\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { AngularDraggableModule } from '@farris/ui-draggable';\r\n\r\nimport { LayoutPanelComponent, LayoutPanelTitleComponent } from './panels/layout-panel.component';\r\nimport { LayoutComponent } from './layout.component';\r\n\r\n@NgModule({\r\n    imports: [\r\n        CommonModule,\r\n        AngularDraggableModule\r\n    ],\r\n    declarations: [LayoutComponent, LayoutPanelComponent, LayoutPanelTitleComponent],\r\n    exports: [LayoutComponent, AngularDraggableModule, LayoutPanelComponent],\r\n    providers: [],\r\n})\r\nexport class LayoutModule { }\r\n"]}