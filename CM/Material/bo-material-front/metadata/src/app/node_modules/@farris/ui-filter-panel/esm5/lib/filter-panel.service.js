/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable, ComponentFactoryResolver, Injector, ApplicationRef } from '@angular/core';
import { FilterPanelComponent } from './filter-panel.component';
import * as i0 from "@angular/core";
var FilterPanelService = /** @class */ (function () {
    function FilterPanelService(cfr, injector, appRef) {
        this.cfr = cfr;
        this.injector = injector;
        this.appRef = appRef;
    }
    /**
     * @param {?} option
     * @return {?}
     */
    FilterPanelService.prototype.showPanel = /**
     * @param {?} option
     * @return {?}
     */
    function (option) {
        this.hidePanel();
        /** @type {?} */
        var containerFac = this.cfr.resolveComponentFactory(FilterPanelComponent);
        this.filterPanelContainer = containerFac.create(this.injector);
        this.appRef.attachView(this.filterPanelContainer.hostView);
        document.querySelector('body').appendChild(this.filterPanelContainer.location.nativeElement);
        this.filterPanelContainer.instance.option = option;
        // this.filterPanelContainer.instance.clear.subscribe((event)=>{
        //   this.clear();
        // });
        this.filterPanelContainer.changeDetectorRef.markForCheck();
        this.filterPanelContainer.changeDetectorRef.detectChanges();
        return this.filterPanelContainer.instance;
    };
    /**
     * @return {?}
     */
    FilterPanelService.prototype.hidePanel = /**
     * @return {?}
     */
    function () {
        if (this.filterPanelContainer) {
            this.filterPanelContainer.instance.hide = true;
            this.filterPanelContainer.destroy();
            this.filterPanelContainer = undefined;
        }
    };
    FilterPanelService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */
    FilterPanelService.ctorParameters = function () { return [
        { type: ComponentFactoryResolver },
        { type: Injector },
        { type: ApplicationRef }
    ]; };
    /** @nocollapse */ FilterPanelService.ngInjectableDef = i0.defineInjectable({ factory: function FilterPanelService_Factory() { return new FilterPanelService(i0.inject(i0.ComponentFactoryResolver), i0.inject(i0.INJECTOR), i0.inject(i0.ApplicationRef)); }, token: FilterPanelService, providedIn: "root" });
    return FilterPanelService;
}());
export { FilterPanelService };
if (false) {
    /** @type {?} */
    FilterPanelService.prototype.filterPanelContainer;
    /**
     * @type {?}
     * @private
     */
    FilterPanelService.prototype.cfr;
    /**
     * @type {?}
     * @private
     */
    FilterPanelService.prototype.injector;
    /**
     * @type {?}
     * @private
     */
    FilterPanelService.prototype.appRef;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmlsdGVyLXBhbmVsLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZmFycmlzL3VpLWZpbHRlci1wYW5lbC8iLCJzb3VyY2VzIjpbImxpYi9maWx0ZXItcGFuZWwuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSx3QkFBd0IsRUFBRSxRQUFRLEVBQUUsY0FBYyxFQUE4QyxNQUFNLGVBQWUsQ0FBQztBQUMzSSxPQUFPLEVBQUUsb0JBQW9CLEVBQUUsTUFBTSwwQkFBMEIsQ0FBQzs7QUFHaEU7SUFPSSw0QkFDWSxHQUE2QixFQUM3QixRQUFrQixFQUNsQixNQUFzQjtRQUZ0QixRQUFHLEdBQUgsR0FBRyxDQUEwQjtRQUM3QixhQUFRLEdBQVIsUUFBUSxDQUFVO1FBQ2xCLFdBQU0sR0FBTixNQUFNLENBQWdCO0lBQzlCLENBQUM7Ozs7O0lBRUwsc0NBQVM7Ozs7SUFBVCxVQUFVLE1BQXlCO1FBQy9CLElBQUksQ0FBQyxTQUFTLEVBQUUsQ0FBQzs7WUFDWCxZQUFZLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyx1QkFBdUIsQ0FBQyxvQkFBb0IsQ0FBQztRQUMzRSxJQUFJLENBQUMsb0JBQW9CLEdBQUcsWUFBWSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7UUFDL0QsSUFBSSxDQUFDLE1BQU0sQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLG9CQUFvQixDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBRTNELFFBQVEsQ0FBQyxhQUFhLENBQUMsTUFBTSxDQUFDLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxRQUFRLENBQUMsYUFBYSxDQUFDLENBQUM7UUFFN0YsSUFBSSxDQUFDLG9CQUFvQixDQUFDLFFBQVEsQ0FBQyxNQUFNLEdBQUcsTUFBTSxDQUFDO1FBQ25ELGdFQUFnRTtRQUNoRSxrQkFBa0I7UUFDbEIsTUFBTTtRQUNOLElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxpQkFBaUIsQ0FBQyxZQUFZLEVBQUUsQ0FBQztRQUMzRCxJQUFJLENBQUMsb0JBQW9CLENBQUMsaUJBQWlCLENBQUMsYUFBYSxFQUFFLENBQUM7UUFDNUQsT0FBTyxJQUFJLENBQUMsb0JBQW9CLENBQUMsUUFBUSxDQUFDO0lBQzlDLENBQUM7Ozs7SUFFTSxzQ0FBUzs7O0lBQWhCO1FBQ0ksSUFBSSxJQUFJLENBQUMsb0JBQW9CLEVBQUU7WUFDM0IsSUFBSSxDQUFDLG9CQUFvQixDQUFDLFFBQVEsQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDO1lBQy9DLElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxPQUFPLEVBQUUsQ0FBQztZQUNwQyxJQUFJLENBQUMsb0JBQW9CLEdBQUcsU0FBUyxDQUFDO1NBQ3pDO0lBQ0wsQ0FBQzs7Z0JBcENKLFVBQVUsU0FBQztvQkFDUixVQUFVLEVBQUUsTUFBTTtpQkFDckI7Ozs7Z0JBTm9CLHdCQUF3QjtnQkFBRSxRQUFRO2dCQUFFLGNBQWM7Ozs2QkFBdkU7Q0F5Q0MsQUFyQ0QsSUFxQ0M7U0FsQ1ksa0JBQWtCOzs7SUFFM0Isa0RBQXlEOzs7OztJQUdyRCxpQ0FBcUM7Ozs7O0lBQ3JDLHNDQUEwQjs7Ozs7SUFDMUIsb0NBQThCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSwgQ29tcG9uZW50RmFjdG9yeVJlc29sdmVyLCBJbmplY3RvciwgQXBwbGljYXRpb25SZWYsIENvbXBvbmVudFJlZiwgVmlld0NvbnRhaW5lclJlZiwgRWxlbWVudFJlZiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBGaWx0ZXJQYW5lbENvbXBvbmVudCB9IGZyb20gJy4vZmlsdGVyLXBhbmVsLmNvbXBvbmVudCc7XHJcbmltcG9ydCB7IEZpbHRlclBhbmVsT3B0aW9uIH0gZnJvbSAnLi9maWx0ZXItcGFuZWwuaW50ZXJmYWNlJztcclxuXHJcbkBJbmplY3RhYmxlKHtcclxuICAgIHByb3ZpZGVkSW46ICdyb290J1xyXG59KVxyXG5leHBvcnQgY2xhc3MgRmlsdGVyUGFuZWxTZXJ2aWNlIHtcclxuXHJcbiAgICBmaWx0ZXJQYW5lbENvbnRhaW5lcjogQ29tcG9uZW50UmVmPEZpbHRlclBhbmVsQ29tcG9uZW50PjtcclxuXHJcbiAgICBjb25zdHJ1Y3RvcihcclxuICAgICAgICBwcml2YXRlIGNmcjogQ29tcG9uZW50RmFjdG9yeVJlc29sdmVyLFxyXG4gICAgICAgIHByaXZhdGUgaW5qZWN0b3I6IEluamVjdG9yLFxyXG4gICAgICAgIHByaXZhdGUgYXBwUmVmOiBBcHBsaWNhdGlvblJlZixcclxuICAgICkgeyB9XHJcblxyXG4gICAgc2hvd1BhbmVsKG9wdGlvbjogRmlsdGVyUGFuZWxPcHRpb24pIHtcclxuICAgICAgICB0aGlzLmhpZGVQYW5lbCgpO1xyXG4gICAgICAgIGNvbnN0IGNvbnRhaW5lckZhYyA9IHRoaXMuY2ZyLnJlc29sdmVDb21wb25lbnRGYWN0b3J5KEZpbHRlclBhbmVsQ29tcG9uZW50KTtcclxuICAgICAgICB0aGlzLmZpbHRlclBhbmVsQ29udGFpbmVyID0gY29udGFpbmVyRmFjLmNyZWF0ZSh0aGlzLmluamVjdG9yKTtcclxuICAgICAgICB0aGlzLmFwcFJlZi5hdHRhY2hWaWV3KHRoaXMuZmlsdGVyUGFuZWxDb250YWluZXIuaG9zdFZpZXcpO1xyXG5cclxuICAgICAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdib2R5JykuYXBwZW5kQ2hpbGQodGhpcy5maWx0ZXJQYW5lbENvbnRhaW5lci5sb2NhdGlvbi5uYXRpdmVFbGVtZW50KTtcclxuXHJcbiAgICAgICAgdGhpcy5maWx0ZXJQYW5lbENvbnRhaW5lci5pbnN0YW5jZS5vcHRpb24gPSBvcHRpb247XHJcbiAgICAgICAgLy8gdGhpcy5maWx0ZXJQYW5lbENvbnRhaW5lci5pbnN0YW5jZS5jbGVhci5zdWJzY3JpYmUoKGV2ZW50KT0+e1xyXG4gICAgICAgIC8vICAgdGhpcy5jbGVhcigpO1xyXG4gICAgICAgIC8vIH0pO1xyXG4gICAgICAgIHRoaXMuZmlsdGVyUGFuZWxDb250YWluZXIuY2hhbmdlRGV0ZWN0b3JSZWYubWFya0ZvckNoZWNrKCk7XHJcbiAgICAgICAgdGhpcy5maWx0ZXJQYW5lbENvbnRhaW5lci5jaGFuZ2VEZXRlY3RvclJlZi5kZXRlY3RDaGFuZ2VzKCk7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuZmlsdGVyUGFuZWxDb250YWluZXIuaW5zdGFuY2U7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGhpZGVQYW5lbCgpIHtcclxuICAgICAgICBpZiAodGhpcy5maWx0ZXJQYW5lbENvbnRhaW5lcikge1xyXG4gICAgICAgICAgICB0aGlzLmZpbHRlclBhbmVsQ29udGFpbmVyLmluc3RhbmNlLmhpZGUgPSB0cnVlO1xyXG4gICAgICAgICAgICB0aGlzLmZpbHRlclBhbmVsQ29udGFpbmVyLmRlc3Ryb3koKTtcclxuICAgICAgICAgICAgdGhpcy5maWx0ZXJQYW5lbENvbnRhaW5lciA9IHVuZGVmaW5lZDtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuIl19