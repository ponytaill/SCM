{"version":3,"sources":["../../../../node_modules/tslib/tslib.es6.js","ng://@farris/extend-file-upload/lib/service/f-file-upload-api.service.ts","ng://@farris/extend-file-upload/lib/model/f-file-upload.model.ts","ng://@farris/extend-file-upload/lib/utils/f-file.utils.ts","ng://@farris/extend-file-upload/lib/service/f-file-uploader.service.ts","ng://@farris/extend-file-upload/lib/service/f-file-upload-default.service.ts","ng://@farris/extend-file-upload/lib/directive/f-file-drop.directive.ts","ng://@farris/extend-file-upload/lib/directive/f-file-select.directive.ts","ng://@farris/extend-file-upload/lib/directive/f-file-preview.directive.ts","ng://@farris/extend-file-upload/lib/directive/f-file-upload.directive.ts","ng://@farris/extend-file-upload/lib/pipe/index.ts","ng://@farris/extend-file-upload/lib/components/view-image/f-file-view-image.component.ts","ng://@farris/extend-file-upload/lib/components/upload/f-file-upload.component.ts","ng://@farris/extend-file-upload/lib/components/preview/f-file-preview.component.ts","ng://@farris/extend-file-upload/lib/components/preview-checkbox/preview-checkbox.component.ts","ng://@farris/extend-file-upload/lib/components/multi-download-info/multi-download-info.component.ts","ng://@farris/extend-file-upload/lib/locale.ts","ng://@farris/extend-file-upload/lib/components/upload-and-preview/upload-and-preview.component.ts","ng://@farris/extend-file-upload/lib/components/upload-progress/upload-progress.component.ts","ng://@farris/extend-file-upload/lib/components/upload-and-preview/file-order-drag.directive.ts","ng://@farris/extend-file-upload/lib/components/upload-and-preview/replaceX.pipe.ts","ng://@farris/extend-file-upload/lib/f-file-upload.module.ts"],"names":["extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__read","o","n","m","Symbol","iterator","r","e","i","call","ar","next","done","push","value","error","__spread","arguments","length","concat","FFileUploadAPIServiceToken","InjectionToken","FFileUploadAPIService","exConfig","_this","this","apiArray","config","upload","remove","commonAPI","type","url","timeout","headers","data","key","forEach","item","assign","combinUrl","prototype","typeUrl","getAPI","getAssignAPI","object","infoMap","removeAll","uploadAll","multipartUpload","Injectable","args","providedIn","Optional","Inject","UploadStatus","Queue","Uploading","Done","Cancelled","Remove","Error","isObject","isArray","deepCloneObject","src","target","v","humanizeBytes","bytes","Math","floor","log","parseFloat","pow","toFixed","generateId","random","toString","substring","makeUploadFile","file","index","fileIndex","id","name","size","form","FormData","progress","status","percentage","speed","speedHuman","startTime","endTime","eta","etaHuman","lastModifiedDate","Date","lastModified","sub","undefined","nativeFile","allMineTypes",".pdf",".gif",".png",".txt",".htm",".html",".jpe",".jpeg",".jpg",".js",".json",".pps",".ppt",".doc",".xml",".zip",".xlsx",".wps",".3gpp",".ac3",".asf",".au",".css",".csv",".dot",".dtd",".dwg",".dxf",".jp2",".mp2",".mp3",".mp4",".mpeg",".mpg",".mpp",".ogg",".pot",".rtf",".svf",".tif",".tiff",".wdb",".xhtml",".xlc",".xlm",".xls",".xlt",".xlw","findMineTypeBySuffix","suffix","changeUploadFileToFileExtend","files","result","preExtend","extend","extendStatus","extendHeaders","resultProp","tempProp","replace","FFileUtils","FFileUploaderService","uploadServerSer","allowedContentTypes","maxUploads","maxFileSize","concurrency","Number","POSITIVE_INFINITY","uploadedCount","extendServerConfig","queue","serviceEvents","EventEmitter","uploadScheduler","Subject","subs","pipe","mergeMap","serverMethod","subscribe","uploadOutput","filter","queueItem","findIndex","emit","setOptions","options","prop","handleFiles","incomingFiles","allowedIncomingFiles","reduce","acc","checkFile","futureQueueLength","judgeResult","rejectedReason","allowed","rejectedFile","message","map","uploadFile","queuelength","isContentTypeAllowed","isFileSizeAllowed","join","initInputEvents","input","event","_files","uploadFileIndex","id_1","splice","ids_1","split","tId","queueFiles","removeIndex","removeQueueFiles","setExtendServerConfig","extendSer","Observable","observer","ids","fileItem","finalize","closed","complete","output","err","reset","setContentTypes","contentTypes","find","allContentTypesAllowed","lastIndexOf","namesuffix","substr","toLowerCase","fileSize","UploadServerService","decorators","FFileUploadDefaultService","__","constructor","create","tslib_1.__extends","extendService","method","xhr","XMLHttpRequest","time","getTime","progressStartTime","addEventListener","lengthComputable","round","loaded","total","diff","ceil","secondsToHuman","onreadystatechange","readyState","DONE","speedAverage","responseStatus","response","JSON","parse","responseHeaders","parseResponseHeaders","getAllResponseHeaders","open","withCredentials","keys","setRequestHeader","bodyToSend","includeWebKitFormBoundary","append","fieldName","send","abort","sec","toISOString","httpHeaders","x","FFileDropDirective","elementRef","tDisabled","dropListener","dragOverListener","dragLeaveListener","dragEnterListener","onDropEnter","stopPropagation","preventDefault","defineProperty","unbindDragAndDropEvent","bindDragAndDropEvent","ngOnInit","_sub","el","nativeElement","uploadInput","disabled","ngOnDestroy","unsubscribe","onDrop","bind","onDragOver","onDragLeave","removeEventListener","dataTransfer","Directive","selector","ElementRef","Input","Output","FFileSelectDirective","changeListener","onChange","unbindEvent","bindEvent","FFilePreviewListTypeTemplateDirective","template","TemplateRef","FFilePreviewToolbarTemplateDirective","FFileUploadDirective","templateRef","FFileSizePipe","transform","tvalue","parseInt","Pipe","FFileDatePipe","dateSer","returnFormat","formatTo","DateTimeHelperService","FFileViewImageComponent","maxHeight","maxWidth","cls","selfHeight","tFile","fileContent","createImageByCanvas","changeImageSize","originWidth","originHeight","targetWidth","targetHeight","width","height","reader","FileReader","tImage","Image","canvas","context","getContext","onload","imgSize","clearRect","drawImage","ev","onerror","readAsDataURL","Component","HostBinding","ViewChild","FFileUploadComponent","uploadAPISer","fileUploaderSer","notifyService","ngZone","enableImagePreview","uploadImmediately","uploadedThenHide","enableSliceUpload","chunkSize","tVisible","needReset","enableDrop","dropText","enableSelect","selectText","multiple","widthThreshold","fUploadDoneEvent","fUploadRemovedEvent","selfUploadOpts","showAppendPanel","showLoading","settings","visible","uploadSelectInput","uploadDragInput","fFileUploadDir","uploadOpts","computeWidthThreshold","ngAfterViewInit","triggerFileSelect","fileUpload","click","selectUploadOutput","uploadOutputHandler","dropUploadOutput","startUpload","updateFilesState","hideAfterLoaded","allFileUploaded","fileOutput","showNotify","notifyType","msg","eventType","startFiles","extendDatas","inputUploadEventEmit","startUploadAll","setTimeout","cancelUpload","removelAllUpload","removeFile","formateBytes","isImage","indexOf","judgeContentTypeLimit","judegeFileSizeLimit","appendNewFiles","closeAppendPanel","fileDropUpload","runOutsideAngular","self","assistEl","fFileUploadAssist","parentElement","classList","providers","animations","trigger","state","style","opacity","transition","animate","NotifyService","NgZone","ContentChild","FFilePreviewComponent","cd","readonly","_defaultItemCls","enableMulti","itemCls","headerCls","canRename","defaultRename","enableCardAreaResponse","showRenameInput","_fileInfos","filePreviewEvent","fileDownloadEvent","multiSelectedEvent","fileRemoveEvent","multiSelected","selectAllBtnChecked","listTypeTemplate","val","formatDatas","ngOnChanges","changes","formatValue","filePreviewHandler","fileInfo","stopImmediatePropagation","fileDownloadHandler","fileInfos","fileMultiDownloadHandler","rename","multiRenameRef","multiSelectChange","hasInArray","findInArray","fileRemoveHandler","getFileTypeClassName","fileName","clsName","lastDotIndex","fileSuffix","toLocaleLowerCase","hasFileName","selectOrCancelAllHandler","checked","detectChanges","toggleRenameInput","encapsulation","ViewEncapsulation","None","ChangeDetectorRef","read","PreviewCheckboxComponent","cls1","cls2","cls3","showDragBar","checkedChange","clickHandler","MultiDownloadInfoComponent","_downloadInfos","_downloadName","fileTypeCls","downloadName","getName","getDownloadName","filename","FARRIS_UPLOADFILE_LOCALEDATA","en","uploadAndPreview","uploadSelectText","filesCount","selectCount","download","delete","authMsg","nofiles","uploading","uploadSuccess","successed","supportType","maxSize","maxFileCount","zh-CHS","zh-CHT","UploadAndPreviewComponent","modalSer","_this_1","contentFill","enableOrder","orderField","_renameFromDialog","_previewColumnsFields","_presetPreviewColumns","field","title","checkbox","_previewColumns","previewDateFormat","previewReadonly","previewVisible","previewEnableMulti","previewShowType","previewEnableRename","previewDefaultRename","fPreviewMultiSelectedEvent","previewSelectAllBtnChecked","previewMultiSelected","uploadDisabled","tUploadVisible","uploadNeedReset","uploadEnableSelect","uploadEnableMulti","noDownload","afterOrdered","uploadAndPreviewTableHeader","uploadAndPreviewTableHeaderCreated$","ro","localSer","uploadFiles","uploadReset","ResizeObserver","setColumnWidth","localeService","setLocaleData","getFieldsFromColumns","formatPreviewDatas","enableRename","th","observe","disconnect","uploadVisible","previewColumns","getValue","sort","sortPreviewData","newFormatValue","tslib_1.__spread","obj","y","a","oDate1","oDate2","getColumnTemplate","columnInfo","previewMultiSelectChange","getUploadProgress","uploadInfo","tPercentage","getUploadFileSizeProgress","showDownload","multiFileRemoveHandler","self_1","dlgRef_1","show","showMaxButton","initialState","downloadInfos","showButtons","buttons","text","handle","close","contentRef","showPreviewStateColumn","onOrderFileDrop","$event","removedIndex","addedIndex","removedItem","payload","_a","apply","newOrderItems","tableWidth_1","offsetWidth","cols_1","querySelectorAll","trs","uploadAndPreviewTbodyRef","flexDirection","display","from","tr","tds","querySelector","BsModalService","UploadProgressComponent","showInfo","percent","cachedStatus","inferredStatus","successPercent","isNotNil","smoothDnd","constants","wrapperClass","animationClass","SmoothDndForVisible","dropHandler","dropHandlers","reactDropHandler","handler","wrapChild","UploadFileOrderDragDirective","ngzone","injector","render","enableDrag","drop","behaviour","dragHandleSelector","dropPlaceholder","className","getGhostParent","document","body","getChildPayload","shouldAcceptDrop","sourceContainerOptions","onDropReady","dropResult","run","onDragEnter","onDragStart","info","onDragEnd","initDnD","disposeDnd","container","dispose","Injector","Renderer2","UploadReplaceXPipe","_i","FFileUploadModule","forRoot","uploadSer","ngModule","provide","useValue","useClass","NgModule","declarations","exports","imports","CommonModule","NotifyModule","MessagerModule","FAreaResponseModule","DateHelperModule","ModalModule","LocaleModule","entryComponents"],"mappings":"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","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","import { Injectable, Optional, Inject, InjectionToken } from '@angular/core';\r\nimport { UploadInput, UploadConfig } from '../model/index';\r\n\r\n\r\nexport interface FFileUploadServerConfig extends UploadConfig {\r\n    upload?: UploadInput | null;\r\n    remove?: UploadInput | null;\r\n}\r\n\r\nexport const FFileUploadAPIServiceToken = new InjectionToken<FFileUploadServerConfig>('MFFileUploadServerConfig');\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class FFileUploadAPIService {\r\n    private config: FFileUploadServerConfig;\r\n    private commonAPI: UploadInput;\r\n    private apiArray = ['upload','remove'];\r\n    constructor(@Optional() @Inject(FFileUploadAPIServiceToken) exConfig: FFileUploadServerConfig) {\r\n\r\n        this.config = { upload: null,  remove: null };\r\n        this.commonAPI = { type: 'config', url: '', timeout: 0, headers: null, data: {} };\r\n        if (exConfig) {\r\n            for (const key in this.commonAPI) {\r\n                if (exConfig.hasOwnProperty(key)) {\r\n                    this.commonAPI[key] = exConfig[key];\r\n                }\r\n            }\r\n        }\r\n        this.apiArray.forEach(item => {\r\n            this.config[item] = Object.assign({}, this.commonAPI);\r\n            if (exConfig && exConfig.hasOwnProperty(item)) {\r\n                if (exConfig[item].hasOwnProperty('url')) {\r\n                    this.config[item] = Object.assign({}, this.config[item], exConfig[item], { url: this.combinUrl(exConfig[item].url) });\r\n                }\r\n            }\r\n        });\r\n\r\n        // if (exConfig) {\r\n        //     Object.assign(this.config, exConfig);\r\n        // }\r\n    }\r\n    private combinUrl(typeUrl) {\r\n        let result = typeUrl;\r\n        result = this.commonAPI.url + typeUrl;\r\n        return result;\r\n    }\r\n    /**\r\n     * 获取API定义\r\n     */\r\n    getAPI() {\r\n        return this.config;\r\n    }\r\n    /**\r\n     * \r\n     * @param type \r\n     * @param object \r\n     */\r\n    getAssignAPI(type, object) {\r\n        // removeAll,uploadAll 用于内部传递使用，应当传递的是remove和upload对应的参数\r\n        // 通过设置对应关系\r\n        const infoMap = { 'removeAll': 'remove', 'uploadAll': 'upload','multipartUpload':'upload' };\r\n        if(infoMap.hasOwnProperty(type)){\r\n            type=infoMap[type];\r\n        }\r\n        if (this.config[type] && object) {\r\n            return Object.assign({}, this.config[type], object);\r\n        }\r\n        if (this.config[type]) {\r\n            return this.config[type];\r\n        }\r\n        if (object) {\r\n            return object;\r\n        }\r\n        return null;\r\n\r\n    }\r\n}\r\n","import { Subscription, Observable } from 'rxjs';\r\n\r\nexport interface UploaderOptions {\r\n    concurrency?: number;\r\n    allowedContentTypes?: string[];\r\n    maxUploads?: number;\r\n    maxFileSize?: number;//MB为单位\r\n    uploadedCount?: number;\r\n}\r\n\r\nexport interface BlobFile extends Blob {\r\n    name: string;\r\n}\r\n\r\nexport enum UploadStatus {\r\n    Queue,\r\n    Uploading,\r\n    Done,\r\n    Cancelled,\r\n    Remove,// 正在删除\r\n    Error\r\n}\r\n\r\nexport interface UploadProgress {\r\n    status: UploadStatus;\r\n    data?: {\r\n        percentage: number;\r\n        speed?: number;\r\n        speedHuman?: string;\r\n        startTime?: number | null;\r\n        endTime?: number | null;\r\n        eta?: number | null;\r\n        etaHuman?: string | null;\r\n    };\r\n}\r\nexport interface FUploadFileExtend {\r\n    id: string;\r\n    name: string;\r\n    disabled?: boolean;\r\n    checked?: boolean;\r\n    size?: number | undefined;//文件大小\r\n    createTime?: string | undefined;//创建日期\r\n    type?: string;\r\n    extend?: any | null;//记录返回数据\r\n    extendStatus?: number;\r\n    extendHeaders?: { [key: string]: string } | null;\r\n    showDownload?: boolean;\r\n}\r\n\r\nexport interface UploadFile {\r\n    id: string;\r\n    fileIndex: number;\r\n    lastModifiedDate: Date;\r\n    name: string;\r\n    size: number;\r\n    type: string;\r\n    form: FormData;\r\n    progress: UploadProgress;//\r\n    response?: any;//记录返回数据\r\n    responseStatus?: number;\r\n    sub?: Subscription | any;\r\n    nativeFile?: File;\r\n    responseHeaders?: { [key: string]: string };\r\n}\r\n\r\n\r\nexport interface UploadOutput {\r\n    type: 'addedToQueue' | 'allAddedToQueue' | 'uploading' | 'done' | 'start' | 'cancelled' | 'dragOver'\r\n    | 'dragOut' | 'drop' | 'removed' | 'allRemoved' | 'rejected' | 'allDone' | 'allStart' | 'allCancelled' | 'error';\r\n    file?: UploadFile;\r\n    nativeFile?: File;\r\n    message?: String;\r\n    files?: UploadFile[];\r\n}\r\nexport interface UploadConfig {\r\n    url?: string;\r\n    method?: string;// POST，GET \r\n    id?: string;\r\n    fieldName?: string;\r\n    fileIndex?: number;\r\n    file?: UploadFile;\r\n    data?: {\r\n        [key: string]: any,\r\n        extProperty?: DocMetaProperty | null //\r\n    };\r\n    headers?: { [key: string]: string } | null;\r\n    includeWebKitFormBoundary?: boolean; // If false, only the file is send trough xhr.send (WebKitFormBoundary is omit)\r\n    withCredentials?: boolean;\r\n    timeout?: number;// 暂不支持\r\n}\r\n\r\nexport interface UploadInput extends UploadConfig {\r\n    type: 'upload' | 'uploadAll' | 'cancel' | 'cancelAll' | 'remove' | 'removeAll' | 'config' | 'hide' | 'multipartUpload' | 'sliceUpload';\r\n    /** 分块上传时，每块大小默认为 1M */\r\n    chunkSize?: number\r\n}\r\n\r\n\r\nexport abstract class UploadServerService {\r\n    constructor() {\r\n\r\n    }\r\n    abstract upload(files: UploadFile[], event: UploadInput, extendService: any): Observable<any>;\r\n    abstract remove(files: UploadFile[], event: UploadInput, extendService: any): Observable<any>;\r\n    abstract multipartUpload(file: UploadFile, event: UploadInput, extendService: any): Observable<any>;\r\n}\r\n\r\nexport interface DocMetaProperty {\r\n    extProperties1?: string;\r\n    extProperties2?: string;\r\n    extProperties3?: string;\r\n    extProperties4?: string;\r\n    extProperties5?: string;\r\n}","import { UploadFile, UploadStatus, FUploadFileExtend } from '../model';\r\nconst isObject = value => typeof value === 'object' && value !== null;\r\nconst isArray = value => Array.isArray(value);\r\n// 暂时用不到\r\nconst deepCloneObject = (src) => {\r\n    if (!isObject(src)) return src;\r\n    const target = isArray(src) ? [] : {};\r\n    for (const key in src) {\r\n        if (!src.hasOwnProperty(key)) continue;\r\n        const v = src[key];\r\n        target[key] = v && isObject(v) ? deepCloneObject(v) : v;\r\n    }\r\n    return target;\r\n}\r\n\r\nconst humanizeBytes = (bytes: number): string => {\r\n    if (bytes === 0) {\r\n        return '0 Byte';\r\n    }\r\n\r\n    const k = 1024;\r\n    const sizes: string[] = ['Bytes', 'KB', 'MB', 'GB', 'TB', 'PB'];\r\n    const i: number = Math.floor(Math.log(bytes) / Math.log(k));\r\n\r\n    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];\r\n}\r\nconst generateId = (): string => {\r\n    return Math.random().toString(36).substring(7);\r\n}\r\nconst makeUploadFile = (file: File, index: number): UploadFile => {\r\n    return {\r\n        fileIndex: index,\r\n        id: generateId(),\r\n        name: file.name,\r\n        size: file.size,\r\n        type: file.type,\r\n        form: new FormData(),\r\n        progress: {\r\n            status: UploadStatus.Queue,\r\n            data: {\r\n                percentage: 0,\r\n                speed: 0,\r\n                speedHuman: `${humanizeBytes(0)}/s`,\r\n                startTime: null,\r\n                endTime: null,\r\n                eta: null,\r\n                etaHuman: null\r\n            }\r\n        },\r\n        lastModifiedDate: new Date(file.lastModified),\r\n        sub: undefined,\r\n        nativeFile: file\r\n    };\r\n}\r\n\r\nconst allMineTypes = {\r\n    '.pdf': 'application/pdf',\r\n    '.gif': 'image/gif',\r\n    '.png': 'image/png',\r\n    '.txt': 'text/plain',\r\n    '.htm': 'text/html',\r\n    '.html': 'text/html',\r\n    '.jpe': 'image/jpeg',\r\n    '.jpeg': 'image/jpeg',\r\n    '.jpg': 'image/jpeg',\r\n    '.js': 'text/javascript,application/javascript',\r\n    '.json': 'application/json',\r\n    '.pps': 'application/vnd.ms-powerpoint',\r\n    '.ppt': 'application/vnd.ms-powerpoint',\r\n    '.doc': 'application/msword',\r\n    '.xml': 'text/xml,application/xml',\r\n    '.zip': 'aplication/zip',\r\n    '.xlsx': 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',\r\n    '.wps': 'application/vnd.ms-works',\r\n    '.3gpp': 'audio/3gpp, video/3gpp',\r\n    '.ac3': 'audio/ac3',\r\n    '.asf': 'allpication/vnd.ms-asf',\r\n    '.au': 'audio/basic',\r\n    '.css': 'text/css',\r\n    '.csv': 'text/csv',\r\n    '.dot': 'application/msword',\r\n    '.dtd': 'application/xml-dtd',\r\n    '.dwg': 'image/vnd.dwg',\r\n    '.dxf': 'image/vnd.dxf',\r\n    '.jp2': 'image/jp2',\r\n    '.mp2': 'audio/mpeg, video/mpeg',\r\n    '.mp3': ' audio/mpeg',\r\n    '.mp4': 'audio/mp4, video/mp4',\r\n    '.mpeg': 'video/mpeg',\r\n    '.mpg': 'video/mpeg',\r\n    '.mpp': 'application/vnd.ms-project',\r\n    '.ogg': 'application/ogg, audio/ogg',\r\n    '.pot': 'application/vnd.ms-powerpoint',\r\n    '.rtf': 'application/rtf,text/rtf',\r\n    '.svf': 'image/vnd.svf',\r\n    '.tif': 'image/tiff',\r\n    '.tiff': 'image/tiff',\r\n    '.wdb': 'application/vnd.ms-works',\r\n    '.xhtml': 'application/xhtml+xml',\r\n    '.xlc': 'application/vnd.ms-excel',\r\n    '.xlm': 'application/vnd.ms-excel',\r\n    '.xls': 'application/vnd.ms-excel',\r\n    '.xlt': 'application/vnd.ms-excel',\r\n    '.xlw': 'application/vnd.ms-excel'\r\n};\r\nconst findMineTypeBySuffix = (suffix: string): string => {\r\n    if (allMineTypes.hasOwnProperty(suffix)) {\r\n        return allMineTypes[suffix];\r\n    }\r\n    return '';\r\n}\r\n\r\nconst changeUploadFileToFileExtend = (files: UploadFile[]): FUploadFileExtend[] => {\r\n    // 如果是数组\r\n    let result=[];\r\n    files.forEach(file=>{\r\n        let preExtend = { id: '', name: '', size: 0, type: '', extend: null, extendStatus: 0, extendHeaders: null } as FUploadFileExtend;\r\n        for (let resultProp in preExtend) {\r\n            let tempProp = resultProp.replace('extend', 'response');\r\n            if (file.hasOwnProperty(tempProp)) {\r\n                preExtend[resultProp] = file[tempProp];\r\n            }\r\n        }\r\n        result.push(preExtend);\r\n    });\r\n    \r\n    return result;\r\n}\r\n\r\nexport const FFileUtils = {\r\n    isObject,\r\n    isArray,\r\n    deepCloneObject,\r\n    humanizeBytes,\r\n    makeUploadFile,\r\n    findMineTypeBySuffix,\r\n    changeUploadFileToFileExtend\r\n}","import { EventEmitter, Optional } from \"@angular/core\";\r\nimport { Observable, Subject, Subscription, of } from \"rxjs\";\r\nimport { mergeMap, finalize } from \"rxjs/operators\";\r\nimport { FFileUtils } from \"../utils/index\";\r\nimport {\r\n    UploadFile,\r\n    UploadOutput,\r\n    UploadInput,\r\n    UploadStatus,\r\n    BlobFile,\r\n    UploadServerService,\r\n    UploaderOptions,\r\n} from \"../model/index\";\r\n\r\nexport class FFileUploaderService {\r\n    queue: UploadFile[];\r\n    serviceEvents: EventEmitter<UploadOutput>;\r\n    uploadScheduler: Subject<{\r\n        file: UploadFile;\r\n        event: UploadInput;\r\n        files?: UploadFile[];\r\n    }>;\r\n    subs: { id: string; sub: Subscription; ids?: string[] }[];\r\n    allowedContentTypes: string[] = [\"*\"];\r\n    //默认不限制,0代表不限制 Number.POSITIVE_INFINITY\r\n    maxUploads: number = 0;\r\n    /** 单位M，默认是12M,0代表不限制 */\r\n    maxFileSize: number = 12;\r\n    concurrency: number = Number.POSITIVE_INFINITY;\r\n    uploadedCount: number = 0;\r\n    private extendServerConfig = null;\r\n    constructor(@Optional() private uploadServerSer: UploadServerService) {\r\n        this.queue = [];\r\n        this.serviceEvents = new EventEmitter<UploadOutput>();\r\n        this.uploadScheduler = new Subject();\r\n        this.subs = [];\r\n\r\n        this.uploadScheduler\r\n            .pipe(\r\n                mergeMap((upload) => {\r\n                    return this.serverMethod(upload);\r\n                }, this.concurrency)\r\n            )\r\n            .subscribe((uploadOutput) => {\r\n                // if (uploadOutput.type == 'removed' || uploadOutput.type == 'done') {\r\n                //   // 删除或者done移除\r\n                //   const subIndex = this.subs.findIndex(sub => sub.id === uploadOutput.file.id);\r\n                //   if (subIndex > -1 && this.subs[subIndex].sub) {\r\n                //     this.subs[subIndex].sub.unsubscribe();\r\n                //   }\r\n                //   this.subs.splice(subIndex, 1);\r\n                // }\r\n                if (uploadOutput.type == \"removed\") {\r\n                    // 事件中返回的都是\r\n                    this.queue = this.queue.filter(\r\n                        (item) => item.progress.status !== UploadStatus.Remove\r\n                    );\r\n                    if (!uploadOutput.hasOwnProperty(\"message\")) {\r\n                        uploadOutput[\"message\"] = \"被删除\";\r\n                    }\r\n                }\r\n                if (uploadOutput.type == \"error\") {\r\n                    // 上传失败的附件移除\r\n                    this.queue = this.queue.filter((queueItem) => {\r\n                        return (\r\n                            uploadOutput.files.findIndex((item) => queueItem.id == item.id) <\r\n                            0\r\n                        );\r\n                    });\r\n                }\r\n                this.serviceEvents.emit(uploadOutput);\r\n            });\r\n    }\r\n    setOptions(options: UploaderOptions) {\r\n        // 重置文件大小、类型、个数限制\r\n        if (options) {\r\n            for (let prop in options) {\r\n                this[prop] = options[prop];\r\n            }\r\n        }\r\n    }\r\n    handleFiles(incomingFiles: FileList): void {\r\n        const allowedIncomingFiles: File[] = [].reduce.call(\r\n            incomingFiles,\r\n            (acc: File[], checkFile: File, i: number) => {\r\n                const futureQueueLength = acc.length + this.queue.length + 1;\r\n                let judgeResult = this.rejectedReason(\r\n                    checkFile.name,\r\n                    checkFile.type,\r\n                    futureQueueLength,\r\n                    checkFile.size\r\n                );\r\n                if (judgeResult.allowed) {\r\n                    acc = acc.concat(checkFile);\r\n                } else {\r\n                    // 不符合当前文件类型或者内容超出限制，抛出事件\r\n                    const rejectedFile: UploadFile = FFileUtils.makeUploadFile(\r\n                        checkFile,\r\n                        i\r\n                    );\r\n                    this.serviceEvents.emit({\r\n                        type: \"rejected\",\r\n                        file: rejectedFile,\r\n                        message: judgeResult.message,\r\n                    });\r\n                }\r\n                return acc;\r\n            },\r\n            []\r\n        );\r\n\r\n        // 构造文件结构，并单个抛出事件\r\n        [].map.call(allowedIncomingFiles, (file: File, i: number) => {\r\n            const uploadFile: UploadFile = FFileUtils.makeUploadFile(file, i);\r\n            this.queue.push(uploadFile);\r\n            this.serviceEvents.emit({ type: \"addedToQueue\", file: uploadFile });\r\n        });\r\n\r\n        // 所有的文件都已经添加，抛出事件\r\n        this.serviceEvents.emit({ type: \"allAddedToQueue\" });\r\n    }\r\n    private rejectedReason(name, type, queuelength, size) {\r\n        let allowed = false;\r\n        let message = \"\";\r\n        // 已存在同名文件\r\n        let findDuplicateIndex = this.queue.findIndex((file) => file.name == name);\r\n        if (findDuplicateIndex > -1) {\r\n            message = \"上传失败：已存在同名文件\";\r\n        } else if (!this.isContentTypeAllowed(name)) {\r\n            message =\r\n                \"上传失败：只允许上传\" +\r\n                this.allowedContentTypes.join(\",\") +\r\n                \"类型的文档\";\r\n        } else if (\r\n            this.maxUploads > 0 &&\r\n            (this.maxUploads <= this.uploadedCount ||\r\n                queuelength + this.uploadedCount > this.maxUploads)\r\n        ) {\r\n            message = \"上传失败：文件总个数超出\" + this.maxUploads + \"限制\";\r\n        } else if (!this.isFileSizeAllowed(size)) {\r\n            message = \"上传失败：单个文件大小超出\" + this.maxFileSize + \"MB的限制\";\r\n        } else if (size == 0) {\r\n            message = \"上传失败：不允许文件为空\";\r\n        } else {\r\n            allowed = true;\r\n        }\r\n        return {\r\n            allowed,\r\n            message,\r\n        };\r\n    }\r\n    /**\r\n     * 从前端传来事件，进行服务器端方法类型判断\r\n     * @param input\r\n     */\r\n    initInputEvents(input: EventEmitter<UploadInput>): Subscription {\r\n        //debugger\r\n        return input.subscribe((event: UploadInput) => {\r\n            //debugger\r\n            switch (event.type) {\r\n                case 'sliceUpload':\r\n                    const _files = this.queue.filter(\r\n                        (file) => file.progress.status === UploadStatus.Queue\r\n                    );\r\n                    if (_files.length > 0) {\r\n                        this.uploadScheduler.next({\r\n                            files: _files,\r\n                            event: event,\r\n                            file: null,\r\n                        });\r\n                    }\r\n                    break;\r\n                case \"upload\":\r\n                case \"multipartUpload\":\r\n                    const uploadFileIndex = this.queue.findIndex(\r\n                        (file) => file === event.file\r\n                    );\r\n                    if (uploadFileIndex !== -1 && event.file) {\r\n                        this.uploadScheduler.next({\r\n                            files: [this.queue[uploadFileIndex]],\r\n                            event: event,\r\n                            file: null,\r\n                        });\r\n                    }\r\n                    break;\r\n                case \"uploadAll\":\r\n                    const files = this.queue.filter(\r\n                        (file) => file.progress.status === UploadStatus.Queue\r\n                    );\r\n                    if (files.length > 0) {\r\n                        event.type = \"upload\";\r\n                        this.uploadScheduler.next({\r\n                            files: files,\r\n                            event: event,\r\n                            file: null,\r\n                        });\r\n                    }\r\n                    break;\r\n                case \"cancel\":\r\n                    const id = event.id || null;\r\n                    if (!id) {\r\n                        return;\r\n                    }\r\n                    const fileIndex = this.queue.findIndex((file) => file.id === id);\r\n                    if (fileIndex !== -1) {\r\n                        this.serviceEvents.emit({\r\n                            type: \"cancelled\",\r\n                            files: [this.queue[fileIndex]],\r\n                            message: \"已取消附件上传\",\r\n                        });\r\n                        this.queue.splice(fileIndex, 1);\r\n                    }\r\n                    break;\r\n                    // case 'cancel':\r\n                    // debugger\r\n                    // const id = event.id || null;\r\n                    // if (!id) {\r\n                    //   return;\r\n                    // }\r\n                    // const subs = this.subs.filter(sub => sub.id === id);\r\n                    // subs.forEach(sub => {\r\n                    //   if (sub.sub) {\r\n                    //     sub.sub.unsubscribe();\r\n                    //     const fileIndex = this.queue.findIndex(file => file.id === id);\r\n                    //     if (fileIndex !== -1) {\r\n                    //       this.queue[fileIndex].progress.status = UploadStatus.Cancelled;\r\n                    //       this.serviceEvents.emit({ type: 'cancelled', file: this.queue[fileIndex] });\r\n                    //     }\r\n                    //   }\r\n                    // });\r\n                    break;\r\n                // case 'cancelAll':\r\n                //   this.subs.forEach(sub => {\r\n                //     if (sub.sub) {\r\n                //       sub.sub.unsubscribe();\r\n                //     }\r\n\r\n                //     const file = this.queue.find(uploadFile => uploadFile.id === sub.id);\r\n                //     if (file) {\r\n                //       file.progress.status = UploadStatus.Cancelled;\r\n                //       this.serviceEvents.emit({ type: 'cancelled', file: file });\r\n                //     }\r\n                //   });\r\n                //   break;\r\n                case \"hide\":\r\n                    if (!event.id) {\r\n                        return;\r\n                    }\r\n                    let ids = event.id.split(\",\");\r\n                    this.queue = this.queue.filter((file) => {\r\n                        let tIndex = ids.findIndex((tId) => tId == file.id);\r\n                        return tIndex > -1 ? false : true;\r\n                    });\r\n                    break;\r\n                case \"cancelAll\":\r\n                    // 取消，直接从队列中移除，不用修改状态\r\n                    const queueFiles = this.queue.filter(\r\n                        (uploadFile) => uploadFile.progress.status === UploadStatus.Queue\r\n                    );\r\n                    if (queueFiles.length) {\r\n                        this.serviceEvents.emit({\r\n                            type: \"cancelled\",\r\n                            files: queueFiles,\r\n                            message: \"已取消附件上传\",\r\n                        });\r\n                        this.queue = this.queue.filter(\r\n                            (uploadFile) => uploadFile.progress.status != UploadStatus.Queue\r\n                        );\r\n                    }\r\n                    break;\r\n                case \"remove\":\r\n                    if (!event.id) {\r\n                        return;\r\n                    }\r\n                    const removeIndex = this.queue.findIndex(\r\n                        (file) => file.id === event.id\r\n                    );\r\n                    if (removeIndex !== -1) {\r\n                        // 得有个开始删除和已经删除\r\n                        this.queue[removeIndex].progress.status = UploadStatus.Remove;\r\n                        this.uploadScheduler.next({\r\n                            files: [this.queue[removeIndex]],\r\n                            event: event,\r\n                            file: null,\r\n                        });\r\n                    }\r\n                    break;\r\n                case \"removeAll\":\r\n                    const removeQueueFiles = this.queue.filter(\r\n                        (uploadFile) => uploadFile.progress.status === UploadStatus.Queue\r\n                    );\r\n                    if (removeQueueFiles.length) {\r\n                        this.serviceEvents.emit({\r\n                            type: \"cancelled\",\r\n                            files: removeQueueFiles,\r\n                            message: \"删除附件成功\",\r\n                        });\r\n                        this.queue = this.queue.filter(\r\n                            (uploadFile) => uploadFile.progress.status != UploadStatus.Queue\r\n                        );\r\n                    }\r\n                    // 正在上传的附件是如何处理\r\n                    // const doneFiles = this.queue.filter(uploadFile => uploadFile.progress.status === UploadStatus.Done);\r\n                    if (this.queue.length) {\r\n                        event.type = \"remove\";\r\n                        this.queue.map(\r\n                            (item) => (item.progress.status = UploadStatus.Remove)\r\n                        );\r\n                        this.uploadScheduler.next({\r\n                            files: this.queue,\r\n                            event: event,\r\n                            file: null,\r\n                        });\r\n                    }\r\n                    break;\r\n            }\r\n        });\r\n    }\r\n\r\n    setExtendServerConfig(extendSer) {\r\n        this.extendServerConfig = extendSer;\r\n    }\r\n\r\n    serverMethod(upload: {\r\n        file: UploadFile;\r\n        event: UploadInput;\r\n        files?: UploadFile[];\r\n    }): Observable<UploadOutput> {\r\n        return new Observable((observer) => {\r\n            let sub;\r\n            let ids = upload.files.map((fileItem) => fileItem.id);\r\n            switch (upload.event.type) {\r\n                case 'sliceUpload':\r\n                    sub = this.upload(upload.files, upload.event);\r\n                    break;\r\n                case \"upload\":\r\n                    sub = this.upload(upload.files, upload.event);\r\n                    break;\r\n                case \"multipartUpload\":\r\n                    sub = this.multipartUpload(upload.files[0], upload.event);\r\n                    break;\r\n                // case 'uploadAll':\r\n                //   ids = upload.files.map(fileItem => fileItem.id);\r\n                //   sub = this.uploadAll(upload.files, upload.event);\r\n                //   break;\r\n                case \"remove\":\r\n                    sub = this.remove(upload.files, upload.event);\r\n                    break;\r\n                // case 'removeAll':\r\n                //   ids = upload.files.map(fileItem => fileItem.id);\r\n                //   sub = this.removeAll(upload.files, upload.event);\r\n                //   break;\r\n                default:\r\n                    sub = null;\r\n            }\r\n            if (!sub) {\r\n                return;\r\n            }\r\n            sub.pipe(finalize(() => {\r\n                // debugger;\r\n                if (!observer.closed) {\r\n                    observer.complete();\r\n                }\r\n            })).subscribe(\r\n                    (output) => {\r\n                        // debugger;\r\n                        observer.next(output);\r\n                    },\r\n                    (err) => {\r\n                        observer.next(err);\r\n                    },\r\n                    () => {\r\n                        observer.complete();\r\n                    }\r\n                );\r\n            this.subs.push({ ids: ids, sub: sub, id: \"\" });\r\n            // switch (upload.event.type) {\r\n            //   case 'uploadAll':\r\n            //     this.subs.push({ ids: ids, sub: sub, id: '' });\r\n            //     break;\r\n            //   case 'removeAll':\r\n            //     this.subs.push({ ids: ids, sub: sub, id: '' });\r\n            //     break;\r\n            //   default:\r\n\r\n            // }\r\n        });\r\n    }\r\n    /**\r\n     * 单个文件上传\r\n     * @param file\r\n     * @param event\r\n     */\r\n    // uploadFile(file: UploadFile, event: UploadInput): Observable<UploadOutput> {\r\n    //   const uploadFile = <BlobFile>file.nativeFile;\r\n    //   const uploadIndex = this.queue.findIndex(outFile => outFile.nativeFile === uploadFile);\r\n\r\n    //   // 已经被取消的不能被上传\r\n    //   if (this.queue[uploadIndex].progress.status === UploadStatus.Cancelled) {\r\n    //     return new Observable(observer => {\r\n    //       observer.complete();\r\n    //     });\r\n    //   }\r\n    //   // 抛出开始上传的事件\r\n    //   this.serviceEvents.emit({ type: 'start', files: [file] });\r\n    //   return this.uploadServerSer.upload(file, event, this.extendServerConfig);\r\n    // }\r\n    multipartUpload(\r\n        file: UploadFile,\r\n        event: UploadInput\r\n    ): Observable<UploadOutput> {\r\n        // 抛出开始上传的事件\r\n        this.serviceEvents.emit({ type: \"start\", files: [file] });\r\n        return this.uploadServerSer.multipartUpload(\r\n            file,\r\n            event,\r\n            this.extendServerConfig\r\n        );\r\n    }\r\n    upload(files: UploadFile[], event: UploadInput): Observable<UploadOutput> {\r\n        // 抛出开始上传的事件\r\n        this.serviceEvents.emit({ type: \"start\", files: files });\r\n        return this.uploadServerSer.upload(files, event, this.extendServerConfig);\r\n    }\r\n\r\n    remove(files: UploadFile[], event: UploadInput): Observable<UploadOutput> {\r\n        return this.uploadServerSer.remove(files, event, this.extendServerConfig);\r\n    }\r\n    // removeAll(files: UploadFile[], event: UploadInput): Observable<UploadOutput> {\r\n    //   return this.uploadServerSer.removeAll(files, event, this.extendServerConfig);\r\n    // }\r\n    // 重置\r\n    reset() {\r\n        this.queue = [];\r\n        //this.uploadScheduler = new Subject();\r\n        // this.subs.forEach(sub => {\r\n        //   if (sub.sub) {\r\n        //     sub.sub.unsubscribe();\r\n        //   }\r\n        // });\r\n        this.subs = [];\r\n    }\r\n\r\n    // 暂时\r\n    setContentTypes(contentTypes: string[]): void {\r\n        if (typeof contentTypes !== \"undefined\" && contentTypes instanceof Array) {\r\n            if (contentTypes.find((type: string) => type === \"*\") !== undefined) {\r\n                this.allowedContentTypes = [\"*\"];\r\n            } else {\r\n                this.allowedContentTypes = contentTypes;\r\n            }\r\n            return;\r\n        }\r\n        this.allowedContentTypes = [\"*\"];\r\n    }\r\n\r\n    allContentTypesAllowed(): boolean {\r\n        return (\r\n            this.allowedContentTypes.find((type: string) => type === \"*\") !==\r\n            undefined\r\n        );\r\n    }\r\n    /**\r\n     *\r\n     * @param name\r\n     */\r\n    isContentTypeAllowed(name: string): boolean {\r\n        if (this.allContentTypesAllowed()) {\r\n            return true;\r\n        }\r\n        // 附件没有后缀\r\n        if (name.lastIndexOf(\".\") < 0) {\r\n            return false;\r\n        }\r\n        let namesuffix = name.substr(name.lastIndexOf(\".\"));\r\n        // 简化计算\r\n        return (\r\n            this.allowedContentTypes.findIndex(\r\n                (item) => item.toLowerCase() == namesuffix.toLowerCase()\r\n            ) > -1\r\n        );\r\n    }\r\n\r\n    isFileSizeAllowed(fileSize: number): boolean {\r\n        if (!this.maxFileSize) {\r\n            return true;\r\n        }\r\n        // fileSize是b单位 maxFileSize是MB单位\r\n        return fileSize <= this.maxFileSize * 1024 * 1024; // * 8\r\n    }\r\n}\r\n","\r\nimport { UploadFile, UploadOutput, UploadInput, UploadStatus, BlobFile, UploadServerService } from '../model/index';\r\nimport { Observable } from 'rxjs';\r\nimport { FFileUtils } from '../utils/index';\r\nexport class FFileUploadDefaultService extends UploadServerService {\r\n    /**\r\n     * 2019年3月2日，先假定一个一个传入\r\n     * @param file \r\n     * @param event \r\n     */\r\n    upload(files: UploadFile[], event: UploadInput,extendService:any): Observable<UploadOutput> {\r\n        let file = files[0];\r\n        return new Observable(observer => {\r\n            const url = event.url ||extendService.url|| '';\r\n\r\n            const method = event.method || 'POST';\r\n            const data = event.data || {};\r\n            const headers = event.headers || {};\r\n\r\n            const xhr = new XMLHttpRequest();\r\n            const time: number = new Date().getTime();\r\n            let progressStartTime: number = (file.progress.data && file.progress.data.startTime) || time;\r\n            let speed = 0;\r\n            let eta: number | null = null;\r\n\r\n            xhr.upload.addEventListener('progress', (e: ProgressEvent) => {\r\n                if (e.lengthComputable) {\r\n                    const percentage = Math.round((e.loaded * 100) / e.total);\r\n                    const diff = new Date().getTime() - time;\r\n                    speed = Math.round(e.loaded / diff * 1000);\r\n                    progressStartTime = (file.progress.data && file.progress.data.startTime) || new Date().getTime();\r\n                    eta = Math.ceil((e.total - e.loaded) / speed);\r\n\r\n                    file.progress = {\r\n                        status: UploadStatus.Uploading,\r\n                        data: {\r\n                            percentage: percentage,\r\n                            speed: speed,\r\n                            speedHuman: `${FFileUtils.humanizeBytes(speed)}/s`,\r\n                            startTime: progressStartTime,\r\n                            endTime: null,\r\n                            eta: eta,\r\n                            etaHuman: this.secondsToHuman(eta)\r\n                        }\r\n                    };\r\n\r\n                    observer.next({ type: 'uploading', file: file });\r\n                }\r\n            }, false);\r\n\r\n            xhr.upload.addEventListener('error', (e: Event) => {\r\n                observer.error(e);\r\n                observer.complete();\r\n            });\r\n\r\n            xhr.onreadystatechange = () => {\r\n                if (xhr.readyState === XMLHttpRequest.DONE) {\r\n                    const speedAverage = Math.round(file.size / (new Date().getTime() - progressStartTime) * 1000);\r\n                    file.progress = {\r\n                        status: UploadStatus.Done,\r\n                        data: {\r\n                            percentage: 100,\r\n                            speed: speedAverage,\r\n                            speedHuman: `${FFileUtils.humanizeBytes(speedAverage)}/s`,\r\n                            startTime: progressStartTime,\r\n                            endTime: new Date().getTime(),\r\n                            eta: eta,\r\n                            etaHuman: this.secondsToHuman(eta || 0)\r\n                        }\r\n                    };\r\n\r\n                    file.responseStatus = xhr.status;\r\n\r\n                    try {\r\n                        file.response = JSON.parse(xhr.response);\r\n                    } catch (e) {\r\n                        file.response = xhr.response;\r\n                    }\r\n\r\n                    file.responseHeaders = this.parseResponseHeaders(xhr.getAllResponseHeaders());\r\n\r\n                    observer.next({ type: 'done', files: [file] });\r\n\r\n                    observer.complete();\r\n                }\r\n            };\r\n\r\n            xhr.open(method, url, true);\r\n            xhr.withCredentials = event.withCredentials ? true : false;\r\n\r\n            try {\r\n                const uploadFile = <BlobFile>file.nativeFile;\r\n                // const uploadIndex = this.queue.findIndex(outFile => outFile.nativeFile === uploadFile);\r\n\r\n                // if (this.queue[uploadIndex].progress.status === UploadStatus.Cancelled) {\r\n                //     observer.complete();\r\n                // }\r\n\r\n                Object.keys(headers).forEach(key => xhr.setRequestHeader(key, headers[key]));\r\n\r\n                let bodyToSend: FormData | BlobFile;\r\n\r\n                if (event.includeWebKitFormBoundary !== false) {\r\n                    Object.keys(data).forEach(key => file.form.append(key, data[key]));\r\n                    file.form.append(event.fieldName || 'file', uploadFile, uploadFile.name);\r\n                    bodyToSend = file.form;\r\n                } else {\r\n                    bodyToSend = uploadFile;\r\n                }\r\n\r\n                //this.serviceEvents.emit({ type: 'start', file: file });\r\n                xhr.send(bodyToSend);\r\n            } catch (e) {\r\n                observer.complete();\r\n            }\r\n\r\n            return () => {\r\n                xhr.abort();\r\n            };\r\n        });\r\n    }\r\n    // 删除附件\r\n    remove(files: UploadFile[], event: UploadInput, extendService: any): Observable<UploadOutput> {\r\n        return new Observable(observer => {\r\n            observer.next({ type: 'removed', files: files });\r\n            observer.complete();\r\n        });\r\n    }\r\n    multipartUpload(file: UploadFile, event: UploadInput, extendService: any): Observable<any>{\r\n        return new Observable(observer => {\r\n            observer.complete();\r\n        });\r\n    };\r\n\r\n    private secondsToHuman(sec: number): string {\r\n        return new Date(sec * 1000).toISOString().substr(11, 8);\r\n    }\r\n    private parseResponseHeaders(httpHeaders: string) {\r\n        if (!httpHeaders) {\r\n            return;\r\n        }\r\n\r\n        return httpHeaders.split('\\n')\r\n            .map((x: string) => x.split(/: */, 2))\r\n            .filter((x: string[]) => x[0])\r\n            .reduce((acc: Object, x: string[]) => {\r\n                acc[x[0]] = x[1];\r\n                return acc;\r\n            }, {});\r\n    }\r\n}","import { Directive, ElementRef, EventEmitter, Input, Output, OnInit, OnDestroy } from '@angular/core';\r\nimport { UploadOutput, UploadInput, UploaderOptions } from '../model/index';\r\nimport { FFileUploaderService } from '../service/index';\r\nimport { Subscription } from 'rxjs';\r\n\r\n@Directive({\r\n    selector: '[FFileDrop]'\r\n})\r\nexport class FFileDropDirective implements OnInit, OnDestroy {\r\n    private tDisabled = false;\r\n    // 是否禁用\r\n    @Input()\r\n    set disabled(value: boolean) {\r\n        if (this.tDisabled !== value) {\r\n            this.tDisabled = value;\r\n            if (value) {\r\n                this.unbindDragAndDropEvent();\r\n            } else {\r\n                this.bindDragAndDropEvent();\r\n            }\r\n        }\r\n    };\r\n    get disabled(): boolean {\r\n        return this.tDisabled;\r\n    }\r\n    // 配置\r\n    @Input()\r\n    set options(value: UploaderOptions) {\r\n        this.upload.setOptions(value);\r\n    };\r\n    // 已上传\r\n    @Input()\r\n    set uploadedCount(value){\r\n        this.upload.setOptions({'uploadedCount':value});\r\n    }\r\n    // 传递\r\n    @Input() uploadInput: EventEmitter<UploadInput>;\r\n    @Output() uploadOutput: EventEmitter<UploadOutput>;\r\n\r\n    //upload: FFileUploaderService;\r\n    el: HTMLInputElement;\r\n\r\n    _sub: Subscription[];\r\n\r\n    // eventListener\r\n    dropListener: any = null;\r\n    dragOverListener: any = null;\r\n    dragLeaveListener: any = null;\r\n    dragEnterListener: any = null;\r\n\r\n    constructor(public elementRef: ElementRef, private upload: FFileUploaderService) {\r\n        this.uploadOutput = new EventEmitter<UploadOutput>();\r\n    }\r\n\r\n    ngOnInit() {\r\n        this._sub = [];\r\n        this.el = this.elementRef.nativeElement;\r\n\r\n        this._sub.push(\r\n            this.upload.serviceEvents.subscribe((event: UploadOutput) => {\r\n                this.uploadOutput.emit(event);\r\n            })\r\n        );\r\n\r\n        if (this.uploadInput instanceof EventEmitter) {\r\n            this._sub.push(this.upload.initInputEvents(this.uploadInput));\r\n        }\r\n        // 绑定事件\r\n        if (!this.disabled) {\r\n            this.bindDragAndDropEvent();\r\n        }\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        this.unbindDragAndDropEvent();\r\n        this._sub.forEach(sub => sub.unsubscribe());\r\n    }\r\n    private bindDragAndDropEvent() {\r\n        // this.ngzone.runOutsideAngular(() => {\r\n        this.dropListener = this.onDrop.bind(this);\r\n        this.el.addEventListener('drop', this.dropListener);\r\n        this.dragOverListener = this.onDragOver.bind(this);\r\n        this.el.addEventListener('dragover', this.dragOverListener);\r\n        this.dragLeaveListener = this.onDragLeave.bind(this);\r\n        this.el.addEventListener('dragleave', this.dragLeaveListener);\r\n        this.dragEnterListener = this.onDropEnter.bind(this);\r\n        this.el.addEventListener('dragenter', this.dragEnterListener);\r\n        //  });\r\n    }\r\n    private unbindDragAndDropEvent() {\r\n        this.dropListener && this.el.removeEventListener('drop', this.dropListener);\r\n        this.dragOverListener && this.el.removeEventListener('dragover', this.dragOverListener);\r\n        this.dragLeaveListener && this.el.removeEventListener('dragleave', this.dragLeaveListener);\r\n        this.dragEnterListener && this.el.removeEventListener('dragenter', this.dragEnterListener);\r\n    }\r\n\r\n    onDropEnter = (e: Event) => {\r\n        e.stopPropagation();\r\n        e.preventDefault();\r\n    }\r\n\r\n\r\n    // @HostListener('drop', ['$event'])\r\n    public onDrop(e) {\r\n        e.stopPropagation();\r\n        e.preventDefault();\r\n        const event: UploadOutput = { type: 'drop' };\r\n        // console.log('dorp Events');\r\n        this.uploadOutput.emit(event);\r\n        this.upload.handleFiles(e.dataTransfer.files);\r\n    }\r\n\r\n    // @HostListener('dragover', ['$event'])\r\n    public onDragOver(e: Event) {\r\n        if (!e) {\r\n            return;\r\n        }\r\n        e.stopPropagation();\r\n        e.preventDefault();\r\n        const event: UploadOutput = { type: 'dragOver' };\r\n        this.uploadOutput.emit(event);\r\n    }\r\n\r\n    // @HostListener('dragleave', ['$event'])\r\n    public onDragLeave(e: Event) {\r\n        if (!e) {\r\n            return;\r\n        }\r\n        e.stopPropagation();\r\n        e.preventDefault();\r\n        const event: UploadOutput = { type: 'dragOut' };\r\n        this.uploadOutput.emit(event);\r\n    }\r\n    /**\r\n     * 重置\r\n     */\r\n    reset() {\r\n       /*if (this.el) {\r\n            this._sub.forEach(sub => sub.unsubscribe());\r\n            this._sub = [];\r\n            this.upload.reset();\r\n        }*/\r\n        this.upload.reset();\r\n    }\r\n}\r\n","import { Directive, ElementRef, EventEmitter, Input, Output, OnInit, OnDestroy } from '@angular/core';\r\nimport { UploadOutput, UploaderOptions } from '../model/f-file-upload.model';\r\nimport { FFileUploaderService } from '../service/f-file-uploader.service';\r\nimport { Subscription } from 'rxjs';\r\n\r\n@Directive({\r\n  selector: '[FFileSelect]'\r\n})\r\nexport class FFileSelectDirective implements OnInit, OnDestroy {\r\n  private tDisabled = false;\r\n  @Input()\r\n  set disabled(value: boolean) {\r\n    if (this.tDisabled !== value) {\r\n      this.tDisabled = value;\r\n      if (value) {\r\n        this.unbindEvent();\r\n      } else {\r\n        this.bindEvent();\r\n      }\r\n    }\r\n  }\r\n  get disabled(): boolean {\r\n    return this.tDisabled;\r\n  }\r\n  @Input()\r\n  set options(value: UploaderOptions) {\r\n    if (value) {\r\n      this.upload.setOptions(value);\r\n    }\r\n  };\r\n   // 已上传\r\n   @Input()\r\n   set uploadedCount(value){\r\n       this.upload.setOptions({'uploadedCount':value});\r\n   }\r\n  @Input() uploadInput: EventEmitter<any>;\r\n  @Output() uploadOutput: EventEmitter<UploadOutput>;\r\n\r\n  //upload: FFileUploaderService;\r\n  el: HTMLInputElement;\r\n  private _sub: Subscription[];\r\n  private changeListener: any = null;\r\n\r\n  constructor(public elementRef: ElementRef, private upload: FFileUploaderService) {\r\n    this.uploadOutput = new EventEmitter<UploadOutput>();\r\n    this.el = this.elementRef.nativeElement;\r\n  }\r\n\r\n  ngOnInit() {\r\n    this._sub = [];\r\n    // 对外抛出事件\r\n    this._sub.push(\r\n      this.upload.serviceEvents.subscribe((event: UploadOutput) => {\r\n        this.uploadOutput.emit(event);\r\n      })\r\n    );\r\n    // 对内的事件\r\n    if (this.uploadInput instanceof EventEmitter) {\r\n      this._sub.push(this.upload.initInputEvents(this.uploadInput));\r\n    }\r\n    if (!this.disabled) {\r\n      this.bindEvent();\r\n    }\r\n  }\r\n  private bindEvent() {\r\n    this.changeListener = this.onChange.bind(this);\r\n    this.el.addEventListener('change', this.changeListener);\r\n  }\r\n  private unbindEvent() {\r\n    this.changeListener = null;\r\n    this.el.removeEventListener('change', this.changeListener);\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    if (this.el) {\r\n      this._sub.forEach(sub => sub.unsubscribe());\r\n    }\r\n  }\r\n\r\n  onChange = () => {\r\n    if (this.el.files) {\r\n      this.upload.handleFiles(this.el.files);\r\n      this.el.value=null;\r\n    }\r\n  }\r\n  /**\r\n   * 重置\r\n   */\r\n  reset(){\r\n    // if (this.el) {\r\n    //   //this._sub.forEach(sub => sub.unsubscribe());\r\n    //   //this._sub=[];\r\n    //   this.upload.reset();\r\n    // }    \r\n    this.upload.reset();\r\n  }\r\n}\r\n","import {  Directive, TemplateRef, Input } from '@angular/core';\r\n\r\n@Directive({\r\n    selector: '[filePreviewListTypeTemplate]'\r\n})\r\nexport class FFilePreviewListTypeTemplateDirective {\r\n    constructor(public template: TemplateRef<any>) { }\r\n}\r\n\r\n@Directive({\r\n    selector: '[filePreviewToolbarTemplate]'\r\n})\r\nexport class FFilePreviewToolbarTemplateDirective {\r\n    constructor(public template: TemplateRef<any>) { }\r\n}\r\n","import { Directive, TemplateRef, Input } from '@angular/core';\r\n\r\n@Directive({\r\n  selector: '[fFielUpload],[fFileUpload]',\r\n})\r\nexport class FFileUploadDirective {\r\n  constructor(\r\n    public templateRef: TemplateRef<any>\r\n  ) { \r\n  }\r\n\r\n}","import { Pipe, PipeTransform } from '@angular/core';\r\nimport { FFileUtils } from '../utils/f-file.utils';\r\nimport {DateTimeHelperService} from '@farris/ui-common/date';\r\n@Pipe({\r\n    name: 'fFileSize'\r\n})\r\nexport class FFileSizePipe implements PipeTransform {\r\n\r\n    transform(value: any, args?: any): any {\r\n        // 如果是字符串\r\n        let tvalue=value;\r\n        if(!value){\r\n            return \"0 Byte\";\r\n        }\r\n        if(typeof value =='string'){\r\n            tvalue=parseInt(value);\r\n        }\r\n        return FFileUtils.humanizeBytes(tvalue);\r\n    }\r\n}\r\n\r\n@Pipe({\r\n    name: 'fFileDate'\r\n})\r\nexport class FFileDatePipe implements PipeTransform {\r\n    constructor(private dateSer:DateTimeHelperService){\r\n\r\n    }\r\n    transform(value: any, returnFormat: string='yyyy-MM-dd'): any {        \r\n        return this.dateSer.formatTo(value,returnFormat);\r\n    }\r\n}","import { Component, OnInit, HostBinding, Input, ViewChild, ElementRef, Host } from '@angular/core';\r\n@Component({\r\n  selector: 'f-file-view-image',\r\n  templateUrl: './f-file-view-image.component.html',\r\n  styleUrls: ['./f-file-view-image.component.css']\r\n})\r\nexport class FFileViewImageComponent implements OnInit {\r\n  @Input() maxHeight = 200;\r\n  @Input() maxWidth = 300;\r\n  @HostBinding('class.f-file-view-image') cls = true;\r\n  @HostBinding('style.height') selfHeight='50px';\r\n  @ViewChild('canvas') canvas: ElementRef;\r\n  private tFile: File;\r\n  @Input()\r\n  set file(fileContent: File) {\r\n    this.tFile = fileContent;\r\n    this.createImageByCanvas();\r\n  }\r\n  get file(): File {\r\n    return this.tFile;\r\n  }\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit() {\r\n  }\r\n  private changeImageSize(originWidth,originHeight) {\r\n\r\n    // 图片原始尺寸\r\n\r\n    // 目标尺寸\r\n    var targetWidth = originWidth, targetHeight = originHeight;\r\n    // 图片尺寸超过400x400的限制\r\n    if (originWidth > this.maxWidth || originHeight > this.maxHeight) {\r\n      if (originWidth / originHeight > this.maxWidth / this.maxHeight) {\r\n        // 更宽，按照宽度限定尺寸\r\n        targetWidth = this.maxWidth;\r\n        targetHeight = Math.round(this.maxWidth * (originHeight / originWidth));\r\n      } else {\r\n        targetHeight = this.maxHeight;\r\n        targetWidth = Math.round(this.maxHeight * (originWidth / originHeight));\r\n      }\r\n    }\r\n    this.selfHeight=targetHeight+\"px\";\r\n    return {\r\n      width: targetWidth,\r\n      height: targetHeight\r\n    }\r\n  }\r\n  // 压缩图片需要的一些元素和对象\r\n\r\n  private createImageByCanvas() {\r\n    let reader = new FileReader();\r\n    let tImage = new Image();\r\n    let canvas = this.canvas.nativeElement;\r\n    let context = canvas.getContext('2d');\r\n    // base64地址图片加载完毕后\r\n    tImage.onload = () => {\r\n      let imgSize = this.changeImageSize(tImage.width,tImage.height);\r\n      // canvas对图片进行缩放\r\n      canvas.width = imgSize.width;\r\n      canvas.height = imgSize.height;\r\n      // 清除画布\r\n      context.clearRect(0, 0,this.maxWidth,this.maxHeight);\r\n      // 图片压缩\r\n      context.drawImage(tImage, 0, 0, imgSize.width, imgSize.height);\r\n    };\r\n\r\n    // 文件base64化，以便获知图片原始尺寸\r\n    reader.onload =(ev)=>{\r\n      tImage.src = reader.result as string;\r\n    };\r\n    reader.onerror = function (e) {\r\n    }\r\n    reader.readAsDataURL(this.file);\r\n  }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n}\r\n","import {\r\n    Component,\r\n    OnInit,\r\n    Input,\r\n    HostBinding,\r\n    ViewChild,\r\n    EventEmitter,\r\n    Output,\r\n    ContentChild,\r\n    ElementRef,\r\n    AfterViewInit,\r\n} from \"@angular/core\";\r\nimport {\r\n    FFileSelectDirective,\r\n    FFileDropDirective,\r\n    FFileUploadDirective,\r\n} from \"../../directive/index\";\r\nimport {\r\n    UploadOutput,\r\n    UploadInput,\r\n    UploadFile,\r\n    UploaderOptions,\r\n    FUploadFileExtend,\r\n    DocMetaProperty,\r\n} from \"../../model/index\";\r\nimport { FFileUtils } from \"../../utils/index\";\r\nimport {\r\n    FFileUploadAPIService,\r\n    FFileUploaderService,\r\n} from \"../../service/index\";\r\nimport { NotifyService, NotifyOptions } from \"@farris/ui-notify\";\r\nimport { Observable, Subject } from \"rxjs\";\r\n\r\nimport { trigger,style,state,animate,transition } from \"@angular/animations\";\r\nimport { NgZone } from \"@angular/core\";\r\n\r\n@Component({\r\n    selector: \"f-file-upload\",\r\n    templateUrl: \"./f-file-upload.component.html\",\r\n    styleUrls: [\"./f-file-upload.component.css\"],\r\n    providers: [FFileUploaderService],\r\n    animations: [\r\n        trigger(\"hideUploaded\", [\r\n            state(\"show\", style({ opacity: 1, height: \"*\" })),\r\n            state(\"hide\", style({ opacity: 0, height: 0 })),\r\n            // transition('* => void', [\r\n            //   style({ opacity: 1}),\r\n            //   animate(200, style({ opacity: 0}))\r\n            // ])\r\n            transition(\"* => hide\", animate(\"0.5s\")),\r\n        ]),\r\n    ],\r\n})\r\nexport class FFileUploadComponent implements OnInit, AfterViewInit {\r\n    @HostBinding(\"class.ffileupload\") cls = true;\r\n    // 不可见\r\n    @HostBinding(\"class.ffileupload-unvisible\") get visibleState() {\r\n        return !this.visible;\r\n    }\r\n    // 自定义样式\r\n    @HostBinding(\"class.ffileupload-selfdefine\") get selfDirectiveDefine() {\r\n        if (this.fFileUploadDir) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n    @HostBinding(\"class.ffileupload-uploading\") get uploading() {\r\n        return this.files.length > 0;\r\n    }\r\n\r\n    // 不能在Construct里追加el\r\n    @ViewChild(\"uploadAssist\") fFileUploadAssist: ElementRef;\r\n    // 自定义指令\r\n    @ContentChild(FFileUploadDirective) fFileUploadDir: any;\r\n    //\r\n    @ViewChild(FFileSelectDirective) fileUpload: FFileSelectDirective;\r\n    @ViewChild(FFileDropDirective) fileDropUpload: FFileDropDirective;\r\n    // 启用图片预览\r\n    @Input() enableImagePreview = true;\r\n    // 启用立即上传\r\n    @Input() uploadImmediately = false;\r\n    // 上传完成后隐藏\r\n    @Input() uploadedThenHide = true;\r\n    // 禁用状态\r\n    @Input() disabled = false;\r\n    /** 启用分块上传 */\r\n    @Input() enableSliceUpload = true;\r\n    /** 分块上传每片大小，单位：M, 默认 1M/块 */\r\n    @Input() chunkSize = 1;\r\n\r\n    private tVisible = true;\r\n    // 是否可见\r\n    @Input()\r\n    set visible(value) {\r\n        this.tVisible = value;\r\n        if (!value) {\r\n            this.reset();\r\n        }\r\n    }\r\n    get visible() {\r\n        return this.tVisible;\r\n    }\r\n    // 需要重置,通过不断的赋值来改变\r\n    @Input() needReset: Observable<any> = new Subject();\r\n    // 启用拖拽\r\n    @Input() enableDrop = false;\r\n    @Input() dropText = \"可将文件拖拽此处\";\r\n    // 启用选择文件按钮\r\n    @Input() enableSelect = true;\r\n    @Input() selectText = \"点击上传\";\r\n    // 启用多选\r\n    @Input() multiple = true;\r\n    // 已经上传文件\r\n    @Input() uploadedCount = 0;\r\n    // 公共的扩展数据\r\n    @Input() extendDatas: {\r\n        [key: string]: any;\r\n        extProperty?: DocMetaProperty | null; //\r\n    };\r\n    // 宽度阈值，当宽度超过760时候，没有附件上传时，宽度是固定值，有附件上传时，有最大宽度值\r\n    @Input() widthThreshold = 760;\r\n    // 上传和删除对外抛出的事件\r\n    @Output() fUploadDoneEvent = new EventEmitter<FUploadFileExtend[]>();\r\n    @Output() fUploadRemovedEvent = new EventEmitter<FUploadFileExtend[]>();\r\n\r\n    // 允许上传的文件类型\r\n    allowedContentTypes = \"*\";\r\n    // 默认不限制附件上传个数\r\n    maxUploads = 0;\r\n    // 单位KB，默认是12M\r\n    maxFileSize = \"12MB\";\r\n\r\n    private selfUploadOpts: UploaderOptions = {};\r\n    // 上传配置项\r\n    @Input()\r\n    set options(uploadOpts: UploaderOptions) {\r\n        if (uploadOpts) {\r\n            if (uploadOpts.hasOwnProperty(\"allowedContentTypes\")) {\r\n                this.allowedContentTypes = uploadOpts.allowedContentTypes.join(\",\");\r\n                this.allowedContentTypes =\r\n                    this.allowedContentTypes == \"\" ? \"*\" : this.allowedContentTypes;\r\n            }\r\n            if (uploadOpts.hasOwnProperty(\"maxUploads\")) {\r\n                this.maxUploads = uploadOpts.maxUploads;\r\n            }\r\n            if (uploadOpts.hasOwnProperty(\"maxFileSize\")) {\r\n                this.maxFileSize = FFileUtils.humanizeBytes(\r\n                    1024 * 1024 * uploadOpts.maxFileSize\r\n                );\r\n            }\r\n            this.selfUploadOpts = Object.assign(this.selfUploadOpts, uploadOpts);\r\n        }\r\n    }\r\n    get options() {\r\n        return this.selfUploadOpts;\r\n    }\r\n    /**\r\n     * 每个组可以设置特殊服务参数，来覆盖默认的统一模块级配置\r\n     */\r\n    @Input()\r\n    set extendServerConfig(config: any) {\r\n        if (config) {\r\n            this.fileUploaderSer.setExtendServerConfig(config);\r\n        }\r\n    }\r\n    // 记录文件个数\r\n    files: UploadOutput[];\r\n    // 标记通过选择按钮处理的事件\r\n    uploadSelectInput: EventEmitter<UploadInput>;\r\n    // 标记通过拖拽处理的事件\r\n    uploadDragInput: EventEmitter<UploadInput>;\r\n    // 控制是否显示追加附件的面板\r\n    showAppendPanel = false;\r\n    // 显示loading\r\n    showLoading = false;\r\n\r\n    settings = {\r\n        disabled: this.disabled,\r\n        visible: this.visible,\r\n    };\r\n\r\n    constructor(\r\n        private uploadAPISer: FFileUploadAPIService,\r\n        private fileUploaderSer: FFileUploaderService,\r\n        private notifyService: NotifyService,\r\n        private ngZone: NgZone\r\n    ) {\r\n        this.files = [];\r\n        this.uploadSelectInput = new EventEmitter<UploadInput>();\r\n        this.uploadDragInput = new EventEmitter<UploadInput>();\r\n        // 重置\r\n        this.needReset.subscribe((data) => {\r\n            this.reset();\r\n        });\r\n    }\r\n\r\n    ngOnInit() {\r\n        // 模板的情况下只能是立即上传\r\n        if (this.fFileUploadDir) {\r\n            this.uploadImmediately = true;\r\n        }\r\n        this.computeWidthThreshold();\r\n    }\r\n    /**\r\n     * 视图初始化后\r\n     */\r\n    ngAfterViewInit() { }\r\n    /**\r\n     * 触发绑定\r\n     */\r\n    triggerFileSelect(ev) {\r\n        ev && ev.stopPropagation();\r\n        // 禁用时\r\n        if (this.disabled) {\r\n            return false;\r\n        }\r\n        this.fileUpload.elementRef.nativeElement.click();\r\n    }\r\n    /**\r\n     * 选择附件按钮，处理抛出事件\r\n     * @param output\r\n     */\r\n    selectUploadOutput(output: UploadOutput): void {\r\n        this.uploadOutputHandler(output);\r\n    }\r\n    /**\r\n     * 拖拽区域处理抛出事件\r\n     * @param output\r\n     */\r\n    dropUploadOutput(output: UploadOutput): void {\r\n        if (this.enableSelect) {\r\n            return;\r\n        }\r\n        // 暂不处理拖拽的事件\r\n        if (\r\n            output.type !== \"dragOver\" &&\r\n            output.type !== \"dragOut\" &&\r\n            output.type !== \"drop\"\r\n        ) {\r\n            this.uploadOutputHandler(output);\r\n        }\r\n    }\r\n    /**\r\n     * allAddedToQueue 选中文件追加到队列\r\n     * @param output\r\n     */\r\n    private uploadOutputHandler(output: UploadOutput): void {\r\n        // 显示追加面板\r\n        if (this.showAppendPanel) {\r\n            this.showAppendPanel = false;\r\n        }\r\n\r\n        if (output.type === \"addedToQueue\" && typeof output.file !== \"undefined\") {\r\n            this.files.push({ type: output.type, file: output.file });\r\n            // 如果启用立即上传\r\n            if (this.uploadImmediately) {\r\n                this.showLoading = true;\r\n                this.startUpload(output.file);\r\n            }\r\n        } else if (output.type === \"start\") {\r\n            // 开始上传\r\n            this.updateFilesState(output, \"\");\r\n        } else if (output.type == \"done\") {\r\n            // 上传完成\r\n            this.updateFilesState(output, \"done\");\r\n            this.fUploadDoneEvent.emit(\r\n                FFileUtils.changeUploadFileToFileExtend(output.files)\r\n            );\r\n            this.hideAfterLoaded(output);\r\n            // 隐藏正在加载\r\n            if (\r\n                this.uploadImmediately &&\r\n                this.showLoading &&\r\n                this.allFileUploaded()\r\n            ) {\r\n                this.showLoading = false;\r\n            }\r\n        } else if (\r\n            output.type === \"cancelled\" ||\r\n            output.type === \"removed\" ||\r\n            output.type == \"error\"\r\n        ) {\r\n            // 删除或者移除文件\r\n            this.files = this.files.filter((fileOutput: UploadOutput) => {\r\n                return (\r\n                    output.files.findIndex((item) => fileOutput.file.id == item.id) < 0\r\n                );\r\n            });\r\n            // 隐藏正在加载\r\n            if (\r\n                this.uploadImmediately &&\r\n                this.showLoading &&\r\n                this.allFileUploaded()\r\n            ) {\r\n                this.showLoading = false;\r\n            }\r\n            this.showNotify(output);\r\n        } else if (\r\n            output.type === \"rejected\" &&\r\n            typeof output.file !== \"undefined\"\r\n        ) {\r\n            // 上传被拒绝\r\n            this.showNotify(output);\r\n            // 隐藏正在加载\r\n            if (\r\n                this.uploadImmediately &&\r\n                this.showLoading &&\r\n                this.allFileUploaded()\r\n            ) {\r\n                this.showLoading = false;\r\n            }\r\n        }\r\n    }\r\n\r\n    private showNotify(output) {\r\n        let notifyType = \"warning\";\r\n        if (output.type == \"cancelled\" || output.type == \"removed\") {\r\n            notifyType = \"success\";\r\n        }\r\n        let message = output.hasOwnProperty(\"message\") ? output[\"message\"] : \"\";\r\n        this.notifyService[notifyType](<NotifyOptions>{\r\n            msg: message,\r\n            timeout: 3000,\r\n        });\r\n    }\r\n    // 判断是否所有文件都已上传\r\n    private allFileUploaded() {\r\n        let findNotDoneIndex = this.files.findIndex((item) => {\r\n            let doneTypes = [\"done\", \"cancelled\", \"removed\"];\r\n            let findTypeIndex = doneTypes.findIndex((type) => {\r\n                return type == item.type;\r\n            });\r\n            return findTypeIndex == -1;\r\n        });\r\n        return findNotDoneIndex == -1 ? true : false;\r\n    }\r\n    /**\r\n     * 更新附件的状态\r\n     * @param output\r\n     * @param eventType\r\n     */\r\n    private updateFilesState(output: UploadOutput, eventType) {\r\n        let startFiles = [];\r\n        if (output.hasOwnProperty(\"files\") && output.files.length > 0) {\r\n            // 此处更新界面可能有性能问题\r\n            startFiles = output.files;\r\n        } else if (typeof output.file !== \"undefined\") {\r\n            startFiles = [output.file];\r\n        }\r\n        eventType = eventType ? eventType : output.type;\r\n        startFiles.map((item) => {\r\n            const index = this.files.findIndex(\r\n                (fileOutput) =>\r\n                    typeof item !== \"undefined\" && fileOutput.file.id === item.id\r\n            );\r\n            // 变更状态\r\n            if (index > -1) {\r\n                this.files[index] = { type: eventType, file: item };\r\n            }\r\n        });\r\n    }\r\n\r\n    /**单个文件上传 */\r\n    startUpload(file: UploadFile): void {\r\n        /**\r\n         * Todo:后续可以从上传区块上取内容进行扩展\r\n         */\r\n        const event: UploadInput = this.uploadAPISer.getAssignAPI(\"upload\", {\r\n            file: file,\r\n            type: this.enableSliceUpload ? 'sliceUpload': 'upload',\r\n            data: this.extendDatas,\r\n            chunkSize: this.chunkSize\r\n        });\r\n        this.inputUploadEventEmit(event);\r\n    }\r\n    /**\r\n     * 上传所有\r\n     */\r\n    startUploadAll(): void {\r\n        /**\r\n         *  Todo：后续，如果每个数据不一样，此处的数据得重新归集\r\n         */\r\n        const event: UploadInput = this.uploadAPISer.getAssignAPI(\"uploadAll\", {\r\n            type: this.enableSliceUpload ? 'sliceUpload': \"uploadAll\",\r\n            files: [],\r\n            data: this.extendDatas,\r\n            chunkSize: this.chunkSize\r\n        });\r\n        this.inputUploadEventEmit(event);\r\n    }\r\n    /**\r\n     * 已上传隐藏属性\r\n     */\r\n    hideAfterLoaded(output: UploadOutput): void {\r\n        //上传完成后删除\r\n        if (this.uploadedThenHide) {\r\n            // this.ngZone.runOutsideAngular(() => {\r\n            setTimeout(() => {\r\n                // 删除或者移除文件\r\n                let ids = output.files.map((fileItem) => fileItem.id);\r\n                this.files = this.files.filter((fileOutput: UploadOutput) => {\r\n                    let tIndex = ids.findIndex((tId) => tId == fileOutput.file.id);\r\n                    return tIndex > -1 ? false : true;\r\n                });\r\n\r\n                const event: UploadInput = this.uploadAPISer.getAssignAPI(\"hide\", {\r\n                    type: \"hide\",\r\n                    id: ids.join(\",\"),\r\n                });\r\n                this.inputUploadEventEmit(event);\r\n            }, 1000);\r\n            // });\r\n        }\r\n    }\r\n    /**\r\n     * 取消上传\r\n     */\r\n    cancelUpload(id: string): void {\r\n        const event: UploadInput = this.uploadAPISer.getAssignAPI(\"cancel\", {\r\n            id: id,\r\n            type: \"cancel\",\r\n        });\r\n        this.inputUploadEventEmit(event);\r\n    }\r\n    /**\r\n     * 删除已上传文件\r\n     */\r\n    removelAllUpload(): void {\r\n        const event: UploadInput = this.uploadAPISer.getAssignAPI(\"removeAll\", {\r\n            type: \"removeAll\",\r\n            files: [],\r\n        });\r\n        this.inputUploadEventEmit(event);\r\n    }\r\n    /**\r\n     * 删除已上传文件\r\n     */\r\n    removeFile(id: string): void {\r\n        const event: UploadInput = this.uploadAPISer.getAssignAPI(\"remove\", {\r\n            id: id,\r\n            type: \"remove\",\r\n        });\r\n        this.inputUploadEventEmit(event);\r\n    }\r\n    /** */\r\n    /**\r\n     *\r\n     * @param bytes\r\n     */\r\n    formateBytes(bytes) {\r\n        return FFileUtils.humanizeBytes(bytes);\r\n    }\r\n    /**\r\n     * 判断是图片\r\n     * @param type\r\n     */\r\n    isImage(type) {\r\n        return type.indexOf(\"image\") > -1;\r\n    }\r\n    // inProgress(progress) {\r\n    //   console.log('进入inProgress');\r\n    //   if (progress.data.percentage == 100) {\r\n    //     return 'done'\r\n    //   }\r\n    //   if (progress.data.percentage == 0) {\r\n    //     return 'uploadi';\r\n    //   }\r\n    //   return 'progress';\r\n    // }\r\n\r\n    /**\r\n     * 是否判断有类型限制\r\n     */\r\n    judgeContentTypeLimit() {\r\n        let tTypes = this.allowedContentTypes.split(\",\");\r\n        let hasAllIndex = tTypes.findIndex((item) => {\r\n            return item == \"*\";\r\n        });\r\n        return hasAllIndex == -1;\r\n    }\r\n    /**\r\n     * 判断是否有文件大小的限制\r\n     */\r\n    judegeFileSizeLimit() {\r\n        return this.maxFileSize != \"0 Byte\";\r\n    }\r\n    /**\r\n     * 追加\r\n     */\r\n    appendNewFiles(ev) {\r\n        //启用拖拽\r\n        if (this.enableDrop) {\r\n            this.showAppendPanel = true;\r\n        } else {\r\n            ev && ev.stopPropagation();\r\n            this.triggerFileSelect(ev);\r\n        }\r\n    }\r\n    /**\r\n     * 关闭追加面板\r\n     */\r\n    closeAppendPanel() {\r\n        this.showAppendPanel = false;\r\n    }\r\n    /**\r\n     * 统一触发 附件选择和拖拽附件的事件\r\n     * @param ev\r\n     */\r\n    private inputUploadEventEmit(ev: UploadInput) {\r\n        // 如果文件上传启用\r\n        if (this.enableSelect) {\r\n            this.uploadSelectInput.emit(ev);\r\n        } else {\r\n            this.uploadDragInput.emit(ev);\r\n        }\r\n    }\r\n    // 重置方法\r\n    reset() {\r\n        this.files = [];\r\n        // 如果文件上传启用\r\n        if (this.enableSelect) {\r\n            this.fileUpload && this.fileUpload.reset();\r\n        } else {\r\n            this.fileDropUpload && this.fileDropUpload.reset();\r\n        }\r\n        this.computeWidthThreshold();\r\n    }\r\n    /**\r\n     * 计算阈值\r\n     */\r\n    private computeWidthThreshold() {\r\n        //\r\n        this.ngZone.runOutsideAngular(() => {\r\n            let self = this;\r\n            setTimeout(() => {\r\n                let tNeedComputedCls = false;\r\n                if (self.fFileUploadDir || !self.visible) {\r\n                    tNeedComputedCls = false;\r\n                }\r\n                // 计算元素\r\n                let assistEl = self.fFileUploadAssist\r\n                    ? self.fFileUploadAssist.nativeElement\r\n                    : null;\r\n\r\n                if (assistEl) {\r\n                    assistEl.parentElement.classList[\"add\"](\"ffileupload-default\");\r\n                }\r\n\r\n                return;\r\n\r\n                // // 超过阈值\r\n                // if (assistEl && assistEl.getBoundingClientRect().width > self.widthThreshold) {\r\n                //   tNeedComputedCls = true;\r\n                // } else {\r\n                //   tNeedComputedCls = false;\r\n                // }\r\n                // if (assistEl) {\r\n                //   let actionFun = tNeedComputedCls ? 'add' : 'remove';\r\n                //   assistEl.parentElement.classList[actionFun]('ffileupload-default');\r\n                // }\r\n            }, 0);\r\n        });\r\n    }\r\n}\r\n","import { Component, OnInit, Input, HostBinding, Output, EventEmitter, ContentChild, TemplateRef, ViewEncapsulation, SimpleChanges, OnChanges, ChangeDetectorRef, ViewChildren, ElementRef, ViewChild } from '@angular/core';\r\nimport { FUploadFileExtend } from '../../model/index';\r\nimport { FFilePreviewListTypeTemplateDirective, FFilePreviewToolbarTemplateDirective } from '../../directive/index';\r\n\r\n@Component({\r\n    selector: 'f-file-preview',\r\n    templateUrl: './f-file-preview.component.html',\r\n    styleUrls: ['./f-file-preview.component.css'],\r\n    encapsulation: ViewEncapsulation.None\r\n})\r\nexport class FFilePreviewComponent implements OnInit, OnChanges {\r\n    @HostBinding('class.ffilepreview--wrapper') cls = true;\r\n    @HostBinding('class.ffilepreview-unvisible') get visibleState() {\r\n        return !this.visible;\r\n    }\r\n    // 只读的状态，控制附件是否可删除\r\n    @Input() readonly = true;\r\n    private _defaultItemCls = '';\r\n    @Input()\r\n    set defaultItemCls(value: string) {\r\n        this._defaultItemCls = value;\r\n    }\r\n    get defaultItemCls(): string {\r\n        //如果有自定义的值\r\n        if (this._defaultItemCls) {\r\n            return this._defaultItemCls + ' ';\r\n        }\r\n        // 如果有自定义模板\r\n        if (this.listTypeTemplate) {\r\n            return 'ffilepreview--item ';\r\n        }\r\n        return this.type == 'list' ? 'ffilepreview--item ' : 'ffilepreview--item col-sm-12 col-md-6 col-xl-3 col-el-2 ';\r\n    }\r\n    @Input() visible = true;\r\n    // 是否启用批量操作\r\n    @Input() enableMulti = false;\r\n    // list类型 card类型\r\n    @Input() type = \"list\";\r\n    // 列项上的class\r\n    @Input() itemCls = \"\";\r\n    // Header的class\r\n    @Input() headerCls = '';\r\n    // 启用重命名\r\n    @Input() canRename = false;\r\n    // 默认重命名\r\n    @Input() defaultRename = '';\r\n    // \r\n    @Input() enableCardAreaResponse = true;\r\n    // 标记是否显示重命名输入框\r\n    showRenameInput = false;\r\n    @ViewChild('multiRenameInput') multiRenameRef: ElementRef;\r\n    //@Input() fileInfos:FUploadFileExtend[]=[];\r\n    private _fileInfos: FUploadFileExtend[] = [];\r\n    @Input()\r\n    set fileInfos(val: FUploadFileExtend[]) {\r\n        this._fileInfos = this.formatDatas(val);;\r\n    }\r\n    get fileInfos(): FUploadFileExtend[] {\r\n        return this._fileInfos;\r\n    };\r\n    // 附件预览信息，抛出对象给第三方处理\r\n    @Output() filePreviewEvent = new EventEmitter<FUploadFileExtend>();\r\n    // 附件下载事件，抛出对象给第三方处理\r\n    @Output() fileDownloadEvent = new EventEmitter<{ fileInfos: FUploadFileExtend[], name: string }>();\r\n    @Output() multiSelectedEvent = new EventEmitter<FUploadFileExtend[]>();\r\n    // 附件删除事件，抛出对象给第三方处理\r\n    @Output() fileRemoveEvent = new EventEmitter<FUploadFileExtend>();\r\n    @ContentChild(FFilePreviewListTypeTemplateDirective, { read: TemplateRef }) listTypeTemplate: TemplateRef<any>;\r\n    @ContentChild(FFilePreviewToolbarTemplateDirective, { read: TemplateRef }) toolbarTemplate: TemplateRef<any>;\r\n    multiSelected: FUploadFileExtend[] = [];\r\n    // 全选状态\r\n    selectAllBtnChecked = false;\r\n    settings = {\r\n        readonly: this.readonly,\r\n        visible: this.visible,\r\n        enableMulti: this.enableMulti\r\n    };\r\n\r\n    constructor(private cd: ChangeDetectorRef) { }\r\n    ngOnInit() {\r\n\r\n    }\r\n    ngOnChanges(changes: SimpleChanges) {\r\n        // if (changes['enableMultiDownload']) {\r\n        //     this.formatDatas(this.fileInfos);\r\n        // }\r\n    }\r\n    /**\r\n     * 格式化数据\r\n     * @param val \r\n     */\r\n    formatDatas(val) {\r\n        if (this.enableMulti) {\r\n            let formatValue= val.map((item: FUploadFileExtend) => {\r\n                // if (!item.hasOwnProperty('checked')) {\r\n                //     //\r\n                //     let findItem = this._fileInfos.find(olditem => {\r\n                //         return item.id == olditem.id;\r\n                //     });\r\n                //     if (findItem && findItem.hasOwnProperty('checked')) {\r\n                //         item['checked'] = findItem['checked'];\r\n                //     } else {\r\n                //         item['checked'] = this.selectAllBtnChecked;\r\n                //     }\r\n                // }\r\n                item['checked'] = this.selectAllBtnChecked;\r\n                return item;\r\n            });\r\n            // 归集已选数据\r\n            if(this.selectAllBtnChecked){\r\n                this.multiSelected=[...formatValue];\r\n            }else{\r\n                this.multiSelected=[];\r\n            }\r\n            // 返回格式化数据\r\n            return formatValue;\r\n        } else {\r\n            return val;\r\n        }\r\n    }\r\n    /**\r\n     * 预览\r\n     * @param ev \r\n     * @param fileInfo \r\n     */\r\n    filePreviewHandler(ev: Event, fileInfo: FUploadFileExtend) {\r\n        ev.stopImmediatePropagation();\r\n        this.filePreviewEvent.emit(fileInfo);\r\n    }\r\n    /**\r\n     * 下载\r\n     * @param ev \r\n     * @param fileInfo \r\n     */\r\n    fileDownloadHandler(ev: Event, fileInfo: FUploadFileExtend) {\r\n        ev.stopImmediatePropagation();\r\n        this.fileDownloadEvent.emit({ fileInfos: [fileInfo], name: '' });\r\n    }\r\n    fileMultiDownloadHandler(ev: Event) {\r\n        ev.stopImmediatePropagation();\r\n        let rename = '';\r\n        if (this.showRenameInput) {\r\n            rename = this.multiRenameRef.nativeElement.value;\r\n        }\r\n        if (rename == '') {\r\n            rename = this.defaultRename;\r\n        }\r\n        this.fileDownloadEvent.emit({ fileInfos: this.multiSelected, name: rename });\r\n    }\r\n    /**\r\n     * checkbox多选\r\n     * @param ev \r\n     */\r\n    multiSelectChange(ev) {\r\n        let hasInArray = this.multiSelected.findIndex(item => item['id'] == ev['id']);\r\n        let findInArray = this.fileInfos.findIndex(item => item['id'] == ev['id']);\r\n        if (findInArray > -1) {\r\n            this.fileInfos[findInArray]['checked'] = ev['checked'];\r\n        }\r\n\r\n        if (ev['checked']) {\r\n            //选入\r\n            if (hasInArray == -1) {\r\n                if (findInArray > -1) {\r\n                    this.multiSelected.push(this.fileInfos[findInArray]);\r\n                }\r\n            }\r\n        } else {\r\n            //移出\r\n            if (hasInArray > -1) {\r\n                this.multiSelected.splice(hasInArray, 1);\r\n            }\r\n        }\r\n        // 判断是否全选\r\n        if (this.fileInfos.length > 0) {\r\n            if (this.multiSelected.length == this.fileInfos.length) {\r\n                //都全选\r\n                this.selectAllBtnChecked = true;\r\n            } else {\r\n                // 未全选\r\n                this.selectAllBtnChecked = false;\r\n            }\r\n        }\r\n        // 抛出多选\r\n        this.multiSelectedEvent.emit(this.multiSelected);\r\n    }\r\n    /**\r\n     * 删除数据\r\n     * @param ev \r\n     * @param fileInfo \r\n     */\r\n    fileRemoveHandler(ev: Event, fileInfo: FUploadFileExtend) {\r\n        ev.stopImmediatePropagation();\r\n        this.fileRemoveEvent.emit(fileInfo);\r\n    }\r\n    /**\r\n     * 获取文档类型对应的class\r\n     * @param fileName \r\n     */\r\n    getFileTypeClassName(fileName) {\r\n        let clsName = 'ffilepreview--filetype';\r\n        // 如果名称为空\r\n        if (!fileName) {\r\n            return clsName + '-any';\r\n        }\r\n        let lastDotIndex = fileName.lastIndexOf(\".\");\r\n        let fileSuffix = '';\r\n        if (lastDotIndex > -1) {\r\n            fileSuffix = fileName.substring(lastDotIndex + 1).toLocaleLowerCase();\r\n        }\r\n        switch (fileSuffix) {\r\n            case 'pdf':\r\n                clsName += '-pdf';\r\n                break;\r\n            case 'jpeg':\r\n            case 'jpg':\r\n            case 'gif':\r\n            case 'svg':\r\n            case 'png':\r\n            case 'bmp':\r\n                clsName += '-img';\r\n                break;\r\n            case 'ppt':\r\n            case 'pptx':\r\n                clsName += '-ppt';\r\n                break;\r\n            case 'doc':\r\n            case 'docx':\r\n                clsName += '-doc';\r\n                break;\r\n            case 'xls':\r\n            case 'xlsx':\r\n                clsName += '-xls';\r\n                break;\r\n            case 'txt':\r\n                clsName += '-txt';\r\n                break;\r\n            case 'zip':\r\n                clsName += '-zip';\r\n                break;\r\n            default:\r\n                clsName += '-any';\r\n        }\r\n        return clsName;\r\n    }\r\n    \r\n    /**\r\n     * 是不是有附件名称\r\n     * @param name \r\n     */\r\n    hasFileName(name): boolean {\r\n        if (!name) {\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n    /**\r\n     * 选择或取消所有\r\n     * @param ev \r\n     */\r\n    selectOrCancelAllHandler(ev) {\r\n        if (ev['checked']) {\r\n            // 全选\r\n            this.fileInfos.forEach(item => {\r\n                item.checked = true;\r\n            });\r\n            this.multiSelected = [...this.fileInfos];\r\n            this.selectAllBtnChecked = true;\r\n\r\n        } else {\r\n            // 取消\r\n            this.multiSelected = [];\r\n            this.fileInfos.forEach(item => {\r\n                item.checked = false;\r\n            });\r\n            this.selectAllBtnChecked = false;\r\n        }\r\n        this.cd.detectChanges();\r\n    }\r\n    /**\r\n     * 显示隐藏输入名称\r\n     */\r\n    toggleRenameInput(ev) {\r\n        ev.stopPropagation();\r\n        this.showRenameInput = !this.showRenameInput;\r\n        if (!this.multiRenameRef.nativeElement.value) {\r\n            this.multiRenameRef.nativeElement.value = this.defaultRename;\r\n        }\r\n    }\r\n}\r\n","import {\r\n    Component,\r\n    OnInit,\r\n    Input,\r\n    Output,\r\n    EventEmitter,\r\n    HostBinding,\r\n} from \"@angular/core\";\r\n\r\n@Component({\r\n    selector: \"f-file-preview-checkbox\",\r\n    templateUrl: \"./preview-checkbox.component.html\",\r\n    styleUrls: [],\r\n})\r\nexport class PreviewCheckboxComponent implements OnInit {\r\n    @HostBinding(\"class.align-middle\") cls1 = true;\r\n    @HostBinding(\"class.d-inline-flex\") cls2 = true;\r\n    @HostBinding(\"class.preview-checkbox\") cls3 = true;\r\n\r\n    @Input() checked: boolean = false;\r\n    @Input() id: string;\r\n    @Input() disabled: boolean = false;\r\n\r\n    @Input() showDragBar = false;\r\n\r\n    @Output() checkedChange = new EventEmitter();\r\n\r\n    constructor() { }\r\n\r\n    ngOnInit() { }\r\n\r\n    clickHandler(event) {\r\n        event.stopPropagation();\r\n        if (!this.disabled) {\r\n            this.checked = !this.checked;\r\n            this.checkedChange.emit({ checked: this.checked, id: this.id });\r\n        }\r\n    }\r\n}\r\n","import { Component, OnInit, Input, ElementRef, ViewChild, AfterViewInit, HostBinding, SimpleChange } from '@angular/core';\r\nimport { FUploadFileExtend } from '../../model';\r\n\r\n@Component({\r\n  selector: 'ffile-multi-download-info',\r\n  templateUrl: './multi-download-info.component.html',\r\n  styleUrls: ['./multi-download-info.component.css']\r\n})\r\nexport class MultiDownloadInfoComponent implements OnInit,AfterViewInit {\r\n  @HostBinding('class.ffile-multi-download-info') cls=true;\r\n  @ViewChild('multiRenameInput') multiRenameRef: ElementRef;\r\n  // 记载下载数据\r\n  private _downloadInfos: FUploadFileExtend[] = [];\r\n  @Input()\r\n  set downloadInfos(value) {\r\n    if (value && value.length > 0) {\r\n      this._downloadInfos = value;\r\n      if (!this._downloadName) {\r\n        this.downloadName = this.getName(this._downloadInfos[0]['name']);\r\n      }\r\n    }\r\n  }\r\n  get downloadInfos() {\r\n    return this._downloadInfos;\r\n  }\r\n  // 默认名称\r\n  private _downloadName = '';\r\n  @Input()\r\n  set downloadName(value: string) {\r\n    this._downloadName=value;    \r\n  }\r\n  get downloadName() {\r\n    if(!this._downloadName&&this._downloadInfos.length>0){\r\n      this._downloadName = this.getName(this._downloadInfos[0]['name']);\r\n    }    \r\n    return this._downloadName;\r\n  }\r\n\r\n  fileTypeCls = '';\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit() {\r\n   \r\n  }\r\n  ngAfterViewInit(){\r\n    //this.multiRenameRef.nativeElement.value = this.downloadName;\r\n  }\r\n  /**\r\n   * 获取下载名称\r\n   */\r\n  getDownloadName() {\r\n    return  this.multiRenameRef.nativeElement.value;\r\n  }\r\n  private getName(name: string) {\r\n    if (name.lastIndexOf('.') > 0) {\r\n      return name.substring(0, name.lastIndexOf('.'));\r\n    }\r\n    return '';\r\n  }\r\n\r\n  getFileTypeClassName(filename: string) {\r\n\r\n  }\r\n}\r\n","export const FARRIS_UPLOADFILE_LOCALEDATA = {\r\n    en: {\r\n        uploadAndPreview: {\r\n            uploadSelectText: 'Select Files',\r\n            filesCount: '<span class=\"count\">{0}</span> files in total.',\r\n            selectCount: '（<span class=\"count-selected\">{0}</span> files selected.）',\r\n            download: 'Download',\r\n            delete: 'Delete',\r\n            authMsg: 'You are not authorized to operate attachments',\r\n            nofiles: 'No attachment information',\r\n            uploading: 'Uploading...',\r\n            uploadSuccess: 'Upload succeeded',\r\n            successed: 'Uploaded',\r\n            supportType: 'Support Type',\r\n            maxSize: 'Maximum size of a single file',\r\n            maxFileCount: 'Maximum number of files'\r\n        }\r\n    },\r\n    'zh-CHS':{\r\n        uploadAndPreview: {\r\n            uploadSelectText: '上传附件',\r\n            filesCount: '共<span class=\"count\">{0}</span>个附件',\r\n            selectCount: '（已选<span class=\"count-selected\">{0}</span>个）',\r\n            download: '下载',\r\n            delete: '删除',\r\n            authMsg: '您无权操作附件',\r\n            nofiles: '无附件信息',\r\n            uploading: '正在上传...',\r\n            uploadSuccess: '上传成功',\r\n            successed: '已上传',\r\n            supportType: '支持类型',\r\n            maxSize: '单个文件限制',\r\n            maxFileCount: '文件总数限制'\r\n        }\r\n    },\r\n    'zh-CHT': {\r\n        uploadAndPreview: {\r\n            uploadSelectText: '上傳附件',\r\n            filesCount: '共<span class=\"count\">{0}</span>個附件',\r\n            selectCount: '（已選<span class=\"count-selected\">{0}</span>個）',\r\n            download: '下載',\r\n            delete: '刪除',\r\n            authMsg: '您無權操作附件',\r\n            nofiles: '無附件信息',\r\n            uploading: '正在上傳...',\r\n            uploadSuccess: '上傳成功',\r\n            successed: '已上傳',\r\n            supportType: '支持類型',\r\n            maxSize: '單個文件限制',\r\n            maxFileCount: '文件總數限制'\r\n        }\r\n    }\r\n}","import {\r\n    Component,\r\n    OnInit,\r\n    AfterViewInit,\r\n    ElementRef,\r\n    Input,\r\n    Output,\r\n    EventEmitter,\r\n    HostBinding,\r\n    ViewChild,\r\n    TemplateRef,\r\n    NgZone,\r\n    ChangeDetectorRef,\r\n    OnChanges,\r\n    SimpleChanges,\r\n    ViewEncapsulation,\r\n    Optional,\r\n} from \"@angular/core\";\r\nimport { NotifyService, NotifyOptions } from \"@farris/ui-notify\";\r\nimport { BsModalService } from \"@farris/ui-modal\";\r\nimport {\r\n    FFileUploadAPIService,\r\n    FFileUploaderService,\r\n} from \"../../service/index\";\r\nimport { FFileSelectDirective } from \"../../directive/index\";\r\nimport { MultiDownloadInfoComponent } from \"../multi-download-info/multi-download-info.component\";\r\nimport {\r\n    UploadOutput,\r\n    UploadInput,\r\n    UploadFile,\r\n    UploaderOptions,\r\n    FUploadFileExtend,\r\n    DocMetaProperty,\r\n    UploadStatus,\r\n} from \"../../model/index\";\r\nimport { Observable, Subject } from \"rxjs\";\r\nimport { FFileUtils } from \"../../utils/index\";\r\nimport {\r\n    trigger,\r\n    style,\r\n    state,\r\n    animate,\r\n    transition,\r\n} from \"@angular/animations\";\r\n\r\nimport ResizeObserver from \"resize-observer-polyfill\";\r\nimport { LocaleService } from \"@farris/ui-locale\";\r\nimport { FARRIS_UPLOADFILE_LOCALEDATA } from \"../../locale\";\r\n\r\n@Component({\r\n    selector: \"f-file-upload-and-preview\",\r\n    templateUrl: \"./upload-and-preview.component.html\",\r\n    styleUrls: [\"./upload-and-preview.component.css\"],\r\n    providers: [FFileUploaderService],\r\n    animations: [\r\n        trigger(\"hideUploaded\", [\r\n            state(\"show\", style({ opacity: 1, height: \"*\" })),\r\n            state(\"hide\", style({ opacity: 0, height: 0 })),\r\n            // transition('* => void', [\r\n            //   style({ opacity: 1}),\r\n            //   animate(200, style({ opacity: 0}))\r\n            // ])\r\n            transition(\"* => hide\", animate(\"0.5s\")),\r\n        ]),\r\n    ],\r\n    encapsulation: ViewEncapsulation.None,\r\n})\r\nexport class UploadAndPreviewComponent\r\n    implements OnInit, AfterViewInit, OnChanges {\r\n    @HostBinding(\"class.ffileUploadAndPreview\") cls = true;\r\n    @HostBinding(\"class.ffileUploadAndPreview-content-fill\") get fillState() {\r\n        return this.contentFill;\r\n    }\r\n    // 预览模板\r\n    @ViewChild(\"previewFileNameTmpl\") previewFileNameTmpl: TemplateRef<void>;\r\n    // 文件大小模板\r\n    @ViewChild(\"fileSizeTmpl\") fileSizeTmpl: TemplateRef<void>;\r\n    // 文件状态模板\r\n    @ViewChild(\"uapStateTmpl\") uapStateTmpl: TemplateRef<void>;\r\n    // 预览操作模板\r\n    @ViewChild(\"previewActionTmpl\") previewActionTmpl: TemplateRef<void>;\r\n    // 预览操作模板\r\n    @ViewChild(\"previewDateTmpl\") previewDateTmpl: TemplateRef<void>;\r\n    // 上传操作模板\r\n    @ViewChild(\"uploadFileNameTmpl\") uploadFileNameTmpl: TemplateRef<void>;\r\n    /**\r\n     * 每个组可以设置特殊服务参数，来覆盖默认的统一模块级配置\r\n     */\r\n    @Input()\r\n    set extendServerConfig(config: any) {\r\n        if (config) {\r\n            this.fileUploaderSer.setExtendServerConfig(config);\r\n        }\r\n    }\r\n    // 内容区域填充\r\n    @Input() contentFill = false;\r\n    /** 启用手动调整展示顺序 */\r\n    @Input() enableOrder = false;\r\n\r\n    @Input() orderField = \"order\";\r\n\r\n    private _renameFromDialog = \"\";\r\n    // 记录列字段\r\n    private _previewColumnsFields = [];\r\n    // 预置列信息\r\n    private _presetPreviewColumns = [\r\n        { field: \"name\", width: 200, title: \"文件名\", checkbox: true },\r\n        { field: \"size\", width: 100, title: \"大小\" },\r\n        { field: \"createTime\", width: 100, title: \"日期\" },\r\n        { field: \"state\", width: 100, title: \"状态\" },\r\n        { field: \"action\", width: 100, title: \"操作\" },\r\n    ];\r\n    // 内部记录列信息\r\n    private _previewColumns = [];\r\n    @Input()\r\n    set previewColumns(value) {\r\n        if (value && value.length > 0) {\r\n            this._previewColumns = [...value];\r\n        } else {\r\n            this._presetPreviewColumns = [...this._presetPreviewColumns];\r\n        }\r\n        this.getFieldsFromColumns();\r\n    }\r\n    get previewColumns() {\r\n        return this._previewColumns;\r\n    }\r\n    // 格式化预览数据\r\n    private _fileInfos: FUploadFileExtend[] = [];\r\n    @Input()\r\n    set fileInfos(val: FUploadFileExtend[]) {\r\n        this._fileInfos = this.formatPreviewDatas(val);\r\n        this._renameFromDialog = \"\";\r\n    }\r\n    get fileInfos(): FUploadFileExtend[] {\r\n        return this._fileInfos;\r\n    }\r\n    /**\r\n     * 附件预览配置---------------------------------------开始\r\n     */\r\n    @Input() previewDateFormat = \"yyyy-MM-dd\";\r\n    // 只读的状态，控制附件是否可删除\r\n    // 默认处于查看状态\r\n    @Input() previewReadonly = true;\r\n    @Input() previewVisible = true;\r\n    // 是否启用批量操作\r\n    @Input() previewEnableMulti = true;\r\n    // 预览显示类别\r\n    @Input() previewShowType = \"list\";\r\n    // 启用重命名\r\n    @Input() previewEnableRename = true;\r\n    // 默认重命名\r\n    @Input() previewDefaultRename = \"\";\r\n    // 附件预览，预览事件\r\n    @Output() filePreviewEvent = new EventEmitter<FUploadFileExtend>();\r\n    // 附件预览，下载事件，抛出对象给第三方处理\r\n    @Output() fileDownloadEvent = new EventEmitter<{\r\n        fileInfos: FUploadFileExtend[];\r\n        name: string;\r\n    }>();\r\n    // 附件预览，多选事件\r\n    @Output() fPreviewMultiSelectedEvent = new EventEmitter<\r\n        FUploadFileExtend[]\r\n    >();\r\n    // 附件预览，删除事件，抛出对象给第三方处理\r\n    @Output() fileRemoveEvent = new EventEmitter<FUploadFileExtend[]>();\r\n    // 全选状态\r\n    previewSelectAllBtnChecked = false;\r\n    // 记录选中数据\r\n    previewMultiSelected: FUploadFileExtend[] = [];\r\n    // 构造预览的配置数据\r\n    get previewSettings() {\r\n        return {\r\n            readonly: this.previewReadonly,\r\n            visible: this.previewVisible,\r\n            enableMulti: this.previewEnableMulti,\r\n            enableRename: this.previewEnableRename,\r\n        };\r\n    }\r\n    /**\r\n     * 附件预览配置---------------------------------------结束\r\n     */\r\n\r\n    /**\r\n     * 附件上传配置---------------------------------------开始\r\n     */\r\n    // 附件上传选择指令\r\n    @ViewChild(FFileSelectDirective) fileUpload: FFileSelectDirective;\r\n    // 附件上传部分禁用状态\r\n    @Input() uploadDisabled = false;\r\n    private tUploadVisible = true;\r\n\r\n    // 附件上传部分是否可见\r\n    @Input()\r\n    set uploadVisible(value) {\r\n        this.tUploadVisible = value;\r\n        if (!value) {\r\n            this.uploadReset();\r\n        }\r\n    }\r\n    get uploadVisible() {\r\n        return this.tUploadVisible;\r\n    }\r\n    // 需要重置,通过不断的赋值来改变\r\n    @Input() uploadNeedReset: Observable<any> = new Subject();\r\n    // 启用选择文件按钮\r\n    @Input() uploadEnableSelect = true;\r\n    // 选择文件按钮上传问题\r\n    @Input() uploadSelectText = '';\r\n    // 启用多选\r\n    @Input() uploadEnableMulti = true;\r\n    // 已经上传文件\r\n    @Input() uploadedCount = 0;\r\n    // 公共的扩展数据\r\n    @Input() extendDatas: {\r\n        [key: string]: any;\r\n        extProperty?: DocMetaProperty | null; //\r\n    };\r\n\r\n    /** 整个控件禁用 */\r\n    @Input() disabled = false;\r\n    /** 禁止下载 */\r\n    @Input() noDownload = false;\r\n\r\n    @Input()\r\n    set uploadOptions(uploadOpts: UploaderOptions) {\r\n        if (uploadOpts) {\r\n            if (uploadOpts.hasOwnProperty(\"allowedContentTypes\")) {\r\n                this.allowedContentTypes = uploadOpts.allowedContentTypes.join(\",\");\r\n                this.allowedContentTypes =\r\n                    this.allowedContentTypes == \"\" ? \"*\" : this.allowedContentTypes;\r\n            }\r\n            if (uploadOpts.hasOwnProperty(\"maxUploads\")) {\r\n                this.maxUploads = uploadOpts.maxUploads;\r\n            }\r\n            if (uploadOpts.hasOwnProperty(\"maxFileSize\")) {\r\n                this.maxFileSize = FFileUtils.humanizeBytes(\r\n                    1024 * 1024 * uploadOpts.maxFileSize\r\n                );\r\n            }\r\n            this.selfUploadOpts = Object.assign(this.selfUploadOpts, uploadOpts);\r\n        }\r\n    }\r\n    get uploadOptions() {\r\n        return this.selfUploadOpts;\r\n    }\r\n    // 附件上传中，上传完成抛出的事件\r\n    @Output() fUploadDoneEvent = new EventEmitter<FUploadFileExtend[]>();\r\n    // 附件上传中，删除附件事件\r\n    @Output() fUploadRemovedEvent = new EventEmitter<FUploadFileExtend[]>();\r\n\r\n    /** 文件放下事件 */\r\n    @Output() afterOrdered = new EventEmitter();\r\n\r\n    @ViewChild(\"uaptb\") uploadAndPreviewTbodyRef: ElementRef<any>;\r\n\r\n    private uploadAndPreviewTableHeader: ElementRef = null;\r\n    private uploadAndPreviewTableHeaderCreated$ = new Subject();\r\n    @ViewChild(\"uapth\") set uploadAndPreviewTheadRef(th: ElementRef) {\r\n        if (th) {\r\n            this.uploadAndPreviewTableHeader = th;\r\n            this.setColumnWidth();\r\n            this.ro.observe(th.nativeElement);\r\n            this.uploadAndPreviewTableHeaderCreated$.next(th);\r\n        } else {\r\n            this.uploadAndPreviewTableHeader = null;\r\n            if (this.ro) {\r\n                this.ro.disconnect();\r\n            }\r\n            this.uploadAndPreviewTableHeaderCreated$.next(null);\r\n        }\r\n    }\r\n    get uploadSettings() {\r\n        return {\r\n            disabled: this.uploadDisabled,\r\n            visible: this.uploadVisible,\r\n            enableMulti: this.uploadEnableMulti,\r\n            extendDatas: this.extendDatas,\r\n        };\r\n    }\r\n    // 允许上传的文件类型\r\n    allowedContentTypes = \"*\";\r\n    // 默认不限制附件上传个数\r\n    maxUploads = 0;\r\n    // 单位KB，默认是12M\r\n    maxFileSize = \"12MB\";\r\n    // 记录文件个数\r\n    uploadFiles: UploadOutput[];\r\n    // 标记通过选择按钮处理的事件\r\n    uploadSelectInput: EventEmitter<UploadInput>;\r\n    private selfUploadOpts: UploaderOptions = {};\r\n\r\n    private ro: ResizeObserver | null = null;\r\n\r\n    private localSer: LocaleService = null;\r\n    /**\r\n     * 附件上传配置---------------------------------------结束\r\n     */\r\n\r\n    /**\r\n     *\r\n     * @param el\r\n     * @param uploadAPISer\r\n     * @param fileUploaderSer\r\n     * @param notifyService\r\n     * @param ngZone\r\n     */\r\n    constructor(\r\n        private el: ElementRef,\r\n        private uploadAPISer: FFileUploadAPIService,\r\n        private fileUploaderSer: FFileUploaderService,\r\n        private notifyService: NotifyService,\r\n        private ngZone: NgZone,\r\n        private modalSer: BsModalService,\r\n        private cd: ChangeDetectorRef\r\n    ) {\r\n        this.uploadFiles = [];\r\n        this.uploadSelectInput = new EventEmitter<UploadInput>();\r\n        // 重置----------可能有问题\r\n        this.uploadNeedReset.subscribe((data) => {\r\n            this.uploadReset();\r\n        });\r\n\r\n        this.ro = new ResizeObserver((e) => {\r\n            this.setColumnWidth();\r\n        });\r\n\r\n        this.localSer = this.notifyService.localeService;\r\n        this.localSer.setLocaleData(FARRIS_UPLOADFILE_LOCALEDATA);\r\n    }\r\n\r\n    ngOnInit() {\r\n        if (this._previewColumns.length == 0) {\r\n            this.previewColumns = [...this._presetPreviewColumns];\r\n        }\r\n\r\n        if (!this.uploadSelectText) {\r\n            this.uploadSelectText = this.localSer.getValue('uploadAndPreview.uploadSelectText') || '上传附件';\r\n        }\r\n    }\r\n    ngAfterViewInit() { }\r\n\r\n    ngOnChanges(changes: SimpleChanges): void {\r\n        const {\r\n            previewReadonly,\r\n            previewVisible,\r\n            previewEnableMulti,\r\n            previewDefaultRename,\r\n        } = changes;\r\n        if (previewReadonly || previewVisible || previewEnableMulti) {\r\n            // 重置附件预览\r\n            this.previewMultiSelected = [];\r\n            this.fileInfos.forEach((item) => {\r\n                item.checked = false;\r\n            });\r\n            this.previewSelectAllBtnChecked = false;\r\n            this._renameFromDialog = \"\";\r\n        }\r\n        if (previewDefaultRename) {\r\n            // 重置预览重命名记录\r\n            this._renameFromDialog = \"\";\r\n        }\r\n    }\r\n    /**\r\n     * 选择或取消所有\r\n     * @param ev\r\n     */\r\n    selectOrCancelAllHandler(ev) {\r\n        if (ev[\"checked\"]) {\r\n            // 全选\r\n            this.fileInfos.forEach((item) => {\r\n                item.checked = true;\r\n            });\r\n            this.previewMultiSelected = [...this.fileInfos];\r\n            this.previewSelectAllBtnChecked = true;\r\n        } else {\r\n            // 取消\r\n            this.previewMultiSelected = [];\r\n            this.fileInfos.forEach((item) => {\r\n                item.checked = false;\r\n            });\r\n            this.previewSelectAllBtnChecked = false;\r\n        }\r\n    }\r\n    /**\r\n     * 格式化文件大小\r\n     * @param bytes\r\n     */\r\n    formateBytes(bytes) {\r\n        return FFileUtils.humanizeBytes(bytes);\r\n    }\r\n    /**\r\n     * 获取文档类型对应的class\r\n     * @param fileName\r\n     */\r\n    getFileTypeClassName(fileName) {\r\n        let clsName = \"ffilepreview--filetype\";\r\n        // 如果名称为空\r\n        if (!fileName) {\r\n            return clsName + \"-any\";\r\n        }\r\n        let lastDotIndex = fileName.lastIndexOf(\".\");\r\n        let fileSuffix = \"\";\r\n        if (lastDotIndex > -1) {\r\n            fileSuffix = fileName.substring(lastDotIndex + 1).toLocaleLowerCase();\r\n        }\r\n        switch (fileSuffix) {\r\n            case \"pdf\":\r\n                clsName += \"-pdf\";\r\n                break;\r\n            case \"jpeg\":\r\n            case \"jpg\":\r\n            case \"gif\":\r\n            case \"svg\":\r\n            case \"png\":\r\n            case \"bmp\":\r\n                clsName += \"-img\";\r\n                break;\r\n            case \"ppt\":\r\n            case \"pptx\":\r\n                clsName += \"-ppt\";\r\n                break;\r\n            case \"doc\":\r\n            case \"docx\":\r\n                clsName += \"-doc\";\r\n                break;\r\n            case \"xls\":\r\n            case \"xlsx\":\r\n                clsName += \"-xls\";\r\n                break;\r\n            case \"txt\":\r\n                clsName += \"-txt\";\r\n                break;\r\n            case \"zip\":\r\n                clsName += \"-zip\";\r\n                break;\r\n            default:\r\n                clsName += \"-any\";\r\n        }\r\n        return clsName;\r\n    }\r\n    /**\r\n     * 格式化预览数据\r\n     * @param val\r\n     */\r\n    private formatPreviewDatas(val) {\r\n        if (!val.length || this.previewMultiSelected.length !== val.length) {\r\n            this.previewSelectAllBtnChecked = false;\r\n        }\r\n\r\n\r\n        let formatValue = val.map((item: FUploadFileExtend) => {\r\n            if (!item.hasOwnProperty(\"size\")) {\r\n                item[\"size\"] = undefined;\r\n            }\r\n            if (!item.hasOwnProperty(\"createTime\")) {\r\n                item[\"createTime\"] = undefined;\r\n            }\r\n\r\n            return item;\r\n        });\r\n\r\n        if (this.enableOrder && this.orderField) {\r\n            formatValue.sort(this.sortPreviewData(this.orderField));\r\n        } else {\r\n            formatValue.sort(this.sortPreviewData(\"createTime\"));\r\n        }\r\n        if (this.previewEnableMulti) {\r\n            let newFormatValue = formatValue.map((item: FUploadFileExtend) => {\r\n                item[\"checked\"] = !!this.previewMultiSelected.find(n => n.id === item.id) || this.previewSelectAllBtnChecked;\r\n                return item;\r\n            });\r\n            // 归集已选数据\r\n            if (this.previewSelectAllBtnChecked) {\r\n                this.previewMultiSelected = [...newFormatValue].filter(n => n.checked);\r\n            } else {\r\n                this.previewMultiSelected = [];\r\n            }\r\n            // 返回格式化数据\r\n            return newFormatValue;\r\n        } else {\r\n            return formatValue;\r\n        }\r\n    }\r\n\r\n\r\n    private getValue(field: string, data: any) {\r\n        if (!data) {\r\n            return \"\";\r\n        }\r\n        let resultVal = \"\";\r\n        if (field.indexOf(\".\") === -1 && data.hasOwnProperty(field)) {\r\n            resultVal = data[field];\r\n        } else {\r\n            resultVal = field.split(\".\").reduce((obj, key) => {\r\n                if (obj) {\r\n                    return obj[key];\r\n                } else {\r\n                    return null;\r\n                }\r\n            }, data);\r\n        }\r\n        return resultVal;\r\n    }\r\n\r\n    private sortPreviewData(key) {\r\n        const _this = this;\r\n        return (x, y) => {\r\n            if (!x[key]) {\r\n                return 1;\r\n            }\r\n            if (!y[key]) {\r\n                return -1;\r\n            }\r\n\r\n            if (_this['orderField'] && key === _this['orderField']) {\r\n                let a = \"\";\r\n                let b = \"\";\r\n                if (key.indexOf(\".\") > -1) {\r\n                    a = _this.getValue(key, x);\r\n                    b = _this.getValue(key, y);\r\n                } else {\r\n                    a = x[key];\r\n                    b = y[key];\r\n                }\r\n                return a > b ? 1 : -1;\r\n            } else {\r\n                var oDate1 = new Date(x[key]);\r\n                var oDate2 = new Date(y[key]);\r\n                return oDate1.getTime() > oDate2.getTime() ? -1 : 1;\r\n            }\r\n        };\r\n    };\r\n\r\n    /**\r\n     * 格式化处理数据\r\n     */\r\n    private getFieldsFromColumns() {\r\n        this._previewColumnsFields = this._previewColumns.map(\r\n            (item) => item[\"field\"]\r\n        );\r\n    }\r\n    /**\r\n     * 根据列获取对应的列模板\r\n     * @param columnInfo\r\n     */\r\n    getColumnTemplate(columnInfo, type = \"preview\") {\r\n        let result;\r\n        if (columnInfo.hasOwnProperty(\"template\") && columnInfo[\"template\"]) {\r\n            return columnInfo[\"template\"];\r\n        }\r\n        if (type == \"preview\") {\r\n            switch (columnInfo[\"field\"]) {\r\n                case \"state\":\r\n                    result = this[\"uapStateTmpl\"];\r\n                    break;\r\n                case \"name\":\r\n                    result = this[\"previewFileNameTmpl\"];\r\n                    break;\r\n                case \"action\":\r\n                    result = this[\"previewActionTmpl\"];\r\n                    break;\r\n                case \"size\":\r\n                    result = this[\"fileSizeTmpl\"];\r\n                    break;\r\n                case \"createTime\":\r\n                    result = this[\"previewDateTmpl\"];\r\n                    break;\r\n                default:\r\n                    result = \"\";\r\n            }\r\n        } else {\r\n            switch (columnInfo[\"field\"]) {\r\n                case \"state\":\r\n                    result = this[\"uapStateTmpl\"];\r\n                    break;\r\n                case \"name\":\r\n                    result = this[\"uploadFileNameTmpl\"];\r\n                    break;\r\n                case \"size\":\r\n                    result = this[\"fileSizeTmpl\"];\r\n                    break;\r\n                default:\r\n                    result = \"\";\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n    /**\r\n     * 多选变更\r\n     */\r\n    previewMultiSelectChange(ev) {\r\n        let hasInArray = this.previewMultiSelected.findIndex(\r\n            (item) => item[\"id\"] == ev[\"id\"]\r\n        );\r\n        let findInArray = this.fileInfos.findIndex(\r\n            (item) => item[\"id\"] == ev[\"id\"]\r\n        );\r\n        if (findInArray > -1) {\r\n            this.fileInfos[findInArray][\"checked\"] = ev[\"checked\"];\r\n        }\r\n\r\n        if (ev[\"checked\"]) {\r\n            //选入\r\n            if (hasInArray == -1) {\r\n                if (findInArray > -1) {\r\n                    this.previewMultiSelected.push(this.fileInfos[findInArray]);\r\n                }\r\n            }\r\n        } else {\r\n            //移出\r\n            if (hasInArray > -1) {\r\n                this.previewMultiSelected.splice(hasInArray, 1);\r\n            }\r\n        }\r\n        // 判断是否全选\r\n        if (this.fileInfos.length > 0) {\r\n            if (this.previewMultiSelected.length == this.fileInfos.length) {\r\n                //都全选\r\n                this.previewSelectAllBtnChecked = true;\r\n            } else {\r\n                // 未全选\r\n                this.previewSelectAllBtnChecked = false;\r\n            }\r\n        }\r\n        // 抛出多选\r\n        this.fPreviewMultiSelectedEvent.emit(this.previewMultiSelected);\r\n    }\r\n    /**处理附件上传---------------------------------------------------------开始-- */\r\n    /**\r\n     * 统一触发 附件选择和拖拽附件的事件\r\n     * @param ev\r\n     */\r\n    private inputUploadEventEmit(ev: UploadInput) {\r\n        // 如果文件上传启用\r\n        if (this.uploadEnableSelect) {\r\n            this.uploadSelectInput.emit(ev);\r\n        }\r\n        // this.uploadDragInput.emit(ev);\r\n    }\r\n    /**单个文件上传 */\r\n    startUpload(file: UploadFile): void {\r\n        /**\r\n         * Todo:后续可以从上传区块上取内容进行扩展\r\n         */\r\n        const event: UploadInput = this.uploadAPISer.getAssignAPI(\r\n            \"multipartUpload\",\r\n            {\r\n                file: file,\r\n                type: \"multipartUpload\",\r\n                data: this.extendDatas,\r\n            }\r\n        );\r\n        this.inputUploadEventEmit(event);\r\n    }\r\n    // 重置方法\r\n    uploadReset() {\r\n        this.uploadFiles = [];\r\n        // 如果文件上传启用\r\n        if (this.uploadEnableSelect) {\r\n            this.fileUpload && this.fileUpload.reset();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 触发绑定\r\n     */\r\n    triggerFileSelect(ev) {\r\n        ev && ev.stopPropagation();\r\n        // 禁用时\r\n        if (this.uploadDisabled) {\r\n            return false;\r\n        }\r\n        this.fileUpload.elementRef.nativeElement.click();\r\n    }\r\n    /**\r\n     * 选择附件按钮，处理抛出事件\r\n     * @param output\r\n     */\r\n    selectUploadOutput(output: UploadOutput): void {\r\n        this.uploadOutputHandler(output);\r\n    }\r\n    /**\r\n     * allAddedToQueue 选中文件追加到队列\r\n     * @param output\r\n     */\r\n    private uploadOutputHandler(output: UploadOutput): void {\r\n        if (output.type === \"addedToQueue\" && typeof output.file !== \"undefined\") {\r\n            this.uploadFiles.push({ type: output.type, file: output.file });\r\n            // 开始上传\r\n            this.startUpload(output.file);\r\n        } else if (output.type === \"start\") {\r\n            // 开始上传\r\n            this.updateFilesState(output, \"\");\r\n        } else if (output.type == \"done\") {\r\n            // 上传完成\r\n            this.updateFilesState(output, \"done\");\r\n            this.fUploadDoneEvent.emit(\r\n                FFileUtils.changeUploadFileToFileExtend(output.files)\r\n            );\r\n            // 上传完成后不在当前页面上显示\r\n            this.hideAfterLoaded(output);\r\n        } else if (\r\n            output.type === \"cancelled\" ||\r\n            output.type === \"removed\" ||\r\n            output.type == \"error\"\r\n        ) {\r\n            // 删除或者移除文件\r\n            this.uploadFiles = this.uploadFiles.filter((fileOutput: UploadOutput) => {\r\n                return (\r\n                    output.files.findIndex((item) => fileOutput.file.id == item.id) < 0\r\n                );\r\n            });\r\n            // 给出提示\r\n            this.showNotify(output);\r\n        } else if (\r\n            output.type === \"rejected\" &&\r\n            typeof output.file !== \"undefined\"\r\n        ) {\r\n            // 上传被拒绝\r\n            this.showNotify(output);\r\n        }\r\n    }\r\n    /**\r\n     * 临时删除附件\r\n     * @param output\r\n     */\r\n    private hideAfterLoaded(output: UploadOutput): void {\r\n        // 删除或者移除文件\r\n        let ids = output.files.map((fileItem) => fileItem.id);\r\n        this.uploadFiles = this.uploadFiles.filter((fileOutput: UploadOutput) => {\r\n            let tIndex = ids.findIndex((tId) => tId == fileOutput.file.id);\r\n            return tIndex > -1 ? false : true;\r\n        });\r\n        const event: UploadInput = this.uploadAPISer.getAssignAPI(\"hide\", {\r\n            type: \"hide\",\r\n            id: ids.join(\",\"),\r\n        });\r\n        this.inputUploadEventEmit(event);\r\n    }\r\n    /**\r\n     * 处理上传\r\n     * @param output\r\n     */\r\n    private showNotify(output) {\r\n        let notifyType = \"warning\";\r\n        if (output.type == \"cancelled\" || output.type == \"removed\") {\r\n            notifyType = \"success\";\r\n        }\r\n        let message = output.hasOwnProperty(\"message\") ? output[\"message\"] : \"\";\r\n        this.notifyService[notifyType](<NotifyOptions>{\r\n            msg: message,\r\n            timeout: 3000,\r\n        });\r\n    }\r\n    /**\r\n     * 更新附件的状态\r\n     * @param output\r\n     * @param eventType\r\n     */\r\n    private updateFilesState(output: UploadOutput, eventType) {\r\n        let startFiles = [];\r\n        if (output.hasOwnProperty(\"files\") && output.files.length > 0) {\r\n            // 此处更新界面可能有性能问题\r\n            startFiles = output.files;\r\n        } else if (typeof output.file !== \"undefined\") {\r\n            startFiles = [output.file];\r\n        }\r\n        eventType = eventType ? eventType : output.type;\r\n        startFiles.map((item) => {\r\n            const index = this.uploadFiles.findIndex(\r\n                (fileOutput) =>\r\n                    typeof item !== \"undefined\" && fileOutput.file.id === item.id\r\n            );\r\n            // 变更状态\r\n            if (index > -1) {\r\n                this.uploadFiles[index] = { type: eventType, file: item };\r\n            }\r\n        });\r\n    }\r\n    /**\r\n     * 是否判断有类型限制\r\n     */\r\n    judgeContentTypeLimit() {\r\n        let tTypes = this.allowedContentTypes.split(\",\");\r\n        let hasAllIndex = tTypes.findIndex((item) => {\r\n            return item == \"*\";\r\n        });\r\n        return hasAllIndex == -1;\r\n    }\r\n    /**\r\n     * 判断是否有文件大小的限制\r\n     */\r\n    judegeFileSizeLimit() {\r\n        return this.maxFileSize != \"0 Byte\";\r\n    }\r\n    /**\r\n     * 获取上传进度\r\n     */\r\n    getUploadProgress(uploadInfo: UploadOutput) {\r\n        if (uploadInfo[\"type\"] == \"done\") {\r\n            return 100;\r\n        }\r\n        if (uploadInfo[\"file\"][\"progress\"] && uploadInfo[\"file\"][\"progress\"]) {\r\n            if (uploadInfo[\"file\"][\"progress\"][\"status\"] == UploadStatus.Uploading) {\r\n                let tPercentage = uploadInfo[\"file\"][\"progress\"][\"data\"][\"percentage\"];\r\n                return tPercentage > 5 ? tPercentage : 5;\r\n            }\r\n            return 5;\r\n        }\r\n        return 5;\r\n    }\r\n    /**\r\n     * 处理显示\r\n     * @param ev\r\n     * @param fileInfo\r\n     */\r\n    getUploadFileSizeProgress(uploadInfo: UploadOutput) {\r\n        if (!uploadInfo) {\r\n            return \"\";\r\n        }\r\n        if (uploadInfo[\"type\"] == \"done\") {\r\n            return FFileUtils.humanizeBytes(uploadInfo.file.size);\r\n        }\r\n        let tPercentage = 5;\r\n        if (uploadInfo[\"file\"][\"progress\"] && uploadInfo[\"file\"][\"progress\"]) {\r\n            if (uploadInfo[\"file\"][\"progress\"][\"status\"] == UploadStatus.Uploading) {\r\n                tPercentage = uploadInfo[\"file\"][\"progress\"][\"data\"][\"percentage\"];\r\n                tPercentage = tPercentage > 5 ? tPercentage : 5;\r\n            }\r\n        }\r\n        return (\r\n            FFileUtils.humanizeBytes((uploadInfo.file.size * tPercentage) / 100) +\r\n            \"/\" +\r\n            FFileUtils.humanizeBytes(uploadInfo.file.size)\r\n        );\r\n    }\r\n\r\n    /**处理附件上传---------------------------------------------------------结束-- */\r\n\r\n    /**\r\n     * 预览\r\n     * @param ev\r\n     * @param fileInfo\r\n     */\r\n    filePreviewHandler(ev: Event, fileInfo: FUploadFileExtend) {\r\n        ev.stopImmediatePropagation();\r\n        fileInfo.showDownload = !this.noDownload;\r\n        this.filePreviewEvent.emit(fileInfo);\r\n    }\r\n    /**\r\n     * 下载\r\n     * @param ev\r\n     * @param fileInfo\r\n     */\r\n    fileDownloadHandler(ev: Event, fileInfo: FUploadFileExtend) {\r\n        ev.stopImmediatePropagation();\r\n        this.fileDownloadEvent.emit({ fileInfos: [fileInfo], name: \"\" });\r\n    }\r\n    /**\r\n     * 删除数据\r\n     * @param ev\r\n     * @param fileInfo\r\n     */\r\n    fileRemoveHandler(ev: Event, fileInfo: FUploadFileExtend) {\r\n        ev.stopImmediatePropagation();\r\n        if (fileInfo.checked) {\r\n            this.previewMultiSelected = this.previewMultiSelected.filter(n => n.id !== fileInfo.id);\r\n        }\r\n        this.fileRemoveEvent.emit([fileInfo]);\r\n    }\r\n    /**\r\n     * 批量删除\r\n     * @param ev\r\n     */\r\n    multiFileRemoveHandler(ev: Event) {\r\n        ev.stopImmediatePropagation();\r\n        this.fileRemoveEvent.emit(this.previewMultiSelected);\r\n    }\r\n    fileMultiDownloadHandler(ev: Event) {\r\n        ev.stopImmediatePropagation();\r\n        let rename = \"\";\r\n        if (this.previewMultiSelected.length == 1) {\r\n            this.fileDownloadEvent.emit({\r\n                fileInfos: this.previewMultiSelected,\r\n                name: rename,\r\n            });\r\n            return;\r\n        }\r\n        // 启用了重命名\r\n        if (this.previewEnableRename) {\r\n            let self = this;\r\n            const dlgRef = this.modalSer.show(MultiDownloadInfoComponent, {\r\n                width: 440,\r\n                height: 200,\r\n                showMaxButton: false,\r\n                title: \"附件下载\",\r\n                initialState: {\r\n                    fileTypeCls: this.getFileTypeClassName(self.previewMultiSelected[0].name),\r\n                    downloadInfos: self.previewMultiSelected,\r\n                    downloadName:\r\n                        self._renameFromDialog && !self.previewDefaultRename\r\n                            ? self._renameFromDialog\r\n                            : self.previewDefaultRename,\r\n                },\r\n                showButtons: true,\r\n                buttons: [\r\n                    {\r\n                        text: \"取消\",\r\n                        cls: \"btn btn-secondary\",\r\n                        handle: () => {\r\n                            dlgRef.close();\r\n                        },\r\n                    },\r\n                    {\r\n                        text: \"确定\",\r\n                        cls: \"btn btn-primary\",\r\n                        handle: () => {\r\n                            const contentRef = dlgRef.content as MultiDownloadInfoComponent;\r\n                            rename = contentRef.getDownloadName();\r\n                            self.fileDownloadEvent.emit({\r\n                                fileInfos: self.previewMultiSelected,\r\n                                name: rename,\r\n                            });\r\n                            dlgRef.close();\r\n                        },\r\n                    },\r\n                ],\r\n            });\r\n        } else {\r\n            //未启用重命名\r\n            rename = this.getName(this.previewMultiSelected[0][\"name\"]);\r\n            this.fileDownloadEvent.emit({\r\n                fileInfos: this.previewMultiSelected,\r\n                name: rename,\r\n            });\r\n        }\r\n    }\r\n    private getName(name: string) {\r\n        if (name.lastIndexOf(\".\") > 0) {\r\n            return name.substring(0, name.lastIndexOf(\".\"));\r\n        }\r\n        return \"\";\r\n    }\r\n    showPreviewStateColumn(columnInfo) {\r\n        if (\r\n            columnInfo[\"field\"] == \"state\" &&\r\n            (this.uploadDisabled || !this.uploadVisible || this.noDownload)\r\n        ) {\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    /** 拖拽排序后事件 */\r\n    onOrderFileDrop($event) {\r\n        const { removedIndex, addedIndex, payload } = $event;\r\n\r\n        const removedItem = this.fileInfos.splice(removedIndex, 1);\r\n        this.fileInfos.splice(addedIndex, 0, ...removedItem);\r\n\r\n        this.cd.detectChanges();\r\n\r\n        const newOrderItems = this.fileInfos.map((n) => n.id);\r\n        this.afterOrdered.emit({ data: newOrderItems });\r\n    }\r\n\r\n    private setColumnWidth() {\r\n        if (this.uploadAndPreviewTableHeader && this.enableOrder) {\r\n            const tableWidth = this.uploadAndPreviewTableHeader.nativeElement.offsetWidth;\r\n            const cols = this.uploadAndPreviewTableHeader.nativeElement.querySelectorAll(\"th\");\r\n            const trs = this.uploadAndPreviewTbodyRef.nativeElement.querySelectorAll(\"tr\");\r\n\r\n            this.uploadAndPreviewTbodyRef.nativeElement.style.flexDirection = \"column\";\r\n            this.uploadAndPreviewTbodyRef.nativeElement.style.display = \"flex\";\r\n            this.uploadAndPreviewTbodyRef.nativeElement.style.width = tableWidth + \"px\";\r\n\r\n            Array.from(trs).forEach((tr: any) => {\r\n                tr.style.width = tableWidth + \"px\";\r\n                const tds = tr.querySelectorAll(\"td\");\r\n                Array.from(cols).forEach((th: any, index: number) => {\r\n                    tds[index].style.width = th.offsetWidth + \"px\";\r\n\r\n                    if(index === 0) {\r\n                        tds[index].querySelector('.uploadAndpreview--title-container').style.width = (th.offsetWidth - 56) + 'px';\r\n                    }\r\n                });\r\n            });\r\n        }\r\n    }\r\n}\r\n","import { Component, OnInit, Input, SimpleChanges, OnChanges } from '@angular/core';\r\n//进度条状态 默认normal\r\nexport type UploadProgressStatusType = 'success' | 'error' | 'active' | 'normal';\r\n\r\n// const statusColorMap = new Map([\r\n//   ['normal', '#388fff'],\r\n//   ['exception', '#f24645'],\r\n//   ['success', '#51bd78']\r\n// ]);\r\n@Component({\r\n  selector: 'upload-progress',\r\n  templateUrl: './upload-progress.component.html',\r\n  styleUrls: ['./upload-progress.component.css']\r\n})\r\nexport class UploadProgressComponent implements OnInit, OnChanges {\r\n  //是否显示进度条信息\r\n  @Input() showInfo: boolean = true;\r\n  //进度条状态 默认'normal'\r\n  @Input() status: UploadProgressStatusType;\r\n  //已完成的分段百分比\r\n  @Input() successPercent: number;\r\n  @Input() percent = 0;\r\n  @Input() maxWidth =0;\r\n  //存储的状态\r\n  private cachedStatus: UploadProgressStatusType = 'normal';\r\n  //计算的状态\r\n  private inferredStatus: UploadProgressStatusType = 'normal';\r\n\r\n  //获得进度条状态\r\n  get progressStatus(): UploadProgressStatusType {\r\n    return this.status || this.inferredStatus;\r\n  }\r\n  constructor() { }\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n    const { status, percent, successPercent } = changes;\r\n    //状态变化\r\n    if (status) {\r\n      this.cachedStatus = this.status || this.cachedStatus;\r\n    }\r\n    //进度 已完成的分段百分比 变化\r\n    if (percent || successPercent) {\r\n      const fillAll = parseInt(this.percent.toString(), 10) >= 100;\r\n      if (fillAll) {\r\n        if ((this.isNotNil(this.successPercent) && this.successPercent! >= 100) || this.successPercent === undefined) {\r\n          this.inferredStatus = 'success';\r\n          // this.status = this.inferredStatus;\r\n        }\r\n      } else {\r\n        this.inferredStatus = this.cachedStatus;\r\n      }\r\n      this.status = this.inferredStatus;\r\n    }\r\n  }\r\n  ngOnInit() {\r\n  }\r\n\r\n  isNotNil<T>(value: T): value is NonNullable<T> {\r\n    return typeof value !== 'undefined' && value !== null;\r\n  }\r\n\r\n}\r\n","import {\r\n  Directive,\r\n  NgZone,\r\n  Injector,\r\n  Renderer2,\r\n  ElementRef,\r\n  AfterViewInit,\r\n  Input,\r\n  Output,\r\n  EventEmitter,\r\n  OnDestroy,\r\n} from \"@angular/core\";\r\nimport {\r\n  dropHandlers,\r\n  smoothDnD as SmoothDndForVisible,\r\n  DropResult,\r\n  ContainerOptions,\r\n  constants,\r\n} from \"@farris/smooth-dnd\";\r\n\r\nconst { wrapperClass, animationClass } = constants;\r\nSmoothDndForVisible.dropHandler = dropHandlers.reactDropHandler().handler;\r\nSmoothDndForVisible.wrapChild = false;\r\n\r\nexport interface DragStartEndInfo {\r\n  isSource: boolean;\r\n  payload: any;\r\n  willAcceptDrop: boolean;\r\n}\r\n\r\n@Directive({\r\n  selector: \"[upfile-order-drag]\",\r\n})\r\nexport class UploadFileOrderDragDirective implements AfterViewInit, OnDestroy {\r\n  private container: any;\r\n  @Input('upfile-order-drag') enableDrag = false;\r\n  @Output() drop = new EventEmitter();\r\n  @Input() options: ContainerOptions = {\r\n    behaviour: \"move\",\r\n    dragHandleSelector: \".upfile-drag-handle\",\r\n    dropPlaceholder: {\r\n      className: \"drop-group-field\",\r\n    },\r\n    getGhostParent: () => {\r\n      return document.body;\r\n    },\r\n    getChildPayload: this.getChildPayload.bind(this),\r\n    shouldAcceptDrop: (sourceContainerOptions, payload) => {\r\n      return true;\r\n    },\r\n    onDropReady: (dropResult: DropResult) => {\r\n      this.ngzone.run(() => {\r\n        this.onDropReady(dropResult);\r\n      });\r\n    },\r\n    onDrop: (dropResult: DropResult) => {\r\n      this.ngzone.run(() => {\r\n        this.drop.emit(dropResult);\r\n      });\r\n    },\r\n    onDragEnter: () => {\r\n      this.ngzone.run(() => {\r\n        this.onDragEnter();\r\n      });\r\n    },\r\n    onDragStart: (info: DragStartEndInfo) => {\r\n      this.ngzone.run(() => {\r\n        this.onDragStart(info);\r\n      });\r\n    },\r\n    onDragEnd: (info: DragStartEndInfo) => {\r\n      this.ngzone.run(() => {\r\n        this.onDragEnd(info);\r\n      });\r\n    },\r\n  };\r\n\r\n  constructor(\r\n    private ngzone: NgZone,\r\n    private injector: Injector,\r\n    private render: Renderer2,\r\n    private el: ElementRef\r\n  ) {}\r\n  ngAfterViewInit() {\r\n    if (this.enableDrag) {\r\n        this.initDnD();\r\n    }\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.disposeDnd();\r\n  }\r\n\r\n  private disposeDnd() {\r\n    if (this.container) {\r\n      this.container.dispose();\r\n      this.container = null;\r\n    }\r\n  }\r\n\r\n  private initDnD() {\r\n    this.disposeDnd();\r\n    this.container = SmoothDndForVisible(this.el.nativeElement, this.options);\r\n  }\r\n\r\n  private getChildPayload(index) {\r\n    return index;\r\n  }\r\n\r\n  private onDropReady(dropResult) {\r\n    // console.log('DROP READY', dropResult);\r\n  }\r\n\r\n  private onDragStart(info) {\r\n    // console.log(\"DRAG START\", info);\r\n  }\r\n\r\n  private onDragEnd(info) {\r\n    // console.log('DRAG END', info);\r\n  }\r\n\r\n  private onDragEnter() {\r\n    // console.log('DRAG ENTER');\r\n  }\r\n}\r\n","import { Pipe, PipeTransform } from '@angular/core';\r\n\r\n/**\r\n * 使用说明\r\n * let message = \"今天天气 {0}，处处好 {1}。\"\r\n * template:\r\n * <h1>{{ message| replaceX: '晴朗', '风光' }}</h1>\r\n * resule:\r\n * <h1>今天天气 晴朗，处处好 风光。</h1>\r\n */\r\n@Pipe({name: 'replaceX'})\r\nexport class UploadReplaceXPipe implements PipeTransform {\r\n    transform(value: any, ...args: any[]) {\r\n        args.forEach((v, i) => {\r\n            value = value.replace(`{${i}}`, v);\r\n        });\r\n\r\n        return value;\r\n    }\r\n}","import { NgModule, ModuleWithProviders } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FFileDropDirective, FFileSelectDirective, FFilePreviewListTypeTemplateDirective, FFileUploadDirective, FFilePreviewToolbarTemplateDirective } from './directive/index';\r\nimport { FFileUploadComponent, FFileViewImageComponent, FFilePreviewComponent, PreviewCheckboxComponent } from './components/index';\r\nimport { UploadServerService } from './model/index';\r\nimport { FFileSizePipe, FFileDatePipe } from './pipe/index';\r\nimport { FFileUploadServerConfig, FFileUploadAPIServiceToken, FFileUploadDefaultService, FFileUploaderService } from './service/index';\r\nimport { NotifyModule } from '@farris/ui-notify';\r\nimport { ModalModule } from '@farris/ui-modal';\r\nimport { DateHelperModule } from '@farris/ui-common/date';\r\nimport { MessagerModule } from '@farris/ui-messager';\r\nimport { FAreaResponseModule } from '@farris/ui-area-response';\r\nimport { UploadAndPreviewComponent } from './components/upload-and-preview/upload-and-preview.component';\r\nimport { UploadProgressComponent } from './components/upload-progress/upload-progress.component';\r\nimport { MultiDownloadInfoComponent } from './components/multi-download-info/multi-download-info.component';\r\nimport { UploadFileOrderDragDirective } from './components/upload-and-preview/file-order-drag.directive';\r\nimport { LocaleModule } from '@farris/ui-locale';\r\nimport { UploadReplaceXPipe } from './components/upload-and-preview/replaceX.pipe';\r\n\r\n\r\n@NgModule({\r\n  declarations: [FFileDropDirective, FFileSelectDirective, FFileUploadComponent, \r\n    FFileViewImageComponent, FFilePreviewComponent, FFilePreviewListTypeTemplateDirective, FFileUploadDirective, \r\n    PreviewCheckboxComponent, FFilePreviewToolbarTemplateDirective, FFileSizePipe, UploadAndPreviewComponent, UploadProgressComponent, \r\n    FFileDatePipe,MultiDownloadInfoComponent, UploadFileOrderDragDirective,\r\n    UploadReplaceXPipe\r\n  ],\r\n  exports: [FFileDropDirective, FFileSelectDirective, FFileUploadComponent, FFileViewImageComponent, \r\n    FFilePreviewComponent, FFilePreviewListTypeTemplateDirective, FFileUploadDirective, FFilePreviewToolbarTemplateDirective, FFileSizePipe,\r\n    UploadAndPreviewComponent, UploadProgressComponent, FFileDatePipe, UploadFileOrderDragDirective],\r\n  imports: [\r\n    CommonModule,\r\n    NotifyModule, \r\n    MessagerModule,\r\n    FAreaResponseModule, \r\n    DateHelperModule.forRoot(), \r\n    ModalModule.forRoot(),\r\n    LocaleModule.forRoot()\r\n  ],\r\n  providers: [\r\n    FFileUploaderService,\r\n    {\r\n      provide: UploadServerService,\r\n      useClass: FFileUploadDefaultService\r\n    }\r\n  ],\r\n  entryComponents:[\r\n    MultiDownloadInfoComponent\r\n  ]\r\n})\r\nexport class FFileUploadModule {\r\n  static forRoot(config?: FFileUploadServerConfig, uploadSer?: any): ModuleWithProviders {\r\n    return {\r\n      ngModule: FFileUploadModule,\r\n      providers: [\r\n        { provide: FFileUploadAPIServiceToken, useValue: config },\r\n        FFileUploaderService,\r\n        {\r\n          provide: UploadServerService,\r\n          useClass: uploadSer || FFileUploadDefaultService\r\n        }\r\n      ]\r\n    };\r\n  }\r\n}\r\n"]}