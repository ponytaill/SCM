import { Subject } from 'rxjs';
import { FieldMetadataUtil } from './metadata/index';
;
import { ModifyType, ChangeSet } from '../changeset/index';
import { PARENT_PATH, PARENT_CLASS } from './types';
import { EntityList } from './entity_list';
import { EntityFactory } from './entity_factory';
/**
 * @author Lucas Huang
 * 实体抽象基类，所有实体必须扩展自Entity
 *
 * ### 使用示例
 * ```
 * export class UserEntity extends Entity {
 *    userId: string;
 *    userName: string;
 *
 *    constructor(data: any){
 *        super(data);
 *    }
 * }
 * ```
 */
export class Entity {
    // #endregion
    /**
     * @param data JSON数据
     */
    constructor(data) {
        // #region 私有、保护属性
        /**
         * 验证错误集合
         */
        this.validErrors = {};
        /**
         * 增量变更集合
         */
        this.changeSet = new ChangeSet();
        /**
         * 是否正在验证
         */
        this.isValidating = false;
        /**
         * 新数据
         */
        this.newData = undefined;
        // #endregion
        // #region 公有属性
        /**
         * 变更流
         */
        this.valueChanged = new Subject();
        /**
         * 属性值改变时触发
         *
         * ### 使用示例
         * ```
         *  const entity = new UserEntity(data);
         *  entity.onValueChanged.subscribe((data: Modification) => {
         *      console.log(data);
         *  })
         *
         * ```
         *
         * @event
         */
        this.onValueChanged = this.valueChanged.asObservable();
        this.newData = Object.assign({}, data);
        this.onValueChanged = this.valueChanged;
        this.initialize();
    }
    /**
     * 返回JSON格式的数据
     */
    get data() {
        return this.newData;
    }
    /**
     * 验证错误集合
     */
    get errors() {
        return this.validErrors;
    }
    /**
     * 实体变更集
     */
    get changes() {
        return this.changeSet.changes;
    }
    /**
     * 实体主键元数据
     */
    get primaryProperty() {
        return FieldMetadataUtil.getPrimaryFieldMetadata(this.constructor);
    }
    /**
     * 主键
     * @todo
     * 1、没有主键时返回''不合理，应该返回undefined
     */
    get primaryKey() {
        if (this.primaryProperty) {
            return this.primaryProperty.property;
        }
        else {
            return '';
        }
    }
    /**
     * 实体主键值
     * 1、没有主键时返回''不合理，应该返回undefined
     */
    get primaryValue() {
        if (this.primaryKey) {
            // return this[this.primaryProperty.property].toString();
            const primaryValue = this[this.primaryProperty.property];
            return primaryValue ? primaryValue : '';
        }
        else {
            return '';
        }
    }
    // #region 公有方法
    /**
     * 将变更记录保存至变更集中
     * @param value 变更记录
     */
    setChanges(value) {
        const propertyName = value.path[value.path.length - 1];
        // @todo：事件会从下级向上冒泡，change可能是下级的，不能和当前Entity的newData合并。
        // this.newData = Object.assign(this.newData, { [propertyName]: value.value });
        this.valueChanged.next(value);
        this.changeSet.append(value);
    }
    getPaths() {
        const pathObj = {
            path: [],
            isUdt: false,
            isGrid: false
        };
        const handleParent = item => {
            const parentPaths = item[PARENT_PATH];
            if (parentPaths) {
                const prop = parentPaths[parentPaths.length - 1];
                // 父级所在实体包含的ngObject，存在当前实体字段，则判断为UDt字段
                if (Object.keys(FieldMetadataUtil.getNgObjects(item[PARENT_CLASS].constructor)).indexOf(prop) > -1) {
                    pathObj.isUdt = true;
                }
                // 存在类型为ngList，则判断为grid
                if (item[PARENT_CLASS] && item instanceof EntityList === true) {
                    pathObj.isGrid = true;
                }
                pathObj.path.push(prop);
            }
            if (item[PARENT_CLASS] && item instanceof EntityList === true) {
                handleParent(item[PARENT_CLASS]);
            }
        };
        handleParent(this);
        pathObj.path = pathObj.path.reverse();
        return pathObj;
    }
    /**
     * 加载数据
     * @param data 新数据
     */
    load(data) {
        if (!data) {
            data = {};
        }
        this.loadFields(data);
        this.loadLists(data);
        this.loadObjects(data);
        this.loadDynamicObjects(data);
        this.newData = Object.assign({}, data);
    }
    /**
     * 转换为JSON
     */
    toJSON() {
        const result = {};
        // 简单属性
        const ngFields = FieldMetadataUtil.getNgFields(this.constructor);
        Object.keys(ngFields).forEach((propName) => {
            const ngField = ngFields[propName];
            const dataField = ngField.dataField || propName;
            result[dataField] = this[propName];
        });
        // 对象属性
        const ngObjects = FieldMetadataUtil.getNgObjects(this.constructor);
        Object.keys(ngObjects).forEach((propName) => {
            const ngObject = ngObjects[propName];
            const dataField = ngObject.dataField || propName;
            result[dataField] = this[propName] ? this[propName].toJSON() : {};
        });
        // 动态属性
        const ngDynamics = FieldMetadataUtil.getNgDynamic(this.constructor);
        Object.keys(ngDynamics).forEach((propName) => {
            const ngDynamic = ngDynamics[propName];
            const dataField = ngDynamic.dataField || propName;
            result[dataField] = this[propName] ? this[propName].toJSON() : {};
        });
        // 列表属性
        const ngLists = FieldMetadataUtil.getNgList(this.constructor);
        Object.keys(ngLists).forEach((propName) => {
            const ngList = ngLists[propName];
            const dataField = ngList.dataField || propName;
            result[dataField] = this[propName] ? this[propName].toJSON() : {};
        });
        return result;
    }
    // #endregion
    //#region 实体初始化相关private方法
    /**
     * 初始化实体
     */
    initialize() {
        const constructor = this.constructor;
        const ngFields = FieldMetadataUtil.getNgFields(constructor);
        const ngObjects = FieldMetadataUtil.getNgObjects(constructor);
        const ngLists = FieldMetadataUtil.getNgList(constructor);
        const ngDynamic = FieldMetadataUtil.getNgDynamic(constructor);
        this.initializeNormalField(ngFields);
        this.initializeList(ngLists);
        this.initializeObject(ngObjects);
        this.initializeDynamic(ngDynamic);
    }
    /**
     * 创建path
     * @param propertyName 属性名称
     */
    createPath(propertyName) {
        const primaryFieldMetadata = this.primaryProperty;
        if (primaryFieldMetadata) {
            const primaryDataField = primaryFieldMetadata.dataField;
            return [primaryDataField + ':' + this.primaryValue, propertyName];
        }
        else {
            return [':', propertyName];
        }
    }
    /**
     * 属性字段初始化
     * @param ngFields 属性字段元数据
     */
    initializeNormalField(ngFields) {
        Object.keys(ngFields).forEach(propName => {
            const ngField = ngFields[propName];
            const dataField = ngField.dataField || propName;
            if (delete this[propName]) {
                Object.defineProperty(this, propName, {
                    get: function () {
                        return this.getPropValue(propName, ngField);
                    },
                    set: function (newPropValue) {
                        // 有主键的实体，必须先给主键赋值，否则其他字段不允许赋值
                        if (this.primaryKey && this.primaryKey === propName && !newPropValue) {
                            return;
                        }
                        if (this.primaryKey && this.primaryKey !== propName && !this.primaryValue) {
                            return;
                        }
                        // 值相同时不触发变更。
                        const oldPropValue = this.getPropValue(propName, ngField);
                        if (this.isPropValueChanged(propName, ngField, newPropValue, oldPropValue) === false) {
                            return;
                        }
                        this.setPropValue(propName, ngField, newPropValue);
                        this.emitValueChange(propName, ngField, newPropValue, oldPropValue);
                    },
                    configurable: true
                });
            }
        });
    }
    /**
     * 初始化列表类型的元数据
     * @param ngListMetadata 列表类型元数据
     */
    initializeList(ngListMetadata) {
        Object.keys(ngListMetadata).forEach(propertyName => {
            const fieldMetadata = ngListMetadata[propertyName];
            const path = this.createPath(propertyName);
            const dataField = fieldMetadata.dataField || propertyName;
            const val = this.data[dataField];
            const entityList = new EntityList();
            entityList[PARENT_CLASS] = this;
            entityList[PARENT_PATH] = path;
            if (val) {
                const entities = val.map(v => EntityFactory(fieldMetadata.type, v));
                entityList.loadEntities(entities);
            }
            entityList.onListChanged.subscribe(value => {
                if (value) {
                    if (entityList[PARENT_PATH][0] !== value.path[0]) {
                        value.path = entityList[PARENT_PATH].concat(value.path);
                    }
                    this.setChanges(value);
                }
            });
            this[propertyName] = entityList;
        });
    }
    /**
     * 初始化子对象
     * @param ngObjectMetadata 子对象元数据
     */
    initializeObject(ngObjectMetadata) {
        Object.keys(ngObjectMetadata).forEach(propertyName => {
            const fieldMetadata = ngObjectMetadata[propertyName];
            const path = this.createPath(propertyName);
            const dataField = fieldMetadata.dataField || propertyName;
            // val不存在时，用空对象代替
            const val = this.data[dataField] || {};
            const createEntityFromJsonData = (value) => {
                let instance;
                if (value instanceof fieldMetadata.type) {
                    instance = value;
                }
                else {
                    instance = EntityFactory(fieldMetadata.type, value);
                }
                instance[PARENT_CLASS] = this;
                instance[PARENT_PATH] = path;
                instance.onValueChanged.subscribe(changes => {
                    if (changes) {
                        changes.path = (this[PARENT_PATH] || []).concat(changes.path);
                        this.setChanges(changes);
                    }
                });
                return instance;
            };
            // 如果没有值用一个空对象代替
            let childEntity = createEntityFromJsonData(val);
            if (delete this[propertyName]) {
                Object.defineProperty(this, propertyName, {
                    get: () => {
                        return childEntity;
                    },
                    set: function (value) {
                        const modifyInfo = {
                            path: childEntity[PARENT_PATH],
                            value: value.data,
                            preValue: this[propertyName].data,
                            type: ModifyType.ValueChange
                        };
                        childEntity = createEntityFromJsonData(value);
                        this.setChanges(modifyInfo);
                    },
                    configurable: true
                });
            }
        });
    }
    initializeDynamic(ngDynamicMetadata) {
        Object.keys(ngDynamicMetadata).forEach(propertyName => {
            const fieldMetadata = ngDynamicMetadata[propertyName];
            const path = this.createPath(propertyName);
            const dataField = fieldMetadata.dataField || propertyName;
            const originalData = this.data[dataField] || {};
            const createEntityFromJsonData = (value) => {
                let instance;
                if (value instanceof fieldMetadata.type) {
                    instance = value;
                }
                else {
                    instance = EntityFactory(fieldMetadata.type, value);
                }
                instance[PARENT_CLASS] = this;
                instance[PARENT_PATH] = path;
                instance.onValueChanged.subscribe(changes => {
                    if (changes) {
                        changes.path = (this[PARENT_PATH] || []).concat(changes.path);
                        this.setChanges(changes);
                    }
                });
                return instance;
            };
            let dynamicEntity = createEntityFromJsonData(originalData);
            if (delete this[propertyName]) {
                Object.defineProperty(this, propertyName, {
                    get: function () {
                        return dynamicEntity;
                    },
                    set: function (value) {
                        const modifyInfo = {
                            path: dynamicEntity[PARENT_PATH],
                            value: value.data,
                            preValue: this[propertyName].data,
                            type: ModifyType.ValueChange
                        };
                        dynamicEntity = createEntityFromJsonData(value);
                        this.setChanges(modifyInfo);
                    },
                    configurable: true
                });
            }
        });
    }
    //#endregion
    // #region 加载实体数据相关private、projected方法
    /**
     * 加载简单字段值
     * @todo 临时用修改的方式模拟
     */
    loadFields(data) {
        const ngFields = FieldMetadataUtil.getNgFields(this.constructor);
        Object.keys(ngFields).forEach((propName) => {
            const ngField = ngFields[propName];
            const dataField = ngField.dataField || propName;
            // if (ngField.primary === false) {
            //   this[propName] = data[dataField];
            // }
            this[propName] = data[dataField];
        });
    }
    /**
     * 加载子列表数据
     * @param data 数据
     */
    loadLists(data) {
        const ngLists = FieldMetadataUtil.getNgList(this.constructor);
        Object.keys(ngLists).forEach((propName) => {
            const ngList = ngLists[propName];
            const dataField = ngList.dataField || propName;
            const entityType = ngList.type;
            // 创建实体
            const listData = data[dataField];
            if (listData) {
                const entities = listData.map((entityData) => {
                    return EntityFactory(entityType, entityData);
                });
                this[propName].loadEntities(entities);
            }
            else {
                this[propName].loadEntities([]);
            }
        });
    }
    loadObjects(data) {
        const ngObjects = FieldMetadataUtil.getNgObjects(this.constructor);
        Object.keys(ngObjects).forEach((propName) => {
            const ngObject = ngObjects[propName];
            const dataField = ngObject.dataField || propName;
            const objectData = data[dataField];
            const entity = this[propName];
            if (!entity || !objectData) {
                return;
            }
            entity.load(objectData);
        });
    }
    loadDynamicObjects(data) {
        const ngDynamicObjects = FieldMetadataUtil.getNgDynamic(this.constructor);
        Object.keys(ngDynamicObjects).forEach((propName) => {
            const ngDynamicObject = ngDynamicObjects[propName];
            const dataField = ngDynamicObject.dataField || propName;
            const dynamicData = data[dataField] || {};
            const dynamicEntity = this[propName];
            if (!dynamicEntity) {
                return;
            }
            dynamicEntity.loadDynamicData(dynamicData);
        });
    }
    // #endregion
    // #region 私有工具方法
    /**
     * 发送值变更
     */
    emitValueChange(propName, propMetadata, newPropValue, oldPropValue) {
        const change = {
            path: this.createPath(propName),
            value: newPropValue,
            preValue: oldPropValue,
            type: ModifyType.ValueChange
        };
        if (this[PARENT_PATH]) {
            change.path = this[PARENT_PATH].concat(change.path);
        }
        this.setChanges(change);
    }
    /**
     * 获取属性值
     */
    getPropValue(propName, propMetadata) {
        const dataField = propMetadata.dataField || propName;
        const value = this.data[dataField];
        // 对多语录入字段，query不返回问题进行兼容
        if (propMetadata.enableMultiLangInput === true && !value) {
            const langCode = window.localStorage.getItem('languageCode') || 'zh-CHS';
            const originDataField = dataField.replace('_MULTILANGUAGE', '');
            return {
                [langCode]: this.data[originDataField]
            };
        }
        return value;
    }
    /**
     * 设置属性值
     */
    setPropValue(propName, propMetadata, propValue) {
        const dataField = propMetadata.dataField || propName;
        this.data[dataField] = propValue;
    }
    /**
     * 检查属性值是否发生变化
     */
    isPropValueChanged(propName, propMetadata, newPropValue, oldPropValue) {
        if (propMetadata.enableMultiLangInput === true) {
            if (this.isEmptyMultiLangPropValue(newPropValue) === true && this.isEmptyMultiLangPropValue(oldPropValue) === true) {
                return false;
            }
            return JSON.stringify(newPropValue) !== JSON.stringify(oldPropValue);
        }
        else {
            return newPropValue !== oldPropValue;
        }
    }
    /**
     * 多语录入字段的值是否为空
     */
    isEmptyMultiLangPropValue(value) {
        return !value || Object.keys(value).length === 0;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZW50aXR5LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGZhcnJpcy9tb2JpbGUtZGV2a2l0LyIsInNvdXJjZXMiOlsibGliL2VudGl0eS9lbnRpdHkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFjLE9BQU8sRUFBWSxNQUFNLE1BQU0sQ0FBQztBQUVyRCxPQUFPLEVBQW9GLGlCQUFpQixFQUFFLE1BQU0sa0JBQWtCLENBQUM7QUFBQSxDQUFDO0FBQ3hJLE9BQU8sRUFBZ0IsVUFBVSxFQUFFLFNBQVMsRUFBRSxNQUFNLG9CQUFvQixDQUFDO0FBQ3pFLE9BQU8sRUFBRSxXQUFXLEVBQUUsWUFBWSxFQUFXLE1BQU0sU0FBUyxDQUFDO0FBQzdELE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLGtCQUFrQixDQUFDO0FBRWpEOzs7Ozs7Ozs7Ozs7Ozs7R0FlRztBQUNILE1BQU0sT0FBZ0IsTUFBTTtJQTBHMUIsYUFBYTtJQUdiOztPQUVHO0lBQ0gsWUFBWSxJQUFTO1FBN0dyQixrQkFBa0I7UUFFbEI7O1dBRUc7UUFDSyxnQkFBVyxHQUFHLEVBQUUsQ0FBQztRQUV6Qjs7V0FFRztRQUNPLGNBQVMsR0FBRyxJQUFJLFNBQVMsRUFBRSxDQUFDO1FBRXRDOztXQUVHO1FBQ08saUJBQVksR0FBRyxLQUFLLENBQUM7UUFFL0I7O1dBRUc7UUFDTyxZQUFPLEdBQUcsU0FBUyxDQUFDO1FBRTlCLGFBQWE7UUFHYixlQUFlO1FBRWY7O1dBRUc7UUFDSSxpQkFBWSxHQUFHLElBQUksT0FBTyxFQUFnQixDQUFDO1FBRWxEOzs7Ozs7Ozs7Ozs7O1dBYUc7UUFDSSxtQkFBYyxHQUFHLElBQUksQ0FBQyxZQUFZLENBQUMsWUFBWSxFQUFFLENBQUM7UUFnRXZELElBQUksQ0FBQyxPQUFPLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxFQUFFLEVBQUUsSUFBSSxDQUFDLENBQUM7UUFDdkMsSUFB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LFlBQVksQ0FBQyxRQUFnQixFQUFFLFlBQW1DLEVBQUUsU0FBYztRQUN4RixNQUFNLFNBQVMsR0FBRyxZQUFZLENBQUMsU0FBUyxJQUFJLFFBQVEsQ0FBQztRQUNyRCxJQUFJLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxHQUFHLFNBQVMsQ0FBQztJQUNuQyxDQUFDO0lBRUQ7O09BRUc7SUFDSyxrQkFBa0IsQ0FBQyxRQUFnQixFQUFFLFlBQW1DLEVBQUUsWUFBaUIsRUFBRSxZQUFpQjtRQUNwSCxJQUFJLFlBQVksQ0FBQyxvQkFBb0IsS0FBSyxJQUFJLEVBQUU7WUFDOUMsSUFBSSxJQUFJLENBQUMseUJBQXlCLENBQUMsWUFBWSxDQUFDLEtBQUssSUFBSSxJQUFJLElBQUksQ0FBQyx5QkFBeUIsQ0FBQyxZQUFZLENBQUMsS0FBSyxJQUFJLEVBQUU7Z0JBQ2xILE9BQU8sS0FBSyxDQUFDO2FBQ2Q7WUFDRCxPQUFPLElBQUksQ0FBQyxTQUFTLENBQUMsWUFBWSxDQUFDLEtBQUssSUFBSSxDQUFDLFNBQVMsQ0FBQyxZQUFZLENBQUMsQ0FBQztTQUN0RTthQUFNO1lBQ0wsT0FBTyxZQUFZLEtBQUssWUFBWSxDQUFDO1NBQ3RDO0lBQ0gsQ0FBQztJQUVEOztPQUVHO0lBQ0sseUJBQXlCLENBQUMsS0FBVTtRQUMxQyxPQUFPLENBQUMsS0FBSyxJQUFJLE1BQU0sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsTUFBTSxLQUFLLENBQUMsQ0FBQztJQUNuRCxDQUFDO0NBR0YiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBPYnNlcnZhYmxlLCBTdWJqZWN0LCBmcm9tLCBvZiB9IGZyb20gJ3J4anMnO1xyXG5pbXBvcnQgeyBzY2FuLCBtYXAsIHRhcCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcclxuaW1wb3J0IHsgUHJpbWl0aXZlUHJvcE1ldGFkYXRhLCBMaXN0UHJvcE1ldGFkYXRhLCBPYmplY3RQcm9wTWV0YWRhdGEsIER5bmFtaWNQcm9wTWV0YWRhdGEsIEZpZWxkTWV0YWRhdGFVdGlsIH0gZnJvbSAnLi9tZXRhZGF0YS9pbmRleCc7O1xyXG5pbXBvcnQgeyBNb2RpZmljYXRpb24sIE1vZGlmeVR5cGUsIENoYW5nZVNldCB9IGZyb20gJy4uL2NoYW5nZXNldC9pbmRleCc7XHJcbmltcG9ydCB7IFBBUkVOVF9QQVRILCBQQVJFTlRfQ0xBU1MsIER5bmFtaWMgfSBmcm9tICcuL3R5cGVzJztcclxuaW1wb3J0IHsgRW50aXR5TGlzdCB9IGZyb20gJy4vZW50aXR5X2xpc3QnO1xyXG5pbXBvcnQgeyBFbnRpdHlGYWN0b3J5IH0gZnJvbSAnLi9lbnRpdHlfZmFjdG9yeSc7XHJcblxyXG4vKipcclxuICogQGF1dGhvciBMdWNhcyBIdWFuZ1xyXG4gKiDlrp7kvZPmir3osaHln7rnsbvvvIzmiYDmnInlrp7kvZPlv4XpobvmianlsZXoh6pFbnRpdHlcclxuICpcclxuICogIyMjIOS9v+eUqOekuuS+i1xyXG4gKiBgYGBcclxuICogZXhwb3J0IGNsYXNzIFVzZXJFbnRpdHkgZXh0ZW5kcyBFbnRpdHkge1xyXG4gKiAgICB1c2VySWQ6IHN0cmluZztcclxuICogICAgdXNlck5hbWU6IHN0cmluZztcclxuICpcclxuICogICAgY29uc3RydWN0b3IoZGF0YTogYW55KXtcclxuICogICAgICAgIHN1cGVyKGRhdGEpO1xyXG4gKiAgICB9XHJcbiAqIH1cclxuICogYGBgXHJcbiAqL1xyXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgRW50aXR5IHtcclxuXHJcblxyXG4gIC8vICNyZWdpb24g56eB5pyJ44CB5L+d5oqk5bGe5oCnXHJcblxyXG4gIC8qKlxyXG4gICAqIOmqjOivgemUmeivr+mbhuWQiFxyXG4gICAqL1xyXG4gIHByaXZhdGUgdmFsaWRFcnJvcnMgPSB7fTtcclxuXHJcbiAgLyoqXHJcbiAgICog5aKe6YeP5Y+Y5pu06ZuG5ZCIXHJcbiAgICovXHJcbiAgcHJvdGVjdGVkIGNoYW5nZVNldCA9IG5ldyBDaGFuZ2VTZXQoKTtcclxuXHJcbiAgLyoqXHJcbiAgICog5piv5ZCm5q2j5Zyo6aqM6K+BXHJcbiAgICovXHJcbiAgcHJvdGVjdGVkIGlzVmFsaWRhdGluZyA9IGZhbHNlO1xyXG5cclxuICAvKipcclxuICAgKiDmlrDmlbDmja5cclxuICAgKi9cclxuICBwcm90ZWN0ZWQgbmV3RGF0YSA9IHVuZGVmaW5lZDtcclxuXHJcbiAgLy8gI2VuZHJlZ2lvblxyXG5cclxuXHJcbiAgLy8gI3JlZ2lvbiDlhazmnInlsZ7mgKdcclxuXHJcbiAgLyoqXHJcbiAgICog5Y+Y5pu05rWBXHJcbiAgICovXHJcbiAgcHVibGljIHZhbHVlQ2hhbmdlZCA9IG5ldyBTdWJqZWN0PE1vZGlmaWNhdGlvbj4oKTtcclxuXHJcbiAgLyoqXHJcbiAgICog5bGe5oCn5YC85pS55Y+Y5pe26Kem5Y+RXHJcbiAgICpcclxuICAgKiAjIyMg5L2/55So56S65L6LXHJcbiAgICogYGBgXHJcbiAgICogIGNvbnN0IGVudGl0eSA9IG5ldyBVc2VyRW50aXR5KGRhdGEpO1xyXG4gICAqICBlbnRpdHkub25WYWx1ZUNoYW5nZWQuc3Vic2NyaWJlKChkYXRhOiBNb2RpZmljYXRpb24pID0+IHtcclxuICAgKiAgICAgIGNvbnNvbGUubG9nKGRhdGEpO1xyXG4gICAqICB9KVxyXG4gICAqXHJcbiAgICogYGBgXHJcbiAgICpcclxuICAgKiBAZXZlbnRcclxuICAgKi9cclxuICBwdWJsaWMgb25WYWx1ZUNoYW5nZWQgPSB0aGlzLnZhbHVlQ2hhbmdlZC5hc09ic2VydmFibGUoKTtcclxuXHJcbiAgLyoqXHJcbiAgICog6L+U5ZueSlNPTuagvOW8j+eahOaVsOaNrlxyXG4gICAqL1xyXG4gIHB1YmxpYyBnZXQgZGF0YSgpOiBhbnkge1xyXG4gICAgcmV0dXJuIHRoaXMubmV3RGF0YTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOmqjOivgemUmeivr+mbhuWQiFxyXG4gICAqL1xyXG4gIHB1YmxpYyBnZXQgZXJyb3JzKCkge1xyXG4gICAgcmV0dXJuIHRoaXMudmFsaWRFcnJvcnM7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDlrp7kvZPlj5jmm7Tpm4ZcclxuICAgKi9cclxuICBwdWJsaWMgZ2V0IGNoYW5nZXMoKTogTW9kaWZpY2F0aW9uW10ge1xyXG4gICAgcmV0dXJuIHRoaXMuY2hhbmdlU2V0LmNoYW5nZXM7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDlrp7kvZPkuLvplK7lhYPmlbDmja5cclxuICAgKi9cclxuICBwdWJsaWMgZ2V0IHByaW1hcnlQcm9wZXJ0eSgpOiBQcmltaXRpdmVQcm9wTWV0YWRhdGEge1xyXG4gICAgcmV0dXJuIEZpZWxkTWV0YWRhdGFVdGlsLmdldFByaW1hcnlGaWVsZE1ldGFkYXRhKHRoaXMuY29uc3RydWN0b3IpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog5Li76ZSuXHJcbiAgICogQHRvZG9cclxuICAgKiAx44CB5rKh5pyJ5Li76ZSu5pe26L+U5ZueJyfkuI3lkIjnkIbvvIzlupTor6Xov5Tlm551bmRlZmluZWRcclxuICAgKi9cclxuICBwdWJsaWMgZ2V0IHByaW1hcnlLZXkoKTogc3RyaW5nIHtcclxuICAgIGlmICh0aGlzLnByaW1hcnlQcm9wZXJ0eSkge1xyXG4gICAgICByZXR1cm4gdGhpcy5wcmltYXJ5UHJvcGVydHkucHJvcGVydHk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICByZXR1cm4gJyc7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDlrp7kvZPkuLvplK7lgLxcclxuICAgKiAx44CB5rKh5pyJ5Li76ZSu5pe26L+U5ZueJyfkuI3lkIjnkIbvvIzlupTor6Xov5Tlm551bmRlZmluZWRcclxuICAgKi9cclxuICBwdWJsaWMgZ2V0IHByaW1hcnlWYWx1ZSgpOiBzdHJpbmcge1xyXG4gICAgaWYgKHRoaXMucHJpbWFyeUtleSkge1xyXG4gICAgICAvLyByZXR1cm4gdGhpc1t0aGlzLnByaW1hcnlQcm9wZXJ0eS5wcm9wZXJ0eV0udG9TdHJpbmcoKTtcclxuICAgICAgY29uc3QgcHJpbWFyeVZhbHVlID0gdGhpc1t0aGlzLnByaW1hcnlQcm9wZXJ0eS5wcm9wZXJ0eV07XHJcbiAgICAgIHJldHVybiBwcmltYXJ5VmFsdWUgPyBwcmltYXJ5VmFsdWUgOiAnJztcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHJldHVybiAnJztcclxuICAgIH1cclxuICB9XHJcblxyXG4gIC8vICNlbmRyZWdpb25cclxuXHJcblxyXG4gIC8qKlxyXG4gICAqIEBwYXJhbSBkYXRhIEpTT07mlbDmja5cclxuICAgKi9cclxuICBjb25zdHJ1Y3RvcihkYXRhOiBhbnkpIHtcclxuICAgIHRoaXMubmV3RGF0YSA9IE9iamVjdC5hc3NpZ24oe30sIGRhdGEpO1xyXG4gICAgdGhpcy5vblZhbHVlQ2hhbmdlZCA9IHRoaXMudmFsdWVDaGFuZ2VkO1xyXG4gICAgdGhpcy5pbml0aWFsaXplKCk7XHJcbiAgfVxyXG5cclxuXHJcbiAgLy8gI3JlZ2lvbiDlhazmnInmlrnms5VcclxuXHJcbiAgLyoqXHJcbiAgICog5bCG5Y+Y5pu06K6w5b2V5L+d5a2Y6Iez5Y+Y5pu06ZuG5LitXHJcbiAgICogQHBhcmFtIHZhbHVlIOWPmOabtOiusOW9lVxyXG4gICAqL1xyXG4gIHB1YmxpYyBzZXRDaGFuZ2VzKHZhbHVlOiBNb2RpZmljYXRpb24pOiB2b2lkIHtcclxuICAgIGNvbnN0IHByb3BlcnR5TmFtZSA9IHZhbHVlLnBhdGhbdmFsdWUucGF0aC5sZW5ndGggLSAxXTtcclxuXHJcbiAgICAvLyBAdG9kb++8muS6i+S7tuS8muS7juS4i+e6p+WQkeS4iuWGkuazoe+8jGNoYW5nZeWPr+iDveaYr+S4i+e6p+eahO+8jOS4jeiDveWSjOW9k+WJjUVudGl0eeeahG5ld0RhdGHlkIjlubbjgIJcclxuICAgIC8vIHRoaXMubmV3RGF0YSA9IE9iamVjdC5hc3NpZ24odGhpcy5uZXdEYXRhLCB7IFtwcm9wZXJ0eU5hbWVdOiB2YWx1ZS52YWx1ZSB9KTtcclxuXHJcbiAgICB0aGlzLnZhbHVlQ2hhbmdlZC5uZXh0KHZhbHVlKTtcclxuICAgIHRoaXMuY2hhbmdlU2V0LmFwcGVuZCh2YWx1ZSk7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgZ2V0UGF0aHMoKSB7XHJcbiAgICBjb25zdCBwYXRoT2JqID0ge1xyXG4gICAgICBwYXRoOiBbXSxcclxuICAgICAgaXNVZHQ6IGZhbHNlLFxyXG4gICAgICBpc0dyaWQ6IGZhbHNlXHJcbiAgICB9O1xyXG4gICAgY29uc3QgaGFuZGxlUGFyZW50ID0gaXRlbSA9PiB7XHJcbiAgICAgIGNvbnN0IHBhcmVudFBhdGhzID0gaXRlbVtQQVJFTlRfUEFUSF07XHJcbiAgICAgIGlmIChwYXJlbnRQYXRocykge1xyXG4gICAgICAgIGNvbnN0IHByb3AgPSBwYXJlbnRQYXRoc1twYXJlbnRQYXRocy5sZW5ndGggLSAxXTtcclxuICAgICAgICAvLyDniLbnuqfmiYDlnKjlrp7kvZPljIXlkKvnmoRuZ09iamVjdO+8jOWtmOWcqOW9k+WJjeWunuS9k+Wtl+aute+8jOWImeWIpOaWreS4ulVEdOWtl+autVxyXG4gICAgICAgIGlmIChPYmplY3Qua2V5cyhGaWVsZE1ldGFkYXRhVXRpbC5nZXROZ09iamVjdHMoaXRlbVtQQVJFTlRfQ0xBU1NdLmNvbnN0cnVjdG9yKSkuaW5kZXhPZihwcm9wKSA+IC0xKSB7XHJcbiAgICAgICAgICBwYXRoT2JqLmlzVWR0ID0gdHJ1ZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8g5a2Y5Zyo57G75Z6L5Li6bmdMaXN077yM5YiZ5Yik5pat5Li6Z3JpZFxyXG4gICAgICAgIGlmIChpdGVtW1BBUkVOVF9DTEFTU10gJiYgaXRlbSBpbnN0YW5jZW9mIEVudGl0eUxpc3QgPT09IHRydWUpIHtcclxuICAgICAgICAgIHBhdGhPYmouaXNHcmlkID0gdHJ1ZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcGF0aE9iai5wYXRoLnB1c2gocHJvcCk7XHJcbiAgICAgIH1cclxuICAgICAgaWYgKGl0ZW1bUEFSRU5UX0NMQVNTXSAmJiBpdGVtIGluc3RhbmNlb2YgRW50aXR5TGlzdCA9PT0gdHJ1ZSkge1xyXG4gICAgICAgIGhhbmRsZVBhcmVudChpdGVtW1BBUkVOVF9DTEFTU10pO1xyXG4gICAgICB9XHJcbiAgICB9O1xyXG4gICAgaGFuZGxlUGFyZW50KHRoaXMpO1xyXG4gICAgcGF0aE9iai5wYXRoID0gcGF0aE9iai5wYXRoLnJldmVyc2UoKTtcclxuICAgIHJldHVybiBwYXRoT2JqO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog5Yqg6L295pWw5o2uXHJcbiAgICogQHBhcmFtIGRhdGEg5paw5pWw5o2uXHJcbiAgICovXHJcbiAgcHVibGljIGxvYWQoZGF0YTogYW55KSB7XHJcbiAgICBpZiAoIWRhdGEpIHtcclxuICAgICAgZGF0YSA9IHt9O1xyXG4gICAgfVxyXG5cclxuICAgIHRoaXMubG9hZEZpZWxkcyhkYXRhKTtcclxuICAgIHRoaXMubG9hZExpc3RzKGRhdGEpO1xyXG4gICAgdGhpcy5sb2FkT2JqZWN0cyhkYXRhKTtcclxuXHJcbiAgICB0aGlzLmxvYWREeW5hbWljT2JqZWN0cyhkYXRhKTtcclxuICAgIHRoaXMubmV3RGF0YSA9IE9iamVjdC5hc3NpZ24oe30sIGRhdGEpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog6L2s5o2i5Li6SlNPTlxyXG4gICAqL1xyXG4gIHB1YmxpYyB0b0pTT04oKSB7XHJcbiAgICBjb25zdCByZXN1bHQgPSB7fTtcclxuXHJcbiAgICAvLyDnroDljZXlsZ7mgKdcclxuICAgIGNvbnN0IG5nRmllbGRzID0gRmllbGRNZXRhZGF0YVV0aWwuZ2V0TmdGaWVsZHModGhpcy5jb25zdHJ1Y3Rvcik7XHJcbiAgICBPYmplY3Qua2V5cyhuZ0ZpZWxkcykuZm9yRWFjaCgocHJvcE5hbWU6IHN0cmluZykgPT4ge1xyXG4gICAgICBjb25zdCBuZ0ZpZWxkID0gbmdGaWVsZHNbcHJvcE5hbWVdO1xyXG4gICAgICBjb25zdCBkYXRhRmllbGQgPSBuZ0ZpZWxkLmRhdGFGaWVsZCB8fCBwcm9wTmFtZTtcclxuICAgICAgcmVzdWx0W2RhdGFGaWVsZF0gPSB0aGlzW3Byb3BOYW1lXTtcclxuICAgIH0pO1xyXG5cclxuICAgIC8vIOWvueixoeWxnuaAp1xyXG4gICAgY29uc3QgbmdPYmplY3RzID0gRmllbGRNZXRhZGF0YVV0aWwuZ2V0TmdPYmplY3RzKHRoaXMuY29uc3RydWN0b3IpO1xyXG4gICAgT2JqZWN0LmtleXMobmdPYmplY3RzKS5mb3JFYWNoKChwcm9wTmFtZTogc3RyaW5nKSA9PiB7XHJcbiAgICAgIGNvbnN0IG5nT2JqZWN0ID0gbmdPYmplY3RzW3Byb3BOYW1lXTtcclxuICAgICAgY29uc3QgZGF0YUZpZWxkID0gbmdPYmplY3QuZGF0YUZpZWxkIHx8IHByb3BOYW1lO1xyXG4gICAgICByZXN1bHRbZGF0YUZpZWxkXSA9IHRoaXNbcHJvcE5hbWVdID8gdGhpc1twcm9wTmFtZV0udG9KU09OKCkgOiB7fTtcclxuICAgIH0pO1xyXG5cclxuICAgIC8vIOWKqOaAgeWxnuaAp1xyXG4gICAgY29uc3QgbmdEeW5hbWljcyA9IEZpZWxkTWV0YWRhdGFVdGlsLmdldE5nRHluYW1pYyh0aGlzLmNvbnN0cnVjdG9yKTtcclxuICAgIE9iamVjdC5rZXlzKG5nRHluYW1pY3MpLmZvckVhY2goKHByb3BOYW1lOiBzdHJpbmcpID0+IHtcclxuICAgICAgY29uc3QgbmdEeW5hbWljID0gbmdEeW5hbWljc1twcm9wTmFtZV07XHJcbiAgICAgIGNvbnN0IGRhdGFGaWVsZCA9IG5nRHluYW1pYy5kYXRhRmllbGQgfHwgcHJvcE5hbWU7XHJcbiAgICAgIHJlc3VsdFtkYXRhRmllbGRdID0gdGhpc1twcm9wTmFtZV0gPyB0aGlzW3Byb3BOYW1lXS50b0pTT04oKSA6IHt9O1xyXG4gICAgfSk7XHJcblxyXG4gICAgLy8g5YiX6KGo5bGe5oCnXHJcbiAgICBjb25zdCBuZ0xpc3RzID0gRmllbGRNZXRhZGF0YVV0aWwuZ2V0TmdMaXN0KHRoaXMuY29uc3RydWN0b3IpO1xyXG4gICAgT2JqZWN0LmtleXMobmdMaXN0cykuZm9yRWFjaCgocHJvcE5hbWU6IHN0cmluZykgPT4ge1xyXG4gICAgICBjb25zdCBuZ0xpc3QgPSBuZ0xpc3RzW3Byb3BOYW1lXTtcclxuICAgICAgY29uc3QgZGF0YUZpZWxkID0gbmdMaXN0LmRhdGFGaWVsZCB8fCBwcm9wTmFtZTtcclxuICAgICAgcmVzdWx0W2RhdGFGaWVsZF0gPSB0aGlzW3Byb3BOYW1lXSA/IHRoaXNbcHJvcE5hbWVdLnRvSlNPTigpIDoge307XHJcbiAgICB9KTtcclxuXHJcbiAgICByZXR1cm4gcmVzdWx0O1xyXG4gIH1cclxuXHJcbiAgLy8gI2VuZHJlZ2lvblxyXG5cclxuXHJcbiAgLy8jcmVnaW9uIOWunuS9k+WIneWni+WMluebuOWFs3ByaXZhdGXmlrnms5VcclxuXHJcbiAgLyoqXHJcbiAgICog5Yid5aeL5YyW5a6e5L2TXHJcbiAgICovXHJcbiAgcHJpdmF0ZSBpbml0aWFsaXplKCkge1xyXG4gICAgY29uc3QgY29uc3RydWN0b3IgPSB0aGlzLmNvbnN0cnVjdG9yO1xyXG5cclxuICAgIGNvbnN0IG5nRmllbGRzID0gRmllbGRNZXRhZGF0YVV0aWwuZ2V0TmdGaWVsZHMoY29uc3RydWN0b3IpO1xyXG4gICAgY29uc3QgbmdPYmplY3RzID0gRmllbGRNZXRhZGF0YVV0aWwuZ2V0TmdPYmplY3RzKGNvbnN0cnVjdG9yKTtcclxuICAgIGNvbnN0IG5nTGlzdHMgPSBGaWVsZE1ldGFkYXRhVXRpbC5nZXROZ0xpc3QoY29uc3RydWN0b3IpO1xyXG4gICAgY29uc3QgbmdEeW5hbWljID0gRmllbGRNZXRhZGF0YVV0aWwuZ2V0TmdEeW5hbWljKGNvbnN0cnVjdG9yKTtcclxuXHJcbiAgICB0aGlzLmluaXRpYWxpemVOb3JtYWxGaWVsZChuZ0ZpZWxkcyk7XHJcbiAgICB0aGlzLmluaXRpYWxpemVMaXN0KG5nTGlzdHMpO1xyXG4gICAgdGhpcy5pbml0aWFsaXplT2JqZWN0KG5nT2JqZWN0cyk7XHJcbiAgICB0aGlzLmluaXRpYWxpemVEeW5hbWljKG5nRHluYW1pYyk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDliJvlu7pwYXRoXHJcbiAgICogQHBhcmFtIHByb3BlcnR5TmFtZSDlsZ7mgKflkI3np7BcclxuICAgKi9cclxuICBwcm90ZWN0ZWQgY3JlYXRlUGF0aChwcm9wZXJ0eU5hbWU6IHN0cmluZyk6IHN0cmluZ1tdIHtcclxuICAgIGNvbnN0IHByaW1hcnlGaWVsZE1ldGFkYXRhID0gdGhpcy5wcmltYXJ5UHJvcGVydHk7XHJcbiAgICBpZiAocHJpbWFyeUZpZWxkTWV0YWRhdGEpIHtcclxuICAgICAgY29uc3QgcHJpbWFyeURhdGFGaWVsZCA9IHByaW1hcnlGaWVsZE1ldGFkYXRhLmRhdGFGaWVsZDtcclxuICAgICAgcmV0dXJuIFtwcmltYXJ5RGF0YUZpZWxkICsgJzonICsgdGhpcy5wcmltYXJ5VmFsdWUsIHByb3BlcnR5TmFtZV07XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICByZXR1cm4gWyc6JywgcHJvcGVydHlOYW1lXTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOWxnuaAp+Wtl+auteWIneWni+WMllxyXG4gICAqIEBwYXJhbSBuZ0ZpZWxkcyDlsZ7mgKflrZfmrrXlhYPmlbDmja5cclxuICAgKi9cclxuICBwcml2YXRlIGluaXRpYWxpemVOb3JtYWxGaWVsZChuZ0ZpZWxkczogeyBba2V5OiBzdHJpbmddOiBQcmltaXRpdmVQcm9wTWV0YWRhdGEgfSk6IHZvaWQge1xyXG4gICAgT2JqZWN0LmtleXMobmdGaWVsZHMpLmZvckVhY2gocHJvcE5hbWUgPT4ge1xyXG4gICAgICBjb25zdCBuZ0ZpZWxkID0gbmdGaWVsZHNbcHJvcE5hbWVdIGFzIFByaW1pdGl2ZVByb3BNZXRhZGF0YTtcclxuICAgICAgY29uc3QgZGF0YUZpZWxkID0gbmdGaWVsZC5kYXRhRmllbGQgfHwgcHJvcE5hbWU7XHJcblxyXG4gICAgICBpZiAoZGVsZXRlIHRoaXNbcHJvcE5hbWVdKSB7XHJcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIHByb3BOYW1lLCB7XHJcbiAgICAgICAgICBnZXQ6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5nZXRQcm9wVmFsdWUocHJvcE5hbWUsIG5nRmllbGQpO1xyXG4gICAgICAgICAgfSxcclxuICAgICAgICAgIHNldDogZnVuY3Rpb24obmV3UHJvcFZhbHVlKSB7XHJcblxyXG4gICAgICAgICAgICAvLyDmnInkuLvplK7nmoTlrp7kvZPvvIzlv4XpobvlhYjnu5nkuLvplK7otYvlgLzvvIzlkKbliJnlhbbku5blrZfmrrXkuI3lhYHorrjotYvlgLxcclxuICAgICAgICAgICAgaWYgKHRoaXMucHJpbWFyeUtleSAmJiB0aGlzLnByaW1hcnlLZXkgPT09IHByb3BOYW1lICYmICFuZXdQcm9wVmFsdWUpIHtcclxuICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmICh0aGlzLnByaW1hcnlLZXkgJiYgdGhpcy5wcmltYXJ5S2V5ICE9PSBwcm9wTmFtZSAmJiAhdGhpcy5wcmltYXJ5VmFsdWUgKSB7XHJcbiAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAvLyDlgLznm7jlkIzml7bkuI3op6blj5Hlj5jmm7TjgIJcclxuICAgICAgICAgICAgY29uc3Qgb2xkUHJvcFZhbHVlID0gdGhpcy5nZXRQcm9wVmFsdWUocHJvcE5hbWUsIG5nRmllbGQpO1xyXG4gICAgICAgICAgICBpZiAodGhpcy5pc1Byb3BWYWx1ZUNoYW5nZWQocHJvcE5hbWUsIG5nRmllbGQsIG5ld1Byb3BWYWx1ZSwgb2xkUHJvcFZhbHVlKSA9PT0gZmFsc2UpIHtcclxuICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdGhpcy5zZXRQcm9wVmFsdWUocHJvcE5hbWUsIG5nRmllbGQsIG5ld1Byb3BWYWx1ZSk7XHJcbiAgICAgICAgICAgIHRoaXMuZW1pdFZhbHVlQ2hhbmdlKHByb3BOYW1lLCBuZ0ZpZWxkLCBuZXdQcm9wVmFsdWUsIG9sZFByb3BWYWx1ZSk7XHJcbiAgICAgICAgICB9LFxyXG4gICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXHJcbiAgICAgICAgfSk7XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog5Yid5aeL5YyW5YiX6KGo57G75Z6L55qE5YWD5pWw5o2uXHJcbiAgICogQHBhcmFtIG5nTGlzdE1ldGFkYXRhIOWIl+ihqOexu+Wei+WFg+aVsOaNrlxyXG4gICAqL1xyXG4gIHByaXZhdGUgaW5pdGlhbGl6ZUxpc3QobmdMaXN0TWV0YWRhdGE6IHsgW2tleTogc3RyaW5nXTogTGlzdFByb3BNZXRhZGF0YSB9KTogdm9pZCB7XHJcbiAgICBPYmplY3Qua2V5cyhuZ0xpc3RNZXRhZGF0YSkuZm9yRWFjaChwcm9wZXJ0eU5hbWUgPT4ge1xyXG4gICAgICBjb25zdCBmaWVsZE1ldGFkYXRhID0gbmdMaXN0TWV0YWRhdGFbcHJvcGVydHlOYW1lXSBhcyBMaXN0UHJvcE1ldGFkYXRhO1xyXG4gICAgICBjb25zdCBwYXRoID0gdGhpcy5jcmVhdGVQYXRoKHByb3BlcnR5TmFtZSk7XHJcbiAgICAgIGNvbnN0IGRhdGFGaWVsZCA9IGZpZWxkTWV0YWRhdGEuZGF0YUZpZWxkIHx8IHByb3BlcnR5TmFtZTtcclxuICAgICAgY29uc3QgdmFsID0gdGhpcy5kYXRhW2RhdGFGaWVsZF07XHJcblxyXG4gICAgICBjb25zdCBlbnRpdHlMaXN0ID0gbmV3IEVudGl0eUxpc3Q8dHlwZW9mIGZpZWxkTWV0YWRhdGEudHlwZT4oKTtcclxuICAgICAgZW50aXR5TGlzdFtQQVJFTlRfQ0xBU1NdID0gdGhpcztcclxuICAgICAgZW50aXR5TGlzdFtQQVJFTlRfUEFUSF0gPSBwYXRoO1xyXG5cclxuICAgICAgaWYgKHZhbCkge1xyXG4gICAgICAgIGNvbnN0IGVudGl0aWVzID0gdmFsLm1hcCh2ID0+IEVudGl0eUZhY3Rvcnk8dHlwZW9mIGZpZWxkTWV0YWRhdGEudHlwZT4oZmllbGRNZXRhZGF0YS50eXBlLCB2KSk7XHJcbiAgICAgICAgZW50aXR5TGlzdC5sb2FkRW50aXRpZXMoZW50aXRpZXMpO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBlbnRpdHlMaXN0Lm9uTGlzdENoYW5nZWQuc3Vic2NyaWJlKHZhbHVlID0+IHtcclxuICAgICAgICBpZiAodmFsdWUpIHtcclxuICAgICAgICAgIGlmIChlbnRpdHlMaXN0W1BBUkVOVF9QQVRIXVswXSAhPT0gdmFsdWUucGF0aFswXSkge1xyXG4gICAgICAgICAgICB2YWx1ZS5wYXRoID0gZW50aXR5TGlzdFtQQVJFTlRfUEFUSF0uY29uY2F0KHZhbHVlLnBhdGgpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgdGhpcy5zZXRDaGFuZ2VzKHZhbHVlKTtcclxuICAgICAgICB9XHJcbiAgICAgIH0pO1xyXG4gICAgICB0aGlzW3Byb3BlcnR5TmFtZV0gPSBlbnRpdHlMaXN0O1xyXG4gICAgfSk7XHJcbiAgfVxyXG4gIC8qKlxyXG4gICAqIOWIneWni+WMluWtkOWvueixoVxyXG4gICAqIEBwYXJhbSBuZ09iamVjdE1ldGFkYXRhIOWtkOWvueixoeWFg+aVsOaNrlxyXG4gICAqL1xyXG4gIHByaXZhdGUgaW5pdGlhbGl6ZU9iamVjdChuZ09iamVjdE1ldGFkYXRhOiB7IFtrZXk6IHN0cmluZ106IE9iamVjdFByb3BNZXRhZGF0YSB9KSB7XHJcbiAgICBPYmplY3Qua2V5cyhuZ09iamVjdE1ldGFkYXRhKS5mb3JFYWNoKHByb3BlcnR5TmFtZSA9PiB7XHJcbiAgICAgIGNvbnN0IGZpZWxkTWV0YWRhdGEgPSBuZ09iamVjdE1ldGFkYXRhW3Byb3BlcnR5TmFtZV0gYXMgT2JqZWN0UHJvcE1ldGFkYXRhO1xyXG4gICAgICBjb25zdCBwYXRoID0gdGhpcy5jcmVhdGVQYXRoKHByb3BlcnR5TmFtZSk7XHJcbiAgICAgIGNvbnN0IGRhdGFGaWVsZCA9IGZpZWxkTWV0YWRhdGEuZGF0YUZpZWxkIHx8IHByb3BlcnR5TmFtZTtcclxuXHJcbiAgICAgIC8vIHZhbOS4jeWtmOWcqOaXtu+8jOeUqOepuuWvueixoeS7o+abv1xyXG4gICAgICBjb25zdCB2YWwgPSB0aGlzLmRhdGFbZGF0YUZpZWxkXSB8fCB7fTtcclxuXHJcbiAgICAgIGNvbnN0IGNyZWF0ZUVudGl0eUZyb21Kc29uRGF0YSA9ICh2YWx1ZTogYW55KSA9PiB7XHJcbiAgICAgICAgbGV0IGluc3RhbmNlO1xyXG4gICAgICAgIGlmICh2YWx1ZSBpbnN0YW5jZW9mIGZpZWxkTWV0YWRhdGEudHlwZSkge1xyXG4gICAgICAgICAgaW5zdGFuY2UgPSB2YWx1ZTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgaW5zdGFuY2UgPSBFbnRpdHlGYWN0b3J5KGZpZWxkTWV0YWRhdGEudHlwZSwgdmFsdWUpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpbnN0YW5jZVtQQVJFTlRfQ0xBU1NdID0gdGhpcztcclxuICAgICAgICBpbnN0YW5jZVtQQVJFTlRfUEFUSF0gPSBwYXRoO1xyXG5cclxuICAgICAgICBpbnN0YW5jZS5vblZhbHVlQ2hhbmdlZC5zdWJzY3JpYmUoY2hhbmdlcyA9PiB7XHJcbiAgICAgICAgICBpZiAoY2hhbmdlcykge1xyXG4gICAgICAgICAgICBjaGFuZ2VzLnBhdGggPSAodGhpc1tQQVJFTlRfUEFUSF0gfHwgW10pLmNvbmNhdChjaGFuZ2VzLnBhdGgpO1xyXG4gICAgICAgICAgICB0aGlzLnNldENoYW5nZXMoY2hhbmdlcyk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIHJldHVybiBpbnN0YW5jZTtcclxuICAgICAgfTtcclxuXHJcbiAgICAgIC8vIOWmguaenOayoeacieWAvOeUqOS4gOS4quepuuWvueixoeS7o+abv1xyXG4gICAgICBsZXQgY2hpbGRFbnRpdHkgPSBjcmVhdGVFbnRpdHlGcm9tSnNvbkRhdGEodmFsKTtcclxuICAgICAgaWYgKGRlbGV0ZSB0aGlzW3Byb3BlcnR5TmFtZV0pIHtcclxuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgcHJvcGVydHlOYW1lLCB7XHJcbiAgICAgICAgICBnZXQ6ICgpID0+IHtcclxuICAgICAgICAgICAgcmV0dXJuIGNoaWxkRW50aXR5O1xyXG4gICAgICAgICAgfSxcclxuICAgICAgICAgIHNldDogZnVuY3Rpb24gKHZhbHVlOiBhbnkpIHtcclxuICAgICAgICAgICAgY29uc3QgbW9kaWZ5SW5mbyA9IHtcclxuICAgICAgICAgICAgICBwYXRoOiBjaGlsZEVudGl0eVtQQVJFTlRfUEFUSF0sXHJcbiAgICAgICAgICAgICAgdmFsdWU6IHZhbHVlLmRhdGEsXHJcbiAgICAgICAgICAgICAgcHJlVmFsdWU6IHRoaXNbcHJvcGVydHlOYW1lXS5kYXRhLFxyXG4gICAgICAgICAgICAgIHR5cGU6IE1vZGlmeVR5cGUuVmFsdWVDaGFuZ2VcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgY2hpbGRFbnRpdHkgPSBjcmVhdGVFbnRpdHlGcm9tSnNvbkRhdGEodmFsdWUpO1xyXG4gICAgICAgICAgICB0aGlzLnNldENoYW5nZXMobW9kaWZ5SW5mbyk7XHJcbiAgICAgICAgICB9LFxyXG4gICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXHJcbiAgICAgICAgfSk7XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBpbml0aWFsaXplRHluYW1pYyhuZ0R5bmFtaWNNZXRhZGF0YTogeyBba2V5OiBzdHJpbmddOiBEeW5hbWljUHJvcE1ldGFkYXRhIH0pIHtcclxuICAgIE9iamVjdC5rZXlzKG5nRHluYW1pY01ldGFkYXRhKS5mb3JFYWNoKHByb3BlcnR5TmFtZSA9PiB7XHJcbiAgICAgIGNvbnN0IGZpZWxkTWV0YWRhdGEgPSBuZ0R5bmFtaWNNZXRhZGF0YVtwcm9wZXJ0eU5hbWVdIGFzIER5bmFtaWNQcm9wTWV0YWRhdGE7XHJcbiAgICAgIGNvbnN0IHBhdGggPSB0aGlzLmNyZWF0ZVBhdGgocHJvcGVydHlOYW1lKTtcclxuICAgICAgY29uc3QgZGF0YUZpZWxkID0gZmllbGRNZXRhZGF0YS5kYXRhRmllbGQgfHwgcHJvcGVydHlOYW1lO1xyXG5cclxuICAgICAgY29uc3Qgb3JpZ2luYWxEYXRhID0gdGhpcy5kYXRhW2RhdGFGaWVsZF0gfHwge307XHJcblxyXG4gICAgICBjb25zdCBjcmVhdGVFbnRpdHlGcm9tSnNvbkRhdGEgPSAodmFsdWU6IGFueSkgPT4ge1xyXG4gICAgICAgIGxldCBpbnN0YW5jZTtcclxuICAgICAgICBpZiAodmFsdWUgaW5zdGFuY2VvZiBmaWVsZE1ldGFkYXRhLnR5cGUpIHtcclxuICAgICAgICAgIGluc3RhbmNlID0gdmFsdWU7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIGluc3RhbmNlID0gRW50aXR5RmFjdG9yeShmaWVsZE1ldGFkYXRhLnR5cGUsIHZhbHVlKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaW5zdGFuY2VbUEFSRU5UX0NMQVNTXSA9IHRoaXM7XHJcbiAgICAgICAgaW5zdGFuY2VbUEFSRU5UX1BBVEhdID0gcGF0aDtcclxuXHJcbiAgICAgICAgaW5zdGFuY2Uub25WYWx1ZUNoYW5nZWQuc3Vic2NyaWJlKGNoYW5nZXMgPT4ge1xyXG4gICAgICAgICAgaWYgKGNoYW5nZXMpIHtcclxuICAgICAgICAgICAgY2hhbmdlcy5wYXRoID0gKHRoaXNbUEFSRU5UX1BBVEhdIHx8IFtdKS5jb25jYXQoY2hhbmdlcy5wYXRoKTtcclxuICAgICAgICAgICAgdGhpcy5zZXRDaGFuZ2VzKGNoYW5nZXMpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICByZXR1cm4gaW5zdGFuY2U7XHJcbiAgICAgIH07XHJcblxyXG4gICAgICBsZXQgZHluYW1pY0VudGl0eSA9IGNyZWF0ZUVudGl0eUZyb21Kc29uRGF0YShvcmlnaW5hbERhdGEpO1xyXG4gICAgICBpZiAoZGVsZXRlIHRoaXNbcHJvcGVydHlOYW1lXSkge1xyXG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBwcm9wZXJ0eU5hbWUsIHtcclxuICAgICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gZHluYW1pY0VudGl0eTtcclxuICAgICAgICAgIH0sXHJcbiAgICAgICAgICBzZXQ6IGZ1bmN0aW9uICh2YWx1ZSkge1xyXG4gICAgICAgICAgICBjb25zdCBtb2RpZnlJbmZvID0ge1xyXG4gICAgICAgICAgICAgIHBhdGg6IGR5bmFtaWNFbnRpdHlbUEFSRU5UX1BBVEhdLFxyXG4gICAgICAgICAgICAgIHZhbHVlOiB2YWx1ZS5kYXRhLFxyXG4gICAgICAgICAgICAgIHByZVZhbHVlOiB0aGlzW3Byb3BlcnR5TmFtZV0uZGF0YSxcclxuICAgICAgICAgICAgICB0eXBlOiBNb2RpZnlUeXBlLlZhbHVlQ2hhbmdlXHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIGR5bmFtaWNFbnRpdHkgPSBjcmVhdGVFbnRpdHlGcm9tSnNvbkRhdGEodmFsdWUpO1xyXG4gICAgICAgICAgICB0aGlzLnNldENoYW5nZXMobW9kaWZ5SW5mbyk7XHJcbiAgICAgICAgICB9LFxyXG4gICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXHJcbiAgICAgICAgfSk7XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgLy8jZW5kcmVnaW9uXHJcblxyXG5cclxuICAvLyAjcmVnaW9uIOWKoOi9veWunuS9k+aVsOaNruebuOWFs3ByaXZhdGXjgIFwcm9qZWN0ZWTmlrnms5VcclxuXHJcbiAgLyoqXHJcbiAgICog5Yqg6L29566A5Y2V5a2X5q615YC8XHJcbiAgICogQHRvZG8g5Li05pe255So5L+u5pS555qE5pa55byP5qih5oufXHJcbiAgICovXHJcbiAgcHJvdGVjdGVkIGxvYWRGaWVsZHMoZGF0YTogYW55KSB7XHJcbiAgICBjb25zdCBuZ0ZpZWxkcyA9IEZpZWxkTWV0YWRhdGFVdGlsLmdldE5nRmllbGRzKHRoaXMuY29uc3RydWN0b3IpO1xyXG4gICAgT2JqZWN0LmtleXMobmdGaWVsZHMpLmZvckVhY2goKHByb3BOYW1lOiBzdHJpbmcpID0+IHtcclxuICAgICAgY29uc3QgbmdGaWVsZCA9IG5nRmllbGRzW3Byb3BOYW1lXTtcclxuICAgICAgY29uc3QgZGF0YUZpZWxkID0gbmdGaWVsZC5kYXRhRmllbGQgfHwgcHJvcE5hbWU7XHJcbiAgICAgIC8vIGlmIChuZ0ZpZWxkLnByaW1hcnkgPT09IGZhbHNlKSB7XHJcbiAgICAgIC8vICAgdGhpc1twcm9wTmFtZV0gPSBkYXRhW2RhdGFGaWVsZF07XHJcbiAgICAgIC8vIH1cclxuICAgICAgdGhpc1twcm9wTmFtZV0gPSBkYXRhW2RhdGFGaWVsZF07XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOWKoOi9veWtkOWIl+ihqOaVsOaNrlxyXG4gICAqIEBwYXJhbSBkYXRhIOaVsOaNrlxyXG4gICAqL1xyXG4gIHByb3RlY3RlZCBsb2FkTGlzdHMoZGF0YTogYW55KSB7XHJcbiAgICBjb25zdCBuZ0xpc3RzID0gRmllbGRNZXRhZGF0YVV0aWwuZ2V0TmdMaXN0KHRoaXMuY29uc3RydWN0b3IpO1xyXG4gICAgT2JqZWN0LmtleXMobmdMaXN0cykuZm9yRWFjaCgocHJvcE5hbWU6IHN0cmluZykgPT4ge1xyXG4gICAgICBjb25zdCBuZ0xpc3QgPSBuZ0xpc3RzW3Byb3BOYW1lXTtcclxuICAgICAgY29uc3QgZGF0YUZpZWxkID0gbmdMaXN0LmRhdGFGaWVsZCB8fCBwcm9wTmFtZTtcclxuICAgICAgY29uc3QgZW50aXR5VHlwZSA9IG5nTGlzdC50eXBlO1xyXG5cclxuICAgICAgLy8g5Yib5bu65a6e5L2TXHJcbiAgICAgIGNvbnN0IGxpc3REYXRhID0gZGF0YVtkYXRhRmllbGRdO1xyXG4gICAgICBpZiAobGlzdERhdGEpIHtcclxuICAgICAgICBjb25zdCBlbnRpdGllcyA9IGxpc3REYXRhLm1hcCgoZW50aXR5RGF0YTogYW55KSA9PiB7XHJcbiAgICAgICAgICByZXR1cm4gRW50aXR5RmFjdG9yeTx0eXBlb2YgZW50aXR5VHlwZT4oZW50aXR5VHlwZSwgZW50aXR5RGF0YSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgdGhpc1twcm9wTmFtZV0ubG9hZEVudGl0aWVzKGVudGl0aWVzKTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICB0aGlzW3Byb3BOYW1lXS5sb2FkRW50aXRpZXMoW10pO1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIHByaXZhdGUgbG9hZE9iamVjdHMoZGF0YTogYW55KSB7XHJcbiAgICBjb25zdCBuZ09iamVjdHMgPSBGaWVsZE1ldGFkYXRhVXRpbC5nZXROZ09iamVjdHModGhpcy5jb25zdHJ1Y3Rvcik7XHJcbiAgICBPYmplY3Qua2V5cyhuZ09iamVjdHMpLmZvckVhY2goKHByb3BOYW1lOiBzdHJpbmcpID0+IHtcclxuICAgICAgY29uc3QgbmdPYmplY3QgPSBuZ09iamVjdHNbcHJvcE5hbWVdO1xyXG4gICAgICBjb25zdCBkYXRhRmllbGQgPSBuZ09iamVjdC5kYXRhRmllbGQgfHwgcHJvcE5hbWU7XHJcbiAgICAgIGNvbnN0IG9iamVjdERhdGEgPSBkYXRhW2RhdGFGaWVsZF07XHJcbiAgICAgIGNvbnN0IGVudGl0eSA9IHRoaXNbcHJvcE5hbWVdIGFzIEVudGl0eTtcclxuICAgICAgaWYgKCFlbnRpdHkgfHwgIW9iamVjdERhdGEpIHtcclxuICAgICAgICByZXR1cm47XHJcbiAgICAgIH1cclxuICAgICAgZW50aXR5LmxvYWQob2JqZWN0RGF0YSk7XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIHByb3RlY3RlZCBsb2FkRHluYW1pY09iamVjdHMoZGF0YTogYW55KSB7XHJcbiAgICBjb25zdCBuZ0R5bmFtaWNPYmplY3RzID0gRmllbGRNZXRhZGF0YVV0aWwuZ2V0TmdEeW5hbWljKHRoaXMuY29uc3RydWN0b3IpO1xyXG4gICAgT2JqZWN0LmtleXMobmdEeW5hbWljT2JqZWN0cykuZm9yRWFjaCgocHJvcE5hbWU6IHN0cmluZykgPT4ge1xyXG4gICAgICBjb25zdCBuZ0R5bmFtaWNPYmplY3QgPSBuZ0R5bmFtaWNPYmplY3RzW3Byb3BOYW1lXTtcclxuICAgICAgY29uc3QgZGF0YUZpZWxkID0gbmdEeW5hbWljT2JqZWN0LmRhdGFGaWVsZCB8fCBwcm9wTmFtZTtcclxuXHJcbiAgICAgIGNvbnN0IGR5bmFtaWNEYXRhID0gZGF0YVtkYXRhRmllbGRdIHx8IHt9O1xyXG4gICAgICBjb25zdCBkeW5hbWljRW50aXR5ID0gdGhpc1twcm9wTmFtZV0gYXMgRHluYW1pYztcclxuICAgICAgaWYgKCFkeW5hbWljRW50aXR5KSB7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgICB9XHJcbiAgICAgIGR5bmFtaWNFbnRpdHkubG9hZER5bmFtaWNEYXRhKGR5bmFtaWNEYXRhKTtcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgLy8gI2VuZHJlZ2lvblxyXG5cclxuICAvLyAjcmVnaW9uIOengeacieW3peWFt+aWueazlVxyXG5cclxuXHJcbiAgLyoqXHJcbiAgICog5Y+R6YCB5YC85Y+Y5pu0XHJcbiAgICovXHJcbiAgcHJpdmF0ZSBlbWl0VmFsdWVDaGFuZ2UocHJvcE5hbWU6IHN0cmluZywgcHJvcE1ldGFkYXRhOiBQcmltaXRpdmVQcm9wTWV0YWRhdGEsIG5ld1Byb3BWYWx1ZTogYW55LCBvbGRQcm9wVmFsdWU6IGFueSk6IHZvaWQge1xyXG4gICAgY29uc3QgY2hhbmdlID0ge1xyXG4gICAgICBwYXRoOiB0aGlzLmNyZWF0ZVBhdGgocHJvcE5hbWUpLFxyXG4gICAgICB2YWx1ZTogbmV3UHJvcFZhbHVlLFxyXG4gICAgICBwcmVWYWx1ZTogb2xkUHJvcFZhbHVlLFxyXG4gICAgICB0eXBlOiBNb2RpZnlUeXBlLlZhbHVlQ2hhbmdlXHJcbiAgICB9O1xyXG5cclxuICAgIGlmICh0aGlzW1BBUkVOVF9QQVRIXSkge1xyXG4gICAgICBjaGFuZ2UucGF0aCA9IHRoaXNbUEFSRU5UX1BBVEhdLmNvbmNhdChjaGFuZ2UucGF0aCk7XHJcbiAgICB9XHJcbiAgICB0aGlzLnNldENoYW5nZXMoY2hhbmdlKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOiOt+WPluWxnuaAp+WAvFxyXG4gICAqL1xyXG4gIHByaXZhdGUgZ2V0UHJvcFZhbHVlKHByb3BOYW1lOiBzdHJpbmcsIHByb3BNZXRhZGF0YTogUHJpbWl0aXZlUHJvcE1ldGFkYXRhKSB7XHJcbiAgICBjb25zdCBkYXRhRmllbGQgPSBwcm9wTWV0YWRhdGEuZGF0YUZpZWxkIHx8IHByb3BOYW1lO1xyXG4gICAgY29uc3QgdmFsdWUgPSB0aGlzLmRhdGFbZGF0YUZpZWxkXTtcclxuXHJcbiAgICAvLyDlr7nlpJror63lvZXlhaXlrZfmrrXvvIxxdWVyeeS4jei/lOWbnumXrumimOi/m+ihjOWFvOWuuVxyXG4gICAgaWYgKHByb3BNZXRhZGF0YS5lbmFibGVNdWx0aUxhbmdJbnB1dCA9PT0gdHJ1ZSAmJiAhdmFsdWUpIHtcclxuICAgICAgY29uc3QgbGFuZ0NvZGUgPSB3aW5kb3cubG9jYWxTdG9yYWdlLmdldEl0ZW0oJ2xhbmd1YWdlQ29kZScpIHx8ICd6aC1DSFMnO1xyXG4gICAgICBjb25zdCBvcmlnaW5EYXRhRmllbGQgPSBkYXRhRmllbGQucmVwbGFjZSgnX01VTFRJTEFOR1VBR0UnLCAnJyk7XHJcbiAgICAgIHJldHVybiB7XHJcbiAgICAgICAgW2xhbmdDb2RlXTogdGhpcy5kYXRhW29yaWdpbkRhdGFGaWVsZF1cclxuICAgICAgfTtcclxuICAgIH1cclxuICAgIHJldHVybiB2YWx1ZTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOiuvue9ruWxnuaAp+WAvFxyXG4gICAqL1xyXG4gIHByaXZhdGUgc2V0UHJvcFZhbHVlKHByb3BOYW1lOiBzdHJpbmcsIHByb3BNZXRhZGF0YTogUHJpbWl0aXZlUHJvcE1ldGFkYXRhLCBwcm9wVmFsdWU6IGFueSkge1xyXG4gICAgY29uc3QgZGF0YUZpZWxkID0gcHJvcE1ldGFkYXRhLmRhdGFGaWVsZCB8fCBwcm9wTmFtZTtcclxuICAgIHRoaXMuZGF0YVtkYXRhRmllbGRdID0gcHJvcFZhbHVlO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog5qOA5p+l5bGe5oCn5YC85piv5ZCm5Y+R55Sf5Y+Y5YyWXHJcbiAgICovXHJcbiAgcHJpdmF0ZSBpc1Byb3BWYWx1ZUNoYW5nZWQocHJvcE5hbWU6IHN0cmluZywgcHJvcE1ldGFkYXRhOiBQcmltaXRpdmVQcm9wTWV0YWRhdGEsIG5ld1Byb3BWYWx1ZTogYW55LCBvbGRQcm9wVmFsdWU6IGFueSkge1xyXG4gICAgaWYgKHByb3BNZXRhZGF0YS5lbmFibGVNdWx0aUxhbmdJbnB1dCA9PT0gdHJ1ZSkge1xyXG4gICAgICBpZiAodGhpcy5pc0VtcHR5TXVsdGlMYW5nUHJvcFZhbHVlKG5ld1Byb3BWYWx1ZSkgPT09IHRydWUgJiYgdGhpcy5pc0VtcHR5TXVsdGlMYW5nUHJvcFZhbHVlKG9sZFByb3BWYWx1ZSkgPT09IHRydWUpIHtcclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgIH1cclxuICAgICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KG5ld1Byb3BWYWx1ZSkgIT09IEpTT04uc3RyaW5naWZ5KG9sZFByb3BWYWx1ZSk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICByZXR1cm4gbmV3UHJvcFZhbHVlICE9PSBvbGRQcm9wVmFsdWU7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDlpJror63lvZXlhaXlrZfmrrXnmoTlgLzmmK/lkKbkuLrnqbpcclxuICAgKi9cclxuICBwcml2YXRlIGlzRW1wdHlNdWx0aUxhbmdQcm9wVmFsdWUodmFsdWU6IGFueSkge1xyXG4gICAgcmV0dXJuICF2YWx1ZSB8fCBPYmplY3Qua2V5cyh2YWx1ZSkubGVuZ3RoID09PSAwO1xyXG4gIH1cclxuXHJcbiAgLy8gI2VuZHJlZ2lvblxyXG59XHJcbiJdfQ==