import * as tslib_1 from "tslib";
import { Inject, Injectable, Injector } from '@angular/core';
import { BindingData, BindingList, ChangeType } from '../binding-data/index';
import { ChangeListener } from './change_listener';
import { Expression } from '../expression/index';
import { NAMESPACE } from '../frame/index';
import { Repository } from '../repository/index';
var EventType = Expression.EventType;
/**
 * 监听bindingList变更
 * @description 主要用于监听行切换等事件
 */
var BindingDataChangeListener = /** @class */ (function (_super) {
    tslib_1.__extends(BindingDataChangeListener, _super);
    function BindingDataChangeListener(injector, bindingData, namespace) {
        var _this = _super.call(this) || this;
        _this.injector = injector;
        _this.bindingData = bindingData;
        _this.namespace = namespace;
        _this.repository = null;
        _this.repository = _this.injector.get(Repository, null);
        _this.registerEvent();
        return _this;
    }
    /**
     * 注册值变化事件
     */
    BindingDataChangeListener.prototype.registerEvent = function () {
        var _this = this;
        if (this.bindingData && this.bindingData.changes && typeof this.bindingData.changes.subscribe === 'function') {
            this.bindingData.changes.subscribe(function (change) {
                if ((change.type === ChangeType.Append && change.isCloned !== true) || change.type === ChangeType.ValueChanged || change.type === ChangeType.Remove || change.type === ChangeType.Load || change.type === ChangeType.SelectionChanged) {
                    var eventType = null;
                    if (change.type === ChangeType.Append) {
                        eventType = EventType.Append;
                    }
                    else if (change.type === ChangeType.ValueChanged) {
                        eventType = EventType.ValueChanged;
                    }
                    else if (change.type === ChangeType.Remove) {
                        eventType = EventType.Remove;
                    }
                    else if (change.type === ChangeType.Load) {
                        // 主表新增
                        if (change.create === true) {
                            eventType = EventType.Append;
                        }
                        else {
                            eventType = EventType.Load;
                        }
                    }
                    else if (change.type === ChangeType.SelectionChanged) {
                        eventType = EventType.SelectionChanged;
                    }
                    var path = _this.buildEventPath(change);
                    var modification = {
                        ns: _this.namespace,
                        path: path,
                        type: eventType,
                        source: Expression.EventSource.BindingData,
                        value: change.value,
                        id: change.id
                    };
                    // console.log("BindingDataChangeListener", modification);
                    _this.subject.next(modification);
                }
            });
        }
    };
    BindingDataChangeListener.prototype.buildEventPath = function (change) {
        var path = change.path;
        var paths = [];
        // if (!path || path.length < 1) {
        //   return paths;
        // }
        var primaryValue = this.bindingData.list.currentItem.primaryKeyValue;
        if (primaryValue) {
            if (!(change.type === ChangeType.Load && change.path.length === 0)) {
                paths.push(this.bindingData.list.primaryKey + ":" + primaryValue);
            }
        }
        var currentPath = [];
        for (var index = 0; index < path.length; index++) {
            var propertyName = path[index];
            currentPath.push(propertyName);
            var item = this.bindingData.getValue(currentPath);
            paths.push(propertyName);
            if (item instanceof BindingList) {
                if (currentPath.length < path.length) {
                    var bindingList = item;
                    var currentId = bindingList.currentItem.primaryKeyValue;
                    if (index === path.length - 2 && change.id) {
                        currentId = change.id;
                    }
                    paths.push(this.bindingData.list.primaryKey + ":" + currentId);
                }
            }
        }
        return paths;
    };
    BindingDataChangeListener.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    BindingDataChangeListener.ctorParameters = function () { return [
        { type: Injector },
        { type: BindingData },
        { type: undefined, decorators: [{ type: Inject, args: [NAMESPACE,] }] }
    ]; };
    return BindingDataChangeListener;
}(ChangeListener));
export { BindingDataChangeListener };
//# sourceMappingURL=data:application/json;base64,