/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var ImageDrop = /** @class */ (function () {
    function ImageDrop(quill, options, ngZone) {
        if (options === void 0) { options = {}; }
        this.ngZone = ngZone;
        // save the quill reference
        this.quill = quill;
        // bind handlers to this instance
        this.handleDrop = this.handleDrop.bind(this);
        this.handlePaste = this.handlePaste.bind(this);
        // listen for drop and paste events
        this.quill.root.addEventListener('drop', this.handleDrop, false);
        this.quill.root.addEventListener('paste', this.handlePaste, false);
    }
    /**
     * @param {?} evt
     * @return {?}
     */
    ImageDrop.prototype.handleDrop = /**
     * @param {?} evt
     * @return {?}
     */
    function (evt) {
        evt.preventDefault();
        if (evt.dataTransfer &&
            evt.dataTransfer.files &&
            evt.dataTransfer.files.length) {
            if (document.caretRangeFromPoint) {
                /** @type {?} */
                var selection = document.getSelection();
                /** @type {?} */
                var range = document.caretRangeFromPoint(evt.clientX, evt.clientY);
                if (selection && range) {
                    selection.setBaseAndExtent(range.startContainer, range.startOffset, range.startContainer, range.startOffset);
                }
            }
            this.readFiles(evt.dataTransfer.files, this.insert.bind(this));
        }
    };
    /**
     * @param {?} evt
     * @return {?}
     */
    ImageDrop.prototype.handlePaste = /**
     * @param {?} evt
     * @return {?}
     */
    function (evt) {
        var _this = this;
        if (evt.clipboardData &&
            evt.clipboardData.items &&
            evt.clipboardData.items.length) {
            this.readFiles(evt.clipboardData.items, (/**
             * @param {?} dataUrl
             * @return {?}
             */
            function (dataUrl) {
                /** @type {?} */
                var selection = _this.quill.getSelection();
                if (selection) {
                    // we must be in a browser that supports pasting (like Firefox)
                    // so it has already been placed into the editor
                }
                else {
                    // otherwise we wait until after the paste when this.quill.getSelection()
                    // will return a valid index
                    _this.ngZone.runOutsideAngular((/**
                     * @return {?}
                     */
                    function () {
                        setTimeout((/**
                         * @return {?}
                         */
                        function () { return _this.insert(dataUrl); }), 0);
                    }));
                }
            }));
        }
    };
    /**
     * @param {?} dataUrl
     * @return {?}
     */
    ImageDrop.prototype.insert = /**
     * @param {?} dataUrl
     * @return {?}
     */
    function (dataUrl) {
        /** @type {?} */
        var index = (this.quill.getSelection() || {}).index || this.quill.getLength();
        this.quill.insertEmbed(index, 'image', dataUrl, 'user');
    };
    /**
     * @param {?} files
     * @param {?} callback
     * @return {?}
     */
    ImageDrop.prototype.readFiles = /**
     * @param {?} files
     * @param {?} callback
     * @return {?}
     */
    function (files, callback) {
        // check each file for an image
        [].forEach.call(files, (/**
         * @param {?} file
         * @return {?}
         */
        function (file) {
            if (!file.type.match(/^image\/(gif|jpe?g|a?png|svg|webp|bmp|vnd\.microsoft\.icon)/i)) {
                // file is not an image
                // Note that some file formats such as psd start with image/* but are not readable
                return;
            }
            // set up file reader
            /** @type {?} */
            var reader = new FileReader();
            reader.onload = (/**
             * @param {?} evt
             * @return {?}
             */
            function (evt) {
                callback(evt.target.result);
            });
            // read the clipboard item or file
            /** @type {?} */
            var blob = file.getAsFile ? file.getAsFile() : file;
            if (blob instanceof Blob) {
                reader.readAsDataURL(blob);
            }
        }));
    };
    return ImageDrop;
}());
export { ImageDrop };
if (false) {
    /** @type {?} */
    ImageDrop.prototype.quill;
    /**
     * @type {?}
     * @private
     */
    ImageDrop.prototype.ngZone;
}
//# sourceMappingURL=data:application/json;base64,