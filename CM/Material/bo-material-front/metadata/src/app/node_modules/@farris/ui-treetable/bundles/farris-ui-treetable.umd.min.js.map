{"version":3,"sources":["node_modules/tslib/tslib.es6.js","ng://@farris/ui-treetable/lib/hotkeys.ts","ng://@farris/ui-treetable/lib/treetable.service.ts","ng://@farris/ui-treetable/lib/virtualized-loader.service.ts","ng://@farris/ui-treetable/lib/search.handle.ts","ng://@farris/ui-treetable/lib/treetable.component.ts","ng://@farris/ui-treetable/lib/find-input.component.ts","ng://@farris/ui-treetable/lib/high-light.pipe.ts","ng://@farris/ui-treetable/lib/nodes_pager/nodes-pager.component.ts","ng://@farris/ui-treetable/lib/nodes_pager/childs-loading.component.ts","ng://@farris/ui-treetable/lib/cell-tips.pipe.ts","ng://@farris/ui-treetable/lib/disable-node.pipe.ts","ng://@farris/ui-treetable/lib/treetable.module.ts"],"names":["__assign","Object","assign","t","s","i","n","arguments","length","p","prototype","hasOwnProperty","call","apply","this","__read","o","m","Symbol","iterator","r","e","ar","next","done","push","value","error","__spread","concat","TTHotkeys","addShortcut","options","_this","merged","defaults","keys","indexOf","replace","event","description","hotkeys","set","Observable","observer","dispose","eventManager","addEventListener","element","preventDefault","delete","Injectable","args","providedIn","EventManager","Map","document","TreetableService","onSelectionChange","selected","selectionSource","onDblClick","rowNode","dblClickSource","onChangeCheckboxStatus","changeCheckboxStatus","onInsert","treeNode","parent","insertNode","onRemove","removeNode","onUpdate","updateNode","columnIsVisible","col","tt","visible","undefined","checkColumnsForGroupHeader","columns","_columns","getDataColumns","getDataFields","cols","j","forEach","colspan","splice","fields","_cols","field","hAlign","d","includes","f","filter","Subject","selectionSource$","asObservable","dblClickSource$","changeCheckboxStatus$","insertNode$","removeNode$","updateNode$","VirtualizedLoaderService","getTableHeight","height","getTableHeaderHeight","headerBox","nativeElement","getBoundingClientRect","getTableBodyHeight","getTableWidth","width","getRowHeight","rowHeight","getRowNodes","scrollTop","top","rows","topHideHeight","bottomHideHeight","rowNodes","getCurrentAllRowNodes","minTop","maxTop","data","SearchHandle","research","from","_a","ttInstance","searchData","allNodes","search","cloneDeep","state","searchOnServer","values","searchOnClient","searchRowNodes","_updateSerializedValues","updateSerializedValue","checkeds","checkedNodes","map","idField","resize","detectChanges","psRef","directiveRef","update","visibleItems","pids","parents","id","flat","pidArr","Array","Set","some","item","expanded","updateNodeProperty","serializedValue","resetTreeData","findParent","res","find","t1","searchExpression","c","targetValue","getValue","node","parseFloat","writeConsole","reduce","flag","curr","split","getFindTextTotal","nodes","_fields","trim","toLowerCase","findParents","parentNode","arr","t2","children","tn","a","NODES_PAGER_COLUMN_FIELD","TreeTableColumnDirective","Directive","selector","Input","defineProperty","TreeTableComponent","_groupColumns","ttService","cs","_data","val","initNodeStatus","setNewColumnsWidth","loadDataSuccess","content","headerCheckboxCmp","_selections","vals","findRowNode","ids_1","selectValues","difference","setTimeout","selectValuesChange","emit","_selectedRow","selectValue","selectValueChange","_checkeds","treeNodes","ids_2","checkValues","checkValuesChange","msg","type","debugSer","checkOptons","nowrap","virtualized","reSetSize","setScorllBodyHeight","multiSelect","singleSelect","showCheckbox","checkOnSelect","selectOnCheck","beforeSortColumn","of","fit","renderer","addClass","el","parentEl","parentElement","setStyle","beforeClickNode","beforeCheckAll","beforeUnCheckAll","autoWidth","fitColumns","resizableColumns","disabledRow","ngOnInit","_UUID","styleElement","utils","createStyleSheet","styleSheetId","checkColumnOption","ngZone","runOutsideAngular","ro","ResizeObserver","entries","contentRect","target","showBorder","observe","paginationOptions","initPaginationOptions","ngOnDestroy","unobserve","disconnect","findKeysHandler","unsubscribe","removeStyleSheet","farrisInstances","destroy","destroy$","complete","ngOnChanges","changes","isFirstChange","isDataChanged","currentValue","previousValue","disabled","hovered","enableFindText","setFindText","selectNode","selectNodes","pageIndex","currentPage","pageSize","itemsPerPage","pageList","total","totalItems","setTableWidth","allColumnsWidth","ngAfterViewChecked","ngAfterContentInit","templates","getType","headerTemplate","template","bodyTemplate","columnsRef","ttc2columns","subscribe","ngAfterViewInit","containerElement","querySelector","registerShortcuts","setRightFixedColumnShadow","add","appendCssRules","sheet","timer","loadedTimer","pipe","takeUntil","loadedData","headerCells","firstRowCells","showHeader","headerTable","querySelectorAll","bodyTable","td","index","fieldName","getAttribute","colWidth","toFixed","style","minWidth","columnCssName","sortColumnsByFixed","updateColumns","fixedLeft","fixed","fixedCenter","fixedRight","left","rightWidthTotal_1","right","cssRules","colWidthTotal","fixedCols","fixedRightColumns","fixedLeftColumns","isVisible","ruleName","cssRule","getCssRule","display","stylecss","paginationForChildren","title","align","nodesPagerBar","fixedColumns","autoFitColumns","onPageChange","$event","pageChanged","onPageSizeChange","pageSizeChanged","updatePageInfo","pageInfo","obj","remote","pagerOnServer","getNodeText","rowdata","isMultilingualField","localeService","localeId","onlySelectSelf","showFilterBar","_hotKeys","inputGroup","textbox","onSearch","enable","showFindInput","cdRef","getCustomCls","clsType","cls","fn","rowStyler","cellStyler","rowCls","arrcls","isArray","rowClsObj_1","getRowCls","getCellCls","getRealColWidth","currentCol","fixedWidth","onResized","resizeSer","windowResized","ps","instance","containerWidth","scrollbarXLeft","contentWidth","rightCSSRule","setFixedColumnShadow","x","fixedLeftCssRuleKey","fixedRightCssRuleKey","leftCSSRule","removeCssRule","srcElement","offsetWidth","scrollWidth","onScrollX","scrollLeft","scrollX","onScrollY","renderData","scrolltop","scrollLoader","scrollY","onSearchValueChange","onClearSearchValue","searched","clearSearchValue","onCellClick","cellClick","trackByFn","formatData","formatter","colFormatSer","format","columnsChanged","list","offsetHeight","h","parseInt","renderVirtualRowNodes","nodePosY","scrollY_1","_rownodes","elementRef","searchHandle","serializeNodes","fixedHeader","level","parentIds","selectable","showIcon","onlySelectLeaf","leaf","keyid","isSelected","findIndexInSelection","isChecked","findIndexInCheckeds","isLast","isFirst","parentRn","parentID","_parents","parentRowNode","last","first","selectedRow","selections","findIndex","v","unSelectedCurrentRowEmit","currSelected","nodeUnSelect","_singleSelectNode","clearSelections","selectRowIndex","rowIndex","clearCheckeds","setCheckeds","sp","originalEvent","nodeSelected","_singleUnSelectNode","__singleSelectNode","keepSelect","__multiSelectNode","singleSelectWhenMultiSelect","handleRowClick","indeterminate","setSelections","rowSelectChangeParams","cascadeNodes","nodeChecked","nodeUnChecked","ids","selectWhenChecked","isInArray","items","updated","getDiffrentData","_nodes_1","cascadeCheckedNode","checked","sync","isIndeterminate","propagateSelectionDown","cascadeCheck","cascadeDown","rn","row","propagateSelectionUp","cascadeUp","rns_1","reverse","updateCheckboxStatus","updateNodeStatus","checkedItem","chked","updateAllCheckboxStatus","toggleNodeWithCheckbox","stopPropagation","toggleNodesWithCheckbox","checkAllNodes","unCheckAllNodes","status","showCheckAll","chkAll","updateParentCheckboxStatus","pNodes","rnid","updateParentsCheckStatus","findRowNodes","sort","getCheckboxStatus","len","uncheckedLength","checkedLength","childNodes","findIndexIn","equals","source","toggleExpand","deep","childrenEmptyEmitExpand","toggleVisible","expand","collapse","rid_1","rnParent","_r","setRowVisible_1","expandNode","render","expandAll","expandAllNodes","expandNodes","expandAllNodesBy","collapseNode","collapseAll","collapseAllNodes","getContainerOffset","rect","body","onColumnResizeBegin","containerLeft","Math","round","lastResizerHelperX","pageX","onColumnResize","resizerHelperVC","onColumnResizeEnd","column","delta","offsetLeft","newColumnWidth","resizeColumnIndex","colField_1","nextColumn","nextElementSibling","offsetParent","nextColumnWidth","nextColumnMinWidth","resizeColGroup","_colInfo","removeClass","table","colGroup","nodeName","Error","nextCol","insert","appendNew","append","emitAppendNew","appendChildren","loadChildren","remove","nodeId","removed","extend","nodeid","property","k","scorllBodyHeight","headerWrap","useGroupHeader","hh","clientHeight","headerHeight","pagination","pagerHeight","size","w","scrollToY","scrollToX","loadData","empty","clearAll","markForCheck","nodeIds","selectFirstNode","firstCanSelectNode","scrollToCurrentRow","trId","trEle","getElementById","closest","isElementInViewport","scrollIntoViewIfNeeded","getBrowserType","ff","getFFVer","scrollIntoView","block","inline","containerEl","viewPortHeight","offsetTop","scrollToCurrentNode","id_1","showRowsOnePager","ceil","pid","top_1","gotocurrent","selectNodeChangedSubject","unSelectNode","emitNodeSelected","join","unSelectNodes","rownodes","checkedNode","isEnableMultiSelect","unCheckedNode","rownode","unNodes","_checkedNodes","parentIDS","closeCascade","_cascade","unCheckedNodes","findNode","getRoot","checkAll","unCheckAll","getNodeIconFromData","useIconFromData","iconField","_iconField","getTreeIcon","leafIcon","expandIcon","collapseIcon","f-loading-round","icon","expandedIcon","collapsedIcon","_b","whenDataIconEmptyUseDefault","collapsedExpression","expandedExpression","leafExpression","icons","iconCls","compare","b","localeCompare","_sort","r1","r2","sortFields","sortName","orders","sortOrder","sn","so","orderby","this_1","sorter","v1","v2","clientSort","sortedData","bind","sortChildNodes","onSortColumnClick","sortable","sortOrders","colOrder","order","newOrder","_order","multiSort","remoteSort","columnSorted","findKeyWords","searchValue","findField","findValue","result","findResult","firstRowIndex_1","findCount","findCurrent","tslib_1.__spread","y_1","highLightKeywords","resetFindText","closeFindPanel","allHighLights","nextFindValue","step","active","_index","nextRow_1","y_2","keyWords","currentEl","sTop","y","animations","showOrHideColumn","isHide","showColumn","hideColumn","showChildsLoading","__colspan__","__childs_loading__","onChildsPageChanged","childsPageChanged","trId2DataId","tr","onKeydownEvent","key","newIdx","blur","trs","trCount","selectedTrIndex","code","_tr","getChildNodes","parentId","getParentNodes","Component","exportAs","encapsulation","ViewEncapsulation","None","changeDetection","ChangeDetectionStrategy","OnPush","ElementRef","ResizeService","Renderer2","CommonUtils","ColumnFormatService","ChangeDetectorRef","NgZone","Injector","Output","ContentChildren","FarrisTemplateDirective","ViewChild","PerfectScrollbarComponent","HostListener","shortcuts","injector","showSearchField","allColumnsTitle","showLines","showLinesOnHover","striped","loadDataType","emptyMessage","indentSpacing","foldIcon","unfoldIcon","expandLevel","EventEmitter","dblClickExpand","pagerViewMode","showPageList","showPageInfo","showPageNumber","pagerLabelSize","showGotoInput","showTotalForChildren","enableContextMenu","contextMenuItems","dblClick","searchButtonText","BehaviorSubject","second","secondItem","onBeforeShowContextMenu","contextMenuDom","rowID","rowNode_1","go$","show","beforeShowContextMenu","tree","switchMap","menus","viewportW","targetW","focusTargetWidth","get","LocaleService","idService","IdService","FarrisComponentInstanceService","uuid","random","slice","DebugService","useDebugMode","TTBodyComponent","TreeTableTogglerComponent","togglerEl","treeNodeIcon","isShowTriangle","showTriangle","noChilds","hasChildren","expandSub","updateIcon","collapseSub","addNewSub","subscriptions","removeStyle","reSetLines","ngDoCheck","unAllSubscriptions","lineEls","_renderLines","renderLines","noLineStyle","referEl","createLeafNodeLines","insertBefore","newLineElement","nearLine","border","newLineEl","createElement","isTopNode","l1","l2","dessert","appendChild","registerClickEvent","listen","onClick","HostBinding","ngzone","TreeTableSelectRowDirective","subscription","onclick","isEnabled","delay","prevent","rowClick","selectRowDisabled","toggleClass","TreeTableHeaderCheckboxComponent","handleClick","checkedChange","TreeTableCheckboxComponent","chk","cls1","DblClickRowDirective","enableDblClick","selectRowDir","ondblclick","prevEl","previousSibling","dblclickNode","togglerTag","visibility","clearTimeout","decorators","Optional","Self","CustomRowStyleDirective","setRowStyle","sty_1","cls_1","TTCustomCellStyleDirective","setCellStyle","cellCls","styler","rowData","ccs_1","TTResizableColumnDirective","isEnable","resizer","className","resizerMouseDownListener","onMouseDown","onMouseEnter","enableResize","bindDocumentEvents","documentMouseMoveListener","onMouseMove","documentMouseUpListener","onMouseUp","unbindDocumentEvents","removeEventListener","FindInputComponent","keyupEventSub","fromEvent","input","switch","keyCode","debounceTime","valueChanged","focus","onClose","close","onEnter","enterHandler","current","count","HighlightPipe","transform","text","keyword","needSearch","pattern","regex","RegExp","sanitizer","bypassSecurityTrustHtml","replaceContent","match","parseHTML","html","context","innerHTML","cloneNode","strMatch1","strs","strs_1","__values","tslib_1.__values","strs_1_1","aa","rep_old","rep_new","re2","Pipe","name","DomSanitizer","TreetableNodesPagerComponent","getPagerCount","setPagerInfo","pagerInfo","showPager","isFirstPager","isLastPager","previous","setCurrent","page","pageChange","pagerChanged","newPageIndex","cd","showTotal","ChildsLoadingComponent","CellTipsPipe","_i","showTips","getCellTooltipContent","txt","commonUtils","tipContent","getEnumTitleFromColumnOptions","DisableNodePipe","selectable2","TreeTableModule","NgModule","imports","CommonModule","FormsModule","FarrisCommonModule","forRoot","PerfectScrollbarModule","InputGroupModule","LocaleModule","DataColumnModule","PaginationModule","FarrisContextMenuModule","declarations","exports","providers"],"mappings":"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","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","import { Injectable, Inject } from '@angular/core';\r\nimport { EventManager } from '@angular/platform-browser';\r\nimport { Observable } from 'rxjs';\r\n\r\ninterface HotkeyOptions {\r\n    element: any;\r\n    description: string | undefined;\r\n    keys: string;\r\n}\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class TTHotkeys {\r\n    hotkeys = new Map();\r\n    defaults: Partial<HotkeyOptions> = {\r\n        element: document\r\n    };\r\n\r\n    constructor(private eventManager: EventManager) {\r\n    }\r\n\r\n    addShortcut(options: Partial<HotkeyOptions>) {\r\n        const merged = { ...this.defaults, ...options };\r\n        if (merged.keys.indexOf('ctrl') > -1) {\r\n            merged.keys = merged.keys.replace('ctrl', 'control');\r\n        }\r\n        const event = `keydown.${merged.keys}`;\r\n\r\n        if (merged.description) {\r\n            this.hotkeys.set(merged.keys, merged.description);\r\n        }\r\n\r\n        return new Observable(observer => {\r\n            const handler = (e) => {\r\n                e.preventDefault();\r\n                observer.next(e);\r\n            };\r\n\r\n            const dispose = this.eventManager.addEventListener(merged.element, event, handler);\r\n\r\n            return () => {\r\n                dispose();\r\n                this.hotkeys.delete(merged.keys);\r\n            };\r\n        });\r\n    }\r\n\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Observable, Subject } from 'rxjs';\r\nimport { flatten } from 'lodash-es';\r\nimport { RowNode, TreeNode } from './types/treenode';\r\nimport { TreeTableColumn } from './types/treetable-column';\r\n\r\n@Injectable()\r\nexport class TreetableService {\r\n\r\n    private selectionSource = new Subject();\r\n    private dblClickSource = new Subject();\r\n    private changeCheckboxStatus = new Subject<RowNode>();\r\n    private removeNode = new Subject<RowNode>();\r\n    private insertNode = new Subject<TreeNode>();\r\n    private updateNode = new Subject<RowNode>();\r\n\r\n\r\n    selectionSource$: Observable<any> = this.selectionSource.asObservable();\r\n    dblClickSource$: Observable<any> = this.dblClickSource.asObservable();\r\n    changeCheckboxStatus$: Observable<RowNode> = this.changeCheckboxStatus.asObservable();\r\n    insertNode$: Observable<TreeNode> = this.insertNode.asObservable();\r\n    removeNode$: Observable<RowNode> = this.removeNode.asObservable();\r\n    updateNode$: Observable<RowNode> = this.updateNode.asObservable();\r\n\r\n    onSelectionChange(selected?: TreeNode[]) {\r\n        this.selectionSource.next(selected);\r\n    }\r\n\r\n    onDblClick(rowNode: RowNode) {\r\n        this.dblClickSource.next(rowNode);\r\n    }\r\n\r\n    onChangeCheckboxStatus(rowNode: RowNode) {\r\n        this.changeCheckboxStatus.next(rowNode);\r\n    }\r\n\r\n    onInsert(treeNode: TreeNode, parent?: TreeNode) {\r\n        this.insertNode.next(treeNode);\r\n    }\r\n\r\n    onRemove(rowNode: RowNode) {\r\n        this.removeNode.next(rowNode);\r\n    }\r\n\r\n    onUpdate(rowNode: RowNode) {\r\n        this.updateNode.next(rowNode);\r\n    }\r\n\r\n    columnIsVisible(col, tt) {\r\n        if (col.visible === undefined) {\r\n            return true;\r\n        }\r\n        if (typeof col.visible === 'function') {\r\n            return col.visible(tt);\r\n        }\r\n\r\n        return col.visible;\r\n    }\r\n\r\n    checkColumnsForGroupHeader(columns: any, tt: any) {\r\n        let _columns = [];\r\n        if (columns && columns.length) {\r\n            _columns = this.getDataColumns(columns);\r\n        }\r\n        return {\r\n            columns: _columns\r\n        };\r\n    }\r\n\r\n\r\n    private getDataFields(cols, length) {\r\n        let i = 0;\r\n        let j = 0;\r\n        cols.forEach(n => {\r\n            const colspan = n.colspan || 1;\r\n            if (i + colspan <= length) {\r\n                i += colspan;\r\n                j++;\r\n            }\r\n        });\r\n        return cols.splice(0, j);\r\n    }\r\n\r\n\r\n    private getDataColumns(cols) {\r\n        if (!cols || !cols.length) {\r\n            return [];\r\n        }\r\n\r\n        let fields = [];\r\n        for (let i = 0; i < cols.length; i++) {\r\n            let _cols = cols[i];\r\n            if (cols[i] && !cols[i].length) {\r\n                _cols = [...fields];\r\n                fields = [];\r\n            }\r\n            _cols.forEach(n => {\r\n                if (!n.field && n.colspan && n.colspan > 1) {\r\n\r\n                    if (n['halign']) {\r\n                        n.hAlign = n['halign'];\r\n                    }\r\n\r\n                    this.getDataFields(cols[i + 1], n.colspan).forEach(d => {\r\n                        if (!fields.includes(f => f.field === d.field)) {\r\n                            fields.push(d);\r\n                        }\r\n                    });\r\n                } else {\r\n                    if (!fields.includes(f => f.field === n.field)) {\r\n                        fields.push(n);\r\n                    }\r\n                }\r\n            });\r\n        }\r\n        return fields.filter(n => !n.colspan || n.colspan === 1);\r\n    }\r\n}\r\n","/*\r\n * @Author: ç¯çç§æ(Lucas Huang)\r\n * @Date: 2019-05-23 10:27:09\r\n * @LastEditors: ç¯çç§æ(Lucas Huang)\r\n * @LastEditTime: 2019-09-02 09:08:25\r\n * @QQ: 1055818239\r\n * @Version: v0.0.1\r\n */\r\nimport { TreeTableComponent } from './treetable.component';\r\nimport { RowNode } from './types/treenode';\r\n\r\nexport class VirtualizedLoaderService {\r\n    constructor(private tt: TreeTableComponent) {}\r\n\r\n    getTableHeight() {\r\n        return this.tt.height;\r\n    }\r\n    getTableHeaderHeight() {\r\n        return this.tt.headerBox.nativeElement.getBoundingClientRect().height;\r\n    }\r\n    getTableBodyHeight() {\r\n        return this.tt.height - this.getTableHeaderHeight();\r\n    }\r\n    getTableWidth() {\r\n        return this.tt.width;\r\n    }\r\n\r\n    getRowHeight() {\r\n        return this.tt.rowHeight;\r\n    }\r\n\r\n\r\n    getRowNodes(scrollTop: number) {\r\n        let top = 0;\r\n        const rows = [];\r\n        let topHideHeight = 0;\r\n        let bottomHideHeight = 0;\r\n        \r\n\r\n        const rowNodes = this.tt.getCurrentAllRowNodes();\r\n\r\n        // const {rowNodes } = this.tt.state;\r\n        const rowHeight = this.getRowHeight();\r\n        const minTop = scrollTop;\r\n        const maxTop = minTop + this.getTableHeight() + rowHeight;\r\n        for (let i = 0; i < rowNodes.length; i++) {\r\n            const n: RowNode = rowNodes[i];\r\n            if ( !n.visible) {\r\n                continue;\r\n            }\r\n            top += rowHeight;\r\n            if (top + rowHeight < minTop) {\r\n                topHideHeight += rowHeight;\r\n                continue;\r\n            } else {\r\n                if (top > maxTop) {\r\n                    bottomHideHeight += rowHeight;\r\n                    continue;\r\n                }\r\n            }\r\n\r\n            rows.push(n);\r\n        }\r\n\r\n        return {\r\n            data: rows,\r\n            topHideHeight,\r\n            bottomHideHeight\r\n        };\r\n    }\r\n}\r\n","import { extend } from 'lodash-es';\r\n/*\r\n * @Author: ç¯çç§æ(lucas huang)\r\n * @Date: 2018-12-18 13:38:51\r\n * @LastEditors: ç¯çç§æ(Lucas Huang)\r\n * @LastEditTime: 2019-11-15 15:13:56\r\n * @Company: Inspur\r\n * @Version: v0.0.1\r\n */\r\nimport { TreeTableComponent } from './treetable.component';\r\nimport { RowNode, TreeNode } from './types/treenode';\r\nimport { cloneDeep } from 'lodash-es';\r\nexport class SearchHandle {\r\n    allNodes = [];\r\n    constructor(private ttInstance: TreeTableComponent) {\r\n    }\r\n\r\n    // å·æ°æ¥è¯¢ç»æ\r\n    research(from: 'client'|'server' = 'client' ) {\r\n        const { field, value } = this.ttInstance.searchData;\r\n        this.allNodes = [];\r\n        this.search(field, value, from);\r\n    }\r\n\r\n    search(field: string, value: string, from: 'client'|'server' = 'client'): any {\r\n        if (!this.allNodes.length) {\r\n            this.allNodes = cloneDeep(this.ttInstance.state.rowNodes);\r\n        }\r\n        switch (from) {\r\n            case 'server':\r\n                this.searchOnServer(field, value);\r\n                break;\r\n            default:\r\n                if (value !== '' && value !== undefined) {\r\n                    const values = this.searchOnClient(field, value, this.allNodes);\r\n                    this.ttInstance.state.searchRowNodes = null;\r\n                    this._updateSerializedValues(values);\r\n                } else {\r\n                    this.ttInstance.updateSerializedValue();\r\n                }\r\n\r\n                if (this.ttInstance.checkeds && this.ttInstance.checkeds.length) {\r\n                    this.ttInstance.checkedNodes(this.ttInstance.checkeds.map(n => n.data[this.ttInstance.idField]));\r\n                } else {\r\n                    this.ttInstance.resize();\r\n                    this.ttInstance.detectChanges();\r\n                    if (this.ttInstance.psRef) {\r\n                        this.ttInstance.psRef.directiveRef.update();\r\n                    }\r\n                }\r\n                break;\r\n        }\r\n    }\r\n\r\n    private _updateSerializedValues(visibleItems: RowNode[]) {\r\n        const pids = (visibleItems.map(n => [...n.parents, n.id]) as any).flat();\r\n        const pidArr = Array.from(new Set(pids));\r\n\r\n        const rowNodes =  this.allNodes.filter(n => pidArr.some(item=>item==n.id)).map(r => {\r\n            r.expanded = true;\r\n            this.ttInstance.updateNodeProperty(r.id, {expanded: true });\r\n            return r;\r\n        });\r\n\r\n        this.ttInstance.serializedValue = this.resetTreeData(null, rowNodes);\r\n        this.ttInstance.state.searchRowNodes = this.ttInstance.serializedValue;\r\n    }\r\n\r\n    findParent(item: TreeNode, allNodes: any[]) {\r\n        let res = [];\r\n        if (item && allNodes && allNodes.length) {\r\n            const p = allNodes.find(t1 => t1.id === item.data[this.ttInstance.idField]);\r\n            res.push(p);\r\n            if (p.parent) {\r\n                res = res.concat(this.findParent(p.parent, allNodes));\r\n            }\r\n        }\r\n        return res;\r\n    }\r\n\r\n    private searchExpression(item: RowNode, value: string, fields: string[] = []) {\r\n        const _fields = fields.length ? fields : this.ttInstance.columns.map(c => c.field);\r\n        const results = _fields.map(f => {\r\n            const targetValue = '' +   this.getValue(f, item.node.data);\r\n            if (targetValue !== undefined) {\r\n                if (typeof targetValue === 'number') {\r\n                    return targetValue === parseFloat(value);\r\n                } else {\r\n                    return targetValue.indexOf(value) > -1;\r\n                }\r\n            } else {\r\n                this.ttInstance.writeConsole(`ä¸å­å¨å ${f}`);\r\n            }\r\n        });\r\n\r\n        return results.reduce((flag, curr) => {\r\n            return flag || curr;\r\n        }, false);\r\n    }\r\n\r\n    private getValue(field, data) {\r\n        if (field) {\r\n            if (field.indexOf('.') > -1) {\r\n                try {\r\n                return field.split('.').reduce( (r, f) => {\r\n                    if (r) {\r\n                        return r[f];\r\n                    } else {\r\n                        return null;\r\n                    }\r\n                }, data );\r\n            } catch {\r\n                this.ttInstance.writeConsole(`å­æ®µ ${field} ä¸å­å¨ã`)\r\n            }\r\n            } else {\r\n                return data[field];\r\n            }\r\n        }\r\n    }\r\n\r\n    getFindTextTotal(field: string, value: string, nodes: RowNode[]) {\r\n        let t = 0;\r\n        const getCount = (fields): any => {\r\n            let c = 0;\r\n            nodes.forEach(n => {\r\n                fields.forEach(f => {\r\n                    const targetValue = '' +   this.getValue(f, n.node.data);\r\n                    if (targetValue !== undefined) {\r\n                        if (targetValue.indexOf(value) > -1) {\r\n                            c++;\r\n                        }\r\n                    }\r\n                });\r\n            });\r\n            return c;\r\n        };\r\n        let _fields = [field];\r\n        if (field === '*') {\r\n            _fields = this.ttInstance.columns.map(c => c.field);\r\n\r\n        } else if (field.indexOf(',') > -1) {\r\n            _fields = field.split(',').map(f => f.trim());\r\n        }\r\n\r\n        t = getCount(_fields);\r\n        return t;\r\n    }\r\n\r\n    searchOnClient(field: string, value: string, nodes: RowNode[]) {\r\n        let resultNodes: RowNode[] = [];\r\n        if (!value) {\r\n            return [];\r\n        }\r\n        if (field === '*') {\r\n            resultNodes = nodes.filter(n => this.searchExpression(n, value));\r\n        } else if (field.indexOf(',') > -1) {\r\n            resultNodes = nodes.filter(n => this.searchExpression(n, value, field.split(',').map(f => f.trim())));\r\n        } else {\r\n            value = value.toLowerCase();\r\n            if (field.indexOf('.') === -1) {\r\n                resultNodes = nodes.filter(n => ('' + n.node.data[field]).toLowerCase().indexOf(value) > -1);\r\n            } else {\r\n                resultNodes = nodes.filter(n => ('' + this.getValue(field, n.node.data)).toLowerCase().indexOf(value) > -1);\r\n            }\r\n        }\r\n\r\n        return resultNodes;\r\n    }\r\n\r\n    findParents(rowNodes, allNodes) {\r\n        let res = [];\r\n        rowNodes.forEach(item => {\r\n            res = res.concat(this.findParent(item.node, allNodes));\r\n        });\r\n\r\n        return Array.from(new Set(res));\r\n    }\r\n\r\n    private resetTreeData(parentNode: RowNode, visibleItems: RowNode[]) {\r\n        let res = [];\r\n        let arr = [];\r\n        if (parentNode === null) {\r\n            arr = visibleItems.filter(t2 => t2.parent === parentNode);\r\n        } else {\r\n            parentNode.node.expanded = true;\r\n            arr = visibleItems.filter(t2 => t2.parent && t2.parent.data[this.ttInstance.idField] === parentNode.id);\r\n            if (!arr.length) {\r\n                parentNode.node.children = [];\r\n            } else {\r\n                parentNode.node.children = arr.map( tn => tn.node );\r\n            }\r\n        }\r\n        arr.forEach( a => {\r\n            a.visible = true;\r\n            res.push(a);\r\n            res = res.concat(this.resetTreeData(a, visibleItems));\r\n        });\r\n        return res;\r\n    }\r\n\r\n    private searchOnServer(field: string, value: string) {\r\n\r\n    }\r\n\r\n}\r\n","import { switchMap, takeUntil } from 'rxjs/operators';\r\n/*\r\n* @Author: ç¯çç§æ(lucas huang)\r\n * @Date: 2018-12-18 18:44:13\r\n * @LastEditors: ç¯çç§æ(Lucas Huang)\r\n * @LastEditTime: 2019-11-29 08:41:39\r\n * @Company: Inspur\r\n * @Version: v0.0.1\r\n */\r\n\r\nimport {\r\n    Component, OnInit, Input, TemplateRef, Directive,\r\n    ContentChildren, QueryList, AfterContentInit, OnDestroy,\r\n    HostListener, Output, EventEmitter, ElementRef, Injector,\r\n    ViewChild, Optional, Self, AfterViewInit, NgZone, Renderer2, ViewEncapsulation,\r\n    OnChanges, SimpleChanges, AfterViewChecked, ChangeDetectionStrategy, ChangeDetectorRef, DoCheck, HostBinding\r\n} from '@angular/core';\r\n\r\nimport { FarrisTemplateDirective, CommonUtils, IdService, FarrisComponentInstanceService, DebugService } from '@farris/ui-common';\r\nimport { ResizeService } from '@farris/ui-common/events';\r\nimport { ColumnFormatService, ColumnFormatter } from '@farris/ui-common/column';\r\nimport { InputGroupComponent } from '@farris/ui-input-group';\r\nimport { LocaleService } from '@farris/ui-locale';\r\nimport { PerfectScrollbarComponent } from '@farris/ui-perfect-scrollbar';\r\n\r\nimport { Subscription, Observable, of, BehaviorSubject, Subject, timer } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\nimport { cloneDeep, extend, remove } from 'lodash-es';\r\nimport ResizeObserver from 'resize-observer-polyfill';\r\n\r\nimport { TreeTableColumn } from './types/treetable-column';\r\nimport { VirtualizedLoaderService } from './virtualized-loader.service';\r\nimport { TreeNode, RowNode, SelectEventArgs } from './types/treenode';\r\nimport { TreetableService } from './treetable.service';\r\nimport { SearchHandle } from './search.handle';\r\nimport { TTHotkeys } from './hotkeys';\r\nimport { PaginationInstance } from '@farris/ui-pagination';\r\n\r\n\r\n/** ååæ ¼ç¹äºä»¶åæ° */\r\nexport interface CellClickParam {\r\n    event: Event;\r\n    col: TreeTableColumn;\r\n    node: TreeNode;\r\n}\r\n/** èç¹é©éäºä»¶ */\r\nexport interface NodeCheckedParam {\r\n    originalEvent?: any;\r\n    node: TreeNode | TreeNode[];\r\n    nodes?: any[];\r\n    instance: TreeTableComponent;\r\n}\r\n\r\nexport interface NodeSelectedParam {\r\n    originalEvent?: Event;\r\n    node: TreeNode | TreeNode[];\r\n    type?: 'row' | 'checkbox';\r\n    index?: number;\r\n    parents?: any[];\r\n    instance: TreeTableComponent;\r\n}\r\n\r\nexport type IconFieldType = {\r\n    leaf?: string,\r\n    expand?: string,\r\n    collapse?: string\r\n} | string;\r\n\r\n\r\nconst NODES_PAGER_COLUMN_FIELD = '__nodespagerbar__';\r\n\r\n\r\n@Directive({\r\n    selector: 'tt-column, [tt-column]'\r\n})\r\nexport class TreeTableColumnDirective {\r\n    @Input() field: string;\r\n    @Input() title: string;\r\n    @Input() width?: number;\r\n    @Input() hAlign?: string;\r\n    @Input() align?: string;\r\n    @Input() formatter?: () => any | ColumnFormatter;\r\n}\r\n\r\n@Component({\r\n    selector: 'farris-treetable',\r\n    templateUrl: 'treetable.component.html',\r\n    styles: [`\r\n        .farris-treetable {\r\n            position: relative;\r\n        }\r\n        .resizable-column {\r\n            background-clip: padding-box;\r\n            position: relative;\r\n        }\r\n        .column-resizer {\r\n            display: block;\r\n            position: absolute!important;\r\n            top: 0;\r\n            right: 0;\r\n            margin: 0;\r\n            width: .5em;\r\n            height: 100%;\r\n            padding: 0;\r\n            cursor: col-resize;\r\n            border: 1px solid transparent;\r\n        }\r\n        .column-resizer-helper {\r\n            width: 1px;\r\n            position: absolute;\r\n            z-index: 10;\r\n            display: none;\r\n            border-right: 1px dashed #1890ff;\r\n        }\r\n\r\n        .farris-treetable-disabled .farris-treetable-body .table tr{\r\n            opacity: 0.4;\r\n            cursor: not-allowed;\r\n        }\r\n        .farris-treetable-disabled .table tr.farris-table-selectedrow{\r\n            opacity: 1;\r\n            cursor: default;\r\n        }\r\n\r\n        .custom-checkbox .custom-control-input:indeterminate~.custom-control-label::after {\r\n            background-image: url(\"data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 4 4'%3e%3cpath stroke='%23fff' d='M0 2h4'/%3e%3c/svg%3e\");\r\n            background-color: #1890ff;\r\n        }\r\n        .unselectable-text {\r\n            -webkit-user-select: none;\r\n            -moz-user-select: none;\r\n            -o-user-select: none;\r\n            -ms-user-select: none;\r\n            user-select: none\r\n        }\r\n        .search-highlight {\r\n            background-color: #FFFF1F;\r\n        }\r\n        .search-highlight.active{\r\n            background-color: #FF901C;\r\n        }\r\n\r\n\r\n                \r\n        .f-treetable--fixed-columns .treetable-header-cell {\r\n            vertical-align: middle;\r\n        }\r\n\r\n        .f-treetable--fixed-columns .ps__rail-x,\r\n        .f-treetable--fixed-columns .ps__rail-y {\r\n            z-index: 3;\r\n        }\r\n\r\n        .f-treetable--fixed-left,\r\n        .f-treetable--fixed-right {\r\n            position: sticky !important;\r\n            z-index: 2;\r\n            background-color: #ffffff;\r\n            overflow: inherit !important;\r\n        }\r\n        .treetable-header-cell.f-treetable--fixed-left,\r\n        .treetable-header-cell.f-treetable--fixed-right {\r\n            background-color: #f7f8fb;\r\n        }\r\n\r\n        .f-treetable--fixed-columns\r\n            tr\r\n            th.f-treetable--fixed-left[l-tt-shadow-col]::after,\r\n        .f-treetable--fixed-columns td.f-treetable--fixed-left::after,\r\n        .f-treetable--fixed-right::before {\r\n            pointer-events: none;\r\n            content: \"\";\r\n            width: 36px !important;\r\n            display: inline-block !important;\r\n            position: absolute !important;\r\n            margin-top: 0 !important;\r\n            top: 0 !important;\r\n            height: 100% !important;\r\n            bottom: -1px !important;\r\n            transition: box-shadow 0.2s cubic-bezier(0.4, 0, 0.2, 1);\r\n            background-color: transparent !important;\r\n        }\r\n\r\n        .f-treetable--fixed-columns\r\n            tr\r\n            th.f-treetable--fixed-left:not([l-tt-shadow-col])::after {\r\n            content: \"\";\r\n            position: absolute;\r\n            right: 0;\r\n            top: 50%;\r\n            margin-top: calc(-1.125rem / 2);\r\n            display: block;\r\n            height: 1.125rem;\r\n            width: 1px;\r\n            background-color: #e6e9f0;\r\n            box-shadow: none;\r\n        }\r\n\r\n        .f-treetable--fixed-columns\r\n            tr\r\n            th.f-treetable--fixed-left[l-tt-shadow-col]::after,\r\n        .f-treetable--fixed-columns tr td.f-treetable--fixed-left::after {\r\n            right: -36px !important;\r\n        }\r\n\r\n        .f-treetable--fixed-columns .f-treetable--fixed-right::before {\r\n            left: -36px !important;\r\n        }\r\n\r\n        .f-treetable--fixed-columns .table-hover tbody tr:hover td {\r\n            background-color: #edf5ff;\r\n        }\r\n\r\n        .f-treetable--fixed-columns\r\n            .farris-treetable-tbody\r\n            tr.farris-table-selectedrow\r\n            td {\r\n            background-color: #dae9ff;\r\n            color: #424347;\r\n        }\r\n\r\n        .f-treetable--fixed-columns\r\n            .farris-treetable-tbody\r\n            tr.f-treetable-disable-row\r\n            td {\r\n            background: #fafafc;\r\n        }\r\n\r\n        .f-treetable--fixed-columns.table-bordered\r\n            tr\r\n            th.f-treetable--fixed-left[l-tt-shadow-col],\r\n        .f-treetable--fixed-columns.table-bordered tr th.f-treetable--fixed-right,\r\n        .f-treetable--fixed-columns.table-bordered tr td.f-treetable--fixed-left,\r\n        .f-treetable--fixed-columns.table-bordered tr td.f-treetable--fixed-right {\r\n            border-right: 0;\r\n            box-shadow: inset -1px 0px 0px #eaecf3;\r\n        }\r\n\r\n        .f-treetable--fixed-columns.table-bordered tr td,\r\n        .f-treetable--fixed-columns.table-bordered tr td {\r\n            border-left: 0;\r\n        }\r\n\r\n    `],\r\n    exportAs: 'treeTable',\r\n    encapsulation: ViewEncapsulation.None,\r\n    changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class TreeTableComponent implements OnInit, AfterContentInit, AfterViewInit, OnChanges, AfterViewChecked, OnDestroy {\r\n    id = '';\r\n    /** å®½åº¦ */\r\n    @Input() width = 500;\r\n    /** é«åº¦ */\r\n    @Input() height = 400;\r\n\r\n    @Input() showFilterBar = false;\r\n    /** æ¾ç¤ºæ¥è¯¢å­æ®µ */\r\n    @Input() showSearchField = true;\r\n\r\n    @Input() headerHeight = 35;\r\n    /** è¡¨å¤´æè¡ */\r\n    @Input() headerWrap = false;\r\n    /** è¡é« */\r\n    @Input() rowHeight = 29;\r\n    /**\r\n     * åä¿¡æ¯\r\n     */\r\n    @Input() columns = [];\r\n    private _groupColumns = [];\r\n    @Input() set groupColumns(cols) {\r\n        this._groupColumns = cols || [];\r\n        this.columns = this.ttService.checkColumnsForGroupHeader(cols.map(cs => [...cs]), this).columns;\r\n    }\r\n    get groupColumns() {\r\n        return this._groupColumns;\r\n    }\r\n    /** å¯ç¨å¤è¡¨å¤´ */\r\n    @Input() useGroupHeader = false;\r\n\r\n    @Input() fitColumns = true;\r\n    @Input() autoFitColumns = false;\r\n\r\n    @Input() searchFields: { label: string, value: string }[];\r\n\r\n    @Input() allColumnsTitle = 'ææå';\r\n\r\n    /** æ¾ç¤ºè¿æ¥çº¿ï¼é»è®¤ä¸º false */\r\n    @Input() showLines = false;\r\n    @Input() showLinesOnHover = false;\r\n    /**\r\n     * æ¯å¦å¯ç¨å¤éã é»è®¤ä¸ºåé\r\n     */\r\n    @Input() multiSelect = false;\r\n    @Input() singleSelect = true;\r\n    /** å¯ç¨å¤éåï¼æ¯å¦æ¾ç¤ºcheckbox */\r\n    @Input() showCheckbox = false;\r\n    /**\r\n     * ä¸»é®å­æ®µ\r\n     */\r\n    @Input() idField: string;\r\n\r\n    /** æ¾ç¤ºè¾¹æ¡çº¿ */\r\n    @Input() showBorder = true;\r\n\r\n    @Input() showCheckAll = true;\r\n\r\n    @Input() showHeader = true;\r\n    /** å¯ç¨æé©¬çº¿ */\r\n    @Input() striped = false;\r\n    /** å¯ç¨é¼ æ åè¿ææ */\r\n    @Input() hovered = true;\r\n    /** ç¦ç¨ã ç¦ç¨æ¶ä¸åè®¸éä¸­è¡ */\r\n    @Input() disabled = false;\r\n    /** ç¦å¡èç¹éä¸­ */\r\n    @Input() disabledRow: (param: { node: TreeNode, instance: TreeTableComponent }) => boolean;\r\n\r\n    /** æ°æ®å è½½æ¹å¼; é»è®¤å¼ ä¸º all\r\n     * - all: å¨é¨å è½½\r\n     * - async: åå±å è½½\r\n     */\r\n    @Input() loadDataType: 'all' | 'async' = 'all';\r\n    /** åºå®è¡¨å¤´ */\r\n    @Input() fixedHeader = false;\r\n\r\n    /** å½å¤éæ¶ï¼éä¸­å½åè¡å¹¶é©é */\r\n    @Input() checkOnSelect = false;\r\n    /** å½å¤éæ¶ï¼é©éå¹¶éä¸­å½åè¡ */\r\n    @Input() selectOnCheck = false;\r\n    /**\r\n     * å¯ç¨å¤éæ¶ï¼æ­¤å±æ§ä¸ºtrue æ¶ï¼ä»å½åè¡éä¸­\r\n     */\r\n    @Input() onlySelectSelf = false;\r\n\r\n    /** å¯ç¨åå®½è°æ´ */\r\n    @Input() resizableColumns = true;\r\n    /** è®¾ç½®ä¸ºtrueæ¶èªéåºç¶å®¹çå°ºå¯¸ */\r\n    @Input() fit = false;\r\n\r\n    /** å¯ç¨çº§èéä¸­åè½ */\r\n    @Input() cascadeCheck = true;\r\n    /** åä¸çº§èéä¸­ */\r\n    @Input() cascadeDown = true;\r\n    /** åä¸çº§èéä¸­ */\r\n    @Input() cascadeUp = true;\r\n    /** ç©ºæ°æ®æ¶ï¼æ¾ç¤ºçæç¤ºææ¬ */\r\n    @Input() emptyMessage = 'ææ æ°æ®';\r\n    /** ç¼©è¿é´è·ï¼é»è®¤ä¸º 16px */\r\n    @Input() indentSpacing = 16;\r\n\r\n    /**\r\n     * åå»è¡éä¸­åï¼å¨æ¬¡ç¹å»ä¸ä¼è¢«åæ¶éä¸­ç¶æ;\r\n     */\r\n    @Input() keepSelect = true;\r\n    /** èæå è½½ */\r\n    @Input() virtualized = false;\r\n    /**\r\n     * ä»åè®¸éæ©å¶å­èç¹\r\n     * - default: åºç¨æå¡å¨ç«¯ä¼ åçè®¾ç½®ï¼å¦ææå¡å¨ç«¯æ²¡æè®¾ç½®ï¼åä¸ no ä¿æä¸è³ï¼\r\n     * - yes: å¦æå®¢æ·ç«¯è®¾ç½®ä¸º `yes`, æå¡å¨ç«¯çè®¾ç½®å¤±æï¼\r\n     * - no: åè®¸éæ©ææèç¹ï¼æå¡å¨ç«¯è®¾ç½®å¤±æ\r\n     */\r\n    @Input() onlySelectLeaf: boolean | 'default' | 'yes' | 'no' = 'default';\r\n\r\n    /** æ¾ç¤ºå¾æ  */\r\n    @Input() showIcon = false;\r\n    /** å¶å­èç¹å¾æ  */\r\n    @Input() leafIcon = 'file';\r\n    /** èç¹å±å¼å¾æ  */\r\n    @Input() expandIcon = 'folder-open';\r\n    /** èç¹æå å¾æ  */\r\n    @Input() collapseIcon = 'folder';\r\n\r\n    @Input() foldIcon = 'treetable-toggler';\r\n    @Input() unfoldIcon = 'extanded treetable-toggler';\r\n\r\n    /** å¯ç¨èç¹å¾æ ä»æ°æ®ä¸­è·åã é»è®¤ä¸º false */\r\n    @Input() useIconFromData = false;\r\n    /** å½æ°æ®æºä¸­iconæªè®¾ç½®æ¶ä½¿ç¨åç½®ICON. é»è®¤ä¸º true */\r\n    @Input() whenDataIconEmptyUseDefault = true;\r\n    /** ä»æ°æ®æºå­æ®µä¸­è·åå¾æ  */\r\n    @Input() iconField: IconFieldType = '';\r\n    /** å¾æ èªå®ä¹æ ·å¼ */\r\n    @Input() iconCls: string;\r\n\r\n    /** å¯ç¨è¿ç«¯æåº */\r\n    @Input() remoteSort = true;\r\n    /** æåºå­æ®µ */\r\n    @Input() sortName: string;\r\n    /** æåºæ¹å¼ asc | desc */\r\n    @Input() sortOrder: string;\r\n    /** åè®¸å¤åæåº */\r\n    @Input() multiSort: boolean;\r\n\r\n    @Input() beforeSortColumn: (field: string, order: string) => Observable<boolean>;\r\n\r\n    @Input() rowStyler: (treeNode: TreeNode, field?: string) => any;\r\n    @Input() cellStyler: (treeNode: TreeNode, field: string) => any;\r\n\r\n    /** å¯ç¨åç«¯ææ¬æ¥æ¾ */\r\n    @Input() enableFindText = false;\r\n    /** ææ¬æ¥è¯¢å­æ®µ, å¼ç¨ */\r\n    @Input() findField: string;\r\n    // æ åè¡¨é»è®¤å±å¼å±çº§ã -1ï¼ ä¸å±å¼ï¼ 0ï¼ å¨é¨å±å¼ï¼ >0:  å±å¼å°æå®çº§æ°ï¼\r\n    @Input() expandLevel = -1;\r\n\r\n    @Input() selectValue = '';\r\n    @Output() selectValueChange = new EventEmitter();\r\n    /** å¯ç¨åå»å±å¼èç¹ */\r\n    @Input() dblClickExpand = true;\r\n\r\n    /** éä¸­èç¹IDæ°ç» */\r\n    @Input() selectValues = [];\r\n    @Output() selectValuesChange = new EventEmitter();\r\n    /** æ¯å¦ç¦æ­¢æè¡ï¼é»è®¤ä¸æè¡ */\r\n    @Input() nowrap = true;\r\n\r\n    @Input() checkValues = [];\r\n    @Output() checkValuesChange = new EventEmitter();\r\n\r\n\r\n    @Input() beforeNodeSelected: (e: any) => Observable<boolean>;\r\n    @Input() beforeNodeUnSelected: () => Observable<boolean>;\r\n\r\n    @Input() beforeNodeChecked: () => Observable<boolean>;\r\n    @Input() beforeNodeUnChecked: () => Observable<boolean>;\r\n\r\n    @Input() beforeCheckAll: (e?: any) => Observable<boolean>;\r\n    @Input() beforeUnCheckAll: (e?: any) => Observable<boolean>;\r\n\r\n    @Input() beforeClickNode: (e?: any) => Observable<boolean>;\r\n\r\n    /** åé¡µä¿¡æ¯ */\r\n    @Input() pagination = false;\r\n    /** åé¡µå è½½å­èç¹æ°æ® */\r\n    @Input() paginationForChildren = false;\r\n    /** åé¡µæ¡æ¾ç¤ºæ¨¡å¼ï¼ default, simple */\r\n    @Input() pagerViewMode = 'default';\r\n    /** å¯ç¨æå¡å¨ç«¯åé¡µ */\r\n    @Input() pagerOnServer = true;\r\n    /** æ¯é¡µè®°å½æ° */\r\n    @Input() pageList = [10, 20, 30, 50, 100];\r\n    /** å½åé¡µç  */\r\n    @Input() pageIndex = 1;\r\n    /** æ¯é¡µè®°å½æ° */\r\n    @Input() pageSize = 20;\r\n    /** åé¡µåºé«åº¦ */\r\n    @Input() pagerHeight = 56;\r\n    /** æ¾ç¤ºæ¯é¡µè®°å½æ° */\r\n    @Input() showPageList = false;\r\n    /** æ¾ç¤ºåé¡µä¿¡æ¯ */\r\n    @Input() showPageInfo = true;\r\n    /** æ¾ç¤ºé¡µç  */\r\n    @Input() showPageNumber = true;\r\n    /** æ¾ç¤ºé¡µç æå¤§æ°é */\r\n    @Input() pagerLabelSize = 7;\r\n    /** æ¾ç¤ºé¡µç è¾å¥æ¡ */\r\n    @Input() showGotoInput = false;\r\n    /** å­èç¹åé¡µæ¯å¦æ¾ç¤ºæ»è®°å½æ°ï¼é»è®¤ false */\r\n    @Input() showTotalForChildren = false;\r\n    /** æ»è®°å½æ° */\r\n    @Input() total = 0;\r\n\r\n\r\n    @Input() enableContextMenu = false;\r\n    @Input() contextMenuItems = [];\r\n    @Input() beforeShowContextMenu: (e: { [key: string]: any }) => Observable<{ show: boolean, menus: Array<any>}>;\r\n\r\n    @Output() pageSizeChanged = new EventEmitter();\r\n    @Output() pageChanged = new EventEmitter();\r\n\r\n    /** æåºå */\r\n    @Output() columnSorted = new EventEmitter();\r\n    /** éä¸­äºä»¶ */\r\n    @Output() nodeSelected: EventEmitter<NodeSelectedParam> = new EventEmitter();\r\n    /** åæ¶éä¸­äºä»¶ */\r\n    @Output() nodeUnSelect: EventEmitter<NodeSelectedParam> = new EventEmitter();\r\n\r\n    /** é©é */\r\n    @Output() nodeChecked: EventEmitter<NodeCheckedParam> = new EventEmitter();\r\n    /** åæ¶é©é */\r\n    @Output() nodeUnChecked: EventEmitter<NodeCheckedParam> = new EventEmitter();\r\n\r\n    /** å¨éäºä»¶ */\r\n    @Output() checkAll: EventEmitter<any> = new EventEmitter();\r\n    /** åæ¶å¨é */\r\n    @Output() unCheckAll: EventEmitter<any> = new EventEmitter();\r\n    /** æ¥è¯¢ */\r\n    @Output() search: EventEmitter<any> = new EventEmitter();\r\n\r\n    @Output() dblClick: EventEmitter<any> = new EventEmitter();\r\n\r\n    @Output() loadedData: EventEmitter<any> = new EventEmitter();\r\n\r\n    @Output() expand: EventEmitter<TreeNode> = new EventEmitter();\r\n    @Output() collapse: EventEmitter<TreeNode> = new EventEmitter();\r\n\r\n    @Output() expandAllNodes: EventEmitter<any> = new EventEmitter();\r\n    @Output() collapseAllNodes: EventEmitter<any> = new EventEmitter();\r\n\r\n    @Output() appendNew: EventEmitter<any> = new EventEmitter();\r\n    @Output() removed: EventEmitter<any> = new EventEmitter();\r\n    @Output() updated: EventEmitter<any> = new EventEmitter();\r\n\r\n    @Output() clearSearchValue = new EventEmitter();\r\n    @Output() cellClick = new EventEmitter<CellClickParam>();\r\n    @Output() childsPageChanged = new EventEmitter();\r\n\r\n    @Input() loadedTimer = 100;\r\n\r\n    serializedValue: RowNode[];\r\n\r\n    _data: TreeNode[] = [];\r\n    get data(): any[] {\r\n        return this._data;\r\n    }\r\n    @Input() set data(val: any[]) {\r\n        this._data = val;\r\n        this.updateSerializedValue();\r\n        this.initNodeStatus();\r\n        // autowidth æ¶ï¼è¡¨å¤´å®½åº¦ä¾æ®åå®¹å®½åº¦ä½åæ­¥å¤ç\r\n        this.setNewColumnsWidth();\r\n\r\n        this.loadDataSuccess();\r\n    }\r\n    /** æ ¹æ®åå®¹èªå¨å®½åº¦ï¼é»è®¤ false;\r\n     * æ­¤å±æ§å¼å¯åï¼èªå¨åå®½å¤±æ\r\n     */\r\n    @Input() autoWidth = false;\r\n\r\n    @ContentChildren(FarrisTemplateDirective) templates: QueryList<FarrisTemplateDirective>;\r\n    @ContentChildren(TreeTableColumnDirective) columnsRef: QueryList<TreeTableColumnDirective>;\r\n\r\n    @ViewChild('headerBox') headerBox: ElementRef;\r\n    @ViewChild('resizerHelper') resizerHelperVC: ElementRef;\r\n    @ViewChild('headerTable') headerTable: ElementRef;\r\n    @ViewChild('bodyTable') bodyTable: ElementRef;\r\n\r\n    @ViewChild('inputGroup') inputGroup: InputGroupComponent;\r\n    @ViewChild(PerfectScrollbarComponent) psRef?: PerfectScrollbarComponent;\r\n\r\n    private headerCheckboxCmp: TreeTableHeaderCheckboxComponent;\r\n    @ViewChild('allCheckbox') set allCheckbox(content: TreeTableHeaderCheckboxComponent) {\r\n        this.headerCheckboxCmp = content;\r\n    }\r\n\r\n    @ViewChild('nodespagerbar') nodesPagerBar: TemplateRef<any>;\r\n\r\n    /**\r\n     * è¡¨å¤´æ¨¡æ¿\r\n     */\r\n    headerTemplate: TemplateRef<any>;\r\n\r\n    /**\r\n     * è¡¨ä½æ¨¡æ¿\r\n     */\r\n    bodyTemplate: TemplateRef<any>;\r\n\r\n    /** éä¸­é¡¹éå */\r\n    private _selections = [];\r\n    get selections(): TreeNode[] {\r\n        return this._selections;\r\n    }\r\n    set selections(vals: TreeNode[]) {\r\n        if (vals && vals.length) {\r\n            // è¿æ»¤ææ°æ®æºä¸­ä¸å­å¨èç¹\r\n            this._selections = vals.filter(tn => tn && this.findRowNode(tn.id));\r\n            const ids = this._selections.map(tn => tn.id);\r\n\r\n            if (ids.length !== this.selectValues.length ||\r\n                (ids.length === this.selectValues.length && this.difference(ids, this.selectValues).length)) {\r\n                this.selectValues = ids;\r\n                setTimeout(() => {\r\n                    this.selectValuesChange.emit(ids);\r\n                });\r\n            }\r\n        } else {\r\n            this._selections = [];\r\n            this.selectValues = [];\r\n            this.selectValuesChange.emit([]);\r\n\r\n        }\r\n    }\r\n    /**\r\n     * éä¸­é¡¹ç´¢å¼\r\n     */\r\n    selectRowIndex = -1;\r\n\r\n    /** éä¸­å½åè¡ */\r\n    private _selectedRow = null;\r\n    get selectedRow(): TreeNode {\r\n        return this._selectedRow;\r\n    }\r\n\r\n    set selectedRow(treeNode: TreeNode) {\r\n        this._selectedRow = treeNode;\r\n        if (treeNode) {\r\n            if (this.selectValue !== treeNode.id) {\r\n                this.selectValue = treeNode.id;\r\n                this.selectValueChange.emit(treeNode.id);\r\n            }\r\n        } else {\r\n            this.selectValue = null;\r\n            this.selectValueChange.emit(null);\r\n        }\r\n    }\r\n\r\n\r\n    /** é©éçè®°å½éå */\r\n    private _checkeds = [];\r\n    get checkeds(): TreeNode[] {\r\n        return this._checkeds;\r\n    }\r\n    set checkeds(treeNodes: TreeNode[]) {\r\n        if (treeNodes && treeNodes.length) {\r\n            this._checkeds = treeNodes.filter(tn => this.findRowNode(tn.id));\r\n            const ids = this._checkeds.map(tn => tn.id);\r\n            this.checkValues = this.checkValues || [];\r\n            if (ids.length !== this.checkValues.length ||  (ids.length === this.checkValues.length && this.difference(ids, this.checkValues).length)) {\r\n                this.checkValues = ids;\r\n                setTimeout(() => {\r\n                    this.checkValuesChange.emit(ids);\r\n                });\r\n            }\r\n        } else {\r\n            this._checkeds = [];\r\n            this.checkValues = [];\r\n            this.checkValuesChange.emit([]);\r\n        }\r\n    }\r\n\r\n    // æå¤å±DIV\r\n    containerElement: HTMLDivElement;\r\n\r\n    // è®°å½åæå¨åçä½ç½®\r\n    lastResizerHelperX: number;\r\n\r\n    searchData = { field: '*', value: '' };\r\n\r\n    scorllBodyHeight: number;\r\n\r\n    searchHandle: SearchHandle;\r\n    searchButtonText = '<i class=\"f-icon f-icon-search\"></i>';\r\n    /** æ¾ç¤ºæ¥è¯¢å·¥å·æ¡ */\r\n    showFindInput = false;\r\n\r\n    private isDataChanged = false;\r\n\r\n    scrollLoader: VirtualizedLoaderService;\r\n    topHideHeight = 0;\r\n    bottomHideHeight = 0;\r\n    state = {\r\n        searchRowNodes: null,\r\n        searched: false,\r\n        rowNodes: [],\r\n        scrollY: 0,\r\n        scrollX: 0\r\n    };\r\n\r\n    /** å¾æ¥è¯¢çææ¬ */\r\n    findValue = '';\r\n    /** ç»ææ»æ° */\r\n    findCount = 0;\r\n    /** å½åç´¢å¼ */\r\n    findCurrent = 0;\r\n    /** å­å¨ææ¬æ¥è¯¢ç»æ */\r\n    findResult = [];\r\n    private ro: ResizeObserver | null = null;\r\n    private findKeysHandler = null;\r\n    private _hotKeys: TTHotkeys = null;\r\n    localeService: LocaleService;\r\n    private idService: IdService;\r\n    private styleSheetId = 'treetable-style-';\r\n    private styleElement;\r\n    paginationOptions: PaginationInstance = {\r\n        id: 'Farris-TreeTable-Pagination_',\r\n        itemsPerPage: this.pageSize,\r\n        currentPage: this.pageIndex,\r\n        pageList: this.pageList,\r\n        totalItems: this.total,\r\n        remote: this.pagerOnServer\r\n    };\r\n\r\n    selectNodeChangedSubject = new BehaviorSubject(null);\r\n    private _UUID = '';\r\n    // æ¯å¦æåºå®å\r\n    fixedColumns = false;\r\n    private destroy$ = new Subject();\r\n    private farrisInstances: FarrisComponentInstanceService = null;\r\n    difference = (first: any[], second: any[]) => first.filter(item => !second.some(secondItem => secondItem == item));\r\n    private debugSer: DebugService = null;\r\n    constructor(\r\n        public ttService: TreetableService, public el: ElementRef,\r\n        public resizeSer: ResizeService, private renderer: Renderer2,\r\n        public utils: CommonUtils, public colFormatSer: ColumnFormatService,\r\n        private shortcuts: TTHotkeys, private cdRef: ChangeDetectorRef,\r\n        private ngZone: NgZone, private injector: Injector) {\r\n        this.searchHandle = new SearchHandle(this);\r\n        this.scrollLoader = new VirtualizedLoaderService(this);\r\n        if (this.injector) {\r\n            this._hotKeys = this.injector.get(TTHotkeys, null);\r\n            this.localeService = this.injector.get(LocaleService, null);\r\n            this.idService = this.injector.get(IdService, null);\r\n            this.farrisInstances = this.injector.get(FarrisComponentInstanceService, null);\r\n        }\r\n        if (this.idService) {\r\n            this._UUID = this.idService.uuid();\r\n            this.styleSheetId += this.idService.uuid();\r\n        } else {\r\n            this._UUID = ('' + Math.random()).slice(2);\r\n            this.styleSheetId += ('' + Math.random()).slice(2);\r\n        }\r\n\r\n        this.ttService = new TreetableService();\r\n\r\n        this.debugSer = this.injector.get(DebugService, null);\r\n\r\n        if (this.debugSer) {\r\n            this.debugSer.useDebugMode();\r\n        }\r\n    }\r\n\r\n    writeConsole(msg, type: 'info'|'log'|'warn'|'error' = 'warn') {\r\n        if (this.debugSer) {\r\n            this.debugSer[type](msg);\r\n        }\r\n    }\r\n\r\n    private checkOptons() {\r\n        // å¯ç¨æ°æ®æè¡åï¼èææ¸²æåè½å¤±æ\r\n        if (!this.nowrap) {\r\n            this.virtualized = false;\r\n        }\r\n\r\n        setTimeout(() => {\r\n            this.reSetSize();\r\n            this.setScorllBodyHeight();\r\n        });\r\n\r\n        if (this.multiSelect) {\r\n            this.singleSelect = false;\r\n        }\r\n\r\n        if (this.singleSelect && this.showCheckbox) {\r\n            this.checkOnSelect = true;\r\n            this.selectOnCheck = true;\r\n        }\r\n\r\n        if (!this.beforeSortColumn) {\r\n            this.beforeSortColumn = () => of(true);\r\n        }\r\n\r\n        if (this.fit) {\r\n            this.renderer.addClass(this.el.nativeElement, 'f-utils-fill-flex-column');\r\n            const parentEl = this.el.nativeElement.parentElement || this.el.nativeElement.parentNode;\r\n            if (parentEl) {\r\n                // this.renderer.addClass(parentEl, 'f-utils-fill');\r\n                this.renderer.setStyle(parentEl, 'overflow', 'hidden');\r\n            }\r\n        }\r\n\r\n        if (!this.beforeClickNode) {\r\n            this.beforeClickNode = () => of(true);\r\n        }\r\n\r\n        if (!this.beforeCheckAll) {\r\n            this.beforeCheckAll = () => of(true);\r\n        }\r\n\r\n        if (!this.beforeUnCheckAll) {\r\n            this.beforeUnCheckAll = () => of(true);\r\n        }\r\n\r\n        if (this.autoWidth) {\r\n            this.fitColumns = false;\r\n            this.resizableColumns = false;\r\n        }\r\n\r\n        if (!this.disabledRow) {\r\n            this.disabledRow = () => false;\r\n        }\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.id = 'Treetable-' + this._UUID;\r\n        // åå»º stylesheet\r\n        this.styleElement = this.utils.createStyleSheet(this.styleSheetId);\r\n        this.checkColumnOption();\r\n\r\n        this.checkOptons();\r\n\r\n        if (this.ngZone) {\r\n            this.ngZone.runOutsideAngular(() => {\r\n                if (this.el.nativeElement.parentElement) {\r\n                    this.ro = new ResizeObserver((entries, observer) => {\r\n                        if (entries && entries[0]) {\r\n                            const { width, height } = entries[0].contentRect;\r\n                            const target =  entries[0].target;\r\n\r\n                            if (this.fit && target['offsetParent']) {\r\n                                this.resize({ width, height: this.showBorder? height -2: height });\r\n                            }\r\n                        }\r\n                    });\r\n                    this.ro.observe(this.el.nativeElement.parentElement);\r\n                }\r\n            });\r\n        }\r\n\r\n        this.paginationOptions = this.initPaginationOptions();\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        if (this.ro) {\r\n            if (this.el.nativeElement.parentElement) {\r\n                this.ro.unobserve(this.el.nativeElement.parentElement);\r\n            }\r\n            this.ro.disconnect();\r\n            this.ro = null;\r\n        }\r\n\r\n        if (this.findKeysHandler) {\r\n            this.findKeysHandler.unsubscribe();\r\n        }\r\n\r\n        this.utils.removeStyleSheet(this.styleSheetId);\r\n        this.styleElement = null;\r\n\r\n        if (this.farrisInstances) {\r\n            this.farrisInstances.destroy(this.el.nativeElement);\r\n        }\r\n\r\n        this.ttService = null;\r\n\r\n        this.destroy$.next();\r\n        this.destroy$.complete();\r\n    }\r\n\r\n    ngOnChanges(changes: SimpleChanges) {\r\n        if (changes.data && !changes.data.isFirstChange()) {\r\n            this.isDataChanged = changes.data.currentValue !== changes.data.previousValue;\r\n        }\r\n\r\n        if (changes.multiSelect && !changes.multiSelect.isFirstChange()) {\r\n            this.singleSelect = !changes.multiSelect.currentValue;\r\n            if (this.singleSelect && this.showCheckbox) {\r\n                this.selectOnCheck = true;\r\n                this.checkOnSelect = true;\r\n            }\r\n        }\r\n\r\n        if (changes.disabled && !changes.disabled.isFirstChange()) {\r\n            this.hovered = !changes.disabled.currentValue;\r\n        }\r\n\r\n        if (changes.enableFindText && !changes.enableFindText.isFirstChange()) {\r\n            this.setFindText(changes.enableFindText.currentValue);\r\n        }\r\n\r\n        if (changes.selectValue && !changes.selectValue.isFirstChange()) {\r\n            this.selectNode(changes.selectValue.currentValue);\r\n        }\r\n        if (changes.selectValues && !changes.selectValues.isFirstChange()) {\r\n            this.selectNodes(changes.selectValues.currentValue);\r\n        }\r\n        if (changes.checkValues && !changes.checkValues.isFirstChange()) {\r\n            this.checkedNodes(changes.checkValues.currentValue);\r\n        }\r\n\r\n        if (changes.pageIndex !== undefined && !changes.pageIndex.isFirstChange()) {\r\n            this.paginationOptions = Object.assign(this.paginationOptions, {\r\n                currentPage: this.pageIndex\r\n            });\r\n        }\r\n\r\n        if (changes.pageSize !== undefined && !changes.pageSize.isFirstChange()) {\r\n            this.paginationOptions = Object.assign(this.paginationOptions, {\r\n                itemsPerPage: this.pageSize\r\n            });\r\n        }\r\n\r\n        if (changes.pageList !== undefined && !changes.pageList.isFirstChange()) {\r\n            this.paginationOptions = Object.assign(this.paginationOptions, {\r\n                pageList: this.pageList\r\n            });\r\n        }\r\n\r\n        if (changes.total !== undefined && !changes.total.isFirstChange()) {\r\n            this.paginationOptions = Object.assign(this.paginationOptions, {\r\n                totalItems: this.total\r\n            });\r\n        }\r\n\r\n        if (changes.fitColumns && !changes.fitColumns.isFirstChange()) {\r\n            this.setTableWidth(this.allColumnsWidth());\r\n        }\r\n\r\n        if (changes.columns && !changes.columns.isFirstChange()) {\r\n            this.checkColumnOption();\r\n        }\r\n\r\n        if (changes.showBorder && !changes.showBorder.isFirstChange()) {\r\n            // this.reSetSize();\r\n        }\r\n    }\r\n\r\n    ngAfterViewChecked() {\r\n        // if (this.isDataChanged) {\r\n        //     this.loadedData.emit();\r\n        //     this.isDataChanged = false;\r\n        // } else {\r\n        //     this.ngZone.runOutsideAngular(() => {\r\n        //         if (this.psRef) {\r\n        //             this.psRef.directiveRef.update();\r\n        //         }\r\n        //     });\r\n        // }\r\n    }\r\n\r\n    ngAfterContentInit() {\r\n        this.templates.forEach((item) => {\r\n            switch (item.getType()) {\r\n                case 'header':\r\n                    this.headerTemplate = item.template;\r\n                    break;\r\n                case 'body':\r\n                    this.bodyTemplate = item.template;\r\n                    break;\r\n            }\r\n        });\r\n\r\n        if (this.columnsRef.length) {\r\n            this.columns = this.ttc2columns(this.columnsRef);\r\n\r\n            this.columnsRef.changes.subscribe((d: any) => {\r\n                this.columns = this.ttc2columns(d);\r\n            });\r\n        }\r\n    }\r\n\r\n    ngAfterViewInit(): void {\r\n        this.containerElement = this.el.nativeElement.querySelector('.farris-treetable');\r\n     \r\n        this.registerShortcuts();\r\n\r\n        // autowidth æ¶ï¼è¡¨å¤´å®½åº¦ä¾æ®åå®¹å®½åº¦ä½åæ­¥å¤ç\r\n        this.setNewColumnsWidth();\r\n        this.setRightFixedColumnShadow();\r\n\r\n        if (this.el && this.farrisInstances) {\r\n            this.farrisInstances.add(this.el.nativeElement, this);\r\n        }\r\n\r\n        if (this.bodyTemplate) {\r\n            this.utils.appendCssRules([`#${this.id} .farris-treetable .farris-treetable-tbody td {padding: .25rem 0.75rem;}`], this.styleElement.sheet);\r\n        }\r\n\r\n        this.loadDataSuccess();\r\n    }\r\n\r\n    private loadDataSuccess() {\r\n        timer(this.loadedTimer).pipe(\r\n            takeUntil(this.destroy$)\r\n        ).subscribe(() => {\r\n            if (this.psRef && this.psRef.directiveRef) {\r\n                this.psRef.directiveRef.update();\r\n            }\r\n            this.loadedData.emit();\r\n        })\r\n    }\r\n\r\n\r\n    private setNewColumnsWidth() {\r\n        if (!this.autoWidth) {\r\n            return;\r\n        }\r\n        const newColWidth: any = {};\r\n        let headerCells = [];\r\n        let firstRowCells = [];\r\n        if (this.showHeader && this.headerTable) {\r\n            headerCells = Array.from<HTMLElement>(this.headerTable.nativeElement.querySelectorAll('th'));\r\n        }\r\n        if (this.serializedValue && this.serializedValue.length && this.bodyTable) {\r\n            firstRowCells = Array.from<HTMLElement>(this.bodyTable.nativeElement.querySelector('tr').querySelectorAll('td'));\r\n        }\r\n\r\n        firstRowCells.forEach((td: any, index) => {\r\n            const fieldName = td.getAttribute('field');\r\n            let colWidth = td.getBoundingClientRect().width.toFixed(2);\r\n            newColWidth[fieldName] = colWidth;\r\n\r\n            const col = this.columns.find(c => c.field === fieldName);\r\n            if (col && col.width !== undefined) {\r\n                colWidth = colWidth > col.width ? colWidth : col.width;\r\n                td.style.minWidth = colWidth + 'px';\r\n            }\r\n            headerCells[index].style.width = colWidth + 'px';\r\n        });\r\n    }\r\n\r\n    columnIsVisible(col) {\r\n        return this.ttService.columnIsVisible(col, this);\r\n    }\r\n\r\n\r\n    private columnCssName(n: any) {\r\n        return `#${this.id} .treetable-cell[field=\"${n.field}\"], #${this.id} .treetable-header-cell[field=\"${n.field}\"]:not(.group-header-cell)`;\r\n    }\r\n\r\n    // æåºå®åçé¡ºåºæåº\r\n    private sortColumnsByFixed(updateColumns = true) {\r\n        const fixedLeft = this.columns.filter(n => n.fixed === 'left');\r\n        const fixedCenter = this.columns.filter(n => !n.fixed || n.fixed === 'center');\r\n        const fixedRight = this.columns.filter(n => n.fixed === 'right');\r\n\r\n        if (fixedLeft && fixedLeft.length) {\r\n            fixedLeft.forEach((n, index) => {\r\n                n.left = index ? fixedLeft[index - 1].width : 0;\r\n            });\r\n        }\r\n\r\n        if (fixedRight && fixedRight.length) {\r\n\r\n            let rightWidthTotal = fixedRight.reduce((r, c) => {\r\n                return r + c.width;\r\n            }, 0);\r\n\r\n            fixedRight.forEach((n, index) => {\r\n                rightWidthTotal -= n.width;\r\n                n.right = rightWidthTotal;\r\n            });\r\n        }\r\n\r\n        if (updateColumns) {\r\n            this.columns = fixedLeft.concat(fixedCenter).concat(fixedRight);\r\n        }\r\n    }\r\n\r\n    private checkColumnOption() {\r\n        const cssRules = [];\r\n        if (!this.fitColumns) {\r\n            this.sortColumnsByFixed();\r\n        }\r\n\r\n        this.columns.forEach((n, i) => {\r\n            if (n.visible === undefined) {\r\n                n.visible = true;\r\n            }\r\n\r\n            if (n['halign']) {\r\n                n.hAlign = n['halign'];\r\n            }\r\n\r\n            if (n.width === undefined) {\r\n                n.width = 100;\r\n            }\r\n\r\n            if (!n.id) {\r\n                n.id = 'treetable-header-' + (n.field || i);\r\n            }\r\n        });\r\n\r\n        const colWidthTotal = this.allColumnsWidth();\r\n        let fixedCols = 0;\r\n\r\n        const fixedRightColumns = this.columns.filter(n => n.fixed === 'right');\r\n        if (fixedRightColumns && fixedRightColumns.length) {\r\n            fixedRightColumns[0]['rightShadowCol'] = true;\r\n            fixedRightColumns[fixedRightColumns.length - 1]['lastColumn'] = true;\r\n        } else {\r\n            if (this.columns && this.columns.length) {\r\n                this.columns[this.columns.length - 1]['lastColumn'] = true;\r\n            }\r\n        }\r\n\r\n        const fixedLeftColumns = this.columns.filter(n => n.fixed === 'left');\r\n        if (fixedLeftColumns && fixedLeftColumns.length) {\r\n            fixedLeftColumns[fixedLeftColumns.length - 1]['leftShadowCol'] = true;\r\n        }\r\n\r\n        this.columns.forEach((n, index) => {\r\n            const isVisible = this.columnIsVisible(n);\r\n            const ruleName = this.columnCssName(n);\r\n\r\n            const cssRule = this.utils.getCssRule(ruleName, this.styleElement.sheet);\r\n            if (!cssRule) {\r\n                let stylecss = ruleName + ' { ';\r\n                stylecss += isVisible ? '' : 'display: none;';\r\n\r\n                if (this.fitColumns) {\r\n                    stylecss += `width: ${(n.width / colWidthTotal * 100).toFixed(2)}%;`;\r\n                } else {\r\n                    stylecss += `width: ${n.width}px;`;\r\n\r\n                    if (n.fixed) {\r\n                        if (n.fixed === 'left') {\r\n                            stylecss += `left: ${n.left}px`;\r\n                            fixedCols++;\r\n                        }\r\n\r\n                        if (n.fixed === 'right') {\r\n                            stylecss += `right: ${n.right}px`;\r\n                            fixedCols++;\r\n                        }\r\n                    }\r\n                }\r\n\r\n                stylecss += '}';\r\n                cssRules.push(stylecss);\r\n            } else {\r\n                cssRule.style.display = isVisible ? '' : 'none';\r\n            }\r\n        });\r\n\r\n        if (cssRules.length) {\r\n            this.utils.appendCssRules(cssRules, this.styleElement.sheet);\r\n        }\r\n\r\n        this.setTableWidth(colWidthTotal);\r\n\r\n\r\n        // å¯ç¨åé¡µå è½½å­èç¹\r\n        if (this.paginationForChildren) {\r\n            this.columns.push({\r\n                field: NODES_PAGER_COLUMN_FIELD,\r\n                width: 160,\r\n                title: '',\r\n                align: 'center',\r\n                template: this.nodesPagerBar\r\n            });\r\n        }\r\n\r\n        this.fixedColumns = !!fixedCols;\r\n    }\r\n\r\n    private setTableWidth(colWidthTotal: number) {\r\n        if (this.headerTable && this.bodyTable) {\r\n            if (!this.fitColumns && !this.autoFitColumns) {\r\n                this.headerTable.nativeElement.style.width = `${colWidthTotal}px`;\r\n                this.bodyTable.nativeElement.style.width = `${colWidthTotal}px`;\r\n            } else {\r\n                this.headerTable.nativeElement.style.width = '100%';\r\n                this.bodyTable.nativeElement.style.width = '100%';\r\n            }\r\n        }\r\n    }\r\n\r\n    private allColumnsWidth() {\r\n        return this.columns.reduce((r, c) => {\r\n            if (this.columnIsVisible(c)) {\r\n                return r + c.width;\r\n            } else {\r\n                return r;\r\n            }\r\n\r\n        }, 0);\r\n    }\r\n\r\n    onPageChange($event) {\r\n        this.pageChanged.emit($event);\r\n    }\r\n\r\n    onPageSizeChange($event) {\r\n        this.pageSizeChanged.emit($event);\r\n    }\r\n\r\n    updatePageInfo(pageInfo: { pageIndex?: number, pageSize?: number, total?: number, pageList?: number[] }) {\r\n        if (pageInfo && Object.keys(pageInfo).length) {\r\n\r\n            const obj: any = {};\r\n            if (pageInfo.total !== undefined) {\r\n                obj.totalItems = pageInfo.total;\r\n            }\r\n\r\n            if (pageInfo.pageIndex !== undefined) {\r\n                obj.currentPage = pageInfo.pageIndex;\r\n            }\r\n\r\n            if (pageInfo.pageSize !== undefined) {\r\n                obj.itemsPerPage = pageInfo.pageSize;\r\n            }\r\n\r\n            if (pageInfo.pageList !== undefined) {\r\n                obj.pageList = pageInfo.pageList;\r\n            }\r\n\r\n            this.paginationOptions = Object.assign(this.paginationOptions, obj);\r\n        }\r\n    }\r\n\r\n\r\n    private initPaginationOptions() {\r\n        return {\r\n            id: 'Farris-TreeTable-Pagination_' + this._UUID,\r\n            itemsPerPage: this.pageSize,\r\n            currentPage: this.pageIndex,\r\n            pageList: this.pageList,\r\n            totalItems: this.total,\r\n            remote: this.pagerOnServer\r\n        };\r\n    }\r\n\r\n    getNodeText(col: TreeTableColumn, rowdata) {\r\n        if (col.isMultilingualField) {\r\n            const val = this.utils.getValue(col.field, rowdata);\r\n            if (this.localeService) {\r\n                const localeId = this.localeService.localeId || 'zh-CHS';\r\n                if (val && typeof val === 'object' && Object.keys(val).length > 0) {\r\n                    return val[localeId];\r\n                } else {\r\n                    return val;\r\n                }\r\n            }\r\n        } else {\r\n            return this.utils.getValue(col.field, rowdata, true);\r\n        }\r\n    }\r\n\r\n    private initNodeStatus() {\r\n        if (!this.singleSelect) {\r\n            if (this.checkValues && this.checkValues.length) {\r\n                this.checkedNodes(this.checkValues, false, false);\r\n            }\r\n            if (this.selectValues && this.selectValues.length && !this.onlySelectSelf) {\r\n                this.selectNodes(this.selectValues, false, false);\r\n            }\r\n        } else {\r\n            if (this.selectValue) {\r\n                this.selectNode(this.selectValue, false);\r\n            }\r\n        }\r\n    }\r\n\r\n    /** æ³¨åå¿«æ·é® */\r\n    private registerShortcuts() {\r\n        if (this.showFilterBar && this._hotKeys) {\r\n            this._hotKeys.addShortcut({ keys: 'enter', element: this.inputGroup.textbox.nativeElement }).subscribe(() => {\r\n                this.onSearch();\r\n            });\r\n        }\r\n\r\n        this.setFindText(this.enableFindText);\r\n    }\r\n\r\n    private setFindText(enable = true) {\r\n        this.enableFindText = enable;\r\n        if (this.enableFindText && this._hotKeys) {\r\n            // æ¥è¯¢å·¥å·æ¡\r\n            this.findKeysHandler = this._hotKeys.addShortcut({ keys: 'control.shift.f' }).subscribe((e) => {\r\n                if (this.enableFindText) {\r\n                    this.showFindInput = true;\r\n                    this.detectChanges();\r\n                }\r\n            });\r\n        } else {\r\n            if (this.showFindInput) {\r\n                this.showFindInput = false;\r\n                this.cdRef.detectChanges();\r\n            }\r\n            if (this.findKeysHandler) {\r\n                this.findKeysHandler.unsubscribe();\r\n                this.findKeysHandler = null;\r\n            }\r\n        }\r\n    }\r\n\r\n    private getCustomCls(rowNode: RowNode, field: string = '', clsType: 'row' | 'cell' = 'row') {\r\n        const cls = {};\r\n        let fn = this.rowStyler;\r\n        if (clsType === 'cell') {\r\n            fn = this.cellStyler;\r\n        }\r\n\r\n        if (fn) {\r\n            const rowCls = fn(rowNode.node, field);\r\n            if (rowCls) {\r\n                let arrcls = [];\r\n                if (typeof rowCls === 'string') {\r\n                    arrcls = [rowCls];\r\n                } else {\r\n                    if (Array.isArray(rowCls)) {\r\n                        arrcls = rowCls;\r\n                    }\r\n                }\r\n\r\n                if (arrcls.length) {\r\n                    const rowClsObj = {};\r\n                    arrcls.forEach(c => {\r\n                        rowClsObj['' + c] = true;\r\n                    });\r\n                    const _cls = { ...rowClsObj, ...cls };\r\n                    return _cls;\r\n                } else {\r\n                    return rowCls;\r\n                }\r\n            } else {\r\n                return cls;\r\n            }\r\n        } else {\r\n            return cls;\r\n        }\r\n    }\r\n\r\n    getRowCls(rowNode: RowNode, field?: string) {\r\n        return this.getCustomCls(rowNode, 'row');\r\n    }\r\n\r\n    getCellCls(rowNode: RowNode, field: string) {\r\n        return this.getCustomCls(rowNode, field, 'cell');\r\n    }\r\n\r\n    getRealColWidth(currentCol: TreeTableColumn) {\r\n        if (this.columns && this.columns.length && this.fitColumns) {\r\n            const colWidthTotal = this.columns.reduce((r, c) => {\r\n                return r + (this.columnIsVisible(c) && (r.field !== NODES_PAGER_COLUMN_FIELD  || r.fixedWidth)? c.width : 0);\r\n            }, 0);\r\n\r\n            if (this.columnIsVisible(currentCol)) {\r\n                if ( currentCol.field !== NODES_PAGER_COLUMN_FIELD &&  !currentCol.fixedWidth) {\r\n                    return (currentCol.width / colWidthTotal * 100).toFixed(2) + '%';\r\n                } else {\r\n                    return (currentCol.width || 120) + 'px';\r\n                }\r\n            } else {\r\n                return 0;\r\n            }\r\n        }\r\n        return currentCol.width + 'px';\r\n    }\r\n\r\n    @HostListener('window:resize')\r\n    onResized() {\r\n        this.resizeSer.windowResized();\r\n    }\r\n\r\n    private setRightFixedColumnShadow() {\r\n        if (this.psRef && this.psRef.directiveRef) {\r\n            const ps = (this.psRef.directiveRef as any).instance;\r\n            if (!ps) {\r\n                return;\r\n            }\r\n            const { containerWidth, scrollbarXLeft, contentWidth } = ps;\r\n            if (containerWidth + scrollbarXLeft < contentWidth) {\r\n\r\n                const fixedRightColumns = this.columns.filter(n => n.fixed === 'right');\r\n                const ruleName = `#${this.id}.f-treetable--fixed-columns`;\r\n                if (fixedRightColumns && fixedRightColumns.length) {\r\n                    const fixedRightCssRuleKey = `${ruleName} [r-tt-shadow-col]::before`;\r\n                    const rightCSSRule = `${fixedRightCssRuleKey}{\r\n                        box-shadow:#d9d9d9 -12px 0px 8px -12px inset;\r\n                    }`;\r\n\r\n                    this.utils.appendCssRules([rightCSSRule], this.styleElement.sheet);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private setFixedColumnShadow(x, e) {\r\n        const fixedLeftColumns = this.columns.filter(n => n.fixed === 'left');\r\n        const fixedRightColumns = this.columns.filter(n => n.fixed === 'right');\r\n        const ruleName = `#${this.id}.f-treetable--fixed-columns`;\r\n        let fixedLeftCssRuleKey = '';\r\n        let fixedRightCssRuleKey = '';\r\n        let leftCSSRule = '';\r\n        let rightCSSRule = '';\r\n        if (fixedLeftColumns && fixedLeftColumns.length) {\r\n            const lastFixedLeftColumn = fixedLeftColumns[fixedLeftColumns.length - 1];\r\n            fixedLeftCssRuleKey = `${ruleName} [field=\"${lastFixedLeftColumn.field}\"]::after`;\r\n            leftCSSRule = `${fixedLeftCssRuleKey}{\r\n                box-shadow:#d9d9d9 12px 0px 8px -12px inset;\r\n            }`;\r\n        }\r\n\r\n        if (fixedRightColumns && fixedRightColumns.length) {\r\n            fixedRightCssRuleKey = `${ruleName} [r-tt-shadow-col]::before`;\r\n            rightCSSRule = `${fixedRightCssRuleKey}{\r\n                box-shadow:#d9d9d9 -12px 0px 8px -12px inset;\r\n            }`;\r\n        }\r\n\r\n\r\n        if (x === 0) {\r\n            // ç§»é¤å·¦ä¾§åºå®åé´å½±æ ·å¼\r\n            if (fixedLeftCssRuleKey) {\r\n                this.utils.removeCssRule(fixedLeftCssRuleKey, this.styleElement.sheet);\r\n            }\r\n        } else if ((x + e.srcElement.offsetWidth).toFixed() == e.srcElement.scrollWidth) {\r\n            // ç§»é¤å³ååºå®åé´å½±æ ·å¼\r\n            if (fixedRightCssRuleKey) {\r\n                this.utils.removeCssRule(fixedRightCssRuleKey, this.styleElement.sheet);\r\n            }\r\n        } else {\r\n            // æ·»å å·¦å³åºå®åæ ·å¼\r\n            const arr = [];\r\n            if (leftCSSRule) {\r\n                arr.push(leftCSSRule);\r\n            }\r\n\r\n            if (rightCSSRule) {\r\n                arr.push(rightCSSRule);\r\n            }\r\n\r\n            this.utils.appendCssRules(arr, this.styleElement.sheet);\r\n        }\r\n    }\r\n\r\n    onScrollX(e: any) {\r\n        if (this.showHeader && this.headerBox) {\r\n            const x = e.srcElement.scrollLeft;\r\n            this.state.scrollX = x;\r\n            // this.renderer.setStyle(this.headerBox.nativeElement.querySelector('table'), 'transform', `translate3d(-${x}px, 0px, 0px)`);\r\n            this.headerBox.nativeElement.scrollLeft = x;\r\n\r\n            this.setFixedColumnShadow(x, e);\r\n        }\r\n    }\r\n\r\n    onScrollY(e: any) {\r\n        if (this.virtualized) {\r\n            const scrollTop = e.target.scrollTop;\r\n            this.renderData(scrollTop);\r\n        }\r\n    }\r\n\r\n    private renderData(scrolltop: number) {\r\n        const { data, topHideHeight, bottomHideHeight } = this.scrollLoader.getRowNodes(scrolltop);\r\n            this.state.scrollY = scrolltop;\r\n            this.serializedValue = data;\r\n            this.topHideHeight = topHideHeight;\r\n            this.bottomHideHeight = bottomHideHeight;\r\n\r\n            this.setNewColumnsWidth();\r\n\r\n            this.detectChanges();\r\n    }\r\n\r\n    onSearchValueChange($event) {\r\n        if (!$event) {\r\n            this.onClearSearchValue();\r\n        }\r\n    }\r\n\r\n    onClearSearchValue() {\r\n        this.searchData.value = '';\r\n        this.state.searched = false;\r\n        this.clearSearchValue.emit();\r\n    }\r\n\r\n    onCellClick(event: Event, col: any, node: any) {\r\n        this.cellClick.emit({ event, col, node });\r\n    }\r\n\r\n    trackByFn(index, rowNode) {\r\n        return rowNode.id;\r\n    }\r\n    /**\r\n     * æ ¼å¼åæ°æ®\r\n     */\r\n    formatData(col: any, data: any, formatter: any) {\r\n        // const val = this.utils.getValue(field, data, true );\r\n        const val = this.getNodeText(col, data);\r\n        return this.colFormatSer.format(val, data, formatter);\r\n    }\r\n\r\n    columnsChanged() {\r\n        this.checkColumnOption();\r\n        this.detectChanges();\r\n    }\r\n\r\n    private ttc2columns(list: QueryList<TreeTableColumnDirective>) {\r\n        return list.map((n: TreeTableColumnDirective) => {\r\n            return {\r\n                field: n.field,\r\n                title: n.title,\r\n                align: n.align,\r\n                hAlign: n.hAlign,\r\n                width: n.width,\r\n                formatter: n.formatter\r\n            };\r\n        });\r\n    }\r\n\r\n    private reSetSize() {\r\n        if (this.fit) {\r\n            const parentEl = this.el.nativeElement.parentNode;\r\n            this.width = parentEl.offsetWidth;\r\n            this.height = parentEl.offsetHeight;\r\n\r\n            // å¦æå¨ä½¿ç¨æ¶ï¼ä¸ºç»ä»¶è®¾ç½®çé«åº¦ï¼åä»¥æ­¤å¼ä¸ºåï¼ä»æ¯æ åºå®å¼ ï¼ä¸æ¯æ ç¾åæ¯\r\n            if (this.el.nativeElement.style.height) {\r\n                let h = this.el.nativeElement.style.height;\r\n                if (h.indexOf('px') > -1) {\r\n                    h = parseInt(h.replace('px', ''), 10);\r\n                    if (h > 0) {\r\n                        this.height = h;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private renderVirtualRowNodes(nodePosY = null) {\r\n        if (this.virtualized) {\r\n            const scrollY = nodePosY || this.state.scrollY;\r\n            const _rownodes = this.scrollLoader.getRowNodes(scrollY);\r\n            this.serializedValue = _rownodes.data;\r\n            this.topHideHeight = _rownodes.topHideHeight;\r\n            this.bottomHideHeight = _rownodes.bottomHideHeight;\r\n            this.detectChanges();\r\n\r\n            if (nodePosY) {\r\n                this.ngZone.runOutsideAngular(() => {\r\n                    setTimeout(() => {\r\n                        this.psRef.directiveRef.elementRef.nativeElement.scrollTop = nodePosY;\r\n                    }, 20);\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    updateSerializedValue(nodePosY: any = null) {\r\n        this.serializedValue = [];\r\n        this.searchHandle.allNodes = [];\r\n        this.state.rowNodes = [];\r\n\r\n        this.serializeNodes(null, this.data, 0, true);\r\n        if (this.virtualized && this.fixedHeader) {\r\n            this.renderVirtualRowNodes(nodePosY);\r\n        } else {\r\n            this.serializedValue = this.state.rowNodes;\r\n            this.detectChanges();\r\n            // if (emitChanges) {\r\n            // }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * å°æ èç¹æ°æ®åºååä¸ºRowNode\r\n     * @param parent ç¶çº§èç¹\r\n     * @param nodes æ èç¹éå\r\n     * @param level çº§å«\r\n     * @param visible æ¯å¦å¯è§\r\n     */\r\n    serializeNodes(parent: TreeNode, nodes: TreeNode[], level: number, visible: boolean, parentIds?: any[]) {\r\n        if (nodes && nodes.length) {\r\n\r\n            if (!nodes[0].data) {\r\n                return;\r\n            }\r\n\r\n            nodes.forEach((node, index) => {\r\n                node.parent = parent;\r\n\r\n                if (!node.hasOwnProperty('selectable')) {\r\n                    node.selectable = true;\r\n                }\r\n\r\n                if (!node.hasOwnProperty('showIcon')) {\r\n                    node.showIcon = true;\r\n                }\r\n\r\n                if (this.onlySelectLeaf === 'yes' && node.selectable) {\r\n                    node.selectable = !!node.leaf;\r\n                }\r\n                const keyid = node.data[this.idField];\r\n                node.id = keyid;\r\n                const isSelected = this.findIndexInSelection(node) > -1;\r\n                const isChecked = this.findIndexInCheckeds(node) > -1;\r\n                const isLast = index === nodes.length - 1;\r\n                const isFirst = index === 0;\r\n                let parents = [];\r\n                let parentRn = null;\r\n                if (parent) {\r\n                    const parentID = parent.data[this.idField];\r\n                    const _parents = parentIds || [];\r\n                    parents = parents.concat(_parents.map(n => n));\r\n                    parents.push(parentID);\r\n                    parentRn = this.state.rowNodes.find(n => n.id === parent.id);\r\n                }\r\n\r\n                const rowNode: RowNode = {\r\n                    id: keyid,\r\n                    node,\r\n                    parent,\r\n                    level,\r\n                    visible: visible && (parent ? parent.expanded : true),\r\n                    isSelected,\r\n                    isChecked,\r\n                    parents,\r\n                    parentRowNode: parentRn,\r\n                    index: this.state.rowNodes.length,\r\n                    last: isLast,\r\n                    first: isFirst\r\n                };\r\n                // this.serializedValue.push(rowNode);\r\n                this.state.rowNodes.push(rowNode);\r\n                this.serializeNodes(node, node.children, level + 1, rowNode.visible, parents);\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * å¤æ­æå®çèç¹æ¯å¦è¢«éä¸­\r\n     * @param node æ èç¹\r\n     */\r\n    isSelected(node: TreeNode): boolean {\r\n        if (this.singleSelect) {\r\n            if (node && this.selectedRow) {\r\n                return node.data[this.idField] === this.selectedRow.data[this.idField];\r\n            }\r\n            return false;\r\n        } else {\r\n            if (this.selections && this.selections.length) {\r\n                return this.selections.findIndex(n => n.data[this.idField] === node.data[this.idField]) > -1;\r\n            }\r\n            return false;\r\n        }\r\n    }\r\n    /** å¤æ­å½åèç¹çé©éç¶æ */\r\n    isChecked(node: TreeNode): boolean {\r\n        if (node && this.checkeds) {\r\n            if (this.checkeds instanceof Array) {\r\n                return this.checkeds.findIndex((v) => {\r\n                    return v.data[this.idField] === node.data[this.idField];\r\n                }) > -1;\r\n            }\r\n\r\n            return false;\r\n        }\r\n        return false;\r\n    }\r\n\r\n\r\n    private unSelectedCurrentRowEmit() {\r\n        const currSelected = this.selectedRow;\r\n        if (currSelected) {\r\n            this.nodeUnSelect.emit({ node: currSelected, type: 'row', instance: this });\r\n        }\r\n    }\r\n\r\n    private _singleSelectNode(e: SelectEventArgs) {\r\n\r\n        this.clearSelections();\r\n        this.selectedRow = e.rowNode.node;\r\n        this.selectRowIndex = e.rowIndex;\r\n        this.selections = [e.rowNode.node];\r\n        e.rowNode.isSelected = true;\r\n\r\n        if (this.showCheckbox) {\r\n            e.rowNode.isChecked = true;\r\n            this.clearCheckeds();\r\n            this.setCheckeds(e.rowNode);\r\n        }\r\n\r\n        const sp: NodeSelectedParam = {\r\n            originalEvent: e.originalEvent,\r\n            node: e.rowNode.node, type: 'row',\r\n            index: e.rowIndex,\r\n            parents: e.rowNode.parents,\r\n            instance: this\r\n        };\r\n        this.nodeSelected.emit(sp);\r\n    }\r\n\r\n    private _singleUnSelectNode(e: SelectEventArgs) {\r\n        this.selectedRow = null;\r\n        this.selectRowIndex = -1;\r\n        e.rowNode.isSelected = false;\r\n        e.rowNode.isChecked = false;\r\n        this.selections = [];\r\n\r\n        this.nodeUnSelect.emit({\r\n            originalEvent: e.originalEvent,\r\n            node: e.rowNode.node, type: 'row', parents: e.rowNode.parents,\r\n            instance: this\r\n        });\r\n    }\r\n\r\n    private __singleSelectNode(event: SelectEventArgs, selected = false) {\r\n        if (!selected) {\r\n            this.unSelectedCurrentRowEmit();\r\n            this._singleSelectNode(event);\r\n        } else {\r\n            if (!this.keepSelect) {\r\n                this._singleUnSelectNode(event);\r\n            }\r\n        }\r\n    }\r\n\r\n    private __multiSelectNode(event: SelectEventArgs, selected) {\r\n        const rowNode = event.rowNode;\r\n        if (selected) {\r\n            this.unSelectedCurrentRowEmit();\r\n            this.singleSelectWhenMultiSelect(rowNode, true);\r\n            this.nodeSelected.emit({\r\n                originalEvent: event.originalEvent, node: rowNode.node,\r\n                type: 'row', index: event.rowIndex, parents: rowNode.parents,\r\n                instance: this\r\n            });\r\n        } else {\r\n            if (!this.keepSelect) {\r\n                this.singleSelectWhenMultiSelect(rowNode, false);\r\n                this.nodeUnSelect.emit({\r\n                    originalEvent: event.originalEvent, node: rowNode.node,\r\n                    type: 'row', index: event.rowIndex, parents: rowNode.parents,\r\n                    instance: this\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * è¡åå»äºä»¶\r\n     */\r\n    handleRowClick(event: SelectEventArgs) {\r\n        const rowNode = event.rowNode;\r\n        rowNode.node['elementRef'] = event.originalEvent.target;\r\n        const selected = this.isSelected(rowNode.node);\r\n\r\n        if (this.singleSelect) {\r\n            this.__singleSelectNode(event, selected);\r\n        } else {\r\n            rowNode.indeterminate = false;\r\n            if (this.onlySelectSelf) {\r\n                this.__multiSelectNode(event, !selected);\r\n            } else {\r\n                rowNode.isSelected = !selected;\r\n                this.state.rowNodes.find(n => n.id === rowNode.id).isSelected = !selected;\r\n                this.setSelections(rowNode);\r\n\r\n                const rowSelectChangeParams: NodeSelectedParam = {\r\n                    originalEvent: event.originalEvent, node: rowNode.node,\r\n                    type: 'row', index: event.rowIndex, parents: rowNode.parents,\r\n                    instance: this\r\n                };\r\n\r\n                if (rowNode.isSelected) {\r\n                    this.nodeSelected.emit(rowSelectChangeParams);\r\n                } else {\r\n                    this.nodeUnSelect.emit(rowSelectChangeParams);\r\n                }\r\n\r\n\r\n                if (this.checkOnSelect) {\r\n                    rowNode.isChecked = !selected;\r\n                    this.state.rowNodes.find(n => n.id === rowNode.id).isChecked = !selected;\r\n                    this.setCheckeds(rowNode);\r\n                    const nodes = this.cascadeNodes(rowNode, rowNode.isChecked);\r\n                    this.ttService.onChangeCheckboxStatus(rowNode);\r\n\r\n                    if (rowNode.isChecked) {\r\n                        this.nodeChecked.emit({ originalEvent: event, node: rowNode.node, nodes, instance: this });\r\n                    } else {\r\n                        this.nodeUnChecked.emit({ originalEvent: event, node: rowNode.node, nodes, instance: this });\r\n                    }\r\n\r\n                }\r\n            }\r\n\r\n            if (this.checkOnSelect) {\r\n                const ids = this.checkeds.map(tn => tn.id);\r\n                this.checkValues = ids;\r\n                this.checkValuesChange.emit(ids);\r\n            }\r\n        }\r\n\r\n        this.detectChanges();\r\n    }\r\n\r\n    /**\r\n     * å¸¦æcheckbox çåé\r\n     * @param rowNode å½åèç¹\r\n     */\r\n    private singleSelectWhenMultiSelect(rowNode: RowNode, flag: boolean) {\r\n        if (this.checkOnSelect) {\r\n            rowNode.isChecked = flag;\r\n            this.setCheckeds(rowNode);\r\n\r\n            this.cascadeNodes(rowNode, rowNode.isChecked);\r\n\r\n            if (rowNode.isChecked) {\r\n                this.nodeChecked.emit({ originalEvent: event, node: rowNode.node, instance: this });\r\n            } else {\r\n                this.nodeUnChecked.emit({ originalEvent: event, node: rowNode.node, instance: this });\r\n            }\r\n        }\r\n\r\n        this.clearSelections();\r\n\r\n        if (this.onlySelectSelf) {\r\n            this.selectedRow = rowNode.node;\r\n        }\r\n        rowNode.isSelected = flag;\r\n        this.setSelections(rowNode);\r\n    }\r\n\r\n    private selectWhenChecked(rowNode: RowNode, flag: boolean, event: any) {\r\n        rowNode.isChecked = flag;\r\n        this.setCheckeds(rowNode, false);\r\n        if (this.selectOnCheck) {\r\n            if (this.onlySelectSelf) {\r\n                if (flag || (this.selectedRow && this.selectedRow.id === rowNode.id)) {\r\n                    this.clearSelections();\r\n                }\r\n            }\r\n\r\n            if (this.singleSelect && this.showCheckbox) {\r\n                this.clearCheckeds();\r\n            }\r\n\r\n            rowNode.isSelected = flag;\r\n            this.setSelections(rowNode);\r\n\r\n            this.state.rowNodes.find(n => n.id === rowNode.id).isSelected = flag;\r\n\r\n            if (rowNode.isSelected) {\r\n                this.nodeSelected.emit({ originalEvent: event, node: rowNode.node, instance: this, type: 'checkbox' });\r\n            } else {\r\n                this.nodeUnSelect.emit({ originalEvent: event, node: rowNode.node, instance: this, type: 'checkbox' });\r\n            }\r\n        }\r\n    }\r\n\r\n    private isInArray(rowNode: RowNode, items: TreeNode[]) {\r\n        if (items && items.length === 0) {\r\n            return false;\r\n        }\r\n        return items.findIndex(i => i.data[this.idField] === rowNode.id) > -1;\r\n    }\r\n\r\n    private setSelections(rowNode: RowNode) {\r\n        if (rowNode.isSelected) {\r\n            if (!this.selections) {\r\n                this.selections = [];\r\n            }\r\n            if (!this.isInArray(rowNode, this.selections)) {\r\n                // this.selections = [...this.selections, rowNode.node];\r\n                this.selections.push(rowNode.node);\r\n            }\r\n        } else {\r\n            if (this.selections) {\r\n                const i = this.selections.findIndex((tn: TreeNode) => tn.data[this.idField] === rowNode.node.data[this.idField]);\r\n                if (i !== -1) {\r\n                    this.selections.splice(i, 1);\r\n                }\r\n                // this.selections = this.selections.filter((tn: TreeNode) => tn.data[this.idField] !== rowNode.node.data[this.idField]);\r\n            }\r\n        }\r\n    }\r\n\r\n    private setCheckeds(rowNode: RowNode, updated = true) {\r\n        if (rowNode.isChecked) {\r\n            if (!this.checkeds) {\r\n                this.checkeds = [];\r\n            }\r\n            if (!this.isInArray(rowNode, this.checkeds)) {\r\n                // this.checkeds = [ ...this.checkeds, rowNode.node];\r\n                this.checkeds.push(rowNode.node);\r\n            }\r\n        } else {\r\n            if (this.checkeds) {\r\n                const i = this.checkeds.findIndex((tn: TreeNode) => tn.data[this.idField] === rowNode.node.data[this.idField]);\r\n                if (i !== -1) {\r\n                    this.checkeds.splice(i, 1);\r\n                }\r\n                // this.checkeds = this.checkeds.filter((tn: TreeNode) => tn.data[this.idField] !== rowNode.node.data[this.idField]);\r\n            }\r\n        }\r\n\r\n        if (updated) {\r\n            this.checkeds = [ ...this.checkeds];\r\n        }\r\n    }\r\n\r\n    private getDiffrentData(data: TreeNode[]) {\r\n        if (data.length) {\r\n            const _nodes = [];\r\n            data.forEach(n => {\r\n                if (_nodes.findIndex(t => t.data[this.idField] === n.data[this.idField]) === -1) {\r\n                    _nodes.push(n);\r\n                }\r\n            });\r\n            return _nodes;\r\n        }\r\n\r\n        return data;\r\n    }\r\n\r\n    private cascadeCheckedNode(rowNode: RowNode, checked: boolean, sync = false): TreeNode[] {\r\n        const nodes: TreeNode[] = [];\r\n        if (rowNode.node.selectable || rowNode.node.selectable === undefined) {\r\n            rowNode.isChecked = checked;\r\n            this.setCheckeds(rowNode, false);\r\n            if (this.selectOnCheck) {\r\n                if (sync) {\r\n                    const status = this.isIndeterminate(rowNode) !== 2;\r\n                    checked = status ? checked: false;\r\n                }\r\n                rowNode.isSelected = checked;\r\n                this.setSelections(rowNode);\r\n            }\r\n            if (!this.isInArray(rowNode, nodes)) {\r\n                nodes.push(rowNode.node);\r\n            }\r\n        }\r\n        return nodes;\r\n    }\r\n\r\n    /**\r\n     * åä¸çº§èéä¸­\r\n     * @param node å½åèç¹\r\n     * @param checked éä¸­ç¶æ\r\n     * è¿ååå½±åçè¡\r\n     */\r\n    propagateSelectionDown(rowNode: RowNode, checked: boolean) {\r\n        let nodes = this.cascadeCheckedNode(rowNode, checked);\r\n        if (this.cascadeCheck && this.cascadeDown && rowNode.node.children && rowNode.node.children.length) {\r\n            rowNode.node.children.forEach((v, i) => {\r\n                const rn = this.state.rowNodes.find((row: RowNode) => row.id === v.data[this.idField]);\r\n                if (rn && rn.node.selectable) {\r\n                    rn.indeterminate = false;\r\n                    rn.isChecked = checked;\r\n                    nodes = nodes.concat(this.propagateSelectionDown(rn, checked));\r\n                    this.ttService.onChangeCheckboxStatus(rn);\r\n                }\r\n            });\r\n        }\r\n\r\n        return nodes;\r\n    }\r\n\r\n    /**\r\n     * åä¸çº§èéä¸­\r\n     */\r\n    propagateSelectionUp(rowNode: RowNode, checked: boolean) {\r\n        const nodes = this.cascadeCheckedNode(rowNode, checked);\r\n        if (this.cascadeCheck && this.cascadeUp && rowNode.node.parent) {\r\n            if (rowNode.parents && rowNode.parents.length) {\r\n                const rns: RowNode[] = [];\r\n                rowNode.parents.forEach((n, i) => {\r\n                    const rn = this.findRowNode(n);\r\n                    if (rn && rn.node.selectable) {\r\n                        // rn.isChecked = checked;\r\n                        const checkedNodes = this.cascadeCheckedNode(rn, checked, true);\r\n                        if (checkedNodes.length) {\r\n                            nodes.push(checkedNodes[0]);\r\n                        }\r\n                        rns.push(rn);\r\n                    }\r\n                });\r\n\r\n                rns.reverse().forEach(rn => {\r\n                    this.updateCheckboxStatus(rn);\r\n                });\r\n            }\r\n        }\r\n\r\n\r\n        return nodes;\r\n    }\r\n\r\n    // èç¹ç¶æï¼éä¸­ï¼å¾éï¼åæ­¥æ´æ°\r\n    private updateNodeStatus() {\r\n        if (this.state.searched) {\r\n            const rowNodes = this.state.searchRowNodes;\r\n            if (!rowNodes) {\r\n                return;\r\n            }\r\n            rowNodes.forEach(rn => {\r\n                const checkedItem: RowNode = this.state.rowNodes.find(n => n.id === rn.id);\r\n\r\n                const chked = checkedItem ? checkedItem.isChecked : false;\r\n                rn.indeterminate = false;\r\n                rn.isChecked = chked;\r\n\r\n                if (this.selectOnCheck) {\r\n                    if (checkedItem.isSelected != rn.isChecked) {\r\n                        checkedItem.isSelected = checkedItem.isChecked;\r\n                    }\r\n                    rn.isSelected = checkedItem.isSelected;\r\n                }\r\n            });\r\n        } else {\r\n            if (this.selectOnCheck) {\r\n                this.state.rowNodes.forEach(rn => {\r\n                    if (this.onlySelectSelf) {\r\n                        if (!this.selections || !this.selections.length ) {\r\n                            rn.isSelected = false;\r\n                        } else {\r\n                            if (this.selections[0].id === rn.id) {\r\n                                rn.isSelected = true;\r\n                            } else {\r\n                                rn.isSelected = false;\r\n                            }\r\n                        }\r\n                    } else {\r\n                        if (rn.isSelected != rn.isChecked) {\r\n                            rn.isSelected = rn.isChecked;\r\n                        }\r\n                    }\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * çº§èéæ©èç¹\r\n     * @param rowNode å½åèç¹\r\n     * @param checked æ¯å¦é©é\r\n     */\r\n    private cascadeNodes(rowNode: RowNode, checked: boolean) {\r\n        let checkedNodes = this.propagateSelectionDown(rowNode, checked);\r\n        checkedNodes = checkedNodes.concat(this.propagateSelectionUp(rowNode, checked));\r\n        checkedNodes = this.getDiffrentData(checkedNodes);\r\n\r\n        this.updateNodeStatus();\r\n\r\n        this.updateAllCheckboxStatus();\r\n\r\n        return checkedNodes;\r\n    }\r\n\r\n    /**\r\n     * è¡Checkbox éä¸­ååäºä»¶\r\n     * @param event é¼ æ ç¹å»äºä»¶å¯¹è±¡\r\n     * @param rowNode å½åæ èç¹\r\n     */\r\n    toggleNodeWithCheckbox(event: Event, rowNode: RowNode, checked: boolean): any {\r\n        this.state.rowNodes.find(n => n.id === rowNode.id).isChecked = checked;\r\n        rowNode.indeterminate = false;\r\n\r\n        const data = this.cascadeNodes(rowNode, checked);\r\n        this.ttService.onChangeCheckboxStatus(rowNode);\r\n        if (checked) {\r\n            this.nodeChecked.emit({ originalEvent: event, node: rowNode.node, nodes: data, instance: this });\r\n        } else {\r\n            this.nodeUnChecked.emit({ originalEvent: event, node: rowNode.node, nodes: data, instance: this });\r\n        }\r\n\r\n        this.selectWhenChecked(rowNode, checked, event);\r\n\r\n        if (this.onlySelectSelf && checked) {\r\n            this.selectedRow = rowNode.node;\r\n        }\r\n\r\n        this.checkeds = [...this.checkeds];\r\n        this.detectChanges();\r\n        event.stopPropagation();\r\n    }\r\n\r\n    /**\r\n     * å¨é\r\n     * @param event é¼ æ äºä»¶å¯¹è±¡\r\n     * @param checked æ¯å¦éä¸­\r\n     */\r\n    toggleNodesWithCheckbox(event: Event, checked: boolean) {\r\n        if (checked) {\r\n            if (this.data && this.data.length) {\r\n                this.checkAllNodes({ originalEvent: event, checked, instance: this });\r\n            }\r\n        } else {\r\n            this.selections = null;\r\n            this.unCheckAllNodes({ originalEvent: event, checked, instance: this });\r\n        }\r\n\r\n        this.detectChanges();\r\n    }\r\n\r\n    /** æ´æ°å¨écheckbox çç¶æ */\r\n    private updateAllCheckboxStatus() {\r\n        const status = this.isIndeterminate();\r\n        if (this.showCheckAll && !this.singleSelect && this.showCheckbox) {\r\n            if (status !== undefined) {\r\n                if (this.headerCheckboxCmp) {\r\n                    this.headerCheckboxCmp.chkAll.nativeElement.indeterminate = status === 2;\r\n                    this.headerCheckboxCmp.checked = status === 1;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /** æ´æ°ç¶èç¹checkbox éä¸­ç¶æ */\r\n    private updateParentCheckboxStatus(rowNode: RowNode) {\r\n        const pNodes = [];\r\n        rowNode.parents.forEach(rnid => {\r\n            const rn = this.findRowNode(rnid);\r\n            if (rn) {\r\n                pNodes.push(rn);\r\n            }\r\n        });\r\n\r\n        pNodes.reverse().forEach(rn => {\r\n            this.updateCheckboxStatus(rn);\r\n        });\r\n    }\r\n    /** æ´æ°Nä¸ªç¶èç¹å¤éæ¡ä¸­çéä¸­ç¶æ */\r\n    private updateParentsCheckStatus(parentIds: any) {\r\n        let pids = [];\r\n        parentIds.forEach((ids: any) => {\r\n            pids = [...pids, ...ids];\r\n        });\r\n\r\n        pids = Array.from(new Set(pids));\r\n\r\n        const pRowNodes = this.findRowNodes(pids);\r\n\r\n        pRowNodes.sort((r, n) => {\r\n            return n.level - r.level;\r\n        }).forEach(rn => {\r\n            this.updateCheckboxStatus(rn);\r\n        });\r\n\r\n    }\r\n\r\n    /** æ´æ°èç¹ä¸­checkboxçç¶æ */\r\n    private updateCheckboxStatus(rowNode: RowNode) {\r\n        const status = this.isIndeterminate(rowNode);\r\n        if (status !== undefined && rowNode.node.selectable) {\r\n            rowNode.indeterminate = status === 2;\r\n            this.ttService.onChangeCheckboxStatus(rowNode);\r\n        }\r\n    }\r\n\r\n    /** å¤æ­æå®èç¹checkbox çç¶æ */\r\n    private isIndeterminate(rowNode?: RowNode): any {\r\n        const status = this.getCheckboxStatus(rowNode);\r\n        if (status !== undefined) {\r\n            let checked = false;\r\n            if (status === 2) {\r\n                checked = false;\r\n            } else {\r\n                checked = !!status;\r\n            }\r\n            if (rowNode && rowNode.node.selectable) {\r\n                rowNode.isChecked = checked;\r\n                this.setCheckeds(rowNode, false);\r\n            }\r\n        }\r\n        return status;\r\n    }\r\n\r\n    /**\r\n     * è¿åç¶çº§èç¹checkbox çç¶æã0ï¼ä¸éä¸­ï¼ 1ï¼ éä¸­ï¼ 2ï¼ä¸ç¡®å®\r\n     * @param rowNode ç¶çº§èç¹ï¼ä¸ºç©ºæ¶è¿åå¨écheckbox çç¶æ\r\n     */\r\n    private getCheckboxStatus(rowNode?: RowNode) {\r\n        let uncheckedLength = 0;\r\n        let checkedLength = 0;\r\n        let len = 0;\r\n        let childNodes = [];\r\n        if (rowNode) {\r\n            childNodes = rowNode.node.children || [];\r\n        } else {\r\n            childNodes = this.state.rowNodes;\r\n        }\r\n        len = childNodes.length;\r\n        childNodes.forEach(n => {\r\n            let rn = n;\r\n            if (rowNode) {\r\n                rn = this.findRowNode(n.data[this.idField]);\r\n            }\r\n            if (rn && !rn.indeterminate) {\r\n                if (rn.isChecked) {\r\n                    checkedLength++;\r\n                } else {\r\n                    uncheckedLength++;\r\n                }\r\n            }\r\n        });\r\n\r\n        if (len === 0) {\r\n            return undefined;\r\n        }\r\n        let flag = 0;\r\n        if (uncheckedLength === len) {\r\n            flag = 0;\r\n        } else {\r\n            if (checkedLength === len) {\r\n                flag = 1;\r\n            } else {\r\n                flag = 2;\r\n            }\r\n        }\r\n\r\n        return flag;\r\n    }\r\n\r\n    private findIndexIn(node: TreeNode, treeNodes: TreeNode[]) {\r\n        let index = -1;\r\n        if (treeNodes && treeNodes.length) {\r\n            index = treeNodes.findIndex((v, i) => {\r\n                return this.equals(v, node);\r\n            });\r\n        }\r\n\r\n        return index;\r\n    }\r\n\r\n    /**\r\n     * å¨éä¸­çéåä¸­æ¥æ¾æå®èç¹çç´¢å¼\r\n     * @param node æ èç¹\r\n     */\r\n    findIndexInCheckeds(node: TreeNode): number {\r\n        return this.findIndexIn(node, this.checkeds);\r\n    }\r\n\r\n    /**\r\n     * å¨éä¸­çéåä¸­æ¥æ¾æå®èç¹çç´¢å¼\r\n     * @param node æ èç¹\r\n     */\r\n    findIndexInSelection(node: TreeNode): number {\r\n        return this.findIndexIn(node, this.selections);\r\n    }\r\n\r\n    /** å¯¹æ¯ä¸¤ä¸ªèç¹æ¯å¦åä¸ä¸ªèç¹ */\r\n    equals(target: TreeNode, source: TreeNode): boolean {\r\n        return target.data[this.idField] === source.data[this.idField];\r\n    }\r\n\r\n    /**\r\n     * å±å¼ææèç¹\r\n     * @param rowNode å±å¼æ­¤èç¹ä¸çææèç¹ï¼å¦æä¸ºç©ºï¼åå±å¼ææèç¹\r\n     * @param deep è®¾ç½®ä¸ºtrue æ¶ï¼å½åèç¹ä¸çææå­èç¹å¨é¨å±å¼, é»è®¤ false\r\n     * @param childrenEmptyEmitExpand  å½æ²¡æå­èç¹æ¯å¦è§¦åå±å¼äºä»¶ï¼é»è®¤ä¸º true\r\n     */\r\n    toggleExpand(treeNode?: TreeNode, deep = false, childrenEmptyEmitExpand = true) {\r\n        if (treeNode) {\r\n            treeNode.expanded = !treeNode.expanded;\r\n            this.updateNodeProperty(treeNode.id, {expanded: treeNode.expanded});\r\n            this.toggleVisible(treeNode);\r\n\r\n            if (this.virtualized) {\r\n                if (treeNode.children && treeNode.children.length) {\r\n                    this.renderVirtualRowNodes();\r\n                }\r\n            }\r\n\r\n            if (treeNode.expanded) {\r\n                if (childrenEmptyEmitExpand || (treeNode.children && treeNode.children.length)) {\r\n                    this.expand.emit(treeNode);\r\n                } else {\r\n                    treeNode.expanded = !treeNode.expanded;\r\n                    return;\r\n                }\r\n            } else {\r\n                this.collapse.emit(treeNode);\r\n            }\r\n\r\n            if (deep) {\r\n                if (treeNode.children && treeNode.children.length) {\r\n                    treeNode.children.forEach((row, i) => {\r\n                        this.toggleExpand(row, deep, childrenEmptyEmitExpand);\r\n                    });\r\n                }\r\n            }\r\n        } else {\r\n\r\n            if (this.data && this.data.length) {\r\n                this.data.forEach((row: any) => {\r\n                    this.toggleExpand(row);\r\n                });\r\n            }\r\n\r\n        }\r\n\r\n        this.setNewColumnsWidth();\r\n\r\n    }\r\n\r\n    private toggleVisible(treeNode: TreeNode) {\r\n        const rowNode = this.findRowNode(treeNode.id);\r\n        if (rowNode) {\r\n            const rid = rowNode.id;\r\n\r\n            const setRowVisible = (rn, visible) => {\r\n                const rnParent = this.findRowNode(rn.parent.data[this.idField]);\r\n                if (rnParent) {\r\n                    rn.visible = rnParent.visible && rnParent.node.expanded;\r\n                } else {\r\n                    rn.visible = visible;\r\n                }\r\n\r\n                const _r = this.serializedValue.find(n => n.id === rn.id);\r\n                if (_r) {\r\n                    _r.visible = rn.visible;\r\n                }\r\n            };\r\n\r\n            this.state.rowNodes.filter(rn => rn.parents.indexOf(rid) > -1).forEach(rn => {\r\n                setRowVisible(rn, treeNode.expanded);\r\n            });\r\n        }\r\n    }\r\n\r\n    /** å±å¼æå®èç¹\r\n     * emit: è§¦åå±å¼äºä»¶\r\n     * render: æ°æ®éæ°å è½½\r\n     */\r\n    expandNode(id: string, emit = true, render = true) {\r\n        if (id) {\r\n            const rowNode = this.findRowNode(id);\r\n            if (rowNode) {\r\n                rowNode.node.expanded = true;\r\n                this.toggleVisible(rowNode.node);\r\n\r\n                if (render) {\r\n                    if (this.virtualized) {\r\n                        if (rowNode.node.children && rowNode.node.children.length) {\r\n                            this.renderVirtualRowNodes();\r\n                        }\r\n                    } else {\r\n                        this.detectChanges();\r\n                    }\r\n                }\r\n\r\n                if (emit) {\r\n                    this.expand.emit(rowNode.node);\r\n                }\r\n\r\n                this.setNewColumnsWidth();\r\n\r\n            } else {\r\n                this.writeConsole('Con\\'t find tree node widh id:' + id, 'error');\r\n            }\r\n        }\r\n    }\r\n\r\n    /** å±å¼ææèç¹ */\r\n    expandAll() {\r\n        this.state.rowNodes = this.state.rowNodes.map((row: RowNode) => {\r\n            row.node.expanded = true;\r\n            row.visible = true;\r\n            return row;\r\n        });\r\n\r\n        if (this.virtualized) {\r\n            this.renderVirtualRowNodes();\r\n        } else {\r\n            this.serializedValue = this.state.rowNodes;\r\n        }\r\n        this.setNewColumnsWidth();\r\n        this.expandAllNodes.emit();\r\n        this.detectChanges();\r\n    }\r\n\r\n    expandNodes(id: string) {\r\n        // const rowNode = this.findRowNode(id);\r\n        // const rootNode = this.getRoot(id);\r\n        // if (rowNode) {\r\n        //     const treeNode = rowNode.node;\r\n        //     treeNode.expanded = true;\r\n        //     rowNode.visible = true;\r\n        //     const parents = rowNode.parents;\r\n\r\n        //     this.state.rowNodes.filter(n => n.parents.indexOf(rootNode.id) > -1).forEach(r => {\r\n        //         if (parents.indexOf(r.id) > -1) {\r\n        //             r.visible = true;\r\n        //             r.node.expanded = true;\r\n        //         }\r\n        //     });\r\n\r\n\r\n        //     this.detectChanges();\r\n        // }\r\n    }\r\n\r\n    /** å±å¼æå®èç¹ä¸çææèç¹ */\r\n    expandAllNodesBy(rowNode: any) {\r\n        if (rowNode) {\r\n            const treeNode = rowNode.node;\r\n            treeNode.expanded = true;\r\n            rowNode.visible = true;\r\n\r\n            this.state.rowNodes.filter(n => n.parents.indexOf(rowNode.id) > -1).forEach(r => {\r\n                r.visible = true;\r\n                r.node.expanded = true;\r\n            });\r\n\r\n            this.detectChanges();\r\n            this.setNewColumnsWidth();\r\n        }\r\n    }\r\n\r\n    /** æå æå®èç¹ */\r\n    collapseNode(id: string) {\r\n        if (id) {\r\n            const rowNode = this.findRowNode(id);\r\n            if (rowNode) {\r\n                rowNode.node.expanded = false;\r\n                this.toggleVisible(rowNode.node);\r\n                this.detectChanges();\r\n                this.setNewColumnsWidth();\r\n                this.collapse.emit(rowNode.node);\r\n            } else {\r\n                this.writeConsole('Con\\'t find tree node widh id:' + id, 'error');\r\n            }\r\n        }\r\n    }\r\n    /** æå ææèç¹ */\r\n    collapseAll() {\r\n        this.state.rowNodes = this.state.rowNodes.map((row: RowNode) => {\r\n            row.node.expanded = false;\r\n            row.visible = !row.parent;\r\n            return row;\r\n        });\r\n\r\n        if (this.virtualized) {\r\n            this.renderVirtualRowNodes();\r\n        } else {\r\n            this.serializedValue = this.state.rowNodes;\r\n        }\r\n\r\n\r\n        this.collapseAllNodes.emit();\r\n        this.detectChanges();\r\n        this.setNewColumnsWidth();\r\n    }\r\n\r\n    getContainerOffset() {\r\n        const rect = this.containerElement.getBoundingClientRect();\r\n        return {\r\n            left: rect.left + document.body.scrollLeft,\r\n            top: rect.top + document.body.scrollTop\r\n        };\r\n    }\r\n\r\n    onColumnResizeBegin(event) {\r\n        const containerLeft = Math.round(this.getContainerOffset().left);\r\n        this.lastResizerHelperX = (event.pageX - containerLeft + this.containerElement.scrollLeft);\r\n        event.preventDefault();\r\n    }\r\n\r\n    onColumnResize(event) {\r\n        if (this.resizableColumns) {\r\n            const containerLeft = this.getContainerOffset().left;\r\n            this.renderer.addClass(this.containerElement, 'ui-unselectable-text');\r\n            this.resizerHelperVC.nativeElement.style.height = this.containerElement.offsetHeight + 'px';\r\n            this.resizerHelperVC.nativeElement.style.top = 0 + 'px';\r\n            this.resizerHelperVC.nativeElement.style.left = (event.pageX - containerLeft) + 'px';\r\n\r\n            this.resizerHelperVC.nativeElement.style.display = 'block';\r\n        }\r\n    }\r\n\r\n    onColumnResizeEnd(event: any, column: any) {\r\n        // åç§»é\r\n        const delta = this.resizerHelperVC.nativeElement.offsetLeft - this.lastResizerHelperX;\r\n        // åå®½\r\n        const columnWidth = column.offsetWidth;\r\n        // æ°å®½åº¦\r\n        const newColumnWidth = columnWidth + delta;\r\n        // æå°å®½åº¦\r\n        const minWidth = column.style.minWidth || 15;\r\n\r\n        let resizeColumnIndex = -1;\r\n        if (column.id) {\r\n            resizeColumnIndex = this.columns.findIndex(n => n.id === column.id);\r\n        } else {\r\n            const colField = column.getAttribute('field');\r\n            if (colField) {\r\n                resizeColumnIndex = this.columns.findIndex(n => n.field === colField);\r\n            }\r\n        }\r\n\r\n\r\n        if (!this.fitColumns) {\r\n            this.resizeColGroup(this.headerTable.nativeElement, resizeColumnIndex, newColumnWidth, 0);\r\n            this.resizeColGroup(this.bodyTable.nativeElement, resizeColumnIndex, newColumnWidth, 0);\r\n\r\n            if (this.columns[resizeColumnIndex]) {\r\n                this.columns[resizeColumnIndex].width = newColumnWidth;\r\n            }\r\n\r\n            this.sortColumnsByFixed(false);\r\n            this.setTableWidth(this.allColumnsWidth());\r\n\r\n            // update css.\r\n            const _colInfo = this.columns[resizeColumnIndex];\r\n            if (_colInfo) {\r\n                const ruleName = this.columnCssName(_colInfo);\r\n                const stylecss = ruleName + '{width:' + newColumnWidth + 'px}';\r\n                this.utils.appendCssRules([stylecss], this.styleElement.sheet);\r\n            }\r\n\r\n            const nextColumn = this.columns[resizeColumnIndex + 1];\r\n            if (nextColumn && nextColumn.fixed) {\r\n                const ruleName = this.columnCssName(nextColumn);\r\n                const stylecss = ruleName + '{' + nextColumn.fixed + ':' + nextColumn[nextColumn.fixed] + 'px}';\r\n                this.utils.appendCssRules([stylecss], this.styleElement.sheet);\r\n            }\r\n\r\n        } else {\r\n            if (newColumnWidth > minWidth) {\r\n                let nextColumn = column.nextElementSibling;\r\n                while (!nextColumn.offsetParent) {\r\n                    nextColumn = nextColumn.nextElementSibling;\r\n                }\r\n\r\n                if (nextColumn) {\r\n                    const nextColumnWidth = nextColumn.offsetWidth - delta;\r\n                    const nextColumnMinWidth = nextColumn.style.minWidth || 15;\r\n\r\n                    if (newColumnWidth > 15 && nextColumnWidth > nextColumnMinWidth) {\r\n                        this.resizeColGroup(this.headerTable.nativeElement, resizeColumnIndex, newColumnWidth, nextColumnWidth);\r\n                        this.resizeColGroup(this.bodyTable.nativeElement, resizeColumnIndex, newColumnWidth, nextColumnWidth);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        this.resizerHelperVC.nativeElement.style.display = 'none';\r\n        this.renderer.removeClass(this.containerElement, 'ui-unselectable-text');\r\n        this.psRef.directiveRef.update();\r\n    }\r\n\r\n    resizeColGroup(table, resizeColumnIndex, newColumnWidth, nextColumnWidth?: number) {\r\n        if (table) {\r\n            const colGroup = table.children[0].nodeName === 'COLGROUP' ? table.children[0] : null;\r\n\r\n            if (colGroup) {\r\n                const col = colGroup.children[resizeColumnIndex];\r\n                const nextCol = col.nextElementSibling;\r\n                col.style.width = newColumnWidth + 'px';\r\n\r\n\r\n                if (nextCol) {\r\n                    if (nextColumnWidth && this.fitColumns) {\r\n                        nextCol.style.width = nextColumnWidth + 'px';\r\n                    }\r\n                }\r\n            } else {\r\n                throw new Error('Scrollable tables require a colgroup to support resizable columns');\r\n            }\r\n        }\r\n    }\r\n\r\n    onSearch() {\r\n        this.state.searchRowNodes = null;\r\n        this.state.searched = !!this.searchData.value;\r\n        if (this.searchData.value) {\r\n            this.searchData.value = this.searchData.value.trim();\r\n        }\r\n        this.search.emit(this.searchData);\r\n    }\r\n\r\n    insert(node: TreeNode, parent?: TreeNode) {\r\n        if (parent) {\r\n            if (!parent.children) {\r\n                parent.children = [];\r\n            }\r\n            parent.children.push(node);\r\n\r\n            this.expandNode(parent.data[this.idField]);\r\n            this.appendNew.emit({ parent });\r\n        } else {\r\n            this.data.push(node);\r\n        }\r\n\r\n        this.updateSerializedValue();\r\n    }\r\n\r\n    append(data: { [key: string]: any }, parent?: TreeNode) {\r\n        if (data && data[this.idField]) {\r\n            this.insert({ data, id: data[this.idField] }, parent);\r\n        } else {\r\n            this.writeConsole('Please set id value.', 'warn');\r\n        }\r\n    }\r\n\r\n    private emitAppendNew(parent: TreeNode) {\r\n        if (this.virtualized) {\r\n            const nodePosY = this.psRef.directiveRef.elementRef.nativeElement.scrollTop;\r\n            this.updateSerializedValue(nodePosY);\r\n        } else {\r\n            this.updateSerializedValue();\r\n        }\r\n\r\n    }\r\n\r\n    appendChildren(nodes: TreeNode[], parent: TreeNode, emit = true) {\r\n        if (nodes && nodes.length) {\r\n            if (parent) {\r\n                parent.children.push(...nodes);\r\n                this.emitAppendNew(parent);\r\n                if (emit) {\r\n                    this.appendNew.emit({ parent });\r\n                }\r\n            } else {\r\n                throw new Error('æªæ¾å°ç¶çº§èç¹');\r\n            }\r\n        } else {\r\n            this.updateSerializedValue();\r\n            this.writeConsole('æ·»å å­èç¹çæ°æ®ä¸ºç©º', 'warn');\r\n        }\r\n    }\r\n\r\n    loadChildren(nodes: TreeNode[], parent: TreeNode, emit = true) {\r\n        if (parent) {\r\n            parent.children = nodes || [];\r\n            this.emitAppendNew(parent);\r\n            if (emit) {\r\n                this.appendNew.emit({ parent });\r\n            }\r\n        }\r\n    }\r\n\r\n    remove(nodeId: string) {\r\n        if (nodeId) {\r\n            const rowNode = this.findRowNode(nodeId);\r\n            if (rowNode) {\r\n                // remove(this.state.rowNodes, (n) => {\r\n                //     return n.id === nodeId;\r\n                // });\r\n                if (this.selectValue === nodeId) {\r\n                    this.selectedRow = null;\r\n                    this.selectValue = null;\r\n                }\r\n\r\n                if (rowNode.parent) {\r\n                    remove(rowNode.parent.children, (n) => {\r\n                        return n.data[this.idField] === nodeId;\r\n                    });\r\n                } else {\r\n                    remove(this.state.rowNodes, (n) => {\r\n                        return n.id === nodeId;\r\n                    });\r\n\r\n                    this.data = this.data.filter(n => n.data[this.idField] !== nodeId);\r\n                }\r\n                this.updateSerializedValue();\r\n                this.detectChanges();\r\n                this.ttService.onRemove(rowNode);\r\n                this.removed.emit(rowNode);\r\n            }\r\n        }\r\n    }\r\n\r\n    update(nodeId: string, data: { [key: string]: string }) {\r\n        if (nodeId && data) {\r\n            const rowNode = this.findRowNode(nodeId);\r\n            if (rowNode) {\r\n                rowNode.node.data = extend(rowNode.node.data, data);\r\n                this.detectChanges();\r\n                this.ttService.onUpdate(rowNode);\r\n                this.updated.emit(rowNode);\r\n            }\r\n        }\r\n    }\r\n\r\n    updateNodeProperty(nodeid: string, property: { [key: string]: any } ) {\r\n        const rowNode = this.findRowNode(nodeid);\r\n        if (rowNode && property) {\r\n            Object.keys(property).forEach(k => {\r\n                rowNode.node[k] = property[k];\r\n            });\r\n        }\r\n    }\r\n\r\n    private setScorllBodyHeight() {\r\n        this.scorllBodyHeight = this.height;\r\n\r\n        if (this.showFilterBar) {\r\n            this.scorllBodyHeight = this.scorllBodyHeight - 46;\r\n        }\r\n        if (this.fixedHeader && this.showHeader) {\r\n            if (this.headerBox && (this.headerWrap || this.useGroupHeader)) {\r\n                const hh = this.headerBox.nativeElement.clientHeight;\r\n                this.scorllBodyHeight = this.scorllBodyHeight - hh;\r\n            } else {\r\n                this.scorllBodyHeight = this.scorllBodyHeight - this.headerHeight;\r\n            }\r\n        }\r\n\r\n        if (this.pagination) {\r\n            this.scorllBodyHeight = this.scorllBodyHeight - this.pagerHeight;\r\n        }\r\n\r\n\r\n\r\n        this.detectChanges();\r\n    }\r\n\r\n    resize(size?: { width: number, height: number }) {\r\n        if (size) {\r\n            const w = parseInt('' + size.width, 10);\r\n            const h = parseInt('' + size.height, 10);\r\n\r\n            if (this.width === w && this.height === h) {\r\n                if (this.state.scrollY) {\r\n                    this.psRef.directiveRef.scrollToY(this.state.scrollY);\r\n                }\r\n\r\n                if (this.state.scrollX) {\r\n                    this.psRef.directiveRef.scrollToX(this.state.scrollX)\r\n                }\r\n\r\n                return;\r\n            }\r\n\r\n            this.width = w;\r\n            this.height = h;\r\n        }\r\n        this.setScorllBodyHeight();\r\n        if (this.data && this.data.length) {\r\n            this.renderVirtualRowNodes();\r\n        }\r\n\r\n        // setTimeout(() => {\r\n        //     if (this.psRef) {\r\n        //         this.psRef.directiveRef.update();\r\n        //     }\r\n        // }, 100);\r\n    }\r\n\r\n    loadData(data: TreeNode[]) {\r\n        this.data = data;\r\n    }\r\n\r\n    empty() {\r\n        this.data = [];\r\n    }\r\n\r\n    getCurrentAllRowNodes() {\r\n        if (this.state.searched && this.state.searchRowNodes && this.state.searchRowNodes.length) {\r\n            return this.state.searchRowNodes || this.state.rowNodes;\r\n        } else {\r\n            return this.state.rowNodes;\r\n        }\r\n    }\r\n\r\n    clearAll(detectChanges = true): TreeTableComponent {\r\n        this.state.rowNodes.filter(rn => rn.indeterminate).forEach(rn => {\r\n            rn.indeterminate = false;\r\n            this.ttService.onChangeCheckboxStatus(rn);\r\n        });\r\n\r\n        this.state.rowNodes = this.state.rowNodes.map((row: RowNode) => {\r\n            row.isChecked = false;\r\n            row.isSelected = false;\r\n            row.indeterminate = false;\r\n            return row;\r\n        });\r\n\r\n\r\n        // if (this.searchData && this.searchData.value) {\r\n        if (this.state.searched && this.state.searchRowNodes && this.state.searchRowNodes.length) {\r\n            this.serializedValue = this.state.searchRowNodes.map((row: RowNode) => {\r\n                row.isChecked = false;\r\n                row.isSelected = false;\r\n                row.indeterminate = false;\r\n                return row;\r\n            });\r\n        }\r\n\r\n        this.checkeds = [];\r\n        this.selections = [];\r\n        this.selectedRow = undefined;\r\n\r\n        if (this.showCheckAll && this.headerCheckboxCmp) {\r\n            this.headerCheckboxCmp.chkAll.nativeElement.indeterminate = false;\r\n            this.headerCheckboxCmp.checked = false;\r\n        }\r\n\r\n        if (detectChanges) {\r\n            this.detectChanges();\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    detectChanges(): TreeTableComponent {\r\n        this.cdRef.markForCheck();\r\n        // tslint:disable-next-line:no-string-literal\r\n        if (!this.cdRef['destroyed']) {\r\n            this.cdRef.detectChanges();\r\n        }\r\n        return this;\r\n    }\r\n\r\n    clearCheckeds(): TreeTableComponent {\r\n        if (this.checkeds && this.checkeds.length) {\r\n            this.findRowNodes(this.checkeds.map(tn => tn.data[this.idField])).forEach(rn => {\r\n                rn.isChecked = false;\r\n            });\r\n        }\r\n\r\n        this.checkeds = [];\r\n\r\n        if (this.showCheckAll && this.headerCheckboxCmp) {\r\n            this.headerCheckboxCmp.chkAll.nativeElement.indeterminate = false;\r\n            this.headerCheckboxCmp.checked = false;\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    clearSelections(): TreeTableComponent {\r\n\r\n        if (this.serializedValue && this.serializedValue.length) {\r\n            this.serializedValue.forEach(n => {\r\n                n.isSelected = false;\r\n            });\r\n        }\r\n\r\n        this.state.rowNodes.forEach(n => {\r\n            n.isSelected = false;\r\n        });\r\n\r\n        if (this.selections && this.selections.length) {\r\n            const nodeIds = this.selections.map(tn => tn.data[this.idField]);\r\n            this.findRowNodes(nodeIds).forEach(rn => {\r\n                rn.isSelected = false;\r\n                if (this.singleSelect) {\r\n                    rn.isChecked = false;\r\n                }\r\n            });\r\n        }\r\n\r\n        this.selections = undefined;\r\n        this.selectedRow = undefined;\r\n        return this;\r\n    }\r\n    /** éä¸­ç¬¬1ä¸ªå¯ä»¥éä¸­çèç¹ */\r\n    selectFirstNode() {\r\n        if (this.state.rowNodes && this.state.rowNodes.length) {\r\n            const firstCanSelectNode = this.state.rowNodes.find(n => n.node.selectable);\r\n            if (firstCanSelectNode) {\r\n                this.selectNode(firstCanSelectNode.id);\r\n            }\r\n        }\r\n    }\r\n\r\n    private scrollToCurrentRow(id: string) {\r\n        const trId = 'rownode-' + id;\r\n        // const trEle =    document.getElementById(trId);\r\n        const trEle = this.el.nativeElement.querySelector('#' + trId) || document.getElementById(trId);\r\n        if (trEle && trEle.closest('.farris-treetable') && trEle.closest('.farris-treetable').id === this.id) {\r\n            if (!this.isElementInViewport(trEle)) {\r\n                if (trEle.scrollIntoViewIfNeeded) {\r\n                    trEle.scrollIntoViewIfNeeded();\r\n                    return true;\r\n                }\r\n                const browserInfo = this.utils.getBrowserType();\r\n                if (browserInfo.ff && this.utils.getFFVer() < 58) {\r\n                    trEle.scrollIntoView();\r\n                } else {\r\n                    trEle.scrollIntoView({ block: 'nearest', inline: 'nearest' });\r\n                }\r\n            }\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    private isElementInViewport(el) {\r\n        const containerEl = this.el.nativeElement.querySelector('.farris-treetable-body');\r\n        if (!containerEl) {\r\n            return false;\r\n        }\r\n        const container = containerEl.getBoundingClientRect();\r\n        const viewPortHeight = container.height;\r\n        const offsetTop = el.offsetTop + this.topHideHeight;\r\n        const scrollTop = this.psRef.directiveRef.elementRef.nativeElement.scrollTop;\r\n        const top = offsetTop - scrollTop;\r\n        return  top >= 0 && top <= viewPortHeight;\r\n    }\r\n\r\n\r\n    scrollToCurrentNode() {\r\n        if (this.selectedRow) {\r\n            const id = this.selectedRow.id;\r\n            const result = this.scrollToCurrentRow(id);\r\n            if (!result) {\r\n                const rowNode = this.findRowNode(id);\r\n                const showRowsOnePager = Math.ceil(this.scorllBodyHeight / this.rowHeight ) + 1;\r\n                if (rowNode.parents && rowNode.parents.length) {\r\n                    rowNode.parents.forEach(pid => {\r\n                        this.expandNode(pid, false, false);\r\n                    });\r\n                } \r\n                const rowIndex = this.state.rowNodes.filter(n => n.visible).findIndex(n => n.id === id);\r\n                if (rowIndex < showRowsOnePager) {\r\n                    if (this.virtualized) {\r\n                        this.renderData(0);\r\n                    }\r\n                    setTimeout(() => {\r\n                        this.scrollToCurrentRow(id);\r\n                    });\r\n                    return;\r\n                }\r\n                const top = rowIndex * this.rowHeight;\r\n\r\n                if (this.virtualized) {\r\n                    this.renderData(top - this.rowHeight);\r\n                } else {\r\n                    this.scrollToY(top - this.rowHeight);\r\n                }\r\n                this.scrollToCurrentRow(id);\r\n            }\r\n        }\r\n    }\r\n\r\n    /** éä¸­æå®ID çèç¹,\r\n     * detectChanges: è§¦åèå¼æ£æ¥ï¼é»è®¤ä¸º true\r\n     * gotocurrent: ä½¿ç¨éä¸­èç¹å¯è§ï¼é»è®¤ä¸º true\r\n     */\r\n    selectNode(id: string, detectChanges = true, gotocurrent = true): TreeTableComponent {\r\n        if (!id) {\r\n            return this;\r\n        }\r\n        let node = this.findRowNode(id);\r\n        const emit = !this.selectedRow || (this.selectedRow && id !== this.selectedRow.id);\r\n        \r\n        if (node && emit) {\r\n            node.isSelected = true;\r\n            if (this.singleSelect || this.onlySelectSelf) {\r\n                this.clearSelections();\r\n                this.selections = [node.node];\r\n                if (this.checkOnSelect && this.showCheckbox) {\r\n                    node.isChecked = true;\r\n                    if (this.multiSelect) {\r\n                        this.setCheckeds(node);\r\n                    } else {\r\n                        this.clearCheckeds();\r\n                        this.checkeds = [node.node];\r\n                    }\r\n\r\n                    if (this.cascadeCheck && this.cascadeUp) {\r\n                        this.updateParentCheckboxStatus(node);\r\n                    }\r\n                }\r\n            } else {\r\n                this.setSelections(node);\r\n            }\r\n\r\n            this.selectedRow = node.node;\r\n            this.selectNodeChangedSubject.next(id);\r\n            this.nodeSelected.emit({ node: node.node, instance: this });\r\n\r\n            if (this.serializedValue.find(n=>n.id == this.selectedRow.id)) {\r\n                this.serializedValue.find(n=>n.id == this.selectedRow.id).isSelected = true;\r\n            }\r\n\r\n            if (detectChanges) {\r\n                this.detectChanges();\r\n            }\r\n            if (gotocurrent && this.fixedHeader) {\r\n                this.scrollToCurrentNode();\r\n            }\r\n        } else {\r\n            if (!node) {\r\n                this.selectedRow = null;\r\n                this.writeConsole(`æªæ¾å°IDä¸º ${id} çæ°æ®ï¼ï¼`)\r\n            }\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /** åæ¶éä¸­ */\r\n    unSelectNode(id: string, detectChanges = true) {\r\n        const rowNode = this.findRowNode(id);\r\n        if (rowNode) {\r\n            rowNode.isSelected = false;\r\n            if (this.singleSelect) {\r\n                this.clearSelections();\r\n                this.selectedRow = null;\r\n                rowNode.isChecked = false;\r\n                this.selections = [];\r\n            } else {\r\n                if (this.onlySelectSelf) {\r\n                    this.selections = [];\r\n                } else {\r\n                    this.setSelections(rowNode);\r\n                }\r\n            }\r\n\r\n            if (detectChanges) {\r\n                this.detectChanges();\r\n            }\r\n            this.nodeUnSelect.emit({ node: rowNode.node, instance: this });\r\n        } else {\r\n            this.writeConsole(`æªæ¾å°IDä¸º${id}çæ°æ®ï¼ï¼`);\r\n        }\r\n    }\r\n\r\n    /** éä¸­å¤è¡æ°æ® */\r\n    selectNodes(ids: string[], detectChanges = true, emitNodeSelected = false): TreeTableComponent {\r\n        if (ids && ids.length) {\r\n            const nodes = this.findRowNodes(ids).map(rn => {\r\n                rn.isSelected = true;\r\n                this.setSelections(rn);\r\n                return rn.node;\r\n            });\r\n\r\n            this.selections = [...this.selections];\r\n\r\n            if (detectChanges) {\r\n                this.detectChanges();\r\n            }\r\n\r\n            this.selectNodeChangedSubject.next(ids.join(','));\r\n            if (emitNodeSelected) {\r\n                this.nodeSelected.emit({ node: nodes, instance: this });\r\n            }\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /** åæ¶éä¸­ */\r\n    unSelectNodes(ids?: string[]) {\r\n        if (ids && ids.length) {\r\n            const rownodes = this.findRowNodes(ids);\r\n            if (rownodes && rownodes.length) {\r\n                rownodes.forEach(rn => {\r\n                    rn.isSelected = false;\r\n                    this.setSelections(rn);\r\n                });\r\n                this.selections = [...this.selections];\r\n                this.detectChanges();\r\n                this.nodeUnSelect.emit({ node: rownodes.map(r => r.node), instance: this });\r\n            }\r\n        } else {\r\n            this.clearSelections();\r\n            this.detectChanges();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * é©éæå®çèç¹\r\n     * @param updateParentCheckboxStatus: æ¯å¦æ´æ°ç¶çº§èç¹checkbox ç¶æ, é»è®¤ä¸º true\r\n     * @param detectChanges è§¦ååæ´æ£æµãé»è®¤ä¸º true\r\n     */\r\n    checkedNode(id: string, updateParentCheckboxStatus = true, detectChanges = true) {\r\n        if (this.isEnableMultiSelect()) {\r\n            const node = this.findRowNode(id);\r\n            if (node) {\r\n                node.isChecked = true;\r\n                if (!this.isChecked(node.node)) {\r\n                    // this.checkeds = [...this.checkeds || [], node.node];\r\n                    this.setCheckeds(node, false);\r\n                    if (updateParentCheckboxStatus && this.cascadeCheck && this.cascadeUp) {\r\n                        this.updateParentCheckboxStatus(node);\r\n                    }\r\n                }\r\n                if (detectChanges) {\r\n                    this.detectChanges();\r\n                }\r\n                this.nodeChecked.emit({ originalEvent: null, node: node.node, instance: this });\r\n            } else {\r\n                this.writeConsole(`æªæ¾å°IDä¸º${id}çæ°æ®ï¼ï¼`);\r\n            }\r\n        }\r\n    }\r\n\r\n    unCheckedNode(id: string, updateParentCheckboxStatus = true, ) {\r\n        if (this.isEnableMultiSelect()) {\r\n            const rownode = this.findRowNode(id);\r\n\r\n            if (rownode) {\r\n                rownode.isChecked = false;\r\n                this.setCheckeds(rownode);\r\n                if (this.selectOnCheck) {\r\n                    rownode.isSelected = false;\r\n                    this.setSelections(rownode);\r\n                }\r\n                \r\n                if (this.selectedRow && this.selectedRow.id === id) {\r\n                    this.selectedRow = null;\r\n                }\r\n\r\n                if (this.singleSelect || !this.cascadeCheck) {\r\n                    this.updateNodeStatus();\r\n\r\n                    if (updateParentCheckboxStatus && this.cascadeCheck && this.cascadeUp) {\r\n                        this.updateParentCheckboxStatus(rownode);\r\n                    }\r\n\r\n                    if (this.checkValues) {\r\n                        this.checkValues = this.checkValues.filter(n => n !== id);\r\n                        this.checkValuesChange.emit(this.checkValues);\r\n                    }\r\n\r\n                    this.detectChanges();\r\n                    this.nodeUnChecked.emit({ node: rownode, instance: this });\r\n                } else {\r\n                    const unNodes = this.cascadeNodes(rownode, false);\r\n                    this.checkeds = [...this.checkeds];\r\n                    this.checkValuesChange.emit(this.checkValues);\r\n\r\n                    this.detectChanges();\r\n                    this.nodeUnChecked.emit({ node: rownode, nodes: unNodes, instance: this });\r\n                }\r\n\r\n\r\n            } else {\r\n                this.writeConsole(`æªæ¾å°IDä¸º${id}çæ°æ®ï¼ï¼`);\r\n            }\r\n        }\r\n    }\r\n\r\n    private _checkedNodes(ids: string[], checked: boolean) {\r\n        const parentIDS = [];\r\n        const nodes = this.findRowNodes(ids).map(rn => {\r\n            parentIDS.push(rn.parents);\r\n            rn.isChecked = checked;\r\n            this.setCheckeds(rn, false);\r\n            return rn.node;\r\n        });\r\n        this.checkeds = [...this.checkeds];\r\n        if (this.cascadeCheck && this.cascadeUp) {\r\n            // æ´æ°ç¶èç¹å¤æ¡çéä¸­ç¶æ\r\n            this.updateParentsCheckStatus(parentIDS);\r\n        }\r\n\r\n        return nodes;\r\n    }\r\n\r\n    /** æ¹ééä¸­èç¹\r\n     * @param ids: id éå\r\n     * @param detectChanges: boolean  é»è®¤ä¸º true ,æ¯å¦è§¦ååæ´æ£æµ\r\n     * closeCascade:  æ§è¡åæ¶é©éæ¶æ¯å¦å³é­çº§èåè½ãé»è®¤ä¸º false\r\n     *      è®¾ä¸ºtrueæ¶ï¼é©éå°ç¦ç¨çº§èçåè½ï¼ä»å¤çå½åèç¹çéä¸­ç¶æãæ§è¡å®æ¯åï¼æ¢å¤ååççº§èéé¡¹ã\r\n     */\r\n    checkedNodes(ids: any[], detectChanges = true, emit = true, closeCascade?: boolean) {\r\n        if (this.isEnableMultiSelect()) {\r\n            if (ids && ids.length) {\r\n\r\n                const _cascade = this.cascadeCheck;\r\n                if (closeCascade && _cascade) {\r\n                    this.cascadeCheck = false;\r\n                }\r\n\r\n                const nodes = this._checkedNodes(ids, true);\r\n\r\n                if (closeCascade && _cascade) {\r\n                    // æ¢å¤çº§è\r\n                    this.cascadeCheck = true;\r\n                }\r\n\r\n                this.updateAllCheckboxStatus();\r\n\r\n                // this.checkeds = nodes;\r\n                if (detectChanges) {\r\n                    this.detectChanges();\r\n                }\r\n\r\n                if (emit) {\r\n                    this.nodeChecked.emit({ originalEvent: null, node: nodes, nodes, instance: this });\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * åæ¶éä¸­çèç¹.\r\n     * ids: æ è¯Id æ°ç»\r\n     * closeCascade: æ§è¡åæ¶é©éæ¶æ¯å¦å³é­çº§èåè½ãé»è®¤ä¸º false\r\n     *     è®¾ä¸ºtrueæ¶ï¼é©éå°ç¦ç¨çº§èçåè½ï¼ä»å¤çå½åèç¹çéä¸­ç¶æãæ§è¡å®æ¯åï¼æ¢å¤ååççº§èéé¡¹ã\r\n     * emit: æ¯å¦è§¦ååæ¶å¾éäºä»¶ãé»è®¤ä¸º true\r\n     */\r\n    unCheckedNodes(ids: string[], closeCascade?: boolean, emit = true) {\r\n\r\n        if (ids && ids.length) {\r\n            const _cascade = this.cascadeCheck;\r\n            if (closeCascade && _cascade) {\r\n                this.cascadeCheck = false;\r\n            }\r\n\r\n            const nodes = this._checkedNodes(ids, false);\r\n\r\n            if (closeCascade && _cascade) {\r\n                this.cascadeCheck = true;\r\n            }\r\n\r\n            this.detectChanges();\r\n            // this.checkeds = nodes;\r\n            if (emit) {\r\n                this.nodeUnChecked.emit({ originalEvent: null, node: nodes, nodes, instance: this });\r\n            }\r\n        } else {\r\n            this.clearCheckeds();\r\n            this.detectChanges();\r\n        }\r\n    }\r\n\r\n    findRowNode(id: string): RowNode {\r\n        if (id) {\r\n            if (this.state.rowNodes) {\r\n                return this.state.rowNodes.find(n => n.id === id);\r\n            }\r\n        }\r\n\r\n        return undefined;\r\n    }\r\n\r\n    /** å°å¨ v0.2.x åºå¼ï¼è¯·ä½¿ç¨ findRowNode æ¹æ³ */\r\n    findNode(id: string): RowNode {\r\n        return this.findRowNode(id);\r\n    }\r\n\r\n    /**\r\n     * æ ¹æ®å½åèç¹IDï¼è·åé¡¶çº§ç¶èç¹\r\n     * @param id å½åèç¹ID\r\n     * @returns è¿åé¡¶çº§èç¹\r\n     */\r\n    getRoot(id: string) {\r\n        const rowNode = this.findRowNode(id);\r\n        if (rowNode) {\r\n            if (rowNode.parents && rowNode.parents.length) {\r\n                return this.findRowNode(rowNode.parents[0]);\r\n            }\r\n            return rowNode;\r\n        }\r\n        return null;\r\n    }\r\n\r\n\r\n    findRowNodes(ids: string[]): RowNode[] {\r\n        return this.state.rowNodes.filter(rn => ids.indexOf(rn.id) > -1);\r\n    }\r\n\r\n    checkAllNodes(args?: any) {\r\n        let rowNodes = this.getCurrentAllRowNodes();\r\n        rowNodes = rowNodes.filter(n => (n.node.selectable || n.node.selectable === undefined));\r\n\r\n        this.checkeds = rowNodes.map(n => {\r\n            n.indeterminate = false;\r\n            this.ttService.onChangeCheckboxStatus(n);\r\n            if (n.node.selectable || n.node.selectable === undefined) {\r\n                n.isChecked = true;\r\n            }\r\n            return n.node;\r\n        });\r\n\r\n        if (this.selectOnCheck && !this.onlySelectSelf) {\r\n            this.selections = rowNodes.map(n => {\r\n                if (n.node.selectable || n.node.selectable === undefined) {\r\n                    n.isSelected = true;\r\n                }\r\n                return n.node;\r\n            });\r\n        }\r\n\r\n        if (this.state.searched) {\r\n            rowNodes.forEach(rn => {\r\n                const row = this.state.rowNodes.find(n => n.id === rn.id);\r\n                if (row) {\r\n                    row.isSelected = rn.isSelected;\r\n                    row.isChecked = rn.isChecked;\r\n                }\r\n            });\r\n        }\r\n\r\n        this.checkAll.emit(args);\r\n        this.detectChanges();\r\n    }\r\n\r\n    unCheckAllNodes(args?: any) {\r\n        this.clearAll();\r\n        this.unCheckAll.emit(args);\r\n        this.detectChanges();\r\n    }\r\n\r\n    private isEnableMultiSelect() {\r\n        if (this.singleSelect) {\r\n            if (!this.showCheckbox) {\r\n                return false;\r\n            }\r\n            return true;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    // ä»æ°æ®ä¸­è·åèç¹å¾æ \r\n    // iconField ä¸º object\r\n    //      å¦æ å±å¼å¾æ ä¸ºç©ºï¼æå å¾æ ä¸ä¸ºç©ºï¼æåä¹ï¼åå±å¼ä¸æå å¾æ ä¿æä¸è³ï¼\r\n    //      å¦æ å¶å­å¾æ ä¸ºç©ºï¼åä½¿ç¨ç»ä»¶é»è®¤çå¾æ \r\n    // iconField ä¸º å­ç¬¦ä¸²ï¼ åå¶å­ å±å¼ æå  å¾æ ä½¿ç¨åä¸ä¸ªã å¦æä¸ºç©ºï¼ åä½¿ç¨ç»ä»¶é»è®¤å¾æ \r\n    private getNodeIconFromData(tn: TreeNode) {\r\n        let leaf = null;\r\n        let expand = null;\r\n        let collapse = null;\r\n        if (this.useIconFromData) {\r\n            if (this.iconField) {\r\n                let _iconField = '';\r\n                if (typeof this.iconField === 'string') {\r\n                    _iconField = this.iconField;\r\n                    if (tn[_iconField]) {\r\n                        leaf = tn[_iconField];\r\n                    } else {\r\n                        leaf = this.utils.getValue(_iconField, tn.data);\r\n                    }\r\n\r\n                    expand = collapse = leaf;\r\n                } else {\r\n                    if (this.iconField.leaf) {\r\n                        leaf = this.utils.getValue(this.iconField.leaf, tn.data);\r\n                    }\r\n                    if (this.iconField.expand) {\r\n                        expand = this.utils.getValue(this.iconField.expand, tn.data);\r\n                    }\r\n                    if (this.iconField.collapse) {\r\n                        collapse = this.utils.getValue(this.iconField.collapse, tn.data);\r\n                    }\r\n\r\n                    if (expand && !collapse) {\r\n                        collapse = expand;\r\n                    }\r\n\r\n                    if (!expand && collapse) {\r\n                        expand = collapse;\r\n                    }\r\n\r\n                }\r\n            }\r\n        }\r\n\r\n        return {\r\n            leaf, expand, collapse\r\n        };\r\n    }\r\n\r\n    getTreeIcon(treeNode: TreeNode) {\r\n        const tn = treeNode;\r\n        let leafIcon = this.leafIcon || 'file';\r\n        let expandIcon = this.expandIcon || 'folder-open';\r\n        let collapseIcon = this.collapseIcon || 'folder';\r\n        const loading = 'f-loading-round';\r\n\r\n        if (tn['showLoading']) {\r\n            return { [loading]: true };\r\n        }\r\n\r\n        if (tn.icon) {\r\n            leafIcon = tn.icon;\r\n        }\r\n\r\n        if (tn.expandedIcon) {\r\n            expandIcon = tn.expandedIcon;\r\n        }\r\n\r\n        if (tn.collapsedIcon) {\r\n            collapseIcon = tn.collapsedIcon;\r\n        }\r\n\r\n        if (this.useIconFromData) {\r\n            const { leaf, expand, collapse } = this.getNodeIconFromData(treeNode);\r\n            if (this.whenDataIconEmptyUseDefault) {\r\n                if (leaf) {\r\n                    leafIcon = leaf;\r\n                }\r\n                if (expand) {\r\n                    expandIcon = expand;\r\n                }\r\n                if (collapse) {\r\n                    collapseIcon = collapse;\r\n                }\r\n            } else {\r\n                leafIcon = leaf || '';\r\n                expandIcon = expand || '';\r\n                collapseIcon = collapse || '';\r\n            }\r\n        }\r\n\r\n\r\n        const collapsedExpression = (!tn.leaf || !!(tn.children && tn.children.length)) && !tn.expanded;\r\n        const expandedExpression = !!tn.expanded;\r\n        const leafExpression = tn.leaf === undefined ? (!tn.children || !tn.children.length) : tn.leaf;\r\n\r\n        const icons = {};\r\n\r\n        if (leafExpression && leafIcon) {\r\n            icons[leafIcon] = leafExpression;\r\n        } else {\r\n            if (tn.expanded && expandIcon) {\r\n                icons[expandIcon] = expandedExpression;\r\n            } else {\r\n                if (collapseIcon) {\r\n                    icons[collapseIcon] = collapsedExpression;\r\n                }\r\n            }\r\n        }\r\n\r\n        if (this.iconCls) {\r\n            icons[this.iconCls] = true;\r\n        }\r\n\r\n        return icons;\r\n    }\r\n\r\n    private compare(a, b) {\r\n        if (typeof a === 'string') {\r\n            return a.localeCompare(b);\r\n        } else {\r\n            return a === b ? 0 : (a > b ? 1 : -1);\r\n        }\r\n    }\r\n    private _sort(r1, r2) {\r\n        let r = 0;\r\n        const sortFields = this.sortName.split(',');\r\n        const orders = this.sortOrder.split(',');\r\n\r\n        if (!this.sortName) {\r\n            return r;\r\n        }\r\n\r\n        for (let i = 0; i < sortFields.length; i++) {\r\n            const sn = sortFields[i];\r\n            const so = orders[i];\r\n\r\n            const col = this.columns.find(c => c.field === sn);\r\n\r\n            const orderby = col.sorter || this.compare;\r\n            let v1 = this.utils.getValue(sn, r1.data);\r\n            if (v1 === null || v1 === undefined) {\r\n                v1 = '';\r\n            }\r\n            let v2 = this.utils.getValue(sn, r2.data);\r\n            if (v2 === null || v2 === undefined) {\r\n                v2 = '';\r\n            }\r\n            r = orderby(v1, v2);\r\n            if (r !== 0) {\r\n                return r * (so === 'asc' ? 1 : -1);\r\n            }\r\n        }\r\n        return r;\r\n    }\r\n\r\n    clientSort() {\r\n        const sortedData = this.data.sort(this._sort.bind(this));\r\n\r\n        const sortChildNodes = (childNodes) => {\r\n            childNodes = childNodes.sort(this._sort.bind(this));\r\n            childNodes.forEach(n => {\r\n                if (n.children && n.children.length) {\r\n                    n.children = n.children.sort(this._sort.bind(this));\r\n                    sortChildNodes(n.children);\r\n                }\r\n            });\r\n            return childNodes;\r\n        };\r\n\r\n        sortedData.forEach(c => {\r\n            c.children = sortChildNodes(c.children);\r\n        });\r\n\r\n        this.loadData(sortedData);\r\n    }\r\n\r\n    onSortColumnClick($event, col) {\r\n        if (!col.sortable) {\r\n            return;\r\n        }\r\n        const sortName = this.sortName;\r\n        const sortOrder = this.sortOrder;\r\n        let sortFields = [];\r\n        let sortOrders = [];\r\n        if (sortName) {\r\n            sortFields = sortName.split(',');\r\n            sortOrders = sortOrder.split(',');\r\n        }\r\n\r\n        const colOrder = col.order || 'asc';\r\n        let newOrder = colOrder;\r\n        const i = sortFields.findIndex(n => n === col.field);\r\n        if (i >= 0) {\r\n            const _order = sortOrders[i] === 'asc' ? 'desc' : 'asc';\r\n            newOrder = _order;\r\n            if (this.multiSort && newOrder === 'asc') {\r\n                newOrder = undefined;\r\n                sortFields.splice(i, 1);\r\n                sortOrders.splice(i, 1);\r\n            } else {\r\n                sortOrders[i] = _order;\r\n            }\r\n\r\n        } else {\r\n            if (this.multiSort) {\r\n                sortFields.push(col.field);\r\n                sortOrders.push(colOrder);\r\n            } else {\r\n                sortFields = [col.field];\r\n                sortOrders = [colOrder];\r\n            }\r\n        }\r\n\r\n        col.order = newOrder;\r\n\r\n        this.sortName = sortFields.join(',');\r\n        this.sortOrder = sortOrders.join(',');\r\n\r\n        if (!this.multiSort) {\r\n\r\n            const updateFieldOrder = (cols: TreeTableColumn[]) => {\r\n                if (!cols || !cols.length) {\r\n                    return;\r\n                }\r\n                cols.forEach(c => {\r\n                    c.order = undefined;\r\n                    const k = sortFields.findIndex(f => f === c.field);\r\n                    if (k >= 0) {\r\n                        c.order = sortOrders[k];\r\n                    }\r\n                });\r\n            };\r\n\r\n            updateFieldOrder(this.columns);\r\n            this.cdRef.detectChanges();\r\n        }\r\n\r\n        this.beforeSortColumn(this.sortName, this.sortOrder).subscribe(() => {\r\n            if (this.remoteSort) {\r\n                // this.reload();\r\n            } else {\r\n                this.clientSort();\r\n            }\r\n\r\n            this.columnSorted.emit({ sortName: this.sortName, sortOrder: this.sortOrder });\r\n        });\r\n    }\r\n\r\n    /** æ¥è¯¢å·¥å·æ¡åç«¯å­ç¬¦æ¥è¯¢ */\r\n    findKeyWords($event) {\r\n        const searchValue = $event.value;\r\n        const field = $event.field;\r\n        this.findField = field;\r\n        if (searchValue && searchValue.length >= 2) {\r\n            this.findValue = searchValue;\r\n\r\n            if (!field) {\r\n                this.writeConsole('Please set a field for the FindField property.', 'warn');\r\n                return;\r\n            }\r\n\r\n            const result = this.searchHandle.searchOnClient(field, searchValue, this.state.rowNodes);\r\n\r\n            if (result && result.length) {\r\n                this.findResult = result.sort((a, b) => a.index === b.index ? 0 : (a.index > b.index ? 1 : -1));\r\n                const firstRowIndex = result[0].index;\r\n\r\n                this.findCount = result.length;\r\n\r\n                const parents = this.searchHandle.findParents(result, this.state.rowNodes);\r\n\r\n                this.findCurrent = 1;\r\n                [...parents, ...result].forEach((r: RowNode) => {\r\n                    this.expandNode(r.id);\r\n                });\r\n\r\n                let y = 0;\r\n                this.state.rowNodes.forEach((row: RowNode, index: number) => {\r\n                    if (row.visible && firstRowIndex > index) {\r\n                        y += this.rowHeight;\r\n                    }\r\n                });\r\n                if (this.psRef && this.psRef.directiveRef) {\r\n                    this.psRef.directiveRef.scrollToY(y - 30);\r\n                }\r\n\r\n                this.highLightKeywords();\r\n            } else {\r\n                this.findResult = [];\r\n                this.findCurrent = 0;\r\n                this.findCount = 0;\r\n            }\r\n        } else {\r\n            this.resetFindText();\r\n            this.cdRef.detectChanges();\r\n        }\r\n    }\r\n    closeFindPanel() {\r\n        this.showFindInput = false;\r\n        this.resetFindText();\r\n        this.cdRef.detectChanges();\r\n    }\r\n\r\n    private highLightKeywords() {\r\n        this.ngZone.runOutsideAngular(() => {\r\n            setTimeout(() => {\r\n                const allHighLights = this.el.nativeElement.querySelectorAll('.search-highlight');\r\n                if (!allHighLights.length) {\r\n                    return;\r\n                }\r\n                // this.findResult = this.findResult.concat(Array.from(allHighLights));\r\n                // this.findResult = Array.from(new Set(this.findResult));\r\n                // this.findCount = allHighLights.length;\r\n                this.cdRef.detectChanges();\r\n                this.renderer.addClass(allHighLights[0], 'active');\r\n            }, 100);\r\n        });\r\n    }\r\n\r\n    private resetFindText() {\r\n        this.findValue = '';\r\n        this.findCurrent = 0;\r\n        this.findCount = 0;\r\n        this.findResult = [];\r\n    }\r\n\r\n    nextFindValue(step) {\r\n        if (!this.findResult || !this.findResult.length) {\r\n            return;\r\n        }\r\n        const allHighLights = Array.from(this.el.nativeElement.querySelectorAll('.search-highlight'));\r\n\r\n        if (this.findCurrent === this.findResult.length) {\r\n            this.findCurrent = 1;\r\n        } else {\r\n            if (step) {\r\n                this.findCurrent = this.findCurrent + step;\r\n                if (step === -1) {\r\n                    if (this.findCurrent <= 0) {\r\n                        this.findCurrent = 1;\r\n                    }\r\n                }\r\n            } else {\r\n                this.findCurrent++;\r\n            }\r\n        }\r\n\r\n        const active = this.el.nativeElement.querySelector('.search-highlight.active');\r\n\r\n        let _index = allHighLights.indexOf(active);\r\n\r\n        if (active) {\r\n            this.renderer.removeClass(active, 'active');\r\n        }\r\n\r\n        if (this.virtualized) {\r\n\r\n            _index += !step ? 1 : step;\r\n\r\n            if (allHighLights[_index]) {\r\n                this.renderer.addClass(allHighLights[_index], 'active');\r\n\r\n            } else {\r\n                // åæ»å¨æå®ä½ç½®\r\n                const nextRow = this.findResult[this.findCurrent - 1];\r\n                let y = 0;\r\n                this.state.rowNodes.forEach((row: RowNode, index: number) => {\r\n                    if (row.visible && nextRow.index > index) {\r\n                        y += this.rowHeight;\r\n                    }\r\n                });\r\n\r\n                if (this.psRef && this.psRef.directiveRef) {\r\n                    this.psRef.directiveRef.scrollToY(y - 30, 200);\r\n                }\r\n                this.ngZone.runOutsideAngular(() => {\r\n                    setTimeout(() => {\r\n                        const keyWords = this.el.nativeElement.querySelectorAll('.search-highlight');\r\n                        this.renderer.addClass(keyWords[0], 'active');\r\n                    }, 100);\r\n                });\r\n            }\r\n        } else {\r\n            const currentEl: any = allHighLights[this.findCurrent - 1];\r\n            if (currentEl) {\r\n                this.renderer.addClass(currentEl, 'active');\r\n                if (this.psRef && this.psRef.directiveRef) {\r\n                    const sTop = currentEl.closest('td').offsetTop - 30;\r\n                    this.psRef.directiveRef.scrollToY(sTop, 200);\r\n                }\r\n            }\r\n        }\r\n\r\n\r\n        this.cdRef.detectChanges();\r\n    }\r\n\r\n    scrollToY(y: number, animations = 200) {\r\n        this.state.scrollY = y || 0;\r\n        this.psRef.directiveRef.scrollToY(y, animations);\r\n    }\r\n\r\n    private showOrHideColumn(field: string | string[], isHide: boolean) {\r\n        if (Array.isArray(field)) {\r\n            this.columns.forEach(n => {\r\n                if (field.indexOf(n.field) > -1) {\r\n                    n.visible = !isHide;\r\n                }\r\n            });\r\n        } else {\r\n            this.columns.forEach(n => {\r\n                if (field === n.field) {\r\n                    n.visible = !isHide;\r\n                }\r\n            });\r\n        }\r\n\r\n        this.columnsChanged();\r\n    }\r\n\r\n    showColumn(field: string | string[]) {\r\n        this.showOrHideColumn(field, false);\r\n    }\r\n\r\n    hideColumn(field: string | string[]) {\r\n        this.showOrHideColumn(field, true);\r\n    }\r\n\r\n    showChildsLoading(parentNode: TreeNode) {\r\n        const colspan = this.columns.filter(n => n.visible !== false).length;\r\n        const data = { [this.idField]: 'æ­£å¨å è½½ä¸­....', __colspan__: colspan };\r\n        this.loadChildren([{ data, __childs_loading__: true }], parentNode, false);\r\n    }\r\n\r\n    onChildsPageChanged($event) {\r\n        this.childsPageChanged.emit($event);\r\n    }\r\n\r\n    private trId2DataId(tr) {\r\n        return tr.id.replace('rownode-', '');\r\n    }\r\n\r\n\r\n    // å¿«æ·é®\r\n    onKeydownEvent($event) {\r\n        if (!$event || !this.singleSelect || !this.data || !this.data.length) {\r\n            return;\r\n        }\r\n\r\n        const keys = ['ArrowUp', 'ArrowDown', 'ArrowLeft', 'ArrowRight'];\r\n\r\n        if (!keys.includes($event.key) || $event.target.nodeName === 'INPUT') {\r\n            return;\r\n        }\r\n\r\n        $event.stopPropagation();\r\n        $event.preventDefault();\r\n        this.inputGroup.textbox.nativeElement.blur();\r\n        let newIdx;\r\n        const trs = Array.from(this.bodyTable.nativeElement.querySelectorAll('tr'));\r\n        const trCount = trs.length;\r\n        let selectedTrIndex = -1;\r\n\r\n        if (this.selectedRow) {\r\n            selectedTrIndex = trs.findIndex((n: any) => this.trId2DataId(n) === this.selectedRow.id);\r\n        }\r\n\r\n        if ($event.code === 'ArrowDown') {\r\n            newIdx = selectedTrIndex + 1;\r\n        } else if ($event.code === 'ArrowUp') {\r\n            if (selectedTrIndex !== -1) {\r\n                newIdx = selectedTrIndex - 1;\r\n            }\r\n        } else {\r\n            if (this.selectedRow && ($event.code === 'ArrowRight' || $event.code === 'ArrowLeft')) {\r\n                this.toggleExpand(this.selectedRow);\r\n            }\r\n\r\n            return;\r\n        }\r\n\r\n        if (newIdx >= 0 && newIdx < trCount) {\r\n            const _tr = trs[newIdx] as any;\r\n            if (_tr) {\r\n                const id = this.trId2DataId(_tr);\r\n                this.selectNode(id);\r\n                _tr.scrollIntoView({ block: 'nearest' });\r\n            }\r\n        }\r\n    }\r\n\r\n    onBeforeShowContextMenu = (e: any) => {\r\n        // row_1_fixedleft  row_1  row_1_fixedright\r\n        const { contextMenuDom, event } = e;\r\n\r\n        let rowID = event.target.id;\r\n\r\n        if (contextMenuDom) {\r\n            rowID = this.trId2DataId(contextMenuDom);\r\n            const rowNode = this.findRowNode(rowID);\r\n\r\n            let go$ = of({show: true});\r\n            if (this.beforeShowContextMenu) {\r\n                go$ = this.beforeShowContextMenu({ data: rowNode, tree: this });\r\n            }\r\n\r\n            return go$.pipe(\r\n                switchMap((r: any) => {\r\n                    if (r.show) {\r\n\r\n                        if (r.menus) {\r\n                            this.contextMenuItems = r.menus;\r\n                            this.detectChanges();\r\n                        }\r\n\r\n                        const viewportW = contextMenuDom.closest('.farris-treetable').offsetWidth;\r\n                        const targetW = contextMenuDom.offsetWidth;\r\n\r\n                        const focusTargetWidth = viewportW > targetW ? targetW : viewportW;\r\n                        return of({ show: true, data: { data: rowNode, tree: this }, focusTargetWidth });\r\n                    } else {\r\n                        return of({ show: false });\r\n                    }\r\n                })\r\n            );\r\n        }\r\n        return of({ show: false });\r\n    }\r\n\r\n    /** æ ¹æ®ä¼ å¥çç¶çº§IDï¼è·åææå­çº§èç¹ */\r\n    getChildNodes(parentId: string): RowNode[] {\r\n        let nodes = [];\r\n        if (parentId) {\r\n            const rowNode = this.findRowNode(parentId);\r\n            if (rowNode && rowNode.node.children && rowNode.node.children.length) {\r\n                rowNode.node.children.forEach((rn: RowNode) => {\r\n                    if (rn.node.selectable) {\r\n                        nodes.push(rn);\r\n                        nodes =  nodes.concat(this.getChildNodes(rn.id));\r\n                    }\r\n                })\r\n            }\r\n\r\n            return nodes;\r\n        }\r\n        return []\r\n    }\r\n\r\n    /** æ ¹æ®ä¼ å¥çèç¹IDï¼ è·åææç¶çº§èç¹ */\r\n    getParentNodes(id: string): RowNode[] {\r\n        let nodes = [];\r\n        if (id) {\r\n            const rowNode = this.findRowNode(id);\r\n            if (rowNode && rowNode.parents && rowNode.parents.length) {\r\n                rowNode.parents.forEach((n) => {\r\n                    const rn = this.findRowNode(n);\r\n                    if (rn && rn.node.selectable) {\r\n                        nodes.push(rn);\r\n                    }\r\n                })\r\n            }\r\n\r\n            return nodes;\r\n        }\r\n        return []\r\n    }\r\n\r\n}\r\n\r\n\r\n@Component({\r\n    selector: '[treeTableBody]',\r\n    template: `\r\n        <ng-template ngFor let-serializedNode let-rowIndex=\"index\" [ngForOf]=\"tt.serializedValue\">\r\n            <ng-container *ngIf=\"serializedNode.visible\">\r\n                <ng-container\r\n                    *ngTemplateOutlet=\"template;\r\n                        context: {$implicit: serializedNode, node: serializedNode.node,\r\n                        rowData: serializedNode.node.data, rowIndex: rowIndex, columns: columns}\">\r\n                </ng-container>\r\n            </ng-container>\r\n        </ng-template>\r\n    `\r\n})\r\nexport class TTBodyComponent {\r\n    /**\r\n     * åéå\r\n     */\r\n    @Input() columns: any[];\r\n\r\n    /** è¡¨ä½æ¨¡æ¿ */\r\n    @Input() template: TemplateRef<any>;\r\n\r\n\r\n    constructor(public tt: TreeTableComponent) { }\r\n}\r\n\r\n// [style.marginLeft]=\"rowNode.level * 16 + 'px'\"\r\n\r\n/**\r\n * æ èç¹å±å¼æå \r\n */\r\n@Component({\r\n    selector: 'farris-treeTableToggler',\r\n    template: `\r\n    <a href=\"javascript:void(0)\" #toggler\r\n            class=\"treenode-fold\" *ngIf=\"showLines\"\r\n            [ngClass]=\"rowNode.node.expanded ? tt.unfoldIcon : tt.foldIcon\"\r\n            [style.display]=\"isShowTriangle ? '' : 'none'\"\r\n            (click)=\"onClick($event)\"></a>\r\n\r\n    <a href=\"javascript:void(0)\" #toggler\r\n            class=\"treenode-fold\"  *ngIf=\"!showLines\"\r\n            [ngClass]=\"rowNode.node.expanded ? tt.unfoldIcon : tt.foldIcon\"\r\n            [style.marginLeft.px]=\"rowNode.level * indentSpacing\"\r\n            [style.visibility]=\"isShowTriangle ? 'visible' : 'hidden'\"\r\n            (click)=\"onClick($event)\"></a>\r\n    <span class=\"tree-icon-line\" [style.display]=\"isShowTriangle && showLines? '' : 'none'\"></span>\r\n    <span [style.display]=\"(tt.showIcon && rowNode.node.showIcon) ? 'inline-block': 'none'\" class=\"treenode-icon\" [ngClass]=\"treeNodeIcon\"></span>\r\n\r\n    <tt-checkbox  [rowNode]=\"rowNode\" *ngIf=\"tt.showCheckbox\" [disabled]=\"disabled\" [checked]=\"rowNode.isChecked\" ></tt-checkbox>\r\n    `,\r\n    encapsulation: ViewEncapsulation.None,\r\n    exportAs: 'ttToggler'\r\n})\r\nexport class TreeTableTogglerComponent implements OnInit, AfterViewInit, OnDestroy, DoCheck, OnChanges, AfterViewChecked {\r\n    @HostBinding('class.f-cmp-treetable-toggler') cls = true;\r\n    /**\r\n     * æ èç¹\r\n     */\r\n    @Input() rowNode: RowNode;\r\n    @Input() disabled: boolean;\r\n\r\n    @Input() showLines = false;\r\n\r\n    @Input() indentSpacing = 16;\r\n\r\n    treeNodeIcon = {};\r\n    isShowTriangle = false;\r\n    noChilds = false;\r\n\r\n    subscriptions: Subscription[] = [];\r\n\r\n    get offsetWidth() {\r\n        return this.togglerEl.nativeElement.parentElement.offsetWidth;\r\n    }\r\n\r\n    @ViewChild('toggler') togglerEl: ElementRef;\r\n    constructor(public tt: TreeTableComponent, private ngzone: NgZone, private render: Renderer2) {\r\n    }\r\n    ngOnInit() {\r\n        this.treeNodeIcon = this.tt.getTreeIcon(this.rowNode.node);\r\n\r\n        this.isShowTriangle = this.showTriangle();\r\n        this.noChilds = this.hasChildren();\r\n        const expandSub = this.tt.expand.subscribe((node: TreeNode) => {\r\n            if (this.rowNode.id === node.data[this.tt.idField]) {\r\n                this.updateIcon(this.rowNode.node);\r\n                if (this.tt.psRef) {\r\n                    this.tt.psRef.directiveRef.update();\r\n                }\r\n                this.tt.detectChanges();\r\n            }\r\n        });\r\n\r\n        const collapseSub = this.tt.collapse.subscribe((node: TreeNode) => {\r\n            if (this.rowNode.id === node.data[this.tt.idField]) {\r\n                this.updateIcon(this.rowNode.node);\r\n                if (this.tt.psRef) {\r\n                    this.tt.psRef.directiveRef.update();\r\n                }\r\n                this.tt.detectChanges();\r\n            }\r\n        });\r\n\r\n        const addNewSub = this.tt.appendNew.subscribe((e: any) => {\r\n            if (e.parent) {\r\n                if (this.rowNode.id === e.parent.data[this.tt.idField]) {\r\n                    if (this.rowNode.node.leaf || this.rowNode.node.leaf === undefined) {\r\n                        this.rowNode.node.leaf = false;\r\n                    }\r\n                }\r\n\r\n                this.updateIcon(this.rowNode.node);\r\n            }\r\n        });\r\n\r\n        this.subscriptions = [expandSub, collapseSub, addNewSub];\r\n\r\n    }\r\n\r\n    ngOnChanges(changes: SimpleChanges) {\r\n        if (changes.showLines && !changes.showLines.isFirstChange()) {\r\n            if (this.showLines) {\r\n                this.render.setStyle(this.togglerEl.nativeElement, 'display', this.isShowTriangle ? '' : 'none');\r\n            } else {\r\n                this.render.removeStyle(this.togglerEl.nativeElement, 'display');\r\n            }\r\n            this.reSetLines();\r\n        }\r\n\r\n        if (changes.rowNode && !changes.rowNode.isFirstChange()) {\r\n            this.updateIcon(this.rowNode.node);\r\n\r\n            if (!!changes.rowNode.currentValue.node.children.length !== !!changes.rowNode.previousValue.node.children.length) {\r\n                this.reSetLines();\r\n            }\r\n        }\r\n    }\r\n\r\n    ngAfterViewInit() {\r\n        setTimeout(() => {\r\n            this.reSetLines();\r\n        });\r\n    }\r\n\r\n    ngDoCheck() {\r\n\r\n    }\r\n\r\n    ngAfterViewChecked() {\r\n        // if (this.tt && this.tt.data) {\r\n        //     this.reSetLines();\r\n        // }\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        this.unAllSubscriptions();\r\n    }\r\n\r\n\r\n    private unAllSubscriptions() {\r\n        this.subscriptions.forEach(s => {\r\n            s.unsubscribe();\r\n        });\r\n        this.subscriptions = [];\r\n    }\r\n\r\n    hasChildren() {\r\n        const tn = this.rowNode.node;\r\n        return tn.leaf === false || this.rowNode.level !== 0 || (tn.children && tn.children.length > 0);\r\n    }\r\n\r\n    showTriangle(): boolean {\r\n        const tn = this.rowNode.node;\r\n\r\n        if (this.tt.loadDataType === 'all') {\r\n            return tn.leaf === false || (tn.children && tn.children.length > 0);\r\n        } else {\r\n            return tn.leaf === false;\r\n        }\r\n    }\r\n\r\n    reSetLines() {\r\n        if (this.togglerEl) {\r\n            const parentEl = this.togglerEl.nativeElement.closest('.treetable-cell-content');\r\n            if (parentEl) {\r\n                const lineEls = parentEl.querySelectorAll('.treetable-lines');\r\n                for (let k = 0; k < lineEls.length; k++) {\r\n                    lineEls[k].remove();\r\n                }\r\n            }\r\n        }\r\n\r\n        this._renderLines();\r\n    }\r\n\r\n    private _renderLines() {\r\n        if (!this.tt.bodyTemplate) {\r\n            if (this.showLines) {\r\n                this.renderLines();\r\n            } else {\r\n                // this.noLineStyle();\r\n            }\r\n        } else {\r\n            /*\r\n            if (this.togglerEl) {\r\n                if (this.togglerEl.nativeElement.closest('tr')) {\r\n                    const tds = this.togglerEl.nativeElement.closest('tr').querySelectorAll('td');\r\n                    Array.from(tds).forEach(n => {\r\n                        this.render.setStyle(n, 'padding', '0.25rem 0.75rem');\r\n                    });\r\n                }\r\n            } */\r\n        }\r\n    }\r\n\r\n\r\n    private noLineStyle() {\r\n        // this.cls = false;\r\n        if (this.togglerEl) {\r\n            // this.render.setStyle(this.togglerEl.nativeElement, 'margin-left', `${this.rowNode.level * this.indentSpacing}px`);\r\n            this.render.setStyle(this.togglerEl.nativeElement, 'visibility', this.isShowTriangle ? 'visible' : 'hidden');\r\n            this.render.removeStyle(this.togglerEl.nativeElement, 'display');\r\n        }\r\n    }\r\n\r\n    private renderLines() {\r\n        const len = this.rowNode.level;\r\n        if ( !this.togglerEl) {\r\n            return;\r\n        }\r\n        const parentEl = this.togglerEl.nativeElement.closest('.treetable-cell-content');\r\n\r\n        if (!parentEl) {\r\n            return;\r\n        }\r\n\r\n        const referEl = this.togglerEl.nativeElement.parentElement;\r\n\r\n        if (len === 0 && !this.showTriangle()) {\r\n            this.createLeafNodeLines(referEl, parentEl, true);\r\n        }\r\n\r\n        for (let i = 0; i < len; i++) {\r\n            parentEl.insertBefore(this.newLineElement(), referEl);\r\n\r\n            const nearLine = this.newLineElement(false);\r\n            parentEl.insertBefore(nearLine, referEl);\r\n\r\n            const isLeaf = !this.showTriangle();\r\n            if (isLeaf && i === len - 1) {\r\n                this.createLeafNodeLines(referEl, parentEl);\r\n            }\r\n        }\r\n    }\r\n\r\n    private newLineElement(border = true) {\r\n        const newLineEl = this.render.createElement('div');\r\n        this.render.addClass(newLineEl, 'treetable-lines');\r\n\r\n        if (this.showLines) {\r\n            if (border) {\r\n                this.render.addClass(newLineEl, 'treetable-lines-border-color');\r\n            }\r\n        }\r\n        return newLineEl;\r\n    }\r\n\r\n    /**\r\n     * æé  â or â\r\n     */\r\n    private createLeafNodeLines(containerEl: HTMLElement, parentEl: Element, isTopNode = false) {\r\n        // â\r\n        // <div class=\"treetable-lines\" style=\"border-color: rgb(204, 204, 204);\"></div>\r\n        // <div class=\"treetable-lines treetable-lines-leaf\" style=\"border-color: transparent;\">\r\n        //     <div class=\"normal\"></div>\r\n        // </div>\r\n\r\n        // â\r\n        // <div class=\"treetable-lines\" style=\"border-color: transparent\"></div>\r\n        // <div class=\"treetable-lines treetable-lines-leaf\" style=\"border-color: transparent;\">\r\n        //     <div style=\"corner\"></div>\r\n        // </div>\r\n\r\n        const l1 = this.newLineElement();\r\n        const l2 = this.newLineElement(false);\r\n\r\n        this.render.addClass(l2, 'treetable-lines-leaf');\r\n        const dessert = this.render.createElement('div');\r\n\r\n        if (this.showLines) {\r\n            let cls = 'normal';\r\n            if (this.rowNode.last) {\r\n                cls = 'corner';\r\n                this.render.removeClass(l1, 'treetable-lines-border-color');\r\n            }\r\n            l2.appendChild(dessert);\r\n            this.render.addClass(dessert, cls);\r\n            this.render.addClass(dessert, 'treetable-lines-border-color');\r\n        }\r\n\r\n        parentEl.insertBefore(l1, containerEl);\r\n        parentEl.insertBefore(l2, containerEl);\r\n\r\n        if (isTopNode) {\r\n            this.render.setStyle(l2, 'marginRight', '3px');\r\n        }\r\n    }\r\n\r\n    private registerClickEvent() {\r\n        if (this.togglerEl) {\r\n            this.render.listen(this.togglerEl.nativeElement, 'click', this.onClick.bind(this));\r\n        }\r\n    }\r\n\r\n    onClick(event: Event) {\r\n        event.stopPropagation();\r\n        event.preventDefault();\r\n\r\n        if (this.rowNode.node['showLoading']) {\r\n            return false;\r\n        }\r\n\r\n        if (!this.tt.disabled) {\r\n            this.tt.toggleExpand(this.rowNode.node);\r\n        }\r\n        return false;\r\n    }\r\n\r\n    private updateIcon(treeNode: TreeNode) {\r\n        this.isShowTriangle = this.showTriangle();\r\n        this.noChilds = this.hasChildren();\r\n        this.treeNodeIcon = this.tt.getTreeIcon(treeNode);\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * éä¸­è¡ç»ä»¶\r\n */\r\n@Directive({\r\n    selector: '[selectRow]',\r\n    exportAs: 'row'\r\n})\r\nexport class TreeTableSelectRowDirective implements DoCheck, OnDestroy, OnInit, OnChanges {\r\n\r\n    @Input('selectRow') rowNode: RowNode;\r\n    @Input() rowIndex: number;\r\n\r\n    @Input() selectRowDisabled: boolean;\r\n\r\n    subscription: Subscription;\r\n\r\n    public prevent = false;\r\n    public timer: any;\r\n    @Input() delay = 0;\r\n\r\n    constructor(public tt: TreeTableComponent, private el: ElementRef, private render: Renderer2, private ngZone: NgZone) {\r\n        this.subscription = this.tt.selectNodeChangedSubject.subscribe((ids: string) => {\r\n            if (ids && this.rowNode) {\r\n                const idArr = ids.split(',');\r\n                if (idArr.indexOf(this.rowNode.id) > -1) {\r\n                    this.toggleClass();\r\n                    this.rowNode.node['elementRef'] = this.el;\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    ngOnInit() {\r\n        // this.rowNode.node.selectable = !this.selectRowDisabled;\r\n    }\r\n\r\n    ngOnChanges(changes: SimpleChanges) {\r\n        // if (changes.selectRowDisabled && !changes.selectRowDisabled.isFirstChange()) {\r\n        //     this.rowNode.node.selectable = !changes.selectRowDisabled.currentValue;\r\n        // }\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        if (this.subscription) {\r\n            this.subscription.unsubscribe();\r\n            this.subscription = null;\r\n        }\r\n    }\r\n\r\n    ngDoCheck() {\r\n        if (this.tt.bodyTemplate) {\r\n            if (!this.tt.isSelected(this.rowNode.node)) {\r\n                this.render.removeClass(this.el.nativeElement, 'farris-table-selectedrow');\r\n            }\r\n        }\r\n    }\r\n\r\n    @HostListener('click', ['$event'])\r\n    onclick(event: MouseEvent) {\r\n        if (this.isEnabled()) {\r\n            // this.rowClick(event);\r\n            if (this.delay !== 0) {\r\n\r\n                if (!this.prevent) {\r\n                    this.prevent = true;\r\n                    this.timer = setTimeout(() => {\r\n                        this.rowClick(event);\r\n                        this.prevent = false;\r\n                    }, this.delay);\r\n                }\r\n            } else {\r\n                this.rowClick(event);\r\n            }\r\n        }\r\n\r\n        // event.stopPropagation();\r\n    }\r\n\r\n    isEnabled() {\r\n        return !this.tt.disabled && this.selectRowDisabled !== true;\r\n    }\r\n\r\n    private rowClick(event: Event) {\r\n        event.stopPropagation();\r\n\r\n        this.tt.beforeClickNode({ instance: this.tt, rowNode: this.rowNode, event, type: 'row' }).subscribe((e: boolean) => {\r\n            if (!e) { return; }\r\n            this.tt.handleRowClick({\r\n                originalEvent: event,\r\n                rowNode: this.rowNode,\r\n                rowIndex: this.rowIndex\r\n            });\r\n\r\n            this.ngZone.runOutsideAngular(() => {\r\n                this.toggleClass();\r\n            });\r\n        });\r\n    }\r\n\r\n    toggleClass() {\r\n        if (!this.tt.bodyTemplate) {\r\n            if (this.tt.isSelected(this.rowNode.node)) {\r\n                if (this.tt.singleSelect) {\r\n                    this.tt.el.nativeElement.querySelectorAll('.farris-treetable-tbody>tr.farris-table-selectedrow').forEach(n => {\r\n                        this.render.removeClass(n, 'farris-table-selectedrow');\r\n                    });\r\n                }\r\n                this.render.addClass(this.el.nativeElement, 'farris-table-selectedrow');\r\n            } else {\r\n                if (!this.tt.keepSelect) {\r\n                    this.render.removeClass(this.el.nativeElement, 'farris-table-selectedrow');\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * è¡¨å¤´å¨éç»ä»¶\r\n */\r\n@Component({\r\n    selector: 'tt-header-checkbox',\r\n    template: `\r\n    <div class=\"custom-control custom-checkbox  custom-control-inline tt-checkbox\">\r\n        <input type=\"checkbox\" #chkAll class=\"custom-control-input\"  [checked]=\"checked\">\r\n        <label class=\"custom-control-label\" (click)=\"handleClick($event)\"></label>\r\n    </div>\r\n    `,\r\n    styles: [\r\n        `\r\n        :host {\r\n            vertical-align: middle;\r\n        }\r\n        `\r\n    ]\r\n})\r\nexport class TreeTableHeaderCheckboxComponent implements OnInit {\r\n    @Input() checked: boolean;\r\n    @Input() disabled: boolean;\r\n\r\n    @Output() checkedChange = new EventEmitter();\r\n\r\n    @ViewChild('chkAll') chkAll: ElementRef;\r\n\r\n    constructor(public tt: TreeTableComponent, public ttService: TreetableService) {\r\n    }\r\n\r\n    ngOnInit() { }\r\n\r\n    handleClick(event) {\r\n        if (!this.disabled && !this.tt.disabled) {\r\n            const beforeEvent = !this.checked ? this.tt.beforeCheckAll : this.tt.beforeUnCheckAll;\r\n\r\n            beforeEvent({ instance: this.tt, checked: !this.checked }).subscribe(e => {\r\n                // å¨éåè½\r\n                this.chkAll.nativeElement.indeterminate = false;\r\n                this.checked = !this.checked;\r\n                this.tt.toggleNodesWithCheckbox(event, this.checked);\r\n            });\r\n        }\r\n        event.stopPropagation();\r\n        return false;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * è¡¨ä½checkbox ç»ä»¶\r\n */\r\n@Component({\r\n    selector: 'tt-checkbox',\r\n    template: `\r\n    <div class=\"custom-control custom-checkbox  custom-control-inline tt-checkbox\">\r\n        <input type=\"checkbox\" #chk class=\"custom-control-input\" [disabled]=\"disabled\" [checked]=\"checked\">\r\n        <label class=\"custom-control-label\" (click)=\"handleClick($event)\"></label>\r\n    </div>\r\n    `,\r\n    styles: [\r\n        `\r\n        :host {\r\n            vertical-align: middle;\r\n        }\r\n        :host .custom-checkbox {\r\n            opacity: 1;\r\n            float: none;\r\n        }\r\n        `\r\n    ]\r\n})\r\nexport class TreeTableCheckboxComponent implements OnInit, OnDestroy {\r\n    @HostBinding('class.tree-toggler-checkbox') cls1 = true;\r\n    @Input() checked: boolean;\r\n    @Input() disabled: boolean;\r\n\r\n    @Input() rowNode: RowNode;\r\n\r\n    @Output() checkedChange = new EventEmitter();\r\n\r\n    @ViewChild('chk') chk: ElementRef;\r\n    destroy$ = new Subject();\r\n    constructor(public tt: TreeTableComponent, public ttService: TreetableService) {\r\n        this.ttService = this.tt.ttService;\r\n    }\r\n    ngOnDestroy() {\r\n        this.destroy$.next();\r\n        this.destroy$.complete();\r\n    }\r\n    ngOnInit() {\r\n        this.chk.nativeElement.indeterminate = this.rowNode.indeterminate || false;\r\n\r\n        this.ttService.changeCheckboxStatus$.pipe(\r\n            takeUntil(this.destroy$)\r\n        ).pipe(\r\n            map(n => {\r\n                if (n.id === this.rowNode.id) {\r\n                    return n;\r\n                }\r\n                return null;\r\n            })\r\n        ).subscribe(n => {\r\n            if (n) {\r\n                this.chk.nativeElement.indeterminate = n.indeterminate;\r\n                this.checked = n.isChecked;\r\n                this.chk.nativeElement.checked = this.checked;\r\n            }\r\n        });\r\n    }\r\n\r\n\r\n    handleClick(event) {\r\n        event.stopPropagation();\r\n        if (!this.disabled) {\r\n            this.tt.beforeClickNode({ instance: this.tt, rowNode: this.rowNode, event, type: 'checkbox' }).subscribe((e: boolean) => {\r\n                if (!e) { return; }\r\n                this.checked = !this.checked;\r\n                if (this.tt.singleSelect) {\r\n                    this.tt.clearAll();\r\n                    if (this.checked) {\r\n                        this.tt.selectNode(this.rowNode.id, true);\r\n                    } else {\r\n                        this.tt.unSelectNode(this.rowNode.id, true);\r\n                    }\r\n                } else {\r\n                    this.tt.toggleNodeWithCheckbox(event, this.rowNode, this.checked);\r\n                }\r\n            });\r\n        }\r\n        return false;\r\n    }\r\n}\r\n\r\n@Directive({\r\n    selector: '[dblclick]'\r\n})\r\nexport class DblClickRowDirective implements OnInit {\r\n    @Input('dblclick') enableDblClick = false;\r\n    @Input() dblclickNode: RowNode;\r\n\r\n    constructor(\r\n        public tt: TreeTableComponent, public el: ElementRef, public ttService: TreetableService,\r\n        @Optional() @Self() public selectRowDir: TreeTableSelectRowDirective) {\r\n            this.ttService = this.tt.ttService;\r\n    }\r\n\r\n    ngOnInit() {\r\n        if (!this.enableDblClick) {\r\n            this.selectRowDir.delay = 0;\r\n        }\r\n    }\r\n\r\n    @HostListener('dblclick', ['$event'])\r\n    ondblclick(event: Event) {\r\n        const prevEl = ( event.target as any).previousSibling;\r\n        if (prevEl && prevEl.type === 'checkbox') {\r\n            return;\r\n        }\r\n\r\n\r\n        if (this.tt.disabled) {\r\n            return false;\r\n        }\r\n\r\n        if (this.tt.multiSelect && this.dblclickNode) {\r\n            if (this.dblclickNode.node.leaf) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n\r\n        const clsName = event.target['className'];\r\n\r\n        let togglerTag = null;\r\n        if (clsName.indexOf('f-cmp-treetable-toggler') > -1) {\r\n            togglerTag = event.target['querySelector']('.treenode-fold');\r\n        } else {\r\n            if (event.target['className'].indexOf('treenode-fold') > -1) {\r\n                togglerTag = event.target as any;\r\n            }\r\n        }\r\n\r\n        if (togglerTag && togglerTag.style.visibility === 'visible') {\r\n            return false;\r\n        }\r\n\r\n        if (this.selectRowDir) {\r\n            this.selectRowDir.prevent = false;\r\n            clearTimeout(this.selectRowDir.timer);\r\n            if (this.selectRowDir.rowNode && this.enableDblClick) {\r\n                const rn = this.selectRowDir.rowNode;\r\n                if (this.tt.loadDataType === 'all' && !rn.node.leaf && this.tt.dblClickExpand) {\r\n                    this.tt.toggleExpand(rn.node);\r\n                }\r\n                this.tt.dblClick.emit(rn.node);\r\n            }\r\n        }\r\n\r\n        // event.stopPropagation();\r\n    }\r\n}\r\n\r\n@Directive({\r\n    selector: '[customRowStyle]'\r\n})\r\nexport class CustomRowStyleDirective implements OnInit, OnChanges {\r\n    @Input('customRowStyle') rowNode: RowNode;\r\n\r\n    constructor(private injector: Injector, private ngZone: NgZone,\r\n        private el: ElementRef, private tt: TreeTableComponent,\r\n        public utils: CommonUtils, private render: Renderer2) {\r\n    }\r\n    ngOnInit() {\r\n        this.setRowStyle();\r\n    }\r\n\r\n    private setRowStyle() {\r\n        const fn = this.tt.rowStyler;\r\n        if (fn) {\r\n            const sty = fn(this.rowNode.node);\r\n            if (sty) {\r\n                if (typeof sty === 'object' && (sty.style || sty.cls)) {\r\n                    if (sty.style) {\r\n                        Object.keys(sty.style).forEach(s => {\r\n                            this.render.setStyle(this.el.nativeElement, s, sty.style[s]);\r\n                        });\r\n                    }\r\n\r\n                    if (sty.cls) {\r\n                        sty.cls.split(',').forEach(c => {\r\n                            this.render.addClass(this.el.nativeElement, c);\r\n                        });\r\n                    }\r\n\r\n                } else {\r\n                    if (Array.isArray(sty) || typeof sty === 'string') {\r\n                        const cls = this.tt.getRowCls(this.rowNode);\r\n                        if (cls && Object.keys(cls).length) {\r\n                            Object.keys(cls).forEach(c => {\r\n                                if (cls[c]) {\r\n                                    this.render.addClass(this.el.nativeElement, c);\r\n                                }\r\n                            });\r\n                        }\r\n                    } else {\r\n                        Object.keys(sty).forEach(s => {\r\n                            this.render.setStyle(this.el.nativeElement, s, sty[s]);\r\n                        });\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    ngOnChanges(changes: SimpleChanges) {\r\n        if (changes.rowNode && !changes.rowNode.isFirstChange()) {\r\n            this.setRowStyle();\r\n        }\r\n    }\r\n}\r\n\r\n@Directive({\r\n    selector: '[customCellStyle]'\r\n})\r\nexport class TTCustomCellStyleDirective implements OnInit, OnChanges {\r\n    @Input('customCellStyle') column: TreeTableColumn;\r\n    @Input() rowNode: RowNode;\r\n    @Input() rowIndex: any;\r\n\r\n    constructor(private injector: Injector, private ngZone: NgZone,\r\n        private el: ElementRef, private tt: TreeTableComponent,\r\n        public utils: CommonUtils, private render: Renderer2) {\r\n    }\r\n\r\n    ngOnInit() {\r\n        if (this.tt && this.tt.getCellCls) {\r\n            this.setCellStyle();\r\n        }\r\n\r\n        if (!this.tt.showBorder && this.tt.columns.length === 1) {\r\n            this.render.setStyle(this.el.nativeElement, 'border-width', '0px');\r\n        }\r\n    }\r\n\r\n    private setCellStyle() {\r\n        const cellCls = this.tt.getCellCls(this.rowNode, this.column.field);\r\n        if (this.column && this.column.styler) {\r\n            if (cellCls && Object.keys(cellCls).length) {\r\n                Object.keys(cellCls).forEach(c => {\r\n                    if (cellCls[c]) {\r\n                        this.render.addClass(this.el.nativeElement, c);\r\n                    }\r\n                });\r\n            }\r\n\r\n            const rowData = this.rowNode.node.data;\r\n            const ccs = this.column.styler(this.utils.getValue(this.column.field, rowData), rowData, this.rowIndex, this.rowNode);\r\n            if (ccs) {\r\n                if (ccs.style || ccs.cls) {\r\n                    if (ccs.style) {\r\n                        Object.keys(ccs.style).forEach(s => {\r\n                            this.render.setStyle(this.el.nativeElement, s, ccs.style[s]);\r\n                        });\r\n                    }\r\n\r\n                    if (ccs.cls) {\r\n                        ccs.cls.split(',').forEach(c => {\r\n                            this.render.addClass(this.el.nativeElement, c);\r\n                        });\r\n                    }\r\n                }\r\n            }\r\n        } else {\r\n            Object.keys(cellCls).forEach(s => {\r\n                this.render.setStyle(this.el.nativeElement, s, cellCls[s]);\r\n            });\r\n        }\r\n\r\n    }\r\n\r\n    ngOnChanges(changes: SimpleChanges) {\r\n        if (changes.rowNode && !changes.rowNode.isFirstChange()) {\r\n            this.setCellStyle();\r\n        }\r\n    }\r\n}\r\n\r\n@Directive({\r\n    selector: '[resizable-column]'\r\n})\r\nexport class TTResizableColumnDirective implements AfterViewInit, OnDestroy, OnChanges {\r\n    @Input('resizable-column') enableResize = true;\r\n    resizer: HTMLSpanElement;\r\n    resizerMouseDownListener: any;\r\n    documentMouseMoveListener: any;\r\n    documentMouseUpListener: any;\r\n\r\n    constructor(\r\n        public tt: TreeTableComponent, public ngzone: NgZone,\r\n        public el: ElementRef, public render: Renderer2) {\r\n\r\n    }\r\n\r\n    ngAfterViewInit() {\r\n        if (this.isEnable()) {\r\n            this.render.addClass(this.el.nativeElement, 'resizable-column');\r\n\r\n            this.resizer = document.createElement('span');\r\n            this.resizer.className = 'column-resizer';\r\n            this.el.nativeElement.appendChild(this.resizer);\r\n\r\n            this.ngzone.runOutsideAngular(() => {\r\n                this.resizerMouseDownListener = this.onMouseDown.bind(this);\r\n                this.resizer.addEventListener('mousedown', this.resizerMouseDownListener);\r\n\r\n                this.el.nativeElement.addEventListener('mouseenter', this.onMouseEnter.bind(this));\r\n            });\r\n        }\r\n    }\r\n\r\n    ngOnChanges(changes: SimpleChanges): void {\r\n        if (changes.enableResize && !changes.enableResize.isFirstChange()) {\r\n            if (!this.isEnable() && this.resizer) {\r\n                this.resizer.remove();\r\n            }\r\n        }\r\n    }\r\n\r\n    isEnable() {\r\n        return this.tt.resizableColumns && !this.tt.autoWidth && this.enableResize;\r\n    }\r\n\r\n    bindDocumentEvents() {\r\n        this.ngzone.runOutsideAngular(() => {\r\n            this.documentMouseMoveListener = this.onMouseMove.bind(this);\r\n            document.addEventListener('mousemove', this.documentMouseMoveListener);\r\n\r\n            this.documentMouseUpListener = this.onMouseUp.bind(this);\r\n            document.addEventListener('mouseup', this.documentMouseUpListener);\r\n        });\r\n    }\r\n\r\n    unbindDocumentEvents() {\r\n        if (this.documentMouseMoveListener) {\r\n            document.removeEventListener('mousemove', this.documentMouseMoveListener);\r\n            this.documentMouseMoveListener = null;\r\n        }\r\n\r\n        if (this.documentMouseUpListener) {\r\n            document.removeEventListener('mouseup', this.documentMouseUpListener);\r\n            this.documentMouseUpListener = null;\r\n        }\r\n    }\r\n\r\n    onMouseDown(event: Event) {\r\n        if (this.isEnable()) {\r\n            this.tt.onColumnResizeBegin(event);\r\n            this.bindDocumentEvents();\r\n        }\r\n    }\r\n\r\n    onMouseEnter() {\r\n    }\r\n\r\n    onMouseMove(event: Event) {\r\n        this.tt.onColumnResize(event);\r\n    }\r\n\r\n    onMouseUp(event: Event) {\r\n        this.tt.onColumnResizeEnd(event, this.el.nativeElement);\r\n        this.unbindDocumentEvents();\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        if (this.resizerMouseDownListener) {\r\n            this.resizer.removeEventListener('mousedown', this.resizerMouseDownListener);\r\n        }\r\n\r\n        this.unbindDocumentEvents();\r\n    }\r\n\r\n}\r\n","import { debounceTime, map, auditTime, filter } from 'rxjs/operators';\r\nimport { Component, OnInit, EventEmitter, Output, ElementRef,\r\n    ViewChild, OnDestroy, NgZone, Injector, AfterViewInit, Input } from '@angular/core';\r\nimport { Subscription, fromEvent } from 'rxjs';\r\n\r\n@Component({\r\n    selector: 'find-input',\r\n    template: `\r\n        <div class=\"f-find-input\" style=\"\">\r\n            <div class=\"input-group\">\r\n                <div class=\"input-group-prepend\">\r\n                    <select class=\"form-control\" [(ngModel)]=\"findField\">\r\n                        <option *ngFor=\"let col of columns\" value=\"{{col.field}}\">{{ col.title }}</option>\r\n                    </select>\r\n                </div>\r\n                <input #input type=\"text\" placeholder=\"è³å°2ä¸ªå­ç¬¦\" class=\"form-control\"\r\n                    (keydown.esc)=\"onClose($event)\" (keydown.enter)=\"onEnter($event, 0)\">\r\n                <div class=\"input-group-append\">\r\n                    <span class=\"input-group-text\">{{current}}/{{count}}</span>\r\n                    <button class=\"btn btn-outline-secondary\" type=\"button\" title=\"ä¸ä¸ä¸ª\"\r\n                        [disabled]=\"current === 0\" (click)=\"onEnter($event, -1)\">\r\n                        <span class=\"f-icon f-icon-arrow-chevron-up\"></span>\r\n                    </button>\r\n                    <button class=\"btn btn-outline-secondary\" type=\"button\" title=\"ä¸ä¸ä¸ª\"\r\n                    [disabled]=\"current === count\" (click)=\"onEnter($event, 1)\">\r\n                        <span class=\"f-icon f-icon-arrow-chevron-down\"></span>\r\n                    </button>\r\n                    <button class=\"btn btn-outline-secondary\" type=\"button\" title=\"å³é­\" (click)=\"onClose($event)\">\r\n                        <span class=\"f-icon f-icon-close\"></span>\r\n                    </button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    `,\r\n    styles: [\r\n        `\r\n        .f-find-input {\r\n            width: 300px; height: 40px; background: #fefefe; position: absolute; right: 0; z-index: 10; padding: 5px;\r\n            border: 1px solid #d5d5d5;\r\n            box-shadow: 0px 1px 2px 0px #989898;\r\n        }\r\n        .f-find-input .input-group-text { border-right: 1px solid #ccc; font-size: 10px }\r\n        .f-find-input .input-group-append { background: #fff; }\r\n        .f-find-input .input-group-append button { padding:1px 6px;}\r\n        `\r\n    ]\r\n})\r\nexport class FindInputComponent implements OnInit, OnDestroy, AfterViewInit {\r\n    @Input() current = 0;\r\n    @Input() count = 0;\r\n    @Input() columns = [];\r\n\r\n    @Output() close = new EventEmitter();\r\n    @Output() valueChanged = new EventEmitter();\r\n    @Output() enterHandler = new EventEmitter();\r\n\r\n    @ViewChild('input') input: ElementRef;\r\n    findField = '';\r\n    private keyupEventSub: Subscription = null;\r\n\r\n    constructor(private el: ElementRef, private ngZone: NgZone, private injector: Injector) { }\r\n\r\n    ngOnInit() {\r\n        if (this.columns.length) {\r\n            this.columns = this.columns.filter(c => !c.formatter && c.field);\r\n            this.findField = this.columns[0].field;\r\n        }\r\n\r\n        this.ngZone.runOutsideAngular(() => {\r\n            this.keyupEventSub = fromEvent(this.input.nativeElement, 'keyup').pipe(\r\n                filter((e: any) => (e.switch || e.keyCode) !== 13),\r\n                debounceTime(200),\r\n                map((e: any) => e.target.value)\r\n            ).subscribe((v) => {\r\n                this.valueChanged.emit({value: v, field: this.findField});\r\n            });\r\n        });\r\n    }\r\n\r\n    ngAfterViewInit() {\r\n        this.input.nativeElement.focus();\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        if (this.keyupEventSub) {\r\n            this.keyupEventSub.unsubscribe();\r\n        }\r\n        this.keyupEventSub = null;\r\n    }\r\n\r\n    onClose(event) {\r\n        this.close.emit();\r\n        return false;\r\n    }\r\n\r\n    onEnter($event, step) {\r\n        this.enterHandler.emit(step);\r\n        return false;\r\n    }\r\n\r\n}\r\n","import { PipeTransform, Pipe, ElementRef } from '@angular/core';\r\nimport { DomSanitizer, SafeHtml } from '@angular/platform-browser';\r\n\r\n@Pipe({ name: 'highlight' })\r\nexport class HighlightPipe implements PipeTransform {\r\n    constructor(public sanitizer: DomSanitizer, private el: ElementRef) {\r\n    }\r\n    transform(text: string, keyword, field = '', findField = ''): SafeHtml {\r\n        let needSearch = true;\r\n        if (field && findField) {\r\n            if (findField.indexOf(',') === -1) {\r\n                needSearch = field === findField;\r\n            } else {\r\n                needSearch = findField.split(',').some(n => n === field);\r\n            }\r\n        }\r\n\r\n        if (!needSearch) {\r\n            return text;\r\n        }\r\n\r\n        if (keyword && text) {\r\n            let pattern = keyword.replace(/[\\-\\[\\]\\/\\{\\}\\(\\)\\*\\+\\?\\.\\\\\\^\\$\\|]/g, '\\\\$&');\r\n            pattern = pattern.split(' ').filter((t) => {\r\n                return t.length > 0;\r\n            }).join('|');\r\n            const regex = new RegExp(pattern, 'gi');\r\n            return this.sanitizer.bypassSecurityTrustHtml(\r\n                // text.replace(regex, (match) => `<span class=\"search-highlight\">${match}</span>`)\r\n                this.replaceContent(text, regex, (match) => `<span class=\"search-highlight\">${match}</span>`)\r\n            );\r\n\r\n        } else {\r\n            return text;\r\n        }\r\n    }\r\n\r\n    parseHTML(html, context) {\r\n        const t = (context || document).createElement('template');\r\n        t.innerHTML = html;\r\n        return t.content.cloneNode(true);\r\n    }\r\n\r\n    private replaceContent(strMatch1, regex, match) {\r\n        const matchReg1 = />.*?\\</gi; // åæ¥åº><ä¹é´çåå®¹\r\n        const strs = strMatch1.match(matchReg1); // æ¿å°ææç¬¦åçé®å¼\r\n        if (strs && strs.length) {\r\n            for (const aa of strs) {\r\n                const rep_old = strs[aa]; // æ¿å°åå§ç¬¦åå­ç¬¦ä¸²\r\n                const rep_new = strs[aa].replace(regex, match); // æ¿æ¢æç®çå­ç¬¦ä¸²\r\n                const re2 = new RegExp(rep_old, 'g'); // å©ç¨åå§å­ç¬¦ä¸²çææ­£å\r\n                strMatch1 = strMatch1.replace(re2, rep_new); // å°ç¬¦åçåå§å­ç¬¦ä¸²æ¿æ¢ææ°å­ç¬¦ä¸²\r\n            }\r\n            return strMatch1;\r\n        } else {\r\n            return strMatch1.replace(regex, match);\r\n        }\r\n    }\r\n}\r\n","import { TreeTableComponent } from './../treetable.component';\r\nimport { Component, Input, OnInit, Injector, ChangeDetectorRef, EventEmitter, Output, OnChanges, SimpleChanges, DoCheck, ViewChild, ElementRef } from '@angular/core';\r\nimport { TreeNode } from '../types/treenode';\r\nimport { filter } from 'rxjs/operators';\r\nimport { BehaviorSubject } from 'rxjs';\r\n\r\n@Component({\r\n    selector: 'nodes-pager',\r\n    templateUrl: './nodes-pager.component.html',\r\n    styles: [\r\n        `\r\n        .treetable-nodes-pagerbar { height: 22px; line-height: 22px; list-style: none}\r\n        .treetable-nodes-pagerbar li { float: left; box-sizing: border-box; }\r\n        .treetable-nodes-pagerbar .pager-btn {\r\n            width: 22px;\r\n            height: 22px;\r\n            text-align: center;\r\n            border: 1px solid #ccc;\r\n            background: rgb(248 249 250);\r\n            cursor: pointer;\r\n        }\r\n        .treetable-nodes-pagerbar .pager-btn:hover {\r\n            background: white;\r\n        }\r\n        .treetable-nodes-pagerbar .prev {}\r\n        .treetable-nodes-pagerbar .next {\r\n            border-left: 0;\r\n        }\r\n\r\n        .pager-btn.disabled{\r\n            color: rgb(204 204 204);\r\n            pointer-events: none;\r\n        }\r\n        .treetable-nodes-pagerbar .pageinfo {\r\n            margin-right: 5px;\r\n            padding-left: 0;\r\n            font-weight: 400;\r\n            padding-right: 5px;\r\n        }\r\n\r\n        .treetable-nodes-pagerbar .page-index {\r\n            border: 0;\r\n            background: transparent;\r\n            outline: none;\r\n            appearance: none;\r\n            padding-left: 5px;\r\n            min-width: 50px;\r\n            position: absolute;\r\n            height: 20px;\r\n            text-align: left;\r\n            opacity: 0;\r\n            left: 0;\r\n        }\r\n\r\n        .treetable-nodes-pagerbar .page-number-list {\r\n            height: 20px;\r\n            min-width: 30px;\r\n            max-width: 50px;\r\n            overflow: hidden;\r\n            text-align: center;\r\n            position: relative;\r\n            border-bottom: 1px solid #ced4da;\r\n        }\r\n        `\r\n    ]\r\n})\r\nexport class TreetableNodesPagerComponent implements OnInit, OnChanges {\r\n    @Input() disabled = false;\r\n    @Input() context: any;\r\n    @ViewChild('pagerList') pagerListEl: ElementRef<any>;\r\n    @Output() pageChange = new EventEmitter();\r\n    @Input() showTotal = false;\r\n\r\n    showPager = new BehaviorSubject(false);\r\n    pagerInfo = null;\r\n\r\n    get pagers() {\r\n        const c = this.getPagerCount();\r\n        if (c) {\r\n            return new Array(c);\r\n        }\r\n        return [];\r\n    }\r\n\r\n    constructor(private tt: TreeTableComponent,  private cd: ChangeDetectorRef, private injector: Injector) {\r\n        if (this.tt) {\r\n            this.tt.expand.pipe(\r\n                filter((node: any) => {\r\n                    return node.id === this.context.node.id && node.pagination && node.children.filter(n => !n.__childs_loading__).length;\r\n                })\r\n            ).subscribe(\r\n                (node: TreeNode) => {\r\n                    this.pagerInfo = {...node.pagination};\r\n                    this.showPager.next(true);\r\n                }\r\n            );\r\n\r\n            this.tt.appendNew.subscribe(\r\n                (e: any) => {\r\n                    const node = e.parent;\r\n                    if (node.id === this.context.node.id && node.pagination) {\r\n                        this.pagerInfo = {...node.pagination};\r\n                        this.showPager.next(true);\r\n                    }\r\n                }\r\n            );\r\n\r\n            this.tt.collapse.subscribe(\r\n                (node: TreeNode) => {\r\n                    if (node.id === this.context.node.id) {\r\n                        this.showPager.next(false);\r\n                    }\r\n                }\r\n            );\r\n        }\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        this.setPagerInfo();\r\n    }\r\n\r\n    ngOnChanges(changes: SimpleChanges) {\r\n        if (changes.context && !changes.context.isFirstChange()) {\r\n            this.setPagerInfo();\r\n        }\r\n    }\r\n\r\n    private setPagerInfo() {\r\n        if (this.context) {\r\n            const { node } = this.context;\r\n            if (node && node.pagination) {\r\n                this.pagerInfo = { ...node.pagination };\r\n                this.showPager.next(\r\n                    node.expanded && node.pagination\r\n                );\r\n            }\r\n        }\r\n    }\r\n\r\n    getPagerCount() {\r\n        const { pageSize, total } = this.pagerInfo;\r\n        if (!total) {\r\n            return 0;\r\n        } else {\r\n            return Math.ceil(total / pageSize);\r\n        }\r\n    }\r\n\r\n    isFirstPager() {\r\n        return this.pagerInfo.pageIndex === 1;\r\n    }\r\n\r\n    isLastPager() {\r\n        return this.pagerInfo.pageIndex === this.getPagerCount();\r\n    }\r\n\r\n    /**\r\n     * Go to the previous page\r\n     */\r\n    previous($event: any) {\r\n        $event.stopPropagation();\r\n        this.setCurrent(this.pagerInfo.pageIndex - 1, this.pagerInfo.pageSize);\r\n    }\r\n\r\n    /**\r\n     * Go to the next page\r\n     */\r\n    next($event: any) {\r\n        $event.stopPropagation();\r\n        this.setCurrent(this.pagerInfo.pageIndex + 1, this.pagerInfo.pageSize);\r\n    }\r\n\r\n    setCurrent(page: number, pageSize?: number, $event?: any) {\r\n        if ($event) {\r\n            $event.stopPropagation();\r\n        }\r\n\r\n        this.pageChange.emit({ pageIndex: page, pageSize, node: this.context.node, context: this.context });\r\n    }\r\n\r\n    pagerChanged(newPageIndex: number) {\r\n        this.setCurrent(newPageIndex, this.pagerInfo.pageSize);\r\n    }\r\n\r\n}\r\n","import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n    selector: 'childs-loading',\r\n    template: `\r\n    <div class=\"loading\">\r\n        <span></span>\r\n        <span></span>\r\n        <span></span>\r\n        <span></span>\r\n        <span></span>\r\n    </div>\r\n    `,\r\n    styles: [\r\n        `\r\n        .loading{\r\n            width: 150px;\r\n            height: 10px;\r\n            margin: 0 auto;\r\n            margin-top:10px;\r\n            margin-bottom: 20px;\r\n        }\r\n        .loading span{\r\n            display: inline-block;\r\n            width: 10px;\r\n            height: 100%;\r\n            margin-right: 5px;\r\n            border-radius: 50%;\r\n            background: #59a1ff;\r\n            -webkit-animation: load 1.04s ease infinite;\r\n        }\r\n        .loading span:last-child{\r\n            margin-right: 0px;\r\n        }\r\n        @-webkit-keyframes load{\r\n            0%{\r\n                opacity: 1;\r\n                -webkit-transform: scale(1.3);\r\n            }\r\n            100%{\r\n                opacity: 0.2;\r\n                -webkit-transform: scale(.3);\r\n            }\r\n        }\r\n        .loading span:nth-child(1){\r\n            -webkit-animation-delay:0.13s;\r\n        }\r\n        .loading span:nth-child(2){\r\n            -webkit-animation-delay:0.26s;\r\n        }\r\n        .loading span:nth-child(3){\r\n            -webkit-animation-delay:0.39s;\r\n        }\r\n        .loading span:nth-child(4){\r\n            -webkit-animation-delay:0.52s;\r\n        }\r\n        .loading span:nth-child(5){\r\n            -webkit-animation-delay:0.65s;\r\n        }\r\n        `\r\n    ]\r\n})\r\nexport class ChildsLoadingComponent implements OnInit {\r\n    constructor() { }\r\n\r\n    ngOnInit(): void { }\r\n}\r\n","import { CommonUtils } from '@farris/ui-common';\r\nimport { TreeNode } from './types/treenode';\r\nimport { Pipe, PipeTransform } from '@angular/core';\r\nimport { TreeTableColumn } from './types/treetable-column';\r\n\r\n@Pipe({name: 'tipmsg'})\r\nexport class CellTipsPipe implements PipeTransform {\r\n    constructor(private commonUtils: CommonUtils) {}\r\n    transform(col: any, ...args: any[]): any {\r\n        if (col.showTips) {\r\n            return this.getCellTooltipContent(col, args[0]);\r\n        }\r\n        return  '';\r\n    }\r\n\r\n    private getCellTooltipContent(col: TreeTableColumn, tn: TreeNode) {\r\n        let txt = this.commonUtils.getValue(col.field, tn.data);\r\n\r\n        if (col.tipContent) {\r\n            if ( typeof col.tipContent === 'string') {\r\n                txt = col.tipContent;\r\n            } else if (typeof col.tipContent === 'function') {\r\n                txt = col.tipContent(txt, tn.data, col);\r\n            }\r\n        } else {\r\n            if (col.formatter) {\r\n                if (typeof col.formatter === 'object') {\r\n                    if (col.formatter.type === 'enum') {\r\n                        txt = this.commonUtils.getEnumTitleFromColumnOptions(txt, col.formatter.options);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return txt;\r\n    }\r\n}\r\n","import { Pipe, PipeTransform } from '@angular/core';\r\nimport { TreeNode } from './types/treenode';\r\n\r\n@Pipe({name: 'disablenode'})\r\nexport class DisableNodePipe implements PipeTransform {\r\n    transform(node: TreeNode, ...args: any[]): any {\r\n        const selectable = !node.selectable;\r\n        let selectable2 = false;\r\n        if (args && args.length) {\r\n            if (args[0]) {\r\n                selectable2 = args[0]({node});\r\n            }\r\n\r\n            if (args[1]) {  // æ è¡¨ç¦ç¨\r\n                return true;\r\n            }\r\n        }\r\n\r\n        return selectable || selectable2;\r\n    }\r\n}","\r\nimport { TTHotkeys } from './hotkeys';\r\nimport { InputGroupModule } from '@farris/ui-input-group';\r\nimport { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { TreetableService } from './treetable.service';\r\nimport { TreeTableComponent, TTBodyComponent,\r\n    TreeTableTogglerComponent,\r\n    TreeTableSelectRowDirective,\r\n    TreeTableCheckboxComponent,\r\n    TreeTableHeaderCheckboxComponent,\r\n    DblClickRowDirective,\r\n    TTResizableColumnDirective,\r\n    TreeTableColumnDirective,\r\n    TTCustomCellStyleDirective,\r\n    CustomRowStyleDirective} from './treetable.component';\r\nimport { PerfectScrollbarModule } from '@farris/ui-perfect-scrollbar';\r\nimport { FarrisCommonModule } from '@farris/ui-common';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { DataColumnModule } from '@farris/ui-common/column';\r\nimport { ResizeService } from '@farris/ui-common/events';\r\nimport { FindInputComponent } from './find-input.component';\r\nimport { HighlightPipe } from './high-light.pipe';\r\nimport { LocaleModule } from '@farris/ui-locale';\r\nimport { PaginationModule } from '@farris/ui-pagination';\r\nimport { TreetableNodesPagerComponent } from './nodes_pager/nodes-pager.component';\r\nimport { ChildsLoadingComponent } from './nodes_pager/childs-loading.component';\r\nimport { CellTipsPipe } from './cell-tips.pipe';\r\nimport { FarrisContextMenuModule } from '@farris/ui-context-menu';\r\nimport { DisableNodePipe } from './disable-node.pipe';\r\n@NgModule({\r\n    imports: [\r\n        CommonModule,\r\n        FormsModule,\r\n        FarrisCommonModule.forRoot(),\r\n        PerfectScrollbarModule,\r\n        InputGroupModule,\r\n        LocaleModule.forRoot(),\r\n        DataColumnModule.forRoot(),\r\n        PaginationModule,\r\n        FarrisContextMenuModule\r\n    ],\r\n    declarations: [\r\n        TreeTableComponent,\r\n        TTBodyComponent,\r\n        TreeTableTogglerComponent,\r\n        TreeTableSelectRowDirective,\r\n        TreeTableCheckboxComponent,\r\n        TreeTableHeaderCheckboxComponent,\r\n        DblClickRowDirective,\r\n        TTResizableColumnDirective,\r\n        TreeTableColumnDirective,\r\n        TTCustomCellStyleDirective,\r\n        FindInputComponent,\r\n        HighlightPipe,\r\n        CustomRowStyleDirective,\r\n        TreetableNodesPagerComponent,\r\n        ChildsLoadingComponent,\r\n        CellTipsPipe,\r\n        DisableNodePipe\r\n    ],\r\n    exports: [\r\n        TreeTableComponent,\r\n        TTBodyComponent,\r\n        TreeTableTogglerComponent,\r\n        TreeTableSelectRowDirective,\r\n        TreeTableCheckboxComponent,\r\n        TreeTableHeaderCheckboxComponent,\r\n        DblClickRowDirective,\r\n        TTResizableColumnDirective,\r\n        FarrisCommonModule,\r\n        TTCustomCellStyleDirective,\r\n        TreeTableColumnDirective,\r\n        HighlightPipe,\r\n        CustomRowStyleDirective,\r\n        TreetableNodesPagerComponent,\r\n        ChildsLoadingComponent,\r\n        CellTipsPipe,\r\n        DisableNodePipe,\r\n        FarrisContextMenuModule\r\n    ],\r\n    providers: [\r\n        TreetableService,\r\n        ResizeService,\r\n        TTHotkeys\r\n    ]\r\n})\r\nexport class TreeTableModule {\r\n\r\n}\r\n"]}