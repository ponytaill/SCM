!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?t(exports,require("rxjs"),require("@angular/common"),require("@angular/core")):"function"==typeof define&&define.amd?define("@farris/ui-view-change",["exports","rxjs","@angular/common","@angular/core"],t):t((e.farris=e.farris||{},e.farris["ui-view-change"]={}),e.rxjs,e.ng.common,e.ng.core)}(this,function(e,t,i,n){"use strict";var r=(s.prototype.addViewItem=function(e,t){if(void 0===t&&(t=this.defaultId),this.viewContainers[t]){if(this.hasElement(e,t))return;this.viewContainers[t].items.push(e)}else this.viewContainers[t]={items:[]},this.viewContainers[t].items.push(e)},s.prototype.removeViewItem=function(t,e){if(void 0===e&&(e=this.defaultId),delete this.viewContainers[e],this.viewContainers&&this.viewContainers[e]){var i=this.viewContainers[e].items.filter(function(e){return e!==t});if(!i.length)return void delete this.viewContainers[e];this.viewContainers[e].items=i}},s.prototype.updateCurrentViewId=function(e,t){void 0===t&&(t=this.defaultId),this.currentViewType[t]=e;var i={};i[t]=e,this.changeCurrentViewId.next(i)},s.prototype.getChangeCurrentViewId=function(){return this.changeCurrentViewId},s.prototype.hasElement=function(t,e){return this.viewContainers[e].items.some(function(e){return e===t})},s.decorators=[{type:n.Injectable,args:[{providedIn:"root"}]}],s.ctorParameters=function(){return[]},s.ngInjectableDef=n.defineInjectable({factory:function(){return new s},token:s,providedIn:"root"}),s);function s(){this.defaultId="default",this.currentViewType={},this.viewContainers={},this.changeCurrentViewId=new t.BehaviorSubject(null)}var a=(o.prototype.ngOnInit=function(){var t=this;if(this.toolbarData&&this.toolbarData.length)if(this.defaultType){var e=this.toolbarData.find(function(e){return e.type===t.defaultType});this.activeTypeItem=e,this.toolTypeChange.emit(this.activeTypeItem)}else this.activeTypeItem=this.toolbarData[0],this.toolTypeChange.emit(this.activeTypeItem)},o.prototype.ngAfterViewInit=function(){this.viewChangeService||(this.viewChangeService=new r),this.viewChangeService.updateCurrentViewId(this.activeTypeItem.type,this.viewGroupId)},o.prototype.listItemClick=function(e){e.disable||this.activeTypeItem.type===e.type||(this.activeTypeItem=e,this.viewChangeService||(this.viewChangeService=new r),this.viewChangeService.updateCurrentViewId(this.activeTypeItem.type,this.viewGroupId),this.toolTypeChange.emit(e),this.typelist&&this._renderer.setStyle(this.typelist.nativeElement,"display","none"))},o.prototype.dropdownMouseEnter=function(){this._renderer.setStyle(this.typelist.nativeElement,"display","block")},o.prototype.dropdownMouseLeave=function(){this._renderer.setStyle(this.typelist.nativeElement,"display","none")},o.decorators=[{type:n.Component,args:[{selector:"farris-view-change",template:'<div class="f-view-change">\r\n    <div class="f-view-change-tile" *ngIf="viewType === \'tile\'; else dropdown">\r\n        <div class="f-view-change-tile-btn" *ngFor="let item of toolbarData" [ngClass]="{\'tile-btn-active\': item.type === activeTypeItem.type,\'tile-btn-disable\': item.disable}" (click)="listItemClick(item)" [title]="item.title">\r\n            <span class="tile-btn-icon {{item.iconName}}"></span>\r\n        </div>\r\n    </div>\r\n    <ng-template #dropdown>\r\n        <div class="f-view-change-dropdown" \r\n        (mouseenter)="dropdownMouseEnter()"\r\n        (mouseleave)="dropdownMouseLeave()"> \r\n            <div class="f-view-change-toggle" *ngIf="this.toolbarData.length">\r\n                <span class="toggle-btn-icon {{activeTypeItem.iconName}}"></span>\r\n            </div>\r\n            <div class="f-view-change-typelist" #typelist>\r\n                <div class="f-view-change-typelist-content">\r\n                    <div class="f-view-change-typelist-arrow"></div>\r\n                    <ul class="f-view-change-typelist-list">\r\n                        <li class="typelist-item" *ngFor="let item of toolbarData" [ngClass]="{\'typelist-item-active\': item.type === activeTypeItem.type,\'typelist-item-disable\': item.disable}" (click)="listItemClick(item)">\r\n                                <span class="typelist-item-icon {{item.iconName}}"></span>\r\n                                <span class="typelist-item-title">{{item.title}}</span>\r\n                            </li>\r\n                    </ul>\r\n                </div>\r\n            </div>\r\n            \x3c!-- <ul class="f-view-change-typelist" #typelist>\r\n                <li class="f-view-change-typelist-arrow"></li>\r\n                <li class="typelist-item" *ngFor="let item of toolbarData" [ngClass]="{\'typelist-item-active\': item.type === activeTypeItem.type,\'typelist-item-disable\': item.disable}" (click)="listItemClick(item)">\r\n                    <span class="typelist-item-icon {{item.iconName}}"></span>\r\n                    <span class="typelist-item-title">{{item.title}}</span>\r\n                </li>\r\n            </ul> --\x3e\r\n        </div>\r\n    </ng-template>\r\n</div>',encapsulation:n.ViewEncapsulation.None,styles:[".f-viewchange-view-none{display:none!important}"]}]}],o.ctorParameters=function(){return[{type:n.Renderer2},{type:r}]},o.propDecorators={toolbarData:[{type:n.Input}],viewType:[{type:n.Input}],defaultType:[{type:n.Input}],viewGroupId:[{type:n.Input}],toolTypeChange:[{type:n.Output}],typelist:[{type:n.ViewChild,args:["typelist"]}]},o);function o(e,t){this._renderer=e,this.viewChangeService=t,this.viewType="tile",this.viewGroupId="default",this.toolTypeChange=new n.EventEmitter}var p=(l.prototype.ngOnInit=function(){var t=this;this.viewChangeService.addViewItem(this.viewItemType,this.fViewGroupId),this.viewChangeService.getChangeCurrentViewId().subscribe(function(e){e&&e[t.fViewGroupId]&&(e[t.fViewGroupId]==t.viewItemType?t.render.removeClass(t.elementRef.nativeElement,"f-viewchange-view-none"):t.render.addClass(t.elementRef.nativeElement,"f-viewchange-view-none"))})},l.prototype.ngOnDestroy=function(){this.viewChangeService.removeViewItem(this.viewItemType,this.fViewGroupId)},l.decorators=[{type:n.Directive,args:[{selector:"[fViewItem]"}]}],l.ctorParameters=function(){return[{type:n.ElementRef},{type:r},{type:n.Renderer2}]},l.propDecorators={viewItemType:[{type:n.Input,args:["fViewItem"]}],fViewGroupId:[{type:n.Input,args:["fViewGroupId"]}]},l);function l(e,t,i){this.elementRef=e,this.viewChangeService=t,this.render=i,this.fViewGroupId="default"}var c=(v.decorators=[{type:n.NgModule,args:[{declarations:[a,p],imports:[i.CommonModule],exports:[a,p]}]}],v);function v(){}e.ViewChangeService=r,e.ViewChangeComponent=a,e.ViewChangeModule=c,e.FarrisViewItemDirective=p,Object.defineProperty(e,"__esModule",{value:!0})});
//# sourceMappingURL=farris-ui-view-change.umd.min.js.map