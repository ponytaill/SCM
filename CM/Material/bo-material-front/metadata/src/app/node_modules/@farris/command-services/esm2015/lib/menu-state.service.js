import { Injectable } from '@angular/core';
// tslint:disable: no-unused-expression
/**
 * 菜单状态服务
 * @scope FormModule
 */
class MenuStateService {
    constructor() {
        this.COMMAND_SERVICE_LINK_STORAGE_KEY = 'COMMAND_SERVICE_LINK_STORAGE_KEY';
    }
    getState() {
        const data = !!sessionStorage && sessionStorage.getItem(this.COMMAND_SERVICE_LINK_STORAGE_KEY) || null;
        if (!!data) {
            return JSON.parse(data);
        }
        return {};
    }
    setState(links) {
        !!sessionStorage && sessionStorage.setItem(this.COMMAND_SERVICE_LINK_STORAGE_KEY, JSON.stringify(links));
    }
    addMenuState(parentMenuId, childMenuId, status = true) {
        if (!childMenuId) {
            return;
        }
        const state = this.getState();
        const isParentExist = !!state && state.hasOwnProperty(parentMenuId);
        const childItem = { id: childMenuId, status };
        if (isParentExist) {
            const parent = state[parentMenuId];
            const isChildItemExist = parent.find(item => item.id === childMenuId);
            if (!isChildItemExist) {
                state[parentMenuId].push(childItem);
            }
        }
        else {
            state[parentMenuId] = [childItem];
        }
        this.setState(state);
    }
    getMenuState(parentMenuId, childMenuId) {
        const state = this.getState();
        if (state === null) {
            return null;
        }
        const isParentExist = state.hasOwnProperty(parentMenuId);
        if (!isParentExist) {
            return null;
        }
        const parentMenu = state[parentMenuId];
        const childMenu = parentMenu.filter(item => item.status === true);
        if (typeof childMenuId === 'undefined' || childMenuId.length < 1) {
            return childMenu;
        }
        return parentMenu.filter(item => item.status && item.id === childMenuId);
    }
    updateMenuState(childMenuId, status) {
        const state = this.getState();
        if (state === null) {
            return;
        }
        Object.keys(state).forEach(key => {
            const childMenu = state[key].find(item => item.id === childMenuId);
            if (!!childMenu) {
                childMenu.status = status;
            }
        });
        this.setState(state);
    }
    removeMenu(menuId) {
        this.removeParentMenu(menuId);
        this.removeChildMenu(menuId);
    }
    removeParentMenu(menuId) {
        const state = this.getState();
        if (state === null) {
            return null;
        }
        Object.keys(state).forEach(item => {
            if (item === menuId && state[menuId].length < 1) {
                delete state[item];
            }
        });
        this.setState(state);
    }
    removeChildMenu(menuId) {
        const state = this.getState();
        if (state === null) {
            return;
        }
        Object.keys(state).forEach(parentMenuId => {
            const childMenus = state[parentMenuId];
            if (childMenus && childMenus.length > 0) {
                childMenus.forEach((child, index) => {
                    if (child.id === menuId) {
                        childMenus.splice(index, 1);
                    }
                });
            }
        });
        this.setState(state);
    }
}
MenuStateService.decorators = [
    { type: Injectable }
];
export { MenuStateService };
//# sourceMappingURL=data:application/json;base64,