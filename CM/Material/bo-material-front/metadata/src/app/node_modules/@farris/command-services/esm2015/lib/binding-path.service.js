import { Injectable, Injector } from "@angular/core";
import { AppContext, Repository } from "@farris/devkit";
export class BindingPathService {
    constructor(injector, appContext, repository) {
        this.injector = injector;
        this.appContext = appContext;
        this.repository = repository;
    }
    /**
     * 获取组件上下文的绑定路径
     * @param frameContext 组件上下文
     * @returns
     */
    getBindingPathsByFrameContext(frameContext) {
        return frameContext && frameContext.viewModel && frameContext.viewModel.bindingPath && frameContext.viewModel.bindingPath.split('/').filter(p => p) || null;
    }
    /**
     * 通过BE表名获取bindingPath
     * @param dataTypeInfo
     * @param tableName
     * @param paths
     * @param level
     * @returns
     */
    getBindingPathsByTableName(dataTypeInfo, tableName, paths = [], level = 0) {
        level++;
        if (dataTypeInfo.entityInfo && (dataTypeInfo.entityInfo.nodeCode === tableName || dataTypeInfo.entityInfo.originalCode === tableName)) {
            if (level !== 1) {
                paths.push(dataTypeInfo.entityInfo.nodeCode);
            }
            return paths;
        }
        const props = Array.from(dataTypeInfo.propInfoMap.values()).filter(p => p.typeInfo);
        if (props.length < 1) {
            paths = [];
            return paths;
        }
        if (dataTypeInfo.entityInfo) {
            if (level !== 1) {
                paths.push(dataTypeInfo.entityInfo.nodeCode);
            }
        }
        for (let idx = 0; idx < props.length; idx++) {
            const dataTypeInfo = props[idx].typeInfo;
            const path = this.getBindingPathsByTableName(dataTypeInfo, tableName, paths, level);
            if (!path || path.length < 1) {
                continue;
            }
            else {
                paths = paths.concat(path);
                return paths;
            }
        }
        return null;
    }
    /**
     * 获取属性路径中的绑定路径
     * @param paths paths
     * @param entityTypeInfo
     * @returns
     */
    getBindingPathsByPath(paths, entityTypeInfo) {
        let nodeCodes = [];
        if (typeof paths === 'string') {
            paths = paths.split('/').filter(p => p);
        }
        paths = paths.concat([]);
        while (paths.length > 0) {
            const dataPropInfo = entityTypeInfo.getPropInfoByPath(paths);
            if (dataPropInfo.group === 'List') {
                nodeCodes = paths;
                break;
            }
            paths.pop();
        }
        return nodeCodes;
    }
    /**
     * 获取属性路径信息
     * @param path 属性路径
     * @returns
     */
    getPathInfo(path) {
        const paths = path.split('/').filter(p => p);
        // 获取最大实体层级，其余为属性（简单属性、udt、关联、关联嵌套关联）
        const entityPath = this.getBindingPathsByPath(paths, this.repository.entityTypeInfo);
        const propertyName = paths.slice(entityPath.length).join('/');
        return { bindingPath: entityPath.join('/'), propertyName, bindingPaths: entityPath, propertyNames: propertyName.split('/').filter(p => p) };
    }
}
BindingPathService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
BindingPathService.ctorParameters = () => [
    { type: Injector },
    { type: AppContext },
    { type: Repository }
];
//# sourceMappingURL=data:application/json;base64,