import { Injectable } from '@angular/core';
import * as Mousetrap from 'mousetrap';
/**
 * 快捷键服务
 * @scope FormModule
 */
export class KeybindingService {
    constructor() {
        this.keyMap = new Map();
        this.bindingProvider = Mousetrap.default;
        this.ready = true;
    }
    /**
     * 对视图模型设置的快捷键进行绑定处理
     * @param viewModel 视图模型
     */
    bind(viewModel) {
        viewModel.keybindingMap.forEach((keyBinding, method) => {
            this.register(keyBinding, () => {
                return viewModel[method]();
            });
        });
    }
    /**
     * 注册快捷键
     * @param binding 键盘绑定信息
     * @param handler 响应事件
     */
    register(binding, handler) {
        var combo = this._getCombo(binding);
        if (combo) {
            this.keyMap.set(combo, handler);
            if (binding.ctrlKey && binding.altKey && !binding.shiftKey) {
                // 实际发现，ctrl+alt组合，只能触发keyup事件
                this.bindingProvider.bind(combo, this._dispatch.bind(this), 'keyup');
            }
            else {
                this.bindingProvider.bind(combo, this._dispatch.bind(this));
            }
        }
    }
    /**
     * 取消快捷键注册
     * @param binding 键盘绑定信息
     */
    unregister(binding) {
        var combo = this._getCombo(binding);
        if (combo) {
            this.keyMap.delete(combo);
            this.bindingProvider.unbind(combo);
        }
    }
    _dispatch(e) {
        if (e.repeat)
            return false;
        if (this.ready) {
            var combo = this._getCombo(e);
            if (combo && this.keyMap.has(combo)) {
                this.ready = false;
                this.keyMap.get(combo)().subscribe(() => {
                    this.ready = true;
                }, (error) => {
                    this.ready = true;
                }, () => {
                    this.ready = true;
                });
            }
        }
        return false;
    }
    /**
     * 返回ctrl+shift+alt+a形式的组合字符串，全部为小写
     * @param keyInfo
     */
    _getCombo(keyInfo) {
        var key = keyInfo.key.toLowerCase();
        if (key.length != 1 || key.charCodeAt(0) < 97 /* a */ || key.charCodeAt(0) > 122 /* z */) {
            console.warn("快捷键字母形式为a-z");
            return null;
        }
        var combo = (keyInfo.ctrlKey ? 'ctrl+' : '')
            + (keyInfo.shiftKey ? 'shift+' : '')
            + (keyInfo.altKey ? 'alt+' : '')
            + (keyInfo.metaKey ? 'meta+' : '')
            + key;
        if (combo.length == 1) {
            console.warn("快捷键至少包含一个Modifier键");
            return null;
        }
        return combo;
    }
}
KeybindingService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
KeybindingService.ctorParameters = () => [];
//# sourceMappingURL=data:application/json;base64,