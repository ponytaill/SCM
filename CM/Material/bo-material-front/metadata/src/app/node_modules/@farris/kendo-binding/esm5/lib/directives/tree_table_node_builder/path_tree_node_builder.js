import * as tslib_1 from "tslib";
// tslint:disable: no-string-literal
/**
 * 树节点构造器
 * @summary
 * 将BindingData中的数据集合转换成TreeTable节点集合
 */
var PathTreeNodeBuilder = /** @class */ (function () {
    /**
     * 构造函数
     */
    function PathTreeNodeBuilder(allNodesData, oldTreeNodes, primaryKey, hierarchyInfoKey, context) {
        this.levelGroup = {};
        /**
         * 等待展开的节点
         * @description 节点结构
         * ```
         * {id:'xxx',expanded:false}
         * ```
         */
        this.nodesWaitExpand = [];
        this.primaryKey = primaryKey;
        this.hierarchyInfoKey = hierarchyInfoKey;
        this.allNodes = [];
        this.allNodesData = allNodesData;
        this.context = context || {};
        this.nodesWaitExpand = [];
        this.nodesShouldExpand = context && context.nodesShouldExpand || [];
        this.frameContext = context && context.frameContext || null;
        this.addTreeLoadCompleteListener(this.onTreeLoadComplete.bind(this));
        this.initLevelGroup();
        this.allNodesMap = new Map();
        this.allOldNodesMap = new Map();
        this.buildNodesDataMap(oldTreeNodes);
    }
    Object.defineProperty(PathTreeNodeBuilder.prototype, "expandLevel", {
        /**
         * 展开至层级
         * @description -1为不展开
         */
        get: function () {
            return this.context && this.context.hasOwnProperty('expandLevel') ? this.context['expandLevel'] : -1;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PathTreeNodeBuilder.prototype, "component", {
        get: function () {
            return this.context && this.context['component'];
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PathTreeNodeBuilder.prototype, "addTreeLoadCompleteListener", {
        get: function () {
            return this.context && this.context['addTreeLoadCompleteListener'] || function (args) { };
        },
        enumerable: true,
        configurable: true
    });
    PathTreeNodeBuilder.prototype.updateTreeNode = function (allNodesData, data) {
        this.allNodesData = allNodesData;
        this.initLevelGroup();
        this.buildNodesDataMap(data);
    };
    PathTreeNodeBuilder.prototype.build = function () {
        var _this = this;
        var tree = [];
        var childrenOf = {};
        this.allNodesData.forEach(function (item) {
            var id = item.id;
            var parentId = _this.getParentId(item);
            // item.parentId = parentId;
            // 展开新增节点的父节点
            var isNewNode = _this.isNewNode(item);
            if (isNewNode === true) {
                _this.expandParentNode(item);
            }
            // 构造树节点
            var node = _this.buildNode(item);
            childrenOf[id] = childrenOf[id] || [];
            node.children = childrenOf[id];
            _this.allNodesMap.set(item[_this.primaryKey], node);
            if (parentId) {
                childrenOf[parentId] = childrenOf[parentId] || [];
                childrenOf[parentId].push(node);
            }
            else {
                tree.push(node);
            }
        });
        return tree;
    };
    /**
     * 构造树节点
     */
    PathTreeNodeBuilder.prototype.build1 = function () {
        var _this = this;
        var minLayer;
        // 获取最顶级节点的layer
        this.allNodesData.forEach(function (node) {
            var hierarchyInfo = _this.getHierarchyInfo(node);
            if (hierarchyInfo) {
                var layer = hierarchyInfo['layer'];
                if (!isNaN(layer)) {
                    if (minLayer === undefined) {
                        minLayer = layer;
                    }
                    else if (layer < minLayer) {
                        minLayer = layer;
                    }
                }
            }
        });
        var topLayer = minLayer - 1;
        this.buildNodes('', topLayer, this.allNodesData, this.allNodes);
        return this.allNodes;
    };
    /**
     * 构造树节点集合
     */
    PathTreeNodeBuilder.prototype.buildNodes = function (fPath, fLayer, allNodesData, treeNodes) {
        var _this = this;
        var childNodesData = this.getChildNodesData(fPath, fLayer);
        childNodesData.forEach(function (nodeData) {
            // 展开新增节点的父节点
            var isNewNode = _this.isNewNode(nodeData);
            if (isNewNode === true) {
                _this.expandParentNode(nodeData);
            }
            // 构造树节点
            var node = _this.buildNode(nodeData);
            treeNodes.push(node);
            _this.allNodesMap.set(nodeData[_this.primaryKey], node);
            // 递归遍历下级节点
            var hierarchyInfo = _this.getHierarchyInfo(nodeData); //nodeData[this.hierarchyInfoKey];
            var currentLayer = hierarchyInfo['layer'];
            var currentPath = hierarchyInfo['path'];
            _this.buildNodes(currentPath, currentLayer, allNodesData, node.children);
        });
    };
    /**
     * 创建树节点
     */
    PathTreeNodeBuilder.prototype.buildNode = function (nodeData) {
        var isLeaf = this.isLeaf(nodeData);
        // 获取节点的展开状态
        var shouldExpand = this.shouldExpand(nodeData);
        // 节点虽然应该展开，但可能是因为之前就是展开状态，所以应该检查节点之前的状态
        var originExpandStatus = this.isExpanded(nodeData);
        // 如果应该展开该节点，但是该节点之前有状态，那么该节点不应该再由程序展开。
        if (!originExpandStatus && shouldExpand) {
            this.expandNode(nodeData);
        }
        var paginationInfo = this.buildPaginationInfo(nodeData);
        var treeNode = {
            data: Object.assign({}, nodeData),
            children: [],
            expanded: shouldExpand,
            leaf: isLeaf
        };
        if (paginationInfo) {
            treeNode.pagination = paginationInfo;
        }
        return treeNode;
    };
    /**
     * 构造分页信息
     * @param nodeData nodeData
     * @returns
     */
    PathTreeNodeBuilder.prototype.buildPaginationInfo = function (nodeData) {
        var result = null;
        if (this.frameContext) {
            var id = this.getPrimary(nodeData);
            // 获取分页信息
            var key = "_NODE_" + id + "_PAGINATION_INFO_";
            var pagination = this.frameContext.params.get(key) || null;
            if (pagination && pagination.pageCount > 1) {
                result = {
                    pageIndex: pagination.pageIndex,
                    pageSize: pagination.pageSize,
                    total: pagination.totalCount
                };
            }
        }
        return result;
    };
    /**
     * 计算节点是否需要展开
     * @param nodeData nodeData
     */
    PathTreeNodeBuilder.prototype.shouldExpand = function (nodeData) {
        var _a = tslib_1.__read([this.getNodeLayer(nodeData), this.isLeaf(nodeData)], 2), layer = _a[0], isLeaf = _a[1];
        // 永远不展开叶子节点
        if (isLeaf) {
            return false;
        }
        var expanded = this.isExpanded(nodeData);
        if (!expanded) {
            var id_1 = this.getPrimary(nodeData);
            if (this.nodesWaitExpand.findIndex(function (node) { return node && node.id === id_1; }) > -1) {
                return false;
            }
            if (this.nodesShouldExpand.findIndex(function (nodeId) { return nodeId === id_1; }) > -1) {
                return true;
            }
            if (this.expandLevel === -1) {
                // -1 为不展开
                expanded = false;
            }
            else if (this.expandLevel === 0) {
                // 0 为全部展开
                expanded = true;
            }
            else {
                // 没有启用分层加载，通过展开层级确定是否展开该节点
                expanded = layer <= this.expandLevel;
                // 如果节点原本存在且节点没有展开则不展开
                var oldTreeNode = this.getOldNode(nodeData);
                if (oldTreeNode && !oldTreeNode.expanded) {
                    expanded = false;
                }
            }
        }
        return expanded;
    };
    /**
     * 展开树节点
     * @description 完全加载树使用展开属性在buildNode时已经展开，此函数的主要用于展开分级加载树
     * @param nodeData nodeData
     */
    PathTreeNodeBuilder.prototype.expandNode = function (nodeData) {
        var _a = tslib_1.__read([this.getNodePath(nodeData), this.getNodeLayer(nodeData)], 2), path = _a[0], layer = _a[1];
        var childs = this.getChildNodesData(path, layer);
        // 当前节点不是叶子节点，但在节点数据中又找不到该节点的子节点，则认为树启用了分层加载
        if (!childs || childs.length < 1) {
            // 分层加载树需要通过触发节点展开事件才加载下层，目前树上还不存在该节点，无法直接展开，需要等树加载完之后再展开
            var id_2 = this.getPrimary(nodeData);
            if (this.nodesWaitExpand.findIndex(function (node) { return node && node.id === id_2; }) < 0) {
                this.nodesWaitExpand.push({ id: id_2, expanded: false });
            }
        }
    };
    /**
     * 树加载完成事件
     */
    PathTreeNodeBuilder.prototype.onTreeLoadComplete = function () {
        var index = this.nodesWaitExpand.findIndex(function (node) { return !node.expanded; });
        var nodeData = this.nodesWaitExpand[index] || {};
        var id = nodeData.id;
        if (id) {
            var rowNode = this.component.findRowNode(id);
            if (rowNode) {
                nodeData.expanded = true;
                // if (nodeData && nodeData.node && !nodeData.node.expanded) {
                //   return;
                // }
                this.component.expandNode(id);
            }
        }
    };
    /**
     * 获取主键
     * @param nodeData nodeData
     */
    PathTreeNodeBuilder.prototype.getPrimary = function (nodeData) {
        return nodeData[this.primaryKey];
    };
    // #region 工具方法，待单独封装
    /**
     * 获取子级节点的数据集合
     */
    PathTreeNodeBuilder.prototype.getChildNodesData = function (fPath, fLayer) {
        var _this = this;
        var childNodesData = [];
        this.allNodesData.forEach(function (nodeData) {
            // @todo：待删除，兼容没有hierarchyInfo的数据
            var hierarchyInfo = _this.getHierarchyInfo(nodeData); //this.getValue(nodeData, this.hierarchyInfoKey); /// nodeData[this.hierarchyInfoKey];
            if (!hierarchyInfo) {
                return;
            }
            // 匹配节点
            var currentLayer = hierarchyInfo['layer'];
            var currentPath = hierarchyInfo['path'];
            if ((currentLayer === fLayer + 1) && currentPath && currentPath.startsWith(fPath)) {
                childNodesData.push(nodeData);
            }
        });
        return childNodesData;
    };
    PathTreeNodeBuilder.prototype.getHierarchyInfo = function (nodeData) {
        return this.getValue(nodeData, this.hierarchyInfoKey); //nodeData[this.hierarchyInfoKey];
    };
    PathTreeNodeBuilder.prototype.initLevelGroup = function () {
        var _this = this;
        this.levelGroup = {};
        this.allNodesData.forEach(function (nodeData) {
            var hierarchyInfo = _this.getHierarchyInfo(nodeData);
            var key = "level" + hierarchyInfo.layer;
            if (_this.levelGroup[key]) {
                _this.levelGroup[key].push(nodeData);
            }
            else {
                _this.levelGroup[key] = [nodeData];
            }
        });
    };
    PathTreeNodeBuilder.prototype.getParentId = function (node) {
        var _this = this;
        var hierarchyInfo = this.getHierarchyInfo(node);
        var parentLevelGroup = this.levelGroup[this.getLevelGroupKey(hierarchyInfo.layer - 1)] || [];
        var parent = parentLevelGroup.find(function (nodeData) {
            var currentHierarchyInfo = _this.getHierarchyInfo(nodeData);
            if (currentHierarchyInfo.isDetail === true) {
                return false;
            }
            return hierarchyInfo.path.startsWith(currentHierarchyInfo.path);
        });
        if (parent) {
            return parent.id;
        }
        else {
            return null;
        }
    };
    PathTreeNodeBuilder.prototype.getLevelGroupKey = function (level) {
        return "level" + level;
    };
    /**
     * 根据路径获取数据
     * @param target target
     * @param path 路径
     */
    PathTreeNodeBuilder.prototype.getValue = function (target, path) {
        if (path.indexOf('/') === -1) {
            return target[path];
        }
        var paths = path.split('/').filter(function (p) { return p; });
        if (paths.length < 1) {
            return target;
        }
        return paths.reduce(function (result, path) {
            return result && result[path];
        }, target);
    };
    /**
     * 获取分级信息中的层级
     * @param nodeData nodeData
     */
    PathTreeNodeBuilder.prototype.getNodeLayer = function (nodeData) {
        var hierarchyInfo = this.getHierarchyInfo(nodeData);
        return hierarchyInfo['layer'];
    };
    /**
     * 获取分级信息中的路径
     * @param nodeData nodeData
     */
    PathTreeNodeBuilder.prototype.getNodePath = function (nodeData) {
        var hierarchyInfo = this.getHierarchyInfo(nodeData);
        return hierarchyInfo['path'];
    };
    /**
     * 获取展开状态
     */
    PathTreeNodeBuilder.prototype.isExpanded = function (newData) {
        var oldTreeNode = this.getOldNode(newData);
        return oldTreeNode ? oldTreeNode.expanded : undefined;
    };
    /**
     * 是否是叶子节点
     * @todo：服务器端对isDetail的目前没有与前端同步，isDetail不准确。
     */
    PathTreeNodeBuilder.prototype.isLeaf = function (nodeData) {
        var hierarchyInfo = this.getHierarchyInfo(nodeData); // nodeData[this.hierarchyInfoKey];
        var isDetail = hierarchyInfo['isDetail'];
        return isDetail;
    };
    /**
     * 判断节点是否是新增
     * @todo：不应该这样判断，待优化。
     * @summary
     * 1、非空树（空树视为初次加载数据）；
     * 2、找不到oldNode。
     */
    PathTreeNodeBuilder.prototype.isNewNode = function (nodeData) {
        if (this.allOldNodesMap.size === 0) {
            return false;
        }
        var oldTreeNode = this.getOldNode(nodeData);
        return oldTreeNode ? false : true;
    };
    /**
     * 展开父节点
     */
    PathTreeNodeBuilder.prototype.expandParentNode = function (nodeData) {
        var parentTreeNode = this.getParentNode(nodeData);
        if (!parentTreeNode) {
            return;
        }
        parentTreeNode.leaf = false;
        parentTreeNode.expanded = true;
    };
    /**
     * 查找父节点
     */
    PathTreeNodeBuilder.prototype.getParentNode = function (nodeData) {
        var _this = this;
        var hierarchyInfo = this.getHierarchyInfo(nodeData); //nodeData[this.hierarchyInfoKey];
        var layer = hierarchyInfo['layer'];
        var path = hierarchyInfo['path'];
        var allNodes = Array.from(this.allNodesMap.values());
        var parentNode = allNodes.find(function (currentNode) {
            var currentLayer = _this.getValue(currentNode.data, _this.hierarchyInfoKey)['layer']; //currentNode.data[this.hierarchyInfoKey]['layer'];
            var currentPath = _this.getValue(currentNode.data, _this.hierarchyInfoKey)['path']; //  currentNode.data[this.hierarchyInfoKey]['path'];
            if ((layer === currentLayer + 1) && path.startsWith(currentPath) === true) {
                return true;
            }
            return false;
        });
        return parentNode;
    };
    /**
     * 获取老的树节点
     */
    PathTreeNodeBuilder.prototype.getOldNode = function (nodeData) {
        var id = nodeData[this.primaryKey];
        return this.allOldNodesMap.get(id);
    };
    /**
     * 打平TreeNodes，并放入一个Map中
     */
    PathTreeNodeBuilder.prototype.buildNodesDataMap = function (treeNodes) {
        var _this = this;
        treeNodes.forEach(function (treeNode) {
            _this.allOldNodesMap.set(treeNode.data[_this.primaryKey], treeNode);
            if (treeNode.children) {
                _this.buildNodesDataMap(treeNode.children);
            }
        });
    };
    return PathTreeNodeBuilder;
}());
export { PathTreeNodeBuilder };
//# sourceMappingURL=data:application/json;base64,