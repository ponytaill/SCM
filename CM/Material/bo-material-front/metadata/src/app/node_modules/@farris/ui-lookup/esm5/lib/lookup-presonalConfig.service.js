/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Injectable } from '@angular/core';
import { IdService } from '@farris/ui-common';
import { Subject } from 'rxjs';
var PersonalConfigService = /** @class */ (function () {
    function PersonalConfigService(idService) {
        this.idService = idService;
        this.selectItemObser$ = new Subject();
        this.displayType = 'LIST';
        this.singleSelect = true;
        // 个性化配置KEY
        this._key = '';
        this._newKey = '';
        // 组件ID
        this.controlID = '';
    }
    Object.defineProperty(PersonalConfigService.prototype, "personalConfigKey", {
        get: /**
         * @return {?}
         */
        function () {
            return this._key;
        },
        set: /**
         * @param {?} val
         * @return {?}
         */
        function (val) {
            if (val) {
                this._key = this.buildKey(val);
                if (this.controlID) {
                    this._newKey = this.buildKey(this.controlID + '_' + val);
                }
                else {
                    this._newKey = this._key;
                }
            }
            else {
                this._newKey = this.buildKey(this.controlID);
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @private
     * @param {?} str
     * @return {?}
     */
    PersonalConfigService.prototype.buildKey = /**
     * @private
     * @param {?} str
     * @return {?}
     */
    function (str) {
        /** @type {?} */
        var prefix = '';
        if (location.hash) {
            /** @type {?} */
            var pathArr = location.hash.split('?');
            prefix = pathArr ? pathArr[0] : '';
        }
        else {
            /** @type {?} */
            var pathArr = location.pathname.split('/');
            prefix = pathArr ? pathArr[pathArr.length - 1] : '';
        }
        return this.idService.encrypt(prefix + str);
    };
    /**
     * @param {?} obj
     * @return {?}
     */
    PersonalConfigService.prototype.initPersonalConf = /**
     * @param {?} obj
     * @return {?}
     */
    function (obj) {
        Object.assign(this, obj);
    };
    /**
     * @param {?=} key
     * @return {?}
     */
    PersonalConfigService.prototype.getPersonalData = /**
     * @param {?=} key
     * @return {?}
     */
    function (key) {
        if (key) {
            this._key = key;
        }
        if (this.personalConfigKey) {
            /** @type {?} */
            var conf = localStorage.getItem(this.personalConfigKey);
            if (conf && conf !== 'undefined' && conf !== 'null') {
                this.personalConf = conf ? JSON.parse(conf) : {};
                this._updatePersonalConfig(this.personalConf);
                if (this.controlID) {
                    if (this._key !== this._newKey) {
                        localStorage.removeItem(this._key);
                    }
                    this.savePersonalConfig(this.personalConf);
                }
                return this.personalConf;
            }
            else {
                return null;
            }
        }
        return null;
    };
    /**
     * @param {?=} localeId
     * @return {?}
     */
    PersonalConfigService.prototype.getQuickSelected = /**
     * @param {?=} localeId
     * @return {?}
     */
    function (localeId) {
        /** @type {?} */
        var d = this.getPersonalData();
        /** @type {?} */
        var qs = d ? d.quickSelected : null;
        if (localeId) {
            if (qs) {
                /** @type {?} */
                var items = qs[localeId];
                if (items && items.length) {
                    return items;
                }
            }
            return null;
        }
        return qs;
    };
    /**
     * @return {?}
     */
    PersonalConfigService.prototype.getDialogSize = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var d = this.getPersonalData();
        return d ? d.size : null;
    };
    /**
     * @param {?} cfg
     * @return {?}
     */
    PersonalConfigService.prototype.updatePersonalConfig = /**
     * @param {?} cfg
     * @return {?}
     */
    function (cfg) {
        /** @type {?} */
        var data = Object.assign(this.personalConf || {}, cfg);
        this.savePersonalConfig(data);
    };
    /**
     * @param {?} data
     * @return {?}
     */
    PersonalConfigService.prototype.savePersonalConfig = /**
     * @param {?} data
     * @return {?}
     */
    function (data) {
        if (this._newKey) {
            localStorage.setItem(this._newKey, JSON.stringify(data));
            this.personalConf = data;
            return true;
        }
        return false;
    };
    /**
     * @param {?=} tabName
     * @return {?}
     */
    PersonalConfigService.prototype.getActiveTabIndex = /**
     * @param {?=} tabName
     * @return {?}
     */
    function (tabName) {
        /** @type {?} */
        var d = this.getPersonalData();
        if (!tabName) {
            return d && d.tabIndex ? d.tabIndex : 'datalist';
        }
        return tabName;
    };
    /**
     * @param {?} selectedRow
     * @param {?} localeId
     * @return {?}
     */
    PersonalConfigService.prototype.updateQueckSelected = /**
     * @param {?} selectedRow
     * @param {?} localeId
     * @return {?}
     */
    function (selectedRow, localeId) {
        var _this = this;
        var _a, _b;
        /** @type {?} */
        var quickItems = this.getQuickSelected(localeId);
        if (quickItems && quickItems.length) {
            /** @type {?} */
            var selectedIndex_1 = [];
            quickItems.forEach((/**
             * @param {?} element
             * @param {?} index
             * @return {?}
             */
            function (element, index) {
                if (_this.singleSelect) {
                    if (element && selectedRow && element[_this.idField] === selectedRow[_this.idField]) {
                        selectedIndex_1.push(index);
                    }
                }
                else {
                    if (selectedRow) {
                        selectedRow.forEach((/**
                         * @param {?} item
                         * @return {?}
                         */
                        function (item) {
                            if (element && element[_this.idField] === item[_this.idField]) {
                                selectedIndex_1.push(index);
                            }
                        }));
                    }
                }
            }));
            selectedIndex_1.forEach((/**
             * @param {?} index
             * @return {?}
             */
            function (index) {
                quickItems[index] = null;
            }));
            this.personalConf.quickSelected[localeId] =
                this.personalConf.quickSelected[localeId].filter((/**
                 * @param {?} v
                 * @return {?}
                 */
                function (v) { return v !== null; }));
            if (this.singleSelect) {
                this.personalConf.quickSelected[localeId].unshift(selectedRow);
            }
            else {
                if (selectedRow) {
                    selectedRow.forEach((/**
                     * @param {?} element
                     * @return {?}
                     */
                    function (element) {
                        _this.personalConf.quickSelected[localeId].unshift(element);
                    }));
                }
            }
            this.personalConf.quickSelected[localeId].length =
                this.personalConf.quickSelected[localeId].length > 5 ?
                    5 : this.personalConf.quickSelected[localeId].length;
        }
        else {
            /** @type {?} */
            var _qs = this.personalConf.quickSelected || {};
            /** @type {?} */
            var newData = void 0;
            if (this.singleSelect) {
                newData = Object.assign(_qs, (_a = {}, _a[localeId] = [selectedRow], _a));
            }
            else {
                selectedRow.length = selectedRow.length > 5 ? 5 : selectedRow.length;
                newData = Object.assign(_qs, (_b = {}, _b[localeId] = selectedRow, _b));
            }
            this.personalConf.quickSelected = newData;
        }
        this.savePersonalConfig(this.personalConf);
    };
    /**
     *  更新数据结构，现有个性化数据均转为 中文环境下数据；
     */
    /**
     *  更新数据结构，现有个性化数据均转为 中文环境下数据；
     * @param {?} per
     * @return {?}
     */
    PersonalConfigService.prototype._updatePersonalConfig = /**
     *  更新数据结构，现有个性化数据均转为 中文环境下数据；
     * @param {?} per
     * @return {?}
     */
    function (per) {
        if (per) {
            /** @type {?} */
            var flag = false;
            // 更新收藏数据
            if (per.favorite && Array.isArray(per.favorite)) {
                per.favorite = { 'zh-CHS': tslib_1.__spread(per.favorite) };
                delete per.favorite;
                flag = true;
            }
            // 更新快捷录入数据
            if (per.selected) {
                if (Array.isArray(per.selected)) {
                    per.quickSelected = { 'zh-CHS': tslib_1.__spread(per.selected) };
                }
                delete per.selected;
                flag = true;
            }
            if (flag) {
                this.savePersonalConfig(per);
            }
        }
    };
    PersonalConfigService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    PersonalConfigService.ctorParameters = function () { return [
        { type: IdService }
    ]; };
    return PersonalConfigService;
}());
export { PersonalConfigService };
if (false) {
    /** @type {?} */
    PersonalConfigService.prototype.personalConf;
    /** @type {?} */
    PersonalConfigService.prototype.selectItemObser$;
    /** @type {?} */
    PersonalConfigService.prototype.displayType;
    /** @type {?} */
    PersonalConfigService.prototype.singleSelect;
    /** @type {?} */
    PersonalConfigService.prototype.idField;
    /** @type {?} */
    PersonalConfigService.prototype.textField;
    /** @type {?} */
    PersonalConfigService.prototype.mapFields;
    /**
     * @type {?}
     * @private
     */
    PersonalConfigService.prototype._key;
    /** @type {?} */
    PersonalConfigService.prototype._newKey;
    /** @type {?} */
    PersonalConfigService.prototype.controlID;
    /**
     * @type {?}
     * @private
     */
    PersonalConfigService.prototype.idService;
}
//# sourceMappingURL=data:application/json;base64,