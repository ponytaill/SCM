import { Subject, of } from 'rxjs';
import { Map } from 'immutable';
import { ChangeType, ViewChangeType } from './changes';
import { BindingPropertyType } from './binding_property';
/**
 * 绑定对象基类
 */
class BaseBindingObject {
    constructor() {
        this.__type__ = 'BindingObject';
        /**
         * 标识是否提交过
         */
        this.isShowValidationMsg = false;
        /**
         * 销毁流
         */
        this.unsubscribe = new Subject();
        /**
         * 以{ [propertyName]: FormControl }的形式存放每条数据的control
         */
        this.controlMap = {};
        this.innerValues = Map();
        this.changes = new Subject();
        this.viewChanges = new Subject();
    }
    /**
     * 主键值
     */
    get primaryKeyValue() {
        return this.primaryKey ? this.getValue(this.primaryKey) : '';
    }
    /**
     * 设置是否提交过
     */
    setShowValidationMsg(flag) {
        this.isShowValidationMsg = flag;
    }
    // public abstract load(data: any);
    /**
     * 根据属性名获取属性值
     * @param   propertyName 属性名
     * @returns 属性值
     */
    getValue(propertyName) {
        return this.innerValues.get(propertyName);
    }
    /**
     * 设置属性值
     * @param propertyName        属性名
     * @param propertyValue       属性值
     * @param emitEventToView     是否通知View层去更新界面，默认为false
     * @param emitEventToEntity   是否通知Entity层去更新值，默认为false
     * @param errors              错误消息
     * @param invokeOnValueChange 值变化事件执行句柄
     */
    setValue(propertyName, propertyValue, emitEventToView = false, emitEventToEntity = false, errors, invokeOnValueChange, context) {
        // 屏蔽掉无效的赋值，防止后续赋值对比时跳过，导致实体无法赋值
        // if (this.primaryKey && !this.primaryKeyValue && this.primaryKey !== propertyName) {
        //   return;
        // }
        const oldPropertyValue = this.getValue(propertyName);
        // 由于特定原因（@邵珠强），无法屏蔽oldPropertyValue === propertyValue
        // if (oldPropertyValue === propertyValue) {
        //   return;
        // }
        if (!invokeOnValueChange || oldPropertyValue === propertyValue) {
            // 设定缺省
            invokeOnValueChange = function (preValue, value, entityChanged, primaryValue) {
                return of(true);
            };
        }
        if (emitEventToEntity === true) {
            // BUG 322301，删除@2019.08.10; 如果无对应实体，则中止值传递; 这种情况发生在带从表的单据新增，从表响应Load变化的情况；
            // if(!this.innerValues.has(propertyName)) {
            //   return;
            // }
            // 执行实体值变化前事件
            invokeOnValueChange(oldPropertyValue, propertyValue, false, this.primaryKeyValue).subscribe((result) => {
                if (result) {
                    // 如果成功，执行变化，并通知实体变化
                    this.innerValues = this.innerValues.set(propertyName, propertyValue);
                    // this.data[propertyName] = propertyValue;
                    const viewChange = this.buildViewChangesContext(propertyName, propertyValue, oldPropertyValue, errors, context);
                    this.viewChanges.next(viewChange);
                    // 如果需要通知视图，通知视图相应修改
                    if (emitEventToView === true) {
                        const change = this.buildChangesContext(propertyName, propertyValue, context, errors);
                        this.changes.next(change);
                    }
                    // 执行实体值变化后事件
                    invokeOnValueChange(oldPropertyValue, propertyValue, true, this.primaryKeyValue).subscribe();
                }
                else {
                    // 如果失败，不再通知实体变化
                    // 并执行界面回滚操作
                    const change = this.buildChangesContext(propertyName, oldPropertyValue, context, errors);
                    this.changes.next(change);
                }
            });
        }
        else {
            // `emitEventToEntity === false`, 则认定实体值已经发生变化，通知视图变化，并触发实体值变化后事件
            this.innerValues = this.innerValues.set(propertyName, propertyValue);
            // this.data[propertyName] = propertyValue;
            if (emitEventToView === true) {
                const change = this.buildChangesContext(propertyName, propertyValue, context, errors);
                this.changes.next(change);
            }
            // 执行实体值变化后事件
            invokeOnValueChange(oldPropertyValue, propertyValue, true, this.primaryKeyValue).subscribe();
        }
    }
    /**
     * 将BindingObject实例转换成JSON对象
     */
    toJSON(options) {
        const langCode = this.getCurrentLanguage(); //window.localStorage.getItem('languageCode') || 'zh-CHS';
        const result = {};
        this.properties.forEach((property) => {
            const propName = property.name;
            if (property.type === BindingPropertyType.List) {
                const list = this[propName];
                result[propName] = list.toJSON(options);
            }
            else if (property.type === BindingPropertyType.Object) {
                const object = this[propName];
                result[propName] = object.toJSON(options);
            }
            else if (property.type === BindingPropertyType.Dynamic) {
                const object = this[propName];
                result[propName] = object.toJSON(options);
            }
            else {
                // 1、对于多语录入字段；
                // 2、传入ignoreMultiLangInput标志，则取当前语言的值给控件。
                if (property.enableMultiLangInput === true) {
                    // 忽略多语字段，只返回当前语言
                    if (options && options.ignoreMultiLangInput === true) {
                        const multiLangValueObj = this.getValue(propName);
                        if (multiLangValueObj) {
                            result[propName] = multiLangValueObj[langCode];
                        }
                        else {
                            result[propName] = multiLangValueObj;
                        }
                    }
                    else if (options && options.useFullMultiLangProperty) {
                        // 给审批提供的扩展 @2021-10-13
                        const multiLangValueObj = this.getValue(propName);
                        if (multiLangValueObj) {
                            result[`${propName}_MULTILANGUAGE`] = multiLangValueObj;
                            // 除返回多语字段外，将当前语言也返回
                            result[propName] = multiLangValueObj[langCode];
                        }
                    }
                    else {
                        const multiLangValueObj = this.getValue(propName);
                        if (!multiLangValueObj) {
                            result[propName] = { [langCode]: multiLangValueObj };
                        }
                        else {
                            result[propName] = multiLangValueObj;
                        }
                    }
                }
                else {
                    result[propName] = this.getValue(propName);
                }
            }
        });
        return result;
    }
    /**
     * 获取当前语言
     * @returns
     */
    getCurrentLanguage() {
        this.currentLanguage = this.currentLanguage || window.localStorage.getItem('languageCode') || 'zh-CHS';
        return this.currentLanguage;
    }
    /**
     * 构造bindignData变更上下文
     * @param propertyName
     * @param propertyValue
     * @param context
     * @param errors
     * @param type
     * @returns
     */
    buildChangesContext(propertyName, propertyValue, context, errors, type = ChangeType.ValueChanged) {
        return {
            type: type,
            path: [propertyName],
            value: propertyValue,
            id: this.primaryKeyValue,
            errors: errors,
            context
        };
    }
    /**
     * 构造viewChanges上下文
     * @param propertyName
     * @param value
     * @param preValue
     * @param errors
     * @param context
     * @param type
     * @returns
     */
    buildViewChangesContext(propertyName, value, preValue, errors, context, type = ViewChangeType.ValueChanged) {
        return {
            type: type,
            path: [propertyName],
            value: value,
            preValue: preValue,
            errors: errors,
            context
        };
    }
}
export { BaseBindingObject };
//# sourceMappingURL=data:application/json;base64,