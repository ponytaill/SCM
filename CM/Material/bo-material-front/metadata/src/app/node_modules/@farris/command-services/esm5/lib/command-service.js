import { Injectable } from '@angular/core';
import { filter, take } from 'rxjs/operators';
import { AppContext, ViewModel } from '@farris/devkit';
/**
 * 命令服务
 * @scope FrameConmponent
 */
var CommandService = /** @class */ (function () {
    function CommandService(viewModel, appContext) {
        this.viewModel = viewModel;
        this.appContext = appContext;
    }
    Object.defineProperty(CommandService.prototype, "context", {
        /**
         * context取值方法
         */
        get: function () {
            return this.innerContext;
        },
        /**
         * context设值方法
         */
        set: function (context) {
            this.innerContext = context;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * 执行命令
     * @param commandName 命令名称
     * @param frameId 框架ID
     */
    CommandService.prototype.execute = function (commandName, frameId) {
        if (!commandName || commandName === '' || commandName === 'undefined') {
            return;
        }
        var viewModel = this.viewModel;
        if (frameId) {
            var targetContext = this.appContext.frameContextManager.getFrameContextById(frameId);
            viewModel = targetContext.viewModel;
        }
        return viewModel[commandName]();
    };
    /**
     * 等待BeSession创建
     * @returns 最新创建出来的BeSession
     */
    CommandService.prototype.waitForBeSession = function () {
        var frameContext = this.context.frameContext;
        var befRepository = frameContext.repository;
        var sessionService = befRepository.restService.sessionService;
        return sessionService.getBeSessionId().pipe(filter(function (beSessionId) {
            return beSessionId !== null;
        }), take(1));
    };
    /**
     * 提取某个任务的执行结果
     * @param taskName 任务名称
     * @reutrn 返回taskName对应任务的执行结果
     */
    CommandService.prototype.extractResult = function (taskName) {
        var results = this.context.results;
        return results[taskName];
    };
    /**
     * 暂停当前组件的行切换事件抛出
     */
    CommandService.prototype.suspendFrameContextRowSelectedEvent = function (frameId) {
        var frameContext = this.viewModel.frameContext;
        if (frameId) {
            frameContext = this.viewModel.frameContext.appContext.frameContextManager.getFrameContextById(frameId);
        }
        if (frameContext) {
            frameContext.bindingData.rowSelectedEventSuspend = true;
        }
    };
    CommandService.prototype.resumeFrameContextRowSelectedEvent = function (frameId) {
        var frameContext = this.viewModel.frameContext;
        if (frameId) {
            frameContext = this.viewModel.frameContext.appContext.frameContextManager.getFrameContextById(frameId);
        }
        if (frameContext) {
            frameContext.bindingData.rowSelectedEventSuspend = false;
        }
    };
    CommandService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    CommandService.ctorParameters = function () { return [
        { type: ViewModel },
        { type: AppContext }
    ]; };
    return CommandService;
}());
export { CommandService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tbWFuZC1zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGZhcnJpcy9jb21tYW5kLXNlcnZpY2VzLyIsInNvdXJjZXMiOlsibGliL2NvbW1hbmQtc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRTNDLE9BQU8sRUFBRSxNQUFNLEVBQUUsSUFBSSxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDOUMsT0FBTyxFQUFFLFVBQVUsRUFBRSxTQUFTLEVBQXdDLE1BQU0sZ0JBQWdCLENBQUM7QUFHN0Y7OztHQUdHO0FBQ0g7SUFzQkUsd0JBQ1UsU0FBb0IsRUFDcEIsVUFBc0I7UUFEdEIsY0FBUyxHQUFULFNBQVMsQ0FBVztRQUNwQixlQUFVLEdBQVYsVUFBVSxDQUFZO0lBQzVCLENBQUM7SUFkTCxzQkFBVyxtQ0FBTztRQUhsQjs7V0FFRzthQUNIO1lBQ0UsT0FBTyxJQUFJLENBQUMsWUFBWSxDQUFDO1FBQzNCLENBQUM7UUFFRDs7V0FFRzthQUNILFVBQW1CLE9BQXVCO1lBQ3hDLElBQUksQ0FBQyxZQUFZLEdBQUcsT0FBTyxDQUFDO1FBQzlCLENBQUM7OztPQVBBO0lBY0Q7Ozs7T0FJRztJQUNJLGdDQUFPLEdBQWQsVUFBZSxXQUFtQixFQUFFLE9BQWdCO1FBQ2xELElBQUksQ0FBQyxXQUFXLElBQUksV0FBVyxLQUFLLEVBQUUsSUFBSSxXQUFXLEtBQUssV0FBVyxFQUFFO1lBQ3JFLE9BQU87U0FDUjtRQUNELElBQUksU0FBUyxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUM7UUFDL0IsSUFBSSxPQUFPLEVBQUU7WUFDWCxJQUFNLGFBQWEsR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLG1CQUFtQixDQUFDLG1CQUFtQixDQUFDLE9BQU8sQ0FBQyxDQUFDO1lBQ3ZGLFNBQVMsR0FBRyxhQUFhLENBQUMsU0FBUyxDQUFDO1NBQ3JDO1FBQ0QsT0FBTyxTQUFTLENBQUMsV0FBVyxDQUFDLEVBQUUsQ0FBQztJQUNsQyxDQUFDO0lBRUQ7OztPQUdHO0lBQ0kseUNBQWdCLEdBQXZCO1FBQ0UsSUFBTSxZQUFZLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxZQUFZLENBQUM7UUFDL0MsSUFBTSxhQUFhLEdBQUcsWUFBWSxDQUFDLFVBQW1DLENBQUM7UUFDdkUsSUFBTSxjQUFjLEdBQUcsYUFBYSxDQUFDLFdBQVcsQ0FBQyxjQUFjLENBQUM7UUFDaEUsT0FBTyxjQUFjLENBQUMsY0FBYyxFQUFFLENBQUMsSUFBSSxDQUN6QyxNQUFNLENBQUMsVUFBQyxXQUFtQjtZQUN6QixPQUFPLFdBQVcsS0FBSyxJQUFJLENBQUM7UUFDOUIsQ0FBQyxDQUFDLEVBQ0YsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUNSLENBQUM7SUFDSixDQUFDO0lBRUQ7Ozs7T0FJRztJQUNJLHNDQUFhLEdBQXBCLFVBQXFCLFFBQWdCO1FBQ25DLElBQU0sT0FBTyxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDO1FBQ3JDLE9BQU8sT0FBTyxDQUFDLFFBQVEsQ0FBQyxDQUFDO0lBQzNCLENBQUM7SUFDRDs7T0FFRztJQUNJLDREQUFtQyxHQUExQyxVQUEyQyxPQUFnQjtRQUN6RCxJQUFJLFlBQVksR0FBaUIsSUFBSSxDQUFDLFNBQVMsQ0FBQyxZQUFZLENBQUM7UUFDN0QsSUFBSSxPQUFPLEVBQUU7WUFDWCxZQUFZLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxZQUFZLENBQUMsVUFBVSxDQUFDLG1CQUFtQixDQUFDLG1CQUFtQixDQUFDLE9BQU8sQ0FBQyxDQUFDO1NBQ3hHO1FBQ0QsSUFBSSxZQUFZLEVBQUU7WUFDaEIsWUFBWSxDQUFDLFdBQVcsQ0FBQyx1QkFBdUIsR0FBRyxJQUFJLENBQUM7U0FDekQ7SUFFSCxDQUFDO0lBQ00sMkRBQWtDLEdBQXpDLFVBQTBDLE9BQWdCO1FBQ3hELElBQUksWUFBWSxHQUFpQixJQUFJLENBQUMsU0FBUyxDQUFDLFlBQVksQ0FBQztRQUM3RCxJQUFJLE9BQU8sRUFBRTtZQUNYLFlBQVksR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLFlBQVksQ0FBQyxVQUFVLENBQUMsbUJBQW1CLENBQUMsbUJBQW1CLENBQUMsT0FBTyxDQUFDLENBQUM7U0FDeEc7UUFDRCxJQUFJLFlBQVksRUFBRTtZQUNoQixZQUFZLENBQUMsV0FBVyxDQUFDLHVCQUF1QixHQUFHLEtBQUssQ0FBQztTQUMxRDtJQUNILENBQUM7O2dCQTFGRixVQUFVOzs7O2dCQVBVLFNBQVM7Z0JBQXJCLFVBQVU7O0lBa0duQixxQkFBQztDQUFBLEFBM0ZELElBMkZDO0FBRUQsT0FBTyxFQUFFLGNBQWMsRUFBRSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgZmlsdGVyLCB0YWtlIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuaW1wb3J0IHsgQXBwQ29udGV4dCwgVmlld01vZGVsLCBDb21tYW5kQ29udGV4dCwgRW50aXR5LCBGcmFtZUNvbnRleHQgfSBmcm9tICdAZmFycmlzL2RldmtpdCc7XG5pbXBvcnQgeyBCZWZSZXBvc2l0b3J5IH0gZnJvbSAnQGZhcnJpcy9iZWYnO1xuXG4vKipcbiAqIOWRveS7pOacjeWKoVxuICogQHNjb3BlIEZyYW1lQ29ubXBvbmVudFxuICovXG5ASW5qZWN0YWJsZSgpXG5jbGFzcyBDb21tYW5kU2VydmljZSB7XG5cbiAgLyoqXG4gICAqIOWGhemDqGNvdG5leHRcbiAgICovXG4gIHByaXZhdGUgaW5uZXJDb250ZXh0OiBDb21tYW5kQ29udGV4dDtcblxuICAvKipcbiAgICogY29udGV4dOWPluWAvOaWueazlVxuICAgKi9cbiAgcHVibGljIGdldCBjb250ZXh0KCk6IENvbW1hbmRDb250ZXh0IHtcbiAgICByZXR1cm4gdGhpcy5pbm5lckNvbnRleHQ7XG4gIH1cblxuICAvKipcbiAgICogY29udGV4dOiuvuWAvOaWueazlVxuICAgKi9cbiAgcHVibGljIHNldCBjb250ZXh0KGNvbnRleHQ6IENvbW1hbmRDb250ZXh0KSB7XG4gICAgdGhpcy5pbm5lckNvbnRleHQgPSBjb250ZXh0O1xuICB9XG5cbiAgY29uc3RydWN0b3IoXG4gICAgcHJpdmF0ZSB2aWV3TW9kZWw6IFZpZXdNb2RlbCxcbiAgICBwcml2YXRlIGFwcENvbnRleHQ6IEFwcENvbnRleHRcbiAgKSB7IH1cblxuICAvKipcbiAgICog5omn6KGM5ZG95LukXG4gICAqIEBwYXJhbSBjb21tYW5kTmFtZSDlkb3ku6TlkI3np7BcbiAgICogQHBhcmFtIGZyYW1lSWQg5qGG5p62SURcbiAgICovXG4gIHB1YmxpYyBleGVjdXRlKGNvbW1hbmROYW1lOiBzdHJpbmcsIGZyYW1lSWQ/OiBzdHJpbmcpOiBPYnNlcnZhYmxlPGFueT4ge1xuICAgIGlmICghY29tbWFuZE5hbWUgfHwgY29tbWFuZE5hbWUgPT09ICcnIHx8IGNvbW1hbmROYW1lID09PSAndW5kZWZpbmVkJykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBsZXQgdmlld01vZGVsID0gdGhpcy52aWV3TW9kZWw7XG4gICAgaWYgKGZyYW1lSWQpIHtcbiAgICAgIGNvbnN0IHRhcmdldENvbnRleHQgPSB0aGlzLmFwcENvbnRleHQuZnJhbWVDb250ZXh0TWFuYWdlci5nZXRGcmFtZUNvbnRleHRCeUlkKGZyYW1lSWQpO1xuICAgICAgdmlld01vZGVsID0gdGFyZ2V0Q29udGV4dC52aWV3TW9kZWw7XG4gICAgfVxuICAgIHJldHVybiB2aWV3TW9kZWxbY29tbWFuZE5hbWVdKCk7XG4gIH1cblxuICAvKipcbiAgICog562J5b6FQmVTZXNzaW9u5Yib5bu6XG4gICAqIEByZXR1cm5zIOacgOaWsOWIm+W7uuWHuuadpeeahEJlU2Vzc2lvblxuICAgKi9cbiAgcHVibGljIHdhaXRGb3JCZVNlc3Npb24oKTogT2JzZXJ2YWJsZTxzdHJpbmc+IHtcbiAgICBjb25zdCBmcmFtZUNvbnRleHQgPSB0aGlzLmNvbnRleHQuZnJhbWVDb250ZXh0O1xuICAgIGNvbnN0IGJlZlJlcG9zaXRvcnkgPSBmcmFtZUNvbnRleHQucmVwb3NpdG9yeSBhcyBCZWZSZXBvc2l0b3J5PEVudGl0eT47XG4gICAgY29uc3Qgc2Vzc2lvblNlcnZpY2UgPSBiZWZSZXBvc2l0b3J5LnJlc3RTZXJ2aWNlLnNlc3Npb25TZXJ2aWNlO1xuICAgIHJldHVybiBzZXNzaW9uU2VydmljZS5nZXRCZVNlc3Npb25JZCgpLnBpcGUoXG4gICAgICBmaWx0ZXIoKGJlU2Vzc2lvbklkOiBzdHJpbmcpID0+IHtcbiAgICAgICAgcmV0dXJuIGJlU2Vzc2lvbklkICE9PSBudWxsO1xuICAgICAgfSksXG4gICAgICB0YWtlKDEpXG4gICAgKTtcbiAgfVxuXG4gIC8qKlxuICAgKiDmj5Dlj5bmn5DkuKrku7vliqHnmoTmiafooYznu5PmnpxcbiAgICogQHBhcmFtIHRhc2tOYW1lIOS7u+WKoeWQjeensFxuICAgKiBAcmV1dHJuIOi/lOWbnnRhc2tOYW1l5a+55bqU5Lu75Yqh55qE5omn6KGM57uT5p6cXG4gICAqL1xuICBwdWJsaWMgZXh0cmFjdFJlc3VsdCh0YXNrTmFtZTogc3RyaW5nKSB7XG4gICAgY29uc3QgcmVzdWx0cyA9IHRoaXMuY29udGV4dC5yZXN1bHRzO1xuICAgIHJldHVybiByZXN1bHRzW3Rhc2tOYW1lXTtcbiAgfVxuICAvKipcbiAgICog5pqC5YGc5b2T5YmN57uE5Lu255qE6KGM5YiH5o2i5LqL5Lu25oqb5Ye6XG4gICAqL1xuICBwdWJsaWMgc3VzcGVuZEZyYW1lQ29udGV4dFJvd1NlbGVjdGVkRXZlbnQoZnJhbWVJZD86IHN0cmluZykge1xuICAgIGxldCBmcmFtZUNvbnRleHQ6IEZyYW1lQ29udGV4dCA9IHRoaXMudmlld01vZGVsLmZyYW1lQ29udGV4dDtcbiAgICBpZiAoZnJhbWVJZCkge1xuICAgICAgZnJhbWVDb250ZXh0ID0gdGhpcy52aWV3TW9kZWwuZnJhbWVDb250ZXh0LmFwcENvbnRleHQuZnJhbWVDb250ZXh0TWFuYWdlci5nZXRGcmFtZUNvbnRleHRCeUlkKGZyYW1lSWQpO1xuICAgIH1cbiAgICBpZiAoZnJhbWVDb250ZXh0KSB7XG4gICAgICBmcmFtZUNvbnRleHQuYmluZGluZ0RhdGEucm93U2VsZWN0ZWRFdmVudFN1c3BlbmQgPSB0cnVlO1xuICAgIH1cblxuICB9XG4gIHB1YmxpYyByZXN1bWVGcmFtZUNvbnRleHRSb3dTZWxlY3RlZEV2ZW50KGZyYW1lSWQ/OiBzdHJpbmcpIHtcbiAgICBsZXQgZnJhbWVDb250ZXh0OiBGcmFtZUNvbnRleHQgPSB0aGlzLnZpZXdNb2RlbC5mcmFtZUNvbnRleHQ7XG4gICAgaWYgKGZyYW1lSWQpIHtcbiAgICAgIGZyYW1lQ29udGV4dCA9IHRoaXMudmlld01vZGVsLmZyYW1lQ29udGV4dC5hcHBDb250ZXh0LmZyYW1lQ29udGV4dE1hbmFnZXIuZ2V0RnJhbWVDb250ZXh0QnlJZChmcmFtZUlkKTtcbiAgICB9XG4gICAgaWYgKGZyYW1lQ29udGV4dCkge1xuICAgICAgZnJhbWVDb250ZXh0LmJpbmRpbmdEYXRhLnJvd1NlbGVjdGVkRXZlbnRTdXNwZW5kID0gZmFsc2U7XG4gICAgfVxuICB9XG59XG5cbmV4cG9ydCB7IENvbW1hbmRTZXJ2aWNlIH07XG4iXX0=