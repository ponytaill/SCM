/**
 * CommandBus相关定义
 * @author Witt<jiwt@inspur.com>
 */
import { BehaviorSubject, Subject } from 'rxjs';
/**
 * CommandBus用于派发Command，它接受一个Command实例，查找对应的CommandHandler，并执行。
 */
class CommandBus {
    /**
     * 构造函数
     */
    constructor(handlerFactory) {
        this.handlerFactory = handlerFactory;
        this.executingCommands = [];
        this.executingCommandCount$ = new BehaviorSubject(this.executingCommands.length);
    }
    /**
     * 派发命令
     * @param command 要派发的命令
     */
    dispatch(command) {
        const commandResult$ = new Subject();
        this.executeCommand(command).subscribe({
            next: (lastTaskResult) => {
                commandResult$.next(lastTaskResult);
                commandResult$.complete();
            },
            complete: () => {
                commandResult$.complete();
                this.removeCommandFromExecutingQueue(command);
            },
            error: (error) => {
                commandResult$.error(error);
                this.removeCommandFromExecutingQueue(command);
            }
        });
        return commandResult$;
    }
    /**
     * 执行命令并返回最后一个任务的执行结果流
     */
    executeCommand(command) {
        this.addCommandToExecutingQueue(command);
        const commandName = command.name;
        const handler = this.handlerFactory.create(commandName);
        const lastTaskResult$ = handler.execute(command);
        return lastTaskResult$;
    }
    /**
     * 添加到执行队列
     */
    addCommandToExecutingQueue(command) {
        this.executingCommands.push(command);
        this.executingCommandCount$.next(this.executingCommands.length);
    }
    /**
     * 从执行队列中移除
     */
    removeCommandFromExecutingQueue(command) {
        this.executingCommands = this.executingCommands.filter((executingCommand) => {
            return executingCommand !== command;
        });
        this.executingCommandCount$.next(this.executingCommands.length);
    }
}
export { CommandBus };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tbWFuZF9idXMuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZmFycmlzL21vYmlsZS1kZXZraXQvIiwic291cmNlcyI6WyJsaWIvY29tbWFuZC9jb21tYW5kX2J1cy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7O0dBR0c7QUFFSCxPQUFPLEVBQWMsZUFBZSxFQUFFLE9BQU8sRUFBRSxNQUFNLE1BQU0sQ0FBQztBQVM1RDs7R0FFRztBQUNILE1BQU0sVUFBVTtJQWlCZDs7T0FFRztJQUNILFlBQW1CLGNBQXFDO1FBQ3RELElBQUksQ0FBQyxjQUFjLEdBQUcsY0FBYyxDQUFDO1FBQ3JDLElBQUksQ0FBQyxpQkFBaUIsR0FBRyxFQUFFLENBQUM7UUFDNUIsSUFBSSxDQUFDLHNCQUFzQixHQUFHLElBQUksZUFBZSxDQUFTLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUMzRixDQUFDO0lBRUQ7OztPQUdHO0lBQ0ksUUFBUSxDQUFDLE9BQWdCO1FBQzlCLE1BQU0sY0FBYyxHQUFHLElBQUksT0FBTyxFQUFFLENBQUM7UUFDckMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxTQUFTLENBQUM7WUFDbkMsSUFBSSxFQUFFLENBQUMsY0FBbUIsRUFBRSxFQUFFO2dCQUM1QixjQUFjLENBQUMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxDQUFDO2dCQUNwQyxjQUFjLENBQUMsUUFBUSxFQUFFLENBQUM7WUFDNUIsQ0FBQztZQUNELFFBQVEsRUFBRSxHQUFHLEVBQUU7Z0JBQ2IsY0FBYyxDQUFDLFFBQVEsRUFBRSxDQUFDO2dCQUMxQixJQUFJLENBQUMsK0JBQStCLENBQUMsT0FBTyxDQUFDLENBQUM7WUFDaEQsQ0FBQztZQUNELEtBQUssRUFBRSxDQUFDLEtBQVUsRUFBRyxFQUFFO2dCQUNyQixjQUFjLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDO2dCQUM1QixJQUFJLENBQUMsK0JBQStCLENBQUMsT0FBTyxDQUFDLENBQUM7WUFDaEQsQ0FBQztTQUNGLENBQUMsQ0FBQztRQUNMLE9BQU8sY0FBYyxDQUFDO0lBQ3hCLENBQUM7SUFFRDs7T0FFRztJQUNLLGNBQWMsQ0FBQyxPQUFnQjtRQUNyQyxJQUFJLENBQUMsMEJBQTBCLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDekMsTUFBTSxXQUFXLEdBQUcsT0FBTyxDQUFDLElBQUksQ0FBQztRQUNqQyxNQUFNLE9BQU8sR0FBRyxJQUFJLENBQUMsY0FBYyxDQUFDLE1BQU0sQ0FBQyxXQUFXLENBQUMsQ0FBQztRQUN4RCxNQUFNLGVBQWUsR0FBRyxPQUFPLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQ2pELE9BQU8sZUFBZSxDQUFDO0lBQ3pCLENBQUM7SUFHRDs7T0FFRztJQUNLLDBCQUEwQixDQUFDLE9BQWdCO1FBQ2pELElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDckMsSUFBSSxDQUFDLHNCQUFzQixDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsaUJBQWlCLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDbEUsQ0FBQztJQUVEOztPQUVHO0lBQ0ssK0JBQStCLENBQUMsT0FBZ0I7UUFDdEQsSUFBSSxDQUFDLGlCQUFpQixHQUFHLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsQ0FBQyxnQkFBeUIsRUFBRSxFQUFFO1lBQ25GLE9BQU8sZ0JBQWdCLEtBQUssT0FBTyxDQUFDO1FBQ3RDLENBQUMsQ0FBQyxDQUFDO1FBQ0gsSUFBSSxDQUFDLHNCQUFzQixDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsaUJBQWlCLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDbEUsQ0FBQztDQUVGO0FBRUQsT0FBTyxFQUFFLFVBQVUsRUFBRSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXHJcbiAqIENvbW1hbmRCdXPnm7jlhbPlrprkuYlcclxuICogQGF1dGhvciBXaXR0PGppd3RAaW5zcHVyLmNvbT5cclxuICovXHJcblxyXG5pbXBvcnQgeyBPYnNlcnZhYmxlLCBCZWhhdmlvclN1YmplY3QsIFN1YmplY3QgfSBmcm9tICdyeGpzJztcclxuaW1wb3J0IHsgdGFwIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xyXG5pbXBvcnQgeyBJbmplY3RvciB9IGZyb20gJy4uL2NvcmUvaW5kZXgnO1xyXG5pbXBvcnQgeyBDb21tYW5kIH0gZnJvbSAnLi9jb21tYW5kJztcclxuaW1wb3J0IHsgQ29tbWFuZEhhbmRsZXJGYWN0b3J5IH0gZnJvbSAnLi9jb21tYW5kX2hhbmRsZXJfZmFjdG9yeSc7XHJcbmltcG9ydCB7IENvbW1hbmRIYW5kbGVyUmVnaXN0cnkgfSBmcm9tICcuL2NvbW1hbmRfaGFuZGxlcl9yZWdpc3RyeSc7XHJcbmltcG9ydCB7IENvbW1hbmRIYW5kbGVyRXh0ZW5kZXJSZWdpc3RyeSB9IGZyb20gJy4vY29tbWFuZF9oYW5kbGVyX2V4dGVuZGVyX3JlZ2lzdHJ5JztcclxuXHJcblxyXG4vKipcclxuICogQ29tbWFuZEJ1c+eUqOS6jua0vuWPkUNvbW1hbmTvvIzlroPmjqXlj5fkuIDkuKpDb21tYW5k5a6e5L6L77yM5p+l5om+5a+55bqU55qEQ29tbWFuZEhhbmRsZXLvvIzlubbmiafooYzjgIJcclxuICovXHJcbmNsYXNzIENvbW1hbmRCdXMge1xyXG5cclxuICAvKipcclxuICAgKiBoYW5kbGVy5bel5Y6CXHJcbiAgICovXHJcbiAgcHJpdmF0ZSBoYW5kbGVyRmFjdG9yeTogQ29tbWFuZEhhbmRsZXJGYWN0b3J5O1xyXG5cclxuICAvKipcclxuICAgKiDmraPlnKjmiafooYznmoTlkb3ku6TmlbDph4/mtYHvvIjor7fli7/kvb/nlKjvvIzlkI7mnpzoh6rotJ/vvIlcclxuICAgKi9cclxuICBwdWJsaWMgZXhlY3V0aW5nQ29tbWFuZENvdW50JDogQmVoYXZpb3JTdWJqZWN0PG51bWJlcj47XHJcblxyXG4gIC8qKlxyXG4gICAqIOato+WcqOaJp+ihjOeahOWRveS7pOaVsOmHj1xyXG4gICAqL1xyXG4gIHByaXZhdGUgZXhlY3V0aW5nQ29tbWFuZHM6IENvbW1hbmRbXTtcclxuXHJcbiAgLyoqXHJcbiAgICog5p6E6YCg5Ye95pWwXHJcbiAgICovXHJcbiAgcHVibGljIGNvbnN0cnVjdG9yKGhhbmRsZXJGYWN0b3J5OiBDb21tYW5kSGFuZGxlckZhY3RvcnkpIHtcclxuICAgIHRoaXMuaGFuZGxlckZhY3RvcnkgPSBoYW5kbGVyRmFjdG9yeTtcclxuICAgIHRoaXMuZXhlY3V0aW5nQ29tbWFuZHMgPSBbXTtcclxuICAgIHRoaXMuZXhlY3V0aW5nQ29tbWFuZENvdW50JCA9IG5ldyBCZWhhdmlvclN1YmplY3Q8bnVtYmVyPih0aGlzLmV4ZWN1dGluZ0NvbW1hbmRzLmxlbmd0aCk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDmtL7lj5Hlkb3ku6RcclxuICAgKiBAcGFyYW0gY29tbWFuZCDopoHmtL7lj5HnmoTlkb3ku6RcclxuICAgKi9cclxuICBwdWJsaWMgZGlzcGF0Y2goY29tbWFuZDogQ29tbWFuZCk6IE9ic2VydmFibGU8YW55PiB7XHJcbiAgICBjb25zdCBjb21tYW5kUmVzdWx0JCA9IG5ldyBTdWJqZWN0KCk7XHJcbiAgICB0aGlzLmV4ZWN1dGVDb21tYW5kKGNvbW1hbmQpLnN1YnNjcmliZSh7XHJcbiAgICAgICAgbmV4dDogKGxhc3RUYXNrUmVzdWx0OiBhbnkpID0+IHtcclxuICAgICAgICAgIGNvbW1hbmRSZXN1bHQkLm5leHQobGFzdFRhc2tSZXN1bHQpO1xyXG4gICAgICAgICAgY29tbWFuZFJlc3VsdCQuY29tcGxldGUoKTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIGNvbXBsZXRlOiAoKSA9PiB7XHJcbiAgICAgICAgICBjb21tYW5kUmVzdWx0JC5jb21wbGV0ZSgpO1xyXG4gICAgICAgICAgdGhpcy5yZW1vdmVDb21tYW5kRnJvbUV4ZWN1dGluZ1F1ZXVlKGNvbW1hbmQpO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZXJyb3I6IChlcnJvcjogYW55KSAgPT4ge1xyXG4gICAgICAgICAgY29tbWFuZFJlc3VsdCQuZXJyb3IoZXJyb3IpO1xyXG4gICAgICAgICAgdGhpcy5yZW1vdmVDb21tYW5kRnJvbUV4ZWN1dGluZ1F1ZXVlKGNvbW1hbmQpO1xyXG4gICAgICAgIH1cclxuICAgICAgfSk7XHJcbiAgICByZXR1cm4gY29tbWFuZFJlc3VsdCQ7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDmiafooYzlkb3ku6Tlubbov5Tlm57mnIDlkI7kuIDkuKrku7vliqHnmoTmiafooYznu5PmnpzmtYFcclxuICAgKi9cclxuICBwcml2YXRlIGV4ZWN1dGVDb21tYW5kKGNvbW1hbmQ6IENvbW1hbmQpOiBPYnNlcnZhYmxlPGFueT4ge1xyXG4gICAgdGhpcy5hZGRDb21tYW5kVG9FeGVjdXRpbmdRdWV1ZShjb21tYW5kKTtcclxuICAgIGNvbnN0IGNvbW1hbmROYW1lID0gY29tbWFuZC5uYW1lO1xyXG4gICAgY29uc3QgaGFuZGxlciA9IHRoaXMuaGFuZGxlckZhY3RvcnkuY3JlYXRlKGNvbW1hbmROYW1lKTtcclxuICAgIGNvbnN0IGxhc3RUYXNrUmVzdWx0JCA9IGhhbmRsZXIuZXhlY3V0ZShjb21tYW5kKTtcclxuICAgIHJldHVybiBsYXN0VGFza1Jlc3VsdCQ7XHJcbiAgfVxyXG5cclxuXHJcbiAgLyoqXHJcbiAgICog5re75Yqg5Yiw5omn6KGM6Zif5YiXXHJcbiAgICovXHJcbiAgcHJpdmF0ZSBhZGRDb21tYW5kVG9FeGVjdXRpbmdRdWV1ZShjb21tYW5kOiBDb21tYW5kKSB7XHJcbiAgICB0aGlzLmV4ZWN1dGluZ0NvbW1hbmRzLnB1c2goY29tbWFuZCk7XHJcbiAgICB0aGlzLmV4ZWN1dGluZ0NvbW1hbmRDb3VudCQubmV4dCh0aGlzLmV4ZWN1dGluZ0NvbW1hbmRzLmxlbmd0aCk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDku47miafooYzpmJ/liJfkuK3np7vpmaRcclxuICAgKi9cclxuICBwcml2YXRlIHJlbW92ZUNvbW1hbmRGcm9tRXhlY3V0aW5nUXVldWUoY29tbWFuZDogQ29tbWFuZCkge1xyXG4gICAgdGhpcy5leGVjdXRpbmdDb21tYW5kcyA9IHRoaXMuZXhlY3V0aW5nQ29tbWFuZHMuZmlsdGVyKChleGVjdXRpbmdDb21tYW5kOiBDb21tYW5kKSA9PiB7XHJcbiAgICAgIHJldHVybiBleGVjdXRpbmdDb21tYW5kICE9PSBjb21tYW5kO1xyXG4gICAgfSk7XHJcbiAgICB0aGlzLmV4ZWN1dGluZ0NvbW1hbmRDb3VudCQubmV4dCh0aGlzLmV4ZWN1dGluZ0NvbW1hbmRzLmxlbmd0aCk7XHJcbiAgfVxyXG5cclxufVxyXG5cclxuZXhwb3J0IHsgQ29tbWFuZEJ1cyB9O1xyXG4iXX0=