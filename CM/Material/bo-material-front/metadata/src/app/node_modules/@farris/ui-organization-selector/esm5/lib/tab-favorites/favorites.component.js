/**
 * @fileoverview added by tsickle
 * Generated from: lib/tab-favorites/favorites.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input, ChangeDetectorRef, Injector } from '@angular/core';
import * as _ from 'lodash-es';
import { noDataImg } from '../../assets/resource';
import { ApiService } from '../../utils/api.service';
import { CommonUtil } from '../../utils/common.tool';
import { FavoritesTool } from '../../utils/favorites.tool';
import { ChangeType } from '../../utils/index.type';
import { StateMgrTool } from '../../utils/state.mgr.tool';
var FavoritesComponent = /** @class */ (function () {
    function FavoritesComponent(apiService, favoritesTool, stateMgr, cdr, injector) {
        this.apiService = apiService;
        this.favoritesTool = favoritesTool;
        this.stateMgr = stateMgr;
        this.cdr = cdr;
        this.injector = injector;
        this.allChecked = false;
        this.selections = [];
        this.allIndexId = 'allIndexId';
        this.noDataImg = noDataImg;
        this.items = [];
        this.favoritesList = [];
        this.allIndexId = CommonUtil.newGuid();
    }
    /**
     * @return {?}
     */
    FavoritesComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.selectionsSub.unsubscribe();
        this.favoritesSub.unsubscribe();
    };
    /**
     * @return {?}
     */
    FavoritesComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.favoritesSub = this.favoritesTool.favoritesSubject.subscribe((/**
         * @param {?} data
         * @return {?}
         */
        function (data) {
            _this.favoritesList = data;
            _this.loadFavoritesList();
        }));
        this.selectionsSub = this.stateMgr.selectionsSubject.subscribe((/**
         * @param {?} data
         * @return {?}
         */
        function (data) {
            if (data.changeType === ChangeType.ValueChanged) {
                _this.selections = _.cloneDeep(data.value);
            }
            else if (data.changeType === ChangeType.Remove) {
                _this.unSelectLine(data.value);
            }
            else if (data.changeType === ChangeType.Append) {
                _this.selectLine(data.value);
            }
            _this.toggleChecked();
            _this.cdr.detectChanges();
        }));
    };
    /**
     * @return {?}
     */
    FavoritesComponent.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
    };
    /**
     * @return {?}
     */
    FavoritesComponent.prototype.assembleData = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.favoritesSub = this.favoritesTool.favoritesSubject.subscribe((/**
         * @param {?} data
         * @return {?}
         */
        function (data) {
            _this.favoritesList = data;
            _this.loadFavoritesList();
        }));
    };
    /**
     * @param {?} e
     * @param {?} item
     * @return {?}
     */
    FavoritesComponent.prototype.deleteFromFavorites = /**
     * @param {?} e
     * @param {?} item
     * @return {?}
     */
    function (e, item) {
        this.favoritesTool.toggleFavorites(e, item);
    };
    /**
     * @param {?} e
     * @return {?}
     */
    FavoritesComponent.prototype.toggleAll = /**
     * @param {?} e
     * @return {?}
     */
    function (e) {
        if (!this.allChecked) {
            this.checkAll();
        }
        else {
            this.unCheckAll();
        }
        e.preventDefault();
    };
    /**
     * @param {?} data
     * @param {?} e
     * @return {?}
     */
    FavoritesComponent.prototype.toggleOne = /**
     * @param {?} data
     * @param {?} e
     * @return {?}
     */
    function (data, e) {
        if (data.checked) {
            if (this.multiSelect) {
                this.emitSelections(data, ChangeType.Remove);
            }
            else {
                this.emitSelections([]);
            }
        }
        else {
            if (this.multiSelect) {
                this.emitSelections(data, ChangeType.Append);
            }
            else {
                this.emitSelections(new Array(data));
            }
        }
        e.preventDefault();
    };
    /**
     * 用于数据展示
     */
    /**
     * 用于数据展示
     * @return {?}
     */
    FavoritesComponent.prototype.loadFavoritesList = /**
     * 用于数据展示
     * @return {?}
     */
    function () {
        var _this = this;
        this.items = [];
        this.favoritesList.forEach((/**
         * @param {?} res
         * @return {?}
         */
        function (res) {
            /** @type {?} */
            var indexId = CommonUtil.newGuid();
            /** @type {?} */
            var item = {
                orgId: res.orgId,
                code: res.code,
                name: res.name,
                orgAllPath: res.orgAllPath,
                path: res.path,
                layer: Number(res.layer),
                indexId: indexId
            };
            if (CommonUtil.findIndex(res[_this.primaryField], _this.primaryField, _this.selections) !== -1) {
                item.checked = true;
            }
            _this.items.push(item);
        }));
        this.items = this.items.slice();
        this.cdr.detectChanges();
    };
    /**
     * 全选后处理
     * @param dataArr 全选的值
     */
    /**
     * 全选后处理
     * @return {?}
     */
    FavoritesComponent.prototype.checkAll = /**
     * 全选后处理
     * @return {?}
     */
    function () {
        var _this = this;
        this.items.forEach((/**
         * @param {?} item
         * @return {?}
         */
        function (item) {
            if (CommonUtil.findIndex(item[_this.primaryField], _this.primaryField, _this.selections) === -1) {
                _this.emitSelections(item, ChangeType.Append);
            }
        }));
    };
    /**
     * 全部取消
     * @param dataArr 取消的数据
     * @returns void
     */
    /**
     * 全部取消
     * @return {?} void
     */
    FavoritesComponent.prototype.unCheckAll = /**
     * 全部取消
     * @return {?} void
     */
    function () {
        var _this = this;
        /** @type {?} */
        var checkeds = this.items.filter((/**
         * @param {?} item
         * @return {?}
         */
        function (item) { return item.checked; }));
        checkeds.forEach((/**
         * @param {?} item
         * @return {?}
         */
        function (item) {
            _this.emitSelections(item, ChangeType.Remove);
        }));
    };
    /**
     * 当前行选中
     * @param data 当前行的数据（）
     */
    /**
     * 当前行选中
     * @private
     * @param {?} data 当前行的数据（）
     * @return {?}
     */
    FavoritesComponent.prototype.selectLine = /**
     * 当前行选中
     * @private
     * @param {?} data 当前行的数据（）
     * @return {?}
     */
    function (data) {
        if (this.multiSelect) {
            this._insertOneIntoSelections(data);
        }
        else {
            this.selections = [];
            this.items.forEach((/**
             * @param {?} item
             * @return {?}
             */
            function (item) {
                if (item.checked) {
                    item.checked = false;
                }
            }));
            this._insertOneIntoSelections(data);
        }
        if (this.isAllChecked()) {
            this.allChecked = true;
        }
    };
    /**
     * 单选取消选中
     * @param data 取消选中行
     */
    /**
     * 单选取消选中
     * @private
     * @param {?} data 取消选中行
     * @return {?}
     */
    FavoritesComponent.prototype.unSelectLine = /**
     * 单选取消选中
     * @private
     * @param {?} data 取消选中行
     * @return {?}
     */
    function (data) {
        /** @type {?} */
        var index = CommonUtil.findIndex(data[this.primaryField], this.primaryField, this.selections);
        if (index > -1) {
            this.selections.splice(index, 1);
        }
        this.setChecked(data, false);
        if (this.allChecked) {
            this.allChecked = false;
        }
    };
    /**
     * @private
     * @param {?} data
     * @param {?} checked
     * @return {?}
     */
    FavoritesComponent.prototype.setChecked = /**
     * @private
     * @param {?} data
     * @param {?} checked
     * @return {?}
     */
    function (data, checked) {
        /** @type {?} */
        var itemIndex = CommonUtil.findIndex(data[this.primaryField], this.primaryField, this.items);
        if (itemIndex > -1) {
            this.items[itemIndex].checked = checked;
        }
    };
    /**
     * @private
     * @param {?} selections
     * @param {?=} changeType
     * @param {?=} from
     * @return {?}
     */
    FavoritesComponent.prototype.emitSelections = /**
     * @private
     * @param {?} selections
     * @param {?=} changeType
     * @param {?=} from
     * @return {?}
     */
    function (selections, changeType, from) {
        if (changeType === void 0) { changeType = ChangeType.ValueChanged; }
        if (from === void 0) { from = 'favorite'; }
        this.stateMgr.emitSelections(selections, changeType, from);
    };
    /**
     * @param {?} e
     * @param {?} item
     * @return {?}
     */
    FavoritesComponent.prototype.toggleFavorites = /**
     * @param {?} e
     * @param {?} item
     * @return {?}
     */
    function (e, item) {
        this.favoritesTool.toggleFavorites(e, item);
    };
    /**
     * 全部取消勾选
     */
    /**
     * 全部取消勾选
     * @return {?}
     */
    FavoritesComponent.prototype.clearCheckeds = /**
     * 全部取消勾选
     * @return {?}
     */
    function () {
        this.items.forEach((/**
         * @param {?} item
         * @return {?}
         */
        function (item) {
            item.checked = false;
        }));
        this.allChecked = false;
        this.selections = [];
    };
    /**
     * 选中并插入当前行数据到右侧
     * @param data 当前行的数据
     * @param collection 暂存当前数据的集合
     */
    /**
     * 选中并插入当前行数据到右侧
     * @param {?} data 当前行的数据
     * @return {?}
     */
    FavoritesComponent.prototype._insertOneIntoSelections = /**
     * 选中并插入当前行数据到右侧
     * @param {?} data 当前行的数据
     * @return {?}
     */
    function (data) {
        // 如果当前数据已经移入右侧数据，则返回。
        if (CommonUtil.findIndex(data[this.primaryField], this.primaryField, this.selections) > -1) {
            return;
        }
        this.setChecked(data, true);
        this.selections.push(data);
        this.selections = this.selections.slice();
    };
    /**
     * 翻页检查：人员展示区的勾选状态与已选人员区是否对应
     */
    /**
     * 翻页检查：人员展示区的勾选状态与已选人员区是否对应
     * @return {?}
     */
    FavoritesComponent.prototype.toggleChecked = /**
     * 翻页检查：人员展示区的勾选状态与已选人员区是否对应
     * @return {?}
     */
    function () {
        var _this = this;
        this.items.forEach((/**
         * @param {?} item
         * @return {?}
         */
        function (item) {
            if (CommonUtil.findIndex(item[_this.primaryField], _this.primaryField, _this.selections) > -1) {
                item.checked = true;
            }
            else {
                item.checked = false;
            }
        }));
        if (this.isAllChecked()) {
            this.allChecked = true;
        }
        else {
            this.allChecked = false;
        }
    };
    /**
     * @private
     * @return {?}
     */
    FavoritesComponent.prototype.isAllChecked = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var count = 0;
        /** @type {?} */
        var allChecked = false;
        this.items.forEach((/**
         * @param {?} item
         * @return {?}
         */
        function (item) {
            _this.selections.forEach((/**
             * @param {?} selection
             * @return {?}
             */
            function (selection) {
                if (item[_this.primaryField] === selection[_this.primaryField]) {
                    count += 1;
                }
            }));
        }));
        if (this.items.length === count && count > 0) {
            allChecked = true;
        }
        return allChecked;
    };
    /**
     * @param {?} index
     * @param {?} item
     * @return {?}
     */
    FavoritesComponent.prototype.trackByFn = /**
     * @param {?} index
     * @param {?} item
     * @return {?}
     */
    function (index, item) {
        return index;
    };
    FavoritesComponent.decorators = [
        { type: Component, args: [{
                    selector: 'lib-favorites',
                    template: "<div class=\"os-card\">\r\n    <div class=\"os-card-title\" *ngIf=\"multiSelect && items.length > 0\">\r\n        <div class=\"custom-control custom-checkbox\">\r\n            <input class=\"custom-control-input\" [id]=\"allIndexId\" type=\"checkbox\" [checked]=\"allChecked\">\r\n            <label class=\"custom-control-label\" [for]=\"allIndexId\"\r\n                (click)=\"toggleAll($event)\">{{'organizationSelector.tabCommon.firstCheckAllText' | locale}}{{items.length}}{{'organizationSelector.tabCommon.lastCheckAllText' | locale}}</label>\r\n        </div>\r\n    </div>\r\n    <div class=\"os-card-blank\" *ngIf=\"!multiSelect\"></div>\r\n    <perfect-scrollbar>\r\n        <div class=\"os-card-content\">\r\n            <div *ngFor=\"let data of items; let i = index;trackBy: trackByFn\" class=\"s-selectedPerson\">\r\n                <div class=\"custom-control custom-checkbox mb-2\">\r\n                    <input class=\"custom-control-input\" [id]=\"data.indexId\" type=\"checkbox\" [checked]=\"data.checked\">\r\n                    <label class=\"custom-control-label\" [for]=\"data.indexId\" (click)=\"toggleOne(data, $event)\">\r\n                        <div class=\"src-item-container\">\r\n                            <div class=\"src-item-content\">\r\n                                <p class=\"os-card-content-title\" title=\"{{data.name}}\">\r\n                                    {{data.name}}</p>\r\n                                <p class=\"os-card-content-orgpath\" title=\"{{data.orgAllPath}}\">\r\n                                    {{data.orgAllPath}}</p>\r\n                            </div>\r\n                        </div>\r\n                    </label>\r\n                </div>\r\n                <span class=\"f-icon f-icon-minus-circle\"\r\n                    (click)=\"deleteFromFavorites($event, data)\"></span>\r\n            </div>\r\n            <div *ngIf=\"items.length===0\" [ngStyle]=\"{'background-image': noDataImg}\" class=\"fp-os-card-nodata\">\r\n                {{'organizationSelector.tabCommon.noOrgData' | locale}}</div>\r\n        </div>\r\n    </perfect-scrollbar>\r\n    <!-- \u5206\u9875\r\n    <div class=\"pagination-container\" *ngIf=\"items.length!==0\">\r\n        <ul class=\"ngx-pagination pagination pager-viewmode-simple\">\r\n            <li class=\"page-item d-flex flex-fill\"></li>\r\n            <li class=\"page-item\" [class.disabled]=\"pageIndex === 1\" (click)=\"turnOverPage('pre', -1)\">\r\n                <span class=\"page-link border-0\">\r\n                    <span class=\"f-icon f-page-pre\"></span>\r\n                </span>\r\n            </li>\r\n            <li class=\"page-item\">\r\n                <input id=\"farris-datagrid-gotopagenumber\" min=\"1\" type=\"number\" max=\"{{pageTotal}}\"\r\n                    [(ngModel)]=\"pageIndex\" style=\"width: 38px;\" (keyup.enter)=\"switchPage({pageIndex: pageIndex})\"\r\n                    (input)=\"beforePageIndexChange($event, pageTotal)\">\r\n            </li>\r\n            <li class=\"page-item page-separator\" style=\"margin-left: 10px\"> / </li>\r\n            <li class=\"page-item page-total\" style=\"margin-left: 5px\">\r\n                <span style=\"font-size: 16px; font-weight: 600;\"> {{pageTotal}}</span>\r\n            </li>\r\n            <li class=\"page-item\" [class.disabled]=\"pageIndex === pageTotal\" (click)=\"turnOverPage('next', 1)\">\r\n                <a class=\"page-link border-0\">\r\n                    <span class=\"f-icon f-page-next\"></span>\r\n                </a>\r\n            </li>\r\n        </ul>\r\n    </div>\r\n    -->\r\n</div>",
                    styles: [":host{background:#fff;display:-webkit-box;display:flex;width:100%;height:100%}.os-card{display:-webkit-box;display:flex;-webkit-box-orient:vertical;-webkit-box-direction:normal;flex-direction:column;-webkit-box-flex:1;flex:1;overflow:hidden}.os-card .s-selectedPerson:hover{background:#eef5ff;border-radius:5px}.os-card .os-card-content{padding-top:3px;clear:both}.os-card .os-card-content .src-item-container{display:-webkit-box;display:flex;height:32px;margin:-21px 0 0 15px}.os-card .os-card-content .src-item-content{margin-left:11px;margin-top:-2px;padding-right:10px;overflow:hidden}.os-card .s-selectedPerson{min-width:240px;float:left;width:calc(50% - 6px);position:relative;height:40px;padding:5px 12px;margin:0 3px 10px}.os-card .s-selectedPerson .f-icon-minus-circle,.os-card .s-selectedPerson .f-icon-star{position:absolute;top:13px;right:15px;font-size:14px;cursor:pointer}.os-card .s-selectedPerson .f-icon-minus-circle{color:#f46160}.os-card .s-selectedPerson .default-light-color{color:#f7b500}.os-card .s-selectedPerson .default-dark-color{color:#d8dce6}.os-card .k-checkbox-label::after,.os-card .k-checkbox-label::before{top:10px;font-size:16px;width:14px;height:14px}.os-card .fp-os-card-nodata{width:100px;height:100px;text-align:center;background-repeat:no-repeat;background-size:contain;color:#b4bccc;padding-top:110px;position:absolute;left:50%;top:50%;margin:-70px 0 0 -50px}.os-card .os-card-content-title{margin:0;overflow:hidden;white-space:nowrap;text-overflow:ellipsis;font-size:13px}.os-card .os-card-content-orgpath{margin:0;font-size:12px;overflow:hidden;white-space:nowrap;text-overflow:ellipsis;color:#c7ccd7}.os-card .os-card-title{display:-webkit-box;display:flex;-webkit-box-pack:justify;justify-content:space-between;font-size:14px}.os-card .os-card-title .custom-control{margin-left:15px;line-height:35px}.os-card .os-card-title .title-clearall{margin:10px 15px 0 0;color:#2a87ff;cursor:pointer;line-height:35px}.os-card .s-selectedPerson .custom-control-label::before{top:1px}.os-card .os-card-title .f-icon{color:#878d99;cursor:pointer}.os-card .os-card-blank{width:100%;height:20px}"]
                }] }
    ];
    /** @nocollapse */
    FavoritesComponent.ctorParameters = function () { return [
        { type: ApiService },
        { type: FavoritesTool },
        { type: StateMgrTool },
        { type: ChangeDetectorRef },
        { type: Injector }
    ]; };
    FavoritesComponent.propDecorators = {
        primaryField: [{ type: Input }],
        multiSelect: [{ type: Input }]
    };
    return FavoritesComponent;
}());
export { FavoritesComponent };
if (false) {
    /** @type {?} */
    FavoritesComponent.prototype.primaryField;
    /** @type {?} */
    FavoritesComponent.prototype.multiSelect;
    /** @type {?} */
    FavoritesComponent.prototype.allChecked;
    /** @type {?} */
    FavoritesComponent.prototype.selections;
    /** @type {?} */
    FavoritesComponent.prototype.allIndexId;
    /** @type {?} */
    FavoritesComponent.prototype.noDataImg;
    /** @type {?} */
    FavoritesComponent.prototype.items;
    /** @type {?} */
    FavoritesComponent.prototype.favoritesList;
    /**
     * @type {?}
     * @private
     */
    FavoritesComponent.prototype.selectionsSub;
    /**
     * @type {?}
     * @private
     */
    FavoritesComponent.prototype.favoritesSub;
    /**
     * @type {?}
     * @private
     */
    FavoritesComponent.prototype.apiService;
    /**
     * @type {?}
     * @private
     */
    FavoritesComponent.prototype.favoritesTool;
    /**
     * @type {?}
     * @private
     */
    FavoritesComponent.prototype.stateMgr;
    /**
     * @type {?}
     * @private
     */
    FavoritesComponent.prototype.cdr;
    /**
     * @type {?}
     * @private
     */
    FavoritesComponent.prototype.injector;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmF2b3JpdGVzLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BmYXJyaXMvdWktb3JnYW5pemF0aW9uLXNlbGVjdG9yLyIsInNvdXJjZXMiOlsibGliL3RhYi1mYXZvcml0ZXMvZmF2b3JpdGVzLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLE9BQU8sRUFDSCxTQUFTLEVBQUUsS0FBSyxFQUF5QixpQkFBaUIsRUFBdUIsUUFBUSxFQUM1RixNQUFNLGVBQWUsQ0FBQztBQUN2QixPQUFPLEtBQUssQ0FBQyxNQUFNLFdBQVcsQ0FBQztBQUUvQixPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sdUJBQXVCLENBQUM7QUFDbEQsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLHlCQUF5QixDQUFDO0FBQ3JELE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSx5QkFBeUIsQ0FBQztBQUNyRCxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sNEJBQTRCLENBQUM7QUFDM0QsT0FBTyxFQUFFLFVBQVUsRUFBaUMsTUFBTSx3QkFBd0IsQ0FBQztBQUNuRixPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sNEJBQTRCLENBQUM7QUFFMUQ7SUFvQkksNEJBQ1ksVUFBc0IsRUFDdEIsYUFBNEIsRUFDNUIsUUFBc0IsRUFDdEIsR0FBc0IsRUFDdEIsUUFBa0I7UUFKbEIsZUFBVSxHQUFWLFVBQVUsQ0FBWTtRQUN0QixrQkFBYSxHQUFiLGFBQWEsQ0FBZTtRQUM1QixhQUFRLEdBQVIsUUFBUSxDQUFjO1FBQ3RCLFFBQUcsR0FBSCxHQUFHLENBQW1CO1FBQ3RCLGFBQVEsR0FBUixRQUFRLENBQVU7UUFmOUIsZUFBVSxHQUFHLEtBQUssQ0FBQztRQUNuQixlQUFVLEdBQVUsRUFBRSxDQUFDO1FBQ3ZCLGVBQVUsR0FBRyxZQUFZLENBQUM7UUFDMUIsY0FBUyxHQUFHLFNBQVMsQ0FBQztRQUN0QixVQUFLLEdBQUcsRUFBRSxDQUFDO1FBQ1gsa0JBQWEsR0FB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UUFDakIsT0FBTyxLQUFLLENBQUM7SUFDakIsQ0FBQzs7Z0JBalFKLFNBQVMsU0FBQztvQkFDUCxRQUFRLEVBQUUsZUFBZTtvQkFDekIsb2tIQUF5Qzs7aUJBRTVDOzs7O2dCQVZRLFVBQVU7Z0JBRVYsYUFBYTtnQkFFYixZQUFZO2dCQVR3QixpQkFBaUI7Z0JBQXVCLFFBQVE7OzsrQkFrQnhGLEtBQUs7OEJBQ0wsS0FBSzs7SUEyUFYseUJBQUM7Q0FBQSxBQW5RRCxJQW1RQztTQTlQWSxrQkFBa0I7OztJQUUzQiwwQ0FBOEI7O0lBQzlCLHlDQUE4Qjs7SUFFOUIsd0NBQW1COztJQUNuQix3Q0FBdUI7O0lBQ3ZCLHdDQUEwQjs7SUFDMUIsdUNBQXNCOztJQUN0QixtQ0FBVzs7SUFDWCwyQ0FBbUI7Ozs7O0lBRW5CLDJDQUFvQzs7Ozs7SUFDcEMsMENBQW1DOzs7OztJQUcvQix3Q0FBOEI7Ozs7O0lBQzlCLDJDQUFvQzs7Ozs7SUFDcEMsc0NBQThCOzs7OztJQUM5QixpQ0FBOEI7Ozs7O0lBQzlCLHNDQUEwQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XHJcbiAgICBDb21wb25lbnQsIElucHV0LCBPbkluaXQsIEFmdGVyVmlld0luaXQsIENoYW5nZURldGVjdG9yUmVmLCBPcHRpb25hbCwgT25EZXN0cm95LCBJbmplY3RvclxyXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgKiBhcyBfIGZyb20gJ2xvZGFzaC1lcyc7XHJcbmltcG9ydCB7IFN1YnNjcmlwdGlvbiB9IGZyb20gJ3J4anMnO1xyXG5pbXBvcnQgeyBub0RhdGFJbWcgfSBmcm9tICcuLi8uLi9hc3NldHMvcmVzb3VyY2UnO1xyXG5pbXBvcnQgeyBBcGlTZXJ2aWNlIH0gZnJvbSAnLi4vLi4vdXRpbHMvYXBpLnNlcnZpY2UnO1xyXG5pbXBvcnQgeyBDb21tb25VdGlsIH0gZnJvbSAnLi4vLi4vdXRpbHMvY29tbW9uLnRvb2wnO1xyXG5pbXBvcnQgeyBGYXZvcml0ZXNUb29sIH0gZnJvbSAnLi4vLi4vdXRpbHMvZmF2b3JpdGVzLnRvb2wnO1xyXG5pbXBvcnQgeyBDaGFuZ2VUeXBlLCBPcmdhbml6YXRpb24sIE9yZ1JlcXVlc3RQYXJhbSB9IGZyb20gJy4uLy4uL3V0aWxzL2luZGV4LnR5cGUnO1xyXG5pbXBvcnQgeyBTdGF0ZU1nclRvb2wgfSBmcm9tICcuLi8uLi91dGlscy9zdGF0ZS5tZ3IudG9vbCc7XHJcblxyXG5AQ29tcG9uZW50KHtcclxuICAgIHNlbGVjdG9yOiAnbGliLWZhdm9yaXRlcycsXHJcbiAgICB0ZW1wbGF0ZVVybDogJy4vZmF2b3JpdGVzLmNvbXBvbmVudC5odG1sJyxcclxuICAgIHN0eWxlVXJsczogWycuL2Zhdm9yaXRlcy5jb21wb25lbnQuY3NzJ10sXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBGYXZvcml0ZXNDb21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQsIEFmdGVyVmlld0luaXQsIE9uRGVzdHJveSB7XHJcblxyXG4gICAgQElucHV0KCkgcHJpbWFyeUZpZWxkOiBzdHJpbmc7XHJcbiAgICBASW5wdXQoKSBtdWx0aVNlbGVjdDogYm9vbGVhbjtcclxuXHJcbiAgICBhbGxDaGVja2VkID0gZmFsc2U7XHJcbiAgICBzZWxlY3Rpb25zOiBhbnlbXSA9IFtdO1xyXG4gICAgYWxsSW5kZXhJZCA9ICdhbGxJbmRleElkJztcclxuICAgIG5vRGF0YUltZyA9IG5vRGF0YUltZztcclxuICAgIGl0ZW1zID0gW107XHJcbiAgICBmYXZvcml0ZXNMaXN0ID0gW107XHJcblxyXG4gICAgcHJpdmF0ZSBzZWxlY3Rpb25zU3ViOiBTdWJzY3JpcHRpb247XHJcbiAgICBwcml2YXRlIGZhdm9yaXRlc1N1YjogU3Vic2NyaXB0aW9uO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKFxyXG4gICAgICAgIHByaXZhdGUgYXBpU2VydmljZTogQXBpU2VydmljZSxcclxuICAgICAgICBwcml2YXRlIGZhdm9yaXRlc1Rvb2w6IEZhdm9yaXRlc1Rvb2wsXHJcbiAgICAgICAgcHJpdmF0ZSBzdGF0ZU1ncjogU3RhdGVNZ3JUb29sLFxyXG4gICAgICAgIHByaXZhdGUgY2RyOiBDaGFuZ2VEZXRlY3RvclJlZixcclxuICAgICAgICBwcml2YXRlIGluamVjdG9yOiBJbmplY3RvclxyXG4gICAgKSB7XHJcbiAgICAgICAgdGhpcy5hbGxJbmRleElkID0gQ29tbW9uVXRpbC5uZXdHdWlkKCk7XHJcbiAgICB9XHJcblxyXG4gICAgbmdPbkRlc3Ryb3koKTogdm9pZCB7XHJcbiAgICAgICAgdGhpcy5zZWxlY3Rpb25zU3ViLnVuc3Vic2NyaWJlKCk7XHJcbiAgICAgICAgdGhpcy5mYXZvcml0ZXNTdWIudW5zdWJzY3JpYmUoKTtcclxuICAgIH1cclxuXHJcbiAgICBuZ09uSW5pdCgpOiB2b2lkIHtcclxuICAgICAgICB0aGlzLmZhdm9yaXRlc1N1YiA9IHRoaXMuZmF2b3JpdGVzVG9vbC5mYXZvcml0ZXNTdWJqZWN0LnN1YnNjcmliZShkYXRhID0+IHtcclxuICAgICAgICAgICAgdGhpcy5mYXZvcml0ZXNMaXN0ID0gZGF0YTtcclxuICAgICAgICAgICAgdGhpcy5sb2FkRmF2b3JpdGVzTGlzdCgpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHRoaXMuc2VsZWN0aW9uc1N1YiA9IHRoaXMuc3RhdGVNZ3Iuc2VsZWN0aW9uc1N1YmplY3Quc3Vic2NyaWJlKGRhdGEgPT4ge1xyXG4gICAgICAgICAgICBpZiAoZGF0YS5jaGFuZ2VUeXBlID09PSBDaGFuZ2VUeXBlLlZhbHVlQ2hhbmdlZCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zZWxlY3Rpb25zID0gXy5jbG9uZURlZXAoZGF0YS52YWx1ZSk7XHJcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoZGF0YS5jaGFuZ2VUeXBlID09PSBDaGFuZ2VUeXBlLlJlbW92ZSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy51blNlbGVjdExpbmUoZGF0YS52YWx1ZSk7XHJcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoZGF0YS5jaGFuZ2VUeXBlID09PSBDaGFuZ2VUeXBlLkFwcGVuZCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zZWxlY3RMaW5lKGRhdGEudmFsdWUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHRoaXMudG9nZ2xlQ2hlY2tlZCgpO1xyXG4gICAgICAgICAgICB0aGlzLmNkci5kZXRlY3RDaGFuZ2VzKCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgbmdBZnRlclZpZXdJbml0KCk6IHZvaWQge1xyXG5cclxuICAgIH1cclxuXHJcbiAgICBhc3NlbWJsZURhdGEoKSB7XHJcbiAgICAgICAgdGhpcy5mYXZvcml0ZXNTdWIgPSB0aGlzLmZhdm9yaXRlc1Rvb2wuZmF2b3JpdGVzU3ViamVjdC5zdWJzY3JpYmUoZGF0YSA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMuZmF2b3JpdGVzTGlzdCA9IGRhdGE7XHJcbiAgICAgICAgICAgIHRoaXMubG9hZEZhdm9yaXRlc0xpc3QoKTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICBkZWxldGVGcm9tRmF2b3JpdGVzKGU6IGFueSwgaXRlbTogYW55KSB7XHJcbiAgICAgICAgdGhpcy5mYXZvcml0ZXNUb29sLnRvZ2dsZUZhdm9yaXRlcyhlLCBpdGVtKTtcclxuICAgIH1cclxuXHJcbiAgICB0b2dnbGVBbGwoZTogYW55KSB7XHJcbiAgICAgICAgaWYgKCF0aGlzLmFsbENoZWNrZWQpIHtcclxuICAgICAgICAgICAgdGhpcy5jaGVja0FsbCgpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMudW5DaGVja0FsbCgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICB9XHJcblxyXG4gICAgdG9nZ2xlT25lKGRhdGEsIGUpIHtcclxuICAgICAgICBpZiAoZGF0YS5jaGVja2VkKSB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLm11bHRpU2VsZWN0KSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmVtaXRTZWxlY3Rpb25zKGRhdGEsIENoYW5nZVR5cGUuUmVtb3ZlKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuZW1pdFNlbGVjdGlvbnMoW10pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgaWYgKHRoaXMubXVsdGlTZWxlY3QpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuZW1pdFNlbGVjdGlvbnMoZGF0YSwgQ2hhbmdlVHlwZS5BcHBlbmQpO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5lbWl0U2VsZWN0aW9ucyhuZXcgQXJyYXkoZGF0YSkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIOeUqOS6juaVsOaNruWxleekulxyXG4gICAgICovXHJcbiAgICBsb2FkRmF2b3JpdGVzTGlzdCgpIHtcclxuICAgICAgICB0aGlzLml0ZW1zID0gW107XHJcbiAgICAgICAgdGhpcy5mYXZvcml0ZXNMaXN0LmZvckVhY2gocmVzID0+IHtcclxuICAgICAgICAgICAgY29uc3QgaW5kZXhJZCA9IENvbW1vblV0aWwubmV3R3VpZCgpO1xyXG4gICAgICAgICAgICBjb25zdCBpdGVtOiBPcmdhbml6YXRpb24gPSB7XHJcbiAgICAgICAgICAgICAgICBvcmdJZDogcmVzLm9yZ0lkLFxyXG4gICAgICAgICAgICAgICAgY29kZTogcmVzLmNvZGUsXHJcbiAgICAgICAgICAgICAgICBuYW1lOiByZXMubmFtZSxcclxuICAgICAgICAgICAgICAgIG9yZ0FsbFBhdGg6IHJlcy5vcmdBbGxQYXRoLFxyXG4gICAgICAgICAgICAgICAgcGF0aDogcmVzLnBhdGgsXHJcbiAgICAgICAgICAgICAgICBsYXllcjogTnVtYmVyKHJlcy5sYXllciksXHJcbiAgICAgICAgICAgICAgICBpbmRleElkXHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIGlmIChDb21tb25VdGlsLmZpbmRJbmRleChyZXNbdGhpcy5wcmltYXJ5RmllbGRdLCB0aGlzLnByaW1hcnlGaWVsZCwgdGhpcy5zZWxlY3Rpb25zKSAhPT0gLTEpIHtcclxuICAgICAgICAgICAgICAgIGl0ZW0uY2hlY2tlZCA9IHRydWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdGhpcy5pdGVtcy5wdXNoKGl0ZW0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHRoaXMuaXRlbXMgPSB0aGlzLml0ZW1zLnNsaWNlKCk7XHJcbiAgICAgICAgdGhpcy5jZHIuZGV0ZWN0Q2hhbmdlcygpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICog5YWo6YCJ5ZCO5aSE55CGXHJcbiAgICAgKiBAcGFyYW0gZGF0YUFyciDlhajpgInnmoTlgLxcclxuICAgICAqL1xyXG4gICAgY2hlY2tBbGwoKSB7XHJcbiAgICAgICAgdGhpcy5pdGVtcy5mb3JFYWNoKGl0ZW0gPT4ge1xyXG4gICAgICAgICAgICBpZiAoQ29tbW9uVXRpbC5maW5kSW5kZXgoaXRlbVt0aGlzLnByaW1hcnlGaWVsZF0sIHRoaXMucHJpbWFyeUZpZWxkLCB0aGlzLnNlbGVjdGlvbnMpID09PSAtMSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5lbWl0U2VsZWN0aW9ucyhpdGVtLCBDaGFuZ2VUeXBlLkFwcGVuZCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIOWFqOmDqOWPlua2iFxyXG4gICAgICogQHBhcmFtIGRhdGFBcnIg5Y+W5raI55qE5pWw5o2uXHJcbiAgICAgKiBAcmV0dXJucyB2b2lkXHJcbiAgICAgKi9cclxuICAgIHVuQ2hlY2tBbGwoKSB7XHJcbiAgICAgICAgY29uc3QgY2hlY2tlZHMgPSB0aGlzLml0ZW1zLmZpbHRlcihpdGVtID0+IGl0ZW0uY2hlY2tlZCk7XHJcbiAgICAgICAgY2hlY2tlZHMuZm9yRWFjaChpdGVtID0+IHtcclxuICAgICAgICAgICAgdGhpcy5lbWl0U2VsZWN0aW9ucyhpdGVtLCBDaGFuZ2VUeXBlLlJlbW92ZSk7XHJcbiAgICAgICAgfSlcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIOW9k+WJjeihjOmAieS4rVxyXG4gICAgICogQHBhcmFtIGRhdGEg5b2T5YmN6KGM55qE5pWw5o2u77yI77yJXHJcbiAgICAgKi9cclxuICAgIHByaXZhdGUgc2VsZWN0TGluZShkYXRhOiBhbnkpIHtcclxuICAgICAgICBpZiAodGhpcy5tdWx0aVNlbGVjdCkge1xyXG4gICAgICAgICAgICB0aGlzLl9pbnNlcnRPbmVJbnRvU2VsZWN0aW9ucyhkYXRhKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLnNlbGVjdGlvbnMgPSBbXTtcclxuICAgICAgICAgICAgdGhpcy5pdGVtcy5mb3JFYWNoKGl0ZW0gPT4ge1xyXG4gICAgICAgICAgICAgICAgaWYgKGl0ZW0uY2hlY2tlZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGl0ZW0uY2hlY2tlZCA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgdGhpcy5faW5zZXJ0T25lSW50b1NlbGVjdGlvbnMoZGF0YSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh0aGlzLmlzQWxsQ2hlY2tlZCgpKSB7XHJcbiAgICAgICAgICAgIHRoaXMuYWxsQ2hlY2tlZCA9IHRydWU7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICog5Y2V6YCJ5Y+W5raI6YCJ5LitXHJcbiAgICAgKiBAcGFyYW0gZGF0YSDlj5bmtojpgInkuK3ooYxcclxuICAgICAqL1xyXG4gICAgIHByaXZhdGUgdW5TZWxlY3RMaW5lKGRhdGE6IGFueSkge1xyXG4gICAgICAgIGNvbnN0IGluZGV4ID0gQ29tbW9uVXRpbC5maW5kSW5kZXgoZGF0YVt0aGlzLnByaW1hcnlGaWVsZF0sIHRoaXMucHJpbWFyeUZpZWxkLCB0aGlzLnNlbGVjdGlvbnMpO1xyXG4gICAgICAgIGlmIChpbmRleCA+IC0xKSB7XHJcbiAgICAgICAgICAgIHRoaXMuc2VsZWN0aW9ucy5zcGxpY2UoaW5kZXgsIDEpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLnNldENoZWNrZWQoZGF0YSwgZmFsc2UpO1xyXG4gICAgICAgIGlmICh0aGlzLmFsbENoZWNrZWQpIHtcclxuICAgICAgICAgICAgdGhpcy5hbGxDaGVja2VkID0gZmFsc2U7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgc2V0Q2hlY2tlZChkYXRhOiBhbnksIGNoZWNrZWQ6IGJvb2xlYW4pIHtcclxuICAgICAgICBjb25zdCBpdGVtSW5kZXggPSBDb21tb25VdGlsLmZpbmRJbmRleChkYXRhW3RoaXMucHJpbWFyeUZpZWxkXSwgdGhpcy5wcmltYXJ5RmllbGQsIHRoaXMuaXRlbXMpO1xyXG4gICAgICAgIGlmIChpdGVtSW5kZXggPiAtMSkge1xyXG4gICAgICAgICAgICB0aGlzLml0ZW1zW2l0ZW1JbmRleF0uY2hlY2tlZCA9IGNoZWNrZWQ7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgZW1pdFNlbGVjdGlvbnMoc2VsZWN0aW9uczogYW55LCBjaGFuZ2VUeXBlID0gQ2hhbmdlVHlwZS5WYWx1ZUNoYW5nZWQsIGZyb20gPSAnZmF2b3JpdGUnKSB7XHJcbiAgICAgICAgdGhpcy5zdGF0ZU1nci5lbWl0U2VsZWN0aW9ucyhzZWxlY3Rpb25zLCBjaGFuZ2VUeXBlLCBmcm9tKTtcclxuICAgIH1cclxuXHJcbiAgICB0b2dnbGVGYXZvcml0ZXMoZTogYW55LCBpdGVtOiBhbnkpIHtcclxuICAgICAgICB0aGlzLmZhdm9yaXRlc1Rvb2wudG9nZ2xlRmF2b3JpdGVzKGUsIGl0ZW0pO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICog5YWo6YOo5Y+W5raI5Yu+6YCJXHJcbiAgICAgKi9cclxuICAgIGNsZWFyQ2hlY2tlZHMoKSB7XHJcbiAgICAgICAgdGhpcy5pdGVtcy5mb3JFYWNoKGl0ZW0gPT4ge1xyXG4gICAgICAgICAgICBpdGVtLmNoZWNrZWQgPSBmYWxzZTtcclxuICAgICAgICB9KTtcclxuICAgICAgICB0aGlzLmFsbENoZWNrZWQgPSBmYWxzZTtcclxuICAgICAgICB0aGlzLnNlbGVjdGlvbnMgPSBbXTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIOmAieS4reW5tuaPkuWFpeW9k+WJjeihjOaVsOaNruWIsOWPs+S+p1xyXG4gICAgICogQHBhcmFtIGRhdGEg5b2T5YmN6KGM55qE5pWw5o2uXHJcbiAgICAgKiBAcGFyYW0gY29sbGVjdGlvbiDmmoLlrZjlvZPliY3mlbDmja7nmoTpm4blkIhcclxuICAgICAqL1xyXG4gICAgX2luc2VydE9uZUludG9TZWxlY3Rpb25zKGRhdGE6IGFueSkge1xyXG4gICAgICAgIC8vIOWmguaenOW9k+WJjeaVsOaNruW3sue7j+enu+WFpeWPs+S+p+aVsOaNru+8jOWImei/lOWbnuOAglxyXG4gICAgICAgIGlmIChDb21tb25VdGlsLmZpbmRJbmRleChkYXRhW3RoaXMucHJpbWFyeUZpZWxkXSwgdGhpcy5wcmltYXJ5RmllbGQsIHRoaXMuc2VsZWN0aW9ucykgPiAtMSkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuc2V0Q2hlY2tlZChkYXRhLCB0cnVlKTtcclxuICAgICAgICB0aGlzLnNlbGVjdGlvbnMucHVzaChkYXRhKTtcclxuICAgICAgICB0aGlzLnNlbGVjdGlvbnMgPSB0aGlzLnNlbGVjdGlvbnMuc2xpY2UoKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIOe/u+mhteajgOafpe+8muS6uuWRmOWxleekuuWMuueahOWLvumAieeKtuaAgeS4juW3sumAieS6uuWRmOWMuuaYr+WQpuWvueW6lFxyXG4gICAgICovXHJcbiAgICB0b2dnbGVDaGVja2VkKCkge1xyXG4gICAgICAgIHRoaXMuaXRlbXMuZm9yRWFjaChpdGVtID0+IHtcclxuICAgICAgICAgICAgaWYgKENvbW1vblV0aWwuZmluZEluZGV4KGl0ZW1bdGhpcy5wcmltYXJ5RmllbGRdLCB0aGlzLnByaW1hcnlGaWVsZCwgdGhpcy5zZWxlY3Rpb25zKSA+IC0xKSB7XHJcbiAgICAgICAgICAgICAgICBpdGVtLmNoZWNrZWQgPSB0cnVlO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgaXRlbS5jaGVja2VkID0gZmFsc2U7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgICAgICBpZiAodGhpcy5pc0FsbENoZWNrZWQoKSkge1xyXG4gICAgICAgICAgICB0aGlzLmFsbENoZWNrZWQgPSB0cnVlO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMuYWxsQ2hlY2tlZCA9IGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIGlzQWxsQ2hlY2tlZCgpOiBib29sZWFuIHtcclxuICAgICAgICBsZXQgY291bnQgPSAwO1xyXG4gICAgICAgIGxldCBhbGxDaGVja2VkID0gZmFsc2U7XHJcblxyXG4gICAgICAgIHRoaXMuaXRlbXMuZm9yRWFjaChpdGVtID0+IHtcclxuICAgICAgICAgICAgdGhpcy5zZWxlY3Rpb25zLmZvckVhY2goc2VsZWN0aW9uID0+IHtcclxuICAgICAgICAgICAgICAgIGlmIChpdGVtW3RoaXMucHJpbWFyeUZpZWxkXSA9PT0gc2VsZWN0aW9uW3RoaXMucHJpbWFyeUZpZWxkXSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvdW50ICs9IDE7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIGlmICh0aGlzLml0ZW1zLmxlbmd0aCA9PT0gY291bnQgJiYgY291bnQgPiAwKSB7XHJcbiAgICAgICAgICAgIGFsbENoZWNrZWQgPSB0cnVlO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gYWxsQ2hlY2tlZDtcclxuICAgIH1cclxuXHJcbiAgICB0cmFja0J5Rm4oaW5kZXgsIGl0ZW0pIHtcclxuICAgICAgICByZXR1cm4gaW5kZXg7XHJcbiAgICB9XHJcblxyXG59XHJcbiJdfQ==