/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input, ElementRef, Renderer2, ViewChild, Output, EventEmitter, NgZone } from '@angular/core';
import { AngularResizableDirective } from '@farris/ui-draggable';
import { LayoutComponent } from './../layout.component';
var LayoutPanelComponent = /** @class */ (function () {
    function LayoutPanelComponent(el, render2, layout, ngZone) {
        this.el = el;
        this.render2 = render2;
        this.layout = layout;
        this.ngZone = ngZone;
        this.minHeight = 50;
        this.minWidth = 50;
        this.title = '';
        this.iconCls = '';
        this._resizable = true;
        this.bsColClass = '';
        this.showBorder = true;
        this.resizing = new EventEmitter();
        this.resized = new EventEmitter();
    }
    Object.defineProperty(LayoutPanelComponent.prototype, "split", {
        get: /**
         * @return {?}
         */
        function () {
            return this._resizable;
        },
        set: /**
         * @param {?} val
         * @return {?}
         */
        function (val) {
            this._resizable = val;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @private
     * @return {?}
     */
    LayoutPanelComponent.prototype.setStyles = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        // this.ngZone.runOutsideAngular(() => {
        setTimeout((/**
         * @return {?}
         */
        function () {
            /** @type {?} */
            var width;
            /** @type {?} */
            var height;
            /** @type {?} */
            var rect = _this.el.nativeElement.getBoundingClientRect();
            if (_this.height) {
                height = _this.height;
                _this.render2.setStyle(_this.el.nativeElement, 'height', height + 'px');
                _this.render2.setStyle(_this.panel.nativeElement, 'height', height + 'px');
            }
            if (_this.width) {
                width = _this.width;
                if (rect.width > _this.width) {
                    width = rect.width;
                    _this.width = width;
                }
                _this.render2.setStyle(_this.el.nativeElement, 'width', width + 'px');
                _this.render2.setStyle(_this.panel.nativeElement, 'width', width + 'px');
                _this.resetFlex();
            }
        }));
        // });
    };
    /**
     * @private
     * @return {?}
     */
    LayoutPanelComponent.prototype.getrzHandler = /**
     * @private
     * @return {?}
     */
    function () {
        if (this.region) {
            /** @type {?} */
            var rzdir = '';
            switch (this.region) {
                case 'west':
                    rzdir = 'e';
                    break;
                case 'east':
                    rzdir = 'w';
                    break;
                case 'north':
                    rzdir = 's';
                    break;
                case 'south':
                    rzdir = 'n';
                    break;
            }
            this.rzHandler = rzdir;
        }
        else {
            this.rzHandler = '';
        }
    };
    /**
     * @return {?}
     */
    LayoutPanelComponent.prototype.isCenterPanel = /**
     * @return {?}
     */
    function () {
        return this.region === 'center';
    };
    /**
     * @param {?} changes
     * @return {?}
     */
    LayoutPanelComponent.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        if (changes.width && !changes.width.isFirstChange()) {
            this.setStyles();
        }
    };
    /**
     * @private
     * @return {?}
     */
    LayoutPanelComponent.prototype.getBsClass = /**
     * @private
     * @return {?}
     */
    function () {
        return Array.from(this.el.nativeElement.classList).find((/**
         * @param {?} c
         * @return {?}
         */
        function (c) { return c.indexOf('col-') > -1; }));
    };
    /**
     * @private
     * @return {?}
     */
    LayoutPanelComponent.prototype.hasBsClass = /**
     * @private
     * @return {?}
     */
    function () {
        return this.getBsClass() !== undefined;
    };
    /**
     * @private
     * @return {?}
     */
    LayoutPanelComponent.prototype.initSize = /**
     * @private
     * @return {?}
     */
    function () {
        this.setStyles();
        if (this.region) {
            if (this.region === 'west' || this.region === 'east') {
                this.render2.setStyle(this.panel.nativeElement, 'height', '100%');
            }
        }
    };
    /**
     * @private
     * @return {?}
     */
    LayoutPanelComponent.prototype.initClass = /**
     * @private
     * @return {?}
     */
    function () {
        if (this.isCenterPanel()) {
            this.render2.addClass(this.panel.nativeElement, 'flex-fill');
            if (this.el.nativeElement.parentElement.attributes['layout-panel']) {
                this.render2.addClass(this.el.nativeElement.parentElement, 'd-flex');
            }
            this.render2.addClass(this.el.nativeElement, 'd-flex');
            this.render2.addClass(this.el.nativeElement, 'flex-fill');
        }
        if (this.showBorder) {
            this.render2.addClass(this.panel.nativeElement, 'layout-border');
        }
    };
    /**
     * @return {?}
     */
    LayoutPanelComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.initSize();
        this.initClass();
        this.getrzHandler();
        this.bsColClass = this.getBsClass();
        this.layout.panels.push(this);
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    LayoutPanelComponent.prototype.onResizeStart = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        this.resetFlex();
    };
    /**
     * @private
     * @return {?}
     */
    LayoutPanelComponent.prototype.resetFlex = /**
     * @private
     * @return {?}
     */
    function () {
        if (this.region === 'west' || this.region === 'east') {
            this.render2.setStyle(this.el.nativeElement, 'flex', 'none');
            this.render2.setStyle(this.el.nativeElement, 'max-width', 'none');
        }
    };
    /**
     * @param {?} size
     * @return {?}
     */
    LayoutPanelComponent.prototype.resize = /**
     * @param {?} size
     * @return {?}
     */
    function (size) {
        this.setStyles();
        this.onResized({ size: size });
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    LayoutPanelComponent.prototype.onReizing = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        this.updatePanelSize($event);
        // console.log($event);
        this.resizing.emit({ target: this, size: $event.size });
    };
    /**
     * @private
     * @param {?} $event
     * @return {?}
     */
    LayoutPanelComponent.prototype.updatePanelSize = /**
     * @private
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        if (this.region === 'south') {
            this.render2.setStyle(this.panel.nativeElement, 'top', 0);
        }
        if (this.region === 'east') {
            this.render2.setStyle(this.panel.nativeElement, 'left', 0);
        }
        if (this.region === 'south' || this.region === 'north') {
            this.render2.setStyle(this.el.nativeElement, 'height', $event.size.height + 'px');
        }
        if (this.region === 'west' || this.region === 'east') {
            this.render2.setStyle(this.el.nativeElement, 'width', $event.size.width + 'px');
        }
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    LayoutPanelComponent.prototype.onResized = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        if (this.region === 'south' || this.region === 'north') {
            this.height = $event.size.height;
        }
        if (this.region === 'west' || this.region === 'east') {
            this.width = $event.size.width;
        }
        this.updatePanelSize($event);
        this.layout.setPanelMaxSize();
        this.resized.emit($event.size);
        this.layout.getPanel('center').resized.emit($event.size);
    };
    LayoutPanelComponent.decorators = [
        { type: Component, args: [{
                    selector: 'layout-panel',
                    template: "\n        <div #panel #ngResizable class=\"layout-panel\"\n            [ngResizable]=\"split\" [attr.region]=\"region\"\n            [rzHandles]=\"rzHandler\"\n            [rzMinWidth]=\"minWidth\"\n            [rzMaxWidth]=\"maxWidth\"\n            [rzMinHeight]=\"minHeight\"\n            [rzMaxHeight]=\"maxHeight\"\n            (rzResizing)=\"onReizing($event)\"\n            (rzStop) = \"onResized($event)\"\n            (rzStart) =\"onResizeStart($event)\" >\n\n            <layout-panel-title *ngIf=\"title\" [title]=\"title\"></layout-panel-title>\n\n            <ng-content></ng-content>\n        <div>\n    ",
                    styles: [".layout-border{border:1px solid #f2f2f2}.layout-panel{background:#fff}.ng-resizeable-bar{position:relative}.ng-resizable-w>.ng-resizeable-bar{right:1px;height:100%;width:5px}.ng-resizable-e>.ng-resizeable-bar{left:3px;height:100%;width:5px}.ng-resizable-s>.ng-resizeable-bar{top:3px;width:100%;height:5px}.ng-resizable-n>.ng-resizeable-bar{bottom:0;width:100%;height:5px}.ng-resizable-handle:hover>.ng-resizeable-bar{background-color:#bababa}.ng-resizable-handle:active>.ng-resizeable-bar{background-color:#5b5b5b}:host{padding:0}"]
                }] }
    ];
    /** @nocollapse */
    LayoutPanelComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: Renderer2 },
        { type: LayoutComponent },
        { type: NgZone }
    ]; };
    LayoutPanelComponent.propDecorators = {
        region: [{ type: Input }],
        height: [{ type: Input }],
        width: [{ type: Input }],
        minHeight: [{ type: Input }],
        minWidth: [{ type: Input }],
        maxHeight: [{ type: Input }],
        maxWidth: [{ type: Input }],
        title: [{ type: Input }],
        iconCls: [{ type: Input }],
        split: [{ type: Input }],
        showBorder: [{ type: Input }],
        resizing: [{ type: Output }],
        resized: [{ type: Output }],
        panel: [{ type: ViewChild, args: ['panel',] }],
        ngResizable: [{ type: ViewChild, args: [AngularResizableDirective,] }]
    };
    return LayoutPanelComponent;
}());
export { LayoutPanelComponent };
if (false) {
    /** @type {?} */
    LayoutPanelComponent.prototype.region;
    /** @type {?} */
    LayoutPanelComponent.prototype.height;
    /** @type {?} */
    LayoutPanelComponent.prototype.width;
    /** @type {?} */
    LayoutPanelComponent.prototype.minHeight;
    /** @type {?} */
    LayoutPanelComponent.prototype.minWidth;
    /** @type {?} */
    LayoutPanelComponent.prototype.maxHeight;
    /** @type {?} */
    LayoutPanelComponent.prototype.maxWidth;
    /** @type {?} */
    LayoutPanelComponent.prototype.title;
    /** @type {?} */
    LayoutPanelComponent.prototype.iconCls;
    /**
     * @type {?}
     * @private
     */
    LayoutPanelComponent.prototype._resizable;
    /** @type {?} */
    LayoutPanelComponent.prototype.rzHandler;
    /**
     * @type {?}
     * @private
     */
    LayoutPanelComponent.prototype.bsColClass;
    /** @type {?} */
    LayoutPanelComponent.prototype.showBorder;
    /** @type {?} */
    LayoutPanelComponent.prototype.resizing;
    /** @type {?} */
    LayoutPanelComponent.prototype.resized;
    /** @type {?} */
    LayoutPanelComponent.prototype.panel;
    /** @type {?} */
    LayoutPanelComponent.prototype.ngResizable;
    /** @type {?} */
    LayoutPanelComponent.prototype.el;
    /**
     * @type {?}
     * @private
     */
    LayoutPanelComponent.prototype.render2;
    /**
     * @type {?}
     * @private
     */
    LayoutPanelComponent.prototype.layout;
    /**
     * @type {?}
     * @private
     */
    LayoutPanelComponent.prototype.ngZone;
}
var LayoutPanelTitleComponent = /** @class */ (function () {
    function LayoutPanelTitleComponent() {
        this.title = '';
        this.iconCls = '';
    }
    LayoutPanelTitleComponent.decorators = [
        { type: Component, args: [{
                    selector: 'layout-panel-title',
                    template: "\n        <div class=\"d-flex flex-row\" style=\"height: 28px; line-height: 28px\">\n            <div class=\"layout-panel-title\">\n                <span *ngIf=\"iconCls\" [class]=\"iconCls\"></span>\n                {{ title }}\n            </div>\n            <div class=\"layout-panel-title-tools flex-fill\">\n\n            </div>\n        </div>\n    "
                }] }
    ];
    LayoutPanelTitleComponent.propDecorators = {
        title: [{ type: Input }],
        iconCls: [{ type: Input }]
    };
    return LayoutPanelTitleComponent;
}());
export { LayoutPanelTitleComponent };
if (false) {
    /** @type {?} */
    LayoutPanelTitleComponent.prototype.title;
    /** @type {?} */
    LayoutPanelTitleComponent.prototype.iconCls;
}
//# sourceMappingURL=data:application/json;base64,