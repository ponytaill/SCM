/**
 * session变量解析
 * @author Witt <jiwt@inspur.com>
 */
import { CommandContext } from '../command/index';
/**
 * 命令变量解析
 * {COMMAND~/params/key}
 * {COMMAND~/results/taskName}
 */
class CommandVariableParser {
    /**
     * 构造函数
     */
    constructor() {
    }
    /**
     * 解析变量
     * @param expression 变量：格式形如：/frameId/componentId/stateName
     * @param context 上下文
     */
    parse(expression, context) {
        const paths = this.extractPaths(expression);
        // 1、单个的表达式：直接求值
        if (paths.length === 1 && expression === `{COMMAND~${paths[0]}}`) {
            return this.getValue(paths[0], context);
        }
        // 2、其他情况：字符串替换
        paths.forEach(path => {
            const searchValue = `{COMMAND~${path}}`;
            const replaceValue = this.getValue(path, context);
            expression = expression.replace(searchValue, replaceValue);
        });
        return expression;
    }
    /**
     * 提取Session变量名
     * 变量格式：{}
     */
    extractPaths(expression) {
        const paths = [];
        // 查找所有的uiState变量字符串
        const UI_STATE_PATTERN_G = /\{COMMAND~(\S+?)\}/g;
        const uiStateVariables = expression.match(UI_STATE_PATTERN_G);
        if (uiStateVariables === null) {
            return [];
        }
        // 提取后边的路径
        const UI_STATE_PATTERN = /\{COMMAND~(\S+?)\}/;
        uiStateVariables.forEach(sessionVariable => {
            const pathMatches = sessionVariable.match(UI_STATE_PATTERN);
            if (pathMatches != null && pathMatches.length === 2) {
                paths.push(pathMatches[1]);
            }
        });
        return paths;
    }
    /**
     * 获取UIState
     */
    getValue(path, context) {
        if (context instanceof CommandContext === false) {
            throw new Error('当前上下文不支持COMMAND变量，请检查！');
        }
        const parts = path.split('/').filter((part) => {
            return part !== '';
        });
        const [type, name] = parts;
        if (type === 'params') {
            return context.command.params[name];
        }
        else if (type === 'results') {
            return context.results[name];
        }
    }
}
export { CommandVariableParser };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tbWFuZF92YXJpYWJsZV9wYXJzZXIuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZmFycmlzL21vYmlsZS1kZXZraXQvIiwic291cmNlcyI6WyJsaWIvdmFyaWFibGUvY29tbWFuZF92YXJpYWJsZV9wYXJzZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7OztHQUdHO0FBRUgsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLGtCQUFrQixDQUFDO0FBR2xEOzs7O0dBSUc7QUFDSCxNQUFNLHFCQUFxQjtJQUV6Qjs7T0FFRztJQUNIO0lBQ0EsQ0FBQztJQUVEOzs7O09BSUc7SUFDSSxLQUFLLENBQUMsVUFBa0IsRUFBRSxPQUFZO1FBQzNDLE1BQU0sS0FBSyxHQUFHLElBQUksQ0FBQyxZQUFZLENBQUMsVUFBVSxDQUFDLENBQUM7UUFFNUMsZ0JBQWdCO1FBQ2hCLElBQUksS0FBSyxDQUFDLE1BQU0sS0FBSyxDQUFDLElBQUksVUFBVSxLQUFLLFlBQVksS0FBSyxDQUFDLENBQUMsQ0FBQyxHQUFHLEVBQUU7WUFDaEUsT0FBTyxJQUFJLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsRUFBRSxPQUFPLENBQUMsQ0FBQztTQUN6QztRQUVELGVBQWU7UUFDZixLQUFLLENBQUMsT0FBTyxDQUFFLElBQUksQ0FBQyxFQUFFO1lBQ3BCLE1BQU0sV0FBVyxHQUFHLFlBQVksSUFBSSxHQUFHLENBQUM7WUFDeEMsTUFBTSxZQUFZLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLEVBQUUsT0FBTyxDQUFDLENBQUM7WUFDbEQsVUFBVSxHQUFHLFVBQVUsQ0FBQyxPQUFPLENBQUMsV0FBVyxFQUFFLFlBQVksQ0FBQyxDQUFDO1FBQzdELENBQUMsQ0FBQyxDQUFDO1FBRUgsT0FBUSxVQUFVLENBQUM7SUFDckIsQ0FBQztJQUVEOzs7T0FHRztJQUNLLFlBQVksQ0FBQyxVQUFrQjtRQUNyQyxNQUFNLEtBQUssR0FBYyxFQUFFLENBQUM7UUFFNUIsb0JBQW9CO1FBQ3BCLE1BQU0sa0JBQWtCLEdBQUcscUJBQXFCLENBQUM7UUFDakQsTUFBTSxnQkFBZ0IsR0FBRyxVQUFVLENBQUMsS0FBSyxDQUFDLGtCQUFrQixDQUFDLENBQUM7UUFDOUQsSUFBSSxnQkFBZ0IsS0FBSyxJQUFJLEVBQUU7WUFDN0IsT0FBTyxFQUFFLENBQUM7U0FDWDtRQUVELFVBQVU7UUFDVixNQUFNLGdCQUFnQixHQUFHLG9CQUFvQixDQUFDO1FBQzlDLGdCQUFnQixDQUFDLE9BQU8sQ0FBRSxlQUFlLENBQUMsRUFBRTtZQUMxQyxNQUFNLFdBQVcsR0FBRyxlQUFlLENBQUMsS0FBSyxDQUFDLGdCQUFnQixDQUFDLENBQUM7WUFDNUQsSUFBSSxXQUFXLElBQUksSUFBSSxJQUFJLFdBQVcsQ0FBQyxNQUFNLEtBQUssQ0FBQyxFQUFFO2dCQUNuRCxLQUFLLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO2FBQzVCO1FBQ0gsQ0FBQyxDQUFDLENBQUM7UUFFSCxPQUFPLEtBQUssQ0FBQztJQUNmLENBQUM7SUFFRDs7T0FFRztJQUNLLFFBQVEsQ0FBQyxJQUFZLEVBQUUsT0FBWTtRQUN6QyxJQUFJLE9BQU8sWUFBWSxjQUFjLEtBQUssS0FBSyxFQUFFO1lBQy9DLE1BQU0sSUFBSSxLQUFLLENBQUMsd0JBQXdCLENBQUMsQ0FBQztTQUMzQztRQUNELE1BQU0sS0FBSyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsSUFBWSxFQUFFLEVBQUU7WUFDcEQsT0FBTyxJQUFJLEtBQUssRUFBRSxDQUFDO1FBQ3JCLENBQUMsQ0FBQyxDQUFDO1FBRUgsTUFBTSxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsR0FBRyxLQUFLLENBQUM7UUFDM0IsSUFBSSxJQUFJLEtBQUssUUFBUSxFQUFFO1lBQ3JCLE9BQU8sT0FBTyxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUM7U0FDckM7YUFBTSxJQUFJLElBQUksS0FBSyxTQUFTLEVBQUU7WUFDN0IsT0FBTyxPQUFPLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDO1NBQzlCO0lBQ0gsQ0FBQztDQUNGO0FBRUQsT0FBTyxFQUFFLHFCQUFxQixFQUFFLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcclxuICogc2Vzc2lvbuWPmOmHj+ino+aekFxyXG4gKiBAYXV0aG9yIFdpdHQgPGppd3RAaW5zcHVyLmNvbT5cclxuICovXHJcblxyXG5pbXBvcnQgeyBDb21tYW5kQ29udGV4dCB9IGZyb20gJy4uL2NvbW1hbmQvaW5kZXgnO1xyXG5pbXBvcnQgeyBWYXJpYWJsZVBhcnNlciB9IGZyb20gJy4vdmFyaWFibGVfcGFyc2VyJztcclxuXHJcbi8qKlxyXG4gKiDlkb3ku6Tlj5jph4/op6PmnpBcclxuICoge0NPTU1BTkR+L3BhcmFtcy9rZXl9XHJcbiAqIHtDT01NQU5Efi9yZXN1bHRzL3Rhc2tOYW1lfVxyXG4gKi9cclxuY2xhc3MgQ29tbWFuZFZhcmlhYmxlUGFyc2VyIGltcGxlbWVudHMgVmFyaWFibGVQYXJzZXIge1xyXG5cclxuICAvKipcclxuICAgKiDmnoTpgKDlh73mlbBcclxuICAgKi9cclxuICBwdWJsaWMgY29uc3RydWN0b3IoKSB7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDop6PmnpDlj5jph49cclxuICAgKiBAcGFyYW0gZXhwcmVzc2lvbiDlj5jph4/vvJrmoLzlvI/lvaLlpoLvvJovZnJhbWVJZC9jb21wb25lbnRJZC9zdGF0ZU5hbWVcclxuICAgKiBAcGFyYW0gY29udGV4dCDkuIrkuIvmlodcclxuICAgKi9cclxuICBwdWJsaWMgcGFyc2UoZXhwcmVzc2lvbjogc3RyaW5nLCBjb250ZXh0OiBhbnkpOiBhbnkge1xyXG4gICAgY29uc3QgcGF0aHMgPSB0aGlzLmV4dHJhY3RQYXRocyhleHByZXNzaW9uKTtcclxuXHJcbiAgICAvLyAx44CB5Y2V5Liq55qE6KGo6L6+5byP77ya55u05o6l5rGC5YC8XHJcbiAgICBpZiAocGF0aHMubGVuZ3RoID09PSAxICYmIGV4cHJlc3Npb24gPT09IGB7Q09NTUFORH4ke3BhdGhzWzBdfX1gKSB7XHJcbiAgICAgIHJldHVybiB0aGlzLmdldFZhbHVlKHBhdGhzWzBdLCBjb250ZXh0KTtcclxuICAgIH1cclxuXHJcbiAgICAvLyAy44CB5YW25LuW5oOF5Ya177ya5a2X56ym5Liy5pu/5o2iXHJcbiAgICBwYXRocy5mb3JFYWNoKCBwYXRoID0+IHtcclxuICAgICAgY29uc3Qgc2VhcmNoVmFsdWUgPSBge0NPTU1BTkR+JHtwYXRofX1gO1xyXG4gICAgICBjb25zdCByZXBsYWNlVmFsdWUgPSB0aGlzLmdldFZhbHVlKHBhdGgsIGNvbnRleHQpO1xyXG4gICAgICBleHByZXNzaW9uID0gZXhwcmVzc2lvbi5yZXBsYWNlKHNlYXJjaFZhbHVlLCByZXBsYWNlVmFsdWUpO1xyXG4gICAgfSk7XHJcblxyXG4gICAgcmV0dXJuICBleHByZXNzaW9uO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog5o+Q5Y+WU2Vzc2lvbuWPmOmHj+WQjVxyXG4gICAqIOWPmOmHj+agvOW8j++8mnt9XHJcbiAgICovXHJcbiAgcHJpdmF0ZSBleHRyYWN0UGF0aHMoZXhwcmVzc2lvbjogc3RyaW5nKTogc3RyaW5nW10ge1xyXG4gICAgY29uc3QgcGF0aHM6IHN0cmluZ1tdICA9IFtdO1xyXG5cclxuICAgIC8vIOafpeaJvuaJgOacieeahHVpU3RhdGXlj5jph4/lrZfnrKbkuLJcclxuICAgIGNvbnN0IFVJX1NUQVRFX1BBVFRFUk5fRyA9IC9cXHtDT01NQU5EfihcXFMrPylcXH0vZztcclxuICAgIGNvbnN0IHVpU3RhdGVWYXJpYWJsZXMgPSBleHByZXNzaW9uLm1hdGNoKFVJX1NUQVRFX1BBVFRFUk5fRyk7XHJcbiAgICBpZiAodWlTdGF0ZVZhcmlhYmxlcyA9PT0gbnVsbCkge1xyXG4gICAgICByZXR1cm4gW107XHJcbiAgICB9XHJcblxyXG4gICAgLy8g5o+Q5Y+W5ZCO6L6555qE6Lev5b6EXHJcbiAgICBjb25zdCBVSV9TVEFURV9QQVRURVJOID0gL1xce0NPTU1BTkR+KFxcUys/KVxcfS87XHJcbiAgICB1aVN0YXRlVmFyaWFibGVzLmZvckVhY2goIHNlc3Npb25WYXJpYWJsZSA9PiAge1xyXG4gICAgICBjb25zdCBwYXRoTWF0Y2hlcyA9IHNlc3Npb25WYXJpYWJsZS5tYXRjaChVSV9TVEFURV9QQVRURVJOKTtcclxuICAgICAgaWYgKHBhdGhNYXRjaGVzICE9IG51bGwgJiYgcGF0aE1hdGNoZXMubGVuZ3RoID09PSAyKSB7XHJcbiAgICAgICAgcGF0aHMucHVzaChwYXRoTWF0Y2hlc1sxXSk7XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG5cclxuICAgIHJldHVybiBwYXRocztcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOiOt+WPllVJU3RhdGVcclxuICAgKi9cclxuICBwcml2YXRlIGdldFZhbHVlKHBhdGg6IHN0cmluZywgY29udGV4dDogYW55KSB7XHJcbiAgICBpZiAoY29udGV4dCBpbnN0YW5jZW9mIENvbW1hbmRDb250ZXh0ID09PSBmYWxzZSkge1xyXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ+W9k+WJjeS4iuS4i+aWh+S4jeaUr+aMgUNPTU1BTkTlj5jph4/vvIzor7fmo4Dmn6XvvIEnKTtcclxuICAgIH1cclxuICAgIGNvbnN0IHBhcnRzID0gcGF0aC5zcGxpdCgnLycpLmZpbHRlcigocGFydDogc3RyaW5nKSA9PiB7XHJcbiAgICAgIHJldHVybiBwYXJ0ICE9PSAnJztcclxuICAgIH0pO1xyXG5cclxuICAgIGNvbnN0IFt0eXBlLCBuYW1lXSA9IHBhcnRzO1xyXG4gICAgaWYgKHR5cGUgPT09ICdwYXJhbXMnKSB7XHJcbiAgICAgIHJldHVybiBjb250ZXh0LmNvbW1hbmQucGFyYW1zW25hbWVdO1xyXG4gICAgfSBlbHNlIGlmICh0eXBlID09PSAncmVzdWx0cycpIHtcclxuICAgICAgcmV0dXJuIGNvbnRleHQucmVzdWx0c1tuYW1lXTtcclxuICAgIH1cclxuICB9XHJcbn1cclxuXHJcbmV4cG9ydCB7IENvbW1hbmRWYXJpYWJsZVBhcnNlciB9O1xyXG4iXX0=