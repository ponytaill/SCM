import { Injectable, Injector } from "@angular/core";
import { WorkFlowMessageService } from "./work-flow-message.service";
/**
 * 工作流消息
 * @warning 禁止使用表单上下文，所有上下文必须从外部传入
 */
var WorkFlowMessage = /** @class */ (function () {
    function WorkFlowMessage(injector, workFlowMessageService) {
        this.injector = injector;
        this.workFlowMessageService = workFlowMessageService;
        this.listeners = new Map();
    }
    WorkFlowMessage.prototype.setup = function () {
        var _this = this;
        if (!this.workFlowMessageService) {
            return;
        }
        this.workFlowMessageService.listen(function (message) {
            if (!_this.listeners || _this.listeners.size < 1) {
                return;
            }
            _this.listeners.forEach(function (callback, key) {
                if (typeof callback === 'function') {
                    callback(message);
                }
            });
        });
    };
    WorkFlowMessage.prototype.addEventListener = function (callback) {
        var id = new Date().valueOf().toString(16) + "-" + Math.ceil(Math.random() * 100);
        this.listeners.set(id, callback);
        return id;
    };
    WorkFlowMessage.prototype.removeEventListener = function (eventId) {
        if (!this.listeners || this.listeners.size < 1) {
            return;
        }
        this.listeners.delete(eventId);
        eventId = null;
    };
    WorkFlowMessage.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    WorkFlowMessage.ctorParameters = function () { return [
        { type: Injector },
        { type: WorkFlowMessageService }
    ]; };
    return WorkFlowMessage;
}());
export { WorkFlowMessage };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid29yay1mbG93LW1lc3NhZ2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZmFycmlzL2NvbW1hbmQtc2VydmljZXMvIiwic291cmNlcyI6WyJsaWIvd29yay1mbG93L3dvcmstZmxvdy1tZXNzYWdlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsUUFBUSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRXJELE9BQU8sRUFBRSxzQkFBc0IsRUFBRSxNQUFNLDZCQUE2QixDQUFDO0FBRXJFOzs7R0FHRztBQUNIO0lBR0UseUJBQW9CLFFBQWtCLEVBQVMsc0JBQThDO1FBQXpFLGFBQVEsR0FBUixRQUFRLENBQVU7UUFBUywyQkFBc0IsR0FBdEIsc0JBQXNCLENBQXdCO1FBQzNGLElBQUksQ0FBQyxTQUFTLEdBQUcsSUFBSSxHQUFHLEVBQWUsQ0FBQztJQUMxQyxDQUFDO0lBQ00sK0JBQUssR0FBWjtRQUFBLGlCQWNDO1FBYkMsSUFBSSxDQUFDLElBQUksQ0FBQyxzQkFBc0IsRUFBRTtZQUNoQyxPQUFPO1NBQ1I7UUFDRCxJQUFJLENBQUMsc0JBQXNCLENBQUMsTUFBTSxDQUFDLFVBQUMsT0FBMEI7WUFDNUQsSUFBSSxDQUFDLEtBQUksQ0FBQyxTQUFTLElBQUksS0FBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLEdBQUcsQ0FBQyxFQUFFO2dCQUM5QyxPQUFPO2FBQ1I7WUFDRCxLQUFJLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQyxVQUFDLFFBQWEsRUFBRSxHQUFXO2dCQUNoRCxJQUFJLE9BQU8sUUFBUSxLQUFLLFVBQVUsRUFBRTtvQkFDbEMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxDQUFDO2lCQUNuQjtZQUNILENBQUMsQ0FBQyxDQUFBO1FBQ0osQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDO0lBQ00sMENBQWdCLEdBQXZCLFVBQXdCLFFBQXVDO1FBQzdELElBQU0sRUFBRSxHQUFNLElBQUksSUFBSSxFQUFFLENBQUMsT0FBTyxFQUFFLENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FBQyxTQUFJLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxHQUFHLEdBQUcsQ0FBRyxDQUFDO1FBQ3BGLElBQUksQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLEVBQUUsRUFBRSxRQUFRLENBQUMsQ0FBQztRQUNqQyxPQUFPLEVBQUUsQ0FBQztJQUNaLENBQUM7SUFDTSw2Q0FBbUIsR0FBMUIsVUFBMkIsT0FBZTtRQUN4QyxJQUFJLENBQUMsSUFBSSxDQUFDLFNBQVMsSUFBSSxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksR0FBRyxDQUFDLEVBQUU7WUFDOUMsT0FBTztTQUNSO1FBQ0QsSUFBSSxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDL0IsT0FBTyxHQUFHLElBQUksQ0FBQztJQUNqQixDQUFDOztnQkFoQ0YsVUFBVTs7OztnQkFSVSxRQUFRO2dCQUVwQixzQkFBc0I7O0lBdUMvQixzQkFBQztDQUFBLEFBakNELElBaUNDO1NBaENZLGVBQWUiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlLCBJbmplY3RvciB9IGZyb20gXCJAYW5ndWxhci9jb3JlXCI7XG5pbXBvcnQgeyBXb3JrRmxvdyB9IGZyb20gXCIuL3R5cGVzXCI7XG5pbXBvcnQgeyBXb3JrRmxvd01lc3NhZ2VTZXJ2aWNlIH0gZnJvbSBcIi4vd29yay1mbG93LW1lc3NhZ2Uuc2VydmljZVwiO1xuXG4vKipcbiAqIOW3peS9nOa1gea2iOaBr1xuICogQHdhcm5pbmcg56aB5q2i5L2/55So6KGo5Y2V5LiK5LiL5paH77yM5omA5pyJ5LiK5LiL5paH5b+F6aG75LuO5aSW6YOo5Lyg5YWlXG4gKi9cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBXb3JrRmxvd01lc3NhZ2Uge1xuICBwcml2YXRlIGxpc3RlbmVyczogTWFwPHN0cmluZywgYW55PjtcbiAgY29uc3RydWN0b3IocHJpdmF0ZSBpbmplY3RvcjogSW5qZWN0b3IsIHB1YmxpYyB3b3JrRmxvd01lc3NhZ2VTZXJ2aWNlOiBXb3JrRmxvd01lc3NhZ2VTZXJ2aWNlKSB7XG4gICAgdGhpcy5saXN0ZW5lcnMgPSBuZXcgTWFwPHN0cmluZywgYW55PigpO1xuICB9XG4gIHB1YmxpYyBzZXR1cCgpIHtcbiAgICBpZiAoIXRoaXMud29ya0Zsb3dNZXNzYWdlU2VydmljZSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB0aGlzLndvcmtGbG93TWVzc2FnZVNlcnZpY2UubGlzdGVuKChtZXNzYWdlOiBXb3JrRmxvdy5JTWVzc2FnZSkgPT4ge1xuICAgICAgaWYgKCF0aGlzLmxpc3RlbmVycyB8fCB0aGlzLmxpc3RlbmVycy5zaXplIDwgMSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICB0aGlzLmxpc3RlbmVycy5mb3JFYWNoKChjYWxsYmFjazogYW55LCBrZXk6IHN0cmluZykgPT4ge1xuICAgICAgICBpZiAodHlwZW9mIGNhbGxiYWNrID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgY2FsbGJhY2sobWVzc2FnZSk7XG4gICAgICAgIH1cbiAgICAgIH0pXG4gICAgfSk7XG4gIH1cbiAgcHVibGljIGFkZEV2ZW50TGlzdGVuZXIoY2FsbGJhY2s6IChldmVudDogTWVzc2FnZUV2ZW50KSA9PiB2b2lkKTogc3RyaW5nIHtcbiAgICBjb25zdCBpZCA9IGAke25ldyBEYXRlKCkudmFsdWVPZigpLnRvU3RyaW5nKDE2KX0tJHtNYXRoLmNlaWwoTWF0aC5yYW5kb20oKSAqIDEwMCl9YDtcbiAgICB0aGlzLmxpc3RlbmVycy5zZXQoaWQsIGNhbGxiYWNrKTtcbiAgICByZXR1cm4gaWQ7XG4gIH1cbiAgcHVibGljIHJlbW92ZUV2ZW50TGlzdGVuZXIoZXZlbnRJZDogc3RyaW5nKTogdm9pZCB7XG4gICAgaWYgKCF0aGlzLmxpc3RlbmVycyB8fCB0aGlzLmxpc3RlbmVycy5zaXplIDwgMSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB0aGlzLmxpc3RlbmVycy5kZWxldGUoZXZlbnRJZCk7XG4gICAgZXZlbnRJZCA9IG51bGw7XG4gIH1cbn1cbiJdfQ==