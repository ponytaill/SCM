/**
 * @fileoverview added by tsickle
 * Generated from: lib/task-center-bridge/task-center-bridge.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { WFActionType } from './entity';
import * as i0 from "@angular/core";
export class TaskCenterBridgeService {
    constructor() { }
    /**
     * @param {?} customerCmds
     * @return {?}
     */
    initTaskCenterBridge(customerCmds) {
        /** @type {?} */
        const bridgeWin = window.parent;
        /** @type {?} */
        let frameContext;
        try {
            frameContext = this['context'].frameContext;
        }
        catch (error) {
            throw new Error('can not find frameContex');
        }
        /** @type {?} */
        let slienceSaveTask;
        try {
            slienceSaveTask = this['context'].frameContext.viewModel.slienceSave1;
        }
        catch (error) {
            // 不存在静音保存命令
        }
        if (bridgeWin) {
            bridgeWin['taskCenterBeforeLoad'] = (/**
             * @param {?} actionObj
             * @return {?}
             */
            (actionObj) => {
                return new Promise((/**
                 * @param {?} resolve
                 * @param {?} reject
                 * @return {?}
                 */
                (resolve, reject) => {
                    const { action } = actionObj;
                    if (frameContext.uiState['UIStateInProcess'] == 'Approving' && frameContext.uiState['formConfigId']) {
                        slienceSaveTask.call(this).subscribe((/**
                         * @return {?}
                         */
                        () => {
                            resolve({
                                result: true
                            });
                        }), (/**
                         * @return {?}
                         */
                        () => {
                            window.document.body.click();
                            resolve({
                                result: false
                            });
                        }));
                    }
                    else if (action.code == WFActionType.Resubmit && slienceSaveTask) {
                        slienceSaveTask.call(this).subscribe((/**
                         * @return {?}
                         */
                        () => {
                            resolve({
                                result: true
                            });
                        }));
                    }
                    else {
                        resolve({
                            result: true
                        });
                    }
                }));
            });
        }
    }
}
TaskCenterBridgeService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */
TaskCenterBridgeService.ctorParameters = () => [];
/** @nocollapse */ TaskCenterBridgeService.ngInjectableDef = i0.defineInjectable({ factory: function TaskCenterBridgeService_Factory() { return new TaskCenterBridgeService(); }, token: TaskCenterBridgeService, providedIn: "root" });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGFzay1jZW50ZXItYnJpZGdlLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZmFycmlzL29hLWNvbW1hbmQtc2VydmljZXMvIiwic291cmNlcyI6WyJsaWIvdGFzay1jZW50ZXItYnJpZGdlL3Rhc2stY2VudGVyLWJyaWRnZS5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUUzQyxPQUFPLEVBQVksWUFBWSxFQUFVLE1BQU0sVUFBVSxDQUFDOztBQU0xRCxNQUFNLE9BQU8sdUJBQXVCO0lBRWxDLGdCQUFnQixDQUFDOzs7OztJQUVWLG9CQUFvQixDQUFDLFlBQWdCOztjQUNwQyxTQUFTLEdBQUcsTUFBTSxDQUFDLE1BQU07O1lBQzNCLFlBQTBCO1FBQzlCLElBQUk7WUFDRixZQUFZLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDLFlBQVksQ0FBQTtTQUM1QztRQUFDLE9BQU8sS0FBSyxFQUFFO1lBQ2QsTUFBTSxJQUFJLEtBQUssQ0FBQywwQkFBMEIsQ0FBQyxDQUFDO1NBQzdDOztZQUVHLGVBQWU7UUFFbkIsSUFBSTtZQUNGLGVBQWUsR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUMsWUFBWSxDQUFDLFNBQVMsQ0FBQyxZQUFZLENBQUM7U0FDdkU7UUFBQyxPQUFPLEtBQUssRUFBRTtZQUNkLFlBQVk7U0FDYjtRQUNELElBQUksU0FBUyxFQUFFO1lBQ2IsU0FBUyxDQUFDLHNCQUFzQixDQUFDOzs7O1lBQUcsQ0FDbEMsU0FHQyxFQUNELEVBQUU7Z0JBQ0YsT0FBTyxJQUFJLE9BQU87Ozs7O2dCQUFDLENBQUMsT0FBTyxFQUFFLE1BQU0sRUFBRSxFQUFFOzBCQUMvQixFQUFFLE1BQU0sRUFBRSxHQUFHLFNBQVM7b0JBQzVCLElBQUksWUFBWSxDQUFDLE9BQU8sQ0FBQyxrQkFBa0IsQ0FBQyxJQUFJLFdBQVcsSUFBSSxZQUFZLENBQUMsT0FBTyxDQUFDLGNBQWMsQ0FBQyxFQUFFO3dCQUNuRyxlQUFlLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLFNBQVM7Ozt3QkFBQyxHQUFHLEVBQUU7NEJBQ3hDLE9BQU8sQ0FBQztnQ0FDTixNQUFNLEVBQUUsSUFBSTs2QkFDYixDQUFDLENBQUM7d0JBQ0wsQ0FBQzs7O3dCQUFFLEdBQUcsRUFBRTs0QkFDTixNQUFNLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQTs0QkFDNUIsT0FBTyxDQUFDO2dDQUNOLE1BQU0sRUFBRSxLQUFLOzZCQUNkLENBQUMsQ0FBQzt3QkFDTCxDQUFDLEVBQUMsQ0FBQTtxQkFDSDt5QkFBTSxJQUFJLE1BQU0sQ0FBQyxJQUFJLElBQUksWUFBWSxDQUFDLFFBQVEsSUFBSSxlQUFlLEVBQUU7d0JBQ2xFLGVBQWUsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsU0FBUzs7O3dCQUFDLEdBQUcsRUFBRTs0QkFDeEMsT0FBTyxDQUFDO2dDQUNOLE1BQU0sRUFBRSxJQUFJOzZCQUNiLENBQUMsQ0FBQzt3QkFDTCxDQUFDLEVBQUMsQ0FBQTtxQkFDSDt5QkFBTTt3QkFDTCxPQUFPLENBQUM7NEJBQ04sTUFBTSxFQUFFLElBQUk7eUJBQ2IsQ0FBQyxDQUFDO3FCQUNKO2dCQUNILENBQUMsRUFBQyxDQUFBO1lBQ0osQ0FBQyxDQUFBLENBQUE7U0FDRjtJQUNILENBQUM7OztZQXpERixVQUFVLFNBQUM7Z0JBQ1YsVUFBVSxFQUFFLE1BQU07YUFDbkIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IEZyYW1lQ29udGV4dCB9IGZyb20gJ0BmYXJyaXMvZGV2a2l0JztcclxuaW1wb3J0IHsgV0ZBY3Rpb24sIFdGQWN0aW9uVHlwZSwgV0ZUYXNrIH0gZnJvbSAnLi9lbnRpdHknO1xyXG5cclxuXHJcbkBJbmplY3RhYmxlKHtcclxuICBwcm92aWRlZEluOiAncm9vdCdcclxufSlcclxuZXhwb3J0IGNsYXNzIFRhc2tDZW50ZXJCcmlkZ2VTZXJ2aWNlIHtcclxuXHJcbiAgY29uc3RydWN0b3IoKSB7IH1cclxuXHJcbiAgcHVibGljIGluaXRUYXNrQ2VudGVyQnJpZGdlKGN1c3RvbWVyQ21kczoge30pIHtcclxuICAgIGNvbnN0IGJyaWRnZVdpbiA9IHdpbmRvdy5wYXJlbnQ7XHJcbiAgICBsZXQgZnJhbWVDb250ZXh0OiBGcmFtZUNvbnRleHQ7XHJcbiAgICB0cnkge1xyXG4gICAgICBmcmFtZUNvbnRleHQgPSB0aGlzWydjb250ZXh0J10uZnJhbWVDb250ZXh0XHJcbiAgICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ2NhbiBub3QgZmluZCBmcmFtZUNvbnRleCcpO1xyXG4gICAgfVxyXG5cclxuICAgIGxldCBzbGllbmNlU2F2ZVRhc2s7XHJcblxyXG4gICAgdHJ5IHtcclxuICAgICAgc2xpZW5jZVNhdmVUYXNrID0gdGhpc1snY29udGV4dCddLmZyYW1lQ29udGV4dC52aWV3TW9kZWwuc2xpZW5jZVNhdmUxO1xyXG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgLy8g5LiN5a2Y5Zyo6Z2Z6Z+z5L+d5a2Y5ZG95LukXHJcbiAgICB9XHJcbiAgICBpZiAoYnJpZGdlV2luKSB7XHJcbiAgICAgIGJyaWRnZVdpblsndGFza0NlbnRlckJlZm9yZUxvYWQnXSA9IChcclxuICAgICAgICBhY3Rpb25PYmo6IHtcclxuICAgICAgICAgIFwidGFza1wiOiBXRlRhc2ssXHJcbiAgICAgICAgICBcImFjdGlvblwiOiBXRkFjdGlvblxyXG4gICAgICAgIH1cclxuICAgICAgKSA9PiB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcclxuICAgICAgICAgIGNvbnN0IHsgYWN0aW9uIH0gPSBhY3Rpb25PYmo7XHJcbiAgICAgICAgICBpZiAoZnJhbWVDb250ZXh0LnVpU3RhdGVbJ1VJU3RhdGVJblByb2Nlc3MnXSA9PSAnQXBwcm92aW5nJyAmJiBmcmFtZUNvbnRleHQudWlTdGF0ZVsnZm9ybUNvbmZpZ0lkJ10pIHtcclxuICAgICAgICAgICAgc2xpZW5jZVNhdmVUYXNrLmNhbGwodGhpcykuc3Vic2NyaWJlKCgpID0+IHtcclxuICAgICAgICAgICAgICByZXNvbHZlKHtcclxuICAgICAgICAgICAgICAgIHJlc3VsdDogdHJ1ZVxyXG4gICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9LCAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgd2luZG93LmRvY3VtZW50LmJvZHkuY2xpY2soKVxyXG4gICAgICAgICAgICAgIHJlc29sdmUoe1xyXG4gICAgICAgICAgICAgICAgcmVzdWx0OiBmYWxzZVxyXG4gICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgICAgfSBlbHNlIGlmIChhY3Rpb24uY29kZSA9PSBXRkFjdGlvblR5cGUuUmVzdWJtaXQgJiYgc2xpZW5jZVNhdmVUYXNrKSB7XHJcbiAgICAgICAgICAgIHNsaWVuY2VTYXZlVGFzay5jYWxsKHRoaXMpLnN1YnNjcmliZSgoKSA9PiB7XHJcbiAgICAgICAgICAgICAgcmVzb2x2ZSh7XHJcbiAgICAgICAgICAgICAgICByZXN1bHQ6IHRydWVcclxuICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfSlcclxuICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHJlc29sdmUoe1xyXG4gICAgICAgICAgICAgIHJlc3VsdDogdHJ1ZVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9KVxyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG59XHJcbiJdfQ==