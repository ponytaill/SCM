/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable, Injector } from '@angular/core';
import { BehaviorSubject, Subject, of } from 'rxjs';
import { HttpClient } from '@angular/common/http';
import { debounceTime, map, switchMap, catchError, tap, delay } from 'rxjs/operators';
import { LoadingService } from '@farris/ui-loading';
import { LookupUtils, ServerSideToken } from '@farris/ui-lookup';
import { ComboServerSideToken } from './http/ComboHttpService';
export class ComboService {
    /**
     * @param {?} http
     * @param {?} loadingService
     * @param {?} injector
     */
    constructor(http, loadingService, injector) {
        this.http = http;
        this.loadingService = loadingService;
        this.injector = injector;
        this.selections$ = new Subject();
        this.isOpen$ = new BehaviorSubject(false);
        this.data$ = new BehaviorSubject('');
        this.serachValue$ = new Subject();
        this.loadSuccess$ = new Subject();
        this.treeInfo$ = new BehaviorSubject(null);
        this.displayType = 'LIST';
        this.separator = ',';
        this.selectedValues = '';
        this.columns = [];
        this.remoteSearch = true;
        this.panelElement = null;
        this.treeSearchHandler = null;
        // 树帮助加载设置
        this.treeloadconfig = null;
        this._data = [];
        this.serachValue$.pipe(debounceTime(300)).subscribe((/**
         * @param {?} value
         * @return {?}
         */
        value => {
            if (!this.remoteSearch) {
                this.filterData(value, this.textField);
            }
            else {
                this.filterDataOnServer(value);
            }
        }));
    }
    /**
     * @return {?}
     */
    get uri() {
        return this._uri;
    }
    /**
     * @param {?} val
     * @return {?}
     */
    set uri(val) {
        this._uri = val;
        this.data$.next([]);
    }
    /**
     * @return {?}
     */
    get data() {
        return this._data;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set data(value) {
        this._data = value || [];
        if (Array.isArray(value)) {
            this.data$.next(value);
        }
    }
    /**
     * @return {?}
     */
    injectService() {
        if (this.injector && !this.comboHttp) {
            this.lookupUtils = this.injector.get(LookupUtils, null);
            if (this.displayType.indexOf('LOOKUP') > -1) {
                this.comboHttp = this.injector.get(ServerSideToken, null);
            }
            else {
                this.comboHttp = this.injector.get(ComboServerSideToken, null);
            }
        }
    }
    /**
     * @param {?} value
     * @return {?}
     */
    toBoolean(value) {
        return value != null && `${value}` !== 'false';
    }
    /**
     * @param {?} data
     * @param {?=} index
     * @param {?=} emitEvent
     * @return {?}
     */
    selectItem(data, index, emitEvent = true) {
        if (!this.multiSelect) {
            this.selections = [];
        }
        if (Array.isArray(data)) {
            data.forEach((/**
             * @param {?} n
             * @return {?}
             */
            n => {
                if (this.selections.findIndex((/**
                 * @param {?} s
                 * @return {?}
                 */
                s => s[this.idField] === n[this.idField])) === -1) {
                    this.selections.push(n);
                }
            }));
        }
        else {
            if (this.selections.findIndex((/**
             * @param {?} s
             * @return {?}
             */
            s => s[this.idField] === data[this.idField])) === -1) {
                this.selections.push(data);
            }
        }
        if (emitEvent) {
            this.selections$.next({ action: 'clicked' });
        }
    }
    /**
     * @param {?} data
     * @return {?}
     */
    unSelectItem(data) {
        this.selections = this.selections.filter((/**
         * @param {?} item
         * @return {?}
         */
        item => {
            // return item[this.idField] !== data[this.idField];
            return JSON.stringify(item) !== JSON.stringify(data);
        }));
        this.selections$.next({ action: 'clicked' });
    }
    /**
     * @param {?} datas
     * @return {?}
     */
    selectAll(datas) {
        (datas || []).forEach((/**
         * @param {?} n
         * @return {?}
         */
        n => {
            if (!this.selections.find((/**
             * @param {?} i
             * @return {?}
             */
            i => i[this.idField] === n[this.idField]))) {
                this.selections.push(n);
            }
        }));
        // this.selections = datas;
        this.selections$.next({ action: 'clicked' });
    }
    /**
     * @param {?} datas
     * @return {?}
     */
    unSelectAll(datas) {
        // this.selections = [];
        datas = datas || [];
        this.selections = (this.selections || []).filter((/**
         * @param {?} n
         * @return {?}
         */
        n => datas.findIndex((/**
         * @param {?} i
         * @return {?}
         */
        i => i[this.idField] === n[this.idField])) === -1));
        this.selections$.next({ action: 'clicked' });
    }
    /**
     * @param {?} id
     * @return {?}
     */
    isSelect(id) {
        if (this.selections && this.selections.length) {
            return this.selections.find((/**
             * @param {?} item
             * @return {?}
             */
            item => item[this.idField] === id)) !== undefined;
        }
        return false;
    }
    /**
     * @param {?} data
     * @param {?=} selectValues
     * @param {?=} callback
     * @return {?}
     */
    loadData(data, selectValues = '', callback) {
        if (data) {
            if (selectValues === null || selectValues === undefined) {
                selectValues = '';
            }
            if (typeof selectValues === 'boolean') {
                selectValues = '' + selectValues;
            }
            // this.data$.next(data);
            if (selectValues) {
                /** @type {?} */
                let vals = [(selectValues + '')];
                if (this.multiSelect) {
                    vals = (selectValues + '').split(this.separator);
                }
                /** @type {?} */
                let selectedItems = vals.map((/**
                 * @param {?} val
                 * @return {?}
                 */
                val => {
                    return callback(data, val);
                }));
                selectedItems = selectedItems.filter((/**
                 * @param {?} el
                 * @return {?}
                 */
                el => el));
                this.selections = selectedItems;
            }
            else {
                this.selections = [];
            }
            this.selections$.next({ action: 'initData' });
        }
    }
    /**
     * @param {?} params
     * @return {?}
     */
    filterDataOnServer(params) {
        this.getData(params).subscribe((/**
         * @param {?} r
         * @return {?}
         */
        r => {
            this.closeLoading();
            this.loadingService.clearAll();
            if (r && r.items) {
                switch (this.displayType) {
                    case 'LOOKUPLIST': {
                        this.loadLookUpDataTable(r, true);
                        break;
                    }
                    case 'LOOKUPTREELIST': {
                        this.loadLookUpDataTree(r);
                        break;
                    }
                }
            }
            else {
                this.data$.next([]);
            }
        }));
    }
    // 客户端过滤
    /**
     * @param {?} val
     * @param {?=} field
     * @return {?}
     */
    filterData(val, field = 'text') {
        if (val) {
            /** @type {?} */
            let data = [];
            if (this.displayType === 'LOOKUPLIST' || this.displayType === 'LIST') {
                data = this.data.filter((/**
                 * @param {?} item
                 * @return {?}
                 */
                item => {
                    /** @type {?} */
                    let itemval = this.getValueByObj(field, item);
                    if (itemval != '' && itemval !== null && itemval !== undefined) {
                        itemval = String(itemval).toLowerCase();
                    }
                    return itemval.indexOf(val.toLowerCase()) > -1;
                }));
            }
            // const data = this.data
            //     ? this.data.filter(item => {
            //         if (this.getValueByObj(filed, item)) {
            //             return String(this.getValueByObj(filed, item)).indexOf(val) > -1;
            //         } else if (item.data && this.getValueByObj(filed, item.data)) {
            //             return String(this.getValueByObj(filed, item.data)).indexOf(val) > -1;
            //         }
            //     })
            //     : [];
            this.data$.next(data);
        }
        else {
            this.data$.next(this.data);
        }
    }
    /**
     * @return {?}
     */
    getSelections() {
        return this.selections;
    }
    /**
     * @return {?}
     */
    clearSelections() {
        this.selections = [];
    }
    /**
     * @param {?} prop
     * @param {?=} selections
     * @return {?}
     */
    getValue(prop, selections) {
        selections = selections ? selections : this.selections;
        if (selections && selections.length) {
            /** @type {?} */
            const tmp = selections.map((/**
             * @param {?} item
             * @return {?}
             */
            item => {
                return this.getValueByObj(prop, item);
            }));
            if (tmp && (tmp.length > 1 || tmp.length === 0)) {
                return tmp.join(this.separator);
            }
            else {
                return tmp[0];
            }
        }
        return '';
    }
    /**
     * @param {?} field
     * @param {?} data
     * @return {?}
     */
    getValueByObj(field, data) {
        if (!data) {
            return '';
        }
        /** @type {?} */
        let resultVal = '';
        if (field.indexOf('.') === -1) {
            if (data.hasOwnProperty(field)) {
                resultVal = data[field];
            }
            else {
                // console.log(`%cError: The %c"${field}"%c is not in `,
                //         'color: #bb0000;font-weight: bold;', 'color: red;font-style: italic', 'color: #bb0000;font-weight: bold;', data);
                resultVal = null;
            }
        }
        else {
            resultVal = field.split('.').reduce((/**
             * @param {?} obj
             * @param {?} key
             * @return {?}
             */
            (obj, key) => {
                if (obj) {
                    return obj[key];
                }
                else {
                    // console.log(`%cError: The %c"${key}"%c is not in  `,
                    // 'color: #bb0000;font-weight: bold', 'color: red;font-style: italic', 'color: #bb0000;font-weight: bold;', obj);
                    return null;
                }
            }), data);
        }
        return resultVal;
    }
    /**
     * @param {?=} params
     * @param {?=} method
     * @param {?=} selectedIds
     * @return {?}
     */
    initData(params = {}, method = 'get', selectedIds = '') {
        switch (this.displayType) {
            case 'TreeList':
            case 'LIST': {
                if (params.data) {
                    params = params.data;
                }
                this.getData(params, method).subscribe((/**
                 * @param {?} d
                 * @return {?}
                 */
                d => {
                    /** @type {?} */
                    let __data = d;
                    if (!this.uri) {
                        __data = this.data;
                    }
                    if (this.displayType === 'TreeList') {
                        this.loadDataTree(__data);
                    }
                    else {
                        this.loadDataTable(__data);
                    }
                    this.loadSuccess$.next(true);
                }));
                break;
            }
            case 'LOOKUPLIST':
            case 'LOOKUPTREELIST': {
                // TFS 466104
                if (!selectedIds) {
                    this.selections = [];
                    this.selectedValues = '';
                }
                this.loadLookupData(params, selectedIds, 'get', this.displayType === 'LOOKUPTREELIST');
                break;
            }
        }
        return this.loadSuccess$;
    }
    /**
     * @private
     * @param {?} params
     * @param {?} selectedIds
     * @param {?=} method
     * @param {?=} isTree
     * @return {?}
     */
    loadLookupData(params, selectedIds, method = 'get', isTree = false) {
        const { data, enableFullTree, loadTreeDataType } = params;
        if (data) {
            params = { customData: data };
        }
        if (this.displayType === 'LOOKUPTREELIST') {
            params.enableFullTree = enableFullTree;
            // params.loadTreeDataType = 'loadall'; 
            params.searchValue = '{"category":"all"}';
            this.treeloadconfig = { enableFullTree, loadTreeDataType };
        }
        this.getData(params, method).pipe(switchMap((/**
         * @param {?} data
         * @return {?}
         */
        (data) => {
            if (selectedIds) {
                return this.getSelectedItems(selectedIds).pipe(map((/**
                 * @param {?} d
                 * @return {?}
                 */
                d => {
                    if (d && d.items) {
                        data.selectedItems = isTree ? d.items.map((/**
                         * @param {?} n
                         * @return {?}
                         */
                        n => n.data)) : d.items;
                    }
                    else {
                        if (Array.isArray(d)) {
                            data.selectedItems = (selectedIds + '').split(this.separator).map((/**
                             * @param {?} val
                             * @return {?}
                             */
                            val => {
                                if (isTree) {
                                    return this.treeNodeToFlatData(d, val, this.idField);
                                }
                                else {
                                    return d.find((/**
                                     * @param {?} n
                                     * @return {?}
                                     */
                                    n => n[this.idField] + '' == val || n[this.textField] == val));
                                }
                            }));
                        }
                    }
                    return data;
                })), catchError((/**
                 * @return {?}
                 */
                () => {
                    return of(data);
                })));
            }
            return of(data);
        }))).subscribe((/**
         * @param {?} data
         * @return {?}
         */
        data => {
            this.loadingService.clearAll();
            if (data) {
                if (isTree) {
                    this.loadLookUpDataTree(data);
                }
                else {
                    this.loadLookUpDataTable(data);
                }
            }
            this.loadSuccess$.next(true);
        }));
    }
    /**
     * @param {?} selIds
     * @return {?}
     */
    getSelectedItems(selIds) {
        /** @type {?} */
        const searchParam = {
            category: 'fav', favoriteIds: ('' + selIds).split(this.separator)
        };
        /** @type {?} */
        const p = { searchValue: JSON.stringify(searchParam), enableFullTree: false, loadTreeDataType: 'default' };
        return this.getData(p);
    }
    /**
     * @param {?=} params
     * @param {?=} method
     * @param {?=} loadChild
     * @return {?}
     */
    getData(params = {}, method = 'get', loadChild = false) {
        if (this.uri) {
            // this.data = []
            // tfs 470519
            if (this.data && this.data.length && !loadChild) {
                this.data = [];
            }
            this.showLoading();
            if (this.comboHttp) {
                if (this.context) {
                    this.comboHttp.context = this.context;
                }
                return this.comboHttp.getData(this.uri, params, method).pipe(tap((/**
                 * @return {?}
                 */
                () => {
                    this.closeLoading();
                })));
            }
            else {
                return this.http.request(method, this.uri, params).pipe(tap((/**
                 * @return {?}
                 */
                () => {
                    this.closeLoading();
                })));
            }
        }
        else {
            if (this.data) {
                return of(this.data).pipe(delay(10));
            }
            else {
                return of([]).pipe(delay(10));
            }
        }
    }
    /**
     * @param {?} data
     * @return {?}
     */
    loadDataTable(data) {
        if (data instanceof Array) {
            this.data = data;
        }
        else {
            this.data = data ? data.returnValue : [];
        }
        this.loadData(this.data, this.selectedValues, (/**
         * @param {?} dataArr
         * @param {?} val
         * @return {?}
         */
        (dataArr, val) => {
            return dataArr.find((/**
             * @param {?} d
             * @return {?}
             */
            d => d[this.idField] + '' == val || d[this.textField] == val));
        }));
        this.closeLoading();
    }
    /**
     * @param {?} data
     * @return {?}
     */
    loadDataTree(data) {
        if (data instanceof Array) {
            this.data = data;
        }
        else {
            this.data = data ? data.returnValue : [];
        }
        this.loadData(this.data, this.selectedValues, (/**
         * @param {?} dataArr
         * @param {?} val
         * @return {?}
         */
        (dataArr, val) => {
            return eachData(dataArr, val, this.idField);
            /**
             * @param {?} paramData
             * @param {?} paramVal
             * @param {?} idField
             * @return {?}
             */
            function eachData(paramData, paramVal, idField) {
                /** @type {?} */
                let rtnData = '';
                paramData.find((/**
                 * @param {?} d
                 * @return {?}
                 */
                d => {
                    if (d.data[idField] == paramVal) {
                        rtnData = d.data;
                        return true;
                    }
                    else if (d.children && d.children.length) {
                        rtnData = eachData(d.children, paramVal, idField);
                    }
                    else {
                        return false;
                    }
                }));
                return rtnData;
            }
        }));
        this.closeLoading();
    }
    /**
     * @param {?} resData
     * @param {?=} sortable
     * @return {?}
     */
    loadLookUpDataTable(resData, sortable = false) {
        this.closeLoading();
        if (typeof resData === 'object') {
            if (resData.returnValue) {
                resData = resData.returnValue;
            }
            if (!sortable && resData.columns) {
                this.columns = resData.columns;
            }
            if (resData.pageInfo) {
                this.pageInfo = resData.pageInfo;
                this.pageInfo.total = resData.total ? resData.total : 0;
            }
            if (resData.items) {
                this.data = resData.items;
            }
            if (resData.selectedItems) {
                this.selections = resData.selectedItems || [];
            }
        }
        if (this.selections) {
            /** @type {?} */
            const ids = this.selections.map((/**
             * @param {?} n
             * @return {?}
             */
            n => n[this.idField])).join(this.separator);
            if (ids !== this.selectedValues) {
                this.selectedValues = ids;
            }
        }
        this.loadData(this.data, this.selectedValues, (/**
         * @param {?} dataArr
         * @param {?} val
         * @return {?}
         */
        (dataArr, val) => {
            /** @type {?} */
            let isMaped = dataArr.find((/**
             * @param {?} d
             * @return {?}
             */
            d => d[this.idField] + '' == val));
            if (this.selections) {
                isMaped = !isMaped ? this.selections.find((/**
                 * @param {?} d
                 * @return {?}
                 */
                d => d[this.idField] + '' == val)) : isMaped;
            }
            return isMaped;
        }));
    }
    /**
     * @param {?} nodes
     * @param {?=} allData
     * @return {?}
     */
    checkNodeCanBeSelect(nodes, allData = true) {
        if (nodes && nodes.length) {
            return nodes.map((/**
             * @param {?} node
             * @return {?}
             */
            (node) => {
                if (node.hasOwnProperty('addtional')) {
                    node.selectable = !node['addtional'];
                }
                if (node.children && node.children.length) {
                    this.checkNodeCanBeSelect(node.children, allData);
                }
                else {
                    if (allData) {
                        node.leaf = true;
                    }
                }
                return node;
            }));
        }
        return nodes;
    }
    /**
     * @param {?} resData
     * @return {?}
     */
    loadLookUpDataTree(resData) {
        this.closeLoading();
        if (!resData) {
            return;
        }
        if (resData instanceof Array) {
            this.data = resData;
        }
        else {
            if (resData.returnValue) {
                resData = resData.returnValue;
            }
            this.columns = resData.columns;
            this.treeInfo = resData.treeInfo;
            this.treeInfo$.next(this.treeInfo);
            if (resData.selectedItems) {
                this.selections = resData.selectedItems || [];
            }
            if (this.treeInfo && !this.treeInfo['treeDataIsInit']) {
                if (this.treeInfo.layerType.toLowerCase() === 'pathcode') {
                    this.data = this.lookupUtils.makeTree(resData.items, this.treeInfo);
                }
                else {
                    this.data = this.lookupUtils.makeTreeWithParentID(resData.items, '', `${this.treeInfo.dataField}.${this.treeInfo.parentField}`, this.idField);
                }
            }
            else if (resData.items) {
                // this.data = resData.items;
                /** @type {?} */
                const isLoadAllTreeData = (/**
                 * @return {?}
                 */
                () => {
                    if (this.treeloadconfig.loadTreeDataType === 'default') {
                        return this.treeInfo.loadDataType === 'all';
                    }
                    else {
                        return this.treeloadconfig.loadTreeDataType === 'loadall';
                    }
                });
                this.data = this.checkNodeCanBeSelect(resData.items, isLoadAllTreeData());
            }
        }
        this.loadData(this.data, this.selectedValues, (/**
         * @param {?} dataArr
         * @param {?} val
         * @return {?}
         */
        (dataArr, val) => {
            return this.treeNodeToFlatData(dataArr, val, this.idField);
        }));
    }
    /**
     * @param {?} paramData
     * @param {?} paramVal
     * @param {?} idField
     * @return {?}
     */
    treeNodeToFlatData(paramData, paramVal, idField) {
        /** @type {?} */
        let rtnData = '';
        paramData.find((/**
         * @param {?} d
         * @return {?}
         */
        d => {
            if ((d.data && d.data[idField] == paramVal) || d[idField] == paramVal) {
                rtnData = d.data;
                return true;
            }
            else if (d.children && d.children.length) {
                rtnData = this.treeNodeToFlatData(d.children, paramVal, idField);
                return rtnData ? true : false;
            }
            else {
                return false;
            }
        }));
        return rtnData;
    }
    /**
     * @private
     * @return {?}
     */
    showLoading() {
        this.loading = this.loadingService.show({ container: this.panelElement, delay: 100 });
    }
    /**
     * @return {?}
     */
    closeLoading() {
        if (this.loading) {
            this.loading.close();
            this.loading = null;
        }
    }
}
ComboService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
ComboService.ctorParameters = () => [
    { type: HttpClient },
    { type: LoadingService },
    { type: Injector }
];
if (false) {
    /** @type {?} */
    ComboService.prototype.selections$;
    /** @type {?} */
    ComboService.prototype.isOpen$;
    /** @type {?} */
    ComboService.prototype.data$;
    /** @type {?} */
    ComboService.prototype.serachValue$;
    /** @type {?} */
    ComboService.prototype.loadSuccess$;
    /** @type {?} */
    ComboService.prototype.treeInfo$;
    /** @type {?} */
    ComboService.prototype.selections;
    /** @type {?} */
    ComboService.prototype.idField;
    /** @type {?} */
    ComboService.prototype.valueField;
    /** @type {?} */
    ComboService.prototype.textField;
    /** @type {?} */
    ComboService.prototype.multiSelect;
    /** @type {?} */
    ComboService.prototype.displayType;
    /** @type {?} */
    ComboService.prototype.separator;
    /** @type {?} */
    ComboService.prototype._uri;
    /** @type {?} */
    ComboService.prototype.selectedValues;
    /** @type {?} */
    ComboService.prototype.pageInfo;
    /** @type {?} */
    ComboService.prototype.treeInfo;
    /** @type {?} */
    ComboService.prototype.columns;
    /** @type {?} */
    ComboService.prototype.context;
    /** @type {?} */
    ComboService.prototype.remoteSearch;
    /** @type {?} */
    ComboService.prototype.panelElement;
    /** @type {?} */
    ComboService.prototype.treeSearchHandler;
    /**
     * @type {?}
     * @private
     */
    ComboService.prototype.treeloadconfig;
    /**
     * @type {?}
     * @private
     */
    ComboService.prototype._data;
    /**
     * @type {?}
     * @private
     */
    ComboService.prototype.loading;
    /**
     * @type {?}
     * @private
     */
    ComboService.prototype.lookupUtils;
    /**
     * @type {?}
     * @private
     */
    ComboService.prototype.comboHttp;
    /** @type {?} */
    ComboService.prototype.http;
    /** @type {?} */
    ComboService.prototype.loadingService;
    /**
     * @type {?}
     * @private
     */
    ComboService.prototype.injector;
}
//# sourceMappingURL=data:application/json;base64,