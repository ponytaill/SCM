/**
 * @fileoverview added by tsickle
 * Generated from: lib/dynamic_bef_repository.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { HttpClient } from '@angular/common/http';
import { DataTypeInfo, EntityCollection } from '@farris/devkit';
import { BefDataService } from './bef_data_service';
import { BefEntityManager } from './bef_entity_manager';
import { BefProxy } from './bef_proxy';
import { BefRepository } from './bef_repository';
import { BE_SERVER_URI_TOKEN } from './tokens';
import { UriService } from './uri_service';
/**
 * @template T
 */
class DynamicBefRepository extends BefRepository {
    // public paginationInfo = {
    //   Entity: {
    //     pageSize: 20,
    //   },
    // };
    /**
     * @param {?} injector
     * @param {?} name
     * @param {?} entityType
     * @param {?} serverUri
     * @param {?} apiUri
     */
    constructor(injector, name, entityType, serverUri, apiUri) {
        super(injector);
        this.name = name;
        this.entityType = entityType;
        this.serverUri = serverUri;
        this.apiUri = apiUri;
        this.apiUri = apiUri;
        /** @type {?} */
        const paginationInfo = {};
        paginationInfo[entityType.typeName] = { pageSize: 20 };
        this.paginationInfo = paginationInfo;
        this.entityTypeInfo = new DataTypeInfo(this.entityType);
        this.entityCollection = new EntityCollection(this.entityType);
        // 初始化实体管理器
        this.entityManager = new BefEntityManager(this.entityCollection);
        /** @type {?} */
        const httpClient = injector.get(HttpClient);
        /** @type {?} */
        const uriService = new UriService(serverUri);
        /** @type {?} */
        const proxy = new BefProxy(httpClient, uriService);
        /** @type {?} */
        const baseUri = uriService.extendUri(apiUri);
        proxy.setBaseUri(baseUri);
        this.dataService = new BefDataService(injector, this);
        this.serverUri = injector.get(BE_SERVER_URI_TOKEN);
    }
    /**
     * @param {?} defaultValues
     * @return {?}
     */
    batchAppend(defaultValues) {
        throw new Error('Method not implemented.');
    }
}
if (false) {
    /** @type {?} */
    DynamicBefRepository.prototype.name;
    /** @type {?} */
    DynamicBefRepository.prototype.entityType;
    /** @type {?} */
    DynamicBefRepository.prototype.serverUri;
    /** @type {?} */
    DynamicBefRepository.prototype.apiUri;
}
export { DynamicBefRepository };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZHluYW1pY19iZWZfcmVwb3NpdG9yeS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BmYXJyaXMvYmVmLyIsInNvdXJjZXMiOlsibGliL2R5bmFtaWNfYmVmX3JlcG9zaXRvcnkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFFbEQsT0FBTyxFQUFFLFlBQVksRUFBVSxnQkFBZ0IsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBRXhFLE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQztBQUNwRCxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQztBQUN4RCxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sYUFBYSxDQUFDO0FBQ3ZDLE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQztBQUNqRCxPQUFPLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSxVQUFVLENBQUM7QUFDL0MsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQzs7OztBQUUzQyxNQUFNLG9CQUF1QyxTQUFRLGFBQWdCOzs7Ozs7Ozs7Ozs7O0lBWW5FLFlBQVksUUFBa0IsRUFBUyxJQUFZLEVBQVMsVUFBZSxFQUFTLFNBQWlCLEVBQVMsTUFBYztRQUMxSCxLQUFLLENBQUMsUUFBUSxDQUFDLENBQUM7UUFEcUIsU0FBSSxHQUFKLElBQUksQ0FBUTtRQUFTLGVBQVUsR0FBVixVQUFVLENBQUs7UUFBUyxjQUFTLEdBQVQsU0FBUyxDQUFRO1FBQVMsV0FBTSxHQUFOLE1BQU0sQ0FBUTtRQUUxSCxJQUFJLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQzs7Y0FDZixjQUFjLEdBQUcsRUFBRTtRQUN6QixjQUFjLENBQUMsVUFBVSxDQUFDLFFBQVEsQ0FBQyxHQUFHLEVBQUUsUUFBUSxFQUFFLEVBQUUsRUFBRSxDQUFDO1FBQ3ZELElBQUksQ0FBQyxjQUFjLEdBQUcsY0FBYyxDQUFDO1FBQ3JDLElBQUksQ0FBQyxjQUFjLEdBQUcsSUFBSSxZQUFZLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDO1FBQ3hELElBQUksQ0FBQyxnQkFBZ0IsR0FBRyxJQUFJLGdCQUFnQixDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQztRQUM5RCxXQUFXO1FBQ1gsSUFBSSxDQUFDLGFBQWEsR0FBRyxJQUFJLGdCQUFnQixDQUFDLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDOztjQUUzRCxVQUFVLEdBQUcsUUFBUSxDQUFDLEdBQUcsQ0FBQyxVQUFVLENBQUM7O2NBQ3JDLFVBQVUsR0FBRyxJQUFJLFVBQVUsQ0FBQyxTQUFTLENBQUM7O2NBQ3RDLEtBQUssR0FBRyxJQUFJLFFBQVEsQ0FBQyxVQUFVLEVBQUUsVUFBVSxDQUFDOztjQUM1QyxPQUFPLEdBQUcsVUFBVSxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUM7UUFDNUMsS0FBSyxDQUFDLFVBQVUsQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUUxQixJQUFJLENBQUMsV0FBVyxHQUFHLElBQUksY0FBYyxDQUFDLFFBQVEsRUFBRSxJQUFJLENBQUMsQ0FBQztRQUN0RCxJQUFJLENBQUMsU0FBUyxHQUFHLFFBQVEsQ0FBQyxHQUFHLENBQVMsbUJBQW1CLENBQUMsQ0FBQztJQUM3RCxDQUFDOzs7OztJQTdCRCxXQUFXLENBQUMsYUFBb0I7UUFDOUIsTUFBTSxJQUFJLEtBQUssQ0FBQyx5QkFBeUIsQ0FBQyxDQUFDO0lBQzdDLENBQUM7Q0E0QkY7OztJQXBCaUMsb0NBQW1COztJQUFFLDBDQUFzQjs7SUFBRSx5Q0FBd0I7O0lBQUUsc0NBQXFCOztBQXNCOUgsT0FBTyxFQUFFLG9CQUFvQixFQUFFLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBIdHRwQ2xpZW50IH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uL2h0dHAnO1xyXG5pbXBvcnQgeyBJbmplY3RvciB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBEYXRhVHlwZUluZm8sIEVudGl0eSwgRW50aXR5Q29sbGVjdGlvbiB9IGZyb20gJ0BmYXJyaXMvZGV2a2l0JztcclxuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xyXG5pbXBvcnQgeyBCZWZEYXRhU2VydmljZSB9IGZyb20gJy4vYmVmX2RhdGFfc2VydmljZSc7XHJcbmltcG9ydCB7IEJlZkVudGl0eU1hbmFnZXIgfSBmcm9tICcuL2JlZl9lbnRpdHlfbWFuYWdlcic7XHJcbmltcG9ydCB7IEJlZlByb3h5IH0gZnJvbSAnLi9iZWZfcHJveHknO1xyXG5pbXBvcnQgeyBCZWZSZXBvc2l0b3J5IH0gZnJvbSAnLi9iZWZfcmVwb3NpdG9yeSc7XHJcbmltcG9ydCB7IEJFX1NFUlZFUl9VUklfVE9LRU4gfSBmcm9tICcuL3Rva2Vucyc7XHJcbmltcG9ydCB7IFVyaVNlcnZpY2UgfSBmcm9tICcuL3VyaV9zZXJ2aWNlJztcclxuXHJcbmNsYXNzIER5bmFtaWNCZWZSZXBvc2l0b3J5PFQgZXh0ZW5kcyBFbnRpdHk+IGV4dGVuZHMgQmVmUmVwb3NpdG9yeTxUPiB7XHJcblxyXG4gIGJhdGNoQXBwZW5kKGRlZmF1bHRWYWx1ZXM6IGFueVtdKTogT2JzZXJ2YWJsZTxhbnk+IHtcclxuICAgIHRocm93IG5ldyBFcnJvcignTWV0aG9kIG5vdCBpbXBsZW1lbnRlZC4nKTtcclxuICB9XHJcblxyXG4gIC8vIHB1YmxpYyBwYWdpbmF0aW9uSW5mbyA9IHtcclxuICAvLyAgIEVudGl0eToge1xyXG4gIC8vICAgICBwYWdlU2l6ZTogMjAsXHJcbiAgLy8gICB9LFxyXG4gIC8vIH07XHJcblxyXG4gIGNvbnN0cnVjdG9yKGluamVjdG9yOiBJbmplY3RvciwgcHVibGljIG5hbWU6IHN0cmluZywgcHVibGljIGVudGl0eVR5cGU6IGFueSwgcHVibGljIHNlcnZlclVyaTogc3RyaW5nLCBwdWJsaWMgYXBpVXJpOiBzdHJpbmcpIHtcclxuICAgIHN1cGVyKGluamVjdG9yKTtcclxuICAgIHRoaXMuYXBpVXJpID0gYXBpVXJpO1xyXG4gICAgY29uc3QgcGFnaW5hdGlvbkluZm8gPSB7fTtcclxuICAgIHBhZ2luYXRpb25JbmZvW2VudGl0eVR5cGUudHlwZU5hbWVdID0geyBwYWdlU2l6ZTogMjAgfTtcclxuICAgIHRoaXMucGFnaW5hdGlvbkluZm8gPSBwYWdpbmF0aW9uSW5mbztcclxuICAgIHRoaXMuZW50aXR5VHlwZUluZm8gPSBuZXcgRGF0YVR5cGVJbmZvKHRoaXMuZW50aXR5VHlwZSk7XHJcbiAgICB0aGlzLmVudGl0eUNvbGxlY3Rpb24gPSBuZXcgRW50aXR5Q29sbGVjdGlvbih0aGlzLmVudGl0eVR5cGUpO1xyXG4gICAgLy8g5Yid5aeL5YyW5a6e5L2T566h55CG5ZmoXHJcbiAgICB0aGlzLmVudGl0eU1hbmFnZXIgPSBuZXcgQmVmRW50aXR5TWFuYWdlcih0aGlzLmVudGl0eUNvbGxlY3Rpb24pO1xyXG5cclxuICAgIGNvbnN0IGh0dHBDbGllbnQgPSBpbmplY3Rvci5nZXQoSHR0cENsaWVudCk7XHJcbiAgICBjb25zdCB1cmlTZXJ2aWNlID0gbmV3IFVyaVNlcnZpY2Uoc2VydmVyVXJpKTtcclxuICAgIGNvbnN0IHByb3h5ID0gbmV3IEJlZlByb3h5KGh0dHBDbGllbnQsIHVyaVNlcnZpY2UpO1xyXG4gICAgY29uc3QgYmFzZVVyaSA9IHVyaVNlcnZpY2UuZXh0ZW5kVXJpKGFwaVVyaSk7XHJcbiAgICBwcm94eS5zZXRCYXNlVXJpKGJhc2VVcmkpO1xyXG5cclxuICAgIHRoaXMuZGF0YVNlcnZpY2UgPSBuZXcgQmVmRGF0YVNlcnZpY2UoaW5qZWN0b3IsIHRoaXMpO1xyXG4gICAgdGhpcy5zZXJ2ZXJVcmkgPSBpbmplY3Rvci5nZXQ8c3RyaW5nPihCRV9TRVJWRVJfVVJJX1RPS0VOKTtcclxuICB9XHJcbn1cclxuXHJcbmV4cG9ydCB7IER5bmFtaWNCZWZSZXBvc2l0b3J5IH07XHJcbiJdfQ==