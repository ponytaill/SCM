/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input, EventEmitter, Output, ViewChild } from '@angular/core';
import { NumberRangeComponent } from '@farris/ui-number-spinner';
var PanelNumberComponent = /** @class */ (function () {
    function PanelNumberComponent() {
        this.searchHandle = new EventEmitter();
        this.submitChange = new EventEmitter();
        this.canNull = true;
    }
    Object.defineProperty(PanelNumberComponent.prototype, "item", {
        get: /**
         * @return {?}
         */
        function () {
            return this._item;
        },
        set: /**
         * @param {?} nr
         * @return {?}
         */
        function (nr) {
            this._item = nr;
            if (this._item) {
                if (!this._item.hasOwnProperty('value')) {
                    this._item.value = {
                        startValue: null,
                        endValue: null
                    };
                }
                if (this._item.beginPlaceHolder) {
                    this.beginPlaceHolder = this._item.beginPlaceHolder || '';
                }
                if (this._item.endPlaceHolder) {
                    this.endPlaceHolder = this._item.endPlaceHolder || '';
                }
            }
            this.precision = nr.control.precision;
            this.bigNumber = nr.control.bigNumber;
            if (!this.bigNumber) {
                this.min = -2147483648;
                this.max = 2147483647;
            }
            this.constructMultiFieldNumberRange(nr.value);
            this.setSubmitChange();
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    PanelNumberComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        setTimeout((/**
         * @return {?}
         */
        function () {
            if (_this.numberRangeText) {
                _this.numberRangeText.inputPrev.nativeElement.focus();
            }
        }), 100);
    };
    /**
     * @param {?} value
     * @return {?}
     */
    PanelNumberComponent.prototype.constructMultiFieldNumberRange = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        this.beginValue = value.startValue == null ? null : value.startValue;
        this.endValue = value.endValue == null ? null : value.endValue;
    };
    /**
     * @param {?} event
     * @return {?}
     */
    PanelNumberComponent.prototype.numberChange = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        if (event) {
            /** @type {?} */
            var dataArray = event.split('~');
            this._item.value.startValue = dataArray[0] ? dataArray[0] : null;
            this._item.value.endValue = dataArray[1] ? dataArray[1] : null;
        }
        else {
            this._item.value.startValue = null;
            this._item.value.endValue = null;
        }
        if (Object.keys(this._item.value).length === 0 || (this._item.value.startValue == null && this._item.value.endValue == null)) {
            this._item.valueText = '';
        }
        else if (this._item.value.startValue == null) {
            this._item.valueText = '~' + this._item.value.endValue;
        }
        else if (this._item.value.endValue == null) {
            this._item.valueText = this._item.value.startValue + '~';
        }
        else {
            this._item.valueText = this._item.value.startValue + '~' + this._item.value.endValue;
        }
        this.setSubmitChange();
        this.searchHandle.emit();
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    PanelNumberComponent.prototype.beginValueChange = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        this.beginValue = $event;
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    PanelNumberComponent.prototype.endValueChange = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        this.endValue = $event;
    };
    /**
     * @return {?}
     */
    PanelNumberComponent.prototype.setSubmitChange = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var val = this._item.value;
        if (Object.keys(val).length < 0 || (val.startValue == null && val.endValue == null)) {
            this.submitChange.emit(false);
        }
        else {
            this.submitChange.emit(true);
        }
    };
    PanelNumberComponent.decorators = [
        { type: Component, args: [{
                    selector: 'panel-filter-number',
                    template: "<farris-number-range class=\"f-utils-fill-flex-row\" [canNull]=\"canNull\" [beginValue]=\"beginValue\" [endValue]=\"endValue\" \r\n(beginValueChange)=\"beginValueChange($event)\" (endValueChange)=\"endValueChange($event)\" (valueChange)=\"numberChange($event)\"\r\n[beginPlaceHolder]=\"beginPlaceHolder\" [endPlaceHolder]=\"endPlaceHolder\"\r\n[placeholder]=\"placeholder\" [precision]=\"precision\" [bigNumber]=\"bigNumber\" [min]=\"min\" [max]=\"max\" #numberRangeText>\r\n</farris-number-range>"
                }] }
    ];
    /** @nocollapse */
    PanelNumberComponent.ctorParameters = function () { return []; };
    PanelNumberComponent.propDecorators = {
        searchHandle: [{ type: Output }],
        submitChange: [{ type: Output }],
        item: [{ type: Input }],
        numberRangeText: [{ type: ViewChild, args: ['numberRangeText',] }]
    };
    return PanelNumberComponent;
}());
export { PanelNumberComponent };
if (false) {
    /** @type {?} */
    PanelNumberComponent.prototype.searchHandle;
    /** @type {?} */
    PanelNumberComponent.prototype.submitChange;
    /** @type {?} */
    PanelNumberComponent.prototype.canNull;
    /** @type {?} */
    PanelNumberComponent.prototype.number;
    /** @type {?} */
    PanelNumberComponent.prototype.beginValue;
    /** @type {?} */
    PanelNumberComponent.prototype.endValue;
    /** @type {?} */
    PanelNumberComponent.prototype.precision;
    /** @type {?} */
    PanelNumberComponent.prototype.placeholder;
    /** @type {?} */
    PanelNumberComponent.prototype.beginPlaceHolder;
    /** @type {?} */
    PanelNumberComponent.prototype.endPlaceHolder;
    /** @type {?} */
    PanelNumberComponent.prototype.bigNumber;
    /** @type {?} */
    PanelNumberComponent.prototype.max;
    /** @type {?} */
    PanelNumberComponent.prototype.min;
    /** @type {?} */
    PanelNumberComponent.prototype._item;
    /** @type {?} */
    PanelNumberComponent.prototype.numberRange;
    /** @type {?} */
    PanelNumberComponent.prototype.numberRangeText;
}
//# sourceMappingURL=data:application/json;base64,