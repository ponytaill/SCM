System.register(['rxjs', 'rxjs/operators', 'axios', 'reflect-metadata', 'date-fns', 'dayjs'], function (exports) {
    'use strict';
    var of, from, Observable, EMPTY$1, Subject, BehaviorSubject, switchMap, map, concatMap, tap, every, take, throwIfEmpty, takeLast, axios, format, parseISO, isDate, isEqual$1, compareAsc, dayjs;
    return {
        setters: [function (module) {
            of = module.of;
            from = module.from;
            Observable = module.Observable;
            EMPTY$1 = module.EMPTY;
            Subject = module.Subject;
            BehaviorSubject = module.BehaviorSubject;
        }, function (module) {
            switchMap = module.switchMap;
            map = module.map;
            concatMap = module.concatMap;
            tap = module.tap;
            every = module.every;
            take = module.take;
            throwIfEmpty = module.throwIfEmpty;
            takeLast = module.takeLast;
        }, function (module) {
            axios = module.default;
        }, function () {}, function (module) {
            format = module.format;
            parseISO = module.parseISO;
            isDate = module.isDate;
            isEqual$1 = module.isEqual;
            compareAsc = module.compareAsc;
        }, function (module) {
            dayjs = module.default;
        }],
        execute: function () {

            exports({
                BindingPropertyType: void 0,
                BindingType: void 0,
                ChangeType: void 0,
                CommandHandlerExtenderMeta: CommandHandlerExtenderMeta,
                CommandHandlerMeta: CommandHandlerMeta,
                DataChangeType: void 0,
                DataPathNodeType: void 0,
                DataPropGroup: void 0,
                EntityFactory: EntityFactory,
                INJECTOR_IMPL__PRE_R3__: INJECTOR_IMPL__PRE_R3__,
                InjectFlags: void 0,
                ModifyType: void 0,
                RepositoryMeta: RepositoryMeta,
                ViewChangeType: void 0,
                createEntities: createEntities,
                createEntity: createEntity,
                createInjectionToken: createInjectionToken,
                createInjector: createInjector,
                isType: isType,
                makeDecorator: makeDecorator,
                makeParamDecorator: makeParamDecorator,
                makePropDecorator: makePropDecorator,
                setCurrentInjector: setCurrentInjector,
                Éµa: getClosureSafeProperty
            });

            /*! *****************************************************************************
            Copyright (c) Microsoft Corporation.

            Permission to use, copy, modify, and/or distribute this software for any
            purpose with or without fee is hereby granted.

            THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
            REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
            AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
            INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
            LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
            OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
            PERFORMANCE OF THIS SOFTWARE.
            ***************************************************************************** */
            /* global Reflect, Promise */

            var extendStatics = function(d, b) {
                extendStatics = Object.setPrototypeOf ||
                    ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
                    function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
                return extendStatics(d, b);
            };

            function __extends(d, b) {
                extendStatics(d, b);
                function __() { this.constructor = d; }
                d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
            }

            var __assign = function() {
                __assign = Object.assign || function __assign(t) {
                    for (var s, i = 1, n = arguments.length; i < n; i++) {
                        s = arguments[i];
                        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
                    }
                    return t;
                };
                return __assign.apply(this, arguments);
            };

            function __generator(thisArg, body) {
                var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
                return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
                function verb(n) { return function (v) { return step([n, v]); }; }
                function step(op) {
                    if (f) throw new TypeError("Generator is already executing.");
                    while (_) try {
                        if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
                        if (y = 0, t) op = [op[0] & 2, t.value];
                        switch (op[0]) {
                            case 0: case 1: t = op; break;
                            case 4: _.label++; return { value: op[1], done: false };
                            case 5: _.label++; y = op[1]; op = [0]; continue;
                            case 7: op = _.ops.pop(); _.trys.pop(); continue;
                            default:
                                if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                                if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                                if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                                if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                                if (t[2]) _.ops.pop();
                                _.trys.pop(); continue;
                        }
                        op = body.call(thisArg, _);
                    } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
                    if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
                }
            }

            function __values(o) {
                var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
                if (m) return m.call(o);
                if (o && typeof o.length === "number") return {
                    next: function () {
                        if (o && i >= o.length) o = void 0;
                        return { value: o && o[i++], done: !o };
                    }
                };
                throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
            }

            function __read(o, n) {
                var m = typeof Symbol === "function" && o[Symbol.iterator];
                if (!m) return o;
                var i = m.call(o), r, ar = [], e;
                try {
                    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
                }
                catch (error) { e = { error: error }; }
                finally {
                    try {
                        if (r && !r.done && (m = i["return"])) m.call(i);
                    }
                    finally { if (e) throw e.error; }
                }
                return ar;
            }

            function __spread() {
                for (var ar = [], i = 0; i < arguments.length; i++)
                    ar = ar.concat(__read(arguments[i]));
                return ar;
            }

            var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

            function createCommonjsModule(fn) {
              var module = { exports: {} };
            	return fn(module, module.exports), module.exports;
            }

            var isBetween = createCommonjsModule(function (module, exports) {
            !function(e,t){module.exports=t();}(commonjsGlobal,function(){return function(e,t,i){t.prototype.isBetween=function(e,t,s,f){var n=i(e),o=i(t),r="("===(f=f||"()")[0],u=")"===f[1];return (r?this.isAfter(n,s):!this.isBefore(n,s))&&(u?this.isBefore(o,s):!this.isAfter(o,s))||(r?this.isBefore(n,s):!this.isAfter(n,s))&&(u?this.isAfter(o,s):!this.isBefore(o,s))};}});
            });

            var relativeTime = createCommonjsModule(function (module, exports) {
            !function(r,t){module.exports=t();}(commonjsGlobal,function(){return function(r,t,e){r=r||{};var n=t.prototype,o={future:"in %s",past:"%s ago",s:"a few seconds",m:"a minute",mm:"%d minutes",h:"an hour",hh:"%d hours",d:"a day",dd:"%d days",M:"a month",MM:"%d months",y:"a year",yy:"%d years"};function i(r,t,e,o){return n.fromToBase(r,t,e,o)}e.en.relativeTime=o,n.fromToBase=function(t,n,i,d,u){for(var a,f,s,l=i.$locale().relativeTime||o,h=r.thresholds||[{l:"s",r:44,d:"second"},{l:"m",r:89},{l:"mm",r:44,d:"minute"},{l:"h",r:89},{l:"hh",r:21,d:"hour"},{l:"d",r:35},{l:"dd",r:25,d:"day"},{l:"M",r:45},{l:"MM",r:10,d:"month"},{l:"y",r:17},{l:"yy",d:"year"}],m=h.length,c=0;c<m;c+=1){var y=h[c];y.d&&(a=d?e(t).diff(i,y.d,!0):i.diff(t,y.d,!0));var p=(r.rounding||Math.round)(Math.abs(a));if(s=a>0,p<=y.r||!y.r){p<=1&&c>0&&(y=h[c-1]);var v=l[y.l];u&&(p=u(""+p)),f="string"==typeof v?v.replace("%d",p):v(p,n,y.l,s);break}}if(n)return f;var M=s?l.future:l.past;return "function"==typeof M?M(f):M.replace("%s",f)},n.to=function(r,t){return i(r,t,this,!0)},n.from=function(r,t){return i(r,t,this)};var d=function(r){return r.$u?e.utc():e()};n.toNow=function(r){return this.to(d(this),r)},n.fromNow=function(r){return this.from(d(this),r)};}});
            });

            var calendar = createCommonjsModule(function (module, exports) {
            !function(e,t){module.exports=t();}(commonjsGlobal,function(){return function(e,t,a){var n="h:mm A",d={lastDay:"[Yesterday at] "+n,sameDay:"[Today at] "+n,nextDay:"[Tomorrow at] "+n,nextWeek:"dddd [at] "+n,lastWeek:"[Last] dddd [at] "+n,sameElse:"MM/DD/YYYY"};t.prototype.calendar=function(e,t){var n=t||this.$locale().calendar||d,s=a(e||void 0).startOf("d"),o=this.diff(s,"d",!0),i=o<-6?"sameElse":o<-1?"lastWeek":o<0?"lastDay":o<1?"sameDay":o<2?"nextDay":o<7?"nextWeek":"sameElse",f=n[i]||d[i];return "function"==typeof f?f.call(this,a()):this.format(f)};}});
            });

            createCommonjsModule(function (module, exports) {
            !function(_,e){module.exports=e(dayjs);}(commonjsGlobal,function(_){_=_&&_.hasOwnProperty("default")?_.default:_;var e={name:"zh-cn",weekdays:"æææ¥_ææä¸_ææäº_ææä¸_ææå_ææäº_ææå­".split("_"),weekdaysShort:"å¨æ¥_å¨ä¸_å¨äº_å¨ä¸_å¨å_å¨äº_å¨å­".split("_"),weekdaysMin:"æ¥_ä¸_äº_ä¸_å_äº_å­".split("_"),months:"ä¸æ_äºæ_ä¸æ_åæ_äºæ_å­æ_ä¸æ_å«æ_ä¹æ_åæ_åä¸æ_åäºæ".split("_"),monthsShort:"1æ_2æ_3æ_4æ_5æ_6æ_7æ_8æ_9æ_10æ_11æ_12æ".split("_"),ordinal:function(_,e){switch(e){case"W":return _+"å¨";default:return _+"æ¥"}},weekStart:1,yearStart:4,formats:{LT:"HH:mm",LTS:"HH:mm:ss",L:"YYYY/MM/DD",LL:"YYYYå¹´MæDæ¥",LLL:"YYYYå¹´MæDæ¥Ahç¹mmå",LLLL:"YYYYå¹´MæDæ¥ddddAhç¹mmå",l:"YYYY/M/D",ll:"YYYYå¹´MæDæ¥",lll:"YYYYå¹´MæDæ¥ HH:mm",llll:"YYYYå¹´MæDæ¥dddd HH:mm"},relativeTime:{future:"%så",past:"%så",s:"å ç§",m:"1 åé",mm:"%d åé",h:"1 å°æ¶",hh:"%d å°æ¶",d:"1 å¤©",dd:"%d å¤©",M:"1 ä¸ªæ",MM:"%d ä¸ªæ",y:"1 å¹´",yy:"%d å¹´"},meridiem:function(_,e){var t=100*_+e;return t<600?"åæ¨":t<900?"æ©ä¸":t<1100?"ä¸å":t<1300?"ä¸­å":t<1800?"ä¸å":"æä¸"}};return _.locale(e,null,!0),e});
            });

            var Type = exports('Type', Function);
            var DataChangeType;
            (function (DataChangeType) {
                DataChangeType[DataChangeType["Add"] = 0] = "Add";
                DataChangeType[DataChangeType["Delete"] = 1] = "Delete";
            })(DataChangeType || (DataChangeType = exports('DataChangeType', {})));

            function isType(v) {
                return typeof v === 'function';
            }
            var InjectFlags;
            (function (InjectFlags) {
                InjectFlags[InjectFlags["Default"] = 0] = "Default";
                InjectFlags[InjectFlags["Self"] = 1] = "Self";
                InjectFlags[InjectFlags["SkipSelf"] = 2] = "SkipSelf";
                InjectFlags[InjectFlags["Optional"] = 4] = "Optional";
            })(InjectFlags || (InjectFlags = exports('InjectFlags', {})));

            var EMPTY = [];
            var IDENT = function (value) {
                return value;
            };
            var CIRCULAR = IDENT;
            var MULTI_PROVIDER_FN = function () {
                return Array.prototype.slice.call(arguments);
            };
            var NEW_LINE = /\n/gm;
            var NO_NEW_LINE = 'Éµ';
            var _THROW_IF_NOT_FOUND = {};
            var THROW_IF_NOT_FOUND = _THROW_IF_NOT_FOUND;
            var NG_TEMP_TOKEN_PATH = 'ngTempTokenPath';

            function stringify(token) {
                if (typeof token === 'string') {
                    return token;
                }
                if (Array.isArray(token)) {
                    return '[' + token.map(stringify).join(', ') + ']';
                }
                if (token == null) {
                    return '' + token;
                }
                if (token.overriddenName) {
                    return "" + token.overriddenName;
                }
                if (token.name) {
                    return "" + token.name;
                }
                var res = token.toString();
                if (res == null) {
                    return '' + res;
                }
                var newLineIndex = res.indexOf('\n');
                return newLineIndex === -1 ? res : res.substring(0, newLineIndex);
            }
            function getClosureSafeProperty(objWithPropertyToExtract) {
                for (var key in objWithPropertyToExtract) {
                    if (objWithPropertyToExtract[key] === getClosureSafeProperty) {
                        return key;
                    }
                }
                throw Error('Could not find renamed property on target object.');
            }
            function formatError(text, obj, injectorErrorName, source) {
                if (source === void 0) { source = null; }
                text = text && text.charAt(0) === '\n' && text.charAt(1) == NO_NEW_LINE ? text.substr(2) : text;
                var context = stringify(obj);
                if (Array.isArray(obj)) {
                    context = obj.map(stringify).join(' -> ');
                }
                else if (typeof obj === 'object') {
                    var parts = [];
                    for (var key in obj) {
                        if (obj.hasOwnProperty(key)) {
                            var value = obj[key];
                            parts.push(key + ':' + (typeof value === 'string' ? JSON.stringify(value) : stringify(value)));
                        }
                    }
                    context = "{" + parts.join(', ') + "}";
                }
                return "" + injectorErrorName + (source ? '(' + source + ')' : '') + "[" + context + "]: " + text.replace(NEW_LINE, '\n  ');
            }
            function staticError(text, obj) {
                return new Error(formatError(text, obj, 'StaticInjectorError'));
            }

            function ÉµÉµdefineInjectable(opts) {
                return {
                    token: opts.token,
                    providedIn: opts.providedIn || null,
                    factory: opts.factory,
                    value: undefined,
                };
            }
            var NG_PROV_DEF = getClosureSafeProperty({ Éµprov: getClosureSafeProperty });
            getClosureSafeProperty({ Éµinj: getClosureSafeProperty });
            var NG_INJECTABLE_DEF = getClosureSafeProperty({ ngInjectableDef: getClosureSafeProperty });
            function getOwnDefinition(type, def) {
                return def && def.token === type ? def : null;
            }
            function getInjectableDef(type) {
                return getOwnDefinition(type, type[NG_PROV_DEF]) ||
                    getOwnDefinition(type, type[NG_INJECTABLE_DEF]);
            }

            var InjectionToken = exports('InjectionToken', /** @class */ (function () {
                function InjectionToken(_desc, options) {
                    this._desc = _desc;
                    this.ngMetadataName = 'InjectionToken';
                    this.Éµprov = undefined;
                    if (typeof options === 'number') {
                        this.__NG_ELEMENT_ID__ = options;
                    }
                    else if (options !== undefined) {
                        this.Éµprov = ÉµÉµdefineInjectable({
                            token: this,
                            providedIn: options.providedIn || 'root',
                            factory: options.factory,
                        });
                    }
                }
                InjectionToken.prototype.toString = function () {
                    return "InjectionToken " + this._desc;
                };
                return InjectionToken;
            }()));
            function createInjectionToken(token) {
                return new InjectionToken(token);
            }

            /**
             * æ³¨å¥å¨æ½è±¡ç±»
             */
            var Injector = exports('Injector', /** @class */ (function () {
                function Injector() {
                }
                return Injector;
            }()));

            var NullInjector = /** @class */ (function () {
                function NullInjector() {
                }
                NullInjector.prototype.get = function (token, notFoundValue) {
                    if (notFoundValue === void 0) { notFoundValue = THROW_IF_NOT_FOUND; }
                    if (notFoundValue === THROW_IF_NOT_FOUND) {
                        var error = new Error("NullInjectorError: No provider for " + stringify(token) + "!");
                        error.name = 'NullInjectorError';
                        throw error;
                    }
                    return notFoundValue;
                };
                return NullInjector;
            }());
            var NULL_INJECTOR = new NullInjector();

            var __forward_ref__ = getClosureSafeProperty({ __forward_ref__: getClosureSafeProperty });
            function resolveForwardRef(type) {
                return isForwardRef(type) ? type() : type;
            }
            function forwardRef(forwardRefFn) {
                forwardRefFn.__forward_ref__ = forwardRef;
                forwardRefFn.toString = function () {
                    return stringify(this());
                };
                return forwardRefFn;
            }
            function isForwardRef(fn) {
                return typeof fn === 'function' && fn.hasOwnProperty(__forward_ref__) &&
                    fn.__forward_ref__ === forwardRef;
            }

            var INJECTOR = exports('INJECTOR', new InjectionToken('INJECTOR', -1));
            var Éµ0 = exports('Éµ0', getClosureSafeProperty);
            var USE_VALUE = exports('USE_VALUE', getClosureSafeProperty({ provide: String, useValue: Éµ0 }));
            var _currentInjector = undefined;
            function setCurrentInjector(injector) {
                var former = _currentInjector;
                _currentInjector = injector;
                return former;
            }
            var StaticInjector = exports('StaticInjector', /** @class */ (function () {
                function StaticInjector(providers, parent, source) {
                    if (parent === void 0) { parent = NULL_INJECTOR; }
                    if (source === void 0) { source = null; }
                    parent = parent ? parent : NULL_INJECTOR;
                    this.parent = parent;
                    this.source = source;
                    var records = this._records = new Map();
                    records.set(Injector, { token: Injector, fn: IDENT, deps: EMPTY, value: this, useNew: false });
                    records.set(INJECTOR, { token: INJECTOR, fn: IDENT, deps: EMPTY, value: this, useNew: false });
                    this.scope = recursivelyProcessProviders(records, providers);
                }
                StaticInjector.prototype.get = function (token, notFoundValue, flags) {
                    if (flags === void 0) { flags = InjectFlags.Default; }
                    var records = this._records;
                    var record = records.get(token);
                    if (record === undefined) {
                        var injectableDef = getInjectableDef(token);
                        if (injectableDef) {
                            var providedIn = injectableDef && injectableDef.providedIn;
                            if (providedIn === 'any' || providedIn != null && providedIn === this.scope) {
                                records.set(token, record = resolveProvider({ provide: token, useFactory: injectableDef.factory, deps: EMPTY }));
                            }
                        }
                        if (record === undefined) {
                            records.set(token, null);
                        }
                    }
                    var lastInjector = setCurrentInjector(this);
                    try {
                        return tryResolveToken(token, record, records, this.parent, notFoundValue, flags);
                    }
                    catch (e) {
                        throw e;
                    }
                    finally {
                        setCurrentInjector(lastInjector);
                    }
                };
                StaticInjector.prototype.toString = function () {
                    var tokens = [];
                    var records = this._records;
                    records.forEach(function (v, token) { return tokens.push(stringify(token)); });
                    return "StaticInjector[" + tokens.join(', ') + "]";
                };
                return StaticInjector;
            }()));
            function multiProviderMixError(token) {
                return staticError('Cannot mix multi providers and regular providers', token);
            }
            var INJECTOR_SCOPE = exports('INJECTOR_SCOPE', new InjectionToken('Set Injector scope.'));
            /**
             * éå½å¤çProvider
             */
            function recursivelyProcessProviders(records, provider) {
                var scope = null;
                if (provider) {
                    provider = resolveForwardRef(provider);
                    if (Array.isArray(provider)) {
                        for (var i = 0; i < provider.length; i++) {
                            scope = recursivelyProcessProviders(records, provider[i]) || scope;
                        }
                    }
                    else if (typeof provider === 'function') {
                        throw staticError('Function/Class not supported', provider);
                    }
                    else if (provider && typeof provider === 'object' && provider.provide) {
                        var token = resolveForwardRef(provider.provide);
                        var resolvedProvider = resolveProvider(provider);
                        // multi
                        if (provider.multi === true) {
                            var multiProvider = records.get(token);
                            if (multiProvider) {
                                if (multiProvider.fn !== MULTI_PROVIDER_FN) {
                                    throw multiProviderMixError(token);
                                }
                            }
                            else {
                                records.set(token, multiProvider = {
                                    token: provider.provide,
                                    deps: [],
                                    useNew: false,
                                    fn: MULTI_PROVIDER_FN,
                                    value: EMPTY
                                });
                            }
                            token = provider;
                            multiProvider.deps.push({ token: token, options: 6 /* Default */ });
                        }
                        var record = records.get(token);
                        if (record && record.fn === MULTI_PROVIDER_FN) {
                            throw multiProviderMixError(token);
                        }
                        if (token === INJECTOR_SCOPE) {
                            scope = resolvedProvider.value;
                        }
                        records.set(token, resolvedProvider);
                    }
                    else {
                        throw staticError('Unexpected provider', provider);
                    }
                }
                return scope;
            }
            function resolveProvider(provider) {
                var deps = computeDeps(provider);
                var fn = IDENT;
                var value = EMPTY;
                var useNew = false;
                var provide = resolveForwardRef(provider.provide);
                if (USE_VALUE in provider) {
                    value = provider.useValue;
                }
                else if (provider.useFactory) {
                    fn = provider.useFactory;
                }
                else if (provider.useExisting) ;
                else if (provider.useClass) {
                    // éæç±»å
                    useNew = true;
                    fn = resolveForwardRef(provider.useClass);
                }
                else if (typeof provide === 'function') {
                    // æé å½æ°
                    useNew = true;
                    fn = provide;
                }
                else {
                    throw staticError('StaticProvider does not have [useValue|useFactory|useExisting|useClass] or [provide] is not newable', provider);
                }
                return { deps: deps, fn: fn, useNew: useNew, value: value };
            }
            /**
             * è®¡ç®ä¾èµ
             */
            function computeDeps(provider) {
                var deps = EMPTY;
                var providerDeps = provider.deps;
                if (providerDeps && providerDeps.length) {
                    deps = [];
                    for (var i = 0; i < providerDeps.length; i++) {
                        var options = 6 /* Default */;
                        var token = resolveForwardRef(providerDeps[i]);
                        deps.push({ token: token, options: options });
                    }
                }
                else if (provider.useExisting) {
                    var token = resolveForwardRef(provider.useExisting);
                    deps = [{ token: token, options: 6 /* Default */ }];
                }
                else if (!providerDeps && !(USE_VALUE in provider)) {
                    // useValue & useExisting are the only ones which are exempt from deps all others need it.
                    throw staticError('\'deps\' required', provider);
                }
                return deps;
            }
            function tryResolveToken(token, record, records, parent, notFoundValue, flags) {
                try {
                    return resolveToken(token, record, records, parent, notFoundValue, flags);
                }
                catch (e) {
                    if (!(e instanceof Error)) {
                        e = new Error(e);
                    }
                    var path = e[NG_TEMP_TOKEN_PATH] = e[NG_TEMP_TOKEN_PATH] || [];
                    path.unshift(token);
                    // æ¸ç©ºå¾ªç¯å¼ç¨çå¼
                    if (record && record.value === CIRCULAR) {
                        record.value = EMPTY;
                    }
                    throw e;
                }
            }
            function resolveToken(token, record, records, parent, notFoundValue, flags) {
                var _a;
                var value;
                if (record && !(flags & InjectFlags.SkipSelf)) {
                    value = record.value;
                    if (value === CIRCULAR) {
                        throw Error(NO_NEW_LINE + 'Circular dependency');
                    }
                    else if (value === EMPTY) {
                        record.value = CIRCULAR;
                        var useNew = record.useNew;
                        var fn = record.fn;
                        var depRecords = record.deps;
                        var deps = EMPTY;
                        if (depRecords.length) {
                            deps = [];
                            for (var i = 0; i < depRecords.length; i++) {
                                var depRecord = depRecords[i];
                                var options = depRecord.options;
                                var childRecord = options & 2 /* CheckSelf */ ? records.get(depRecord.token) : undefined;
                                deps.push(tryResolveToken(depRecord.token, childRecord, records, !childRecord && !(options & 4 /* CheckParent */) ? NULL_INJECTOR : parent, options & 1 /* Optional */ ? null : THROW_IF_NOT_FOUND, InjectFlags.Default));
                            }
                        }
                        record.value = value = useNew ? new ((_a = fn).bind.apply(_a, __spread([void 0], deps)))() : fn.apply(undefined, deps);
                    }
                }
                else if (!(flags & InjectFlags.Self)) {
                    value = parent.get(token, notFoundValue, InjectFlags.Default);
                }
                else if (!(flags & InjectFlags.Optional)) {
                    value = NULL_INJECTOR.get(token, notFoundValue);
                }
                else {
                    value = NULL_INJECTOR.get(token, typeof notFoundValue !== 'undefined' ? notFoundValue : null);
                }
                return value;
            }

            function INJECTOR_IMPL__PRE_R3__(providers, parent, name) {
                return new StaticInjector(providers, parent, name);
            }
            var INJECTOR_IMPL = exports('INJECTOR_IMPL', INJECTOR_IMPL__PRE_R3__);
            function createInjector(options, parent) {
                if (Array.isArray(options)) {
                    return INJECTOR_IMPL(options, parent, '');
                }
                else {
                    return INJECTOR_IMPL(options.providers, options.parent, options.name || '');
                }
            }

            var ANNOTATIONS = exports('ANNOTATIONS', '__annotations__');
            var PARAMETERS = exports('PARAMETERS', '__parameters__');
            var PROP_METADATA = exports('PROP_METADATA', '__prop__metadata__');
            /**
             * @suppress {globalThis}
             */
            function makeDecorator(name, props, parentClass, chainFn, typeFn) {
                var metaCtor = makeMetadataCtor(props);
                function DecoratorFactory() {
                    var _a;
                    var args = [];
                    for (var _i = 0; _i < arguments.length; _i++) {
                        args[_i] = arguments[_i];
                    }
                    if (this instanceof DecoratorFactory) {
                        metaCtor.call.apply(metaCtor, __spread([this], args));
                        return this;
                    }
                    var annotationInstance = new ((_a = DecoratorFactory).bind.apply(_a, __spread([void 0], args)))();
                    var typeDecorator = function createTypeDecorator(cls) {
                        typeFn && typeFn.apply(void 0, __spread([cls], args));
                        // Use of Object.defineProperty is important since it creates non-enumerable property which
                        // prevents the property is copied during subclassing.
                        var annotations = cls.hasOwnProperty(ANNOTATIONS) ?
                            cls[ANNOTATIONS] :
                            Object.defineProperty(cls, ANNOTATIONS, { value: [] })[ANNOTATIONS];
                        annotations.push(annotationInstance);
                        return cls;
                    };
                    if (chainFn) {
                        chainFn(typeDecorator);
                    }
                    return typeDecorator;
                }
                if (parentClass) {
                    DecoratorFactory.prototype = Object.create(parentClass.prototype);
                }
                DecoratorFactory.prototype.ngMetadataName = name;
                DecoratorFactory.annotationCls = DecoratorFactory;
                return DecoratorFactory;
            }
            function makeMetadataCtor(props) {
                return function ctor() {
                    var args = [];
                    for (var _i = 0; _i < arguments.length; _i++) {
                        args[_i] = arguments[_i];
                    }
                    if (props) {
                        var values = props.apply(void 0, __spread(args));
                        // tslint:disable-next-line:forin
                        for (var propName in values) {
                            this[propName] = values[propName];
                        }
                    }
                };
            }
            function makeParamDecorator(name, props, parentClass) {
                var metaCtor = makeMetadataCtor(props);
                function ParamDecoratorFactory() {
                    var _a;
                    var args = [];
                    for (var _i = 0; _i < arguments.length; _i++) {
                        args[_i] = arguments[_i];
                    }
                    if (this instanceof ParamDecoratorFactory) {
                        metaCtor.apply(this, args);
                        return this;
                    }
                    var annotationInstance = new ((_a = ParamDecoratorFactory).bind.apply(_a, __spread([void 0], args)))();
                    ParamDecorator.annotation = annotationInstance;
                    return ParamDecorator;
                    function ParamDecorator(cls, unusedKey, index) {
                        // Use of Object.defineProperty is important since it creates non-enumerable property which
                        // prevents the property is copied during subclassing.
                        var parameters = cls.hasOwnProperty(PARAMETERS) ?
                            cls[PARAMETERS] :
                            Object.defineProperty(cls, PARAMETERS, { value: [] })[PARAMETERS];
                        // there might be gaps if some in between parameters do not have annotations.
                        // we pad with nulls.
                        while (parameters.length <= index) {
                            parameters.push(null);
                        }
                        (parameters[index] = parameters[index] || []).push(annotationInstance);
                        return cls;
                    }
                }
                if (parentClass) {
                    ParamDecoratorFactory.prototype = Object.create(parentClass.prototype);
                }
                ParamDecoratorFactory.prototype.ngMetadataName = name;
                ParamDecoratorFactory.annotationCls = ParamDecoratorFactory;
                return ParamDecoratorFactory;
            }
            function makePropDecorator(name, props, parentClass) {
                var metaCtor = makeMetadataCtor(props);
                function PropDecoratorFactory() {
                    var _a;
                    var args = [];
                    for (var _i = 0; _i < arguments.length; _i++) {
                        args[_i] = arguments[_i];
                    }
                    if (this instanceof PropDecoratorFactory) {
                        metaCtor.apply(this, args);
                        return this;
                    }
                    var decoratorInstance = new ((_a = PropDecoratorFactory).bind.apply(_a, __spread([void 0], args)))();
                    // tslint:disable-next-line:no-shadowed-variable
                    return function PropDecorator(target, name) {
                        var constructor = target.constructor;
                        // Use of Object.defineProperty is important since it creates non-enumerable property which
                        // prevents the property is copied during subclassing.
                        var meta = constructor.hasOwnProperty(PROP_METADATA) ?
                            constructor[PROP_METADATA] :
                            Object.defineProperty(constructor, PROP_METADATA, { value: {} })[PROP_METADATA];
                        meta[name] = meta.hasOwnProperty(name) && meta[name] || [];
                        meta[name].unshift(decoratorInstance);
                    };
                }
                if (parentClass) {
                    PropDecoratorFactory.prototype = Object.create(parentClass.prototype);
                }
                PropDecoratorFactory.prototype.ngMetadataName = name;
                PropDecoratorFactory.annotationCls = PropDecoratorFactory;
                return PropDecoratorFactory;
            }

            /**
             * åæ°æ®è§£æ
             * çº¦æï¼
             * 1ãç±»åè£é¥°å¨ï¼å¨æä¸ªç±»åä¸ï¼æç§ç±»åçè£é¥°å¨ï¼åªä½¿ç¨ä¸æ¬¡ï¼ä¸éå¤æ·»å ï¼
             * 2ãå±æ§è£é¥°å¨ï¼å¨æä¸ªå±æ§ä¸ï¼æç§ç±»åçè£é¥°å¨ï¼åªä½¿ç¨ä¸æ¬¡ï¼ä¸éå¤æ·»å 
             */
            var MetadataUtil = exports('MetadataUtil', /** @class */ (function () {
                function MetadataUtil() {
                }
                // ----------------------------------------
                // ç±»ååæ°æ®
                // ----------------------------------------
                /**
                 * è·åç±»åæ°æ®
                 * è¿åç»æå½¢å¦ï¼
                 * [
                 *   Injectable
                 *   NgViewModel
                 *   NgViewModel
                 * ]
                 */
                MetadataUtil.getClassMetadatas = function (constructor) {
                    var metadatas = constructor[ANNOTATIONS];
                    return metadatas;
                };
                /**
                 * è·åæä¸ªclassä¸çæç§è£é¥°å¨
                 * è¿åç»æï¼NgViewModel
                 */
                MetadataUtil.getClassMetadataByName = function (constructor, metadataName) {
                    var metadata = this.getClassMetadataByNameWithTranslate(constructor, metadataName, null, null);
                    return metadata;
                };
                MetadataUtil.getClassMetadataByNameWithTranslate = function (constructor, metadataName, translateService, keysToTranslate) {
                    var allClassMetadatas = this.getClassMetadatas(constructor);
                    if (!allClassMetadatas) {
                        return null;
                    }
                    var metadata = allClassMetadatas.find(function (classMetadata) {
                        return classMetadata.ngMetadataName === metadataName;
                    });
                    if (metadata && translateService && keysToTranslate) {
                        keysToTranslate.forEach(function (metadataPropKey) {
                            var propertyVariable = metadata[metadataPropKey];
                            if (propertyVariable && propertyVariable.startsWith('{{') && propertyVariable.endsWith('}}')) {
                                var translateKey = propertyVariable.replace('{{', '').replace('}}', '').trim();
                                metadata[metadataPropKey] = translateService.transform(translateKey, null);
                            }
                        });
                    }
                    return metadata;
                };
                // ----------------------------------------
                // å±æ§åæ°æ®
                // ----------------------------------------
                /**
                 * è·åææå±æ§çææåæ°æ®
                 * è¿åæ ¼å¼ï¼
                 * {
                 *   propName1: [ NgDefaultValue, NgMaxLength, NgMinLength],
                 *   propName2: [ NgDefaultValue, NgMaxLength, NgMinLength]
                 * }
                 */
                MetadataUtil.getPropsMetadatas = function (constructor) {
                    var allPropMetadatas = constructor[PROP_METADATA];
                    return allPropMetadatas;
                };
                /**
                 * è·åææå±æ§çæä¸ç±»åçåæ°æ®
                 * å¦æåä¸å±æ§
                 * è¿åç»æï¼
                 * {
                 *    propName1: NgDefaultValue,
                 *    propName2: NgDefaultValue
                 * }
                 */
                MetadataUtil.getPropsMetadatasByName = function (constructor, metadataName) {
                    var metadatas = this.getPropsMetadatasByNameWithTranslate(constructor, metadataName);
                    return metadatas;
                };
                MetadataUtil.getPropsMetadatasByNameWithTranslate = function (constructor, metadataName, translateService, keysToTranslate) {
                    var metadatas = {};
                    // è¯»åæé å½æ°ä¸­å­å¨çç±»å±æ§æ³¨è§£ã
                    var allPropMetadatas = this.getPropsMetadatas(constructor);
                    if (!allPropMetadatas) {
                        return metadatas;
                    }
                    // éåææå±æ§æåæ³¨è§£ä¿¡æ¯ã
                    Object.keys(allPropMetadatas).forEach(function (propName) {
                        // æåå½åå±æ§æ³¨è§£å¯¹è±¡
                        var propMetadatas = allPropMetadatas[propName];
                        // æåæå®ç±»åçæ³¨è§£é¡¹
                        var metadata = propMetadatas.find(function (propMetadata) {
                            return propMetadata.ngMetadataName === metadataName;
                        });
                        if (translateService && keysToTranslate) {
                            keysToTranslate.forEach(function (metadataPropKey) {
                                var propertyVariable = metadata[metadataPropKey];
                                if (propertyVariable && propertyVariable.startsWith('{{') && propertyVariable.endsWith('}}')) {
                                    var translateKey = propertyVariable.replace('{{', '').replace('}}', '').trim();
                                    metadata[metadataPropKey] = translateService.transform(translateKey, null);
                                }
                            });
                        }
                        if (metadata) {
                            metadatas[propName] = metadata;
                        }
                    });
                    return metadatas;
                };
                /**
                 * è·åæä¸ªå±æ§çææåæ°æ®
                 * è¿åæ ¼å¼ï¼[ NgDefaultValue, NgMaxLength, NgMinLength]
                 */
                MetadataUtil.getPropMetadatasByName = function (constructor, propName) {
                    // æä¸å®ç°
                    return null;
                };
                /**
                 * è·åæä¸ªå±æ§çæç§åæ°æ®
                 * è¿åæ ¼å¼ï¼NgDefaultValue
                 */
                MetadataUtil.getPropMetadataByName = function (constructor, propName, metadataName) {
                    // æä¸å®ç°
                    return null;
                };
                return MetadataUtil;
            }()));

            /**
             * HttpMethods
             */
            var HttpMethods = exports('HttpMethods', /** @class */ (function () {
                function HttpMethods() {
                }
                HttpMethods.GET = 'GET';
                HttpMethods.DELETE = 'DELETE';
                HttpMethods.HEAD = 'HEAD';
                HttpMethods.OPTIONS = 'OPTIONS';
                HttpMethods.POST = 'POST';
                HttpMethods.PUT = 'PUT';
                HttpMethods.PATCH = 'PATCH';
                HttpMethods.LINK = 'LINK';
                HttpMethods.UNLINK = 'UNLINK';
                return HttpMethods;
            }()));

            var HttpUtil = exports('HttpUtil', /** @class */ (function () {
                function HttpUtil() {
                }
                /**
                 * è¿½å Header
                 */
                HttpUtil.appendHeader = function (headers, key, value) {
                    var _a;
                    headers = Object.assign({}, headers, (_a = {}, _a[key] = value, _a));
                    return headers;
                };
                /**
                 * åRequestConfigä¸­è¿½å body
                 */
                HttpUtil.appendBodyToRequestConfig = function (body, requestConfig) {
                    if (!requestConfig) {
                        requestConfig = {};
                    }
                    requestConfig = Object.assign({}, requestConfig, { body: body });
                    return requestConfig;
                };
                /**
                 * æé AxiosReqeustConfig
                 */
                HttpUtil.buildAxiosRequestConfig = function (method, url, requestConfig) {
                    requestConfig = requestConfig || {};
                    var axiosRequestConfig = {
                        url: url,
                        method: method,
                        params: requestConfig.params || null,
                        headers: requestConfig.headers || null,
                        responseType: requestConfig.responseType || 'json',
                        data: requestConfig.body || null
                    };
                    return axiosRequestConfig;
                };
                /**
                 * æé Httpååºä¿¡æ¯
                 */
                HttpUtil.buildHttpResponse = function (axiosResponse) {
                    var httpResponse = {
                        body: axiosResponse.data,
                        headers: axiosResponse.headers,
                        status: axiosResponse.status,
                        statusText: axiosResponse.statusText
                    };
                    return httpResponse;
                };
                return HttpUtil;
            }()));

            /**
             * HttpClient
             */
            var HttpClient = exports('HttpClient', /** @class */ (function () {
                /**
                 * æé å½æ°
                 */
                function HttpClient() {
                    this.axiosInstance = axios.create();
                }
                /**
                 * åéGETè¯·æ±
                 */
                HttpClient.prototype.get = function (url, requestConfig) {
                    return this.request('GET', url, requestConfig);
                };
                /**
                 * åéPOSTè¯·æ±
                 */
                HttpClient.prototype.post = function (url, body, requestConfig) {
                    requestConfig = HttpUtil.appendBodyToRequestConfig(body, requestConfig);
                    return this.request('POST', url, requestConfig);
                };
                /**
                 * åéPUTè¯·æ±
                 */
                HttpClient.prototype.put = function (url, body, requestConfig) {
                    requestConfig = HttpUtil.appendBodyToRequestConfig(body, requestConfig);
                    return this.request('PUT', url, requestConfig);
                };
                /**
                 * åéPATCHè¯·æ±
                 */
                HttpClient.prototype.patch = function (url, body, requestConfig) {
                    requestConfig = HttpUtil.appendBodyToRequestConfig(body, requestConfig);
                    return this.request('PATCH', url, requestConfig);
                };
                /**
                 * åéDELETEè¯·æ±
                 */
                HttpClient.prototype.delete = function (url, requestConfig) {
                    return this.request('DELETE', url, requestConfig);
                };
                /**
                 * åéè¯·æ±
                 */
                HttpClient.prototype.request = function (method, url, requestConfig) {
                    var _this = this;
                    var request$ = of(true).pipe(switchMap(function () {
                        var axiosRequestConfig = HttpUtil.buildAxiosRequestConfig(method, url, requestConfig);
                        return from(_this.axiosInstance.request(axiosRequestConfig));
                    }));
                    return request$.pipe(map(function (axiosResponse) {
                        var httpResponse = HttpUtil.buildHttpResponse(axiosResponse);
                        return requestConfig.observe === 'response' ? httpResponse : axiosResponse.data;
                    }));
                };
                return HttpClient;
            }()));

            var HTTP_PROVIDERS = exports('HTTP_PROVIDERS', [
                { provide: HttpClient, useClass: HttpClient, deps: [] }
            ]);

            /**
             * åæ´è®°å½
             */
            var Modification = exports('Modification', /** @class */ (function () {
                /**
                 * æé å½æ°
                 * @param value æ°å¼
                 * @param modifyType åæ´ç±»å
                 * @param path åæ´è·¯å¾
                 * @param preValue æ§å¼
                 */
                function Modification(value, modifyType, path, preValue) {
                    this.type = modifyType;
                    this.value = value;
                    this.preValue = preValue;
                    this.path = path;
                }
                return Modification;
            }()));
            /**
             * åæ´ç±»å
             */
            var ModifyType;
            (function (ModifyType) {
                /**
                 * æ·»å 
                 */
                ModifyType["Add"] = "ADD";
                /**
                 * å é¤
                 */
                ModifyType["Remove"] = "REMOVE";
                /**
                 * ä¿®æ¹
                 */
                ModifyType["ValueChange"] = "VALUE_CHANGE";
                /**
                 * å è½½
                 */
                ModifyType["Load"] = "LOAD";
                /**
                 * æªæ¹å
                 */
                ModifyType["UnChanged"] = "UNCHANGED";
                /**
                 * åé¡µä¿¡æ¯åæ´
                 */
                ModifyType["PaginationInfoChange"] = "PAGINATION_INFO_CHANGE";
            })(ModifyType || (ModifyType = exports('ModifyType', {})));

            /*
             * @Author: Lucus, Witt
             * @Date: 2018-10-30 15:53:59
             * @Last Modified by: Witt
             * @Last Modified time: 2018-11-08 17:25:08
             */
            function isEqual(value, other) {
                return JSON.stringify(value) === JSON.stringify(other);
            }
            /**
             * å®ä½æ°æ®åæ´é
             */
            var ChangeSet = exports('ChangeSet', /** @class */ (function () {
                function ChangeSet() {
                    /**
                     * åæ´éå
                     */
                    this.modifications = [];
                }
                Object.defineProperty(ChangeSet.prototype, "changes", {
                    /**
                     *  è·åææçåæ´è®°å½
                     */
                    get: function () {
                        return this.modifications;
                    },
                    enumerable: true,
                    configurable: true
                });
                /**
                 * å°åæ´éæ·»å å°éåä¸­
                 * ### ä½¿ç¨ç¤ºä¾
                 * ```
                 * const changeSet = new ChangeSet();
                 * const modify = new Modification('newValue', ModifyType.ValueChange, [1, 'title'], 'oldValue');
                 * changeSet.append(modify)
                 * ```
                 * @param changeItem åæ´æ°æ®
                 */
                ChangeSet.prototype.append = function (modification) {
                    switch (modification.type) {
                        case ModifyType.ValueChange:
                            this.appendValueChangeModification(modification);
                            break;
                        case ModifyType.Add:
                            this.appendAddModification(modification);
                            break;
                        case ModifyType.Remove:
                            this.appendRemoveModification(modification);
                            break;
                        case ModifyType.Load:
                            break;
                        default:
                            throw new Error('ä¸æ¯ææ­¤ç±»åçåæ´');
                    }
                };
                /**
                 * æ·»å å¼åååæ´
                 */
                ChangeSet.prototype.appendValueChangeModification = function (modification) {
                    var value = modification.value;
                    var existedModification = this.findModifyItemsPath(modification.path);
                    if (existedModification) {
                        // å¦æå­å¨ç¸åè·¯å¾çValueChangeç±»åçåæ´éï¼åæ´æ°å¼ï¼
                        existedModification.value = value;
                    }
                    else {
                        var existedAddModification = this.findNewAddItemsPath(modification.path);
                        if (existedAddModification) {
                            // @todoï¼
                            // 1ãæ­¤å¤é»è¾æé®é¢ï¼valueæ¯ä¸ªå­ç¬¦ä¸²ï¼ä¸è½ç´æ¥assignï¼
                            // 2ãä¹æä»¥æ²¡æåºç°é®é¢ï¼æ¯å ä¸ºé½æ¯æå¡å¨ç«¯æ°å¢ï¼æ°å¢åï¼å®¢æ·ç«¯æ¸ç©ºäºææåæ´ã
                            // å¦æå­å¨æ¶µçè¯¥ValueChangeåæ´çAddåæ´ï¼åæ´æ°Addåæ´å¯¹åºçæ°æ®ï¼
                            existedAddModification.value = Object.assign({}, existedAddModification.value, value);
                        }
                        else {
                            // å¶ä»æåµï¼æ°å¢ä¸æ¡ValueChangeåæ´ã
                            this.modifications.push(modification);
                        }
                    }
                };
                /**
                 * æ·»å æ°å¢åæ´
                 */
                ChangeSet.prototype.appendAddModification = function (modification) {
                    var value = modification.value;
                    var existedModification = this.findNewAddItemsPath(modification.path);
                    if (existedModification) {
                        // 1ãå¦æå·²ç»å­å¨ç¸åè·¯å¾çAddåæ´ï¼ååå¹¶Valueã
                        existedModification.value = existedModification.value.concat(value);
                    }
                    else {
                        // 2ãå¦ææ²¡æï¼åæ°å¢ä¸æ¡Addåæ´ã
                        this.modifications.push(modification);
                    }
                };
                /**
                 * æ·»å å é¤åæ´
                 */
                ChangeSet.prototype.appendRemoveModification = function (modification) {
                    var path = modification.path;
                    var primaryKey = Object.keys(modification.value)[0];
                    var primaryKeyValue = modification.value[primaryKey];
                    // 1ãå­å¨ç¸åpathçæ°å¢åæ´ï¼ç§»é¤æ°å¢åæ´ï¼ä¸éè¦æ·»å å é¤åæ´ï¼
                    // @todoï¼å¾éæï¼1ãåªèèäºä¸»ä»æåµï¼2ãä¸´æ¶ç¨å¤éå¾ªç¯å®ç°ï¼
                    this.modifications.forEach(function (addModification) {
                        // åªå¤çæ°å¢åæ´
                        if (addModification.type !== ModifyType.Add) {
                            return;
                        }
                        // @todo åªèèä¸»ä»ç»æï¼åæ·±çå±æ¬¡æä¸èè
                        if (isEqual(addModification.path, path) === false) {
                            return;
                        }
                        // éåæ°å¢æ°å¢åæ´çvalueï¼valueæ¯ä¸ªæ°ç»ï¼ï¼ç§»é¤ç¸å¹éçæ°å¢å é¤
                        addModification.value = addModification.value.filter(function (addDataItem) {
                            return addDataItem[primaryKey] !== primaryKeyValue;
                        });
                    });
                    // 2ãç§»é¤å¯¹åºçä¿®æ¹åæ´
                    var fullRemovePath = path.concat(primaryKey + ":" + primaryKeyValue);
                    this.modifications = this.modifications.filter(function (valueModification) {
                        if (valueModification.type !== ModifyType.ValueChange) {
                            return true;
                        }
                        var valueChangePath = Array.from(valueModification.path);
                        valueChangePath.pop();
                        // è·¯å¾ç¸åè¿è¡ç§»é¤
                        var isToRemove = isEqual(valueChangePath, fullRemovePath);
                        return !isToRemove;
                    });
                    // åå é¤ä¸çº§å é¤åæ´ï¼åæå¥
                    // ä¸»è¦éå¯¹ä»ä»è¡¨å é¤ä¹åï¼åå é¤å­è¡¨æ¶ï¼æ ¹å®ä½ä¸è¿å­å¨ä»ä»è¡¨å é¤åæ´çåºæ¯
                    this.removeDescendantRemoveModifications(modification);
                    this.modifications.push(modification);
                };
                /**
                 * æ¸ç©ºåæ´éå
                 */
                ChangeSet.prototype.clear = function () {
                    this.modifications = [];
                };
                /**
                 * æ ¹æ®pathè·åAddç±»åçåæ´è®°å½
                 * @param path åæ´è·¯å¾
                 */
                ChangeSet.prototype.findNewAddItemsPath = function (path) {
                    return this.modifications.find(function (value, index) {
                        return isEqual(path, value.path) && value.type === ModifyType.Add;
                    });
                };
                /**
                 * æ ¹æ®pathè·åValueChangeç±»åçåæ´è®°å½
                 * @param path åæ´è·¯å¾
                 */
                ChangeSet.prototype.findModifyItemsPath = function (path) {
                    return this.modifications.find(function (value, index) {
                        return isEqual(path, value.path) && value.type === ModifyType.ValueChange;
                    });
                };
                /**
                 * å é¤åä»£ï¼åæ¬èªå·±ï¼ææçå é¤åæ´
                 * @todoï¼ä¸´æ¶åä¸ä¸ªæå°åä¿®æ¹
                 */
                ChangeSet.prototype.removeDescendantRemoveModifications = function (parentRemoveModification) {
                    var _this = this;
                    var parentPathWithId = this.createRemovePathWithId(parentRemoveModification);
                    // å é¤åä»£ä¿®æ¹åæ´
                    this.modifications = this.modifications.filter(function (modification) {
                        if (modification.type !== ModifyType.Remove) {
                            return true;
                        }
                        var descendantPathWithId = _this.createRemovePathWithId(modification);
                        var isDescendant = _this.isDescendantPath(parentPathWithId, descendantPathWithId);
                        return !isDescendant;
                    });
                };
                /**
                 * è·åå é¤è·¯å¾çå®æ´æ ¼å¼
                 * @summary
                 * 1ãç®åå é¤åæ´çè·¯å¾æ è®°å°ç¶éåï¼
                 * 2ãä¸ºäºæ¹ä¾¿æ¯è¾ï¼å°è¢«å é¤çæ°æ®idå å¥å°è·¯å¾ä¸­
                 */
                ChangeSet.prototype.createRemovePathWithId = function (modification) {
                    var path = modification.path;
                    var primaryKey = Object.keys(modification.value)[0];
                    var primaryKeyValue = modification.value[primaryKey];
                    var pathWithId = path.concat([primaryKey + ":" + primaryKeyValue]);
                    return pathWithId;
                };
                /**
                 * å¤æ­æ¯å¦æ¯åä»£èç¹è·¯å¾
                 * @param parentPath ç¶èç¹è·¯å¾
                 * @param descendantPath åä»£èç¹
                 */
                ChangeSet.prototype.isDescendantPath = function (parentPath, descendantPath) {
                    if (parentPath.length > descendantPath.length) {
                        return false;
                    }
                    var isDescendantPath = true;
                    parentPath.forEach(function (parentPathItem, parentPathItemIndex) {
                        if (parentPathItem !== descendantPath[parentPathItemIndex]) {
                            isDescendantPath = false;
                            return;
                        }
                    });
                    return isDescendantPath;
                };
                return ChangeSet;
            }()));

            /*
             * @Author: Witt
             * @Date: 2018-12-27 09:25:38
             * @Last Modified by: Witt
             * @Last Modified time: 2018-12-27 09:39:10
             */
            /**
             * è·¯å¾ç±»å
             */
            var DataPathNodeType;
            (function (DataPathNodeType) {
                /**
                 * æ è®°è¯¥èç¹æ¯ä¸ä¸ªå®ä½ä¸»é®å¼ï¼ç¨æ¥å¨åè¡¨ä¸å®ä½ä¸ä¸ªå®ä½
                 */
                DataPathNodeType["DataId"] = "DataId";
                /**
                 * æ è®°è¯¥èç¹æ¯ä¸ä¸ªå±æ§åï¼ç¨æ¥å¨å¯¹è±¡ä¸å®ä½ä¸ä¸ªå±æ§
                 */
                DataPathNodeType["PropName"] = "PropName";
            })(DataPathNodeType || (DataPathNodeType = exports('DataPathNodeType', {})));
            /**
             * è·¯å¾èç¹
             */
            var DataPathNode = exports('DataPathNode', /** @class */ (function () {
                /**
                 * æé å½æ°
                 */
                function DataPathNode(type, data) {
                    this.type = type;
                    this.value = data;
                    this.prev = null;
                    this.next = null;
                }
                return DataPathNode;
            }()));

            /*
             * @Author: Witt
             * @Date: 2018-12-27 09:26:41
             * @Last Modified by: Witt
             * @Last Modified time: 2019-01-15 22:00:45
             */
            /**
             * åæ´è·¯å¾ï¼ç®ååååè¡¨ï¼
             */
            var DataPath = exports('DataPath', /** @class */ (function () {
                /**
                 * æé å½æ°
                 */
                function DataPath() {
                    this.head = new DataPathNode(null, null);
                    this.length = 0;
                }
                /**
                 * æ·»å ä¸ä¸ªèç¹å°å¤´é¨
                 */
                DataPath.prototype.unshift = function (type, data) {
                    var newNode = new DataPathNode(type, data);
                    newNode.next = this.head.next;
                    newNode.prev = this.head;
                    this.head.next = newNode;
                    if (newNode.next) {
                        newNode.next.prev = newNode;
                    }
                    this.length++;
                };
                /**
                 * å¨é¾è¡¨æåè¿½å ä¸ä¸ªèç¹
                 */
                DataPath.prototype.push = function (type, data) {
                    var tailNode = this.getTail();
                    var newNode = new DataPathNode(type, data);
                    tailNode.next = newNode;
                    this.length++;
                };
                /**
                 * è·åé¾è¡¨å°¾é¨èç¹
                 */
                DataPath.prototype.getTail = function () {
                    var lastNode = this.head;
                    while (lastNode.next) {
                        lastNode = lastNode.next;
                    }
                    return lastNode;
                };
                /**
                 * è½¬æ¢ä¸ºæ°ç»æ ¼å¼
                 */
                DataPath.prototype.toArray = function () {
                    var pathArray = [];
                    var currentNode = this.head.next;
                    while (currentNode) {
                        pathArray.push(currentNode.type + ":" + currentNode.value);
                        currentNode = currentNode.next;
                    }
                    return pathArray;
                };
                /**
                 * è½¬æ¢ä¸ºå­ç¬¦ä¸²æ ¼å¼
                 */
                DataPath.prototype.toString = function () {
                    var pathArray = this.toArray();
                    var pathString = pathArray.join(', ');
                    return "[" + pathString + "]";
                };
                /**
                 * æ·è´
                 */
                DataPath.prototype.clone = function () {
                    var newDataPath = new DataPath();
                    var curDataNode = this.head.next;
                    while (curDataNode) {
                        newDataPath.push(curDataNode.type, curDataNode.value);
                        curDataNode = curDataNode.next;
                    }
                    return newDataPath;
                };
                return DataPath;
            }()));

            /*
             * @Author: Witt
             * @Date: 2019-08-14 14:11:51
             * @Last Modified by: Witt
             * @Last Modified time: 2019-08-14 16:11:51
             */
            /**
             * å®ä½å±æ§åç»
             */
            var DataPropGroup;
            (function (DataPropGroup) {
                /**
                 * ç®åç±»å
                 */
                DataPropGroup["Primitive"] = "Primitive";
                /**
                 * å®ä½ç±»å
                 */
                DataPropGroup["Object"] = "Object";
                /**
                 * å¨æå®ä½ç±»å
                 */
                DataPropGroup["Dynamic"] = "Dynamic";
                /**
                 * åè¡¨ç±»å
                 */
                DataPropGroup["List"] = "List";
            })(DataPropGroup || (DataPropGroup = exports('DataPropGroup', {})));
            /**
             * å®ä½å±æ§ä¿¡æ¯
             */
            var DataPropInfo = exports('DataPropInfo', /** @class */ (function () {
                function DataPropInfo() {
                }
                return DataPropInfo;
            }()));

            /**
             * åæ°æ®åç§°
             */
            var PRIMITIVE_PROP_META = exports('PRIMITIVE_PROP_META', 'PrimitivePropMeta');
            /**
             * ãç®åå±æ§è£é¥°å¨å·¥åãçå·¥å
             */
            function makePrimitivePropMetaDecorator(options) {
                var metadata = {
                    primary: false,
                    foreign: false
                };
                if (options) {
                    var paramType = typeof options;
                    switch (paramType) {
                        case 'boolean':
                            metadata.primary = Boolean(options);
                            break;
                        case 'string':
                            metadata.dataField = String(options);
                            break;
                        case 'object':
                            metadata = Object.assign(metadata, options);
                            break;
                    }
                }
                return metadata;
            }
            /**
             * ç®åå±æ§è£é¥°å¨å·¥å
             */
            var PrimitivePropMeta = exports('PrimitivePropMeta', makePropDecorator(PRIMITIVE_PROP_META, makePrimitivePropMetaDecorator));

            var StringUtil = exports('StringUtil', /** @class */ (function () {
                function StringUtil() {
                }
                /**
                   * å­ç¬¦ä¸²æ ¼å¼å
                   */
                StringUtil.format = function (value, options) {
                    return value.toString();
                };
                return StringUtil;
            }()));

            var NumberUtil = exports('NumberUtil', /** @class */ (function () {
                function NumberUtil() {
                }
                /**
                   * æ°å­æ ¼å¼å
                   * {
                   *   precision: 2,
                   *   decimal: true,
                   *   thousand: ','
                   *   prefix: '',
                   *   suffix: ''
                   * }
                   */
                NumberUtil.format = function (value, options) {
                    // åæ°å¤ç
                    var decimals = (options.precision || options.precision === 0) ? options.precision : 2;
                    var decimalPoint = options.decimal || '.';
                    var thousandsSep = options.thousand || '';
                    var prefix = options.prefix || '';
                    var suffix = options.suffix || '';
                    var prefixType = options.prefixType;
                    if (prefixType == "dynamic" && options.prefix) {
                        // è¡¨ç¤ºåç¼ä¸ºä¸ä¸ªå½æ°  é£ä¹æ§è¡å½æ°å®ä¹
                        var prefixFunc = new Function("return " + options.prefix);
                        prefix = prefixFunc()(options.sourceData);
                    }
                    value = (value + '').replace(/[^0-9+-Ee.]/g, '');
                    var s;
                    // å¤çç²¾åº¦
                    var toFixedFix = function (n, prec) {
                        var k = Math.pow(10, prec);
                        return '' + parseFloat(Math.round(parseFloat((n * k).toFixed(prec * 2))).toFixed(prec * 2)) / k;
                    };
                    s = ((decimals || decimals === 0) ? toFixedFix(value, decimals) : '' + Math.round(value)).split('.');
                    // å¤çååä½
                    if (thousandsSep) {
                        var pattern = /(-?\d+)(\d{3})/;
                        while (pattern.test(s[0])) {
                            s[0] = s[0].replace(pattern, "$1" + thousandsSep + "$2");
                        }
                        if ((s[1] || '').length < decimals) {
                            s[1] = s[1] || '';
                            s[1] += new Array(decimals - s[1].length + 1).join('0');
                        }
                    }
                    var formatedValue = s.join(decimalPoint);
                    formatedValue = "" + prefix + formatedValue + suffix;
                    return formatedValue;
                };
                return NumberUtil;
            }()));

            /**
             * å¸å°å·¥å·ç±»
             */
            var BoolUtil = exports('BoolUtil', /** @class */ (function () {
                function BoolUtil() {
                }
                /**
                 * å¸å°å¼æ ¼å¼å
                */
                BoolUtil.format = function (value, options) {
                    if (value === true) {
                        return 'æ¯';
                    }
                    else {
                        return 'å¦';
                    }
                };
                return BoolUtil;
            }()));

            var EnumUtil = exports('EnumUtil', /** @class */ (function () {
                function EnumUtil() {
                }
                /**
                 * æä¸¾æ ¼å¼å
                 * {
                 *  enumData: [
                 *    {value: 'value1', name: 'name1'},
                 *    {value: 'value2', name: 'name2'}
                 *  ]
                 * }
                 */
                EnumUtil.format = function (value, options) {
                    var enumOptions = options.enumData;
                    var targetEnumOption = enumOptions.find(function (enumOption) {
                        return enumOption.value === value;
                    });
                    if (!targetEnumOption) {
                        console.error("\u627E\u4E0D\u5230" + value + "\u5BF9\u5E94\u7684\u679A\u4E3E\u9009\u9879");
                        return value;
                    }
                    return targetEnumOption.name;
                };
                return EnumUtil;
            }()));

            dayjs.locale('zh-cn');
            /**
             * æ¥æå¤çç±»
             */
            var DateUtil = exports('DateUtil', /** @class */ (function () {
                function DateUtil() {
                }
                /**
                 * å°æ¥æï¼ææ¥æå­ç¬¦ä¸²ï¼è½¬æ¢ä¸ºå®æ´ççISOæ ¼å¼çå­ç¬¦ä¸²
                 */
                DateUtil.formatISO = function (dateOrDateString) {
                    if (this.isEmptyDateOrDateString(dateOrDateString) === true) {
                        return this.emptyISODateTimeString;
                    }
                    var dateObj = this.parse(dateOrDateString);
                    return format(dateObj, this.defaultISOFormat);
                };
                /**
                 * å°æ¥æï¼ææ¥æå­ç¬¦ä¸²ï¼è½¬æ¢ä¸ºæå®æ ¼å¼çå­ç¬¦ä¸²
                 * @param dateOrDateString æ¥æå¯¹è±¡æç¬¦åISO8601è§èçæ¥æå­ç¬¦ä¸²
                 * @param dateFormat æ¥ææ ¼å¼å­ç¬¦ä¸²
                 */
                DateUtil.format = function (dateOrDateString, dateFormat) {
                    if (this.isEmptyDateOrDateString(dateOrDateString) === true) {
                        return this.emptyISODateTimeString;
                    }
                    var dateObj = this.parse(dateOrDateString);
                    dateFormat = dateFormat ? dateFormat : this.defaultDisplayFormat;
                    return format(dateObj, dateFormat);
                };
                DateUtil.dateShow = function (dateOrDateString, type) {
                    if (this.isEmptyDateOrDateString(dateOrDateString) === true) {
                        return this.emptyISODateTimeString;
                    }
                    if (!type || "" === type) {
                        return;
                    }
                    return this[type] && this[type](dateOrDateString);
                };
                DateUtil.dateOperation = function (dateOrDateString, options) {
                    if (this.isEmptyDateOrDateString(dateOrDateString) === true) {
                        return this.emptyISODateTimeString;
                    }
                    var _a = options.type, type = _a === void 0 ? "" : _a, option = options.option;
                    if (!type || "" === type) {
                        return;
                    }
                    if ('isSame' === type) {
                        return this[type] && this[type](dateOrDateString, options['targetDate'], options['granularity']);
                    }
                    if ('isBefore' === type) {
                        return this[type] && this[type](dateOrDateString, options['targetDate'], options['granularity']);
                    }
                    if ('isAfter' === type) {
                        return this[type] && this[type](dateOrDateString, options['targetDate'], options['granularity']);
                    }
                    if ('isBetween' === type) {
                        return this[type] && this[type](dateOrDateString, options['targetDate'], options['targetDate2'], options['granularity'], options['contains']);
                    }
                    if (!option) {
                        return this[type] && this[type](dateOrDateString);
                    }
                    return this[type] && this[type](dateOrDateString, option);
                };
                DateUtil.relativeTime = function (dateOrDateString, option) {
                    dayjs.extend(relativeTime);
                    var dateObj = dayjs(dateOrDateString);
                    if (!option) {
                        return dayjs(dateObj).fromNow();
                    }
                    return dayjs(dateObj).fromNow(option);
                };
                DateUtil.isToday = function (dateOrDateString) {
                    var todayDate = new Date();
                    var dateObj = dayjs(dateOrDateString);
                    return this.isSame(dateObj, todayDate, 'date');
                };
                DateUtil.calendar = function (dateOrDateString, option) {
                    var dateObj = dayjs(dateOrDateString);
                    dayjs.extend(calendar);
                    if (option) {
                        return dayjs().calendar(dateObj, __assign({}, option));
                    }
                    return dayjs().calendar(dateObj, {
                        sameDay: '[ä»å¤©] HH:mm',
                        nextDay: '[æå¤©] HH:mm',
                        lastDay: '[æ¨å¤©] HH:mm',
                        sameElse: 'YYYY-MM-DD'
                    });
                };
                /**
                 * åå»ºæ¥æ
                 * @param dateOrDateString æ¥æå¯¹è±¡æç¬¦åISO8601è§èçæ¥æå­ç¬¦ä¸²
                 */
                DateUtil.parse = function (dateOrDateString) {
                    if (this.isEmptyDateOrDateString(dateOrDateString) === true) {
                        return null;
                    }
                    if (this.isDate(dateOrDateString) === true) {
                        return dateOrDateString;
                    }
                    return parseISO(dateOrDateString);
                };
                /**
                 * æ¯å¦æ¯æ¥æå¯¹è±¡
                 */
                DateUtil.isDate = function (date) {
                    return isDate(date);
                };
                /**
                 * æ¯å¦æ¯ç©ºæ¥ææèç©ºæ¥æå­ç¬¦ä¸²
                 * @param dateOrDateString æ¥æææ¥æå­ç¬¦ä¸²
                 */
                DateUtil.isEmptyDateOrDateString = function (dateOrDateString) {
                    if (this.isDate(dateOrDateString) === true) {
                        return this.isEmptyDate(dateOrDateString);
                    }
                    return this.isEmptyDateString(dateOrDateString);
                };
                /**
                 * æ¯å¦ä¸ºç©ºæ¥æå­ç¬¦ä¸²
                 * @param date æ¥æå¯¹è±¡
                 */
                DateUtil.isEmptyDate = function (date) {
                    if (!date) {
                        return true;
                    }
                    return false;
                };
                /**
                 * æ¯å¦æ¯ç©ºæ¥æå­ç¬¦ä¸²
                 * @param dateString æ¥æå­ç¬¦ä¸²
                 */
                DateUtil.isEmptyDateString = function (dateString) {
                    if (!dateString || dateString.startsWith('0001-01-01') === true) {
                        return true;
                    }
                    return false;
                };
                /**
                 * ä¸¤ä¸ªæ¥ææ¯å¦ç¸ç­
                 * @param dateOrDateString1 æ¥æå¯¹è±¡æå­ç¬¦ä¸²
                 * @param dateOrDateString1 æ¥æå¯¹è±¡æå­ç¬¦ä¸²
                 * @return ç¸ç­è¿åtrueï¼å¦åè¿åfalse
                 */
                DateUtil.isEqual = function (dateOrDateString1, dateOrDateString2) {
                    var dateObj1 = this.parse(dateOrDateString1);
                    var dateObj2 = this.parse(dateOrDateString2);
                    if (dateObj1 === dateObj2) {
                        return true;
                    }
                    return isEqual$1(dateObj1, dateObj2);
                };
                /**
                 * ä¸¤ä¸ªæ¥ææ¯å¦ç¸ç­
                 * @param dateOrDateString1 æ¥æå¯¹è±¡æå­ç¬¦ä¸²
                 * @param dateOrDateString1 æ¥æå¯¹è±¡æå­ç¬¦ä¸²
                 * @return è¿å-1ã0ã1
                 */
                DateUtil.compare = function (dateOrDateString1, dateOrDateString2) {
                    var dateObj1 = this.parse(dateOrDateString1);
                    var dateObj2 = this.parse(dateOrDateString2);
                    if (this.isEqual(dateObj1, dateObj2) === true) {
                        return 0;
                    }
                    // å¤çè§£æåä¸ºnullçåºæ¯ï¼nullæ¯æææææ¥æå°
                    if (!dateObj1 && this.isDate(dateObj2) === true) {
                        return -1;
                    }
                    if (!dateObj2 && this.isDate(dateObj1) === true) {
                        return 1;
                    }
                    return compareAsc(dateObj1, dateObj2);
                };
                /**
                 *
                 * @param currentDate å½åæ¥æ
                 * @param targetDate ç®æ æ¥æ
                 * @param type æ¯è¾ç±»å date	D	å¤©00:00 day	d	ææ00:00 month	M	æç¬¬ä¸å¤©00:00 year	y	1æ1æ¥00ç¹ week	w	å¨ç¬¬ä¸å¤©00:00hour	h	00:00:00minute	m	00:00second	s	00millisecond	ms	0
                 * @returns
                 */
                DateUtil.isSame = function (currentDate, targetDate, type) {
                    if (type) {
                        return dayjs(currentDate).isSame(dayjs(targetDate), type);
                    }
                    return dayjs(currentDate).isSame(dayjs(targetDate));
                };
                /**
                 *
                 * @param currentDate å½åæ¥æ
                 * @param targetDate ç®æ æ¥æ
                 * @returns boolean
                 */
                DateUtil.isBefore = function (currentDate, targetDate, type) {
                    if (type) {
                        return dayjs(currentDate).isBefore(dayjs(targetDate), type);
                    }
                    return dayjs(currentDate).isBefore(dayjs(targetDate));
                };
                /**
               *
               * @param currentDate å½åæ¥æ
               * @param targetDate ç®æ æ¥æ
               * @returns boolean
               */
                DateUtil.isAfter = function (currentDate, targetDate, type) {
                    if (type) {
                        return dayjs(currentDate).isAfter(dayjs(targetDate), type);
                    }
                    return dayjs(currentDate).isAfter(dayjs(targetDate));
                };
                /**
                 *
                 * @param currentDate
                 * @param targetDate1
                 * @param targetDate2
                 * @returns
                 */
                DateUtil.isBetween = function (currentDate, targetDate1, targetDate2, type, contains) {
                    dayjs.extend(isBetween);
                    if (type) {
                        return dayjs(currentDate).isBetween(dayjs(targetDate1), dayjs(targetDate2), type, contains);
                    }
                    return dayjs(currentDate).isBetween(dayjs(targetDate1), dayjs(targetDate2), null, contains);
                };
                /**
                 * ç©ºæ¥æå­ç¬¦ä¸²ï¼Nçï¼
                 * @todoï¼å¼å®¹æå¡å¨ç«¯ï¼ä¸åºè¯¥å¨devkitä½ç°è¿ç§å¼å®¹ï¼å¾ç§»é¤
                 */
                // static emptyDateTimeString = '0001-01-01T00:00:00';
                DateUtil.emptyDateTimeString = null;
                /**
                 * é»è®¤ç©ºæ¥æå­ç¬¦ä¸²ï¼ISOæ åæ ¼å¼ï¼
                 */
                // static emptyISODateTimeString = '0001-01-01T00:00:00+00:00';
                DateUtil.emptyISODateTimeString = null;
                /**
                 * é»è®¤æ¥æå¬æ ¼å¼
                 */
                DateUtil.defaultISOFormat = "yyyy-MM-dd'T'HH:mm:ssxxx";
                DateUtil.defaultDisplayFormat = 'yyyy-MM-dd HH:mm:ss';
                DateUtil.defaultDateFormat = 'yyyy-MM-dd';
                DateUtil.defaultTimeFormat = 'HH:mm:ss';
                return DateUtil;
            }()));

            var ArrayUtil = exports('ArrayUtil', /** @class */ (function () {
                function ArrayUtil() {
                }
                /**
                 * ä»æ°ç»ä¸­å é¤ä¸é¡¹
                 */
                ArrayUtil.remove = function (arr, itemToRemove) {
                    var indexToRemove = arr.findIndex(function (item) {
                        return item === itemToRemove;
                    });
                    this.removeByIndex(arr, indexToRemove);
                };
                /**
                 * ä»æ°ç»ä¸­å é¤indexToRemoveå¯¹åºçé¡¹
                 * @param index
                 */
                ArrayUtil.removeByIndex = function (arr, indexToRemove) {
                    if (!arr || arr[indexToRemove] !== undefined) ;
                    arr.splice(indexToRemove, 1);
                };
                return ArrayUtil;
            }()));

            var ObjectUtil = exports('ObjectUtil', /** @class */ (function () {
                function ObjectUtil() {
                }
                /**
                 * æ£æ¥æ¯å¦æ¯ç®åå¯¹è±¡
                 */
                ObjectUtil.isPlainObject = function (value) {
                    if (!(typeof value === 'object' && value !== null) || Object.prototype.toString.call({}) !== '[object Object]') {
                        return false;
                    }
                    if (Object.getPrototypeOf(value) === null) {
                        return true;
                    }
                    var proto = value;
                    while (Object.getPrototypeOf(proto) !== null) {
                        proto = Object.getPrototypeOf(proto);
                    }
                    return Object.getPrototypeOf(value) === proto;
                };
                return ObjectUtil;
            }()));

            /**
             * æ°æ®è·¯å¾å¤ç
             */
            var BindingPathConverter = exports('BindingPathConverter', /** @class */ (function () {
                function BindingPathConverter() {
                }
                /**
                 * (BindingPathString | BindingPathArray) => BindingPathArray
                 * @param bindingPath BindingPathçå­ç¬¦ä¸²æèæ°ç»æ ¼å¼
                 * @return BindingPathæ°ç»
                 */
                BindingPathConverter.toBindingPathArray = function (bindingPath) {
                    var bindingPathArray;
                    if (typeof bindingPath === 'string') {
                        bindingPathArray = bindingPath.split('/').filter(function (part) {
                            return part !== '';
                        });
                        return bindingPathArray;
                    }
                    else {
                        bindingPathArray = bindingPath.concat([]);
                    }
                    return bindingPathArray;
                };
                /**
                 * BindingPathArray => BindingPathString
                 */
                BindingPathConverter.toBindingPathString = function (bindingPathArray) {
                    return '/' + bindingPathArray.join('/');
                };
                return BindingPathConverter;
            }()));

            /**
             * BindingPathæ¯è¾å¨
             */
            var BindingPathComparer = exports('BindingPathComparer', /** @class */ (function () {
                function BindingPathComparer() {
                }
                /**
                 * æ¯å¦ç¸ç­
                 */
                BindingPathComparer.isEqual = function (srcPath, dstPath) {
                    var srcPathArray = BindingPathConverter.toBindingPathArray(srcPath);
                    var dstPathArray = BindingPathConverter.toBindingPathArray(dstPath);
                    var isEqual = srcPathArray.every(function (srcPathItem, srcPathIndex) {
                        return srcPathItem === dstPathArray[srcPathIndex];
                    });
                    return isEqual;
                };
                /**
                 * æ¯å¦æ¯ç¶è·¯å¾
                 */
                BindingPathComparer.isParent = function (childPath, parentPath) {
                    var childPathArray = BindingPathConverter.toBindingPathArray(childPath);
                    var parentPathArray = BindingPathConverter.toBindingPathArray(parentPath);
                    // é¿åº¦å·®1ä¸ª
                    if (childPathArray.length !== parentPathArray.length + 1) {
                        return;
                    }
                    return this.isAncestor(childPath, parentPath);
                };
                /**
                 * æ¯å¦æ¯ç¥åè·¯å¾
                 */
                BindingPathComparer.isAncestor = function (descendantPath, ancestorPath) {
                    var descendantPathArray = BindingPathConverter.toBindingPathArray(descendantPath);
                    var ancestorPathArray = BindingPathConverter.toBindingPathArray(ancestorPath);
                    if (descendantPath.length <= ancestorPathArray.length) {
                        return false;
                    }
                    var isAncestor = ancestorPathArray.every(function (ancestorPathItem, ancestorPathIndex) {
                        return ancestorPathItem === descendantPathArray[ancestorPathIndex];
                    });
                    return isAncestor;
                };
                return BindingPathComparer;
            }()));

            /**
             * BindingPathéåå¨
             */
            var BindingPathTraverser = exports('BindingPathTraverser', /** @class */ (function () {
                function BindingPathTraverser() {
                }
                /**
                 * è·åå¶å­èç¹çPath
                 */
                BindingPathTraverser.getLeafPathString = function (bindingPath) {
                    var bindingPathArray = BindingPathConverter.toBindingPathArray(bindingPath);
                    return bindingPathArray.pop();
                };
                /**
                 * è·åç¶è·¯å¾
                 */
                BindingPathTraverser.getParentPathString = function (bindingPath) {
                    var bindingPathArray = BindingPathConverter.toBindingPathArray(bindingPath);
                    bindingPathArray.pop();
                    return '/' + bindingPathArray.join('/');
                };
                return BindingPathTraverser;
            }()));

            /**
             * åæ´ç¸å³å®ä¹
             * @author Witt<jiwt@inspur.com>
             */
            /**
             * ç»å®æ°æ®åæ´ç±»å
             */
            var ChangeType;
            (function (ChangeType) {
                ChangeType["Load"] = "Load";
                ChangeType["Append"] = "Append";
                ChangeType["Remove"] = "Remove";
                ChangeType["SelectionChanged"] = "SelectionChanged";
                ChangeType["ValueChanged"] = "ValueChanged";
                ChangeType["UpdateErrors"] = "UpdateErrors";
                ChangeType["GlobalSelectionChanged"] = "GlobalSelectionChanged";
                /**
                 * åé¡µä¿¡æ¯åå
                 */
                ChangeType["PaginationInfoChange"] = "PaginationInfoChange";
            })(ChangeType || (ChangeType = exports('ChangeType', {})));
            /**
             * è§å¾åæ´ç±»å
             */
            var ViewChangeType;
            (function (ViewChangeType) {
                ViewChangeType[ViewChangeType["ValueChanged"] = 0] = "ValueChanged";
            })(ViewChangeType || (ViewChangeType = exports('ViewChangeType', {})));

            /**
             * ç»å®å±æ§ç¸å³å®ä¹
             * @author Witt<jiwt@inspur.com>
             */
            /**
             * å±æ§ç±»å
             */
            var BindingPropertyType;
            (function (BindingPropertyType) {
                /**
                 * ç®åç±»å
                 */
                BindingPropertyType["Plain"] = "Plain";
                /**
                 * å¯¹è±¡ç±»å
                 */
                BindingPropertyType["Object"] = "Object";
                /**
                 * åè¡¨ç±»å
                 */
                BindingPropertyType["List"] = "List";
                /**
                 * å¨æç±»å
                 */
                BindingPropertyType["Dynamic"] = "Dynamic";
            })(BindingPropertyType || (BindingPropertyType = exports('BindingPropertyType', {})));

            /**
             * å±æ§å·¥å·ç±»
             */
            var PropertyUtil = exports('PropertyUtil', /** @class */ (function () {
                function PropertyUtil() {
                }
                /**
                 * è·åå®ä½ä¸çå±æ§éåï¼å¹¶å°ä»ä»¬è½¬æ¢æBindingPropertyéå
                 * @param  entityType å®ä½ç±»å
                 * @returns ç»å®å±æ§éå
                 */
                PropertyUtil.getProperties = function (entityType) {
                    var properties = [];
                    // Plain
                    var ngFieldProperties = FieldMetadataUtil.getNgFields(entityType);
                    Object.keys(ngFieldProperties).forEach(function (propertyName) {
                        var ngFieldProperty = ngFieldProperties[propertyName];
                        properties.push({
                            name: propertyName,
                            type: BindingPropertyType.Plain,
                            isPrimaryKey: ngFieldProperty.primary,
                            isForeignKey: ngFieldProperty.foreign,
                            enableMultiLangInput: ngFieldProperty.enableMultiLangInput
                        });
                    });
                    // Object
                    var ngObjectProperties = FieldMetadataUtil.getNgObjects(entityType);
                    Object.keys(ngObjectProperties).forEach(function (propertyName) {
                        var ngObjectProperty = ngObjectProperties[propertyName];
                        properties.push({
                            name: propertyName,
                            type: BindingPropertyType.Object,
                            entityType: ngObjectProperty.type
                        });
                    });
                    // List
                    var ngListProperties = FieldMetadataUtil.getNgList(entityType);
                    Object.keys(ngListProperties).forEach(function (propertyName) {
                        var ngListProperty = ngListProperties[propertyName];
                        properties.push({
                            name: propertyName,
                            type: BindingPropertyType.List,
                            entityType: ngListProperty.type
                        });
                    });
                    // Dynamics
                    var ngDynamicProperties = FieldMetadataUtil.getNgDynamic(entityType);
                    Object.keys(ngDynamicProperties).forEach(function (propertyName) {
                        var ngDynamicProperty = ngDynamicProperties[propertyName];
                        properties.push({
                            name: propertyName,
                            type: BindingPropertyType.Dynamic,
                            entityType: ngDynamicProperty.type
                        });
                    });
                    return properties;
                };
                PropertyUtil.getDynamicProperties = function (dynamicData) {
                    var properties = [];
                    Object.keys(dynamicData).forEach(function (propertyName) {
                        if (dynamicData.hasOwnProperty(propertyName)) {
                            if (dynamicData[propertyName] instanceof Object) {
                                properties.push({
                                    name: propertyName,
                                    type: BindingPropertyType.Dynamic,
                                    entityType: null
                                });
                            }
                            else {
                                properties.push({
                                    name: propertyName,
                                    type: BindingPropertyType.Plain,
                                    isPrimaryKey: false,
                                    isForeignKey: false
                                });
                            }
                        }
                    });
                    return properties;
                };
                /**
                 * æ ¹æ®å±æ§åè·åå±æ§
                 */
                PropertyUtil.getPropertyByName = function (properties, propertyName) {
                    var targetProperty = properties.find(function (property) {
                        return property.name === propertyName;
                    });
                    return targetProperty;
                };
                /**
                 * è·åå®ä½ä¸»é®å
                 * @param properties å±æ§éå
                 * @returns ä¸»é®å
                 */
                PropertyUtil.getPrimaryKey = function (properties) {
                    // å®ä½å¿é¡»æä¸»é®ï¼å¦ææ²¡æä¸»é®å¨æé å®ä½çæ¶åå°±å·²ç»æ¥éï¼è¿éä¸éè¦åè¿è¡æ£æ¥
                    var primaryProperty = properties.find(function (property) {
                        return property.isPrimaryKey === true;
                    });
                    return primaryProperty ? primaryProperty.name : '';
                };
                return PropertyUtil;
            }()));

            /**
             * BindingObjectç¸å³å®ä¹
             * @author Witt<jiwt@inspur.com>
             */
            /**
             * BindingObjectæ¯Entityå¨ç»å®å±çä¸ä¸ªå½±å°ï¼å®å°Entityåçæ°æ®è½¬æ¢ä¸ºä¸å¯åå¯¹è±¡ï¼å¹¶ç¨äºçé¢ç»å®ã
             */
            var BindingObject = exports('BindingObject', /** @class */ (function () {
                /**
                 * æé å½æ°
                 * @param properties å±æ§éå
                 */
                function BindingObject(properties) {
                    /**
                     * æ è¯æ¯å¦æäº¤è¿
                     */
                    this.isShowValidationMsg = false;
                    /**
                     * ä»¥{ [propertyName]: FormControl }çå½¢å¼å­æ¾æ¯æ¡æ°æ®çcontrol
                     */
                    this.controlMap = {};
                    this.properties = properties;
                    this.primaryKey = PropertyUtil.getPrimaryKey(properties);
                    this.innerValues = new Map();
                    this.changes = new Subject();
                    this.viewChanges = new Subject();
                }
                Object.defineProperty(BindingObject.prototype, "primaryKeyValue", {
                    /**
                     * ä¸»é®å¼
                     */
                    get: function () {
                        return this.primaryKey ? this.getValue(this.primaryKey) : '';
                    },
                    enumerable: true,
                    configurable: true
                });
                /**
                 * è®¾ç½®æ¯å¦æäº¤è¿
                 */
                BindingObject.prototype.setShowValidationMsg = function (flag) {
                    this.isShowValidationMsg = flag;
                };
                /**
                 * æ ¹æ®å±æ§åè·åå±æ§å¼
                 * @param   propertyName å±æ§å
                 * @returns å±æ§å¼
                 */
                BindingObject.prototype.getValue = function (propertyName) {
                    return this.innerValues.get(propertyName);
                };
                /**
                 * è®¾ç½®å±æ§å¼
                 * @param propertyName        å±æ§å
                 * @param propertyValue       å±æ§å¼
                 * @param emitEventToView     æ¯å¦éç¥Viewå±å»æ´æ°çé¢ï¼é»è®¤ä¸ºfalse
                 * @param emitEventToEntity   æ¯å¦éç¥Entityå±å»æ´æ°å¼ï¼é»è®¤ä¸ºfalse
                 * @param errors              éè¯¯æ¶æ¯
                 * @param invokeOnValueChange å¼ååäºä»¶æ§è¡å¥æ
                 */
                BindingObject.prototype.setValue = function (propertyName, propertyValue, emitEventToView, emitEventToEntity, errors, invokeOnValueChange) {
                    var _this = this;
                    if (emitEventToView === void 0) { emitEventToView = false; }
                    if (emitEventToEntity === void 0) { emitEventToEntity = false; }
                    var oldPropertyValue = this.getValue(propertyName);
                    // ç±äºç¹å®åå ï¼@éµç å¼ºï¼ï¼æ æ³å±è½oldPropertyValue === propertyValue
                    if (oldPropertyValue === propertyValue) {
                        return;
                    }
                    if (!invokeOnValueChange || oldPropertyValue === propertyValue) {
                        // è®¾å®ç¼ºç
                        invokeOnValueChange = function (preValue, value, entityChanged) {
                            return of(true);
                        };
                    }
                    if (emitEventToEntity === true) {
                        // BUG 322301ï¼å é¤@2019.08.10; å¦ææ å¯¹åºå®ä½ï¼åä¸­æ­¢å¼ä¼ é; è¿ç§æåµåçå¨å¸¦ä»è¡¨çåæ®æ°å¢ï¼ä»è¡¨ååºLoadååçæåµï¼
                        // if(!this.innerValues.has(propertyName)) {
                        //   return;
                        // }
                        // æ§è¡å®ä½å¼åååäºä»¶
                        invokeOnValueChange(oldPropertyValue, propertyValue, false).subscribe(function (result) {
                            if (result) {
                                // å¦ææåï¼æ§è¡ååï¼å¹¶éç¥å®ä½åå
                                _this.innerValues = _this.innerValues.set(propertyName, propertyValue);
                                var viewChange = {
                                    type: ViewChangeType.ValueChanged,
                                    path: [propertyName],
                                    value: propertyValue,
                                    errors: errors
                                };
                                _this.viewChanges.next(viewChange);
                                // å¦æéè¦éç¥è§å¾ï¼éç¥è§å¾ç¸åºä¿®æ¹
                                if (emitEventToView === true) {
                                    _this.changes.next({
                                        type: ChangeType.ValueChanged,
                                        path: [propertyName],
                                        value: propertyValue,
                                        id: _this.primaryKeyValue,
                                        errors: errors
                                    });
                                }
                                // æ§è¡å®ä½å¼åååäºä»¶
                                invokeOnValueChange(oldPropertyValue, propertyValue, true).subscribe();
                            }
                            else {
                                // å¦æå¤±è´¥ï¼ä¸åéç¥å®ä½åå
                                // å¹¶æ§è¡çé¢åæ»æä½
                                _this.changes.next({
                                    type: ChangeType.ValueChanged,
                                    path: [propertyName],
                                    value: oldPropertyValue,
                                    id: _this.primaryKeyValue,
                                    errors: errors
                                });
                            }
                        });
                    }
                    else {
                        // `emitEventToEntity === false`, åè®¤å®å®ä½å¼å·²ç»åçååï¼éç¥è§å¾ååï¼å¹¶è§¦åå®ä½å¼åååäºä»¶
                        this.innerValues = this.innerValues.set(propertyName, propertyValue);
                        if (emitEventToView === true) {
                            this.changes.next({
                                type: ChangeType.ValueChanged,
                                path: [propertyName],
                                value: propertyValue,
                                id: this.primaryKeyValue,
                                errors: errors
                            });
                        }
                        // æ§è¡å®ä½å¼åååäºä»¶
                        invokeOnValueChange(oldPropertyValue, propertyValue, true).subscribe();
                    }
                };
                /**
                 * å°BindingObjectå®ä¾è½¬æ¢æJSONå¯¹è±¡
                 */
                BindingObject.prototype.toJSON = function (options) {
                    var _this = this;
                    var langCode = window.localStorage.getItem('languageCode') || 'zh-CHS';
                    var result = {};
                    this.properties.forEach(function (property) {
                        var propName = property.name;
                        if (property.type === BindingPropertyType.List) {
                            var list = _this[propName];
                            result[propName] = list.toJSON(options);
                        }
                        else if (property.type === BindingPropertyType.Object) {
                            var object = _this[propName];
                            result[propName] = object.toJSON(options);
                        }
                        else if (property.type === BindingPropertyType.Dynamic) {
                            var object = _this[propName];
                            result[propName] = object.toJSON(options);
                        }
                        else {
                            // 1ãå¯¹äºå¤è¯­å½å¥å­æ®µï¼
                            // 2ãä¼ å¥ignoreMultiLangInputæ å¿ï¼ååå½åè¯­è¨çå¼ç»æ§ä»¶ã
                            if (options && options.ignoreMultiLangInput === true && property.enableMultiLangInput === true) {
                                var multiLangValueObj = _this.getValue(propName);
                                if (multiLangValueObj) {
                                    result[propName] = multiLangValueObj[langCode];
                                }
                                else {
                                    result[propName] = multiLangValueObj;
                                }
                            }
                            else {
                                result[propName] = _this.getValue(propName);
                            }
                        }
                    });
                    return result;
                };
                return BindingObject;
            }()));

            /**
             * ç»å®åè¡¨å·¥åç¸å³å®ä¹
             * @author Witt<jiwt@inspur.com>
             */
            /**
             * BindingListå·¥åç¨äºåå»ºä¸ä¸ªç©ºçBindingListå¯¹è±¡ï¼å¹¶å°å½åè¡çå±æ§å½±å°å°BindingListå¯¹è±¡ä¸ã
             *
             * **ç¤ºä¾ä»£ç **
             * ```ts
             * const deptProperties: BindingProperty[] = PropertyUtil.getProperties(DeptEntity);
             * const deptList = BindingListFactory.create(deptProperties);
             * ```
             */
            var BindingListFactory = exports('BindingListFactory', /** @class */ (function () {
                function BindingListFactory() {
                }
                /**
                 * åå»ºBindingListå®ä¾ï¼å¹¶æ©å±å¶å±æ§
                 * @param bindingProperties ç»å®å±æ§éå
                 */
                BindingListFactory.create = function (bindingProperties) {
                    var bindingList = new BindingList(bindingProperties);
                    this.extendProperties(bindingList, bindingProperties);
                    return bindingList;
                };
                /**
                 * æ©å±BindingListå±æ§ï¼å°å½åè¡ä¸çå±æ§æ å°å°åè¡¨ä¸
                 * @param bindingList       è¦æ©å±çç»å®åè¡¨
                 * @param bindingProperties ç»å®å±æ§éå
                 */
                BindingListFactory.extendProperties = function (bindingList, bindingProperties) {
                    bindingProperties.forEach(function (bindingProperty) {
                        var propertyName = bindingProperty.name;
                        Object.defineProperty(bindingList, propertyName, {
                            get: function () {
                                return bindingList.currentItem[propertyName];
                            }
                        });
                    });
                };
                return BindingListFactory;
            }()));

            /**
             * ç»å®å¯¹è±¡å·¥åç¸å³å®ä¹
             * @author Witt<jiwt@inspur.com>
             */
            /**
             * BindingObjectå·¥åç¨äºåå»ºä¸ä¸ªç©ºçBindingObjectå¯¹è±¡ï¼å¹¶å¯¹å¶å±æ§è¿è¡æ©å±ã
             *
             * **æ©å±å±æ§å¤ç**
             *
             * å¯¹äºè¦æ©å±çå±æ§ï¼BindingPropertyï¼æä¸ç§å¤çï¼
             * - æ®éå±æ§ï¼åå§åä¸ºä¸ä¸ªundefinedï¼å¹¶åè£getãsetæ¹æ³ï¼éè¿setæ¹æ³çå¬åæ´ï¼
             * - å¯¹è±¡å±æ§ï¼åå§åä¸ºä¸ä¸ªç©ºçBindingObjectå¯¹è±¡ï¼å¹¶çå¬å­å¯¹è±¡çåæ´ï¼
             * - åè¡¨å±æ§ï¼åå§åä¸ºä¸ä¸ªç©ºçBindingListå¯¹è±¡ï¼å¹¶çå¬å­åè¡¨çåæ´ï¼
             *
             * **ç¤ºä¾ä»£ç **
             *
             * ```ts
             *  const empProperties = PropertyUtil.getProperties(EmpEntity);
             * const empBindingObject = BindingObjectFactory.create(properties);
             * ```
             */
            var BindingObjectFactory = exports('BindingObjectFactory', /** @class */ (function () {
                function BindingObjectFactory() {
                }
                /**
                 * åå»ºBindingObjectå®ä¾
                 * @param properties è¦æ©å±çå±æ§éå
                 * @returns å¸¦æ©å±å±æ§çç©ºBindingObjectå¯¹è±¡
                 * @
                 */
                BindingObjectFactory.create = function (properties) {
                    var object = new BindingObject(properties);
                    this.extendProperties(object, properties);
                    return object;
                };
                BindingObjectFactory.createDynamicBindingObject = function (data) {
                    var properties = PropertyUtil.getDynamicProperties(data);
                    var object = new BindingObject(properties);
                    this.extendProperties(object, properties);
                    return object;
                };
                /**
                 * æ©å±å±æ§ç»å®å¯¹è±¡çå±æ§
                 * @param object     è¦æ©å±çç»å®å¯¹è±¡
                 * @param properties ç»å®å±æ§éå
                 */
                BindingObjectFactory.extendProperties = function (object, properties) {
                    var _this = this;
                    // æ©å±BindingObjectå±æ§
                    properties.forEach(function (property) {
                        if (property.type === BindingPropertyType.List) {
                            _this.extendListProperty(object, property);
                        }
                        else if (property.type === BindingPropertyType.Object) {
                            _this.extendObjectProperty(object, property);
                        }
                        else if (property.type === BindingPropertyType.Dynamic) {
                            _this.extendDynamicObjectProperty(object, property);
                        }
                        else {
                            _this.extendPlainProperty(object, property);
                        }
                    });
                };
                /**
                 * æ©å±åè¡¨ç±»åçç»å®å±æ§
                 * @param object     è¦æ©å±çç»å®å¯¹è±¡
                 * @param properties åè¡¨ç±»åçç»å®å±æ§éå
                 */
                BindingObjectFactory.extendListProperty = function (object, property) {
                    var propertyName = property.name;
                    var childListProperties = PropertyUtil.getProperties(property.entityType);
                    var childList = BindingListFactory.create(childListProperties);
                    // æå®å­Listçparentãçå¬å­Listçchangesäºä»¶
                    childList.parent = object;
                    childList.changes.subscribe(function (change) {
                        change.path.unshift(propertyName);
                        object.changes.next(change);
                    });
                    // å°å­çBindingListå®ä¾èµå¼ç»å½åå±æ§
                    Object.defineProperty(object, propertyName, {
                        value: childList
                    });
                };
                /**
                 * æ©å±å¯¹è±¡ç±»åçç»å®å±æ§
                 * @param object     è¦æ©å±çç»å®å¯¹è±¡
                 * @param properties å¯¹è±¡ç±»åçç»å®å±æ§éå
                 */
                BindingObjectFactory.extendObjectProperty = function (object, property) {
                    var propertyName = property.name;
                    var childObjectProperties = PropertyUtil.getProperties(property.entityType);
                    var childObject = this.create(childObjectProperties);
                    // æå®å­Objectçparentãçå¬å­Objectçchangesäºä»¶
                    childObject.parent = object;
                    childObject.changes.subscribe(function (change) {
                        change.path.unshift(propertyName);
                        object.changes.next(change);
                    });
                    Object.defineProperty(object, propertyName, {
                        value: childObject
                    });
                };
                BindingObjectFactory.extendDynamicObjectProperty = function (object, property) {
                    var propertyName = property.name;
                    object[propertyName] = null;
                };
                BindingObjectFactory.attachDynamicObjectProperty = function (object, propertyName, dynamicObject) {
                    dynamicObject.parent = object;
                    dynamicObject.changes.subscribe(function (change) {
                        change.path.unshift(propertyName);
                        object.changes.next(change);
                    });
                    Object.defineProperty(object, propertyName, {
                        value: dynamicObject
                    });
                };
                /**
                 * æ©å±ç®åç±»åçç»å®å±æ§
                 * @param object     è¦æ©å±çç»å®å¯¹è±¡
                 * @param properties ç®åç±»åçç»å®å±æ§éå
                 */
                BindingObjectFactory.extendPlainProperty = function (object, property) {
                    var propertyName = property.name;
                    Object.defineProperty(object, propertyName, {
                        get: function () {
                            return object.getValue(propertyName);
                        },
                        set: function (value) {
                            var oldValue = object.getValue(propertyName);
                            if (value === oldValue) {
                                return;
                            }
                            object.setValue(propertyName, value, true, true);
                        }
                    });
                };
                return BindingObjectFactory;
            }()));

            /**
             * BindingListæ¯ä¸ä¸ªBindingObjectéå
             */
            var BindingList = exports('BindingList', /** @class */ (function () {
                /**
                 * æé å½æ°
                 */
                function BindingList(properties) {
                    //#region åé¡µç¸å³
                    /**
                     * åé¡µä¿¡æ¯
                     */
                    this._paginationInfo = null;
                    this.properties = properties;
                    this.primaryKey = PropertyUtil.getPrimaryKey(properties);
                    this.changes = new Subject();
                    this.innerList = [];
                    this.currentId = null;
                }
                Object.defineProperty(BindingList.prototype, "paginationInfo", {
                    get: function () {
                        return this._paginationInfo;
                    },
                    set: function (sPaginationInfo) {
                        this._paginationInfo = sPaginationInfo;
                        if (this._paginationInfo === sPaginationInfo) {
                            return;
                        }
                        this.changes.next({
                            type: ChangeType.PaginationInfoChange,
                            path: [],
                            value: this._paginationInfo
                        });
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(BindingList.prototype, "pageIndex", {
                    /**
                     * è·åé¡µç 
                     */
                    get: function () {
                        if (!!this.paginationInfo && this.paginationInfo.hasOwnProperty("pageIndex")) {
                            return this.paginationInfo.pageIndex;
                        }
                        return 1;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(BindingList.prototype, "pageSize", {
                    /**
                     * è·ååé¡µå¤§å°
                     */
                    get: function () {
                        if (!!this.paginationInfo && this.paginationInfo.hasOwnProperty("pageSize")) {
                            return this.paginationInfo.pageSize;
                        }
                        return 0;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(BindingList.prototype, "total", {
                    /**
                     * è·åæ°æ®æ»é¡¹æ°
                     */
                    get: function () {
                        if (!!this.paginationInfo) {
                            return this.paginationInfo.total || this.paginationInfo.totalCount;
                        }
                        return 0;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(BindingList.prototype, "skip", {
                    /**
                     * è·åè·³è¿çæ°æ®æ¡æ°
                     */
                    get: function () {
                        var pageIndex = this.pageIndex;
                        var pageSize = this.pageSize;
                        return (pageIndex - 1) * pageSize;
                    },
                    enumerable: true,
                    configurable: true
                });
                /**
                 * åå°è®¾ç½®åé¡µä¿¡æ¯
                 * @param skip skip
                 * @param take take
                 */
                BindingList.prototype.setPaginationInfo = function (skip, take) {
                    this.paginationInfo = Object.assign({}, this.paginationInfo, {
                        pageSize: take,
                        pageIndex: skip / take + 1
                    });
                    /*this.changes.next({
                      type: ChangeType.PaginationInfoChange,
                      path: [],
                      value: this.paginationInfo
                    });*/
                };
                Object.defineProperty(BindingList.prototype, "currentItem", {
                    //#endregion
                    /**
                     * å½åè¡å¯¹åºçç»å®å¯¹è±¡
                     * å¦æcurrentIdä¸ºnullï¼ååå»ºä¸ä¸ªç©ºç»æï¼é²æ­¢ç»å®æ¥éï¼
                     */
                    get: function () {
                        var currentItem = this.findById(this.currentId);
                        if (!currentItem) {
                            if (!this.emptyCurrentItem) {
                                this.emptyCurrentItem = BindingObjectFactory.create(this.properties);
                            }
                            return this.emptyCurrentItem;
                        }
                        return currentItem;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(BindingList.prototype, "length", {
                    /**
                     * ç»å®å¯¹è±¡çæ°é
                     */
                    get: function () {
                        return this.innerList.length;
                    },
                    enumerable: true,
                    configurable: true
                });
                /**
                 * æ·»å [Symbol.iterator]ï¼ä½¿ä¹è½éè¿for oféå
                 */
                BindingList.prototype[Symbol.iterator] = function () {
                    var self = this;
                    var index = -1;
                    var size = this.innerList.length;
                    return {
                        next: function () {
                            index++;
                            if (index < size) {
                                return {
                                    done: false,
                                    value: self.innerList[index]
                                };
                            }
                            return { done: true, value: undefined };
                        }
                    };
                };
                /**
                 * æ¹éå è½½ç»å®å¯¹è±¡ï¼å è½½ä¹ååæ¸ç©ºç»å®åè¡¨ï¼å¹¶éç½®å½åè¡ï¼å è½½ä¹åå°ç¬¬ä¸è¡è®¾ç½®ä¸ºé»è®¤å½åè¡ã
                 * @param objects è¦å è½½ç»å®å¯¹è±¡æ°ç»
                 */
                BindingList.prototype.load = function (objects) {
                    var _this = this;
                    // éç½®åè¡¨
                    this.innerList = [];
                    if (objects.length !== 0) {
                        // å è½½æ°æ®
                        objects.forEach(function (object) {
                            _this.add(object);
                        });
                        // è®¾ç½®é»è®¤å½åè¡
                        var currentItem = this.findById(this.currentId);
                        if (!currentItem) {
                            var firstId = objects[0][this.primaryKey];
                            this.setCurrentId(firstId, false, false);
                        }
                    }
                    else {
                        this.currentId = null;
                    }
                    // è§¦åäºä»¶
                    this.changes.next({
                        type: ChangeType.Load,
                        path: [],
                        value: objects
                    });
                };
                /**
                 * æ¹éè¿½å ç»å®å¯¹è±¡ï¼è¿½å ä¹åå°æåä¸ä¸ªè¿½å çç»å®å¯¹è±¡è®¾ç½®ä¸ºå½åè¡ã
                 * @param objects è¦å è½½ç»å®å¯¹è±¡æ°ç»
                 */
                BindingList.prototype.append = function (objects) {
                    var _this = this;
                    if (objects.length === 0) {
                        return;
                    }
                    // å è½½BindingObject
                    objects.forEach(function (object) {
                        _this.add(object);
                    });
                    // å½åè¡ä¸ºæ°è¿½å çæå1è¡
                    var lastId = objects[objects.length - 1][this.primaryKey];
                    this.setCurrentId(lastId, true, true);
                    // è§¦åäºä»¶
                    this.changes.next({
                        type: ChangeType.Append,
                        path: [],
                        value: objects
                    });
                };
                /**
                 * æ·»å ç»å®å¯¹è±¡ï¼å¹¶å»ºç«ç»å®å¯¹è±¡åç»å®åè¡¨ä¹é´çå³èã
                 * @param object ç»å®å¯¹è±¡
                 */
                BindingList.prototype.add = function (object) {
                    var _this = this;
                    this.innerList.push(object);
                    object.parent = this;
                    // çå¬objectåæ´ï¼å¹¶ç»§ç»­åä¸æï¼ç±äºlistæå½åè¡çæ¦å¿µï¼ä¸éè¦å¨pathä¸­è¿½å è·¯å¾
                    object.changes.subscribe(function (change) {
                        _this.changes.next(change);
                    });
                };
                /**
                 * å é¤ä¸»é®å¼æ°ç»å¯¹åºçç»å®å¯¹è±¡ã
                 * @param ids ä¸»é®å¼æ°ç»
                 */
                BindingList.prototype.removeByIds = function (ids) {
                    var _this = this;
                    if (!ids || ids.length === 0) {
                        return;
                    }
                    var nextCurrentId = this.currentId;
                    ids.forEach(function (id) {
                        // å¦æå½åè¡è¢«å é¤ï¼è®¡ç®ä¸ä¸å½åè¡
                        if (id === nextCurrentId) {
                            nextCurrentId = _this.getCurrentIdBeforeDeleting();
                        }
                        // å é¤å¯¹è±¡ï¼æ¾ä¸å°æ¶è·³è¿
                        var index = _this.getIndexById(id);
                        if (index === -1) {
                            return;
                        }
                        ArrayUtil.removeByIndex(_this.innerList, index);
                    });
                    // éæ°è®¾ç½®å½åè¡
                    if (this.innerList.length === 0) {
                        this.currentId = null;
                    }
                    else {
                        this.setCurrentId(nextCurrentId, false, false);
                    }
                    // åºåè¡å é¤äºä»¶
                    this.changes.next({
                        type: ChangeType.Remove,
                        path: [],
                        value: ids
                    });
                };
                /**
                 * æ¸ç©º
                 */
                BindingList.prototype.clear = function () {
                    this.innerList = [];
                    this.currentId = null;
                    this.changes.next({
                        type: ChangeType.Remove,
                        path: [],
                        value: []
                    });
                };
                /**
                 * å¦æå½åè¡è¢«å é¤ï¼å é¤ä¹åéæ°è®¡ç®å½åè¡çä½ç½®ï¼å¹¶è¿åä¸ä¸å½åè¡çä¸»é®å¼ã
                 * - å¦æè¢«å é¤çè¡æ¯æå1è¡ï¼åä¸ç§»1è¡ï¼
                 * - å¶ä»æåµï¼ä¸ç§»1è¡ã
                 */
                BindingList.prototype.getCurrentIdBeforeDeleting = function () {
                    var nextIndex = -1;
                    var currentIndex = this.getIndexById(this.currentId);
                    if (currentIndex === this.length - 1) {
                        nextIndex = currentIndex - 1;
                    }
                    else {
                        nextIndex = currentIndex + 1;
                    }
                    return this.getIdByIndex(nextIndex);
                };
                /**
                 * æ ¹æ®ä¸»é®å¼è·åå¯¹åºç»å®å¯¹è±¡
                 * @param   id è¦æ¥æ¾çä¸»é®å¼
                 * @returns æ¾å°æ¶è¿åå¯¹åºBindingObjectï¼ æ¾ä¸å°æ¶è¿ånull
                 */
                BindingList.prototype.findById = function (id) {
                    var _this = this;
                    var target;
                    target = this.innerList.find(function (item) {
                        return item.getValue(_this.primaryKey) === id;
                    });
                    return target === undefined ? null : target;
                };
                /**
                 * å°ä¸»é®å¼ä¸ºidçç»å®å¯¹è±¡è®¾ç½®ä¸ºå½åè¡
                 * @param  id        è¦è®¾ç½®çä¸»é®å¼
                 * @param  emitEvent æ¯å¦åéå½åè¡åæ´äºä»¶
                 */
                BindingList.prototype.setCurrentId = function (id, emitEvent, emitGlobalEvent) {
                    if (emitEvent === void 0) { emitEvent = true; }
                    if (emitGlobalEvent === void 0) { emitGlobalEvent = true; }
                    if (this.currentId === id) {
                        return;
                    }
                    // ä¸å­å¨æ¶è®¾ç½®ä¸ºnull
                    // const currentObj = this.findById(id);
                    // if (!currentObj) {
                    //   this.currentId = null;
                    // } else {
                    //   this.currentId = id;
                    // }
                    // @todoï¼æ¾ä¸å°æ¶æçåºè¯¥è®¾ç½®ä¸ºnullï¼ç®åæ¯ç´æ¥è¿åï¼æ¡æ¶é¨ååè½ä¾èµè¯¥ç¹æ§ã
                    var currentObj = this.findById(id);
                    if (!currentObj) {
                        return;
                    }
                    this.currentId = id;
                    // ååºè¡åæ¢äºä»¶
                    if (emitEvent === true) {
                        this.changes.next({
                            type: ChangeType.SelectionChanged,
                            path: [],
                            value: this.currentItem
                        });
                    }
                    // æ¯å¦åéå¨å±çè¡åæ¢äºä»¶
                    if (emitGlobalEvent === true) {
                        this.changes.next({
                            type: ChangeType.GlobalSelectionChanged,
                            path: [],
                            value: this.currentItem
                        });
                    }
                };
                /**
                 * æ ¹æ®ä¸»é®å¼ä¸ºidçç»å®å¯¹è±¡çç´¢å¼
                 * @param id ä¸»é®å¼
                 * @returns æ¾å°æ¶è¿åå¯¹åºçindexï¼æ¾ä¸å°æ¶è¿å-1
                 */
                BindingList.prototype.getIndexById = function (id) {
                    var _this = this;
                    return this.innerList.findIndex(function (obj) {
                        return obj[_this.primaryKey] === id;
                    });
                };
                /**
                 * æ ¹æ®ç´¢å¼ä½ç½®è·åå¯¹åºç»å®å¯¹è±¡çä¸»é®å¼
                 * @reutrn æ¾å°æ¶è¿åå¯¹åºä¸»é®å¼ï¼æ¾ä¸å°è¿ånull
                 */
                BindingList.prototype.getIdByIndex = function (index) {
                    if (index < 0 || index > this.length) {
                        return null;
                    }
                    var obj = this.innerList[index];
                    if (!obj) {
                        return null;
                    }
                    return obj[this.primaryKey];
                };
                /**
                 * è½¬æ¢ä¸ºBindingObjectæ°ç»
                 */
                BindingList.prototype.toArray = function () {
                    return this.innerList.concat([]);
                };
                /**
                 * è½¬æ¢ä¸ºJSONå¯¹è±¡
                 * @returns æ®éå¯¹è±¡æ°ç»
                 */
                BindingList.prototype.toJSON = function (options) {
                    var result = [];
                    this.innerList.forEach(function (obj) {
                        result.push(obj.toJSON(options));
                    });
                    return result;
                };
                /**
                 * è·ååé¡µä¿¡æ¯
                 * @param path è·¯å¾
                 * @param defaultValue é»è®¤å¼
                 */
                BindingList.prototype.getPaginationConfigByPath = function (path, defaultValue) {
                    if (!path || path === '/') {
                        return this.paginationInfo;
                    }
                    if (typeof path !== 'string') {
                        throw new Error('è·¯å¾å¿é¡»ä¸ºå­ç¬¦ä¸²ï¼');
                    }
                    path = path.substring(1);
                    var paths = path.split('/').filter(function (item) { return !!item && item.trim().length > 0; }).map(function (item) { return item.trim(); });
                    var config = this.paginationInfo;
                    paths.forEach(function (item) {
                        if (config && config.hasOwnProperty(item)) {
                            config = config[item];
                        }
                        else {
                            config = null;
                        }
                    });
                    return !!config ? config : typeof defaultValue !== 'undefined' ? defaultValue : undefined;
                };
                /**
                 * å¯¹bindingListå°±è¡æåº
                 * @param string æåºå­æ®µ
                 * @param directions æåºè§åå­æ®µ
                 * @param options åæ°
                 */
                BindingList.prototype.sortBy = function (fields, directions, options) {
                    if (!fields || fields.length < 1 || !directions || directions.length < 1) {
                        throw new Error('sortBy:argument error');
                    }
                    // é»è®¤ååº
                    var arrFields = typeof fields === 'string' ? fields.split(',') : fields || [];
                    var arrDirections = typeof directions === 'string' ? directions.split(',') : directions || [];
                    // æåºå­æ®µåæåºæ¹å¼åºä¸è´
                    if (arrFields.length !== arrDirections.length || arrFields.length < 1) {
                        throw new Error('sortBy:fields and directions not match');
                    }
                    // nage,age,total
                    var comparator = function (props, orders) { return function (item1, item2) {
                        var e_1, _a;
                        try {
                            for (var props_1 = __values(props), props_1_1 = props_1.next(); !props_1_1.done; props_1_1 = props_1.next()) {
                                var prop = props_1_1.value;
                                var order = ['asc'].includes(orders[props.indexOf(prop)]) ? 1 : -1;
                                if (item1.getValue(prop) > item2.getValue(prop)) {
                                    return order * 1;
                                }
                                if (item1.getValue(prop) < item2.getValue(prop)) {
                                    return order * -1;
                                }
                            }
                        }
                        catch (e_1_1) { e_1 = { error: e_1_1 }; }
                        finally {
                            try {
                                if (props_1_1 && !props_1_1.done && (_a = props_1.return)) _a.call(props_1);
                            }
                            finally { if (e_1) throw e_1.error; }
                        }
                        return 0;
                    }; };
                    this.innerList = this.innerList.sort(comparator(arrFields, arrDirections));
                };
                return BindingList;
            }()));

            /**
             * å®ä½æä½å·¥å·ç±»
             */
            var EntityUtil = exports('EntityUtil', /** @class */ (function () {
                function EntityUtil() {
                }
                /**
                 * å°entityçæ°æ®å è½½å°bindingObjectä¸­ï¼å¹¶ä¿æä¸¤èåæ­¥ã
                 * @param entity        å®ä½å¯¹è±¡
                 * @param bindingObject ç»å®å¯¹è±¡
                 */
                EntityUtil.loadEntity = function (entity, bindingObject) {
                    var _this = this;
                    // éåbindingObjectçpropertiesè¿è¡èµå¼
                    bindingObject.properties.forEach(function (property) {
                        var propertyName = property.name;
                        if (property.type === BindingPropertyType.List) {
                            _this.loadEntityList(entity[propertyName] || entity[PARENT_CLASS], bindingObject[propertyName]);
                        }
                        else if (property.type === BindingPropertyType.Object) {
                            if (entity && entity[propertyName]) {
                                _this.loadEntity(entity[propertyName], bindingObject[propertyName]);
                            }
                        }
                        else if (property.type === BindingPropertyType.Dynamic) {
                            if (entity && entity[propertyName]) {
                                var dynamicObject = BindingObjectFactory.createDynamicBindingObject(entity[propertyName].data);
                                BindingObjectFactory.attachDynamicObjectProperty(bindingObject, propertyName, dynamicObject);
                                _this.loadEntity(entity[propertyName], bindingObject[propertyName]);
                            }
                        }
                        else {
                            bindingObject.setValue(propertyName, entity[propertyName], false, false);
                        }
                    });
                    this.setUpEntityPipeline(entity, bindingObject);
                };
                /**
                 * å»ºç«entityåbindingObjectä¹é´çå³è
                 * @param entity        å®ä½å¯¹è±¡
                 * @param bindingObject ç»å®å¯¹è±¡
                 */
                EntityUtil.setUpEntityPipeline = function (entity, bindingObject) {
                    // çå¬entityåæ´
                    entity.onValueChanged.subscribe(function (modification) {
                        if (modification.type !== ModifyType.ValueChange || modification.path.length === 0) {
                            return;
                        }
                        var propertyName = modification.path[modification.path.length - 1];
                        var primaryKeyPath = modification.path[modification.path.length - 2];
                        // éªè¯ä¸»é®æ¯å¦å¹é
                        // å­å¨ä¸»é®å¹¶ä¸ä¸»é®ä¸æ¯idæ¶ææ£æ¥ï¼å¼å¯¹è±¡ãå³èå¯¹è±¡ä¸æ£æ¥ï¼
                        if (bindingObject.primaryKey && bindingObject.primaryKey === 'id') {
                            var primaryKey = bindingObject.primaryKey;
                            var primaryKeyValue = bindingObject.getValue(primaryKey);
                            if (primaryKeyPath !== primaryKey + ":" + primaryKeyValue) {
                                return;
                            }
                        }
                        // å¼æ²¡æåçååï¼ä¸åè®¾ç½®
                        // TODO: éè¿bindingObjectä¿®æ¹entityå±æ§å¼æ¶ï¼entityæ»ä¼è§¦åä¸ä¸ªåæ´åæ¥ï¼å¦æä¸æªè·è¿ä¸ªéå¤çåæ´ï¼ä¼å¯¼è´éå¤ææ­»å¾ªç¯
                        if (bindingObject.getValue(propertyName) === modification.value) {
                            return;
                        }
                        bindingObject.setValue(propertyName, modification.value, true, false, modification.errors);
                    });
                    // çå¬bindingObjectåæ´
                    bindingObject.viewChanges.subscribe(function (viewChange) {
                        var value = viewChange.value;
                        var propertyName = viewChange.path[0];
                        var pathData = entity.getPaths();
                        var paths = pathData.path;
                        bindingObject['id'];
                        if (pathData.isUdt) {
                            // gridä¸­udtæ²¡æidï¼ä»ç¶çº§ä¸­ååºidï¼ä»¥ä¾¿å­æ¾éªè¯ä¿¡æ¯
                            var getParentId = function (target) {
                                var parentId = '';
                                var findId = function (item) {
                                    if (item && item && item['id']) {
                                        parentId = item['id'];
                                        return;
                                    }
                                    else if (item['parent']) {
                                        findId(item['parent']);
                                    }
                                };
                                findId(target);
                                return parentId;
                            };
                            getParentId(bindingObject);
                            if (pathData.isGrid) {
                                // grid å°ä»è¡¨ä¸»å­æ®µå»é¤
                                paths.shift();
                            }
                            if (paths.length) {
                                paths.join('.') + '.';
                            }
                        }
                        // ä¸æ¯ä¸»é®å¼å­æ®µæ¶ï¼è¦åæ£æ¥ä¸»é®æ¯å¦å­å¨ï¼å¹¶ä¸ä¸»é®æ¯å¦ç¸ç­ï¼é²æ­¢åä»£åæ´åæ³¡ä¸æ¥ï¼
                        // éä¸»é®å±æ§åæ´æ¶ï¼è¦åæ£æ¥ä¸»é®æ¯å¦å¹éï¼å¦æä¸»é®ä¹ä¿®æ¹äºï¼è¦æ±åä¿®æ¹ä¸»é®åä¿®æ¹å¶ä»å¼ï¼
                        if (bindingObject.primaryKey) {
                            var primaryKey = bindingObject.primaryKey;
                            if (propertyName !== primaryKey) {
                                if (!entity[primaryKey] || entity[primaryKey] !== bindingObject[primaryKey]) {
                                    return;
                                }
                            }
                        }
                        // å¦æBindingObjectä¸çå±æ§å¼åEntityä¸å¯¹åºå±æ§å¼ä¸æ ·ï¼åä¸åè®¾ç½®
                        if (entity[propertyName] === value) {
                            return;
                        }
                        // è°ç¨è¡¨åéªè¯,éè¿åè°ç¨å®ä½éªè¯
                        // bingdingObjectåååï¼åè°ç¨å®ä½ä¸çéªè¯ï¼éè¿ååè®¾ç½®å®ä½çåå¨
                        entity[propertyName] = value;
                    });
                };
                /**
                 * å°entityListä¸­çEntityå¯¹è±¡è½¬æ¢ä¸ºBindingObjectå¯¹è±¡ï¼å è½½å°bindingListä¸­ï¼å¹¶ä¿æentityListåbindingListåæ­¥ã
                 * @param entityList  å®ä½åè¡¨
                 * @param bindingList ç»å®åè¡¨
                 */
                EntityUtil.loadEntityList = function (entityList, bindingList) {
                    this.loadEntities(entityList.items, bindingList);
                    this.setUpEntityListPipeline(entityList, bindingList);
                };
                /**
                 * å»ºç«entityListåbindingListä¹é´çå³è
                 * @param entityList  å®ä½åè¡¨
                 * @param bindingList ç»å®åè¡¨
                 */
                EntityUtil.setUpEntityListPipeline = function (entityList, bindingList) {
                    var _this = this;
                    entityList.onListChanged.subscribe(function (modification) {
                        switch (modification.type) {
                            // æ·»å å®ä½
                            case ModifyType.Add:
                                var entitiesToAdd = modification.value;
                                if (entitiesToAdd.length === 0) {
                                    return;
                                }
                                // æ£æ¥ç¶idæ¯å¦ä¸è´ï¼åæ³¡å¯¼è´çåæ´ä¸å¤ç
                                var paths = modification.path;
                                var parentPath = paths[paths.length - 2];
                                var parentId = bindingList.parent.primaryKeyValue;
                                if (parentPath.indexOf(parentId) === -1) {
                                    return;
                                }
                                _this.appendEntities(modification.value, bindingList);
                                break;
                            // å é¤å®ä½
                            case ModifyType.Remove:
                                // å é¤å®ä½ï¼valueæ ¼å¼å¾åæ¦·ï¼ç®åvalueçæ ¼å¼ä¸º { primaryKey: primaryValue}ï¼
                                var id = modification.value[bindingList.primaryKey];
                                bindingList.removeByIds([id]);
                                // this.removeEntities(<Entity[]>modification.value, bindingList);
                                break;
                            // å è½½å®ä½
                            case ModifyType.Load:
                                var entities = modification.value;
                                _this.loadEntities(entities, bindingList);
                                break;
                        }
                    });
                };
                /**
                 * çå¬repositoryååï¼ä¿ærepositoryåbindingListåæ­¥ã
                 * @param repository  å®ä½ä»åº
                 * @param bindingList ç»å®åè¡¨
                 */
                EntityUtil.loadRepository = function (repository, bindingList) {
                    var _this = this;
                    // åæ¬¡å è½½
                    var entities = Array.from(repository.entityCollection.toArray());
                    this.loadEntities(entities, bindingList);
                    // çå¬åå
                    repository.entityCollectionChange.subscribe(function (modification) {
                        switch (modification.type) {
                            case ModifyType.Load:
                                _this.loadEntities(modification.value, bindingList);
                                break;
                            case ModifyType.Add:
                                _this.appendEntities(modification.value, bindingList);
                                break;
                            case ModifyType.Remove:
                                _this.removeEntities(modification.value, bindingList);
                                break;
                            case ModifyType.PaginationInfoChange:
                                bindingList.paginationInfo = modification.value;
                                break;
                        }
                    });
                    // çå¬BindingListæ°æ®åå
                    bindingList.changes.subscribe(function (change) {
                        if (change.type === ChangeType.PaginationInfoChange) {
                            var entityCollection = repository.entityCollection;
                            // const entityTypeName = entityCollection.entityTypeName;
                            // const original = entityCollection.paginationInfo[entityTypeName];
                            // const entityPaginationInfo = Object.assign({}, original, change.value);
                            entityCollection.paginationInfo = Object.assign({}, entityCollection.paginationInfo, change.value);
                        }
                    });
                };
                /**
                 * å°entitiesä¸­çEntityå¯¹è±¡è½¬æ¢ä¸ºBindingObjectå¯¹è±¡ï¼å¹¶å è½½å°bindingListä¸­
                 * @param entities    å®ä½æ°ç»
                 * @param bindingList ç»å®åè¡¨
                 */
                EntityUtil.loadEntities = function (entities, bindingList) {
                    var bindingObjects = this.createBindingObjects(entities, bindingList);
                    bindingList.load(bindingObjects);
                };
                /**
                 * å°entitiesä¸­çEntityå¯¹è±¡è½¬æ¢ä¸ºBIndingObjectå¯¹è±¡ï¼å¹¶è¿½å å°bindingListä¸­
                 * @param entities    å®ä½æ°ç»
                 * @param bindingList ç»å®åè¡¨
                 */
                EntityUtil.appendEntities = function (entities, bindingList) {
                    var bindingObjects = this.createBindingObjects(entities, bindingList);
                    bindingList.append(bindingObjects);
                };
                /**
                 * ä»bindingListç§»é¤entitieså¯¹åºçBindingObjectå¯¹è±¡
                 * @param entities    å®ä½æ°ç»
                 * @param bindingList ç»å®åè¡¨
                 */
                EntityUtil.removeEntities = function (entities, bindingList) {
                    if (entities === null || entities.length === 0) {
                        return;
                    }
                    // å½éè¦å é¤çidæ°ç»
                    var primaryKey = bindingList.primaryKey;
                    var ids = [];
                    entities.forEach(function (entity) {
                        ids.push(entity[primaryKey]);
                    });
                    bindingList.removeByIds(ids);
                };
                /**
                 * å°entitiesä¸­çEntityå¯¹è±¡è½¬æ¢ä¸ºBindingObjectå¯¹è±¡
                 * @param entities    å®ä½æ°ç»
                 * @param bindingList ç»å®åè¡¨
                 */
                EntityUtil.createBindingObjects = function (entities, bindingList) {
                    var _this = this;
                    if (entities === null || entities.length === 0) {
                        return [];
                    }
                    var bindingObjects = [];
                    entities.forEach(function (entity) {
                        var bindingObject = BindingObjectFactory.create(bindingList.properties);
                        _this.loadEntity(entity, bindingObject);
                        // // ä¸ºbindingObjectè®¾ç½®é»è®¤å¼initialDataå±æ§
                        // if (entity['initialData']) {
                        //   bindingObject['initialData'] = entity['initialData'];
                        // }
                        bindingObjects.push(bindingObject);
                    });
                    return bindingObjects;
                };
                EntityUtil.watchReposiroty = function (repository, bindingData) {
                    // reposiroty => bindingData
                    repository.entityCollectionChange.subscribe(function (modification) {
                        switch (modification.type) {
                            case ModifyType.PaginationInfoChange:
                                bindingData.pagingInfo = modification.value;
                                break;
                        }
                    });
                };
                /**
                 * æ¥æ¾å±æ§çç±»å
                 * @param entityType å®ä½ç±»å
                 * @param targetPropName å±æ§åç§°
                 * @return å±æ§ä¿¡æ¯ï¼åå«å±æ§ç±»åï¼NgFieldãNgObjectãNgListï¼åå±æ§å¯¹åºçå®ä½ç±»åï¼å½NgFieldç±»åæ¶ä¸ºnullï¼
                 */
                EntityUtil.getPropInfo = function (entityType, targetPropName) {
                    var propType;
                    var propEntityType;
                    // NgField
                    var ngFieldProperties = FieldMetadataUtil.getNgFields(entityType);
                    Object.keys(ngFieldProperties).forEach(function (propName) {
                        if (propName === targetPropName) {
                            propType = 'NgField';
                            propEntityType = null;
                        }
                    });
                    // NgObject
                    var ngObjectProperties = FieldMetadataUtil.getNgObjects(entityType);
                    Object.keys(ngObjectProperties).forEach(function (propName) {
                        if (propName === targetPropName) {
                            propType = 'NgObject';
                            propEntityType = ngObjectProperties[propName].type;
                        }
                    });
                    // NgList
                    var ngListProperties = FieldMetadataUtil.getNgList(entityType);
                    Object.keys(ngListProperties).forEach(function (propName) {
                        if (propName === targetPropName) {
                            propType = 'NgList';
                            propEntityType = ngListProperties[propName].type;
                        }
                    });
                    var ngDynamicProperties = FieldMetadataUtil.getNgDynamic(entityType);
                    Object.keys(ngDynamicProperties).forEach(function (propName) {
                        if (propName === targetPropName) {
                            propType = 'NgDynamic';
                            propEntityType = ngDynamicProperties[propName].type;
                        }
                    });
                    return { propType: propType, propEntityType: propEntityType };
                };
                /**
                 * è·åå®ä½çä¸»é®å
                 * @param entityType å®ä½ç±»å
                 */
                EntityUtil.getPrimaryKey = function (entityType) {
                    var primaryNgFiledProp = FieldMetadataUtil.getPrimaryFieldMetadata(entityType);
                    if (primaryNgFiledProp) {
                        return primaryNgFiledProp.dataField;
                    }
                    else {
                        return '';
                    }
                };
                /**
                 * æ¯å¦ä¸ºå¯¹è±¡å±æ§
                 */
                EntityUtil.isObjectProp = function (entityType, targetPropName) {
                    var isObjectProp = false;
                    var ngObjectProperties = FieldMetadataUtil.getNgObjects(entityType);
                    Object.keys(ngObjectProperties).forEach(function (propName) {
                        if (propName === targetPropName) {
                            isObjectProp = true;
                        }
                    });
                    return isObjectProp;
                };
                /**
                 * æ£æ¥æ¯å¦æ¯å¨æåå±æ§
                 */
                EntityUtil.isDynamicProp = function (entityType, targetPropName) {
                    var isDynamicProp = false;
                    var ngDynamicProperties = FieldMetadataUtil.getNgDynamic(entityType);
                    Object.keys(ngDynamicProperties).forEach(function (propName) {
                        if (propName === targetPropName) {
                            isDynamicProp = true;
                        }
                    });
                    return isDynamicProp;
                };
                /**
                 * ä¸ºå®ä½å¢å initialDataå±æ§
                 * @param entity å®ä½å®ä¾
                 * @param initialData é»è®¤å¼å¯¹è±¡
                 */
                EntityUtil.appendInitialData = function (entity, initialData) {
                    var data = Object.assign({}, initialData);
                    delete data.id;
                    delete data.parentID;
                    entity['initialData'] = data;
                };
                return EntityUtil;
            }()));

            // tslint:disable: max-line-length member-ordering
            /**
             * BindingData
             */
            var BindingData = exports('BindingData', /** @class */ (function () {
                function BindingData() {
                    this.paginationInfo = null;
                }
                Object.defineProperty(BindingData.prototype, "bindingPath", {
                    /**
                     * ç»å®è¯¥è·¯å¾
                     */
                    get: function () {
                        if (this.viewModelContext && this.viewModelContext.viewModel.bindingPath) {
                            return this.viewModelContext.viewModel.bindingPath;
                        }
                        return '/';
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(BindingData.prototype, "pagingInfo", {
                    get: function () {
                        return this.paginationInfo;
                    },
                    set: function (pagingInfo) {
                        this.paginationInfo = pagingInfo;
                        this.firePagingChangeEvent();
                    },
                    enumerable: true,
                    configurable: true
                });
                /**
                 * è®¾ç½®åé¡µä¿¡æ¯
                 * @param skip è·³è¿
                 * @param take è·å
                 * @param bindingPath è·¯å¾
                 */
                BindingData.prototype.setPagingInfo = function (skip, take, bindingPath) {
                    if (bindingPath.length < 1 || bindingPath === '/') {
                        this.paginationInfo = Object.assign(this.paginationInfo, { pageSize: take, pageIndex: skip / take + 1 });
                    }
                    else {
                        var pagingInfo_1 = this.paginationInfo || {};
                        var bindingPaths = bindingPath.substr(1).split('/').filter(function (item) { return !!item && item.length > 0; }).map(function (item) { return item.substring(0, item.length - 1); });
                        bindingPaths.forEach(function (path) {
                            if (!pagingInfo_1.hasOwnProperty(path)) {
                                pagingInfo_1[path] = {};
                            }
                            pagingInfo_1 = pagingInfo_1[path];
                        });
                        pagingInfo_1.pageIndex = ((skip / take) || 0) + 1;
                        pagingInfo_1.pageSize = take || 0;
                    }
                    this.firePagingChangeEvent();
                };
                BindingData.prototype.firePagingChangeEvent = function () {
                    this.list.changes.next({
                        type: ChangeType.PaginationInfoChange,
                        path: [],
                        value: this.paginationInfo
                    });
                };
                Object.defineProperty(BindingData.prototype, "changes", {
                    /**
                     * åæ´é
                     */
                    get: function () {
                        return this.list.changes;
                    },
                    enumerable: true,
                    configurable: true
                });
                /**
                 * è®¾ç½®å¼ååæ§è¡å¨å·¥å
                 * @param value å¼ååæ§è¡å¨å·¥å
                 */
                BindingData.prototype.setValueChangeInvokerFactory = function (value) {
                    this.valueChangeInvokerFactory = value;
                };
                /**
                 * åå§åï¼å·²åºå¼ï¼
                 */
                BindingData.prototype.init = function (repository, bindingPath) {
                    this.initByRepository(repository, null);
                };
                /**
                 * æ ¹æ®Repositoryå¯¹BindingDataè¿è¡åå§å
                 */
                BindingData.prototype.initByRepository = function (repository, viewModelContext) {
                    this.viewModelContext = viewModelContext;
                    this.properties = PropertyUtil.getProperties(repository.entityType);
                    this.list = BindingListFactory.create(this.properties);
                    // ä»repositoryåå§åbindingData
                    this.pagingInfo = repository.entityCollection.paginationInfo;
                    // @todo
                    // BindingDataä¸åºè¯¥ç¥éRepositoryï¼å è½½æ°æ®ãå»ºç«å³èå³ç³»çè¿ç¨åºè¯¥è½¬ç§»å°å¤è¾¹
                    EntityUtil.loadRepository(repository, this.list);
                    this.dataTypeInfo = repository.entityTypeInfo;
                    this.extendProperties(this.properties);
                };
                /**
                 * åå§å
                 */
                BindingData.prototype.initByBindingList = function (bindingList, viewModelContext) {
                    this.list = bindingList;
                    this.viewModelContext = viewModelContext;
                    this.extendProperties(this.list.properties);
                };
                /**
                 * è·åpathså¯¹åºçå±æ§å¼
                 * @param  paths å±æ§è·¯å¾æ°ç»
                 * @returns å±æ§å¼
                 */
                BindingData.prototype.getValue = function (paths) {
                    var target = this.list;
                    paths.forEach(function (path) {
                        if (target) {
                            target = target[path];
                        }
                    });
                    return target;
                };
                /**
                 * æ ¹æ®pathsè®¾ç½®å±æ§å¼
                 * @param paths å±æ§è·¯å¾æ°ç»
                 * @param value å±æ§å¼
                 * @param emitEventToView å¦æè®¾ç½®ä¸ºtrueï¼ååéäºä»¶éç¥è®¢éå®çç»ä»¶ãæä»¤å»æ´æ°çé¢ï¼é»è®¤ä¸ºfalseã
                 * @param emitEventToEntity å¦æè®¾ç½®ä¸ºtrueï¼ååæ­¥å»æ´æ°Entityä¸å¯¹åºçå­æ®µï¼é»è®¤ä¸ºtrueã
                 */
                BindingData.prototype.setValue = function (paths, value, emitEventToView, emitEventToEntity) {
                    if (emitEventToView === void 0) { emitEventToView = false; }
                    if (emitEventToEntity === void 0) { emitEventToEntity = true; }
                    if (!paths || paths.length === 0) {
                        throw Error('è·¯å¾ä¸è½ä¸ºç©º');
                    }
                    var parentPaths = paths.slice(0, paths.length - 1);
                    var propName = paths[paths.length - 1];
                    var parent = this.getValue(parentPaths);
                    if (!parent) {
                        throw Error('æ¾ä¸å°è¦è®¾ç½®çå¯¹è±¡');
                    }
                    if (parent instanceof BindingData) {
                        parent = parent.list.currentItem;
                    }
                    else if (parent instanceof BindingList) {
                        parent = parent.currentItem;
                    }
                    if (!!this.valueChangeInvokerFactory) {
                        parent.setValue(propName, value, emitEventToView, emitEventToEntity, null, this.valueChangeInvokerFactory(paths));
                    }
                    else {
                        parent.setValue(propName, value, emitEventToView, emitEventToEntity);
                    }
                };
                /**
                 * æ ¹æ®pathsæ¸ç©ºå±æ§å¼
                 */
                BindingData.prototype.clearValue = function (paths, emitEventToView, emitEventToEntity) {
                    if (emitEventToView === void 0) { emitEventToView = false; }
                    if (emitEventToEntity === void 0) { emitEventToEntity = true; }
                    var initValue;
                    var propInfo = this.dataTypeInfo.getPropInfoByPath(paths);
                    if (propInfo && propInfo.metadataInfo && propInfo.metadataInfo.initValue !== undefined) {
                        initValue = propInfo.metadataInfo.initValue;
                    }
                    else {
                        // åæ¥çå¸®å©æ å°ä¸­ï¼å¼ºè¡çº æ­£äºæ°å¼çæåµï¼ä¿æä¸è´
                        var oldValue = this.getValue(paths);
                        if (typeof oldValue === 'number') {
                            initValue = 0;
                        }
                        else {
                            initValue = '';
                        }
                    }
                    this.setValue(paths, initValue, emitEventToView, emitEventToEntity);
                };
                /**
                 * è·åå½ååè¡¨
                 */
                BindingData.prototype.getList = function () {
                    if (!this.bindingPath || this.bindingPath === '/') {
                        return this.list;
                    }
                    var bindingPath = this.bindingPath.substr(1);
                    var bindingPathArray = bindingPath.split('/').filter(function (part) {
                        return part !== '';
                    });
                    return this.getValue(bindingPathArray);
                };
                /**
                 * è·åå½åå¯¹è±¡
                 */
                BindingData.prototype.getObject = function () {
                    var bindingList = this.getList();
                    return bindingList.currentItem;
                };
                /**
                 * æ©å±BindingDataå±æ§ï¼æ å°BindingDataæææçç»å®åè¡¨å½åè¡çå±æ§ï¼åå°ç»å®å±çº§ã
                 * @param properties å³èå®ä½çå±æ§éå
                 */
                BindingData.prototype.extendProperties = function (properties) {
                    var _this = this;
                    properties.forEach(function (property) {
                        var propName = property.name;
                        Object.defineProperty(_this, propName, {
                            get: function () {
                                return _this.list.currentItem[propName];
                            },
                            set: function (value) {
                                _this.list.currentItem[propName] = value;
                            }
                        });
                    });
                };
                return BindingData;
            }()));

            var BindingDataFactory = exports('BindingDataFactory', /** @class */ (function () {
                function BindingDataFactory() {
                }
                /**
                 * æ ¹æ®Repositoryåå»ºä¸ä¸ªBindingData
                 */
                BindingDataFactory.createFromRepository = function (repository, bindingPath) {
                    var bindingData = new BindingData();
                    var bindingProperties = PropertyUtil.getProperties(repository.entityType);
                    var bindingList = BindingListFactory.create(bindingProperties);
                    bindingData.initByBindingList(bindingList, null);
                    EntityUtil.loadRepository(repository, bindingList);
                    // ä»repositoryåå§åbindingData
                    bindingData.pagingInfo = repository.entityCollection.paginationInfo;
                    return bindingData;
                };
                /**
                 * æ ¹æ®EntityManageråå»ºBindingDataï¼å¹¶å»ºç«ååå³èï¼è¯·å¿ä½¿ç¨ï¼
                 * @internal
                 * @summary
                 * 1ãè¯¥æ¹æ³ææ¶ä»ä¾åé¨ååæµè¯ä½¿ç¨ï¼
                 * 2ãè¯¥æ¹æ³ææ¶åªåå»ºBindingDataï¼ä¸å»ºç«ååå³è
                 */
                BindingDataFactory.createFromEntityManager = function (entityManager, bindingPath) {
                    var bindingData = new BindingData();
                    var bindingProperties = PropertyUtil.getProperties(entityManager.entityType);
                    var bindingList = BindingListFactory.create(bindingProperties);
                    bindingData.initByBindingList(bindingList, null);
                    // åå§åæ°æ®
                    var entities = entityManager.getEntitiesByPath([]);
                    EntityUtil.loadEntities(entities, bindingList);
                    return bindingData;
                };
                /**
                 * æ ¹æ®å·²ç»å­å¨çBindingDataåå»ºä¸ä¸ªæ°çBindingData
                 */
                BindingDataFactory.createFromExistingBindingData = function (existingBindingData, bindingPath) {
                    var bindingData = new BindingData();
                    bindingData.initByBindingList(existingBindingData.list, null);
                    return bindingData;
                };
                return BindingDataFactory;
            }()));

            /**
             * EntityPathè½¬æ¢å¨
             */
            var EntityPathConverter = exports('EntityPathConverter', /** @class */ (function () {
                function EntityPathConverter() {
                }
                /**
                 * è½¬æ¢ä¸ºEntityå¯è¯å«çè·¯å¾
                 * æ ¹ï¼[]
                 * ä¸»è¡¨ï¼['id:xxx', 'name'],
                 * å³èï¼['id:xxx', 'deptInfo', 'id:xxx', 'name']
                 * UDT: ['id:xxx', 'updateInfo', ':', 'createdOn']
                 * ä»è¡¨ï¼['id:xxx', 'edus', 'id:xxx', 'name'],
                 * ä»ä»è¡¨ï¼['id:xxx', 'edus', 'id:xxx', 'grades', 'id:xxx', 'name']
                 */
                EntityPathConverter.toEntityPathArray = function (bindingPathString, bindingData) {
                    var _this = this;
                    var bindingPathArray = BindingPathConverter.toBindingPathArray(bindingPathString);
                    var entityPathArray = [];
                    if (bindingPathArray.length === 0) {
                        return entityPathArray;
                    }
                    // æ ¹èç¹
                    var currentBindingObject = bindingData.list.currentItem;
                    entityPathArray.push(this.createPrimaryKeyPath(currentBindingObject.primaryKey, currentBindingObject.primaryKeyValue));
                    bindingPathArray.forEach(function (propName) {
                        var propInfo = PropertyUtil.getPropertyByName(currentBindingObject.properties, propName);
                        switch (propInfo.type) {
                            case BindingPropertyType.Plain:
                                entityPathArray.push(propName);
                                break;
                            case BindingPropertyType.Object:
                                currentBindingObject = currentBindingObject[propName];
                                entityPathArray.push(propName);
                                entityPathArray.push(_this.createPrimaryKeyPath(currentBindingObject.primaryKey, currentBindingObject.primaryKeyValue));
                                break;
                            case BindingPropertyType.List:
                                var currentBindingList = currentBindingObject[propName];
                                currentBindingObject = currentBindingList.currentItem;
                                entityPathArray.push(propName);
                                entityPathArray.push(_this.createPrimaryKeyPath(currentBindingObject.primaryKey, currentBindingObject.primaryKeyValue));
                                break;
                        }
                    });
                    return entityPathArray;
                };
                /**
                 * åå»ºè·¯å¾ä¸­çä¸»é®é¨å
                 */
                EntityPathConverter.createPrimaryKeyPath = function (primaryKey, primaryKeyValue) {
                    return primaryKey + ":" + primaryKeyValue;
                };
                return EntityPathConverter;
            }()));

            /**
             * å®ä½è·¯å¾æ¯è¾å¨
             */
            var EntityPathComparer = exports('EntityPathComparer', /** @class */ (function () {
                function EntityPathComparer() {
                }
                return EntityPathComparer;
            }()));

            /**
             * è¡¨åè·¯å¾è½¬æ¢ç±»
             */
            var FormPathConverter = exports('FormPathConverter', /** @class */ (function () {
                function FormPathConverter() {
                }
                /**
                 * ControlPathString => BingingPathArray
                 * @params controlPath FormControlå¯¹åºçæ°æ®ç»å®è·¯å¾ï¼BindingDataçbindingPaht + FormControlçbindingï¼
                 * @return BindingPathæ°ç»
                 */
                FormPathConverter.toBindingPathArray = function (formPahtString) {
                    var bindingPathArray = formPahtString.split('.').filter(function (part) {
                        return part !== '';
                    });
                    return bindingPathArray;
                };
                return FormPathConverter;
            }()));

            /**
             * æ°æ®è·¯å¾è½¬æ¢ãæ¯è¾ç­å·¥å·ç±»
             * @summary
             * ----------------------------------------
             * æ¯è¯­ï¼
             * BindingPathï¼æ°ç»å½¢å¼ï¼
             * BindingPathStringï¼BindingPathçå­ç¬¦ä¸²å½¢å¼ï¼ç¨/åéï¼
             * ControlPathStringï¼BindingPathçå­ç¬¦ä¸²å½¢å¼ï¼ç¨.åéï¼
             *
             * EntityPathï¼æ°ç»å½¢å¼ï¼
             * EntityPathStringï¼EntityPathçå­ç¬¦ä¸²å½¢å¼ï¼ä½¿ç¨/åéï¼
             * ----------------------------------------
             */

            /**
             * è·¯å¾å¤çå·¥å·ç±»ï¼å¤ç/PathNode1/PathNode2/...æ ¼å¼çè·¯å¾ï¼
             */
            var DataPathUtil = exports('DataPathUtil', /** @class */ (function () {
                function DataPathUtil() {
                }
                /**
                 * è½¬æ¢æBindingDataå¯è¯å«çè·¯å¾
                 */
                DataPathUtil.convertToBindingPathArray = function (path) {
                    var bindingPathArray = path.split('/').filter(function (part) {
                        return part !== '';
                    });
                    return bindingPathArray;
                };
                /**
                 * è½¬æ¢ä¸ºEntityå¯è¯å«çè·¯å¾
                 * æ ¹ï¼[]
                 * ä¸»è¡¨ï¼['id:xxx', 'name'],
                 * å³èï¼['id:xxx', 'deptInfo', 'id:xxx', 'name']
                 * UDT: ['id:xxx', 'updateInfo', ':', 'createdOn']
                 * ä»è¡¨ï¼['id:xxx', 'edus', 'id:xxx', 'name'],
                 * ä»ä»è¡¨ï¼['id:xxx', 'edus', 'id:xxx', 'grades', 'id:xxx', 'name']
                 */
                DataPathUtil.convertToEntityPathArray = function (path, bindingData) {
                    var _this = this;
                    var bindingPathArray = this.convertToBindingPathArray(path);
                    var entityPathArray = [];
                    if (bindingPathArray.length === 0) {
                        return entityPathArray;
                    }
                    // æ ¹èç¹
                    var currentBindingObject = bindingData.list.currentItem;
                    entityPathArray.push(this.createPrimaryKeyPath(currentBindingObject.primaryKey, currentBindingObject.primaryKeyValue));
                    bindingPathArray.forEach(function (propName) {
                        var propInfo = PropertyUtil.getPropertyByName(currentBindingObject.properties, propName);
                        switch (propInfo.type) {
                            case BindingPropertyType.Plain:
                                entityPathArray.push(propName);
                                break;
                            case BindingPropertyType.Object:
                                currentBindingObject = currentBindingObject[propName];
                                entityPathArray.push(propName);
                                entityPathArray.push(_this.createPrimaryKeyPath(currentBindingObject.primaryKey, currentBindingObject.primaryKeyValue));
                                break;
                            case BindingPropertyType.List:
                                var currentBindingList = currentBindingObject[propName];
                                currentBindingObject = currentBindingList.currentItem;
                                entityPathArray.push(propName);
                                entityPathArray.push(_this.createPrimaryKeyPath(currentBindingObject.primaryKey, currentBindingObject.primaryKeyValue));
                                break;
                        }
                    });
                    return entityPathArray;
                };
                /**
                 * è½¬æ¢ä¸ºRestUrléçè·¯å¾
                 *
                 * è¿åç»æï¼
                 * ä¸»è¡¨ï¼/ï¼ï¼/
                 * ä»è¡¨ï¼/jiwtEdusï¼ï¼/xxx/jiwtEdus
                 * ä»ä»è¡¨ï¼/jiwtEdus/jiwtGradesï¼ï¼ /xxx/jiwtEdus/xxx/jiwtGrades
                 */
                DataPathUtil.convertToRestUrl = function (path, bindingData) {
                    var bindingPathArray = this.convertToBindingPathArray(path);
                    var restPathArray = [];
                    var currentBindingObject = bindingData.list.currentItem;
                    restPathArray.push(currentBindingObject.primaryKeyValue);
                    bindingPathArray.forEach(function (propName) {
                        var propInfo = PropertyUtil.getPropertyByName(currentBindingObject.properties, propName);
                        if (propInfo.type !== BindingPropertyType.List) {
                            throw new Error(propInfo.name + "\u4E0D\u662F\u5B50\u8868\u5BF9\u5E94\u7684\u5C5E\u6027");
                        }
                        var currentBindingList = currentBindingObject[propName];
                        currentBindingObject = currentBindingList.currentItem;
                        restPathArray.push(propName);
                        restPathArray.push(currentBindingObject.primaryKeyValue);
                    });
                    // ç§»é¤æåä¸ä¸ªä¸»é®
                    restPathArray.pop();
                    return '/' + restPathArray.join('/');
                };
                /**
                 * è·åå¶å­èç¹çPath
                 */
                DataPathUtil.getLeafPath = function (path) {
                    var pathArray = DataPathUtil.convertToBindingPathArray(path);
                    return pathArray.pop();
                };
                /**
                 * è·åç¶è·¯å¾
                 */
                DataPathUtil.getParentPath = function (path) {
                    var pathArray = DataPathUtil.convertToBindingPathArray(path);
                    pathArray.pop();
                    return '/' + pathArray.join('/');
                };
                /**
                 * åå»ºè·¯å¾ä¸­çä¸»é®é¨å
                 */
                DataPathUtil.createPrimaryKeyPath = function (primaryKey, primaryKeyValue) {
                    return primaryKey + ":" + primaryKeyValue;
                };
                return DataPathUtil;
            }()));

            // tslint:disable: max-line-length
            /**
             * GUIDåå»ºæå¡
             * @scope éæç±»æ²¡ææä¾Provider
             */
            var Guid = exports('Guid', /** @class */ (function () {
                function Guid(guid) {
                    if (!guid) {
                        throw new TypeError('Invalid argument; `value` has no value.');
                    }
                    this.value = Guid.EMPTY;
                    if (guid && Guid.isGuid(guid)) {
                        this.value = guid;
                    }
                }
                Guid.isGuid = function (guid) {
                    var value = guid.toString();
                    return guid && (guid instanceof Guid || Guid.validator.test(value));
                };
                Guid.create = function () {
                    return new Guid([Guid.gen(2), Guid.gen(1), Guid.gen(1), Guid.gen(1), Guid.gen(3)].join('-'));
                };
                Guid.createEmpty = function () {
                    return new Guid('emptyguid');
                };
                Guid.parse = function (guid) {
                    return new Guid(guid);
                };
                Guid.raw = function () {
                    return [Guid.gen(2), Guid.gen(1), Guid.gen(1), Guid.gen(1), Guid.gen(3)].join('-');
                };
                Guid.gen = function (count) {
                    var out = '';
                    for (var i = 0; i < count; i++) {
                        // tslint:disable-next-line:no-bitwise
                        out += (((1 + Math.random()) * 0x10000) | 0).toString(16).substring(1);
                    }
                    return out;
                };
                Guid.prototype.equals = function (other) {
                    // Comparing string `value` against provided `guid` will auto-call
                    // toString on `guid` for comparison
                    return Guid.isGuid(other) && this.value === other.toString();
                };
                Guid.prototype.isEmpty = function () {
                    return this.value === Guid.EMPTY;
                };
                Guid.prototype.toString = function () {
                    return this.value;
                };
                Guid.prototype.toJSON = function () {
                    return {
                        value: this.value,
                    };
                };
                Guid.validator = new RegExp('^[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}$', 'i');
                Guid.EMPTY = '00000000-0000-0000-0000-000000000000';
                return Guid;
            }()));

            /*
             * @Author: aalizzwell
             * @Date: 2019-10-25 13:30:52
             * @Last Modified by:   aalizzwell
             * @Last Modified time: 2019-10-25 13:30:52
             */
            var isObservable = exports('isObservable', function (value) {
                if (!value) {
                    return false;
                }
                if (value[Symbol.observable] && value === value[Symbol.observable]()) {
                    return true;
                }
                if (value['@@observable'] && value === value['@@observable']()) {
                    return true;
                }
                if (value instanceof Observable) {
                    return true;
                }
                return false;
            });

            /**
             * ãå¯¹è±¡å±æ§åæ°æ®ãåç§°
             */
            var OBJECT_PROP_META = exports('OBJECT_PROP_META', 'ObjectPropMeta');
            /**
             * ãå¯¹è±¡å±æ§åæ°æ®è£é¥°å¨å·¥åãçå·¥å
             */
            function makeObjectPropMetaDecorator(options) {
                if (ObjectUtil.isPlainObject(options)) {
                    return options;
                }
                var type = typeof options;
                if (type === 'string') {
                    return {
                        dataField: options
                    };
                }
                if (type === 'function') {
                    return {
                        type: options
                    };
                }
            }
            /**
             * å¯¹è±¡å±æ§åæ°æ®è£é¥°å¨å·¥å
             */
            var ObjectPropMeta = exports('ObjectPropMeta', makePropDecorator(OBJECT_PROP_META, makeObjectPropMetaDecorator));

            /**
             * ãå¨æå¯¹è±¡åæ°æ®è£é¥°å¨ãåç§°
             */
            var DYNAMIC_PROP_META = exports('DYNAMIC_PROP_META', 'DynamicPropMeta');
            /**
             * ãå¨æå¯¹è±¡åæ°æ®è£é¥°å¨å·¥åãçå·¥å
             */
            function makeDynamicPropMetaDecorator(options) {
                if (ObjectUtil.isPlainObject(options)) {
                    return options;
                }
                var type = typeof options;
                if (type === 'string') {
                    return {
                        dataField: options
                    };
                }
                if (type === 'function') {
                    return {
                        type: options
                    };
                }
            }
            /**
             * å®ä½å±æ§æ³¨è§£
             */
            var DynamicPropMeta = exports('DynamicPropMeta', makePropDecorator(DYNAMIC_PROP_META, makeDynamicPropMetaDecorator));

            /**
             * ãåè¡¨å±æ§åæ°æ®ãåç§°
             */
            var LIST_PROP_META = exports('LIST_PROP_META', 'ListPropMeta');
            /**
             * ãåè¡¨å±æ§åæ°æ®è£é¥°å¨å·¥åãçå·¥å
             */
            function makeListPropMetaDecorator(options) {
                if (ObjectUtil.isPlainObject(options)) {
                    return options;
                }
                var type = typeof options;
                if (type === 'string') {
                    return {
                        dataField: options
                    };
                }
                if (type === 'function') {
                    return {
                        type: options
                    };
                }
            }
            /**
             * åè¡¨å±æ§è£é¥°å¨å·¥å
             */
            var ListPropMeta = exports('ListPropMeta', makePropDecorator(LIST_PROP_META, makeListPropMetaDecorator));

            /**
             * å±æ§æ³¨è§£å¨éç¨æ¹æ³
             */
            var FieldMetadataUtil = exports('FieldMetadataUtil', /** @class */ (function () {
                function FieldMetadataUtil() {
                }
                /**
                 * è·åå®ä½ææçç®åå±æ§åæ°æ®
                 * @param target å®ä½ç±»å
                 * @returns å½¢å¦ï¼{[propName: string]: NgObjectProperty}
                 */
                FieldMetadataUtil.getNgFields = function (target) {
                    return MetadataUtil.getPropsMetadatasByName(target, PRIMITIVE_PROP_META);
                };
                /**
                 * è·åæä¸ªç®åå±æ§çåæ°æ®
                 */
                FieldMetadataUtil.getNgField = function (target, propName) {
                    var ngFields = this.getNgFields(target);
                    var ngField = ngFields[propName];
                    return ngField;
                };
                /**
                 * è·åå®ä½å±æ§å¨åå§æ°æ®ä¸­çå±æ§å
                 */
                FieldMetadataUtil.getDataField = function (target, propName) {
                    var ngField = this.getNgField(target, propName);
                    return ngField.dataField || propName;
                };
                /**
                 * è·åæ æ³¨ä¸ºNgObjectçå±æ§çåæ°æ®
                 * @param target å®ä½ç±»å
                 * @returns å½¢å¦ï¼{[propName: string]: NgObjectProperty}
                 */
                FieldMetadataUtil.getNgObjects = function (target) {
                    return MetadataUtil.getPropsMetadatasByName(target, OBJECT_PROP_META);
                };
                FieldMetadataUtil.getNgDynamic = function (target) {
                    return MetadataUtil.getPropsMetadatasByName(target, DYNAMIC_PROP_META);
                };
                /**
                 * è·åæ æ³¨ä¸ºNgListçå±æ§çåæ°æ®
                 * @param target å®ä½ç±»å
                 * @returns å½¢å¦ï¼{[propName: string]: NgListProperty}
                 */
                FieldMetadataUtil.getNgList = function (target) {
                    return MetadataUtil.getPropsMetadatasByName(target, LIST_PROP_META);
                };
                /**
                 * è·åå®ä½æ æ³¨ä¸ºä¸»é®çå±æ§åæ°æ®
                 * @param target å®ä½ç±»å
                 */
                FieldMetadataUtil.getPrimaryFieldMetadata = function (target) {
                    var ngFieldObj = FieldMetadataUtil.getNgFields(target);
                    var primaryKey = Object.keys(ngFieldObj).find(function (prop) {
                        return ngFieldObj[prop].primary;
                    });
                    if (primaryKey) {
                        var propMeta = ngFieldObj[primaryKey];
                        propMeta.property = primaryKey;
                        if (!propMeta.dataField) {
                            propMeta.dataField = primaryKey;
                        }
                        return propMeta;
                    }
                    return undefined;
                };
                /**
                 * è·åä¸»é®åç§°ï¼æ²¡æä¸»é®æ¶è¿åç©ºå­ç¬¦ä¸²
                 */
                FieldMetadataUtil.getPrimaryKey = function (entityType) {
                    var primaryNgField = this.getPrimaryFieldMetadata(entityType);
                    if (!primaryNgField) {
                        return '';
                    }
                    return primaryNgField.property;
                };
                return FieldMetadataUtil;
            }()));

            /**
             * å®ä½åæ°æ®å·¥å·ç±»
             */
            var EntityMetadataUtil = exports('EntityMetadataUtil', /** @class */ (function () {
                function EntityMetadataUtil() {
                }
                /**
                 * è·åææå±æ§
                 * @todoï¼å°è£æ ¹æ®åºç±»è·åææåæ°æ®çæ¹æ³ï¼è§£å³éå¤ä»£ç 
                 */
                EntityMetadataUtil.getAllNgProperties = function (entityType) {
                    var ngPlainProperties = this.getNgFieldProperties(entityType);
                    var ngEntityProperties = this.getNgObjectProperties(entityType);
                    var ngDynamicProperties = this.getNgDynamicProperties(entityType);
                    var ngEntityListProperties = this.getNgObjectProperties(entityType);
                    return Object.assign({}, ngPlainProperties, ngEntityProperties, ngDynamicProperties, ngEntityListProperties);
                };
                /**
                 * è·åNgFieldçå±æ§åæ°æ®
                 */
                EntityMetadataUtil.getNgFieldProperties = function (entityType) {
                    return MetadataUtil.getPropsMetadatasByName(entityType, PRIMITIVE_PROP_META);
                };
                /**
                 * è·åNgObjectå±æ§åæ°æ®
                 */
                EntityMetadataUtil.getNgObjectProperties = function (entityType) {
                    return MetadataUtil.getPropsMetadatasByName(entityType, OBJECT_PROP_META);
                };
                /**
                 * è·åNgDynamicå±æ§åæ°æ®
                 */
                EntityMetadataUtil.getNgDynamicProperties = function (entityType) {
                    return MetadataUtil.getPropsMetadatasByName(entityType, DYNAMIC_PROP_META);
                };
                /**
                 * è·åNgListå±æ§åæ°æ®
                 */
                EntityMetadataUtil.getNgListProperties = function (entityType) {
                    return MetadataUtil.getPropsMetadatasByName(entityType, LIST_PROP_META);
                };
                /**
                 * è·åä¸»é®å±æ§åæ°æ®
                 */
                EntityMetadataUtil.getPrimaryKeyProperty = function (entityType) {
                    var primaryKeyProperty;
                    var ngPlainProperties = EntityMetadataUtil.getNgFieldProperties(entityType);
                    Object.keys(ngPlainProperties).forEach(function (propName) {
                        var ngProperty = ngPlainProperties[propName];
                        if (ngProperty.primary === true) {
                            primaryKeyProperty = ngProperty;
                        }
                    });
                    return primaryKeyProperty;
                };
                return EntityMetadataUtil;
            }()));

            /*
             * @Author: Witt
             * @Date: 2018-12-07 09:05:09
             * @Last Modified by: Witt
             * @Last Modified time: 2018-12-27 20:35:02
             */
            /**
             * å®ä½ç±»åä¿¡æ¯
             * @todoï¼
             * 1ãæé æ¶ä¸åºè¯¥è¯å«Entityæ¨¡åçä¸è¥¿ï¼åºè¯¥æ¯æ´æ½è±¡çï¼
             * 2ãæé å½æ°åºè¯¥æ¥æ¶ä¸ä¸ªBuilderæ¥å£ï¼ç±Entityæèå¶ä»å®ç°å±æ¥å®ç°è¿ä¸ªæ¥å£ã
             */
            var DataTypeInfo = exports('DataTypeInfo', /** @class */ (function () {
                /**
                 * æé å½æ°
                 * @todoï¼ä¸åºè¯¥è¯å«
                 */
                function DataTypeInfo(type) {
                    this.type = type;
                    this.primaryKey = '';
                    this.foreignKey = '';
                    this.propInfoMap = new Map();
                    this.collectPropInfos();
                }
                Object.defineProperty(DataTypeInfo.prototype, "isValueObject", {
                    /**
                     * æ¯å¦ä¸ºå¼å¯¹è±¡
                     */
                    get: function () {
                        return !this.primaryKey;
                    },
                    enumerable: true,
                    configurable: true
                });
                /**
                 * è·åå¨é¨å±æ§ä¿¡æ¯
                 */
                DataTypeInfo.prototype.getPropInfos = function () {
                    return Array.from(this.propInfoMap.values());
                };
                /**
                 * è·åå¨é¨å±æ§çåç§°
                 */
                DataTypeInfo.prototype.getPropNames = function () {
                    var propNames = [];
                    var propInfos = this.getPropInfos();
                    propInfos.forEach(function (propInfo) {
                        propNames.push(propInfo.name);
                    });
                    return propNames;
                };
                /**
                 * æ ¹æ®groupè·åå±æ§ä¿¡æ¯æ°ç»
                 */
                DataTypeInfo.prototype.getPropInfosByGroup = function (group) {
                    var allPropInfos = Array.from(this.propInfoMap.values());
                    var propInfos = allPropInfos.filter(function (propInfo) {
                        return propInfo.group === group;
                    });
                    return propInfos;
                };
                /**
                 * æ ¹æ®groupè·åå±æ§åç§°æ°ç»
                 * @param group å±æ§åç»
                 */
                DataTypeInfo.prototype.getPropNamesByGroup = function (group) {
                    var propNames = [];
                    var propInfos = this.getPropInfosByGroup(group);
                    propInfos.forEach(function (propInfo) {
                        propNames.push(propInfo.name);
                    });
                    return propNames;
                };
                /**
                 * æ ¹æ®propNameè·åå±æ§ä¿¡æ¯
                 */
                DataTypeInfo.prototype.getPropInfoByName = function (propName) {
                    if (this.propInfoMap.has(propName)) {
                        return this.propInfoMap.get(propName);
                    }
                    return null;
                };
                /**
                 * æ ¹æ®pathè·åå±æ§ä¿¡æ¯
                 */
                DataTypeInfo.prototype.getPropInfoByPath = function (path) {
                    // åå¤å¶ï¼é²æ­¢shiftæ¹æ³äº§çæ±¡æ
                    var arrPath = path.concat([]);
                    if (arrPath.length === 0) {
                        throw Error("\u5C5E\u6027\u8DEF\u5F84\u4E0D\u80FD\u4E3A\u7A7A");
                    }
                    // å¾ªç¯æ¥æ¾
                    var typeInfo = this;
                    var propInfo = null;
                    while (typeInfo && arrPath.length > 0) {
                        var propName = arrPath.shift();
                        propInfo = typeInfo.getPropInfoByName(propName);
                        if (!propInfo) {
                            throw Error("\u8DEF\u5F84" + path + "\u4E2D\u5B58\u5728\u4E0D\u6B63\u786E\u7684\u8282\u70B9" + propName + "\uFF0C\u8BF7\u68C0\u67E5");
                        }
                        typeInfo = propInfo.typeInfo;
                        // å¦ææ¯å¨æåï¼å¹¶ä¸è·¯å¾æ°ç»éè¿æå±æ§ï¼ç»ä¸è®¾ç½®ä¸ºnull(å¨æåä¸åæè¿°å±æ§ä¿¡æ¯)
                        if (propInfo.group === DataPropGroup.Dynamic && arrPath.length > 0) {
                            propInfo = null;
                            typeInfo = null;
                        }
                    }
                    return propInfo;
                };
                /**
                 * æ ¹æ®pathè·åå¯¹åºå±æ§çTypeInfo
                 */
                DataTypeInfo.prototype.getTypeInfoByPath = function (path) {
                    // ç©ºæ°ç»æ¶è¿å
                    if (path.length === 0) {
                        return this;
                    }
                    // è·åå¯¹åºå±æ§ä¿¡æ¯
                    var propInfo = this.getPropInfoByPath(path);
                    if (!propInfo.typeInfo) {
                        throw Error("\u8DEF\u5F84" + path + "\u65E0\u6CD5\u5B9A\u4F4D\u5230\u4E00\u4E2AEntityTypeInfo\uFF0C\u8BF7\u68C0\u67E5");
                    }
                    return propInfo.typeInfo;
                };
                /**
                 * è·åä¸»é®çå±æ§ä¿¡æ¯
                 */
                DataTypeInfo.prototype.getPrimaryKeyPropInfo = function () {
                    return this.getPropInfoByName(this.primaryKey);
                };
                /**
                 * æ ¹æ®nameè·åå½±å°å
                 */
                DataTypeInfo.prototype.getPropMappingByName = function (name) {
                    var propInfo = this.getPropInfoByName(name);
                    if (!propInfo) {
                        return '';
                    }
                    return propInfo.mapping;
                };
                /**
                 * æ ¹æ®pathè·åæ å°å
                 */
                DataTypeInfo.prototype.getPropMappingByPath = function (path) {
                    var propInfo = this.getPropInfoByPath(path);
                    if (!propInfo) {
                        return '';
                    }
                    return propInfo.mapping;
                };
                /**
                 * æ£æ¥å±æ§æ¯å¦å±äºç¹å®çåç»
                 */
                DataTypeInfo.prototype.checkPropGroup = function (propName, propGroup) {
                    var propInfo = this.getPropInfoByName(propName);
                    if (propInfo && propInfo.group === propGroup) {
                        return true;
                    }
                    return false;
                };
                /**
                 * --------------------------------------------------------------------------------
                 * å±æ§åæ°æ® => å±æ§æè¿°ä¿¡æ¯
                 * --------------------------------------------------------------------------------
                 */
                /**
                 * æéææå±æ§ä¿¡æ¯
                 * @todoï¼æ¶é¤éå¤ä»£ç ï¼tsä¸æ¯æinterfaceç±»åæ£æµï¼ææ¶éè¿éåå®ç°ã
                 */
                DataTypeInfo.prototype.collectPropInfos = function () {
                    var _this = this;
                    // ç®åå±æ§
                    var ngPlainProperties = EntityMetadataUtil.getNgFieldProperties(this.type);
                    Object.keys(ngPlainProperties).forEach(function (propName) {
                        var ngProperty = ngPlainProperties[propName];
                        if (ngProperty.primary === true) {
                            _this.primaryKey = propName;
                        }
                        if (ngProperty.foreign === true) {
                            _this.foreignKey = propName;
                        }
                        _this.addPropInfo(DataPropGroup.Primitive, propName, ngProperty.dataField, null, ngProperty);
                    });
                    // å®ä½å±æ§
                    var ngEntityProperties = EntityMetadataUtil.getNgObjectProperties(this.type);
                    Object.keys(ngEntityProperties).forEach(function (propName) {
                        var ngProperty = ngEntityProperties[propName];
                        _this.addPropInfo(DataPropGroup.Object, propName, ngProperty.dataField, ngProperty.type, ngProperty);
                    });
                    // å¨æå®ä½å±æ§
                    var ngDynamicProperties = EntityMetadataUtil.getNgDynamicProperties(this.type);
                    Object.keys(ngDynamicProperties).forEach(function (propName) {
                        var ngProperty = ngDynamicProperties[propName];
                        _this.addPropInfo(DataPropGroup.Dynamic, propName, ngProperty.dataField, null, ngProperty);
                    });
                    // å®ä½åè¡¨å±æ§
                    var ngEntityListProperties = EntityMetadataUtil.getNgListProperties(this.type);
                    Object.keys(ngEntityListProperties).forEach(function (propName) {
                        var ngProperty = ngEntityListProperties[propName];
                        _this.addPropInfo(DataPropGroup.List, propName, ngProperty.dataField, ngProperty.type, ngProperty);
                    });
                };
                /**
                 * æ·»å å±æ§ä¿¡æ¯
                 */
                DataTypeInfo.prototype.addPropInfo = function (group, name, mapping, type, metadataInfo) {
                    // æ²¡æè®¾ç½®å½±å°æ¶ï¼ç¨å±æ§ååå½å½±å°
                    mapping = mapping ? mapping : name;
                    var typeInfo = null;
                    if (type) {
                        typeInfo = new DataTypeInfo(type);
                    }
                    var propInfo = { group: group, name: name, mapping: mapping, typeInfo: typeInfo, metadataInfo: metadataInfo };
                    this.propInfoMap.set(name, propInfo);
                };
                return DataTypeInfo;
            }()));

            /**
             * æ°æ®Pathå·¥åç±»
             */
            var DataPathCreator = exports('DataPathCreator', /** @class */ (function () {
                function DataPathCreator() {
                }
                /**
                 * å°é¿è·¯å¾æ°ç»æå­ç¬¦ä¸²è½¬æ¢ä¸º
                 * @param fullPathArrayOrString è·¯å¾æ°ç»æå­ç¬¦ä¸²
                 * @param repository å®ä½ä»åº
                 * @summary
                 * 1ãé¿è·¯å¾æ ¼å¼è¯´æåèï¼data-path.md
                 */
                DataPathCreator.createByLongPathFromRoot = function (fullPathArrayOrString, entityManager) {
                    var dataPath = new DataPath();
                    var fullPathArray = fullPathArrayOrString;
                    if (!fullPathArray || fullPathArray.length === 0) {
                        return dataPath;
                    }
                    var currentNodeInfo = {
                        nodeValue: fullPathArray.shift(),
                        nodeType: DataPathNodeType.DataId,
                        entityTypeInfo: new DataTypeInfo(entityManager.entityType)
                    };
                    while (currentNodeInfo) {
                        dataPath.push(currentNodeInfo.nodeType, currentNodeInfo.nodeValue);
                        // å¤çä¸ä¸ä¸ªèç¹
                        var nextNodeValue = fullPathArray.shift();
                        if (!nextNodeValue || !currentNodeInfo.entityTypeInfo) {
                            break;
                        }
                        currentNodeInfo = this.getNextPathNodeInfo(currentNodeInfo, nextNodeValue);
                    }
                    return dataPath;
                };
                /**
                 * è·åä¸ä¸ä¸ªè·¯å¾èç¹çä¿¡æ¯
                 * @param parentNodeInfo å½åè·¯å¾èç¹ä¿¡æ¯
                 * @param nextNodeValue ä¸ä¸ä¸ªè·¯å¾èç¹çå¼
                 * @summary
                 * 1ãè¿ä¸ªéå½åçå¾ç»ï¼è¯´ææ°æ®ç»æè®¾è®¡ä¸åçï¼
                 * 2ãå¤ä¸ªå ç´ æ··ç¨äºä¸ä¸ªç»æï¼
                 */
                DataPathCreator.getNextPathNodeInfo = function (parentNodeInfo, nextNodeValue) {
                    var parentNodeValue = parentNodeInfo.nodeValue;
                    var parentNodeType = parentNodeInfo.nodeType;
                    var parentEntityTypeInfo = parentNodeInfo.entityTypeInfo;
                    if (!nextNodeValue || !parentEntityTypeInfo) {
                        return null;
                    }
                    var nextPathNodeInfo = {
                        nodeValue: nextNodeValue,
                        nodeType: null,
                        entityTypeInfo: null
                    };
                    // DataNodeType=Listï¼ä¸ä¸èç¹è¯å®æ¯Objectï¼å¹¶ä¸EntityTypeInfoä¸å
                    if (parentNodeType === DataPathNodeType.DataId) {
                        nextPathNodeInfo.nodeType = DataPathNodeType.PropName;
                        nextPathNodeInfo.entityTypeInfo = parentEntityTypeInfo;
                    }
                    else {
                        // DataNodeType=Objectï¼å¿ç¶å¯¹åºä¸ä¸ªå±æ§ä¿¡æ¯
                        var nextPropInfo = parentEntityTypeInfo.getPropInfoByName(parentNodeValue);
                        if (nextPropInfo.group === DataPropGroup.List) {
                            // EntityPropGroup=EntityListï¼ä¸ä¸ä¸ªèç¹æ¯Listç±»åã
                            nextPathNodeInfo.nodeType = DataPathNodeType.DataId;
                            nextPathNodeInfo.entityTypeInfo = nextPropInfo.typeInfo;
                        }
                        else {
                            // EntityPropGroup=Entityï¼       ä¸çº§entityTypeInfoä¸º
                            // EntityPropGroup=Dynamic|Plainï¼null
                            nextPathNodeInfo.nodeType = DataPathNodeType.PropName;
                            nextPathNodeInfo.entityTypeInfo = nextPropInfo.group === DataPropGroup.Object ? nextPropInfo.typeInfo : null;
                        }
                    }
                    return nextPathNodeInfo;
                };
                /**
                 * @param fullPathArrayOrString è·¯å¾æ°ç»æå­ç¬¦ä¸²
                 * @param repository å®ä½ä»åº
                 * @summary
                 * 1ãé¿è·¯å¾æ ¼å¼è¯´æåèï¼data-path.md
                 * 2ãshortPathArrayOrStringææ¶åªæ¯æå­ç¬¦ä¸²æ°ç»
                 */
                DataPathCreator.createByShortPathFromRoot = function (shortPathArrayOrString, entityManager, bindingData) {
                    var dataPath = new DataPath();
                    var shortPathArray = shortPathArrayOrString;
                    // æ ¹èç¹
                    var currentBindingObject = bindingData.list.currentItem;
                    var currentEntityTypeInfo = new DataTypeInfo(entityManager.entityType);
                    dataPath.push(DataPathNodeType.DataId, currentBindingObject.primaryKeyValue);
                    // éåä¸çº§èç¹
                    shortPathArray.forEach(function (propName) {
                        var propInfo = currentEntityTypeInfo.getPropInfoByName(propName);
                        switch (propInfo.group) {
                            case DataPropGroup.Primitive:
                                dataPath.push(DataPathNodeType.PropName, propName);
                                break;
                            case DataPropGroup.Object:
                                currentBindingObject = currentBindingObject[propName];
                                currentEntityTypeInfo = propInfo.typeInfo;
                                dataPath.push(DataPathNodeType.PropName, propName);
                                break;
                            case DataPropGroup.List:
                                var currentBindingList = currentBindingObject[propName];
                                currentBindingObject = currentBindingList.currentItem;
                                currentEntityTypeInfo = propInfo.typeInfo;
                                dataPath.push(DataPathNodeType.PropName, propName);
                                dataPath.push(DataPathNodeType.DataId, currentBindingObject.primaryKeyValue);
                                break;
                        }
                    });
                    return dataPath;
                };
                return DataPathCreator;
            }()));

            /**
             * è·åpathå¯¹åºçå®ä½
             * @summary
             * å³äºpathçæ ¼å¼å¦ä¸ï¼
             * - ä¸»è¡¨ï¼[parentId]
             * - ä¸»è¡¨å³è: [parentId, assoInfo]
             * - ä»è¡¨: [parentId, child1s, child1Id]
             * - ä»è¡¨å³èï¼[parentId, child1s, child1Id, assoInfo]
             * - ä»ä»è¡¨: [parentId, child1s, child1Id, grand11s, grand11Id]
             * - ä»ä»è¡¨å³èï¼[parentId, child1s, child1Id, grand11s, grand11Id, assoInfo]
             */

            var PARENT_PATH = exports('PARENT_PATH', '__PARENT_PATH__');
            var PARENT_CLASS = exports('PARENT_CLASS', '__PARENT__');

            /**
             * åå»ºå®ä½
             * @param entityType å®ä½ç±»å
             * @param entityData å®ä½æ°æ®
             */
            function createEntity(entityType, entityData) {
                var entity = new entityType(entityData);
                return entity;
            }
            /**
             * æ¹éåå»ºå®ä½
             * @param entityType     å®ä½ç±»å
             * @param entityListData å®ä½æ°æ®æ°ç»
             */
            function createEntities(entityType, entityListData) {
                var entities = [];
                entityListData.forEach(function (entityData) {
                    var entity = createEntity(entityType, entityData);
                    entities.push(entity);
                });
                return entities;
            }
            /**
             * å·²å¼ç¨ï¼è¯·ä½¿ç¨createEntityæ¹æ³ä»£æ¿ã
             */
            function EntityFactory(T, data) {
                var entity = new T(data);
                return entity;
            }

            /**
             * å®ä½éååè¡¨
             */
            var EntityList = exports('EntityList', /** @class */ (function () {
                // #endregion
                /**
                 * @param data JSONæ°æ®éå
                 * @param type éåä¸­çå®ä½ç±»å
                 */
                function EntityList(data, type) {
                    var _this = this;
                    /**
                     * å·²åºå¼ï¼è¯·å¿ä½¿ç¨
                     */
                    this.listChanged = new Subject();
                    /**
                     * å·²åºå¼ï¼è¯·å¿ä½¿ç¨
                     */
                    this.changeSet = new ChangeSet();
                    // #endregion
                    // #region å¬æå±æ§
                    /**
                     * éåæ¹åæ¶è§¦å(æ°å¢ãè¡è®°å½ä¿®æ¹ãå é¤)
                     * @event
                     */
                    this.onListChanged = this.listChanged.asObservable();
                    this.clear();
                    if (data) {
                        // this.loadEntities(data);
                        data.forEach(function (item) {
                            _this.initEntity(EntityFactory(type, item));
                        });
                    }
                }
                Object.defineProperty(EntityList.prototype, "items", {
                    /**
                     * è·åé¡¹éå
                     */
                    get: function () {
                        return this.rawData;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(EntityList.prototype, "changes", {
                    /**
                     * åè¡¨åæ´é
                     */
                    get: function () {
                        return this.changeSet.changes;
                    },
                    enumerable: true,
                    configurable: true
                });
                /**
                 * è¿­ä»£å¨
                 */
                EntityList.prototype[Symbol.iterator] = function () {
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0: return [5 /*yield**/, __values(this.items)];
                            case 1:
                                _a.sent();
                                return [2 /*return*/];
                        }
                    });
                };
                // #region å¬ææ¹æ³
                /** å è½½å®ä½åè¡¨ */
                EntityList.prototype.loadEntities = function (entities) {
                    var _this = this;
                    this.clear();
                    entities.forEach(function (entity) {
                        _this.initEntity(entity);
                    });
                    // åéLoadåæ´
                    var changeItem = {
                        path: [],
                        value: entities,
                        preValue: undefined,
                        type: ModifyType.Load
                    };
                    this.setChanges(changeItem);
                };
                /**
                 * æ¸ç©º
                 */
                EntityList.prototype.clear = function () {
                    this.rawData = [];
                };
                /**
                 * æ·»å å®ä½å¯¹è±¡å°éåä¸­ï¼å¹¶è¿åæ°å çå¯¹è±¡
                 * @param entity å®ä½å¯¹è±¡
                 */
                EntityList.prototype.appendNew = function (entity) {
                    var newEntity = this.initEntity(entity);
                    // æ°å¢åæ´
                    var changeItem = {
                        path: [],
                        value: [newEntity],
                        preValue: undefined,
                        type: ModifyType.Add
                    };
                    this.setChanges(changeItem);
                    return newEntity;
                };
                /**
                 * è¿½å å®ä½
                 */
                EntityList.prototype.appendEntity = function (entity) {
                    var newEntity = this.initEntity(entity);
                    // æ°å¢åæ´
                    var changeItem = {
                        path: [],
                        value: [newEntity],
                        preValue: undefined,
                        type: ModifyType.Add
                    };
                    this.setChanges(changeItem);
                };
                /**
                 * æ¹éè¿½å å®ä½
                 */
                EntityList.prototype.appendEntities = function (entities) {
                    var _this = this;
                    var newEntites = entities.map(function (entity) {
                        return _this.initEntity(entity);
                    });
                    var changeItem = {
                        path: [],
                        value: newEntites,
                        preValue: undefined,
                        type: ModifyType.Add
                    };
                    this.setChanges(changeItem);
                };
                /**
                 * å é¤æå®ä¸»é®ID çå®ä½å¯¹è±¡ï¼è¿åå¸å°ï¼true å é¤æåï¼false å é¤å¤±è´¥
                 * @param primaryId ä¸»é®ID
                 */
                EntityList.prototype.remove = function (primaryId) {
                    var _a;
                    var total = this.count();
                    var indexToRemove = this.rawData.findIndex(function (entity) {
                        return entity.primaryValue === primaryId;
                    });
                    if (indexToRemove === -1) {
                        return false;
                    }
                    var entityToRemove = this.rawData[indexToRemove];
                    this.rawData.splice(indexToRemove, 1);
                    // å é¤åæ´
                    var changeItem = {
                        path: [],
                        value: (_a = {}, _a[entityToRemove.primaryProperty.dataField] = primaryId, _a),
                        preValue: undefined,
                        type: ModifyType.Remove
                    };
                    this.updateIndex(total);
                    this.setChanges(changeItem);
                    return true;
                };
                /**
                 * ä»éåä¸­è·åæå®IDå¼çå®ä½å¯¹è±¡
                 * @param id ä¸»é®å¼
                 */
                EntityList.prototype.get = function (id) {
                    return this.items.find(function (item) {
                        return item.primaryValue === id;
                    });
                };
                /**
                 * å°åæ´è®°å½æ·»å å°éååæ´éä¸­
                 * @param value åæ´è®°å½
                 */
                EntityList.prototype.setChanges = function (modinfo) {
                    // åappå±åéçåæ´
                    this.listChanged.next(modinfo);
                    // æé åchangeSetä¸­æ·»å çchagne
                    var change = Object.assign({}, modinfo);
                    if (modinfo.type === ModifyType.Add && modinfo.value[0] instanceof Entity) {
                        change.value = [modinfo.value[0].data];
                    }
                    this.changeSet.append(change);
                };
                /** éåæ»è®°å½æ° */
                EntityList.prototype.count = function () {
                    return this.items.length;
                };
                /**
                 * è·åå®ä½å¯¹è±¡çç´¢å¼å¼
                 */
                EntityList.prototype.indexOf = function (entity) {
                    return this.items.indexOf(entity);
                };
                /**
                 * è®¡ç®éåä¸­æä¸ªå±æ§çæ»å
                 * @param propertyName å±æ§åç§°
                 */
                EntityList.prototype.sum = function (propertyName) {
                    if (this.count() === 0) {
                        return 0;
                    }
                    return this.items.reduce(function (val, curr) {
                        return val + curr[propertyName];
                    }, 0);
                };
                /**
                 * å·²åºå¼ï¼è¯·ä½¿ç¨toJSONæ¹æ³ä»£æ¿
                 * @deprecated
                 */
                EntityList.prototype.toJson = function () {
                    return this.rawData;
                };
                /**
                 * è½¬æ¢ä¸ºJSONæ ¼å¼
                 */
                EntityList.prototype.toJSON = function () {
                    var result = [];
                    this.items.forEach(function (entity) {
                        result.push(entity.toJSON());
                    });
                    return result;
                };
                EntityList.prototype.toArray = function () {
                    return this.items;
                };
                // #endregion
                // #region ç§ææ¹æ³
                /**
                 * å®ä½åå§å
                 * @param entity å®ä½
                 */
                EntityList.prototype.initEntity = function (entity) {
                    var _this = this;
                    entity[PARENT_CLASS] = this;
                    entity[PARENT_PATH] = this[PARENT_PATH];
                    entity.onValueChanged.subscribe(function (v) {
                        var path = v.path;
                        var value = v.value;
                        var preValue = v.preValue;
                        var operator = v.type;
                        var subChanges = { path: path, value: value, preValue: preValue, type: operator };
                        _this.setChanges(subChanges);
                    });
                    // TODO: æ·»å æ°æ®éªè¯é»è¾ä»£ç 
                    var newLength = this.rawData.push(entity);
                    this[newLength - 1] = entity;
                    return entity;
                };
                /**
                 * æ´æ°ç´¢å¼
                 * @param total æ»è®°å½æ°
                 */
                EntityList.prototype.updateIndex = function (total) {
                    var _this = this;
                    for (var i = 0; i < total; i++) {
                        delete this[i];
                    }
                    this.rawData.forEach(function (entity, index) {
                        _this[index] = entity;
                    });
                };
                /**
                 * è·åå±æ§åç§°
                 */
                EntityList.prototype.getPropertyName = function () {
                    var path = this[PARENT_PATH];
                    if (path && path.length) {
                        var name_1 = path[path.length - 1];
                        return name_1;
                    }
                    return undefined;
                };
                return EntityList;
            }()));

            function EntityFactory$1(T, data) {
                var entity = new T(data);
                return entity;
            }
            /**
             * @author Lucas Huang
             * å®ä½æ½è±¡åºç±»ï¼ææå®ä½å¿é¡»æ©å±èªEntity
             *
             * ### ä½¿ç¨ç¤ºä¾
             * ```
             * export class UserEntity extends Entity {
             *    userId: string;
             *    userName: string;
             *
             *    constructor(data: any){
             *        super(data);
             *    }
             * }
             * ```
             */
            var Entity = exports('Entity', /** @class */ (function () {
                // #endregion
                /**
                 * @param data JSONæ°æ®
                 */
                function Entity(data) {
                    // #region ç§æãä¿æ¤å±æ§
                    /**
                     * éªè¯éè¯¯éå
                     */
                    this.validErrors = {};
                    /**
                     * å¢éåæ´éå
                     */
                    this.changeSet = new ChangeSet();
                    /**
                     * æ¯å¦æ­£å¨éªè¯
                     */
                    this.isValidating = false;
                    /**
                     * æ°æ°æ®
                     */
                    this.newData = undefined;
                    // #endregion
                    // #region å¬æå±æ§
                    /**
                     * åæ´æµ
                     */
                    this.valueChanged = new Subject();
                    /**
                     * å±æ§å¼æ¹åæ¶è§¦å
                     *
                     * ### ä½¿ç¨ç¤ºä¾
                     * ```
                     *  const entity = new UserEntity(data);
                     *  entity.onValueChanged.subscribe((data: Modification) => {
                     *      console.log(data);
                     *  })
                     *
                     * ```
                     *
                     * @event
                     */
                    this.onValueChanged = this.valueChanged.asObservable();
                    this.newData = Object.assign({}, data);
                    this.onValueChanged = this.valueChanged;
                    this.initialize();
                }
                Object.defineProperty(Entity.prototype, "data", {
                    /**
                     * è¿åJSONæ ¼å¼çæ°æ®
                     */
                    get: function () {
                        return this.newData;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(Entity.prototype, "errors", {
                    /**
                     * éªè¯éè¯¯éå
                     */
                    get: function () {
                        return this.validErrors;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(Entity.prototype, "changes", {
                    /**
                     * å®ä½åæ´é
                     */
                    get: function () {
                        return this.changeSet.changes;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(Entity.prototype, "primaryProperty", {
                    /**
                     * å®ä½ä¸»é®åæ°æ®
                     */
                    get: function () {
                        return FieldMetadataUtil.getPrimaryFieldMetadata(this.constructor);
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(Entity.prototype, "primaryKey", {
                    /**
                     * ä¸»é®
                     * @todo
                     * 1ãæ²¡æä¸»é®æ¶è¿å''ä¸åçï¼åºè¯¥è¿åundefined
                     */
                    get: function () {
                        if (this.primaryProperty) {
                            return this.primaryProperty.property;
                        }
                        else {
                            return '';
                        }
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(Entity.prototype, "primaryValue", {
                    /**
                     * å®ä½ä¸»é®å¼
                     * 1ãæ²¡æä¸»é®æ¶è¿å''ä¸åçï¼åºè¯¥è¿åundefined
                     */
                    get: function () {
                        if (this.primaryKey) {
                            // return this[this.primaryProperty.property].toString();
                            var primaryValue = this[this.primaryProperty.property];
                            return primaryValue ? primaryValue : '';
                        }
                        else {
                            return '';
                        }
                    },
                    enumerable: true,
                    configurable: true
                });
                // #region å¬ææ¹æ³
                /**
                 * å°åæ´è®°å½ä¿å­è³åæ´éä¸­
                 * @param value åæ´è®°å½
                 */
                Entity.prototype.setChanges = function (value) {
                    value.path[value.path.length - 1];
                    // @todoï¼äºä»¶ä¼ä»ä¸çº§åä¸åæ³¡ï¼changeå¯è½æ¯ä¸çº§çï¼ä¸è½åå½åEntityçnewDataåå¹¶ã
                    // this.newData = Object.assign(this.newData, { [propertyName]: value.value });
                    this.valueChanged.next(value);
                    this.changeSet.append(value);
                };
                Entity.prototype.getPaths = function () {
                    var pathObj = {
                        path: [],
                        isUdt: false,
                        isGrid: false
                    };
                    var handleParent = function (item) {
                        var parentPaths = item[PARENT_PATH];
                        if (parentPaths) {
                            var prop = parentPaths[parentPaths.length - 1];
                            // ç¶çº§æå¨å®ä½åå«çngObjectï¼å­å¨å½åå®ä½å­æ®µï¼åå¤æ­ä¸ºUDtå­æ®µ
                            if (Object.keys(FieldMetadataUtil.getNgObjects(item[PARENT_CLASS].constructor)).indexOf(prop) > -1) {
                                pathObj.isUdt = true;
                            }
                            // å­å¨ç±»åä¸ºngListï¼åå¤æ­ä¸ºgrid
                            if (item[PARENT_CLASS] && item instanceof EntityList === true) {
                                pathObj.isGrid = true;
                            }
                            pathObj.path.push(prop);
                        }
                        if (item[PARENT_CLASS] && item instanceof EntityList === true) {
                            handleParent(item[PARENT_CLASS]);
                        }
                    };
                    handleParent(this);
                    pathObj.path = pathObj.path.reverse();
                    return pathObj;
                };
                /**
                 * å è½½æ°æ®
                 * @param data æ°æ°æ®
                 */
                Entity.prototype.load = function (data) {
                    if (!data) {
                        data = {};
                    }
                    this.loadFields(data);
                    this.loadLists(data);
                    this.loadObjects(data);
                    this.loadDynamicObjects(data);
                    this.newData = Object.assign({}, data);
                };
                /**
                 * è½¬æ¢ä¸ºJSON
                 */
                Entity.prototype.toJSON = function () {
                    var _this = this;
                    var result = {};
                    // ç®åå±æ§
                    var ngFields = FieldMetadataUtil.getNgFields(this.constructor);
                    Object.keys(ngFields).forEach(function (propName) {
                        var ngField = ngFields[propName];
                        var dataField = ngField.dataField || propName;
                        result[dataField] = _this[propName];
                    });
                    // å¯¹è±¡å±æ§
                    var ngObjects = FieldMetadataUtil.getNgObjects(this.constructor);
                    Object.keys(ngObjects).forEach(function (propName) {
                        var ngObject = ngObjects[propName];
                        var dataField = ngObject.dataField || propName;
                        result[dataField] = _this[propName] ? _this[propName].toJSON() : {};
                    });
                    // å¨æå±æ§
                    var ngDynamics = FieldMetadataUtil.getNgDynamic(this.constructor);
                    Object.keys(ngDynamics).forEach(function (propName) {
                        var ngDynamic = ngDynamics[propName];
                        var dataField = ngDynamic.dataField || propName;
                        result[dataField] = _this[propName] ? _this[propName].toJSON() : {};
                    });
                    // åè¡¨å±æ§
                    var ngLists = FieldMetadataUtil.getNgList(this.constructor);
                    Object.keys(ngLists).forEach(function (propName) {
                        var ngList = ngLists[propName];
                        var dataField = ngList.dataField || propName;
                        result[dataField] = _this[propName] ? _this[propName].toJSON() : {};
                    });
                    return result;
                };
                // #endregion
                //#region å®ä½åå§åç¸å³privateæ¹æ³
                /**
                 * åå§åå®ä½
                 */
                Entity.prototype.initialize = function () {
                    var constructor = this.constructor;
                    var ngFields = FieldMetadataUtil.getNgFields(constructor);
                    var ngObjects = FieldMetadataUtil.getNgObjects(constructor);
                    var ngLists = FieldMetadataUtil.getNgList(constructor);
                    var ngDynamic = FieldMetadataUtil.getNgDynamic(constructor);
                    this.initializeNormalField(ngFields);
                    this.initializeList(ngLists);
                    this.initializeObject(ngObjects);
                    this.initializeDynamic(ngDynamic);
                };
                /**
                 * åå»ºpath
                 * @param propertyName å±æ§åç§°
                 */
                Entity.prototype.createPath = function (propertyName) {
                    var primaryFieldMetadata = this.primaryProperty;
                    if (primaryFieldMetadata) {
                        var primaryDataField = primaryFieldMetadata.dataField;
                        return [primaryDataField + ':' + this.primaryValue, propertyName];
                    }
                    else {
                        return [':', propertyName];
                    }
                };
                /**
                 * å±æ§å­æ®µåå§å
                 * @param ngFields å±æ§å­æ®µåæ°æ®
                 */
                Entity.prototype.initializeNormalField = function (ngFields) {
                    var _this = this;
                    Object.keys(ngFields).forEach(function (propName) {
                        var ngField = ngFields[propName];
                        ngField.dataField || propName;
                        if (delete _this[propName]) {
                            Object.defineProperty(_this, propName, {
                                get: function () {
                                    return this.getPropValue(propName, ngField);
                                },
                                set: function (newPropValue) {
                                    // æä¸»é®çå®ä½ï¼å¿é¡»åç»ä¸»é®èµå¼ï¼å¦åå¶ä»å­æ®µä¸åè®¸èµå¼
                                    if (this.primaryKey && this.primaryKey === propName && !newPropValue) {
                                        return;
                                    }
                                    if (this.primaryKey && this.primaryKey !== propName && !this.primaryValue) {
                                        return;
                                    }
                                    // å¼ç¸åæ¶ä¸è§¦ååæ´ã
                                    var oldPropValue = this.getPropValue(propName, ngField);
                                    if (this.isPropValueChanged(propName, ngField, newPropValue, oldPropValue) === false) {
                                        return;
                                    }
                                    this.setPropValue(propName, ngField, newPropValue);
                                    this.emitValueChange(propName, ngField, newPropValue, oldPropValue);
                                },
                                configurable: true
                            });
                        }
                    });
                };
                /**
                 * åå§ååè¡¨ç±»åçåæ°æ®
                 * @param ngListMetadata åè¡¨ç±»ååæ°æ®
                 */
                Entity.prototype.initializeList = function (ngListMetadata) {
                    var _this = this;
                    Object.keys(ngListMetadata).forEach(function (propertyName) {
                        var fieldMetadata = ngListMetadata[propertyName];
                        var path = _this.createPath(propertyName);
                        var dataField = fieldMetadata.dataField || propertyName;
                        var val = _this.data[dataField];
                        var entityList = new EntityList();
                        entityList[PARENT_CLASS] = _this;
                        entityList[PARENT_PATH] = path;
                        if (val) {
                            var entities = val.map(function (v) { return EntityFactory$1(fieldMetadata.type, v); });
                            entityList.loadEntities(entities);
                        }
                        entityList.onListChanged.subscribe(function (value) {
                            if (value) {
                                if (entityList[PARENT_PATH][0] !== value.path[0]) {
                                    value.path = entityList[PARENT_PATH].concat(value.path);
                                }
                                _this.setChanges(value);
                            }
                        });
                        _this[propertyName] = entityList;
                    });
                };
                /**
                 * åå§åå­å¯¹è±¡
                 * @param ngObjectMetadata å­å¯¹è±¡åæ°æ®
                 */
                Entity.prototype.initializeObject = function (ngObjectMetadata) {
                    var _this = this;
                    Object.keys(ngObjectMetadata).forEach(function (propertyName) {
                        var fieldMetadata = ngObjectMetadata[propertyName];
                        var path = _this.createPath(propertyName);
                        var dataField = fieldMetadata.dataField || propertyName;
                        // valä¸å­å¨æ¶ï¼ç¨ç©ºå¯¹è±¡ä»£æ¿
                        var val = _this.data[dataField] || {};
                        var createEntityFromJsonData = function (value) {
                            var instance;
                            if (value instanceof fieldMetadata.type) {
                                instance = value;
                            }
                            else {
                                instance = EntityFactory$1(fieldMetadata.type, value);
                            }
                            instance[PARENT_CLASS] = _this;
                            instance[PARENT_PATH] = path;
                            instance.onValueChanged.subscribe(function (changes) {
                                if (changes) {
                                    changes.path = (_this[PARENT_PATH] || []).concat(changes.path);
                                    _this.setChanges(changes);
                                }
                            });
                            return instance;
                        };
                        // å¦ææ²¡æå¼ç¨ä¸ä¸ªç©ºå¯¹è±¡ä»£æ¿
                        var childEntity = createEntityFromJsonData(val);
                        if (delete _this[propertyName]) {
                            Object.defineProperty(_this, propertyName, {
                                get: function () {
                                    return childEntity;
                                },
                                set: function (value) {
                                    var modifyInfo = {
                                        path: childEntity[PARENT_PATH],
                                        value: value.data,
                                        preValue: this[propertyName].data,
                                        type: ModifyType.ValueChange
                                    };
                                    childEntity = createEntityFromJsonData(value);
                                    this.setChanges(modifyInfo);
                                },
                                configurable: true
                            });
                        }
                    });
                };
                Entity.prototype.initializeDynamic = function (ngDynamicMetadata) {
                    var _this = this;
                    Object.keys(ngDynamicMetadata).forEach(function (propertyName) {
                        var fieldMetadata = ngDynamicMetadata[propertyName];
                        var path = _this.createPath(propertyName);
                        var dataField = fieldMetadata.dataField || propertyName;
                        var originalData = _this.data[dataField] || {};
                        var createEntityFromJsonData = function (value) {
                            var instance;
                            if (value instanceof fieldMetadata.type) {
                                instance = value;
                            }
                            else {
                                instance = EntityFactory$1(fieldMetadata.type, value);
                            }
                            instance[PARENT_CLASS] = _this;
                            instance[PARENT_PATH] = path;
                            instance.onValueChanged.subscribe(function (changes) {
                                if (changes) {
                                    changes.path = (_this[PARENT_PATH] || []).concat(changes.path);
                                    _this.setChanges(changes);
                                }
                            });
                            return instance;
                        };
                        var dynamicEntity = createEntityFromJsonData(originalData);
                        if (delete _this[propertyName]) {
                            Object.defineProperty(_this, propertyName, {
                                get: function () {
                                    return dynamicEntity;
                                },
                                set: function (value) {
                                    var modifyInfo = {
                                        path: dynamicEntity[PARENT_PATH],
                                        value: value.data,
                                        preValue: this[propertyName].data,
                                        type: ModifyType.ValueChange
                                    };
                                    dynamicEntity = createEntityFromJsonData(value);
                                    this.setChanges(modifyInfo);
                                },
                                configurable: true
                            });
                        }
                    });
                };
                //#endregion
                // #region å è½½å®ä½æ°æ®ç¸å³privateãprojectedæ¹æ³
                /**
                 * å è½½ç®åå­æ®µå¼
                 * @todo ä¸´æ¶ç¨ä¿®æ¹çæ¹å¼æ¨¡æ
                 */
                Entity.prototype.loadFields = function (data) {
                    var _this = this;
                    var ngFields = FieldMetadataUtil.getNgFields(this.constructor);
                    Object.keys(ngFields).forEach(function (propName) {
                        var ngField = ngFields[propName];
                        var dataField = ngField.dataField || propName;
                        // if (ngField.primary === false) {
                        //   this[propName] = data[dataField];
                        // }
                        _this[propName] = data[dataField];
                    });
                };
                /**
                 * å è½½å­åè¡¨æ°æ®
                 * @param data æ°æ®
                 */
                Entity.prototype.loadLists = function (data) {
                    var _this = this;
                    var ngLists = FieldMetadataUtil.getNgList(this.constructor);
                    Object.keys(ngLists).forEach(function (propName) {
                        var ngList = ngLists[propName];
                        var dataField = ngList.dataField || propName;
                        var entityType = ngList.type;
                        // åå»ºå®ä½
                        var listData = data[dataField];
                        if (listData) {
                            var entities = listData.map(function (entityData) {
                                return EntityFactory$1(entityType, entityData);
                            });
                            _this[propName].loadEntities(entities);
                        }
                        else {
                            _this[propName].loadEntities([]);
                        }
                    });
                };
                Entity.prototype.loadObjects = function (data) {
                    var _this = this;
                    var ngObjects = FieldMetadataUtil.getNgObjects(this.constructor);
                    Object.keys(ngObjects).forEach(function (propName) {
                        var ngObject = ngObjects[propName];
                        var dataField = ngObject.dataField || propName;
                        var objectData = data[dataField];
                        var entity = _this[propName];
                        if (!entity || !objectData) {
                            return;
                        }
                        entity.load(objectData);
                    });
                };
                Entity.prototype.loadDynamicObjects = function (data) {
                    var _this = this;
                    var ngDynamicObjects = FieldMetadataUtil.getNgDynamic(this.constructor);
                    Object.keys(ngDynamicObjects).forEach(function (propName) {
                        var ngDynamicObject = ngDynamicObjects[propName];
                        var dataField = ngDynamicObject.dataField || propName;
                        var dynamicData = data[dataField] || {};
                        var dynamicEntity = _this[propName];
                        if (!dynamicEntity) {
                            return;
                        }
                        dynamicEntity.loadDynamicData(dynamicData);
                    });
                };
                // #endregion
                // #region ç§æå·¥å·æ¹æ³
                /**
                 * åéå¼åæ´
                 */
                Entity.prototype.emitValueChange = function (propName, propMetadata, newPropValue, oldPropValue) {
                    var change = {
                        path: this.createPath(propName),
                        value: newPropValue,
                        preValue: oldPropValue,
                        type: ModifyType.ValueChange
                    };
                    if (this[PARENT_PATH]) {
                        change.path = this[PARENT_PATH].concat(change.path);
                    }
                    this.setChanges(change);
                };
                /**
                 * è·åå±æ§å¼
                 */
                Entity.prototype.getPropValue = function (propName, propMetadata) {
                    var _a;
                    var dataField = propMetadata.dataField || propName;
                    var value = this.data[dataField];
                    // å¯¹å¤è¯­å½å¥å­æ®µï¼queryä¸è¿åé®é¢è¿è¡å¼å®¹
                    if (propMetadata.enableMultiLangInput === true && !value) {
                        var langCode = window.localStorage.getItem('languageCode') || 'zh-CHS';
                        var originDataField = dataField.replace('_MULTILANGUAGE', '');
                        return _a = {},
                            _a[langCode] = this.data[originDataField],
                            _a;
                    }
                    return value;
                };
                /**
                 * è®¾ç½®å±æ§å¼
                 */
                Entity.prototype.setPropValue = function (propName, propMetadata, propValue) {
                    var dataField = propMetadata.dataField || propName;
                    this.data[dataField] = propValue;
                };
                /**
                 * æ£æ¥å±æ§å¼æ¯å¦åçåå
                 */
                Entity.prototype.isPropValueChanged = function (propName, propMetadata, newPropValue, oldPropValue) {
                    if (propMetadata.enableMultiLangInput === true) {
                        if (this.isEmptyMultiLangPropValue(newPropValue) === true && this.isEmptyMultiLangPropValue(oldPropValue) === true) {
                            return false;
                        }
                        return JSON.stringify(newPropValue) !== JSON.stringify(oldPropValue);
                    }
                    else {
                        return newPropValue !== oldPropValue;
                    }
                };
                /**
                 * å¤è¯­å½å¥å­æ®µçå¼æ¯å¦ä¸ºç©º
                 */
                Entity.prototype.isEmptyMultiLangPropValue = function (value) {
                    return !value || Object.keys(value).length === 0;
                };
                return Entity;
            }()));

            /**
             * æ¯æå¨æå­æ®µéåçå¨æå®ä½
             */
            var DynamicEntity = exports('DynamicEntity', /** @class */ (function (_super) {
                __extends(DynamicEntity, _super);
                /**
                 * @param data JSONæ°æ®
                 */
                function DynamicEntity(data) {
                    var _this = _super.call(this, data) || this;
                    _this.loadDynamicData(data);
                    return _this;
                }
                Object.defineProperty(DynamicEntity.prototype, "IsNested", {
                    /**
                     * æ¯å¦æ¯åµå¥çå¨æå®ä½
                     */
                    get: function () {
                        return this[PARENT_CLASS] instanceof DynamicEntity;
                    },
                    enumerable: true,
                    configurable: true
                });
                DynamicEntity.prototype.loadDynamicData = function (dynamicData) {
                    this.initializeDynamicField(dynamicData);
                    // super.loadFields(dynamicData);
                };
                /**
                 * åå§åå¨ææ°æ®
                 * @param dynamicData å¨ææ°æ®
                 */
                DynamicEntity.prototype.initializeDynamicField = function (dynamicData) {
                    var _this = this;
                    // éåå¨ææ°æ®çkeyï¼åå»ºå¨æå®ä½å±æ§ã
                    Object.keys(dynamicData).forEach(function (propertyName) {
                        // å¦æå±æ§å·²ç»å­å¨ï¼åå é¤
                        if (_this[propertyName]) {
                            delete _this[propertyName];
                        }
                        var dataField = propertyName;
                        if (dynamicData[propertyName] instanceof Object) {
                            var path_1 = _this.createPath(propertyName);
                            var dynamicEntity_1 = _this.createDynamicEntityFromJsonData(dynamicData[propertyName], path_1);
                            Object.defineProperty(_this, propertyName, {
                                get: function () {
                                    return dynamicEntity_1;
                                },
                                set: function (value) {
                                    var modifyInfo = {
                                        path: dynamicEntity_1[PARENT_PATH],
                                        value: value.data,
                                        preValue: this[propertyName].data,
                                        type: ModifyType.ValueChange
                                    };
                                    dynamicEntity_1 = this.createDynamicEntityFromJsonData(value, path_1);
                                    this.setChanges(modifyInfo);
                                },
                                configurable: true
                            });
                        }
                        else {
                            Object.defineProperty(_this, propertyName, {
                                // å®ä¹è¿åæ°æ®æ¹æ³ã
                                get: function () {
                                    // ä»åå§æ°æ®è¿åå­æ®µå¼ã
                                    return this.data[dataField];
                                },
                                set: function (value) {
                                    // å¼ç¸åæ¶ä¸è§¦ååæ´ã
                                    var oldValue = this.data[dataField];
                                    if (oldValue === value) {
                                        return;
                                    }
                                    // æ´æ°åæ°æ®æ°æ®ã
                                    this.data[dataField] = value;
                                    // åæ´é
                                    var changes = {
                                        type: ModifyType.ValueChange,
                                        path: this.createPath(propertyName),
                                        value: value,
                                        preValue: oldValue
                                    };
                                    if (this[PARENT_PATH]) {
                                        changes.path = this[PARENT_PATH].concat(changes.path);
                                    }
                                    this.setChanges(changes);
                                },
                                configurable: true
                            });
                        }
                    });
                };
                DynamicEntity.prototype.createDynamicEntityFromJsonData = function (value, parentPath) {
                    var _this = this;
                    var instance;
                    if (value instanceof DynamicEntity) {
                        instance = value;
                    }
                    else {
                        instance = new DynamicEntity(value);
                    }
                    instance[PARENT_CLASS] = this;
                    instance[PARENT_PATH] = parentPath;
                    instance.onValueChanged.subscribe(function (changes) {
                        if (changes) {
                            changes.path = (_this[PARENT_PATH] || []).concat(changes.path);
                            _this.setChanges(changes);
                        }
                    });
                    return instance;
                };
                /**
                 * å°åæ´è®°å½ä¿å­è³åæ´éä¸­
                 * @param value åæ´è®°å½
                 * @todo
                 * 1ãpreValueçå¤çæé®é¢ï¼ä¸çº§ä¼ éä¸æ¥çåæ´è¿æ ·å¯ä»¥ï¼æ ¹DyanmicaEntityä¸çï¼dataå·²ç»åçååï¼prevalueåvalueæ¯ä¸æ ·äºï¼
                 * 2ãå½valueæ¯ä¸çº§åæ³¡ä¸æ¥çï¼éè¦æ ¹æ®valueå»æ´æ°å½åå±çº§çdataï¼è¯¥é»è¾ä¸åºè¯¥æ¾å¨setChagnesï¼å¾ä¿®æ¹ã
                 */
                DynamicEntity.prototype.setChanges = function (value) {
                    var _a;
                    var propertyName = value.path[value.path.length - 1];
                    var preValue = Object.assign({}, this.data);
                    this.newData = Object.assign(this.newData, (_a = {}, _a[propertyName] = value.value, _a));
                    var parentPath = value.path;
                    if (value.path.length > 2) {
                        parentPath = value.path.slice(0, value.path.length - 2);
                    }
                    // ç»ä¸ä¸ä½¿ç¨æé å½æ°ï¼ä¿æåå¶ä»ä½ç½®å¯¹Modificationçæé ä¸è´ï¼
                    // const parentModification = new Modification(this.data, value.type, parentPath, preValue);
                    var parentModification = {
                        path: parentPath,
                        value: this.data,
                        preValue: preValue,
                        type: value.type
                    };
                    this.valueChanged.next(parentModification);
                    this.changeSet.append(value);
                };
                /**
                 * toJSON
                 */
                DynamicEntity.prototype.toJSON = function () {
                    return this.data;
                };
                return DynamicEntity;
            }(Entity)));

            /**
             * REPOSITORY_META
             */
            var REPOSITORY_META = exports('REPOSITORY_META', 'RepositoryMeta');
            /**
             * RepositoryMeta
             */
            function RepositoryMeta(options) {
                var decoratorFactory = makeDecorator(REPOSITORY_META, function (obj) { return obj; });
                return decoratorFactory(options);
            }

            // tslint:disable: no-bitwise
            /**
             * å®ä½éå
             * @todoï¼åºè¯¥ç¨EntityListä»£æ¿ã
             */
            var EntityCollection = exports('EntityCollection', /** @class */ (function () {
                /**
                 * æé å½æ°
                 */
                function EntityCollection(entityType) {
                    this.innerEntitySet = new Set();
                    this.innerEntityMap = new Map();
                    this.collectionChanged = new Subject();
                    this.entityType = entityType;
                    this.primaryKey = FieldMetadataUtil.getPrimaryKey(this.entityType);
                }
                /**
                 * å®ä½æ°é
                 */
                EntityCollection.prototype.count = function () {
                    return this.innerEntitySet.size;
                };
                Object.defineProperty(EntityCollection.prototype, "entityTypeName", {
                    get: function () {
                        return this.entityType.name;
                    },
                    enumerable: true,
                    configurable: true
                });
                /**
                 * æ¯å¦åå«æå®ä¸»é®å¼çå®ä½
                 * @param id ä¸»é®å¼
                 */
                EntityCollection.prototype.has = function (id) {
                    return this.innerEntityMap.has(id);
                };
                /**
                 * æ¸ç©ºå¨é¨å®ä½
                 */
                EntityCollection.prototype.clear = function () {
                    this.innerEntityMap.clear();
                    this.innerEntitySet.clear();
                    this.notifyCollectionChanged(new Modification([], ModifyType.Load));
                };
                /**
                 * è½¬æ¢ä¸ºå®ä½æ°ç»
                 */
                EntityCollection.prototype.toArray = function () {
                    return Array.from(this.innerEntitySet);
                };
                /**
                 * è½¬æ¢ä¸ºJSONæ°ç»
                 */
                EntityCollection.prototype.toJSON = function () {
                    var result = [];
                    var entities = this.toArray();
                    entities.forEach(function (entity) {
                        result.push(entity.toJSON());
                    });
                    return result;
                };
                /**
                 * æ¹éå è½½å®ä½
                 */
                EntityCollection.prototype.loadEntities = function (entities) {
                    var _this = this;
                    this.innerEntityMap.clear();
                    this.innerEntitySet.clear();
                    entities.forEach(function (entity) {
                        _this.innerEntitySet.add(entity);
                        _this.innerEntityMap.set(entity[_this.primaryKey], entity);
                    });
                    this.notifyCollectionChanged(new Modification(entities, ModifyType.Load));
                };
                /**
                 * è¿½å å®ä½
                 * @param entity è¦è¿½å çå®ä½
                 */
                EntityCollection.prototype.addEntity = function (entity) {
                    this.verifyEntityToAdd(entity);
                    this.innerEntitySet.add(entity);
                    this.innerEntityMap.set(entity[this.primaryKey], entity);
                    this.notifyCollectionChanged(new Modification([entity], ModifyType.Add));
                };
                /**
                 * æ¹éè¿½å å®ä½
                 * @param entities è¦å è½½çå®ä½æ°ç»
                 */
                EntityCollection.prototype.addEntities = function (entities) {
                    var _this = this;
                    if (!entities) {
                        return;
                    }
                    var entitiesToAdd = [];
                    entities.forEach(function (entity) {
                        _this.verifyEntityToAdd(entity);
                        entitiesToAdd.push(entity);
                    });
                    entitiesToAdd.forEach(function (entity) {
                        _this.innerEntitySet.add(entity);
                        _this.innerEntityMap.set(entity[_this.primaryKey], entity);
                    });
                    this.notifyCollectionChanged(new Modification(entitiesToAdd, ModifyType.Add));
                };
                /**
                 * æ ¹æ®ä¸»é®å¼è·åå®ä½
                 */
                EntityCollection.prototype.getEntityById = function (identity) {
                    if (this.innerEntityMap.has(identity) === false) {
                        return null;
                    }
                    var entity = this.innerEntityMap.get(identity);
                    return entity;
                };
                /**
                 * æ ¹æ®è·¯å¾è·åå®ä½
                 */
                EntityCollection.prototype.getEntityByPath = function (pathArray) {
                    var rootEntityId = pathArray[0].split(':')[1];
                    var parentNode = this.getEntityById(rootEntityId);
                    for (var i = 1; i < pathArray.length && parentNode; i = i + 1) {
                        var currentPath = pathArray[i];
                        if (parentNode instanceof Entity) {
                            // @todoï¼å¼ºè¯äºå«åå·
                            if (currentPath.indexOf(':') === -1) {
                                parentNode = parentNode[pathArray[i]];
                            }
                        }
                        else {
                            parentNode = parentNode.get(pathArray[i].split(':')[1]);
                        }
                    }
                    return parentNode;
                };
                /**
                 * è¿åç¬¦åæå®æ¡ä»¶çå®ä½éå
                 * @param predicate æ¡ä»¶è°è¯
                 */
                EntityCollection.prototype.getEntities = function (predicate) {
                    var entities = Array.from(this.innerEntitySet);
                    var matchedEntities = entities.filter(predicate);
                    return matchedEntities;
                };
                /**
                 * è·åå¨é¨å®ä½
                 */
                EntityCollection.prototype.getAllEntities = function () {
                    return Array.from(this.innerEntitySet);
                };
                /**
                 * æ ¹æ®ä¸»é®å¼å é¤å¯¹åºå®ä½
                 * @param identity ä¸»é®å¼
                 */
                EntityCollection.prototype.removeEntityById = function (identity) {
                    this.verifyEntityToRemove(identity);
                    var entityToRemove = this.innerEntityMap.get(identity);
                    this.innerEntityMap.delete(identity);
                    this.innerEntitySet.delete(entityToRemove);
                    this.notifyCollectionChanged(new Modification([entityToRemove], ModifyType.Remove));
                    return entityToRemove;
                };
                EntityCollection.prototype.removeEntitiesByIds = function (id) {
                };
                /**
                 * å é¤ç¬¦åæ¡ä»¶çå®ä½éå
                 */
                EntityCollection.prototype.removeEntities = function (predicate) {
                    var _this = this;
                    var entitiesToRemove = Array.from(this.innerEntitySet).filter(predicate);
                    entitiesToRemove.forEach(function (entityToRemove) {
                        _this.innerEntityMap.delete(entityToRemove[_this.primaryKey]);
                        _this.innerEntitySet.delete(entityToRemove);
                    });
                    this.notifyCollectionChanged(new Modification(entitiesToRemove, ModifyType.Remove));
                    return entitiesToRemove;
                };
                /**
                 * éç½®å­è¡¨æ°æ®
                 * @param paths è·¯å¾
                 * è·¯å¾æ ¼å¼ ['å®ä½ä¸»é®:ä¸»é®å¼','ä»è¡¨Codes','ä»ä»è¡¨Codes']
                 * @param entities å®ä½æ°ç»
                 */
                EntityCollection.prototype.resetEntities = function (paths, entities) {
                    var e_1, _a;
                    if (paths[0].indexOf(':') === -1) {
                        throw new Error('è·¯å¾æ ¼å¼éè¯¯');
                    }
                    // pathséé¢ç¬¬ä¸ä¸ªä¸å®æ¯id
                    var entityInfo = paths[0].split(':');
                    var _b = __read(entityInfo, 2), entityPrimaryKey = _b[0], entityId = _b[1];
                    var entity = null;
                    try {
                        for (var _c = __values(this.innerEntitySet), _d = _c.next(); !_d.done; _d = _c.next()) {
                            var element = _d.value;
                            if (element[entityPrimaryKey] === entityId) {
                                entity = element;
                                break;
                            }
                        }
                    }
                    catch (e_1_1) { e_1 = { error: e_1_1 }; }
                    finally {
                        try {
                            if (_d && !_d.done && (_a = _c.return)) _a.call(_c);
                        }
                        finally { if (e_1) throw e_1.error; }
                    }
                    // for (let index = 0; index < this.innerEntitySet; index++) {
                    //   const element: T = this.innerEntitySet[index];
                    //   if (element[entityPrimaryKey] === entityId) {
                    //     entity = element;
                    //     break;
                    //   }
                    // }
                    if (!entity) {
                        throw new Error("\u627E\u4E0D\u5230" + entityPrimaryKey + "\u4E3A" + entityId + "\u7684\u5B9E\u4F53");
                    }
                    var data = entity;
                    paths.slice(1).forEach(function (path) {
                        data = data[path];
                    });
                    var entityList = data;
                    entityList.clear();
                    entityList.loadEntities(entities);
                };
                /**
                 * éªè¯å®ä½æ¯å¦è½å¤æ·»å 
                 */
                EntityCollection.prototype.verifyEntityToAdd = function (entity) {
                    if (this.has(entity[this.primaryKey])) {
                        this.innerEntitySet.delete(this.innerEntityMap.get(entity[this.primaryKey]));
                        this.innerEntityMap.delete(entity[this.primaryKey]);
                        // throw new Error(`The repository already had an item with the save identity of '${entity[this.primaryKey]}'`);
                    }
                    return true;
                };
                /**
                 * éªè¯å®ä½æ¯å¦è½ç§»é¤
                 */
                EntityCollection.prototype.verifyEntityToRemove = function (identity) {
                    if (!this.has(identity)) {
                        throw new Error("The entity with identity of '" + identity + " dose not exsit.'");
                    }
                    return true;
                };
                /**
                 * å®ä½éååæ´æµ
                 */
                EntityCollection.prototype.notifyCollectionChanged = function (modification) {
                    this.collectionChanged.next(modification);
                };
                Object.defineProperty(EntityCollection.prototype, "pageSize", {
                    /**
                     * è·ååé¡µå¤§å°
                     * @description å¦æç¨æ·æªæå®åé¡µå¤§å°åé»è®¤ä¸º0ï¼å³è·åæææ°æ®
                     */
                    get: function () {
                        if (!!this.paginationInfo) {
                            return this.paginationInfo.pageSize || 0;
                        }
                        return 0;
                    },
                    //#region åé¡µ
                    /**
                     * è®¾ç½®åé¡µå¤§å°
                     */
                    set: function (pageSize) {
                        if (typeof (pageSize) !== 'number' || pageSize < 0) {
                            throw new Error('Invalid parameter:pageSize');
                        }
                        var original = this.paginationInfo;
                        // const entityPaginationInfo = Object.assign({}, original[this.entityTypeName], { pageSize });
                        // this.paginationInfo = Object.assign({}, original, { [this.entityTypeName]: entityPaginationInfo });
                        // this.notifyCollectionChanged(new Modification(this.paginationInfo[this.entityTypeName], ModifyType.PaginationInfoChange));
                        this.paginationInfo = Object.assign({}, original, { pageSize: pageSize });
                        this.notifyCollectionChanged(new Modification(this.paginationInfo, ModifyType.PaginationInfoChange));
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(EntityCollection.prototype, "totalCount", {
                    /**
                     * è·åæ°æ®æ»æ¡æ°
                     */
                    get: function () {
                        if (!!this.paginationInfo) {
                            return this.paginationInfo.total || 0;
                        }
                        return 0;
                    },
                    /**
                     * è®¾ç½®æ°æ®æ»æ¡æ°
                     */
                    set: function (total) {
                        if (typeof (total) !== 'number' || total < 0) {
                            throw new Error('Invalid parameter:total');
                        }
                        var original = this.paginationInfo;
                        // const entityPaginationInfo = Object.assign({}, original[this.entityTypeName], { total });
                        // this.paginationInfo = Object.assign({}, original, { [this.entityTypeName]: entityPaginationInfo });
                        this.paginationInfo = Object.assign({}, original, { total: total });
                        this.notifyCollectionChanged(new Modification(this.paginationInfo, ModifyType.PaginationInfoChange));
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(EntityCollection.prototype, "pageIndex", {
                    /**
                     * è·åå½åé¡µç 
                     */
                    get: function () {
                        if (!!this.paginationInfo) {
                            return this.paginationInfo.pageIndex || 1;
                        }
                        return 1;
                    },
                    /**
                     * è®¾ç½®å½åé¡µç 
                     */
                    set: function (pageIndex) {
                        if (typeof (pageIndex) !== 'number' || pageIndex < 0) {
                            throw new Error('Invalid parameter:pageIndex');
                        }
                        var original = this.paginationInfo;
                        // const entityPaginationInfo = Object.assign({}, original[this.entityTypeName], { pageIndex });
                        // this.paginationInfo = Object.assign({}, original, { [this.entityTypeName]: entityPaginationInfo });
                        this.paginationInfo = Object.assign({}, original, { pageIndex: pageIndex });
                        this.notifyCollectionChanged(new Modification(this.paginationInfo, ModifyType.PaginationInfoChange));
                    },
                    enumerable: true,
                    configurable: true
                });
                /**
                 * æ´æ°åé¡µä¿¡æ¯
                 * @param path ç»å®è·¯å¾
                 * @param pageInfo åé¡µä¿¡æ¯
                 */
                EntityCollection.prototype.updatePaginationInfoByPath = function (path, pageInfo) {
                    var original = this.paginationInfo;
                    var pageIndex = pageInfo.pageIndex, pageSize = pageInfo.pageSize, total = pageInfo.totalCount;
                    var paginationInfo = Object.assign({}, original, { pageIndex: pageIndex, pageSize: pageSize, total: total });
                    this.setPaginationConfigByPath(path, paginationInfo);
                };
                /**
                 * æ ¹æ®è·¯å¾è·ååé¡µå¤§å°
                 * @param path è·¯å¾
                 */
                EntityCollection.prototype.getPaginationConfigByPath = function (path, defaultValue) {
                    if (!path || path === '/') {
                        return this.paginationInfo;
                    }
                    if (typeof path !== 'string') {
                        throw new Error('è·¯å¾å¿é¡»ä¸ºå­ç¬¦ä¸²ï¼');
                    }
                    path = path.substring(1);
                    var paths = path.split('/').filter(function (item) { return !!item && item.trim().length > 0; }).map(function (item) { return item.trim(); });
                    var config = this.paginationInfo;
                    paths.forEach(function (item) {
                        if (config && config.hasOwnProperty(item)) {
                            config = config[item];
                        }
                        else {
                            config = null;
                        }
                    });
                    return !!config ? config : typeof defaultValue !== 'undefined' ? defaultValue : undefined;
                };
                /**
                 * è®¾ç½®åé¡µä¿¡æ¯
                 * @param path è·¯å¾
                 * @param value å¼
                 */
                EntityCollection.prototype.setPaginationConfigByPath = function (path, value) {
                    var original = JSON.stringify(this.paginationInfo);
                    if (!path || path === '/') {
                        this.paginationInfo = value;
                    }
                    else {
                        if (!Array.isArray(path)) {
                            path = path.toString().match(/[^/[\]]+/g) || [];
                        }
                        path.slice(0, -1).reduce(function (prev, current, index) {
                            return Object(prev[current]) === prev[current]
                                ? prev[current]
                                : prev[current] = Math.abs(path[index + 1]) >> 0 === +path[index + 1]
                                    ? []
                                    : {};
                        }, this.paginationInfo)[path[path.length - 1]] = value;
                    }
                    if (JSON.stringify(this.paginationInfo) !== original) {
                        this.notifyCollectionChanged(new Modification(this.paginationInfo, ModifyType.PaginationInfoChange));
                    }
                    return this.paginationInfo;
                };
                return EntityCollection;
            }()));

            /*
             * @Author: Witt
             * @Date: 2019-03-07 17:24:38
             * @Last Modified by:   Witt
             * @Last Modified time: 2019-03-11 19:50:38
             */
            /**
             * å®ä½ç®¡çç±»
             */
            var EntityManager = exports('EntityManager', /** @class */ (function () {
                /**
                 * æé å½æ°
                 */
                function EntityManager(entityCollection) {
                    this.entityCollection = entityCollection;
                    this.entityType = entityCollection.entityType;
                }
                // #region åå»ºå®ä½ç¸å³æ¹æ³
                /**
                 * åå»ºå®ä½
                 */
                EntityManager.prototype.createEntity = function (entityData) {
                    var entity = createEntity(this.entityType, entityData);
                    return entity;
                };
                /**
                 * æ¹éåå»ºå®ä½
                 */
                EntityManager.prototype.createEntities = function (entityListData, entityType) {
                    var entities = createEntities(this.entityType, entityListData);
                    return entities;
                };
                // #endregion
                // #region è·åå®ä½ãå®ä½æ°ç»ç¸å³æ¹æ³
                /**
                 * è·åpathå¯¹åºçå®ä½
                 */
                EntityManager.prototype.getEntityByPath = function (path) {
                    var entity = this.getEntityNodeByPath(path);
                    return entity;
                };
                /**
                 * è·åpathå¯¹åºçå®ä½
                 */
                EntityManager.prototype.getEntitiesByPath = function (path) {
                    var entityCollectionOrList = this.getEntityNodeByPath(path);
                    var entities;
                    if (entityCollectionOrList instanceof EntityCollection === true) {
                        entities = entityCollectionOrList.toArray();
                    }
                    else {
                        entities = entityCollectionOrList.toArray();
                    }
                    return entities;
                };
                /**
                 * è·åå®ä½èç¹
                 * @param path èç¹è·¯å¾
                 */
                EntityManager.prototype.getEntityNodeByPath = function (path) {
                    var dataPath = DataPathCreator.createByLongPathFromRoot(path, this);
                    var entityNode = this.entityCollection;
                    var pathNode = dataPath.head.next;
                    while (pathNode) {
                        if (pathNode.type === DataPathNodeType.DataId) {
                            if (entityNode instanceof EntityCollection === true) {
                                entityNode = entityNode.getEntityById(pathNode.value);
                            }
                            else {
                                entityNode = entityNode.get(pathNode.value);
                            }
                        }
                        else {
                            entityNode = entityNode[pathNode.value];
                        }
                        if (!entityNode) {
                            throw new Error("\u627E\u4E0D\u5230" + pathNode.value + "\u5BF9\u5E94\u7684\u6570\u636E\u8282\u70B9");
                        }
                        pathNode = pathNode.next;
                    }
                    return entityNode;
                };
                // #endregion
                // #region è·åãè®¾ç½®å±æ§å¼
                /**
                 * è·åpathå¯¹åºçå®ä½å±æ§å¼
                 */
                EntityManager.prototype.getPropValueByPath = function (path) {
                    var propName = path.pop();
                    var entity = this.getEntityByPath(path);
                    return entity[propName];
                };
                /**
                 * è®¾ç½®pathå¯¹åºå®ä½çå±æ§å¼
                 */
                EntityManager.prototype.setPropValueByPath = function (path, propValue) {
                    var propName = path.pop();
                    var entity = this.getEntityByPath(path);
                    entity[propName] = propValue;
                };
                // #endregion
                // #region æå¥å®ä½
                /**
                 * å¨pathå¯¹åºå®ä½åæå¥å®ä½
                 */
                EntityManager.prototype.insertEntityBeforeByPath = function (fpath) {
                    throw new Error('Not Implemented');
                };
                /**
                 * å¨pathå¯¹åºå®ä½åæ¹éæå¥å®ä½
                 */
                EntityManager.prototype.insertEntitiesBeforeByPath = function () {
                    throw new Error('Not Implemented');
                };
                /**
                 * å¨pathå¯¹åºå®ä½åæå¥å®ä½
                 */
                EntityManager.prototype.insertEntityAfterByPath = function () {
                    throw new Error('Not Implemented');
                };
                /**
                 * å¨pathå¯¹åºå®ä½åæ¹éæå¥å®ä½
                 */
                EntityManager.prototype.insertEntitiesAfterByPath = function () {
                    throw new Error('Not Implemented');
                };
                // #endregion
                // #region è¿½å å®ä½
                /**
                 * å¨pathå¯¹åºçå®ä½éåä¸­è¿½å 1ä¸ªå®ä½
                 */
                // public appendEntityByPath(fpath: string[], entity: Entity): void {
                //   const entityCollectionOrList = this.getEntityNodeByPath(fpath);
                //   if (entityCollectionOrList instanceof EntityCollection === true) {
                //     const entityCollection = entityCollectionOrList as EntityCollection<Entity>;
                //     entityCollection.addEntity(entity);
                //   } else {
                //     const entityList = (entityCollectionOrList as EntityList<Entity>);
                //     entityList.appendEntity(entity);
                //   }
                // }
                /**
                 * æ ¹æ®pathè·åå®ä½éå
                 * @param fpath è·¯å¾
                 * @param entityData å®ä½æ°æ®
                 * @param initialData[å¯é] é»è®¤å¼
                 */
                EntityManager.prototype.appendEntityByPath = function (fpath, entityData, initialData) {
                    var subPaths = fpath.split('/');
                    if (subPaths.length < 3) {
                        throw Error("\u6839\u636Epath\u5220\u9664\u5B9E\u4F53\u6570\u636E\u51FA\u9519\u4E86\u3002\u4F20\u5165\u7684path[" + fpath + "]\u683C\u5F0F\u4E0D\u5BF9");
                    }
                    var childEntityList;
                    var propInfo;
                    var propName;
                    for (var i = 2; i < subPaths.length; i = i + 2) {
                        var fid = subPaths[i - 1];
                        propName = subPaths[i];
                        // todo: EntityCollectionéæä¹åè¿éæ éå·®å¼å¤ç
                        var parentEntity = childEntityList ? childEntityList.get(fid) : this.entityCollection.getEntityById(fid);
                        childEntityList = parentEntity[propName];
                        var entityType = propInfo ? propInfo.propEntityType : this.entityType;
                        propInfo = EntityUtil.getPropInfo(entityType, propName);
                        if (!childEntityList) {
                            throw Error("fpath\u53C2\u6570\u9519\u8BEF\uFF0C\u65E0\u6CD5\u627E\u5230" + propName + "\u5BF9\u5E94\u7684\u5B50\u8868\u3002fpath\u4E3A\uFF1A" + fpath);
                        }
                    }
                    // const propInfo = EntityUtil.getPropInfo(this.entityType, propName);
                    var childEntity = createEntity(propInfo.propEntityType, entityData);
                    // å¨å®ä½çå®ä¾ä¸å¢å é»è®¤å¼å±æ§ï¼ä»¥ä¾¿å¨createBindingObjectæ¶å­æ¾é»è®¤å¼
                    if (initialData) {
                        EntityUtil.appendInitialData(childEntity, initialData);
                    }
                    childEntityList.appendNew(childEntity);
                    return childEntity;
                };
                /**
                 * å¨pathå¯¹åºçå®ä½éåä¸­è¿½å å¤ä¸ªå®ä½
                 */
                EntityManager.prototype.appendEntitiesByPath = function (fpath, entities) {
                    var entityCollectionOrList = this.getEntityNodeByPath(fpath);
                    if (entityCollectionOrList instanceof EntityCollection === true) {
                        var entityCollection = entityCollectionOrList;
                        entityCollection.addEntities(entities);
                    }
                    else {
                        var entityList = entityCollectionOrList;
                        entityList.appendEntities(entities);
                    }
                };
                // #endregion
                // #region å é¤å®ä½
                /**
                 * ä»fapthå¯¹åºçå®ä½éåä¸­å é¤idå¯¹åºçå®ä½
                 */
                // public removeEntityByPath(fpath: string[], id: string): void {
                //   const entityCollectionOrList = this.getEntityNodeByPath(fpath);
                //   if (entityCollectionOrList instanceof EntityCollection === true) {
                //     const entityCollection = entityCollectionOrList as EntityCollection<Entity>;
                //     entityCollection.removeEntityById(id);
                //   } else {
                //     const entityList = (entityCollectionOrList as EntityList<Entity>);
                //     entityList.remove(id);
                //   }
                // }
                /**
                 * æ ¹æ®pathè·åå®ä½éå
                 * @param fpath path
                 */
                EntityManager.prototype.removeEntityByPath = function (fpath, id) {
                    var subPaths = fpath.split('/');
                    if (subPaths.length < 3) {
                        throw Error("\u6839\u636Epath\u5220\u9664\u5B9E\u4F53\u6570\u636E\u51FA\u9519\u4E86\u3002\u4F20\u5165\u7684path[" + fpath + "]\u683C\u5F0F\u4E0D\u5BF9");
                    }
                    var childEntityList;
                    for (var i = 2; i < subPaths.length; i = i + 2) {
                        var fid = subPaths[i - 1];
                        var propName = subPaths[i];
                        var parentEntity = childEntityList ? childEntityList.get(fid) : this.entityCollection.getEntityById(fid);
                        childEntityList = parentEntity[propName];
                        if (!childEntityList) {
                            throw Error("fpath\u53C2\u6570\u9519\u8BEF\uFF0C\u65E0\u6CD5\u627E\u5230" + propName + "\u5BF9\u5E94\u7684\u5B50\u8868\u3002fpath\u4E3A\uFF1A" + fpath);
                        }
                    }
                    childEntityList.remove(id);
                };
                /**
                 * ä»fapthå¯¹åºçå®ä½éåä¸­å é¤idså¯¹åºçå®ä½
                 */
                EntityManager.prototype.removeEntitiesByPath = function (fpath, ids) {
                    // const entityCollectionOrList = this.getEntityNodeByPath(fpath);
                    // if (entityCollectionOrList instanceof EntityCollection === true) {
                    //   const entityCollection = entityCollectionOrList as EntityCollection<Entity>;
                    //   entityCollection.removeEntitiesByIds(ids);
                    // } else {
                    //   const entityList = (entityCollectionOrList as EntityList<Entity>);
                    //   entityList.remove(ids);
                    // }
                    throw new Error('Not Implemented');
                };
                // #endregion
                // #region æ¸ç©ºåæ´éç¸å³æ¹æ³
                /**
                 * æ¸ç©ºææå®ä½çåæ´é
                 */
                EntityManager.prototype.clearAllEntityChanges = function () {
                    var entities = this.entityCollection.toArray();
                    entities.forEach(function (entity) {
                        entity.changes.splice(0, entity.changes.length);
                    });
                };
                /**
                 * æ¸ç©ºidæå®çå®ä½åæ´é
                 */
                EntityManager.prototype.clearEntityChangesById = function (id) {
                    var entity = this.entityCollection.getEntityById(id);
                    if (!entity) {
                        return;
                    }
                    entity.changes.splice(0, entity.changes.length);
                };
                /**
                 * æ¸ç©ºidsæ°ç»ä¸­æå®çå®ä½çåæ´é
                 */
                EntityManager.prototype.clearEntityChangesByIds = function (ids) {
                    var _this = this;
                    if (!ids || ids.length < 0) {
                        return;
                    }
                    ids.forEach(function (id) {
                        _this.clearEntityChangesById(id);
                    });
                };
                // #endregion
                // #region åæ´éæ£æ¥ç¸å³æ¹æ³
                /**
                 * æ£æ¥ææçå®ä½ï¼æ¯å¦ææªæäº¤çåæ´
                 */
                EntityManager.prototype.checkAllEntityChanges = function () {
                    var entities = this.entityCollection.toArray();
                    var hasChanges = entities.some(function (entity) {
                        if (entity.changes.length > 0) {
                            return true;
                        }
                        else {
                            return false;
                        }
                    });
                    return hasChanges;
                };
                /**
                 * æ£æ¥idå¯¹åºçå®ä½ï¼æ¯å¦ææªæäº¤çåæ´
                 */
                EntityManager.prototype.checkEntityChangesById = function (id) {
                    var entity = this.entityCollection.getEntityById(id);
                    if (!entity) {
                        return false;
                    }
                    return entity.changes.length > 0;
                };
                // #endregion
                // #region ä¸è§èæ¹æ³ï¼å¾åºå¼
                /**
                 * å¾åºå¼
                 * @deprecated
                 */
                EntityManager.prototype.clearEntityChangesByArray = function (idArray) {
                    this.clearEntityChangesByIds(idArray);
                };
                return EntityManager;
            }()));

            // tslint:disable: no-bitwise
            var PaginationManager = /** @class */ (function () {
                function PaginationManager(entityType, paginationConfig) {
                    this.entityType = entityType;
                    this.paginationConfig = paginationConfig;
                    if (this.paginationConfig === null || this.paginationConfig === undefined) {
                        this.paginationConfig = this.getNgListProperties();
                    }
                    // å¼å®¹èè¡¨åï¼å°ä¹åçä¸»è¡¨åé¡µä¿¡æ¯å±å¼å°åé¡µéç½®æ ¹ä¸­
                    this.expandMainEntityConfig();
                    this.deleteMainEntityConfig();
                }
                /**
                 * ä¸»è¡¨åé¡µä¿¡æ¯å±å¼å°åé¡µéç½®æ ¹ä¸­
                 */
                PaginationManager.prototype.expandMainEntityConfig = function () {
                    var entityName = this.entityType.name;
                    if (this.paginationConfig.hasOwnProperty(entityName)) {
                        var entityConfig = this.paginationConfig[entityName];
                        this.paginationConfig = Object.assign(this.paginationConfig, entityConfig);
                    }
                };
                /**
                 * å é¤ä¸»è¡¨å®ä½éç½®ä¿¡æ¯
                 */
                PaginationManager.prototype.deleteMainEntityConfig = function () {
                    delete this.paginationConfig[this.entityType.name];
                };
                Object.defineProperty(PaginationManager.prototype, "pagination", {
                    /**
                     * è·ååé¡µä¿¡æ¯
                     */
                    get: function () {
                        return this.paginationConfig;
                    },
                    enumerable: true,
                    configurable: true
                });
                /**
                 * è·ååé¡µä¿¡æ¯
                 * @param path è·¯å¾
                 * @param defaultValue é»è®¤å¼
                 */
                PaginationManager.prototype.getPaginationConfigByPath = function (path, defaultValue) {
                    if (!path || path === '/') {
                        return this.paginationConfig;
                    }
                    if (typeof path !== 'string') {
                        throw new Error('è·¯å¾å¿é¡»ä¸ºå­ç¬¦ä¸²ï¼');
                    }
                    path = path.substring(1);
                    var paths = path.split('/').filter(function (item) { return !!item && item.trim().length > 0; });
                    var config = this.paginationConfig;
                    paths.forEach(function (item) {
                        if (config && config.hasOwnProperty(item)) {
                            config = config[item];
                        }
                        else {
                            config = null;
                        }
                    });
                    return !!config ? config : typeof defaultValue !== 'undefined' ? defaultValue : undefined;
                };
                /**
                 * è®¾ç½®åé¡µä¿¡æ¯
                 * @param path è·¯å¾
                 * @param value å¼
                 */
                PaginationManager.prototype.setPaginationConfigByPath = function (path, value) {
                    if (!Array.isArray(path)) {
                        path = path.toString().match(/[^/[\]]+/g) || [];
                    }
                    path.slice(0, -1).reduce(function (prev, current, index) {
                        return Object(prev[current]) === prev[current]
                            ? prev[current]
                            : prev[current] = Math.abs(path[index + 1]) >> 0 === +path[index + 1]
                                ? []
                                : {};
                    }, this.paginationConfig)[path[path.length - 1]] = value;
                    return this.paginationConfig;
                };
                /**
                 * éå½è·åå½åå®ä½çææNgListå±æ§
                 * @param defaultPageSize defaultPageSize
                 */
                PaginationManager.prototype.getNgListProperties = function (defaultPageSize) {
                    if (defaultPageSize === void 0) { defaultPageSize = 0; }
                    var getChilds = function (objectType) {
                        var listProperties = FieldMetadataUtil.getNgList(objectType);
                        var result = {};
                        if (Object.keys(listProperties).length < 1) {
                            return result;
                        }
                        Object.keys(listProperties).forEach(function (prop) {
                            var itemTypeName = listProperties[prop].dataField;
                            // å»æå°¾é¨çs
                            if (itemTypeName.endsWith('s')) {
                                itemTypeName = itemTypeName.substring(0, itemTypeName.length - 1);
                            }
                            result[itemTypeName] = {
                                pageSize: defaultPageSize
                            };
                            var child = getChilds(listProperties[prop].type);
                            if (child !== null && Object.keys(child).length > 0) {
                                result = Object.assign({}, result, child);
                            }
                        });
                        return result;
                    };
                    var childs = getChilds(this.entityType);
                    var root = Object.assign({}, { pageSize: defaultPageSize }, childs);
                    return root;
                };
                return PaginationManager;
            }());

            var DataChangeHistory = /** @class */ (function () {
                function DataChangeHistory() {
                    this.history = [];
                }
                DataChangeHistory.prototype.addChange = function (dataChange) {
                    var changeType = DataChangeType[dataChange.changeType];
                    this["on" + changeType + "Data"](dataChange);
                };
                DataChangeHistory.prototype.addChanges = function (dataChange) {
                    var _this = this;
                    dataChange.forEach(function (change) { return _this.addChange(change); });
                };
                DataChangeHistory.prototype.clear = function () {
                    this.history.splice(0, this.history.length);
                };
                DataChangeHistory.prototype.clearByIds = function (ids) {
                    this.history = this.history.filter(function (item) {
                        var e_1, _a;
                        if (item.fpath && item.fpath !== '/' && item.fpath.includes('/')) {
                            try {
                                for (var ids_1 = __values(ids), ids_1_1 = ids_1.next(); !ids_1_1.done; ids_1_1 = ids_1.next()) {
                                    var id = ids_1_1.value;
                                    var include = item.fpath.split('/').includes(id);
                                    return !include;
                                }
                            }
                            catch (e_1_1) { e_1 = { error: e_1_1 }; }
                            finally {
                                try {
                                    if (ids_1_1 && !ids_1_1.done && (_a = ids_1.return)) _a.call(ids_1);
                                }
                                finally { if (e_1) throw e_1.error; }
                            }
                        }
                        else {
                            return !ids.includes(item.dataId);
                        }
                    });
                };
                DataChangeHistory.prototype.isChanged = function () {
                    return this.history.length > 0;
                };
                DataChangeHistory.prototype.onAddData = function (dataChange) {
                    this.history.push(dataChange);
                };
                DataChangeHistory.prototype.onDeleteData = function (dataChange) {
                    var index = this.history.findIndex(function (item) { return item.dataId === dataChange.dataId && item.changeType === DataChangeType.Add; });
                    if (index >= 0) {
                        this.history.splice(index, 1);
                    }
                    else {
                        this.history.push(dataChange);
                    }
                };
                return DataChangeHistory;
            }());

            /*
             * @Author: Witt
             * @Date: 2018-10-12 15:37:11
             * @Last Modified by: aalizzwell
             * @Last Modified time: 2019-09-03 19:10:44
             * @todo å¾ä¼åé®é¢
             * 1ãapiUrlæ¯å¦åºè¯¥å¨åºç±»ä¸­ï¼å­ç±»ä¸­çapiå¦ä½ä¼ éç»åºç±»ï¼
             */
            var Repository = exports('Repository', /** @class */ (function () {
                /**
                 * æé å½æ°
                 */
                function Repository() {
                    /**
                     * ç¨æ·åé¡µéç½®ä¿¡æ¯
                     */
                    this.paginationInfo = null;
                }
                Repository.prototype.init = function () {
                    this.entityTypeInfo = new DataTypeInfo(this.entityType);
                    this.entityCollection = new EntityCollection(this.entityType);
                    this.dataChangeHistory = new DataChangeHistory();
                };
                Object.defineProperty(Repository.prototype, "primaryKey", {
                    /**
                     * å®ä½ä¸»é®
                     */
                    get: function () {
                        return this.entityCollection.primaryKey;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(Repository.prototype, "entityCollectionChange", {
                    /**
                     * å®ä½åæ´éå
                     */
                    get: function () {
                        return this.entityCollection.collectionChanged;
                    },
                    enumerable: true,
                    configurable: true
                });
                /**
                 * éç½®ç¶æ
                 */
                Repository.prototype.reset = function () {
                    this.entityCollection.clear();
                };
                /**
                 * åå»ºå®ä½
                 */
                Repository.prototype.buildEntity = function (data) {
                    var entity = createEntity(this.entityType, data);
                    return entity;
                };
                /**
                 * æ¹éåå»ºå®ä½
                 */
                Repository.prototype.buildEntities = function (listData) {
                    var entities = createEntities(this.entityType, listData);
                    return entities;
                };
                /**
                 * åå§ååé¡µéç½®
                 * @param config ç¨æ·åé¡µéç½®
                 */
                Repository.prototype.setPaginationConfig = function (config) {
                    this.paginationManager = new PaginationManager(this.entityType, config);
                    var _a = (this.paginationManager.getPaginationConfigByPath('/') || {}).pageSize, pageSize = _a === void 0 ? 0 : _a;
                    // tslint:disable-next-line: max-line-length
                    this.entityCollection.paginationInfo = Object.assign({ pageSize: pageSize }, this.entityCollection.paginationInfo, this.paginationManager.pagination);
                    // æ éååç¬è®¾ç½®ä¸æ¬¡pageSizeï¼åå°ä¸æ¬¡åæ´
                    // this.entityCollection.pageSize = pageSize;
                };
                /**
                 * è®¾ç½®åé¡µ
                 */
                Repository.prototype.setPaginationInfo = function (paginationInfo) {
                    this.paginationInfo = __assign({}, this.paginationInfo, paginationInfo);
                };
                return Repository;
            }()));

            /**
             * ç©ºRepositoryå®ç°
             */
            var DefaultRepository = exports('DefaultRepository', /** @class */ (function (_super) {
                __extends(DefaultRepository, _super);
                function DefaultRepository() {
                    var _this = _super.call(this) || this;
                    _this.entityManager = new EntityManager(_this.entityCollection);
                    return _this;
                }
                return DefaultRepository;
            }(Repository)));

            /**
             * å½ä»¤å¤çè£é¥°å¨åç§°
             */
            var COMMAND_HANDLER_META = exports('COMMAND_HANDLER_META', 'CommandHandlerMeta');
            /**
             * å½ä»¤å¤çè£é¥°å¨å·¥å
             */
            function CommandHandlerMeta(options) {
                var decoratorFactory = makeDecorator(COMMAND_HANDLER_META, function (handler) { return handler; });
                return decoratorFactory(options);
            }
            /**
             * å½ä»¤å¤çæ©å±è£é¥°å¨åç§°
             */
            var COMMAND_HANDLER_EXTENDER_META = exports('COMMAND_HANDLER_EXTENDER_META', 'CommandHandlerExtenderMeta');
            /**
             * å½ä»¤å¤çæ©å±è£é¥°å¨å·¥å
             */
            function CommandHandlerExtenderMeta(options) {
                var decoratorFactory = makeDecorator(COMMAND_HANDLER_EXTENDER_META, function (extender) { return extender; });
                return decoratorFactory(options);
            }

            /**
             * ä»»å¡èç¹
             */
            var TaskNode = exports('TaskNode', /** @class */ (function () {
                /**
                 * æé å½æ°
                 */
                function TaskNode(name, func) {
                    this.name = name;
                    this.func = func;
                }
                /**
                 * æ§è¡ä»»å¡å½æ°
                 */
                TaskNode.prototype.execute = function (context) {
                    var result = this.func(context);
                    var result$ = isObservable(result) ? result : of(result);
                    return result$;
                };
                return TaskNode;
            }()));

            /**
             * sessionåéè§£æ
             * @author Witt <jiwt@inspur.com>
             */
            var VARIABLE_PARSERS = exports('VARIABLE_PARSERS', createInjectionToken('@farris/devkit VARIABLE_PARSERS'));

            var AppOptions = exports('AppOptions', /** @class */ (function () {
                function AppOptions() {
                }
                return AppOptions;
            }()));

            /*
             * @Author: Witt
             * @Date: 2018-12-29 10:46:01
             * @Last Modified by: Witt
             * @Last Modified time: 2018-12-30 17:56:02
             */
            /**
             * BindingDataç®¡çç±»
             */
            var BindingDataManager = exports('BindingDataManager', /** @class */ (function () {
                /**
                 * æé å½æ°
                 */
                function BindingDataManager() {
                    this.bindingDataMap = new Map();
                }
                /**
                 * è·åBindingDataMap
                 */
                BindingDataManager.prototype.getBindingDataMap = function () {
                    return this.bindingDataMap;
                };
                /**
                 * æ ¹æ®nameè·åBindingData
                 * @return æ¾ä¸å°æ¶è¿åundefined
                 */
                BindingDataManager.prototype.getBindingDataByName = function (name) {
                    return this.bindingDataMap.get(name);
                };
                /**
                 * åå§åå¨å±çBindingData
                 */
                BindingDataManager.prototype.regBindingData = function (name, bindingData) {
                    this.bindingDataMap.set(name, bindingData);
                };
                /**
                 * æ¯å¦Repositoryå·²ç»å­å¨
                 */
                BindingDataManager.prototype.ifBindingDataExits = function (name) {
                    var bindingData = this.getBindingDataByName(name);
                    return bindingData ? true : false;
                };
                return BindingDataManager;
            }()));

            /*
             * @Author: Witt
             * @Date: 2018-12-29 10:46:01
             * @Last Modified by: Witt
             * @Last Modified time: 2018-12-30 18:06:11
             */
            /**
             * Repositoryç®¡çç±»
             */
            var RepositoryManager = exports('RepositoryManager', /** @class */ (function () {
                /**
                 * æé å½æ°
                 */
                function RepositoryManager() {
                    this.repositoryMap = new Map();
                }
                /**
                 * æ³¨åRepository
                 */
                RepositoryManager.prototype.regRepository = function (name, repository) {
                    this.repositoryMap.set(name, repository);
                };
                /**
                 * è·åRepositoryMap
                 * @internal
                 */
                RepositoryManager.prototype.getRepositoryMap = function () {
                    return this.repositoryMap;
                };
                /**
                 * è·åRepositoryæ°ç»
                 */
                RepositoryManager.prototype.getRepositories = function () {
                    return Array.from(this.repositoryMap.values());
                };
                /**
                 * æ ¹æ®nameè·åRepository
                 */
                RepositoryManager.prototype.getRepositoryByName = function (name) {
                    return this.repositoryMap.get(name);
                };
                /**
                 * æ¯å¦Repositoryå·²ç»å­å¨
                 */
                RepositoryManager.prototype.ifRepositoryExits = function (name) {
                    var repository = this.getRepositoryByName(name);
                    return repository ? true : false;
                };
                return RepositoryManager;
            }()));

            /**
             * ViewModelContextç®¡çç±»
             */
            var ViewModelContextManager = exports('ViewModelContextManager', /** @class */ (function () {
                /**
                 * æé å½æ°
                 */
                function ViewModelContextManager() {
                    this.contextMap = new Map();
                    this.contextSet = new Set();
                }
                /**
                 * æ³¨åContext
                 */
                ViewModelContextManager.prototype.regContext = function (viewModelContext) {
                    var id = viewModelContext.id;
                    if (this.contextMap.has(id) === true) {
                        // throw Error(`idä¸º${id}çViewModelContextå·²ç»å­å¨`);
                        // ä¸´æ¶å¤çï¼æ¹å¼æ¥éã
                        this.unregContext(viewModelContext);
                    }
                    this.contextMap.set(id, viewModelContext);
                    this.contextSet.add(viewModelContext);
                };
                /**
                 * åæ¶æ³¨å
                 */
                ViewModelContextManager.prototype.unregContext = function (context) {
                    var id = context.id;
                    this.contextMap.delete(id);
                    this.contextSet.delete(context);
                };
                /**
                 * è·åContextMap
                 */
                ViewModelContextManager.prototype.getContextMap = function () {
                    return this.contextMap;
                };
                /**
                 * è·åå¨é¨Context
                 */
                ViewModelContextManager.prototype.getContexts = function () {
                    return Array.from(this.contextSet);
                };
                /**
                 * æ ¹æ®idè·åContext
                 */
                ViewModelContextManager.prototype.getContextById = function (id) {
                    var targetContext = this.contextMap.get(id);
                    return targetContext;
                };
                /**
                 * è·åæ ¹Context
                 */
                ViewModelContextManager.prototype.getRootContext = function () {
                    var contexts = this.getContexts();
                    var rootContext = contexts.find(function (context) {
                        return context.parent === null;
                    });
                    return rootContext;
                };
                /**
                 * è·åä¼ å¥è§å¾æ¨¡åidçrootårootçä¸ä¸ä»£éåæ°ç»
                 */
                ViewModelContextManager.prototype.getRootContextAndPosterityById = function (viewModelId) {
                    var targetContext = this.getContextById(viewModelId);
                    var contexts = this.getContexts();
                    var contextsGroup = [];
                    // 1.æ¾å°ROOT
                    var RootId = this.getContextsGroupRoot(targetContext);
                    // 2.å¯ç´æ¥éåæ¿å°ææç´ç³»åä»£ (ç®ååªæä¸¤å±ç»æç´æ¥è·åä¸ä¸ä»£)
                    contexts.map(function (context) {
                        if (context.parent && context.parent.id === RootId) {
                            contextsGroup.push(context);
                        }
                    });
                    contextsGroup.push(this.getContextById(RootId));
                    return contextsGroup;
                };
                ViewModelContextManager.prototype.getContextsGroupRoot = function (context) {
                    if (context.parent) {
                        return this.getContextsGroupRoot(context.parent);
                    }
                    else {
                        return context.id;
                    }
                };
                return ViewModelContextManager;
            }()));

            var Context = exports('Context', /** @class */ (function () {
                function Context() {
                    /**
                     * ä¸ä¸æåé
                     */
                    this.params = new Map();
                }
                /**
                 * è·ååé
                 */
                Context.prototype.getParam = function (key) {
                    return this.params.get(key);
                };
                /**
                 * è®¾ç½®åé
                 */
                Context.prototype.setParam = function (key, value) {
                    this.params.set(key, value);
                };
                return Context;
            }()));

            var AppContext = exports('AppContext', /** @class */ (function (_super) {
                __extends(AppContext, _super);
                /**
                 * æé å½æ°
                 */
                function AppContext(injector, eventBus, repositoryManager, bindingDataManager, viewModelContextManager) {
                    var _this = _super.call(this) || this;
                    _this.injector = injector;
                    _this.eventBus = eventBus;
                    _this.repositoryManager = repositoryManager;
                    _this.bindingDataManager = bindingDataManager;
                    _this.viewModelContextManager = viewModelContextManager;
                    return _this;
                }
                /**
                 * æ³¨åFrameContext
                 */
                AppContext.prototype.regViewModelContext = function (viewModelContext) {
                    var repository = viewModelContext.repository;
                    var repositoryName = repository.name;
                    // Repository
                    if (this.repositoryManager.ifRepositoryExits(repositoryName) === false) {
                        this.repositoryManager.regRepository(repositoryName, repository);
                    }
                    // BindingData
                    if (this.bindingDataManager.ifBindingDataExits(repositoryName) === false) {
                        var bindingData = BindingDataFactory.createFromRepository(repository, '/');
                        this.bindingDataManager.regBindingData(repositoryName, bindingData);
                    }
                    // èèè·¯ç±åæ¬¡è¿å¥çæ¶åï¼AppContextæ²¡æè¢«æ³¨éï¼ä½Componentè¢«åæ¬¡æé çåºæ¯
                    this.viewModelContextManager.regContext(viewModelContext);
                };
                return AppContext;
            }(Context)));

            /**
             * è§å¾æ¨¡åä¸ä¸æ
             */
            var ViewModelContext = exports('ViewModelContext', /** @class */ (function () {
                function ViewModelContext() {
                }
                ViewModelContext.prototype.init = function (viewModel) {
                    this.innerViewModel = viewModel;
                    this.id = this.innerViewModel.id;
                    this.appContext = viewModel.injector.get(AppContext);
                    this.regToTree();
                    this.regToAppContext();
                };
                ViewModelContext.prototype.regToTree = function () {
                    var parentInjector = this.innerViewModel.injector.get(Injector, null, InjectFlags.SkipSelf);
                    if (parentInjector) {
                        this.parent = parentInjector.get(ViewModelContext, null);
                        this.root = this.parent ? this.parent.root : this;
                    }
                    else {
                        this.parent = null;
                        this.root = this;
                    }
                };
                ViewModelContext.prototype.regToAppContext = function () {
                    this.appContext.regViewModelContext(this);
                };
                Object.defineProperty(ViewModelContext.prototype, "viewModel", {
                    get: function () {
                        return this.innerViewModel;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(ViewModelContext.prototype, "injector", {
                    get: function () {
                        return this.innerViewModel.injector;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(ViewModelContext.prototype, "repository", {
                    get: function () {
                        return this.innerViewModel.repository;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(ViewModelContext.prototype, "bindingData", {
                    get: function () {
                        return this.innerViewModel.bindingData;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(ViewModelContext.prototype, "uiState", {
                    get: function () {
                        return this.innerViewModel.uiState;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(ViewModelContext.prototype, "stateMachine", {
                    get: function () {
                        return this.innerViewModel.stateMachine;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(ViewModelContext.prototype, "form", {
                    get: function () {
                        return this.innerViewModel.form;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(ViewModelContext.prototype, "commandBus", {
                    get: function () {
                        return this.innerViewModel.commandBus;
                    },
                    enumerable: true,
                    configurable: true
                });
                return ViewModelContext;
            }()));

            /**
             * UIStateå±æ§åæ°æ®åç§°
             */
            var UISTATE_PROP_META = exports('UISTATE_PROP_META', 'UIStatePropMeta');
            var Éµ0$2 = function (obj) { return obj; };
            /**
             * UIStateå±æ§åæ°æ®è£é¥°å¨å·¥å
             */
            var UIStatePropMeta = exports('UIStatePropMeta', makePropDecorator(UISTATE_PROP_META, Éµ0$2));

            var UIStateMetadataUtil = exports('UIStateMetadataUtil', /** @class */ (function () {
                function UIStateMetadataUtil() {
                }
                /**
                 * è·åNgUIStateçå±æ§åæ°æ®
                 * @param
                 * @returns å±æ§åæ°æ®å¯¹è±¡
                 * @example
                 * è¿åæ ¼å¼ï¼
                 * {
                 *    'å±æ§åç§°': <NgUIStateProperty>{ ...}
                 * }
                 */
                UIStateMetadataUtil.getUIFields = function (target) {
                    return MetadataUtil.getPropsMetadatasByName(target, UISTATE_PROP_META);
                };
                return UIStateMetadataUtil;
            }()));

            /*
             * @Author: Witt
             * @Date: 2018-11-17 13:38:23
             * @Last Modified by: Witt
             * @Last Modified time: 2018-11-17 13:38:50
             * @todoï¼ä¸´æ¶å é¤åæåè½ï¼å¾éæ
             */
            /**
             * UIç¶æ
             */
            var UIState = exports('UIState', /** @class */ (function () {
                function UIState() {
                    this.changes = new Subject();
                    this.innerData = Object.assign({});
                    this._init();
                }
                UIState.prototype._init = function () {
                    var construct = this.constructor;
                    var uiFields = UIStateMetadataUtil.getUIFields(construct);
                    this.initializeUIField(uiFields);
                };
                UIState.prototype.initializeUIField = function (uiFieldMetadata) {
                    var _this = this;
                    Object.keys(uiFieldMetadata).forEach(function (propertyName) {
                        var fieldMetadata = uiFieldMetadata[propertyName];
                        var uiField = fieldMetadata.stateName || propertyName;
                        if (delete _this[propertyName]) {
                            _this.defineProperty(propertyName, uiField);
                        }
                    });
                };
                UIState.prototype.isExistProperty = function (propertyName) {
                    if (this.innerData.hasOwnProperty(propertyName) || this.hasOwnProperty(propertyName)) {
                        return true;
                    }
                    return false;
                };
                UIState.prototype.defineProperty = function (propertyName, field) {
                    if (field === void 0) { field = null; }
                    Object.defineProperty(this, propertyName, {
                        get: function () {
                            return field !== null ? this.innerData[field] : this.innerData[propertyName];
                        },
                        set: function (value) {
                            // å¼ç¸åæ¶ä¸è§¦ååæ´
                            var oldValue = field !== null ? this.innerData[field] : this.innerData[propertyName];
                            if (oldValue === value) {
                                return;
                            }
                            if (field !== null) {
                                this.innerData[field] = value;
                            }
                            else {
                                this.innerData[propertyName] = value;
                            }
                            this.changes.next({
                                field: propertyName,
                                value: value
                            });
                        }
                    });
                };
                UIState.prototype.setPropertyValue = function (propertyName, value) {
                    if (propertyName === '' || propertyName === undefined) {
                        return;
                    }
                    if (!this.isExistProperty(propertyName)) {
                        this.defineProperty(propertyName);
                    }
                    this[propertyName] = value;
                };
                return UIState;
            }()));

            /**
             * --------------------------------------------------------------------------------
             * Stateç¸å³
             * --------------------------------------------------------------------------------
             */
            /**
             * åºæ¬ç¶æï¼è¡¨åçåºæ¬ç¶æï¼éè¿Stateçè¿ç®ç¡®å®RenderStateçå¼ï¼è¿èæ§å¶é¡µé¢æ§ä»¶çç¶æã
             */
            var State = exports('State', /** @class */ (function () {
                /**
                 * æé å½æ°
                 * @param name ç¶æåç§°
                 */
                function State(name) {
                    this.name = name;
                }
                return State;
            }()));
            /**
             * åå§æ¸²æç¶æ
             */
            var initialUIState = exports('initialUIState', false);

            /**
             * ç¶æåæ°æ®åç§°
             */
            var STATE_PROP_META = exports('STATE_PROP_META', 'StatePropMeta');
            var Éµ0$3 = function (obj) { return obj; };
            /**
             * é¡µé¢ç¶æåæ°æ®è£é¥°å¨å·¥å
             */
            var StatePropMeta = exports('StatePropMeta', makePropDecorator(STATE_PROP_META, Éµ0$3));

            /**
             * ç»ä»¶ç¶æåæ°æ®åç§°
             */
            var RENDER_STATE_PROP_META = exports('RENDER_STATE_PROP_META', 'RenderStatePropMeta');
            var Éµ0$4 = function (obj) { return obj; };
            /**
             * ç»ä»¶ç¶æåæ°æ®å·¥å
             */
            var RenderStatePropMeta = exports('RenderStatePropMeta', makePropDecorator(RENDER_STATE_PROP_META, Éµ0$4));

            /**
             * å¨ä½æ¹æ³åæ°æ®åç§°
             */
            var ACTION_METHOD_META = exports('ACTION_METHOD_META', 'ActionMethodMeta');
            var Éµ0$5 = function (action) { return action; };
            /**
             * è¿ç§»å¨ä½åæ°æ®è£é¥°å·¥å
             */
            var ActionMethodMeta = exports('ActionMethodMeta', makePropDecorator(ACTION_METHOD_META, Éµ0$5));

            /**
             * ç¶ææºä¸ä¸æ
             */
            var StateMachineContext = exports('StateMachineContext', /** @class */ (function () {
                /**
                 * æé å½æ°
                 * @param stateMachine ç¶ææºå®ä¾
                 * @param initialState åå§ç¶æ
                 */
                function StateMachineContext(stateMachine, initialState) {
                    this.stateMachine = stateMachine;
                    this.state = initialState.name;
                }
                /**
                 * åå§å
                 */
                StateMachineContext.prototype.init = function (frameContext) {
                    this.viewModelContext = frameContext;
                    this.parser = this.viewModelContext.injector.get(VariableParseService);
                    this.stateMachineWatcher = this.stateMachine.stateMachineWatcher;
                };
                /**
                 * ç¶æè¿ç§»
                 * @param stateName ä¸ä¸ç¶æçåç§°
                 */
                StateMachineContext.prototype.transitTo = function (stateName) {
                    var nextState = this.stateMachine.states[stateName];
                    if (nextState) {
                        this.state = nextState.name;
                        this.stateMachine.render();
                    }
                };
                /**
                 * è·åexpressionå¯¹åºçUIStateå¼
                 * @param expression UIStateè¡¨è¾¾å¼
                 */
                StateMachineContext.prototype.getUIState = function (expression) {
                    if (!expression) {
                        return;
                    }
                    var viewModelContext = this.stateMachineWatcher.getViewModelContext(expression);
                    if (!viewModelContext) {
                        return;
                    }
                    this.stateMachineWatcher.subscribeUIStateChange(viewModelContext, expression);
                    if (this.parser) {
                        var value = this.parser.parse(expression, viewModelContext);
                        if (value === null) {
                            return null;
                        }
                        if (typeof value === 'object' && Object.keys(value).length === 0) {
                            return null;
                        }
                        return value;
                    }
                    else {
                        throw new Error('æªåå§ååéè§£æå¨ã');
                    }
                };
                /**
                 * è·åæ°æ®çå¼
                 */
                StateMachineContext.prototype.getData = function (expression) {
                    if (!expression) {
                        return;
                    }
                    var viewModelContext = this.stateMachineWatcher.getViewModelContext(expression);
                    if (!viewModelContext) {
                        return;
                    }
                    this.stateMachineWatcher.subscribeEntityChange(viewModelContext, expression);
                    if (this.parser) {
                        var value = this.parser.parse(expression, viewModelContext);
                        if (value === null) {
                            return null;
                        }
                        if (typeof value === 'object' && Object.keys(value).length === 0) {
                            return null;
                        }
                        return value;
                    }
                    else {
                        throw new Error('æªåå§ååéè§£æå¨ã');
                    }
                };
                return StateMachineContext;
            }()));

            /**
             * ç¶ææºäºä»¶ï¼çå¬uistateçåååentityçåå
             */
            var StateMachineWatcher = /** @class */ (function () {
                function StateMachineWatcher(stateMachine) {
                    this.stateMachine = stateMachine;
                    /**
                     * ææUIStatePathæ°ç»
                     */
                    this.uiStatePathList = [];
                    /**
                     * ææDataStatePathæ°ç»
                     */
                    this.dataStatePathList = [];
                    this.viewModelContextAndUIStatePathsMap = new Map();
                    this.viewModelContextAndDataStatePathsMap = new Map();
                }
                /**
                 * åå§å
                 * @param viewModelContext å½åè§å¾ä¸ä¸æ
                 */
                StateMachineWatcher.prototype.init = function (viewModelContext) {
                    this.viewModelContext = viewModelContext;
                };
                /**
                 * è¿åè¡¨è¾¾å¼ä¸­ViewModelIdå¯¹åºçViewModelContext
                 */
                StateMachineWatcher.prototype.getViewModelContext = function (expression) {
                    var viewModelId = this.extractPaths(expression).split('/')[1];
                    return this.viewModelContext.appContext.viewModelContextManager.getContextById(viewModelId);
                };
                /**
                 * çå¬UIStateåæ´
                 * @param viewModelContext ViewModelä¸ä¸æ
                 * @param expression UIStateè¡¨è¾¾å¼
                 */
                StateMachineWatcher.prototype.subscribeUIStateChange = function (viewModelContext, expression) {
                    var _this = this;
                    var uiStatePath = this.getStatePath(expression);
                    if (this.viewModelContextAndUIStatePathsMap.has(viewModelContext) === false) {
                        this.viewModelContextAndUIStatePathsMap.set(viewModelContext, this.uiStatePathList);
                        viewModelContext.uiState.changes.subscribe(function (uiStateChange) {
                            var uiStatePathList = _this.viewModelContextAndUIStatePathsMap.get(viewModelContext);
                            if (uiStateChange.field && uiStatePathList.indexOf(uiStateChange.field) > -1) {
                                _this.stateMachine.render();
                            }
                        });
                    }
                    if (this.viewModelContextAndUIStatePathsMap.get(viewModelContext).indexOf(uiStatePath) === -1) {
                        this.uiStatePathList.push(uiStatePath);
                    }
                };
                /**
                 * çå¬å®ä½åæ´
                 */
                StateMachineWatcher.prototype.subscribeEntityChange = function (viewModelContext, expression) {
                    var _this = this;
                    if (this.viewModelContextAndDataStatePathsMap.has(viewModelContext) === false) {
                        this.viewModelContextAndDataStatePathsMap.set(viewModelContext, this.dataStatePathList);
                        viewModelContext.bindingData.changes.subscribe(function (change) {
                            if (change.type === 'Load' || change.type === 'SelectionChanged') {
                                _this.stateMachine.render();
                            }
                            var dataPathList = _this.viewModelContextAndDataStatePathsMap.get(viewModelContext);
                            if (change.path.join() && _this.isAccordingPath(dataPathList, change.path.join('/'))) {
                                _this.stateMachine.render();
                            }
                        });
                    }
                    if (this.viewModelContextAndDataStatePathsMap.get(viewModelContext).indexOf(expression) === -1) {
                        this.dataStatePathList.push(expression);
                    }
                };
                /**
                 * æ ¹æ®è¡¨è¾¾å¼è·åå¯¹åºçStatePathï¼ç§»é¤äºViewModelIdä¹å¤çé¨åï¼
                 * @param expression åéè¡¨è¾¾å¼
                 */
                StateMachineWatcher.prototype.getStatePath = function (expression) {
                    return this.extractPaths(expression).split('/')[2];
                };
                /**
                 * å¤æ­æ¯å¦çå¬èå´åçåæ´è·¯å¾
                 */
                StateMachineWatcher.prototype.isAccordingPath = function (dataStatePaths, dataStatePath) {
                    var targetPath = dataStatePaths.find(function (item) {
                        return item.indexOf(dataStatePath) > -1;
                    });
                    return targetPath === undefined ? false : true;
                };
                /**
                 * ææ¶æè¿ä¸ªæ¹æ³æ¾äºè¿ä¸ªå°æ¹ï¼ç­å­£èå¸å±ç¨æ¹æ³è°æ´åï¼ç´æ¥å¼ç¨ä»çæ¹æ³ï¼è¯¥æ¹æ³å¯å é¤
                 * @param expression åéè¡¨è¾¾å¼
                 */
                StateMachineWatcher.prototype.extractPaths = function (expression) {
                    var path;
                    var UI_STATE_PATTERN_G = /\{UISTATE~(\S+?)\}/g;
                    var DATA_PATTERN_G = /\{DATA~(\S+?)\}/g;
                    var uiStateVariables = expression.match(UI_STATE_PATTERN_G);
                    var dataVariables = expression.match(DATA_PATTERN_G);
                    if (uiStateVariables !== null) {
                        var UI_STATE_PATTERN_1 = /\{UISTATE~(\S+?)\}/;
                        uiStateVariables.forEach(function (uiStateVariable) {
                            var pathMatches = uiStateVariable.match(UI_STATE_PATTERN_1);
                            if (pathMatches != null && pathMatches.length === 2) {
                                path = pathMatches[1];
                            }
                        });
                    }
                    if (dataVariables !== null) {
                        var DATA_PATTERN_1 = /\{DATA~(\S+?)\}/;
                        dataVariables.forEach(function (dataVariable) {
                            var pathMatches = dataVariable.match(DATA_PATTERN_1);
                            if (pathMatches != null && pathMatches.length === 2) {
                                path = pathMatches[1];
                            }
                        });
                    }
                    return path;
                };
                return StateMachineWatcher;
            }());

            /**
             * ç¶ææº
             */
            var StateMachine = exports('StateMachine', /** @class */ (function () {
                /**
                 * æé å½æ°
                 */
                function StateMachine() {
                    this.renderStates = {};
                    this.handlePropMetadatas();
                    this.stateChange = new BehaviorSubject(false);
                    this.context = new StateMachineContext(this, this.initialState);
                    this.stateMachineWatcher = new StateMachineWatcher(this);
                }
                /**
                 * åå§åç¶ææº
                 * @param viewModelContext ViewModelä¸ä¸æ
                 * @summary
                 * ç¶ææºåæ´ï¼ä¸ºäºå¨ç»å®æ°æ®ä¹åæ§è¡ç¶ææºçæä½ï¼ærenderæ¹æ³å»¶åæ§è¡ã
                 */
                StateMachine.prototype.init = function (viewModelContext) {
                    this.viewModelContext = viewModelContext;
                    this.context.init(this.viewModelContext);
                    this.stateMachineWatcher.init(this.viewModelContext);
                    this.render();
                };
                /**
                 * æ¹éå¤çå±æ§åæ°æ®
                 */
                StateMachine.prototype.handlePropMetadatas = function () {
                    var _this = this;
                    var propsMetadatas = MetadataUtil.getPropsMetadatas(this.constructor);
                    // éåææå±æ§è£é¥°å¨ï¼å¹¶è°ç¨ç¸åºçbuildæ¹æ³
                    if (propsMetadatas) {
                        Object.keys(propsMetadatas).forEach(function (propName) {
                            var propMetadatas = propsMetadatas[propName];
                            propMetadatas.forEach(function (propMetadata) {
                                _this.handlePropMetadata(propName, propMetadata);
                            });
                        });
                    }
                    if (!this.initialState) {
                        throw new Error('è¯·å¨StatePropMetaæ³¨è§£ä¸­æå®ç¶ææºçåå§ç¶æã');
                    }
                };
                /**
                 * å¤çå±æ§åæ°æ®
                 */
                StateMachine.prototype.handlePropMetadata = function (propName, propMetadata) {
                    var ngMetadataName = propMetadata.ngMetadataName;
                    switch (ngMetadataName) {
                        case STATE_PROP_META:
                            this.buildState(propName, propMetadata);
                            break;
                        case RENDER_STATE_PROP_META:
                            this.buildRenderState(propName, propMetadata);
                            break;
                        case ACTION_METHOD_META:
                            this.buildAction(propName, propMetadata);
                            break;
                    }
                };
                /**
                 * åè£State
                 * @param stateName ç¶æåç§°
                 * @param ngState   ç¶æå¯¹è±¡
                 */
                StateMachine.prototype.buildState = function (stateName, ngState) {
                    this.states = this.states || {};
                    this[stateName] = new State(stateName);
                    this.states[stateName] = this[stateName];
                    if (ngState.initialState) {
                        this.initialState = this[stateName];
                    }
                };
                /**
                 * åè£RenderState
                 * @param renderStateName æ¸²æç¶æåç§°
                 * @param ngRenderState   æ¸²æç¶æåæ°æ®
                 */
                StateMachine.prototype.buildRenderState = function (renderStateName, ngRenderState) {
                    this.renderStates = this.renderStates || {};
                    this[renderStateName] = initialUIState;
                    this.renderStates[renderStateName] = this[renderStateName];
                    // å°renderStateä¸æå®çrenderå å¥å°rendersä¸­
                    this.renders = this.renders || {};
                    this.renders[renderStateName] = ngRenderState.render;
                };
                /**
                 * åè£Action
                 * @param actionName å¨ä½åç§°
                 * @param ngAction å¨ä½åæ°æ®
                 */
                StateMachine.prototype.buildAction = function (actionName, ngAction) {
                    var _this = this;
                    this[actionName] = function () {
                        var nextStateName = ngAction.transitTo;
                        var nextState = _this.states[nextStateName];
                        _this.context.transitTo(nextState.name);
                        _this.render();
                    };
                };
                /**
                 * éæ°è®¡ç®æææ¸²æç¶æçå¼
                 * @sumamry
                 * å½ stateåæ¢çæ¶åï¼è°ç¨éåææçrenderæ¹æ³ï¼æ´æ¹renderState
                 */
                StateMachine.prototype.render = function () {
                    for (var renderStateName in this.renderStates) {
                        if (this.renderStates.hasOwnProperty(renderStateName) === false) {
                            continue;
                        }
                        // æ§è¡RenderStateçrenderæ¹æ³ï¼æ´æ°renderState
                        var stateRender = this.renders[renderStateName];
                        if (!stateRender) {
                            continue;
                        }
                        this.renderStates[renderStateName] = stateRender(this.context);
                        this[renderStateName] = this.renderStates[renderStateName];
                    }
                    this.stateChange.next(this.context.state);
                };
                return StateMachine;
            }()));

            var BindingType;
            (function (BindingType) {
                /**
                 * å®ä½ç¶æ
                 */
                BindingType["EntityState"] = "EntityState";
                /**
                 * UIç¶æ
                 */
                BindingType["UIState"] = "UIState";
            })(BindingType || (BindingType = exports('BindingType', {})));

            /**
             * æ¥æå­ç¬¦ä¸²è½¬æ¢å¨
             */
            var DateStringValueConverter = exports('DateStringValueConverter', /** @class */ (function () {
                function DateStringValueConverter() {
                }
                DateStringValueConverter.prototype.convertFrom = function (dateObj) {
                    return DateUtil.formatISO(dateObj);
                };
                DateStringValueConverter.prototype.convertTo = function (dateString) {
                    return DateUtil.parse(dateString);
                };
                return DateStringValueConverter;
            }()));
            /**
             * æ°ç»å­ç¬¦ä¸²è½¬æ¢å¨
             */
            var ArrayStringValueConverter = exports('ArrayStringValueConverter', /** @class */ (function () {
                function ArrayStringValueConverter() {
                }
                ArrayStringValueConverter.prototype.convertFrom = function (arr) {
                    return arr.join(',');
                };
                ArrayStringValueConverter.prototype.convertTo = function (arrString) {
                    return arrString.split(',');
                };
                return ArrayStringValueConverter;
            }()));

            /**
             * Entityå¼è®¿é®å¨
             */
            var EntityBindingValueAccessor = exports('EntityBindingValueAccessor', /** @class */ (function () {
                function EntityBindingValueAccessor(bindingData, bindingPath, valueConverter) {
                    this.bindingData = bindingData;
                    this.bindingPathSegments = this.getBindingPathSegments(bindingPath);
                    this.valueConverter = valueConverter;
                }
                EntityBindingValueAccessor.prototype.getValue = function () {
                    var stateValue = this.bindingData.getValue(this.bindingPathSegments);
                    var controlValue = this.valueConverter ? this.valueConverter.convertTo(stateValue) : stateValue;
                    return controlValue;
                };
                EntityBindingValueAccessor.prototype.setValue = function (controlValue) {
                    var oldStateValue = this.bindingData.getValue(this.bindingPathSegments);
                    var stateValue = this.valueConverter ? this.valueConverter.convertFrom(controlValue) : controlValue;
                    if (this.isDateConverter(this.valueConverter) === true) {
                        if (DateUtil.isEqual(oldStateValue, stateValue) === true) {
                            return;
                        }
                    }
                    this.bindingData.setValue(this.bindingPathSegments, stateValue, true, true);
                };
                EntityBindingValueAccessor.prototype.getBindingPathSegments = function (bindingPath) {
                    var parentPathSegments = BindingPathConverter.toBindingPathArray(this.bindingData.bindingPath);
                    bindingPath = bindingPath.replace(/\./g, '\/');
                    var bindingPathSegments = BindingPathConverter.toBindingPathArray(bindingPath);
                    return parentPathSegments.concat(bindingPathSegments);
                };
                /**
                 * æ¯å¦æ¯DateConverter
                 */
                EntityBindingValueAccessor.prototype.isDateConverter = function (converter) {
                    var isDateConverter = false;
                    if (converter && converter.hasOwnProperty('format') === true) {
                        isDateConverter = true;
                    }
                    return isDateConverter;
                };
                return EntityBindingValueAccessor;
            }()));
            /**
             * UIStateå¼è®¿é®å¨
             */
            var UIStateBindingValueAccessor = exports('UIStateBindingValueAccessor', /** @class */ (function () {
                function UIStateBindingValueAccessor(uiState, bindingPath, valueConverter) {
                    this.uiState = uiState;
                    this.bindingPathSegments = this.getUiStateBindingPath(bindingPath);
                }
                UIStateBindingValueAccessor.prototype.getValue = function () {
                    var stateValue;
                    var obj = this.uiState;
                    this.bindingPathSegments.forEach(function (item) {
                        stateValue = obj[item];
                        obj = stateValue;
                    });
                    return stateValue;
                };
                UIStateBindingValueAccessor.prototype.setValue = function (controlValue) {
                    var _a;
                    var length = this.bindingPathSegments.length;
                    if (length === 1) {
                        this.uiState.setPropertyValue(this.bindingPathSegments, controlValue);
                    }
                    else {
                        var obj = void 0;
                        for (var i = length - 1; i > 0; i--) {
                            obj = (_a = {}, _a[this.bindingPathSegments[i]] = controlValue, _a);
                            controlValue = obj;
                        }
                        this.uiState.setPropertyValue(this.bindingPathSegments[0], obj);
                    }
                };
                // UISTATEè·åè·¯å¾
                UIStateBindingValueAccessor.prototype.getUiStateBindingPath = function (bindingPath) {
                    var index = bindingPath.search('/');
                    if (index !== -1) {
                        return bindingPath.split('/');
                    }
                    else {
                        return [bindingPath];
                    }
                };
                return UIStateBindingValueAccessor;
            }()));
            /**
             * ç»å®å¼è®¿é®å¨å·¥å
             */
            var BindingValueAccessorFactory = exports('BindingValueAccessorFactory', /** @class */ (function () {
                function BindingValueAccessorFactory() {
                }
                BindingValueAccessorFactory.create = function (bindingType, bindingBindingPath, bindingValueConverter, viewModelContext) {
                    switch (bindingType) {
                        case BindingType.EntityState:
                            var bindingData = viewModelContext.bindingData;
                            return new EntityBindingValueAccessor(bindingData, bindingBindingPath, bindingValueConverter);
                        case BindingType.UIState:
                            var uiState = viewModelContext.uiState;
                            return new UIStateBindingValueAccessor(uiState, bindingBindingPath, bindingValueConverter);
                        default:
                            throw new Error('Not Supported');
                    }
                };
                return BindingValueAccessorFactory;
            }()));

            /**
             * FormControlåæ°æ®åç§°
             */
            var FORM_CONTROL_PROP_META = exports('FORM_CONTROL_PROP_META', 'FormControlPropMeta');
            var Éµ0$6 = function (obj) { return obj; };
            /**
             * FormControlè£é¥°å¨å·¥å
             */
            var FormControlPropMeta = exports('FormControlPropMeta', makePropDecorator(FORM_CONTROL_PROP_META, Éµ0$6));

            /**
             * éªè¯å¨å·¥å
             */
            var ValidatorFactory = /** @class */ (function () {
                function ValidatorFactory() {
                }
                /**
                 * åå»ºééå¨
                 */
                ValidatorFactory.create = function (validRules) {
                    var _this = this;
                    var validatorFn = [];
                    if (Array.isArray(validRules) && validRules.length > 1) {
                        validRules.forEach(function (validRule) {
                            validatorFn.push(_this.initValidRuleFn(validRule));
                        });
                    }
                    else if (Array.isArray(validRules) && validRules.length === 1) {
                        validatorFn.push(this.initValidRuleFn(validRules[0]));
                    }
                    else {
                        validatorFn.push(this.initValidRuleFn(validRules));
                    }
                    return validatorFn;
                };
                ValidatorFactory.initValidRuleFn = function (validRule) {
                    var type = validRule.type, constraints = validRule.constraints, message = validRule.message;
                    switch (type) {
                        case 'required':
                            return function (v) {
                                if (constraints[0] === true) {
                                    if (null === v || undefined === v || '' === v) {
                                        return { passing: false, message: message || 'å¿å¡«' };
                                    }
                                    else {
                                        return { passing: true, message: '' };
                                    }
                                }
                            };
                        case 'NumberMaxValue':
                            return function (v) {
                                if (typeof v !== 'number') {
                                    return;
                                }
                                if (constraints[0] || 0 == constraints[0]) {
                                    if (v <= parseFloat(constraints[0])) {
                                        return { passing: true, message: '' };
                                    }
                                    else {
                                        return { passing: false, message: message || "\u8F93\u5165\u503C\u4E0D\u80FD\u5927\u4E8E" + constraints[0] };
                                    }
                                }
                            };
                        case 'NumberMinValue':
                            return function (v) {
                                if (typeof v !== 'number') {
                                    return;
                                }
                                if (constraints[0] || 0 == constraints[0]) {
                                    if (v >= parseFloat(constraints[0])) {
                                        return { passing: true, message: '' };
                                    }
                                    else {
                                        return { passing: false, message: message || "\u8F93\u5165\u503C\u4E0D\u80FD\u5C0F\u4E8E" + constraints[0] };
                                    }
                                }
                            };
                        case 'DateMaxValue':
                            return function (v) {
                                if (constraints[0]) {
                                    if (DateUtil.isBefore(v, constraints[0]) || DateUtil.isSame(v, constraints[0])) {
                                        return { passing: true, message: '' };
                                    }
                                    else {
                                        return { passing: false, message: message || "\u8F93\u5165\u65E5\u671F\u4E0D\u80FD\u5927\u4E8E" + constraints[0] };
                                    }
                                }
                            };
                        case 'DateMinValue':
                            return function (v) {
                                if (constraints[0]) {
                                    if (DateUtil.isAfter(v, constraints[0]) || DateUtil.isSame(v, constraints[0])) {
                                        return { passing: true, message: '' };
                                    }
                                    else {
                                        return { passing: false, message: message || "\u8F93\u5165\u65E5\u671F\u4E0D\u80FD\u5C0F\u4E8E" + constraints[0] };
                                    }
                                }
                            };
                        case 'StringMaxLength':
                            return function (v) {
                                if (constraints[0]) {
                                    if (v.length <= constraints[0]) {
                                        return { passing: true, message: '' };
                                    }
                                    else {
                                        return { passing: false, message: message || "\u8F93\u5165\u503C\u957F\u5EA6\u4E0D\u80FD\u5927\u4E8E" + constraints[0] };
                                    }
                                }
                            };
                        case 'StringMinLength':
                            return function (v) {
                                if (constraints[0]) {
                                    if (v.length >= constraints[0]) {
                                        return { passing: true, message: '' };
                                    }
                                    else {
                                        return { passing: false, message: message || "\u8F93\u5165\u503C\u957F\u5EA6\u4E0D\u80FD\u5C0F\u4E8E" + constraints[0] };
                                    }
                                }
                            };
                        case 'regex':
                            return function (v) {
                                var constraintsTemp = [];
                                if (typeof constraints[0] === 'string') {
                                    constraintsTemp = constraints[0].split(',');
                                }
                                for (var i = 0; i < constraintsTemp.length; i++) {
                                    if (constraintsTemp[i] === '') {
                                        return;
                                    }
                                    var re = new RegExp(constraintsTemp[i]);
                                    if (re.test(v)) {
                                        return { passing: false, message: message || "\u5B58\u5728\u4E0D\u53EF\u8F93\u5165\u9879" + constraints[0] };
                                    }
                                    else {
                                        return { passing: true, message: '' };
                                    }
                                }
                            };
                        case 'customFunction':
                            return function (v) {
                                if (typeof constraints[0] === 'function') {
                                    var message_1 = constraints[0](v);
                                    if (!message_1) {
                                        return { passing: true, message: '' };
                                    }
                                    else {
                                        return { passing: false, message: message_1 };
                                    }
                                }
                            };
                        default:
                            return function () {
                                return { passing: true, message: '' };
                            };
                    }
                };
                /**
                 * éåçæçæ ¡éªæ¹æ³å¯¹å½åå¼è¿è¡æ ¡éªï¼å½åç°éè¯¯å°±è¿åæ ¡éªç»æ
                 * éåå®ææ²¡æéè¯¯åè¿åæ ¡éªéè¿ç»æ
                 * @param validatorFn æ ¡éªæ¹æ³
                 * @param value å½åå¼
                 */
                ValidatorFactory.executeValidator = function (validatorFn, value) {
                    for (var i = 0; i < validatorFn.length; i++) {
                        var validationResult = validatorFn[i](value);
                        if (validationResult['passing'] === false) {
                            return validationResult;
                        }
                    }
                    return { passing: true, message: '' };
                };
                return ValidatorFactory;
            }());

            /**
             * FormControlå®ä¹
             */
            var FormControl = exports('FormControl', /** @class */ (function () {
                function FormControl(config, viewModelContext) {
                    this.valueAccessor = BindingValueAccessorFactory.create(config.bindingType, config.bindingPath, config.valueConverter, viewModelContext);
                    this.validatorFn = config.validRules && ValidatorFactory.create(config.validRules);
                }
                Object.defineProperty(FormControl.prototype, "value", {
                    get: function () {
                        return this.valueAccessor.getValue();
                    },
                    set: function (val) {
                        this.valueAccessor.setValue(val);
                    },
                    enumerable: true,
                    configurable: true
                });
                return FormControl;
            }()));

            /**
             * Formæ½è±¡ç±»
             */
            var Form = exports('Form', /** @class */ (function () {
                /**
                 * æé å½æ°
                 */
                function Form(viewModelContext) {
                    this.viewModelContext = viewModelContext;
                    this.formControlConfigs = [];
                    this.validateformControls = [];
                    this.validateformControlPathMap = new Map;
                    this.changes = new Subject();
                }
                /**
                 * åå§å
                 */
                Form.prototype.init = function () {
                    this.collectMetadatas();
                    this.createFormControls();
                };
                /**
                 * å¨é¨æ ¡éª
                 *  formControlConfigs ä¸ææçformControlçå­å¨æ¹æ³è°ç¨ä¸é å°éè¯¯ä¿¡æ¯éä¸­è¿å
                 */
                Form.prototype.validateFields = function () {
                    var _this = this;
                    var validationResult = [];
                    if (this.validateformControls.length === 0) {
                        return validationResult;
                    }
                    this.validateformControls.forEach(function (formControl) {
                        _this[formControl]['validationResult'] = ValidatorFactory.executeValidator(_this[formControl]['validatorFn'], _this[formControl]['value']);
                        !_this[formControl]['validationResult'].passing && validationResult.push(_this[formControl]);
                    });
                    this.changes.next({ type: 'validateFieldsFinished' });
                    return validationResult;
                };
                /**
                 * è·åæä¸ä¸ªå¾æ ¡éªéè¯¯ä¿¡æ¯
                 * @param name å±æ§åç§°
                 */
                Form.prototype.getFieldError = function (name) {
                    if (this.validateformControls.length === 0) {
                        return {};
                    }
                    var index = this.validateformControls.findIndex(function (item) {
                        return item === name;
                    });
                    if (index === -1) {
                        return {};
                    }
                    else {
                        var result = ValidatorFactory.executeValidator(this[name]['validatorFn'], this[name]['value']);
                        this[name]['validationResult'] = result;
                        this.changes.next({ type: 'validateFieldsFinished', value: name });
                        return result;
                    }
                };
                /**
               * æ ¹æ®formåæ°æ®ä¸­çpathè·åæä¸ä¸ªå¾æ ¡éªéè¯¯ä¿¡æ¯
               * @param path å±æ§åç§°æ°ç»
               */
                Form.prototype.getFieldErrorByPath = function (path) {
                    if (this.validateformControls.length === 0) {
                        return {};
                    }
                    var pathName = path[0];
                    if (path && path.length >= 2) {
                        pathName = path.join('.');
                    }
                    var index = this.validateformControlPathMap.has(pathName);
                    if (!index) {
                        return {};
                    }
                    else {
                        var result = ValidatorFactory.executeValidator(this[this.validateformControlPathMap.get(pathName)]['validatorFn'], this[this.validateformControlPathMap.get(pathName)]['value']);
                        this[this.validateformControlPathMap.get(pathName)]['validationResult'] = result;
                        this.changes.next({ type: 'validateFieldsFinished', value: this.validateformControlPathMap.get(pathName) });
                        return result;
                    }
                };
                /**
                 * æ¸é¤ä¸ç»å­æ®µéªè¯ç¶æ
                 * @param fields å­æ®µçæ°ç»
                 */
                Form.prototype.resetFieldsValidate = function (fields) {
                    var _this = this;
                    if (this.validateformControls.length === 0) {
                        return true;
                    }
                    else {
                        if (fields && fields.length > 0) {
                            new Set(this.validateformControls);
                            var sb_1 = new Set(fields);
                            // äº¤é
                            var intersect = this.validateformControls.filter(function (x) { return sb_1.has(x); });
                            // éåæ¸ç©ºæææ ¡éªç»ææ°æ®
                            intersect.forEach(function (item) {
                                _this[item]['validationResult'] = {};
                            });
                        }
                        else {
                            // æ²¡ä¼ æ°æ®å¨é¨æ¸é¤
                            this.validateformControls.forEach(function (item) {
                                _this[item]['validationResult'] = {};
                            });
                        }
                        this.changes.next({ type: 'validateFieldsFinished' });
                    }
                };
                /**
                 * åå»ºFormControls
                 */
                Form.prototype.createFormControls = function () {
                    var _this = this;
                    this.formControlConfigs.forEach(function (formControlConfig) {
                        var name = formControlConfig.name;
                        var formControl = new FormControl(formControlConfig, _this.viewModelContext);
                        _this[name] = formControl;
                    });
                };
                /**
                 * æ¶éåæ°æ®
                 */
                Form.prototype.collectMetadatas = function () {
                    var _this = this;
                    var formControlMetadatas = MetadataUtil.getPropsMetadatasByName(this.constructor, FORM_CONTROL_PROP_META);
                    Object.keys(formControlMetadatas).forEach(function (name) {
                        var formControlMetadata = formControlMetadatas[name];
                        if (formControlMetadata.validRules) {
                            _this.validateformControls.push(name);
                            _this.validateformControlPathMap.set(formControlMetadata.bindingPath, name);
                        }
                        var formControlConfig = {
                            name: name,
                            bindingType: formControlMetadata.bindingType,
                            bindingPath: formControlMetadata.bindingPath,
                            valueConverter: formControlMetadata.valueConverter,
                            valueChanging: formControlMetadata.valueChanging,
                            valueChanged: formControlMetadata.valueChanged,
                            validRules: formControlMetadata.validRules
                        };
                        _this.formControlConfigs.push(formControlConfig);
                    });
                };
                Form.prototype.getEntityValueChangingListeners = function () {
                    var listeners = {};
                    this.formControlConfigs.forEach(function (formControl) {
                        if (formControl.valueChanging) {
                            listeners[formControl.bindingPath] = formControl.valueChanging;
                        }
                    });
                    return listeners;
                };
                Form.prototype.getEntityValueChangedListeners = function () {
                    var listeners = {};
                    this.formControlConfigs.forEach(function (formControl) {
                        if (formControl.valueChanged) {
                            listeners[formControl.bindingPath] = formControl.valueChanged;
                        }
                    });
                    return listeners;
                };
                return Form;
            }()));

            /**
             * å½ä»¤è£é¥°å¨åç§°
             */
            var COMMAND_METHOD_META = exports('COMMAND_METHOD_META', 'CommandMethodMeta');
            var Éµ0$7 = function (obj) { return obj; };
            /**
             * å½ä»¤è£é¥°å¨å·¥å
             */
            var CommandMethodMeta = exports('CommandMethodMeta', makePropDecorator(COMMAND_METHOD_META, Éµ0$7));

            var ViewModel = exports('ViewModel', /** @class */ (function () {
                /**
                 * æé å½æ°
                 */
                function ViewModel(injector, id) {
                    this.injector = injector;
                    this.id = id;
                }
                /**
                 * åå§å
                 */
                ViewModel.prototype.init = function () {
                    this.initRepository();
                    this.initContext();
                    this.initBindingData();
                    this.initUIState();
                    this.intiStateMachine();
                    this.initForm();
                    this.initCommandBus();
                    this.registerWithParent();
                    this.initListeners();
                    this.closeOldBeSession();
                };
                ViewModel.prototype.initRepository = function () {
                    this.repository = this.injector.get(Repository);
                };
                ViewModel.prototype.initContext = function () {
                    this.context = this.injector.get(ViewModelContext);
                    this.context.init(this);
                };
                ViewModel.prototype.initBindingData = function () {
                    var _this = this;
                    this.bindingData = this.context.injector.get(BindingData);
                    this.entityValueChangingListeners = new Map();
                    this.entityValueChangedListeners = new Map();
                    if (this.bindingData) {
                        this.bindingData.setValueChangeInvokerFactory(function (paths) {
                            return function (preValue, value, entityChanged, primaryValue) {
                                var plainPath = '/' + paths.join('/');
                                var command;
                                if (entityChanged === false) {
                                    command = _this.entityValueChangingListeners[plainPath];
                                }
                                else {
                                    command = _this.entityValueChangedListeners[plainPath];
                                }
                                if (!!command) {
                                    var change_1 = {
                                        paths: paths,
                                        preValue: preValue,
                                        value: value,
                                        changed: entityChanged
                                    };
                                    var commands = command.split(';').filter(function (p) { return p; });
                                    var valueChangeSuccess_1 = true;
                                    return from(commands).pipe(concatMap(function (item) {
                                        if (!valueChangeSuccess_1) {
                                            return EMPTY$1;
                                        }
                                        return _this[item](change_1).pipe(tap(function (result) {
                                            valueChangeSuccess_1 = result;
                                        }));
                                    }), every(function (result) { return result; }));
                                }
                                else {
                                    return of(true);
                                }
                            };
                        });
                    }
                    var repositoryName = this.repository.name;
                    var bindingDataManager = this.context.appContext.bindingDataManager;
                    var repositoryBindingData = bindingDataManager.getBindingDataByName(repositoryName);
                    this.bindingData.initByBindingList(repositoryBindingData.list, this.context);
                };
                ViewModel.prototype.initUIState = function () {
                    this.uiState = this.injector.get(UIState);
                };
                ViewModel.prototype.intiStateMachine = function () {
                    this.stateMachine = this.injector.get(StateMachine, null);
                    if (!this.stateMachine) {
                        return;
                    }
                    this.stateMachine.init(this.context);
                };
                ViewModel.prototype.initForm = function () {
                    this.form = this.injector.get(Form, null);
                    this.form.init();
                };
                ViewModel.prototype.initCommandBus = function () {
                    this.commandBus = this.injector.get(CommandBus);
                    this.extendCommandMethods();
                };
                ViewModel.prototype.extendCommandMethods = function () {
                    var _this = this;
                    this.ngCommands = MetadataUtil.getPropsMetadatasByName(this.constructor, COMMAND_METHOD_META);
                    this.keybindingMap = new Map();
                    Object.keys(this.ngCommands).forEach(function (propName) {
                        var ngCommand = _this.ngCommands[propName];
                        Object.defineProperty(_this, propName, {
                            value: function (eventParams) {
                                var command = {
                                    name: ngCommand.name,
                                    params: ngCommand.params,
                                    paramDescriptions: ngCommand.paramDescriptions,
                                    eventParam: eventParams || null
                                };
                                return _this.commandBus.dispatch(command);
                            }
                        });
                        if (ngCommand.keyBinding) {
                            _this.keybindingMap.set(propName, ngCommand.keyBinding);
                        }
                    });
                };
                ViewModel.prototype.registerWithParent = function () {
                    var parentContext = this.context.parent;
                    if (!parentContext || !parentContext.viewModel || !parentContext.viewModel['childViewModels']) {
                        return;
                    }
                    var parentViewModel = parentContext.viewModel;
                    var className = this.constructor.name;
                    var propName = parentViewModel['childViewModels'][className];
                    parentViewModel[propName] = this;
                };
                /**
                 * å³é­èçBeSession
                 */
                ViewModel.prototype.closeOldBeSession = function () {
                    var allViewModelContexts = this.context.appContext.viewModelContextManager.getContexts();
                    if (allViewModelContexts.length === 1 && allViewModelContexts[0] === this.context) {
                        this.context.repository.reset();
                    }
                };
                /**
               * ä»Formè·åçå¬å¨
               */
                ViewModel.prototype.initListeners = function () {
                    var _this = this;
                    var extractPath = function (bindingBasePath, bindingPath) {
                        return '/' + bindingBasePath.split('/').concat(bindingPath.split('.')).filter(function (item) { return item.length > 0; }).join('/');
                    };
                    if (this.form) {
                        var valueChangingListeners_1 = this.form.getEntityValueChangingListeners();
                        Object.keys(valueChangingListeners_1).forEach(function (bindingPath) {
                            var plainPath = extractPath(_this.bindingPath, bindingPath);
                            _this.entityValueChangingListeners[plainPath] = valueChangingListeners_1[bindingPath];
                        });
                        var valueChangedListeners_1 = this.form.getEntityValueChangedListeners();
                        Object.keys(valueChangedListeners_1).forEach(function (bindingPath) {
                            var plainPath = extractPath(_this.bindingPath, bindingPath);
                            _this.entityValueChangedListeners[plainPath] = valueChangedListeners_1[bindingPath];
                        });
                    }
                };
                return ViewModel;
            }()));

            var ViewModelOptions = exports('ViewModelOptions', /** @class */ (function () {
                function ViewModelOptions() {
                }
                return ViewModelOptions;
            }()));

            var AppEventBus = exports('Éµb', /** @class */ (function () {
                /**
                 * æé å½æ°
                 */
                function AppEventBus() {
                    this.eventBus = new Subject();
                    this.subscriptionsMap = new Map();
                }
                AppEventBus.prototype.triggerEvent = function (event) {
                    this.eventBus.next(event);
                };
                AppEventBus.prototype.subscribe = function (componentId, func, funcError) {
                    if (this.subscriptionsMap.has(componentId) === false) {
                        var subscription = this.eventBus.subscribe(function (value) { return func(value); }, function (value) { return funcError(value); });
                        this.subscriptionsMap.set(componentId, subscription);
                    }
                };
                AppEventBus.prototype.unsubscribe = function (componentId) {
                    if (this.subscriptionsMap.has(componentId) === true) {
                        this.subscriptionsMap.get(componentId).unsubscribe();
                        this.subscriptionsMap.delete(componentId);
                    }
                };
                return AppEventBus;
            }()));

            var APP_BASE_PROVIDERS = [
                { provide: AppEventBus, useClass: AppEventBus, deps: [] },
                { provide: BindingDataManager, useClass: BindingDataManager, deps: [] },
                { provide: RepositoryManager, useClass: RepositoryManager, deps: [] },
                { provide: ViewModelContextManager, useClass: ViewModelContextManager, deps: [] },
                {
                    provide: AppContext, useClass: AppContext,
                    deps: [Injector, AppEventBus, RepositoryManager, BindingDataManager, ViewModelContextManager]
                }
            ];

            var App = exports('App', /** @class */ (function () {
                /**
                 * æé å½æ°
                 */
                function App(options) {
                    options.providers = options.providers || [];
                    var appProviders = __spread(APP_BASE_PROVIDERS, APP_VARIABLE_PROVIDERS, HTTP_PROVIDERS, options.providers);
                    var appInjector = createInjector(appProviders);
                    this.context = appInjector.get(AppContext);
                }
                /**
                 * å¯ç¨ViewModel
                 */
                App.prototype.createViewModel = function (options) {
                    var providers = options.providers || [];
                    var parent = options.parent || null;
                    var mergedProviders = __spread([
                        { provide: ViewModelContext, useClass: ViewModelContext, deps: [] }
                    ], VIEW_MODEL_COMMAND_PROVIDERS, providers);
                    var parentInjector = parent ? parent.injector : this.context.injector;
                    var injector = createInjector(mergedProviders, parentInjector);
                    var viewModel = injector.get(ViewModel);
                    viewModel.init();
                    return viewModel;
                };
                return App;
            }()));

            /*
             * StateMachineåéè§£æ
             * @Author: Witt
             * @Date: 2018-12-04 17:09:42
             * @Last Modified by: Witt
             * @Last Modified time: 2019-10-30 11:07:10
             */
            /**
             * è§£æè¾å©å·¥å·ç±»
             */
            var ParseUtil = /** @class */ (function () {
                function ParseUtil() {
                }
                /**
                 * è·ååºç¨ä¸ä¸æ
                 */
                ParseUtil.getAppContext = function (context) {
                    if (context instanceof CommandContext) {
                        return context.viewModelContext.appContext;
                    }
                    else if (context instanceof ViewModelContext) {
                        return context.appContext;
                    }
                    else if (context instanceof AppContext) {
                        return context;
                    }
                    else {
                        throw new Error('ä¸ä¸æä¸­æ¾ä¸å°AppContextï¼è¯·æ£æ¥ï¼');
                    }
                };
                /**
                 * è·åå½åFrameçContext
                 */
                ParseUtil.getFrameContext = function (context) {
                    if (context instanceof CommandContext) {
                        return context.viewModelContext;
                    }
                    else if (context instanceof ViewModelContext) {
                        return context;
                    }
                    else {
                        throw new Error('ä¸ä¸æä¸­æ¾ä¸å°FrameContextï¼è¯·æ£æ¥ï¼');
                    }
                };
                /**
                 * è·åæ ¹FrameçContext
                 */
                ParseUtil.getRootFrameContext = function (context) {
                    var frameContext = this.getFrameContext(context);
                    return frameContext.root;
                };
                /**
                 * æ ¹æ®frameIdè·åFrameContext
                 */
                ParseUtil.getFrameContextById = function (context, frameId) {
                    var appContext = this.getAppContext(context);
                    return appContext.viewModelContextManager.getContextById(frameId);
                };
                return ParseUtil;
            }());

            /**
             * æ°æ®åéè§£æ
             */
            var DataVariableParser = exports('DataVariableParser', /** @class */ (function () {
                function DataVariableParser() {
                }
                /**
                 * è§£æåé
                 * @param expression è¡¨è¾¾å¼
                 * @param context ä¸ä¸æ
                 */
                DataVariableParser.prototype.parse = function (expression, context) {
                    var _this = this;
                    var appContext = ParseUtil.getAppContext(context);
                    var paths = this.extractPaths(expression);
                    // 1ãåä¸ªçè¡¨è¾¾å¼ï¼ç´æ¥æ±å¼
                    if (paths.length === 1 && expression === "{DATA~" + paths[0] + "}") {
                        return this.getValue(paths[0], appContext);
                    }
                    // 2ãå¶ä»æåµï¼å­ç¬¦ä¸²æ¿æ¢
                    paths.forEach(function (path) {
                        var searchValue = "{DATA~" + path + "}";
                        var replaceValue = _this.getValue(path, appContext);
                        expression = expression.replace(searchValue, replaceValue);
                    });
                    return expression;
                };
                /**
                 * æåè·¯å¾
                 */
                DataVariableParser.prototype.extractPaths = function (expression) {
                    var paths = [];
                    // æ¥æ¾ææçuiStateåéå­ç¬¦ä¸²
                    var DATA_PATTERN_G = /\{DATA~(\S+?)\}/g;
                    var dataVariables = expression.match(DATA_PATTERN_G);
                    if (dataVariables === null) {
                        return [];
                    }
                    // æååè¾¹çè·¯å¾
                    var DATA_PATTERN = /\{DATA~(\S+?)\}/;
                    dataVariables.forEach(function (dataVariable) {
                        var pathMatches = dataVariable.match(DATA_PATTERN);
                        if (pathMatches != null && pathMatches.length === 2) {
                            paths.push(pathMatches[1]);
                        }
                    });
                    return paths;
                };
                /**
                 * è·åå¼
                 * @param path è·¯å¾ï¼/
                 */
                DataVariableParser.prototype.getValue = function (path, appContext) {
                    var parts = path.split('/').filter(function (part) {
                        return part !== '';
                    });
                    var frameContext = appContext.viewModelContextManager.getContextById(parts[0]);
                    if (!frameContext) {
                        throw new Error(path + "\u4E0D\u6B63\u786E\uFF0C\u8BF7\u68C0\u67E5\uFF01");
                    }
                    var bindingData = frameContext.bindingData;
                    if (!bindingData) {
                        throw new Error(path + "\u4E0D\u6B63\u786E\uFF0C\u8BF7\u68C0\u67E5\uFF01");
                    }
                    return bindingData.getValue(parts.slice(1));
                };
                return DataVariableParser;
            }()));

            /**
             * sessionåéè§£æ
             * @author Witt <jiwt@inspur.com>
             */
            /**
             * æ°æ®åéè§£æ
             */
            var UIStateVariableParser = exports('UIStateVariableParser', /** @class */ (function () {
                function UIStateVariableParser() {
                }
                /**
                 * è§£æåé
                 * @param expression å½¢å¦ï¼/frameId/stateName
                 * @param context ä¸ä¸æ
                 */
                UIStateVariableParser.prototype.parse = function (expression, context) {
                    var _this = this;
                    var appContext = ParseUtil.getAppContext(context);
                    var paths = this.extractPaths(expression);
                    // 1ãåä¸ªçè¡¨è¾¾å¼ï¼ç´æ¥æ±å¼
                    if (paths.length === 1 && expression === "{UISTATE~" + paths[0] + "}") {
                        return this.getUIState(paths[0], appContext);
                    }
                    // 2ãå¶ä»æåµï¼å­ç¬¦ä¸²æ¿æ¢
                    paths.forEach(function (path) {
                        var searchValue = "{UISTATE~" + path + "}";
                        var replaceValue = _this.getUIState(path, appContext);
                        expression = expression.replace(searchValue, replaceValue);
                    });
                    return expression;
                };
                /**
                 * æåè·¯å¾
                 * åéæ ¼å¼ï¼{}
                 */
                UIStateVariableParser.prototype.extractPaths = function (expression) {
                    var paths = [];
                    // æ¥æ¾ææçuiStateåéå­ç¬¦ä¸²
                    var UI_STATE_PATTERN_G = /\{UISTATE~(\S+?)\}/g;
                    var uiStateVariables = expression.match(UI_STATE_PATTERN_G);
                    if (uiStateVariables === null) {
                        return [];
                    }
                    // æååè¾¹çè·¯å¾
                    var UI_STATE_PATTERN = /\{UISTATE~(\S+?)\}/;
                    uiStateVariables.forEach(function (uiStateVariable) {
                        var pathMatches = uiStateVariable.match(UI_STATE_PATTERN);
                        if (pathMatches != null && pathMatches.length === 2) {
                            paths.push(pathMatches[1]);
                        }
                    });
                    return paths;
                };
                /**
                 * è·åUIState
                 */
                UIStateVariableParser.prototype.getUIState = function (path, appContext) {
                    var parts = path.split('/').filter(function (part) {
                        return part !== '';
                    });
                    var _a = __read(parts, 2), frameId = _a[0], stateName = _a[1];
                    var frameContext = appContext.viewModelContextManager.getContextById(frameId);
                    var state = frameContext.uiState[stateName];
                    if (state && state.constructor.toString().startsWith('function Date()')) {
                        return this.formatDate(state);
                    }
                    for (var i = 2; i < parts.length; i++) {
                        state = state[parts[i]];
                        // å¤æå¯¹è±¡ä¸å±å±æ¥æ¾ä¸å»ï¼å¦ææä¸å±ä¸å­å¨ï¼ç»æå¯ä»¥æ¯undefinedï¼ä½æ¯è¦ç´æ¥è¿åundefinedé¿åæ¥éã
                        if (!state) {
                            return state;
                        }
                    }
                    return state;
                };
                /**
                 * @todoï¼å¾å é¤
                 */
                UIStateVariableParser.prototype.formatDate = function (value) {
                    if (!value) {
                        return '';
                    }
                    // å¹´
                    var year = value.getFullYear();
                    // æ
                    var month = (value.getMonth() + 1).toString();
                    month = month.length === 1 ? ('0' + month) : month;
                    // æ¥
                    var day = value.getDate().toString();
                    day = day.length === 1 ? ('0' + day) : day;
                    return year + "-" + month + "-" + day;
                };
                return UIStateVariableParser;
            }()));

            /**
             * ç¶ææºåéè§£æ
             * @summary
             *
             * è§£æç­ç¥ï¼
             * 1ãä¸å¸¦frameIdï¼ä»é¡¶å±StateMachineä¸­è§£æ
             * {STATEMACHINE~/states/key}
             * {STATEMACHINE~/renderStates/key}
             *
             * 2ãå¸¦frameIdï¼ä»frameIdå¯¹åºçFrameContextçStateMachineä¸­è§£æ
             * {STATEMACHINE~/frameId/states/key}
             * {STATEMACHINE~/frameId/renderStates/key}
             *
             * å­å¨çé®é¢ï¼
             * 1ãä¸å¸¦frameIdä»é¡¶å±StateMachineè§£æä»ä¸ºäºå¼å®¹ï¼å°æ¥æ¹ä¸ºä»å½åFrameContextçStateMachineä¸­è§£æï¼
             * 2ãç»åè¡¨åä¸­é¡¶å±StateMachineæ¯ä¸»è¡¨åçrootFrameContextçStateMachineï¼æ¾ç¶ä¸åçï¼æ¢æäºå®ï¼ï¼
             * 3ãfarmeIdå¦ææ¯statesærenderStatesï¼å¯¼è´è§£æå¤±è´¥ï¼å çå¾å°ï¼ä½åé£é©ã
             */
            var StateMachineVariableParser = exports('StateMachineVariableParser', /** @class */ (function () {
                /**
                 * æé å½æ°
                 */
                function StateMachineVariableParser() {
                }
                /**
                 * è§£æåé
                 * @param expression åéï¼æ ¼å¼å½¢å¦ï¼/frameId/componentId/stateName
                 * @param context ä¸ä¸æ
                 */
                StateMachineVariableParser.prototype.parse = function (expression, context) {
                    var _this = this;
                    var paths = this.extractPaths(expression);
                    // 1ãåä¸ªçè¡¨è¾¾å¼ï¼ç´æ¥æ±å¼
                    if (paths.length === 1 && expression === "{STATEMACHINE~" + paths[0] + "}") {
                        return this.getValue(paths[0], context);
                    }
                    // 2ãå¶ä»æåµï¼å­ç¬¦ä¸²æ¿æ¢
                    paths.forEach(function (path) {
                        var searchValue = "{STATEMACHINE~" + path + "}";
                        var replaceValue = _this.getValue(path, context);
                        expression = expression.replace(searchValue, replaceValue);
                    });
                    return expression;
                };
                /**
                 * æåSessionåéå
                 * åéæ ¼å¼ï¼{}
                 */
                StateMachineVariableParser.prototype.extractPaths = function (expression) {
                    var paths = [];
                    // æ¥æ¾ææçStateMachineåéå­ç¬¦ä¸²
                    var STATE_MACHINE_PATTERN_G = /\{STATEMACHINE~(\S+?)\}/g;
                    var stateMachineVariables = expression.match(STATE_MACHINE_PATTERN_G);
                    if (stateMachineVariables === null) {
                        return [];
                    }
                    // æååè¾¹çè·¯å¾
                    var STATE_MACHINE_PATTERN = /\{STATEMACHINE~(\S+?)\}/;
                    stateMachineVariables.forEach(function (sessionVariable) {
                        var pathMatches = sessionVariable.match(STATE_MACHINE_PATTERN);
                        if (pathMatches != null && pathMatches.length === 2) {
                            paths.push(pathMatches[1]);
                        }
                    });
                    return paths;
                };
                /**
                 * è·åå¯¹åºçå¼
                 */
                StateMachineVariableParser.prototype.getValue = function (path, context) {
                    var pathObj = this.getPathObj(path);
                    var stateMachine = this.getTargetStateMachine(pathObj.frameId, context);
                    if (pathObj.type === 'currentState') {
                        return stateMachine.context.state;
                    }
                    else if (pathObj.type === 'renderStates') {
                        return stateMachine[pathObj.name];
                    }
                    else {
                        throw new Error("\u4E0D\u652F\u7C7B\u578B\u4E3A" + pathObj.type + "\u7684\u72B6\u6001\u673A\u53D8\u91CF");
                    }
                };
                /**
                 * è§£æpathï¼å¹¶è·åå¯¹åºçStateMachineå®ä¾
                 */
                StateMachineVariableParser.prototype.getTargetStateMachine = function (frameId, context) {
                    var targetFrameContext;
                    if (frameId) {
                        targetFrameContext = ParseUtil.getFrameContextById(context, frameId);
                    }
                    else {
                        targetFrameContext = ParseUtil.getRootFrameContext(context);
                    }
                    if (!targetFrameContext || !targetFrameContext.stateMachine) {
                        throw new Error('æ¾ä¸å°å¯¹åºçç¶ææºå®ä¾ï¼è¯·æ£æ¥ï¼');
                    }
                    return targetFrameContext.stateMachine;
                };
                /**
                 * å°Pathè§£æä¸ºæ ¼å¼åçPathå¯¹è±¡
                 */
                StateMachineVariableParser.prototype.getPathObj = function (path) {
                    var parsedPathObj;
                    var parts = this.splitPath(path);
                    if (parts[0] === 'currentState' || parts[0] === 'renderStates') {
                        parsedPathObj = {
                            frameId: '',
                            type: parts[0],
                            name: parts[1]
                        };
                    }
                    else {
                        parsedPathObj = {
                            frameId: parts[0],
                            type: parts[1],
                            name: parts[2]
                        };
                    }
                    return parsedPathObj;
                };
                /**
                 * åéPath
                 */
                StateMachineVariableParser.prototype.splitPath = function (path) {
                    var parts = path.split('/').filter(function (part) {
                        return part !== '';
                    });
                    return parts;
                };
                return StateMachineVariableParser;
            }()));

            /**
             * sessionåéè§£æ
             * @author Witt <jiwt@inspur.com>
             */
            /**
             * å½ä»¤åéè§£æ
             * {COMMAND~/params/key}
             * {COMMAND~/results/taskName}
             */
            var CommandVariableParser = exports('CommandVariableParser', /** @class */ (function () {
                /**
                 * æé å½æ°
                 */
                function CommandVariableParser() {
                }
                /**
                 * è§£æåé
                 * @param expression åéï¼æ ¼å¼å½¢å¦ï¼/frameId/componentId/stateName
                 * @param context ä¸ä¸æ
                 */
                CommandVariableParser.prototype.parse = function (expression, context) {
                    var _this = this;
                    var paths = this.extractPaths(expression);
                    // 1ãåä¸ªçè¡¨è¾¾å¼ï¼ç´æ¥æ±å¼
                    if (paths.length === 1 && expression === "{COMMAND~" + paths[0] + "}") {
                        return this.getValue(paths[0], context);
                    }
                    // 2ãå¶ä»æåµï¼å­ç¬¦ä¸²æ¿æ¢
                    paths.forEach(function (path) {
                        var searchValue = "{COMMAND~" + path + "}";
                        var replaceValue = _this.getValue(path, context);
                        expression = expression.replace(searchValue, replaceValue);
                    });
                    return expression;
                };
                /**
                 * æåSessionåéå
                 * åéæ ¼å¼ï¼{}
                 */
                CommandVariableParser.prototype.extractPaths = function (expression) {
                    var paths = [];
                    // æ¥æ¾ææçuiStateåéå­ç¬¦ä¸²
                    var UI_STATE_PATTERN_G = /\{COMMAND~(\S+?)\}/g;
                    var uiStateVariables = expression.match(UI_STATE_PATTERN_G);
                    if (uiStateVariables === null) {
                        return [];
                    }
                    // æååè¾¹çè·¯å¾
                    var UI_STATE_PATTERN = /\{COMMAND~(\S+?)\}/;
                    uiStateVariables.forEach(function (sessionVariable) {
                        var pathMatches = sessionVariable.match(UI_STATE_PATTERN);
                        if (pathMatches != null && pathMatches.length === 2) {
                            paths.push(pathMatches[1]);
                        }
                    });
                    return paths;
                };
                /**
                 * è·åUIState
                 */
                CommandVariableParser.prototype.getValue = function (path, context) {
                    if (context instanceof CommandContext === false) {
                        throw new Error('å½åä¸ä¸æä¸æ¯æCOMMANDåéï¼è¯·æ£æ¥ï¼');
                    }
                    var parts = path.split('/').filter(function (part) {
                        return part !== '';
                    });
                    var _a = __read(parts, 2), type = _a[0], name = _a[1];
                    if (type === 'params') {
                        return context.command.params[name];
                    }
                    else if (type === 'results') {
                        return context.results[name];
                    }
                };
                return CommandVariableParser;
            }()));

            /**
             * åéè§£ææå¡
             * èè´£ï¼
             * 1ãè§£æå­ç¬¦ä¸²ä¸­çåéï¼å¹¶æ¿æ¢æç¸åºçå¼ï¼
             * 2ãå¯¹è¡¨è¾¾å¼è¿è¡æ±å¼ã
             *
             * @todo å¯¹è¡¨è¾¾å¼æ±å¼çé¨ååè¡¨è¾¾å¼åè½éå ï¼æ¯å¦è½¬ç§»å°è¡¨è¾¾å¼ä¸­ï¼
             */
            var VariableParseService = exports('VariableParseService', /** @class */ (function () {
                /**
                 * æé åéè§£ææå¡
                 * @param parsers è§£æå¨éå
                 */
                function VariableParseService(parsers) {
                    this.parsers = parsers;
                }
                /**
                 * è§£æè¡¨è¾¾å¼
                 * @param expression è¡¨è¾¾å¼
                 * @param context ä¸ä¸æ
                 */
                VariableParseService.prototype.parse = function (target, context) {
                    var _this = this;
                    if (typeof target === 'string' && target.length > 0) {
                        // å­ç¬¦ä¸²ï¼ç´æ¥è§£æ
                        return this.parseExpression(target, context);
                    }
                    else if (Array.isArray(target)) {
                        // éåæ°ç»
                        target.forEach(function (item, itemIndex) {
                            if (typeof item === 'string') {
                                target[itemIndex] = _this.parseExpression(item, context);
                            }
                            else {
                                target[itemIndex] = _this.parse(item, context);
                            }
                        });
                    }
                    else if (typeof target === 'object' && target !== null) {
                        // éåå¯¹è±¡å¯æä¸¾å±æ§
                        var keys = Object.keys(target);
                        keys.forEach(function (key) {
                            if (typeof target[key] === 'string') {
                                target[key] = _this.parseExpression(target[key], context);
                            }
                            else {
                                target[key] = _this.parse(target[key], context);
                            }
                        });
                    }
                    return target;
                };
                /**
                 * è¡¨è¾¾å¼æ±å¼
                 */
                VariableParseService.prototype.evaluate = function (expression, context) {
                    var parsedExpression = this.parse(expression, context);
                    return (new Function('return ' + parsedExpression))();
                };
                /**
                 * è§£æè¡¨è¾¾å¼
                 * @param expression è¡¨è¾¾å¼
                 * @param context ä¸ä¸æ
                 */
                VariableParseService.prototype.parseExpression = function (expression, context) {
                    // ç©ºä¸²ç´æ¥è¿å
                    if (expression === '') {
                        return '';
                    }
                    this.parsers.forEach(function (parser) {
                        if (typeof expression === 'string') {
                            expression = parser.parse(expression, context);
                        }
                    });
                    return expression;
                };
                return VariableParseService;
            }()));

            var APP_VARIABLE_PROVIDERS = exports('APP_VARIABLE_PROVIDERS', [
                { provide: VARIABLE_PARSERS, useClass: DataVariableParser, multi: true, deps: [] },
                { provide: VARIABLE_PARSERS, useClass: UIStateVariableParser, multi: true, deps: [] },
                { provide: VARIABLE_PARSERS, useClass: StateMachineVariableParser, multi: true, deps: [] },
                { provide: VARIABLE_PARSERS, useClass: CommandVariableParser, multi: true, deps: [] },
                { provide: VariableParseService, useClass: VariableParseService, deps: [VARIABLE_PARSERS] },
            ]);

            /* eslint-disable no-case-declarations */
            /**
             * ä»»å¡é¾æ¥
             */
            var TaskLink = exports('TaskLink', /** @class */ (function () {
                /**
                 * æé å½æ°
                 */
                function TaskLink(from, to, condition) {
                    this.from = from;
                    this.to = to;
                    this.condition = condition;
                }
                /**
                 * æ¯å¦è½å¤
                 */
                TaskLink.prototype.canLink = function (context) {
                    var type = typeof this.condition;
                    var canLink;
                    switch (type) {
                        case 'boolean':
                            canLink = this.condition;
                            break;
                        case 'function':
                            canLink = this.condition(context);
                            break;
                        case 'string':
                            var parseService = context.viewModelContext.injector.get(VariableParseService);
                            canLink = parseService.evaluate(this.condition, context);
                            break;
                        default:
                            canLink = false;
                            break;
                    }
                    return canLink;
                };
                return TaskLink;
            }()));

            /*
             * @Author: Witt
             * @Date: 2018-10-17 14:13:40
             * @Last Modified by: Witt
             * @Last Modified time: 2018-10-17 16:08:34
             */
            /**
             * ä»»å¡æ§è¡æµç¨
             */
            var TaskFlow = exports('TaskFlow', /** @class */ (function () {
                function TaskFlow() {
                    /**
                     * èç¹éå
                     */
                    this.nodes = [];
                    /**
                     * è¾¹éå
                     */
                    this.links = [];
                    // #endregion
                }
                // #region èç¹æä½
                /**
                 * æ·»å èç¹
                 */
                TaskFlow.prototype.addNode = function (name, func) {
                    var node = new TaskNode(name, func);
                    this.nodes.push(node);
                };
                /**
                 * æ¹éæ·»å é¾æ¥
                 */
                TaskFlow.prototype.addNodes = function (nodes) {
                    this.nodes = this.nodes.concat(nodes);
                };
                /**
                 * å¨ç®æ èç¹ä¹åæå¥ä¸ä¸ªèç¹
                 * @param target ç®æ èç¹åç§°
                 * @param name åç§°
                 * @param func å½æ°
                 */
                TaskFlow.prototype.insertNode = function (target, name, func) {
                    var index = this.findNodeIndex(target);
                    var node = this.createNode(name, func);
                    this.nodes.splice(index, 0, node);
                };
                /**
                 * å¨ç®æ èç¹ä¹åæå¥ä¸ä¸ªèç¹
                 */
                TaskFlow.prototype.appendNode = function (target, name, func) {
                    var index = this.findNodeIndex(target) + 1;
                    var node = this.createNode(name, func);
                    this.nodes.splice(index, 0, node);
                };
                /**
                 * è·åèç¹ç´¢å¼
                 * @param name åç§°
                 */
                TaskFlow.prototype.findNodeIndex = function (name) {
                    return this.nodes.findIndex(function (node) {
                        return node.name === name;
                    });
                };
                /**
                 * åå»ºä»»å¡èç¹
                 * @param name åç§°
                 * @param func å½æ°
                 */
                TaskFlow.prototype.createNode = function (name, func) {
                    var node = new TaskNode(name, func);
                    return node;
                };
                // #endregion
                // #region é¾æ¥æä½
                /**
                 * æ·»å é¾æ¥
                 * @param name åç§°
                 * @param func å½æ°
                 */
                TaskFlow.prototype.addLink = function (from, to, condition) {
                    var link = this.createLink(from, to, condition);
                    this.links.push(link);
                };
                /**
                 * æ¹éæ·»å é¾æ¥
                 */
                TaskFlow.prototype.addLinks = function (links) {
                    this.links = this.links.concat(links);
                };
                /**
                 * åå»ºé¾æ¥
                 */
                TaskFlow.prototype.createLink = function (from, to, condition) {
                    var link = new TaskLink(from, to, condition);
                    return link;
                };
                // #endregion
                // #region æµç¨æ§å¶
                /**
                 * è·åä¸ä¸ä¸ªèç¹
                 * @param from    æºèç¹åç§°
                 * @param context ä¸ä¸æ
                 */
                TaskFlow.prototype.getNext = function (from, context) {
                    if (!from) {
                        return this.nodes.shift();
                    }
                    // ç¬¦åæ»¡è¶³æ¡ä»¶çè¾¹
                    var nextLink = this.links.find(function (link) {
                        return link.from === from && link.canLink(context);
                    });
                    if (!nextLink) {
                        return;
                    }
                    return this.nodes.find(function (node) {
                        return node.name === nextLink.to;
                    });
                };
                // #endregion
                // #region å¶ä»æ¹æ³
                /**
                 * åéä»»å¡æµ
                 */
                TaskFlow.prototype.clone = function () {
                    var taskFlow = new TaskFlow();
                    taskFlow.addNodes(this.nodes);
                    taskFlow.addLinks(this.links);
                    return taskFlow;
                };
                return TaskFlow;
            }()));

            /**
             * Commandä¸ä¸æ
             */
            var CommandContext = exports('CommandContext', /** @class */ (function () {
                /**
                 * æé å½æ°
                 * @param command å½ä»¤
                 * @param viewModelContext è§å¾æ¨¡åä¸ä¸æ
                 */
                function CommandContext(command, viewModelContext) {
                    /**
                     * æ§è¡ç»æ
                     */
                    this.results = {};
                    this.command = command;
                    this.viewModelContext = viewModelContext;
                }
                return CommandContext;
            }()));

            /**
             * å½ä»¤å¤çæ½è±¡ç±»ï¼ææå·ä½çå½ä»¤å¤çç±»å¿é¡»ç»§æ¿å®ï¼å¹¶å®ç°scheduleæ¹æ³ã
             */
            var CommandHandler = exports('CommandHandler', /** @class */ (function () {
                /**
                 * æé å½æ°
                 */
                function CommandHandler() {
                }
                /**
                 * åå§å
                 */
                CommandHandler.prototype.init = function (viewModelContext) {
                    this.viewModelContext = viewModelContext;
                    this.parseService = viewModelContext.injector.get(VariableParseService);
                    this.taskFlow = new TaskFlow();
                    this.schedule();
                };
                /**
                 * æ§è¡ä»»å¡
                 * @param command è¦æ§è¡çå½ä»¤
                 * @return æåä¸ä¸ªä»»å¡çæ§è¡ç»æ
                 * @todoï¼æåè½æåå°å½æ°
                 */
                CommandHandler.prototype.execute = function (command) {
                    var _this = this;
                    var lastTaskResult$ = new Subject();
                    var taskFlow = this.taskFlow.clone();
                    // setTimeoutææ¶ä¸è½å»æçåå ï¼
                    // 1ãæ è¡¨åå è½½æ°æ®ï¼ä¾èµTreeTableBindingéè®¾ç½®çå¨å±åéï¼éè¦å»¶åæ§è¡å è½½æ¶æºï¼
                    // 2ãå³é­åå½ä»¤éè¦å»¶è¿æ§è¡ã
                    setTimeout(function () {
                        // 1ãè§£æåæ°
                        // é¿åè§£æåéæ¶ä¿®æ¹äºåå§çcommand
                        var _a = __assign({}, command).eventParam, eventParam = _a === void 0 ? null : _a;
                        delete command.eventParam;
                        var commandToExecute = JSON.parse(JSON.stringify(command));
                        commandToExecute.params = _this.parseService.parse(commandToExecute.params, _this.viewModelContext);
                        command.eventParam = eventParam;
                        commandToExecute.eventParam = eventParam;
                        // 2ãä¸²èä»»å¡æµ
                        var initContext = new CommandContext(commandToExecute, _this.viewModelContext);
                        initContext.eventParams = command.eventParam || null;
                        var context$ = new BehaviorSubject(initContext);
                        var currentTask = taskFlow.getNext('', initContext);
                        var highOrder$ = context$.pipe(concatMap(function (context) {
                            var result$ = currentTask.execute(context);
                            return result$.pipe(take(1), map(function (result) {
                                // åå¥æ§è¡ç»æ
                                context.results[currentTask.name] = result;
                                context.latestResult = result;
                                currentTask = taskFlow.getNext(currentTask.name, context);
                                // æä½æ§å¶æµ
                                if (currentTask) {
                                    context$.next(context);
                                }
                                else {
                                    context$.complete();
                                }
                                // å°ç»ææµè½¬æ¢ä¸ºcontextæµ
                                return context;
                            }), throwIfEmpty(function () {
                                context$.complete();
                            }));
                        }));
                        // 3ãæ§è¡åå¹¶åçä»»å¡æµ
                        highOrder$.pipe(takeLast(1)).subscribe({
                            next: function (context) {
                                lastTaskResult$.next(context.latestResult);
                            },
                            error: function (error) {
                                _this.displayError(error);
                                lastTaskResult$.error(error);
                            },
                            complete: function () {
                                lastTaskResult$.complete();
                            },
                        });
                    }, 0);
                    return lastTaskResult$;
                };
                /**
                 * æ¾ç¤ºéè¯¯ä¿¡æ¯
                 */
                CommandHandler.prototype.displayError = function (error) {
                    if (!error) {
                        return;
                    }
                    if (!console || !console.error) {
                        return;
                    }
                    console.error(error);
                };
                /**
                 * æ·»å ä»»å¡ï¼åªæå­ç±»å¯ä»¥æ·»å ä»»å¡ï¼å¤é¨ä¸è½è®¿é®
                 * @param name  ä»»å¡åç§°
                 * @param func ä»»å¡å½æ°
                 */
                CommandHandler.prototype.addTask = function (name, func) {
                    this.taskFlow.addNode(name, func);
                };
                /**
                 * æ·»å ä»»å¡ï¼åªæå­ç±»å¯ä»¥æ·»å ä»»å¡ï¼å¤é¨ä¸è½è®¿é®
                 * @param name  ä»»å¡åç§°
                 * @param func ä»»å¡å½æ°
                 */
                CommandHandler.prototype.addLink = function (from, to, condition) {
                    this.taskFlow.addLink(from, to, condition);
                };
                /**
                 * æå¥ä»»å¡
                 * @param  name è¦æ©å±çä»»å¡åç§°
                 * @param  func æ©å±å½æ°
                 */
                CommandHandler.prototype.insertTask = function (target, name, func) {
                    throw new Error('Not Implemented');
                };
                /**
                 * æå¥ä»»å¡
                 * @param  name è¦æ©å±çä»»å¡åç§°
                 * @param  func æ©å±å½æ°
                 */
                CommandHandler.prototype.afterTask = function (target, name, func) {
                    throw new Error('Not Implemented');
                };
                /**
                 * æ¿æ¢ä»»å¡
                 * @param  name è¦æ¿æ¢çä»»å¡åç§°
                 * @param  func æ¿æ¢å½æ°
                 */
                CommandHandler.prototype.replaceTask = function (name, func) {
                    throw new Error('Not Implement');
                };
                /**
                 * è°ç¨æ¹æ³
                 */
                CommandHandler.prototype.invoke = function (serviceInstance, method, args, context) {
                    this.setContextToServiceInstance(serviceInstance, context);
                    var parsedArgs = this.parseService.parse(args, context);
                    return serviceInstance[method].apply(serviceInstance, __spread(parsedArgs));
                };
                /**
                 * ä¸ºæå¡è®¾ç½®å½ä»¤ä¸ä¸æ
                 * @todo
                 * éè¿è¿ç§æ¹å¼å­å¨å¾å¤§é®é¢ï¼
                 * 1ãä¼è¦çæå·²æçcontextï¼ç»å¼åäººåé æå°æ°åè°è¯ææ¬ï¼
                 * 2ãæå¡ä¸­ä¾èµäºä¸ä¸ªæ²¡æå£°æçå¯¹è±¡ï¼ä¸ç¬¦åé¢åå¯¹è±¡çååã
                 * å»ºè®®è§£å³æ¹æ¡ï¼
                 * 1ãå°contextä¿®æ¹ä¸ºæä¸ªç¹æ®å±æ§åï¼
                 * 2ãåæ£æµæå¡ä¸ææ²¡æä¸ä¸ªCommandContextç±»åçcontextå±æ§ï¼æçè¯åèµå¼ï¼
                 *    è¿å°±è¦æ±éè¦ä½¿ç¨contextçæå¡éè¦æ¯å®ç°ä¸ä¸ªIContextæ¥å£ã
                 */
                CommandHandler.prototype.setContextToServiceInstance = function (serviceInstance, context) {
                    // å¦ææå¡ä¸å·²ç»å­å¨contextå±æ§ï¼å¹¶ä¸è¯¥å±æ§ä¸æ¯CommandContextç±»åï¼åä¸è½è¦ç
                    var serviceContext = serviceInstance.context;
                    if (serviceContext && (serviceContext instanceof CommandContext === false)) {
                        return;
                    }
                    serviceInstance.context = context;
                };
                return CommandHandler;
            }()));
            /**
             * å½ä»¤å¤çå¨æ³¨å¥Token
             */
            var COMMAND_HANDLERS_TOKEN = exports('COMMAND_HANDLERS_TOKEN', createInjectionToken('@Farris/devkit COMMAND_HANDLERS_TOKEN'));

            /**
             * å½ä»¤å¤çæ³¨åå¨ç¸å³å®ä¹
             * @author Witt<jiwt@inspur.com>
             */
            /**
             * å½ä»¤å¤çæ³¨åå¨
             */
            var CommandHandlerRegistry = exports('CommandHandlerRegistry', /** @class */ (function () {
                /**
                 * æé å½æ°
                 * @param handlers å½ä»¤å¤çå®ä¾æ°ç»
                 */
                function CommandHandlerRegistry(injector) {
                    var _this = this;
                    this.injector = injector;
                    var handlers = this.injector.get(COMMAND_HANDLERS_TOKEN, null, InjectFlags.Optional);
                    this.handlerMap = new Map();
                    if (handlers) {
                        handlers.forEach(function (handler) {
                            _this.regist(handler);
                        });
                    }
                }
                /**
                 * æ·»å å½ä»¤å¤ç
                 * @param  commandName    å½ä»¤åç§°
                 * @param  commandHandler å½ä»¤å¤çå®ä¾
                 */
                CommandHandlerRegistry.prototype.set = function (commandName, commandHandler) {
                    if (this.handlerMap.has(commandName)) {
                        throw new Error(commandName + 'å¯¹åºçCommandHandlerå·²ç»å­å¨');
                    }
                    this.handlerMap.set(commandName, commandHandler);
                };
                /**
                 * è·åå½ä»¤å¤ç
                 * @param   commandName å½ä»¤åç§°
                 * @returns å½ä»¤å¤çå®ä¾
                 */
                CommandHandlerRegistry.prototype.get = function (commandName) {
                    if (this.handlerMap.has(commandName) === false) {
                        throw new Error('æ¾ä¸å°' + commandName + 'å¯¹åºçCommandHandler');
                    }
                    return this.handlerMap.get(commandName);
                };
                /**
                 * æ³¨åå½ä»¤å¤ç
                 * @param handlers å½ä»¤å¤çå®ä¾
                 */
                CommandHandlerRegistry.prototype.regist = function (commandHandler) {
                    // æ ¹æ®metadataè·åå¯¹åºçCommandåç§°
                    var handlerMetadata = MetadataUtil.getClassMetadataByName(commandHandler.constructor, COMMAND_HANDLER_META);
                    if (!handlerMetadata) {
                        throw new Error('CommandHandlerå¿é¡»æå®è¦å¤ççå½ä»¤åç§°');
                    }
                    var commandName = handlerMetadata.commandName;
                    this.set(commandName, commandHandler);
                };
                return CommandHandlerRegistry;
            }()));

            /**
             * å½ä»¤å¤çæ©å±ç¸å³
             * @author Witt<jiwt@inspur.com>
             */
            var CommandHandlerExtender = exports('CommandHandlerExtender', /** @class */ (function () {
                function CommandHandlerExtender() {
                }
                return CommandHandlerExtender;
            }()));
            /**
             * å½ä»¤å¤çå¨æ©å±æ³¨å¥Token
             */
            var COMMAND_HANDLER_EXTENDERS_TOKEN = exports('COMMAND_HANDLER_EXTENDERS_TOKEN', createInjectionToken('@farris/devkit COMMAND_HANDLER_EXTENDERS_TOKEN'));

            /**
             * å½ä»¤å¤çæ©å±æ³¨åå¨ç¸å³å®ä¹
             * @author Witt<jiwt@inspur.com>
             */
            /**
             * å½ä»¤å¤çæ©å±æ³¨åå¨
             */
            var CommandHandlerExtenderRegistry = exports('CommandHandlerExtenderRegistry', /** @class */ (function () {
                /**
                 * æé å½æ°
                 * @param extenders å½ä»¤æ©å±å®ä¾æ°ç»
                 */
                function CommandHandlerExtenderRegistry(injector) {
                    var _this = this;
                    this.injector = injector;
                    var extenders = this.injector.get(COMMAND_HANDLER_EXTENDERS_TOKEN, null, InjectFlags.Optional);
                    this.extendersMap = new Map();
                    if (extenders) {
                        extenders.forEach(function (extender) {
                            _this.regist(extender);
                        });
                    }
                }
                /**
                 * è·åå½ä»¤æ©å±å®ä¾æ°ç»
                 * @param   commandName å½ä»¤åç§°
                 * @returns å½ä»¤å¤çæ©å±å®ä¾æ°ç»
                 */
                CommandHandlerExtenderRegistry.prototype.get = function (commandName) {
                    if (this.extendersMap.has(commandName) === false) {
                        return [];
                    }
                    return this.extendersMap.get(commandName);
                };
                /**
                 * æ·»å å½ä»¤æ©å±
                 * @param commandName Commandåç§°
                 * @param extender    CommandHandlerExtenderå®ä¾
                 * @return void
                 */
                CommandHandlerExtenderRegistry.prototype.set = function (commandName, extender) {
                    if (this.extendersMap.has(commandName)) {
                        // å¦æcommandNameå¯¹åºçæ©å±å·²ç»å­å¨ï¼åå¨æ©å±æ°ç»ä¸­è¿½å 
                        this.extendersMap.get(commandName).push(extender);
                    }
                    else {
                        // å¦æä¸å­å¨ï¼ååå»ºæ°çæ©å±æ°ç»ï¼å¹¶è¿½å 
                        this.extendersMap.set(commandName, [extender]);
                    }
                };
                /**
                 * æ³¨åå½ä»¤æ©å±
                 * @param extender CommandHandlerExtenderå®ä¾
                 */
                CommandHandlerExtenderRegistry.prototype.regist = function (extender) {
                    // éè¿åæ°æ®è·åè¦æ©å±çComamndåç§°
                    var extenderMetadata = MetadataUtil.getClassMetadataByName(extender.constructor, COMMAND_HANDLER_EXTENDER_META);
                    if (!extenderMetadata) {
                        throw new Error('CommandHandlerExtenderå¿é¡»æå®è¦æ©å±çå½ä»¤åç§°');
                    }
                    var commandName = extenderMetadata.commandName;
                    // æ·»å å°Mapä¸­
                    this.set(commandName, extender);
                };
                return CommandHandlerExtenderRegistry;
            }()));

            /**
             * å½ä»¤å¤çå¨å·¥åç¸å³å®ä¹
             * @author Witt<jiwt@inspur.com>
             */
            /**
             * å½ä»¤å¤çå¨å·¥å
             */
            var CommandHandlerFactory = exports('CommandHandlerFactory', /** @class */ (function () {
                /**
                 * æé å½æ°
                 * @param handlerRegistry  å½ä»¤å¤çæ³¨åå¨
                 * @param extenderRegistry å½ä»¤å¤çæ©å±æ³¨åå¨
                 */
                function CommandHandlerFactory(handlerRegistry, extenderRegistry, viewModelContext) {
                    this.handlerRegistry = handlerRegistry;
                    this.extenderRegistry = extenderRegistry;
                    this.viewModelContext = viewModelContext;
                }
                /**
                 * åå»ºå½ä»¤å¤çå¨
                 * @param   commandName å½ä»¤åç§°
                 * @returns å¯¹åºçå½ä»¤å¤çå¨å®ä¾
                 */
                CommandHandlerFactory.prototype.create = function (commandName) {
                    var rawHandler = this.handlerRegistry.get(commandName);
                    rawHandler.init(this.viewModelContext);
                    var extenders = this.extenderRegistry.get(commandName);
                    // éåextendersï¼ä¾æ¬¡å¯¹handlerè¿è¡æ©å±
                    return extenders.reduce(function (handler, extender) {
                        return extender.extend(handler);
                    }, rawHandler);
                };
                return CommandHandlerFactory;
            }()));

            /**
             * CommandBusç¸å³å®ä¹
             * @author Witt<jiwt@inspur.com>
             */
            /**
             * CommandBusç¨äºæ´¾åCommandï¼å®æ¥åä¸ä¸ªCommandå®ä¾ï¼æ¥æ¾å¯¹åºçCommandHandlerï¼å¹¶æ§è¡ã
             */
            var CommandBus = exports('CommandBus', /** @class */ (function () {
                /**
                 * æé å½æ°
                 */
                function CommandBus(handlerFactory) {
                    this.handlerFactory = handlerFactory;
                    this.executingCommands = [];
                    this.executingCommandCount$ = new BehaviorSubject(this.executingCommands.length);
                }
                /**
                 * æ´¾åå½ä»¤
                 * @param command è¦æ´¾åçå½ä»¤
                 */
                CommandBus.prototype.dispatch = function (command) {
                    var _this = this;
                    var commandResult$ = new Subject();
                    this.executeCommand(command).subscribe({
                        next: function (lastTaskResult) {
                            commandResult$.next(lastTaskResult);
                            commandResult$.complete();
                        },
                        complete: function () {
                            commandResult$.complete();
                            _this.removeCommandFromExecutingQueue(command);
                        },
                        error: function (error) {
                            commandResult$.error(error);
                            _this.removeCommandFromExecutingQueue(command);
                        }
                    });
                    return commandResult$;
                };
                /**
                 * æ§è¡å½ä»¤å¹¶è¿åæåä¸ä¸ªä»»å¡çæ§è¡ç»ææµ
                 */
                CommandBus.prototype.executeCommand = function (command) {
                    this.addCommandToExecutingQueue(command);
                    var commandName = command.name;
                    var handler = this.handlerFactory.create(commandName);
                    var lastTaskResult$ = handler.execute(command);
                    return lastTaskResult$;
                };
                /**
                 * æ·»å å°æ§è¡éå
                 */
                CommandBus.prototype.addCommandToExecutingQueue = function (command) {
                    this.executingCommands.push(command);
                    this.executingCommandCount$.next(this.executingCommands.length);
                };
                /**
                 * ä»æ§è¡éåä¸­ç§»é¤
                 */
                CommandBus.prototype.removeCommandFromExecutingQueue = function (command) {
                    this.executingCommands = this.executingCommands.filter(function (executingCommand) {
                        return executingCommand !== command;
                    });
                    this.executingCommandCount$.next(this.executingCommands.length);
                };
                return CommandBus;
            }()));

            var VIEW_MODEL_COMMAND_PROVIDERS = exports('VIEW_MODEL_COMMAND_PROVIDERS', [
                {
                    provide: CommandHandlerRegistry,
                    useClass: CommandHandlerRegistry,
                    deps: [Injector]
                },
                {
                    provide: CommandHandlerExtenderRegistry,
                    useClass: CommandHandlerExtenderRegistry,
                    deps: [Injector]
                },
                {
                    provide: CommandHandlerFactory,
                    useClass: CommandHandlerFactory,
                    deps: [CommandHandlerRegistry, CommandHandlerExtenderRegistry, ViewModelContext]
                },
                {
                    provide: CommandBus,
                    useClass: CommandBus,
                    deps: [CommandHandlerFactory]
                }
            ]);

            /*
             * @Author: aalizzwell
             * @Date: 2019-05-30 11:08:18
             * @Last Modified by: aalizzwell
             * @Last Modified time: 2019-06-01 17:10:04
             */
            var EXCEPTION_HANDLER = exports('EXCEPTION_HANDLER', '@farris/devkit ExceptionHandler');

        }
    };
});
