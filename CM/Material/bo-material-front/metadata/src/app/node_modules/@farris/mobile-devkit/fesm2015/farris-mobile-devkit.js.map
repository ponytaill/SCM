{"version":3,"file":"farris-mobile-devkit.js","sources":["ng://@farris/mobile-devkit/lib/core/types.ts","ng://@farris/mobile-devkit/lib/core/di/types.ts","ng://@farris/mobile-devkit/lib/core/di/consts.ts","ng://@farris/mobile-devkit/lib/core/di/utils.ts","ng://@farris/mobile-devkit/lib/core/di/injectable_def.ts","ng://@farris/mobile-devkit/lib/core/di/injection_token.ts","ng://@farris/mobile-devkit/lib/core/di/injector.ts","ng://@farris/mobile-devkit/lib/core/di/null_injector.ts","ng://@farris/mobile-devkit/lib/core/di/forward_ref.ts","ng://@farris/mobile-devkit/lib/core/di/static_injector.ts","ng://@farris/mobile-devkit/lib/core/di/injector_creator.ts","ng://@farris/mobile-devkit/lib/core/metadata/decorator.ts","ng://@farris/mobile-devkit/lib/core/metadata/metadata_util.ts","ng://@farris/mobile-devkit/lib/http/types.ts","ng://@farris/mobile-devkit/lib/http/http-util.ts","ng://@farris/mobile-devkit/lib/http/http-client.ts","ng://@farris/mobile-devkit/lib/http/index.ts","ng://@farris/mobile-devkit/lib/changeset/types.ts","ng://@farris/mobile-devkit/lib/changeset/change_set.ts","ng://@farris/mobile-devkit/lib/entity/entity-path/data_path_node.ts","ng://@farris/mobile-devkit/lib/entity/entity-path/data_path.ts","ng://@farris/mobile-devkit/lib/entity/entity-type-info/data_prop_info.ts","ng://@farris/mobile-devkit/lib/entity/metadata/prop_metadata_primitive.ts","ng://@farris/mobile-devkit/lib/utils/string_uitl.ts","ng://@farris/mobile-devkit/lib/utils/number_uitl.ts","ng://@farris/mobile-devkit/lib/utils/bool_util.ts","ng://@farris/mobile-devkit/lib/utils/enum_util.ts","ng://@farris/mobile-devkit/lib/utils/date_util.ts","ng://@farris/mobile-devkit/lib/utils/array_util.ts","ng://@farris/mobile-devkit/lib/utils/object_util.ts","ng://@farris/mobile-devkit/lib/utils/data-path/binding_path_converter.ts","ng://@farris/mobile-devkit/lib/utils/data-path/binding_path_comparer.ts","ng://@farris/mobile-devkit/lib/utils/data-path/binding_path_traverser.ts","ng://@farris/mobile-devkit/lib/binding-data/changes.ts","ng://@farris/mobile-devkit/lib/binding-data/binding_property.ts","ng://@farris/mobile-devkit/lib/binding-data/property_util.ts","ng://@farris/mobile-devkit/lib/binding-data/binding_object.ts","ng://@farris/mobile-devkit/lib/binding-data/binding_list_factory.ts","ng://@farris/mobile-devkit/lib/binding-data/binding_object_factory.ts","ng://@farris/mobile-devkit/lib/binding-data/binding_list.ts","ng://@farris/mobile-devkit/lib/binding-data/entity_util.ts","ng://@farris/mobile-devkit/lib/binding-data/binding_data.ts","ng://@farris/mobile-devkit/lib/binding-data/binding_data_factory.ts","ng://@farris/mobile-devkit/lib/utils/data-path/entity_path_converter.ts","ng://@farris/mobile-devkit/lib/utils/data-path/entity_path_comparer.ts","ng://@farris/mobile-devkit/lib/utils/data-path/form_path_converter.ts","ng://@farris/mobile-devkit/lib/utils/data-path/index.ts","ng://@farris/mobile-devkit/lib/utils/data-path-util.ts","ng://@farris/mobile-devkit/lib/utils/guid.ts","ng://@farris/mobile-devkit/lib/utils/is-observable.ts","ng://@farris/mobile-devkit/lib/entity/metadata/prop_meatadata_object.ts","ng://@farris/mobile-devkit/lib/entity/metadata/prop_metadata_dynamic.ts","ng://@farris/mobile-devkit/lib/entity/metadata/prop_metadata_list.ts","ng://@farris/mobile-devkit/lib/entity/metadata/field_metadata_util.ts","ng://@farris/mobile-devkit/lib/entity/metadata/entity_metadata_util.ts","ng://@farris/mobile-devkit/lib/entity/entity-type-info/data_type_info.ts","ng://@farris/mobile-devkit/lib/entity/entity-path/data_path_creator.ts","ng://@farris/mobile-devkit/lib/entity/entity-path/index.ts","ng://@farris/mobile-devkit/lib/entity/types.ts","ng://@farris/mobile-devkit/lib/entity/entity_creator.ts","ng://@farris/mobile-devkit/lib/entity/entity_list.ts","ng://@farris/mobile-devkit/lib/entity/entity_factory.ts","ng://@farris/mobile-devkit/lib/entity/entity.ts","ng://@farris/mobile-devkit/lib/entity/dynamic_entity.ts","ng://@farris/mobile-devkit/lib/repository/decorators.ts","ng://@farris/mobile-devkit/lib/repository/entity_collection.ts","ng://@farris/mobile-devkit/lib/repository/entity_manager.ts","ng://@farris/mobile-devkit/lib/repository/pagination_manager.ts","ng://@farris/mobile-devkit/lib/repository/data_change_history.ts","ng://@farris/mobile-devkit/lib/repository/repository.ts","ng://@farris/mobile-devkit/lib/repository/default_repository.ts","ng://@farris/mobile-devkit/lib/command/decorators.ts","ng://@farris/mobile-devkit/lib/command/flow/task_node.ts","ng://@farris/mobile-devkit/lib/variable/variable_parser.ts","ng://@farris/mobile-devkit/lib/app/types.ts","ng://@farris/mobile-devkit/lib/app/binding_data_manager.ts","ng://@farris/mobile-devkit/lib/app/repository_mananger.ts","ng://@farris/mobile-devkit/lib/app/view_model_contex_manager.ts","ng://@farris/mobile-devkit/lib/context/context.ts","ng://@farris/mobile-devkit/lib/app/app_context.ts","ng://@farris/mobile-devkit/lib/view-model/view_model_context.ts","ng://@farris/mobile-devkit/lib/ui-state/decorators.ts","ng://@farris/mobile-devkit/lib/ui-state/uistate_metadata_util.ts","ng://@farris/mobile-devkit/lib/ui-state/ui_state.ts","ng://@farris/mobile-devkit/lib/state-machine/types.ts","ng://@farris/mobile-devkit/lib/state-machine/metadata/state_metadata.ts","ng://@farris/mobile-devkit/lib/state-machine/metadata/render_state_metadata.ts","ng://@farris/mobile-devkit/lib/state-machine/metadata/action_metadata.ts","ng://@farris/mobile-devkit/lib/state-machine/state_machine_context.ts","ng://@farris/mobile-devkit/lib/state-machine/state_machine_watcher.ts","ng://@farris/mobile-devkit/lib/state-machine/state_machine.ts","ng://@farris/mobile-devkit/lib/form/types.ts","ng://@farris/mobile-devkit/lib/form/binding_value_converter.ts","ng://@farris/mobile-devkit/lib/form/binding_value_accessor.ts","ng://@farris/mobile-devkit/lib/form/decorators.ts","ng://@farris/mobile-devkit/lib/validator/validator.ts","ng://@farris/mobile-devkit/lib/form/form_control.ts","ng://@farris/mobile-devkit/lib/form/form.ts","ng://@farris/mobile-devkit/lib/view-model/decorators.ts","ng://@farris/mobile-devkit/lib/view-model/view_model.ts","ng://@farris/mobile-devkit/lib/view-model/types.ts","ng://@farris/mobile-devkit/lib/app/app_eventBus.ts","ng://@farris/mobile-devkit/lib/app/providers.ts","ng://@farris/mobile-devkit/lib/app/app.ts","ng://@farris/mobile-devkit/lib/variable/parse_util.ts","ng://@farris/mobile-devkit/lib/variable/data_variable_parser.ts","ng://@farris/mobile-devkit/lib/variable/ui_state_variable_parser.ts","ng://@farris/mobile-devkit/lib/variable/state_machine_variable_parser.ts","ng://@farris/mobile-devkit/lib/variable/command_variable_parser.ts","ng://@farris/mobile-devkit/lib/variable/variable_parse_service.ts","ng://@farris/mobile-devkit/lib/variable/providers.ts","ng://@farris/mobile-devkit/lib/command/flow/task_link.ts","ng://@farris/mobile-devkit/lib/command/flow/task_flow.ts","ng://@farris/mobile-devkit/lib/command/command_context.ts","ng://@farris/mobile-devkit/lib/command/command_handler.ts","ng://@farris/mobile-devkit/lib/command/command_handler_registry.ts","ng://@farris/mobile-devkit/lib/command/command_handler_extender.ts","ng://@farris/mobile-devkit/lib/command/command_handler_extender_registry.ts","ng://@farris/mobile-devkit/lib/command/command_handler_factory.ts","ng://@farris/mobile-devkit/lib/command/command_bus.ts","ng://@farris/mobile-devkit/lib/command/providers.ts","ng://@farris/mobile-devkit/lib/exception/tokens.ts","ng://@farris/mobile-devkit/farris-mobile-devkit.ts"],"sourcesContent":["\r\nexport interface Type<T> extends Function {\r\n  new (...args: any[]): T;\r\n}\r\n\r\nexport const Type = Function;\r\n\r\n\r\n\r\n// export type ClassType = new (...args: any[]) => any;\r\n\r\nexport interface Pagination {\r\n    pageSize: number;\r\n    pageIndex: number;\r\n    total: number;\r\n}\r\n\r\nexport interface Pagination {\r\n    pageSize: number;\r\n    pageIndex: number;\r\n    total: number;\r\n}\r\n\r\n\r\nexport interface ResultData {\r\n    data?: any[];\r\n    pagination?: Pagination;\r\n}\r\n\r\nexport enum DataChangeType { Add, Delete }\r\n\r\nexport interface DataChange {\r\n    /**\r\n     * 变更路径，主要针对带从表的情况\r\n     */\r\n    fpath?: string;\r\n    dataId: string;\r\n    changeType: DataChangeType;\r\n    [prop: string]: any;\r\n}\r\n","import { Type } from '../types';\r\n\r\nexport function isType(v: any): v is Type<any> {\r\n  return typeof v === 'function';\r\n}\r\n\r\n\r\n\r\nexport interface AbstractType<T> extends Function {\r\n  prototype: T;\r\n}\r\n\r\n\r\nexport enum InjectFlags {\r\n\r\n  Default = 0b0000,\r\n\r\n  Self = 0b0001,\r\n\r\n  SkipSelf = 0b0010,\r\n\r\n  Optional = 0b0100,\r\n}\r\n\r\n\r\nexport const enum OptionFlags {\r\n  Optional = 1 << 0,\r\n  CheckSelf = 1 << 1,\r\n  CheckParent = 1 << 2,\r\n  Default = CheckSelf | CheckParent\r\n}\r\n\r\n\r\nexport interface Record {\r\n\r\n  fn: Function;\r\n\r\n  useNew: boolean;\r\n\r\n  deps: DependencyRecord[];\r\n\r\n  value: any;\r\n\r\n}\r\n\r\n\r\nexport interface DependencyRecord {\r\n\r\n  token: any;\r\n\r\n  options: number;\r\n}\r\n\r\n\r\n","export const EMPTY = [] as any[];\r\n\r\nexport const IDENT = function<T>(value: T): T {\r\n  return value;\r\n};\r\n\r\nexport const CIRCULAR = IDENT;\r\n\r\nexport const MULTI_PROVIDER_FN = function(): any[] {\r\n  return Array.prototype.slice.call(arguments);\r\n};\r\n\r\nexport const NEW_LINE = /\\n/gm;\r\n\r\nexport const NO_NEW_LINE = 'ɵ';\r\n\r\nconst _THROW_IF_NOT_FOUND = {};\r\n\r\nexport const THROW_IF_NOT_FOUND = _THROW_IF_NOT_FOUND;\r\n\r\nexport const NG_TEMP_TOKEN_PATH = 'ngTempTokenPath';\r\n","import { NO_NEW_LINE, NEW_LINE } from './consts';\r\n\r\nexport function stringify(token: any): string {\r\n  if (typeof token === 'string') {\r\n    return token;\r\n  }\r\n\r\n  if (Array.isArray(token)) {\r\n    return '[' + token.map(stringify).join(', ') + ']';\r\n  }\r\n\r\n  if (token == null) {\r\n    return '' + token;\r\n  }\r\n\r\n  if (token.overriddenName) {\r\n    return `${token.overriddenName}`;\r\n  }\r\n\r\n  if (token.name) {\r\n    return `${token.name}`;\r\n  }\r\n\r\n  const res = token.toString();\r\n\r\n  if (res == null) {\r\n    return '' + res;\r\n  }\r\n\r\n  const newLineIndex = res.indexOf('\\n');\r\n  return newLineIndex === -1 ? res : res.substring(0, newLineIndex);\r\n}\r\n\r\n\r\nexport function getClosureSafeProperty<T>(objWithPropertyToExtract: T): string {\r\n  for (const key in objWithPropertyToExtract) {\r\n    if (objWithPropertyToExtract[key] === getClosureSafeProperty as any) {\r\n      return key;\r\n    }\r\n  }\r\n  throw Error('Could not find renamed property on target object.');\r\n}\r\n\r\n\r\nexport function formatError(\r\n  text: string,\r\n  obj: any,\r\n  injectorErrorName: string,\r\n  source: string|null = null\r\n): string {\r\n  text = text && text.charAt(0) === '\\n' && text.charAt(1) == NO_NEW_LINE ? text.substr(2) : text;\r\n  let context = stringify(obj);\r\n  if (Array.isArray(obj)) {\r\n    context = obj.map(stringify).join(' -> ');\r\n  } else if (typeof obj === 'object') {\r\n    const parts = [] as string[];\r\n    for (const key in obj) {\r\n      if (obj.hasOwnProperty(key)) {\r\n        const value = obj[key];\r\n        parts.push(\r\n            key + ':' + (typeof value === 'string' ? JSON.stringify(value) : stringify(value)));\r\n      }\r\n    }\r\n    context = `{${parts.join(', ')}}`;\r\n  }\r\n  return `${injectorErrorName}${source ? '(' + source + ')' : ''}[${context}]: ${\r\n      text.replace(NEW_LINE, '\\n  ')}`;\r\n}\r\n\r\n\r\nexport function staticError(text: string, obj: any): Error {\r\n  return new Error(formatError(text, obj, 'StaticInjectorError'));\r\n}\r\n","import { Type } from '../types';\r\nimport { getClosureSafeProperty } from './utils';\r\n\r\n\r\nexport interface InjectorType<T> extends Type<T> {\r\n  ɵinj: never;\r\n}\r\n\r\nexport interface ɵɵInjectableDef<T> {\r\n  providedIn: InjectorType<any>|'root'|'platform'|'any'|null;\r\n  token: unknown;\r\n  factory: (t?: Type<any>) => T;\r\n  value: T|undefined;\r\n}\r\n\r\n\r\nexport function ɵɵdefineInjectable<T>(opts: {\r\n  token: unknown,\r\n  providedIn?: Type<any>|'root'|'platform'|'any'|null, factory: () => T,\r\n}): never {\r\n  return ({\r\n    token: opts.token,\r\n    providedIn: opts.providedIn as any || null,\r\n    factory: opts.factory,\r\n    value: undefined,\r\n  } as ɵɵInjectableDef<T>) as never;\r\n}\r\n\r\n\r\nexport const NG_PROV_DEF       = getClosureSafeProperty({ɵprov: getClosureSafeProperty});\r\nexport const NG_INJ_DEF        = getClosureSafeProperty({ɵinj: getClosureSafeProperty});\r\nexport const NG_INJECTABLE_DEF = getClosureSafeProperty({ngInjectableDef: getClosureSafeProperty});\r\n\r\nexport function getOwnDefinition<T>(type: any, def: ɵɵInjectableDef<T>): ɵɵInjectableDef<T>|null {\r\n  return def && def.token === type ? def : null;\r\n}\r\n\r\nexport function getInjectableDef<T>(type: any): ɵɵInjectableDef<T>|null {\r\n  return getOwnDefinition(type, type[NG_PROV_DEF]) ||\r\n      getOwnDefinition(type, type[NG_INJECTABLE_DEF]);\r\n}\r\n","import { Type } from '../types';\r\nimport { ɵɵdefineInjectable } from './injectable_def';\r\n\r\n\r\nexport class InjectionToken<T> {\r\n\r\n  readonly ngMetadataName = 'InjectionToken';\r\n\r\n  readonly ɵprov: never|undefined;\r\n\r\n  constructor(\r\n    protected _desc: string,\r\n    options?: { providedIn?: Type<any>|'root'|'platform'|'any'|null, factory: () => T }\r\n  ) {\r\n\r\n    this.ɵprov = undefined;\r\n    if (typeof options === 'number') {\r\n      (this as any).__NG_ELEMENT_ID__ = options;\r\n    } else if (options !== undefined) {\r\n      this.ɵprov = ɵɵdefineInjectable({\r\n        token: this,\r\n        providedIn: options.providedIn || 'root',\r\n        factory: options.factory,\r\n      });\r\n    }\r\n  }\r\n\r\n  toString(): string {\r\n    return `InjectionToken ${this._desc}`;\r\n  }\r\n}\r\n\r\nexport function createInjectionToken(token: any): InjectionToken<any> {\r\n  return new InjectionToken<any>(token);\r\n}\r\n","import { Type } from '../types';\r\nimport { AbstractType, InjectFlags } from './types';\r\nimport { InjectionToken } from './injection_token';\r\n\r\n/**\r\n * 注入器抽象类\r\n */\r\nexport abstract class Injector {\r\n\r\n  abstract get<T>(\r\n      token: Type<T>|InjectionToken<T>|AbstractType<T>,\r\n      notFoundValue?: T,\r\n      flags?: InjectFlags\r\n  ): T;\r\n\r\n  abstract get(token: any, notFoundValue?: any): any;\r\n\r\n}\r\n","import { stringify } from './utils';\r\nimport { THROW_IF_NOT_FOUND } from './consts';\r\nimport { Injector } from './injector';\r\n\r\n\r\nexport class NullInjector implements Injector {\r\n\r\n  get(token: any, notFoundValue: any = THROW_IF_NOT_FOUND): any {\r\n    if (notFoundValue === THROW_IF_NOT_FOUND) {\r\n      const error = new Error(`NullInjectorError: No provider for ${stringify(token)}!`);\r\n      error.name = 'NullInjectorError';\r\n      throw error;\r\n    }\r\n    return notFoundValue;\r\n  }\r\n\r\n}\r\n\r\n\r\nexport const NULL_INJECTOR: Injector = new NullInjector();\r\n","import { Type } from '../types';\r\nimport { stringify, getClosureSafeProperty } from './utils';\r\n\r\nconst __forward_ref__ = getClosureSafeProperty({__forward_ref__: getClosureSafeProperty});\r\n\r\nexport function resolveForwardRef<T>(type: T): T {\r\n  return isForwardRef(type) ? type() : type;\r\n}\r\n\r\nexport interface ForwardRefFn {\r\n  (): any;\r\n}\r\n\r\nexport function forwardRef(forwardRefFn: ForwardRefFn): Type<any> {\r\n  (forwardRefFn as any).__forward_ref__ = forwardRef;\r\n  (forwardRefFn as any).toString = function() {\r\n    return stringify(this());\r\n  };\r\n  return (forwardRefFn as any as Type<any>);\r\n}\r\n\r\nexport function isForwardRef(fn: any): fn is() => any {\r\n  return typeof fn === 'function' && fn.hasOwnProperty(__forward_ref__) &&\r\n      fn.__forward_ref__ === forwardRef;\r\n}\r\n","import { Type } from '../types';\r\nimport { InjectFlags, OptionFlags, Record, DependencyRecord } from './types';\r\nimport { IDENT, EMPTY, CIRCULAR, MULTI_PROVIDER_FN, NO_NEW_LINE, NEW_LINE, NG_TEMP_TOKEN_PATH } from './consts';\r\nimport { stringify, getClosureSafeProperty, formatError, staticError } from './utils';\r\nimport { Injector } from './injector';\r\nimport { NULL_INJECTOR, NullInjector} from './null_injector';\r\nimport {\r\n  ValueProvider, StaticClassProvider, ConstructorProvider,  ExistingProvider, FactoryProvider,\r\n  StaticProvider, SupportedProvider,\r\n} from './providers';\r\nimport { InjectionToken } from './injection_token';\r\nimport { getInjectableDef } from './injectable_def';\r\nimport { resolveForwardRef } from './forward_ref';\r\nimport { THROW_IF_NOT_FOUND, } from './consts';\r\n\r\n\r\nexport const INJECTOR = new InjectionToken<Injector>('INJECTOR', -1 as any);\r\n\r\nexport const USE_VALUE =  getClosureSafeProperty<ValueProvider>({provide: String, useValue: getClosureSafeProperty});\r\n\r\nlet _currentInjector: Injector|undefined|null = undefined;\r\n\r\nexport function setCurrentInjector(injector: Injector|null|undefined): Injector|undefined|null {\r\n  const former = _currentInjector;\r\n  _currentInjector = injector;\r\n  return former;\r\n}\r\n\r\n\r\nexport class StaticInjector implements Injector {\r\n\r\n  readonly parent: Injector;\r\n\r\n  readonly source: string|null;\r\n\r\n  readonly scope: string|null;\r\n\r\n  private _records: Map<any, Record|null>;\r\n\r\n  constructor(\r\n    providers: StaticProvider[],\r\n    parent: Injector = NULL_INJECTOR,\r\n    source: string|null = null\r\n  ) {\r\n    parent = parent ? parent : NULL_INJECTOR;\r\n    this.parent = parent;\r\n    this.source = source;\r\n    const records = this._records = new Map<any, Record>();\r\n\r\n    records.set(Injector, {token: Injector, fn: IDENT, deps: EMPTY, value: this, useNew: false} as Record);\r\n    records.set(INJECTOR, {token: INJECTOR, fn: IDENT, deps: EMPTY, value: this, useNew: false} as Record);\r\n    this.scope = recursivelyProcessProviders(records, providers);\r\n  }\r\n\r\n  get<T>(token: Type<T>|InjectionToken<T>, notFoundValue?: T, flags?: InjectFlags): T;\r\n  get(token: any, notFoundValue?: any): any;\r\n  get(token: any, notFoundValue?: any, flags: InjectFlags = InjectFlags.Default): any {\r\n    const records = this._records;\r\n    let record = records.get(token);\r\n    if (record === undefined) {\r\n      const injectableDef = getInjectableDef(token);\r\n      if (injectableDef) {\r\n        const providedIn = injectableDef && injectableDef.providedIn;\r\n        if (providedIn === 'any' || providedIn != null && providedIn === this.scope) {\r\n          records.set(\r\n            token,\r\n            record = resolveProvider({provide: token, useFactory: injectableDef.factory, deps: EMPTY})\r\n          );\r\n        }\r\n      }\r\n      if (record === undefined) {\r\n        records.set(token, null);\r\n      }\r\n    }\r\n    const lastInjector = setCurrentInjector(this);\r\n    try {\r\n      return tryResolveToken(token, record, records, this.parent, notFoundValue, flags);\r\n    } catch (e) {\r\n      throw e;\r\n    } finally {\r\n      setCurrentInjector(lastInjector);\r\n    }\r\n  }\r\n\r\n  toString() {\r\n    const tokens = [] as string[];\r\n    const  records = this._records;\r\n    records.forEach((v, token) => tokens.push(stringify(token)));\r\n    return `StaticInjector[${tokens.join(', ')}]`;\r\n  }\r\n}\r\n\r\n\r\nfunction multiProviderMixError(token: any) {\r\n  return staticError('Cannot mix multi providers and regular providers', token);\r\n}\r\n\r\nexport const INJECTOR_SCOPE = new InjectionToken<'root'|'platform'|null>('Set Injector scope.');\r\n\r\n\r\n/**\r\n * 递归处理Provider\r\n */\r\nfunction recursivelyProcessProviders(records: Map<any, Record>, provider: StaticProvider): string | null {\r\n  let scope: string|null = null;\r\n  if (provider) {\r\n    provider = resolveForwardRef(provider);\r\n    if (Array.isArray(provider)) {\r\n\r\n      for (let i = 0; i < provider.length; i++) {\r\n        scope = recursivelyProcessProviders(records, provider[i]) || scope;\r\n      }\r\n    } else if (typeof provider === 'function') {\r\n\r\n      throw staticError('Function/Class not supported', provider);\r\n    } else if (provider && typeof provider === 'object' && provider.provide) {\r\n\r\n      let token = resolveForwardRef(provider.provide);\r\n      const resolvedProvider = resolveProvider(provider);\r\n\r\n      // multi\r\n      if (provider.multi === true) {\r\n        let multiProvider: Record|undefined = records.get(token);\r\n        if (multiProvider) {\r\n          if (multiProvider.fn !== MULTI_PROVIDER_FN) {\r\n            throw multiProviderMixError(token);\r\n          }\r\n        } else {\r\n          records.set(token, multiProvider = {\r\n            token: provider.provide,\r\n            deps: [],\r\n            useNew: false,\r\n            fn: MULTI_PROVIDER_FN,\r\n            value: EMPTY\r\n          } as Record);\r\n        }\r\n        token = provider;\r\n        multiProvider.deps.push({token, options: OptionFlags.Default});\r\n      }\r\n\r\n      const record = records.get(token);\r\n      if (record && record.fn === MULTI_PROVIDER_FN) {\r\n        throw multiProviderMixError(token);\r\n      }\r\n      if (token === INJECTOR_SCOPE) {\r\n        scope = resolvedProvider.value;\r\n      }\r\n      records.set(token, resolvedProvider);\r\n    } else {\r\n      throw staticError('Unexpected provider', provider);\r\n    }\r\n  }\r\n  return scope;\r\n}\r\n\r\nfunction resolveProvider(provider: SupportedProvider): Record {\r\n  const deps = computeDeps(provider);\r\n  let fn: Function = IDENT;\r\n  let value: any = EMPTY;\r\n  let useNew: boolean = false;\r\n  const provide = resolveForwardRef(provider.provide);\r\n\r\n  if (USE_VALUE in provider) {\r\n\r\n    value = (provider as ValueProvider).useValue;\r\n  } else if ((provider as FactoryProvider).useFactory) {\r\n\r\n    fn = (provider as FactoryProvider).useFactory;\r\n  } else if ((provider as ExistingProvider).useExisting) {\r\n\r\n    // Just use IDENT\r\n  } else if ((provider as StaticClassProvider).useClass) {\r\n\r\n    // 静态类型\r\n    useNew = true;\r\n    fn = resolveForwardRef((provider as StaticClassProvider).useClass);\r\n  } else if (typeof provide === 'function') {\r\n\r\n    // 构造函数\r\n    useNew = true;\r\n    fn = provide;\r\n  } else {\r\n    throw staticError(\r\n        'StaticProvider does not have [useValue|useFactory|useExisting|useClass] or [provide] is not newable',\r\n        provider);\r\n  }\r\n  return {deps, fn, useNew, value};\r\n}\r\n\r\n/**\r\n * 计算依赖\r\n */\r\nfunction computeDeps(provider: StaticProvider): DependencyRecord[] {\r\n  let deps: DependencyRecord[] = EMPTY;\r\n  const providerDeps: any[] = (provider as ExistingProvider & StaticClassProvider & ConstructorProvider).deps;\r\n\r\n  if (providerDeps && providerDeps.length) {\r\n    deps = [];\r\n    for (let i = 0; i < providerDeps.length; i++) {\r\n      const options = OptionFlags.Default;\r\n      const token = resolveForwardRef(providerDeps[i]);\r\n      deps.push({token, options});\r\n    }\r\n  } else if ((provider as ExistingProvider).useExisting) {\r\n    const token = resolveForwardRef((provider as ExistingProvider).useExisting);\r\n    deps = [{token, options: OptionFlags.Default}];\r\n  } else if (!providerDeps && !(USE_VALUE in provider)) {\r\n    // useValue & useExisting are the only ones which are exempt from deps all others need it.\r\n    throw staticError('\\'deps\\' required', provider);\r\n  }\r\n  return deps;\r\n}\r\n\r\n\r\nfunction tryResolveToken(\r\n  token: any,\r\n  record: Record|undefined|null,\r\n  records: Map<any, Record|null>,\r\n  parent: Injector,\r\n  notFoundValue: any,\r\n  flags: InjectFlags\r\n): any {\r\n  try {\r\n    return resolveToken(token, record, records, parent, notFoundValue, flags);\r\n  } catch (e) {\r\n    if (!(e instanceof Error)) {\r\n      e = new Error(e);\r\n    }\r\n    const path: any[] = e[NG_TEMP_TOKEN_PATH] = e[NG_TEMP_TOKEN_PATH] || [];\r\n    path.unshift(token);\r\n\r\n    // 清空循环引用的值\r\n    if (record && record.value === CIRCULAR) {\r\n      record.value = EMPTY;\r\n    }\r\n    throw e;\r\n  }\r\n}\r\n\r\n\r\nfunction resolveToken(\r\n  token: any,\r\n  record: Record|undefined|null,\r\n  records: Map<any, Record|null>,\r\n  parent: Injector,\r\n  notFoundValue: any,\r\n  flags: InjectFlags\r\n): any {\r\n\r\n  let value;\r\n  if (record && !(flags & InjectFlags.SkipSelf)) {\r\n    value = record.value;\r\n    if (value === CIRCULAR) {\r\n      throw Error(NO_NEW_LINE + 'Circular dependency');\r\n    } else if (value === EMPTY) {\r\n      record.value = CIRCULAR;\r\n      const useNew = record.useNew;\r\n      const fn = record.fn;\r\n      const depRecords = record.deps;\r\n      let deps = EMPTY;\r\n      if (depRecords.length) {\r\n        deps = [];\r\n        for (let i = 0; i < depRecords.length; i++) {\r\n          const depRecord: DependencyRecord = depRecords[i];\r\n          const options = depRecord.options;\r\n          const childRecord = options & OptionFlags.CheckSelf ? records.get(depRecord.token) : undefined;\r\n          deps.push(\r\n            tryResolveToken(\r\n              depRecord.token,\r\n              childRecord,\r\n              records,\r\n              !childRecord && !(options & OptionFlags.CheckParent) ? NULL_INJECTOR : parent,\r\n              options & OptionFlags.Optional ? null : THROW_IF_NOT_FOUND,\r\n              InjectFlags.Default\r\n            )\r\n          );\r\n        }\r\n      }\r\n      record.value = value = useNew ? new (fn as any)(...deps) : fn.apply(undefined, deps);\r\n    }\r\n  } else if (!(flags & InjectFlags.Self)) {\r\n\r\n    value = parent.get(token, notFoundValue, InjectFlags.Default);\r\n  } else if (!(flags & InjectFlags.Optional)) {\r\n\r\n    value = NULL_INJECTOR.get(token, notFoundValue);\r\n  } else {\r\n\r\n    value = NULL_INJECTOR.get(token, typeof notFoundValue !== 'undefined' ? notFoundValue : null);\r\n  }\r\n  return value;\r\n}\r\n","import { Injector } from './injector';\r\nimport { StaticInjector } from './static_injector';\r\nimport { StaticProvider } from './providers';\r\n\r\nexport function INJECTOR_IMPL__PRE_R3__(providers: StaticProvider[], parent: Injector|undefined, name: string) {\r\n  return new StaticInjector(providers, parent, name);\r\n}\r\n\r\nexport const INJECTOR_IMPL = INJECTOR_IMPL__PRE_R3__;\r\n\r\nexport function createInjector(\r\n  options: StaticProvider[] | {providers: StaticProvider[], parent?: Injector, name?: string},\r\n  parent?: Injector\r\n): Injector {\r\n  if (Array.isArray(options)) {\r\n    return INJECTOR_IMPL(options, parent, '');\r\n  } else {\r\n    return INJECTOR_IMPL(options.providers, options.parent, options.name || '');\r\n  }\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n// import { Type } from '@angular/core';\r\nimport { Type } from '../types';\r\n\r\n/**\r\n * An interface implemented by all Angular formType decorators, which allows them to be used as ES7\r\n * decorators as well as\r\n * Angular DSL syntax.\r\n *\r\n * ES7 syntax:\r\n *\r\n * ```\r\n * @ng.Component({...})\r\n * class MyClass {...}\r\n * ```\r\n *\r\n */\r\nexport interface TypeDecorator {\r\n    /**\r\n     * Invoke as ES7 decorator.\r\n     */\r\n    <T extends Type<any>>(type: T): T;\r\n\r\n    // Make TypeDecorator assignable to built-in ParameterDecorator formType.\r\n    // ParameterDecorator is declared in lib.d.ts as a `declare formType`\r\n    // so we cannot declare this interface as a subtype.\r\n    // see https://github.com/angular/angular/issues/3379#issuecomment-126169417\r\n    (target: Object, propertyKey?: string | symbol, parameterIndex?: number): void;\r\n}\r\n\r\nexport const ANNOTATIONS = '__annotations__';\r\nexport const PARAMETERS = '__parameters__';\r\nexport const PROP_METADATA = '__prop__metadata__';\r\n\r\n\r\n\r\n\r\n/**\r\n * @suppress {globalThis}\r\n */\r\nexport function makeDecorator(\r\n    name: string, props?: (...args: any[]) => any, parentClass?: any,\r\n    chainFn?: (fn: Function) => void,\r\n    typeFn?: (type: Type<any>, ...args: any[]) => void): {\r\n        new(...args: any[]): any;\r\n        (...args: any[]): any;\r\n        (...args: any[]): (cls: any) => any;\r\n    } {\r\n    const metaCtor = makeMetadataCtor(props);\r\n\r\n    function DecoratorFactory(...args: any[]): (cls: any) => any {\r\n        if (this instanceof DecoratorFactory) {\r\n            metaCtor.call(this, ...args);\r\n            return this;\r\n        }\r\n\r\n        const annotationInstance = new (<any>DecoratorFactory)(...args);\r\n        const typeDecorator: TypeDecorator = <TypeDecorator>function createTypeDecorator(cls: Type<any>) {\r\n            typeFn && typeFn(cls, ...args);\r\n            // Use of Object.defineProperty is important since it creates non-enumerable property which\r\n            // prevents the property is copied during subclassing.\r\n            const annotations = cls.hasOwnProperty(ANNOTATIONS) ?\r\n                (cls as any)[ANNOTATIONS] :\r\n                Object.defineProperty(cls, ANNOTATIONS, { value: [] })[ANNOTATIONS];\r\n            annotations.push(annotationInstance);\r\n            return cls;\r\n        };\r\n        if (chainFn) { chainFn(typeDecorator); }\r\n        return typeDecorator;\r\n    }\r\n\r\n    if (parentClass) {\r\n        DecoratorFactory.prototype = Object.create(parentClass.prototype);\r\n    }\r\n\r\n    DecoratorFactory.prototype.ngMetadataName = name;\r\n    (<any>DecoratorFactory).annotationCls = DecoratorFactory;\r\n    return DecoratorFactory as any;\r\n}\r\n\r\nfunction makeMetadataCtor(props?: (...args: any[]) => any): any {\r\n    return function ctor(...args: any[]) {\r\n        if (props) {\r\n            const values = props(...args);\r\n            // tslint:disable-next-line:forin\r\n            for (const propName in values) {\r\n                this[propName] = values[propName];\r\n            }\r\n        }\r\n    };\r\n}\r\n\r\n\r\n\r\n\r\n\r\nexport function makeParamDecorator(\r\n    name: string, props?: (...args: any[]) => any, parentClass?: any): any {\r\n    const metaCtor = makeMetadataCtor(props);\r\n    function ParamDecoratorFactory(...args: any[]): any {\r\n        if (this instanceof ParamDecoratorFactory) {\r\n            metaCtor.apply(this, args);\r\n            return this;\r\n        }\r\n        const annotationInstance = new (<any>ParamDecoratorFactory)(...args);\r\n\r\n        (<any>ParamDecorator).annotation = annotationInstance;\r\n        return ParamDecorator;\r\n\r\n        function ParamDecorator(cls: any, unusedKey: any, index: number): any {\r\n            // Use of Object.defineProperty is important since it creates non-enumerable property which\r\n            // prevents the property is copied during subclassing.\r\n            const parameters = cls.hasOwnProperty(PARAMETERS) ?\r\n                (cls as any)[PARAMETERS] :\r\n                Object.defineProperty(cls, PARAMETERS, { value: [] })[PARAMETERS];\r\n\r\n            // there might be gaps if some in between parameters do not have annotations.\r\n            // we pad with nulls.\r\n            while (parameters.length <= index) {\r\n                parameters.push(null);\r\n            }\r\n\r\n            (parameters[index] = parameters[index] || []).push(annotationInstance);\r\n            return cls;\r\n        }\r\n    }\r\n    if (parentClass) {\r\n        ParamDecoratorFactory.prototype = Object.create(parentClass.prototype);\r\n    }\r\n    ParamDecoratorFactory.prototype.ngMetadataName = name;\r\n    (<any>ParamDecoratorFactory).annotationCls = ParamDecoratorFactory;\r\n    return ParamDecoratorFactory;\r\n}\r\n\r\n\r\n\r\n\r\nexport function makePropDecorator(\r\n    name: string, props?: (...args: any[]) => any, parentClass?: any): any {\r\n    const metaCtor = makeMetadataCtor(props);\r\n\r\n    function PropDecoratorFactory(...args: any[]): any {\r\n        if (this instanceof PropDecoratorFactory) {\r\n            metaCtor.apply(this, args);\r\n            return this;\r\n        }\r\n\r\n        const decoratorInstance = new (<any>PropDecoratorFactory)(...args);\r\n\r\n        // tslint:disable-next-line:no-shadowed-variable\r\n        return function PropDecorator(target: any, name: string) {\r\n            const constructor = target.constructor;\r\n            // Use of Object.defineProperty is important since it creates non-enumerable property which\r\n            // prevents the property is copied during subclassing.\r\n            const meta = constructor.hasOwnProperty(PROP_METADATA) ?\r\n                (constructor as any)[PROP_METADATA] :\r\n                Object.defineProperty(constructor, PROP_METADATA, { value: {} })[PROP_METADATA];\r\n            meta[name] = meta.hasOwnProperty(name) && meta[name] || [];\r\n            meta[name].unshift(decoratorInstance);\r\n        };\r\n    }\r\n\r\n    if (parentClass) {\r\n        PropDecoratorFactory.prototype = Object.create(parentClass.prototype);\r\n    }\r\n\r\n    PropDecoratorFactory.prototype.ngMetadataName = name;\r\n    (<any>PropDecoratorFactory).annotationCls = PropDecoratorFactory;\r\n    return PropDecoratorFactory;\r\n}\r\n","import { ANNOTATIONS, PROP_METADATA } from './decorator';\r\nimport { Translate } from '../../i18n/index';\r\n\r\n/**\r\n * 元数据解析\r\n * 约束：\r\n * 1、类型装饰器：在某个类型上，某种类型的装饰器，只使用一次，不重复添加；\r\n * 2、属性装饰器：在某个属性上，某种类型的装饰器，只使用一次，不重复添加\r\n */\r\nclass MetadataUtil {\r\n\r\n  // ----------------------------------------\r\n  // 类型元数据\r\n  // ----------------------------------------\r\n\r\n  /**\r\n   * 获取类元数据\r\n   * 返回结果形如：\r\n   * [\r\n   *   Injectable\r\n   *   NgViewModel\r\n   *   NgViewModel\r\n   * ]\r\n   */\r\n  static getClassMetadatas(constructor: any): any[] {\r\n    const metadatas = constructor[ANNOTATIONS];\r\n    return metadatas;\r\n  }\r\n\r\n  /**\r\n   * 获取某个class上的某种装饰器\r\n   * 返回结果：NgViewModel\r\n   */\r\n  static getClassMetadataByName(constructor: any, metadataName: string): any {\r\n    const metadata = this.getClassMetadataByNameWithTranslate(constructor, metadataName, null, null);\r\n    return metadata;\r\n  }\r\n\r\n  static getClassMetadataByNameWithTranslate(\r\n    constructor: any, metadataName: string,\r\n    translateService?: Translate, keysToTranslate?: string[]): any {\r\n    const allClassMetadatas = this.getClassMetadatas(constructor);\r\n    if (!allClassMetadatas) {\r\n      return null;\r\n    }\r\n    const metadata = allClassMetadatas.find((classMetadata: any) => {\r\n      return classMetadata.ngMetadataName === metadataName;\r\n    });\r\n    if (metadata && translateService && keysToTranslate) {\r\n      keysToTranslate.forEach((metadataPropKey) => {\r\n        const propertyVariable: string = metadata[metadataPropKey];\r\n        if (propertyVariable && propertyVariable.startsWith('{{') && propertyVariable.endsWith('}}')) {\r\n          const translateKey = propertyVariable.replace('{{', '').replace('}}', '').trim();\r\n          metadata[metadataPropKey] = translateService.transform(translateKey, null);\r\n        }\r\n      });\r\n    }\r\n    return metadata;\r\n  }\r\n\r\n  // ----------------------------------------\r\n  // 属性元数据\r\n  // ----------------------------------------\r\n\r\n  /**\r\n   * 获取所有属性的所有元数据\r\n   * 返回格式：\r\n   * {\r\n   *   propName1: [ NgDefaultValue, NgMaxLength, NgMinLength],\r\n   *   propName2: [ NgDefaultValue, NgMaxLength, NgMinLength]\r\n   * }\r\n   */\r\n  static getPropsMetadatas(constructor: any): any {\r\n    const allPropMetadatas = constructor[PROP_METADATA];\r\n    return allPropMetadatas;\r\n  }\r\n\r\n  /**\r\n   * 获取所有属性的某一类型的元数据\r\n   * 如果同一属性\r\n   * 返回结果：\r\n   * {\r\n   *    propName1: NgDefaultValue,\r\n   *    propName2: NgDefaultValue\r\n   * }\r\n   */\r\n  static getPropsMetadatasByName(constructor: any, metadataName: string): { [propName: string]: any } {\r\n    const metadatas = this.getPropsMetadatasByNameWithTranslate(constructor, metadataName);\r\n    return metadatas;\r\n  }\r\n\r\n  static getPropsMetadatasByNameWithTranslate(\r\n    constructor: any, metadataName: string,\r\n    translateService?: Translate, keysToTranslate?: string[]): { [propName: string]: any } {\r\n    const metadatas = {};\r\n    // 读取构造函数中存储的类属性注解。\r\n    const allPropMetadatas = this.getPropsMetadatas(constructor);\r\n    if (!allPropMetadatas) {\r\n      return metadatas;\r\n    }\r\n    // 遍历所有属性提取注解信息。\r\n    Object.keys(allPropMetadatas).forEach((propName: string) => {\r\n      // 提取当前属性注解对象\r\n      const propMetadatas: any[] = allPropMetadatas[propName];\r\n      // 提取指定类型的注解项\r\n      const metadata = propMetadatas.find((propMetadata: any) => {\r\n        return propMetadata.ngMetadataName === metadataName;\r\n      });\r\n      if (translateService && keysToTranslate) {\r\n        keysToTranslate.forEach((metadataPropKey) => {\r\n          const propertyVariable: string = metadata[metadataPropKey];\r\n          if (propertyVariable && propertyVariable.startsWith('{{') && propertyVariable.endsWith('}}')) {\r\n            const translateKey = propertyVariable.replace('{{', '').replace('}}', '').trim();\r\n            metadata[metadataPropKey] = translateService.transform(translateKey, null);\r\n          }\r\n        });\r\n      }\r\n      if (metadata) {\r\n        metadatas[propName] = metadata;\r\n      }\r\n    });\r\n\r\n    return metadatas;\r\n  }\r\n\r\n  /**\r\n   * 获取某个属性的所有元数据\r\n   * 返回格式：[ NgDefaultValue, NgMaxLength, NgMinLength]\r\n   */\r\n  static getPropMetadatasByName(constructor: any, propName: string): any[] {\r\n    // 暂不实现\r\n    return null;\r\n  }\r\n\r\n  /**\r\n   * 获取某个属性的某种元数据\r\n   * 返回格式：NgDefaultValue\r\n   */\r\n  static getPropMetadataByName(constructor: any, propName: string, metadataName: string): any {\r\n    // 暂不实现\r\n    return null;\r\n  }\r\n\r\n\r\n  // ----------------------------------------\r\n  // 参数元数据\r\n  // ----------------------------------------\r\n\r\n}\r\n\r\nexport { MetadataUtil };\r\n","/**\r\n * 请求头信息\r\n */\r\ninterface HttpHeaders {\r\n  [key: string]: string;\r\n}\r\n\r\n/**\r\n * Http参数\r\n */\r\ninterface HttpParams {\r\n  [key: string]: string;\r\n}\r\n\r\n/**\r\n * 请求方法\r\n */\r\ntype HttpMethod = | 'GET' | 'DELETE' | 'HEAD' | 'OPTIONS' | 'POST' | 'PUT' | 'PATCH' | 'LINK' | 'UNLINK';\r\n\r\n/**\r\n * HttpMethods\r\n */\r\nclass HttpMethods {\r\n  public static GET: HttpMethod     = 'GET';\r\n  public static DELETE: HttpMethod  = 'DELETE';\r\n  public static HEAD: HttpMethod    = 'HEAD';\r\n  public static OPTIONS: HttpMethod = 'OPTIONS';\r\n  public static POST: HttpMethod    = 'POST';\r\n  public static PUT: HttpMethod     = 'PUT';\r\n  public static PATCH: HttpMethod   = 'PATCH';\r\n  public static LINK: HttpMethod    = 'LINK';\r\n  public static UNLINK: HttpMethod  = 'UNLINK';\r\n}\r\n\r\n\r\n/**\r\n * 返回值类型\r\n */\r\ntype HttpResponseType = | 'arraybuffer' | 'blob' | 'document' | 'json' | 'text' | 'stream';\r\n\r\n/**\r\n * 返回值处理类型\r\n */\r\ntype ObserveType = 'body' | 'response';\r\n\r\n/**\r\n * Http响应信息\r\n */\r\ninterface HttpResponse {\r\n  headers: {[key: string]: string};\r\n  body: any;\r\n  status: number;\r\n  statusText: string;\r\n}\r\n\r\n/**\r\n * Http请求配置\r\n */\r\ninterface HttpRequestConfig {\r\n  params?: HttpParams;\r\n  body?: any;\r\n  headers?: HttpHeaders;\r\n  responseType?: HttpResponseType;\r\n  observe?: 'body' | 'response';\r\n}\r\n\r\n\r\nexport { HttpHeaders, HttpParams, HttpMethod, HttpMethods, ObserveType, HttpResponseType, HttpRequestConfig, HttpResponse };\r\n","import { AxiosInstance, AxiosRequestConfig, AxiosResponse} from 'axios';\r\nimport { HttpMethod, HttpHeaders, HttpResponse, HttpRequestConfig } from './types';\r\n\r\nclass HttpUtil {\r\n\r\n  /**\r\n   * 追加Header\r\n   */\r\n  public static appendHeader(headers: HttpHeaders, key: string, value: string): HttpHeaders {\r\n    headers = Object.assign({}, headers, {[key]: value});\r\n    return headers;\r\n  }\r\n\r\n  /**\r\n   * 向RequestConfig中追加body\r\n   */\r\n  public static appendBodyToRequestConfig(body: any, requestConfig: HttpRequestConfig) {\r\n    if (!requestConfig) {\r\n      requestConfig = {};\r\n    }\r\n    requestConfig = Object.assign({}, requestConfig, { body: body});\r\n\r\n    return requestConfig;\r\n  }\r\n\r\n  /**\r\n   * 构造AxiosReqeustConfig\r\n   */\r\n  public static buildAxiosRequestConfig(method: HttpMethod, url: string, requestConfig: HttpRequestConfig): AxiosRequestConfig {\r\n    requestConfig = requestConfig || {};\r\n\r\n    const axiosRequestConfig: AxiosRequestConfig = {\r\n      url: url,\r\n      method: method,\r\n      params:  requestConfig.params || null,\r\n      headers: requestConfig.headers || null,\r\n      responseType: requestConfig.responseType || 'json',\r\n      data: requestConfig.body || null\r\n    };\r\n    return axiosRequestConfig;\r\n  }\r\n\r\n  /**\r\n   * 构造Http响应信息\r\n   */\r\n  public static buildHttpResponse(axiosResponse: AxiosResponse ) {\r\n    const httpResponse: HttpResponse = {\r\n      body: axiosResponse.data,\r\n      headers: axiosResponse.headers,\r\n      status: axiosResponse.status,\r\n      statusText: axiosResponse.statusText\r\n    };\r\n    return httpResponse;\r\n  }\r\n\r\n}\r\n\r\nexport { HttpUtil };\r\n","import { Observable, from, of } from 'rxjs';\r\nimport { map, switchMap } from 'rxjs/operators';\r\nimport axios from 'axios';\r\nimport { AxiosInstance, AxiosResponse} from 'axios';\r\nimport { HttpMethod, HttpRequestConfig } from './types';\r\nimport { HttpUtil } from './http-util';\r\n\r\n/**\r\n * HttpClient\r\n */\r\nclass HttpClient {\r\n\r\n  /**\r\n   * axios实例\r\n   */\r\n  private axiosInstance: AxiosInstance;\r\n\r\n  /**\r\n   * 构造函数\r\n   */\r\n  constructor() {\r\n    this.axiosInstance = axios.create();\r\n  }\r\n\r\n  /**\r\n   * 发送GET请求\r\n   */\r\n  public get(url: string, requestConfig: HttpRequestConfig): Observable<any> {\r\n    return this.request('GET', url, requestConfig);\r\n  }\r\n\r\n  /**\r\n   * 发送POST请求\r\n   */\r\n  public post(url: string, body: any, requestConfig: HttpRequestConfig) {\r\n    requestConfig = HttpUtil.appendBodyToRequestConfig(body, requestConfig);\r\n    return this.request('POST', url, requestConfig);\r\n  }\r\n\r\n  /**\r\n   * 发送PUT请求\r\n   */\r\n  public put(url: string, body: any, requestConfig: HttpRequestConfig) {\r\n    requestConfig = HttpUtil.appendBodyToRequestConfig(body, requestConfig);\r\n    return this.request('PUT', url, requestConfig);\r\n  }\r\n\r\n  /**\r\n   * 发送PATCH请求\r\n   */\r\n  public patch(url: string, body: any, requestConfig: HttpRequestConfig) {\r\n    requestConfig = HttpUtil.appendBodyToRequestConfig(body, requestConfig);\r\n    return this.request('PATCH', url, requestConfig);\r\n  }\r\n\r\n  /**\r\n   * 发送DELETE请求\r\n   */\r\n  public delete(url: string, requestConfig: HttpRequestConfig) {\r\n    return this.request('DELETE', url, requestConfig);\r\n  }\r\n\r\n  /**\r\n   * 发送请求\r\n   */\r\n  request( method: HttpMethod, url: string, requestConfig: HttpRequestConfig): Observable<any> {\r\n    const request$ = of(true).pipe(\r\n      switchMap(() => {\r\n        const axiosRequestConfig = HttpUtil.buildAxiosRequestConfig(method, url, requestConfig);\r\n        return from(this.axiosInstance.request(axiosRequestConfig));\r\n      })\r\n    );\r\n    return request$.pipe(\r\n      map((axiosResponse: AxiosResponse) => {\r\n        const httpResponse = HttpUtil.buildHttpResponse(axiosResponse);\r\n        return requestConfig.observe === 'response' ? httpResponse : axiosResponse.data;\r\n      })\r\n    );\r\n  }\r\n\r\n}\r\n\r\nexport { HttpClient };\r\n","export * from './types';\r\nexport * from './http-util';\r\nexport * from './http-client';\r\n\r\nimport { StaticProvider } from '../core/index';\r\nimport { HttpClient } from './http-client';\r\n\r\nconst HTTP_PROVIDERS: StaticProvider[] = [\r\n  { provide: HttpClient, useClass: HttpClient, deps: [] }\r\n];\r\n\r\nexport { HTTP_PROVIDERS };\r\n\r\n\r\n","/**\r\n * 变更记录\r\n */\r\nexport class Modification {\r\n\r\n  /**\r\n   * 实体变更路径。如：[1, 'name']\r\n   * 说明： 1 为实体主键ID， name 为属性名称\r\n   */\r\n  path?: string[];\r\n\r\n  /**\r\n   * 原值\r\n   */\r\n  preValue?: any;\r\n\r\n  /**\r\n   * 变更后的新值\r\n   *\r\n   * value 值类型会根据 type(变更类型)的不同而不同，当type 为以下类型时：\r\n   * - Add: value的值为json 对象\r\n   * - ValueChange: value的值为string\\number\\boolean等简单数据\r\n   * - Remove: value的值为键值对{[key:string]: value} key为主键字段\r\n   *\r\n   */\r\n  value: any;\r\n\r\n  /**\r\n   * 变更类型\r\n   */\r\n  type: ModifyType;\r\n\r\n  /**\r\n   * 数据是否通过验证\r\n   */\r\n  isValid?: boolean;\r\n\r\n  /**\r\n   * 数据验证结果\r\n   */\r\n  errors?: { [type: string]: string };\r\n\r\n  /**\r\n   * 构造函数\r\n   * @param value 新值\r\n   * @param modifyType 变更类型\r\n   * @param path 变更路径\r\n   * @param preValue 旧值\r\n   */\r\n  constructor(value: any, modifyType: ModifyType, path?: string[], preValue?: any) {\r\n    this.type = modifyType;\r\n    this.value = value;\r\n    this.preValue = preValue;\r\n    this.path = path;\r\n  }\r\n}\r\n\r\n/**\r\n * 变更类型\r\n */\r\nexport enum ModifyType {\r\n\r\n  /**\r\n   * 添加\r\n   */\r\n  Add = 'ADD',\r\n\r\n  /**\r\n   * 删除\r\n   */\r\n  Remove = 'REMOVE',\r\n\r\n  /**\r\n   * 修改\r\n   */\r\n  ValueChange = 'VALUE_CHANGE',\r\n\r\n  /**\r\n   * 加载\r\n   */\r\n  Load = 'LOAD',\r\n\r\n  /**\r\n   * 未改变\r\n   */\r\n  UnChanged = 'UNCHANGED',\r\n\r\n  /**\r\n   * 分页信息变更\r\n   */\r\n  PaginationInfoChange = \"PAGINATION_INFO_CHANGE\"\r\n}\r\n","/*\r\n * @Author: Lucus, Witt\r\n * @Date: 2018-10-30 15:53:59\r\n * @Last Modified by: Witt\r\n * @Last Modified time: 2018-11-08 17:25:08\r\n */\r\n\r\nimport { Modification, ModifyType } from './types';\r\n\r\nfunction isEqual(value: any, other: any) {\r\n  return JSON.stringify(value) ===  JSON.stringify(other);\r\n}\r\n\r\n/**\r\n * 实体数据变更集\r\n */\r\nclass ChangeSet {\r\n\r\n  /**\r\n   * 变更集合\r\n   */\r\n  protected modifications: Modification[] = [];\r\n\r\n  /**\r\n   *  获取所有的变更记录\r\n   */\r\n  public get changes(): Modification[] {\r\n      return this.modifications;\r\n  }\r\n\r\n  /**\r\n   * 将变更集添加到集合中\r\n   * ### 使用示例\r\n   * ```\r\n   * const changeSet = new ChangeSet();\r\n   * const modify = new Modification('newValue', ModifyType.ValueChange, [1, 'title'], 'oldValue');\r\n   * changeSet.append(modify)\r\n   * ```\r\n   * @param changeItem 变更数据\r\n   */\r\n  public append(modification: Modification) {\r\n    switch (modification.type) {\r\n      case ModifyType.ValueChange:\r\n        this.appendValueChangeModification(modification);\r\n          break;\r\n       case ModifyType.Add:\r\n        this.appendAddModification(modification);\r\n          break;\r\n      case ModifyType.Remove:\r\n        this.appendRemoveModification(modification);\r\n        break;\r\n      case ModifyType.Load:\r\n        break;\r\n      default:\r\n        throw new Error('不支持此类型的变更');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 添加值变化变更\r\n   */\r\n  private appendValueChangeModification(modification: Modification) {\r\n    const value = modification.value;\r\n\r\n    const existedModification = this.findModifyItemsPath(modification.path);\r\n    if (existedModification) {\r\n\r\n      // 如果存在相同路径的ValueChange类型的变更集，则更新值；\r\n      existedModification.value = value;\r\n    } else {\r\n        const existedAddModification = this.findNewAddItemsPath(modification.path);\r\n        if (existedAddModification) {\r\n\r\n          // @todo：\r\n          // 1、此处逻辑有问题，value是个字符串，不能直接assign；\r\n          // 2、之所以没有出现问题，是因为都是服务器端新增，新增后，客户端清空了所有变更。\r\n          // 如果存在涵盖该ValueChange变更的Add变更，则更新Add变更对应的数据；\r\n          existedAddModification.value = Object.assign({}, existedAddModification.value, value);\r\n        } else {\r\n\r\n          // 其他情况，新增一条ValueChange变更。\r\n          this.modifications.push(modification);\r\n        }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 添加新增变更\r\n   */\r\n  private appendAddModification(modification: Modification) {\r\n    const value = modification.value;\r\n\r\n    const existedModification = this.findNewAddItemsPath(modification.path);\r\n    if (existedModification) {\r\n\r\n      // 1、如果已经存在相同路径的Add变更，则合并Value。\r\n      existedModification.value = existedModification.value.concat(value);\r\n    } else {\r\n\r\n      // 2、如果没有，则新增一条Add变更。\r\n      this.modifications.push(modification);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 添加删除变更\r\n   */\r\n  private appendRemoveModification(modification: Modification) {\r\n\r\n    const path = modification.path;\r\n    const primaryKey = Object.keys(modification.value)[0];\r\n    const primaryKeyValue = modification.value[primaryKey];\r\n\r\n    // 1、存在相同path的新增变更，移除新增变更，不需要添加删除变更；\r\n    // @todo：待重构（1、只考虑了主从情况，2、临时用多重循环实现）\r\n    this.modifications.forEach((addModification: Modification) => {\r\n\r\n      // 只处理新增变更\r\n      if (addModification.type !== ModifyType.Add) {\r\n        return;\r\n      }\r\n\r\n      // @todo 只考虑主从结构，再深的层次暂不考虑\r\n      if (isEqual(addModification.path, path) === false) {\r\n        return;\r\n      }\r\n\r\n      // 遍历新增新增变更的value（value是个数组），移除相匹配的新增删除\r\n      addModification.value = addModification.value.filter((addDataItem: any) => {\r\n        return addDataItem[primaryKey] !== primaryKeyValue;\r\n      });\r\n    });\r\n\r\n    // 2、移除对应的修改变更\r\n    const fullRemovePath = path.concat(`${primaryKey}:${primaryKeyValue}`);\r\n    this.modifications = this.modifications.filter((valueModification: Modification) => {\r\n      if (valueModification.type !== ModifyType.ValueChange) {\r\n        return true;\r\n      }\r\n      const valueChangePath = Array.from(valueModification.path);\r\n      valueChangePath.pop();\r\n\r\n      // 路径相同进行移除\r\n      const isToRemove = isEqual(valueChangePath, fullRemovePath);\r\n      return !isToRemove;\r\n    });\r\n\r\n    // 先删除下级删除变更，再插入\r\n    // 主要针对从从表删除之后，又删除子表时，根实体上还存在从从表删除变更的场景\r\n    this.removeDescendantRemoveModifications(modification);\r\n    this.modifications.push(modification);\r\n  }\r\n\r\n  /**\r\n   * 清空变更集合\r\n   */\r\n  public clear() {\r\n    this.modifications = [];\r\n  }\r\n\r\n\r\n  /**\r\n   * 根据path获取Add类型的变更记录\r\n   * @param path 变更路径\r\n   */\r\n  private findNewAddItemsPath(path: any[]) {\r\n      return this.modifications.find((value, index) => {\r\n          return isEqual(path, value.path) && value.type === ModifyType.Add;\r\n      });\r\n  }\r\n\r\n  /**\r\n   * 根据path获取ValueChange类型的变更记录\r\n   * @param path 变更路径\r\n   */\r\n  private findModifyItemsPath(path: any[]) {\r\n    return this.modifications.find((value, index) => {\r\n      return isEqual(path, value.path) && value.type === ModifyType.ValueChange;\r\n    });\r\n  }\r\n\r\n  /**\r\n   * 删除后代（包括自己）所有的删除变更\r\n   * @todo：临时做一个最小化修改\r\n   */\r\n  private removeDescendantRemoveModifications(parentRemoveModification: Modification): void {\r\n\r\n    const parentPathWithId = this.createRemovePathWithId(parentRemoveModification);\r\n\r\n    // 删除后代修改变更\r\n    this.modifications = this.modifications.filter((modification: Modification) => {\r\n      if (modification.type !== ModifyType.Remove) {\r\n        return true;\r\n      }\r\n      const descendantPathWithId = this.createRemovePathWithId(modification);\r\n      const isDescendant =  this.isDescendantPath(parentPathWithId, descendantPathWithId);\r\n      return !isDescendant;\r\n    });\r\n  }\r\n\r\n  /**\r\n   * 获取删除路径的完整格式\r\n   * @summary\r\n   * 1、目前删除变更的路径标记到父集合；\r\n   * 2、为了方便比较，将被删除的数据id加入到路径中\r\n   */\r\n  private createRemovePathWithId(modification: Modification) {\r\n    const path = modification.path;\r\n    const primaryKey = Object.keys(modification.value)[0];\r\n    const primaryKeyValue = modification.value[primaryKey];\r\n    const pathWithId = path.concat([`${primaryKey}:${primaryKeyValue}`]);\r\n    return pathWithId;\r\n  }\r\n\r\n  /**\r\n   * 判断是否是后代节点路径\r\n   * @param parentPath 父节点路径\r\n   * @param descendantPath 后代节点\r\n   */\r\n  private isDescendantPath(parentPath: string[], descendantPath: string[]) {\r\n    if (parentPath.length > descendantPath.length) {\r\n      return false;\r\n    }\r\n\r\n    let isDescendantPath = true;\r\n    parentPath.forEach((parentPathItem: string, parentPathItemIndex: number) => {\r\n      if (parentPathItem !== descendantPath[parentPathItemIndex]) {\r\n        isDescendantPath = false;\r\n        return;\r\n      }\r\n    });\r\n\r\n    return isDescendantPath;\r\n  }\r\n\r\n}\r\n\r\nexport { ChangeSet };\r\n\r\n","/*\r\n * @Author: Witt\r\n * @Date: 2018-12-27 09:25:38\r\n * @Last Modified by: Witt\r\n * @Last Modified time: 2018-12-27 09:39:10\r\n */\r\n\r\n\r\n/**\r\n * 路径类型\r\n */\r\nenum DataPathNodeType {\r\n\r\n  /**\r\n   * 标记该节点是一个实体主键值，用来在列表上定位一个实体\r\n   */\r\n  DataId   = 'DataId',\r\n\r\n  /**\r\n   * 标记该节点是一个属性名，用来在对象上定位一个属性\r\n   */\r\n  PropName = 'PropName',\r\n}\r\n\r\n\r\n/**\r\n * 路径节点\r\n */\r\nclass DataPathNode {\r\n\r\n  /**\r\n   * 上一节点\r\n   */\r\n  prev: DataPathNode;\r\n\r\n  /**\r\n   * 下一节点\r\n   */\r\n  next: DataPathNode;\r\n\r\n  /**\r\n   * 节点类型\r\n   */\r\n  type: DataPathNodeType;\r\n\r\n  /**\r\n   * 路径数据\r\n   * 对于List类型：  value是主键值，用于指明具体是哪一行；\r\n   * 对于Object类型：value是属性名，用于指明具体哪一属性。\r\n   */\r\n  value: any;\r\n\r\n  /**\r\n   * 构造函数\r\n   */\r\n  constructor(type: DataPathNodeType, data: any) {\r\n    this.type = type;\r\n    this.value = data;\r\n\r\n    this.prev = null;\r\n    this.next = null;\r\n  }\r\n}\r\n\r\n\r\nexport { DataPathNodeType, DataPathNode };\r\n","/*\r\n * @Author: Witt\r\n * @Date: 2018-12-27 09:26:41\r\n * @Last Modified by: Witt\r\n * @Last Modified time: 2019-01-15 22:00:45\r\n */\r\n\r\nimport { DataPathNode, DataPathNodeType } from './data_path_node';\r\n/**\r\n * 变更路径（简单双向列表）\r\n */\r\nclass DataPath {\r\n\r\n  /**\r\n   * 头节点\r\n   */\r\n  public head: DataPathNode;\r\n\r\n  /**\r\n   * 长度\r\n   */\r\n  public length: number;\r\n\r\n  /**\r\n   * 构造函数\r\n   */\r\n  constructor() {\r\n    this.head = new DataPathNode(null, null);\r\n    this.length = 0;\r\n  }\r\n\r\n  /**\r\n   * 添加一个节点到头部\r\n   */\r\n  public unshift(type: DataPathNodeType, data: any) {\r\n    const newNode = new DataPathNode(type, data);\r\n    newNode.next = this.head.next;\r\n    newNode.prev = this.head;\r\n\r\n    this.head.next = newNode;\r\n    if (newNode.next) {\r\n      newNode.next.prev = newNode;\r\n    }\r\n\r\n    this.length++;\r\n  }\r\n\r\n  /**\r\n   * 在链表最后追加一个节点\r\n   */\r\n  public push(type: DataPathNodeType, data: any) {\r\n    const tailNode = this.getTail();\r\n    const newNode = new DataPathNode(type, data);\r\n    tailNode.next = newNode;\r\n    this.length++;\r\n  }\r\n\r\n  /**\r\n   * 获取链表尾部节点\r\n   */\r\n  public getTail(): DataPathNode {\r\n    let lastNode = this.head;\r\n    while (lastNode.next) {\r\n      lastNode = lastNode.next;\r\n    }\r\n    return lastNode;\r\n  }\r\n\r\n  /**\r\n   * 转换为数组格式\r\n   */\r\n  public toArray() {\r\n    const pathArray = [];\r\n    let currentNode = this.head.next;\r\n    while (currentNode) {\r\n      pathArray.push(`${currentNode.type}:${currentNode.value}`) ;\r\n      currentNode = currentNode.next;\r\n    }\r\n    return pathArray;\r\n  }\r\n\r\n  /**\r\n   * 转换为字符串格式\r\n   */\r\n  public toString() {\r\n    const pathArray = this.toArray();\r\n    const pathString = pathArray.join(', ');\r\n    return `[${pathString}]`;\r\n  }\r\n\r\n  /**\r\n   * 拷贝\r\n   */\r\n  public clone(): DataPath {\r\n    const newDataPath = new DataPath();\r\n    let curDataNode = this.head.next;\r\n    while (curDataNode) {\r\n      newDataPath.push(curDataNode.type, curDataNode.value);\r\n      curDataNode = curDataNode.next;\r\n    }\r\n    return newDataPath;\r\n  }\r\n}\r\n\r\nexport { DataPath };\r\n","/*\r\n * @Author: Witt\r\n * @Date: 2019-08-14 14:11:51\r\n * @Last Modified by: Witt\r\n * @Last Modified time: 2019-08-14 16:11:51\r\n */\r\n\r\nimport { DataTypeInfo } from './data_type_info';\r\n\r\n\r\n/**\r\n * 实体属性分组\r\n */\r\nenum DataPropGroup {\r\n\r\n  /**\r\n   * 简单类型\r\n   */\r\n  Primitive = 'Primitive',\r\n\r\n  /**\r\n   * 实体类型\r\n   */\r\n  Object = 'Object',\r\n\r\n  /**\r\n   * 动态实体类型\r\n   */\r\n  Dynamic = 'Dynamic',\r\n\r\n  /**\r\n   * 列表类型\r\n   */\r\n  List = 'List'\r\n\r\n}\r\n\r\n\r\n/**\r\n * 实体属性信息\r\n */\r\nclass DataPropInfo {\r\n\r\n  /**\r\n   * 属性类型\r\n   */\r\n  public group: DataPropGroup;\r\n\r\n  /**\r\n   * 属性名称\r\n   */\r\n  public name: string;\r\n\r\n  /**\r\n   * 影射名称\r\n   */\r\n  public mapping: string;\r\n\r\n  /**\r\n   * 属性类型描述\r\n   */\r\n  public typeInfo: DataTypeInfo;\r\n\r\n  /**\r\n   * 元数据信息\r\n   * @todo\r\n   * 1、EntityPropInfo不应该认识元数据描述，不能强识别元数据上的属性；\r\n   * 2、将来元数据可能有多套，每一套有自己的解析 元数据解析框架还没有做，所以临时处理，不对暴露\r\n   */\r\n  public metadataInfo?: any;\r\n}\r\n\r\nexport {DataPropGroup, DataPropInfo };\r\n","import 'reflect-metadata';\r\nimport { makePropDecorator } from '../../core/index';\r\nimport { ClassType } from '../types';\r\nimport { PropMetadata } from './prop_meatadata';\r\n\r\n/**\r\n * 简单属性元数据\r\n */\r\nexport interface PrimitivePropMetadata extends PropMetadata {\r\n\r\n  /**\r\n   * 属性名称\r\n   */\r\n  property?: string;\r\n\r\n  /**\r\n   * 字段名称\r\n   */\r\n  dataField?: string;\r\n\r\n  /**\r\n   * 原始字段名称\r\n   */\r\n  originalDataField?: string;\r\n\r\n  /**\r\n   * 原始字段类型\r\n   */\r\n  originalDataFieldType?: string;\r\n\r\n  /**\r\n   * 是否为主键\r\n   */\r\n  primary?: boolean;\r\n\r\n  /**\r\n   * 是否为外键\r\n   */\r\n  foreign?: boolean;\r\n\r\n  /**\r\n   * 默认值\r\n   */\r\n  defaultValue?: any;\r\n\r\n  /**\r\n   * 验证规则\r\n   */\r\n  validRules?: any[];\r\n\r\n  /**\r\n   * 初始值，用于字段清空后\r\n   */\r\n  initValue?: any;\r\n\r\n  /**\r\n   * 启用多语录入\r\n   */\r\n  enableMultiLangInput?: boolean;\r\n}\r\n\r\n\r\n/**\r\n * 元数据名称\r\n */\r\nexport const PRIMITIVE_PROP_META = 'PrimitivePropMeta';\r\n\r\n\r\n/**\r\n * 【简单属性装饰器工厂】接口\r\n * @summary\r\n * 类型可以为：NgFieldProperty、string、ClassType\r\n * 当为string 时，则设其映射字段；\r\n * 当为ClassType时，则设置集合中的记录类型\r\n */\r\nexport interface PrimitivePropMetaDecorator {\r\n\r\n  (obj: PrimitivePropMetadata | string | ClassType): any;\r\n\r\n  (obj?: PrimitivePropMetadata | string | boolean): any;\r\n\r\n  new(obj?: PrimitivePropMetadata | string | boolean): any;\r\n}\r\n\r\n\r\n/**\r\n * 【简单属性装饰器工厂】的工厂\r\n */\r\nfunction makePrimitivePropMetaDecorator(options?: PrimitivePropMetadata | string | boolean): any {\r\n\r\n  let metadata: PrimitivePropMetadata = {\r\n    primary: false,\r\n    foreign: false\r\n  };\r\n\r\n  if (options) {\r\n    const paramType = typeof options;\r\n    switch (paramType) {\r\n      case 'boolean':\r\n        metadata.primary = Boolean(options);\r\n        break;\r\n      case 'string':\r\n        metadata.dataField = String(options);\r\n        break;\r\n      case 'object':\r\n        metadata = Object.assign(metadata, options);\r\n        break;\r\n    }\r\n  }\r\n  return metadata;\r\n}\r\n\r\n\r\n/**\r\n * 简单属性装饰器工厂\r\n */\r\nexport const PrimitivePropMeta: PrimitivePropMetaDecorator = makePropDecorator(PRIMITIVE_PROP_META, makePrimitivePropMetaDecorator);\r\n","class StringUtil {\r\n\r\n  /**\r\n     * 字符串格式化\r\n     */\r\n  public static format(value, options) {\r\n    return value.toString();\r\n  }\r\n\r\n\r\n}\r\n\r\nexport { StringUtil };\r\n","class NumberUtil {\r\n\r\n  /**\r\n     * 数字格式化\r\n     * {\r\n     *   precision: 2,\r\n     *   decimal: true,\r\n     *   thousand: ','\r\n     *   prefix: '',\r\n     *   suffix: ''\r\n     * }\r\n     */\r\n  public static format(value, options) {\r\n\r\n    // 参数处理\r\n    let decimals = (options.precision || options.precision === 0) ? options.precision : 2;\r\n    let decimalPoint = options.decimal || '.';\r\n    let thousandsSep = options.thousand || '';\r\n    let prefix = options.prefix || '';\r\n    let suffix = options.suffix || '';\r\n\r\n    let prefixType = options.prefixType;\r\n    if (prefixType == \"dynamic\" && options.prefix) {\r\n      // 表示前缀为一个函数  那么执行函数定义\r\n      let prefixFunc = new Function(\"return \" + options.prefix);\r\n      prefix = prefixFunc()(options.sourceData);\r\n    }\r\n\r\n    value = (value + '').replace(/[^0-9+-Ee.]/g, '');\r\n    let s;\r\n\r\n    // 处理精度\r\n    let toFixedFix = function (n, prec) {\r\n      var k = Math.pow(10, prec);\r\n      return '' + parseFloat(Math.round(parseFloat((n * k).toFixed(prec * 2))).toFixed(prec * 2)) / k;\r\n    };\r\n    s = ((decimals || decimals === 0) ? toFixedFix(value, decimals) : '' + Math.round(value)).split('.');\r\n\r\n    // 处理千分位\r\n    if (thousandsSep) {\r\n      let pattern = /(-?\\d+)(\\d{3})/;\r\n      while (pattern.test(s[0])) {\r\n        s[0] = s[0].replace(pattern, \"$1\" + thousandsSep + \"$2\");\r\n      }\r\n      if ((s[1] || '').length < decimals) {\r\n        s[1] = s[1] || '';\r\n        s[1] += new Array(decimals - s[1].length + 1).join('0');\r\n      }\r\n    }\r\n\r\n    let formatedValue = s.join(decimalPoint);\r\n    formatedValue = `${prefix}${formatedValue}${suffix}`;\r\n    return formatedValue;\r\n  }\r\n\r\n}\r\n\r\nexport { NumberUtil };","/**\r\n * 布尔工具类\r\n */\r\nclass BoolUtil {\r\n  \r\n  /**\r\n   * 布尔值格式化\r\n  */\r\n  public static  format(value, options) {\r\n    if (value === true) {\r\n      return '是';\r\n    } else {\r\n      return '否';\r\n    }\r\n  }\r\n}\r\n\r\nexport { BoolUtil };\r\n\r\n\r\n","class EnumUtil {\r\n\r\n  /**\r\n   * 枚举格式化\r\n   * {\r\n   *  enumData: [\r\n   *    {value: 'value1', name: 'name1'},\r\n   *    {value: 'value2', name: 'name2'}\r\n   *  ]\r\n   * }\r\n   */\r\n  static format(value, options) {\r\n    const enumOptions = options.enumData;\r\n    const targetEnumOption = enumOptions.find((enumOption) => {\r\n      return enumOption.value === value;\r\n    });\r\n\r\n    if (!targetEnumOption) {\r\n      console.error(`找不到${value}对应的枚举选项`);\r\n      return value;\r\n    }\r\n\r\n    return targetEnumOption.name;\r\n  }\r\n}\r\n\r\nexport { EnumUtil };\r\n\r\n","import { format, isDate, parseISO, isEqual, compareAsc } from 'date-fns';\r\nimport dayjs from 'dayjs';\r\nimport IsBetween from 'dayjs/plugin/IsBetween';\r\nimport relativeTime from 'dayjs/plugin/relativeTime';\r\nimport Calendar from 'dayjs/plugin/calendar';\r\nimport 'dayjs/locale/zh-cn';\r\ndayjs.locale('zh-cn');\r\n/**\r\n * 日期处理类\r\n */\r\nclass DateUtil {\r\n\r\n  /**\r\n   * 空日期字符串（N版）\r\n   * @todo：兼容服务器端，不应该在devkit体现这种兼容，待移除\r\n   */\r\n  // static emptyDateTimeString = '0001-01-01T00:00:00';\r\n  static emptyDateTimeString = null;\r\n\r\n  /**\r\n   * 默认空日期字符串（ISO标准格式）\r\n   */\r\n  // static emptyISODateTimeString = '0001-01-01T00:00:00+00:00';\r\n  static emptyISODateTimeString = null;\r\n\r\n  /**\r\n   * 默认日期听格式\r\n   */\r\n  static defaultISOFormat = `yyyy-MM-dd'T'HH:mm:ssxxx`;\r\n\r\n  static defaultDisplayFormat = 'yyyy-MM-dd HH:mm:ss';\r\n\r\n  static defaultDateFormat = 'yyyy-MM-dd';\r\n\r\n  static defaultTimeFormat = 'HH:mm:ss';\r\n\r\n  /**\r\n   * 将日期（或日期字符串）转换为完整的的ISO格式的字符串\r\n   */\r\n  static formatISO(dateOrDateString: string | Date): string {\r\n    if (this.isEmptyDateOrDateString(dateOrDateString) === true) {\r\n      return this.emptyISODateTimeString;\r\n    }\r\n    const dateObj = this.parse(dateOrDateString);\r\n    return format(dateObj, this.defaultISOFormat);\r\n  }\r\n\r\n  /**\r\n   * 将日期（或日期字符串）转换为指定格式的字符串\r\n   * @param dateOrDateString 日期对象或符合ISO8601规范的日期字符串\r\n   * @param dateFormat 日期格式字符串\r\n   */\r\n  static format(dateOrDateString: string | Date, dateFormat?: string): string {\r\n    if (this.isEmptyDateOrDateString(dateOrDateString) === true) {\r\n      return this.emptyISODateTimeString;\r\n    }\r\n    const dateObj = this.parse(dateOrDateString);\r\n    dateFormat = dateFormat ? dateFormat : this.defaultDisplayFormat;\r\n    return format(dateObj, dateFormat);\r\n  }\r\n\r\n  static dateShow(dateOrDateString: string | Date, type: string) {\r\n    if (this.isEmptyDateOrDateString(dateOrDateString) === true) {\r\n      return this.emptyISODateTimeString;\r\n    }\r\n    if (!type || \"\" === type) {\r\n      return;\r\n    }\r\n    return this[type] && this[type](dateOrDateString)\r\n  }\r\n\r\n  static dateOperation(dateOrDateString: string | Date, options) {\r\n    if (this.isEmptyDateOrDateString(dateOrDateString) === true) {\r\n      return this.emptyISODateTimeString;\r\n    }\r\n    const { type = \"\", option } = options;\r\n    if (!type || \"\" === type) {\r\n      return;\r\n    }\r\n    if ('isSame' === type) {\r\n      return this[type] && this[type](dateOrDateString, options['targetDate'], options['granularity'])\r\n    }\r\n    if ('isBefore' === type) {\r\n      return this[type] && this[type](dateOrDateString, options['targetDate'], options['granularity'])\r\n    }\r\n    if ('isAfter' === type) {\r\n      return this[type] && this[type](dateOrDateString, options['targetDate'], options['granularity'])\r\n    }\r\n    if ('isBetween' === type ) {\r\n      return this[type] && this[type](dateOrDateString, options['targetDate'], options['targetDate2'], options['granularity'], options['contains'])\r\n    }\r\n    if (!option) {\r\n      return this[type] && this[type](dateOrDateString)\r\n    }\r\n    return this[type] && this[type](dateOrDateString, option)\r\n  }\r\n\r\n\r\n\r\n  static relativeTime(dateOrDateString: string | Date, option) {\r\n    dayjs.extend(relativeTime)\r\n    const dateObj = dayjs(dateOrDateString);\r\n    if (!option) {\r\n      return dayjs(dateObj).fromNow()\r\n    }\r\n    return dayjs(dateObj).fromNow(option)\r\n  }\r\n\r\n  static isToday(dateOrDateString: string | Date) {\r\n    const todayDate = new Date();\r\n    const dateObj = dayjs(dateOrDateString);\r\n    return this.isSame(dateObj, todayDate, 'date');\r\n  }\r\n\r\n  static calendar(dateOrDateString: string | Date, option) {\r\n    const dateObj = dayjs(dateOrDateString);\r\n    dayjs.extend(Calendar)\r\n    if (option) {\r\n      return dayjs().calendar(dateObj, { ...option })\r\n    }\r\n    return dayjs().calendar(dateObj, {\r\n      sameDay: '[今天] HH:mm',\r\n      nextDay: '[明天] HH:mm',\r\n      lastDay: '[昨天] HH:mm',\r\n      sameElse: 'YYYY-MM-DD'\r\n    })\r\n  }\r\n\r\n\r\n  /**\r\n   * 创建日期\r\n   * @param dateOrDateString 日期对象或符合ISO8601规范的日期字符串\r\n   */\r\n  static parse(dateOrDateString: string | Date): Date {\r\n    if (this.isEmptyDateOrDateString(dateOrDateString) === true) {\r\n      return null;\r\n    }\r\n\r\n    if (this.isDate(dateOrDateString) === true) {\r\n      return dateOrDateString as Date;\r\n    }\r\n\r\n    return parseISO(dateOrDateString as string);\r\n  }\r\n\r\n  /**\r\n   * 是否是日期对象\r\n   */\r\n  static isDate(date: any): boolean {\r\n    return isDate(date);\r\n  }\r\n\r\n  /**\r\n   * 是否是空日期或者空日期字符串\r\n   * @param dateOrDateString 日期或日期字符串\r\n   */\r\n  static isEmptyDateOrDateString(dateOrDateString: string | Date) {\r\n    if (this.isDate(dateOrDateString) === true) {\r\n      return this.isEmptyDate(dateOrDateString as Date);\r\n    }\r\n    return this.isEmptyDateString(dateOrDateString as string);\r\n  }\r\n\r\n  /**\r\n   * 是否为空日期字符串\r\n   * @param date 日期对象\r\n   */\r\n  static isEmptyDate(date: Date) {\r\n    if (!date) {\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * 是否是空日期字符串\r\n   * @param dateString 日期字符串\r\n   */\r\n  static isEmptyDateString(dateString: string) {\r\n    if (!dateString || dateString.startsWith('0001-01-01') === true) {\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * 两个日期是否相等\r\n   * @param dateOrDateString1 日期对象或字符串\r\n   * @param dateOrDateString1 日期对象或字符串\r\n   * @return 相等返回true，否则返回false\r\n   */\r\n  static isEqual(dateOrDateString1: string | Date, dateOrDateString2: string | Date): boolean {\r\n    const dateObj1 = this.parse(dateOrDateString1);\r\n    const dateObj2 = this.parse(dateOrDateString2);\r\n    if (dateObj1 === dateObj2) {\r\n      return true;\r\n    }\r\n    return isEqual(dateObj1, dateObj2);\r\n  }\r\n\r\n  /**\r\n   * 两个日期是否相等\r\n   * @param dateOrDateString1 日期对象或字符串\r\n   * @param dateOrDateString1 日期对象或字符串\r\n   * @return 返回-1、0、1\r\n   */\r\n  static compare(dateOrDateString1: string | Date, dateOrDateString2: string | Date) {\r\n    const dateObj1 = this.parse(dateOrDateString1);\r\n    const dateObj2 = this.parse(dateOrDateString2);\r\n    if (this.isEqual(dateObj1, dateObj2) === true) {\r\n      return 0;\r\n    }\r\n\r\n    // 处理解析后为null的场景，null比所有有效日期小\r\n    if (!dateObj1 && this.isDate(dateObj2) === true) {\r\n      return -1;\r\n    }\r\n    if (!dateObj2 && this.isDate(dateObj1) === true) {\r\n      return 1;\r\n    }\r\n\r\n    return compareAsc(dateObj1, dateObj2);\r\n  }\r\n\r\n\r\n  /**\r\n   * \r\n   * @param currentDate 当前日期\r\n   * @param targetDate 目标日期\r\n   * @param type 比较类型 date\tD\t天00:00 day\td\t星期00:00 month\tM\t月第一天00:00 year\ty\t1月1日00点 week\tw\t周第一天00:00hour\th\t00:00:00minute\tm\t00:00second\ts\t00millisecond\tms\t0\r\n   * @returns \r\n   */\r\n  static isSame(currentDate, targetDate, type?) {\r\n    if (type) {\r\n      return dayjs(currentDate).isSame(dayjs(targetDate), type)\r\n    }\r\n    return dayjs(currentDate).isSame(dayjs(targetDate));\r\n  }\r\n\r\n  /**\r\n   * \r\n   * @param currentDate 当前日期\r\n   * @param targetDate 目标日期\r\n   * @returns boolean\r\n   */\r\n  static isBefore(currentDate, targetDate, type?) {\r\n    if (type) {\r\n      return dayjs(currentDate).isBefore(dayjs(targetDate), type)\r\n    }\r\n    return dayjs(currentDate).isBefore(dayjs(targetDate));\r\n  }\r\n\r\n  /**\r\n * \r\n * @param currentDate 当前日期\r\n * @param targetDate 目标日期\r\n * @returns boolean\r\n */\r\n  static isAfter(currentDate, targetDate, type?) {\r\n    if (type) {\r\n      return dayjs(currentDate).isAfter(dayjs(targetDate), type)\r\n    }\r\n    return dayjs(currentDate).isAfter(dayjs(targetDate));\r\n  }\r\n\r\n\r\n  /**\r\n   * \r\n   * @param currentDate \r\n   * @param targetDate1 \r\n   * @param targetDate2 \r\n   * @returns \r\n   */\r\n  static isBetween(currentDate, targetDate1, targetDate2, type, contains) {\r\n    dayjs.extend(IsBetween)\r\n    if (type) {\r\n      return dayjs(currentDate).isBetween(dayjs(targetDate1), dayjs(targetDate2), type, contains);\r\n    }\r\n    return dayjs(currentDate).isBetween(dayjs(targetDate1), dayjs(targetDate2), null, contains);\r\n  }\r\n}\r\n\r\nexport { DateUtil };\r\n\r\n","class ArrayUtil {\r\n\r\n  /**\r\n   * 从数组中删除一项\r\n   */\r\n  public static remove(arr: any[], itemToRemove: any): void {\r\n    const indexToRemove = arr.findIndex((item: any) => {\r\n      return item === itemToRemove;\r\n    });\r\n    this.removeByIndex(arr, indexToRemove);\r\n  }\r\n  \r\n  /**\r\n   * 从数组中删除indexToRemove对应的项\r\n   * @param index \r\n   */\r\n  public static removeByIndex(arr: any[], indexToRemove: number) {\r\n    if (!arr || arr[indexToRemove] !== undefined) {\r\n      \r\n    }\r\n    arr.splice(indexToRemove, 1);\r\n  }\r\n\r\n\r\n}\r\n\r\nexport { ArrayUtil };","class ObjectUtil {\r\n\r\n  /**\r\n   * 检查是否是简单对象\r\n   */\r\n  public static isPlainObject(value): boolean {\r\n    if (!(typeof value === 'object' && value !== null) || Object.prototype.toString.call({}) !== '[object Object]') {\r\n      return false;\r\n    }\r\n    if (Object.getPrototypeOf(value) === null) {\r\n      return true;\r\n    }\r\n    let proto = value;\r\n    while (Object.getPrototypeOf(proto) !== null) {\r\n      proto = Object.getPrototypeOf(proto);\r\n    }\r\n    return Object.getPrototypeOf(value) === proto;\r\n  }\r\n}\r\n\r\nexport { ObjectUtil };\r\n","/**\r\n * 数据路径处理\r\n */\r\nclass BindingPathConverter {\r\n\r\n  /**\r\n   * (BindingPathString | BindingPathArray) => BindingPathArray\r\n   * @param bindingPath BindingPath的字符串或者数组格式\r\n   * @return BindingPath数组\r\n   */\r\n  public static toBindingPathArray(bindingPath: string | string[]): string[] {\r\n    let bindingPathArray: string[];\r\n    if (typeof bindingPath === 'string') {\r\n      bindingPathArray = bindingPath.split('/').filter((part: string) => {\r\n        return part !== '';\r\n      });\r\n      return bindingPathArray;\r\n    } else {\r\n      bindingPathArray = bindingPath.concat([]);\r\n    }\r\n\r\n    return bindingPathArray;\r\n  }\r\n\r\n  /**\r\n   * BindingPathArray => BindingPathString\r\n   */\r\n  public static toBindingPathString(bindingPathArray: string[]): string {\r\n    return '/' + bindingPathArray.join('/');\r\n  }\r\n}\r\n\r\nexport { BindingPathConverter };\r\n","import { BindingPathConverter } from './binding_path_converter';\r\n\r\n/**\r\n * BindingPath比较器\r\n */\r\nclass BindingPathComparer {\r\n\r\n  /**\r\n   * 是否相等\r\n   */\r\n  public static isEqual(srcPath: string | string[], dstPath: string | string[]) {\r\n    const srcPathArray = BindingPathConverter.toBindingPathArray(srcPath);\r\n    const dstPathArray = BindingPathConverter.toBindingPathArray(dstPath);\r\n\r\n    const isEqual = srcPathArray.every((srcPathItem: string, srcPathIndex: number) => {\r\n      return srcPathItem === dstPathArray[srcPathIndex];\r\n    });\r\n\r\n    return isEqual;\r\n  }\r\n\r\n  /**\r\n   * 是否是父路径\r\n   */\r\n  public static isParent(childPath: string | string[], parentPath: string | string[]): boolean {\r\n\r\n    const childPathArray  = BindingPathConverter.toBindingPathArray(childPath);\r\n    const parentPathArray = BindingPathConverter.toBindingPathArray(parentPath);\r\n\r\n    // 长度差1个\r\n    if (childPathArray.length !== parentPathArray.length + 1) {\r\n      return;\r\n    }\r\n\r\n    return this.isAncestor(childPath, parentPath);\r\n  }\r\n\r\n  /**\r\n   * 是否是祖先路径\r\n   */\r\n  public static isAncestor(descendantPath: string | string[], ancestorPath: string | string[]): boolean {\r\n    const descendantPathArray = BindingPathConverter.toBindingPathArray(descendantPath);\r\n    const ancestorPathArray   = BindingPathConverter.toBindingPathArray(ancestorPath);\r\n\r\n    if (descendantPath.length <= ancestorPathArray.length) {\r\n      return false;\r\n    }\r\n\r\n    const isAncestor = ancestorPathArray.every((ancestorPathItem: string, ancestorPathIndex: number) => {\r\n      return ancestorPathItem === descendantPathArray[ancestorPathIndex];\r\n    });\r\n\r\n    return isAncestor;\r\n  }\r\n\r\n}\r\n\r\nexport { BindingPathComparer };\r\n","import { BindingPathConverter } from './binding_path_converter';\r\n\r\n/**\r\n * BindingPath遍历器\r\n */\r\nclass BindingPathTraverser {\r\n\r\n  /**\r\n   * 获取叶子节点的Path\r\n   */\r\n  public static getLeafPathString(bindingPath: string | string[]): string {\r\n    const bindingPathArray = BindingPathConverter.toBindingPathArray(bindingPath);\r\n    return bindingPathArray.pop();\r\n  }\r\n\r\n  /**\r\n   * 获取父路径\r\n   */\r\n  public static getParentPathString(bindingPath: string | string[]): string {\r\n    const bindingPathArray = BindingPathConverter.toBindingPathArray(bindingPath);\r\n    bindingPathArray.pop();\r\n    return '/' + bindingPathArray.join('/');\r\n  }\r\n}\r\n\r\nexport { BindingPathTraverser };\r\n","/**\r\n * 变更相关定义\r\n * @author Witt<jiwt@inspur.com>\r\n */\r\n\r\n/**\r\n * 绑定数据变更\r\n */\r\nexport interface Change {\r\n\r\n  /**\r\n   * 变更类型\r\n   */\r\n  type: ChangeType;\r\n\r\n  /**\r\n   * 变更路径\r\n   */\r\n  path: string[];\r\n\r\n  /**\r\n   * 变更后的值\r\n   */\r\n  value?: any;\r\n\r\n  /**\r\n   * 变更前的值\r\n   */\r\n  preValue?: any;\r\n\r\n  /**\r\n   * 错误信息\r\n   */\r\n  errors?: any;\r\n\r\n  /**\r\n   * 验证后回调，会将验证结果传入\r\n   */\r\n  cb?: Function;\r\n\r\n  /**\r\n   * 是否提交过，为true时开启输入时验证\r\n   */\r\n  isSubmitted?: boolean;\r\n\r\n  /**\r\n   * 在grid中使用，如果存在id，则将errors在form中以\r\n   * {\r\n   *  [id]: errors\r\n   * }\r\n   * 的形式保存一份\r\n   */\r\n  id?: string;\r\n\r\n  isUdt?: boolean;\r\n\r\n  isGrid?: boolean;\r\n}\r\n\r\n/**\r\n * 绑定数据变更类型\r\n */\r\nexport enum ChangeType {\r\n  Load = 'Load',\r\n  Append = 'Append',\r\n  Remove = 'Remove',\r\n  SelectionChanged = 'SelectionChanged',\r\n  ValueChanged = 'ValueChanged',\r\n  UpdateErrors = 'UpdateErrors',\r\n  GlobalSelectionChanged = 'GlobalSelectionChanged',\r\n  /**\r\n   * 分页信息变化\r\n   */\r\n  PaginationInfoChange = 'PaginationInfoChange',\r\n}\r\n\r\n/**\r\n * 视图变更\r\n */\r\nexport interface ViewChange {\r\n  type: ViewChangeType;\r\n  path: string[];\r\n  value: any;\r\n  preValue?: any;\r\n}\r\n\r\n/**\r\n * 视图变更类型\r\n */\r\nexport enum ViewChangeType {\r\n  ValueChanged\r\n}\r\n\r\n/**\r\n * Form值变化事件\r\n */\r\nexport interface FormValueChange {\r\n  path: string[]; // 字段路径\r\n  value: any; // 新值\r\n  preValue?: any; // 旧值\r\n  command: string; // 监听命令\r\n  entityChanged: boolean; // 实体是否已改变\r\n}\r\n\r\n/**\r\n * 实体值变化事件\r\n */\r\nexport interface EntityValueChange {\r\n  paths: string[]; // 字段路径\r\n  value: any; // 新值\r\n  preValue?: any; // 旧值\r\n  changed: boolean; // 实体是否已改变\r\n}","/**\r\n * 绑定属性相关定义\r\n * @author Witt<jiwt@inspur.com>\r\n */\r\n\r\n/**\r\n * 属性类型\r\n */\r\nexport enum BindingPropertyType {\r\n\r\n  /**\r\n   * 简单类型\r\n   */\r\n  Plain  = 'Plain',\r\n\r\n  /**\r\n   * 对象类型\r\n   */\r\n  Object = 'Object',\r\n\r\n  /**\r\n   * 列表类型\r\n   */\r\n  List   = 'List',\r\n\r\n  /**\r\n   * 动态类型\r\n   */\r\n  Dynamic = 'Dynamic'\r\n}\r\n\r\n\r\n/**\r\n * 绑定属性\r\n */\r\nexport interface BindingProperty {\r\n\r\n  /**\r\n   * 属性名称\r\n   */\r\n  name: string;\r\n\r\n  /**\r\n   * 属性类型\r\n   */\r\n  type: BindingPropertyType;\r\n\r\n  /**\r\n   * 对应实体类型，当属性类型为Object、List类型时，设置该属性。\r\n   */\r\n  entityType?: any;\r\n\r\n  /**\r\n   * 是否为主键\r\n   */\r\n  isPrimaryKey?: boolean;\r\n\r\n  /**\r\n   * 启用多语录入\r\n   */\r\n  enableMultiLangInput?: boolean;\r\n\r\n}\r\n","import {Type} from '../core/index';\r\nimport { Entity, FieldMetadataUtil } from '../entity/index';\r\nimport { BindingProperty, BindingPropertyType } from './binding_property';\r\n\r\n/**\r\n * 属性工具类\r\n */\r\nclass PropertyUtil {\r\n\r\n  /**\r\n   * 获取实体上的属性集合，并将他们转换成BindingProperty集合\r\n   * @param  entityType 实体类型\r\n   * @returns 绑定属性集合\r\n   */\r\n  static getProperties(entityType: Type<Entity>): BindingProperty[] {\r\n    const properties = [];\r\n\r\n    // Plain\r\n    const ngFieldProperties = FieldMetadataUtil.getNgFields(entityType);\r\n    Object.keys(ngFieldProperties).forEach((propertyName: string) => {\r\n      const ngFieldProperty = ngFieldProperties[propertyName];\r\n      properties.push({\r\n        name: propertyName,\r\n        type: BindingPropertyType.Plain,\r\n        isPrimaryKey: ngFieldProperty.primary,\r\n        isForeignKey: ngFieldProperty.foreign,\r\n        enableMultiLangInput: ngFieldProperty.enableMultiLangInput\r\n      });\r\n    });\r\n\r\n    // Object\r\n    const ngObjectProperties = FieldMetadataUtil.getNgObjects(entityType);\r\n    Object.keys(ngObjectProperties).forEach((propertyName: string) => {\r\n      const ngObjectProperty = ngObjectProperties[propertyName];\r\n      properties.push({\r\n        name: propertyName,\r\n        type: BindingPropertyType.Object,\r\n        entityType: ngObjectProperty.type\r\n      });\r\n    });\r\n\r\n    // List\r\n    const ngListProperties = FieldMetadataUtil.getNgList(entityType);\r\n    Object.keys(ngListProperties).forEach((propertyName: string) => {\r\n      const ngListProperty = ngListProperties[propertyName];\r\n      properties.push({\r\n        name: propertyName,\r\n        type: BindingPropertyType.List,\r\n        entityType: ngListProperty.type\r\n      });\r\n    });\r\n\r\n    // Dynamics\r\n    const ngDynamicProperties = FieldMetadataUtil.getNgDynamic(entityType);\r\n    Object.keys(ngDynamicProperties).forEach((propertyName: string) => {\r\n      const ngDynamicProperty = ngDynamicProperties[propertyName];\r\n      properties.push({\r\n        name: propertyName,\r\n        type: BindingPropertyType.Dynamic,\r\n        entityType: ngDynamicProperty.type\r\n      });\r\n    });\r\n\r\n    return properties;\r\n  }\r\n\r\n  static getDynamicProperties(dynamicData: any): BindingProperty[] {\r\n    const properties = [];\r\n    Object.keys(dynamicData).forEach((propertyName: string) => {\r\n      if (dynamicData.hasOwnProperty(propertyName)) {\r\n        if (dynamicData[propertyName] instanceof Object) {\r\n          properties.push({\r\n            name: propertyName,\r\n            type: BindingPropertyType.Dynamic,\r\n            entityType: null\r\n          });\r\n        } else {\r\n          properties.push({\r\n            name: propertyName,\r\n            type: BindingPropertyType.Plain,\r\n            isPrimaryKey: false,\r\n            isForeignKey: false\r\n          });\r\n        }\r\n      }\r\n    });\r\n    return properties;\r\n  }\r\n  /**\r\n   * 根据属性名获取属性\r\n   */\r\n  static getPropertyByName(properties: BindingProperty[], propertyName: string): BindingProperty {\r\n    const targetProperty =  properties.find((property: BindingProperty) => {\r\n      return property.name === propertyName;\r\n    });\r\n    return targetProperty;\r\n  }\r\n\r\n  /**\r\n   * 获取实体主键名\r\n   * @param properties 属性集合\r\n   * @returns 主键名\r\n   */\r\n  static getPrimaryKey(properties: BindingProperty[]): string {\r\n\r\n    // 实体必须有主键，如果没有主键在构造实体的时候就已经报错，这里不需要再进行检查\r\n    const primaryProperty = properties.find((property: BindingProperty) => {\r\n      return property.isPrimaryKey === true;\r\n    });\r\n    return primaryProperty ? primaryProperty.name : '';\r\n  }\r\n\r\n}\r\n\r\nexport { PropertyUtil };\r\n","/**\r\n * BindingObject相关定义\r\n * @author Witt<jiwt@inspur.com>\r\n */\r\n\r\nimport { Subject, Observable, of } from 'rxjs';\r\n\r\nimport { Change, ChangeType, ViewChange, ViewChangeType } from './changes';\r\nimport { BindingProperty, BindingPropertyType } from './binding_property';\r\nimport { BindingList } from './binding_list';\r\nimport { PropertyUtil } from './property_util';\r\n\r\ninterface InvokeOnValueChange {\r\n  (preValue, value, entityChanged: boolean): Observable<boolean>;\r\n}\r\n\r\n/**\r\n * BindingObject是Entity在绑定层的一个影射，它将Entity内的数据转换为不可变对象，并用于界面绑定。\r\n */\r\nclass BindingObject {\r\n\r\n  /**\r\n   * immutable值对象\r\n   */\r\n  private innerValues: Map<string, any>;\r\n\r\n  /**\r\n   * 父对象或父列表\r\n   */\r\n  public parent: BindingList | BindingObject;\r\n\r\n  /**\r\n   * 实体引起的变更\r\n   */\r\n  public changes: Subject<Change>;\r\n\r\n  /**\r\n   * 界面层引起的变更流\r\n   */\r\n  public viewChanges: Subject<ViewChange>;\r\n\r\n  /**\r\n   *  属性集合\r\n   */\r\n  public properties: BindingProperty[];\r\n\r\n  /**\r\n   * 主键名\r\n   */\r\n  public primaryKey: string;\r\n\r\n  /**\r\n   * 主键值\r\n   */\r\n  public get primaryKeyValue() {\r\n    return this.primaryKey ? this.getValue(this.primaryKey) : '';\r\n  }\r\n\r\n  /**\r\n   * 标识是否提交过\r\n   */\r\n  public isShowValidationMsg = false;\r\n\r\n  /**\r\n   * 以{ [propertyName]: FormControl }的形式存放每条数据的control\r\n   */\r\n  public controlMap: any = {};\r\n\r\n  /**\r\n   * 设置是否提交过\r\n   */\r\n  public setShowValidationMsg(flag: boolean) {\r\n    this.isShowValidationMsg = flag;\r\n  }\r\n\r\n\r\n  /**\r\n   * 构造函数\r\n   * @param properties 属性集合\r\n   */\r\n  constructor(properties: BindingProperty[]) {\r\n    this.properties = properties;\r\n    this.primaryKey = PropertyUtil.getPrimaryKey(properties);\r\n\r\n    this.innerValues = new Map<string, any>();\r\n    this.changes = new Subject<Change>();\r\n    this.viewChanges = new Subject<ViewChange>();\r\n  }\r\n\r\n  /**\r\n   * 根据属性名获取属性值\r\n   * @param   propertyName 属性名\r\n   * @returns 属性值\r\n   */\r\n  public getValue(propertyName: string): any {\r\n    return this.innerValues.get(propertyName);\r\n  }\r\n\r\n  /**\r\n   * 设置属性值\r\n   * @param propertyName        属性名\r\n   * @param propertyValue       属性值\r\n   * @param emitEventToView     是否通知View层去更新界面，默认为false\r\n   * @param emitEventToEntity   是否通知Entity层去更新值，默认为false\r\n   * @param errors              错误消息\r\n   * @param invokeOnValueChange 值变化事件执行句柄\r\n   */\r\n  public setValue(\r\n    propertyName: string, propertyValue: any,\r\n    emitEventToView: boolean = false, emitEventToEntity: boolean = false,\r\n    errors?: any, invokeOnValueChange?: InvokeOnValueChange\r\n  ): void {\r\n\r\n    const oldPropertyValue = this.getValue(propertyName);\r\n\r\n    // 由于特定原因（@邵珠强），无法屏蔽oldPropertyValue === propertyValue\r\n    if (oldPropertyValue === propertyValue) {\r\n      return;\r\n    }\r\n\r\n    if (!invokeOnValueChange || oldPropertyValue === propertyValue) {\r\n      // 设定缺省\r\n      invokeOnValueChange = function (preValue, value, entityChanged: boolean) {\r\n        return of(true);\r\n      };\r\n    }\r\n\r\n    if (emitEventToEntity === true) {\r\n      // BUG 322301，删除@2019.08.10; 如果无对应实体，则中止值传递; 这种情况发生在带从表的单据新增，从表响应Load变化的情况；\r\n      // if(!this.innerValues.has(propertyName)) {\r\n      //   return;\r\n      // }\r\n      // 执行实体值变化前事件\r\n      invokeOnValueChange(oldPropertyValue, propertyValue, false).subscribe((result) => {\r\n        if (result) {\r\n          // 如果成功，执行变化，并通知实体变化\r\n          this.innerValues = this.innerValues.set(propertyName, propertyValue);\r\n          const viewChange = {\r\n            type: ViewChangeType.ValueChanged,\r\n            path: [propertyName],\r\n            value: propertyValue,\r\n            errors: errors\r\n          };\r\n          this.viewChanges.next(viewChange);\r\n          // 如果需要通知视图，通知视图相应修改\r\n          if (emitEventToView === true) {\r\n            this.changes.next({\r\n              type: ChangeType.ValueChanged,\r\n              path: [propertyName],\r\n              value: propertyValue,\r\n              id: this.primaryKeyValue,\r\n              errors: errors\r\n            });\r\n          }\r\n          // 执行实体值变化后事件\r\n          invokeOnValueChange(oldPropertyValue, propertyValue, true).subscribe();\r\n        } else {\r\n          // 如果失败，不再通知实体变化\r\n          // 并执行界面回滚操作\r\n          this.changes.next({\r\n            type: ChangeType.ValueChanged,\r\n            path: [propertyName],\r\n            value: oldPropertyValue,\r\n            id: this.primaryKeyValue,\r\n            errors: errors\r\n          });\r\n        }\r\n      });\r\n    } else {\r\n      // `emitEventToEntity === false`, 则认定实体值已经发生变化，通知视图变化，并触发实体值变化后事件\r\n      this.innerValues = this.innerValues.set(propertyName, propertyValue);\r\n      if (emitEventToView === true) {\r\n        this.changes.next({\r\n          type: ChangeType.ValueChanged,\r\n          path: [propertyName],\r\n          value: propertyValue,\r\n          id: this.primaryKeyValue,\r\n          errors: errors\r\n        });\r\n      }\r\n      // 执行实体值变化后事件\r\n      invokeOnValueChange(oldPropertyValue, propertyValue, true).subscribe();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 将BindingObject实例转换成JSON对象\r\n   */\r\n  public toJSON(options?: any): any {\r\n    const langCode = window.localStorage.getItem('languageCode') || 'zh-CHS';\r\n    const result = {};\r\n    this.properties.forEach((property: BindingProperty) => {\r\n      const propName = property.name;\r\n      if (property.type === BindingPropertyType.List) {\r\n        const list: BindingList = this[propName];\r\n        result[propName] = list.toJSON(options);\r\n      } else if (property.type === BindingPropertyType.Object) {\r\n        const object: BindingObject = this[propName];\r\n        result[propName] = object.toJSON(options);\r\n      } else if (property.type === BindingPropertyType.Dynamic) {\r\n        const object: BindingObject = this[propName];\r\n        result[propName] = object.toJSON(options);\r\n      } else {\r\n\r\n        // 1、对于多语录入字段；\r\n        // 2、传入ignoreMultiLangInput标志，则取当前语言的值给控件。\r\n        if (options && options.ignoreMultiLangInput === true && property.enableMultiLangInput === true) {\r\n          const multiLangValueObj = this.getValue(propName);\r\n          if (multiLangValueObj) {\r\n            result[propName] = multiLangValueObj[langCode];\r\n          } else {\r\n            result[propName] = multiLangValueObj;\r\n          }\r\n        } else {\r\n          result[propName] = this.getValue(propName);\r\n        }\r\n      }\r\n    });\r\n\r\n    return result;\r\n  }\r\n}\r\n\r\nexport { BindingObject, InvokeOnValueChange };\r\n","/**\r\n * 绑定列表工厂相关定义\r\n * @author Witt<jiwt@inspur.com>\r\n */\r\n\r\nimport { BindingList } from './binding_list';\r\nimport { BindingProperty } from './binding_property';\r\n\r\n/**\r\n * BindingList工厂用于创建一个空的BindingList对象，并将当前行的属性影射到BindingList对象上。\r\n *\r\n * **示例代码**\r\n * ```ts\r\n * const deptProperties: BindingProperty[] = PropertyUtil.getProperties(DeptEntity);\r\n * const deptList = BindingListFactory.create(deptProperties);\r\n * ```\r\n */\r\nclass BindingListFactory {\r\n\r\n  /**\r\n   * 创建BindingList实例，并扩展其属性\r\n   * @param bindingProperties 绑定属性集合\r\n   */\r\n  static create(bindingProperties: BindingProperty[]): BindingList {\r\n    const bindingList = new BindingList(bindingProperties);\r\n    this.extendProperties(bindingList, bindingProperties);\r\n    return bindingList;\r\n  }\r\n\r\n  /**\r\n   * 扩展BindingList属性，将当前行上的属性映射到列表上\r\n   * @param bindingList       要扩展的绑定列表\r\n   * @param bindingProperties 绑定属性集合\r\n   */\r\n  static extendProperties(bindingList: BindingList, bindingProperties: BindingProperty[]) {\r\n\r\n    bindingProperties.forEach((bindingProperty: BindingProperty) => {\r\n      const propertyName = bindingProperty.name;\r\n      Object.defineProperty(bindingList, propertyName, {\r\n        get: () => {\r\n          return bindingList.currentItem[propertyName];\r\n        }\r\n      });\r\n    });\r\n  }\r\n}\r\n\r\nexport { BindingListFactory };\r\n\r\n","/**\r\n * 绑定对象工厂相关定义\r\n * @author Witt<jiwt@inspur.com>\r\n */\r\n\r\nimport { Change } from './changes';\r\nimport { PropertyUtil } from './property_util';\r\nimport { BindingProperty, BindingPropertyType } from './binding_property';\r\nimport { BindingObject } from './binding_object';\r\nimport { BindingListFactory } from './binding_list_factory';\r\n\r\n/**\r\n * BindingObject工厂用于创建一个空的BindingObject对象，并对其属性进行扩展。\r\n *\r\n * **扩展属性处理**\r\n *\r\n * 对于要扩展的属性（BindingProperty）有三种处理：\r\n * - 普通属性：初始化为一个undefined，并包装get、set方法，通过set方法监听变更；\r\n * - 对象属性：初始化为一个空的BindingObject对象，并监听子对象的变更；\r\n * - 列表属性：初始化为一个空的BindingList对象，并监听子列表的变更；\r\n *\r\n * **示例代码**\r\n *\r\n * ```ts\r\n *  const empProperties = PropertyUtil.getProperties(EmpEntity);\r\n * const empBindingObject = BindingObjectFactory.create(properties);\r\n * ```\r\n */\r\nclass BindingObjectFactory {\r\n\r\n  /**\r\n   * 创建BindingObject实例\r\n   * @param properties 要扩展的属性集合\r\n   * @returns 带扩展属性的空BindingObject对象\r\n   * @\r\n   */\r\n  static create(properties: BindingProperty[]): BindingObject {\r\n    const object = new BindingObject(properties);\r\n    this.extendProperties(object, properties);\r\n    return object;\r\n  }\r\n\r\n  static createDynamicBindingObject(data: any): BindingObject {\r\n    const properties = PropertyUtil.getDynamicProperties(data);\r\n    const object = new BindingObject(properties);\r\n    this.extendProperties(object, properties);\r\n    return object;\r\n  }\r\n\r\n  /**\r\n   * 扩展属性绑定对象的属性\r\n   * @param object     要扩展的绑定对象\r\n   * @param properties 绑定属性集合\r\n   */\r\n  static extendProperties(object: BindingObject, properties: BindingProperty[]): void {\r\n\r\n    // 扩展BindingObject属性\r\n    properties.forEach((property: BindingProperty) => {\r\n      if (property.type === BindingPropertyType.List) {\r\n        this.extendListProperty(object, property);\r\n      } else if (property.type === BindingPropertyType.Object) {\r\n        this.extendObjectProperty(object, property);\r\n      } else if (property.type === BindingPropertyType.Dynamic) {\r\n        this.extendDynamicObjectProperty(object, property);\r\n      } else {\r\n        this.extendPlainProperty(object, property);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * 扩展列表类型的绑定属性\r\n   * @param object     要扩展的绑定对象\r\n   * @param properties 列表类型的绑定属性集合\r\n   */\r\n  static extendListProperty(object: BindingObject, property: BindingProperty): void {\r\n    const propertyName = property.name;\r\n    const childListProperties = PropertyUtil.getProperties(property.entityType);\r\n    const childList = BindingListFactory.create(childListProperties);\r\n\r\n    // 指定子List的parent、监听子List的changes事件\r\n    childList.parent = object;\r\n    childList.changes.subscribe((change: Change) => {\r\n      change.path.unshift(propertyName);\r\n      object.changes.next(change);\r\n    });\r\n\r\n    // 将子的BindingList实例赋值给当前属性\r\n    Object.defineProperty(object, propertyName, {\r\n      value: childList\r\n    });\r\n  }\r\n\r\n  /**\r\n   * 扩展对象类型的绑定属性\r\n   * @param object     要扩展的绑定对象\r\n   * @param properties 对象类型的绑定属性集合\r\n   */\r\n  static extendObjectProperty(object: BindingObject, property: BindingProperty): void {\r\n    const propertyName = property.name;\r\n    const childObjectProperties = PropertyUtil.getProperties(property.entityType);\r\n    const childObject = this.create(childObjectProperties);\r\n\r\n    // 指定子Object的parent、监听子Object的changes事件\r\n    childObject.parent = object;\r\n    childObject.changes.subscribe((change: Change) => {\r\n      change.path.unshift(propertyName);\r\n      object.changes.next(change);\r\n    });\r\n\r\n    Object.defineProperty(object, propertyName, {\r\n      value: childObject\r\n    });\r\n  }\r\n\r\n  static extendDynamicObjectProperty(object: BindingObject, property: BindingProperty): void {\r\n    const propertyName = property.name;\r\n    object[propertyName] = null;\r\n  }\r\n\r\n  static attachDynamicObjectProperty(object: BindingObject, propertyName: string, dynamicObject: BindingObject) {\r\n    dynamicObject.parent = object;\r\n    dynamicObject.changes.subscribe((change: Change) => {\r\n      change.path.unshift(propertyName);\r\n      object.changes.next(change);\r\n    });\r\n    Object.defineProperty(object, propertyName, {\r\n      value: dynamicObject\r\n    });\r\n  }\r\n\r\n  /**\r\n   * 扩展简单类型的绑定属性\r\n   * @param object     要扩展的绑定对象\r\n   * @param properties 简单类型的绑定属性集合\r\n   */\r\n  static extendPlainProperty(object: BindingObject, property: BindingProperty): void {\r\n    const propertyName = property.name;\r\n    Object.defineProperty(object, propertyName, {\r\n      get: () => {\r\n        return object.getValue(propertyName);\r\n      },\r\n      set: (value: any) => {\r\n        const oldValue = object.getValue(propertyName);\r\n        if (value === oldValue) {\r\n          return;\r\n        }\r\n        object.setValue(propertyName, value, true, true);\r\n      }\r\n    });\r\n  }\r\n\r\n}\r\n\r\nexport { BindingObjectFactory };\r\n","import { Subject } from 'rxjs';\r\n\r\nimport { ArrayUtil } from '../utils/index';\r\nimport { Change, ChangeType } from './changes';\r\nimport { BindingObject } from './binding_object';\r\nimport { BindingProperty } from './binding_property';\r\nimport { BindingObjectFactory } from './binding_object_factory';\r\nimport { PropertyUtil } from './property_util';\r\n\r\n/**\r\n * BindingList是一个BindingObject集合\r\n */\r\nclass BindingList {\r\n\r\n  /**\r\n   * immutable的BindingObject列表\r\n   */\r\n  private innerList: BindingObject[];\r\n\r\n  private emptyCurrentItem: BindingObject;\r\n\r\n  /**\r\n   * 关联实体的属性集合\r\n   */\r\n  public properties: BindingProperty[];\r\n\r\n  /**\r\n   * 主键名\r\n   */\r\n  public primaryKey: string;\r\n\r\n  /**\r\n   * 父对象\r\n   */\r\n  public parent: BindingObject;\r\n\r\n  /**\r\n   * 变更流\r\n   */\r\n  public changes: Subject<Change>;\r\n\r\n  /**\r\n   * 当前行对应的绑定对象的内码\r\n   */\r\n  public currentId: string;\r\n\r\n  //#region 分页相关\r\n\r\n  /**\r\n   * 分页信息\r\n   */\r\n  public _paginationInfo: any = null;\r\n\r\n  set paginationInfo(sPaginationInfo: any) {\r\n    this._paginationInfo = sPaginationInfo;\r\n    if (this._paginationInfo === sPaginationInfo) {\r\n      return;\r\n    }\r\n    this.changes.next({\r\n      type: ChangeType.PaginationInfoChange,\r\n      path: [],\r\n      value: this._paginationInfo\r\n    });\r\n  }\r\n\r\n  get paginationInfo(): any {\r\n    return this._paginationInfo;\r\n  }\r\n  /**\r\n   * 获取页码\r\n   */\r\n  get pageIndex() {\r\n    if (!!this.paginationInfo && this.paginationInfo.hasOwnProperty(\"pageIndex\")) {\r\n      return this.paginationInfo.pageIndex;\r\n    }\r\n    return 1;\r\n  }\r\n  /**\r\n   * 获取分页大小\r\n   */\r\n  get pageSize() {\r\n    if (!!this.paginationInfo && this.paginationInfo.hasOwnProperty(\"pageSize\")) {\r\n      return this.paginationInfo.pageSize;\r\n    }\r\n    return 0;\r\n  }\r\n\r\n  /**\r\n   * 获取数据总项数\r\n   */\r\n  get total() {\r\n    if (!!this.paginationInfo) {\r\n      return this.paginationInfo.total || this.paginationInfo.totalCount;\r\n    }\r\n    return 0;\r\n  }\r\n  /**\r\n   * 获取跳过的数据条数\r\n   */\r\n  get skip() {\r\n    const pageIndex = this.pageIndex;\r\n    const pageSize = this.pageSize;\r\n    return (pageIndex - 1) * pageSize;\r\n  }\r\n\r\n  /**\r\n   * 前台设置分页信息\r\n   * @param skip skip\r\n   * @param take take\r\n   */\r\n  public setPaginationInfo(skip: number, take: number) {\r\n    this.paginationInfo = Object.assign({}, this.paginationInfo, {\r\n      pageSize: take,\r\n      pageIndex: skip / take + 1\r\n    });\r\n    /*this.changes.next({\r\n      type: ChangeType.PaginationInfoChange,\r\n      path: [],\r\n      value: this.paginationInfo\r\n    });*/\r\n  }\r\n  //#endregion\r\n\r\n\r\n\r\n  /**\r\n   * 当前行对应的绑定对象\r\n   * 如果currentId为null，则创建一个空结构，防止绑定报错；\r\n   */\r\n  public get currentItem(): BindingObject {\r\n    const currentItem = this.findById(this.currentId);\r\n    if (!currentItem) {\r\n      if (!this.emptyCurrentItem) {\r\n        this.emptyCurrentItem = BindingObjectFactory.create(this.properties);\r\n      }\r\n      return this.emptyCurrentItem;\r\n    }\r\n    return currentItem;\r\n  }\r\n\r\n  /**\r\n   * 绑定对象的数量\r\n   */\r\n  public get length(): number {\r\n    return this.innerList.length;\r\n  }\r\n\r\n  /**\r\n   * 构造函数\r\n   */\r\n  constructor(properties: BindingProperty[]) {\r\n    this.properties = properties;\r\n    this.primaryKey = PropertyUtil.getPrimaryKey(properties);\r\n\r\n    this.changes = new Subject<Change>();\r\n    this.innerList = [];\r\n    this.currentId = null;\r\n  }\r\n\r\n  /**\r\n   * 添加[Symbol.iterator]，使之能通过for of遍历\r\n   */\r\n  [Symbol.iterator]() {\r\n    const self = this;\r\n    let index = -1;\r\n    const size = this.innerList.length;\r\n\r\n    return {\r\n      next: function () {\r\n        index++;\r\n        if (index < size) {\r\n          return {\r\n            done: false,\r\n            value: self.innerList[index]\r\n          };\r\n        }\r\n        return { done: true, value: undefined };\r\n      }\r\n    };\r\n  }\r\n\r\n  /**\r\n   * 批量加载绑定对象，加载之前先清空绑定列表，并重置当前行，加载之后将第一行设置为默认当前行。\r\n   * @param objects 要加载绑定对象数组\r\n   */\r\n  public load(objects: BindingObject[]): void {\r\n\r\n    // 重置列表\r\n    this.innerList = [];\r\n\r\n    if (objects.length !== 0) {\r\n      // 加载数据\r\n      objects.forEach((object: BindingObject) => {\r\n        this.add(object);\r\n      });\r\n\r\n      // 设置默认当前行\r\n      const currentItem = this.findById(this.currentId);\r\n      if (!currentItem) {\r\n        const firstId = objects[0][this.primaryKey];\r\n        this.setCurrentId(firstId, false, false);\r\n      }\r\n    } else {\r\n      this.currentId = null;\r\n    }\r\n\r\n    // 触发事件\r\n    this.changes.next({\r\n      type: ChangeType.Load,\r\n      path: [],\r\n      value: objects\r\n    });\r\n  }\r\n\r\n  /**\r\n   * 批量追加绑定对象，追加之后将最后一个追加的绑定对象设置为当前行。\r\n   * @param objects 要加载绑定对象数组\r\n   */\r\n  public append(objects: BindingObject[]): void {\r\n\r\n    if (objects.length === 0) {\r\n      return;\r\n    }\r\n\r\n    // 加载BindingObject\r\n    objects.forEach((object: BindingObject) => {\r\n      this.add(object);\r\n    });\r\n\r\n    // 当前行为新追加的最后1行\r\n    const lastId = objects[objects.length - 1][this.primaryKey];\r\n    this.setCurrentId(lastId, true, true);\r\n\r\n    // 触发事件\r\n    this.changes.next({\r\n      type: ChangeType.Append,\r\n      path: [],\r\n      value: objects\r\n    });\r\n  }\r\n\r\n  /**\r\n   * 添加绑定对象，并建立绑定对象和绑定列表之间的关联。\r\n   * @param object 绑定对象\r\n   */\r\n  public add(object: BindingObject) {\r\n    this.innerList.push(object);\r\n    object.parent = this;\r\n\r\n    // 监听object变更，并继续向上抛，由于list有当前行的概念，不需要在path中追加路径\r\n    object.changes.subscribe((change: Change) => {\r\n      this.changes.next(change);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * 删除主键值数组对应的绑定对象。\r\n   * @param ids 主键值数组\r\n   */\r\n  public removeByIds(ids: Array<string>): void {\r\n    if (!ids || ids.length === 0) {\r\n      return;\r\n    }\r\n\r\n    let nextCurrentId = this.currentId;\r\n    ids.forEach((id: string) => {\r\n\r\n      // 如果当前行被删除，计算下一当前行\r\n      if (id === nextCurrentId) {\r\n        nextCurrentId = this.getCurrentIdBeforeDeleting();\r\n      }\r\n\r\n      // 删除对象，找不到时跳过\r\n      const index = this.getIndexById(id);\r\n      if (index === -1) {\r\n        return;\r\n      }\r\n      ArrayUtil.removeByIndex(this.innerList, index);\r\n    });\r\n\r\n    // 重新设置当前行\r\n    if (this.innerList.length === 0) {\r\n      this.currentId = null;\r\n    } else {\r\n      this.setCurrentId(nextCurrentId, false, false);\r\n    }\r\n\r\n    // 出发行删除事件\r\n    this.changes.next({\r\n      type: ChangeType.Remove,\r\n      path: [],\r\n      value: ids\r\n    });\r\n  }\r\n\r\n  /**\r\n   * 清空\r\n   */\r\n  public clear() {\r\n    this.innerList = [];\r\n    this.currentId = null;\r\n    this.changes.next({\r\n      type: ChangeType.Remove,\r\n      path: [],\r\n      value: []\r\n    });\r\n  }\r\n\r\n  /**\r\n   * 如果当前行被删除，删除之前重新计算当前行的位置，并返回下一当前行的主键值。\r\n   * - 如果被删除的行是最后1行，则上移1行；\r\n   * - 其他情况，下移1行。\r\n   */\r\n  public getCurrentIdBeforeDeleting(): string {\r\n    let nextIndex = -1;\r\n    const currentIndex = this.getIndexById(this.currentId);\r\n    if (currentIndex === this.length - 1) {\r\n      nextIndex = currentIndex - 1;\r\n    } else {\r\n      nextIndex = currentIndex + 1;\r\n    }\r\n    return this.getIdByIndex(nextIndex);\r\n  }\r\n\r\n  /**\r\n   * 根据主键值获取对应绑定对象\r\n   * @param   id 要查找的主键值\r\n   * @returns 找到时返回对应BindingObject， 找不到时返回null\r\n   */\r\n  public findById(id: string): BindingObject | null {\r\n    let target: BindingObject;\r\n    target = this.innerList.find((item) => {\r\n      return item.getValue(this.primaryKey) === id;\r\n    });\r\n    return target === undefined ? null : target;\r\n  }\r\n\r\n  /**\r\n   * 将主键值为id的绑定对象设置为当前行\r\n   * @param  id        要设置的主键值\r\n   * @param  emitEvent 是否发送当前行变更事件\r\n   */\r\n  public setCurrentId(id: string, emitEvent: boolean = true, emitGlobalEvent: boolean = true): void {\r\n    if (this.currentId === id) {\r\n      return;\r\n    }\r\n\r\n    // 不存在时设置为null\r\n    // const currentObj = this.findById(id);\r\n    // if (!currentObj) {\r\n    //   this.currentId = null;\r\n    // } else {\r\n    //   this.currentId = id;\r\n    // }\r\n\r\n    // @todo：找不到时按理应该设置为null，目前是直接返回，框架部分功能依赖该特性。\r\n    const currentObj = this.findById(id);\r\n    if (!currentObj) {\r\n      return;\r\n    }\r\n    this.currentId = id;\r\n\r\n    // 发出行切换事件\r\n    if (emitEvent === true) {\r\n      this.changes.next({\r\n        type: ChangeType.SelectionChanged,\r\n        path: [],\r\n        value: this.currentItem\r\n      });\r\n    }\r\n\r\n    // 是否发送全局的行切换事件\r\n    if (emitGlobalEvent === true) {\r\n      this.changes.next({\r\n        type: ChangeType.GlobalSelectionChanged,\r\n        path: [],\r\n        value: this.currentItem\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 根据主键值为id的绑定对象的索引\r\n   * @param id 主键值\r\n   * @returns 找到时返回对应的index，找不到时返回-1\r\n   */\r\n  public getIndexById(id: string): number {\r\n    return this.innerList.findIndex((obj: BindingObject) => {\r\n      return obj[this.primaryKey] === id;\r\n    });\r\n  }\r\n\r\n  /**\r\n   * 根据索引位置获取对应绑定对象的主键值\r\n   * @reutrn 找到时返回对应主键值，找不到返回null\r\n   */\r\n  public getIdByIndex(index: number): string {\r\n\r\n    if (index < 0 || index > this.length) {\r\n      return null;\r\n    }\r\n\r\n    const obj = this.innerList[index];\r\n    if (!obj) {\r\n      return null;\r\n    }\r\n\r\n    return obj[this.primaryKey];\r\n  }\r\n\r\n  /**\r\n   * 转换为BindingObject数组\r\n   */\r\n  public toArray(): BindingObject[] {\r\n    return this.innerList.concat([]);\r\n  }\r\n\r\n  /**\r\n   * 转换为JSON对象\r\n   * @returns 普通对象数组\r\n   */\r\n  public toJSON(options?: any): any[] {\r\n    const result = [];\r\n    this.innerList.forEach((obj: BindingObject) => {\r\n      result.push(obj.toJSON(options));\r\n    });\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * 获取分页信息\r\n   * @param path 路径\r\n   * @param defaultValue 默认值\r\n   */\r\n  public getPaginationConfigByPath(path: string, defaultValue?: any) {\r\n    if (!path || path === '/') {\r\n      return this.paginationInfo;\r\n    }\r\n    if (typeof path !== 'string') {\r\n      throw new Error('路径必须为字符串！');\r\n    }\r\n    path = path.substring(1);\r\n    const paths = path.split('/').filter(item => !!item && item.trim().length > 0).map(item => item.trim());\r\n    let config = this.paginationInfo;\r\n    paths.forEach(item => {\r\n      if (config && config.hasOwnProperty(item)) {\r\n        config = config[item];\r\n      } else {\r\n        config = null;\r\n      }\r\n    });\r\n    return !!config ? config : typeof defaultValue !== 'undefined' ? defaultValue : undefined;\r\n  }\r\n  /**\r\n   * 对bindingList就行排序\r\n   * @param string 排序字段\r\n   * @param directions 排序规则字段\r\n   * @param options 参数\r\n   */\r\n  public sortBy(fields: string | Array<string>, directions: string | Array<string>, options?: { [prop: string]: any }) {\r\n    if (!fields || fields.length < 1 || !directions || directions.length < 1) {\r\n      throw new Error('sortBy:argument error');\r\n    }\r\n    // 默认升序\r\n    const arrFields: Array<string> = typeof fields === 'string' ? fields.split(',') : fields || [];\r\n    const arrDirections: Array<string> = typeof directions === 'string' ? directions.split(',') : directions || [];\r\n    // 排序字段和排序方式应一致\r\n    if (arrFields.length !== arrDirections.length || arrFields.length < 1) {\r\n      throw new Error('sortBy:fields and directions not match');\r\n    }\r\n    // nage,age,total\r\n    const comparator = (props: Array<string>, orders: Array<string>) => (item1: BindingObject, item2: BindingObject) => {\r\n      for (const prop of props) {\r\n        const order = ['asc'].includes(orders[props.indexOf(prop)]) ? 1 : -1;\r\n        if (item1.getValue(prop) > item2.getValue(prop)) { return order * 1; }\r\n        if (item1.getValue(prop) < item2.getValue(prop)) { return order * -1; }\r\n      }\r\n      return 0;\r\n    };\r\n    this.innerList = this.innerList.sort(comparator(arrFields, arrDirections));\r\n  }\r\n}\r\n\r\nexport { BindingList };\r\n","import { Repository } from '../repository/index';\r\nimport { Entity, EntityList, PARENT_CLASS, FieldMetadataUtil } from '../entity/index';\r\nimport { Modification, ModifyType } from '../changeset/index';\r\nimport { ViewChange, Change, ChangeType } from './changes';\r\nimport { BindingList } from './binding_list';\r\nimport { BindingObject } from './binding_object';\r\nimport { BindingProperty, BindingPropertyType } from './binding_property';\r\nimport { BindingObjectFactory } from './binding_object_factory';\r\nimport { Pagination } from '../core/index';\r\nimport { BindingData } from './binding_data';\r\n\r\n/**\r\n * 实体操作工具类\r\n */\r\nclass EntityUtil {\r\n\r\n  /**\r\n   * 将entity的数据加载到bindingObject中，并保持两者同步。\r\n   * @param entity        实体对象\r\n   * @param bindingObject 绑定对象\r\n   */\r\n  static loadEntity(entity: Entity, bindingObject: BindingObject) {\r\n\r\n    // 遍历bindingObject的properties进行赋值\r\n    bindingObject.properties.forEach((property: BindingProperty) => {\r\n      const propertyName = property.name;\r\n      if (property.type === BindingPropertyType.List) {\r\n        this.loadEntityList(entity[propertyName] || entity[PARENT_CLASS], bindingObject[propertyName]);\r\n      } else if (property.type === BindingPropertyType.Object) {\r\n        if (entity && entity[propertyName]) {\r\n          this.loadEntity(entity[propertyName], bindingObject[propertyName]);\r\n        }\r\n      } else if (property.type === BindingPropertyType.Dynamic) {\r\n        if (entity && entity[propertyName]) {\r\n          const dynamicObject = BindingObjectFactory.createDynamicBindingObject(entity[propertyName].data);\r\n          BindingObjectFactory.attachDynamicObjectProperty(bindingObject, propertyName, dynamicObject);\r\n          this.loadEntity(entity[propertyName], bindingObject[propertyName]);\r\n        }\r\n      } else {\r\n        bindingObject.setValue(propertyName, entity[propertyName], false, false);\r\n      }\r\n    });\r\n\r\n    this.setUpEntityPipeline(entity, bindingObject);\r\n  }\r\n\r\n  /**\r\n   * 建立entity和bindingObject之间的关联\r\n   * @param entity        实体对象\r\n   * @param bindingObject 绑定对象\r\n   */\r\n  static setUpEntityPipeline(entity: Entity, bindingObject: BindingObject) {\r\n\r\n    // 监听entity变更\r\n    entity.onValueChanged.subscribe((modification: Modification) => {\r\n      if (modification.type !== ModifyType.ValueChange || modification.path.length === 0) {\r\n        return;\r\n      }\r\n      const propertyName = modification.path[modification.path.length - 1];\r\n      const primaryKeyPath = modification.path[modification.path.length - 2];\r\n\r\n      // 验证主键是否匹配\r\n      // 存在主键并且主键不是id时才检查（值对象、关联对象不检查）\r\n      if (bindingObject.primaryKey && bindingObject.primaryKey === 'id') {\r\n        const primaryKey = bindingObject.primaryKey;\r\n        const primaryKeyValue = bindingObject.getValue(primaryKey);\r\n        if (primaryKeyPath !== `${primaryKey}:${primaryKeyValue}`) {\r\n          return;\r\n        }\r\n      }\r\n\r\n      // 值没有发生变化，不再设置\r\n      // TODO: 通过bindingObject修改entity属性值时，entity总会触发一个变更回来，如果不截获这个重复的变更，会导致重复或死循环\r\n      if (bindingObject.getValue(propertyName) === modification.value) {\r\n        return;\r\n      }\r\n      bindingObject.setValue(propertyName, modification.value, true, false, modification.errors);\r\n    });\r\n\r\n    // 监听bindingObject变更\r\n    bindingObject.viewChanges.subscribe((viewChange: ViewChange) => {\r\n      const value = viewChange.value;\r\n      const propertyName = viewChange.path[0];\r\n\r\n      let pathPrefix = '';\r\n      const pathData = entity.getPaths();\r\n      const paths = pathData.path;\r\n      let id = bindingObject['id'];\r\n      if (pathData.isUdt) {\r\n        // grid中udt没有id，从父级中取出id，以便存放验证信息\r\n        const getParentId = (target: any) => {\r\n          let parentId = '';\r\n          const findId = (item: any) => {\r\n            if (item && item && item['id']) {\r\n              parentId = item['id'];\r\n              return;\r\n            } else if (item['parent']) {\r\n              findId(item['parent']);\r\n            }\r\n          };\r\n          findId(target);\r\n          return parentId;\r\n        };\r\n        id = getParentId(bindingObject);\r\n        if (pathData.isGrid) {\r\n          // grid 将从表主字段去除\r\n          paths.shift();\r\n        }\r\n        if (paths.length) {\r\n          pathPrefix = paths.join('.') + '.';\r\n        }\r\n      }\r\n\r\n      // 不是主键值字段时，要先检查主键是否存在，并且主键是否相等（防止后代变更冒泡上来）\r\n      // 非主键属性变更时，要先检查主键是否匹配（如果主键也修改了，要求先修改主键再修改其他值）\r\n      if (bindingObject.primaryKey) {\r\n        const primaryKey = bindingObject.primaryKey;\r\n        if (propertyName !== primaryKey) {\r\n          if (!entity[primaryKey] || entity[primaryKey] !== bindingObject[primaryKey]) {\r\n            return;\r\n          }\r\n        }\r\n      }\r\n\r\n      // 如果BindingObject上的属性值和Entity上对应属性值一样，则不再设置\r\n      if (entity[propertyName] === value) {\r\n        return;\r\n      }\r\n\r\n      // 调用表单验证,通过后调用实体验证\r\n      // bingdingObject变化后，先调用实体上的验证，通过后再设置实体的变动\r\n      entity[propertyName] = value;\r\n    });\r\n  }\r\n\r\n  /**\r\n   * 将entityList中的Entity对象转换为BindingObject对象，加载到bindingList中，并保持entityList和bindingList同步。\r\n   * @param entityList  实体列表\r\n   * @param bindingList 绑定列表\r\n   */\r\n  static loadEntityList(entityList: EntityList<any>, bindingList: BindingList) {\r\n    this.loadEntities(entityList.items, bindingList);\r\n\r\n    this.setUpEntityListPipeline(entityList, bindingList);\r\n  }\r\n\r\n  /**\r\n   * 建立entityList和bindingList之间的关联\r\n   * @param entityList  实体列表\r\n   * @param bindingList 绑定列表\r\n   */\r\n  static setUpEntityListPipeline(entityList: EntityList<any>, bindingList: BindingList) {\r\n\r\n    entityList.onListChanged.subscribe((modification: Modification) => {\r\n      switch (modification.type) {\r\n\r\n        // 添加实体\r\n        case ModifyType.Add:\r\n          const entitiesToAdd = <Entity[]>modification.value;\r\n          if (entitiesToAdd.length === 0) {\r\n            return;\r\n          }\r\n\r\n          // 检查父id是否一致，冒泡导致的变更不处理\r\n          const paths = modification.path;\r\n          const parentPath = paths[paths.length - 2];\r\n          const parentId = bindingList.parent.primaryKeyValue;\r\n          if (parentPath.indexOf(parentId) === -1) {\r\n            return;\r\n          }\r\n\r\n          this.appendEntities(<Entity[]>modification.value, bindingList);\r\n          break;\r\n\r\n        // 删除实体\r\n        case ModifyType.Remove:\r\n\r\n          // 删除实体（value格式待商榷，目前value的格式为 { primaryKey: primaryValue}）\r\n          const id = modification.value[bindingList.primaryKey];\r\n          bindingList.removeByIds([id]);\r\n          // this.removeEntities(<Entity[]>modification.value, bindingList);\r\n          break;\r\n\r\n        // 加载实体\r\n        case ModifyType.Load:\r\n          const entities = modification.value;\r\n          this.loadEntities(entities, bindingList);\r\n          break;\r\n        default:\r\n          break;\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * 监听repository变化，保持repository和bindingList同步。\r\n   * @param repository  实体仓库\r\n   * @param bindingList 绑定列表\r\n   */\r\n  static loadRepository(repository: Repository<any>, bindingList: BindingList) {\r\n\r\n    // 初次加载\r\n    const entities = Array.from(repository.entityCollection.toArray());\r\n    this.loadEntities(entities, bindingList);\r\n\r\n    // 监听变化\r\n    repository.entityCollectionChange.subscribe((modification: Modification) => {\r\n      switch (modification.type) {\r\n        case ModifyType.Load:\r\n          this.loadEntities(<Entity[]>modification.value, bindingList);\r\n          break;\r\n        case ModifyType.Add:\r\n          this.appendEntities(<Entity[]>modification.value, bindingList);\r\n          break;\r\n        case ModifyType.Remove:\r\n          this.removeEntities(<Entity[]>modification.value, bindingList);\r\n          break;\r\n        case ModifyType.PaginationInfoChange:\r\n          bindingList.paginationInfo = <Pagination>modification.value;\r\n          break;\r\n        default:\r\n          break;\r\n      }\r\n    });\r\n\r\n    // 监听BindingList数据变化\r\n    bindingList.changes.subscribe((change: Change) => {\r\n      if (change.type === ChangeType.PaginationInfoChange) {\r\n        const entityCollection = repository.entityCollection;\r\n        // const entityTypeName = entityCollection.entityTypeName;\r\n        // const original = entityCollection.paginationInfo[entityTypeName];\r\n        // const entityPaginationInfo = Object.assign({}, original, change.value);\r\n        entityCollection.paginationInfo = Object.assign({}, entityCollection.paginationInfo, change.value);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * 将entities中的Entity对象转换为BindingObject对象，并加载到bindingList中\r\n   * @param entities    实体数组\r\n   * @param bindingList 绑定列表\r\n   */\r\n  static loadEntities(entities: Entity[], bindingList: BindingList) {\r\n    const bindingObjects = this.createBindingObjects(entities, bindingList);\r\n    bindingList.load(bindingObjects);\r\n  }\r\n\r\n  /**\r\n   * 将entities中的Entity对象转换为BIndingObject对象，并追加到bindingList中\r\n   * @param entities    实体数组\r\n   * @param bindingList 绑定列表\r\n   */\r\n  static appendEntities(entities: Entity[], bindingList: BindingList) {\r\n    const bindingObjects = this.createBindingObjects(entities, bindingList);\r\n    bindingList.append(bindingObjects);\r\n  }\r\n\r\n  /**\r\n   * 从bindingList移除entities对应的BindingObject对象\r\n   * @param entities    实体数组\r\n   * @param bindingList 绑定列表\r\n   */\r\n  static removeEntities(entities: Entity[], bindingList: BindingList) {\r\n    if (entities === null || entities.length === 0) {\r\n      return;\r\n    }\r\n\r\n    // 归集要删除的id数组\r\n    const primaryKey = bindingList.primaryKey;\r\n    const ids = [];\r\n    entities.forEach((entity: Entity) => {\r\n      ids.push(entity[primaryKey]);\r\n    });\r\n    bindingList.removeByIds(ids);\r\n  }\r\n\r\n  /**\r\n   * 将entities中的Entity对象转换为BindingObject对象\r\n   * @param entities    实体数组\r\n   * @param bindingList 绑定列表\r\n   */\r\n  static createBindingObjects(entities: Entity[], bindingList: BindingList) {\r\n\r\n    if (entities === null || entities.length === 0) {\r\n      return [];\r\n    }\r\n\r\n    const bindingObjects = [];\r\n    entities.forEach((entity: Entity) => {\r\n      const bindingObject = BindingObjectFactory.create(bindingList.properties);\r\n      this.loadEntity(entity, bindingObject);\r\n\r\n      // // 为bindingObject设置默认值initialData属性\r\n      // if (entity['initialData']) {\r\n      //   bindingObject['initialData'] = entity['initialData'];\r\n      // }\r\n\r\n      bindingObjects.push(bindingObject);\r\n    });\r\n    return bindingObjects;\r\n  }\r\n  public static watchReposiroty(repository: Repository<any>, bindingData: BindingData) {\r\n    // reposiroty => bindingData\r\n    repository.entityCollectionChange.subscribe((modification: Modification) => {\r\n      switch (modification.type) {\r\n        case ModifyType.PaginationInfoChange:\r\n          bindingData.pagingInfo = modification.value;\r\n          break;\r\n        default:\r\n          break;\r\n      }\r\n    });\r\n  }\r\n  /**\r\n   * 查找属性的类型\r\n   * @param entityType 实体类型\r\n   * @param targetPropName 属性名称\r\n   * @return 属性信息，包含属性类型（NgField、NgObject、NgList）和属性对应的实体类型（当NgField类型时为null）\r\n   */\r\n  static getPropInfo(entityType: any, targetPropName: string): { propType: string, propEntityType: any } {\r\n\r\n    let propType: string;\r\n    let propEntityType: any;\r\n\r\n    // NgField\r\n    const ngFieldProperties = FieldMetadataUtil.getNgFields(entityType);\r\n    Object.keys(ngFieldProperties).forEach((propName: string) => {\r\n      if (propName === targetPropName) {\r\n        propType = 'NgField';\r\n        propEntityType = null;\r\n      }\r\n    });\r\n\r\n    // NgObject\r\n    const ngObjectProperties = FieldMetadataUtil.getNgObjects(entityType);\r\n    Object.keys(ngObjectProperties).forEach((propName: string) => {\r\n      if (propName === targetPropName) {\r\n        propType = 'NgObject';\r\n        propEntityType = ngObjectProperties[propName].type;\r\n      }\r\n    });\r\n\r\n    // NgList\r\n    const ngListProperties = FieldMetadataUtil.getNgList(entityType);\r\n    Object.keys(ngListProperties).forEach((propName: string) => {\r\n      if (propName === targetPropName) {\r\n        propType = 'NgList';\r\n        propEntityType = ngListProperties[propName].type;\r\n      }\r\n    });\r\n\r\n    const ngDynamicProperties = FieldMetadataUtil.getNgDynamic(entityType);\r\n    Object.keys(ngDynamicProperties).forEach((propName: string) => {\r\n      if (propName === targetPropName) {\r\n        propType = 'NgDynamic';\r\n        propEntityType = ngDynamicProperties[propName].type;\r\n      }\r\n    });\r\n\r\n    return { propType, propEntityType };\r\n  }\r\n\r\n  /**\r\n   * 获取实体的主键名\r\n   * @param entityType 实体类型\r\n   */\r\n  static getPrimaryKey(entityType: any) {\r\n    const primaryNgFiledProp = FieldMetadataUtil.getPrimaryFieldMetadata(entityType);\r\n    if (primaryNgFiledProp) {\r\n      return primaryNgFiledProp.dataField;\r\n    } else {\r\n      return '';\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 是否为对象属性\r\n   */\r\n  static isObjectProp(entityType: any, targetPropName: string, ) {\r\n    let isObjectProp = false;\r\n    const ngObjectProperties = FieldMetadataUtil.getNgObjects(entityType);\r\n    Object.keys(ngObjectProperties).forEach((propName: string) => {\r\n      if (propName === targetPropName) {\r\n        isObjectProp = true;\r\n      }\r\n    });\r\n    return isObjectProp;\r\n  }\r\n\r\n  /**\r\n   * 检查是否是动态列属性\r\n   */\r\n  static isDynamicProp(entityType: any, targetPropName: string) {\r\n    let isDynamicProp = false;\r\n    const ngDynamicProperties = FieldMetadataUtil.getNgDynamic(entityType);\r\n    Object.keys(ngDynamicProperties).forEach((propName: string) => {\r\n      if (propName === targetPropName) {\r\n        isDynamicProp = true;\r\n      }\r\n    });\r\n    return isDynamicProp;\r\n  }\r\n\r\n  /**\r\n   * 为实体增加initialData属性\r\n   * @param entity 实体实例\r\n   * @param initialData 默认值对象\r\n   */\r\n  static appendInitialData(entity, initialData) {\r\n    const data = Object.assign({}, initialData);\r\n    delete data.id;\r\n    delete data.parentID;\r\n    entity['initialData'] = data;\r\n  }\r\n}\r\n\r\nexport { EntityUtil };\r\n","// tslint:disable: max-line-length member-ordering\r\n/**\r\n * 绑定数据相关定义\r\n * @author Witt<jiwt@inspur.com>\r\n * @todo\r\n * 1、全局的BindingData和局部的BindingData应该拆成两个类，两个类之间是装饰关系；；\r\n * 2、为了保持兼容，减少改动量，暂时放在一起，待进一步重构。\r\n */\r\n\r\nimport { Subject } from 'rxjs';\r\n\r\nimport { DataTypeInfo } from '../entity/entity-type-info/index';\r\nimport { Repository } from '../repository/index';\r\nimport { ViewModelContext } from '../view-model/index';\r\nimport { Change, ChangeType } from './changes';\r\nimport { BindingProperty } from './binding_property';\r\nimport { BindingList } from './binding_list';\r\nimport { BindingListFactory } from './binding_list_factory';\r\nimport { PropertyUtil } from './property_util';\r\nimport { EntityUtil } from './entity_util';\r\nimport { InvokeOnValueChange } from './binding_object';\r\nimport { nullSafeIsEquivalent } from '@angular/compiler/src/output/output_ast';\r\n\r\n/**\r\n * BindingData\r\n */\r\n\r\nclass BindingData {\r\n\r\n  private viewModelContext: ViewModelContext;\r\n\r\n  /**\r\n   * 数据类型描述\r\n   */\r\n  private dataTypeInfo: DataTypeInfo;\r\n\r\n  /**\r\n   * 绑定该路径\r\n   */\r\n  public get bindingPath(): string {\r\n    if (this.viewModelContext && this.viewModelContext.viewModel.bindingPath) {\r\n      return this.viewModelContext.viewModel.bindingPath;\r\n    }\r\n    return '/';\r\n  }\r\n\r\n  /**\r\n   * 可绑定的属性描述\r\n   */\r\n  public properties: BindingProperty[];\r\n\r\n  /**\r\n   * 数据列表\r\n   */\r\n  public list: BindingList;\r\n  private paginationInfo = null;\r\n\r\n  public set pagingInfo(pagingInfo: any) {\r\n    this.paginationInfo = pagingInfo;\r\n    this.firePagingChangeEvent();\r\n  }\r\n\r\n  public get pagingInfo() {\r\n    return this.paginationInfo;\r\n  }\r\n  /**\r\n   * 设置分页信息\r\n   * @param skip 跳过\r\n   * @param take 获取\r\n   * @param bindingPath 路径\r\n   */\r\n  public setPagingInfo(skip: number, take: number, bindingPath: string) {\r\n    if (bindingPath.length < 1 || bindingPath === '/') {\r\n      this.paginationInfo = Object.assign(this.paginationInfo, { pageSize: take, pageIndex: skip / take + 1 });\r\n    } else {\r\n      let pagingInfo = this.paginationInfo || {};\r\n      const bindingPaths = bindingPath.substr(1).split('/').filter(item => !!item && item.length > 0).map(item => item.substring(0, item.length - 1));\r\n      bindingPaths.forEach(path => {\r\n        if (!pagingInfo.hasOwnProperty(path)) {\r\n          pagingInfo[path] = {};\r\n        }\r\n        pagingInfo = pagingInfo[path];\r\n      });\r\n      pagingInfo.pageIndex = ((skip / take) || 0) + 1;\r\n      pagingInfo.pageSize = take || 0;\r\n    }\r\n    this.firePagingChangeEvent();\r\n  }\r\n  private firePagingChangeEvent() {\r\n    this.list.changes.next({\r\n      type: ChangeType.PaginationInfoChange,\r\n      path: [],\r\n      value: this.paginationInfo\r\n    });\r\n  }\r\n  /**\r\n   * 变更集\r\n   */\r\n  public get changes(): Subject<Change> {\r\n    return this.list.changes;\r\n  }\r\n\r\n  /**\r\n   * 值变化执行器工厂，根据路径产生执行器\r\n   */\r\n  private valueChangeInvokerFactory: (paths: string[]) => InvokeOnValueChange;\r\n\r\n  /**\r\n   * 设置值变化执行器工厂\r\n   * @param value 值变化执行器工厂\r\n   */\r\n  public setValueChangeInvokerFactory(value: (paths: string[]) => InvokeOnValueChange) {\r\n    this.valueChangeInvokerFactory = value;\r\n  }\r\n\r\n  /**\r\n   * 初始化（已废弃）\r\n   */\r\n  public init(repository: Repository<any>, bindingPath: string) {\r\n    this.initByRepository(repository, null);\r\n  }\r\n\r\n  /**\r\n   * 根据Repository对BindingData进行初始化\r\n   */\r\n  public initByRepository(repository: Repository<any>, viewModelContext: ViewModelContext) {\r\n    this.viewModelContext = viewModelContext;\r\n\r\n    this.properties = PropertyUtil.getProperties(repository.entityType);\r\n    this.list = BindingListFactory.create(this.properties);\r\n    // 从repository初始化bindingData\r\n    this.pagingInfo = repository.entityCollection.paginationInfo;\r\n\r\n    // @todo\r\n    // BindingData不应该知道Repository，加载数据、建立关联关系的过程应该转移到外边\r\n    EntityUtil.loadRepository(repository, this.list);\r\n    this.dataTypeInfo = repository.entityTypeInfo;\r\n\r\n    this.extendProperties(this.properties);\r\n  }\r\n\r\n  /**\r\n   * 初始化\r\n   */\r\n  public initByBindingList(bindingList: BindingList,  viewModelContext: ViewModelContext) {\r\n    this.list = bindingList;\r\n    this.viewModelContext = viewModelContext;\r\n    this.extendProperties(this.list.properties);\r\n  }\r\n\r\n  /**\r\n   * 获取paths对应的属性值\r\n   * @param  paths 属性路径数组\r\n   * @returns 属性值\r\n   */\r\n  public getValue(paths: string[]) {\r\n    let target: any = this.list;\r\n    paths.forEach((path: string) => {\r\n      if (target) {\r\n        target = target[path];\r\n      }\r\n    });\r\n    return target;\r\n  }\r\n\r\n  /**\r\n   * 根据paths设置属性值\r\n   * @param paths 属性路径数组\r\n   * @param value 属性值\r\n   * @param emitEventToView 如果设置为true，则发送事件通知订阅它的组件、指令去更新界面，默认为false。\r\n   * @param emitEventToEntity 如果设置为true，则同步去更新Entity上对应的字段，默认为true。\r\n   */\r\n  public setValue(paths: string[], value: any, emitEventToView: boolean = false, emitEventToEntity: boolean = true) {\r\n\r\n    if (!paths || paths.length === 0) {\r\n      throw Error('路径不能为空');\r\n    }\r\n    const parentPaths = paths.slice(0, paths.length - 1);\r\n    const propName = paths[paths.length - 1];\r\n\r\n    let parent = this.getValue(parentPaths);\r\n    if (!parent) {\r\n      throw Error('找不到要设置的对象');\r\n    }\r\n    if (parent instanceof BindingData) {\r\n      parent = parent.list.currentItem;\r\n    } else if (parent instanceof BindingList) {\r\n      parent = parent.currentItem;\r\n    }\r\n    if (!!this.valueChangeInvokerFactory) {\r\n      parent.setValue(propName, value, emitEventToView, emitEventToEntity, null, this.valueChangeInvokerFactory(paths));\r\n    } else {\r\n      parent.setValue(propName, value, emitEventToView, emitEventToEntity);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 根据paths清空属性值\r\n   */\r\n  public clearValue(paths: string[], emitEventToView: boolean = false, emitEventToEntity: boolean = true) {\r\n    let initValue: any;\r\n    const propInfo = this.dataTypeInfo.getPropInfoByPath(paths);\r\n    if (propInfo && propInfo.metadataInfo && propInfo.metadataInfo.initValue !== undefined) {\r\n      initValue = propInfo.metadataInfo.initValue;\r\n    } else {\r\n\r\n      // 原来的帮助映射中，强行纠正了数值的情况，保持一致\r\n      const oldValue = this.getValue(paths);\r\n      if (typeof oldValue === 'number') {\r\n        initValue = 0;\r\n      } else {\r\n        initValue = '';\r\n      }\r\n    }\r\n    this.setValue(paths, initValue, emitEventToView, emitEventToEntity);\r\n  }\r\n\r\n  /**\r\n   * 获取当前列表\r\n   */\r\n  public getList() {\r\n\r\n    if (!this.bindingPath || this.bindingPath === '/') {\r\n      return this.list;\r\n    }\r\n\r\n    const bindingPath = this.bindingPath.substr(1);\r\n    const bindingPathArray = bindingPath.split('/').filter((part: string) => {\r\n      return part !== '';\r\n    });\r\n    return this.getValue(bindingPathArray);\r\n  }\r\n\r\n  /**\r\n   * 获取当前对象\r\n   */\r\n  public getObject() {\r\n    const bindingList = this.getList();\r\n    return bindingList.currentItem;\r\n  }\r\n\r\n  /**\r\n   * 扩展BindingData属性，映射BindingData所持有的绑定列表当前行的属性，减少绑定层级。\r\n   * @param properties 关联实体的属性集合\r\n   */\r\n  private extendProperties(properties: BindingProperty[]) {\r\n    properties.forEach((property: BindingProperty) => {\r\n      const propName = property.name;\r\n      Object.defineProperty(this, propName, {\r\n        get: () => {\r\n          return this.list.currentItem[propName];\r\n        },\r\n        set: (value: any) => {\r\n          this.list.currentItem[propName] = value;\r\n        }\r\n      });\r\n    });\r\n  }\r\n}\r\n\r\nexport { BindingData };\r\n","import { Entity } from '../entity/index';\r\nimport { Repository, EntityManager } from '../repository/index';\r\nimport { PropertyUtil as BindingPropertyUtil } from './property_util';\r\nimport { EntityUtil as EntityLoadUtil } from './entity_util';\r\nimport { BindingListFactory } from './binding_list_factory';\r\nimport { BindingData } from './binding_data';\r\n\r\n\r\nclass BindingDataFactory {\r\n\r\n  /**\r\n   * 根据Repository创建一个BindingData\r\n   */\r\n  public static createFromRepository(repository: Repository<Entity>, bindingPath: string): BindingData {\r\n    const bindingData = new BindingData();\r\n    const bindingProperties = BindingPropertyUtil.getProperties(repository.entityType);\r\n    const bindingList = BindingListFactory.create(bindingProperties);\r\n    bindingData.initByBindingList(bindingList, null);\r\n    EntityLoadUtil.loadRepository(repository, bindingList);\r\n\r\n    // 从repository初始化bindingData\r\n    bindingData.pagingInfo = repository.entityCollection.paginationInfo;\r\n    return bindingData;\r\n  }\r\n\r\n  /**\r\n   * 根据EntityManager创建BindingData，并建立双向关联（请勿使用）\r\n   * @internal\r\n   * @summary\r\n   * 1、该方法暂时仅供内部单元测试使用；\r\n   * 2、该方法暂时只创建BindingData，不建立双向关联\r\n   */\r\n  public static createFromEntityManager(entityManager: EntityManager<Entity>, bindingPath: string): BindingData {\r\n    const bindingData = new BindingData();\r\n    const bindingProperties = BindingPropertyUtil.getProperties(entityManager.entityType);\r\n    const bindingList = BindingListFactory.create(bindingProperties);\r\n    bindingData.initByBindingList(bindingList, null);\r\n\r\n    // 初始化数据\r\n    const entities: Entity[] = entityManager.getEntitiesByPath([]);\r\n    EntityLoadUtil.loadEntities(entities, bindingList);\r\n\r\n    return bindingData;\r\n  }\r\n\r\n  /**\r\n   * 根据已经存在的BindingData创建一个新的BindingData\r\n   */\r\n  public static createFromExistingBindingData(existingBindingData: BindingData, bindingPath: string) {\r\n    const bindingData = new BindingData();\r\n    bindingData.initByBindingList(existingBindingData.list, null);\r\n    return bindingData;\r\n  }\r\n}\r\n\r\nexport { BindingDataFactory };\r\n","import {\r\n  BindingData, BindingPropertyType, PropertyUtil\r\n} from '../../binding-data/index';\r\nimport { BindingPathConverter } from './binding_path_converter';\r\n\r\n/**\r\n * EntityPath转换器\r\n */\r\nclass EntityPathConverter {\r\n\r\n  /**\r\n   * 转换为Entity可识别的路径\r\n   * 根：[]\r\n   * 主表：['id:xxx', 'name'],\r\n   * 关联：['id:xxx', 'deptInfo', 'id:xxx', 'name']\r\n   * UDT: ['id:xxx', 'updateInfo', ':', 'createdOn']\r\n   * 从表：['id:xxx', 'edus', 'id:xxx', 'name'],\r\n   * 从从表：['id:xxx', 'edus', 'id:xxx', 'grades', 'id:xxx', 'name']\r\n   */\r\n  public static toEntityPathArray(bindingPathString: string, bindingData: BindingData): string[] {\r\n    const bindingPathArray: string[] = BindingPathConverter.toBindingPathArray(bindingPathString);\r\n    const entityPathArray: string[] = [];\r\n\r\n    if (bindingPathArray.length === 0) {\r\n      return entityPathArray;\r\n    }\r\n\r\n    // 根节点\r\n    let currentBindingObject = bindingData.list.currentItem;\r\n    entityPathArray.push(\r\n      this.createPrimaryKeyPath(currentBindingObject.primaryKey, currentBindingObject.primaryKeyValue)\r\n    );\r\n\r\n    bindingPathArray.forEach((propName: string) => {\r\n      const propInfo = PropertyUtil.getPropertyByName(currentBindingObject.properties, propName);\r\n      switch (propInfo.type) {\r\n        case BindingPropertyType.Plain:\r\n          entityPathArray.push(propName);\r\n          break;\r\n        case BindingPropertyType.Object:\r\n          currentBindingObject = currentBindingObject[propName];\r\n          entityPathArray.push(propName);\r\n          entityPathArray.push(\r\n            this.createPrimaryKeyPath(currentBindingObject.primaryKey, currentBindingObject.primaryKeyValue)\r\n          );\r\n          break;\r\n        case BindingPropertyType.List:\r\n          const currentBindingList = currentBindingObject[propName];\r\n          currentBindingObject = currentBindingList.currentItem;\r\n          entityPathArray.push(propName);\r\n          entityPathArray.push(\r\n            this.createPrimaryKeyPath(currentBindingObject.primaryKey, currentBindingObject.primaryKeyValue)\r\n          );\r\n          break;\r\n        default:\r\n            break;\r\n      }\r\n    });\r\n\r\n    return entityPathArray;\r\n  }\r\n\r\n  /**\r\n   * 创建路径中的主键部分\r\n   */\r\n  public static createPrimaryKeyPath(primaryKey: string, primaryKeyValue: string) {\r\n    return `${primaryKey}:${primaryKeyValue}`;\r\n  }\r\n\r\n}\r\n\r\nexport { EntityPathConverter };\r\n","\r\n/**\r\n * 实体路径比较器\r\n */\r\nclass EntityPathComparer {\r\n}\r\n\r\nexport { EntityPathComparer };\r\n","\r\n/**\r\n * 表单路径转换类\r\n */\r\nclass FormPathConverter {\r\n\r\n  /**\r\n   * ControlPathString => BingingPathArray\r\n   * @params controlPath FormControl对应的数据绑定路径（BindingData的bindingPaht + FormControl的binding）\r\n   * @return BindingPath数组\r\n   */\r\n  public static toBindingPathArray(formPahtString: string): string[] {\r\n    const bindingPathArray = formPahtString.split('.').filter((part: string) => {\r\n      return part !== '';\r\n    });\r\n    return bindingPathArray;\r\n  }\r\n}\r\n\r\nexport { FormPathConverter };\r\n","/**\r\n * 数据路径转换、比较等工具类\r\n * @summary\r\n * ----------------------------------------\r\n * 术语：\r\n * BindingPath：数组形式；\r\n * BindingPathString：BindingPath的字符串形式，用/分隔；\r\n * ControlPathString：BindingPath的字符串形式，用.分隔；\r\n *\r\n * EntityPath：数组形式；\r\n * EntityPathString：EntityPath的字符串形式，使用/分隔；\r\n * ----------------------------------------\r\n */\r\n\r\n/**\r\n * 路径处理工具类\r\n * @summary\r\n * --------------------------------------------------------------------------------\r\n * 路径现状\r\n *\r\n * 字符串格式\r\n * 1、BindingPath（/edus/grades/id）：主要用于表达式解析；\r\n * 2、ControlPath（edus.grades.id）： 主要用于FormControl的binding；\r\n * 3、RestPath（/empId/edus/eduId/grades/gradeId）：主要用于创建Rest\r\n * 数组格式：\r\n * 1、BindingPathArray（['edus', 'grades', 'id']）：BindingData模块中使用；\r\n * 2、EntityPathArray（['id:empId', 'edus', 'id:eduId', 'id']）：Entity模块中使用；\r\n * --------------------------------------------------------------------------------\r\n * 转换原则\r\n * 1、除了该工具类，不允许再出现路径转换、比较的方法；\r\n * 2、如果有特殊情况，先在该类中实现对应的方法；\r\n * 1、对于BindingPath、ControlPath统一转换成BingdingPathArray比较\r\n * 2、对于EntityPath统一转换成EntityPathArray进行比较；\r\n * --------------------------------------------------------------------------------\r\n * @todo\r\n * 1909中使用统一的数据结构（双向链表）进行存储，来解决目前混乱的情况\r\n */\r\n\r\n export * from './binding_path_converter';\r\n export * from './binding_path_comparer';\r\n export * from './binding_path_traverser';\r\n export * from './entity_path_converter';\r\n export * from './entity_path_comparer';\r\n export * from './form_path_converter';\r\n","import { BindingData, BindingPropertyType, PropertyUtil } from '../binding-data/index';\r\n/**\r\n * 路径处理工具类（处理/PathNode1/PathNode2/...格式的路径）\r\n */\r\nclass DataPathUtil {\r\n\r\n  /**\r\n   * 转换成BindingData可识别的路径\r\n   */\r\n  public static convertToBindingPathArray(path: string): string[] {\r\n    const bindingPathArray = path.split('/').filter((part: string) => {\r\n      return part !== '';\r\n    });\r\n    return bindingPathArray;\r\n  }\r\n\r\n  /**\r\n   * 转换为Entity可识别的路径\r\n   * 根：[]\r\n   * 主表：['id:xxx', 'name'],\r\n   * 关联：['id:xxx', 'deptInfo', 'id:xxx', 'name']\r\n   * UDT: ['id:xxx', 'updateInfo', ':', 'createdOn']\r\n   * 从表：['id:xxx', 'edus', 'id:xxx', 'name'],\r\n   * 从从表：['id:xxx', 'edus', 'id:xxx', 'grades', 'id:xxx', 'name']\r\n   */\r\n  public static convertToEntityPathArray(path: string, bindingData: BindingData): string[] {\r\n    const bindingPathArray: string[] = this.convertToBindingPathArray(path);\r\n    const entityPathArray: string[] = [];\r\n\r\n    if (bindingPathArray.length === 0) {\r\n      return entityPathArray;\r\n    }\r\n\r\n    // 根节点\r\n    let currentBindingObject = bindingData.list.currentItem;\r\n    entityPathArray.push(\r\n      this.createPrimaryKeyPath(currentBindingObject.primaryKey, currentBindingObject.primaryKeyValue)\r\n    );\r\n\r\n    bindingPathArray.forEach((propName: string) => {\r\n      const propInfo = PropertyUtil.getPropertyByName(currentBindingObject.properties, propName);\r\n      switch (propInfo.type) {\r\n        case BindingPropertyType.Plain:\r\n          entityPathArray.push(propName);\r\n          break;\r\n        case BindingPropertyType.Object:\r\n          currentBindingObject = currentBindingObject[propName];\r\n          entityPathArray.push(propName);\r\n          entityPathArray.push(\r\n            this.createPrimaryKeyPath(currentBindingObject.primaryKey, currentBindingObject.primaryKeyValue)\r\n          );\r\n          break;\r\n        case BindingPropertyType.List:\r\n          const currentBindingList = currentBindingObject[propName];\r\n          currentBindingObject = currentBindingList.currentItem;\r\n          entityPathArray.push(propName);\r\n          entityPathArray.push(\r\n            this.createPrimaryKeyPath(currentBindingObject.primaryKey, currentBindingObject.primaryKeyValue)\r\n          );\r\n          break;\r\n        default:\r\n            break;\r\n      }\r\n    });\r\n\r\n    return entityPathArray;\r\n  }\r\n\r\n  /**\r\n   * 转换为RestUrl里的路径\r\n   *\r\n   * 返回结果：\r\n   * 主表（/）：/\r\n   * 从表（/jiwtEdus）：/xxx/jiwtEdus\r\n   * 从从表（/jiwtEdus/jiwtGrades）： /xxx/jiwtEdus/xxx/jiwtGrades\r\n   */\r\n  public static convertToRestUrl(path: string, bindingData: BindingData): string {\r\n    const bindingPathArray: string[] = this.convertToBindingPathArray(path);\r\n    const restPathArray: string[] = [];\r\n\r\n    let currentBindingObject = bindingData.list.currentItem;\r\n    restPathArray.push(currentBindingObject.primaryKeyValue);\r\n\r\n    bindingPathArray.forEach((propName: string) => {\r\n      const propInfo = PropertyUtil.getPropertyByName(currentBindingObject.properties, propName);\r\n      if (propInfo.type !== BindingPropertyType.List) {\r\n        throw new Error(`${propInfo.name}不是子表对应的属性`);\r\n      }\r\n      const currentBindingList = currentBindingObject[propName];\r\n      currentBindingObject = currentBindingList.currentItem;\r\n      restPathArray.push(propName);\r\n      restPathArray.push(currentBindingObject.primaryKeyValue);\r\n    });\r\n\r\n    // 移除最后一个主键\r\n    restPathArray.pop();\r\n    return '/' + restPathArray.join('/');\r\n  }\r\n\r\n  /**\r\n   * 获取叶子节点的Path\r\n   */\r\n  public static getLeafPath(path: string): string {\r\n    const pathArray = DataPathUtil.convertToBindingPathArray(path);\r\n    return pathArray.pop();\r\n  }\r\n\r\n  /**\r\n   * 获取父路径\r\n   */\r\n  public static getParentPath(path: string): string {\r\n    const pathArray = DataPathUtil.convertToBindingPathArray(path);\r\n    pathArray.pop();\r\n    return '/' + pathArray.join('/');\r\n  }\r\n\r\n  /**\r\n   * 创建路径中的主键部分\r\n   */\r\n  private static createPrimaryKeyPath(primaryKey: string, primaryKeyValue: string) {\r\n    return `${primaryKey}:${primaryKeyValue}`;\r\n  }\r\n}\r\n\r\nexport { DataPathUtil };\r\n","// tslint:disable: max-line-length\r\n/**\r\n * GUID创建服务\r\n * @scope 静态类没有提供Provider\r\n */\r\nexport class Guid {\r\n\r\n    private constructor(guid: string) {\r\n        if (!guid) { throw new TypeError('Invalid argument; `value` has no value.'); }\r\n\r\n        this.value = Guid.EMPTY;\r\n\r\n        if (guid && Guid.isGuid(guid)) {\r\n            this.value = guid;\r\n        }\r\n    }\r\n\r\n\r\n    public static validator = new RegExp('^[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}$', 'i');\r\n\r\n    public static EMPTY = '00000000-0000-0000-0000-000000000000';\r\n\r\n    private value: string;\r\n\r\n    public static isGuid(guid: any) {\r\n        const value: string = guid.toString();\r\n        return guid && (guid instanceof Guid || Guid.validator.test(value));\r\n    }\r\n\r\n    public static create(): Guid {\r\n        return new Guid([Guid.gen(2), Guid.gen(1), Guid.gen(1), Guid.gen(1), Guid.gen(3)].join('-'));\r\n    }\r\n\r\n    public static createEmpty(): Guid {\r\n        return new Guid('emptyguid');\r\n    }\r\n\r\n    public static parse(guid: string): Guid {\r\n        return new Guid(guid);\r\n    }\r\n\r\n    public static raw(): string {\r\n        return [Guid.gen(2), Guid.gen(1), Guid.gen(1), Guid.gen(1), Guid.gen(3)].join('-');\r\n    }\r\n\r\n    private static gen(count: number) {\r\n        let out = '';\r\n        for (let i = 0; i < count; i++) {\r\n            // tslint:disable-next-line:no-bitwise\r\n            out += (((1 + Math.random()) * 0x10000) | 0).toString(16).substring(1);\r\n        }\r\n        return out;\r\n    }\r\n\r\n    public equals(other: Guid): boolean {\r\n        // Comparing string `value` against provided `guid` will auto-call\r\n        // toString on `guid` for comparison\r\n        return Guid.isGuid(other) && this.value === other.toString();\r\n    }\r\n\r\n    public isEmpty(): boolean {\r\n        return this.value === Guid.EMPTY;\r\n    }\r\n\r\n    public toString(): string {\r\n        return this.value;\r\n    }\r\n\r\n    public toJSON(): any {\r\n        return {\r\n            value: this.value,\r\n        };\r\n    }\r\n}\r\n","/*\r\n * @Author: aalizzwell \r\n * @Date: 2019-10-25 13:30:52 \r\n * @Last Modified by:   aalizzwell \r\n * @Last Modified time: 2019-10-25 13:30:52 \r\n */\r\nimport { Observable } from 'rxjs';\r\n\r\nconst isObservable = (value) => {\r\n    if (!value) {\r\n        return false;\r\n    }\r\n    if (value[Symbol.observable] && value === value[Symbol.observable]()) {\r\n        return true;\r\n    }\r\n    if (value['@@observable'] && value === value['@@observable']()) {\r\n        return true;\r\n    }\r\n    if (value instanceof Observable) {\r\n        return true;\r\n    }\r\n    return false;\r\n}\r\nexport { isObservable }\r\n","import { makePropDecorator } from '../../core/index';\r\nimport { ObjectUtil } from '../../utils/index';\r\nimport { ClassType } from '../types';\r\nimport { PropMetadata } from './prop_meatadata';\r\n\r\n/**\r\n * 【对象属性元数据】接口\r\n */\r\nexport interface ObjectPropMetadata extends PropMetadata {\r\n\r\n  /**\r\n   * 映射字段\r\n   */\r\n  dataField?: string;\r\n\r\n  /**\r\n   * 原始字段名称\r\n   */\r\n  originalDataField?: string;\r\n\r\n  /**\r\n   * 表名\r\n   */\r\n  tableName?: string;\r\n\r\n  /**\r\n   * 引用实体类型\r\n   */\r\n  type?: ClassType;\r\n\r\n  /**\r\n   * 树分级类型(分级码=path 父路径=parent) \r\n   */\r\n  hierarchyType?: string;\r\n}\r\n\r\n\r\n/**\r\n * 【对象属性元数据】名称\r\n */\r\nexport const OBJECT_PROP_META = 'ObjectPropMeta';\r\n\r\n\r\n/**\r\n * 【对象属性元数据装饰器工厂】接口\r\n * @summaryh\r\n * obj 参数obj的值类型可以为 NgObjectProperty、string、ClassType\r\n * 当为string 时，则设其映射字段；\r\n * 当为ClassType时，则设置集合中的记录类型\r\n */\r\nexport interface ObjectPropMetaDecorator {\r\n\r\n  (obj: ObjectPropMetadata | string | ClassType): any;\r\n\r\n  new(obj: ObjectPropMetadata | string | ClassType): any;\r\n}\r\n\r\n\r\n/**\r\n * 【对象属性元数据装饰器工厂】的工厂\r\n */\r\nfunction makeObjectPropMetaDecorator(options: ObjectPropMetadata | string | ClassType): any {\r\n  if (ObjectUtil.isPlainObject(options)) {\r\n    return options;\r\n  }\r\n\r\n  const type = typeof options;\r\n  if (type === 'string') {\r\n    return {\r\n      dataField: options\r\n    };\r\n  }\r\n\r\n  if (type === 'function') {\r\n    return {\r\n      type: options\r\n    };\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * 对象属性元数据装饰器工厂\r\n */\r\nexport const ObjectPropMeta: ObjectPropMetaDecorator = makePropDecorator(OBJECT_PROP_META, makeObjectPropMetaDecorator);\r\n","import { makePropDecorator } from '../../core/index';\r\nimport { ObjectUtil } from '../../utils/index';\r\nimport { ClassType } from '../types';\r\nimport { PropMetadata } from './prop_meatadata';\r\n\r\n\r\n/**\r\n * 【动态对象元数据】接口\r\n */\r\nexport interface DynamicPropMetadata extends PropMetadata {\r\n\r\n  /**\r\n   * 映射字段\r\n   */\r\n  dataField?: string;\r\n\r\n  /**\r\n   * 原始字段名称\r\n   */\r\n  originalDataField?: string;\r\n\r\n  /**\r\n   * 表名\r\n   */\r\n  tableName?: string;\r\n\r\n  /**\r\n   * 引用实体类型\r\n   */\r\n  type?: ClassType;\r\n}\r\n\r\n\r\n/**\r\n * 【动态对象元数据装饰器】名称\r\n */\r\nexport const DYNAMIC_PROP_META = 'DynamicPropMeta';\r\n\r\n\r\n/**\r\n * 【动态对象元数据装饰器工厂】接口\r\n */\r\nexport interface DynamicPropMetaDecorator {\r\n\r\n  (obj: DynamicPropMetadata | string | ClassType): any;\r\n\r\n  new(obj: DynamicPropMetadata | string | ClassType): any;\r\n}\r\n\r\n\r\n/**\r\n * 【动态对象元数据装饰器工厂】的工厂\r\n */\r\nfunction makeDynamicPropMetaDecorator(options: DynamicPropMetadata | string | ClassType): any {\r\n  if (ObjectUtil.isPlainObject(options)) {\r\n    return options;\r\n  }\r\n\r\n  const type = typeof options;\r\n  if (type === 'string') {\r\n    return {\r\n      dataField: options\r\n    };\r\n  }\r\n\r\n  if (type === 'function') {\r\n    return {\r\n      type: options\r\n    };\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * 实体属性注解\r\n */\r\nexport const DynamicPropMeta: DynamicPropMetaDecorator = makePropDecorator(DYNAMIC_PROP_META, makeDynamicPropMetaDecorator);","import { makePropDecorator } from '../../core/index';\r\nimport { ObjectUtil } from '../../utils/index';\r\nimport { ClassType } from '../types';\r\nimport { PropMetadata } from './prop_meatadata';\r\n\r\n\r\n/**\r\n * 列表属性元数据\r\n */\r\nexport interface ListPropMetadata extends PropMetadata {\r\n\r\n  /**\r\n   * 表名\r\n   */\r\n  tableName?: string;\r\n\r\n  /**\r\n   * 字段名称\r\n   */\r\n  dataField?: string;\r\n\r\n  /**\r\n   * 原始字段名称\r\n   */\r\n  originalDataField?: string;\r\n\r\n  /**\r\n   * 实体类型\r\n   */\r\n  type?: any;\r\n}\r\n\r\n\r\n/**\r\n * 【列表属性元数据】名称\r\n */\r\nexport const LIST_PROP_META = 'ListPropMeta';\r\n\r\n\r\n/**\r\n * 【列表属性元数据装饰器工厂】接口\r\n */\r\nexport interface ListPropMetaDecorator {\r\n\r\n  (obj: ListPropMetadata | string | ClassType): any;\r\n\r\n  new(obj: ListPropMetadata | string | ClassType): any;\r\n\r\n}\r\n\r\n/**\r\n * 【列表属性元数据装饰器工厂】的工厂\r\n */\r\nfunction makeListPropMetaDecorator(options: ListPropMetadata | string | ClassType): any {\r\n  if (ObjectUtil.isPlainObject(options)) {\r\n    return options;\r\n  }\r\n\r\n  const type = typeof options;\r\n  if (type === 'string') {\r\n    return {\r\n      dataField: options\r\n    };\r\n  }\r\n\r\n  if (type === 'function') {\r\n    return {\r\n      type: options\r\n    };\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * 列表属性装饰器工厂\r\n */\r\nexport const ListPropMeta: ListPropMetaDecorator = makePropDecorator(LIST_PROP_META, makeListPropMetaDecorator);\r\n","import { MetadataUtil } from '../../core/index';\r\nimport {\r\n  PRIMITIVE_PROP_META, OBJECT_PROP_META, DYNAMIC_PROP_META, LIST_PROP_META,\r\n  PrimitivePropMetadata, ObjectPropMetadata, DynamicPropMetadata, ListPropMetadata\r\n} from './field_decorator';\r\n\r\n/**\r\n * 属性注解器通用方法\r\n */\r\nexport class FieldMetadataUtil {\r\n  /**\r\n   * 获取实体所有的简单属性元数据\r\n   * @param target 实体类型\r\n   * @returns 形如：{[propName: string]: NgObjectProperty}\r\n   */\r\n  static getNgFields(target: any): { [propName: string]: PrimitivePropMetadata } {\r\n    return MetadataUtil.getPropsMetadatasByName(target, PRIMITIVE_PROP_META);\r\n  }\r\n\r\n  /**\r\n   * 获取某个简单属性的元数据\r\n   */\r\n  static getNgField(target: any, propName: string): PrimitivePropMetadata {\r\n    const ngFields = this.getNgFields(target);\r\n    const ngField = ngFields[propName] as PrimitivePropMetadata;\r\n    return ngField;\r\n  }\r\n\r\n  /**\r\n   * 获取实体属性在原始数据中的属性名\r\n   */\r\n  static getDataField(target: any, propName: string) {\r\n    const ngField = this.getNgField(target, propName);\r\n    return ngField.dataField || propName;\r\n  }\r\n\r\n  /**\r\n   * 获取标注为NgObject的属性的元数据\r\n   * @param target 实体类型\r\n   * @returns 形如：{[propName: string]: NgObjectProperty}\r\n   */\r\n  static getNgObjects(target: any): { [propName: string]: ObjectPropMetadata } {\r\n    return MetadataUtil.getPropsMetadatasByName(target, OBJECT_PROP_META);\r\n  }\r\n\r\n  static getNgDynamic(target: any): { [propName: string]: ObjectPropMetadata } {\r\n    return MetadataUtil.getPropsMetadatasByName(target, DYNAMIC_PROP_META);\r\n  }\r\n\r\n  /**\r\n   * 获取标注为NgList的属性的元数据\r\n   * @param target 实体类型\r\n   * @returns 形如：{[propName: string]: NgListProperty}\r\n   */\r\n  static getNgList(target: any): { [propName: string]: ListPropMetadata } {\r\n    return MetadataUtil.getPropsMetadatasByName(target, LIST_PROP_META);\r\n  }\r\n\r\n  /**\r\n   * 获取实体标注为主键的属性元数据\r\n   * @param target 实体类型\r\n   */\r\n  static getPrimaryFieldMetadata(target: any): PrimitivePropMetadata | undefined {\r\n    const ngFieldObj = FieldMetadataUtil.getNgFields(target);\r\n    const primaryKey = Object.keys(ngFieldObj).find((prop: string) => {\r\n      return ngFieldObj[prop].primary;\r\n    });\r\n\r\n    if (primaryKey) {\r\n      const propMeta = ngFieldObj[primaryKey];\r\n      propMeta.property = primaryKey;\r\n      if (!propMeta.dataField) {\r\n        propMeta.dataField = primaryKey;\r\n      }\r\n\r\n      return propMeta;\r\n    }\r\n    return undefined;\r\n  }\r\n\r\n  /**\r\n   * 获取主键名称，没有主键时返回空字符串\r\n   */\r\n  static getPrimaryKey(entityType: any) {\r\n    const primaryNgField = this.getPrimaryFieldMetadata(entityType);\r\n    if (!primaryNgField) {\r\n      return '';\r\n    }\r\n    return primaryNgField.property;\r\n  }\r\n\r\n}\r\n","import { Type } from '../../core/index';\r\nimport { MetadataUtil } from '../../core/index';\r\nimport { Entity } from '../entity';\r\n\r\nimport {\r\n  PropMetadata, PRIMITIVE_PROP_META, PrimitivePropMetadata, OBJECT_PROP_META, ObjectPropMetadata,\r\n  DYNAMIC_PROP_META, DynamicPropMetadata, LIST_PROP_META,    ListPropMetadata\r\n} from './field_decorator';\r\n\r\n/**\r\n * 实体元数据工具类\r\n */\r\nexport class EntityMetadataUtil {\r\n\r\n  /**\r\n   * 获取所有属性\r\n   * @todo：封装根据基类获取所有元数据的方法，解决重复代码\r\n   */\r\n  static getAllNgProperties(entityType: Type<Entity>): { [propName: string]: PropMetadata } {\r\n    const ngPlainProperties = this.getNgFieldProperties(entityType);\r\n    const ngEntityProperties = this.getNgObjectProperties(entityType);\r\n    const ngDynamicProperties = this.getNgDynamicProperties(entityType);\r\n    const ngEntityListProperties = this.getNgObjectProperties(entityType);\r\n\r\n    return Object.assign({},\r\n      ngPlainProperties,   ngEntityProperties,\r\n      ngDynamicProperties, ngEntityListProperties\r\n    );\r\n  }\r\n\r\n  /**\r\n   * 获取NgField的属性元数据\r\n   */\r\n  static getNgFieldProperties(entityType: any): { [propName: string]: PrimitivePropMetadata } {\r\n    return MetadataUtil.getPropsMetadatasByName(entityType, PRIMITIVE_PROP_META);\r\n  }\r\n\r\n  /**\r\n   * 获取NgObject属性元数据\r\n   */\r\n  static getNgObjectProperties(entityType: any): { [propName: string]: ObjectPropMetadata } {\r\n    return MetadataUtil.getPropsMetadatasByName(entityType, OBJECT_PROP_META);\r\n  }\r\n\r\n  /**\r\n   * 获取NgDynamic属性元数据\r\n   */\r\n  static getNgDynamicProperties(entityType: any): { [propName: string]: DynamicPropMetadata } {\r\n    return MetadataUtil.getPropsMetadatasByName(entityType, DYNAMIC_PROP_META);\r\n  }\r\n\r\n  /**\r\n   * 获取NgList属性元数据\r\n   */\r\n  static getNgListProperties(entityType: any): { [propName: string]: ListPropMetadata } {\r\n    return MetadataUtil.getPropsMetadatasByName(entityType, LIST_PROP_META);\r\n  }\r\n\r\n  /**\r\n   * 获取主键属性元数据\r\n   */\r\n  static getPrimaryKeyProperty(entityType: Type<Entity>): PrimitivePropMetadata {\r\n    let primaryKeyProperty;\r\n    const ngPlainProperties = EntityMetadataUtil.getNgFieldProperties(entityType);\r\n    Object.keys(ngPlainProperties).forEach((propName: string) => {\r\n      const ngProperty = ngPlainProperties[propName] as PrimitivePropMetadata;\r\n      if (ngProperty.primary === true) {\r\n        primaryKeyProperty = ngProperty;\r\n      }\r\n    });\r\n\r\n    return primaryKeyProperty;\r\n  }\r\n}\r\n","/*\r\n * @Author: Witt\r\n * @Date: 2018-12-07 09:05:09\r\n * @Last Modified by: Witt\r\n * @Last Modified time: 2018-12-27 20:35:02\r\n */\r\n\r\nimport { Type } from '../../core/types';\r\nimport {\r\n  PropMetadata, PrimitivePropMetadata, ObjectPropMetadata, DynamicPropMetadata, ListPropMetadata,\r\n  EntityMetadataUtil\r\n} from '../metadata/index';\r\nimport { DataPropGroup, DataPropInfo } from './data_prop_info';\r\n\r\n/**\r\n * 实体类型信息\r\n * @todo：\r\n * 1、构造时不应该识别Entity模块的东西，应该是更抽象的；\r\n * 2、构造函数应该接收一个Builder接口，由Entity或者其他实现层来实现这个接口。\r\n */\r\nclass DataTypeInfo {\r\n\r\n  /**\r\n   * 数据类型\r\n   */\r\n  public type: Type<any>;\r\n\r\n  /**\r\n   * 属性集合\r\n   */\r\n  public propInfoMap: Map<string, DataPropInfo>;\r\n\r\n  /**\r\n   * 主键\r\n   */\r\n  public primaryKey: string;\r\n\r\n  /**\r\n   * 外键\r\n   */\r\n  public foreignKey: string;\r\n\r\n  /**\r\n   * 是否为值对象\r\n   */\r\n  public get isValueObject() {\r\n    return !this.primaryKey;\r\n  }\r\n\r\n  /**\r\n   * 构造函数\r\n   * @todo：不应该识别\r\n   */\r\n  constructor(type: any) {\r\n    this.type = type;\r\n    this.primaryKey = '';\r\n    this.foreignKey = '';\r\n    this.propInfoMap = new Map<string, DataPropInfo>();\r\n    this.collectPropInfos();\r\n  }\r\n\r\n  /**\r\n   * 获取全部属性信息\r\n   */\r\n  public getPropInfos(): DataPropInfo[] {\r\n    return Array.from(this.propInfoMap.values());\r\n  }\r\n\r\n  /**\r\n   * 获取全部属性的名称\r\n   */\r\n  public getPropNames(): string[] {\r\n    const propNames = [];\r\n    const propInfos = this.getPropInfos();\r\n    propInfos.forEach((propInfo) => {\r\n      propNames.push(propInfo.name);\r\n    });\r\n    return propNames;\r\n  }\r\n\r\n  /**\r\n   * 根据group获取属性信息数组\r\n   */\r\n  public getPropInfosByGroup(group: DataPropGroup): DataPropInfo[] {\r\n    const allPropInfos = Array.from(this.propInfoMap.values());\r\n    const propInfos = allPropInfos.filter((propInfo: DataPropInfo) => {\r\n      return propInfo.group === group;\r\n    });\r\n    return propInfos;\r\n  }\r\n\r\n  /**\r\n   * 根据group获取属性名称数组\r\n   * @param group 属性分组\r\n   */\r\n  public getPropNamesByGroup(group: DataPropGroup): string[] {\r\n    const propNames = [];\r\n    const propInfos = this.getPropInfosByGroup(group);\r\n    propInfos.forEach((propInfo) => {\r\n      propNames.push(propInfo.name);\r\n    });\r\n    return propNames;\r\n  }\r\n\r\n  /**\r\n   * 根据propName获取属性信息\r\n   */\r\n  public getPropInfoByName(propName: string): DataPropInfo {\r\n    if (this.propInfoMap.has(propName)) {\r\n      return this.propInfoMap.get(propName);\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /**\r\n   * 根据path获取属性信息\r\n   */\r\n  public getPropInfoByPath(path: string[]): DataPropInfo {\r\n\r\n    // 先复制，防止shift方法产生污染\r\n    const arrPath = path.concat([]);\r\n    if (arrPath.length === 0) {\r\n      throw Error(`属性路径不能为空`);\r\n    }\r\n\r\n    // 循环查找\r\n    let typeInfo = this;\r\n    let propInfo = null;\r\n    while (typeInfo && arrPath.length > 0) {\r\n\r\n      const propName = arrPath.shift();\r\n      propInfo = typeInfo.getPropInfoByName(propName);\r\n      if (!propInfo) {\r\n        throw Error(`路径${path}中存在不正确的节点${propName}，请检查`);\r\n      }\r\n      typeInfo = propInfo.typeInfo;\r\n\r\n      // 如果是动态列，并且路径数组里还有属性，统一设置为null(动态列不再描述属性信息)\r\n      if (propInfo.group === DataPropGroup.Dynamic && arrPath.length > 0) {\r\n        propInfo = null;\r\n        typeInfo = null;\r\n      }\r\n    }\r\n\r\n    return propInfo;\r\n  }\r\n\r\n  /**\r\n   * 根据path获取对应属性的TypeInfo\r\n   */\r\n  public getTypeInfoByPath(path: string[]): DataTypeInfo {\r\n\r\n    // 空数组时返回\r\n    if (path.length === 0) {\r\n      return this;\r\n    }\r\n\r\n    // 获取对应属性信息\r\n    const propInfo = this.getPropInfoByPath(path);\r\n    if (!propInfo.typeInfo) {\r\n      throw Error(`路径${path}无法定位到一个EntityTypeInfo，请检查`);\r\n    }\r\n\r\n    return propInfo.typeInfo;\r\n  }\r\n\r\n  /**\r\n   * 获取主键的属性信息\r\n   */\r\n  public getPrimaryKeyPropInfo(): DataPropInfo {\r\n    return this.getPropInfoByName(this.primaryKey);\r\n  }\r\n\r\n  /**\r\n   * 根据name获取影射名\r\n   */\r\n  public getPropMappingByName(name: string): string {\r\n    const propInfo = this.getPropInfoByName(name);\r\n    if (!propInfo) {\r\n      return '';\r\n    }\r\n    return propInfo.mapping;\r\n  }\r\n\r\n  /**\r\n   * 根据path获取映射名\r\n   */\r\n  public getPropMappingByPath(path: string[]): string {\r\n    const propInfo = this.getPropInfoByPath(path);\r\n    if (!propInfo) {\r\n      return '';\r\n    }\r\n    return propInfo.mapping;\r\n  }\r\n\r\n  /**\r\n   * 检查属性是否属于特定的分组\r\n   */\r\n  public checkPropGroup(propName: string, propGroup: DataPropGroup): boolean {\r\n    const propInfo = this.getPropInfoByName(propName);\r\n    if (propInfo && propInfo.group === propGroup) {\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n\r\n  /**\r\n   * --------------------------------------------------------------------------------\r\n   * 属性元数据 => 属性描述信息\r\n   * --------------------------------------------------------------------------------\r\n   */\r\n\r\n  /**\r\n   * 搜集所有属性信息\r\n   * @todo：消除重复代码，ts不支持interface类型检测，暂时通过遍历实现。\r\n   */\r\n  private collectPropInfos() {\r\n\r\n    // 简单属性\r\n    const ngPlainProperties = EntityMetadataUtil.getNgFieldProperties(this.type);\r\n    Object.keys(ngPlainProperties).forEach((propName: string) => {\r\n      const ngProperty = ngPlainProperties[propName] as PrimitivePropMetadata;\r\n      if (ngProperty.primary === true) {\r\n        this.primaryKey = propName;\r\n      }\r\n      if (ngProperty.foreign === true) {\r\n        this.foreignKey = propName;\r\n      }\r\n      this.addPropInfo(DataPropGroup.Primitive, propName, ngProperty.dataField, null, ngProperty);\r\n    });\r\n\r\n    // 实体属性\r\n    const ngEntityProperties = EntityMetadataUtil.getNgObjectProperties(this.type);\r\n    Object.keys(ngEntityProperties).forEach((propName: string) => {\r\n      const ngProperty = ngEntityProperties[propName] as ObjectPropMetadata;\r\n      this.addPropInfo(DataPropGroup.Object, propName, ngProperty.dataField, ngProperty.type, ngProperty);\r\n    });\r\n\r\n    // 动态实体属性\r\n    const ngDynamicProperties = EntityMetadataUtil.getNgDynamicProperties(this.type);\r\n    Object.keys(ngDynamicProperties).forEach((propName: string) => {\r\n      const ngProperty = ngDynamicProperties[propName] as DynamicPropMetadata;\r\n      this.addPropInfo(DataPropGroup.Dynamic, propName, ngProperty.dataField, null, ngProperty);\r\n    });\r\n\r\n    // 实体列表属性\r\n    const ngEntityListProperties = EntityMetadataUtil.getNgListProperties(this.type);\r\n    Object.keys(ngEntityListProperties).forEach((propName: string) => {\r\n      const ngProperty = ngEntityListProperties[propName] as ListPropMetadata;\r\n      this.addPropInfo(DataPropGroup.List, propName, ngProperty.dataField, ngProperty.type, ngProperty);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * 添加属性信息\r\n   */\r\n  private addPropInfo(group: DataPropGroup, name: string, mapping: string, type: Type<any>, metadataInfo: PropMetadata) {\r\n\r\n    // 没有设置影射时，用属性名充当影射\r\n    mapping = mapping ? mapping : name;\r\n    let typeInfo = null;\r\n    if (type) {\r\n      typeInfo = new DataTypeInfo(type);\r\n    }\r\n    const propInfo = { group, name, mapping, typeInfo, metadataInfo };\r\n    this.propInfoMap.set(name, propInfo);\r\n  }\r\n\r\n}\r\n\r\nexport { DataTypeInfo };\r\n","\r\nimport { DataTypeInfo, DataPropGroup  } from '../entity-type-info/index';\r\nimport { Entity  } from '../index';\r\nimport { Repository, EntityManager } from '../../repository/index';\r\nimport { BindingData } from '../../binding-data/index';\r\nimport { DataPathNode, DataPathNodeType } from './data_path_node';\r\nimport { DataPath } from './data_path';\r\n\r\n/**\r\n * 数据Path工厂类\r\n */\r\nclass DataPathCreator {\r\n\r\n  /**\r\n   * 将长路径数组或字符串转换为\r\n   * @param fullPathArrayOrString 路径数组或字符串\r\n   * @param repository 实体仓库\r\n   * @summary\r\n   * 1、长路径格式说明参考：data-path.md\r\n   */\r\n  public static createByLongPathFromRoot(fullPathArrayOrString: string[] | string, entityManager: EntityManager<Entity>): DataPath {\r\n    const dataPath = new DataPath();\r\n    const fullPathArray = fullPathArrayOrString as string[];\r\n    if (!fullPathArray || fullPathArray.length === 0) {\r\n      return dataPath;\r\n    }\r\n\r\n    let currentNodeInfo = {\r\n      nodeValue: fullPathArray.shift(),\r\n      nodeType: DataPathNodeType.DataId,\r\n      entityTypeInfo: new DataTypeInfo(entityManager.entityType)\r\n    };\r\n    while (currentNodeInfo) {\r\n      dataPath.push(currentNodeInfo.nodeType, currentNodeInfo.nodeValue);\r\n\r\n      // 处理下一个节点\r\n      const nextNodeValue = fullPathArray.shift();\r\n      if (!nextNodeValue || !currentNodeInfo.entityTypeInfo) {\r\n        break;\r\n      }\r\n      currentNodeInfo = this.getNextPathNodeInfo(currentNodeInfo, nextNodeValue);\r\n    }\r\n\r\n    return dataPath;\r\n  }\r\n\r\n  /**\r\n   * 获取下一个路径节点的信息\r\n   * @param parentNodeInfo 当前路径节点信息\r\n   * @param nextNodeValue 下一个路径节点的值\r\n   * @summary\r\n   * 1、这个递归写的很绕，说明数据结构设计不合理；\r\n   * 2、多个因素混用了一个结构；\r\n   */\r\n  private static getNextPathNodeInfo(parentNodeInfo: any, nextNodeValue: string): any {\r\n\r\n    const parentNodeValue = parentNodeInfo.nodeValue;\r\n    const parentNodeType = parentNodeInfo.nodeType;\r\n    const parentEntityTypeInfo = parentNodeInfo.entityTypeInfo;\r\n\r\n    if (!nextNodeValue || !parentEntityTypeInfo) {\r\n      return null;\r\n    }\r\n\r\n    const nextPathNodeInfo = {\r\n      nodeValue: nextNodeValue,\r\n      nodeType: null,\r\n      entityTypeInfo: null\r\n    };\r\n\r\n\r\n    // DataNodeType=List：下一节点肯定是Object，并且EntityTypeInfo不变\r\n    if (parentNodeType === DataPathNodeType.DataId) {\r\n      nextPathNodeInfo.nodeType = DataPathNodeType.PropName;\r\n      nextPathNodeInfo.entityTypeInfo = parentEntityTypeInfo;\r\n    } else {\r\n\r\n      // DataNodeType=Object：必然对应一个属性信息\r\n      const nextPropInfo = parentEntityTypeInfo.getPropInfoByName(parentNodeValue);\r\n      if (nextPropInfo.group === DataPropGroup.List) {\r\n\r\n        // EntityPropGroup=EntityList：下一个节点是List类型。\r\n        nextPathNodeInfo.nodeType = DataPathNodeType.DataId;\r\n        nextPathNodeInfo.entityTypeInfo = nextPropInfo.typeInfo;\r\n      } else {\r\n\r\n        // EntityPropGroup=Entity：       下级entityTypeInfo为\r\n        // EntityPropGroup=Dynamic|Plain：null\r\n        nextPathNodeInfo.nodeType = DataPathNodeType.PropName;\r\n        nextPathNodeInfo.entityTypeInfo = nextPropInfo.group === DataPropGroup.Object ? nextPropInfo.typeInfo : null;\r\n      }\r\n    }\r\n\r\n    return nextPathNodeInfo;\r\n  }\r\n\r\n  /**\r\n   * @param fullPathArrayOrString 路径数组或字符串\r\n   * @param repository 实体仓库\r\n   * @summary\r\n   * 1、长路径格式说明参考：data-path.md\r\n   * 2、shortPathArrayOrString暂时只支持字符串数组\r\n   */\r\n  public static createByShortPathFromRoot(\r\n    shortPathArrayOrString: string[] | string, entityManager: EntityManager<Entity>, bindingData: BindingData\r\n  ): DataPath {\r\n\r\n    const dataPath = new DataPath();\r\n    const shortPathArray: string[] = shortPathArrayOrString as string[];\r\n\r\n    // 根节点\r\n    let currentBindingObject = bindingData.list.currentItem;\r\n    let currentEntityTypeInfo = new DataTypeInfo(entityManager.entityType);\r\n    dataPath.push(DataPathNodeType.DataId, currentBindingObject.primaryKeyValue);\r\n\r\n    // 遍历下级节点\r\n    shortPathArray.forEach((propName: string) => {\r\n      const propInfo = currentEntityTypeInfo.getPropInfoByName(propName);\r\n      switch (propInfo.group) {\r\n        case DataPropGroup.Primitive:\r\n          dataPath.push(DataPathNodeType.PropName, propName);\r\n          break;\r\n        case DataPropGroup.Object:\r\n          currentBindingObject = currentBindingObject[propName];\r\n          currentEntityTypeInfo = propInfo.typeInfo;\r\n          dataPath.push(DataPathNodeType.PropName, propName);\r\n\r\n          break;\r\n        case DataPropGroup.List:\r\n          const currentBindingList = currentBindingObject[propName];\r\n          currentBindingObject = currentBindingList.currentItem;\r\n          currentEntityTypeInfo = propInfo.typeInfo;\r\n\r\n          dataPath.push(DataPathNodeType.PropName, propName);\r\n          dataPath.push(DataPathNodeType.DataId, currentBindingObject.primaryKeyValue);\r\n          break;\r\n        default:\r\n            break;\r\n      }\r\n    });\r\n\r\n    return dataPath;\r\n  }\r\n\r\n}\r\n\r\nexport { DataPathCreator };\r\n","/**\r\n * 获取path对应的实体\r\n * @summary\r\n * 关于path的格式如下：\r\n * - 主表：[parentId]\r\n * - 主表关联: [parentId, assoInfo]\r\n * - 从表: [parentId, child1s, child1Id]\r\n * - 从表关联：[parentId, child1s, child1Id, assoInfo]\r\n * - 从从表: [parentId, child1s, child1Id, grand11s, grand11Id]\r\n * - 从从表关联：[parentId, child1s, child1Id, grand11s, grand11Id, assoInfo]\r\n */\r\n\r\n\r\n\r\nexport * from './data_path_node';\r\nexport * from './data_path';\r\nexport * from './data_path_creator';\r\n","export const PARENT_PATH = '__PARENT_PATH__';\r\nexport const PARENT_CLASS = '__PARENT__';\r\n\r\nexport type ClassType = new (...args: any[]) => any;\r\n\r\nexport interface Dynamic {\r\n  loadDynamicData(dynamicData: any): void;\r\n}\r\n","import { Type } from '../core/index';\r\nimport { Entity } from './entity';\r\n\r\n/**\r\n * 创建实体\r\n * @param entityType 实体类型\r\n * @param entityData 实体数据\r\n */\r\nexport function createEntity<T extends Entity>(entityType: Type<any>, entityData: any): T {\r\n  const entity = new entityType(entityData);\r\n  return entity;\r\n}\r\n\r\n/**\r\n * 批量创建实体\r\n * @param entityType     实体类型\r\n * @param entityListData 实体数据数组\r\n */\r\nexport function createEntities<T extends Entity>(entityType: Type<any>, entityListData: any): T[] {\r\n  const entities: T[] = [];\r\n  entityListData.forEach((entityData: any) => {\r\n    const entity = createEntity<T>(entityType, entityData);\r\n    entities.push(entity);\r\n  });\r\n  return entities;\r\n}\r\n\r\n/**\r\n * 已弃用：请使用createEntity方法代替。\r\n */\r\nexport function EntityFactory<T extends Entity>(T: new (...args: any[]) => any, data: any): T {\r\n  const entity = new T(data);\r\n  return entity;\r\n}\r\n\r\n\r\n\r\n","import { Subject } from 'rxjs';\r\nimport { ChangeSet } from '../changeset/change_set';\r\nimport { Modification, ModifyType } from '../changeset/types';\r\nimport { Entity } from './entity';\r\nimport { EntityFactory } from './entity_creator';\r\nimport { PARENT_CLASS, PARENT_PATH, ClassType } from './types';\r\n\r\nexport interface IList<T> {\r\n  [index: number]: T;\r\n}\r\n/**\r\n * 实体集合列表\r\n */\r\nexport class EntityList<T extends Entity> implements IList<T>, Iterable<T> {\r\n\r\n  // #region 私有属性\r\n\r\n  /**\r\n   * 已废弃：请勿使用\r\n   */\r\n  private rawData: T[];\r\n\r\n  /**\r\n   * 已废弃：请勿使用\r\n   */\r\n  private listChanged = new Subject<Modification>();\r\n\r\n  /**\r\n   * 已废弃：请勿使用\r\n   */\r\n  private changeSet = new ChangeSet();\r\n  // #endregion\r\n\r\n\r\n  // #region 公有属性\r\n\r\n  /**\r\n   * 集合改变时触发(新增、行记录修改、删除)\r\n   * @event\r\n   */\r\n  public onListChanged = this.listChanged.asObservable();\r\n\r\n  /**\r\n   * 获取项集合\r\n   */\r\n  public get items(): T[] {\r\n    return this.rawData;\r\n  }\r\n\r\n  /**\r\n   * 列表变更集\r\n   */\r\n  public get changes() {\r\n    return this.changeSet.changes;\r\n  }\r\n\r\n  /**\r\n   * 获取指定索引处的值\r\n   */\r\n  [index: number]: T;\r\n\r\n  /**\r\n   * 迭代器\r\n   */\r\n  *[Symbol.iterator](): Iterator<T> {\r\n    yield* this.items;\r\n  }\r\n\r\n  // #endregion\r\n\r\n\r\n  /**\r\n   * @param data JSON数据集合\r\n   * @param type 集合中的实体类型\r\n   */\r\n  constructor(data?: any[], type?: ClassType) {\r\n    this.clear();\r\n    if (data) {\r\n      // this.loadEntities(data);\r\n      data.forEach(item => {\r\n        this.initEntity(EntityFactory(type, item));\r\n      });\r\n    }\r\n  }\r\n\r\n\r\n  // #region 公有方法\r\n\r\n  /** 加载实体列表 */\r\n  public loadEntities(entities: T[]) {\r\n    this.clear();\r\n\r\n    entities.forEach(entity => {\r\n      this.initEntity(entity);\r\n    });\r\n\r\n    // 发送Load变更\r\n    const changeItem = {\r\n      path: [],\r\n      value: entities,\r\n      preValue: undefined,\r\n      type: ModifyType.Load\r\n    };\r\n    this.setChanges(changeItem);\r\n  }\r\n  /**\r\n   * 清空\r\n   */\r\n  public clear() {\r\n    this.rawData = [];\r\n  }\r\n\r\n  /**\r\n   * 添加实体对象到集合中，并返回新加的对象\r\n   * @param entity 实体对象\r\n   */\r\n  public appendNew(entity: T): T {\r\n    const newEntity = this.initEntity(entity);\r\n\r\n    // 新增变更\r\n    const changeItem = {\r\n      path: [],\r\n      value: [newEntity],\r\n      preValue: undefined,\r\n      type: ModifyType.Add\r\n    };\r\n\r\n    this.setChanges(changeItem);\r\n    return newEntity;\r\n  }\r\n\r\n  /**\r\n   * 追加实体\r\n   */\r\n  public appendEntity(entity: T): void {\r\n    const newEntity = this.initEntity(entity);\r\n\r\n    // 新增变更\r\n    const changeItem = {\r\n      path: [],\r\n      value: [newEntity],\r\n      preValue: undefined,\r\n      type: ModifyType.Add\r\n    };\r\n\r\n    this.setChanges(changeItem);\r\n  }\r\n\r\n  /**\r\n   * 批量追加实体\r\n   */\r\n  public appendEntities(entities: T[]): void {\r\n    const newEntites = entities.map((entity: T) => {\r\n      return this.initEntity(entity);\r\n    });\r\n    const changeItem = {\r\n      path: [],\r\n      value: newEntites,\r\n      preValue: undefined,\r\n      type: ModifyType.Add\r\n    };\r\n\r\n    this.setChanges(changeItem);\r\n  }\r\n\r\n  /**\r\n   * 删除指定主键ID 的实体对象，返回布尔，true 删除成功，false 删除失败\r\n   * @param primaryId 主键ID\r\n   */\r\n  public remove(primaryId: string): boolean {\r\n    const total = this.count();\r\n    const indexToRemove = this.rawData.findIndex((entity: Entity) => {\r\n      return entity.primaryValue === primaryId;\r\n    });\r\n    if (indexToRemove === -1) {\r\n      return false;\r\n    }\r\n    const entityToRemove = this.rawData[indexToRemove];\r\n    this.rawData.splice(indexToRemove, 1);\r\n\r\n    // 删除变更\r\n    const changeItem = {\r\n      path: [],\r\n      value: { [entityToRemove.primaryProperty.dataField]: primaryId },\r\n      preValue: undefined,\r\n      type: ModifyType.Remove\r\n    };\r\n\r\n    this.updateIndex(total);\r\n    this.setChanges(changeItem);\r\n\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * 从集合中获取指定ID值的实体对象\r\n   * @param id 主键值\r\n   */\r\n  public get(id: string) {\r\n    return this.items.find(item => {\r\n      return item.primaryValue === id;\r\n    });\r\n  }\r\n\r\n  /**\r\n   * 将变更记录添加到集合变更集中\r\n   * @param value 变更记录\r\n   */\r\n  public setChanges(modinfo: Modification) {\r\n    // 向app层发送的变更\r\n    this.listChanged.next(modinfo);\r\n\r\n    // 构造向changeSet中添加的chagne\r\n    const change = Object.assign({}, modinfo);\r\n    if (modinfo.type === ModifyType.Add && modinfo.value[0] instanceof Entity) {\r\n      change.value = [modinfo.value[0].data];\r\n    }\r\n    this.changeSet.append(change);\r\n  }\r\n\r\n  /** 集合总记录数 */\r\n  public count() {\r\n    return this.items.length;\r\n  }\r\n\r\n  /**\r\n   * 获取实体对象的索引值\r\n   */\r\n  public indexOf(entity: T): number {\r\n    return this.items.indexOf(entity);\r\n  }\r\n\r\n  /**\r\n   * 计算集合中某个属性的总和\r\n   * @param propertyName 属性名称\r\n   */\r\n  public sum(propertyName: string): number {\r\n    if (this.count() === 0) {\r\n      return 0;\r\n    }\r\n    return this.items.reduce((val, curr: T) => {\r\n      return val + curr[propertyName];\r\n    }, 0);\r\n  }\r\n\r\n  /**\r\n   * 已废弃：请使用toJSON方法代替\r\n   * @deprecated\r\n   */\r\n  public toJson() {\r\n    return this.rawData;\r\n  }\r\n\r\n  /**\r\n   * 转换为JSON格式\r\n   */\r\n  public toJSON(): any[] {\r\n    const result = [];\r\n    this.items.forEach((entity: Entity) => {\r\n      result.push(entity.toJSON());\r\n    });\r\n    return result;\r\n  }\r\n\r\n  public toArray(): T[] {\r\n    return this.items;\r\n  }\r\n\r\n  // #endregion\r\n\r\n\r\n  // #region 私有方法\r\n\r\n  /**\r\n   * 实体初始化\r\n   * @param entity 实体\r\n   */\r\n  private initEntity(entity: T): T {\r\n    entity[PARENT_CLASS] = this;\r\n    entity[PARENT_PATH] = this[PARENT_PATH];\r\n    entity.onValueChanged.subscribe((v: Modification) => {\r\n      const path = v.path;\r\n      const value = v.value;\r\n      const preValue = v.preValue;\r\n      const operator = v.type;\r\n      const subChanges = { path, value, preValue, type: operator };\r\n      this.setChanges(subChanges);\r\n    });\r\n    // TODO: 添加数据验证逻辑代码\r\n    const newLength = this.rawData.push(entity);\r\n    this[newLength - 1] = entity;\r\n\r\n    return entity;\r\n  }\r\n\r\n  /**\r\n   * 更新索引\r\n   * @param total 总记录数\r\n   */\r\n  private updateIndex(total: number) {\r\n    for (let i = 0; i < total; i++) {\r\n      delete this[i];\r\n    }\r\n    this.rawData.forEach((entity, index) => {\r\n      this[index] = entity;\r\n    });\r\n  }\r\n\r\n  /**\r\n   * 获取属性名称\r\n   */\r\n  private getPropertyName() {\r\n    const path = this[PARENT_PATH];\r\n    if (path && path.length) {\r\n      const name = path[path.length - 1];\r\n      return name;\r\n    }\r\n    return undefined;\r\n  }\r\n\r\n  // #endregion\r\n\r\n}\r\n","import { Entity } from './entity';\r\n\r\nexport function EntityFactory<T extends Entity>(T: new (...args: any[]) => any, data: any): T {\r\n    const entity = new T(data);\r\n    return entity;\r\n}\r\n","import { Observable, Subject, from, of } from 'rxjs';\r\nimport { scan, map, tap } from 'rxjs/operators';\r\nimport { PrimitivePropMetadata, ListPropMetadata, ObjectPropMetadata, DynamicPropMetadata, FieldMetadataUtil } from './metadata/index';;\r\nimport { Modification, ModifyType, ChangeSet } from '../changeset/index';\r\nimport { PARENT_PATH, PARENT_CLASS, Dynamic } from './types';\r\nimport { EntityList } from './entity_list';\r\nimport { EntityFactory } from './entity_factory';\r\n\r\n/**\r\n * @author Lucas Huang\r\n * 实体抽象基类，所有实体必须扩展自Entity\r\n *\r\n * ### 使用示例\r\n * ```\r\n * export class UserEntity extends Entity {\r\n *    userId: string;\r\n *    userName: string;\r\n *\r\n *    constructor(data: any){\r\n *        super(data);\r\n *    }\r\n * }\r\n * ```\r\n */\r\nexport abstract class Entity {\r\n\r\n\r\n  // #region 私有、保护属性\r\n\r\n  /**\r\n   * 验证错误集合\r\n   */\r\n  private validErrors = {};\r\n\r\n  /**\r\n   * 增量变更集合\r\n   */\r\n  protected changeSet = new ChangeSet();\r\n\r\n  /**\r\n   * 是否正在验证\r\n   */\r\n  protected isValidating = false;\r\n\r\n  /**\r\n   * 新数据\r\n   */\r\n  protected newData = undefined;\r\n\r\n  // #endregion\r\n\r\n\r\n  // #region 公有属性\r\n\r\n  /**\r\n   * 变更流\r\n   */\r\n  public valueChanged = new Subject<Modification>();\r\n\r\n  /**\r\n   * 属性值改变时触发\r\n   *\r\n   * ### 使用示例\r\n   * ```\r\n   *  const entity = new UserEntity(data);\r\n   *  entity.onValueChanged.subscribe((data: Modification) => {\r\n   *      console.log(data);\r\n   *  })\r\n   *\r\n   * ```\r\n   *\r\n   * @event\r\n   */\r\n  public onValueChanged = this.valueChanged.asObservable();\r\n\r\n  /**\r\n   * 返回JSON格式的数据\r\n   */\r\n  public get data(): any {\r\n    return this.newData;\r\n  }\r\n\r\n  /**\r\n   * 验证错误集合\r\n   */\r\n  public get errors() {\r\n    return this.validErrors;\r\n  }\r\n\r\n  /**\r\n   * 实体变更集\r\n   */\r\n  public get changes(): Modification[] {\r\n    return this.changeSet.changes;\r\n  }\r\n\r\n  /**\r\n   * 实体主键元数据\r\n   */\r\n  public get primaryProperty(): PrimitivePropMetadata {\r\n    return FieldMetadataUtil.getPrimaryFieldMetadata(this.constructor);\r\n  }\r\n\r\n  /**\r\n   * 主键\r\n   * @todo\r\n   * 1、没有主键时返回''不合理，应该返回undefined\r\n   */\r\n  public get primaryKey(): string {\r\n    if (this.primaryProperty) {\r\n      return this.primaryProperty.property;\r\n    } else {\r\n      return '';\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 实体主键值\r\n   * 1、没有主键时返回''不合理，应该返回undefined\r\n   */\r\n  public get primaryValue(): string {\r\n    if (this.primaryKey) {\r\n      // return this[this.primaryProperty.property].toString();\r\n      const primaryValue = this[this.primaryProperty.property];\r\n      return primaryValue ? primaryValue : '';\r\n    } else {\r\n      return '';\r\n    }\r\n  }\r\n\r\n  // #endregion\r\n\r\n\r\n  /**\r\n   * @param data JSON数据\r\n   */\r\n  constructor(data: any) {\r\n    this.newData = Object.assign({}, data);\r\n    this.onValueChanged = this.valueChanged;\r\n    this.initialize();\r\n  }\r\n\r\n\r\n  // #region 公有方法\r\n\r\n  /**\r\n   * 将变更记录保存至变更集中\r\n   * @param value 变更记录\r\n   */\r\n  public setChanges(value: Modification): void {\r\n    const propertyName = value.path[value.path.length - 1];\r\n\r\n    // @todo：事件会从下级向上冒泡，change可能是下级的，不能和当前Entity的newData合并。\r\n    // this.newData = Object.assign(this.newData, { [propertyName]: value.value });\r\n\r\n    this.valueChanged.next(value);\r\n    this.changeSet.append(value);\r\n  }\r\n\r\n  public getPaths() {\r\n    const pathObj = {\r\n      path: [],\r\n      isUdt: false,\r\n      isGrid: false\r\n    };\r\n    const handleParent = item => {\r\n      const parentPaths = item[PARENT_PATH];\r\n      if (parentPaths) {\r\n        const prop = parentPaths[parentPaths.length - 1];\r\n        // 父级所在实体包含的ngObject，存在当前实体字段，则判断为UDt字段\r\n        if (Object.keys(FieldMetadataUtil.getNgObjects(item[PARENT_CLASS].constructor)).indexOf(prop) > -1) {\r\n          pathObj.isUdt = true;\r\n        }\r\n        // 存在类型为ngList，则判断为grid\r\n        if (item[PARENT_CLASS] && item instanceof EntityList === true) {\r\n          pathObj.isGrid = true;\r\n        }\r\n        pathObj.path.push(prop);\r\n      }\r\n      if (item[PARENT_CLASS] && item instanceof EntityList === true) {\r\n        handleParent(item[PARENT_CLASS]);\r\n      }\r\n    };\r\n    handleParent(this);\r\n    pathObj.path = pathObj.path.reverse();\r\n    return pathObj;\r\n  }\r\n\r\n  /**\r\n   * 加载数据\r\n   * @param data 新数据\r\n   */\r\n  public load(data: any) {\r\n    if (!data) {\r\n      data = {};\r\n    }\r\n\r\n    this.loadFields(data);\r\n    this.loadLists(data);\r\n    this.loadObjects(data);\r\n\r\n    this.loadDynamicObjects(data);\r\n    this.newData = Object.assign({}, data);\r\n  }\r\n\r\n  /**\r\n   * 转换为JSON\r\n   */\r\n  public toJSON() {\r\n    const result = {};\r\n\r\n    // 简单属性\r\n    const ngFields = FieldMetadataUtil.getNgFields(this.constructor);\r\n    Object.keys(ngFields).forEach((propName: string) => {\r\n      const ngField = ngFields[propName];\r\n      const dataField = ngField.dataField || propName;\r\n      result[dataField] = this[propName];\r\n    });\r\n\r\n    // 对象属性\r\n    const ngObjects = FieldMetadataUtil.getNgObjects(this.constructor);\r\n    Object.keys(ngObjects).forEach((propName: string) => {\r\n      const ngObject = ngObjects[propName];\r\n      const dataField = ngObject.dataField || propName;\r\n      result[dataField] = this[propName] ? this[propName].toJSON() : {};\r\n    });\r\n\r\n    // 动态属性\r\n    const ngDynamics = FieldMetadataUtil.getNgDynamic(this.constructor);\r\n    Object.keys(ngDynamics).forEach((propName: string) => {\r\n      const ngDynamic = ngDynamics[propName];\r\n      const dataField = ngDynamic.dataField || propName;\r\n      result[dataField] = this[propName] ? this[propName].toJSON() : {};\r\n    });\r\n\r\n    // 列表属性\r\n    const ngLists = FieldMetadataUtil.getNgList(this.constructor);\r\n    Object.keys(ngLists).forEach((propName: string) => {\r\n      const ngList = ngLists[propName];\r\n      const dataField = ngList.dataField || propName;\r\n      result[dataField] = this[propName] ? this[propName].toJSON() : {};\r\n    });\r\n\r\n    return result;\r\n  }\r\n\r\n  // #endregion\r\n\r\n\r\n  //#region 实体初始化相关private方法\r\n\r\n  /**\r\n   * 初始化实体\r\n   */\r\n  private initialize() {\r\n    const constructor = this.constructor;\r\n\r\n    const ngFields = FieldMetadataUtil.getNgFields(constructor);\r\n    const ngObjects = FieldMetadataUtil.getNgObjects(constructor);\r\n    const ngLists = FieldMetadataUtil.getNgList(constructor);\r\n    const ngDynamic = FieldMetadataUtil.getNgDynamic(constructor);\r\n\r\n    this.initializeNormalField(ngFields);\r\n    this.initializeList(ngLists);\r\n    this.initializeObject(ngObjects);\r\n    this.initializeDynamic(ngDynamic);\r\n  }\r\n\r\n  /**\r\n   * 创建path\r\n   * @param propertyName 属性名称\r\n   */\r\n  protected createPath(propertyName: string): string[] {\r\n    const primaryFieldMetadata = this.primaryProperty;\r\n    if (primaryFieldMetadata) {\r\n      const primaryDataField = primaryFieldMetadata.dataField;\r\n      return [primaryDataField + ':' + this.primaryValue, propertyName];\r\n    } else {\r\n      return [':', propertyName];\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 属性字段初始化\r\n   * @param ngFields 属性字段元数据\r\n   */\r\n  private initializeNormalField(ngFields: { [key: string]: PrimitivePropMetadata }): void {\r\n    Object.keys(ngFields).forEach(propName => {\r\n      const ngField = ngFields[propName] as PrimitivePropMetadata;\r\n      const dataField = ngField.dataField || propName;\r\n\r\n      if (delete this[propName]) {\r\n        Object.defineProperty(this, propName, {\r\n          get: function() {\r\n            return this.getPropValue(propName, ngField);\r\n          },\r\n          set: function(newPropValue) {\r\n\r\n            // 有主键的实体，必须先给主键赋值，否则其他字段不允许赋值\r\n            if (this.primaryKey && this.primaryKey === propName && !newPropValue) {\r\n              return;\r\n            }\r\n\r\n            if (this.primaryKey && this.primaryKey !== propName && !this.primaryValue ) {\r\n              return;\r\n            }\r\n\r\n            // 值相同时不触发变更。\r\n            const oldPropValue = this.getPropValue(propName, ngField);\r\n            if (this.isPropValueChanged(propName, ngField, newPropValue, oldPropValue) === false) {\r\n              return;\r\n            }\r\n            this.setPropValue(propName, ngField, newPropValue);\r\n            this.emitValueChange(propName, ngField, newPropValue, oldPropValue);\r\n          },\r\n          configurable: true\r\n        });\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * 初始化列表类型的元数据\r\n   * @param ngListMetadata 列表类型元数据\r\n   */\r\n  private initializeList(ngListMetadata: { [key: string]: ListPropMetadata }): void {\r\n    Object.keys(ngListMetadata).forEach(propertyName => {\r\n      const fieldMetadata = ngListMetadata[propertyName] as ListPropMetadata;\r\n      const path = this.createPath(propertyName);\r\n      const dataField = fieldMetadata.dataField || propertyName;\r\n      const val = this.data[dataField];\r\n\r\n      const entityList = new EntityList<typeof fieldMetadata.type>();\r\n      entityList[PARENT_CLASS] = this;\r\n      entityList[PARENT_PATH] = path;\r\n\r\n      if (val) {\r\n        const entities = val.map(v => EntityFactory<typeof fieldMetadata.type>(fieldMetadata.type, v));\r\n        entityList.loadEntities(entities);\r\n      }\r\n\r\n      entityList.onListChanged.subscribe(value => {\r\n        if (value) {\r\n          if (entityList[PARENT_PATH][0] !== value.path[0]) {\r\n            value.path = entityList[PARENT_PATH].concat(value.path);\r\n          }\r\n          this.setChanges(value);\r\n        }\r\n      });\r\n      this[propertyName] = entityList;\r\n    });\r\n  }\r\n  /**\r\n   * 初始化子对象\r\n   * @param ngObjectMetadata 子对象元数据\r\n   */\r\n  private initializeObject(ngObjectMetadata: { [key: string]: ObjectPropMetadata }) {\r\n    Object.keys(ngObjectMetadata).forEach(propertyName => {\r\n      const fieldMetadata = ngObjectMetadata[propertyName] as ObjectPropMetadata;\r\n      const path = this.createPath(propertyName);\r\n      const dataField = fieldMetadata.dataField || propertyName;\r\n\r\n      // val不存在时，用空对象代替\r\n      const val = this.data[dataField] || {};\r\n\r\n      const createEntityFromJsonData = (value: any) => {\r\n        let instance;\r\n        if (value instanceof fieldMetadata.type) {\r\n          instance = value;\r\n        } else {\r\n          instance = EntityFactory(fieldMetadata.type, value);\r\n        }\r\n        instance[PARENT_CLASS] = this;\r\n        instance[PARENT_PATH] = path;\r\n\r\n        instance.onValueChanged.subscribe(changes => {\r\n          if (changes) {\r\n            changes.path = (this[PARENT_PATH] || []).concat(changes.path);\r\n            this.setChanges(changes);\r\n          }\r\n        });\r\n\r\n        return instance;\r\n      };\r\n\r\n      // 如果没有值用一个空对象代替\r\n      let childEntity = createEntityFromJsonData(val);\r\n      if (delete this[propertyName]) {\r\n        Object.defineProperty(this, propertyName, {\r\n          get: () => {\r\n            return childEntity;\r\n          },\r\n          set: function (value: any) {\r\n            const modifyInfo = {\r\n              path: childEntity[PARENT_PATH],\r\n              value: value.data,\r\n              preValue: this[propertyName].data,\r\n              type: ModifyType.ValueChange\r\n            };\r\n            childEntity = createEntityFromJsonData(value);\r\n            this.setChanges(modifyInfo);\r\n          },\r\n          configurable: true\r\n        });\r\n      }\r\n    });\r\n  }\r\n\r\n  private initializeDynamic(ngDynamicMetadata: { [key: string]: DynamicPropMetadata }) {\r\n    Object.keys(ngDynamicMetadata).forEach(propertyName => {\r\n      const fieldMetadata = ngDynamicMetadata[propertyName] as DynamicPropMetadata;\r\n      const path = this.createPath(propertyName);\r\n      const dataField = fieldMetadata.dataField || propertyName;\r\n\r\n      const originalData = this.data[dataField] || {};\r\n\r\n      const createEntityFromJsonData = (value: any) => {\r\n        let instance;\r\n        if (value instanceof fieldMetadata.type) {\r\n          instance = value;\r\n        } else {\r\n          instance = EntityFactory(fieldMetadata.type, value);\r\n        }\r\n        instance[PARENT_CLASS] = this;\r\n        instance[PARENT_PATH] = path;\r\n\r\n        instance.onValueChanged.subscribe(changes => {\r\n          if (changes) {\r\n            changes.path = (this[PARENT_PATH] || []).concat(changes.path);\r\n            this.setChanges(changes);\r\n          }\r\n        });\r\n\r\n        return instance;\r\n      };\r\n\r\n      let dynamicEntity = createEntityFromJsonData(originalData);\r\n      if (delete this[propertyName]) {\r\n        Object.defineProperty(this, propertyName, {\r\n          get: function () {\r\n            return dynamicEntity;\r\n          },\r\n          set: function (value) {\r\n            const modifyInfo = {\r\n              path: dynamicEntity[PARENT_PATH],\r\n              value: value.data,\r\n              preValue: this[propertyName].data,\r\n              type: ModifyType.ValueChange\r\n            };\r\n            dynamicEntity = createEntityFromJsonData(value);\r\n            this.setChanges(modifyInfo);\r\n          },\r\n          configurable: true\r\n        });\r\n      }\r\n    });\r\n  }\r\n\r\n  //#endregion\r\n\r\n\r\n  // #region 加载实体数据相关private、projected方法\r\n\r\n  /**\r\n   * 加载简单字段值\r\n   * @todo 临时用修改的方式模拟\r\n   */\r\n  protected loadFields(data: any) {\r\n    const ngFields = FieldMetadataUtil.getNgFields(this.constructor);\r\n    Object.keys(ngFields).forEach((propName: string) => {\r\n      const ngField = ngFields[propName];\r\n      const dataField = ngField.dataField || propName;\r\n      // if (ngField.primary === false) {\r\n      //   this[propName] = data[dataField];\r\n      // }\r\n      this[propName] = data[dataField];\r\n    });\r\n  }\r\n\r\n  /**\r\n   * 加载子列表数据\r\n   * @param data 数据\r\n   */\r\n  protected loadLists(data: any) {\r\n    const ngLists = FieldMetadataUtil.getNgList(this.constructor);\r\n    Object.keys(ngLists).forEach((propName: string) => {\r\n      const ngList = ngLists[propName];\r\n      const dataField = ngList.dataField || propName;\r\n      const entityType = ngList.type;\r\n\r\n      // 创建实体\r\n      const listData = data[dataField];\r\n      if (listData) {\r\n        const entities = listData.map((entityData: any) => {\r\n          return EntityFactory<typeof entityType>(entityType, entityData);\r\n        });\r\n        this[propName].loadEntities(entities);\r\n      } else {\r\n        this[propName].loadEntities([]);\r\n      }\r\n    });\r\n  }\r\n\r\n  private loadObjects(data: any) {\r\n    const ngObjects = FieldMetadataUtil.getNgObjects(this.constructor);\r\n    Object.keys(ngObjects).forEach((propName: string) => {\r\n      const ngObject = ngObjects[propName];\r\n      const dataField = ngObject.dataField || propName;\r\n      const objectData = data[dataField];\r\n      const entity = this[propName] as Entity;\r\n      if (!entity || !objectData) {\r\n        return;\r\n      }\r\n      entity.load(objectData);\r\n    });\r\n  }\r\n\r\n  protected loadDynamicObjects(data: any) {\r\n    const ngDynamicObjects = FieldMetadataUtil.getNgDynamic(this.constructor);\r\n    Object.keys(ngDynamicObjects).forEach((propName: string) => {\r\n      const ngDynamicObject = ngDynamicObjects[propName];\r\n      const dataField = ngDynamicObject.dataField || propName;\r\n\r\n      const dynamicData = data[dataField] || {};\r\n      const dynamicEntity = this[propName] as Dynamic;\r\n      if (!dynamicEntity) {\r\n        return;\r\n      }\r\n      dynamicEntity.loadDynamicData(dynamicData);\r\n    });\r\n  }\r\n\r\n  // #endregion\r\n\r\n  // #region 私有工具方法\r\n\r\n\r\n  /**\r\n   * 发送值变更\r\n   */\r\n  private emitValueChange(propName: string, propMetadata: PrimitivePropMetadata, newPropValue: any, oldPropValue: any): void {\r\n    const change = {\r\n      path: this.createPath(propName),\r\n      value: newPropValue,\r\n      preValue: oldPropValue,\r\n      type: ModifyType.ValueChange\r\n    };\r\n\r\n    if (this[PARENT_PATH]) {\r\n      change.path = this[PARENT_PATH].concat(change.path);\r\n    }\r\n    this.setChanges(change);\r\n  }\r\n\r\n  /**\r\n   * 获取属性值\r\n   */\r\n  private getPropValue(propName: string, propMetadata: PrimitivePropMetadata) {\r\n    const dataField = propMetadata.dataField || propName;\r\n    const value = this.data[dataField];\r\n\r\n    // 对多语录入字段，query不返回问题进行兼容\r\n    if (propMetadata.enableMultiLangInput === true && !value) {\r\n      const langCode = window.localStorage.getItem('languageCode') || 'zh-CHS';\r\n      const originDataField = dataField.replace('_MULTILANGUAGE', '');\r\n      return {\r\n        [langCode]: this.data[originDataField]\r\n      };\r\n    }\r\n    return value;\r\n  }\r\n\r\n  /**\r\n   * 设置属性值\r\n   */\r\n  private setPropValue(propName: string, propMetadata: PrimitivePropMetadata, propValue: any) {\r\n    const dataField = propMetadata.dataField || propName;\r\n    this.data[dataField] = propValue;\r\n  }\r\n\r\n  /**\r\n   * 检查属性值是否发生变化\r\n   */\r\n  private isPropValueChanged(propName: string, propMetadata: PrimitivePropMetadata, newPropValue: any, oldPropValue: any) {\r\n    if (propMetadata.enableMultiLangInput === true) {\r\n      if (this.isEmptyMultiLangPropValue(newPropValue) === true && this.isEmptyMultiLangPropValue(oldPropValue) === true) {\r\n        return false;\r\n      }\r\n      return JSON.stringify(newPropValue) !== JSON.stringify(oldPropValue);\r\n    } else {\r\n      return newPropValue !== oldPropValue;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 多语录入字段的值是否为空\r\n   */\r\n  private isEmptyMultiLangPropValue(value: any) {\r\n    return !value || Object.keys(value).length === 0;\r\n  }\r\n\r\n  // #endregion\r\n}\r\n","import { ModifyType, Modification } from '../changeset/types';\r\nimport { PARENT_PATH, Dynamic, PARENT_CLASS } from './types';\r\nimport { Entity } from './entity';\r\n\r\n/**\r\n * 支持动态字段集合的动态实体\r\n */\r\nexport class DynamicEntity extends Entity implements Dynamic {\r\n\r\n  /**\r\n   * 是否是嵌套的动态实体\r\n   */\r\n  public get IsNested(): boolean {\r\n    return this[PARENT_CLASS] instanceof DynamicEntity;\r\n  }\r\n\r\n  /**\r\n   * @param data JSON数据\r\n   */\r\n  constructor(data: any) {\r\n    super(data);\r\n    this.loadDynamicData(data);\r\n  }\r\n\r\n  public loadDynamicData(dynamicData: any) {\r\n    this.initializeDynamicField(dynamicData);\r\n    // super.loadFields(dynamicData);\r\n  }\r\n\r\n  /**\r\n   * 初始化动态数据\r\n   * @param dynamicData 动态数据\r\n   */\r\n  private initializeDynamicField(dynamicData: any): void {\r\n    // 遍历动态数据的key，创建动态实体属性。\r\n    Object.keys(dynamicData).forEach(propertyName => {\r\n\r\n      // 如果属性已经存在，先删除\r\n      if (this[propertyName]) {\r\n        delete this[propertyName];\r\n      }\r\n\r\n      const dataField = propertyName;\r\n      if (dynamicData[propertyName] instanceof Object) {\r\n        const path = this.createPath(propertyName);\r\n        let dynamicEntity = this.createDynamicEntityFromJsonData(dynamicData[propertyName], path);\r\n        Object.defineProperty(this, propertyName, {\r\n          get: function() {\r\n            return dynamicEntity;\r\n          },\r\n          set: function(value) {\r\n            const modifyInfo = {\r\n              path: dynamicEntity[PARENT_PATH],\r\n              value: value.data,\r\n              preValue: this[propertyName].data,\r\n              type: ModifyType.ValueChange\r\n            };\r\n            dynamicEntity = this.createDynamicEntityFromJsonData(value, path);\r\n            this.setChanges(modifyInfo);\r\n          },\r\n          configurable: true\r\n        });\r\n      } else {\r\n        Object.defineProperty(this, propertyName, {\r\n          // 定义返回数据方法。\r\n          get: function() {\r\n            // 从初始数据返回字段值。\r\n            return this.data[dataField];\r\n          },\r\n          set: function(value) {\r\n            // 值相同时不触发变更。\r\n            const oldValue = this.data[dataField];\r\n            if (oldValue === value) {\r\n              return;\r\n            }\r\n            // 更新元数据数据。\r\n            this.data[dataField] = value;\r\n            // 变更集\r\n            const changes = {\r\n              type: ModifyType.ValueChange,\r\n              path: this.createPath(propertyName),\r\n              value: value,\r\n              preValue: oldValue\r\n            };\r\n\r\n            if (this[PARENT_PATH]) {\r\n              changes.path = this[PARENT_PATH].concat(changes.path);\r\n            }\r\n            this.setChanges(changes);\r\n          },\r\n          configurable: true\r\n        });\r\n      }\r\n    });\r\n  }\r\n\r\n  private createDynamicEntityFromJsonData(value: any, parentPath: string[]) {\r\n    let instance: DynamicEntity;\r\n    if (value instanceof DynamicEntity) {\r\n      instance = value;\r\n    } else {\r\n      instance = new DynamicEntity(value);\r\n    }\r\n    instance[PARENT_CLASS] = this;\r\n    instance[PARENT_PATH] = parentPath;\r\n    instance.onValueChanged.subscribe(changes => {\r\n      if (changes) {\r\n        changes.path = (this[PARENT_PATH] || []).concat(changes.path);\r\n        this.setChanges(changes);\r\n      }\r\n    });\r\n\r\n    return instance;\r\n  }\r\n\r\n  /**\r\n   * 将变更记录保存至变更集中\r\n   * @param value 变更记录\r\n   * @todo\r\n   * 1、preValue的处理有问题，下级传递上来的变更这样可以，根DyanmicaEntity上的，data已经发生变化，prevalue和value是一样了；\r\n   * 2、当value是下级冒泡上来的，需要根据value去更新当前层级的data，该逻辑不应该放在setChagnes，待修改。\r\n   */\r\n  setChanges(value: Modification): void {\r\n    const propertyName = value.path[value.path.length - 1];\r\n    const preValue = Object.assign({}, this.data);\r\n    this.newData = Object.assign(this.newData, { [propertyName]: value.value });\r\n    let parentPath = value.path;\r\n    if (value.path.length > 2) {\r\n      parentPath = value.path.slice(0, value.path.length - 2);\r\n    }\r\n\r\n    // 统一不使用构造函数（保持和其他位置对Modification的构造一致）\r\n    // const parentModification = new Modification(this.data, value.type, parentPath, preValue);\r\n    const parentModification: Modification = {\r\n      path: parentPath,\r\n      value: this.data,\r\n      preValue: preValue,\r\n      type: value.type\r\n    };\r\n\r\n    this.valueChanged.next(parentModification);\r\n    this.changeSet.append(value);\r\n  }\r\n\r\n  /**\r\n   * toJSON\r\n   */\r\n  public toJSON() {\r\n    return this.data;\r\n  }\r\n}\r\n","import { Type, makeDecorator } from '../core/index';\r\n\r\n/**\r\n * REPOSITORY_META\r\n */\r\nexport const REPOSITORY_META = 'RepositoryMeta';\r\n\r\n\r\n/**\r\n * RepositoryMeta\r\n */\r\nexport interface RepositoryMeta {\r\n\r\n  /**\r\n   * 实体类型\r\n   */\r\n  entityType: Type<any>;\r\n}\r\n\r\n\r\n/**\r\n * RepositoryMetaDecorator\r\n */\r\nexport interface RepositoryMetaDecorator {\r\n  (obj?: RepositoryMeta): any;\r\n  new (obj?: RepositoryMeta): any;\r\n}\r\n\r\n\r\n/**\r\n * RepositoryMeta\r\n */\r\nexport function RepositoryMeta(options: RepositoryMeta) {\r\n  const decoratorFactory = makeDecorator(\r\n    REPOSITORY_META,\r\n    (obj: RepositoryMeta) => obj\r\n  );\r\n  return decoratorFactory(options);\r\n}\r\n","/*\r\n * @Author: Witt\r\n * @Date: 2018-10-01 19:36:51\r\n * @Last Modified by: aalizzwell\r\n * @Last Modified time: 2019-09-03 19:46:42\r\n */\r\nimport { Type } from '../core/index';\r\nimport { Modification, ModifyType } from '../changeset/index';\r\nimport { Subject } from 'rxjs';\r\nimport { Entity, FieldMetadataUtil, EntityList } from '../entity/index';\r\n// tslint:disable: no-bitwise\r\n/**\r\n * 实体集合\r\n * @todo：应该用EntityList代替。\r\n */\r\nclass EntityCollection<T extends Entity> {\r\n\r\n  /**\r\n   * 内部实体Set\r\n   */\r\n  private innerEntitySet: Set<T>;\r\n\r\n  /**\r\n   * 内部实体Map\r\n   */\r\n  private innerEntityMap: Map<string, T>;\r\n\r\n\r\n  /**\r\n   * Entity集合变更流\r\n   */\r\n  public collectionChanged: Subject<Modification>;\r\n\r\n  /**\r\n   * 实体类型\r\n   */\r\n  public readonly entityType: Type<T>;\r\n\r\n  /**\r\n   * 实体主键\r\n   */\r\n  public readonly primaryKey: string;\r\n\r\n  /**\r\n   * 实体当前分页信息\r\n   */\r\n  public paginationInfo: any;\r\n\r\n\r\n  /**\r\n   * 构造函数\r\n   */\r\n  constructor(entityType: Type<T>) {\r\n    this.innerEntitySet = new Set<T>();\r\n    this.innerEntityMap = new Map<string, T>();\r\n    this.collectionChanged = new Subject<Modification>();\r\n\r\n    this.entityType = entityType;\r\n    this.primaryKey = FieldMetadataUtil.getPrimaryKey(this.entityType);\r\n  }\r\n\r\n  /**\r\n   * 实体数量\r\n   */\r\n  public count(): number {\r\n    return this.innerEntitySet.size;\r\n  }\r\n\r\n  public get entityTypeName() {\r\n    return this.entityType.name;\r\n  }\r\n  /**\r\n   * 是否包含指定主键值的实体\r\n   * @param id 主键值\r\n   */\r\n  public has(id: string): boolean {\r\n    return this.innerEntityMap.has(id);\r\n  }\r\n\r\n  /**\r\n   * 清空全部实体\r\n   */\r\n  public clear() {\r\n    this.innerEntityMap.clear();\r\n    this.innerEntitySet.clear();\r\n    this.notifyCollectionChanged(new Modification([], ModifyType.Load));\r\n  }\r\n\r\n  /**\r\n   * 转换为实体数组\r\n   */\r\n  public toArray(): Entity[] {\r\n    return Array.from(this.innerEntitySet);\r\n  }\r\n\r\n  /**\r\n   * 转换为JSON数组\r\n   */\r\n  public toJSON(): any[] {\r\n    const result = [];\r\n    const entities = this.toArray();\r\n    entities.forEach((entity: Entity) => {\r\n      result.push(entity.toJSON());\r\n    });\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * 批量加载实体\r\n   */\r\n  public loadEntities(entities: any[]) {\r\n\r\n    this.innerEntityMap.clear();\r\n    this.innerEntitySet.clear();\r\n\r\n    entities.forEach(entity => {\r\n      this.innerEntitySet.add(entity);\r\n      this.innerEntityMap.set(entity[this.primaryKey], entity);\r\n    });\r\n    this.notifyCollectionChanged(new Modification(entities, ModifyType.Load));\r\n\r\n  }\r\n\r\n  /**\r\n   * 追加实体\r\n   * @param entity 要追加的实体\r\n   */\r\n  public addEntity(entity: T) {\r\n    this.verifyEntityToAdd(entity);\r\n    this.innerEntitySet.add(entity);\r\n    this.innerEntityMap.set(entity[this.primaryKey], entity);\r\n    this.notifyCollectionChanged(new Modification([entity], ModifyType.Add));\r\n  }\r\n\r\n  /**\r\n   * 批量追加实体\r\n   * @param entities 要加载的实体数组\r\n   */\r\n  public addEntities(entities: T[]) {\r\n    if (!entities) {\r\n      return;\r\n    }\r\n    const entitiesToAdd: T[] = [];\r\n    entities.forEach(entity => {\r\n      this.verifyEntityToAdd(entity);\r\n      entitiesToAdd.push(entity);\r\n    });\r\n    entitiesToAdd.forEach(entity => {\r\n      this.innerEntitySet.add(entity);\r\n      this.innerEntityMap.set(entity[this.primaryKey], entity);\r\n    });\r\n    this.notifyCollectionChanged(new Modification(entitiesToAdd, ModifyType.Add));\r\n  }\r\n\r\n\r\n\r\n  /**\r\n   * 根据主键值获取实体\r\n   */\r\n  getEntityById(identity: string): T {\r\n    if (this.innerEntityMap.has(identity) === false) {\r\n      return null;\r\n    }\r\n    const entity = this.innerEntityMap.get(identity);\r\n    return entity;\r\n  }\r\n\r\n  /**\r\n   * 根据路径获取实体\r\n   */\r\n  getEntityByPath(pathArray: string[]): any {\r\n    const rootEntityId = pathArray[0].split(':')[1];\r\n\r\n    let parentNode: any = this.getEntityById(rootEntityId);\r\n    for (let i = 1; i < pathArray.length && parentNode; i = i + 1) {\r\n      const currentPath = pathArray[i];\r\n      if (parentNode instanceof Entity) {\r\n\r\n        // @todo：强识了别冒号\r\n        if (currentPath.indexOf(':') === -1) {\r\n          parentNode = parentNode[pathArray[i]];\r\n        }\r\n      } else {\r\n        parentNode = parentNode.get(pathArray[i].split(':')[1]);\r\n      }\r\n    }\r\n\r\n    return parentNode;\r\n  }\r\n\r\n  /**\r\n   * 返回符合指定条件的实体集合\r\n   * @param predicate 条件谓词\r\n   */\r\n  getEntities(predicate: (value: T, index: number, array: T[]) => T): T[] {\r\n    const entities: T[] = Array.from(this.innerEntitySet);\r\n    const matchedEntities = entities.filter(predicate);\r\n    return matchedEntities;\r\n  }\r\n\r\n  /**\r\n   * 获取全部实体\r\n   */\r\n  getAllEntities(): T[] {\r\n    return Array.from(this.innerEntitySet);\r\n  }\r\n\r\n  /**\r\n   * 根据主键值删除对应实体\r\n   * @param identity 主键值\r\n   */\r\n  removeEntityById(identity: string): T {\r\n    this.verifyEntityToRemove(identity);\r\n    const entityToRemove = this.innerEntityMap.get(identity);\r\n    this.innerEntityMap.delete(identity);\r\n    this.innerEntitySet.delete(entityToRemove);\r\n    this.notifyCollectionChanged(new Modification([entityToRemove], ModifyType.Remove));\r\n    return entityToRemove;\r\n  }\r\n\r\n  removeEntitiesByIds(id: string) {\r\n  }\r\n\r\n  /**\r\n   * 删除符合条件的实体集合\r\n   */\r\n  public removeEntities(predicate: (value: T, index: number, array: T[]) => any): T[] {\r\n    const entitiesToRemove = Array.from(this.innerEntitySet).filter(predicate);\r\n    entitiesToRemove.forEach(entityToRemove => {\r\n      this.innerEntityMap.delete(entityToRemove[this.primaryKey]);\r\n      this.innerEntitySet.delete(entityToRemove);\r\n    });\r\n    this.notifyCollectionChanged(new Modification(entitiesToRemove, ModifyType.Remove));\r\n    return entitiesToRemove;\r\n  }\r\n  /**\r\n   * 重置子表数据\r\n   * @param paths 路径  \r\n   * 路径格式 ['实体主键:主键值','从表Codes','从从表Codes']\r\n   * @param entities 实体数组\r\n   */\r\n  public resetEntities(paths: string[], entities: T[]) {\r\n    if (paths[0].indexOf(':') === -1) {\r\n      throw new Error('路径格式错误');\r\n    }\r\n    // paths里面第一个一定是id\r\n    const entityInfo: string[] = paths[0].split(':');\r\n    const [entityPrimaryKey, entityId] = entityInfo;\r\n    let entity: T = null;\r\n    for (const element of this.innerEntitySet) {\r\n      if (element[entityPrimaryKey] === entityId) {\r\n        entity = element;\r\n        break;\r\n      }\r\n    }\r\n    // for (let index = 0; index < this.innerEntitySet; index++) {\r\n    //   const element: T = this.innerEntitySet[index];\r\n    //   if (element[entityPrimaryKey] === entityId) {\r\n    //     entity = element;\r\n    //     break;\r\n    //   }\r\n    // }\r\n    if (!entity) {\r\n      throw new Error(`找不到${entityPrimaryKey}为${entityId}的实体`);\r\n    }\r\n    let data: any = entity;\r\n    paths.slice(1).forEach(path => {\r\n      data = data[path];\r\n    });\r\n    const entityList = data as EntityList<T>;\r\n    entityList.clear();\r\n    entityList.loadEntities(entities);\r\n  }\r\n\r\n  /**\r\n   * 验证实体是否能够添加\r\n   */\r\n  private verifyEntityToAdd(entity: T): boolean {\r\n    if (this.has(entity[this.primaryKey])) {\r\n      this.innerEntitySet.delete(this.innerEntityMap.get(entity[this.primaryKey]));\r\n      this.innerEntityMap.delete(entity[this.primaryKey]);\r\n      // throw new Error(`The repository already had an item with the save identity of '${entity[this.primaryKey]}'`);\r\n    }\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * 验证实体是否能移除\r\n   */\r\n  private verifyEntityToRemove(identity: string): boolean {\r\n    if (!this.has(identity)) {\r\n      throw new Error(`The entity with identity of '${identity} dose not exsit.'`);\r\n    }\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * 实体集合变更流\r\n   */\r\n  private notifyCollectionChanged(modification: Modification) {\r\n    this.collectionChanged.next(modification);\r\n  }\r\n\r\n  //#region 分页\r\n\r\n  /**\r\n   * 设置分页大小\r\n   */\r\n  set pageSize(pageSize: number) {\r\n    if (typeof (pageSize) !== 'number' || pageSize < 0) {\r\n      throw new Error('Invalid parameter:pageSize');\r\n    }\r\n\r\n    const original = this.paginationInfo;\r\n    // const entityPaginationInfo = Object.assign({}, original[this.entityTypeName], { pageSize });\r\n    // this.paginationInfo = Object.assign({}, original, { [this.entityTypeName]: entityPaginationInfo });\r\n    // this.notifyCollectionChanged(new Modification(this.paginationInfo[this.entityTypeName], ModifyType.PaginationInfoChange));\r\n    this.paginationInfo = Object.assign({}, original, { pageSize });\r\n    this.notifyCollectionChanged(new Modification(this.paginationInfo, ModifyType.PaginationInfoChange));\r\n  }\r\n  /**\r\n   * 获取分页大小\r\n   * @description 如果用户未指定分页大小则默认为0，即获取所有数据\r\n   */\r\n  get pageSize(): number {\r\n    if (!!this.paginationInfo) {\r\n      return this.paginationInfo.pageSize || 0;\r\n    }\r\n    return 0;\r\n  }\r\n  /**\r\n   * 设置数据总条数\r\n   */\r\n  set totalCount(total: number) {\r\n    if (typeof (total) !== 'number' || total < 0) {\r\n      throw new Error('Invalid parameter:total');\r\n    }\r\n\r\n    const original = this.paginationInfo;\r\n    // const entityPaginationInfo = Object.assign({}, original[this.entityTypeName], { total });\r\n    // this.paginationInfo = Object.assign({}, original, { [this.entityTypeName]: entityPaginationInfo });\r\n    this.paginationInfo = Object.assign({}, original, { total });\r\n    this.notifyCollectionChanged(new Modification(this.paginationInfo, ModifyType.PaginationInfoChange));\r\n  }\r\n  /**\r\n   * 获取数据总条数\r\n   */\r\n  get totalCount(): number {\r\n    if (!!this.paginationInfo) {\r\n      return this.paginationInfo.total || 0;\r\n    }\r\n    return 0;\r\n  }\r\n  /**\r\n   * 设置当前页码\r\n   */\r\n  set pageIndex(pageIndex: number) {\r\n    if (typeof (pageIndex) !== 'number' || pageIndex < 0) {\r\n      throw new Error('Invalid parameter:pageIndex');\r\n    }\r\n\r\n    const original = this.paginationInfo;\r\n    // const entityPaginationInfo = Object.assign({}, original[this.entityTypeName], { pageIndex });\r\n    // this.paginationInfo = Object.assign({}, original, { [this.entityTypeName]: entityPaginationInfo });\r\n    this.paginationInfo = Object.assign({}, original, { pageIndex });\r\n    this.notifyCollectionChanged(new Modification(this.paginationInfo, ModifyType.PaginationInfoChange));\r\n  }\r\n  /**\r\n   * 获取当前页码\r\n   */\r\n  get pageIndex(): number {\r\n    if (!!this.paginationInfo) {\r\n      return this.paginationInfo.pageIndex || 1;\r\n    }\r\n    return 1;\r\n  }\r\n  /**\r\n   * 更新分页信息\r\n   * @param path 绑定路径\r\n   * @param pageInfo 分页信息\r\n   */\r\n  public updatePaginationInfoByPath(path: string, pageInfo: { pageIndex: any, pageSize: any, totalCount: any, [prop: string]: any }) {\r\n    const original = this.paginationInfo;\r\n    const { pageIndex, pageSize, totalCount: total } = pageInfo;\r\n    const paginationInfo = Object.assign({}, original, { pageIndex, pageSize, total });\r\n    this.setPaginationConfigByPath(path, paginationInfo);\r\n  }\r\n  /**\r\n   * 根据路径获取分页大小\r\n   * @param path 路径\r\n   */\r\n  public getPaginationConfigByPath(path: string, defaultValue?: any) {\r\n    if (!path || path === '/') {\r\n      return this.paginationInfo;\r\n    }\r\n    if (typeof path !== 'string') {\r\n      throw new Error('路径必须为字符串！');\r\n    }\r\n    path = path.substring(1);\r\n    const paths = path.split('/').filter(item => !!item && item.trim().length > 0).map(item => item.trim());\r\n    let config = this.paginationInfo;\r\n    paths.forEach(item => {\r\n      if (config && config.hasOwnProperty(item)) {\r\n        config = config[item];\r\n      } else {\r\n        config = null;\r\n      }\r\n    });\r\n    return !!config ? config : typeof defaultValue !== 'undefined' ? defaultValue : undefined;\r\n  }\r\n  /**\r\n   * 设置分页信息\r\n   * @param path 路径\r\n   * @param value 值\r\n   */\r\n  public setPaginationConfigByPath(path: string | Array<any>, value: any) {\r\n    const original = JSON.stringify(this.paginationInfo);\r\n    if (!path || path === '/') {\r\n      this.paginationInfo = value;\r\n    } else {\r\n      if (!Array.isArray(path)) {\r\n        path = path.toString().match(/[^/[\\]]+/g) || [];\r\n      }\r\n      path.slice(0, -1).reduce((prev, current, index) =>\r\n        Object(prev[current]) === prev[current]\r\n          ? prev[current]\r\n          : prev[current] = Math.abs(path[index + 1]) >> 0 === +path[index + 1]\r\n            ? []\r\n            : {},\r\n        this.paginationInfo)[path[path.length - 1]] = value;\r\n    }\r\n\r\n    if (JSON.stringify(this.paginationInfo) !== original) {\r\n      this.notifyCollectionChanged(new Modification(this.paginationInfo, ModifyType.PaginationInfoChange));\r\n    }\r\n    return this.paginationInfo;\r\n  }\r\n  //#endregion\r\n}\r\n\r\nexport { EntityCollection };\r\n","/*\r\n * @Author: Witt\r\n * @Date: 2019-03-07 17:24:38\r\n * @Last Modified by:   Witt\r\n * @Last Modified time: 2019-03-11 19:50:38\r\n */\r\n\r\nimport { Type } from '../core/index';\r\nimport { Entity, EntityList, createEntity, createEntities } from '../entity/index';\r\nimport { EntityCollection } from './entity_collection';\r\nimport { DataPath, DataPathCreator, DataPathNodeType, DataTypeInfo } from '../entity/index';\r\nimport { EntityUtil } from '../binding-data/entity_util';\r\n\r\n\r\n/**\r\n * 实体管理类\r\n */\r\nclass EntityManager<T extends Entity> {\r\n\r\n  /**\r\n   * 实体类型\r\n   */\r\n  public entityType: Type<Entity>;\r\n\r\n  /**\r\n   * 实体集合\r\n   */\r\n  public entityCollection: EntityCollection<Entity>;\r\n\r\n  /**\r\n   * 构造函数\r\n   */\r\n  constructor(entityCollection: EntityCollection<T>) {\r\n    this.entityCollection = entityCollection;\r\n    this.entityType = entityCollection.entityType;\r\n  }\r\n\r\n\r\n  // #region 创建实体相关方法\r\n\r\n  /**\r\n   * 创建实体\r\n   */\r\n  public createEntity(entityData: any): T {\r\n    const entity = createEntity<T>(this.entityType, entityData);\r\n    return entity;\r\n  }\r\n\r\n  /**\r\n   * 批量创建实体\r\n   */\r\n  public createEntities(entityListData: any[], entityType: any): T[] {\r\n    const entities: T[] = createEntities<T>(this.entityType, entityListData);\r\n    return entities;\r\n  }\r\n\r\n  // #endregion\r\n\r\n\r\n  // #region 获取实体、实体数组相关方法\r\n\r\n  /**\r\n   * 获取path对应的实体\r\n   */\r\n  public getEntityByPath(path: string[]): Entity {\r\n    const entity = this.getEntityNodeByPath(path) as Entity;\r\n    return entity;\r\n  }\r\n\r\n  /**\r\n   * 获取path对应的实体\r\n   */\r\n  public getEntitiesByPath(path: string[]): Entity[] {\r\n    const entityCollectionOrList = this.getEntityNodeByPath(path) as EntityCollection<Entity> | EntityList<Entity>;\r\n    let entities: Entity[];\r\n    if (entityCollectionOrList instanceof EntityCollection === true) {\r\n      entities = (entityCollectionOrList as EntityCollection<Entity>).toArray();\r\n    } else {\r\n      entities = (entityCollectionOrList as EntityList<Entity>).toArray();\r\n    }\r\n    return entities;\r\n  }\r\n\r\n  /**\r\n   * 获取实体节点\r\n   * @param path 节点路径\r\n   */\r\n  private getEntityNodeByPath(path: string[]): EntityCollection<Entity> | EntityList<Entity> | Entity {\r\n    const dataPath = DataPathCreator.createByLongPathFromRoot(path, this);\r\n    let entityNode: any = this.entityCollection;\r\n    let pathNode = dataPath.head.next;\r\n    while (pathNode) {\r\n      if (pathNode.type === DataPathNodeType.DataId) {\r\n        if (entityNode instanceof EntityCollection === true) {\r\n          entityNode = (entityNode as EntityCollection<Entity>).getEntityById(pathNode.value);\r\n        } else {\r\n          entityNode = (entityNode as EntityList<Entity>).get(pathNode.value);\r\n        }\r\n      } else {\r\n        entityNode = entityNode[pathNode.value];\r\n      }\r\n      if (!entityNode) {\r\n        throw new Error(`找不到${pathNode.value}对应的数据节点`);\r\n      }\r\n      pathNode = pathNode.next;\r\n    }\r\n    return entityNode;\r\n  }\r\n  // #endregion\r\n\r\n\r\n  // #region 获取、设置属性值\r\n\r\n  /**\r\n   * 获取path对应的实体属性值\r\n   */\r\n  public getPropValueByPath(path: string[]): any {\r\n    const propName = path.pop();\r\n    const entity = this.getEntityByPath(path);\r\n    return entity[propName];\r\n  }\r\n\r\n  /**\r\n   * 设置path对应实体的属性值\r\n   */\r\n  public setPropValueByPath(path: string[], propValue: any): void {\r\n    const propName = path.pop();\r\n    const entity = this.getEntityByPath(path);\r\n    entity[propName] = propValue;\r\n  }\r\n\r\n  // #endregion\r\n\r\n\r\n  // #region 插入实体\r\n\r\n  /**\r\n   * 在path对应实体前插入实体\r\n   */\r\n  public insertEntityBeforeByPath(fpath: string[]) {\r\n    throw new Error('Not Implemented');\r\n  }\r\n\r\n  /**\r\n   * 在path对应实体前批量插入实体\r\n   */\r\n  public insertEntitiesBeforeByPath() {\r\n    throw new Error('Not Implemented');\r\n  }\r\n\r\n  /**\r\n   * 在path对应实体前插入实体\r\n   */\r\n  public insertEntityAfterByPath() {\r\n    throw new Error('Not Implemented');\r\n  }\r\n\r\n  /**\r\n   * 在path对应实体前批量插入实体\r\n   */\r\n  public insertEntitiesAfterByPath() {\r\n    throw new Error('Not Implemented');\r\n  }\r\n\r\n  // #endregion\r\n\r\n\r\n  // #region 追加实体\r\n\r\n  /**\r\n   * 在path对应的实体集合中追加1个实体\r\n   */\r\n  // public appendEntityByPath(fpath: string[], entity: Entity): void {\r\n  //   const entityCollectionOrList = this.getEntityNodeByPath(fpath);\r\n  //   if (entityCollectionOrList instanceof EntityCollection === true) {\r\n  //     const entityCollection = entityCollectionOrList as EntityCollection<Entity>;\r\n  //     entityCollection.addEntity(entity);\r\n  //   } else {\r\n  //     const entityList = (entityCollectionOrList as EntityList<Entity>);\r\n  //     entityList.appendEntity(entity);\r\n  //   }\r\n  // }\r\n\r\n  /**\r\n   * 根据path获取实体集合\r\n   * @param fpath 路径\r\n   * @param entityData 实体数据\r\n   * @param initialData[可选] 默认值\r\n   */\r\n  public appendEntityByPath(fpath: string, entityData: any, initialData?: any): Entity {\r\n    const subPaths = fpath.split('/');\r\n    if (subPaths.length < 3) {\r\n      throw Error(`根据path删除实体数据出错了。传入的path[${fpath}]格式不对`);\r\n    }\r\n\r\n    let childEntityList: EntityList<any>;\r\n    let propInfo: { propType: string, propEntityType: any };\r\n    let propName: string;\r\n    for (let i = 2; i < subPaths.length; i = i + 2) {\r\n      const fid = subPaths[i - 1];\r\n      propName = subPaths[i];\r\n\r\n      // todo: EntityCollection重构之后这里无需差异处理\r\n      const parentEntity = childEntityList ? childEntityList.get(fid) : this.entityCollection.getEntityById(fid);\r\n      childEntityList = parentEntity[propName];\r\n      const entityType = propInfo ? propInfo.propEntityType : this.entityType;\r\n      propInfo = EntityUtil.getPropInfo(entityType, propName);\r\n      if (!childEntityList) {\r\n        throw Error(`fpath参数错误，无法找到${propName}对应的子表。fpath为：${fpath}`);\r\n      }\r\n    }\r\n\r\n    // const propInfo = EntityUtil.getPropInfo(this.entityType, propName);\r\n    const childEntity = createEntity<Entity>(propInfo.propEntityType, entityData);\r\n    // 在实体的实例上增加默认值属性，以便在createBindingObject时存放默认值\r\n    if (initialData) {\r\n      EntityUtil.appendInitialData(childEntity, initialData);\r\n    }\r\n    childEntityList.appendNew(childEntity);\r\n    return childEntity;\r\n  }\r\n\r\n\r\n  /**\r\n   * 在path对应的实体集合中追加多个实体\r\n   */\r\n  public appendEntitiesByPath(fpath: string[], entities: Entity[]) {\r\n    const entityCollectionOrList = this.getEntityNodeByPath(fpath);\r\n    if (entityCollectionOrList instanceof EntityCollection === true) {\r\n      const entityCollection = entityCollectionOrList as EntityCollection<Entity>;\r\n      entityCollection.addEntities(entities);\r\n    } else {\r\n      const entityList = (entityCollectionOrList as EntityList<Entity>);\r\n      entityList.appendEntities(entities);\r\n    }\r\n  }\r\n\r\n  // #endregion\r\n\r\n\r\n  // #region 删除实体\r\n\r\n  /**\r\n   * 从fapth对应的实体集合中删除id对应的实体\r\n   */\r\n  // public removeEntityByPath(fpath: string[], id: string): void {\r\n  //   const entityCollectionOrList = this.getEntityNodeByPath(fpath);\r\n  //   if (entityCollectionOrList instanceof EntityCollection === true) {\r\n  //     const entityCollection = entityCollectionOrList as EntityCollection<Entity>;\r\n  //     entityCollection.removeEntityById(id);\r\n  //   } else {\r\n  //     const entityList = (entityCollectionOrList as EntityList<Entity>);\r\n  //     entityList.remove(id);\r\n  //   }\r\n  // }\r\n\r\n  /**\r\n   * 根据path获取实体集合\r\n   * @param fpath path\r\n   */\r\n  public removeEntityByPath(fpath: string, id: string) {\r\n    const subPaths = fpath.split('/');\r\n    if (subPaths.length < 3) {\r\n      throw Error(`根据path删除实体数据出错了。传入的path[${fpath}]格式不对`);\r\n    }\r\n    let childEntityList: EntityList<any>;\r\n    for (let i = 2; i < subPaths.length; i = i + 2) {\r\n      const fid = subPaths[i - 1];\r\n      const propName = subPaths[i];\r\n      const parentEntity = childEntityList ? childEntityList.get(fid) : this.entityCollection.getEntityById(fid);\r\n      childEntityList = parentEntity[propName];\r\n      if (!childEntityList) {\r\n        throw Error(`fpath参数错误，无法找到${propName}对应的子表。fpath为：${fpath}`);\r\n      }\r\n    }\r\n\r\n    childEntityList.remove(id);\r\n  }\r\n\r\n  /**\r\n   * 从fapth对应的实体集合中删除ids对应的实体\r\n   */\r\n  public removeEntitiesByPath(fpath: string[], ids: string[]): void {\r\n    // const entityCollectionOrList = this.getEntityNodeByPath(fpath);\r\n    // if (entityCollectionOrList instanceof EntityCollection === true) {\r\n    //   const entityCollection = entityCollectionOrList as EntityCollection<Entity>;\r\n    //   entityCollection.removeEntitiesByIds(ids);\r\n    // } else {\r\n    //   const entityList = (entityCollectionOrList as EntityList<Entity>);\r\n    //   entityList.remove(ids);\r\n    // }\r\n    throw new Error('Not Implemented');\r\n  }\r\n  // #endregion\r\n\r\n\r\n  // #region 清空变更集相关方法\r\n\r\n  /**\r\n   * 清空所有实体的变更集\r\n   */\r\n  public clearAllEntityChanges() {\r\n    const entities = this.entityCollection.toArray();\r\n    entities.forEach((entity: Entity) => {\r\n      entity.changes.splice(0, entity.changes.length);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * 清空id指定的实体变更集\r\n   */\r\n  public clearEntityChangesById(id: string): void {\r\n    const entity = this.entityCollection.getEntityById(id);\r\n    if (!entity) {\r\n      return;\r\n    }\r\n    entity.changes.splice(0, entity.changes.length);\r\n  }\r\n\r\n  /**\r\n   * 清空ids数组中指定的实体的变更集\r\n   */\r\n  public clearEntityChangesByIds(ids: string[]): void {\r\n    if (!ids || ids.length < 0) {\r\n      return;\r\n    }\r\n\r\n    ids.forEach((id: string) => {\r\n      this.clearEntityChangesById(id);\r\n    });\r\n  }\r\n\r\n  // #endregion\r\n\r\n\r\n  // #region 变更集检查相关方法\r\n\r\n  /**\r\n   * 检查所有的实体，是否有未提交的变更\r\n   */\r\n  public checkAllEntityChanges(): boolean {\r\n\r\n    const entities = this.entityCollection.toArray();\r\n    const hasChanges = entities.some((entity: Entity) => {\r\n      if (entity.changes.length > 0) {\r\n        return true;\r\n      } else {\r\n        return false;\r\n      }\r\n    });\r\n    return hasChanges;\r\n  }\r\n\r\n  /**\r\n   * 检查id对应的实体，是否有未提交的变更\r\n   */\r\n  public checkEntityChangesById(id: string): boolean {\r\n    const entity = this.entityCollection.getEntityById(id);\r\n    if (!entity) {\r\n      return false;\r\n    }\r\n    return entity.changes.length > 0;\r\n  }\r\n\r\n  // #endregion\r\n\r\n\r\n  // #region 不规范方法，待废弃\r\n\r\n  /**\r\n   * 待废弃\r\n   * @deprecated\r\n   */\r\n  public clearEntityChangesByArray(idArray: string[]): void {\r\n    this.clearEntityChangesByIds(idArray);\r\n  }\r\n\r\n  // #endregion\r\n\r\n}\r\n\r\nexport { EntityManager };\r\n","import { Type  } from '../core/index';\r\nimport { Entity, FieldMetadataUtil } from '../entity/index';\r\n// tslint:disable: no-bitwise\r\n\r\nexport class PaginationManager<T extends Entity> {\r\n\r\n    constructor(private entityType: Type<T>, private paginationConfig: any) {\r\n        if (this.paginationConfig === null || this.paginationConfig === undefined) {\r\n            this.paginationConfig = this.getNgListProperties();\r\n        }\r\n        // 兼容老表单，将之前的主表分页信息展开到分页配置根中\r\n        this.expandMainEntityConfig();\r\n        this.deleteMainEntityConfig();\r\n    }\r\n    /**\r\n     * 主表分页信息展开到分页配置根中\r\n     */\r\n    private expandMainEntityConfig() {\r\n        const entityName = this.entityType.name;\r\n        if (this.paginationConfig.hasOwnProperty(entityName)) {\r\n            const entityConfig = this.paginationConfig[entityName];\r\n            this.paginationConfig = Object.assign(this.paginationConfig, entityConfig);\r\n        }\r\n    }\r\n    /**\r\n     * 删除主表实体配置信息\r\n     */\r\n    private deleteMainEntityConfig() {\r\n        delete this.paginationConfig[this.entityType.name];\r\n    }\r\n    /**\r\n     * 获取分页信息\r\n     */\r\n    public get pagination() {\r\n        return this.paginationConfig;\r\n    }\r\n    /**\r\n     * 获取分页信息\r\n     * @param path 路径\r\n     * @param defaultValue 默认值\r\n     */\r\n    public getPaginationConfigByPath(path: string, defaultValue?: any) {\r\n        if (!path || path === '/') {\r\n            return this.paginationConfig;\r\n        }\r\n        if (typeof path !== 'string') {\r\n            throw new Error('路径必须为字符串！');\r\n        }\r\n        path = path.substring(1);\r\n        const paths = path.split('/').filter(item => !!item && item.trim().length > 0);\r\n        let config = this.paginationConfig;\r\n        paths.forEach(item => {\r\n            if (config && config.hasOwnProperty(item)) {\r\n                config = config[item];\r\n            } else {\r\n                config = null;\r\n            }\r\n        });\r\n        return !!config ? config : typeof defaultValue !== 'undefined' ? defaultValue : undefined;\r\n    }\r\n    /**\r\n     * 设置分页信息\r\n     * @param path 路径\r\n     * @param value 值\r\n     */\r\n    public setPaginationConfigByPath(path: string | Array<any>, value: any) {\r\n        if (!Array.isArray(path)) {\r\n            path = path.toString().match(/[^/[\\]]+/g) || [];\r\n        }\r\n        path.slice(0, -1).reduce((prev, current, index) =>\r\n            Object(prev[current]) === prev[current]\r\n                ? prev[current]\r\n                : prev[current] = Math.abs(path[index + 1]) >> 0 === +path[index + 1]\r\n                    ? []\r\n                    : {},\r\n            this.paginationConfig)[path[path.length - 1]] = value;\r\n        return this.paginationConfig;\r\n    }\r\n\r\n    /**\r\n     * 递归获取当前实体的所有NgList属性\r\n     * @param defaultPageSize defaultPageSize\r\n     */\r\n    private getNgListProperties(defaultPageSize: number = 0) {\r\n\r\n        const getChilds = (objectType: Type<Entity>) => {\r\n            const listProperties = FieldMetadataUtil.getNgList(objectType);\r\n            let result = {};\r\n            if (Object.keys(listProperties).length < 1) {\r\n                return result;\r\n            }\r\n\r\n            Object.keys(listProperties).forEach(prop => {\r\n                let itemTypeName = listProperties[prop].dataField;\r\n                // 去掉尾部的s\r\n                if (itemTypeName.endsWith('s')) {\r\n                    itemTypeName = itemTypeName.substring(0, itemTypeName.length - 1);\r\n                }\r\n                result[itemTypeName] = {\r\n                    pageSize: defaultPageSize\r\n                };\r\n                const child = getChilds(listProperties[prop].type);\r\n                if (child !== null && Object.keys(child).length > 0) {\r\n                    result = Object.assign({}, result, child);\r\n                }\r\n            });\r\n            return result;\r\n        };\r\n        const childs = getChilds(this.entityType);\r\n        const root = Object.assign({}, { pageSize: defaultPageSize }, childs);\r\n        return root;\r\n    }\r\n\r\n}\r\n","import { DataChange, DataChangeType } from '../core';\r\n\r\nclass DataChangeHistory {\r\n    private history: Array<DataChange>;\r\n    constructor() {\r\n        this.history = [];\r\n    }\r\n    public addChange(dataChange: DataChange) {\r\n        const changeType = DataChangeType[dataChange.changeType];\r\n        this[`on${changeType}Data`](dataChange);\r\n    }\r\n    public addChanges(dataChange: DataChange[]) {\r\n        dataChange.forEach(change => this.addChange(change));\r\n    }\r\n    public clear() {\r\n        this.history.splice(0, this.history.length);\r\n    }\r\n    public clearByIds(ids: string[]) {\r\n        this.history = this.history.filter(item => {\r\n            if (item.fpath && item.fpath !== '/' && item.fpath.includes('/')) {\r\n                for (const id of ids) {\r\n                    const include = item.fpath.split('/').includes(id);\r\n                    return !include;\r\n                }\r\n            } else {\r\n                return !ids.includes(item.dataId);\r\n            }\r\n        });\r\n    }\r\n    public isChanged() {\r\n        return this.history.length > 0;\r\n    }\r\n    private onAddData(dataChange: DataChange) {\r\n        this.history.push(dataChange);\r\n    }\r\n    private onDeleteData(dataChange: DataChange) {\r\n        const index = this.history.findIndex(item => item.dataId === dataChange.dataId && item.changeType === DataChangeType.Add);\r\n        if (index >= 0) {\r\n            this.history.splice(index, 1);\r\n        } else {\r\n            this.history.push(dataChange);\r\n        }\r\n    }\r\n}\r\nexport { DataChangeHistory };\r\n","/*\r\n * @Author: Witt\r\n * @Date: 2018-10-12 15:37:11\r\n * @Last Modified by: aalizzwell\r\n * @Last Modified time: 2019-09-03 19:10:44\r\n * @todo 待优化问题\r\n * 1、apiUrl是否应该在基类中，子类中的api如何传递给基类；\r\n */\r\n\r\nimport { Type } from '../core/index';\r\nimport { Observable, Subject } from 'rxjs';\r\n\r\nimport { DataTypeInfo } from '../entity/index';\r\nimport { Guid } from '../utils/index';\r\nimport { Modification } from '../changeset/index';\r\nimport { MetadataUtil } from '../core/index';\r\nimport { Entity, createEntity, createEntities, FieldMetadataUtil } from '../entity/index';\r\nimport { RepositoryMeta } from './decorators';\r\nimport { EntityCollection } from './entity_collection';\r\nimport { PaginationManager } from './pagination_manager';\r\nimport { DataChangeHistory } from './data_change_history';\r\n\r\nexport abstract class Repository<T extends Entity> {\r\n\r\n  /**\r\n   * 名称\r\n   */\r\n  abstract name: string;\r\n\r\n  /**\r\n   * 实体类型\r\n   */\r\n  public entityType: Type<T>;\r\n\r\n  /**\r\n   * 实体类型信息\r\n   */\r\n  public entityTypeInfo: DataTypeInfo;\r\n\r\n  /**\r\n   * 实体集合\r\n   */\r\n  public entityCollection: EntityCollection<T>;\r\n\r\n  /**\r\n   * 用户分页配置信息\r\n   */\r\n  public paginationInfo: any = null;\r\n\r\n  /**\r\n   * 数据变更历史\r\n   * @summary\r\n   * 仅针对主表增加、从表删除\r\n   */\r\n  public dataChangeHistory: DataChangeHistory;\r\n\r\n\r\n  /**\r\n   * 分页管理器\r\n   */\r\n  public paginationManager: PaginationManager<T>;\r\n\r\n  /**\r\n   * 构造函数\r\n   */\r\n  constructor() {\r\n  }\r\n\r\n  protected init() {\r\n    this.entityTypeInfo = new DataTypeInfo(this.entityType);\r\n    this.entityCollection = new EntityCollection<T>(this.entityType);\r\n    this.dataChangeHistory = new DataChangeHistory();\r\n  }\r\n\r\n  /**\r\n   * 实体主键\r\n   */\r\n  public get primaryKey(): string {\r\n    return this.entityCollection.primaryKey;\r\n  }\r\n\r\n  /**\r\n   * 实体变更集合\r\n   */\r\n  public get entityCollectionChange(): Subject<Modification> {\r\n    return this.entityCollection.collectionChanged;\r\n  }\r\n\r\n  /**\r\n   * 重置状态\r\n   */\r\n  public reset(): void {\r\n    this.entityCollection.clear();\r\n  }\r\n\r\n  /**\r\n   * 创建实体\r\n   */\r\n  public buildEntity(data: any): T {\r\n    const entity = createEntity<T>(this.entityType, data);\r\n    return entity;\r\n  }\r\n\r\n  /**\r\n   * 批量创建实体\r\n   */\r\n  public buildEntities(listData: any[]): T[] {\r\n    const entities: T[] = createEntities<T>(this.entityType, listData);\r\n    return entities;\r\n  }\r\n\r\n  /**\r\n   * 初始化分页配置\r\n   * @param config 用户分页配置\r\n   */\r\n  setPaginationConfig(config: any) {\r\n    this.paginationManager = new PaginationManager(this.entityType, config);\r\n    const { pageSize = 0 } = this.paginationManager.getPaginationConfigByPath('/') || {};\r\n    // tslint:disable-next-line: max-line-length\r\n    this.entityCollection.paginationInfo = Object.assign({ pageSize }, this.entityCollection.paginationInfo, this.paginationManager.pagination);\r\n\r\n    // 无需再单独设置一次pageSize，减少一次变更\r\n    // this.entityCollection.pageSize = pageSize;\r\n  }\r\n\r\n  /**\r\n   * 设置分页\r\n   */\r\n  public setPaginationInfo(paginationInfo: any) {\r\n    this.paginationInfo = { ...this.paginationInfo, ...paginationInfo };\r\n  }\r\n  \r\n}\r\n","import { Entity } from '../entity/index';\r\nimport { Repository } from './repository';\r\nimport { EntityManager } from './entity_manager';\r\n\r\n/**\r\n * 空Repository实现\r\n */\r\nabstract class DefaultRepository<T extends Entity> extends Repository<T> {\r\n\r\n  /**\r\n   * 名称\r\n   */\r\n  abstract name: string;\r\n\r\n  /**\r\n   * 实体管理器\r\n   */\r\n  public entityManager: EntityManager<T>;\r\n\r\n  constructor() {\r\n    super();\r\n    this.entityManager = new EntityManager(this.entityCollection);\r\n  }\r\n}\r\n\r\nexport { DefaultRepository };\r\n","import { TypeDecorator, makeDecorator, makePropDecorator } from '../core/index';\r\n\r\n/**\r\n * ----------------------------------------\r\n * CommandHandlerMeta\r\n * ----------------------------------------\r\n */\r\n\r\n/**\r\n * 命令处理描述\r\n */\r\nexport interface CommandHandlerMetadata {\r\n\r\n  /**\r\n   * 要处理的名称\r\n   */\r\n  commandName: string;\r\n}\r\n\r\n\r\n/**\r\n * 命令处理装饰器名称\r\n */\r\nexport const COMMAND_HANDLER_META = 'CommandHandlerMeta';\r\n\r\n\r\n/**\r\n * 命令处理装饰器接口\r\n */\r\nexport interface CommandHandlerMetaDecorator {\r\n  (handler?: CommandHandlerMetadata): TypeDecorator;\r\n  new(handler?: CommandHandlerMetadata): CommandHandlerMetadata;\r\n}\r\n\r\n\r\n/**\r\n * 命令处理装饰器工厂\r\n */\r\n\r\nexport function CommandHandlerMeta(options: CommandHandlerMetadata) {\r\n  const decoratorFactory = makeDecorator(COMMAND_HANDLER_META, (handler: CommandHandlerMetadata) => handler);\r\n  return decoratorFactory(options);\r\n}\r\n\r\n\r\n/**\r\n * ----------------------------------------\r\n * CommandExtenderMeta\r\n * ----------------------------------------\r\n */\r\n\r\n/**\r\n * 命令处理扩展描述\r\n */\r\nexport interface CommandHandlerExtenderMetadata {\r\n  commandName: string;\r\n}\r\n\r\n\r\n/**\r\n * 命令处理扩展装饰器名称\r\n */\r\nexport const COMMAND_HANDLER_EXTENDER_META = 'CommandHandlerExtenderMeta';\r\n\r\n\r\n/**\r\n * 命令处理扩展装饰器接口\r\n */\r\nexport interface CommandHandlerExtenderMetaDecorator {\r\n  (extender?: CommandHandlerExtenderMetadata): TypeDecorator;\r\n  new(extender?: CommandHandlerExtenderMetadata): CommandHandlerExtenderMetadata;\r\n}\r\n\r\n/**\r\n * 命令处理扩展装饰器工厂\r\n */\r\nexport function CommandHandlerExtenderMeta(options: CommandHandlerExtenderMetadata) {\r\n  const decoratorFactory = makeDecorator(COMMAND_HANDLER_EXTENDER_META, (extender: CommandHandlerExtenderMetadata) => extender);\r\n  return decoratorFactory(options);\r\n}\r\n","import { Observable, of } from 'rxjs';\r\nimport { CommandContext } from '../command_context';\r\nimport { isObservable } from '../../utils/index';\r\n\r\n/**\r\n * 任务函数\r\n */\r\ntype TaskFunc = (context: CommandContext) => any;\r\n\r\n\r\n/**\r\n * 任务节点\r\n */\r\nclass TaskNode {\r\n\r\n  /**\r\n   * 任务名称\r\n   */\r\n  name: string;\r\n\r\n  /**\r\n   * 任务函数\r\n   */\r\n  func: TaskFunc;\r\n\r\n  /**\r\n   * 构造函数\r\n   */\r\n  constructor(name: string, func: TaskFunc) {\r\n    this.name = name;\r\n    this.func = func;\r\n  }\r\n\r\n  /**\r\n   * 执行任务函数\r\n   */\r\n  execute(context: CommandContext): Observable<any> {\r\n    const result = this.func(context);\r\n    const result$ = isObservable(result) ? result : of(result);\r\n    return result$;\r\n  }\r\n}\r\n\r\nexport { TaskFunc, TaskNode };\r\n","/**\r\n * session变量解析\r\n * @author Witt <jiwt@inspur.com>\r\n */\r\nimport { createInjectionToken } from '../core/index';\r\n\r\n/**\r\n * 变量解析接口\r\n */\r\ninterface VariableParser {\r\n  parse(expression: string, context: any): any;\r\n}\r\n\r\nconst VARIABLE_PARSERS = createInjectionToken('@farris/devkit VARIABLE_PARSERS');\r\n\r\nexport { VariableParser, VARIABLE_PARSERS };\r\n","import { StaticProvider } from '../core/index';\r\n\r\nclass AppOptions {\r\n\r\n  /**\r\n   * 应用id\r\n   */\r\n  id: string;\r\n\r\n  /**\r\n   * 应用providers\r\n   */\r\n  providers: StaticProvider[];\r\n\r\n}\r\n\r\nexport { AppOptions };\r\n","/*\r\n * @Author: Witt\r\n * @Date: 2018-12-29 10:46:01\r\n * @Last Modified by: Witt\r\n * @Last Modified time: 2018-12-30 17:56:02\r\n */\r\n\r\nimport { BindingData } from '../binding-data';\r\n\r\n/**\r\n * BindingData管理类\r\n */\r\nclass BindingDataManager {\r\n\r\n  /**\r\n   * BindingDataMap\r\n   */\r\n  private bindingDataMap: Map<string, BindingData>;\r\n\r\n  /**\r\n   * 构造函数\r\n   */\r\n  constructor() {\r\n    this.bindingDataMap = new Map<string, BindingData>();\r\n  }\r\n\r\n  /**\r\n   * 获取BindingDataMap\r\n   */\r\n  public getBindingDataMap(): Map<string, BindingData> {\r\n    return this.bindingDataMap;\r\n  }\r\n\r\n  /**\r\n   * 根据name获取BindingData\r\n   * @return 找不到时返回undefined\r\n   */\r\n  public getBindingDataByName(name: string): BindingData {\r\n    return this.bindingDataMap.get(name);\r\n  }\r\n\r\n  /**\r\n   * 初始化全局的BindingData\r\n   */\r\n  public regBindingData(name: string, bindingData: BindingData): void {\r\n    this.bindingDataMap.set(name, bindingData);\r\n  }\r\n\r\n  /**\r\n   * 是否Repository已经存在\r\n   */\r\n  public ifBindingDataExits(name: string) {\r\n    const bindingData = this.getBindingDataByName(name);\r\n    return bindingData ? true : false;\r\n  }\r\n\r\n}\r\n\r\nexport { BindingDataManager };\r\n","/*\r\n * @Author: Witt\r\n * @Date: 2018-12-29 10:46:01\r\n * @Last Modified by: Witt\r\n * @Last Modified time: 2018-12-30 18:06:11\r\n */\r\n\r\nimport { Repository } from '../repository/index';\r\nimport { Entity } from '../entity/index';\r\n\r\n/**\r\n * Repository管理类\r\n */\r\nclass RepositoryManager {\r\n\r\n  /**\r\n   * repositoryMap\r\n   */\r\n  private repositoryMap: Map<string, Repository<Entity>>;\r\n\r\n\r\n  /**\r\n   * 构造函数\r\n   */\r\n  constructor() {\r\n    this.repositoryMap = new Map<string, Repository<Entity>>();\r\n  }\r\n\r\n  /**\r\n   * 注册Repository\r\n   */\r\n  public regRepository(name: string, repository: Repository<Entity>): void {\r\n    this.repositoryMap.set(name, repository);\r\n  }\r\n\r\n  /**\r\n   * 获取RepositoryMap\r\n   * @internal\r\n   */\r\n  public getRepositoryMap(): Map<string, Repository<Entity>> {\r\n    return this.repositoryMap;\r\n  }\r\n\r\n  /**\r\n   * 获取Repository数组\r\n   */\r\n  public getRepositories(): Repository<Entity>[] {\r\n    return Array.from(this.repositoryMap.values());\r\n  }\r\n\r\n  /**\r\n   * 根据name获取Repository\r\n   */\r\n  public getRepositoryByName(name: string): Repository<Entity> {\r\n    return this.repositoryMap.get(name);\r\n  }\r\n\r\n  /**\r\n   * 是否Repository已经存在\r\n   */\r\n  public ifRepositoryExits(name: string) {\r\n    const repository = this.getRepositoryByName(name);\r\n    return repository ? true : false;\r\n  }\r\n\r\n}\r\n\r\nexport { RepositoryManager };\r\n","import { ViewModelContext } from '../view-model/index';\r\n\r\n/**\r\n * ViewModelContext管理类\r\n */\r\nclass ViewModelContextManager {\r\n\r\n  /**\r\n   * Context字典\r\n   */\r\n  private contextMap: Map<string, ViewModelContext>;\r\n\r\n  /**\r\n   * Context集合\r\n   */\r\n  private contextSet: Set<ViewModelContext>;\r\n\r\n\r\n  /**\r\n   * 构造函数\r\n   */\r\n  constructor() {\r\n    this.contextMap = new Map<string, ViewModelContext>();\r\n    this.contextSet = new Set<ViewModelContext>();\r\n  }\r\n\r\n  /**\r\n   * 注册Context\r\n   */\r\n  public regContext(viewModelContext: ViewModelContext): void {\r\n    const id = viewModelContext.id;\r\n    if (this.contextMap.has(id) === true) {\r\n      // throw Error(`id为${id}的ViewModelContext已经存在`);\r\n      // 临时处理，方式报错。\r\n      this.unregContext(viewModelContext);\r\n    }\r\n\r\n    this.contextMap.set(id, viewModelContext);\r\n    this.contextSet.add(viewModelContext);\r\n  }\r\n\r\n  /**\r\n   * 取消注册\r\n   */\r\n  public unregContext(context: ViewModelContext): void {\r\n    const id = context.id;\r\n    this.contextMap.delete(id);\r\n    this.contextSet.delete(context);\r\n  }\r\n\r\n  /**\r\n   * 获取ContextMap\r\n   */\r\n  public getContextMap() {\r\n    return this.contextMap;\r\n  }\r\n\r\n  /**\r\n   * 获取全部Context\r\n   */\r\n  public getContexts(): ViewModelContext[] {\r\n    return Array.from(this.contextSet);\r\n  }\r\n\r\n  /**\r\n   * 根据id获取Context\r\n   */\r\n  public getContextById(id: string): ViewModelContext {\r\n    const targetContext = this.contextMap.get(id);\r\n    return targetContext;\r\n  }\r\n\r\n  /**\r\n   * 获取根Context\r\n   */\r\n  public getRootContext(): ViewModelContext {\r\n    const contexts = this.getContexts();\r\n    const rootContext = contexts.find((context: ViewModelContext) => {\r\n      return context.parent === null;\r\n    });\r\n    return rootContext;\r\n  }\r\n\r\n  /**\r\n   * 获取传入视图模型id的root及root的下一代集合数组\r\n   */\r\n  public getRootContextAndPosterityById(viewModelId): ViewModelContext[] {\r\n    const targetContext = this.getContextById(viewModelId);\r\n    const contexts = this.getContexts();\r\n    let contextsGroup = [];\r\n    // 1.找到ROOT\r\n    const RootId = this.getContextsGroupRoot(targetContext);\r\n    // 2.可直接遍历拿到所有直系后代 (目前只有两层结构直接获取下一代)\r\n    contexts.map((context: ViewModelContext) => {\r\n      if (context.parent && context.parent.id === RootId) {\r\n        contextsGroup.push(context);\r\n      }\r\n    });\r\n    contextsGroup.push(this.getContextById(RootId));\r\n    return contextsGroup;\r\n  }\r\n\r\n  private getContextsGroupRoot(context: ViewModelContext) {\r\n    if (context.parent) {\r\n      return this.getContextsGroupRoot(context.parent);\r\n    } else {\r\n      return context.id\r\n    }\r\n  }\r\n}\r\n\r\nexport { ViewModelContextManager };\r\n","class Context {\r\n\r\n  /**\r\n   * 上下文变量\r\n   */\r\n  params: Map<string, any> = new Map<string, any>();\r\n\r\n  /**\r\n   * 获取变量\r\n   */\r\n  getParam(key: string): any {\r\n    return this.params.get(key);\r\n  }\r\n\r\n  /**\r\n   * 设置变量\r\n   */\r\n  setParam(key: string, value: any) {\r\n    this.params.set(key, value);\r\n  }\r\n}\r\n\r\nexport { Context };\r\n","/**\r\n * 应用上下文\r\n * @author Witt<jiwt@inspur.com>\r\n * @todo\r\n * 1、parnet和AppContextManager是否必要？按理说就是应该隔离上下文，表单之间通过事件通讯进行交互；\r\n */\r\nimport { Injector } from '../core/index';\r\nimport { ViewModelContext } from '../view-model/index';\r\nimport { Context } from '../context/index';\r\nimport { BindingDataFactory } from '../binding-data';\r\nimport { ViewModelContextManager } from './view_model_contex_manager';\r\nimport { RepositoryManager } from './repository_mananger';\r\nimport { BindingDataManager } from './binding_data_manager';\r\nimport { AppEventBus } from './app_eventBus';\r\n\r\n\r\nclass AppContext extends Context {\r\n\r\n  /**\r\n   * 构造函数\r\n   */\r\n  constructor(\r\n    public injector: Injector,\r\n    public eventBus: AppEventBus,\r\n    public repositoryManager: RepositoryManager,\r\n    public bindingDataManager: BindingDataManager,\r\n    public viewModelContextManager: ViewModelContextManager,\r\n  ) {\r\n    super();\r\n  }\r\n\r\n  /**\r\n   * 注册FrameContext\r\n   */\r\n  public regViewModelContext(viewModelContext: ViewModelContext): void {\r\n\r\n    const repository = viewModelContext.repository;\r\n    const repositoryName = repository.name;\r\n\r\n    // Repository\r\n    if (this.repositoryManager.ifRepositoryExits(repositoryName) === false) {\r\n      this.repositoryManager.regRepository(repositoryName, repository);\r\n    }\r\n\r\n    // BindingData\r\n    if (this.bindingDataManager.ifBindingDataExits(repositoryName) === false) {\r\n      const bindingData = BindingDataFactory.createFromRepository(repository, '/');\r\n      this.bindingDataManager.regBindingData(repositoryName, bindingData);\r\n    }\r\n\r\n    // 考虑路由再次进入的时候，AppContext没有被注销，但Component被再次构造的场景\r\n    this.viewModelContextManager.regContext(viewModelContext);\r\n  }\r\n\r\n}\r\n\r\nexport { AppContext };\r\n","import { Injector, InjectFlags } from '../core/index';\r\nimport { Context } from '../context/index';\r\nimport { AppContext } from '../app/index';\r\nimport { Entity } from '../entity/index';\r\nimport { Repository } from '../repository/index';\r\nimport { BindingData } from '../binding-data/index';\r\nimport { UIState } from '../ui-state/index';\r\nimport { StateMachine } from '../state-machine/index';\r\nimport { Form } from '../form/index';\r\nimport { ViewModel } from '../view-model/index';\r\nimport { CommandBus } from '../command/index';\r\n\r\n/**\r\n * 视图模型上下文\r\n */\r\nclass ViewModelContext {\r\n\r\n  private innerViewModel: ViewModel;\r\n\r\n  public appContext: AppContext;\r\n\r\n  public root: ViewModelContext;\r\n\r\n  public parent: ViewModelContext;\r\n\r\n  public id: string;\r\n\r\n  constructor() {\r\n  }\r\n\r\n  public init(viewModel): void {\r\n    this.innerViewModel = viewModel;\r\n    this.id = this.innerViewModel.id;\r\n    this.appContext = viewModel.injector.get(AppContext);\r\n    this.regToTree();\r\n    this.regToAppContext();\r\n  }\r\n\r\n  public regToTree() {\r\n    const parentInjector = this.innerViewModel.injector.get<Injector>(Injector, null, InjectFlags.SkipSelf);\r\n    if (parentInjector)  {\r\n      this.parent = parentInjector.get(ViewModelContext, null);\r\n      this.root = this.parent ? this.parent.root : this;\r\n    } else {\r\n      this.parent = null;\r\n      this.root = this;\r\n    }\r\n  }\r\n\r\n  public regToAppContext() {\r\n    this.appContext.regViewModelContext(this);\r\n  }\r\n\r\n  public get viewModel(): ViewModel {\r\n    return this.innerViewModel;\r\n  }\r\n\r\n  public get injector(): Injector {\r\n    return this.innerViewModel.injector;\r\n  }\r\n\r\n  public get repository(): Repository<Entity> {\r\n    return this.innerViewModel.repository;\r\n  }\r\n\r\n  public get bindingData(): BindingData {\r\n    return this.innerViewModel.bindingData;\r\n  }\r\n\r\n  public get uiState(): UIState {\r\n    return this.innerViewModel.uiState;\r\n  }\r\n\r\n  public get stateMachine(): StateMachine {\r\n    return this.innerViewModel.stateMachine;\r\n  }\r\n\r\n  public get form(): Form {\r\n    return this.innerViewModel.form;\r\n  }\r\n\r\n  public get commandBus(): CommandBus {\r\n    return this.innerViewModel.commandBus;\r\n  }\r\n\r\n}\r\n\r\nexport { ViewModelContext };\r\n","import { makePropDecorator } from '../core/index';\r\n\r\n/**\r\n * UIState属性元数据接口\r\n */\r\nexport interface UIStatePropMetadata {\r\n\r\n  /**\r\n   * 组件的ID\r\n   */\r\n  componentId?: string;\r\n\r\n  /**\r\n   * 状态名称\r\n   */\r\n  stateName?: string;\r\n  \r\n}\r\n\r\n/**\r\n * UIState属性元数据名称\r\n */\r\nexport const UISTATE_PROP_META = 'UIStatePropMeta';\r\n\r\n/**\r\n * UIState属性元数据装饰器工厂接口\r\n */\r\nexport interface UIStatePropMetaDecorator {\r\n  (obj?: UIStatePropMetadata): any;\r\n  new(obj?: UIStatePropMetadata): any;\r\n}\r\n\r\n/**\r\n * UIState属性元数据装饰器工厂\r\n */\r\nexport const UIStatePropMeta: UIStatePropMetaDecorator =\r\n  makePropDecorator(UISTATE_PROP_META, (obj?: UIStatePropMetadata) => obj);\r\n\r\n\r\n","import { MetadataUtil } from '../core/index';\r\nimport { UISTATE_PROP_META, UIStatePropMetadata } from './decorators';\r\n\r\nexport class UIStateMetadataUtil {\r\n\r\n  /**\r\n   * 获取NgUIState的属性元数据\r\n   * @param \r\n   * @returns 属性元数据对象\r\n   * @example\r\n   * 返回格式：\r\n   * {\r\n   *    '属性名称': <NgUIStateProperty>{ ...}\r\n   * }\r\n   */\r\n  static getUIFields(target: Function): {[propName: string]: UIStatePropMetadata} {\r\n      return MetadataUtil.getPropsMetadatasByName(target, UISTATE_PROP_META);\r\n  }\r\n}","/*\r\n * @Author: Witt\r\n * @Date: 2018-11-17 13:38:23\r\n * @Last Modified by: Witt\r\n * @Last Modified time: 2018-11-17 13:38:50\r\n * @todo：临时删除原有功能，待重构\r\n */\r\n\r\nimport { Subject } from 'rxjs';\r\nimport { UIStateMetadataUtil } from './uistate_metadata_util';\r\nimport { UIStatePropMetadata } from './decorators';\r\n\r\nexport interface UIStateObservableParam {\r\n  field: string;\r\n  value: any;\r\n}\r\n\r\n\r\n/**\r\n * UI状态\r\n */\r\nexport class UIState {\r\n\r\n  innerData: {};\r\n\r\n  // 监听变化\r\n  changes: Subject<UIStateObservableParam>;\r\n\r\n  constructor() {\r\n    this.changes = new Subject<UIStateObservableParam>();\r\n    this.innerData = Object.assign({});\r\n    this._init();\r\n  }\r\n\r\n  _init() {\r\n    const construct = this.constructor;\r\n    const uiFields = UIStateMetadataUtil.getUIFields(construct);\r\n    this.initializeUIField(uiFields);\r\n  }\r\n\r\n  private initializeUIField(uiFieldMetadata: { [key: string]: UIStatePropMetadata }): void {\r\n    Object.keys(uiFieldMetadata).forEach(propertyName => {\r\n      const fieldMetadata = uiFieldMetadata[propertyName] as UIStatePropMetadata;\r\n      const uiField = fieldMetadata.stateName || propertyName;\r\n\r\n      if (delete this[propertyName]) {\r\n        this.defineProperty(propertyName, uiField);\r\n      }\r\n    });\r\n  }\r\n\r\n  public isExistProperty(propertyName: any) {\r\n    if (this.innerData.hasOwnProperty(propertyName) || this.hasOwnProperty(propertyName)) {\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  private defineProperty(propertyName: any, field: any = null) {\r\n    Object.defineProperty(this, propertyName, {\r\n      get: function () {\r\n        return field !== null ? this.innerData[field] : this.innerData[propertyName];\r\n      },\r\n      set: function (value) {\r\n        // 值相同时不触发变更\r\n        const oldValue = field !== null ? this.innerData[field] : this.innerData[propertyName];\r\n        if (oldValue === value) {\r\n          return;\r\n        }\r\n        if (field !== null) {\r\n          this.innerData[field] = value;\r\n        } else {\r\n          this.innerData[propertyName] = value;\r\n        }\r\n        this.changes.next({\r\n          field: propertyName,\r\n          value: value\r\n        });\r\n      }\r\n    });\r\n  }\r\n\r\n  public setPropertyValue(propertyName: any, value: any) {\r\n    if (propertyName === '' || propertyName === undefined) {\r\n      return;\r\n    }\r\n    if (!this.isExistProperty(propertyName)) {\r\n      this.defineProperty(propertyName);\r\n    }\r\n    this[propertyName] = value;\r\n  }\r\n}\r\n","import { StateMachineContext } from './state_machine_context';\r\n\r\n/**\r\n * --------------------------------------------------------------------------------\r\n * State相关\r\n * --------------------------------------------------------------------------------\r\n */\r\n\r\n/**\r\n * 基本状态：表单的基本状态，通过State的运算确定RenderState的值，进而控制页面控件的状态。\r\n */\r\nexport class State {\r\n\r\n  /**\r\n   * 构造函数\r\n   * @param name 状态名称\r\n   */\r\n  constructor(public name: string) {\r\n  }\r\n}\r\n\r\n/**\r\n * 基本状态字典, 形如\r\n * {\r\n *  stateName1: stateInstance1,\r\n *  stateName2: stateInstance2,\r\n *  ...\r\n * }\r\n */\r\nexport interface StateDictionary {\r\n    [index: string]: State;\r\n}\r\n\r\n\r\n/**\r\n * --------------------------------------------------------------------------------\r\n * RenderState相关\r\n * --------------------------------------------------------------------------------\r\n */\r\n\r\n/**\r\n * 渲染状态，该状态用于和界面UI绑定\r\n */\r\nexport type RenderState = boolean;\r\n\r\n/**\r\n * 初始渲染状态\r\n */\r\nexport const initialUIState: RenderState = false;\r\n\r\n/**\r\n * 渲染状态字典，形如：\r\n * {\r\n *  renderStateName1: true,\r\n *  renderStateName1: false,\r\n *  ...\r\n * }\r\n */\r\nexport interface RenderStateDictionary {\r\n  [index: string]: RenderState;\r\n}\r\n\r\n\r\n/**\r\n * 渲染方法\r\n * 该方法接收一个StateMachineContext类型的上下文，\r\n * 通过对上下文中指定的当前状态的计算，确定对应渲染状态的值，该方法返回一个RenderState类型的值（即布尔类型）\r\n */\r\nexport type Render = (context: StateMachineContext) => RenderState;\r\n\r\n/**\r\n * 渲染方法字典\r\n * {\r\n *  renderStateName1: render1,\r\n *  renderStateName1: render2,\r\n *  ...\r\n * }\r\n */\r\nexport interface RenderDictionary {\r\n  [index: string]: Render;\r\n}\r\n\r\n\r\n/**\r\n * --------------------------------------------------------------------------------\r\n * Action相关\r\n * --------------------------------------------------------------------------------\r\n */\r\n\r\n/**\r\n * 状态机动作\r\n */\r\nexport type Action = () => any;\r\n\r\n/**\r\n * 状态机行为约束条件\r\n */\r\n// export interface Precondition {\r\n// }\r\n\r\n\r\n/**\r\n * --------------------------------------------------------------------------------\r\n * Effect相关\r\n * --------------------------------------------------------------------------------\r\n */\r\n\r\n/**\r\n * 行为效果，表示状态机发起某行为后引起的界面变化效果\r\n */\r\nexport interface EffectHandlerOption {\r\n\r\n  /**\r\n   * 效果类型\r\n   */\r\n  type: string;\r\n\r\n  /**\r\n   * 效果实现\r\n   */\r\n  effect: any;\r\n}\r\n\r\n/**\r\n * 状态机界面效果\r\n */\r\nexport interface Effect {\r\n\r\n  /**\r\n   * 行为约束条件集合\r\n   */\r\n  preconditions?: any[];\r\n\r\n  /**\r\n   * 发生某行为后引起的界面变化效果\r\n   */\r\n  handlers?: EffectHandlerOption[];\r\n}\r\n\r\n/**\r\n * 状态机效果字典\r\n */\r\nexport interface EffectDictianry {\r\n    [index: string]: Effect;\r\n}\r\n\r\n\r\n","import { makePropDecorator } from '../../core/index';\r\n\r\n/**\r\n * 页面状态元数据\r\n */\r\nexport interface StatePropMetadata {\r\n\r\n  /**\r\n   * 初始状态\r\n   */\r\n  initialState?: boolean;\r\n}\r\n\r\n\r\n/**\r\n * 状态元数据名称\r\n */\r\nexport const STATE_PROP_META = 'StatePropMeta';\r\n\r\n\r\n/**\r\n * 页面状态元数据装饰器工厂接口\r\n */\r\nexport interface StatePropMetaDecorator {\r\n  (obj?: StatePropMetadata): any;\r\n  new(obj?: StatePropMetadata): any;\r\n}\r\n\r\n/**\r\n * 页面状态元数据装饰器工厂\r\n */\r\nexport const StatePropMeta: StatePropMetaDecorator =\r\n  makePropDecorator(STATE_PROP_META, (obj?: StatePropMetadata) => obj);\r\n","import { makePropDecorator } from '../../core/index';\r\nimport { Render } from '../types';\r\n\r\n/**\r\n * 组件状态元数据\r\n */\r\nexport interface RenderStatePropMetadata {\r\n  render: Render;\r\n}\r\n\r\n\r\n/**\r\n * 组件状态元数据名称\r\n */\r\nexport const RENDER_STATE_PROP_META = 'RenderStatePropMeta';\r\n\r\n\r\n/**\r\n * 组件状态元数据工厂接口\r\n */\r\nexport interface RenderStatePropMetaDecorator {\r\n  (obj?: RenderStatePropMetadata): any;\r\n  new(obj?: RenderStatePropMetadata): any;\r\n}\r\n\r\n/**\r\n * 组件状态元数据工厂\r\n */\r\nexport const RenderStatePropMeta: RenderStatePropMetaDecorator =\r\n  makePropDecorator(RENDER_STATE_PROP_META, (obj: RenderStatePropMetadata) => obj);","import { makePropDecorator } from '../../core/index';\r\n\r\n/**\r\n * 迁移动作\r\n */\r\nexport interface ActionMethodMetadata {\r\n  precondition?: any[];\r\n  transitTo: string;\r\n}\r\n\r\n\r\n/**\r\n * 动作方法元数据名称\r\n */\r\nexport const ACTION_METHOD_META = 'ActionMethodMeta';\r\n\r\n\r\n/**\r\n * 迁移动作元数据装饰工厂接口\r\n */\r\nexport interface ActionMethodMetaDecorator {\r\n  (obj?: ActionMethodMetadata): any;\r\n  new(obj?: ActionMethodMetadata): any;\r\n}\r\n\r\n/**\r\n * 迁移动作元数据装饰工厂\r\n */\r\nexport const ActionMethodMeta: ActionMethodMetaDecorator =\r\n  makePropDecorator(ACTION_METHOD_META, (action: ActionMethodMetadata) => action);","import { StateMachine } from './state_machine';\r\nimport { State } from './types';\r\nimport { Context } from '../context/context';\r\nimport { VariableParseService } from '../variable/index';\r\nimport { ViewModelContext } from '../view-model/index';\r\nimport { StateMachineWatcher } from './state_machine_watcher';\r\n\r\n/**\r\n * 状态机上下文\r\n */\r\nexport class StateMachineContext {\r\n\r\n  /**\r\n   * 当前状态名称\r\n   */\r\n  public state: string;\r\n\r\n  /**\r\n   * 父Context\r\n   */\r\n  public parent: Context;\r\n\r\n  /**\r\n   * 变量解析器\r\n   */\r\n  public parser: any;\r\n\r\n  /**\r\n   * ViewModel上下文\r\n   */\r\n  public viewModelContext: ViewModelContext;\r\n\r\n  /**\r\n   * 状态机事件监听\r\n   */\r\n  public stateMachineWatcher: StateMachineWatcher;\r\n\r\n  /**\r\n   * 构造函数\r\n   * @param stateMachine 状态机实例\r\n   * @param initialState 初始状态\r\n   */\r\n  constructor(public stateMachine: StateMachine, initialState: State) {\r\n    this.state = initialState.name;\r\n  }\r\n\r\n  /**\r\n   * 初始化\r\n   */\r\n  public init(frameContext: ViewModelContext) {\r\n    this.viewModelContext = frameContext;\r\n    this.parser = this.viewModelContext.injector.get(VariableParseService);\r\n    this.stateMachineWatcher = this.stateMachine.stateMachineWatcher;\r\n  }\r\n\r\n  /**\r\n   * 状态迁移\r\n   * @param stateName 下一状态的名称\r\n   */\r\n  public transitTo(stateName: string) {\r\n    const nextState = this.stateMachine.states[stateName];\r\n    if (nextState) {\r\n      this.state = nextState.name;\r\n      this.stateMachine.render();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 获取expression对应的UIState值\r\n   * @param expression UIState表达式\r\n   */\r\n  public getUIState(expression: string): any {\r\n    if (!expression) {\r\n      return;\r\n    }\r\n    const viewModelContext = this.stateMachineWatcher.getViewModelContext(expression);\r\n    if (!viewModelContext) {\r\n      return;\r\n    }\r\n\r\n    this.stateMachineWatcher.subscribeUIStateChange(viewModelContext, expression);\r\n\r\n    if (this.parser) {\r\n      const value = this.parser.parse(expression, viewModelContext);\r\n      if (value === null) {\r\n        return null;\r\n      }\r\n      if (typeof value === 'object' && Object.keys(value).length === 0) {\r\n        return null;\r\n      }\r\n      return value;\r\n    } else {\r\n      throw new Error('未初始化变量解析器。');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 获取数据的值\r\n   */\r\n  public getData(expression: string): any {\r\n    if (!expression) {\r\n      return;\r\n    }\r\n    const viewModelContext = this.stateMachineWatcher.getViewModelContext(expression);\r\n    if (!viewModelContext) {\r\n      return;\r\n    }\r\n\r\n    this.stateMachineWatcher.subscribeEntityChange(viewModelContext, expression);\r\n\r\n    if (this.parser) {\r\n      const value = this.parser.parse(expression, viewModelContext);\r\n      if (value === null) {\r\n        return null;\r\n      }\r\n      if (typeof value === 'object' && Object.keys(value).length === 0) {\r\n        return null;\r\n      }\r\n      return value;\r\n    } else {\r\n      throw new Error('未初始化变量解析器。');\r\n    }\r\n  }\r\n}\r\n","import { StateMachine } from './state_machine';\r\nimport { ViewModelContext } from '../view-model/index';\r\nimport { Change } from '../binding-data/changes';\r\n\r\n\r\n/**\r\n * 状态机事件，监听uistate的变化和entity的变化\r\n */\r\nexport class StateMachineWatcher {\r\n\r\n  /**\r\n   * 当前ViewModel上下文\r\n   */\r\n  private viewModelContext: ViewModelContext;\r\n\r\n  /**\r\n   * viewModel=>UIStatePahts字典\r\n   */\r\n  private viewModelContextAndUIStatePathsMap: Map<ViewModelContext, Array<string>>;\r\n\r\n  /**\r\n   * viewModel=>DataStatePahts字典\r\n   */\r\n  private viewModelContextAndDataStatePathsMap: Map<ViewModelContext, Array<string>>;\r\n\r\n  /**\r\n   * 所有UIStatePath数组\r\n   */\r\n  private uiStatePathList: Array<string> = [];\r\n\r\n  /**\r\n   * 所有DataStatePath数组\r\n   */\r\n  private dataStatePathList: Array<string> = [];\r\n\r\n  constructor(public stateMachine: StateMachine) {\r\n    this.viewModelContextAndUIStatePathsMap = new Map<ViewModelContext, any>();\r\n    this.viewModelContextAndDataStatePathsMap = new Map<ViewModelContext, any>();\r\n  }\r\n\r\n  /**\r\n   * 初始化\r\n   * @param viewModelContext 当前视图上下文\r\n   */\r\n  public init(viewModelContext: ViewModelContext) {\r\n    this.viewModelContext = viewModelContext;\r\n  }\r\n\r\n  /**\r\n   * 返回表达式中ViewModelId对应的ViewModelContext\r\n   */\r\n  public getViewModelContext(expression: any): ViewModelContext {\r\n    const viewModelId = this.extractPaths(expression).split('/')[1];\r\n    return this.viewModelContext.appContext.viewModelContextManager.getContextById(viewModelId);\r\n  }\r\n\r\n  /**\r\n   * 监听UIState变更\r\n   * @param viewModelContext ViewModel上下文\r\n   * @param expression UIState表达式\r\n   */\r\n  public subscribeUIStateChange(viewModelContext: ViewModelContext, expression: any) {\r\n    const uiStatePath = this.getStatePath(expression);\r\n\r\n    if (this.viewModelContextAndUIStatePathsMap.has(viewModelContext) === false) {\r\n      this.viewModelContextAndUIStatePathsMap.set(viewModelContext, this.uiStatePathList);\r\n      viewModelContext.uiState.changes.subscribe((uiStateChange) => {\r\n        const uiStatePathList = this.viewModelContextAndUIStatePathsMap.get(viewModelContext);\r\n        if (uiStateChange.field && uiStatePathList.indexOf(uiStateChange.field) > -1) {\r\n          this.stateMachine.render();\r\n        }\r\n      });\r\n    }\r\n\r\n    if (this.viewModelContextAndUIStatePathsMap.get(viewModelContext).indexOf(uiStatePath) === -1) {\r\n      this.uiStatePathList.push(uiStatePath);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 监听实体变更\r\n   */\r\n  public subscribeEntityChange(viewModelContext: ViewModelContext, expression: any) {\r\n\r\n    if (this.viewModelContextAndDataStatePathsMap.has(viewModelContext) === false) {\r\n      this.viewModelContextAndDataStatePathsMap.set(viewModelContext, this.dataStatePathList);\r\n      viewModelContext.bindingData.changes.subscribe((change: Change) => {\r\n\r\n        if (change.type === 'Load' || change.type === 'SelectionChanged') {\r\n          this.stateMachine.render();\r\n        }\r\n\r\n        const dataPathList = this.viewModelContextAndDataStatePathsMap.get(viewModelContext);\r\n        if (change.path.join() && this.isAccordingPath(dataPathList, change.path.join('/'))) {\r\n          this.stateMachine.render();\r\n        }\r\n      });\r\n    }\r\n\r\n    if (this.viewModelContextAndDataStatePathsMap.get(viewModelContext).indexOf(expression) === -1) {\r\n      this.dataStatePathList.push(expression);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 根据表达式获取对应的StatePath（移除了ViewModelId之外的部分）\r\n   * @param expression 变量表达式\r\n   */\r\n  private getStatePath(expression: any) {\r\n    return this.extractPaths(expression).split('/')[2];\r\n  }\r\n\r\n  /**\r\n   * 判断是否监听范围内的变更路径\r\n   */\r\n  public isAccordingPath(dataStatePaths: any, dataStatePath: string) {\r\n    const targetPath = dataStatePaths.find((item) => {\r\n      return item.indexOf(dataStatePath) > -1;\r\n    });\r\n\r\n    return targetPath === undefined ? false : true;\r\n  }\r\n\r\n  /**\r\n   * 暂时把这个方法放了这个地方，等季老师共用方法调整后，直接引用他的方法，该方法可删除\r\n   * @param expression 变量表达式\r\n   */\r\n  private extractPaths(expression: string): string {\r\n    let path: string;\r\n    const UI_STATE_PATTERN_G = /\\{UISTATE~(\\S+?)\\}/g;\r\n    const DATA_PATTERN_G = /\\{DATA~(\\S+?)\\}/g;\r\n    const uiStateVariables = expression.match(UI_STATE_PATTERN_G);\r\n    const dataVariables = expression.match(DATA_PATTERN_G);\r\n    if (uiStateVariables !== null) {\r\n      const UI_STATE_PATTERN = /\\{UISTATE~(\\S+?)\\}/;\r\n      uiStateVariables.forEach((uiStateVariable: string) => {\r\n        const pathMatches = uiStateVariable.match(UI_STATE_PATTERN);\r\n        if (pathMatches != null && pathMatches.length === 2) {\r\n          path = pathMatches[1];\r\n        }\r\n      });\r\n    }\r\n    if (dataVariables !== null) {\r\n      const DATA_PATTERN = /\\{DATA~(\\S+?)\\}/;\r\n      dataVariables.forEach((dataVariable: string) => {\r\n        const pathMatches = dataVariable.match(DATA_PATTERN);\r\n        if (pathMatches != null && pathMatches.length === 2) {\r\n          path = pathMatches[1];\r\n        }\r\n      });\r\n    }\r\n    return path;\r\n  }\r\n}","import { BehaviorSubject } from 'rxjs';\r\nimport { MetadataUtil } from '../core/index';\r\nimport { ViewModelContext } from '../view-model/index';\r\n\r\nimport { State, initialUIState, StateDictionary, RenderStateDictionary, RenderDictionary } from './types';\r\nimport {\r\n  StatePropMetadata, ActionMethodMetadata, RenderStatePropMetadata,\r\n  STATE_PROP_META, RENDER_STATE_PROP_META, ACTION_METHOD_META\r\n} from './decorators';\r\nimport { StateMachineContext } from './state_machine_context';\r\nimport { StateMachineWatcher } from './state_machine_watcher';\r\n\r\n/**\r\n * 状态机\r\n */\r\nexport class StateMachine {\r\n\r\n  /**\r\n   * 初始状态\r\n   */\r\n  private initialState: State;\r\n\r\n  /**\r\n   * 状态字典\r\n   */\r\n  public states: StateDictionary;\r\n\r\n  /**\r\n   * 渲染状态字典\r\n   */\r\n  public renderStates: RenderStateDictionary;\r\n\r\n  /**\r\n   * 渲染器字典\r\n   */\r\n  public renders: RenderDictionary;\r\n\r\n  /**\r\n   * 状态机上下文\r\n   */\r\n  public context: StateMachineContext;\r\n\r\n  /**\r\n   * 状态变更\r\n   */\r\n  public stateChange: BehaviorSubject<string>;\r\n\r\n  /**\r\n   * ViewModel上下文\r\n   */\r\n  public viewModelContext: ViewModelContext;\r\n\r\n  /**\r\n   * 状态机事件监听\r\n   */\r\n  public stateMachineWatcher: StateMachineWatcher;\r\n\r\n  /**\r\n   * 构造函数\r\n   */\r\n  constructor() {\r\n    this.renderStates = {};\r\n    this.handlePropMetadatas();\r\n    this.stateChange = new BehaviorSubject<any>(false);\r\n    this.context = new StateMachineContext(this, this.initialState);\r\n    this.stateMachineWatcher = new StateMachineWatcher(this);\r\n  }\r\n\r\n  /**\r\n   * 初始化状态机\r\n   * @param viewModelContext ViewModel上下文\r\n   * @summary\r\n   * 状态机变更，为了在绑定数据之后执行状态机的操作，把render方法延后执行。\r\n   */\r\n  public init(viewModelContext: ViewModelContext) {\r\n    this.viewModelContext = viewModelContext;\r\n    this.context.init(this.viewModelContext);\r\n    this.stateMachineWatcher.init(this.viewModelContext);\r\n    this.render();\r\n  }\r\n\r\n  /**\r\n   * 批量处理属性元数据\r\n   */\r\n  private handlePropMetadatas() {\r\n    const propsMetadatas = MetadataUtil.getPropsMetadatas(this.constructor);\r\n\r\n    // 遍历所有属性装饰器，并调用相应的build方法\r\n    if (propsMetadatas) {\r\n      Object.keys(propsMetadatas).forEach((propName: string) => {\r\n        const propMetadatas = propsMetadatas[propName];\r\n        propMetadatas.forEach(propMetadata => {\r\n          this.handlePropMetadata(propName, propMetadata);\r\n        });\r\n      });\r\n    }\r\n\r\n    if (!this.initialState) {\r\n      throw new Error('请在StatePropMeta注解中指定状态机的初始状态。');\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * 处理属性元数据\r\n   */\r\n  private handlePropMetadata(propName: string, propMetadata: any) {\r\n    const ngMetadataName =  propMetadata.ngMetadataName;\r\n    switch(ngMetadataName) {\r\n      case STATE_PROP_META:\r\n        this.buildState(propName, propMetadata);\r\n        break;\r\n      case RENDER_STATE_PROP_META:\r\n        this.buildRenderState(propName, propMetadata);\r\n        break;\r\n      case ACTION_METHOD_META:\r\n        this.buildAction(propName, propMetadata);\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 包装State\r\n   * @param stateName 状态名称\r\n   * @param ngState   状态对象\r\n   */\r\n  private buildState(stateName: string, ngState: StatePropMetadata) {\r\n    this.states = this.states || {};\r\n    this[stateName] = new State(stateName);\r\n    this.states[stateName] = this[stateName];\r\n    if (ngState.initialState) {\r\n      this.initialState = this[stateName];\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 包装RenderState\r\n   * @param renderStateName 渲染状态名称\r\n   * @param ngRenderState   渲染状态元数据\r\n   */\r\n  private buildRenderState(renderStateName: string, ngRenderState: RenderStatePropMetadata) {\r\n    this.renderStates = this.renderStates || {};\r\n    this[renderStateName] = initialUIState;\r\n    this.renderStates[renderStateName] = this[renderStateName];\r\n\r\n    // 将renderState上指定的render加入到renders中\r\n    this.renders = this.renders || {};\r\n    this.renders[renderStateName] = ngRenderState.render;\r\n  }\r\n\r\n  /**\r\n   * 包装Action\r\n   * @param actionName 动作名称\r\n   * @param ngAction 动作元数据\r\n   */\r\n  private buildAction(actionName: string, ngAction: ActionMethodMetadata) {\r\n    this[actionName] = () => {\r\n      const nextStateName = ngAction.transitTo;\r\n      const nextState: State = this.states[nextStateName];\r\n      this.context.transitTo(nextState.name);\r\n      this.render();\r\n    };\r\n  }\r\n\r\n  /**\r\n   * 重新计算所有渲染状态的值\r\n   * @sumamry\r\n   * 当 state切换的时候，调用遍历所有的render方法，更改renderState\r\n   */\r\n  render() {\r\n    for (const renderStateName in this.renderStates) {\r\n\r\n      if (this.renderStates.hasOwnProperty(renderStateName) === false) {\r\n        continue;\r\n      }\r\n\r\n      // 执行RenderState的render方法，更新renderState\r\n      const stateRender = this.renders[renderStateName];\r\n      if (!stateRender) {\r\n        continue;\r\n      }\r\n\r\n      this.renderStates[renderStateName] = stateRender(this.context);\r\n      this[renderStateName] = this.renderStates[renderStateName];\r\n    }\r\n    this.stateChange.next(this.context.state);\r\n  }\r\n}\r\n","enum BindingType {\r\n\r\n  /**\r\n   * 实体状态\r\n   */\r\n  EntityState = 'EntityState',\r\n\r\n  /**\r\n   * UI状态\r\n   */\r\n  UIState     = 'UIState'\r\n}\r\n\r\nexport { BindingType };\r\n","import { DateUtil } from '../utils/index';\r\n\r\n/**\r\n * 绑定值转换器\r\n */\r\ninterface BindingValueConverter {\r\n\r\n  /**\r\n   * 将ControlValue转换为StateValue值\r\n   */\r\n  convertFrom(controlValue: any): any;\r\n\r\n  /**\r\n   * 将StateValue转换为ControlValue\r\n   */\r\n  convertTo(stateValue: any): any;\r\n}\r\n\r\n\r\n/**\r\n * 日期字符串转换器\r\n */\r\nclass DateStringValueConverter implements BindingValueConverter {\r\n\r\n  public convertFrom(dateObj: Date): string {\r\n    return  DateUtil.formatISO(dateObj);\r\n  }\r\n\r\n  public convertTo(dateString): Date {\r\n    return DateUtil.parse(dateString);\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * 数组字符串转换器\r\n */\r\nclass ArrayStringValueConverter implements BindingValueConverter  {\r\n\r\n  public convertFrom(arr: any[]): string {\r\n    return  arr.join(',');\r\n  }\r\n\r\n  public convertTo(arrString): any[] {\r\n    return arrString.split(',');\r\n  }\r\n\r\n}\r\n\r\nexport { BindingValueConverter, DateStringValueConverter, ArrayStringValueConverter };\r\n\r\n\r\n\r\n","import { BindingData } from '../binding-data/index';\r\nimport { UIState } from '../ui-state/index';\r\nimport { ViewModelContext } from '../view-model/index';\r\nimport { BindingPathConverter, DateUtil } from '../utils/index';\r\n\r\nimport { BindingType } from './types';\r\nimport { BindingValueConverter } from './binding_value_converter';\r\n\r\n/**\r\n * 绑定值访问器接口\r\n */\r\ninterface BindingValueAccessor {\r\n\r\n  getValue(): any;\r\n\r\n  setValue(controlValue: any): void;\r\n}\r\n\r\n/**\r\n * Entity值访问器\r\n */\r\nclass EntityBindingValueAccessor implements BindingValueAccessor {\r\n\r\n  private bindingData: BindingData;\r\n\r\n  private bindingPathSegments: string[];\r\n\r\n  private valueConverter: BindingValueConverter;\r\n\r\n  constructor(bindingData: BindingData, bindingPath: string, valueConverter: BindingValueConverter) {\r\n    this.bindingData = bindingData;\r\n    this.bindingPathSegments = this.getBindingPathSegments(bindingPath);\r\n    this.valueConverter = valueConverter;\r\n  }\r\n\r\n  public getValue(): any {\r\n    const stateValue = this.bindingData.getValue(this.bindingPathSegments);\r\n    const controlValue = this.valueConverter ? this.valueConverter.convertTo(stateValue) : stateValue;\r\n    return controlValue;\r\n  }\r\n\r\n  public setValue(controlValue: any): void {\r\n    const oldStateValue = this.bindingData.getValue(this.bindingPathSegments);\r\n    const stateValue = this.valueConverter ? this.valueConverter.convertFrom(controlValue) : controlValue;\r\n\r\n    if (this.isDateConverter(this.valueConverter) === true) {\r\n      if (DateUtil.isEqual(oldStateValue, stateValue) === true) {\r\n        return;\r\n      }\r\n    }\r\n\r\n    this.bindingData.setValue(this.bindingPathSegments, stateValue, true, true);\r\n  }\r\n\r\n  private getBindingPathSegments(bindingPath: string) {\r\n    const parentPathSegments = BindingPathConverter.toBindingPathArray(this.bindingData.bindingPath);\r\n    bindingPath = bindingPath.replace(/\\./g, '\\/');\r\n    const bindingPathSegments = BindingPathConverter.toBindingPathArray(bindingPath);\r\n    return parentPathSegments.concat(bindingPathSegments);\r\n  }\r\n\r\n  /**\r\n   * 是否是DateConverter\r\n   */\r\n  private isDateConverter(converter: BindingValueConverter): boolean {\r\n    let isDateConverter = false;\r\n    if (converter && converter.hasOwnProperty('format') === true) {\r\n      isDateConverter = true;\r\n    }\r\n    return isDateConverter;\r\n  }\r\n}\r\n\r\n/**\r\n * UIState值访问器\r\n */\r\nclass UIStateBindingValueAccessor implements BindingValueAccessor {\r\n\r\n  private uiState: UIState;\r\n\r\n  private bindingPathSegments: string[];\r\n\r\n\r\n  constructor(uiState: UIState, bindingPath: string, valueConverter: BindingValueConverter) {\r\n    this.uiState = uiState;\r\n    this.bindingPathSegments = this.getUiStateBindingPath(bindingPath);\r\n  }\r\n\r\n  public getValue(): any {\r\n    let stateValue;\r\n    let obj = this.uiState;\r\n    this.bindingPathSegments.forEach(item => {\r\n      stateValue = obj[item];\r\n      obj = stateValue\r\n    })\r\n    return stateValue;\r\n  }\r\n\r\n  public setValue(controlValue: any): void {\r\n    const length = this.bindingPathSegments.length;\r\n    if (length === 1) {\r\n      this.uiState.setPropertyValue(this.bindingPathSegments, controlValue);\r\n    } else {\r\n      let obj;\r\n      for(let i = length-1 ; i > 0 ; i--){\r\n        obj = {[this.bindingPathSegments[i]]: controlValue};\r\n        controlValue = obj;\r\n      }\r\n      this.uiState.setPropertyValue(this.bindingPathSegments[0], obj);\r\n    }\r\n  }\r\n\r\n  // UISTATE获取路径\r\n  private getUiStateBindingPath(bindingPath: string) {\r\n    const index = bindingPath.search('/');\r\n    if (index !== -1) {\r\n      return bindingPath.split('/')\r\n    } else {\r\n      return [bindingPath]\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * 绑定值访问器工厂\r\n */\r\nclass BindingValueAccessorFactory {\r\n\r\n  static create(bindingType: BindingType, bindingBindingPath: string, bindingValueConverter, viewModelContext: ViewModelContext) {\r\n    switch (bindingType) {\r\n      case BindingType.EntityState:\r\n        const bindingData = viewModelContext.bindingData;\r\n        return new EntityBindingValueAccessor(bindingData, bindingBindingPath, bindingValueConverter);\r\n      case BindingType.UIState:\r\n        const uiState = viewModelContext.uiState;\r\n        return new UIStateBindingValueAccessor(uiState, bindingBindingPath, bindingValueConverter);\r\n      default:\r\n        throw new Error('Not Supported');\r\n    }\r\n  }\r\n}\r\n\r\nexport { BindingValueAccessor, EntityBindingValueAccessor, UIStateBindingValueAccessor, BindingValueAccessorFactory };\r\n","\r\nimport { makePropDecorator } from '../core/index';\r\nimport { BindingType } from './types';\r\nimport { BindingValueConverter } from './binding_value_converter';\r\nimport { ValidationRule } from '../validator';\r\n\r\n/**\r\n * FormControl元数据名称\r\n */\r\nexport const FORM_CONTROL_PROP_META = 'FormControlPropMeta';\r\n\r\n\r\n/**\r\n * FormControl元数据\r\n */\r\nexport interface FormControlMetadata {\r\n\r\n  /**\r\n   * 控件名称\r\n   */\r\n  name?: string;\r\n\r\n  /**\r\n   * 绑定字段路径\r\n   */\r\n  bindingType?: BindingType;\r\n\r\n  /**\r\n   * 绑定路径\r\n   */\r\n  bindingPath?: string;\r\n\r\n  /**\r\n   * 值转换器\r\n   */\r\n  valueConverter?: BindingValueConverter;\r\n\r\n    /**\r\n   * 值改变前监听器\r\n   */\r\n  valueChanging?: string;\r\n  /**\r\n   * 值改变后监听器\r\n   */\r\n  valueChanged?: string;\r\n  /**\r\n    * 验证规则\r\n    */\r\n  validRules?: ValidationRule | ValidationRule[] | null;\r\n}\r\n\r\n/**\r\n * 表单控件装饰器\r\n */\r\nexport interface FormControlPropMetaDecorator {\r\n  (obj?: FormControlMetadata): any;\r\n  new(obj?: FormControlMetadata): any;\r\n}\r\n\r\n/**\r\n * FormControl装饰器工厂\r\n */\r\nexport const FormControlPropMeta: FormControlPropMetaDecorator =\r\n  makePropDecorator(FORM_CONTROL_PROP_META, (obj: FormControlMetadata) => obj);\r\n","import { ValidationRule } from './types';\r\nimport { DateUtil } from '../utils/date_util'\r\n/**\r\n * 验证器工厂\r\n */\r\nclass ValidatorFactory {\r\n    /**\r\n     * 创建适配器\r\n     */\r\n    static create(validRules: ValidationRule | ValidationRule[]): any {\r\n        let validatorFn = [];\r\n        if (Array.isArray(validRules) && validRules.length > 1) {\r\n            validRules.forEach((validRule: ValidationRule) => {\r\n                validatorFn.push(this.initValidRuleFn(validRule))\r\n            })\r\n        } else if (Array.isArray(validRules) && validRules.length === 1) {\r\n            validatorFn.push(this.initValidRuleFn(validRules[0]))\r\n        } else {\r\n            validatorFn.push(this.initValidRuleFn(validRules as ValidationRule))\r\n        }\r\n        return validatorFn;\r\n    }\r\n\r\n    private static initValidRuleFn(validRule: ValidationRule): any {\r\n        const { type, constraints, message } = validRule;\r\n        switch (type) {\r\n            case 'required':\r\n                return (v) => {\r\n                    if (constraints[0] === true) {\r\n                        if (null === v || undefined === v || '' === v) {\r\n                            return { passing: false, message: message || '必填' }\r\n                        } else {\r\n                            return { passing: true, message: '' }\r\n\r\n                        }\r\n                    }\r\n                }\r\n            case 'NumberMaxValue':\r\n                return (v) => {\r\n                    if (typeof v !== 'number') {\r\n                        return\r\n                    }\r\n                    if (constraints[0] || 0 == constraints[0]) {\r\n                        if (v <= parseFloat(constraints[0])) {\r\n                            return { passing: true, message: '' }\r\n                        } else {\r\n                            return { passing: false, message: message || `输入值不能大于${constraints[0]}` }\r\n                        }\r\n                    }\r\n                }\r\n            case 'NumberMinValue':\r\n                return (v) => {\r\n                    if (typeof v !== 'number') {\r\n                        return\r\n                    }\r\n                    if (constraints[0] || 0 == constraints[0]) {\r\n                        if (v >= parseFloat(constraints[0])) {\r\n                            return { passing: true, message: '' }\r\n                        } else {\r\n                            return { passing: false, message: message || `输入值不能小于${constraints[0]}` }\r\n                        }\r\n                    }\r\n                }\r\n            case 'DateMaxValue':\r\n                return (v) => {\r\n                    if (constraints[0]) {\r\n                        if (DateUtil.isBefore(v, constraints[0]) || DateUtil.isSame(v, constraints[0])) {\r\n                            return { passing: true, message: '' }\r\n                        } else {\r\n                            return { passing: false, message: message || `输入日期不能大于${constraints[0]}` }\r\n                        }\r\n                    }\r\n                }\r\n            case 'DateMinValue':\r\n                return (v) => {\r\n                    if (constraints[0]) {\r\n                        if (DateUtil.isAfter(v, constraints[0]) || DateUtil.isSame(v, constraints[0])) {\r\n                            return { passing: true, message: '' }\r\n                        } else {\r\n                            return { passing: false, message: message || `输入日期不能小于${constraints[0]}` }\r\n                        }\r\n                    }\r\n                }\r\n            case 'StringMaxLength':\r\n                return (v) => {\r\n                    if (constraints[0]) {\r\n                        if (v.length <= constraints[0]) {\r\n                            return { passing: true, message: '' }\r\n                        } else {\r\n                            return { passing: false, message: message || `输入值长度不能大于${constraints[0]}` }\r\n                        }\r\n                    }\r\n                }\r\n            case 'StringMinLength':\r\n                return (v) => {\r\n                    if (constraints[0]) {\r\n                        if (v.length >= constraints[0]) {\r\n                            return { passing: true, message: '' }\r\n                        } else {\r\n                            return { passing: false, message: message || `输入值长度不能小于${constraints[0]}` }\r\n                        }\r\n                    }\r\n                }\r\n            case 'regex':\r\n                return (v) => {\r\n                    let constraintsTemp = [];\r\n                    if (typeof constraints[0] === 'string') {\r\n                        constraintsTemp = constraints[0].split(',');\r\n                    }\r\n                    for (let i = 0 ; i < constraintsTemp.length ; i++){\r\n                        if(constraintsTemp[i] === ''){\r\n                            return \r\n                        }\r\n                        const re = new RegExp(constraintsTemp[i]);\r\n                        if (re.test(v)) {\r\n                            return { passing: false, message: message  || `存在不可输入项${constraints[0]}` }\r\n                        } else {\r\n                            return { passing: true, message: '' }\r\n                        }\r\n                    }\r\n\r\n                }\r\n            case 'customFunction':\r\n                return (v) => {\r\n                    if (typeof constraints[0] === 'function') {\r\n                        let message = constraints[0](v)\r\n                        if (!message) {\r\n                            return { passing: true, message: '' }\r\n                        } else {\r\n                            return { passing: false, message }\r\n                        }\r\n                    }\r\n                }\r\n            default:\r\n                return () => {\r\n                    return { passing: true, message: '' }\r\n                }\r\n        }\r\n\r\n    }\r\n\r\n    /**\r\n     * 遍历生成的校验方法对当前值进行校验，当发现错误就返回校验结果\r\n     * 遍历完成没有错误则返回校验通过结果\r\n     * @param validatorFn 校验方法\r\n     * @param value 当前值\r\n     */\r\n    static executeValidator(validatorFn, value) {\r\n        for (let i = 0; i < validatorFn.length; i++) {\r\n            let validationResult = validatorFn[i](value);\r\n            if (validationResult['passing'] === false) {\r\n                return validationResult;\r\n            }\r\n        }\r\n        return { passing: true, message: '' };\r\n    }\r\n\r\n}\r\n\r\nexport { ValidatorFactory };","import { ViewModelContext } from '../view-model/index';\r\nimport { BindingType } from './types';\r\nimport { BindingValueConverter } from './binding_value_converter';\r\nimport { BindingValueAccessor, BindingValueAccessorFactory } from './binding_value_accessor';\r\nimport { ValidationRule, ValidatorFactory } from '../validator/index'\r\n\r\n/**\r\n * 表单控件配置\r\n */\r\ninterface FormControlConfig {\r\n  name: string;\r\n  bindingType: BindingType;\r\n  bindingPath: string;\r\n  valueConverter?: BindingValueConverter;\r\n  valueChanging?: string;\r\n  valueChanged?: string;\r\n  validRules?: ValidationRule | ValidationRule[] | null;\r\n}\r\n\r\n/**\r\n * FormControl定义\r\n */\r\nclass FormControl {\r\n\r\n  private valueAccessor: BindingValueAccessor;\r\n\r\n  private validatorFn: any;\r\n\r\n  private validationResult: any;\r\n\r\n  constructor(config: FormControlConfig, viewModelContext: ViewModelContext) {\r\n    this.valueAccessor = BindingValueAccessorFactory.create(\r\n      config.bindingType,\r\n      config.bindingPath,\r\n      config.valueConverter,\r\n      viewModelContext\r\n    );\r\n    this.validatorFn = config.validRules && ValidatorFactory.create(config.validRules)\r\n  }\r\n\r\n  public get value() {\r\n    return this.valueAccessor.getValue();\r\n  }\r\n\r\n  public set value(val) {\r\n    this.valueAccessor.setValue(val);\r\n  }\r\n}\r\n\r\nexport { FormControlConfig, FormControl };\r\n","import { MetadataUtil } from '../core/index';\r\nimport { ViewModelContext } from '../view-model/index';\r\nimport { FormControlConfig, FormControl } from './form_control';\r\nimport { FormControlMetadata, FORM_CONTROL_PROP_META } from './decorators';\r\nimport { Subject } from 'rxjs';\r\nimport { ValidatorFactory } from '../validator'\r\n\r\n/**\r\n * Form抽象类\r\n */\r\nabstract class Form {\r\n\r\n  /**\r\n   * 表单控件配置\r\n   */\r\n  private formControlConfigs: FormControlConfig[];\r\n\r\n  /**\r\n   * ViewModel上下文\r\n   */\r\n  private viewModelContext: ViewModelContext;\r\n\r\n  private validateformControls: string[];\r\n\r\n  private validateformControlPathMap: Map<string, string>;\r\n\r\n  public changes: Subject<any>;\r\n\r\n  /**\r\n   * 构造函数\r\n   */\r\n  constructor(viewModelContext: ViewModelContext) {\r\n    this.viewModelContext = viewModelContext;\r\n    this.formControlConfigs = [];\r\n    this.validateformControls = [];\r\n    this.validateformControlPathMap = new Map;\r\n    this.changes = new Subject();\r\n  }\r\n\r\n  /**\r\n   * 初始化\r\n   */\r\n  public init() {\r\n    this.collectMetadatas();\r\n    this.createFormControls();\r\n  }\r\n\r\n  /**\r\n   * 全部校验 \r\n   *  formControlConfigs 上所有的formControl的存在方法调用一遍 将错误信息集中返回\r\n   */\r\n  validateFields() {\r\n    let validationResult = [];\r\n    if (this.validateformControls.length === 0) { return validationResult; }\r\n    this.validateformControls.forEach((formControl) => {\r\n      this[formControl]['validationResult'] = ValidatorFactory.executeValidator(this[formControl]['validatorFn'], this[formControl]['value']);\r\n      !this[formControl]['validationResult'].passing && validationResult.push(this[formControl])\r\n    });\r\n    this.changes.next({ type: 'validateFieldsFinished' })\r\n    return validationResult;\r\n  }\r\n\r\n  /**\r\n   * 获取某一个得校验错误信息\r\n   * @param name 属性名称\r\n   */\r\n  getFieldError(name: string) {\r\n    if (this.validateformControls.length === 0) {\r\n      return {}\r\n    }\r\n    const index = this.validateformControls.findIndex((item) => {\r\n      return item === name\r\n    });\r\n    if (index === -1) {\r\n      return {}\r\n    } else {\r\n      const result = ValidatorFactory.executeValidator(this[name]['validatorFn'], this[name]['value']);\r\n      this[name]['validationResult'] = result;\r\n      this.changes.next({ type: 'validateFieldsFinished', value: name });\r\n      return result;\r\n    }\r\n  }\r\n\r\n  /**\r\n * 根据form元数据中的path获取某一个得校验错误信息\r\n * @param path 属性名称数组\r\n */\r\n  getFieldErrorByPath(path: string[]) {\r\n    if (this.validateformControls.length === 0) {\r\n      return {}\r\n    }\r\n    let pathName = path[0]\r\n    if (path && path.length >= 2) {\r\n      pathName = path.join('.');\r\n    }\r\n    const index = this.validateformControlPathMap.has(pathName);\r\n    if (!index) {\r\n      return {}\r\n    } else {\r\n      const result = ValidatorFactory.executeValidator(this[this.validateformControlPathMap.get(pathName)]['validatorFn'], this[this.validateformControlPathMap.get(pathName)]['value']);\r\n      this[this.validateformControlPathMap.get(pathName)]['validationResult'] = result;\r\n      this.changes.next({ type: 'validateFieldsFinished', value: this.validateformControlPathMap.get(pathName) });\r\n      return result;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 清除一组字段验证状态\r\n   * @param fields 字段的数组\r\n   */\r\n  resetFieldsValidate(fields?: string[]) {\r\n    if (this.validateformControls.length === 0) {\r\n      return true;\r\n    } else {\r\n      if (fields && fields.length > 0) {\r\n        const sa = new Set(this.validateformControls);\r\n        const sb = new Set(fields);\r\n        // 交集\r\n        const intersect = this.validateformControls.filter(x => sb.has(x));\r\n        // 遍历清空所有校验结果数据\r\n        intersect.forEach(item => {\r\n          this[item]['validationResult'] = {};\r\n        })\r\n      } else {\r\n        // 没传数据全部清除\r\n        this.validateformControls.forEach(item => {\r\n          this[item]['validationResult'] = {};\r\n        })\r\n      }\r\n      this.changes.next({ type: 'validateFieldsFinished' })\r\n    }\r\n\r\n  }\r\n\r\n  /**\r\n   * 创建FormControls\r\n   */\r\n  private createFormControls() {\r\n    this.formControlConfigs.forEach((formControlConfig: FormControlConfig) => {\r\n      const name = formControlConfig.name;\r\n      const formControl = new FormControl(formControlConfig, this.viewModelContext);\r\n      this[name] = formControl;\r\n    });\r\n  }\r\n\r\n  /**\r\n   * 收集元数据\r\n   */\r\n  private collectMetadatas() {\r\n    const formControlMetadatas = MetadataUtil.getPropsMetadatasByName(this.constructor, FORM_CONTROL_PROP_META);\r\n    Object.keys(formControlMetadatas).forEach((name: string) => {\r\n      const formControlMetadata = formControlMetadatas[name] as FormControlMetadata;\r\n      if (formControlMetadata.validRules) {\r\n        this.validateformControls.push(name);\r\n        this.validateformControlPathMap.set(formControlMetadata.bindingPath, name);\r\n      }\r\n      const formControlConfig: FormControlConfig = {\r\n        name: name,\r\n        bindingType: formControlMetadata.bindingType,\r\n        bindingPath: formControlMetadata.bindingPath,\r\n        valueConverter: formControlMetadata.valueConverter,\r\n        valueChanging: formControlMetadata.valueChanging,\r\n        valueChanged: formControlMetadata.valueChanged,\r\n        validRules: formControlMetadata.validRules\r\n      };\r\n      this.formControlConfigs.push(formControlConfig);\r\n    });\r\n  }\r\n\r\n  public getEntityValueChangingListeners(): { [property: string]: string } {\r\n    const listeners = {};\r\n    this.formControlConfigs.forEach((formControl: FormControlConfig) => {\r\n      if (formControl.valueChanging) {\r\n        listeners[formControl.bindingPath] = formControl.valueChanging;\r\n      }\r\n    });\r\n    return listeners;\r\n  }\r\n\r\n  public getEntityValueChangedListeners(): { [property: string]: string } {\r\n    const listeners = {};\r\n    this.formControlConfigs.forEach((formControl: FormControlConfig) => {\r\n      if (formControl.valueChanged) {\r\n        listeners[formControl.bindingPath] = formControl.valueChanged;\r\n      }\r\n    });\r\n    return listeners;\r\n  }\r\n}\r\n\r\nexport { Form };\r\n","import { makePropDecorator } from '../core/index';\r\nimport { CommandParams, ParamDescriptions,  } from '../command/index';\r\n\r\n/**\r\n * 快捷键\r\n */\r\nexport interface Keybinding {\r\n  readonly ctrlKey: boolean;\r\n  readonly shiftKey: boolean;\r\n  readonly altKey: boolean;\r\n  readonly metaKey?: boolean;\r\n  readonly key: string;\r\n}\r\n\r\n/**\r\n * 命令描述\r\n */\r\nexport interface CommandMethodMetadata {\r\n\r\n  /**\r\n   * 命令名称\r\n   */\r\n  name: string;\r\n\r\n  /**\r\n   * 命令参数\r\n   */\r\n  params?: CommandParams;\r\n\r\n  /**\r\n   * 框架id\r\n   * 通过frameId确定命令执行的上下文，不指定则默认为当前Frame。\r\n   */\r\n  frameId?: string;\r\n\r\n  /**\r\n   * 参数描述，目前描述类型，后续可兼容精度等其他信息。\r\n   */\r\n  paramDescriptions?: ParamDescriptions;\r\n\r\n  /**\r\n   * 快捷键绑定\r\n   */\r\n  keyBinding?: Keybinding;\r\n}\r\n\r\n\r\n/**\r\n * 命令装饰器名称\r\n */\r\nexport const COMMAND_METHOD_META = 'CommandMethodMeta';\r\n\r\n/**\r\n * 命令装饰接口\r\n */\r\nexport interface CommandMethodMetaDecorator {\r\n  (ngCommand?: CommandMethodMetadata): any;\r\n  new(ngCommand?: CommandMethodMetadata): any;\r\n}\r\n\r\n/**\r\n * 命令装饰器工厂\r\n */\r\nexport const CommandMethodMeta: CommandMethodMetaDecorator =\r\n  makePropDecorator(COMMAND_METHOD_META, (obj: CommandMethodMetadata) => obj);\r\n","import { MetadataUtil } from '../core/index';\r\nimport { Injector } from '../core/index';\r\nimport { Entity } from '../entity/index';\r\nimport { Repository } from '../repository/index';\r\nimport { Command, CommandBus } from '../command/index';\r\nimport { BindingData, EntityValueChange, InvokeOnValueChange } from '../binding-data/index';\r\nimport { UIState } from '../ui-state/index';\r\nimport { StateMachine } from '../state-machine/index';\r\nimport { Form } from '../form/index';\r\nimport { ViewModelContext } from './view_model_context';\r\n\r\nimport { COMMAND_METHOD_META, CommandMethodMetadata, Keybinding } from './decorators';\r\nimport { EMPTY, from, Observable, of } from 'rxjs';\r\nimport { concatMap, every, tap } from 'rxjs/operators';\r\n\r\nabstract class ViewModel {\r\n\r\n  /**\r\n   * 命令元数据集合\r\n   */\r\n  public ngCommands: { [propName: string]: CommandMethodMetadata };\r\n\r\n  /**\r\n   * 名称\r\n   */\r\n  public id: string;\r\n\r\n  /**\r\n   * 注入器\r\n   */\r\n  public injector: Injector;\r\n\r\n  /**\r\n   * 视图模型上下文\r\n   */\r\n  public context: ViewModelContext;\r\n\r\n  /**\r\n   * 数据仓库\r\n   */\r\n  public repository: Repository<Entity>;\r\n\r\n  /**\r\n   * 绑定路径\r\n   */\r\n  public bindingPath: string;\r\n\r\n  /**\r\n   * 数据状态\r\n   */\r\n  public bindingData: BindingData;\r\n\r\n  /**\r\n   * UI状态\r\n   */\r\n  public uiState: UIState;\r\n\r\n  /**\r\n   * 状态机\r\n   */\r\n  public stateMachine: StateMachine;\r\n\r\n  /**\r\n   * 表单\r\n   */\r\n  public form: Form;\r\n\r\n  /**\r\n   * 命令总线\r\n   */\r\n  public commandBus: CommandBus;\r\n\r\n  /**\r\n   * 快捷键映射\r\n   */\r\n  public keybindingMap: Map<string, Keybinding>;\r\n\r\n  /**\r\n   * 值变化前监听器\r\n   */\r\n  private entityValueChangingListeners: Map<string, string>;\r\n\r\n  /**\r\n   * 值变化后监听器\r\n   */\r\n  private entityValueChangedListeners: Map<string, string>;\r\n\r\n  /**\r\n   * 构造函数\r\n   */\r\n  public constructor(injector: Injector, id: string) {\r\n    this.injector = injector;\r\n    this.id = id;\r\n  }\r\n\r\n  /**\r\n   * 初始化\r\n   */\r\n  public init() {\r\n    this.initRepository();\r\n    this.initContext();\r\n    this.initBindingData();\r\n    this.initUIState();\r\n    this.intiStateMachine();\r\n    this.initForm();\r\n    this.initCommandBus();\r\n    this.registerWithParent();\r\n    this.initListeners();\r\n    this.closeOldBeSession();\r\n  }\r\n\r\n  private initRepository() {\r\n    this.repository = this.injector.get(Repository);\r\n  }\r\n\r\n  private initContext() {\r\n    this.context = this.injector.get<ViewModelContext>(ViewModelContext);\r\n    this.context.init(this);\r\n  }\r\n\r\n  private initBindingData() {\r\n    this.bindingData = this.context.injector.get(BindingData);\r\n    this.entityValueChangingListeners = new Map<string, string>();\r\n    this.entityValueChangedListeners = new Map<string, string>();\r\n    if (this.bindingData) {\r\n      this.bindingData.setValueChangeInvokerFactory((paths: string[]): InvokeOnValueChange => {\r\n        return (preValue, value, entityChanged: boolean, primaryValue?: any): Observable<boolean> => {\r\n          const plainPath = '/' + paths.join('/');\r\n          let command: string;\r\n          if (entityChanged === false) {\r\n            command = this.entityValueChangingListeners[plainPath];\r\n          } else {\r\n            command = this.entityValueChangedListeners[plainPath];\r\n          }\r\n\r\n          if (!!command) {\r\n            const change: EntityValueChange = {\r\n              paths: paths,\r\n              preValue: preValue,\r\n              value: value,\r\n              changed: entityChanged\r\n            };\r\n            const commands = command.split(';').filter(p => p);\r\n            let valueChangeSuccess = true;\r\n            return from(commands).pipe(\r\n              concatMap(item => {\r\n                if (!valueChangeSuccess) {\r\n                  return EMPTY;\r\n                }\r\n                return this[item](change).pipe(\r\n                  tap((result: any) => {\r\n                    valueChangeSuccess = result;\r\n                  })\r\n                );\r\n              }),\r\n              every((result: any) => result)\r\n            );\r\n          } else {\r\n            return of(true);\r\n          }\r\n        };\r\n\r\n      });\r\n    }\r\n\r\n    const repositoryName = this.repository.name;\r\n    const bindingDataManager = this.context.appContext.bindingDataManager;\r\n    const repositoryBindingData = bindingDataManager.getBindingDataByName(repositoryName);\r\n    this.bindingData.initByBindingList(repositoryBindingData.list, this.context);\r\n  }\r\n\r\n  private initUIState() {\r\n    this.uiState = this.injector.get(UIState);\r\n  }\r\n\r\n  private intiStateMachine() {\r\n    this.stateMachine = this.injector.get(StateMachine, null);\r\n    if (!this.stateMachine) {\r\n      return;\r\n    }\r\n    this.stateMachine.init(this.context);\r\n  }\r\n\r\n  private initForm() {\r\n    this.form = this.injector.get(Form, null);\r\n    this.form.init();\r\n  }\r\n\r\n  private initCommandBus() {\r\n    this.commandBus = this.injector.get(CommandBus);\r\n    this.extendCommandMethods();\r\n  }\r\n\r\n  private extendCommandMethods() {\r\n    this.ngCommands = MetadataUtil.getPropsMetadatasByName(this.constructor, COMMAND_METHOD_META);\r\n    this.keybindingMap = new Map<string, Keybinding>();\r\n\r\n    Object.keys(this.ngCommands).forEach((propName: string) => {\r\n      const ngCommand: CommandMethodMetadata = this.ngCommands[propName];\r\n\r\n      Object.defineProperty(this, propName, {\r\n        value: (eventParams: any) => {\r\n          const command: Command = {\r\n            name: ngCommand.name,\r\n            params: ngCommand.params,\r\n            paramDescriptions: ngCommand.paramDescriptions,\r\n            eventParam: eventParams || null\r\n          };\r\n          return this.commandBus.dispatch(command);\r\n        }\r\n      });\r\n\r\n      if (ngCommand.keyBinding) {\r\n        this.keybindingMap.set(propName, ngCommand.keyBinding);\r\n      }\r\n    });\r\n  }\r\n\r\n  private registerWithParent() {\r\n    const parentContext = this.context.parent;\r\n    if (!parentContext || !parentContext.viewModel || !parentContext.viewModel['childViewModels']) {\r\n      return;\r\n    }\r\n\r\n    const parentViewModel = parentContext.viewModel;\r\n    const className = this.constructor.name;\r\n    const propName = parentViewModel['childViewModels'][className];\r\n    parentViewModel[propName] = this;\r\n  }\r\n\r\n  /**\r\n   * 关闭老的BeSession\r\n   */\r\n  private closeOldBeSession() {\r\n    const allViewModelContexts = this.context.appContext.viewModelContextManager.getContexts();\r\n    if (allViewModelContexts.length === 1 && allViewModelContexts[0] === this.context) {\r\n      this.context.repository.reset();\r\n    }\r\n  }\r\n\r\n  /**\r\n * 从Form获取监听器\r\n */\r\n  private initListeners() {\r\n    const extractPath = (bindingBasePath: string, bindingPath: string): string => {\r\n      return '/' + bindingBasePath.split('/').concat(bindingPath.split('.')).filter((item) => item.length > 0).join('/');\r\n    };\r\n\r\n    if (this.form) {\r\n      const valueChangingListeners = this.form.getEntityValueChangingListeners();\r\n      Object.keys(valueChangingListeners).forEach((bindingPath) => {\r\n        const plainPath = extractPath(this.bindingPath, bindingPath);\r\n        this.entityValueChangingListeners[plainPath] = valueChangingListeners[bindingPath];\r\n      });\r\n\r\n      const valueChangedListeners = this.form.getEntityValueChangedListeners();\r\n      Object.keys(valueChangedListeners).forEach((bindingPath) => {\r\n        const plainPath = extractPath(this.bindingPath, bindingPath);\r\n        this.entityValueChangedListeners[plainPath] = valueChangedListeners[bindingPath];\r\n      });\r\n    }\r\n  }\r\n\r\n}\r\n\r\nexport { ViewModel };\r\n","import { StaticProvider } from '../core/index';\r\nimport { ViewModel } from './view_model';\r\n\r\nclass ViewModelOptions {\r\n\r\n  id: string;\r\n\r\n  /**\r\n   * 应用providers\r\n   */\r\n  providers: StaticProvider[];\r\n\r\n  /**\r\n   * 父ViewModel\r\n   */\r\n  parent?: ViewModel;\r\n\r\n}\r\n\r\nexport { ViewModelOptions };\r\n","import { Subject, Subscription } from 'rxjs';\r\n\r\nclass AppEventBus {\r\n  /**\r\n* eventBus\r\n*/\r\n  private eventBus: Subject<any>;\r\n\r\n  private subscriptionsMap: Map<string, Subscription>;\r\n\r\n  /**\r\n   * 构造函数\r\n   */\r\n  constructor() {\r\n    this.eventBus = new Subject();\r\n    this.subscriptionsMap = new Map<string, Subscription>();\r\n  }\r\n\r\n  triggerEvent(event: any) {\r\n    this.eventBus.next(event);\r\n  }\r\n\r\n  subscribe(componentId: string, func: Function, funcError?: Function) {\r\n    if (this.subscriptionsMap.has(componentId) === false) {\r\n      const subscription = this.eventBus.subscribe(\r\n        (value) => func(value),\r\n        (value) => funcError(value)\r\n      )\r\n      this.subscriptionsMap.set(componentId, subscription);\r\n    }\r\n  }\r\n  \r\n  unsubscribe(componentId: string) {\r\n    if (this.subscriptionsMap.has(componentId) === true) {\r\n      this.subscriptionsMap.get(componentId).unsubscribe();\r\n      this.subscriptionsMap.delete(componentId);\r\n    }\r\n  }\r\n}\r\n\r\nexport { AppEventBus };","import { StaticProvider, Injector } from '../core/index';\r\nimport { BindingDataManager } from './binding_data_manager';\r\nimport { RepositoryManager } from './repository_mananger';\r\nimport { ViewModelContextManager } from './view_model_contex_manager';\r\nimport { AppContext } from './app_context';\r\nimport { AppEventBus } from './app_eventBus';\r\n\r\nconst APP_BASE_PROVIDERS: StaticProvider[] = [\r\n  { provide: AppEventBus, useClass: AppEventBus, deps: [] },\r\n  { provide: BindingDataManager, useClass: BindingDataManager, deps: [] },\r\n  { provide: RepositoryManager, useClass: RepositoryManager, deps: [] },\r\n  { provide: ViewModelContextManager, useClass: ViewModelContextManager, deps: [] },\r\n  {\r\n    provide: AppContext, useClass: AppContext,\r\n    deps: [Injector, AppEventBus, RepositoryManager, BindingDataManager, ViewModelContextManager]\r\n  }\r\n];\r\n\r\nexport { APP_BASE_PROVIDERS };\r\n","import { StaticProvider, Injector, createInjector} from '../core/index';\r\nimport { AppContext } from './app_context';\r\nimport { ViewModelContext, ViewModel, ViewModelOptions } from '../view-model/index';\r\n\r\nimport { APP_BASE_PROVIDERS } from './providers';\r\nimport { APP_VARIABLE_PROVIDERS } from '../variable/index';\r\nimport { VIEW_MODEL_COMMAND_PROVIDERS } from '../command/index';\r\nimport { HTTP_PROVIDERS } from '../http/index';\r\n\r\n\r\nclass App {\r\n\r\n  public context: AppContext;\r\n\r\n  /**\r\n   * 构造函数\r\n   */\r\n  constructor(options: any) {\r\n\r\n    options.providers = options.providers || [];\r\n    const appProviders = [\r\n      ...APP_BASE_PROVIDERS,\r\n      ...APP_VARIABLE_PROVIDERS,\r\n      ...HTTP_PROVIDERS,\r\n      ...options.providers\r\n    ];\r\n    const appInjector = createInjector(appProviders);\r\n    this.context = appInjector.get(AppContext);\r\n  }\r\n\r\n  /**\r\n   * 启用ViewModel\r\n   */\r\n  createViewModel(options: ViewModelOptions): ViewModel {\r\n\r\n    const providers = options.providers || [];\r\n    const parent = options.parent || null;\r\n\r\n    const mergedProviders: StaticProvider[] = [\r\n      { provide: ViewModelContext, useClass: ViewModelContext, deps: [] },\r\n      ...VIEW_MODEL_COMMAND_PROVIDERS,\r\n      ...providers\r\n    ];\r\n\r\n    const parentInjector = parent ? parent.injector : this.context.injector;\r\n    const injector = createInjector(mergedProviders, parentInjector);\r\n    const viewModel = injector.get<ViewModel>(ViewModel);\r\n    viewModel.init();\r\n    return viewModel;\r\n  }\r\n\r\n}\r\n\r\nexport { App };\r\n","/*\r\n * StateMachine变量解析\r\n * @Author: Witt\r\n * @Date: 2018-12-04 17:09:42\r\n * @Last Modified by: Witt\r\n * @Last Modified time: 2019-10-30 11:07:10\r\n */\r\n\r\nimport { AppContext } from '../app/index';\r\nimport { ViewModelContext } from '../view-model/index';\r\nimport { CommandContext } from '../command/index';\r\n\r\n/**\r\n * 解析辅助工具类\r\n */\r\nclass ParseUtil {\r\n\r\n  /**\r\n   * 获取应用上下文\r\n   */\r\n  static getAppContext(context: any): AppContext {\r\n    if (context instanceof CommandContext) {\r\n      return context.viewModelContext.appContext;\r\n    } else if (context instanceof ViewModelContext) {\r\n      return context.appContext;\r\n    } else  if (context instanceof AppContext) {\r\n      return context;\r\n    } else {\r\n      throw new Error('上下文中找不到AppContext，请检查！');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 获取当前Frame的Context\r\n   */\r\n  static getFrameContext(context: any): ViewModelContext {\r\n    if (context instanceof CommandContext) {\r\n      return context.viewModelContext;\r\n    } else if (context instanceof ViewModelContext) {\r\n      return context;\r\n    } else {\r\n      throw new Error('上下文中找不到FrameContext，请检查！');\r\n    }\r\n\r\n  }\r\n\r\n  /**\r\n   * 获取根Frame的Context\r\n   */\r\n  static getRootFrameContext(context: any): ViewModelContext {\r\n    const frameContext = this.getFrameContext(context);\r\n    return frameContext.root;\r\n  }\r\n\r\n  /**\r\n   * 根据frameId获取FrameContext\r\n   */\r\n  static getFrameContextById(context: any, frameId: string): ViewModelContext {\r\n    const appContext = this.getAppContext(context);\r\n    return appContext.viewModelContextManager.getContextById(frameId);\r\n  }\r\n}\r\n\r\nexport { ParseUtil };\r\n","/**\r\n * 数据源变量解析\r\n * @author Witt <jiwt@inspur.com>\r\n */\r\nimport { AppContext } from '../app/index';\r\nimport { VariableParser } from './variable_parser';\r\nimport { ParseUtil } from './parse_util';\r\n\r\n/**\r\n * 数据变量解析\r\n */\r\nclass DataVariableParser implements VariableParser {\r\n\r\n  /**\r\n   * 解析变量\r\n   * @param expression 表达式\r\n   * @param context 上下文\r\n   */\r\n  parse(expression: string, context: any): any {\r\n    const appContext = ParseUtil.getAppContext(context);\r\n    const paths: string[] = this.extractPaths(expression);\r\n\r\n    // 1、单个的表达式：直接求值\r\n    if (paths.length === 1 && expression === `{DATA~${paths[0]}}`) {\r\n      return this.getValue(paths[0], appContext);\r\n    }\r\n\r\n    // 2、其他情况：字符串替换\r\n    paths.forEach( (path: string) => {\r\n      const searchValue = `{DATA~${path}}`;\r\n      const replaceValue = this.getValue(path, appContext);\r\n      expression = expression.replace(searchValue, replaceValue);\r\n    });\r\n\r\n    return  expression;\r\n  }\r\n\r\n  /**\r\n   * 提取路径\r\n   */\r\n  private extractPaths(expression: string) {\r\n    const paths: string[]  = [];\r\n\r\n    // 查找所有的uiState变量字符串\r\n    const DATA_PATTERN_G = /\\{DATA~(\\S+?)\\}/g;\r\n    const dataVariables = expression.match(DATA_PATTERN_G);\r\n    if (dataVariables === null) {\r\n      return [];\r\n    }\r\n\r\n    // 提取后边的路径\r\n    const DATA_PATTERN = /\\{DATA~(\\S+?)\\}/;\r\n    dataVariables.forEach( dataVariable =>  {\r\n      const pathMatches = dataVariable.match(DATA_PATTERN);\r\n      if (pathMatches != null && pathMatches.length === 2) {\r\n        paths.push(pathMatches[1]);\r\n      }\r\n    });\r\n    return paths;\r\n  }\r\n\r\n  /**\r\n   * 获取值\r\n   * @param path 路径：/\r\n   */\r\n  private getValue(path: string, appContext: AppContext): any {\r\n    const parts = path.split('/').filter((part: string) => {\r\n      return part !== '';\r\n    });\r\n\r\n    const frameContext = appContext.viewModelContextManager.getContextById(parts[0]);\r\n    if (!frameContext) {\r\n      throw new Error(`${path}不正确，请检查！`);\r\n    }\r\n\r\n    const bindingData  = frameContext.bindingData;\r\n    if (!bindingData) {\r\n      throw new Error(`${path}不正确，请检查！`);\r\n    }\r\n    return bindingData.getValue(parts.slice(1));\r\n  }\r\n\r\n\r\n}\r\n\r\nexport { DataVariableParser };\r\n","/**\r\n * session变量解析\r\n * @author Witt <jiwt@inspur.com>\r\n */\r\n\r\nimport { VariableParser } from './variable_parser';\r\nimport { AppContext } from '../app/index';\r\nimport { ParseUtil } from './parse_util';\r\n\r\n/**\r\n * 数据变量解析\r\n */\r\nclass UIStateVariableParser implements VariableParser {\r\n\r\n  /**\r\n   * 解析变量\r\n   * @param expression 形如：/frameId/stateName\r\n   * @param context 上下文\r\n   */\r\n  public parse(expression: string, context: any): any {\r\n\r\n    const appContext = ParseUtil.getAppContext(context);\r\n    const paths = this.extractPaths(expression);\r\n\r\n    // 1、单个的表达式：直接求值\r\n    if (paths.length === 1 && expression === `{UISTATE~${paths[0]}}`) {\r\n      return this.getUIState(paths[0], appContext);\r\n    }\r\n\r\n    // 2、其他情况：字符串替换\r\n    paths.forEach(path => {\r\n      const searchValue = `{UISTATE~${path}}`;\r\n      const replaceValue = this.getUIState(path, appContext);\r\n      expression = expression.replace(searchValue, replaceValue);\r\n    });\r\n\r\n    return expression;\r\n  }\r\n\r\n  /**\r\n   * 提取路径\r\n   * 变量格式：{}\r\n   */\r\n  private extractPaths(expression: string): string[] {\r\n    const paths: string[] = [];\r\n\r\n    // 查找所有的uiState变量字符串\r\n    const UI_STATE_PATTERN_G = /\\{UISTATE~(\\S+?)\\}/g;\r\n    const uiStateVariables = expression.match(UI_STATE_PATTERN_G);\r\n    if (uiStateVariables === null) {\r\n      return [];\r\n    }\r\n\r\n    // 提取后边的路径\r\n    const UI_STATE_PATTERN = /\\{UISTATE~(\\S+?)\\}/;\r\n    uiStateVariables.forEach((uiStateVariable: string) => {\r\n      const pathMatches = uiStateVariable.match(UI_STATE_PATTERN);\r\n      if (pathMatches != null && pathMatches.length === 2) {\r\n        paths.push(pathMatches[1]);\r\n      }\r\n    });\r\n\r\n    return paths;\r\n  }\r\n\r\n  /**\r\n   * 获取UIState\r\n   */\r\n  private getUIState(path: string, appContext: AppContext) {\r\n    const parts = path.split('/').filter((part: string) => {\r\n      return part !== '';\r\n    });\r\n    const [frameId, stateName] = parts;\r\n    const frameContext = appContext.viewModelContextManager.getContextById(frameId);\r\n    let state = frameContext.uiState[stateName];\r\n    if (state && state.constructor.toString().startsWith('function Date()')) {\r\n      return this.formatDate(state);\r\n    }\r\n    for (let i = 2; i < parts.length; i++) {\r\n      state = state[parts[i]];\r\n\r\n      // 复杂对象一层层查找下去，如果某一层不存在，结果可以是undefined，但是要直接返回undefined避免报错。\r\n      if (!state) {\r\n        return state;\r\n      }\r\n    }\r\n    return state;\r\n  }\r\n\r\n  /**\r\n   * @todo：待删除\r\n   */\r\n  private formatDate(value: Date): string {\r\n    if (!value) {\r\n      return '';\r\n    }\r\n\r\n    // 年\r\n    const year = value.getFullYear();\r\n\r\n    // 月\r\n    let month = (value.getMonth() + 1).toString();\r\n    month = month.length === 1 ? ('0' + month) : month;\r\n\r\n    // 日\r\n    let day = value.getDate().toString();\r\n    day = day.length === 1 ? ('0' + day) : day;\r\n    return `${year}-${month}-${day}`;\r\n  }\r\n}\r\n\r\nexport { UIStateVariableParser };\r\n","/*\r\n * StateMachine变量解析\r\n * @Author: Witt\r\n * @Date: 2018-12-04 17:09:42\r\n * @Last Modified by: Witt\r\n * @Last Modified time: 2019-10-30 11:07:10\r\n */\r\nimport { ViewModelContext } from '../view-model/index';\r\nimport { StateMachine } from '../state-machine/index';\r\nimport { VariableParser } from './variable_parser';\r\nimport { ParseUtil } from './parse_util';\r\n\r\n/**\r\n * 状态机变量解析\r\n * @summary\r\n *\r\n * 解析策略：\r\n * 1、不带frameId，从顶层StateMachine中解析\r\n * {STATEMACHINE~/states/key}\r\n * {STATEMACHINE~/renderStates/key}\r\n *\r\n * 2、带frameId，从frameId对应的FrameContext的StateMachine中解析\r\n * {STATEMACHINE~/frameId/states/key}\r\n * {STATEMACHINE~/frameId/renderStates/key}\r\n *\r\n * 存在的问题：\r\n * 1、不带frameId从顶层StateMachine解析仅为了兼容，将来改为从当前FrameContext的StateMachine中解析；\r\n * 2、组合表单中顶层StateMachine是主表单的rootFrameContext的StateMachine，显然不合理（既成事实）；\r\n * 3、farmeId如果是states或renderStates，导致解析失败，几率很小，但又风险。\r\n */\r\nclass StateMachineVariableParser implements VariableParser {\r\n\r\n  /**\r\n   * 构造函数\r\n   */\r\n  public constructor() {\r\n  }\r\n\r\n  /**\r\n   * 解析变量\r\n   * @param expression 变量：格式形如：/frameId/componentId/stateName\r\n   * @param context 上下文\r\n   */\r\n  public parse(expression: string, context: any): any {\r\n    const paths = this.extractPaths(expression);\r\n\r\n    // 1、单个的表达式：直接求值\r\n    if (paths.length === 1 && expression === `{STATEMACHINE~${paths[0]}}`) {\r\n      return this.getValue(paths[0], context);\r\n    }\r\n\r\n    // 2、其他情况：字符串替换\r\n    paths.forEach( path => {\r\n      const searchValue = `{STATEMACHINE~${path}}`;\r\n      const replaceValue = this.getValue(path, context);\r\n      expression = expression.replace(searchValue, replaceValue);\r\n    });\r\n\r\n    return  expression;\r\n  }\r\n\r\n  /**\r\n   * 提取Session变量名\r\n   * 变量格式：{}\r\n   */\r\n  private extractPaths(expression: string): string[] {\r\n    const paths: string[]  = [];\r\n\r\n    // 查找所有的StateMachine变量字符串\r\n    const STATE_MACHINE_PATTERN_G = /\\{STATEMACHINE~(\\S+?)\\}/g;\r\n    const stateMachineVariables = expression.match(STATE_MACHINE_PATTERN_G);\r\n    if (stateMachineVariables === null) {\r\n      return [];\r\n    }\r\n\r\n    // 提取后边的路径\r\n    const STATE_MACHINE_PATTERN = /\\{STATEMACHINE~(\\S+?)\\}/;\r\n    stateMachineVariables.forEach( sessionVariable =>  {\r\n      const pathMatches = sessionVariable.match(STATE_MACHINE_PATTERN);\r\n      if (pathMatches != null && pathMatches.length === 2) {\r\n        paths.push(pathMatches[1]);\r\n      }\r\n    });\r\n\r\n    return paths;\r\n  }\r\n\r\n  /**\r\n   * 获取对应的值\r\n   */\r\n  private getValue(path: string, context: any): any {\r\n\r\n    const pathObj = this.getPathObj(path);\r\n    const stateMachine = this.getTargetStateMachine(pathObj.frameId, context);\r\n\r\n    if (pathObj.type === 'currentState') {\r\n      return stateMachine.context.state;\r\n    } else if (pathObj.type === 'renderStates') {\r\n      return stateMachine[pathObj.name] as boolean;\r\n    } else {\r\n      throw new Error(`不支类型为${pathObj.type}的状态机变量`);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 解析path，并获取对应的StateMachine实例\r\n   */\r\n  private getTargetStateMachine(frameId: string, context): StateMachine {\r\n    let targetFrameContext: ViewModelContext;\r\n    if (frameId) {\r\n      targetFrameContext = ParseUtil.getFrameContextById(context, frameId);\r\n    } else {\r\n      targetFrameContext = ParseUtil.getRootFrameContext(context);\r\n    }\r\n\r\n    if (!targetFrameContext || !targetFrameContext.stateMachine) {\r\n      throw new Error('找不到对应的状态机实例，请检查！');\r\n    }\r\n    return targetFrameContext.stateMachine;\r\n  }\r\n\r\n  /**\r\n   * 将Path解析为格式化的Path对象\r\n   */\r\n  private getPathObj(path: string): any {\r\n    let parsedPathObj: any;\r\n    const parts = this.splitPath(path);\r\n\r\n    if (parts[0] === 'currentState' || parts[0] === 'renderStates') {\r\n      parsedPathObj = {\r\n        frameId: '',\r\n        type: parts[0],\r\n        name: parts[1]\r\n      };\r\n    } else {\r\n      parsedPathObj = {\r\n        frameId: parts[0],\r\n        type: parts[1],\r\n        name: parts[2]\r\n      };\r\n    }\r\n\r\n    return parsedPathObj;\r\n  }\r\n\r\n  /**\r\n   * 分隔Path\r\n   */\r\n  private splitPath(path: string): string[] {\r\n    const parts = path.split('/').filter((part: string) => {\r\n      return part !== '';\r\n    });\r\n    return parts;\r\n  }\r\n\r\n}\r\n\r\nexport { StateMachineVariableParser };\r\n","/**\r\n * session变量解析\r\n * @author Witt <jiwt@inspur.com>\r\n */\r\n\r\nimport { CommandContext } from '../command/index';\r\nimport { VariableParser } from './variable_parser';\r\n\r\n/**\r\n * 命令变量解析\r\n * {COMMAND~/params/key}\r\n * {COMMAND~/results/taskName}\r\n */\r\nclass CommandVariableParser implements VariableParser {\r\n\r\n  /**\r\n   * 构造函数\r\n   */\r\n  public constructor() {\r\n  }\r\n\r\n  /**\r\n   * 解析变量\r\n   * @param expression 变量：格式形如：/frameId/componentId/stateName\r\n   * @param context 上下文\r\n   */\r\n  public parse(expression: string, context: any): any {\r\n    const paths = this.extractPaths(expression);\r\n\r\n    // 1、单个的表达式：直接求值\r\n    if (paths.length === 1 && expression === `{COMMAND~${paths[0]}}`) {\r\n      return this.getValue(paths[0], context);\r\n    }\r\n\r\n    // 2、其他情况：字符串替换\r\n    paths.forEach( path => {\r\n      const searchValue = `{COMMAND~${path}}`;\r\n      const replaceValue = this.getValue(path, context);\r\n      expression = expression.replace(searchValue, replaceValue);\r\n    });\r\n\r\n    return  expression;\r\n  }\r\n\r\n  /**\r\n   * 提取Session变量名\r\n   * 变量格式：{}\r\n   */\r\n  private extractPaths(expression: string): string[] {\r\n    const paths: string[]  = [];\r\n\r\n    // 查找所有的uiState变量字符串\r\n    const UI_STATE_PATTERN_G = /\\{COMMAND~(\\S+?)\\}/g;\r\n    const uiStateVariables = expression.match(UI_STATE_PATTERN_G);\r\n    if (uiStateVariables === null) {\r\n      return [];\r\n    }\r\n\r\n    // 提取后边的路径\r\n    const UI_STATE_PATTERN = /\\{COMMAND~(\\S+?)\\}/;\r\n    uiStateVariables.forEach( sessionVariable =>  {\r\n      const pathMatches = sessionVariable.match(UI_STATE_PATTERN);\r\n      if (pathMatches != null && pathMatches.length === 2) {\r\n        paths.push(pathMatches[1]);\r\n      }\r\n    });\r\n\r\n    return paths;\r\n  }\r\n\r\n  /**\r\n   * 获取UIState\r\n   */\r\n  private getValue(path: string, context: any) {\r\n    if (context instanceof CommandContext === false) {\r\n      throw new Error('当前上下文不支持COMMAND变量，请检查！');\r\n    }\r\n    const parts = path.split('/').filter((part: string) => {\r\n      return part !== '';\r\n    });\r\n\r\n    const [type, name] = parts;\r\n    if (type === 'params') {\r\n      return context.command.params[name];\r\n    } else if (type === 'results') {\r\n      return context.results[name];\r\n    }\r\n  }\r\n}\r\n\r\nexport { CommandVariableParser };\r\n","/**\r\n * 变量解析服务\r\n * @author Witt<jiwt@inspur.com>\r\n */\r\nimport { VariableParser, VARIABLE_PARSERS } from './variable_parser';\r\nimport { Injector  } from '../core/index';\r\n\r\n\r\n/**\r\n * 变量解析服务\r\n * 职责：\r\n * 1、解析字符串中的变量，并替换成相应的值；\r\n * 2、对表达式进行求值。\r\n *\r\n * @todo 对表达式求值的部分和表达式功能重叠，是否转移到表达式中？\r\n */\r\nclass VariableParseService {\r\n\r\n  /**\r\n   * 解析器集合\r\n   */\r\n  private parsers: VariableParser[];\r\n\r\n  /**\r\n   * 构造变量解析服务\r\n   * @param parsers 解析器集合\r\n   */\r\n  constructor(parsers: VariableParser[]) {\r\n    this.parsers = parsers;\r\n  }\r\n\r\n  /**\r\n   * 解析表达式\r\n   * @param expression 表达式\r\n   * @param context 上下文\r\n   */\r\n  public parse(target: any, context?: any): any {\r\n    if (typeof target === 'string' && target.length > 0) {\r\n\r\n      // 字符串，直接解析\r\n      return this.parseExpression(target, context);\r\n\r\n    } else if (Array.isArray(target)) {\r\n\r\n      // 遍历数组\r\n      target.forEach((item, itemIndex) =>  {\r\n        if (typeof item === 'string') {\r\n          target[itemIndex] = this.parseExpression(item, context);\r\n        } else {\r\n          target[itemIndex] = this.parse(item, context);\r\n        }\r\n      });\r\n\r\n    } else if (typeof target === 'object' && target !== null) {\r\n\r\n      // 遍历对象可枚举属性\r\n      const keys = Object.keys(target);\r\n      keys.forEach(key => {\r\n        if (typeof target[key] === 'string') {\r\n          target[key] = this.parseExpression(target[key], context);\r\n        } else {\r\n          target[key] = this.parse(target[key], context);\r\n        }\r\n      });\r\n    }\r\n\r\n    return target;\r\n  }\r\n\r\n  /**\r\n   * 表达式求值\r\n   */\r\n  public evaluate(expression: string, context?: any): any {\r\n    const parsedExpression = this.parse(expression, context);\r\n    return (new Function('return ' + parsedExpression))();\r\n  }\r\n\r\n  /**\r\n   * 解析表达式\r\n   * @param expression 表达式\r\n   * @param context 上下文\r\n   */\r\n  private parseExpression(expression: string, context: any): string {\r\n\r\n    // 空串直接返回\r\n    if (expression === '') {\r\n      return '';\r\n    }\r\n\r\n    this.parsers.forEach(parser => {\r\n      if (typeof expression === 'string') {\r\n        expression = parser.parse(expression, context);\r\n      }\r\n    });\r\n    return expression;\r\n  }\r\n}\r\n\r\nexport { VariableParseService };\r\n","import { StaticProvider } from '../core/index';\r\nimport { VARIABLE_PARSERS } from './variable_parser';\r\nimport { DataVariableParser } from './data_variable_parser';\r\nimport { UIStateVariableParser } from './ui_state_variable_parser';\r\nimport { StateMachineVariableParser } from './state_machine_variable_parser';\r\nimport { CommandVariableParser } from './command_variable_parser';\r\nimport { VariableParseService } from './variable_parse_service';\r\n\r\nconst APP_VARIABLE_PROVIDERS: StaticProvider[] = [\r\n  { provide: VARIABLE_PARSERS,     useClass: DataVariableParser,         multi: true, deps: [] },\r\n  { provide: VARIABLE_PARSERS,     useClass: UIStateVariableParser,      multi: true,  deps: [] },\r\n  { provide: VARIABLE_PARSERS,     useClass: StateMachineVariableParser, multi: true,  deps: [] },\r\n  { provide: VARIABLE_PARSERS,     useClass: CommandVariableParser,      multi: true,  deps: [] },\r\n  { provide: VariableParseService, useClass: VariableParseService,       deps: [VARIABLE_PARSERS] },\r\n];\r\n\r\nexport { APP_VARIABLE_PROVIDERS };\r\n","/* eslint-disable no-case-declarations */\r\nimport { VariableParseService } from '../../variable/index';\r\nimport { CommandContext } from '../command_context';\r\nimport { Injector } from '../../core/index';\r\n\r\n/**\r\n * 任务函数\r\n * @params result 上一步执行结果\r\n * @params context 执行上下文\r\n */\r\ntype LinkFunc = (context: CommandContext) => boolean;\r\n\r\n/**\r\n * 任务链接\r\n */\r\nclass TaskLink {\r\n\r\n  /**\r\n   * 源任务\r\n   */\r\n  from: string;\r\n\r\n  /**\r\n   * 目标任务\r\n   */\r\n  to: string;\r\n\r\n  /**\r\n   * 执行条件\r\n   * 1、表达式；\r\n   * 2、布尔值；\r\n   * 3、函数\r\n   */\r\n  condition: string | boolean| LinkFunc;\r\n\r\n  /**\r\n   * 构造函数\r\n   */\r\n  constructor(from: string, to: string, condition: string | boolean| LinkFunc) {\r\n    this.from = from;\r\n    this.to   = to;\r\n    this.condition = condition;\r\n  }\r\n\r\n  /**\r\n   * 是否能够\r\n   */\r\n  public canLink(context: CommandContext): boolean {\r\n    const type = typeof this.condition;\r\n    let canLink;\r\n    switch (type) {\r\n      case 'boolean':\r\n        canLink = this.condition as boolean;\r\n        break;\r\n      case 'function':\r\n        canLink = (this.condition as LinkFunc)(context);\r\n        break;\r\n      case 'string':\r\n        const parseService = context.viewModelContext.injector.get(VariableParseService);\r\n        canLink = parseService.evaluate(this.condition as string, context);\r\n        break;\r\n      default:\r\n        canLink = false;\r\n        break;\r\n    }\r\n    return canLink;\r\n  }\r\n}\r\n\r\nexport { LinkFunc, TaskLink };\r\n","/*\r\n * @Author: Witt\r\n * @Date: 2018-10-17 14:13:40\r\n * @Last Modified by: Witt\r\n * @Last Modified time: 2018-10-17 16:08:34\r\n */\r\n\r\nimport { TaskFunc, TaskNode } from './task_node';\r\nimport { LinkFunc, TaskLink } from './task_link';\r\nimport { CommandContext } from '../command_context';\r\n\r\n/**\r\n * 任务执行流程\r\n */\r\nclass TaskFlow {\r\n\r\n  /**\r\n   * 节点集合\r\n   */\r\n  private nodes: TaskNode[] = [];\r\n\r\n  /**\r\n   * 边集合\r\n   */\r\n  private links: TaskLink[] = [];\r\n\r\n\r\n  // #region 节点操作\r\n\r\n  /**\r\n   * 添加节点\r\n   */\r\n  public addNode(name: string, func: TaskFunc): void {\r\n    const node = new TaskNode(name, func);\r\n    this.nodes.push(node);\r\n  }\r\n\r\n\r\n  /**\r\n   * 批量添加链接\r\n   */\r\n  public addNodes(nodes: TaskNode[]) {\r\n    this.nodes = this.nodes.concat(nodes);\r\n  }\r\n\r\n  /**\r\n   * 在目标节点之前插入一个节点\r\n   * @param target 目标节点名称\r\n   * @param name 名称\r\n   * @param func 函数\r\n   */\r\n  public insertNode(target: string, name: string, func: TaskFunc): void {\r\n    const index = this.findNodeIndex(target);\r\n    const node = this.createNode(name, func);\r\n    this.nodes.splice(index, 0, node);\r\n  }\r\n\r\n  /**\r\n   * 在目标节点之前插入一个节点\r\n   */\r\n  public appendNode(target: string, name: string, func: TaskFunc) {\r\n    const index = this.findNodeIndex(target) + 1;\r\n    const node = this.createNode(name, func);\r\n    this.nodes.splice(index, 0, node);\r\n  }\r\n\r\n  /**\r\n   * 获取节点索引\r\n   * @param name 名称\r\n   */\r\n  private findNodeIndex(name: string): number {\r\n    return this.nodes.findIndex((node: TaskNode) => {\r\n      return node.name === name;\r\n    });\r\n  }\r\n\r\n  /**\r\n   * 创建任务节点\r\n   * @param name 名称\r\n   * @param func 函数\r\n   */\r\n  private createNode(name: string, func: TaskFunc): TaskNode {\r\n    const node = new TaskNode(name, func);\r\n    return node;\r\n  }\r\n\r\n  // #endregion\r\n\r\n\r\n  // #region 链接操作\r\n\r\n  /**\r\n   * 添加链接\r\n   * @param name 名称\r\n   * @param func 函数\r\n   */\r\n  public addLink(from: string, to: string, condition: string | boolean) {\r\n    const link = this.createLink(from, to, condition);\r\n    this.links.push(link);\r\n  }\r\n\r\n  /**\r\n   * 批量添加链接\r\n   */\r\n  public addLinks(links: TaskLink[]) {\r\n    this.links = this.links.concat(links);\r\n  }\r\n\r\n  /**\r\n   * 创建链接\r\n   */\r\n  private createLink(from: string, to: string, condition: string | boolean) {\r\n    const link = new TaskLink(from, to, condition);\r\n    return link;\r\n  }\r\n\r\n  // #endregion\r\n\r\n\r\n  // #region 流程控制\r\n  /**\r\n   * 获取下一个节点\r\n   * @param from    源节点名称\r\n   * @param context 上下文\r\n   */\r\n  getNext(from?: string, context?: CommandContext): TaskNode {\r\n    if (!from) {\r\n      return this.nodes.shift();\r\n    }\r\n\r\n    // 符合满足条件的边\r\n    const nextLink = this.links.find((link: TaskLink) => {\r\n      return link.from === from && link.canLink(context);\r\n    });\r\n    if (!nextLink) {\r\n      return;\r\n    }\r\n\r\n    return this.nodes.find((node: TaskNode) => {\r\n      return node.name === nextLink.to;\r\n    });\r\n  }\r\n\r\n  // #endregion\r\n\r\n  // #region 其他方法\r\n\r\n  /**\r\n   * 克隆任务流\r\n   */\r\n  clone() {\r\n    const taskFlow = new TaskFlow();\r\n    taskFlow.addNodes(this.nodes);\r\n    taskFlow.addLinks(this.links);\r\n    return taskFlow;\r\n  }\r\n\r\n  // #endregion\r\n}\r\n\r\nexport { TaskFlow };\r\n","import { ViewModelContext } from '../view-model/index';\r\nimport { Command } from './command';\r\n\r\n/**\r\n * Command上下文\r\n */\r\nclass CommandContext {\r\n\r\n  /**\r\n   * 命令实例\r\n   */\r\n  command: Command;\r\n\r\n  /**\r\n   * 组件上下文\r\n   */\r\n  viewModelContext: ViewModelContext;\r\n\r\n  /**\r\n   * 执行结果\r\n   */\r\n  results: {[taskName: string]: any} = {};\r\n\r\n  /**\r\n   * 最新的执行结果\r\n   */\r\n  latestResult: any;\r\n\r\n  /**\r\n   * 事件参数\r\n   */\r\n  eventParams: any;\r\n\r\n  /**\r\n   * 构造函数\r\n   * @param command 命令\r\n   * @param viewModelContext 视图模型上下文\r\n   */\r\n  constructor(command: Command, viewModelContext: ViewModelContext) {\r\n    this.command = command;\r\n    this.viewModelContext = viewModelContext;\r\n  }\r\n\r\n}\r\n\r\nexport { CommandContext };\r\n","import { Observable, Subject, BehaviorSubject } from 'rxjs';\r\nimport { concatMap, map, takeLast, take, timeout, throwIfEmpty } from 'rxjs/operators';\r\n\r\nimport { createInjectionToken, Injector } from '../core/index';\r\nimport { ViewModelContext } from '../view-model/index';\r\nimport { VariableParseService } from '../variable/index';\r\n\r\nimport { Command, CommandParams, ParamDescriptions } from './command';\r\nimport { CommandContext } from './command_context';\r\nimport { TaskFunc, TaskFlow } from './flow/index';\r\n\r\n\r\n/**\r\n * 命令处理抽象类，所有具体的命令处理类必须继承它，并实现schedule方法。\r\n */\r\nabstract class CommandHandler {\r\n\r\n  /**\r\n   * 任务流程图\r\n   */\r\n  private taskFlow: TaskFlow;\r\n\r\n  /**\r\n   * 上下文\r\n   */\r\n  protected viewModelContext: ViewModelContext;\r\n\r\n  /**\r\n   * 变量解析服务\r\n   */\r\n  protected parseService: VariableParseService;\r\n\r\n  /**\r\n   * 构造函数\r\n   */\r\n  constructor() {\r\n  }\r\n\r\n  /**\r\n   * 构造执行流程\r\n   */\r\n  abstract schedule();\r\n\r\n  /**\r\n   * 初始化\r\n   */\r\n  public init(viewModelContext: ViewModelContext) {\r\n    this.viewModelContext = viewModelContext;\r\n    this.parseService = viewModelContext.injector.get(VariableParseService);\r\n    this.taskFlow = new TaskFlow();\r\n\r\n    this.schedule();\r\n  }\r\n\r\n  /**\r\n   * 执行任务\r\n   * @param command 要执行的命令\r\n   * @return 最后一个任务的执行结果\r\n   * @todo：按功能拆分小函数\r\n   */\r\n  public execute(command: Command): Observable<any> {\r\n    const lastTaskResult$ = new Subject();\r\n    const taskFlow = this.taskFlow.clone();\r\n\r\n    // setTimeout暂时不能去掉的原因：\r\n    // 1、树表单加载数据，依赖TreeTableBinding里设置的全局变量，需要延后执行加载时机；\r\n    // 2、关闭前命令需要延迟执行。\r\n    setTimeout(() => {\r\n\r\n      // 1、解析参数\r\n      // 避免解析变量时修改了原始的command\r\n      const { eventParam = null } = {\r\n        ...command\r\n      };\r\n      delete command.eventParam;\r\n      const commandToExecute = JSON.parse(JSON.stringify(command));\r\n      commandToExecute.params = this.parseService.parse(commandToExecute.params, this.viewModelContext);\r\n      command.eventParam = eventParam;\r\n      commandToExecute.eventParam = eventParam;\r\n\r\n      // 2、串联任务流\r\n      const initContext = new CommandContext(commandToExecute, this.viewModelContext);\r\n      initContext.eventParams = command.eventParam || null;\r\n      const context$ = new BehaviorSubject<CommandContext>(initContext);\r\n      let currentTask = taskFlow.getNext('', initContext);\r\n      const highOrder$ = context$.pipe(\r\n        concatMap((context: CommandContext) => {\r\n          const result$ = currentTask.execute(context);\r\n          return result$.pipe(\r\n            take(1),\r\n            map((result: any) => {\r\n\r\n              // 写入执行结果\r\n              context.results[currentTask.name] = result;\r\n              context.latestResult = result;\r\n              currentTask = taskFlow.getNext(currentTask.name, context);\r\n\r\n              // 操作控制流\r\n              if (currentTask) {\r\n                context$.next(context);\r\n              } else {\r\n                context$.complete();\r\n              }\r\n\r\n              // 将结果流转换为context流\r\n              return context;\r\n            }),\r\n            throwIfEmpty(() => {\r\n              context$.complete();\r\n            })\r\n          );\r\n        })\r\n      );\r\n\r\n      // 3、执行合并后的任务流\r\n      highOrder$.pipe(\r\n        takeLast(1)\r\n      ).subscribe({\r\n        next: (context: CommandContext) => {\r\n          lastTaskResult$.next(context.latestResult);\r\n        },\r\n        error: (error: any) => {\r\n          this.displayError(error);\r\n          lastTaskResult$.error(error);\r\n        },\r\n        complete: () => {\r\n          lastTaskResult$.complete();\r\n        },\r\n      });\r\n\r\n    }, 0);\r\n\r\n    return lastTaskResult$;\r\n  }\r\n\r\n  /**\r\n   * 显示错误信息\r\n   */\r\n  private displayError(error: any) {\r\n    if (!error) {\r\n      return;\r\n    }\r\n    if (!console || !console.error) {\r\n      return;\r\n    }\r\n    console.error(error);\r\n  }\r\n\r\n  /**\r\n   * 添加任务，只有子类可以添加任务，外部不能访问\r\n   * @param name  任务名称\r\n   * @param func 任务函数\r\n   */\r\n  protected addTask(name: string, func: TaskFunc) {\r\n    this.taskFlow.addNode(name, func);\r\n  }\r\n\r\n  /**\r\n   * 添加任务，只有子类可以添加任务，外部不能访问\r\n   * @param name  任务名称\r\n   * @param func 任务函数\r\n   */\r\n  protected addLink(from: string, to: string, condition: string | boolean) {\r\n    this.taskFlow.addLink(from, to, condition);\r\n  }\r\n\r\n  /**\r\n   * 插入任务\r\n   * @param  name 要扩展的任务名称\r\n   * @param  func 扩展函数\r\n   */\r\n  public insertTask(target: string, name: string, func: TaskFunc) {\r\n    throw new Error('Not Implemented');\r\n  }\r\n\r\n  /**\r\n   * 插入任务\r\n   * @param  name 要扩展的任务名称\r\n   * @param  func 扩展函数\r\n   */\r\n  public afterTask(target: string, name: string, func: TaskFunc) {\r\n    throw new Error('Not Implemented');\r\n  }\r\n\r\n  /**\r\n   * 替换任务\r\n   * @param  name 要替换的任务名称\r\n   * @param  func 替换函数\r\n   */\r\n  public replaceTask(name: string, func: TaskFunc) {\r\n    throw new Error('Not Implement');\r\n  }\r\n\r\n  /**\r\n   * 调用方法\r\n   */\r\n  public invoke(serviceInstance: any, method: string, args: any[], context: CommandContext) {\r\n    this.setContextToServiceInstance(serviceInstance, context);\r\n    const parsedArgs = this.parseService.parse(args, context);\r\n    return serviceInstance[method](...parsedArgs);\r\n  }\r\n\r\n  /**\r\n   * 为服务设置命令上下文\r\n   * @todo\r\n   * 通过这种方式存在很大问题：\r\n   * 1、会覆盖掉已有的context，给开发人员造成困扰和调试成本；\r\n   * 2、服务中依赖了一个没有声明的对象，不符合面向对象的原则。\r\n   * 建议解决方案：\r\n   * 1、将context修改为某个特殊属性名；\r\n   * 2、先检测服务上有没有一个CommandContext类型的context属性，有的话再赋值，\r\n   *    这就要求需要使用context的服务需要是实现一个IContext接口。\r\n   */\r\n  private setContextToServiceInstance(serviceInstance: any, context: CommandContext) {\r\n\r\n    // 如果服务上已经存在context属性，并且该属性不是CommandContext类型，则不能覆盖\r\n    const serviceContext = serviceInstance.context;\r\n    if (serviceContext && (serviceContext instanceof CommandContext === false)) {\r\n      return;\r\n    }\r\n\r\n    serviceInstance.context = context;\r\n  }\r\n}\r\n\r\n/**\r\n * 命令处理器注入Token\r\n */\r\nconst COMMAND_HANDLERS_TOKEN = createInjectionToken('@Farris/devkit COMMAND_HANDLERS_TOKEN');\r\n\r\nexport { CommandHandler, COMMAND_HANDLERS_TOKEN };\r\n","/**\r\n * 命令处理注册器相关定义\r\n * @author Witt<jiwt@inspur.com>\r\n */\r\nimport { MetadataUtil, Injector, InjectFlags } from '../core/index';\r\nimport { COMMAND_HANDLER_META, CommandHandlerMetadata } from './decorators';\r\nimport { COMMAND_HANDLERS_TOKEN, CommandHandler } from './command_handler';\r\n\r\n/**\r\n * 命令处理注册器\r\n */\r\nclass CommandHandlerRegistry {\r\n\r\n  /**\r\n   * CommandHandler Map\r\n   */\r\n  private handlerMap: Map<string, CommandHandler>;\r\n\r\n  /**\r\n   * 构造函数\r\n   * @param handlers 命令处理实例数组\r\n   */\r\n  constructor(private injector: Injector) {\r\n    const handlers = this.injector.get(COMMAND_HANDLERS_TOKEN, null, InjectFlags.Optional);\r\n    this.handlerMap = new Map<string, CommandHandler>();\r\n    if (handlers) {\r\n      handlers.forEach((handler: CommandHandler) => {\r\n        this.regist(handler);\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 添加命令处理\r\n   * @param  commandName    命令名称\r\n   * @param  commandHandler 命令处理实例\r\n   */\r\n  public set(commandName: string, commandHandler: CommandHandler) {\r\n    if (this.handlerMap.has(commandName)) {\r\n      throw new Error(commandName + '对应的CommandHandler已经存在');\r\n    }\r\n    this.handlerMap.set(commandName, commandHandler);\r\n  }\r\n\r\n  /**\r\n   * 获取命令处理\r\n   * @param   commandName 命令名称\r\n   * @returns 命令处理实例\r\n   */\r\n  public get(commandName: string): CommandHandler {\r\n    if (this.handlerMap.has(commandName) === false) {\r\n      throw new Error('找不到' + commandName + '对应的CommandHandler');\r\n    }\r\n    return this.handlerMap.get(commandName);\r\n  }\r\n\r\n  /**\r\n   * 注册命令处理\r\n   * @param handlers 命令处理实例\r\n   */\r\n  public regist(commandHandler: CommandHandler) {\r\n\r\n    // 根据metadata获取对应的Command名称\r\n    const handlerMetadata: CommandHandlerMetadata =\r\n      MetadataUtil.getClassMetadataByName(commandHandler.constructor, COMMAND_HANDLER_META);\r\n    if (!handlerMetadata) {\r\n      throw new Error('CommandHandler必须指定要处理的命令名称');\r\n    }\r\n    const commandName = handlerMetadata.commandName;\r\n    this.set(commandName, commandHandler);\r\n  }\r\n\r\n}\r\n\r\nexport { CommandHandlerRegistry };\r\n","/**\r\n * 命令处理扩展相关\r\n * @author Witt<jiwt@inspur.com>\r\n */\r\nimport { createInjectionToken, Injector } from '../core/index';\r\nimport { CommandHandler } from './command_handler';\r\n\r\n\r\nabstract class CommandHandlerExtender {\r\n\r\n  /**\r\n   * 扩展方法\r\n   * @param handler 要扩展的命令处理器\r\n   */\r\n  abstract extend(handler: CommandHandler): CommandHandler;\r\n\r\n}\r\n\r\n\r\n/**\r\n * 命令处理器扩展注入Token\r\n */\r\nconst COMMAND_HANDLER_EXTENDERS_TOKEN = createInjectionToken('@farris/devkit COMMAND_HANDLER_EXTENDERS_TOKEN');\r\n\r\nexport { CommandHandlerExtender, COMMAND_HANDLER_EXTENDERS_TOKEN };\r\n","/**\r\n * 命令处理扩展注册器相关定义\r\n * @author Witt<jiwt@inspur.com>\r\n */\r\n\r\nimport { MetadataUtil, Injector, InjectFlags } from '../core/index';\r\nimport { COMMAND_HANDLER_EXTENDER_META, CommandHandlerExtenderMetadata } from './decorators';\r\nimport { COMMAND_HANDLER_EXTENDERS_TOKEN, CommandHandlerExtender } from './command_handler_extender';\r\n\r\n/**\r\n * 命令处理扩展注册器\r\n */\r\nclass CommandHandlerExtenderRegistry {\r\n\r\n  /**\r\n   * CommandHandlerExtender实例Map\r\n   * - key：命令名称\r\n   * - value：命令扩展实例\r\n   */\r\n  private extendersMap: Map<string, CommandHandlerExtender[]>;\r\n\r\n  /**\r\n   * 构造函数\r\n   * @param extenders 命令扩展实例数组\r\n   */\r\n  constructor(private injector: Injector) {\r\n    const extenders = this.injector.get(COMMAND_HANDLER_EXTENDERS_TOKEN, null, InjectFlags.Optional);\r\n    this.extendersMap = new Map<string, CommandHandlerExtender[]>();\r\n    if (extenders) {\r\n      extenders.forEach((extender: CommandHandlerExtender) => {\r\n        this.regist(extender);\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 获取命令扩展实例数组\r\n   * @param   commandName 命令名称\r\n   * @returns 命令处理扩展实例数组\r\n   */\r\n  get(commandName: string): CommandHandlerExtender[] {\r\n    if (this.extendersMap.has(commandName) === false) {\r\n      return [];\r\n    }\r\n    return this.extendersMap.get(commandName);\r\n  }\r\n\r\n  /**\r\n   * 添加命令扩展\r\n   * @param commandName Command名称\r\n   * @param extender    CommandHandlerExtender实例\r\n   * @return void\r\n   */\r\n  set(commandName: string, extender: CommandHandlerExtender) {\r\n    if (this.extendersMap.has(commandName)) {\r\n\r\n      // 如果commandName对应的扩展已经存在，则在扩展数组中追加\r\n      this.extendersMap.get(commandName).push(extender);\r\n    } else {\r\n\r\n      // 如果不存在，则创建新的扩展数组，并追加\r\n      this.extendersMap.set(commandName, [extender]);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 注册命令扩展\r\n   * @param extender CommandHandlerExtender实例\r\n   */\r\n  regist(extender: CommandHandlerExtender) {\r\n\r\n    // 通过元数据获取要扩展的Comamnd名称\r\n    const extenderMetadata: CommandHandlerExtenderMetadata =\r\n      MetadataUtil.getClassMetadataByName(extender.constructor, COMMAND_HANDLER_EXTENDER_META);\r\n    if (!extenderMetadata) {\r\n      throw new Error('CommandHandlerExtender必须指定要扩展的命令名称');\r\n    }\r\n    const commandName = extenderMetadata.commandName;\r\n\r\n    // 添加到Map中\r\n    this.set(commandName, extender);\r\n  }\r\n\r\n}\r\n\r\nexport { CommandHandlerExtenderRegistry };\r\n","/**\r\n * 命令处理器工厂相关定义\r\n * @author Witt<jiwt@inspur.com>\r\n */\r\n\r\nimport { ViewModelContext } from '../view-model/index';\r\nimport { CommandHandler } from './command_handler';\r\nimport { CommandHandlerRegistry } from './command_handler_registry';\r\nimport { CommandHandlerExtender } from './command_handler_extender';\r\nimport { CommandHandlerExtenderRegistry } from './command_handler_extender_registry';\r\n\r\n/**\r\n * 命令处理器工厂\r\n */\r\nclass CommandHandlerFactory {\r\n  /**\r\n   * 构造函数\r\n   * @param handlerRegistry  命令处理注册器\r\n   * @param extenderRegistry 命令处理扩展注册器\r\n   */\r\n  constructor(\r\n    private handlerRegistry: CommandHandlerRegistry,\r\n    private extenderRegistry: CommandHandlerExtenderRegistry,\r\n    private viewModelContext: ViewModelContext\r\n  ) {\r\n  }\r\n\r\n  /**\r\n   * 创建命令处理器\r\n   * @param   commandName 命令名称\r\n   * @returns 对应的命令处理器实例\r\n   */\r\n  public create(commandName: string): CommandHandler {\r\n    const rawHandler = this.handlerRegistry.get(commandName);\r\n    rawHandler.init(this.viewModelContext);\r\n    const extenders  = this.extenderRegistry.get(commandName);\r\n\r\n    // 遍历extenders，依次对handler进行扩展\r\n    return extenders.reduce((handler: CommandHandler, extender: CommandHandlerExtender) => {\r\n      return extender.extend(handler);\r\n    }, rawHandler);\r\n  }\r\n\r\n}\r\n\r\nexport { CommandHandlerFactory };\r\n","/**\r\n * CommandBus相关定义\r\n * @author Witt<jiwt@inspur.com>\r\n */\r\n\r\nimport { Observable, BehaviorSubject, Subject } from 'rxjs';\r\nimport { tap } from 'rxjs/operators';\r\nimport { Injector } from '../core/index';\r\nimport { Command } from './command';\r\nimport { CommandHandlerFactory } from './command_handler_factory';\r\nimport { CommandHandlerRegistry } from './command_handler_registry';\r\nimport { CommandHandlerExtenderRegistry } from './command_handler_extender_registry';\r\n\r\n\r\n/**\r\n * CommandBus用于派发Command，它接受一个Command实例，查找对应的CommandHandler，并执行。\r\n */\r\nclass CommandBus {\r\n\r\n  /**\r\n   * handler工厂\r\n   */\r\n  private handlerFactory: CommandHandlerFactory;\r\n\r\n  /**\r\n   * 正在执行的命令数量流（请勿使用，后果自负）\r\n   */\r\n  public executingCommandCount$: BehaviorSubject<number>;\r\n\r\n  /**\r\n   * 正在执行的命令数量\r\n   */\r\n  private executingCommands: Command[];\r\n\r\n  /**\r\n   * 构造函数\r\n   */\r\n  public constructor(handlerFactory: CommandHandlerFactory) {\r\n    this.handlerFactory = handlerFactory;\r\n    this.executingCommands = [];\r\n    this.executingCommandCount$ = new BehaviorSubject<number>(this.executingCommands.length);\r\n  }\r\n\r\n  /**\r\n   * 派发命令\r\n   * @param command 要派发的命令\r\n   */\r\n  public dispatch(command: Command): Observable<any> {\r\n    const commandResult$ = new Subject();\r\n    this.executeCommand(command).subscribe({\r\n        next: (lastTaskResult: any) => {\r\n          commandResult$.next(lastTaskResult);\r\n          commandResult$.complete();\r\n        },\r\n        complete: () => {\r\n          commandResult$.complete();\r\n          this.removeCommandFromExecutingQueue(command);\r\n        },\r\n        error: (error: any)  => {\r\n          commandResult$.error(error);\r\n          this.removeCommandFromExecutingQueue(command);\r\n        }\r\n      });\r\n    return commandResult$;\r\n  }\r\n\r\n  /**\r\n   * 执行命令并返回最后一个任务的执行结果流\r\n   */\r\n  private executeCommand(command: Command): Observable<any> {\r\n    this.addCommandToExecutingQueue(command);\r\n    const commandName = command.name;\r\n    const handler = this.handlerFactory.create(commandName);\r\n    const lastTaskResult$ = handler.execute(command);\r\n    return lastTaskResult$;\r\n  }\r\n\r\n\r\n  /**\r\n   * 添加到执行队列\r\n   */\r\n  private addCommandToExecutingQueue(command: Command) {\r\n    this.executingCommands.push(command);\r\n    this.executingCommandCount$.next(this.executingCommands.length);\r\n  }\r\n\r\n  /**\r\n   * 从执行队列中移除\r\n   */\r\n  private removeCommandFromExecutingQueue(command: Command) {\r\n    this.executingCommands = this.executingCommands.filter((executingCommand: Command) => {\r\n      return executingCommand !== command;\r\n    });\r\n    this.executingCommandCount$.next(this.executingCommands.length);\r\n  }\r\n\r\n}\r\n\r\nexport { CommandBus };\r\n","import { StaticProvider, Injector } from '../core/index';\r\nimport { ViewModelContext } from '../view-model/index';\r\nimport { CommandHandlerRegistry } from './command_handler_registry';\r\nimport { CommandHandlerExtenderRegistry } from './command_handler_extender_registry';\r\nimport { CommandHandlerFactory } from './command_handler_factory';\r\nimport { CommandBus } from './command_bus';\r\n\r\nconst VIEW_MODEL_COMMAND_PROVIDERS: StaticProvider[] = [\r\n  {\r\n    provide: CommandHandlerRegistry,\r\n    useClass: CommandHandlerRegistry,\r\n    deps: [ Injector ]\r\n  },\r\n  {\r\n    provide: CommandHandlerExtenderRegistry,\r\n    useClass: CommandHandlerExtenderRegistry,\r\n    deps: [ Injector ]\r\n  },\r\n  {\r\n    provide: CommandHandlerFactory,\r\n    useClass: CommandHandlerFactory,\r\n    deps: [ CommandHandlerRegistry, CommandHandlerExtenderRegistry, ViewModelContext ]\r\n  },\r\n  {\r\n    provide: CommandBus,\r\n    useClass: CommandBus,\r\n    deps: [ CommandHandlerFactory ]\r\n  }\r\n];\r\n\r\nexport { VIEW_MODEL_COMMAND_PROVIDERS };\r\n","/*\r\n * @Author: aalizzwell \r\n * @Date: 2019-05-30 11:08:18 \r\n * @Last Modified by: aalizzwell\r\n * @Last Modified time: 2019-06-01 17:10:04\r\n */\r\n\r\nimport { IExceptionHandler } from './types';\r\nexport const EXCEPTION_HANDLER = '@farris/devkit ExceptionHandler';","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n\nexport {AppEventBus as ɵb} from './lib/app/app_eventBus';\nexport {getClosureSafeProperty as ɵa} from './lib/core/di/utils';"],"names":["isEqual","BindingPropertyUtil","EntityLoadUtil","EntityFactory","EMPTY"],"mappings":"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"}