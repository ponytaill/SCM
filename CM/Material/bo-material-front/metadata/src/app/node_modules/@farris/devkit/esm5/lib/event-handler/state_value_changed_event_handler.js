import * as tslib_1 from "tslib";
import { Injectable } from "@angular/core";
import { EffectorManager } from "../effector/effector_manager";
import { Expression } from "../expression/index";
import { STATE_TEMPLATE } from "../resolver/index";
import { EventHandler } from "./event_handler";
var StateValueChangedEventHandler = /** @class */ (function (_super) {
    tslib_1.__extends(StateValueChangedEventHandler, _super);
    function StateValueChangedEventHandler() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * 获取相关表达式
     * @param event event
     */
    StateValueChangedEventHandler.prototype.filter = function (event) {
        var _this = this;
        if (this.expressionObjects && this.expressionObjects.length > 0) {
            return this.expressionObjects.filter(function (expressionObject) {
                var deps = expressionObject.deps;
                if (!deps || deps.length < 1 || event.ns !== expressionObject.ns) {
                    return false;
                }
                var changePaths = _this.cleanEventPath(event.path);
                changePaths.splice(0, 0, STATE_TEMPLATE);
                var eventPath = changePaths.join('/');
                if (deps.includes(eventPath)) {
                    return true;
                }
                else {
                    return false;
                }
            });
        }
        return null;
    };
    /**
     * 发布事件
     * @param event event
     */
    StateValueChangedEventHandler.prototype.dispatch = function (event) {
        var _this = this;
        var expressions = this.filter(event);
        if (expressions && expressions.length > 0) {
            expressions.forEach(function (expressionObject) {
                // const entityContext = this.buildEntityContext(event, expressionObject);
                var context = _this.buildContext(expressionObject, event);
                var result = _this.perform(expressionObject, context);
                if (result === undefined && !_this.isValidateOrRequiredExpression(expressionObject)) {
                    return;
                }
                expressionObject.result = _this.convertBooleanTypeExpressionResult(expressionObject, result);
                ;
                if (expressionObject.id) {
                    _this.expressionResult.set(expressionObject.id, expressionObject.result);
                }
                _this.effect(event, expressionObject);
            });
        }
    };
    /**
     * 副作用
     * @param event event
     * @param expressionObject expressionObject
     */
    StateValueChangedEventHandler.prototype.effect = function (event, expressionObject) {
        var _this = this;
        var effector = this.effectorFactory.getEffector(expressionObject);
        var bindingType = expressionObject.bindingType;
        if (!effector) {
            return;
        }
        if (bindingType === Expression.ExpressionBindingType.State) {
            // 如果表达式作用于uistate
            effector.effect(expressionObject.path, expressionObject.result, { message: expressionObject.message });
        }
        else if (bindingType === Expression.ExpressionBindingType.Field) {
            // 表达式作用于实体属性
            var expressionPathInfo = this.getPathInfo(expressionObject.path);
            var bindingPaths = expressionPathInfo.paths;
            var entities = this.repository.entityCollection.getAllEntities();
            if (!entities || entities.length < 1 || expressionObject.type === Expression.ExpressionType.Visible) {
                effector.effect(expressionObject.path, expressionObject.result, { message: expressionObject.message });
            }
            else {
                this.effectRows(entities, bindingPaths, expressionPathInfo.propertyNames, function (currentRows, paths) {
                    _this.output(event, expressionObject, currentRows, effector, [paths]);
                });
            }
        }
    };
    StateValueChangedEventHandler.prototype.output = function (event, expressionObject, currentRows, effector, paths) {
        var context = this.buildContext(expressionObject, event, null, currentRows);
        var value = this.perform(expressionObject, context);
        if (value === undefined) {
            return;
        }
        expressionObject.result = value;
        if (expressionObject.id) {
            this.expressionResult.set(expressionObject.id, expressionObject.result);
        }
        EffectorManager.effect(effector, expressionObject, paths);
    };
    StateValueChangedEventHandler.prototype.effectRows = function (entities, bindingPaths, propertyNames, callback, currentRows, prevPaths, paths) {
        var _this = this;
        if (currentRows === void 0) { currentRows = []; }
        if (prevPaths === void 0) { prevPaths = []; }
        if (paths === void 0) { paths = []; }
        if (!bindingPaths || bindingPaths.length < 1) {
            entities.forEach(function (entity) {
                if (!entity || !entity.primaryValue) {
                    return;
                }
                var currentPaths = paths.concat([entity.primaryValue]).concat(propertyNames);
                var currentCurrentRows = currentRows.concat([{ bindingPath: prevPaths.join('/') || '/', primaryValue: entity.primaryValue }]);
                callback(currentCurrentRows, currentPaths);
            });
            currentRows.length = 0;
            paths.length = 0;
        }
        else {
            var flag_1 = false;
            var nextPrevPaths_1 = prevPaths;
            entities.forEach(function (entity) {
                var prop = bindingPaths[0];
                var entityList = entity[prop];
                if (!entityList || entityList.count() < 1) {
                    // 下级表没有数据
                    return;
                }
                currentRows.push({ bindingPath: prevPaths.join('/') || '/', primaryValue: entity.primaryValue });
                paths.push(entity.primaryValue);
                paths.push(prop);
                if (flag_1 === false) {
                    flag_1 = true;
                    nextPrevPaths_1.push(prop);
                }
                var nextBindingPaths = bindingPaths.slice(1);
                _this.effectRows(entityList.items, nextBindingPaths, propertyNames, callback, currentRows, nextPrevPaths_1, paths);
            });
        }
    };
    /**
     * 获取子表事件行
     * @param paths
     * @param event
     * @returns
     */
    StateValueChangedEventHandler.prototype.getCurrentRowByEvent = function (paths, event) {
        return this.getCurrentRowByPaths(paths);
    };
    StateValueChangedEventHandler.decorators = [
        { type: Injectable }
    ];
    return StateValueChangedEventHandler;
}(EventHandler));
export { StateValueChangedEventHandler };
//# sourceMappingURL=data:application/json;base64,