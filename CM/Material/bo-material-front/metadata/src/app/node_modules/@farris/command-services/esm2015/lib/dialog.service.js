import { Injectable, ComponentFactoryResolver, ReflectiveInjector, InjectFlags, Injector, Optional } from '@angular/core';
import { BsModalService } from '@farris/ui-modal';
import { FarrisFormService } from './farris-form.service';
import { FrameContext } from '@farris/devkit';
import { of, Subject } from 'rxjs';
import { LanguageService } from './languag.service';
import { switchMap } from 'rxjs/operators';
/**
 * 弹窗服务
 * @scope FormModule
 */
class DialogService {
    constructor(modalService, farrisFormService, _componentFactoryResolver, frameContext, injector) {
        this.modalService = modalService;
        this.farrisFormService = farrisFormService;
        this._componentFactoryResolver = _componentFactoryResolver;
        this.frameContext = frameContext;
        this.injector = injector;
        this._providers = [];
        this.modals = {};
        this.setLanguageService();
    }
    /**
     * 设置语言服务
     */
    setLanguageService() {
        // FrameContext不一定存在，不能直接用
        const frameContext = this.getFrameContext();
        if (frameContext) {
            const injector = this.frameContext.injector;
            this.languageService = injector.get(LanguageService, null, InjectFlags.Optional);
        }
        if (!this.languageService) {
            this.languageService = LanguageService.getInstance();
        }
    }
    /**
     * 兼容旧弹窗，获取frameContext
     */
    getFrameContext() {
        if (this.frameContext) {
            return this.frameContext;
        }
        if (this['context'] && this['context']['frameContext']) {
            return this['context']['frameContext'];
        }
        return null;
    }
    /**
     * 兼容旧弹窗，获取ComponentFactoryResolver
     */
    getComponentFactoryResolver() {
        const frameContext = this.getFrameContext();
        let componentFactoryResolver;
        if (frameContext) {
            componentFactoryResolver = frameContext.injector.get(ComponentFactoryResolver);
        }
        return componentFactoryResolver;
    }
    /**
     * 获取config转换成对象类型的配置
     * @param config 配置项
     */
    getObjectTypeConfig(config) {
        let objectTypeConfig;
        if (typeof config === 'string') {
            if (config.length) {
                try {
                    objectTypeConfig = JSON.parse(config);
                }
                catch (_a) {
                    throw new Error(config + '不是合法的json字符串');
                }
            }
            else {
                objectTypeConfig = {};
            }
        }
        else if (typeof config === 'object') {
            objectTypeConfig = Object.assign({}, config);
        }
        else {
            throw new Error('填写对象格式或json字符串');
        }
        return objectTypeConfig;
    }
    /**
     * 创建模态框内组件实例，并返回模态框实例；做了兼容老表单处理
     * @param config 弹窗配置
     * @param compnent 弹窗内组件
     * @param uiStateObject 绑定弹窗内组件uiState
     */
    createModalComponentRef(config, component, uiStateObject) {
        let componentRef;
        let modalRef;
        const frameContext = this.getFrameContext();
        const componentFactoryResolver = this.getComponentFactoryResolver();
        if (frameContext && componentFactoryResolver) {
            const contentCmptFactory = componentFactoryResolver.resolveComponentFactory(component);
            const modalContentInjector = ReflectiveInjector.resolveAndCreate([...this._providers], frameContext.injector);
            componentRef = contentCmptFactory.create(modalContentInjector);
            if (componentRef && componentRef.instance && componentRef.instance.viewModel && componentRef.instance.viewModel.uiState) {
                if (typeof uiStateObject === 'object' && Object.keys(uiStateObject).length) {
                    Object.keys(uiStateObject).forEach(item => {
                        componentRef.instance.viewModel.uiState.setPropertyValue(item, uiStateObject[item]);
                    });
                }
                // 附加isDialog参数
                componentRef.instance.viewModel.uiState.setPropertyValue('DEVKIT_DIALOG', true);
            }
            modalRef = this.modalService.show(componentRef, config);
        }
        else {
            modalRef = this.modalService.show(component, config);
        }
        return modalRef;
    }
    /**
     *
     * @param config 模态框本身配置
     * @param modalId 模态框内组件的id
     * @param uiStateConfig 模态框内组件uiState上的字段及值
     */
    openModal(config = {}, modalId, uiStateConfig = {}, callback) {
        const configObj = this.getObjectTypeConfig(config);
        const uiStateObject = this.getObjectTypeConfig(uiStateConfig);
        let innerCompopnent = this.farrisFormService.getControls(modalId);
        let modalRef;
        let modalConfig = {
            title: this.languageService.defaultDialogTitle,
            width: 760,
            height: 450,
            showButtons: false
        };
        modalConfig = Object.assign(modalConfig, configObj);
        const onClosingHandler = modalConfig.beforeClose;
        // tslint:disable: no-string-literal
        const cancelChanges = modalConfig['cancelChanges'] || false;
        modalConfig.beforeClose = (ref) => {
            // if (ref && ref.modalRef && ref.modalRef.content) {
            //   ref.modalRef.content.isDialogRootComponent = false;
            // }
            if (!!onClosingHandler && typeof onClosingHandler === 'function') {
                return onClosingHandler(ref).pipe(switchMap(result => {
                    if (result) {
                        if (cancelChanges) {
                            return this.cancelChanges(ref);
                        }
                    }
                    return of(result);
                }));
            }
            if (cancelChanges) {
                return this.cancelChanges(ref);
            }
            else {
                return of(true);
            }
        };
        const remote = modalConfig.remote || false;
        if (remote) {
            this.createRemoteForm(modalConfig, uiStateObject).subscribe((modalRef) => {
                this.modalRef = modalRef;
                if (modalRef && !!modalRef.content) {
                    modalRef.content.isDialogRootComponent = true;
                    modalRef.content.dialogRef = modalRef;
                }
                callback(modalRef);
            });
        }
        else {
            if (!innerCompopnent) {
                console.error(`获取控件失败，modalId=${modalId}`);
                return;
            }
            if (typeof innerCompopnent === 'string') {
                modalConfig.dialogType = 'iframe';
                modalRef = this.modalService.show(innerCompopnent, modalConfig);
            }
            else if (typeof innerCompopnent === 'function') {
                modalRef = this.createModalComponentRef(modalConfig, innerCompopnent, uiStateObject);
            }
            else if (typeof innerCompopnent === 'object') {
                // 如果是对象 且使用独立js加载
                // {"useIsolateJs":true,"modalInstance":f()}
                if (innerCompopnent.useIsolateJs) {
                    const parameter = {
                        injector: this.injector,
                        uiState: uiStateObject,
                        modalService: this.modalService,
                        dialogServiceInstance: this,
                        eventBus: this.frameContext.getVirtualRootFrameContext().eventBus,
                        componentCallback: this.componentModify,
                        modalInstanceCallback: this.modalInstanceCallback
                    };
                    // 会在内部进行
                    return innerCompopnent["modalInstance"](modalConfig, parameter);
                }
                else {
                    modalRef = this.modalService.show(innerCompopnent, modalConfig);
                }
            }
            this.modalRef = modalRef;
            if (modalRef && !!modalRef.content) {
                modalRef.content.isDialogRootComponent = true;
                modalRef.content.dialogRef = modalRef;
            }
            return modalRef;
        }
    }
    componentModify(cmpRef, parameter) {
        if (cmpRef && cmpRef.instance && cmpRef.instance.viewModel && cmpRef.instance.viewModel.uiState) {
            if (parameter.uistate && typeof parameter.uistate === "string") {
                parameter.uistate = JSON.parse(parameter.uistate);
            }
            if (typeof parameter.uistate === 'object' && Object.keys(parameter.uistate).length) {
                Object.keys(parameter.uistate).forEach(item => {
                    cmpRef.instance.viewModel.uiState.setPropertyValue(item, parameter.uistate[item]);
                });
            }
            // 附加isDialog参数
            cmpRef.instance.viewModel.uiState.setPropertyValue('DEVKIT_DIALOG', true);
        }
    }
    modalInstanceCallback(cmpRef, options, parameter) {
        if (parameter && parameter.modalService) {
            const modalRef = parameter.modalService.show(cmpRef, options);
            if (modalRef && !!modalRef.content) {
                modalRef.content.isDialogRootComponent = true;
                modalRef.content.dialogRef = modalRef;
            }
            return modalRef;
        }
    }
    /**
     * 打开类帮助表单
     * @param frameId
     * @param params
     * @param configs
     * @description 弹出表单和弹出远端表单区别为弹出表单需要配置字段映射
     */
    openHelpModal(frameId, params, configs) {
        const events = this['context']['eventParam'] || {};
        // 卡片场景传递过来的事件是自定义对象，包含event和options。列表场景传递过来的事件参数是普通事件参数，在参数中携带了editor.options
        const event = events.event || events;
        const options = events.options || events.editor && events.editor.options || {};
        const context = events && events.context;
        const subject = new Subject();
        // modalId在两种场景下都需要，用来区分实例
        const { modalId = null } = options;
        if (!configs) {
            configs = '{}';
        }
        if (typeof configs === 'string' && configs.length > 0) {
            configs = JSON.parse(configs);
        }
        const { remote = false, currentRow = false, areaResponse = undefined } = configs || {};
        // 支持areaResponse配置
        if (areaResponse !== undefined && options.areaResponse === undefined) {
            options.areaResponse = areaResponse;
        }
        if (remote) {
            const mapFields = configs.mapFields || {};
            options.remote = remote + '?v=' + new Date().valueOf();
            this.openModal(options, modalId, params, (dialogRef) => {
                // 新增event参数（为了以后调用event中的formControl以适配列表中的智能输入框弹出表单）
                this.modals[modalId] = { subject, frameId: frameId, mapFields, dialogRef, currentRow, event: event, context };
            });
        }
        else {
            const dialogRef = this.openModal(options, modalId, params);
            const mapFields = options.mapFields || {};
            this.modals[modalId] = { subject, frameId: frameId, mapFields, dialogRef, currentRow, event: event, context };
        }
        return subject;
    }
    /**
     * 打开带回调的弹窗
     * @param frameId frameId
     * @param params 参数
     * @param configs 配置
     * @returns
     */
    openCallbackableModal(frameId, params, configs) {
        if (!configs) {
            configs = '{}';
        }
        if (typeof configs === 'string') {
            configs = JSON.parse(configs);
        }
        const events = this['context'] && this['context']['eventParam'] || {};
        const options = events.options;
        options.showButtons = true;
        options.buttons = [
            {
                text: this.languageService.confirm, cls: 'btn btn-primary', handle: (event) => {
                    const { modalId = null } = options || {};
                    if (modalId) {
                        const modal = this.modals[modalId];
                        const { subject = null, dialogRef = null, frameId = null, handle = null, currentRow = false } = modal || {};
                        const formCmp = dialogRef.content; // 弹窗表单实例
                        if (!formCmp) {
                            throw new Error('不支持的表单类型');
                        }
                        let selectedItems = [];
                        if (currentRow === true) {
                            let frameComtext;
                            if (formCmp.context) {
                                frameComtext = formCmp.context.appContext.frameContextManager.getFrameContextById(frameId);
                            }
                            else {
                                frameComtext = formCmp.appContext.frameContextManager.getFrameContextById(frameId);
                            }
                            if (!frameComtext) {
                                throw new Error(`无效的frameId：${frameId}，请确认命令中frameId正确。`);
                            }
                            const bindingList = frameComtext.bindingData.getList();
                            const item = bindingList && bindingList.currentItem && bindingList.currentItem.toJSON();
                            selectedItems = [item];
                        }
                        else {
                            let rows;
                            // 如果context为空 那么尝试从对应的appcontext读取，主要目的是为了解析表单的弹出
                            if (formCmp.context) {
                                rows = formCmp.context.appContext.frameContextManager.getFrameContextById(frameId).uiState.rows || new Map();
                            }
                            else {
                                rows = formCmp.appContext.frameContextManager.getFrameContextById(frameId).uiState.rows || new Map();
                            }
                            selectedItems = Array.from(rows.values());
                        }
                        if (typeof handle === 'function') {
                            handle(selectedItems);
                        }
                        if (subject) {
                            subject.next();
                        }
                        dialogRef.close(options);
                    }
                }
            },
            { text: this.languageService.cancel, cls: 'btn', handle: (event) => this.cancel(options) }
        ];
        const subject = new Subject();
        const { modalId = null } = options;
        const { remote = null, currentRow = false, areaResponse = undefined } = configs;
        const handle = options.handle;
        // 支持areaResponse配置
        if (areaResponse !== undefined && options.areaResponse === undefined) {
            options.areaResponse = areaResponse;
        }
        if (remote) {
            options.remote = remote + '?v=' + new Date().valueOf();
            this.openModal(options, modalId, params, (dialogRef) => {
                this.modals[modalId] = { subject, frameId: frameId, dialogRef, handle, currentRow, event: events.event };
            });
        }
        else {
            const dialogRef = this.openModal(options, modalId, params);
            this.modals[modalId] = { subject, frameId: frameId, dialogRef, handle, currentRow, event: events.event };
        }
        return subject;
    }
    /**
     * 确认按钮事件
     * @param args
     */
    confirm() {
        const events = this['context'] && this['context']['eventParam'] || {};
        const { modalId = null } = events || {};
        if (modalId) {
            const modal = this.modals[modalId];
            const { subject = null, dialogRef = null, mapFields = {}, frameId = null, currentRow = false, event = null, context = null } = modal || {};
            const formCmp = dialogRef.content; // 弹窗表单实例
            if (!formCmp) {
                throw new Error('不支持的表单类型');
            }
            // const selectedIds = formCmp.context.appContext.frameContextManager.getFrameContextById(frameId).uiState.ids;
            let selectedItems = [];
            if (currentRow === true) {
                const frameComtext = formCmp.context.appContext.frameContextManager.getFrameContextById(frameId);
                if (!frameComtext) {
                    throw new Error(`无效的frameId：${frameId}，请确认命令中frameId正确。`);
                }
                const bindingList = frameComtext.bindingData.getList();
                const item = bindingList && bindingList.currentItem && bindingList.currentItem.toJSON();
                if (item && Object.keys(item).length > 0) {
                    selectedItems = [item];
                }
            }
            else {
                const rows = formCmp.context.appContext.frameContextManager.getFrameContextById(frameId).uiState.rows || new Map();
                selectedItems = Array.from(rows.values());
            }
            // 映射字段数据
            // 获取触发弹框的编辑器的字段名称
            let editorField = undefined;
            if (event && event.editor && event.editor.column) {
                editorField = event.editor.column.field;
            }
            if (selectedItems && mapFields) {
                Object.keys(mapFields).forEach(k => {
                    const targetField = mapFields[k];
                    const sourceKeyArray = k.split('.').filter(p => p) || [];
                    const targetValue = selectedItems.map(r => {
                        return sourceKeyArray.reduce((target, key) => {
                            if (target && (target.hasOwnProperty(key) || target['__proto__'].hasOwnProperty(key))) {
                                return target[key];
                            }
                            else {
                                return '';
                            }
                        }, r);
                    }).join(',');
                    if (targetField) {
                        const bindingPaths = this.frameContext.viewModel.bindingPath.split('/').filter(p => p);
                        const targetFields = targetField.split(',').filter(p => p);
                        targetFields.forEach(target => {
                            if (context) {
                                this.setValueByPath(context, target, targetValue);
                            }
                            else {
                                const targetPath = target.split('.');
                                this.frameContext.bindingData.setValue(bindingPaths.concat(targetPath), targetValue, true, true);
                            }
                        });
                    }
                });
            }
            if (subject) {
                subject.next();
            }
            dialogRef.close();
        }
    }
    /**
     * 取消按钮事件
     * @param args
     */
    cancel(event) {
        const events = event || this['context'] && this['context']['eventParam'] || {};
        const { modalId = null } = events || {};
        if (modalId) {
            const modal = this.modals[modalId];
            const { subject = null, dialogRef = null } = modal || {};
            if (subject) {
                subject.next();
            }
            if (dialogRef) {
                dialogRef.close();
            }
        }
    }
    /**
     * 取消服务器变更集
     */
    cancelChanges(ref) {
        if (ref && ref.modalRef && ref.modalRef.content) {
            const component = ref.modalRef.content;
            if (component && component.context) {
                const repository = component.context.repository || null;
                if (repository) {
                    return repository.cancelChanges().pipe(switchMap(() => of(true)));
                }
            }
        }
        return of(true);
    }
    /**
     * 关闭该弹窗
     */
    closeModal() {
        if (this.modalRef) {
            this.modalRef.close();
        }
    }
    /**
     * 创建远程表单实例
     * @param options dialog配置
     * @param uiState uistate
     */
    createRemoteForm(options, uiState) {
        const remote = options.remote || false;
        const subject = new Subject();
        if (remote) {
            let moduleName = options.moduleName || null;
            System.import(remote).then((module) => {
                if (!moduleName) {
                    moduleName = Object.keys(module).pop();
                }
                const moduleFactory = module[moduleName];
                const moduleRef = moduleFactory.create(this.injector);
                const entryComponent = moduleRef['_bootstrapComponents'][0];
                if (entryComponent) {
                    const compFactory = moduleRef.componentFactoryResolver.resolveComponentFactory(entryComponent);
                    const componentRef = compFactory.create(this.injector);
                    if (componentRef && componentRef.instance && componentRef.instance.viewModel && componentRef.instance.viewModel.uiState) {
                        if (typeof uiState === 'object' && Object.keys(uiState).length) {
                            Object.keys(uiState).forEach(item => {
                                componentRef.instance.viewModel.uiState.setPropertyValue(item, uiState[item]);
                            });
                        }
                        // 附加isDialog参数
                        componentRef.instance.viewModel.uiState.setPropertyValue('DEVKIT_DIALOG', true);
                    }
                    const modalRef = this.modalService.show(componentRef, options);
                    subject.next(modalRef);
                }
                else {
                    throw new Error(`无法找到入口表单！`);
                }
            });
        }
        return subject;
    }
    setValueByPath(target, path, value) {
        if (target) {
            const paths = path.split('.');
            if (paths.length <= 1) {
                target[path] = value;
            }
            else {
                paths.slice(0, -1).reduce((prev, path) => {
                    if (!(prev.hasOwnProperty(path) || prev['__proto__'].hasOwnProperty(path))) {
                        prev[path] = {};
                    }
                    return prev[path];
                }, target)[paths[paths.length - 1]] = value;
            }
        }
    }
}
DialogService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
DialogService.ctorParameters = () => [
    { type: BsModalService },
    { type: FarrisFormService },
    { type: ComponentFactoryResolver },
    { type: FrameContext },
    { type: Injector, decorators: [{ type: Optional }] }
];
export { DialogService };
//# sourceMappingURL=data:application/json;base64,