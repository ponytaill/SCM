/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { IdService } from '@farris/ui-common';
import { Subject } from 'rxjs';
export class PersonalConfigService {
    /**
     * @param {?} idService
     */
    constructor(idService) {
        this.idService = idService;
        this.selectItemObser$ = new Subject();
        this.displayType = 'LIST';
        this.singleSelect = true;
        // 个性化配置KEY
        this._key = '';
        this._newKey = '';
        // 组件ID
        this.controlID = '';
    }
    /**
     * @return {?}
     */
    get personalConfigKey() {
        return this._key;
    }
    /**
     * @param {?} val
     * @return {?}
     */
    set personalConfigKey(val) {
        if (val) {
            this._key = this.buildKey(val);
            if (this.controlID) {
                this._newKey = this.buildKey(this.controlID + '_' + val);
            }
            else {
                this._newKey = this._key;
            }
        }
        else {
            this._newKey = this.buildKey(this.controlID);
        }
    }
    /**
     * @private
     * @param {?} str
     * @return {?}
     */
    buildKey(str) {
        /** @type {?} */
        let prefix = '';
        if (location.hash) {
            /** @type {?} */
            const pathArr = location.hash.split('?');
            prefix = pathArr ? pathArr[0] : '';
        }
        else {
            /** @type {?} */
            const pathArr = location.pathname.split('/');
            prefix = pathArr ? pathArr[pathArr.length - 1] : '';
        }
        return this.idService.encrypt(prefix + str);
    }
    /**
     * @param {?} obj
     * @return {?}
     */
    initPersonalConf(obj) {
        Object.assign(this, obj);
    }
    /**
     * @param {?=} key
     * @return {?}
     */
    getPersonalData(key) {
        if (key) {
            this._key = key;
        }
        if (this.personalConfigKey) {
            /** @type {?} */
            const conf = localStorage.getItem(this.personalConfigKey);
            if (conf && conf !== 'undefined' && conf !== 'null') {
                this.personalConf = conf ? JSON.parse(conf) : {};
                this._updatePersonalConfig(this.personalConf);
                if (this.controlID) {
                    if (this._key !== this._newKey) {
                        localStorage.removeItem(this._key);
                    }
                    this.savePersonalConfig(this.personalConf);
                }
                return this.personalConf;
            }
            else {
                return null;
            }
        }
        return null;
    }
    /**
     * @param {?=} localeId
     * @return {?}
     */
    getQuickSelected(localeId) {
        /** @type {?} */
        const d = this.getPersonalData();
        /** @type {?} */
        const qs = d ? d.quickSelected : null;
        if (localeId) {
            if (qs) {
                /** @type {?} */
                const items = qs[localeId];
                if (items && items.length) {
                    return items;
                }
            }
            return null;
        }
        return qs;
    }
    /**
     * @return {?}
     */
    getDialogSize() {
        /** @type {?} */
        const d = this.getPersonalData();
        return d ? d.size : null;
    }
    /**
     * @param {?} cfg
     * @return {?}
     */
    updatePersonalConfig(cfg) {
        /** @type {?} */
        const data = Object.assign(this.personalConf || {}, cfg);
        this.savePersonalConfig(data);
    }
    /**
     * @param {?} data
     * @return {?}
     */
    savePersonalConfig(data) {
        if (this._newKey) {
            localStorage.setItem(this._newKey, JSON.stringify(data));
            this.personalConf = data;
            return true;
        }
        return false;
    }
    /**
     * @param {?=} tabName
     * @return {?}
     */
    getActiveTabIndex(tabName) {
        /** @type {?} */
        const d = this.getPersonalData();
        if (!tabName) {
            return d && d.tabIndex ? d.tabIndex : 'datalist';
        }
        return tabName;
    }
    /**
     * @param {?} selectedRow
     * @param {?} localeId
     * @return {?}
     */
    updateQueckSelected(selectedRow, localeId) {
        /** @type {?} */
        const quickItems = this.getQuickSelected(localeId);
        if (quickItems && quickItems.length) {
            /** @type {?} */
            const selectedIndex = [];
            quickItems.forEach((/**
             * @param {?} element
             * @param {?} index
             * @return {?}
             */
            (element, index) => {
                if (this.singleSelect) {
                    if (element && selectedRow && element[this.idField] === selectedRow[this.idField]) {
                        selectedIndex.push(index);
                    }
                }
                else {
                    if (selectedRow) {
                        selectedRow.forEach((/**
                         * @param {?} item
                         * @return {?}
                         */
                        item => {
                            if (element && element[this.idField] === item[this.idField]) {
                                selectedIndex.push(index);
                            }
                        }));
                    }
                }
            }));
            selectedIndex.forEach((/**
             * @param {?} index
             * @return {?}
             */
            index => {
                quickItems[index] = null;
            }));
            this.personalConf.quickSelected[localeId] =
                this.personalConf.quickSelected[localeId].filter((/**
                 * @param {?} v
                 * @return {?}
                 */
                v => v !== null));
            if (this.singleSelect) {
                this.personalConf.quickSelected[localeId].unshift(selectedRow);
            }
            else {
                if (selectedRow) {
                    selectedRow.forEach((/**
                     * @param {?} element
                     * @return {?}
                     */
                    element => {
                        this.personalConf.quickSelected[localeId].unshift(element);
                    }));
                }
            }
            this.personalConf.quickSelected[localeId].length =
                this.personalConf.quickSelected[localeId].length > 5 ?
                    5 : this.personalConf.quickSelected[localeId].length;
        }
        else {
            /** @type {?} */
            const _qs = this.personalConf.quickSelected || {};
            /** @type {?} */
            let newData;
            if (this.singleSelect) {
                newData = Object.assign(_qs, { [localeId]: [selectedRow] });
            }
            else {
                selectedRow.length = selectedRow.length > 5 ? 5 : selectedRow.length;
                newData = Object.assign(_qs, { [localeId]: selectedRow });
            }
            this.personalConf.quickSelected = newData;
        }
        this.savePersonalConfig(this.personalConf);
    }
    /**
     *  更新数据结构，现有个性化数据均转为 中文环境下数据；
     * @param {?} per
     * @return {?}
     */
    _updatePersonalConfig(per) {
        if (per) {
            /** @type {?} */
            let flag = false;
            // 更新收藏数据
            if (per.favorite && Array.isArray(per.favorite)) {
                per.favorite = { 'zh-CHS': [...per.favorite] };
                delete per.favorite;
                flag = true;
            }
            // 更新快捷录入数据
            if (per.selected) {
                if (Array.isArray(per.selected)) {
                    per.quickSelected = { 'zh-CHS': [...per.selected] };
                }
                delete per.selected;
                flag = true;
            }
            if (flag) {
                this.savePersonalConfig(per);
            }
        }
    }
}
PersonalConfigService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
PersonalConfigService.ctorParameters = () => [
    { type: IdService }
];
if (false) {
    /** @type {?} */
    PersonalConfigService.prototype.personalConf;
    /** @type {?} */
    PersonalConfigService.prototype.selectItemObser$;
    /** @type {?} */
    PersonalConfigService.prototype.displayType;
    /** @type {?} */
    PersonalConfigService.prototype.singleSelect;
    /** @type {?} */
    PersonalConfigService.prototype.idField;
    /** @type {?} */
    PersonalConfigService.prototype.textField;
    /** @type {?} */
    PersonalConfigService.prototype.mapFields;
    /**
     * @type {?}
     * @private
     */
    PersonalConfigService.prototype._key;
    /** @type {?} */
    PersonalConfigService.prototype._newKey;
    /** @type {?} */
    PersonalConfigService.prototype.controlID;
    /**
     * @type {?}
     * @private
     */
    PersonalConfigService.prototype.idService;
}
//# sourceMappingURL=data:application/json;base64,