import { FieldMetadataUtil } from '../entity/index';
import { BindingPropertyType } from './binding_property';
/**
 * 属性工具类
 */
var PropertyUtil = /** @class */ (function () {
    function PropertyUtil() {
    }
    /**
     * 获取实体上的属性集合，并将他们转换成BindingProperty集合
     * @param  entityType 实体类型
     * @returns 绑定属性集合
     */
    PropertyUtil.getProperties = function (entityType) {
        var properties = [];
        // Plain
        var ngFieldProperties = FieldMetadataUtil.getNgFields(entityType);
        Object.keys(ngFieldProperties).forEach(function (propertyName) {
            var ngFieldProperty = ngFieldProperties[propertyName];
            properties.push({
                name: propertyName,
                type: BindingPropertyType.Plain,
                isPrimaryKey: ngFieldProperty.primary,
                isForeignKey: ngFieldProperty.foreign,
                enableMultiLangInput: ngFieldProperty.enableMultiLangInput
            });
        });
        // Object
        var ngObjectProperties = FieldMetadataUtil.getNgObjects(entityType);
        Object.keys(ngObjectProperties).forEach(function (propertyName) {
            var ngObjectProperty = ngObjectProperties[propertyName];
            properties.push({
                name: propertyName,
                type: BindingPropertyType.Object,
                entityType: ngObjectProperty.type
            });
        });
        // List
        var ngListProperties = FieldMetadataUtil.getNgList(entityType);
        Object.keys(ngListProperties).forEach(function (propertyName) {
            var ngListProperty = ngListProperties[propertyName];
            properties.push({
                name: propertyName,
                type: BindingPropertyType.List,
                entityType: ngListProperty.type
            });
        });
        // Dynamics
        var ngDynamicProperties = FieldMetadataUtil.getNgDynamic(entityType);
        Object.keys(ngDynamicProperties).forEach(function (propertyName) {
            var ngDynamicProperty = ngDynamicProperties[propertyName];
            properties.push({
                name: propertyName,
                type: BindingPropertyType.Dynamic,
                entityType: ngDynamicProperty.type
            });
        });
        return properties;
    };
    PropertyUtil.getDynamicProperties = function (dynamicData) {
        var properties = [];
        Object.keys(dynamicData).forEach(function (propertyName) {
            if (dynamicData.hasOwnProperty(propertyName)) {
                if (dynamicData[propertyName] instanceof Object) {
                    properties.push({
                        name: propertyName,
                        type: BindingPropertyType.Dynamic,
                        entityType: null
                    });
                }
                else {
                    properties.push({
                        name: propertyName,
                        type: BindingPropertyType.Plain,
                        isPrimaryKey: false,
                        isForeignKey: false
                    });
                }
            }
        });
        return properties;
    };
    /**
     * 根据属性名获取属性
     */
    PropertyUtil.getPropertyByName = function (properties, propertyName) {
        var targetProperty = properties.find(function (property) {
            return property.name === propertyName;
        });
        return targetProperty;
    };
    /**
     * 获取实体主键名
     * @param properties 属性集合
     * @returns 主键名
     */
    PropertyUtil.getPrimaryKey = function (properties) {
        // 实体必须有主键，如果没有主键在构造实体的时候就已经报错，这里不需要再进行检查
        var primaryProperty = properties.find(function (property) {
            return property.isPrimaryKey === true;
        });
        return primaryProperty ? primaryProperty.name : '';
    };
    return PropertyUtil;
}());
export { PropertyUtil };
//# sourceMappingURL=data:application/json;base64,