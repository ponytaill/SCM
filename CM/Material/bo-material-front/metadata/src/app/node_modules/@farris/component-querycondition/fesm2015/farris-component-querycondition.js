import { cloneDeep } from 'lodash-es';
import { BsModalService } from '@farris/ui-modal';
import { NotifyService, NotifyModule } from '@farris/ui-notify';
import { CommonModule } from '@angular/common';
import { FarrisDialogModule } from '@farris/ui-dialog';
import { LayoutModule } from '@farris/ui-layout';
import { LookupModule } from '@farris/ui-lookup';
import { MultiSelectModule } from '@farris/ui-multi-select';
import { FieldGroupModule } from '@farris/ui-field-group';
import { InputGroupModule } from '@farris/ui-input-group';
import { FDropdownDirectiveTypeModule } from '@farris/ui-dropdown';
import { LoadingModule } from '@farris/ui-loading';
import { LocaleService, LocaleModule } from '@farris/ui-locale';
import { ComboListModule } from '@farris/ui-combo-list';
import { NumberSpinnerModule } from '@farris/ui-number-spinner';
import { FarrisFormsModule } from '@farris/ui-forms';
import { ShowType, FarrisDatePickerModule } from '@farris/ui-datepicker';
import { BehaviorSubject, Subject, of } from 'rxjs';
import { takeUntil } from 'rxjs/operators';
import { ComboLookupModule } from '@farris/ui-combo-lookup';
import { NgControl, FormsModule, ReactiveFormsModule } from '@angular/forms';
import { Injectable, EventEmitter, Component, Output, ViewChild, ViewEncapsulation, Input, ComponentFactoryResolver, Injector, LOCALE_ID, NgZone, HostBinding, Directive, Optional, Self, ElementRef, NgModule } from '@angular/core';

/**
 * @fileoverview added by tsickle
 * Generated from: lib/service/communicationservice.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * 为了兼容旧代码，
 * 保留一个空的service
 */
class CommunicationService {
    constructor() {
        this.eventbus = new EventEmitter();
    }
}
CommunicationService.decorators = [
    { type: Injectable }
];

/**
 * @fileoverview added by tsickle
 * Generated from: lib/service/convertorservice.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * 为了兼容旧代码，
 * 保留一个空的service
 */
class ConvertorService {
    constructor() { }
}
ConvertorService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
ConvertorService.ctorParameters = () => [];

/**
 * @fileoverview added by tsickle
 * Generated from: lib/entity/controltype.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @enum {number} */
const ControlType = {
    Text: 0,
    SingleDate: 1,
    SmartHelp: 2,
    DropDownList: 3,
    DateRange: 4,
    NumberRange: 5,
    SingleNumber: 6,
    SingleYear: 7,
    BoolCheck: 8,
    DateTimeRange: 9,
    SingleMonth: 10,
    MonthRange: 11,
    SingleDateTime: 12,
    ComboLookUp: 13,
    Radio: 14,
    InputGroup: 15,
};
ControlType[ControlType.Text] = 'Text';
ControlType[ControlType.SingleDate] = 'SingleDate';
ControlType[ControlType.SmartHelp] = 'SmartHelp';
ControlType[ControlType.DropDownList] = 'DropDownList';
ControlType[ControlType.DateRange] = 'DateRange';
ControlType[ControlType.NumberRange] = 'NumberRange';
ControlType[ControlType.SingleNumber] = 'SingleNumber';
ControlType[ControlType.SingleYear] = 'SingleYear';
ControlType[ControlType.BoolCheck] = 'BoolCheck';
ControlType[ControlType.DateTimeRange] = 'DateTimeRange';
ControlType[ControlType.SingleMonth] = 'SingleMonth';
ControlType[ControlType.MonthRange] = 'MonthRange';
ControlType[ControlType.SingleDateTime] = 'SingleDateTime';
ControlType[ControlType.ComboLookUp] = 'ComboLookUp';
ControlType[ControlType.Radio] = 'Radio';
ControlType[ControlType.InputGroup] = 'InputGroup';

/**
 * @fileoverview added by tsickle
 * Generated from: lib/entity/controltype/dropdownlist/enumtype.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @enum {number} */
const EnumType = {
    IntType: 0,
    StringType: 1,
    BoolType: 2,
};
EnumType[EnumType.IntType] = 'IntType';
EnumType[EnumType.StringType] = 'StringType';
EnumType[EnumType.BoolType] = 'BoolType';

/**
 * @fileoverview added by tsickle
 * Generated from: lib/entity/controltype/dropdownlist/integerenumvalue.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * 下拉列表Integer类型
 */
class EnumIntegerValue {
    /**
     * @return {?}
     */
    getEnumType() {
        return EnumType.IntType;
    }
    /**
     * @return {?}
     */
    getEnumValueName() {
        return this.name;
    }
    /**
     * @return {?}
     */
    getEnumValue() {
        return this.value;
    }
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/entity/controltype/dropdownlist/stringenumvalue.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * 下拉列表String类型
 */
class EnumStringValue {
    /**
     * @return {?}
     */
    getEnumType() {
        return EnumType.StringType;
    }
    /**
     * @return {?}
     */
    getEnumValueName() {
        return this.name;
    }
    /**
     * @return {?}
     */
    getEnumValue() {
        return this.value;
    }
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/entity/controltype/dropdownlist/boolenumvalue.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * 下拉列表Bool类型
 */
class EnumBoolValue {
    /**
     * @return {?}
     */
    getEnumType() {
        return EnumType.BoolType;
    }
    /**
     * @return {?}
     */
    getEnumValueName() {
        return this.name;
    }
    /**
     * @return {?}
     */
    getEnumValue() {
        return this.value;
    }
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/entity/controltype/dropdownlist/ienumvalue.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class EnumValueConvert {
    /**
     * @param {?} obj
     * @return {?}
     */
    convertJObject(obj) {
        /** @type {?} */
        let enumValue = (/** @type {?} */ (obj));
        /** @type {?} */
        let enumType = enumValue.getEnumType();
        /** @type {?} */
        let jobj = new Object();
        jobj["Type"] = enumType;
        jobj["Content"] = enumValue;
        return jobj;
    }
    /**
     * @param {?} jobj
     * @return {?}
     */
    initFromJobject(jobj) {
        /** @type {?} */
        let enumType = (/** @type {?} */ (jobj["Type"]));
        /** @type {?} */
        let content = (/** @type {?} */ (jobj["Content"]));
        if (enumType == EnumType.IntType) {
            return Object.assign(new EnumIntegerValue(), content);
        }
        else if (enumType == EnumType.BoolType) {
            return Object.assign(new EnumBoolValue(), content);
        }
        else {
            return Object.assign(new EnumStringValue(), content);
        }
    }
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/entity/controltype/dropdownlist/dropdownlistcontrol.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * 下拉列表控件
 */
class DropDownListControl {
    /**
     * 获取控件类型
     * @return {?}
     */
    getControlType() {
        return ControlType.DropDownList;
    }
    /**
     * @return {?}
     */
    isRequired() {
        return !!this.require;
    }
}
/**
 * 下拉列表控件序列化与反序列化器
 */
class DropDownListControlConvert {
    /**
     * 序列化
     * @param {?} obj 下拉列表控件实体
     * @return {?}
     */
    convertToObject(obj) {
        /** @type {?} */
        let dropDownListControl = (/** @type {?} */ (obj));
        /** @type {?} */
        let jobj = new Object();
        jobj["valueType"] = dropDownListControl.valueType;
        if (dropDownListControl.enumValues != null) {
            /** @type {?} */
            let jarray = jobj["enumValues"] = [];
            /** @type {?} */
            let convertor = new EnumValueConvert();
            dropDownListControl.enumValues.forEach((/**
             * @param {?} element
             * @return {?}
             */
            element => {
                if (dropDownListControl.valueType == EnumType.BoolType) {
                    jarray.push(convertor.convertJObject(Object.assign(new EnumBoolValue(), element)));
                }
                else if (dropDownListControl.valueType == EnumType.IntType) {
                    jarray.push(convertor.convertJObject(Object.assign(new EnumIntegerValue(), element)));
                }
                else {
                    jarray.push(convertor.convertJObject(Object.assign(new EnumStringValue(), element)));
                }
            }));
        }
        jobj["uri"] = dropDownListControl.uri;
        jobj["beforeShow"] = dropDownListControl.beforeShow;
        jobj["beforeHide"] = dropDownListControl.beforeHide;
        jobj["idField"] = dropDownListControl.idField;
        jobj["textField"] = dropDownListControl.textField;
        jobj["multiSelect"] = dropDownListControl.multiSelect;
        jobj["panelHeight"] = dropDownListControl.panelHeight;
        jobj["placeholder"] = dropDownListControl.placeholder;
        jobj["className"] = dropDownListControl.className;
        jobj["require"] = dropDownListControl.require;
        return jobj;
    }
    /**
     * 反序列化
     * @param {?} jobj 下拉列表控件实体序列化后的JSON对象
     * @return {?}
     */
    initFromObject(jobj) {
        /** @type {?} */
        let control = new DropDownListControl();
        if (jobj["valueType"] != null) {
            control.valueType = (/** @type {?} */ (jobj["valueType"]));
        }
        if (jobj["enumValues"] != null) {
            control.enumValues = new Array();
            jobj["enumValues"].forEach((/**
             * @param {?} element
             * @return {?}
             */
            element => {
                /** @type {?} */
                let convertor = new EnumValueConvert();
                control.enumValues.push(convertor.initFromJobject(element));
            }));
        }
        if (jobj["uri"] != null) {
            control.uri = jobj["uri"];
        }
        if (jobj["beforeShow"] != null) {
            control.beforeShow = jobj["beforeShow"];
        }
        if (jobj["beforeHide"] != null) {
            control.beforeHide = jobj["beforeHide"];
        }
        if (jobj["idField"] != null) {
            control.idField = jobj["idField"];
        }
        if (jobj["textField"] != null) {
            control.textField = jobj["textField"];
        }
        if (jobj["multiSelect"] != null) {
            control.multiSelect = jobj["multiSelect"];
        }
        if (jobj["panelHeight"] != null) {
            control.panelHeight = jobj["panelHeight"];
        }
        if (jobj["placeholder"] != null) {
            control.placeholder = jobj["placeholder"];
        }
        if (jobj["className"] != null) {
            control.className = jobj["className"];
        }
        if (jobj["require"] != null) {
            control.require = jobj["require"];
        }
        return control;
    }
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/entity/controltype/text/textcontrol.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * 文本控件
 */
class TextControl {
    /**
     * 获取控件类型，返回值：文本控件类型
     * @return {?}
     */
    getControlType() {
        return ControlType.Text;
    }
    /**
     * @return {?}
     */
    isRequired() {
        return !!this.require;
    }
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/entity/controltype/daterange/date-range.control.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * 日期区间控件
 */
class DateRangeControl {
    /**
     * 获取控件类型
     * @return {?}
     */
    getControlType() {
        return ControlType.DateRange;
    }
    /**
     * @return {?}
     */
    isRequired() {
        return !!this.require;
    }
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/entity/controltype/date/single-date-control.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * 日期控件
 */
class SingleDateControl {
    /**
     * @return {?}
     */
    isRequired() {
        return !!this.require;
    }
    /**
     * 获取控件类型
     * @return {?}
     */
    getControlType() {
        return ControlType.SingleDate;
    }
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/entity/controltype/smarthelp/smarthelpcontrol.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * 帮助控件
 */
class SmartHelpContol {
    /**
     * 获取控件类型
     * @return {?}
     */
    getControlType() {
        return ControlType.SmartHelp;
    }
    /**
     * @return {?}
     */
    isRequired() {
        return !!this.require;
    }
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/entity/controltype/numberrange/numberrangecontrol.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * 数字区间控件
 */
class NumberRangeControl {
    /**
     * 获取控件类型
     * @return {?}
     */
    getControlType() {
        return ControlType.NumberRange;
    }
    /**
     * @return {?}
     */
    isRequired() {
        return !!this.require;
    }
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/entity/controltype/number/single-number-control.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * 数字区间控件
 */
class SingleNumberControl {
    /**
     * 获取控件类型
     * @return {?}
     */
    getControlType() {
        return ControlType.SingleNumber;
    }
    /**
     * @return {?}
     */
    isRequired() {
        return !!this.require;
    }
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/entity/controltype/year/year-control.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * 日期控件
 */
class SingleYearControl {
    /**
     * 获取控件类型
     * @return {?}
     */
    getControlType() {
        return ControlType.SingleYear;
    }
    /**
     * @return {?}
     */
    isRequired() {
        return !!this.require;
    }
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/entity/controltype/checkbox/checkbox-control.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * 日期控件
 */
class CheckBoxControl {
    constructor() {
        /* radio 数组 */
        this.data = [];
        /* 分隔符 默认逗号*/
        this.separator = ',';
        /* 值类型是否是string */
        this.isStringValue = true;
    }
    /**
     * 获取控件类型
     * @return {?}
     */
    getControlType() {
        return ControlType.BoolCheck;
    }
    /**
     * @return {?}
     */
    isRequired() {
        return !!this.require;
    }
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/entity/controltype/daterange/datertime-range-control.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * 日期区间控件
 */
class DateTimeRangeControl {
    /**
     * 获取控件类型
     * @return {?}
     */
    getControlType() {
        return ControlType.DateTimeRange;
    }
    /**
     * @return {?}
     */
    isRequired() {
        return !!this.require;
    }
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/entity/controltype/month/month-control.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * 日期控件
 */
class SingleMonthControl {
    /**
     * 获取控件类型
     * @return {?}
     */
    getControlType() {
        return ControlType.SingleMonth;
    }
    /**
     * @return {?}
     */
    isRequired() {
        return !!this.require;
    }
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/entity/controltype/monthrange/month-range-control.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * 日期区间控件
 */
class MonthRangeControl {
    /**
     * 获取控件类型
     * @return {?}
     */
    getControlType() {
        return ControlType.MonthRange;
    }
    /**
     * @return {?}
     */
    isRequired() {
        return !!this.require;
    }
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/entity/controltype/date/single-date-time-control.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * 日期控件
 */
class SingleDateTimeControl {
    /**
     * 获取控件类型
     * @return {?}
     */
    getControlType() {
        return ControlType.SingleDateTime;
    }
    /**
     * @return {?}
     */
    isRequired() {
        return !!this.require;
    }
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/entity/controltype/combolookup/combolookup-control.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * 帮助控件
 */
class ComboLookUpControl {
    /**
     * 获取控件类型
     * @return {?}
     */
    getControlType() {
        return ControlType.ComboLookUp;
    }
    /**
     * @return {?}
     */
    isRequired() {
        return !!this.require;
    }
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/entity/controltype/radio/radio-control.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * 单选组控件
 */
class RadioControl {
    /**
     * 获取控件类型
     * @return {?}
     */
    getControlType() {
        return ControlType.Radio;
    }
    /**
     * @return {?}
     */
    isRequired() {
        return !!this.require;
    }
}
/**
 * 单选组控件序列化与反序列化器
 */
class RadioControlConvert {
    /**
     * 序列化
     * @param {?} obj 单选组控件实体
     * @return {?}
     */
    convertToObject(obj) {
        /** @type {?} */
        let radioControl = (/** @type {?} */ (obj));
        /** @type {?} */
        let jobj = new Object();
        jobj["valueType"] = radioControl.valueType;
        if (radioControl.enumValues != null) {
            /** @type {?} */
            let jarray = jobj["enumValues"] = [];
            /** @type {?} */
            let convertor = new EnumValueConvert();
            radioControl.enumValues.forEach((/**
             * @param {?} element
             * @return {?}
             */
            element => {
                if (radioControl.valueType == EnumType.BoolType) {
                    jarray.push(convertor.convertJObject(Object.assign(new EnumBoolValue(), element)));
                }
                else if (radioControl.valueType == EnumType.IntType) {
                    jarray.push(convertor.convertJObject(Object.assign(new EnumIntegerValue(), element)));
                }
                else {
                    jarray.push(convertor.convertJObject(Object.assign(new EnumStringValue(), element)));
                }
            }));
        }
        jobj["horizontal"] = radioControl.horizontal;
        jobj["showLabel"] = radioControl.showLabel;
        jobj["disabled"] = radioControl.disabled;
        jobj["className"] = radioControl.className;
        jobj["require"] = radioControl.require;
        return jobj;
    }
    /**
     * 反序列化
     * @param {?} jobj 单选组控件实体序列化后的JSON对象
     * @return {?}
     */
    initFromObject(jobj) {
        /** @type {?} */
        let control = new RadioControl();
        if (jobj["valueType"] != null) {
            control.valueType = (/** @type {?} */ (jobj["valueType"]));
        }
        if (jobj["enumValues"] != null) {
            control.enumValues = new Array();
            jobj["enumValues"].forEach((/**
             * @param {?} element
             * @return {?}
             */
            element => {
                /** @type {?} */
                let convertor = new EnumValueConvert();
                control.enumValues.push(convertor.initFromJobject(element));
            }));
        }
        if (jobj["horizontal"] != null) {
            control.horizontal = jobj["horizontal"];
        }
        if (jobj["showLabel"] != null) {
            control.showLabel = jobj["showLabel"];
        }
        if (jobj["disabled"] != null) {
            control.disabled = jobj["disabled"];
        }
        if (jobj["className"] != null) {
            control.className = jobj["className"];
        }
        if (jobj["require"] != null) {
            control.require = jobj["require"];
        }
        return control;
    }
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/entity/controltype/input-group/inputgroupcontrol.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * 智能输入框控件
 */
class InputGroupControl {
    /**
     * 获取控件类型，返回值：智能输入框控件类型
     * @return {?}
     */
    getControlType() {
        return ControlType.InputGroup;
    }
    /**
     * @return {?}
     */
    isRequired() {
        return !!this.require;
    }
}
class DialogConfig {
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/entity/controltype/icontrol.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class ControlConvert {
    /**
     * @param {?} obj
     * @return {?}
     */
    convertJObject(obj) {
        /** @type {?} */
        let control = (/** @type {?} */ (obj));
        /** @type {?} */
        let controlType = control.getControlType();
        /** @type {?} */
        let jobj = new Object();
        jobj["Type"] = controlType;
        if (controlType == ControlType.DropDownList) {
            /** @type {?} */
            let convertor = new DropDownListControlConvert();
            jobj["Content"] = convertor.convertToObject((/** @type {?} */ (control)));
        }
        else if (controlType == ControlType.Radio) {
            /** @type {?} */
            let convertor = new RadioControlConvert();
            jobj["Content"] = convertor.convertToObject((/** @type {?} */ (control)));
        }
        else {
            jobj["Content"] = control;
        }
        return jobj;
    }
    /**
     * @param {?} jobj
     * @return {?}
     */
    initFromJobject(jobj) {
        /** @type {?} */
        let controlType = (/** @type {?} */ (jobj["Type"]));
        /** @type {?} */
        let content = jobj["Content"];
        if (controlType == ControlType.Text)
            return Object.assign(new TextControl(), (/** @type {?} */ (content)));
        if (controlType == ControlType.InputGroup)
            return Object.assign(new InputGroupControl(), (/** @type {?} */ (content)));
        if (controlType == ControlType.DateRange)
            return Object.assign(new DateRangeControl(), (/** @type {?} */ (content)));
        if (controlType == ControlType.NumberRange)
            return Object.assign(new NumberRangeControl(), (/** @type {?} */ (content)));
        if (controlType == ControlType.SingleDate)
            return Object.assign(new SingleDateControl(), (/** @type {?} */ (content)));
        if (controlType == ControlType.SingleNumber)
            return Object.assign(new SingleNumberControl(), (/** @type {?} */ (content)));
        if (controlType == ControlType.DropDownList)
            return new DropDownListControlConvert().initFromObject(content);
        if (controlType == ControlType.SmartHelp)
            return Object.assign(new SmartHelpContol(), (/** @type {?} */ (content)));
        if (controlType == ControlType.ComboLookUp)
            return Object.assign(new ComboLookUpControl(), (/** @type {?} */ (content)));
        if (controlType == ControlType.SingleYear)
            return Object.assign(new SingleYearControl(), (/** @type {?} */ (content)));
        if (controlType == ControlType.SingleMonth)
            return Object.assign(new SingleMonthControl(), (/** @type {?} */ (content)));
        if (controlType == ControlType.BoolCheck)
            return Object.assign(new CheckBoxControl(), (/** @type {?} */ (content)));
        if (controlType == ControlType.Radio)
            return new RadioControlConvert().initFromObject(content);
        if (controlType == ControlType.DateTimeRange)
            return Object.assign(new DateTimeRangeControl(), (/** @type {?} */ (content)));
        if (controlType == ControlType.MonthRange)
            return Object.assign(new MonthRangeControl(), (/** @type {?} */ (content)));
        if (controlType == ControlType.SingleDateTime)
            return Object.assign(new SingleDateTimeControl(), (/** @type {?} */ (content)));
    }
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/entity/conditionvalue/textvalue.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class TextValue {
    /**
     * @return {?}
     */
    clearValue() {
        this.value = undefined;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    setOriginalValue(value) {
        this.value = value;
    }
    /**
     * @return {?}
     */
    getOriginalValue() {
        return this.value;
    }
    /**
     * @return {?}
     */
    getControlType() {
        return ControlType.Text;
    }
    /**
     * @param {?=} data
     */
    constructor(data = { value: '' }) {
        // this.value = data.value ? data.value.trim() : '';
        this.value = data.value ? data.value : '';
    }
    /**
     * @return {?}
     */
    isEmpty() {
        return !this.value;
    }
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/entity/conditionvalue/numberrangevaue.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class NumberRangeValue {
    /**
     * @return {?}
     */
    isEmpty() {
        return (this.startValue == null && this.endValue == null);
    }
    /**
     * @return {?}
     */
    clearValue() {
        this.startValue = undefined;
        this.endValue = undefined;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    setOriginalValue(value) {
        throw new Error("Method not implemented.");
    }
    /**
     * @return {?}
     */
    getOriginalValue() {
        return {
            begin: this.startValue,
            end: this.endValue
        };
    }
    /**
     * @return {?}
     */
    getControlType() {
        return ControlType.NumberRange;
    }
    /**
     * @param {?=} data
     */
    constructor(data = { startValue: null, endValue: null }) {
        this.startValue = data.startValue == null ? null : parseFloat(data.startValue);
        this.endValue = data.endValue == null ? null : parseFloat(data.endValue);
    }
}
class NumberRangeValueConvertor {
    /**
     * @param {?} obj
     * @return {?}
     */
    convertToObject(obj) {
        /** @type {?} */
        let numberRangeValue = (/** @type {?} */ (obj));
        /** @type {?} */
        let jobj = new Object();
        jobj["startValue"] = numberRangeValue.startValue;
        jobj["endValue"] = numberRangeValue.endValue;
        return jobj;
    }
    /**
     * @param {?} jobj
     * @return {?}
     */
    initFromObject(jobj) {
        /** @type {?} */
        let numberRangeValue = new NumberRangeValue();
        if (jobj["startValue"]) {
            //key point！as Number并不会转化格式
            numberRangeValue.startValue = parseFloat(jobj["startValue"]);
        }
        if (jobj["endValue"]) {
            numberRangeValue.endValue = parseFloat(jobj["endValue"]);
        }
        return numberRangeValue;
    }
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/entity/conditionvalue/daterangevalue.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class DateRangeValue {
    /**
     * @param {?} value
     * @return {?}
     */
    setOriginalValue(value) {
        if (value.formatted) {
            this.startTime = value.formatted.split(value.delimiter)[0];
            this.endTime = value.formatted.split(value.delimiter)[1];
        }
        else {
            this.clearValue();
        }
    }
    /**
     * @return {?}
     */
    getOriginalValue() {
        if (!this.startTime || !this.endTime) {
            return '';
        }
        return `${this.startTime}~${this.endTime}`;
    }
    /**
     * @return {?}
     */
    getControlType() {
        return ControlType.DateRange;
    }
    /**
     * @return {?}
     */
    clearValue() {
        this.startTime = undefined;
        this.endTime = undefined;
    }
    /**
     * @param {?=} value
     */
    constructor(value = { startTime: '', endTime: '' }) {
        this.startTime = value.startTime;
        this.endTime = value.endTime;
    }
    /**
     * @return {?}
     */
    isEmpty() {
        return !this.startTime || !this.endTime;
    }
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/entity/conditionvalue/smarthelpvalue.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class SmartHelpValue {
    /**
     * @return {?}
     */
    getControlType() {
        return ControlType.SmartHelp;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    setOriginalValue(value) {
        throw new Error("Method not implemented.");
    }
    /**
     * @return {?}
     */
    getOriginalValue() {
        /** @type {?} */
        const args = this.valueField.split('.');
        /** @type {?} */
        const valueArr = this.value.map((/**
         * @param {?} helpItem
         * @return {?}
         */
        helpItem => this.getPropValue(helpItem, cloneDeep(args))));
        return valueArr && valueArr.length ? valueArr.join(',') : '';
    }
    /**
     * @return {?}
     */
    clearValue() {
        this.value = [];
        this.valueField = undefined;
        this.textValue = undefined;
        this.isInputText = undefined;
    }
    /**
     * @return {?}
     */
    isEmpty() {
        return !this.value.length;
    }
    /**
     * @param {?=} data
     */
    constructor(data = { value: [], valueField: undefined, textValue: undefined, isInputText: undefined }) {
        if (data.textValue) {
            this.value = data.value;
            this.valueField = data.valueField;
            this.textValue = data.textValue;
            this.isInputText = data.isInputText;
        }
        else {
            //帮助未支持多选时，没有textValue属性，所有值都是通过选择产生的
            this.value = data.value;
            this.valueField = data.valueField ? data.valueField : '';
            this.textValue = 'help-text-value-null';
            this.isInputText = false;
        }
    }
    /**
     * @param {?} textField
     * @return {?}
     */
    getTextValue(textField) {
        /** @type {?} */
        const args = textField.split('.');
        /** @type {?} */
        const textArr = this.value.map((/**
         * @param {?} helpItem
         * @return {?}
         */
        helpItem => this.getPropValue(helpItem, cloneDeep(args))));
        return textArr && textArr.length ? textArr.join(',') : '';
    }
    /**
     * @param {?} helpItem
     * @param {?} args
     * @return {?}
     */
    getPropValue(helpItem, args) {
        if (args.length > 1) {
            /** @type {?} */
            const arg = args.shift();
            return helpItem[arg] ? this.getPropValue(helpItem[arg], args) : null;
        }
        return helpItem[args[0]];
    }
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/entity/conditionvalue/single-date-value.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class SingleDateValue {
    /**
     * @param {?} value
     * @return {?}
     */
    setOriginalValue(value) {
        this.dateValue = value.formatted;
    }
    /**
     * @return {?}
     */
    getOriginalValue() {
        return this.dateValue;
    }
    /**
     * @return {?}
     */
    getControlType() {
        return ControlType.SingleDate;
    }
    /**
     * @param {?=} date
     */
    constructor(date = '') {
        this.dateValue = date;
    }
    /**
     * @return {?}
     */
    isEmpty() {
        return !this.dateValue;
    }
    /**
     * @return {?}
     */
    clearValue() {
        this.dateValue = undefined;
    }
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/entity/conditionvalue/single-number-value.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class SingleNumberValue {
    /**
     * @return {?}
     */
    isEmpty() {
        return this.numValue == null;
    }
    /**
     * @return {?}
     */
    clearValue() {
        this.numValue = undefined;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    setOriginalValue(value) {
        throw new Error("Method not implemented.");
    }
    /**
     * @return {?}
     */
    getOriginalValue() {
        return this.numValue;
    }
    /**
     * @return {?}
     */
    getControlType() {
        return ControlType.SingleNumber;
    }
    /**
     * @param {?=} data
     */
    constructor(data = null) {
        this.numValue = data == null ? null : parseFloat(data);
    }
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/entity/conditionvalue/single-year-value.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class SingleYearValue {
    /**
     * @param {?} value
     * @return {?}
     */
    setOriginalValue(value) {
        this.yearValue = value.formatted;
    }
    /**
     * @return {?}
     */
    getOriginalValue() {
        return this.yearValue;
    }
    /**
     * @return {?}
     */
    getControlType() {
        return ControlType.SingleYear;
    }
    /**
     * @return {?}
     */
    clearValue() {
        this.yearValue = undefined;
    }
    /**
     * @param {?=} year
     */
    constructor(year = '') {
        this.yearValue = year;
    }
    /**
     * @return {?}
     */
    isEmpty() {
        return !this.yearValue;
    }
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/entity/conditionvalue/checkbox-value.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
// CheckBoxValue初始化，与'app-solution-checkbox'组件初始化是分离的
// CheckBoxValue 要求value是布尔类型，组件要求value是true时，值应为true字符串
class CheckBoxValue {
    /**
     * @return {?}
     */
    clearValue() {
        this.value = [];
    }
    // 如果组件的返回值是字符串，转化为布尔值
    /**
     * @param {?} value
     * @return {?}
     */
    setOriginalValue(value) {
        if (value.length) {
            this.value = value.map((/**
             * @param {?} v
             * @return {?}
             */
            v => {
                if (typeof v == 'string') {
                    return true;
                }
                else {
                    return v;
                }
            }));
        }
        else {
            this.value = value;
        }
    }
    // 把CheckBoxValue的true布尔值，转化为组件可识别的字符串
    /**
     * @return {?}
     */
    getOriginalValue() {
        if (this.value.length) {
            return this.value.map((/**
             * @param {?} v
             * @return {?}
             */
            v => {
                if (v === true) {
                    return "true";
                }
                else {
                    return v;
                }
            }));
        }
        return this.value;
    }
    /**
     * @return {?}
     */
    getControlType() {
        return ControlType.BoolCheck;
    }
    // CheckBoxValue 初始化，传入的值未做任何修改
    /**
     * @param {?=} value
     */
    constructor(value = []) {
        this.value = value;
    }
    /**
     * @return {?}
     */
    isEmpty() {
        return this.value.length == 0;
    }
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/entity/conditionvalue/dropdownlistvalue.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class DropDownListValue {
    //旧结构无，新结构为选中的value值，多选是以,分割的字符串
    /**
     * @param {?=} data
     */
    constructor(data = { value: [], key: undefined }) {
        this.value = []; //旧结构{Type: '', Content: {value: string, name: string}} 新结构Array[{value: string, name: string}]
        if (data.value && data.value.length > 0) { //已有初始值[]
            if (data.hasOwnProperty('key')) { //新结构
                this.value = data.value;
                this.key = data.key;
            }
            else { //旧结构
                this.value = data.value['Content'] && data.value['Content'].value ? [data.value['Content']] : [];
                this.key = data.value['Content'] && data.value['Content'].value ? data.value['Content'].value : undefined;
            }
        }
        else {
            this.clearValue();
        }
    }
    /**
     * @return {?}
     */
    clearValue() {
        this.value = [];
        this.key = undefined;
    }
    /**
     * @param {?} data
     * @return {?}
     */
    setOriginalValue(data) { }
    /**
     * @return {?}
     */
    getOriginalValue() {
        return this.key;
    }
    /**
     * @return {?}
     */
    getControlType() {
        return ControlType.DropDownList;
    }
    /**
     * @return {?}
     */
    isEmpty() {
        return !this.key;
    }
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/entity/conditionvalue/single-month-value.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class SingleMonthValue {
    /**
     * @param {?} value
     * @return {?}
     */
    setOriginalValue(value) {
        this.monthValue = value.formatted;
    }
    /**
     * @return {?}
     */
    getOriginalValue() {
        return this.monthValue;
    }
    /**
     * @return {?}
     */
    getControlType() {
        return ControlType.SingleMonth;
    }
    /**
     * @return {?}
     */
    clearValue() {
        this.monthValue = undefined;
    }
    /**
     * @param {?=} month
     */
    constructor(month = '') {
        this.monthValue = month;
    }
    /**
     * @return {?}
     */
    isEmpty() {
        return !this.monthValue;
    }
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/entity/conditionvalue/month-range-value.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class MonthRangeValue {
    /**
     * @param {?} value
     * @return {?}
     */
    setOriginalValue(value) {
        if (value.formatted) {
            this.startTime = value.formatted.split(value.delimiter)[0];
            this.endTime = value.formatted.split(value.delimiter)[1];
        }
        else {
            this.clearValue();
        }
    }
    /**
     * @return {?}
     */
    getOriginalValue() {
        if (!this.startTime || !this.endTime) {
            return '';
        }
        return `${this.startTime}~${this.endTime}`;
    }
    /**
     * @return {?}
     */
    getControlType() {
        return ControlType.MonthRange;
    }
    /**
     * @return {?}
     */
    clearValue() {
        this.startTime = undefined;
        this.endTime = undefined;
    }
    /**
     * @param {?=} value
     */
    constructor(value = { startTime: '', endTime: '' }) {
        this.startTime = value.startTime;
        this.endTime = value.endTime;
    }
    /**
     * @return {?}
     */
    isEmpty() {
        return !this.startTime || !this.endTime;
    }
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/entity/conditionvalue/single-date-time-value.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class SingleDateTimeValue {
    /**
     * @param {?} value
     * @return {?}
     */
    setOriginalValue(value) {
        this.datetimeValue = value.formatted;
    }
    /**
     * @return {?}
     */
    getOriginalValue() {
        return this.datetimeValue;
    }
    /**
     * @return {?}
     */
    getControlType() {
        return ControlType.SingleDateTime;
    }
    /**
     * @param {?=} datetime
     */
    constructor(datetime = '') {
        this.datetimeValue = datetime;
    }
    /**
     * @return {?}
     */
    isEmpty() {
        return !this.datetimeValue;
    }
    /**
     * @return {?}
     */
    clearValue() {
        this.datetimeValue = undefined;
    }
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/entity/conditionvalue/combolookup-value.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class ComboLookUpValue {
    /**
     * @return {?}
     */
    clearValue() {
        this.value = [];
        this.valueField = undefined;
        this.textValue = undefined;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    setOriginalValue(value) {
        throw new Error("Method not implemented.");
    }
    /**
     * @return {?}
     */
    getOriginalValue() {
        /** @type {?} */
        const args = this.valueField.split('.');
        /** @type {?} */
        const valueArr = this.value.map((/**
         * @param {?} helpItem
         * @return {?}
         */
        helpItem => this.getPropValue(helpItem, cloneDeep(args))));
        return valueArr && valueArr.length ? valueArr.join(',') : '';
    }
    /**
     * @return {?}
     */
    getControlType() {
        return ControlType.ComboLookUp;
    }
    /**
     * @param {?=} data
     */
    constructor(data = { value: [], valueField: undefined, textValue: undefined }) {
        if (data.textValue) { //新结构，value是数组
            this.valueField = data.valueField;
            this.value = data.value;
            this.textValue = data.textValue;
        }
        else { //旧结构，value是对象
            this.valueField = data.valueField ? data.valueField : '';
            this.value = (data.value && data.value.data) ? [data.value.data] : [];
            this.textValue = 'help-text-value-null'; //旧结构无textValue属性
        }
    }
    /**
     * @return {?}
     */
    isEmpty() {
        return !this.valueField;
    }
    /**
     * @param {?} helpItem
     * @param {?} args
     * @return {?}
     */
    getPropValue(helpItem, args) {
        if (args.length > 1) {
            /** @type {?} */
            const arg = args.shift();
            return helpItem[arg] ? this.getPropValue(helpItem[arg], args) : null;
        }
        return helpItem[args[0]];
    }
    /**
     * @param {?} textField
     * @return {?}
     */
    getTextValue(textField) {
        /** @type {?} */
        const args = textField.split('.');
        /** @type {?} */
        const textArr = this.value.map((/**
         * @param {?} helpItem
         * @return {?}
         */
        helpItem => this.getPropValue(helpItem, cloneDeep(args))));
        return textArr && textArr.length ? textArr.join(',') : '';
    }
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/entity/conditionvalue/radio-value.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class RadioValue {
    /**
     * @return {?}
     */
    clearValue() {
        this.value = undefined;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    setOriginalValue(value) {
        this.value = value;
    }
    /**
     * @return {?}
     */
    getOriginalValue() {
        return this.value;
    }
    /**
     * @return {?}
     */
    getControlType() {
        return ControlType.Radio;
    }
    /**
     * @param {?=} value
     */
    constructor(value = undefined) {
        this.value = value;
    }
    /**
     * @return {?}
     */
    isEmpty() {
        return !this.value;
    }
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/entity/conditionvalue/inputgroupvalue.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class InputGroupValue {
    /**
     * @return {?}
     */
    getControlType() {
        return ControlType.InputGroup;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    setOriginalValue(value) {
        throw new Error("Method not implemented.");
    }
    /**
     * @return {?}
     */
    getOriginalValue() {
        /** @type {?} */
        const args = this.textField.split('.');
        /** @type {?} */
        const textArr = this.value.map((/**
         * @param {?} item
         * @return {?}
         */
        item => this.getPropValue(item, cloneDeep(args))));
        return textArr && textArr.length ? textArr.join(',') : '';
    }
    /**
     * @return {?}
     */
    clearValue() {
        this.value = [];
        this.textValue = undefined;
        this.textField = undefined;
        this.isInputText = undefined;
    }
    /**
     * @return {?}
     */
    isEmpty() {
        return !this.textValue;
    }
    /**
     * @param {?=} data
     */
    constructor(data = { value: [], textValue: undefined, textField: undefined, isInputText: undefined }) {
        this.value = data.value;
        // this.textValue = data.textValue ? data.textValue.trim() : '';
        this.textValue = data.textValue ? data.textValue : '';
        this.textField = data.textField;
        this.isInputText = data.isInputText;
    }
    /**
     * @param {?} targetField
     * @return {?}
     */
    getTextValue(targetField) {
        /** @type {?} */
        const args = targetField.split('.');
        /** @type {?} */
        const textArr = this.value.map((/**
         * @param {?} item
         * @return {?}
         */
        item => this.getPropValue(item, cloneDeep(args))));
        return textArr && textArr.length ? textArr.join(',') : '';
    }
    /**
     * @param {?} item
     * @param {?} args
     * @return {?}
     */
    getPropValue(item, args) {
        if (args.length > 1) {
            /** @type {?} */
            const arg = args.shift();
            return item[arg] ? this.getPropValue(item[arg], args) : '';
        }
        return item[args[0]];
    }
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/entity/conditionvalue/ivalue.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class ConditionValueConvert {
    /**
     * 序列化
     * 为了兼容C#产生的旧数据，向server传递的JSON object属性名全改为首字母大写
     * @param {?} obj
     * @return {?}
     */
    convertToObject(obj) {
        /** @type {?} */
        let conditionValue = (/** @type {?} */ (obj));
        /** @type {?} */
        let controlType = conditionValue.getControlType();
        /** @type {?} */
        let jobj = new Object();
        jobj["Type"] = controlType;
        if (controlType == ControlType.NumberRange) {
            /** @type {?} */
            let convertor = new NumberRangeValueConvertor();
            jobj["Content"] = convertor.convertToObject(conditionValue);
        }
        else {
            jobj["Content"] = conditionValue;
        }
        return jobj;
    }
    /**
     * @param {?} jobj
     * @return {?}
     */
    initFromObject(jobj) {
        /** @type {?} */
        let content = jobj["Content"];
        switch (jobj["Type"]) {
            case ControlType.Text:
                return new TextValue(jobj["Content"]);
            case ControlType.NumberRange:
                return new NumberRangeValue(jobj["Content"]);
            case ControlType.DateRange:
            case ControlType.DateTimeRange:
                return new DateRangeValue(jobj["Content"]);
            case ControlType.DropDownList:
                return new DropDownListValue(jobj["Content"]);
            case ControlType.SmartHelp:
                return new SmartHelpValue(jobj["Content"]);
            case ControlType.ComboLookUp:
                return new ComboLookUpValue(jobj["Content"]);
            case ControlType.SingleDate:
                return Object.assign(new SingleDateValue(), (/** @type {?} */ (content)));
            case ControlType.SingleNumber:
                return Object.assign(new SingleNumberValue(), (/** @type {?} */ (content)));
            case ControlType.SingleYear:
                return Object.assign(new SingleYearValue(), (/** @type {?} */ (content)));
            case ControlType.BoolCheck:
                return Object.assign(new CheckBoxValue(), (/** @type {?} */ (content)));
            case ControlType.Radio:
                return Object.assign(new RadioValue(), (/** @type {?} */ (content)));
            case ControlType.SingleMonth:
                return Object.assign(new SingleMonthValue(), (/** @type {?} */ (content)));
            case ControlType.MonthRange:
                return Object.assign(new MonthRangeValue(), (/** @type {?} */ (content)));
            case ControlType.SingleDateTime:
                return Object.assign(new SingleDateTimeValue(), (/** @type {?} */ (content)));
            case ControlType.InputGroup:
                return Object.assign(new InputGroupValue(), (/** @type {?} */ (content)));
        }
    }
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/entity/querycondition.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * 查询条件实体类
 */
class QueryCondition {
    constructor() {
        this.visible = true;
    }
}
/**
 * 查询条件序列化与反序列化器
 */
class QueryConditionConvert {
    /**
     * 序列化
     * @param {?} obj 查询条件实体
     * 为了兼容C#产生的旧数据，向server传递的JSON object属性名全改为首字母大写
     * @return {?}
     */
    convertJObject(obj) {
        /** @type {?} */
        let queryCondition = (/** @type {?} */ (obj));
        /** @type {?} */
        let jobj = new Object();
        jobj["ID"] = queryCondition.id;
        jobj["FieldCode"] = queryCondition.fieldCode;
        jobj["FieldName"] = queryCondition.fieldName;
        // jobj["compareType"]=queryCondition.compareType;
        jobj["ValueType"] = queryCondition.valueType;
        jobj["placeHolder"] = queryCondition.placeHolder;
        // 无论是否区间都追加
        jobj["beginPlaceHolder"] = queryCondition.hasOwnProperty('beginPlaceHolder') ? queryCondition['beginPlaceHolder'] : '';
        jobj["endPlaceHolder"] = queryCondition.hasOwnProperty('endPlaceHolder') ? queryCondition['endPlaceHolder'] : '';
        jobj["visible"] = queryCondition.hasOwnProperty('visible') ? queryCondition['visible'] : true;
        /** @type {?} */
        let valueConvert = new ConditionValueConvert();
        if (queryCondition.value) {
            jobj["Value"] = valueConvert.convertToObject(queryCondition.value);
        }
        /** @type {?} */
        let controlConvertor = new ControlConvert();
        if (queryCondition.control) {
            jobj["Control"] = controlConvertor.convertJObject(queryCondition.control);
        }
        return jobj;
    }
    /**
     * 反序列化
     * @param {?} jobj 查询条件实体序列化后的JSON对象
     * server端存储的是前端定义好格式的字符串，所以client接收时以约定好的格式反序列化
     * @return {?}
     */
    initFromJobject(jobj) {
        /** @type {?} */
        let queryCondition = new QueryCondition();
        queryCondition.id = jobj["ID"];
        queryCondition.fieldCode = jobj["FieldCode"];
        queryCondition.fieldName = jobj["FieldName"];
        // queryCondition.compareType=jobj["compareType"] as CompareType;
        queryCondition.valueType = (/** @type {?} */ ((jobj["ValueType"])));
        queryCondition.placeHolder = jobj["placeHolder"];
        queryCondition.beginPlaceHolder = jobj.hasOwnProperty('beginPlaceHolder') ? jobj['beginPlaceHolder'] : '';
        queryCondition.endPlaceHolder = jobj.hasOwnProperty('endPlaceHolder') ? jobj['endPlaceHolder'] : '';
        queryCondition.visible = jobj.hasOwnProperty('visible') ? jobj['visible'] : true;
        /** @type {?} */
        const conditonValue = jobj["Value"];
        if (conditonValue) {
            /** @type {?} */
            let valueConvert = new ConditionValueConvert();
            queryCondition.value = valueConvert.initFromObject(conditonValue);
        }
        /** @type {?} */
        const conditionControl = jobj["Control"];
        if (conditionControl) {
            /** @type {?} */
            let controlConvertor = new ControlConvert();
            queryCondition.control = controlConvertor.initFromJobject(conditionControl);
        }
        return queryCondition;
    }
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/entity/valuetype.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @enum {number} */
const ValueType = {
    /**
     *值类型
     */
    Value: 0,
    /**
     * 帮助类型
     */
    SmartHelp: 1,
    /**
     * 枚举类型
     */
    Enum: 2,
    /**
     * 表达式
     */
    Express: 3,
};
ValueType[ValueType.Value] = 'Value';
ValueType[ValueType.SmartHelp] = 'SmartHelp';
ValueType[ValueType.Enum] = 'Enum';
ValueType[ValueType.Express] = 'Express';

/**
 * @fileoverview added by tsickle
 * Generated from: lib/service/solution.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class SolutionService {
    /**
     * @param {?} notify
     */
    constructor(notify) {
        this.notify = notify;
        // 标记变更
        this.controlConfigState = new BehaviorSubject([]);
        this.controlTypeMap = new Map([
            [ControlType.Text, 'text'], [ControlType.BoolCheck, 'bool-check'], [ControlType.DateRange, 'date'],
            [ControlType.DateTimeRange, 'date-time'], [ControlType.NumberRange, 'number'], [ControlType.DropDownList, 'dropdown'],
            [ControlType.SmartHelp, 'help'], [ControlType.SingleDate, 'single-date'], [ControlType.SingleNumber, 'single-number'],
            [ControlType.SingleYear, 'single-year'], [ControlType.SingleMonth, 'single-month'], [ControlType.MonthRange, 'month'],
            [ControlType.SingleDateTime, 'single-date-time'], [ControlType.ComboLookUp, 'combolist-help'], [ControlType.Radio, 'radio'],
            [ControlType.InputGroup, 'input-group']
        ]);
    }
    /**
     * @return {?}
     */
    getControlConfigState() {
        return this.controlConfigState;
    }
    /**
     * 传递过来的是已经处理过的条件
     * @param {?} simpleCondition
     * @return {?}
     */
    updateControlConfigState(simpleCondition) {
        this.controlConfigState.next(simpleCondition);
    }
    /**
     * 只返回存在的属性
     * @param {?} fields
     * @return {?}
     */
    convertToSimpleQueryConditions(fields) {
        if (fields && fields.length == 0) {
            return [];
        }
        return fields.map((/**
         * @param {?} field
         * @return {?}
         */
        field => {
            /** @type {?} */
            let simpleQueryCondition = {};
            simpleQueryCondition['fieldCode'] = field.labelCode;
            if (field.hasOwnProperty('visible')) {
                simpleQueryCondition['visible'] = field.visible;
            }
            simpleQueryCondition['control'] = this.getSimpleControl(field);
            return simpleQueryCondition;
        }));
    }
    /**
     * 只处理设置的属性
     * @private
     * @param {?} field
     * @return {?}
     */
    getSimpleControl(field) {
        /** @type {?} */
        const controlData = field.control;
        /** @type {?} */
        let simpleControl = {};
        /** @type {?} */
        let tControlType = this.controlTypeMap.get(controlData.controltype);
        switch (tControlType) {
            case 'single-year':
                this.updateSimpleControl(simpleControl, ['maxDate', 'minDate'], controlData);
                break;
            default:
                simpleControl = {};
        }
        return simpleControl;
    }
    /**
     * 只处理指定属性
     * @private
     * @param {?} resultObj 修改的对象  {test01:'',test01:''}
     * @param {?} sourceProps 待获取的属性列表 ['prop01','prop02']
     * @param {?} source 取值来源{prop01:'',prop02:''}
     * @param {?=} distProps 目标属性，对应的返回属性按照设置['dist01','']
     * @return {?}
     */
    updateSimpleControl(resultObj, sourceProps, source, distProps = []) {
        if (distProps.length == 0) {
            distProps = sourceProps;
        }
        for (let m = 0; m < sourceProps.length; m++) {
            if (!distProps[m]) {
                distProps[m] = sourceProps[m];
            }
        }
        for (let k = 0; k < sourceProps.length; k++) {
            if (source && source.hasOwnProperty(sourceProps[k])) {
                resultObj[distProps[k]] = source[sourceProps[k]];
            }
        }
    }
    /**
     * 将字段配置JSON描述信息转换为筛选条件
     * @param {?} fields 字段配置信息
     * @return {?} 筛选条件数组
     */
    convertToQueryConditions(fields) {
        /** @type {?} */
        let queryCondition;
        return fields.map((/**
         * @param {?} field
         * @return {?}
         */
        field => {
            queryCondition = new QueryCondition();
            queryCondition.id = field.id;
            queryCondition.fieldCode = field.labelCode;
            // queryCondition.code = field.code; 无用属性
            queryCondition.fieldName = field.name;
            queryCondition.valueType = ValueType.Value;
            queryCondition.placeHolder = field.placeHolder;
            queryCondition.beginPlaceHolder = field.hasOwnProperty('beginPlaceHolder') ? field.beginPlaceHolder : '';
            queryCondition.endPlaceHolder = field.hasOwnProperty('endPlaceHolder') ? field.endPlaceHolder : '';
            let { control, value } = this.getControlAndValue(field);
            queryCondition.control = control;
            queryCondition.value = value;
            return queryCondition;
        }));
    }
    /**
     * 根据控件类型分别创建筛选条件的control对象和value对象
     * @param {?} field 字段配置信息
     * @return {?} 筛选条件的control对象和value对象
     */
    getControlAndValue(field) {
        /** @type {?} */
        const controlData = field.control;
        /** @type {?} */
        const valueData = field.value;
        /** @type {?} */
        let control;
        /** @type {?} */
        let value;
        switch (controlData.controltype) {
            case 'text':
                control = new TextControl();
                control.className = controlData.className;
                control.placeholder = controlData.placeholder;
                control.require = controlData.require;
                //plain string
                value = new TextValue({ value: valueData });
                break;
            case 'input-group':
                control = new InputGroupControl();
                control.className = controlData.className;
                control.require = controlData.require;
                control.editable = controlData.editable;
                control.groupText = controlData.groupText;
                control.usageMode = controlData.usageMode;
                control.dialogOptions = this.setInputGroupDialog(field);
                control.click = controlData.click;
                value = new InputGroupValue(valueData);
                break;
            case 'date':
                control = new DateRangeControl();
                control.format = controlData.format;
                control.returnFormat = controlData.returnFormat;
                control.className = controlData.className;
                control.placeholder = controlData.placeholder;
                control.require = controlData.require;
                control.weekSelect = controlData.weekSelect;
                control.showWeekNumbers = controlData.showWeekNumbers;
                //control.beginPlaceHolder=controlData.beginPlaceHolder;
                //control.endPlaceHolder=controlData.endPlaceHolder;
                //{startTime: valueData.startTime, endTime: valueData.endTime}
                value = new DateRangeValue(valueData);
                break;
            case 'date-time':
                control = new DateTimeRangeControl();
                control.format = controlData.format;
                control.returnFormat = controlData.returnFormat;
                control.className = controlData.className;
                control.placeholder = controlData.placeholder;
                control.require = controlData.require;
                control.enableCustomFormat = controlData.enableCustomFormat;
                // control.beginPlaceHolder=controlData.beginPlaceHolder;
                //control.endPlaceHolder=controlData.endPlaceHolder;
                //control.weekSelect = controlData.weekSelect;
                //control.showWeekNumbers = controlData.showWeekNumbers;
                //{startTime: valueData.startTime, endTime: valueData.endTime}
                value = new DateRangeValue(valueData);
                break;
            case 'month':
                control = new MonthRangeControl();
                control.format = controlData.format;
                control.returnFormat = controlData.returnFormat;
                control.className = controlData.className;
                control.placeholder = controlData.placeholder;
                control.require = controlData.require;
                //control.beginPlaceHolder=controlData.beginPlaceHolder;
                //control.endPlaceHolder=controlData.endPlaceHolder;
                value = new MonthRangeValue(valueData);
                break;
            case 'number':
                control = new NumberRangeControl();
                control.className = controlData.className;
                control.placeholder = this.emptyString(controlData.placeholder);
                control.require = controlData.require;
                control.precision = controlData.precision;
                control.textAlign = controlData.textAlign;
                control.bigNumber = controlData.isBigNumber;
                control.min = controlData.minValue;
                control.max = controlData.maxValue;
                //control.beginPlaceHolder=controlData.beginPlaceHolder;
                //control.endPlaceHolder=controlData.endPlaceHolder;
                //{startValue: valueData.startValue, endValue: valueData.endValue}
                value = new NumberRangeValue(valueData);
                break;
            case 'dropdown':
                control = new DropDownListControl();
                control.valueType = controlData.valueType;
                control.enumValues = controlData.enumValues;
                control.uri = controlData.uri;
                control.beforeShow = controlData.beforeShow;
                control.beforeHide = controlData.beforeHide;
                control.idField = controlData.idField;
                control.textField = controlData.textField;
                control.multiSelect = controlData.multiSelect;
                control.className = controlData.className;
                control.placeholder = controlData.placeholder;
                control.panelHeight = controlData.panelHeight;
                control.require = controlData.require;
                //{value: [enumValues], key: 以，号分割的字符串})
                value = new DropDownListValue(valueData);
                break;
            case 'help':
                control = new SmartHelpContol();
                control.uri = controlData.uri;
                control.textField = controlData.textField;
                control.valueField = controlData.valueField;
                control.displayType = controlData.displayType;
                control.idField = controlData.idField;
                control.mapFields = controlData.mapFields;
                control.preEventCmd = controlData.preEventCmd;
                control.postEventCmd = controlData.postEventCmd;
                control.context = controlData.context;
                control.className = controlData.className;
                control.enableFullTree = controlData.enableFullTree;
                control.loadTreeDataType = controlData.loadTreeDataType;
                control.singleSelect = controlData.singleSelect;
                control.expandLevel = controlData.expandLevel;
                control.enableCascade = controlData.enableCascade;
                control.placeholder = controlData.placeholder;
                control.require = controlData.require;
                control.nosearch = controlData.nosearch;
                control.displayFields = controlData.displayFields;
                control.displayTextSeparator = controlData.displayTextSeparator;
                control.editable = controlData.editable;
                control.clearFields = controlData.clearFields;
                control.clear = controlData.clear;
                control.dialogTitle = controlData.dialogTitle;
                control.panelHeight = controlData.panelHeight;
                control.panelWidth = controlData.panelWidth;
                if (controlData.hasOwnProperty('pageSize')) {
                    control.pageSize = controlData.pageSize;
                }
                if (controlData.hasOwnProperty('pageList')) {
                    control.pageList = controlData.pageList;
                }
                //{value: [{}], valueField: string, textValue: string}
                value = new SmartHelpValue(valueData);
                break;
            case 'combolist-help':
                control = new ComboLookUpControl();
                control.uri = controlData.uri;
                control.idField = controlData.idField;
                control.valueField = controlData.valueField;
                control.textField = controlData.textField;
                control.mapFields = controlData.mapFields;
                control.displayType = this.displayTypeTransform(controlData.displayType);
                control.singleSelect = controlData.singleSelect;
                control.preEventCmd = controlData.preEventCmd;
                control.postEventCmd = controlData.postEventCmd;
                control.enableFullTree = controlData.enableFullTree;
                control.loadTreeDataType = controlData.loadTreeDataType;
                control.expandLevel = controlData.expandLevel;
                control.className = controlData.className;
                control.placeholder = controlData.placeholder;
                control.panelWidth = controlData.panelWidth;
                control.panelHeight = controlData.panelHeight;
                control.require = controlData.require;
                //{value: [{}], valueField: string, textValue: string}
                value = new ComboLookUpValue(valueData);
                break;
            case 'single-date':
                control = new SingleDateControl();
                control.format = controlData.format;
                control.returnFormat = controlData.returnFormat;
                control.className = controlData.className;
                control.placeholder = controlData.placeholder;
                control.require = controlData.require;
                //plain string
                value = new SingleDateValue(valueData);
                break;
            case 'single-date-time':
                control = new SingleDateTimeControl();
                control.format = controlData.format;
                control.returnFormat = controlData.returnFormat;
                control.className = controlData.className;
                control.placeholder = controlData.placeholder;
                control.require = controlData.require;
                control.enableCustomFormat = controlData.enableCustomFormat;
                value = new SingleDateTimeValue(valueData);
                break;
            case 'single-number':
                control = new SingleNumberControl();
                control.className = controlData.className;
                control.placeholder = this.emptyString(controlData.placeholder);
                control.precision = controlData.precision;
                control.require = controlData.require;
                control.textAlign = controlData.textAlign;
                control.bigNumber = controlData.isBigNumber;
                control.min = controlData.minValue;
                control.max = controlData.maxValue;
                //{numValue: xxxx}
                value = new SingleNumberValue(valueData);
                break;
            case 'single-year':
                control = new SingleYearControl();
                control.format = controlData.format;
                control.returnFormat = controlData.returnFormat;
                control.className = controlData.className;
                control.placeholder = controlData.placeholder;
                control.require = controlData.require;
                control.maxDate = controlData.maxDate;
                control.minDate = controlData.minDate;
                //yearValue : plain string
                value = new SingleYearValue(valueData);
                break;
            case 'single-month':
                control = new SingleMonthControl();
                control.format = controlData.format;
                control.returnFormat = controlData.returnFormat;
                control.className = controlData.className;
                control.placeholder = controlData.placeholder;
                control.require = controlData.require;
                value = new SingleMonthValue(valueData);
                break;
            case 'bool-check':
                control = new CheckBoxControl();
                control.className = controlData.className;
                control.data = [{ value: "true", name: field.name }];
                control.horizontal = controlData.horizontal;
                control.disable = controlData.disable;
                control.isStringValue = false;
                control.require = controlData.require;
                //[true] or [false]
                value = new CheckBoxValue(valueData);
                break;
            case 'radio':
                control = new RadioControl();
                control.valueType = controlData.valueType;
                control.enumValues = controlData.enumValues;
                control.className = controlData.className;
                control.showLabel = controlData.showLabel;
                control.horizontal = controlData.horizontal;
                control.disabled = controlData.disabled;
                control.require = controlData.require;
                value = new RadioValue(valueData);
                break;
        }
        return { control, value };
    }
    /**
     * @return {?}
     */
    getGuid() {
        return (this.s4() + this.s4() + "-" + this.s4() + "-" + this.s4() + "-" + this.s4() + "-" + this.s4() + this.s4() + this.s4());
    }
    /**
     * @private
     * @return {?}
     */
    s4() {
        return (((1 + Math.random()) * 0x10000) | 0).toString(16).substring(1);
    }
    /**
     * @param {?} message
     * @param {?} infoType
     * @param {?} title
     * @param {?} timeout
     * @return {?}
     */
    showInfo(message, infoType, title, timeout) {
        this.notify.config.position = 'top-center';
        if (infoType == 'success') {
            this.notify.success((/** @type {?} */ ({ title: title, msg: message, timeout: timeout })));
        }
        else if (infoType == 'info') {
            this.notify.info((/** @type {?} */ ({ title: title, msg: message, timeout: timeout })));
        }
        else if (infoType == 'warning') {
            this.notify.warning((/** @type {?} */ ({ title: title, msg: message, timeout: timeout })));
        }
        else if (infoType == 'error') {
            this.notify.error((/** @type {?} */ ({ title: title, msg: message, timeout: timeout })));
        }
    }
    /**
     * 根据字段获取Lable控件的Title
     * @param {?} field
     * @return {?}
     */
    getConditionItemTitle(field) {
        if (field.id && field.id !== '') {
            return field.fieldName;
        }
    }
    /**
     * 加载筛选方案时赋默认值
     * @param {?} solution 需要赋默认值的筛选方案
     * @param {?} fieldConfigs 默认值设置
     * @param {?} readonly 是否只读
     * @return {?} 已赋默认值的筛选方案
     */
    setValues(solution, fieldConfigs, readonly) {
        /** @type {?} */
        let qc;
        /** @type {?} */
        const conditions = solution.queryConditions ? solution.queryConditions : [];
        /** @type {?} */
        let controlType;
        fieldConfigs.forEach((/**
         * @param {?} field
         * @return {?}
         */
        field => {
            qc = conditions.find((/**
             * @param {?} c
             * @return {?}
             */
            c => c.fieldCode == field.labelCode));
            //qc.control并不是controlData
            if (qc && qc.control && qc.value) {
                controlType = this.controlTypeMap.get(qc.control.getControlType());
                field.control = { controltype: controlType };
                const { control, value } = this.getControlAndValue(field);
                qc.value = this.isNumCheck(qc, value, field);
                qc.readonly = readonly;
            }
        }));
        return solution;
    }
    /**
     *
     * @param {?} conditions
     * @param {?} fieldConfigs 更新配置
     * @return {?} 已更新配置的筛选方案
     */
    updateControl(conditions, fieldConfigs) {
        /** @type {?} */
        let qc;
        conditions = conditions ? conditions : [];
        if (conditions.length > 0) {
            fieldConfigs.forEach((/**
             * @param {?} field
             * @return {?}
             */
            field => {
                qc = conditions.find((/**
                 * @param {?} c
                 * @return {?}
                 */
                c => c.fieldCode == field['fieldCode']));
                if (qc && qc.hasOwnProperty('visible') && field.hasOwnProperty('visible') && field['visible'] !== qc.visible) {
                    qc.visible = field['visible'];
                }
                if (qc && qc.control) {
                    for (var prop in field.control) {
                        qc.control[prop] = field.control[prop];
                    }
                }
            }));
        }
        // let qc: QueryCondition;
        // const conditions = solution.queryConditions ? solution.queryConditions : [];
        // if (conditions.length > 0) {
        //   fieldConfigs.forEach(field => {
        //     qc = conditions.find(c => c.fieldCode == field.labelCode);
        //     if (qc && qc.control) {
        //       for (var prop in field.control) {
        //         qc.control[prop] = field.control[prop]
        //       }
        //     }
        //   });
        // }
    }
    /**
     * 必填控件非空判断
     * @param {?} conditions 进行筛选操作时当前所有的筛选条件
     * @return {?}
     */
    isValid(conditions) {
        /** @type {?} */
        const errorArr = conditions.map((/**
         * @param {?} qc
         * @return {?}
         */
        qc => {
            if (qc.control.isRequired() && qc.value.isEmpty() && qc.visible) {
                return {
                    type: 'require',
                    field: qc.fieldName
                };
            }
        }));
        return errorArr.filter((/**
         * @param {?} error
         * @return {?}
         */
        error => error != null));
    }
    /**
     * 解决数值控件placeholder显示为undefined的问题
     * @private
     * @param {?} data
     * @return {?}
     */
    emptyString(data) {
        if (data === null || data === undefined) {
            return '';
        }
        return data;
    }
    /**
     * 解决jit生成代码后下拉帮助控件的displayType属性与组件api不一致的问题
     * @private
     * @param {?} data 下拉帮助控件JSON描述中的displayType配置信息
     * @return {?}
     */
    displayTypeTransform(data) {
        if (data === 'List') {
            return 'LOOKUPLIST';
        }
        return 'LOOKUPTREELIST';
    }
    /**
     * 解决数值控件赋默认值功能与最大最小值限制功能的冲突问题
     * @private
     * @param {?} condition 当前正在赋默认值的筛选条件，若是数值类型，需要提取其control对象的max属性和min属性的值
     * @param {?} value 默认值配置value对象
     * @param {?} field 默认值配置
     * @return {?} 校验最大值和最小值之后的默认值配置value对象
     */
    isNumCheck(condition, value, field) {
        /** @type {?} */
        let minValue;
        /** @type {?} */
        let maxValue;
        if (field.control.controltype == 'single-number') {
            minValue = (condition.control.min == null || condition.control.min == undefined) ? -2147483648 : condition.control.min;
            maxValue = (condition.control.max == null || condition.control.max == undefined) ? 2147483647 : condition.control.max;
            value.numValue = ((value.numValue - minValue) > 0) ? value.numValue : minValue;
            value.numValue = ((value.numValue - maxValue) < 0) ? value.numValue : maxValue;
        }
        if (field.control.controltype == 'number') {
            minValue = (condition.control.min == null || condition.control.min == undefined) ? -2147483648 : condition.control.min;
            maxValue = (condition.control.max == null || condition.control.max == undefined) ? 2147483647 : condition.control.max;
            value.startValue = ((value.startValue - minValue) > 0) ? value.startValue : minValue;
            value.startValue = ((value.startValue - maxValue) < 0) ? value.startValue : maxValue;
            value.endValue = ((value.endValue - minValue) > 0) ? value.endValue : minValue;
            value.endValue = ((value.endValue - maxValue) < 0) ? value.endValue : maxValue;
        }
        return value;
    }
    /**
     * 智能输入框控件需要弹出表单时，将表单配置JSON描述转换为弹出表单命令可接收的弹窗参数
     * @private
     * @param {?} field 配置为智能输入框控件的字段的JSON描述
     * @return {?} 弹窗参数
     */
    setInputGroupDialog(field) {
        /** @type {?} */
        let inputGroupControlData = field.control;
        /** @type {?} */
        let modalConfigData = inputGroupControlData.modalConfig;
        if (!field.id || inputGroupControlData.usageMode == 'text') {
            return undefined;
        }
        /** @type {?} */
        let dialogConfig = new DialogConfig();
        dialogConfig.modalId = field.id;
        if (modalConfigData.mapFields) {
            dialogConfig.mapFields = JSON.parse(modalConfigData.mapFields.replace(/'/g, '"'));
        }
        dialogConfig.showHeader = modalConfigData.hasOwnProperty('showHeader') ? modalConfigData.showHeader : true;
        dialogConfig.showCloseButton = modalConfigData.hasOwnProperty('showCloseButton') ? modalConfigData.showCloseButton : true;
        dialogConfig.showMaxButton = modalConfigData.hasOwnProperty('showMaxButton') ? modalConfigData.showMaxButton : true;
        dialogConfig.title = modalConfigData.hasOwnProperty('title') ? modalConfigData.title : '';
        dialogConfig.width = modalConfigData.width;
        dialogConfig.height = modalConfigData.height;
        return dialogConfig;
    }
}
SolutionService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
SolutionService.ctorParameters = () => [
    { type: NotifyService }
];

/**
 * @fileoverview added by tsickle
 * Generated from: lib/fieldconfigdialog/configdialog.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class ConfigDialogComponent {
    /**
     * @param {?} solutionService
     * @param {?} localeService
     */
    constructor(solutionService, localeService) {
        this.solutionService = solutionService;
        this.localeService = localeService;
        this.inputSelectedFileds = [];
        this.cancelEmitter = new EventEmitter();
        this.confirmEmitter = new EventEmitter();
        this.selectedIds = [];
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        if (changes.filedsDataSource && changes.filedsDataSource.currentValue) {
            this.visibleFields = this.filedsDataSource.filter((/**
             * @param {?} item
             * @return {?}
             */
            item => { return !!item.visible; }));
        }
        if (changes.inputSelectedFileds && changes.inputSelectedFileds.currentValue) {
            this.visibleSelectedFields = this.inputSelectedFileds.filter((/**
             * @param {?} item
             * @return {?}
             */
            item => { return !!item.visible; }));
            if (this.visibleSelectedFields.length) {
                this.selectedIds = this.visibleSelectedFields.map((/**
                 * @param {?} qc
                 * @return {?}
                 */
                qc => qc.id));
            }
        }
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.title = this.localeService.getValue('queryCondition.container.config');
        if (this.filedsDataSource) {
            this.visibleFields = this.filedsDataSource.filter((/**
             * @param {?} item
             * @return {?}
             */
            item => { return !!item.visible; }));
        }
    }
    /**
     * 取消
     * @return {?}
     */
    cancel() {
        this.selectedIds = this.visibleSelectedFields.map((/**
         * @param {?} qc
         * @return {?}
         */
        qc => qc.id));
        this.cancelEmitter.emit(true);
        this.multiSelectCmp.searchValue = '';
        this.dialog.close();
    }
    /**
     * 确认
     * @return {?}
     */
    confirm() {
        /** @type {?} */
        const selectedFields = [];
        /** @type {?} */
        let _fieldData;
        this.selectedIds.forEach((/**
         * @param {?} id
         * @return {?}
         */
        id => {
            /** @type {?} */
            const index = this.visibleSelectedFields.findIndex((/**
             * @param {?} field
             * @return {?}
             */
            field => field.id == id));
            if (index > -1) {
                selectedFields.push(this.visibleSelectedFields[index].fieldCode);
            }
            else {
                _fieldData = this.visibleFields.find((/**
                 * @param {?} field
                 * @return {?}
                 */
                field => field.id == id));
                _fieldData.value.clearValue();
                selectedFields.push(_fieldData.fieldCode);
            }
        }));
        this.confirmEmitter.emit(selectedFields);
        this.multiSelectCmp.searchValue = '';
        this.dialog.close();
    }
    /**
     * 重置
     * @return {?}
     */
    reset() {
    }
}
ConfigDialogComponent.decorators = [
    { type: Component, args: [{
                selector: 'app-queryconfigdialog',
                template: "<farris-dialog #dialog [buttons]=\"configDialogButtonRef\" [width]=\"699\" [height]=\"544\" [title]=\"title\">\r\n    <multi-select #searchMulti [dataSource]=\"visibleFields\" [idField]=\"'id'\" [textField]=\"'fieldName'\" [displayType]=\"'List'\" [(selectedId)]=\"selectedIds\" [showCheckbox]=\"true\">\r\n        <ng-template farrisTemplate=\"text\" let-data>\r\n            {{ data['fieldName'] }}\r\n        </ng-template>\r\n    </multi-select>\r\n</farris-dialog>\r\n<ng-template #configDialogButtonRef>\r\n    <button class=\"btn btn-primary\" (click)=\"confirm()\">{{'queryCondition.configDialog.confirm' | locale}}</button>\r\n    <button class=\"btn btn-secondary\" (click)=\"cancel()\">{{'queryCondition.configDialog.cancel' | locale}}</button>\r\n</ng-template>",
                encapsulation: ViewEncapsulation.None,
                styles: [""]
            }] }
];
/** @nocollapse */
ConfigDialogComponent.ctorParameters = () => [
    { type: SolutionService },
    { type: LocaleService }
];
ConfigDialogComponent.propDecorators = {
    inputSelectedFileds: [{ type: Input }],
    filedsDataSource: [{ type: Input }],
    cancelEmitter: [{ type: Output }],
    confirmEmitter: [{ type: Output }],
    dialog: [{ type: ViewChild, args: ['dialog',] }],
    multiSelectCmp: [{ type: ViewChild, args: ['searchMulti',] }]
};

/**
 * @fileoverview added by tsickle
 * Generated from: lib/querycondition.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class QueryConditionComponent {
    /**
     * @param {?} communicationService
     * @param {?} convertorService
     * @param {?} resolver
     * @param {?} injector
     * @param {?} modalService
     * @param {?} localeService
     */
    constructor(communicationService, convertorService, resolver, injector, modalService, localeService) {
        this.communicationService = communicationService;
        this.convertorService = convertorService;
        this.resolver = resolver;
        this.injector = injector;
        this.modalService = modalService;
        this.localeService = localeService;
        this._resetFieldConfigs = [];
        this.isControlInline = true;
        this.showCompleteLabel = false;
        this.fieldConditionsChange = new EventEmitter();
        this.localeIds = {
            'en': 'en',
            'zh-CHS': 'zh-CHS'
        };
        this.controlType = ControlType;
        this.showButton = false;
        this.fieldCodeOfClearFields = [];
        this.destroy$ = new Subject();
        // 获取ngZone
        this.ngZone = null;
        this.currentLocale = this.injector.get(LOCALE_ID);
        this.solutionService = this.injector.get(SolutionService);
        if (!this.ngZone) {
            this.ngZone = this.injector.get(NgZone, null);
        }
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set resetFieldConfigs(value) {
        if (value && value.length > 0) {
            this.solutionService.updateControlConfigState(value);
        }
        this._resetFieldConfigs = value;
    }
    /**
     * @return {?}
     */
    get resetFieldConfigs() {
        return this._resetFieldConfigs;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set selectedFieldConditions(value) {
        this._selectedFieldConditions = value;
    }
    /**
     * @return {?}
     */
    get selectedFieldConditions() {
        return this._selectedFieldConditions;
    }
    ;
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.destroy$.next();
        this.destroy$.complete();
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        if (this.currentLocale === this.localeIds['en']) {
            this.isControlInline = false;
        }
        this.selectedFieldConditions = this.selectedFieldConditions || new Array();
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
    }
    /**
     * @return {?}
     */
    ngAfterViewChecked() {
    }
    /**
     * @param {?} currentItem
     * @return {?}
     */
    hasSetMultiClass(currentItem) {
        if (currentItem.control.className && currentItem.control.className.indexOf('farris-group-multi-label') > -1) {
            return true;
        }
        return false;
    }
    /* */
    /**
     * @param {?} currentItem
     * @return {?}
     */
    getStyle(currentItem) {
        /** @type {?} */
        const defaultCondtionStyle = 'col-12 col-md-6 col-xl-3 col-el-2';
        // 设置显示标签全并且显示了折行
        // if(this.showCompleteLabel && currentItem.control.className == 'farris-group-multi-label'){
        //     return defaultCondtionStyle.concat(" farris-group-multi-label");
        // }
        /** @type {?} */
        let className = currentItem.control.className;
        className = className ? className.replace('farris-group-multi-label', '') : '';
        return className ? className : defaultCondtionStyle;
    }
    /**
     * @param {?} event
     * @return {?}
     */
    configDialogConfirm(event) {
        /** @type {?} */
        const configData = (/** @type {?} */ ((/** @type {?} */ (event))));
        /** @type {?} */
        const reConfigConditions = new Array();
        for (const data of configData) {
            /** @type {?} */
            const target = this.selectedFieldConditions.find((/**
             * @param {?} condition
             * @return {?}
             */
            condition => condition.fieldCode == data));
            if (target) {
                reConfigConditions.push(target);
            }
            else {
                reConfigConditions.push(this.fieldConfigs.find((/**
                 * @param {?} condition
                 * @return {?}
                 */
                condition => condition.fieldCode == data)));
            }
        }
        for (const condition of this.selectedFieldConditions) {
            if (!condition.visible) {
                reConfigConditions.push(condition);
            }
        }
        this.selectedFieldConditions = reConfigConditions;
        this.fieldConditionsChange.emit(this.selectedFieldConditions);
    }
    /**
     * @return {?}
     */
    openFieldConfigDialog() {
        this.configDialog.inputSelectedFileds = this.selectedFieldConditions ? this.selectedFieldConditions : [];
        this.configDialog.dialog.show();
    }
    /**
     * @param {?=} exceptRequired
     * @return {?}
     */
    resetSelectedConditionValues(exceptRequired = false) {
        return this.selectedFieldConditions.map((/**
         * @param {?} fieldCondition
         * @return {?}
         */
        fieldCondition => {
            if (exceptRequired) {
                if (!fieldCondition.control.isRequired()) {
                    fieldCondition.value.clearValue();
                }
            }
            else {
                fieldCondition.value.clearValue();
            }
            return fieldCondition;
        }));
    }
    /**
     * @return {?}
     */
    conditionChange() {
        this.fieldConditionsChange.emit(this.selectedFieldConditions);
    }
    /**
     * @param {?} conditions
     * @return {?}
     */
    confirmLabelFormat(conditions) {
        if (this.isControlInline) {
            this.labelFormat = 'farris-form-controls-inline';
            /** @type {?} */
            let hasCustom = false;
            if (conditions.length) {
                // 复选框label标签目前在框的右侧，超出宽度后下方出现滚动条，计算标签最大长度时需将其排除
                /** @type {?} */
                let noCheckBoxConditions = [];
                conditions.forEach((/**
                 * @param {?} condition
                 * @return {?}
                 */
                condition => {
                    if (condition.control.getControlType() != ControlType.BoolCheck) {
                        noCheckBoxConditions.push(condition);
                    }
                    if (condition.control['className'] && condition.control['className'] != 'farris-group-multi-label') {
                        hasCustom = true;
                    }
                }));
                this.labelFormat += hasCustom ? ' condition-is-custom' : ' condition-with-fixed';
                /** @type {?} */
                let maxLength = 0;
                if (noCheckBoxConditions.length) {
                    noCheckBoxConditions.forEach((/**
                     * @param {?} item
                     * @return {?}
                     */
                    item => {
                        maxLength = (item.fieldName.length > maxLength) ? (item.fieldName.length) : maxLength;
                    }));
                }
                //需要完整显示控件标签时，根据标签最大长度确定标签栏每行可显示的字符数
                if (this.showCompleteLabel) {
                    if (maxLength > 8) {
                        //标签超出8个字符后，设置每行最多可显示10个字符
                        this.labelFormat = this.labelFormat.concat(" f-form-label-xl");
                    }
                    else if ((maxLength < 9) && (maxLength > 6)) {
                        //标签超出6个字符、不超过8个字符时，设置每行最多可显示8个字符
                        this.labelFormat = this.labelFormat.concat(" f-form-label-lg");
                    }
                }
            }
        }
        if (this.labelFormat) {
            return this.labelFormat + (this.isControlInline && this.showCompleteLabel ? ' condition-with-complete' : '');
        }
    }
}
QueryConditionComponent.decorators = [
    { type: Component, args: [{
                selector: 'farris-querycondition',
                template: "<div class=\"row f-utils-flex-row-wrap farris-form {{confirmLabelFormat(selectedFieldConditions)}} condition-div\"  id=\"querycondition\" #queryConditionWrap>\r\n    <ng-container *ngFor=\"let currentItem of selectedFieldConditions;let i=index;\">\r\n        <app-solution-input  \r\n            [ngClass]=\"getStyle(currentItem)\"\r\n            [label-text-multi]=\"hasSetMultiClass(currentItem)\"\r\n            (conditionChange)=\"conditionChange()\"\r\n            *ngIf=\"currentItem.control.getControlType() == controlType.Text && currentItem.visible\"\r\n            [(item)]=\"selectedFieldConditions[i]\">\r\n        </app-solution-input>\r\n\r\n        <app-solution-inputgroup\r\n            [ngClass]=\"getStyle(currentItem)\"\r\n            [label-text-multi]=\"hasSetMultiClass(currentItem)\"\r\n            (conditionChange)=\"conditionChange()\"\r\n            *ngIf=\"currentItem.control.getControlType() == controlType.InputGroup && currentItem.visible\"\r\n            [(item)]=\"selectedFieldConditions[i]\">\r\n        </app-solution-inputgroup>\r\n        \r\n        <app-solution-dropdownlist\r\n            [ngClass]=\"getStyle(currentItem)\"\r\n            [label-text-multi]=\"hasSetMultiClass(currentItem)\"\r\n            [changeFields]=\"fieldCodeOfClearFields\"\r\n            (conditionChange)=\"conditionChange()\"\r\n            *ngIf=\"currentItem.control.getControlType() == controlType.DropDownList && currentItem.visible\"\r\n            [(item)]=\"selectedFieldConditions[i]\">\r\n        </app-solution-dropdownlist>\r\n        \r\n        <app-solution-smarthelp\r\n            [ngClass]=\"getStyle(currentItem)\"\r\n            [label-text-multi]=\"hasSetMultiClass(currentItem)\"\r\n            [changeFields]=\"fieldCodeOfClearFields\"\r\n            (conditionChange)=\"conditionChange()\"\r\n            *ngIf=\"currentItem.control.getControlType() == controlType.SmartHelp && currentItem.visible\"\r\n            [(item)]=\"selectedFieldConditions[i]\">\r\n        </app-solution-smarthelp>\r\n        \r\n        <app-solution-single-number\r\n            [ngClass]=\"getStyle(currentItem)\"\r\n            [label-text-multi]=\"hasSetMultiClass(currentItem)\"\r\n            [changeFields]=\"fieldCodeOfClearFields\"\r\n            (conditionChange)=\"conditionChange()\"\r\n            *ngIf=\"currentItem.control.getControlType() == controlType.SingleNumber && currentItem.visible\"\r\n            [(item)]=\"selectedFieldConditions[i]\">\r\n        </app-solution-single-number>\r\n\r\n        <app-solution-numberrange\r\n            [ngClass]=\"getStyle(currentItem)\"\r\n            [label-text-multi]=\"hasSetMultiClass(currentItem)\"\r\n            [changeFields]=\"fieldCodeOfClearFields\"\r\n            (conditionChange)=\"conditionChange()\"\r\n            *ngIf=\"currentItem.control.getControlType() == controlType.NumberRange && currentItem.visible\"\r\n            [(item)]=\"selectedFieldConditions[i]\">\r\n        </app-solution-numberrange>\r\n        \r\n        <app-solution-datepicker\r\n            [ngClass]=\"getStyle(currentItem)\"\r\n            [label-text-multi]=\"hasSetMultiClass(currentItem)\"\r\n            [changeFields]=\"fieldCodeOfClearFields\"\r\n            (conditionChange)=\"conditionChange()\"\r\n            *ngIf=\"currentItem.control.getControlType() == controlType.SingleDate && currentItem.visible\"\r\n            [(item)]=\"selectedFieldConditions[i]\"\r\n            [controlType]=\"currentItem.control.getControlType()\">\r\n        </app-solution-datepicker>\r\n        \r\n        <app-solution-datepicker\r\n            [ngClass]=\"getStyle(currentItem)\"\r\n            [label-text-multi]=\"hasSetMultiClass(currentItem)\"\r\n            [changeFields]=\"fieldCodeOfClearFields\"\r\n            (conditionChange)=\"conditionChange()\"\r\n            *ngIf=\"currentItem.control.getControlType() == controlType.DateRange && currentItem.visible\"\r\n            [(item)]=\"selectedFieldConditions[i]\"\r\n            [controlType]=\"currentItem.control.getControlType()\">\r\n        </app-solution-datepicker>\r\n\r\n        <app-solution-datepicker\r\n            [ngClass]=\"getStyle(currentItem)\"\r\n            [label-text-multi]=\"hasSetMultiClass(currentItem)\"\r\n            [changeFields]=\"fieldCodeOfClearFields\"\r\n            (conditionChange)=\"conditionChange()\"\r\n            *ngIf=\"currentItem.control.getControlType() == controlType.SingleYear && currentItem.visible\"\r\n            [(item)]=\"selectedFieldConditions[i]\"\r\n            [controlType]=\"currentItem.control.getControlType()\">\r\n        </app-solution-datepicker>\r\n        \r\n        <app-solution-datepicker\r\n            [ngClass]=\"getStyle(currentItem)\"\r\n            [label-text-multi]=\"hasSetMultiClass(currentItem)\"\r\n            [changeFields]=\"fieldCodeOfClearFields\"\r\n            (conditionChange)=\"conditionChange()\"\r\n            *ngIf=\"currentItem.control.getControlType() == controlType.SingleMonth && currentItem.visible\"\r\n            [(item)]=\"selectedFieldConditions[i]\"\r\n            [controlType]=\"currentItem.control.getControlType()\">\r\n        </app-solution-datepicker>\r\n        \r\n        <app-solution-datepicker\r\n            [ngClass]=\"getStyle(currentItem)\"\r\n            [label-text-multi]=\"hasSetMultiClass(currentItem)\"\r\n            [changeFields]=\"fieldCodeOfClearFields\"\r\n            (conditionChange)=\"conditionChange()\"\r\n            *ngIf=\"currentItem.control.getControlType() == controlType.MonthRange && currentItem.visible\"\r\n            [(item)]=\"selectedFieldConditions[i]\"\r\n            [controlType]=\"currentItem.control.getControlType()\">\r\n        </app-solution-datepicker>\r\n        \r\n        <app-solution-datepicker\r\n            [ngClass]=\"getStyle(currentItem)\"\r\n            [label-text-multi]=\"hasSetMultiClass(currentItem)\"\r\n            [changeFields]=\"fieldCodeOfClearFields\"\r\n            (conditionChange)=\"conditionChange()\"\r\n            *ngIf=\"currentItem.control.getControlType() == controlType.SingleDateTime && currentItem.visible\"\r\n            [(item)]=\"selectedFieldConditions[i]\"\r\n            [controlType]=\"currentItem.control.getControlType()\">\r\n        </app-solution-datepicker>\r\n        \r\n        <app-solution-datepicker\r\n            [ngClass]=\"getStyle(currentItem)\"\r\n            [label-text-multi]=\"hasSetMultiClass(currentItem)\"\r\n            [changeFields]=\"fieldCodeOfClearFields\"\r\n            (conditionChange)=\"conditionChange()\"\r\n            *ngIf=\"currentItem.control.getControlType() == controlType.DateTimeRange && currentItem.visible\"\r\n            [(item)]=\"selectedFieldConditions[i]\"\r\n            [controlType]=\"currentItem.control.getControlType()\">\r\n        </app-solution-datepicker>\r\n\r\n        <app-solution-combolookup\r\n            [ngClass]=\"getStyle(currentItem)\"\r\n            [label-text-multi]=\"hasSetMultiClass(currentItem)\"\r\n            [changeFields]=\"fieldCodeOfClearFields\"\r\n            (conditionChange)=\"conditionChange()\"\r\n            *ngIf=\"currentItem.control.getControlType() == controlType.ComboLookUp && currentItem.visible\"\r\n            [(item)]=\"selectedFieldConditions[i]\">\r\n        </app-solution-combolookup>\r\n\r\n        <app-solution-checkbox\r\n            [ngClass]=\"getStyle(currentItem)\"\r\n            [changeFields]=\"fieldCodeOfClearFields\"\r\n            (conditionChange)=\"conditionChange()\"\r\n            *ngIf=\"currentItem.control.getControlType() == controlType.BoolCheck && currentItem.visible\"\r\n            [(item)]=\"selectedFieldConditions[i]\">\r\n        </app-solution-checkbox>\r\n\r\n        <app-solution-radio\r\n            [ngClass]=\"getStyle(currentItem)\"\r\n            [label-text-multi]=\"hasSetMultiClass(currentItem)\"\r\n            [changeFields]=\"fieldCodeOfClearFields\"\r\n            (conditionChange)=\"conditionChange()\"\r\n            *ngIf=\"currentItem.control.getControlType() == controlType.Radio && currentItem.visible\"\r\n            [(item)]=\"selectedFieldConditions[i]\">\r\n        </app-solution-radio>\r\n    </ng-container>\r\n</div>\r\n<app-queryconfigdialog \r\n    #configDialog \r\n    [inputSelectedFileds]=\"selectedFieldConditions\" \r\n    [filedsDataSource]=\"fieldConfigs\"\r\n    (confirmEmitter)=\"configDialogConfirm($event)\">\r\n</app-queryconfigdialog>",
                encapsulation: ViewEncapsulation.None,
                providers: [CommunicationService],
                styles: [".condition-div{min-height:30px}.f-solution-radio-group .farris-checkradio-hor{flex-wrap:nowrap;overflow-x:auto}.f-solution-radio-group .farris-checkradio-hor::-webkit-scrollbar{width:6px;height:6px;background-color:#eee}.f-solution-radio-group .farris-checkradio-hor::-webkit-scrollbar-track{border-radius:0}.f-solution-radio-group .farris-checkradio-hor::-webkit-scrollbar-thumb{background-color:rgba(0,0,0,.15);-webkit-transition:.2s;transition:.2s;border-radius:6px}.f-solution-radio-group .farris-checkradio-hor::-webkit-scrollbar-thumb:hover{background-color:rgba(0,0,0,.45)}.f-solution-radio-group .farris-checkradio-hor .custom-radio{flex-shrink:0}"]
            }] }
];
/** @nocollapse */
QueryConditionComponent.ctorParameters = () => [
    { type: CommunicationService },
    { type: ConvertorService },
    { type: ComponentFactoryResolver },
    { type: Injector },
    { type: BsModalService },
    { type: LocaleService }
];
QueryConditionComponent.propDecorators = {
    fieldConfigs: [{ type: Input }],
    resetFieldConfigs: [{ type: Input }],
    isControlInline: [{ type: Input }],
    selectedFieldConditions: [{ type: Input }],
    showCompleteLabel: [{ type: Input }],
    isDisabled: [{ type: Input }],
    fieldConditionsChange: [{ type: Output }],
    configDialog: [{ type: ViewChild, args: ['configDialog',] }],
    queryConditionWrapEl: [{ type: ViewChild, args: ["queryConditionWrap",] }]
};

/**
 * @fileoverview added by tsickle
 * Generated from: lib/controlcomponent/numberrangecomponent/numberrange.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class NumberRangeComponent {
    /**
     * @param {?} solutionService
     */
    constructor(solutionService) {
        this.solutionService = solutionService;
        /**
         * 某个字段发生值变化事件时，需要同步清空的字段，可能不是当前字段
         */
        this.changeFields = [];
        this.conditionChange = new EventEmitter();
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        if (changes['changeFields'] && changes['changeFields'].currentValue && !changes['changeFields'].firstChange) {
            /** @type {?} */
            const isChange = changes['changeFields'].currentValue.some((/**
             * @param {?} field
             * @return {?}
             */
            field => field == this.item.fieldCode));
            if (isChange) {
                this.constructMultiFieldNumberRange((/** @type {?} */ (this.item.value)));
            }
        }
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.testId = this.solutionService.getGuid();
        this.canNull = true;
        this.placeholder = (this.item.placeHolder) ? (this.item.placeHolder) : (this.item.control.placeholder);
        this.beginPlaceHolder = this.item.beginPlaceHolder ? this.item.beginPlaceHolder : this.placeholder;
        this.endPlaceHolder = this.item.endPlaceHolder ? this.item.endPlaceHolder : this.placeholder;
        this.precision = this.item.control.precision;
        this.textAlign = this.item.control.textAlign;
        this.bigNumber = this.item.control.bigNumber ? this.item.control.bigNumber : false;
        if (!this.bigNumber) {
            this.min = (this.item.control.min === undefined || this.item.control.min === null) ? -2147483648 : (this.item.control.min);
            this.max = (this.item.control.max === undefined || this.item.control.max === null) ? 2147483647 : (this.item.control.max);
        }
        this.constructMultiFieldNumberRange((/** @type {?} */ (this.item.value)));
    }
    /**
     * @param {?} data
     * @return {?}
     */
    valueChange(data) {
        if (typeof data !== 'string') {
            return;
        }
        /** @type {?} */
        const dataArray = data.split("~");
        /** @type {?} */
        const start = dataArray[0] && dataArray[0].length > 0 ? dataArray[0] : null;
        /** @type {?} */
        const end = dataArray[1] && dataArray[1].length > 0 ? dataArray[1] : null;
        if (!this.bigNumber) {
            this.item.value = new NumberRangeValue({ startValue: start, endValue: end });
        }
        else {
            /** @type {?} */
            const numberRangeValue = new NumberRangeValue();
            isNaN(parseFloat(start)) ? numberRangeValue.startValue = null : numberRangeValue.startValue = parseFloat(start);
            isNaN(parseFloat(end)) ? numberRangeValue.endValue = null : numberRangeValue.endValue = parseFloat(end);
            this.item.value = numberRangeValue;
        }
        this.conditionChange.emit();
    }
    // constructNumberRange(value: NumberRangeValue): string {
    //   return "a~b".replace(/a/, value.startValue ? value.startValue.toString().trim() : "").replace(/b/, value.endValue ? value.endValue.toString().trim() : "");
    // }
    /**
     * @param {?} value
     * @return {?}
     */
    constructMultiFieldNumberRange(value) {
        // this.beginValue = value && value.startValue ? value.startValue.toString().trim() : '';
        // this.endValue = value && value.endValue ? value.endValue.toString().trim() : '';
        this.beginValue = value.startValue == null ? null : value.startValue;
        this.endValue = value.endValue == null ? null : value.endValue;
    }
    // getConditionItemStyle(field: QueryCondition, controlType: any) {
    //     return this.solutionService.getConditionItemStyle(field,controlType);
    // }
    /**
     * @param {?} field
     * @return {?}
     */
    getConditionItemTitle(field) {
        return this.solutionService.getConditionItemTitle(field);
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    beginValueChange($event) {
        this.beginValue = $event;
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    endValueChange($event) {
        this.endValue = $event;
    }
}
NumberRangeComponent.decorators = [
    { type: Component, args: [{
                selector: 'app-solution-numberrange',
                template: "<div class=\"farris-group-wrap\" id=\"{{item.id}}\">\r\n  <div class=\"form-group farris-form-group  common-group number-range-group\" [ngClass]=\"{'q-state-readonly':item.readonly}\">\r\n    <label class=\"col-form-label\" *ngIf=\"item\" title=\"{{getConditionItemTitle(item)}}\">\r\n      <span class=\"farris-label-info text-danger\" *ngIf=\"item.control.isRequired()\">*</span>\r\n      <span class=\"farris-label-text\">{{item.fieldName}}</span>\r\n    </label>\r\n    <div class=\"farris-input-wrap\">\r\n      <farris-number-range *ngIf=\"!bigNumber\"\r\n        [beginValue]=\"beginValue\"\r\n        [endValue]=\"endValue\"\r\n        [min]=\"min\"\r\n        [max]=\"max\"\r\n        (beginValueChange)=\"beginValueChange($event)\"\r\n        (endValueChange)=\"endValueChange($event)\"\r\n        (valueChange)=\"valueChange($event)\" \r\n        id=\"{{testId}}\"\r\n        [canNull]=\"canNull\"\r\n        [bigNumber]=\"bigNumber\"\r\n        [placeholder]=\"placeholder\"\r\n        [precision]=\"precision\"\r\n        [textAlign]=\"textAlign\"\r\n        [readonly]=\"item.readonly\"\r\n        [beginPlaceHolder]=\"beginPlaceHolder\"\r\n        [endPlaceHolder]=\"endPlaceHolder\">\r\n      </farris-number-range>\r\n      <farris-number-range *ngIf=\"bigNumber\"\r\n        [beginValue]=\"beginValue\"\r\n        [endValue]=\"endValue\"\r\n        (beginValueChange)=\"beginValueChange($event)\"\r\n        (endValueChange)=\"endValueChange($event)\"\r\n        (valueChange)=\"valueChange($event)\" \r\n        id=\"{{testId}}\"\r\n        [canNull]=\"canNull\"\r\n        [bigNumber]=\"bigNumber\"\r\n        [placeholder]=\"placeholder\"\r\n        [precision]=\"precision\"\r\n        [textAlign]=\"textAlign\"\r\n        [readonly]=\"item.readonly\"        \r\n        [beginPlaceHolder]=\"beginPlaceHolder\"\r\n        [endPlaceHolder]=\"endPlaceHolder\">\r\n      </farris-number-range>\r\n    </div>\r\n  </div>\r\n</div>"
            }] }
];
/** @nocollapse */
NumberRangeComponent.ctorParameters = () => [
    { type: SolutionService }
];
NumberRangeComponent.propDecorators = {
    item: [{ type: Input }],
    changeFields: [{ type: Input }],
    conditionChange: [{ type: Output, args: ['conditionChange',] }]
};

/**
 * @fileoverview added by tsickle
 * Generated from: lib/controlcomponent/input/input.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class InputComponent {
    /**
     * @param {?} solutionService
     */
    constructor(solutionService) {
        this.solutionService = solutionService;
        this.maxLength = undefined;
        this.hasError = false;
        this.conditionChange = new EventEmitter();
    }
    /**
     * @param {?} textItem
     * @return {?}
     */
    set item(textItem) {
        this._inputItem = textItem;
    }
    /**
     * @return {?}
     */
    get item() {
        return this.constructTextItem(this._inputItem);
    }
    /**
     * @param {?} textItem
     * @return {?}
     */
    constructTextItem(textItem) {
        /** @type {?} */
        const textValueObj = (/** @type {?} */ (textItem.value));
        // textValueObj.value = textValueObj.value && textValueObj.value.trim();
        textValueObj.value = textValueObj.value && textValueObj.value;
        textItem.value = textValueObj;
        return textItem;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.testId = this.solutionService.getGuid();
        this.placeholder = (this.item.placeHolder) ? (this.item.placeHolder) : (this.item.control.placeholder);
    }
    /**
     * @param {?} field
     * @return {?}
     */
    getConditionItemTitle(field) {
        return this.solutionService.getConditionItemTitle(field);
    }
    /**
     * @return {?}
     */
    onBlur() {
        if (this.hasError) {
            return;
        }
        this.conditionChange.emit();
    }
    /**
     * 是否有错误信息
     * @param {?} textControl
     * @return {?}
     */
    hasErrorInfo(textControl) {
        if (textControl.invalid && (textControl.dirty || textControl.touched) && textControl.errors.maxlength) {
            this.hasError = true;
            return true;
        }
        this.hasError = false;
        return false;
    }
}
InputComponent.decorators = [
    { type: Component, args: [{
                selector: 'app-solution-input',
                template: "<div class=\"farris-group-wrap\" id=\"{{item.id}}\">\r\n    <div class=\"form-group farris-form-group  common-group\" [ngClass]=\"{'q-state-readonly':item.readonly}\">\r\n        <label class=\"col-form-label\" *ngIf=\"item\" title=\"{{getConditionItemTitle(item)}}\">\r\n            <span class=\"farris-label-info text-danger\" *ngIf=\"item.control.isRequired()\">*</span>\r\n            <span class=\"farris-label-text\">{{item.fieldName}}</span>\r\n        </label>\r\n        <div class=\"farris-input-wrap\">\r\n            <input-group [(ngModel)]=\"item.value.value\" name=\"{{item.fieldName}}\" id=\"{{testId}}\"\r\n                (blurHandle)=\"onBlur()\" [placeholder]=\"placeholder\" [readonly]=\"item.readonly\" maxlength=\"maxLength\"\r\n                #textControl=\"ngModel\">\r\n            </input-group>\r\n            <ng-container *ngIf=\"maxLength\">\r\n                <div class=\"farris-feedback\" [class.f-state-invalid]=\"hasErrorInfo(textControl)\">\r\n                    <span class=\"f-feedback-message\">\u8BF7\u8F93\u5165\u6709\u6548\u683C\u5F0F</span>\r\n                </div>\r\n            </ng-container>\r\n        </div>\r\n    </div>\r\n</div>"
            }] }
];
/** @nocollapse */
InputComponent.ctorParameters = () => [
    { type: SolutionService }
];
InputComponent.propDecorators = {
    item: [{ type: Input }],
    conditionChange: [{ type: Output, args: ['conditionChange',] }]
};

/**
 * @fileoverview added by tsickle
 * Generated from: lib/controlcomponent/inputgroup/inputgroup.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class InputGroupComponent {
    /**
     * @param {?} solutionService
     */
    constructor(solutionService) {
        this.solutionService = solutionService;
        this.conditionChange = new EventEmitter();
        //控件内显示文本是否为弹窗返回的文本，手动输入或者手动做出修改时为false
        this.isTextFromDialog = false;
    }
    /**
     * @param {?} inputGroupItem
     * @return {?}
     */
    set item(inputGroupItem) {
        this._inputItem = inputGroupItem;
    }
    /**
     * @return {?}
     */
    get item() {
        return this.constructInputGroupItem(this._inputItem);
    }
    /**
     * @param {?} inputGroupItem
     * @return {?}
     */
    constructInputGroupItem(inputGroupItem) {
        /** @type {?} */
        const inputGroupValueObj = (/** @type {?} */ (inputGroupItem.value));
        // inputGroupValueObj.textValue = inputGroupValueObj.textValue && inputGroupValueObj.textValue.trim();
        inputGroupValueObj.textValue = inputGroupValueObj.textValue && inputGroupValueObj.textValue;
        inputGroupItem.value = inputGroupValueObj;
        return inputGroupItem;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.testId = this.solutionService.getGuid();
        this.getInputGroupBindingInfo();
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.item = null;
    }
    /**
     * @return {?}
     */
    getInputGroupBindingInfo() {
        /** @type {?} */
        const inputGroupControl = ((/** @type {?} */ (this.item.control)));
        this.usageMode = inputGroupControl.usageMode;
        if (this.usageMode == 'open-modal' || this.usageMode == 'open-remote-modal') {
            this.dialogOptions = inputGroupControl.dialogOptions;
            /*
                example of dialogOptions = {
                   modalId: "1e011720-eb0f-4c9c-82b6-6844c89b2303"
                   mapFields: {hDepartment: "Name"}
                   title: "测试标题栏"
                   width: 800
                   height: 600
                }
             */
            if (this.dialogOptions.mapFields) {
                this.textField = JSON.stringify(this.dialogOptions.mapFields).split('"')[1];
            }
        }
    }
    /**
     * @param {?} field
     * @return {?}
     */
    getConditionItemTitle(field) {
        return this.solutionService.getConditionItemTitle(field);
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onClick(event) {
        if (this.usageMode == 'text') {
            this.item.control.click();
        }
        else {
            /** @type {?} */
            const options = this.dialogOptions;
            options.handle = (/**
             * @param {?} selectedItem
             * @return {?}
             */
            (selectedItem) => {
                if (selectedItem && this.textField) {
                    this.item.value.value = selectedItem;
                    this.item.value.textValue = this.item.value.getTextValue(this.textField);
                    this.item.value.textField = this.textField;
                    this.item.value.isInputText = false;
                    this.isTextFromDialog = true;
                    this.textFormDialog = this.item.value.textValue;
                    this.onBlur();
                }
            });
            this.item.control.click({ event, options });
        }
    }
    /**
     * @return {?}
     */
    onBlur() {
        if (this.usageMode == 'text') {
            this.item.value.isInputText = true;
        }
        if (this.usageMode == 'open-modal' || this.usageMode == 'open-remote-modal') {
            if (!this.isTextFromDialog) {
                //console.log('弹窗模式下控件内文本是手动输入的');
                this.item.value.isInputText = true;
            }
            if (this.item.value.textValue != this.textFormDialog) {
                //console.log('通过弹窗选择的值已被手动修改');
                this.isTextFromDialog = false;
                this.item.value.value = [];
                this.item.value.textField = undefined;
                this.item.value.isInputText = true;
            }
        }
        this.conditionChange.emit();
    }
    /**
     * @return {?}
     */
    clearData() {
        ((/** @type {?} */ (this.item.value))).clearValue();
        this.conditionChange.emit();
    }
}
InputGroupComponent.decorators = [
    { type: Component, args: [{
                selector: 'app-solution-inputgroup',
                template: "<div class=\"farris-group-wrap\" id=\"{{item.id}}\">\r\n    <div class=\"form-group farris-form-group  common-group\"  [ngClass]=\"{'q-state-readonly':item.readonly}\">\r\n        <label class=\"col-form-label\" *ngIf=\"item\" title=\"{{getConditionItemTitle(item)}}\">\r\n            <span class=\"farris-label-info text-danger\" *ngIf=\"item.control.isRequired()\">*</span>\r\n            <span class=\"farris-label-text\">{{item.fieldName}}</span>\r\n        </label>\r\n        <div class=\"farris-input-wrap\">\r\n            <input-group \r\n                [(ngModel)]=\"item.value.textValue\" \r\n                name=\"{{item.fieldName}}\" \r\n                id=\"{{testId}}\"\r\n                [groupText]=\"item.control.groupText\"\r\n                [editable]=\"item.control.editable\"\r\n                [placeholder]=\"item.placeHolder\"\r\n                [readonly]=\"item.readonly\"\r\n                (clickHandle)=\"onClick($event)\"\r\n                (blurHandle)=\"onBlur()\"\r\n                (clear)=\"clearData()\">\r\n            </input-group>\r\n        </div>\r\n    </div>\r\n</div>"
            }] }
];
/** @nocollapse */
InputGroupComponent.ctorParameters = () => [
    { type: SolutionService }
];
InputGroupComponent.propDecorators = {
    item: [{ type: Input }],
    conditionChange: [{ type: Output, args: ['conditionChange',] }]
};

/**
 * @fileoverview added by tsickle
 * Generated from: lib/controlcomponent/smarthelp/smarthelp.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class SolutionSmartHelpComponent {
    /**
     * @param {?} solutionService
     */
    constructor(solutionService) {
        this.solutionService = solutionService;
        /**
         * 某个字段发生值变化事件时，需要同步清空的字段，可能不是当前字段
         */
        this.changeFields = [];
        this.conditionChange = new EventEmitter();
        this.mappingEmitter = new EventEmitter();
        /**
         * 每页记录数
         */
        this.pageSize = 20;
        /**
         * 可用分页记录数列表
         */
        this.pageList = [10, 20, 30, 50, 100];
        this.onBeforeOpen = (/**
         * @return {?}
         */
        () => {
            /** @type {?} */
            const t = (/** @type {?} */ (this.item.value));
            if (t && t.value) {
                /** @type {?} */
                const ids = t.value.map((/**
                 * @param {?} n
                 * @return {?}
                 */
                n => n[this.idField || 'id'])).join(',');
                this.lookup.displayValue = ids;
            }
            return of(true);
        });
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.getSmartHelpBindingInfo();
        this.testId = this.solutionService.getGuid();
        this.placeholder = (this.item.placeHolder) ? (this.item.placeHolder) : (this.item.control.placeholder);
        this.lookup.textChanged.subscribe((/**
         * @param {?} v
         * @return {?}
         */
        (v) => {
            this.textChangedHandler(v);
        }));
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        this.getSmartHelpBindingInfo();
        if (changes['changeFields'] && changes['changeFields'].currentValue && !changes['changeFields'].firstChange) {
            /** @type {?} */
            const isChange = changes['changeFields'].currentValue.some((/**
             * @param {?} field
             * @return {?}
             */
            field => field == this.item.fieldCode));
            if (isChange) {
                this.textValue = ((/** @type {?} */ (this.item.value))).textValue;
            }
        }
    }
    //ITEM：
    //control: SmartHelpContol {uri: "WuLiao.wOrgId", textField: "name", valueField: "code", mapFields: {}, idField: "id"}
    // fieldCode: "wOrgId"
    // fieldName: "所属机构"
    // id: "WuLiao.wOrgId"
    // value: SmartHelpValue {valueField: null, value: null}
    // valueType: 0
    /**
     * @return {?}
     */
    getSmartHelpBindingInfo() {
        /** @type {?} */
        const smartHelpControl = ((/** @type {?} */ (this.item.control)));
        this.uri = smartHelpControl.uri;
        this.textField = smartHelpControl.textField;
        this.idField = smartHelpControl.idField;
        this.valueField = smartHelpControl.valueField;
        this.displayType = smartHelpControl.displayType;
        this.mapFields = smartHelpControl.mapFields;
        this.context = smartHelpControl.context;
        this.preEventCmd = smartHelpControl.preEventCmd;
        this.postEventCmd = smartHelpControl.postEventCmd;
        this.enableFullTree = smartHelpControl.enableFullTree;
        this.loadTreeDataType = smartHelpControl.loadTreeDataType;
        this.singleSelect = smartHelpControl.singleSelect === false ? false : true;
        this.expandLevel = smartHelpControl.expandLevel;
        this.enableCascade = smartHelpControl.enableCascade;
        // 标题
        this.dialogTitle = smartHelpControl.dialogTitle ? smartHelpControl.dialogTitle : '';
        // 宽度
        this.dialogWidth = smartHelpControl.panelWidth;
        // 高度
        this.dialogHeight = smartHelpControl.panelHeight;
        /** @type {?} */
        const smartHelpValue = ((/** @type {?} */ (this.item.value)));
        if (smartHelpValue.textValue == 'help-text-value-null') { //旧数据兼容
            this.textValue = smartHelpValue.getTextValue(this.textField);
        }
        else {
            this.textValue = smartHelpValue.textValue;
        }
        this.nosearch = smartHelpControl.nosearch; //默认false
        this.displayFields = smartHelpControl.displayFields ? smartHelpControl.displayFields : '';
        this.displayTextSeparator = smartHelpControl.displayTextSeparator ? smartHelpControl.displayTextSeparator : '_';
        this.editable = smartHelpControl.editable;
        this.clearFields = smartHelpControl.clearFields;
        if (smartHelpControl.hasOwnProperty('pageSize') && smartHelpControl.pageSize) {
            this.pageSize = smartHelpControl.pageSize;
        }
        if (smartHelpControl.hasOwnProperty('pageList') && smartHelpControl.pageList) {
            this.pageList = smartHelpControl.pageList.split(",").map((/**
             * @param {?} item
             * @return {?}
             */
            item => { return parseInt(item); }));
        }
    }
    /**
     * @param {?} data
     * @return {?}
     */
    clearData(data) {
        ((/** @type {?} */ (this.item.value))).clearValue();
        if (this.item.control.clear) {
            this.item.control.clear();
        }
        this.conditionChange.emit();
    }
    /**
     * @param {?} field
     * @return {?}
     */
    getConditionItemTitle(field) {
        return this.solutionService.getConditionItemTitle(field);
    }
    /**
     * selectedItem
     * code: "code02"
     * id: "id02"
     * name: "机构02"
     * version: "2019-10-21T00:00:00"
     * @param {?} data
     * @return {?}
     */
    textChangedHandler(data) {
        if (this.item && this.item.value) {
            /** @type {?} */
            const helpValue = ((/** @type {?} */ (this.item.value)));
            helpValue.value = [data];
            helpValue.textValue = data;
            helpValue.isInputText = true;
            // this.textValue = helpValue.textValue;
            this.conditionChange.emit();
        }
    }
    /**
     * @param {?} selectedItem
     * @return {?}
     */
    selectedDataHandler(selectedItem) {
        //选择时触发
        /** @type {?} */
        const helpValue = ((/** @type {?} */ (this.item.value)));
        helpValue.value = this.singleSelect ? [selectedItem] : selectedItem; //单选返回对象，多选返回数组
        helpValue.valueField = this.valueField;
        helpValue.textValue = this.textValue;
        helpValue.isInputText = false;
        this.conditionChange.emit();
    }
}
SolutionSmartHelpComponent.decorators = [
    { type: Component, args: [{
                selector: 'app-solution-smarthelp',
                template: "<div class=\"farris-group-wrap\" id=\"{{item.id}}\" >\r\n    <div class=\"form-group farris-form-group common-group\" [ngClass]=\"{'q-state-readonly':item.readonly}\">\r\n        <label class=\"col-form-label\" title=\"{{getConditionItemTitle(item)}}\">\r\n            <span class=\"farris-label-info text-danger\" *ngIf=\"item.control.isRequired()\">*</span>\r\n            <span class=\"farris-label-text\">{{item.fieldName}}</span>\r\n        </label>\r\n        <div class=\"farris-input-wrap\">\r\n            <farris-lookup-grid #lookup\r\n                id=\"{{testId}}\"                \r\n                [clear-fields]=\"clearFields\"\r\n                [uri]=\"uri\"\r\n                [placeholder]=\"placeholder\"\r\n                [(ngModel)]=\"textValue\"\r\n                [textField]=\"textField\"\r\n                [valueField]=\"valueField\"\r\n                [idField]=\"idField\"\r\n                [mapFields]=\"mapFields\"\r\n                [displayType]=\"displayType\"\r\n                [title]=\"dialogTitle\"\r\n                [dialogWidth]=\"dialogWidth\"\r\n                [dialogHeight]=\"dialogHeight\"\r\n                [context]=\"context\"\r\n                [dictPicking]=\"preEventCmd\"\r\n                [dictPicked]=\"postEventCmd\"\r\n                [enableFullTree]=\"enableFullTree\"\r\n                [loadTreeDataType]=\"loadTreeDataType\"\r\n                [singleSelect]=\"singleSelect\"\r\n                [expandLevel]=\"expandLevel\"\r\n                [enableCascade]=\"enableCascade\"\r\n                [readonly]=\"item.readonly\"\r\n                [nosearch]=\"nosearch\"\r\n                [beforeOpen]=\"onBeforeOpen\"\r\n                [displayFields]=\"displayFields\"\r\n                [displayTextSeparator]=\"displayTextSeparator\"\r\n                [editable]=\"editable\"\r\n                [pageSize]=\"pageSize\"\r\n                [pageList]=\"pageList\"\r\n                [useFavorite]=\"true\"\r\n                (selectedData)=\"selectedDataHandler($event)\"\r\n                (clear)=\"clearData($event)\"\r\n            >\r\n        </farris-lookup-grid>\r\n        <!-- [singleSelect]=\"true\" -->\r\n        </div>\r\n\r\n    </div>\r\n</div>"
            }] }
];
/** @nocollapse */
SolutionSmartHelpComponent.ctorParameters = () => [
    { type: SolutionService }
];
SolutionSmartHelpComponent.propDecorators = {
    item: [{ type: Input }],
    changeFields: [{ type: Input }],
    conditionChange: [{ type: Output, args: ['conditionChange',] }],
    mappingEmitter: [{ type: Output, args: ['helpMapping',] }],
    lookup: [{ type: ViewChild, args: ['lookup',] }]
};

/**
 * @fileoverview added by tsickle
 * Generated from: lib/controlcomponent/dropdown/dropdownlist.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class DropDownListComponent {
    /**
     * @param {?} solutionService
     */
    constructor(solutionService) {
        this.solutionService = solutionService;
        /**
         * 某个字段发生值变化事件时，需要同步清空的字段，可能不是当前字段
         */
        this.changeFields = [];
        this.conditionChange = new EventEmitter();
        //下拉列表数据源
        this.dropDownListDataSource = new Array();
        //下拉列表控件内显示文本
        this.selectedItemId = '';
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.getDataSource();
        /** @type {?} */
        const initialValue = (/** @type {?} */ (this.item.value));
        initialValue.key && (this.selectedItemId = initialValue.key);
        this.testId = this.solutionService.getGuid();
        this.placeholder = (this.item.placeHolder) ? (this.item.placeHolder) : (this.item.control.placeholder);
        this.beforeShow = ((/** @type {?} */ (this.item.control))).beforeShow;
        this.beforeHide = ((/** @type {?} */ (this.item.control))).beforeHide;
        this.idField = ((/** @type {?} */ (this.item.control))).idField ? ((/** @type {?} */ (this.item.control))).idField : 'value';
        this.textField = ((/** @type {?} */ (this.item.control))).textField ? ((/** @type {?} */ (this.item.control))).textField : 'name';
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        this.getDataSource();
        if (changes['changeFields'] && changes['changeFields'].currentValue && !changes['changeFields'].firstChange) {
            /** @type {?} */
            const isChange = changes['changeFields'].currentValue.some((/**
             * @param {?} field
             * @return {?}
             */
            field => field == this.item.fieldCode));
            if (isChange) {
                this.selectedItemId = ((/** @type {?} */ (this.item.value))).key;
            }
        }
    }
    /**
     * @return {?}
     */
    getDataSource() {
        this.dropDownListDataSource = ((/** @type {?} */ (this.item.control))).enumValues;
        this.uri = ((/** @type {?} */ (this.item.control))).uri;
    }
    /**
     * @param {?} selected
     * @return {?}
     */
    selectChange(selected) {
        /** @type {?} */
        const selectedValue = selected['selections'].map((/**
         * @param {?} selection
         * @return {?}
         */
        (selection) => {
            return {
                value: this.uri ? selection[this.textField] : selection[this.idField],
                name: selection[this.textField]
            };
        }));
        /** @type {?} */
        const uriDataKey = ((/** @type {?} */ (selectedValue))).map((/**
         * @param {?} data
         * @return {?}
         */
        data => data.value)).join(",");
        this.item.value = new DropDownListValue({
            value: selectedValue,
            key: this.uri ? uriDataKey : selected['value']
        });
        this.conditionChange.emit();
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onClear(event) {
        this.item.value = new DropDownListValue();
    }
    /**
     * @param {?} field
     * @return {?}
     */
    getConditionItemTitle(field) {
        return this.solutionService.getConditionItemTitle(field);
    }
}
DropDownListComponent.decorators = [
    { type: Component, args: [{
                selector: 'app-solution-dropdownlist',
                template: "<div class=\"farris-group-wrap\" id=\"{{item.id}}\">\r\n    <div class=\"form-group farris-form-group  common-group\"  [ngClass]=\"{'q-state-readonly':item.readonly}\">\r\n    <label class=\"col-form-label\" *ngIf=\"item\" title=\"{{getConditionItemTitle(item)}}\">\r\n      <span class=\"farris-label-info text-danger\" *ngIf=\"item.control.isRequired()\">*</span>\r\n      <span class=\"farris-label-text\">{{item.fieldName}}</span>\r\n    </label>\r\n    <div class=\"farris-input-wrap\">\r\n    <farris-combo-list \r\n        [(ngModel)]=\"selectedItemId\"\r\n        [idField]=\"idField\"\r\n        [valueField]=\"idField\"\r\n        [textField]=\"textField\"\r\n        [editable]=\"false\"\r\n        [data]=\"dropDownListDataSource\"\r\n        [uri]=\"uri\"\r\n        [beforeShow]=\"beforeShow\"\r\n        [beforeHide]=\"beforeHide\"\r\n        [multiSelect]=\"item.control.multiSelect\"\r\n        [placeholder]=\"placeholder\"\r\n        [panelHeight]=\"item.control.panelHeight ? item.control.panelHeight : 'auto'\"\r\n        (valueChange)=\"selectChange($event)\"\r\n        (clear)=\"onClear($event)\" \r\n        id=\"{{testId}}\"\r\n        [readonly]=\"item.readonly\">\r\n      </farris-combo-list>\r\n    </div>\r\n  </div>\r\n</div>\r\n"
            }] }
];
/** @nocollapse */
DropDownListComponent.ctorParameters = () => [
    { type: SolutionService }
];
DropDownListComponent.propDecorators = {
    item: [{ type: Input }],
    changeFields: [{ type: Input }],
    conditionChange: [{ type: Output, args: ['conditionChange',] }]
};

/**
 * @fileoverview added by tsickle
 * Generated from: lib/controlcomponent/numbercomponent/single-number.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class SingleNumberComponent {
    /**
     * @param {?} solutionService
     */
    constructor(solutionService) {
        this.solutionService = solutionService;
        /**
         * 某个字段发生值变化事件时，需要同步清空的字段，可能不是当前字段
         */
        this.changeFields = [];
        this.conditionChange = new EventEmitter();
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        if (changes['changeFields'] && changes['changeFields'].currentValue && !changes['changeFields'].firstChange) {
            /** @type {?} */
            const isChange = changes['changeFields'].currentValue.some((/**
             * @param {?} field
             * @return {?}
             */
            field => field == this.item.fieldCode));
            if (isChange) {
                this.number = this.item.value.getOriginalValue();
            }
        }
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.number = this.item.value.getOriginalValue();
        this.testId = this.solutionService.getGuid();
        this.canNull = true;
        this.placeholder = (this.item.placeHolder) ? (this.item.placeHolder) : (this.item.control.placeholder);
        this.precision = this.item.control.precision;
        this.textAlign = this.item.control.textAlign;
        this.bigNumber = this.item.control.bigNumber ? this.item.control.bigNumber : false;
        if (!this.bigNumber) {
            this.min = (this.item.control.min === undefined || this.item.control.min === null) ? -2147483648 : (this.item.control.min);
            this.max = (this.item.control.max === undefined || this.item.control.max === null) ? 2147483647 : (this.item.control.max);
        }
    }
    /**
     * @param {?} data
     * @return {?}
     */
    valueChange(data) {
        /** @type {?} */
        const numberValue = new SingleNumberValue();
        isNaN(parseFloat(data)) ? numberValue.numValue = null : numberValue.numValue = data;
        this.item.value = numberValue;
        this.conditionChange.emit();
    }
    // getConditionItemStyle(field: QueryCondition, controlType: any) {
    //     return this.solutionService.getConditionItemStyle(field,controlType);
    // }
    /**
     * @param {?} field
     * @return {?}
     */
    getConditionItemTitle(field) {
        return this.solutionService.getConditionItemTitle(field);
    }
}
SingleNumberComponent.decorators = [
    { type: Component, args: [{
                selector: 'app-solution-single-number',
                template: "<div class=\"farris-group-wrap\" id=\"{{item.id}}\" >\r\n    <div class=\"form-group farris-form-group  common-group\" [ngClass]=\"{'q-state-readonly':item.readonly}\">\r\n        <label class=\"col-form-label\" *ngIf=\"item\" title=\"{{getConditionItemTitle(item)}}\">\r\n            <span class=\"farris-label-info text-danger\" *ngIf=\"item.control.isRequired()\">*</span>\r\n            <span class=\"farris-label-text\">{{item.fieldName}}</span>\r\n        </label>\r\n        <div class=\"farris-input-wrap\">\r\n            <farris-number-spinner *ngIf=\"!bigNumber\"\r\n                [(ngModel)]=\"number\"\r\n                (valueChange)=\"valueChange($event)\"\r\n                id=\"{{testId}}\"\r\n                [min]=\"min\"\r\n                [max]=\"max\"\r\n                [canNull]=\"canNull\"\r\n                [bigNumber]=\"bigNumber\"\r\n                [placeholder]=\"placeholder\"\r\n                [precision]=\"precision\"\r\n                [textAlign]=\"textAlign\"\r\n                [readonly]=\"item.readonly\">\r\n            </farris-number-spinner>\r\n            <farris-number-spinner *ngIf=\"bigNumber\"\r\n                [(ngModel)]=\"number\"\r\n                (valueChange)=\"valueChange($event)\"\r\n                id=\"{{testId}}\"\r\n                [canNull]=\"canNull\"\r\n                [bigNumber]=\"bigNumber\"\r\n                [placeholder]=\"placeholder\"\r\n                [precision]=\"precision\"\r\n                [textAlign]=\"textAlign\"\r\n                [readonly]=\"item.readonly\">\r\n            </farris-number-spinner>\r\n        </div>\r\n    </div>\r\n</div>"
            }] }
];
/** @nocollapse */
SingleNumberComponent.ctorParameters = () => [
    { type: SolutionService }
];
SingleNumberComponent.propDecorators = {
    item: [{ type: Input }],
    changeFields: [{ type: Input }],
    conditionChange: [{ type: Output, args: ['conditionChange',] }]
};

/**
 * @fileoverview added by tsickle
 * Generated from: lib/controlcomponent/checkbox/checkbox.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class CheckBoxComponent {
    /**
     * @param {?} injector
     */
    constructor(injector) {
        this.injector = injector;
        /**
         * 某个字段发生值变化事件时，需要同步清空的字段，可能不是当前字段
         */
        this.changeFields = [];
        this.conditionChange = new EventEmitter();
        this.solutionService = this.injector.get(SolutionService);
    }
    /**
     * @param {?} nr
     * @return {?}
     */
    set item(nr) {
        this._item = nr;
    }
    /**
     * @return {?}
     */
    get item() {
        return this._item;
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        if (changes['changeFields'] && changes['changeFields'].currentValue && !changes['changeFields'].firstChange) {
            /** @type {?} */
            const isChange = changes['changeFields'].currentValue.some((/**
             * @param {?} field
             * @return {?}
             */
            field => field == this.item.fieldCode));
            if (isChange) {
                this.checkValue = ((/** @type {?} */ (this.item.value))).getOriginalValue();
            }
        }
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.checkValue = this.item.value.getOriginalValue();
        this.controlData = (/** @type {?} */ (this.item.control));
        this.testId = this.solutionService.getGuid();
    }
    /**
     * @param {?} event
     * @return {?}
     */
    valueChanged(event) {
        //选中时返回[true], 从选中变为未选中时返回[]
        if (event.length) {
            this._item.value.setOriginalValue(event);
        }
        else {
            this._item.value.setOriginalValue([false]);
        }
        this.conditionChange.emit();
    }
    /**
     * @param {?} field
     * @return {?}
     */
    getConditionItemTitle(field) {
        return this.solutionService.getConditionItemTitle(field);
    }
}
CheckBoxComponent.decorators = [
    { type: Component, args: [{
                selector: 'app-solution-checkbox',
                template: "<div class=\"farris-group-wrap\" id=\"{{item.id}}\">\r\n    <div class=\"form-group farris-form-group  common-group qcheckbox-group\" style=\"overflow: auto;white-space: nowrap\">\r\n        <label class=\"col-form-label mr-0\" style=\"width:auto;\">\r\n            <span class=\"farris-label-info text-danger\" *ngIf=\"item.control.isRequired()\">*</span>\r\n        </label>\r\n        <!-- <div class=\"farris-input-wrap\">\r\n            <div class=\"custom-control custom-checkbox\">\r\n                <input class=\"custom-control-input\" type=\"checkbox\" id=\"item.fieldCode\" (change)=\"valueChange($event.target.checked)\" [(ngModel)]=\"item.value['value']\"/>\r\n                <label class=\"custom-control-label\" for=\"item.fieldCode\">{{item.fieldName}}</label>\r\n            </div>\r\n          <div class=\"farris-feedback valid-feedback\"></div>\r\n        </div> -->\r\n        <farris-checkboxgroup\r\n            [isStringValue]=\"controlData.isStringValue\" \r\n            [data]=\"controlData.data\" \r\n            [horizontal]=\"controlData.horizontal\" \r\n            [disable]=\"item.readonly\" \r\n            [(ngModel)]=\"checkValue\"\r\n            (changeValue)=\"valueChanged($event)\"\r\n            id=\"{{testId}}\"\r\n        ></farris-checkboxgroup>\r\n    </div>\r\n</div>"
            }] }
];
/** @nocollapse */
CheckBoxComponent.ctorParameters = () => [
    { type: Injector }
];
CheckBoxComponent.propDecorators = {
    item: [{ type: Input }],
    changeFields: [{ type: Input }],
    conditionChange: [{ type: Output, args: ['conditionChange',] }]
};

/**
 * @fileoverview added by tsickle
 * Generated from: lib/controlcomponent/radio/radio.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class RadioComponent {
    /**
     * @param {?} injector
     */
    constructor(injector) {
        this.injector = injector;
        /**
         * 某个字段发生值变化事件时，需要同步清空的字段，可能不是当前字段
         */
        this.changeFields = [];
        this.conditionChange = new EventEmitter();
        this.cls = true;
        this.solutionService = this.injector.get(SolutionService);
    }
    /**
     * @param {?} nr
     * @return {?}
     */
    set item(nr) {
        this._item = nr;
    }
    /**
     * @return {?}
     */
    get item() {
        return this._item;
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        if (changes['changeFields'] && changes['changeFields'].currentValue && !changes['changeFields'].firstChange) {
            /** @type {?} */
            const isChange = changes['changeFields'].currentValue.some((/**
             * @param {?} field
             * @return {?}
             */
            field => field == this.item.fieldCode));
            if (isChange) {
                this.radioValue = ((/** @type {?} */ (this.item.value))).getOriginalValue();
            }
        }
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.radioControl = (/** @type {?} */ (this.item.control));
        this.radioValue = ((/** @type {?} */ (this.item.value))).getOriginalValue();
        this.testId = this.solutionService.getGuid();
        this.showLabel = this.radioControl.showLabel;
    }
    /**
     * @param {?} event
     * @return {?}
     */
    valueChanged(event) {
        this._item.value.setOriginalValue(event);
        this.conditionChange.emit();
    }
    /**
     * @param {?} field
     * @return {?}
     */
    getConditionItemTitle(field) {
        return this.solutionService.getConditionItemTitle(field);
    }
}
RadioComponent.decorators = [
    { type: Component, args: [{
                selector: 'app-solution-radio',
                template: "<div class=\"farris-group-wrap\" id=\"{{item.id}}\">\r\n    <div class=\"form-group farris-form-group  common-group qradio-group\"  [ngClass]=\"{'q-state-readonly':item.readonly}\">\r\n        <label class=\"col-form-label\" *ngIf=\"item\" title=\"{{getConditionItemTitle(item)}}\">\r\n            <span class=\"farris-label-info text-danger\" *ngIf=\"item.control.isRequired()\">*</span>\r\n            <span class=\"farris-label-text\" *ngIf=\"showLabel\">{{item.fieldName}}</span>\r\n        </label>\r\n        <farris-radiogroup\r\n            class=\"f-solution-radio-group\"\r\n            [(ngModel)]=\"radioValue\"\r\n            [data]=\"radioControl.enumValues\"\r\n            [horizontal]=\"radioControl.horizontal\"\r\n            [disabled]=\"item.readonly\"\r\n            (changeValue)=\"valueChanged($event)\"\r\n            id=\"{{testId}}\"\r\n        ></farris-radiogroup>\r\n    </div>\r\n</div>"
            }] }
];
/** @nocollapse */
RadioComponent.ctorParameters = () => [
    { type: Injector }
];
RadioComponent.propDecorators = {
    item: [{ type: Input }],
    changeFields: [{ type: Input }],
    conditionChange: [{ type: Output, args: ['conditionChange',] }],
    cls: [{ type: HostBinding, args: ['class.f-solution-radio-group-wrapper',] }]
};

/**
 * @fileoverview added by tsickle
 * Generated from: lib/controlcomponent/datepicker/datepicker.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class DatePickerComponent {
    /**
     * @param {?} injector
     */
    constructor(injector) {
        this.injector = injector;
        /**
         * 某个字段发生值变化事件时，需要同步清空的字段，可能不是当前字段
         */
        this.changeFields = [];
        this.conditionChange = new EventEmitter();
        // true显示时间 false不显示
        this.showType = ShowType.all; // 显示类型，默认显示全部1；不显示日期，用于选择年月模式2；不显示日期及月份，用于选择年模式3；用于周选择4。
        // 显示类型，默认显示全部1；不显示日期，用于选择年月模式2；不显示日期及月份，用于选择年模式3；用于周选择4。
        this.maxDate = '';
        this.minDate = '';
        this.editable = false;
        this.dateRangeDatesDelimiter = '~';
        this.solutionService = this.injector.get(SolutionService);
        /** @type {?} */
        const queryconditionComponent = this.injector.get(QueryConditionComponent, null);
        if (queryconditionComponent) {
            this.destroy$ = queryconditionComponent.destroy$;
        }
        else {
            this.destroy$ = new Subject();
        }
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        if (changes['changeFields'] && changes['changeFields'].currentValue && !changes['changeFields'].firstChange) {
            /** @type {?} */
            const isChange = changes['changeFields'].currentValue.some((/**
             * @param {?} field
             * @return {?}
             */
            field => field == this.item.fieldCode));
            if (isChange) {
                if (this.dateRange) {
                    this.beginValue = this.item.value && this.item.value.startTime ? this.item.value.startTime.toString().trim() : '';
                    this.endValue = this.item.value && this.item.value.endTime ? this.item.value.endTime.toString().trim() : '';
                    this.bindValue = this.item.value.getOriginalValue();
                }
                else {
                    this.bindValue = this.item.value.getOriginalValue();
                }
            }
        }
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.testId = this.solutionService.getGuid();
        // const controlType = this.item.control.getControlType();
        switch (this.controlType) {
            case ControlType.DateRange:
                this.returnFormat = this.item.control.returnFormat ? this.item.control.returnFormat : 'yyyy-MM-dd';
                this.dateFormat = this.item.control.format ? this.item.control.format : 'yyyy-MM-dd';
                this.dateRange = true;
                break;
            case ControlType.SingleDate:
                this.returnFormat = this.item.control.returnFormat ? this.item.control.returnFormat : 'yyyy-MM-dd';
                this.dateFormat = this.item.control.format ? this.item.control.format : 'yyyy-MM-dd';
                this.dateRange = false;
                break;
            case ControlType.SingleYear:
                this.returnFormat = this.item.control.returnFormat ? this.item.control.returnFormat : 'yyyy';
                this.dateFormat = this.item.control.format ? this.item.control.format : 'yyyy';
                this.showType = ShowType.noDateAndMonth;
                this.dateRange = false;
                break;
            case ControlType.DateTimeRange:
                this.returnFormat = this.item.control.returnFormat ? this.item.control.returnFormat : 'yyyy-MM-dd HH:mm:ss';
                if (this.item.control.enableCustomFormat) {
                    // 使用自定义格式
                    this.dateFormat = this.item.control.format ? this.item.control.format : 'yyyy-MM-dd HH:mm:ss';
                }
                else {
                    // 未启用自定义格式
                    this.dateFormat = this.item.control.format ? this.item.control.format : 'yyyy-MM-dd';
                    this.dateFormat = this.dateFormat + ' HH:mm:ss';
                }
                this.showTime = true;
                this.dateRange = true;
                break;
            case ControlType.SingleMonth:
                this.returnFormat = this.item.control.returnFormat ? this.item.control.returnFormat : 'yyyy-MM';
                this.dateFormat = this.item.control.format ? this.item.control.format : 'yyyy-MM';
                this.showType = ShowType.noDate;
                this.dateRange = false;
                break;
            case ControlType.MonthRange:
                this.returnFormat = this.item.control.returnFormat ? this.item.control.returnFormat : 'yyyy-MM';
                this.dateFormat = this.item.control.format ? this.item.control.format : 'yyyy-MM';
                this.showType = ShowType.noDate;
                this.dateRange = true;
                break;
            case ControlType.SingleDateTime:
                this.returnFormat = this.item.control.returnFormat ? this.item.control.returnFormat : 'yyyy-MM-dd HH:mm:ss';
                if (this.item.control.enableCustomFormat) {
                    // 使用自定义格式
                    this.dateFormat = this.item.control.format ? this.item.control.format : 'yyyy-MM-dd HH:mm:ss';
                }
                else {
                    // 未启用自定义格式
                    this.dateFormat = this.item.control.format ? this.item.control.format : 'yyyy-MM-dd';
                    this.dateFormat = this.dateFormat + ' HH:mm:ss';
                }
                this.showTime = true;
                this.dateRange = false;
                break;
        }
        // 更新条件
        this.updateParamsByCondition();
        this.placeholder = this.item.placeHolder ? this.item.placeHolder : this.item.control.placeholder;
        if (this.dateRange) {
            this.beginValue = this.item.value && this.item.value.startTime ? this.item.value.startTime.toString().trim() : '';
            this.endValue = this.item.value && this.item.value.endTime ? this.item.value.endTime.toString().trim() : '';
            this.beginPlaceHolder = this.item.beginPlaceHolder ? this.item.beginPlaceHolder : this.placeholder;
            this.endPlaceHolder = this.item.endPlaceHolder ? this.item.endPlaceHolder : this.placeholder;
            this.bindValue = this.item.value.getOriginalValue();
        }
        else {
            this.bindValue = this.item.value.getOriginalValue();
        }
        if (this.item.control.weekSelect && this.controlType == ControlType.DateRange) {
            this.showType = ShowType.selectWeek;
        }
        // 
        this.solutionService.getControlConfigState().pipe(takeUntil(this.destroy$)).subscribe((/**
         * @param {?} simpleConditions
         * @return {?}
         */
        (simpleConditions) => {
            //简单条件
            /** @type {?} */
            let findSimpleCondition = simpleConditions.find((/**
             * @param {?} item
             * @return {?}
             */
            item => item['fieldCode'] == this.item['fieldCode']));
            if (findSimpleCondition) {
                this.updateParamsByCondition(findSimpleCondition);
            }
        }));
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
    }
    /**
     * @private
     * @param {?=} condition
     * @return {?}
     */
    updateParamsByCondition(condition = null) {
        /** @type {?} */
        let conditionControl = null;
        conditionControl = condition ? condition.control : this.item.control;
        switch (this.controlType) {
            case ControlType.SingleYear:
                this.maxDate = conditionControl.hasOwnProperty('maxDate') ? conditionControl['maxDate'] : this.maxDate;
                this.minDate = conditionControl.hasOwnProperty('minDate') ? conditionControl['minDate'] : this.minDate;
                break;
        }
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onDateChange(event) {
        this.item.value.setOriginalValue({
            formatted: event.returnFormatted,
            delimiter: this.dateRangeDatesDelimiter
        });
        this.conditionChange.emit();
    }
    /**
     * @param {?} field
     * @return {?}
     */
    getConditionItemTitle(field) {
        return this.solutionService.getConditionItemTitle(field);
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    beginValueChange($event) {
        // this.beginValue = $event;
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    endValueChange($event) {
        // this.endValue = $event;
    }
}
DatePickerComponent.decorators = [
    { type: Component, args: [{
                selector: 'app-solution-datepicker',
                template: "<div class=\"farris-group-wrap\" id=\"{{item.id}}\">\r\n    <div class=\"form-group farris-form-group  common-group\"  [ngClass]=\"{'q-state-readonly':item.readonly,'datepicker-range-group':dateRange}\">\r\n        <label class=\"col-form-label\" *ngIf=\"item\" title=\"{{getConditionItemTitle(item)}}\">\r\n            <span class=\"farris-label-info text-danger\" *ngIf=\"item.control.isRequired()\">*</span>\r\n            <span class=\"farris-label-text\">{{item.fieldName}}</span>\r\n        </label>\r\n        <div class=\"farris-input-wrap\">\r\n            <farris-datepicker *ngIf=\"!dateRange\"\r\n                [(ngModel)]=\"bindValue\"\r\n                [dateRange]=\"dateRange\"\r\n                [placeholder]=\"placeholder\"\r\n                [returnFormat]=\"returnFormat\"\r\n                [dateFormat]=\"dateFormat\"\r\n                [editable]=\"editable\"\r\n                [showType]=\"showType\"\r\n                [showTime]=\"showTime\"\r\n                [readonly]=\"item.readonly\"\r\n                (valueChange)=\"onDateChange($event)\"\r\n                [maxDate]=\"maxDate\"\r\n                [minDate]=\"minDate\"\r\n                id=\"{{testId}}\"\r\n            >\r\n            </farris-datepicker>\r\n            <farris-datepicker *ngIf=\"dateRange\"\r\n                [dateRange]=\"dateRange\"\r\n                [placeholder]=\"placeholder\"      \r\n                [beginPlaceholder]=\"beginPlaceHolder\"\r\n                [endPlaceholder]=\"endPlaceHolder\"\r\n                [returnFormat]=\"returnFormat\"\r\n                [dateFormat]=\"dateFormat\"\r\n                [editable]=\"editable\"\r\n                [showType]=\"showType\"\r\n                [showTime]=\"showTime\"\r\n                [readonly]=\"item.readonly\"\r\n                [(ngModel)]=\"bindValue\"\r\n                (valueChange)=\"onDateChange($event)\"\r\n                id=\"{{testId}}\"\r\n            >\r\n            </farris-datepicker>\r\n        </div>\r\n    </div>\r\n</div>\r\n"
            }] }
];
/** @nocollapse */
DatePickerComponent.ctorParameters = () => [
    { type: Injector }
];
DatePickerComponent.propDecorators = {
    item: [{ type: Input }],
    controlType: [{ type: Input }],
    changeFields: [{ type: Input }],
    conditionChange: [{ type: Output, args: ['conditionChange',] }]
};

/**
 * @fileoverview added by tsickle
 * Generated from: lib/controlcomponent/combolookup/combolookup.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class ComboLookUpComponent {
    /**
     * @param {?} solutionService
     */
    constructor(solutionService) {
        this.solutionService = solutionService;
        /**
         * 某个字段发生值变化事件时，需要同步清空的字段，可能不是当前字段
         */
        this.changeFields = [];
        this.conditionChange = new EventEmitter();
        this.selectedValues = "";
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.getComboLookUpBindingInfo();
        this.testId = this.solutionService.getGuid();
        this.placeholder = (this.item.placeHolder) ? (this.item.placeHolder) : (this.item.control.placeholder);
        this.autoWidth = false;
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        this.getComboLookUpBindingInfo();
        if (changes['changeFields'] && changes['changeFields'].currentValue && !changes['changeFields'].firstChange) {
            /** @type {?} */
            const isChange = changes['changeFields'].currentValue.some((/**
             * @param {?} field
             * @return {?}
             */
            field => field == this.item.fieldCode));
            if (isChange) {
                this.textValue = ((/** @type {?} */ (this.item.value))).textValue;
            }
        }
    }
    /**
     * @param {?} data
     * @return {?}
     */
    valueChangeHandler(data) {
        /** @type {?} */
        const helpValue = ((/** @type {?} */ (this.item.value)));
        helpValue.value = data.selections;
        helpValue.valueField = this.valueField;
        helpValue.textValue = helpValue.getTextValue(this.textField);
        this.textValue = helpValue.textValue;
        this.conditionChange.emit();
    }
    /**
     * @return {?}
     */
    getComboLookUpBindingInfo() {
        /** @type {?} */
        const comboLookUpControl = ((/** @type {?} */ (this.item.control)));
        this.uri = comboLookUpControl.uri;
        this.idField = comboLookUpControl.idField;
        this.valueField = comboLookUpControl.valueField;
        this.textField = comboLookUpControl.textField;
        this.mapFields = comboLookUpControl.mapFields;
        this.displayType = comboLookUpControl.displayType;
        this.preEventCmd = comboLookUpControl.preEventCmd;
        this.postEventCmd = comboLookUpControl.postEventCmd;
        this.multiSelect = comboLookUpControl.singleSelect === true ? false : true;
        this.panelWidth = comboLookUpControl.panelWidth ? comboLookUpControl.panelWidth : 300;
        this.panelHeight = comboLookUpControl.panelHeight ? comboLookUpControl.panelHeight : 300;
        /** @type {?} */
        const comboLookUpValue = ((/** @type {?} */ (this.item.value)));
        if (comboLookUpValue.textValue == 'help-text-value-null') { //旧数据兼容
            this.textValue = comboLookUpValue.getTextValue(this.textField);
        }
        else {
            this.textValue = comboLookUpValue.textValue;
        }
        if (comboLookUpValue && comboLookUpValue.value) {
            this.selectedValues = (comboLookUpValue.value || []).map((/**
             * @param {?} n
             * @return {?}
             */
            n => n[this.idField])).join(',');
        }
    }
    /**
     * @param {?} data
     * @return {?}
     */
    clearData(data) {
        ((/** @type {?} */ (this.item.value))).clearValue();
        this.conditionChange.emit();
    }
    /**
     * @param {?} field
     * @return {?}
     */
    getConditionItemTitle(field) {
        return this.solutionService.getConditionItemTitle(field);
    }
}
ComboLookUpComponent.decorators = [
    { type: Component, args: [{
                selector: 'app-solution-combolookup',
                template: "<div class=\"farris-group-wrap\" id=\"{{item.id}}\">\r\n    <div class=\"form-group farris-form-group common-group \"  [ngClass]=\"{'q-state-readonly':item.readonly}\">\r\n        <label class=\"col-form-label\" *ngIf=\"item\" title=\"{{getConditionItemTitle(item)}}\">\r\n            <span class=\"farris-label-info text-danger\" *ngIf=\"item.control.isRequired()\">*</span>\r\n            <span class=\"farris-label-text\">{{item.fieldName}}</span>\r\n        </label>\r\n        <div class=\"farris-input-wrap\">\r\n            <farris-combo-lookup *ngIf=\"item\"\r\n                [uri]=\"uri\"\r\n                [placeholder]=\"placeholder\"\r\n                [(ngModel)]=\"textValue\"\r\n                [idField]=\"idField\"\r\n                [valueField]=\"valueField\"\r\n                [textField]=\"textField\"\r\n                [mapFields]=\"mapFields\"\r\n                [displayType]=\"displayType\"\r\n                [multiSelect]=\"multiSelect\"\r\n                [selectedValues]=\"selectedValues\"\r\n                [beforeShow]=\"preEventCmd\"\r\n                [beforeHide]=\"postEventCmd\"\r\n                (valueChange)=\"valueChangeHandler($event)\"\r\n                (clear)=\"clearData($event)\"\r\n                [autoWidth]=\"autoWidth\"\r\n                [panelWidth]=\"panelWidth\"\r\n                [panelHeight]=\"panelHeight\"\r\n                [readonly]=\"item.readonly\"\r\n                id=\"{{testId}}\"\r\n            >\r\n        </farris-combo-lookup>\r\n        </div>\r\n    </div>\r\n</div>"
            }] }
];
/** @nocollapse */
ComboLookUpComponent.ctorParameters = () => [
    { type: SolutionService }
];
ComboLookUpComponent.propDecorators = {
    item: [{ type: Input }],
    changeFields: [{ type: Input }],
    conditionChange: [{ type: Output, args: ['conditionChange',] }]
};

/**
 * @fileoverview added by tsickle
 * Generated from: lib/directives/clear-fields.directive.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class ClearFieldsDirective {
    /**
     * @param {?} ngCtrl
     * @param {?} qcc
     * @param {?} inject
     */
    constructor(ngCtrl, qcc, inject) {
        this.ngCtrl = ngCtrl;
        this.qcc = qcc;
        this.inject = inject;
        this.clearFields = '';
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        if (this.clearFields && this.ngCtrl) {
            this.ngCtrl.valueChanges.subscribe((/**
             * @param {?} v
             * @return {?}
             */
            (v) => {
                this.qcc.fieldCodeOfClearFields = [];
                this.clearFields.split(',').forEach((/**
                 * @param {?} n
                 * @return {?}
                 */
                n => {
                    /** @type {?} */
                    const visibleConditions = this.qcc.selectedFieldConditions.filter((/**
                     * @param {?} condition
                     * @return {?}
                     */
                    condition => { return !!condition.visible; }));
                    /** @type {?} */
                    const conditionItem = visibleConditions.find((/**
                     * @param {?} c
                     * @return {?}
                     */
                    c => c.fieldCode === n));
                    if (conditionItem) {
                        this.qcc.fieldCodeOfClearFields.push(n);
                        conditionItem.value.clearValue();
                    }
                }));
            }));
        }
    }
}
ClearFieldsDirective.decorators = [
    { type: Directive, args: [{
                selector: '[clear-fields]'
            },] }
];
/** @nocollapse */
ClearFieldsDirective.ctorParameters = () => [
    { type: NgControl, decorators: [{ type: Optional }, { type: Self }] },
    { type: QueryConditionComponent },
    { type: Injector }
];
ClearFieldsDirective.propDecorators = {
    clearFields: [{ type: Input, args: ['clear-fields',] }]
};

/**
 * @fileoverview added by tsickle
 * Generated from: lib/directives/label-text-multi.directive.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class LabelTextMultiDirective {
    /**
     * @param {?} el
     * @param {?} injector
     */
    constructor(el, injector) {
        this.el = el;
        this.injector = injector;
        this.multiCls = 'farris-group-multi-label';
        this._enableMulti = false;
        // 获取ngZone
        this.ngZone = null;
        if (!this.ngZone) {
            this.ngZone = this.injector.get(NgZone, null);
        }
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set enableMulti(value) {
        this._enableMulti = value;
        this.judgeMulti();
    }
    /**
     * @return {?}
     */
    get enableMulti() {
        return this._enableMulti;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
    }
    /**
     * @return {?}
     */
    judgeMulti() {
        if (this._enableMulti) {
            this.ngZone.runOutsideAngular((/**
             * @return {?}
             */
            () => {
                setTimeout((/**
                 * @return {?}
                 */
                () => {
                    /** @type {?} */
                    let textEl = this.el.nativeElement.querySelector('.farris-label-text');
                    if (!textEl) {
                        return;
                    }
                    // 超出
                    if (textEl.clientWidth < textEl.scrollWidth) {
                        this.el.nativeElement.className = this.el.nativeElement.className + ' ' + this.multiCls;
                    }
                    else {
                        this.el.nativeElement.className = this.el.nativeElement.className.replace(this.multiCls, '');
                    }
                }), 20);
            }));
        }
    }
}
LabelTextMultiDirective.decorators = [
    { type: Directive, args: [{
                selector: '[label-text-multi]'
            },] }
];
/** @nocollapse */
LabelTextMultiDirective.ctorParameters = () => [
    { type: ElementRef },
    { type: Injector }
];
LabelTextMultiDirective.propDecorators = {
    enableMulti: [{ type: Input, args: ['label-text-multi',] }]
};

/**
 * @fileoverview added by tsickle
 * Generated from: lib/querycondition.module.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class QueryConditionModule {
}
QueryConditionModule.decorators = [
    { type: NgModule, args: [{
                imports: [
                    CommonModule,
                    FormsModule, ReactiveFormsModule,
                    FarrisDialogModule,
                    LayoutModule,
                    LookupModule,
                    // FarrisInputModule,
                    MultiSelectModule,
                    FieldGroupModule,
                    InputGroupModule,
                    FDropdownDirectiveTypeModule,
                    LoadingModule.forRoot(),
                    NotifyModule.forRoot(),
                    FarrisDatePickerModule,
                    LocaleModule,
                    ComboListModule,
                    NumberSpinnerModule,
                    FarrisFormsModule,
                    ComboLookupModule
                ],
                declarations: [
                    QueryConditionComponent,
                    ConfigDialogComponent,
                    DatePickerComponent,
                    NumberRangeComponent,
                    SolutionSmartHelpComponent,
                    InputComponent,
                    DropDownListComponent,
                    SingleNumberComponent,
                    CheckBoxComponent,
                    ComboLookUpComponent,
                    RadioComponent,
                    InputGroupComponent,
                    ClearFieldsDirective,
                    LabelTextMultiDirective
                ],
                entryComponents: [
                    ConfigDialogComponent,
                ],
                providers: [
                    SolutionService,
                    NotifyService,
                    ConvertorService
                ],
                bootstrap: [QueryConditionComponent],
                exports: [
                    QueryConditionComponent,
                    ConfigDialogComponent,
                    DatePickerComponent,
                    NumberRangeComponent,
                    SolutionSmartHelpComponent,
                    InputComponent,
                    DropDownListComponent,
                    SingleNumberComponent,
                    CheckBoxComponent,
                    ComboLookUpComponent,
                    RadioComponent,
                    InputGroupComponent
                ]
            },] }
];

/**
 * @fileoverview added by tsickle
 * Generated from: lib/entity/querysolutionvo.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * 查询方案实体类
 */
class QuerySolutionVo {
    constructor() {
        /**
         * 是否默认查询方案
         * 初始时，为false
         */
        this.isDefault = false;
        this.isChanged = false;
        this.extendId = 'query-scheme-1';
    }
}
/**
 * 查询方案实体类序列化与反序列化器
 */
class QuerySolutionVoConvertor {
    /**
     * 序列化
     * @param {?} obj 查询方案实体
     * @return {?}
     */
    convertJObject(obj) {
        /** @type {?} */
        let querySolutionVo = (/** @type {?} */ (obj));
        /** @type {?} */
        let jobj = new Object();
        jobj["id"] = querySolutionVo.id;
        jobj["belongId"] = querySolutionVo.belongId;
        jobj["code"] = querySolutionVo.code;
        jobj["name"] = querySolutionVo.name;
        jobj["isSystem"] = querySolutionVo.isSystem;
        jobj["isDefault"] = querySolutionVo.isDefault;
        jobj["type"] = querySolutionVo.type;
        jobj["extendId"] = querySolutionVo.extendId;
        jobj["extendInfo"] = querySolutionVo.extendInfo;
        if (querySolutionVo.queryConditions && querySolutionVo.queryConditions.length > 0) {
            /** @type {?} */
            let jArray = [];
            /** @type {?} */
            let convertor = new QueryConditionConvert();
            querySolutionVo.queryConditions.forEach((/**
             * @param {?} element
             * @return {?}
             */
            element => {
                jArray.push(convertor.convertJObject(element));
            }));
            //向服务端发送数据时，发送query condition list的json string
            jobj["queryConditionString"] = JSON.stringify(jArray);
        }
        return jobj;
    }
    /**
     * 反序列化(初始化)
     * @param {?} jobj 查询方案序列化后的Object
     * @return {?}
     */
    initFromJobject(jobj) {
        /** @type {?} */
        let querySolutionVo = new QuerySolutionVo();
        querySolutionVo.id = jobj["id"];
        querySolutionVo.code = jobj["code"];
        querySolutionVo.name = jobj["name"];
        querySolutionVo.belongId = jobj["belongId"];
        querySolutionVo.isSystem = jobj["isSystem"];
        querySolutionVo.isDefault = jobj["isDefault"];
        querySolutionVo.type = jobj.hasOwnProperty('type') ? jobj["type"] : '';
        querySolutionVo.extendId = jobj.hasOwnProperty('extendId') ? jobj["extendId"] : "";
        querySolutionVo.queryConditions = new Array();
        //服务器端返回的query condition list实际是 json string
        /** @type {?} */
        const queryConditionString = jobj["queryConditionString"];
        if (queryConditionString) {
            /** @type {?} */
            const conditionJarry = JSON.parse(queryConditionString);
            /** @type {?} */
            let convertor = new QueryConditionConvert();
            conditionJarry.forEach((/**
             * @param {?} element
             * @return {?}
             */
            element => {
                querySolutionVo.queryConditions.push(convertor.initFromJobject(element));
            }));
        }
        return querySolutionVo;
    }
    /**
     * 从缓存中取回的JSON数据需要转化
     * 从大写转换到小写条件
     * @param {?} jobj
     * @return {?}
     */
    formatFromJobject(jobj) {
        /** @type {?} */
        let queryConditions = new Array();
        /** @type {?} */
        let conditionJarry;
        if (typeof jobj == 'string') {
            conditionJarry = JSON.parse(jobj);
        }
        else {
            conditionJarry = jobj;
        }
        /** @type {?} */
        let convertor = new QueryConditionConvert();
        conditionJarry.forEach((/**
         * @param {?} element
         * @return {?}
         */
        element => {
            queryConditions.push(convertor.initFromJobject(element));
        }));
        return queryConditions;
    }
    /**
     * 存入缓存中
     * 从大写转换到小写条件
     * @param {?} jobj
     * @return {?}
     */
    formatConvertJObject(jobj) {
        /** @type {?} */
        let queryConditions = [];
        /** @type {?} */
        let convertor = new QueryConditionConvert();
        jobj.forEach((/**
         * @param {?} element
         * @return {?}
         */
        element => {
            queryConditions.push(convertor.convertJObject(element));
        }));
        return queryConditions;
    }
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/entity/querysolutionextendvo.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class QuerySolutionExtendVo {
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/entity/comparetype.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @enum {number} */
const CompareType = {
    /**
     * 等于
     */
    // Equal=1,
    Equal: 0,
    /**
     * 大于
     */
    GreaterThan: 2,
    /**
     * 大于或等于
     */
    GreaterThanOrEqual: 3,
    /**
     * 小于
     */
    LessThan: 4,
    /**
     * 小于或等于
     */
    LessThanOrEqual: 5,
    /**
     * 之间
     */
    // BetWeen=6
    Like: 6,
};
CompareType[CompareType.Equal] = 'Equal';
CompareType[CompareType.GreaterThan] = 'GreaterThan';
CompareType[CompareType.GreaterThanOrEqual] = 'GreaterThanOrEqual';
CompareType[CompareType.LessThan] = 'LessThan';
CompareType[CompareType.LessThanOrEqual] = 'LessThanOrEqual';
CompareType[CompareType.Like] = 'Like';

/**
 * @fileoverview added by tsickle
 * Generated from: lib/entity/fieldconfig/fieldconfig.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * 字段配置
 */
class FieldConfig {
    /**
     * @param {?} qc
     */
    constructor(qc) {
        this.visible = true;
        this.id = qc.id;
        this.labelCode = qc.fieldCode;
        this.name = qc.fieldName;
    }
}

/**
 * @fileoverview added by tsickle
 * Generated from: public-api.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * Generated from: farris-component-querycondition.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { QueryConditionModule, QueryConditionComponent, QuerySolutionVo, QuerySolutionExtendVo, QueryCondition, CompareType, ValueType, FieldConfig, ControlType, DateRangeControl, DropDownListControl, EnumBoolValue, EnumType, EnumIntegerValue, EnumStringValue, NumberRangeControl, SmartHelpContol, TextControl, InputGroupControl, DateRangeValue, DropDownListValue, NumberRangeValue, SmartHelpValue, TextValue, InputGroupValue, SolutionService, QuerySolutionVoConvertor, ConvertorService, SingleDateValue, SingleNumberValue, SingleDateControl, SingleNumberControl, SingleYearValue, SingleYearControl, CheckBoxControl, CheckBoxValue, SingleMonthControl, SingleMonthValue, MonthRangeControl, MonthRangeValue, SingleDateTimeControl, SingleDateTimeValue, ComboLookUpControl, ComboLookUpValue, RadioControl, RadioValue, CheckBoxComponent as ɵi, ComboLookUpComponent as ɵj, DatePickerComponent as ɵc, DropDownListComponent as ɵg, InputComponent as ɵf, InputGroupComponent as ɵl, SingleNumberComponent as ɵh, NumberRangeComponent as ɵd, RadioComponent as ɵk, SolutionSmartHelpComponent as ɵe, ClearFieldsDirective as ɵm, LabelTextMultiDirective as ɵn, ConfigDialogComponent as ɵb, CommunicationService as ɵa };

//# sourceMappingURL=farris-component-querycondition.js.map