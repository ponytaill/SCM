import * as tslib_1 from "tslib";
import { Context } from '../context/index';
import { BindingDataFactory } from '../binding-data';
var AppContext = /** @class */ (function (_super) {
    tslib_1.__extends(AppContext, _super);
    /**
     * 构造函数
     */
    function AppContext(injector, eventBus, repositoryManager, bindingDataManager, viewModelContextManager) {
        var _this = _super.call(this) || this;
        _this.injector = injector;
        _this.eventBus = eventBus;
        _this.repositoryManager = repositoryManager;
        _this.bindingDataManager = bindingDataManager;
        _this.viewModelContextManager = viewModelContextManager;
        return _this;
    }
    /**
     * 注册FrameContext
     */
    AppContext.prototype.regViewModelContext = function (viewModelContext) {
        var repository = viewModelContext.repository;
        var repositoryName = repository.name;
        // Repository
        if (this.repositoryManager.ifRepositoryExits(repositoryName) === false) {
            this.repositoryManager.regRepository(repositoryName, repository);
        }
        // BindingData
        if (this.bindingDataManager.ifBindingDataExits(repositoryName) === false) {
            var bindingData = BindingDataFactory.createFromRepository(repository, '/');
            this.bindingDataManager.regBindingData(repositoryName, bindingData);
        }
        // 考虑路由再次进入的时候，AppContext没有被注销，但Component被再次构造的场景
        this.viewModelContextManager.regContext(viewModelContext);
    };
    return AppContext;
}(Context));
export { AppContext };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXBwX2NvbnRleHQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZmFycmlzL21vYmlsZS1kZXZraXQvIiwic291cmNlcyI6WyJsaWIvYXBwL2FwcF9jb250ZXh0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFRQSxPQUFPLEVBQUUsT0FBTyxFQUFFLE1BQU0sa0JBQWtCLENBQUM7QUFDM0MsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFPckQ7SUFBeUIsc0NBQU87SUFFOUI7O09BRUc7SUFDSCxvQkFDUyxRQUFrQixFQUNsQixRQUFxQixFQUNyQixpQkFBb0MsRUFDcEMsa0JBQXNDLEVBQ3RDLHVCQUFnRDtRQUx6RCxZQU9FLGlCQUFPLFNBQ1I7UUFQUSxjQUFRLEdBQVIsUUFBUSxDQUFVO1FBQ2xCLGNBQVEsR0FBUixRQUFRLENBQWE7UUFDckIsdUJBQWlCLEdBQWpCLGlCQUFpQixDQUFtQjtRQUNwQyx3QkFBa0IsR0FBbEIsa0JBQWtCLENBQW9CO1FBQ3RDLDZCQUF1QixHQUF2Qix1QkFBdUIsQ0FBeUI7O0lBR3pELENBQUM7SUFFRDs7T0FFRztJQUNJLHdDQUFtQixHQUExQixVQUEyQixnQkFBa0M7UUFFM0QsSUFBTSxVQUFVLEdBQUcsZ0JBQWdCLENBQUMsVUFBVSxDQUFDO1FBQy9DLElBQU0sY0FBYyxHQUFHLFVBQVUsQ0FBQyxJQUFJLENBQUM7UUFFdkMsYUFBYTtRQUNiLElBQUksSUFBSSxDQUFDLGlCQUFpQixDQUFDLGlCQUFpQixDQUFDLGNBQWMsQ0FBQyxLQUFLLEtBQUssRUFBRTtZQUN0RSxJQUFJLENBQUMsaUJBQWlCLENBQUMsYUFBYSxDQUFDLGNBQWMsRUFBRSxVQUFVLENBQUMsQ0FBQztTQUNsRTtRQUVELGNBQWM7UUFDZCxJQUFJLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxrQkFBa0IsQ0FBQyxjQUFjLENBQUMsS0FBSyxLQUFLLEVBQUU7WUFDeEUsSUFBTSxXQUFXLEdBQUcsa0JBQWtCLENBQUMsb0JBQW9CLENBQUMsVUFBVSxFQUFFLEdBQUcsQ0FBQyxDQUFDO1lBQzdFLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxjQUFjLENBQUMsY0FBYyxFQUFFLFdBQVcsQ0FBQyxDQUFDO1NBQ3JFO1FBRUQsaURBQWlEO1FBQ2pELElBQUksQ0FBQyx1QkFBdUIsQ0FBQyxVQUFVLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztJQUM1RCxDQUFDO0lBRUgsaUJBQUM7QUFBRCxDQUFDLEFBdENELENBQXlCLE9BQU8sR0FzQy9CO0FBRUQsT0FBTyxFQUFFLFVBQVUsRUFBRSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXHJcbiAqIOW6lOeUqOS4iuS4i+aWh1xyXG4gKiBAYXV0aG9yIFdpdHQ8aml3dEBpbnNwdXIuY29tPlxyXG4gKiBAdG9kb1xyXG4gKiAx44CBcGFybmV05ZKMQXBwQ29udGV4dE1hbmFnZXLmmK/lkKblv4XopoHvvJ/mjInnkIbor7TlsLHmmK/lupTor6XpmpTnprvkuIrkuIvmlofvvIzooajljZXkuYvpl7TpgJrov4fkuovku7bpgJrorq/ov5vooYzkuqTkupLvvJtcclxuICovXHJcbmltcG9ydCB7IEluamVjdG9yIH0gZnJvbSAnLi4vY29yZS9pbmRleCc7XHJcbmltcG9ydCB7IFZpZXdNb2RlbENvbnRleHQgfSBmcm9tICcuLi92aWV3LW1vZGVsL2luZGV4JztcclxuaW1wb3J0IHsgQ29udGV4dCB9IGZyb20gJy4uL2NvbnRleHQvaW5kZXgnO1xyXG5pbXBvcnQgeyBCaW5kaW5nRGF0YUZhY3RvcnkgfSBmcm9tICcuLi9iaW5kaW5nLWRhdGEnO1xyXG5pbXBvcnQgeyBWaWV3TW9kZWxDb250ZXh0TWFuYWdlciB9IGZyb20gJy4vdmlld19tb2RlbF9jb250ZXhfbWFuYWdlcic7XHJcbmltcG9ydCB7IFJlcG9zaXRvcnlNYW5hZ2VyIH0gZnJvbSAnLi9yZXBvc2l0b3J5X21hbmFuZ2VyJztcclxuaW1wb3J0IHsgQmluZGluZ0RhdGFNYW5hZ2VyIH0gZnJvbSAnLi9iaW5kaW5nX2RhdGFfbWFuYWdlcic7XHJcbmltcG9ydCB7IEFwcEV2ZW50QnVzIH0gZnJvbSAnLi9hcHBfZXZlbnRCdXMnO1xyXG5cclxuXHJcbmNsYXNzIEFwcENvbnRleHQgZXh0ZW5kcyBDb250ZXh0IHtcclxuXHJcbiAgLyoqXHJcbiAgICog5p6E6YCg5Ye95pWwXHJcbiAgICovXHJcbiAgY29uc3RydWN0b3IoXHJcbiAgICBwdWJsaWMgaW5qZWN0b3I6IEluamVjdG9yLFxyXG4gICAgcHVibGljIGV2ZW50QnVzOiBBcHBFdmVudEJ1cyxcclxuICAgIHB1YmxpYyByZXBvc2l0b3J5TWFuYWdlcjogUmVwb3NpdG9yeU1hbmFnZXIsXHJcbiAgICBwdWJsaWMgYmluZGluZ0RhdGFNYW5hZ2VyOiBCaW5kaW5nRGF0YU1hbmFnZXIsXHJcbiAgICBwdWJsaWMgdmlld01vZGVsQ29udGV4dE1hbmFnZXI6IFZpZXdNb2RlbENvbnRleHRNYW5hZ2VyLFxyXG4gICkge1xyXG4gICAgc3VwZXIoKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOazqOWGjEZyYW1lQ29udGV4dFxyXG4gICAqL1xyXG4gIHB1YmxpYyByZWdWaWV3TW9kZWxDb250ZXh0KHZpZXdNb2RlbENvbnRleHQ6IFZpZXdNb2RlbENvbnRleHQpOiB2b2lkIHtcclxuXHJcbiAgICBjb25zdCByZXBvc2l0b3J5ID0gdmlld01vZGVsQ29udGV4dC5yZXBvc2l0b3J5O1xyXG4gICAgY29uc3QgcmVwb3NpdG9yeU5hbWUgPSByZXBvc2l0b3J5Lm5hbWU7XHJcblxyXG4gICAgLy8gUmVwb3NpdG9yeVxyXG4gICAgaWYgKHRoaXMucmVwb3NpdG9yeU1hbmFnZXIuaWZSZXBvc2l0b3J5RXhpdHMocmVwb3NpdG9yeU5hbWUpID09PSBmYWxzZSkge1xyXG4gICAgICB0aGlzLnJlcG9zaXRvcnlNYW5hZ2VyLnJlZ1JlcG9zaXRvcnkocmVwb3NpdG9yeU5hbWUsIHJlcG9zaXRvcnkpO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIEJpbmRpbmdEYXRhXHJcbiAgICBpZiAodGhpcy5iaW5kaW5nRGF0YU1hbmFnZXIuaWZCaW5kaW5nRGF0YUV4aXRzKHJlcG9zaXRvcnlOYW1lKSA9PT0gZmFsc2UpIHtcclxuICAgICAgY29uc3QgYmluZGluZ0RhdGEgPSBCaW5kaW5nRGF0YUZhY3RvcnkuY3JlYXRlRnJvbVJlcG9zaXRvcnkocmVwb3NpdG9yeSwgJy8nKTtcclxuICAgICAgdGhpcy5iaW5kaW5nRGF0YU1hbmFnZXIucmVnQmluZGluZ0RhdGEocmVwb3NpdG9yeU5hbWUsIGJpbmRpbmdEYXRhKTtcclxuICAgIH1cclxuXHJcbiAgICAvLyDogIPomZHot6/nlLHlho3mrKHov5vlhaXnmoTml7blgJnvvIxBcHBDb250ZXh05rKh5pyJ6KKr5rOo6ZSA77yM5L2GQ29tcG9uZW506KKr5YaN5qyh5p6E6YCg55qE5Zy65pmvXHJcbiAgICB0aGlzLnZpZXdNb2RlbENvbnRleHRNYW5hZ2VyLnJlZ0NvbnRleHQodmlld01vZGVsQ29udGV4dCk7XHJcbiAgfVxyXG5cclxufVxyXG5cclxuZXhwb3J0IHsgQXBwQ29udGV4dCB9O1xyXG4iXX0=