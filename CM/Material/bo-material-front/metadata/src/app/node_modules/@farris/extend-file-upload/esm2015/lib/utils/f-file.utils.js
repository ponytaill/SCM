/**
 * @fileoverview added by tsickle
 * Generated from: lib/utils/f-file.utils.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { UploadStatus } from '../model';
/** @type {?} */
const isObject = (/**
 * @param {?} value
 * @return {?}
 */
value => typeof value === 'object' && value !== null);
const ɵ0 = isObject;
/** @type {?} */
const isArray = (/**
 * @param {?} value
 * @return {?}
 */
value => Array.isArray(value));
const ɵ1 = isArray;
// 暂时用不到
/** @type {?} */
const deepCloneObject = (/**
 * @param {?} src
 * @return {?}
 */
(src) => {
    if (!isObject(src))
        return src;
    /** @type {?} */
    const target = isArray(src) ? [] : {};
    for (const key in src) {
        if (!src.hasOwnProperty(key))
            continue;
        /** @type {?} */
        const v = src[key];
        target[key] = v && isObject(v) ? deepCloneObject(v) : v;
    }
    return target;
});
const ɵ2 = deepCloneObject;
/** @type {?} */
const humanizeBytes = (/**
 * @param {?} bytes
 * @return {?}
 */
(bytes) => {
    if (bytes === 0) {
        return '0 Byte';
    }
    /** @type {?} */
    const k = 1024;
    /** @type {?} */
    const sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB', 'PB'];
    /** @type {?} */
    const i = Math.floor(Math.log(bytes) / Math.log(k));
    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
});
const ɵ3 = humanizeBytes;
/** @type {?} */
const generateId = (/**
 * @return {?}
 */
() => {
    return Math.random().toString(36).substring(7);
});
const ɵ4 = generateId;
/** @type {?} */
const makeUploadFile = (/**
 * @param {?} file
 * @param {?} index
 * @return {?}
 */
(file, index) => {
    return {
        fileIndex: index,
        id: generateId(),
        name: file.name,
        size: file.size,
        type: file.type,
        form: new FormData(),
        progress: {
            status: UploadStatus.Queue,
            data: {
                percentage: 0,
                speed: 0,
                speedHuman: `${humanizeBytes(0)}/s`,
                startTime: null,
                endTime: null,
                eta: null,
                etaHuman: null
            }
        },
        lastModifiedDate: new Date(file.lastModified),
        sub: undefined,
        nativeFile: file
    };
});
const ɵ5 = makeUploadFile;
/** @type {?} */
const allMineTypes = {
    '.pdf': 'application/pdf',
    '.gif': 'image/gif',
    '.png': 'image/png',
    '.txt': 'text/plain',
    '.htm': 'text/html',
    '.html': 'text/html',
    '.jpe': 'image/jpeg',
    '.jpeg': 'image/jpeg',
    '.jpg': 'image/jpeg',
    '.js': 'text/javascript,application/javascript',
    '.json': 'application/json',
    '.pps': 'application/vnd.ms-powerpoint',
    '.ppt': 'application/vnd.ms-powerpoint',
    '.doc': 'application/msword',
    '.xml': 'text/xml,application/xml',
    '.zip': 'aplication/zip',
    '.xlsx': 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',
    '.wps': 'application/vnd.ms-works',
    '.3gpp': 'audio/3gpp, video/3gpp',
    '.ac3': 'audio/ac3',
    '.asf': 'allpication/vnd.ms-asf',
    '.au': 'audio/basic',
    '.css': 'text/css',
    '.csv': 'text/csv',
    '.dot': 'application/msword',
    '.dtd': 'application/xml-dtd',
    '.dwg': 'image/vnd.dwg',
    '.dxf': 'image/vnd.dxf',
    '.jp2': 'image/jp2',
    '.mp2': 'audio/mpeg, video/mpeg',
    '.mp3': ' audio/mpeg',
    '.mp4': 'audio/mp4, video/mp4',
    '.mpeg': 'video/mpeg',
    '.mpg': 'video/mpeg',
    '.mpp': 'application/vnd.ms-project',
    '.ogg': 'application/ogg, audio/ogg',
    '.pot': 'application/vnd.ms-powerpoint',
    '.rtf': 'application/rtf,text/rtf',
    '.svf': 'image/vnd.svf',
    '.tif': 'image/tiff',
    '.tiff': 'image/tiff',
    '.wdb': 'application/vnd.ms-works',
    '.xhtml': 'application/xhtml+xml',
    '.xlc': 'application/vnd.ms-excel',
    '.xlm': 'application/vnd.ms-excel',
    '.xls': 'application/vnd.ms-excel',
    '.xlt': 'application/vnd.ms-excel',
    '.xlw': 'application/vnd.ms-excel'
};
/** @type {?} */
const findMineTypeBySuffix = (/**
 * @param {?} suffix
 * @return {?}
 */
(suffix) => {
    if (allMineTypes.hasOwnProperty(suffix)) {
        return allMineTypes[suffix];
    }
    return '';
});
const ɵ6 = findMineTypeBySuffix;
/** @type {?} */
const changeUploadFileToFileExtend = (/**
 * @param {?} files
 * @return {?}
 */
(files) => {
    // 如果是数组
    /** @type {?} */
    let result = [];
    files.forEach((/**
     * @param {?} file
     * @return {?}
     */
    file => {
        /** @type {?} */
        let preExtend = (/** @type {?} */ ({ id: '', name: '', size: 0, type: '', extend: null, extendStatus: 0, extendHeaders: null }));
        for (let resultProp in preExtend) {
            /** @type {?} */
            let tempProp = resultProp.replace('extend', 'response');
            if (file.hasOwnProperty(tempProp)) {
                preExtend[resultProp] = file[tempProp];
            }
        }
        result.push(preExtend);
    }));
    return result;
});
const ɵ7 = changeUploadFileToFileExtend;
/** @type {?} */
export const FFileUtils = {
    isObject,
    isArray,
    deepCloneObject,
    humanizeBytes,
    makeUploadFile,
    findMineTypeBySuffix,
    changeUploadFileToFileExtend
};
export { ɵ0, ɵ1, ɵ2, ɵ3, ɵ4, ɵ5, ɵ6, ɵ7 };
//# sourceMappingURL=data:application/json;base64,