import * as ValidatorJS from 'validator';
import { ValidationTypes } from './validation_types';
import { ValidationExecutor } from './validation_executor';
import { ValidationUtils } from './validation_utils';
import { DateUtil } from '../../utils/date_util';
import { TranslateService } from '../../i18n/translate_service';
import { BigNumber } from 'bignumber.js';
/**
 * 校验实体实例对象数据
 */
export class Validator {
    constructor() {
        this.validatorJs = ValidatorJS.default;
    }
    /**
     * 验证实例对象中数据是否合法
     * @param object 待校验的实例对象
     * @param propertyName 待校验实例对象属性名称，为空则验证实例对象中所有带有验证规则的属性
     */
    // tslint:disable-next-line: max-line-length
    validate(object, propertyName, value, externalRules, index, frameContext) {
        const validationErrors = [];
        const executor = new ValidationExecutor(this);
        executor.execute(object, value, validationErrors, propertyName, index, externalRules, null, frameContext);
        return Promise.all(executor.awaitingPromises).then(() => {
            const errors = executor.stripEmptyErrors(validationErrors);
            this.sortValidationErrors(errors);
            return this.buildErrors(errors);
        });
    }
    /**
     * 校验信息排序（为了兼容树形表）
     * @param validationErrors 验证信息数组
     */
    sortValidationErrors(validationErrors) {
        // 如果存在无序号的信息则不排序
        let sortable = true;
        validationErrors.forEach(info => {
            if (info.children && info.children.length > 1) {
                this.sortValidationErrors(info.children);
            }
            if (typeof info.index !== "number") {
                sortable = false;
            }
        });
        if (sortable) {
            validationErrors.sort((a, b) => a.index - b.index);
        }
    }
    /**
     * 执行校验
     * @param object
     * @param propertyName
     * @param value
     * @param externalRules
     * @param index
     * @param frameContext
     * @param ignoreAsyncValidateRules
     * @returns
     */
    verify(object, propertyName, value, externalRules, index, frameContext, ignoreAsyncValidateRules = false) {
        const validationErrors = [];
        const executor = new ValidationExecutor(this);
        executor.execute(object, value, validationErrors, propertyName, index, externalRules, null, frameContext);
        if (executor.awaitingPromises && executor.awaitingPromises.length > 0 && ignoreAsyncValidateRules === false) {
            return Promise.all(executor.awaitingPromises).then(() => {
                const errors = executor.stripEmptyErrors(validationErrors);
                const result = this.buildErrors(errors);
                return result;
            });
        }
        else {
            const errors = executor.stripEmptyErrors(validationErrors);
            return this.buildErrors(errors);
        }
    }
    /**
     * 验证实体属性元数据中设置的校验规则是否合法
     * @param object 实例对象
     * @param value 待校验的值
     * @param validateRule 验证规则
     */
    validateValueByMetadata(object, value, validateRule, isMultLanguageField, currentRowId) {
        const validType = validateRule.type;
        let constraintsToValidate = [];
        if (validateRule.constraints) {
            constraintsToValidate = validateRule.constraints.map(param => {
                if (typeof param === 'function') {
                    return param(object, value);
                }
                return param;
            });
        }
        else {
            validateRule.constraints = [];
        }
        if (ValidationTypes.isValidType(validType)) {
            if (validType === ValidationTypes.MAXVALUE) {
                const rule = constraintsToValidate[0];
                if (this.isDateString(value) || this.isDate(value) || this.isDateString(rule) || this.isDate(rule)) {
                    // 如果日期值不存在，则不判断大小
                    if (!value) {
                        return true;
                    }
                    if (value.indexOf('~') !== -1) {
                        // 不对日期区间进行校验
                        return true;
                    }
                    return this[ValidationTypes.MAX_DATE](DateUtil.parse(value), isMultLanguageField, new Date(constraintsToValidate[0]));
                }
                else {
                    return this[ValidationTypes.MAXVALUE](value, isMultLanguageField, constraintsToValidate[0]);
                }
            }
            else if (validType === ValidationTypes.MINVALUE) {
                // 如果是null或undefined，直接返回true
                if (constraintsToValidate[0] === null || constraintsToValidate[0] === undefined) {
                    return true;
                }
                if (this.isDateString(value) || this.isDate(value)) {
                    if (constraintsToValidate[0] === 0) {
                        return true;
                    }
                    return this[ValidationTypes.MIN_DATE](DateUtil.parse(value), isMultLanguageField, DateUtil.parse(constraintsToValidate[0]));
                }
                else if (this.isNumber(value)) {
                    return this[ValidationTypes.MIN](value, isMultLanguageField, constraintsToValidate[0]);
                }
            }
            else {
                return this[validType](value, isMultLanguageField, ...constraintsToValidate);
            }
        }
        else {
            if (typeof validateRule.eval === 'function') {
                const bindingPath = validateRule.bindingPath;
                const bindingPaths = bindingPath.split('/').filter(p => p);
                let fieldName = validateRule.field;
                if (bindingPaths.length !== 0) {
                    const prefix = bindingPaths.join('/');
                    fieldName = `${prefix}/${fieldName.split('.').filter(p => p).join('/')}`;
                }
                const options = { patch: { [fieldName]: value } };
                options.currentRows = [];
                const parentEntityListPaths = object && typeof object['getEntityListPath'] === 'function' && object.getEntityListPath();
                if (parentEntityListPaths.length === 4) {
                    const childrenList = parentEntityListPaths.slice(1, 3).reverse();
                    options.currentRows.push({ bindingPath: childrenList[1], primaryValue: childrenList[0].split(':')[1] });
                }
                if (currentRowId) {
                    if (validateRule.bindingPath.split('/').filter(p => p).length !== 0) {
                        const primaryValue = object && typeof object['getMainEntityPrimaryValue'] === 'function' && object.getMainEntityPrimaryValue();
                        options.currentRows.push({ bindingPath: '/', primaryValue: primaryValue });
                    }
                    options.currentRow = { bindingPath: validateRule.bindingPath, primaryValue: currentRowId };
                }
                else {
                    const primaryValue = object && typeof object['getMainEntityPrimaryValue'] === 'function' && object.getMainEntityPrimaryValue();
                    options.currentRows.push({ bindingPath: '/', primaryValue: primaryValue });
                }
                const result = validateRule.eval(options);
                if (validateRule.type === "require" /* Require */) {
                    const isValid = this.required(value, isMultLanguageField);
                    if (result) {
                        return isValid;
                    }
                    else {
                        return true;
                    }
                }
                else {
                    return result;
                }
            }
        }
        return true;
    }
    buildErrors(errors) {
        const msg = new Set(ValidationUtils.createDetailedErrorMessage(errors));
        const newMsg = [];
        msg.forEach(v => {
            newMsg.push(v);
        });
        return {
            isValid: errors.length === 0,
            errors,
            message: newMsg.join('')
        };
    }
    /** 自定义验证 */
    customValidation(value, comparison) {
        return comparison;
    }
    isEmptyValue(value) {
        const result = value === '' || value === null || value === undefined
            || value === '0001-01-01' || value === '0001-01-01 00:00:00' || value === '0001-01-01T00:00:00';
        return result;
    }
    /** 必填项 */
    required(value, isMultLanguageField) {
        if (isMultLanguageField) {
            const currentLanguage = TranslateService.getCurrentLanguage();
            if (Object.keys(value).length < 1) {
                return false;
            }
            // 如果能够获取到当前语言，那么当前语言对应的输入不能为空
            if (currentLanguage) {
                return !!value[currentLanguage];
            }
            // 如果当前语言为空，那么必填要求至少有一个输入
            // const allEmpty = Object.values(value).every((v: any) => !v || v.length < 1); // .filter((v: any) => !v || v.length < 1);
            // if (allEmpty) {
            //   return false;
            // }
            return true;
        }
        if (typeof value === 'object' && value !== null) {
            if (!Object.keys(value).length) {
                return false;
            }
            value = Object.values(value)[0];
        }
        // tslint:disable: max-line-length
        return value !== '' && value !== null && value !== undefined
            && value !== '0001-01-01' && value !== '0001-01-01 00:00:00' && value !== '0001-01-01T00:00:00';
    }
    /** 判断两个值是否相等 */
    equals(value, comparison) {
        return value === comparison;
    }
    /**
     * 检查 value 是否不等于参照值
     * @param value 要检查的值
     * @param comparison 对比参照值
     */
    notEquals(value, comparison) {
        return value !== comparison;
    }
    /**
     * 判断value 是否为数字
     * @param value 要检查的值
     * @param options 验证选项
     */
    isNumber(value, options = {}) {
        if (value === Infinity || value === -Infinity) {
            return options.allowInfinity;
        }
        if (Number.isNaN(value)) {
            return options.allowNaN;
        }
        return Number.isFinite(value);
    }
    /** 判断value是否为整数 */
    isInt(value) {
        return Number.isInteger(value);
    }
    /** 是否为浮点类型 */
    isFloat(value) {
        if (this.isNumber(value) || this.isNumberString(value)) {
            return this.validatorJs.isFloat(value);
        }
        return false;
    }
    /**
     * 检查给定的value 是否布尔值
     */
    isBoolean(value) {
        return value instanceof Boolean || typeof value === 'boolean';
    }
    /**
     * 检查给定的value 是否为字符串
     */
    isString(value) {
        return value instanceof String || typeof value === 'string';
    }
    /**
     * 检查给定的value 是否为日期
     */
    isDate(value) {
        return value instanceof Date && !isNaN(value.getTime());
    }
    /**
     * 检查给定的value 是否为日期字符串
     */
    isDateString(value) {
        const regex = /\d{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])(T|\s?)?(([0-2]\d:[0-5]\d)?(:[0-5]\d(?:\.\d+)))?(?:Z|\+[0-2]\d(?:\:[0-5]\d)?)?/g;
        return this.isString(value) && regex.test(value) && this.validatorJs.toDate(value);
    }
    /** 判断value 的长度是否在允许的最小值 和最大值之间 */
    length(value, min, max, isMultLanguageField) {
        return typeof value === 'string' && this.validatorJs.isLength(value, min, max);
    }
    /**
     * 检查给定的value的长度是否符合设定的最小值
     * @param value 待检查的字符串
     * @param min 最小长度
     */
    minLength(value, isMultLanguageField, min) {
        if (isMultLanguageField) {
            // const currentLanguage = TranslateService.getCurrentLanguage();
            if (typeof value === 'object') {
                const hasInvalidLangs = Object.values(value).filter((v) => v && v.length < min);
                if (hasInvalidLangs && hasInvalidLangs.length > 0) {
                    return false;
                }
            }
            // if (currentLanguage) {
            //   return value[currentLanguage] ? value[currentLanguage].length > min : true;
            // }
            // 如果无法获取当前语言，则只要有一种语言的输入长度大于最小长度即可。
            // const hasValidLangs = Object.values(value).filter((v: any) => v && v.length > min);
            // if (hasValidLangs.length > 0) {
            //   return true;
            // }
            // return false;
            return true;
        }
        if (value && typeof value !== 'string') {
            value = value.toString();
        }
        return !value || (typeof value === 'string' && this.length(value, min));
    }
    /**
     * 检查给定的value的长度是否符合设定的最大值
     * @param value 待检查的字符串
     * @param max 最大长度
     */
    maxLength(value, isMultLanguageField, max) {
        if (isMultLanguageField) {
            // const currentLanguage = TranslateService.getCurrentLanguage();
            // if (currentLanguage) {
            //   return value[currentLanguage] ? value[currentLanguage].length < max : true;
            // }
            if (typeof value === 'object') {
                const hasInvalidLangs = Object.values(value).filter((v) => v && v.length > max);
                if (hasInvalidLangs.length > 0) {
                    return false;
                }
            }
            return true;
        }
        if (typeof value === 'object') {
            for (const key in value) {
                if (value.hasOwnProperty(key)) {
                    const element = value[key];
                    if (typeof element === 'string' && !this.length(value[key], 0, max)) {
                        return false;
                    }
                }
            }
            return true;
        }
        if (value && typeof value !== 'string') {
            value = value.toString();
        }
        return !value || (typeof value === 'string' && this.length(value, 0, max));
    }
    /** 检查value的值是否在 最大值与最小值之间 */
    range(value, isMultLanguageField, min, max) {
        return typeof value === 'number' && this.isNumber(min) && this.isNumber(max) && value >= min && value <= max;
    }
    /**
     * 日期类型的值是否在某个区间
     * @param value value
     * @param min 最小值
     * @param max 最大值
     */
    dateRange(value, isMultLanguageField, rule, type) {
        // 2010~2020|04~05|03 11:00:00~05 12:00:00
        if (!value) {
            return true;
        }
        if (type === 'maxValue' || type === 'maxDate') {
            if (this.isYearRange(value) || this.isMonthOrDayRange(value)) {
                return this.maxValue(parseInt(this.getRangeValue(value, 1)), isMultLanguageField, parseInt(rule.split(' ')[0]));
            }
            else if (this.isDayTimeRange(value)) {
                return true;
            }
        }
        else if (type === 'minValue' || type === 'minDate') {
            if (this.isYearRange(value) || this.isMonthOrDayRange(value)) {
                return this.maxValue(parseInt(this.getRangeValue(value, 0)), isMultLanguageField, parseInt(rule.split(' ')[0]));
            }
            else if (this.isDayTimeRange(value)) {
                return true;
            }
        }
        return false;
    }
    getRangeValue(value, position, splitor = '~') {
        return value.split(splitor)[position];
    }
    isDateRange(value) {
        if (typeof value !== 'string') {
            value = value.toString();
        }
        return /(\d{4}|\d{2})/.test(value);
    }
    /**
     * 是否年度区间
     * @param value value
     */
    isYearRange(value) {
        if (typeof value !== 'string') {
            value = value.toString();
        }
        return /^\d{4}~\d{4}$/.test(value);
    }
    /**
     * 是否为年月区间
     * @param value value
     */
    isYearMonthRange(value) {
        if (typeof value !== 'string') {
            value = value.toString();
        }
        return /^\d{4}-\d{2}~\d{4}-\d{2}$/.test(value);
    }
    /**
     * 是否为月或天的区间
     * @param value value
     */
    isMonthOrDayRange(value) {
        if (typeof value !== 'string') {
            value = value.toString();
        }
        return /^[0|1|2|3]\d{1}~[0|1|2|3]\d{1}$/.test(value);
    }
    /**
     * 是否为天+时间的区间
     * @param value value
     */
    isDayTimeRange(value) {
        if (typeof value !== 'string') {
            value = value.toString();
        }
        return /^[0|1|2|3]\d{1} \d{2}:\d{2}:\d{2}~[0|1|2|3]\d{1} \d{2}:\d{2}:\d{2}$/.test(value);
    }
    /**
     * Checks if the first number is greater than second.
     */
    min(num, isMultLanguageField, min) {
        return typeof num === 'number' && typeof min === 'number' && num >= min;
    }
    /**
     * 最小值验证
     */
    minValue(num, isMultLanguageField, min) {
        // 如果值不存在，则不进行最小值的判断
        if (num === null || num === undefined) {
            return true;
        }
        // 按照大数处理
        if (typeof num === 'string' && num.match(/^(-?\d+)(\.\d+)?$/g)) {
            const value = new BigNumber(num);
            const maxValue = new BigNumber(min);
            return value.isGreaterThanOrEqualTo(maxValue);
        }
        return typeof num === 'number' && typeof min === 'number' && num >= min;
    }
    /**
     * Checks if the first number is less than second.
     */
    max(num, isMultLanguageField, max) {
        // 如果值不存在，则不进行最小值的判断
        if (num === null || num === undefined) {
            return true;
        }
        return typeof num === 'number' && typeof max === 'number' && num <= max;
    }
    /**
     * 最大值验证
     */
    maxValue(num, isMultLanguageField, max) {
        // 如果值不存在，则不进行最小值的判断
        if (num === null || num === undefined) {
            return true;
        }
        // 按照大数处理
        if (typeof num === 'string' && num.match(/^(-?\d+)(\.\d+)?$/g)) {
            const value = new BigNumber(num);
            const maxValue = new BigNumber(max);
            return value.isLessThanOrEqualTo(maxValue);
        }
        return typeof num === 'number' && typeof max === 'number' && num <= max;
    }
    /**
     * Checks if the value is a date that's after the specified date.
     */
    minDate(date, isMultLanguageField, minDate) {
        if (!date) {
            return true;
        }
        return date && date.getTime() >= minDate.getTime();
    }
    /**
     * Checks if the value is a date that's before the specified date.
     */
    maxDate(date, isMultLanguageField, maxDate) {
        // 如果值不存在，则不进行最小值的判断
        if (date === null || date === undefined) {
            return true;
        }
        return date && date.getTime() <= maxDate.getTime();
    }
    /**
     * Checks if a string is a boolean.
     * If given value is not a string, then it returns false.
     */
    isBooleanString(value) {
        return typeof value === 'string' && this.validatorJs.isBoolean(value);
    }
    /**
     * Checks if the string is numeric.
     * If given value is not a string, then it returns false.
     */
    isNumberString(value) {
        return typeof value === 'string' && this.validatorJs.isNumeric(value);
    }
    /**
     * Checks if the string contains the seed.
     * If given value is not a string, then it returns false.
     */
    contains(value, isMultLanguageField, seed) {
        return typeof value === 'string' && this.validatorJs.contains(value, seed);
    }
    /**
     * Checks if the string does not contain the seed.
     * If given value is not a string, then it returns false.
     */
    notContains(value, isMultLanguageField, seed) {
        return typeof value === 'string' && !this.validatorJs.contains(value, seed);
    }
    /**
     * Checks if the string is an email.
     * If given value is not a string, then it returns false.
     */
    isEmail(value) {
        return typeof value === 'string' && this.validatorJs.isEmail(value);
    }
    /**
     * Checks if the string is valid JSON (note: uses JSON.parse).
     * If given value is not a string, then it returns false.
     */
    isJSON(value) {
        return typeof value === 'string' && this.validatorJs.isJSON(value);
    }
    /**
     * Checks if the string is lowercase.
     * If given value is not a string, then it returns false.
     */
    isLowercase(value) {
        return typeof value === 'string' && this.validatorJs.isLowercase(value);
    }
    /**
     * Checks if the string is uppercase.
     * If given value is not a string, then it returns false.
     */
    isUppercase(value) {
        return typeof value === 'string' && this.validatorJs.isUppercase(value);
    }
    /**
     * 验证字符串是否包含非法字符
     * @param value 验证的字符串
     * @param someChars 非法字符。如：#￥%@$
     */
    exclude(value, isMultLanguageField, someChars) {
        const arrChar = someChars.split('');
        let counter = 0;
        arrChar.forEach(val => {
            if (this.contains(value, isMultLanguageField, val)) {
                counter++;
            }
        });
        return counter === 0;
    }
    /**
     * 自定义正则验证
     * @param value 待验证的字符串
     * @param pattern 正则表达式
     */
    matches(value, isMultLanguageField, pattern) {
        value = (value === null || value === undefined) ? '' : value.toString();
        if (value === '') {
            return true;
        }
        return this.validatorJs.matches(value, pattern);
    }
}
//# sourceMappingURL=data:application/json;base64,