{"version":3,"sources":["ng://@farris/ui-common/date/lib/myDateConverter.ts","ng://@farris/ui-common/date/lib/date-helper.service.ts","ng://@farris/ui-common/date/lib/date-helper.module.ts"],"names":["MyDateConverter","prototype","makePattern","code","_this","this","replace","$0","$1","regexes","RegExp","getMonthByName","monthname","MONTHNAMES_LOOKUP","String","slice","toLowerCase","getWeekdayByName","dayname","DAYNAMES_LOOKUP","zeroPad","num","digits","length","create","date","Date","now","a","arguments","Object","toString","call","pattern","ms","obj","match","regex","fn","i","patterns","parse","isNaN","NaN","MONTHNAMES","split","jan","feb","mar","apr","may","jun","jul","aug","sep","oct","nov","dec","ABBR_MONTHNAMES","DAYNAMES","sun","mon","tue","wed","thu","fri","sat","ABBR_DAYNAMES","YEAR","MONTH","MONTH2","MONTHNAME","DAYNAME","DAY","DAY2","TIMEZONE","H24","MIN","SEC","MS","H12","AMPM","UNIT","m","month","day","parseInt","d","setMilliseconds","setHours","parseFloat","setUTCOffsetString","hour","DateTimeHelperService","formatTo","value","fmt","indexOf","format","_d","parseISO","createDate","isValid","_time","filter","n","join","fullDateTime","val","$D","Injectable","args","providedIn","DateHelperModule","forRoot","ngModule","providers","NgModule","declarations","imports","CommonModule","exports"],"mappings":"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","sourcesContent":["export class MyDateConverter {\r\n    private MONTHNAMES = 'January February March April May June July August September October November December'.split(' ');\r\n    private MONTHNAMES_LOOKUP = { 'jan': 1, 'feb': 2, 'mar': 3, 'apr': 4, 'may': 5, 'jun': 6, 'jul': 7, 'aug': 8, 'sep': 9, 'oct': 10, 'nov': 11, 'dec': 12 };\r\n    /**\r\n     * @var {Array}  Abbreviated names for the months of the year\r\n     */\r\n    private ABBR_MONTHNAMES = 'Jan Feb Mar Apr May Jun Jul Aug Sep Oct Nov Dec'.split(' ');\r\n    /**\r\n     * @var {Array}  Names for the days of the week from Sunday to Saturday\r\n     */\r\n    private DAYNAMES = 'Sunday Monday Tuesday Wednesday Thursday Friday Saturday'.split(' ');\r\n    private DAYNAMES_LOOKUP = { 'sun': 0, 'mon': 1, 'tue': 2, 'wed': 3, 'thu': 4, 'fri': 5, 'sat': 6 };\r\n    /**\r\n     * @var {Array}  Abbreviated names for the days of the week from Sunday to Saturday\r\n     */\r\n    private ABBR_DAYNAMES = 'Sun Mon Tue Wed Thu Fri Sat'.split(' ');\r\n    regexes = {\r\n        YEAR: '[1-9]\\\\d{3}',\r\n        MONTH: '1[0-2]|0?[1-9]',\r\n        MONTH2: '1[0-2]|0[1-9]',\r\n        MONTHNAME: 'jan|january|feb|february|mar|march|apr|april|may|jun|june|jul|july|aug|august|sep|september|oct|october|nov|november|dec|december',\r\n        DAYNAME: 'mon|monday|tue|tuesday|wed|wednesday|thu|thursday|fri|friday|sat|saturday|sun|sunday',\r\n        DAY: '3[01]|[12]\\\\d|0?[1-9]',\r\n        DAY2: '3[01]|[12]\\\\d|0[1-9]',\r\n        TIMEZONE: '[+-][01]\\\\d\\\\:?[0-5]\\\\d',\r\n        H24: '[01]\\\\d|2[0-3]',\r\n        MIN: '[0-5]\\\\d',\r\n        SEC: '[0-5]\\\\d',\r\n        MS: '\\\\d{3,}',\r\n        H12: '0?[1-9]|1[012]',\r\n        AMPM: 'am|pm',\r\n        UNIT: 'year|month|week|day|hour|minute|second|millisecond'\r\n    };\r\n\r\n    patterns = [\r\n        // 2010-03-15\r\n        [\r\n            'iso_8601',\r\n            this.makePattern('^(_YEAR_)-(_MONTH_)-(_DAY_)$'),\r\n            '$2/$3/$1'\r\n        ],\r\n\r\n        // 3-15-2010\r\n        [\r\n            'us',\r\n            this.makePattern('^(_MONTH_)([\\\\/-])(_DAY_)\\\\2(_YEAR_)$'),\r\n            '$1/$3/$4'\r\n        ],\r\n\r\n        // 15.03.2010\r\n        [\r\n            'world',\r\n            this.makePattern('^(_DAY_)([\\\\/\\\\.])(_MONTH_)\\\\2(_YEAR_)$'),\r\n            '$3/$1/$4'\r\n        ],\r\n\r\n        // 15-Mar-2010, 8 Dec 2011, \"Thu, 8 Dec 2011\"\r\n        [\r\n            'chicago',\r\n            this.makePattern('^(?:(?:_DAYNAME_),? )?(_DAY_)([ -])(_MONTHNAME_)\\\\2(_YEAR_)$'),\r\n            '$3 $1, $4'\r\n        ],\r\n\r\n        // \"March 4, 2012\", \"Mar 4 2012\", \"Sun Mar 4 2012\"\r\n        [\r\n            'conversational',\r\n            this.makePattern('^(?:(?:_DAYNAME_),? )?(_MONTHNAME_) (_DAY_),? (_YEAR_)$'),\r\n            '$1 $2, $3'\r\n        ],\r\n\r\n        // Tue Jun 22 17:47:27 +0000 2010\r\n        [\r\n            'month_day_time_year',\r\n            this.makePattern('^(?:_DAYNAME_) (_MONTHNAME_) (_DAY_) ((?:_H24_)\\\\:(?:_MIN_)(?:\\\\:_SEC_)?) (_TIMEZONE_) (_YEAR_)$'),\r\n            (m) => {\r\n                const month = this.zeroPad(this.getMonthByName(m[1]), 2);\r\n                const day = this.zeroPad(m[2], 2);\r\n                const date: any = this.create(m[5] + '-' + month + '-' + day + 'T' + m[3] + m[4]);\r\n                if (isNaN(date)) {\r\n                    return false;\r\n                }\r\n                return date;\r\n            }\r\n        ],\r\n\r\n        // @123456789\r\n        [\r\n            'unix',\r\n            /^@(-?\\d+)$/,\r\n            (match) => {\r\n                return this.create(parseInt(match[1], 10) * 1000);\r\n            }\r\n        ],\r\n\r\n        // 24-hour time (This will help catch Date objects that are casted to a string)\r\n        [\r\n            '24_hour',\r\n            this.makePattern('^(?:(.+?)(?: |T))?(_H24_)\\\\:(_MIN_)(?:\\\\:(_SEC_)(?:\\\\.(_MS_))?)? ?(?:GMT)?(_TIMEZONE_)?(?: \\\\([A-Z]+\\\\))?$'),\r\n            (match) => {\r\n                let d;\r\n                if (match[1]) {\r\n                    d = this.create(match[1]);\r\n                    if (isNaN(d)) {\r\n                        return false;\r\n                    }\r\n                } else {\r\n                    d = Date.now();\r\n                    d.setMilliseconds(0);\r\n                }\r\n                d.setHours(parseFloat(match[2]), parseFloat(match[3]), parseFloat(match[4] || 0));\r\n                if (match[5]) {\r\n                    d.setMilliseconds(+String(match[5]).slice(0, 3));\r\n                }\r\n                if (match[6]) {\r\n                    d.setUTCOffsetString(match[6]);\r\n                }\r\n                return d;\r\n            }\r\n        ],\r\n\r\n        // 12-hour time\r\n        [\r\n            '12_hour',\r\n            this.makePattern('^(?:(.+) )?(_H12_)(?:\\\\:(_MIN_)(?:\\\\:(_SEC_))?)? ?(_AMPM_)$'),\r\n            (match) => {\r\n                let d;\r\n                if (match[1]) {\r\n                    d = this.create(match[1]);\r\n                    if (isNaN(d)) {\r\n                        return false;\r\n                    }\r\n                } else {\r\n                    d = Date.now();\r\n                    d.setMilliseconds(0);\r\n                }\r\n                let hour = parseFloat(match[2]);\r\n                hour = match[5].toLowerCase() == 'am' ? (hour == 12 ? 0 : hour) : (hour == 12 ? 12 : hour + 12);\r\n                d.setHours(hour, parseFloat(match[3] || 0), parseFloat(match[4] || 0));\r\n                return d;\r\n            }\r\n        ]\r\n\r\n    ];\r\n\r\n    makePattern(code) {\r\n        code = code.replace(/_([A-Z][A-Z0-9]+)_/g, ($0, $1) => {\r\n            return this.regexes[$1];\r\n        });\r\n        return new RegExp(code, 'i');\r\n    }\r\n\r\n    getMonthByName(monthname) {\r\n        return this.MONTHNAMES_LOOKUP[String(monthname).slice(0, 3).toLowerCase()];\r\n    }\r\n\r\n    getWeekdayByName(dayname) {\r\n        return this.DAYNAMES_LOOKUP[String(dayname).slice(0, 3).toLowerCase()];\r\n    }\r\n\r\n    private zeroPad(num, digits) {\r\n        switch (digits - String(num).length) {\r\n            case 2: return '00' + num;\r\n            case 1: return '0' + num;\r\n        }\r\n        return num;\r\n    }\r\n\r\n    create(date) {\r\n        // 0 arguments or date is undefined\r\n        if (typeof date == 'undefined') {\r\n            return Date.now();\r\n        }\r\n        // If the passed value is already a date object, return it\r\n        if (date instanceof Date) {\r\n            return date;\r\n        }\r\n        const a = arguments;\r\n        switch (a.length) {\r\n            case 1:\r\n                // If the passed value is an integer, interpret it as ms past epoch\r\n                if (Object.prototype.toString.call(date) == '[object Number]') {\r\n                    return new Date(date);\r\n                }\r\n                // trim the date\r\n                date = String(date).replace(/^\\s*(.*)\\s*$/, '$1');\r\n                // normalize whitespace\r\n                date = date.replace(/\\s{2,}/g, ' ');\r\n                if (date === '') {\r\n                    return Date.now();\r\n                }\r\n                var i = 0, pattern, ms, obj, match, regex, fn;\r\n                // try each of our patterns\r\n                while ((pattern = this.patterns[i++])) {\r\n                    if (typeof pattern[0] == 'string') {\r\n                        // pattern[0] is the name of the pattern\r\n                        regex = pattern[1];\r\n                        fn = pattern[2];\r\n                    } else {\r\n                        // backwards compatibility with version 3.1\r\n                        regex = pattern[0];\r\n                        fn = pattern[1];\r\n                    }\r\n                    if (!(match = date.match(regex))) {\r\n                        continue;\r\n                    }\r\n                    if (typeof fn == 'function') {\r\n                        obj = fn(match, date);\r\n                        if (obj instanceof Date) {\r\n                            return obj;\r\n                        }\r\n                    } else {\r\n                        // fn is not a function but a string replace command\r\n                        ms = Date.parse(date.replace(regex, fn));\r\n                        if (!isNaN(ms)) {\r\n                            return new Date(ms);\r\n                        }\r\n                    }\r\n                }\r\n                return NaN;\r\n            case 2: return new Date(a[0], a[1], 1);\r\n            case 3: return new Date(a[0], a[1], a[2]);\r\n            case 4: return new Date(a[0], a[1], a[2], a[3]);\r\n            case 5: return new Date(a[0], a[1], a[2], a[3], a[4]);\r\n            case 6: return new Date(a[0], a[1], a[2], a[3], a[4], a[5]);\r\n            default: return new Date(a[0], a[1], a[2], a[3], a[4], a[5], a[6]);\r\n        }\r\n    }\r\n}\r\n","/*\r\n * @Author: ç¯çç§æ(Lucas Huang)\r\n * @Date: 2019-09-02 17:55:57\r\n * @LastEditors: ç¯çç§æ(Lucas Huang)\r\n * @LastEditTime: 2019-10-23 16:57:28\r\n * @QQ: 1055818239\r\n * @Version: v0.0.1\r\n */\r\nimport { format, isValid, parseISO } from 'date-fns';\r\nimport { Injectable } from '@angular/core';\r\nimport { MyDateConverter } from './myDateConverter';\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class DateTimeHelperService {\r\n\r\n    private $D = null;\r\n\r\n    constructor() {\r\n        this.$D = new MyDateConverter();\r\n    }\r\n    /**\r\n     * @param value è¦è½¬æ¢æ ¼å¼çæ¥æ\r\n     * @param fmt æ ¼å¼åå­ç¬¦ä¸²\r\n     *\r\n     * æ´å¤çæ ¼å¼åè¯·åè\r\n     * [ç¹æç¹æ](https://date-fns.org/v1.30.1/docs/format)\r\n     */\r\n    formatTo(value: any, fmt: string = 'yyyy-MM-dd') {\r\n        if (!value) {\r\n            return '';\r\n        }\r\n\r\n        if (typeof value === 'string' && value.indexOf('0001') === 0) {\r\n            return '';\r\n        }\r\n\r\n        if (value instanceof Date) {\r\n            return format(value, fmt);\r\n        }\r\n\r\n        let _d: any = parseISO(value);\r\n\r\n        if (_d == 'Invalid Date') {\r\n            _d = this.createDate(value) || new Date(value);\r\n        }\r\n\r\n        // const d = parseISO(value);\r\n        if (isValid(_d)) {\r\n            const d = parseISO(format(_d, 'yyyy-MM-dd HH:mm:ss'));\r\n            return format(d, fmt);\r\n        } else {\r\n            // console.error(`${value} è½¬æ¢ä¸ºDateæ¶å¤±è´¥ã`);\r\n            if (fmt.indexOf('HH') === 0 || fmt.indexOf('hh') === 0) {\r\n                // ä»ææ¶é´é¨å\r\n                // æåæ¶é´\r\n                const _time = value.match(/\\d*/g).filter(n => n!== '').join(':');\r\n                const fullDateTime = new Date('2022-11-25 ' + _time);\r\n                return format(fullDateTime, fmt);\r\n            }\r\n            return '';\r\n        }\r\n    }\r\n\r\n    private createDate(val)     {\r\n        return this.$D.create(val);\r\n    }\r\n\r\n}\r\n","import { DateTimeHelperService } from './date-helper.service';\r\nimport { NgModule, ModuleWithProviders } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\n@NgModule({\r\n    declarations: [],\r\n    imports: [ CommonModule ],\r\n    exports: [],\r\n    providers: [],\r\n})\r\nexport class DateHelperModule {\r\n    static forRoot(): ModuleWithProviders {\r\n        return {\r\n            ngModule: DateHelperModule,\r\n            providers: [\r\n                DateTimeHelperService\r\n            ]\r\n        };\r\n    }\r\n}\r\n"]}