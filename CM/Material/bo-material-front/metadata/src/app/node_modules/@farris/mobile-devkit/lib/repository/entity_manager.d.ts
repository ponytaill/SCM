import { Type } from '../core/index';
import { Entity } from '../entity/index';
import { EntityCollection } from './entity_collection';
/**
 * 实体管理类
 */
declare class EntityManager<T extends Entity> {
    /**
     * 实体类型
     */
    entityType: Type<Entity>;
    /**
     * 实体集合
     */
    entityCollection: EntityCollection<Entity>;
    /**
     * 构造函数
     */
    constructor(entityCollection: EntityCollection<T>);
    /**
     * 创建实体
     */
    createEntity(entityData: any): T;
    /**
     * 批量创建实体
     */
    createEntities(entityListData: any[], entityType: any): T[];
    /**
     * 获取path对应的实体
     */
    getEntityByPath(path: string[]): Entity;
    /**
     * 获取path对应的实体
     */
    getEntitiesByPath(path: string[]): Entity[];
    /**
     * 获取实体节点
     * @param path 节点路径
     */
    private getEntityNodeByPath;
    /**
     * 获取path对应的实体属性值
     */
    getPropValueByPath(path: string[]): any;
    /**
     * 设置path对应实体的属性值
     */
    setPropValueByPath(path: string[], propValue: any): void;
    /**
     * 在path对应实体前插入实体
     */
    insertEntityBeforeByPath(fpath: string[]): void;
    /**
     * 在path对应实体前批量插入实体
     */
    insertEntitiesBeforeByPath(): void;
    /**
     * 在path对应实体前插入实体
     */
    insertEntityAfterByPath(): void;
    /**
     * 在path对应实体前批量插入实体
     */
    insertEntitiesAfterByPath(): void;
    /**
     * 在path对应的实体集合中追加1个实体
     */
    /**
     * 根据path获取实体集合
     * @param fpath 路径
     * @param entityData 实体数据
     * @param initialData[可选] 默认值
     */
    appendEntityByPath(fpath: string, entityData: any, initialData?: any): Entity;
    /**
     * 在path对应的实体集合中追加多个实体
     */
    appendEntitiesByPath(fpath: string[], entities: Entity[]): void;
    /**
     * 从fapth对应的实体集合中删除id对应的实体
     */
    /**
     * 根据path获取实体集合
     * @param fpath path
     */
    removeEntityByPath(fpath: string, id: string): void;
    /**
     * 从fapth对应的实体集合中删除ids对应的实体
     */
    removeEntitiesByPath(fpath: string[], ids: string[]): void;
    /**
     * 清空所有实体的变更集
     */
    clearAllEntityChanges(): void;
    /**
     * 清空id指定的实体变更集
     */
    clearEntityChangesById(id: string): void;
    /**
     * 清空ids数组中指定的实体的变更集
     */
    clearEntityChangesByIds(ids: string[]): void;
    /**
     * 检查所有的实体，是否有未提交的变更
     */
    checkAllEntityChanges(): boolean;
    /**
     * 检查id对应的实体，是否有未提交的变更
     */
    checkEntityChangesById(id: string): boolean;
    /**
     * 待废弃
     * @deprecated
     */
    clearEntityChangesByArray(idArray: string[]): void;
}
export { EntityManager };
