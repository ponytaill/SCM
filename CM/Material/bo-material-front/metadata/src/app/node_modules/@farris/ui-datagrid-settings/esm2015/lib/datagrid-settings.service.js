/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { map, switchMap } from 'rxjs/operators';
import { forkJoin, of, timer } from 'rxjs';
import { Injectable, Injector, InjectionToken, ComponentFactoryResolver, ApplicationRef } from '@angular/core';
import { BsModalService } from '@farris/ui-modal';
import { MessagerService } from '@farris/ui-messager';
import { DatagridSettingsComponent } from './datagrid-settings.component';
import { cloneDeep } from 'lodash-es';
import { LocaleService } from '@farris/ui-locale';
import { IdService } from '@farris/ui-common';
import { SimpleColumnsComponent } from './simple-mode/simple-columns.component';
import { DatagridSchemeService } from './datagrid-scheme.service';
import { NewSchemeComponent } from './scheme/newscheme.component';
import { SchemeListComponent } from './scheme/scheme-list.component';
import { NotifyService } from '@farris/ui-notify';
/** @type {?} */
export const GRID_SETTINGS_WEBAPI = new InjectionToken(' Farris DataGrid User Setting WebApi URI.');
export class DatagridSettingsService {
    /**
     * @param {?} injector
     * @param {?} modalSer
     * @param {?} messager
     * @param {?} idService
     * @param {?} localeSer
     */
    constructor(injector, modalSer, messager, idService, localeSer) {
        this.injector = injector;
        this.modalSer = modalSer;
        this.messager = messager;
        this.idService = idService;
        this.localeSer = localeSer;
        this.multiSortMsg = '列表中未开启多列排序的功能。 请检查！';
        this.columnsSortableMsg = '未开启列的排序功能。请检查！';
        this.notSupportHeaderGroupMsg = '暂不支持多表头设置';
        this.notShowDialog = '多表头暂不支持列显示设置；同时未启用列排序功能。';
        this._httpRestService = null;
        this.languages = [];
        this.gridRefs = null;
        this.activeSchemeItem = null;
        this.saving = false;
        this.cfr = null;
        this.app = null;
        this.schemeListSubscription = null;
        this.cfr = this.injector.get(ComponentFactoryResolver);
        this.app = this.injector.get(ApplicationRef);
        this.notifyService = this.injector.get(NotifyService, null);
        this.schemeService = new DatagridSchemeService();
    }
    /**
     * @return {?}
     */
    get httpRestService() {
        return this._httpRestService;
    }
    ;
    /**
     * @param {?} httpSer
     * @return {?}
     */
    set httpRestService(httpSer) {
        this._httpRestService = httpSer;
        if (this.schemeService) {
            this.schemeService.setRestService(httpSer);
        }
    }
    /**
     * @param {?=} id
     * @return {?}
     */
    destroy(id) {
        if (id && this.gridRefs && this.gridRefs[id]) {
            delete this.gridRefs[id];
        }
        else {
            this.gridRefs = null;
        }
        this.saving = false;
        this.setActiveSchemeItem(id, null);
    }
    /**
     * @param {?} dg
     * @return {?}
     */
    registerGridInstance(dg) {
        if (!dg) {
            console.log('DatagridSettingService: grid instance is null.');
            return;
        }
        /** @type {?} */
        const id = dg.id;
        this.gridRefs = this.gridRefs || {};
        if (!this.gridRefs[id]) {
            this.gridRefs[id] = dg;
        }
    }
    /**
     * @param {?} dgID
     * @return {?}
     */
    getGridInstance(dgID) {
        return this.gridRefs ? this.gridRefs[dgID] : null;
    }
    /**
     * 更新方案中的配置数据
     * @private
     * @param {?} schemeItem
     * @param {?} settings
     * @return {?}
     */
    updateSchemeSettings(schemeItem, settings) {
        if (schemeItem && settings) {
            /** @type {?} */
            const schemeContentObj = JSON.parse(schemeItem.queryConditionString);
            if (schemeContentObj) {
                if (schemeContentObj[this.localeSer.localeId]) {
                    /** @type {?} */
                    const schemeSettings = schemeContentObj[this.localeSer.localeId];
                    schemeContentObj[this.localeSer.localeId] = Object.assign(schemeSettings, settings);
                }
                else {
                    schemeContentObj[this.localeSer.localeId] = settings;
                }
                schemeItem.queryConditionString = JSON.stringify(schemeContentObj);
            }
        }
    }
    /**
     * 更新当前方案配置数据
     * @param {?} dgId
     * @param {?} settings
     * @return {?}
     */
    updateActiveSchemeItemSettings(dgId, settings) {
        /** @type {?} */
        const schemeItem = this.getActiveSchemeItem(dgId);
        this.updateSchemeSettings(schemeItem, settings);
    }
    /**
     * 设置活动的方案
     * @param {?} dgId
     * @param {?} activeItem
     * @return {?}
     */
    setActiveSchemeItem(dgId, activeItem) {
        /** @type {?} */
        const schemekey = this.schemeService.getSchemeKey(dgId);
        this.activeSchemeItem = this.activeSchemeItem || {};
        this.activeSchemeItem[schemekey] = activeItem;
    }
    /**
     * 获取当前活动的方案
     * @param {?} dgId
     * @return {?}
     */
    getActiveSchemeItem(dgId) {
        /** @type {?} */
        const schemekey = this.schemeService.getSchemeKey(dgId);
        return this.activeSchemeItem ? this.activeSchemeItem[schemekey] : null;
    }
    /**
     * @return {?}
     */
    getSearchTypes() {
        return [
            { value: 'all', title: this.localeSer.getValue('datagrid.settings.allColumns') },
            { value: 'visible', title: this.localeSer.getValue('datagrid.settings.visibleColumns') },
            { value: 'hidden', title: this.localeSer.getValue('datagrid.settings.hiddenColumns') }
        ];
    }
    /**
     * @param {?} gridInstance
     * @param {?=} settings
     * @param {?=} selectedSchemeItem
     * @return {?}
     */
    showSimple(gridInstance, settings, selectedSchemeItem) {
        /** @type {?} */
        const columns = this.convertColumnsToSimple(gridInstance.columns);
        columns[0] = columns[0].filter((/**
         * @param {?} n
         * @return {?}
         */
        n => n.field && n.field !== gridInstance.ControlPanelFeild));
        /** @type {?} */
        const searchTypes = this.getSearchTypes();
        if (this.cfr) {
            /** @type {?} */
            const cmpFactory = this.cfr.resolveComponentFactory(SimpleColumnsComponent);
            /** @type {?} */
            let simpleRef = cmpFactory.create(this.injector);
            this.app.attachView(simpleRef.hostView);
            simpleRef.instance.columns = columns;
            simpleRef.instance.seartTypes = searchTypes;
            simpleRef.instance.gridInstance = gridInstance;
            if (document.querySelector('#page-wrapper')) {
                simpleRef.instance.top = 76;
            }
            simpleRef.instance.enableScheme = gridInstance.enableScheme;
            if (gridInstance.enableScheme) {
                if (settings) {
                    if (selectedSchemeItem) {
                        this.updateSchemeSettings(selectedSchemeItem, settings);
                        simpleRef.instance.currentSchemeItem = selectedSchemeItem;
                    }
                    else {
                        simpleRef.instance.currentSchemeItem = null;
                        simpleRef.instance.settings = settings;
                    }
                }
                else {
                    /** @type {?} */
                    const _currentSchemtItem = this.getActiveSchemeItem(gridInstance.id);
                    simpleRef.instance.currentSchemeItem = _currentSchemtItem;
                }
            }
            document.body.appendChild(simpleRef.location.nativeElement);
            simpleRef.instance.closed.pipe(switchMap((/**
             * @return {?}
             */
            () => {
                simpleRef.instance.container.nativeElement.style.right = '-500px';
                return timer(500);
            }))).subscribe((/**
             * @return {?}
             */
            () => {
                simpleRef.location.nativeElement.remove();
                simpleRef.destroy();
                simpleRef = null;
                if (this.schemeListSubscription) {
                    this.schemeListSubscription.unsubscribe();
                }
            }));
            simpleRef.instance.advanced.subscribe((/**
             * @param {?} __0
             * @return {?}
             */
            ({ viewFields }) => {
                if (viewFields && viewFields.length) {
                    this.updateSchemeSettings(simpleRef.instance.currentSchemeItem, { viewColumns: viewFields });
                }
                this.showAdvanced(gridInstance, null, simpleRef.instance.currentSchemeItem);
            }));
            simpleRef.instance.submit.subscribe((/**
             * @param {?} e
             * @return {?}
             */
            (e) => {
                e.target.disabled = true;
                if (this.saving) {
                    return;
                }
                if (!this.saving) {
                    if (e.currentScheme) {
                        this.setActiveSchemeItem(gridInstance.id, e.currentScheme);
                    }
                    this.updateGridView(e, gridInstance, e.target);
                }
            }));
            simpleRef.instance.fieldsChange.subscribe((/**
             * @param {?} visibleFields
             * @return {?}
             */
            (visibleFields) => {
                this.updateActiveSchemeItemSettings(gridInstance.id, { viewColumns: visibleFields });
            }));
            // 打开新增方案窗口
            simpleRef.instance.addNewScheme.subscribe((/**
             * @return {?}
             */
            () => {
                this.showNewSchemeDialog(gridInstance, simpleRef);
            }));
            simpleRef.instance.schemeList = this.schemeService.getStateValue(gridInstance.id, 'list') || [];
            // 打开方案管理列表窗口
            simpleRef.instance.showSchemeList.subscribe((/**
             * @return {?}
             */
            () => {
                this.schemeService.getSchemeList(gridInstance.id).pipe(switchMap((/**
                 * @param {?} t
                 * @return {?}
                 */
                (t) => {
                    return this.schemeService.checkAuthority().pipe(map((/**
                     * @param {?} auth
                     * @return {?}
                     */
                    (auth) => {
                        return Object.assign({ list: t }, auth);
                    })));
                }))).subscribe((/**
                 * @param {?} t
                 * @return {?}
                 */
                (t) => {
                    this.schemeService.setSchemeList(gridInstance.id, t.list || []);
                    this.showSchemeListDialog(gridInstance, cloneDeep(t.list || []), t.success);
                }));
            }));
            this.schemeListSubscription = this.schemeService.schemeList$.subscribe((/**
             * @param {?} list
             * @return {?}
             */
            (list) => {
                simpleRef.instance.schemeList = list;
                if (!list || !list.length) {
                    this.setActiveSchemeItem(gridInstance.id, null);
                    return;
                }
                /** @type {?} */
                const _activeSchemeItem = this.getActiveSchemeItem(gridInstance.id);
                if (_activeSchemeItem) {
                    /** @type {?} */
                    let hasActiveItem = list.find((/**
                     * @param {?} n
                     * @return {?}
                     */
                    n => n.id === _activeSchemeItem.id));
                    if (!hasActiveItem) {
                        hasActiveItem = this.getDefaultScheme(list); // 获取设置为当前方案的项
                        this.setActiveSchemeItem(gridInstance.id, hasActiveItem || null);
                    }
                    simpleRef.instance.currentSchemeItem = hasActiveItem;
                }
            }));
            // 切换方案
            simpleRef.instance.activeItemChange.subscribe((/**
             * @param {?} r
             * @return {?}
             */
            (r) => {
                this.setActiveSchemeItem(gridInstance.id, r);
            }));
            simpleRef.hostView.detectChanges();
            simpleRef.instance.container.nativeElement.style.right = '0px';
            return simpleRef;
        }
    }
    /**
     * @param {?} gridInstance
     * @param {?=} opts
     * @return {?}
     */
    show(gridInstance, opts) {
        this.registerGridInstance(gridInstance);
        if (gridInstance.enableSimpleMode) {
            return this.showSimple(gridInstance);
        }
        else {
            return this.showAdvanced(gridInstance, opts);
        }
    }
    /**
     * @private
     * @param {?} gridInstance
     * @param {?=} opts
     * @param {?=} selectedSchemeItem
     * @return {?}
     */
    showAdvanced(gridInstance, opts, selectedSchemeItem) {
        /** @type {?} */
        let _editColSortInfo = true;
        /** @type {?} */
        const editColSortInfo = this.canSetColumnSort(gridInstance);
        if (editColSortInfo !== true) {
            // this.messager.warning(msg);
            // return;
            _editColSortInfo = false;
        }
        /** @type {?} */
        const showSetColumnsTab = !this.isHeaderGroup(gridInstance);
        /** @type {?} */
        const getActiveTabIndex = (/**
         * @return {?}
         */
        () => {
            if (showSetColumnsTab) {
                return 1;
            }
            else {
                if (_editColSortInfo) {
                    return 2;
                }
                else {
                    return -1;
                }
            }
        });
        /** @type {?} */
        const activeTabIndex = getActiveTabIndex();
        if (activeTabIndex === -1) {
            this.messager.warning(this.notShowDialog);
            return;
        }
        /** @type {?} */
        const columns = this.convertColumnsToSimple(gridInstance.columns);
        // 获取当前方案中当前语言的配置数据
        /** @type {?} */
        let currentSettings = null;
        if (selectedSchemeItem && selectedSchemeItem.queryConditionString) {
            currentSettings = JSON.parse(selectedSchemeItem.queryConditionString)[this.localeSer.localeId];
            if (currentSettings.columnFormat && currentSettings.columnFormat.length) {
                columns[0] = columns[0].map((/**
                 * @param {?} col
                 * @return {?}
                 */
                (col) => {
                    /** @type {?} */
                    const fcol = currentSettings.columnFormat.find((/**
                     * @param {?} n
                     * @return {?}
                     */
                    n => n.field === col.field));
                    if (fcol) {
                        col = Object.assign(col, fcol);
                    }
                    return col;
                }));
            }
        }
        columns[0] = columns[0].filter((/**
         * @param {?} n
         * @return {?}
         */
        n => n.field && n.field !== gridInstance.ControlPanelFeild));
        /** @type {?} */
        const treeData = this.convertColumns2TreeData(cloneDeep(columns), true);
        /** @type {?} */
        const viewColumnsTreeData = this.convertColumns2TreeData(cloneDeep(columns), false);
        this.checkViewTreeNodes(viewColumnsTreeData);
        /** @type {?} */
        let modalRef = null;
        /** @type {?} */
        const okText = this.localeSer.getValue('datagrid.settings.ok') || '确定';
        /** @type {?} */
        const cancelText = this.localeSer.getValue('datagrid.settings.cancel') || '取消';
        /** @type {?} */
        const resetText = this.localeSer.getValue('datagrid.settings.reset') || '重置';
        /** @type {?} */
        const defaultOpts = {
            width: 760, height: 560, showHeader: false, title: '控制面板',
            initialState: {
                columns,
                sortTreeData: treeData,
                viewTreeData: viewColumnsTreeData,
                gridInstance,
                canSetColumnSort: _editColSortInfo,
                canSetColumnVisible: showSetColumnsTab,
                activeTabIndex,
                schemeInfo: currentSettings
            },
            showButtons: false
        };
        /** @type {?} */
        const modalOpts = Object.assign(defaultOpts, opts || {});
        modalRef = this.modalSer.show(DatagridSettingsComponent, modalOpts);
        /** @type {?} */
        const instance = (/** @type {?} */ (modalRef.content));
        instance.enableReset = true;
        instance.modalRef = modalRef;
        instance.canSetColumnSort = _editColSortInfo;
        instance.canSetColumnVisible = !this.isHeaderGroup(gridInstance);
        instance.submitHandle.subscribe((/**
         * @param {?} e
         * @return {?}
         */
        (e) => {
            e.target.disabled = true;
            if (this.saving) {
                return;
            }
            if (!this.saving) {
                if (selectedSchemeItem) {
                    this.setActiveSchemeItem(gridInstance.id, selectedSchemeItem);
                }
                this.updateGridView(modalRef, gridInstance, e.target);
            }
        }));
        instance.cancelHandle.subscribe((/**
         * @param {?} e
         * @return {?}
         */
        (e) => {
            modalRef.close();
        }));
        // 切换到侧边栏简洁模式
        instance.concise.subscribe((/**
         * @param {?} e
         * @return {?}
         */
        (e) => {
            modalRef.close();
            /** @type {?} */
            const settings = modalRef.content;
            const { sortInfo, viewColumns, columnFormat, groupField } = settings;
            this.showSimple(gridInstance, { sortInfo, viewColumns, columnFormat, groupField }, selectedSchemeItem);
        }));
        /** @type {?} */
        const modalContainer = (/** @type {?} */ (modalRef.dialog.instance));
        modalContainer.draggbar.handle = instance.header.nativeElement;
        return modalRef;
    }
    /**
     * @private
     * @param {?} gridInstance
     * @return {?}
     */
    canSetColumnSort(gridInstance) {
        if (gridInstance.multiSort && this.hasEnableSortColumns(gridInstance)) {
            return true;
        }
        else {
            if (!this.hasEnableSortColumns(gridInstance)) {
                return this.columnsSortableMsg;
            }
            else if (!gridInstance.multiSort) {
                return this.multiSortMsg;
            }
        }
    }
    /**
     * @private
     * @param {?} gridInstance
     * @return {?}
     */
    hasEnableSortColumns(gridInstance) {
        /** @type {?} */
        const sortColumnsCount = gridInstance.flatColumns.reduce((/**
         * @param {?} c
         * @param {?} r
         * @return {?}
         */
        (c, r) => {
            if (r.sortable) {
                return c + 1;
            }
            return c;
        }), 0);
        return sortColumnsCount > 0;
    }
    /**
     * @private
     * @param {?} grid
     * @return {?}
     */
    isHeaderGroup(grid) {
        /** @type {?} */
        const flag = grid.columns.length > 1;
        if (flag) {
            return this.notSupportHeaderGroupMsg;
        }
        return flag;
    }
    /**
     * @private
     * @param {?} cols
     * @param {?} rowIndex
     * @param {?} colStartIndex
     * @param {?} colCount
     * @param {?=} forSort
     * @return {?}
     */
    getChilds(cols, rowIndex, colStartIndex, colCount, forSort = false) {
        /** @type {?} */
        const childCols = [];
        /** @type {?} */
        let _count = colStartIndex;
        if (!cols[rowIndex]) {
            return [];
        }
        cols[rowIndex].slice().forEach((/**
         * @param {?} element
         * @return {?}
         */
        element => {
            _count = _count + element.colspan;
            if (_count <= colCount) {
                childCols.push(element);
            }
        }));
        cols[rowIndex].splice(0, childCols.length);
        return childCols.map((/**
         * @param {?} c
         * @param {?} i
         * @return {?}
         */
        (c, i) => {
            /** @type {?} */
            let n = {
                data: c,
                selectable: forSort ? !!c.sortable : true
            };
            if (c.colspan && c.colspan > 1) {
                n = {
                    data: c,
                    selectable: false,
                    expanded: true,
                    children: this.getChilds(cols, rowIndex + 1, 0, c.colspan)
                };
            }
            return n;
        }));
    }
    /**
     * @param {?} cols
     * @param {?=} forSort
     * @return {?}
     */
    convertColumns2TreeData(cols, forSort = false) {
        /** @type {?} */
        const columns = cols.map((/**
         * @param {?} c
         * @return {?}
         */
        (c) => {
            c.map((/**
             * @param {?} _
             * @return {?}
             */
            (_) => {
                _.colspan = _.colspan || 1;
                return _;
            }));
            return c;
        }));
        if (columns.length === 1) {
            return columns[0].map((/**
             * @param {?} c
             * @return {?}
             */
            c => {
                return {
                    data: c,
                    selectable: forSort ? !!c.sortable : true
                };
            }));
        }
        else {
            return columns[0].map((/**
             * @param {?} c
             * @param {?} i
             * @return {?}
             */
            (c, i) => {
                if (c.colspan && c.colspan > 1) {
                    return {
                        data: c,
                        selectable: false,
                        expanded: true,
                        children: this.getChilds(columns, 1, 0, c.colspan, forSort)
                    };
                }
                else {
                    return {
                        data: c,
                        selectable: forSort ? !!c.sortable : true
                    };
                }
            }));
        }
    }
    /**
     * @private
     * @param {?} treeNodes
     * @return {?}
     */
    checkViewTreeNodes(treeNodes) {
        treeNodes.forEach((/**
         * @param {?} tn
         * @return {?}
         */
        (tn) => {
            if (!tn.children || !tn.children.length) {
                tn.selectable = true;
            }
            else {
                tn.selectable = false;
                this.checkViewTreeNodes(tn.children);
            }
        }));
    }
    /**
     * @private
     * @param {?} cols
     * @return {?}
     */
    convertColumnsToSimple(cols) {
        // 移除设置列
        return cols.map((/**
         * @param {?} _cols
         * @return {?}
         */
        (_cols) => {
            return _cols.map((/**
             * @param {?} c
             * @return {?}
             */
            (c) => {
                if (c.field !== '_datagrid-setting-control_') {
                    return {
                        field: c.field,
                        title: c.title,
                        colspan: c.colspan,
                        rowspan: c.rowspan,
                        sortable: c.sortable,
                        order: c.order,
                        halign: c.halign || 'left',
                        align: c.align || 'left',
                        visible: c.visible,
                        allowGrouping: c.allowGrouping,
                        groupFooter: c.groupFooter,
                        footer: c.footer,
                        width: c.width || 100,
                        dataType: c.dataType || 'string'
                    };
                }
            })).filter((/**
             * @param {?} n
             * @return {?}
             */
            n => n));
        }));
    }
    /**
     * @private
     * @param {?} gridInstance
     * @return {?}
     */
    resetGridView(gridInstance) {
        if (!gridInstance) {
            return;
        }
        /** @type {?} */
        const dfs = gridInstance.dfs;
        if (dfs) {
            /** @type {?} */
            const options = dfs['_state'].initialOptions;
            if (options.sort) {
                if (options.sort.sortName) {
                    gridInstance.sortName = options.sort.sortName;
                }
                if (options.sort.sortOrder) {
                    gridInstance.sortOrder = options.sort.sortOrder;
                }
            }
            gridInstance.groupField = options.groupField || '';
            // TODO: 还需要修正默认列的显示顺序
            if (options.columnFields && options.columnFields.length) {
                /** @type {?} */
                const newColumns = [];
                options.columnFields.forEach((/**
                 * @param {?} c
                 * @return {?}
                 */
                c => {
                    /** @type {?} */
                    const col = gridInstance.columns[0].find((/**
                     * @param {?} n
                     * @return {?}
                     */
                    (n) => n.field === c.field));
                    if (col) {
                        col.visible = c.visible;
                        col.halign = c.halign;
                        col.align = c.align;
                        col.width = c.width;
                        col.footer = c.footer;
                        col.groupFooter = c.groupFooter;
                        newColumns.push(col);
                    }
                }));
                gridInstance.columns[0] = newColumns;
            }
            // gridInstance['checkOptions']();
            gridInstance['columnsChanged']();
        }
    }
    /**
     * @private
     * @param {?} modalRef
     * @param {?} gridInstance
     * @param {?=} btn
     * @return {?}
     */
    updateGridView(modalRef, gridInstance, btn = null) {
        /** @type {?} */
        const settings = modalRef.content;
        if (settings) {
            const { sortInfo, viewColumns, columnFormat, groupField } = settings;
            this.updateActiveSchemeItemSettings(gridInstance.id, { sortInfo, viewColumns, columnFormat, groupField });
            this.saving = true;
            /** @type {?} */
            let _groupField = '';
            if (gridInstance.groupRows && groupField && groupField.length) {
                _groupField = groupField.join(',');
            }
            gridInstance.groupField = _groupField;
            /** @type {?} */
            const _colformats = columnFormat ? this.convertColumnsToSimple([columnFormat])[0] : [];
            /** @type {?} */
            const saveData = { sortInfo, viewColumns, groupField: _groupField, columnFormat: _colformats };
            this.setUserConfig(gridInstance.id, saveData).subscribe((/**
             * @return {?}
             */
            () => {
                if (btn) {
                    btn.disabled = false;
                }
                this.saving = false;
                if (viewColumns && viewColumns.length) {
                    gridInstance.columns = gridInstance.columns.map((/**
                     * @param {?} cols
                     * @return {?}
                     */
                    cols => {
                        this.updateColumnFormat(cols, columnFormat, gridInstance);
                        return this.newVisibleOrderColumns(cols, viewColumns, columnFormat, gridInstance);
                    }));
                }
                gridInstance.columnsChanged(true);
                if (sortInfo && Object.keys(sortInfo).length) {
                    const { sortName, sortOrder } = sortInfo;
                    if (sortName && sortName.length) {
                        gridInstance.sort(sortName.join(','), sortOrder.join(','));
                    }
                    else {
                        gridInstance.clearSort();
                    }
                }
                else {
                    gridInstance.clearSort();
                }
                modalRef.close();
            }));
        }
        else {
            modalRef.close();
        }
    }
    /**
     * @param {?} cols
     * @param {?} viewColumns
     * @param {?} columnFormat
     * @param {?} gridInstance
     * @return {?}
     */
    newVisibleOrderColumns(cols, viewColumns, columnFormat, gridInstance) {
        /** @type {?} */
        const hideColumns = [];
        cols.forEach((/**
         * @param {?} element
         * @param {?} index
         * @return {?}
         */
        (element, index) => {
            if (this.isNewAddColumn(element.field, columnFormat) && element.field !== '_datagrid-setting-control_' && !gridInstance.enableScheme) {
                viewColumns.push(element.field);
            }
            else {
                element.visible = viewColumns.includes(element.field);
                if (!element.visible) {
                    hideColumns.push(element);
                }
            }
        }));
        // 清理不存在的列
        /** @type {?} */
        let newCols = viewColumns.map((/**
         * @param {?} field
         * @return {?}
         */
        field => {
            return cols.find((/**
             * @param {?} c
             * @return {?}
             */
            c => c.field === field));
        })).filter((/**
         * @param {?} n
         * @return {?}
         */
        n => n));
        if (hideColumns.length) {
            newCols = newCols.concat(hideColumns);
        }
        return newCols.filter((/**
         * @param {?} c
         * @return {?}
         */
        c => c && c.field && c.field !== '_datagrid-setting-control_'));
    }
    /**
     * 是否为新增加的字段
     * 新增的字段，需要在列表中展示出来，并保存到个性化设置中
     * @private
     * @param {?} field
     * @param {?} columns
     * @return {?}
     */
    isNewAddColumn(field, columns) {
        columns = columns || [];
        return !columns.find((/**
         * @param {?} c
         * @return {?}
         */
        c => c.field === field));
    }
    /**
     * @param {?} cols
     * @param {?} columnFormat
     * @param {?} gridInstance
     * @return {?}
     */
    updateColumnFormat(cols, columnFormat, gridInstance) {
        if (columnFormat && columnFormat.length) {
            cols.forEach((/**
             * @param {?} col
             * @return {?}
             */
            col => {
                /** @type {?} */
                const formatCol = columnFormat.find((/**
                 * @param {?} f
                 * @return {?}
                 */
                f => f.field === col.field));
                if (formatCol) {
                    col.width = formatCol.width;
                    col.halign = formatCol.halign || 'left';
                    col.align = formatCol.align || 'left';
                    if (gridInstance.groupRows && (col.allowGrouping || col.allowGrouping === undefined)) {
                        if (!col.groupFooter) {
                            col.groupFooter = formatCol.groupFooter;
                        }
                        if (col.groupFooter && col.groupFooter.options) {
                            col.groupFooter.options.text = formatCol.groupFooter.options.text || '';
                            col.groupFooter.options.calculationType =
                                formatCol.groupFooter.options.calculationType !== undefined &&
                                    formatCol.groupFooter.options.calculationType !== null ?
                                    parseInt(formatCol.groupFooter.options.calculationType, 10) : -1;
                        }
                    }
                    if (gridInstance.showFooter && !gridInstance.footerTemplate) {
                        if (!col.footer) {
                            col.footer = formatCol.footer;
                        }
                        if (col.footer && col.footer.options) {
                            col.footer.options.text = formatCol.footer.options.text || '';
                            col.footer.options.calculationType =
                                formatCol.footer.options.calculationType !== undefined &&
                                    formatCol.footer.options.calculationType !== null ?
                                    parseInt(formatCol.footer.options.calculationType, 10) : -1;
                        }
                    }
                }
            }));
        }
    }
    // 创建唯一key, 由uri + gridId 组成，并混淆
    /**
     * @private
     * @param {?} gridId
     * @return {?}
     */
    createConfigKey(gridId) {
        /** @type {?} */
        const grid = this.getGridInstance(gridId);
        if (grid) {
            return grid.dgs.createConfigKey(gridId);
        }
        else {
            console.log('DatagridSettingService: Can not find the grid instance.');
        }
    }
    /**
     * @private
     * @param {?} gridId
     * @return {?}
     */
    getCurrentUserSettings(gridId) {
        /** @type {?} */
        const gridInstance = this.getGridInstance(gridId);
        /** @type {?} */
        const config = { sortInfo: {}, viewColumns: [], groupField: '', columnFormat: [] };
        if (gridInstance) {
            const { sortName, sortOrder, columns } = gridInstance;
            if (sortName) {
                /** @type {?} */
                const sortInfo = {
                    sortName: sortName.split(','),
                    sortOrder: sortOrder.split(',')
                };
                config.sortInfo = sortInfo;
            }
            /** @type {?} */
            const viewColumns = columns[0].filter((/**
             * @param {?} n
             * @return {?}
             */
            n => n.visible || n.visible === undefined)).map((/**
             * @param {?} n
             * @return {?}
             */
            n => n.field));
            config.viewColumns = viewColumns;
            config.columnFormat = this.convertColumnsToSimple(columns)[0];
            if (gridInstance.groupRows) {
                config.groupField = gridInstance.groupField;
            }
        }
        return config;
    }
    /**
     * @param {?} gridId
     * @return {?}
     */
    saveUserConfig(gridId) {
        /** @type {?} */
        const config = this.getCurrentUserSettings(gridId);
        return this.setUserConfig(gridId, config);
    }
    /**
     * @param {?} gridId
     * @param {?} config
     * @return {?}
     */
    setUserConfig(gridId, config) {
        /** @type {?} */
        const key = this.createConfigKey(gridId);
        /** @type {?} */
        const LOCALEID = this.localeSer.localeId;
        /** @type {?} */
        const currentConfig = localStorage.getItem(key);
        /** @type {?} */
        const _config = (currentConfig ? JSON.parse(currentConfig) : {}) || {};
        if (config) {
            if (_config) {
                _config[LOCALEID] = config;
            }
            localStorage.setItem(key, JSON.stringify(_config));
        }
        else {
            localStorage.removeItem(key);
        }
        if (this.httpRestService) {
            /** @type {?} */
            const gridIns = this.getGridInstance(gridId);
            if (gridIns && gridIns.enableScheme) {
                /** @type {?} */
                const activeScheme = this.getActiveSchemeItem(gridId);
                if (activeScheme) {
                    // return this.updateScheme(gridId, config);
                    if (activeScheme.type === 'private') {
                        return this.schemeService.saveScheme(activeScheme, gridId, true);
                    }
                    else {
                        return this.schemeService.checkAuthority().pipe(switchMap((/**
                         * @param {?} t
                         * @return {?}
                         */
                        (t) => {
                            if (t.success) {
                                /** @type {?} */
                                const hasOrgAuthority = t.authOrganizationData && t.authOrganizationData.length;
                                if (activeScheme.type === 'public' || (activeScheme.type === 'org' && hasOrgAuthority)) {
                                    return this.schemeService.saveScheme(activeScheme, gridId, true);
                                }
                            }
                            return of(true);
                        })));
                    }
                }
                else {
                    return of(true);
                }
            }
            // 保存至数据库
            return this._saveUserConfig(key, config ? _config : '');
        }
        return of(true);
    }
    /**
     * @param {?} key
     * @return {?}
     */
    getUserConfig(key) {
        if (this.httpRestService) {
            return this._getUserConfig(key);
        }
        else {
            /** @type {?} */
            const config = localStorage.getItem(key);
            if (config) {
                /** @type {?} */
                const con = JSON.parse(config);
                if (con[this.localeSer.localeId]) {
                    return of(con[this.localeSer.localeId]);
                }
                else {
                    if (Object.keys(con).indexOf('viewColumns') > -1) {
                        return of(con);
                    }
                    return null;
                }
            }
            else {
                return of(null);
            }
        }
    }
    /**
     * @private
     * @param {?} schemeList
     * @return {?}
     */
    getDefaultScheme(schemeList) {
        // 1、有个人默认的返回个人默认方案
        // 2、没有个人默认方案的，返回公共方案第1个
        // 3、没有公共方案，返回组织方案第1个
        // 4、没有组织方案的, 返回个人方案第1个
        // 5、没有个人方案的，返回系统预制，即表单设计时的格式
        // 1、有个人默认的返回个人默认方案
        // 2、没有个人默认方案的，返回公共方案第1个
        // 3、没有公共方案，返回组织方案第1个
        // 4、没有组织方案的, 返回个人方案第1个
        // 5、没有个人方案的，返回系统预制，即表单设计时的格式
        /** @type {?} */
        let defaultScheme = null;
        if (!schemeList || !schemeList.length) {
            return defaultScheme;
        }
        else {
            defaultScheme = schemeList.find((/**
             * @param {?} n
             * @return {?}
             */
            n => n.isDefault));
            if (!defaultScheme) {
                /** @type {?} */
                let publicSchemes = schemeList.filter((/**
                 * @param {?} n
                 * @return {?}
                 */
                n => n.type === 'public'));
                if (!publicSchemes.length) {
                    publicSchemes = schemeList.filter((/**
                     * @param {?} n
                     * @return {?}
                     */
                    n => n.type === 'org'));
                }
                if (publicSchemes.length) {
                    defaultScheme = publicSchemes[0];
                }
                else {
                    defaultScheme = schemeList[0];
                }
            }
        }
        return defaultScheme;
    }
    /**
     * @param {?} gridId
     * @return {?}
     */
    getSettings(gridId) {
        /** @type {?} */
        const key = this.createConfigKey(gridId);
        /** @type {?} */
        const gridIns = this.getGridInstance(gridId);
        /** @type {?} */
        let schemeList$ = of([]);
        if (gridIns && gridIns.enableScheme) {
            schemeList$ = this.getSchemeList(gridId);
        }
        return forkJoin(schemeList$, this.getUserConfig(key), this.schemeService.getLanguages()).pipe(map((/**
         * @param {?} __0
         * @return {?}
         */
        ([schemeList, userSetting, supportedLanguages]) => {
            schemeList = schemeList || [];
            this.languages = supportedLanguages;
            if (!schemeList.length) {
                return userSetting;
            }
            else {
                // 缓存方案列表
                this.setSchemeList(schemeList, gridId);
                // 查找默认方案
                /** @type {?} */
                const defaultScheme = this.getDefaultScheme(schemeList);
                if (!defaultScheme) {
                    return userSetting;
                }
                else {
                    this.setActiveSchemeItem(gridId, defaultScheme);
                    /** @type {?} */
                    const userSettings = JSON.parse(defaultScheme.queryConditionString);
                    if (userSettings) {
                        /** @type {?} */
                        const localeId = this.localeSer.localeId;
                        if (userSettings[localeId]) {
                            localStorage.setItem(key, JSON.stringify(userSettings));
                            return userSettings[localeId];
                        }
                        else {
                            userSettings[localeId] = null;
                            localStorage.setItem(key, JSON.stringify(userSettings));
                            return null;
                        }
                    }
                    else {
                        return null;
                    }
                }
            }
        })));
    }
    /**
     * @private
     * @param {?} key
     * @param {?} config
     * @return {?}
     */
    _saveUserConfig(key, config) {
        try {
            /** @type {?} */
            const userConfigSetting = {
                configkey1: key,
                configkey2: '',
                configkey3: '',
                textvalue: config ? JSON.stringify(config) : ''
            };
            return this.httpRestService.saveUserSettings(userConfigSetting);
        }
        catch (e) {
            console.error(e);
        }
    }
    /**
     * @param {?} gridInstance
     * @param {?} modalRef
     * @return {?}
     */
    resetUserConfig(gridInstance, modalRef) {
        /** @type {?} */
        const restorDefaultText = this.localeSer.getValue('datagrid.settings.restoreDefaultSettingsText') || '确认要恢复默认设置吗？';
        this.messager.confirm(restorDefaultText).pipe(switchMap((/**
         * @param {?} t
         * @return {?}
         */
        (t) => {
            if (t) {
                return this.setUserConfig(gridInstance.id, '');
            }
            return of(t);
        }))).subscribe((/**
         * @param {?} t
         * @return {?}
         */
        (t) => {
            if (t) {
                this.resetGridView(gridInstance);
                modalRef.close();
            }
        }));
    }
    /**
     * @private
     * @param {?} key
     * @return {?}
     */
    _getUserConfig(key) {
        try {
            return this.httpRestService.getUserSettings(key).pipe(map((/**
             * @param {?} ucs
             * @return {?}
             */
            (ucs) => {
                if (ucs && ucs.textValue) {
                    /** @type {?} */
                    const c = JSON.parse(ucs.textValue);
                    if (c) {
                        if (c[this.localeSer.localeId]) {
                            localStorage.setItem(key, ucs.textValue);
                            return c[this.localeSer.localeId];
                        }
                        else {
                            c[this.localeSer.localeId] = null;
                            localStorage.setItem(key, JSON.stringify(c));
                            // if (Object.keys(c).indexOf('viewColumns') > -1) {
                            //     return c;
                            // }
                            return null;
                        }
                    }
                    return null;
                }
                return null;
            })));
        }
        catch (e) {
            console.error(e);
        }
    }
    /**
     * @private
     * @param {?} gridId
     * @param {?=} settings
     * @return {?}
     */
    buildSubmitData(gridId, settings = null) {
        /** @type {?} */
        const LOCALEID = this.localeSer.localeId;
        if (!settings) {
            settings = this.getCurrentUserSettings(gridId);
        }
        /** @type {?} */
        const localeKey = this.createConfigKey(gridId);
        /** @type {?} */
        const currentConfig = localStorage.getItem(localeKey);
        /** @type {?} */
        const _config = (currentConfig ? JSON.parse(currentConfig) : {}) || {};
        if (_config) {
            _config[LOCALEID] = settings;
        }
        return _config;
    }
    // ----------------------------------------------------------------------------------------------- \\
    /**
     * @private
     * @param {?} gridInstance
     * @param {?} schemeList
     * @param {?=} canDel
     * @return {?}
     */
    showSchemeListDialog(gridInstance, schemeList, canDel = true) {
        /** @type {?} */
        const modalOpts = {
            width: 760, height: 577, showHeader: false, title: '控制面板',
            initialState: {
                items: schemeList || [],
                removeItem: canDel
            },
            showButtons: false
        };
        /** @type {?} */
        const schemeListDlg = this.modalSer.show(SchemeListComponent, modalOpts);
        /** @type {?} */
        const instance = (/** @type {?} */ (schemeListDlg.content));
        instance.closeModal.subscribe((/**
         * @return {?}
         */
        () => {
            schemeListDlg.close();
        }));
        instance.submitModal.subscribe((/**
         * @param {?} t
         * @return {?}
         */
        (t) => {
            this.schemeService.updateScheme(t, gridInstance.id).subscribe((/**
             * @param {?} e
             * @return {?}
             */
            (e) => {
                if (e === false) {
                    schemeListDlg.close();
                    return;
                }
                /** @type {?} */
                const msg = '列设置方案保存成功。';
                if (this.notifyService) {
                    this.notifyService.success(msg);
                }
                else {
                    this.messager.success(msg);
                }
                /** @type {?} */
                const schemeList = this.schemeService.getStateValue(gridInstance.id, 'list');
                if (t.defaultId) {
                    schemeList.forEach((/**
                     * @param {?} n
                     * @return {?}
                     */
                    n => {
                        n.isDefault = false;
                        if (n.id === t.defaultId) {
                            n.isDefault = true;
                            // this.setActiveSchemeItem(gridInstance.id, n);
                        }
                    }));
                }
                /** @type {?} */
                let newSchemeList = schemeList;
                if (t.deletedIds && t.deletedIds.length) {
                    newSchemeList = schemeList.filter((/**
                     * @param {?} n
                     * @return {?}
                     */
                    n => {
                        return !t.deletedIds.includes(n.id);
                    }));
                }
                this.schemeService.setSchemeList(gridInstance.id, newSchemeList);
                schemeListDlg.close();
            }));
        }));
        /** @type {?} */
        const modalContainer = (/** @type {?} */ (schemeListDlg.dialog.instance));
        modalContainer.draggbar.handle = instance.header.nativeElement;
    }
    // 新增或另存方案
    /**
     * @private
     * @param {?} gridInstance
     * @param {?} simpleRef
     * @return {?}
     */
    showNewSchemeDialog(gridInstance, simpleRef) {
        /** @type {?} */
        const modalOpts = {
            width: 480, height: 269, showHeader: false, title: '控制面板',
            initialState: {
                languages: this.languages
            },
            showButtons: false,
            resizable: false
        };
        /** @type {?} */
        const newSchemeDlg = this.modalSer.show(NewSchemeComponent, modalOpts);
        /** @type {?} */
        const instance = (/** @type {?} */ (newSchemeDlg.content));
        instance.closeModal.subscribe((/**
         * @return {?}
         */
        () => {
            newSchemeDlg.close();
        }));
        instance.submitModal.pipe(switchMap((/**
         * @param {?} t
         * @return {?}
         */
        (t) => {
            return this.createNewScheme(gridInstance.id, t);
        }))).subscribe((/**
         * @param {?} t
         * @return {?}
         */
        (t) => {
            if (t.flag === false) {
                /** @type {?} */
                const msg = t.msg || '请输入方案名称';
                if (this.notifyService) {
                    this.notifyService.info(msg);
                }
                else {
                    this.messager.info(msg);
                }
                return;
            }
            // 更新方案列表
            /** @type {?} */
            const schemeList = this.schemeService.getStateValue(gridInstance.id, 'list') || [];
            if (t.isDefault) {
                schemeList.forEach((/**
                 * @param {?} n
                 * @return {?}
                 */
                n => {
                    n.isDefault = false;
                }));
            }
            schemeList.push(t);
            this.setActiveSchemeItem(gridInstance.id, t);
            this.schemeService.setSchemeList(gridInstance.id, schemeList);
            newSchemeDlg.close();
        }));
        instance.checkAuthority.pipe(switchMap((/**
         * @param {?} t
         * @return {?}
         */
        (t) => {
            return this.schemeService.checkAuthority().pipe(map((/**
             * @param {?} auth
             * @return {?}
             */
            (auth) => {
                return Object.assign({ type: t }, auth);
            })));
        }))).subscribe((/**
         * @param {?} t
         * @return {?}
         */
        (t) => {
            /** @type {?} */
            let hasAuthority = { public: true, org: true };
            /** @type {?} */
            let msg = '您没有将方案的使用范围设置为公共的权限。';
            if (t.type.value === 'org') {
                msg = '您没有将方案的使用范围设置为组织的权限。';
            }
            if (t.success) {
                /** @type {?} */
                const hasPublicAuthority = t.authOperationData && t.authOperationData.length;
                hasAuthority.public = hasPublicAuthority;
                /** @type {?} */
                const hasOrgAuthority = t.authOrganizationData && t.authOrganizationData.length;
                hasAuthority.org = hasOrgAuthority;
                if (t.type.value === 'public') {
                    instance.schemeInfo.type = t.type.value;
                }
                else if (t.type.value === 'org') {
                    if (!hasOrgAuthority) {
                        this.notifyService.warning(msg);
                    }
                    else {
                        instance.schemeInfo.type = t.type.value;
                        instance.schemeInfo.orgids = t.authOrganizationData.join(',');
                        instance.dataPermissionIds = t.authOrganizationData;
                    }
                }
            }
            else {
                this.notifyService.warning(msg);
                hasAuthority = { public: false, org: false };
                ;
            }
            instance.refresh(hasAuthority);
        }));
        /** @type {?} */
        const modalContainer = (/** @type {?} */ (newSchemeDlg.dialog.instance));
        modalContainer.draggbar.handle = instance.header.nativeElement;
    }
    /**
     * @param {?} gridId
     * @return {?}
     */
    getSchemeList(gridId) {
        return this.schemeService.getSchemeList(gridId);
    }
    /**
     * @param {?} gridId
     * @param {?} data
     * @return {?}
     */
    createNewScheme(gridId, data) {
        if (!data.name) {
            return of({ flag: false, msg: '请输入方案名称' });
        }
        else {
            /** @type {?} */
            const hasName = this.schemeService.hasSchemeName(gridId, data.name);
            if (typeof hasName === 'boolean' && hasName) {
                return of({ flag: false, msg: '方案名称已存在，请修改。' });
            }
            else if (Array.isArray(hasName) && hasName.length) {
                /** @type {?} */
                const msgs = hasName.map((/**
                 * @param {?} n
                 * @return {?}
                 */
                n => {
                    if (n === 'zh-CHS') {
                        return '简体中文名称已存在。';
                    }
                    else if (n === 'zh-CHT') {
                        return '繁体中文名称已存在。';
                    }
                    else {
                        return '英文名称已存在。';
                    }
                }));
                return of({ flag: false, msg: msgs.join('') });
            }
        }
        /** @type {?} */
        const requiredName = [];
        this.languages.forEach((/**
         * @param {?} n
         * @return {?}
         */
        n => {
            if (data.name[n.code] === '' || data.name[n.code] === undefined) {
                requiredName.push(n.code);
            }
        }));
        if (requiredName.length) {
            /** @type {?} */
            const msgs = requiredName.map((/**
             * @param {?} n
             * @return {?}
             */
            n => {
                if (n === 'zh-CHS') {
                    return '请输入简体中文名称。';
                }
                else if (n === 'zh-CHT') {
                    return '请输入繁体中文名称。';
                }
                else {
                    return '请输入英文名称。';
                }
            }));
            return of({ flag: false, msg: msgs.join('') });
        }
        if (data.type && data.type === 'org' && (!data.orgids || !data.orgids.length)) {
            return of({ flag: false, msg: '请选择组织' });
        }
        /** @type {?} */
        let _config = null;
        /** @type {?} */
        const selectedSettings = this.getCurrentSchemeSettings(gridId);
        if (selectedSettings) {
            _config = selectedSettings;
        }
        else {
            // 收集当前方案配置数据
            _config = this.buildSubmitData(gridId);
        }
        /** @type {?} */
        const newId = this.idService.guid();
        /** @type {?} */
        let isDefault = data.isDefault;
        if (isDefault) {
            if (data.type !== 'private') {
                isDefault = false;
            }
        }
        if (data.name && typeof data.name === 'object') {
            data.name = JSON.stringify(data.name);
        }
        /** @type {?} */
        const scheme = {
            id: newId,
            belongId: '',
            code: '',
            name: data.name,
            type: data.type,
            isDefault: isDefault,
            isSystem: false,
            extendId: 'datagrid-settings-scheme',
            extendInfo: this.buildOrgAndSchemeRelations(newId, data.orgids),
            queryConditionString: _config ? JSON.stringify(_config) : '',
        };
        return this.schemeService.saveScheme(scheme, gridId).pipe(map((/**
         * @return {?}
         */
        () => {
            return scheme;
        })));
    }
    /**
     * @param {?} schemeList
     * @param {?} gridId
     * @return {?}
     */
    setSchemeList(schemeList, gridId) {
        this.schemeService.update({ list: schemeList }, gridId);
    }
    /**
     * @private
     * @param {?} schemeId
     * @param {?} orgIds
     * @return {?}
     */
    buildOrgAndSchemeRelations(schemeId, orgIds) {
        if (!orgIds || !orgIds.length) {
            return [];
        }
        return orgIds.map((/**
         * @param {?} n
         * @return {?}
         */
        n => {
            return {
                id: this.idService.guid(),
                orgId: n,
                relatedId: schemeId
            };
        }));
    }
    /**
     * @private
     * @param {?} gridId
     * @return {?}
     */
    getCurrentSchemeSettings(gridId) {
        /** @type {?} */
        const activeScheme = (/** @type {?} */ (this.getActiveSchemeItem(gridId)));
        if (activeScheme && activeScheme.queryConditionString) {
            return JSON.parse(activeScheme.queryConditionString);
        }
        return null;
    }
}
DatagridSettingsService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
DatagridSettingsService.ctorParameters = () => [
    { type: Injector },
    { type: BsModalService },
    { type: MessagerService },
    { type: IdService },
    { type: LocaleService }
];
if (false) {
    /**
     * @type {?}
     * @private
     */
    DatagridSettingsService.prototype.multiSortMsg;
    /**
     * @type {?}
     * @private
     */
    DatagridSettingsService.prototype.columnsSortableMsg;
    /**
     * @type {?}
     * @private
     */
    DatagridSettingsService.prototype.notSupportHeaderGroupMsg;
    /**
     * @type {?}
     * @private
     */
    DatagridSettingsService.prototype.notShowDialog;
    /**
     * @type {?}
     * @private
     */
    DatagridSettingsService.prototype._httpRestService;
    /**
     * @type {?}
     * @private
     */
    DatagridSettingsService.prototype.languages;
    /**
     * @type {?}
     * @private
     */
    DatagridSettingsService.prototype.gridRefs;
    /**
     * @type {?}
     * @private
     */
    DatagridSettingsService.prototype.activeSchemeItem;
    /**
     * @type {?}
     * @private
     */
    DatagridSettingsService.prototype.saving;
    /**
     * @type {?}
     * @private
     */
    DatagridSettingsService.prototype.cfr;
    /**
     * @type {?}
     * @private
     */
    DatagridSettingsService.prototype.app;
    /**
     * @type {?}
     * @private
     */
    DatagridSettingsService.prototype.schemeListSubscription;
    /**
     * @type {?}
     * @private
     */
    DatagridSettingsService.prototype.schemeService;
    /**
     * @type {?}
     * @private
     */
    DatagridSettingsService.prototype.notifyService;
    /**
     * @type {?}
     * @private
     */
    DatagridSettingsService.prototype.injector;
    /**
     * @type {?}
     * @private
     */
    DatagridSettingsService.prototype.modalSer;
    /**
     * @type {?}
     * @private
     */
    DatagridSettingsService.prototype.messager;
    /**
     * @type {?}
     * @private
     */
    DatagridSettingsService.prototype.idService;
    /**
     * @type {?}
     * @private
     */
    DatagridSettingsService.prototype.localeSer;
    /* Skipping unhandled member: ;*/
}
//# sourceMappingURL=data:application/json;base64,