import { MetadataUtil } from '../../metadata/index';
import { NG_FIELD, NG_OBJECT, NG_Dynamic, NG_LIST } from './field_decorator';
// import { Cacheable, DefaultCacheProvider } from '../../cache';
/**
 * 属性注解器通用方法
 */
export class FieldMetadataUtil {
    /**
     * 获取实体所有的简单属性元数据
     * @param target 实体类型
     * @returns 形如：{[propName: string]: NgObjectProperty}
     */
    //@Cacheable({ key: ((context: any, args: any[]) => args[0]), provider: new DefaultCacheProvider() })
    static getNgFields(target) {
        return MetadataUtil.getPropsMetadatasByName(target, NG_FIELD);
    }
    /**
     * 获取某个简单属性的元数据
     */
    static getNgField(target, propName) {
        const ngFields = this.getNgFields(target);
        const ngField = ngFields[propName];
        return ngField;
    }
    /**
     * 获取实体属性在原始数据中的属性名
     */
    static getDataField(target, propName) {
        const ngField = this.getNgField(target, propName);
        return ngField.dataField || propName;
    }
    /**
     * 获取标注为NgObject的属性的元数据
     * @param target 实体类型
     * @returns 形如：{[propName: string]: NgObjectProperty}
     */
    //@Cacheable({ key: ((context: any, args: any[]) => args[0]), provider: new DefaultCacheProvider() })
    static getNgObjects(target) {
        return MetadataUtil.getPropsMetadatasByName(target, NG_OBJECT);
    }
    static getNgDynamic(target) {
        return MetadataUtil.getPropsMetadatasByName(target, NG_Dynamic);
    }
    /**
     * 获取标注为NgList的属性的元数据
     * @param target 实体类型
     * @returns 形如：{[propName: string]: NgListProperty}
     */
    //@Cacheable({ key: ((context: any, args: any[]) => args[0]), provider: new DefaultCacheProvider() })
    static getNgList(target) {
        return MetadataUtil.getPropsMetadatasByName(target, NG_LIST);
    }
    /**
     * 获取实体标注为主键的属性元数据
     * @param target 实体类型
     */
    //@Cacheable({ key: ((context: any, args: any[]) => args[0]), provider: new DefaultCacheProvider() })
    static getPrimaryFieldMetadata(target) {
        const ngFieldObj = FieldMetadataUtil.getNgFields(target);
        const primaryKey = Object.keys(ngFieldObj).find((prop) => {
            return ngFieldObj[prop].primary;
        });
        if (primaryKey) {
            const propMeta = ngFieldObj[primaryKey];
            propMeta.property = primaryKey;
            if (!propMeta.dataField) {
                propMeta.dataField = primaryKey;
            }
            return propMeta;
        }
        return undefined;
    }
    /**
     * 获取主键名称，没有主键时返回空字符串
     */
    //@Cacheable({ key: ((context: any, args: any[]) => args[0]), provider: new DefaultCacheProvider() })
    static getPrimaryKey(entityType) {
        const primaryNgField = this.getPrimaryFieldMetadata(entityType);
        if (!primaryNgField) {
            return '';
        }
        return primaryNgField.property;
    }
    // static udtMap = {};
    /**
     * 获取NgField 的验证规则元数据
     * @param target 实体类Type
     */
    //@Cacheable({ key: ((context: any, args: any[]) => args[0]), provider: new DefaultCacheProvider() })
    static getValidationMetadata(target) {
        const fieldMetadatas = FieldMetadataUtil.getNgFields(target);
        // this.udtMap = Object.assign(this.udtMap || {}, FieldMetadataUtil.getNgObjects(target) || {});
        // let udtParentName = '';
        // Object.keys(this.udtMap).forEach(key => {
        //   // 当前实体是udt类型时
        //   if (this.udtMap[key].type.name === target.name) {
        //     // 找出当前udt实体的父级信息
        //     udtParentName = key;
        //   }
        // });
        const metadatas = {};
        // let primaryId = '';
        // let udtPrimaryId = '';
        // 不进行验证的属性名
        // const excludeIDs = [];
        // 排除udt的主键
        // Object.keys(fieldMetadatas).forEach(key => {
        //   if (fieldMetadatas[key].primary || fieldMetadatas[key].foreign) {
        //     primaryId = fieldMetadatas[key].dataField;
        //     udtPrimaryId = fieldMetadatas[key].dataField + '_ID';
        //     excludeIDs.push(fieldMetadatas[key].dataField);
        //   }
        // });
        Object.keys(fieldMetadatas).forEach(key => {
            if (fieldMetadatas[key].primary || fieldMetadatas[key].foreign) {
                return;
            }
            const validRules = fieldMetadatas[key].validRules;
            // if (excludeIDs.indexOf(key) > -1) {
            //   return;
            // }
            if (validRules && validRules.length) {
                validRules.map(rule => {
                    rule.property = key;
                    rule['targetName'] = target.name;
                });
                metadatas[key] = validRules;
            }
        });
        return metadatas;
    }
    //@Cacheable({ key: ((context: any, args: any[]) => args[0]), provider: new DefaultCacheProvider() })
    static getValidationMetadataWithPath(object) {
        const target = object.constructor;
        const fieldMetadatas = FieldMetadataUtil.getNgFields(target);
        const parentPaths = object.getPaths().path || [];
        const metadatas = {};
        Object.keys(fieldMetadatas).forEach(key => {
            if (fieldMetadatas[key].primary || fieldMetadatas[key].foreign) {
                return;
            }
            const validRules = fieldMetadatas[key].validRules;
            if (validRules && validRules.length) {
                const propertyPath = parentPaths.concat([]);
                propertyPath.push(key);
                const property = propertyPath.join('.');
                validRules.map(rule => {
                    rule.property = key;
                    rule['targetName'] = target.name;
                    rule['path'] = property;
                });
                metadatas[key] = validRules;
            }
        });
        return metadatas;
    }
}
//# sourceMappingURL=data:application/json;base64,