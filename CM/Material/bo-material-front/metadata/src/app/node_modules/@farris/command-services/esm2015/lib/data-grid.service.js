import { Injectable } from "@angular/core";
import { Service } from "./service";
import { DatagridComponent } from '@farris/ui-datagrid';
export class DataGridService extends Service {
    /**
     * 清空所有勾选行
     * @description 取消勾选当前表单所有勾选行
     */
    clearChecks() {
        // const params = this.eventParam;
        // if (params && Array.isArray(params)) {
        // const param = params[0];
        // if (param instanceof QueryCondition) {
        const gridComponents = this.getFormGridComponents(this.context);
        if (gridComponents && gridComponents.length > 0) {
            gridComponents.forEach((gridComponent) => {
                let clearSelections = true;
                if (gridComponent.hasOwnProperty('clearSelectionsWhenDataIsEmpty')) {
                    clearSelections = gridComponent['clearSelectionsWhenDataIsEmpty'];
                }
                if (clearSelections) {
                    gridComponent.clearCheckeds(true);
                }
            });
        }
        // }
        // }
    }
    /**
     * 取消勾选删除的行
     * @param ids ids
     * @returns
     * @description 取消勾选当前绑定路径下指定数据，清空下级表格中所有勾选行，仅供删除场景使用
     */
    uncheckDeletedRows(ids) {
        if (typeof ids === 'string') {
            if (ids.indexOf(',') !== -1) {
                ids = ids.split(',').filter(p => p);
            }
            else {
                ids = [ids];
            }
        }
        if (!ids || ids.length < 1) {
            return;
        }
        // 获取bindingPath及ns
        const frameContext = this.context.frameContext;
        if (!frameContext) {
            return;
        }
        const appContext = frameContext.appContext;
        const ns = frameContext.namespace;
        const bindingPath = frameContext.viewModel && frameContext.viewModel.bindingPath;
        if (!appContext) {
            return;
        }
        // 根据bindingPath获取所有可能的frameContext
        const frameContexts = appContext.frameContextManager.getFrameContextsByNamespace(ns);
        const frameContextsInCurrentBindingPath = frameContexts.filter(frameContext => frameContext && frameContext.viewModel && frameContext.viewModel.bindingPath === bindingPath);
        // 获取这些frame中所有的表格组件map
        const gridInCurrentFrame = this.getGridComponentByFrameContexts(frameContextsInCurrentBindingPath);
        if (!gridInCurrentFrame) {
            return;
        }
        // 一个bindingPath下应该只有一个grid
        const grid = gridInCurrentFrame.pop();
        // 清空命令所在的frame下表格的指定勾选
        if (grid) {
            grid.unCheckRows(ids, true);
        }
        // 清空下级表格的所有勾选行数据
        const childrenFrameContexts = frameContexts.filter(frameContext => frameContext.viewModel.bindingPath !== bindingPath && frameContext.viewModel.bindingPath.startsWith(bindingPath));
        const childrenGridComponents = this.getGridComponentByFrameContexts(childrenFrameContexts);
        // 清空命令所在frame
        if (childrenGridComponents && childrenGridComponents.length > 0) {
            childrenGridComponents.forEach((gridComponent) => {
                // 清空所有勾选
                gridComponent.checkedRows = [];
            });
        }
    }
    /**
     * 取消勾选行
     * @param ids ids
     * @returns
     */
    uncheckRows(ids) {
        if (typeof ids === 'string') {
            ids = [ids];
        }
        if (!ids || ids.length < 1) {
            return;
        }
        const gridComponents = this.getFormGridComponents(this.context);
        if (gridComponents && gridComponents.length > 0) {
            gridComponents.forEach((gridComponent) => {
                gridComponent.unCheckRows(ids, true);
            });
        }
    }
    /**
     * 根据命令上下文获取当前命令所在组件的表格实例
     * @param commandContext 命令上下文
     * @returns
     */
    getFormGridComponents(commandContext) {
        let grids = [];
        const frameContext = commandContext && commandContext.frameContext;
        const appContext = frameContext && frameContext.appContext || null;
        if (appContext) {
            const componentRefs = appContext.componentRefs;
            const collect = Array.from(componentRefs.values()); // [Map<string,any>,Map<string,any>]
            collect.forEach((item) => {
                const components = Array.from(item.values());
                const bindingPath = frameContext;
                const gridComponents = components.filter((component) => component instanceof DatagridComponent);
                grids = grids.concat(gridComponents);
            });
        }
        return grids;
    }
    getGridComponentByFrameContexts(frameContexts) {
        return frameContexts.reduce((result, frameContext) => {
            const appContext = frameContext.appContext;
            const frameId = frameContext.frameId;
            // 获取当前组件下所有的组件实例
            const componentsRef = appContext.componentRefs.get(frameId);
            const grids = componentsRef && Array.from(componentsRef.values()).filter(component => component instanceof DatagridComponent);
            if (grids && grids.length > 0) {
                result = result.concat(grids);
            }
            return result;
        }, []);
    }
}
DataGridService.decorators = [
    { type: Injectable }
];
//# sourceMappingURL=data:application/json;base64,