/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { LocaleService } from '@farris/ui-locale';
import { Injectable, ApplicationRef, ComponentFactoryResolver, Injector, ElementRef } from '@angular/core';
import { LOADING_DEFAULT_CONFIG, loaddingDefaultConfig } from './loading.config';
import { LoadingComponent } from './loading.component';
import { max } from 'lodash-es';
export class LoadingService {
    /**
     * @param {?} appRef
     * @param {?} cfr
     * @param {?} injecotr
     */
    constructor(appRef, cfr, injecotr) {
        this.appRef = appRef;
        this.cfr = cfr;
        this.injecotr = injecotr;
        this.currentLoadingInstanceID = null;
        this.loadingInstances = {};
        this.localeSer = this.injecotr.get(LocaleService);
    }
    /**
     * @param {?=} config
     * @return {?}
     */
    show(config) {
        this.config = this.injecotr.get(LOADING_DEFAULT_CONFIG) || {};
        this.config = Object.assign(loaddingDefaultConfig, this.config);
        /** @type {?} */
        let _loadingCmpRef;
        /** @type {?} */
        const loadingFactory = this.cfr.resolveComponentFactory(LoadingComponent);
        _loadingCmpRef = loadingFactory.create(this.injecotr);
        if (config) {
            this.config = Object.assign({}, this.config, config);
        }
        /** @type {?} */
        const languageCode = localStorage.getItem('languageCode');
        // if (languageCode === 'en') {
        //     this.config.message = 'Loading...';
        // }
        if (this.localeSer) {
            if (!this.config.message || this.config.message === '正在加载中，请稍候...') {
                this.config.message = this.localeSer.getValue('loading.message');
            }
        }
        /** @type {?} */
        const container = this.config.container;
        if (container === 'body') {
            document.querySelector((/** @type {?} */ (container))).appendChild(_loadingCmpRef.location.nativeElement);
        }
        else {
            if (container instanceof ElementRef) {
                container.nativeElement.appendChild(_loadingCmpRef.location.nativeElement);
            }
            else {
                if (container instanceof Element) {
                    container.appendChild(_loadingCmpRef.location.nativeElement);
                }
            }
        }
        _loadingCmpRef.instance.delay = this.config.delay;
        _loadingCmpRef.instance.isActive = true;
        Object.assign(_loadingCmpRef.instance, this.config);
        _loadingCmpRef.instance.closed.subscribe((/**
         * @param {?} state
         * @return {?}
         */
        state => {
            if (!state) {
                delete this.loadingInstances[_loadingCmpRef.instance.id];
                this.currentLoadingInstanceID = this.getMaxLoadingID();
                this.clearDom(_loadingCmpRef);
            }
        }));
        _loadingCmpRef.changeDetectorRef.markForCheck();
        _loadingCmpRef.changeDetectorRef.detectChanges();
        /** @type {?} */
        const loadingID = this.createInsId();
        _loadingCmpRef.instance.id = loadingID;
        this.loadingInstances[loadingID] = _loadingCmpRef;
        this.currentLoadingInstanceID = loadingID;
        return _loadingCmpRef.instance;
    }
    /**
     * @param {?=} loadingId
     * @return {?}
     */
    close(loadingId) {
        /** @type {?} */
        const id = loadingId || this.currentLoadingInstanceID;
        /** @type {?} */
        const loadingRef = this.loadingInstances[id];
        if (loadingRef) {
            loadingRef.instance.close();
        }
    }
    /**
     * @return {?}
     */
    clearAll() {
        /** @type {?} */
        const keys = Object.keys(this.loadingInstances);
        if (keys.length) {
            keys.forEach((/**
             * @param {?} id
             * @return {?}
             */
            id => {
                this.clearDom(this.loadingInstances[id]);
            }));
        }
        else {
            /** @type {?} */
            const loadings = document.querySelectorAll('farris-loading');
            if (loadings.length) {
                loadings.forEach((/**
                 * @param {?} el
                 * @return {?}
                 */
                el => el.remove()));
            }
            this.loadingInstances = {};
        }
    }
    /**
     * @private
     * @param {?} _loadingCmpRef
     * @return {?}
     */
    clearDom(_loadingCmpRef) {
        if (_loadingCmpRef && _loadingCmpRef.location) {
            /** @type {?} */
            const loadingEl = _loadingCmpRef.location.nativeElement;
            if (loadingEl.parentNode) {
                loadingEl.parentNode.removeChild(loadingEl);
            }
            _loadingCmpRef.destroy();
        }
        _loadingCmpRef = null;
    }
    /**
     * @private
     * @return {?}
     */
    createInsId() {
        return this.getMaxLoadingID() + 1;
    }
    /**
     * @private
     * @return {?}
     */
    getMaxLoadingID() {
        /** @type {?} */
        const ids = Object.keys(this.loadingInstances).map((/**
         * @param {?} k
         * @return {?}
         */
        k => parseInt(k, 10)));
        if (ids.length) {
            return max(ids);
        }
        return 0;
    }
}
LoadingService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
LoadingService.ctorParameters = () => [
    { type: ApplicationRef },
    { type: ComponentFactoryResolver },
    { type: Injector }
];
if (false) {
    /** @type {?} */
    LoadingService.prototype.config;
    /**
     * @type {?}
     * @private
     */
    LoadingService.prototype.currentLoadingInstanceID;
    /**
     * @type {?}
     * @private
     */
    LoadingService.prototype.loadingInstances;
    /**
     * @type {?}
     * @private
     */
    LoadingService.prototype.localeSer;
    /**
     * @type {?}
     * @private
     */
    LoadingService.prototype.appRef;
    /**
     * @type {?}
     * @private
     */
    LoadingService.prototype.cfr;
    /**
     * @type {?}
     * @private
     */
    LoadingService.prototype.injecotr;
}
//# sourceMappingURL=data:application/json;base64,