/**
 * @fileoverview added by tsickle
 * Generated from: lib/bill-tracker/args/GetJointQueryParametersArgs.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { BpmnModelJsonHelper, JsonConvertableImpl } from "@edp-aif/common-api";
import { JointQueryParametersContent } from "../../entity/tracking/JointQueryParametersContent";
export class GetJointQueryParametersArgs extends JsonConvertableImpl {
    constructor() {
        super(...arguments);
        this.contents = [];
    }
    /**
     * @protected
     * @return {?}
     */
    ResetBeforeLoadFrom() {
        super.ResetBeforeLoadFrom();
        this.trackingSourceType = null;
        this.suCode = null;
        this.schemaId = null;
        this.dataId = null;
        this.contents = [];
    }
    /**
     * @return {?}
     */
    ConvertToJsonObject() {
        /** @type {?} */
        let obj = super.ConvertToJsonObject();
        BpmnModelJsonHelper.SetAttributeValue(obj, "trackingSourceType", this.trackingSourceType);
        BpmnModelJsonHelper.SetAttributeValue(obj, "suCode", this.suCode);
        BpmnModelJsonHelper.SetAttributeValue(obj, "schemaId", this.schemaId);
        BpmnModelJsonHelper.SetAttributeValue(obj, "dataId", this.dataId);
        BpmnModelJsonHelper.SetAttributeValue(obj, "contents", this.contents);
        return obj;
    }
    /**
     * @param {?} obj
     * @return {?}
     */
    LoadFromJsonObject(obj) {
        super.LoadFromJsonObject(obj);
        this.trackingSourceType = BpmnModelJsonHelper.GetAttributeValueAsString(obj, "trackingSourceType");
        this.suCode = BpmnModelJsonHelper.GetAttributeValueAsString(obj, "suCode");
        this.schemaId = BpmnModelJsonHelper.GetAttributeValueAsString(obj, "schemaId");
        this.dataId = BpmnModelJsonHelper.GetAttributeValueAsString(obj, "dataId");
        this.contents = BpmnModelJsonHelper.GetAttributeValueAsList(obj, "contents", JointQueryParametersContent);
    }
}
if (false) {
    /** @type {?} */
    GetJointQueryParametersArgs.prototype.trackingSourceType;
    /** @type {?} */
    GetJointQueryParametersArgs.prototype.suCode;
    /** @type {?} */
    GetJointQueryParametersArgs.prototype.schemaId;
    /** @type {?} */
    GetJointQueryParametersArgs.prototype.dataId;
    /** @type {?} */
    GetJointQueryParametersArgs.prototype.contents;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiR2V0Sm9pbnRRdWVyeVBhcmFtZXRlcnNBcmdzLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGVkcC1iaWYvcnVudGltZS1hcGkvIiwic291cmNlcyI6WyJsaWIvYmlsbC10cmFja2VyL2FyZ3MvR2V0Sm9pbnRRdWVyeVBhcmFtZXRlcnNBcmdzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsT0FBTyxFQUFFLG1CQUFtQixFQUFFLG1CQUFtQixFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFDL0UsT0FBTyxFQUFFLDJCQUEyQixFQUFFLE1BQU0sbURBQW1ELENBQUM7QUFFaEcsTUFBTSxPQUFPLDJCQUE0QixTQUFRLG1CQUFtQjtJQUFwRTs7UUFLSSxhQUFRLEdBQWtDLEVBQUUsQ0FBQztJQWlDakQsQ0FBQzs7Ozs7SUEvQmEsbUJBQW1CO1FBQ3pCLEtBQUssQ0FBQyxtQkFBbUIsRUFBRSxDQUFDO1FBRTVCLElBQUksQ0FBQyxrQkFBa0IsR0FBRyxJQUFJLENBQUM7UUFDL0IsSUFBSSxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUM7UUFDbkIsSUFBSSxDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUM7UUFDckIsSUFBSSxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUM7UUFDbkIsSUFBSSxDQUFDLFFBQVEsR0FBRyxFQUFFLENBQUM7SUFDdkIsQ0FBQzs7OztJQUVNLG1CQUFtQjs7WUFDbEIsR0FBRyxHQUFHLEtBQUssQ0FBQyxtQkFBbUIsRUFBRTtRQUVyQyxtQkFBbUIsQ0FBQyxpQkFBaUIsQ0FBQyxHQUFHLEVBQUUsb0JBQW9CLEVBQUUsSUFBSSxDQUFDLGtCQUFrQixDQUFDLENBQUM7UUFDMUYsbUJBQW1CLENBQUMsaUJBQWlCLENBQUMsR0FBRyxFQUFFLFFBQVEsRUFBRSxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDbEUsbUJBQW1CLENBQUMsaUJBQWlCLENBQUMsR0FBRyxFQUFFLFVBQVUsRUFBRSxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7UUFDdEUsbUJBQW1CLENBQUMsaUJBQWlCLENBQUMsR0FBRyxFQUFFLFFBQVEsRUFBRSxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDbEUsbUJBQW1CLENBQUMsaUJBQWlCLENBQUMsR0FBRyxFQUFFLFVBQVUsRUFBRSxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7UUFFdEUsT0FBTyxHQUFHLENBQUM7SUFDZixDQUFDOzs7OztJQUVNLGtCQUFrQixDQUFDLEdBQU87UUFDN0IsS0FBSyxDQUFDLGtCQUFrQixDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBRTlCLElBQUksQ0FBQyxrQkFBa0IsR0FBRyxtQkFBbUIsQ0FBQyx5QkFBeUIsQ0FBQyxHQUFHLEVBQUUsb0JBQW9CLENBQUMsQ0FBQztRQUNuRyxJQUFJLENBQUMsTUFBTSxHQUFHLG1CQUFtQixDQUFDLHlCQUF5QixDQUFDLEdBQUcsRUFBRSxRQUFRLENBQUMsQ0FBQztRQUMzRSxJQUFJLENBQUMsUUFBUSxHQUFHLG1CQUFtQixDQUFDLHlCQUF5QixDQUFDLEdBQUcsRUFBRSxVQUFVLENBQUMsQ0FBQztRQUMvRSxJQUFJLENBQUMsTUFBTSxHQUFHLG1CQUFtQixDQUFDLHlCQUF5QixDQUFDLEdBQUcsRUFBRSxRQUFRLENBQUMsQ0FBQztRQUMzRSxJQUFJLENBQUMsUUFBUSxHQUFHLG1CQUFtQixDQUFDLHVCQUF1QixDQUFDLEdBQUcsRUFBRSxVQUFVLEVBQUUsMkJBQTJCLENBQUMsQ0FBQztJQUM5RyxDQUFDO0NBQ0o7OztJQXJDRyx5REFBMkI7O0lBQzNCLDZDQUFlOztJQUNmLCtDQUFpQjs7SUFDakIsNkNBQWU7O0lBQ2YsK0NBQTZDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQnBtbk1vZGVsSnNvbkhlbHBlciwgSnNvbkNvbnZlcnRhYmxlSW1wbCB9IGZyb20gXCJAZWRwLWFpZi9jb21tb24tYXBpXCI7XHJcbmltcG9ydCB7IEpvaW50UXVlcnlQYXJhbWV0ZXJzQ29udGVudCB9IGZyb20gXCIuLi8uLi9lbnRpdHkvdHJhY2tpbmcvSm9pbnRRdWVyeVBhcmFtZXRlcnNDb250ZW50XCI7XHJcblxyXG5leHBvcnQgY2xhc3MgR2V0Sm9pbnRRdWVyeVBhcmFtZXRlcnNBcmdzIGV4dGVuZHMgSnNvbkNvbnZlcnRhYmxlSW1wbCB7XHJcbiAgICB0cmFja2luZ1NvdXJjZVR5cGU6IHN0cmluZztcclxuICAgIHN1Q29kZTogc3RyaW5nO1xyXG4gICAgc2NoZW1hSWQ6IHN0cmluZztcclxuICAgIGRhdGFJZDogc3RyaW5nO1xyXG4gICAgY29udGVudHM6IEpvaW50UXVlcnlQYXJhbWV0ZXJzQ29udGVudFtdID0gW107XHJcblxyXG4gICAgcHJvdGVjdGVkIFJlc2V0QmVmb3JlTG9hZEZyb20oKTogdm9pZCB7XHJcbiAgICAgICAgc3VwZXIuUmVzZXRCZWZvcmVMb2FkRnJvbSgpO1xyXG5cclxuICAgICAgICB0aGlzLnRyYWNraW5nU291cmNlVHlwZSA9IG51bGw7XHJcbiAgICAgICAgdGhpcy5zdUNvZGUgPSBudWxsO1xyXG4gICAgICAgIHRoaXMuc2NoZW1hSWQgPSBudWxsO1xyXG4gICAgICAgIHRoaXMuZGF0YUlkID0gbnVsbDtcclxuICAgICAgICB0aGlzLmNvbnRlbnRzID0gW107XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIENvbnZlcnRUb0pzb25PYmplY3QoKToge30ge1xyXG4gICAgICAgIGxldCBvYmogPSBzdXBlci5Db252ZXJ0VG9Kc29uT2JqZWN0KCk7XHJcblxyXG4gICAgICAgIEJwbW5Nb2RlbEpzb25IZWxwZXIuU2V0QXR0cmlidXRlVmFsdWUob2JqLCBcInRyYWNraW5nU291cmNlVHlwZVwiLCB0aGlzLnRyYWNraW5nU291cmNlVHlwZSk7XHJcbiAgICAgICAgQnBtbk1vZGVsSnNvbkhlbHBlci5TZXRBdHRyaWJ1dGVWYWx1ZShvYmosIFwic3VDb2RlXCIsIHRoaXMuc3VDb2RlKTtcclxuICAgICAgICBCcG1uTW9kZWxKc29uSGVscGVyLlNldEF0dHJpYnV0ZVZhbHVlKG9iaiwgXCJzY2hlbWFJZFwiLCB0aGlzLnNjaGVtYUlkKTtcclxuICAgICAgICBCcG1uTW9kZWxKc29uSGVscGVyLlNldEF0dHJpYnV0ZVZhbHVlKG9iaiwgXCJkYXRhSWRcIiwgdGhpcy5kYXRhSWQpO1xyXG4gICAgICAgIEJwbW5Nb2RlbEpzb25IZWxwZXIuU2V0QXR0cmlidXRlVmFsdWUob2JqLCBcImNvbnRlbnRzXCIsIHRoaXMuY29udGVudHMpO1xyXG5cclxuICAgICAgICByZXR1cm4gb2JqO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBMb2FkRnJvbUpzb25PYmplY3Qob2JqOiB7fSk6IHZvaWQge1xyXG4gICAgICAgIHN1cGVyLkxvYWRGcm9tSnNvbk9iamVjdChvYmopO1xyXG5cclxuICAgICAgICB0aGlzLnRyYWNraW5nU291cmNlVHlwZSA9IEJwbW5Nb2RlbEpzb25IZWxwZXIuR2V0QXR0cmlidXRlVmFsdWVBc1N0cmluZyhvYmosIFwidHJhY2tpbmdTb3VyY2VUeXBlXCIpO1xyXG4gICAgICAgIHRoaXMuc3VDb2RlID0gQnBtbk1vZGVsSnNvbkhlbHBlci5HZXRBdHRyaWJ1dGVWYWx1ZUFzU3RyaW5nKG9iaiwgXCJzdUNvZGVcIik7XHJcbiAgICAgICAgdGhpcy5zY2hlbWFJZCA9IEJwbW5Nb2RlbEpzb25IZWxwZXIuR2V0QXR0cmlidXRlVmFsdWVBc1N0cmluZyhvYmosIFwic2NoZW1hSWRcIik7XHJcbiAgICAgICAgdGhpcy5kYXRhSWQgPSBCcG1uTW9kZWxKc29uSGVscGVyLkdldEF0dHJpYnV0ZVZhbHVlQXNTdHJpbmcob2JqLCBcImRhdGFJZFwiKTtcclxuICAgICAgICB0aGlzLmNvbnRlbnRzID0gQnBtbk1vZGVsSnNvbkhlbHBlci5HZXRBdHRyaWJ1dGVWYWx1ZUFzTGlzdChvYmosIFwiY29udGVudHNcIiwgSm9pbnRRdWVyeVBhcmFtZXRlcnNDb250ZW50KTtcclxuICAgIH1cclxufSJdfQ==