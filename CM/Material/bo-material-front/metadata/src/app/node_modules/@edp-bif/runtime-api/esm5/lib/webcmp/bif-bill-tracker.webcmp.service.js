/**
 * @fileoverview added by tsickle
 * Generated from: lib/webcmp/bif-bill-tracker.webcmp.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable, Optional } from '@angular/core';
import { BillTrackerUiService } from '../bill-tracker/services/bill-tracker-ui.service';
import { GetBillsInfoArgs } from '../entity/tracking/GetBillsInfoArgs';
import { BindingData, ViewModel, FrameContext } from '@farris/devkit';
import { canJSONParse } from '../utils/ObjectUtils';
/**
 * 单据追踪web构件服务类
 */
var BifBillTrackerWebCmpService = /** @class */ (function () {
    function BifBillTrackerWebCmpService(trackerUiService, bindingData, viewModel, frameContext) {
        this.trackerUiService = trackerUiService;
        this.bindingData = bindingData;
        this.viewModel = viewModel;
        this.frameContext = frameContext;
    }
    /**
     * 打开单据追踪弹窗
     * @param args 单据Id或者单据查询参数
     * @param maximized 是否最大化弹窗
     * @param modalOptions 弹窗配置
     * @param graphOptions 单据追踪图配置
     * @param gridOptions 单据追踪数据表配置
     * @returns billTrackerComponent 单据追踪组件 @type { Observable<BillTrackerComponent> }
     */
    /**
     * 打开单据追踪弹窗
     * @param {?} args 单据Id或者单据查询参数
     * @param {?=} maximized 是否最大化弹窗
     * @param {?=} modalOptions 弹窗配置
     * @param {?=} graphOptions 单据追踪图配置
     * @param {?=} gridOptions 单据追踪数据表配置
     * @return {?} billTrackerComponent 单据追踪组件 \@type { Observable<BillTrackerComponent> }
     */
    BifBillTrackerWebCmpService.prototype.openDialog = /**
     * 打开单据追踪弹窗
     * @param {?} args 单据Id或者单据查询参数
     * @param {?=} maximized 是否最大化弹窗
     * @param {?=} modalOptions 弹窗配置
     * @param {?=} graphOptions 单据追踪图配置
     * @param {?=} gridOptions 单据追踪数据表配置
     * @return {?} billTrackerComponent 单据追踪组件 \@type { Observable<BillTrackerComponent> }
     */
    function (args, maximized, modalOptions, graphOptions, gridOptions) {
        if (typeof args == "string" && canJSONParse((/** @type {?} */ (args)))) {
            args = JSON.parse((/** @type {?} */ (args)));
        }
        else {
            args = (/** @type {?} */ (args));
        }
        maximized = (/** @type {?} */ (maximized)) === "" || maximized == null ? undefined : maximized;
        modalOptions = (/** @type {?} */ (modalOptions)) === "" || modalOptions == null ? undefined : modalOptions;
        graphOptions = (/** @type {?} */ (graphOptions)) === "" || graphOptions == null ? undefined : graphOptions;
        gridOptions = (/** @type {?} */ (gridOptions)) === "" || gridOptions == null ? undefined : gridOptions;
        /** @type {?} */
        var argz = new GetBillsInfoArgs();
        if (typeof args == "string") {
            argz.billDataId = args;
        }
        else {
            argz.LoadFromJsonObject(args);
        }
        return this.trackerUiService.openDefaultBillTrackerDialog(argz, maximized, modalOptions, graphOptions, gridOptions);
    };
    /**
     * 打开单据追踪App
     * @param args 单据Id或者单据查询参数
     * @param graphOptions 单据追踪图配置
     * @param gridOptions 单据追踪数据表配置
     */
    /**
     * 打开单据追踪App
     * @param {?} args 单据Id或者单据查询参数
     * @param {?=} graphOptions 单据追踪图配置
     * @param {?=} gridOptions 单据追踪数据表配置
     * @return {?}
     */
    BifBillTrackerWebCmpService.prototype.openApp = /**
     * 打开单据追踪App
     * @param {?} args 单据Id或者单据查询参数
     * @param {?=} graphOptions 单据追踪图配置
     * @param {?=} gridOptions 单据追踪数据表配置
     * @return {?}
     */
    function (args, graphOptions, gridOptions) {
        if (typeof args == "string" && canJSONParse((/** @type {?} */ (args)))) {
            args = JSON.parse((/** @type {?} */ (args)));
        }
        else {
            args = (/** @type {?} */ (args));
        }
        graphOptions = (/** @type {?} */ (graphOptions)) === "" || graphOptions == null ? undefined : graphOptions;
        gridOptions = (/** @type {?} */ (gridOptions)) === "" || gridOptions == null ? undefined : gridOptions;
        /** @type {?} */
        var argz = new GetBillsInfoArgs();
        if (typeof args == "string") {
            argz.billDataId = args;
        }
        else {
            argz.LoadFromJsonObject(args);
        }
        this.trackerUiService.openDefaultBillTrackerApp(argz, graphOptions, gridOptions);
    };
    BifBillTrackerWebCmpService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    BifBillTrackerWebCmpService.ctorParameters = function () { return [
        { type: BillTrackerUiService },
        { type: BindingData, decorators: [{ type: Optional }] },
        { type: ViewModel, decorators: [{ type: Optional }] },
        { type: FrameContext, decorators: [{ type: Optional }] }
    ]; };
    return BifBillTrackerWebCmpService;
}());
export { BifBillTrackerWebCmpService };
if (false) {
    /** @type {?} */
    BifBillTrackerWebCmpService.prototype.trackerUiService;
    /** @type {?} */
    BifBillTrackerWebCmpService.prototype.bindingData;
    /** @type {?} */
    BifBillTrackerWebCmpService.prototype.viewModel;
    /** @type {?} */
    BifBillTrackerWebCmpService.prototype.frameContext;
}
//# sourceMappingURL=data:application/json;base64,