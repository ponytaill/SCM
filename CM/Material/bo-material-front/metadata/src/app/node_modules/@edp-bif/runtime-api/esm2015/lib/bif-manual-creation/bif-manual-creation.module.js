/**
 * @fileoverview added by tsickle
 * Generated from: lib/bif-manual-creation/bif-manual-creation.module.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { NgModule, LOCALE_ID, NgModuleFactoryLoader, SystemJsNgModuleLoader } from '@angular/core';
import { CommonModule } from '@angular/common';
import { FormsModule } from '@angular/forms';
import { HttpClientModule } from '@angular/common/http';
import { ModalModule } from '@farris/ui-modal';
import { NotifyModule } from '@farris/ui-notify';
import { MessagerModule } from '@farris/ui-messager';
import { FarrisDialogModule } from '@farris/ui-dialog';
import { ModuleConfig } from './config/module.config';
import { PushSelectorComponent } from './components/push-selector/push-selector.component';
import { PullSelectorComponent } from './components/pull-selector/pull-selector.component';
import { LocalePipe } from "./pipe/locale.pipe";
import { BifDataService } from './service/bif-data.service';
import { BifSourceUiService } from './service/bif-source-ui.service';
import { BifTargetUiService } from './service/bif-target-ui.service';
import { LoadingModule } from '@farris/ui-loading';
const ɵ0 = localStorage.getItem('languageCode') || 'zh-CHS', ɵ1 = {};
export class BifManualCreationModule {
    /**
     * @param {?=} config
     * @return {?}
     */
    static forRoot(config) {
        /** @type {?} */
        const providers = [
            { provide: ModuleConfig, useValue: config || {} },
            BifDataService,
            BifSourceUiService,
            BifTargetUiService,
        ];
        return {
            ngModule: BifManualCreationModule,
            providers: providers
        };
    }
}
BifManualCreationModule.decorators = [
    { type: NgModule, args: [{
                declarations: [
                    PushSelectorComponent,
                    PullSelectorComponent,
                    LocalePipe,
                ],
                imports: [
                    CommonModule,
                    FormsModule,
                    HttpClientModule,
                    ModalModule.forRoot(),
                    NotifyModule.forRoot(),
                    MessagerModule.forRoot(),
                    FarrisDialogModule.forRoot(),
                    LoadingModule.forRoot(),
                ],
                providers: [
                    { provide: LOCALE_ID, useValue: ɵ0 },
                    { provide: ModuleConfig, useValue: ɵ1 },
                    { provide: NgModuleFactoryLoader, useClass: SystemJsNgModuleLoader },
                    BifDataService,
                    BifSourceUiService,
                    BifTargetUiService,
                ],
                exports: [
                    PushSelectorComponent,
                    PullSelectorComponent
                ],
                entryComponents: [
                    PushSelectorComponent,
                    PullSelectorComponent
                ],
            },] }
];
export { ɵ0, ɵ1 };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmlmLW1hbnVhbC1jcmVhdGlvbi5tb2R1bGUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZWRwLWJpZi9ydW50aW1lLWFwaS8iLCJzb3VyY2VzIjpbImxpYi9iaWYtbWFudWFsLWNyZWF0aW9uL2JpZi1tYW51YWwtY3JlYXRpb24ubW9kdWxlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsT0FBTyxFQUFFLFFBQVEsRUFBdUIsU0FBUyxFQUFFLHFCQUFxQixFQUFFLHNCQUFzQixFQUFZLE1BQU0sZUFBZSxDQUFDO0FBQ2xJLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUMvQyxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDN0MsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFFeEQsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLGtCQUFrQixDQUFDO0FBQy9DLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQztBQUNqRCxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFDckQsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0sbUJBQW1CLENBQUM7QUFDdkQsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLHdCQUF3QixDQUFDO0FBQ3RELE9BQU8sRUFBRSxxQkFBcUIsRUFBRSxNQUFNLG9EQUFvRCxDQUFDO0FBQzNGLE9BQU8sRUFBRSxxQkFBcUIsRUFBRSxNQUFNLG9EQUFvRCxDQUFDO0FBQzNGLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQztBQUNoRCxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sNEJBQTRCLENBQUM7QUFDNUQsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0saUNBQWlDLENBQUM7QUFDckUsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0saUNBQWlDLENBQUM7QUFDckUsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLG9CQUFvQixDQUFDO1dBbUJYLFlBQVksQ0FBQyxPQUFPLENBQUMsY0FBYyxDQUFDLElBQUksUUFBUSxPQUM3QyxFQUFFO0FBZTdDLE1BQU0sT0FBTyx1QkFBdUI7Ozs7O0lBQ3pCLE1BQU0sQ0FBQyxPQUFPLENBQUMsTUFBcUI7O2NBQ2pDLFNBQVMsR0FBZTtZQUMxQixFQUFFLE9BQU8sRUFBRSxZQUFZLEVBQUUsUUFBUSxFQUFFLE1BQU0sSUFBSSxFQUFFLEVBQUU7WUFDakQsY0FBYztZQUNkLGtCQUFrQjtZQUNsQixrQkFBa0I7U0FDckI7UUFDRCxPQUFPO1lBQ0gsUUFBUSxFQUFFLHVCQUF1QjtZQUNqQyxTQUFTLEVBQUUsU0FBUztTQUN2QixDQUFBO0lBQ0wsQ0FBQzs7O1lBN0NKLFFBQVEsU0FBQztnQkFDTixZQUFZLEVBQUU7b0JBQ1YscUJBQXFCO29CQUNyQixxQkFBcUI7b0JBQ3JCLFVBQVU7aUJBQ2I7Z0JBQ0QsT0FBTyxFQUFFO29CQUNMLFlBQVk7b0JBQ1osV0FBVztvQkFDWCxnQkFBZ0I7b0JBQ2hCLFdBQVcsQ0FBQyxPQUFPLEVBQUU7b0JBQ3JCLFlBQVksQ0FBQyxPQUFPLEVBQUU7b0JBQ3RCLGNBQWMsQ0FBQyxPQUFPLEVBQUU7b0JBQ3hCLGtCQUFrQixDQUFDLE9BQU8sRUFBRTtvQkFDNUIsYUFBYSxDQUFDLE9BQU8sRUFBRTtpQkFDMUI7Z0JBQ0QsU0FBUyxFQUFFO29CQUNQLEVBQUUsT0FBTyxFQUFFLFNBQVMsRUFBRSxRQUFRLElBQWtELEVBQUU7b0JBQ2xGLEVBQUUsT0FBTyxFQUFFLFlBQVksRUFBRSxRQUFRLElBQUksRUFBRTtvQkFDdkMsRUFBRSxPQUFPLEVBQUUscUJBQXFCLEVBQUUsUUFBUSxFQUFFLHNCQUFzQixFQUFFO29CQUNwRSxjQUFjO29CQUNkLGtCQUFrQjtvQkFDbEIsa0JBQWtCO2lCQUNyQjtnQkFDRCxPQUFPLEVBQUU7b0JBQ0wscUJBQXFCO29CQUNyQixxQkFBcUI7aUJBQ3hCO2dCQUNELGVBQWUsRUFBRTtvQkFDYixxQkFBcUI7b0JBQ3JCLHFCQUFxQjtpQkFDeEI7YUFDSiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5nTW9kdWxlLCBNb2R1bGVXaXRoUHJvdmlkZXJzLCBMT0NBTEVfSUQsIE5nTW9kdWxlRmFjdG9yeUxvYWRlciwgU3lzdGVtSnNOZ01vZHVsZUxvYWRlciwgUHJvdmlkZXIgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgQ29tbW9uTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uJztcclxuaW1wb3J0IHsgRm9ybXNNb2R1bGUgfSBmcm9tICdAYW5ndWxhci9mb3Jtcyc7XHJcbmltcG9ydCB7IEh0dHBDbGllbnRNb2R1bGUgfSBmcm9tICdAYW5ndWxhci9jb21tb24vaHR0cCc7XHJcblxyXG5pbXBvcnQgeyBNb2RhbE1vZHVsZSB9IGZyb20gJ0BmYXJyaXMvdWktbW9kYWwnO1xyXG5pbXBvcnQgeyBOb3RpZnlNb2R1bGUgfSBmcm9tICdAZmFycmlzL3VpLW5vdGlmeSc7XHJcbmltcG9ydCB7IE1lc3NhZ2VyTW9kdWxlIH0gZnJvbSAnQGZhcnJpcy91aS1tZXNzYWdlcic7XHJcbmltcG9ydCB7IEZhcnJpc0RpYWxvZ01vZHVsZSB9IGZyb20gJ0BmYXJyaXMvdWktZGlhbG9nJztcclxuaW1wb3J0IHsgTW9kdWxlQ29uZmlnIH0gZnJvbSAnLi9jb25maWcvbW9kdWxlLmNvbmZpZyc7XHJcbmltcG9ydCB7IFB1c2hTZWxlY3RvckNvbXBvbmVudCB9IGZyb20gJy4vY29tcG9uZW50cy9wdXNoLXNlbGVjdG9yL3B1c2gtc2VsZWN0b3IuY29tcG9uZW50JztcclxuaW1wb3J0IHsgUHVsbFNlbGVjdG9yQ29tcG9uZW50IH0gZnJvbSAnLi9jb21wb25lbnRzL3B1bGwtc2VsZWN0b3IvcHVsbC1zZWxlY3Rvci5jb21wb25lbnQnO1xyXG5pbXBvcnQgeyBMb2NhbGVQaXBlIH0gZnJvbSBcIi4vcGlwZS9sb2NhbGUucGlwZVwiO1xyXG5pbXBvcnQgeyBCaWZEYXRhU2VydmljZSB9IGZyb20gJy4vc2VydmljZS9iaWYtZGF0YS5zZXJ2aWNlJztcclxuaW1wb3J0IHsgQmlmU291cmNlVWlTZXJ2aWNlIH0gZnJvbSAnLi9zZXJ2aWNlL2JpZi1zb3VyY2UtdWkuc2VydmljZSc7XHJcbmltcG9ydCB7IEJpZlRhcmdldFVpU2VydmljZSB9IGZyb20gJy4vc2VydmljZS9iaWYtdGFyZ2V0LXVpLnNlcnZpY2UnO1xyXG5pbXBvcnQgeyBMb2FkaW5nTW9kdWxlIH0gZnJvbSAnQGZhcnJpcy91aS1sb2FkaW5nJztcclxuXHJcbkBOZ01vZHVsZSh7XHJcbiAgICBkZWNsYXJhdGlvbnM6IFtcclxuICAgICAgICBQdXNoU2VsZWN0b3JDb21wb25lbnQsXHJcbiAgICAgICAgUHVsbFNlbGVjdG9yQ29tcG9uZW50LFxyXG4gICAgICAgIExvY2FsZVBpcGUsXHJcbiAgICBdLFxyXG4gICAgaW1wb3J0czogW1xyXG4gICAgICAgIENvbW1vbk1vZHVsZSxcclxuICAgICAgICBGb3Jtc01vZHVsZSxcclxuICAgICAgICBIdHRwQ2xpZW50TW9kdWxlLFxyXG4gICAgICAgIE1vZGFsTW9kdWxlLmZvclJvb3QoKSxcclxuICAgICAgICBOb3RpZnlNb2R1bGUuZm9yUm9vdCgpLFxyXG4gICAgICAgIE1lc3NhZ2VyTW9kdWxlLmZvclJvb3QoKSxcclxuICAgICAgICBGYXJyaXNEaWFsb2dNb2R1bGUuZm9yUm9vdCgpLFxyXG4gICAgICAgIExvYWRpbmdNb2R1bGUuZm9yUm9vdCgpLFxyXG4gICAgXSxcclxuICAgIHByb3ZpZGVyczogW1xyXG4gICAgICAgIHsgcHJvdmlkZTogTE9DQUxFX0lELCB1c2VWYWx1ZTogbG9jYWxTdG9yYWdlLmdldEl0ZW0oJ2xhbmd1YWdlQ29kZScpIHx8ICd6aC1DSFMnIH0sXHJcbiAgICAgICAgeyBwcm92aWRlOiBNb2R1bGVDb25maWcsIHVzZVZhbHVlOiB7fSB9LFxyXG4gICAgICAgIHsgcHJvdmlkZTogTmdNb2R1bGVGYWN0b3J5TG9hZGVyLCB1c2VDbGFzczogU3lzdGVtSnNOZ01vZHVsZUxvYWRlciB9LFxyXG4gICAgICAgIEJpZkRhdGFTZXJ2aWNlLFxyXG4gICAgICAgIEJpZlNvdXJjZVVpU2VydmljZSxcclxuICAgICAgICBCaWZUYXJnZXRVaVNlcnZpY2UsXHJcbiAgICBdLFxyXG4gICAgZXhwb3J0czogW1xyXG4gICAgICAgIFB1c2hTZWxlY3RvckNvbXBvbmVudCxcclxuICAgICAgICBQdWxsU2VsZWN0b3JDb21wb25lbnRcclxuICAgIF0sXHJcbiAgICBlbnRyeUNvbXBvbmVudHM6IFtcclxuICAgICAgICBQdXNoU2VsZWN0b3JDb21wb25lbnQsXHJcbiAgICAgICAgUHVsbFNlbGVjdG9yQ29tcG9uZW50XHJcbiAgICBdLFxyXG59KVxyXG5leHBvcnQgY2xhc3MgQmlmTWFudWFsQ3JlYXRpb25Nb2R1bGUge1xyXG4gICAgcHVibGljIHN0YXRpYyBmb3JSb290KGNvbmZpZz86IE1vZHVsZUNvbmZpZyk6IE1vZHVsZVdpdGhQcm92aWRlcnMge1xyXG4gICAgICAgIGNvbnN0IHByb3ZpZGVyczogUHJvdmlkZXJbXSA9IFtcclxuICAgICAgICAgICAgeyBwcm92aWRlOiBNb2R1bGVDb25maWcsIHVzZVZhbHVlOiBjb25maWcgfHwge30gfSxcclxuICAgICAgICAgICAgQmlmRGF0YVNlcnZpY2UsXHJcbiAgICAgICAgICAgIEJpZlNvdXJjZVVpU2VydmljZSxcclxuICAgICAgICAgICAgQmlmVGFyZ2V0VWlTZXJ2aWNlLFxyXG4gICAgICAgIF07XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgbmdNb2R1bGU6IEJpZk1hbnVhbENyZWF0aW9uTW9kdWxlLFxyXG4gICAgICAgICAgICBwcm92aWRlcnM6IHByb3ZpZGVyc1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufSJdfQ==