/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { ActivityComponentUIState } from './activity-component.uistate';
import { HttpService } from '@ecp-caf/caf-common';
import { BizComponentEntity, OwnerType } from '../../domain/entities/biz-component.entity';
import { ProcessDesignerUIState } from '../../app/process-designer.uistate';
import { Subject } from 'rxjs';
import { ProcessDeUtil } from '../../domain/process-de-util';
export class ActivityComponentRepository {
    /**
     * @param {?} uistate
     * @param {?} util
     * @param {?} http
     * @param {?} designerState
     */
    constructor(uistate, util, http, designerState) {
        this.uistate = uistate;
        this.util = util;
        this.http = http;
        this.designerState = designerState;
        this.defaultProcessComponentIds = ['5863c8a8-e0a7-4137-a8b2-4c05e42b3b73', 'be781ba1-a88b-4bb8-9c88-2e2a27a9226e'];
        this.subject = new Subject();
    }
    /**
     * @param {?} flowFormId
     * @param {?} bizActId
     * @return {?}
     */
    loadComponents(flowFormId, bizActId) {
        /** @type {?} */
        let url = this.util.getBizComponentsWebApi();
        if (bizActId) {
            url += `/query?param=` + encodeURIComponent(`{"flowFormKey":"${flowFormId}","owner":"${bizActId}","ownerType":"Activity"}`);
        }
        else {
            this.uistate.allComponents = [];
            return;
        }
        this.http.get(url).subscribe((/**
         * @param {?} data
         * @return {?}
         */
        (data) => {
            this.uistate.allComponents = data.filter((/**
             * @param {?} c
             * @return {?}
             */
            (c) => c.ownerType === OwnerType.Activity));
        }));
    }
    /**
     * @param {?} id
     * @return {?}
     */
    removeComponent(id) {
        if (id) {
            /** @type {?} */
            const index = this.uistate.components.findIndex((/**
             * @param {?} c
             * @return {?}
             */
            c => c.id === id));
            if (index > -1) {
                this.uistate.components.splice(index, 1);
                if (this.uistate.components.length > 0) {
                    this.subject.next(this.uistate.components[0]);
                }
                else {
                    this.uistate.curComponent = null;
                }
            }
        }
    }
    /**
     * @param {?} cpt
     * @return {?}
     */
    addComponent(cpt) {
        if (cpt) {
            /** @type {?} */
            const component = new BizComponentEntity(cpt.name, cpt.id, cpt.operations[0].code);
            component.id = ProcessDeUtil.GenerateElementId();
            component.actualParameters = this.bindParas(cpt);
            this.uistate.components.push(component);
            this.subject.next(component);
        }
    }
    /**
     * @private
     * @param {?} component
     * @return {?}
     */
    bindParas(component) {
        /** @type {?} */
        let parameters = [];
        if (component.operations[0].parameters && component.operations[0].parameters.length > 0) {
            if (this.defaultProcessComponentIds.indexOf(component.id) > -1) {
                parameters = this.assignParameterValue(component.operations[0].parameters);
            }
            else {
                parameters = component.operations[0].parameters.map((/**
                 * @param {?} p
                 * @return {?}
                 */
                p => ({ code: p.code, name: p.name, value: '' })));
            }
        }
        return parameters;
    }
    /**
     * @private
     * @param {?} params
     * @return {?}
     */
    assignParameterValue(params) {
        return params.map((/**
         * @param {?} p
         * @return {?}
         */
        p => {
            if (p.code.indexOf('beId') > -1) {
                /** @type {?} */
                const v = this.designerState.formalParameterContext.filter((/**
                 * @param {?} c
                 * @return {?}
                 */
                c => c.key.indexOf('metadataId') > -1))[0].key;
                return { code: p.code, name: p.name, value: `{"expr":"DefaultFunction.GetContextParameter(\\"${v}\\")"}` };
            }
            else if (p.code.indexOf('nodeId') > -1) {
                /** @type {?} */
                const v = this.designerState.formalParameterContext.filter((/**
                 * @param {?} c
                 * @return {?}
                 */
                c => c.key.indexOf('schemaId') > -1))[0].key;
                return { code: p.code, name: p.name, value: `{"expr":"DefaultFunction.GetContextParameter(\\"${v}\\")"}` };
            }
            else if (p.code.indexOf('dataId') > -1) {
                return { code: p.code, name: p.name, value: `{"expr":"DefaultFunction.GetContextParameter(\\"dataId\\")"}` };
            }
            else if (p.code.indexOf('procInstId') > -1) {
                return { code: p.code, name: p.name, value: `{"expr":"DefaultFunction.GetContextParameter(\\"procInstId\\")"}` };
            }
            else {
                return { code: p.code, name: p.name, value: '' };
            }
        }));
    }
    /**
     * @param {?} arr
     * @param {?} i1
     * @param {?} i2
     * @return {?}
     */
    swapArray(arr, i1, i2) {
        arr[i1] = arr.splice(i2, 1, arr[i1])[0];
        return arr;
    }
}
ActivityComponentRepository.decorators = [
    { type: Injectable }
];
/** @nocollapse */
ActivityComponentRepository.ctorParameters = () => [
    { type: ActivityComponentUIState },
    { type: ProcessDeUtil },
    { type: HttpService },
    { type: ProcessDesignerUIState }
];
if (false) {
    /**
     * @type {?}
     * @private
     */
    ActivityComponentRepository.prototype.defaultProcessComponentIds;
    /** @type {?} */
    ActivityComponentRepository.prototype.subject;
    /**
     * @type {?}
     * @private
     */
    ActivityComponentRepository.prototype.uistate;
    /**
     * @type {?}
     * @private
     */
    ActivityComponentRepository.prototype.util;
    /**
     * @type {?}
     * @private
     */
    ActivityComponentRepository.prototype.http;
    /**
     * @type {?}
     * @private
     */
    ActivityComponentRepository.prototype.designerState;
}
//# sourceMappingURL=data:application/json;base64,