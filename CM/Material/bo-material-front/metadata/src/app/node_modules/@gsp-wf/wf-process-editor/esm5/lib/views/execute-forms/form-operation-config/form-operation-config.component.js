/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Component, Input, ViewChild, TemplateRef, ComponentFactoryResolver, Injector } from '@angular/core';
import { EditorTypes } from '@farris/ui-datagrid-editors';
import { workFlowActions, executionTime, FormMethodConfig } from '../entities/form-method-config';
import { HttpService } from '@ecp-caf/caf-common';
import { DialogComponent } from '@farris/ui-dialog';
import { DatagridComponent } from '@farris/ui-datagrid';
import { MessagerService } from '@farris/ui-messager';
import { BsModalService } from '@farris/ui-modal';
import { ParameterSettingComponent } from '../parameter-setting/parameter-setting.component';
var FormOperationConfigComponent = /** @class */ (function () {
    function FormOperationConfigComponent(http, message, resolver, injector, modalService) {
        this.http = http;
        this.message = message;
        this.resolver = resolver;
        this.injector = injector;
        this.modalService = modalService;
        this.operations = new Array();
        this.cols = new Array();
        this.methodCols = [
            { field: 'method', width: 100, title: '方法标识', showTips: true },
            { field: 'methodName', width: 80, title: '方法名称', showTips: true },
            { field: 'description', width: 120, title: '描述', showTips: true }
        ];
        this.formMethods = new Array();
        this.state = 'add';
    }
    Object.defineProperty(FormOperationConfigComponent.prototype, "formFormatId", {
        get: /**
         * @return {?}
         */
        function () {
            return this._fromFormatId;
        },
        set: /**
         * @param {?} v
         * @return {?}
         */
        function (v) {
            this._fromFormatId = v;
            if (this._fromFormatId) {
                this.getFormMethods();
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    FormOperationConfigComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.cols = [
            {
                field: 'workFlowAction', width: 80, title: '流转方向',
                formatter: {
                    type: 'enum',
                    options: { valueField: 'value', textField: 'text', data: workFlowActions }
                },
                editor: {
                    type: EditorTypes.COMBOLIST,
                    options: { valueField: 'value', textField: 'text', data: workFlowActions, idField: 'value', panelHeight: 'auto', enableClear: false }
                },
                validators: [
                    { type: 'required', messager: '必填' }
                ]
            }, {
                field: 'method', width: 100, title: '表单操作',
                editor: {
                    type: 'input-group',
                    options: {
                        groupText: '<i class="f-icon f-icon-lookup"></i>',
                        editable: false,
                        clickHandle: (/**
                         * @param {?} e
                         * @return {?}
                         */
                        function (e) {
                            e.formControl.setValue(e.instance.value ? e.instance.value : '');
                            _this.e = e;
                            _this.methodsDialog.show();
                            _this.state = 'edit';
                        }),
                        clear: (/**
                         * @param {?} e
                         * @return {?}
                         */
                        function (e) {
                            console.log('clear', e);
                        })
                    }
                },
                formatter: (/**
                 * @param {?} v
                 * @param {?} d
                 * @param {?} i
                 * @return {?}
                 */
                function (v, d, i) {
                    if (v) {
                        /** @type {?} */
                        var m = _this.formMethods.find((/**
                         * @param {?} item
                         * @return {?}
                         */
                        function (item) { return item.method === v; }));
                        if (m) {
                            return m.methodName;
                        }
                        else {
                            return '';
                        }
                    }
                    else {
                        return '';
                    }
                }),
                validators: [
                    { type: 'required', messager: '必填' }
                ]
            },
            {
                field: 'executionTime', width: 80, title: '执行时机',
                formatter: {
                    type: 'enum',
                    options: { valueField: 'value', textField: 'text', data: executionTime }
                },
                editor: {
                    type: EditorTypes.COMBOLIST,
                    options: { valueField: 'value', textField: 'text', data: executionTime, idField: 'value', panelHeight: 'auto', enableClear: false }
                },
                validators: [
                    { type: 'required', messager: '必填' }
                ]
            },
            {
                field: 'sortOrder', width: 60, title: '执行顺序',
                editor: {
                    type: EditorTypes.NUMBERBOX, options: {}
                },
                formatter: { type: 'number', options: { precision: 0 } },
                validators: [
                    { type: 'required', messager: '必填' }
                ]
            },
            {
                field: 'methodParameters', width: 80, title: '参数',
                template: this.cell,
                halign: 'center', align: 'center'
            }
        ];
    };
    /**
     * @return {?}
     */
    FormOperationConfigComponent.prototype.add = /**
     * @return {?}
     */
    function () {
        this.methodsDialog.show();
        this.state = 'add';
    };
    /**
     * @return {?}
     */
    FormOperationConfigComponent.prototype.delete = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.grid.selectedRow) {
            this.operations = this.operations.filter((/**
             * @param {?} o
             * @return {?}
             */
            function (o) { return o.id !== _this.grid.selectedRow.id; }));
        }
        else {
            this.message.info('尚未选中表单操作配置！');
        }
    };
    /**
     * @param {?} ctx
     * @return {?}
     */
    FormOperationConfigComponent.prototype.editParam = /**
     * @param {?} ctx
     * @return {?}
     */
    function (ctx) {
        var _this = this;
        /** @type {?} */
        var compFactory = this.resolver.resolveComponentFactory(ParameterSettingComponent);
        /** @type {?} */
        var compRef = compFactory.create(this.injector);
        compRef.instance.mode = 'usual';
        compRef.instance.showFormType = false;
        if (ctx.rowData.methodParameters) {
            compRef.instance.parameters = tslib_1.__spread(ctx.rowData.methodParameters.map((/**
             * @param {?} p
             * @return {?}
             */
            function (p) { return Object.assign({}, p); })));
        }
        else {
            compRef.instance.parameters = new Array();
        }
        /** @type {?} */
        var modalConfig = {
            title: '参数设置',
            width: 620,
            height: 400,
            showButtons: true,
            buttons: compRef.instance.modalFooter
        };
        /** @type {?} */
        var dialog = this.modalService.show(compRef, modalConfig);
        compRef.instance.submit.subscribe((/**
         * @param {?} re
         * @return {?}
         */
        function (re) {
            var e_1, _a;
            try {
                for (var _b = tslib_1.__values(_this.operations), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var o = _c.value;
                    if (o.id === ctx.rowData.id) {
                        o.methodParameters = re.parameters;
                    }
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_1) throw e_1.error; }
            }
            dialog.close();
        }));
        compRef.instance.cancel.subscribe((/**
         * @param {?} re
         * @return {?}
         */
        function (re) {
            dialog.close();
        }));
    };
    /**
     * @return {?}
     */
    FormOperationConfigComponent.prototype.methodSelected = /**
     * @return {?}
     */
    function () {
        var e_2, _a;
        if (this.methodGrid.selectedRow) {
            /** @type {?} */
            var data = this.methodGrid.selectedRow.data;
            if (this.state === 'edit') {
                if (this.e) {
                    this.e.formControl.setValue(data.method);
                    this.e.instance.cd.detectChanges();
                    try {
                        for (var _b = tslib_1.__values(this.operations), _c = _b.next(); !_c.done; _c = _b.next()) {
                            var o = _c.value;
                            if (o.id === data.id) {
                                o.method = data.method;
                                o.sortOrder = data.sortOrder;
                                o.methodParameters = data.methodParameters;
                            }
                        }
                    }
                    catch (e_2_1) { e_2 = { error: e_2_1 }; }
                    finally {
                        try {
                            if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                        }
                        finally { if (e_2) throw e_2.error; }
                    }
                }
            }
            else {
                /** @type {?} */
                var operation = new FormMethodConfig();
                operation.formFormatConfigId = this.formFormatConfigId;
                operation.method = data.method;
                operation.sortOrder = data.sortOrder;
                operation.methodParameters = data.methodParameters;
                this.operations = this.operations.concat([operation]);
            }
            this.methodsDialog.close();
        }
        else {
            this.message.info('尚未选中表单操作！');
        }
    };
    /**
     * @return {?}
     */
    FormOperationConfigComponent.prototype.validator = /**
     * @return {?}
     */
    function () {
        var e_3, _a;
        this.grid.endCellEdit();
        try {
            for (var _b = tslib_1.__values(this.operations), _c = _b.next(); !_c.done; _c = _b.next()) {
                var o = _c.value;
                if (!o.method) {
                    this.message.info('尚未选择表单操作！');
                    return false;
                }
            }
        }
        catch (e_3_1) { e_3 = { error: e_3_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_3) throw e_3.error; }
        }
        return true;
    };
    /**
     * @private
     * @return {?}
     */
    FormOperationConfigComponent.prototype.getFormMethods = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.formFormatId) {
            /** @type {?} */
            var url = "/api/runtime/wf/v1.0/formOperation?formFormatId=" + this.formFormatId;
            this.http.get(url).subscribe((/**
             * @param {?} re
             * @return {?}
             */
            function (re) {
                if (re) {
                    _this.formMethods = re;
                }
            }));
        }
    };
    FormOperationConfigComponent.decorators = [
        { type: Component, args: [{
                    selector: 'lib-form-operation-config',
                    template: "<div class=\"f-utils-fill-flex-column h-100\" style=\"background: #FFF;\">\r\n  <farris-datagrid class=\"f-component-grid f-utils-fill\" [columns]=\"cols\" [data]=\"operations\" #grid\r\n    [idField]=\"'id'\" [showLineNumber]=\"true\" [fitColumns]=\"true\" [striped]=\"true\" [showCheckbox]=\"false\"\r\n    [virtualized]=\"true\" [pagination]=\"false\" [useThemes]=\"false\" [fit]=\"true\"\r\n    [editable]=\"true\" [editMode]=\"'cell'\" >\r\n  </farris-datagrid>\r\n  <ng-template #cell let-ctx>\r\n    <a href=\"javascript: void(0);\" title=\"\u53C2\u6570\u8BBE\u7F6E\" (click)=\"editParam(ctx)\">\u8BBE\u7F6E</a>\r\n  </ng-template>\r\n</div>\r\n\r\n<ng-template #buttonRef>\r\n  <button class=\"btn btn-sm btn-primary px-3\" (click)=\"methodSelected()\">\u786E\u5B9A</button>\r\n  <button class=\"btn btn-sm btn-default px-3\" (click)=\"methodsDialog.close()\">\u53D6\u6D88</button>\r\n</ng-template>\r\n<farris-dialog #methodsDialog [buttons]=\"buttonRef\" [width]=\"700\" [height]=\"500\" [title]=\"'\u8868\u5355\u4E8B\u4EF6'\">\r\n  <div class=\"f-page f-page-is-managelist\">\r\n    <div class=\"f-page-main\">\r\n      <div class=\"f-struct-wrapper f-utils-fill-flex-column\">\r\n        <farris-section class=\"f-section-grid f-section-in-managelist p-0\" [showHeader]=\"false\">\r\n          <farris-datagrid class=\"f-component-grid\" [columns]=\"methodCols\" [data]=\"formMethods\" #methodGrid [idField]=\"'id'\"\r\n            [showLineNumber]=\"true\" [striped]=\"true\" [showCheckbox]=\"false\" [virtualized]=\"true\" [pagination]=\"false\"\r\n            [fit]=\"true\" [fitColumns]=\"true\">\r\n          </farris-datagrid>\r\n        </farris-section>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</farris-dialog>\r\n\r\n",
                    styles: [""]
                }] }
    ];
    /** @nocollapse */
    FormOperationConfigComponent.ctorParameters = function () { return [
        { type: HttpService },
        { type: MessagerService },
        { type: ComponentFactoryResolver },
        { type: Injector },
        { type: BsModalService }
    ]; };
    FormOperationConfigComponent.propDecorators = {
        formFormatId: [{ type: Input }],
        formFormatConfigId: [{ type: Input }],
        operations: [{ type: Input }],
        methodsDialog: [{ type: ViewChild, args: ['methodsDialog',] }],
        grid: [{ type: ViewChild, args: ['grid',] }],
        methodGrid: [{ type: ViewChild, args: ['methodGrid',] }],
        cell: [{ type: ViewChild, args: ['cell',] }]
    };
    return FormOperationConfigComponent;
}());
export { FormOperationConfigComponent };
if (false) {
    /**
     * @type {?}
     * @private
     */
    FormOperationConfigComponent.prototype._fromFormatId;
    /** @type {?} */
    FormOperationConfigComponent.prototype.formFormatConfigId;
    /** @type {?} */
    FormOperationConfigComponent.prototype.operations;
    /** @type {?} */
    FormOperationConfigComponent.prototype.methodsDialog;
    /** @type {?} */
    FormOperationConfigComponent.prototype.grid;
    /** @type {?} */
    FormOperationConfigComponent.prototype.methodGrid;
    /** @type {?} */
    FormOperationConfigComponent.prototype.cell;
    /** @type {?} */
    FormOperationConfigComponent.prototype.cols;
    /** @type {?} */
    FormOperationConfigComponent.prototype.methodCols;
    /** @type {?} */
    FormOperationConfigComponent.prototype.e;
    /** @type {?} */
    FormOperationConfigComponent.prototype.formMethods;
    /** @type {?} */
    FormOperationConfigComponent.prototype.state;
    /**
     * @type {?}
     * @private
     */
    FormOperationConfigComponent.prototype.http;
    /**
     * @type {?}
     * @private
     */
    FormOperationConfigComponent.prototype.message;
    /**
     * @type {?}
     * @private
     */
    FormOperationConfigComponent.prototype.resolver;
    /**
     * @type {?}
     * @private
     */
    FormOperationConfigComponent.prototype.injector;
    /**
     * @type {?}
     * @private
     */
    FormOperationConfigComponent.prototype.modalService;
}
//# sourceMappingURL=data:application/json;base64,