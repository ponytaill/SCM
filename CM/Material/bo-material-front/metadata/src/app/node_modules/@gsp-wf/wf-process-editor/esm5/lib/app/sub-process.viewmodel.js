/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { ProcessDesignerUIState } from './process-designer.uistate';
import { ResourceKeys } from '../model/resourceKeys';
import { BackwardRuleComponent, BackwardRuleConverter } from '../views/backward-rule/backward-rule.component';
import { VariableSettingComponent, VariableSettingConverter } from '../views/variable-setting/variable-setting.component';
import { CallActivitySubProcess2Component, CallActivitySubProcess2Converter } from '../views/call-activity-sub-process2/call-activity-sub-process2.component';
var SubProcessViewModel = /** @class */ (function () {
    function SubProcessViewModel(uiState) {
        this.uiState = uiState;
    }
    /**
     * @param {?} obj
     * @return {?}
     */
    SubProcessViewModel.prototype.setProperty = /**
     * @param {?} obj
     * @return {?}
     */
    function (obj) {
        this.uiState.propertyData = obj.propertyData;
        this.uiState.propertyConfig = this.setConfig(obj.propertyConfig);
    };
    /**
     * @private
     * @param {?} obj
     * @return {?}
     */
    SubProcessViewModel.prototype.setConfig = /**
     * @private
     * @param {?} obj
     * @return {?}
     */
    function (obj) {
        var _this = this;
        /** @type {?} */
        var propertyConfig = [];
        if (obj) {
            obj.forEach((/**
             * @param {?} element
             * @return {?}
             */
            function (element) {
                _this.setEntity(element.properties);
                propertyConfig.push(element);
            }));
        }
        return propertyConfig;
    };
    /**
     * @private
     * @param {?} obj
     * @return {?}
     */
    SubProcessViewModel.prototype.setEntity = /**
     * @private
     * @param {?} obj
     * @return {?}
     */
    function (obj) {
        var _this = this;
        if (obj && obj.length > 0) {
            obj.forEach((/**
             * @param {?} item
             * @return {?}
             */
            function (item) {
                switch (item.propertyID) {
                    case ResourceKeys.callActivitySubProcess: // 参与者
                        // item.editor = CallActivitySubProcessComponent;
                        // item.converter = new CallActivitySubProcessConverter();
                        item.editor = CallActivitySubProcess2Component;
                        item.converter = new CallActivitySubProcess2Converter();
                        item.editorParams = {
                            bizTypeId: _this.uiState.flowFormInfo.flowForm.businessObjectId,
                        };
                        break;
                    case ResourceKeys.BackWardRule:
                        item.editor = BackwardRuleComponent;
                        item.converter = new BackwardRuleConverter();
                        item.editorParams = {
                            nodeType: 'CallActivitySubProcess'
                        };
                        break;
                    case ResourceKeys.variableSettings: // 变量设置
                        item.editor = VariableSettingComponent;
                        item.converter = new VariableSettingConverter();
                        break;
                    default:
                        break;
                }
            }));
        }
    };
    SubProcessViewModel.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    SubProcessViewModel.ctorParameters = function () { return [
        { type: ProcessDesignerUIState }
    ]; };
    return SubProcessViewModel;
}());
export { SubProcessViewModel };
if (false) {
    /**
     * @type {?}
     * @private
     */
    SubProcessViewModel.prototype.uiState;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3ViLXByb2Nlc3Mudmlld21vZGVsLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGdzcC13Zi93Zi1wcm9jZXNzLWVkaXRvci8iLCJzb3VyY2VzIjpbImxpYi9hcHAvc3ViLXByb2Nlc3Mudmlld21vZGVsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sRUFBRSxzQkFBc0IsRUFBRSxNQUFNLDRCQUE0QixDQUFDO0FBRXBFLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQztBQUVyRCxPQUFPLEVBQUUscUJBQXFCLEVBQUUscUJBQXFCLEVBQUUsTUFBTSxnREFBZ0QsQ0FBQztBQUM5RyxPQUFPLEVBQUUsd0JBQXdCLEVBQUUsd0JBQXdCLEVBQUUsTUFBTSxzREFBc0QsQ0FBQztBQUMxSCxPQUFPLEVBQUUsZ0NBQWdDLEVBQUUsZ0NBQWdDLEVBQUUsTUFBTSwwRUFBMEUsQ0FBQztBQUU5SjtJQUdJLDZCQUFvQixPQUErQjtRQUEvQixZQUFPLEdBQVAsT0FBTyxDQUF3QjtJQUVuRCxDQUFDOzs7OztJQUNELHlDQUFXOzs7O0lBQVgsVUFBWSxHQUFRO1FBQ2hCLElBQUksQ0FBQyxPQUFPLENBQUMsWUFBWSxHQUFHLEdBQUcsQ0FBQyxZQUFZLENBQUM7UUFDN0MsSUFBSSxDQUFDLE9BQU8sQ0FBQyxjQUFjLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsY0FBYyxDQUFDLENBQUM7SUFDckUsQ0FBQzs7Ozs7O0lBRU8sdUNBQVM7Ozs7O0lBQWpCLFVBQWtCLEdBQVU7UUFBNUIsaUJBU0M7O1lBUlMsY0FBYyxHQUE0QixFQUFFO1FBQ2xELElBQUksR0FBRyxFQUFFO1lBQ0wsR0FBRyxDQUFDLE9BQU87Ozs7WUFBQyxVQUFDLE9BQThCO2dCQUN2QyxLQUFJLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQyxVQUFVLENBQUMsQ0FBQztnQkFDbkMsY0FBYyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztZQUNqQyxDQUFDLEVBQUMsQ0FBQztTQUNOO1FBQ0QsT0FBTyxjQUFjLENBQUM7SUFDMUIsQ0FBQzs7Ozs7O0lBQ08sdUNBQVM7Ozs7O0lBQWpCLFVBQWtCLEdBQXFCO1FBQXZDLGlCQTZCQztRQTVCRyxJQUFJLEdBQUcsSUFBSSxHQUFHLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRTtZQUN2QixHQUFHLENBQUMsT0FBTzs7OztZQUFDLFVBQUMsSUFBb0I7Z0JBQzdCLFFBQVEsSUFBSSxDQUFDLFVBQVUsRUFBRTtvQkFDckIsS0FBSyxZQUFZLENBQUMsc0JBQXNCLEVBQUUsTUFBTTt3QkFDNUMsaURBQWlEO3dCQUNqRCwwREFBMEQ7d0JBQzFELElBQUksQ0FBQyxNQUFNLEdBQUcsZ0NBQWdDLENBQUM7d0JBQy9DLElBQUksQ0FBQyxTQUFTLEdBQUcsSUFBSSxnQ0FBZ0MsRUFBRSxDQUFDO3dCQUN4RCxJQUFJLENBQUMsWUFBWSxHQUFHOzRCQUNoQixTQUFTLEVBQUUsS0FBSSxDQUFDLE9BQU8sQ0FBQyxZQUFZLENBQUMsUUFBUSxDQUFDLGdCQUFnQjt5QkFDakUsQ0FBQzt3QkFDRixNQUFNO29CQUNWLEtBQUssWUFBWSxDQUFDLFlBQVk7d0JBQzFCLElBQUksQ0FBQyxNQUFNLEdBQUcscUJBQXFCLENBQUM7d0JBQ3BDLElBQUksQ0FBQyxTQUFTLEdBQUcsSUFBSSxxQkFBcUIsRUFBRSxDQUFDO3dCQUM3QyxJQUFJLENBQUMsWUFBWSxHQUFHOzRCQUNoQixRQUFRLEVBQUUsd0JBQXdCO3lCQUNyQyxDQUFDO3dCQUNGLE1BQU07b0JBQ1YsS0FBSyxZQUFZLENBQUMsZ0JBQWdCLEVBQUUsT0FBTzt3QkFDdkMsSUFBSSxDQUFDLE1BQU0sR0FBRyx3QkFBd0IsQ0FBQzt3QkFDdkMsSUFBSSxDQUFDLFNBQVMsR0FBRyxJQUFJLHdCQUF3QixFQUFFLENBQUM7d0JBQ2hELE1BQU07b0JBQ1Y7d0JBQ0ksTUFBTTtpQkFDYjtZQUNMLENBQUMsRUFBQyxDQUFDO1NBQ047SUFDTCxDQUFDOztnQkFsREosVUFBVTs7OztnQkFSRixzQkFBc0I7O0lBMkQvQiwwQkFBQztDQUFBLEFBbkRELElBbURDO1NBakRZLG1CQUFtQjs7Ozs7O0lBQ2hCLHNDQUF1QyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgUHJvY2Vzc0Rlc2lnbmVyVUlTdGF0ZSB9IGZyb20gJy4vcHJvY2Vzcy1kZXNpZ25lci51aXN0YXRlJztcclxuaW1wb3J0IHsgRWxlbWVudFByb3BlcnR5Q29uZmlnLCBQcm9wZXJ0eUVudGl0eSB9IGZyb20gJ0BmYXJyaXMvdWktcHJvcGVydHktcGFuZWwnO1xyXG5pbXBvcnQgeyBSZXNvdXJjZUtleXMgfSBmcm9tICcuLi9tb2RlbC9yZXNvdXJjZUtleXMnO1xyXG5pbXBvcnQgeyBDYWxsQWN0aXZpdHlTdWJQcm9jZXNzQ29tcG9uZW50LCBDYWxsQWN0aXZpdHlTdWJQcm9jZXNzQ29udmVydGVyIH0gZnJvbSAnLi4vdmlld3MvY2FsbC1hY3Rpdml0eS1zdWItcHJvY2Vzcy9jYWxsLWFjdGl2aXR5LXN1Yi1wcm9jZXNzLmNvbXBvbmVudCc7XHJcbmltcG9ydCB7IEJhY2t3YXJkUnVsZUNvbXBvbmVudCwgQmFja3dhcmRSdWxlQ29udmVydGVyIH0gZnJvbSAnLi4vdmlld3MvYmFja3dhcmQtcnVsZS9iYWNrd2FyZC1ydWxlLmNvbXBvbmVudCc7XHJcbmltcG9ydCB7IFZhcmlhYmxlU2V0dGluZ0NvbXBvbmVudCwgVmFyaWFibGVTZXR0aW5nQ29udmVydGVyIH0gZnJvbSAnLi4vdmlld3MvdmFyaWFibGUtc2V0dGluZy92YXJpYWJsZS1zZXR0aW5nLmNvbXBvbmVudCc7XHJcbmltcG9ydCB7IENhbGxBY3Rpdml0eVN1YlByb2Nlc3MyQ29tcG9uZW50LCBDYWxsQWN0aXZpdHlTdWJQcm9jZXNzMkNvbnZlcnRlciB9IGZyb20gJy4uL3ZpZXdzL2NhbGwtYWN0aXZpdHktc3ViLXByb2Nlc3MyL2NhbGwtYWN0aXZpdHktc3ViLXByb2Nlc3MyLmNvbXBvbmVudCc7XHJcblxyXG5ASW5qZWN0YWJsZSgpXHJcblxyXG5leHBvcnQgY2xhc3MgU3ViUHJvY2Vzc1ZpZXdNb2RlbCB7XHJcbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIHVpU3RhdGU6IFByb2Nlc3NEZXNpZ25lclVJU3RhdGUpIHtcclxuXHJcbiAgICB9XHJcbiAgICBzZXRQcm9wZXJ0eShvYmo6IGFueSkge1xyXG4gICAgICAgIHRoaXMudWlTdGF0ZS5wcm9wZXJ0eURhdGEgPSBvYmoucHJvcGVydHlEYXRhO1xyXG4gICAgICAgIHRoaXMudWlTdGF0ZS5wcm9wZXJ0eUNvbmZpZyA9IHRoaXMuc2V0Q29uZmlnKG9iai5wcm9wZXJ0eUNvbmZpZyk7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBzZXRDb25maWcob2JqOiBhbnlbXSk6IEVsZW1lbnRQcm9wZXJ0eUNvbmZpZ1tdIHtcclxuICAgICAgICBjb25zdCBwcm9wZXJ0eUNvbmZpZzogRWxlbWVudFByb3BlcnR5Q29uZmlnW10gPSBbXTtcclxuICAgICAgICBpZiAob2JqKSB7XHJcbiAgICAgICAgICAgIG9iai5mb3JFYWNoKChlbGVtZW50OiBFbGVtZW50UHJvcGVydHlDb25maWcpID0+IHtcclxuICAgICAgICAgICAgICAgIHRoaXMuc2V0RW50aXR5KGVsZW1lbnQucHJvcGVydGllcyk7XHJcbiAgICAgICAgICAgICAgICBwcm9wZXJ0eUNvbmZpZy5wdXNoKGVsZW1lbnQpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHByb3BlcnR5Q29uZmlnO1xyXG4gICAgfVxyXG4gICAgcHJpdmF0ZSBzZXRFbnRpdHkob2JqOiBQcm9wZXJ0eUVudGl0eVtdKSB7XHJcbiAgICAgICAgaWYgKG9iaiAmJiBvYmoubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICBvYmouZm9yRWFjaCgoaXRlbTogUHJvcGVydHlFbnRpdHkpID0+IHtcclxuICAgICAgICAgICAgICAgIHN3aXRjaCAoaXRlbS5wcm9wZXJ0eUlEKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBSZXNvdXJjZUtleXMuY2FsbEFjdGl2aXR5U3ViUHJvY2VzczogLy8g5Y+C5LiO6ICFXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGl0ZW0uZWRpdG9yID0gQ2FsbEFjdGl2aXR5U3ViUHJvY2Vzc0NvbXBvbmVudDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gaXRlbS5jb252ZXJ0ZXIgPSBuZXcgQ2FsbEFjdGl2aXR5U3ViUHJvY2Vzc0NvbnZlcnRlcigpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpdGVtLmVkaXRvciA9IENhbGxBY3Rpdml0eVN1YlByb2Nlc3MyQ29tcG9uZW50O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpdGVtLmNvbnZlcnRlciA9IG5ldyBDYWxsQWN0aXZpdHlTdWJQcm9jZXNzMkNvbnZlcnRlcigpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpdGVtLmVkaXRvclBhcmFtcyA9IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJpelR5cGVJZDogdGhpcy51aVN0YXRlLmZsb3dGb3JtSW5mby5mbG93Rm9ybS5idXNpbmVzc09iamVjdElkLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIFJlc291cmNlS2V5cy5CYWNrV2FyZFJ1bGU6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGl0ZW0uZWRpdG9yID0gQmFja3dhcmRSdWxlQ29tcG9uZW50O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpdGVtLmNvbnZlcnRlciA9IG5ldyBCYWNrd2FyZFJ1bGVDb252ZXJ0ZXIoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaXRlbS5lZGl0b3JQYXJhbXMgPSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBub2RlVHlwZTogJ0NhbGxBY3Rpdml0eVN1YlByb2Nlc3MnXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgUmVzb3VyY2VLZXlzLnZhcmlhYmxlU2V0dGluZ3M6IC8vIOWPmOmHj+iuvue9rlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpdGVtLmVkaXRvciA9IFZhcmlhYmxlU2V0dGluZ0NvbXBvbmVudDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaXRlbS5jb252ZXJ0ZXIgPSBuZXcgVmFyaWFibGVTZXR0aW5nQ29udmVydGVyKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuIl19