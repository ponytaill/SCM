import { OnInit, EventEmitter, TemplateRef } from '@angular/core';
import { DialogComponent } from '@farris/ui-dialog';
import { ControlValueAccessor } from '@angular/forms';
import { FDropdownDirective } from '@farris/ui-dropdown';
import { UploadDialogService } from '@gsp-svc/formdoc-upload';
import { MessagerService } from '@farris/ui-messager';
import { SignHereComponent } from '@gsp-wf/wf-sign';
import { AvatarComponent } from '@farris/ui-avatar';
import { DownloadService } from '@gsp-svc/file-load';
import { TaskService } from '../../service/task.service';
import { CommonComment } from '../../entity/comment';
import { Observable } from 'rxjs';
import { HttpService } from '@ecp-caf/caf-common';
import { DataColumn, DatagridComponent } from '@farris/ui-datagrid';
import { I18nService } from '../../service/i18n/i18n.service';
import { LoadingService } from '@farris/ui-loading';
import { TaskCenterConfig } from '../../entity/task-center-config';
import { NotifyService } from '@farris/ui-notify';
export declare class TaskCommentComponent implements OnInit, ControlValueAccessor {
    private taskService;
    private httpSvc;
    private uploadDialog;
    private messageService;
    private i18nService;
    private loadingService;
    private notify;
    showAttachment: boolean;
    showSign: boolean;
    showCommonComment: boolean;
    comment: string;
    placeholder: string;
    processInstanceId: string;
    textAreaHeight: number;
    TaskCenterConfig: TaskCenterConfig[];
    attachment: EventEmitter<{}>;
    signature: EventEmitter<{}>;
    commentDialog: DialogComponent;
    signDialog: DialogComponent;
    dropDownEl: FDropdownDirective;
    signaturePad: SignHereComponent;
    farrisAvatar: AvatarComponent;
    dataGrid: DatagridComponent;
    commentTypeCell: TemplateRef<any>;
    commentOperateCell: TemplateRef<any>;
    private _value;
    attachmentList: any[];
    ifShowAttachment: boolean;
    ifShowSign: boolean;
    curUserId: string;
    signatureImage: string;
    tmpSignatureImage: string;
    downloadService: DownloadService;
    ifUseSign: boolean;
    ifUseImg: boolean;
    ifEnableSign: boolean;
    ifUploadImg: boolean;
    ifCanEditSign: boolean;
    originSignId: string;
    commentList: CommonComment[];
    originCommentList: CommonComment[];
    commentColumns: DataColumn[];
    value: any;
    onModelChange: (obj: any) => void;
    onModelTouched: (obj: any) => void;
    constructor(taskService: TaskService, httpSvc: HttpService, uploadDialog: UploadDialogService, messageService: MessagerService, i18nService: I18nService, loadingService: LoadingService, notify: NotifyService);
    ngOnInit(): void;
    onEditComment(): void;
    loadComments(): void;
    /**
     * ControlValueAccessor必须实现的方法
     */
    writeValue(value: string): void;
    registerOnChange(fn: any): void;
    registerOnTouched(fn: any): void;
    /**
     * 选择一条常用意见后事件
     */
    buttonClick(data: any): void;
    /**
     * 上传附件
     */
    uploadAttachment(): void;
    /**
     * 删除附件
     */
    attachmentDelete(attachment: any): void;
    /**
     * 获取不同格式附件的缩略图
     */
    imageUrl(attachmentInfo: any): string;
    /**
     * 展示手写签名dialog
     */
    showSignDialog(): void;
    /**
   * 点击删除签名
   */
    clickToDeleteImage(): void;
    clickToUseSign(): void;
    clickToUploadImg(): void;
    clickToConfirm(): void;
    clickToReset(): void;
    clickToCancel(): void;
    /**
     * 上传图片后事件
     * event.base64 是图片信息,event.name是带后缀的图片名，event.type如image/jpeg
     */
    imgChange(event: any): void;
    private uploadSignatureImg;
    /**
     * 获取用户的最近一次签名
     */
    private getUserSign;
    /**
     * 新增一条常用意见
     */
    add(): void;
    /**
     * 删除一条意见 data.rowData
     */
    clickToDeleteComment(data: any): void;
    /**
     * 常用意见保存
     */
    save(): void;
    /**
     * 调用接口执行新增删除、修改
     */
    private httpSave;
    /**
   * web端打开附件预览
   */
    attachmentPreview(metadataId: any): void;
    /**
     * 系统预置的不允许编辑删除
     * @param data data.rowData为实体数据
     * @returns
     */
    beforeEdit: (data: any) => Observable<boolean>;
}
