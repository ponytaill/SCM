/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable, Injector, ComponentFactoryResolver } from '@angular/core';
import { ProcessDesignerUIState } from './process-designer.uistate';
import { ProcessDesignerDataService } from '../domain/process-designer.dataservice';
import { forkJoin } from 'rxjs/observable/forkJoin';
import { ProcessClrTypeID } from '../model/process-clrtypeId';
import { BpmnProcessViewModel } from './bpmn-process.viewmodel';
import { WFFlowElementsViewModel } from './wf-flowElements.viewModel';
import { NotifyService } from '@farris/ui-notify';
import { MessagerService } from '@farris/ui-messager';
import { map, switchMap } from 'rxjs/operators';
import { FlowFormInfo } from '../domain/entities/flowform-info';
import { of, Subject, from } from 'rxjs';
import { BsModalService } from '@farris/ui-modal';
import { SaveAsEditComponent } from '../views/save-as-edit/save-as-edit.component';
import { ProcessDeUtil } from '../domain/process-de-util';
import { SubProcessViewModel } from './sub-process.viewmodel';
import { AutoActivityAdapter } from './auto-activity.adapter';
import { CatchEventAdapter } from './catch-event.adapter';
import { MessageActivityAdapter } from './message-activity.adapter';
import { AuditEvent, AuditProcessDefInfo } from '../domain/entities/audit-processDef-info';
import { HttpService } from '@ecp-caf/caf-common';
import { ProcessInfo } from '../model/process-info';
import { NotifyActivityAdapter } from './notify-activity.adapter';
import { AifCreationBillActivityAdapter } from './aif-creation-bill-activity.adapter';
export class ProcessDesignerViewModel {
    /**
     * @param {?} uiState
     * @param {?} service
     * @param {?} util
     * @param {?} notify
     * @param {?} message
     * @param {?} process
     * @param {?} activity
     * @param {?} subProcess
     * @param {?} autoActAdapter
     * @param {?} catchEventAdapter
     * @param {?} messageActAdapter
     * @param {?} notifyActAdapter
     * @param {?} creationActAdapter
     * @param {?} modalService
     * @param {?} injector
     * @param {?} resolver
     * @param {?} http
     */
    constructor(uiState, service, util, notify, message, process, activity, subProcess, autoActAdapter, catchEventAdapter, messageActAdapter, notifyActAdapter, creationActAdapter, modalService, injector, resolver, http) {
        this.uiState = uiState;
        this.service = service;
        this.util = util;
        this.notify = notify;
        this.message = message;
        this.process = process;
        this.activity = activity;
        this.subProcess = subProcess;
        this.autoActAdapter = autoActAdapter;
        this.catchEventAdapter = catchEventAdapter;
        this.messageActAdapter = messageActAdapter;
        this.notifyActAdapter = notifyActAdapter;
        this.creationActAdapter = creationActAdapter;
        this.modalService = modalService;
        this.injector = injector;
        this.resolver = resolver;
        this.http = http;
    }
    // 初始加载流程属性
    /**
     * @param {?} obj
     * @return {?}
     */
    initProcessProperty(obj) {
        /** @type {?} */
        const pptData = obj.propertyData;
        /** @type {?} */
        const ffId = pptData.EntryForm;
        if (ffId) {
            pptData.EntryForm = this.uiState.flowFormInfo.flowForm;
            this.uiState.propertyConfig = this.process.setProcessConfig(obj.propertyConfig);
            this.uiState.propertyData = pptData;
        }
        else {
            this.uiState.propertyConfig = this.process.setProcessConfig(obj.propertyConfig);
            this.uiState.propertyData = pptData;
        }
    }
    /**
     * @param {?} obj
     * @return {?}
     */
    setProperty(obj) {
        // 更新属性框数据与配置
        /** @type {?} */
        const propertyData = obj.propertyData;
        switch (propertyData.ClrTypeID) {
            case ProcessClrTypeID.process:
                this.process.setProcessProperty(obj);
                break;
            case ProcessClrTypeID.userActivity:
                this.activity.setUserActivityProperty(obj);
                break;
            case ProcessClrTypeID.subProcess:
                this.subProcess.setProperty(obj);
                break;
            case ProcessClrTypeID.autoActivity:
                this.autoActAdapter.setProperty(obj);
                break;
            case ProcessClrTypeID.catchEvent:
                this.catchEventAdapter.setProperty(obj);
                break;
            case ProcessClrTypeID.operationActivity:
                this.activity.setUserActivityProperty(obj);
                break;
            case ProcessClrTypeID.messageActivity:
                this.messageActAdapter.setProperty(obj);
                break;
            case ProcessClrTypeID.notifyActivity:
                this.notifyActAdapter.setProperty(obj);
                break;
            case ProcessClrTypeID.aifCreationBillActivity:
                this.creationActAdapter.setProperty(obj);
                break;
            default:
                this.activity.setFlowElementProperty(obj);
                break;
        }
    }
    /**
     * @return {?}
     */
    updateSchemas() {
        this.uiState.schemas = [];
        if (this.uiState.flowFormInfo.formalParameters && this.uiState.flowFormInfo.formalParameters.length > 0) {
            /** @type {?} */
            const schemaParams = this.uiState.flowFormInfo.formalParameters.filter((/**
             * @param {?} p
             * @return {?}
             */
            p => p.dataType === 'CDTSchema' && p.schemaMetadataId));
            forkJoin(schemaParams.map((/**
             * @param {?} para
             * @return {?}
             */
            para => {
                return this.service.getBusinessEntitybyId(para.schemaMetadataId);
            }))).subscribe((/**
             * @param {?} data
             * @return {?}
             */
            data => {
                if (data && data.length > 0) {
                    data.forEach((/**
                     * @param {?} d
                     * @return {?}
                     */
                    (d) => {
                        this.uiState.schemas.push(d);
                    }));
                }
            }), (/**
             * @param {?} err
             * @return {?}
             */
            err => {
                this.uiState.schemas = [];
            }));
        }
        else {
            this.uiState.schemas = [];
        }
    }
    /**
     * @param {?} formId
     * @return {?}
     */
    getFlowFormInfoById(formId) {
        /** @type {?} */
        const $flowform = new Subject();
        if (formId) {
            forkJoin(this.service.GetFlowFormbyId(formId), this.service.getParametersbyFlowFormKey(formId).pipe(map((/**
             * @param {?} params
             * @return {?}
             */
            (params) => {
                this.setFormParamCxt(params);
                return params;
            }))), this.service.getComponentsbyFlowformkey(formId), this.service.getExecuteFormbyFlowFormKey(formId), this.service.getBizActivities(formId), this.service.getCustomizeActions(formId)).subscribe((/**
             * @param {?} re
             * @return {?}
             */
            (re) => {
                /** @type {?} */
                const flowform = new FlowFormInfo();
                flowform.flowForm = re[0];
                flowform.formalParameters = re[1];
                flowform.bizComponents = re[2].filter((/**
                 * @param {?} cmp
                 * @return {?}
                 */
                cmp => cmp.ownerType !== 'Activity'));
                flowform.excuteForms = re[3];
                flowform.bizActivities = re[4];
                flowform.customizeActions = re[5];
                this.uiState.flowFormInfo = flowform;
                // this.updateCOs();
                this.updateSchemas();
                $flowform.next(flowform);
            }));
        }
        return $flowform.asObservable();
    }
    /**
     * @return {?}
     */
    getFormFormatsByBizCategory() {
        if (this.uiState.flowFormInfo.flowForm.businessObjectId) {
            /** @type {?} */
            let url = `/api/runtime/wf/v1.0/formFormat/query?param=`;
            /** @type {?} */
            let param = `{"bizCategory":"${this.uiState.flowFormInfo.flowForm.businessObjectId}"}`;
            param = encodeURIComponent(param);
            url += param;
            return this.http.get(url);
        }
        else {
            return from(new Array());
        }
    }
    /**
     * 保存流程
     * @param {?} content 流程上下文
     * @param {?} processInfo
     * @param {?} state
     * @return {?}
     */
    saveProcess(content, processInfo, state) {
        return this.service.saveProcess(content, processInfo, state);
    }
    /**
     * 发布流程
     * @param {?} content 流程上下文
     * @return {?}
     */
    deployProcess(content) {
        return this.service.deployProcess(content);
    }
    /**
     * @param {?} auditId
     * @param {?} success
     * @param {?} key
     * @return {?}
     */
    auditProcessDef(auditId, success, key) {
        /** @type {?} */
        const info = new AuditProcessDefInfo();
        info.auditId = auditId;
        info.success = success;
        info.processDefKey = key;
        this.service.auditProcessDef(info);
    }
    /**
     * 保存运行时流程
     * @param {?} content 流程上下文
     * @param {?} procDefId
     * @return {?}
     */
    saveRTProcess(content, procDefId) {
        return this.service.saveRTProcess(content, procDefId);
    }
    /**
     * @param {?} process
     * @param {?} processInfo
     * @return {?}
     */
    saveAsProcess(process, processInfo) {
        /** @type {?} */
        const compFactory = this.resolver.resolveComponentFactory(SaveAsEditComponent);
        /** @type {?} */
        const compRef = compFactory.create(this.injector);
        compRef.instance.procKey = process.DefaultProcess.Key;
        compRef.instance.procName = process.DefaultProcess.Name + '_副本';
        compRef.instance.isAdministratorConfig = this.uiState.isAdministratorConfig;
        compRef.instance.organizations = this.uiState.organizations;
        compRef.instance.accessLevel = processInfo.accessLevel;
        compRef.instance.organization = processInfo.procOrg.orgId;
        compRef.instance.organizationName = processInfo.procOrg.orgName;
        /** @type {?} */
        const modalOptions = {
            title: '另存为',
            width: 450, height: 400,
            buttons: compRef.instance.btnRef,
            showButtons: true
        };
        /** @type {?} */
        const dlg = this.modalService.show(compRef, modalOptions);
        compRef.instance.submit.subscribe((/**
         * @param {?} re
         * @return {?}
         */
        (re) => {
            process.DefaultProcess.Name = re.procName;
            /** @type {?} */
            const procInfo = new ProcessInfo();
            procInfo.accessLevel = re.accessLevel;
            procInfo.procOrg = {
                orgId: re.organization,
                orgName: re.organizationName
            };
            this.saveProcess(JSON.stringify(process), procInfo, 1).subscribe((/**
             * @param {?} r
             * @return {?}
             */
            r => {
                this.notify.success((/** @type {?} */ ({
                    title: '系统提示', msg: '另存为成功', timeout: 3000
                })));
            }), (/**
             * @param {?} err
             * @return {?}
             */
            err => {
                this.notify.error((/** @type {?} */ ({
                    title: '系统提示', msg: '另存为失败，请检查流程是否正确！', timeout: 3000
                })));
            }));
            dlg.close();
        }));
        compRef.instance.cancel.subscribe((/**
         * @param {?} r
         * @return {?}
         */
        r => {
            dlg.close();
        }));
    }
    /**
     * 同步设计器时流程定义
     * @param {?} content
     * @param {?} rtProcessInfo
     * @return {?}
     */
    syncDtProcess(content, rtProcessInfo) {
        if (content) {
            /** @type {?} */
            const process = JSON.parse(content);
            this.message.question('是否将当前版本流程定义同步到设计时流程定义包！', (/**
             * @return {?}
             */
            () => {
                this.service.syncDtProcess(content, rtProcessInfo).subscribe((/**
                 * @param {?} data
                 * @return {?}
                 */
                (data) => {
                    this.notify.success((/** @type {?} */ ({
                        title: '系统提示', msg: '同步成功', timeout: 3000
                    })));
                    this.auditProcessDef(AuditEvent.WF_ProcessDef_SyncDT, true, process.DefaultProcess.Key);
                }), (/**
                 * @param {?} error
                 * @return {?}
                 */
                (error) => {
                    this.notify.error((/** @type {?} */ ({
                        title: '系统提示', msg: '同步失败，请联系管理员查看原因！', timeout: 3000
                    })));
                    this.auditProcessDef(AuditEvent.WF_ProcessDef_SyncDT, false, process.DefaultProcess.Key);
                }));
            }));
        }
    }
    /**
     * @param {?} data
     * @param {?} processInfo
     * @return {?}
     */
    beforeCompleteStrategyChange(data, processInfo) {
        /** @type {?} */
        const url = `/api/runtime/wf/v1.0/processInstances/runtimeActivityInstances?procDefId=${processInfo.rtProcDefId}&activityDefinitionId=${data.Id}`;
        return this.http.get(url).pipe(switchMap((/**
         * @param {?} re
         * @return {?}
         */
        (re) => {
            if (re && re.length > 0) {
                this.message.info('当前节点存在运行中的活动实例，不允许调整完成策略，请了解！');
                return of(false);
            }
            else {
                return of(true);
            }
        })));
    }
    /**
     * @param {?} procCategoryId
     * @return {?}
     */
    getProcessCategory(procCategoryId) {
        return this.service.GetFlowFormbyId(procCategoryId);
    }
    /**
     * @private
     * @param {?} params
     * @return {?}
     */
    setFormParamCxt(params) {
        this.uiState.formalParameterContext = [];
        if (params && params.length > 0) {
            params.forEach((/**
             * @param {?} param
             * @return {?}
             */
            param => {
                if (param.dataType === 'CDTSchema') {
                    /** @type {?} */
                    const formalParameterContext = [{
                            key: `schemaId_${param.code}`,
                            name: `schemaId_${param.name}`,
                            description: `schemaId_${param.name}`
                        }, {
                            key: `metadataId_${param.code}`,
                            name: `metadataId_${param.name}`,
                            description: `metadataId_${param.name}`
                        }];
                    this.uiState.formalParameterContext = this.uiState.formalParameterContext.concat(formalParameterContext);
                }
            }));
        }
    }
}
ProcessDesignerViewModel.decorators = [
    { type: Injectable }
];
/** @nocollapse */
ProcessDesignerViewModel.ctorParameters = () => [
    { type: ProcessDesignerUIState },
    { type: ProcessDesignerDataService },
    { type: ProcessDeUtil },
    { type: NotifyService },
    { type: MessagerService },
    { type: BpmnProcessViewModel },
    { type: WFFlowElementsViewModel },
    { type: SubProcessViewModel },
    { type: AutoActivityAdapter },
    { type: CatchEventAdapter },
    { type: MessageActivityAdapter },
    { type: NotifyActivityAdapter },
    { type: AifCreationBillActivityAdapter },
    { type: BsModalService },
    { type: Injector },
    { type: ComponentFactoryResolver },
    { type: HttpService }
];
if (false) {
    /** @type {?} */
    ProcessDesignerViewModel.prototype.uiState;
    /**
     * @type {?}
     * @private
     */
    ProcessDesignerViewModel.prototype.service;
    /**
     * @type {?}
     * @private
     */
    ProcessDesignerViewModel.prototype.util;
    /**
     * @type {?}
     * @private
     */
    ProcessDesignerViewModel.prototype.notify;
    /**
     * @type {?}
     * @private
     */
    ProcessDesignerViewModel.prototype.message;
    /**
     * @type {?}
     * @private
     */
    ProcessDesignerViewModel.prototype.process;
    /**
     * @type {?}
     * @private
     */
    ProcessDesignerViewModel.prototype.activity;
    /**
     * @type {?}
     * @private
     */
    ProcessDesignerViewModel.prototype.subProcess;
    /**
     * @type {?}
     * @private
     */
    ProcessDesignerViewModel.prototype.autoActAdapter;
    /**
     * @type {?}
     * @private
     */
    ProcessDesignerViewModel.prototype.catchEventAdapter;
    /**
     * @type {?}
     * @private
     */
    ProcessDesignerViewModel.prototype.messageActAdapter;
    /**
     * @type {?}
     * @private
     */
    ProcessDesignerViewModel.prototype.notifyActAdapter;
    /**
     * @type {?}
     * @private
     */
    ProcessDesignerViewModel.prototype.creationActAdapter;
    /**
     * @type {?}
     * @private
     */
    ProcessDesignerViewModel.prototype.modalService;
    /**
     * @type {?}
     * @private
     */
    ProcessDesignerViewModel.prototype.injector;
    /**
     * @type {?}
     * @private
     */
    ProcessDesignerViewModel.prototype.resolver;
    /**
     * @type {?}
     * @private
     */
    ProcessDesignerViewModel.prototype.http;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvY2Vzcy1kZXNpZ25lci52aWV3bW9kZWwuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZ3NwLXdmL3dmLXByb2Nlc3MtZWRpdG9yLyIsInNvdXJjZXMiOlsibGliL2FwcC9wcm9jZXNzLWRlc2lnbmVyLnZpZXdtb2RlbC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxRQUFRLEVBQUUsd0JBQXdCLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDL0UsT0FBTyxFQUFFLHNCQUFzQixFQUFFLE1BQU0sNEJBQTRCLENBQUM7QUFDcEUsT0FBTyxFQUFFLDBCQUEwQixFQUFFLE1BQU0sd0NBQXdDLENBQUM7QUFDcEYsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLDBCQUEwQixDQUFDO0FBRXBELE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLDRCQUE0QixDQUFDO0FBQzlELE9BQU8sRUFBRSxvQkFBb0IsRUFBRSxNQUFNLDBCQUEwQixDQUFDO0FBQ2hFLE9BQU8sRUFBRSx1QkFBdUIsRUFBRSxNQUFNLDZCQUE2QixDQUFDO0FBQ3RFLE9BQU8sRUFBRSxhQUFhLEVBQWlCLE1BQU0sbUJBQW1CLENBQUM7QUFDakUsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBQ3RELE9BQU8sRUFBRSxHQUFHLEVBQUUsU0FBUyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDaEQsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLGtDQUFrQyxDQUFDO0FBQ2hFLE9BQU8sRUFBRSxFQUFFLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUN6QyxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sa0JBQWtCLENBQUM7QUFDbEQsT0FBTyxFQUFFLG1CQUFtQixFQUFFLE1BQU0sOENBQThDLENBQUM7QUFDbkYsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLDJCQUEyQixDQUFDO0FBRTFELE9BQU8sRUFBRSxt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ZWN0YWJsZSwgSW5qZWN0b3IsIENvbXBvbmVudEZhY3RvcnlSZXNvbHZlciB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBQcm9jZXNzRGVzaWduZXJVSVN0YXRlIH0gZnJvbSAnLi9wcm9jZXNzLWRlc2lnbmVyLnVpc3RhdGUnO1xyXG5pbXBvcnQgeyBQcm9jZXNzRGVzaWduZXJEYXRhU2VydmljZSB9IGZyb20gJy4uL2RvbWFpbi9wcm9jZXNzLWRlc2lnbmVyLmRhdGFzZXJ2aWNlJztcclxuaW1wb3J0IHsgZm9ya0pvaW4gfSBmcm9tICdyeGpzL29ic2VydmFibGUvZm9ya0pvaW4nO1xyXG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcy9vYnNlcnZhYmxlJztcclxuaW1wb3J0IHsgUHJvY2Vzc0NsclR5cGVJRCB9IGZyb20gJy4uL21vZGVsL3Byb2Nlc3MtY2xydHlwZUlkJztcclxuaW1wb3J0IHsgQnBtblByb2Nlc3NWaWV3TW9kZWwgfSBmcm9tICcuL2JwbW4tcHJvY2Vzcy52aWV3bW9kZWwnO1xyXG5pbXBvcnQgeyBXRkZsb3dFbGVtZW50c1ZpZXdNb2RlbCB9IGZyb20gJy4vd2YtZmxvd0VsZW1lbnRzLnZpZXdNb2RlbCc7XHJcbmltcG9ydCB7IE5vdGlmeVNlcnZpY2UsIE5vdGlmeU9wdGlvbnMgfSBmcm9tICdAZmFycmlzL3VpLW5vdGlmeSc7XHJcbmltcG9ydCB7IE1lc3NhZ2VyU2VydmljZSB9IGZyb20gJ0BmYXJyaXMvdWktbWVzc2FnZXInO1xyXG5pbXBvcnQgeyBtYXAsIHN3aXRjaE1hcCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcclxuaW1wb3J0IHsgRmxvd0Zvcm1JbmZvIH0gZnJvbSAnLi4vZG9tYWluL2VudGl0aWVzL2Zsb3dmb3JtLWluZm8nO1xyXG5pbXBvcnQgeyBvZiwgU3ViamVjdCwgZnJvbSB9IGZyb20gJ3J4anMnO1xyXG5pbXBvcnQgeyBCc01vZGFsU2VydmljZSB9IGZyb20gJ0BmYXJyaXMvdWktbW9kYWwnO1xyXG5pbXBvcnQgeyBTYXZlQXNFZGl0Q29tcG9uZW50IH0gZnJvbSAnLi4vdmlld3Mvc2F2ZS1hcy1lZGl0L3NhdmUtYXMtZWRpdC5jb21wb25lbnQnO1xyXG5pbXBvcnQgeyBQcm9jZXNzRGVVdGlsIH0gZnJvbSAnLi4vZG9tYWluL3Byb2Nlc3MtZGUtdXRpbCc7XHJcbmltcG9ydCB7IEh0dHBFcnJvclJlc3BvbnNlIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uL2h0dHAnO1xyXG5pbXBvcnQgeyBTdWJQcm9jZXNzVmlld01vZGVsIH0gZnJvbSAnLi9zdWItcHJvY2Vzcy52aWV3bW9kZWwnO1xyXG5pbXBvcnQgeyBBdXRvQWN0aXZpdHlBZGFwdGVyIH0gZnJvbSAnLi9hdXRvLWFjdGl2aXR5LmFkYXB0ZXInO1xyXG5pbXBvcnQgeyBDYXRjaEV2ZW50QWRhcHRlciB9IGZyb20gJy4vY2F0Y2gtZXZlbnQuYWRhcHRlcic7XHJcbmltcG9ydCB7IE1lc3NhZ2VBY3Rpdml0eUFkYXB0ZXIgfSBmcm9tICcuL21lc3NhZ2UtYWN0aXZpdHkuYWRhcHRlcic7XHJcbmltcG9ydCB7IEF1ZGl0RXZlbnQsIEF1ZGl0UHJvY2Vzc0RlZkluZm8gfSBmcm9tICcuLi9kb21haW4vZW50aXRpZXMvYXVkaXQtcHJvY2Vzc0RlZi1pbmZvJztcclxuaW1wb3J0IHsgUlRQcm9jZXNzSW5mbyB9IGZyb20gJy4uL21vZGVsL3J0LXByb2Nlc3MtaW5mbyc7XHJcbmltcG9ydCB7IEh0dHBTZXJ2aWNlIH0gZnJvbSAnQGVjcC1jYWYvY2FmLWNvbW1vbic7XHJcbmltcG9ydCB7IFByb2Nlc3NJbmZvIH0gZnJvbSAnLi4vbW9kZWwvcHJvY2Vzcy1pbmZvJztcclxuaW1wb3J0IHsgTm90aWZ5QWN0aXZpdHlBZGFwdGVyIH0gZnJvbSAnLi9ub3RpZnktYWN0aXZpdHkuYWRhcHRlcic7XHJcbmltcG9ydCB7IEZsb3dGb3JtRW50aXR5IH0gZnJvbSAnLi4vZG9tYWluL2VudGl0aWVzL2Zsb3dmb3JtLmVudGl0eSc7XHJcbmltcG9ydCB7IEFpZkNyZWF0aW9uQmlsbEFjdGl2aXR5QWRhcHRlciB9IGZyb20gJy4vYWlmLWNyZWF0aW9uLWJpbGwtYWN0aXZpdHkuYWRhcHRlcic7XHJcblxyXG5cclxuQEluamVjdGFibGUoKVxyXG5cclxuZXhwb3J0IGNsYXNzIFByb2Nlc3NEZXNpZ25lclZpZXdNb2RlbCB7XHJcblxyXG4gICAgY29uc3RydWN0b3IoXHJcbiAgICAgICAgcHVibGljIHVpU3RhdGU6IFByb2Nlc3NEZXNpZ25lclVJU3RhdGUsXHJcbiAgICAgICAgcHJpdmF0ZSBzZXJ2aWNlOiBQcm9jZXNzRGVzaWduZXJEYXRhU2VydmljZSxcclxuICAgICAgICBwcml2YXRlIHV0aWw6IFByb2Nlc3NEZVV0aWwsXHJcbiAgICAgICAgcHJpdmF0ZSBub3RpZnk6IE5vdGlmeVNlcnZpY2UsXHJcbiAgICAgICAgcHJpdmF0ZSBtZXNzYWdlOiBNZXNzYWdlclNlcnZpY2UsXHJcbiAgICAgICAgcHJpdmF0ZSBwcm9jZXNzOiBCcG1uUHJvY2Vzc1ZpZXdNb2RlbCxcclxuICAgICAgICBwcml2YXRlIGFjdGl2aXR5OiBXRkZsb3dFbGVtZW50c1ZpZXdNb2RlbCxcclxuICAgICAgICBwcml2YXRlIHN1YlByb2Nlc3M6IFN1YlByb2Nlc3NWaWV3TW9kZWwsXHJcbiAgICAgICAgcHJpdmF0ZSBhdXRvQWN0QWRhcHRlcjogQXV0b0FjdGl2aXR5QWRhcHRlcixcclxuICAgICAgICBwcml2YXRlIGNhdGNoRXZlbnRBZGFwdGVyOiBDYXRjaEV2ZW50QWRhcHRlcixcclxuICAgICAgICBwcml2YXRlIG1lc3NhZ2VBY3RBZGFwdGVyOiBNZXNzYWdlQWN0aXZpdHlBZGFwdGVyLFxyXG4gICAgICAgIHByaXZhdGUgbm90aWZ5QWN0QWRhcHRlcjogTm90aWZ5QWN0aXZpdHlBZGFwdGVyLFxyXG4gICAgICAgIHByaXZhdGUgY3JlYXRpb25BY3RBZGFwdGVyOiBBaWZDcmVhdGlvbkJpbGxBY3Rpdml0eUFkYXB0ZXIsXHJcbiAgICAgICAgcHJpdmF0ZSBtb2RhbFNlcnZpY2U6IEJzTW9kYWxTZXJ2aWNlLFxyXG4gICAgICAgIHByaXZhdGUgaW5qZWN0b3I6IEluamVjdG9yLFxyXG4gICAgICAgIHByaXZhdGUgcmVzb2x2ZXI6IENvbXBvbmVudEZhY3RvcnlSZXNvbHZlcixcclxuICAgICAgICBwcml2YXRlIGh0dHA6IEh0dHBTZXJ2aWNlXHJcbiAgICApIHsgfVxyXG5cclxuICAgIC8vIOWIneWni+WKoOi9vea1geeoi+WxnuaAp1xyXG4gICAgaW5pdFByb2Nlc3NQcm9wZXJ0eShvYmo6IGFueSkge1xyXG4gICAgICAgIGNvbnN0IHBwdERhdGEgPSBvYmoucHJvcGVydHlEYXRhO1xyXG4gICAgICAgIGNvbnN0IGZmSWQgPSBwcHREYXRhLkVudHJ5Rm9ybTtcclxuICAgICAgICBpZiAoZmZJZCkge1xyXG4gICAgICAgICAgICBwcHREYXRhLkVudHJ5Rm9ybSA9IHRoaXMudWlTdGF0ZS5mbG93Rm9ybUluZm8uZmxvd0Zvcm07XHJcbiAgICAgICAgICAgIHRoaXMudWlTdGF0ZS5wcm9wZXJ0eUNvbmZpZyA9IHRoaXMucHJvY2Vzcy5zZXRQcm9jZXNzQ29uZmlnKG9iai5wcm9wZXJ0eUNvbmZpZyk7XHJcbiAgICAgICAgICAgIHRoaXMudWlTdGF0ZS5wcm9wZXJ0eURhdGEgPSBwcHREYXRhO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMudWlTdGF0ZS5wcm9wZXJ0eUNvbmZpZyA9IHRoaXMucHJvY2Vzcy5zZXRQcm9jZXNzQ29uZmlnKG9iai5wcm9wZXJ0eUNvbmZpZyk7XHJcbiAgICAgICAgICAgIHRoaXMudWlTdGF0ZS5wcm9wZXJ0eURhdGEgPSBwcHREYXRhO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHNldFByb3BlcnR5KG9iajogYW55KSB7XHJcbiAgICAgICAgLy8g5pu05paw5bGe5oCn5qGG5pWw5o2u5LiO6YWN572uXHJcbiAgICAgICAgY29uc3QgcHJvcGVydHlEYXRhID0gb2JqLnByb3BlcnR5RGF0YTtcclxuICAgICAgICBzd2l0Y2ggKHByb3BlcnR5RGF0YS5DbHJUeXBlSUQpIHtcclxuICAgICAgICAgICAgY2FzZSBQcm9jZXNzQ2xyVHlwZUlELnByb2Nlc3M6XHJcbiAgICAgICAgICAgICAgICB0aGlzLnByb2Nlc3Muc2V0UHJvY2Vzc1Byb3BlcnR5KG9iaik7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSBQcm9jZXNzQ2xyVHlwZUlELnVzZXJBY3Rpdml0eTpcclxuICAgICAgICAgICAgICAgIHRoaXMuYWN0aXZpdHkuc2V0VXNlckFjdGl2aXR5UHJvcGVydHkob2JqKTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIFByb2Nlc3NDbHJUeXBlSUQuc3ViUHJvY2VzczpcclxuICAgICAgICAgICAgICAgIHRoaXMuc3ViUHJvY2Vzcy5zZXRQcm9wZXJ0eShvYmopO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgUHJvY2Vzc0NsclR5cGVJRC5hdXRvQWN0aXZpdHk6XHJcbiAgICAgICAgICAgICAgICB0aGlzLmF1dG9BY3RBZGFwdGVyLnNldFByb3BlcnR5KG9iaik7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSBQcm9jZXNzQ2xyVHlwZUlELmNhdGNoRXZlbnQ6XHJcbiAgICAgICAgICAgICAgICB0aGlzLmNhdGNoRXZlbnRBZGFwdGVyLnNldFByb3BlcnR5KG9iaik7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSBQcm9jZXNzQ2xyVHlwZUlELm9wZXJhdGlvbkFjdGl2aXR5OlxyXG4gICAgICAgICAgICAgICAgdGhpcy5hY3Rpdml0eS5zZXRVc2VyQWN0aXZpdHlQcm9wZXJ0eShvYmopO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgUHJvY2Vzc0NsclR5cGVJRC5tZXNzYWdlQWN0aXZpdHk6XHJcbiAgICAgICAgICAgICAgICB0aGlzLm1lc3NhZ2VBY3RBZGFwdGVyLnNldFByb3BlcnR5KG9iaik7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSBQcm9jZXNzQ2xyVHlwZUlELm5vdGlmeUFjdGl2aXR5OlxyXG4gICAgICAgICAgICAgICAgdGhpcy5ub3RpZnlBY3RBZGFwdGVyLnNldFByb3BlcnR5KG9iaik7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgUHJvY2Vzc0NsclR5cGVJRC5haWZDcmVhdGlvbkJpbGxBY3Rpdml0eTpcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmNyZWF0aW9uQWN0QWRhcHRlci5zZXRQcm9wZXJ0eShvYmopO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgdGhpcy5hY3Rpdml0eS5zZXRGbG93RWxlbWVudFByb3BlcnR5KG9iaik7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBwdWJsaWMgdXBkYXRlU2NoZW1hcygpIHtcclxuICAgICAgICB0aGlzLnVpU3RhdGUuc2NoZW1hcyA9IFtdO1xyXG4gICAgICAgIGlmICh0aGlzLnVpU3RhdGUuZmxvd0Zvcm1JbmZvLmZvcm1hbFBhcmFtZXRlcnMgJiYgdGhpcy51aVN0YXRlLmZsb3dGb3JtSW5mby5mb3JtYWxQYXJhbWV0ZXJzLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgY29uc3Qgc2NoZW1hUGFyYW1zID0gdGhpcy51aVN0YXRlLmZsb3dGb3JtSW5mby5mb3JtYWxQYXJhbWV0ZXJzLmZpbHRlcihwID0+IHAuZGF0YVR5cGUgPT09ICdDRFRTY2hlbWEnICYmIHAuc2NoZW1hTWV0YWRhdGFJZCk7XHJcbiAgICAgICAgICAgIGZvcmtKb2luKHNjaGVtYVBhcmFtcy5tYXAocGFyYSA9PiB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5zZXJ2aWNlLmdldEJ1c2luZXNzRW50aXR5YnlJZChwYXJhLnNjaGVtYU1ldGFkYXRhSWQpO1xyXG4gICAgICAgICAgICB9KSkuc3Vic2NyaWJlKGRhdGEgPT4ge1xyXG4gICAgICAgICAgICAgICAgaWYgKGRhdGEgJiYgZGF0YS5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZGF0YS5mb3JFYWNoKChkOiBhbnkpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy51aVN0YXRlLnNjaGVtYXMucHVzaChkKTtcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSwgZXJyID0+IHtcclxuICAgICAgICAgICAgICAgIHRoaXMudWlTdGF0ZS5zY2hlbWFzID0gW107XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMudWlTdGF0ZS5zY2hlbWFzID0gW107XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBnZXRGbG93Rm9ybUluZm9CeUlkKGZvcm1JZDogc3RyaW5nKTogT2JzZXJ2YWJsZTxGbG93Rm9ybUluZm8+IHtcclxuICAgICAgICBjb25zdCAkZmxvd2Zvcm0gPSBuZXcgU3ViamVjdDxGbG93Rm9ybUluZm8+KCk7XHJcbiAgICAgICAgaWYgKGZvcm1JZCkge1xyXG4gICAgICAgICAgICBmb3JrSm9pbih0aGlzLnNlcnZpY2UuR2V0Rmxvd0Zvcm1ieUlkKGZvcm1JZCksXHJcbiAgICAgICAgICAgICAgICB0aGlzLnNlcnZpY2UuZ2V0UGFyYW1ldGVyc2J5Rmxvd0Zvcm1LZXkoZm9ybUlkKS5waXBlKFxyXG4gICAgICAgICAgICAgICAgICAgIG1hcCgocGFyYW1zOiBhbnlbXSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnNldEZvcm1QYXJhbUN4dChwYXJhbXMpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcGFyYW1zO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICApLFxyXG4gICAgICAgICAgICAgICAgdGhpcy5zZXJ2aWNlLmdldENvbXBvbmVudHNieUZsb3dmb3Jta2V5KGZvcm1JZCksXHJcbiAgICAgICAgICAgICAgICB0aGlzLnNlcnZpY2UuZ2V0RXhlY3V0ZUZvcm1ieUZsb3dGb3JtS2V5KGZvcm1JZCksXHJcbiAgICAgICAgICAgICAgICB0aGlzLnNlcnZpY2UuZ2V0Qml6QWN0aXZpdGllcyhmb3JtSWQpLFxyXG4gICAgICAgICAgICAgICAgdGhpcy5zZXJ2aWNlLmdldEN1c3RvbWl6ZUFjdGlvbnMoZm9ybUlkKVxyXG4gICAgICAgICAgICApLnN1YnNjcmliZSgocmU6IGFueVtdKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBmbG93Zm9ybSA9IG5ldyBGbG93Rm9ybUluZm8oKTtcclxuICAgICAgICAgICAgICAgIGZsb3dmb3JtLmZsb3dGb3JtID0gcmVbMF07XHJcbiAgICAgICAgICAgICAgICBmbG93Zm9ybS5mb3JtYWxQYXJhbWV0ZXJzID0gcmVbMV07XHJcbiAgICAgICAgICAgICAgICBmbG93Zm9ybS5iaXpDb21wb25lbnRzID0gcmVbMl0uZmlsdGVyKGNtcCA9PiBjbXAub3duZXJUeXBlICE9PSAnQWN0aXZpdHknKTtcclxuICAgICAgICAgICAgICAgIGZsb3dmb3JtLmV4Y3V0ZUZvcm1zID0gcmVbM107XHJcbiAgICAgICAgICAgICAgICBmbG93Zm9ybS5iaXpBY3Rpdml0aWVzID0gcmVbNF07XHJcbiAgICAgICAgICAgICAgICBmbG93Zm9ybS5jdXN0b21pemVBY3Rpb25zID0gcmVbNV07XHJcbiAgICAgICAgICAgICAgICB0aGlzLnVpU3RhdGUuZmxvd0Zvcm1JbmZvID0gZmxvd2Zvcm07XHJcbiAgICAgICAgICAgICAgICAvLyB0aGlzLnVwZGF0ZUNPcygpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy51cGRhdGVTY2hlbWFzKCk7XHJcbiAgICAgICAgICAgICAgICAkZmxvd2Zvcm0ubmV4dChmbG93Zm9ybSk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gJGZsb3dmb3JtLmFzT2JzZXJ2YWJsZSgpO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBnZXRGb3JtRm9ybWF0c0J5Qml6Q2F0ZWdvcnkoKTogT2JzZXJ2YWJsZTxhbnk+IHtcclxuICAgICAgICBpZiAodGhpcy51aVN0YXRlLmZsb3dGb3JtSW5mby5mbG93Rm9ybS5idXNpbmVzc09iamVjdElkKSB7XHJcbiAgICAgICAgICAgIGxldCB1cmwgPSBgL2FwaS9ydW50aW1lL3dmL3YxLjAvZm9ybUZvcm1hdC9xdWVyeT9wYXJhbT1gO1xyXG4gICAgICAgICAgICBsZXQgcGFyYW0gPSBge1wiYml6Q2F0ZWdvcnlcIjpcIiR7dGhpcy51aVN0YXRlLmZsb3dGb3JtSW5mby5mbG93Rm9ybS5idXNpbmVzc09iamVjdElkfVwifWA7XHJcbiAgICAgICAgICAgIHBhcmFtID0gZW5jb2RlVVJJQ29tcG9uZW50KHBhcmFtKTtcclxuICAgICAgICAgICAgdXJsICs9IHBhcmFtO1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5odHRwLmdldCh1cmwpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHJldHVybiBmcm9tKG5ldyBBcnJheSgpKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIOS/neWtmOa1geeoi1xyXG4gICAgICogQHBhcmFtIGNvbnRlbnQg5rWB56iL5LiK5LiL5paHXHJcbiAgICAgKi9cclxuICAgIHNhdmVQcm9jZXNzKGNvbnRlbnQ6IHN0cmluZywgcHJvY2Vzc0luZm86IFByb2Nlc3NJbmZvLCBzdGF0ZTogbnVtYmVyKTogT2JzZXJ2YWJsZTxhbnk+IHtcclxuICAgICAgICByZXR1cm4gdGhpcy5zZXJ2aWNlLnNhdmVQcm9jZXNzKGNvbnRlbnQsIHByb2Nlc3NJbmZvLCBzdGF0ZSk7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIOWPkeW4g+a1geeoi1xyXG4gICAgICogQHBhcmFtIGNvbnRlbnQg5rWB56iL5LiK5LiL5paHXHJcbiAgICAgKi9cclxuICAgIGRlcGxveVByb2Nlc3MoY29udGVudDogc3RyaW5nKTogT2JzZXJ2YWJsZTxhbnk+IHtcclxuICAgICAgICByZXR1cm4gdGhpcy5zZXJ2aWNlLmRlcGxveVByb2Nlc3MoY29udGVudCk7XHJcbiAgICB9XHJcblxyXG4gICAgYXVkaXRQcm9jZXNzRGVmKGF1ZGl0SWQ6IEF1ZGl0RXZlbnQsIHN1Y2Nlc3M6IGJvb2xlYW4sIGtleTogc3RyaW5nKSB7XHJcbiAgICAgICAgY29uc3QgaW5mbyA9IG5ldyBBdWRpdFByb2Nlc3NEZWZJbmZvKCk7XHJcbiAgICAgICAgaW5mby5hdWRpdElkID0gYXVkaXRJZDtcclxuICAgICAgICBpbmZvLnN1Y2Nlc3MgPSBzdWNjZXNzO1xyXG4gICAgICAgIGluZm8ucHJvY2Vzc0RlZktleSA9IGtleTtcclxuXHJcbiAgICAgICAgdGhpcy5zZXJ2aWNlLmF1ZGl0UHJvY2Vzc0RlZihpbmZvKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIOS/neWtmOi/kOihjOaXtua1geeoi1xyXG4gICAgICogQHBhcmFtIGNvbnRlbnQg5rWB56iL5LiK5LiL5paHXHJcbiAgICAgKi9cclxuICAgIHNhdmVSVFByb2Nlc3MoY29udGVudDogc3RyaW5nLCBwcm9jRGVmSWQ6IHN0cmluZyk6IE9ic2VydmFibGU8YW55PiB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuc2VydmljZS5zYXZlUlRQcm9jZXNzKGNvbnRlbnQsIHByb2NEZWZJZCk7XHJcbiAgICB9XHJcblxyXG4gICAgc2F2ZUFzUHJvY2Vzcyhwcm9jZXNzOiBhbnksIHByb2Nlc3NJbmZvOiBQcm9jZXNzSW5mbykge1xyXG4gICAgICAgIGNvbnN0IGNvbXBGYWN0b3J5ID0gdGhpcy5yZXNvbHZlci5yZXNvbHZlQ29tcG9uZW50RmFjdG9yeShTYXZlQXNFZGl0Q29tcG9uZW50KTtcclxuICAgICAgICBjb25zdCBjb21wUmVmID0gY29tcEZhY3RvcnkuY3JlYXRlKHRoaXMuaW5qZWN0b3IpO1xyXG4gICAgICAgIGNvbXBSZWYuaW5zdGFuY2UucHJvY0tleSA9IHByb2Nlc3MuRGVmYXVsdFByb2Nlc3MuS2V5O1xyXG4gICAgICAgIGNvbXBSZWYuaW5zdGFuY2UucHJvY05hbWUgPSBwcm9jZXNzLkRlZmF1bHRQcm9jZXNzLk5hbWUgKyAnX+WJr+acrCc7XHJcbiAgICAgICAgY29tcFJlZi5pbnN0YW5jZS5pc0FkbWluaXN0cmF0b3JDb25maWcgPSB0aGlzLnVpU3RhdGUuaXNBZG1pbmlzdHJhdG9yQ29uZmlnO1xyXG4gICAgICAgIGNvbXBSZWYuaW5zdGFuY2Uub3JnYW5pemF0aW9ucyA9IHRoaXMudWlTdGF0ZS5vcmdhbml6YXRpb25zO1xyXG4gICAgICAgIGNvbXBSZWYuaW5zdGFuY2UuYWNjZXNzTGV2ZWwgPSBwcm9jZXNzSW5mby5hY2Nlc3NMZXZlbDtcclxuICAgICAgICBjb21wUmVmLmluc3RhbmNlLm9yZ2FuaXphdGlvbiA9IHByb2Nlc3NJbmZvLnByb2NPcmcub3JnSWQ7XHJcbiAgICAgICAgY29tcFJlZi5pbnN0YW5jZS5vcmdhbml6YXRpb25OYW1lID0gcHJvY2Vzc0luZm8ucHJvY09yZy5vcmdOYW1lO1xyXG4gICAgICAgIGNvbnN0IG1vZGFsT3B0aW9ucyA9IHtcclxuICAgICAgICAgICAgdGl0bGU6ICflj6blrZjkuLonLFxyXG4gICAgICAgICAgICB3aWR0aDogNDUwLCBoZWlnaHQ6IDQwMCxcclxuICAgICAgICAgICAgYnV0dG9uczogY29tcFJlZi5pbnN0YW5jZS5idG5SZWYsXHJcbiAgICAgICAgICAgIHNob3dCdXR0b25zOiB0cnVlXHJcbiAgICAgICAgfTtcclxuICAgICAgICBjb25zdCBkbGcgPSB0aGlzLm1vZGFsU2VydmljZS5zaG93KGNvbXBSZWYsIG1vZGFsT3B0aW9ucyk7XHJcbiAgICAgICAgY29tcFJlZi5pbnN0YW5jZS5zdWJtaXQuc3Vic2NyaWJlKChyZTogYW55KSA9PiB7XHJcbiAgICAgICAgICAgIHByb2Nlc3MuRGVmYXVsdFByb2Nlc3MuTmFtZSA9IHJlLnByb2NOYW1lO1xyXG4gICAgICAgICAgICBjb25zdCBwcm9jSW5mbyA9IG5ldyBQcm9jZXNzSW5mbygpO1xyXG4gICAgICAgICAgICBwcm9jSW5mby5hY2Nlc3NMZXZlbCA9IHJlLmFjY2Vzc0xldmVsO1xyXG4gICAgICAgICAgICBwcm9jSW5mby5wcm9jT3JnID0ge1xyXG4gICAgICAgICAgICAgICAgb3JnSWQ6IHJlLm9yZ2FuaXphdGlvbixcclxuICAgICAgICAgICAgICAgIG9yZ05hbWU6IHJlLm9yZ2FuaXphdGlvbk5hbWVcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgdGhpcy5zYXZlUHJvY2VzcyhKU09OLnN0cmluZ2lmeShwcm9jZXNzKSwgcHJvY0luZm8sIDEpLnN1YnNjcmliZShyID0+IHtcclxuICAgICAgICAgICAgICAgIHRoaXMubm90aWZ5LnN1Y2Nlc3Moe1xyXG4gICAgICAgICAgICAgICAgICAgIHRpdGxlOiAn57O757uf5o+Q56S6JywgbXNnOiAn5Y+m5a2Y5Li65oiQ5YqfJywgdGltZW91dDogMzAwMFxyXG4gICAgICAgICAgICAgICAgfSBhcyBOb3RpZnlPcHRpb25zKTtcclxuICAgICAgICAgICAgfSwgZXJyID0+IHtcclxuICAgICAgICAgICAgICAgIHRoaXMubm90aWZ5LmVycm9yKHtcclxuICAgICAgICAgICAgICAgICAgICB0aXRsZTogJ+ezu+e7n+aPkOekuicsIG1zZzogJ+WPpuWtmOS4uuWksei0pe+8jOivt+ajgOafpea1geeoi+aYr+WQpuato+ehru+8gScsIHRpbWVvdXQ6IDMwMDBcclxuICAgICAgICAgICAgICAgIH0gYXMgTm90aWZ5T3B0aW9ucyk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICBkbGcuY2xvc2UoKTtcclxuICAgICAgICB9KTtcclxuICAgICAgICBjb21wUmVmLmluc3RhbmNlLmNhbmNlbC5zdWJzY3JpYmUociA9PiB7XHJcbiAgICAgICAgICAgIGRsZy5jbG9zZSgpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICog5ZCM5q2l6K6+6K6h5Zmo5pe25rWB56iL5a6a5LmJXHJcbiAgICAgKi9cclxuICAgIHN5bmNEdFByb2Nlc3MoY29udGVudDogc3RyaW5nLCBydFByb2Nlc3NJbmZvOiBSVFByb2Nlc3NJbmZvKSB7XHJcbiAgICAgICAgaWYgKGNvbnRlbnQpIHtcclxuICAgICAgICAgICAgY29uc3QgcHJvY2VzcyA9IEpTT04ucGFyc2UoY29udGVudCk7XHJcbiAgICAgICAgICAgIHRoaXMubWVzc2FnZS5xdWVzdGlvbign5piv5ZCm5bCG5b2T5YmN54mI5pys5rWB56iL5a6a5LmJ5ZCM5q2l5Yiw6K6+6K6h5pe25rWB56iL5a6a5LmJ5YyF77yBJywgKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zZXJ2aWNlLnN5bmNEdFByb2Nlc3MoY29udGVudCwgcnRQcm9jZXNzSW5mbykuc3Vic2NyaWJlKChkYXRhKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5ub3RpZnkuc3VjY2Vzcyh7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlOiAn57O757uf5o+Q56S6JywgbXNnOiAn5ZCM5q2l5oiQ5YqfJywgdGltZW91dDogMzAwMFxyXG4gICAgICAgICAgICAgICAgICAgIH0gYXMgTm90aWZ5T3B0aW9ucyk7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5hdWRpdFByb2Nlc3NEZWYoQXVkaXRFdmVudC5XRl9Qcm9jZXNzRGVmX1N5bmNEVCwgdHJ1ZSwgcHJvY2Vzcy5EZWZhdWx0UHJvY2Vzcy5LZXkpO1xyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICAoZXJyb3I6IEh0dHBFcnJvclJlc3BvbnNlKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubm90aWZ5LmVycm9yKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlOiAn57O757uf5o+Q56S6JywgbXNnOiAn5ZCM5q2l5aSx6LSl77yM6K+36IGU57O7566h55CG5ZGY5p+l55yL5Y6f5Zug77yBJywgdGltZW91dDogMzAwMFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGFzIE5vdGlmeU9wdGlvbnMpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmF1ZGl0UHJvY2Vzc0RlZihBdWRpdEV2ZW50LldGX1Byb2Nlc3NEZWZfU3luY0RULCBmYWxzZSwgcHJvY2Vzcy5EZWZhdWx0UHJvY2Vzcy5LZXkpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgYmVmb3JlQ29tcGxldGVTdHJhdGVneUNoYW5nZShkYXRhOiBhbnksIHByb2Nlc3NJbmZvOiBSVFByb2Nlc3NJbmZvKTogT2JzZXJ2YWJsZTxib29sZWFuPiB7XHJcbiAgICAgICAgY29uc3QgdXJsID0gYC9hcGkvcnVudGltZS93Zi92MS4wL3Byb2Nlc3NJbnN0YW5jZXMvcnVudGltZUFjdGl2aXR5SW5zdGFuY2VzP3Byb2NEZWZJZD0ke3Byb2Nlc3NJbmZvLnJ0UHJvY0RlZklkfSZhY3Rpdml0eURlZmluaXRpb25JZD0ke2RhdGEuSWR9YDtcclxuICAgICAgICByZXR1cm4gdGhpcy5odHRwLmdldCh1cmwpLnBpcGUoXHJcbiAgICAgICAgICAgIHN3aXRjaE1hcCgocmU6IGFueSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgaWYgKHJlICYmIHJlLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLm1lc3NhZ2UuaW5mbygn5b2T5YmN6IqC54K55a2Y5Zyo6L+Q6KGM5Lit55qE5rS75Yqo5a6e5L6L77yM5LiN5YWB6K646LCD5pW05a6M5oiQ562W55Wl77yM6K+35LqG6Kej77yBJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG9mKGZhbHNlKTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG9mKHRydWUpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgICk7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGdldFByb2Nlc3NDYXRlZ29yeShwcm9jQ2F0ZWdvcnlJZDogc3RyaW5nKTogT2JzZXJ2YWJsZTxGbG93Rm9ybUVudGl0eT4ge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnNlcnZpY2UuR2V0Rmxvd0Zvcm1ieUlkKHByb2NDYXRlZ29yeUlkKTtcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIHNldEZvcm1QYXJhbUN4dChwYXJhbXM6IGFueVtdKSB7XHJcbiAgICAgICAgdGhpcy51aVN0YXRlLmZvcm1hbFBhcmFtZXRlckNvbnRleHQgPSBbXTtcclxuICAgICAgICBpZiAocGFyYW1zICYmIHBhcmFtcy5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgIHBhcmFtcy5mb3JFYWNoKHBhcmFtID0+IHtcclxuICAgICAgICAgICAgICAgIGlmIChwYXJhbS5kYXRhVHlwZSA9PT0gJ0NEVFNjaGVtYScpIHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBmb3JtYWxQYXJhbWV0ZXJDb250ZXh0ID0gW3tcclxuICAgICAgICAgICAgICAgICAgICAgICAga2V5OiBgc2NoZW1hSWRfJHtwYXJhbS5jb2RlfWAsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6IGBzY2hlbWFJZF8ke3BhcmFtLm5hbWV9YCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgZGVzY3JpcHRpb246IGBzY2hlbWFJZF8ke3BhcmFtLm5hbWV9YFxyXG4gICAgICAgICAgICAgICAgICAgIH0sIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAga2V5OiBgbWV0YWRhdGFJZF8ke3BhcmFtLmNvZGV9YCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogYG1ldGFkYXRhSWRfJHtwYXJhbS5uYW1lfWAsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBgbWV0YWRhdGFJZF8ke3BhcmFtLm5hbWV9YFxyXG4gICAgICAgICAgICAgICAgICAgIH1dO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMudWlTdGF0ZS5mb3JtYWxQYXJhbWV0ZXJDb250ZXh0ID0gdGhpcy51aVN0YXRlLmZvcm1hbFBhcmFtZXRlckNvbnRleHQuY29uY2F0KGZvcm1hbFBhcmFtZXRlckNvbnRleHQpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuIl19