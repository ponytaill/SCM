/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Output, EventEmitter, Input, ViewChild, TemplateRef } from '@angular/core';
import { ExpressionService, ExpressioneditorComponent } from '@gsp-svc/expression';
import { ProcessDesignerUIState } from '../../app/process-designer.uistate';
export class TitleExpressionComponent {
    /**
     * @param {?} expr
     * @param {?} designerState
     */
    constructor(expr, designerState) {
        this.expr = expr;
        this.designerState = designerState;
        this.closeModal = new EventEmitter();
        this.submitModal = new EventEmitter();
        this.editorParams = {};
        this.contextEntities = [];
        this.schema = {};
        this.injectName = '';
        this.modalConfig = {
            title: '任务描述',
            width: 1140,
            height: 520,
            showButtons: true
        };
        if (this.designerState.schemas[0]) {
            this.schema = this.designerState.schemas[0];
            if (this.designerState.schemas[0].entityTypes && this.designerState.schemas[0].entityTypes.length > 0) {
                this.injectName = this.designerState.schemas[0].entityTypes[0].name;
            }
        }
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        // this.contextEntities = this.contextEntities.concat(this.designerState.procInstContext)
        //   .concat(this.designerState.formalParameterContext)
        //   .concat(this.designerState.participantContext)
        //   .concat(this.designerState.processVariableContext);
        this.contextEntities = new Array();
        if (this.designerState.procInstContext.length > 0) {
            for (const variable of this.designerState.procInstContext) {
                this.contextEntities = this.contextEntities.concat([variable]);
            }
        }
        if (this.designerState.formalParameterContext.length > 0) {
            for (const variable of this.designerState.formalParameterContext) {
                if (!this.contextEntities.some((/**
                 * @param {?} c
                 * @return {?}
                 */
                c => c.key === variable.key))) {
                    this.contextEntities = this.contextEntities.concat([variable]);
                }
            }
        }
        if (this.designerState.participantContext.length > 0) {
            for (const variable of this.designerState.participantContext) {
                if (!this.contextEntities.some((/**
                 * @param {?} c
                 * @return {?}
                 */
                c => c.key === variable.key))) {
                    this.contextEntities = this.contextEntities.concat([variable]);
                }
            }
        }
        if (this.designerState.processVariableContext.length > 0) {
            for (const variable of this.designerState.processVariableContext) {
                if (!this.contextEntities.some((/**
                 * @param {?} c
                 * @return {?}
                 */
                c => c.key === variable.key))) {
                    this.contextEntities = this.contextEntities.concat([variable]);
                }
            }
        }
    }
    /**
     * @return {?}
     */
    clickOK() {
        this.value = this.convertToValue(this.editor.getExpr());
        /** @type {?} */
        const object = { value: this.value, parameters: null };
        this.submitModal.emit(object);
    }
    /**
     * @return {?}
     */
    clickCancel() {
        this.closeModal.emit();
    }
    /**
     * @private
     * @param {?} val
     * @return {?}
     */
    convertToValue(val) {
        if (val) {
            if (val.substring(9, val.length - 2)) {
                return val;
            }
            else {
                return '';
            }
        }
        else {
            return '';
        }
    }
}
TitleExpressionComponent.decorators = [
    { type: Component, args: [{
                selector: 'app-title-expression',
                template: "<!-- <div class=\"f-page\">\r\n  <div class=\"f-utils-fill-flex-column farris-split-section m-2\">\r\n    <textarea [(ngModel)]=\"value\" name=\"condition\" class=\"form-control k-textarea h-100 w-100\"></textarea>\r\n  </div>\r\n</div> -->\r\n<app-expressioneditor \r\n  [isPanel]=\"true\" [contextEntities]=\"contextEntities\" [text]=\"value\" [customSchemaName]=\"'Schema'\"\r\n  [customSchema]=\"schema\" [injectName]=\"injectName\"\r\n  [injectSchemaName]=\"'Schema'\" [injectNameInSchema]=\"injectName\">\r\n</app-expressioneditor>\r\n\r\n<ng-template #iconSelectFooter>\r\n  <div class=\"btns\">\r\n    <!-- <button type=\"button\" class=\"btn btn-primary btn-sm mr-2\" (click)=\"clickOpen()\">\u7F16\u8F91\u5668</button> -->\r\n    <button type=\"button\" class=\"btn btn-primary btn-sm mr-2\" (click)=\"clickOK()\">\u786E\u5B9A</button>\r\n    <button type=\"button\" class=\"btn btn-secondary btn-sm\" (click)=\"clickCancel()\">\u53D6\u6D88</button>\r\n  </div>\r\n</ng-template>",
                styles: [""]
            }] }
];
/** @nocollapse */
TitleExpressionComponent.ctorParameters = () => [
    { type: ExpressionService },
    { type: ProcessDesignerUIState }
];
TitleExpressionComponent.propDecorators = {
    closeModal: [{ type: Output }],
    submitModal: [{ type: Output }],
    value: [{ type: Input }],
    modalFooter: [{ type: ViewChild, args: ['iconSelectFooter',] }],
    editorParams: [{ type: Input }],
    editor: [{ type: ViewChild, args: [ExpressioneditorComponent,] }]
};
if (false) {
    /** @type {?} */
    TitleExpressionComponent.prototype.closeModal;
    /** @type {?} */
    TitleExpressionComponent.prototype.submitModal;
    /** @type {?} */
    TitleExpressionComponent.prototype.value;
    /** @type {?} */
    TitleExpressionComponent.prototype.modalFooter;
    /** @type {?} */
    TitleExpressionComponent.prototype.editorParams;
    /** @type {?} */
    TitleExpressionComponent.prototype.editor;
    /** @type {?} */
    TitleExpressionComponent.prototype.contextEntities;
    /** @type {?} */
    TitleExpressionComponent.prototype.schema;
    /** @type {?} */
    TitleExpressionComponent.prototype.injectName;
    /** @type {?} */
    TitleExpressionComponent.prototype.modalConfig;
    /**
     * @type {?}
     * @private
     */
    TitleExpressionComponent.prototype.expr;
    /** @type {?} */
    TitleExpressionComponent.prototype.designerState;
}
export class TitleExpressionConverter {
    constructor() { }
    /**
     * @param {?} data
     * @return {?}
     */
    convertTo(data) {
        if (data) {
            return data;
        }
        else {
            return '（未设置）';
        }
    }
}
//# sourceMappingURL=data:application/json;base64,