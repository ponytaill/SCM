/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, HostBinding, ViewChild, Input } from '@angular/core';
import { UserPerformerComponent } from '../user-performer/user-performer.component';
import { PositionPerformerComponent } from '../position-performer/position-performer.component';
import { ComponentPerformerComponent } from '../component-performer/component-performer.component';
import { ReportingLineComponent } from '../reporting-line/reporting-line.component';
import { MatrixPerformerComponent } from '../matrix-performer/matrix-performer.component';
import { HttpService } from "@ecp-caf/caf-common";
export class PerformerEditComponent {
    /**
     * @param {?=} http
     */
    constructor(http) {
        this.http = http;
        this.cls = 'farris-main-area flex-column';
        this.tab = 'user';
        this.display = true;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        if (this.performer) {
            switch (this.performer.type) {
                case 'wf.UserParticipant':
                    this.tab = 'user';
                    this.usersCmp.users = [];
                    this.usersCmp.users.push(this.performer.value);
                    // 考虑到兼容历史数据，暂时不使用用户参与者实体类中的userType属性
                    if (this.performer.value.performerId && this.performer.value.performerId.charAt(0) === '{') {
                        /** @type {?} */
                        let url = '/api/runtime/wf/v1.0/reportingOrgType/hasAdminOrg';
                        this.http.get(url).subscribe((/**
                         * @param {?} data
                         * @return {?}
                         */
                        (data) => {
                            this.usersCmp.userTypeButtonNeedShow = data;
                            this.usersCmp.userType = 'variable';
                            this.usersCmp.curOrgType = this.performer.value.orgType === 'Sys' ? 'Sys' : 'Administrative_organization';
                            this.usersCmp.condition = this.performer.value.condition;
                            // 根据表达式中的函数名判断是否使用的是上下文变量
                            /** @type {?} */
                            const isContextVariable = this.performer.value.performerId.indexOf("GetContextParameter") >= 0;
                            this.usersCmp.variableOrgTypes = isContextVariable ? [
                                { name: '系统用户', value: 'Sys' }
                            ] : [
                                { name: '系统用户', value: 'Sys' },
                                { name: '行政人员', value: 'Administrative_organization' }
                            ];
                        }));
                    }
                    else {
                        this.usersCmp.userType = 'user';
                        this.usersCmp.condition = this.performer.value.condition;
                    }
                    break;
                case 'wf.PositionParticipant':
                    this.tab = 'position';
                    this.posiCmp.position = Object.assign({}, this.performer.value);
                    if (this.posiCmp.position.positionType === '0') {
                        this.posiCmp.filter = { positionType: 0 };
                    }
                    else {
                        this.posiCmp.filter = { positionType: 1 };
                    }
                    break;
                case 'wf.ReportingLineParticipant':
                    this.tab = 'report';
                    this.reportingLineCmp.setReportingLineDataEntity = this.performer.value;
                    break;
                case 'wf.ComponentParticipant':
                    this.tab = 'component';
                    this.cmpCmp.component = this.performer.value;
                    break;
                case 'wf.MatrixParticipant':
                    this.tab = 'matrix';
                    this.cmpCmp.component = this.performer.value;
                    this.matrixCmp.setMatrixDataEntity = this.performer.value;
            }
        }
    }
    /**
     * @return {?}
     */
    getPerformers() {
        /** @type {?} */
        const users = this.usersCmp.getPerformers();
        /** @type {?} */
        const position = this.posiCmp.getPerformers();
        /** @type {?} */
        const component = this.cmpCmp.getPerformers();
        /** @type {?} */
        const reportingLine = this.reportingLineCmp.getPerformers();
        /** @type {?} */
        const matrix = this.matrixCmp.getPerformers();
        // let performers = [];
        /** @type {?} */
        let positionPerformers = [];
        // 只包含岗位参与者
        /** @type {?} */
        let userPerformers = [];
        if (users && users.length > 0) {
            userPerformers = userPerformers.concat(users);
        }
        if (position && position.performerId) {
            positionPerformers.push(position);
        }
        return { userPerformers, positionPerformers, component, reportingLine, matrix };
    }
}
PerformerEditComponent.decorators = [
    { type: Component, args: [{
                selector: 'app-performer-edit',
                template: "<div class=\"flex-fill farris-split-section m-2 farris-overflow-y-auto f-utils-flex-column\">\r\n    <farris-tabs class=\"f-utils-fill h-100\" #tabs [value]=\"tab\" [fill]=\"true\" [contentFill]=\"true\">\r\n      <farris-tab title=\"\u7528\u6237\" [show]=\"true\" [id]=\"'user'\">\r\n        <ng-template #content>\r\n          <app-user-performer></app-user-performer>\r\n        </ng-template>\r\n      </farris-tab>\r\n      <farris-tab title=\"\u5C97\u4F4D\" [id]=\"'position'\">\r\n        <ng-template #content>\r\n          <app-position-performer></app-position-performer>\r\n        </ng-template>\r\n      </farris-tab>\r\n      <farris-tab title=\"\u6C47\u62A5\u5173\u7CFB\" [id]=\"'report'\">\r\n        <ng-template #content>\r\n          <app-reporting-line></app-reporting-line>\r\n        </ng-template>\r\n      </farris-tab>\r\n      <farris-tab title=\"\u77E9\u9635\" [id]=\"'matrix'\" *ngIf=\"display\">\r\n        <ng-template #content>\r\n          <app-matrix-performer></app-matrix-performer>\r\n        </ng-template>\r\n      </farris-tab>\r\n      <farris-tab title=\"\u53C2\u4E0E\u8005\u6784\u4EF6\" [id]=\"'component'\">\r\n        <ng-template #content>\r\n          <app-component-performer [component]=\"component\" style=\"background: #FFF;\"></app-component-performer>\r\n        </ng-template>\r\n      </farris-tab>\r\n    </farris-tabs>\r\n</div>\r\n",
                styles: [""]
            }] }
];
/** @nocollapse */
PerformerEditComponent.ctorParameters = () => [
    { type: HttpService }
];
PerformerEditComponent.propDecorators = {
    cls: [{ type: HostBinding, args: ['class',] }],
    display: [{ type: Input }],
    usersCmp: [{ type: ViewChild, args: [UserPerformerComponent,] }],
    posiCmp: [{ type: ViewChild, args: [PositionPerformerComponent,] }],
    cmpCmp: [{ type: ViewChild, args: [ComponentPerformerComponent,] }],
    reportingLineCmp: [{ type: ViewChild, args: [ReportingLineComponent,] }],
    matrixCmp: [{ type: ViewChild, args: [MatrixPerformerComponent,] }]
};
if (false) {
    /** @type {?} */
    PerformerEditComponent.prototype.cls;
    /** @type {?} */
    PerformerEditComponent.prototype.component;
    /** @type {?} */
    PerformerEditComponent.prototype.performer;
    /** @type {?} */
    PerformerEditComponent.prototype.tab;
    /** @type {?} */
    PerformerEditComponent.prototype.display;
    /** @type {?} */
    PerformerEditComponent.prototype.usersCmp;
    /** @type {?} */
    PerformerEditComponent.prototype.posiCmp;
    /** @type {?} */
    PerformerEditComponent.prototype.cmpCmp;
    /** @type {?} */
    PerformerEditComponent.prototype.reportingLineCmp;
    /** @type {?} */
    PerformerEditComponent.prototype.matrixCmp;
    /**
     * @type {?}
     * @private
     */
    PerformerEditComponent.prototype.http;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGVyZm9ybWVyLWVkaXQuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGdzcC13Zi93Zi1wcm9jZXNzLWVkaXRvci8iLCJzb3VyY2VzIjpbImxpYi92aWV3cy9wZXJmb3JtZXIvdmlld3MvcGVyZm9ybWVyLWVkaXQvcGVyZm9ybWVyLWVkaXQuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUMsU0FBUyxFQUFVLFdBQVcsRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUFnQixNQUFNLGVBQWUsQ0FBQztBQUU5RixPQUFPLEVBQUUsc0JBQXNCLEVBQUUsTUFBTSw0Q0FBNEMsQ0FBQztBQUNwRixPQUFPLEVBQUUsMEJBQTBCLEVBQUUsTUFBTSxvREFBb0QsQ0FBQztBQUNoRyxPQUFPLEVBQUUsMkJBQTJCLEVBQUUsTUFBTSxzREFBc0QsQ0FBQztBQUVuRyxPQUFPLEVBQUUsc0JBQXNCLEVBQUUsTUFBTSw0Q0FBNEMsQ0FBQztBQUNwRixPQUFPLEVBQUUsd0JBQXdCLEVBQUUsTUFBTSxnREFBZ0QsQ0FBQztBQUMxRixPQUFPLEVBQUMsV0FBVyxFQUFDLE1BQU0scUJBQXFCLENBQUM7QUFPaEQsTUFBTSxPQUFPLHNCQUFzQjs7OztJQWlCakMsWUFBb0IsSUFBa0I7UUFBbEIsU0FBSSxHQUFKLElBQUksQ0FBYztRQWZ0QyxRQUFHLEdBQUcsOEJBQThCLENBQUM7UUFJckMsUUFBRyxHQUFHLE1BQU0sQ0FBQztRQUNKLFlBQU8sR0FBRyxJQUFJLENBQUM7SUFXeEIsQ0FBQzs7OztJQUVELFFBQVE7SUFDUixDQUFDOzs7O0lBRUQsZUFBZTtRQUNiLElBQUksSUFBSSxDQUFDLFNBQVMsRUFBRTtZQUNsQixRQUFRLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxFQUFFO2dCQUMzQixLQUFLLG9CQUFvQjtvQkFDdkIsSUFBSSxDQUFDLEdBQUcsR0FBRyxNQUFNLENBQUM7b0JBQ2xCLElBQUksQ0FBQyxRQUFRLENBQUMsS0FB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LFdBQVcsU0FBQyxPQUFPO3NCQU1uQixLQUFLO3VCQUVMLFNBQVMsU0FBQyxzQkFBc0I7c0JBQ2hDLFNBQVMsU0FBQywwQkFBMEI7cUJBQ3BDLFNBQVMsU0FBQywyQkFBMkI7K0JBQ3JDLFNBQVMsU0FBQyxzQkFBc0I7d0JBQ2hDLFNBQVMsU0FBQyx3QkFBd0I7Ozs7SUFabkMscUNBQ3FDOztJQUNyQywyQ0FBOEI7O0lBQzlCLDJDQUF3Qzs7SUFFeEMscUNBQWE7O0lBQ2IseUNBQXdCOztJQUV4QiwwQ0FBb0U7O0lBQ3BFLHlDQUEyRTs7SUFDM0Usd0NBQTRFOztJQUM1RSxrREFBNEU7O0lBQzVFLDJDQUF5RTs7Ozs7SUFJN0Qsc0NBQTBCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtDb21wb25lbnQsIE9uSW5pdCwgSG9zdEJpbmRpbmcsIFZpZXdDaGlsZCwgSW5wdXQsIEFmdGVyVmlld0luaXR9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBGb3JtR3JvdXAsIEZvcm1Db250cm9sIH0gZnJvbSAnQGFuZ3VsYXIvZm9ybXMnO1xyXG5pbXBvcnQgeyBVc2VyUGVyZm9ybWVyQ29tcG9uZW50IH0gZnJvbSAnLi4vdXNlci1wZXJmb3JtZXIvdXNlci1wZXJmb3JtZXIuY29tcG9uZW50JztcclxuaW1wb3J0IHsgUG9zaXRpb25QZXJmb3JtZXJDb21wb25lbnQgfSBmcm9tICcuLi9wb3NpdGlvbi1wZXJmb3JtZXIvcG9zaXRpb24tcGVyZm9ybWVyLmNvbXBvbmVudCc7XHJcbmltcG9ydCB7IENvbXBvbmVudFBlcmZvcm1lckNvbXBvbmVudCB9IGZyb20gJy4uL2NvbXBvbmVudC1wZXJmb3JtZXIvY29tcG9uZW50LXBlcmZvcm1lci5jb21wb25lbnQnO1xyXG5pbXBvcnQgeyBCaXpDb21wb25lbnRFbnRpdHkgfSBmcm9tICcuLi8uLi8uLi8uLi9kb21haW4vZW50aXRpZXMvYml6LWNvbXBvbmVudC5lbnRpdHknO1xyXG5pbXBvcnQgeyBSZXBvcnRpbmdMaW5lQ29tcG9uZW50IH0gZnJvbSAnLi4vcmVwb3J0aW5nLWxpbmUvcmVwb3J0aW5nLWxpbmUuY29tcG9uZW50JztcclxuaW1wb3J0IHsgTWF0cml4UGVyZm9ybWVyQ29tcG9uZW50IH0gZnJvbSAnLi4vbWF0cml4LXBlcmZvcm1lci9tYXRyaXgtcGVyZm9ybWVyLmNvbXBvbmVudCc7XHJcbmltcG9ydCB7SHR0cFNlcnZpY2V9IGZyb20gXCJAZWNwLWNhZi9jYWYtY29tbW9uXCI7XHJcblxyXG5AQ29tcG9uZW50KHtcclxuICBzZWxlY3RvcjogJ2FwcC1wZXJmb3JtZXItZWRpdCcsXHJcbiAgdGVtcGxhdGVVcmw6ICcuL3BlcmZvcm1lci1lZGl0LmNvbXBvbmVudC5odG1sJyxcclxuICBzdHlsZVVybHM6IFsnLi9wZXJmb3JtZXItZWRpdC5jb21wb25lbnQuc2NzcyddXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBQZXJmb3JtZXJFZGl0Q29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0LCBBZnRlclZpZXdJbml0IHtcclxuICBASG9zdEJpbmRpbmcoJ2NsYXNzJylcclxuICBjbHMgPSAnZmFycmlzLW1haW4tYXJlYSBmbGV4LWNvbHVtbic7XHJcbiAgY29tcG9uZW50OiBCaXpDb21wb25lbnRFbnRpdHk7XHJcbiAgcGVyZm9ybWVyOiB7IHR5cGU6IHN0cmluZywgdmFsdWU6IGFueSB9O1xyXG5cclxuICB0YWIgPSAndXNlcic7XHJcbiAgQElucHV0KCkgZGlzcGxheSA9IHRydWU7XHJcblxyXG4gIEBWaWV3Q2hpbGQoVXNlclBlcmZvcm1lckNvbXBvbmVudCkgdXNlcnNDbXA6IFVzZXJQZXJmb3JtZXJDb21wb25lbnQ7XHJcbiAgQFZpZXdDaGlsZChQb3NpdGlvblBlcmZvcm1lckNvbXBvbmVudCkgcG9zaUNtcDogUG9zaXRpb25QZXJmb3JtZXJDb21wb25lbnQ7XHJcbiAgQFZpZXdDaGlsZChDb21wb25lbnRQZXJmb3JtZXJDb21wb25lbnQpIGNtcENtcDogQ29tcG9uZW50UGVyZm9ybWVyQ29tcG9uZW50O1xyXG4gIEBWaWV3Q2hpbGQoUmVwb3J0aW5nTGluZUNvbXBvbmVudCkgcmVwb3J0aW5nTGluZUNtcDogUmVwb3J0aW5nTGluZUNvbXBvbmVudDtcclxuICBAVmlld0NoaWxkKE1hdHJpeFBlcmZvcm1lckNvbXBvbmVudCkgbWF0cml4Q21wOiBNYXRyaXhQZXJmb3JtZXJDb21wb25lbnQ7XHJcblxyXG5cclxuXHJcbiAgY29uc3RydWN0b3IocHJpdmF0ZSBodHRwPzogSHR0cFNlcnZpY2UpIHtcclxuICB9XHJcblxyXG4gIG5nT25Jbml0KCkge1xyXG4gIH1cclxuXHJcbiAgbmdBZnRlclZpZXdJbml0KCkge1xyXG4gICAgaWYgKHRoaXMucGVyZm9ybWVyKSB7XHJcbiAgICAgIHN3aXRjaCAodGhpcy5wZXJmb3JtZXIudHlwZSkge1xyXG4gICAgICAgIGNhc2UgJ3dmLlVzZXJQYXJ0aWNpcGFudCc6XHJcbiAgICAgICAgICB0aGlzLnRhYiA9ICd1c2VyJztcclxuICAgICAgICAgIHRoaXMudXNlcnNDbXAudXNlcnMgPSBbXTtcclxuICAgICAgICAgIHRoaXMudXNlcnNDbXAudXNlcnMucHVzaCh0aGlzLnBlcmZvcm1lci52YWx1ZSk7XHJcbiAgICAgICAgICAvLyDogIPomZHliLDlhbzlrrnljoblj7LmlbDmja7vvIzmmoLml7bkuI3kvb/nlKjnlKjmiLflj4LkuI7ogIXlrp7kvZPnsbvkuK3nmoR1c2VyVHlwZeWxnuaAp1xyXG4gICAgICAgICAgaWYodGhpcy5wZXJmb3JtZXIudmFsdWUucGVyZm9ybWVySWQgJiYgdGhpcy5wZXJmb3JtZXIudmFsdWUucGVyZm9ybWVySWQuY2hhckF0KDApID09PSAneycpe1xyXG4gICAgICAgICAgICBsZXQgdXJsID0gJy9hcGkvcnVudGltZS93Zi92MS4wL3JlcG9ydGluZ09yZ1R5cGUvaGFzQWRtaW5PcmcnO1xyXG4gICAgICAgICAgICB0aGlzLmh0dHAuZ2V0KHVybCkuc3Vic2NyaWJlKChkYXRhOiBhbnkpID0+IHtcclxuICAgICAgICAgICAgICB0aGlzLnVzZXJzQ21wLnVzZXJUeXBlQnV0dG9uTmVlZFNob3cgPSBkYXRhO1xyXG4gICAgICAgICAgICAgIHRoaXMudXNlcnNDbXAudXNlclR5cGUgPSAndmFyaWFibGUnO1xyXG4gICAgICAgICAgICAgIHRoaXMudXNlcnNDbXAuY3VyT3JnVHlwZSA9IHRoaXMucGVyZm9ybWVyLnZhbHVlLm9yZ1R5cGUgPT09ICdTeXMnID8gJ1N5cycgOiAnQWRtaW5pc3RyYXRpdmVfb3JnYW5pemF0aW9uJztcclxuICAgICAgICAgICAgICB0aGlzLnVzZXJzQ21wLmNvbmRpdGlvbiA9IHRoaXMucGVyZm9ybWVyLnZhbHVlLmNvbmRpdGlvbjtcclxuICAgICAgICAgICAgICAvLyDmoLnmja7ooajovr7lvI/kuK3nmoTlh73mlbDlkI3liKTmlq3mmK/lkKbkvb/nlKjnmoTmmK/kuIrkuIvmloflj5jph49cclxuICAgICAgICAgICAgICBjb25zdCBpc0NvbnRleHRWYXJpYWJsZSA9IHRoaXMucGVyZm9ybWVyLnZhbHVlLnBlcmZvcm1lcklkLmluZGV4T2YoXCJHZXRDb250ZXh0UGFyYW1ldGVyXCIpID49IDA7XHJcbiAgICAgICAgICAgICAgdGhpcy51c2Vyc0NtcC52YXJpYWJsZU9yZ1R5cGVzID0gaXNDb250ZXh0VmFyaWFibGUgPyBbXHJcbiAgICAgICAgICAgICAgICB7IG5hbWU6ICfns7vnu5/nlKjmiLcnLCB2YWx1ZTogJ1N5cycgfVxyXG4gICAgICAgICAgICAgICAgXSA6IFtcclxuICAgICAgICAgICAgICAgIHsgbmFtZTogJ+ezu+e7n+eUqOaItycsIHZhbHVlOiAnU3lzJyB9LFxyXG4gICAgICAgICAgICAgICAgeyBuYW1lOiAn6KGM5pS/5Lq65ZGYJywgdmFsdWU6ICdBZG1pbmlzdHJhdGl2ZV9vcmdhbml6YXRpb24nIH1cclxuICAgICAgICAgICAgICBdO1xyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgICAgfWVsc2V7XHJcbiAgICAgICAgICAgIHRoaXMudXNlcnNDbXAudXNlclR5cGUgPSAndXNlcic7XHJcbiAgICAgICAgICAgIHRoaXMudXNlcnNDbXAuY29uZGl0aW9uID0gdGhpcy5wZXJmb3JtZXIudmFsdWUuY29uZGl0aW9uO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgY2FzZSAnd2YuUG9zaXRpb25QYXJ0aWNpcGFudCc6XHJcbiAgICAgICAgICB0aGlzLnRhYiA9ICdwb3NpdGlvbic7XHJcbiAgICAgICAgICB0aGlzLnBvc2lDbXAucG9zaXRpb24gPSBPYmplY3QuYXNzaWduKHt9LCB0aGlzLnBlcmZvcm1lci52YWx1ZSk7XHJcbiAgICAgICAgICBpZiAodGhpcy5wb3NpQ21wLnBvc2l0aW9uLnBvc2l0aW9uVHlwZSA9PT0gJzAnKSB7XHJcbiAgICAgICAgICAgIHRoaXMucG9zaUNtcC5maWx0ZXIgPSB7IHBvc2l0aW9uVHlwZTogMCB9O1xyXG4gICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy5wb3NpQ21wLmZpbHRlciA9IHsgcG9zaXRpb25UeXBlOiAxIH07XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICBicmVhaztcclxuICAgICAgICBjYXNlICd3Zi5SZXBvcnRpbmdMaW5lUGFydGljaXBhbnQnOlxyXG4gICAgICAgICAgdGhpcy50YWIgPSAncmVwb3J0JztcclxuICAgICAgICAgIHRoaXMucmVwb3J0aW5nTGluZUNtcC5zZXRSZXBvcnRpbmdMaW5lRGF0YUVudGl0eSA9IHRoaXMucGVyZm9ybWVyLnZhbHVlO1xyXG4gICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgY2FzZSAnd2YuQ29tcG9uZW50UGFydGljaXBhbnQnOlxyXG4gICAgICAgICAgdGhpcy50YWIgPSAnY29tcG9uZW50JztcclxuICAgICAgICAgIHRoaXMuY21wQ21wLmNvbXBvbmVudCA9IHRoaXMucGVyZm9ybWVyLnZhbHVlO1xyXG4gICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgY2FzZSAnd2YuTWF0cml4UGFydGljaXBhbnQnOlxyXG4gICAgICAgICAgdGhpcy50YWIgPSAnbWF0cml4JztcclxuICAgICAgICAgIHRoaXMuY21wQ21wLmNvbXBvbmVudCA9IHRoaXMucGVyZm9ybWVyLnZhbHVlO1xyXG4gICAgICAgICAgdGhpcy5tYXRyaXhDbXAuc2V0TWF0cml4RGF0YUVudGl0eSA9IHRoaXMucGVyZm9ybWVyLnZhbHVlO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG4gIGdldFBlcmZvcm1lcnMoKSB7XHJcbiAgICBjb25zdCB1c2VycyA9IHRoaXMudXNlcnNDbXAuZ2V0UGVyZm9ybWVycygpO1xyXG4gICAgY29uc3QgcG9zaXRpb24gPSB0aGlzLnBvc2lDbXAuZ2V0UGVyZm9ybWVycygpO1xyXG4gICAgY29uc3QgY29tcG9uZW50ID0gdGhpcy5jbXBDbXAuZ2V0UGVyZm9ybWVycygpO1xyXG4gICAgY29uc3QgcmVwb3J0aW5nTGluZSA9IHRoaXMucmVwb3J0aW5nTGluZUNtcC5nZXRQZXJmb3JtZXJzKCk7XHJcbiAgICBjb25zdCBtYXRyaXggPSB0aGlzLm1hdHJpeENtcC5nZXRQZXJmb3JtZXJzKCk7XHJcblxyXG4gICAgLy8gbGV0IHBlcmZvcm1lcnMgPSBbXTtcclxuICAgIGxldCBwb3NpdGlvblBlcmZvcm1lcnMgPSBbXTsgLy8g5Y+q5YyF5ZCr5bKX5L2N5Y+C5LiO6ICFXHJcbiAgICBsZXQgdXNlclBlcmZvcm1lcnMgPSBbXTsgLy8g55So5oi35Y+C5LiO6ICFXHJcblxyXG4gICAgaWYgKHVzZXJzICYmIHVzZXJzLmxlbmd0aCA+IDApIHtcclxuICAgICAgdXNlclBlcmZvcm1lcnMgPSB1c2VyUGVyZm9ybWVycy5jb25jYXQodXNlcnMpO1xyXG4gICAgfVxyXG4gICAgaWYgKHBvc2l0aW9uICYmIHBvc2l0aW9uLnBlcmZvcm1lcklkKSB7XHJcbiAgICAgIHBvc2l0aW9uUGVyZm9ybWVycy5wdXNoKHBvc2l0aW9uKTtcclxuICAgIH1cclxuICAgIHJldHVybiB7IHVzZXJQZXJmb3JtZXJzLCBwb3NpdGlvblBlcmZvcm1lcnMsIGNvbXBvbmVudCwgcmVwb3J0aW5nTGluZSwgbWF0cml4fTtcclxuICB9XHJcbn1cclxuIl19