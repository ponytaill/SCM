/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable, Injector, ComponentFactoryResolver } from '@angular/core';
import { MessagerService } from '@farris/ui-messager';
import { BsModalService } from '@farris/ui-modal';
import { UIFlowchartComponent } from './task-flowchart/task-flowchart.component';
import { translate } from './services/i18n/index';
import { UiFlowchartService } from './services/ui-flowchart.service';
import { FrameworkService } from '@gsp-sys/rtf-common';
import { of } from 'rxjs';
import { HttpService } from '@ecp-caf/caf-common';
export class WFFlowchartService {
    /**
     * @param {?} msgService
     * @param {?} injector
     * @param {?} resolver
     * @param {?} modalService
     */
    constructor(msgService, injector, resolver, modalService) {
        this.msgService = msgService;
        this.injector = injector;
        this.resolver = resolver;
        this.modalService = modalService;
        this.flowchartService = this.injector.get(UiFlowchartService);
        this.frameworkService = this.injector.get(FrameworkService);
    }
    /**
     * @param {?} payload
     * @return {?}
     */
    viewProcess(payload) {
        if (!payload || !payload.dataId) {
            this.msgService.warning(this.getI18nValue('static.flowchart.noDataId'));
            return;
        }
        if (!payload || !payload.bizDefKey) {
            this.msgService.warning(this.getI18nValue('static.flowchart.noBizDefKey'));
            return;
        }
        /** @type {?} */
        const parameters = new Map();
        parameters.set('dataId', payload.dataId);
        parameters.set('bizDefKey', payload.bizDefKey);
        if (payload.startMode) {
            parameters.set('startMode', payload.startMode);
        }
        if (payload.startUserId) {
            parameters.set('startUserId', payload.startUserId);
        }
        parameters.set('withTitle', true);
        /** @type {?} */
        const options = {
            appType: 'menu',
            funcId: 'WFViewFlowChart',
            appId: '',
            appEntrance: '',
            tabId: payload.dataId,
            isNewTab: true,
            queryStringParams: parameters
        };
        this.frameworkService.openMenu(options);
    }
    /**
     * 查看流程（tab页中打开）
     * @param {?} procInstId 流程实例ID
     * @return {?}
     */
    viewFlowChart(procInstId) {
        if (!procInstId) {
            this.msgService.warning(this.getI18nValue('static.flowchart.processNotFound'));
            return;
        }
        /** @type {?} */
        const parameters = new Map();
        parameters.set('processId', procInstId);
        parameters.set('withTitle', true);
        /** @type {?} */
        const options = {
            appType: 'menu',
            funcId: 'WFViewFlowChart',
            appId: '',
            appEntrance: '',
            tabId: new Date().getTime().toString(),
            isNewTab: true,
            queryStringParams: parameters
        };
        this.frameworkService.openMenu(options);
    }
    /**
     * @param {?} dataId
     * @return {?}
     */
    viewFlowChartByDataId(dataId) {
        if (!dataId) {
            this.msgService.warning(this.getI18nValue('static.flowchart.dataIdIsNull'));
            return;
        }
        /** @type {?} */
        const parameters = new Map();
        parameters.set('dataId', dataId);
        parameters.set('withTitle', true);
        /** @type {?} */
        const options = {
            appType: 'menu',
            funcId: 'WFViewFlowChart',
            appId: '',
            appEntrance: '',
            tabId: new Date().getTime().toString(),
            isNewTab: true,
            queryStringParams: parameters
        };
        this.frameworkService.openMenu(options);
    }
    /**
     * 查看流程（弹框中打开）
     * @param {?} procInstId 流程实例ID
     * @param {?=} mode
     * @return {?}
     */
    viewFlowChartByDialog(procInstId, mode) {
        if (!procInstId) {
            this.msgService.warning(this.getI18nValue('static.flowchart.processNotFound'));
            return;
        }
        /** @type {?} */
        let func;
        if (UIFlowchartComponent.func) {
            func = UIFlowchartComponent.func;
        }
        /** @type {?} */
        const modalConfig = {
            title: this.getI18nValue('static.flowchart.title'),
            width: 1200,
            height: 530,
            showButtons: false,
            beforeClose: (modalRef) => {
                if (UIFlowchartComponent.func) {
                    window.removeEventListener('message', UIFlowchartComponent.func, false);
                }
                if (func) {
                    window.addEventListener('message', func, false);
                    UIFlowchartComponent.func = func;
                }
                return of(true);
            }
        };
        /** @type {?} */
        const compFactory = this.resolver.resolveComponentFactory(UIFlowchartComponent);
        /** @type {?} */
        const inj = Injector.create({
            providers: [
                {
                    provide: UiFlowchartService, useFactory: (httpSvc) => {
                        return new UiFlowchartService(httpSvc);
                    },
                    deps: [
                        HttpService
                    ]
                }
            ], parent: this.injector
        });
        /** @type {?} */
        const compRef = compFactory.create(inj);
        compRef.instance.ProcInstId = procInstId;
        if (mode) {
            compRef.instance.mode = mode;
        }
        compRef.instance.fill();
        this.flowchartService.getProcessInstanceById(procInstId).subscribe(re => {
            modalConfig.title = re.name + '-v' + re.version + '.0';
            /** @type {?} */
            const dialog = this.modalService.show(compRef, modalConfig);
        });
    }
    /**
     * @private
     * @param {?} name
     * @return {?}
     */
    getI18nValue(name) {
        if (!name) {
            return '';
        }
        /** @type {?} */
        var defaultLang = localStorage.getItem('languageCode');
        /** @type {?} */
        var langData = defaultLang ? translate[defaultLang] : translate['zh-CHS'];
        /** @type {?} */
        let resultVal = '';
        if (name.indexOf('.') === -1) {
            resultVal = langData[name];
        }
        else {
            resultVal = name.split('.').reduce((obj, key) => {
                if (obj) {
                    return obj[key];
                }
                else {
                    return null;
                }
            }, langData);
        }
        return resultVal;
    }
}
WFFlowchartService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
WFFlowchartService.ctorParameters = () => [
    { type: MessagerService },
    { type: Injector },
    { type: ComponentFactoryResolver },
    { type: BsModalService }
];
if (false) {
    /**
     * @type {?}
     * @private
     */
    WFFlowchartService.prototype.flowchartService;
    /**
     * @type {?}
     * @private
     */
    WFFlowchartService.prototype.frameworkService;
    /**
     * @type {?}
     * @private
     */
    WFFlowchartService.prototype.msgService;
    /**
     * @type {?}
     * @private
     */
    WFFlowchartService.prototype.injector;
    /**
     * @type {?}
     * @private
     */
    WFFlowchartService.prototype.resolver;
    /**
     * @type {?}
     * @private
     */
    WFFlowchartService.prototype.modalService;
}
//# sourceMappingURL=data:application/json;base64,