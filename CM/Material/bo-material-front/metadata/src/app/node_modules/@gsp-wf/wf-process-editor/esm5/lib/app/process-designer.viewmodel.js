/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable, Injector, ComponentFactoryResolver } from '@angular/core';
import { ProcessDesignerUIState } from './process-designer.uistate';
import { ProcessDesignerDataService } from '../domain/process-designer.dataservice';
import { forkJoin } from 'rxjs/observable/forkJoin';
import { ProcessClrTypeID } from '../model/process-clrtypeId';
import { BpmnProcessViewModel } from './bpmn-process.viewmodel';
import { WFFlowElementsViewModel } from './wf-flowElements.viewModel';
import { NotifyService } from '@farris/ui-notify';
import { MessagerService } from '@farris/ui-messager';
import { map, switchMap } from 'rxjs/operators';
import { FlowFormInfo } from '../domain/entities/flowform-info';
import { of, Subject, from } from 'rxjs';
import { BsModalService } from '@farris/ui-modal';
import { SaveAsEditComponent } from '../views/save-as-edit/save-as-edit.component';
import { ProcessDeUtil } from '../domain/process-de-util';
import { SubProcessViewModel } from './sub-process.viewmodel';
import { AutoActivityAdapter } from './auto-activity.adapter';
import { CatchEventAdapter } from './catch-event.adapter';
import { MessageActivityAdapter } from './message-activity.adapter';
import { AuditEvent, AuditProcessDefInfo } from '../domain/entities/audit-processDef-info';
import { HttpService } from '@ecp-caf/caf-common';
import { ProcessInfo } from '../model/process-info';
import { NotifyActivityAdapter } from './notify-activity.adapter';
import { AifCreationBillActivityAdapter } from './aif-creation-bill-activity.adapter';
var ProcessDesignerViewModel = /** @class */ (function () {
    function ProcessDesignerViewModel(uiState, service, util, notify, message, process, activity, subProcess, autoActAdapter, catchEventAdapter, messageActAdapter, notifyActAdapter, creationActAdapter, modalService, injector, resolver, http) {
        this.uiState = uiState;
        this.service = service;
        this.util = util;
        this.notify = notify;
        this.message = message;
        this.process = process;
        this.activity = activity;
        this.subProcess = subProcess;
        this.autoActAdapter = autoActAdapter;
        this.catchEventAdapter = catchEventAdapter;
        this.messageActAdapter = messageActAdapter;
        this.notifyActAdapter = notifyActAdapter;
        this.creationActAdapter = creationActAdapter;
        this.modalService = modalService;
        this.injector = injector;
        this.resolver = resolver;
        this.http = http;
    }
    // 初始加载流程属性
    // 初始加载流程属性
    /**
     * @param {?} obj
     * @return {?}
     */
    ProcessDesignerViewModel.prototype.initProcessProperty = 
    // 初始加载流程属性
    /**
     * @param {?} obj
     * @return {?}
     */
    function (obj) {
        /** @type {?} */
        var pptData = obj.propertyData;
        /** @type {?} */
        var ffId = pptData.EntryForm;
        if (ffId) {
            pptData.EntryForm = this.uiState.flowFormInfo.flowForm;
            this.uiState.propertyConfig = this.process.setProcessConfig(obj.propertyConfig);
            this.uiState.propertyData = pptData;
        }
        else {
            this.uiState.propertyConfig = this.process.setProcessConfig(obj.propertyConfig);
            this.uiState.propertyData = pptData;
        }
    };
    /**
     * @param {?} obj
     * @return {?}
     */
    ProcessDesignerViewModel.prototype.setProperty = /**
     * @param {?} obj
     * @return {?}
     */
    function (obj) {
        // 更新属性框数据与配置
        /** @type {?} */
        var propertyData = obj.propertyData;
        switch (propertyData.ClrTypeID) {
            case ProcessClrTypeID.process:
                this.process.setProcessProperty(obj);
                break;
            case ProcessClrTypeID.userActivity:
                this.activity.setUserActivityProperty(obj);
                break;
            case ProcessClrTypeID.subProcess:
                this.subProcess.setProperty(obj);
                break;
            case ProcessClrTypeID.autoActivity:
                this.autoActAdapter.setProperty(obj);
                break;
            case ProcessClrTypeID.catchEvent:
                this.catchEventAdapter.setProperty(obj);
                break;
            case ProcessClrTypeID.operationActivity:
                this.activity.setUserActivityProperty(obj);
                break;
            case ProcessClrTypeID.messageActivity:
                this.messageActAdapter.setProperty(obj);
                break;
            case ProcessClrTypeID.notifyActivity:
                this.notifyActAdapter.setProperty(obj);
                break;
            case ProcessClrTypeID.aifCreationBillActivity:
                this.creationActAdapter.setProperty(obj);
                break;
            default:
                this.activity.setFlowElementProperty(obj);
                break;
        }
    };
    /**
     * @return {?}
     */
    ProcessDesignerViewModel.prototype.updateSchemas = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.uiState.schemas = [];
        if (this.uiState.flowFormInfo.formalParameters && this.uiState.flowFormInfo.formalParameters.length > 0) {
            /** @type {?} */
            var schemaParams = this.uiState.flowFormInfo.formalParameters.filter((/**
             * @param {?} p
             * @return {?}
             */
            function (p) { return p.dataType === 'CDTSchema' && p.schemaMetadataId; }));
            forkJoin(schemaParams.map((/**
             * @param {?} para
             * @return {?}
             */
            function (para) {
                return _this.service.getBusinessEntitybyId(para.schemaMetadataId);
            }))).subscribe((/**
             * @param {?} data
             * @return {?}
             */
            function (data) {
                if (data && data.length > 0) {
                    data.forEach((/**
                     * @param {?} d
                     * @return {?}
                     */
                    function (d) {
                        _this.uiState.schemas.push(d);
                    }));
                }
            }), (/**
             * @param {?} err
             * @return {?}
             */
            function (err) {
                _this.uiState.schemas = [];
            }));
        }
        else {
            this.uiState.schemas = [];
        }
    };
    /**
     * @param {?} formId
     * @return {?}
     */
    ProcessDesignerViewModel.prototype.getFlowFormInfoById = /**
     * @param {?} formId
     * @return {?}
     */
    function (formId) {
        var _this = this;
        /** @type {?} */
        var $flowform = new Subject();
        if (formId) {
            forkJoin(this.service.GetFlowFormbyId(formId), this.service.getParametersbyFlowFormKey(formId).pipe(map((/**
             * @param {?} params
             * @return {?}
             */
            function (params) {
                _this.setFormParamCxt(params);
                return params;
            }))), this.service.getComponentsbyFlowformkey(formId), this.service.getExecuteFormbyFlowFormKey(formId), this.service.getBizActivities(formId), this.service.getCustomizeActions(formId)).subscribe((/**
             * @param {?} re
             * @return {?}
             */
            function (re) {
                /** @type {?} */
                var flowform = new FlowFormInfo();
                flowform.flowForm = re[0];
                flowform.formalParameters = re[1];
                flowform.bizComponents = re[2].filter((/**
                 * @param {?} cmp
                 * @return {?}
                 */
                function (cmp) { return cmp.ownerType !== 'Activity'; }));
                flowform.excuteForms = re[3];
                flowform.bizActivities = re[4];
                flowform.customizeActions = re[5];
                _this.uiState.flowFormInfo = flowform;
                // this.updateCOs();
                _this.updateSchemas();
                $flowform.next(flowform);
            }));
        }
        return $flowform.asObservable();
    };
    /**
     * @return {?}
     */
    ProcessDesignerViewModel.prototype.getFormFormatsByBizCategory = /**
     * @return {?}
     */
    function () {
        if (this.uiState.flowFormInfo.flowForm.businessObjectId) {
            /** @type {?} */
            var url = "/api/runtime/wf/v1.0/formFormat/query?param=";
            /** @type {?} */
            var param = "{\"bizCategory\":\"" + this.uiState.flowFormInfo.flowForm.businessObjectId + "\"}";
            param = encodeURIComponent(param);
            url += param;
            return this.http.get(url);
        }
        else {
            return from(new Array());
        }
    };
    /**
     * 保存流程
     * @param content 流程上下文
     */
    /**
     * 保存流程
     * @param {?} content 流程上下文
     * @param {?} processInfo
     * @param {?} state
     * @return {?}
     */
    ProcessDesignerViewModel.prototype.saveProcess = /**
     * 保存流程
     * @param {?} content 流程上下文
     * @param {?} processInfo
     * @param {?} state
     * @return {?}
     */
    function (content, processInfo, state) {
        return this.service.saveProcess(content, processInfo, state);
    };
    /**
     * 发布流程
     * @param content 流程上下文
     */
    /**
     * 发布流程
     * @param {?} content 流程上下文
     * @return {?}
     */
    ProcessDesignerViewModel.prototype.deployProcess = /**
     * 发布流程
     * @param {?} content 流程上下文
     * @return {?}
     */
    function (content) {
        return this.service.deployProcess(content);
    };
    /**
     * @param {?} auditId
     * @param {?} success
     * @param {?} key
     * @return {?}
     */
    ProcessDesignerViewModel.prototype.auditProcessDef = /**
     * @param {?} auditId
     * @param {?} success
     * @param {?} key
     * @return {?}
     */
    function (auditId, success, key) {
        /** @type {?} */
        var info = new AuditProcessDefInfo();
        info.auditId = auditId;
        info.success = success;
        info.processDefKey = key;
        this.service.auditProcessDef(info);
    };
    /**
     * 保存运行时流程
     * @param content 流程上下文
     */
    /**
     * 保存运行时流程
     * @param {?} content 流程上下文
     * @param {?} procDefId
     * @return {?}
     */
    ProcessDesignerViewModel.prototype.saveRTProcess = /**
     * 保存运行时流程
     * @param {?} content 流程上下文
     * @param {?} procDefId
     * @return {?}
     */
    function (content, procDefId) {
        return this.service.saveRTProcess(content, procDefId);
    };
    /**
     * @param {?} process
     * @param {?} processInfo
     * @return {?}
     */
    ProcessDesignerViewModel.prototype.saveAsProcess = /**
     * @param {?} process
     * @param {?} processInfo
     * @return {?}
     */
    function (process, processInfo) {
        var _this = this;
        /** @type {?} */
        var compFactory = this.resolver.resolveComponentFactory(SaveAsEditComponent);
        /** @type {?} */
        var compRef = compFactory.create(this.injector);
        compRef.instance.procKey = process.DefaultProcess.Key;
        compRef.instance.procName = process.DefaultProcess.Name + '_副本';
        compRef.instance.isAdministratorConfig = this.uiState.isAdministratorConfig;
        compRef.instance.organizations = this.uiState.organizations;
        compRef.instance.accessLevel = processInfo.accessLevel;
        compRef.instance.organization = processInfo.procOrg.orgId;
        compRef.instance.organizationName = processInfo.procOrg.orgName;
        /** @type {?} */
        var modalOptions = {
            title: '另存为',
            width: 450, height: 400,
            buttons: compRef.instance.btnRef,
            showButtons: true
        };
        /** @type {?} */
        var dlg = this.modalService.show(compRef, modalOptions);
        compRef.instance.submit.subscribe((/**
         * @param {?} re
         * @return {?}
         */
        function (re) {
            process.DefaultProcess.Name = re.procName;
            /** @type {?} */
            var procInfo = new ProcessInfo();
            procInfo.accessLevel = re.accessLevel;
            procInfo.procOrg = {
                orgId: re.organization,
                orgName: re.organizationName
            };
            _this.saveProcess(JSON.stringify(process), procInfo, 1).subscribe((/**
             * @param {?} r
             * @return {?}
             */
            function (r) {
                _this.notify.success((/** @type {?} */ ({
                    title: '系统提示', msg: '另存为成功', timeout: 3000
                })));
            }), (/**
             * @param {?} err
             * @return {?}
             */
            function (err) {
                _this.notify.error((/** @type {?} */ ({
                    title: '系统提示', msg: '另存为失败，请检查流程是否正确！', timeout: 3000
                })));
            }));
            dlg.close();
        }));
        compRef.instance.cancel.subscribe((/**
         * @param {?} r
         * @return {?}
         */
        function (r) {
            dlg.close();
        }));
    };
    /**
     * 同步设计器时流程定义
     */
    /**
     * 同步设计器时流程定义
     * @param {?} content
     * @param {?} rtProcessInfo
     * @return {?}
     */
    ProcessDesignerViewModel.prototype.syncDtProcess = /**
     * 同步设计器时流程定义
     * @param {?} content
     * @param {?} rtProcessInfo
     * @return {?}
     */
    function (content, rtProcessInfo) {
        var _this = this;
        if (content) {
            /** @type {?} */
            var process_1 = JSON.parse(content);
            this.message.question('是否将当前版本流程定义同步到设计时流程定义包！', (/**
             * @return {?}
             */
            function () {
                _this.service.syncDtProcess(content, rtProcessInfo).subscribe((/**
                 * @param {?} data
                 * @return {?}
                 */
                function (data) {
                    _this.notify.success((/** @type {?} */ ({
                        title: '系统提示', msg: '同步成功', timeout: 3000
                    })));
                    _this.auditProcessDef(AuditEvent.WF_ProcessDef_SyncDT, true, process_1.DefaultProcess.Key);
                }), (/**
                 * @param {?} error
                 * @return {?}
                 */
                function (error) {
                    _this.notify.error((/** @type {?} */ ({
                        title: '系统提示', msg: '同步失败，请联系管理员查看原因！', timeout: 3000
                    })));
                    _this.auditProcessDef(AuditEvent.WF_ProcessDef_SyncDT, false, process_1.DefaultProcess.Key);
                }));
            }));
        }
    };
    /**
     * @param {?} data
     * @param {?} processInfo
     * @return {?}
     */
    ProcessDesignerViewModel.prototype.beforeCompleteStrategyChange = /**
     * @param {?} data
     * @param {?} processInfo
     * @return {?}
     */
    function (data, processInfo) {
        var _this = this;
        /** @type {?} */
        var url = "/api/runtime/wf/v1.0/processInstances/runtimeActivityInstances?procDefId=" + processInfo.rtProcDefId + "&activityDefinitionId=" + data.Id;
        return this.http.get(url).pipe(switchMap((/**
         * @param {?} re
         * @return {?}
         */
        function (re) {
            if (re && re.length > 0) {
                _this.message.info('当前节点存在运行中的活动实例，不允许调整完成策略，请了解！');
                return of(false);
            }
            else {
                return of(true);
            }
        })));
    };
    /**
     * @param {?} procCategoryId
     * @return {?}
     */
    ProcessDesignerViewModel.prototype.getProcessCategory = /**
     * @param {?} procCategoryId
     * @return {?}
     */
    function (procCategoryId) {
        return this.service.GetFlowFormbyId(procCategoryId);
    };
    /**
     * @private
     * @param {?} params
     * @return {?}
     */
    ProcessDesignerViewModel.prototype.setFormParamCxt = /**
     * @private
     * @param {?} params
     * @return {?}
     */
    function (params) {
        var _this = this;
        this.uiState.formalParameterContext = [];
        if (params && params.length > 0) {
            params.forEach((/**
             * @param {?} param
             * @return {?}
             */
            function (param) {
                if (param.dataType === 'CDTSchema') {
                    /** @type {?} */
                    var formalParameterContext = [{
                            key: "schemaId_" + param.code,
                            name: "schemaId_" + param.name,
                            description: "schemaId_" + param.name
                        }, {
                            key: "metadataId_" + param.code,
                            name: "metadataId_" + param.name,
                            description: "metadataId_" + param.name
                        }];
                    _this.uiState.formalParameterContext = _this.uiState.formalParameterContext.concat(formalParameterContext);
                }
            }));
        }
    };
    ProcessDesignerViewModel.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    ProcessDesignerViewModel.ctorParameters = function () { return [
        { type: ProcessDesignerUIState },
        { type: ProcessDesignerDataService },
        { type: ProcessDeUtil },
        { type: NotifyService },
        { type: MessagerService },
        { type: BpmnProcessViewModel },
        { type: WFFlowElementsViewModel },
        { type: SubProcessViewModel },
        { type: AutoActivityAdapter },
        { type: CatchEventAdapter },
        { type: MessageActivityAdapter },
        { type: NotifyActivityAdapter },
        { type: AifCreationBillActivityAdapter },
        { type: BsModalService },
        { type: Injector },
        { type: ComponentFactoryResolver },
        { type: HttpService }
    ]; };
    return ProcessDesignerViewModel;
}());
export { ProcessDesignerViewModel };
if (false) {
    /** @type {?} */
    ProcessDesignerViewModel.prototype.uiState;
    /**
     * @type {?}
     * @private
     */
    ProcessDesignerViewModel.prototype.service;
    /**
     * @type {?}
     * @private
     */
    ProcessDesignerViewModel.prototype.util;
    /**
     * @type {?}
     * @private
     */
    ProcessDesignerViewModel.prototype.notify;
    /**
     * @type {?}
     * @private
     */
    ProcessDesignerViewModel.prototype.message;
    /**
     * @type {?}
     * @private
     */
    ProcessDesignerViewModel.prototype.process;
    /**
     * @type {?}
     * @private
     */
    ProcessDesignerViewModel.prototype.activity;
    /**
     * @type {?}
     * @private
     */
    ProcessDesignerViewModel.prototype.subProcess;
    /**
     * @type {?}
     * @private
     */
    ProcessDesignerViewModel.prototype.autoActAdapter;
    /**
     * @type {?}
     * @private
     */
    ProcessDesignerViewModel.prototype.catchEventAdapter;
    /**
     * @type {?}
     * @private
     */
    ProcessDesignerViewModel.prototype.messageActAdapter;
    /**
     * @type {?}
     * @private
     */
    ProcessDesignerViewModel.prototype.notifyActAdapter;
    /**
     * @type {?}
     * @private
     */
    ProcessDesignerViewModel.prototype.creationActAdapter;
    /**
     * @type {?}
     * @private
     */
    ProcessDesignerViewModel.prototype.modalService;
    /**
     * @type {?}
     * @private
     */
    ProcessDesignerViewModel.prototype.injector;
    /**
     * @type {?}
     * @private
     */
    ProcessDesignerViewModel.prototype.resolver;
    /**
     * @type {?}
     * @private
     */
    ProcessDesignerViewModel.prototype.http;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvY2Vzcy1kZXNpZ25lci52aWV3bW9kZWwuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZ3NwLXdmL3dmLXByb2Nlc3MtZWRpdG9yLyIsInNvdXJjZXMiOlsibGliL2FwcC9wcm9jZXNzLWRlc2lnbmVyLnZpZXdtb2RlbC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxRQUFRLEVBQUUsd0JBQXdCLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDL0UsT0FBTyxFQUFFLHNCQUFzQixFQUFFLE1BQU0sNEJBQTRCLENBQUM7QUFDcEUsT0FBTyxFQUFFLDBCQUEwQixFQUFFLE1BQU0sd0NBQXdDLENBQUM7QUFDcEYsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLDBCQUEwQixDQUFDO0FBRXBELE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLDRCQUE0QixDQUFDO0FBQzlELE9BQU8sRUFBRSxvQkFBb0IsRUFBRSxNQUFNLDBCQUEwQixDQUFDO0FBQ2hFLE9BQU8sRUFBRSx1QkFBdUIsRUFBRSxNQUFNLDZCQUE2QixDQUFDO0FBQ3RFLE9BQU8sRUFBRSxhQUFhLEVBQWlCLE1BQU0sbUJBQW1CLENBQUM7QUFDakUsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBQ3RELE9BQU8sRUFBRSxHQUFHLEVBQUUsU0FBUyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDaEQsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLGtDQUFrQyxDQUFDO0FBQ2hFLE9BQU8sRUFBRSxFQUFFLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUN6QyxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sa0JBQWtCLENBQUM7QUFDbEQsT0FBTyxFQUFFLG1CQUFtQixFQUFFLE1BQU0sOENBQThDLENBQUM7QUFDbkYsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLDJCQUEyQixDQUFDO0FBRTFELE9BQU8sRUFBRSxt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LGtEQUEyQzs7Ozs7SUFDM0MscURBQTRDOzs7OztJQUM1QyxxREFBaUQ7Ozs7O0lBQ2pELG9EQUErQzs7Ozs7SUFDL0Msc0RBQTBEOzs7OztJQUMxRCxnREFBb0M7Ozs7O0lBQ3BDLDRDQUEwQjs7Ozs7SUFDMUIsNENBQTBDOzs7OztJQUMxQyx3Q0FBeUIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlLCBJbmplY3RvciwgQ29tcG9uZW50RmFjdG9yeVJlc29sdmVyIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IFByb2Nlc3NEZXNpZ25lclVJU3RhdGUgfSBmcm9tICcuL3Byb2Nlc3MtZGVzaWduZXIudWlzdGF0ZSc7XHJcbmltcG9ydCB7IFByb2Nlc3NEZXNpZ25lckRhdGFTZXJ2aWNlIH0gZnJvbSAnLi4vZG9tYWluL3Byb2Nlc3MtZGVzaWduZXIuZGF0YXNlcnZpY2UnO1xyXG5pbXBvcnQgeyBmb3JrSm9pbiB9IGZyb20gJ3J4anMvb2JzZXJ2YWJsZS9mb3JrSm9pbic7XHJcbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICdyeGpzL29ic2VydmFibGUnO1xyXG5pbXBvcnQgeyBQcm9jZXNzQ2xyVHlwZUlEIH0gZnJvbSAnLi4vbW9kZWwvcHJvY2Vzcy1jbHJ0eXBlSWQnO1xyXG5pbXBvcnQgeyBCcG1uUHJvY2Vzc1ZpZXdNb2RlbCB9IGZyb20gJy4vYnBtbi1wcm9jZXNzLnZpZXdtb2RlbCc7XHJcbmltcG9ydCB7IFdGRmxvd0VsZW1lbnRzVmlld01vZGVsIH0gZnJvbSAnLi93Zi1mbG93RWxlbWVudHMudmlld01vZGVsJztcclxuaW1wb3J0IHsgTm90aWZ5U2VydmljZSwgTm90aWZ5T3B0aW9ucyB9IGZyb20gJ0BmYXJyaXMvdWktbm90aWZ5JztcclxuaW1wb3J0IHsgTWVzc2FnZXJTZXJ2aWNlIH0gZnJvbSAnQGZhcnJpcy91aS1tZXNzYWdlcic7XHJcbmltcG9ydCB7IG1hcCwgc3dpdGNoTWFwIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xyXG5pbXBvcnQgeyBGbG93Rm9ybUluZm8gfSBmcm9tICcuLi9kb21haW4vZW50aXRpZXMvZmxvd2Zvcm0taW5mbyc7XHJcbmltcG9ydCB7IG9mLCBTdWJqZWN0LCBmcm9tIH0gZnJvbSAncnhqcyc7XHJcbmltcG9ydCB7IEJzTW9kYWxTZXJ2aWNlIH0gZnJvbSAnQGZhcnJpcy91aS1tb2RhbCc7XHJcbmltcG9ydCB7IFNhdmVBc0VkaXRDb21wb25lbnQgfSBmcm9tICcuLi92aWV3cy9zYXZlLWFzLWVkaXQvc2F2ZS1hcy1lZGl0LmNvbXBvbmVudCc7XHJcbmltcG9ydCB7IFByb2Nlc3NEZVV0aWwgfSBmcm9tICcuLi9kb21haW4vcHJvY2Vzcy1kZS11dGlsJztcclxuaW1wb3J0IHsgSHR0cEVycm9yUmVzcG9uc2UgfSBmcm9tICdAYW5ndWxhci9jb21tb24vaHR0cCc7XHJcbmltcG9ydCB7IFN1YlByb2Nlc3NWaWV3TW9kZWwgfSBmcm9tICcuL3N1Yi1wcm9jZXNzLnZpZXdtb2RlbCc7XHJcbmltcG9ydCB7IEF1dG9BY3Rpdml0eUFkYXB0ZXIgfSBmcm9tICcuL2F1dG8tYWN0aXZpdHkuYWRhcHRlcic7XHJcbmltcG9ydCB7IENhdGNoRXZlbnRBZGFwdGVyIH0gZnJvbSAnLi9jYXRjaC1ldmVudC5hZGFwdGVyJztcclxuaW1wb3J0IHsgTWVzc2FnZUFjdGl2aXR5QWRhcHRlciB9IGZyb20gJy4vbWVzc2FnZS1hY3Rpdml0eS5hZGFwdGVyJztcclxuaW1wb3J0IHsgQXVkaXRFdmVudCwgQXVkaXRQcm9jZXNzRGVmSW5mbyB9IGZyb20gJy4uL2RvbWFpbi9lbnRpdGllcy9hdWRpdC1wcm9jZXNzRGVmLWluZm8nO1xyXG5pbXBvcnQgeyBSVFByb2Nlc3NJbmZvIH0gZnJvbSAnLi4vbW9kZWwvcnQtcHJvY2Vzcy1pbmZvJztcclxuaW1wb3J0IHsgSHR0cFNlcnZpY2UgfSBmcm9tICdAZWNwLWNhZi9jYWYtY29tbW9uJztcclxuaW1wb3J0IHsgUHJvY2Vzc0luZm8gfSBmcm9tICcuLi9tb2RlbC9wcm9jZXNzLWluZm8nO1xyXG5pbXBvcnQgeyBOb3RpZnlBY3Rpdml0eUFkYXB0ZXIgfSBmcm9tICcuL25vdGlmeS1hY3Rpdml0eS5hZGFwdGVyJztcclxuaW1wb3J0IHsgRmxvd0Zvcm1FbnRpdHkgfSBmcm9tICcuLi9kb21haW4vZW50aXRpZXMvZmxvd2Zvcm0uZW50aXR5JztcclxuaW1wb3J0IHsgQWlmQ3JlYXRpb25CaWxsQWN0aXZpdHlBZGFwdGVyIH0gZnJvbSAnLi9haWYtY3JlYXRpb24tYmlsbC1hY3Rpdml0eS5hZGFwdGVyJztcclxuXHJcblxyXG5ASW5qZWN0YWJsZSgpXHJcblxyXG5leHBvcnQgY2xhc3MgUHJvY2Vzc0Rlc2lnbmVyVmlld01vZGVsIHtcclxuXHJcbiAgICBjb25zdHJ1Y3RvcihcclxuICAgICAgICBwdWJsaWMgdWlTdGF0ZTogUHJvY2Vzc0Rlc2lnbmVyVUlTdGF0ZSxcclxuICAgICAgICBwcml2YXRlIHNlcnZpY2U6IFByb2Nlc3NEZXNpZ25lckRhdGFTZXJ2aWNlLFxyXG4gICAgICAgIHByaXZhdGUgdXRpbDogUHJvY2Vzc0RlVXRpbCxcclxuICAgICAgICBwcml2YXRlIG5vdGlmeTogTm90aWZ5U2VydmljZSxcclxuICAgICAgICBwcml2YXRlIG1lc3NhZ2U6IE1lc3NhZ2VyU2VydmljZSxcclxuICAgICAgICBwcml2YXRlIHByb2Nlc3M6IEJwbW5Qcm9jZXNzVmlld01vZGVsLFxyXG4gICAgICAgIHByaXZhdGUgYWN0aXZpdHk6IFdGRmxvd0VsZW1lbnRzVmlld01vZGVsLFxyXG4gICAgICAgIHByaXZhdGUgc3ViUHJvY2VzczogU3ViUHJvY2Vzc1ZpZXdNb2RlbCxcclxuICAgICAgICBwcml2YXRlIGF1dG9BY3RBZGFwdGVyOiBBdXRvQWN0aXZpdHlBZGFwdGVyLFxyXG4gICAgICAgIHByaXZhdGUgY2F0Y2hFdmVudEFkYXB0ZXI6IENhdGNoRXZlbnRBZGFwdGVyLFxyXG4gICAgICAgIHByaXZhdGUgbWVzc2FnZUFjdEFkYXB0ZXI6IE1lc3NhZ2VBY3Rpdml0eUFkYXB0ZXIsXHJcbiAgICAgICAgcHJpdmF0ZSBub3RpZnlBY3RBZGFwdGVyOiBOb3RpZnlBY3Rpdml0eUFkYXB0ZXIsXHJcbiAgICAgICAgcHJpdmF0ZSBjcmVhdGlvbkFjdEFkYXB0ZXI6IEFpZkNyZWF0aW9uQmlsbEFjdGl2aXR5QWRhcHRlcixcclxuICAgICAgICBwcml2YXRlIG1vZGFsU2VydmljZTogQnNNb2RhbFNlcnZpY2UsXHJcbiAgICAgICAgcHJpdmF0ZSBpbmplY3RvcjogSW5qZWN0b3IsXHJcbiAgICAgICAgcHJpdmF0ZSByZXNvbHZlcjogQ29tcG9uZW50RmFjdG9yeVJlc29sdmVyLFxyXG4gICAgICAgIHByaXZhdGUgaHR0cDogSHR0cFNlcnZpY2VcclxuICAgICkgeyB9XHJcblxyXG4gICAgLy8g5Yid5aeL5Yqg6L295rWB56iL5bGe5oCnXHJcbiAgICBpbml0UHJvY2Vzc1Byb3BlcnR5KG9iajogYW55KSB7XHJcbiAgICAgICAgY29uc3QgcHB0RGF0YSA9IG9iai5wcm9wZXJ0eURhdGE7XHJcbiAgICAgICAgY29uc3QgZmZJZCA9IHBwdERhdGEuRW50cnlGb3JtO1xyXG4gICAgICAgIGlmIChmZklkKSB7XHJcbiAgICAgICAgICAgIHBwdERhdGEuRW50cnlGb3JtID0gdGhpcy51aVN0YXRlLmZsb3dGb3JtSW5mby5mbG93Rm9ybTtcclxuICAgICAgICAgICAgdGhpcy51aVN0YXRlLnByb3BlcnR5Q29uZmlnID0gdGhpcy5wcm9jZXNzLnNldFByb2Nlc3NDb25maWcob2JqLnByb3BlcnR5Q29uZmlnKTtcclxuICAgICAgICAgICAgdGhpcy51aVN0YXRlLnByb3BlcnR5RGF0YSA9IHBwdERhdGE7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy51aVN0YXRlLnByb3BlcnR5Q29uZmlnID0gdGhpcy5wcm9jZXNzLnNldFByb2Nlc3NDb25maWcob2JqLnByb3BlcnR5Q29uZmlnKTtcclxuICAgICAgICAgICAgdGhpcy51aVN0YXRlLnByb3BlcnR5RGF0YSA9IHBwdERhdGE7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgc2V0UHJvcGVydHkob2JqOiBhbnkpIHtcclxuICAgICAgICAvLyDmm7TmlrDlsZ7mgKfmoYbmlbDmja7kuI7phY3nva5cclxuICAgICAgICBjb25zdCBwcm9wZXJ0eURhdGEgPSBvYmoucHJvcGVydHlEYXRhO1xyXG4gICAgICAgIHN3aXRjaCAocHJvcGVydHlEYXRhLkNsclR5cGVJRCkge1xyXG4gICAgICAgICAgICBjYXNlIFByb2Nlc3NDbHJUeXBlSUQucHJvY2VzczpcclxuICAgICAgICAgICAgICAgIHRoaXMucHJvY2Vzcy5zZXRQcm9jZXNzUHJvcGVydHkob2JqKTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIFByb2Nlc3NDbHJUeXBlSUQudXNlckFjdGl2aXR5OlxyXG4gICAgICAgICAgICAgICAgdGhpcy5hY3Rpdml0eS5zZXRVc2VyQWN0aXZpdHlQcm9wZXJ0eShvYmopO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgUHJvY2Vzc0NsclR5cGVJRC5zdWJQcm9jZXNzOlxyXG4gICAgICAgICAgICAgICAgdGhpcy5zdWJQcm9jZXNzLnNldFByb3BlcnR5KG9iaik7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSBQcm9jZXNzQ2xyVHlwZUlELmF1dG9BY3Rpdml0eTpcclxuICAgICAgICAgICAgICAgIHRoaXMuYXV0b0FjdEFkYXB0ZXIuc2V0UHJvcGVydHkob2JqKTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIFByb2Nlc3NDbHJUeXBlSUQuY2F0Y2hFdmVudDpcclxuICAgICAgICAgICAgICAgIHRoaXMuY2F0Y2hFdmVudEFkYXB0ZXIuc2V0UHJvcGVydHkob2JqKTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIFByb2Nlc3NDbHJUeXBlSUQub3BlcmF0aW9uQWN0aXZpdHk6XHJcbiAgICAgICAgICAgICAgICB0aGlzLmFjdGl2aXR5LnNldFVzZXJBY3Rpdml0eVByb3BlcnR5KG9iaik7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSBQcm9jZXNzQ2xyVHlwZUlELm1lc3NhZ2VBY3Rpdml0eTpcclxuICAgICAgICAgICAgICAgIHRoaXMubWVzc2FnZUFjdEFkYXB0ZXIuc2V0UHJvcGVydHkob2JqKTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIFByb2Nlc3NDbHJUeXBlSUQubm90aWZ5QWN0aXZpdHk6XHJcbiAgICAgICAgICAgICAgICB0aGlzLm5vdGlmeUFjdEFkYXB0ZXIuc2V0UHJvcGVydHkob2JqKTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSBQcm9jZXNzQ2xyVHlwZUlELmFpZkNyZWF0aW9uQmlsbEFjdGl2aXR5OlxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY3JlYXRpb25BY3RBZGFwdGVyLnNldFByb3BlcnR5KG9iaik7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgICAgICB0aGlzLmFjdGl2aXR5LnNldEZsb3dFbGVtZW50UHJvcGVydHkob2JqKTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHB1YmxpYyB1cGRhdGVTY2hlbWFzKCkge1xyXG4gICAgICAgIHRoaXMudWlTdGF0ZS5zY2hlbWFzID0gW107XHJcbiAgICAgICAgaWYgKHRoaXMudWlTdGF0ZS5mbG93Rm9ybUluZm8uZm9ybWFsUGFyYW1ldGVycyAmJiB0aGlzLnVpU3RhdGUuZmxvd0Zvcm1JbmZvLmZvcm1hbFBhcmFtZXRlcnMubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICBjb25zdCBzY2hlbWFQYXJhbXMgPSB0aGlzLnVpU3RhdGUuZmxvd0Zvcm1JbmZvLmZvcm1hbFBhcmFtZXRlcnMuZmlsdGVyKHAgPT4gcC5kYXRhVHlwZSA9PT0gJ0NEVFNjaGVtYScgJiYgcC5zY2hlbWFNZXRhZGF0YUlkKTtcclxuICAgICAgICAgICAgZm9ya0pvaW4oc2NoZW1hUGFyYW1zLm1hcChwYXJhID0+IHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnNlcnZpY2UuZ2V0QnVzaW5lc3NFbnRpdHlieUlkKHBhcmEuc2NoZW1hTWV0YWRhdGFJZCk7XHJcbiAgICAgICAgICAgIH0pKS5zdWJzY3JpYmUoZGF0YSA9PiB7XHJcbiAgICAgICAgICAgICAgICBpZiAoZGF0YSAmJiBkYXRhLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgICAgICAgICBkYXRhLmZvckVhY2goKGQ6IGFueSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnVpU3RhdGUuc2NoZW1hcy5wdXNoKGQpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9LCBlcnIgPT4ge1xyXG4gICAgICAgICAgICAgICAgdGhpcy51aVN0YXRlLnNjaGVtYXMgPSBbXTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy51aVN0YXRlLnNjaGVtYXMgPSBbXTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGdldEZsb3dGb3JtSW5mb0J5SWQoZm9ybUlkOiBzdHJpbmcpOiBPYnNlcnZhYmxlPEZsb3dGb3JtSW5mbz4ge1xyXG4gICAgICAgIGNvbnN0ICRmbG93Zm9ybSA9IG5ldyBTdWJqZWN0PEZsb3dGb3JtSW5mbz4oKTtcclxuICAgICAgICBpZiAoZm9ybUlkKSB7XHJcbiAgICAgICAgICAgIGZvcmtKb2luKHRoaXMuc2VydmljZS5HZXRGbG93Rm9ybWJ5SWQoZm9ybUlkKSxcclxuICAgICAgICAgICAgICAgIHRoaXMuc2VydmljZS5nZXRQYXJhbWV0ZXJzYnlGbG93Rm9ybUtleShmb3JtSWQpLnBpcGUoXHJcbiAgICAgICAgICAgICAgICAgICAgbWFwKChwYXJhbXM6IGFueVtdKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc2V0Rm9ybVBhcmFtQ3h0KHBhcmFtcyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBwYXJhbXM7XHJcbiAgICAgICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgICksXHJcbiAgICAgICAgICAgICAgICB0aGlzLnNlcnZpY2UuZ2V0Q29tcG9uZW50c2J5Rmxvd2Zvcm1rZXkoZm9ybUlkKSxcclxuICAgICAgICAgICAgICAgIHRoaXMuc2VydmljZS5nZXRFeGVjdXRlRm9ybWJ5Rmxvd0Zvcm1LZXkoZm9ybUlkKSxcclxuICAgICAgICAgICAgICAgIHRoaXMuc2VydmljZS5nZXRCaXpBY3Rpdml0aWVzKGZvcm1JZCksXHJcbiAgICAgICAgICAgICAgICB0aGlzLnNlcnZpY2UuZ2V0Q3VzdG9taXplQWN0aW9ucyhmb3JtSWQpXHJcbiAgICAgICAgICAgICkuc3Vic2NyaWJlKChyZTogYW55W10pID0+IHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGZsb3dmb3JtID0gbmV3IEZsb3dGb3JtSW5mbygpO1xyXG4gICAgICAgICAgICAgICAgZmxvd2Zvcm0uZmxvd0Zvcm0gPSByZVswXTtcclxuICAgICAgICAgICAgICAgIGZsb3dmb3JtLmZvcm1hbFBhcmFtZXRlcnMgPSByZVsxXTtcclxuICAgICAgICAgICAgICAgIGZsb3dmb3JtLmJpekNvbXBvbmVudHMgPSByZVsyXS5maWx0ZXIoY21wID0+IGNtcC5vd25lclR5cGUgIT09ICdBY3Rpdml0eScpO1xyXG4gICAgICAgICAgICAgICAgZmxvd2Zvcm0uZXhjdXRlRm9ybXMgPSByZVszXTtcclxuICAgICAgICAgICAgICAgIGZsb3dmb3JtLmJpekFjdGl2aXRpZXMgPSByZVs0XTtcclxuICAgICAgICAgICAgICAgIGZsb3dmb3JtLmN1c3RvbWl6ZUFjdGlvbnMgPSByZVs1XTtcclxuICAgICAgICAgICAgICAgIHRoaXMudWlTdGF0ZS5mbG93Rm9ybUluZm8gPSBmbG93Zm9ybTtcclxuICAgICAgICAgICAgICAgIC8vIHRoaXMudXBkYXRlQ09zKCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnVwZGF0ZVNjaGVtYXMoKTtcclxuICAgICAgICAgICAgICAgICRmbG93Zm9ybS5uZXh0KGZsb3dmb3JtKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiAkZmxvd2Zvcm0uYXNPYnNlcnZhYmxlKCk7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGdldEZvcm1Gb3JtYXRzQnlCaXpDYXRlZ29yeSgpOiBPYnNlcnZhYmxlPGFueT4ge1xyXG4gICAgICAgIGlmICh0aGlzLnVpU3RhdGUuZmxvd0Zvcm1JbmZvLmZsb3dGb3JtLmJ1c2luZXNzT2JqZWN0SWQpIHtcclxuICAgICAgICAgICAgbGV0IHVybCA9IGAvYXBpL3J1bnRpbWUvd2YvdjEuMC9mb3JtRm9ybWF0L3F1ZXJ5P3BhcmFtPWA7XHJcbiAgICAgICAgICAgIGxldCBwYXJhbSA9IGB7XCJiaXpDYXRlZ29yeVwiOlwiJHt0aGlzLnVpU3RhdGUuZmxvd0Zvcm1JbmZvLmZsb3dGb3JtLmJ1c2luZXNzT2JqZWN0SWR9XCJ9YDtcclxuICAgICAgICAgICAgcGFyYW0gPSBlbmNvZGVVUklDb21wb25lbnQocGFyYW0pO1xyXG4gICAgICAgICAgICB1cmwgKz0gcGFyYW07XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmh0dHAuZ2V0KHVybCk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgcmV0dXJuIGZyb20obmV3IEFycmF5KCkpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICog5L+d5a2Y5rWB56iLXHJcbiAgICAgKiBAcGFyYW0gY29udGVudCDmtYHnqIvkuIrkuIvmlodcclxuICAgICAqL1xyXG4gICAgc2F2ZVByb2Nlc3MoY29udGVudDogc3RyaW5nLCBwcm9jZXNzSW5mbzogUHJvY2Vzc0luZm8sIHN0YXRlOiBudW1iZXIpOiBPYnNlcnZhYmxlPGFueT4ge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnNlcnZpY2Uuc2F2ZVByb2Nlc3MoY29udGVudCwgcHJvY2Vzc0luZm8sIHN0YXRlKTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICog5Y+R5biD5rWB56iLXHJcbiAgICAgKiBAcGFyYW0gY29udGVudCDmtYHnqIvkuIrkuIvmlodcclxuICAgICAqL1xyXG4gICAgZGVwbG95UHJvY2Vzcyhjb250ZW50OiBzdHJpbmcpOiBPYnNlcnZhYmxlPGFueT4ge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnNlcnZpY2UuZGVwbG95UHJvY2Vzcyhjb250ZW50KTtcclxuICAgIH1cclxuXHJcbiAgICBhdWRpdFByb2Nlc3NEZWYoYXVkaXRJZDogQXVkaXRFdmVudCwgc3VjY2VzczogYm9vbGVhbiwga2V5OiBzdHJpbmcpIHtcclxuICAgICAgICBjb25zdCBpbmZvID0gbmV3IEF1ZGl0UHJvY2Vzc0RlZkluZm8oKTtcclxuICAgICAgICBpbmZvLmF1ZGl0SWQgPSBhdWRpdElkO1xyXG4gICAgICAgIGluZm8uc3VjY2VzcyA9IHN1Y2Nlc3M7XHJcbiAgICAgICAgaW5mby5wcm9jZXNzRGVmS2V5ID0ga2V5O1xyXG5cclxuICAgICAgICB0aGlzLnNlcnZpY2UuYXVkaXRQcm9jZXNzRGVmKGluZm8pO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICog5L+d5a2Y6L+Q6KGM5pe25rWB56iLXHJcbiAgICAgKiBAcGFyYW0gY29udGVudCDmtYHnqIvkuIrkuIvmlodcclxuICAgICAqL1xyXG4gICAgc2F2ZVJUUHJvY2Vzcyhjb250ZW50OiBzdHJpbmcsIHByb2NEZWZJZDogc3RyaW5nKTogT2JzZXJ2YWJsZTxhbnk+IHtcclxuICAgICAgICByZXR1cm4gdGhpcy5zZXJ2aWNlLnNhdmVSVFByb2Nlc3MoY29udGVudCwgcHJvY0RlZklkKTtcclxuICAgIH1cclxuXHJcbiAgICBzYXZlQXNQcm9jZXNzKHByb2Nlc3M6IGFueSwgcHJvY2Vzc0luZm86IFByb2Nlc3NJbmZvKSB7XHJcbiAgICAgICAgY29uc3QgY29tcEZhY3RvcnkgPSB0aGlzLnJlc29sdmVyLnJlc29sdmVDb21wb25lbnRGYWN0b3J5KFNhdmVBc0VkaXRDb21wb25lbnQpO1xyXG4gICAgICAgIGNvbnN0IGNvbXBSZWYgPSBjb21wRmFjdG9yeS5jcmVhdGUodGhpcy5pbmplY3Rvcik7XHJcbiAgICAgICAgY29tcFJlZi5pbnN0YW5jZS5wcm9jS2V5ID0gcHJvY2Vzcy5EZWZhdWx0UHJvY2Vzcy5LZXk7XHJcbiAgICAgICAgY29tcFJlZi5pbnN0YW5jZS5wcm9jTmFtZSA9IHByb2Nlc3MuRGVmYXVsdFByb2Nlc3MuTmFtZSArICdf5Ymv5pysJztcclxuICAgICAgICBjb21wUmVmLmluc3RhbmNlLmlzQWRtaW5pc3RyYXRvckNvbmZpZyA9IHRoaXMudWlTdGF0ZS5pc0FkbWluaXN0cmF0b3JDb25maWc7XHJcbiAgICAgICAgY29tcFJlZi5pbnN0YW5jZS5vcmdhbml6YXRpb25zID0gdGhpcy51aVN0YXRlLm9yZ2FuaXphdGlvbnM7XHJcbiAgICAgICAgY29tcFJlZi5pbnN0YW5jZS5hY2Nlc3NMZXZlbCA9IHByb2Nlc3NJbmZvLmFjY2Vzc0xldmVsO1xyXG4gICAgICAgIGNvbXBSZWYuaW5zdGFuY2Uub3JnYW5pemF0aW9uID0gcHJvY2Vzc0luZm8ucHJvY09yZy5vcmdJZDtcclxuICAgICAgICBjb21wUmVmLmluc3RhbmNlLm9yZ2FuaXphdGlvbk5hbWUgPSBwcm9jZXNzSW5mby5wcm9jT3JnLm9yZ05hbWU7XHJcbiAgICAgICAgY29uc3QgbW9kYWxPcHRpb25zID0ge1xyXG4gICAgICAgICAgICB0aXRsZTogJ+WPpuWtmOS4uicsXHJcbiAgICAgICAgICAgIHdpZHRoOiA0NTAsIGhlaWdodDogNDAwLFxyXG4gICAgICAgICAgICBidXR0b25zOiBjb21wUmVmLmluc3RhbmNlLmJ0blJlZixcclxuICAgICAgICAgICAgc2hvd0J1dHRvbnM6IHRydWVcclxuICAgICAgICB9O1xyXG4gICAgICAgIGNvbnN0IGRsZyA9IHRoaXMubW9kYWxTZXJ2aWNlLnNob3coY29tcFJlZiwgbW9kYWxPcHRpb25zKTtcclxuICAgICAgICBjb21wUmVmLmluc3RhbmNlLnN1Ym1pdC5zdWJzY3JpYmUoKHJlOiBhbnkpID0+IHtcclxuICAgICAgICAgICAgcHJvY2Vzcy5EZWZhdWx0UHJvY2Vzcy5OYW1lID0gcmUucHJvY05hbWU7XHJcbiAgICAgICAgICAgIGNvbnN0IHByb2NJbmZvID0gbmV3IFByb2Nlc3NJbmZvKCk7XHJcbiAgICAgICAgICAgIHByb2NJbmZvLmFjY2Vzc0xldmVsID0gcmUuYWNjZXNzTGV2ZWw7XHJcbiAgICAgICAgICAgIHByb2NJbmZvLnByb2NPcmcgPSB7XHJcbiAgICAgICAgICAgICAgICBvcmdJZDogcmUub3JnYW5pemF0aW9uLFxyXG4gICAgICAgICAgICAgICAgb3JnTmFtZTogcmUub3JnYW5pemF0aW9uTmFtZVxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICB0aGlzLnNhdmVQcm9jZXNzKEpTT04uc3RyaW5naWZ5KHByb2Nlc3MpLCBwcm9jSW5mbywgMSkuc3Vic2NyaWJlKHIgPT4ge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5ub3RpZnkuc3VjY2Vzcyh7XHJcbiAgICAgICAgICAgICAgICAgICAgdGl0bGU6ICfns7vnu5/mj5DnpLonLCBtc2c6ICflj6blrZjkuLrmiJDlip8nLCB0aW1lb3V0OiAzMDAwXHJcbiAgICAgICAgICAgICAgICB9IGFzIE5vdGlmeU9wdGlvbnMpO1xyXG4gICAgICAgICAgICB9LCBlcnIgPT4ge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5ub3RpZnkuZXJyb3Ioe1xyXG4gICAgICAgICAgICAgICAgICAgIHRpdGxlOiAn57O757uf5o+Q56S6JywgbXNnOiAn5Y+m5a2Y5Li65aSx6LSl77yM6K+35qOA5p+l5rWB56iL5piv5ZCm5q2j56Gu77yBJywgdGltZW91dDogMzAwMFxyXG4gICAgICAgICAgICAgICAgfSBhcyBOb3RpZnlPcHRpb25zKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIGRsZy5jbG9zZSgpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIGNvbXBSZWYuaW5zdGFuY2UuY2FuY2VsLnN1YnNjcmliZShyID0+IHtcclxuICAgICAgICAgICAgZGxnLmNsb3NlKCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDlkIzmraXorr7orqHlmajml7bmtYHnqIvlrprkuYlcclxuICAgICAqL1xyXG4gICAgc3luY0R0UHJvY2Vzcyhjb250ZW50OiBzdHJpbmcsIHJ0UHJvY2Vzc0luZm86IFJUUHJvY2Vzc0luZm8pIHtcclxuICAgICAgICBpZiAoY29udGVudCkge1xyXG4gICAgICAgICAgICBjb25zdCBwcm9jZXNzID0gSlNPTi5wYXJzZShjb250ZW50KTtcclxuICAgICAgICAgICAgdGhpcy5tZXNzYWdlLnF1ZXN0aW9uKCfmmK/lkKblsIblvZPliY3niYjmnKzmtYHnqIvlrprkuYnlkIzmraXliLDorr7orqHml7bmtYHnqIvlrprkuYnljIXvvIEnLCAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnNlcnZpY2Uuc3luY0R0UHJvY2Vzcyhjb250ZW50LCBydFByb2Nlc3NJbmZvKS5zdWJzY3JpYmUoKGRhdGEpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLm5vdGlmeS5zdWNjZXNzKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGU6ICfns7vnu5/mj5DnpLonLCBtc2c6ICflkIzmraXmiJDlip8nLCB0aW1lb3V0OiAzMDAwXHJcbiAgICAgICAgICAgICAgICAgICAgfSBhcyBOb3RpZnlPcHRpb25zKTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmF1ZGl0UHJvY2Vzc0RlZihBdWRpdEV2ZW50LldGX1Byb2Nlc3NEZWZfU3luY0RULCB0cnVlLCBwcm9jZXNzLkRlZmF1bHRQcm9jZXNzLktleSk7XHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgIChlcnJvcjogSHR0cEVycm9yUmVzcG9uc2UpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5ub3RpZnkuZXJyb3Ioe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGU6ICfns7vnu5/mj5DnpLonLCBtc2c6ICflkIzmraXlpLHotKXvvIzor7fogZTns7vnrqHnkIblkZjmn6XnnIvljp/lm6DvvIEnLCB0aW1lb3V0OiAzMDAwXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gYXMgTm90aWZ5T3B0aW9ucyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuYXVkaXRQcm9jZXNzRGVmKEF1ZGl0RXZlbnQuV0ZfUHJvY2Vzc0RlZl9TeW5jRFQsIGZhbHNlLCBwcm9jZXNzLkRlZmF1bHRQcm9jZXNzLktleSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBiZWZvcmVDb21wbGV0ZVN0cmF0ZWd5Q2hhbmdlKGRhdGE6IGFueSwgcHJvY2Vzc0luZm86IFJUUHJvY2Vzc0luZm8pOiBPYnNlcnZhYmxlPGJvb2xlYW4+IHtcclxuICAgICAgICBjb25zdCB1cmwgPSBgL2FwaS9ydW50aW1lL3dmL3YxLjAvcHJvY2Vzc0luc3RhbmNlcy9ydW50aW1lQWN0aXZpdHlJbnN0YW5jZXM/cHJvY0RlZklkPSR7cHJvY2Vzc0luZm8ucnRQcm9jRGVmSWR9JmFjdGl2aXR5RGVmaW5pdGlvbklkPSR7ZGF0YS5JZH1gO1xyXG4gICAgICAgIHJldHVybiB0aGlzLmh0dHAuZ2V0KHVybCkucGlwZShcclxuICAgICAgICAgICAgc3dpdGNoTWFwKChyZTogYW55KSA9PiB7XHJcbiAgICAgICAgICAgICAgICBpZiAocmUgJiYgcmUubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMubWVzc2FnZS5pbmZvKCflvZPliY3oioLngrnlrZjlnKjov5DooYzkuK3nmoTmtLvliqjlrp7kvovvvIzkuI3lhYHorrjosIPmlbTlrozmiJDnrZbnlaXvvIzor7fkuobop6PvvIEnKTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gb2YoZmFsc2UpO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gb2YodHJ1ZSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgKTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgZ2V0UHJvY2Vzc0NhdGVnb3J5KHByb2NDYXRlZ29yeUlkOiBzdHJpbmcpOiBPYnNlcnZhYmxlPEZsb3dGb3JtRW50aXR5PiB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuc2VydmljZS5HZXRGbG93Rm9ybWJ5SWQocHJvY0NhdGVnb3J5SWQpO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgc2V0Rm9ybVBhcmFtQ3h0KHBhcmFtczogYW55W10pIHtcclxuICAgICAgICB0aGlzLnVpU3RhdGUuZm9ybWFsUGFyYW1ldGVyQ29udGV4dCA9IFtdO1xyXG4gICAgICAgIGlmIChwYXJhbXMgJiYgcGFyYW1zLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgcGFyYW1zLmZvckVhY2gocGFyYW0gPT4ge1xyXG4gICAgICAgICAgICAgICAgaWYgKHBhcmFtLmRhdGFUeXBlID09PSAnQ0RUU2NoZW1hJykge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGZvcm1hbFBhcmFtZXRlckNvbnRleHQgPSBbe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBrZXk6IGBzY2hlbWFJZF8ke3BhcmFtLmNvZGV9YCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogYHNjaGVtYUlkXyR7cGFyYW0ubmFtZX1gLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogYHNjaGVtYUlkXyR7cGFyYW0ubmFtZX1gXHJcbiAgICAgICAgICAgICAgICAgICAgfSwge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBrZXk6IGBtZXRhZGF0YUlkXyR7cGFyYW0uY29kZX1gLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiBgbWV0YWRhdGFJZF8ke3BhcmFtLm5hbWV9YCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgZGVzY3JpcHRpb246IGBtZXRhZGF0YUlkXyR7cGFyYW0ubmFtZX1gXHJcbiAgICAgICAgICAgICAgICAgICAgfV07XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy51aVN0YXRlLmZvcm1hbFBhcmFtZXRlckNvbnRleHQgPSB0aGlzLnVpU3RhdGUuZm9ybWFsUGFyYW1ldGVyQ29udGV4dC5jb25jYXQoZm9ybWFsUGFyYW1ldGVyQ29udGV4dCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG4iXX0=