import { OnInit, TemplateRef } from '@angular/core';
import { HttpService } from '@ecp-caf/caf-common';
import { IFormFormatConfigComponent } from "@gsp-wf/biz-process-api";
import { Observable } from 'rxjs';
import { FormFormat, FormField } from '../entities/form-format';
import { FormFormatConfig } from '../entities/form-format-config';
import { DatagridComponent } from '@farris/ui-datagrid';
import { MessagerService } from '@farris/ui-messager';
import { NotifyService } from '@farris/ui-notify';
import { FormOperationConfigComponent } from '../form-operation-config/form-operation-config.component';
import { TreeTableComponent } from '@farris/ui-treetable';
export declare class FormFormatConfigComponent implements OnInit, IFormFormatConfigComponent {
    private http;
    private message;
    private notify;
    btnEnable: TemplateRef<any>;
    btnDisabled: TemplateRef<any>;
    btnHidden: TemplateRef<any>;
    fieldEditable: TemplateRef<any>;
    fieldReadonly: TemplateRef<any>;
    fieldHidden: TemplateRef<any>;
    fieldRequired: TemplateRef<any>;
    btnGrid: DatagridComponent;
    fieldTree: TreeTableComponent;
    operationConfig: FormOperationConfigComponent;
    config: FormFormatConfig;
    formFormat: FormFormat;
    state: 'new' | 'edit';
    showMethodTab: boolean;
    private _formFormatId;
    formFormatId: string;
    private _formatConfigId;
    formatConfigId: string;
    buttonCols: any[];
    buttonConfigs: any[];
    fieldCols: any[];
    fieldConfigs: any[];
    formatFieldList: Array<FormField>;
    constructor(http: HttpService, message: MessagerService, notify: NotifyService);
    ngOnInit(): void;
    submit(): Observable<any>;
    btnConfigChange(bool: boolean, field: string, id: string): void;
    btnBatchOperate(operation: string): void;
    btnBatchReset(): void;
    fieldConfigChange(bool: boolean, field: string, id: string): void;
    private fieldSwitchChange;
    fieldBatchOperate(operation: string): void;
    fieldBatchReset(): void;
    resetFieldConfig(fieldConfigs: Array<any>, id: string, field: FormField): void;
    private validator;
    private setBtnAndFieldConfigs;
    private getFieldConfigs;
    private getConfig;
    private orgFieldConfigs;
    private setFieldConfig;
    private saveConfig;
    private getFormFormat;
    private getFormFormatConfig;
    private convertFormFormat;
    private convertformFields;
    private getFormatFieldList;
    private getFormatField;
}
