/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Injectable, Injector, ComponentFactoryResolver, ApplicationRef } from '@angular/core';
import { WfApprovalLogsService } from '@gsp-wf/wf-approval-logs';
import { ForecastProcessPayload, WFFlowchartService } from '@gsp-wf/ui-flowchart';
import { BsModalService } from '@farris/ui-modal';
import { Subject, of } from 'rxjs';
import { TaskService } from './service/task.service';
import { TaskAction } from './entity/task-action';
import { NotifyService } from '@farris/ui-notify';
import { I18nService } from './service/i18n/i18n.service';
import { FrameworkService } from '@gsp-sys/rtf-common';
import { TaskEntity } from './entity/task-entity';
import { TaskExecuteComponent } from './components/task-execute/task-execute.component';
import { switchMap } from 'rxjs/operators';
import { StartProcessPayload, CancelSubmitPayload } from './entity/start-process-payload';
import { ProcessSelectorComponent } from './submit/process-selector/process-selector.component';
import { LoadingService } from '@farris/ui-loading';
import { MessagerService } from '@farris/ui-messager';
import { ConfigCode, OwnerType } from './entity/task-center-config';
var WfTaskHandlerService = /** @class */ (function () {
    function WfTaskHandlerService(logService, flowchartService, injector, resolver, modalService, taskService, notify, i18nService, frameworkService, appRef) {
        this.logService = logService;
        this.flowchartService = flowchartService;
        this.injector = injector;
        this.resolver = resolver;
        this.modalService = modalService;
        this.taskService = taskService;
        this.notify = notify;
        this.i18nService = i18nService;
        this.frameworkService = frameworkService;
        this.appRef = appRef;
        this.subject = new Subject();
        this.curLanguage = localStorage.getItem('languageCode') || 'zh-CHS'; //系统当前语言
        //系统当前语言
        this.batchSubmitNum = {
            //批量提交数量
            successNum: 0,
            failedNum: 0,
            errorNum: 0,
        };
        this.batchCancelNum = {
            //批量取消提交数量
            successNum: 0,
            errorNum: 0
        };
        this.loading = this.injector.get(LoadingService);
        this.message = this.injector.get(MessagerService);
    }
    /**
     * 处理单条任务
     * @param entity 任务实体
     * @param action 任务动作
     */
    /**
     * 处理单条任务
     * @param {?} task
     * @param {?} action 任务动作
     * @return {?}
     */
    WfTaskHandlerService.prototype.execute = /**
     * 处理单条任务
     * @param {?} task
     * @param {?} action 任务动作
     * @return {?}
     */
    function (task, action) {
        switch (action.code) {
            case 'ViewBizLog': //审批日志
                this.logService.showByDataId(task.refBizId);
                break;
            case 'ViewFlowChart': //查看流程
                this.flowchartService.viewFlowChart(task.processInstanceId);
                break;
            case 'ViewExecuteForm': // 联查单据
                this.openApp(task, action);
                break;
            default: //办理类任务
                this.complete(task, action);
        }
        return this.subject.asObservable();
    };
    /**
     * @param {?} assigneeInfo
     * @param {?} openFromIframe
     * @return {?}
     */
    WfTaskHandlerService.prototype.assignByInfo = /**
     * @param {?} assigneeInfo
     * @param {?} openFromIframe
     * @return {?}
     */
    function (assigneeInfo, openFromIframe) {
        /** @type {?} */
        var assignSubject = new Subject();
        return assignSubject.asObservable();
    };
    /**
     * @private
     * @param {?} task
     * @param {?} action
     * @return {?}
     */
    WfTaskHandlerService.prototype.complete = /**
     * @private
     * @param {?} task
     * @param {?} action
     * @return {?}
     */
    function (task, action) {
        var _this = this;
        /** @type {?} */
        var compFactory = this.resolver.resolveComponentFactory(TaskExecuteComponent);
        /** @type {?} */
        var compRef = compFactory.create(this.injector);
        compRef.instance.setTask(task);
        compRef.instance.setAction(action);
        compRef.instance.addPadding();
        /** @type {?} */
        var modalConfig = {
            title: action.name ? action.name : this.i18nService.getValue('task.title'),
            width: 550,
            height: compRef.instance.dialogHeight,
            showButtons: true,
            buttons: compRef.instance.buttons
        };
        /** @type {?} */
        var dialog = this.modalService.show(compRef, modalConfig);
        compRef.instance.getSubject().subscribe(function (re) {
            re && re.result && _this.subject.next(true);
            re && re.result && dialog.close();
        });
    };
    /**
     * 打开审批联查界面
     * @param entity 任务实体
     * @param action 动作实体
     */
    /**
     * 打开审批联查界面
     * @param {?} entity 任务实体
     * @param {?} action 动作实体
     * @return {?}
     */
    WfTaskHandlerService.prototype.openApp = /**
     * 打开审批联查界面
     * @param {?} entity 任务实体
     * @param {?} action 动作实体
     * @return {?}
     */
    function (entity, action) {
        var _this = this;
        /** @type {?} */
        var taskId = entity.sourceId;
        /** @type {?} */
        var getFormInfoLoading = this.loading.show();
        this.taskService.getAppInfo(taskId).subscribe(function (formInfo) {
            getFormInfoLoading.close();
            if (!formInfo) {
                _this.notify.info(_this.i18nService.getValue('task.notFoundBill'));
                return;
            }
            /** @type {?} */
            var options = {
                appType: 'menu',
                funcId: '',
                appId: '',
                appEntrance: '',
                tabId: taskId,
                isNewTab: true
            };
            // 传工作流上下文参数
            /** @type {?} */
            var parameters = new Map();
            // 功能菜单情况
            if (formInfo.appId) {
                // 默认联查审批界面
                if (formInfo.formType === '1') { //表单嵌流程
                    parameters.set('workItemId', taskId);
                    parameters.set('procInstId', action.parameters[0].value);
                    parameters.set('taskState', entity.state);
                    parameters.set('isAssign', entity.actions.some(function (action) { return action.code === 'AssignUser'; }));
                    formInfo.parameters.forEach(function (item) {
                        return parameters.set(item.code, item.value);
                    });
                    options.funcId = formInfo.appId;
                }
                else { //流程嵌表单
                    options.funcId = 'WF0120';
                    parameters.set('taskId', entity.id);
                    parameters.set('taskState', entity.state);
                }
            }
            else if (formInfo.url) { //表单格式
                options.funcId = 'WF0120';
                parameters.set('taskId', entity.id);
                parameters.set('taskState', entity.state);
            }
            else {
                _this.notify.info(_this.i18nService.getValue('task.notFoundBill'));
                return;
            }
            options.entityParams = parameters;
            options.queryStringParams = parameters; //兼容IDP表单
            //兼容IDP表单
            /** @type {?} */
            var openMenuLoading = _this.loading.show();
            _this.frameworkService.openMenu$(options).subscribe(function () {
                openMenuLoading.close();
            });
        }, function (error) {
            getFormInfoLoading.close();
            _this.taskService.error(error);
        });
    };
    /**
     * 返回动作列表，表单嵌流程用到
     * @param workItemId
     */
    /**
     * 返回动作列表，表单嵌流程用到
     * @param {?} workItemId
     * @return {?}
     */
    WfTaskHandlerService.prototype.refreshActions = /**
     * 返回动作列表，表单嵌流程用到
     * @param {?} workItemId
     * @return {?}
     */
    function (workItemId) {
        return this.taskService.getWorkItemActions(workItemId).pipe(switchMap(function (actionList) {
            return of(actionList.filter(function (action) {
                return action.code !== 'ViewBizLog' &&
                    action.code !== 'ViewFlowChart' &&
                    action.code !== 'ViewExecuteForm';
            }));
        }));
    };
    /**
     * 根据流程实例ID和动作Code办理任务（暂未用到 by fangpengfei@2020.06.22）
     * @param procInstId 流程实例ID
     * @param state 任务状态
     * @param actionCode 动作Code
     */
    /**
     * 根据流程实例ID和动作Code办理任务（暂未用到 by fangpengfei\@2020.06.22）
     * @param {?} procInstId 流程实例ID
     * @param {?} state 任务状态
     * @param {?} actionCode 动作Code
     * @return {?}
     */
    WfTaskHandlerService.prototype.executeByProcInstId = /**
     * 根据流程实例ID和动作Code办理任务（暂未用到 by fangpengfei\@2020.06.22）
     * @param {?} procInstId 流程实例ID
     * @param {?} state 任务状态
     * @param {?} actionCode 动作Code
     * @return {?}
     */
    function (procInstId, state, actionCode) {
        var _this = this;
        /** @type {?} */
        var action = new TaskAction();
        action.code = actionCode;
        /** @type {?} */
        var subject = new Subject();
        this.taskService.getTaskByProcInstId(procInstId, state).subscribe(function (task) {
            if (task) {
                _this.execute(task, action).subscribe(function (re) {
                    subject.next(re);
                });
            }
            else {
                _this.notify.info(_this.i18nService.getValue('task.noTask'));
            }
        });
        return subject.asObservable();
    };
    /**
     * 根据workItemId 办理任务
     * @param workItemId 工作项ID
     * @param action 动作实体
     */
    /**
     * 根据workItemId 办理任务
     * @param {?} workItemId 工作项ID
     * @param {?} action 动作实体
     * @return {?}
     */
    WfTaskHandlerService.prototype.executeByWorkItemId = /**
     * 根据workItemId 办理任务
     * @param {?} workItemId 工作项ID
     * @param {?} action 动作实体
     * @return {?}
     */
    function (workItemId, action) {
        /** @type {?} */
        var task = new TaskEntity();
        task.sourceId = workItemId;
        return this.execute(task, action);
    };
    /**
     * 提交审批
     * @param payload 上下文参数
     * @returns subject true：提交成功，false：提交失败
     */
    /**
     * 提交审批
     * @param {?} payload 上下文参数
     * @return {?} subject true：提交成功，false：提交失败
     */
    WfTaskHandlerService.prototype.startProcess = /**
     * 提交审批
     * @param {?} payload 上下文参数
     * @return {?} subject true：提交成功，false：提交失败
     */
    function (payload) {
        var _this = this;
        /** @type {?} */
        var subject = new Subject();
        /** @type {?} */
        var configLoad = this.loading.show();
        this.taskService.getTaskCenterConfigByCode(ConfigCode.If_Show_Submit_Dialog, OwnerType.BizDefKey, payload.bizDefKey).subscribe(function (re) {
            configLoad.close();
            if (re && re.currentValue === 'false') { //自定义无需弹框
                //自定义无需弹框
                /** @type {?} */
                var simulateLoad_1 = _this.loading.show();
                _this.taskService.startProcessSimulate(payload).subscribe(function (response) {
                    simulateLoad_1.close();
                    if (!response || response.needInteraction === false) { //预解析无需交互
                        //预解析无需交互
                        /** @type {?} */
                        var executeLoad_1 = _this.loading.show();
                        _this.taskService.startProcess(payload).subscribe(function (response) {
                            executeLoad_1.close();
                            subject.next(response);
                            _this.handleSubmitMessage(ConfigCode.Info_After_Submit, payload.bizDefKey);
                        }, function (error) {
                            executeLoad_1.close();
                            subject.next(null);
                            _this.taskService.error(error);
                        });
                    }
                    else { //预解析需要交互
                        _this.showStartProcessDialog(payload).subscribe(function (re) {
                            subject.next(re);
                        });
                    }
                }, function (error) {
                    simulateLoad_1.close();
                    subject.next(null);
                    _this.taskService.error(error);
                });
            }
            else { //无是否弹框配置
                _this.showStartProcessDialog(payload).subscribe(function (re) {
                    subject.next(re);
                });
            }
        }, function (error) {
            configLoad.close();
            _this.taskService.error(error);
        });
        return subject.asObservable();
    };
    /**
     * 提交审批弹框
     * @param payload 参数
     * @param withResponse 是否带返回值
     */
    /**
     * 提交审批弹框
     * @private
     * @param {?} payload 参数
     * @return {?}
     */
    WfTaskHandlerService.prototype.showStartProcessDialog = /**
     * 提交审批弹框
     * @private
     * @param {?} payload 参数
     * @return {?}
     */
    function (payload) {
        var _this = this;
        /** @type {?} */
        var subject = new Subject();
        /** @type {?} */
        var compFactory = this.resolver.resolveComponentFactory(ProcessSelectorComponent);
        /** @type {?} */
        var compRef = compFactory.create(this.injector);
        compRef.instance.setParam(payload).subscribe(function () {
            /** @type {?} */
            var modalConfig = {
                title: _this.i18nService.getValue('startProcess.title'),
                width: 520,
                height: 338,
                showButtons: true,
                buttons: compRef.instance.buttons
            };
            /** @type {?} */
            var dialog = _this.modalService.show(compRef, modalConfig);
            if (payload.withResponse === true) { //内部使用
                compRef.instance.getSubjectWithResponse().subscribe(function (re) {
                    subject.next(re);
                    dialog.close();
                });
                compRef.instance.getSubjectCancel().subscribe(function () {
                    dialog.close();
                });
            }
            else { //已有业务组调用
                compRef.instance.getSubject().subscribe(function (re) {
                    subject.next(re);
                    dialog.close();
                });
                compRef.instance.getSubjectCancel().subscribe(function (re) {
                    subject.next(re);
                    dialog.close();
                });
            }
        });
        return subject.asObservable();
    };
    /**
     * 取消提交
     * @payload payload 参数
     */
    /**
     * 取消提交
     * \@payload payload 参数
     * @param {?} payload
     * @return {?}
     */
    WfTaskHandlerService.prototype.cancelSubmit = /**
     * 取消提交
     * \@payload payload 参数
     * @param {?} payload
     * @return {?}
     */
    function (payload) {
        var _this = this;
        /** @type {?} */
        var subject = new Subject();
        /** @type {?} */
        var load = this.loading.show();
        this.taskService.cancelSubmit(payload).subscribe(function () {
            load.close();
            subject.next(true);
            _this.handleSubmitMessage(ConfigCode.Info_After_Cancel_Submit, payload.bizDefKey);
        }, function (error) {
            load.close();
            subject.error(false);
            _this.taskService.error(error);
        });
        return subject.asObservable();
    };
    /**
     * 提交审批
     * @param dataId 表单id
     * @param bizDefKey 入口单据id
     * @param options 自定义配置
     */
    /**
     * 提交审批
     * @param {?} dataId 表单id
     * @param {?} bizDefKey 入口单据id
     * @return {?}
     */
    WfTaskHandlerService.prototype.submitWithBizDefKey = /**
     * 提交审批
     * @param {?} dataId 表单id
     * @param {?} bizDefKey 入口单据id
     * @return {?}
     */
    function (dataId, bizDefKey) {
        if (!dataId) {
            this.notify.warning(this.i18nService.getValue('startProcess.dataIdIsNull'));
            return;
        }
        if (!bizDefKey) {
            this.message.error(this.i18nService.getValue('startProcess.bizDefKeyIsNull'));
            return;
        }
        /** @type {?} */
        var payload = new StartProcessPayload();
        payload.dataId = dataId;
        payload.bizDefKey = bizDefKey;
        payload.withResponse = true;
        return this.startProcess(payload);
    };
    /**
     * 取消提交审批
     * @param dataId 表单id
     * @param bizDefKey 入口单据id
     * @param options 自定义配置
     */
    /**
     * 取消提交审批
     * @param {?} dataId 表单id
     * @param {?} bizDefKey 入口单据id
     * @return {?}
     */
    WfTaskHandlerService.prototype.cancelSubmitWithDataId = /**
     * 取消提交审批
     * @param {?} dataId 表单id
     * @param {?} bizDefKey 入口单据id
     * @return {?}
     */
    function (dataId, bizDefKey) {
        if (!dataId) {
            this.notify.warning(this.i18nService.getValue('startProcess.dataIdIsNull'));
            return;
        }
        if (!bizDefKey) {
            this.message.error(this.i18nService.getValue('startProcess.bizDefKeyIsNull'));
            return;
        }
        /** @type {?} */
        var cancelSubmitPayload = new CancelSubmitPayload();
        cancelSubmitPayload.dataId = dataId;
        cancelSubmitPayload.bizDefKey = bizDefKey;
        return this.cancelSubmit(cancelSubmitPayload);
    };
    /**
     * 批量提交审批
     * @param dataIds 表单ID集合
     * @param bizDefKey 入口单据id
     */
    /**
     * 批量提交审批
     * @param {?} dataIds 表单ID集合
     * @param {?} bizDefKey 入口单据id
     * @return {?}
     */
    WfTaskHandlerService.prototype.batchSubmitWithBizDefKey = /**
     * 批量提交审批
     * @param {?} dataIds 表单ID集合
     * @param {?} bizDefKey 入口单据id
     * @return {?}
     */
    function (dataIds, bizDefKey) {
        if (!dataIds || !dataIds.length) {
            this.notify.warning(this.i18nService.getValue('startProcess.dataIdIsEmpty'));
            return;
        }
        if (!bizDefKey) {
            this.message.error(this.i18nService.getValue('startProcess.bizDefKeyIsNull'));
            return;
        }
        if (dataIds.length === 1) {
            /** @type {?} */
            var startPayload = new StartProcessPayload();
            startPayload.bizDefKey = bizDefKey;
            startPayload.dataId = dataIds[0];
            return this.startProcess(startPayload);
        }
        /** @type {?} */
        var subject = new Subject();
        /** @type {?} */
        var load = this.loading.show();
        this.batchSubmitNum.successNum = 0;
        this.batchSubmitNum.failedNum = 0;
        this.batchSubmitNum.errorNum = 0;
        this.batchSubmitHelpFunction(tslib_1.__spread(dataIds), bizDefKey, function () {
            load.close();
            subject.next(true);
        });
        return subject.asObservable();
    };
    /**
     * 批量提交审批辅助函数
     */
    /**
     * 批量提交审批辅助函数
     * @private
     * @param {?} dataIds
     * @param {?} bizDefKey
     * @param {?} handler
     * @return {?}
     */
    WfTaskHandlerService.prototype.batchSubmitHelpFunction = /**
     * 批量提交审批辅助函数
     * @private
     * @param {?} dataIds
     * @param {?} bizDefKey
     * @param {?} handler
     * @return {?}
     */
    function (dataIds, bizDefKey, handler) {
        var _this = this;
        if (dataIds && dataIds.length > 0) {
            /** @type {?} */
            var dataId = dataIds.shift();
            //引用类型转换
            /** @type {?} */
            var startPayload_1 = new StartProcessPayload();
            startPayload_1.bizDefKey = bizDefKey;
            startPayload_1.dataId = dataId;
            startPayload_1.variables = { simulate: true };
            this.taskService.startProcess(startPayload_1).subscribe(function (response) {
                if (response.needInteraction) { //需要交互
                    _this.batchSubmitNum.failedNum++;
                    _this.batchSubmitHelpFunction(dataIds, bizDefKey, handler);
                }
                else { //不需要交互
                    startPayload_1.variables = { simulate: false };
                    _this.taskService.startProcess(startPayload_1).subscribe(function (response) {
                        _this.batchSubmitNum.successNum++;
                        _this.batchSubmitHelpFunction(dataIds, bizDefKey, handler);
                    }, function () {
                        _this.batchSubmitNum.errorNum++;
                        _this.batchSubmitHelpFunction(dataIds, bizDefKey, handler);
                    });
                }
            }, function () {
                _this.batchSubmitNum.errorNum++;
                _this.batchSubmitHelpFunction(dataIds, bizDefKey, handler);
            });
        }
        else { //批量执行完毕
            this.showBatchSubmitInfo(this.batchSubmitNum, bizDefKey);
            handler(); //执行回调函数
        }
    };
    /**
     * 批量取消提交审批
     * @param dataIds 表单ID集合
     * @param bizDefKey 入口单据id
     */
    /**
     * 批量取消提交审批
     * @param {?} dataIds 表单ID集合
     * @param {?} bizDefKey 入口单据id
     * @return {?}
     */
    WfTaskHandlerService.prototype.batchCancelSubmitWithDataId = /**
     * 批量取消提交审批
     * @param {?} dataIds 表单ID集合
     * @param {?} bizDefKey 入口单据id
     * @return {?}
     */
    function (dataIds, bizDefKey) {
        if (!dataIds || !dataIds.length) {
            this.notify.warning(this.i18nService.getValue('startProcess.dataIdIsEmpty'));
            return;
        }
        if (!bizDefKey) {
            this.message.error(this.i18nService.getValue('startProcess.bizDefKeyIsNull'));
            return;
        }
        if (dataIds.length === 1) {
            return this.cancelSubmitWithDataId(dataIds[0], bizDefKey);
        }
        /** @type {?} */
        var subject = new Subject();
        /** @type {?} */
        var load = this.loading.show();
        this.batchCancelNum.successNum = 0;
        this.batchCancelNum.errorNum = 0;
        this.batchCancelHelpFunction(tslib_1.__spread(dataIds), bizDefKey, function () {
            load.close();
            subject.next(true);
        });
        return subject.asObservable();
    };
    /**
     * 批量取消辅助函数
     */
    /**
     * 批量取消辅助函数
     * @private
     * @param {?} dataIds
     * @param {?} bizDefKey
     * @param {?} handler
     * @return {?}
     */
    WfTaskHandlerService.prototype.batchCancelHelpFunction = /**
     * 批量取消辅助函数
     * @private
     * @param {?} dataIds
     * @param {?} bizDefKey
     * @param {?} handler
     * @return {?}
     */
    function (dataIds, bizDefKey, handler) {
        var _this = this;
        if (dataIds && dataIds.length) {
            /** @type {?} */
            var dataId = dataIds.shift();
            //引用类型转换
            /** @type {?} */
            var cancelPayload = new CancelSubmitPayload();
            cancelPayload.dataId = dataId;
            cancelPayload.bizDefKey = bizDefKey;
            this.taskService.cancelSubmit(cancelPayload).subscribe(function () {
                _this.batchCancelNum.successNum++;
                _this.batchCancelHelpFunction(dataIds, bizDefKey, handler);
            }, function () {
                _this.batchCancelNum.errorNum++;
                _this.batchCancelHelpFunction(dataIds, bizDefKey, handler);
            });
        }
        else {
            this.showBatchCancelSubmitInfo(this.batchCancelNum, bizDefKey);
            handler();
        }
    };
    /**
     * 子表提交审批
     * @param parentDataId 主表id
     * @param childDataId 子表id
     * @param bizDefKey 入口单据id
     */
    /**
     * 子表提交审批
     * @param {?} parentDataId 主表id
     * @param {?} childDataId 子表id
     * @param {?} bizDefKey 入口单据id
     * @return {?}
     */
    WfTaskHandlerService.prototype.childSubmit = /**
     * 子表提交审批
     * @param {?} parentDataId 主表id
     * @param {?} childDataId 子表id
     * @param {?} bizDefKey 入口单据id
     * @return {?}
     */
    function (parentDataId, childDataId, bizDefKey) {
        if (!parentDataId || !childDataId) {
            this.notify.warning(this.i18nService.getValue('startProcess.dataIdIsNull'));
            return;
        }
        if (!bizDefKey) {
            this.message.error(this.i18nService.getValue('startProcess.bizDefKeyIsNull'));
            return;
        }
        /** @type {?} */
        var startProcessPayload = new StartProcessPayload();
        startProcessPayload.dataId = parentDataId + "," + childDataId;
        startProcessPayload.bizDefKey = bizDefKey;
        return this.startProcess(startProcessPayload);
    };
    /**
     * 子表取消提交审批
     * @param parentDataId 主表id
     * @param childDataId 子表id
     * @param bizDefKey 入口单据id
     */
    /**
     * 子表取消提交审批
     * @param {?} parentDataId 主表id
     * @param {?} childDataId 子表id
     * @param {?} bizDefKey 入口单据id
     * @return {?}
     */
    WfTaskHandlerService.prototype.childCancelSubmit = /**
     * 子表取消提交审批
     * @param {?} parentDataId 主表id
     * @param {?} childDataId 子表id
     * @param {?} bizDefKey 入口单据id
     * @return {?}
     */
    function (parentDataId, childDataId, bizDefKey) {
        if (!parentDataId || !childDataId) {
            this.notify.warning(this.i18nService.getValue('startProcess.dataIdIsNull'));
            return;
        }
        if (!bizDefKey) {
            this.message.error(this.i18nService.getValue('startProcess.bizDefKeyIsNull'));
            return;
        }
        /** @type {?} */
        var cancelSubmitPayload = new CancelSubmitPayload();
        cancelSubmitPayload.dataId = parentDataId + "," + childDataId;
        cancelSubmitPayload.bizDefKey = bizDefKey;
        return this.cancelSubmit(cancelSubmitPayload);
    };
    /**
     * 子表批量提交审批
     * @param parentDataId 主表id
     * @param childDataIds 子表id集合
     * @param bizDefKey 入口单据id
     */
    /**
     * 子表批量提交审批
     * @param {?} parentDataId 主表id
     * @param {?} childDataIds 子表id集合
     * @param {?} bizDefKey 入口单据id
     * @return {?}
     */
    WfTaskHandlerService.prototype.childBatchSubmit = /**
     * 子表批量提交审批
     * @param {?} parentDataId 主表id
     * @param {?} childDataIds 子表id集合
     * @param {?} bizDefKey 入口单据id
     * @return {?}
     */
    function (parentDataId, childDataIds, bizDefKey) {
        if (!parentDataId || !childDataIds) {
            this.notify.warning(this.i18nService.getValue('startProcess.dataIdIsNull'));
            return;
        }
        if (!bizDefKey) {
            this.message.error(this.i18nService.getValue('startProcess.bizDefKeyIsNull'));
            return;
        }
        /** @type {?} */
        var dataIds = childDataIds.map(function (childDataId) { return parentDataId + "," + childDataId; });
        return this.batchSubmitWithBizDefKey(dataIds, bizDefKey);
    };
    /**
     * 子表批量取消提交审批
     * @param parentDataId 主表id
     * @param childDataIds 子表id集合
     * @param bizDefKey 入口单据id
     */
    /**
     * 子表批量取消提交审批
     * @param {?} parentDataId 主表id
     * @param {?} childDataIds 子表id集合
     * @param {?} bizDefKey 入口单据id
     * @return {?}
     */
    WfTaskHandlerService.prototype.childBatchCancelSubmit = /**
     * 子表批量取消提交审批
     * @param {?} parentDataId 主表id
     * @param {?} childDataIds 子表id集合
     * @param {?} bizDefKey 入口单据id
     * @return {?}
     */
    function (parentDataId, childDataIds, bizDefKey) {
        if (!parentDataId || !childDataIds) {
            this.notify.warning(this.i18nService.getValue('startProcess.dataIdIsNull'));
            return;
        }
        if (!bizDefKey) {
            this.message.error(this.i18nService.getValue('startProcess.bizDefKeyIsNull'));
            return;
        }
        /** @type {?} */
        var dataIds = childDataIds.map(function (childDataId) { return parentDataId + "," + childDataId; });
        return this.batchCancelSubmitWithDataId(dataIds, bizDefKey);
    };
    /**
   * 批量提交提示信息
   * @param successNum 成功条数
   * @param failedNum 需要交互的条数
   * @param errorNum 执行报错的条数
   */
    /**
     * 批量提交提示信息
     * @private
     * @param {?} num
     * @param {?} bizDefKey
     * @return {?}
     */
    WfTaskHandlerService.prototype.showBatchSubmitInfo = /**
     * 批量提交提示信息
     * @private
     * @param {?} num
     * @param {?} bizDefKey
     * @return {?}
     */
    function (num, bizDefKey) {
        var _this = this;
        if (num.successNum && !num.failedNum && !num.errorNum) { //批量全部成功
            this.taskService.getTaskCenterConfigByCode(ConfigCode.Info_After_Submit, OwnerType.BizDefKey, bizDefKey).subscribe(function (config) {
                if (_this.curLanguage === 'en') {
                    _this.notify.success(JSON.parse(config.currentValue).en);
                }
                if (_this.curLanguage === 'zh-CHS') {
                    _this.notify.success(JSON.parse(config.currentValue).zh_CHS);
                }
            });
        }
        else { //非全部成功
            //非全部成功
            /** @type {?} */
            var message = '';
            num.successNum && (message += this.i18nService.getValue('batchStartProcess.success') + ("\u3010" + num.successNum + "\u3011") + this.i18nService.getValue('batchStartProcess.row'));
            num.errorNum && (message += this.i18nService.getValue('batchStartProcess.error') + ("\u3010" + num.errorNum + "\u3011") + this.i18nService.getValue('batchStartProcess.row'));
            num.failedNum && (message += this.i18nService.getValue('batchStartProcess.failed') + ("\u3010" + num.failedNum + "\u3011") + this.i18nService.getValue('batchStartProcess.row'));
            message += this.i18nService.getValue('batchStartProcess.single');
            this.message.show('warning', message, { safeHtml: false });
        }
    };
    /**
     * 批量取消提交提示信息
     */
    /**
     * 批量取消提交提示信息
     * @private
     * @param {?} num
     * @param {?} bizDefKey
     * @return {?}
     */
    WfTaskHandlerService.prototype.showBatchCancelSubmitInfo = /**
     * 批量取消提交提示信息
     * @private
     * @param {?} num
     * @param {?} bizDefKey
     * @return {?}
     */
    function (num, bizDefKey) {
        var _this = this;
        if (num.successNum && !num.errorNum) { //批量全部成功
            this.taskService.getTaskCenterConfigByCode(ConfigCode.Info_After_Cancel_Submit, OwnerType.BizDefKey, bizDefKey).subscribe(function (config) {
                if (_this.curLanguage === 'en') {
                    _this.notify.success(JSON.parse(config.currentValue).en);
                }
                if (_this.curLanguage === 'zh-CHS') {
                    _this.notify.success(JSON.parse(config.currentValue).zh_CHS);
                }
            });
        }
        else {
            /** @type {?} */
            var message = '';
            num.successNum && (message += this.i18nService.getValue('startProcess.success') + ("\u3010" + num.successNum + "\u3011") + this.i18nService.getValue('startProcess.row'));
            num.errorNum && (message += this.i18nService.getValue('startProcess.failed') + ("\u3010" + num.errorNum + "\u3011") + this.i18nService.getValue('startProcess.row'));
            this.message.show('warning', message, { safeHtml: false });
        }
    };
    /**
     * @param {?} code
     * @param {?} ownerId
     * @return {?}
     */
    WfTaskHandlerService.prototype.handleSubmitMessage = /**
     * @param {?} code
     * @param {?} ownerId
     * @return {?}
     */
    function (code, ownerId) {
        var _this = this;
        /** @type {?} */
        var load = this.loading.show();
        this.taskService.getTaskCenterConfigByCode(code, OwnerType.BizDefKey, ownerId).subscribe(function (re) {
            load.close();
            if (re && re.currentValue) {
                /** @type {?} */
                var message = '';
                /** @type {?} */
                var currentValue = JSON.parse(re.currentValue);
                _this.curLanguage === 'zh-CHS' && (message = currentValue.zh_CHS);
                _this.curLanguage === 'en' && (message = currentValue.en);
                _this.curLanguage === 'zh-CHT' && (message = currentValue.zh_CHT);
                _this.notify.success(message);
            }
            else {
                code === ConfigCode.Info_After_Submit && _this.notify.success(_this.i18nService.getValue('startProcess.submitSuccess'));
                code === ConfigCode.Info_After_Cancel_Submit && _this.notify.success(_this.i18nService.getValue('startProcess.cancelSubmitSuccess'));
            }
        }, function (error) {
            load.close();
            _this.taskService.error(error);
        });
    };
    /**
     * 表单上触发流程预解析操作
     * 已封装为表单的命令操作
     */
    /**
     * 表单上触发流程预解析操作
     * 已封装为表单的命令操作
     * @return {?}
     */
    WfTaskHandlerService.prototype.processSimulate = /**
     * 表单上触发流程预解析操作
     * 已封装为表单的命令操作
     * @return {?}
     */
    function () {
        /** @type {?} */
        var subject = new Subject();
        /** @type {?} */
        var gspWfEventService = ((/** @type {?} */ (window))).parent.gspWfEventService;
        gspWfEventService.simulate(function () {
            subject.next(true);
        });
        return subject.asObservable();
    };
    /**
     * 根据单据id查看流程图
     * 已封装为表单命令和操作
     */
    /**
     * 根据单据id查看流程图
     * 已封装为表单命令和操作
     * @param {?} dataId
     * @return {?}
     */
    WfTaskHandlerService.prototype.viewFlowChartByDataId = /**
     * 根据单据id查看流程图
     * 已封装为表单命令和操作
     * @param {?} dataId
     * @return {?}
     */
    function (dataId) {
        if (dataId) {
            this.flowchartService.viewFlowChartByDataId(dataId);
        }
        else {
            console.error("查看流程图，表单id为空");
        }
    };
    /**
     * 查看流程图（新，支持预览）
     * 已封装为表单命令和操作
     * @param bizDefKey 流程分类id
     * @param dataId 表单数据id
     */
    /**
     * 查看流程图（新，支持预览）
     * 已封装为表单命令和操作
     * @param {?} bizDefKey 流程分类id
     * @param {?} dataId 表单数据id
     * @return {?}
     */
    WfTaskHandlerService.prototype.viewFlowChartWithForecast = /**
     * 查看流程图（新，支持预览）
     * 已封装为表单命令和操作
     * @param {?} bizDefKey 流程分类id
     * @param {?} dataId 表单数据id
     * @return {?}
     */
    function (bizDefKey, dataId) {
        /** @type {?} */
        var payload = new ForecastProcessPayload();
        payload.bizDefKey = bizDefKey;
        payload.dataId = dataId;
        this.flowchartService.viewProcess(payload);
    };
    WfTaskHandlerService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    WfTaskHandlerService.ctorParameters = function () { return [
        { type: WfApprovalLogsService },
        { type: WFFlowchartService },
        { type: Injector },
        { type: ComponentFactoryResolver },
        { type: BsModalService },
        { type: TaskService },
        { type: NotifyService },
        { type: I18nService },
        { type: FrameworkService },
        { type: ApplicationRef }
    ]; };
    return WfTaskHandlerService;
}());
export { WfTaskHandlerService };
if (false) {
    /** @type {?} */
    WfTaskHandlerService.prototype.subject;
    /**
     * @type {?}
     * @private
     */
    WfTaskHandlerService.prototype.loading;
    /**
     * @type {?}
     * @private
     */
    WfTaskHandlerService.prototype.message;
    /**
     * @type {?}
     * @private
     */
    WfTaskHandlerService.prototype.curLanguage;
    /**
     * @type {?}
     * @private
     */
    WfTaskHandlerService.prototype.batchSubmitNum;
    /**
     * @type {?}
     * @private
     */
    WfTaskHandlerService.prototype.batchCancelNum;
    /**
     * @type {?}
     * @private
     */
    WfTaskHandlerService.prototype.logService;
    /**
     * @type {?}
     * @private
     */
    WfTaskHandlerService.prototype.flowchartService;
    /**
     * @type {?}
     * @private
     */
    WfTaskHandlerService.prototype.injector;
    /**
     * @type {?}
     * @private
     */
    WfTaskHandlerService.prototype.resolver;
    /**
     * @type {?}
     * @private
     */
    WfTaskHandlerService.prototype.modalService;
    /**
     * @type {?}
     * @private
     */
    WfTaskHandlerService.prototype.taskService;
    /**
     * @type {?}
     * @private
     */
    WfTaskHandlerService.prototype.notify;
    /**
     * @type {?}
     * @private
     */
    WfTaskHandlerService.prototype.i18nService;
    /**
     * @type {?}
     * @private
     */
    WfTaskHandlerService.prototype.frameworkService;
    /**
     * @type {?}
     * @private
     */
    WfTaskHandlerService.prototype.appRef;
}
//# sourceMappingURL=data:application/json;base64,