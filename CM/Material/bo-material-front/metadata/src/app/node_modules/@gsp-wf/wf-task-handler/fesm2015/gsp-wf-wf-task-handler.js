import { BsModalService } from '@farris/ui-modal';
import { CommonModule } from '@angular/common';
import { PaginationModule } from '@farris/ui-pagination';
import { ComboListModule } from '@farris/ui-combo-list';
import { InputGroupModule } from '@farris/ui-input-group';
import { FarrisFormsModule } from '@farris/ui-forms';
import { SwitchModule } from '@farris/ui-switch';
import { WfApprovalLogsService, WfApprovalLogsModule } from '@gsp-wf/wf-approval-logs';
import { ForecastProcessPayload, WFFlowchartService, UiFlowchartModule } from '@gsp-wf/ui-flowchart';
import { ActionBaseImplComponent, ActionOrigin, TaskImplApiModule } from '@gsp-wf/task-impl-api';
import { FrameworkService, CommonSharedModule, FrmEventBus, FuncsService } from '@gsp-sys/rtf-common';
import { DataTableModule } from '@farris/ui-datatable';
import { SysFarrisLookupComponent, SysManagerUIModule } from '@gsp-sys/sysmgr-ui';
import { switchMap, throttleTime } from 'rxjs/operators';
import { Injectable, Component, Input, ViewChild, HostBinding, Injector, ChangeDetectorRef, ComponentFactoryResolver, ApplicationRef, Pipe, Optional, Output, EventEmitter, ElementRef, Directive, HostListener, forwardRef, NgModule } from '@angular/core';
import { FarrisDialogModule } from '@farris/ui-dialog';
import { NG_VALUE_ACCESSOR, FormsModule } from '@angular/forms';
import { FDropdownDirectiveTypeModule } from '@farris/ui-dropdown';
import { UploadDialogService } from '@gsp-svc/formdoc-upload';
import { MessagerService, MessagerModule } from '@farris/ui-messager';
import { WfSignModule } from '@gsp-wf/wf-sign';
import { AvatarModule } from '@farris/ui-avatar';
import { DownloadService } from '@gsp-svc/file-load';
import { forkJoin, BehaviorSubject, Subject, of } from 'rxjs';
import { HttpService, SessionService, CacheService } from '@ecp-caf/caf-common';
import { DatagridModule } from '@farris/ui-datagrid';
import { EditorTypes, DatagridEditorsModule, EditorProviders } from '@farris/ui-datagrid-editors';
import { LoadingService, LoadingModule } from '@farris/ui-loading';
import { NotifyService, NotifyModule } from '@farris/ui-notify';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class TaskService {
    /**
     * @param {?} httpSvc
     * @param {?} message
     */
    constructor(httpSvc, message) {
        this.httpSvc = httpSvc;
        this.message = message;
    }
    /**
     * @param {?} ids
     * @return {?}
     */
    getUsersByIds(ids) {
        /** @type {?} */
        var pathUrl = '/api/runtime/sys/v1.0/users';
        return forkJoin(ids.map(id => this.httpSvc.get(pathUrl + `/${id}` + `?mode=0002`)));
    }
    /**
     * 获取工作项操作列表
     * @param {?} workItemId
     * @return {?}
     */
    getWorkItemActions(workItemId) {
        /** @type {?} */
        const url = `/api/runtime/wf/v1.0/workItems/${workItemId}/actions`;
        return this.httpSvc.get(url);
    }
    /**
     * 执行审批操作
     * @param {?} context 执行审批上下文
     * @return {?}
     */
    complete(context) {
        /** @type {?} */
        const url = `/api/runtime/wf/v1.0/workItems/complete`;
        return this.httpSvc.post(url, context);
    }
    /**
     * 执行审批预解析
     * @param {?} context 执行审批上下文
     * @return {?}
     */
    completeSimulate(context) {
        /** @type {?} */
        const url = `/api/runtime/wf/v1.0/workItems/complete-simulation`;
        return this.httpSvc.post(url, context);
    }
    /**
     * 获取跳转活动信息
     * @param {?} workItemId 工作项Id
     * @param {?} action 动作编号
     * @return {?}
     */
    getDestinationScope(workItemId, action) {
        /** @type {?} */
        const url = `/api/runtime/wf/v1.0/workItems/${workItemId}/nextNodes/${action}`;
        return this.httpSvc.get(url);
    }
    /**
     * 根据节点ID获取指定参与者的结果
     * @param {?} workItemId
     * @param {?} nodeId 说明：nodeIds=["node1","node2",···]
     * @return {?} 指派信息的数组 re: FlowNodeInfo[]
     */
    getSimulationAssigneeInfo(workItemId, nodeId) {
        /** @type {?} */
        const url = `/api/runtime/wf/v1.0/workItems/${workItemId}/simulation-assigneeInfo?nodeIds=[${nodeId}]`;
        return this.httpSvc.get(url);
    }
    /**
     * 执行征询、知会
     * @param {?} context 上下文
     * @return {?}
     */
    addSign(context) {
        /** @type {?} */
        const url = `/api/runtime/wf/v1.0/workItems/counterSignAdd`;
        return this.httpSvc.post(url, context);
    }
    /**
     * 已阅
     * @param {?} context 参数
     * @return {?}
     */
    readTask(context) {
        /** @type {?} */
        const url = `/api/runtime/wf/v1.0/workItems/read`;
        return this.httpSvc.post(url, context);
    }
    /**
     * 查询单据信息
     * @param {?} workItemId 工作项Id
     * @return {?}
     */
    getAppInfo(workItemId) {
        /** @type {?} */
        const formParUrl = `/api/runtime/wf/v1.0/workItems/${workItemId}/formInfo`;
        return this.httpSvc.get(formParUrl);
    }
    /**
     * 获取指派信息
     * @param {?} taskId 工作项Id
     * 此接口只返回一个AssignInfo类序列化后的信息，不是多个
     * @return {?}
     */
    getAssigneeInfo(taskId) {
        /** @type {?} */
        const url = `/api/runtime/wf/v1.0/workItems/${taskId}/assigneeInfo`;
        return this.httpSvc.get(url);
    }
    /**
     * 获取加签移交范围设置
     * @param {?} workItemId
     * @param {?} actionCode
     * @return {?}
     */
    getOrganizationScope(workItemId, actionCode) {
        /** @type {?} */
        const url = `/api/runtime/wf/v1.0/workItems/${workItemId}/organizationScope/${actionCode}`;
        return this.httpSvc.get(url);
    }
    /**
     * 根据流程实例ID和任务状态办理任务
     * @param {?} procInstId 流程实例id
     * @param {?} state 任务状态 2或5
     * @return {?}
     */
    getTaskByProcInstId(procInstId, state) {
        /** @type {?} */
        const url = `/api/runtime/task/v1.0/tasks/processInstanceId?procInstId=${procInstId}&state=${state}`;
        return this.httpSvc.get(url);
    }
    /**
     * 根据workitemID获取任务实体
     * @param {?} workItemId
     * @return {?}
     */
    getTaskByWorkItemId(workItemId) {
        /** @type {?} */
        const url = `/api/runtime/task/v1.0/tasks/sourceId/${workItemId}`;
        return this.httpSvc.get(url);
    }
    /**
     * 根据工作项ID指派任务
     * @param {?} assigneesPa 指派参数
     * @return {?}
     */
    assignNextUsersByWorkItemId(assigneesPa) {
        /** @type {?} */
        const url = `/api/runtime/wf/v1.0/workItems/assignUser`;
        return this.httpSvc.post(url, assigneesPa);
    }
    /**
     * 取回
     * @param {?} context
     * @return {?}
     */
    retrieve(context) {
        /** @type {?} */
        const url = `/api/runtime/wf/v1.0/workItems/retrieve`;
        return this.httpSvc.post(url, context);
    }
    /**
     * 任务移交
     * @param {?} transferContext
     * @return {?}
     */
    transfer(transferContext) {
        /** @type {?} */
        const url = `/api/runtime/wf/v1.0/workItems/transfer`;
        return this.httpSvc.post(url, transferContext);
    }
    /**
     * 任务评论
     * @param {?} commentContext
     * @return {?}
     */
    comment(commentContext) {
        /** @type {?} */
        const url = `/api/runtime/wf/v1.0/workItems/comment`;
        return this.httpSvc.post(url, commentContext);
    }
    /**
     * 领用任务
     * @param {?} taskId 工作项Id
     * @param {?} comment
     * @return {?}
     */
    claim(taskId, comment) {
        /** @type {?} */
        const url = `/api/runtime/wf/v1.0/workItems/claim`;
        /** @type {?} */
        const options = {
            workItemId: taskId,
            comment: comment
        };
        return this.httpSvc.post(url, options);
    }
    /**
     * 取消领用
     * @param {?} taskId 任务Id
     * @param {?} comment
     * @return {?}
     */
    unClaim(taskId, comment) {
        /** @type {?} */
        const url = `/api/runtime/wf/v1.0/workItems/unclaim`;
        /** @type {?} */
        const options = {
            workItemId: taskId,
            comment: comment
        };
        return this.httpSvc.post(url, options);
    }
    /**
     * 报错提示
     * @param {?} error
     * @return {?}
     */
    error(error) {
        if (error && error.error && error.error.Message) {
            /** @type {?} */
            var message = error.error.Message;
            this.message.warning(message);
        }
    }
    /**
     * 启动流程接口
     * @param {?} payload API所需的上下文参数
     * @return {?}
     */
    startProcess(payload) {
        /** @type {?} */
        const url = `/api/runtime/wf/v1.0/processInstances/startProcess`;
        return this.httpSvc.post(url, payload);
    }
    /**
     * 启动流程预解析
     * @param {?} payload API所需的上下文参数
     * @return {?}
     */
    startProcessSimulate(payload) {
        /** @type {?} */
        const url = `/api/runtime/wf/v1.0/processInstances/startProcess-simulation`;
        return this.httpSvc.post(url, payload);
    }
    /**
     * 取消提交
     * @param {?} param 参数
     * @return {?}
     */
    cancelSubmit(param) {
        /** @type {?} */
        const url = `/api/runtime/wf/v1.0/processInstances/cancelSubmit`;
        return this.httpSvc.post(url, param);
    }
    /**
     * @return {?}
     */
    static newId() {
        /** @type {?} */
        const S4 = () => (((1 + Math.random()) * 0x10000) | 0).toString(16).substring(1);
        return (S4() + S4() + '-' + S4() + '-' + S4() + '-' + S4() + '-' + S4() + S4() + S4());
    }
    /**
     * @return {?}
     */
    getCommentList() {
        /** @type {?} */
        const url = `/api/runtime/wf/v1.0/commonComments`;
        return this.httpSvc.get(url);
    }
    /**
     * @return {?}
     */
    addComment() {
        /** @type {?} */
        const url = `/api/runtime/wf/v1.0/commonComments`;
        return this.httpSvc.post(url, {});
    }
    /**
     * 获取任务中心配置项
     * @param {?} code 配置项的Code
     * @param {?=} ownerType
     * @param {?=} ownerId
     * @return {?}
     */
    getTaskCenterConfigByCode(code, ownerType, ownerId) {
        /** @type {?} */
        let url = `/api/runtime/task/v1.0/task-center-setting/code?code=${code}`;
        ownerType && (url += `&ownerType=${ownerType}`);
        ownerId && (url += `&ownerId=${ownerId}`);
        return this.httpSvc.get(url);
    }
    /**
     * 添加用户级别自定义配置
     * @param {?} code 配置项编号
     * @param {?} currentValue
     * @return {?}
     */
    addTaskCenterConfig(code, currentValue) {
        /** @type {?} */
        let url = `/api/runtime/task/v1.0/task-center-setting/add?configCode=${code}&currentValue=${currentValue}`;
        return this.httpSvc.post(url, null);
    }
    /**
     * 获取全部用户级别配置
     * @return {?}
     */
    getAllUserConfig() {
        /** @type {?} */
        let url = `/api/runtime/task/v1.0/task-center-setting/all`;
        return this.httpSvc.get(url);
    }
    /**
     * 真正上传附件
     * @param {?} files
     * @return {?}
     */
    uploadAttachment(files) {
        /** @type {?} */
        let url = `/api/runtime/dfs/v1.0/doc/commit`;
        return this.httpSvc.put(url, files);
    }
    /**
     * 删除附件
     * @param {?} fileDeleteEntity
     * @return {?}
     */
    deleteAttachment(fileDeleteEntity) {
        /** @type {?} */
        let url = `/api/runtime/dfs/v1.0/doc`;
        return this.httpSvc.delete(url, fileDeleteEntity);
    }
    /**
     * 签名图片，附件相关
     * @param {?} gspDocUploadEntity
     * @return {?}
     */
    uploadSignature(gspDocUploadEntity) {
        /** @type {?} */
        let url = `/api/runtime/dfs/v1.0/doc`;
        /** @type {?} */
        let header = this.httpSvc.setHeader({
            body: gspDocUploadEntity,
            responseType: 'text'
        });
        return this.httpSvc.request('Post', url, header);
    }
    /**
     * 创建内码
     * @return {?}
     */
    createNM() {
        return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {
            /** @type {?} */
            const r = Math.random() * 16 | 0;
            /** @type {?} */
            const v = c === 'x' ? r : (r & 0x3 | 0x8);
            return v.toString(16);
        });
    }
    /**
     * 获取当前用户信息
     * @return {?}
     */
    getUserInfo() {
        /** @type {?} */
        let url = `/api/runtime/sys/v1.0/userinfos?infoType=user`;
        return this.httpSvc.get(url);
    }
    /**
     * 获取用户所有签名
     * @param {?} userId
     * @return {?}
     */
    getUserSign(userId) {
        /** @type {?} */
        let url = `/api/runtime/dfs/v1.0/formdoc/fileinfo/form?formid=${userId}&rootid=taskcentersignature`;
        return this.httpSvc.get(url);
    }
    /**
     * 解析文件类型，给出缩略图
     * @param {?} attachmentInfo
     * @return {?}
     */
    createItem(attachmentInfo) {
        /** @type {?} */
        var pos = attachmentInfo.fileName.lastIndexOf(".");
        /** @type {?} */
        var type = attachmentInfo.fileName.substring(pos + 1);
        type = (type == '' ? 'Default' : type.toLowerCase());
        /** @type {?} */
        var docLib = 'doc-docx-htm-html-js-pdf-ppt-pptx-rar-zip-txt-xls-xlsx';
        /** @type {?} */
        var videoLib = 'wav-aif-aiff-au-mp1-mp2-mp3-ra-rm-ram-mid-rmi';
        /** @type {?} */
        var audioLib = 'avi-rm-rmvb-mpeg-mpg-dat-mov-qt-asf-wm-mp4';
        /** @type {?} */
        var imgLib = 'webp-baibmp-dupcx-tif-gif-jpeg-tga-exif-fpx-svg-psd-cdr-pcd-dxf-ufo-eps-ai-png-hdri-raw-wmf-flic-emf-ico-jpg';
        if (docLib.indexOf(type) >= 0) {
            type = type.toLowerCase();
        }
        else if (videoLib.indexOf(type) >= 0) {
            type = 'video';
        }
        else if (audioLib.indexOf(type) >= 0) {
            type = 'audio';
        }
        else if (imgLib.indexOf(type) >= 0) {
            type = 'picture';
        }
        else {
            type = 'default';
        }
        return type;
    }
    /**
     * 注册主题，并获取当前主题唯一标识token
     * @param {?} subjectCode 主题编码，非唯一标识，token为唯一标识
     * @param {?} token 主题唯一标识。
     * @return {?} 主题的唯一标识。
     */
    subjectRegister(subjectCode, token) {
        return ((/** @type {?} */ (window))).gspframeworkService.rtf.broadcast.subjectRegister(subjectCode, { funcId: token });
    }
    /**
     * 通过某个token发送消息
     * @param {?} subjectToken 主题唯一的token标识
     * @param {?} message 要发送的消息
     * @return {?}
     */
    subjectNotify(subjectToken, message) {
        ((/** @type {?} */ (window))).gspframeworkService.rtf.broadcast.notify(subjectToken, message);
    }
    /**
     * 添加观察者，并监听消息
     * @param {?} subjectToken 主题token
     * @param {?} observerToken 当前监听主题的观察者唯一标识token。此处固定
     * @param {?} handler 监听到消息后执行的动作
     * @return {?}
     */
    subjectResponse(subjectToken, observerToken, handler) {
        ((/** @type {?} */ (window))).gspframeworkService.rtf.broadcast.response(subjectToken, observerToken, handler);
    }
    /**
     * 获取催办模拟结果
     * @param {?} context 参数
     * @return {?}
     */
    urgeHandleSimulate(context) {
        /** @type {?} */
        let url = `/api/runtime/wf/v1.0/processInstances/getUrgeHandleInfo`;
        return this.httpSvc.post(url, context);
    }
    /**
     * 执行催办
     * @param {?} context 参数
     * @return {?}
     */
    urgeHandle(context) {
        /** @type {?} */
        let url = `/api/runtime/wf/v1.0/processInstances/urgeHandle`;
        return this.httpSvc.post(url, context);
    }
    /**
     * 批量数字签名
     * @param {?} context 参数
     * @return {?}
     */
    batchVerifySigned(context) {
        /** @type {?} */
        const url = `/api/runtime/wf/v1.0/workItems/batchVerifySigned`;
        return this.httpSvc.post(url, context);
    }
    /**
     * 获取用户帮助前端配置
     * @return {?}
     */
    getWfUserHelpConfig() {
        /** @type {?} */
        const url = `/platform/runtime/wf/web/wf-user-help/config.json?v=` + new Date().getTime();
        return this.httpSvc.get(url);
    }
    /**
     * 获取加签配置
     * @param {?} workItemId
     * @return {?}
     */
    getAdhocConfig(workItemId) {
        /** @type {?} */
        let url = `/api/runtime/wf/v1.0/workItems/${workItemId}/adhocConfig/AddSignBehind`;
        return this.httpSvc.get(url);
    }
    /**
     * 加签提交
     * @param {?} payload
     * @return {?}
     */
    adhocAssignee(payload) {
        /** @type {?} */
        let url = `/api/runtime/wf/v1.0/workItems/adhocAssignee`;
        return this.httpSvc.post(url, payload);
    }
    /**
     * 取消征询
     * @param {?} payload
     * @return {?}
     */
    cancelConsult(payload) {
        /** @type {?} */
        let url = `/api/runtime/wf/v1.0/workItems/cancelConsult`;
        return this.httpSvc.post(url, payload);
    }
}
TaskService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
TaskService.ctorParameters = () => [
    { type: HttpService },
    { type: MessagerService }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * 任务动作定义
 */
class TaskActionDef {
}
/**
 * 任务动作定义
 */
class TaskAction extends TaskActionDef {
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
const en = {
    static: {
        assignee: {
            title: 'Select Operator',
            noAssignee: 'Please select at least one approver.',
            successAssign: 'Operate successfully.',
        },
        transfer: {
            title: 'Select transfer person',
            selectHandover: 'Please select transfer persons.',
            successTransfer: 'Transfer successfully.'
        },
        comment: {
            successComment: 'Comment success.'
        },
        columnName: {
            name: 'Name',
            code: 'Code',
            department: 'Department',
        },
        title: 'Approval confirmation',
        inputLabel: 'Approval comments',
        inputHolder: 'Please enter an approval opinion',
        selectActivity: 'Please select approve note',
        addSignee: 'Add signee',
        footOk: 'OK',
        footCancel: 'Cancel',
        selectUser: 'Select User',
        hideComment: 'Hide comment',
    },
    cueWords: {
        successClaim: 'Claim successfully.',
        successUnClaim: 'Cancel to claim successfully.',
        successRetrieve: 'Retrieve successfully.',
        successPass: 'Approved successfully.',
        successBack: 'Dismissed successfully.',
        successRefuse: 'Veto successfully.',
        success: 'Operate successfully.',
        inputOpinion: 'Please input your opinion',
        selectNode: 'Please select target nodes',
        select: 'Please select',
        processor: 'processor',
        attachmentsRequired: 'Please upload the attachment',
        assignUser: 'Assign user'
    },
    task: {
        selectPlaceholder: 'Please select',
        passComment: 'Pass',
        processAlone: 'Please handle it separately',
        urgeText: 'Receiver',
        backNodeText: 'Back node',
        selectProcessor: 'Please select the user',
        notFoundBill: 'This document cannot be processed on the computer. Please try to process it on the mobile terminal',
        nextNodeText: 'Next node',
        assignText: 'Assign to',
        noUser: 'No one',
        title: 'Handle Task',
        noTask: 'There is no task.',
        commentTooLong: 'Comment is too long',
        activityName: 'processor',
        receiver: 'receiver',
        urgeComment: "Please input your comment",
        noUrgeUsers: "There is no user to urge handle",
        noUrgeSubject: "no urge subject",
        noUrgeContent: "no urge content",
        person: " people",
        addSign: "Add sign",
    },
    startProcess: {
        selectProcess: 'Please select process',
        title: 'Select process',
        selectNode: 'Please select next node',
        submitSuccess: 'Start process successfully',
        submitFailed: 'Start process failed',
        cancelSubmitSuccess: 'Cancel submit successfully',
        cancelSubmitFailed: 'Cancel submit failed',
        dataIdIsNull: 'Please select a data',
        dataIdIsEmpty: 'Please select a data',
        bizDefKeyIsNull: 'Biz definition key is null',
        success: 'Success',
        row: '',
        failed: ', failed',
        node: 'node, ',
        noUser: 'no suitable handler was found'
    },
    batchSubmit: {
        row: '',
        success: 'Success',
        error: 'Error',
        failed: 'Failed',
        validationFailed: 'Signature verification failed',
        single: 'Failed tasks please process it singly'
    },
    batchStartProcess: {
        row: '<br/>',
        success: 'Success',
        error: 'Error',
        failed: 'Failed',
        single: 'Failed tasks please process it singly'
    },
    comment: {
        static: {
            title: 'Approval comments',
            add: 'Add',
            delete: 'Delete',
            save: 'Save',
            cancel: 'Cancel',
            content: 'Content',
            order: 'Order',
            inputLabel: 'Comments',
            manage: 'Comments management',
            attachmentUpload: 'Attachment',
            repeatFile: 'Contains repeat files:',
            type: 'Type',
            operate: 'Operate',
            confirm: 'Confirm',
            clickToAdd: 'Click to add',
            public: 'public',
            private: 'private',
            messageSubject: 'message subject',
            messageContent: 'message content'
        },
        attachment: {
            tips: 'click to upload attachments'
        },
        signature: {
            title: 'Signature',
            reset: 'Reset',
            ok: 'OK',
            sign: 'Sign, ',
            upload: 'Upload',
            tips: 'click to sign or upload a picture',
            dialogTitle: 'Signature',
            note1: '',
            note2: 'or',
            note3: '',
            disable: 'disable signature'
        }
    },
    addSign: {
        allowSignToSign: 'Allow',
        multiInstanceType: 'Multi instance type',
        parallel: 'parallel',
        preempt: 'preempt',
        sequential: 'sequential'
    },
    backWardConfig: {
        allowResubmitToThisNode: ',resubmit to this node'
    }
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
const zh_CHT = {
    static: {
        assignee: {
            title: '請選擇用戶',
            noAssignee: '請選擇辦理人員',
            successAssign: '操作成功',
        },
        transfer: {
            title: '請選擇用戶',
            selectHandover: '請選擇用戶',
            successTransfer: '任務移交成功'
        },
        columnName: {
            name: '名稱',
            code: '編號',
            department: '組織信息',
        },
        comment: {
            successComment: '任務評論成功'
        },
        title: '審批確認',
        inputLabel: '審批意見',
        inputHolder: '請輸入審批意見',
        selectActivity: '下一環節',
        addSignee: '加簽人員',
        footOk: '確定',
        footCancel: '取消',
        selectUser: '選擇用戶',
        hideComment: '意見隱藏',
    },
    cueWords: {
        successClaim: '領用成功',
        successUnClaim: '取消領用成功',
        successRetrieve: '任務取回成功',
        successPass: '審批通過',
        successBack: '駁回成功',
        successRefuse: '否決成功',
        success: '操作成功',
        inputOpinion: '請輸入審批意見',
        selectNode: '請選擇下一環節',
        select: '請選擇',
        processor: '辦理人',
        attachmentsRequired: '請上傳附件',
        assignUser: '指派'
    },
    task: {
        selectPlaceholder: '請選擇',
        passComment: '通過',
        processAlone: '請單獨處理',
        urgeText: '接收人员',
        backNodeText: '駁回節點',
        selectProcessor: '請選擇辦理人員',
        notFoundBill: '該單據不支持在電腦端辦理，請嘗試去移動端進行辦理',
        nextNodeText: '下一環節',
        assignText: '辦理人員',
        noUser: '無',
        title: '任務辦理',
        noTask: '未找到對應的任務',
        commentTooLong: '審批意見超長',
        activityName: '辦理人員',
        receiver: "接收人員",
        urgeComment: "請輸入催辦信息",
        noUrgeUsers: "沒有符合條件的催辦用戶",
        noUrgeSubject: "消息主題未配置",
        noUrgeContent: "消息內容未配置",
        person: "人员",
        addSign: "加签",
    },
    startProcess: {
        selectProcess: '請選擇流程',
        title: '選擇流程',
        selectNode: '請選擇下一環節',
        submitSuccess: '提交審批成功',
        submitFailed: '提交審批失敗',
        cancelSubmitSuccess: '取消提交成功',
        cancelSubmitFailed: '取消提交失敗',
        dataIdIsNull: '請選擇一條數據',
        dataIdIsEmpty: '請選擇一條數據',
        bizDefKeyIsNull: '流程分類ID不能為空',
        success: '取消成功',
        row: '條<br/>',
        failed: '取消失敗',
        node: '節點，',
        noUser: '沒有找到合適的辦理人'
    },
    batchSubmit: {
        row: '條，<br/>',
        success: '辦理成功',
        error: '辦理失敗',
        failed: '需要交互',
        single: '失敗的任務請單獨處理'
    },
    batchStartProcess: {
        row: '條，<br/>',
        success: '提交成功',
        error: '提交失敗',
        failed: '需要交互',
        validationFailed: '驗簽失敗',
        single: '失敗的單據請單獨處理'
    },
    comment: {
        static: {
            title: '常用意見管理',
            add: '新增',
            delete: '刪除',
            save: '保存',
            cancel: '取消',
            content: '常用意見',
            order: '順序',
            inputLabel: '常用意見',
            manage: '意見管理',
            attachmentUpload: '附件',
            repeatFile: '包含重復文件：',
            type: '類別',
            operate: '操作',
            confirm: '確認',
            clickToAdd: '新增常用意見',
            public: '公有',
            private: '個人',
            messageSubject: '消息主題',
            messageContent: '消息內容'
        },
        attachment: {
            tips: '點擊上傳附件'
        },
        signature: {
            title: '簽名',
            reset: '清空',
            ok: '確定',
            sign: '手寫簽名，',
            upload: '上傳圖片',
            tips: '點擊設置簽名',
            dialogTitle: '電子簽名',
            note1: '電子簽名可',
            note2: '也可通過',
            note3: '進行設置',
            disable: '不啟用簽名'
        }
    },
    addSign: {
        allowSignToSign: '允許再',
        multiInstanceType: '多人審批方式',
        parallel: '並行會簽',
        preempt: '任意人處理',
        sequential: '按順序依次處理'
    },
    backWardConfig: {
        allowResubmitToThisNode: '后再次提交时直接回到本节点'
    }
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
const zh_CHS = {
    static: {
        assignee: {
            title: '请选择用户',
            noAssignee: '请选择办理人员',
            successAssign: '操作成功',
        },
        transfer: {
            title: '请选择用户',
            selectHandover: '请选择用户',
            successTransfer: '任务移交成功'
        },
        columnName: {
            name: '名称',
            code: '编号',
            department: '组织信息',
        },
        comment: {
            successComment: '任务评论成功'
        },
        title: '审批确认',
        inputLabel: '审批意见',
        inputHolder: '请输入审批意见',
        selectActivity: '下一环节',
        footOk: '确定',
        footCancel: '取消',
        selectUser: '选择用户',
        hideComment: '意见隐藏',
    },
    cueWords: {
        successClaim: '领用成功',
        successUnClaim: '取消领用成功',
        successRetrieve: '任务取回成功',
        successPass: '审批通过',
        successBack: '驳回成功',
        successRefuse: '否决成功',
        success: '操作成功',
        inputOpinion: '请输入审批意见',
        selectNode: '请选择下一环节',
        select: '请选择',
        processor: '办理人',
        attachmentsRequired: '请上传附件',
        assignUser: '指派'
    },
    task: {
        selectPlaceholder: '请选择',
        passComment: '通过',
        processAlone: '请单独处理',
        urgeText: '接收人员',
        backNodeText: '驳回节点',
        selectProcessor: '请选择办理人员',
        notFoundBill: '该单据不支持在电脑端办理，请尝试去移动端进行办理',
        nextNodeText: '下一环节',
        assignText: '办理人员',
        noUser: '无',
        title: '任务办理',
        noTask: '未找到对应的任务',
        commentTooLong: '审批意见超长',
        activityName: '办理人员',
        receiver: "接收人员",
        urgeComment: "请输入催办信息",
        noUrgeUsers: "没有符合条件的催办用户",
        noUrgeSubject: "消息主题未配置",
        noUrgeContent: "消息内容未配置",
        person: "人员",
        addSign: "加签",
    },
    startProcess: {
        selectProcess: '请选择流程',
        title: '选择流程',
        selectNode: '请选择下一环节',
        submitSuccess: '提交审批成功',
        submitFailed: '提交审批失败',
        cancelSubmitSuccess: '取消提交成功',
        cancelSubmitFailed: '取消提交失败',
        dataIdIsNull: '请选择一条数据',
        dataIdIsEmpty: '请选择一条数据',
        bizDefKeyIsNull: '流程分类ID不能为空',
        success: '取消成功',
        row: '条<br/>',
        failed: '取消失败',
        node: '节点，',
        noUser: '没有找到合适的办理人'
    },
    batchSubmit: {
        row: '条，<br/>',
        success: '办理成功',
        error: '办理失败',
        failed: '需要交互',
        single: '失败的任务请单独处理'
    },
    batchStartProcess: {
        row: '条，<br/>',
        success: '提交成功',
        error: '提交失败',
        failed: '需要交互',
        validationFailed: '验签失败',
        single: '失败的单据请单独处理'
    },
    comment: {
        static: {
            title: '常用意见管理',
            add: '新增',
            delete: '删除',
            save: '保存',
            cancel: '取消',
            content: '常用意见',
            order: '顺序',
            inputLabel: '常用意见',
            manage: '意见管理',
            attachmentUpload: '附件',
            repeatFile: '包含重复文件：',
            type: '类别',
            operate: '操作',
            confirm: '确认',
            clickToAdd: '新增常用意见',
            public: '公有',
            private: '个人',
            messageSubject: '消息主题',
            messageContent: '消息内容'
        },
        attachment: {
            tips: '点击上传附件'
        },
        signature: {
            title: '签名',
            reset: '清空',
            ok: '确定',
            sign: '手写签名，',
            upload: '上传图片',
            tips: '点击设置签名',
            dialogTitle: '电子签名',
            note1: '电子签名可',
            note2: '也可通过',
            note3: '进行设置',
            disable: '不启用签名'
        }
    },
    addSign: {
        allowSignToSign: '允许再',
        multiInstanceType: '多人审批方式',
        parallel: '并行会签',
        preempt: '任意人处理',
        sequential: '按顺序依次处理'
    },
    backWardConfig: {
        allowResubmitToThisNode: '后再次提交时直接回到本节点'
    }
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
const translate = {
    'zh-CHS': zh_CHS,
    'en': en,
    'zh-CHT': zh_CHT
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class I18nService {
    constructor() {
        this.defaultLang = localStorage.getItem('languageCode');
        if (!this.defaultLang) {
            this.langData = translate['zh-CHS'];
        }
        else {
            this.langData = translate[this.defaultLang];
        }
    }
    /**
     * @param {?} name
     * @return {?}
     */
    getValue(name) {
        if (!name) {
            return '';
        }
        /** @type {?} */
        let resultVal = '';
        if (name.indexOf('.') === -1) {
            resultVal = this.langData[name];
        }
        else {
            resultVal = name.split('.').reduce((obj, key) => {
                if (obj) {
                    return obj[key];
                }
                else {
                    return null;
                }
            }, this.langData);
        }
        return resultVal;
    }
}
I18nService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
I18nService.ctorParameters = () => [];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * 任务实体定义
 */
class TaskEntity {
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class CompleteContext {
}
class Addendum {
}
class VerifySigned {
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * 指定参与者信息：需要指定参与者的活动、待指定用户列表
 */
class AssigneeInfo {
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @enum {string} */
const ConfigCode = {
    If_Show_Submit_Dialog: 'If_Show_Submit_Dialog',
    Info_After_Submit: 'Info_After_Submit',
    Info_After_Cancel_Submit: 'Info_After_Cancel_Submit',
    If_Use_Sign_By_Default: 'If_Use_Sign_By_Default',
    If_Show_Attachment: 'If_Show_Attachment',
    If_Show_Signature: 'If_Show_Signature',
    Default_Approval_Comment: 'Default_Approval_Comment',
    If_Store_Comment: 'If_Store_Comment',
    User_Help_Type: 'User_Help_Type',
    If_Can_Edit_Signature: 'If_Can_Edit_Signature',
};
/** @enum {string} */
const OwnerType = {
    User: 'user',
    Category: 'category',
    BizDefKey: 'bizdefkey',
    All: 'all',
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * 任务办理参数
 */
class WorkItemExecuteParam {
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * 催办模拟接口请求body
 */
class UrgeHandleSimulateContext {
}
/**
 * 执行催办请求body
 */
class UrgeHandleContext {
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class BatchVerifySignedContext {
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * 工作流上下文
 */
class WfContext {
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class UrgeHandleComponent {
    // 消息内容是否可编辑
    constructor() {
        this.placeholder = '';
        this.showMessageSubject = false; // 是否显示消息主题
        // 消息内容文本
        this.subjectEditable = false; // 消息主题是否可编辑
        // 消息主题是否可编辑
        this.contentEditable = false; // 消息内容是否可编辑
    }
    /**
     * @return {?}
     */
    ngOnInit() {
    }
}
UrgeHandleComponent.decorators = [
    { type: Component, args: [{
                selector: 'urge-handle',
                template: "<div class=\"wf-task-handler-help-div\">\r\n  <div class=\"wf-task-handler-help-text\">\r\n    {{ \"comment.static.messageSubject\" | translate }}\r\n  </div>\r\n  <div class=\"farris-input-wrap\">\r\n    <input\r\n      class=\"form-control\"\r\n      type=\"text\"\r\n      value=\"subject\"\r\n      name=\"subject\"\r\n      [placeholder]=\"placeholder\"\r\n      [(ngModel)]=\"urgeMessageSubject\"\r\n      [readOnly]=\"!subjectEditable\"\r\n    />\r\n  </div>\r\n</div>\r\n\r\n<div class=\"wf-task-handler-help-div\">\r\n  <div class=\"wf-task-handler-help-text\">\r\n    {{ \"comment.static.messageContent\" | translate }}\r\n  </div>\r\n  <textarea\r\n    class=\"form-control content-textarea\"\r\n    [(ngModel)]=\"urgeMessageContent\"\r\n    [attr.placeholder]=\"placeholder\"\r\n    [style.height.px]=\"textAreaHeight\"\r\n    [readOnly]=\"!contentEditable\"\r\n  ></textarea>\r\n</div>\r\n",
                styles: ["", ".wf-task-handler-help-div{font-size:13px;color:#2d2f33;margin-bottom:20px}.wf-task-handler-help-div-submit{margin-bottom:20px}.wf-task-handler-help-text{padding-bottom:8px;white-space:nowrap;overflow:hidden;text-overflow:ellipsis}"]
            }] }
];
/** @nocollapse */
UrgeHandleComponent.ctorParameters = () => [];
UrgeHandleComponent.propDecorators = {
    placeholder: [{ type: Input }],
    showMessageSubject: [{ type: Input }],
    textAreaHeight: [{ type: Input }],
    urgeMessageSubject: [{ type: Input }],
    urgeMessageContent: [{ type: Input }],
    subjectEditable: [{ type: Input }],
    contentEditable: [{ type: Input }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @enum {string} */
const MultiInstanceType = {
    /**
     * 抢占
     */
    Preempt: 'Preempt',
    /**
     * 并行
     */
    Parallel: 'Parallel',
    /**
     * 串行
     */
    Sequential: 'Sequential',
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class TaskExecuteComponent extends ActionBaseImplComponent {
    /**
     * @param {?} taskService
     * @param {?} notify
     * @param {?} i18nService
     * @param {?} handlerService
     * @param {?} loadingService
     * @param {?} message
     * @param {?} injector
     * @param {?} cd
     */
    constructor(taskService, notify, i18nService, handlerService, loadingService, message, injector, cd) {
        super();
        this.taskService = taskService;
        this.notify = notify;
        this.i18nService = i18nService;
        this.handlerService = handlerService;
        this.loadingService = loadingService;
        this.message = message;
        this.injector = injector;
        this.cd = cd;
        // 流程实例ID
        this.actionEntity = new TaskAction(); // 动作实体
        // 动作实体
        this.comment = ''; // 审批意见
        //当前动作的默认意见
        this.ifSelectNode = false; // 是否显示选择下一环节
        // 是否显示选择下一环节
        this.ifSelectUser = false; // 是否显示下一环节处理人
        // 是否显示下一环节处理人
        this.ifAssignUser = false; // 是否显示办理人员框
        // 是否显示办理人员框
        this.ifUrgeType = false; // 是否显示接收人框（催办消息接收人）
        // 是否显示接收人框（催办消息接收人）
        this.ifShowCommentToMySelf = false; // 是否显示审批记录仅自己可见
        // 是否显示审批记录仅自己可见
        this.singleSelect = false; // 用户帮助是否单选，默认多选
        // 用户帮助是否单选，默认多选
        this.selectTargetAble = false; // 是否允许选择下一环节
        // 是否允许选择下一环节
        this.hideComment = false; //审批记录仅自己可见
        //审批记录仅自己可见
        this.filter = { notGetCurrentUser: true, notGetStopUser: true, orderField: 'order', withAllOrg: true, orgId: '' }; // 系统用户帮助是否过滤当前人
        // 系统用户帮助是否过滤当前人
        this.selectedUsers = []; // 用户帮助选择后的Id数组
        this.subject = new BehaviorSubject(null);
        this.submitResult = { result: true, isClose: true }; // 动作执行完成后返回的实体结果
        // 动作执行完成后返回的实体结果
        this.bindingData = {}; // 系统帮助多选时用到
        // 系统帮助多选时用到
        this.selectNodeText = this.i18nService.getValue('task.nextNodeText'); // 下一环节显示的文字,"下一环节"
        // 处理人员显示文字
        this.commentPlaceHolder = this.i18nService.getValue('static.inputHolder'); //审批意见框placeholder
        //审批意见框placeholder
        this.showAttachment = true; //是否显示附件上传
        //是否显示附件上传
        this.showSign = true; //是否显示签名
        //是否显示签名
        this.showCommonComment = true; //是否显示常用意见
        //是否显示常用意见
        this.textAreaHeight = 84; //文字框的高度
        // 选择的下一环节ID，并行分支是，逗号隔开的
        this.destNodes = []; // 候选下一环节
        // 候选下一环节
        this.dialogHeight = 270; // 弹框的高度
        // 弹框的高度
        this.dialogHeightBase = 66;
        this.addendum = new Addendum(); // 附件、签名信息
        // 附件、签名信息
        this.groupIcon = '<i class="f-icon f-icon-lookup"></i>';
        this.assignInfos = [{
                // 节点返回的指派信息（多个）
                selectedAssignees: [],
                assigneeInfo: null,
                assignees: [],
                activityName: '',
                dependency: '',
                anonymous: false,
                anonymousText: null,
                resolved: false,
            }];
        // 表单对象
        this.ifRegistered = false; // 表单是否注册
        // 表单是否注册
        this.billMethodConfigs = []; // 表单动作配置列表
        // 表单动作配置列表
        this.configList = []; //任务中心配置项
        //任务中心配置项
        this.verifySigned = new VerifySigned(); // 数字验签参数
        // 数字验签参数
        this.submitDisable = false; // 提交按钮是否禁用
        // 提交按钮是否禁用
        //加签使用
        this.addSign = {
            showSignToSign: false,
            allowSignToSIgn: false,
            showMultiInstanceType: false,
            multiInstanceType: [
                { value: 'Parallel', name: this.i18nService.getValue('addSign.parallel') },
                { value: 'Sequential', name: this.i18nService.getValue('addSign.sequential') },
                { value: 'Preempt', name: this.i18nService.getValue('addSign.preempt') },
            ],
            originMultiInstType: '',
            curMultiInstType: MultiInstanceType.Parallel.toString()
        };
        //动态驳回配置
        this.showBackWardConfig = {
            dynamicBackWardRuleAble: false,
            enable: false,
        };
        /**
         * 任务催办时使用
         */
        this.showUrgeMessageSubject = false; // 是否显示催办消息主题（催办时使用）
        // 内容可编辑
        this.wfContext = new WfContext(); //工作流上下文
        //工作流上下文
        this.cls = '';
        this.POST_MESSAGE_TARGET = window.document.location.origin;
        /**
         * 监听事件处理
         */
        this.eventHandler = (event) => {
            this.messageSubject.next(event);
        };
        // 如果存在消息监听，先删掉
        if (TaskExecuteComponent.func) {
            window.removeEventListener('message', TaskExecuteComponent.func, false);
        }
        this.addMessageListener();
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        /** @type {?} */
        const load = this.loadingService.show();
        this.taskService.getAllUserConfig().subscribe((configList) => {
            load.close();
            this.configList = configList;
            /** @type {?} */
            const comment = configList.find(c => c.configCode === ConfigCode.Default_Approval_Comment);
            /** @type {?} */
            const if_store_comment = configList.find(c => c.configCode === ConfigCode.If_Store_Comment);
            /** @type {?} */
            let passComment;
            /** @type {?} */
            let backComment;
            if (comment && comment.currentValue) {
                passComment = JSON.parse(comment.currentValue).pass;
                backComment = JSON.parse(comment.currentValue).back;
                if (this.actionEntity.code === 'Pass') {
                    this.comment = passComment;
                }
                if (this.actionEntity.code === 'Back') {
                    this.comment = backComment;
                }
            }
            if (if_store_comment && if_store_comment.currentValue === 'true') {
                if (this.wfCacheComment) {
                    if (this.actionEntity.code == 'Back' && this.wfCacheComment == passComment) ;
                    else {
                        this.comment = this.wfCacheComment;
                    }
                }
            }
        }, () => {
            load.close();
        });
        // 从任务办理界面打开时，才注册服务
        if (this.origin === ActionOrigin.TaskForm) {
            this.initFormEvent();
            // 获取表单操作配置
            this.taskService.getAppInfo(this.workItemId).subscribe((re) => {
                if (re && re.billMethodConfigs && re.billMethodConfigs.length) {
                    this.billMethodConfigs = re.billMethodConfigs;
                }
            });
        }
        /** @type {?} */
        let context = new UrgeHandleSimulateContext();
        context.procInstId = this.processInstanceId;
    }
    /**
     * @private
     * @return {?}
     */
    addMessageListener() {
        window.addEventListener('message', this.eventHandler, false);
        TaskExecuteComponent.func = this.eventHandler;
    }
    /**
     * 重写父类方法
     * @param {?} task
     * @return {?}
     */
    setTask(task) {
        if (task) {
            this.task = task;
            this.workItemId = task.sourceId;
            this.processInstanceId = task.processInstanceId;
            this.wfContext.processCategoryId = task.categoryId;
        }
    }
    /**
     * 重写父类方法
     * @param {?} action
     * @return {?}
     */
    setAction(action) {
        if (action) {
            this.actionEntity = action;
            if (this.task) { // 单个、批量都setAction，单个才执行模拟
                this.execute(this.actionEntity);
            }
        }
    }
    /**
     * 前事件初始化，将服务注册到window上，供表单调用
     * 任务办理界面的window，表单的window.parent
     * @private
     * @return {?}
     */
    initFormEvent() {
        // 审批前事件
        /** @type {?} */
        const actionToken = this.workItemId + 'action';
        /** @type {?} */
        const subjectCode = 'FormSubjectCode';
        ((/** @type {?} */ (window))).gspWfEventService = ((/** @type {?} */ (window))).gspWfEventService || {};
        ((/** @type {?} */ (window))).gspWfEventService.register = (formObject) => {
            this.taskService.subjectRegister(subjectCode, actionToken);
            this.ifRegistered = true;
            this.formObject = formObject;
        };
        ((/** @type {?} */ (window))).gspWfEventService.notify = (value) => {
            if (this.ifRegistered) {
                this.taskService.subjectNotify(actionToken, value);
            }
            else { // 表单不注册，也可直接调用notify
                // 表单不注册，也可直接调用notify
                /** @type {?} */
                const simulateToken = this.workItemId + 'simulate';
                this.taskService.subjectRegister(subjectCode, simulateToken);
                this.taskService.subjectResponse(simulateToken, '', (value) => {
                    value && value.dataChanged && this.completeSimulate();
                });
                this.taskService.subjectNotify(simulateToken, value);
            }
        };
    }
    /**
     * 点击提交的时候，执行表单的前事件
     * @private
     * @return {?}
     */
    beforeCompleteSubmit() {
        /** @type {?} */
        const passPreActions = this.billMethodConfigs.filter(action => action.action === this.actionEntity.code && action.executionTime === 'Pre').sort((x, y) => x.sortOrder - y.sortOrder);
        // 如果表单注册了事件
        if (passPreActions && passPreActions.length) {
            this.executeFormActions([...passPreActions]);
        }
        // 没有定义前后事件，直接提交
        else {
            this.completeSubmit();
        }
    }
    /**
     * @private
     * @param {?} formActions 表单中要执行的动作
     * @return {?}
     */
    executeFormActions(formActions) {
        if (formActions.length > 0) {
            this.messageSubject = new Subject();
            this.messageSubject.subscribe((re) => {
                console.log(re.data);
                /** @type {?} */
                const data = re.data.data;
                if (data.result === true) {
                    if (data.dataChanged === true) { // 如果需要预解析，先预解析再继续执行
                        this.completeSimulate().subscribe((r) => {
                            if (r) { // 预解析正确
                                this.executeFormActions(formActions);
                            }
                            else { // 预解析错误
                                this.subject.next({ result: false, isClose: false }); // 任务办理界面不关闭
                            }
                        });
                    }
                    else { // 不需要预解析，继续执行
                        this.executeFormActions(formActions);
                    }
                }
                else {
                    this.subject.next({ result: false, isClose: false }); // 任务办理界面不关闭
                    throw new Error('审批前表单操作执行失败！');
                }
            });
            // 执行表单动作
            /** @type {?} */
            const formAction = formActions.shift();
            this.sendMessage(this.workItemId, formAction);
        }
        else {
            this.completeSubmit();
        }
    }
    /**
     * 预解析
     * @param {?} action
     * @return {?}
     */
    execute(action) {
        switch (action.code) {
            case 'AssignUser': // 指派 单独参数
                this.assignSimulate();
                break;
            case 'Claim': // 领用
                this.showAttachment = false;
                break;
            case 'Unclaim': // 取消领用
                break;
            case 'Retrieve': // 取回
                break;
            case 'Transfer': // 移交 单独参数
                this.transferSimulate();
                break;
            case 'AddSign': // 加签
                this.addSignSimulate();
                break;
            case 'AddSignFront': // 征询
                this.addSignFrontSimulate();
                break;
            case 'Notify': //知会
                this.notifySimulate();
                break;
            case 'Refuse': // 否决
                break;
            case 'Obsolete': // 作废
                break;
            case 'Comment': // 评论
                break;
            case 'ReadTask': // 已阅
                this.ifShowCommentToMySelf = true;
                this.dialogHeight = 340;
                break;
            case 'UrgeHandle': //催办
                this.urgeHandleSimulate();
                break;
            case 'CancelConsult': //取消征询
                break;
            default: // 通过 驳回 重新提交 其他自定义的动作
                this.completeSimulate();
        }
    }
    /**
     * 真正地提交
     * 重写父类方法
     * @return {?}
     */
    submit() {
        switch (this.actionEntity.code) {
            case 'AssignUser': // 指派 单独参数
                this.assignSubmit();
                break;
            case 'Claim': // 领用
                this.claimSubmit();
                break;
            case 'Unclaim': // 取消领用
                this.unClaimSubmit();
                break;
            case 'Retrieve': // 取回
                this.retrieveSubmit();
                break;
            case 'Transfer': // 移交 单独参数
                this.transferSubmit();
                break;
            case 'AddSign': // 加签
                this.addSignSubmit();
                break;
            case 'AddSignFront': // 征询
                this.addSignFrontSubmit();
                break;
            case 'Comment': // 评论
                this.commentSubmit();
                break;
            case 'Notify': //知会
                this.notifySubmit();
                break;
            case 'ReadTask': // 已阅
                this.readSubmit();
                break;
            case 'UrgeHandle': //催办
                this.urgeHandleSubmit();
                break;
            case 'CancelConsult': //取消征询
                this.cancelConsultSubmit();
                break;
            default: // 通过 驳回 否决 作废 重新提交 其他自定义动作
                this.beforeCompleteSubmit();
        }
        return this.subject.asObservable();
    }
    /**
     * 批量办理
     * @param {?} tasks 批量任务列表
     * @return {?}
     */
    batchSubmit(tasks) {
        /** @type {?} */
        let filterNum = 0;
        /** @type {?} */
        const subject = new BehaviorSubject(null);
        /** @type {?} */
        const successSubmit = { result: true, isClose: true };
        if ((this.actionEntity.code === 'Back' || this.actionEntity.code === 'Refuse') && !this.comment) { // 批量意见是否必填不支持根据审批项配置操作，批量驳回意见必填
            this.notify.warning(this.i18nService.getValue('cueWords.inputOpinion'));
            subject.next({ result: false, isClose: false });
        }
        else if (this.comment.length > 300) {
            this.notify.warning(this.i18nService.getValue('task.commentTooLong'));
            subject.next({ result: false, isClose: false });
        }
        else {
            /** @type {?} */
            const noActionTasks = tasks.filter(t => t.actions.findIndex(a => a.code === this.actionEntity.code) === -1);
            if (noActionTasks && noActionTasks.length > 0) {
                for (const a of noActionTasks) {
                    filterNum++;
                    if (filterNum === tasks.length) {
                        subject.next(successSubmit);
                        this.showBatchSubmitInfo(0, filterNum, 0, 0);
                    }
                }
            }
            /** @type {?} */
            let actTasks = tasks.filter(t => t.actions.some(a => a.code === this.actionEntity.code));
            if (actTasks && actTasks.length > 0) {
                this.executeBatchEvent([...this.actionEntity.preEvents.filter(e => e.batch)], actTasks, this.actionEntity, (re) => {
                    if (re && re.result) {
                        if (re.passTasks) {
                            /** @type {?} */
                            const backTasks = actTasks.filter(t => re.passTasks.findIndex(id => id === t.id) === -1);
                            if (backTasks && backTasks.length > 0) {
                                for (const t of backTasks) {
                                    filterNum++;
                                    if (filterNum === tasks.length) {
                                        subject.next(successSubmit);
                                        this.showBatchSubmitInfo(0, filterNum, 0, 0);
                                    }
                                }
                            }
                            actTasks = actTasks.filter(t => re.passTasks.findIndex(id => id === t.id) > -1);
                        }
                        if (actTasks.length > 0) {
                            /** @type {?} */
                            const batchVerifySignedcontext = new BatchVerifySignedContext();
                            this.batchverifySubmit(actTasks, filterNum, batchVerifySignedcontext).subscribe((r) => {
                                if (r && r.successSubmit && r.successSubmit.result) {
                                    this.executeBatchEvent([...this.actionEntity.postEvents.filter(e => e.batch)], r.successHandleTasks, this.actionEntity, () => {
                                        subject.next(r.successSubmit);
                                    }, { result: true, passTasks: r.successHandleTasks.map(t => t.id) });
                                }
                            });
                        }
                    }
                    else {
                        subject.next({ result: false, isClose: false });
                    }
                }, { result: true, passTasks: actTasks.map(t => t.id) });
            }
        }
        return subject.asObservable();
    }
    /**
     * @private
     * @param {?} tasks
     * @param {?=} filterNum
     * @param {?=} batchVerifySignedcontext
     * @return {?}
     */
    batchverifySubmit(tasks, filterNum = 0, batchVerifySignedcontext) {
        /** @type {?} */
        const subject = new Subject();
        /** @type {?} */
        const verifyTasks = tasks.filter(t => {
            /** @type {?} */
            const action = t.actions.find(a => a.code === this.actionEntity.code);
            if (!action) {
                return false;
            }
            else {
                if (action.parameters.some(p => p.code === 'CertificationNecessary' && p.value === 'true')) {
                    return true;
                }
                else {
                    return false;
                }
            }
        });
        /** @type {?} */
        const verifyTasksNum = verifyTasks.length;
        if (verifyTasks.length > 0) {
            /** @type {?} */
            const that = this;
            if (((/** @type {?} */ (window))).gspframeworkService &&
                ((/** @type {?} */ (window))).gspframeworkService.rtf) {
                ((/** @type {?} */ (window))).gspframeworkService.rtf.caEvent.on(((/** @type {?} */ (window))).gspframeworkService.rtf.caEvent.signedMsgOverToken(), 'signedMsgOver', function signMsgOver(signedData) {
                    if (signedData && signedData[0] === 'true' && signedData.length > 0) {
                        // 证书对象
                        /** @type {?} */
                        const cert = gspCA.getCurCert();
                        // 验签参数
                        that.verifySigned = {
                            // 要验证的证书base64编码的字符流(certkey)
                            certBase64Info: gspCA.getCertBase64(cert),
                            // 签名原信息
                            msg: ['BatchDigitalSignature'],
                            // 要签名后信息
                            signedmsg: signedData[1][0],
                            // 用户使用场景，目前未使用，可以为空
                            useCase: null,
                        };
                        batchVerifySignedcontext.verifySigned = that.verifySigned;
                        that.taskService.batchVerifySigned(batchVerifySignedcontext).subscribe(() => {
                            /** @type {?} */
                            const verifyTasksNum = 0;
                            that.batchComplete(tasks, filterNum, verifyTasksNum).subscribe(re => {
                                subject.next(re);
                            });
                        }, (error) => {
                            /** @type {?} */
                            const otherTasks = tasks.filter(t => verifyTasks.findIndex(task => task.id === t.id) === -1);
                            that.batchComplete(otherTasks, filterNum, verifyTasksNum).subscribe(re => {
                                subject.next(re);
                            });
                        });
                    }
                    else {
                        that.notify.error(signedData[1]);
                        subject.next({ successSubmit: { result: false, isClose: false }, successHandleTasks: new Array() });
                    }
                });
            }
            /** @type {?} */
            const msg = ['BatchDigitalSignature'];
            gspCA.getSignedMsg(msg);
        }
        else {
            this.batchComplete(tasks, filterNum, verifyTasksNum).subscribe(re => {
                subject.next(re);
            });
        }
        return subject.asObservable();
    }
    /**
     * @private
     * @param {?} tasks
     * @param {?=} filterNum
     * @param {?=} verifyTasksNum
     * @return {?}
     */
    batchComplete(tasks, filterNum = 0, verifyTasksNum) {
        /** @type {?} */
        const subject = new Subject();
        /** @type {?} */
        let successNum = 0;
        /** @type {?} */
        let failedNum = 0;
        /** @type {?} */
        let errorNum = 0;
        /** @type {?} */
        const successSubmit = { result: true, isClose: true };
        /** @type {?} */
        const successHandleTasks = new Array();
        /** @type {?} */
        const load = this.loadingService.show();
        for (const task of tasks) {
            /** @type {?} */
            const context = new CompleteContext();
            context.workItemId = task.sourceId;
            context.conclusionValue = this.actionEntity.code;
            context.comment = this.comment;
            context.addendum = this.addendum;
            this.taskService.completeSimulate(context).subscribe((response) => {
                if (response && response.needInteraction === true) { // 需要交互
                    failedNum++;
                    if (successNum + failedNum + errorNum === tasks.length) {
                        load.close();
                        subject.next({ successSubmit, successHandleTasks });
                        this.showBatchSubmitInfo(successNum, failedNum + filterNum, errorNum, verifyTasksNum);
                    }
                }
                else { // 不需要交互
                    this.taskService.complete(context).subscribe(() => {
                        successNum++;
                        successHandleTasks.push(task);
                        if (successNum + failedNum + errorNum === tasks.length) {
                            load.close();
                            subject.next({ successSubmit, successHandleTasks });
                            this.showBatchSubmitInfo(successNum, failedNum + filterNum, errorNum, verifyTasksNum);
                        }
                    }, () => {
                        errorNum++;
                        if (successNum + failedNum + errorNum === tasks.length) {
                            load.close();
                            subject.next({ successSubmit, successHandleTasks });
                            this.showBatchSubmitInfo(successNum, failedNum + filterNum, errorNum, verifyTasksNum);
                        }
                    });
                }
            }, () => {
                errorNum++;
                if (successNum + failedNum + errorNum === tasks.length) {
                    load.close();
                    subject.next({ successSubmit, successHandleTasks });
                    this.showBatchSubmitInfo(successNum, failedNum + filterNum, errorNum, verifyTasksNum);
                }
            });
        }
        return subject.asObservable();
    }
    /**
     * 批量提交提示信息
     * @private
     * @param {?} successNum 成功条数
     * @param {?} failedNum 需要交互的条数
     * @param {?} errorNum 执行报错的条数
     * @param {?} verifyTasksNum 需要数字签名的条数
     * @return {?}
     */
    showBatchSubmitInfo(successNum, failedNum, errorNum, verifyTasksNum) {
        /** @type {?} */
        let message = '';
        if (successNum && !failedNum && !errorNum && !verifyTasksNum) { // 批量全部成功
            this.notify.success(this.i18nService.getValue('cueWords.success'));
        }
        else { // 非全部成功
            successNum && (message += this.i18nService.getValue('batchSubmit.success') + `【${successNum}】` + this.i18nService.getValue('batchSubmit.row'));
            errorNum && (message += this.i18nService.getValue('batchSubmit.error') + `【${errorNum}】` + this.i18nService.getValue('batchSubmit.row'));
            failedNum && (message += this.i18nService.getValue('batchSubmit.failed') + `【${failedNum}】` + this.i18nService.getValue('batchSubmit.row'));
            verifyTasksNum && (message += this.i18nService.getValue('batchSubmit.validationFailed') + `【${verifyTasksNum}】` + this.i18nService.getValue('batchSubmit.row'));
            message += this.i18nService.getValue('batchSubmit.single');
            this.message.show('warning', message, { safeHtml: false });
        }
    }
    /**
     * @private
     * @param {?} events
     * @param {?} entities
     * @param {?} action
     * @param {?} handler
     * @param {?=} result
     * @return {?}
     */
    executeBatchEvent(events, entities, action, handler, result) {
        if (this.injector) {
            if (events && events.length > 0 && entities && entities.length > 0) {
                /** @type {?} */
                const event = events.shift();
                /** @type {?} */
                const url = event.eventImpl.split('#')[0];
                /** @type {?} */
                const func = event.eventImpl.split('#')[1];
                System.import(url + '?v=' + new Date().getTime().toString())
                    .then((moduleFactories) => {
                    /** @type {?} */
                    const moduleFactory = Object.values(moduleFactories)[0];
                    /** @type {?} */
                    const moduleRef = moduleFactory.create(this.injector);
                    /** @type {?} */
                    const context = {
                        action,
                        taskList: entities,
                        origin: 'TaskCenter',
                        preEventResult: result
                    };
                    moduleRef.instance[func].apply(moduleRef.instance, [context]).subscribe((re) => {
                        if (re && re.result) {
                            this.executeBatchEvent(events, entities, action, handler, re);
                        }
                        else {
                            handler(re);
                        }
                    });
                });
            }
            else {
                handler(result);
            }
        }
        else {
            handler(result);
        }
    }
    /**
     * @private
     * @return {?}
     */
    assignSimulate() {
        this.showAttachment = false;
        this.ifAssignUser = true;
        this.dialogHeight += this.dialogHeightBase;
        this.taskService.getAssigneeInfo(this.workItemId).subscribe((info) => {
            this.assignInfos = [{
                    selectedAssignees: info.selectedAssignees,
                    assigneeInfo: info.assigneeInfo,
                    assignees: info.selectedAssignees.map(user => { return { id: user.id, name: user.name }; }),
                    activityName: info.activityDefinitionName,
                    dependency: info.dependency,
                    anonymous: info.anonymous,
                    anonymousText: info.anonymousText,
                    resolved: info.resolved,
                }];
        }, (error) => {
            this.taskService.error(error);
        });
    }
    /**
     * @private
     * @return {?}
     */
    transferSimulate() {
        this.ifSelectUser = true;
        this.selectUserText = this.actionEntity.name + this.i18nService.getValue('task.person');
        this.singleSelect = true;
        this.dialogHeight += this.dialogHeightBase;
        this.getOrganizationScope();
    }
    /**
     * @private
     * @return {?}
     */
    addSignFrontSimulate() {
        this.ifSelectUser = true;
        this.selectUserText = this.actionEntity.name + this.i18nService.getValue('task.person');
        this.dialogHeight += this.dialogHeightBase;
        this.getOrganizationScope();
    }
    /**
     * @private
     * @return {?}
     */
    addSignSimulate() {
        this.ifSelectUser = true;
        this.selectUserText = this.actionEntity.name + this.i18nService.getValue('task.person');
        this.dialogHeight += this.dialogHeightBase * 2;
        /** @type {?} */
        const load = this.loadingService.show();
        this.taskService.getAdhocConfig(this.workItemId).subscribe((response) => {
            load.close();
            this.addSign.showSignToSign = response.showSignToSign;
            this.addSign.originMultiInstType = response.multiInstanceType;
            if (response.organization) {
                this.filter.orgId = response.organization.id;
                this.filter.withAllOrg = response.organization.includeChildren;
            }
        }, error => {
            load.close();
            this.taskService.error(error);
        });
    }
    /**
     * @private
     * @return {?}
     */
    notifySimulate() {
        this.ifSelectUser = true;
        this.selectUserText = this.actionEntity.name + this.i18nService.getValue('task.person');
        this.dialogHeight += this.dialogHeightBase;
        this.singleSelect = false;
        this.getOrganizationScope();
    }
    /**
     * @private
     * @return {?}
     */
    getOrganizationScope() {
        /** @type {?} */
        const load = this.loadingService.show();
        this.taskService.getOrganizationScope(this.workItemId, this.actionEntity.code).subscribe((orgList) => {
            load.close();
            if (orgList.length) { // 全员会返回空数组
                this.filter.orgId = orgList[0].id;
                this.filter.withAllOrg = orgList[0].includeChildren;
            }
        }, error => {
            load.close();
            this.taskService.error(error);
        });
    }
    /**
     * 催办模拟
     * @private
     * @return {?}
     */
    urgeHandleSimulate() {
        this.ifSelectNode = false;
        this.ifSelectUser = false;
        this.ifAssignUser = false;
        this.ifUrgeType = true;
        this.commentPlaceHolder = this.i18nService.getValue('task.urgeComment');
        this.showCommonComment = false;
        this.showAttachment = false;
        this.showUrgeMessageSubject = true;
        this.showSign = false;
        this.dialogHeight += this.dialogHeightBase * 2;
        /** @type {?} */
        const load = this.loadingService.show();
        /** @type {?} */
        let context = new UrgeHandleSimulateContext();
        context.procInstId = this.processInstanceId;
        this.taskService.urgeHandleSimulate(context).subscribe((re) => {
            load.close();
            this.urgeHandleResponse = re;
            if (re && re.urgeUsers && re.urgeUsers.length) {
                this.urgeMessageSubject = re.urgeUsers[0].urgeInfos[0].urgeMessageSubject;
                this.urgeMessageContent = re.urgeUsers[0].urgeInfos[0].urgeMessageContent;
                this.subjectEditable = re.urgeUsers[0].urgeInfos[0].subjectEditable;
                this.contentEditable = re.urgeUsers[0].urgeInfos[0].contentEditable;
                this.addReminder = re.urgeUsers[0].urgeInfos[0].addReminder;
                /** @type {?} */
                let urgeUsers = re.urgeUsers;
                /** @type {?} */
                let assignInfo = new AssigneeInfo();
                urgeUsers.forEach(user => {
                    if (user.anonymousText) {
                        user.name = user.anonymousText;
                        user.code = '';
                        user.orgName = '';
                    }
                });
                assignInfo.assigneeUsers = urgeUsers;
                assignInfo.selectAssignee = urgeUsers.length > 1 ? true : false;
                assignInfo.multiSelect = true;
                this.assignInfos[0].assigneeInfo = assignInfo;
                this.assignInfos[0].assignees = urgeUsers.length == 1 ? urgeUsers : [];
            }
            else {
                this.notify.warning(this.i18nService.getValue('task.noUrgeUsers'));
            }
        }, error => {
            load.close();
            this.taskService.error(error);
        });
    }
    /**
     * 预解析
     * 通过、驳回、重新提交、其他自定义动作
     * @private
     * @return {?}
     */
    completeSimulate() {
        /** @type {?} */
        const subject = new Subject();
        this.ifSelectNode = true;
        this.ifAssignUser = true;
        this.dialogHeight += this.dialogHeightBase * 2;
        if (this.actionEntity.parameters && this.actionEntity.parameters.length) { // 是否允许加签
            this.actionEntity.parameters.forEach((p) => {
                if (p.code === 'AddSignBehindAble' && p.value === 'true') {
                    this.ifSelectUser = true;
                    this.selectUserText = this.i18nService.getValue('task.addSign') + this.i18nService.getValue('task.person');
                    this.dialogHeight += this.dialogHeightBase;
                    /** @type {?} */
                    const load = this.loadingService.show();
                    //获取加签范围
                    this.taskService.getOrganizationScope(this.workItemId, 'AddSignBehind').subscribe((orgList) => {
                        load.close();
                        if (orgList.length) { // 全员会返回空数组
                            this.filter.orgId = orgList[0].id;
                            this.filter.withAllOrg = orgList[0].includeChildren;
                        }
                    }, error => {
                        this.taskService.error(error);
                    });
                }
            });
        }
        if (this.actionEntity.code === 'Back') {
            this.selectNodeText = this.i18nService.getValue('task.backNodeText');
        }
        /** @type {?} */
        const context = new CompleteContext();
        context.workItemId = this.workItemId;
        context.conclusionValue = this.actionEntity.code;
        /** @type {?} */
        const load = this.loadingService.show();
        this.taskService.completeSimulate(context).subscribe((response) => {
            load.close();
            this.clearSimulateResult();
            this.response = response;
            this.showBackWardConfig.dynamicBackWardRuleAble = response.dynamicBackWardRuleAble;
            if (!response.simulationPaths.length) { // 模拟返回路径为空时
                this.ifSelectNode = false;
                this.ifAssignUser = false;
            }
            else { // 模拟返回了路径
                this.destNodes = response.simulationPaths && response.simulationPaths.map(path => ({
                    id: path.nodeInfoList.map(node => node.activityDefinitionId).join('，'),
                    name: path.nodeInfoList.map(node => node.activityDefinitionName).join('，')
                }));
                // 处理默认分支，无默认分支返回-1
                /** @type {?} */
                const defaultIndex = response.simulationPaths.findIndex(a => a.default);
                if (defaultIndex > -1) {
                    this.selectedNodeId = this.destNodes[defaultIndex].id;
                    this.nodePlaceholder = this.destNodes[defaultIndex].name.indexOf('，') > -1 ? response.simulationPaths[defaultIndex].name : this.destNodes[defaultIndex].name;
                    this.setAssignInfo(response.simulationPaths[defaultIndex].nodeInfoList);
                }
                else {
                    this.nodePlaceholder = this.i18nService.getValue('task.selectPlaceholder');
                }
            }
            subject.next(true);
        }, error => {
            load.close();
            subject.next(false);
            this.taskService.error(error);
        });
        return subject.asObservable();
    }
    /**
     * 清空预解析结果
     * @private
     * @return {?}
     */
    clearSimulateResult() {
        this.assignInfos = [{
                // 重新预解析时清空
                selectedAssignees: [],
                assigneeInfo: null,
                assignees: [],
                activityName: '',
                dependency: '',
                anonymous: false,
                anonymousText: '',
                resolved: false,
            }];
        this.destNodes = []; // 重新预解析时清空
        this.nodePlaceholder = '';
        this.selectedNodeId = '';
    }
    /**
     * 设置当前指派信息帮助参数
     * @private
     * @param {?} nodeInfoList
     * @return {?}
     */
    setAssignInfo(nodeInfoList) {
        this.assignInfos = [];
        this.selectedNodeId.split('，').forEach(nodeId => {
            /** @type {?} */
            const node = nodeInfoList.find(node => node.activityDefinitionId === nodeId);
            if (node) {
                this.assignInfos.push({
                    selectedAssignees: node.selectedAssignees,
                    assigneeInfo: node.assigneeInfo,
                    assignees: node.selectedAssignees.map(user => { return { id: user.id, name: user.name }; }),
                    activityName: node.activityDefinitionName,
                    dependency: node.dependency,
                    anonymous: node.anonymous,
                    anonymousText: node.anonymousText,
                    resolved: node.resolved,
                });
            }
            else {
                this.assignInfos.push({
                    selectedAssignees: [],
                    assigneeInfo: null,
                    assignees: [],
                    activityName: '',
                    dependency: '',
                    anonymous: false,
                    anonymousText: '',
                    resolved: false,
                });
            }
        });
        this.cd.detectChanges();
    }
    /**
     * 点击确定后方法
     * @private
     * @return {?}
     */
    assignSubmit() {
        if (this.comment.length > 300) {
            this.notify.warning(this.i18nService.getValue('task.commentTooLong'));
            this.subject.next({ result: false, isClose: false });
        }
        else if (!this.assignInfos[0].assignees.length) {
            this.notify.warning(this.i18nService.getValue('static.assignee.noAssignee'));
            this.subject.next({ result: false, isClose: false });
        }
        else {
            /** @type {?} */
            const context = {
                workItemId: this.workItemId,
                assigneeIds: this.assignInfos[0].assignees.map(user => user.id),
                comment: this.comment,
                addendum: this.addendum
            };
            this.taskService.assignNextUsersByWorkItemId(context).subscribe(() => {
                this.notify.success(this.i18nService.getValue('static.assignee.successAssign'));
                this.subject.next(this.submitResult);
            }, (error) => {
                this.subject.next({ result: false, isClose: false });
                this.taskService.error(error);
            });
        }
    }
    /**
     * @private
     * @return {?}
     */
    claimSubmit() {
        if (this.comment.length > 300) {
            this.notify.warning(this.i18nService.getValue('task.commentTooLong'));
            this.subject.next({ result: false, isClose: false });
        }
        else {
            this.taskService.claim(this.workItemId, this.comment).subscribe(() => {
                this.notify.success(this.i18nService.getValue('cueWords.successClaim')),
                    this.submitResult.isClose = false;
                this.subject.next(this.submitResult);
            }, (error) => {
                this.subject.next({ result: false, isClose: false });
                this.taskService.error(error);
            });
        }
    }
    /**
     * @private
     * @return {?}
     */
    unClaimSubmit() {
        if (this.comment.length > 300) {
            this.notify.warning(this.i18nService.getValue('task.commentTooLong'));
            this.subject.next({ result: false, isClose: false });
        }
        else {
            this.taskService.unClaim(this.workItemId, this.comment).subscribe(() => {
                this.notify.success(this.i18nService.getValue('cueWords.successUnClaim')),
                    this.subject.next(this.submitResult);
            }, (error) => {
                this.subject.next({ result: false, isClose: false });
                this.taskService.error(error);
            });
        }
    }
    /**
     * @private
     * @return {?}
     */
    retrieveSubmit() {
        if (this.comment.length > 300) {
            this.notify.warning(this.i18nService.getValue('task.commentTooLong'));
            this.subject.next({ result: false, isClose: false });
        }
        else {
            /** @type {?} */
            const retrieveContext = {
                workItemId: this.workItemId,
                comment: this.comment
            };
            this.taskService.retrieve(retrieveContext).subscribe(() => {
                this.notify.success(this.i18nService.getValue('cueWords.successRetrieve'));
                this.subject.next(this.submitResult);
            }, (error) => {
                this.subject.next({ result: false, isClose: false });
                this.taskService.error(error);
            });
        }
    }
    /**
     * @private
     * @return {?}
     */
    transferSubmit() {
        if (this.comment.length > 300) {
            this.notify.warning(this.i18nService.getValue('task.commentTooLong'));
            this.subject.next({ result: false, isClose: false });
        }
        else if (this.selectedUsers.length === 0) {
            this.notify.warning(this.i18nService.getValue('task.selectPlaceholder') + this.selectUserText);
            this.subject.next({ result: false, isClose: false });
        }
        else {
            /** @type {?} */
            const context = {
                workItemId: this.workItemId,
                assignee: this.selectedUsers[0],
                comment: this.comment,
                addendum: this.addendum
            };
            this.submitDisable = true; // 禁用提交按钮
            this.taskService.transfer(context).subscribe(() => {
                this.notify.success(this.i18nService.getValue('static.transfer.successTransfer'));
                this.subject.next(this.submitResult);
            }, (error) => {
                this.subject.next({ result: false, isClose: false });
                this.taskService.error(error);
            });
        }
    }
    /**
     * @private
     * @return {?}
     */
    commentSubmit() {
        if (!this.comment || this.comment.length === 0) {
            this.notify.warning(this.i18nService.getValue('cueWords.inputOpinion'));
            this.subject.next({ result: false, isClose: false });
        }
        else if (this.comment.length > 300) {
            this.notify.warning(this.i18nService.getValue('task.commentTooLong'));
            this.subject.next({ result: false, isClose: false });
        }
        else {
            /** @type {?} */
            const context = {
                workItemId: this.workItemId,
                comment: this.comment,
                addendum: this.addendum
            };
            this.taskService.comment(context).subscribe(() => {
                this.notify.success(this.i18nService.getValue('static.comment.successComment'));
                this.submitResult.isClose = false;
                this.subject.next(this.submitResult);
            }, (error) => {
                this.subject.next({ result: false, isClose: false });
                this.taskService.error(error);
            });
            this.comment = '';
        }
    }
    /**
     * @private
     * @return {?}
     */
    addSignFrontSubmit() {
        if (this.comment.length > 300) {
            this.notify.warning(this.i18nService.getValue('task.commentTooLong'));
            this.subject.next({ result: false, isClose: false });
        }
        else if (this.selectedUsers.length === 0) {
            this.notify.warning(this.i18nService.getValue('task.selectPlaceholder') + this.selectUserText);
            this.subject.next({ result: false, isClose: false });
        }
        else {
            /** @type {?} */
            const context = {
                workItemId: this.workItemId,
                action: this.actionEntity.code,
                assignees: this.selectedUsers,
                comment: this.comment,
                addendum: this.addendum
            };
            this.submitDisable = true; // 禁用提交按钮
            this.taskService.addSign(context).subscribe(() => {
                this.notify.success(this.i18nService.getValue('cueWords.success'));
                this.subject.next(this.submitResult);
            }, (error) => {
                this.subject.next({ result: false, isClose: false });
                this.taskService.error(error);
            });
        }
    }
    /**
     * @private
     * @return {?}
     */
    addSignSubmit() {
        if (this.comment.length > 300) {
            this.notify.warning(this.i18nService.getValue('task.commentTooLong'));
            this.subject.next({ result: false, isClose: false });
        }
        else if (this.selectedUsers.length === 0) {
            this.notify.warning(this.i18nService.getValue('task.selectPlaceholder') + this.selectUserText);
            this.subject.next({ result: false, isClose: false });
        }
        else {
            /** @type {?} */
            let payload = {
                workItemId: this.workItemId,
                comment: this.comment,
                conclusionValue: "Pass",
                signAssignees: this.selectedUsers,
                actionCode: "AddSignBehind",
                multiInstanceType: this.addSign.showMultiInstanceType ? this.addSign.curMultiInstType : this.addSign.originMultiInstType,
                counterSignRule: 'allPass',
                completedRule: 'all',
                allowSignToSign: this.addSign.allowSignToSIgn,
                activityName: '',
                addendum: this.addendum
            };
            /** @type {?} */
            const load = this.loadingService.show();
            this.taskService.adhocAssignee(payload).subscribe(re => {
                this.notify.success(this.i18nService.getValue('cueWords.success'));
                this.subject.next({ result: true, isClose: true });
                load.close();
            }, error => {
                load.close();
                this.subject.next({ result: false, isClose: false });
                this.taskService.error(error);
            });
        }
    }
    /**
     * @private
     * @return {?}
     */
    readSubmit() {
        if (this.comment.length > 300) {
            this.notify.warning(this.i18nService.getValue('task.commentTooLong'));
            this.subject.next({ result: false, isClose: false });
        }
        else {
            /** @type {?} */
            const context = {
                workItemId: this.workItemId,
                comment: this.comment,
                addendum: this.addendum,
                hideComment: this.hideComment
            };
            this.taskService.readTask(context).subscribe(() => {
                this.notify.success(this.i18nService.getValue('cueWords.success'));
                this.subject.next({ result: true, isClose: true });
            }, error => {
                this.taskService.error(error);
                this.subject.next({ result: false, isClose: false });
            });
        }
    }
    /**
     * @private
     * @return {?}
     */
    notifySubmit() {
        if (this.comment.length > 300) {
            this.notify.warning(this.i18nService.getValue('task.commentTooLong'));
            this.subject.next({ result: false, isClose: false });
        }
        else if (this.selectedUsers.length === 0) {
            this.notify.warning(this.i18nService.getValue('task.selectPlaceholder') + this.selectUserText);
            this.subject.next({ result: false, isClose: false });
        }
        else {
            /** @type {?} */
            const context = {
                workItemId: this.workItemId,
                comment: this.comment,
                addendum: this.addendum,
                action: this.actionEntity.code,
                assignees: this.selectedUsers,
            };
            this.taskService.addSign(context).subscribe(() => {
                this.notify.success(this.i18nService.getValue('cueWords.success'));
                this.subject.next({ result: true, isClose: false });
            }, (error) => {
                this.subject.next({ result: false, isClose: false });
                this.taskService.error(error);
            });
        }
    }
    /**
     * 催办提交
     * @private
     * @return {?}
     */
    urgeHandleSubmit() {
        if (this.comment.length > 300) {
            this.notify.warning(this.i18nService.getValue('task.commentTooLong'));
            this.subject.next({ result: false, isClose: false });
        }
        else if (!this.urgeHandleResponse.urgeUsers || !this.urgeHandleResponse.urgeUsers.length) { //没有符合条件的催办用户
            this.notify.warning(this.i18nService.getValue('task.noUrgeUsers'));
            this.subject.next({ result: false, isClose: false });
        }
        else if (!this.assignInfos[0].assignees.length) { //没有选人
            this.notify.warning(this.i18nService.getValue('task.selectPlaceholder') + this.i18nService.getValue('task.receiver'));
            this.subject.next({ result: false, isClose: false });
        }
        else if (!this.urgeHandleComponent.urgeMessageSubject) {
            this.notify.warning(this.i18nService.getValue('task.noUrgeSubject'));
            this.subject.next({ result: false, isClose: false });
        }
        else if (!this.urgeHandleComponent.urgeMessageContent) {
            this.notify.warning(this.i18nService.getValue('task.noUrgeContent'));
            this.subject.next({ result: false, isClose: false });
        }
        else {
            /** @type {?} */
            let context = new UrgeHandleContext();
            context.procInstId = this.processInstanceId;
            context.urgeUsers = this.urgeHandleResponse.urgeUsers.filter(a => this.assignInfos[0].assignees.some(b => b.id == a.id));
            context.urgeMessageSubject = this.urgeHandleComponent.urgeMessageSubject;
            context.urgeMessageContent = this.urgeHandleComponent.urgeMessageContent;
            context.addReminder = this.addReminder;
            /** @type {?} */
            const load = this.loadingService.show();
            this.taskService.urgeHandle(context).subscribe(re => {
                this.notify.success(this.i18nService.getValue('cueWords.success'));
                this.subject.next({ result: true, isClose: false });
                load.close();
            }, error => {
                load.close();
                this.subject.next({ result: false, isClose: false });
                this.taskService.error(error);
            });
        }
    }
    /**
     * 取消征询提交
     * @private
     * @return {?}
     */
    cancelConsultSubmit() {
        /** @type {?} */
        let context = new WorkItemExecuteParam();
        context.workItemId = this.workItemId;
        context.comment = this.comment;
        context.addendum = this.addendum;
        /** @type {?} */
        const load = this.loadingService.show();
        this.taskService.cancelConsult(context).subscribe(() => {
            load.close();
            this.notify.success(this.i18nService.getValue('cueWords.success'));
            this.subject.next({ result: true, isClose: false });
        }, error => {
            load.close();
            this.subject.next({ result: false, isClose: false });
            this.taskService.error(error);
        });
    }
    /**
     * @private
     * @return {?}
     */
    completeSubmit() {
        // 通过、驳回、其他第三方动作
        /** @type {?} */
        const context = {
            workItemId: this.workItemId,
            conclusionValue: this.actionEntity.code,
            comment: this.comment,
            signAssignees: this.selectedUsers,
            nextFlowNodes: [],
            addendum: this.addendum,
            //动态驳回规则
            dynamicBackWardRule: this.showBackWardConfig.dynamicBackWardRuleAble ? (this.showBackWardConfig.enable ? 'backToThisNode' : 'sequence') : ''
        };
        if (context.signAssignees.length || !this.response || !this.response.simulationPaths.length) { // 加签 or 仿真返回为空，直接往下走
            this.completeTask(context);
        }
        else {
            if (this.selectedNodeId) { // 加签时，选择下一环节被禁用，destNodeId为undefined
                // 加签时，选择下一环节被禁用，destNodeId为undefined
                /** @type {?} */
                const nextFlowNodes = [];
                /** @type {?} */
                const nodes = this.selectedNodeId.split('，');
                for (let i = 0; i < nodes.length; i++) {
                    /** @type {?} */
                    const nextFlowNode = {
                        activityDefinitionId: nodes[i],
                        activityDefinitionName: this.assignInfos[i].activityName,
                        dependency: this.assignInfos[i].dependency,
                        selectedAssignees: this.assignInfos[i].assigneeInfo ? this.assignInfos[i].assignees : [],
                        assigneeInfo: null,
                        resolved: false,
                        anonymous: this.assignInfos[i].anonymous,
                        anonymousText: this.assignInfos[i].anonymousText
                    };
                    //节点找不到人，且异常提示时，并行网关暂不处理
                    if (this.response && this.response.simulationPaths.length && !this.response.simulationPaths[0].id.startsWith('ParallelGateway')) {
                        if (nodes.length == 1 && nodes[i].startsWith('UserActivity') && this.assignInfos[i].resolved && !this.assignInfos[i].assigneeInfo && !this.assignInfos[i].selectedAssignees.length) {
                            /** @type {?} */
                            const str = this.assignInfos[i].activityName + this.i18nService.getValue('startProcess.node') + this.i18nService.getValue('startProcess.noUser');
                            this.notify.warning(str);
                            this.subject.next({ result: false, isClose: false });
                            return;
                        }
                    }
                    nextFlowNodes.push(nextFlowNode);
                }
                context.nextFlowNodes = nextFlowNodes;
            }
            if (this.destNodes.length > 1 && context.nextFlowNodes.length <= 0) { // 用户没选择跳转节点，不允许提交
                this.notify.warning(this.i18nService.getValue('cueWords.selectNode'));
                this.subject.next({ result: false, isClose: false });
            }
            else if (this.assignInfos.filter(info => info.assigneeInfo && info.assigneeInfo.selectAssignee && !info.assignees.length).length) {
                this.notify.warning(this.i18nService.getValue('task.selectProcessor'));
                this.subject.next({ result: false, isClose: false });
            }
            else {
                this.completeTask(context);
            }
        }
    }
    /**
     * @private
     * @param {?} completeContext
     * @return {?}
     */
    completeTask(completeContext) {
        /** @type {?} */
        const attachmentNecessary = this.actionEntity.parameters.find(entity => entity.code === 'AttachmentNecessary');
        /** @type {?} */
        const certificationNecessary = this.actionEntity.parameters.find(entity => entity.code === 'CertificationNecessary');
        /** @type {?} */
        const commentNecessary = this.actionEntity.parameters.find(entity => entity.code === 'CommentNecessary');
        if (attachmentNecessary && attachmentNecessary.value === 'true' && (!completeContext.addendum.attachment || completeContext.addendum.attachment === '[]')) {
            this.notify.warning(this.i18nService.getValue('cueWords.attachmentsRequired'));
            this.subject.next({ result: false, isClose: false });
        }
        else if (commentNecessary && commentNecessary.value === 'true' && !completeContext.comment) {
            this.notify.warning(this.i18nService.getValue('cueWords.inputOpinion'));
            this.subject.next({ result: false, isClose: false });
        }
        else if (this.comment.length > 300) {
            this.notify.warning(this.i18nService.getValue('task.commentTooLong'));
            this.subject.next({ result: false, isClose: false });
        }
        else {
            if (certificationNecessary && certificationNecessary.value === 'true') {
                this.verifySignature(() => {
                    completeContext.verifySigned = this.verifySigned;
                    this.taskComplete(completeContext);
                });
                /** @type {?} */
                const msg = [this.workItemId];
                gspCA.getSignedMsg(msg);
            }
            else {
                this.taskComplete(completeContext);
            }
        }
    }
    /**
     * @private
     * @param {?} hander
     * @return {?}
     */
    executeFormActionsAfterCompleteTask(hander) {
        /** @type {?} */
        const postActions = this.billMethodConfigs.filter(action => action.action === this.actionEntity.code && action.executionTime === 'Post').sort((x, y) => x.sortOrder - y.sortOrder);
        // 如果表单注册了事件
        if (this.ifRegistered && this.formObject && postActions.length) {
            this.executePostFormActions(postActions, hander);
        }
        else {
            hander();
        }
    }
    /**
     * @private
     * @param {?} formActions
     * @param {?} hander
     * @return {?}
     */
    executePostFormActions(formActions, hander) {
        if (formActions.length > 0) {
            this.messageSubject = new Subject();
            this.messageSubject.subscribe((re) => {
                console.log(re.data);
                /** @type {?} */
                const data = re.data.data;
                if (data.result === true) {
                    this.executePostFormActions(formActions, hander);
                }
                else {
                    this.subject.next({ result: false, isClose: false }); // 任务办理界面不关闭
                    throw new Error('审批后表单操作执行失败！');
                }
            });
            // 执行表单动作
            /** @type {?} */
            const formAction = formActions.shift();
            this.sendMessage(this.workItemId, formAction);
        }
        else {
            hander();
        }
    }
    //帮助选人后
    /**
     * @param {?} data
     * @return {?}
     */
    afterConfirmForTransfer(data) {
        if (data && data.length) {
            this.selectedUsers = data.map(user => user.id);
            this.selectedUserNgModule = data.map(user => user.name).join();
        }
        else {
            this.selectedUsers = [];
        }
        if (this.actionEntity.code == 'AddSign' && this.addSign.originMultiInstType == MultiInstanceType.Preempt.toString() && this.selectedUsers.length > 1) {
            this.addSign.showMultiInstanceType = true;
        }
        else {
            this.addSign.showMultiInstanceType = false;
        }
    }
    /**
     * @return {?}
     */
    cancel() {
        this.submitResult.isClose = false;
        this.subject.next(this.submitResult);
        return this.subject.asObservable();
    }
    /**
     * @return {?}
     */
    getSubject() {
        return this.subject.asObservable();
    }
    // 下一环节选择后事件
    /**
     * @param {?} data
     * @return {?}
     */
    selectNodeChange(data) {
        this.selectedNodeId = data && data.data && data.data.id;
        if (this.response.simulationPaths[data.index].nodeInfoList.every(node => node.resolved === true)) { // 已预解析参与者
            this.setAssignInfo(this.response.simulationPaths[data.index].nodeInfoList);
        }
        else {
            /** @type {?} */
            const nodeIds = this.selectedNodeId.split('，').map(node => `"${node}"`).join();
            // 注意一个中文逗号一个英文逗号
            /** @type {?} */
            const load = this.loadingService.show();
            this.taskService.getSimulationAssigneeInfo(this.workItemId, nodeIds).subscribe((nodeInfoList) => {
                load.close();
                this.setAssignInfo(nodeInfoList);
            }, error => {
                load.close();
                this.taskService.error(error);
            });
        }
    }
    // 下一环节清空后事件
    /**
     * @return {?}
     */
    selectNodeClear() {
        this.selectedNodeId = null;
        this.assignInfos = [{
                selectedAssignees: [],
                assigneeInfo: null,
                assignees: [],
                activityName: '',
                dependency: '',
                anonymous: false,
                anonymousText: '',
                resolved: false,
            }];
    }
    /**
     * @param {?} data
     * @param {?} index
     * @return {?}
     */
    afterConfirmForAssign(data, index) {
        this.assignInfos[index].assignees = data;
    }
    /**
     * 上传附件后事件
     * @param {?} data
     * @return {?}
     */
    addAttachment(data) {
        this.addendum.attachment = JSON.stringify(data);
    }
    /**
     * 手写签名后事件
     * @param {?} data
     * @return {?}
     */
    addSignature(data) {
        if (data) {
            /** @type {?} */
            const signInfo = {
                id: data,
                waterMarking: null
            };
            this.addendum.signature = JSON.stringify(signInfo);
        }
        else {
            this.addendum.signature = '';
        }
    }
    // 以服务方式打开组件时，左右加上padding
    /**
     * @return {?}
     */
    addPadding() {
        this.cls = 'f-utils-fill-flex-column h-100 px-4 py-2';
    }
    /**
     * @private
     * @param {?} workItemId
     * @param {?} action
     * @return {?}
     */
    sendMessage(workItemId, action) {
        if (this.iframe) {
            /** @type {?} */
            const iframeWindow = this.iframe.nativeElement.contentWindow;
            /** @type {?} */
            const message = {
                target: workItemId,
                data: {
                    command: action.method,
                    arguments: action.methodParameters
                }
            };
            iframeWindow.postMessage(message, this.POST_MESSAGE_TARGET);
        }
        else {
            throw new Error('表单尚未加载!');
        }
    }
    // 提交审批前的数字签名及验签
    /**
     * @param {?} handler
     * @return {?}
     */
    verifySignature(handler) {
        /** @type {?} */
        const that = this;
        if (((/** @type {?} */ (window))).gspframeworkService &&
            ((/** @type {?} */ (window))).gspframeworkService.rtf) {
            ((/** @type {?} */ (window))).gspframeworkService.rtf.caEvent.on(((/** @type {?} */ (window))).gspframeworkService.rtf.caEvent.signedMsgOverToken(), 'signedMsgOver', function signMsgOver(signedData) {
                if (signedData && signedData[0] === 'true' && signedData.length > 0) {
                    // 证书对象
                    /** @type {?} */
                    const cert = gspCA.getCurCert();
                    // 验签参数
                    that.verifySigned = {
                        // 要验证的证书base64编码的字符流(certkey)
                        certBase64Info: gspCA.getCertBase64(cert),
                        // 签名原信息
                        msg: [that.workItemId],
                        // 要签名后信息
                        signedmsg: signedData[1][0],
                        // 用户使用场景，目前未使用，可以为空
                        useCase: null,
                    };
                    handler();
                }
                else {
                    that.loadingService.close();
                    that.subject.next({ result: false, isClose: false });
                    that.notify.error(signedData[1]);
                    throw new Error(signedData[1]);
                }
            });
        }
    }
    // 通过、驳回、其他第三方动作
    /**
     * @param {?} completeContext
     * @return {?}
     */
    taskComplete(completeContext) {
        this.taskService.complete(completeContext).subscribe((cr) => {
            this.executeFormActionsAfterCompleteTask(() => {
                if (cr.needInteraction) { // 通过后指派场景
                    if (this.origin == ActionOrigin.TaskCenter) {
                        this.subject.next({ result: true, isClose: false });
                    }
                    else {
                        this.subject.next({ result: false, isClose: false }); //关掉loading
                    }
                    this.notify.info(this.i18nService.getValue('cueWords.select')
                        + '【' + cr.nextFlowNodes[0].activityDefinitionName + '】'
                        + this.i18nService.getValue('cueWords.processor'));
                    /** @type {?} */
                    let task = new TaskEntity();
                    /** @type {?} */
                    let action = new TaskAction();
                    task.sourceId = cr.nextFlowNodes[0].assigneeInfo.workItemId;
                    action.code = 'AssignUser';
                    action.name = this.i18nService.getValue('cueWords.assignUser');
                    this.handlerService.execute(task, action).subscribe(re => {
                        if (re) {
                            this.subject.next({ result: true, isClose: true });
                        }
                    });
                }
                else {
                    if (completeContext.conclusionValue === 'Pass') {
                        this.notify.success(this.i18nService.getValue('cueWords.successPass'));
                    }
                    else if (completeContext.conclusionValue === 'Back') {
                        this.notify.success(this.i18nService.getValue('cueWords.successBack'));
                    }
                    else {
                        this.notify.success(this.i18nService.getValue('cueWords.success'));
                    }
                    this.subject.next({ result: true, isClose: true });
                }
            });
        }, (error) => {
            this.subject.next({ result: false, isClose: false });
            this.taskService.error(error);
        });
    }
}
/**
 * 消息监听处理方法
 */
TaskExecuteComponent.func = null;
TaskExecuteComponent.decorators = [
    { type: Component, args: [{
                selector: 'lib-task-execute',
                template: "<!-- \u610F\u89C1\u8F93\u5165 -->\r\n<wf-comment\r\n  *ngIf=\"!showUrgeMessageSubject\"\r\n  class=\"w-100\"\r\n  name=\"comment\"\r\n  [(ngModel)]=\"comment\"\r\n  [placeholder]=\"commentPlaceHolder\"\r\n  [processInstanceId]=\"processInstanceId\"\r\n  [showAttachment]=\"showAttachment\"\r\n  [showCommonComment]=\"showCommonComment\"\r\n  [showSign]=\"showSign\"\r\n  [textAreaHeight]=\"textAreaHeight\"\r\n  [TaskCenterConfig]=\"configList\"\r\n  (attachment)=\"addAttachment($event)\"\r\n  (signature)=\"addSignature($event)\"\r\n>\r\n</wf-comment>\r\n\r\n<!--\u50AC\u529E\u6D88\u606F-->\r\n<urge-handle\r\n  *ngIf=\"showUrgeMessageSubject\"\r\n  [placeholder]=\"commentPlaceHolder\"\r\n  [showMessageSubject]=\"showUrgeMessageSubject\"\r\n  [urgeMessageSubject]=\"urgeMessageSubject\"\r\n  [urgeMessageContent]=\"urgeMessageContent\"\r\n  [subjectEditable]=\"subjectEditable\"\r\n  [contentEditable]=\"contentEditable\"\r\n  [textAreaHeight]=\"textAreaHeight\"\r\n>\r\n</urge-handle>\r\n\r\n<!-- \u5BA1\u6279\u8BB0\u5F55\u9690\u85CF\uFF08\u4EC5\u5BF9\u81EA\u5DF1\u53EF\u89C1\uFF09 -->\r\n<div\r\n  *ngIf=\"ifShowCommentToMySelf\"\r\n  class=\"custom-control custom-checkbox custom-control-inline\"\r\n  style=\"margin-bottom: 10px\"\r\n>\r\n  <input\r\n    type=\"checkbox\"\r\n    class=\"custom-control-input\"\r\n    [(ngModel)]=\"hideComment\"\r\n    id=\"taskcenterhidecomment\"\r\n    name=\"taskcenterhidecomment\"\r\n  />\r\n  <label class=\"custom-control-label\" for=\"taskcenterhidecomment\">{{\r\n    \"static.hideComment\" | translate\r\n  }}</label>\r\n</div>\r\n\r\n<!-- \u4E0B\u4E00\u73AF\u8282 -->\r\n<div *ngIf=\"ifSelectNode\" class=\"wf-task-handler-help-div\">\r\n  <div class=\"wf-task-handler-help-text\">{{ selectNodeText }}</div>\r\n  <div class=\"d-flex\" style=\"flex: 1\">\r\n    <farris-combo-list\r\n      style=\"flex: 1\"\r\n      [data]=\"destNodes\"\r\n      [editable]=\"false\"\r\n      [textField]=\"'name'\"\r\n      [valueField]=\"'id'\"\r\n      [idField]=\"'id'\"\r\n      [readonly]=\"destNodes.length > 1 ? false : true\"\r\n      (selectChange)=\"selectNodeChange($event)\"\r\n      (clear)=\"selectNodeClear()\"\r\n      [placeholder]=\"nodePlaceholder\"\r\n      [forcePlaceholder]=\"true\"\r\n    >\r\n    </farris-combo-list>\r\n  </div>\r\n</div>\r\n\r\n<!-- \u529E\u7406\u4EBA\u5458\uFF08\u6307\u6D3E\uFF09 -->\r\n<div *ngIf=\"ifAssignUser || ifUrgeType\">\r\n  <lib-assignee-info\r\n    *ngFor=\"let assignInfo of assignInfos; let i = index\"\r\n    [assigneeInfo]=\"assignInfo.assigneeInfo\"\r\n    [setAnonymous]=\"assignInfo.anonymous\"\r\n    [setAnonymousText]=\"assignInfo.anonymousText\"\r\n    [selectedAssignees]=\"assignInfo.selectedAssignees\"\r\n    [activityName]=\"\r\n      assignInfos.length > 1\r\n        ? assignInfo.activityName\r\n        : ifUrgeType\r\n        ? ('task.urgeText' | translate)\r\n        : ''\r\n    \"\r\n    [ifShowBlank]=\"assignInfos.length > 1 ? false : true\"\r\n    [wfContext]=\"wfContext\"\r\n    (afterConfirm)=\"afterConfirmForAssign($event, i)\"\r\n  ></lib-assignee-info>\r\n</div>\r\n\r\n<!-- \u79FB\u4EA4\u3001\u52A0\u7B7E\u3001\u5F81\u8BE2\u3001\u77E5\u4F1A \u4EBA\u5458\u5E2E\u52A9-->\r\n<lib-assignee-info\r\n  *ngIf=\"ifSelectUser\"\r\n  [activityName]=\"selectUserText\"\r\n  [singleSelect]=\"singleSelect\"\r\n  [filter]=\"filter\"\r\n  [disabled]=\"false\"\r\n  [placeholder]=\"'task.selectPlaceholder' | translate\"\r\n  [allowGlobalAssign]=\"true\"\r\n  [wfContext]=\"wfContext\"\r\n  (afterConfirm)=\"afterConfirmForTransfer($event)\"\r\n>\r\n</lib-assignee-info>\r\n\r\n<!-- \u52A0\u7B7E -->\r\n<!-- \u5BA1\u6279\u7B56\u7565 -->\r\n<div *ngIf=\"addSign.showMultiInstanceType\" class=\"wf-task-handler-help-div\">\r\n  <div class=\"wf-task-handler-help-text\">\r\n    {{ \"addSign.multiInstanceType\" | translate }}\r\n  </div>\r\n  <div class=\"d-flex\" style=\"flex: 1\">\r\n    <farris-radiogroup\r\n      [(ngModel)]=\"addSign.curMultiInstType\"\r\n      [data]=\"addSign.multiInstanceType\"\r\n      [horizontal]=\"true\"\r\n    >\r\n    </farris-radiogroup>\r\n  </div>\r\n</div>\r\n\r\n<!-- \u5141\u8BB8\u518D\u52A0\u7B7E -->\r\n<div *ngIf=\"addSign.showSignToSign\" class=\"wf-task-handler-help-div\">\r\n  <div class=\"wf-task-handler-help-text\">\r\n    {{ \"addSign.allowSignToSign\" | translate }}{{ actionEntity.name }}\r\n  </div>\r\n  <farris-switch\r\n    [(ngModel)]=\"addSign.allowSignToSIgn\"\r\n    [size]=\"'small'\"\r\n    trueValue=\"true\"\r\n    falseValue=\"false\"\r\n  >\r\n  </farris-switch>\r\n</div>\r\n\r\n<!-- \u9A73\u56DE\u540E\u518D\u6B21\u63D0\u4EA4\u65F6\u76F4\u63A5\u56DE\u5230\u672C\u8282\u70B9 -->\r\n<div\r\n  *ngIf=\"showBackWardConfig.dynamicBackWardRuleAble\"\r\n  class=\"wf-task-handler-help-div\"\r\n>\r\n  <div class=\"wf-task-handler-help-text\">\r\n    {{ actionEntity.name\r\n    }}{{ \"backWardConfig.allowResubmitToThisNode\" | translate }}\r\n  </div>\r\n  <farris-switch\r\n    [(ngModel)]=\"showBackWardConfig.enable\"\r\n    [size]=\"'small'\"\r\n    trueValue=\"true\"\r\n    falseValue=\"false\"\r\n  >\r\n  </farris-switch>\r\n</div>\r\n\r\n<!-- \u6309\u94AE -->\r\n<ng-template #taskExecuteButtons>\r\n  <button type=\"button\" class=\"btn btn-secondary\" (click)=\"cancel()\">\r\n    {{ \"static.footCancel\" | translate }}\r\n  </button>\r\n  <button\r\n    type=\"button\"\r\n    class=\"btn btn-primary\"\r\n    (click)=\"submit()\"\r\n    [disabled]=\"submitDisable\"\r\n  >\r\n    {{ \"static.footOk\" | translate }}\r\n  </button>\r\n</ng-template>\r\n",
                styles: [".wf-task-handler-help-div{font-size:13px;color:#2d2f33;margin-bottom:20px}.wf-task-handler-help-div-submit{margin-bottom:20px}.wf-task-handler-help-text{padding-bottom:8px;white-space:nowrap;overflow:hidden;text-overflow:ellipsis}"]
            }] }
];
/** @nocollapse */
TaskExecuteComponent.ctorParameters = () => [
    { type: TaskService },
    { type: NotifyService },
    { type: I18nService },
    { type: WfTaskHandlerService },
    { type: LoadingService },
    { type: MessagerService },
    { type: Injector },
    { type: ChangeDetectorRef }
];
TaskExecuteComponent.propDecorators = {
    buttons: [{ type: ViewChild, args: ['taskExecuteButtons',] }],
    sysUserHelp: [{ type: ViewChild, args: [SysFarrisLookupComponent,] }],
    urgeHandleComponent: [{ type: ViewChild, args: [UrgeHandleComponent,] }],
    cls: [{ type: HostBinding, args: ['class',] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * 提交审批上下文参数
 */
class StartProcessPayload {
}
class FlowNodeInfo {
}
class CancelSubmitPayload {
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @enum {string} */
const MessageType = {
    SubmitSuccess: 'SubmitSuccess',
    SubmitFailed: 'SubmitFailed',
    InfoSelectProcess: 'InfoSelectProcess',
    InfoSelectNode: 'InfoSelectNode',
    InfoSelectParticipant: 'InfoSelectParticipant',
    Cancel: 'Cancel',
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * 提交审批时，记下选择的流程
 */
class StartProcessCache {
}
/**
 * 提交审批时，记下选择的流程
 */
class SelectedProcessItem {
    /**
     * @param {?} processCategoryId
     * @param {?} processDefinitionId
     * @param {?} processDefinitionName
     */
    constructor(processCategoryId, processDefinitionId, processDefinitionName) {
        /**
         * 记录时间
         */
        this.logTime = new Date();
        this.processCategory = processCategoryId;
        this.processDefinitionId = processDefinitionId;
        this.processDefinitionName = processDefinitionName;
        this.logTime = new Date();
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class ProcessSelectorComponent {
    // task center-ui中start-process-menu使用了此选择器，构造方法改动时，需重新编译
    /**
     * @param {?} taskService
     * @param {?} loadingService
     * @param {?} notify
     * @param {?} i18nService
     * @param {?} messager
     * @param {?} injector
     * @param {?} handlerService
     */
    constructor(taskService, loadingService, notify, i18nService, messager, injector, handlerService) {
        this.taskService = taskService;
        this.loadingService = loadingService;
        this.notify = notify;
        this.i18nService = i18nService;
        this.messager = messager;
        this.injector = injector;
        this.handlerService = handlerService;
        this.destProcesses = []; //候选流程
        //候选流程
        this.destNodes = []; //候选下一环节
        //保存模拟流程后返回的内容，选择节点时使用
        this.assignInfos = [{
                selectedAssignees: [],
                assigneeInfo: null,
                assignees: [],
                activityName: '',
                dependency: '',
                anonymous: false,
                anonymousText: null,
                resolved: false,
            }]; //节点返回的指派信息（多个）
        //选择的下一环节ID，后续环节id的拼接
        this.payload = new StartProcessPayload; //保存表单上传来的payload
        //保存表单上传来的payload
        this.subject = new Subject(); //返回bool
        //返回bool
        this.subjectWithResponse = new Subject(); //返回流程上下文
        //返回流程上下文
        this.subjectCancel = new Subject(); //点击取消后的subject
        //点击取消后的subject
        this.submitDisable = false; //提交按钮是否禁用
        this.showButtons = false;
        this.curLanguage = localStorage.getItem('languageCode') || 'zh-CHS'; //系统当前语言
        //选择流程的placeholder
        this.wfContext = new WfContext(); //工作流上下文
        //确认取消按钮
        this.openFromIframe = false; //是否从iframe打开，应用IDP提交审批集成
    }
    /**
     * @return {?}
     */
    ngOnInit() {
    }
    //是否从iframe打开，应用IDP提交审批集成
    /**
     * @param {?} dataId
     * @return {?}
     */
    set dataId(dataId) {
        if (!dataId) {
            throw new Error("dataId为空");
        }
        this._dataId = dataId;
    }
    /**
     * @param {?} bizDefKey
     * @return {?}
     */
    set bizDefKey(bizDefKey) {
        if (!bizDefKey) {
            throw new Error("流程分类id为空");
        }
        this.showButtons = true;
        this._bizDefKey = bizDefKey;
        /** @type {?} */
        var payload = new StartProcessPayload();
        payload.dataId = this._dataId;
        payload.bizDefKey = this._bizDefKey;
        this.setParam(payload);
    }
    /**
     * @param {?} param
     * @return {?}
     */
    setParam(param) {
        /** @type {?} */
        let subject = new Subject();
        if (!param) {
            return;
        }
        this.payload.id = param.id;
        this.payload.processDefinitionId = param.processDefinitionId;
        this.payload.processDefinitionKey = param.processDefinitionKey;
        this.payload.bizDefKey = param.bizDefKey;
        this.payload.dataModelId = param.dataModelId;
        this.payload.dataId = param.dataId;
        this.payload.name = param.name;
        this.payload.startUserId = param.startUserId;
        this.payload.nextFlowNodes = [];
        this.wfContext.processCategoryId = param.bizDefKey;
        this.startProcessSimulate(this.payload, subject);
        return subject.asObservable();
    }
    /**
     * @param {?} payload
     * @param {?} subject
     * @return {?}
     */
    startProcessSimulate(payload, subject) {
        /** @type {?} */
        const load = this.loadingService.show();
        this.taskService.startProcessSimulate(payload).subscribe((response) => {
            load.close();
            subject.next(true);
            this.response = response;
            this.destProcesses = response.procDefs.map(process => ({ id: process.procDefId, name: process.procDefName + `(v${process.version}.0)` })); //增加流程的版本信息
            if (this.destProcesses.length === 1) { //只有一个候选流程时
                this.selectedProcessId = this.destProcesses[0].id;
                this.setNextNode(response);
                this.processPlaceholder = this.destProcesses[0].name;
            }
            else { //多个流程时，取上一次选择的
                //多个流程时，取上一次选择的
                /** @type {?} */
                const selectedProcessId = this.getSelectedProcessCache(this.payload.bizDefKey);
                if (selectedProcessId && this.destProcesses.findIndex(p => p.id === selectedProcessId.processDefinitionId) > -1) {
                    this.getDestNodes(selectedProcessId.processDefinitionId);
                    this.processPlaceholder = selectedProcessId.processDefinitionName;
                }
                else {
                    this.processPlaceholder = this.i18nService.getValue('task.selectPlaceholder');
                }
            }
        }, error => {
            load.close();
            subject.error(error);
            this.taskService.error(error);
        });
    }
    /**
     * 选择某个流程后
     * @param {?} data
     * @return {?}
     */
    selectProcessChange(data) {
        this.nodeCombo.onClear();
        this.getDestNodes(data.data.id);
    }
    /**
     * 根据选择的流程定义id获取下一环节信息
     * @private
     * @param {?} selectedProcessId
     * @return {?}
     */
    getDestNodes(selectedProcessId) {
        this.selectedProcessId = selectedProcessId;
        this.destNodes = [];
        this.nodePlaceholder = '';
        this.clearAssignInfos();
        /** @type {?} */
        var payload = new StartProcessPayload();
        payload.processDefinitionId = this.selectedProcessId;
        payload.dataId = this.payload.dataId;
        /** @type {?} */
        const load = this.loadingService.show();
        this.taskService.startProcessSimulate(payload).subscribe((response) => {
            load.close();
            this.response = response;
            this.setNextNode(response);
        }, error => {
            load.close();
            this.taskService.error(error);
        });
    }
    /**
     * 选择节点后事件
     * @param {?} data
     * @return {?}
     */
    selectNodeChange(data) {
        this.clearAssignInfos();
        this.selectedNodeId = data.data.id;
        /** @type {?} */
        const nodeNames = data.data.name.split('，');
        if (this.response.simulationPaths[data.index].nodeInfoList.every(node => node.resolved === true)) { //已预解析参与者
            this.setAssignInfo(this.response.simulationPaths[data.index]);
        }
        else { //未预解析参与者
            //未预解析参与者
            /** @type {?} */
            let payload = new StartProcessPayload();
            payload.processDefinitionId = this.selectedProcessId;
            payload.dataId = this.payload.dataId;
            payload.nextFlowNodes = [];
            this.selectedNodeId.split('，').forEach((nodeId, index) => {
                /** @type {?} */
                let nextFlowNode = new FlowNodeInfo();
                nextFlowNode.activityDefinitionId = nodeId;
                nextFlowNode.activityDefinitionName = nodeNames[index];
                payload.nextFlowNodes.push(nextFlowNode);
            });
            /** @type {?} */
            const load = this.loadingService.show();
            this.taskService.startProcessSimulate(payload).subscribe((response) => {
                load.close();
                this.setAssignInfo(response.simulationPaths[0]); //选择的下一环节应该在同一条路径上，故取simulationPaths[0]
            }, error => {
                load.close();
                this.taskService.error(error);
            });
        }
    }
    /**
     * 实现真正的提交
     * @return {?}
     */
    startProcessSubmit() {
        if (!this.selectedProcessId) {
            this.openFromIframe ? this.messager.warning(this.i18nService.getValue('startProcess.selectProcess')) :
                this.notify.warning(this.i18nService.getValue('startProcess.selectProcess'));
            return;
        }
        if (!this.selectedNodeId) {
            this.openFromIframe ? this.messager.warning(this.i18nService.getValue('startProcess.selectNode')) :
                this.notify.warning(this.i18nService.getValue('startProcess.selectNode'));
            return;
        }
        if (this.assignInfos.filter(info => (info.assigneeInfo || info.selectedAssignees.length) && !info.assignees.length).length) { //空参与者策略时，不提示选人
            this.openFromIframe ? this.messager.warning(this.i18nService.getValue('task.selectProcessor')) :
                this.notify.warning(this.i18nService.getValue('task.selectProcessor'));
            return;
        }
        /** @type {?} */
        const nodes = this.selectedNodeId.split('，');
        for (let i = 0; i < nodes.length; i++) {
            /** @type {?} */
            let nextFlowNode = {
                activityDefinitionId: nodes[i],
                activityDefinitionName: this.assignInfos[i].activityName,
                dependency: this.assignInfos[i].dependency,
                selectedAssignees: this.assignInfos[i].assigneeInfo ? this.assignInfos[i].assignees : [],
                assigneeInfo: null,
                resolved: false,
                anonymous: false,
                anonymousText: ''
            }
            //节点找不到人，且异常提示，前端控制住，不允许走提交请求（构件事务问题）。并行场景下暂不处理
            ;
            //节点找不到人，且异常提示，前端控制住，不允许走提交请求（构件事务问题）。并行场景下暂不处理
            if (this.response && this.response.simulationPaths.length && !this.response.simulationPaths[0].id.startsWith('ParallelGateway')) {
                if (nodes.length == 1 && nodes[i].startsWith('UserActivity') && this.assignInfos[i].resolved && !this.assignInfos[i].assigneeInfo && !this.assignInfos[i].selectedAssignees.length) {
                    /** @type {?} */
                    const str = this.assignInfos[i].activityName + this.i18nService.getValue('startProcess.node') + this.i18nService.getValue('startProcess.noUser');
                    this.openFromIframe ? this.messager.warning(str) : this.notify.warning(str);
                    return;
                }
            }
            this.payload.nextFlowNodes.push(nextFlowNode);
        }
        this.payload.processDefinitionId = this.selectedProcessId;
        this.submitDisable = true;
        /** @type {?} */
        const load = this.loadingService.show();
        this.taskService.startProcess(this.payload).subscribe((response) => {
            load.close();
            this.submitDisable = false;
            this.subject.next(true);
            this.subjectWithResponse.next(response);
            /** @type {?} */
            let messageAfterSubmit = this.i18nService.getValue('startProcess.submitSuccess');
            if (this.openFromIframe) {
                ((/** @type {?} */ (window.parent))).gspWfService.eventHandler({ data: { type: MessageType.SubmitSuccess, message: messageAfterSubmit } });
            }
            else {
                this.handlerService.handleSubmitMessage(ConfigCode.Info_After_Submit, this.payload.bizDefKey);
            }
            if (!this.openFromIframe && response.needInteraction) { //提交审批后需要指派场景
                this.notify.info(this.i18nService.getValue('cueWords.select')
                    + response.nextFlowNodes[0].activityDefinitionName
                    + this.i18nService.getValue('cueWords.processor'));
                /** @type {?} */
                let task = new TaskEntity();
                /** @type {?} */
                let action = new TaskAction();
                task.sourceId = response.nextFlowNodes[0].assigneeInfo.workItemId;
                action.code = 'AssignUser';
                action.name = this.i18nService.getValue('cueWords.assignUser');
                this.handlerService.execute(task, action).subscribe(re => { });
            }
            this.setSelectedProcessCache();
        }, (error) => {
            load.close();
            this.payload.nextFlowNodes = [];
            this.submitDisable = false;
            this.subject.next(false); //已经有人用了这个subject，提交失败的话返回false by fangpengfei@20210324
            this.taskService.error(error);
        });
    }
    /**
     * 选择流程清空
     * @return {?}
     */
    selectProcessClear() {
        this.selectedProcessId = '';
        this.destNodes = [];
        this.nodePlaceholder = '';
        this.selectedNodeId = '';
        this.clearAssignInfos();
        this.response = null;
    }
    /**
     * 选择节点清空
     * @return {?}
     */
    selectNodeClear() {
        this.selectedNodeId = '';
        this.clearAssignInfos();
    }
    /**
     * 用户帮助选人
     * @param {?} data
     * @param {?} index
     * @return {?}
     */
    afterConfirm(data, index) {
        this.assignInfos[index].assignees = data;
    }
    /**
     * 弹框点击取消
     * @return {?}
     */
    cancel() {
        if (this.openFromIframe) {
            ((/** @type {?} */ (window.parent))).gspWfService.eventHandler({ data: { type: MessageType.Cancel, message: '' } });
        }
        else {
            this.subjectCancel.next(false);
        }
    }
    /**
     * 获取提交审批后返回值（bool型，兼容历史）
     * @return {?}
     */
    getSubject() {
        return this.subject.asObservable();
    }
    /**
     * 获取提交审批后返回值（实体型，带流程上下文）
     * @return {?}
     */
    getSubjectWithResponse() {
        return this.subjectWithResponse.asObservable();
    }
    /**
     * 点击取消后的subject，关闭窗口使用
     * @return {?}
     */
    getSubjectCancel() {
        return this.subjectCancel.asObservable();
    }
    /**
     * 设置下一环节
     * @private
     * @param {?} response
     * @return {?}
     */
    setNextNode(response) {
        this.destNodes = response.simulationPaths && response.simulationPaths.map(path => ({
            id: path.nodeInfoList.map(node => node.activityDefinitionId).join('，'),
            name: path.nodeInfoList.map(node => node.activityDefinitionName).join('，')
        }));
        //处理默认分支，无默认分支返回-1
        /** @type {?} */
        const defaultIndex = response.simulationPaths.findIndex(a => a.default);
        if (defaultIndex > -1) {
            this.selectedNodeId = this.destNodes[defaultIndex].id;
            this.nodePlaceholder = this.destNodes[defaultIndex].name.indexOf('，') > -1 ? response.simulationPaths[defaultIndex].name : this.destNodes[defaultIndex].name;
            this.setAssignInfo(response.simulationPaths[defaultIndex]);
        }
        else {
            this.nodePlaceholder = this.i18nService.getValue('task.selectPlaceholder');
        }
    }
    /**
     * 设置当前指派信息帮助参数
     * @private
     * @param {?} simulationPaths
     * @return {?}
     */
    setAssignInfo(simulationPaths) {
        this.assignInfos = [];
        this.selectedNodeId.split('，').forEach(nodeId => {
            /** @type {?} */
            const node = simulationPaths.nodeInfoList.find(node => node.activityDefinitionId === nodeId);
            if (node) {
                this.assignInfos.push({
                    selectedAssignees: node.selectedAssignees,
                    assigneeInfo: node.assigneeInfo,
                    assignees: node.selectedAssignees.map(user => { return { id: user.id, name: user.name }; }),
                    activityName: node.activityDefinitionName,
                    dependency: node.dependency,
                    anonymous: node.anonymous,
                    anonymousText: node.anonymousText,
                    resolved: node.resolved
                });
            }
            else {
                this.assignInfos.push({
                    selectedAssignees: [],
                    assigneeInfo: null,
                    assignees: [],
                    activityName: '',
                    dependency: '',
                    anonymous: false,
                    anonymousText: '',
                    resolved: false,
                });
            }
        });
    }
    /**
     * 清空当前指派信息帮助参数
     * @private
     * @return {?}
     */
    clearAssignInfos() {
        this.assignInfos = [{
                selectedAssignees: [],
                assigneeInfo: null,
                assignees: [],
                activityName: '',
                dependency: '',
                anonymous: false,
                anonymousText: '',
                resolved: false,
            }];
    }
    /**
     * 获取浏览器缓存，上次流程选择的结果
     * @private
     * @param {?} processCategoryId
     * @return {?}
     */
    getSelectedProcessCache(processCategoryId) {
        /** @type {?} */
        let browserCache = (/** @type {?} */ (JSON.parse(localStorage.getItem("gspWfStartProcess"))));
        if (browserCache && browserCache.selectedProcessList) {
            return browserCache.selectedProcessList.find(a => a.processCategory == processCategoryId);
        }
        return undefined;
    }
    /**
     * 浏览器缓存记下流程选择的结果
     * @private
     * @return {?}
     */
    setSelectedProcessCache() {
        /** @type {?} */
        const processCategoryId = this.payload.bizDefKey;
        /** @type {?} */
        const processDefinitionId = this.payload.processDefinitionId;
        /** @type {?} */
        let process = this.destProcesses.find(a => a.id == processDefinitionId);
        /** @type {?} */
        const processDefinitionName = process && process.name;
        /** @type {?} */
        let browserCache = (/** @type {?} */ (JSON.parse(localStorage.getItem("gspWfStartProcess"))));
        if (browserCache && browserCache.selectedProcessList) {
            /** @type {?} */
            let selectedProcessList = browserCache.selectedProcessList;
            if (selectedProcessList.findIndex(a => a.processCategory == processCategoryId) > -1) {
                selectedProcessList.map(item => {
                    if (item.processCategory == processCategoryId) {
                        item.processDefinitionId = processDefinitionId;
                        item.processDefinitionName = processDefinitionName;
                        item.logTime = new Date();
                    }
                });
                browserCache.selectedProcessList = selectedProcessList;
                localStorage.setItem("gspWfStartProcess", JSON.stringify(browserCache));
            }
            else {
                /** @type {?} */
                let item = new SelectedProcessItem(processCategoryId, processDefinitionId, processDefinitionName);
                selectedProcessList.push(item);
                browserCache.selectedProcessList = selectedProcessList;
                localStorage.setItem("gspWfStartProcess", JSON.stringify(browserCache));
            }
        }
        else {
            /** @type {?} */
            let browserCache = new StartProcessCache();
            /** @type {?} */
            let selectedProcessList = [];
            /** @type {?} */
            let item = new SelectedProcessItem(processCategoryId, processDefinitionId, processDefinitionName);
            selectedProcessList.push(item);
            browserCache.selectedProcessList = selectedProcessList;
            localStorage.setItem("gspWfStartProcess", JSON.stringify(browserCache));
        }
    }
}
ProcessSelectorComponent.decorators = [
    { type: Component, args: [{
                selector: 'lib-process-selector',
                template: "<div style=\"padding: 10px 20px; overflow: hidden; background-color: white;\">\r\n  <!-- \u9009\u62E9\u6D41\u7A0B\u5B9A\u4E49\uFF0C\u4E0B\u62C9 -->\r\n  <div class=\"wf-task-handler-help-div wf-task-handler-help-div-submit\">\r\n    <div class=\"wf-task-handler-help-text\">\r\n      {{ \"startProcess.title\" | translate }}\r\n    </div>\r\n    <div class=\"d-flex\" style=\"flex: 1;\">\r\n      <farris-combo-list style=\"flex: 1;\"\r\n        [data]=\"destProcesses\"\r\n        [editable]=\"false\"\r\n        [textField]=\"'name'\"\r\n        [valueField]=\"'id'\"\r\n        [idField]=\"'id'\"\r\n        [readonly]=\"destProcesses.length > 1 ? false : true\"\r\n        (selectChange)=\"selectProcessChange($event)\"\r\n        (clear)=\"selectProcessClear()\"\r\n        [placeholder]=\"processPlaceholder\"\r\n        [forcePlaceholder]=\"true\"\r\n      >\r\n      </farris-combo-list>\r\n    </div>\r\n  </div>\r\n\r\n  <!-- \u4E0B\u4E00\u8282\u70B9\uFF0C\u4E0B\u62C9 -->\r\n  <div class=\"wf-task-handler-help-div wf-task-handler-help-div-submit\">\r\n    <div class=\"wf-task-handler-help-text\">{{ \"task.nextNodeText\" | translate }}</div>\r\n    <div class=\"d-flex\" style=\"flex: 1;\">\r\n      <farris-combo-list style=\"flex: 1;\"\r\n        #nodeCombo\r\n        [data]=\"destNodes\"\r\n        [editable]=\"false\"\r\n        [textField]=\"'name'\"\r\n        [valueField]=\"'id'\"\r\n        [idField]=\"'id'\"\r\n        [readonly]=\"destNodes.length > 1 ? false : true\"\r\n        (selectChange)=\"selectNodeChange($event)\"\r\n        (clear)=\"selectNodeClear()\"\r\n        [placeholder]=\"nodePlaceholder\"\r\n        [forcePlaceholder]=\"true\"\r\n      >\r\n      </farris-combo-list>\r\n    </div>\r\n  </div>\r\n\r\n  <!-- \u529E\u7406\u4EBA\u5458 -->\r\n  <lib-assignee-info *ngFor=\"let assignInfo of assignInfos; let i = index\"\r\n    [assigneeInfo]=\"assignInfo.assigneeInfo\"\r\n    [setAnonymous]=\"assignInfo.anonymous\"\r\n    [setAnonymousText]=\"assignInfo.anonymousText\"\r\n    [selectedAssignees]=\"assignInfo.selectedAssignees\"\r\n    [activityName]=\"assignInfos.length > 1 ? assignInfo.activityName : ''\"\r\n    [ifShowBlank]=\"assignInfos.length > 1 ? false : true\"\r\n    [openFromIframe]=\"openFromIframe\"\r\n    [wfContext]=\"wfContext\"\r\n    (afterConfirm)=\"afterConfirm($event, i)\"\r\n  ></lib-assignee-info>\r\n</div>\r\n\r\n\r\n<!-- \u5F39\u6846\u663E\u793A\u65F6\uFF0C\u663E\u793A\u6309\u94AE -->\r\n<div *ngIf=\"showButtons\" class=\"modal-footer\" style=\"float: right; width: 100%;\">\r\n  <div *ngIf=\"showButtons; then buttons\"></div>\r\n</div>\r\n\r\n<!-- \u6309\u94AE -->\r\n<ng-template #buttons>\r\n  <button type=\"button\" class=\"btn btn-secondary\" (click)=\"cancel()\">\r\n    {{ \"static.footCancel\" | translate }}\r\n  </button>\r\n  <button type=\"button\" class=\"btn btn-primary\" [disabled]=\"submitDisable\" directive-throttle (throttleClick)=\"startProcessSubmit()\">\r\n    {{ \"static.footOk\" | translate }}\r\n  </button>\r\n</ng-template>\r\n",
                styles: [".wf-task-handler-help-div{font-size:13px;color:#2d2f33;margin-bottom:20px}.wf-task-handler-help-div-submit{margin-bottom:20px}.wf-task-handler-help-text{padding-bottom:8px;white-space:nowrap;overflow:hidden;text-overflow:ellipsis}"]
            }] }
];
/** @nocollapse */
ProcessSelectorComponent.ctorParameters = () => [
    { type: TaskService },
    { type: LoadingService },
    { type: NotifyService },
    { type: I18nService },
    { type: MessagerService },
    { type: Injector },
    { type: WfTaskHandlerService }
];
ProcessSelectorComponent.propDecorators = {
    nodeCombo: [{ type: ViewChild, args: ['nodeCombo',] }],
    buttons: [{ type: ViewChild, args: ['buttons',] }],
    openFromIframe: [{ type: Input }],
    dataId: [{ type: Input }],
    bizDefKey: [{ type: Input }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class WfTaskHandlerService {
    /**
     * @param {?} logService
     * @param {?} flowchartService
     * @param {?} injector
     * @param {?} resolver
     * @param {?} modalService
     * @param {?} taskService
     * @param {?} notify
     * @param {?} i18nService
     * @param {?} frameworkService
     * @param {?} appRef
     */
    constructor(logService, flowchartService, injector, resolver, modalService, taskService, notify, i18nService, frameworkService, appRef) {
        this.logService = logService;
        this.flowchartService = flowchartService;
        this.injector = injector;
        this.resolver = resolver;
        this.modalService = modalService;
        this.taskService = taskService;
        this.notify = notify;
        this.i18nService = i18nService;
        this.frameworkService = frameworkService;
        this.appRef = appRef;
        this.subject = new Subject();
        this.curLanguage = localStorage.getItem('languageCode') || 'zh-CHS'; //系统当前语言
        //系统当前语言
        this.batchSubmitNum = {
            //批量提交数量
            successNum: 0,
            failedNum: 0,
            errorNum: 0,
        };
        this.batchCancelNum = {
            //批量取消提交数量
            successNum: 0,
            errorNum: 0
        };
        this.loading = this.injector.get(LoadingService);
        this.message = this.injector.get(MessagerService);
    }
    /**
     * 处理单条任务
     * @param {?} task
     * @param {?} action 任务动作
     * @return {?}
     */
    execute(task, action) {
        switch (action.code) {
            case 'ViewBizLog': //审批日志
                this.logService.showByDataId(task.refBizId);
                break;
            case 'ViewFlowChart': //查看流程
                this.flowchartService.viewFlowChart(task.processInstanceId);
                break;
            case 'ViewExecuteForm': // 联查单据
                this.openApp(task, action);
                break;
            default: //办理类任务
                this.complete(task, action);
        }
        return this.subject.asObservable();
    }
    /**
     * @param {?} assigneeInfo
     * @param {?} openFromIframe
     * @return {?}
     */
    assignByInfo(assigneeInfo, openFromIframe) {
        /** @type {?} */
        const assignSubject = new Subject();
        return assignSubject.asObservable();
    }
    /**
     * @private
     * @param {?} task
     * @param {?} action
     * @return {?}
     */
    complete(task, action) {
        /** @type {?} */
        const compFactory = this.resolver.resolveComponentFactory(TaskExecuteComponent);
        /** @type {?} */
        const compRef = compFactory.create(this.injector);
        compRef.instance.setTask(task);
        compRef.instance.setAction(action);
        compRef.instance.addPadding();
        /** @type {?} */
        const modalConfig = {
            title: action.name ? action.name : this.i18nService.getValue('task.title'),
            width: 550,
            height: compRef.instance.dialogHeight,
            showButtons: true,
            buttons: compRef.instance.buttons
        };
        /** @type {?} */
        const dialog = this.modalService.show(compRef, modalConfig);
        compRef.instance.getSubject().subscribe(re => {
            re && re.result && this.subject.next(true);
            re && re.result && dialog.close();
        });
    }
    /**
     * 打开审批联查界面
     * @param {?} entity 任务实体
     * @param {?} action 动作实体
     * @return {?}
     */
    openApp(entity, action) {
        /** @type {?} */
        const taskId = entity.sourceId;
        /** @type {?} */
        const getFormInfoLoading = this.loading.show();
        this.taskService.getAppInfo(taskId).subscribe((formInfo) => {
            getFormInfoLoading.close();
            if (!formInfo) {
                this.notify.info(this.i18nService.getValue('task.notFoundBill'));
                return;
            }
            /** @type {?} */
            const options = {
                appType: 'menu',
                funcId: '',
                appId: '',
                appEntrance: '',
                tabId: taskId,
                isNewTab: true
            };
            // 传工作流上下文参数
            /** @type {?} */
            const parameters = new Map();
            // 功能菜单情况
            if (formInfo.appId) {
                // 默认联查审批界面
                if (formInfo.formType === '1') { //表单嵌流程
                    parameters.set('workItemId', taskId);
                    parameters.set('procInstId', action.parameters[0].value);
                    parameters.set('taskState', entity.state);
                    parameters.set('isAssign', entity.actions.some(action => action.code === 'AssignUser'));
                    formInfo.parameters.forEach((item) => parameters.set(item.code, item.value));
                    options.funcId = formInfo.appId;
                }
                else { //流程嵌表单
                    options.funcId = 'WF0120';
                    parameters.set('taskId', entity.id);
                    parameters.set('taskState', entity.state);
                }
            }
            else if (formInfo.url) { //表单格式
                options.funcId = 'WF0120';
                parameters.set('taskId', entity.id);
                parameters.set('taskState', entity.state);
            }
            else {
                this.notify.info(this.i18nService.getValue('task.notFoundBill'));
                return;
            }
            options.entityParams = parameters;
            options.queryStringParams = parameters; //兼容IDP表单
            //兼容IDP表单
            /** @type {?} */
            const openMenuLoading = this.loading.show();
            this.frameworkService.openMenu$(options).subscribe(() => {
                openMenuLoading.close();
            });
        }, error => {
            getFormInfoLoading.close();
            this.taskService.error(error);
        });
    }
    /**
     * 返回动作列表，表单嵌流程用到
     * @param {?} workItemId
     * @return {?}
     */
    refreshActions(workItemId) {
        return this.taskService.getWorkItemActions(workItemId).pipe(switchMap((actionList) => {
            return of(actionList.filter(action => action.code !== 'ViewBizLog' &&
                action.code !== 'ViewFlowChart' &&
                action.code !== 'ViewExecuteForm'));
        }));
    }
    /**
     * 根据流程实例ID和动作Code办理任务（暂未用到 by fangpengfei\@2020.06.22）
     * @param {?} procInstId 流程实例ID
     * @param {?} state 任务状态
     * @param {?} actionCode 动作Code
     * @return {?}
     */
    executeByProcInstId(procInstId, state, actionCode) {
        /** @type {?} */
        var action = new TaskAction();
        action.code = actionCode;
        /** @type {?} */
        const subject = new Subject();
        this.taskService.getTaskByProcInstId(procInstId, state).subscribe((task) => {
            if (task) {
                this.execute(task, action).subscribe(re => {
                    subject.next(re);
                });
            }
            else {
                this.notify.info(this.i18nService.getValue('task.noTask'));
            }
        });
        return subject.asObservable();
    }
    /**
     * 根据workItemId 办理任务
     * @param {?} workItemId 工作项ID
     * @param {?} action 动作实体
     * @return {?}
     */
    executeByWorkItemId(workItemId, action) {
        /** @type {?} */
        let task = new TaskEntity();
        task.sourceId = workItemId;
        return this.execute(task, action);
    }
    /**
     * 提交审批
     * @param {?} payload 上下文参数
     * @return {?} subject true：提交成功，false：提交失败
     */
    startProcess(payload) {
        /** @type {?} */
        const subject = new Subject();
        /** @type {?} */
        const configLoad = this.loading.show();
        this.taskService.getTaskCenterConfigByCode(ConfigCode.If_Show_Submit_Dialog, OwnerType.BizDefKey, payload.bizDefKey).subscribe(re => {
            configLoad.close();
            if (re && re.currentValue === 'false') { //自定义无需弹框
                //自定义无需弹框
                /** @type {?} */
                const simulateLoad = this.loading.show();
                this.taskService.startProcessSimulate(payload).subscribe((response) => {
                    simulateLoad.close();
                    if (!response || response.needInteraction === false) { //预解析无需交互
                        //预解析无需交互
                        /** @type {?} */
                        const executeLoad = this.loading.show();
                        this.taskService.startProcess(payload).subscribe((response) => {
                            executeLoad.close();
                            subject.next(response);
                            this.handleSubmitMessage(ConfigCode.Info_After_Submit, payload.bizDefKey);
                        }, error => {
                            executeLoad.close();
                            subject.next(null);
                            this.taskService.error(error);
                        });
                    }
                    else { //预解析需要交互
                        this.showStartProcessDialog(payload).subscribe(re => {
                            subject.next(re);
                        });
                    }
                }, error => {
                    simulateLoad.close();
                    subject.next(null);
                    this.taskService.error(error);
                });
            }
            else { //无是否弹框配置
                this.showStartProcessDialog(payload).subscribe(re => {
                    subject.next(re);
                });
            }
        }, error => {
            configLoad.close();
            this.taskService.error(error);
        });
        return subject.asObservable();
    }
    /**
     * 提交审批弹框
     * @private
     * @param {?} payload 参数
     * @return {?}
     */
    showStartProcessDialog(payload) {
        /** @type {?} */
        const subject = new Subject();
        /** @type {?} */
        const compFactory = this.resolver.resolveComponentFactory(ProcessSelectorComponent);
        /** @type {?} */
        const compRef = compFactory.create(this.injector);
        compRef.instance.setParam(payload).subscribe(() => {
            /** @type {?} */
            const modalConfig = {
                title: this.i18nService.getValue('startProcess.title'),
                width: 520,
                height: 338,
                showButtons: true,
                buttons: compRef.instance.buttons
            };
            /** @type {?} */
            const dialog = this.modalService.show(compRef, modalConfig);
            if (payload.withResponse === true) { //内部使用
                compRef.instance.getSubjectWithResponse().subscribe(re => {
                    subject.next(re);
                    dialog.close();
                });
                compRef.instance.getSubjectCancel().subscribe(() => {
                    dialog.close();
                });
            }
            else { //已有业务组调用
                compRef.instance.getSubject().subscribe(re => {
                    subject.next(re);
                    dialog.close();
                });
                compRef.instance.getSubjectCancel().subscribe(re => {
                    subject.next(re);
                    dialog.close();
                });
            }
        });
        return subject.asObservable();
    }
    /**
     * 取消提交
     * \@payload payload 参数
     * @param {?} payload
     * @return {?}
     */
    cancelSubmit(payload) {
        /** @type {?} */
        const subject = new Subject();
        /** @type {?} */
        const load = this.loading.show();
        this.taskService.cancelSubmit(payload).subscribe(() => {
            load.close();
            subject.next(true);
            this.handleSubmitMessage(ConfigCode.Info_After_Cancel_Submit, payload.bizDefKey);
        }, error => {
            load.close();
            subject.error(false);
            this.taskService.error(error);
        });
        return subject.asObservable();
    }
    /**
     * 提交审批
     * @param {?} dataId 表单id
     * @param {?} bizDefKey 入口单据id
     * @return {?}
     */
    submitWithBizDefKey(dataId, bizDefKey) {
        if (!dataId) {
            this.notify.warning(this.i18nService.getValue('startProcess.dataIdIsNull'));
            return;
        }
        if (!bizDefKey) {
            this.message.error(this.i18nService.getValue('startProcess.bizDefKeyIsNull'));
            return;
        }
        /** @type {?} */
        var payload = new StartProcessPayload();
        payload.dataId = dataId;
        payload.bizDefKey = bizDefKey;
        payload.withResponse = true;
        return this.startProcess(payload);
    }
    /**
     * 取消提交审批
     * @param {?} dataId 表单id
     * @param {?} bizDefKey 入口单据id
     * @return {?}
     */
    cancelSubmitWithDataId(dataId, bizDefKey) {
        if (!dataId) {
            this.notify.warning(this.i18nService.getValue('startProcess.dataIdIsNull'));
            return;
        }
        if (!bizDefKey) {
            this.message.error(this.i18nService.getValue('startProcess.bizDefKeyIsNull'));
            return;
        }
        /** @type {?} */
        var cancelSubmitPayload = new CancelSubmitPayload();
        cancelSubmitPayload.dataId = dataId;
        cancelSubmitPayload.bizDefKey = bizDefKey;
        return this.cancelSubmit(cancelSubmitPayload);
    }
    /**
     * 批量提交审批
     * @param {?} dataIds 表单ID集合
     * @param {?} bizDefKey 入口单据id
     * @return {?}
     */
    batchSubmitWithBizDefKey(dataIds, bizDefKey) {
        if (!dataIds || !dataIds.length) {
            this.notify.warning(this.i18nService.getValue('startProcess.dataIdIsEmpty'));
            return;
        }
        if (!bizDefKey) {
            this.message.error(this.i18nService.getValue('startProcess.bizDefKeyIsNull'));
            return;
        }
        if (dataIds.length === 1) {
            /** @type {?} */
            var startPayload = new StartProcessPayload();
            startPayload.bizDefKey = bizDefKey;
            startPayload.dataId = dataIds[0];
            return this.startProcess(startPayload);
        }
        /** @type {?} */
        const subject = new Subject();
        /** @type {?} */
        const load = this.loading.show();
        this.batchSubmitNum.successNum = 0;
        this.batchSubmitNum.failedNum = 0;
        this.batchSubmitNum.errorNum = 0;
        this.batchSubmitHelpFunction([...dataIds], bizDefKey, () => {
            load.close();
            subject.next(true);
        });
        return subject.asObservable();
    }
    /**
     * 批量提交审批辅助函数
     * @private
     * @param {?} dataIds
     * @param {?} bizDefKey
     * @param {?} handler
     * @return {?}
     */
    batchSubmitHelpFunction(dataIds, bizDefKey, handler) {
        if (dataIds && dataIds.length > 0) {
            /** @type {?} */
            const dataId = dataIds.shift();
            //引用类型转换
            /** @type {?} */
            let startPayload = new StartProcessPayload();
            startPayload.bizDefKey = bizDefKey;
            startPayload.dataId = dataId;
            startPayload.variables = { simulate: true };
            this.taskService.startProcess(startPayload).subscribe((response) => {
                if (response.needInteraction) { //需要交互
                    this.batchSubmitNum.failedNum++;
                    this.batchSubmitHelpFunction(dataIds, bizDefKey, handler);
                }
                else { //不需要交互
                    startPayload.variables = { simulate: false };
                    this.taskService.startProcess(startPayload).subscribe((response) => {
                        this.batchSubmitNum.successNum++;
                        this.batchSubmitHelpFunction(dataIds, bizDefKey, handler);
                    }, () => {
                        this.batchSubmitNum.errorNum++;
                        this.batchSubmitHelpFunction(dataIds, bizDefKey, handler);
                    });
                }
            }, () => {
                this.batchSubmitNum.errorNum++;
                this.batchSubmitHelpFunction(dataIds, bizDefKey, handler);
            });
        }
        else { //批量执行完毕
            this.showBatchSubmitInfo(this.batchSubmitNum, bizDefKey);
            handler(); //执行回调函数
        }
    }
    /**
     * 批量取消提交审批
     * @param {?} dataIds 表单ID集合
     * @param {?} bizDefKey 入口单据id
     * @return {?}
     */
    batchCancelSubmitWithDataId(dataIds, bizDefKey) {
        if (!dataIds || !dataIds.length) {
            this.notify.warning(this.i18nService.getValue('startProcess.dataIdIsEmpty'));
            return;
        }
        if (!bizDefKey) {
            this.message.error(this.i18nService.getValue('startProcess.bizDefKeyIsNull'));
            return;
        }
        if (dataIds.length === 1) {
            return this.cancelSubmitWithDataId(dataIds[0], bizDefKey);
        }
        /** @type {?} */
        const subject = new Subject();
        /** @type {?} */
        const load = this.loading.show();
        this.batchCancelNum.successNum = 0;
        this.batchCancelNum.errorNum = 0;
        this.batchCancelHelpFunction([...dataIds], bizDefKey, () => {
            load.close();
            subject.next(true);
        });
        return subject.asObservable();
    }
    /**
     * 批量取消辅助函数
     * @private
     * @param {?} dataIds
     * @param {?} bizDefKey
     * @param {?} handler
     * @return {?}
     */
    batchCancelHelpFunction(dataIds, bizDefKey, handler) {
        if (dataIds && dataIds.length) {
            /** @type {?} */
            const dataId = dataIds.shift();
            //引用类型转换
            /** @type {?} */
            let cancelPayload = new CancelSubmitPayload();
            cancelPayload.dataId = dataId;
            cancelPayload.bizDefKey = bizDefKey;
            this.taskService.cancelSubmit(cancelPayload).subscribe(() => {
                this.batchCancelNum.successNum++;
                this.batchCancelHelpFunction(dataIds, bizDefKey, handler);
            }, () => {
                this.batchCancelNum.errorNum++;
                this.batchCancelHelpFunction(dataIds, bizDefKey, handler);
            });
        }
        else {
            this.showBatchCancelSubmitInfo(this.batchCancelNum, bizDefKey);
            handler();
        }
    }
    /**
     * 子表提交审批
     * @param {?} parentDataId 主表id
     * @param {?} childDataId 子表id
     * @param {?} bizDefKey 入口单据id
     * @return {?}
     */
    childSubmit(parentDataId, childDataId, bizDefKey) {
        if (!parentDataId || !childDataId) {
            this.notify.warning(this.i18nService.getValue('startProcess.dataIdIsNull'));
            return;
        }
        if (!bizDefKey) {
            this.message.error(this.i18nService.getValue('startProcess.bizDefKeyIsNull'));
            return;
        }
        /** @type {?} */
        var startProcessPayload = new StartProcessPayload();
        startProcessPayload.dataId = `${parentDataId},${childDataId}`;
        startProcessPayload.bizDefKey = bizDefKey;
        return this.startProcess(startProcessPayload);
    }
    /**
     * 子表取消提交审批
     * @param {?} parentDataId 主表id
     * @param {?} childDataId 子表id
     * @param {?} bizDefKey 入口单据id
     * @return {?}
     */
    childCancelSubmit(parentDataId, childDataId, bizDefKey) {
        if (!parentDataId || !childDataId) {
            this.notify.warning(this.i18nService.getValue('startProcess.dataIdIsNull'));
            return;
        }
        if (!bizDefKey) {
            this.message.error(this.i18nService.getValue('startProcess.bizDefKeyIsNull'));
            return;
        }
        /** @type {?} */
        var cancelSubmitPayload = new CancelSubmitPayload();
        cancelSubmitPayload.dataId = `${parentDataId},${childDataId}`;
        cancelSubmitPayload.bizDefKey = bizDefKey;
        return this.cancelSubmit(cancelSubmitPayload);
    }
    /**
     * 子表批量提交审批
     * @param {?} parentDataId 主表id
     * @param {?} childDataIds 子表id集合
     * @param {?} bizDefKey 入口单据id
     * @return {?}
     */
    childBatchSubmit(parentDataId, childDataIds, bizDefKey) {
        if (!parentDataId || !childDataIds) {
            this.notify.warning(this.i18nService.getValue('startProcess.dataIdIsNull'));
            return;
        }
        if (!bizDefKey) {
            this.message.error(this.i18nService.getValue('startProcess.bizDefKeyIsNull'));
            return;
        }
        /** @type {?} */
        const dataIds = childDataIds.map(childDataId => `${parentDataId},${childDataId}`);
        return this.batchSubmitWithBizDefKey(dataIds, bizDefKey);
    }
    /**
     * 子表批量取消提交审批
     * @param {?} parentDataId 主表id
     * @param {?} childDataIds 子表id集合
     * @param {?} bizDefKey 入口单据id
     * @return {?}
     */
    childBatchCancelSubmit(parentDataId, childDataIds, bizDefKey) {
        if (!parentDataId || !childDataIds) {
            this.notify.warning(this.i18nService.getValue('startProcess.dataIdIsNull'));
            return;
        }
        if (!bizDefKey) {
            this.message.error(this.i18nService.getValue('startProcess.bizDefKeyIsNull'));
            return;
        }
        /** @type {?} */
        const dataIds = childDataIds.map(childDataId => `${parentDataId},${childDataId}`);
        return this.batchCancelSubmitWithDataId(dataIds, bizDefKey);
    }
    /**
     * 批量提交提示信息
     * @private
     * @param {?} num
     * @param {?} bizDefKey
     * @return {?}
     */
    showBatchSubmitInfo(num, bizDefKey) {
        if (num.successNum && !num.failedNum && !num.errorNum) { //批量全部成功
            this.taskService.getTaskCenterConfigByCode(ConfigCode.Info_After_Submit, OwnerType.BizDefKey, bizDefKey).subscribe((config) => {
                if (this.curLanguage === 'en') {
                    this.notify.success(JSON.parse(config.currentValue).en);
                }
                if (this.curLanguage === 'zh-CHS') {
                    this.notify.success(JSON.parse(config.currentValue).zh_CHS);
                }
            });
        }
        else { //非全部成功
            //非全部成功
            /** @type {?} */
            let message = '';
            num.successNum && (message += this.i18nService.getValue('batchStartProcess.success') + `【${num.successNum}】` + this.i18nService.getValue('batchStartProcess.row'));
            num.errorNum && (message += this.i18nService.getValue('batchStartProcess.error') + `【${num.errorNum}】` + this.i18nService.getValue('batchStartProcess.row'));
            num.failedNum && (message += this.i18nService.getValue('batchStartProcess.failed') + `【${num.failedNum}】` + this.i18nService.getValue('batchStartProcess.row'));
            message += this.i18nService.getValue('batchStartProcess.single');
            this.message.show('warning', message, { safeHtml: false });
        }
    }
    /**
     * 批量取消提交提示信息
     * @private
     * @param {?} num
     * @param {?} bizDefKey
     * @return {?}
     */
    showBatchCancelSubmitInfo(num, bizDefKey) {
        if (num.successNum && !num.errorNum) { //批量全部成功
            this.taskService.getTaskCenterConfigByCode(ConfigCode.Info_After_Cancel_Submit, OwnerType.BizDefKey, bizDefKey).subscribe((config) => {
                if (this.curLanguage === 'en') {
                    this.notify.success(JSON.parse(config.currentValue).en);
                }
                if (this.curLanguage === 'zh-CHS') {
                    this.notify.success(JSON.parse(config.currentValue).zh_CHS);
                }
            });
        }
        else {
            /** @type {?} */
            let message = '';
            num.successNum && (message += this.i18nService.getValue('startProcess.success') + `【${num.successNum}】` + this.i18nService.getValue('startProcess.row'));
            num.errorNum && (message += this.i18nService.getValue('startProcess.failed') + `【${num.errorNum}】` + this.i18nService.getValue('startProcess.row'));
            this.message.show('warning', message, { safeHtml: false });
        }
    }
    /**
     * @param {?} code
     * @param {?} ownerId
     * @return {?}
     */
    handleSubmitMessage(code, ownerId) {
        /** @type {?} */
        const load = this.loading.show();
        this.taskService.getTaskCenterConfigByCode(code, OwnerType.BizDefKey, ownerId).subscribe(re => {
            load.close();
            if (re && re.currentValue) {
                /** @type {?} */
                let message = '';
                /** @type {?} */
                const currentValue = JSON.parse(re.currentValue);
                this.curLanguage === 'zh-CHS' && (message = currentValue.zh_CHS);
                this.curLanguage === 'en' && (message = currentValue.en);
                this.curLanguage === 'zh-CHT' && (message = currentValue.zh_CHT);
                this.notify.success(message);
            }
            else {
                code === ConfigCode.Info_After_Submit && this.notify.success(this.i18nService.getValue('startProcess.submitSuccess'));
                code === ConfigCode.Info_After_Cancel_Submit && this.notify.success(this.i18nService.getValue('startProcess.cancelSubmitSuccess'));
            }
        }, error => {
            load.close();
            this.taskService.error(error);
        });
    }
    /**
     * 表单上触发流程预解析操作
     * 已封装为表单的命令操作
     * @return {?}
     */
    processSimulate() {
        /** @type {?} */
        const subject = new Subject();
        /** @type {?} */
        const gspWfEventService = ((/** @type {?} */ (window))).parent.gspWfEventService;
        gspWfEventService.simulate(() => {
            subject.next(true);
        });
        return subject.asObservable();
    }
    /**
     * 根据单据id查看流程图
     * 已封装为表单命令和操作
     * @param {?} dataId
     * @return {?}
     */
    viewFlowChartByDataId(dataId) {
        if (dataId) {
            this.flowchartService.viewFlowChartByDataId(dataId);
        }
        else {
            console.error("查看流程图，表单id为空");
        }
    }
    /**
     * 查看流程图（新，支持预览）
     * 已封装为表单命令和操作
     * @param {?} bizDefKey 流程分类id
     * @param {?} dataId 表单数据id
     * @return {?}
     */
    viewFlowChartWithForecast(bizDefKey, dataId) {
        /** @type {?} */
        let payload = new ForecastProcessPayload();
        payload.bizDefKey = bizDefKey;
        payload.dataId = dataId;
        this.flowchartService.viewProcess(payload);
    }
}
WfTaskHandlerService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
WfTaskHandlerService.ctorParameters = () => [
    { type: WfApprovalLogsService },
    { type: WFFlowchartService },
    { type: Injector },
    { type: ComponentFactoryResolver },
    { type: BsModalService },
    { type: TaskService },
    { type: NotifyService },
    { type: I18nService },
    { type: FrameworkService },
    { type: ApplicationRef }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class TranslatePipe {
    /**
     * @param {?} i18nService
     */
    constructor(i18nService) {
        this.i18nService = i18nService;
    }
    /**
     * @param {?} name
     * @param {?=} defaultVal
     * @return {?}
     */
    transform(name, defaultVal = '') {
        if (this.i18nService) {
            /** @type {?} */
            const r = this.i18nService.getValue(name);
            return r ? r : defaultVal;
        }
        else {
            return defaultVal;
        }
    }
}
TranslatePipe.decorators = [
    { type: Pipe, args: [{ name: 'translate' },] }
];
/** @nocollapse */
TranslatePipe.ctorParameters = () => [
    { type: I18nService, decorators: [{ type: Optional }] }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * 组件已弃用
 */
class TaskAssigninfoComponent {
    /**
     * @return {?}
     */
    ngOnInit() {
    }
}
TaskAssigninfoComponent.decorators = [
    { type: Component, args: [{
                selector: 'lib-task-assigninfo',
                template: "",
                styles: [""]
            }] }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class AssigneeInfoComponent {
    /**
     * @param {?} i18nService
     * @param {?} notify
     * @param {?} cd
     * @param {?} taskService
     * @param {?} injector
     */
    constructor(i18nService, notify, cd, taskService, injector) {
        this.i18nService = i18nService;
        this.notify = notify;
        this.cd = cd;
        this.taskService = taskService;
        this.injector = injector;
        this.bindingData = {}; //系统帮助多选时用到
        //系统帮助多选时用到
        this.myHelpBindingData = {}; //自己的帮助多选时用到
        //已经选中的指派人
        this.assignees = []; //返回选中人的ID数组
        //返回选中人的ID数组
        this.searchAssignUserList = []; //非全员指派的用户数据，搜索用
        //非全员指派的用户数据，搜索用
        this.anonymous = false; // 是否匿名
        // 是否匿名
        this.anonymousText = ''; // 匿名显示文本
        // 匿名显示文本
        this.disabled = false; //办理人员输入框是否禁用
        this.filter = { notGetCurrentUser: false, notGetStopUser: true, orderField: "order", withAllOrg: true, orgId: '' };
        this.ifShowBlank = true; //办理人为空时，是否显示选人框
        //办理人为空时，是否显示选人框
        this.openFromIframe = false; //是否从iframe打开，应用IDP提交审批集成
        //自己的帮助DOM元素
        this.afterConfirm = new EventEmitter();
        this.groupIcon = '<i class="f-icon f-icon-plus-circle" style="color: #2B87FF"></i>';
        this.extendUserHelp = false; //用户帮助是否扩展
        //扩展帮助的url
        this.columns = [
            { title: this.i18nService.getValue('static.columnName.code'), field: 'Code', width: 80 },
            { title: this.i18nService.getValue('static.columnName.name'), field: 'Name', width: 90 },
            { title: this.i18nService.getValue('static.columnName.department'), field: 'OrgName', width: 180 }
        ];
        //是否使用farris用户帮助
        this.taskService.getWfUserHelpConfig().subscribe((re) => {
            if (re && re.userHelpConfig && re.userHelpConfig.isExtend == 'true') {
                this.extendUserHelp = true;
                this.extendUserHelpUrl = re.userHelpConfig.url + '?v=' + new Date().getTime().toString();
            }
        }, error => {
            console.error(error);
        });
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        // 为data table增加高度
        /** @type {?} */
        let ele = (/** @type {?} */ (this.dataTableEle.nativeElement));
        /** @type {?} */
        let body = ele && (/** @type {?} */ (ele.querySelector('div.farris-datatable-container > div > div.farris-table-scorllable-body')));
        body && (body.style.height = '290px');
    }
    /**
     * @return {?}
     */
    ngOnInit() {
    }
    /**
     * @param {?} info
     * @return {?}
     */
    set assigneeInfo(info) {
        this.disabled = false;
        this.placeholder = null; //清空
        this.assignUserNgModule = null; //清空
        this._assigneeInfo = info; //可以传null
        if (!this._assigneeInfo) {
            this.disabled = true;
        }
        else {
            if (this._assigneeInfo.selectAssignee) {
                this.disabled = false;
                this.placeholder = this.i18nService.getValue('task.selectPlaceholder'); //请选择
            }
            else {
                this.disabled = true;
                if (this._assigneeInfo.assigneeUsers && this._assigneeInfo.assigneeUsers.length) {
                    this.placeholder = this.anonymous ? this.anonymousText : this._assigneeInfo.assigneeUsers.map(user => user.name).join(); //解析人名
                }
                else {
                    this.placeholder = this.i18nService.getValue('task.noUser'); //无
                }
            }
            this.singleSelect = !this._assigneeInfo.multiSelect;
            this.allowGlobalAssign = this._assigneeInfo.allowGlobalAssign;
            if (this._assigneeInfo.organizationScope && this._assigneeInfo.organizationScope.length) {
                /** @type {?} */
                const orgList = this._assigneeInfo.organizationScope[0];
                this.filter.orgId = orgList.id;
                this.filter.withAllOrg = orgList.includeChildren;
            }
        }
    }
    /**
     * @param {?} anonymous
     * @return {?}
     */
    set setAnonymous(anonymous) {
        this.anonymous = anonymous;
    }
    /**
     * @param {?} anonymousText
     * @return {?}
     */
    set setAnonymousText(anonymousText) {
        this.anonymousText = anonymousText;
    }
    /**
     * 已选中的人（帮助不可用）
     * @param {?} selectedAssignees
     * @return {?}
     */
    set selectedAssignees(selectedAssignees) {
        !this._assigneeInfo && (this.placeholder = null);
        this._selectedAssignees = selectedAssignees;
        selectedAssignees.length && (this.placeholder = this.anonymous ? this.anonymousText : selectedAssignees.map(user => user.name).join());
    }
    /**
     * 选择参与者
     * @return {?}
     */
    clickAssignUser() {
        if (this.extendUserHelp && !this.openFromIframe) {
            this.showExtendUserHelp();
        }
        else {
            this.showSysUserHelp();
        }
    }
    /**
     * 加载扩展帮助
     * @private
     * @return {?}
     */
    showExtendUserHelp() {
        System.import(this.extendUserHelpUrl).then((moduleFactories) => {
            /** @type {?} */
            const moduleFactory = Object.values(moduleFactories)[0];
            /** @type {?} */
            const moduleRef = moduleFactory.create(this.injector);
            /** @type {?} */
            let context = {
                singleSelect: this.singleSelect,
                allowGlobalAssign: this.allowGlobalAssign,
                assigneeUsers: this._assigneeInfo && this._assigneeInfo.assigneeUsers && this._assigneeInfo.assigneeUsers.length ? this._assigneeInfo.assigneeUsers : [],
                filter: this.filter,
                selectedUsers: this.assignees,
                wfContext: this.wfContext
            };
            moduleRef.instance.showHelp(context).subscribe(re => {
                /** @type {?} */
                let userList = re.userList;
                if (userList && userList.length) {
                    this.assignees = userList.map(user => { return { id: user.id, name: user.name }; });
                    this.assignUserNgModule = this.assignees.map(user => user.name).join();
                }
                else {
                    this.assignees = [];
                    this.assignUserNgModule = '';
                }
                this.afterConfirm.emit(this.assignees);
                this.cd.detectChanges();
            }, error => {
                console.error(error);
            });
        }, error => {
            console.error(error);
        });
    }
    /**
     * @return {?}
     */
    showSysUserHelp() {
        if (this._assigneeInfo && this._assigneeInfo.assigneeUsers && this._assigneeInfo.assigneeUsers.length) {
            this.getAssignUsersByIds();
            this.myUserHelp.show();
            setTimeout(() => {
                this.cd.detectChanges(); //重新预解析后
                this.openFromIframe && this.openMyUserHelpOutIframe();
            }, 100);
        }
        else if (this.allowGlobalAssign) {
            //选中的人保持选中
            this.bindingData = { id: this.assignees.map(a => a.id).join(), name: this.assignees.map(a => a.name).join() };
            this.sysUserHelp.showHelp();
            setTimeout(() => {
                this.cd.detectChanges(); //重新预解析后
                this.openFromIframe && this.beforeOpenSysUserHelpOutIframe();
            }, 100);
        }
    }
    //自己的用户帮助在iframe外打开
    /**
     * @private
     * @return {?}
     */
    openMyUserHelpOutIframe() {
        /** @type {?} */
        var myUserHelpDialog = (/** @type {?} */ (this.myUserHelpEle.nativeElement));
        top.document.body.append(myUserHelpDialog); //弹到顶级window上，不用加载farris样式
        //弹到顶级window上，不用加载farris样式
        //把帮助的黑色遮罩去掉
        /** @type {?} */
        var backdrop = window.document.querySelector("body > bs-modal-backdrop");
        backdrop.remove();
        /** @type {?} */
        var secondDiv = (/** @type {?} */ (((/** @type {?} */ (myUserHelpDialog.firstChild))).firstChild));
        secondDiv.style.width = '850px';
        secondDiv.style.height = '520px';
        secondDiv.style.marginLeft = '-425px';
        secondDiv.style.marginTop = '-260px';
    }
    /**
     * @private
     * @return {?}
     */
    beforeOpenSysUserHelpOutIframe() {
        this.sysUserHelp.farrisLookUp.dialog.reSize({ width: 850, height: 520 });
        /** @type {?} */
        const sysUserHelpDialog = (/** @type {?} */ (this.sysUserHelp.farrisLookUp.dialog.el.nativeElement));
        sysUserHelpDialog.parentElement.removeChild(sysUserHelpDialog);
        this.sysUserHelp.farrisLookUp.draggable = false;
        this.sysUserHelp.farrisLookUp.resizable = false;
        this.sysUserHelp.farrisLookUp.showMaxButton = false;
        this.sysUserHelp.farrisLookUp.dialogOpened.subscribe(() => {
            setTimeout(() => {
                this.openSysUserHelpOutIframe();
            }, 200);
        });
    }
    //系统用户帮助在iframe外打开
    /**
     * @private
     * @return {?}
     */
    openSysUserHelpOutIframe() {
        /** @type {?} */
        var sysUserHelpDialog = (/** @type {?} */ (this.sysUserHelp.farrisLookUp.dialog.el.nativeElement));
        this.sysUserHelp.farrisLookUp.dialog.reSize({ width: 850, height: 520 });
        top.document.body.append(sysUserHelpDialog);
    }
    //系统用户帮助选人
    /**
     * @param {?} data
     * @return {?}
     */
    afterUsersSelect(data) {
        if (data) {
            data = this.singleSelect ? [data] : data;
            this.assignees = data.map(user => { return { id: user.id, name: user.name }; });
            this.assignUserNgModule = data.map(user => user.name).join();
            this.afterConfirm.emit(this.assignees);
            this.cd.detectChanges();
        }
    }
    //根据assigneeInfo.assigneeIds获取指派人code、name等信息
    /**
     * @return {?}
     */
    getAssignUsersByIds() {
        this.originAssignUserList = this._assigneeInfo.assigneeUsers.map(user => {
            return {
                ID: user.id,
                Name: user.name,
                Code: user.code,
                OrgId: user.orgId,
                OrgName: user.orgNamePath
            };
        }),
            this.searchAssignUserList = this.originAssignUserList;
    }
    //非全员指派搜索
    /**
     * @param {?} event
     * @return {?}
     */
    myUserHelpSearch(event) {
        if (event.value) {
            /** @type {?} */
            const value = event.value;
            this.searchAssignUserList = this.originAssignUserList.filter(user => (user.Name) && user.Name.includes(value) ||
                (user.Code) && user.Code.includes(value));
        }
        else {
            this.getAssignUsersByIds();
        }
    }
    //非全员指派选人
    /**
     * @return {?}
     */
    myUserHelpAfterSelect() {
        if (this.myUserHelpTable.selections === undefined) {
            this.notify.warning(this.i18nService.getValue('static.assignee.noAssignee'));
            return;
        }
        /** @type {?} */
        const selectedUsers = this.singleSelect ? [this.myUserHelpTable.selections] : this.myUserHelpTable.selections;
        this.assignUserNgModule = selectedUsers.map(user => user.Name).join();
        this.assignees = selectedUsers.map(user => { return { id: user.ID, name: user.Name }; });
        this.afterConfirm.emit(this.assignees);
        this.cd.detectChanges();
        this.myUserHelp.close();
    }
    //非全员指派点击取消后事件
    /**
     * @return {?}
     */
    myUserHelpCancel() {
        this.myUserHelp.close();
    }
    //清除
    /**
     * @return {?}
     */
    assignUserClear() {
        this.assignees = [];
        this.assignUserNgModule = null;
        this.afterConfirm.emit([]);
        this.bindingData = {};
    }
}
AssigneeInfoComponent.decorators = [
    { type: Component, args: [{
                selector: 'lib-assignee-info',
                template: "<!-- \u6307\u5B9A\u53C2\u4E0E\u8005\uFF08\u6307\u6D3E\uFF09 -->\r\n<div\r\n  *ngIf=\"\r\n    ifShowBlank ||\r\n    _assigneeInfo || (_selectedAssignees && _selectedAssignees.length)\r\n  \"\r\n  class=\"wf-task-handler-help-div\"\r\n>\r\n  <div class=\"wf-task-handler-help-text\" title=\"{{ activityName }}\">\r\n    {{ activityName ? activityName : (\"task.assignText\" | translate) }}\r\n  </div>\r\n  <div\r\n    style=\"flex: 1\"\r\n    title=\"{{ assignUserNgModule ? assignUserNgModule : placeholder }}\"\r\n  >\r\n    <input-group\r\n      [editable]=\"false\"\r\n      [disabled]=\"disabled\"\r\n      [customCls]=\"'custom-cls'\"\r\n      [groupText]=\"groupIcon\"\r\n      [placeholder]=\"placeholder\"\r\n      [forcePlaceholder]=\"true\"\r\n      [(value)]=\"assignUserNgModule\"\r\n      (clickHandle)=\"clickAssignUser()\"\r\n      (clear)=\"assignUserClear()\"\r\n    ></input-group>\r\n  </div>\r\n</div>\r\n\r\n<!-- \u7CFB\u7EDF\u5E2E\u52A9\uFF0C\u7528\u4E8E\u5168\u5458\u6307\u6D3E -->\r\n<sys-farris-grid-lookup\r\n  #sysUserHelp\r\n  style=\"display: none\"\r\n  [singleSelect]=\"singleSelect\"\r\n  [bindingData]=\"bindingData\"\r\n  [pagination]=\"true\"\r\n  [pageSize]=\"20\"\r\n  [title]=\"'static.selectUser' | translate\"\r\n  [sourceType]=\"'user'\"\r\n  [filter]=\"filter\"\r\n  [showUserUnitInfo]=\"true\"\r\n  [typeMode]=\"1\"\r\n  (afterConfirm)=\"afterUsersSelect($event)\"\r\n>\r\n</sys-farris-grid-lookup>\r\n\r\n<!-- \u6307\u6D3E\u81EA\u5DF1\u753B\u7684\u5E2E\u52A9 -->\r\n<farris-dialog\r\n  #allUserDialog\r\n  [buttons]=\"buttonRef\"\r\n  [width]=\"850\"\r\n  [height]=\"520\"\r\n  [title]=\"'static.selectUser' | translate\"\r\n>\r\n  <div\r\n    class=\"d-flex flex-column my-data-grid h-100\"\r\n    style=\"padding: 0 14px; overflow: hidden\"\r\n  >\r\n    <div class=\"flex-auto\" style=\"position: relative\">\r\n      <farris-datatable\r\n        #allUserTable\r\n        [columns]=\"columns\"\r\n        [data]=\"searchAssignUserList\"\r\n        [showFilterBar]=\"true\"\r\n        [singleSelect]=\"singleSelect\"\r\n        [idField]=\"'ID'\"\r\n        [remote]=\"'server'\"\r\n        (search)=\"myUserHelpSearch($event)\"\r\n        [pagination]=\"false\"\r\n        [showPageList]=\"false\"\r\n      ></farris-datatable>\r\n    </div>\r\n  </div>\r\n</farris-dialog>\r\n<ng-template #buttonRef>\r\n  <button class=\"btn btn-secondary\" (click)=\"myUserHelpCancel()\">\r\n    {{ \"static.footCancel\" | translate }}\r\n  </button>\r\n  <button class=\"btn btn-primary\" (click)=\"myUserHelpAfterSelect()\">\r\n    {{ \"static.footOk\" | translate }}\r\n  </button>\r\n</ng-template>\r\n",
                styles: [".wf-task-handler-help-div{font-size:13px;color:#2d2f33;margin-bottom:20px}.wf-task-handler-help-div-submit{margin-bottom:20px}.wf-task-handler-help-text{padding-bottom:8px;white-space:nowrap;overflow:hidden;text-overflow:ellipsis}"]
            }] }
];
/** @nocollapse */
AssigneeInfoComponent.ctorParameters = () => [
    { type: I18nService },
    { type: NotifyService },
    { type: ChangeDetectorRef },
    { type: TaskService },
    { type: Injector }
];
AssigneeInfoComponent.propDecorators = {
    disabled: [{ type: Input }],
    placeholder: [{ type: Input }],
    singleSelect: [{ type: Input }],
    filter: [{ type: Input }],
    ifShowBlank: [{ type: Input }],
    openFromIframe: [{ type: Input }],
    activityName: [{ type: Input }],
    allowGlobalAssign: [{ type: Input }],
    wfContext: [{ type: Input }],
    myUserHelp: [{ type: ViewChild, args: ['allUserDialog',] }],
    buttons: [{ type: ViewChild, args: ['taskExecuteButtons',] }],
    myUserHelpTable: [{ type: ViewChild, args: ['allUserTable',] }],
    dataTableEle: [{ type: ViewChild, args: ['allUserTable', { read: ElementRef },] }],
    sysUserHelp: [{ type: ViewChild, args: [SysFarrisLookupComponent,] }],
    sysUserHelpEle: [{ type: ViewChild, args: ['sysUserHelp', { read: ElementRef },] }],
    myUserHelpEle: [{ type: ViewChild, args: ['allUserDialog', { read: ElementRef },] }],
    afterConfirm: [{ type: Output }],
    assigneeInfo: [{ type: Input }],
    setAnonymous: [{ type: Input }],
    setAnonymousText: [{ type: Input }],
    selectedAssignees: [{ type: Input }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * 点击节流器：避免连续点击
 */
class ThrottleClickDirective {
    constructor() {
        // 一定的时间内只执行第一个事件
        this.THROTTLE_TIME = 2000;
        this.subject = new Subject();
        // 事件方法
        this.throttleClick = new EventEmitter();
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        /** @type {?} */
        const result = this.subject.pipe(throttleTime(this.THROTTLE_TIME));
        this.click = result.subscribe(e => {
            this.throttleClick.emit(e);
        });
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.click.unsubscribe();
    }
    /**
     * @param {?} evt
     * @return {?}
     */
    onClick(evt) {
        this.subject.next(evt);
    }
}
ThrottleClickDirective.decorators = [
    { type: Directive, args: [{
                selector: '[directive-throttle]'
            },] }
];
/** @nocollapse */
ThrottleClickDirective.ctorParameters = () => [];
ThrottleClickDirective.propDecorators = {
    throttleClick: [{ type: Output }],
    onClick: [{ type: HostListener, args: ['click', ['$event'],] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * 执行上传附件实体
 */
class FileUploadEntity {
}
class GspDocUploadEntity {
}
class GspDocMetadata {
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class CommonComment {
    /**
     * @return {?}
     */
    static newEntity() {
        return {
            id: TaskService.newId(),
            message: ''
        };
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class TaskCommentComponent {
    /**
     * @param {?} taskService
     * @param {?} httpSvc
     * @param {?} uploadDialog
     * @param {?} messageService
     * @param {?} i18nService
     * @param {?} loadingService
     * @param {?} notify
     */
    constructor(taskService, httpSvc, uploadDialog, messageService, i18nService, loadingService, notify) {
        this.taskService = taskService;
        this.httpSvc = httpSvc;
        this.uploadDialog = uploadDialog;
        this.messageService = messageService;
        this.i18nService = i18nService;
        this.loadingService = loadingService;
        this.notify = notify;
        this.showAttachment = true; //是否显示附件上传，组件控制
        //是否显示附件上传，组件控制
        this.showSign = true; //是否显示签名，组件控制（不同动作可能会不显示）
        //是否显示签名，组件控制（不同动作可能会不显示）
        this.showCommonComment = true; //是否显示常用意见
        this.placeholder = '';
        this.textAreaHeight = 120; //文字框的高度
        this.attachment = new EventEmitter(); //附件
        //附件
        this.signature = new EventEmitter(); //上传签名之后，发送签名id
        //常用意见删除
        this._value = '';
        this.attachmentList = [];
        this.ifShowAttachment = false; //任务中心配置，是否显示附件上传
        //任务中心配置，是否显示附件上传
        this.ifShowSign = false; //任务中心配置，是否显示手写签名
        //临时保存上传的图片
        this.downloadService = new DownloadService();
        this.ifUseSign = false; //是否使用手写
        //是否使用手写
        this.ifUseImg = true; //是否使用上传图片
        //是否使用上传图片
        this.ifEnableSign = true; //是否默认启用签名
        //是否默认启用签名
        this.ifUploadImg = false; //是否上传过图片
        //是否上传过图片
        this.ifCanEditSign = true; //是否允许编辑签名
        //原始的签名id
        this.commentList = [];
        this.originCommentList = [];
        this.commentColumns = [];
        this.onModelChange = (obj) => { };
        this.onModelTouched = (obj) => { };
        /**
         * 系统预置的不允许编辑删除
         * @param data data.rowData为实体数据
         * @return
         */
        this.beforeEdit = (data) => {
            if (data.rowData.userId == '*') {
                return of(false);
            }
            return of(true);
        };
    }
    //文字框的高度
    /**
     * @param {?} configList
     * @return {?}
     */
    set TaskCenterConfig(configList) {
        /** @type {?} */
        const attachment = configList.find(a => a.configCode == ConfigCode.If_Show_Attachment);
        /** @type {?} */
        const sign = configList.find(a => a.configCode == ConfigCode.If_Show_Signature);
        /** @type {?} */
        const enableSign = configList.find(a => a.configCode == ConfigCode.If_Use_Sign_By_Default);
        /** @type {?} */
        const editSign = configList.find(a => a.configCode === ConfigCode.If_Can_Edit_Signature);
        if (((/** @type {?} */ (window))).gspframeworkService.common) {
            this.curUserId = ((/** @type {?} */ (window))).gspframeworkService.common.userInfos.get().userId;
        }
        else {
            this.curUserId = ((/** @type {?} */ (window))).parent.gspframeworkService.common.userInfos.get().userId;
        }
        attachment && attachment.currentValue === 'true' && (this.ifShowAttachment = true);
        sign && sign.currentValue === 'true' && (this.ifShowSign = true);
        enableSign && enableSign.currentValue === 'false' && (this.ifEnableSign = false);
        editSign && editSign.currentValue === 'false' && (this.ifCanEditSign = false);
        if (this.ifShowSign && this.ifEnableSign) {
            this.getUserSign(this.curUserId);
        }
    }
    /**
     * @param {?} v
     * @return {?}
     */
    set value(v) {
        if (this._value !== v) {
            this._value = v;
            this.onModelChange(v);
        }
    }
    /**
     * @return {?}
     */
    get value() {
        return this._value;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.commentColumns = [{
                field: 'message',
                width: 100,
                title: this.i18nService.getValue('comment.static.content'),
                editor: { type: EditorTypes.TEXTBOX, options: {} },
            }, {
                field: 'userId',
                width: 20,
                title: this.i18nService.getValue('comment.static.type'),
                template: this.commentTypeCell
            }, {
                field: 'operate',
                width: 20,
                title: this.i18nService.getValue('comment.static.operate'),
                template: this.commentOperateCell
            }];
        // 获取常用意见列表
        this.loadComments();
    }
    /**
     * @return {?}
     */
    onEditComment() {
        this.dropDownEl.close();
        this.commentDialog.show();
    }
    /**
     * @return {?}
     */
    loadComments() {
        this.taskService.getCommentList().subscribe((data) => {
            this.commentList = data;
            this.originCommentList = [...data];
        });
    }
    /**
     * ControlValueAccessor必须实现的方法
     * @param {?} value
     * @return {?}
     */
    writeValue(value) {
        if (value !== this.value) {
            this.value = value;
        }
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnChange(fn) {
        this.onModelChange = fn;
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnTouched(fn) {
        this.onModelTouched = fn;
    }
    /**
     * 选择一条常用意见后事件
     * @param {?} data
     * @return {?}
     */
    buttonClick(data) {
        this.dropDownEl.close();
        this.value = data;
    }
    /**
     * 上传附件
     * @return {?}
     */
    uploadAttachment() {
        /** @type {?} */
        let isRepeat = false;
        this.uploadDialog.uploadFile(this.processInstanceId, 'wf_attachment').then(re => {
            for (let i of ((/** @type {?} */ (re)))) {
                isRepeat = false;
                for (let attach of this.attachmentList) {
                    if (attach.fileName === i.fileName) {
                        this.messageService.info('包含重复文件' + i.fileName);
                        isRepeat = true;
                        break;
                    }
                }
                if (!isRepeat) {
                    this.attachmentList.push(i);
                }
            }
            this.attachment.emit(this.attachmentList);
            //执行上传附件
            /** @type {?} */
            let files = new FileUploadEntity();
            files.rootId = "wf_attachment";
            files.metadataIdList = [];
            this.attachmentList.forEach(a => {
                files.metadataIdList.push(a.metadataId);
            });
            files.metadataIdList.length && this.taskService.uploadAttachment(files).subscribe(() => { });
        });
    }
    /**
     * 删除附件
     * @param {?} attachment
     * @return {?}
     */
    attachmentDelete(attachment) {
        /** @type {?} */
        var gspDocDeleteEntity = {
            rootId: "wf_attachment",
            metadataId: attachment.metadataId,
            mode: "Formal"
        };
        /** @type {?} */
        let index = this.attachmentList.indexOf(attachment);
        if (index > -1) {
            this.attachmentList.splice(index, 1);
        }
        this.attachment.emit(this.attachmentList);
        this.taskService.deleteAttachment(gspDocDeleteEntity).subscribe(() => { });
    }
    /**
     * 获取不同格式附件的缩略图
     * @param {?} attachmentInfo
     * @return {?}
     */
    imageUrl(attachmentInfo) {
        /** @type {?} */
        const url = '/platform/runtime/wf/webapp/mobiletaskcenter/assets/accessory/';
        return url + this.taskService.createItem(attachmentInfo) + '.svg';
    }
    /**
     * 展示手写签名dialog
     * @return {?}
     */
    showSignDialog() {
        this.signDialog.show();
        if (!this.ifEnableSign) {
            this.getUserSign(this.curUserId);
        }
    }
    /**
     * 点击删除签名
     * @return {?}
     */
    clickToDeleteImage() {
        this.signatureImage = '';
        this.signature.emit(null);
        /** @type {?} */
        const load = this.loadingService.show();
        this.taskService.addTaskCenterConfig(ConfigCode.If_Use_Sign_By_Default, 'false').subscribe(re => {
            load.close();
        }, () => {
            load.close();
        });
    }
    /**
     * @return {?}
     */
    clickToUseSign() {
        this.ifUseImg = false;
        this.ifUseSign = true;
        /** @type {?} */
        const canvas = this.signaturePad.canvasDiv.nativeElement.querySelector('canvas');
        canvas.height = 252;
        canvas.width = 665;
    }
    /**
     * @return {?}
     */
    clickToUploadImg() {
        this.farrisAvatar.onClick();
    }
    /**
     * @return {?}
     */
    clickToConfirm() {
        /** @type {?} */
        let image;
        if (this.signaturePad && this.signaturePad.isDraw) { //如果签过名
            image = this.signaturePad.confirm();
        }
        else if (this.ifUploadImg) { //如果上传过图片
            image = this.tmpSignatureImage;
        }
        if (image) {
            this.uploadSignatureImg(image);
        }
        else {
            if (this.tmpSignatureImage) {
                this.signatureImage = this.tmpSignatureImage;
                this.signature.emit(this.originSignId);
                if (!this.ifEnableSign) {
                    /** @type {?} */
                    const load = this.loadingService.show();
                    this.taskService.addTaskCenterConfig(ConfigCode.If_Use_Sign_By_Default, 'true').subscribe(re => {
                        load.close();
                    }, () => {
                        load.close();
                    });
                }
            }
            this.signDialog.close();
        }
    }
    /**
     * @return {?}
     */
    clickToReset() {
        this.ifUseSign = false;
        this.ifUseImg = true;
        this.signatureImage = '';
        this.tmpSignatureImage = '';
        this.signature.emit('');
    }
    /**
     * @return {?}
     */
    clickToCancel() {
        this.signDialog.close();
    }
    /**
     * 上传图片后事件
     * event.base64 是图片信息,event.name是带后缀的图片名，event.type如image/jpeg
     * @param {?} event
     * @return {?}
     */
    imgChange(event) {
        this.ifUseImg = true;
        this.ifUseSign = false;
        this.ifUploadImg = true;
        /** @type {?} */
        const image = event.base64;
        this.tmpSignatureImage = image;
        this.signatureImage = image;
    }
    /**
     * @private
     * @param {?} image
     * @return {?}
     */
    uploadSignatureImg(image) {
        /** @type {?} */
        var uploadSignature = new GspDocUploadEntity();
        uploadSignature.fileContent = image.split(',')[1];
        uploadSignature.filePath = this.curUserId;
        uploadSignature.mode = "Formal";
        uploadSignature.metadata = new GspDocMetadata();
        uploadSignature.metadata.id = this.taskService.createNM();
        uploadSignature.metadata.fileName = this.taskService.createNM() + ".png";
        uploadSignature.metadata.rootId = "taskcentersignature";
        uploadSignature.metadata.docType = "png";
        /** @type {?} */
        const load = this.loadingService.show();
        this.taskService.uploadSignature(uploadSignature).subscribe(signId => {
            load.close();
            this.originSignId = signId;
            this.signature.emit(signId);
            this.signatureImage = image;
            this.signDialog.close();
        }, error => {
            load.close();
            this.messageService.error('上传签名失败');
        });
    }
    /**
     * 获取用户的最近一次签名
     * @private
     * @param {?} userId
     * @return {?}
     */
    getUserSign(userId) {
        /** @type {?} */
        const load = this.loadingService.show();
        this.taskService.getUserSign(userId).subscribe(result => {
            load.close();
            if (result && result.length) {
                /** @type {?} */
                var sign;
                if (result.length == 1) {
                    sign = result[0];
                }
                else {
                    /** @type {?} */
                    const list = result.filter(a => a && a.lastModifiedTime);
                    sign = list.reduce(function (a, b) {
                        return a.lastModifiedTime > b.lastModifiedTime ? a : b;
                    });
                }
                this.signature.emit(sign.id);
                this.signatureImage = this.downloadService.getDownloadUrl(sign.id, 'taskcentersignature');
                this.tmpSignatureImage = this.signatureImage;
            }
        }, error => {
            console.error(error);
            load.close();
        });
    }
    /**
     * 新增一条常用意见
     * @return {?}
     */
    add() {
        /** @type {?} */
        const newEntity = CommonComment.newEntity();
        newEntity.sortOrder = this.commentList.length + 1;
        this.commentList = this.commentList.concat(newEntity);
    }
    /**
     * 删除一条意见 data.rowData
     * @param {?} data
     * @return {?}
     */
    clickToDeleteComment(data) {
        if (data.rowData.userId !== '*') {
            this.commentList = this.commentList.filter(c => c.id != data.rowData.id);
            this.dataGrid.loadData(this.commentList);
        }
    }
    /**
     * 常用意见保存
     * @return {?}
     */
    save() {
        this.dataGrid.endCellEdit();
        this.httpSave().subscribe(r => {
            this.loadComments();
            this.commentDialog.close();
        });
    }
    /**
     * 调用接口执行新增删除、修改
     * @private
     * @return {?}
     */
    httpSave() {
        /** @type {?} */
        const url = `/api/runtime/wf/v1.0/commonComments`;
        /** @type {?} */
        const originCommentIds = this.originCommentList.filter(o => o.userId !== '*').map(d => d.id);
        //删除的
        /** @type {?} */
        const deleteIds = originCommentIds.filter(id => this.commentList.findIndex(c => c.id === id) < 0);
        return forkJoin(deleteIds.map(id => this.httpSvc.delete(url + `/${id}`, null))
            .concat(this.commentList.map(add => this.httpSvc.post(url, add))));
    }
    /**
     * web端打开附件预览
     * @param {?} metadataId
     * @return {?}
     */
    attachmentPreview(metadataId) {
        /** @type {?} */
        const options = {
            appType: "app",
            funcId: "",
            tabName: "文档在线预览",
            appId: "6ccb476b-f2ba-df8f-6f47-d37d100c56e2",
            appEntrance: "docviewertab",
            tabId: new Date().getTime(),
            entityParams: {
                metadataIdList: [metadataId],
                rootId: "wf_attachment",
                metadataId: null,
                viewOptions: {
                    showHeader: true,
                    showPaging: true,
                    showThumbnails: true,
                    showDownload: true,
                    showSearch: true,
                    showZoom: true,
                    showPrint: true,
                    showSecondaryToolBar: true,
                },
            },
        };
        ((/** @type {?} */ (window))).gspframeworkService.rtf.func.openMenu(options);
    }
}
TaskCommentComponent.decorators = [
    { type: Component, args: [{
                selector: 'wf-comment',
                template: "<div\r\n  class=\"fa-approve-comment fa-approve-common-gutter\"\r\n  style=\"margin-bottom: 20px\"\r\n>\r\n  <!-- \u8F93\u5165\u6846 -->\r\n  <div class=\"fa-approve-comment--content\">\r\n    <textarea\r\n      class=\"form-control content-textarea\"\r\n      style=\"font-size: 13px\"\r\n      [(ngModel)]=\"value\"\r\n      [attr.placeholder]=\"placeholder\"\r\n      [style.height.px]=\"textAreaHeight\"\r\n    ></textarea>\r\n  </div>\r\n  <!-- \u8F93\u5165\u6846\u4E0B\u65B9\u4E00\u6392\u6309\u94AE -->\r\n  <div class=\"fa-approve-comment--footer\">\r\n    <div\r\n      *ngIf=\"showAttachment || showSign || showCommonComment\"\r\n      class=\"approve-comment--text-btns\"\r\n    >\r\n      <!-- \u5E38\u7528\u610F\u89C1 -->\r\n      <div *ngIf=\"showCommonComment\" class=\"text-btns-item\">\r\n        <span class=\"f-icon f-icon-message\"></span>\r\n        <div fDropdown #dropdownEl=\"fDropdown\">\r\n          <span fDropdownToggle>\r\n            {{ \"comment.static.inputLabel\" | translate }}\r\n          </span>\r\n          <div class=\"dropdown-menu\" fDropdownMenu>\r\n            <li\r\n              class=\"dropdown-item\"\r\n              *ngFor=\"let comment of commentList\"\r\n              (click)=\"buttonClick(comment.message)\"\r\n            >\r\n              <span>{{ comment.message }}</span>\r\n            </li>\r\n            <div class=\"dropdown-divider\"></div>\r\n            <!-- \u610F\u89C1\u7BA1\u7406 -->\r\n            <div class=\"dropdown-item\" (click)=\"onEditComment()\">\r\n              <span class=\"f-icon f-icon-home-setup\"></span>\r\n              <span>{{ \"comment.static.manage\" | translate }}</span>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <!-- \u4E0A\u4F20\u9644\u4EF6 -->\r\n      <div\r\n        class=\"text-btns-item\"\r\n        *ngIf=\"ifShowAttachment && showAttachment\"\r\n        (click)=\"uploadAttachment()\"\r\n        title=\"{{ 'comment.attachment.tips' | translate }}\"\r\n      >\r\n        <span class=\"f-icon f-icon-attachment\"></span>\r\n        <span class=\"text-btns-item--text\">\r\n          {{ \"comment.static.attachmentUpload\" | translate }}\r\n        </span>\r\n      </div>\r\n      <!-- \u624B\u5199\u7B7E\u540D -->\r\n      <div\r\n        class=\"text-btns-item\"\r\n        *ngIf=\"showSign && ifShowSign && ifCanEditSign\"\r\n        title=\"{{ 'comment.signature.tips' | translate }}\"\r\n        (click)=\"showSignDialog()\"\r\n      >\r\n        <span class=\"f-icon f-icon-edit\"></span>\r\n        <span>{{ \"comment.signature.title\" | translate }}</span>\r\n      </div>\r\n      <!-- \u624B\u5199\u7B7E\u540D\u9884\u89C8 -->\r\n      <div\r\n        *ngIf=\"showSign && ifShowSign && signatureImage\"\r\n        class=\"signatureImage\"\r\n      >\r\n        <img [src]=\"signatureImage\" style=\"width: 70px; height: 26px\" />\r\n        <div *ngIf=\"ifCanEditSign\"\r\n          class=\"attachment-delete\"\r\n          (click)=\"clickToDeleteImage()\"\r\n          title=\"{{ 'comment.signature.disable' | translate }}\"\r\n        >\r\n          <span class=\"f-icon f-icon-x\"></span>\r\n        </div>\r\n      </div>\r\n    </div>\r\n    <!-- \u9644\u4EF6\u9884\u89C8 -->\r\n    <div *ngIf=\"attachmentList.length > 0\">\r\n      <li *ngFor=\"let attachment of attachmentList\">\r\n        <div class=\"wf-docFile\">\r\n          <div><img class=\"wf-docFileIcon\" [src]=\"imageUrl(attachment)\" /></div>\r\n          <div class=\"wf-docFileInfo\">\r\n            <div class=\"attachment-list\">\r\n              <a>{{ attachment.fileName }}</a>\r\n            </div>\r\n            <div\r\n              class=\"attachment-delete\"\r\n              (click)=\"attachmentDelete(attachment)\"\r\n            >\r\n              <span class=\"f-icon f-icon-close-outline\"></span>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </li>\r\n    </div>\r\n  </div>\r\n</div>\r\n\r\n<!-- \u5E38\u7528\u610F\u89C1\u7EF4\u62A4 -->\r\n<farris-dialog\r\n  #commentDialog\r\n  [buttons]=\"formButtonRef\"\r\n  [width]=\"740\"\r\n  [height]=\"440\"\r\n  [title]=\"'comment.static.title' | translate\"\r\n>\r\n  <div class=\"task-center-comment-datagrid-div\">\r\n    <farris-datagrid\r\n      #dataGrid\r\n      [data]=\"commentList\"\r\n      [columns]=\"commentColumns\"\r\n      [editable]=\"true\"\r\n      [fit]=\"true\"\r\n      [editMode]=\"'cell'\"\r\n      [pagination]=\"false\"\r\n      [fitColumns]=\"true\"\r\n      [clickToEdit]=\"true\"\r\n      [beforeEdit]=\"beforeEdit\"\r\n    >\r\n    </farris-datagrid>\r\n  </div>\r\n  <div class=\"task-comment-add task-comment-add-common\" (click)=\"add()\">\r\n    <span class=\"f-icon f-icon-plus mr-1\"></span>\r\n    <span>{{ \"comment.static.clickToAdd\" | translate }}</span>\r\n  </div>\r\n</farris-dialog>\r\n\r\n<!-- \u5E38\u7528\u610F\u89C1\u7EF4\u62A4\u6309\u94AE -->\r\n<ng-template #formButtonRef>\r\n  <button class=\"btn btn-primary mr-2\" (click)=\"save()\">\r\n    {{ \"comment.static.confirm\" | translate }}\r\n  </button>\r\n  <button class=\"btn btn-secondary\" (click)=\"commentDialog.close()\">\r\n    {{ \"comment.static.cancel\" | translate }}\r\n  </button>\r\n</ng-template>\r\n\r\n<!-- \u7B7E\u540D\u5F39\u6846 -->\r\n<farris-dialog\r\n  #signDialog\r\n  [buttons]=\"signButtons\"\r\n  [width]=\"710\"\r\n  [height]=\"420\"\r\n  [title]=\"'comment.signature.dialogTitle' | translate\"\r\n  [resizable]=\"false\"\r\n  [showMaxButton]=\"false\"\r\n>\r\n  <wf-sign-here\r\n    #wfSignHere\r\n    [title]=\"''\"\r\n    [ngStyle]=\"!ifUseSign ? { display: 'none' } : null\"\r\n  ></wf-sign-here>\r\n  <div *ngIf=\"ifUseImg && tmpSignatureImage\" class=\"signature-img-default\">\r\n    <img [src]=\"tmpSignatureImage\" style=\"height: 252px\" />\r\n  </div>\r\n  <div *ngIf=\"ifUseImg && !tmpSignatureImage\" class=\"signature-img-div\">\r\n    <div class=\"signature-img-main\">\r\n      <div style=\"margin-bottom: 28px\">\r\n        <img\r\n          src=\"/platform/runtime/common/web/@gsp-wf/wf-task-handler/assets/img/signIcon.svg?v=20210623\"\r\n        />\r\n      </div>\r\n      <div class=\"signature-img-text\">\r\n        <span>{{ \"comment.signature.note1\" | translate }}</span>\r\n        <span class=\"signature-text-action\" (click)=\"clickToUseSign()\">{{\r\n          \"comment.signature.sign\" | translate\r\n        }}</span>\r\n        <span>{{ \"comment.signature.note2\" | translate }}</span>\r\n        <span class=\"signature-text-action\" (click)=\"clickToUploadImg()\">{{\r\n          \"comment.signature.upload\" | translate\r\n        }}</span>\r\n        <span>{{ \"comment.signature.note3\" | translate }}</span>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</farris-dialog>\r\n\r\n<!-- \u624B\u5199\u7B7E\u540D\u6309\u94AE -->\r\n<ng-template #signButtons>\r\n  <button class=\"btn btn-primary mr-2\" (click)=\"clickToConfirm()\">\r\n    {{ \"comment.signature.ok\" | translate }}\r\n  </button>\r\n  <button class=\"btn btn-secondary mr-2\" (click)=\"clickToReset()\">\r\n    {{ \"comment.signature.reset\" | translate }}\r\n  </button>\r\n  <button class=\"btn btn-secondary\" (click)=\"clickToCancel()\">\r\n    {{ \"comment.static.cancel\" | translate }}\r\n  </button>\r\n</ng-template>\r\n\r\n<!-- \u4F7F\u7528\u5934\u50CF\u7EC4\u4EF6\u505A\u56FE\u7247\u4E0A\u4F20 -->\r\n<farris-avatar\r\n  #farrisAvatar\r\n  (imgChange)=\"imgChange($event)\"\r\n  style=\"display: none\"\r\n></farris-avatar>\r\n\r\n<!-- \u5E38\u7528\u610F\u89C1\u7C7B\u522B -->\r\n<ng-template #commentTypeCell let-ctx>\r\n  <div>\r\n    <span\r\n      *ngIf=\"ctx.rowData.userId === '*'\"\r\n      class=\"task-comment-type task-comment-type-blue\"\r\n      >{{ \"comment.static.public\" | translate }}</span\r\n    >\r\n    <span\r\n      *ngIf=\"ctx.rowData.userId !== '*'\"\r\n      class=\"task-comment-type task-comment-type-yellow\"\r\n      >{{ \"comment.static.private\" | translate }}</span\r\n    >\r\n  </div>\r\n</ng-template>\r\n\r\n<!-- \u5E38\u7528\u610F\u89C1\u64CD\u4F5C -->\r\n<ng-template #commentOperateCell let-ctx>\r\n  <div\r\n    *ngIf=\"ctx.rowData.userId !== '*'\"\r\n    class=\"btn-link\"\r\n    style=\"padding: 5px 0\"\r\n    (click)=\"clickToDeleteComment(ctx)\"\r\n  >\r\n    {{ \"comment.static.delete\" | translate }}\r\n  </div>\r\n</ng-template>\r\n",
                providers: [{
                        provide: NG_VALUE_ACCESSOR,
                        useExisting: forwardRef(() => TaskCommentComponent),
                        multi: true
                    },],
                styles: [":host ::ng-deep .dropdown .btn{padding:0}:host ::ng-deep .dropdown .btn-secondary{box-shadow:none}:host ::ng-deep .dropdown .btn-secondary:focus{box-shadow:none}:host ::ng-deep .dropdown .btn-secondary:hover{color:#388fff}.task-center-comment-datagrid-div{display:flex;flex-grow:0;overflow:hidden;height:295px;padding:0 24px}.task-comment-type{padding:2px 6px;border-radius:4px;font-size:12px}.task-comment-type-blue{background:#eef5ff;border:0 solid #aed1ff;color:#5ea4ff}.task-comment-type-yellow{background:#fef5ec;border:0 solid #fad0a1;color:#f5a144}.task-comment-add{display:flex;justify-content:center;align-items:center;margin:0 24px;cursor:pointer;overflow:hidden;font-size:12px;text-align:center;padding:6px;border-radius:4px}.task-comment-add-common{color:#a8adb8;background:#f4f6fc;border:1px dashed #d2d7e2}.task-comment-add:hover{background:rgba(238,245,255,.8);border:1px solid rgba(82,157,255,.4)}.signatureImage:hover .attachment-delete{display:block}.fa-approval-operate-list{display:flex;flex-direction:row;align-items:center}.fa-approval-operate-list .approval-operate--label{position:relative;margin-right:8px;padding:3px 16px;border:1px solid rgba(0,0,0,.15);border-radius:2px;overflow:hidden;cursor:pointer;margin-bottom:0;color:#595959}.fa-approval-operate-list .approval-operate--label .label-title{font-size:14px;line-height:20px;white-space:nowrap}.fa-approval-operate-list .approval-operate--label .label-tip{position:absolute;display:block;right:0;bottom:0;width:14px;height:14px;border:7px solid #dadada;border-top:7px solid transparent;border-left:7px solid transparent}.fa-approval-operate-list .approval-operate--label .label-icon{position:absolute;display:block;right:-3px;bottom:-2px;font-size:12px;color:#fff}.fa-approval-operate-list .approval-operate--label .label-icon::before{content:\"\\e118\"}.fa-approval-operate-list .approval-operate--radio{display:none}.fa-approval-operate-list .approval-operate--radio:checked~.approval-operate--label{color:#388fff;border-color:#388fff;background:rgba(23,145,255,.05)}.fa-approval-operate-list .approval-operate--radio:checked~.approval-operate--label .label-tip{border-right-color:#388fff;border-bottom-color:#388fff}.fa-dropdown-button{border-color:#f7f7f7;font-size:12px;color:#667580;background:#f7f7f7}.fa-btn-like-dropdown{display:flex;align-items:center}.fa-btn-like-dropdown .like-dropdown--text{margin:0 4px 0 0}.fa-btn-like-dropdown .like-dropdown--icon{color:rgba(0,0,0,.25)}.fa-approve-common-gutter{margin:0 0 12px}.fa-approve-comment .approve-comment--title{display:inline-block;color:#667580;border-radius:4px 4px 0 0;height:26px;padding:0 9px;position:relative;background:#f7f7f7;cursor:pointer}.fa-approve-comment .approve-comment--title:after{content:\"\";height:100%;position:absolute;right:-10px;top:0;bottom:0;border-right:5px solid transparent;border-left:5px solid #f7f7f7;border-bottom:13px solid #f7f7f7;border-top:13px solid transparent}.fa-approve-comment .approve-comment--title .fa-btn-like-dropdown{font-size:12px;padding:2px 0}.fa-approve-comment .fa-approve-comment--content .content-textarea{border-color:#dcdcdc;border-radius:0 0 2px 2px}.fa-approve-comment .fa-approve-comment--footer{font-size:13px;color:#667580;background:#f7f7f7;align-items:center;padding:5px 0}.fa-approve-comment .approve-comment--text-btns{display:flex;flex-direction:row;padding:0 5px}.fa-approve-comment .approve-comment--text-btns .text-btns-item{display:flex;flex-direction:row;align-items:center;font-size:12px;line-height:18px;color:#667580;margin-right:20px;cursor:pointer}.fa-approve-comment .approve-comment--text-btns .text-btns-item:hover{color:#388fff}.fa-approve-comment .approve-comment--text-btns .text-btns-item .f-icon{margin-right:4px}.fa-approveal-links::after{content:\".\";display:block;height:0;clear:both;visibility:hidden}.fa-approveal-links .approveal-links--link{font-size:14px;position:relative;padding:0 16px 0 0;display:flex;align-items:center;float:left}.fa-approveal-links .approveal-links--link .link-text{color:rgba(0,0,0,.65);margin:0 8px 0 0}.fa-approveal-links .approveal-links--link+.approveal-links--link{padding-left:16px}.fa-approveal-links .approveal-links--link+.approveal-links--link::before{content:\"\";position:absolute;width:1px;height:80%;left:0;top:10%;background:#dbdbdb}.fa-btn-group-lg .btn{padding-top:6px;padding-bottom:6px;min-width:100px;text-align:center}.fa-approve-record{padding:0 0 16px;position:relative}.fa-approve-record .fa-approve-record--timeline{position:absolute;width:34px;top:0;bottom:0;z-index:100}.fa-approve-record .fa-approve-record--timeline::after{content:\"\";position:absolute;width:1px;height:100%;overflow:hidden;left:50%;top:0;z-index:101;border-left:1px dashed #dcdcdc}.fa-approve-record .fa-approve-record--timeline .fa-approve-star{position:relative;z-index:103;margin:20px auto}.fa-approve-record.fa-state-running .fa-approve-record--timeline::after{top:20px}.fa-approve-record:last-child .fa-approve-record--timeline::after{height:20px}.fa-approve-record .fa-approve-record--content{margin:0 0 0 34px;padding:16px 14px;background:#f9f9f9;border-radius:2px}.fa-approve-record .fa-approve-record--content .approve-record--header{margin:0 0 12px;display:flex;align-items:center}.fa-approve-record .fa-approve-record--content .approve-record--header .header--title{margin-bottom:0;color:rgba(0,0,0,.85)}.fa-approve-record .fa-approve-record--content .approve-record--header>*{margin:0 19px 0 0}.fa-approve-record .approve-record--list-item{display:flex;flex-direction:row}.fa-approve-record .approve-record--list-item+.approve-record--list-item{padding-top:8px}.fa-approve-record .approve-record--list-item .list-item--auxiliary{width:30px;margin:0 10px 0 0}.fa-approve-record .approve-record--list-item .list-item--main{flex-grow:1;flex-shrink:1;flex-basis:auto;padding:6px 0 0;background:#f9f9f9}.fa-approve-record .approve-record--list-item .list-item--content{padding:20px 0 0}.fa-approve-record .approve-record--list-item .list-item--content .list-item--info{font-size:12px;margin-bottom:0}.fa-approve-record .approve-record--list-item .list-item--content .list-item--info .info-label{color:rgba(0,0,0,.65)}.fa-approve-record .approve-record--list-item .list-item--content .list-item--info .info-text{color:rgba(0,0,0,.85)}.fa-approve-record .approve-record--list-item .list-item--header{display:flex;align-items:center}.fa-approve-record .approve-record--list-item .list-item--header>*{margin:0 16px 0 0}.fa-approve-record .approve-record--list-item .list-item--header .list-item--info{margin-bottom:0;font-size:12px}.fa-approve-record .approve-record--list-item .list-item--header .list-item--info .info-label{color:rgba(0,0,0,.35)}.fa-approve-record .approve-record--list-item .list-item--header .list-item--info .info-text{color:rgba(0,0,0,.65)}.fa-approve-record .approve-record--list-item .list-item--name{color:#4297fa}.fa-approve-record .approve-record--avatar{width:30px;height:30px;border-radius:15px}.fa-approve-round-bg{margin:4px auto 0;width:30px;height:30px;background:#59a1ff;border-radius:18px;line-height:30px;text-align:center;white-space:nowrap;font-size:12px;overflow:hidden}.fa-approve-round-bg-text{color:#fff}.fa-approve-star{width:14px;height:14px;display:block;background:rgba(56,143,255,.4);border-radius:7px;position:relative}.fa-approve-star::after{content:\"\";width:8px;height:8px;position:absolute;top:50%;left:50%;margin:-4px 0 0 -4px;border-radius:4px;background:#388fff}.fa-approve-star.bg-warning{background:rgba(245,156,36,.4)!important}.fa-approve-star.bg-warning::after{background:#f59c24}.fa-approve-badge{padding-top:4px;padding-bottom:4px;border-radius:10px}.fa-approve-badge-light{font-size:13px;line-height:20px;padding:0 8px;color:#5f637a;border:1px solid #e6e6e6;background:#f6faff}.fa-approve-link-border{cursor:pointer;display:inline-block;border:1px solid #60a5ff;border-radius:13px;font-size:12px;line-height:16px;color:#388fff;padding:3px 10px;background:#ebf5ff}.fa-approve-link-border:hover{background:#2881ff;color:#fff}.fm-toolbar{flex-direction:row;display:flex}.wf-docFile{flex-shrink:1;flex-grow:1;flex-basis:0;display:flex;flex-direction:row;align-items:flex-start;border-top:1px solid #f8f9fa;border-left:1px solid #f8f9fa}.wf-docFileIcon{margin:0 0 0 4px;width:20px;height:20px;line-height:20px;text-align:center;overflow:hidden;white-space:nowrap;padding:2px}.wf-docFileInfo{flex-shrink:1;flex-grow:1;flex-basis:0;padding:2px 6px 0 9px;margin-left:0}.wf-docFileInfo:hover .attachment-delete{display:block}.wf-docFileSize{font-size:11px;color:#888}.wf-doc-delete{margin:auto;font-size:18px;color:#f8f9fa}li{list-style:none}.attachment-delete{float:right;cursor:pointer;display:none;text-align:right;padding-right:10px}.attachment-delete:hover{color:#4297fa}.attachment-list{float:left;font-size:12px}.signature-img-div{display:flex;justify-content:center;align-items:center;height:100%;background:#fafcfd;border:1px solid #d8dfed;border-radius:8px;margin:0 10px}.signature-img-main{display:flex;flex-direction:column;justify-content:center;align-items:center}.signature-img-text{font-size:13px;color:rgba(106,111,121,.85)}.signature-text-action{color:#529efe;padding:0 2px;cursor:pointer}.signature-img-default{display:flex;justify-content:center;align-items:center;height:inherit}"]
            }] }
];
/** @nocollapse */
TaskCommentComponent.ctorParameters = () => [
    { type: TaskService },
    { type: HttpService },
    { type: UploadDialogService },
    { type: MessagerService },
    { type: I18nService },
    { type: LoadingService },
    { type: NotifyService }
];
TaskCommentComponent.propDecorators = {
    showAttachment: [{ type: Input }],
    showSign: [{ type: Input }],
    showCommonComment: [{ type: Input }],
    comment: [{ type: Input }],
    placeholder: [{ type: Input }],
    processInstanceId: [{ type: Input }],
    textAreaHeight: [{ type: Input }],
    TaskCenterConfig: [{ type: Input }],
    attachment: [{ type: Output }],
    signature: [{ type: Output }],
    commentDialog: [{ type: ViewChild, args: ['commentDialog',] }],
    signDialog: [{ type: ViewChild, args: ['signDialog',] }],
    dropDownEl: [{ type: ViewChild, args: ['dropdownEl',] }],
    signaturePad: [{ type: ViewChild, args: ['wfSignHere',] }],
    farrisAvatar: [{ type: ViewChild, args: ['farrisAvatar',] }],
    dataGrid: [{ type: ViewChild, args: ['dataGrid',] }],
    commentTypeCell: [{ type: ViewChild, args: ['commentTypeCell',] }],
    commentOperateCell: [{ type: ViewChild, args: ['commentOperateCell',] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class WfTaskHandlerModule {
}
WfTaskHandlerModule.decorators = [
    { type: NgModule, args: [{
                declarations: [
                    TranslatePipe,
                    TaskExecuteComponent,
                    TaskAssigninfoComponent,
                    ProcessSelectorComponent,
                    AssigneeInfoComponent,
                    ThrottleClickDirective,
                    TaskCommentComponent,
                    UrgeHandleComponent,
                ],
                imports: [
                    CommonModule,
                    FormsModule,
                    DataTableModule,
                    FarrisDialogModule,
                    PaginationModule,
                    NotifyModule,
                    ComboListModule,
                    SysManagerUIModule,
                    WfApprovalLogsModule,
                    UiFlowchartModule,
                    CommonSharedModule,
                    LoadingModule,
                    TaskImplApiModule,
                    MessagerModule,
                    InputGroupModule,
                    WfSignModule,
                    AvatarModule,
                    FDropdownDirectiveTypeModule,
                    DatagridModule,
                    DatagridEditorsModule,
                    DatagridModule.forRoot([
                        ...EditorProviders
                    ]),
                    FarrisFormsModule,
                    SwitchModule
                ],
                providers: [
                    TaskService,
                    I18nService,
                    WfTaskHandlerService,
                    FrameworkService,
                    SessionService,
                    HttpService,
                    CacheService,
                    FrmEventBus,
                    FuncsService,
                ],
                exports: [
                    TaskExecuteComponent,
                    TaskAssigninfoComponent,
                    ProcessSelectorComponent
                ],
                entryComponents: [
                    TaskExecuteComponent,
                    TaskAssigninfoComponent,
                    ProcessSelectorComponent,
                ]
            },] }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { WfTaskHandlerService, WfTaskHandlerModule, TaskExecuteComponent, TaskAssigninfoComponent, TaskService, I18nService, TranslatePipe, ProcessSelectorComponent, AssigneeInfoComponent, TaskCommentComponent, UrgeHandleComponent as ɵa, ThrottleClickDirective as ɵb };

//# sourceMappingURL=gsp-wf-wf-task-handler.js.map