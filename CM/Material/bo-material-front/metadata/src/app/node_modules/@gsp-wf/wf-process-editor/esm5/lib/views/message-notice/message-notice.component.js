/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, HostBinding, EventEmitter, Output, Input, ViewChild, TemplateRef, ComponentFactoryResolver, Injector } from '@angular/core';
import { activitySendTime, MessageNotice, processSendTime } from './message-notice';
import { BsModalService } from '@farris/ui-modal';
import { MessagerService } from '@farris/ui-messager';
import { MessageNoticeEditComponent } from './message-notice-edit/message-notice-edit.component';
import { DatagridComponent } from '@farris/ui-datagrid';
import { ProcessDeUtil } from '../../domain/process-de-util';
import { ProcessDesignerUIState } from '../../app/process-designer.uistate';
var MessageNoticeComponent = /** @class */ (function () {
    function MessageNoticeComponent(resolver, injector, modalService, message, uistate) {
        this.resolver = resolver;
        this.injector = injector;
        this.modalService = modalService;
        this.message = message;
        this.uistate = uistate;
        this.cls = 'farris-main-area flex-column';
        this.closeModal = new EventEmitter();
        this.submitModal = new EventEmitter();
        this.editorParams = {};
        this.modalConfig = {
            title: '消息通知',
            width: 800,
            height: 515,
            showButtons: true
        };
        this.messageNotices = new Array();
        this.columns = [];
        this.location = 'activity';
    }
    Object.defineProperty(MessageNoticeComponent.prototype, "value", {
        set: /**
         * @param {?} notices
         * @return {?}
         */
        function (notices) {
            if (notices && notices.length > 0) {
                this.messageNotices = notices.map((/**
                 * @param {?} n
                 * @return {?}
                 */
                function (n) { return ({
                    id: ProcessDeUtil.GenerateElementId(),
                    content: n.content,
                    sendTime: n.sendTime,
                    sendType: n.sendType,
                    subject: n.subject,
                    receiver: n.receiver,
                    receiverText: n.receiverText
                }); }));
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    MessageNoticeComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.location = this.editorParams.location;
        this.columns = [
            {
                field: 'subject', width: 100, title: '消息主题',
            }, {
                field: 'content', width: 150, title: '消息内容', showTips: true,
            }, {
                field: 'sendTime', width: 100, title: '发送时机',
                formatter: {
                    type: 'enum',
                    options: { valueField: 'value', textField: 'text', data: this.location === 'process' ? processSendTime : activitySendTime }
                },
            }, {
                field: 'sendType', width: 100, title: '发送方式',
                formatter: {
                    type: 'enum',
                    options: { valueField: 'value', textField: 'name', data: this.uistate.messageChannels.map((/**
                         * @param {?} m
                         * @return {?}
                         */
                        function (m) { return ({ value: m.code, name: m.name }); })) }
                },
            }, {
                field: 'receiverText', width: 120, title: '消息接收人', showTips: true
            }
        ];
        if (this.location === 'messageActivity') {
            this.columns = this.columns.filter((/**
             * @param {?} c
             * @return {?}
             */
            function (c) { return c.field !== 'sendTime'; }));
        }
    };
    /**
     * @return {?}
     */
    MessageNoticeComponent.prototype.add = /**
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var dialog;
        /** @type {?} */
        var compFactory = this.resolver.resolveComponentFactory(MessageNoticeEditComponent);
        /** @type {?} */
        var compRef = compFactory.create(this.injector);
        compRef.instance.location = this.location;
        /** @type {?} */
        var messageNotice = new MessageNotice();
        if (this.location === 'activity') {
            messageNotice.sendTime = 'WORKITEM_CREATED';
            messageNotice.receiver = 'workItemParticipant';
            messageNotice.receiverText = '任务办理人';
        }
        else if (this.location === 'process') {
            messageNotice.sendTime = 'PROCESSINSTANCE_COMPLETED';
            messageNotice.receiver = 'procInstCreator';
            messageNotice.receiverText = '流程发起人';
        }
        else if (this.location === 'messageActivity') {
            messageNotice.receiver = 'procInstCreator';
            messageNotice.receiverText = '流程发起人';
        }
        compRef.instance.value = messageNotice;
        compRef.instance.submitEmitter.subscribe((/**
         * @param {?} re
         * @return {?}
         */
        function (re) {
            _this.messageNotices = _this.messageNotices.concat([re]);
            dialog.close();
        }));
        compRef.instance.closeEmitter.subscribe((/**
         * @param {?} re
         * @return {?}
         */
        function (re) {
            dialog.close();
        }));
        /** @type {?} */
        var modalConfig = {
            title: '消息通知',
            width: 490,
            height: this.location === 'messageActivity' ? 450 : 490,
            showButtons: true,
            buttons: compRef.instance.footer
        };
        dialog = this.modalService.show(compRef, modalConfig);
    };
    /**
     * @return {?}
     */
    MessageNoticeComponent.prototype.edit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (!this.grid.selectedRow) {
            this.message.info('尚未选中消息通知！');
            return;
        }
        /** @type {?} */
        var dialog;
        /** @type {?} */
        var compFactory = this.resolver.resolveComponentFactory(MessageNoticeEditComponent);
        /** @type {?} */
        var compRef = compFactory.create(this.injector);
        compRef.instance.location = this.location;
        compRef.instance.value = this.grid.selectedRow.data;
        compRef.instance.submitEmitter.subscribe((/**
         * @param {?} re
         * @return {?}
         */
        function (re) {
            _this.messageNotices = _this.messageNotices.map((/**
             * @param {?} m
             * @return {?}
             */
            function (m) {
                if (m.id === re.id) {
                    return re;
                }
                return m;
            }));
            dialog.close();
        }));
        compRef.instance.closeEmitter.subscribe((/**
         * @param {?} re
         * @return {?}
         */
        function (re) {
            dialog.close();
        }));
        /** @type {?} */
        var modalConfig = {
            title: '消息通知',
            width: 490,
            height: this.location === 'messageActivity' ? 450 : 490,
            showButtons: true,
            buttons: compRef.instance.footer
        };
        dialog = this.modalService.show(compRef, modalConfig);
    };
    /**
     * @return {?}
     */
    MessageNoticeComponent.prototype.delete = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var selected = this.grid.selectedRow;
        if (!selected) {
            this.message.info('尚未选中消息通知！');
            return;
        }
        this.messageNotices = this.messageNotices.filter((/**
         * @param {?} m
         * @return {?}
         */
        function (m) { return m.id !== selected.id; }));
    };
    /**
     * @return {?}
     */
    MessageNoticeComponent.prototype.clickOK = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var object = { value: this.messageNotices, parameters: null };
        this.submitModal.emit(object);
    };
    /**
     * @return {?}
     */
    MessageNoticeComponent.prototype.clickCancel = /**
     * @return {?}
     */
    function () {
        this.closeModal.emit();
    };
    MessageNoticeComponent.decorators = [
        { type: Component, args: [{
                    selector: 'lib-message-notice',
                    template: "<div class=\"f-page\">\r\n  <div class=\"f-page-header\">\r\n    <nav class=\"f-page-header-base\">\r\n      <div class=\"f-title\">\r\n        <span class=\"f-title-icon f-text-orna-bill\">\r\n          <i class=\"f-icon f-icon-page-title-administer\"></i>\r\n        </span>\r\n        <h4 class=\"f-title-text\">\u5217\u8868</h4>\r\n      </div>\r\n      <div class=\"btn-toolbar btn-group-lg\">\r\n        <button class=\"btn btn-primary mr-2\" (click)=\"add()\">\u65B0\u589E</button>\r\n        <button class=\"btn btn-secondary mr-2\" (click)=\"edit()\">\u7F16\u8F91</button>\r\n        <button class=\"btn btn-secondary\" (click)=\"delete()\">\u5220\u9664</button>\r\n      </div>\r\n    </nav>\r\n  </div>\r\n  <div class=\"f-page-main f-utils-fill-flex-column h-100\">\r\n    <div class=\"f-utils-fill-flex-column farris-overflow-y-auto h-100\">\r\n      <farris-datagrid #grid [data]=\"messageNotices\" [columns]=\"columns\" [idField]=\"'id'\" [fit]=\"true\"\r\n        [fitColumns]=\"true\" [editable]=\"false\" [pagination]=\"false\" [showCheckbox]=\"false\"\r\n        [multiSelect]=\"false\" [showLineNumber]=\"true\" [lineNumberTitle]=\"'\u5E8F\u53F7'\" [lineNumberWidth]=\"50\" \r\n        [striped]=\"true\">\r\n      </farris-datagrid>\r\n    </div>\r\n  </div>\r\n</div>\r\n\r\n<ng-template #iconSelectFooter>\r\n  <button type=\"button\" class=\"btn btn-primary btn-sm px-3 mx-2\" (click)=\"clickOK()\">\u786E\u5B9A</button>\r\n  <button type=\"button\" class=\"btn btn-secondary btn-sm px-3 mx-2\" (click)=\"clickCancel()\">\u53D6\u6D88</button>\r\n</ng-template>\r\n",
                    styles: [""]
                }] }
    ];
    /** @nocollapse */
    MessageNoticeComponent.ctorParameters = function () { return [
        { type: ComponentFactoryResolver },
        { type: Injector },
        { type: BsModalService },
        { type: MessagerService },
        { type: ProcessDesignerUIState }
    ]; };
    MessageNoticeComponent.propDecorators = {
        cls: [{ type: HostBinding, args: ['class',] }],
        closeModal: [{ type: Output }],
        submitModal: [{ type: Output }],
        value: [{ type: Input }],
        editorParams: [{ type: Input }],
        modalFooter: [{ type: ViewChild, args: ['iconSelectFooter',] }],
        grid: [{ type: ViewChild, args: ['grid',] }]
    };
    return MessageNoticeComponent;
}());
export { MessageNoticeComponent };
if (false) {
    /** @type {?} */
    MessageNoticeComponent.prototype.cls;
    /** @type {?} */
    MessageNoticeComponent.prototype.closeModal;
    /** @type {?} */
    MessageNoticeComponent.prototype.submitModal;
    /** @type {?} */
    MessageNoticeComponent.prototype.editorParams;
    /** @type {?} */
    MessageNoticeComponent.prototype.modalFooter;
    /** @type {?} */
    MessageNoticeComponent.prototype.grid;
    /** @type {?} */
    MessageNoticeComponent.prototype.modalConfig;
    /** @type {?} */
    MessageNoticeComponent.prototype.messageNotices;
    /** @type {?} */
    MessageNoticeComponent.prototype.columns;
    /** @type {?} */
    MessageNoticeComponent.prototype.location;
    /**
     * @type {?}
     * @private
     */
    MessageNoticeComponent.prototype.resolver;
    /**
     * @type {?}
     * @private
     */
    MessageNoticeComponent.prototype.injector;
    /**
     * @type {?}
     * @private
     */
    MessageNoticeComponent.prototype.modalService;
    /**
     * @type {?}
     * @private
     */
    MessageNoticeComponent.prototype.message;
    /**
     * @type {?}
     * @private
     */
    MessageNoticeComponent.prototype.uistate;
}
var MessageNoticeConverter = /** @class */ (function () {
    function MessageNoticeConverter() {
    }
    /**
     * @param {?} data
     * @return {?}
     */
    MessageNoticeConverter.prototype.convertTo = /**
     * @param {?} data
     * @return {?}
     */
    function (data) {
        if (data && data.length > 0) {
            return '（已设置）';
        }
        else {
            return '（未设置）';
        }
    };
    return MessageNoticeConverter;
}());
export { MessageNoticeConverter };
//# sourceMappingURL=data:application/json;base64,