import { OnInit, ElementRef, Injector, ComponentFactoryResolver, EventEmitter } from '@angular/core';
import { ProcessTime } from './model/process-time';
import { DomSanitizer } from '@angular/platform-browser';
import { ProcessDesignerUIState } from './app/process-designer.uistate';
import { ProcessDesignerViewModel } from './app/process-designer.viewmodel';
import { BsModalService } from '@farris/ui-modal';
import { ProcessDesignerDataService } from './domain/process-designer.dataservice';
import { LoadingService } from '@farris/ui-loading';
import { NotifyService } from '@farris/ui-notify';
import { MessagerService } from '@farris/ui-messager';
import { WFFlowElementsViewModel } from './app/wf-flowElements.viewModel';
import { PropertyPanelComponent } from '@farris/ui-property-panel';
import { ProcessInfo } from './model/process-info';
import { RTProcessInfo } from './model/rt-process-info';
import { Observable } from 'rxjs';
export declare class WfProcessEditorComponent implements OnInit {
    private sanitizer;
    uiState: ProcessDesignerUIState;
    private viewModel;
    private service;
    private loadService;
    private notify;
    private message;
    private activity;
    private injector;
    private modalService;
    private resolver;
    /**
     * 消息监听处理方法
     */
    private static func;
    src: any;
    private flag;
    cls: string;
    private _time;
    time: ProcessTime;
    processInfo: ProcessInfo;
    rtProcessInfo: RTProcessInfo;
    action: 'view' | 'edit';
    mode: 'general' | 'simplify';
    close: EventEmitter<any>;
    propertyPanel: PropertyPanelComponent;
    iframe: ElementRef;
    constructor(sanitizer: DomSanitizer, uiState: ProcessDesignerUIState, viewModel: ProcessDesignerViewModel, service: ProcessDesignerDataService, loadService: LoadingService, notify: NotifyService, message: MessagerService, activity: WFFlowElementsViewModel, injector: Injector, modalService: BsModalService, resolver: ComponentFactoryResolver);
    ngOnInit(): void;
    private getSrc;
    /**
     * 添加事件监听
     */
    private addMessageListener;
    /**
     * 监听事件处理
     */
    eventHandler: (event: any) => void;
    private updateProperty;
    /**
     * 更新属性
     */
    private updateChangeProperty;
    /**
     * 绑定流程分类的参数列表，流程构件，表单赋值
     * @param data
     */
    private bindEntryFormInfo;
    private note;
    private openProcContent;
    /**
     * 新增流程，基于流程分类获取参数列表，构件和表单
     * @param ffId 流程分类ID
     */
    private openNewProcess;
    private sendMessage;
    private wrapMessage;
    private showTip;
    /**
     * 获取流程上下文
     * @param id 流程定义ID（设计时使用流程定义Key，运行时使用流程定义ID）
     */
    getProcContent(id: string): Observable<any>;
    private save;
    /**
     * 保存流程定义（设计时+运行时）
     */
    private saveHttp;
    showLoading(): void;
    closeLoading(): void;
    private ConvertExecuteForm;
    private formFormat2ExecuteForm;
    private completeStrategyChanged;
    /**
     * 完成策略调整校验
     */
    private beforeCompleteStrategyChange;
    /**
     * 保存，发布，另存，同步操作时
     * 校验模型的流程分类ID与列表存储是否一致，不一致时，以列表为准
     */
    private checkModelContent;
}
